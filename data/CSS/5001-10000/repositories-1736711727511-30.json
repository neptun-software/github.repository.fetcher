{
  "metadata": {
    "timestamp": 1736711727511,
    "page": 30,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tabulapdf/tabula",
      "stars": 6862,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.40625,
          "content": "static/pdfs\nlocal_settings.rb\ntabula.war\n.sass-cache\n\nlib/jars/javacv*\n.ruby-gemset\n\nTEST_PDFS\n.DS_Store\nbuild/Tabula.app\nbuild/tabula.jar\nbuild/tabula-*.zip\nbuild/mac\nbuild/windows\nbuild/tabula\nlaunch4j/\n\n# Based on https://github.com/github/gitignore/blob/master/Ruby.gitignore\n*.gem\n*.rbc\n*.swp\n.bundle\n.config\n.DS_store\ncoverage\nInstalledFiles\nlib/bundler/man\npkg\nrdoc\nspec/reports\ntest/tmp\ntest/version_tmp\ntmp\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.0146484375,
          "content": "jruby-9.2.13.0\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2958984375,
          "content": "sudo: false\nlanguage: ruby\ndist: trusty\nbefore_install:\n  - gem update --system\n  - gem install bundler\n  - gem install jbundler\nrvm:\n  - jruby-9.1.9.0\njdk:\n  - oraclejdk8\n  - openjdk7\nscript: bundle exec jbundle install && bundle exec rake war && bundle exec rake jardist\nnotifications:\n  email: false\n"
        },
        {
          "name": "AUTHORS.md",
          "type": "blob",
          "size": 0.787109375,
          "content": "# Authors & Acknowledgments\n\nTabula was originally started by Manuel Aristarán in late 2012.\n\nThe PRIMARY AUTHORS are (and/or have been):\n\n* Manuel Aristarán - MIT Media Lab (formerly La Nación, Knight-Mozilla OpenNews)\n* Mike Tigas - ProPublica, Knight-Mozilla OpenNews\n* Jeremy B. Merrill - The New York Times (formerly ProPublica)\n* Jason Das, designer <http://jasondas.com>\n* David Frackman\n* Travis Swicegood - Texas Tribune\n\nSpecial thanks to these organizations:\n\n* Knight-Mozilla OpenNews <https://opennews.org/>\n* ProPublica <http://propublica.org>\n* La Nación <http://www.lanacion.com.ar>\n* The New York Times <http://www.nytimes.com>\n* Knight Lab at Northwestern University <http://knightlab.northwestern.edu/>\n* The John S. and James L. Knight Foundation <http://www.knightfoundation.org/>\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.6044921875,
          "content": "CONTRIBUTING\n============\n\nTabula is an open-source project, which means it depends on volunteers to build and improve it.\n\nInterested in helping out? We'd love to have your help!\n\nYou can help by:\n\n- [Reporting a bug](https://github.com/tabulapdf/tabula/issues/new).\n- Adding or editing documentation.\n- Contributing code via a Pull Request from ideas listed in the [Enhancements](https://github.com/tabulapdf/tabula/labels/enhancement) section of the issues.\n- Spreading the word about Tabula to people who might be able to benefit from using it.\n\nDid you have a problem? Guidelines for reporting a bug\n------------------------------------------------------\n\nDid Tabula not work for you? We'd like to know about it. We'd also like to know if Tabula worked, but wasn't as easy or useful as it could be. Here's what you can tell us to so we can help you better.\n\n1. What error message did you get? (We need the whole thing! If it looks like gobbledygook to you, it's probably very useful to us. That's why it's there!)\n2. What steps did you take? The more precise, the better.\n3. What PDF were you trying to extract data from? Some PDFs are wacky, so seeing the exact PDF will be useful. We understand that sometimes PDFs are confidential. If you can share it, just not publicly, send us an email. If you cant', we understand, but might not be able to help you.\n4. What version of Tabula are you using? If you're using an older version, we may have solved the problem already.\n5. What platform are you on? Windows 7 or 8? Mac? Linux? If your computer uses a language other than English or Spanish, we'd like to know that too.\n\nGuidelines for contributing code\n--------------------------------\n\nIf you'd like to contribute code, here's some stuff you should know: You're also welcome to send us a note, if you'd like. All of our email addresses are listed on our Github pages.\n\nTabula comes in a bunch of parts, all located in the [TabulaPDF Github organization](https://github.com/tabulapdf). \n -The [tabula](https://github.com/tabulapdf/tabula) repo is the UI. We aim for it to soon be all front-end, but right now has a small web server, written in Ruby, to interface between the front-end and extractor library, called \"tabula-extractor\"\n - [tabula-java](https://github.com/tabulapdf/tabula-java/) is a pure Java port, for speed/wider usability. \n\nThe [Enhancements](https://github.com/tabulapdf/tabula/labels/enhancement) section of the issues lists some important improvements to Tabula that you could try out. They're well-suited to contributors, since they don't depend on a deep knowledge of all of Tabula's parts and they don't depend on close coordination.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7041015625,
          "content": "FROM jruby:9.2-jdk\n\nRUN apt-get update -qq && apt-get install -y build-essential git \\\n  && apt-get clean && rm -rf /var/lib/apt/lists/*\nRUN echo 'gem: --no-rdoc --no-ri' >> /.gemrc\n\nENV GEM_HOME /usr/local/bundle\nENV PATH $GEM_HOME/bin:$PATH\nRUN gem install bundler -v '< 2' \\\n  && bundle config --global path \"$GEM_HOME\" \\\n  && bundle config --global bin \"$GEM_HOME/bin\"\n\n# don't create \".bundle\" in all our apps\nENV BUNDLE_APP_CONFIG $GEM_HOME\n\nWORKDIR /app\nEXPOSE 9292\nCMD [\"jruby\", \"-G\", \"-r\", \"jbundler\", \"-S\", \"rackup\", \"-o\", \"0.0.0.0\", \"config.ru\"]\n\n# these didn't work as ONBUILD, strangely. Idk why. -JBM\nCOPY Gemfile Gemfile.lock Jarfile Jarfile.lock ./\nRUN bundle install && jruby -S jbundle install\nCOPY . .\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.486328125,
          "content": "#since war/jar bundle requires gem package; use gem-in-a-box for testing\n#or execute tabula via \"rackup\".\n#source \"http://127.0.0.1:9292\"\n\nsource \"https://rubygems.org\"\nplatform :jruby do\n  gem \"cuba\", \"~> 3.9.2\"\n  gem \"rack\", \">= 2.0.6\"\n  gem \"tilt\", \"~> 2.0.8\"\n\n  group :development do\n    gem 'jar-dependencies', '0.3.12'\n    gem 'jbundler', '~> 0.9.3'\n    gem \"rake\"\n    gem \"warbler\", \"~> 2.0.5\"\n    gem \"jruby-jars\", \"9.2.0.0\"\n    gem \"bootstrap-sass\", \">= 3.4.1\"\n    gem \"compass\"\n  end\nend\n"
        },
        {
          "name": "Gemfile.lock",
          "type": "blob",
          "size": 2.0126953125,
          "content": "GEM\n  remote: https://rubygems.org/\n  specs:\n    autoprefixer-rails (9.8.6.3)\n      execjs\n    axiom-types (0.1.1)\n      descendants_tracker (~> 0.0.4)\n      ice_nine (~> 0.11.0)\n      thread_safe (~> 0.3, >= 0.3.1)\n    bootstrap-sass (3.4.1)\n      autoprefixer-rails (>= 5.2.1)\n      sassc (>= 2.0.0)\n    chunky_png (1.3.12)\n    coercible (1.0.0)\n      descendants_tracker (~> 0.0.1)\n    compass (1.0.3)\n      chunky_png (~> 1.2)\n      compass-core (~> 1.0.2)\n      compass-import-once (~> 1.0.5)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n      sass (>= 3.3.13, < 3.5)\n    compass-core (1.0.3)\n      multi_json (~> 1.0)\n      sass (>= 3.3.0, < 3.5)\n    compass-import-once (1.0.5)\n      sass (>= 3.2, < 3.5)\n    cuba (3.9.3)\n      rack (>= 1.6.0)\n    descendants_tracker (0.0.4)\n      thread_safe (~> 0.3, >= 0.3.1)\n    equalizer (0.0.11)\n    execjs (2.7.0)\n    ffi (1.13.1-java)\n    ice_nine (0.11.2)\n    jar-dependencies (0.3.12)\n    jbundler (0.9.3)\n      bundler (~> 1.5)\n      jar-dependencies (~> 0.3)\n      maven-tools (~> 1.1)\n      ruby-maven (~> 3.3, >= 3.3.8)\n    jruby-jars (9.2.0.0)\n    jruby-rack (1.1.21)\n    maven-tools (1.1.6)\n      virtus (~> 1.0)\n    multi_json (1.15.0)\n    rack (2.2.3)\n    rake (13.0.1)\n    rb-fsevent (0.10.4)\n    rb-inotify (0.10.1)\n      ffi (~> 1.0)\n    ruby-maven (3.3.12)\n      ruby-maven-libs (~> 3.3.9)\n    ruby-maven-libs (3.3.9)\n    rubyzip (1.3.0)\n    sass (3.4.25)\n    sassc (2.4.0)\n      ffi (~> 1.9)\n    thread_safe (0.3.6-java)\n    tilt (2.0.10)\n    virtus (1.0.5)\n      axiom-types (~> 0.1)\n      coercible (~> 1.0)\n      descendants_tracker (~> 0.0, >= 0.0.3)\n      equalizer (~> 0.0, >= 0.0.9)\n    warbler (2.0.5)\n      jruby-jars (>= 9.0.0.0)\n      jruby-rack (>= 1.1.1, < 1.3)\n      rake (>= 10.1.0)\n      rubyzip (~> 1.0, < 1.4)\n\nPLATFORMS\n  java\n  ruby\n\nDEPENDENCIES\n  bootstrap-sass (>= 3.4.1)\n  compass\n  cuba (~> 3.9.2)\n  jar-dependencies (= 0.3.12)\n  jbundler (~> 0.9.3)\n  jruby-jars (= 9.2.0.0)\n  rack (>= 2.0.6)\n  rake\n  tilt (~> 2.0.8)\n  warbler (~> 2.0.5)\n\nBUNDLED WITH\n   1.17.3\n"
        },
        {
          "name": "Jarfile",
          "type": "blob",
          "size": 0.0380859375,
          "content": "jar 'technology.tabula:tabula', '1.0.4'"
        },
        {
          "name": "Jarfile.lock",
          "type": "blob",
          "size": 0.66015625,
          "content": "---\n:runtime:\n- org.apache.pdfbox:fontbox:jar:2.0.21\n- org.apache.pdfbox:pdfbox:jar:2.0.21\n- commons-cli:commons-cli:jar:1.4\n- org.apache.pdfbox:jbig2-imageio:jar:3.0.3\n- org.slf4j:slf4j-simple:jar:1.7.30\n- org.bouncycastle:bcpkix-jdk15on:jar:1.66\n- org.bouncycastle:bcprov-jdk15on:jar:1.66\n- org.bouncycastle:bcmail-jdk15on:jar:1.66\n- com.google.code.gson:gson:jar:2.8.6\n- commons-logging:commons-logging:jar:1.2\n- com.github.jai-imageio:jai-imageio-core:jar:1.4.0\n- org.slf4j:slf4j-api:jar:1.7.30\n- technology.tabula:tabula:jar:1.0.4\n- org.apache.commons:commons-csv:jar:1.8\n- com.github.jai-imageio:jai-imageio-jpeg2000:jar:1.3.0\n- org.locationtech.jts:jts-core:jar:1.17.0\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0625,
          "content": "Copyright (C) 2012-2020 Manuel Aristarán <jazzido@jazzido.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is furnished\nto do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "NOTICE.txt",
          "type": "blob",
          "size": 0.2265625,
          "content": "Tabula\n© 2012-2020 Manuel Aristarán. Available under MIT License. See `AUTHORS.md`\nand `LICENSE.md`.\n\nThis product includes software (lib/pdfbox-app-1.8.0.jar) developed at\nThe Apache Software Foundation (http://www.apache.org/).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.7724609375,
          "content": "**Is `tabula` an active project?**\n\nTabula is, and always has been, a volunteer-run project. We've occasionally had funding for specific features, but it's never been a commercial undertaking. At the moment, none of the original authors have the time to actively work on the project. The end-user application, hosted on this repo, is unlikely to see updates from us in the near future. [`tabula-java`](https://github.com/tabulapdf/tabula-java) sees updates and occasional bug-fix releases from time to time.\n\n--\n\n**Repo Note**: The `master` branch is an *in development* version of Tabula. This may be substantially different from the latest [releases of Tabula](https://github.com/tabulapdf/tabula/releases).\n\n---\n\n\n\n# Tabula\n\n[tabula `master`](https://github.com/tabulapdf/tabula/tree/master)\n[![Build Status](https://travis-ci.org/tabulapdf/tabula.svg?branch=master)](https://travis-ci.org/tabulapdf/tabula)  \n\nTabula helps you liberate data tables trapped inside PDF files.\n\n* [Download from the official site](http://tabula.technology/)\n* [Read more about Tabula on OpenNews Source](https://source.opennews.org/en-US/articles/introducing-tabula/)\n* Interested in using Tabula on the command-line? Check out [tabula-java](https://github.com/tabulapdf/tabula-java), a Java library and command-line interface for Tabula. (This is the extraction library that powers Tabula.)\n\n© 2012-2020 Manuel Aristarán. Available under MIT License. See\n[`AUTHORS.md`](AUTHORS.md) and [`LICENSE.md`](LICENSE.md).\n\n-   [Why Tabula?](#why-tabula)\n-   [Using Tabula](#using-tabula)\n-   [Known issues](#known-issues)\n-   [Incorporating Tabula into your own\n    project](#incorporating-tabula-into-your-own-project)\n-   [Running Tabula from source\n    (for developers)](#running-tabula-from-source-for-developers)\n    -   [Building a packaged application\n        version](#building-a-packaged-application-version)\n-   [Contributing](#contributing)\n    -   [Backers](#backers)\n\n## Why Tabula?\n\nIf you’ve ever tried to do anything with data provided to you in PDFs, you\nknow how painful this is — you can’t easily copy-and-paste rows of data out\nof PDF files. Tabula allows you to extract that data in CSV format, through\na simple web interface.\n\n**Caveat**: Tabula only works on text-based PDFs, not scanned documents. If you can click-and-drag to select text in your table in a PDF viewer (even if the output is disorganized trash), then your PDF is text-based and Tabula should work.\n\n**Security Concerns?**: Tabula is designed with security in mind. Your PDF and the extracted data *never* touch the net -- when you use Tabula on your local machine, as long as your browser's URL bar says \"localhost\" or \"127.0.0.1\", all processing takes place on your local machine. Other than to retrieve a few badges and other static assets, there are two calls that are made from your browser to external machines; one fetches the list of latest Tabula versions from GitHub to alert you if Tabula has been updated, the other makes a call to a stats counter that helps us determine how often various versions of Tabula are being used. If this is a problem, the version check can be disabled by adding `-Dtabula.disable_version_check=1` to the command line at startup, and the stats counter call can be disabled by adding `-Dtabula.disable_notifications=1`. Please note: If you are providing Tabula as a service using a reverse SSL proxy, users [may notice a security warning](https://github.com/tabulapdf/tabula/issues/924) due to our stats counter endpoint being hosted at a non-secure URL, so you may wish to disable the notifications in this scenario.\n\n## Using Tabula\n\nFirst, make sure you have a recent copy of Java installed. You can\n[download Java here][jre_download]. Tabula requires\na Java Runtime Environment compatible with Java 7 (i.e. Java 7, 8 or higher).\nIf you have a problem, check [Known Issues](#knownissues) first, then [report an issue](http://www.github.com/tabulapdf/tabula/issues).\n\n* ### Windows\n  Download `tabula-win.zip` from [the download site][tabula_dl]. Unzip the whole thing\n  and open the `tabula.exe` file inside. A browser should automatically open\n  to http://127.0.0.1:8080/ . If not, open your web browser of choice and\n  visit that link.\n\n  To close Tabula, just go back to the console window and press \"Control-C\"\n  (as if to copy).\n\n* ### Mac OS X\n  Download `tabula-mac.zip` from [the download site][tabula_dl]. Unzip and open\n  the Tabula app inside. A browser should automatically open\n  to http://127.0.0.1:8080/ . If not, open your web browser of choice and\n  visit that link.\n\n  To close Tabula, find the Tabula icon in your dock, right-click (or\n  control-click) on it, and press \"Quit\".\n\n  Note: If you’re running Mac OS X 10.8 or later, you might get an error like \"Tabula is damaged and can't be opened.\" We're working on fixing this, but click [here](#gatekeeper) for a workaround.\n\n* ### Other platforms (e.g. Linux)\n  Download `tabula-jar.zip` from [the download site][tabula_dl] and unzip it\n  to the directory of your choice. Open a terminal window, and `cd` to inside\n  the `tabula` directory you just unzipped. Then run:\n\n  `java -Dfile.encoding=utf-8 -Xms256M -Xmx1024M -jar tabula.jar`\n\n  Then manually navigate your browser to http://127.0.0.1:8080/ (New in\n  Tabula 1.1. To go back to the old behavior that automatically launches\n  your web browser, use the `-Dtabula.openBrowser=true` option.\n\n  Tabula binds to port 8080 by default. You can change it with the `warbler.port` option; for example, to use port 9999:\n\n  `java -Dfile.encoding=utf-8 -Xms256M -Xmx1024M -Dwarbler.port=9999 -jar tabula.jar`\n\n* ### [Docker Compose](https://docs.docker.com/compose/) quick start using [Amazon Correttto](https://github.com/corretto) image\n  Make a new directory e.g. `tabulapdf` and enter it.\n  \n  `mkdir -p /opt/docker/tabulapdf`\n  `cd /opt/docker/tabulapdf`\n  \n  Download tabula-jar package - for example version 1.2.1\n  \n  `wget https://github.com/tabulapdf/tabula/releases/download/v1.2.1/tabula-jar-1.2.1.zip`\n  \n  verify checksum (compare output with the release page)\n\n  `sha256sum tabula-jar-1.2.1.zip`\n  \n  and unzip it.\n  \n  `unzip tabula-jar-1.2.1.zip`\n  \n  Place or create a `docker-compose.yml` file, adjust accordingly\n  \n  ```\n  ### tabulapdf docker-compose.yml example ###\n  services:\n  tabulapdf:\n    image: amazoncorretto:17\n    container_name: tabulapdf-app\n    command: >\n      java -Dfile.encoding=utf-8 -Xms256M -Xmx1024M -Dwarbler.port=8080 -Dtabula.openBrowser=false -jar /app/tabula.jar\n    volumes:\n      - ./tabula:/app\n    ports:\n      - \"8080:8080\"\n  ```\n  \n  Run the app with\n  \n  `docker compose up -d`\n  \n  The app will be exposed on port 8080 and can be easily paired with a reverse proxy e.g. traefik\n\nIf the program fails to run, double-check that you have [Java installed][jre_download]\nand then try again.\n\n[jre_download]: https://www.java.com/download/\n[tabula_dl]: http://tabula.technology\n\n\n\n## <a name=\"knownissues\">Known issues</a>\n\nThere are some bugs that we're aware of that we haven't managed to fix yet. If there's not a solution here or you need more help, please go ahead and [report an issue](http://www.github.com/tabulapdf/tabula/issues).\n\n\n* <a name='legacy'>**Legacy Java Environment (SE 6) Is Required:**</a> (Mac):\n  The Mac operating system recently changed how it packages the Java Runtime Environment. If you get this error, download Tabula's [\"large experimental\" package](https://github.com/tabulapdf/tabula/releases/download/v0.9.7/tabula-mac-0.9.7-large-experimental.zip). This package includes its own Java Runtime Environment and should work without this issue.\n\n* <a name='gatekeeper'>**\"Tabula is damaged and can't be opened\"** (Mac)</a>:\n  If you’re running Mac OS X 10.8 or later, GateKeeper may prevent you from opening\n  the Tabula app. Please [see this GateKeeper page][gatekeeper] for more information.\n\n  1. Right-click on Tabula.app and select Open from the context menu.\n  2. The system will tell you that the application is \"from an unidentified developer\" and ask you whether you want to open it. Click Open to allow the application to run. The system remembers this choice and won't prompt you again.\n\n  (If you continue to have issues, double-check the [OS X GateKeeper documentation][gatekeeper] for more information.)\n\n[gatekeeper]: http://support.apple.com/kb/HT5290\n\n* <a name='encoding'>**org.jruby.exceptions.RaiseException: (Encoding::CompatibilityError) incompatible character encodings:**</a> (Windows):\n  Your Windows computer expects a type of encoding other than Unicode or Windows's English encoding. You can fix this by entering a few simple commands in the Command Prompt. (The commands won't affect anything besides Tabula.)\n\n  1. Open a Command Prompt\n  2. type `cd` and then the path to the directory that contains `tabula.exe`, e.g. `cd C:\\Users\\Username\\Downloads`\n  3. Change that terminal's codepage to Unicode by typing: `chcp 65001`\n  4. Run Tabula by typing `tabula.exe`\n\n* <a name='portproblems'>**A browser tab opens, but something other than Tabula loads there. Or Tabula doesn't start.**</a>\n  It's possible another program is using port 8080, which Tabula binds to by default. You can try closing the other program, or change the port Tabula uses by running Tabula from the terminal with the `warbler.port` property:\n\n  `java -Dfile.encoding=utf-8 -Xms256M -Xmx1024M -Dwarbler.port=9999 -jar tabula.jar`\n\n## Incorporating Tabula into your own project\n\nTabula is open-source, so we'd love for you to incorporate pieces of Tabula into your own projects. The \"guts\" of Tabula -- that is, the logic and heuristics that reconstruct tables from PDFs -- is contained in the [tabula-java](https://github.com/tabulapdf/tabula-java/) repo. There's a JAR file that you can easily incorporate into JVM languages like Java, Scala or Clojure and it includes a command-line tool for you to automate your extraction tasks. Visit that repo for more information on how to use `tabula-java` on the CLI and on how Tabula exports `tabula-java` scripts.\n\n### Bindings:\n\nTabula has bindings for JRuby and R. If you end up writing bindings for another language, let us know and we'll add a link here.\n\n - [tabulizer](https://github.com/leeper/tabulizer) provides [R](https://www.r-project.org/) bindings for tabula-java and is community-supported by [@leeper](https://github.com/leeper).\n - [tabula-js](https://github.com/ezodude/tabula-js) provides [Node.js](https://nodejs.org/en/) bindings for tabula-java; it is community-supported by [@ezodude](https://github.com/ezodude).\n - [tabula-py](https://github.com/chezou/tabula-py) provides [Python](https://python.org) bindings for tabula-java; it is community-supported by [@chezou](https://github.com/chezou).\n - [tabula-extractor](https://github.com/tabulapdf/tabula-extractor/) *DEPRECATED* - Provides JRuby bindings for tabula-java\n\n\n\n\n## Running Tabula from source (for developers)\n\n1. Download JRuby. You can install it from its website, or using tools like\n   `rvm` or `rbenv`. Note that as of Tabula 1.1.0 (7875582becb2799b65586d5680782cafd399bb33), Tabula uses the JRuby 9000 series (i.e. JRuby 9.1.5.0).\n\n2. Download Tabula and install the Ruby dependencies. (Note: if using `rvm` or\n   `rbenv`, ensure that JRuby is being used.\n\n    ~~~\n    git clone git://github.com/tabulapdf/tabula.git\n    cd tabula\n\n    gem install bundler -v 1.17.3\n    bundle install\n    jruby -S jbundle install\n    ~~~\n\n**Then, start the development server:**\n\n    jruby -G -r jbundler -S rackup\n\n(If you get encoding errors, set the `JAVA_OPTS` environment variable to `-Dfile.encoding=utf-8`)\n\nThe site instance should now be viewable at http://127.0.0.1:9292/ .\n\nYou can a couple some options when executing the server in this manner:\n\n    TABULA_DATA_DIR=\"/tmp/tabula\" \\\n    TABULA_DEBUG=1 \\\n    jruby -G -r jbundler -S rackup\n\n* `TABULA_DATA_DIR` controls where uploaded data for Tabula is stored. By default,\n  data is stored in the OS-dependent application data directory for the current\n  user. (similar to: `C:\\Users\\foo\\AppData\\Roaming\\Tabula` on Windows,\n  `~/Library/Application Support/Tabula` on Mac, `~/.tabula` on Linux/UNIX)\n* `TABULA_DEBUG` prints out extra status data when PDF files are being processed.\n   (`false` by default.)\n\n**Alternatively, running the server as a JAR file**\n\nTesting in this manner will be closer to testing the \"packaged application\"\nversion of the app.\n\n    jruby -G -S rake war\n    java -Dfile.encoding=utf-8 -Xms256M -Xmx1024M -jar build/tabula.jar\n\n\nIf you intend to develop against an unreleased version of [`tabula-java`](https://github.com/tabulapdf/tabula-java), you need to install its JAR to your local Maven repository. From the directory that contains `tabula-java` source:\n\n    mvn install:install-file -Dfile=target/tabula-<version>-SNAPSHOT.jar -DgroupId=technology.tabula -DartifactId=tabula -Dversion=<version>-SNAPSHOT -Dpackaging=jar -DpomFile=pom.xml\n\nThen, adjust the `Jarfile` accordingly.\n\n### Building a packaged application version\n\nAfter performing the above steps (\"Running Tabula from source\"), you can compile\nTabula into a standalone application:\n\n**Mac OS X**\n\nIf you wish to share Tabula with other machines, you will need a codesigning certificate.\nOur distribution of Tabula uses a self-signed certificate, as noted above. See\n[this section of build.xml][buildxml_cert] for details. If you will only be running Tabula\non the machine you are building it on, you may remove this entire <exec> block (lines 44-53).\n\nTo compile the app:\n\n    WEBSERVER_VERSION=9.4.31.v20200723 MAVEN_REPO=https://repo1.maven.org/maven2 rake macosx\n\nThis will result in a portable \"tabula_mac.zip\" archive (inside the `build` directory)\nfor Mac OS X users.\n\nNote that the Mac version bundles Java with the Tabula app.\nThis results in a 98MB zip file, versus the 30MB zip file for other platforms,\nbut allows users to run Tabula without having to worry about [Java version\nincompatibilities](https://github.com/tabulapdf/tabula/issues/237).\n\n[buildxml_cert]: https://github.com/tabulapdf/tabula/blob/master/build.xml#L44-53\n\n**Windows**\n\nYou can build .exe files for the Windows target on any platform.\n\nDownload a [3.1.X (beta) copy of Launch4J][launch4j].\n\nUnzip it into the Tabula repo so that \"launch4j\" (with subdirectories \"bin\", etc.)\nis in the repository root.\n\n(If you're building on a 64bit Linux, you may need to install 32bit libs like, in Ubuntu `sudo apt-get install lib32z1 lib32ncurses5`)\n\n\nThen:\n\n    WEBSERVER_VERSION=9.4.31.v20200723 MAVEN_REPO=https://repo1.maven.org/maven2 rake windows\n\nThis will result in a portable \"tabula_win.zip\" archive (inside the `build` directory)\nfor Mac OS X users.\n\n---\n\nIf you have issues, you can try building manually. (These commands are for\nOS X/Linux and may need to be adjusted for Windows users.)\n\n    # (from the root directory of the repo)\n    WEBSERVER_VERSION=9.4.31.v20200723 MAVEN_REPO=https://repo1.maven.org/maven2 rake war\n    cd launch4j\n    ant -f ../build.xml windows\n\nA \"tabula.exe\" file will be generated in \"build/windows\". To run, the exe file\nneeds \"tabula.jar\" (contained in \"build\") in the same directory. You can create a\n.zip archive by doing:\n\n    # (from the root directory of the repo)\n    cd build/windows\n    mkdir tabula\n    cp tabula.exe ./tabula/\n    cp ../tabula.jar ./tabula/\n    zip -r9 tabula_win.zip tabula\n    rm -fr tabula\n\n[launch4j]: http://sourceforge.net/projects/launch4j/files/launch4j-3/3.1.0-beta1/\n\n## Contributing\n\nInterested in helping out? We'd love to have your help!\n\nYou can help by:\n\n- [Reporting a bug](https://github.com/tabulapdf/tabula/issues).\n- Adding or editing documentation.\n- Contributing code via a Pull Request from ideas or bugs listed in the [Enhancements](https://github.com/tabulapdf/tabula/labels/enhancement) section of the issues. [see `CONTRIBUTING.md`](CONTRIBUTING.md)\n- Spreading the word about Tabula to people who might be able to benefit from using it.\n\n### Backers\n\nYou can also support our continued work on Tabula with a one-time or monthly donation [on OpenCollective](https://opencollective.com/tabulapdf#support). Organizations who use Tabula can also [sponsor the project](https://opencollective.com/tabulapdf#support) for acknowledgement on [our official site](http://tabula.technology/) and this README.\n\nTabula is made possible in part through <a href=\"https://opencollective.com/tabulapdf\">the generosity of our users</a> and through grants from the <a href=\"http://www.knightfoundation.org/\">Knight Foundation</a> and the <a href=\"https://shuttleworthfoundation.org/\">Shuttleworth Foundation</a>. Special thanks to all the users and organizations that support Tabula!\n\n<a href=\"https://opencollective.com/tabulapdf/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/0/avatar\"></a>\n<a href=\"https://opencollective.com/tabulapdf/backer/1/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/1/avatar\"></a>\n<a href=\"https://opencollective.com/tabulapdf/backer/2/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/2/avatar\"></a>\n<a href=\"https://opencollective.com/tabulapdf/backer/3/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/3/avatar\"></a>\n<a href=\"https://opencollective.com/tabulapdf/backer/4/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/4/avatar\"></a>\n<a href=\"https://opencollective.com/tabulapdf/backer/5/website\" target=\"_blank\"><img src=\"https://opencollective.com/tabulapdf/backer/5/avatar\"></a>\n\n<a title=\"The John S. and James L. Knight Foundation\" href=\"http://www.knightfoundation.org/\" target=\"_blank\"><img width=\"220\" alt=\"The John S. and James L. Knight Foundation\" src=\"http://www.knightfoundation.org/media/uploads/media_images/knight-logo-300.jpg\"></a>\n<a title=\"The Shuttleworth Foundation\" href=\"https://shuttleworthfoundation.org/\" target=\"_blank\"><img width=\"200\" alt=\"The Shuttleworth Foundation\" src=\"https://raw.githubusercontent.com/tabulapdf/tabula/gh-pages/shuttleworth.jpg\"></a>\n\nMore acknowledgments can be found in [`AUTHORS.md`](AUTHORS.md).\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 7.2138671875,
          "content": "require 'fileutils'\nrequire 'warbler'\n\n########## java jar compilation ##########\n\nWarbler::Task.new(\"war\",\n  Warbler::Config.new { |config|\n    config.features = %w(executable)\n    config.jar_name = 'build/tabula'\n    config.jar_extension = 'jar'\n    config.webserver = \"jetty\"\n    config.webxml.jruby.compat.version = \"1.9\"\n    config.webxml.jruby.rack.logging = \"stderr\"\n    config.dirs = ['lib', 'webapp']\n    config.override_gem_home = false\n    config.init_contents << StringIO.new(\"\\nGem.clear_paths\\nGem.path\\n\\n\")\n  }\n)\n\n# version we're building\ndef build_version\n  ENV['TABULA_VERSION'] || \"rev#{`git rev-list --max-count=1 HEAD`.strip}\"\nend\n\ndef invoke_ant(*args)\n  IO.popen(\"ant #{args.join(' ')}\") { |f|\n    yield f\n  }\nend\n\n########## distribution bundles ##########\ntask :create_version_file do |t|\n  puts \"Creating version file (#{build_version})...\"\n  tabula_dir = File.expand_path(File.dirname(__FILE__))\n  rb_file = <<-eos\n    $TABULA_VERSION = \"#{build_version}\"\n  eos\n  File.open(File.join(tabula_dir, 'webapp', 'tabula_version.rb'), 'wb') do |f|\n    f.write rb_file\n  end\nend\n\ntask :delete_version_file do |t|\n  tabula_dir = File.expand_path(File.dirname(__FILE__))\n  FileUtils.rm(File.join(tabula_dir, 'webapp', 'tabula_version.rb'))\nend\n\n\ntask :jardist => [:create_version_file, :war] do |t|\n  tabula_dir = File.expand_path(File.dirname(__FILE__))\n  build_dir = File.join(tabula_dir, \"build\")\n  dist_dir = File.join(build_dir, \"jardist\", \"tabula\")\n\n  if File.exist?(File.join(build_dir, \"jardist\"))\n    FileUtils.rm_rf(File.join(build_dir, \"jardist\"))\n  end\n\n  puts \"\\n======================================================\"\n  puts \"Building jar zip file bundle...\"\n  puts \"======================================================\\n\\n\"\n\n  Dir.mkdir(File.join(build_dir, \"jardist\"))\n  Dir.mkdir(File.join(build_dir, \"jardist\", \"tabula\"))\n\n  jar_src = File.join(build_dir, \"tabula.jar\")\n  jar_dst = File.join(dist_dir, \"tabula.jar\")\n  FileUtils.cp(jar_src, jar_dst)\n\n  readme_src = File.join(build_dir, \"dist-README.txt\")\n  readme_dst = File.join(dist_dir, \"README.txt\")\n  FileUtils.cp(readme_src, readme_dst)\n\n  lic_src = File.join(build_dir, \"dist-LICENSE.txt\")\n  lic_dst = File.join(dist_dir, \"LICENSE.txt\")\n  FileUtils.cp(lic_src, lic_dst)\n\n  authors_src = File.join(tabula_dir, \"AUTHORS.md\")\n  authors_dst = File.join(dist_dir, \"AUTHORS.txt\")\n  FileUtils.cp(authors_src, authors_dst)\n\n  cd File.join(build_dir, \"jardist\")\n  output = File.join(build_dir, \"tabula-jar-#{build_version}.zip\")\n  if File.exists?(output)\n    File.delete(output)\n  end\n\n  IO.popen(\"zip -r9 #{output} tabula\") { |f|\n    f.each { |line| puts line }\n  }\n  FileUtils.rm_rf(dist_dir)\n  puts \"\\n======================================================\"\n  puts \"Zip file saved to #{output}\"\n  puts \"======================================================\\n\\n\"\nend\n\n\ntask :macosx => [:create_version_file, :war] do |t|\n  tabula_dir = File.expand_path(File.dirname(__FILE__))\n  build_dir = File.join(tabula_dir, \"build\")\n  dist_dir = File.join(build_dir, \"mac\", \"tabula\")\n\n  cd File.join(tabula_dir)\n\n  if File.exist?(File.join(build_dir, \"mac\"))\n    FileUtils.rm_rf(File.join(build_dir, \"mac\"))\n  end\n\n  puts \"\\n======================================================\"\n  puts \"Building Mac OS X app...\"\n  puts \"======================================================\\n\\n\"\n\n  invoke_ant(\"-Dfull_version=#{build_version}\", \"-v\", \"macbundle\") { |f|\n    f.each { |line| puts line }\n  }\n\n\n  puts \"\\n======================================================\"\n  puts \"Creating zip file bundle...\"\n  puts \"======================================================\\n\\n\"\n\n  Dir.mkdir(dist_dir)\n\n  app_src = File.join(build_dir, \"mac\", \"Tabula.app\")\n  app_dst = File.join(dist_dir, \"Tabula.app\")\n  FileUtils.mv(app_src, app_dst)\n\n  readme_src = File.join(build_dir, \"dist-README.txt\")\n  readme_dst = File.join(dist_dir, \"README.txt\")\n  FileUtils.cp(readme_src, readme_dst)\n\n  lic_src = File.join(build_dir, \"dist-LICENSE.txt\")\n  lic_dst = File.join(dist_dir, \"LICENSE.txt\")\n  FileUtils.cp(lic_src, lic_dst)\n\n  authors_src = File.join(tabula_dir, \"AUTHORS.md\")\n  authors_dst = File.join(dist_dir, \"AUTHORS.txt\")\n  FileUtils.cp(authors_src, authors_dst)\n\n  cd File.join(build_dir, \"mac\")\n  output = File.join(build_dir, \"tabula-mac-#{build_version}.zip\")\n  if File.exists?(output)\n    File.delete(output)\n  end\n\n  IO.popen(\"zip -r9 #{output} tabula\") { |f|\n    f.each { |line| puts line }\n  }\n  FileUtils.rm_rf(dist_dir)\n  puts \"\\n======================================================\"\n  puts \"Zip file saved to #{output}\"\n  puts \"======================================================\\n\\n\"\nend\n\n\ntask :windows => [:create_version_file, :war] do |t|\n  tabula_dir = File.expand_path(File.dirname(__FILE__))\n  build_dir = File.join(tabula_dir, \"build\")\n  dist_dir = File.join(build_dir, \"windows\", \"tabula\")\n\n  if File.exist?(File.join(build_dir, \"windows\"))\n    FileUtils.rm_rf(File.join(build_dir, \"windows\"))\n  end\n\n  cd File.join(tabula_dir)\n\n  puts \"\\n======================================================\"\n  puts \"Building Windows executable...\"\n  puts \"======================================================\\n\\n\"\n\n  # exe files REALLY need x.x.x.x otherwise the compile fails.\n  if build_version.start_with?('rev')\n    win_build_version = '0.0.0.0'\n  else\n    win_build_version = build_version\n    while win_build_version.split('.').length < 4\n      win_build_version = \"#{win_build_version}.0\"\n    end\n  end\n\n  cd File.join(File.expand_path(File.dirname(__FILE__)), \"launch4j\")\n  invoke_ant(\"-Dfull_version=#{win_build_version}\", \"-f\", \"../build.xml\", \"windows\") { |f|\n    f.each { |line| puts line }\n  }\n  puts \"\\n======================================================\"\n  puts \"Creating zip file bundle...\"\n  puts \"======================================================\\n\\n\"\n\n  Dir.mkdir(dist_dir)\n\n  app_src = File.join(build_dir, \"windows\", \"tabula.exe\")\n  app_dst = File.join(dist_dir, \"tabula.exe\")\n  FileUtils.mv(app_src, app_dst)\n\n  jar_src = File.join(build_dir, \"tabula.jar\")\n  jar_dst = File.join(dist_dir, \"tabula.jar\")\n  FileUtils.cp(jar_src, jar_dst)\n\n  readme_src = File.join(build_dir, \"dist-README.txt\")\n  readme_dst = File.join(dist_dir, \"README.txt\")\n  FileUtils.cp(readme_src, readme_dst)\n\n  lic_src = File.join(build_dir, \"dist-LICENSE.txt\")\n  lic_dst = File.join(dist_dir, \"LICENSE.txt\")\n  FileUtils.cp(lic_src, lic_dst)\n\n  authors_src = File.join(tabula_dir, \"AUTHORS.md\")\n  authors_dst = File.join(dist_dir, \"AUTHORS.txt\")\n  FileUtils.cp(authors_src, authors_dst)\n\n  cd File.join(build_dir, \"windows\")\n  output = File.join(build_dir, \"tabula-win-#{build_version}.zip\")\n  if File.exists?(output)\n    File.delete(output)\n  end\n\n  IO.popen(\"zip -r9 #{output} tabula\") { |f|\n    f.each { |line| puts line }\n  }\n  FileUtils.rm_rf(dist_dir)\n  puts \"\\n======================================================\"\n  puts \"Zip file saved to #{output}\"\n  puts \"======================================================\\n\\n\"\nend\n\ntask :build_all_platforms => [:create_version_file, :war] do |t|\n  ['jardist', 'macosx', 'windows'].each do |platform|\n    Rake::Task[platform].execute\n    puts\n  end\nend\n\n# delete version file after build\n['jardist', 'macosx', 'windows'].each do |t|\n  puts \"Deleting version file.\"\n  Rake::Task[t.intern].enhance {\n    Rake::Task['delete_version_file'.intern].invoke\n  }\nend\n"
        },
        {
          "name": "build.xml",
          "type": "blob",
          "size": 3.8759765625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project name=\"tabula\" default=\"build\" basedir=\".\">\n\n  <property file=\"build.properties\"/>\n  <property name=\"build.dir\" value=\"build\"/>\n  <property name=\"mac.dir\" value=\"${build.dir}/mac\" />\n  <property name=\"windows.dir\" value=\"${build.dir}/windows\" />\n  <property name=\"full_version\" value=\"1.2.1.18052200\"/>\n  <property name=\"launch4j.dir\" location=\"${build.dir}/../launch4j\"  />\n  <property name=\"launch4j.bindir\" location=\"${build.dir}/../launch4j/bin\" />\n\n  <target name=\"check-jar-exists\">\n    <available file=\"${build.dir}/tabula.jar\" property=\"jar.exists\"/>\n  </target>\n\n  <target name=\"macbundle\" depends=\"check-jar-exists\" if=\"jar.exists\">\n    <mkdir dir=\"${mac.dir}\"/>\n\n    <!-- this must be a real JDK -->\n    <property name=\"java_home\" value=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\"/>\n\n    <taskdef\n        name=\"bundleapp\"\n        classname=\"com.oracle.appbundler.AppBundlerTask\"\n        classpath=\"${build.dir}/appbundler-1.0.jar\"\n        />\n\n    <bundleapp\n        outputdirectory=\"${build.dir}/mac\"\n        name=\"Tabula\"\n        displayname=\"Tabula\"\n        identifier=\"org.nerdpower.tabula.Tabula\"\n        icon=\"${build.dir}/icons/tabula.icns\"\n        shortversion=\"${full_version}\"\n        mainclassname=\"WarMain\"\n      >\n        <runtime dir=\"${java_home}\" />\n        <classpath file=\"${build.dir}/tabula.jar\" />\n        <option value=\"-Dapple.laf.useScreenMenuBar=true\"/>\n        <option value=\"-Dwarbler.port=8080\"/>\n        <option value=\"-Dtabula.openBrowser=true\"/>\n    </bundleapp>\n    <!--\n    To allow OSX to use this, you'll need to code sign.\n    Generate a self-signed \"Code Signing\" certificate[1], then enter\n    it in the -s option here and edit below section. Users can then\n    right-click or Control-click the app and \"Open\" and then tell OS X to\n    open anyway[2].\n      [1]: http://support.apple.com/kb/PH7173\n      [2]: http://support.apple.com/kb/HT5290\n\n    For production builds, you can get rid of \"Unidentified Developer\"\n    warnings by having a Mac Developer Account and a cert from[3]. Then\n    change -s option to something like 'Developer ID Application: Mike Tigas (68QUP6KP2C)',\n    based on your Developer Account & cert.\n      [3]: https://developer.apple.com/account/mac/certificate/certificateList.action\n    -->\n    <exec executable=\"codesign\" os=\"Mac OS X\">\n      <arg line=\"-f -s 'Developer ID Application: Mike Tigas (68QUP6KP2C)' --deep ${build.dir}/mac/Tabula.app\" />\n      <!-- <arg line=\"-f -s 'Tabula' ${build.dir}/mac/Tabula.app\" /> -->\n    </exec>\n  </target>\n\n  <target name=\"windows\" depends=\"check-jar-exists\" if=\"jar.exists\">\n    <mkdir dir=\"${windows.dir}\"/>\n    <taskdef\n        name=\"launch4j\"\n        classname=\"net.sf.launch4j.ant.Launch4jTask\"\n        classpath=\"${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar\"\n        />\n    <launch4j bindir=\"${launch4j.bindir}\">\n      <config\n          headerType=\"console\"\n          outfile=\"${windows.dir}/tabula.exe\"\n          jarPath=\"tabula.jar\"\n          dontWrapJar=\"true\"\n          icon=\"${build.dir}/icons/tabula.ico\">\n        <classPath mainClass=\"WarMain\">\n          <cp>tabula.jar</cp>\n        </classPath>\n        <jre minVersion=\"1.6.0\" jdkPreference=\"preferJre\" initialHeapSize=\"256\" maxHeapSize=\"1024\">\n          <opt>-Dfile.encoding=utf-8</opt>\n          <opt>-Dwarbler.port=8080</opt>\n          <opt>-Dtabula.openBrowser=true</opt>\n        </jre>\n        <versionInfo\n            fileVersion=\"${full_version}\"\n            txtFileVersion=\"${full_version}\"\n            fileDescription=\"tabula\"\n            copyright=\"© 2012-2020 Manuel Aristarán\"\n            productVersion=\"${full_version}\"\n            txtProductVersion=\"${full_version}\"\n            productName=\"Tabula\"\n            companyName=\"Tabula Team\"\n            internalName=\"tabula\"\n            originalFilename=\"tabula.exe\"\n            />\n      </config>\n    </launch4j>\n  </target>\n</project>\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.rb",
          "type": "blob",
          "size": 0.94140625,
          "content": "require 'compass/import-once/activate'\n# Require any additional compass plugins here.\nrequire 'bootstrap-sass'\n# Set this to the root of your project when deployed:\nhttp_path = \"webapp/\"\ncss_dir = \"webapp/static/css\"\nsass_dir = \"webapp/static/sass\"\nimages_dir = \"webapp/static/img\"\njavascripts_dir = \"webapp/static/js\"\n\n# You can select your preferred output style here (can be overridden via the command line):\n# output_style = :expanded or :nested or :compact or :compressed\n\n# To enable relative paths to assets via compass helper functions. Uncomment:\n# relative_assets = true\n\n# To disable debugging comments that display the original location of your selectors. Uncomment:\nline_comments = false\n\n\n# If you prefer the indented syntax, you might want to regenerate this\n# project again passing --syntax sass, or you can uncomment this:\n# preferred_syntax = :sass\n# and then run:\n# sass-convert -R --from scss --to sass sass scss && rm -rf sass && mv scss sass\n"
        },
        {
          "name": "config.ru",
          "type": "blob",
          "size": 3.4013671875,
          "content": "# encoding: UTF-8\nrequire 'rubygems'\nrequire 'bundler'\nBundler.require\n\n# Disable LittleCMS when running in JVM >= 1.8\n# https://pdfbox.apache.org/2.0/getting-started.html\njvmajor, jvminor = java.lang.System.getProperty('java.specification.version').split('.')\nif !jvminor.nil? && jvminor.to_i >= 8\n  java.lang.System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\")\nend\n\nrequire_relative './webapp/tabula_settings.rb'\nrequire_relative './webapp/tabula_web.rb'\n\npotential_root_uri_without_slashes = (defined?($servlet_context) ? $servlet_context.getContextPath : ENV[\"ROOT_URI\"])\n\nif potential_root_uri_without_slashes.nil? || potential_root_uri_without_slashes == ''\n  ROOT_URI = '/'\nelse\n  ROOT_URI = (potential_root_uri_without_slashes[0] == \"/\" ? '' : '/') + potential_root_uri_without_slashes +  (potential_root_uri_without_slashes[-1] == \"/\" ? '' : '/')\nend\n\nputs \"running under #{ROOT_URI} as root URI\" \n\n\nmap ROOT_URI do \n  run Cuba\nend\n\nif \"#{$PROGRAM_NAME}\".include?(\"tabula.jar\")\n  # only do this if running as jar or app. (if \"rackup\", we don't\n  # actually use 8080 by default.)\n\n  require 'java'\n\n  # don't do \"java_import java.net.URI\" -- it conflicts with Ruby URI and\n  # makes Cuba/Rack really really upset. just call \"java.*\" classes\n  # directly.\n  port = java.lang.Integer.getInteger('warbler.port', 8080)\n  url = \"http://127.0.0.1:#{port}\"\n\n  puts \"============================================================\"\n  puts url\n  puts \"============================================================\"\n\n  # Open browser after slight delay. (The server may take a while to actually\n  # serve HTTP, so we are trying to avoid a \"Could Not Connect To Server\".)\n  uri = java.net.URI.new(url)\n  sleep 0.5\n\n  puts \"should we open browser?\"\n  puts \"java.lang.Boolean.getBoolean('tabula.openBrowser'): #{java.lang.Boolean.getBoolean('tabula.openBrowser')}\"\n  have_desktop = false\n  if java.lang.Boolean.getBoolean('tabula.openBrowser')\n    puts \"java.awt.Desktop.isDesktopSupported: #{java.awt.Desktop.isDesktopSupported}\"\n    if java.awt.Desktop.isDesktopSupported\n      begin\n        desktop = java.awt.Desktop.getDesktop()\n      rescue\n        puts \"java.awt.Desktop.getDesktop(): no\"\n        desktop = nil\n      else\n        puts \"java.awt.Desktop.getDesktop(): yes\"\n        have_desktop = true\n      end\n    end\n  end\n\n  # if running as a jar or app, automatically open the user's web browser if\n  # the system supports it.\n  if have_desktop\n    puts \"\\n======================================================\"\n    puts \"Launching web browser to #{url}\\n\\n\"\n\n    begin\n      desktop.browse(uri)\n    rescue\n      puts \"Unable to launch your web browser, you will have to\"\n      puts \"manually open it to the above URL.\"\n    else\n      puts \"If it does not open in 10 seconds, you may manually open\"\n      puts \"a web browser to the above URL.\"\n    end\n\n    puts \"When you're done using the Tabula interface, you may\"\n    puts \"return to this window and press \\\"Control-C\\\" to close it.\"\n    puts \"======================================================\\n\\n\"\n  else\n    puts \"\\n======================================================\"\n    puts \"Server now listening at: #{url}\\n\\n\"\n    puts \"You may now open a web browser to the above URL.\"\n    puts \"When you're done using the Tabula interface, you may\"\n    puts \"return to this window and press \\\"Control-C\\\" to close it.\"\n    puts \"======================================================\\n\\n\"\n  end\nend\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.244140625,
          "content": "version: '3.3'\nservices:\n  web: &web\n    build:\n      context: .\n    command: \"jruby -G -r jbundler -S rackup -p 9292 -o 0.0.0.0 config.ru\"\n    volumes:\n      - .:/app\n      - bundle:/usr/local/bundle\n    ports:\n      - 9292:9292\n\nvolumes:\n  bundle:\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "webapp",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}