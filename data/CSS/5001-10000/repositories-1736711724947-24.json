{
  "metadata": {
    "timestamp": 1736711724947,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HubSpot/odometer",
      "stars": 7319,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0244140625,
          "content": "node_modules\n.sass-cache/"
        },
        {
          "name": ".hsdoc",
          "type": "blob",
          "size": 0.109375,
          "content": "title: \"Odometer\"\nsource: \"odometer.coffee\"\nexamples: \"**/*.md\"\nassets: \"{docs/welcome/*,odometer.js,themes/*}\"\n"
        },
        {
          "name": "Gruntfile.coffee",
          "type": "blob",
          "size": 0.9296875,
          "content": "Path = require('path')\nfs = require('fs')\n\nmodule.exports = (grunt) ->\n  grunt.initConfig\n    pkg: grunt.file.readJSON(\"package.json\")\n\n    coffee:\n      compile:\n        files:\n          'odometer.js': 'odometer.coffee'\n          'docs/welcome/landing-page.js': 'docs/welcome/landing-page.coffee'\n\n    watch:\n      coffee:\n        files: ['odometer.coffee', 'docs/welcome/landing-page.coffee', 'sass/*']\n        tasks: [\"coffee\", \"uglify\", \"compass\"]\n\n    uglify:\n      options:\n        banner: \"/*! <%= pkg.name %> <%= pkg.version %> */\\n\"\n\n      dist:\n        src: 'odometer.js'\n        dest: 'odometer.min.js'\n\n    compass:\n      dist:\n        options:\n          sassDir: 'sass'\n          cssDir: 'themes'\n\n  grunt.loadNpmTasks 'grunt-contrib-watch'\n  grunt.loadNpmTasks 'grunt-contrib-uglify'\n  grunt.loadNpmTasks 'grunt-contrib-coffee'\n  grunt.loadNpmTasks 'grunt-contrib-compass'\n\n  grunt.registerTask 'default', ['coffee', 'uglify', 'compass']\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2013 HubSpot, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.2119140625,
          "content": "Odometer\n========\n\nOdometer is a Javascript and CSS library for smoothly transitioning numbers.\n\n### [Overview](http://github.hubspot.com/odometer/docs/welcome)\n### [Docs and Demo](http://github.hubspot.com/odometer)\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.5478515625,
          "content": "{\n  \"name\": \"odometer\",\n  \"main\": \"odometer.js\",\n  \"version\": \"0.4.8\",\n  \"homepage\": \"http://github.hubspot.com/odometer/docs/welcome\",\n  \"authors\": [\n    \"Zack Bloom <zbloom@hubspot.com>\",\n    \"Adam Schwartz <aschwartz@hubspot.com>\"\n  ],\n  \"description\": \"Transition numbers with ease\",\n  \"keywords\": [\n    \"odometer\",\n    \"car\",\n    \"number\",\n    \"transition\",\n    \"animation\",\n    \"slot\",\n    \"machine\",\n    \"turnstile\",\n    \"javascript\",\n    \"client-side\"\n  ],\n  \"license\": \"MIT\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"bower_components\"\n  ]\n}\n"
        },
        {
          "name": "component.json",
          "type": "blob",
          "size": 0.3828125,
          "content": "{\n  \"name\": \"odometer\",\n  \"version\": \"0.4.8\",\n  \"repo\": \"hubspot/odometer\",\n  \"description\": \"Transition numbers with ease\",\n  \"keywords\": [\n    \"odometer\",\n    \"car\",\n    \"number\",\n    \"transition\",\n    \"animation\",\n    \"slot\",\n    \"machine\",\n    \"turnstile\",\n    \"javascript\",\n    \"client-side\"\n  ],\n  \"styles\": [\"themes/odometer-theme-default.css\"],\n  \"scripts\": [\n    \"odometer.js\"\n  ]\n}\n"
        },
        {
          "name": "config.rb",
          "type": "blob",
          "size": 0.11328125,
          "content": "preferred_syntax = :sass\ncss_dir = './themes'\nsass_dir = './sass'\noutput_style = :expanded\nenvironment = :production"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "odometer.coffee",
          "type": "blob",
          "size": 14.587890625,
          "content": "VALUE_HTML = '<span class=\"odometer-value\"></span>'\nRIBBON_HTML = '<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">' + VALUE_HTML + '</span></span>'\nDIGIT_HTML = '<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">' + RIBBON_HTML + '</span></span>'\nFORMAT_MARK_HTML = '<span class=\"odometer-formatting-mark\"></span>'\n\n# The bit within the parenthesis will be repeated, so (,ddd) becomes 123,456,789....\n#\n# If your locale uses spaces to seperate digits, you could consider using a\n# Narrow No-Break Space (â€¯), as it's a bit more correct.\n#\n# Numbers will be rounded to the number of digits after the radix seperator.\n#\n# When values are set using `.update` or the `.innerHTML`-type attributes,\n# strings are assumed to already be in the locale's format.\n#\n# This is just the default, it can also be set as options.format.\nDIGIT_FORMAT = '(,ddd).dd'\n\nFORMAT_PARSER = /^\\(?([^)]*)\\)?(?:(.)(d+))?$/\n\n# What is our target framerate?\nFRAMERATE = 30\n\n# How long will the animation last?\nDURATION = 2000\n\n# What is the fastest we should update values when we are\n# counting up (not using the wheel animation).\nCOUNT_FRAMERATE = 20\n\n# What is the minimum number of frames for each value on the wheel?\n# We won't render more values than could be reasonably seen\nFRAMES_PER_VALUE = 2\n\n# If more than one digit is hitting the frame limit, they would all get\n# capped at that limit and appear to be moving at the same rate.  This\n# factor adds a boost to subsequent digits to make them appear faster.\nDIGIT_SPEEDBOOST = .5\n\nMS_PER_FRAME = 1000 / FRAMERATE\nCOUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE\n\nTRANSITION_END_EVENTS = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd'\n\ntransitionCheckStyles = document.createElement('div').style\nTRANSITION_SUPPORT = transitionCheckStyles.transition? or transitionCheckStyles.webkitTransition? or\n                     transitionCheckStyles.mozTransition? or transitionCheckStyles.oTransition?\n\nrequestAnimationFrame = window.requestAnimationFrame or window.mozRequestAnimationFrame or\n                        window.webkitRequestAnimationFrame or window.msRequestAnimationFrame\n\nMutationObserver = window.MutationObserver or window.WebKitMutationObserver or window.MozMutationObserver\n\ncreateFromHTML = (html) ->\n  el = document.createElement('div')\n  el.innerHTML = html\n  el.children[0]\n\nremoveClass = (el, name) ->\n  el.className = el.className.replace new RegExp(\"(^| )#{ name.split(' ').join('|') }( |$)\", 'gi'), ' '\n\naddClass = (el, name) ->\n  removeClass el, name\n  el.className += \" #{ name }\"\n\ntrigger = (el, name) ->\n  # Custom DOM events are not supported in IE8\n  if document.createEvent?\n    evt = document.createEvent('HTMLEvents')\n    evt.initEvent(name, true, true)\n    el.dispatchEvent(evt)\n\nnow = ->\n  window.performance?.now?() ? +new Date\n\nround = (val, precision=0) ->\n  return Math.round(val) unless precision\n\n  val *= Math.pow(10, precision)\n  val += 0.5\n  val = Math.floor(val)\n  val /= Math.pow(10, precision)\n\ntruncate = (val) ->\n  # | 0 fails on numbers greater than 2^32\n  if val < 0\n    Math.ceil(val)\n  else\n    Math.floor(val)\n\nfractionalPart = (val) ->\n  val - round(val)\n\n_jQueryWrapped = false\ndo wrapJQuery = ->\n  return if _jQueryWrapped\n\n  if window.jQuery?\n    _jQueryWrapped = true\n    # We need to wrap jQuery's .html and .text because they don't always\n    # call .innerHTML/.innerText\n    for property in ['html', 'text']\n      do (property) ->\n        old = window.jQuery.fn[property]\n        window.jQuery.fn[property] = (val) ->\n          if not val? or not this[0]?.odometer?\n            return old.apply this, arguments\n\n          this[0].odometer.update val\n\n# In case jQuery is brought in after this file\nsetTimeout wrapJQuery, 0\n\nclass Odometer\n  constructor: (@options) ->\n    @el = @options.el\n    return @el.odometer if @el.odometer?\n\n    @el.odometer = @\n\n    for k, v of Odometer.options\n      if not @options[k]?\n        @options[k] = v\n\n    @options.duration ?= DURATION\n    @MAX_VALUES = ((@options.duration / MS_PER_FRAME) / FRAMES_PER_VALUE) | 0\n\n    @resetFormat()\n\n    @value = @cleanValue(@options.value ? '')\n\n    @renderInside()\n    @render()\n\n    try\n      for property in ['innerHTML', 'innerText', 'textContent'] when @el[property]?\n        do (property) =>\n          Object.defineProperty @el, property,\n            get: =>\n              if property is 'innerHTML'\n                @inside.outerHTML\n              else\n                # It's just a single HTML element, so innerText is the\n                # same as outerText.\n                @inside.innerText ? @inside.textContent\n            set: (val) =>\n              @update val\n    catch e\n      # Safari\n      @watchForMutations()\n\n    @\n\n  renderInside: ->\n    @inside = document.createElement 'div'\n    @inside.className = 'odometer-inside'\n    @el.innerHTML = ''\n    @el.appendChild @inside\n\n  watchForMutations: ->\n    # Safari doesn't allow us to wrap .innerHTML, so we listen for it\n    # changing.\n    return unless MutationObserver?\n\n    try\n      @observer ?= new MutationObserver (mutations) =>\n        newVal = @el.innerText\n\n        @renderInside()\n        @render @value\n        @update newVal\n\n      @watchMutations = true\n      @startWatchingMutations()\n    catch e\n\n  startWatchingMutations: ->\n    if @watchMutations\n      @observer.observe @el, {childList: true}\n\n  stopWatchingMutations: ->\n    @observer?.disconnect()\n\n  cleanValue: (val) ->\n    if typeof val is 'string'\n      # We need to normalize the format so we can properly turn it into\n      # a float.\n      val = val.replace((@format.radix ? '.'), '<radix>')\n      val = val.replace /[.,]/g, ''\n      val = val.replace '<radix>', '.'\n      val = parseFloat(val, 10) or 0\n\n    round(val, @format.precision)\n\n  bindTransitionEnd: ->\n    return if @transitionEndBound\n    @transitionEndBound = true\n\n    # The event will be triggered once for each ribbon, we only\n    # want one render though\n    renderEnqueued = false\n    for event in TRANSITION_END_EVENTS.split(' ')\n      @el.addEventListener event, =>\n        return true if renderEnqueued\n\n        renderEnqueued = true\n\n        setTimeout =>\n          @render()\n          renderEnqueued = false\n\n          trigger @el, 'odometerdone'\n        , 0\n\n        true\n      , false\n\n  resetFormat: ->\n    format = @options.format ? DIGIT_FORMAT\n    format or= 'd'\n\n    parsed = FORMAT_PARSER.exec format\n    if not parsed\n      throw new Error \"Odometer: Unparsable digit format\"\n\n    [repeating, radix, fractional] = parsed[1..3]\n\n    precision = fractional?.length or 0\n\n    @format = {repeating, radix, precision}\n\n  render: (value=@value) ->\n    @stopWatchingMutations()\n    @resetFormat()\n\n    @inside.innerHTML = ''\n\n    theme = @options.theme\n\n    classes = @el.className.split(' ')\n    newClasses = []\n    for cls in classes when cls.length\n      if match = /^odometer-theme-(.+)$/.exec(cls)\n        theme = match[1]\n        continue\n\n      if /^odometer(-|$)/.test(cls)\n        continue\n\n      newClasses.push cls\n\n    newClasses.push 'odometer'\n\n    unless TRANSITION_SUPPORT\n      newClasses.push 'odometer-no-transitions'\n\n    if theme\n      newClasses.push \"odometer-theme-#{ theme }\"\n    else\n      # This class matches all themes, so it should do what you'd expect if only one\n      # theme css file is brought into the page.\n      newClasses.push \"odometer-auto-theme\"\n\n    @el.className = newClasses.join(' ')\n\n    @ribbons = {}\n\n    @formatDigits(value)\n\n    @startWatchingMutations()\n\n  formatDigits: (value) ->\n    @digits = []\n\n    if @options.formatFunction\n      valueString = @options.formatFunction(value)\n      for valueDigit in valueString.split('').reverse()\n        if valueDigit.match(/0-9/)\n          digit = @renderDigit()\n          digit.querySelector('.odometer-value').innerHTML = valueDigit\n          @digits.push digit\n          @insertDigit digit\n        else\n          @addSpacer valueDigit\n    else\n      wholePart = not @format.precision or not fractionalPart(value) or false\n      for digit in value.toString().split('').reverse()\n        if digit is '.'\n          wholePart = true\n\n        @addDigit digit, wholePart\n\n    return\n\n  update: (newValue) ->\n    newValue = @cleanValue newValue\n\n    return unless diff = newValue - @value\n\n    removeClass @el, 'odometer-animating-up odometer-animating-down odometer-animating'\n    if diff > 0\n      addClass @el, 'odometer-animating-up'\n    else\n      addClass @el, 'odometer-animating-down'\n\n    @stopWatchingMutations()\n    @animate newValue\n    @startWatchingMutations()\n\n    setTimeout =>\n      # Force a repaint\n      @el.offsetHeight\n\n      addClass @el, 'odometer-animating'\n    , 0\n\n    @value = newValue\n\n  renderDigit: ->\n    createFromHTML DIGIT_HTML\n\n  insertDigit: (digit, before) ->\n    if before?\n      @inside.insertBefore digit, before\n    else if not @inside.children.length\n      @inside.appendChild digit\n    else\n      @inside.insertBefore digit, @inside.children[0]\n\n  addSpacer: (chr, before, extraClasses) ->\n    spacer = createFromHTML FORMAT_MARK_HTML\n    spacer.innerHTML = chr\n    addClass(spacer, extraClasses) if extraClasses\n    @insertDigit spacer, before\n\n  addDigit: (value, repeating=true) ->\n    if value is '-'\n      return @addSpacer value, null, 'odometer-negation-mark'\n\n    if value is '.'\n      return @addSpacer (@format.radix ? '.'), null, 'odometer-radix-mark'\n\n    if repeating\n      resetted = false\n      while true\n        if not @format.repeating.length\n          if resetted\n            throw new Error \"Bad odometer format without digits\"\n\n          @resetFormat()\n          resetted = true\n\n        chr = @format.repeating[@format.repeating.length - 1]\n        @format.repeating = @format.repeating.substring(0, @format.repeating.length - 1)\n\n        break if chr is 'd'\n\n        @addSpacer chr\n\n    digit = @renderDigit()\n    digit.querySelector('.odometer-value').innerHTML = value\n    @digits.push digit\n\n    @insertDigit digit\n\n  animate: (newValue) ->\n    if not TRANSITION_SUPPORT or @options.animation is 'count'\n      @animateCount newValue\n    else\n      @animateSlide newValue\n\n  animateCount: (newValue) ->\n    return unless diff = +newValue - @value\n\n    start = last = now()\n\n    cur = @value\n    do tick = =>\n      if (now() - start) > @options.duration\n        @value = newValue\n        @render()\n        trigger @el, 'odometerdone'\n        return\n\n      delta = now() - last\n\n      if delta > COUNT_MS_PER_FRAME\n        last = now()\n\n        fraction = delta / @options.duration\n        dist = diff * fraction\n\n        cur += dist\n        @render Math.round cur\n\n      if requestAnimationFrame?\n        requestAnimationFrame tick\n      else\n        setTimeout tick, COUNT_MS_PER_FRAME\n\n  getDigitCount: (values...) ->\n    for value, i in values\n      values[i] = Math.abs(value)\n\n    max = Math.max values...\n\n    Math.ceil(Math.log(max + 1) / Math.log(10))\n\n  getFractionalDigitCount: (values...) ->\n    # This assumes the value has already been rounded to\n    # @format.precision places\n    #\n    parser = /^\\-?\\d*\\.(\\d*?)0*$/\n    for value, i in values\n      values[i] = value.toString()\n\n      parts = parser.exec values[i]\n\n      if not parts?\n        values[i] = 0\n      else\n        values[i] = parts[1].length\n\n    Math.max values...\n\n  resetDigits: ->\n    @digits = []\n    @ribbons = []\n    @inside.innerHTML = ''\n    @resetFormat()\n\n  animateSlide: (newValue) ->\n    oldValue = @value\n\n    fractionalCount = @getFractionalDigitCount oldValue, newValue\n\n    if fractionalCount\n      newValue = newValue * Math.pow(10, fractionalCount)\n      oldValue = oldValue * Math.pow(10, fractionalCount)\n\n    return unless diff = newValue - oldValue\n\n    @bindTransitionEnd()\n\n    digitCount = @getDigitCount(oldValue, newValue)\n\n    digits = []\n    boosted = 0\n    # We create a array to represent the series of digits which should be\n    # animated in each column\n    for i in [0...digitCount]\n      start = truncate(oldValue  / Math.pow(10, (digitCount - i - 1)))\n      end = truncate(newValue / Math.pow(10, (digitCount - i - 1)))\n\n      dist = end - start\n\n      if Math.abs(dist) > @MAX_VALUES\n        # We need to subsample\n        frames = []\n\n        # Subsequent digits need to be faster than previous ones\n        incr = dist / (@MAX_VALUES + @MAX_VALUES * boosted * DIGIT_SPEEDBOOST)\n        cur = start\n\n        while (dist > 0 and cur < end) or (dist < 0 and cur > end)\n          frames.push Math.round cur\n          cur += incr\n\n        if frames[frames.length - 1] isnt end\n          frames.push end\n\n        boosted++\n      else\n        frames = [start..end]\n\n      # We only care about the last digit\n      for frame, i in frames\n        frames[i] = Math.abs(frame % 10)\n\n      digits.push frames\n\n    @resetDigits()\n\n    for frames, i in digits.reverse()\n      if not @digits[i]\n        @addDigit ' ', (i >= fractionalCount)\n\n      @ribbons[i] ?= @digits[i].querySelector('.odometer-ribbon-inner')\n      @ribbons[i].innerHTML = ''\n\n      if diff < 0\n        frames = frames.reverse()\n\n      for frame, j in frames\n        numEl = document.createElement('div')\n        numEl.className = 'odometer-value'\n        numEl.innerHTML = frame\n\n        @ribbons[i].appendChild numEl\n\n        if j == frames.length - 1\n          addClass numEl, 'odometer-last-value'\n        if j == 0\n          addClass numEl, 'odometer-first-value'\n\n    if start < 0\n      @addDigit '-'\n\n    mark = @inside.querySelector('.odometer-radix-mark')\n    mark.parent.removeChild(mark) if mark?\n\n    if fractionalCount\n      @addSpacer @format.radix, @digits[fractionalCount - 1], 'odometer-radix-mark'\n\nOdometer.options = window.odometerOptions ? {}\n\nsetTimeout ->\n  # We do this in a seperate pass to allow people to set\n  # window.odometerOptions after bringing the file in.\n  if window.odometerOptions\n    for k, v of window.odometerOptions\n      Odometer.options[k] ?= v\n, 0\n\nOdometer.init = ->\n  if not document.querySelectorAll?\n    # IE 7 or 8 in Quirksmode\n    return\n\n  elements = document.querySelectorAll (Odometer.options.selector or '.odometer')\n\n  for el in elements\n    el.odometer = new Odometer {el, value: (el.innerText ? el.textContent)}\n\nif document.documentElement?.doScroll? and document.createEventObject?\n  # IE < 9\n  _old = document.onreadystatechange\n  document.onreadystatechange = ->\n    if document.readyState is 'complete' and Odometer.options.auto isnt false\n      Odometer.init()\n\n    _old?.apply this, arguments\nelse\n  document.addEventListener 'DOMContentLoaded', ->\n    if Odometer.options.auto isnt false\n      Odometer.init()\n  , false\n\n\nif typeof define is 'function' and define.amd\n  # AMD. Register as an anonymous module.\n  define [], ->\n    Odometer\nelse if exports?\n  # CommonJS\n  module.exports = Odometer\nelse\n  # Browser globals\n  window.Odometer = Odometer\n"
        },
        {
          "name": "odometer.js",
          "type": "blob",
          "size": 20.7021484375,
          "content": "(function() {\n  var COUNT_FRAMERATE, COUNT_MS_PER_FRAME, DIGIT_FORMAT, DIGIT_HTML, DIGIT_SPEEDBOOST, DURATION, FORMAT_MARK_HTML, FORMAT_PARSER, FRAMERATE, FRAMES_PER_VALUE, MS_PER_FRAME, MutationObserver, Odometer, RIBBON_HTML, TRANSITION_END_EVENTS, TRANSITION_SUPPORT, VALUE_HTML, addClass, createFromHTML, fractionalPart, now, removeClass, requestAnimationFrame, round, transitionCheckStyles, trigger, truncate, wrapJQuery, _jQueryWrapped, _old, _ref, _ref1,\n    __slice = [].slice;\n\n  VALUE_HTML = '<span class=\"odometer-value\"></span>';\n\n  RIBBON_HTML = '<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">' + VALUE_HTML + '</span></span>';\n\n  DIGIT_HTML = '<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">' + RIBBON_HTML + '</span></span>';\n\n  FORMAT_MARK_HTML = '<span class=\"odometer-formatting-mark\"></span>';\n\n  DIGIT_FORMAT = '(,ddd).dd';\n\n  FORMAT_PARSER = /^\\(?([^)]*)\\)?(?:(.)(d+))?$/;\n\n  FRAMERATE = 30;\n\n  DURATION = 2000;\n\n  COUNT_FRAMERATE = 20;\n\n  FRAMES_PER_VALUE = 2;\n\n  DIGIT_SPEEDBOOST = .5;\n\n  MS_PER_FRAME = 1000 / FRAMERATE;\n\n  COUNT_MS_PER_FRAME = 1000 / COUNT_FRAMERATE;\n\n  TRANSITION_END_EVENTS = 'transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd';\n\n  transitionCheckStyles = document.createElement('div').style;\n\n  TRANSITION_SUPPORT = (transitionCheckStyles.transition != null) || (transitionCheckStyles.webkitTransition != null) || (transitionCheckStyles.mozTransition != null) || (transitionCheckStyles.oTransition != null);\n\n  requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n  MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;\n\n  createFromHTML = function(html) {\n    var el;\n    el = document.createElement('div');\n    el.innerHTML = html;\n    return el.children[0];\n  };\n\n  removeClass = function(el, name) {\n    return el.className = el.className.replace(new RegExp(\"(^| )\" + (name.split(' ').join('|')) + \"( |$)\", 'gi'), ' ');\n  };\n\n  addClass = function(el, name) {\n    removeClass(el, name);\n    return el.className += \" \" + name;\n  };\n\n  trigger = function(el, name) {\n    var evt;\n    if (document.createEvent != null) {\n      evt = document.createEvent('HTMLEvents');\n      evt.initEvent(name, true, true);\n      return el.dispatchEvent(evt);\n    }\n  };\n\n  now = function() {\n    var _ref, _ref1;\n    return (_ref = (_ref1 = window.performance) != null ? typeof _ref1.now === \"function\" ? _ref1.now() : void 0 : void 0) != null ? _ref : +(new Date);\n  };\n\n  round = function(val, precision) {\n    if (precision == null) {\n      precision = 0;\n    }\n    if (!precision) {\n      return Math.round(val);\n    }\n    val *= Math.pow(10, precision);\n    val += 0.5;\n    val = Math.floor(val);\n    return val /= Math.pow(10, precision);\n  };\n\n  truncate = function(val) {\n    if (val < 0) {\n      return Math.ceil(val);\n    } else {\n      return Math.floor(val);\n    }\n  };\n\n  fractionalPart = function(val) {\n    return val - round(val);\n  };\n\n  _jQueryWrapped = false;\n\n  (wrapJQuery = function() {\n    var property, _i, _len, _ref, _results;\n    if (_jQueryWrapped) {\n      return;\n    }\n    if (window.jQuery != null) {\n      _jQueryWrapped = true;\n      _ref = ['html', 'text'];\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        property = _ref[_i];\n        _results.push((function(property) {\n          var old;\n          old = window.jQuery.fn[property];\n          return window.jQuery.fn[property] = function(val) {\n            var _ref1;\n            if ((val == null) || (((_ref1 = this[0]) != null ? _ref1.odometer : void 0) == null)) {\n              return old.apply(this, arguments);\n            }\n            return this[0].odometer.update(val);\n          };\n        })(property));\n      }\n      return _results;\n    }\n  })();\n\n  setTimeout(wrapJQuery, 0);\n\n  Odometer = (function() {\n    function Odometer(options) {\n      var e, k, property, v, _base, _i, _len, _ref, _ref1, _ref2,\n        _this = this;\n      this.options = options;\n      this.el = this.options.el;\n      if (this.el.odometer != null) {\n        return this.el.odometer;\n      }\n      this.el.odometer = this;\n      _ref = Odometer.options;\n      for (k in _ref) {\n        v = _ref[k];\n        if (this.options[k] == null) {\n          this.options[k] = v;\n        }\n      }\n      if ((_base = this.options).duration == null) {\n        _base.duration = DURATION;\n      }\n      this.MAX_VALUES = ((this.options.duration / MS_PER_FRAME) / FRAMES_PER_VALUE) | 0;\n      this.resetFormat();\n      this.value = this.cleanValue((_ref1 = this.options.value) != null ? _ref1 : '');\n      this.renderInside();\n      this.render();\n      try {\n        _ref2 = ['innerHTML', 'innerText', 'textContent'];\n        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {\n          property = _ref2[_i];\n          if (this.el[property] != null) {\n            (function(property) {\n              return Object.defineProperty(_this.el, property, {\n                get: function() {\n                  var _ref3;\n                  if (property === 'innerHTML') {\n                    return _this.inside.outerHTML;\n                  } else {\n                    return (_ref3 = _this.inside.innerText) != null ? _ref3 : _this.inside.textContent;\n                  }\n                },\n                set: function(val) {\n                  return _this.update(val);\n                }\n              });\n            })(property);\n          }\n        }\n      } catch (_error) {\n        e = _error;\n        this.watchForMutations();\n      }\n      this;\n    }\n\n    Odometer.prototype.renderInside = function() {\n      this.inside = document.createElement('div');\n      this.inside.className = 'odometer-inside';\n      this.el.innerHTML = '';\n      return this.el.appendChild(this.inside);\n    };\n\n    Odometer.prototype.watchForMutations = function() {\n      var e,\n        _this = this;\n      if (MutationObserver == null) {\n        return;\n      }\n      try {\n        if (this.observer == null) {\n          this.observer = new MutationObserver(function(mutations) {\n            var newVal;\n            newVal = _this.el.innerText;\n            _this.renderInside();\n            _this.render(_this.value);\n            return _this.update(newVal);\n          });\n        }\n        this.watchMutations = true;\n        return this.startWatchingMutations();\n      } catch (_error) {\n        e = _error;\n      }\n    };\n\n    Odometer.prototype.startWatchingMutations = function() {\n      if (this.watchMutations) {\n        return this.observer.observe(this.el, {\n          childList: true\n        });\n      }\n    };\n\n    Odometer.prototype.stopWatchingMutations = function() {\n      var _ref;\n      return (_ref = this.observer) != null ? _ref.disconnect() : void 0;\n    };\n\n    Odometer.prototype.cleanValue = function(val) {\n      var _ref;\n      if (typeof val === 'string') {\n        val = val.replace((_ref = this.format.radix) != null ? _ref : '.', '<radix>');\n        val = val.replace(/[.,]/g, '');\n        val = val.replace('<radix>', '.');\n        val = parseFloat(val, 10) || 0;\n      }\n      return round(val, this.format.precision);\n    };\n\n    Odometer.prototype.bindTransitionEnd = function() {\n      var event, renderEnqueued, _i, _len, _ref, _results,\n        _this = this;\n      if (this.transitionEndBound) {\n        return;\n      }\n      this.transitionEndBound = true;\n      renderEnqueued = false;\n      _ref = TRANSITION_END_EVENTS.split(' ');\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        event = _ref[_i];\n        _results.push(this.el.addEventListener(event, function() {\n          if (renderEnqueued) {\n            return true;\n          }\n          renderEnqueued = true;\n          setTimeout(function() {\n            _this.render();\n            renderEnqueued = false;\n            return trigger(_this.el, 'odometerdone');\n          }, 0);\n          return true;\n        }, false));\n      }\n      return _results;\n    };\n\n    Odometer.prototype.resetFormat = function() {\n      var format, fractional, parsed, precision, radix, repeating, _ref, _ref1;\n      format = (_ref = this.options.format) != null ? _ref : DIGIT_FORMAT;\n      format || (format = 'd');\n      parsed = FORMAT_PARSER.exec(format);\n      if (!parsed) {\n        throw new Error(\"Odometer: Unparsable digit format\");\n      }\n      _ref1 = parsed.slice(1, 4), repeating = _ref1[0], radix = _ref1[1], fractional = _ref1[2];\n      precision = (fractional != null ? fractional.length : void 0) || 0;\n      return this.format = {\n        repeating: repeating,\n        radix: radix,\n        precision: precision\n      };\n    };\n\n    Odometer.prototype.render = function(value) {\n      var classes, cls, match, newClasses, theme, _i, _len;\n      if (value == null) {\n        value = this.value;\n      }\n      this.stopWatchingMutations();\n      this.resetFormat();\n      this.inside.innerHTML = '';\n      theme = this.options.theme;\n      classes = this.el.className.split(' ');\n      newClasses = [];\n      for (_i = 0, _len = classes.length; _i < _len; _i++) {\n        cls = classes[_i];\n        if (!cls.length) {\n          continue;\n        }\n        if (match = /^odometer-theme-(.+)$/.exec(cls)) {\n          theme = match[1];\n          continue;\n        }\n        if (/^odometer(-|$)/.test(cls)) {\n          continue;\n        }\n        newClasses.push(cls);\n      }\n      newClasses.push('odometer');\n      if (!TRANSITION_SUPPORT) {\n        newClasses.push('odometer-no-transitions');\n      }\n      if (theme) {\n        newClasses.push(\"odometer-theme-\" + theme);\n      } else {\n        newClasses.push(\"odometer-auto-theme\");\n      }\n      this.el.className = newClasses.join(' ');\n      this.ribbons = {};\n      this.formatDigits(value);\n      return this.startWatchingMutations();\n    };\n\n    Odometer.prototype.formatDigits = function(value) {\n      var digit, valueDigit, valueString, wholePart, _i, _j, _len, _len1, _ref, _ref1;\n      this.digits = [];\n      if (this.options.formatFunction) {\n        valueString = this.options.formatFunction(value);\n        _ref = valueString.split('').reverse();\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          valueDigit = _ref[_i];\n          if (valueDigit.match(/0-9/)) {\n            digit = this.renderDigit();\n            digit.querySelector('.odometer-value').innerHTML = valueDigit;\n            this.digits.push(digit);\n            this.insertDigit(digit);\n          } else {\n            this.addSpacer(valueDigit);\n          }\n        }\n      } else {\n        wholePart = !this.format.precision || !fractionalPart(value) || false;\n        _ref1 = value.toString().split('').reverse();\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          digit = _ref1[_j];\n          if (digit === '.') {\n            wholePart = true;\n          }\n          this.addDigit(digit, wholePart);\n        }\n      }\n    };\n\n    Odometer.prototype.update = function(newValue) {\n      var diff,\n        _this = this;\n      newValue = this.cleanValue(newValue);\n      if (!(diff = newValue - this.value)) {\n        return;\n      }\n      removeClass(this.el, 'odometer-animating-up odometer-animating-down odometer-animating');\n      if (diff > 0) {\n        addClass(this.el, 'odometer-animating-up');\n      } else {\n        addClass(this.el, 'odometer-animating-down');\n      }\n      this.stopWatchingMutations();\n      this.animate(newValue);\n      this.startWatchingMutations();\n      setTimeout(function() {\n        _this.el.offsetHeight;\n        return addClass(_this.el, 'odometer-animating');\n      }, 0);\n      return this.value = newValue;\n    };\n\n    Odometer.prototype.renderDigit = function() {\n      return createFromHTML(DIGIT_HTML);\n    };\n\n    Odometer.prototype.insertDigit = function(digit, before) {\n      if (before != null) {\n        return this.inside.insertBefore(digit, before);\n      } else if (!this.inside.children.length) {\n        return this.inside.appendChild(digit);\n      } else {\n        return this.inside.insertBefore(digit, this.inside.children[0]);\n      }\n    };\n\n    Odometer.prototype.addSpacer = function(chr, before, extraClasses) {\n      var spacer;\n      spacer = createFromHTML(FORMAT_MARK_HTML);\n      spacer.innerHTML = chr;\n      if (extraClasses) {\n        addClass(spacer, extraClasses);\n      }\n      return this.insertDigit(spacer, before);\n    };\n\n    Odometer.prototype.addDigit = function(value, repeating) {\n      var chr, digit, resetted, _ref;\n      if (repeating == null) {\n        repeating = true;\n      }\n      if (value === '-') {\n        return this.addSpacer(value, null, 'odometer-negation-mark');\n      }\n      if (value === '.') {\n        return this.addSpacer((_ref = this.format.radix) != null ? _ref : '.', null, 'odometer-radix-mark');\n      }\n      if (repeating) {\n        resetted = false;\n        while (true) {\n          if (!this.format.repeating.length) {\n            if (resetted) {\n              throw new Error(\"Bad odometer format without digits\");\n            }\n            this.resetFormat();\n            resetted = true;\n          }\n          chr = this.format.repeating[this.format.repeating.length - 1];\n          this.format.repeating = this.format.repeating.substring(0, this.format.repeating.length - 1);\n          if (chr === 'd') {\n            break;\n          }\n          this.addSpacer(chr);\n        }\n      }\n      digit = this.renderDigit();\n      digit.querySelector('.odometer-value').innerHTML = value;\n      this.digits.push(digit);\n      return this.insertDigit(digit);\n    };\n\n    Odometer.prototype.animate = function(newValue) {\n      if (!TRANSITION_SUPPORT || this.options.animation === 'count') {\n        return this.animateCount(newValue);\n      } else {\n        return this.animateSlide(newValue);\n      }\n    };\n\n    Odometer.prototype.animateCount = function(newValue) {\n      var cur, diff, last, start, tick,\n        _this = this;\n      if (!(diff = +newValue - this.value)) {\n        return;\n      }\n      start = last = now();\n      cur = this.value;\n      return (tick = function() {\n        var delta, dist, fraction;\n        if ((now() - start) > _this.options.duration) {\n          _this.value = newValue;\n          _this.render();\n          trigger(_this.el, 'odometerdone');\n          return;\n        }\n        delta = now() - last;\n        if (delta > COUNT_MS_PER_FRAME) {\n          last = now();\n          fraction = delta / _this.options.duration;\n          dist = diff * fraction;\n          cur += dist;\n          _this.render(Math.round(cur));\n        }\n        if (requestAnimationFrame != null) {\n          return requestAnimationFrame(tick);\n        } else {\n          return setTimeout(tick, COUNT_MS_PER_FRAME);\n        }\n      })();\n    };\n\n    Odometer.prototype.getDigitCount = function() {\n      var i, max, value, values, _i, _len;\n      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {\n        value = values[i];\n        values[i] = Math.abs(value);\n      }\n      max = Math.max.apply(Math, values);\n      return Math.ceil(Math.log(max + 1) / Math.log(10));\n    };\n\n    Odometer.prototype.getFractionalDigitCount = function() {\n      var i, parser, parts, value, values, _i, _len;\n      values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      parser = /^\\-?\\d*\\.(\\d*?)0*$/;\n      for (i = _i = 0, _len = values.length; _i < _len; i = ++_i) {\n        value = values[i];\n        values[i] = value.toString();\n        parts = parser.exec(values[i]);\n        if (parts == null) {\n          values[i] = 0;\n        } else {\n          values[i] = parts[1].length;\n        }\n      }\n      return Math.max.apply(Math, values);\n    };\n\n    Odometer.prototype.resetDigits = function() {\n      this.digits = [];\n      this.ribbons = [];\n      this.inside.innerHTML = '';\n      return this.resetFormat();\n    };\n\n    Odometer.prototype.animateSlide = function(newValue) {\n      var boosted, cur, diff, digitCount, digits, dist, end, fractionalCount, frame, frames, i, incr, j, mark, numEl, oldValue, start, _base, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _results;\n      oldValue = this.value;\n      fractionalCount = this.getFractionalDigitCount(oldValue, newValue);\n      if (fractionalCount) {\n        newValue = newValue * Math.pow(10, fractionalCount);\n        oldValue = oldValue * Math.pow(10, fractionalCount);\n      }\n      if (!(diff = newValue - oldValue)) {\n        return;\n      }\n      this.bindTransitionEnd();\n      digitCount = this.getDigitCount(oldValue, newValue);\n      digits = [];\n      boosted = 0;\n      for (i = _i = 0; 0 <= digitCount ? _i < digitCount : _i > digitCount; i = 0 <= digitCount ? ++_i : --_i) {\n        start = truncate(oldValue / Math.pow(10, digitCount - i - 1));\n        end = truncate(newValue / Math.pow(10, digitCount - i - 1));\n        dist = end - start;\n        if (Math.abs(dist) > this.MAX_VALUES) {\n          frames = [];\n          incr = dist / (this.MAX_VALUES + this.MAX_VALUES * boosted * DIGIT_SPEEDBOOST);\n          cur = start;\n          while ((dist > 0 && cur < end) || (dist < 0 && cur > end)) {\n            frames.push(Math.round(cur));\n            cur += incr;\n          }\n          if (frames[frames.length - 1] !== end) {\n            frames.push(end);\n          }\n          boosted++;\n        } else {\n          frames = (function() {\n            _results = [];\n            for (var _j = start; start <= end ? _j <= end : _j >= end; start <= end ? _j++ : _j--){ _results.push(_j); }\n            return _results;\n          }).apply(this);\n        }\n        for (i = _k = 0, _len = frames.length; _k < _len; i = ++_k) {\n          frame = frames[i];\n          frames[i] = Math.abs(frame % 10);\n        }\n        digits.push(frames);\n      }\n      this.resetDigits();\n      _ref = digits.reverse();\n      for (i = _l = 0, _len1 = _ref.length; _l < _len1; i = ++_l) {\n        frames = _ref[i];\n        if (!this.digits[i]) {\n          this.addDigit(' ', i >= fractionalCount);\n        }\n        if ((_base = this.ribbons)[i] == null) {\n          _base[i] = this.digits[i].querySelector('.odometer-ribbon-inner');\n        }\n        this.ribbons[i].innerHTML = '';\n        if (diff < 0) {\n          frames = frames.reverse();\n        }\n        for (j = _m = 0, _len2 = frames.length; _m < _len2; j = ++_m) {\n          frame = frames[j];\n          numEl = document.createElement('div');\n          numEl.className = 'odometer-value';\n          numEl.innerHTML = frame;\n          this.ribbons[i].appendChild(numEl);\n          if (j === frames.length - 1) {\n            addClass(numEl, 'odometer-last-value');\n          }\n          if (j === 0) {\n            addClass(numEl, 'odometer-first-value');\n          }\n        }\n      }\n      if (start < 0) {\n        this.addDigit('-');\n      }\n      mark = this.inside.querySelector('.odometer-radix-mark');\n      if (mark != null) {\n        mark.parent.removeChild(mark);\n      }\n      if (fractionalCount) {\n        return this.addSpacer(this.format.radix, this.digits[fractionalCount - 1], 'odometer-radix-mark');\n      }\n    };\n\n    return Odometer;\n\n  })();\n\n  Odometer.options = (_ref = window.odometerOptions) != null ? _ref : {};\n\n  setTimeout(function() {\n    var k, v, _base, _ref1, _results;\n    if (window.odometerOptions) {\n      _ref1 = window.odometerOptions;\n      _results = [];\n      for (k in _ref1) {\n        v = _ref1[k];\n        _results.push((_base = Odometer.options)[k] != null ? (_base = Odometer.options)[k] : _base[k] = v);\n      }\n      return _results;\n    }\n  }, 0);\n\n  Odometer.init = function() {\n    var el, elements, _i, _len, _ref1, _results;\n    if (document.querySelectorAll == null) {\n      return;\n    }\n    elements = document.querySelectorAll(Odometer.options.selector || '.odometer');\n    _results = [];\n    for (_i = 0, _len = elements.length; _i < _len; _i++) {\n      el = elements[_i];\n      _results.push(el.odometer = new Odometer({\n        el: el,\n        value: (_ref1 = el.innerText) != null ? _ref1 : el.textContent\n      }));\n    }\n    return _results;\n  };\n\n  if ((((_ref1 = document.documentElement) != null ? _ref1.doScroll : void 0) != null) && (document.createEventObject != null)) {\n    _old = document.onreadystatechange;\n    document.onreadystatechange = function() {\n      if (document.readyState === 'complete' && Odometer.options.auto !== false) {\n        Odometer.init();\n      }\n      return _old != null ? _old.apply(this, arguments) : void 0;\n    };\n  } else {\n    document.addEventListener('DOMContentLoaded', function() {\n      if (Odometer.options.auto !== false) {\n        return Odometer.init();\n      }\n    }, false);\n  }\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return Odometer;\n    });\n  } else if (typeof exports !== \"undefined\" && exports !== null) {\n    module.exports = Odometer;\n  } else {\n    window.Odometer = Odometer;\n  }\n\n}).call(this);\n"
        },
        {
          "name": "odometer.min.js",
          "type": "blob",
          "size": 10.0234375,
          "content": "/*! odometer 0.4.8 */\n(function(){var a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G=[].slice;q='<span class=\"odometer-value\"></span>',n='<span class=\"odometer-ribbon\"><span class=\"odometer-ribbon-inner\">'+q+\"</span></span>\",d='<span class=\"odometer-digit\"><span class=\"odometer-digit-spacer\">8</span><span class=\"odometer-digit-inner\">'+n+\"</span></span>\",g='<span class=\"odometer-formatting-mark\"></span>',c=\"(,ddd).dd\",h=/^\\(?([^)]*)\\)?(?:(.)(d+))?$/,i=30,f=2e3,a=20,j=2,e=.5,k=1e3/i,b=1e3/a,o=\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\",y=document.createElement(\"div\").style,p=null!=y.transition||null!=y.webkitTransition||null!=y.mozTransition||null!=y.oTransition,w=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,l=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,s=function(a){var b;return b=document.createElement(\"div\"),b.innerHTML=a,b.children[0]},v=function(a,b){return a.className=a.className.replace(new RegExp(\"(^| )\"+b.split(\" \").join(\"|\")+\"( |$)\",\"gi\"),\" \")},r=function(a,b){return v(a,b),a.className+=\" \"+b},z=function(a,b){var c;return null!=document.createEvent?(c=document.createEvent(\"HTMLEvents\"),c.initEvent(b,!0,!0),a.dispatchEvent(c)):void 0},u=function(){var a,b;return null!=(a=null!=(b=window.performance)&&\"function\"==typeof b.now?b.now():void 0)?a:+new Date},x=function(a,b){return null==b&&(b=0),b?(a*=Math.pow(10,b),a+=.5,a=Math.floor(a),a/=Math.pow(10,b)):Math.round(a)},A=function(a){return 0>a?Math.ceil(a):Math.floor(a)},t=function(a){return a-x(a)},C=!1,(B=function(){var a,b,c,d,e;if(!C&&null!=window.jQuery){for(C=!0,d=[\"html\",\"text\"],e=[],b=0,c=d.length;c>b;b++)a=d[b],e.push(function(a){var b;return b=window.jQuery.fn[a],window.jQuery.fn[a]=function(a){var c;return null==a||null==(null!=(c=this[0])?c.odometer:void 0)?b.apply(this,arguments):this[0].odometer.update(a)}}(a));return e}})(),setTimeout(B,0),m=function(){function a(b){var c,d,e,g,h,i,l,m,n,o,p=this;if(this.options=b,this.el=this.options.el,null!=this.el.odometer)return this.el.odometer;this.el.odometer=this,m=a.options;for(d in m)g=m[d],null==this.options[d]&&(this.options[d]=g);null==(h=this.options).duration&&(h.duration=f),this.MAX_VALUES=this.options.duration/k/j|0,this.resetFormat(),this.value=this.cleanValue(null!=(n=this.options.value)?n:\"\"),this.renderInside(),this.render();try{for(o=[\"innerHTML\",\"innerText\",\"textContent\"],i=0,l=o.length;l>i;i++)e=o[i],null!=this.el[e]&&!function(a){return Object.defineProperty(p.el,a,{get:function(){var b;return\"innerHTML\"===a?p.inside.outerHTML:null!=(b=p.inside.innerText)?b:p.inside.textContent},set:function(a){return p.update(a)}})}(e)}catch(q){c=q,this.watchForMutations()}}return a.prototype.renderInside=function(){return this.inside=document.createElement(\"div\"),this.inside.className=\"odometer-inside\",this.el.innerHTML=\"\",this.el.appendChild(this.inside)},a.prototype.watchForMutations=function(){var a,b=this;if(null!=l)try{return null==this.observer&&(this.observer=new l(function(a){var c;return c=b.el.innerText,b.renderInside(),b.render(b.value),b.update(c)})),this.watchMutations=!0,this.startWatchingMutations()}catch(c){a=c}},a.prototype.startWatchingMutations=function(){return this.watchMutations?this.observer.observe(this.el,{childList:!0}):void 0},a.prototype.stopWatchingMutations=function(){var a;return null!=(a=this.observer)?a.disconnect():void 0},a.prototype.cleanValue=function(a){var b;return\"string\"==typeof a&&(a=a.replace(null!=(b=this.format.radix)?b:\".\",\"<radix>\"),a=a.replace(/[.,]/g,\"\"),a=a.replace(\"<radix>\",\".\"),a=parseFloat(a,10)||0),x(a,this.format.precision)},a.prototype.bindTransitionEnd=function(){var a,b,c,d,e,f,g=this;if(!this.transitionEndBound){for(this.transitionEndBound=!0,b=!1,e=o.split(\" \"),f=[],c=0,d=e.length;d>c;c++)a=e[c],f.push(this.el.addEventListener(a,function(){return b?!0:(b=!0,setTimeout(function(){return g.render(),b=!1,z(g.el,\"odometerdone\")},0),!0)},!1));return f}},a.prototype.resetFormat=function(){var a,b,d,e,f,g,i,j;if(a=null!=(i=this.options.format)?i:c,a||(a=\"d\"),d=h.exec(a),!d)throw new Error(\"Odometer: Unparsable digit format\");return j=d.slice(1,4),g=j[0],f=j[1],b=j[2],e=(null!=b?b.length:void 0)||0,this.format={repeating:g,radix:f,precision:e}},a.prototype.render=function(a){var b,c,d,e,f,g,h;for(null==a&&(a=this.value),this.stopWatchingMutations(),this.resetFormat(),this.inside.innerHTML=\"\",f=this.options.theme,b=this.el.className.split(\" \"),e=[],g=0,h=b.length;h>g;g++)c=b[g],c.length&&((d=/^odometer-theme-(.+)$/.exec(c))?f=d[1]:/^odometer(-|$)/.test(c)||e.push(c));return e.push(\"odometer\"),p||e.push(\"odometer-no-transitions\"),f?e.push(\"odometer-theme-\"+f):e.push(\"odometer-auto-theme\"),this.el.className=e.join(\" \"),this.ribbons={},this.formatDigits(a),this.startWatchingMutations()},a.prototype.formatDigits=function(a){var b,c,d,e,f,g,h,i,j,k;if(this.digits=[],this.options.formatFunction)for(d=this.options.formatFunction(a),j=d.split(\"\").reverse(),f=0,h=j.length;h>f;f++)c=j[f],c.match(/0-9/)?(b=this.renderDigit(),b.querySelector(\".odometer-value\").innerHTML=c,this.digits.push(b),this.insertDigit(b)):this.addSpacer(c);else for(e=!this.format.precision||!t(a)||!1,k=a.toString().split(\"\").reverse(),g=0,i=k.length;i>g;g++)b=k[g],\".\"===b&&(e=!0),this.addDigit(b,e)},a.prototype.update=function(a){var b,c=this;return a=this.cleanValue(a),(b=a-this.value)?(v(this.el,\"odometer-animating-up odometer-animating-down odometer-animating\"),b>0?r(this.el,\"odometer-animating-up\"):r(this.el,\"odometer-animating-down\"),this.stopWatchingMutations(),this.animate(a),this.startWatchingMutations(),setTimeout(function(){return c.el.offsetHeight,r(c.el,\"odometer-animating\")},0),this.value=a):void 0},a.prototype.renderDigit=function(){return s(d)},a.prototype.insertDigit=function(a,b){return null!=b?this.inside.insertBefore(a,b):this.inside.children.length?this.inside.insertBefore(a,this.inside.children[0]):this.inside.appendChild(a)},a.prototype.addSpacer=function(a,b,c){var d;return d=s(g),d.innerHTML=a,c&&r(d,c),this.insertDigit(d,b)},a.prototype.addDigit=function(a,b){var c,d,e,f;if(null==b&&(b=!0),\"-\"===a)return this.addSpacer(a,null,\"odometer-negation-mark\");if(\".\"===a)return this.addSpacer(null!=(f=this.format.radix)?f:\".\",null,\"odometer-radix-mark\");if(b)for(e=!1;;){if(!this.format.repeating.length){if(e)throw new Error(\"Bad odometer format without digits\");this.resetFormat(),e=!0}if(c=this.format.repeating[this.format.repeating.length-1],this.format.repeating=this.format.repeating.substring(0,this.format.repeating.length-1),\"d\"===c)break;this.addSpacer(c)}return d=this.renderDigit(),d.querySelector(\".odometer-value\").innerHTML=a,this.digits.push(d),this.insertDigit(d)},a.prototype.animate=function(a){return p&&\"count\"!==this.options.animation?this.animateSlide(a):this.animateCount(a)},a.prototype.animateCount=function(a){var c,d,e,f,g,h=this;if(d=+a-this.value)return f=e=u(),c=this.value,(g=function(){var i,j,k;return u()-f>h.options.duration?(h.value=a,h.render(),void z(h.el,\"odometerdone\")):(i=u()-e,i>b&&(e=u(),k=i/h.options.duration,j=d*k,c+=j,h.render(Math.round(c))),null!=w?w(g):setTimeout(g,b))})()},a.prototype.getDigitCount=function(){var a,b,c,d,e,f;for(d=1<=arguments.length?G.call(arguments,0):[],a=e=0,f=d.length;f>e;a=++e)c=d[a],d[a]=Math.abs(c);return b=Math.max.apply(Math,d),Math.ceil(Math.log(b+1)/Math.log(10))},a.prototype.getFractionalDigitCount=function(){var a,b,c,d,e,f,g;for(e=1<=arguments.length?G.call(arguments,0):[],b=/^\\-?\\d*\\.(\\d*?)0*$/,a=f=0,g=e.length;g>f;a=++f)d=e[a],e[a]=d.toString(),c=b.exec(e[a]),null==c?e[a]=0:e[a]=c[1].length;return Math.max.apply(Math,e)},a.prototype.resetDigits=function(){return this.digits=[],this.ribbons=[],this.inside.innerHTML=\"\",this.resetFormat()},a.prototype.animateSlide=function(a){var b,c,d,f,g,h,i,j,k,l,m,n,o,p,q,s,t,u,v,w,x,y,z,B,C,D,E;if(s=this.value,j=this.getFractionalDigitCount(s,a),j&&(a*=Math.pow(10,j),s*=Math.pow(10,j)),d=a-s){for(this.bindTransitionEnd(),f=this.getDigitCount(s,a),g=[],b=0,m=v=0;f>=0?f>v:v>f;m=f>=0?++v:--v){if(t=A(s/Math.pow(10,f-m-1)),i=A(a/Math.pow(10,f-m-1)),h=i-t,Math.abs(h)>this.MAX_VALUES){for(l=[],n=h/(this.MAX_VALUES+this.MAX_VALUES*b*e),c=t;h>0&&i>c||0>h&&c>i;)l.push(Math.round(c)),c+=n;l[l.length-1]!==i&&l.push(i),b++}else l=function(){E=[];for(var a=t;i>=t?i>=a:a>=i;i>=t?a++:a--)E.push(a);return E}.apply(this);for(m=w=0,y=l.length;y>w;m=++w)k=l[m],l[m]=Math.abs(k%10);g.push(l)}for(this.resetDigits(),D=g.reverse(),m=x=0,z=D.length;z>x;m=++x)for(l=D[m],this.digits[m]||this.addDigit(\" \",m>=j),null==(u=this.ribbons)[m]&&(u[m]=this.digits[m].querySelector(\".odometer-ribbon-inner\")),this.ribbons[m].innerHTML=\"\",0>d&&(l=l.reverse()),o=C=0,B=l.length;B>C;o=++C)k=l[o],q=document.createElement(\"div\"),q.className=\"odometer-value\",q.innerHTML=k,this.ribbons[m].appendChild(q),o===l.length-1&&r(q,\"odometer-last-value\"),0===o&&r(q,\"odometer-first-value\");return 0>t&&this.addDigit(\"-\"),p=this.inside.querySelector(\".odometer-radix-mark\"),null!=p&&p.parent.removeChild(p),j?this.addSpacer(this.format.radix,this.digits[j-1],\"odometer-radix-mark\"):void 0}},a}(),m.options=null!=(E=window.odometerOptions)?E:{},setTimeout(function(){var a,b,c,d,e;if(window.odometerOptions){d=window.odometerOptions,e=[];for(a in d)b=d[a],e.push(null!=(c=m.options)[a]?(c=m.options)[a]:c[a]=b);return e}},0),m.init=function(){var a,b,c,d,e,f;if(null!=document.querySelectorAll){for(b=document.querySelectorAll(m.options.selector||\".odometer\"),f=[],c=0,d=b.length;d>c;c++)a=b[c],f.push(a.odometer=new m({el:a,value:null!=(e=a.innerText)?e:a.textContent}));return f}},null!=(null!=(F=document.documentElement)?F.doScroll:void 0)&&null!=document.createEventObject?(D=document.onreadystatechange,document.onreadystatechange=function(){return\"complete\"===document.readyState&&m.options.auto!==!1&&m.init(),null!=D?D.apply(this,arguments):void 0}):document.addEventListener(\"DOMContentLoaded\",function(){return m.options.auto!==!1?m.init():void 0},!1),\"function\"==typeof define&&define.amd?define([],function(){return m}):\"undefined\"!=typeof exports&&null!==exports?module.exports=m:window.Odometer=m}).call(this);\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.5234375,
          "content": "{\n  \"name\": \"odometer\",\n  \"version\": \"0.4.8\",\n  \"description\": \"Transition numbers with ease\",\n  \"main\": \"odometer.js\",\n  \"authors\": [\n    \"Adam Schwartz <adam.flynn.schwartz@gmail.com>\",\n    \"Zack Bloom <zackbloom@gmail.com>\"\n  ],\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"grunt-contrib-coffee\": \"~0.7.0\",\n    \"coffee-script\": \"~1.6.3\",\n    \"grunt-contrib-uglify\": \"~0.2.4\",\n    \"grunt-cli\": \"~0.1.9\",\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-watch\": \"~0.5.3\",\n    \"grunt-contrib-compass\": \"~0.5.0\",\n    \"color\": \"~0.4.4\"\n  }\n}\n"
        },
        {
          "name": "sass",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}