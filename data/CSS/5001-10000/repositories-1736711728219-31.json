{
  "metadata": {
    "timestamp": 1736711728219,
    "page": 31,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Compass/compass",
      "stars": 6713,
      "defaultBranch": "stable",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "*.gem\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.974609375,
          "content": "language: ruby\n\nrvm:\n  - 1.8.7\n  - 1.9.2\n  - 1.9.3\n  - jruby-18mode\n  - jruby-19mode\n  - rbx\n  - ree\n  - 2.0.0\n  - 2.1.0\n  - 2.2.0\n\nsudo: false\n\nenv:\n  - CI_TEST=core\n  - CI_TEST=cli\n\ngemfile:\n  - core/Gemfile\n  - cli/gemfiles/sass_3_3.gemfile\n  - cli/gemfiles/listen_2.gemfile\n\nscript: cd $CI_TEST && bundle exec rake\n\nmatrix:\n  exclude:\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: 1.8.7\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: 1.8.7\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: 1.8.7\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: 1.9.2\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: 1.9.2\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: 1.9.2\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: 1.9.3\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: 1.9.3\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: 1.9.3\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: jruby-18mode\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: jruby-18mode\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: jruby-18mode\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: jruby-19mode\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: jruby-19mode\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: jruby-19mode\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: rbx\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: rbx\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: rbx\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: ree\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: ree\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: ree\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: 2.0.0\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: 2.0.0\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: 2.0.0\n  - gemfile: cli/gemfiles/sass_3_3.gemfile\n    env: CI_TEST=core\n    rvm: 2.1.0\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=core\n    rvm: 2.1.0\n  - gemfile: core/Gemfile\n    env: CI_TEST=cli\n    rvm: 2.1.0\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=cli\n    rvm: 1.8.7\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=cli\n    rvm: 1.9.2\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=cli\n    rvm: jruby-18mode\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=cli\n    rvm: jruby-19mode\n  - gemfile: cli/gemfiles/listen_2.gemfile\n    env: CI_TEST=cli\n    rvm: ree\n\nnotifications:\n  irc: {channels: \"irc.freenode.org#compass\"}\n  campfire:\n    rooms:\n      secure: GXnvuoZ8BVMv+JwJIBb0Ey1ARbfeypmCvpmynykD5taooedTqwyTeT32jw1YTQAOuBewgeWW1H4bF10ySz0GWmu6X2sNx9CVYT1dFudoMvLtnvEmAe0JyyRuSCBFj45jP21eRUAACltxzyX4q/gh+zRIlaRin9YBo/Xv84gDzLw=\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.2998046875,
          "content": "  Contributing Stylesheets to Compass\n  ===================================\n\n  **Please make all pull requests against the master branch**\n\n  Thank you for your interest in contributing to Compass. Our goal is to make it as easy\n  as we can for you to contribute changes to compass -- So if there's something here that\n  seems harder than it ought to be, please let us know.\n\n  If you find a bug **in this document**, you are bound to contribute a fix. Stop reading now\n  if you do not wish to abide by this rule.\n\n  **Step 1**: If you do not have a github account, create one.\n\n  **Step 2**: Fork Compass to your account. Go to the [main repo](http://github.com/chriseppstein/compass)\n  and click the fork button.\n\n  ![Fork Me](http://img.skitch.com/20101015-n4ssnfyj16e555cnn7wp2pg717.png)\n\n  Now we're at a decision point. What kind of change do you intend to make?\n\n  * [Fix a typo (or some other trivial change)](#trivial-changes)\n  * [Documentation Changes](#documentation-changes)\n  * [Fixing Stylesheet Bugs](#stylesheet-bugs)\n  * [New Stylesheet Features](#stylesheet-changes)\n  * [Ruby Changes](#ruby-changes)\n\n  Here's some general information about the project you might find useful along the way:\n\n  * [Submitting Patches](#patches)\n  * [Project Structure](#project-structure)\n  * [General Philosophy](#project-philosophy)\n  * [Stylesheet Conventions](#stylesheet-conventions)\n  * [Miscellaneous Stuff](#faq)\n    * [Setting up Git](#setting-up-git)\n    * [Using Compass while Under Development](#running-local-code)\n    * [Running Tests](#running-tests)\n    * [Recovering from a cherry-pick or a rebase](#recovering-from-rebased-or-cherry-picked-changesets)\n\n  <h2 id=\"trivial-changes\">Making Trivial Changes</h2>\n\n  Thanks to Github, making small changes is super easy. After forking the project navigate\n  to the file you want to change and click the edit link.\n\n  ![Edit Me](http://img.skitch.com/20101015-n2x2iaric7wkey2x7u4fa2m1hj.png)\n\n  Change the file, write a commit message, and click the `Commit` button.\n\n  ![Commit Me](http://img.skitch.com/20101015-br74tfwtd1ur428mq4ejt12kfc.png)\n  Now you need to get your change [accepted](#patches).\n\n\n  <h2 id=\"documentation-changes\">Making Documentation Changes</h2>\n\n  The compass documentation is stored in two places. First, the `doc-src` directory is\n  where the documentation lives -- however much of the documentation is generated\n  from comments in the Sass files themselves. More information on [changing\n  documentation][documentation]. Once your changes are pushed, please\n  [submit them](#patches).\n\n  <h2 id=\"stylesheet-bugs\">Fixing Stylesheet Bugs</h2>\n\n  **Step 3**: If this is a bug you discovered. Please [report it][issues] before working on a fix.\n  This helps us better understand the patch.\n\n  **Step 4**: Get [the code](#setting-up-git) if you haven't yet done so.\n\n  **Step 5**: Fix the bug and commit the changes. Please make sure to mention the bug\n  id in your commit message like so:\n\n      Fixed the display of the fizzlebuzz in IE6.\n\n      Closes GH-123.\n\n  **Step 6**: Verify the fix in as many browsers as you can as well as against your own\n  project. How to [use compass while changing it](#running-local-code).\n\n  **Step 7**: Make sure the tests pass. More info on [running tests](#running-tests)\n  If the tests fail, fix the tests or the stylesheets accordingly. If the tests, don't\n  fail, that means this aspect was not well enough tested. Please [add or augment\n  a test](#writing-tests).\n\n  You're done. Please [submit your changes](#patches).\n\n  <h2 id=\"stylesheet-changes\">Making Stylesheet Changes</h2>\n\n  It is a good idea to discuss new features ideas with the compass users and developers\n  before building something. Please don't be shy; send an email to the [compass mailing\n  list](http://groups.google.com/group/compass-users).\n\n  Many feature ideas are good but not obviously a good fit for the compass core library.\n  In these cases, you can and should create a [compass extension][extensions]. Sometimes\n  this is because the concept does not align with the [compass philosophy](#project-philosophy).\n  But sometimes it's just because we think the idea needs time to bake. [Documentation on\n  making extensions.][extensions]\n\n  **Step 3**: Get [the code](#setting-up-git) if you haven't yet done so.\n\n  **Step 4**: Add the feature -- contact the mailing list if you have any questions.\n\n  **Step 5**: Add a test case. More info on [writing tests for compass](#writing-tests).\n\n  **Step 6**: Documentation - Add or update the reference documentation. Add\n  an example of using the feature. See the [doc readme for details][documentation].\n\n  You're done. Please [submit your changes](#patches).\n\n  <h2 id=\"ruby-changes\">Making Ruby Changes</h2>\n\n  At this time, if you're a rubyist who's planning on working on the ruby-side of\n  things, it's assumed you know how to read code and use standard ruby tools like\n  rake, gem, bundler, test/unit, cucumber, rspec, etc. If you have any questions,\n  please ask. No changes will be accepted without accompanying tests.\n\n  <h2 id=\"patches\">Submitting Patches</h2>\n\n  If you are submitting features that have more than one changeset, please create a\n  topic branch to hold the changes while they are pending merge and also to track\n  iterations to the original submission. To create a topic branch:\n\n      $ git checkout -b new_branch_name\n      ... make more commits if needed ...\n      $ git push origin new_branch_name\n\n  You can now see these changes online at a url like:\n\n      http://github.com/your_user_name/compass/commits/new_branch_name\n\n  If you have single-commit patches, it is fine to keep them on master. But do keep in\n  mind that these changesets might be\n  [cherry-picked](#recovering-from-rebased-or-cherry-picked-changesets).\n\n  Once your changeset(s) are on github, select the appropriate branch containing your\n  changes and send a pull request. Make sure to choose the same upstream branch that\n  you developed against (probably stable or master). Most of the description of your\n  changes should be in the commit messages -- so no need to write a whole lot in the\n  pull request message. However, the pull request message is a good place to provide a\n  rationale or use case for the change if you think one is needed. More info on [pull\n  requests][pulls].\n\n  ![Pull Request Example](http://img.skitch.com/20101015-rgfh43yhk7e61fchj9wccne9cq.png)\n\n  Pull requests are then managed like an issue from the [compass issues page][issues].\n  A code review will be performed by a compass core team member, and one of three outcomes\n  will result:\n\n  1. The change is rejected -- Not all changes are right for [compass's\n     philosophy](#project-philosophy). If your change is rejected it might be better\n     suited for a plugin, at least until it matures and/or proves itself with the users.\n  2. The change is rejected, *unless* -- Sometimes, there are missing pieces, or\n     other changes that need to be made before the change can be accepted. Comments\n     will be left on the commits indicating what issues need to be addressed.\n  3. The change is accepted -- The change is merged into compass, sometimes minor\n     changes are then applied by the committer after the merge.\n\n  <h2 id=\"project-structure\">Project Structure</h2>\n\n      compass/\n        bin/\n          compass             - CLI executable\n        devbin/               - development scripts after installing the bundle\n        doc-src/              - source for documentation\n        docs/                 - generated documentation\n        features/             - tests for compass\n        frameworks/           - All frameworks in this directory are loaded automatically\n          compass/            - The compass framework\n            stylesheets/      - The compass libraries\n            templates/        - The compass project templates and patterns\n          blueprint/\n            stylesheets/      - The blueprint libraries\n            templates/        - The blueprint project templates and patterns\n        lib/\n          compass.rb          - The main compass ruby library\n          compass/\n            app_integration/  - integration with app frameworks\n            commands/         - UI agnostic support for the CLI\n            configuration/    - support for project configuration\n            exec/             - UI code for the CLI\n            installers/       - support for installing templates\n            sass_extensions/  - enhancements to Sass\n              functions/      - Sass functions exposed by compass\n              monkey_patches/ - Changes to sass itself\n        test/                 - unit tests\n\n  <h2 id=\"project-philosophy\">General Philosophy</h2>\n\n  1. Users specify their own selectors. Compass never forces a user\n     to use a presentational class name.\n  2. Compass does not require javascript. It is a CSS framework.\n  3. Compass core is \"design agnostic\". This is why compass core has no\n     grid framework -- grids are not design agnostic.\n  4. Compass frameworks are not special. If compass can do it, so should an extension\n     be able.\n  5. Sass is awesome -- Compass should make sass more accessible and\n     demonstrate how to use Sass to its fullest potential.\n  6. Developing across browsers is hard and will always be hard. It takes\n     a community to get it right.\n  7. By default, Compass supports as many browsers as it can. Where it can't\n     it progressively enhances. Where it degrades, the documentation should\n     make a note. Deviation from this requires an excellent reason.\n  8. Compass is a proving ground for Sass features. The watcher and color\n     functions are examples of features that started in Compass and got\n     moved to Sass.\n\n  <h2 id=\"stylesheet-conventions\">Stylesheet Conventions</h2>\n\n  1. All framework stylesheets are partials. Their filename begin with an underscore.\n     Otherwise, Sass will create stylesheets directly into the user's CSS directory.\n  2. Compass imports do not emit styles. There are a few limited exceptions to this like\n     the resets and base classes for inheritance.\n  3. Mixins with two-level defaults. Mixins often provide two levels of default\n     values. The first is a global default that can be overridden once. The second\n     is a default that can be overridden when the mixin is included.\n  4. Mixin argument names are part of the public API, make sure they are understandable and not\n     needlessly truncated or terse.\n  5. If adding a new folder of stylesheets, add a single stylesheet with the same name that\n     imports all of the stylesheets in the folder.\n  6. Try to avoid passing selectors as arguments. This is what mixins are for.\n\n\n  <h2 id=\"faq\">Common Problems &amp; Miscellaneous Info</h2>\n\n  <h3 id=\"setting-up-git\">Setting up Git</h3>\n\n  Please follow [these instructions](http://help.github.com/git-email-settings/)\n  to set up your email address and attribution information.\n\n  Download your git repo:\n\n      git clone git@github.com:your_username/compass.git\n\n  Set up a remote to the main repo:\n\n      cd compass\n      git remote add chriseppstein git://github.com/chriseppstein/compass.git\n\n  Getting recent changes from the main repo:\n\n      git fetch chriseppstein\n\n  <h3 id=\"running-local-code\">Using Compass while Under Development</h3>\n\n  1. Use the bin script. `/path/to/compass/bin/compass` is a version of the compass\n     command line that uses the local changes you have made. You can add `/path/to/compass/bin`\n     to your `$PATH`, or refer to it directly.\n  2. `gem build compass.gemspec`\n  3. `gem install compass-<version for the file that was just created>.gem` -- If installing to your\n     system gems, you'll probably need to add `sudo` to the front. If you don't know\n     what that means, you probably need to add `sudo` to the front.\n  4. In a [bundled][bundler] environment, you can configure your gem to use compass\n     while you work on it like so: `gem 'compass', :path => \"/Users/myusername/some/path/to/compass\"`\n     Bundler will perform some sort of charm on ruby to make it work.\n5. Configuring ruby directly. If you're a ruby pro, you probably don't need to be\n   told that you can set compass on the load path like so: `export RUBYLIB=/Users/myusername/some/path/to/compass/lib`\n\n<h3 id=\"running-tests\">Running Tests</h3>\n\n1. You must have Ruby installed on your system. After [setting up git](#setting-up-git),\n   change to the root directory of your git checkout of Compass.\n\n   `cd compass`\n\n2. Install the bundler Ruby gem.\n\n   `gem install bundler`\n\n   If installing to your system gems, you'll probably need to add `sudo` to the\n   front of that command. If you don't know what that means, you probably need\n   to add `sudo` to the front.\n\n3. Install development dependencies:\n\n   `bundle install --binstubs devbin`\n\n4. Running core library and stylesheet tests:\n\n   `bundle exec rake test features`\n\n5. Running behavior tests\n\n   `./devbin/cucumber`\n\nIf stylesheet tests fail, the output of the test project is captured in\n`test/fixtures/stylesheets/<project>/saved/` and the error message will report where\nthe error was. Here's an example:\n\n![Stylesheet Test Failure](http://img.skitch.com/20101015-k4t11k8n7xs2r53ftjhrji629d.png)\n\n<h3 id=\"writing-tests\">Writing Stylesheet Tests</h3>\n\nCompass has stylesheet tests to ensure that:\n\n- each stylesheet compiles\n- each stylesheet can be imported directly without any other dependencies\n- refactorings that should not affect the output, don't\n\nAt some point, it would be great to have a test system that verifies that the stylesheets\n*work correctly* in various browsers. If you have ideas for how to accomplish this in a sane\nway, please let us know.\n\nIn the `test/fixtures/stylesheets` directory, there are a number of compass projects.\nThe tests work by adding or updating the sass files, running the tests to make sure they fail,\nand then changing the expected css output to make the test pass. It is rudimentary, but as\na safety net, it has caught a number of problems that might have been missed otherwise.\nIf you add a new stylesheet to compass, please make sure to add a new test stylesheet\nthat only imports the newly added stylesheet and add rules that use the new features in that\nstylesheet.\n\n<h3 id=\"recovering-from-rebased-or-cherry-picked-changesets\">You cherry-picked/rebased\nmy changes. What should I do?</h3>\nDepending on any number of reasons, including but not limited to the alignment of the stars,\nYour changes might not be merged into compass using a simple merge. For instance, we might\ndecide to place a change against master into stable instead, or we might squish all your\nchanges together into a single commit at the time of merge, or we might want a change you've\nsubmitted but not a change that it was placed onto top of. In these cases, there are\na couple of ways you can react:\n\n1. If you have some changes on a branch that were not yet accepted, but other changes on that\n   branch were accepted then you should run the following command (make sure to fetch first):\n   `git checkout branch_name; git rebase chriseppstein/master` (assuming the change was applied\n   to the master branch)\n2. If all your changes on the topic branch were accepted or you don't care to keep it around\n   anymore: `git checkout master; git branch -D branch_name; git push origin :branch_name`\n\n[pulls]: http://help.github.com/pull-requests/\n[issues]: http://github.com/chriseppstein/compass/issues\n[documentation]: http://github.com/chriseppstein/compass/blob/stable/doc-src/README.markdown\n[bundler]: http://gembundler.com/\n[extensions]: /help/tutorials/extensions/\n"
        },
        {
          "name": "Guardfile",
          "type": "blob",
          "size": 0.470703125,
          "content": "group :tests do\n  guard :test do\n    watch(%r{^lib/(.+)\\.rb$}) { |m| \"test/#{m[1]}_test.rb\" }\n    watch(%r{^test/.+_test\\.rb$})\n    watch(%r{^test/units/.+_test\\.rb$})\n    watch('test/test_helper.rb') { \"test\" }\n  end\nend\n\ngroup :features do\n  guard :cucumber do\n    watch(%r{^features/.+\\.feature$})\n    watch(%r{^features/support/.+$}) { 'features' }\n    watch(%r{^features/step_definitions/(.+)_steps\\.rb$}) { |m| Dir[File.join(\"**/#{m[1]}.feature\")][0] || 'features' }\n  end\nend"
        },
        {
          "name": "LICENSE.markdown",
          "type": "blob",
          "size": 1.505859375,
          "content": "Copyright (c) 2009-2014 Christopher M. Eppstein\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nNo attribution is required by products that make use of this software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nExcept as contained in this notice, the name(s) of the above copyright\nholders shall not be used in advertising or otherwise to promote the sale,\nuse or other dealings in this Software without prior written authorization.\n\nContributors to this project agree to grant all rights to the copyright\nholder of the primary product. Attribution is maintained in the source\ncontrol history of the product.\n"
        },
        {
          "name": "README.markdown",
          "type": "blob",
          "size": 1.126953125,
          "content": "# Compass Stylesheet Authoring Framework\n\n**Depreciated:** Compass is no longer supported.\n\nBuild Status: [![Build Status](https://travis-ci.org/Compass/compass.png)](https://travis-ci.org/Compass/compass)\n\nCode Quality: [![Code Climate](https://codeclimate.com/github/Compass/compass.png)](https://codeclimate.com/github/Compass/compass)\n\n## Resources\n\n* [Compass Homepage](http://compass-style.org/)\n* [Installing Compass](http://compass-style.org/install/)\n* [Compass Reference](http://compass-style.org/install/reference/)\n\n## Author\nCompass is written by [Chris Eppstein](http://chriseppstein.github.io/).<br>\nChris is a software engineer at [LinkedIn](http://www.linkedin.com/) and a member of the [Sass](https://github.com/nex3/sass) core team.\n\n## Core Team Members\n\n* [Scott Davis](https://github.com/scottdavis)\n* [Miriam Suzanne](https://github.com/mirisuzanne)\n* [Brandon Mathis](https://github.com/imathis)\n\n## Major Contributors\n\n* [Nico Hagenburger](https://github.com/hagenburger)\n\n## License\nCopyright (c) 2008-2014 Christopher M. Eppstein<br>\nAll Rights Reserved.<br>\nReleased under a [slightly modified MIT License](LICENSE.markdown).\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 1.3984375,
          "content": "\nGEMS = ['core', 'cli', 'import-once']\n\n\ntask :default => %w[test]\n\ndesc \"Run all tests\"\ntask :test do\n  sh %{./test_all.sh} do |ok, res|\n     Rake::Task[\"test_cleanup\"].invoke if ok\n  end\nend\n\ndesc \"build gems\"\ntask :build_gems => [:test] do\n  GEMS.each do |gem|\n    chdir gem do\n      if gem == 'cli'\n        sh \"gem build compass.gemspec\"\n      else\n        sh \"gem build compass-#{gem}.gemspec\"\n      end\n    end\n  end\nend\n\ndesc \"publish gems\"\ntask :publish_gems => [:build_gems] do\n  GEMS.each do |gem|\n    chdir gem do\n      if gem == 'cli'\n        sh \"gem push compass.gemspec\"\n      else\n        sh \"gem push compass-#{gem}.gemspec\"\n      end\n    end\n  end\nend\n\ndesc \"Clean up all test files\"\ntask :test_cleanup do\n  dirs = [\n    'core/devbin/',\n    'core/.sass-cache/',\n    'core/test/integrations/projects/busted_font_urls/tmp/',\n    'core/test/integrations/projects/busted_image_urls/tmp/',\n    'core/test/integrations/projects/compass/tmp/',\n    'core/test/integrations/projects/envtest/tmp/',\n    'core/test/integrations/projects/image_urls/tmp/',\n    'core/test/integrations/projects/relative/tmp/',\n    'core/test/integrations/projects/uses_only_stylesheets_ext/tmp/',\n    'core/test/integrations/projects/valid/tmp/',\n    'import-once/.sass-cache/'\n  ]\n  dirs.each { |dir| rm_rf dir }\nend\n\n\ndesc \"Bundle Update\"\ntask :bundle_update do\n  GEMS.each do |gem|\n    chdir gem do\n      sh \"bundle update\"\n    end\n  end\nend\n"
        },
        {
          "name": "TODO.md",
          "type": "blob",
          "size": 3.6533203125,
          "content": "FYI: I'm abandoning the even/odd release numbering scheme in favor of using preview releases. Going forward the master branch will use the following release numbering:\n\n* 0.11.0.alpha.N.shortsha (Not tagged)\n* 0.11.0.beta.N (tagged, new features expected)\n* 0.11.0.rc.N (tagged, no new features expected)\n\nMUST:\n* A proper welcome page for blueprint projects (or delete it)\n* Rails Integration\n\nNICE:\n* some extension commands\n* Better help for commands and patterns\n* Color Palette extraction and management commands\n\nv0.11\n=====\nPlanned Release Date: Aug 2, 2010\nThis is a quick iteration release. The focus on turning out\neven better documentation and some stylesheet updates and\nenhancements that take better advantage of the Sass 3 features.\n\n### Docs (can be done on stable)\n\n* Improve the design\n* Better tutorials and getting started guides.\n* Terminal for Designers\n* Better examples & example navigation\n* Contribution guide:\n  * Compass stylesheets\n  * Compass ruby code\n  * Documentation patches\n* SCSS Style Guide\n* Bundler 1.0 support\n* Upgrade nanoc\n* Better search experience\n* Search mixins and constants and code fragments that might use those.\n* Awesome homepage that is better integrated with the docs.\n* HTML5 the docs so they can run locally in offline mode.\n\n### Compass Core\n\n* Updates as necessary to the CSS3 module as the spec process develops.\n* Typography module\n\n### Blueprint\n\n* Provide an option to use @extend in the blueprint grid\n\n### Rails\n\n* Fully integrated support of Rails 3\n\n### Other\n\n* Consider adding app integration with: Node.js, Django, Drupal, Wordpress\n  (Wherever opinionated layouts exist). Also, try to make one of these a plugin\n  to test out the concept.\n* clean up all the argument names in preparation for keyword argument support from sass.\n\nv0.12 \n=====\n\nThis release depends on Sass 3.2 and is aimed at taking advantage of\nthe new sass 3.2 feature set as well as really making the extensions\nsystem come alive. Since I don't foresee any deprecations in Sass 3.2,\nthis will not be a coordinated release. Instead, this release will\ntrail Sass 3.2 by a month or two.\n\n### Compass Core\n\n* Figure out what to do about multiple attribute properties like background.\n  Might require list and function support from sass.\n\n### Blueprint\n\n* If sass 3.2 is out with @function support, use that for grid\n  calculations, otherwise punt to 1.0.\n\n### Extensions\n\n* Extension registry on compass-style.org.\n* One step publishing via github + webhooks\n* Easy install via CLI\n* Local (per-user) extension repo with auto-discovery.\n* Video showing how easy it is to create, publish, and install an extension.\n\n\nv1.0 - Polaris\n==============\n\n### Blueprint\n\n* If the @extend version of the grid is full of win, make it the default.\n\n### Sassdoc\n\nExtract the compass documentation system into a stand-alone project.\n\n### Extensions\n\n* Build basic docs and host them for all extensions using sassdoc.\n* Support for selling extensions and taking a cut for umdf.org?\n\n### Project Tools\n\n* enable building project docs using the sassdoc tool.\n\nv2.0\n====\n\nVersion 2 is all about making compass easier to use. Compass and Sass\nwill have a GUI that makes it simple to manage your projects.\n\n### GUI Prerelease 1\n\n* Concept brainstorming\n* mockups\n* How can compass gui and sass gui interoperate or plug in.\n\n### GUI Prerelease 2\n\nBeta release as a separate install.\n\n### GUI Prerelease 3\n\n* Iterate based on feedback.\n* Integrate with a Sass GUI.\n* Embed the docs\n\n### One-click Installers\n\nInstall compass and sass with one click\n\n* Windows (Only if someone else wants to build and maintain it.)\n* Mac (.dmg + drag & drop app or installer)\n* Linux (Get distro packages going and in place for the 1.0 release)\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "compass-style.org",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "import-once",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_all.sh",
          "type": "blob",
          "size": 0.33203125,
          "content": "#!/bin/sh\n\ncd core && bundle install --quiet && bundle exec rake test && cd .. &&\n  cd cli && bundle install --quiet && bundle exec rake && cd .. &&\n  cd import-once && bundle install --quiet && bundle exec rake test && cd .. &&\n  cd import-once && (BUNDLE_GEMFILE=Gemfile_sass_3_2 bundle install --quiet && bundle exec rake test) && cd ..\n"
        }
      ]
    }
  ]
}