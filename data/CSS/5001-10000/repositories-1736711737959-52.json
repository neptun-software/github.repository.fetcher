{
  "metadata": {
    "timestamp": 1736711737959,
    "page": 52,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "steshaw/plt",
      "stars": 5254,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0205078125,
          "content": "index.md merge=union\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.005859375,
          "content": "_site\n"
        },
        {
          "name": ".ruby-version",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.2.2\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.0078125,
          "content": "index.md"
        },
        {
          "name": "_layouts",
          "type": "tree",
          "content": null
        },
        {
          "name": "category-theory",
          "type": "tree",
          "content": null
        },
        {
          "name": "effect-systems",
          "type": "tree",
          "content": null
        },
        {
          "name": "higher-type-theory",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.md",
          "type": "blob",
          "size": 22.7353515625,
          "content": "---\nlayout: page\ntitle: Programming Language Theory\n---\n\n\nProgramming Language Theory\n===========================\n\nLearning about _Programming Language Theory_ can be a tough journey,\nparticularly for programming practitioners who haven't studied it formally.\nThis resource is here to help. Please feel free to get in touch if you have\nideas for improvement.\n\n#### ðŸ’¡ Top Tips\n\nFor a quick course in Type Theory, Philip Wadler recommends: _[Types and\nProgramming Languages](http://www.cis.upenn.edu/~bcpierce/tapl/)_, _[Proofs\nand Types](http://www.paultaylor.eu/stable/Proofs+Types.html)_, followed by\n_[Advanced Topics in Types and Programming\nLanguages](https://www.cis.upenn.edu/~bcpierce/attapl/)_.\n\nSee also Daniel Gratzer's [Learn Type Theory](https://github.com/jozefg/learn-tt), and Darryl McAdams's [So you want to learn type theory](https://web.archive.org/web/20190213100051/http://purelytheoretical.com/sywtltt.html).\n\n\n\nType Theory\n-----------\n\n### Books\n\n- [PLFA](https://plfa.github.io/) - Programming Language Foundations in Agda - [Philip Wadler](https://github.com/wadler), [Wen Kokke](https://github.com/wenkokke)\n- [SF](https://softwarefoundations.cis.upenn.edu/) - Software Foundations - Benjamin C. Pierce et al. [Available with jsCoq](https://jscoq.github.io/ext/sf/)\n- [TAPL](http://www.cis.upenn.edu/~bcpierce/tapl/) - Types and Programming Languages - Benjamin C. Pierce\n- [PROT](http://www.paultaylor.eu/stable/Proofs+Types.html) Proofs and Types - Jean-Yves Girard, Yves Lafont and Paul Taylor - 1987-90 [pdf](http://www.paultaylor.eu/stable/prot.pdf)\n- [PFPL](http://www.cs.cmu.edu/~rwh/pfpl/) - Practical Foundations for Programming Languages (Second Edition) - Robert Harper [Online preview edition](http://www.cs.cmu.edu/~rwh/pfpl/2nded.pdf)\n- [ATTAPL](http://www.cis.upenn.edu/~bcpierce/attapl/) - Advanced Topics in Types and Programming Languages - Edited by Benjamin C. Pierce\n- [CPDT](http://adam.chlipala.net/cpdt/) - Certified Programming with Dependent Types - Adam Chlipala\n- [SEwPR](https://mitpress.mit.edu/9780262062756/semantics-engineering-with-plt-redex/) - Semantics Engineering with PLT Redex - Matthias Felleisen, Robby Findler, and Matthew Flatt. [Redex](https://redex.racket-lang.org/)\n- [HoTT](http://homotopytypetheory.org/book/) - Homotopy Type Theory, Univalent Foundations of Mathematics\n- [Coq'Art](http://www.labri.fr/perso/casteran/CoqArt/index.html) Interactive Theorem Proving and Program Development, Coq'Art: The Calculus of Inductive Constructions - Yves Bertot, Pierre CastÃ©ran.\n- [TTFP](http://www.cs.kent.ac.uk/people/staff/sjt/TTFP/) - Type Theory and Functional Programming - Simon Thompson, 1991\n- [PiMLTT](http://www.cse.chalmers.se/research/group/logic/book/) - Programming in Martin-LÃ¶f's Type Theory, An Introduction - Bengt NordstrÃ¶m, Kent Petersson, Jan M. Smith\n- Using, Understanding, and Unravelling The OCaml Language â€” An introduction [pdf](http://pauillac.inria.fr/~remy/cours/appsem/ocaml.pdf)\n-  Polymorphic typing of an algorithmic language (PhD Thesis) - Xavier Leroy [pdf](https://xavierleroy.org/publi/phd-thesis.pdf)\n- [ATP](http://www.cl.cam.ac.uk/~jrh13/atp/) - Handbook of Practical Logic and Automated Reasoning - John Harrison\n- Basic Simple Type Theory - J. Roger Hindley [pdf](http://mathtrielhighschool.files.wordpress.com/2011/08/number-theory.pdf) [paperback@booko](http://booko.com.au/9780521054225/Basic-Simple-Type-Theory)\n- [Lambda Calculus and Combinators](http://www.cambridge.org/us/academic/subjects/computer-science/programming-languages-and-applied-logic/lambda-calculus-and-combinators-introduction-2nd-edition) [pdf](http://pds14.egloos.com/pds/200901/16/93/Lambda-Calculus_and_Combinators.pdf) â€” J. Roger Hindley and Jonathan P. Seldin\n- [Semantics with Applications: An Appetizer](https://www.cs.ru.nl/~herman/onderwijs/semantics2019/wiley.pdf) â€” Hanne Riis Nielson, Flemming Nielson\n- An Introduction to Lambda Calculi for Computer Scientists - Chris Hankin\n- [The Definition of Standard ML (1990) and Commentary on Standard ML (1991)](https://web.archive.org/web/20180927020934/http://www.itu.dk/people/tofte/publ/1990sml/1990sml.html) [definition (pdf)](https://web.archive.org/web/20160518190441/http://www.itu.dk/people/tofte/publ/1990sml/1990sml.pdf) [commentary (pdf)](https://web.archive.org/web/20160917123723/https://www.itu.dk/people/tofte/publ/1990sml/1991commentaryBody.pdf)\n- [The Definition of Standard ML (Revised)](https://smlfamily.github.io/sml97-defn.pdf) - Milner, Fofte, Harper, and MacQueen\n- [Programs and Proofs](http://ilyasergey.net/pnp/) â€” Ilya Sergey [pdf](http://ilyasergey.net/pnp/pnp.pdf)\n- [Type Theory and Formal Proof: An Introduction](https://www.cambridge.org/core/books/type-theory-and-formal-proof/0472640AAD34E045C7F140B46A57A67C) â€” Rob Nederpelt, Herman Geuvers\n- [Lectures on the Curry-Howard Isomorphism (pdf)](http://disi.unitn.it/~bernardi/RSISE11/Papers/curry-howard.pdf)\n- Program = Proof â€” Samuel Mimram [pdf](https://www.lix.polytechnique.fr/Labo/Samuel.Mimram/teaching/INF551/course.pdf)\n\n\n### Papers\n\n- [A Tutorial Implementation of a Dependently Typed Lambda Calculus](http://www.andres-loeh.de/LambdaPi/) â€” Andres LÃ¶h, Conor McBride and Wouter Swierstra [pdf](http://www.andres-loeh.de/LambdaPi/LambdaPi.pdf). Previously published as [Simply Easy](http://strictlypositive.org/Easy.pdf).\n- [Î Î£: Dependent Types without the Sugar](https://www.andres-loeh.de/PiSigma/PiSigma.pdf) - Thorsten Altenkirch, Nils Anders Danielsson, Andres LÃ¶h, and Nicolas Oury\n- [Lambda Calculi with Types](http://ttic.uchicago.edu/~dreyer/course/papers/barendregt.pdf) â€” Henk Barendregt\n- [Intuitionistic Type Theory](http://www.csie.ntu.edu.tw/~b94087/ITT.pdf)\n- [Type Theory](https://plato.stanford.edu/entries/type-theory/) - Thierry Coquand\n\n\n### Videos\n\n- [OPLSS â€” Oregon Programming Language Summer School](https://www.cs.uoregon.edu/research/summerschool/)\n  - [OPLSS 2023 â€” Types, Semantics, and Logic](https://www.cs.uoregon.edu/research/summerschool/summer23/topics.php)\n  - [OPLSS 2022 â€” Types, Semantics, and Program Reasoning](https://www.cs.uoregon.edu/research/summerschool/summer22/topics.php)\n  - [OPLSS 2021 â€” Foundations of Programming and Security](https://www.cs.uoregon.edu/research/summerschool/summer21/topics.php)\n  - [OPLSS 2019 â€” Foundations of Probabilistic Programming and Security](https://www.cs.uoregon.edu/research/summerschool/summer19/topics.php)\n  - [OPLSS 2018 â€” Parallelism and Concurrency](https://www.cs.uoregon.edu/research/summerschool/summer18/topics.php)\n  - [OPLSS 2017 â€” A Spectrum of Types](https://www.cs.uoregon.edu/research/summerschool/summer17/topics.php)\n  - [OPLSS 2016 â€” Types, Logic, Semantics, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer16/curriculum.php)\n  - [OPLSS 2015 â€” Types, Logic, Semantics, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer15/curriculum.html)\n  - [OPLSS 2014 â€” Types, Logic, Semantics, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer14/curriculum.html)\n  - [OPLSS 2013 â€” Types, Logic, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer13/curriculum.html)\n  - [OPLSS 2012 â€” Logic, Languages, Compilation, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer12/curriculum.html)\n  - [OPLSS 2011 â€” Types, Semantics and Verification](http://www.cs.uoregon.edu/research/summerschool/summer11/curriculum.html)\n  - [OPLSS 2010 â€” Logic, Languages, Compilation, and Verification](http://www.cs.uoregon.edu/research/summerschool/summer10/curriculum.html)\n  - [Complete archives 2002-Present](https://www.cs.uoregon.edu/research/summerschool/archives.html)\n- [HoTTEST â€” Homotopy Type Theory Summer School 2022](https://www.uwo.ca/math/faculty/kapulkin/seminars/hottest_summer_school_2022.html)\n- [ICFP 2012 Monday keynote. Conor McBride: Agda-curious?](https://youtu.be/XGyJ519RY6Y)\n\n\n### Subtopics\n\n- [Higher Type Theory]({{site.github.url | replace: 'http://', '//'}}/higher-type-theory/)\n- [Module Systems]({{site.github.url | replace: 'http://', '//'}}/module-systems/)\n- [Effect Systems]({{site.github.url | replace: 'http://', '//'}}/effect-systems/)\n\n\n\nProgramming Languages\n---------------------\n\n\n### Books\n\n- [DCPL](https://mitpress.mit.edu/9780262201759/design-concepts-in-programming-languages/) - Design Concepts in Programming Languages â€“ Franklyn Turbak and David Gifford, 2008. [Course](https://ocw.mit.edu/courses/6-821-programming-languages-fall-2002/)\n- [CTM](http://www.info.ucl.ac.be/~pvr/book.html) - Concepts, Techniques, and Models of Computer Programming, Peter Van Roy and Seif Haridi\n- [EOPL](http://www.eopl3.com/) - Essentials of Programming Languages, 3rd Edition - Daniel P. Friedman\n- [PLAI](https://www.plai.org/) - Programming Languages: Application and Interpretation - Shriram Krishnamurthi\n- [PAIP](https://github.com/norvig/paip-lisp) Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp - Peter Norvig, 1992\n- [PLP](http://cs.rochester.edu/u/scott/pragmatics/) Programming Language Pragmatics - Michael L. Scott\n- [FSPL](https://mitpress.mit.edu/books/formal-semantics-programming-languages) The Formal Semantics of Programming Languages - Glynn Winskel\n- [PL:BPC](https://www.build-prove-compare.net/) Programming Languages: Build, Prove, and Compare - Norman Ramsey\n\n\n### Papers\n\n- [An argument against call/cc](http://okmij.org/ftp/continuations/against-callcc.html) â€” Oleg Kiselyov\n\n\n\nCompiler Construction\n---------------------\n\n\n### Books\n\n- [MinCaml](http://esumii.github.io/min-caml/index-e.html) - A Crash Course for the MinCaml Compiler\n- [MCIiML](http://www.cs.princeton.edu/~appel/modern/ml/) Modern Compiler Implementation in ML - Andrew W. Appel\n- [pj-lester-book](https://www.microsoft.com/en-us/research/publication/implementing-functional-languages-a-tutorial) Implementing functional languages: a tutorial - Simon Peyton Jones and David Lester, 1992\n- [slpj-book-1987](https://www.microsoft.com/en-us/research/wp-content/uploads/1987/01/slpj-book-1987.pdf) - The Implementation of Functional Programming Languages - Simon Peyton Jones - 1987\n- [MCD-2e](http://www.dickgrune.com/Books/MCD_2nd_Edition/) Modern Compiler Design, Second Edition â€” Dick Grune et al.\n- [EaC-2e](https://dl.acm.org/doi/10.1145/2088883.2088908) Engineering a Compiler, 2nd Edition, Cooper and Torczon\n- [Compiler Construction](https://people.inf.ethz.ch/wirth/CompilerConstruction/index.html), Niklaus Wirth\n- [DragonBook](https://suif.stanford.edu/dragonbook/) - \"The Dragon Book\" Compilers: Principles, Techniques, and Tools\n- [LiSP](http://www.cambridge.org/us/academic/subjects/computer-science/programming-languages-and-applied-logic/lisp-small-pieces) - Lisp in Small Pieces - Christian Queinnec\n- [CwC](http://www.cambridge.org/us/academic/subjects/computer-science/programming-languages-and-applied-logic/compiling-continuations) Compiling with Continuations - Andrew W. Appel\n- [Static Program Analysis](https://cs.au.dk/~amoeller/spa/spa.pdf), Anders MÃ¸ller and Michael I. Schwartzbach\n- [List of compiler books at the GCC Wiki](http://gcc.gnu.org/wiki/ListOfCompilerBooks)\n\n\n### Papers\n\n- [An Incremental Approach to Compiler Construction](http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf), Abdulaziz Ghuloum\n- [A Nanopass Framework for Compiler Education](http://www.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf), Dipanwita Sarkar, Oscar Waddell, R. Kent Dybvig\n- [A Nanopass Framework for Commercial Compiler Development](http://andykeep.com/pubs/dissertation.pdf), [Andrew W. Keep](http://andykeep.com/)\n- [ZINC](http://caml.inria.fr/pub/papers/xleroy-zinc.pdf) - The ZINC experiment, an economical implementation of the ML language - Xavier Leroy (Technical Report) [more OCaml papers](http://caml.inria.fr/about/papers.en.html)\n\n\n### Videos\n\n- [Stanford - Compilers](https://online.stanford.edu/course/compilers-0) - Alex Aiken\n\n\n\nRuntime systems\n---------------\n\n\n### Books\n\n- [The Garbage Collection Handbook, The Art of Automatic Memory Management](http://gchandbook.org/) â€” Richard Jones, Antony Hosking, Eliot Moss, 2011.\n\n\n### Papers\n\n- [Debunking the 'Expensive Procedure Call' Myth, or, Procedure Call Implementations Considered Harmful, or, Lambda: The Ultimate GOTO](https://web.archive.org/web/20180406191621/http://library.readscheme.org/page1.html) â€” Guy Lewis Steele, Jr. (1977) [pdf](https://web.archive.org/web/20180130013734/http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-443.pdf)\n\n\n\nFunctional Programming\n----------------------\n\n\n### Books\n\n- [Bird and Wadler](http://usi-pl.github.io/lc/sp-2015/doc/Bird_Wadler.%20Introduction%20to%20Functional%20Programming.1ed.pdf) - Introduction to Functional Programming, 1st Edition - Bird and Wadler\n- [AoP](http://www.amazon.com/books/dp/013507245X) - The Algebra of Programming - Richard Bird, Oege de Moor\n- [Programming in Haskell](http://www.cs.nott.ac.uk/~gmh/book.html) â€” Graham Hutton (2007)\n- [RWH](http://book.realworldhaskell.org/) - Real World Haskell - Bryan O'Sullivan, Don Stewart, and John Goerzen\n- [FPiS](http://www.manning.com/bjarnason/) - Functional Programming in Scala - Paul Chiusano and RÃºnar Bjarnason\n- [SICP](http://mitpress.mit.edu/sicp/), Structure and Interpretation of Computer Programs, by Abelson, Sussman, and Sussman\n- [PCPH](http://chimera.labs.oreilly.com/books/1230000000929) - Parallel and Concurrent Programming in Haskell - Simon Marlow\n- [RWOC](https://realworldocaml.org/) - Real World OCaml - Jason Hickey, Anil Madhavapeddy, and Yaron Minsky\n- [Developing Applications With OCaml](http://caml.inria.fr/pub/docs/oreilly-book/index.html) â€” Emmanuel Chailloux, Pascal Manoury and Bruno Pagano (2000)\n- [BTLS](http://www.ccs.neu.edu/home/matthias/BTLS/) - The Little Schemer - Daniel P. Friedman, Matthias Felleisen\n- [BTSS](http://www.ccs.neu.edu/home/matthias/BTSS/) - The Seasoned Schemer - Daniel P. Friedman, Matthias Felleisen\n- [BTML](http://www.ccs.neu.edu/home/matthias/BTML/) - The Little MLer - Matthias Felleisen, Daniel P. Friedman\n- [The Reasoned Schemer](http://minikanren.org/) and miniKanren\n- [HTDP](http://www.htdp.org/) - How to Design Programs - Matthias Felleisen, Robert Findler, Matthew Flatt, Shriram Krishnamurthi\n- [HR](http://homepages.cwi.nl/~jve/HR/) - The Haskell Road to Logic, Maths and Programming - 2nd Ed. - Kees Doets, Jan van Eijck [pdf](http://fldit-www.cs.uni-dortmund.de/~peter/PS07/HR.pdf)\n- A Book of Abstract Algebra - 2nd Ed. - Charles C. Pinter [booko](http://booko.com.au/9780486474175/Book-of-Abstract-Algebra)\n- Purely Functional Data Structures - Chris Okasaki [phd-thesis in pdf](http://www.cs.cmu.edu/~rwh/theses/okasaki.pdf) [paperback@booko](http://booko.com.au/9780521663502/Purely-Functional-Data-Structures) [More purely functional data structures](http://cstheory.stackexchange.com/questions/1539/whats-new-in-purely-functional-data-structures-since-okasaki)\n\n\n### Papers\n\n- [Lambda Papers](http://library.readscheme.org/page1.html) - Lambda: The Ultimate Imperative/Declarative/GOTO - Guy Steele and Gerald Sussman\n- [The Lambda Calculus](https://plato.stanford.edu/entries/lambda-calculus/) - Jesse Alama and Johannes Korbacher\n- [A Tutorial Introduction to the Lambda Calculus](https://personal.utdallas.edu/~gupta/courses/apl/lambda.pdf) - Raul Rojas\n- [Exploring Generic Haskell](http://www.andres-loeh.de/ExploringGH.pdf) (PhD thesis) - [Andres LÃ¶h](http://www.andres-loeh.de/). This an epic, accessible, book-length PhD on datatype generic programming.\n- ICFP accepted papers\n  - [2019](https://github.com/llelf/icfp2019-papers)\n  - [2018](https://icfp18.sigplan.org/track/icfp-2018-papers#program), [video playlist](https://www.youtube.com/watch?v=Z3vr5xylMCE&list=PLnqUlCo055hVknu7QAW_RUZRmRZWXmnvv)\n  - [2017](https://github.com/gasche/icfp2017-papers), [video playlist](https://www.youtube.com/watch?v=RoddXtl8SU8&list=PLnqUlCo055hW7kU-SBQEhC_87etA5Gqlq)\n  - [2016](https://github.com/gasche/icfp2016-papers), [video playlist](https://www.youtube.com/watch?v=EpifLmPM1L0&list=PLnqUlCo055hV-Yb_88YYUC2ucaBKCWCsa)\n  - [2015](https://github.com/mpickering/icfp2015-papers), [by session](http://icfpconference.org/icfp2015/toc.html), [video playlist](https://www.youtube.com/watch?v=PI99A08Y83E&list=PLnqUlCo055hWNtUo1Haoq347VhCqIjs7u)\n  - [2014](https://github.com/yallop/icfp2014-papers)\n  - [2013](https://github.com/gasche/icfp2013-papers)\n  - [2012](https://github.com/technogeeky/icfp12-paper-links)\n\n\n### Videos\n\n- [C9 Lectures: Dr. Erik Meijer - Functional Programming Fundamentals](http://channel9.msdn.com/Series/C9-Lectures-Erik-Meijer-Functional-Programming-Fundamentals)\n- [C9 Lectures: Dr. Ralf LÃ¤mmel - Going Bananas + Advanced Functional Programming](http://channel9.msdn.com/Tags/ralf-laemmel)\n- [Datatype-Generic Programming in Haskell](http://skillsmatter.com/podcast/home/a-haskell-lecture-with-leading-expert-andres-loh) - [Andres LÃ¶h](http://www.andres-loeh.de/) - [slides in pdf](http://www.andres-loeh.de/GP-ITB.pdf)\n\n\n\nCategory Theory\n---------------\n\nPhilip Wadler's advice here is \"read Pierce for motivation, Mac Lane for the\npresentation of the maths\".\n\n\n### Books\n\n- [Cakes, Custard and Category Theory: Easy recipes for understanding complex maths](http://www.amazon.com/Cakes-Custard-Category-Theory-understanding-ebook/dp/B00TA8SIV6) â€” [Eugenia Cheng](http://eugeniacheng.com/)\n- Category Theory, Steve Awodey. [pdf](https://pages.jh.edu/rrynasi1/NewFoundations4Math/Literature/Textbooks/Awodey2010CategoryTheory.2ndEdition.pdf) [course](https://pages.jh.edu/rrynasi1/NewFoundations4Math/Literature/Textbooks/Awodey2016CategoryTheory.LectureNotes/)\n- Basic Category Theory for Computer Scientists - Benjamin C. Pierce. Previously available in a draft entitled [A taste of category theory for computer scientists](https://kilthub.cmu.edu/articles/journal_contribution/A_taste_of_category_theory_for_computer_scientists/6602756/1)\n- [Categories for the Working Mathematician](http://www.mtm.ufsc.br/~ebatista/2016-2/maclanecat.pdf) â€” Saunders Mac Lane\n- [Conceptual Mathematics](http://www.cambridge.org/us/academic/subjects/mathematics/logic-categories-and-sets/conceptual-mathematics-first-introduction-categories-2nd-edition) A First Introduction to Categories, 2nd Edition - F. William Lawere and Stephen H. Schanuel\n- [Category Theory for the Sciences](http://category-theory.mitpress.mit.edu/) â€” David I. Spivak. Previously available in a draft entitled [Category Theory for Scientists](http://math.mit.edu/~dspivak/CT4S.pdf)\n- [CTCS-2nd](http://www.math.mcgill.ca/triples/Barr-Wells-ctcs.pdf) Category Theory for Computing Science - Michael Barr and Charles Wells [CTCS-1st](http://fef.ogu.edu.tr/matbil/eilgaz/kategori.pdf)\n- Categories, Types, and Structures: An Introduction to Category Theory for the Working Computer Scientist [pdf](http://www.cs.unibo.it/~asperti/PAPERS/book.pdf)\n- Topoi, The Categorical Analysis of Logic, Robert Goldblatt [Amazon](http://www.amazon.com/Topoi-Categorial-Analysis-Logic-Mathematics/dp/0486450260)\n- [TTT](http://www.tac.mta.ca/tac/reprints/articles/12/tr12abs.html) - Toposes, Triples and Theories - Michael Barr and Charles Wells\n- Category Theory Lectures Notes for ESSLLI - Michael Barr and Charles Wells [pdf](http://www.math.upatras.gr/~cdrossos/Docs/B-W-LectureNotes.pdf)\n- [Seven Sketches in Compositionality: An Invitation to Applied Category Theory](https://arxiv.org/abs/1803.05316) - Brendan Fong, David I Spivak\n- [Applied Category Theory Course](http://www.azimuthproject.org/azimuth/show/Applied+Category+Theory+Course) - online course conducted by John Baez [forum](https://forum.azimuthproject.org/discussion/1717/welcome-to-the-applied-category-theory-course)\n- [CTFP](https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/) - Category Theory for Programmers - [Bartosz Milewski](https://github.com/BartoszMilewski). The [free PDF version](https://github.com/hmemcpy/milewski-ctfp-pdf) was created by [Igal Tabachnik](https://github.com/hmemcpy). Video lectures based on this material: [part 1](https://www.youtube.com/watch?v=I8LbkfSSR58&list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_), [part 2](https://www.youtube.com/watch?v=3XTQSx1A3x8&list=PLbgaMIhjbmElia1eCEZNvsVscFef9m0dm), [part 3](https://www.youtube.com/watch?v=F5uEpKwHqdk&list=PLbgaMIhjbmEn64WVX4B08B4h2rOtueWIL). \n- [CT4P](https://arxiv.org/abs/2209.01259) Category Theory for Programming â€” Benedikt Ahrens, Kobe Wullaert\n\n\n### Journals\n\n- [TAC](http://www.tac.mta.ca/tac/) - Theory and Applications of Categories\n\n\n### Subtopics\n\n- [Recursion Schemes]({{site.github.url | replace: 'http://', '//'}}/category-theory/recursion-schemes.html)\n\n\n\nMathematics\n-----------\n\nSome related maths resources.\n\n\n### Mathematical Literacy/Thinking\n\nIt can be useful to have some background in mathematical thinking.\n\n- [Introduction to Mathematical Thinking](http://www.amazon.com/Introduction-Mathematical-Thinking-Keith-Devlin-ebook/dp/B009LTPSTO) â€” [Keith Devlin](http://profkeithdevlin.org/)\n- [How to prove it](http://www.amazon.com/How-Prove-It-Structured-Approach/dp/0521675995) â€” Daniel J. Velleman\n\n\n### Algebra\n\n- [A Computational Introduction to Number Theory and Algebra](http://shoup.net/ntb/) â€” Victor Shoup\n- Advanced Modern Algebra â€” Joseph J. Rotman [pdf](http://www.math.hcmuns.edu.vn/~nvdong/DaiSoDaiCuong/Advanced%20Modern%20Algebra%20-%20Joseph%20J.%20Rotman.pdf)\n- A Survey of Modern Algebra â€” Birkhoff and MacLane [Scribd](https://www.scribd.com/doc/127988704/Birkhoff-a-Survey-of-Modern-Algebra)\n\n\n\nOther collections\n-----------------\n\n- [Great Works in Programming Languages](http://www.cis.upenn.edu/~bcpierce/courses/670Fall04/GreatWorksInPL.shtml) â€” Benjamin Piece\n- [Classic Papers in Programming Languages and Logic](http://www.cs.cmu.edu/~crary/819-f09/) â€” Karl Crary\n- [The collected works of Per Martin-LÃ¶f](https://github.com/michaelt/martin-lof) â€” Michael Thompson and others\n- [PLT Texts Online](https://web.archive.org/web/20141002195305/http://www.cs.uu.nl:80/wiki/Techno/ProgrammingLanguageTheoryTextsOnline) â€” Frank Atanassow\n- [Functional programming books overview](http://alexott.net/en/fp/books/) â€” Alex (Alexey) Ott\n- [TypeFunc](https://github.com/williamdemeo/TypeFunc) â€” William Demeo\n- [Lambda the Ultimate](http://lambda-the-ultimate.org/) â€” Ehud Lamm et al.\n- [Archives of Lambda the Ultimate](http://www.angelfire.com/tx4/cus/lambda.html) (stale but includes \"classic\") â€” Chris Rathman\n- [Programming Language People](http://www.angelfire.com/tx4/cus/people/index.html) â€” Chris Rathman\n- [PL Summer Schools forall](https://gist.github.com/biboudis/377b4a4de4d1718df2d0) â€” [Aggelos Biboudis](http://biboudis.github.io/)\n- [Summer Schools Interesting Conferences](http://user.it.uu.se/~bengt/Info/summer-schools.shtml) â€” [Bengt Jonsson](http://user.it.uu.se/~bengt/)\n- [The Programming Language Zoo](http://andrej.com/plzoo/) â€” [Andrej Bauer](http://math.andrej.com/)\n- [Max Bernstein' PL resources](https://bernsteinbear.com/pl-resources/)\n- [Programming Language Research](https://github.com/imteekay/programming-language-research) â€” [TK](https://www.iamtk.co)\n"
        },
        {
          "name": "javascripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "module-systems",
          "type": "tree",
          "content": null
        },
        {
          "name": "params.json",
          "type": "blob",
          "size": 2.0322265625,
          "content": "{\"name\":\"PLT\",\"tagline\":\"A path to Programming Language Theory enlightenment\",\"body\":\"### Welcome to GitHub Pages.\\r\\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\\r\\n\\r\\n```\\r\\n$ cd your_repo_root/repo_name\\r\\n$ git fetch origin\\r\\n$ git checkout gh-pages\\r\\n```\\r\\n\\r\\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\\r\\n\\r\\n### Designer Templates\\r\\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\\r\\n\\r\\n### Rather Drive Stick?\\r\\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\\r\\n\\r\\n### Authors and Contributors\\r\\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\\r\\n\\r\\n### Support or Contact\\r\\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.\\r\\n\",\"google\":\"UA-62781857-1\",\"note\":\"Don't delete this file! It's used internally to help with page regeneration.\"}"
        },
        {
          "name": "stylesheets",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}