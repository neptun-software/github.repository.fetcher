{
  "metadata": {
    "timestamp": 1736711733778,
    "page": 44,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "connorferster/handcalcs",
      "stars": 5697,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.0966796875,
          "content": "handcalcs.egg-info/\nhandcalcs/.ipynb_checkpoints/\nhandcalcs/__pycache__\n*.ipynb\n*.lock\n.idea\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# VSCode\n.vscode/\n"
        },
        {
          "name": "Examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2548828125,
          "content": "  Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.4853515625,
          "content": "<p>\r\n<a href='https://coveralls.io/github/connorferster/handcalcs?branch=master'><img src='https://coveralls.io/repos/github/connorferster/handcalcs/badge.svg?branch=master' alt='Coverage Status' /></a>\r\n  <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\">\r\n  <img src=\"https://img.shields.io/pypi/v/handcalcs\">\r\n  <img src=\"https://img.shields.io/pypi/pyversions/handcalcs\">\r\n  <img src=\"https://img.shields.io/github/license/connorferster/handcalcs\">\r\n  <img src=\"https://static.pepy.tech/badge/handcalcs\">\r\n</p>\r\n<p align=\"center\">\r\n  <img src=\"docs/images/handcalcs.jpg\"><br>\r\n  Covert art by <a href = \"https://www.copperkettlegameworks.ca/\">Joshua Hoiberg</a>\r\n</p>\r\n\r\n<h1 align = \"center\">handcalcs:<br>Python calculations in Jupyter,<br>as though you wrote them by hand.</h1>\r\n\r\n`handcalcs` is a library to render Python calculation code automatically in Latex, but in a manner that mimics how one might format their calculation if it were written with a pencil:  write the symbolic formula, **followed by numeric substitutions**, and then the result.\r\n\r\nBecause `handcalcs` shows the numeric substitution, the calculations become significantly easier to check and verify by hand.\r\n\r\n\r\n## Contents\r\n\r\n* [Basic Demo](https://github.com/connorferster/handcalcs#basic-demo)\r\n* [Installation](https://github.com/connorferster/handcalcs#installing)\r\n* [Basic Usage](https://github.com/connorferster/handcalcs#basic-usage-1-as-a-jupyter-cell-magic-render)\r\n* [Enhanced Usage](https://github.com/connorferster/handcalcs#basic-usage-2-as-a-decorator-on-your-functions-handcalc)\r\n* [Features](https://github.com/connorferster/handcalcs#features)\r\n* [PDF Printing in Jupyter](https://github.com/connorferster/handcalcs#pdf-printing-in-jupyter)\r\n* [Expected Behaviours](https://github.com/connorferster/handcalcs#expected-behaviours)\r\n* [Gotchas and Disclaimer](https://github.com/connorferster/handcalcs#gotchas)\r\n* [YouTube Tutorials](https://github.com/connorferster/handcalcs#youtube-tutorials)\r\n* [Applications and Compatibility with Other Libraries (wiki)](https://github.com/connorferster/handcalcs/wiki)\r\n\r\n\r\n\r\n## Basic Demo\r\n\r\n![handcalcs demo 1](docs/images/basic_demo1.gif)\r\n\r\n\r\n## Installing\r\n\r\nYou can install using pip:\r\n\r\n`pip install handcalcs`\r\n\r\nTo install the optional nbconvert \"no input\" exporters, use:\r\n\r\n`pip install \"handcalcs[exporters]\"`\r\n\r\n**NEW**\r\n\r\nAs of v1.9.0, handcalcs no longer installs the \"no input\" nbconvert exporters. This was done to lighten the installation load of handcalcs and to ensure the package has appropriate scope. The nbconvert exporters are now \"out of scope\" and are separately maintained at [https://github.com/connorferster/nb-hideinputs](nb-hideinputs).\r\n\r\n## Basic Usage 1: As a Jupyter cell magic (`%%render`)\r\n`handcalcs` is intended to be used with either Jupyter Notebook or Jupyter Lab as a _cell magic_.\r\n\r\nFirst, import the module and run the cell:\r\n\r\n```python\r\nimport handcalcs.render\r\n```\r\n\r\n> Note: This will import both `%%tex` and `%%render` magics in the Jupyter Notebook. \r\n\r\nThen, in any cell that you want to render with `handcalcs`, just use the render cell magic at the top of your cell:\r\n\r\n```python\r\n%%render\r\n```\r\n\r\nFor example:\r\n\r\n```python\r\n%%render\r\na = 2\r\nb = 3\r\nc = 2*a + b/3\r\n```\r\n\r\n**That is it!**\r\n\r\nOnce rendered, you can then export your notebook as a PDF, provided you have a Latex environment installed on your system. If you are new to working with Latex and would like to install it on your system so you can use this functionality, please see the section [Installing Tex](https://github.com/connorferster/handcalcs/wiki), in the wiki.\r\n\r\nYou can also use the `%%tex` command to convert any Python code snippet into a valid LaTex. For Example:\r\n\r\nFirst import `handcalcs`. We are also importing a few properties/functions from __math__ package for the \r\nexample below.\r\n\r\n```python\r\nimport handcalcs.render\r\nfrom math import sqrt, pi\r\n```\r\n\r\nNow, you can also use the `%%tex` magic!\r\n\r\n```python\r\n%%tex\r\na = 2 / 3 * sqrt(pi)\r\n```\r\n\r\nThis will produce a LaTeX output as follows.\r\n\r\n```tex\r\n\\[\r\n\\begin{aligned}\r\na &= \\frac{ 2 }{ 3 } \\cdot \\sqrt{ \\pi } = \\frac{ 2 }{ 3 } \\cdot \\sqrt{ 3.142 } &= 1.182\r\n\\end{aligned}\r\n\\]\r\n```\r\n## Basic Usage 2: As a decorator on your functions, `@handcalc()`\r\n\r\n_Shout-out to @eriknw for developing [innerscope](https://github.com/eriknw/innerscope) and proactively integrating it into `handcalcs`. Thank you!_\r\n\r\n\r\nStart by importing the `@handcalc()` decorator:\r\n\r\n```python\r\nfrom handcalcs.decorator import handcalc\r\n```\r\n\r\n```python\r\n@handcalc([override: str = \"\", precision: int = 3, left: str = \"\", right: str = \"\", jupyter_display: bool = False])\r\n```\r\n\r\nReturns a tuple consisting of `(latex_code: str, locals: dict)`, where `locals` is a dictionary of all variables in the scope of the function namespace.\r\n\r\n* `override` is a str representing one of the acceptable override tags (see below)\r\n* `precision` is an int to alter the of decimal precision displayed\r\n* `left` and `right` are strings that can precede and follow the encoded Latex string, such as `\\\\[` and `\\\\]` or `$` and `$`\r\n* `jupyter_display`, when True, will return only the `locals` dictionary and instead will display the encoded Latex string rendering with `display(Latex(latex_code))` from `IPython.display`. Will return an error if not used within\r\n* `record`, when True, will activate the `HandcalcsCallRecorder` to allow the function to \"recall\" previous outputs (see below) **New in v1.8.0**\r\n\r\nIn your decorated function, everything between `def my_calc(...)` and a return statement (if any) is now like the code in a Jupyter cell, except it's a standard Python function.\r\n\r\nUsed in this way, you can use `@handcalc()` to dynamically generate Latex code for display in Jupyter and non-Jupypter Python environments (e.g. streamlit). \r\n\r\n![Parameters](docs/images/decorator.png)\r\n\r\n### HandcalcsCallRecorder (New in v1.8.0)\r\n\r\nThe `HandcalcsCallRecorder` is a new kind of function wrapper that is available from the `@handcalc` decorator. To activate it, select `record=True` as one of the arguments in the decorator function.\r\n\r\nThe intended use case is during iterations. In engineering, it is common to compute a whole bunch of values in a table or DataFrame. The table itself contains the results of the computations but the table does not necessarily reveal the computation steps. The `HandcalcsCallRecorder` allows you to display the calculation for one of the calculation iterations that have been processed by your decorated function, as shown in the example below:\r\n\r\n![HandcalcsCallRecorder](docs/images/call_recorder.gif)\r\n\r\n---\r\n\r\n## Global config options (New in v1.6.0)\r\n\r\nThis is a major new release for handcalcs and introduces the global configuration feature. This allows users to have control over several options of how handcalcs works. The configuration options, with their default values, are as follow:\r\n\r\n* `decimal_separator = \".\"`\r\n* `latex_block_start = \"\\\\[\"`\r\n* `latex_block_end = \"\\\\]\"`\r\n* `math_environment_start = \"aligned\"`\r\n* `math_environment_end = \"aligned\"`\r\n* `line_break = \"\\\\\\\\[10pt]\"`\r\n* `use_scientific_notation =  False`\r\n* `display_precision = 3`\r\n* `underscore_subscripts = True`\r\n* `greek_exclusions = []`\r\n* `param_columns = 3`\r\n* `preferred_string_formatter = \"L\"`\r\n* `custom_symbols = {}`\r\n\r\n### Config API\r\n\r\n```python\r\nimport handcalcs.render\r\n\r\nhandcalcs.set_option(\"display_precision\", 4)\r\nhandcalcs.set_option(\"param_columns\", 5) \r\nhandcalcs.set_option(\"line_break\", \"\\\\\\\\[20pt]\") \r\nhandcalcs.set_option(\"greek_exclusions\", [\"psi\"]) # etc...\r\n```\r\nThese changes now affect all cells rendered in the current session. If you want to permanently update the `config.json` file with these changes (so handcalcs will always load up with these options), you can then call `handcalcs.save_config()` and the changes will be saved (and thus immediately available in the next session).\r\n\r\n#### Custom Symbols (New in v1.7.0)\r\n\r\nYou can now add _custom symbols_ to your global config to handle ALL of the cases which handcalcs does not account for.\r\n\r\ne.g.\r\n\r\n```python\r\nhandcalcs.set_option(\"custom_symbols\", {\"V_dot\": \"\\\\dot{V}\", \"N_star\": \"N^{*}\"})\r\n```\r\n\r\nWill now allow this kind of rendering:\r\n\r\n![Custom symbols example showing the use of V_dot and N_star](docs/images/custom_symbols.png)\r\n\r\nThe docstring in the `handcalcs.set_option()` function demonstrates which options are available and what values they take.\r\n---\r\n\r\n\r\n## Override tags\r\n\r\n`handcalcs` makes certain assumptions about how you would like your calculation formatted and does not allow for a great deal of customization in this regard. However, there are currently **four** customizations you can make using `# override tags` as an argument after the `%%render` cell magic. Additionally, you can also specify the number of decimals of precision to display. You can only use __one__ override tag per cell **but** you can combine an override tag with a precision setting.\r\n\r\n**Override tags can be used with both the Jupyter cell magic and the function decorator**. To use a override tag with the decorator, you just supply it as an argument, e.g. `@handcalc(override='params', precision=2)`\r\n\r\nI will compare a basic rendering of the quadratic formula (below) with the change achieved with each override tag.\r\n\r\n### Basic rendering:\r\n![Parameters](docs/images/quadratic_formula_basic.png)\r\n\r\n\r\n___\r\n\r\n### `params`: \r\n`handcalcs` renders lines of code vertically, one after the other. However, when you are assigning variables, or displaying resulting variables, you may not want to waste all of that vertical space. \r\n\r\nUsing the `params` override tag, your list of parameters will instead render in three columns, thereby saving vertical space. Additionally, onsly the result will be shown, no calculations.\r\n\r\n![Params override example](docs/images/quadratic_formula_params.png)\r\n\r\n___\r\n\r\n### Adjust precision:\r\n\r\nThe number of decimal places in a cell can be adjusted by providing an integer after `%%render` to indicate the decimal precision to be displayed. Can be combined with another override tag.\r\n\r\n![Precision override example](docs/images/quadratic_formula_precision.png)\r\n\r\n___\r\n### `long` and `short`: \r\nTo save vertical space, `handcalcs` _attempts_ to figure out how long your calculation is and, if it is short enough, renders it out fully on one line.\r\n\r\nIf `handcalcs`'s internal test deems the calculation as being too long to fit onto one line, it breaks it out into multiple lines. \r\n\r\nUse the `# long` or `# short` override tags to override the length check and display the calculation in the \"Long\" format or the \"Short\" format for all calculations in the cell. e.g.\r\n\r\n#### `long: Spans multiple lines as though you had a long equation`\r\n\r\n![Long override example](docs/images/quadratic_formula_long.png)\r\n\r\n\r\n#### `short: Forced to a single line as though you had a short equation`\r\n```python\r\n    # Format for \"short\" calculations (can fit on one line):\r\n    c = 2*a + b/3 = 2*(2) + (3)/3 = 5\r\n\r\n    # Format for \"long\" calculations (requires multi-line format)\r\n    c = 2*a + b/3\r\n      = 2*(2) + (3)/3\r\n      = 5\r\n```\r\n![Short override example](docs/images/quadratic_formula_short.png)\r\n\r\n___\r\n### `symbolic`\r\nThe primary purpose of `handcalcs` is to render the full calculation with the numeric substitution. This allows for easy traceability and verification of the calculation. \r\n\r\nHowever, there may be instances when it is preferred to simply display calculations symbolically. For example, you can use the `symbolic` tag to use `handcalcs` as a fast way to render Latex equations symbolically.\r\n\r\nAlternatively, you may prefer to render out all of input parameters in one cell, your formulae symbolically in the following cell, and then all the final values in the last cell, skipping the numeric substitution process entirely.\r\n\r\nKeep in mind that even if you use the `symbolic` tag with your calculations, you still need to declare those variables (by assigning values to them) ahead of time in order for your calculation to be valid Python.\r\n\r\n![Short override example](docs/images/quadratic_formula_symbolic.png)\r\n\r\n---\r\n\r\n### `sympy`\r\n\r\nThis is intended to be used only with `sympy` loaded. Sympy allows for symbolic manipulation, solving, and integration of algebraic expressions. Sympy will render its own objects in Latex without handcalcs. \r\n\r\nIf you are manipulating a sympy expression or sympy equation for the purpose of calculation, you can use `handcalcs` to handle the substitution and calculation of your resulting expression. <br>\r\n\r\n_Note: Re-assigning your symbolic variables to numbers will clobber them as sympy variables. However, you are done with these now, right? So, it's no problem. If you need to work symbolically again, just re-run your notebook cells from the top._\r\n\r\n![Sympy demo](docs/images/sympy.png)\r\n\r\n---\r\n\r\n## Units Packages Compatibility\r\n\r\n`handcalcs` was designed to be used with the units package, [forallpeople](https://github.com/connorferster/forallpeople) (and [forallpeople](https://github.com/connorferster/forallpeople) was designed to be compatible with `handcalcs`). However, it has been recently reported that [pint](https://pint.readthedocs.org) can work to good effect, also.\r\n\r\n![display variable demo](docs/images/forallpeople.png)\r\n\r\n**For potential compatibility with other units packages, please see [the wiki.](https://github.com/connorferster/handcalcs/wiki)**\r\n\r\n---\r\n\r\n## Features\r\n\r\n### Quickly display the values of many variables\r\nNo more `print` statements needed. Just plop your variables onto a line and they will all be displayed.\r\n\r\n![display variable demo](docs/images/display_var.png)\r\n\r\n### Get Just the Latex Code, without the render\r\nIf you just want to generate the rendered Latex code directly to use in your own Latex files, you can use the `%%tex` cell magic instead:\r\n\r\n```python\r\n%%tex\r\na = 2\r\nb = 3\r\nc = 2*a + b/3\r\n```\r\n\r\nThen you can just copy and paste the result into your own LaTeX document.\r\n\r\n![tex cell magic demo](docs/images/tex.png)\r\n\r\n---\r\n\r\n### Subscripts (and sub-subscripts, etc.)\r\n\r\nSubscripts in variable names are automatically created when `_` is used in the variable name. Sub-subscripts are nested for each separate `_` used in series.\r\n\r\n![Subscripts demo](docs/images/subscripts.png)\r\n\r\n\r\n----\r\n\r\n### Greek symbols\r\n\r\nAny variable name that contains a Greek letter (e.g. \"pi\", \"upsilon\", \"eta\", etc.) as a string or substring will be replaced by the appropriate Latex code to represent that Greek letter.\r\n\r\n| symbol                  | substitution | symbol | substitution |\r\n|-------------------------|--------------|--------|--------------|\r\n| `alpha`                 | α            | `Alpha` |       Α       |\r\n| `beta`                  | β            | `Beta` |        Β       |\r\n| `gamma`                 | γ            | `Gamma` |        Γ      |\r\n| `delta`                 | δ            | `Delta` |        Δ      |\r\n| `epsilon`, `varepsilon` | ϵ, ε         | `Epsilon` |      Ε      |\r\n| `zeta`                  | ζ            | `Zeta`  |        Ζ      |\r\n| `eta`                   | η            | `Eta`  |          Η     |\r\n| `theta`, `vartheta`     | θ, ϑ         | `Theta` |         Θ     |\r\n| `iota`                  | ι            | `Iota` |         Ι      |\r\n| `kappa`                 | κ            | `Kappa` |         Κ     |\r\n| `lamb`                  | λ            | `Lamb` |          Λ     |\r\n| `mu`                    | μ            | `Mu` |           Μ      |\r\n| `nu`                    | ν            | `Nu` |           N      |\r\n| `xi`                    | ξ            | `Xi` |            Ξ     |\r\n| `omicron`               | ο            | `Omicron` |       Ο     |\r\n| `pi`, `varpi`           | π, ϖ         | `Pi` |            Π     |\r\n| `rho`, `varrho`         | ρ, ϱ         | `Rho` |           Ρ     |\r\n| `sigma`, `varsigma`     | σ, ς         | `Sigma` |         Σ     |\r\n| `tau`                   | τ            | `Tau`  |          Τ     |\r\n| `upsilon`               | υ            | `Upsilon` |       Υ     |\r\n| `phi`, `varphi`         | φ, ϕ         | `Phi`  |          Φ     |\r\n| `chi`                   | χ            | `Chi`   |         Χ     |\r\n| `psi`                   | ψ            | `Psi`   |         Ψ     |\r\n| `omega`                 | ω            | `Omega` |         Ω     |  \r\n\r\n* Using lower case letters as your variable name will make a lower case Greek letter.\r\n\r\n* Using a Capitalized Name for your variable will render it as an upper case Greek letter.\r\n\r\n![Greek symbols demo](docs/images/greeks.png)\r\n\r\n---\r\n\r\n### Functions, built-in or custom\r\n\r\nIf you are using Python functions in your calculation, eg. `min()` or `tan()`, they will be replaced with Latex code to represent that function in Latex.\r\n\r\nIf you are creating your own functions, then they will be rendered in Latex as a custom operator.\r\n\r\nIf you are using a function with the name `sqrt` (whether your own custom implementation or from `math.sqrt`), then it will be rendered as the radical sign.\r\n\r\n![Functions](docs/images/functions.png)\r\n\r\n---\r\n\r\n### Rendered in-line Comments\r\n\r\nAny comments placed after a line of calculation will be rendered as an inline comment in the Latex. \r\n\r\nThis makes it convenient to make notes along side your calculations to briefly explain where you may have acquired or derived a particular value.\r\n\r\n![Comments](docs/images/comments.png)\r\n\r\n---\r\n\r\n### Skip the substitution\r\n\r\nAny calculation entirely wrapped in parentheses, `()`, will be rendered as just `param = result`, without the substitution. \r\n\r\nThis can be convient when you want to calculate a parameter on the fly and not have it be the focus of the calculation.\r\n\r\n![Skip the substitution](docs/images/no_subs.png)\r\n\r\n---\r\n\r\n### Conditional statements\r\n\r\nMany calculations in the \"real world\" are dependent on context.\r\n\r\n`handcalcs` allows for the inclusion of some simple conditional statements into its code in a way that makes it easier to understand the context of the calculation.\r\n\r\n![Conditional calculations](docs/images/conditionals.png)\r\n\r\n*Note: Multiple \"lines\" of calculations can be used after the conditional expression provided that they are all on the same line and separated with \"`;`\". See [Expected Behaviours](https://github.com/connorferster/handcalcs#expected-behaviours) for more context.*\r\n\r\n---\r\n\r\n### Numeric integration\r\n\r\nYou can use `scipy.quad` to perform numeric integration on a pre-defined function and have `handcalcs` perform a basic rendering of it.\r\n\r\nThis behaviour is triggered if you use a function with either `integrate` or `quad` in the name.\r\n\r\n![Numeric integration](docs/images/integration.png)\r\n\r\n---\r\n\r\n### \"Prime\" notation\r\n\r\nSometimes you need to write \"prime\" on your variables:\r\n\r\n![Prime Notation](docs/images/prime.png)\r\n\r\n---\r\n\r\n## PDF Printing in Jupyter\r\n\r\n_Note:_ With `nbconvert` v6.0, installing templates (as shown in older YouTube videos) is no longer required. An `Exporter` for Jupyter Notebook/Lab is\r\ninstalled when `handcalcs` is installed which gives you access to two new File -> Save and Export as options: \r\n1. Export `HTML_NoInput`\r\n2. Export `LaTeX_NoInput`\r\n3. Export `PDF_NoInput`\r\n\r\nThese options suppress all input cells so you only see rendered outputs in your Jupyter notebooks.\r\n\r\nBy using these three options, you can create PDF exports either by HTML (and then PDF print from your browser) or via LaTex (whether directly or through\r\nyour own LaTeX environment).\r\n\r\n---\r\n\r\n##  Expected Behaviours\r\n\r\n`handcalcs` is intended to render arithmetical calculations written in Python code. It is not intended to render arbitrary Python into Latex. \r\n\r\nGiven that, handcalcs only renders a small subset of Python and there is a lot that will not work, especially anything that happens over multiple lines (e.g. function definitions, `for` loops, `with` statements, etc.).\r\n\r\n`handcalcs` works by parsing individual _lines_ of Python within a cell. It does not parse the cell as a whole. Therefore all statements to be rendered must be contained on a single line.\r\n\r\n### Accepted datatypes\r\n\r\n`handcalcs` will make an attempt to render all datatypes. However, it cannot yet render all \"collection\" based data types, e.g. `list` and `dict`. If you are using a collection to hold argument functions, e.g. `sum((23, 123, 45))`, use a `tuple` to ensure it is rendered properly. Alternatively, you can use one-dimensional `numpy` arrays (vectors) with handcalcs.\r\n\r\nObjects are rendered into Latex by two main approaches:\r\n\r\n1. If the object has a `_repr_latex_()` method defined, then that method is used.\r\n\r\n    a) If the object has some alternate method for rendering itself into Latex code, e.g. `.latex()` or `.to_latex()`, that will be attempted as well.\r\n    \r\n    In order for the representation to be rendered properly, the object's Latex represention must use commands that are implemented with MathJax and/or Katex.\r\n2. If the object does not have a Latex method, then `str()` is used.\r\n\r\nIf you are using object types which have str methods that render as `<MyObject: value=34>`, then that's what the Latex interpreter will see and attempt to render.\r\n\r\n### Arithmetic operators\r\n\r\n* `+` renders as `+`\r\n* `-` renders as `-`\r\n* `*` renders as the \"dot operator\" (Latex: \\cdot)\r\n* `/` always renders as a fraction\r\n* `**` renders as superscripts\r\n* `%` renders as the \"mod function\" (Latex: \\mod)\r\n\r\nCurrently `//` is not rendered but you can easily use `math.floor` as a function instead (as `floor`).\r\n\r\n\r\n\r\n### `for` loops and other iterations\r\n\r\nCurrently, showing rendered iterations is not supported. The intention use is that you perform your iterations in a cell that is not rendered and then, once the iteration has produced the desired resulting value, you render the result in a separate cell.\r\n\r\n## Gotchas\r\n\r\nBecause `handcalcs` is designed for use within the Jupyter environment, and because Jupyter cells can be run out of order, there exists the possibility of having a big mess of beautifully rendered but **completely incorrect** calculations if you _re-use variable names throughout your notebook_.\r\n\r\n`handcalcs` uses the notebook's user namespace dictionary to look up values for all variables in the namespace. If your calculations are re-using variable names throughout the notebook, then the dictionary entry for that name may not be what you think it is when you run cells out of the order originally intended.\r\n\r\nYou _can_ re-use variable names to good effect throughout a notebook, _IFF_ the cells are run in the correct order (easier if this is just top to bottom). \r\n\r\n**On this note: if you are using `handcalcs` for any kind of reporting that may become a legal document (e.g. design engineering calculations), it is up to YOU to ensure that the results are what you expect them to be. `handcalcs` is free and open-source software and the author(s) are not responsible for incorrect calculations that result from its use.**\r\n\r\nThat being said, the very purpose for the way `handcalcs` renders its math is to make it very easy to confirm and verify calculations by hand.\r\n\r\n## YouTube Tutorials\r\n\r\n**Getting Started with handcalcs (assumes zero Python knowledge)**\r\n\r\n[https://www.youtube.com/watch?v=ZNFhLCWqA_g](https://www.youtube.com/watch?v=ZNFhLCWqA_g)\r\n\r\n**Engineering Calculations: handcalcs-on-Jupyter vs. Excel**\r\n\r\n[https://www.youtube.com/watch?v=n9Uzy3Eb-XI](https://www.youtube.com/watch?v=n9Uzy3Eb-XI)\r\n\r\n## Applications and Compatibility with OPP (Other People's Packages)\r\n\r\n** Please see [the wiki](https://github.com/connorferster/handcalcs/wiki) for applications of `handcalcs` in education and engineering, in addition to examples of using `handcalcs` with other Python libraries such [streamlit](https://github.com/connorferster/handcalcs/wiki/Handcalcs-on--Streamlit) and [papermill](https://github.com/connorferster/handcalcs/wiki/Handcalcs-on-Papermill).\r\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "handcalcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.26953125,
          "content": "site_name: handcalcs documentation\nnav:\n  - Home: index.md\n  - Installation: installation.md\n  - API:\n    - Cell Magic: cell_magic.md\n    - Function Decorator: decorator.md\n  - Features: features.md\n  - Override tags: overrides.md\n  - Using Sympy: sympy.md\n\ntheme: readthedocs"
        },
        {
          "name": "pyproject.toml",
          "type": "blob",
          "size": 0.96875,
          "content": "[build-system]\nrequires = [\"flit_core >=3.2,<4\"]\nbuild-backend = \"flit_core.buildapi\"\n\n[project]\nname = \"handcalcs\"\nauthors = [{name = \"Connor Ferster\", email = \"connorferster@gmail.com\"}]\nreadme = \"README.md\"\nlicense = {file = \"LICENSE\"}\nclassifiers = [\"License :: OSI Approved :: Apache Software License\"]\ndynamic = [\"version\", \"description\"]\ndependencies = [\n    \"more_itertools\",\n    \"innerscope >= 0.7.0\",\n    \"pyparsing\"\n]\n\n[project.urls]\nSource = \"https://github.com/connorferster/handcalcs\"\n\n\n[project.optional-dependencies]\n\nexporters = [\n    \"nb-hideinputs\",\n]\n\ntest = [\n    \"pytest >= 8.0.0\",\n    \"pytest-cov >= 4.1.0\",\n    \"coverage[toml] >= 5.5.0\",\n    \"pint >= 0.23\",\n    \"sympy\",\n]\n\ndev = [\n    \"jupyterlab >= 4.0.0\",\n    \"forallpeople >= 2.0\",\n    \"black\",\n    \"pint >= 0.23\",\n    \"sympy\",\n]\n\ndoc = [\"sphinx\"]\n\n[tool.coverage.paths]\nsource = ['handcalcs', '*/site-packages']\n\n[tool.coverage.run]\nbranch = true\nsource = ['handcalcs']\n\n[tool.coverage.report]\nshow_missing = true"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0751953125,
          "content": "pyparsing>=2.4.0\ninnerscope >= 0.2.0\nmore-itertools >= 8.5.0\nnbconvert >= 6.0"
        },
        {
          "name": "test_handcalcs",
          "type": "tree",
          "content": null
        },
        {
          "name": "wiki_text.md",
          "type": "blob",
          "size": 1.4375,
          "content": "## This seems like a lot of effort to write yet _another_ software to render math. Haven't you ever heard of Excel/Maple/MathCAD/Mathematica/MATLAB/Octave/SMATH Studio?\n\nSMath Studio is excellent software and I highly recommend it. Octave is also great.\n\nMany of these softwares are proprietary.\n\nThey do not show numeric substitutions. \n\nThey do not auto-format your calculations. \n\nMany are not as extensible as `handcalcs` because they are not a part of the amazing python eco-system <3\n\n## Printing to PDF with Latex\n\nPrinting to PDF requires you to have a Latex environment installed\non your system and to have a Latex compiler available on your system's `PATH` variable so Jupyter can execute `xelatex` on a command line.\n\nFollowing an installation, you can open up a command line on your system and type `xelatex`. If the installation was successful and complete, the command will enter you into a Latex prompt instead of generating an error message.\n\n### Latex for Windows\n\nInstallation on Windows is easiest by installing the TeX distribution, [MiKTeX](https://miktex.org/howto/install-miktex).\nAfter installation, ensure that you allow automatic downloading of required\nto make operation easiest.\n\n### Latex for OSX\n\nInstallation on Mac OS X is easiest by installing [MacTeX](http://www.tug.org/mactex/mactex-download.html).\n\nBe sure to read the installation page to prevent/assist with any issues.\n\n### Latex for Linux\n\n`$ sudo apt install texlive-latex-extra`\n"
        }
      ]
    }
  ]
}