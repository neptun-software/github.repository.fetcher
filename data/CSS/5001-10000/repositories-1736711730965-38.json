{
  "metadata": {
    "timestamp": 1736711730965,
    "page": 38,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "progit/progit2",
      "stars": 5968,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1552734375,
          "content": "output\n.DS_Store\n\n# build artifacts\nGemfile.lock\nprogit.html\nprogit.pdf\nprogit.pdfmarks\nprogit.epub\nprogit.fb2.zip\nprogit-kf8.epub\nprogit.mobi\ncontributors.txt"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.06640625,
          "content": "Jean-NoÃ«l Avila <jn.avila@free.fr>\nScott Chacon <schacon@gmail.com>"
        },
        {
          "name": ".tgitconfig",
          "type": "blob",
          "size": 0.2373046875,
          "content": "[bugtraq]\n\turl = https://github.com/progit/progit2/issues/%BUGID%\n\tlogregex = \"(?:[Cc]lose[sd]?|[Ff]ix(?:e[sd])?|[Rr]esolve[sd]?):?\\\\s+(?:[Ii]ssues?\\\\s+#?|#)\\\\d+(?:(?:,|\\\\s+and)\\\\s+(?:[Ii]ssues?\\\\s+#?|#)\\\\d+)*\\n(\\\\d+)\"\n\n[tgit]\n\ticon = Pro.ico\n"
        },
        {
          "name": "A-git-in-other-environments.asc",
          "type": "blob",
          "size": 1.2822265625,
          "content": "[[A-git-in-other-environments]]\n[appendix]\n== Git in Other Environments\n\nIf you read through the whole book, you've learned a lot about how to use Git at the command line.\nYou can work with local files, connect your repository to others over a network, and work effectively with others.\nBut the story doesn't end there; Git is usually used as part of a larger ecosystem, and the terminal isn't always the best way to work with it.\nNow we'll take a look at some of the other kinds of environments where Git can be useful, and how other applications (including yours) work alongside Git.\n\ninclude::book/A-git-in-other-environments/sections/guis.asc[]\n\ninclude::book/A-git-in-other-environments/sections/visualstudio.asc[]\n\ninclude::book/A-git-in-other-environments/sections/visualstudiocode.asc[]\n\ninclude::book/A-git-in-other-environments/sections/jetbrainsides.asc[]\n\ninclude::book/A-git-in-other-environments/sections/sublimetext.asc[]\n\ninclude::book/A-git-in-other-environments/sections/bash.asc[]\n\ninclude::book/A-git-in-other-environments/sections/zsh.asc[]\n\ninclude::book/A-git-in-other-environments/sections/powershell.asc[]\n\n=== Summary\n\nYou've learned how to harness Git's power from inside the tools that you use during your everyday work, and also how to access Git repositories from your own programs.\n"
        },
        {
          "name": "B-embedding-git-in-your-applications.asc",
          "type": "blob",
          "size": 0.921875,
          "content": "[[B-embedding-git-in-your-applications]]\n[appendix]\n== Embedding Git in your Applications\n\nIf your application is for developers, chances are good that it could benefit from integration with source control.\nEven non-developer applications, such as document editors, could potentially benefit from version-control features, and Git's model works very well for many different scenarios.\n\nIf you need to integrate Git with your application, you have essentially two options: spawn a shell and call the `git` command-line program, or embed a Git library into your application.\nHere we'll cover command-line integration and several of the most popular embeddable Git libraries.\n\ninclude::book/B-embedding-git/sections/command-line.asc[]\n\ninclude::book/B-embedding-git/sections/libgit2.asc[]\n\ninclude::book/B-embedding-git/sections/jgit.asc[]\n\ninclude::book/B-embedding-git/sections/go-git.asc[]\n\ninclude::book/B-embedding-git/sections/dulwich.asc[]\n"
        },
        {
          "name": "C-git-commands.asc",
          "type": "blob",
          "size": 33.677734375,
          "content": "[[C-git-commands]]\n[appendix]\n== Git Commands\n\nThroughout the book we have introduced dozens of Git commands and have tried hard to introduce them within something of a narrative, adding more commands to the story slowly.\nHowever, this leaves us with examples of usage of the commands somewhat scattered throughout the whole book.\n\nIn this appendix, we'll go through all the Git commands we addressed throughout the book, grouped roughly by what they're used for.\nWe'll talk about what each command very generally does and then point out where in the book you can find us having used it.\n\n[TIP]\n====\nYou can abbreviate long options.\nFor example, you can type in `git commit --a`, which acts as if you typed `git commit --amend`.\nThis only works when the letters after `--` are unique for one option.\nDo use the full option when writing scripts.\n====\n\n=== Setup and Config\n\nThere are two commands that are used quite a lot, from the first invocations of Git to common every day tweaking and referencing, the `config` and `help` commands.\n\n==== git config\n\nGit has a default way of doing hundreds of things.\nFor a lot of these things, you can tell Git to default to doing them a different way, or set your preferences.\nThis involves everything from telling Git what your name is to specific terminal color preferences or what editor you use.\nThere are several files this command will read from and write to so you can set values globally or down to specific repositories.\n\nThe `git config` command has been used in nearly every chapter of the book.\n\nIn <<ch01-getting-started#_first_time>> we used it to specify our name, email address and editor preference before we even got started using Git.\n\nIn <<ch02-git-basics-chapter#_git_aliases>> we showed how you could use it to create shorthand commands that expand to long option sequences so you don't have to type them every time.\n\nIn <<ch03-git-branching#_rebasing>> we used it to make `--rebase` the default when you run `git pull`.\n\nIn <<ch07-git-tools#_credential_caching>> we used it to set up a default store for your HTTP passwords.\n\nIn <<ch08-customizing-git#_keyword_expansion>> we showed how to set up smudge and clean filters on content coming in and out of Git.\n\nFinally, basically the entirety of <<ch08-customizing-git#_git_config>> is dedicated to the command.\n\n[[ch_core_editor]]\n==== git config core.editor commands\n\nAccompanying the configuration instructions in <<ch01-getting-started#_editor>>, many editors can be set as follows:\n\n.Exhaustive list of `core.editor` configuration commands\n[cols=\"1,2\",options=\"header\"]\n|==============================\n|Editor | Configuration command\n|Atom |`git config --global core.editor \"atom --wait\"`\n|BBEdit (macOS, with command line tools) |`git config --global core.editor \"bbedit -w\"`\n|Emacs |`git config --global core.editor emacs`\n|Gedit (Linux) |`git config --global core.editor \"gedit --wait --new-window\"`\n|Gvim (Windows 64-bit) |`git config --global core.editor \"'C:\\Program Files\\Vim\\vim72\\gvim.exe' --nofork '%*'\"` (Also see note below)\n|Helix |`git config --global core.editor \"hx\"`\n|Kate (Linux) |`git config --global core.editor \"kate --block\"`\n|nano |`git config --global core.editor \"nano -w\"`\n|Notepad (Windows 64-bit) |`git config core.editor notepad`\n|Notepad++ (Windows 64-bit) |`git config --global core.editor \"'C:\\Program Files\\Notepad+\\+\\notepad++.exe' -multiInst -notabbar -nosession -noPlugin\"` (Also see note below)\n|Scratch (Linux)|`git config --global core.editor \"scratch-text-editor\"`\n|Sublime Text (macOS) |`git config --global core.editor \"/Applications/Sublime\\ Text.app/Contents/SharedSupport/bin/subl --new-window --wait\"`\n|Sublime Text (Windows 64-bit) |`git config --global core.editor \"'C:\\Program Files\\Sublime Text 3\\sublime_text.exe' -w\"` (Also see note below)\n|TextEdit (macOS)|`git config --global core.editor \"open --wait-apps --new -e\"`\n|Textmate |`git config --global core.editor \"mate -w\"`\n|Textpad (Windows 64-bit) |`git config --global core.editor \"'C:\\Program Files\\TextPad 5\\TextPad.exe' -m\"` (Also see note below)\n|UltraEdit (Windows 64-bit) | `git config --global core.editor Uedit32`\n|Vim |`git config --global core.editor \"vim --nofork\"`\n|Visual Studio Code |`git config --global core.editor \"code --wait\"`\n|VSCodium (Free/Libre Open Source Software Binaries of VSCode) | `git config --global core.editor \"codium --wait\"`\n|WordPad |`git config --global core.editor \"'C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe'\"`\n|Xi | `git config --global core.editor \"xi --wait\"`\n|==============================\n\n[NOTE]\n====\nIf you have a 32-bit editor on a Windows 64-bit system, the program will be installed in `C:\\Program Files (x86)\\` rather than `C:\\Program Files\\` as in the table above.\n====\n\n==== git help\n\nThe `git help` command is used to show you all the documentation shipped with Git about any command.\nWhile we're giving a rough overview of most of the more popular ones in this appendix, for a full listing of all of the possible options and flags for every command, you can always run `git help <command>`.\n\nWe introduced the `git help` command in <<ch01-getting-started#_git_help>> and showed you how to use it to find more information about the `git shell` in <<ch04-git-on-the-server#_setting_up_server>>.\n\n=== Getting and Creating Projects\n\nThere are two ways to get a Git repository.\nOne is to copy it from an existing repository on the network or elsewhere and the other is to create a new one in an existing directory.\n\n==== git init\n\nTo take a directory and turn it into a new Git repository so you can start version controlling it, you can simply run `git init`.\n\nWe first introduce this in <<ch02-git-basics-chapter#_getting_a_repo>>, where we show creating a brand new repository to start working with.\n\nWe talk briefly about how you can change the default branch name from \"`master`\" in <<ch03-git-branching#_remote_branches>>.\n\nWe use this command to create an empty bare repository for a server in <<ch04-git-on-the-server#_bare_repo>>.\n\nFinally, we go through some of the details of what it actually does behind the scenes in <<ch10-git-internals#_plumbing_porcelain>>.\n\n==== git clone\n\nThe `git clone` command is actually something of a wrapper around several other commands.\nIt creates a new directory, goes into it and runs `git init` to make it an empty Git repository, adds a remote (`git remote add`) to the URL that you pass it (by default named `origin`), runs a `git fetch` from that remote repository and then checks out the latest commit into your working directory with `git checkout`.\n\nThe `git clone` command is used in dozens of places throughout the book, but we'll just list a few interesting places.\n\nIt's basically introduced and explained in <<ch02-git-basics-chapter#_git_cloning>>, where we go through a few examples.\n\nIn <<ch04-git-on-the-server#_getting_git_on_a_server>> we look at using the `--bare` option to create a copy of a Git repository with no working directory.\n\nIn <<ch07-git-tools#_bundling>> we use it to unbundle a bundled Git repository.\n\nFinally, in <<ch07-git-tools#_cloning_submodules>> we learn the `--recurse-submodules` option to make cloning a repository with submodules a little simpler.\n\nThough it's used in many other places through the book, these are the ones that are somewhat unique or where it is used in ways that are a little different.\n\n=== Basic Snapshotting\n\nFor the basic workflow of staging content and committing it to your history, there are only a few basic commands.\n\n==== git add\n\nThe `git add` command adds content from the working directory into the staging area (or \"`index`\") for the next commit.\nWhen the `git commit` command is run, by default it only looks at this staging area, so `git add` is used to craft what exactly you would like your next commit snapshot to look like.\n\nThis command is an incredibly important command in Git and is mentioned or used dozens of times in this book.\nWe'll quickly cover some of the unique uses that can be found.\n\nWe first introduce and explain `git add` in detail in <<ch02-git-basics-chapter#_tracking_files>>.\n\nWe mention how to use it to resolve merge conflicts in <<ch03-git-branching#_basic_merge_conflicts>>.\n\nWe go over using it to interactively stage only specific parts of a modified file in <<ch07-git-tools#_interactive_staging>>.\n\nFinally, we emulate it at a low level in <<ch10-git-internals#_tree_objects>>, so you can get an idea of what it's doing behind the scenes.\n\n==== git status\n\nThe `git status` command will show you the different states of files in your working directory and staging area.\nWhich files are modified and unstaged and which are staged but not yet committed.\nIn its normal form, it also will show you some basic hints on how to move files between these stages.\n\nWe first cover `status` in <<ch02-git-basics-chapter#_checking_status>>, both in its basic and simplified forms.\nWhile we use it throughout the book, pretty much everything you can do with the `git status` command is covered there.\n\n==== git diff\n\nThe `git diff` command is used when you want to see differences between any two trees.\nThis could be the difference between your working environment and your staging area (`git diff` by itself), between your staging area and your last commit (`git diff --staged`), or between two commits (`git diff master branchB`).\n\nWe first look at the basic uses of `git diff` in <<ch02-git-basics-chapter#_git_diff_staged>>, where we show how to see what changes are staged and which are not yet staged.\n\nWe use it to look for possible whitespace issues before committing with the `--check` option in <<ch05-distributed-git#_commit_guidelines>>.\n\nWe see how to check the differences between branches more effectively with the `git diff A...B` syntax in <<ch05-distributed-git#_what_is_introduced>>.\n\nWe use it to filter out whitespace differences with `-b` and how to compare different stages of conflicted files with `--theirs`, `--ours` and `--base` in <<ch07-git-tools#_advanced_merging>>.\n\nFinally, we use it to effectively compare submodule changes with `--submodule` in <<ch07-git-tools#_starting_submodules>>.\n\n==== git difftool\n\nThe `git difftool` command simply launches an external tool to show you the difference between two trees in case you want to use something other than the built in `git diff` command.\n\nWe only briefly mention this in <<ch02-git-basics-chapter#_git_diff_staged>>.\n\n==== git commit\n\nThe `git commit` command takes all the file contents that have been staged with `git add` and records a new permanent snapshot in the database and then moves the branch pointer on the current branch up to it.\n\nWe first cover the basics of committing in <<ch02-git-basics-chapter#_committing_changes>>.\nThere we also demonstrate how to use the `-a` flag to skip the `git add` step in daily workflows and how to use the `-m` flag to pass a commit message in on the command line instead of firing up an editor.\n\nIn <<ch02-git-basics-chapter#_undoing>> we cover using the `--amend` option to redo the most recent commit.\n\nIn <<ch03-git-branching#_git_branches_overview>>, we go into much more detail about what `git commit` does and why it does it like that.\n\nWe looked at how to sign commits cryptographically with the `-S` flag in <<ch07-git-tools#_signing_commits>>.\n\nFinally, we take a look at what the `git commit` command does in the background and how it's actually implemented in <<ch10-git-internals#_git_commit_objects>>.\n\n==== git reset\n\nThe `git reset` command is primarily used to undo things, as you can possibly tell by the verb.\nIt moves around the `HEAD` pointer and optionally changes the `index` or staging area and can also optionally change the working directory if you use `--hard`.\nThis final option makes it possible for this command to lose your work if used incorrectly, so make sure you understand it before using it.\n\nWe first effectively cover the simplest use of `git reset` in <<ch02-git-basics-chapter#_unstaging>>, where we use it to unstage a file we had run `git add` on.\n\nWe then cover it in quite some detail in <<ch07-git-tools#_git_reset>>, which is entirely devoted to explaining this command.\n\nWe use `git reset --hard` to abort a merge in <<ch07-git-tools#_abort_merge>>, where we also use `git merge --abort`, which is a bit of a wrapper for the `git reset` command.\n\n==== git rm\n\nThe `git rm` command is used to remove files from the staging area and working directory for Git.\nIt is similar to `git add` in that it stages a removal of a file for the next commit.\n\nWe cover the `git rm` command in some detail in <<ch02-git-basics-chapter#_removing_files>>, including recursively removing files and only removing files from the staging area but leaving them in the working directory with `--cached`.\n\nThe only other differing use of `git rm` in the book is in <<ch10-git-internals#_removing_objects>> where we briefly use and explain the `--ignore-unmatch` when running `git filter-branch`, which simply makes it not error out when the file we are trying to remove doesn't exist.\nThis can be useful for scripting purposes.\n\n==== git mv\n\nThe `git mv` command is a thin convenience command to move a file and then run `git add` on the new file and `git rm` on the old file.\n\nWe only briefly mention this command in <<ch02-git-basics-chapter#_git_mv>>.\n\n==== git clean\n\nThe `git clean` command is used to remove unwanted files from your working directory.\nThis could include removing temporary build artifacts or merge conflict files.\n\nWe cover many of the options and scenarios in which you might used the clean command in <<ch07-git-tools#_git_clean>>.\n\n=== Branching and Merging\n\nThere are just a handful of commands that implement most of the branching and merging functionality in Git.\n\n==== git branch\n\nThe `git branch` command is actually something of a branch management tool.\nIt can list the branches you have, create a new branch, delete branches and rename branches.\n\nMost of <<ch03-git-branching#ch03-git-branching>> is dedicated to the `branch` command and it's used throughout the entire chapter.\nWe first introduce it in <<ch03-git-branching#_create_new_branch>> and we go through most of its other features (listing and deleting) in <<ch03-git-branching#_branch_management>>.\n\nIn <<ch03-git-branching#_tracking_branches>> we use the `git branch -u` option to set up a tracking branch.\n\nFinally, we go through some of what it does in the background in <<ch10-git-internals#_git_refs>>.\n\n==== git checkout\n\nThe `git checkout` command is used to switch branches and check content out into your working directory.\n\nWe first encounter the command in <<ch03-git-branching#_switching_branches>> along with the `git branch` command.\n\nWe see how to use it to start tracking branches with the `--track` flag in <<ch03-git-branching#_tracking_branches>>.\n\nWe use it to reintroduce file conflicts with `--conflict=diff3` in <<ch07-git-tools#_checking_out_conflicts>>.\n\nWe go into closer detail on its relationship with `git reset` in <<ch07-git-tools#_git_reset>>.\n\nFinally, we go into some implementation detail in <<ch10-git-internals#ref_the_ref>>.\n\n==== git merge\n\nThe `git merge` tool is used to merge one or more branches into the branch you have checked out.\nIt will then advance the current branch to the result of the merge.\n\nThe `git merge` command was first introduced in <<ch03-git-branching#_basic_branching>>.\nThough it is used in various places in the book, there are very few variations of the `merge` command -- generally just `git merge <branch>` with the name of the single branch you want to merge in.\n\nWe covered how to do a squashed merge (where Git merges the work but pretends like it's just a new commit without recording the history of the branch you're merging in) at the very end of <<ch05-distributed-git#_public_project>>.\n\nWe went over a lot about the merge process and command, including the `-Xignore-space-change` command and the `--abort` flag to abort a problem merge in <<ch07-git-tools#_advanced_merging>>.\n\nWe learned how to verify signatures before merging if your project is using GPG signing in <<ch07-git-tools#_signing_commits>>.\n\nFinally, we learned about Subtree merging in <<ch07-git-tools#_subtree_merge>>.\n\n==== git mergetool\n\nThe `git mergetool` command simply launches an external merge helper in case you have issues with a merge in Git.\n\nWe mention it quickly in <<ch03-git-branching#_basic_merge_conflicts>> and go into detail on how to implement your own external merge tool in <<ch08-customizing-git#_external_merge_tools>>.\n\n==== git log\n\nThe `git log` command is used to show the reachable recorded history of a project from the most recent commit snapshot backwards.\nBy default it will only show the history of the branch you're currently on, but can be given different or even multiple heads or branches from which to traverse.\nIt is also often used to show differences between two or more branches at the commit level.\n\nThis command is used in nearly every chapter of the book to demonstrate the history of a project.\n\nWe introduce the command and cover it in some depth in <<ch02-git-basics-chapter#_viewing_history>>.\nThere we look at the `-p` and `--stat` option to get an idea of what was introduced in each commit and the `--pretty` and `--oneline` options to view the history more concisely, along with some simple date and author filtering options.\n\nIn <<ch03-git-branching#_create_new_branch>> we use it with the `--decorate` option to easily visualize where our branch pointers are located and we also use the `--graph` option to see what divergent histories look like.\n\nIn <<ch05-distributed-git#_private_team>> and <<ch07-git-tools#_commit_ranges>> we cover the `branchA..branchB` syntax to use the `git log` command to see what commits are unique to a branch relative to another branch.\nIn <<ch07-git-tools#_commit_ranges>> we go through this fairly extensively.\n\nIn <<ch07-git-tools#_merge_log>> and <<ch07-git-tools#_triple_dot>> we cover using the `branchA...branchB` format and the `--left-right` syntax to see what is in one branch or the other but not in both.\nIn <<ch07-git-tools#_merge_log>> we also look at how to use the `--merge` option to help with merge conflict debugging as well as using the `--cc` option to look at merge commit conflicts in your history.\n\nIn <<ch07-git-tools#_git_reflog>> we use the `-g` option to view the Git reflog through this tool instead of doing branch traversal.\n\nIn <<ch07-git-tools#_searching>> we look at using the `-S` and `-L` options to do fairly sophisticated searches for something that happened historically in the code such as seeing the history of a function.\n\nIn <<ch07-git-tools#_signing_commits>> we see how to use `--show-signature` to add a validation string to each commit in the `git log` output based on if it was validly signed or not.\n\n==== git stash\n\nThe `git stash` command is used to temporarily store uncommitted work in order to clean out your working directory without having to commit unfinished work on a branch.\n\nThis is basically entirely covered in <<ch07-git-tools#_git_stashing>>.\n\n==== git tag\n\nThe `git tag` command is used to give a permanent bookmark to a specific point in the code history.\nGenerally this is used for things like releases.\n\nThis command is introduced and covered in detail in <<ch02-git-basics-chapter#_git_tagging>> and we use it in practice in <<ch05-distributed-git#_tagging_releases>>.\n\nWe also cover how to create a GPG signed tag with the `-s` flag and verify one with the `-v` flag in <<ch07-git-tools#_signing>>.\n\n=== Sharing and Updating Projects\n\nThere are not very many commands in Git that access the network, nearly all of the commands operate on the local database.\nWhen you are ready to share your work or pull changes from elsewhere, there are a handful of commands that deal with remote repositories.\n\n==== git fetch\n\nThe `git fetch` command communicates with a remote repository and fetches down all the information that is in that repository that is not in your current one and stores it in your local database.\n\nWe first look at this command in <<ch02-git-basics-chapter#_fetching_and_pulling>> and we continue to see examples of its use in <<ch03-git-branching#_remote_branches>>.\n\nWe also use it in several of the examples in <<ch05-distributed-git#_contributing_project>>.\n\nWe use it to fetch a single specific reference that is outside of the default space in <<ch06-github#_pr_refs>> and we see how to fetch from a bundle in <<ch07-git-tools#_bundling>>.\n\nWe set up highly custom refspecs in order to make `git fetch` do something a little different than the default in <<ch10-git-internals#_refspec>>.\n\n==== git pull\n\nThe `git pull` command is basically a combination of the `git fetch` and `git merge` commands, where Git will fetch from the remote you specify and then immediately try to merge it into the branch you're on.\n\nWe introduce it quickly in <<ch02-git-basics-chapter#_fetching_and_pulling>> and show how to see what it will merge if you run it in <<ch02-git-basics-chapter#_inspecting_remote>>.\n\nWe also see how to use it to help with rebasing difficulties in <<ch03-git-branching#_rebase_rebase>>.\n\nWe show how to use it with a URL to pull in changes in a one-off fashion in <<ch05-distributed-git#_checking_out_remotes>>.\n\nFinally, we very quickly mention that you can use the `--verify-signatures` option to it in order to verify that commits you are pulling have been GPG signed in <<ch07-git-tools#_signing_commits>>.\n\n==== git push\n\nThe `git push` command is used to communicate with another repository, calculate what your local database has that the remote one does not, and then pushes the difference into the other repository.\nIt requires write access to the other repository and so normally is authenticated somehow.\n\nWe first look at the `git push` command in <<ch02-git-basics-chapter#_pushing_remotes>>.\nHere we cover the basics of pushing a branch to a remote repository.\nIn <<ch03-git-branching#_pushing_branches>> we go a little deeper into pushing specific branches and in <<ch03-git-branching#_tracking_branches>> we see how to set up tracking branches to automatically push to.\nIn <<ch03-git-branching#_delete_branches>> we use the `--delete` flag to delete a branch on the server with `git push`.\n\nThroughout <<ch05-distributed-git#_contributing_project>> we see several examples of using `git push` to share work on branches through multiple remotes.\n\nWe see how to use it to share tags that you have made with the `--tags` option in <<ch02-git-basics-chapter#_sharing_tags>>.\n\nIn <<ch07-git-tools#_publishing_submodules>> we use the `--recurse-submodules` option to check that all of our submodules work has been published before pushing the superproject, which can be really helpful when using submodules.\n\nIn <<ch08-customizing-git#_other_client_hooks>> we talk briefly about the `pre-push` hook, which is a script we can setup to run before a push completes to verify that it should be allowed to push.\n\nFinally, in <<ch10-git-internals#_pushing_refspecs>> we look at pushing with a full refspec instead of the general shortcuts that are normally used.\nThis can help you be very specific about what work you wish to share.\n\n==== git remote\n\nThe `git remote` command is a management tool for your record of remote repositories.\nIt allows you to save long URLs as short handles, such as \"`origin`\" so you don't have to type them out all the time.\nYou can have several of these and the `git remote` command is used to add, change and delete them.\n\nThis command is covered in detail in <<ch02-git-basics-chapter#_remote_repos>>, including listing, adding, removing and renaming them.\n\nIt is used in nearly every subsequent chapter in the book too, but always in the standard `git remote add <name> <url>` format.\n\n==== git archive\n\nThe `git archive` command is used to create an archive file of a specific snapshot of the project.\n\nWe use `git archive` to create a tarball of a project for sharing in <<ch05-distributed-git#_preparing_release>>.\n\n==== git submodule\n\nThe `git submodule` command is used to manage external repositories within a normal repositories.\nThis could be for libraries or other types of shared resources.\nThe `submodule` command has several sub-commands (`add`, `update`, `sync`, etc) for managing these resources.\n\nThis command is only mentioned and entirely covered in <<ch07-git-tools#_git_submodules>>.\n\n=== Inspection and Comparison\n\n==== git show\n\nThe `git show` command can show a Git object in a simple and human readable way.\nNormally you would use this to show the information about a tag or a commit.\n\nWe first use it to show annotated tag information in <<ch02-git-basics-chapter#_annotated_tags>>.\n\nLater we use it quite a bit in <<ch07-git-tools#_revision_selection>> to show the commits that our various revision selections resolve to.\n\nOne of the more interesting things we do with `git show` is in <<ch07-git-tools#_manual_remerge>> to extract specific file contents of various stages during a merge conflict.\n\n==== git shortlog\n\nThe `git shortlog` command is used to summarize the output of `git log`.\nIt will take many of the same options that the `git log` command will but instead of listing out all of the commits it will present a summary of the commits grouped by author.\n\nWe showed how to use it to create a nice changelog in <<ch05-distributed-git#_the_shortlog>>.\n\n==== git describe\n\nThe `git describe` command is used to take anything that resolves to a commit and produces a string that is somewhat human-readable and will not change.\nIt's a way to get a description of a commit that is as unambiguous as a commit SHA-1 but more understandable.\n\nWe use `git describe` in <<ch05-distributed-git#_build_number>> and <<ch05-distributed-git#_preparing_release>> to get a string to name our release file after.\n\n=== Debugging\n\nGit has a couple of commands that are used to help debug an issue in your code.\nThis ranges from figuring out where something was introduced to figuring out who introduced it.\n\n==== git bisect\n\nThe `git bisect` tool is an incredibly helpful debugging tool used to find which specific commit was the first one to introduce a bug or problem by doing an automatic binary search.\n\nIt is fully covered in <<ch07-git-tools#_binary_search>> and is only mentioned in that section.\n\n==== git blame\n\nThe `git blame` command annotates the lines of any file with which commit was the last one to introduce a change to each line of the file and what person authored that commit.\nThis is helpful in order to find the person to ask for more information about a specific section of your code.\n\nIt is covered in <<ch07-git-tools#_file_annotation>> and is only mentioned in that section.\n\n==== git grep\n\nThe `git grep` command can help you find any string or regular expression in any of the files in your source code, even older versions of your project.\n\nIt is covered in <<ch07-git-tools#_git_grep>> and is only mentioned in that section.\n\n=== Patching\n\nA few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.\nThese commands help you manage your branches in this manner.\n\n==== git cherry-pick\n\nThe `git cherry-pick` command is used to take the change introduced in a single Git commit and try to re-introduce it as a new commit on the branch you're currently on.\nThis can be useful to only take one or two commits from a branch individually rather than merging in the branch which takes all the changes.\n\nCherry picking is described and demonstrated in <<ch05-distributed-git#_rebase_cherry_pick>>.\n\n==== git rebase\n\nThe `git rebase` command is basically an automated `cherry-pick`.\nIt determines a series of commits and then cherry-picks them one by one in the same order somewhere else.\n\nRebasing is covered in detail in <<ch03-git-branching#_rebasing>>, including covering the collaborative issues involved with rebasing branches that are already public.\n\nWe use it in practice during an example of splitting your history into two separate repositories in <<ch07-git-tools#_replace>>, using the `--onto` flag as well.\n\nWe go through running into a merge conflict during rebasing in <<ch07-git-tools#ref_rerere>>.\n\nWe also use it in an interactive scripting mode with the `-i` option in <<ch07-git-tools#_changing_multiple>>.\n\n==== git revert\n\nThe `git revert` command is essentially a reverse `git cherry-pick`.\nIt creates a new commit that applies the exact opposite of the change introduced in the commit you're targeting, essentially undoing or reverting it.\n\nWe use this in <<ch07-git-tools#_reverse_commit>> to undo a merge commit.\n\n=== Email\n\nMany Git projects, including Git itself, are entirely maintained over mailing lists.\nGit has a number of tools built into it that help make this process easier, from generating patches you can easily email to applying those patches from an email box.\n\n==== git apply\n\nThe `git apply` command applies a patch created with the `git diff` or even GNU diff command.\nIt is similar to what the `patch` command might do with a few small differences.\n\nWe demonstrate using it and the circumstances in which you might do so in <<ch05-distributed-git#_patches_from_email>>.\n\n==== git am\n\nThe `git am` command is used to apply patches from an email inbox, specifically one that is mbox formatted.\nThis is useful for receiving patches over email and applying them to your project easily.\n\nWe covered usage and workflow around `git am` in <<ch05-distributed-git#_git_am>> including using the `--resolved`, `-i` and `-3` options.\n\nThere are also a number of hooks you can use to help with the workflow around `git am` and they are all covered in <<ch08-customizing-git#_email_hooks>>.\n\nWe also use it to apply patch formatted GitHub Pull Request changes in <<ch06-github#_email_notifications>>.\n\n==== git format-patch\n\nThe `git format-patch` command is used to generate a series of patches in mbox format that you can use to send to a mailing list properly formatted.\n\nWe go through an example of contributing to a project using the `git format-patch` tool in <<ch05-distributed-git#_project_over_email>>.\n\n==== git imap-send\n\nThe `git imap-send` command uploads a mailbox generated with `git format-patch` into an IMAP drafts folder.\n\nWe go through an example of contributing to a project by sending patches with the `git imap-send` tool in <<ch05-distributed-git#_project_over_email>>.\n\n==== git send-email\n\nThe `git send-email` command is used to send patches that are generated with `git format-patch` over email.\n\nWe go through an example of contributing to a project by sending patches with the `git send-email` tool in <<ch05-distributed-git#_project_over_email>>.\n\n==== git request-pull\n\nThe `git request-pull` command is simply used to generate an example message body to email to someone.\nIf you have a branch on a public server and want to let someone know how to integrate those changes without sending the patches over email, you can run this command and send the output to the person you want to pull the changes in.\n\nWe demonstrate how to use `git request-pull` to generate a pull message in <<ch05-distributed-git#_public_project>>.\n\n=== External Systems\n\nGit comes with a few commands to integrate with other version control systems.\n\n==== git svn\n\nThe `git svn` command is used to communicate with the Subversion version control system as a client.\nThis means you can use Git to checkout from and commit to a Subversion server.\n\nThis command is covered in depth in <<ch09-git-and-other-systems#_git_svn>>.\n\n==== git fast-import\n\nFor other version control systems or importing from nearly any format, you can use `git fast-import` to quickly map the other format to something Git can easily record.\n\nThis command is covered in depth in <<ch09-git-and-other-systems#_custom_importer>>.\n\n=== Administration\n\nIf you're administering a Git repository or need to fix something in a big way, Git provides a number of administrative commands to help you out.\n\n==== git gc\n\nThe `git gc` command runs \"`garbage collection`\" on your repository, removing unnecessary files in your database and packing up the remaining files into a more efficient format.\n\nThis command normally runs in the background for you, though you can manually run it if you wish.\nWe go over some examples of this in <<ch10-git-internals#_git_gc>>.\n\n==== git fsck\n\nThe `git fsck` command is used to check the internal database for problems or inconsistencies.\n\nWe only quickly use this once in <<ch10-git-internals#_data_recovery>> to search for dangling objects.\n\n==== git reflog\n\nThe `git reflog` command goes through a log of where all the heads of your branches have been as you work to find commits you may have lost through rewriting histories.\n\nWe cover this command mainly in <<ch07-git-tools#_git_reflog>>, where we show normal usage to and how to use `git log -g` to view the same information with `git log` output.\n\nWe also go through a practical example of recovering such a lost branch in <<ch10-git-internals#_data_recovery>>.\n\n==== git filter-branch\n\nThe `git filter-branch` command is used to rewrite loads of commits according to certain patterns, like removing a file everywhere or filtering the entire repository down to a single subdirectory for extracting a project.\n\nIn <<ch07-git-tools#_removing_file_every_commit>> we explain the command and explore several different options such as `--commit-filter`, `--subdirectory-filter` and `--tree-filter`.\n\nIn <<ch09-git-and-other-systems#_git_p4>> we use it to fix up imported external repositories.\n\n=== Plumbing Commands\n\nThere were also quite a number of lower level plumbing commands that we encountered in the book.\n\nThe first one we encounter is `ls-remote` in <<ch06-github#_pr_refs>> which we use to look at the raw references on the server.\n\nWe use `ls-files` in <<ch07-git-tools#_manual_remerge>>, <<ch07-git-tools#ref_rerere>> and <<ch07-git-tools#_the_index>> to take a more raw look at what your staging area looks like.\n\nWe also mention `rev-parse` in <<ch07-git-tools#_branch_references>> to take just about any string and turn it into an object SHA-1.\n\nHowever, most of the low level plumbing commands we cover are in <<ch10-git-internals#ch10-git-internals>>, which is more or less what the chapter is focused on.\nWe tried to avoid use of them throughout most of the rest of the book.\n"
        },
        {
          "name": "CITATION.cff",
          "type": "blob",
          "size": 0.6767578125,
          "content": "# This CITATION.cff file was generated with cffinit.\n# Visit https://bit.ly/cffinit to generate yours today!\n\ncff-version: 1.2.0\ntitle: Pro Git\nmessage: >-\n  If you use this software, please cite it using the\n  metadata from this file.\ntype: software\nauthors:\n  - given-names: Scott\n    family-names: Chacon\n    email: schacon@gmail.com\n  - given-names: Ben\n    family-names: Straub\n    email: ben@straub.cc\nidentifiers:\n  - type: url\n    value: 'https://git-scm.com/book/en/v2'\n    description: Pro Git website\nrepository-code: 'https://github.com/progit/progit2'\nurl: 'https://git-scm.com/book/en/v2'\nkeywords:\n  - git\n  - book\n  - asciidoc\n  - pro-git\nlicense: CC-BY-NC-SA-3.0\nversion: '2'\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9638671875,
          "content": "# Contributing to Pro Git (2nd Edition)\n\n## Licensing your work to us\n\nWhen you open a pull request, you agree to provide your work under the [project license](LICENSE.asc).\nAlso, you agree to grant such license of your work as is required for the purposes of future print editions to @ben and @schacon.\nShould your changes appear in a printed edition, you'll be included in the [contributors list](book/contributors.asc).\n\n## Signaling an Issue\n\nSearch for similar issues, before creating a new issue.\n\nAlso, if this issue has been spotted on the git-scm.com site, cross-check that the issue is present in the pdf version.\nThe issue may have already been corrected in the source files, but not yet deployed to the git-scm.com site.\n\n## Small Corrections\n\nErrata and basic clarifications will be accepted if we agree that they improve the content.\nYou can also open an issue so that we can discuss how or if the issue needs to be addressed.\n\nIf you've never done this before, the [flow guide](https://docs.github.com/en/get-started/quickstart/github-flow) might be useful.\n\n## Large Rewrites\n\nOpen an issue for discussion before you start.\nA large rewrite tends to be very subjective, often only clarifying things for a small amount of readers.\nProfessional copy editors have already reviewed this content multiple times.\nIt's unlikely that your prose is going to be *so* much better that it's worth changing large portions of text.\n\n## Figures\n\nThe images in this book are generated using [Sketch 3](https://www.sketch.com/), with the [included sketchbook file](diagram-source/progit.sketch).\n\nTo create a figure:\n\n1. Add a page to the sketchbook.\nUse the included symbols wherever possible.\n2. Add a \"slice\" to your page.\nName the slice so that it matches the destination PNG filename, relative from the root of the source directory.\n3. Set your slice to export at \"800w\".\n\n## Translations\n\nIf you want to contribute to translating Pro Git into your language, take a look at [TRANSLATING.md](TRANSLATING.md).\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.380859375,
          "content": "source 'https://rubygems.org'\n\ngem 'rake', '13.2.1'\ngem 'asciidoctor', '2.0.22'\n\ngem 'json', '2.9.1'\ngem 'awesome_print', '1.9.2'\n\ngem 'asciidoctor-fb2', '0.7.0'\ngem 'asciidoctor-epub3', '2.1.3'\ngem 'asciidoctor-pdf', '2.3.17'\n\ngem 'coderay', '1.1.3'\ngem 'pygments.rb', '2.4.1'\ngem 'thread_safe', '0.3.6'\ngem 'epubcheck-ruby', '5.2.0.0'\ngem 'html-proofer', '5.0.9'\ngem 'kindlegen', '3.1.1'\n"
        },
        {
          "name": "LICENSE.asc",
          "type": "blob",
          "size": 0.2705078125,
          "content": "This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nTo view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/3.0 or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n"
        },
        {
          "name": "Pro.ico",
          "type": "blob",
          "size": 1605.583984375,
          "content": null
        },
        {
          "name": "README.asc",
          "type": "blob",
          "size": 1.986328125,
          "content": "= Pro Git, Second Edition\n\nWelcome to the second edition of the Pro Git book.\n\nYou can find this book online at: https://git-scm.com/book\n\nLike the first edition, the second edition of Pro Git is open source under a Creative Commons license.\n\nA couple of things have changed since open sourcing the first edition.\nFor one, we've moved from Markdown to the amazing AsciiDoc format for the text of the book; here's an https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/[AsciiDoc quick reference].\n\nWe've also moved to keeping the translations in separate repositories rather than subdirectories of the English repository.\nSee link:TRANSLATING.md[the translating document] for more information.\n\n== How To Generate the Book\n\nYou can generate the e-book files manually with Asciidoctor.\nIf you run the following you _may_ actually get HTML, Epub, Mobi and PDF output files:\n\n----\n$ bundle install\n$ bundle exec rake book:build\nConverting to HTML...\n -- HTML output at progit.html\nConverting to EPub...\n -- Epub output at progit.epub\nConverting to Mobi (kf8)...\n -- Mobi output at progit.mobi\nConverting to PDF...\n -- PDF output at progit.pdf\n----\n\nYou can generate just one of the supported formats (HTML, EPUB, mobi, or PDF).\nUse one of the following commands:\n\nTo generate the HTML book:\n\n----\n$ bundle exec rake book:build_html\n----\n\nTo generate the EPUB book:\n\n----\n$ bundle exec rake book:build_epub\n----\n\nTo generate the mobi book:\n\n----\n$ bundle exec rake book:build_mobi\n----\n\nTo generate the PDF book:\n\n----\n$ bundle exec rake book:build_pdf\n----\n\n== Signaling an Issue\n\nBefore signaling an issue, please check that there isn't already a similar one in the bug tracking system.\n\nAlso, if this issue has been spotted on the git-scm.com site, please cross-check that it is still present in this repo.\nThe issue may have already been corrected, but the changes have not been deployed yet.\n\n== Contributing\n\nIf you'd like to help out by making a change, take a look at the link:CONTRIBUTING.md[contributor's guide].\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 4.2353515625,
          "content": "namespace :book do\n\n  # Variables referenced for build\n  version_string = `git describe --tags --abbrev=0`.chomp\n  if version_string.empty?\n    version_string = '0'\n  else\n    versions = version_string.split('.')\n    version_string = versions[0] + '.' + versions[1] + '.' + versions[2].to_i.next.to_s\n  end\n  date_string = Time.now.strftime('%Y-%m-%d')\n  params = \"--attribute revnumber='#{version_string}' --attribute revdate='#{date_string}'\"\n  header_hash = `git rev-parse --short HEAD`.strip\n\n  # Check contributors list\n  # This checks commit hash stored in the header of list against current HEAD\n  def check_contrib\n    if File.exist?('book/contributors.txt')\n      current_head_hash = `git rev-parse --short HEAD`.strip\n      header = `head -n 1 book/contributors.txt`.strip\n      # Match regex, then coerce resulting array to string by join\n      header_hash = header.scan(/[a-f0-9]{7,}/).join\n\n      if header_hash == current_head_hash\n        puts \"Hash on header of contributors list (#{header_hash}) matches the current HEAD (#{current_head_hash})\"\n      else\n        puts \"Hash on header of contributors list (#{header_hash}) does not match the current HEAD (#{current_head_hash}), refreshing\"\n        sh \"rm book/contributors.txt\"\n        # Reenable and invoke task again\n        Rake::Task['book/contributors.txt'].reenable\n        Rake::Task['book/contributors.txt'].invoke\n      end\n    end\n  end\n\n  desc 'build basic book formats'\n  task :build => [:build_html, :build_epub, :build_fb2, :build_mobi, :build_pdf] do\n    begin\n        # Run check\n        Rake::Task['book:check'].invoke\n\n        # Rescue to ignore checking errors\n        rescue => e\n        puts e.message\n        puts 'Error when checking books (ignored)'\n    end\n  end\n\n  desc 'build basic book formats (for ci)'\n  task :ci => [:build_html, :build_epub, :build_fb2, :build_mobi, :build_pdf] do\n      # Run check, but don't ignore any errors\n      Rake::Task['book:check'].invoke\n  end\n\n  desc 'generate contributors list'\n  file 'book/contributors.txt' do\n      puts 'Generating contributors list'\n      sh \"echo 'Contributors as of #{header_hash}:\\n' > book/contributors.txt\"\n      sh \"git shortlog -s HEAD | grep -v -E '(Straub|Chacon|dependabot)' | cut -f 2- | sort | column -c 120 >> book/contributors.txt\"\n  end\n\n  desc 'build HTML format'\n  task :build_html => 'book/contributors.txt' do\n      check_contrib()\n\n      puts 'Converting to HTML...'\n      sh \"bundle exec asciidoctor #{params} -a data-uri progit.asc\"\n      puts ' -- HTML output at progit.html'\n\n  end\n\n  desc 'build Epub format'\n  task :build_epub => 'book/contributors.txt' do\n      check_contrib()\n\n      puts 'Converting to EPub...'\n      sh \"bundle exec asciidoctor-epub3 #{params} progit.asc\"\n      puts ' -- Epub output at progit.epub'\n\n  end\n\n  desc 'build FB2 format'\n  task :build_fb2 => 'book/contributors.txt' do\n      check_contrib()\n\n      puts 'Converting to FB2...'\n      sh \"bundle exec asciidoctor-fb2 #{params} progit.asc\"\n      puts ' -- FB2 output at progit.fb2.zip'\n\n  end\n\n  desc 'build Mobi format'\n  task :build_mobi => 'book/contributors.txt' do\n      check_contrib()\n\n      puts \"Converting to Mobi (kf8)...\"\n      sh \"bundle exec asciidoctor-epub3 #{params} -a ebook-format=kf8 progit.asc\"\n      puts \" -- Mobi output at progit.mobi\"\n  end\n\n  desc 'build PDF format'\n  task :build_pdf => 'book/contributors.txt' do\n      check_contrib()\n\n      puts 'Converting to PDF... (this one takes a while)'\n      sh \"bundle exec asciidoctor-pdf #{params} progit.asc 2>/dev/null\"\n      puts ' -- PDF output at progit.pdf'\n  end\n\n  desc 'Check generated books'\n  task :check => [:build_html, :build_epub] do\n      puts 'Checking generated books'\n\n      sh \"htmlproofer progit.html\"\n      sh \"epubcheck progit.epub\"\n  end\n\n  desc 'Clean all generated files'\n  task :clean do\n    begin\n        puts 'Removing generated files'\n\n        FileList['book/contributors.txt', 'progit.html', 'progit-kf8.epub', 'progit.epub', 'progit.fb2.zip', 'progit.mobi', 'progit.pdf'].each do |file|\n            rm file\n\n            # Rescue if file not found\n            rescue Errno::ENOENT => e\n              begin\n                  puts e.message\n                  puts 'Error removing files (ignored)'\n              end\n        end\n    end\n  end\n\nend\n\ntask :default => \"book:build\"\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2392578125,
          "content": "## Reporting a security issue\n\nIf you find any security issue or vulnerability, please email [ben@straub.cc](mailto:ben@straub.cc) with your report.\n\nDo not open a issue on the `progit/progit2` repository or discuss the vulnerability in public.\n"
        },
        {
          "name": "TRANSLATING.md",
          "type": "blob",
          "size": 6.869140625,
          "content": "# Translating Pro Git (2nd Edition)\n\nThe translations are managed in a decentralized way. Each translation team maintains their own project. Each translation is in its own repository, the Pro Git team simply pulls the changes and builds them into the https://git-scm.com website when ready.\n\n## General guidance for translating Pro Git\n\nPro Git is a book about a technical tool, therefore translating it is difficult compared to a non-technical translation.\n\nThe following are guidelines to help you on your way:\n* Before you begin, read the whole Git Pro book in English, so that you're aware of the content, and are familiar with the style used.\n* Ensure you have a good working knowledge of Git, so that explaining the technical terms is doable.\n* Stick to a common style and format for the translation.\n* Be sure to read and understand the basics of [Asciidoc formatting](https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference/). Not following the asciidoc syntax can lead to problems with building/compilation of the pdf, epub and html files needed for the book.\n\n## Translating the book to another language\n\n### Helping with a existing project\n\n* Check for an already existing project in the following table.\n* Go to the project's page on GitHub.\n* Open an issue, introduce yourself and ask where you can help.\n\n| Language     | GitHub page     |\n| :------------- | :------------- |\n| Ø§ÙØ¹Ø±Ø¨ÙØ© | [progit2-ar/progit2](https://github.com/progit2-ar/progit2) |\n| ÐÐµÐ»Ð°ÑÑÑÐºÐ°Ñ  | [progit/progit2-be](https://github.com/progit/progit2-be) |\n| Ð±ÑÐ»Ð³Ð°ÑÑÐºÐ¸ ÐµÐ·Ð¸Ðº | [progit/progit2-bg](https://github.com/progit/progit2-bg) |\n| ÄeÅ¡tina    | [progit-cs/progit2-cs](https://github.com/progit-cs/progit2-cs) |\n| English    | [progit/progit2](https://github.com/progit/progit2) |\n| EspaÃ±ol    | [progit/progit2-es](https://github.com/progit/progit2-es) |\n| ÙØ§Ø±Ø³Û | [progit2-fa/progit2](https://github.com/progit2-fa/progit2) |\n| FranÃ§ais   | [progit/progit2-fr](https://github.com/progit/progit2-fr) |\n| Deutsch    | [progit/progit2-de](https://github.com/progit/progit2-de) |\n| ÎÎ»Î»Î·Î½Î¹ÎºÎ¬   | [progit2-gr/progit2](https://github.com/progit2-gr/progit2) |\n| Indonesian | [progit/progit2-id](https://github.com/progit/progit2-id) |\n| Italiano   | [progit/progit2-it](https://github.com/progit/progit2-it) |\n| æ¥æ¬èª   | [progit/progit2-ja](https://github.com/progit/progit2-ja) |\n| íêµ­ì´   | [progit/progit2-ko](https://github.com/progit/progit2-ko) |\n| ÐÐ°ÐºÐµÐ´Ð¾Ð½ÑÐºÐ¸ | [progit2-mk/progit2](https://github.com/progit2-mk/progit2) |\n| Bahasa Melayu| [progit2-ms/progit2](https://github.com/progit2-ms/progit2) |\n| Nederlands | [progit/progit2-nl](https://github.com/progit/progit2-nl) |\n| Polski | [progit2-pl/progit2-pl](https://github.com/progit2-pl/progit2-pl) |\n| PortuguÃªs (Brasil) | [progit/progit2-pt-br](https://github.com/progit/progit2-pt-br) |\n| Ð ÑÑÑÐºÐ¸Ð¹   | [progit/progit2-ru](https://github.com/progit/progit2-ru) |\n| SlovenÅ¡Äina  | [progit/progit2-sl](https://github.com/progit/progit2-sl) |\n| Ð¡ÑÐ¿ÑÐºÐ¸   | [progit/progit2-sr](https://github.com/progit/progit2-sr) |\n| Svenska  | [progit2-sv/progit2](https://github.com/progit2-sv/progit2) |\n| Tagalog   | [progit2-tl/progit2](https://github.com/progit2-tl/progit2) |\n| TÃ¼rkÃ§e   | [progit/progit2-tr](https://github.com/progit/progit2-tr) |\n| Ð£ÐºÑÐ°ÑÐ½ÑÑÐºÐ°| [progit/progit2-uk](https://github.com/progit/progit2-uk) |\n| ÐÐ·Ð±ÐµÐºÑÐ°  | [progit/progit2-uz](https://github.com/progit/progit2-uz) |\n| ç®ä½ä¸­æ  | [progit/progit2-zh](https://github.com/progit/progit2-zh) |\n| æ­£é«ä¸­æ  | [progit/progit2-zh-tw](https://github.com/progit/progit2-zh-tw) |\n\n### Starting a new translation\n\nIf there is no project for your language, you can start your own translation.\n\nBase your work on the second edition of the book, available [here](https://github.com/progit/progit2). To do so:\n 1. Pick the correct [ISO 639 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for your language.\n 1. Create a [GitHub organization](https://docs.github.com/en/organizations/collaborating-with-groups-in-organizations/creating-a-new-organization-from-scratch), for example: `progit2-[your code]` on GitHub.\n 1. Create a project `progit2`.\n 1. Copy the structure of progit/progit2 (this project) in your project and start translating.\n\n### Updating the status of your translation\n\nOn https://git-scm.com, the translations are divided into three categories. Once you have reached one of these levels, contact the maintainers of https://git-scm.com/ so that they can pull the changes.\n\n| Category | Completion     |\n| :------------- | :------------- |\n| Translation started for | Introduction translated, not much else. |\n| Partial translations available in | up to chapter 6 has been translated. |\n| Full translation available in |the book is (almost) fully translated. |\n\n## Continuous integration with GitHub Actions\n\nGitHub Actions is a [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration) service that integrates with GitHub. GitHub Actions is used to ensure that a pull-request doesn't break the build or compilation. GitHub Actions can also provide compiled versions of the book.\n\nThe configuration for GitHub Actions is contained in the `.github/workflows` directory, and if you bring in the `main` branch of the root repository you'll get them for free.\nHowever, if you created your translation repo by _forking_ the root repo, there's an extra step you must complete (if you did not fork, you can skip this part).\nGitHub assumes that forks will be used to contribute to the repo from which they were forked, so you'll have to visit the \"Actions\" tab on your forked repo, and click the \"I understand my workflows\" button to allow the actions to run.\n\n## Setting up a publication chain for e-books\n\nThis is a technical task, please ping @jnavila to get started with epub publication.\n\n## Beyond Pro Git\n\nTranslating the book is the first step. Once this is finished, you could consider translating the user interface of Git itself.\n\nThis task requires a more technical knowledge of the tool than the book. Hopefully, after having translated the full book content, you can understand the terms used in the application. If you feel technically up to the task, the repo is [here](https://github.com/git-l10n/git-po) and you just have to follow the [guide](https://github.com/git-l10n/git-po/blob/master/po/README.md).\n\nBeware though that\n\n * you'll need to use more specific tools to manage localization po files (such as editing them with [poedit](https://poedit.net/)) and merging them. You might need to compile git in order to check your work.\n * a basic knowledge of how translating applications works is required, which is significantly different from translating books.\n * the core Git project uses more stringent [procedures](https://github.com/git-l10n/git-po/blob/master/Documentation/SubmittingPatches) to accept contributions, be sure to abide by them.\n"
        },
        {
          "name": "TRANSLATION_NOTES.asc",
          "type": "blob",
          "size": 0.658203125,
          "content": "== Translation Notes\n\nAfter forking this repository to translate the work, this file is where the notes for coordinating the translation work would go.\nThings like standardizing on words and expressions so that the work is consistent or notes on how the contributing process is to be handled.\n\nAs a translation maintainer, also feel free to modify or completely rewrite the README file to contain instructions specific to your translation.\n\n=== Translation Status\n\nAs the work is translated, please update the `status.json` file to indicate the rough percentage complete each file is.\nThis will be shown on various pages to let people know how much work is left to be done.\n"
        },
        {
          "name": "atlas.json",
          "type": "blob",
          "size": 2.0458984375,
          "content": "{\n  \"branch\": \"main\",\n  \"files\": [\n    \"book/cover.html\",\n    \"LICENSE.asc\",\n    \"book/preface.asc\",\n    \"book/contributors.asc\",\n    \"book/introduction.asc\",\n    \"book/toc.asc\",\n    \"book/01-introduction/1-introduction.asc\",\n    \"book/02-git-basics/1-git-basics.asc\",\n    \"book/03-git-branching/1-git-branching.asc\",\n    \"book/04-git-server/1-git-server.asc\",\n    \"book/05-distributed-git/1-distributed-git.asc\",\n    \"book/06-github/1-github.asc\",\n    \"book/07-git-tools/1-git-tools.asc\",\n    \"book/08-customizing-git/1-customizing-git.asc\",\n    \"book/09-git-and-other-scms/1-git-and-other-scms.asc\",\n    \"book/10-git-internals/1-git-internals.asc\",\n    \"book/A-git-in-other-environments/1-git-other-environments.asc\",\n    \"book/B-embedding-git/1-embedding-git.asc\",\n    \"book/C-git-commands/1-git-commands.asc\",\n    \"book/index.asc\"\n  ],\n  \"formats\": {\n    \"pdf\": {\n      \"version\": \"web\",\n      \"index\": true,\n      \"toc\": true,\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false\n    },\n    \"epub\": {\n      \"index\": true,\n      \"toc\": true,\n      \"epubcheck\": true,\n      \"embedded_fonts\": [\n        \"fonts/DejaVuSerif.otf\",\n        \"fonts/DejaVuSans-Bold.otf\",\n        \"fonts/hold/UbuntuMono-Bold.otf\",\n        \"fonts/hold/UbuntuMono-BoldItalic.otf\",\n        \"fonts/hold/UbuntuMono-Regular.otf\",\n        \"fonts/hold/UbuntuMono-Italic.otf\"\n      ],\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false\n    },\n    \"mobi\": {\n      \"index\": true,\n      \"toc\": true,\n      \"embedded_fonts\": [\n        \"fonts/DejaVuSerif.otf\",\n        \"fonts/DejaVuSans-Bold.otf\",\n        \"fonts/hold/UbuntuMono-Bold.otf\",\n        \"fonts/hold/UbuntuMono-BoldItalic.otf\",\n        \"fonts/hold/UbuntuMono-Regular.otf\",\n        \"fonts/hold/UbuntuMono-Italic.otf\"\n      ],\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false\n    },\n    \"html\": {\n      \"index\": true,\n      \"toc\": true,\n      \"syntaxhighlighting\": true,\n      \"show_comments\": false,\n      \"consolidate\": false,\n      \"consolidated\": false\n    }\n  },\n  \"theme\": \"oreillymedia/atlas_tech1c_theme\",\n  \"title\": \"Pro Git\"\n}\n"
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "callouts",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch01-getting-started.asc",
          "type": "blob",
          "size": 1.109375,
          "content": "[[ch01-getting-started]]\n== Getting Started\n\nThis chapter will be about getting started with Git.\nWe will begin by explaining some background on version control tools, then move on to how to get Git running on your system and finally how to get it set up to start working with.\nAt the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so.\n\ninclude::book/01-introduction/sections/about-version-control.asc[]\n\ninclude::book/01-introduction/sections/history.asc[]\n\ninclude::book/01-introduction/sections/what-is-git.asc[]\n\ninclude::book/01-introduction/sections/command-line.asc[]\n\ninclude::book/01-introduction/sections/installing.asc[]\n\ninclude::book/01-introduction/sections/first-time-setup.asc[]\n\ninclude::book/01-introduction/sections/help.asc[]\n\n=== Summary\n\nYou should have a basic understanding of what Git is and how it's different from any centralized version control systems you may have been using previously.\nYou should also now have a working version of Git on your system that's set up with your personal identity.\nIt's now time to learn some Git basics.\n"
        },
        {
          "name": "ch02-git-basics-chapter.asc",
          "type": "blob",
          "size": 1.3125,
          "content": "[[ch02-git-basics-chapter]]\n== Git Basics\n\nIf you can read only one chapter to get going with Git, this is it.\nThis chapter covers every basic command you need to do the vast majority of the things you'll eventually spend your time doing with Git.\nBy the end of the chapter, you should be able to configure and initialize a repository, begin and stop tracking files, and stage and commit changes.\nWe'll also show you how to set up Git to ignore certain files and file patterns, how to undo mistakes quickly and easily, how to browse the history of your project and view changes between commits, and how to push and pull from remote repositories.\n\ninclude::book/02-git-basics/sections/getting-a-repository.asc[]\n\ninclude::book/02-git-basics/sections/recording-changes.asc[]\n\ninclude::book/02-git-basics/sections/viewing-history.asc[]\n\ninclude::book/02-git-basics/sections/undoing.asc[]\n\ninclude::book/02-git-basics/sections/remotes.asc[]\n\ninclude::book/02-git-basics/sections/tagging.asc[]\n\ninclude::book/02-git-basics/sections/aliases.asc[]\n\n=== Summary\n\nAt this point, you can do all the basic local Git operations -- creating or cloning a repository, making changes, staging and committing those changes, and viewing the history of all the changes the repository has been through.\nNext, we'll cover Git's killer feature: its branching model.\n"
        },
        {
          "name": "ch03-git-branching.asc",
          "type": "blob",
          "size": 1.740234375,
          "content": "[[ch03-git-branching]]\n== Git Branching\n\n(((branches)))\nNearly every VCS has some form of branching support.\nBranching means you diverge from the main line of development and continue to do work without messing with that main line.\nIn many VCS tools, this is a somewhat expensive process, often requiring you to create a new copy of your source code directory, which can take a long time for large projects.\n\nSome people refer to Git's branching model as its \"`killer feature,`\" and it certainly sets Git apart in the VCS community.\nWhy is it so special?\nThe way Git branches is incredibly lightweight, making branching operations nearly instantaneous, and switching back and forth between branches generally just as fast.\nUnlike many other VCSs, Git encourages workflows that branch and merge often, even multiple times in a day.\nUnderstanding and mastering this feature gives you a powerful and unique tool and can entirely change the way that you develop.\n\ninclude::book/03-git-branching/sections/nutshell.asc[]\n\ninclude::book/03-git-branching/sections/basic-branching-and-merging.asc[]\n\ninclude::book/03-git-branching/sections/branch-management.asc[]\n\ninclude::book/03-git-branching/sections/workflows.asc[]\n\ninclude::book/03-git-branching/sections/remote-branches.asc[]\n\ninclude::book/03-git-branching/sections/rebasing.asc[]\n\n=== Summary\n\nWe've covered basic branching and merging in Git.\nYou should feel comfortable creating and switching to new branches, switching between branches and merging local branches together.\nYou should also be able to share your branches by pushing them to a shared server, working with others on shared branches and rebasing your branches before they are shared.\nNext, we'll cover what you'll need to run your own Git repository-hosting server.\n"
        },
        {
          "name": "ch04-git-on-the-server.asc",
          "type": "blob",
          "size": 3.0869140625,
          "content": "[[ch04-git-on-the-server]]\n== Git on the Server\n\n(((serving repositories)))\nAt this point, you should be able to do most of the day-to-day tasks for which you'll be using Git.\nHowever, in order to do any collaboration in Git, you'll need to have a remote Git repository.\nAlthough you can technically push changes to and pull changes from individuals' repositories, doing so is discouraged because you can fairly easily confuse what they're working on if you're not careful.\nFurthermore, you want your collaborators to be able to access the repository even if your computer is offline -- having a more reliable common repository is often useful.\nTherefore, the preferred method for collaborating with someone is to set up an intermediate repository that you both have access to, and push to and pull from that.\n\nRunning a Git server is fairly straightforward.\nFirst, you choose which protocols you want your server to support.\nThe first section of this chapter will cover the available protocols and the pros and cons of each.\nThe next sections will explain some typical setups using those protocols and how to get your server running with them.\nLast, we'll go over a few hosted options, if you don't mind hosting your code on someone else's server and don't want to go through the hassle of setting up and maintaining your own server.\n\nIf you have no interest in running your own server, you can skip to the last section of the chapter to see some options for setting up a hosted account and then move on to the next chapter, where we discuss the various ins and outs of working in a distributed source control environment.\n\nA remote repository is generally a _bare repository_ -- a Git repository that has no working directory.\nBecause the repository is only used as a collaboration point, there is no reason to have a snapshot checked out on disk; it's just the Git data.\nIn the simplest terms, a bare repository is the contents of your project's `.git` directory and nothing else.\n\ninclude::book/04-git-server/sections/protocols.asc[]\n\ninclude::book/04-git-server/sections/git-on-a-server.asc[]\n\ninclude::book/04-git-server/sections/generating-ssh-key.asc[]\n\ninclude::book/04-git-server/sections/setting-up-server.asc[]\n\ninclude::book/04-git-server/sections/git-daemon.asc[]\n\ninclude::book/04-git-server/sections/smart-http.asc[]\n\ninclude::book/04-git-server/sections/gitweb.asc[]\n\ninclude::book/04-git-server/sections/gitlab.asc[]\n\ninclude::book/04-git-server/sections/hosted.asc[]\n\n=== Summary\n\nYou have several options to get a remote Git repository up and running so that you can collaborate with others or share your work.\n\nRunning your own server gives you a lot of control and allows you to run the server within your own firewall, but such a server generally requires a fair amount of your time to set up and maintain.\nIf you place your data on a hosted server, it's easy to set up and maintain; however, you have to be able to keep your code on someone else's servers, and some organizations don't allow that.\n\nIt should be fairly straightforward to determine which solution or combination of solutions is appropriate for you and your organization.\n"
        },
        {
          "name": "ch05-distributed-git.asc",
          "type": "blob",
          "size": 1.1640625,
          "content": "[[ch05-distributed-git]]\n== Distributed Git\n\n(((distributed git)))\nNow that you have a remote Git repository set up as a focal point for all the developers to share their code, and you're familiar with basic Git commands in a local workflow, you'll look at how to utilize some of the distributed workflows that Git affords you.\n\nIn this chapter, you'll see how to work with Git in a distributed environment as a contributor and an integrator.\nThat is, you'll learn how to contribute code successfully to a project and make it as easy on you and the project maintainer as possible, and also how to maintain a project successfully with a number of developers contributing.\n\ninclude::book/05-distributed-git/sections/distributed-workflows.asc[]\n\ninclude::book/05-distributed-git/sections/contributing.asc[]\n\ninclude::book/05-distributed-git/sections/maintaining.asc[]\n\n=== Summary\n\nYou should feel fairly comfortable contributing to a project in Git as well as maintaining your own project or integrating other users' contributions.\nCongratulations on being an effective Git developer!\nIn the next chapter, you'll learn about how to use the largest and most popular Git hosting service, GitHub.\n"
        },
        {
          "name": "ch06-github.asc",
          "type": "blob",
          "size": 1.9873046875,
          "content": "[[ch06-github]]\n== GitHub\n\n(((GitHub)))\nGitHub is the single largest host for Git repositories, and is the central point of collaboration for millions of developers and projects.\nA large percentage of all Git repositories are hosted on GitHub, and many open-source projects use it for Git hosting, issue tracking, code review, and other things.\nSo while it's not a direct part of the Git open source project, there's a good chance that you'll want or need to interact with GitHub at some point while using Git professionally.\n\nThis chapter is about using GitHub effectively.\nWe'll cover signing up for and managing an account, creating and using Git repositories, common workflows to contribute to projects and to accept contributions to yours, GitHub's programmatic interface and lots of little tips to make your life easier in general.\n\nIf you are not interested in using GitHub to host your own projects or to collaborate with other projects that are hosted on GitHub, you can safely skip to <<ch07-git-tools#ch07-git-tools>>.\n\n[WARNING]\n.Interfaces Change\n====\nIt's important to note that like many active websites, the UI elements in these screenshots are bound to change over time.\nHopefully the general idea of what we're trying to accomplish here will still be there, but if you want more up to date versions of these screens, the online versions of this book may have newer screenshots.\n====\n\ninclude::book/06-github/sections/1-setting-up-account.asc[]\n\ninclude::book/06-github/sections/2-contributing.asc[]\n\ninclude::book/06-github/sections/3-maintaining.asc[]\n\ninclude::book/06-github/sections/4-managing-organization.asc[]\n\ninclude::book/06-github/sections/5-scripting.asc[]\n\n=== Summary\n\nNow you're a GitHub user.\nYou know how to create an account, manage an organization, create and push to repositories, contribute to other people's projects and accept contributions from others.\nIn the next chapter, you'll learn more powerful tools and tips for dealing with complex situations, which will truly make you a Git master.\n"
        },
        {
          "name": "ch07-git-tools.asc",
          "type": "blob",
          "size": 1.7255859375,
          "content": "[[ch07-git-tools]]\n== Git Tools\n\nBy now, you've learned most of the day-to-day commands and workflows that you need to manage or maintain a Git repository for your source code control.\nYou've accomplished the basic tasks of tracking and committing files, and you've harnessed the power of the staging area and lightweight topic branching and merging.\n\nNow you'll explore a number of very powerful things that Git can do that you may not necessarily use on a day-to-day basis but that you may need at some point.\n\ninclude::book/07-git-tools/sections/revision-selection.asc[]\n\ninclude::book/07-git-tools/sections/interactive-staging.asc[]\n\ninclude::book/07-git-tools/sections/stashing-cleaning.asc[]\n\ninclude::book/07-git-tools/sections/signing.asc[]\n\ninclude::book/07-git-tools/sections/searching.asc[]\n\ninclude::book/07-git-tools/sections/rewriting-history.asc[]\n\ninclude::book/07-git-tools/sections/reset.asc[]\n\ninclude::book/07-git-tools/sections/advanced-merging.asc[]\n\ninclude::book/07-git-tools/sections/rerere.asc[]\n\ninclude::book/07-git-tools/sections/debugging.asc[]\n\ninclude::book/07-git-tools/sections/submodules.asc[]\n\ninclude::book/07-git-tools/sections/bundling.asc[]\n\ninclude::book/07-git-tools/sections/replace.asc[]\n\ninclude::book/07-git-tools/sections/credentials.asc[]\n\n=== Summary\n\nYou've seen a number of advanced tools that allow you to manipulate your commits and staging area more precisely.\nWhen you notice issues, you should be able to easily figure out what commit introduced them, when, and by whom.\nIf you want to use subprojects in your project, you've learned how to accommodate those needs.\nAt this point, you should be able to do most of the things in Git that you'll need on the command line day to day and feel comfortable doing so.\n"
        },
        {
          "name": "ch08-customizing-git.asc",
          "type": "blob",
          "size": 1.0576171875,
          "content": "[[ch08-customizing-git]]\n== Customizing Git\n\nSo far, we've covered the basics of how Git works and how to use it, and we've introduced a number of tools that Git provides to help you use it easily and efficiently.\nIn this chapter, we'll see how you can make Git operate in a more customized fashion, by introducing several important configuration settings and the hooks system.\nWith these tools, it's easy to get Git to work exactly the way you, your company, or your group needs it to.\n\ninclude::book/08-customizing-git/sections/config.asc[]\n\ninclude::book/08-customizing-git/sections/attributes.asc[]\n\ninclude::book/08-customizing-git/sections/hooks.asc[]\n\ninclude::book/08-customizing-git/sections/policy.asc[]\n\n=== Summary\n\nWe've covered most of the major ways that you can customize your Git client and server to best fit your workflow and projects.\nYou've learned about all sorts of configuration settings, file-based attributes, and event hooks, and you've built an example policy-enforcing server.\nYou should now be able to make Git fit nearly any workflow you can dream up.\n"
        },
        {
          "name": "ch09-git-and-other-systems.asc",
          "type": "blob",
          "size": 2.2158203125,
          "content": "[[ch09-git-and-other-systems]]\n== Git and Other Systems\n\nThe world isn't perfect.\nUsually, you can't immediately switch every project you come in contact with to Git.\nSometimes you're stuck on a project using another VCS, and wish it was Git.\nWe'll spend the first part of this chapter learning about ways to use Git as a client when the project you're working on is hosted in a different system.\n\nAt some point, you may want to convert your existing project to Git.\nThe second part of this chapter covers how to migrate your project into Git from several specific systems, as well as a method that will work if no pre-built import tool exists.\n\n=== Git as a Client\n\n(((Git as a client)))\nGit provides such a nice experience for developers that many people have figured out how to use it on their workstation, even if the rest of their team is using an entirely different VCS.\nThere are a number of these adapters, called \"`bridges,`\" available.\nHere we'll cover the ones you're most likely to run into in the wild.\n\ninclude::book/09-git-and-other-scms/sections/client-svn.asc[]\n\ninclude::book/09-git-and-other-scms/sections/client-hg.asc[]\n\ninclude::book/09-git-and-other-scms/sections/client-p4.asc[]\n\n[[_migrating]]\n=== Migrating to Git\n\n(((Migrating to Git)))\nIf you have an existing codebase in another VCS but you've decided to start using Git, you must migrate your project one way or another.\nThis section goes over some importers for common systems, and then demonstrates how to develop your own custom importer.\nYou'll learn how to import data from several of the bigger professionally used SCM systems, because they make up the majority of users who are switching, and because high-quality tools for them are easy to come by.\n\ninclude::book/09-git-and-other-scms/sections/import-svn.asc[]\n\ninclude::book/09-git-and-other-scms/sections/import-hg.asc[]\n\ninclude::book/09-git-and-other-scms/sections/import-p4.asc[]\n\ninclude::book/09-git-and-other-scms/sections/import-custom.asc[]\n\n=== Summary\n\nYou should feel comfortable using Git as a client for other version-control systems, or importing nearly any existing repository into Git without losing data.\nIn the next chapter, we'll cover the raw internals of Git so you can craft every single byte, if need be.\n"
        },
        {
          "name": "ch10-git-internals.asc",
          "type": "blob",
          "size": 2.7041015625,
          "content": "[[ch10-git-internals]]\n== Git Internals\n\nYou may have skipped to this chapter from a much earlier chapter, or you may have gotten here after sequentially reading the entire book up to this point -- in either case, this is where we'll go over the inner workings and implementation of Git.\nWe found that understanding this information was fundamentally important to appreciating how useful and powerful Git is, but others have argued to us that it can be confusing and unnecessarily complex for beginners.\nThus, we've made this discussion the last chapter in the book so you could read it early or later in your learning process.\nWe leave it up to you to decide.\n\nNow that you're here, let's get started.\nFirst, if it isn't yet clear, Git is fundamentally a content-addressable filesystem with a VCS user interface written on top of it.\nYou'll learn more about what this means in a bit.\n\nIn the early days of Git (mostly pre 1.5), the user interface was much more complex because it emphasized this filesystem rather than a polished VCS.\nIn the last few years, the UI has been refined until it's as clean and easy to use as any system out there; however, the stereotype lingers about the early Git UI that was complex and difficult to learn.\n\nThe content-addressable filesystem layer is amazingly cool, so we'll cover that first in this chapter; then, you'll learn about the transport mechanisms and the repository maintenance tasks that you may eventually have to deal with.\n\ninclude::book/10-git-internals/sections/plumbing-porcelain.asc[]\n\ninclude::book/10-git-internals/sections/objects.asc[]\n\ninclude::book/10-git-internals/sections/refs.asc[]\n\ninclude::book/10-git-internals/sections/packfiles.asc[]\n\ninclude::book/10-git-internals/sections/refspec.asc[]\n\ninclude::book/10-git-internals/sections/transfer-protocols.asc[]\n\ninclude::book/10-git-internals/sections/maintenance.asc[]\n\ninclude::book/10-git-internals/sections/environment.asc[]\n\n=== Summary\n\nAt this point, you should have a pretty good understanding of what Git does in the background and, to some degree, how it's implemented.\nThis chapter has covered a number of plumbing commands -- commands that are lower level and simpler than the porcelain commands you've learned about in the rest of the book.\nUnderstanding how Git works at a lower level should make it easier to understand why it's doing what it's doing and also to write your own tools and helper scripts to make your specific workflow work for you.\n\nGit as a content-addressable filesystem is a very powerful tool that you can easily use as more than just a VCS.\nWe hope you can use your newfound knowledge of Git internals to implement your own cool application of this technology and feel more comfortable using Git in more advanced ways.\n"
        },
        {
          "name": "diagram-source",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.asc",
          "type": "blob",
          "size": 0.025390625,
          "content": "[#index]\n[index]\n== Index\n"
        },
        {
          "name": "progit.asc",
          "type": "blob",
          "size": 0.87890625,
          "content": "= Pro Git\nScott Chacon; Ben Straub\n:doctype: book\n:docinfo:\n:toc:\n:toclevels: 2\n:pagenums:\n:front-cover-image: image:book/cover.png[width=1050,height=1600]\n:icons: font\n\ninclude::book/license.asc[]\n\ninclude::book/preface_schacon.asc[]\n\ninclude::book/preface_ben.asc[]\n\ninclude::book/dedication.asc[]\n\ninclude::book/contributors.asc[]\n\ninclude::book/introduction.asc[]\n\ninclude::ch01-getting-started.asc[]\n\ninclude::ch02-git-basics-chapter.asc[]\n\ninclude::ch03-git-branching.asc[]\n\ninclude::ch04-git-on-the-server.asc[]\n\ninclude::ch05-distributed-git.asc[]\n\ninclude::ch06-github.asc[]\n\ninclude::ch07-git-tools.asc[]\n\ninclude::ch08-customizing-git.asc[]\n\ninclude::ch09-git-and-other-systems.asc[]\n\ninclude::ch10-git-internals.asc[]\n\ninclude::A-git-in-other-environments.asc[]\n\ninclude::B-embedding-git-in-your-applications.asc[]\n\ninclude::C-git-commands.asc[]\n\nifdef::backend-pdf[include::index.asc[]]\n"
        },
        {
          "name": "status.json",
          "type": "blob",
          "size": 3.935546875,
          "content": "{\n  \"code\": \"en\",\n  \"language\": \"English\",\n  \"maintainers\": [\"schacon\"],\n  \"files\": {\n    \"01-introduction\": {\n      \"1-introduction.asc\": 0,\n      \"sections/about-version-control.asc\": 0,\n      \"sections/basics.asc\": 0,\n      \"sections/command-line.asc\": 0,\n      \"sections/first-time-setup.asc\": 0,\n      \"sections/help.asc\": 0,\n      \"sections/history.asc\": 0,\n      \"sections/installing.asc\": 0\n    },\n    \"02-git-basics\": {\n      \"1-git-basics.asc\": 0,\n      \"sections/aliases.asc\": 0,\n      \"sections/getting-a-repository.asc\": 0,\n      \"sections/recording-changes.asc\": 0,\n      \"sections/remotes.asc\": 0,\n      \"sections/tagging.asc\": 0,\n      \"sections/undoing.asc\": 0,\n      \"sections/viewing-history.asc\": 0\n    },\n    \"03-git-branching\": {\n      \"1-git-branching.asc\": 0,\n      \"sections/basic-branching-and-merging.asc\": 0,\n      \"sections/branch-management.asc\": 0,\n      \"sections/nutshell.asc\": 0,\n      \"sections/rebasing.asc\": 0,\n      \"sections/remote-branches.asc\": 0,\n      \"sections/workflows.asc\": 0\n    },\n    \"04-git-server\": {\n      \"1-git-server.asc\": 0,\n      \"sections/generating-ssh-key.asc\": 0,\n      \"sections/git-daemon.asc\": 0,\n      \"sections/git-on-a-server.asc\": 0,\n      \"sections/gitlab.asc\": 0,\n      \"sections/gitweb.asc\": 0,\n      \"sections/hosted.asc\": 0,\n      \"sections/protocols.asc\": 0,\n      \"sections/setting-up-server.asc\": 0,\n      \"sections/smart-http.asc\": 0\n    },\n    \"05-distributed-git\": {\n      \"1-distributed-git.asc\": 0,\n      \"sections/contributing.asc\": 0,\n      \"sections/distributed-workflows.asc\": 0,\n      \"sections/maintaining.asc\": 0\n    },\n    \"06-github\": {\n      \"1-github.asc\": 0,\n      \"sections/1-setting-up-account.asc\": 0,\n      \"sections/2-contributing.asc\": 0,\n      \"sections/3-maintaining.asc\": 0,\n      \"sections/4-managing-organization.asc\": 0,\n      \"sections/5-scripting.asc\": 0\n    },\n    \"07-git-tools\": {\n      \"1-git-tools.asc\": 0,\n      \"sections/advanced-merging.asc\": 0,\n      \"sections/bundling.asc\": 0,\n      \"sections/credentials.asc\": 0,\n      \"sections/debugging.asc\": 0,\n      \"sections/interactive-staging.asc\": 0,\n      \"sections/replace.asc\": 0,\n      \"sections/rerere.asc\": 0,\n      \"sections/reset.asc\": 0,\n      \"sections/revision-selection.asc\": 0,\n      \"sections/rewriting-history.asc\": 0,\n      \"sections/searching.asc\": 0,\n      \"sections/signing.asc\": 0,\n      \"sections/stashing-cleaning.asc\": 0,\n      \"sections/submodules.asc\": 0,\n      \"sections/subtree-merges.asc\": 0\n    },\n    \"08-customizing-git\": {\n      \"1-customizing-git.asc\": 0,\n      \"sections/attributes.asc\": 0,\n      \"sections/config.asc\": 0,\n      \"sections/hooks.asc\": 0,\n      \"sections/policy.asc\": 0\n    },\n    \"09-git-and-other-scms\": {\n      \"1-git-and-other-scms.asc\": 0,\n      \"sections/client-hg.asc\": 0,\n      \"sections/client-p4.asc\": 0,\n      \"sections/client-svn.asc\": 0,\n      \"sections/import-custom.asc\": 0,\n      \"sections/import-hg.asc\": 0,\n      \"sections/import-p4.asc\": 0,\n      \"sections/import-svn.asc\": 0\n    },\n    \"10-git-internals\": {\n      \"1-git-internals.asc\": 0,\n      \"sections/environment.asc\": 0,\n      \"sections/maintenance.asc\": 0,\n      \"sections/objects.asc\": 0,\n      \"sections/packfiles.asc\": 0,\n      \"sections/plumbing-porcelain.asc\": 0,\n      \"sections/refs.asc\": 0,\n      \"sections/refspec.asc\": 0,\n      \"sections/transfer-protocols.asc\": 0\n    },\n    \"A-git-in-other-environments\": {\n      \"1-git-other-environments.asc\": 0,\n      \"sections/bash.asc\": 0,\n      \"sections/guis.asc\": 0,\n      \"sections/jetbrainsides.asc\": 0,\n      \"sections/powershell.asc\": 0,\n      \"sections/sublimetext.asc\": 0,\n      \"sections/visualstudio.asc\": 0,\n      \"sections/visualstudiocode.asc\": 0,\n      \"sections/zsh.asc\": 0\n    },\n    \"B-embedding-git\": {\n      \"1-embedding-git.asc\": 0,\n      \"sections/command-line.asc\": 0,\n      \"sections/dulwich.asc\": 0,\n      \"sections/go-git.asc\": 0,\n      \"sections/jgit.asc\": 0,\n      \"sections/libgit2.asc\": 0\n    },\n    \"C-git-commands\": {\n      \"1-git-commands.asc\": 0\n    }\n  }\n}\n"
        },
        {
          "name": "theme",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}