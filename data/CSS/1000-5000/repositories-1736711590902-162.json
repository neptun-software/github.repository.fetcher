{
  "metadata": {
    "timestamp": 1736711590902,
    "page": 162,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "adamzap/landslide",
      "stars": 2087,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1806640625,
          "content": "*.pyc\nbuild\n.idea\nlandslide/.idea\npresentation.html\n*.pdf\nexamples/.DS_Store\n*.swp\nlandslide.egg-info\ndist/\n*.komodoproject\n.komodotools\nlandslide.sublime-project\ndocs/_build\nvenv\n.tox\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.546875,
          "content": "# Changelog\n\n## v2.0.0\n\n- Drop Python 2 support\n- Upgrade requirements\n- Stop using Travis for CI\n- Start using GitHub Actions for CI\n- Fix path assert in test on Windows\n\n## v1.1.9\n\n- Pin `MarkupSafe` dependency to `v1.1.1`\n\n## v1.1.8\n\n- Explicitly support Python v3.8\n- Test Python v3.7 and v3.8 with CI\n- Fix sample slideshow link in `setup.py`\n\n## v1.1.7\n\n- Change \"PrinceXML\" references to \"Prince\"\n- Upgrade `Jinja2` from v2.10 to v2.10.1\n- Support `markdown` v3.0+ (#211) (HadrienG2)\n- Fix Prince integration for PDF output (#212) (HadrienG2)\n- Use HTTPS URLs in generated HTML code (#214) (HadrienG2)\n\n## v1.1.6\n\n- Fix packaging again\n\n## v1.1.5\n\n- Fix packaging\n\n## v1.1.4\n\n- Setup Travis CI\n- Update Python versions in `setup.py`\n- Pin dependency versions to fix `markdown` issue\n\n## v1.1.3\n\n- Identify each slide by a numbered class (#171) (dkg)\n- Fix theme image embedding regex to grab all images (#170)\n- Fix blockquote font size for rst (#161)\n- Fix display of RST image target links (#87)\n- Fix relative path generation (#147)\n- Add command line option for print version (#135)\n- Add use of '---' as a slide separator to textile files (#163)\n- README improvements (#88 and #101)\n- Improve image path regex and replacement (#177)\n\n## v1.1.2\n\n- Add support for Python 3\n- Allow support for copy_theme argument in CFG files (#139) (syscomet)\n- Improve MathJax rendering for Markdown files\n- Support math output (#144) (davidedelvento)\n- Allow presenter notes in slides with no heading in RST files (#141) (regebro)\n- And more...\n\n## v1.1.1\n\n### Fixes\n\n- Don't accidentally require watchdog (#134)\n\n## v1.1.0\n\n### Major Enhancements\n\n- Add CHANGELOG\n- Add \"ribbon\" theme from \"shower\" presentation tool (#129) (durden)\n- Add `-w` flag for watching/auto-regenerating slideshow (#71, #120) (jondkoon)\n\n### Minor Enhancements\n\n- Supress ReST rendering errors\n- CSS pre enhancements (#91) (roktas)\n- Add an example using presenter notes (#106) (netantho)\n- Run macros on headers also, to embed images (#74) (godfat)\n- Allow PHP code snippets to not require <?php (#127) (akrabat)\n- Allow for line numbers and emphasis with reStructuredText (#97) (copelco)\n- Add an option to strip presenter notes from output (#107) (aaugustin)\n\n### Fixes\n\n- Firefox offset bug on next slide (#73)\n- Fix base64 encoding issue (#109) (ackdesha)\n- Fix to embed images defined in CSS (#126) (akrabat)\n- Minor documentation fixes (#119, #131) (durden, spin6lock)\n- Use configured encoding when reading all embedded files (#125) (iguananaut)\n- Allow pygments lexer names that include special characters (#123) (shreyankg)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "MANIFEST.in",
          "type": "blob",
          "size": 0.1796875,
          "content": "include CHANGELOG.md\ninclude LICENSE\ninclude README.md\ninclude tests.py\ninclude tox.ini\nrecursive-include examples *\nrecursive-include test-data *\nrecursive-include landslide/themes *\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.25390625,
          "content": "# Landslide\n\nLandslide generates a slideshow using from markdown, ReST, or textile. It\nbuilds off of Google's [html5slides][html5slides] template.\n\nThe following markdown produces [this slideshow][sample].\n\n    # Landslide\n\n    ---\n\n    # Overview\n\n    Generate HTML5 slideshows from markdown, ReST, or textile.\n\n    ![python](http://i.imgur.com/bc2xk.png)\n\n    Landslide is primarily written in Python, but it's themes use:\n\n    - HTML5\n    - Javascript\n    - CSS\n\n    ---\n\n    # Code Sample\n\n    Landslide supports code snippets\n\n        !python\n        def log(self, message, level='notice'):\n            if self.logger and not callable(self.logger):\n                raise ValueError(u\"Invalid logger set, must be a callable\")\n\n            if self.verbose and self.logger:\n                self.logger(message, level)\n\n[html5slides]: http://code.google.com/p/html5slides/\n[sample]: https://landslide-python.netlify.app/\n\n## Requirements\n\n`python` and the following modules:\n\n- `jinja2`\n- `pygments` for code blocks syntax coloration\n\n#### Markup Conversion\n\n- `markdown` for [Markdown](http://en.wikipedia.org/wiki/Markdown)\n- `docutils` for [reStructured Text](http://en.wikipedia.org/wiki/ReStructuredText)\n- `textile` for [Textile](http://en.wikipedia.org/wiki/Textile_(markup_language))\n\n#### Optional\n\n- `watchdog` for watching/auto-regeneration with the `-w` flag\n- [Prince](http://www.princexml.com/) for PDF export\n\n## Installation\n\nInstall the latest stable version of Landslide with a python package manager\nlike `pip`:\n\n    $ pip install landslide\n\nIf you want to stay on the edge:\n\n    $ git clone https://github.com/adamzap/landslide.git\n    $ cd landslide\n    $ python setup.py build\n    $ sudo python setup.py install\n\n## Formatting\n\n#### Markdown\n\n- Your Markdown source files must be suffixed by `.md`, `.markdn`, `.mdwn`,\n  `.mdown` or `.markdown`\n- To create a title slide, render a single `h1` element (eg. `# My Title`)\n- Separate your slides with a horizontal rule (`---` in markdown) except at the\n  end of md files\n- Your other slides should have a heading that renders to an `h1` element\n- To highlight blocks of code, put `!lang` where `lang` is the pygment\n  supported language identifier as the first indented line\n\n### ReStructuredText\n\n- Your ReST source files must be suffixed by `.rst` or `.rest` (**`.txt` is not\n  supported**)\n- Use headings for slide titles\n- Separate your slides using an horizontal rule (`----` in RST) except at the\n  end of RST files\n\n### Textile\n\n- Separate your slides using `---`, just like in markdown\n\n## Rendering\n\n- Run `landslide slides.md` or `landslide slides.rst`\n- Enjoy your newly generated `presentation.html`\n\nOr get it as a PDF document if Prince is installed and available on your\nsystem:\n\n    $ landslide README.md -d readme.pdf\n    $ open readme.pdf\n\n## Viewing\n\n- Press `h` to toggle display of help\n- Press `left arrow` and `right arrow` to navigate\n- Press `t` to toggle a table of contents for your presentation. Slide titles\n  are links\n- Press `ESC` to display the presentation overview (Exposé)\n- Press `n` to toggle slide number visibility\n- Press `b` to toggle screen blanking\n- Press `c` to toggle current slide context (previous and next slides)\n- Press `e` to make slides filling the whole available space within the\n  document body\n- Press `S` to toggle display of link to the source file for each slide\n- Press '2' to toggle notes in your slides (specify with the .notes macro)\n- Press '3' to toggle pseudo-3D display (experimental)\n- Browser zooming is supported\n\n## Commandline Options\n\nSeveral options are available using the command line:\n\n    -h, --help            show this help message and exit\n    -c, --copy-theme      Copy theme directory into current presentation source\n                          directory\n    -b, --debug           Will display any exception trace to stdin\n    -d FILE, --destination=FILE\n                          The path to the to the destination file: .html or .pdf\n                          extensions allowed (default: presentation.html)\n    -e ENCODING, --encoding=ENCODING\n                          The encoding of your files (defaults to utf8)\n    -i, --embed           Embed stylesheet and javascript contents,\n                          base64-encoded images in presentation to make a\n                          standalone document\n    -l LINENOS, --linenos=LINENOS\n                          How to output linenos in source code. Three options\n                          availables: no (no line numbers); inline (inside <pre>\n                          tag); table (lines numbers in another cell, copy-paste\n                          friendly)\n    -o, --direct-output    Prints the generated HTML code to stdout; won't work\n                          with PDF export\n    -q, --quiet           Won't write anything to stdout (silent mode)\n    -r, --relative        Make your presentation asset links relative to current\n                          pwd; This may be useful if you intend to publish your\n                          html presentation online.\n    -t THEME, --theme=THEME\n                          A theme name, or path to a landlside theme directory\n    -v, --verbose         Write informational messages to stdin (enabled by\n                          default)\n    -w, --watch           Watch the source directory for changes and\n                          auto-regenerate the presentation\n    -x EXTENSIONS, --extensions=EXTENSIONS\n                          Comma-separated list of extensions for Markdown\n    -m, --math-output     Enable mathematical output using mathjax\n\n## Presentation Configuration\n\nLandslide allows to configure your presentation using a `cfg` configuration\nfile, therefore easing the aggregation of source directories and the reuse of\nthem across presentations. Landslide configuration files use the `cfg` syntax.\nIf you know `ini` files, you get the picture. Below is a sample configuration\nfile:\n\n    [landslide]\n    theme  = /path/to/my/beautiful/theme\n    source = 0_my_first_slides.md\n             a_directory\n             another_directory\n             now_a_slide.markdown\n             another_one.rst\n    destination = myWonderfulPresentation.html\n    css =    my_first_stylesheet.css\n             my_other_stylesheet.css\n    js =     jquery.js\n             my_fancy_javascript.js\n    relative = True\n    linenos = inline\n\nDon't forget to declare the `[landslide]` section.  All configuration files\nmust end in the .cfg extension.\n\nTo generate the presentation as configured, just run:\n\n    $ cd /path/to/my/presentation/sources\n    $ landslide config.cfg\n\n## Macros\n\nYou can use macros to enhance your presentation:\n\n#### Notes\n\nAdd notes to your slides using the `.notes:` keyword, eg.:\n\n    # My Slide Title\n\n    .notes: These are my notes, hidden by default\n\n    My visible content goes here\n\nYou can toggle display of notes by pressing the `2` key.\n\nSome other macros are also available by default: `.fx: foo bar` will add the\n`foo` and `bar` classes to the corresponding slide `<div>` element, easing\nstyling of your presentation using CSS.\n\n#### QR Codes\n\nAdd a QR Code to your presentation by using the `.qr` keyword:\n\n    .qr: 450|http://github.com/adamzap/landslide\n\n## Presenter Notes\n\nYou can also add presenter notes to each slide by following the slide content\nwith a heading entitled \"Presenter Notes\". Press the 'p' key to open the\npresenter view.\n\n## Registering Macros\n\nMacros are used to transform the HTML contents of your slide.\n\nYou can register your own macros by creating `landslide.macro.Macro` derived\nclasses, implementing a `process(content, source=None)` method and returning\na tuple containing the modified contents and some css classes you may be\nwanting to add to your slide `<div>` element. For example:\n\n    !python\n    import landslide\n\n    class MyMacro(landslide.Macro):\n      def process(self, content, source=None):\n        return content + '<p>plop</p>', ['plopped_slide']\n\n    g = landslide.generator.Generator(source='toto.md')\n    g.register_macro(MyMacro)\n    print g.render()\n\nThis will render any slide as below:\n\n    !html\n    <div class=\"slide plopped_slide\">\n      <header><h2>foo</h2></header>\n      <section>\n        <p>my slide contents</p>\n        <p>plop</p>\n      </section>\n    </div>\n\n## Advanced Usage\n\n#### Setting Custom Destination File\n\n    $ landslide slides.md -d ~/MyPresentations/presentation.html\n\n#### Working with Directories\n\n    $ landslide slides/\n\n#### Working with Direct Output\n\n    $ landslide slides.md -o | tidy\n\n#### Using an Alternate Landslide Theme\n\n    $ landslide slides.md -t mytheme\n    $ landslide slides.md -t /path/to/theme/dir\n\n#### Embedding Base-64-Encoded Images\n\n    $ landslide slides.md -i\n\n#### Exporting to PDF\n\n    $ landslide slides.md -d presentation.pdf\n\n#### Enabling mathematical notation\n\n    Note that this require writing the slides in ReST format as well as\n    using Docutils 0.8 or newer.\n\n    $ landslide slides.rst -m\n\n#### Enabling Markdown Extensions\n\nSee documentation on available Markdown extensions\n[here](https://python-markdown.github.io/extensions/):\n\n    $ landslide slides.md -x abbr\n\n## Theming\n\nA Landslide theme is a directory following this simple structure:\n\n    mytheme/\n    |-- base.html\n    |-- css\n    |   |-- print.css\n    |   `-- screen.css\n    `-- js\n        `-- slides.js\n\nIf a theme does not provide HTML and JS files, those from the default theme\nwill be used. CSS is not optional.\n\nLast, you can also copy the whole theme directory to your presentation one by\npassing the `--copy-theme` option to the `landslide` command:\n\n    $ landslide slides.md -t /path/to/some/theme --copy-theme\n\n## User stylesheets and Javascripts\n\nIf you don't want to bother making your own theme, you can include your own\nuser css and js files to the generated presentation.\n\nThis feature is only available if you use a landslide configuration file, by\nsetting the `css` and/or `js` flags:\n\n    [landslide]\n    theme  = /path/to/my/beautiful/theme\n    source = slides.mdown\n    css =    custom.css\n    js =     jquery.js\n             powerpoint.js\n\nThese will link the ``custom.css`` stylesheet and both the ``jquery.js`` and\n``powerpoint.js`` files within the ``<head>`` section of the presentation html\nfile.\n\n**NOTE:** Paths to the css and js files must be relative to the directory\nyou're running the ``landslide`` command from.\n\n## Publishing your Presentation Online\n\nIf you intend to publish your HTML presentation online, you'll have to use the\n`--relative` option, as well as the `--copy-theme` one to have all asset links\nrelative to the root of your presentation;\n\n    $ landslide slides.md --relative --copy-theme\n\nThat way, you'll just have to host the whole presentation directory to\na webserver. Of course, no Python nor PHP nor anything else than a HTTP\nwebserver (like Nginx) is required to host a landslide presentation.\n\n## Theme Variables\n\nThe `base.html` must be a [Jinja2 template file][jinja-docs] where you can\nharness the following template variables:\n\n- `css`: the stylesheet contents, available via two keys, `print` and `screen`,\n  both having:\n  - a `path_url` key storing the url to the asset file path\n  - a `contents` key storing the asset contents\n- `js`: the javascript contents, having:\n  - a `path_url` key storing the url to the asset file path\n  - a `contents` key storing the asset contents\n- `slides`: the slides list, each one having these properties:\n  - `header`: the slide title\n  - `content`: the slide contents\n  - `number`: the slide number\n- `embed`: is the current document a standalone one?\n- `num_slides`: the number of slides in current presentation\n- `toc`: the Table of Contents, listing sections of the document. Each section\n  has these properties available:\n  - `title`: the section title\n  - `number`: the slide number of the section\n  - `sub`: subsections, if any\n\n[jinja-docs]: http://jinja.pocoo.org/2/documentation/templates\n\n## Styles Scope\n\n- To change HTML5 presentation styles, tweak the `css/screen.css` stylesheet\n  bundled with the theme you are using\n- For PDF, modify the `css/print.css`\n\n## Authors\n\n#### Original Author and Development Lead\n\n- Adam Zapletal (adamzap@gmail.com)\n\n#### Co-Author\n\n- Nicolas Perriault (nperriault@gmail.com)\n\n#### Contributors\n\nSee https://github.com/adamzap/landslide/contributors\n\n#### Base Template Authors and Contributors (html5-slides)\n\n- Marcin Wichary (mwichary@google.com)\n- Ernest Delgado (ernestd@google.com)\n- Alex Russell (slightlyoff@chromium.org)\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "landslide",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.078125,
          "content": "MarkupSafe==2.1.2\nJinja2==3.1.2\nMarkdown==3.4.1\nPygments==2.14.0\ndocutils==0.19\n"
        },
        {
          "name": "setup.py",
          "type": "blob",
          "size": 1.8486328125,
          "content": "from setuptools import setup\n\nimport landslide\n\nsetup(\n    name=landslide.__title__,\n    version=landslide.__version__,\n    description='HTML5 slideshow generator for Markdown, ReST, and Textile',\n    packages=['landslide'],\n    include_package_data=True,\n    zip_safe=False,\n    author=landslide.__author__,\n    author_email=landslide.__author_email__,\n    url='http://github.com/adamzap/landslide',\n    license=landslide.__license__,\n    platforms=['any'],\n    keywords=[\n        'markdown',\n        'slideshow',\n        'presentation',\n        'rst',\n        'restructuredtext',\n        'textile'\n    ],\n    install_requires=[\n        'MarkupSafe==2.1.2',\n        'Jinja2==3.1.2',\n        'Markdown==3.4.1',\n        'Pygments==2.14.0',\n        'docutils==0.19'\n    ],\n    classifiers=[\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n        'Programming Language :: Python :: 3.8',\n        'Development Status :: 4 - Beta',\n        'Operating System :: OS Independent',\n        'License :: OSI Approved :: Apache Software License',\n        'Topic :: Multimedia :: Graphics :: Presentation',\n        'Topic :: Text Processing :: Markup'\n    ],\n    long_description='''\\\nLandslide takes your Markdown, ReST, or Textile file(s) and generates fancy\nHTML5 slideshow like `this <http://landslide.adamzap.com/>`_.\n\nRead the `README <http://github.com/adamzap/landslide/blob/master/README.md>`_\nfor formatting instructions and more information.\n''',\n    entry_points={\n        'console_scripts': [\n            'landslide = landslide.main:main',\n        ]\n    },\n)\n"
        },
        {
          "name": "test-data",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests.py",
          "type": "blob",
          "size": 9.5458984375,
          "content": "# -*- coding: utf-8 -*-\n\nfrom landslide import macro\nimport os\nimport re\nimport unittest\nimport codecs\nimport base64\n\nfrom landslide.generator import Generator\nfrom landslide.parser import Parser\n\n\nDATA_DIR = os.path.join(os.path.dirname(__file__), 'test-data')\n\nif (not os.path.exists(DATA_DIR)):\n    raise IOError('Test data not found, cannot run tests')\n\n\nclass BaseTestCase(unittest.TestCase):\n    def logtest(self, message, type='notice'):\n        if type == 'warning':\n            raise WarningMessage(message)\n        elif type == 'error':\n            raise ErrorMessage(message)\n\n\nclass GeneratorTest(BaseTestCase):\n    def test___init__(self):\n        self.assertRaises(IOError, Generator, None)\n        self.assertRaises(IOError, Generator, 'foo.md')\n\n    def test_add_user_assets(self):\n        base_dir = os.path.join(DATA_DIR, 'test.md')\n        g = Generator(base_dir, logger=self.logtest)\n        g.add_user_css(os.path.join(DATA_DIR, 'test.css'))\n        g.add_user_js(os.path.join(DATA_DIR, 'test.js'))\n        self.assertEqual(g.user_css[0]['contents'], '* {color: red;}')\n        self.assertEqual(g.user_js[0]['contents'], \"alert('foo');\")\n\n    def test_get_toc(self):\n        base_dir = os.path.join(DATA_DIR, 'test.md')\n        g = Generator(base_dir, logger=self.logtest)\n        g.add_toc_entry('Section 1', 1, 1)\n        g.add_toc_entry('Section 1.1', 2, 2)\n        g.add_toc_entry('Section 1.2', 2, 3)\n        g.add_toc_entry('Section 2', 1, 4)\n        g.add_toc_entry('Section 2.1', 2, 5)\n        g.add_toc_entry('Section 3', 1, 6)\n        toc = g.toc\n        self.assertEqual(len(toc), 3)\n        self.assertEqual(toc[0]['title'], 'Section 1')\n        self.assertEqual(len(toc[0]['sub']), 2)\n        self.assertEqual(toc[0]['sub'][1]['title'], 'Section 1.2')\n        self.assertEqual(toc[1]['title'], 'Section 2')\n        self.assertEqual(len(toc[1]['sub']), 1)\n        self.assertEqual(toc[2]['title'], 'Section 3')\n        self.assertEqual(len(toc[2]['sub']), 0)\n\n    def test_get_slide_vars(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        svars = g.get_slide_vars(\"<h1>heading</h1>\\n<p>foo</p>\\n<p>bar</p>\\n\")\n        self.assertEqual(svars['title'], 'heading')\n        self.assertEqual(svars['level'], 1)\n        self.assertEqual(svars['header'], '<h1>heading</h1>')\n        self.assertEqual(svars['content'], '<p>foo</p>\\n<p>bar</p>')\n        self.assertEqual(svars['source'], {})\n        self.assertEqual(svars['classes'], [])\n\n    def test_unicode(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        g.execute()\n        s = g.render()\n        self.assertTrue(s.find('<pre>') != -1)\n        self.assertEqual(len(re.findall('<pre><span', s)), 3)\n\n    def test_inputencoding(self):\n        path = os.path.join(DATA_DIR, 'encoding.rst')\n        g = Generator(path, encoding='koi8_r')\n        content = g.render()\n\n        # check that the string is utf_8\n        self.assertTrue(re.findall(u'русский', content, flags=re.UNICODE))\n        g.execute()\n        with codecs.open(g.destination_file, encoding='utf_8') as file_object:\n            file_contents = file_object.read()\n        # check that the file was properly encoded in utf_8\n        self.assertTrue(re.findall(u'русский', file_contents,\n            flags=re.UNICODE))\n\n    def test_get_template_vars(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        svars = g.get_template_vars([{'title': \"slide1\", 'level': 1},\n                                     {'title': \"slide2\", 'level': 1},\n                                     {'title': None, 'level': 1},\n        ])\n        self.assertEqual(svars['head_title'], 'slide1')\n\n    def test_process_macros(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        # Notes\n        r = g.process_macros('<p>foo</p>\\n<p>.notes: bar</p>\\n<p>baz</p>')\n        self.assertEqual(r[0].find('<p class=\"notes\">bar</p>'), 11)\n        self.assertEqual(r[1], [u'has_notes'])\n        # FXs\n        content = '<p>foo</p>\\n<p>.fx: blah blob</p>\\n<p>baz</p>'\n        r = g.process_macros(content)\n        self.assertEqual(r[0], '<p>foo</p>\\n<p>baz</p>')\n        self.assertEqual(r[1][0], 'blah')\n        self.assertEqual(r[1][1], 'blob')\n\n    def test_register_macro(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n\n        class SampleMacro(macro.Macro):\n            pass\n\n        g.register_macro(SampleMacro)\n        self.assertTrue(SampleMacro in g.macros)\n\n        def plop(foo):\n            pass\n\n        self.assertRaises(TypeError, g.register_macro, plop)\n\n    def test_presenter_notes(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        svars = g.get_slide_vars(\"<h1>heading</h1>\\n<p>foo</p>\\n\"\n                                 \"<h1>Presenter Notes</h1>\\n<p>bar</p>\\n\")\n        self.assertEqual(svars['presenter_notes'], \"<p>bar</p>\")\n\n        # Check that presenter notes work even if the slide has no heading.\n        # For example, if it is only an image:\n\n        g = Generator(os.path.join(DATA_DIR, 'test.md'))\n        svars = g.get_slide_vars(\"<p>foo</p>\\n\"\n                                 \"<h1>Presenter Notes</h1>\\n<p>bar</p>\\n\")\n\n    def test_skip_presenter_notes(self):\n        g = Generator(os.path.join(DATA_DIR, 'test.md'),\n                presenter_notes=False)\n        svars = g.get_slide_vars(\"<h1>heading</h1>\\n<p>foo</p>\\n\"\n                                 \"<h1>Presenter Notes</h1>\\n<p>bar</p>\\n\")\n        self.assertEqual(svars['presenter_notes'], None)\n\n\nclass CodeHighlightingMacroTest(BaseTestCase):\n    def setUp(self):\n        self.sample_html = '''<p>Let me give you this snippet:</p>\n<pre class=\"literal-block\">\n!python\ndef foo():\n    &quot;just a test&quot;\n    print bar\n</pre>\n<p>Then this one:</p>\n<pre class=\"literal-block\">\n!php\n<?php\necho $bar;\n?>\n</pre>\n<p>Then this other one:</p>\n<pre class=\"literal-block\">\n!xml\n<foo>\n    <bar glop=\"yataa\">baz</bar>\n</foo>\n</pre>\n<p>End here.</p>'''\n\n    def test_parsing_code_blocks(self):\n        m = macro.CodeHighlightingMacro(self.logtest)\n        blocks = m.code_blocks_re.findall(self.sample_html)\n        self.assertEqual(len(blocks), 3)\n        self.assertEqual(blocks[0][2], 'python')\n        self.assertTrue(blocks[0][3].startswith('def foo():'))\n        self.assertEqual(blocks[1][2], 'php')\n        self.assertTrue(blocks[1][3].startswith('<?php'))\n        self.assertEqual(blocks[2][2], 'xml')\n        self.assertTrue(blocks[2][3].startswith('<foo>'))\n\n    def test_descape(self):\n        m = macro.CodeHighlightingMacro(self.logtest)\n        self.assertEqual(m.descape('foo'), 'foo')\n        self.assertEqual(m.descape('&gt;'), '>')\n        self.assertEqual(m.descape('&lt;'), '<')\n        self.assertEqual(m.descape('&amp;lt;'), '&lt;')\n        self.assertEqual(m.descape('&lt;span&gt;'), '<span>')\n        self.assertEqual(m.descape('&lt;spam&amp;eggs&gt;'), '<spam&eggs>')\n\n    def test_process(self):\n        m = macro.CodeHighlightingMacro(self.logtest)\n        hl = m.process(\"<pre><code>!php\\n$foo;</code></pre>\")\n        self.assertTrue(hl[0].startswith('<div class=\"highlight\"><pre'))\n        self.assertEqual(hl[1][0], u'has_code')\n        input = \"<p>Nothing to declare</p>\"\n        self.assertEqual(m.process(input)[0], input)\n        self.assertEqual(m.process(input)[1], [])\n\n    def test_process_rst_code_blocks(self):\n        m = macro.CodeHighlightingMacro(self.logtest)\n        hl = m.process(self.sample_html)\n        self.assertTrue(hl[0].startswith('<p>Let me give you this'))\n        self.assertTrue(hl[0].find('<p>Then this one') > 0)\n        self.assertTrue(hl[0].find('<p>Then this other one') > 0)\n        self.assertTrue(hl[0].find('<div class=\"highlight\"><pre') > 0)\n        self.assertEqual(hl[1][0], u'has_code')\n\n\nclass EmbedImagesMacroTest(BaseTestCase):\n    def test_process(self):\n        base_dir = os.path.join(DATA_DIR, 'test.md')\n        m = macro.EmbedImagesMacro(self.logtest, True)\n        self.assertRaises(WarningMessage, m.process,\n                          '<img src=\"img.png\"/>', '.')\n        content, classes = m.process('<img src=\"img.png\"/>', base_dir)\n        match = re.search(r'<img src=\"data:image/png;base64,(.+?)\"/>',\n                          content)\n        self.assertTrue(base64.b64decode(match.group(1)))\n\n\nclass FixImagePathsMacroTest(BaseTestCase):\n    def test_process(self):\n        base_dir = os.path.join(DATA_DIR, 'test.md')\n        m = macro.FixImagePathsMacro(self.logtest, False)\n        content, classes = m.process('<img src=\"img.png\"/>', base_dir)\n        pattern = r'<img src=\"file://.*?%simg.png\" */>' % re.escape(os.sep)\n        self.assertTrue(re.match(pattern, content))\n\n\nclass FxMacroTest(BaseTestCase):\n    def test_process(self):\n        m = macro.FxMacro(self.logtest)\n        content = '<p>foo</p>\\n<p>.fx: blah blob</p>\\n<p>baz</p>'\n        r = m.process(content)\n        self.assertEqual(r[0], '<p>foo</p>\\n<p>baz</p>')\n        self.assertEqual(r[1][0], 'blah')\n        self.assertEqual(r[1][1], 'blob')\n\n\nclass NotesMacroTest(BaseTestCase):\n    def test_process(self):\n        m = macro.NotesMacro(self.logtest)\n        r = m.process('<p>foo</p>\\n<p>.notes: bar</p>\\n<p>baz</p>')\n        self.assertEqual(r[0].find('<p class=\"notes\">bar</p>'), 11)\n        self.assertEqual(r[1], [u'has_notes'])\n\n\nclass ParserTest(BaseTestCase):\n    def test___init__(self):\n        self.assertEqual(Parser('.md').format, 'markdown')\n        self.assertEqual(Parser('.markdown').format, 'markdown')\n        self.assertEqual(Parser('.rst').format, 'restructuredtext')\n        self.assertRaises(NotImplementedError, Parser, '.txt')\n\n\nclass WarningMessage(Exception):\n    pass\n\n\nclass ErrorMessage(Exception):\n    pass\n\nif __name__ == '__main__':\n    unittest.main()\n"
        }
      ]
    }
  ]
}