{
  "metadata": {
    "timestamp": 1736711530056,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "helios-framework/helios",
      "stars": 4097,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.572265625,
          "content": "Gemfile.lock\n*.gem\n*.rbc\n/.config\n/coverage/\n/InstalledFiles\n/pkg/\n/spec/reports/\n/test/tmp/\n/test/version_tmp/\n/tmp/\n\n## Specific to RubyMotion:\n.dat*\n.repl_history\nbuild/\n\n## Documentation cache and generated files:\n/.yardoc/\n/_yardoc/\n/doc/\n/rdoc/\n\n## Environment normalisation:\n/.bundle/\n/lib/bundler/man/\n\n# for a library or gem, you might want to ignore these files since the code is\n# intended to run in multiple environments; otherwise, check them in:\n# Gemfile.lock\n# .ruby-version\n# .ruby-gemset\n\n# unless supporting rvm < 1.11.0 or doing something fancy, ignore this:\n.rvmrc\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.0380859375,
          "content": "source \"https://rubygems.org\"\n\ngemspec\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "Copyright (c) 2013 Heroku (http://heroku.com/)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.1962890625,
          "content": "Helios is an open-source framework that provides essential backend services for iOS apps, from data synchronization and user accounts to push notifications, in-app purchases, and passbook integration. It allows developers to get a client-server app up-and-running in just a few minutes, and seamlessly incorporate functionality as necessary.\n\nHelios is designed for \"mobile first\" development. Build out great features on the device, and implement the server-side components as necessary. Pour all of your energy into crafting a great user experience, rather than getting mired down with the backend.\n\nOne great example of this philosophy in Helios is Core Data Synchronization. This allows you to use your existing Core Data model definition to automatically generate a REST webservice, which can be used to shuttle data between the server and client. No iCloud, _no problem_.\n\nHelios also comes with a Web UI. Browse and search through all of your database records, push notification registrations, in-app purchases, and passbook passes. You can even send targeted push notifications right from the browser.\n\n---\n\n## Requirements\n\n- Ruby 2.0+ with [Bundler](http://bundler.io) installed\n- PostgreSQL 9.2+ _([Postgres.app](http://postgresapp.com) is the easiest way to get a Postgres server running on your Mac)_\n\n## Getting Started on OS X\n\n1. Verify Ruby Installation:\n\n```\n$ ruby -v\n```\n\n2. Install Helios, Bundler, and  at the command prompt:\n\n```\n$ gem install helios\n```\n\n3. Create a new Helios application:\n\n```\n$ helios new myapp\n```\n\n3. Create a Postgres database at the command prompt:\n\n```\n$ createdb -h localhost myapp\n```\n\n> Database credentials are read from the `.env` file generated by Helios, as the variable `DATABASE_URL`. By default, this will point to a database with the name of the generated app.\n\n4. Change directory to `myapp`\n\n```\n$ cd myapp\n```\n\n5. Start the web server:\n\n```\n$ helios server\n```\n\n6. Go to [http://localhost:5000/admin](http://localhost:5000/admin) and youâ€™ll see your app's Web UI\n\nRead on for instructions on the following:\n\n- Linking a Core Data model\n- Integrating Helios into your mobile client\n\n## Usage\n\nBuilt on the Rack webserver interface, Helios can be easily added into any existing Rails or Sinatra application as middleware. Or, if you're starting with a Helios application, you can build a new Rails or Sinatra application on top of it.\n\nThis means that you can develop your application using the tools and frameworks you love, and maintain flexibility with your architecture as your needs evolve.\n\n### Sinatra / Rack\n\n#### Gemfile\n\n```ruby\ngem 'helios'\n```\n\n#### config.ru\n\n```ruby\nrequire 'bundler'\nBundler.require\n\nrun Helios::Application.new do\n  service :data, model: 'path/to/DataModel.xcdatamodel'\n  service :push_notification, apn_certificate: 'path/to/apple_push_notification.pem', apn_environment: 'development'\n  service :in_app_purchase\n  service :passbook\nend\n```\n\n### Rails\n\nTo create a Rails app that uses Postgres as its database, pass the `-d postgresql` argument to the `rails new` command:\n\n```\n$ rails new APP_PATH -d postgresql\n```\n\nIf you're adding Helios to an existing Rails project, be sure to specify a PostgreSQL database in `config/database.yml` and check that the `pg` gem is included in your `Gemfile`:\n\n#### Gemfile\n\n```ruby\ngem 'helios'\ngem 'pg'\n```\n\nHelios can be run as Rails middleware by adding this to the configuration block in `config/application.rb`\n\n#### config/application.rb\n\n```ruby\nconfig.middleware.use Helios::Application do\n  service :data, model: 'path/to/DataModel.xcdatamodel'\n  service :push_notification, apn_certificate: 'path/to/apple_push_notification.pem', apn_environment: 'development'\n  service :in_app_purchase\n  service :passbook\nend\n```\n\n## Available Services\n\nEach service in Helios can be enabled and configured separately:\n\n`data`: Generates a REST webservice from a schema definition. Currently supports Core Data (`.xcdatamodel`) files.\n\n**Parameters**\n\n- `model`: Path to the data model file\n\n**Associated Classes**\n\nEach entity in the specified data model will have a `Sequel::Model` subclass created for it under the `Rack::CoreData::Models` namespace.\n\n|                           |                                                    |\n|---------------------------|----------------------------------------------------|\n| `GET /:resources`         | Get list of all of the specified resources         |\n| `POST /:resources`        | Create a new instance of the specified resource    |\n| `GET /:resources/:id`     | Get the specified resource instance                |\n| `PUT /:resources/:id`     | Update the specified resource instance             |\n| `DELETE /:resources/:id`  | Delete the specified resource instance             |\n\n---\n\n`push_notification`: Adds iOS push notification registration / unregistration endpoints.\n\n**Associated Classes**\n\n- `Rack::PushNotification::Device`\n\n|                           |                                                           |\n|---------------------------|-----------------------------------------------------------|\n| `PUT /push_notification/devices/:token`     | Register or update existing device for push notifications |\n| `DELETE /push_notification/devices/:token`  | Unregister a device from receiving push notifications     |\n| `POST /push_notification/message`           | Send out a push notification to some devices              |\n\n---\n\n`in_app_purchase`: Adds an endpoint for iOS in-app purchase receipt verification endpoints, as well one for returning product identifiers.\n\n**Associated Classes**\n\n- `Rack::InAppPurchase::Receipt`\n- `Rack::InAppPurchase::Product`\n\n|                              |                                                           |\n|------------------------------|-----------------------------------------------------------|\n| `POST /in_app_purchase/receipts/verify`      | Decode the associated Base64-encoded `receipt-data`, recording the receipt data and verifying the information with Apple |\n| `GET /in_app_purchase/products/identifiers`  | Get an array of valid product identifiers                 |\n\n---\n\n`passbook`: Adds endpoints for the [web service protocol](https://developer.apple.com/library/prerelease/ios/#documentation/PassKit/Reference/PassKit_WebService/WebService.html) for communicating with Passbook\n\n**Associated Classes**\n\n- `Rack::Passbook::Pass`\n- `Rack::Passbook::Registration`\n\n|                           |                                                    |\n|---------------------------|----------------------------------------------------|\n| `GET /passbook/v1/passes/:passTypeIdentifier/:serialNumber` | Get the Latest Version of a Pass |\n| `GET /passbook/v1/devices/:deviceLibraryIdentifier/registrations/:passTypeIdentifier[?passesUpdatedSince=tag]` | Get the Serial Numbers for Passes Associated with a Device |\n| `POST /passbook/v1/devices/:deviceLibraryIdentifier/registrations/:passTypeIdentifier/:serialNumber` | Register a Device to Receive Push Notifications for a Pass |\n| `DELETE /passbook/v1/devices/:deviceLibraryIdentifier/registrations/:passTypeIdentifier/:serialNumber` | Unregister a Device |\n\n---\n\n`newsstand`: Adds endpoints for Newsstand. Offers complete management of issues, covers, and assets, with plist-based web services and Atom feeds.\n\n**Associated Classes**\n\n- `Rack::Newsstand::Issue`\n\n|                               |                         |\n|-------------------------------|-------------------------|\n| `GET /newsstand/issues`       | Get list of all issues  |\n| `GET /newsstand/issues/:name` | Get a specific issue    |\n| `POST /newsstand/issues`      | Add a new issue         |\n\n## Command-Line Interface\n\nHelios comes with a CLI to help create and manage your application. After you `$ gem install helios`, you'll have the `helios` binary available.\n\n```\n$ helios --help\nhelios\n\nA command-line interface for building mobile infrastructures\n\nCommands:\n  console              Open IRB session with Helios environment\n  help                 Display global or [command] help documentation.\n  link                 Links a Core Data model\n  new                  Creates a new Helios project\n  server               Start running Helios locally\n```\n\n### Creating an Application\n\nThe first step to using Helios is to create a new application. This can be done with the `$ helios new` command, which should be familiar if you've ever used Rails.\n\n```\n$ helios new --help\n\nUsage: helios new path/to/app\n\n  The `helios new` command creates a new Helios application with a default\ndirectory structure and configuration at the path you specify.\n\nOptions:\n  --skip-gemfile       Don't create a Gemfile\n  -B, --skip-bundle    Don't run bundle install\n  -G, --skip-git       Don't create a git repository\n  --edge               Setup the application with Gemfile pointing to Helios repository\n  -f, --force          Overwrite files that already exist\n  -p, --pretend        Run but do not make any changes\n  -s, --skip           Skip files that already exist\n```\n\n### Linking a Core Data Model\n\nIn order to keep your data model and REST webservices in sync, you can link it to your helios application:\n\n```\n$ helios link path/to/DataModel.xcdatamodel\n```\n\nThis creates a hard link between the data model file in your Xcode and Helios projectsâ€”any changes made to either file will affect both. The next time you start the server, Helios will automatically migrate the database to create tables and insert columns to accomodate any new entities or attributes.\n\n> If you are using OS X, do not attempt to delete your Helios application directory using `rm -r` if you have linked a Core Data model. Doing so will result in the removal of the Xcode data model itself. Instead use the finder to move the Helios application directory to trash.\n\n### Starting the Application Locally\n\nTo run Helios in development mode on `localhost`, run the `server` command:\n\n```\n$ helios server\n```\n\n### Testing Push Notifications\n\nOnce you have registered a device and set up your certificate, try this:\n\n```\n$ curl -X POST -d 'payload={\"aps\": {\"alert\":\"Blastoff!\"}}' http://localhost:5000/push_notification/message\n```\n\n### Setting Up Storage for Newsstand\n\nIn order to set up storage for Newsstand, you will need an account with one of the following cloud storage providers:\n\n- [Amazon AWS S3](http://aws.amazon.com/s3/)\n- [Google Cloud Storage](https://cloud.google.com/products/cloud-storage/)\n- [Rackspace Cloud Files](http://www.rackspace.com/cloud/files/)\n\nIn your application directory, edit the `config.ru` with your credentials for the cloud storage provider of your choice. Here is an example configuration using AWS.\n\n```ruby\nrequire 'bundler'\nBundler.require\n\napp = Helios::Application.new {\n    service :data, model: Dir['*.xcdatamodel*'].first if Dir['*.xcdatamodel*'].any?\n    service :push_notification\n    service :in_app_purchase\n    service :passbook\n    service :newsstand, {\n        storage: {\n            provider: 'AWS',\n            aws_access_key_id: 'YOUR_ACCESS_KEY_ID',\n            aws_secret_access_key: 'YOUR_SECRET_ACCESS_KEY'\n        }\n    }\n}\n\nrun app\n```\n\nFor other configuration options, see [fog.io](http://fog.io/storage/).\n\n### Running the Helios Console\n\nYou can start an IRB session with the runtime environment of the Helios application with the `console` command:\n\n```\n$ helios console\n```\n\nThis command activates the services as configured by your Helios application, including any generated Core Data models. The `rack` module is automatically included on launch, allowing you to access everything more directly:\n\n```ruby\n> Data::Artist.all #=> [...]\n> InAppPurchase::Receipt.all #=> [...]\n> Newsstand::Issue.all #=> [...]\n> Passbook::Passes.all #=> [...]\n> PushNotification::Device.all #=> [...]\n```\n\n## Deploying to Heroku\n\n[Heroku](http://www.heroku.com) is the easiest way to get your app up and running. For full instructions on how to get started, check out [\"Getting Started with Ruby on Heroku\"](https://devcenter.heroku.com/articles/ruby).\n\nOnce you've installed the [Heroku Toolbelt](https://toolbelt.heroku.com), and have a Heroku account, enter the following commands from the project directory:\n\n```\n$ heroku create\n$ git add .\n$ git push heroku master\n```\n\n## Integrating with an iOS Application\n\n### Core Data Synchronization\n\nWith [AFIncrementalStore](https://github.com/AFNetworking/AFIncrementalStore), you can integrate your Helios app directly into the Core Data stack. Whether itâ€™s a fetch or save changes request, or fulfilling an attribute or relation fault, AFIncrementalStore handles all of the networking needed to read and write to and from the server.\n\nSee [\"Building an iOS App with AFIncrementalStore and the Core Data Buildpack\"](https://devcenter.heroku.com/articles/ios-core-data-buildpack-app) on the Heroku Dev Center for a comprehensive guide on how to use AFIncrementalStore with the Core Data buildpack. An article for Helios is forthcoming, but aside from deployment, the instructions are essentially unchanged.\n\n### Push Notification Registration\n\nWith [Orbiter](https://github.com/mattt/Orbiter) you can integrate Push Notifications into your app easily.\n\n```objective-c\n- (void)application:(UIApplication *)application\ndidRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken\n{\n    NSURL *serverURL = [NSURL URLWithString:@\"http://raging-notification-3556.herokuapp.com/\"];\n    Orbiter *orbiter = [[Orbiter alloc] initWithBaseURL:serverURL credential:nil];\n    [orbiter registerDeviceToken:deviceToken withAlias:nil success:^(id responseObject) {\n        NSLog(@\"Registration Success: %@\", responseObject);\n    } failure:^(NSError *error) {\n        NSLog(@\"Registration Error: %@\", error);\n    }];\n}\n```\n\n### Converting Your Push Notification Certificate\n\n> These instructions come from the [APN on Rails](https://github.com/PRX/apn_on_rails) project.\n\nOnce you have the certificate from Apple for your application, export your key\nand the apple certificate as p12 files. Here is a quick walkthrough on how to do this:\n\n1. Click the disclosure arrow next to your certificate in Keychain Access and select the certificate and the key.\n2. Right click and choose `Export 2 itemsâ€¦`.\n3. Choose the p12 format from the drop down and name it `cert.p12`.\n\nNow covert the p12 file to a pem file:\n\n```\n$ openssl pkcs12 -in cert.p12 -out apple_push_notification.pem -nodes -clcerts\n```\n\n---\n\n## License\n\nHelios is released under the [MIT License](http://opensource.org/licenses/MIT).\n"
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.228515625,
          "content": "require \"bundler\"\nBundler.setup\n\ngemspec = eval(File.read(\"helios.gemspec\"))\n\ntask :build => \"#{gemspec.full_name}.gem\"\n\nfile \"#{gemspec.full_name}.gem\" => gemspec.files + [\"helios.gemspec\"] do\n  system \"gem build helios.gemspec\"\nend\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "helios.gemspec",
          "type": "blob",
          "size": 2.21875,
          "content": "# -*- encoding: utf-8 -*-\n$:.push File.expand_path(\"../lib\", __FILE__)\nrequire \"helios/version\"\n\nGem::Specification.new do |s|\n  s.name        = \"helios\"\n  s.authors     = [\"Mattt Thompson\"]\n  s.email       = \"m@mattt.me\"\n  s.license     = \"MIT\"\n  s.homepage    = \"http://helios.io\"\n  s.version     = Helios::VERSION\n  s.platform    = Gem::Platform::RUBY\n  s.summary     = \"An extensible open-source mobile backend framework\"\n  s.description = \"Helios is an open-source framework that provides essential backend services for iOS apps, from data synchronization and user accounts to push notifications, in-app purchases, and passbook integration. It allows developers to get a client-server app up-and-running in just a few minutes, and seamlessly incorporate functionality as necessary.\"\n\n  s.add_dependency \"commander\", \"~> 4.1\"\n  s.add_dependency \"foreman\", \"~> 0.63\"\n  s.add_dependency \"rack-contrib\", \"~> 1.1\"\n  s.add_dependency \"rack-push-notification\", \"~> 0.4\"\n  s.add_dependency \"rack-in-app-purchase\", \"~> 0.1\"\n  s.add_dependency \"rack-passbook\", \"~> 0.1\"\n  s.add_dependency \"rack-newsstand\", \"~> 0.1\"\n  s.add_dependency \"rack-scaffold\", \"~> 0.2\"\n  s.add_dependency \"core_data\", \"~> 0.1\"\n  s.add_dependency \"pg\", \"~> 0.17\"\n  s.add_dependency \"json\", \"~> 1.7\"\n  s.add_dependency \"coffee-script\", \"~> 2.2\"\n  s.add_dependency \"sinatra\", \"~> 1.3\"\n  s.add_dependency \"sinatra-contrib\", \"~> 1.3\"\n  s.add_dependency \"sinatra-assetpack\", \"0.2.3\"\n  s.add_dependency \"sinatra-backbone\", \"~> 0.1.1\"\n  s.add_dependency \"sinatra-param\", \"~> 0.1\"\n  s.add_dependency \"sinatra-support\", \"~> 1.2\"\n  s.add_dependency \"haml\", \">= 3.1\"\n  s.add_dependency \"compass\", \"~> 0.12\"\n  s.add_dependency \"zurb-foundation\", \"4.1.2\"\n  s.add_dependency \"rails-database-url\", \"~> 1.0\"\n  s.add_dependency \"fog\", \"~> 1.10\"\n  s.add_dependency \"houston\", \"~> 2.2\"\n\n  s.add_development_dependency \"rake\"\n  s.add_development_dependency \"rspec\"\n\n  s.files         = Dir[\"./**/*\"].reject{|file| file =~ /\\.\\/(bin|example|log|pkg|script|spec|test|vendor)/} + Dir.glob(\"./lib/helios/templates/*\", File::FNM_DOTMATCH)\n  s.test_files    = `git ls-files -- {test,spec,features}/*`.split(\"\\n\")\n  s.executables   = `git ls-files -- bin/*`.split(\"\\n\").map{ |f| File.basename(f) }\n  s.require_paths = [\"lib\"]\nend\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}