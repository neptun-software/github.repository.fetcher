{
  "metadata": {
    "timestamp": 1736711552587,
    "page": 71,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HermanMartinus/bearblog",
      "stars": 2973,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.2939453125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndev.db\ndev.db.backup\ndb.json\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nmyvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.jsbeautifyrc\n\n# Sandbox\nblogs/sandbox.py\n\n# Testing tools\nfixture.json\nsync_data.sh\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CONTRIBUTIONS.md",
          "type": "blob",
          "size": 0.9794921875,
          "content": "# Bear Blog Contributions\n\nBefore opening a PR, please read the following guidelines.\n\n## Current Contribution Status\nBear Blog is currently **not actively accepting contributions**. This decision is due to the numerous low-effort PRs submitted to gaining \"Bear Contributor\" status on GitHub. These waste developer time and energy. \n\nThe primary purpose of making the Bear Blog source code available is:\n\n- To allow others to use the code for personal projects or to satisfy their curiosity.\n- To ensure code transparency, keeping the organization honest about its actions.\n\n## Future Contributions\nIf our stance on contributions changes in the future, we will update this file with relevant guidelines and requirements. We appreciate your understanding and support.\n\n## Support the Project\nIf you would like to support Bear Blog, consider upgrading your blog. Upgrading provides additional features and helps fund ongoing development and maintenance of the platform. Your support is always appreciated!"
        },
        {
          "name": "Caddyfile",
          "type": "blob",
          "size": 0.546875,
          "content": "{\n    on_demand_tls {\n        ask https://bearblog.dev/ping/\n        interval 1m\n        burst 5\n    }\n}\n\nhttps:// {\n    tls {\n        on_demand\n    }\n\n    reverse_proxy https://bearblog.dev {\n        header_up Host {upstream_hostport}\n        header_up X-Forwarded-For {remote_host}\n        header_up X-Real-IP {remote_host}\n        header_up X-Forwarded-Proto {scheme}\n    }\n\n    @blocked {\n        header_regexp User-Agent (?i:ActivityRelay*)\n    }\n\n    handle @blocked {\n        abort\n    }\n\n    log {\n        output file /var/log/caddy/access.log\n    }\n}\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0986328125,
          "content": "Copyright 2023 - [Bear Blog](https://bearblog.dev) - [Herman Martinus](https://herman.bearblog.dev)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.3515625,
          "content": ".PHONY: dev shell logs 404\n\ndev:\n\techo http://lh.co\n\tpython manage.py runserver 0:80\n\t\nshell:\n\tsudo heroku run python manage.py shell --app bear-blog\n\nlogs:\n\tsudo heroku logs --tail --app bear-blog --force-colors | grep \"app\\[web\" | grep -Ev \"(GET|POST|HEAD|OPTIONS)\"\n\n404:\n\tsudo heroku logs --tail --app bear-blog --force-colors | grep \"heroku\\[\" | grep \"404\""
        },
        {
          "name": "Procfile",
          "type": "blob",
          "size": 0.0810546875,
          "content": "release: python manage.py migrate\nweb: gunicorn conf.wsgi --log-file - --timeout 20"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.7861328125,
          "content": "# ʕ•ᴥ•ʔ Bear\n## https://bearblog.dev\n\n## Free, no-nonsense, super-fast blogging\n### No javascript, no stylesheets, no trackers. Just your words.\n\nPlease log all bugs as [GitHub issues](https://github.com/HermanMartinus/bearblog/issues) and all feature requests on the [suggestions board](https://bear.nolt.io).\n\n## Contributions\n\nBear is not currently accepting contributions. See CONTRIBUTIONS.md for more info. \n\n## Markdown\nAll the post content is written in [markdown](https://herman.bearblog.dev/markdown-cheatsheet/).\n\n## Can Bear Blog be self-hosted? \nBear Blog has been built as a platform and not as an individual blog generator.\nIt is more like Substack than Hugo. Due to this it isn't possible to individually self-host a Bear Blog.\n\nThere are a few Hugo themes that use Bear's stylesheet which you can find on the Hugo theme repository if you really want to self host something that looks like Bear :)\n\n## Wiki\nThe full documentation for Bear can be found at https://docs.bearblog.dev\n\n## Some Bear faces\n\n```\nʕ •ᴥ•ʔ  ʕ •ᴥ•ʔゝ☆  ＼ʕ •ᴥ•ʔ／  ＼ʕ •ᴥ•ʔ＼  ／ʕ •ᴥ•ʔ／  ʕง•ᴥ•ʔง  ᕕʕ •ᴥ•ʔ୨  ʕ　·ᴥʔ  ʕ　·ᴥ·ʔ\nʕ·ᴥ·　ʔ  ʕᴥ·　ʔ  ʕ •`ᴥ•´ʔ  Σʕﾟᴥﾟﾉʔﾉ  “φʕ•ᴥ•oʔ  ᕦʕ •ᴥ•ʔᕤ  ┏ʕ •ᴥ•ʔ┛  ʕ´•ᴥ•`ʔ  ʅʕ•ᴥ•ʔʃ  ʕノ)ᴥ(ヾʔ\nʕ/　·ᴥ·ʔ/  ʕ☞ᴥ ☜ʔ  ʕᴥ• ʔ☝  ʕ·ᴥ·˵ ʔ ʕ　˵·ᴥ·ʔ  ʕ º ᴥ ºʔ  ʕ ᵒ ᴥ ᵒʔ  ʕ ꆤ ᴥ ꆤʔ  ʕ ㅇ ᴥ ㅇʔ  ʕ≧ᴥ≦ʔ\nʕ ꈍᴥꈍʔ  ʕ ﹷ ᴥ ﹷʔ  ʕ´• ᴥ•̥`ʔ  ʕ ´•̥̥̥ ᴥ•̥̥̥`ʔ  ╲ʕ·ᴥ·　╲ʔ  ʕ•ᴥ•ʔﾉ♡  ʕ￫ᴥ￩　ʔ  ʕ – ᴥ – ʔ  ʕ˵ ̿ᴥ ̿˵ʔ\n┬┴┬┴┤•ᴥ•ʔ├┬┴┬┴  ʕノ•ᴥ•ʔノ ︵ ┻━┻\n```\n"
        },
        {
          "name": "architecture.md",
          "type": "blob",
          "size": 4.3876953125,
          "content": "# Bear Architecture\nBear is a Django-based blogging platform that allows users to create and manage their own blogs. The project is hosted on Heroku and utilizes various technologies and services to provide a robust and scalable architecture.\n\n## Django\nBear is built using the Django web framework, which follows the Model-View-Controller (MVC) architectural pattern. Django provides a powerful ORM (Object-Relational Mapping) for database management, an admin interface for easy data manipulation, and a templating engine for rendering dynamic HTML pages.\n\n## Database\nThe project uses Heroku Postgres as the primary database. Heroku Postgres is a managed PostgreSQL database service that provides scalability, reliability, and automatic backups. The database connection is managed through the dj-database-url library, which allows seamless integration with Heroku's database configuration.\n\n## Dependencies\nBear relies on various Python packages and libraries to extend its functionality. These dependencies are listed in the requirements.txt file and include packages for authentication (django-allauth), debugging (django-debug-toolbar), CSV export (django-queryset-csv), Markdown parsing (mistune), and more. The dependencies are installed and managed using virtualenv.\n\n## Templates\nDjango's templating engine is used to render dynamic HTML pages. The project's templates are located in the templates directory and follow Django's template language syntax. The templates are organized into subdirectories based on their respective apps or functionalities.\nStatic Files\nStatic files such as CSS, JavaScript, and images are served using WhiteNoise, a Django middleware that allows serving static files efficiently. The static files are collected and stored in the staticfiles directory during the deployment process.\n\n## Deployment\n## Heroku\nBear is deployed on Heroku, a cloud platform that provides easy deployment and scaling of web applications. Heroku's platform takes care of server management, load balancing, and automatic scaling based on the application's resource requirements.\n\n## Digital Ocean Spaces\nImages are uploaded to a Spaces S3 bucket on Digital Ocean. Their CDN is used to retrieve uploaded images. \n\n## Procfile\nThe Procfile file specifies the commands that need to be executed when the application starts on Heroku. It includes a release command to run database migrations and a web command to start the Gunicorn web server.\n\n## Runtime\nThe runtime.txt file specifies the Python version used by the project. Bear uses Python 3.9.13.\n\n## Networking and Security\n## DNS and SSL\nBear uses Cloudflare as its DNS provider and for issuing SSL certificates for the .bearblog.dev domains. Cloudflare provides fast and secure DNS resolution and automatic SSL certificate management.\n\n## Reverse Proxy (custom domains)\nA reverse proxy is set up on a Digital Ocean droplet using Caddy. The reverse proxy handles custom domain routing and SSL termination. It forwards incoming requests to the Heroku application based on the host header. The Caddy configuration file (Caddyfile) specifies the proxy rules and SSL settings.\n\n## Additional Services\n## Email\nBear uses Mailgun for email delivery. The email backend is configured to use Mailgun's SMTP service, and the necessary credentials are stored securely in environment variables.\n\n## Logging and Monitoring\nThe project utilizes Heroku's built-in logging and monitoring capabilities to track application performance, errors, and resource usage. Additionally, custom logging is implemented using Django's logging framework, with error logs being sent to a Slack channel for real-time notifications.\n\n---\n# Staging server\n\nBear Staging runs on a droplet with Caddy as the web server.\nThe Django application is served by Gunicorn.\nThe database is backed up using a cron job and with Litestream.\nDjango, Caddy, and Litestream run as systemd services.\n\n### Caddy:\n\nconfig: /etc/caddy/Caddyfile\nlogs: /var/log/caddy/access.log\n\n### Django\n\nscript & config: /root/deploy/run.sh\n\n### Services:\n\nCaddy: /etc/systemd/system/caddy.service\nBear: /etc/systemd/system/bearblog.service\nLitestream: /etc/systemd/system/litestream.service\n\nRestart service: systemctl restart bearblog\n\n### DB backups run in a crontab:\n\nBackup is running in a cron job: crontab -e\n \nscript: /root/deploy/backup.sh\nlocal backups: /root/backups/\nremote backups: https://sqlite.sfo3.digitaloceanspaces.com/backups/\n\n### Litestream:\n\nconfig: /etc/litestream.yml \n"
        },
        {
          "name": "blogs",
          "type": "tree",
          "content": null
        },
        {
          "name": "conf",
          "type": "tree",
          "content": null
        },
        {
          "name": "geoip",
          "type": "tree",
          "content": null
        },
        {
          "name": "manage.py",
          "type": "blob",
          "size": 0.609375,
          "content": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'conf.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.4599609375,
          "content": "boto3==1.21.44\ndj-database-url==0.5.0\nDjango==3.2.23\ndjango-allauth==0.57.0\ndjango-debug-toolbar==3.2.4\ndjango-ip==1.0.2\ndjango-pygmentify==0.3.7\ndjango-queryset-csv==1.1.0\nfeedgen==0.9.0\ngeoip2==4.6.0\ngunicorn==20.0.4\nhttpagentparser==1.9.2\njudoscale==1.7.5\nlatex2mathml==3.77.0\nmistune==3.0.1\nPillow==10.4.0\npsycopg2==2.9.9\npygal==3.0.5\npython-akismet==0.4.3\npython-dotenv==1.0.0\nrequests==2.27.1\nscout-apm==3.2.1\nsentry-sdk==2.19.0\ntldextract==2.2.2\nwhitenoise==5.0.1\n"
        },
        {
          "name": "runtime.txt",
          "type": "blob",
          "size": 0.013671875,
          "content": "python-3.10.15"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "staticfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}