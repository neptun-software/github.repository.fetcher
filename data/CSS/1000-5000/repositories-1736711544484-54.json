{
  "metadata": {
    "timestamp": 1736711544484,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "toland/qlmarkdown",
      "stars": 3259,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.0166015625,
          "content": "ColumnLimit: 120\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.267578125,
          "content": "build\nQLMarkdown-*.zip\nQLMarkdown/*\n*.xcodeproj/*.pbxuser\n*.xcodeproj/*.mode1v3\n*.xcodeproj/*.mode2v3\n\n# xcode noise\n*.pbxuser\n*.mode1v3\n# AppCode metadata\n.idea\n\n# xcode 4 user noise\n*.xcworkspace\nxcuserdata\n*.perspectivev3\n\n# old skool\n.svn\n\n# osx noise\n.DS_Store\nprofile\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0771484375,
          "content": "[submodule \"discount\"]\n\tpath = discount\n\turl = https://github.com/Orc/discount\n"
        },
        {
          "name": "GeneratePreviewForURL.m",
          "type": "blob",
          "size": 1.4716796875,
          "content": "#import <Cocoa/Cocoa.h>\n#import <CoreFoundation/CoreFoundation.h>\n#import <CoreServices/CoreServices.h>\n#import <Foundation/Foundation.h>\n#import <QuickLook/QuickLook.h>\n\n#import \"markdown.h\"\n\nOSStatus GeneratePreviewForURL(void *thisInterface, QLPreviewRequestRef preview, CFURLRef url,\n                               CFStringRef contentTypeUTI, CFDictionaryRef options);\nvoid CancelPreviewGeneration(void *thisInterface, QLPreviewRequestRef preview);\n\n/* -----------------------------------------------------------------------------\n   Generate a preview for file\n   This function's job is to create preview for designated file\n   -----------------------------------------------------------------------------\n */\nOSStatus GeneratePreviewForURL(void *thisInterface, QLPreviewRequestRef preview, CFURLRef url,\n                               CFStringRef contentTypeUTI, CFDictionaryRef options) {\n\n  NSString *content = renderMarkdown((__bridge NSURL *)url);\n\n  CFDictionaryRef previewProperties = (__bridge CFDictionaryRef) @{\n    (__bridge NSString *)kQLPreviewPropertyTextEncodingNameKey : @\"UTF-8\",\n    (__bridge NSString *)kQLPreviewPropertyMIMETypeKey : @\"text/html\",\n  };\n\n  QLPreviewRequestSetDataRepresentation(preview, (__bridge CFDataRef)[content dataUsingEncoding:NSUTF8StringEncoding],\n                                        kUTTypeHTML, previewProperties);\n\n  return noErr;\n}\n\nvoid CancelPreviewGeneration(void *thisInterface, QLPreviewRequestRef preview) {\n  // Implement only if supported\n}\n"
        },
        {
          "name": "GenerateThumbnailForURL.m",
          "type": "blob",
          "size": 2.5908203125,
          "content": "#import <Cocoa/Cocoa.h>\n#import <CoreFoundation/CoreFoundation.h>\n#import <CoreServices/CoreServices.h>\n#import <Foundation/Foundation.h>\n#import <QuickLook/QuickLook.h>\n#import <WebKit/WebKit.h>\n\nOSStatus GenerateThumbnailForURL(void *thisInterface, QLThumbnailRequestRef thumbnail, CFURLRef url,\n                                 CFStringRef contentTypeUTI, CFDictionaryRef options, CGSize maxSize);\nvoid CancelThumbnailGeneration(void *thisInterface, QLThumbnailRequestRef thumbnail);\n\n/* -----------------------------------------------------------------------------\n Generate a thumbnail for file\n This function's job is to create thumbnail for designated file as fast as possible\n ----------------------------------------------------------------------------- */\n\nOSStatus GenerateThumbnailForURL(void *thisInterface, QLThumbnailRequestRef thumbnail, CFURLRef url,\n                                 CFStringRef contentTypeUTI, CFDictionaryRef options, CGSize maxSize) {\n\n  NSString *content = [NSString stringWithContentsOfURL:(__bridge NSURL *)url encoding:NSUTF8StringEncoding error:nil];\n\n  if (content) {\n    // Encapsulate the content of the .strings file in HTML\n    NSData *data = [content dataUsingEncoding:NSUTF8StringEncoding];\n\n    NSRect _rect = NSMakeRect(0.0, 0.0, 600.0, 800.0);\n    float _scale = maxSize.height / 800.0;\n    NSSize _scaleSize = NSMakeSize(_scale, _scale);\n    CGSize _thumbSize = NSSizeToCGSize(NSMakeSize((maxSize.width * (600.0 / 800.0)), maxSize.height));\n\n    // Create the webview to display the thumbnail\n    WebView *_webView = [[WebView alloc] initWithFrame:_rect];\n    [_webView scaleUnitSquareToSize:_scaleSize];\n    [_webView.mainFrame.frameView setAllowsScrolling:NO];\n    [_webView.mainFrame loadData:data MIMEType:@\"text/html\" textEncodingName:@\"utf-8\" baseURL:nil];\n\n    while ([_webView isLoading])\n      CFRunLoopRunInMode(kCFRunLoopDefaultMode, 0, true);\n    [_webView display];\n\n    // Draw the webview in the correct context\n    CGContextRef _context = QLThumbnailRequestCreateContext(thumbnail, _thumbSize, false, NULL);\n    if (_context) {\n      NSGraphicsContext *_graphicsContext = [NSGraphicsContext graphicsContextWithGraphicsPort:(void *)_context\n                                                                                       flipped:_webView.isFlipped];\n      [_webView displayRectIgnoringOpacity:_webView.bounds inContext:_graphicsContext];\n\n      QLThumbnailRequestFlushContext(thumbnail, _context);\n\n      CFRelease(_context);\n    }\n  }\n\n  return noErr;\n}\n\nvoid CancelThumbnailGeneration(void *thisInterface, QLThumbnailRequestRef thumbnail) {\n  // implement only if supported\n}\n"
        },
        {
          "name": "Info.plist",
          "type": "blob",
          "size": 2.9140625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CFBundleDevelopmentRegion</key>\n\t<string>English</string>\n\t<key>CFBundleDocumentTypes</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>CFBundleTypeRole</key>\n\t\t\t<string>QLGenerator</string>\n\t\t\t<key>LSItemContentTypes</key>\n\t\t\t<array>\n\t\t\t\t<string>net.daringfireball.markdown</string>\n\t\t\t\t<string>net.daringfireball</string>\n\t\t\t\t<string>net.multimarkdown.text</string>\n\t\t\t\t<string>org.vim.markdown-file</string>\n\t\t\t\t<string>com.unknown.md</string>\n\t\t\t\t<string>com.foldingtext.FoldingText.document</string>\n\t\t\t\t<string>dyn.ah62d4rv4ge8043a</string>\n\t\t\t\t<string>dyn.ah62d4rv4ge80445e</string>\n\t\t\t\t<string>dyn.ah62d4rv4ge8042pwrrwg875s</string>\n\t\t\t\t<string>dyn.ah62d4rv4ge8045pe</string>\n\t\t\t</array>\n\t\t</dict>\n\t</array>\n\t<key>CFBundleExecutable</key>\n\t<string>${EXECUTABLE_NAME}</string>\n\t<key>CFBundleIconFile</key>\n\t<string></string>\n\t<key>CFBundleIdentifier</key>\n\t<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>\n\t<key>CFBundleInfoDictionaryVersion</key>\n\t<string>6.0</string>\n\t<key>CFBundleName</key>\n\t<string>${PRODUCT_NAME}</string>\n\t<key>CFBundleShortVersionString</key>\n\t<string>$(MARKETING_VERSION)</string>\n\t<key>CFBundleVersion</key>\n\t<string>$(CURRENT_PROJECT_VERSION)</string>\n\t<key>CFPlugInDynamicRegisterFunction</key>\n\t<string></string>\n\t<key>CFPlugInDynamicRegistration</key>\n\t<string>NO</string>\n\t<key>CFPlugInFactories</key>\n\t<dict>\n\t\t<key>984AED87-72B9-4060-B7BC-935561C2221B</key>\n\t\t<string>QuickLookGeneratorPluginFactory</string>\n\t</dict>\n\t<key>CFPlugInTypes</key>\n\t<dict>\n\t\t<key>5E2D9680-5022-40FA-B806-43349622E5B9</key>\n\t\t<array>\n\t\t\t<string>984AED87-72B9-4060-B7BC-935561C2221B</string>\n\t\t</array>\n\t</dict>\n\t<key>CFPlugInUnloadFunction</key>\n\t<string></string>\n\t<key>QLNeedsToBeRunInMainThread</key>\n\t<true/>\n\t<key>QLPreviewHeight</key>\n\t<real>600</real>\n\t<key>QLPreviewWidth</key>\n\t<real>800</real>\n\t<key>QLSupportsConcurrentRequests</key>\n\t<false/>\n\t<key>QLThumbnailMinimumSize</key>\n\t<real>17</real>\n\t<key>UTImportedTypeDeclarations</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>UTTypeConformsTo</key>\n\t\t\t<array>\n\t\t\t\t<string>public.plain-text</string>\n\t\t\t</array>\n\t\t\t<key>UTTypeDescription</key>\n\t\t\t<string>Markdown document</string>\n\t\t\t<key>UTTypeIconFile</key>\n\t\t\t<string>public.text.icns</string>\n\t\t\t<key>UTTypeIdentifier</key>\n\t\t\t<string>net.daringfireball.markdown</string>\n\t\t\t<key>UTTypeReferenceURL</key>\n\t\t\t<string>http://daringfireball.net/projects/markdown/</string>\n\t\t\t<key>UTTypeTagSpecification</key>\n\t\t\t<dict>\n\t\t\t\t<key>public.filename-extension</key>\n\t\t\t\t<array>\n\t\t\t\t\t<string>multimarkdown</string>\n\t\t\t\t\t<string>markdown</string>\n\t\t\t\t\t<string>mdown</string>\n\t\t\t\t\t<string>md</string>\n\t\t\t\t\t<string>mdml</string>\n\t\t\t\t\t<string>text</string>\n\t\t\t\t\t<string>mdwn</string>\n\t\t\t\t\t<string>mkd</string>\n\t\t\t\t\t<string>mmd</string>\n\t\t\t\t\t<string>ft</string>\n\t\t\t\t</array>\n\t\t\t</dict>\n\t\t</dict>\n\t</array>\n</dict>\n</plist>\n"
        },
        {
          "name": "Nautilus_Star.png",
          "type": "blob",
          "size": 29.716796875,
          "content": null
        },
        {
          "name": "QLMarkdown.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "Readme.markdown",
          "type": "blob",
          "size": 2.501953125,
          "content": "QLMarkdown\n==========\n\nby Phil Toland\n\nfixes and improvements by Michael Dominic K.\n<http://www.mdk.org.pl>\n\nIntroduction\n------------\n\nQLMarkdown is a simple QuickLook generator for Markdown files. It renders a\npreview of the selected Markdown file using [Discount][Discount] -- a C implementation of\nJohn Gruber's Markdown.pl script.\n\nTo update to the latest version of discount run `./discount-config/update-discount.sh`\n\nFor more information on Markdown see\n<http://daringfireball.net/projects/markdown/>.\n\n\nInstallation\n------------\n\nSimply copy QLMarkdown.qlgenerator to `~/Library/QuickLook` or `/Library/QuickLook`.\n\nIf the newly installed plugin is not picked up instantly, you can run `qlmanage -r` in Terminal to refresh.\n\nTo uninstall, drag QLMarkdown into the trash.\n\nAnother method, provided you have [Homebrew Cask](https://caskroom.github.io) installed, you can run the following commands to set things up:\n\n`$ brew update`\n\n`$ brew cask install qlmarkdown`\n\nTo uninstall:\n\n`$ brew cask uninstall qlmarkdown`\n\n\n **Note:** *QuickLook doesn't allow selecting text by default. If you want to select the text in the markdown preview, you will\nneed to enable text selection in QuickLook by running the following command in Terminal:*\n\n`defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder`\n\n*This command is only valid on OS X 10.10 and below as Apple has since [removed][] the ability to select text in QuickLook.*\n\n[removed]: http://tidbits.com/article/16254\n\nDownloads\n---------\n\nSource code is available at <http://github.com/toland/qlmarkdown>.\n\nYou can download the [latest](https://github.com/toland/qlmarkdown/releases/latest) release from\n<https://github.com/toland/qlmarkdown/releases>\n\nLicense\n-------\n\nThe QLMarkdown code is distributed under the same terms as [Discount][Discount]. See the file `discount/COPYRIGHT` for more information.\n\n\nVersion History\n---------------\nVersion 1.3 - Jan 26, 2012\n\n* Major update of discount markdown engine\n\nVersion 1.2 - Oct 4, 2009\n\n* Work around a conflict with MacVim (thanks to godDLL)\n* Support for .mdml extension (alanhogan)\n* CSS that mimics Apple's ADC styling (jiho)\n\nVersion 1.1 - Feb 11, 2009\n\n* Adding a little bit of CSS styling. (mdk)\n* Replace the Perl markdown renderer with a native C one (discount). (mdk)\n* Conform to public plain-text. Will make spotlight index the file\n  contents. (mdk)\n* Added support for .md file extension (sant0sk1)\n\nVersion 1.0 - July 15, 2008\n\n* Initial release.\n\n[Discount]: http://www.pell.portland.or.us/~orc/Code/markdown/\n"
        },
        {
          "name": "discount",
          "type": "commit",
          "content": null
        },
        {
          "name": "discount-config",
          "type": "tree",
          "content": null
        },
        {
          "name": "discount-wrapper.c",
          "type": "blob",
          "size": 0.3251953125,
          "content": "#include <stdio.h>\n#include <stdlib.h>\n\n#include \"discount/markdown.h\"\n\nchar *convert_markdown_to_string(const char *str) {\n  char *out = NULL;\n\n  Document *blob = mkd_string((char *)str, strlen(str), 0);\n  mkd_compile(blob, MKD_EXTRA_FOOTNOTE);\n  int sz = mkd_document(blob, &out);\n\n  if (sz == 0)\n    return NULL;\n\n  return out;\n}\n"
        },
        {
          "name": "discount-wrapper.h",
          "type": "blob",
          "size": 0.0498046875,
          "content": "char *convert_markdown_to_string(const char *str);\n"
        },
        {
          "name": "en.lproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.c",
          "type": "blob",
          "size": 9.248046875,
          "content": "//==============================================================================\n//\n//  DO NO MODIFY THE CONTENT OF THIS FILE\n//\n//  This file contains the generic CFPlug-in code necessary for your generator\n//  To complete your generator implement the function in GenerateThumbnailForURL/GeneratePreviewForURL.c\n//\n//==============================================================================\n\n#include <CoreFoundation/CFPlugInCOM.h>\n#include <CoreFoundation/CoreFoundation.h>\n#include <CoreServices/CoreServices.h>\n#include <QuickLook/QuickLook.h>\n\n// -----------------------------------------------------------------------------\n//  constants\n// -----------------------------------------------------------------------------\n\n// Don't modify this line\n#define PLUGIN_ID \"984AED87-72B9-4060-B7BC-935561C2221B\"\n\n//\n// Below is the generic glue code for all plug-ins.\n//\n// You should not have to modify this code aside from changing\n// names if you decide to change the names defined in the Info.plist\n//\n\n// -----------------------------------------------------------------------------\n//  typedefs\n// -----------------------------------------------------------------------------\n\n// The thumbnail generation function to be implemented in GenerateThumbnailForURL.c\nOSStatus GenerateThumbnailForURL(void *thisInterface, QLThumbnailRequestRef thumbnail, CFURLRef url,\n                                 CFStringRef contentTypeUTI, CFDictionaryRef options, CGSize maxSize);\nvoid CancelThumbnailGeneration(void *thisInterface, QLThumbnailRequestRef thumbnail);\n\n// The preview generation function to be implemented in GeneratePreviewForURL.c\nOSStatus GeneratePreviewForURL(void *thisInterface, QLPreviewRequestRef preview, CFURLRef url,\n                               CFStringRef contentTypeUTI, CFDictionaryRef options);\nvoid CancelPreviewGeneration(void *thisInterface, QLPreviewRequestRef preview);\n\n// The layout for an instance of QuickLookGeneratorPlugIn\ntypedef struct __QuickLookGeneratorPluginType {\n  void *conduitInterface;\n  CFUUIDRef factoryID;\n  UInt32 refCount;\n} QuickLookGeneratorPluginType;\n\n// -----------------------------------------------------------------------------\n//  prototypes\n// -----------------------------------------------------------------------------\n//  Forward declaration for the IUnknown implementation.\n//\n\nQuickLookGeneratorPluginType *AllocQuickLookGeneratorPluginType(CFUUIDRef inFactoryID);\nvoid DeallocQuickLookGeneratorPluginType(QuickLookGeneratorPluginType *thisInstance);\nHRESULT QuickLookGeneratorQueryInterface(void *thisInstance, REFIID iid, LPVOID *ppv);\nvoid *QuickLookGeneratorPluginFactory(CFAllocatorRef allocator, CFUUIDRef typeID);\nULONG QuickLookGeneratorPluginAddRef(void *thisInstance);\nULONG QuickLookGeneratorPluginRelease(void *thisInstance);\n\n// -----------------------------------------------------------------------------\n//  myInterfaceFtbl  definition\n// -----------------------------------------------------------------------------\n//  The QLGeneratorInterfaceStruct function table.\n//\nstatic QLGeneratorInterfaceStruct myInterfaceFtbl = {NULL,\n                                                     QuickLookGeneratorQueryInterface,\n                                                     QuickLookGeneratorPluginAddRef,\n                                                     QuickLookGeneratorPluginRelease,\n                                                     NULL,\n                                                     NULL,\n                                                     NULL,\n                                                     NULL};\n\n// -----------------------------------------------------------------------------\n//  AllocQuickLookGeneratorPluginType\n// -----------------------------------------------------------------------------\n//  Utility function that allocates a new instance.\n//      You can do some initial setup for the generator here if you wish\n//      like allocating globals etc...\n//\nQuickLookGeneratorPluginType *AllocQuickLookGeneratorPluginType(CFUUIDRef inFactoryID) {\n  QuickLookGeneratorPluginType *theNewInstance;\n\n  theNewInstance = (QuickLookGeneratorPluginType *)malloc(sizeof(QuickLookGeneratorPluginType));\n  memset(theNewInstance, 0, sizeof(QuickLookGeneratorPluginType));\n\n  /* Point to the function table Malloc enough to store the stuff and copy the filler from myInterfaceFtbl over */\n  theNewInstance->conduitInterface = malloc(sizeof(QLGeneratorInterfaceStruct));\n  memcpy(theNewInstance->conduitInterface, &myInterfaceFtbl, sizeof(QLGeneratorInterfaceStruct));\n\n  /*  Retain and keep an open instance refcount for each factory. */\n  theNewInstance->factoryID = CFRetain(inFactoryID);\n  CFPlugInAddInstanceForFactory(inFactoryID);\n\n  /* This function returns the IUnknown interface so set the refCount to one. */\n  theNewInstance->refCount = 1;\n  return theNewInstance;\n}\n\n// -----------------------------------------------------------------------------\n//  DeallocQuickLookGeneratorPluginType\n// -----------------------------------------------------------------------------\n//  Utility function that deallocates the instance when\n//  the refCount goes to zero.\n//      In the current implementation generator interfaces are never deallocated\n//      but implement this as this might change in the future\n//\nvoid DeallocQuickLookGeneratorPluginType(QuickLookGeneratorPluginType *thisInstance) {\n  CFUUIDRef theFactoryID;\n\n  theFactoryID = thisInstance->factoryID;\n  /* Free the conduitInterface table up */\n  free(thisInstance->conduitInterface);\n\n  /* Free the instance structure */\n  free(thisInstance);\n  if (theFactoryID) {\n    CFPlugInRemoveInstanceForFactory(theFactoryID);\n    CFRelease(theFactoryID);\n  }\n}\n\n// -----------------------------------------------------------------------------\n//  QuickLookGeneratorQueryInterface\n// -----------------------------------------------------------------------------\n//  Implementation of the IUnknown QueryInterface function.\n//\nHRESULT QuickLookGeneratorQueryInterface(void *thisInstance, REFIID iid, LPVOID *ppv) {\n  CFUUIDRef interfaceID;\n\n  interfaceID = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, iid);\n\n  if (CFEqual(interfaceID, kQLGeneratorCallbacksInterfaceID)) {\n    /* If the Right interface was requested, bump the ref count,\n     * set the ppv parameter equal to the instance, and\n     * return good status.\n     */\n    ((QLGeneratorInterfaceStruct *)((QuickLookGeneratorPluginType *)thisInstance)->conduitInterface)\n        ->GenerateThumbnailForURL = GenerateThumbnailForURL;\n    ((QLGeneratorInterfaceStruct *)((QuickLookGeneratorPluginType *)thisInstance)->conduitInterface)\n        ->CancelThumbnailGeneration = CancelThumbnailGeneration;\n    ((QLGeneratorInterfaceStruct *)((QuickLookGeneratorPluginType *)thisInstance)->conduitInterface)\n        ->GeneratePreviewForURL = GeneratePreviewForURL;\n    ((QLGeneratorInterfaceStruct *)((QuickLookGeneratorPluginType *)thisInstance)->conduitInterface)\n        ->CancelPreviewGeneration = CancelPreviewGeneration;\n    ((QLGeneratorInterfaceStruct *)((QuickLookGeneratorPluginType *)thisInstance)->conduitInterface)\n        ->AddRef(thisInstance);\n    *ppv = thisInstance;\n    CFRelease(interfaceID);\n    return S_OK;\n  } else {\n    /* Requested interface unknown, bail with error. */\n    *ppv = NULL;\n    CFRelease(interfaceID);\n    return E_NOINTERFACE;\n  }\n}\n\n// -----------------------------------------------------------------------------\n// QuickLookGeneratorPluginAddRef\n// -----------------------------------------------------------------------------\n//  Implementation of reference counting for this type. Whenever an interface\n//  is requested, bump the refCount for the instance. NOTE: returning the\n//  refcount is a convention but is not required so don't rely on it.\n//\nULONG QuickLookGeneratorPluginAddRef(void *thisInstance) {\n  ((QuickLookGeneratorPluginType *)thisInstance)->refCount += 1;\n  return ((QuickLookGeneratorPluginType *)thisInstance)->refCount;\n}\n\n// -----------------------------------------------------------------------------\n// QuickLookGeneratorPluginRelease\n// -----------------------------------------------------------------------------\n//  When an interface is released, decrement the refCount.\n//  If the refCount goes to zero, deallocate the instance.\n//\nULONG QuickLookGeneratorPluginRelease(void *thisInstance) {\n  ((QuickLookGeneratorPluginType *)thisInstance)->refCount -= 1;\n  if (((QuickLookGeneratorPluginType *)thisInstance)->refCount == 0) {\n    DeallocQuickLookGeneratorPluginType((QuickLookGeneratorPluginType *)thisInstance);\n    return 0;\n  } else {\n    return ((QuickLookGeneratorPluginType *)thisInstance)->refCount;\n  }\n}\n\n// -----------------------------------------------------------------------------\n//  QuickLookGeneratorPluginFactory\n// -----------------------------------------------------------------------------\nvoid *QuickLookGeneratorPluginFactory(CFAllocatorRef allocator, CFUUIDRef typeID) {\n  QuickLookGeneratorPluginType *result;\n  CFUUIDRef uuid;\n\n  /* If correct type is being requested, allocate an\n   * instance of kQLGeneratorTypeID and return the IUnknown interface.\n   */\n  if (CFEqual(typeID, kQLGeneratorTypeID)) {\n    uuid = CFUUIDCreateFromString(kCFAllocatorDefault, CFSTR(PLUGIN_ID));\n    result = AllocQuickLookGeneratorPluginType(uuid);\n    CFRelease(uuid);\n    return result;\n  }\n  /* If the requested type is incorrect, return NULL. */\n  return NULL;\n}\n"
        },
        {
          "name": "markdown.h",
          "type": "blob",
          "size": 0.0712890625,
          "content": "#import <Foundation/Foundation.h>\n\nNSString *renderMarkdown(NSURL *url);\n"
        },
        {
          "name": "markdown.m",
          "type": "blob",
          "size": 1.6025390625,
          "content": "#include \"discount-wrapper.h\"\n\n#include \"markdown.h\"\n\nNSString *renderMarkdown(NSURL *url) {\n  @autoreleasepool {\n    NSString *domainName = @\"com.fiatdev.QLMarkdown\";\n\n    NSString *styles = [[NSString alloc]\n        initWithContentsOfFile:[[NSBundle bundleWithIdentifier:domainName] pathForResource:@\"styles\" ofType:@\"css\"]\n                      encoding:NSUTF8StringEncoding\n                         error:nil];\n\n    NSStringEncoding usedEncoding = 0;\n    NSError *e = nil;\n\n    NSString *source = [[NSString alloc] initWithContentsOfURL:url usedEncoding:&usedEncoding error:&e];\n\n    if (usedEncoding == 0) {\n      NSLog(@\"Wasn't able to determine encoding for file “%@”\", [url path]);\n    }\n\n    char *output = convert_markdown_to_string([source UTF8String]);\n    NSString *html = [NSString stringWithFormat:@\"<!DOCTYPE html>\\n\"\n                                                 \"<html>\\n\"\n                                                 \"<head>\\n\"\n                                                 \"<meta charset=\\\"utf-8\\\">\\n\"\n                                                 \"<style type=\\\"text/css\\\">\\n%@</style>\\n\"\n                                                 \"<base href=\\\"%@\\\"/>\\n\"\n                                                 \"</head>\\n\"\n                                                 \"<body>\\n\"\n                                                 \"%@\"\n                                                 \"</body>\\n\"\n                                                 \"</html>\",\n                                                styles, url, [NSString stringWithUTF8String:output]];\n\n    free(output);\n\n    return html;\n  }\n}\n"
        },
        {
          "name": "sample.md",
          "type": "blob",
          "size": 8.498046875,
          "content": "Title: Sample MultiMarkdown Document\nXHTML Header:\nAuthor: Fletcher T. Penney\nCSS: styles.css\nBase Header Level: 2\nLaTeX XSLT: article.xslt\nXMP: CCAttributionShareAlike\nCopyright: 2006-2007 Fletcher T. Penney.\n\tThis work is licensed under a Creative Commons License.\n\thttp://creativecommons.org/licenses/by-sa/3.0/\nKeywords: MultiMarkdown, Markdown, XML, XHTML, XSLT, PDF,\nFormat: complete\n\n\n# Introduction #\n\nAs I add increasing numbers of features to MultiMarkdown, I decided it was time to create a sample document to show them off.  Many of the features are demonstrated in the [MultiMarkdown Readme][], but some are not.\n\nAdditionally, it's easy for those features to get lost within all of the technical documentation.  This document is designed to *demonstrate*, not describe, most of the features of MultiMarkdown.\n\n\n[MultiMarkdown Readme]: http://fletcher.freeshell.org/wiki/MultiMarkdown \"MultiMarkdown Readme\"\n\n\n# How to Use This Document #\n\nI suggest comparing the raw text source with the various final outputs (e.g. PDF, XHTML, LaTeX, RTF) in order to see what can be accomplished.  There will be many similarities between output formats, but also a few differences.  Tables will end up in different places.  Paragraphs won't break in the same way.  But these differences are superficial and are a result of trying to optimize each format, without regard to identical output across formats (which would be virtually impossible).\n\nRemember, the main goal of Markdown\\MultiMarkdown is to allow you to create a document in plain text, with minimal distraction from markup, that can be transformed into a variety of high quality outputs.  Or, to quote John Gruber:\n\n> The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email.[][#Gruber]\n\n\n[#Gruber]: John Gruber.  Daring Fireball: Markdown. [Cited January 2006]. Available from <http://daringfireball.net/projects/markdown/>.\n\n\n# Where Can I Get a Copy? #\n\nYou can download a zipfile containing multiple formats of this document:\n\n* [Sample MultiMarkdown Document](http://files.fletcherpenney.net/SampleMultiMarkdownDocument.zip)\n\nThis file includes:\n\n*\tThe Scrivener source file\n*\tA plain text file in MultiMarkdown format\n*\tAn XHTML file\n*\tA PDF\n*\tAn RTF\n\nAll files were generated automatically from the MultiMarkdown source document.\n\n\n# So, What Can This Document Demonstrate? #\n\n## Metadata ##\n\nFirst, take a look at the overall structure of the document.  At the very beginning is metadata, including a title, author, keywords, copyright information, etc.  Where possible, this metadata is put to appropriate use, otherwise it is stored in a format designed to be easily read and minimally distracting:\n\n* In plain text and XHTML snippets[^snippets], it is located at the top of the document.\n\n* In a full XHTML document, is located in the `<head>` section, and the title and CSS metadata, if present, are used appropriately.\n\n* In a PDF generated from my XSLT files, metadata is used to generate the appropriate fields (title, author, keywords) in the PDF itself.  Some PDF readers will let you examine this data.  Additionally, the title, subtitle, author, and copyright are placed at the beginning of the document.\n\n* In a Scrivener document, you can put the metadata in the first File in the Binder, but the preferred location is in the \"MultiMarkdown Settings...\" pane (in the File Menu.)\n\nThere are a lot of standard metadata keys that can be used, or you can create your own and use them as you see fit.  Definitely a powerful feature.\n\n[^snippets]: An XHTML snippet is my terminology for XHTML code that does not include the `<html>`, `<head>`, and `<body>` tags.  Most browsers will display it properly, but it is not a complete XHTML document.  Without a `<head>` section there is nowhere to put metadata(e.g. there is no `<title>`).\n\n\n## Structure ##\n\nThe next thing to look at is the overall structure of the document.  You can visualize a Markdown document as an outline, with different sections and different levels within those sections.  Based on your output format, these can be used to generate headers, or sections, or even chapters.  It's all based on what tools you use to process the XHTML output.\n\nEven within the XHTML document, however, you can make use of this structure to allow easy navigation within the document.  You can link directly to the [Introduction][], for instance.  And if you are creating a PDF, it will contain a hierarchy of section names that you can use to allow easy navigation, if your PDF reader supports this function.\n\n\n## Footnotes ##\n\nFootnotes are very easy to implement in MultiMarkdown, as described in the MultiMarkdown Syntax Guide.[^somesamplefootnote]\n\n[^somesamplefootnote]: Here is the text of the footnote itself.\n\n## Tables ##\n\nTables can be quite useful for showing data in a meaningful way.  As an example, here is a table comparing [MultiMarkdown vs. Crayons][].\n\n\n[MultiMarkdown vs. Crayons][MultiMarkdown vs. Crayons]\n| Features                          | MultiMarkdown |  Crayons |\n----------------------------------- | :-----------: | :------: |\nMelts in warm places                |       No      |    Yes   |\nMistakes can be easily fixed        |      Yes      |    No    |\nEasy to copy documents for friends  |      Yes      |    No    |\nFun at parties                      |  No[^parties] | Why not? |\n\nMinimum markup for maximum quality? |      Yes      |    No    |\n\n\n\n[^parties]: I guess it depends on what kind of parties you go to...\n\n\n\n## Typographical conventions ##\n\nBy incorporating John Gruber's [SmartyPants][] program into your workflow, you can generate more \"correct\" typographic punction in your XHTML pages, and in your LaTeX source if you are generating PDF's---this includes en and em dashes, and ellipses....\n\nVery nice when you want to focus on writing, not grammar.\n\n\n[SmartyPants]: http://daringfireball.net/projects/smartypants/\n\n\n## Image Support ##\n\nIf you choose to incorporate images in your documents, this can be easily done as well.  MultiMarkdown makes it easier to link to images and include various attributes.\n\nAs an example, here is an image from my website---[Nautilus Star](#nautilusstar).  If you have a local copy of the image, you can include the image in a pdf.\n\n![Nautilus Star][]\n\n[Nautilus Star]: Nautilus_Star.png \"Nautilus Star\" width=307px height=250px\n\n\n## Bibliography Support ##\n\nMultiMarkdown offers several mechanisms for managing bibliographies.  It has built-in support for basic citation and bibliography management and formatting, or you can rely on external tools to handle this for you.  There aren't many citations in this document, but I think it gets the point across.[p. 42][#fake]\n\n\n[#fake]: John Doe. *A Totally Fake Book*.  Vanity Press, 2006.\n\n\n## Glossary Support ##\n\nMultiMarkdown has a special format for footnotes that should represent glossary terms.  This doesn't make much difference in XHTML (because there is no such thing as a glossary in XHTML), but can be used to generate a glossary within LaTeX documents.\n\nFor example, let's have an entry for `glossary`.[^glossary] And what about ampersands?[^amp]\n\nSince we want the ampersand entry to be sorted with the a's, and not with symbols, we put in the optional sort key `ampersand` to control sorting.\n\n\t[^glossary]: glossary: Glossary\n\t\tA section at the end ...\n\n\t[^amp]: glossary: & (ampersand)\n\t\tA punctuation mark ...\n\n[^glossary]: glossary: Glossary\n\tA section at the end ...\n\n[^amp]: glossary: & (ampersand)\n\tA punctuation mark ...\n\n\n## Math Support ##\n\nIt's pretty easy to include mathematical equations:\n\n<< e^(i pi) + 1 = 0 [Euler's identity]>>\n\n<< x_(1,2) = (-b+-sqrt(b^2-4ac))/(2a) [quadratic equation solution]>>\n\nYou can also include formulas within a sentence, such as\n<<x^2 + y^2 = 1>>.\n\n# Now What? #\n\nGet out there and try it.  Let me know what you think.  Let me know what doesn't work.  Let me know what you think is missing.\n\nIn other words, help me make it better!\n\nYou can get more information on my web site:\n\n*\t<http://fletcherpenney.net/MultiMarkdown>\n\nYou can also:\n\n* Email me:\n\t<mailto:fletcher@fletcherpenney.net>\n\n* Join the MultiMarkdown discussion list:\n\t<http://groups.google.com/group/multimarkdown>\n\n* Join the Markdown discussion list:\n\t<http://six.pairlist.net/mailman/listinfo/markdown-discuss>\n"
        },
        {
          "name": "sample.xhtml",
          "type": "blob",
          "size": 12.6640625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN\"\n\t\"http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head>\n\t\t<!-- Processed by MultiMarkdown -->\n\t\t<meta name=\"Author\" content=\"Fletcher T. Penney\" />\n\t\t<meta name=\"BaseHeaderLevel\" content=\"2\" />\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"styles.css\" />\n\t\t<meta name=\"Copyright\" content=\"2006-2007 Fletcher T. Penney.\nThis work is licensed under a Creative Commons License.\nhttp://creativecommons.org/licenses/by-sa/3.0/\" />\n\t\t<meta name=\"Format\" content=\"complete\" />\n\t\t<meta name=\"Keywords\" content=\"MultiMarkdown, Markdown, XML, XHTML, XSLT, PDF,\" />\n\t\t<meta name=\"LaTeXXSLT\" content=\"article.xslt\" />\n\t\t<title>Sample MultiMarkdown Document</title>\n\n\t\t<meta name=\"XMP\" content=\"CCAttributionShareAlike\" />\n\t</head>\n<body>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>As I add increasing numbers of features to MultiMarkdown, I decided it was time to create a sample document to show them off.  Many of the features are demonstrated in the <a href=\"http://fletcher.freeshell.org/wiki/MultiMarkdown\" title=\"MultiMarkdown Readme\">MultiMarkdown Readme</a>, but some are not.</p>\n\n<p>Additionally, it&#8217;s easy for those features to get lost within all of the technical documentation.  This document is designed to <em>demonstrate</em>, not describe, most of the features of MultiMarkdown.</p>\n\n<h2 id=\"howtousethisdocument\">How to Use This Document</h2>\n\n<p>I suggest comparing the raw text source with the various final outputs (e.g. PDF, XHTML, LaTeX, RTF) in order to see what can be accomplished.  There will be many similarities between output formats, but also a few differences.  Tables will end up in different places.  Paragraphs won&#8217;t break in the same way.  But these differences are superficial and are a result of trying to optimize each format, without regard to identical output across formats (which would be virtually impossible).</p>\n\n<p>Remember, the main goal of Markdown\\MultiMarkdown is to allow you to create a document in plain text, with minimal distraction from markup, that can be transformed into a variety of high quality outputs.  Or, to quote John Gruber:</p>\n\n<blockquote>\n  <p>The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email.<span class=\"markdowncitation\"> (<a href=\"#Gruber\">1</a>)</span></p>\n</blockquote>\n\n<h2 id=\"wherecanigetacopy\">Where Can I Get a Copy?</h2>\n\n<p>You can download a zipfile containing multiple formats of this document:</p>\n\n<ul>\n<li><a href=\"http://files.fletcherpenney.net/SampleMultiMarkdownDocument.zip\">Sample MultiMarkdown Document</a></li>\n</ul>\n\n<p>This file includes:</p>\n\n<ul>\n<li>The Scrivener source file</li>\n<li>A plain text file in MultiMarkdown format</li>\n<li>An XHTML file</li>\n<li>A PDF</li>\n<li>An RTF</li>\n</ul>\n\n<p>All files were generated automatically from the MultiMarkdown source document.</p>\n\n<h2 id=\"sowhatcanthisdocumentdemonstrate\">So, What Can This Document Demonstrate?</h2>\n\n<h3 id=\"metadata\">Metadata</h3>\n\n<p>First, take a look at the overall structure of the document.  At the very beginning is metadata, including a title, author, keywords, copyright information, etc.  Where possible, this metadata is put to appropriate use, otherwise it is stored in a format designed to be easily read and minimally distracting:</p>\n\n<ul>\n<li><p>In plain text and XHTML snippets<a href=\"#fn:snippets\" id=\"fnref:snippets\" class=\"footnote\">1</a>, it is located at the top of the document.</p></li>\n<li><p>In a full XHTML document, is located in the <code>&lt;head&gt;</code> section, and the title and CSS metadata, if present, are used appropriately.  </p></li>\n<li><p>In a PDF generated from my XSLT files, metadata is used to generate the appropriate fields (title, author, keywords) in the PDF itself.  Some PDF readers will let you examine this data.  Additionally, the title, subtitle, author, and copyright are placed at the beginning of the document.</p></li>\n<li><p>In a Scrivener document, you can put the metadata in the first File in the Binder, but the preferred location is in the &#8220;MultiMarkdown Settings&#8230;&#8221; pane (in the File Menu.)</p></li>\n</ul>\n\n<p>There are a lot of standard metadata keys that can be used, or you can create your own and use them as you see fit.  Definitely a powerful feature.</p>\n\n<h3 id=\"structure\">Structure</h3>\n\n<p>The next thing to look at is the overall structure of the document.  You can visualize a Markdown document as an outline, with different sections and different levels within those sections.  Based on your output format, these can be used to generate headers, or sections, or even chapters.  It&#8217;s all based on what tools you use to process the XHTML output.</p>\n\n<p>Even within the XHTML document, however, you can make use of this structure to allow easy navigation within the document.  You can link directly to the <a href=\"#introduction\" title=\"Introduction\">Introduction</a>, for instance.  And if you are creating a PDF, it will contain a hierarchy of section names that you can use to allow easy navigation, if your PDF reader supports this function.</p>\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n<p>Footnotes are very easy to implement in MultiMarkdown, as described in the MultiMarkdown Syntax Guide.<a href=\"#fn:somesamplefootnote\" id=\"fnref:somesamplefootnote\" class=\"footnote\">2</a></p>\n\n<h3 id=\"tables\">Tables</h3>\n\n<p>Tables can be quite useful for showing data in a meaningful way.  As an example, here is a table comparing <a href=\"#multimarkdownvs.crayons\" title=\"MultiMarkdown vs. Crayons\">MultiMarkdown vs. Crayons</a>.</p>\n\n<table>\n<caption id=\"multimarkdownvs.crayons\">MultiMarkdown vs. Crayons</caption>\n<col />\n<col align=\"center\" />\n<col align=\"center\" />\n<thead>\n<tr>\n\t<th>Features</th>\n\t<th>MultiMarkdown</th>\n\t<th>Crayons</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n\t<td>Melts in warm places</td>\n\t<td align=\"center\">No</td>\n\t<td align=\"center\">Yes</td>\n</tr>\n<tr>\n\t<td>Mistakes can be easily fixed</td>\n\t<td align=\"center\">Yes</td>\n\t<td align=\"center\">No</td>\n</tr>\n<tr>\n\t<td>Easy to copy documents for friends</td>\n\t<td align=\"center\">Yes</td>\n\t<td align=\"center\">No</td>\n</tr>\n<tr>\n\t<td>Fun at parties</td>\n\t<td align=\"center\">No<a href=\"#fn:parties\" id=\"fnref:parties\" class=\"footnote\">3</a></td>\n\t<td align=\"center\">Why not?</td>\n</tr>\n</tbody>\n\n<tbody>\n<tr>\n\t<td>Minimum markup for maximum quality?</td>\n\t<td align=\"center\">Yes</td>\n\t<td align=\"center\">No</td>\n</tr>\n</tbody>\n</table>\n\n<h3 id=\"typographicalconventions\">Typographical conventions</h3>\n\n<p>By incorporating John Gruber&#8217;s <a href=\"http://daringfireball.net/projects/smartypants/\">SmartyPants</a> program into your workflow, you can generate more &#8220;correct&#8221; typographic punction in your XHTML pages, and in your LaTeX source if you are generating PDF&#8217;s&#8212;this includes en and em dashes, and ellipses&#8230;.</p>\n\n<p>Very nice when you want to focus on writing, not grammar.</p>\n\n<h3 id=\"imagesupport\">Image Support</h3>\n\n<p>If you choose to incorporate images in your documents, this can be easily done as well.  MultiMarkdown makes it easier to link to images and include various attributes.</p>\n\n<p>As an example, here is an image from my website&#8212;<a href=\"#nautilusstar\">Nautilus Star</a>.  If you have a local copy of the image, you can include the image in a pdf.</p>\n\n<p><img id=\"nautilusstar\" src=\"Nautilus_Star.png\" alt=\"Nautilus Star\" title=\"Nautilus Star\" width=\"307px\" height=\"250px\" /></p>\n\n<h3 id=\"bibliographysupport\">Bibliography Support</h3>\n\n<p>MultiMarkdown offers several mechanisms for managing bibliographies.  It has built-in support for basic citation and bibliography management and formatting, or you can rely on external tools to handle this for you.  There aren&#8217;t many citations in this document, but I think it gets the point across.<span class=\"markdowncitation\"> (<a href=\"#fake\">2</a>, <span class=\"locator\">p. 42</span>)</span></p>\n\n<h3 id=\"glossarysupport\">Glossary Support</h3>\n\n<p>MultiMarkdown has a special format for footnotes that should represent glossary terms.  This doesn&#8217;t make much difference in XHTML (because there is no such thing as a glossary in XHTML), but can be used to generate a glossary within LaTeX documents.</p>\n\n<p>For example, let&#8217;s have an entry for <code>glossary</code>.<a href=\"#fn:glossary\" id=\"fnref:glossary\" class=\"footnote\">4</a> And what about ampersands?<a href=\"#fn:amp\" id=\"fnref:amp\" class=\"footnote\">5</a></p>\n\n<p>Since we want the ampersand entry to be sorted with the a&#8217;s, and not with symbols, we put in the optional sort key <code>ampersand</code> to control sorting.</p>\n\n<pre><code>[^glossary]: glossary: Glossary\n    A section at the end ...\n\n[^amp]: glossary: &amp; (ampersand)\n    A punctuation mark ...</code></pre>\n\n<h3 id=\"mathsupport\">Math Support</h3>\n\n<p>It&#8217;s pretty easy to include mathematical equations:</p>\n\n<p><math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"eulersidentity\" display=\"block\"><mstyle><msup><mi>e</mi><mrow><mi>i</mi><mi>&#x03C0;</mi></mrow></msup><mo>+</mo><mn>1</mn><mo>=</mo><mn>0</mn></mstyle></math></p>\n\n<p><math xmlns=\"http://www.w3.org/1998/Math/MathML\" id=\"quadraticequationsolution\" display=\"block\"><mstyle><msub><mi>x</mi><mrow><mn>1</mn><mo>,</mo><mn>2</mn></mrow></msub><mo>=</mo><mfrac><mrow><mo>-</mo><mi>b</mi><mo>&#x00B1;</mo><msqrt><mrow><msup><mi>b</mi><mn>2</mn></msup><mo>-</mo><mn>4</mn><mi>a</mi><mi>c</mi></mrow></msqrt></mrow><mrow><mn>2</mn><mi>a</mi></mrow></mfrac></mstyle></math></p>\n\n<p>You can also include formulas within a sentence, such as\n<math xmlns=\"http://www.w3.org/1998/Math/MathML\"><mstyle><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mn>1</mn></mstyle></math>.</p>\n\n<h2 id=\"nowwhat\">Now What?</h2>\n\n<p>Get out there and try it.  Let me know what you think.  Let me know what doesn&#8217;t work.  Let me know what you think is missing.</p>\n\n<p>In other words, help me make it better!</p>\n\n<p>You can get more information on my web site:</p>\n\n<ul>\n<li><a href=\"http://fletcherpenney.net/MultiMarkdown\">http://fletcherpenney.net/MultiMarkdown</a></li>\n</ul>\n\n<p>You can also:</p>\n\n<ul>\n<li><p>Email me: <br />\n<a href=\"&#109;&#x61;&#105;&#108;&#x74;&#111;:&#x66;&#108;&#101;&#x74;&#99;&#104;e&#x72;&#64;f&#108;&#x65;tc&#104;&#101;&#x72;&#112;&#101;&#110;&#110;&#101;&#x79;&#46;&#x6E;&#101;&#116;\">&#x66;&#108;&#101;&#x74;&#99;&#104;e&#x72;&#64;f&#108;&#x65;tc&#104;&#101;&#x72;&#112;&#101;&#110;&#110;&#101;&#x79;&#46;&#x6E;&#101;&#116;</a></p></li>\n<li><p>Join the MultiMarkdown discussion list: <br />\n<a href=\"http://groups.google.com/group/multimarkdown\">http://groups.google.com/group/multimarkdown</a></p></li>\n<li><p>Join the Markdown discussion list: <br />\n<a href=\"http://six.pairlist.net/mailman/listinfo/markdown-discuss\">http://six.pairlist.net/mailman/listinfo/markdown-discuss</a></p></li>\n</ul>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn:snippets\"><p>An XHTML snippet is my terminology for XHTML code that does not include the <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, and <code>&lt;body&gt;</code> tags.  Most browsers will display it properly, but it is not a complete XHTML document.  Without a <code>&lt;head&gt;</code> section there is nowhere to put metadata(e.g. there is no <code>&lt;title&gt;</code>).<a href=\"#fnref:snippets\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n<li id=\"fn:somesamplefootnote\"><p>Here is the text of the footnote itself.<a href=\"#fnref:somesamplefootnote\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n<li id=\"fn:parties\"><p>I guess it depends on what kind of parties you go to&#8230;<a href=\"#fnref:parties\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n<li id=\"fn:glossary\"><p>glossary: Glossary\nA section at the end &#8230;<a href=\"#fnref:glossary\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n<li id=\"fn:amp\"><p>glossary: &amp; (ampersand)\nA punctuation mark &#8230;<a href=\"#fnref:amp\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n</ol>\n</div>\n\n<div class=\"bibliography\">\n<hr />\n<p>Bibliography</p>\n\n<div id=\"Gruber\"><p>[1] <span class=\"item\">John Gruber.  Daring Fireball: Markdown. [Cited January 2006]. Available from <a href=\"http://daringfireball.net/projects/markdown/\">http://daringfireball.net/projects/markdown/</a>.</span></p></div>\n\n<div id=\"fake\"><p>[2] <span class=\"item\">John Doe. <em>A Totally Fake Book</em>.  Vanity Press, 2006.</span></p></div>\n\n</div>\n</body>\n</html>\n"
        },
        {
          "name": "styles.css",
          "type": "blob",
          "size": 15.1044921875,
          "content": "/*\n * github-markdown-css\n * https://github.com/sindresorhus/github-markdown-css\n */\n\n@font-face {\n  font-family: octicons-link;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAZwABAAAAAACFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEU0lHAAAGaAAAAAgAAAAIAAAAAUdTVUIAAAZcAAAACgAAAAoAAQAAT1MvMgAAAyQAAABJAAAAYFYEU3RjbWFwAAADcAAAAEUAAACAAJThvmN2dCAAAATkAAAABAAAAAQAAAAAZnBnbQAAA7gAAACyAAABCUM+8IhnYXNwAAAGTAAAABAAAAAQABoAI2dseWYAAAFsAAABPAAAAZwcEq9taGVhZAAAAsgAAAA0AAAANgh4a91oaGVhAAADCAAAABoAAAAkCA8DRGhtdHgAAAL8AAAADAAAAAwGAACfbG9jYQAAAsAAAAAIAAAACABiATBtYXhwAAACqAAAABgAAAAgAA8ASm5hbWUAAAToAAABQgAAAlXu73sOcG9zdAAABiwAAAAeAAAAME3QpOBwcmVwAAAEbAAAAHYAAAB/aFGpk3jaTY6xa8JAGMW/O62BDi0tJLYQincXEypYIiGJjSgHniQ6umTsUEyLm5BV6NDBP8Tpts6F0v+k/0an2i+itHDw3v2+9+DBKTzsJNnWJNTgHEy4BgG3EMI9DCEDOGEXzDADU5hBKMIgNPZqoD3SilVaXZCER3/I7AtxEJLtzzuZfI+VVkprxTlXShWKb3TBecG11rwoNlmmn1P2WYcJczl32etSpKnziC7lQyWe1smVPy/Lt7Kc+0vWY/gAgIIEqAN9we0pwKXreiMasxvabDQMM4riO+qxM2ogwDGOZTXxwxDiycQIcoYFBLj5K3EIaSctAq2kTYiw+ymhce7vwM9jSqO8JyVd5RH9gyTt2+J/yUmYlIR0s04n6+7Vm1ozezUeLEaUjhaDSuXHwVRgvLJn1tQ7xiuVv/ocTRF42mNgZGBgYGbwZOBiAAFGJBIMAAizAFoAAABiAGIAznjaY2BkYGAA4in8zwXi+W2+MjCzMIDApSwvXzC97Z4Ig8N/BxYGZgcgl52BCSQKAA3jCV8CAABfAAAAAAQAAEB42mNgZGBg4f3vACQZQABIMjKgAmYAKEgBXgAAeNpjYGY6wTiBgZWBg2kmUxoDA4MPhGZMYzBi1AHygVLYQUCaawqDA4PChxhmh/8ODDEsvAwHgMKMIDnGL0x7gJQCAwMAJd4MFwAAAHjaY2BgYGaA4DAGRgYQkAHyGMF8NgYrIM3JIAGVYYDT+AEjAwuDFpBmA9KMDEwMCh9i/v8H8sH0/4dQc1iAmAkALaUKLgAAAHjaTY9LDsIgEIbtgqHUPpDi3gPoBVyRTmTddOmqTXThEXqrob2gQ1FjwpDvfwCBdmdXC5AVKFu3e5MfNFJ29KTQT48Ob9/lqYwOGZxeUelN2U2R6+cArgtCJpauW7UQBqnFkUsjAY/kOU1cP+DAgvxwn1chZDwUbd6CFimGXwzwF6tPbFIcjEl+vvmM/byA48e6tWrKArm4ZJlCbdsrxksL1AwWn/yBSJKpYbq8AXaaTb8AAHja28jAwOC00ZrBeQNDQOWO//sdBBgYGRiYWYAEELEwMTE4uzo5Zzo5b2BxdnFOcALxNjA6b2ByTswC8jYwg0VlNuoCTWAMqNzMzsoK1rEhNqByEyerg5PMJlYuVueETKcd/89uBpnpvIEVomeHLoMsAAe1Id4AAAAAAAB42oWQT07CQBTGv0JBhagk7HQzKxca2sJCE1hDt4QF+9JOS0nbaaYDCQfwCJ7Au3AHj+LO13FMmm6cl7785vven0kBjHCBhfpYuNa5Ph1c0e2Xu3jEvWG7UdPDLZ4N92nOm+EBXuAbHmIMSRMs+4aUEd4Nd3CHD8NdvOLTsA2GL8M9PODbcL+hD7C1xoaHeLJSEao0FEW14ckxC+TU8TxvsY6X0eLPmRhry2WVioLpkrbp84LLQPGI7c6sOiUzpWIWS5GzlSgUzzLBSikOPFTOXqly7rqx0Z1Q5BAIoZBSFihQYQOOBEdkCOgXTOHA07HAGjGWiIjaPZNW13/+lm6S9FT7rLHFJ6fQbkATOG1j2OFMucKJJsxIVfQORl+9Jyda6Sl1dUYhSCm1dyClfoeDve4qMYdLEbfqHf3O/AdDumsjAAB42mNgYoAAZQYjBmyAGYQZmdhL8zLdDEydARfoAqIAAAABAAMABwAKABMAB///AA8AAQAAAAAAAAAAAAAAAAABAAAAAA==)\n    format(\"woff\");\n}\n\nbody .octicon {\n  display: inline-block;\n  fill: currentColor;\n  vertical-align: text-bottom;\n}\n\nbody .anchor {\n  float: left;\n  line-height: 1;\n  margin-left: -20px;\n  padding-right: 4px;\n}\n\nbody .anchor:focus {\n  outline: none;\n}\n\nbody h1 .octicon-link,\nbody h2 .octicon-link,\nbody h3 .octicon-link,\nbody h4 .octicon-link,\nbody h5 .octicon-link,\nbody h6 .octicon-link {\n  color: #1b1f23;\n  vertical-align: middle;\n  visibility: hidden;\n}\n\nbody h1:hover .anchor,\nbody h2:hover .anchor,\nbody h3:hover .anchor,\nbody h4:hover .anchor,\nbody h5:hover .anchor,\nbody h6:hover .anchor {\n  text-decoration: none;\n}\n\nbody h1:hover .anchor .octicon-link,\nbody h2:hover .anchor .octicon-link,\nbody h3:hover .anchor .octicon-link,\nbody h4:hover .anchor .octicon-link,\nbody h5:hover .anchor .octicon-link,\nbody h6:hover .anchor .octicon-link {\n  visibility: visible;\n}\n\nbody {\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #24292e;\n  line-height: 1.5;\n  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji,\n    Segoe UI Emoji, Segoe UI Symbol;\n  font-size: 16px;\n  line-height: 1.5;\n  word-wrap: break-word;\n  padding: 3rem 3rem 8rem 3rem;\n}\n\nbody .pl-c {\n  color: #6a737d;\n}\n\nbody .pl-c1,\nbody .pl-s .pl-v {\n  color: #005cc5;\n}\n\nbody .pl-e,\nbody .pl-en {\n  color: #6f42c1;\n}\n\nbody .pl-s .pl-s1,\nbody .pl-smi {\n  color: #24292e;\n}\n\nbody .pl-ent {\n  color: #22863a;\n}\n\nbody .pl-k {\n  color: #d73a49;\n}\n\nbody .pl-pds,\nbody .pl-s,\nbody .pl-s .pl-pse .pl-s1,\nbody .pl-sr,\nbody .pl-sr .pl-cce,\nbody .pl-sr .pl-sra,\nbody .pl-sr .pl-sre {\n  color: #032f62;\n}\n\nbody .pl-smw,\nbody .pl-v {\n  color: #e36209;\n}\n\nbody .pl-bu {\n  color: #b31d28;\n}\n\nbody .pl-ii {\n  background-color: #b31d28;\n  color: #fafbfc;\n}\n\nbody .pl-c2 {\n  background-color: #d73a49;\n  color: #fafbfc;\n}\n\nbody .pl-c2:before {\n  content: \"^M\";\n}\n\nbody .pl-sr .pl-cce {\n  color: #22863a;\n  font-weight: 700;\n}\n\nbody .pl-ml {\n  color: #735c0f;\n}\n\nbody .pl-mh,\nbody .pl-mh .pl-en,\nbody .pl-ms {\n  color: #005cc5;\n  font-weight: 700;\n}\n\nbody .pl-mi {\n  color: #24292e;\n  font-style: italic;\n}\n\nbody .pl-mb {\n  color: #24292e;\n  font-weight: 700;\n}\n\nbody .pl-md {\n  background-color: #ffeef0;\n  color: #b31d28;\n}\n\nbody .pl-mi1 {\n  background-color: #f0fff4;\n  color: #22863a;\n}\n\nbody .pl-mc {\n  background-color: #ffebda;\n  color: #e36209;\n}\n\nbody .pl-mi2 {\n  background-color: #005cc5;\n  color: #f6f8fa;\n}\n\nbody .pl-mdr {\n  color: #6f42c1;\n  font-weight: 700;\n}\n\nbody .pl-ba {\n  color: #586069;\n}\n\nbody .pl-sg {\n  color: #959da5;\n}\n\nbody .pl-corl {\n  color: #032f62;\n  text-decoration: underline;\n}\n\nbody details {\n  display: block;\n}\n\nbody summary {\n  display: list-item;\n}\n\nbody a {\n  background-color: transparent;\n}\n\nbody a:active,\nbody a:hover {\n  outline-width: 0;\n}\n\nbody strong {\n  font-weight: inherit;\n  font-weight: bolder;\n}\n\nbody h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\nbody img {\n  border-style: none;\n}\n\nbody code,\nbody kbd,\nbody pre {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\nbody hr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\nbody input {\n  font: inherit;\n  margin: 0;\n}\n\nbody input {\n  overflow: visible;\n}\n\nbody [type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\nbody * {\n  box-sizing: border-box;\n}\n\nbody input {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\nbody a {\n  color: #0366d6;\n  text-decoration: none;\n}\n\nbody a:hover {\n  text-decoration: underline;\n}\n\nbody strong {\n  font-weight: 600;\n}\n\nbody hr {\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #dfe2e5;\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n}\n\nbody hr:before {\n  content: \"\";\n  display: table;\n}\n\nbody hr:after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n\nbody table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\nbody td,\nbody th {\n  padding: 0;\n}\n\nbody details summary {\n  cursor: pointer;\n}\n\nbody h1,\nbody h2,\nbody h3,\nbody h4,\nbody h5,\nbody h6 {\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\nbody h1 {\n  font-size: 32px;\n}\n\nbody h1,\nbody h2 {\n  font-weight: 600;\n}\n\nbody h2 {\n  font-size: 24px;\n}\n\nbody h3 {\n  font-size: 20px;\n}\n\nbody h3,\nbody h4 {\n  font-weight: 600;\n}\n\nbody h4 {\n  font-size: 16px;\n}\n\nbody h5 {\n  font-size: 14px;\n}\n\nbody h5,\nbody h6 {\n  font-weight: 600;\n}\n\nbody h6 {\n  font-size: 12px;\n}\n\nbody p {\n  margin-bottom: 10px;\n  margin-top: 0;\n}\n\nbody blockquote {\n  margin: 0;\n}\n\nbody ol,\nbody ul {\n  margin-bottom: 0;\n  margin-top: 0;\n  padding-left: 0;\n}\n\nbody ol ol,\nbody ul ol {\n  list-style-type: lower-roman;\n}\n\nbody ol ol ol,\nbody ol ul ol,\nbody ul ol ol,\nbody ul ul ol {\n  list-style-type: lower-alpha;\n}\n\nbody dd {\n  margin-left: 0;\n}\n\nbody code,\nbody pre {\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\nbody pre {\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\nbody input::-webkit-inner-spin-button,\nbody input::-webkit-outer-spin-button {\n  -webkit-appearance: none;\n  appearance: none;\n  margin: 0;\n}\n\nbody .border {\n  border: 1px solid #e1e4e8 !important;\n}\n\nbody .border-0 {\n  border: 0 !important;\n}\n\nbody .border-bottom {\n  border-bottom: 1px solid #e1e4e8 !important;\n}\n\nbody .rounded-1 {\n  border-radius: 3px !important;\n}\n\nbody .bg-white {\n  background-color: #fff !important;\n}\n\nbody .bg-gray-light {\n  background-color: #fafbfc !important;\n}\n\nbody .text-gray-light {\n  color: #6a737d !important;\n}\n\nbody .mb-0 {\n  margin-bottom: 0 !important;\n}\n\nbody .my-2 {\n  margin-bottom: 8px !important;\n  margin-top: 8px !important;\n}\n\nbody .pl-0 {\n  padding-left: 0 !important;\n}\n\nbody .py-0 {\n  padding-bottom: 0 !important;\n  padding-top: 0 !important;\n}\n\nbody .pl-1 {\n  padding-left: 4px !important;\n}\n\nbody .pl-2 {\n  padding-left: 8px !important;\n}\n\nbody .py-2 {\n  padding-bottom: 8px !important;\n  padding-top: 8px !important;\n}\n\nbody .pl-3,\nbody .px-3 {\n  padding-left: 16px !important;\n}\n\nbody .px-3 {\n  padding-right: 16px !important;\n}\n\nbody .pl-4 {\n  padding-left: 24px !important;\n}\n\nbody .pl-5 {\n  padding-left: 32px !important;\n}\n\nbody .pl-6 {\n  padding-left: 40px !important;\n}\n\nbody .f6 {\n  font-size: 12px !important;\n}\n\nbody .lh-condensed {\n  line-height: 1.25 !important;\n}\n\nbody .text-bold {\n  font-weight: 600 !important;\n}\n\nbody:before {\n  content: \"\";\n  display: table;\n}\n\nbody:after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n\nbody > :first-child {\n  margin-top: 0 !important;\n}\n\nbody > :last-child {\n  margin-bottom: 0 !important;\n}\n\nbody a:not([href]) {\n  color: inherit;\n  text-decoration: none;\n}\n\nbody blockquote,\nbody dl,\nbody ol,\nbody p,\nbody pre,\nbody table,\nbody ul {\n  margin-bottom: 16px;\n  margin-top: 0;\n}\n\nbody hr {\n  background-color: #e1e4e8;\n  border: 0;\n  height: 0.25em;\n  margin: 24px 0;\n  padding: 0;\n}\n\nbody blockquote {\n  border-left: 0.25em solid #dfe2e5;\n  color: #6a737d;\n  padding: 0 1em;\n}\n\nbody blockquote > :first-child {\n  margin-top: 0;\n}\n\nbody blockquote > :last-child {\n  margin-bottom: 0;\n}\n\nbody kbd {\n  background-color: #fafbfc;\n  border: 1px solid #c6cbd1;\n  border-bottom-color: #959da5;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #959da5;\n  color: #444d56;\n  display: inline-block;\n  font-size: 11px;\n  line-height: 10px;\n  padding: 3px 5px;\n  vertical-align: middle;\n}\n\nbody h1,\nbody h2,\nbody h3,\nbody h4,\nbody h5,\nbody h6 {\n  font-weight: 600;\n  line-height: 1.25;\n  margin-bottom: 16px;\n  margin-top: 24px;\n}\n\nbody h1 {\n  font-size: 2em;\n}\n\nbody h1,\nbody h2 {\n  border-bottom: 1px solid #eaecef;\n  padding-bottom: 0.3em;\n}\n\nbody h2 {\n  font-size: 1.5em;\n}\n\nbody h3 {\n  font-size: 1.25em;\n}\n\nbody h4 {\n  font-size: 1em;\n}\n\nbody h5 {\n  font-size: 0.875em;\n}\n\nbody h6 {\n  color: #6a737d;\n  font-size: 0.85em;\n}\n\nbody ol,\nbody ul {\n  padding-left: 2em;\n}\n\nbody ol ol,\nbody ol ul,\nbody ul ol,\nbody ul ul {\n  margin-bottom: 0;\n  margin-top: 0;\n}\n\nbody li {\n  word-wrap: break-all;\n}\n\nbody li > p {\n  margin-top: 16px;\n}\n\nbody li + li {\n  margin-top: 0.25em;\n}\n\nbody dl {\n  padding: 0;\n}\n\nbody dl dt {\n  font-size: 1em;\n  font-style: italic;\n  font-weight: 600;\n  margin-top: 16px;\n  padding: 0;\n}\n\nbody dl dd {\n  margin-bottom: 16px;\n  padding: 0 16px;\n}\n\nbody table {\n  display: block;\n  overflow: auto;\n  width: 100%;\n}\n\nbody table th {\n  font-weight: 600;\n}\n\nbody table td,\nbody table th {\n  border: 1px solid #dfe2e5;\n  padding: 6px 13px;\n}\n\nbody table tr {\n  background-color: #fff;\n  border-top: 1px solid #c6cbd1;\n}\n\nbody table tr:nth-child(2n) {\n  background-color: #f6f8fa;\n}\n\nbody img {\n  background-color: #fff;\n  box-sizing: content-box;\n  max-width: 100%;\n}\n\nbody img[align=\"right\"] {\n  padding-left: 20px;\n}\n\nbody img[align=\"left\"] {\n  padding-right: 20px;\n}\n\nbody code {\n  background-color: rgba(27, 31, 35, 0.05);\n  border-radius: 3px;\n  font-size: 85%;\n  margin: 0;\n  padding: 0.2em 0.4em;\n}\n\nbody pre {\n  word-wrap: normal;\n}\n\nbody pre > code {\n  background: transparent;\n  border: 0;\n  font-size: 100%;\n  margin: 0;\n  padding: 0;\n  white-space: pre;\n  word-break: normal;\n}\n\nbody .highlight {\n  margin-bottom: 16px;\n}\n\nbody .highlight pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\nbody .highlight pre,\nbody pre {\n  background-color: #f6f8fa;\n  border-radius: 3px;\n  font-size: 85%;\n  line-height: 1.45;\n  overflow: auto;\n  padding: 16px;\n}\n\nbody pre code {\n  background-color: transparent;\n  border: 0;\n  display: inline;\n  line-height: inherit;\n  margin: 0;\n  max-width: auto;\n  overflow: visible;\n  padding: 0;\n  word-wrap: normal;\n}\n\nbody .commit-tease-sha {\n  color: #444d56;\n  display: inline-block;\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;\n  font-size: 90%;\n}\n\nbody .blob-wrapper {\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n\nbody .blob-wrapper-embedded {\n  max-height: 240px;\n  overflow-y: auto;\n}\n\nbody .blob-num {\n  -moz-user-select: none;\n  -ms-user-select: none;\n  -webkit-user-select: none;\n  color: rgba(27, 31, 35, 0.3);\n  cursor: pointer;\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;\n  font-size: 12px;\n  line-height: 20px;\n  min-width: 50px;\n  padding-left: 10px;\n  padding-right: 10px;\n  text-align: right;\n  user-select: none;\n  vertical-align: top;\n  white-space: nowrap;\n  width: 1%;\n}\n\nbody .blob-num:hover {\n  color: rgba(27, 31, 35, 0.6);\n}\n\nbody .blob-num:before {\n  content: attr(data-line-number);\n}\n\nbody .blob-code {\n  line-height: 20px;\n  padding-left: 10px;\n  padding-right: 10px;\n  position: relative;\n  vertical-align: top;\n}\n\nbody .blob-code-inner {\n  color: #24292e;\n  font-family: SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;\n  font-size: 12px;\n  overflow: visible;\n  white-space: pre;\n  word-wrap: normal;\n}\n\nbody .pl-token.active,\nbody .pl-token:hover {\n  background: #ffea7f;\n  cursor: pointer;\n}\n\nbody kbd {\n  background-color: #fafbfc;\n  border: 1px solid #d1d5da;\n  border-bottom-color: #c6cbd1;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 #c6cbd1;\n  color: #444d56;\n  display: inline-block;\n  font: 11px SFMono-Regular, Consolas, Liberation Mono, Menlo, Courier, monospace;\n  line-height: 10px;\n  padding: 3px 5px;\n  vertical-align: middle;\n}\n\nbody :checked + .radio-label {\n  border-color: #0366d6;\n  position: relative;\n  z-index: 1;\n}\n\nbody .tab-size[data-tab-size=\"1\"] {\n  -moz-tab-size: 1;\n  tab-size: 1;\n}\n\nbody .tab-size[data-tab-size=\"2\"] {\n  -moz-tab-size: 2;\n  tab-size: 2;\n}\n\nbody .tab-size[data-tab-size=\"3\"] {\n  -moz-tab-size: 3;\n  tab-size: 3;\n}\n\nbody .tab-size[data-tab-size=\"4\"] {\n  -moz-tab-size: 4;\n  tab-size: 4;\n}\n\nbody .tab-size[data-tab-size=\"5\"] {\n  -moz-tab-size: 5;\n  tab-size: 5;\n}\n\nbody .tab-size[data-tab-size=\"6\"] {\n  -moz-tab-size: 6;\n  tab-size: 6;\n}\n\nbody .tab-size[data-tab-size=\"7\"] {\n  -moz-tab-size: 7;\n  tab-size: 7;\n}\n\nbody .tab-size[data-tab-size=\"8\"] {\n  -moz-tab-size: 8;\n  tab-size: 8;\n}\n\nbody .tab-size[data-tab-size=\"9\"] {\n  -moz-tab-size: 9;\n  tab-size: 9;\n}\n\nbody .tab-size[data-tab-size=\"10\"] {\n  -moz-tab-size: 10;\n  tab-size: 10;\n}\n\nbody .tab-size[data-tab-size=\"11\"] {\n  -moz-tab-size: 11;\n  tab-size: 11;\n}\n\nbody .tab-size[data-tab-size=\"12\"] {\n  -moz-tab-size: 12;\n  tab-size: 12;\n}\n\nbody .task-list-item {\n  list-style-type: none;\n}\n\nbody .task-list-item + .task-list-item {\n  margin-top: 3px;\n}\n\nbody .task-list-item input {\n  margin: 0 0.2em 0.25em -1.6em;\n  vertical-align: middle;\n}\n\nbody hr {\n  border-bottom-color: #eee;\n}\n\nbody .pl-0 {\n  padding-left: 0 !important;\n}\n\nbody .pl-1 {\n  padding-left: 4px !important;\n}\n\nbody .pl-2 {\n  padding-left: 8px !important;\n}\n\nbody .pl-3 {\n  padding-left: 16px !important;\n}\n\nbody .pl-4 {\n  padding-left: 24px !important;\n}\n\nbody .pl-5 {\n  padding-left: 32px !important;\n}\n\nbody .pl-6 {\n  padding-left: 40px !important;\n}\n\nbody .pl-7 {\n  padding-left: 48px !important;\n}\n\nbody .pl-8 {\n  padding-left: 64px !important;\n}\n\nbody .pl-9 {\n  padding-left: 80px !important;\n}\n\nbody .pl-10 {\n  padding-left: 96px !important;\n}\n\nbody .pl-11 {\n  padding-left: 112px !important;\n}\n\nbody .pl-12 {\n  padding-left: 128px !important;\n}\n"
        }
      ]
    }
  ]
}