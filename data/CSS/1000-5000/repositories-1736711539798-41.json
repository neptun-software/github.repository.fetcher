{
  "metadata": {
    "timestamp": 1736711539798,
    "page": 41,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nakov/Practical-Cryptography-for-Developers-Book",
      "stars": 3548,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitbook",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.34375,
          "content": "# Node rules:\n## Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n## Dependency directory\n## Commenting this out is preferred by some people, see\n## https://docs.npmjs.com/misc/faq#should-i-check-my-node_modules-folder-into-git\nnode_modules\n\n# Book build output\n_book\n\n# eBook build output\n*.epub\n*.mobi\n*.pdf"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 Svetlin Nakov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.806640625,
          "content": "# Welcome\n\n> **Warning**: this book is **not finished**! I am still working on some of the chapters. Once it is completed, I will publish it as PDF and EPUB. Be patient.\n\n[![Practical Cryptography for Developers - Free Book by Svetlin Nakov - front cover](.gitbook/assets/practical-cryptography-for-developers-book-nakov-front-cover.png)](https://cryptobook.nakov.com)\n\nA modern **practical book** about **cryptography for developers** with code examples, covering core concepts like: **hashes** (like SHA-3 and BLAKE2), **MAC codes** (like HMAC and GMAC), **key derivation functions** (like Scrypt, Argon2), **key agreement protocols** (like DHKE, ECDH), **symmetric ciphers** (like AES and ChaCha20, cipher block modes, authenticated encryption, AEAD, AES-GCM, ChaCha20-Poly1305), **asymmetric ciphers** and **public-key cryptosystems** (RSA, ECC, ECIES), **elliptic curve cryptography** (ECC, secp256k1, curve25519), **digital signatures** (ECDSA and EdDSA), **secure random numbers** (PRNG, CSRNG) and **quantum-safe cryptography**, along with crypto **libraries** and developer tools, with a lots of **code examples** in Python and other languages.\n\nAuthor: **Svetlin Nakov**, PhD - [https://nakov.com](https://nakov.com)\n\nContributors: Milen Stefanov, Marina Shideroff\n\nSponsor: **SoftUni** (Software University) - [https://softuni.org](https://softuni.org)\n\nISBN: **978-619-00-0870-5** (9786190008705)\n\nThis book is free and open-source, published under the [**MIT license**](https://opensource.org/licenses/MIT).\n\nOfficial Web site: [https://cryptobook.nakov.com](https://cryptobook.nakov.com)\n\nOfficial **GitHub** repo: [https://github.com/nakov/practical-cryptography-for-developers-book](https://github.com/nakov/practical-cryptography-for-developers-book).\n\nSofia, November 2018\n\nTags: cryptography, free, book, Nakov, Svetlin Nakov, hashes, hash function, SHA-256, SHA3, BLAKE2, RIPEMD, MAC, message authentication code, HMAC, KDF, key derivation, key derivation function, PBKDF2, Scrypt, Bcrypt, Argon2, password hashing, random generator, pseudo-random numbers, CSPRNG, secure random generator, key exchange, key agreement, Diffie-Hellman, DHKE, ECDH, symmetric ciphers, asymmetric ciphers, public key cryptosystems, symmetric cryptography, AES, Rijndael, cipher block mode, AES-CTR, AES-GCM, ChaCha20-Poly1305, authenticated encryption, encryption scheme, public key cryptography, RSA, ECC, elliptic curves, secp256k1, curve25519, EC points, EC domain parameters, ECDH key agreement, asymmetric encryption scheme, hybrid encryption, ECIES, digital signature, RSA signature, DSA, ECDSA, EdDSA, ElGammal signature, Schnorr signature, quantum-safe cryptography, digital certificates, TLS, OAuth, multi-factor authentication, crypto libraries, Python cryptography, JavaScript cryptography, C# cryptography, Java cryptography, C++ cryptography, PHP cryptography.\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 6.0224609375,
          "content": "# Table of contents\n\n* [Welcome](README.md)\n* [Preface](preface.md)\n* [Cryptography - Overview](cryptography-overview.md)\n* [Hash Functions](cryptographic-hash-functions/README.md)\n  * [Crypto Hashes and Collisions](cryptographic-hash-functions/crypto-hashes-and-collisions.md)\n  * [Hash Functions: Applications](cryptographic-hash-functions/hash-functions-applications.md)\n  * [Secure Hash Algorithms](cryptographic-hash-functions/secure-hash-algorithms.md)\n  * [Hash Functions - Examples](cryptographic-hash-functions/hash-functions-examples.md)\n  * [Exercises: Calculate Hashes](cryptographic-hash-functions/exercises-calculate-hashes.md)\n  * [Proof-of-Work Hash Functions](cryptographic-hash-functions/proof-of-work-hash-functions.md)\n* [MAC and Key Derivation](mac-and-key-derivation/README.md)\n  * [HMAC and Key Derivation](mac-and-key-derivation/hmac-and-key-derivation.md)\n  * [HMAC Calculation - Examples](mac-and-key-derivation/hmac-calculation-examples.md)\n  * [Exercises: Calculate HMAC](mac-and-key-derivation/exercises-calculate-hmac.md)\n  * [KDF: Deriving Key from Password](mac-and-key-derivation/kdf-deriving-key-from-password.md)\n  * [PBKDF2](mac-and-key-derivation/pbkdf2.md)\n  * [Modern Key Derivation Functions](mac-and-key-derivation/modern-key-derivation-functions.md)\n  * [Scrypt](mac-and-key-derivation/scrypt.md)\n  * [Bcrypt](mac-and-key-derivation/bcrypt.md)\n  * [Linux crypt\\(\\)](mac-and-key-derivation/linux-crypt.md)\n  * [Argon2](mac-and-key-derivation/argon2.md)\n  * [Secure Password Storage](mac-and-key-derivation/password-encryption.md)\n  * [Exercises: Password Encryption](mac-and-key-derivation/exercises-password-encryption.md)\n* [Secure Random Generators](secure-random-generators/README.md)\n  * [Pseudo-Random Numbers - Examples](secure-random-generators/pseudo-random-numbers-examples.md)\n  * [Secure Random Generators \\(CSPRNG\\)](secure-random-generators/secure-random-generators-csprng.md)\n  * [Exercises: Pseudo-Random Generator](secure-random-generators/exercises-pseudo-random-generator.md)\n* [Key Exchange and DHKE](key-exchange/README.md)\n  * [Diffie–Hellman Key Exchange](key-exchange/diffie-hellman-key-exchange.md)\n  * [DHKE - Examples](key-exchange/dhke-examples.md)\n  * [Exercises: DHKE Key Exchange](key-exchange/exercises-dhke-key-exchange.md)\n* [Encryption: Symmetric and Asymmetric](encryption-symmetric-and-asymmetric.md)\n* [Symmetric Key Ciphers](symmetric-key-ciphers/README.md)\n  * [Cipher Block Modes](symmetric-key-ciphers/cipher-block-modes.md)\n  * [Popular Symmetric Algorithms](symmetric-key-ciphers/popular-symmetric-algorithms.md)\n  * [The AES Cipher - Concepts](symmetric-key-ciphers/aes-cipher-concepts.md)\n  * [AES Encrypt / Decrypt - Examples](symmetric-key-ciphers/aes-encrypt-decrypt-examples.md)\n  * [Ethereum Wallet Encryption](symmetric-key-ciphers/ethereum-wallet-encryption.md)\n  * [Exercises: AES Encrypt / Decrypt](symmetric-key-ciphers/exercises-aes-encrypt-decrypt.md)\n  * [ChaCha20-Poly1305](symmetric-key-ciphers/chacha20-poly1305.md)\n  * [Exercises: ChaCha20-Poly1305](symmetric-key-ciphers/exercises-chacha20-poly1305.md)\n* [Asymmetric Key Ciphers](asymmetric-key-ciphers/README.md)\n  * [The RSA Cryptosystem - Concepts](asymmetric-key-ciphers/the-rsa-cryptosystem-concepts.md)\n  * [RSA Encrypt / Decrypt - Examples](asymmetric-key-ciphers/rsa-encrypt-decrypt-examples.md)\n  * [Exercises: RSA Encrypt / Decrypt](asymmetric-key-ciphers/exercises-rsa-encrypt-decrypt.md)\n  * [Elliptic Curve Cryptography \\(ECC\\)](asymmetric-key-ciphers/elliptic-curve-cryptography-ecc.md)\n  * [ECDH Key Exchange](asymmetric-key-ciphers/ecdh-key-exchange.md)\n  * [ECDH Key Exchange - Examples](asymmetric-key-ciphers/ecdh-key-exchange-examples.md)\n  * [Exercises: ECDH Key Exchange](asymmetric-key-ciphers/exercises-ecdh-key-exchange.md)\n  * [ECC Encryption / Decryption](asymmetric-key-ciphers/ecc-encryption-decryption.md)\n  * [ECIES Hybrid Encryption Scheme](asymmetric-key-ciphers/ecies-public-key-encryption.md)\n  * [ECIES Encryption - Example](asymmetric-key-ciphers/ecies-example.md)\n  * [Exercises: ECIES Encrypt / Decrypt](asymmetric-key-ciphers/exercises-ecies-encrypt-decrypt.md)\n* [Digital Signatures](digital-signatures/README.md)\n  * [RSA Signatures](digital-signatures/rsa-signatures.md)\n  * [RSA: Sign / Verify - Examples](digital-signatures/rsa-sign-verify-examples.md)\n  * [Exercises: RSA Sign and Verify](digital-signatures/exercises-rsa-sign-and-verify.md)\n  * [ECDSA: Elliptic Curve Signatures](digital-signatures/ecdsa-sign-verify-messages.md)\n  * [ECDSA: Sign / Verify - Examples](digital-signatures/ecdsa-sign-verify-examples.md)\n  * [Exercises: ECDSA Sign and Verify](digital-signatures/exercises-secp256k1-sign-verify.md)\n  * [EdDSA and Ed25519](digital-signatures/eddsa-and-ed25519.md)\n  * [EdDSA: Sign / Verify - Examples](digital-signatures/eddsa-sign-verify-examples.md)\n  * [Exercises: EdDSA Sign and Verify](digital-signatures/exercises-eddsa-sign-and-verify.md)\n* [Quantum-Safe Cryptography](quantum-safe-cryptography/README.md)\n  * [Quantum-Safe Signatures - Example](quantum-safe-cryptography/quantum-safe-signatures-example.md)\n  * [Quantum-Safe Key Exchange - Example](quantum-safe-cryptography/quantum-safe-key-exchange-example.md)\n  * [Quantum-Safe Asymmetric Encryption - Example](quantum-safe-cryptography/quantum-safe-asymmetric-encryption-example.md)\n* [More Cryptographic Concepts](more-cryptographic-concepts/README.md)\n  * [Digital Certificates - Example](more-cryptographic-concepts/digital-certificates-example.md)\n  * [TLS - Example](more-cryptographic-concepts/tls-example.md)\n  * [One-Time Passwords \\(OTP\\) - Example](more-cryptographic-concepts/one-time-passwords-otp-example.md)\n* [Crypto Libraries for Developers](crypto-libraries-for-developers/README.md)\n  * [JavaScript Crypto Libraries](crypto-libraries-for-developers/javascript-crypto-libraries.md)\n  * [Python Crypto Libraries](crypto-libraries-for-developers/python-crypto-libraries.md)\n  * [C\\# Crypto Libraries](crypto-libraries-for-developers/c-crypto-libraries.md)\n  * [Java Crypto Libraries](crypto-libraries-for-developers/java-crypto-libraries.md)\n* [Conclusion](conclusion.md)\n\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "asymmetric-key-ciphers",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.json",
          "type": "blob",
          "size": 0.7802734375,
          "content": "{\n    \"plugins\": [\n        \"ga\",\n        \"meta\",\n        \"anchors\",\n        \"expandable-chapters-small\",\n        \"katex\",\n        \"sitemap\",\n        \"scripts\"\n    ],\n    \"pluginsConfig\": {\n        \"ga\": {\n            \"token\": \"UA-11309924-27\"\n        },\n        \"meta-single\": {\n            \"name\": \"google-site-verification\",\n            \"content\": \"66TqznOaEKbY6hOL9vg_iv28RqZNGQY7xKSuB639n-E\"\n        },\n        \"sitemap\": {\n            \"hostname\": \"https://cryptobook.nakov.com/\"\n        },\n        \"scripts\": {\n            \"files\": [\n                \"./assets/js/repl.it-code-runner.js\"\n            ]\n        }\n    },\n    \"pdf\": {\n        \"paperSize\": \"a4\",\n        \"margin\": { \n            \"top\": 48,\n            \"bottom\": 48,\n            \"left\": 36,\n            \"right\": 36\n        }\n    }\n}\n"
        },
        {
          "name": "conclusion.md",
          "type": "blob",
          "size": 0.017578125,
          "content": "# Conclusion\n\n...\n"
        },
        {
          "name": "cover.jpg",
          "type": "blob",
          "size": 335.3955078125,
          "content": null
        },
        {
          "name": "crypto-libraries-for-developers",
          "type": "tree",
          "content": null
        },
        {
          "name": "cryptographic-hash-functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "cryptography-overview.md",
          "type": "blob",
          "size": 6.75,
          "content": "# Cryptography - Overview\n\n## Overview of Modern Cryptography\n\n**Cryptography** has evolved from its first attempts (thousands years ago), through the first successful cryptographic algorithms for developers (like the now retired MD5 and DES) to modern crypto algorithms (like SHA-3, Argon2 and ChaCha20).\n\nLet's first introduce very shortly the basic **cryptography concepts**, that developers should know, like cryptographic **hash functions** (SHA-256, SHA3, RIPEMD and others), **HMAC** (hashed message authentication code), password to **key derivation** functions (like **Scrypt**), the Diffie-Hellman key-exchange protocol, **symmetric key** encryption schemes (like the **AES** cipher with CBC and CTR block modes) and **asymmetric key** encryption schemes with public and private keys (like the **RSA** cipher and elliptic curves-based cryptography / **ECC**, the secp256k1 curve and the Ed25519 cryptosystem), **digital signatures** and **ECDSA**, as well as the concept of **entropy** and secure **random number** generation and **quantum-safe cryptography**.\n\n### Encrypt / Decrypt Message - Live Demo\n\nAs a simple **example**, we shall demonstrate message **encryption** + **decryption** using the **AES** encryption algorithm. Play with this online tool: [https://aesencryption.net](https://aesencryption.net).\n\n![](.gitbook/assets/encrypt-decrypt-live-demo.jpg)\n\nWe shall learn later that behind this simple **AES encryption**, there are **many algorithms and settings** hidden inside, like password to key-derivation function and its parameters, block cipher mode, cipher initial vector, message authentication code and others.\n\n## What is Cryptography?\n\n**Cryptography** is the science of providing **security** and **protection** of information. It is used everywhere in our digital world: when you open a Web site, send an email or connect to the WiFi network. That's why developers should have **at least basic understanding of cryptography** and how to use crypto algorithms and crypto libraries, to understand hashing, symmetric and asymmetric ciphers and encryption schemes, as well as digital signatures and the cryptosystems and algorithms behind them.\n\n### Encryption and Keys\n\nCryptography deals with **storing and transmitting data in a secure way**, such that only those, for whom it is intended, can read and process it. This may involve **encrypting and decrypting data** using symmetric or asymmetric encryption schemes, where one or more **keys** are used to transform data from plain to encrypted form and back.\n\n**Symmetric encryption** (like AES, Twofish and ChaCha20) uses the same key to encrypt and decrypt messages, while **asymmetric encryption** uses a **public-key cryptosystem** (like RSA or ECC) and a key-pair: public key (encryption key) and corresponding private key (decryption key). Encryption algorithms are often combined in encryption schemes (like AES-256-CTR-HMAC-SHA-256, ChaCha20-Poly1305 or ECIES-secp256k1-AES-128-GCM).\n\nCryptography deals with **keys** (large secret numbers) and in many scenarios these **keys are derived** from numbers, passwords or passphrases using **key derivation algorithms** (like PBKDF2 and Scrypt).\n\n### Digital Signatures and Message Authentication\n\nCryptography provides means of **digital signing of messages** which guarantee message authenticity, integrity and non-repudiation. Most digital signature algorithms (like DSA, ECDSA and EdDSA) use **asymmetric key pair** (private and public key): the message is **signed** by the private key and the signature is **verified** by the corresponding public key. In the bank systems **digital signatures** are used to sign and approve payments. In blockchain signed transactions allow users to transfer a blockchain asset from one address to another.\n\nCryptography deals with **message authentication** algorithms (like HMAC) and message authentication codes (MAC codes) to prove message authenticity, integrity and authorship. Authentication is used side by side with encryption, to ensure secure communication.\n\n### Secure Random Numbers\n\nCryptography uses **random numbers** and deals with **entropy** (unpredictable randomness) and secure generation of random numbers (e.g. using CSPRNG). **Secure random numbers** are unpredictable by nature and developers should care about them, because broken random generator means compromised or hacked system or app.\n\n### Key Exchange\n\nCryptography defines **key-exchange algorithms** (like Diffie-Hellman key exchange and ECDH) and **key establishment schemes**, used to securely establish encryption **keys** between two parties that intend to transmit messages securely using **encryption**. Such algorithms are performed typically when a new secure connection between two parties is established, e.g. when you open a modern Web site or connect to the WiFi network.\n\n### Cryptographic Hashes and Password Hashing\n\nCryptography provides **cryptographic hash functions** (like SHA-3 and BLAKE2), which transform messages to **message digest** (hash of fixed length), which cannot be reversed back to the original message and almost uniquely identifies the input. In **blockchain** systems, for example, hashes are used to generate blockchain addresses, transaction ID and in many other algorithms and protocols. In **Git** cryptographic hashes are used for generating unique ID for files and commits.\n\n**Password hashing** and password to **key derivation functions** (like Scrypt and Argon2) protect user passwords and password encrypted documents and data by securely deriving a hash (or key) from a text-based passwords, injecting random parameters (salt) and using a lot of iterations and computing resources to make password cracking slow.\n\n### Confusion and Diffusion in Cryptography\n\nIn cryptography the hashing, encryption algorithms and random generators follow the Shannon's principles of[ confusion and diffusion](https://en.wikipedia.org/wiki/Confusion\\_and\\_diffusion). **Confusion** means that each bit in the output form a cipher should depend on several parts of the key and input data and thus direct mapping cannot be established. **Diffusion** means that changing one bit in the input should change approximately half of the bits in the output. These principles are incorporated in most hash functions, MAC algorithms, random number generators, symmetric and asymmetric ciphers.\n\n### Cryptographic Libraries\n\nDevelopers should know the modern **cryptographic libraries** for their programming language and platform and how to use them. Developing with cryptography requires **understanding of the crypto-concepts**. Copy / pasting code from Internet or following an example from a blog may lead to insecure design and weak security. Cryptographic libraries are very useful, but you should **understand the concepts** first, then choose appropriate combination of algorithms and adjust carefully their parameters.\n"
        },
        {
          "name": "digital-signatures",
          "type": "tree",
          "content": null
        },
        {
          "name": "encryption-symmetric-and-asymmetric.md",
          "type": "blob",
          "size": 17.1591796875,
          "content": "# Encryption: Symmetric and Asymmetric\n\nIn cryptography two major types of encryption schemes are widely used: **symmetric encryption** (where a single **secret key** is used to encrypt and decrypt data) and **asymmetric encryption** (where a public key cryptosystem is used and encryption and decryption is done using a **pair of public and corresponding private key**). Let's explain these fundamental crypto-concepts in details.\n\n## Symmetric Encryption - Concepts and Algorithms\n\n**Symmetric encryption** schemes use **the same symmetric key** (or password) to **encrypt** data and **decrypt** the encrypted data back to its original form:\n\n![](.gitbook/assets/symmetric-encryption.png)\n\nSymmetric encryption usually combines several crypto algorithms into an **symmetric encryption scheme**, e.g. AES-256-CTR-HMAC-SHA256. The **encryption scheme** (cipher construction) may include: password to **key derivation** algorithm (with certain parameters) + **symmetric cipher** algorithm (with certain parameters) + **cipher block mode** algorithm + **message authentication** (MAC) algorithm. This means that **the above shown diagram is simplified** and does not fully represent the process.\n\n### Secret Keys\n\nThe **secret key** used to **cipher** (encrypt) and **decipher** (decrypt) data is typically of size 128, 192 or 256 bits and is sometimes referred as \"_**encryption key**_\" or \"_**shared key**_\", because both sending and receiving parties should know it.\n\nMost applications use a [**password-to-key-derivation**](https://github.com/svetlin-nakov/practical-cryptography-for-developers/tree/34666e7576d7427e08bf3940a69214b0cda94676/content/part-1-blockchain-networks-concepts/blockchain-cryptography/blockchain-cryptography-overview/hmac-and-key-derivation.html) scheme to extract a **secret key** from certain **password**, because users tend to remember passwords easier than binary data. Additionally, **message authentication** is often incorporated along with the encryption to provide **integrity** and **authenticity** (this encryption approach is known as \"[**authenticated encryption**](https://en.wikipedia.org/wiki/Authenticated\\_encryption)\").\n\nHow does a **private key** look like? Let's start from a simple example of **256-bit secret key**, encoded as [**hex string**](https://en.wikipedia.org/wiki/Hexadecimal):\n\n```\n02c324648931b89e3e8a0fc42c96e8e3be2e42812986573a40d46563bceaf75110\n```\n\nIn many systems (e.g. public blockchains, PGP, OpenSSL and others) secret keys are encoded as [**base58**](https://en.wikipedia.org/wiki/Base58) or [**base64**](https://en.wikipedia.org/wiki/Base64) for shorter string representation.\n\nFor example, the above key looks like this in **base58**:\n\n```\npbPRqYDxnKZfs8j4KKiqYmx6nzipAjTJf1oCD1WKgy99\n```\n\nThe same key looks like this in **base64**:\n\n```\nAsMkZIkxuJ4+ig/ELJbo474uQoEphlc6QNRlY7zq91EQ\n```\n\nIn **decimal** system, the above key is the following integer number:\n\n```\n319849484316084980661994213716306415989897600164422912728298459349458028548368\n```\n\n### Modern Symmetric Encryption Algorithms\n\nWidely used in modern cryptography **symmetric encryption algorithms** (ciphers) are: [**AES**](https://en.wikipedia.org/wiki/Advanced\\_Encryption\\_Standard) (AES-128, AES-192, AES-256), [**ChaCha20**](https://legacy.gitbook.com/book/svetlin-nakov/practical-blockchain-for-developers-the-big-book/edit), [**Twofish**](https://en.wikipedia.org/wiki/Twofish), [**IDEA**](https://en.wikipedia.org/wiki/International\\_Data\\_Encryption\\_Algorithm), [**Serpent**](https://en.wikipedia.org/wiki/Serpent\\_\\(cipher\\)), [**Camelia**](https://en.wikipedia.org/wiki/Camellia\\_\\(cipher\\)) and others. Most of them are **block ciphers** (encrypt data by blocks of fixed size, e.g. 128 bits), while others are **stream ciphers** (encrypt data byte by byte as a stream). Block ciphers can be turned into stream ciphers by using a technique called \"**cipher block mode**\".\n\nWe shall give more details and code examples using the **AES** and **ChaCha20** algorithms a bit later.\n\n### Symmetric Encryption - Online Demo\n\nIn order to better understand the idea behind the symmetric encryption, you can play with some **online symmetric encryption tool** to encrypt and decrypt a sample message by sample secret key (or password). You can play a bit with this site: [**https://aesencryption.net**](https://aesencryption.net).\n\n![](.gitbook/assets/aesencryption.net.png)\n\nIt demonstrates how we can encrypt and decrypt messages, using the **AES cipher** (with certain settings, more precisely AES-128-CBC) and certain password-to-key-derivation function. In the above example if we encrypt the text \"_**secret msg**_\" by the password \"_**p@ss**_\", we will get the [base64-encoded](https://en.wikipedia.org/wiki/Base64) binary data \"_**jVJwOBmH+qMqHdg22KwMyg==**_\" as output. After decryption with the same secret key we get back the original text \"_**secret msg**_\".\n\nNote that the above encrypted text is dependent to many algorithm parameters and settings, so if you encrypt the same at another \"_AES live example_\" Web site, the result most likely will be different.\n\nAlso note that the above mentioned Web site uses bad practices, old algorithms and weak cipher settings, so don't follow the code examples there.\n\n## Public Key Cryptography - Concepts\n\nBefore introducing the **asymmetric key encryption** schemes and algorithms, we should first understand the concept of **public key cryptography** (asymmetric cryptography).\n\nThe [**public key cryptography**](https://en.wikipedia.org/wiki/Public-key\\_cryptography) uses a different key to encrypt and decrypt data (or to sign and verify messages). Keys always come as **public + private key pairs**. **Asymmetric cryptography** deals with **encrypting** and **decrypting** messages using a public / private key, **signing** messages, **verifying** signatures and securely **exchanging keys**.\n\nPopular **public-key cryptosystems** (asymmetric crypto algorithms) like **RSA** (Rivest–Shamir–Adleman), **ECC** (elliptic curve cryptography), **Diffie-Hellman**, **ECDH**, **ECDSA** and **EdDSA**, are widely used in the modern cryptography and we shall demonstrate most of them in practice with code examples.\n\n### Public Key Encryption / Decryption\n\n**Asymmetric encryption schemes** use a pair of cryptographically related **public** and **private keys** to **encrypt** the data (by the public key) and **decrypt** the encrypted data back to its original forms (by the private key). Data **encrypted by a public key** is **decrypted** by the corresponding **private key**:\n\n![](.gitbook/assets/public-key-cryptography-encrypt-decrypt.png)\n\nThe encrypted data, obtained as result of encryption is called \"**ciphertext**\". The ciphertext is a binary sequence, unreadable by humans and by design cannot be decrypted without the decryption key.\n\n![](.gitbook/assets/asymmetric-encryption-diagram.png)\n\nNote that **the above shown diagram is highly simplified** and does not fully represent the asymmetric encryption / decryption process. Typically, public-key cryptosystems can **encrypt messages of limited length** only and are slower than symmetric ciphers. For encrypting longer messages (e.g. PDF documents) usually a **public-key encryption scheme** (also known as **hybrid encryption scheme**) is used, which combines **symmetric** and **asymmetric encryption** like this:\n\n* For the **encryption** a random symmetric key `sk` is generated, the message is symmetrically encrypted by `sk`, then `sk` is asymmetrically encrypted using the recipient's public key.\n* For **decryption**, first the `sk` key is asymmetrically decrypted using the recipient's private key, then the ciphertext is decrypted symmetrically using `sk`.\n\nThe above process is known as [**key encapsulation mechanism (KEM)**](https://en.wikipedia.org/wiki/Key\\_encapsulation): encapsulate an asymmetrically-encrypted random (ephemeral) symmetric key and use symmetric algorithm for the data encryption.\n\nPublic key encryption can work also in the opposite scenario: **encrypt data by a private key and decrypt it by the public key**. Thus someone can prove that he is owner of certain private key, while revealing only its corresponding public key. This approach is used by some digital signature schemes.\n\n### Signatures: Asymmetric Signing / Verification\n\nIn the context of [**digital signatures**](https://en.wikipedia.org/wiki/Digital\\_signature), a message **signed by a private key** (digital signature) is later **verified** by the corresponding **public key**.\n\n![](.gitbook/assets/public-key-cryptography-sign-verify.png)\n\n[**Digital signatures**](digital-signatures/) will be explained in more details later, but in short: a message can be **signed** by certain **private key** and the obtained **signature** can be later **verified** by the corresponding **public key**. A **signed message** cannot be altered after signing. A message signature proves that certain message (e.g. blockchain transaction) is created by the owner of certain public key. Digital signatures provide message **authentication**, message **integrity** and **non-repudiation**.\n\nDigital signatures are widely used in the **finance industry** for authorizing payments. In **operating systems** OS components and device drivers are usually digitally signed to avoid injecting insecure code, trojans or viruses in the OS. In **blockchain systems**, transactions are typically signed by the owner of certain blockchain address (which corresponds to certain public key and has corresponding private key). So **a signed blockchain transaction holds a proof of authorship**: it is guaranteed mathematically that the signature is created by the holder of certain blockchain address and the transaction was not modified after the signing. This works perfectly for the scenario of **digital payments** and digital signing of documents and contracts.\n\n### Key Pairs\n\nThe **public key cryptography** uses a **pair of keys**: **public key** + **private key**. These keys are mathematically connected and are used together as **pair**.\n\nIn some public key cryptosystems (like the Elliptic-Curve Cryptography - **ECC**), the public key can be calculated from the private key. In other cryptosystems (like **RSA**), the public key and the private key are generated together but cannot be directly calculated from each other.\n\nUsually, a **public / private key pair** is randomly generated in a secure environment (e.g. in a hardware wallet) and the public key is revealed, while the private key is securely stored in a crypto-wallet and is protected by a password or by multi-factor authentication.\n\n**Example** of 256-bit private key and its corresponding 256-bit public key (based on **secp256k1** curve):\n\n```\nprivKey: 648fc1fa828c7f185d825c04a5b21af9e473b867eeee1acea4dbab938433e158\npubKey: 02c324648931b89e3e8a0fc42c96e8e3be2e42812986573a40d46563bceaf75110\n```\n\n### Private Keys\n\nMessage **encryption** and **signing** is done by a **private key**. The private keys are always kept **secret** by their owner, just like passwords. In the server infrastructure, private key usually stay in an encrypted and protected **keystore**. In the blockchain systems the private keys usually stay in specific software or hardware apps or devices called \"**crypto wallets**\", which store securely a set of private keys.\n\n**Example** of 256-bit private key:\n\n```\n648fc1fa828c7f185d825c04a5b21af9e473b867eeee1acea4dbab938433e158\n```\n\n### Public Keys\n\nMessage **decryption** and **signature verification** is done by the **public key**. Public keys are by design public information (not a secret). It is mathematically infeasible to calculate the private key from its corresponding public key.\n\nIn many systems the **public key** is encapsulated in a **digital certificate**, which binds certain identity (e.g. person or Internet domain name) to certain public key. In blockchain systems public keys are usually published as parts of the blockchain transactions to help identify who has signed each transaction. In systems like PGP and SSH the public key is downloaded from the server once (after manual user verification) and is remembered for further use.\n\n**Example** of 256-bit public key:\n\n```\n02c324648931b89e3e8a0fc42c96e8e3be2e42812986573a40d46563bceaf75110\n```\n\nIn most blockchain systems the **blockchain address** is derived from the public key (by hashing and other transformations), so if you have someone's public key, you are assumed to have his blockchain address as well.\n\nA certain **public key** can be connected to certain **person** or **organization** or is used anonymously. You can never know who is the owner of the private key, corresponding to certain public key, unless you have additional proof, e.g. a [**digital certificate**](https://en.wikipedia.org/wiki/Public\\_key\\_certificate).\n\n## Popular Public Key Cryptosystems\n\n**Public key cryptosystems** provide mathematical framework and algorithms to generate public + private key pairs, to **sign**, **verify**, **encrypt** and **decrypt** messages and **exchange keys**, in a cryptographically secure way.\n\nWell-known public-key cryptosystems are: [**RSA**](https://en.wikipedia.org/wiki/RSA\\_\\(cryptosystem\\)), [**ECC**](https://en.wikipedia.org/wiki/Elliptic-curve\\_cryptography) and [**ElGamal**](https://en.wikipedia.org/wiki/ElGamal\\_encryption). Many **crypto algorithms** are based on the primitives from these cryptosystems like **RSA sign**, **RSA encrypt / decrypt**, **ECDH** key exchange and **ECDSA** and **EdDSA** signatures.\n\n### The RSA Cryptosystem\n\nThe [**RSA public-key cryptosystem**](https://en.wikipedia.org/wiki/RSA\\_\\(cryptosystem\\)) is based on the math of **modular exponentiations** (numbers raised to a power by modulus) and some additional assumptions, together with the computational difficulty of the [**integer factorization problem**](https://en.wikipedia.org/wiki/RSA\\_problem). We shall discuss it later in details, along with examples.\n\n### The ECC Cryptosystem\n\nThe [**elliptic-curve cryptography (ECC) public-key cryptosystem**](https://en.wikipedia.org/wiki/Elliptic-curve\\_cryptography) is based on the math of the on the algebraic structure of the **elliptic curves** over finite fields and the difficulty of the [**elliptic curve discrete logarithm problem (ECDLP)**](https://en.wikipedia.org/wiki/Elliptic-curve\\_cryptography#Rationale). The **ECC** usually comes together with the [**ECDSA** algorithm](https://en.wikipedia.org/wiki/Elliptic\\_Curve\\_Digital\\_Signature\\_Algorithm) (elliptic-curve digital signature algorithm). We shall discuss ECC and ECDSA in details, along with examples.\n\n### ECC is Recommended in the General Case\n\n**ECC uses smaller keys**, ciphertexts and signatures than RSA and is recommended for most applications. It is mathematically proven that a **3072-bit RSA key** has similar cryptographic strength to a **256-bit ECC key**. Key generation is in ECC is significantly faster than with RSA.\n\nDue to the above reasons most blockchain networks (like Bitcoin and Ethereum) use elliptic-curve-based cryptography (ECC) to secure the transactions.\n\nNote that both **RSA** and **ECC** cryptosystems are **not quantum-safe**, which means that if someone has enough powerful quantum computer, he will be able to derive the private key from given public key in just few seconds.\n\n## Asymmetric Encryption in Practice\n\n**Asymmetric encryption** works for **small messages** only (limited by the public / private key length). To encrypt larger messages [**key encapsulation mechanisms**](https://en.wikipedia.org/wiki/Key\\_encapsulation) or other techniques can be used, which encrypt asymmetrically a random secret key, then use it to symmetrically encrypt the larger messages. In practice, modern **asymmetric encryption schemes** involve using a symmetric encryption algorithm together with a public-key cryptosystem, key encapsulation and message authentication.\n\nPopular **asymmetric encryption schemes** are: [**RSA-OAEP**](https://en.wikipedia.org/wiki/Optimal\\_asymmetric\\_encryption\\_padding) (based on RSA and OAEP padding), [**RSAES-PKCS1-v1\\_5**](https://tools.ietf.org/html/rfc3447#section-7.2) (based on RSA and PKCS#1 v1.5 padding), [**DLIES**](https://en.wikipedia.org/wiki/Integrated\\_Encryption\\_Scheme) (based on discrete logarithms and symmetric encryption) and [**ECIES**](https://en.wikipedia.org/wiki/Integrated\\_Encryption\\_Scheme) (based on elliptic curve cryptography and symmetric encryption).\n\n### Asymmetric Encryption - Online Demo\n\nIn order to better understand the idea behind the **asymmetric encryption**, you can play with some online public key encryption tool to encrypt / decrypt a sample message by sample RSA private / public key. You can play a bit with this site: [http://travistidwell.com/jsencrypt/demo/](http://travistidwell.com/jsencrypt/demo/).\n\n![](.gitbook/assets/asymmetric-encryption-online-demo-jsencrypt.png)\n\nIn the above online demo you can **generate RSA public / private key pairs** and **encrypt** / **decrypt** text messages. Note that **the message size is limited** by the key length, so you can't encrypt long text. You will get an error if you try. Internally, the above Web site uses the **RSAES-PKCS1-v1\\_5** public key encryption scheme as specified in [RFC3447](https://tools.ietf.org/html/rfc3447).\n\nWe shall discuss the **RSA** and **ECC** cryptosystems in details in the next few chapters. Now, it is important to learn that **symmetric and asymmetric cryptosystems work differently** and are used in different scenarios.\n"
        },
        {
          "name": "key-agreement-protocols.md",
          "type": "blob",
          "size": 0.064453125,
          "content": "# Key Agreement Protocols and Diffie-Hellman Key Exchange\n\n...\n\n\n\n"
        },
        {
          "name": "key-exchange",
          "type": "tree",
          "content": null
        },
        {
          "name": "mac-and-key-derivation",
          "type": "tree",
          "content": null
        },
        {
          "name": "more-cryptographic-concepts",
          "type": "tree",
          "content": null
        },
        {
          "name": "preface.md",
          "type": "blob",
          "size": 26.4228515625,
          "content": "# Preface\n\nYou are a **software developer**? And sometimes you need to use **cryptography** in your daily job, like hashes, encryption or digital signatures? And you think cryptography is complex and full of math and it is for nerds only? No, this is not true, every developer can learn **how to use cryptographic algorithms**. This book will show you how: with code examples and hands-on coding experience, with less math and more practice.\n\nIt is not required to be а strong mathematician or even not strong mathematician to **understand the cryptographic concepts from the developer perspective**. This book will teach you the basics of **applied cryptography** in almost free of math style, following a step-by-step approach with lots of **code examples** and **practical exercises** (hands-on experience), just like when you learn Web development, databases or mobile apps. Yes, if you can learn Web development or RESTful services, you can learn the practical aspect of cryptography as well. It is just like learning a new API or a new Web development framework: you learn a combination of **concepts** + **APIs** (crypto algorithms implemented in crypto libraries) + **tools** + **best practices** how to use these APIs and tools.\n\nFrom this book you will learn **how to use cryptographic algorithms and cryptosystems** like hashes, MAC codes and key derivation functions (KFD), random generators, key exchange protocols, symmetric ciphers, encryption schemes, asymmetric cryptosystems, public-key cryptography, elliptic curves, digital signatures and quantum-safe crypto algorithms, together with modern cryptographic tools and libraries.\n\nI am happy to publish this free **developer-friendly practical cryptography book**. \\*\\*\\*\\*It holds just **what developers need to know** in order to **use cryptography in their every day work**. It does not cover the internals of the algorithms and how to design symmetric ciphers, public-key cryptosystems or authentication schemes. It covers the basic understanding of the **core cryptographic concepts** and how to use them from developer's perspective: **libraries**, **tools**, **code examples**. This is what most developers need to know about cryptography. This is what this book gives to you for free.\n\n## This Book is for Developers!\n\nThis book is designed **for developers** who write code every day, for **software engineers** who create software systems, Web applications, mobile apps and other software. It may be useful also for **DevOps engineers** who deal with crypto algorithms and write code to automate the IT infrastructure, for **system administrators**, who want to learn practical cryptography better, for **information security engineers**, who need to deal with cryptography every day and to know which ciphers and crypto algorithms are safe and which are broken, along with the possible attacks, for experienced **QA engineers** who perform security testing and code reviews about security and cryptography, and for many other **IT professionals**.\n\nThis book is about **using crypto algorithms** and cryptographic packages, not about designing ciphers, signature schemes and cryptosystems. You will learn how cryptosystems work (without too much math) and how to use them in your daily job. This book is not 100% free of math, but the complexity level is reduced to match the average developer's level, and complex concepts are explained in simplified and understandable style. This book is created **by developers for developers**, not by university professors or mathematicians. It is about coding in a smart way, with understanding the concepts and **using the crypto algorithms and crypto libraries the right way**. It is about the modern crypto algorithms and cryptographic techniques, used today in the software industry (as of Nov 2018).\n\nWe assume that most developers use **higher level programming languages** (such as JavaScript, Python, C#, Java and PHP), so most code examples in the book are given in **Python**, which can be translated to other languages with ease.\n\n## This Book is Free!\n\nThe main book author **Dr. Svetlin Nakov** donates this book and its entire content and code examples **for free** to the developer and IT community as **open-source project**, under [the MIT license](https://opensource.org/licenses/MIT). Why? Because the main book author and the people behind this project believe that the **knowledge is for everyone** and it should be **shared for free**, because developers should learn to use cryptography the right way, because our world needs more secure software, because **sharing knowledge and skills for free** is the greatest miracle of the modern education.\n\nFor the same reasons, which drive the people to build **Wikipedia** and share knowledge for free, to publish open-source projects in **GitHub** and share code for free, to develop open-source software like **GNU/Linux** and **Firefox** and distribute it for free, I write and publish this open-source cryptography book for developers. I want to **share knowledge and skills**, to help the developers to become **better professionals**. I personally as a developer, when I learn a new technology, I search for free resources and code examples in Internet and I am happy that someone creates and shares them for free. Now it is time to return back to the society and to the developer community and this makes me happy.\n\n## About the Author: Dr. Svetlin Nakov\n\nDr. **Svetlin Nakov** ([http://www.nakov.com](http://www.nakov.com)) is a passionate **software engineer**, inspirational **technical trainer** and tech **entrepreneur** from Bulgaria, experienced in broad range of languages, software technologies and platforms. He is co-founder of several highly successful **tech startups** and non-profit organizations and is a **technical advisor** in several successful blockchain **ICO projects**. Svetlin is training, innovation and inspiration manager at [**SoftUni**](https://softuni.org) - the largest tech education provider in South-Eastern Europe.\n\n![](.gitbook/assets/svetlin-nakov-photo-face.jpg)\n\nSvetlin Nakov has 20+ years of technical background as software engineer, software project manager, consultant, **trainer** and **entrepreneur** with rich experience with .NET, Java EE, information systems, databases, cryptography and software security, Web development, JavaScript, PHP, Python and software engineering. He is the leading **author of 15 books** on computer programming, software technologies, cryptography, C#, Java, JavaScript, Python and tens of technical and scientific publications. He is a big fan of **knowledge sharing** and is proud Wikipedia contributor, free books author and open-source supporter.\n\nSvetlin has been a **speaker** at hundreds of conferences, seminars, meetups, courses and other trainings in the United States, Singapore, Germany, Egypt, Bulgaria and other locations. He holds a **PhD** degree in computer science (for his research on computational linguistics and machine learning), several **medals** from the **International Informatics Olympiads** (IOI) and the Bulgarian **President’s award “John Atanasoff”**. He has been a part-time assistant professor / trainer in Sofia University, New Bulgarian University, the Technical University of Sofia, Ngee Ann Polytechnic (Singapore), Kingsland University (USA) and few others.\n\nCurrently **Svetlin Nakov** together with his partners drive the global expansion of the largest training center for software engineers in Bulgaria and the region – the [**Software University**](https://softuni.org), where he inspires and **teaches hundred of thousands of young people** in computer science, software development, information technologies and digital skills, and gives them a profession and a job.\n\n## The History behind This Book\n\nSvetlin Nakov together with tens of co-authors has created and published as open-source projects (in the period 2004-2018) **tens of technical books** about computer programming and software technologies (see [http://www.introprogramming.info](http://www.introprogramming.info) and [http://www.nakov.com/books](http://www.nakov.com/books)), most of which in Bulgarian language. In the last few years Svetlin switches to English and takes **global knowledge sharing initiative** for **better and accessible tech education**, demonstrated with creating and sharing free tech books, free tutorials, free tech webinars and seminars, conference talks and many other activities.\n\nThe book author **Svetlin Nakov** is involved with **applied cryptography** from 2005, when he published the book \"_Java for Digitally Signing Documents of the Web_\" (in Bulgarian), following his master thesis on a similar topic. Later Nakov is involved in his practice as software engineer, tech trainer and entrepreneur, with **cryptography**, **software security** and **blockchain** systems, and his technical expertise grows along with his experience. In 2018 he decides to write a **free book** to share his knowledge about cryptography and crypto algorithms from developer's perspective and donate this knowledge to the global dev community. The book takes 3 months to be written and gets published in Nov 2018. You can get a free copy from: [https://cryptobook.nakov.com](https://cryptobook.nakov.com).\n\n## The Software University (SoftUni)\n\nThe development of this book is supported by the [**Software University (SoftUni)**](https://softuni.org): the biggest and most respected training center for software engineering and digital skills in the South-Eastern Europe, which gives high-quality tech education, practical skills, profession and job to tens of thousands of young people.\n\n[![](.gitbook/assets/softuni-banner.jpg)](https://softuni.org)\n\n**SoftUni** teaches software engineers in the [**Software University**](https://softuni.org) program, creative and design in the [**SoftUni Creative**](https://creative.softuni.bg) program, digital marketing in the [**SoftUni Digital**](https://digital.softuni.bg) program, programming and tech skills for kids in the [**SoftUni Kids**](https://kids.softuni.bg) program, runs a high school for digital skills [**SoftUni Svetlina**](https://svetlina.softuni.bg) and shares knowledge and skills through the [**SoftUni Foundation**](http://softuni.foundation) and its [**SoftUni Free**](http://free.softuni.org) tech educational portal.\n\n## Why Yet Another Book on Cryptography?\n\nMost books about cryptography on the market are written either in too **academic style** with a lot of theory and math or are **outdated** and do not describe the cryptography used today or are too small, **weak in content** and unfinished. Others are better, but are **not free** and accessible for everyone.\n\nThis book \"**Practical Cryptography for Developers**\" tries to compensate all above mentioned weak sides of the existing cryptography books on the market: its is **free**, **developer-friendly**, **comprehensive**, with less math and more **code examples**.\n\n### Academic Cryptography Books\n\nMany high-quality **academic cryptography books** exist on the market and some of them are **free**, but I can't recommend such a book to а developer. He will be bored and will start hating cryptography after the first chapter or two. Some examples:\n\n* One of the strongest **academic book on cryptography concepts** is \"[**A Graduate Course in Applied Cryptography**](https://crypto.stanford.edu/\\~dabo/cryptobook/)\" (by Dan Boneh and Victor Shoup). It is excellent **free** book about **theoretical cryptography**, but is not for developers. It is full of theory, concepts, math and formulas. It does not provide code examples or recommended libraries for developers. Up to date (published in 2017).\n* The \"[**Crypto 101**](https://www.crypto101.io)\" is a **free book on cryptography**, which is more **understandable for developers**. It provides more simple explanation for the core cryptographic concepts, but without code examples and recommended libraries and tools. Up to date (published in 2017).\n* Тhe \"[**Handbook of Applied Cryptography**](http://cacr.uwaterloo.ca/hac)\" (by Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone) is excellent for higher degree students, but is **too academic for developers**. It is available for **free** and explains the theory and the cryptography concepts very well, with lots of high-level math, but it is definitely not for developers. It does not provide working code examples and does not refers the most used crypto libraries in the software industry. Slightly outdated (published in 2001).\n* Yet another good **academic cryptography book** is \"[**Understanding Cryptography: A Textbook for Students and Practitioners**](https://books.google.bg/books?id=f24wFELSzkoC)\" (by Christof Paar, Bart Preneel, Jan Pelzl). Excellent book on **cryptography concepts**, well organized, with algorithms in pseudocode, but it is not for developers. It does not provide code examples and recommended libraries for developers. Almost up to date (published in 2010), not free.\n* Yet another **academic book** on cryptographical concepts: \"[**Practical Cryptography**](https://books.google.bg/books?id=ThVRAAAAMAAJ)\" (by Niels Ferguson and Bruce Schneier, 2003). Provides deep concepts and explanations of the popular crypto algorithms, along with pseudo-code. Slightly outdated (published in 2003).\n\n### Crypto Libraries and Their Documentation\n\nSome **crypto libraries** try to provide **documentation** with crypto concepts and code examples, but they are typically **limited**, sometimes unfinished and not always consistently organized, with a lot of missing points and can serve to help you using certain library, but are not the best source to learn the cryptographic concepts.\n\nStill, these documentations and manuals are **one of the best free learning resources** for developers who want to **use crypto algorithms**, especially experienced engineers with previous knowledge and skills in the area of cryptography. Examples of good documentation about crypto algorithms, coming with some crypto libraries:\n\n* [**Nettle Documentation**](http://www.lysator.liu.se/\\~nisse/nettle/nettle.html) - contains very good description of the most popular cryptographic concepts and popular algorithms (hashes, MAC, symmetric ciphers, signatures) along with reliable and fast **C** implementation.\n* [**PyCA / Cryptography Documentation**](https://cryptography.io/en/latest/hazmat/primitives/) - contains basic description of many cryptographic primitives (like hashes, MAC codes, symmetric encryption, authenticated encryption, asymmetric algorithms, key exchange, KDF and others) along with code examples in **Python**, demonstrating how to use the pyca/cryptography library APIs and its crypto algorithms.\n* [**Libsodium Documentation**](https://download.libsodium.org/doc/) - combines API documentation with elements of cryptographic concepts. It is bound to the **C** language, used for the Libsodium project. Provides sample code examples.\n* [**The Crypto++ Wiki**](https://www.cryptopp.com/wiki/) - explains in brief some cryptography concepts along with guidelines how to use the Crypto++ library and the **C++** classes, implementing certain crypto algorithms. Provides sample code examples.\n* [**Botan - Developer's Manual**](https://botan.randombit.net/manual/) - a modern **C++** crypto-library, which comes with implementations of many modern crypto algorithms, along with documentation, which includes brief description of the underlying cryptographic concepts.\n* [**Libgcrypt Manual**](https://gnupg.org/documentation/manuals/gcrypt/) - a cryptographic library, written in **C** as part of the GnuPG project. Comes with very light introduction to crypto concepts and a boring API documentation with almost no sample code.\n\n### Practical Cryptography - Existing Books\n\nTo be honest, I conducted a **comprehensive research of the book market** (in Nov 2018) to find the best developer-friendly cryptography books. I was **deeply disappointed**! I almost didn't find any good practical book about **cryptography for programmers**, which I could recommend to a friend-developer (not scientist or university student) with confidence that this book is really good and is really what developers need: modern cryptography + simple explained concepts + code examples. I found **very good academic books** and a few **books for developers** (rich of code examples) with either not great quality or very focused on certain technology (like a API reference or library manual). Some of them were also outdated, but still valuable.\n\n#### Free Cryptography Books for Developers\n\nThis is the list of **free books** about practical cryptography for developers:\n\n* [**Practical Cryptography with Go**](https://leanpub.com/gocrypto/read) (by Kyle Isom, published 2015) - a mini-book on how to use cryptography with the **Go** language, full of code examples. It has **free edition** (read online) and **paid editions** (PDF, EPUB, MOBI). The book is good, but its scope is limited to describe some concepts very briefly and demonstrate how to use them with code examples. It covers modern symmetric ciphers (like AES-GCM and XSalsa20-Poly1305), key derivation (PBKDF2 and Scrypt), key exchange and ECDH, digital signatures (ECDSA and Ed25519), and few other concepts.\n* [**The Laws of Cryptography with Java Code**](http://www.cs.utsa.edu/\\~wagner/lawsbookcolor/laws.pdf) (by Neal Wagner, published 2003) - academic-style book on cryptography with working Java examples, implementing certain crypto algorithms (like the AES cipher and the RSA cryptosystem).\n* [**Cryptography in .NET Succinctly**](https://www.syncfusion.com/ebooks/cryptography\\_in\\_net\\_succinctly/cryptography-a-brief-history) (by Dirk Strauss, 2017) - a compilation of **.NET code examples** about using some cryptographic primitives like AES, hashes and RSA signatures from **C#**. Looks more like a API reference than a serious book explaining when a how to use the mentioned cryptographic algorithms, the concepts of the underlying cryptosystems and the specifics of the underlying algorithms.\n\n#### Non-Free Cryptography Books for Developers\n\nI could list a few developer-friendly **books for practical cryptography** with code examples, which have only paid / commercial versions (**no free edition**). Most of them are too deeply bound to certain technology like C, C++, Java or JavaScript and don't explain the concepts well. Others have different focus. Some are outdated, some are quite new. This is the list of what I found from my research about developer-friendly crypto books:\n\n* [**Serious Cryptography: A Practical Introduction to Modern Encryption**](https://books.google.bg/books?id=hLcrDwAAQBAJ) (by by Jean-Philippe Aumasson) - a strong book on cryptography, which combines academic approach with more practical approach, with some code examples in **Python**, but not for all concepts. Recent (published in 2017). Explains the modern cryptographic concepts and crypto-suits like AES-GCM, ChaCha20-Poly1305 and quantum-safe cryptography. This is maybe the best book of what I found.\n* [**Secure Programming Cookbook for C and C++**](https://books.google.bg/books?id=aL3P3eJdiREC) (by John Viega, Matt Messier) - provides secure coding guidelines for **C++** developers, including topics from cryptography (hashes, MAC codes, symmetric ciphers, RSA and DSA, random numbers), with code examples (published in 2009, slightly outdated).\n* [**Cryptography for Developers**](https://books.google.bg/books?id=VaiYIZHduXQC) (by Tom Denis) - provides solid fundamentals in cryptography and crypto algorithms, along with implementations in **C** and **assembler** with lots of code examples. Written in the middle between an academic style and a developer style. Covers hashes, HMAC, AES, slightly RSA and ECC. Slightly outdated (published in 2007).\n* [**Beginning Cryptography with Java**](https://books.google.bg/books?id=WLLAD2FKH3IC) (by David Hook) - a reference for JCA, JCE, JSSE and the Bouncy Castle crypto library with lots of code examples in **Java** (published in 2005, outdated).\n* [**Cryptography for JavaScript Developers: Web Cryptography API, SJCL**](https://books.google.bg/books?id=8oBxDwAAQBAJ) (by Anish Nath) - a reference full of code examples in **JS**, but does not explain the concepts like symmetric ciphers, authenticated encryption, etc. (published in 2018).\n* [**Hands-On Cryptography with Python**](https://books.google.bg/books?id=LsNiDwAAQBAJ) (by Samuel Bowne) - nice mini book (87 pages, published in 2018) with lots of code examples in **Python**, but with very limited scope: hashes, AES and RSA. No signatures, no elliptic curves, no MAC and key derivation functions.\n* [**Cryptography in C and C++**](https://books.google.bg/books?id=5cEYAAAAQBAJ) (by Michael Welschenbach) - guidelines how to implement crypto algorithms like AES and RSA in **C** / **C++**. No signatures, no elliptic curves, no MAC and key derivation functions. Published in 2005 (outdated).\n\nThe absence of **good free practical book about cryptography and crypto algorithms for developers with code examples** motivates me even more to share my knowledge and skills in a developer-friendly cryptography book. I am happy to be one of the first authors to publish a high-quality free book on practical cryptography for software engineers.\n\n## What Does this Book Cover?\n\nThis book covers the most important modern cryptographic concepts, crypto algorithms and cryptographic constructions, used in the software industry, well illustraed and demonstrated with working code examples:\n\n* Cryptographic **hash functions**: concepts, SHA-2, SHA-3, BLAKE2, RIPEMD160, code examples, collisions\n* **MAC** codes: concepts, HMAC, CMAK, UMAC, applications, MAC-based random generators, code examples\n* Key derivation functions (**KDF**): concepts, from password to encryption key, PBKDF2, Scrypt, Bcrypt, Linux crypt(), Argon2, code examples\n* **Password encryption** techniques: from clear text, through hashing, to modern secure KDFs like Argon2\n* Random numbers and **secure random generators**: concepts, entropy, secure random numbers, CSPRNG, code examples\n* **Key exchange** techniques: key establishment and key agreement, Diffie–Hellman Key Exchange (DHKE) and Elliptic Curve Diffie–Hellman (ECDH) with code examples\n* **Encryption** concepts: symmetric and asymmetric ciphers, secret keys, symmetric encryption, encryption schemes, public-key cryptosystems, private and public keys, hybrid encryption, digital signatures\n* Modern **symmetric key ciphers**: concepts, block ciphers and stream ciphers, cipher block modes (CBC, CTR, GCM), the AES (Rijndael) cipher, the Salsa20 / ChaCha20 ciphers, with code examples\n* Symmetric encryption **constructions**: authenticated encryption, AES-256-GCM, ChaCha20-Poly1307, AES-256-CTR-HMAC, with code examples\n* **Asymmetric key ciphers** and public-key cryptosystems: the RSA cryptosystem (RSA key pairs, encryption, decryption), ECC (elliptic curve cryptography, EC points and multiplication, named curves), ECDH (elliptic-curve Diffie–Hellman) key exchange, code examples\n* **Elliptic curves**: widely used named curves like secp256k1, P-256, P-521, Curve25519, Curve448-Goldilocks, with code examples\n* **Integrated encryption** schemes: combining public-key cryptography with symmetric encryption algorithms, the ECIES hybrid encryption scheme, with code examples\n* **Digital signature** algorithms: concepts, signing messages, verifying signatures, RSA signatures, ECDSA and EdDSA\n* **Quantum-safe cryptography**: which classical cryptosystems are quantum-broken and which are quantum-safe, quantum-safe signatures and quantum-safe key exchange algorithms, SPHINCS+, NewHope and others, with code examples\n* Other **cryptographic concepts**: digital certificates, TLS (Transport Layer Security), one-time passwords (OTP), external authentication and OAuth\n* **Crypto libraries** and packages for developers: cryptography in JavaScript, C#, Java, Python, C and C++\n* A lot of **code examples** and exercises, following each major section\n\n## Why Python is Used for the Examples?\n\n**Python** is one of easiest languages, a language, which is **readable** and **understandable** by all developers (even devs who has zero experience with it). The idea of the **code examples** is to illustrate the crypto algorithms, encryption schemes and other cryptography concepts in action, not to promote certain library, API, language or technology.\n\nUse the **code examples** as reference only, as guideline of how your code might look like, and adopt them to your favorite language and framework. Don't directly copy and paste the code examples. Sometimes we use a library, which is more user friendly and easier to install and use, instead of a faster and more reliable library from another vendor. Sometimes we use **hex-encoded** keys, ciphertexts, signatures and other values, in order to display them easier on the console, but in practice most apps will use binary encodings for increased performance and reduced network overhead.\n\nYou are free to adopt the code examples to other languages. At the end of the book we have given examples how to use cryptography in the most popular programming languages: **JavaScript**, **C#**, **Java** and **Python**. We skip giving examples with the lower level languages like **C** and **C++** because they work better for library writers (to implement efficiently certain algorithm), not for app developers. **C** and **C++** are more complex to setup and build, need more effort to manage the project dependencies and are more prone to errors.\n\nMost **application developers** (e.g. Web devs, back-end devs, mobile devs and front-end devs) **use higher level languages** (like JS, Python, C#, Java, PHP and Go), but all of them will **understand the Python code** from the examples. If the code was given in C, it would be longer, more complex and less readable.\n\n**Python is widely supported** everywhere (in Linux, Windows, Mac, on mobile devices and microcontrollers). All examples can also run online in a virtual machine in **online Python environments** such as: [**Repl.it**](https://repl.it/languages/python3) and [**PythonAnywhere**](https://www.pythonanywhere.com).\n\n## How to Read This Book?\n\nThe recommended way to read this is **topic by topic** (from the start to the end). You may skip chapters and sections that you don't like, but please pass through them, because the content has internal dependencies.\n\nPlay with the **code examples**: run them, modify them, break them, explore and experiment with the code and **learn by playing**.\n\nTry to solve the **practical exercises** in chapter. Developers **learn best by writing code** and this is what I recommend. You are given well described exercise problems, with clear input and output, covering well the content after each major section.\n\nNow, start your developer **journey into the modern practical cryptography**. Enjoy the book!\n"
        },
        {
          "name": "quantum-safe-cryptography",
          "type": "tree",
          "content": null
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "secure-random-generators",
          "type": "tree",
          "content": null
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        },
        {
          "name": "symmetric-key-ciphers",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}