{
  "metadata": {
    "timestamp": 1736711640445,
    "page": 267,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "at-import/Singularity",
      "stars": 1501,
      "defaultBranch": "1.x.x",
      "files": [
        {
          "name": ".bump.js",
          "type": "blob",
          "size": 1.341796875,
          "content": "'use strict';\n\nvar path = require('path'),\n    fs = require('fs'),\n    semver = require('semver'),\n    exec = require('child_process').execSync,\n    args = require('yargs').argv;\n\nvar pkg = require('./package.json'),\n    ruby = fs.readFileSync('./lib/singularitygs.rb').toString();\n\nvar rubyString,\n    date = new Date().toISOString();\n\nvar version = pkg.version;\n\nif (exec('git status --porcelain').toString() !== '') {\n  console.error('Working dirty. Please commit before trying again');\n  process.exit(1);\n}\n\nversion = {\n  major: semver.major(version),\n  minor: semver.minor(version),\n  patch: semver.patch(version)\n};\n\nif (args.major) {\n  version = `${version.major + 1}.0.0`;\n}\nelse if (args.minor) {\n  version = `${version.major}.${version.minor + 1}.0`;\n}\nelse if (args.patch) {\n  version = `${version.major}.${version.minor}.${version.patch + 1}`;\n}\nelse {\n  version = `${version.major}.${version.minor}.${version.patch}`;\n}\n\ndate = date.substring(0, date.indexOf('T'));\n\nrubyString = `module SingularityGS\n  VERSION = \"${version}\"\n  DATE = \"${date}\"\nend`;\n\nruby = ruby.substring(0, ruby.indexOf('module SingularityGS')) + rubyString;\n\npkg.version = version;\n\nfs.writeFileSync('./lib/singularitygs.rb', ruby + '\\n');\nfs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\\n');\n\nexec(`git commit -am \"Release v${version}\"`);\nexec(`git tag v${version}`);\n"
        },
        {
          "name": ".bundle",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gembuild.js",
          "type": "blob",
          "size": 0.3896484375,
          "content": "'use strict';\n\nvar exec = require('child_process').execSync,\n    version = require('./package.json').version;\n\nvar commands = [\n  'gem build singularitygs.gemspec',\n  `gem push singularitygs-${version}.gem`,\n  `rm singularitygs-${version}.gem`\n];\n\ncommands.forEach(command => {\n  try {\n    exec(command);\n  }\n  catch (e) {\n    console.error(e.message);\n    process.exit(1);\n  }\n});\n\nprocess.exit();\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": ".DS_Store\n*.sassc\n*.scssc\n*.gem\nexample/css/\nGemfile.lock\n/tests/output/\n/tests/diff/\nnode_modules/\n/vendor"
        },
        {
          "name": ".rvmrc",
          "type": "blob",
          "size": 0.03515625,
          "content": "rvm ruby-1.9.2@singularity --create\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.1240234375,
          "content": "language: ruby\nbundler_args: --without development\nrvm:\n  - 1.8.7\n  - 2.0.0\ngemfile:\n  - Gemfile\nbranches:\n  only:\n    - 1.x.x\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.7978515625,
          "content": "# Singularity Changelog\n\n## v1.6.2\n### February 26, 2015\n* **Fix** First gutter in a split gutter grid now displays properly in SVG backgrounds\n\n## v1.6.1\n### February 25, 2015\n* **Change** Moved from Linear Gradient backgrounds to SVG backgrounds based on the awesome work done over in [Susy](https://github.com/ericam/susy/issues/436)\n* **Fix** `@error` issue with current version of Libsass\n\n## v1.5.0\n### January 17, 2015\n* **New** Moved [Calc Output Style](http://snugug.com/musings/bulletproof-combo-fixed-and-fluid-grids-css3-calc) from [Singularity Extras](https://github.com/at-import/singularity-extras) into Core\n* **New** Added `sgs-set()` mixin to mirror `sgs-change()` mixin (getters and setters FTW)\n* **New** `background-grid` mixin now throws a warning instead of a unit error if it's unable to generate a CSS Gradient for the given grid\n\n## v1.4.0\n### August 23, 2014\n* **New** Allow for a map of options to be passed to the `layout` mixin in the same way that you can for `layout-at`\n* **New** Allow `output` keyword in `layout-at` mixin map\n\n## v1.3.0\n#### August 11, 2014\n* **New** Sass 3.4 support\n* **New** `layout-at` mixin for defining a layout override and writing a media query at the same time\n* **New** `sgs-reset()` mixin and function now allow for comma-separated list of settings to reset\n* **Change** Deprecation warning is now deprecated as Sass 3.4 will ensure this is no longer an issue\n* **Fix** Grid Visualization now doesn't explode with fixed width gutters\n* **New** Quickstart in the README\n* **Fix** Quotes in `isolation-span` clear now unquote correctly\n* **Removed** Singularity demo installs and box sizing polyfill as they are available in other, more useful means\n* **Fix** `SASS_PATH` issues to make Singularity usable w/o Compass and as a Ruby gem\n\n## v1.2.0.rc.6\n#### February 11, 2014\n\n* **Fix** Sass 3.3.0.rc.3 updated how some core functions work; updates for that.\n* **New** Added an `asymmetric-span` mixin for the common use case of only needing to change location in an asymmetric span.\n* **New** Global setting `'asymetric output'` (defaults to `'isolation'`)\n* **Change** Moved Background Grid settings to global settings.\n  * `$background-grid-color` is now `'background grid color'` (defaults to `'chocolate'`)\n  * `$show-grid-background` is now `'debug'` (defaults to `false`)\n* **New** If setting `'debug'` is set to `true`, full settings map passed to output function will be output to the `-sgs-span-settings` property. Inspired by [Susy Issue 293](https://github.com/ericam/susy/issues/293)\n\n## v1.2.0.rc.4\n#### January 31, 2014\n\n* **Fix** Years in the Changelog were 2013, but was actually done in 2014\n* **Fix** Breakpoint dependency should be >= 2.4.0 and < 3.0.0, which is accomplished with `~>2.4`\n\n## v1.2.0.rc.3\n#### January 17, 2014\n\n* **Change** Better warning error for `sgs-set` so settings can contain dashes as long as words are set with spaces. Added errors for underscores as well.\n\n## v1.2.0.rc.2\n#### January 17, 2014\n\n* **New** **Change** Output functions can now set the value of a property to a map to have multiple properties printed with different values. The primary two use cases for this is to provide fallbacks for the same property or to provide a way to have experimental values for properties. The map should have a descriptive key (for experimental properties, the prefix plus `standard` for the standard property, or for fallbacks a `fallback` and `standard` key) and the value should be the value to be printed.\n\n## v1.2.0.rc.1\n#### January 12, 2014\n\n* **New** Sass 3.3.0 and Compass 1.0.0 compatibility\n\t* Sass 3.3.0 minimum required version\n\t* Compass no longer required to run (no custom Ruby dependencies)\n* **New** Installable through Bower\n* **New** [Breakpoint](http://github.com/team-sass/breakpoint) variables can now be used in `add-*`\n* **New** Items added in `add-*` no longer need to be in order! They'll be sorted for you!\n* **New** **Change** `grid-span` now takes an optional parameter `$gutter-style` (after `$output-style`, before `$options`) to allow you to specify gutter style/\n* **New** `grid-span` options now can include a `from` key (left, right, or opposite) to specify the direction that should be used. If specifying a `from` direction, the `[dir=\"rtl\"]` will not be printed. If your global direction is `rtl` or `both`, the selector will still be printed.\n* **New** `isolation-span` and `float-span` both now have `$gutter-style` and `$from` parameters to pass them (respectively) to `grid-span`\n* **New** **Change** When writing both `ltr` and `rtl` styles at the same time, styles whose properties are identical between `ltr` and `rtl` will not print out in the `rtl` style.\n* **Change** **DEPRECATION** Removed `grid-overlay` as it was an even worse representation than `background-grid` and was undocumented.\n* **Change** **DEPRECATION** Removed `grid-toggle` as the JavaScript needed was annoying to maintain and explain how it worked.\n* **New** **DEPRECATION** Global variables for settings have been deprecated due to global namespacing issues that had to be changed. Instead, use `@include sgs-change($setting, $value)` to change a setting. Any setting that previously had dashes in their variable name (`$include-border-box` for instance) becomes a string of the variable name with spaces instead of dashes. Use `@include sgs-reset($setting)` to reset a setting.\n* **DEPRECATION** `add-*` functions changed to `add-*` mixins to resolve global namespacing issues that had to be changed. Example: update `$grids: 12` to `@include add-grid(12)` and `$gutters: add-gutter(.5 at 500px)` to `@include add-gutter(.5 at 500px)`\n* **DEPRECATION** push/pull/isolation mixins have been deprecated as they were always undocumented and untested and there doesn't appear to be many users using them as it was really only useful for `float`. Most users have migrated to `isolation` if push/pull/isolation was needed\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.044921875,
          "content": "## Contributing to Singularity\n\nWe love contributors! Yes we do! If you would like to contribute to Singularity, please follow the following guidelines:\n\n* **DO NOT ISSUE A PULL REQUEST WITHOUT RELATED ISSUE!!** All pull requests must reference an issue in the issue queue and will only be looked at after discussion about that issue has taken place. Any pull request created that does not reference an issue will be closed.\n* All pull requests will be tested against our standard test suite through Travis CI. If any of the tests fail, we will ask you to fix your code so that the tests no longer fail. Any new features that are added must have accompanying passing tests before being considered. During a pull request, we may ask for additional tests to be written in order to ensure that what is being changed does not have negative effects elsewhere.\n* We are actively trying to stay away from Ruby functionality and am attempting to build this entirely with native Sass functionality. If you would like to add a feature that includes Ruby code, there needs to be a very very compelling case as to why.\n* Each individual feature you would like add, or bug you would like to squash, should be an individual pull request. Each pull request should be from an individual feature branch to either the latest stable or development branch. **The current *stable* branch is 1.x.x. The current *development* branch is 1.x.x**. Contributions that are not in the form of a pull request will not be considered. If your pull request does not apply cleanly we will ask you to fix that before we will look into pulling it in. We may ask you to update or make changes to the code you've submitted, please don't take this the wrong way. If a pull request smells (such as if a large amount of code is all within a single commit, or the coding standards aren't in line with core Singularity) we may ask you to rewrite your commit.\n* If you offer a new feature in a pull request and we do not feel it is a good fit for core Singularity, fret not. Singularity is designed to be extensible, and we encourage you to [build your own Compass Extension](https://github.com/Team-Sass/Compass-Extension-Template) and release your feature (if possible) as a Singularity plugin.\n* **BEFORE FILING AND ISSUE** ensure that the issue is reproducable either on [SassMeister](http://sassmeister.com/) or under Bundler control. Post the versions of all gems being used and the smallest set of example code of how to reproduce the error.\n\n### Testing\n\nWe have automated tests to ensure our build is working. To test, you must install [Bundler](http://bundler.io/), which will allow you to install all needed gem versions. Once you have Bundler up and running and have your dependencies installed, run ```bundle exec rake``` to run the tests. All tests are stored within the 'test' folder as .scss files. The test suite ensures that each test compiles, and does not change the expected behavior. If a test needs to be updated or changed, update the correct .scss file, and then run ```bundle exec rake compile``` to update all corrosponding css files.\n"
        },
        {
          "name": "Gemfile",
          "type": "blob",
          "size": 0.2421875,
          "content": "# Pull gems from RubyGems\nsource 'https://rubygems.org'\n\ngem 'sass',               \"~> 3.4\"\ngem 'compass',            \"~>1.0\"\ngem 'breakpoint',         \"~> 2.4\"\n\ngroup :test do\n  gem 'rake'\n  gem \"diffy\", \"~> 3.0.1\"\n  gem \"colorize\", \"~> 0.6.0\"\nend"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Scott Kellum, Sam Richard\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "Rakefile",
          "type": "blob",
          "size": 0.5869140625,
          "content": "task :default => [:test]\n\ntask :test do\n  require 'fileutils'\n\n  Dir.chdir('tests') do\n    output_dir = 'output'\n    FileUtils.mkdir_p output_dir\n    ruby '.unit_tests.rb'\n    FileUtils.rm_rf output_dir\n  end\nend\n\ndesc 'Compile baseline CSS'\ntask :compile do\n  require 'compass'\n  require 'compass/exec'\n\n  Dir.chdir('tests') do\n    Compass.add_configuration 'config.rb'\n    Compass.configuration.project_path = Dir.pwd\n    # Compile into baseline directory instead of test output directory\n    Compass.configuration.css_dir = 'controls'\n    Compass.compiler.clean!\n    Compass.compiler.run\n  end\nend\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.375,
          "content": "{\n  \"name\": \"singularity\",\n  \"version\": \"1.8.0\",\n  \"main\": \"stylesheets/_singularitygs.scss\",\n  \"ignore\": [\n    \"**/.*\",\n    \"node_modules\",\n    \"components\",\n    \"Gemfile\",\n    \"Gemfile.lock\",\n    \"*.gemspec\",\n    \"lib\",\n    \"example\",\n    \"tests\",\n    \"Rakefile\",\n    \"templates\",\n    \"working\",\n    \"CONTRIBUTING.md\"\n  ],\n  \"dependencies\": {\n    \"breakpoint-sass\": \">=2.4.0\"\n  }\n}\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "eyeglass-exports.js",
          "type": "blob",
          "size": 0.134765625,
          "content": "var path = require('path');\n\nmodule.exports = function(eyeglass, sass) {\n  return {\n    sassDir: path.join(__dirname, 'stylesheets')\n  }\n}"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.1884765625,
          "content": "{\n  \"name\": \"singularitygs\",\n  \"version\": \"1.8.0\",\n  \"description\": \"A next generation grid framework built from the ground up to be responsive.\",\n  \"main\": \"stylesheets/_singularitygs.scss\",\n  \"directories\": {\n    \"test\": \"tests\"\n  },\n  \"eyeglass\": {\n    \"needs\": \"^1.0.0\",\n    \"exports\": \"eyeglass-exports.js\",\n    \"name\": \"singularitygs\"\n  },\n  \"devDependencies\": {\n    \"diff\": \"^1.2.1\",\n    \"fs-extra\": \"^0.14.0\",\n    \"glob\": \"^4.3.2\",\n    \"node-sass\": \"^3.0.0\",\n    \"semver\": \"^5.1.0\",\n    \"yargs\": \"^4.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"bump:major\": \"node .bump.js --major\",\n    \"bump:minor\": \"node .bump.js --minor\",\n    \"bump:patch\": \"node .bump.js --patch\",\n    \"publish\": \"node .gembuild.js && git push && git push origin --tags\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/Team-Sass/Singularity.git\"\n  },\n  \"keywords\": [\n    \"sass\",\n    \"responsive\",\n    \"rwd\",\n    \"eyeglass-module\",\n    \"singularity\",\n    \"layout\",\n    \"grid\",\n    \"semantic\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/Team-Sass/Singularity/issues\"\n  },\n  \"homepage\": \"https://github.com/Team-Sass/Singularity\"\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 11.138671875,
          "content": "# 🚨 Singularity is [no longer maintained](https://snugug.com/musings/saying-goodbye-to-singularity/). [CSS Grid is nice](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout), you should use that instead.\n\n# Singularity.gs [![Gem Version](https://badge.fury.io/rb/singularitygs.svg)](http://badge.fury.io/rb/singularitygs) [![Build Status](https://travis-ci.org/at-import/Singularity.svg?branch=1.x.x)](https://travis-ci.org/at-import/Singularity)\n\n**Grids Without Limits**\n\nSingularity is a next generation grid framework built from the ground up to be responsive. What makes Singularity different? Well, a lot of things. Singularity is based on internal ratios instead of context based which allows for better gutter consistency across breakpoints. Ratio based math also allows for non-uniform grids in *any* unit you want to use.\n\n## CSS Grids and Singularity\n\nLayout on the web has changed significantly since [Scott's first push](https://github.com/at-import/Singularity/commit/d13cd4b1907802708a1e40e61a531bca5d409405) back on March 7, 2012. First came Flexbox, then [CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout). CSS Grid provides layout functionality that covers all of Singularity's usecases and then quite a few more that we were never really able to support.\n\nWith the release of Singularity 1.8, two new mixins, `grid-container` and `css-grid-span`. These two mixins are not included by default when importing Singularity, and will need to be included separately by doing `@import 'singularity/css-grid'` after following the [install instructions](#installation).\n\n**These Mixins Are Not Meant To Be Used As A Replacement For CSS Grid**\n\nThe purpose of these mixins is to provide users with a way to **transition off of Singularity and start using CSS Grid directly**. CSS Grid is powerful, and doesn't need a framework like Singularity, and we encourage our users to start using it directly whenever possible instead of Singularity. This also means _there will be no further updates to Singularity for the forseeable future_. We love all of our users, and thank you for your support over the past 5 years. Singularity will continue to work as normal, but further development will stop.\n\nDocumentation for the CSS Grid mixins can be [found below](#css-grid);\n\n## Getting Help with Singularity\n\n* For help with Singularity, please ask a question on [Stack Overflow](http://stackoverflow.com/questions/ask) tagged with `singularitygs`.\n* To file an issue with Singularity, be it a feature request or a bug report, please use our [Issue Queue](https://github.com/at-import/Singularity/issues).\n\n## Singularity Quickstart\n\n**Full documentation is available on the [Singularity Wiki](https://github.com/at-import/Singularity/wiki)**\n\n*If you are upgrading to Singularity 1.2.0 or greater, please read the [Changelog](https://github.com/at-import/Singularity/blob/1.x.x/CHANGELOG.md) for important changes made to Singularity!*\n\n### Installation\n\n* Singularity should be [installed and compiled](https://github.com/at-import/Singularity/wiki/Installation#installation) through [Bundler](http://bundler.io/) if compiling with Ruby\n* Alternatively, Singularity can be installed with Bower (`bower install singularity --save`)\n* It can even be installed as an [Eyeglass](https://github.com/sass-eyeglass/eyeglass) module! (`npm install singularitygs --save-dev`)\n* Singularity requires a Sass compiler with full feature parity with the Ruby Sass 3.4.23 implementation in order to work\n\n### Setting Up a Basic Grid\n\n[Grids](https://github.com/at-import/Singularity/wiki/Creating-Grids) are made of 3 parts, the Grid definition defining columns, Gutter definition defining spacing between columns, Gutter Style defining how gutters are positioned relative to a column. Singularity supports [Symmetric](https://github.com/at-import/Singularity/wiki/Creating-Grids#symmetric-grids) and [Asymmetric](https://github.com/at-import/Singularity/wiki/Creating-Grids#asymmetric-grids) grids, as well as fluid and [fixed](https://github.com/at-import/Singularity/wiki/Creating-Grids#fixed-gutters) gutters. Setting grids up this way puts them into Singularity's **Global Grid Context**.\n\n```scss\n// Symmetric grid with fluid gutters, 1/2 gutter on each side of a column\n@include add-grid(12);\n@include add-gutter(1/3);\n@include add-gutter-style('split');\n```\n\n```scss\n// Asymmetric grid with fixed gutters, 1 full gutter after each column\n@include add-grid(1 3 5);\n@include add-gutter(1em);\n```\n\nYou can [visualize your grid](https://github.com/at-import/Singularity/wiki/Creating-Grids#visualizing-your-grids) with a CSS Gradient. To do so, turn on debug mode and include the `background-grid` mixin. Be warned, CSS Gradients aren't 100% reliable visualizations, if there's a discrepancy between the visualization and the actual items on the grid, it's most likely the visualization that's wrong.\n\n```scss\n// Be sure to enable debug mode for your grid visualization so show up:\n@include sgs-change('debug', true);\n\n.container {\n  @include background-grid($color: blue);\n}\n```` \n\n### Spanning Your Grid\n\nSingularity doesn't provide grid classes, instead it uses mixins to [attach an item to your grid](https://github.com/at-import/Singularity/wiki/Spanning-The-Grid). The mixin takes your grid definitions and an [output style](https://github.com/at-import/Singularity/wiki/Output-Styles) and writes the CSS for the given combination. The main mixin for this is the `grid-span` mixin which will work with any output style. Most output styles provide [output-specific spans](https://github.com/at-import/Singularity/wiki/Spanning-The-Grid#output-span) to make working with that specific output style easier.\n\nThe `grid-span` mixin takes two required arguments, how many columns you would like to span, and from what column you would like to start from. The column you would like to start from is the first column spanned.\n\n```scss\n@include add-grid(4);\n\n.foo {\n  // Spanning the last 2 columns\n  @include grid-span(2, 3);\n}\n\n.bar {\n  // Spanning the 2nd column\n  @include grid-span(1, 2);\n}\n```\n\n### Responsive Grids\n\nSingularity provides a couple of different ways to have `grid-span` use a different set of grid definitions at different breakpoints. The first is Singularity's [Responsive Grid Context](https://github.com/at-import/Singularity/wiki/Creating-Grids#responsive-grids), which relies upon [Breakpoint](https://github.com/team-sass/breakpoint) (a super powerful and flexible media query system, we recommend using it). This will allow you to use Breakpoint media queries as normal and when `grid-span` is called, it will know what set of grid definitions to use (although it won't automatically change existing `grid-span` calls to put them on a new grid, that's up to you). It does this by allowing for multiple grid definitions in the **Global Grid Context**.\n\nTo use, simply call `add-grid` multiple times, each time telling it when you would like to change. **Be Aware** this will *only work with `min-width` media queries!* Sass and Singularity cannot know runtime conditions and provide wiggle room between media queries with anything other than simple `min-width` queries. While a full Breakpoint style media query can be used in these definitions, Singularity will only look for the `min-width` value.\n\n**Responsive grid contexts do not output anything by themsleves**. Singularity's Responsive Grids feature allows you to change the *context of a called `grid-span`*. In order for you to see the context change, you still need to call `grid-span` to apply your grid.\n\n```scss\n// Singularity 1.2 Syntax\n@include add-grid(3);\n@include add-grid(6 at 500px);\n@include add-grid(12 at 700px);\n@include add-grid(2 8 2 at 900px);\n@include add-grid(1 3 5 7 9 at 1100px);\n\n@include add-gutter(1/3);\n@include add-gutter(.25 at 900px);\n```\n\nThe second way to provide responsive grids is with either of the use of the [Context Override](https://github.com/at-import/Singularity/wiki/Spanning-The-Grid#group-context-overrides) mixins. Singularity provides two, `layout` which will override context **Global Grid Context** for any content nested underneath it, and `layout-at`, which will do the same but allows you to define and use a media query at the same time. `layout-at` will accept any Breakpoint media query definition. Both of these options provide more fine-grain control over your **Global Grid Context** overrides as compared to the **Responsive Grid Context**, if you need that.\n\n```scss\n@include add-grid(12);\n@include add-gutter(1/3);\n\n.foo {\n  @include layout(1 3 5, .5) {\n    // Everything in here will use a `1 3 5` grid with `.5` gutter.\n    // Arguments (in order): $grid, $gutter, $output-style, $gutter-style\n  }\n\n  @include layout((\n    'grid': 1 3 5,\n    'gutter': .5\n  )) {\n    // Everything in here will use a `1 3 5` grid with `.5` gutter\n\n    // Also available: 'gutter style' and 'output'\n  }\n\n\n  @include layout-at(2 4 6, 500px) {\n    // Everything in here will be wrapped in a `min-width: 500px` media query\n    //   and use a `2 4 6` grid with the Global Grid Context's `1/3` gutter\n  }\n\n  @include layout-at((\n    'grid': 1 3 5,\n    'gutter': .5\n  ), 700px) {\n    // Everything in here will be wrapped in a `min-width: 700px` media query\n    //   and use a `1 3 5` grid with `.5` gutter\n\n    // Also available: 'gutter style' and 'output'\n  }\n}\n```\n\n### CSS Grid\n\nSingularity 1.8 introduces the following optional mixins to use current grid definitions to provide [CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout) layouts for browsers that support it, and fall back to Singularity layouts for browsers that do not.\n\n```scss\n@import \"breakpoint\";\n@import \"singularitygs\";\n@import \"singularitygs/css-grids\"; // Optional module, needs to be imported separately\n\n.container {\n  @include grid-container; // Will write  grid-template-columns, grid-gap, and padding definitions (wrapped in @supports) based on grid definitions previously defined\n}\n\n.item {\n  @include css-grid-span(3) // Spans with no location only work for symmetric grids. Will write a float-based span as a fallback to grid-columns\n}\n\n.item-2 {\n  @include css-grid-span(2, 1) // Spans with a location will work with asymmetric grids. Will write either an isolation or calc based span as a fallback to grid-columns (depending on the defined grid)\n}\n\n```\n\n## Contributing to Singularity\n\nWe love contributors! Yes we do! If you would like to contribute to Singularity, please follow the [Contributing Guidelines](https://github.com/at-import/Singularity/blob/1.x.x/CONTRIBUTING.md)\n\n## Singularity Plugins\n\nHaving been designed to be extensible, the ability to create plugins for Singularity is great and we expect to see great things. From new [Output Span](https://github.com/at-import/Singularity/wiki/Spanning-The-Grid#output-span) syntaxes to new [Output Styles](https://github.com/at-import/Singularity/wiki/Output-Styles) to new [Grid Generators](https://github.com/at-import/Singularity/wiki/Grid-Generators), we are excited to see what the community will come up with. Below are a list of Singularity Plugins available. If you would like to add your Plugin to the list, please issue a Pull Request to add it to the list!\n\n* [Singularity Extras](https://github.com/at-import/Singularity-Extras)\n\n## License\n\nDual license MIT/GPL-3.0\n"
        },
        {
          "name": "sache.json",
          "type": "blob",
          "size": 0.453125,
          "content": "{\n  \"name\": \"singularity\",\n  \"description\": \"Singularity is a next generation grid framework built from the ground up to be responsive. What makes Singularity different? Well, a lot of things. Singularity is based on internal ratios instead of context based which allows for better gutter consistency across breakpoints. Ratio based math also allows for non-uniform grids in any unit you want to use.\",\n  \"tags\": [\"grids\", \"rwd\", \"responsive-web-design\", \"dry\"]\n}\n"
        },
        {
          "name": "singularitygs.gemspec",
          "type": "blob",
          "size": 1.1181640625,
          "content": "# -*- encoding: utf-8 -*-\nrequire './lib/singularitygs'\n\nGem::Specification.new do |s|\n  # General Project Information\n  s.name = \"singularitygs\"\n  s.version = SingularityGS::VERSION\n  s.date = SingularityGS::DATE\n  s.rubyforge_project = \"singularitygs\"\n  s.rubygems_version = \"1.7.2\"\n  s.required_rubygems_version = Gem::Requirement.new(\">= 1.2\")\n\n  # Author Information\n  s.authors = [\"Scott Kellum\", \"Sam Richard\"]\n  s.email = [\"scott@scottkellum.com\", \"snugug@gmail.com\"]\n  s.homepage = \"http://singularity.gs\"\n  s.licenses = [\"MIT\"]\n\n  # Project Description\n  s.description = \"Advanced responsive grid system for Sass and Compass\"\n  s.summary = \"Singularity is a fluid grid system that can generate uniform columns as well as asymmetric and compound grids. It is designed to be extensible, adding additional outputs or grid generators are easy, and the core syntax is simple to build upon for custom input syntaxes.\"\n\n  # Files to Include\n  s.files = Dir.glob(\"lib/*.*\")\n  s.files += Dir.glob(\"stylesheets/**/*.*\")\n\n  # Dependent Gems\n  s.add_dependency 'sass',                \"~> 3.3\"\n  s.add_dependency 'breakpoint',          \"~> 2.4\"\nend"
        },
        {
          "name": "stylesheets",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "working",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}