{
  "metadata": {
    "timestamp": 1736711653911,
    "page": 294,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "iann0036/AWSConsoleRecorder",
      "stars": 1426,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2018 Ian Mckay\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.861328125,
          "content": "# Console Recorder for AWS\n\n[![CloudFormation](https://img.shields.io/badge/CloudFormation-85%25-orange.svg)](https://github.com/iann0036/AWSConsoleRecorderGenerator/blob/master/coverage.md#cloudformation-resource-coverage) [![Terraform](https://img.shields.io/badge/Terraform-44%25-blue.svg)](https://github.com/iann0036/AWSConsoleRecorderGenerator/blob/master/coverage.md#terraform-coverage) [![SDK/CLI](https://img.shields.io/badge/SDK%2FCLI-19%25-lightgrey.svg)](https://github.com/iann0036/AWSConsoleRecorderGenerator/blob/master/coverage.md#service-coverage)\n\n**Check out [Former2](https://github.com/iann0036/former2) for a better maintained, more flexible solution**\n\n> Records actions made in the AWS Management Console and outputs the equivalent CLI/SDK commands and CloudFormation/Terraform templates.\n\n\n![Screenshot](assets/screen1.png)\n\n\n## Installation\n\n### Google Chrome\n\nYou can download the extension from the [Chrome Web Store](https://chrome.google.com/webstore/detail/console-recorder/ganlhgooidfbijjidcpkeaohjnkeicba) or load the extension manually via chrome://extensions/.\n\n### Mozilla Firefox\n\nYou can download the extension from [Firefox Add-ons](https://addons.mozilla.org/en-GB/firefox/addon/console-recorder/) or load the extension manually via about:addons. If loaded manually, replace the `manifest.json` file with the `firefoxManifest.json` file before loading.\n\n## Usage\n\nClick the orange _Console Recorder for AWS_ icon in the top-right corner of your browser window. If you do not see it, you may find it by clicking the three vertical dots and checking the top row. Once the popup is presented, click the **Start Recording** button.\n\n![Screenshot](assets/screen2.png)\n\nAll supported actions will be recorded up until the point in which you click the icon again and select the **Stop Recording** button, at which point you will be presented with the dashboard for you to copy code from.\n\nThe following outputs are currently supported:\n\n* Boto3 (Python) SDK\n* CloudFormation\n* HashiCorp Terraform\n* Troposphere\n* CDK (TypeScript)\n* AWS CLI (v1)\n* IAM Policy\n* JavaScript SDK\n* Go SDK (v1)\n\n## Settings\n\nIn the Settings section, there are a number of options you can set. These options take effect as soon as you change them.\n\n### Block Mutable Requests\n\nThis option will stop any mutable requests (most things that aren't a `Get*` or `List*` action) from executing in the console, whilst still logging the generated outputs in the dashboard.\n\n### Intercept Responses\n\nThis option will record the response body from all AWS calls. Setting this allows CloudFormation, CDK, Troposphere and Terraform to correlate actions between resources. For example, CloudFormation will use the `!Ref` and `!GetAtt` intrinsic functions to reference resource identifiers within the template.\n\n:warning: **Note:** When Intercept Responses is set in Google Chrome, a notification telling you the extension is debugging the browser is shown for the duration of the recording for security purposes.\n\n## Security\n\nNetwork data from the AWS Management Console is recorded and information is extracted from the requests and responses. Recording data is kept entirely in memory or on local disk and is never sent over the internet or anywhere else. You should take care to remove any sensitive data (passwords etc.) when sharing your generated code/templates with others.\n\n## Coverage\n\nNot all actions and resources are supported yet, check [this page](https://github.com/iann0036/AWSConsoleRecorderGenerator/blob/master/coverage.md) for an up-to-date overview of supported actions and resources. This page is automatically generated.\n\n## Bugs\n\nGiven the nature of the extension, and the frequency in which the AWS team make updates, bugs will be frequent and inevitable. If you find these bugs, check [the issues page](https://github.com/iann0036/AWSConsoleRecorder/issues) to see if it has already been raised and if not, feel free to raise it.\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bg.js",
          "type": "blob",
          "size": 2250.013671875,
          "content": "var declared_services;\nvar compiled;\nvar go_first_output;\nvar recording = false;\nvar intercept = false;\nvar theme = \"material\";\nvar global_used_refs = [];\nvar cfn_spacing = \"    \";\n\nsetTimeout(function(){\n    chrome.storage.local.get('blocking', function (isBlocking) {\n        if (isBlocking.blocking !== undefined) {\n            blocking = isBlocking.blocking;\n        }\n    });\n    \n    chrome.storage.local.get('intercept', function (isIntercepting) {\n        if (isIntercepting.intercept !== undefined) {\n            intercept = isIntercepting.intercept;\n        }\n    });\n    \n    chrome.storage.local.get('theme', function (whichTheme) {\n        if (whichTheme.theme !== undefined) {\n            theme = whichTheme.theme;\n        }\n    });\n    \n    chrome.storage.local.get('cfnspacing', function (cfnspacing) {\n        if (cfnspacing.cfnspacing !== undefined) {\n            if (cfnspacing.cfnspacing == 4) {\n                cfn_spacing = \"    \";\n            } else if (cfnspacing.cfnspacing == 2) {\n                cfn_spacing = \"  \";\n            }\n        }\n    });\n}, 1);\n\nfunction b64tonumber(str) {\n    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$_'.split('')\n    var result = 0;\n    var input_tokens = str.split('');\n    var e;\n    for (var e in input_tokens) {\n        result = ( result * 64 ) + alphabet.indexOf( input_tokens[e] );\n    }\n    return result;\n}\n\nfunction interpretGwtArg(tracker, expected_type) {\n    var index = parseInt(tracker.pipesplit[tracker.cursor]);\n\n    if (index == 0) {\n        tracker.cursor += 1;\n        return {\n            'value': null,\n            'type': null\n        }\n    } else if (index < 0) {\n        tracker.cursor += 1;\n        return tracker.resolvedObjects[Math.abs(index)];\n    }\n\n    if (expected_type == \"java.lang.String/2004016611\") {\n        arg_type = \"java.lang.String/2004016611\";\n    } else if (expected_type == \"java.lang.Boolean/476441737\") {\n        arg_type = \"java.lang.Boolean/476441737\";\n    } else {\n        var arg_type = tracker.params[index];\n        tracker.cursor += 1;\n    }\n\n    if (arg_type == \"amazonaws.console.common.dtos.Regions$Region/2677748408\") {\n        var ret = {\n            'type': arg_type\n        };\n        tracker.resolvedObjects.push(ret);\n\n        while (!tracker.params[parseInt(tracker.pipesplit[tracker.cursor])].endsWith(\".amazonaws.com\")) {\n            tracker.cursor += 1;\n        }\n        tracker.cursor += 6;\n\n        var region = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 7;\n\n        ret['value'] = region;\n\n        return ret;\n    } else if (arg_type == \"java.lang.Integer/3438268394\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var val = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        ret['value'] = val;\n\n        return ret;\n    } else if (arg_type == \"java.lang.String/2004016611\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var val = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['value'] = val;\n\n        return ret;\n    } else if (arg_type == \"java.lang.Long/4227064769\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var val = b64tonumber(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        ret['value'] = val;\n\n        return ret;\n    } else if (arg_type == \"java.lang.Boolean/476441737\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var val = Boolean(parseInt(tracker.pipesplit[tracker.cursor]));\n        tracker.cursor += 1;\n\n        ret['value'] = val;\n\n        return ret;\n    } else if (arg_type == \"java.util.ArrayList/4159755760\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var arr = [];\n        var array_length = tracker.pipesplit[tracker.cursor];\n        tracker.cursor += 1;\n\n        for (var i=0; i<array_length; i++) {\n            arr.push(interpretGwtArg(tracker));\n        }\n\n        ret['value'] = arr;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.internal.ListWithAutoConstructFlag/2962671489\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var arr = [];\n        var auto_construct_flag = tracker.pipesplit[tracker.cursor];\n        tracker.cursor += 1;\n        var array_length = tracker.pipesplit[tracker.cursor];\n        tracker.cursor += 1;\n\n        for (var i=0; i<array_length; i++) {\n            arr.push(interpretGwtArg(tracker));\n        }\n\n        ret['auto_construct_flag'] = auto_construct_flag;\n        ret['value'] = arr;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.EventDestination/1743070390\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var cloudwatchdestination = interpretGwtArg(tracker);\n        var enabled = (parseInt(tracker.pipesplit[tracker.cursor]) == 1);\n        tracker.cursor += 1;\n        var eventtypes = interpretGwtArg(tracker);\n        var kinesisdestination = interpretGwtArg(tracker);\n        var eventname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        interpretGwtArg(tracker); // probably SNSDestination?\n        var eventdestinationstatus = interpretGwtArg(tracker);\n\n        ret['enabled'] = enabled;\n        ret['eventtypes'] = eventtypes;\n        ret['cloudwatchdestination'] = cloudwatchdestination;\n        ret['kinesisdestination'] = kinesisdestination;\n        ret['eventname'] = eventname;\n        ret['eventdestinationstatus'] = eventdestinationstatus;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.EventType/3840887836\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var eventtypes_enum = ['send','reject','bounce','complaint','delivery','open','click','renderingFailure'];\n\n        var eventtype = eventtypes_enum[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['eventtype'] = eventtype;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.KinesisFirehoseDestination/2935040581\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var arn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var role = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        tracker.cursor += 1; // verified domain ?\n\n        ret['arn'] = arn;\n        ret['role'] = role;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.CloudWatchDestination/2780889431\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var dimensions = interpretGwtArg(tracker);\n\n        ret['dimensions'] = dimensions;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.CloudWatchDimensionConfigurations/1770148543\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var value = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var source = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['value'] = value;\n        ret['name'] = name;\n        ret['source'] = source;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.SNSDestination/60332510\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var arn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['arn'] = arn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.InboundFilter/855140093\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 2;\n        var allow_boolean = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        ret['cidr'] = cidr;\n        ret['name'] = name;\n        if (allow_boolean) {\n            ret['action'] = 'Allow';\n        } else {\n            ret['action'] = 'Block';\n        }\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.configurationSet.EventDestinationStatus/111633783\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var status = (parseInt(tracker.pipesplit[tracker.cursor]) == 1); // cast boolean\n        tracker.cursor += 1;\n\n        ret['status'] = status;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.AddHeaderAction/467599610\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var headername = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var headervalue = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val3 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val4 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['headername'] = headername;\n        ret['headervalue'] = headervalue;\n        ret['val3'] = val3;\n        ret['val4'] = val4;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.BounceAction/1812843977\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var message = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var sender = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var smtpreplycode = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var statuscode = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val5 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['message'] = message;\n        ret['sender'] = sender;\n        ret['smtpreplycode'] = smtpreplycode;\n        ret['statuscode'] = statuscode;\n        ret['val5'] = val5;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.LambdaAction/1097769813\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var functionarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var invocationtype = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val3 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['functionarn'] = functionarn;\n        ret['invocationtype'] = invocationtype;\n        ret['val3'] = val3;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.S3Action/3998072397\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var bucketname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var kmskeyarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var objectkeyprefix = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val5 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['bucketname'] = bucketname;\n        ret['val2'] = val2;\n        ret['kmskeyarn'] = kmskeyarn;\n        ret['objectkeyprefix'] = objectkeyprefix;\n        ret['val5'] = val5;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.SNSAction/1093049066\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var encoding = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['encoding'] = encoding;\n        ret['val2'] = val2;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.WorkMailAction/4106534622\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var organizationarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var val2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['organizationarn'] = organizationarn;\n        ret['val2'] = val2;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.StopAction/708585167\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var val1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var topicarn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['val1'] = val1;\n        ret['topicarn'] = topicarn;\n\n        return ret;\n    } else if (arg_type == \"com.amazon.bacon.console.shared.types.inbound.ReceiptRule/4059515547\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var actions = interpretGwtArg(tracker);\n\n        var enabled = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        var recipients = interpretGwtArg(tracker);\n\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        var spamvirusscanning = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var tls = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        ret['actions'] = actions;\n        ret['recipients'] = recipients;\n        ret['name'] = name;\n        ret['enabled'] = enabled;\n        ret['spamvirusscanning'] = spamvirusscanning;\n        ret['tls'] = tls;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.FirewallRule/883972025\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var ruleId = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var protocol = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var portStart = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var portEnd = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var cidr = interpretGwtArg(tracker);\n        interpretGwtArg(tracker);\n        interpretGwtArg(tracker);\n        var action = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var ruleDirection = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['value'] = ruleId;\n        ret['ruleId'] = ruleId;\n        ret['protocol'] = protocol;\n        ret['portStart'] = portStart;\n        ret['portEnd'] = portEnd;\n        ret['cidr'] = cidr;\n        ret['action'] = action;\n        ret['ruleDirection'] = ruleDirection;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.Route/2658103323\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var destination = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 5;\n        var action = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var status = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 4;\n        var ipv6cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 2;\n\n        ret['cidr'] = cidr;\n        ret['destination'] = destination;\n        ret['action'] = action;\n        ret['status'] = status;\n        ret['ipv6cidr'] = ipv6cidr;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.RouteTable/2977847614\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknownarray1 = interpretGwtArg(tracker);\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknownboolean1 = interpretGwtArg(tracker);\n        var unknown2 = interpretGwtArg(tracker);\n        var unknownarray2 = interpretGwtArg(tracker);\n        var routetableid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var routes = interpretGwtArg(tracker);\n        var unknownarray3 = interpretGwtArg(tracker);\n        var vpcid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown3 = interpretGwtArg(tracker);\n\n        ret['unknownarray1'] = unknownarray1;\n        ret['cidr'] = vpccidr;\n        ret['unknownboolean1'] = unknownboolean1;\n        ret['unknown2'] = unknown2;\n        ret['unknownarray2'] = unknownarray2;\n        ret['routetableid'] = routetableid;\n        ret['routes'] = routes;\n        ret['unknownarray3'] = unknownarray3;\n        ret['vpcid'] = vpcid;\n        ret['unknown3'] = unknown3;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.IGW/344372469\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var igwid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n        var unknown2 = interpretGwtArg(tracker);\n        var unknown3 = interpretGwtArg(tracker);\n        var unknownarray1 = interpretGwtArg(tracker);\n        var unknownarray2 = interpretGwtArg(tracker);\n\n        ret['igwid'] = igwid;\n        ret['unknown1'] = unknown1;\n        ret['unknown2'] = unknown2;\n        ret['unknown3'] = unknown3;\n        ret['unknownarray1'] = unknownarray1;\n        ret['unknownarray2'] = unknownarray2;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.route53.model.Change/107219911\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var action = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var recordset = interpretGwtArg(tracker);\n\n        ret['action'] = action;\n        ret['recordset'] = recordset;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.route53.model.ResourceRecordSet/2237386177\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        tracker.cursor += 5;\n        var recordname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 2;\n        var records = interpretGwtArg(tracker);\n\n        ret['recordname'] = recordname;\n        ret['records'] = records;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.route53.model.ResourceRecord/3609806506\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var value = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 2;\n        var ttl = interpretGwtArg(tracker); // oh my god!\n        tracker.cursor += 1;\n        var recordtype = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n\n        ret['value'] = value;\n        ret['ttl'] = ttl;\n        ret['recordtype'] = recordtype;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CloudFrontOriginAccessIdentityConfig/902378263\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var timestamp = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var comment = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['timestamp'] = timestamp;\n        ret['comment'] = comment;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.StreamingDistributionConfig/2353713719\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        tracker.resolvedObjects.push(null); // TODO: Why this?\n\n        var aliases = interpretGwtArg(tracker);\n        var timestamp = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var comment = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var enabled = interpretGwtArg(tracker);\n        var logging = interpretGwtArg(tracker);\n        var priceclass = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var s3origin = interpretGwtArg(tracker);\n        var trustedsigners = interpretGwtArg(tracker);\n\n        ret['aliases'] = aliases;\n        ret['timestamp'] = timestamp;\n        ret['comment'] = comment;\n        ret['enabled'] = enabled;\n        ret['logging'] = logging;\n        ret['priceclass'] = priceclass;\n        ret['s3origin'] = s3origin;\n        ret['trustedsigners'] = trustedsigners;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.Aliases/4239770237\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(\"###TEMP\"); // TODO: Fix\n        tracker.resolvedObjects.push(ret);\n\n        var items = interpretGwtArg(tracker);\n        var quantity = interpretGwtArg(tracker);\n\n        ret['items'] = items;\n        ret['quantity'] = quantity;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.swf.console.gwtcoral.client.com.amazonaws.swf.service.model.RegisterDomainInput/54427647\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var description = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var days = parseInt(tracker.params[parseInt(tracker.pipesplit[tracker.cursor])]);\n        tracker.cursor += 1;\n\n        ret['description'] = description;\n        ret['name'] = name;\n        ret['days'] = days;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.StreamingLoggingConfig/2911843366\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var bucket = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var enabled = interpretGwtArg(tracker);\n        var prefix = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['bucket'] = bucket;\n        ret['enabled'] = enabled;\n        ret['prefix'] = prefix;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.S3Origin/2254162173\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var domainname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var identity = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['domainname'] = domainname;\n        ret['identity'] = identity;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.TrustedSigners/178143467\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var enabled = interpretGwtArg(tracker);\n        var items = interpretGwtArg(tracker);\n        var quantity = interpretGwtArg(tracker);\n\n        ret['enabled'] = enabled;\n        ret['items'] = items;\n        ret['quantity'] = quantity;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.wizard.CreateVPCWithPublicSubnet/3792845633\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var amazonprovidedipv6 = interpretGwtArg(tracker);\n        var publicsubnetlocation = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var igw = interpretGwtArg(tracker);\n        var stepnumber = interpretGwtArg(tracker);\n        var subnetcustomipv6 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var routetable = interpretGwtArg(tracker);\n        var routetableassociationid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var subnet = interpretGwtArg(tracker);\n        var subnetcidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var subnetname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown5 = interpretGwtArg(tracker);\n        var unknown6 = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var unknown7 = interpretGwtArg(tracker);\n        var enablednshostnames = (parseInt(tracker.pipesplit[tracker.cursor]) == 1);\n        tracker.cursor += 1;\n        var unknown9 = interpretGwtArg(tracker);\n        var unknown10 = interpretGwtArg(tracker);\n        var tenancy = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var vpcobject = interpretGwtArg(tracker);\n        var vpccidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var vpcname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n\n        ret['amazonprovidedipv6'] = amazonprovidedipv6;\n        ret['publicsubnetlocation'] = publicsubnetlocation;\n        ret['igw'] = igw;\n        ret['stepnumber'] = stepnumber;\n        ret['subnetcustomipv6'] = subnetcustomipv6;\n        ret['routetable'] = routetable;\n        ret['routetableassociationid'] = routetableassociationid;\n        ret['subnet'] = subnet;\n        ret['subnetcidr'] = subnetcidr;\n        ret['subnetname'] = subnetname;\n        ret['unknown5'] = unknown5;\n        ret['unknown6'] = unknown6;\n        ret['unknown7'] = unknown7;\n        ret['enablednshostnames'] = enablednshostnames;\n        ret['unknown9'] = unknown9;\n        ret['unknown10'] = unknown10;\n        ret['tenancy'] = tenancy;\n        ret['vpcobject'] = vpcobject;\n        ret['vpccidr'] = vpccidr;\n        ret['vpcname'] = vpcname;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.wizard.CreateVPCWithPublicSubnet$PublicOnlySteps/3843543372\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var stepnumber = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        ret['stepnumber'] = stepnumber;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.Vpc/3236476168\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var vpcid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var vpcstatus = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var vpccidrblock = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var dhcpoptionsid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var dhcpoptionsid2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var routetableid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var routetableid2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var aclid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var aclid2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var tenancy = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n        var tags = interpretGwtArg(tracker);\n        var unknown2 = interpretGwtArg(tracker);\n        var unknown3 = interpretGwtArg(tracker);\n        var cidrblockassociations = interpretGwtArg(tracker);\n        var ipv6cidrblockassociations = interpretGwtArg(tracker);\n        var unknownstring1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['vpcid'] = vpcid;\n        ret['vpcstatus'] = vpcstatus;\n        ret['vpccidrblock'] = vpccidrblock;\n        ret['dhcpoptionsid'] = dhcpoptionsid;\n        ret['dhcpoptionsid2'] = dhcpoptionsid2;\n        ret['routetableid'] = routetableid;\n        ret['routetableid2'] = routetableid2;\n        ret['aclid'] = aclid;\n        ret['aclid2'] = aclid2;\n        ret['tenancy'] = tenancy;\n        ret['unknown1'] = unknown1;\n        ret['tags'] = tags;\n        ret['unknown2'] = unknown2;\n        ret['unknown3'] = unknown3;\n        ret['cidrblockassociations'] = cidrblockassociations;\n        ret['ipv6cidrblockassociations'] = ipv6cidrblockassociations;\n        ret['unknownstring1'] = unknownstring1;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.Subnet/3680019525\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var subnetid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var status = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var vpcid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n        var subnetcidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var ipv6cidrassociations = interpretGwtArg(tracker);\n        var unknownint = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var availabilityzone = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown3 = interpretGwtArg(tracker);\n        var unknown4 = interpretGwtArg(tracker);\n        var unknown5 = interpretGwtArg(tracker);\n        var tags = interpretGwtArg(tracker);\n        var unknown6 = interpretGwtArg(tracker);\n        var unknown7 = interpretGwtArg(tracker);\n        var unknown8 = interpretGwtArg(tracker);\n        var unknown9 = interpretGwtArg(tracker);\n\n        ret['subnetid'] = subnetid;\n        ret['status'] = status;\n        ret['vpcid'] = vpcid;\n        ret['unknown1'] = unknown1;\n        ret['subnetcidr'] = subnetcidr;\n        ret['ipv6cidrassociations'] = ipv6cidrassociations;\n        ret['unknownint'] = unknownint;\n        ret['availabilityzone'] = availabilityzone;\n        ret['unknown3'] = unknown3;\n        ret['unknown4'] = unknown4;\n        ret['unknown5'] = unknown5;\n        ret['tags'] = tags;\n        ret['unknown6'] = unknown6;\n        ret['unknown7'] = unknown7;\n        ret['unknown8'] = unknown8;\n        ret['unknown9'] = unknown9;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.Tag/2711077645\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var key = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var value = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['key'] = key;\n        ret['value'] = value;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.CidrBlockAssociation/2848919076\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var associationid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var status = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['associationid'] = associationid;\n        ret['cidr'] = cidr;\n        ret['status'] = status;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.IPv6SubnetCidrBlockAssociation/3374664153\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var associationid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var status = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['associationid'] = associationid;\n        ret['cidr'] = cidr;\n        ret['status'] = status;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"amazonaws.console.vpc.dtos.IPv6VpcCidrBlockAssociation/1461627452\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var associationid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var cidr = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var status = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['associationid'] = associationid;\n        ret['cidr'] = cidr;\n        ret['status'] = status;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CustomErrorResponses/1121464496\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(\"###TEMP\"); // TODO: Fix\n        tracker.resolvedObjects.push(\"###TEMP\"); // TODO: Fix\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CacheBehaviors/2829792424\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CookiePreference/3547444623\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var preference = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['preference'] = preference;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CookieNames/65691594\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var cookienames = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['cookienames'] = cookienames;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.Headers/1360842881\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var headers = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['headers'] = headers;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.QueryStringCacheKeys/3357483778\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var keys = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['keys'] = keys;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.LambdaFunctionAssociations/968553882\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var associations = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['associations'] = associations;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.Origins/2653494639\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var origins = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['origins'] = origins;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.CustomHeaders/706640089\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var headers = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n\n        ret['headers'] = headers;\n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.S3OriginConfig/3065886742\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var originaccessid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['originaccessid'] = originaccessid;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.OriginCustomHeader/4282815861\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var key = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var value = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['key'] = key;\n        ret['value'] = value;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.Origin/1619145402\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var customheaders = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n        var domainname = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var originid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var path = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var s3originconfig = interpretGwtArg(tracker);\n\n        ret['customheaders'] = customheaders;\n        ret['unknown1'] = unknown1;\n        ret['domainname'] = domainname;\n        ret['originid'] = originid;\n        ret['path'] = path;\n        ret['s3originconfig'] = s3originconfig;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.LoggingConfig/2208632355\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var bucket = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var enabled = interpretGwtArg(tracker);\n        var includecookies = interpretGwtArg(tracker);\n        var prefix = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['bucket'] = bucket;\n        ret['enabled'] = enabled;\n        ret['includecookies'] = includecookies;\n        ret['prefix'] = prefix;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.ForwardedValues/1684831373\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var cookiepreference = interpretGwtArg(tracker);\n        var cookienames = interpretGwtArg(tracker);\n        var headers = interpretGwtArg(tracker);\n        var querystring = interpretGwtArg(tracker);\n        var querystringcachekeys = interpretGwtArg(tracker);\n\n        ret['cookiepreference'] = cookiepreference;\n        ret['cookienames'] = cookienames;\n        ret['headers'] = headers;\n        ret['querystring'] = querystring;\n        ret['querystringcachekeys'] = querystringcachekeys;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.Restrictions/923540952\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var geo = interpretGwtArg(tracker);\n        \n        ret['geo'] = geo;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.GeoRestriction/1846888439\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n        \n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.ViewerCertificate/2542029139\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n        \n        ret['unknown1'] = unknown1;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.DefaultCacheBehavior/3349440463\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var type1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var type2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var listtype1 = interpretGwtArg(tracker);\n        var counttype1 = interpretGwtArg(tracker);\n        var listtype2 = interpretGwtArg(tracker);\n        var counttype2 = interpretGwtArg(tracker);\n        var compress = interpretGwtArg(tracker);\n        var defaultttl = interpretGwtArg(tracker);\n        var unknownstring1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var forwardvalues = interpretGwtArg(tracker);\n        var lambdafunctionassociations = interpretGwtArg(tracker);\n        var maxttl = interpretGwtArg(tracker);\n        var minttl = interpretGwtArg(tracker);\n        var smooth = interpretGwtArg(tracker);\n        var targetoriginid = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var trustedsigners = interpretGwtArg(tracker);\n        \n        ret['type1'] = type1;\n        ret['type2'] = type2;\n        ret['listtype1'] = listtype1;\n        ret['counttype1'] = counttype1;\n        ret['listtype2'] = listtype2;\n        ret['counttype2'] = counttype2;\n        ret['compress'] = compress;\n        ret['defaultttl'] = defaultttl;\n        ret['unknownstring1'] = unknownstring1;\n        ret['forwardvalues'] = forwardvalues;\n        ret['lambdafunctionassociations'] = lambdafunctionassociations;\n        ret['maxttl'] = maxttl;\n        ret['minttl'] = minttl;\n        ret['smooth'] = smooth;\n        ret['targetoriginid'] = targetoriginid;\n        ret['trustedsigners'] = trustedsigners;\n\n        return ret;\n    } else if (arg_type == \"com.amazonaws.services.cloudfront.model.DistributionConfig/1312485537\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var aliases = interpretGwtArg(tracker);\n        var cachebehaviours = interpretGwtArg(tracker);\n        var unknownint1 = interpretGwtArg(tracker);\n        var timestamp = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var comment = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var customerrorresponses = interpretGwtArg(tracker);\n        var unknown1 = interpretGwtArg(tracker);\n        var defaultcachebehaviour = interpretGwtArg(tracker);\n        var viewerprotocolpolicy = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var rootobject = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var enabled = interpretGwtArg(tracker);\n        var supportedhttpversion = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var ipv6support = interpretGwtArg(tracker);\n        var loggingconfig = interpretGwtArg(tracker);\n        var unknown4 = interpretGwtArg(tracker);\n        var origins = interpretGwtArg(tracker);\n        var priceclass = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var restrictions = interpretGwtArg(tracker);\n        var unknown5 = interpretGwtArg(tracker);\n        var unknownstring1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var viewercertificate = interpretGwtArg(tracker);\n        var unknown6 = interpretGwtArg(tracker);\n        var unknown7 = interpretGwtArg(tracker);\n        var unknown8 = interpretGwtArg(tracker);\n        var unknown9 = interpretGwtArg(tracker);\n        var tlsversion = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknownstring2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknownstring3 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n\n        ret['aliases'] = aliases;\n        ret['cachebehaviours'] = cachebehaviours;\n        ret['unknownint1'] = unknownint1;\n        ret['timestamp'] = timestamp;\n        ret['comment'] = comment;\n        ret['customerrorresponses'] = customerrorresponses;\n        ret['unknown1'] = unknown1;\n        ret['defaultcachebehaviour'] = defaultcachebehaviour;\n        ret['viewerprotocolpolicy'] = viewerprotocolpolicy;\n        ret['rootobject'] = rootobject;\n        ret['enabled'] = enabled;\n        ret['supportedhttpversion'] = supportedhttpversion;\n        ret['ipv6support'] = ipv6support;\n        ret['loggingconfig'] = loggingconfig;\n        ret['unknown4'] = unknown4;\n        ret['origins'] = origins;\n        ret['priceclass'] = priceclass;\n        ret['restrictions'] = restrictions;\n        ret['unknown5'] = unknown5;\n        ret['unknownstring1'] = unknownstring1;\n        ret['viewercertificate'] = viewercertificate;\n        ret['unknown6'] = unknown6;\n        ret['unknown7'] = unknown7;\n        ret['unknown8'] = unknown8;\n        ret['unknown9'] = unknown9;\n        ret['tlsversion'] = tlsversion;\n        ret['unknownstring2'] = unknownstring2;\n        ret['unknownstring3'] = unknownstring3;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.Role/1394926005\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var arn = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknownarray1 = interpretGwtArg(tracker);\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var unknownstring1 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var name2 = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['arn'] = arn;\n        ret['unknownarray1'] = unknownarray1;\n        ret['name'] = name;\n        ret['unknownstring1'] = unknownstring1;\n        ret['name2'] = name2;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.DefaultObjectProperties/1857086444\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var pipelinerole = interpretGwtArg(tracker);\n        \n        ret['pipelinerole'] = pipelinerole;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.Ending/1349908719\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var endingtype = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var unknownbool1 = interpretGwtArg(tracker);\n        var occurancecount = interpretGwtArg(tracker);\n        \n        ret['endingtype'] = endingtype;\n        ret['unknownbool1'] = unknownbool1;\n        ret['occurancecount'] = occurancecount;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.typeDef.StandardScheduleType/3790816381\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var scheduletype = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        \n        ret['scheduletype'] = scheduletype;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.Starting/360569834\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var timestamp = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var startingtype = interpretGwtArg(tracker);\n        \n        ret['timestamp'] = timestamp;\n        ret['startingtype'] = startingtype;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.Starting$Type/1371883812\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var startingtype = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        \n        ret['startingtype'] = startingtype;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.ScheduleInfo/2346623989\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var ending = interpretGwtArg(tracker);\n        var runeverynumber = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n        var runeverymetric = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var scheduletype = interpretGwtArg(tracker);\n        var starting = interpretGwtArg(tracker);\n        \n        ret['ending'] = ending;\n        ret['runeverynumber'] = runeverynumber;\n        ret['runeverymetric'] = runeverymetric;\n        ret['scheduletype'] = scheduletype;\n        ret['starting'] = starting;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineDefinition/1154738008\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var objects = interpretGwtArg(tracker);\n        \n        ret['objects'] = objects;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.ObjectId/1185543638\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var id = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['id'] = id;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineId/2380834385\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var id = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['id'] = id;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.EdpValues/3097304520\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var values = interpretGwtArg(tracker);\n        \n        ret['values'] = values;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.EdpValue/3514483194\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n        var value = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['unknown1'] = unknown1;\n        ret['value'] = value;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.EdpObject/4062271627\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var unknown1 = interpretGwtArg(tracker);\n        var unknown2 = interpretGwtArg(tracker);\n        var unknown3 = interpretGwtArg(tracker);\n        var pipelineid = interpretGwtArg(tracker);\n        var values = interpretGwtArg(tracker);\n        \n        ret['unknown1'] = unknown1;\n        ret['unknown2'] = unknown2;\n        ret['unknown3'] = unknown3;\n        ret['pipelineid'] = pipelineid;\n        ret['values'] = values;\n\n        return ret;\n    } else if (arg_type == \"java.util.HashMap/1797211028\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var items = [];\n\n        var itemcount = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        for (var i=0; i<itemcount; i++) {\n            items.push({\n                'key': interpretGwtArg(tracker),\n                'value': interpretGwtArg(tracker)\n            });\n        }\n        \n        ret['items'] = items;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineParameterValues/461930119\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var values = interpretGwtArg(tracker);\n        \n        ret['values'] = values;\n\n        return ret;\n    } else if (arg_type == \"com.google.common.collect.LinkedListMultimap/1729837690\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var items = [];\n\n        var itemcount = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        for (var i=0; i<itemcount; i++) {\n            items.push({\n                'key': interpretGwtArg(tracker),\n                'value': interpretGwtArg(tracker)\n            });\n        }\n        \n        ret['items'] = items;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineParametersObjects/3330658573\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var objects = interpretGwtArg(tracker);\n        \n        ret['objects'] = objects;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineParameterObject/4140314217\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var values = interpretGwtArg(tracker);\n        \n        ret['values'] = values;\n\n        return ret;\n    } else if (arg_type == \"com.google.common.collect.ArrayListMultimap/3900168773\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var items = [];\n\n        var itemcount = parseInt(tracker.pipesplit[tracker.cursor]);\n        tracker.cursor += 1;\n\n        for (var i=0; i<itemcount; i++) {\n            var key = interpretGwtArg(tracker);\n            var valuecount = parseInt(tracker.pipesplit[tracker.cursor]);\n            tracker.cursor += 1;\n            var values = [];\n            for (var j=0; j<valuecount; j++) {\n                values.push(interpretGwtArg(tracker));\n            }\n            items.push({\n                'key': key,\n                'value': values\n            });\n        }\n        \n        ret['items'] = items;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.model.PipelineTag/4209464192\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(ret);\n\n        var tagkey = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var tagvalue = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['tagkey'] = tagkey;\n        ret['tagvalue'] = tagvalue;\n\n        return ret;\n    } else if (arg_type == \"edp.console.client.commands.CreatePipelineAction/2605870699\") {\n        var ret = {\n            'type': arg_type\n        }\n        tracker.resolvedObjects.push(\"###TEMP\");\n        tracker.resolvedObjects.push(ret);\n\n        var defaultobjectproperties = interpretGwtArg(tracker);\n        var logginglocation = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var ec2instancerole = interpretGwtArg(tracker);\n        var scheduleinfo = interpretGwtArg(tracker);\n        var pipelinedefinition = interpretGwtArg(tracker);\n        var pipelineid = interpretGwtArg(tracker);\n        var description = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var name = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        var pipelineparametervalues = interpretGwtArg(tracker);\n        var pipelineparameterobjects = interpretGwtArg(tracker);\n        var tags = interpretGwtArg(tracker);\n        var pipelinedefinitionjson = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n        tracker.cursor += 1;\n        \n        ret['defaultobjectproperties'] = defaultobjectproperties;\n        ret['logginglocation'] = logginglocation;\n        ret['ec2instancerole'] = ec2instancerole;\n        ret['scheduleinfo'] = scheduleinfo;\n        ret['pipelinedefinition'] = pipelinedefinition;\n        ret['pipelineid'] = pipelineid;\n        ret['description'] = description;\n        ret['name'] = name;\n        ret['pipelineparametervalues'] = pipelineparametervalues;\n        ret['pipelineparameterobjects'] = pipelineparameterobjects;\n        ret['tags'] = tags;\n        ret['pipelinedefinitionjson'] = pipelinedefinitionjson;\n\n        return ret;\n    } else {\n        var ret = {\n            'type': 'unknown'\n        };\n        tracker.resolvedObjects.push(ret);\n\n        console.log(\"Unknown GWT type: \" + arg_type);\n        console.log(tracker.cursor);\n        console.dir(tracker);\n\n        var val = tracker.pipesplit[tracker.cursor];\n        tracker.cursor += 1;\n\n        ret['value'] = val;\n\n        return ret;\n    }\n}\n\nfunction interpretGwtWireRequest(str) {\n    var xsrfRequested = false;\n    var args = [];\n    var arg_types = [];\n\n    if (!str) return {};\n    if (str.split(\"|\").length < 5) return {};\n\n    var tracker = {\n        'params': [null], // 1-indexed\n        'cursor': 0,\n        'args': [],\n        'resolvedObjects': [null], // 1-indexed\n        'pipesplit': str.split(\"|\")\n    }\n\n    if (parseInt(tracker.pipesplit[tracker.cursor]) != 7) {\n        return {};\n    }\n    tracker.cursor += 1;\n\n    if (parseInt(tracker.pipesplit[tracker.cursor]) == 2) {\n        xsrfRequested = true;\n    }\n    tracker.cursor += 1;\n\n    var param_count = parseInt(tracker.pipesplit[tracker.cursor]);\n\n    for (var i=0; i<param_count; i++) {\n        tracker.cursor += 1;\n        tracker.params.push(tracker.pipesplit[tracker.cursor]);\n    }\n    tracker.cursor += 1;\n\n    var endpoint = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n    tracker.cursor += 1;\n    var policy_file = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n    tracker.cursor += 1;\n    if (xsrfRequested) {\n        tracker.cursor += 2;\n    }\n    var service = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n    tracker.cursor += 1;\n    var method = tracker.params[parseInt(tracker.pipesplit[tracker.cursor])];\n    tracker.cursor += 1;\n    var num_args = parseInt(tracker.pipesplit[tracker.cursor]);\n    tracker.cursor += 1;\n\n    for (var i=0; i<num_args; i++) {\n        arg_types.push(tracker.params[parseInt(tracker.pipesplit[tracker.cursor])]);\n        tracker.cursor += 1;\n    }\n\n    if (service == \"amazonaws.console.vpc.client.VpcConsoleService\" && method == \"modifyIngressRulesForNetworkACL\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'region'\n        });\n\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'aclId'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[2]),\n            'name': 'rules'\n        });\n    } else if (service == \"amazonaws.console.vpc.client.VpcConsoleService\" && method == \"createVpcWithPublicSubnet\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'region'\n        });\n\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[1]),\n            'name': 'createvpcwithpublicsubnetargs'\n        });\n    } else if (service == \"amazonaws.console.vpc.client.VpcConsoleService\" && method == \"getVpcs\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'region'\n        });\n\n        args.push({\n            'value': tracker.pipesplit[tracker.cursor],\n            'name': 'null'\n        });\n        tracker.cursor += 1;\n    } else if (service == \"com.amazonaws.console.sqs.shared.services.AmazonSQSService\" && method == \"createQueue\") {\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'queueName'\n        });\n    } else if (service == \"amazonaws.console.vpc.client.VpcConsoleService\" && method == \"createVpc\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'region'\n        });\n\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'cidr'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'tenancy'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[3]),\n            'name': 'ipv6ProvidedBlock'\n        });\n    } else if (service == \"amazonaws.console.vpc.client.VpcConsoleService\" && method == \"updateRoutesForARouteTable\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'region'\n        });\n\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'routeTableId'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[2]),\n            'name': 'routes'\n        });\n    } else if (service == \"com.amazon.bacon.console.shared.services.SESService\" && method == \"createConfigurationSet\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'configurationSetName'\n        });\n    } else if (service == \"com.amazon.bacon.console.shared.services.SESService\" && method == \"saveConfigurationSetEventDestination\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'configurationSetName'\n        });\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[1]),\n            'name': 'configurationDestination'\n        });\n    } else if (service == \"com.amazon.bacon.console.shared.services.SESService\" && method == \"deleteConfigurationSet\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'configurationSetName'\n        });\n    } else if (service == \"com.amazon.bacon.console.shared.services.SESService\" && method == \"createReceiptFilter\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'inboundFilter'\n        });\n    } else if (service == \"com.amazon.bacon.console.shared.services.SESService\" && method == \"createReceiptRule\") {\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'ruleset'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'afterrule'\n        });\n        tracker.cursor += 1;\n\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[2]),\n            'name': 'rule'\n        });\n    } else if (service == \"com.amazonaws.cloudfront.console.gwt.CloudFrontService\" && method == \"createOai\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'identityConfig'\n        });\n    } else if (service == \"com.amazonaws.cloudfront.console.gwt.CloudFrontService\" && method == \"createStreamingDistribution\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'streamingDistributionConfig'\n        });\n    } else if (service == \"com.amazonaws.swf.console.gwtcoral.client.com.amazonaws.swf.service.model.SimpleWorkflowService\" && method == \"RegisterDomain\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'registerdomaininput'\n        });\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'region'\n        });\n    } else if (service == \"com.amazonaws.route53.console.gwt.Route53Service\" && method == \"changeResourceRecordSets\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'zoneid'\n        });\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[1]),\n            'name': 'change'\n        });\n    } else if (service == \"com.amazonaws.cloudfront.console.shared.service.DistributionService\" && method == \"createDistribution\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'distributionconfigs'\n        });\n    } else if (service == \"edp.console.client.dispatch.DispatchService\" && method == \"dispatch\") {\n        args.push({\n            'value': interpretGwtArg(tracker, arg_types[0]),\n            'name': 'dispatchaction'\n        });\n        args.push({\n            'value': tracker.params[parseInt(tracker.pipesplit[tracker.cursor])],\n            'name': 'uniqueid'\n        });\n    }\n\n    return {\n        'endpoint': endpoint,\n        'service': service,\n        'method': method,\n        'params': tracker.params,\n        'resolved_objects': tracker.resolvedObjects,\n        'num_args': num_args,\n        'args': args\n    };\n}\n\nfunction MD5(e) {\n    function h(a, b) {\n        var c, d, e, f, g;\n        e = a & 2147483648;\n        f = b & 2147483648;\n        c = a & 1073741824;\n        d = b & 1073741824;\n        g = (a & 1073741823) + (b & 1073741823);\n        return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f\n    }\n\n    function k(a, b, c, d, e, f, g) {\n        a = h(a, h(h(b & c | ~b & d, e), g));\n        return h(a << f | a >>> 32 - f, b)\n    }\n\n    function l(a, b, c, d, e, f, g) {\n        a = h(a, h(h(b & d | c & ~d, e), g));\n        return h(a << f | a >>> 32 - f, b)\n    }\n\n    function m(a, b, d, c, e, f, g) {\n        a = h(a, h(h(b ^ d ^ c, e), g));\n        return h(a << f | a >>> 32 - f, b)\n    }\n\n    function n(a, b, d, c, e, f, g) {\n        a = h(a, h(h(d ^ (b | ~c), e), g));\n        return h(a << f | a >>> 32 - f, b)\n    }\n\n    function p(a) {\n        var b = \"\",\n            d = \"\",\n            c;\n        for (c = 0; 3 >= c; c++) d = a >>> 8 * c & 255, d = \"0\" + d.toString(16), b += d.substr(d.length - 2, 2);\n        return b\n    }\n    var f = [],\n        q, r, s, t, a, b, c, d;\n    e = function(a) {\n        a = a.replace(/\\r\\n/g, \"\\n\");\n        for (var b = \"\", d = 0; d < a.length; d++) {\n            var c = a.charCodeAt(d);\n            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128))\n        }\n        return b\n    }(e);\n    f = function(b) {\n        var a, c = b.length;\n        a = c + 8;\n        for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;\n        a = (g - g % 4) / 4;\n        e[a] |= 128 << g % 4 * 8;\n        e[d - 2] = c << 3;\n        e[d - 1] = c >>> 29;\n        return e\n    }(e);\n    a = 1732584193;\n    b = 4023233417;\n    c = 2562383102;\n    d = 271733878;\n    for (e = 0; e < f.length; e += 16) q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);\n    return (p(a) + p(b) + p(c) + p(d)).toLowerCase()\n};\n\nfunction notifyBlocked() {\n    console.log(\"Calling notify\");\n    chrome.notifications.create(null, {\n        type: \"basic\",\n        title: \"Console Recorder\",\n        message: \"An AWS console request was blocked.\",\n        iconUrl: \"icon-128.png\",\n        buttons: [\n            {\n                'title': 'View Outputs'\n            }\n        ]\n    });\n}\n\nfunction ensureInitDeclaredJs(service, region) {\n    if (!declared_services['js'].includes(service)) {\n        var mappedservice = mapServiceJs(service);\n        declared_services['js'].push(service);\n        return `\n\nvar ${service} = new AWS.${mappedservice}({region: '${region}'});\n`;\n    }\n    return '';\n}\n\nfunction ensureInitDeclaredBoto3(service, region) {\n    if (!declared_services['boto3'].includes(service)) {\n        declared_services['boto3'].push(service);\n        return `\n${service}_client = boto3.client('${service}', region_name='${region}')\n\n`;\n    }\n    return '';\n}\n\nfunction ensureInitDeclaredGo(service, region) {\n    if (!declared_services['go'].includes(service)) {\n        var mappedservice = mapServiceJs(service).toLowerCase().replace(/\\-/g,'');\n        declared_services['go'].push(service);\n        return `\n    ${service}svc := ${mappedservice}.New(session.New(&aws.Config{Region: aws.String(\"${region}\")}))\n\n`;\n    }\n    return '';\n}\n\nfunction processTfParameter(param, spacing, index) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return 'true';\n        return 'false';\n    }\n    if (typeof param == \"number\") {\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && tracked_resources[i].returnValues.Terraform) {\n                for (var attr_name in tracked_resources[i].returnValues.Terraform) {\n                    if (tracked_resources[i].returnValues.Terraform[attr_name] == param) {\n                        return \"\\\"${\" + tracked_resources[i].terraformType + \".\" + tracked_resources[i].logicalId + \".\" + attr_name + \"}\\\"\"\n                    }\n                }\n            }\n        }\n\n        return `${param}`;\n    }\n    if (typeof param == \"string\") {\n        if (param.startsWith(\"!Ref \") || param.startsWith(\"!GetAtt \")) {\n            return undefined;\n        }\n\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && tracked_resources[i].returnValues.Terraform) {\n                for (var attr_name in tracked_resources[i].returnValues.Terraform) {\n                    if (tracked_resources[i].returnValues.Terraform[attr_name] == param) {\n                        return \"\\\"${\" + tracked_resources[i].terraformType + \".\" + tracked_resources[i].logicalId + \".\" + attr_name + \"}\\\"\"\n                    }\n                }\n            }\n        }\n\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"<<EOF\\n\" + string_return + \"\\nEOF\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/\\\"/g,`\\\\\"`);\n\n        return `\"${string_return}\"`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            paramitems.push(processTfParameter(paramitem, spacing + 4, index));\n        });\n\n        return `[\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + `]`;\n    }\n    if (typeof param == \"object\") {\n        if (Object.keys(param).length === 0 && param.constructor === Object) {\n            return \"{}\";\n        }\n\n        Object.keys(param).forEach(function (key) {\n            var subvalue = processTfParameter(param[key], spacing + 4, index);\n            if (subvalue !== undefined) {\n                if (subvalue[0] == '{') {\n                    paramitems.push(key + \" \" + subvalue);\n                } else {\n                    paramitems.push(key + \" = \" + subvalue);\n                }\n            }\n        });\n\n        return `{\n` + ' '.repeat(spacing + 4) + paramitems.join(`\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + `}`;\n    }\n    \n    return undefined;\n}\n\nfunction processCfnParameter(param, spacing, index) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return 'true';\n        return 'false';\n    }\n    if (typeof param == \"number\") {\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues) {\n                if (tracked_resources[i].returnValues.Ref == param) {\n                    return \"!Ref \" + tracked_resources[i].logicalId;\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (tracked_resources[i].returnValues.GetAtt[attr_name] === param) {\n                            return \"!GetAtt \" + tracked_resources[i].logicalId + \".\" + attr_name;\n                        }\n                    }\n                }\n            }\n        }\n\n        return `${param}`;\n    }\n    if (typeof param == \"string\") {\n        if (param.startsWith(\"!Ref \") || param.startsWith(\"!GetAtt \")) {\n            return `${param}`;\n        }\n\n        var pre_return_str = \"\";\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && param != \"\") {\n                if (\n                    tracked_resources[i].returnValues.Ref == param &&\n                    tracked_resources[i].returnValues.Ref != \"\" &&\n                    tracked_resources[i].returnValues.Ref != []\n                ) {\n                    return \"!Ref \" + tracked_resources[i].logicalId;\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (\n                            tracked_resources[i].returnValues.GetAtt[attr_name] === param &&\n                            tracked_resources[i].returnValues.GetAtt[attr_name] != \"\" &&\n                            tracked_resources[i].returnValues.GetAtt[attr_name] != []\n                        ) {\n                            return \"!GetAtt \" + tracked_resources[i].logicalId + \".\" + attr_name;\n                        }\n                    }\n                }\n                if (\n                    param.includes(tracked_resources[i].returnValues.Ref) &&\n                    tracked_resources[i].returnValues.Ref != \"\" &&\n                    tracked_resources[i].returnValues.Ref != []\n                ) {\n                    for (var j=0; j<10 && param.includes(tracked_resources[i].returnValues.Ref); j++) { // replace many\n                        pre_return_str = \"!Sub \";\n                        param = param.replace(tracked_resources[i].returnValues.Ref, \"${\" + tracked_resources[i].logicalId + \"}\");\n                    }\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (\n                            param.includes(tracked_resources[i].returnValues.GetAtt[attr_name]) &&\n                            tracked_resources[i].returnValues.GetAtt[attr_name] != \"\" &&\n                            tracked_resources[i].returnValues.GetAtt[attr_name] != []\n                        ) {\n                            for (var j=0; j<10; j++) { // replace many\n                                pre_return_str = \"!Sub \";\n                                param = param.replace(tracked_resources[i].returnValues.GetAtt[attr_name], \"${\" + tracked_resources[i].logicalId + \".\" + attr_name + \"}\");\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"|\\n\" + ' '.repeat(spacing + 4) + string_return.replace(/\\n/g, `\\n` + ' '.repeat(spacing + 4));\n            return pre_return_str + string_return;\n        }\n        \n        string_return = param.replace(/\\\"/g,`\\\\\"`);\n\n        return pre_return_str + `\"${string_return}\"`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            paramitems.push(processCfnParameter(paramitem, spacing, index));\n        });\n\n        if (cfn_spacing.length == 4) {\n            return `\n` + ' '.repeat(spacing + 2) + \"- \" + paramitems.join(`\n` + ' '.repeat(spacing + 2) + \"- \");\n        }\n        \n        return `\n` + ' '.repeat(spacing) + \"- \" + paramitems.join(`\n` + ' '.repeat(spacing) + \"- \");\n    }\n    if (typeof param == \"object\") {\n        if (Object.keys(param).length === 0 && param.constructor === Object) {\n            return \"!Ref \\\"AWS::NoValue\\\"\";\n        }\n\n        Object.keys(param).forEach(function (key) {\n            var subvalue = processCfnParameter(param[key], spacing + cfn_spacing.length, index);\n            if (subvalue !== undefined) {\n                paramitems.push(key + \": \" + subvalue);\n            }\n        });\n\n        if (paramitems.length < 1) {\n            return \"!Ref \\\"AWS::NoValue\\\"\";\n        }\n\n        return `\n` + ' '.repeat(spacing + cfn_spacing.length) + paramitems.join(`\n` + ' '.repeat(spacing + cfn_spacing.length))\n    }\n    \n    return undefined;\n}\n\nfunction processCdktsParameter(param, spacing, index) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return \"true\";\n        return \"false\";\n    }\n    if (typeof param == \"number\")\n        return `${param}`;\n    if (typeof param == \"string\") {\n        if (param.startsWith(\"!Ref \") || param.startsWith(\"!GetAtt \")) {\n            return undefined; // TODO: Fix this\n        }\n\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && param != \"\") {\n                if (tracked_resources[i].returnValues.Ref == param) {\n                    return tracked_resources[i].logicalId + \".ref\";\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (tracked_resources[i].returnValues.GetAtt[attr_name] === param) {\n                            return tracked_resources[i].logicalId + \".getAtt('\" + attr_name + \"')\"\n                        }\n                    }\n                }\n            }\n        }\n\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"`\" + string_return + \"`\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/\\\"/g,`\\\\\"`);\n\n        return `\"${string_return}\"`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            var item = processCdktsParameter(paramitem, spacing + 4, index);\n            if (item !== undefined) {\n                paramitems.push(item);\n            }\n        });\n\n        return `[\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + ']';\n    }\n    if (typeof param == \"object\") {\n        Object.keys(param).forEach(function (key) {\n            var item = processCdktsParameter(param[key], spacing + 4, index);\n            if (item !== undefined) {\n                paramitems.push(lcfirststr(key) + \": \" + item);\n            }\n        });\n\n        return `{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + '}';\n    }\n    \n    return undefined;\n}\n\nfunction processTroposphereParameter(param, spacing, keyname, index) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return `True`;\n        return `False`;\n    }\n    if (typeof param == \"number\") {\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && param != \"\") {\n                if (tracked_resources[i].returnValues.Ref == param) {\n                    return \"Ref(\" + tracked_resources[i].logicalId + \")\";\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (tracked_resources[i].returnValues.GetAtt[attr_name] === param) {\n                            return \"GetAtt(\" + tracked_resources[i].logicalId + \", '\" + attr_name + \"')\";\n                        }\n                    }\n                }\n            }\n        }\n\n        return `${param}`;\n    }\n    if (typeof param == \"string\") {\n        if (param.startsWith(\"!Ref \")) {\n            return `Ref(${param.substring(5)})`;\n        }\n        if (param.startsWith(\"!GetAtt \")) {\n            return undefined;\n        }\n\n        for (var i=0; i<index; i++) { // correlate\n            if (tracked_resources[i].returnValues && param != \"\") {\n                if (tracked_resources[i].returnValues.Ref == param) {\n                    return \"Ref(\" + tracked_resources[i].logicalId + \")\";\n                }\n                if (tracked_resources[i].returnValues.GetAtt) {\n                    for (var attr_name in tracked_resources[i].returnValues.GetAtt) {\n                        if (tracked_resources[i].returnValues.GetAtt[attr_name] === param) {\n                            return \"GetAtt(\" + tracked_resources[i].logicalId + \", '\" + attr_name + \"')\";\n                        }\n                    }\n                }\n            }\n        }\n\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"\\\"\\\"\\\"\" + ' '.repeat(spacing + 4) + string_return.replace(/\\n/g, `\\n` + ' '.repeat(spacing + 4)) + \"\\n\\\"\\\"\\\"\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/'/g,`\\\\'`);\n\n        return `'${string_return}'`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            var item = processTroposphereParameter(paramitem, spacing + 4, keyname, index);\n            if (item !== undefined) {\n                paramitems.push(item);\n            }\n        });\n\n        return `[\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + ']';\n    }\n    if (typeof param == \"object\") {\n        var propertyname = getTropospherePropertyName(keyname);\n\n        if (!propertyname) {\n            Object.keys(param).forEach(function (key) {\n                var item = processBoto3Parameter(param[key], spacing + 4); // intentional, to do raw array stuff\n                if (item !== undefined) {\n                    paramitems.push(\"\\\"\" + key + \"\\\": \" + item);\n                }\n            });\n\n            return `{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + '}';\n        }\n\n        Object.keys(param).forEach(function (key) {\n            var item = processTroposphereParameter(param[key], spacing + 4, keyname + \".\" + key, index);\n            if (item !== undefined) {\n                paramitems.push(key + \"=\" + item);\n            }\n        });\n\n        return `${propertyname}(\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + ')';\n    }\n    \n    return undefined;\n}\n\nfunction parseDynamoItem(obj) {\n    var ret = {};\n    \n    for (var key in obj) {\n        if (obj[key].type == \"String\") {\n            ret[obj[key].name] = {\n                \"S\": obj[key].stringValue\n            };\n        } else if (obj[key].type == \"Map\") {\n            ret[obj[key].name] = {\n                \"M\": parseDynamoItem(obj[key].mapValues)\n            };\n        } else if (obj[key].type == \"Binary\") {\n            ret[obj[key].name] = {\n                \"B\": obj[key].binaryValue\n            };\n        } else if (obj[key].type == \"BinarySet\") {\n            ret[obj[key].name] = {\n                \"BS\": obj[key].binarySetValues\n            };\n        } else if (obj[key].type == \"Boolean\") {\n            ret[obj[key].name] = {\n                \"BOOL\": obj[key].booleanValue\n            };\n        } else if (obj[key].type == \"List\") {\n            ret[obj[key].name] = {\n                \"L\": []\n            };\n            for (var j=0; j<obj[key].listValues.length; j++) {\n                ret[obj[key].name][\"L\"].push(parseDynamoItem(obj[key].listValues[j]));\n            }\n        } else if (obj[key].type == \"Null\") {\n            ret[obj[key].name] = {\n                \"NULL\": true\n            };\n        } else if (obj[key].type == \"Number\") {\n            ret[obj[key].name] = {\n                \"N\": Number(obj[key].numberValue)\n            };\n        } else if (obj[key].type == \"NumberSet\") {\n            ret[obj[key].name] = {\n                \"NS\": []\n            };\n            for (var j=0; j<obj[key].numberSetValues.length; j++) {\n                ret[obj[key].name][\"NS\"].push(Number(obj[key].numberSetValues[j]));\n            }\n        } else if (obj[key].type == \"StringSet\") {\n            ret[obj[key].name] = {\n                \"SS\": []\n            };\n            for (var j=0; j<obj[key].stringSetValues.length; j++) {\n                ret[obj[key].name][\"SS\"].push(obj[key].stringSetValues[j]);\n            }\n        }\n    }\n\n    return ret;\n}\n\nfunction getTropospherePropertyName(keyname) {\n    auto_generated_property_mapping = {\n        \"BaseRecordSet.AliasTarget\": \"AliasTarget\",\n        \"BaseRecordSet.GeoLocation\": \"GeoLocation\",\n        \"CreationPolicy.AutoScalingCreationPolicy\": \"AutoScalingCreationPolicy\",\n        \"CreationPolicy.ResourceSignal\": \"ResourceSignal\",\n        \"InitFile.context\": \"InitFileContext\",\n        \"LambdaConfigurations.Filter.S3Key.Rules\": \"Rules\",\n        \"RoleMapping.RulesConfiguration\": \"RulesConfiguration\",\n        \"RoleMapping.RulesConfiguration.Rules\": \"MappingRule\",\n        \"UpdatePolicy.AutoScalingReplacingUpdate\": \"AutoScalingReplacingUpdate\",\n        \"UpdatePolicy.AutoScalingRollingUpdate\": \"AutoScalingRollingUpdate\",\n        \"UpdatePolicy.AutoScalingScheduledAction\": \"AutoScalingScheduledAction\",\n        \"UpdatePolicy.CodeDeployLambdaAliasUpdate\": \"CodeDeployLambdaAliasUpdate\",\n        \"amazonmq.Configuration\": \"ConfigurationId\",\n        \"amazonmq.Logs\": \"LogsConfiguration\",\n        \"amazonmq.MaintenanceWindowStartTime\": \"MaintenanceWindow\",\n        \"amazonmq.Users\": \"User\",\n        \"analytics.Inputs\": \"Input\",\n        \"analytics.Inputs.InputParallelism\": \"InputParallelism\",\n        \"analytics.Inputs.InputProcessingConfiguration\": \"InputProcessingConfiguration\",\n        \"analytics.Inputs.InputProcessingConfiguration.InputLambdaProcessor\": \"InputLambdaProcessor\",\n        \"analytics.Inputs.InputSchema\": \"InputSchema\",\n        \"analytics.Inputs.InputSchema.RecordColumns\": \"RecordColumn\",\n        \"analytics.Inputs.InputSchema.RecordFormat\": \"RecordFormat\",\n        \"analytics.Inputs.InputSchema.RecordFormat.MappingParameters\": \"JSONMappingParameters\",\n        \"analytics.Inputs.KinesisFirehoseInput\": \"KinesisFirehoseInput\",\n        \"analytics.Inputs.KinesisStreamsInput\": \"KinesisStreamsInput\",\n        \"analytics.Output\": \"Output\",\n        \"analytics.Output.DestinationSchema\": \"DestinationSchema\",\n        \"analytics.Output.KinesisFirehoseOutput\": \"KinesisFirehoseOutput\",\n        \"analytics.Output.KinesisStreamsOutput\": \"KinesisStreamsOutput\",\n        \"analytics.Output.LambdaOutput\": \"LambdaOutput\",\n        \"analytics.ReferenceDataSource\": \"ReferenceDataSource\",\n        \"analytics.ReferenceDataSource.ReferenceSchema\": \"ReferenceSchema\",\n        \"analytics.ReferenceDataSource.ReferenceSchema.RecordColumns\": \"RecordColumn\",\n        \"analytics.ReferenceDataSource.ReferenceSchema.RecordFormat\": \"MappingParameters\",\n        \"analytics.ReferenceDataSource.S3ReferenceDataSource\": \"S3ReferenceDataSource\",\n        \"apigateway.AccesLogSetting\": \"AccessLogSetting\",\n        \"apigateway.ApiStages\": \"ApiStage\",\n        \"apigateway.ApiStages.Throttle\": \"ThrottleSettings\",\n        \"apigateway.BodyS3Location\": \"S3Location\",\n        \"apigateway.CanarySetting\": \"CanarySetting\",\n        \"apigateway.DeploymentCanarySettings\": \"DeploymentCanarySettings\",\n        \"apigateway.EndpointConfiguration\": \"EndpointConfiguration\",\n        \"apigateway.Integration\": \"Integration\",\n        \"apigateway.Integration.IntegrationResponses\": \"IntegrationResponse\",\n        \"apigateway.Location\": \"Location\",\n        \"apigateway.MethodResponses\": \"MethodResponse\",\n        \"apigateway.MethodSettings\": \"MethodSetting\",\n        \"apigateway.Quota\": \"QuotaSettings\",\n        \"apigateway.StageDescription\": \"StageDescription\",\n        \"apigateway.StageDescription.AccessLogSetting\": \"AccessLogSetting\",\n        \"apigateway.StageDescription.CanarySetting\": \"DeploymentCanarySettings\",\n        \"apigateway.StageDescription.MethodSettings\": \"MethodSetting\",\n        \"apigateway.StageKeys\": \"StageKey\",\n        \"apigateway.Throttle\": \"ThrottleSettings\",\n        \"applicationautoscaling.ScheduledActions\": \"ScheduledAction\",\n        \"applicationautoscaling.ScheduledActions.ScalableTargetAction\": \"ScalableTargetAction\",\n        \"applicationautoscaling.StepScalingPolicyConfiguration\": \"StepScalingPolicyConfiguration\",\n        \"applicationautoscaling.StepScalingPolicyConfiguration.StepAdjustments\": \"StepAdjustment\",\n        \"applicationautoscaling.TargetTrackingScalingPolicyConfiguration\": \"TargetTrackingScalingPolicyConfiguration\",\n        \"applicationautoscaling.TargetTrackingScalingPolicyConfiguration.CustomizedMetricSpecification\": \"MetricDimension\",\n        \"applicationautoscaling.TargetTrackingScalingPolicyConfiguration.PredefinedMetricSpecification\": \"PredefinedMetricSpecification\",\n        \"appsync.DynamoDBConfig\": \"DynamoDBConfig\",\n        \"appsync.ElasticsearchConfig\": \"ElasticsearchConfig\",\n        \"appsync.HttpConfig\": \"HttpConfig\",\n        \"appsync.LambdaConfig\": \"LambdaConfig\",\n        \"appsync.LogConfig\": \"LogConfig\",\n        \"appsync.OpenIDConnectConfig\": \"OpenIDConnectConfig\",\n        \"appsync.UserPoolConfig\": \"UserPoolConfig\",\n        \"autoscaling.BlockDeviceMappings\": \"BlockDeviceMapping\",\n        \"autoscaling.BlockDeviceMappings.Ebs\": \"EBSBlockDevice\",\n        \"autoscaling.LaunchTemplate\": \"LaunchTemplateSpecification\",\n        \"autoscaling.LifecycleHookSpecificationList\": \"LifecycleHookSpecification\",\n        \"autoscaling.Metadata\": \"Metadata\",\n        \"autoscaling.MetricsCollection\": \"MetricsCollection\",\n        \"autoscaling.NotificationConfigurations\": \"NotificationConfigurations\",\n        \"autoscaling.StepAdjustments\": \"StepAdjustments\",\n        \"autoscaling.TargetTrackingConfiguration\": \"TargetTrackingConfiguration\",\n        \"autoscaling.TargetTrackingConfiguration.CustomizedMetricSpecification\": \"MetricDimension\",\n        \"autoscaling.TargetTrackingConfiguration.PredefinedMetricSpecification\": \"PredefinedMetricSpecification\",\n        \"awslambda.Code\": \"Code\",\n        \"awslambda.DeadLetterConfig\": \"DeadLetterConfig\",\n        \"awslambda.Environment\": \"Environment\",\n        \"awslambda.RoutingConfig\": \"AliasRoutingConfiguration\",\n        \"awslambda.RoutingConfig.AdditionalVersionWeights\": \"VersionWeight\",\n        \"awslambda.TracingConfig\": \"TracingConfig\",\n        \"awslambda.VpcConfig\": \"VPCConfig\",\n        \"batch.ComputeEnvironmentOrder\": \"ComputeEnvironmentOrder\",\n        \"batch.ComputeResources\": \"ComputeResources\",\n        \"batch.ContainerProperties\": \"ContainerProperties\",\n        \"batch.ContainerProperties.Environment\": \"Environment\",\n        \"batch.ContainerProperties.MountPoints\": \"MountPoints\",\n        \"batch.ContainerProperties.Ulimits\": \"Ulimit\",\n        \"batch.ContainerProperties.Volumes\": \"Volumes\",\n        \"batch.ContainerProperties.Volumes.Host\": \"VolumesHost\",\n        \"batch.RetryStrategy\": \"RetryStrategy\",\n        \"batch.Timeout\": \"Timeout\",\n        \"budgets.Budget\": \"BudgetData\",\n        \"budgets.Budget.BudgetLimit\": \"Spend\",\n        \"budgets.Budget.CostTypes\": \"CostTypes\",\n        \"budgets.Budget.TimePeriod\": \"TimePeriod\",\n        \"budgets.NotificationsWithSubscribers\": \"NotificationWithSubscribers\",\n        \"budgets.NotificationsWithSubscribers.Notification\": \"Notification\",\n        \"budgets.NotificationsWithSubscribers.Subscribers\": \"Subscriber\",\n        \"certificatemanager.DomainValidationOptions\": \"DomainValidationOption\",\n        \"cloud9.Repositories\": \"Repository\",\n        \"cloudfront.CloudFrontOriginAccessIdentityConfig\": \"CloudFrontOriginAccessIdentityConfig\",\n        \"cloudfront.DistributionConfig\": \"DistributionConfig\",\n        \"cloudfront.DistributionConfig.CacheBehaviors\": \"Cookies\",\n        \"cloudfront.DistributionConfig.CustomErrorResponses\": \"CustomErrorResponse\",\n        \"cloudfront.DistributionConfig.DefaultCacheBehavior\": \"LambdaFunctionAssociation\",\n        \"cloudfront.DistributionConfig.Logging\": \"Logging\",\n        \"cloudfront.DistributionConfig.Restrictions\": \"Restrictions\",\n        \"cloudfront.DistributionConfig.Restrictions.GeoRestriction\": \"GeoRestriction\",\n        \"cloudfront.DistributionConfig.ViewerCertificate\": \"ViewerCertificate\",\n        \"cloudfront.Origins\": \"Origin\",\n        \"cloudfront.Origins.CustomOriginConfig\": \"CustomOrigin\",\n        \"cloudfront.Origins.OriginCustomHeaders\": \"OriginCustomHeader\",\n        \"cloudfront.Origins.S3OriginConfig\": \"S3Origin\",\n        \"cloudfront.StreamingDistributionConfig\": \"StreamingDistributionConfig\",\n        \"cloudfront.StreamingDistributionConfig.Logging\": \"Logging\",\n        \"cloudfront.StreamingDistributionConfig.S3Origin\": \"S3Origin\",\n        \"cloudfront.StreamingDistributionConfig.TrustedSigners\": \"TrustedSigners\",\n        \"cloudtrail.EventSelectors\": \"EventSelector\",\n        \"cloudtrail.EventSelectors.DataResources\": \"DataResource\",\n        \"cloudwatch.Dimensions\": \"MetricDimension\",\n        \"codebuild.Artifacts\": \"Artifacts\",\n        \"codebuild.Cache\": \"ProjectCache\",\n        \"codebuild.Environment\": \"Environment\",\n        \"codebuild.LogsConfig\": \"LogsConfig\",\n        \"codebuild.LogsConfig.CloudWatchLogs\": \"CloudWatchLogs\",\n        \"codebuild.LogsConfig.S3Logs\": \"S3Logs\",\n        \"codebuild.SecondaryArtifacts\": \"Artifacts\",\n        \"codebuild.SecondarySources\": \"Source\",\n        \"codebuild.SecondarySources.Auth\": \"SourceAuth\",\n        \"codebuild.Source\": \"Source\",\n        \"codebuild.Triggers\": \"ProjectTriggers\",\n        \"codebuild.VpcConfig\": \"VpcConfig\",\n        \"codecommit.Triggers\": \"Trigger\",\n        \"codedeploy.AlarmConfiguration\": \"AlarmConfiguration\",\n        \"codedeploy.AlarmConfiguration.Alarms\": \"Alarm\",\n        \"codedeploy.AutoRollbackConfiguration\": \"AutoRollbackConfiguration\",\n        \"codedeploy.Deployment\": \"Deployment\",\n        \"codedeploy.Deployment.Revision\": \"Revision\",\n        \"codedeploy.Deployment.Revision.GitHubLocation\": \"GitHubLocation\",\n        \"codedeploy.Deployment.Revision.S3Location\": \"S3Location\",\n        \"codedeploy.DeploymentStyle\": \"DeploymentStyle\",\n        \"codedeploy.Ec2TagFilters\": \"Ec2TagFilters\",\n        \"codedeploy.Ec2TagSet\": \"Ec2TagSet\",\n        \"codedeploy.Ec2TagSet.Ec2TagSet\": \"Ec2TagSetList\",\n        \"codedeploy.Ec2TagSet.Ec2TagSet.Ec2TagSetList\": \"Ec2TagSetListObject\",\n        \"codedeploy.Ec2TagSet.Ec2TagSet.Ec2TagSetList.Ec2TagGroup\": \"Ec2TagFilters\",\n        \"codedeploy.LoadBalancerInfo\": \"LoadBalancerInfo\",\n        \"codedeploy.LoadBalancerInfo.ElbInfoList\": \"ElbInfoList\",\n        \"codedeploy.LoadBalancerInfo.TargetGroupInfoList\": \"TargetGroupInfoList\",\n        \"codedeploy.MinimumHealthyHosts\": \"MinimumHealthyHosts\",\n        \"codedeploy.OnPremisesInstanceTagFilters\": \"OnPremisesInstanceTagFilters\",\n        \"codedeploy.OnPremisesInstanceTagSet\": \"OnPremisesTagSet\",\n        \"codedeploy.OnPremisesInstanceTagSet.OnPremisesTagSetList\": \"OnPremisesTagSetList\",\n        \"codedeploy.OnPremisesInstanceTagSet.OnPremisesTagSetList.OnPremisesTagSetList\": \"OnPremisesTagSetObject\",\n        \"codedeploy.OnPremisesInstanceTagSet.OnPremisesTagSetList.OnPremisesTagSetList.OnPremisesTagGroup\": \"TagFilters\",\n        \"codedeploy.TriggerConfigurations\": \"TriggerConfig\",\n        \"codepipeline.ArtifactStore\": \"ArtifactStore\",\n        \"codepipeline.ArtifactStore.EncryptionKey\": \"EncryptionKey\",\n        \"codepipeline.AuthenticationConfiguration\": \"WebhookAuthConfiguration\",\n        \"codepipeline.ConfigurationProperties\": \"ConfigurationProperties\",\n        \"codepipeline.DisableInboundStageTransitions\": \"DisableInboundStageTransitions\",\n        \"codepipeline.Filters\": \"WebhookFilterRule\",\n        \"codepipeline.InputArtifactDetails\": \"ArtifactDetails\",\n        \"codepipeline.OutputArtifactDetails\": \"ArtifactDetails\",\n        \"codepipeline.Settings\": \"Settings\",\n        \"codepipeline.Stages\": \"Stages\",\n        \"codepipeline.Stages.Actions\": \"OutputArtifacts\",\n        \"codepipeline.Stages.Blockers\": \"Blockers\",\n        \"cognito.AdminCreateUserConfig\": \"AdminCreateUserConfig\",\n        \"cognito.AdminCreateUserConfig.InviteMessageTemplate\": \"InviteMessageTemplate\",\n        \"cognito.CognitoIdentityProviders\": \"CognitoIdentityProvider\",\n        \"cognito.CognitoStreams\": \"CognitoStreams\",\n        \"cognito.DeviceConfiguration\": \"DeviceConfiguration\",\n        \"cognito.EmailConfiguration\": \"EmailConfiguration\",\n        \"cognito.LambdaConfig\": \"LambdaConfig\",\n        \"cognito.Policies\": \"Policies\",\n        \"cognito.Policies.PasswordPolicy\": \"PasswordPolicy\",\n        \"cognito.PushSync\": \"PushSync\",\n        \"cognito.Schema\": \"SchemaAttribute\",\n        \"cognito.Schema.NumberAttributeConstraints\": \"NumberAttributeConstraints\",\n        \"cognito.Schema.StringAttributeConstraints\": \"StringAttributeConstraints\",\n        \"cognito.SmsConfiguration\": \"SmsConfiguration\",\n        \"cognito.UserAttributes\": \"AttributeType\",\n        \"cognito.ValidationData\": \"AttributeType\",\n        \"config.AccountAggregationSources\": \"AccountAggregationSources\",\n        \"config.ConfigSnapshotDeliveryProperties\": \"ConfigSnapshotDeliveryProperties\",\n        \"config.OrganizationAggregationSource\": \"OrganizationAggregationSource\",\n        \"config.RecordingGroup\": \"RecordingGroup\",\n        \"config.Scope\": \"Scope\",\n        \"config.Source\": \"Source\",\n        \"config.Source.SourceDetails\": \"SourceDetails\",\n        \"datapipeline.ParameterObjects\": \"ParameterObject\",\n        \"datapipeline.ParameterObjects.Attributes\": \"ParameterObjectAttribute\",\n        \"datapipeline.ParameterValues\": \"ParameterValue\",\n        \"datapipeline.PipelineObjects\": \"PipelineObject\",\n        \"datapipeline.PipelineObjects.Fields\": \"ObjectField\",\n        \"datapipeline.PipelineTags\": \"PipelineTag\",\n        \"dax.SSESpecification\": \"SSESpecification\",\n        \"directoryservice.VpcSettings\": \"VpcSettings\",\n        \"dms.DynamoDbSettings\": \"DynamoDBSettings\",\n        \"dms.MongoDbSettings\": \"MongoDbSettings\",\n        \"dms.S3Settings\": \"S3Settings\",\n        \"dynamodb.AttributeDefinitions\": \"AttributeDefinition\",\n        \"dynamodb.GlobalSecondaryIndexes\": \"GlobalSecondaryIndex\",\n        \"dynamodb.GlobalSecondaryIndexes.KeySchema\": \"KeySchema\",\n        \"dynamodb.GlobalSecondaryIndexes.Projection\": \"Projection\",\n        \"dynamodb.GlobalSecondaryIndexes.ProvisionedThroughput\": \"ProvisionedThroughput\",\n        \"dynamodb.KeySchema\": \"KeySchema\",\n        \"dynamodb.LocalSecondaryIndexes\": \"LocalSecondaryIndex\",\n        \"dynamodb.LocalSecondaryIndexes.KeySchema\": \"KeySchema\",\n        \"dynamodb.LocalSecondaryIndexes.Projection\": \"Projection\",\n        \"dynamodb.PointInTimeRecoverySpecification\": \"PointInTimeRecoverySpecification\",\n        \"dynamodb.ProvisionedThroughput\": \"ProvisionedThroughput\",\n        \"dynamodb.SSESpecification\": \"SSESpecification\",\n        \"dynamodb.StreamSpecification\": \"StreamSpecification\",\n        \"dynamodb.TimeToLiveSpecification\": \"TimeToLiveSpecification\",\n        \"ec2.BlockDeviceMappings\": \"BlockDeviceMapping\",\n        \"ec2.BlockDeviceMappings.Ebs\": \"EBSBlockDevice\",\n        \"ec2.CreditSpecification\": \"CreditSpecification\",\n        \"ec2.ElasticGpuSpecifications\": \"ElasticGpuSpecification\",\n        \"ec2.Icmp\": \"ICMP\",\n        \"ec2.Ipv6Addresses\": \"Ipv6Addresses\",\n        \"ec2.LaunchTemplate\": \"LaunchTemplateSpecification\",\n        \"ec2.LaunchTemplateData\": \"LaunchTemplateData\",\n        \"ec2.LaunchTemplateData.BlockDeviceMappings\": \"BlockDeviceMapping\",\n        \"ec2.LaunchTemplateData.CreditSpecification\": \"LaunchTemplateCreditSpecification\",\n        \"ec2.LaunchTemplateData.ElasticGpuSpecifications\": \"ElasticGpuSpecification\",\n        \"ec2.LaunchTemplateData.IamInstanceProfile\": \"IamInstanceProfile\",\n        \"ec2.LaunchTemplateData.InstanceMarketOptions\": \"SpotOptions\",\n        \"ec2.LaunchTemplateData.Monitoring\": \"Monitoring\",\n        \"ec2.LaunchTemplateData.NetworkInterfaces\": \"NetworkInterfaces\",\n        \"ec2.LaunchTemplateData.Placement\": \"Placement\",\n        \"ec2.LaunchTemplateData.TagSpecifications\": \"TagSpecifications\",\n        \"ec2.NetworkInterfaces\": \"NetworkInterfaceProperty\",\n        \"ec2.NetworkInterfaces.Ipv6Addresses\": \"Ipv6Addresses\",\n        \"ec2.NetworkInterfaces.PrivateIpAddresses\": \"PrivateIpAddressSpecification\",\n        \"ec2.PortRange\": \"PortRange\",\n        \"ec2.PrivateIpAddresses\": \"PrivateIpAddressSpecification\",\n        \"ec2.SecurityGroupEgress\": \"SecurityGroupRule\",\n        \"ec2.SecurityGroupIngress\": \"SecurityGroupRule\",\n        \"ec2.SpotFleetRequestConfigData\": \"SpotFleetRequestConfigData\",\n        \"ec2.SpotFleetRequestConfigData.LaunchSpecifications\": \"PrivateIpAddressSpecification\",\n        \"ec2.SpotFleetRequestConfigData.LaunchTemplateConfigs\": \"LaunchTemplateOverrides\",\n        \"ec2.SpotFleetRequestConfigData.LoadBalancersConfig\": \"TargetGroup\",\n        \"ec2.SsmAssociations\": \"SsmAssociations\",\n        \"ec2.SsmAssociations.AssociationParameters\": \"AssociationParameters\",\n        \"ec2.Volumes\": \"MountPoint\",\n        \"ec2.VpnTunnelOptionsSpecifications\": \"VpnTunnelOptionsSpecification\",\n        \"ecr.LifecyclePolicy\": \"LifecyclePolicy\",\n        \"ecs.ContainerDefinitions\": \"ContainerDefinition\",\n        \"ecs.ContainerDefinitions.Environment\": \"Environment\",\n        \"ecs.ContainerDefinitions.ExtraHosts\": \"HostEntry\",\n        \"ecs.ContainerDefinitions.HealthCheck\": \"HealthCheck\",\n        \"ecs.ContainerDefinitions.LinuxParameters\": \"LinuxParameters\",\n        \"ecs.ContainerDefinitions.LinuxParameters.Capabilities\": \"KernelCapabilities\",\n        \"ecs.ContainerDefinitions.LinuxParameters.Devices\": \"Device\",\n        \"ecs.ContainerDefinitions.LogConfiguration\": \"LogConfiguration\",\n        \"ecs.ContainerDefinitions.MountPoints\": \"MountPoint\",\n        \"ecs.ContainerDefinitions.PortMappings\": \"PortMapping\",\n        \"ecs.ContainerDefinitions.RepositoryCredentials\": \"RepositoryCredentials\",\n        \"ecs.ContainerDefinitions.Ulimits\": \"Ulimit\",\n        \"ecs.ContainerDefinitions.VolumesFrom\": \"VolumesFrom\",\n        \"ecs.DeploymentConfiguration\": \"DeploymentConfiguration\",\n        \"ecs.LoadBalancers\": \"LoadBalancer\",\n        \"ecs.NetworkConfiguration\": \"NetworkConfiguration\",\n        \"ecs.NetworkConfiguration.AwsvpcConfiguration\": \"AwsvpcConfiguration\",\n        \"ecs.PlacementConstraints\": \"PlacementConstraint\",\n        \"ecs.PlacementStrategies\": \"PlacementStrategy\",\n        \"ecs.ServiceRegistries\": \"ServiceRegistry\",\n        \"ecs.Volumes\": \"Volume\",\n        \"ecs.Volumes.DockerVolumeConfiguration\": \"DockerVolumeConfiguration\",\n        \"ecs.Volumes.Host\": \"Host\",\n        \"eks.ResourcesVpcConfig\": \"ResourcesVpcConfig\",\n        \"elasticache.NodeGroupConfiguration\": \"NodeGroupConfiguration\",\n        \"elasticbeanstalk.OptionSettings\": \"OptionSettings\",\n        \"elasticbeanstalk.ResourceLifecycleConfig\": \"ApplicationResourceLifecycleConfig\",\n        \"elasticbeanstalk.ResourceLifecycleConfig.VersionLifecycleConfig\": \"ApplicationVersionLifecycleConfig\",\n        \"elasticbeanstalk.ResourceLifecycleConfig.VersionLifecycleConfig.MaxAgeRule\": \"MaxAgeRule\",\n        \"elasticbeanstalk.ResourceLifecycleConfig.VersionLifecycleConfig.MaxCountRule\": \"MaxCountRule\",\n        \"elasticbeanstalk.SourceBundle\": \"SourceBundle\",\n        \"elasticbeanstalk.SourceConfiguration\": \"SourceConfiguration\",\n        \"elasticbeanstalk.Tier\": \"Tier\",\n        \"elasticloadbalancing.AccessLoggingPolicy\": \"AccessLoggingPolicy\",\n        \"elasticloadbalancing.AppCookieStickinessPolicy\": \"AppCookieStickinessPolicy\",\n        \"elasticloadbalancing.ConnectionDrainingPolicy\": \"ConnectionDrainingPolicy\",\n        \"elasticloadbalancing.ConnectionSettings\": \"ConnectionSettings\",\n        \"elasticloadbalancing.HealthCheck\": \"HealthCheck\",\n        \"elasticloadbalancing.LBCookieStickinessPolicy\": \"LBCookieStickinessPolicy\",\n        \"elasticloadbalancing.Listeners\": \"Listener\",\n        \"elasticloadbalancing.Policies\": \"Policy\",\n        \"elasticloadbalancingv2.Actions\": \"Action\",\n        \"elasticloadbalancingv2.Certificates\": \"Certificate\",\n        \"elasticloadbalancingv2.Conditions\": \"Condition\",\n        \"elasticloadbalancingv2.DefaultActions\": \"Action\",\n        \"elasticloadbalancingv2.LoadBalancerAttributes\": \"LoadBalancerAttributes\",\n        \"elasticloadbalancingv2.Matcher\": \"Matcher\",\n        \"elasticloadbalancingv2.SubnetMappings\": \"SubnetMapping\",\n        \"elasticloadbalancingv2.TargetGroupAttributes\": \"TargetGroupAttribute\",\n        \"elasticloadbalancingv2.Targets\": \"TargetDescription\",\n        \"elasticsearch.EBSOptions\": \"EBSOptions\",\n        \"elasticsearch.ElasticsearchClusterConfig\": \"ElasticsearchClusterConfig\",\n        \"elasticsearch.EncryptionAtRestOptions\": \"EncryptionAtRestOptions\",\n        \"elasticsearch.SnapshotOptions\": \"SnapshotOptions\",\n        \"elasticsearch.VPCOptions\": \"VPCOptions\",\n        \"emr.Applications\": \"Application\",\n        \"emr.AutoScalingPolicy\": \"AutoScalingPolicy\",\n        \"emr.AutoScalingPolicy.Constraints\": \"ScalingConstraints\",\n        \"emr.AutoScalingPolicy.Rules\": \"ScalingRule\",\n        \"emr.AutoScalingPolicy.Rules.Action\": \"SimpleScalingPolicyConfiguration\",\n        \"emr.AutoScalingPolicy.Rules.Trigger\": \"ScalingTrigger\",\n        \"emr.AutoScalingPolicy.Rules.Trigger.CloudWatchAlarmDefinition\": \"KeyValue\",\n        \"emr.BootstrapActions\": \"BootstrapActionConfig\",\n        \"emr.BootstrapActions.ScriptBootstrapAction\": \"ScriptBootstrapActionConfig\",\n        \"emr.Configurations\": \"Configuration\",\n        \"emr.Configurations.Configurations\": \"Configuration\",\n        \"emr.EbsConfiguration\": \"EbsConfiguration\",\n        \"emr.EbsConfiguration.EbsBlockDeviceConfigs\": \"VolumeSpecification\",\n        \"emr.HadoopJarStep\": \"HadoopJarStepConfig\",\n        \"emr.HadoopJarStep.StepProperties\": \"KeyValue\",\n        \"emr.InstanceTypeConfigs\": \"InstanceTypeConfig\",\n        \"emr.InstanceTypeConfigs.Configurations\": \"Configuration\",\n        \"emr.InstanceTypeConfigs.EbsConfiguration\": \"EbsConfiguration\",\n        \"emr.Instances\": \"JobFlowInstancesConfig\",\n        \"emr.Instances.CoreInstanceFleet\": \"InstanceFleetProvisioningSpecifications\",\n        \"emr.Instances.CoreInstanceGroup\": \"EbsConfiguration\",\n        \"emr.Instances.MasterInstanceFleet\": \"InstanceFleetConfigProperty\",\n        \"emr.Instances.MasterInstanceGroup\": \"InstanceGroupConfigProperty\",\n        \"emr.Instances.Placement\": \"PlacementType\",\n        \"emr.KerberosAttributes\": \"KerberosAttributes\",\n        \"emr.LaunchSpecifications\": \"InstanceFleetProvisioningSpecifications\",\n        \"emr.LaunchSpecifications.SpotSpecification\": \"SpotProvisioningSpecification\",\n        \"events.Targets\": \"Target\",\n        \"events.Targets.EcsParameters\": \"EcsParameters\",\n        \"events.Targets.InputTransformer\": \"InputTransformer\",\n        \"events.Targets.KinesisParameters\": \"KinesisParameters\",\n        \"events.Targets.RunCommandParameters\": \"RunCommandTarget\",\n        \"firehose.ElasticsearchDestinationConfiguration\": \"ElasticsearchDestinationConfiguration\",\n        \"firehose.ElasticsearchDestinationConfiguration.BufferingHints\": \"BufferingHints\",\n        \"firehose.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.ElasticsearchDestinationConfiguration.ProcessingConfiguration\": \"ProcessingConfiguration\",\n        \"firehose.ElasticsearchDestinationConfiguration.RetryOptions\": \"RetryOptions\",\n        \"firehose.ElasticsearchDestinationConfiguration.S3Configuration\": \"S3Configuration\",\n        \"firehose.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints\": \"BufferingHints\",\n        \"firehose.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration\": \"EncryptionConfiguration\",\n        \"firehose.ExtendedS3DestinationConfiguration\": \"ExtendedS3DestinationConfiguration\",\n        \"firehose.ExtendedS3DestinationConfiguration.BufferingHints\": \"BufferingHints\",\n        \"firehose.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.ExtendedS3DestinationConfiguration.EncryptionConfiguration\": \"KMSEncryptionConfig\",\n        \"firehose.ExtendedS3DestinationConfiguration.ProcessingConfiguration\": \"ProcessingConfiguration\",\n        \"firehose.ExtendedS3DestinationConfiguration.S3BackupConfiguration\": \"S3DestinationConfiguration\",\n        \"firehose.KinesisStreamSourceConfiguration\": \"KinesisStreamSourceConfiguration\",\n        \"firehose.RedshiftDestinationConfiguration\": \"RedshiftDestinationConfiguration\",\n        \"firehose.RedshiftDestinationConfiguration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.RedshiftDestinationConfiguration.CopyCommand\": \"CopyCommand\",\n        \"firehose.RedshiftDestinationConfiguration.ProcessingConfiguration\": \"ProcessorParameter\",\n        \"firehose.RedshiftDestinationConfiguration.S3Configuration\": \"S3Configuration\",\n        \"firehose.S3DestinationConfiguration\": \"S3DestinationConfiguration\",\n        \"firehose.S3DestinationConfiguration.BufferingHints\": \"BufferingHints\",\n        \"firehose.S3DestinationConfiguration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.S3DestinationConfiguration.EncryptionConfiguration\": \"EncryptionConfiguration\",\n        \"firehose.SplunkDestinationConfiguration\": \"SplunkDestinationConfiguration\",\n        \"firehose.SplunkDestinationConfiguration.CloudWatchLoggingOptions\": \"CloudWatchLoggingOptions\",\n        \"firehose.SplunkDestinationConfiguration.ProcessingConfiguration\": \"ProcessingConfiguration\",\n        \"firehose.SplunkDestinationConfiguration.RetryOptions\": \"SplunkRetryOptions\",\n        \"firehose.SplunkDestinationConfiguration.S3Configuration\": \"S3DestinationConfiguration\",\n        \"glue.Actions\": \"Action\",\n        \"glue.Command\": \"JobCommand\",\n        \"glue.ConnectionInput\": \"ConnectionInput\",\n        \"glue.ConnectionInput.PhysicalConnectionRequirements\": \"PhysicalConnectionRequirements\",\n        \"glue.Connections\": \"ConnectionsList\",\n        \"glue.DatabaseInput\": \"DatabaseInput\",\n        \"glue.ExecutionProperty\": \"ExecutionProperty\",\n        \"glue.GrokClassifier\": \"GrokClassifier\",\n        \"glue.JsonClassifier\": \"JsonClassifier\",\n        \"glue.PartitionInput\": \"PartitionInput\",\n        \"glue.PartitionInput.StorageDescriptor\": \"StorageDescriptor\",\n        \"glue.Predicate\": \"Predicate\",\n        \"glue.Predicate.Conditions\": \"Condition\",\n        \"glue.Schedule\": \"Schedule\",\n        \"glue.SchemaChangePolicy\": \"SchemaChangePolicy\",\n        \"glue.TableInput\": \"TableInput\",\n        \"glue.TableInput.PartitionKeys\": \"Column\",\n        \"glue.TableInput.StorageDescriptor\": \"Order\",\n        \"glue.Targets\": \"Targets\",\n        \"glue.Targets.JdbcTargets\": \"JdbcTarget\",\n        \"glue.Targets.S3Targets\": \"S3Target\",\n        \"glue.XMLClassifier\": \"XMLClassifier\",\n        \"guardduty.FindingCriteria\": \"FindingCriteria\",\n        \"guardduty.FindingCriteria.ItemType\": \"Condition\",\n        \"iam.LoginProfile\": \"LoginProfile\",\n        \"iam.Policies\": \"Policy\",\n        \"iot.TopicRulePayload\": \"TopicRulePayload\",\n        \"iot.TopicRulePayload.Actions\": \"PutItemInput\",\n        \"kinesis.StreamEncryption\": \"StreamEncryption\",\n        \"logs.MetricTransformations\": \"MetricTransformation\",\n        \"opsworks.AppSource\": \"Source\",\n        \"opsworks.BlockDeviceMappings\": \"BlockDeviceMapping\",\n        \"opsworks.BlockDeviceMappings.Ebs\": \"EbsBlockDevice\",\n        \"opsworks.ChefConfiguration\": \"ChefConfiguration\",\n        \"opsworks.ConfigurationManager\": \"StackConfigurationManager\",\n        \"opsworks.CustomCookbooksSource\": \"Source\",\n        \"opsworks.CustomRecipes\": \"Recipes\",\n        \"opsworks.DataSources\": \"DataSource\",\n        \"opsworks.ElasticIps\": \"ElasticIp\",\n        \"opsworks.Environment\": \"Environment\",\n        \"opsworks.LifecycleEventConfiguration\": \"LifeCycleConfiguration\",\n        \"opsworks.LifecycleEventConfiguration.ShutdownEventConfiguration\": \"ShutdownEventConfiguration\",\n        \"opsworks.LoadBasedAutoScaling\": \"LoadBasedAutoScaling\",\n        \"opsworks.LoadBasedAutoScaling.DownScaling\": \"AutoScalingThresholds\",\n        \"opsworks.LoadBasedAutoScaling.UpScaling\": \"AutoScalingThresholds\",\n        \"opsworks.RdsDbInstances\": \"RdsDbInstance\",\n        \"opsworks.SslConfiguration\": \"SslConfiguration\",\n        \"opsworks.TimeBasedAutoScaling\": \"TimeBasedAutoScaling\",\n        \"opsworks.VolumeConfigurations\": \"VolumeConfiguration\",\n        \"rds.DBSecurityGroupIngress\": \"RDSSecurityGroup\",\n        \"rds.OptionConfigurations\": \"OptionConfiguration\",\n        \"rds.OptionConfigurations.OptionSettings\": \"OptionSetting\",\n        \"rds.ScalingConfiguration\": \"ScalingConfiguration\",\n        \"redshift.LoggingProperties\": \"LoggingProperties\",\n        \"redshift.Parameters\": \"AmazonRedshiftParameter\",\n        \"route53.AliasTarget\": \"AliasTarget\",\n        \"route53.GeoLocation\": \"GeoLocation\",\n        \"route53.HealthCheckConfig\": \"HealthCheckConfiguration\",\n        \"route53.HealthCheckConfig.AlarmIdentifier\": \"AlarmIdentifier\",\n        \"route53.HostedZoneConfig\": \"HostedZoneConfiguration\",\n        \"route53.QueryLoggingConfig\": \"QueryLoggingConfig\",\n        \"route53.RecordSets\": \"RecordSet\",\n        \"route53.RecordSets.AliasTarget\": \"AliasTarget\",\n        \"route53.RecordSets.GeoLocation\": \"GeoLocation\",\n        \"route53.VPCs\": \"HostedZoneVPCs\",\n        \"s3.AccelerateConfiguration\": \"AccelerateConfiguration\",\n        \"s3.AnalyticsConfigurations\": \"AnalyticsConfiguration\",\n        \"s3.AnalyticsConfigurations.StorageClassAnalysis\": \"StorageClassAnalysis\",\n        \"s3.AnalyticsConfigurations.StorageClassAnalysis.DataExport\": \"Destination\",\n        \"s3.AnalyticsConfigurations.TagFilters\": \"TagFilter\",\n        \"s3.BucketEncryption\": \"BucketEncryption\",\n        \"s3.BucketEncryption.ServerSideEncryptionConfiguration\": \"ServerSideEncryptionRule\",\n        \"s3.BucketEncryption.ServerSideEncryptionConfiguration.ServerSideEncryptionByDefault\": \"ServerSideEncryptionByDefault\",\n        \"s3.CorsConfiguration\": \"CorsConfiguration\",\n        \"s3.CorsConfiguration.CorsRules\": \"CorsRules\",\n        \"s3.InventoryConfigurations\": \"InventoryConfiguration\",\n        \"s3.InventoryConfigurations.Destination\": \"Destination\",\n        \"s3.LifecycleConfiguration\": \"LifecycleConfiguration\",\n        \"s3.LifecycleConfiguration.Rules\": \"LifecycleRule\",\n        \"s3.LifecycleConfiguration.Rules.AbortIncompleteMultipartUpload\": \"AbortIncompleteMultipartUpload\",\n        \"s3.LifecycleConfiguration.Rules.NoncurrentVersionTransition\": \"NoncurrentVersionTransition\",\n        \"s3.LifecycleConfiguration.Rules.NoncurrentVersionTransitions\": \"NoncurrentVersionTransition\",\n        \"s3.LifecycleConfiguration.Rules.TagFilters\": \"TagFilter\",\n        \"s3.LifecycleConfiguration.Rules.Transition\": \"LifecycleRuleTransition\",\n        \"s3.LifecycleConfiguration.Rules.Transitions\": \"LifecycleRuleTransition\",\n        \"s3.LoggingConfiguration\": \"LoggingConfiguration\",\n        \"s3.MetricsConfigurations\": \"MetricsConfiguration\",\n        \"s3.MetricsConfigurations.TagFilters\": \"TagFilter\",\n        \"s3.NotificationConfiguration\": \"NotificationConfiguration\",\n        \"s3.NotificationConfiguration.LambdaConfigurations\": \"Filter\",\n        \"s3.NotificationConfiguration.LambdaConfigurations.Filter\": \"S3Key\",\n        \"s3.NotificationConfiguration.QueueConfigurations\": \"QueueConfigurations\",\n        \"s3.NotificationConfiguration.QueueConfigurations.Filter\": \"Filter\",\n        \"s3.NotificationConfiguration.TopicConfigurations\": \"TopicConfigurations\",\n        \"s3.NotificationConfiguration.TopicConfigurations.Filter\": \"Filter\",\n        \"s3.ReplicationConfiguration\": \"ReplicationConfiguration\",\n        \"s3.ReplicationConfiguration.Rules\": \"ReplicationConfigurationRules\",\n        \"s3.ReplicationConfiguration.Rules.Destination\": \"ReplicationConfigurationRulesDestination\",\n        \"s3.ReplicationConfiguration.Rules.Destination.AccessControlTranslation\": \"AccessControlTranslation\",\n        \"s3.ReplicationConfiguration.Rules.Destination.EncryptionConfiguration\": \"EncryptionConfiguration\",\n        \"s3.ReplicationConfiguration.Rules.SourceSelectionCriteria\": \"SourceSelectionCriteria\",\n        \"s3.ReplicationConfiguration.Rules.SourceSelectionCriteria.SseKmsEncryptedObjects\": \"SseKmsEncryptedObjects\",\n        \"s3.VersioningConfiguration\": \"VersioningConfiguration\",\n        \"s3.WebsiteConfiguration\": \"WebsiteConfiguration\",\n        \"s3.WebsiteConfiguration.RedirectAllRequestsTo\": \"RedirectAllRequestsTo\",\n        \"s3.WebsiteConfiguration.RoutingRules\": \"RoutingRuleCondition\",\n        \"sagemaker.OnCreate\": \"NotebookInstanceLifecycleConfig\",\n        \"sagemaker.OnStart\": \"NotebookInstanceLifecycleConfig\",\n        \"sagemaker.PrimaryContainer\": \"ContainerDefinition\",\n        \"sagemaker.ProductionVariants\": \"ProductionVariant\",\n        \"serverless.DeadLetterQueue\": \"DeadLetterQueue\",\n        \"serverless.PrimaryKey\": \"PrimaryKey\",\n        \"servicecatalog.ProvisioningArtifactParameters\": \"ProvisioningArtifactProperties\",\n        \"servicecatalog.ProvisioningParameters\": \"ProvisioningParameter\",\n        \"servicediscovery.DnsConfig\": \"DnsConfig\",\n        \"servicediscovery.DnsConfig.DnsRecords\": \"DnsRecord\",\n        \"servicediscovery.HealthCheckConfig\": \"HealthCheckConfig\",\n        \"servicediscovery.HealthCheckCustomConfig\": \"HealthCheckCustomConfig\",\n        \"ses.EventDestination\": \"EventDestination\",\n        \"ses.EventDestination.CloudWatchDestination\": \"DimensionConfiguration\",\n        \"ses.EventDestination.KinesisFirehoseDestination\": \"KinesisFirehoseDestination\",\n        \"ses.Filter\": \"Filter\",\n        \"ses.Filter.IpFilter\": \"IpFilter\",\n        \"ses.Rule\": \"Rule\",\n        \"ses.Rule.Actions\": \"WorkmailAction\",\n        \"ses.Template\": \"EmailTemplate\",\n        \"sns.Subscription\": \"Subscription\",\n        \"sqs.RedrivePolicy\": \"RedrivePolicy\",\n        \"ssm.ApprovalRules\": \"RuleGroup\",\n        \"ssm.ApprovalRules.PatchRules\": \"PatchFilterGroup\",\n        \"ssm.GlobalFilters\": \"PatchFilterGroup\",\n        \"ssm.GlobalFilters.PatchFilters\": \"PatchFilter\",\n        \"ssm.LoggingInfo\": \"LoggingInfo\",\n        \"ssm.OutputLocation\": \"InstanceAssociationOutputLocation\",\n        \"ssm.OutputLocation.S3Location\": \"S3OutputLocation\",\n        \"ssm.Targets\": \"Targets\",\n        \"ssm.TaskInvocationParameters\": \"TaskInvocationParameters\",\n        \"ssm.TaskInvocationParameters.MaintenanceWindowAutomationParameters\": \"MaintenanceWindowAutomationParameters\",\n        \"ssm.TaskInvocationParameters.MaintenanceWindowLambdaParameters\": \"MaintenanceWindowLambdaParameters\",\n        \"ssm.TaskInvocationParameters.MaintenanceWindowRunCommandParameters\": \"NotificationConfig\",\n        \"ssm.TaskInvocationParameters.MaintenanceWindowStepFunctionsParameters\": \"MaintenanceWindowStepFunctionsParameters\",\n        \"waf.ByteMatchTuples\": \"ByteMatchTuples\",\n        \"waf.ByteMatchTuples.FieldToMatch\": \"FieldToMatch\",\n        \"waf.DefaultAction\": \"Action\",\n        \"waf.IPSetDescriptors\": \"IPSetDescriptors\",\n        \"waf.Predicates\": \"Predicates\",\n        \"waf.Rules\": \"Rules\",\n        \"waf.Rules.Action\": \"Action\",\n        \"waf.SizeConstraints\": \"SizeConstraint\",\n        \"waf.SizeConstraints.FieldToMatch\": \"FieldToMatch\",\n        \"waf.SqlInjectionMatchTuples\": \"SqlInjectionMatchTuples\",\n        \"waf.SqlInjectionMatchTuples.FieldToMatch\": \"FieldToMatch\",\n        \"waf.XssMatchTuples\": \"XssMatchTuple\",\n        \"waf.XssMatchTuples.FieldToMatch\": \"FieldToMatch\",\n        \"wafregional.ByteMatchTuples\": \"ByteMatchTuples\",\n        \"wafregional.ByteMatchTuples.FieldToMatch\": \"FieldToMatch\",\n        \"wafregional.DefaultAction\": \"Action\",\n        \"wafregional.IPSetDescriptors\": \"IPSetDescriptors\",\n        \"wafregional.Predicates\": \"Predicates\",\n        \"wafregional.Rules\": \"Rules\",\n        \"wafregional.Rules.Action\": \"Action\",\n        \"wafregional.SizeConstraints\": \"SizeConstraint\",\n        \"wafregional.SizeConstraints.FieldToMatch\": \"FieldToMatch\",\n        \"wafregional.SqlInjectionMatchTuples\": \"SqlInjectionMatchTuples\",\n        \"wafregional.SqlInjectionMatchTuples.FieldToMatch\": \"FieldToMatch\",\n        \"wafregional.XssMatchTuples\": \"XssMatchTuple\",\n        \"wafregional.XssMatchTuples.FieldToMatch\": \"FieldToMatch\"\n    };\n\n    if (keyname in auto_generated_property_mapping) {\n        return keyname.split(\".\")[0] + \".\" + auto_generated_property_mapping[keyname];\n    } else {\n        var partial = keyname.split(\".\");\n        while (partial.length > 1) {\n            partial.splice(0, 1);\n            if (partial.join(\".\") in auto_generated_property_mapping) {\n                return keyname.split(\".\")[0] + \".\" + auto_generated_property_mapping[partial.join(\".\")]\n            }\n        }\n    }\n\n    console.log(\"Unknown Troposphere mapping: \" + keyname);\n\n    return null;\n}\n\nfunction processJsParameter(param, spacing) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return \"true\";\n        return \"false\";\n    }\n    if (typeof param == \"number\")\n        return `${param}`;\n    if (typeof param == \"string\") {\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"`\" + string_return + \"`\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/\\\"/g,`\\\\\"`);\n\n        return `\"${string_return}\"`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            var item = processJsParameter(paramitem, spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(item);\n            }\n        });\n\n        return `[\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + ']';\n    }\n    if (typeof param == \"object\") {\n        Object.keys(param).forEach(function (key) {\n            var item = processJsParameter(param[key], spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(key + \": \" + processJsParameter(param[key], spacing + 4));\n            }\n        });\n\n        return `{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + '}';\n    }\n    \n    return undefined;\n}\n\nfunction processBoto3Parameter(param, spacing) {\n    var paramitems = [];\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return \"True\";\n        return \"False\";\n    }\n    if (typeof param == \"number\")\n        return `${param}`;\n    if (typeof param == \"string\") {\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"\\\"\\\"\\\"\" + string_return.replace(/\\n/g, `\\n` + ' '.repeat(spacing + 4)) + \"\\n\\\"\\\"\\\"\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/'/g,`\\\\'`);\n\n        return `'${string_return}'`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return '[]';\n        }\n\n        param.forEach(paramitem => {\n            var item = processBoto3Parameter(paramitem, spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(item);\n            }\n        });\n\n        return `[\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + ']';\n    }\n    if (typeof param == \"object\") {\n        Object.keys(param).forEach(function (key) {\n            var item = processBoto3Parameter(param[key], spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(\"'\" + key + \"': \" + processBoto3Parameter(param[key], spacing + 4));\n            }\n        });\n\n        return `{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `\n` + ' '.repeat(spacing) + '}';\n    }\n    \n    return undefined;\n}\n\nfunction deplural(str) {\n    if (typeof str != \"string\") {\n        return str;\n    }\n\n    if (str.endsWith(\"ies\")) { // TODO: Fix very primitive checks\n        str = str.substring(0,str.length-3) + \"y\";\n    } else if (str.endsWith(\"ses\")) {\n        str = str.substring(0,str.length-2);\n    } else if (str.endsWith(\"s\") && !str.endsWith(\"ss\")) {\n        str = str.substring(0,str.length-1);\n    }\n\n    return str;\n}\n\nfunction processGoParameter(service, paramkey, param, spacing) {\n    var paramitems = [];\n\n    paramkey = deplural(paramkey);\n\n    if (param === undefined || param === null)\n        return undefined;\n    if (typeof param == \"boolean\") {\n        if (param)\n            return \"aws.Bool(true)\";\n        return \"aws.Bool(false)\";\n    }\n    if (typeof param == \"number\")\n        return `aws.Int64(${param})`;\n    if (typeof param == \"string\") {\n        var string_return = param;\n\n        if (string_return.includes(\"\\n\")) {\n            string_return = \"aws.String(`\" + string_return + \"`)\";\n            return string_return;\n        }\n        \n        string_return = param.replace(/\\\"/g,`\\\\\"`);\n\n        return `aws.String(\"${string_return}\")`;\n    }\n    if (Array.isArray(param)) {\n        if (param.length == 0) {\n            return `[]*${service}.${paramkey}{}`;\n        }\n\n        param.forEach(paramitem => {\n            var item = processGoParameter(service, paramkey, paramitem, spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(item);\n            }\n        });\n\n        if (paramitems.length == 0) {\n            return `[]*${service}.${paramkey}{}`;\n        }\n\n        slicetype = `*${service}.${paramkey}`;\n        if (paramitems[0].startsWith(\"aws.String(\")) {\n            slicetype = \"*string\";\n        } else if (paramitems[0].startsWith(\"aws.Bool(\")) {\n            slicetype = \"*bool\";\n        } else if (paramitems[0].startsWith(\"aws.Int64(\")) {\n            slicetype = \"*int64\";\n        }\n\n        return `[]${slicetype}{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `,\n` + ' '.repeat(spacing) + '}';\n    }\n    if (typeof param == \"object\") {\n        Object.keys(param).forEach(function (key) {\n            var item = processGoParameter(service, key, param[key], spacing + 4);\n            if (item !== undefined) {\n                paramitems.push(key + \": \" + processGoParameter(service, key, param[key], spacing + 4));\n            }\n        });\n\n        return `&${service}.${paramkey}{\n` + ' '.repeat(spacing + 4) + paramitems.join(`,\n` + ' '.repeat(spacing + 4)) + `,\n` + ' '.repeat(spacing) + '}';\n    }\n    \n    return undefined;\n}\n\nfunction outputMapBoto3(service, method, options, region, was_blocked) {\n    var output = ensureInitDeclaredBoto3(service, region);\n    var params = '';\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processBoto3Parameter(options[option], 4);\n                params += `\n    ${option}=${optionvalue},`;\n            }\n        }\n        params = params.substring(0, params.length - 1) + `\n`; // remove last comma\n    }\n\n    output += `response = ${service}_client.${method}(${params})${was_blocked ? ' # blocked' : ''}\n`\n\n    return output;\n}\n\nfunction outputMapGo(service, method, options, region, was_blocked) {\n    var output = ensureInitDeclaredGo(service, region);\n    var params = '';\n    var mappedservice = mapServiceJs(service).toLowerCase().replace(/\\-/g,'');\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processGoParameter(mappedservice, option, options[option], 8);\n                params += `\n        ${option}: ${optionvalue},`;\n            }\n        }\n        params += `\n    `;\n    }\n\n    output += `    _, err ${go_first_output ? ':' : ''}= ${service}svc.${method}(&${mappedservice}.${method}Input{${params}})${was_blocked ? ' // blocked' : ''}\n`\n\n    go_first_output = false;\n\n    return output;\n}\n\nfunction outputMapJs(service, method, options, region, was_blocked) {\n    var output = ensureInitDeclaredJs(service, region);\n    var params = '';\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processJsParameter(options[option], 4);\n                params += `\n    ${option}: ${optionvalue},`;\n            }\n        }\n        params = \"{\" + params.substring(0, params.length - 1) + `\n}`; // remove last comma\n    }\n\n\n\n    output += `\n${service}.${method}(${params});${was_blocked ? ' // blocked' : ''}`;\n\n    return output;\n}\n\nfunction getResourceName(service, requestId) {\n    var i = 1; // on purpose, 2 means second usage\n    var proposed = service.replace(/\\-/g, \"\") + MD5(requestId).substring(0,7);\n\n    while (global_used_refs.includes(proposed)) {\n        proposed = service.replace(/\\-/g, \"\") + MD5(requestId + i).substring(0,7);\n        i += 1;\n    }\n\n    global_used_refs.push(proposed);\n\n    return proposed;\n}\n\nfunction lcfirststr(str) {\n    if (str.toUpperCase() == str) {\n        return str.toLowerCase();\n    }\n\n    var ret = str.charAt(0).toLowerCase();\n\n    if (str.length > 1 && str[1].toUpperCase() == str[1]) {\n        var i = 1;\n        while (str.length > i && str[i].toUpperCase() == str[i]) {\n            ret += str[i].toLowerCase();\n            i++;\n        }\n        ret = ret.substring(0, ret.length-1) + ret.charAt(ret.length-1).toUpperCase() + str.substring(ret.length);\n    } else {\n        ret += str.substring(1);\n    }\n\n    return ret;\n}\n\nfunction outputMapTroposphere(index, service, type, options, region, was_blocked, logicalId) {\n    var output = '';\n    var params = '';\n\n    troposervice = type.split(\"::\")[1].toLowerCase();\n\n    if (troposervice == \"kinesisanalytics\") {\n        troposervice = \"analytics\";\n    } else if (troposervice == \"lambda\") {\n        troposervice = \"awslambda\";\n    } else if (troposervice == \"kinesisfirehose\") {\n        troposervice = \"firehose\";\n    }\n\n    tropotype = type.split(\"::\")[2];\n\n    if (troposervice == \"elasticsearch\" && tropotype == \"Domain\") {\n        tropotype = \"ElasticsearchDomain\";\n    } else if (troposervice == \"iam\" && tropotype == \"Policy\") {\n        tropotype = \"PolicyType\";\n    } else if (troposervice == \"route53\" && tropotype == \"RecordSet\") {\n        tropotype = \"RecordSetType\";\n    } else if (troposervice == \"sns\" && tropotype == \"Subscription\") {\n        tropotype = \"SubscriptionResource\";\n    }\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processTroposphereParameter(options[option], 4, troposervice + \".\" + option, index);\n                params += `,\n    ${option}=${optionvalue}`;\n            }\n        }\n    }\n\n    output += `${logicalId} = template.add_resource(${troposervice}.${tropotype}(\n    \"${logicalId}\"${params}\n))${was_blocked ? ' # blocked' : ''}\n\n`;\n\n    return output;\n}\n\nfunction outputMapCdkts(index, service, type, options, region, was_blocked, logicalId) {\n    var output = '';\n    var params = '';\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processCdktsParameter(options[option], 12, index);\n                params += `\n            ${lcfirststr(option)}: ${optionvalue},`;\n            }\n        }\n        params = \"{\" + params.substring(0, params.length - 1) + `\n        }`; // remove last comma\n    }\n\n    cdkservice = type.split(\"::\")[1].toLowerCase();\n    cdktype = type.split(\"::\")[2];\n\n    output += `        const ${logicalId} = new ${cdkservice}.Cfn${cdktype}(this, '${logicalId}', ${params});${was_blocked ? ' // blocked' : ''}\n\n`;\n\n    return output;\n}\n\nfunction outputMapIam(compiled_iam_outputs) {\n    var output = `{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n`;\n\n    for (var i=0; i<compiled_iam_outputs.length; i++) {\n        if (compiled_iam_outputs[i].mapped) {\n            compiled_iam_outputs[i].action = [...new Set(compiled_iam_outputs[i].action)]; // dedup\n            if (compiled_iam_outputs[i].action.length == 1) {\n                compiled_iam_outputs[i].action = compiled_iam_outputs[i].action[0];\n            }\n            compiled_iam_outputs[i].resource = [...new Set(compiled_iam_outputs[i].resource)]; // dedup\n            if (compiled_iam_outputs[i].resource.length == 1) {\n                compiled_iam_outputs[i].resource = compiled_iam_outputs[i].resource[0];\n            }\n\n            var sid = \"mapped\" + MD5(Math.random().toString()).substring(0,7);\n\n            output += `        {\n            \"Sid\": \"${sid}\",\n            \"Action\": ${JSON.stringify(compiled_iam_outputs[i].action).replace(/\\,/g,\",\\n                \").replace(/\\[/g,\"[\\n                \").replace(/\\]/g,\"\\n            ]\")},\n            \"Resource\": ${JSON.stringify(compiled_iam_outputs[i].resource).replace(/\\,/g,\",\\n                \").replace(/\\[/g,\"[\\n                \").replace(/\\]/g,\"\\n            ]\")},\n            \"Effect\": ${JSON.stringify(compiled_iam_outputs[i].effect)}\n        },\n`;\n        }\n    }\n\n    for (var i=0; i<compiled_iam_outputs.length; i++) {\n        if (!compiled_iam_outputs[i].mapped) {\n            compiled_iam_outputs[i].action = [...new Set(compiled_iam_outputs[i].action)]; // dedup\n            if (compiled_iam_outputs[i].action.length == 1) {\n                compiled_iam_outputs[i].action = compiled_iam_outputs[i].action[0];\n            }\n            compiled_iam_outputs[i].resource = [...new Set(compiled_iam_outputs[i].resource)]; // dedup\n            if (compiled_iam_outputs[i].resource.length == 1) {\n                compiled_iam_outputs[i].resource = compiled_iam_outputs[i].resource[0];\n            }\n\n            var sid = \"unmappedactions\";\n\n            output += `        {\n            \"Sid\": \"${sid}\",\n            \"Action\": ${JSON.stringify(compiled_iam_outputs[i].action).replace(/\\,/g,\",\\n                \").replace(/\\[/g,\"[\\n                \").replace(/\\]/g,\"\\n            ]\")},\n            \"Resource\": ${JSON.stringify(compiled_iam_outputs[i].resource).replace(/\\,/g,\",\\n                \").replace(/\\[/g,\"[\\n                \").replace(/\\]/g,\"\\n            ]\")},\n            \"Effect\": ${JSON.stringify(compiled_iam_outputs[i].effect)}\n        },\n`;\n        }\n    }\n\n    output = output.substring(0, output.length - 2); // strip last comma\n\n    output += `\n    ]\n}\n`;\n\n    return output;\n}\n\nfunction compileMapIam(compiled_iam_outputs, service, method, options, region, was_blocked) {\n    var action = [\n        service + \":\" + method\n    ];\n\n    if (options.Action) {\n        action = options.Action;\n    }\n\n    if (options.Resource) {\n        compiled_iam_outputs.push({\n            'mapped': true,\n            'action': action,\n            'resource': options.Resource,\n            'effect': 'Allow'\n        });\n    } else {\n        for (var i=0; i<compiled_iam_outputs.length; i++) {\n            if (compiled_iam_outputs[i].mapped == false) {\n                compiled_iam_outputs[i].action.push(service + \":\" + method);\n\n                return compiled_iam_outputs;\n            }\n        }\n        compiled_iam_outputs.push({\n            'mapped': false,\n            'action': action,\n            'resource': [\n                '*'\n            ],\n            'effect': 'Allow'\n        });\n    }\n\n    if (options.secondary) { // can be single object or array of objects\n        if (Array.isArray(options.secondary)) {\n            for (var i=0; i<options.secondary.length; i++) {\n                compiled_iam_outputs = compileMapIam(compiled_iam_outputs, service, method, options.secondary[i], region, was_blocked);\n            }\n        } else {\n            compiled_iam_outputs = compileMapIam(compiled_iam_outputs, service, method, options.secondary, region, was_blocked);\n        }\n    }\n\n    return compiled_iam_outputs;\n}\n\nfunction outputMapCfn(index, service, type, options, region, was_blocked, logicalId) {\n    var output = '';\n    var params = '';\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                var optionvalue = processCfnParameter(options[option], (cfn_spacing.length * 3), index);\n\n                if (optionvalue !== undefined) {\n                    params += `\n${cfn_spacing}${cfn_spacing}${cfn_spacing}${option}: ${optionvalue}`;\n                }\n            }\n        }\n        params += `\n`;\n    }\n\n    if (params.trim() == \"\") {\n        output += `${cfn_spacing}${logicalId}:${was_blocked ? ' # blocked' : ''}\n        ${cfn_spacing}${cfn_spacing}Type: \"${type}\"\n\n`;\n    } else {\n        output += `${cfn_spacing}${logicalId}:${was_blocked ? ' # blocked' : ''}\n${cfn_spacing}${cfn_spacing}Type: \"${type}\"\n${cfn_spacing}${cfn_spacing}Properties:${params}\n`;\n    }\n\n\n\n    return output;\n}\n\nfunction outputMapTf(index, service, type, options, region, was_blocked, logicalId) {\n    var output = '';\n    var params = '';\n\n    if (Object.keys(options).length) {\n        for (option in options) {\n            if (options[option] !== undefined && options[option] !== null) {\n                if (Array.isArray(options[option]) && typeof options[option][0] === 'object') {\n                    for (var i=0; i<options[option].length; i++) {\n                        var optionvalue = processTfParameter(options[option][i], 4, index);\n                        if (optionvalue[0] == '{') {\n                            params += `\n    ${option} ${optionvalue}\n`;\n                        } else {\n                            params += `\n    ${option} = ${optionvalue}`;\n                        }\n\n                    }\n                } else {\n                    var optionvalue = processTfParameter(options[option], 4, index);\n                    if (optionvalue[0] == '{') {\n                        params += `\n    ${option} ${optionvalue}\n`;\n                    } else {\n                        params += `\n    ${option} = ${optionvalue}`;\n                    }\n                }\n            }\n        }\n        params += `\n`;\n    }\n\n    output += `\nresource \"${type}\" \"${logicalId}\" {${params}}\n`;\n\n    return output;\n}\n\nfunction outputMapCli(service, method, options, region, was_blocked) {\n    var params = '';\n\n    if (Object.keys(options).length) {\n        if ('_' in options) {\n            options['_'].forEach(arg => {\n                params += ` ${arg}`\n            });\n            delete options['_'];\n        }\n        if ('_cli_service' in options) {\n            service = options['_cli_service'];\n            delete options['_cli_service'];\n        }\n        for (option in options) {\n            if (options[option] !== undefined) {\n                if (options[option] === null) {\n                    params += ` ${option}`\n                } else if (typeof options[option] == \"boolean\") {\n                    if (options[option])\n                        params += ` ${option}`\n                    else\n                        params += ` --no-${option.substr(2)}`\n                } else {\n                    var optionvalue = JSON.stringify(options[option]);\n                    if (typeof options[option] == \"object\") {\n                        if (navigator.appVersion.indexOf(\"Win\")!=-1) {\n                            optionvalue = \"\\\"\" + optionvalue.replace(/\\\"/g, \"\\\\\\\"\") + \"\\\"\";\n                        } else {\n                            optionvalue = \"'\" + optionvalue + \"'\";\n                        }\n                    }\n                    params += ` ${option} ${optionvalue}`\n                }\n            }\n        }\n    }\n\n    output = `aws ${service} ${method}${params} --region ${region}${was_blocked ? ' # blocked' : ''}\n`;\n\n    return output;\n}\n\nfunction compileOutputs() {\n    if (!outputs.length) {\n        return {\n            'boto3': '# No recorded actions yet',\n            'go': '// No recorded actions yet',\n            'cfn': '# No recorded actions yet',\n            'tf': '# No recorded actions yet',\n            'cli': '# No recorded actions yet',\n            'js': '// No recorded actions yet',\n            'cdkts': '// No recorded actions yet',\n            'iam': '// No recorded actions yet',\n            'troposphere': '# No recorded actions yet'\n        };\n    }\n\n    var services = {\n        'go': [],\n        'cdkts': [],\n        'troposphere': []\n    };\n    for (var i=0; i<outputs.length; i++) {\n        if (!services['go'].includes(outputs[i].service)) {\n            services['go'].push(outputs[i].service);\n        }\n    }\n    for (var i=0; i<tracked_resources.length; i++) {\n        if (tracked_resources[i].type && !services['cdkts'].includes(tracked_resources[i].type.split(\"::\")[1].toLowerCase())) {\n            var troposervice = tracked_resources[i].type.split(\"::\")[1].toLowerCase();\n\n            if (troposervice == \"kinesisanalytics\") {\n                troposervice = \"analytics\";\n            } else if (troposervice == \"lambda\") {\n                troposervice = \"awslambda\";\n            } else if (troposervice == \"kinesisfirehose\") {\n                troposervice = \"firehose\";\n            }\n\n            services['cdkts'].push(tracked_resources[i].type.split(\"::\")[1].toLowerCase());\n            services['troposphere'].push(troposervice);\n        }\n    }\n\n    var has_cfn = false;\n    var has_tf = false;\n    for (var i=0; i<tracked_resources.length; i++) {\n        if (tracked_resources[i].type) {\n            has_cfn = true;\n        }\n        if (tracked_resources[i].terraformType) {\n            has_tf = true;\n        }\n    }\n\n    var region = outputs[0].region;\n\n    compiled = {\n        'boto3': `# pip install boto3\n\nimport boto3\n`,\n        'go': `// go get -u github.com/aws/aws-sdk-go/...\n\npackage main\n\nimport (\n    \"github.com/aws/aws-sdk-go/aws\"\n    \"github.com/aws/aws-sdk-go/aws/session\"\n${services.go.map(service => `    \"github.com/aws/aws-sdk-go/service/${mapServiceJs(service).toLowerCase().replace(/\\-/g,'')}\"`).join(`\n`)}\n)\n\nfunc main() {\n`,\n        'cfn': `${!has_cfn ? '# No resources created in recording' : `AWSTemplateFormatVersion: \"2010-09-09\"\nMetadata:\n${cfn_spacing}Generator: \"console-recorder\"\nDescription: \"\"\nResources:\n`}`,\n        'tf': `${!has_tf ? '# No resources created in recording' : `# https://www.terraform.io/downloads.html\n\nprovider \"aws\" {\n    region = \"${tracked_resources[0].region}\"\n}\n`}`,\n        'cli': `# pip install awscli --upgrade --user\n\n`,\n        'js': `// npm install aws-sdk\n\nvar AWS = require('aws-sdk');`,\n        'cdkts': `${!has_cfn ? '// No resources created in recording' : `// npm i -g aws-cdk\n\n${services.cdkts.map(service => `import ${service} = require('@aws-cdk/aws-${service}');`).join(`\n`)}\nimport cdk = require('@aws-cdk/cdk');\n\nclass MyStack extends cdk.Stack {\n    constructor(parent: cdk.App, name: string, props?: cdk.StackProps) {\n        super(parent, name, props);\n\n`}`,\n        'iam': null,\n        'troposphere': `${!has_cfn ? '# No resources created in recording' : `# pip install troposphere\n\nfrom troposphere import ${services.troposphere.map(service => `${service}`).join(', ')}\nfrom troposphere import Ref, GetAtt, Template\n\ntemplate = Template()\n\ntemplate.add_version(\"2010-09-09\")\n\n`}`\n    }\n\n    declared_services = {\n        'boto3': [],\n        'go': [],\n        'js': []\n    }\n    go_first_output = true;\n\n    var compiled_iam_outputs = [];\n    for (var i=0; i<outputs.length; i++) {\n        compiled['boto3'] += outputMapBoto3(outputs[i].service, outputs[i].method.boto3, outputs[i].options.boto3, outputs[i].region, outputs[i].was_blocked);\n        compiled['go'] += outputMapGo(outputs[i].service, outputs[i].method.api, outputs[i].options.boto3, outputs[i].region, outputs[i].was_blocked);\n        compiled['cli'] += outputMapCli(outputs[i].service, outputs[i].method.cli, outputs[i].options.cli, outputs[i].region, outputs[i].was_blocked);\n        compiled['js'] += outputMapJs(outputs[i].service, lowerFirstChar(outputs[i].method.api), outputs[i].options.boto3, outputs[i].region, outputs[i].was_blocked);\n        compiled_iam_outputs = compileMapIam(compiled_iam_outputs, outputs[i].service, outputs[i].method.api, outputs[i].options.iam, outputs[i].region, outputs[i].was_blocked);\n    }\n    compiled['iam'] = outputMapIam(compiled_iam_outputs);\n    compiled['js'] += `\\n`;\n    compiled['go'] += `\n    if err != nil {\n        panic(err);\n    }\n}\n`;\n\n    for (var i=0; i<tracked_resources.length; i++) {\n        if (tracked_resources[i].type) {\n            compiled['cfn'] += outputMapCfn(i, tracked_resources[i].service, tracked_resources[i].type, tracked_resources[i].options.cfn, tracked_resources[i].region, tracked_resources[i].was_blocked, tracked_resources[i].logicalId);\n            compiled['cdkts'] += outputMapCdkts(i, tracked_resources[i].service, tracked_resources[i].type, tracked_resources[i].options.cfn, tracked_resources[i].region, tracked_resources[i].was_blocked, tracked_resources[i].logicalId);\n            compiled['troposphere'] += outputMapTroposphere(i, tracked_resources[i].service, tracked_resources[i].type, tracked_resources[i].options.cfn, tracked_resources[i].region, tracked_resources[i].was_blocked, tracked_resources[i].logicalId);\n        }\n        if (tracked_resources[i].terraformType) {\n            compiled['tf'] += outputMapTf(i, tracked_resources[i].service, tracked_resources[i].terraformType, tracked_resources[i].options.tf, tracked_resources[i].region, tracked_resources[i].was_blocked, tracked_resources[i].logicalId);\n        }\n    }\n    for (var i=0; i<tracked_resources.length; i++) {\n        if (tracked_resources[i].type) {\n            compiled['cdkts'] = compiled['cdkts'].substring(0, compiled['cdkts'].length-1); // trim a newline\n            compiled['cdkts'] += `\n        new cdk.Output(this, '${tracked_resources[i].logicalId}Ref', { value: ${tracked_resources[i].logicalId}.ref, disableExport: true });`;\n        }\n    }\n\n    if (tracked_resources.length) {\n        compiled['cdkts'] += `\n    }\n}\n\nconst app = new cdk.App();\n\nnew MyStack(app, 'my-stack-name', { env: { region: '${tracked_resources[0].region}' } });\n\napp.run();\n`;\n        compiled['troposphere'] += `print(template.to_yaml())\n`;\n    }\n\n    return compiled;\n}\n\nfunction mapServiceJs(service) {\n    var service_mapping = {\n        \"acm\": \"ACM\",\n        \"acm-pca\": \"ACMPCA\",\n        \"apigateway\": \"APIGateway\",\n        \"alexaforbusiness\": \"AlexaForBusiness\",\n        \"appstream\": \"AppStream\",\n        \"appsync\": \"AppSync\",\n        \"application-autoscaling\": \"ApplicationAutoScaling\",\n        \"athena\": \"Athena\",\n        \"autoscaling\": \"AutoScaling\",\n        \"autoscaling-plans\": \"AutoScalingPlans\",\n        \"batch\": \"Batch\",\n        \"budgets\": \"Budgets\",\n        \"cur\": \"CUR\",\n        \"cloud9\": \"Cloud9\",\n        \"clouddirectory\": \"CloudDirectory\",\n        \"cloudformation\": \"CloudFormation\",\n        \"cloudfront\": \"CloudFront\",\n        \"cloudhsm\": \"CloudHSM\",\n        \"cloudhsmv2\": \"CloudHSMV2\",\n        \"cloudsearch\": \"CloudSearch\",\n        \"cloudsearchdomain\": \"CloudSearchDomain\",\n        \"cloudtrail\": \"CloudTrail\",\n        \"cloudwatch\": \"CloudWatch\",\n        \"cloudwatchevents\": \"CloudWatchEvents\",\n        \"cloudwatchlogs\": \"CloudWatchLogs\",\n        \"codebuild\": \"CodeBuild\",\n        \"codecommit\": \"CodeCommit\",\n        \"codedeploy\": \"CodeDeploy\",\n        \"codepipeline\": \"CodePipeline\",\n        \"codestar\": \"CodeStar\",\n        \"cognito-identity\": \"CognitoIdentity\",\n        \"cognito-idp\": \"CognitoIdentityServiceProvider\",\n        \"cognito-sync\": \"CognitoSync\",\n        \"comprehend\": \"Comprehend\",\n        \"config\": \"ConfigService\",\n        \"connect\": \"Connect\",\n        \"costexplorer\": \"CostExplorer\",\n        \"dax\": \"DAX\",\n        \"dlm\": \"DLM\",\n        \"dms\": \"DMS\",\n        \"datapipeline\": \"DataPipeline\",\n        \"devicefarm\": \"DeviceFarm\",\n        \"directconnect\": \"DirectConnect\",\n        \"ds\": \"DirectoryService\",\n        \"discovery\": \"Discovery\",\n        \"dynamodb\": \"DynamoDB\",\n        \"dynamodbstreams\": \"DynamoDBStreams\",\n        \"ec2\": \"EC2\",\n        \"ecr\": \"ECR\",\n        \"ecs\": \"ECS\",\n        \"efs\": \"EFS\",\n        \"eks\": \"EKS\",\n        \"elb\": \"ELB\",\n        \"elbv2\": \"ELBv2\",\n        \"emr\": \"EMR\",\n        \"es\": \"ES\",\n        \"elasticache\": \"ElastiCache\",\n        \"elasticbeanstalk\": \"ElasticBeanstalk\",\n        \"elastictranscoder\": \"ElasticTranscoder\",\n        \"fms\": \"FMS\",\n        \"firehose\": \"Firehose\",\n        \"gamelift\": \"GameLift\",\n        \"glacier\": \"Glacier\",\n        \"glue\": \"Glue\",\n        \"greengrass\": \"Greengrass\",\n        \"guardduty\": \"GuardDuty\",\n        \"health\": \"Health\",\n        \"iam\": \"IAM\",\n        \"importexport\": \"ImportExport\",\n        \"inspector\": \"Inspector\",\n        \"iot1click-devices\": \"IoT1ClickDevicesService\",\n        \"iot1click-projects\": \"IoT1ClickProjects\",\n        \"iotanalytics\": \"IoTAnalytics\",\n        \"iot-jobs-data\": \"IoTJobsDataPlane\",\n        \"iot\": \"Iot\",\n        \"iot-data\": \"IotData\",\n        \"kms\": \"KMS\",\n        \"kinesis\": \"Kinesis\",\n        \"kinesisanalytics\": \"KinesisAnalytics\",\n        \"kinesisvideo\": \"KinesisVideo\",\n        \"kinesis-video-archived-media\": \"KinesisVideoArchivedMedia\",\n        \"kinesis-video-media\": \"KinesisVideoMedia\",\n        \"lambda\": \"Lambda\",\n        \"lex-models\": \"LexModelBuildingService\",\n        \"lex-runtime\": \"LexRuntime\",\n        \"lightsail\": \"Lightsail\",\n        \"mq\": \"MQ\",\n        \"mturk\": \"MTurk\",\n        \"machinelearning\": \"MachineLearning\",\n        \"macie\": \"Macie\",\n        \"marketplacecommerceanalytics\": \"MarketplaceCommerceAnalytics\",\n        \"marketplace-entitlement\": \"MarketplaceEntitlementService\",\n        \"meteringmarketplace\": \"MarketplaceMetering\",\n        \"mediaconvert\": \"MediaConvert\",\n        \"medialive\": \"MediaLive\",\n        \"mediapackage\": \"MediaPackage\",\n        \"mediastore\": \"MediaStore\",\n        \"mediastore-data\": \"MediaStoreData\",\n        \"mediatailor\": \"MediaTailor\",\n        \"metadataservice\": \"MetadataService\",\n        \"mgh\": \"MigrationHub\",\n        \"mobile\": \"Mobile\",\n        \"mobileanalytics\": \"MobileAnalytics\",\n        \"neptune\": \"Neptune\",\n        \"opsworks\": \"OpsWorks\",\n        \"opsworkscm\": \"OpsWorksCM\",\n        \"organizations\": \"Organizations\",\n        \"pi\": \"PI\",\n        \"pinpoint\": \"Pinpoint\",\n        \"polly\": \"Polly\",\n        \"pricing\": \"Pricing\",\n        \"rds\": \"RDS\",\n        \"redshift\": \"Redshift\",\n        \"rekognition\": \"Rekognition\",\n        \"resource-groups\": \"ResourceGroups\",\n        \"resourcegroupstaggingapi\": \"ResourceGroupsTaggingAPI\",\n        \"route53\": \"Route53\",\n        \"route53domains\": \"Route53Domains\",\n        \"route53resolver\": \"Route53Resolver\",\n        \"s3\": \"S3\",\n        \"ses\": \"SES\",\n        \"sms\": \"SMS\",\n        \"sns\": \"SNS\",\n        \"sqs\": \"SQS\",\n        \"ssm\": \"SSM\",\n        \"sts\": \"STS\",\n        \"swf\": \"SWF\",\n        \"sagemaker\": \"SageMaker\",\n        \"sagemaker-runtime\": \"SageMakerRuntime\",\n        \"secretsmanager\": \"SecretsManager\",\n        \"serverlessrepo\": \"ServerlessApplicationRepository\",\n        \"servicecatalog\": \"ServiceCatalog\",\n        \"servicediscovery\": \"ServiceDiscovery\",\n        \"shield\": \"Shield\",\n        \"simpledb\": \"SimpleDB\",\n        \"snowball\": \"Snowball\",\n        \"stepfunctions\": \"StepFunctions\",\n        \"storagegateway\": \"StorageGateway\",\n        \"support\": \"Support\",\n        \"temporarycredentials\": \"TemporaryCredentials\",\n        \"transcribeservice\": \"TranscribeService\",\n        \"translate\": \"Translate\",\n        \"waf\": \"WAF\",\n        \"waf-regional\": \"WAFRegional\",\n        \"workdocs\": \"WorkDocs\",\n        \"workmail\": \"WorkMail\",\n        \"workspaces\": \"WorkSpaces\",\n        \"xray\": \"XRay\"\n    };\n\n    return service_mapping[service] || \"\";\n}\n\nfunction lowerFirstChar(str) {\n    return str.substring(0,1).toLowerCase() + str.substring(1);\n}\n\nfunction convertApiToCli(str) {\n    var i = 1;\n    var character = '';\n    var next_char = '';\n    var prev_char = '';\n    var outputstr = str.substring(0,1).toLowerCase();\n    \n    while (i <= str.length) {\n        character = str.charAt(i);\n        next_char = str.charAt(i+1);\n        prev_char = str.charAt(i-1);\n        if (character == character.toUpperCase() && character != \"\" && (next_char != next_char.toUpperCase() || prev_char != prev_char.toUpperCase())) {\n            outputstr += \"-\";\n        }\n        outputstr += character.toLowerCase();\n        i++;\n    }\n\n    return outputstr;\n}\n\nfunction recursiveParamsFromXml(node) {\n    var ret = {};\n\n    for (var child in node.children) {\n        if (node.children[child].tagName) {\n            if (node.children[child].children && node.children[child].children.length > 0) {\n                ret[node.children[child].tagName] = recursiveParamsFromXml(node.children[child]);\n            } else {\n                ret[node.children[child].tagName] = node.children[child].textContent;\n            }\n        }\n    }\n\n    return ret;\n}\n\nfunction addToParamsFromXml(params, xml) {\n    var xmlobj = new DOMParser().parseFromString(xml, \"text/xml\");\n    var root = xmlobj.firstChild;\n    var tagname = root.tagName;\n    var value = recursiveParamsFromXml(xmlobj);\n\n    params.boto3[tagname] = value[tagname];\n    params.cli['--' + convertApiToCli(tagname)] = JSON.stringify(value[tagname]);\n\n    return params;\n}\n\nfunction onAttach(tabId) {\n    chrome.debugger.sendCommand({ //first enable the Network\n        tabId: tabId\n    }, \"Network.enable\");\n\n    chrome.debugger.onEvent.addListener(allEventHandler);\n}\n\nfunction allEventHandler(debuggeeId, message, params) {\n    if (message == \"Network.requestWillBeSent\") { // TODO: Fix race condition and bad potential breakage here\n        for (var i=tracked_resources.length-1; i>=0; i--) {\n            if (params.request.url == tracked_resources[i].requestDetails.url && Math.abs(params.wallTime-(tracked_resources[i].requestDetails.timeStamp/1000)) < 0.5) { // max 500ms between webRequest and debugger\n                tracked_resources[i].debuggerRequestId = params.requestId;\n                // dont break here, potentially many tracked resources to one call\n            }\n        }\n    } else if (message == \"Network.responseReceived\") { // response return \n        chrome.debugger.sendCommand({\n            tabId: debuggeeId.tabId\n        }, \"Network.getResponseBody\", {\n            \"requestId\": params.requestId\n        }, function(response) {\n            try {\n                var body = response.body;\n\n                if (response.base64Encoded) {\n                    body = window.atob(response.body);\n                }\n                \n                for (var i=tracked_resources.length-1; i>=0; i--) {\n                    if (params.requestId == tracked_resources[i].debuggerRequestId) {\n                        tracked_resources[i][\"response\"] = {\n                            'timestamp': params.timestamp,\n                            'properties': params.response,\n                            'body': body\n                        };\n                        setOutputsForTrackedResource(i);\n                    }\n                }\n\n                for (var i=0; i<outputs.length; i++) { // TODO\n                    ;\n                }\n            } catch(err) { ; }\n        });\n    }\n}\n\nchrome.runtime.onMessage.addListener(\n    function(message, sender, sendResponse) {\n        if (message.action == \"getCompiledOutputs\") {\n            sendResponse(compileOutputs());\n        } else if (message.action == \"setBlockingOn\") {\n            blocking = true;\n            chrome.storage.local.set({blocking: true});\n            sendResponse(true);\n        } else if (message.action == \"setBlockingOff\") {\n            blocking = false;\n            chrome.storage.local.set({blocking: false});\n            sendResponse(true);\n        } else if (message.action == \"getBlockingStatus\") {\n            sendResponse(blocking);\n        } else if (message.action == \"getCfnSpacing\") {\n            sendResponse(cfn_spacing.length);\n        } else if (message.action == \"setCfnSpacing\") {\n            if (message.cfnspacing == 4) {\n                cfn_spacing = \"    \";\n            } else if (message.cfnspacing == 2) {\n                cfn_spacing = \"  \";\n            }\n            chrome.storage.local.set({cfnspacing: message.cfnspacing});\n            sendResponse(true);\n        } else if (message.action == \"getTheme\") {\n            sendResponse(theme);\n        } else if (message.action == \"setTheme\") {\n            theme = message.theme;\n            chrome.storage.local.set({theme: theme});\n            sendResponse(true);\n        } else if (message.action == \"setInterceptOn\") {\n            intercept = true;\n            chrome.storage.local.set({intercept: true});\n\n            /* TODO: Check if required\n            chrome.tabs.query(\n                {\n                    url: [\n                        \"*://*.console.aws.amazon.com/*\",\n                        \"*://console.aws.amazon.com/*\",\n                        \"*://*.amazonaws.com/*\"\n                    ]\n                },\n                function(tabArray) {\n                    for (var i=0; i<tabArray.length; i++) {\n                        var tab = tabArray[i];\n                        chrome.debugger.attach({\n                            tabId: tab.id\n                        }, \"1.2\", onAttach.bind(null, tab.id));\n                    }\n                }\n            );\n            */\n\n            sendResponse(true);\n        } else if (message.action == \"setInterceptOff\") {\n            intercept = false;\n            chrome.storage.local.set({intercept: false});\n\n            /* TODO: Check if required\n            chrome.debugger.onEvent.removeListener(allEventHandler);\n            chrome.debugger.getTargets(function(targets) {\n                for (var i=0; i<targets.length; i++) {\n                    chrome.debugger.detach({ // have to construct the object?!?\n                        'tabId': targets[i].tabId,\n                        'extensionId': targets[i].extensionId,\n                        'targetId': targets[i].id\n                    });\n                }\n            });\n            */\n\n            sendResponse(true);\n        } else if (message.action == \"getInterceptStatus\") {\n            sendResponse(intercept);\n        } else if (message.action == \"setRecordingOn\") {\n            recording = true;\n\n            chrome.webRequest.onBeforeRequest.addListener(\n                analyseRequest,\n                {urls: [\n                    \"*://*.aws.amazon.com/*\",\n                    \"*://*.amazonaws.com/*\",\n                    \"*://*.amazonaws-us-gov.com/*\"\n                ]},\n                [\"requestBody\",\"blocking\"]\n            );\n\n            if (intercept && navigator.userAgent.search(\"Firefox\") == -1) {\n                chrome.tabs.query(\n                    {\n                        url: [\n                            \"*://*.aws.amazon.com/*\",\n                            \"*://*.amazonaws.com/*\",\n                            \"*://*.amazonaws-us-gov.com/*\"\n                        ]\n                    },\n                    function(tabArray) {\n                        for (var i=0; i<tabArray.length; i++) {\n                            var tab = tabArray[i];\n                            try {\n                                chrome.debugger.attach({\n                                    tabId: tab.id\n                                }, \"1.2\", onAttach.bind(null, tab.id));\n                            } catch(e) {\n                                ;\n                            }\n                        }\n                    }\n                );\n            }\n\n            chrome.browserAction.setBadgeText({ text: \"REC\" });\n\t\t\tchrome.browserAction.setBadgeBackgroundColor({ color: \"#FF2222\" });\n\n            sendResponse(true);\n        } else if (message.action == \"setRecordingOff\") {\n            recording = false;\n\n            chrome.webRequest.onBeforeRequest.removeListener(analyseRequest);\n\n            if (intercept && navigator.userAgent.search(\"Firefox\") == -1) {\n                try {\n                    chrome.debugger.onEvent.removeListener(allEventHandler);\n                    chrome.debugger.getTargets(function(targets) {\n                        for (var i=0; i<targets.length; i++) {\n                            chrome.debugger.detach({ // have to construct the object?!?\n                                'tabId': targets[i].tabId,\n                                'extensionId': targets[i].extensionId,\n                                'targetId': targets[i].id\n                            }, function(){\n                                void chrome.runtime.lastError; // don't care\n                            });\n                        }\n                    });\n                } catch(e) {\n                    ;\n                }\n            }\n\n            chrome.browserAction.setBadgeText({ text: \"\" });\n\n            sendResponse(true);\n        } else if (message.action == \"getRecordingStatus\") {\n            sendResponse(recording);\n        } else if (message.action == \"clearData\") {\n            outputs = [];\n            tracked_resources = [];\n            sendResponse(true);\n        }\n    }\n);\n\nfunction getUrlValue(url, key) {\n    var url = new URL(url);\n\n    return url.searchParams.get(key);\n}\n\nfunction getPipeSplitField(str, index) { // DEPRECATED, use interpretGwtWireRequest instead\n    if (!str) return null;\n    \n    var pipesplit = str.split(\"|\");\n\n    var result = pipesplit[parseInt(index)];\n\n    if (result == \"\") return null;\n\n    if (isNaN(parseInt(result))) {\n        return result;\n    }\n\n    return parseInt(result);\n}\n\nfunction setOutputsForTrackedResource(index) {\n    var jsonResponseBody = {};\n    var xmlResponseBody = {};\n\n    try {\n        if (tracked_resources[index].response.body.startsWith(\"<\")) {\n            xmlResponseBody = new DOMParser().parseFromString(tracked_resources[index].response.body, \"text/xml\");\n        } else {\n            jsonResponseBody = JSON.parse(tracked_resources[index].response.body);\n        }\n\n        if (tracked_resources[index].type == \"AWS::AmazonMQ::Broker\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.brokerId,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.brokerArn\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.brokerId,\n                    'arn': jsonResponseBody.brokerArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AmazonMQ::Configuration\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.arn,\n                    'Revision': jsonResponseBody.latestRevision.revision\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.brokerId,\n                    'arn': jsonResponseBody.brokerArn,\n                    'latest_revision': jsonResponseBody.latestRevision.revision\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::Account\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::Authorizer\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGatewayV2::Authorizer\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::DocumentationPart\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::DomainName\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::GatewayResponse\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::Method\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::Model\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGatewayV2::Model\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ApiGateway::UsagePlan\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.id,\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AppSync::ApiKey\") {\n            tracked_resources[index].returnValues = {\n                'Ref': null,\n                'GetAtt': {\n                    'ApiKey': jsonResponseBody.apiKey.id\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AppSync::DataSource\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.dataSource.dataSourceArn,\n                'GetAtt': {\n                    'DataSourceArn': jsonResponseBody.dataSource.dataSourceArn,\n                    'Name': jsonResponseBody.dataSource.name\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.dataSource.dataSourceArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AppSync::GraphQLApi\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.graphqlApi.arn,\n                'GetAtt': {\n                    'GraphQLUrl': jsonResponseBody.graphqlApi.uris.GRAPHQL,\n                    'Arn': jsonResponseBody.graphqlApi.arn,\n                    'ApiId': jsonResponseBody.graphqlApi.apiId\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.graphqlApi.apiId,\n                    'arn': jsonResponseBody.graphqlApi.arn,\n                    'uris': jsonResponseBody.graphqlApi.uris\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AppSync::GraphQLSchema\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ApiId + \"GraphQLSchema\"\n            };\n        } else if (tracked_resources[index].type == \"AWS::AppSync::Resolver\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.resolver.resolverArn,\n                'GetAtt': {\n                    'TypeName': jsonResponseBody.resolver.typeName,\n                    'ResolverArn': jsonResponseBody.resolver.resolverArn,\n                    'FieldName': jsonResponseBody.resolver.fieldName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Athena::NamedQuery\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.Name\n            };\n        } else if (tracked_resources[index].type == \"AWS::AutoScaling::AutoScalingGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.AutoScalingGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.AutoScalingGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AutoScaling::LaunchConfiguration\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.LaunchConfigurationName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.LaunchConfigurationName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AutoScaling::LifecycleHook\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.LifecycleHookName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.LifecycleHookName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AutoScaling::ScalingPolicy\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.PolicyARN,\n                'Terraform': {\n                    'arn': jsonResponseBody.PolicyARN\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::AutoScaling::ScheduledAction\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ScheduledActionName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.ScheduledActionName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Batch::ComputeEnvironment\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.computeEnvironmentArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.computeEnvironmentArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Batch::JobDefinition\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.jobDefinitionArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.jobDefinitionArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Batch::JobQueue\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.jobQueueArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.jobQueueArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Budgets::Budget\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::CertificateManager::Certificate\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.certificateArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.certificateArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::CloudTrail::Trail\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.TrailName,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.data.trailArn,\n                    'SnsTopicArn': jsonResponseBody.data.snsTopicArn\n                },\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.TrailName,\n                    'arn': jsonResponseBody.data.trailArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::CodeDeploy::Application\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ApplicationName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.ApplicationName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::CodeDeploy::DeploymentConfig\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.DeploymentConfigName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.DeploymentConfigName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::CodeDeploy::DeploymentGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.DeploymentGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.DeploymentGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::CodePipeline::Pipeline\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.Name,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.Name\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::IdentityPool\") {\n            tracked_resources[index].returnValues = {\n                'Ref': null,\n                'GetAtt': {\n                    'Name': tracked_resources[index].options.cfn.IdentityPoolName\n                },\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.IdentityPoolName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::UserPool\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.success.data.id,\n                'GetAtt': {\n                    //'ProviderName': jsonResponseBody.success.data.,\n                    //'ProviderURL': jsonResponseBody.success.data.,\n                    'Arn': jsonResponseBody.success.data.arn\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.success.data.id,\n                    'arn': jsonResponseBody.success.data.arn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::UserPoolClient\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.success.data.id,\n                'Terraform': {\n                    'id': jsonResponseBody.success.data.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::UserPoolGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.GroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.GroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::UserPoolUser\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.Username\n            };\n        } else if (tracked_resources[index].type == \"AWS::Cognito::UserPoolUserToGroupAttachment\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::Config::ConfigurationAggregator\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ConfigurationAggregatorName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.ConfigurationAggregatorName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Config::ConfigRule\") {\n            ; // TODO\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ConfigRuleName,\n                'GetAtt': {\n                    //'Arn': jsonResponseBody.,\n                    //'ConfigRuleId': jsonResponseBody.,\n                    //'Compliance.Type': jsonResponseBody.\n                },\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.ConfigRuleName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::DirectoryService::MicrosoftAD\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.DirectoryId,\n                'Terraform': {\n                    'id': jsonResponseBody.DirectoryId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::DirectoryService::SimpleAD\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.DirectoryId,\n                'Terraform': {\n                    'id': jsonResponseBody.DirectoryId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::DocDB::DBCluster\") {\n            tracked_resources[index].returnValues = {\n                'Ref': xmlResponseBody.getElementsByTagName(\"DBClusterIdentifier\")[0].textContent,\n                'GetAtt': {\n                    'ClusterResourceId': xmlResponseBody.getElementsByTagName(\"DbClusterResourceId\")[0].textContent,\n                    'Endpoint': xmlResponseBody.getElementsByTagName(\"Endpoint\")[0].textContent,\n                    'Port': xmlResponseBody.getElementsByTagName(\"Port\")[0].textContent,\n                    'ReadEndpoint': xmlResponseBody.getElementsByTagName(\"ReaderEndpoint\")[0].textContent\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::DocDB::DBClusterParameterGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': xmlResponseBody.getElementsByTagName(\"DBClusterParameterGroupName\")[0].textContent\n            };\n        } else if (tracked_resources[index].type == \"AWS::DocDB::DBInstance\") {\n            tracked_resources[index].returnValues = {\n                'Ref': xmlResponseBody.getElementsByTagName(\"DBInstanceIdentifier\")[0].textContent\n            };\n        } else if (tracked_resources[index].type == \"AWS::DocDB::DBSubnetGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': xmlResponseBody.getElementsByTagName(\"DBSubnetGroupName\")[0].textContent\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::CustomerGateway\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.CustomerGateway.CustomerGatewayId,\n                'Terraform': {\n                    'id': jsonResponseBody.CustomerGateway.CustomerGatewayId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::EIP\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.PublicIp,\n                'GetAtt': {\n                    'AllocationId': jsonResponseBody.allocationId\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.allocationId,\n                    'public_ip': jsonResponseBody.PublicIp\n                }\n            };\n        }  else if (tracked_resources[index].type == \"AWS::EC2::EIPAssociation\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.associationId,\n                'Terraform': {\n                    'id': jsonResponseBody.allocationId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::EgressOnlyInternetGateway\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.egressOnlyInternetGateway.egressOnlyInternetGatewayId,\n                'Terraform': {\n                    'id': jsonResponseBody.egressOnlyInternetGateway.egressOnlyInternetGatewayId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::FlowLog\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.flowLogIds[0],\n                'Terraform': {\n                    'id': jsonResponseBody.flowLogIds[0]\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::Host\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::Instance\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.Instances[0].InstanceId,\n                'GetAtt': {\n                    'AvailabilityZone': jsonResponseBody.Instances[0].Placement.AvailabilityZone,\n                    'PrivateDnsName': jsonResponseBody.Instances[0].PrivateDnsName,\n                    'PublicDnsName': jsonResponseBody.Instances[0].PublicDnsName,\n                    'PrivateIp': jsonResponseBody.Instances[0].PrivateIpAddress\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.Instances[0].InstanceId,\n                    'availability_zone': jsonResponseBody.Instances[0].Placement.AvailabilityZone,\n                    'private_dns': jsonResponseBody.Instances[0].PrivateDnsName,\n                    'public_dns': jsonResponseBody.Instances[0].PublicDnsName,\n                    'private_ip': jsonResponseBody.Instances[0].PrivateIpAddress\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::InternetGateway\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.internetGateway.internetGatewayId,\n                'Terraform': {\n                    'id': jsonResponseBody.internetGateway.internetGatewayId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::LaunchTemplate\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.launchTemplate.launchTemplateId,\n                'GetAtt': {\n                    'LatestVersionNumber': jsonResponseBody.launchTemplate.latestVersionNumber,\n                    'DefaultVersionNumber': jsonResponseBody.launchTemplate.defaultVersionNumber\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.launchTemplate.launchTemplateId,\n                    'latest_version': jsonResponseBody.launchTemplate.latestVersionNumber,\n                    'default_version': jsonResponseBody.launchTemplate.defaultVersionNumber\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::NatGateway\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.natGateway.natGatewayId,\n                'Terraform': {\n                    'id': jsonResponseBody.natGateway.natGatewayId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::NetworkAcl\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::NetworkAclEntry\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::NetworkInterface\") {\n            var private_ips = [jsonResponseBody.networkInterface.privateIpAddress];\n            var secondaryIpAddresses = [];\n            for (var i=0; i<jsonResponseBody.networkInterface.privateIpAddresses.length; i++) {\n                if (!jsonResponseBody.networkInterface.privateIpAddresses[i].primary) {\n                    private_ips.push(jsonResponseBody.networkInterface.privateIpAddresses[i].privateIpAddress);\n                    secondaryIpAddresses.push(jsonResponseBody.networkInterface.privateIpAddresses[i].privateIpAddress);\n                }\n            }\n\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.networkInterface.networkInterfaceId,\n                'GetAtt': {\n                    'PrimaryPrivateIpAddress': jsonResponseBody.networkInterface.privateIpAddress,\n                    'SecondaryPrivateIpAddresses': secondaryIpAddresses\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.networkInterface.networkInterfaceId,\n                    'private_ips': private_ips\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::RouteTable\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::SecurityGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.securityGroupId,\n                'GetAtt': {\n                    'GroupId': jsonResponseBody.securityGroupId\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.securityGroupId,\n                    'description': tracked_resources[index].options.tf.description,\n                    'vpc_id': tracked_resources[index].options.tf.vpc_id,\n                    'name': tracked_resources[index].options.tf.name\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::Subnet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.Subnet.SubnetId,\n                'GetAtt': {\n                    'AvailabilityZone': jsonResponseBody.Subnet.AvailabilityZone,\n                    'Ipv6CidrBlocks': jsonResponseBody.Subnet.ipv6CidrBlockAssociationSet,\n                    //'NetworkAclAssociationId': jsonResponseBody.Subnet.,\n                    'VpcId': jsonResponseBody.Subnet.VpcId\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.Subnet.SubnetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::VPC\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.Vpc.VpcId,\n                'GetAtt': {\n                    'CidrBlock': jsonResponseBody.Vpc.CidrBlock\n                    // TODO: More\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.Vpc.VpcId,\n                    'cidr_block': jsonResponseBody.Vpc.CidrBlock\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EC2::VPCCidrBlock\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::VPCDHCPOptionsAssociation\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::EC2::VPNGateway\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.VpnGateway.VpnGatewayId,\n                'Terraform': {\n                    'id': jsonResponseBody.VpnGateway.VpnGatewayId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EFS::FileSystem\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.fileSystemId,\n                'Terraform': {\n                    'id': jsonResponseBody.fileSystemId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::EFS::MountTarget\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.mountTargetId,\n                'Terraform': {\n                    'id': jsonResponseBody.mountTargetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElastiCache::CacheCluster\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.actionResponses[0].data.replicationGroupId,\n                'GetAtt': {\n                    //'ConfigurationEndpoint.Address': jsonResponseBody.actionResponses[0].data.,\n                    //'ConfigurationEndpoint.Port': jsonResponseBody.actionResponses[0].data.,\n                    //'RedisEndpoint.Address': jsonResponseBody.actionResponses[0].data.,\n                    //'RedisEndpoint.Port': jsonResponseBody.actionResponses[0].data.\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.actionResponses[0].data.replicationGroupId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElastiCache::ParameterGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.CacheParameterGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.CacheParameterGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElastiCache::SubnetGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.CacheSubnetGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.CacheSubnetGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElasticLoadBalancing::LoadBalancer\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.LoadBalancerName,\n                'GetAtt': {\n                    //'CanonicalHostedZoneName': jsonResponseBody.securityGroupId,\n                    //'CanonicalHostedZoneNameID': jsonResponseBody.securityGroupId,\n                    'DNSName': jsonResponseBody.dnsName\n                    //'SourceSecurityGroup.GroupName': jsonResponseBody.securityGroupId,\n                    //'SourceSecurityGroup.OwnerAlias': jsonResponseBody.securityGroupId\n                },\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.LoadBalancerName,\n                    'dns_name': jsonResponseBody.dnsName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElasticLoadBalancingV2::Listener\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.listeners[0].listenerArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.listeners[0].listenerArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElasticLoadBalancingV2::ListenerRule\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.rules[0].ruleArn,\n                'Terraform': {\n                    'arn': jsonResponseBody.rules[0].ruleArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElasticLoadBalancingV2::LoadBalancer\") {\n            var lb_name_parts = jsonResponseBody.loadBalancers[0].loadBalancerArn.split(\"/\").shift();\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.loadBalancers[0].loadBalancerArn,\n                'GetAtt': {\n                    'CanonicalHostedZoneID': jsonResponseBody.loadBalancers[0].hostedZoneId,\n                    'DNSName': jsonResponseBody.loadBalancers[0].dnsName,\n                    'LoadBalancerFullName': lb_name_parts.join(\"/\"),\n                    'LoadBalancerName': jsonResponseBody.loadBalancers[0].loadBalancerName,\n                    'SecurityGroups': tracked_resources[index].options.cfn.SecurityGroups\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.loadBalancers[0].loadBalancerArn,\n                    'zone_id': jsonResponseBody.loadBalancers[0].hostedZoneId,\n                    'dns_name': jsonResponseBody.loadBalancers[0].dnsName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ElasticLoadBalancingV2::TargetGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.targetGroups[0].arn,\n                'GetAtt': {\n                    'LoadBalancerArns': jsonResponseBody.targetGroups[0].loadBalancerArn,\n                    'TargetGroupFullName': jsonResponseBody.targetGroups[0].loadBalancerArn.split(\":\").pop(),\n                    'TargetGroupName': jsonResponseBody.targetGroups[0].name\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.targetGroups[0].arn,\n                    'name': jsonResponseBody.targetGroups[0].name\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Elasticsearch::Domain\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.DomainStatus.DomainId,\n                'GetAtt': {\n                    'DomainArn': jsonResponseBody.DomainStatus.ARN,\n                    'DomainEndpoint': jsonResponseBody.DomainStatus.Endpoint\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.DomainStatus.DomainId,\n                    'arn': jsonResponseBody.DomainStatus.ARN,\n                    'endpoint': jsonResponseBody.DomainStatus.Endpoint\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Events::Rule\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::GameLift::Alias\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::GameLift::Build\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::GameLift::Fleet\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::Glue::Classifier\") {\n            var ref = null;\n            if (tracked_resources[index].options.cfn.GrokClassifier) {\n                ref = tracked_resources[index].options.cfn.GrokClassifier.Name;\n            }\n            if (tracked_resources[index].options.cfn.JsonClassifier) {\n                ref = tracked_resources[index].options.cfn.JsonClassifier.Name;\n            }\n            if (tracked_resources[index].options.cfn.XMLClassifier) {\n                ref = tracked_resources[index].options.cfn.XMLClassifier.Name;\n            }\n\n            tracked_resources[index].returnValues = {\n                'Ref': ref,\n                'Terraform': {\n                    'id': ref\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Glue::Connection\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ConnectionInput\n            };\n        } else if (tracked_resources[index].type == \"AWS::Glue::Table\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.TableInput\n            };\n        } else if (tracked_resources[index].type == \"AWS::GuardDuty::Detector\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.detectorId,\n                'Terraform': {\n                    'id': jsonResponseBody.detectorId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::GuardDuty::IPSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.ipSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.ipSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::GuardDuty::Member\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.MemberId,\n                'Terraform': {\n                    'id': tracked_resources[index].options.cfn.MemberId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::IAM::User\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.name,\n                'GetAtt': {\n                    //'Arn': jsonResponseBody.\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.name\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::IAM::UserToGroupAddition\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::Inspector::AssessmentTarget\") {\n            tracked_resources[index].returnValues = {\n                'Ref': null,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.assessmentTargetArn\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.assessmentTargetArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Inspector::AssessmentTemplate\") {\n            tracked_resources[index].returnValues = {\n                'Ref': null,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.assessmentTemplateArn\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.assessmentTemplateArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Inspector::ResourceGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': null,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.resourceGroupArn\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.resourceGroupArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Kinesis::Stream\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::KinesisFirehose::DeliveryStream\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::Lambda::Alias\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.arn,\n                'Terraform': {\n                    'arn': jsonResponseBody.arn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Lambda::Function\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.FunctionName,\n                'GetAtt': {\n                    'Arn': jsonResponseBody.FunctionArn\n                },\n                'Terraform': {\n                    'name': jsonResponseBody.FunctionName,\n                    'arn': jsonResponseBody.arn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Lambda::Version\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.functionArn,\n                'GetAtt': {\n                    'Version': jsonResponseBody.version\n                },\n                'Terraform': {\n                    'arn': jsonResponseBody.functionArn,\n                    'version': jsonResponseBody.version\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Logs::LogGroup\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::Logs::LogStream\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::Logs::MetricFilter\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::Logs::SubscriptionFilter\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::App\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.AppId,\n                'Terraform': {\n                    'id': jsonResponseBody.AppId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::ElasticLoadBalancerAttachment\") {\n            tracked_resources[index].returnValues = null\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::Instance\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.InstanceId,\n                'Terraform': {\n                    'id': jsonResponseBody.InstanceId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::Layer\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.LayerId,\n                'Terraform': {\n                    'id': jsonResponseBody.LayerId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::Stack\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.StackId,\n                'Terraform': {\n                    'id': jsonResponseBody.StackId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::UserProfile\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.IamUserArn,\n                'GetAtt': {\n                    //'SshUsername': jsonResponseBody.\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.IamUserArn\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::OpsWorks::Volume\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.VolumeId,\n                'Terraform': {\n                    'id': jsonResponseBody.VolumeId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::DBClusterParameterGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.DBClusterParameterGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.DBClusterParameterGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::DBInstance\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.actionResponses[0].data.DBInstanceIdentifier,\n                'GetAtt': {\n                    //'Endpoint.Address': jsonResponseBody.,\n                    //'Endpoint.Port': jsonResponseBody.\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.actionResponses[0].data.DBInstanceIdentifier\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::DBParameterGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.DBParameterGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.DBParameterGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::DBSubnetGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.DBSubnetGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.DBSubnetGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::EventSubscription\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.SubscriptionName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.SubscriptionName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::RDS::OptionGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.actionResponses[0].data.optionGroupName,\n                'Terraform': {\n                    'name': jsonResponseBody.actionResponses[0].data.optionGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Redshift::Cluster\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.ClusterIdentifier,\n                'GetAtt': {\n                    //'Endpoint.Address': jsonResponseBody.\n                    //'Endpoint.Port': jsonResponseBody.\n                },\n                'Terraform': {\n                    'id': tracked_resources[index].options.cfn.ClusterIdentifier\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Redshift::ClusterParameterGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.ParameterGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.ParameterGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Redshift::ClusterSubnetGroup\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.boto3.ClusterSubnetGroupName,\n                'Terraform': {\n                    'name': tracked_resources[index].options.boto3.ClusterSubnetGroupName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::Route53::HostedZone\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::S3::Bucket\") {\n            tracked_resources[index].returnValues = {\n                'Ref': tracked_resources[index].options.cfn.BucketName,\n                'GetAtt': {\n                    'Arn': \"arn:aws:s3:::\" + tracked_resources[index].options.cfn.BucketName\n                    //'DomainName': jsonResponseBody.,\n                    //'DualStackDomainName': jsonResponseBody.,\n                    //'WebsiteURL': jsonResponseBody.\n                },\n                'Terraform': {\n                    'id': tracked_resources[index].options.cfn.BucketName,\n                    'arn': \"arn:aws:s3:::\" + tracked_resources[index].options.cfn.BucketName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::SNS::Subscription\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::SNS::Topic\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.CreateTopicResponse.topicArn,\n                'GetAtt': {\n                    'TopicName': tracked_resources[index].options.cfn.TopicName\n                },\n                'Terraform': {\n                    'name': tracked_resources[index].options.cfn.TopicName\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::SNS::TopicPolicy\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::SQS::Queue\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SQS::QueuePolicy\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::Association\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::Document\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::MaintenanceWindow\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::MaintenanceWindowTarget\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::MaintenanceWindowTask\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::Parameter\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::PatchBaseline\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::SSM::ResourceDataSync\") {\n            ; // TODO\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::CloudFormationProduct\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.provisioningArtifactDetail.id,\n                'GetAtt': {\n                    'ProductName': jsonResponseBody.provisioningArtifactDetail.name,\n                    'ProvisioningArtifactIds': [jsonResponseBody.provisioningArtifactDetail.id],\n                    'ProvisioningArtifactNames': [jsonResponseBody.provisioningArtifactDetail.name]\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::Portfolio\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.portfolioDetail.id,\n                'GetAtt': {\n                    'PortfolioName': jsonResponseBody.portfolioDetail.displayName\n                },\n                'Terraform': {\n                    'id': jsonResponseBody.portfolioDetail.id\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::PortfolioPrincipalAssociation\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::PortfolioProductAssociation\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::PortfolioShare\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::TagOption\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.tagOptionDetail.id,\n                'Terraform': {\n                    'id': jsonResponseBody.tagOptionDetail.id,\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::ServiceCatalog::TagOptionAssociation\") {\n            tracked_resources[index].returnValues = null;\n        } else if (tracked_resources[index].type == \"AWS::WAF::ByteMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.ByteMatchSet.ByteMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.ByteMatchSet.ByteMatchSetId,\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::IPSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.IPSet.IPSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.IPSet.IPSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::Rule\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.Rule.RuleId,\n                'Terraform': {\n                    'id': jsonResponseBody.Rule.RuleId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::SizeConstraintSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.SizeConstraintSet.SizeConstraintSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.SizeConstraintSet.SizeConstraintSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::SqlInjectionMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.SqlInjectionMatchSet.SqlInjectionMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.SqlInjectionMatchSet.SqlInjectionMatchSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::WebACL\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.WebACL.WebACLId,\n                'Terraform': {\n                    'id': jsonResponseBody.WebACL.WebACLId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAF::XssMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.XssMatchSet.XssMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.XssMatchSet.XssMatchSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::ByteMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.ByteMatchSet.ByteMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.ByteMatchSet.ByteMatchSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::IPSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.IPSet.IPSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.IPSet.IPSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::Rule\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.Rule.RuleId,\n                'Terraform': {\n                    'id': jsonResponseBody.Rule.RuleId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::SizeConstraintSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.SizeConstraintSet.SizeConstraintSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.SizeConstraintSet.SizeConstraintSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::SqlInjectionMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.SqlInjectionMatchSet.SqlInjectionMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.SqlInjectionMatchSet.SqlInjectionMatchSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::WebACL\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.WebACL.WebACLId,\n                'Terraform': {\n                    'id': jsonResponseBody.WebACL.WebACLId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WAFRegional::XssMatchSet\") {\n            tracked_resources[index].returnValues = {\n                'Ref': jsonResponseBody.XssMatchSet.XssMatchSetId,\n                'Terraform': {\n                    'id': jsonResponseBody.XssMatchSet.XssMatchSetId\n                }\n            };\n        } else if (tracked_resources[index].type == \"AWS::WorkSpaces::Workspace\") {\n            ; // TODO\n        }\n    } catch(err) {;}\n}\n\n/******/\n\nvar outputs = [];\nvar tracked_resources = [];\nvar blocking = false;\n\nfunction analyseRequest(details) {\n    var reqParams = {\n        'boto3': {},\n        'go': {},\n        'cfn': {},\n        'cli': {},\n        'tf': {},\n        'iam': {}\n    };\n    var requestBody = \"\";\n    var jsonRequestBody = {};\n    var region = 'us-east-1';\n    var gwtRequest = {};\n\n    // Firefox\n    if (intercept && navigator.userAgent.search(\"Firefox\") > -1) {\n        let filter = browser.webRequest.filterResponseData(details.requestId);\n        let decoder = new TextDecoder(\"utf-8\");\n        let encoder = new TextEncoder();\n        var responseBody = \"\";\n\n        filter.ondata = event => {\n            filter.write(event.data);\n           \n            responseBody += decoder.decode(event.data, {stream: true});\n        }\n\n        filter.onstop = event => {\n            filter.disconnect();\n\n            console.log(responseBody);\n\n            for (var i=tracked_resources.length-1; i>=0; i--) {\n                if (details.requestId == tracked_resources[i].requestDetails.requestId) {\n                    tracked_resources[i][\"response\"] = {\n                        'timestamp': null,\n                        'properties': null,\n                        'body': responseBody\n                    };\n                    setOutputsForTrackedResource(i);\n                }\n            }\n\n            for (var i=0; i<outputs.length; i++) { // TODO\n                ;\n            }\n        }\n    }\n\n    if (details.url.indexOf(\"amazonaws-us-gov.com\") !== -1) {\n        region = \"us-gov-west-1\";\n    }\n    var region_check = /.+\\/\\/([a-zA-Z-]+\\-[0-9]+)\\.(?:console|lightsail)\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com/g.exec(details.url);\n    if (region_check && region_check[1]) {\n        region = region_check[1];\n    } else {\n        region_check = /.+\\/\\/[a-z0-9-]+.([a-zA-Z-]+\\-[0-9]+)\\.amazonaws\\.com/g.exec(details.url);\n        if (region_check && region_check[1]) {\n            region = region_check[1];\n        }\n    }\n\n    try {\n        try {\n            requestBody = decodeURIComponent(String.fromCharCode.apply(null, new Uint8Array(details.requestBody.raw[0].bytes)).replace(/\\%/g,\"%25\"));\n            requestBody = requestBody.replace(/\\\"X-CSRF-TOKEN\\\"\\:\\\"\\[\\{[a-zA-Z0-9-_\",=+:/]+\\}\\]\\\"\\,/g,\"\"); // double-quote bug, remove CSRF token\n        } catch(e) {\n            try {\n                requestBody = JSON.stringify(details.requestBody.formData);\n            } catch(e) {;}\n        }\n    \n        try {\n            jsonRequestBody = JSON.parse(requestBody);\n        } catch(e) {\n            gwtRequest = interpretGwtWireRequest(requestBody);\n        }\n\n        // check for string objects\n        for (var prop in jsonRequestBody) {\n            if (typeof jsonRequestBody[prop] == \"string\") {\n                try {\n                    var parsed = JSON.parse(jsonRequestBody[prop]);\n                    jsonRequestBody[prop] = parsed;\n                } catch(e) {;}\n            }\n        }\n    } catch(e) {;}\n    \n    \n    // manual:ec2:ec2.DescribeInstances\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getMergedInstanceList\\?/g)) {\n        if ('filters' in jsonRequestBody) {\n            reqParams.cli['--filters'] = jsonRequestBody.filters;\n            reqParams.boto3['Filter'] = [];\n            jsonRequestBody['filters'].forEach(filter => {\n                reqParams.boto3['Filter'].push({\n                    'Name': filter['name'],\n                    'Values': filter['values']\n                });\n            });\n        }\n        reqParams.boto3['MaxResults'] = jsonRequestBody.count;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeInstances',\n                'boto3': 'describe_instances',\n                'cli': 'describe-instances'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeImages\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getPrivateImageList\\?/g)) {\n        if (jsonRequestBody['publicAndPrivate'] != true) {\n            reqParams.boto3['Owner'] = ['self'];\n            reqParams.cli['--owners'] = \"self\";\n        }\n\n        if ('imageType' in jsonRequestBody) {\n            if (jsonRequestBody['filters'] === undefined)\n                jsonRequestBody['filters'] = [];\n            jsonRequestBody.filters['imageType'] = jsonRequestBody.imageType;\n        }\n        \n        if ('filters' in jsonRequestBody) {\n            reqParams.cli['--filters'] = jsonRequestBody.filters;\n            reqParams.boto3['Filter'] = [];\n            jsonRequestBody['filters'].forEach(filter => {\n                reqParams.boto3['Filter'].push({\n                    'Name': filter['name'],\n                    'Values': filter['values']\n                });\n            });\n        }\n        reqParams.boto3['MaxResults'] = jsonRequestBody.count;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeImages',\n                'boto3': 'describe_images',\n                'cli': 'describe-images'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeImages\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=searchAmis\\?/g)) {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.count;\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeImages',\n                'boto3': 'describe_images',\n                'cli': 'describe-images'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeVpcs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getVpcs\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcs',\n                'boto3': 'describe_vpcs',\n                'cli': 'describe-vpcs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeSubnets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getSubnets\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSubnets',\n                'boto3': 'describe_subnets',\n                'cli': 'describe-subnets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeHosts\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getSdkResources_Hosts\\?/g)) {\n        if ('filters' in jsonRequestBody) {\n            reqParams.cli['--filters'] = jsonRequestBody.filters;\n            reqParams.boto3['Filter'] = [];\n            jsonRequestBody['filters'].forEach(filter => {\n                reqParams.boto3['Filter'].push({\n                    'Name': filter['name'],\n                    'Values': filter['values']\n                });\n            });\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeHosts',\n                'boto3': 'describe_hosts',\n                'cli': 'describe-hosts'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:iam.ListInstanceProfiles\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getInstanceProfileList\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListInstanceProfiles',\n                'boto3': 'list_instance_profiles',\n                'cli': 'list-instance-profiles'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeNetworkInterfaces\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getNetworkInterfaces\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeNetworkInterfaces',\n                'boto3': 'describe_network_interfaces',\n                'cli': 'describe-network-interfaces'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeAvailabilityZones\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getAvailabilityZones\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAvailabilityZones',\n                'boto3': 'describe_availability_zones',\n                'cli': 'describe-availability-zones'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getSecurityGroups\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSecurityGroups',\n                'boto3': 'describe_security_groups',\n                'cli': 'describe-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeKeyPairs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getKeyPairList\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeKeyPairs',\n                'boto3': 'describe_key_pairs',\n                'cli': 'describe-key-pairs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.CreateSecurityGroup\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=createSecurityGroup\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['GroupDescription'] = jsonRequestBody.groupDescription;\n        reqParams.boto3['GroupName'] = jsonRequestBody.groupName;\n        reqParams.cli['--description'] = jsonRequestBody.groupDescription;\n        reqParams.cli['--group-name'] = jsonRequestBody.groupName;\n        if (jsonRequestBody.vpcId && jsonRequestBody.vpcId.length) {\n            reqParams.boto3['VpcId'] = jsonRequestBody.vpcId;\n            reqParams.cli['--vpc-id'] = jsonRequestBody.vpcId;\n        }\n\n        reqParams.cfn['GroupDescription'] = jsonRequestBody.groupDescription;\n        reqParams.cfn['GroupName'] = jsonRequestBody.groupName;\n        reqParams.cfn['VpcId'] = jsonRequestBody.vpcId;\n\n        reqParams.tf['description'] = jsonRequestBody.groupDescription;\n        reqParams.tf['name'] = jsonRequestBody.groupName;\n        if (jsonRequestBody.vpcId && jsonRequestBody.vpcId.length) {\n            reqParams.tf['vpc_id'] = jsonRequestBody.vpcId;\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateSecurityGroup',\n                'boto3': 'create_security_group',\n                'cli': 'create-security-group'\n            },\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::SecurityGroup',\n            'terraformType': 'aws_security_group',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n\n    // manual:ec2:ec2.AuthorizeSecurityGroupIngress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=authorizeIngress\\?/g)) {\n        if ('groupId' in jsonRequestBody) {\n            reqParams.boto3['GroupId'] = jsonRequestBody.groupId;\n            reqParams.cli['--group-id'] = jsonRequestBody.groupId;\n            reqParams.iam['Resource'] = [\n                \"arn:aws:ec2:*:*:security-group/\" + jsonRequestBody.groupId\n            ];\n        }\n        reqParams.boto3['IpPermissions'] = [];\n        reqParams.cli['--ip-permissions'] = [];\n        if (jsonRequestBody['ipPermissions']) {\n            jsonRequestBody['ipPermissions'].forEach(ipPermission => {\n                var ipRangeObjects = [];\n                if (ipPermission['ipRangeObjects']) {\n                    ipPermission['ipRangeObjects'].forEach(ipRangeObject => {\n                        ipRangeObjects.push({\n                            'Description': ipRangeObject['description'],\n                            'CidrIp': ipRangeObject['cidrIp']\n                        });\n                    });\n                }\n                var ipv6RangeObjects = [];\n                if (ipPermission['ipv6RangeObjects']) {\n                    ipPermission['ipv6RangeObjects'].forEach(ipv6RangeObject => {\n                        ipv6RangeObjects.push({\n                            'Description': ipv6RangeObject['description'],\n                            'CidrIpv6': ipv6RangeObject['CidrIpv6']\n                        });\n                    });\n                }\n                reqParams.boto3['IpPermissions'].push({\n                    'IpProtocol': ipPermission['ipProtocol'],\n                    'FromPort': ipPermission['fromPort'],\n                    'ToPort': ipPermission['toPort'],\n                    'IpRanges': ipRangeObjects,\n                    'Ipv6Ranges': ipv6RangeObjects\n                });\n                reqParams.cli['--ip-permissions'].push({\n                    'IpProtocol': ipPermission['ipProtocol'],\n                    'FromPort': ipPermission['fromPort'],\n                    'ToPort': ipPermission['toPort'],\n                    'IpRanges': ipRangeObjects,\n                    'Ipv6Ranges': ipv6RangeObjects\n                });\n            });\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'AuthorizeSecurityGroupIngress',\n                'boto3': 'authorize_security_group_ingress',\n                'cli': 'authorize-security-group-ingress'\n            },\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n\n    // manual:ec2:ec2.RunInstances\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call\\=com.amazonaws.ec2.AmazonEC2.RunInstances\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:instance/*\",\n            \"arn:aws:ec2:*:*:volume/*\",\n            \"arn:aws:ec2:*::image/\" + jsonRequestBody.ImageId,\n            \"arn:aws:ec2:*:*:key-pair/\" + jsonRequestBody.KeyName\n        ];\n\n        reqParams.boto3['ImageId'] = jsonRequestBody.ImageId;\n        reqParams.boto3['MaxCount'] = jsonRequestBody.MaxCount;\n        reqParams.boto3['MinCount'] = jsonRequestBody.MinCount;\n        reqParams.boto3['KeyName'] = jsonRequestBody.KeyName;\n        if (jsonRequestBody.SecurityGroupIds) {\n            reqParams.boto3['SecurityGroupIds'] = jsonRequestBody.SecurityGroupIds;\n            for (var i=0; i<jsonRequestBody.SecurityGroupIds.length; i++) {\n                reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:security-group/\" + jsonRequestBody.SecurityGroupIds[i]);\n            }\n        }\n        reqParams.boto3['InstanceType'] = jsonRequestBody.InstanceType;\n        reqParams.boto3['Placement'] = jsonRequestBody.Placement;\n        reqParams.boto3['Monitoring'] = jsonRequestBody.Monitoring;\n        reqParams.boto3['DisableApiTermination'] = jsonRequestBody.DisableApiTermination;\n        reqParams.boto3['InstanceInitiatedShutdownBehavior'] = jsonRequestBody.InstanceInitiatedShutdownBehavior;\n        reqParams.boto3['CreditSpecification'] = jsonRequestBody.CreditSpecification;\n        reqParams.boto3['TagSpecification'] = jsonRequestBody.TagSpecifications;\n        reqParams.boto3['EbsOptimized'] = jsonRequestBody.EbsOptimized;\n        reqParams.boto3['CapacityReservationSpecification'] = jsonRequestBody.CapacityReservationSpecification;\n        reqParams.boto3['ElasticInferenceAccelerators'] = jsonRequestBody.ElasticInferenceAccelerator;\n        if (jsonRequestBody.UserData) {\n            reqParams.boto3['UserData'] = atob(jsonRequestBody.UserData);\n        }\n        reqParams.boto3['NetworkInterfaces'] = jsonRequestBody.NetworkInterface;\n        if (jsonRequestBody.IamInstanceProfile) {\n            reqParams.boto3['IamInstanceProfile'] = {\n                'Arn': jsonRequestBody.IamInstanceProfile.Arn\n            };\n        }\n        reqParams.cfn['ImageId'] = jsonRequestBody.ImageId;\n        reqParams.cfn['KeyName'] = jsonRequestBody.KeyName;\n        reqParams.cfn['SecurityGroupIds'] = jsonRequestBody.SecurityGroupIds;\n        reqParams.cfn['InstanceType'] = jsonRequestBody.InstanceType;\n        if (jsonRequestBody.Placement && jsonRequestBody.Placement.Tenancy) {\n            reqParams.cfn['Tenancy'] = jsonRequestBody.Placement.Tenancy;\n        }\n        reqParams.cfn['Monitoring'] = jsonRequestBody.Monitoring.Enabled;\n        reqParams.cfn['DisableApiTermination'] = jsonRequestBody.DisableApiTermination;\n        reqParams.cfn['InstanceInitiatedShutdownBehavior'] = jsonRequestBody.InstanceInitiatedShutdownBehavior;\n        if (jsonRequestBody.CreditSpecification) {\n            reqParams.cfn['CreditSpecification'] = {\n                'CPUCredits': jsonRequestBody.CreditSpecification.CpuCredits\n            }\n        }\n        reqParams.cfn['EbsOptimized'] = jsonRequestBody.EbsOptimized;\n        reqParams.cfn['ElasticInferenceAccelerators'] = jsonRequestBody.ElasticInferenceAccelerator;\n        reqParams.cfn['UserData'] = jsonRequestBody.UserData;\n        if (jsonRequestBody.IamInstanceProfile) {\n            reqParams.cfn['IamInstanceProfile'] = jsonRequestBody.IamInstanceProfile.Arn;\n        }\n        if (jsonRequestBody.Placement) {\n            if (jsonRequestBody.Placement.GroupName) {\n                reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:placement-group/\" + jsonRequestBody.Placement.GroupName);\n\n                reqParams.cfn['PlacementGroupName'] = jsonRequestBody.Placement.GroupName;\n            }\n            reqParams.cfn['Tenancy'] = jsonRequestBody.Placement.Tenancy;\n        }\n\n        reqParams.cli['--image-id'] = jsonRequestBody.ImageId;\n        if (jsonRequestBody.MaxCount == jsonRequestBody.MinCount) {\n            reqParams.cli['--count'] = jsonRequestBody.MinCount;\n        } else {\n            reqParams.cli['--count'] = jsonRequestBody.MinCount + \":\" + jsonRequestBody.MaxCount;\n        }\n        reqParams.cli['--key-name'] = jsonRequestBody.KeyName;\n        reqParams.cli['--security-group-ids'] = jsonRequestBody.SecurityGroupIds;\n        reqParams.cli['--instance-type'] = jsonRequestBody.InstanceType;\n        reqParams.cli['--placement'] = jsonRequestBody.Placement;\n        reqParams.cli['--monitoring'] = jsonRequestBody.Monitoring;\n        if (jsonRequestBody.DisableApiTermination === true)\n            reqParams.cli['--disable-api-termination'] = null;\n        else if (jsonRequestBody.DisableApiTermination === false)\n            reqParams.cli['--enable-api-termination'] = null;\n        reqParams.cli['--instance-initiated-shutdown-behavior'] = jsonRequestBody.InstanceInitiatedShutdownBehavior;\n        reqParams.cli['--credit-specification'] = jsonRequestBody.CreditSpecification;\n        reqParams.cli['--tag-specifications'] = jsonRequestBody.TagSpecifications;\n        reqParams.cli['--ebs-optimized'] = jsonRequestBody.EbsOptimized;\n        reqParams.cli['--elastic-inference-accelerators'] = jsonRequestBody.ElasticInferenceAccelerator;\n        if (jsonRequestBody.UserData) {\n            reqParams.cli['--user-data'] = atob(jsonRequestBody.UserData);\n        }\n        reqParams.cli['--network-interfaces'] = jsonRequestBody.NetworkInterface;\n        if (jsonRequestBody.IamInstanceProfile) {\n            reqParams.cli['--iam-instance-profile'] = {\n                'Arn': jsonRequestBody.IamInstanceProfile.Arn\n            };\n        }\n\n        reqParams.tf['ami'] = jsonRequestBody.ImageId;\n        reqParams.tf['key_name'] = jsonRequestBody.KeyName;\n        reqParams.tf['vpc_security_group_ids'] = jsonRequestBody.SecurityGroupIds;\n        reqParams.tf['instance_type'] = jsonRequestBody.InstanceType;\n        if (jsonRequestBody.Placement && jsonRequestBody.Placement.Tenancy) {\n            reqParams.tf['tenancy'] = jsonRequestBody.Placement.Tenancy;\n        }\n        if (jsonRequestBody.Monitoring) {\n            reqParams.tf['monitoring'] = jsonRequestBody.Monitoring.Enabled;\n        }\n        reqParams.tf['disable_api_termination'] = jsonRequestBody.DisableApiTermination;\n        reqParams.tf['instance_initiated_shutdown_behavior'] = jsonRequestBody.InstanceInitiatedShutdownBehavior;\n        if (jsonRequestBody.CreditSpecification) {\n            reqParams.tf['credit_specification'] = {\n                'cpu_credits': jsonRequestBody.CreditSpecification.CpuCredits\n            }\n        }\n\n        if (jsonRequestBody.TagSpecifications) {\n            reqParams.tf['tags'] = {};\n            for (var i=0; i<jsonRequestBody.TagSpecifications.length; i++) {\n                if (jsonRequestBody.TagSpecifications[i].ResourceType == \"instance\") {\n                    reqParams.cfn['Tags'] = [];\n                    for (var j=0; j<jsonRequestBody.TagSpecifications[i].Tag.length; j++) {\n                        reqParams.tf['tags'][jsonRequestBody.TagSpecifications[i].Tag[j].Key] = jsonRequestBody.TagSpecifications[i].Tag[j].Value;\n                        reqParams.cfn['Tags'].push({\n                            'Key': jsonRequestBody.TagSpecifications[i].Tag[j].Key,\n                            'Value': jsonRequestBody.TagSpecifications[i].Tag[j].Value\n                        });\n                    }\n                }\n            }\n        }\n        reqParams.tf['ebs_optimized'] = jsonRequestBody.EbsOptimized;\n        if (jsonRequestBody.IamInstanceProfile) {\n            reqParams.tf['iam_instance_profile'] = jsonRequestBody.IamInstanceProfile.Arn;\n        }\n\n        reqParams.boto3['BlockDeviceMappings'] = [];\n        reqParams.cli['--block-device-mappings'] = [];\n        reqParams.cfn['BlockDeviceMappings'] = [];\n\n        var used_device_names = [];\n        var instance_type_instance_store_count = { // i cried a little\n            'm5d.large': 1,\n            'm5d.xlarge': 1,\n            'm5d.2xlarge': 1,\n            'm5d.4xlarge': 2,\n            'm5d.12xlarge': 2,\n            'm5d.24xlarge': 4,\n            'c5d.large': 1,\n            'c5d.xlarge': 1,\n            'c5d.2xlarge': 1,\n            'c5d.4xlarge': 1,\n            'c5d.9xlarge': 1,\n            'c5d.18xlarge': 2,\n            'p3dn.24xlarge': 2,\n            'x1.16xlarge': 1,\n            'x1.32xlarge': 2,\n            'x1e.xlarge': 1,\n            'x1e.2xlarge': 1,\n            'x1e.4xlarge': 1,\n            'x1e.8xlarge': 1,\n            'x1e.16xlarge': 1,\n            'x1e.32xlarge': 2,\n            'r5d.large': 1,\n            'r5d.xlarge': 1,\n            'r5d.2xlarge': 1,\n            'r5d.4xlarge': 2,\n            'r5d.12xlarge': 2,\n            'r5d.24xlarge': 4,\n            'z1d.large': 1,\n            'z1d.xlarge': 1,\n            'z1d.2xlarge': 1,\n            'z1d.3xlarge': 1,\n            'z1d.6xlarge': 1,\n            'z1d.12xlarge': 2,\n            'i3.large': 1,\n            'i3.xlarge': 1,\n            'i3.2xlarge': 1,\n            'i3.4xlarge': 2,\n            'i3.8xlarge': 4,\n            'i3.16xlarge': 8,\n            'i3.metal': 8,\n            'h1.2xlarge': 1,\n            'h1.4xlarge': 2,\n            'h1.8xlarge': 4,\n            'h1.16xlarge': 8,\n            'd2.xlarge': 3,\n            'd2.2xlarge': 6,\n            'd2.4xlarge': 12,\n            'd2.8xlarge': 24,\n            'f1.4xlarge': 1\n        };\n\n        for (var i=0; i<jsonRequestBody.BlockDeviceMappings.length; i++) {\n            if (\n                !jsonRequestBody.BlockDeviceMappings[i].DeviceName.startsWith(\"xvdc\") ||\n                jsonRequestBody.BlockDeviceMappings[i].DeviceName.length != 5 ||\n                jsonRequestBody.BlockDeviceMappings[i].VirtualName ||\n                jsonRequestBody.BlockDeviceMappings[i].Ebs\n            ) {\n                reqParams.boto3['BlockDeviceMappings'].push({\n                    'DeviceName': jsonRequestBody.BlockDeviceMappings[i].DeviceName,\n                    'Ebs': jsonRequestBody.BlockDeviceMappings[i].Ebs,\n                    'VirtualName': jsonRequestBody.BlockDeviceMappings[i].VirtualName\n                });\n                reqParams.cli['--block-device-mappings'].push({\n                    'DeviceName': jsonRequestBody.BlockDeviceMappings[i].DeviceName,\n                    'Ebs': jsonRequestBody.BlockDeviceMappings[i].Ebs,\n                    'VirtualName': jsonRequestBody.BlockDeviceMappings[i].VirtualName\n                });\n                reqParams.cfn['BlockDeviceMappings'].push({\n                    'DeviceName': jsonRequestBody.BlockDeviceMappings[i].DeviceName,\n                    'Ebs': jsonRequestBody.BlockDeviceMappings[i].Ebs,\n                    'VirtualName': jsonRequestBody.BlockDeviceMappings[i].VirtualName\n                });\n                used_device_names.push(jsonRequestBody.BlockDeviceMappings[i].DeviceName);\n            }\n\n            if (jsonRequestBody.BlockDeviceMappings[i].DeviceName == \"/dev/sda1\" || jsonRequestBody.BlockDeviceMappings[i].DeviceName == \"/dev/xvda\") {\n                if (jsonRequestBody.BlockDeviceMappings[i].Ebs) {\n                    reqParams.tf['root_block_device'] = {\n                        'volume_type': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeType,\n                        'volume_size': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeSize\n                    };\n                }\n            } else if (jsonRequestBody.BlockDeviceMappings[i].Ebs) {\n                if (!reqParams.tf['ebs_block_device']) {\n                    reqParams.tf['ebs_block_device'] = [];\n                }\n                reqParams.tf['ebs_block_device'].push({\n                    'device_name': jsonRequestBody.BlockDeviceMappings[i].DeviceName,\n                    'volume_type': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeType,\n                    'volume_size': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeSize,\n                    'delete_on_termination': jsonRequestBody.BlockDeviceMappings[i].Ebs.DeleteOnTermination,\n                    'iops': jsonRequestBody.BlockDeviceMappings[i].Ebs.Iops,\n                    'snapshot_id': jsonRequestBody.BlockDeviceMappings[i].Ebs.SnapshotId\n                });\n\n                if (jsonRequestBody.BlockDeviceMappings[i].Ebs.SnapshotId) {\n                    reqParams.iam['Resource'].push(\"arn:aws:ec2:*::snapshot/\" + jsonRequestBody.BlockDeviceMappings[i].Ebs.SnapshotId);\n                }\n            }\n        }\n        instance_store_count = 0;\n        if (instance_type_instance_store_count[jsonRequestBody.InstanceType]) {\n            instance_store_count = instance_type_instance_store_count[jsonRequestBody.InstanceType];\n        }\n        for (var i=0; i<instance_store_count; i++) { // unused instance store volumes\n            var device_name = \"xvdc\" + String.fromCharCode(97 + i);\n            if (!used_device_names.includes(device_name)) {\n                reqParams.boto3['BlockDeviceMappings'].push({\n                    'DeviceName': device_name,\n                    'NoDevice': ''\n                });\n                reqParams.cli['--block-device-mappings'].push({\n                    'DeviceName': device_name,\n                    'NoDevice': ''\n                });\n                reqParams.cfn['BlockDeviceMappings'].push({\n                    'DeviceName': device_name,\n                    'NoDevice': ''\n                });\n            }\n        }\n\n        if (jsonRequestBody.UserData) {\n            reqParams.tf['user_data'] = atob(jsonRequestBody.UserData);\n        }\n\n        if (jsonRequestBody.NetworkInterface) {\n            reqParams.tf['network_interface'] = [];\n            reqParams.cfn['NetworkInterfaces'] = [];\n            for (var i=0; i<jsonRequestBody.NetworkInterface.length; i++) {\n                if (jsonRequestBody.NetworkInterface[i].NetworkInterfaceId) {\n                    reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:network-interface/\" + jsonRequestBody.NetworkInterface[i].NetworkInterfaceId);\n                } else {\n                    reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:network-interface/*\");\n                }\n\n                if (!jsonRequestBody.NetworkInterface[i].NetworkInterfaceId && jsonRequestBody.NetworkInterface[i].SubnetId) {\n                    reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:subnet/\" + jsonRequestBody.NetworkInterface[i].SubnetId);\n\n                    tracked_resources.push({\n                        'logicalId': getResourceName('ec2', details.requestId + \"_NetworkInterface\" + i),\n                        'region': region,\n                        'service': 'ec2',\n                        'terraformType': 'aws_network_interface',\n                        'options': {\n                            'tf': {\n                                'subnet_id': jsonRequestBody.NetworkInterface[i].SubnetId,\n                                'description': jsonRequestBody.NetworkInterface[i].Description,\n                                'security_groups': jsonRequestBody.NetworkInterface[i].Groups,\n                                'private_ips': jsonRequestBody.NetworkInterface[i].PrivateIpAddresses\n                            }\n                        },\n                        'requestDetails': details,\n                        'was_blocked': blocking\n                    });\n\n                    for (var j=0; j<jsonRequestBody.NetworkInterface[i].Groups.length; j++) {\n                        reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:security-group/\" + jsonRequestBody.NetworkInterface[i].Groups[j]);\n                    }\n\n                    reqParams.tf['network_interface'].push({\n                        'device_index': jsonRequestBody.NetworkInterface[i].DeviceIndex,\n                        'network_interface_id': \"${aws_network_interface.\" + getResourceName('ec2', details.requestId + \"_NetworkInterface\" + i) + \".id}\",\n                        'delete_on_termination': jsonRequestBody.NetworkInterface[i].DeleteOnTermination\n                    });\n                } else {\n                    reqParams.tf['network_interface'].push({\n                        'device_index': jsonRequestBody.NetworkInterface[i].DeviceIndex,\n                        'network_interface_id': jsonRequestBody.NetworkInterface[i].NetworkInterfaceId,\n                        'delete_on_termination': jsonRequestBody.NetworkInterface[i].DeleteOnTermination\n                    });\n                }\n            \n                cfn_network_interface = jsonRequestBody.NetworkInterface[i];\n                cfn_network_interface['GroupSet'] = cfn_network_interface['Groups'];\n                delete cfn_network_interface['Groups'];\n                reqParams.cfn['NetworkInterfaces'].push(cfn_network_interface);\n            }\n        } else {\n            reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:network-interface/*\");\n            reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:subnet/*\");\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'RunInstances',\n                'boto3': 'run_instances',\n                'cli': 'run-instances'\n            },\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::Instance',\n            'terraformType': 'aws_instance',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n\n    // manual:ec2:ec2.TerminateInstances\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=terminateInstances\\?/g)) {\n        reqParams.iam['Resource'] = [];\n        \n        reqParams.boto3['InstanceIds'] = jsonRequestBody.instanceIds;\n        reqParams.cli['--instance-ids'] = jsonRequestBody.instanceIds;\n\n        for (var i=0; i<jsonRequestBody.instanceIds.length; i++) {\n            reqParams.iam['Resource'].push(\"arn:aws:ec2:*:*:instance/\" + jsonRequestBody.instanceIds[i]);\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'TerminateInstances',\n                'boto3': 'terminate_instances',\n                'cli': 'terminate-instances'\n            },\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeLaunchTemplates\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call\\=com.amazonaws.ec2.AmazonEC2.DescribeLaunchTemplates\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeLaunchTemplates',\n                'boto3': 'describe_launch_templates',\n                'cli': 'describe-launch-templates'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ds.DescribeDirectories\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call\\=com.amazonaws.directoryservice.+.DescribeDirectories\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ds',\n            'method': {\n                'api': 'DescribeDirectories',\n                'boto3': 'describe_directories',\n                'cli': 'describe-directories'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribePlacementGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call\\=com.amazonaws.ec2.AmazonEC2.DescribePlacementGroups\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribePlacementGroups',\n                'boto3': 'describe_placement_groups',\n                'cli': 'describe-placement-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeSpotPriceHistory\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getCurrentSpotPrice\\?/g)) {\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSpotPriceHistory',\n                'boto3': 'describe_spot_price_history',\n                'cli': 'describe-spot-price-history'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getTags\\?/g)) {\n        reqParams.boto3['Filter'] = [];\n        reqParams.cli['--filter'] = [];\n\n        if (jsonRequestBody['key']) {\n            if (jsonRequestBody['key'].length > 0) {\n                reqParams.boto3['Filter'].push({\n                    'Name': 'key',\n                    'Values': [jsonRequestBody['key']]\n                });\n                reqParams.cli['--filter'].push({\n                    'Name': 'key',\n                    'Values': [jsonRequestBody['key']]\n                });\n            }\n        }\n        if (jsonRequestBody['value']) {\n            if (jsonRequestBody['value'].length > 0) {\n                reqParams.boto3['Filter'].push({\n                    'Name': 'value',\n                    'Values': [jsonRequestBody['value']]\n                });\n                reqParams.cli['--filter'].push({\n                    'Name': 'value',\n                    'Values': [jsonRequestBody['value']]\n                });\n            }\n        }\n        if (reqParams.boto3['Filter'].length == 0) {\n            delete reqParams.boto3['Filter'];\n            delete reqParams.cli['--filter'];\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeTags',\n                'boto3': 'describe_tags',\n                'cli': 'describe-tags'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:ec2:ec2.DescribeInstanceAttribute\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call\\=getTerminationProtection\\?/g)) {\n        reqParams.boto3['InstanceId'] = jsonRequestBody.instanceId;\n        reqParams.boto3['Attribute'] = \"disableApiTermination\";\n        reqParams.cli['--instance-id'] = jsonRequestBody.instanceId;\n        reqParams.cli['--attribute'] = \"disableApiTermination\";\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeInstanceAttribute',\n                'boto3': 'describe_instance_attribute',\n                'cli': 'describe-instance-attribute'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:s3:s3.CreateBucket\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"CreateBucket\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        reqParams.cfn['BucketName'] = jsonRequestBody.path;\n\n        reqParams.tf['bucket'] = jsonRequestBody.path;\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'CreateBucket',\n                'boto3': 'create_bucket',\n                'cli': 'create-bucket'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('s3', details.requestId),\n            'region': region,\n            'service': 's3',\n            'type': 'AWS::S3::Bucket',\n            'terraformType': 'aws_s3_bucket',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.PutBucketVersioning\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"PutBucketVersioning\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n        reqParams = addToParamsFromXml(reqParams, jsonRequestBody.contentString);\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'PutBucketVersioning',\n                'boto3': 'put_bucket_versioning',\n                'cli': 'put-bucket-versioning'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.PutBucketMetricsConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"PutBucketMetrics\") {\n        reqParams.iam['Action'] = [\n            's3:PutMetricsConfiguration'\n        ];\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n        reqParams = addToParamsFromXml(reqParams, jsonRequestBody.contentString);\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'PutBucketMetricsConfiguration',\n                'boto3': 'put_bucket_metrics_configuration',\n                'cli': 'put-bucket-metrics-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.PutBucketTagging\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"PutBucketTagging\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n        reqParams = addToParamsFromXml(reqParams, jsonRequestBody.contentString);\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'PutBucketTagging',\n                'boto3': 'put_bucket_tagging',\n                'cli': 'put-bucket-tagging'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.PutBucketAcl\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"PutBucketAcl\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n        reqParams = addToParamsFromXml(reqParams, jsonRequestBody.contentString);\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'PutBucketAcl',\n                'boto3': 'put_bucket_acl',\n                'cli': 'put-bucket-acl'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.PutBucketLogging\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"PutBucketLogging\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n        reqParams = addToParamsFromXml(reqParams, jsonRequestBody.contentString);\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'PutBucketLogging',\n                'boto3': 'put_bucket_logging',\n                'cli': 'put-bucket-logging'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.DeleteBucket\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"DeleteBucket\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.path\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'DeleteBucket',\n                'boto3': 'delete_bucket',\n                'cli': 'delete-bucket'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n\n        return {};\n    }\n    \n    // manual:s3:s3.ListObjects\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"ListObjects\") {\n        reqParams.boto3['BucketName'] = jsonRequestBody.path;\n        reqParams.boto3['Prefix'] = jsonRequestBody.params.prefix;\n        reqParams.cli['_'] = [\n            `s3://${jsonRequestBody.path}/${jsonRequestBody.params.prefix}`\n        ]\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'ListObjects',\n                'boto3': 'list_objects',\n                'cli': 'ls'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketVersioning\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketVersioning\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketVersioning',\n                'boto3': 'get_bucket_versioning',\n                'cli': 'get-bucket-versioning'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketLogging\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketLogging\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketLogging',\n                'boto3': 'get_bucket_logging',\n                'cli': 'get-bucket-logging'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketTagging\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketTagging\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketTagging',\n                'boto3': 'get_bucket_tagging',\n                'cli': 'get-bucket-tagging'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketNotificationConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketNotification\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketNotificationConfiguration',\n                'boto3': 'get_bucket_notification_configuration',\n                'cli': 'get-bucket-notification-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketWebsite\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketWebsite\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketWebsite',\n                'boto3': 'get_bucket_website',\n                'cli': 'get-bucket-website'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketRequestPayment\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketRequestPayment\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketRequestPayment',\n                'boto3': 'get_bucket_request_payment',\n                'cli': 'get-bucket-request-payment'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketAccelerateConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketAccelerate\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketAccelerateConfiguration',\n                'boto3': 'get_bucket_accelerate_configuration',\n                'cli': 'get-bucket-accelerate-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketEncryption\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketDefaultEncryption\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketEncryption',\n                'boto3': 'get_bucket_encryption',\n                'cli': 'get-bucket-encryption'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketReplication\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketReplication\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketReplication',\n                'boto3': 'get_bucket_replication',\n                'cli': 'get-bucket-replication'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketMetricsConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketMetrics\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketMetricsConfiguration',\n                'boto3': 'get_bucket_metrics_configuration',\n                'cli': 'get-bucket-metrics-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketAnalyticsConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketAnalytics\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketAnalyticsConfiguration',\n                'boto3': 'get_bucket_analytics_configuration',\n                'cli': 'get-bucket-analytics-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketLifecycleConfiguration\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetLifecycleConfiguration\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketLifecycleConfiguration',\n                'boto3': 'get_bucket_lifecycle_configuration',\n                'cli': 'get-bucket-lifecycle-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:s3:s3.GetBucketCORS\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketCORS\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketCORS',\n                'boto3': 'get_bucket_cors',\n                'cli': 'get-bucket-cors'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketPolicy\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketPolicy\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketPolicy',\n                'boto3': 'get_bucket_policy',\n                'cli': 'get-bucket-policy'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.GetBucketAcl\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"GetBucketAcl\") {\n        reqParams.boto3['Bucket'] = jsonRequestBody.path;\n        reqParams.cli['--bucket'] = jsonRequestBody.path;\n        reqParams.cli['_cli_service'] = \"s3api\";\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'GetBucketAcl',\n                'boto3': 'get_bucket_acl',\n                'cli': 'get-bucket-acl'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n    \n    // manual:s3:s3.ListBuckets\n    if (details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/proxy$/g) && jsonRequestBody.operation == \"ListAllMyBuckets\") {\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'ListBuckets',\n                'boto3': 'list_buckets',\n                'cli': 'ls'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // manual:s3:cloudtrail.DescribeTrails\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/s3\\/cloudtrail-proxy$/g) && jsonRequestBody.operation == \"DescribeTrails\") {\n        reqParams.boto3['includeShadowTrails'] = jsonRequestBody.content.includeShadowTrails;\n        reqParams.boto3['trailNameList'] = jsonRequestBody.content.trailNameList;\n        if (jsonRequestBody.content.includeShadowTrails === true)\n            reqParams.cli['--include-shadow-trails'] = null;\n        else if (jsonRequestBody.content.includeShadowTrails === true)\n            reqParams.cli['--no-include-shadow-trails'] = null;\n        reqParams.cli['--trail-name-list'] = jsonRequestBody.content.trailNameList;\n        \n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'DescribeTrails',\n                'boto3': 'describe_trails',\n                'cli': 'describe-trails'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        return {};\n    }\n\n    // autogen:cloud9:cloud9.DescribeEnvironmentMemberships\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"describeEnvironmentMemberships\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['permissions'] = jsonRequestBody.contentString.permissions;\n        reqParams.cli['--permissions'] = jsonRequestBody.contentString.permissions;\n        reqParams.boto3['maxResults'] = jsonRequestBody.contentString.maxResults;\n        reqParams.cli['--max-results'] = jsonRequestBody.contentString.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'DescribeEnvironmentMemberships',\n                'boto3': 'describe_environment_memberships',\n                'cli': 'describe-environment-memberships'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloud9:cloud9.DescribeEnvironments\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"describeEnvironments\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['environmentIds'] = jsonRequestBody.contentString.environmentIds;\n        reqParams.cli['--environment-ids'] = jsonRequestBody.contentString.environmentIds;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'DescribeEnvironments',\n                'boto3': 'describe_environments',\n                'cli': 'describe-environments'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloud9:cloud9.ListEnvironments\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"listEnvironments\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.contentString.maxResults;\n        reqParams.cli['--max-results'] = jsonRequestBody.contentString.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'ListEnvironments',\n                'boto3': 'list_environments',\n                'cli': 'list-environments'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloud9:cloud9.UpdateEnvironment\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"describeEC2Remote\" && jsonRequestBody.method == \"POST\" && jsonRequestBody.operation == \"updateEnvironment\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:cloud9:*:*:environment:\" + jsonRequestBody.contentString.environmentId\n        ];\n\n        reqParams.boto3['environmentId'] = jsonRequestBody.contentString.environmentId;\n        reqParams.cli['--environment-id'] = jsonRequestBody.contentString.environmentId;\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['description'] = jsonRequestBody.contentString.description;\n        reqParams.cli['--description'] = jsonRequestBody.contentString.description;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'UpdateEnvironment',\n                'boto3': 'update_environment',\n                'cli': 'update-environment'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:cloud9:ec2.DescribeVpcs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/ec2$/g) && jsonRequestBody.operation == \"describeVpcs\" && jsonRequestBody.method == \"POST\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcs',\n                'boto3': 'describe_vpcs',\n                'cli': 'describe-vpcs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloud9:ec2.DescribeSubnets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/ec2$/g) && jsonRequestBody.operation == \"describeSubnets\" && jsonRequestBody.method == \"POST\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSubnets',\n                'boto3': 'describe_subnets',\n                'cli': 'describe-subnets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloud9:cloud9.CreateEnvironmentEC2\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"createEnvironmentEC2\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['description'] = jsonRequestBody.contentString.description;\n        reqParams.cli['--description'] = jsonRequestBody.contentString.description;\n        reqParams.boto3['instanceType'] = jsonRequestBody.contentString.instanceType;\n        reqParams.cli['--instance-type'] = jsonRequestBody.contentString.instanceType;\n        reqParams.boto3['automaticStopTimeMinutes'] = jsonRequestBody.contentString.automaticStopTimeMinutes;\n        reqParams.cli['--automatic-stop-time-minutes'] = jsonRequestBody.contentString.automaticStopTimeMinutes;\n        reqParams.boto3['subnetId'] = jsonRequestBody.contentString.subnetId;\n        reqParams.cli['--subnet-id'] = jsonRequestBody.contentString.subnetId;\n        reqParams.boto3['clientRequestToken'] = jsonRequestBody.contentString.clientRequestToken;\n        reqParams.cli['--client-request-token'] = jsonRequestBody.contentString.clientRequestToken;\n\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['Description'] = jsonRequestBody.contentString.description;\n        reqParams.cfn['InstanceType'] = jsonRequestBody.contentString.instanceType;\n        reqParams.cfn['AutomaticStopTimeMinutes'] = jsonRequestBody.contentString.automaticStopTimeMinutes;\n        reqParams.cfn['SubnetId'] = jsonRequestBody.contentString.subnetId;\n\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['description'] = jsonRequestBody.contentString.description;\n        reqParams.tf['instance_type'] = jsonRequestBody.contentString.instanceType;\n        reqParams.tf['automatic_stop_time_minutes'] = jsonRequestBody.contentString.automaticStopTimeMinutes;\n        reqParams.tf['subnet_id'] = jsonRequestBody.contentString.subnetId;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'CreateEnvironmentEC2',\n                'boto3': 'create_environment_ec2',\n                'cli': 'create-environment-ec2'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('cloud9', details.requestId),\n            'region': region,\n            'service': 'cloud9',\n            'type': 'AWS::Cloud9::EnvironmentEC2',\n            'terraformType': 'aws_cloud9_environment_ec2',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:cloud9:cloud9.DeleteEnvironment\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloud9\\/api\\/cloud9$/g) && jsonRequestBody.operation == \"deleteEnvironment\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:cloud9:*:*:environment:\" + jsonRequestBody.contentString.environmentId\n        ];\n\n        reqParams.boto3['environmentId'] = jsonRequestBody.contentString.environmentId;\n        reqParams.cli['--environment-id'] = jsonRequestBody.contentString.environmentId;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloud9',\n            'method': {\n                'api': 'DeleteEnvironment',\n                'boto3': 'delete_environment',\n                'cli': 'delete-environment'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:medialive:medialive.ListInputSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/inputSecurityGroups$/g) && jsonRequestBody.method == \"GET\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'medialive',\n            'method': {\n                'api': 'ListInputSecurityGroups',\n                'boto3': 'list_input_security_groups',\n                'cli': 'list-input-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:medialive:medialive.ListChannels\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/channels$/g) && jsonRequestBody.method == \"GET\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'medialive',\n            'method': {\n                'api': 'ListChannels',\n                'boto3': 'list_channels',\n                'cli': 'list-channels'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:medialive:medialive.CreateInputSecurityGroup\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/inputSecurityGroups$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['WhitelistRules'] = jsonRequestBody.contentString.whitelistRules;\n        reqParams.cli['--whitelist-rules'] = jsonRequestBody.contentString.whitelistRules;\n\n        outputs.push({\n            'region': region,\n            'service': 'medialive',\n            'method': {\n                'api': 'CreateInputSecurityGroup',\n                'boto3': 'create_input_security_group',\n                'cli': 'create-input-security-group'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:medialive:ssm.GetParametersByPath\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/ssm$/g) && jsonRequestBody.operation == \"getParametersByPath\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['Path'] = jsonRequestBody.contentString.Path;\n        reqParams.cli['--path'] = jsonRequestBody.contentString.Path;\n\n        outputs.push({\n            'region': region,\n            'service': 'ssm',\n            'method': {\n                'api': 'GetParametersByPath',\n                'boto3': 'get_parameters_by_path',\n                'cli': 'get-parameters-by-path'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:medialive:iam.ListRoles\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/iam$/g) && jsonRequestBody.operation == \"listRoles\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListRoles',\n                'boto3': 'list_roles',\n                'cli': 'list-roles'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:medialive:iam.GetRolePolicy\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/iam$/g) && jsonRequestBody.operation == \"getRolePolicy\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'GetRolePolicy',\n                'boto3': 'get_role_policy',\n                'cli': 'get-role-policy'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:medialive:medialive.CreateChannel\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/medialive\\/api\\/channels$/g) && jsonRequestBody.operation == \"createChannels\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['InputAttachments'] = jsonRequestBody.contentString.inputAttachments;\n        reqParams.cli['--input-attachments'] = jsonRequestBody.contentString.inputAttachments;\n        reqParams.boto3['InputSpecification'] = jsonRequestBody.contentString.inputSpecification;\n        reqParams.cli['--input-specification'] = jsonRequestBody.contentString.inputSpecification;\n        reqParams.boto3['Destinations'] = jsonRequestBody.contentString.destinations;\n        reqParams.cli['--destinations'] = jsonRequestBody.contentString.destinations;\n        reqParams.boto3['EncoderSettings'] = jsonRequestBody.contentString.encoderSettings;\n        reqParams.cli['--encoder-settings'] = jsonRequestBody.contentString.encoderSettings;\n        reqParams.boto3['RequestId'] = jsonRequestBody.contentString.requestId;\n        reqParams.cli['--request-id'] = jsonRequestBody.contentString.requestId;\n        reqParams.boto3['LogLevel'] = jsonRequestBody.contentString.logLevel;\n        reqParams.cli['--log-level'] = jsonRequestBody.contentString.logLevel;\n        reqParams.boto3['RoleArn'] = jsonRequestBody.contentString.roleArn;\n        reqParams.cli['--role-arn'] = jsonRequestBody.contentString.roleArn;\n\n        outputs.push({\n            'region': region,\n            'service': 'medialive',\n            'method': {\n                'api': 'CreateChannel',\n                'boto3': 'create_channel',\n                'cli': 'create-channel'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.DescribeFileSystems\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=describeFileSystems$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'DescribeFileSystems',\n                'boto3': 'describe_file_systems',\n                'cli': 'describe-file-systems'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:efs:kms.ListKeys\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=listKeys$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'kms',\n            'method': {\n                'api': 'ListKeys',\n                'boto3': 'list_keys',\n                'cli': 'list-keys'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:efs:kms.DescribeKey\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=describeKey$/g)) {\n        reqParams.boto3['KeyId'] = jsonRequestBody.kmsKeyId;\n        reqParams.cli['--key-id'] = jsonRequestBody.kmsKeyId;\n\n        outputs.push({\n            'region': region,\n            'service': 'kms',\n            'method': {\n                'api': 'DescribeKey',\n                'boto3': 'describe_key',\n                'cli': 'describe-key'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:efs:efs.CreateFileSystem\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=createFileSystem$/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['PerformanceMode'] = jsonRequestBody.performanceMode;\n        reqParams.cli['--performance-mode'] = jsonRequestBody.performanceMode;\n        reqParams.boto3['Encrypted'] = jsonRequestBody.encrypted;\n        reqParams.cli['--encrypted'] = jsonRequestBody.encrypted;\n        reqParams.boto3['KmsKeyId'] = jsonRequestBody.kmsKeyId;\n        reqParams.cli['--kms-key-id'] = jsonRequestBody.kmsKeyId;\n        reqParams.boto3['ThroughputMode'] = jsonRequestBody.throughputMode;\n        reqParams.cli['--throughput-mode'] = jsonRequestBody.throughputMode;\n        reqParams.boto3['ProvisionedThroughputInMibps'] = jsonRequestBody.provisionedThroughputInMibps;\n        reqParams.cli['--provisioned-throughput-in-mibps'] = jsonRequestBody.provisionedThroughputInMibps;\n\n        reqParams.cfn['PerformanceMode'] = jsonRequestBody.performanceMode;\n        reqParams.cfn['Encrypted'] = jsonRequestBody.encrypted;\n        reqParams.cfn['KmsKeyId'] = jsonRequestBody.kmsKeyId;\n        reqParams.cfn['ThroughputMode'] = jsonRequestBody.throughputMode;\n        reqParams.cfn['ProvisionedThroughputInMibps'] = jsonRequestBody.provisionedThroughputInMibps;\n\n        reqParams.tf['performance_mode'] = jsonRequestBody.performanceMode;\n        reqParams.tf['encrypted'] = jsonRequestBody.encrypted;\n        reqParams.tf['kms_key_id'] = jsonRequestBody.kmsKeyId;\n        reqParams.tf['throughput_mode'] = jsonRequestBody.throughputMode;\n        reqParams.tf['provisioned_throughput_in_mibps'] = jsonRequestBody.provisionedThroughputInMibps;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'CreateFileSystem',\n                'boto3': 'create_file_system',\n                'cli': 'create-file-system'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('efs', details.requestId),\n            'region': region,\n            'service': 'efs',\n            'type': 'AWS::EFS::FileSystem',\n            'terraformType': 'aws_efs_file_system',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.CreateMountTarget\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=createMountTarget$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/\" + jsonRequestBody.fileSystemId\n        ];\n\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n        reqParams.boto3['SubnetId'] = jsonRequestBody.mountTargetConfig.subnetId;\n        reqParams.cli['--subnet-id'] = jsonRequestBody.mountTargetConfig.subnetId;\n        reqParams.boto3['SecurityGroups'] = jsonRequestBody.mountTargetConfig.securityGroups;\n        reqParams.cli['--security-groups'] = jsonRequestBody.mountTargetConfig.securityGroups;\n\n        reqParams.cfn['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cfn['SubnetId'] = jsonRequestBody.mountTargetConfig.subnetId;\n        reqParams.cfn['SecurityGroups'] = jsonRequestBody.mountTargetConfig.securityGroups;\n\n        reqParams.tf['file_system_id'] = jsonRequestBody.fileSystemId;\n        reqParams.tf['subnet_id'] = jsonRequestBody.mountTargetConfig.subnetId;\n        reqParams.tf['security_groups'] = jsonRequestBody.mountTargetConfig.securityGroups;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'CreateMountTarget',\n                'boto3': 'create_mount_target',\n                'cli': 'create-mount-target'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('efs', details.requestId),\n            'region': region,\n            'service': 'efs',\n            'type': 'AWS::EFS::MountTarget',\n            'terraformType': 'aws_efs_mount_target',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.DescribeMountTargets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=describeMountTargets$/g)) {\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'DescribeMountTargets',\n                'boto3': 'describe_mount_targets',\n                'cli': 'describe-mount-targets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:efs:efs.DescribeTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=describeTags$/g)) {\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'DescribeTags',\n                'boto3': 'describe_tags',\n                'cli': 'describe-tags'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:efs:efs.UpdateFileSystem\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=modifyThroughputMode$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/\" + jsonRequestBody.fileSystemId\n        ];\n\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n        reqParams.boto3['ThroughputMode'] = jsonRequestBody.throughputMode;\n        reqParams.cli['--throughput-mode'] = jsonRequestBody.throughputMode;\n        reqParams.boto3['ProvisionedThroughputInMibps'] = jsonRequestBody.provisionedThroughputInMibps;\n        reqParams.cli['--provisioned-throughput-in-mibps'] = jsonRequestBody.provisionedThroughputInMibps;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'UpdateFileSystem',\n                'boto3': 'update_file_system',\n                'cli': 'update-file-system'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.DeleteMountTarget\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=deleteMountTarget$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/*\"\n        ];\n\n        reqParams.boto3['MountTargetId'] = jsonRequestBody.mountTargetId;\n        reqParams.cli['--mount-target-id'] = jsonRequestBody.mountTargetId;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'DeleteMountTarget',\n                'boto3': 'delete_mount_target',\n                'cli': 'delete-mount-target'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.DeleteFileSystem\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?region=.+&type=deleteFileSystem$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/\" + jsonRequestBody.fileSystemId\n        ];\n\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'DeleteFileSystem',\n                'boto3': 'delete_file_system',\n                'cli': 'delete-file-system'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.GetEventSelectors\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/getEventSelectors\\?/g)) {\n        reqParams.boto3['TrailName'] = getUrlValue(details.url, 'trailArn');\n        reqParams.cli['--trail-name'] = getUrlValue(details.url, 'trailArn');\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'GetEventSelectors',\n                'boto3': 'get_event_selectors',\n                'cli': 'get-event-selectors'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.DescribeTrails\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/resources\\/trails\\?/g)) {\n        reqParams.boto3['IncludeShadowTrails'] = getUrlValue(details.url, 'includeShadowTrails');\n        reqParams.cli['--include-shadow-trails'] = getUrlValue(details.url, 'includeShadowTrails');\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'DescribeTrails',\n                'boto3': 'describe_trails',\n                'cli': 'describe-trails'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.LookupEvents\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/lookupEvents\\?/g)) {\n        reqParams.boto3['EndTime'] = getUrlValue(details.url, 'endTime');\n        reqParams.cli['--end-time'] = getUrlValue(details.url, 'endTime');\n        reqParams.boto3['StartTime'] = getUrlValue(details.url, 'startTime');\n        reqParams.cli['--start-time'] = getUrlValue(details.url, 'startTime');\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'LookupEvents',\n                'boto3': 'lookup_events',\n                'cli': 'lookup-events'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:sns.ListTopics\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/getSnsTopicNameToArnMapByRegion\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'sns',\n            'method': {\n                'api': 'ListTopics',\n                'boto3': 'list_topics',\n                'cli': 'list-topics'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:lambda.ListFunctions\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/listLambdaFunctions\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'lambda',\n            'method': {\n                'api': 'ListFunctions',\n                'boto3': 'list_functions',\n                'cli': 'list-functions'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.CreateTrail\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/subscribe\\?/g)) {\n        var prefix = getUrlValue(details.url, 's3KeyPrefix');\n        if (!prefix) {\n            prefix = \"\";\n        }\n\n        reqParams.iam['Resource'] = [\n            \"arn:aws:cloudtrail:*:*:trail/\" + getUrlValue(details.url, 'configName')\n        ];\n\n        reqParams.iam['secondary'] = [\n            {\n                'Action': [\n                    's3:PutObject'\n                ],\n                'Resource': [\n                    'arn:aws:s3:::' + getUrlValue(details.url, 's3BucketName') + '/' + prefix + '/*'\n                ]\n            }\n        ];\n\n        reqParams.boto3['Name'] = getUrlValue(details.url, 'configName');\n        reqParams.cli['--name'] = getUrlValue(details.url, 'configName');\n        reqParams.boto3['IncludeGlobalServiceEvents'] = getUrlValue(details.url, 'isIncludeGlobalServiceEvents');\n        reqParams.cli['--include-global-service-events'] = getUrlValue(details.url, 'isIncludeGlobalServiceEvents');\n        reqParams.boto3['IsMultiRegionTrail'] = getUrlValue(details.url, 'isMultiRegionTrail');\n        reqParams.cli['--is-multi-region-trail'] = getUrlValue(details.url, 'isMultiRegionTrail');\n        reqParams.boto3['KmsKeyId'] = getUrlValue(details.url, 'kmsKeyId');\n        reqParams.cli['--kms-key-id'] = getUrlValue(details.url, 'kmsKeyId');\n        reqParams.boto3['EnableLogFileValidation'] = getUrlValue(details.url, 'logFileValidation');\n        reqParams.cli['--enable-log-file-validation'] = getUrlValue(details.url, 'logFileValidation');\n        reqParams.boto3['S3BucketName'] = getUrlValue(details.url, 's3BucketName');\n        reqParams.cli['--s3-bucket-name'] = getUrlValue(details.url, 's3BucketName');\n        reqParams.boto3['S3KeyPrefix'] = getUrlValue(details.url, 's3KeyPrefix');\n        reqParams.cli['--s3-key-prefix'] = getUrlValue(details.url, 's3KeyPrefix');\n        reqParams.boto3['SnsTopicName'] = getUrlValue(details.url, 'snsTopicArn');\n        reqParams.cli['--sns-topic-name'] = getUrlValue(details.url, 'snsTopicArn');\n\n        reqParams.cfn['TrailName'] = getUrlValue(details.url, 'configName');\n        reqParams.cfn['IncludeGlobalServiceEvents'] = getUrlValue(details.url, 'isIncludeGlobalServiceEvents');\n        reqParams.cfn['IsMultiRegionTrail'] = getUrlValue(details.url, 'isMultiRegionTrail');\n        reqParams.cfn['KMSKeyId'] = getUrlValue(details.url, 'kmsKeyId');\n        reqParams.cfn['EnableLogFileValidation'] = getUrlValue(details.url, 'logFileValidation');\n        reqParams.cfn['S3BucketName'] = getUrlValue(details.url, 's3BucketName');\n        reqParams.cfn['S3KeyPrefix'] = getUrlValue(details.url, 's3KeyPrefix');\n        reqParams.cfn['SnsTopicName'] = getUrlValue(details.url, 'snsTopicArn');\n\n        reqParams.tf['name'] = getUrlValue(details.url, 'configName');\n        reqParams.tf['include_global_service_events'] = getUrlValue(details.url, 'isIncludeGlobalServiceEvents');\n        reqParams.tf['is_multi_region_trail'] = getUrlValue(details.url, 'isMultiRegionTrail');\n        reqParams.tf['kms_key_id'] = getUrlValue(details.url, 'kmsKeyId');\n        reqParams.tf['enable_log_file_validation'] = getUrlValue(details.url, 'logFileValidation');\n        reqParams.tf['s3_bucket_name'] = getUrlValue(details.url, 's3BucketName');\n        reqParams.tf['s3_key_prefix'] = getUrlValue(details.url, 's3KeyPrefix');\n        reqParams.tf['sns_topic_name'] = getUrlValue(details.url, 'snsTopicArn');\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'CreateTrail',\n                'boto3': 'create_trail',\n                'cli': 'create-trail'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('cloudtrail', details.requestId),\n            'region': region,\n            'service': 'cloudtrail',\n            'type': 'AWS::CloudTrail::Trail',\n            'terraformType': 'aws_cloudtrail',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.GetTrailStatus\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/resources\\/status\\?/g)) {\n        reqParams.boto3['Name'] = getUrlValue(details.url, 'trailArn');\n        reqParams.cli['--name'] = getUrlValue(details.url, 'trailArn');\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'GetTrailStatus',\n                'boto3': 'get_trail_status',\n                'cli': 'get-trail-status'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:cloudtrail:cloudtrail.ListTags\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/cloudtrail\\/service\\/listTags\\?/g)) {\n        reqParams.boto3['ResourceIdList'] = [getUrlValue(details.url, 'trailArn')];\n        reqParams.cli['--resource-id-list'] = [getUrlValue(details.url, 'trailArn')];\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudtrail',\n            'method': {\n                'api': 'ListTags',\n                'boto3': 'list_tags',\n                'cli': 'list-tags'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:config.DescribePendingAggregationRequests\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/aggregationAuthorization\\/describePendingAggregationRequests\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'config',\n            'method': {\n                'api': 'DescribePendingAggregationRequests',\n                'boto3': 'describe_pending_aggregation_requests',\n                'cli': 'describe-pending-aggregation-requests'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:config.DescribeConfigurationRecorders\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/listConfigurationRecorders\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'config',\n            'method': {\n                'api': 'DescribeConfigurationRecorders',\n                'boto3': 'describe_configuration_recorders',\n                'cli': 'describe-configuration-recorders'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:config.DescribeDeliveryChannels\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/listDeliveryChannels\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'config',\n            'method': {\n                'api': 'DescribeDeliveryChannels',\n                'boto3': 'describe_delivery_channels',\n                'cli': 'describe-delivery-channels'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:iam.ListRoles\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/iam\\/listRoles\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListRoles',\n                'boto3': 'list_roles',\n                'cli': 'list-roles'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:s3.ListBuckets\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/listS3Buckets\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'ListBuckets',\n                'boto3': 'list_buckets',\n                'cli': 'list-buckets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:sns.ListTopics\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/listSnsTopics\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'sns',\n            'method': {\n                'api': 'ListTopics',\n                'boto3': 'list_topics',\n                'cli': 'list-topics'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:config:iam.CreateServiceLinkedRole\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/createServiceLinkedRole\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:role/*\"\n        ];\n\n        reqParams.boto3['AWSServiceName'] = 'elasticbeanstalk.amazonaws.com';\n        reqParams.cli['--aws-service-name'] = 'elasticbeanstalk.amazonaws.com';\n\n        reqParams.cfn['AWSServiceName'] = 'elasticbeanstalk.amazonaws.com';\n\n        reqParams.tf['aws_service_name'] = 'elasticbeanstalk.amazonaws.com';\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'CreateServiceLinkedRole',\n                'boto3': 'create_service_linked_role',\n                'cli': 'create-service-linked-role'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('iam', details.requestId),\n            'region': region,\n            'service': 'iam',\n            'type': 'AWS::IAM::ServiceLinkedRole',\n            'terraformType': 'aws_iam_service_linked_role',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:config:s3.CreateBucket\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/config\\/service\\/createS3BucketForConfiguration\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:s3:::\" + jsonRequestBody.s3BucketName\n        ];\n\n        reqParams.boto3['Bucket'] = jsonRequestBody.s3BucketName;\n        reqParams.cli['--bucket'] = jsonRequestBody.s3BucketName;\n\n        reqParams.cfn['BucketName'] = jsonRequestBody.s3BucketName;\n\n        reqParams.tf['bucket'] = jsonRequestBody.s3BucketName;\n\n        outputs.push({\n            'region': region,\n            'service': 's3',\n            'method': {\n                'api': 'CreateBucket',\n                'boto3': 'create_bucket',\n                'cli': 'create-bucket'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('s3', details.requestId),\n            'region': region,\n            'service': 's3',\n            'type': 'AWS::S3::Bucket',\n            'terraformType': 'aws_s3_bucket',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListDetectors\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && (jsonRequestBody.operation == \"ListDetectors\" || jsonRequestBody.operation == \"listDetectors\") && jsonRequestBody.method == \"GET\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListDetectors',\n                'boto3': 'list_detectors',\n                'cli': 'list-detectors'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetInvitationsCount\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetInvitationsCount\" && jsonRequestBody.method == \"GET\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetInvitationsCount',\n                'boto3': 'get_invitations_count',\n                'cli': 'get-invitations-count'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.CreateDetector\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && (jsonRequestBody.operation == \"CreateDetector\" || jsonRequestBody.operation == \"createDetector\") && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Enable'] = jsonRequestBody.contentString.enable;\n        reqParams.cli['--enable'] = jsonRequestBody.contentString.enable;\n\n        reqParams.cfn['Enable'] = jsonRequestBody.contentString.enable;\n\n        reqParams.tf['enable'] = jsonRequestBody.contentString.enable;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'CreateDetector',\n                'boto3': 'create_detector',\n                'cli': 'create-detector'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('guardduty', details.requestId),\n            'region': region,\n            'service': 'guardduty',\n            'type': 'AWS::GuardDuty::Detector',\n            'terraformType': 'aws_guardduty_detector',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListFindings\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListFindings\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['FindingCriteria'] = jsonRequestBody.contentString.findingCriteria;\n        reqParams.cli['--finding-criteria'] = jsonRequestBody.contentString.findingCriteria;\n        reqParams.boto3['SortCriteria'] = jsonRequestBody.contentString.sortCriteria;\n        reqParams.cli['--sort-criteria'] = jsonRequestBody.contentString.sortCriteria;\n        reqParams.boto3['MaxResults'] = jsonRequestBody.contentString.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.contentString.maxResults;\n        reqParams.boto3['NextToken'] = jsonRequestBody.contentString.nextToken;\n        reqParams.cli['--next-token'] = jsonRequestBody.contentString.nextToken;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListFindings',\n                'boto3': 'list_findings',\n                'cli': 'list-findings'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetMasterAccount\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetMasterAccount\" && jsonRequestBody.method == \"GET\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetMasterAccount',\n                'boto3': 'get_master_account',\n                'cli': 'get-master-account'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListMembers\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListMembers\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListMembers',\n                'boto3': 'list_members',\n                'cli': 'list-members'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetDetector\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetDetector\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetDetector',\n                'boto3': 'get_detector',\n                'cli': 'get-detector'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetFindingsStatistics\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetFindingsStatistics\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['FindingCriteria'] = jsonRequestBody.contentString.findingCriteria;\n        reqParams.cli['--finding-criteria'] = jsonRequestBody.contentString.findingCriteria;\n        reqParams.boto3['FindingStatisticTypes'] = jsonRequestBody.contentString.findingStatisticTypes;\n        reqParams.cli['--finding-statistic-types'] = jsonRequestBody.contentString.findingStatisticTypes;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetFindingsStatistics',\n                'boto3': 'get_findings_statistics',\n                'cli': 'get-findings-statistics'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListFilters\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListFilters\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListFilters',\n                'boto3': 'list_filters',\n                'cli': 'list-filters'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.CreateMembers\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"CreateMembers\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['AccountDetails'] = jsonRequestBody.contentString.accountDetails;\n        reqParams.cli['--account-details'] = jsonRequestBody.contentString.accountDetails;\n\n        reqParams.cfn['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cfn['MemberId'] = jsonRequestBody.contentString.accountDetails.AccountId;\n        reqParams.cfn['Email'] = jsonRequestBody.contentString.accountDetails.Email;\n\n        reqParams.tf['detector_id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.tf['account_id'] = jsonRequestBody.contentString.accountDetails.AccountId;\n        reqParams.tf['email'] = jsonRequestBody.contentString.accountDetails.Email;\n        \n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'CreateMembers',\n                'boto3': 'create_members',\n                'cli': 'create-members'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('guardduty', details.requestId),\n            'region': region,\n            'service': 'guardduty',\n            'type': 'AWS::GuardDuty::Member',\n            'terraformType': 'aws_guardduty_member',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.DeleteMembers\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"DeleteMembers\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['AccountIds'] = jsonRequestBody.contentString.accountIds;\n        reqParams.cli['--account-ids'] = jsonRequestBody.contentString.accountIds;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'DeleteMembers',\n                'boto3': 'delete_members',\n                'cli': 'delete-members'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListIPSets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListIPSets\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListIPSets',\n                'boto3': 'list_ip_sets',\n                'cli': 'list-ip-sets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListThreatIntelSets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListThreatIntelSets\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListThreatIntelSets',\n                'boto3': 'list_threat_intel_sets',\n                'cli': 'list-threat-intel-sets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:iam.ListPolicyVersions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/iam$/g) && jsonRequestBody.operation == \"ListPolicyVersions\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['PolicyArn'] = jsonRequestBody.contentString.match(/PolicyArn\\=(.+)\\&Version/g)[1];\n        reqParams.cli['--policy-arn'] = jsonRequestBody.contentString.match(/PolicyArn\\=(.+)\\&Version/g)[1]; // \"Action=ListPolicyVersions&PolicyArn=arn:aws:iam::aws:policy/aws-service-role/AmazonGuardDutyServiceRolePolicy&Version=2010-05-08\"\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListPolicyVersions',\n                'boto3': 'list_policy_versions',\n                'cli': 'list-policy-versions'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.CreateIPSet\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"CreateIPSet\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path;\n        reqParams.cli['--detector-id'] = jsonRequestBody.path;\n        reqParams.boto3['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['Location'] = jsonRequestBody.contentString.location;\n        reqParams.cli['--location'] = jsonRequestBody.contentString.location;\n        reqParams.boto3['Format'] = jsonRequestBody.contentString.format;\n        reqParams.cli['--format'] = jsonRequestBody.contentString.format;\n        reqParams.boto3['Activate'] = jsonRequestBody.contentString.activate;\n        reqParams.cli['--activate'] = jsonRequestBody.contentString.activate;\n\n        reqParams.cfn['DetectorId'] = jsonRequestBody.path;\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['Location'] = jsonRequestBody.contentString.location;\n        reqParams.cfn['Format'] = jsonRequestBody.contentString.format;\n        reqParams.cfn['Activate'] = jsonRequestBody.contentString.activate;\n\n        reqParams.tf['detector_id'] = jsonRequestBody.path;\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['location'] = jsonRequestBody.contentString.location;\n        reqParams.tf['format'] = jsonRequestBody.contentString.format;\n        reqParams.tf['activate'] = jsonRequestBody.contentString.activate;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'CreateIPSet',\n                'boto3': 'create_ip_set',\n                'cli': 'create-ip-set'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('guardduty', details.requestId),\n            'region': region,\n            'service': 'guardduty',\n            'type': 'AWS::GuardDuty::IPSet',\n            'terraformType': 'aws_guardduty_ipset',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ListIPSets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ListIPSets\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['DetectorId'] =jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ListIPSets',\n                'boto3': 'list_ip_sets',\n                'cli': 'list-ip-sets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetIPSet\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetIPSet\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['IpSetId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--ip-set-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetIPSet',\n                'boto3': 'get_ip_set',\n                'cli': 'get-ip-set'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.UpdateIPSet\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"UpdateIPSet\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2] + \"/ipset/\" + jsonRequestBody.path.split(\"/\")[4]\n        ];\n\n        reqParams.boto3['IpSetId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--ip-set-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['DetectorId'] =jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['Activate'] = jsonRequestBody.contentString.activate;\n        reqParams.cli['--activate'] = jsonRequestBody.contentString.activate;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'UpdateIPSet',\n                'boto3': 'update_ip_set',\n                'cli': 'update-ip-set'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.ArchiveFindings\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"ArchiveFindings\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['FindingIds'] = jsonRequestBody.contentString.findingIds;\n        reqParams.cli['--finding-ids'] = jsonRequestBody.contentString.findingIds;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'ArchiveFindings',\n                'boto3': 'archive_findings',\n                'cli': 'archive-findings'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.UnarchiveFindings\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"UnarchiveFindings\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['FindingIds'] = jsonRequestBody.contentString.findingIds;\n        reqParams.cli['--finding-ids'] = jsonRequestBody.contentString.findingIds;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'UnarchiveFindings',\n                'boto3': 'unarchive_findings',\n                'cli': 'unarchive-findings'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.GetFindings\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"GetFindings\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['FindingIds'] = jsonRequestBody.contentString.findingIds;\n        reqParams.cli['--finding-ids'] = jsonRequestBody.contentString.findingIds;\n        reqParams.boto3['SortCriteria'] = jsonRequestBody.contentString.sortCriteria;\n        reqParams.cli['--sort-criteria'] = jsonRequestBody.contentString.sortCriteria;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'GetFindings',\n                'boto3': 'get_findings',\n                'cli': 'get-findings'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:iam.ListAttachedRolePolicies\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/iam$/g) && jsonRequestBody.operation == \"ListAttachedRolePolicies\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['RoleName'] = jsonRequestBody.contentString.match(/RoleName\\=(.+)\\&Version/g)[1];;\n        reqParams.cli['--role-name'] = jsonRequestBody.contentString.match(/RoleName\\=(.+)\\&Version/g)[1];;\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListAttachedRolePolicies',\n                'boto3': 'list_attached_role_policies',\n                'cli': 'list-attached-role-policies'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.CreateSampleFindings\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"CreateSampleFindings\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'CreateSampleFindings',\n                'boto3': 'create_sample_findings',\n                'cli': 'create-sample-findings'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:guardduty:guardduty.UpdateDetector\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/guardduty\\/api\\/guardduty$/g) && jsonRequestBody.operation == \"UpdateDetector\" && jsonRequestBody.method == \"POST\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:guardduty:*:*:detector/\" + jsonRequestBody.path.split(\"/\")[2]\n        ];\n\n        reqParams.boto3['DetectorId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--detector-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['Enable'] = jsonRequestBody.contentString.enable;\n        reqParams.cli['--enable'] = jsonRequestBody.contentString.enable;\n        reqParams.boto3['FindingPublishingFrequency'] = jsonRequestBody.contentString.findingPublishingFrequency;\n        reqParams.cli['--finding-publishing-frequency'] = jsonRequestBody.contentString.findingPublishingFrequency;\n\n        outputs.push({\n            'region': region,\n            'service': 'guardduty',\n            'method': {\n                'api': 'UpdateDetector',\n                'boto3': 'update_detector',\n                'cli': 'update-detector'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.CreateTags\n    // autogen:efs:efs.DeleteTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?/g) && getUrlValue(details.url, 'type') == \"modifyTags\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/\" + jsonRequestBody.fileSystemId\n        ];\n\n        reqParams.boto3['FileSystemId'] = jsonRequestBody.fileSystemId;\n        reqParams.cli['--file-system-id'] = jsonRequestBody.fileSystemId;\n        if (jsonRequestBody.addTags) {\n            reqParams.boto3['Tags'] = jsonRequestBody.addTags;\n            reqParams.cli['--tags'] = jsonRequestBody.addTags;\n\n            outputs.push({\n                'region': region,\n                'service': 'efs',\n                'method': {\n                    'api': 'CreateTags',\n                    'boto3': 'create_tags',\n                    'cli': 'create-tags'\n                },\n                'options': reqParams,\n            'requestDetails': details\n            });\n        }\n        if (jsonRequestBody.removeKeys) {\n            reqParams.boto3['TagKeys'] = jsonRequestBody.removeKeys;\n            reqParams.cli['--tag-keys'] = jsonRequestBody.removeKeys;\n\n            outputs.push({\n                'region': region,\n                'service': 'efs',\n                'method': {\n                    'api': 'DeleteTags',\n                    'boto3': 'delete_tags',\n                    'cli': 'delete-tags'\n                },\n                'options': reqParams,\n            'requestDetails': details\n            });\n        }\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:efs:efs.ModifyMountTargetSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/efs\\/ajax\\/api\\?/g) && getUrlValue(details.url, 'type') == \"modifySecurityGroups\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:elasticfilesystem:*:*:file-system/\" + jsonRequestBody.fileSystemId\n        ];\n\n        reqParams.boto3['MountTargetId'] = jsonRequestBody.mountTargetId;\n        reqParams.cli['--mount-target-id'] = jsonRequestBody.mountTargetId;\n        reqParams.boto3['SecurityGroups'] = jsonRequestBody.securityGroups;\n        reqParams.cli['--security-groups'] = jsonRequestBody.securityGroups;\n\n        outputs.push({\n            'region': region,\n            'service': 'efs',\n            'method': {\n                'api': 'ModifyMountTargetSecurityGroups',\n                'boto3': 'modify_mount_target_security_groups',\n                'cli': 'modify-mount-target-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:mq:mq.ListBrokers\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.path == \"/brokers\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'ListBrokers',\n                'boto3': 'list_brokers',\n                'cli': 'list-brokers'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:ec2.DescribeVpcs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/ec2$/g) && jsonRequestBody.params.Action == \"DescribeVpcs\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcs',\n                'boto3': 'describe_vpcs',\n                'cli': 'describe-vpcs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:mq.ListConfigurations\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path == \"/configurations\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.params.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.params.maxResults;\n        reqParams.boto3['NextToken'] = jsonRequestBody.params.nextToken;\n        reqParams.cli['--next-token'] = jsonRequestBody.params.nextToken;\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'ListConfigurations',\n                'boto3': 'list_configurations',\n                'cli': 'list-configurations'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:ec2.DescribeSubnets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/ec2$/g) && jsonRequestBody.params.Action == \"DescribeSubnets\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSubnets',\n                'boto3': 'describe_subnets',\n                'cli': 'describe-subnets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:ec2.DescribeSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/ec2$/g) && jsonRequestBody.params.Action == \"DescribeSecurityGroups\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSecurityGroups',\n                'boto3': 'describe_security_groups',\n                'cli': 'describe-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:mq.CreateBroker\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path == \"/brokers\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['BrokerName'] = jsonRequestBody.contentString.brokerName;\n        reqParams.cli['--broker-name'] = jsonRequestBody.contentString.brokerName;\n        reqParams.boto3['EngineType'] = jsonRequestBody.contentString.engineType;\n        reqParams.cli['--engine-type'] = jsonRequestBody.contentString.engineType;\n        reqParams.boto3['EngineVersion'] = jsonRequestBody.contentString.engineVersion;\n        reqParams.cli['--engine-version'] = jsonRequestBody.contentString.engineVersion;\n        reqParams.boto3['HostInstanceType'] = jsonRequestBody.contentString.hostInstanceType;\n        reqParams.cli['--host-instance-type'] = jsonRequestBody.contentString.hostInstanceType;\n        reqParams.boto3['DeploymentMode'] = jsonRequestBody.contentString.deploymentMode;\n        reqParams.cli['--deployment-mode'] = jsonRequestBody.contentString.deploymentMode;\n        reqParams.boto3['SecurityGroups'] = jsonRequestBody.contentString.securityGroups;\n        reqParams.cli['--security-groups'] = jsonRequestBody.contentString.securityGroups;\n        reqParams.boto3['SubnetIds'] = jsonRequestBody.contentString.subnetIds;\n        reqParams.cli['--subnet-ids'] = jsonRequestBody.contentString.subnetIds;\n        reqParams.boto3['PubliclyAccessible'] = jsonRequestBody.contentString.publiclyAccessible;\n        reqParams.cli['--publicly-accessible'] = jsonRequestBody.contentString.publiclyAccessible;\n        reqParams.boto3['AutoMinorVersionUpgrade'] = jsonRequestBody.contentString.autoMinorVersionUpgrade;\n        reqParams.cli['--auto-minor-version-upgrade'] = jsonRequestBody.contentString.autoMinorVersionUpgrade;\n        reqParams.boto3['Users'] = jsonRequestBody.contentString.users;\n        reqParams.cli['--users'] = jsonRequestBody.contentString.users;\n        reqParams.boto3['Configuration'] = jsonRequestBody.contentString.configuration;\n        reqParams.cli['--configuration'] = jsonRequestBody.contentString.configuration;\n        reqParams.boto3['Logs'] = jsonRequestBody.contentString.logs;\n        reqParams.cli['--logs'] = jsonRequestBody.contentString.logs;\n\n        reqParams.cfn['BrokerName'] = jsonRequestBody.contentString.brokerName;\n        reqParams.cfn['EngineType'] = jsonRequestBody.contentString.engineType;\n        reqParams.cfn['EngineVersion'] = jsonRequestBody.contentString.engineVersion;\n        reqParams.cfn['HostInstanceType'] = jsonRequestBody.contentString.hostInstanceType;\n        reqParams.cfn['DeploymentMode'] = jsonRequestBody.contentString.deploymentMode;\n        reqParams.cfn['SecurityGroups'] = jsonRequestBody.contentString.securityGroups;\n        reqParams.cfn['SubnetIds'] = jsonRequestBody.contentString.subnetIds;\n        reqParams.cfn['PubliclyAccessible'] = jsonRequestBody.contentString.publiclyAccessible;\n        reqParams.cfn['AutoMinorVersionUpgrade'] = jsonRequestBody.contentString.autoMinorVersionUpgrade;\n        reqParams.cfn['Configuration'] = jsonRequestBody.contentString.configuration;\n        reqParams.cfn['Logs'] = jsonRequestBody.contentString.logs;\n\n        reqParams.tf['broker_name'] = jsonRequestBody.contentString.brokerName;\n        reqParams.tf['engine_type'] = jsonRequestBody.contentString.engineType;\n        reqParams.tf['engine_version'] = jsonRequestBody.contentString.engineVersion;\n        reqParams.tf['host_instance_type'] = jsonRequestBody.contentString.hostInstanceType;\n        reqParams.tf['deployment_mode'] = jsonRequestBody.contentString.deploymentMode;\n        reqParams.tf['security_groups'] = jsonRequestBody.contentString.securityGroups;\n        reqParams.tf['subnet_ids'] = jsonRequestBody.contentString.subnetIds;\n        reqParams.tf['publicly_accessible'] = jsonRequestBody.contentString.publiclyAccessible;\n        reqParams.tf['auto_minor_version_upgrade'] = jsonRequestBody.contentString.autoMinorVersionUpgrade;\n        reqParams.tf['configuration'] = jsonRequestBody.contentString.configuration;\n\n        if (jsonRequestBody.contentString.users) {\n            reqParams.cfn['Users'] = [];\n            reqParams.tf['users'] = [];\n            for (var i=0; i<jsonRequestBody.contentString.users.length; i++) {\n                reqParams.cfn['Users'].push({\n                    'ConsoleAccess': jsonRequestBody.contentString.users[i].consoleAccess,\n                    'Groups': jsonRequestBody.contentString.users[i].groups,\n                    'Password': jsonRequestBody.contentString.users[i].password,\n                    'Username': jsonRequestBody.contentString.users[i].username\n                });\n                reqParams.tf['users'].push({\n                    'console_access': jsonRequestBody.contentString.users[i].consoleAccess,\n                    'groups': jsonRequestBody.contentString.users[i].groups,\n                    'password': jsonRequestBody.contentString.users[i].password,\n                    'username': jsonRequestBody.contentString.users[i].username\n                });\n            }\n        }\n        if (jsonRequestBody.contentString.logs) {\n            reqParams.cfn['Logs'] = {\n                'General': jsonRequestBody.contentString.logs.general,\n                'Audit': jsonRequestBody.contentString.logs.audit\n            };\n            reqParams.tf['logs'] = jsonRequestBody.contentString.logs;\n        }\n        if (jsonRequestBody.contentString.maintenanceWindowStartTime) {\n            reqParams.tf['maintenance_window_start_time'] = {\n                'day_of_week': jsonRequestBody.contentString.maintenanceWindowStartTime.dayOfWeek,\n                'time_of_day': jsonRequestBody.contentString.maintenanceWindowStartTime.timeOfDay,\n                'time_zone': jsonRequestBody.contentString.maintenanceWindowStartTime.timeZone\n            };\n            reqParams.cfn['MaintenanceWindowStartTime'] = {\n                'DayOfWeek': jsonRequestBody.contentString.maintenanceWindowStartTime.dayOfWeek,\n                'TimeOfDay': jsonRequestBody.contentString.maintenanceWindowStartTime.timeOfDay,\n                'TimeZone': jsonRequestBody.contentString.maintenanceWindowStartTime.timeZone\n            };\n            reqParams.boto3['MaintenanceWindowStartTime'] = {\n                'DayOfWeek': jsonRequestBody.contentString.maintenanceWindowStartTime.dayOfWeek,\n                'TimeOfDay': jsonRequestBody.contentString.maintenanceWindowStartTime.timeOfDay,\n                'TimeZone': jsonRequestBody.contentString.maintenanceWindowStartTime.timeZone\n            };\n            reqParams.cli['--maintenance-window-start-time'] = {\n                'DayOfWeek': jsonRequestBody.contentString.maintenanceWindowStartTime.dayOfWeek,\n                'TimeOfDay': jsonRequestBody.contentString.maintenanceWindowStartTime.timeOfDay,\n                'TimeZone': jsonRequestBody.contentString.maintenanceWindowStartTime.timeZone\n            };\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'CreateBroker',\n                'boto3': 'create_broker',\n                'cli': 'create-broker'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('mq', details.requestId),\n            'region': region,\n            'service': 'mq',\n            'type': 'AWS::AmazonMQ::Broker',\n            'terraformType': 'aws_mq_broker',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:mq:mq.CreateConfiguration\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path == \"/configurations\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['EngineType'] = jsonRequestBody.contentString.engineType;\n        reqParams.cli['--engine-type'] = jsonRequestBody.contentString.engineType;\n        reqParams.boto3['EngineVersion'] = jsonRequestBody.contentString.engineVersion;\n        reqParams.cli['--engine-version'] = jsonRequestBody.contentString.engineVersion;\n\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['EngineType'] = jsonRequestBody.contentString.engineType;\n        reqParams.cfn['EngineVersion'] = jsonRequestBody.contentString.engineVersion;\n\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['engine_type'] = jsonRequestBody.contentString.engineType;\n        reqParams.tf['engine_version'] = jsonRequestBody.contentString.engineVersion;\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'CreateConfiguration',\n                'boto3': 'create_configuration',\n                'cli': 'create-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('mq', details.requestId),\n            'region': region,\n            'service': 'mq',\n            'type': 'AWS::AmazonMQ::Configuration',\n            'terraformType': 'aws_mq_configuration',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:mq:mq.DescribeConfiguration\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/\\/configurations\\/.+/g)) {\n        reqParams.boto3['ConfigurationId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--configuration-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'DescribeConfiguration',\n                'boto3': 'describe_configuration',\n                'cli': 'describe-configuration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:mq:mq.DescribeConfigurationRevision\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/amazon-mq\\/api\\/mq$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/\\/configurations\\/.+\\/revisions\\/.+/g)) {\n        reqParams.boto3['ConfigurationId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--configuration-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['ConfigurationRevision'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--configuration-revision'] = jsonRequestBody.path.split(\"/\")[4];\n\n        outputs.push({\n            'region': region,\n            'service': 'mq',\n            'method': {\n                'api': 'DescribeConfigurationRevision',\n                'boto3': 'describe_configuration_revision',\n                'cli': 'describe-configuration-revision'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeLaunchTemplateVersions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeLaunchTemplateVersions\\?/g)) {\n        reqParams.boto3['LaunchTemplateId'] = jsonRequestBody.LaunchTemplateId;\n        reqParams.cli['--launch-template-id'] = jsonRequestBody.LaunchTemplateId;\n        reqParams.boto3['MaxResults'] = jsonRequestBody.MaxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.MaxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeLaunchTemplateVersions',\n                'boto3': 'describe_launch_template_versions',\n                'cli': 'describe-launch-template-versions'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeKeyPairs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeKeyPairs\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeKeyPairs',\n                'boto3': 'describe_key_pairs',\n                'cli': 'describe-key-pairs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeAvailabilityZones\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeAvailabilityZones\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAvailabilityZones',\n                'boto3': 'describe_availability_zones',\n                'cli': 'describe-availability-zones'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeHosts\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeHosts\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeHosts',\n                'boto3': 'describe_hosts',\n                'cli': 'describe-hosts'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeSecurityGroups\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSecurityGroups',\n                'boto3': 'describe_security_groups',\n                'cli': 'describe-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeSnapshots\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=getSnapshotsAutoUpdate\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSnapshots',\n                'boto3': 'describe_snapshots',\n                'cli': 'describe-snapshots'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVolumes\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=getMergedVolumesAutoUpdate\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVolumes',\n                'boto3': 'describe_volumes',\n                'cli': 'describe-volumes'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=getTagsAutoUpdate\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeTags',\n                'boto3': 'describe_tags',\n                'cli': 'describe-tags'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateLaunchTemplate\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateLaunchTemplate\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['LaunchTemplateName'] = jsonRequestBody.LaunchTemplateName;\n        reqParams.cli['--launch-template-name'] = jsonRequestBody.LaunchTemplateName;\n        reqParams.boto3['VersionDescription'] = jsonRequestBody.VersionDescription;\n        reqParams.cli['--version-description'] = jsonRequestBody.VersionDescription;\n        reqParams.boto3['LaunchTemplateData'] = jsonRequestBody.LaunchTemplateData;\n        reqParams.cli['--launch-template-data'] = jsonRequestBody.LaunchTemplateData;\n        reqParams.boto3['ClientToken'] = jsonRequestBody.ClientToken;\n        reqParams.cli['--client-token'] = jsonRequestBody.ClientToken;\n\n        reqParams.cfn['LaunchTemplateName'] = jsonRequestBody.LaunchTemplateName;\n        reqParams.cfn['LaunchTemplateData'] = jsonRequestBody.LaunchTemplateData;\n\n        reqParams.tf['name'] = jsonRequestBody.LaunchTemplateName;\n        reqParams.tf['description'] = jsonRequestBody.VersionDescription;\n        reqParams.tf['arn'] = jsonRequestBody.LaunchTemplateData.ImageId;\n        reqParams.tf['instance_type'] = jsonRequestBody.LaunchTemplateData.InstanceType;\n        reqParams.tf['key_name'] = jsonRequestBody.LaunchTemplateData.KeyName;\n        reqParams.tf['vpc_security_group_ids'] = jsonRequestBody.LaunchTemplateData.SecurityGroupIds;\n        reqParams.tf['security_group_names'] = jsonRequestBody.LaunchTemplateData.SecurityGroups;\n        reqParams.tf['instance_initiated_shutdown_behavior'] = jsonRequestBody.LaunchTemplateData.InstanceInitiatedShutdownBehavior;\n        reqParams.tf['disable_api_termination'] = jsonRequestBody.LaunchTemplateData.DisableApiTermination;\n\n        if (jsonRequestBody.Placement && jsonRequestBody.Placement.Tenancy) {\n            reqParams.tf['tenancy'] = jsonRequestBody.Placement.Tenancy;\n        }\n\n        if (jsonRequestBody.Monitoring) {\n            reqParams.tf['monitoring'] = {\n                'enabled': jsonRequestBody.Monitoring.Enabled\n            };\n        }\n\n        if (jsonRequestBody.LaunchTemplateData.NetworkInterfaces) {\n            reqParams.tf['network_interfaces'] = [];\n            for (var i=0; i<jsonRequestBody.LaunchTemplateData.NetworkInterfaces.length; i++) {\n                reqParams.tf['network_interfaces'].push({\n                    'device_index': jsonRequestBody.LaunchTemplateData.NetworkInterfaces[i].DeviceIndex,\n                    'description': jsonRequestBody.LaunchTemplateData.NetworkInterfaces[i].Description,\n                    'private_ip_address': jsonRequestBody.LaunchTemplateData.NetworkInterfaces[i].PrivateIpAddresses,\n                    'associate_public_ip_address': jsonRequestBody.LaunchTemplateData.NetworkInterfaces[i].AssociatePublicIpAddress\n                });\n            }\n        }\n        if (jsonRequestBody.LaunchTemplateData.BlockDeviceMappings) {\n            reqParams.tf['block_device_mappings'] = [];\n            for (var i=0; i<jsonRequestBody.LaunchTemplateData.BlockDeviceMappings.length; i++) {\n                reqParams.tf['block_device_mappings'].push({\n                    'device_index': jsonRequestBody.LaunchTemplateData.BlockDeviceMappings[i].DeviceIndex,\n                    'description': jsonRequestBody.LaunchTemplateData.BlockDeviceMappings[i].Description,\n                    'private_ip_address': jsonRequestBody.LaunchTemplateData.BlockDeviceMappings[i].PrivateIpAddresses,\n                    'associate_public_ip_address': jsonRequestBody.LaunchTemplateData.BlockDeviceMappings[i].AssociatePublicIpAddress\n                });\n            }\n        }\n        if (jsonRequestBody.LaunchTemplateData.ElasticGpuSpecifications) {\n            reqParams.tf['elastic_gpu_specifications'] = [];\n            for (var i=0; i<jsonRequestBody.LaunchTemplateData.ElasticGpuSpecifications.length; i++) {\n                reqParams.tf['elastic_gpu_specifications'].push({\n                    'type': jsonRequestBody.LaunchTemplateData.ElasticGpuSpecifications[i].Type\n                });\n            }\n        }\n\n        if (jsonRequestBody.CreditSpecification) {\n            reqParams.tf['credit_specification'] = {\n                'cpu_credits': jsonRequestBody.CreditSpecification.CpuCredits\n            }\n        }\n\n        if (jsonRequestBody.TagSpecifications) {\n            reqParams.tf['tags'] = {};\n            for (var i=0; i<jsonRequestBody.TagSpecifications.length; i++) {\n                if (jsonRequestBody.TagSpecifications[i].ResourceType == \"instance\") {\n                    for (var j=0; j<jsonRequestBody.TagSpecifications[i].Tag.length; j++) {\n                        reqParams.tf['tags'][jsonRequestBody.TagSpecifications[i].Tag[j].Key] = jsonRequestBody.TagSpecifications[i].Tag[j].Value;\n                    }\n                }\n            }\n        }\n        reqParams.tf['ebs_optimized'] = jsonRequestBody.EbsOptimized;\n\n        for (var i=0; i<jsonRequestBody.BlockDeviceMappings.length; i++) {\n            if (jsonRequestBody.BlockDeviceMappings[i].DeviceName == \"/dev/sda1\" || jsonRequestBody.BlockDeviceMappings[i].DeviceName == \"/dev/xvda\") {\n                if (jsonRequestBody.BlockDeviceMappings[i].Ebs) {\n                    reqParams.tf['root_block_device'] = {\n                        'volume_type': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeType,\n                        'volume_size': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeSize,\n                        'delete_on_termination': jsonRequestBody.BlockDeviceMappings[i].Ebs.DeleteOnTermination\n                    };\n                }\n            } else if (jsonRequestBody.BlockDeviceMappings[i].Ebs) {\n                reqParams.tf['ebs_block_device'] = {\n                    'device_name': jsonRequestBody.BlockDeviceMappings[i].DeviceName,\n                    'volume_type': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeType,\n                    'volume_size': jsonRequestBody.BlockDeviceMappings[i].Ebs.VolumeSize,\n                    'delete_on_termination': jsonRequestBody.BlockDeviceMappings[i].Ebs.DeleteOnTermination,\n                    'iops': jsonRequestBody.BlockDeviceMappings[i].Ebs.Iops,\n                    'snapshot_id': jsonRequestBody.BlockDeviceMappings[i].Ebs.SnapshotId\n                };\n            }\n        }\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateLaunchTemplate',\n                'boto3': 'create_launch_template',\n                'cli': 'create-launch-template'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::LaunchTemplate',\n            'terraformType': 'aws_launch_template',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateTags\n    // autogen:ec2:ec2.DeleteTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=updateTags\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        if (jsonRequestBody.addTags) {\n            reqParams.boto3['Tags'] = jsonRequestBody.addTags;\n            reqParams.cli['--tags'] = jsonRequestBody.addTags;\n\n            outputs.push({\n                'region': region,\n                'service': 'ec2',\n                'method': {\n                    'api': 'CreateTags',\n                    'boto3': 'create_tags',\n                    'cli': 'create-tags'\n                },\n                'options': reqParams,\n            'requestDetails': details\n            });\n        }\n        if (jsonRequestBody.removeKeys) {\n            reqParams.boto3['TagKeys'] = jsonRequestBody.removeKeys;\n            reqParams.cli['--tag-keys'] = jsonRequestBody.removeKeys;\n\n            outputs.push({\n                'region': region,\n                'service': 'ec2',\n                'method': {\n                    'api': 'DeleteTags',\n                    'boto3': 'delete_tags',\n                    'cli': 'delete-tags'\n                },\n                'options': reqParams,\n            'requestDetails': details\n            });\n        }\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateKeyPair\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=createKeyPair\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['KeyName'] = jsonRequestBody.keyName;\n        reqParams.cli['--key-name'] = jsonRequestBody.keyName;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateKeyPair',\n                'boto3': 'create_key_pair',\n                'cli': 'create-key-pair'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteKeyPair\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=deleteKeyPair\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['KeyName'] = jsonRequestBody.keyName;\n        reqParams.cli['--key-name'] = jsonRequestBody.keyName;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteKeyPair',\n                'boto3': 'delete_key_pair',\n                'cli': 'delete-key-pair'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.ImportKeyPair\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=importKeyPair\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['KeyName'] = jsonRequestBody.keyName;\n        reqParams.cli['--key-name'] = jsonRequestBody.keyName;\n        reqParams.boto3['PublicKeyMaterial'] = jsonRequestBody.publicKeyMaterial;\n        reqParams.cli['--public-key-material'] = jsonRequestBody.publicKeyMaterial;\n\n        reqParams.tf['key_name'] = jsonRequestBody.keyName;\n        reqParams.tf['public_key'] = jsonRequestBody.publicKeyMaterial;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'ImportKeyPair',\n                'boto3': 'import_key_pair',\n                'cli': 'import-key-pair'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'terraformType': 'aws_key_pair',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateNetworkInterface\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateNetworkInterface\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Description'] = jsonRequestBody.description;\n        reqParams.cli['--description'] = jsonRequestBody.description;\n        reqParams.boto3['Groups'] = jsonRequestBody.groups;\n        reqParams.cli['--groups'] = jsonRequestBody.groups;\n        reqParams.boto3['SubnetId'] = jsonRequestBody.subnetId;\n        reqParams.cli['--subnet-id'] = jsonRequestBody.subnetId;\n\n        reqParams.boto3['Description'] = jsonRequestBody.description;\n        reqParams.boto3['GroupSet'] = jsonRequestBody.groups;\n        reqParams.boto3['SubnetId'] = jsonRequestBody.subnetId;\n\n        reqParams.tf['description'] = jsonRequestBody.description;\n        reqParams.tf['security_groups'] = jsonRequestBody.groups;\n        reqParams.tf['subnet_id'] = jsonRequestBody.subnetId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateNetworkInterface',\n                'boto3': 'create_network_interface',\n                'cli': 'create-network-interface'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::NetworkInterface',\n            'terraformType': 'aws_network_interface',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeFlowLogs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=getSdkResources_FlowLog\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeFlowLogs',\n                'boto3': 'describe_flow_logs',\n                'cli': 'describe-flow-logs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteNetworkInterface\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\?call=deleteNetworkInterface\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['NetworkInterfaceId'] = jsonRequestBody.networkInterfaceId;\n        reqParams.cli['--network-interface-id'] = jsonRequestBody.networkInterfaceId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteNetworkInterface',\n                'boto3': 'delete_network_interface',\n                'cli': 'delete-network-interface'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeAddresses\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeAddresses\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAddresses',\n                'boto3': 'describe_addresses',\n                'cli': 'describe-addresses'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.AllocateAddress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.AllocateAddress\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Domain'] = jsonRequestBody.Domain;\n        reqParams.cli['--domain'] = jsonRequestBody.Domain;\n\n        reqParams.cfn['Domain'] = jsonRequestBody.Domain;\n\n        reqParams.tf['vpc'] = true;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'AllocateAddress',\n                'boto3': 'allocate_address',\n                'cli': 'allocate-address'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::EIP',\n            'terraformType': 'aws_eip',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.AllocateAddress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.AllocateAddress\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Domain'] = jsonRequestBody.Domain;\n        reqParams.cli['--domain'] = jsonRequestBody.Domain;\n\n        reqParams.cfn['Domain'] = jsonRequestBody.Domain;\n\n        reqParams.tf['vpc'] = true;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'AllocateAddress',\n                'boto3': 'allocate_address',\n                'cli': 'allocate-address'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::EIP',\n            'terraformType': 'aws_eip',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeInstances\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeInstances\\?/g)) {\n        reqParams.boto3['Filters'] = jsonRequestBody.filters;\n        reqParams.cli['--filters'] = jsonRequestBody.filters;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeInstances',\n                'boto3': 'describe_instances',\n                'cli': 'describe-instances'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeNetworkInterfaces\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeNetworkInterfaces\\?/g)) {\n        reqParams.boto3['Filters'] = jsonRequestBody.filters;\n        reqParams.cli['--filters'] = jsonRequestBody.filters;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeNetworkInterfaces',\n                'boto3': 'describe_network_interfaces',\n                'cli': 'describe-network-interfaces'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.AssociateAddress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.AssociateAddress\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['AllocationId'] = jsonRequestBody.AllocationId;\n        reqParams.cli['--allocation-id'] = jsonRequestBody.AllocationId;\n        reqParams.boto3['InstanceId'] = jsonRequestBody.InstanceId;\n        reqParams.cli['--instance-id'] = jsonRequestBody.InstanceId;\n        reqParams.boto3['AllowReassociation'] = jsonRequestBody.allowReassociation;\n        reqParams.cli['--allow-reassociation'] = jsonRequestBody.allowReassociation;\n        reqParams.boto3['PrivateIpAddress'] = jsonRequestBody.PrivateIpAddress;\n        reqParams.cli['--private-ip-address'] = jsonRequestBody.PrivateIpAddress;\n\n        reqParams.cfn['AllocationId'] = jsonRequestBody.AllocationId;\n        reqParams.cfn['InstanceId'] = jsonRequestBody.InstanceId;\n        reqParams.cfn['PrivateIpAddress'] = jsonRequestBody.PrivateIpAddress;\n\n        reqParams.tf['allocation_id'] = jsonRequestBody.AllocationId;\n        reqParams.tf['instance_id'] = jsonRequestBody.InstanceId;\n        reqParams.tf['private_ip_address'] = jsonRequestBody.PrivateIpAddress;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'AssociateAddress',\n                'boto3': 'associate_address',\n                'cli': 'associate-address'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::EIPAssociation',\n            'terraformType': 'aws_eip_association',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DisassociateAddress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DisassociateAddress\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['AssociationId'] = jsonRequestBody.AssociationId;\n        reqParams.cli['--association-id'] = jsonRequestBody.AssociationId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DisassociateAddress',\n                'boto3': 'disassociate_address',\n                'cli': 'disassociate-address'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.ReleaseAddress\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.ReleaseAddress\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['AllocationId'] = jsonRequestBody.AllocationId;\n        reqParams.cli['--allocation-id'] = jsonRequestBody.AllocationId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'ReleaseAddress',\n                'boto3': 'release_address',\n                'cli': 'release-address'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:config.DescribeConfigurationRecorders\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.config\\.AmazonConfig\\.DescribeConfigurationRecorders\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'config',\n            'method': {\n                'api': 'DescribeConfigurationRecorders',\n                'boto3': 'describe_configuration_recorders',\n                'cli': 'describe-configuration-recorders'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.AllocateHosts\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/ec2\\/ecb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.AllocateHosts\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['InstanceType'] = jsonRequestBody.instanceType;\n        reqParams.cli['--instance-type'] = jsonRequestBody.instanceType;\n        reqParams.boto3['AvailabilityZone'] = jsonRequestBody.availabilityZone;\n        reqParams.cli['--availability-zone'] = jsonRequestBody.availabilityZone;\n        reqParams.boto3['AutoPlacement'] = jsonRequestBody.autoPlacement;\n        reqParams.cli['--auto-placement'] = jsonRequestBody.autoPlacement;\n        reqParams.boto3['Quantity'] = jsonRequestBody.quantity;\n        reqParams.cli['--quantity'] = jsonRequestBody.quantity;\n        reqParams.boto3['TagSpecifications'] = jsonRequestBody.TagSpecification;\n        reqParams.cli['--tag-specifications'] = jsonRequestBody.TagSpecification;\n\n        reqParams.cfn['InstanceType'] = jsonRequestBody.instanceType;\n        reqParams.cfn['AvailabilityZone'] = jsonRequestBody.availabilityZone;\n        reqParams.cfn['AutoPlacement'] = jsonRequestBody.autoPlacement;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'AllocateHosts',\n                'boto3': 'allocate_hosts',\n                'cli': 'allocate-hosts'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        for (var i=0; i<jsonRequestBody.quantity; i++) {\n            tracked_resources.push({\n                'logicalId': getResourceName('ec2', details.requestId),\n                'region': region,\n                'service': 'ec2',\n                'type': 'AWS::EC2::Host',\n                'options': reqParams,\n                'requestDetails': details,\n                'was_blocked': blocking\n            });\n        }\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeRegions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\" && gwtRequest['method'] == \"getRegions\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeRegions',\n                'boto3': 'describe_regions',\n                'cli': 'describe-regions'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeAccountAttributes\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeAccountAttributes\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAccountAttributes',\n                'boto3': 'describe_account_attributes',\n                'cli': 'describe-account-attributes'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeDhcpOptions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"getDHCPOptions\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeDhcpOptions',\n                'boto3': 'describe_dhcp_options',\n                'cli': 'describe-dhcp-options'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpcAttribute\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\" && gwtRequest['method'] == \"getVpcAttributes\") {\n        reqParams.boto3['VpcId'] = getPipeSplitField(requestBody, 17);\n        reqParams.cli['--vpc-id'] = getPipeSplitField(requestBody, 17);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcAttribute',\n                'boto3': 'describe_vpc_attribute',\n                'cli': 'describe-vpc-attribute'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeFlowLogs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\?call=getSdkResources_FlowLog\\?/g) && jsonRequestBody.methodName == \"describeFlowLogs\" && jsonRequestBody.clientType == \"com.amazonaws.services.ec2.AmazonEC2Client\") {\n        reqParams.boto3['Filter'] = jsonRequestBody.filters;\n        reqParams.cli['--filter'] = jsonRequestBody.filters;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeFlowLogs',\n                'boto3': 'describe_flow_logs',\n                'cli': 'describe-flow-logs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeSubnets\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeSubnets\\?/g) && gwtRequest['method'] == \"getVpcs\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeSubnets',\n                'boto3': 'describe_subnets',\n                'cli': 'describe-subnets'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeRouteTables\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\" && gwtRequest['method'] == \"getRouteTables\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeRouteTables',\n                'boto3': 'describe_route_tables',\n                'cli': 'describe-route-tables'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeInternetGateways\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.elasticconsole\\.backend\\.master\\.ElasticConsoleBackendService\\.GetMergedResources\\?/g) && jsonRequestBody.operation == \"DescribeInternetGateways\" && jsonRequestBody.service == \"com.amazonaws.ec2.AmazonEC2\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeInternetGateways',\n                'boto3': 'describe_internet_gateways',\n                'cli': 'describe-internet-gateways'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeEgressOnlyInternetGateways\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.elasticconsole\\.backend\\.master\\.ElasticConsoleBackendService\\.GetMergedResources\\?/g) && jsonRequestBody.service == \"com.amazonaws.ec2.AmazonEC2\" && jsonRequestBody.operation == \"DescribeEgressOnlyInternetGateways\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeEgressOnlyInternetGateways',\n                'boto3': 'describe_egress_only_internet_gateways',\n                'cli': 'describe-egress-only-internet-gateways'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeDhcpOptions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"getDHCPOptions\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeDhcpOptions',\n                'boto3': 'describe_dhcp_options',\n                'cli': 'describe-dhcp-options'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeAddresses\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeAddresses\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAddresses',\n                'boto3': 'describe_addresses',\n                'cli': 'describe-addresses'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpcEndpoints\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeVpcEndpoints\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcEndpoints',\n                'boto3': 'describe_vpc_endpoints',\n                'cli': 'describe-vpc-endpoints'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpcEndpointServiceConfigurations\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeVpcEndpointServiceConfigurations\\?/g)) {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.MaxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.MaxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcEndpointServiceConfigurations',\n                'boto3': 'describe_vpc_endpoint_service_configurations',\n                'cli': 'describe-vpc-endpoint-service-configurations'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeNatGateways\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeNatGateways\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeNatGateways',\n                'boto3': 'describe_nat_gateways',\n                'cli': 'describe-nat-gateways'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeAccountAttributes\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DescribeAccountAttributes\\?/g)) {\n        reqParams.boto3['AttributeNames'] = jsonRequestBody.attributeNames;\n        reqParams.cli['--attribute-names'] = jsonRequestBody.attributeNames;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeAccountAttributes',\n                'boto3': 'describe_account_attributes',\n                'cli': 'describe-account-attributes'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpcPeeringConnections\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.elasticconsole\\.backend\\.master\\.ElasticConsoleBackendService\\.GetMergedResources\\?/g) && jsonRequestBody.operation == \"DescribeVpcPeeringConnections\" && jsonRequestBody.service == \"com.amazonaws.ec2.AmazonEC2\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpcPeeringConnections',\n                'boto3': 'describe_vpc_peering_connections',\n                'cli': 'describe-vpc-peering-connections'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeNetworkAcls\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"getNetworkACLs\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeNetworkAcls',\n                'boto3': 'describe_network_acls',\n                'cli': 'describe-network-acls'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeStaleSecurityGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\?call=callSdk_com\\.amazonaws\\.services\\.ec2\\.AmazonEC2Client_describeStaleSecurityGroups\\?/g) && jsonRequestBody.clientType == \"com.amazonaws.services.ec2.AmazonEC2Client\" && jsonRequestBody.methodName == \"describeStaleSecurityGroups\") {\n        reqParams.boto3['VpcId'] = jsonRequestBody.request.vpcId;\n        reqParams.cli['--vpc-id'] = jsonRequestBody.request.vpcId;\n        reqParams.boto3['MaxResults'] = jsonRequestBody.request.maxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.request.maxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeStaleSecurityGroups',\n                'boto3': 'describe_stale_security_groups',\n                'cli': 'describe-stale-security-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeCustomerGateways\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeCustomerGateways\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeCustomerGateways',\n                'boto3': 'describe_customer_gateways',\n                'cli': 'describe-customer-gateways'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpnGateways\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeVpnGateways\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpnGateways',\n                'boto3': 'describe_vpn_gateways',\n                'cli': 'describe-vpn-gateways'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeVpnConnections\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2ux\\.elasticconsole\\.generated\\.ElasticConsoleBackendGenerated\\.MergedDescribeVpnConnections\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeVpnConnections',\n                'boto3': 'describe_vpn_connections',\n                'cli': 'describe-vpn-connections'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateVpc\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"createVpc\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['CidrBlock'] = getPipeSplitField(requestBody, 18);\n        reqParams.cli['--cidr-block'] = getPipeSplitField(requestBody, 18);\n        reqParams.boto3['InstanceTenancy'] = getPipeSplitField(requestBody, 19);\n        reqParams.cli['--instance-tenancy'] = getPipeSplitField(requestBody, 19);\n\n        reqParams.cfn['CidrBlock'] = getPipeSplitField(requestBody, 18);\n        reqParams.cfn['InstanceTenancy'] = getPipeSplitField(requestBody, 19);\n\n        reqParams.tf['cidr_block'] = getPipeSplitField(requestBody, 18);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateVpc',\n                'boto3': 'create_vpc',\n                'cli': 'create-vpc'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::VPC',\n            'terraformType': 'aws_vpc',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:logs.DescribeLogGroups\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.logs\\.v20140328\\.Logs_20140328\\.DescribeLogGroups\\?/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'logs',\n            'method': {\n                'api': 'DescribeLogGroups',\n                'boto3': 'describe_log_groups',\n                'cli': 'describe-log-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:iam.ListRoles\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazon\\.webservices\\.auth\\.identity\\.v20100508\\.AWSIdentityManagementV20100508\\.ListRoles\\?/g)) {\n        reqParams.boto3['MaxItems'] = jsonRequestBody.MaxItems;\n        reqParams.cli['--max-items'] = jsonRequestBody.MaxItems;\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListRoles',\n                'boto3': 'list_roles',\n                'cli': 'list-roles'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateFlowLogs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateFlowLogs\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['ResourceIds'] = jsonRequestBody.ResourceIds;\n        reqParams.cli['--resource-ids'] = jsonRequestBody.ResourceIds;\n        reqParams.boto3['TrafficType'] = jsonRequestBody.TrafficType;\n        reqParams.cli['--traffic-type'] = jsonRequestBody.TrafficType;\n        reqParams.boto3['ResourceType'] = jsonRequestBody.ResourceType;\n        reqParams.cli['--resource-type'] = jsonRequestBody.ResourceType;\n        reqParams.boto3['LogDestinationType'] = jsonRequestBody.LogDestinationType;\n        reqParams.cli['--log-destination-type'] = jsonRequestBody.LogDestinationType;\n        reqParams.boto3['LogDestination'] = jsonRequestBody.LogDestination;\n        reqParams.cli['--log-destination'] = jsonRequestBody.LogDestination;\n        reqParams.boto3['DeliverLogsPermissionArn'] = jsonRequestBody.DeliverLogsPermissionArn;\n        reqParams.cli['--deliver-logs-permission-arn'] = jsonRequestBody.DeliverLogsPermissionArn;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateFlowLogs',\n                'boto3': 'create_flow_logs',\n                'cli': 'create-flow-logs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        for (var resource_id in jsonRequestBody.ResourceIds) {\n            reqParams.cfn['ResourceId'] = resource_id;\n            reqParams.cfn['TrafficType'] = jsonRequestBody.TrafficType;\n            reqParams.cfn['ResourceType'] = jsonRequestBody.ResourceType;\n            reqParams.cfn['LogDestinationType'] = jsonRequestBody.LogDestinationType;\n            reqParams.cfn['LogDestination'] = jsonRequestBody.LogDestination;\n            reqParams.cfn['DeliverLogsPermissionArn'] = jsonRequestBody.DeliverLogsPermissionArn;\n\n            if (jsonRequestBody.ResourceType == \"VPC\") {\n                reqParams.tf['vpc_id'] = resource_id;\n            } else if (jsonRequestBody.ResourceType == \"Subnet\") {\n                reqParams.tf['subnet_id'] = resource_id;\n            } else if (jsonRequestBody.ResourceType == \"NetworkInterfaces\") {\n                reqParams.tf['eni_id'] = resource_id;\n            }\n            reqParams.tf['traffic_type'] = jsonRequestBody.TrafficType;\n            reqParams.tf['log_destination_type'] = jsonRequestBody.LogDestinationType;\n            reqParams.tf['log_destination'] = jsonRequestBody.LogDestination;\n            reqParams.tf['iam_role_arn'] = jsonRequestBody.DeliverLogsPermissionArn;\n\n            tracked_resources.push({\n                'logicalId': getResourceName('ec2', details.requestId),\n                'region': region,\n                'service': 'ec2',\n                'type': 'AWS::EC2::FlowLog',\n                'terraformType': 'aws_flow_log',\n                'options': reqParams,\n                'requestDetails': details,\n                'was_blocked': blocking\n            });\n        }\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteFlowLogs\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\?call=callSdk_com\\.amazonaws\\.services\\.ec2\\.AmazonEC2Client_deleteFlowLogs\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['FlowLogIds'] = jsonRequestBody.request.flowLogIds;\n        reqParams.cli['--flow-log-ids'] = jsonRequestBody.request.flowLogIds;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteFlowLogs',\n                'boto3': 'delete_flow_logs',\n                'cli': 'delete-flow-logs'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DisassociateVpcCidrBlock\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DisassociateVpcCidrBlock\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['AssociationId'] = jsonRequestBody.associationId;\n        reqParams.cli['--association-id'] = jsonRequestBody.associationId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DisassociateVpcCidrBlock',\n                'boto3': 'disassociate_vpc_cidr_block',\n                'cli': 'disassociate-vpc-cidr-block'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeInstances\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"modifyDHCPOptions\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\" && gwtRequest['method'] == \"getInstancesForVPC\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeInstances',\n                'boto3': 'describe_instances',\n                'cli': 'describe-instances'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteVpc\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"deleteVpc\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = getPipeSplitField(requestBody, 18);\n        reqParams.cli['--vpc-id'] = getPipeSplitField(requestBody, 18);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteVpc',\n                'boto3': 'delete_vpc',\n                'cli': 'delete-vpc'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateRouteTable\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"createRouteTable\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = getPipeSplitField(requestBody, 17);\n        reqParams.cli['--vpc-id'] = getPipeSplitField(requestBody, 17);\n\n        reqParams.cfn['VpcId'] = getPipeSplitField(requestBody, 17);\n\n        reqParams.tf['vpc_id'] = getPipeSplitField(requestBody, 17);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateRouteTable',\n                'boto3': 'create_route_table',\n                'cli': 'create-route-table'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::RouteTable',\n            'terraformType': 'aws_route_table',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n\n    // autogen:ec2:ec2.CreateRouteTable\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateRouteTable\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = jsonRequestBody.vpcId;\n        reqParams.cli['--vpc-id'] = jsonRequestBody.vpcId;\n\n        reqParams.cfn['VpcId'] = jsonRequestBody.vpcId;\n\n        reqParams.tf['vpc_id'] = jsonRequestBody.vpcId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateRouteTable',\n                'boto3': 'create_route_table',\n                'cli': 'create-route-table'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::RouteTable',\n            'terraformType': 'aws_route_table',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteRouteTable\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteRouteTable\\?/g)) {\n        reqParams.boto3['RouteTableId'] = jsonRequestBody.routeTableId;\n        reqParams.cli['--route-table-id'] = jsonRequestBody.routeTableId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteRouteTable',\n                'boto3': 'delete_route_table',\n                'cli': 'delete-route-table'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DescribeRouteTables\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"getRouteTables\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DescribeRouteTables',\n                'boto3': 'describe_route_tables',\n                'cli': 'describe-route-tables'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteEgressOnlyInternetGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteEgressOnlyInternetGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['EgressOnlyInternetGatewayId'] = jsonRequestBody.EgressOnlyInternetGatewayId;\n        reqParams.cli['--egress-only-internet-gateway-id'] = jsonRequestBody.EgressOnlyInternetGatewayId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteEgressOnlyInternetGateway',\n                'boto3': 'delete_egress_only_internet_gateway',\n                'cli': 'delete-egress-only-internet-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateEgressOnlyInternetGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateEgressOnlyInternetGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = jsonRequestBody.VpcId;\n        reqParams.cli['--vpc-id'] = jsonRequestBody.VpcId;\n\n        reqParams.cfn['VpcId'] = jsonRequestBody.VpcId;\n\n        reqParams.tf['vpc_id'] = jsonRequestBody.VpcId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateEgressOnlyInternetGateway',\n                'boto3': 'create_egress_only_internet_gateway',\n                'cli': 'create-egress-only-internet-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::EgressOnlyInternetGateway',\n            'terraformType': 'aws_egress_only_internet_gateway',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteInternetGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteInternetGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:internet-gateway/\" + jsonRequestBody.internetGatewayId\n        ];\n\n        reqParams.boto3['InternetGatewayId'] = jsonRequestBody.internetGatewayId;\n        reqParams.cli['--internet-gateway-id'] = jsonRequestBody.internetGatewayId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteInternetGateway',\n                'boto3': 'delete_internet_gateway',\n                'cli': 'delete-internet-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateTags\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\?call=createTags\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Resources'] = jsonRequestBody.resources;\n        reqParams.cli['--resources'] = jsonRequestBody.resources;\n        reqParams.boto3['Tags'] = jsonRequestBody.tags;\n        reqParams.cli['--tags'] = jsonRequestBody.tags;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateTags',\n                'boto3': 'create_tags',\n                'cli': 'create-tags'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateInternetGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateInternetGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = jsonRequestBody.VpcId;\n        reqParams.cli['--vpc-id'] = jsonRequestBody.VpcId;\n\n        reqParams.cfn['VpcId'] = jsonRequestBody.VpcId;\n\n        reqParams.tf['vpc_id'] = jsonRequestBody.VpcId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateInternetGateway',\n                'boto3': 'create_internet_gateway',\n                'cli': 'create-internet-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::InternetGateway',\n            'terraformType': 'aws_internet_gateway',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteRouteTable\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"deleteRouteTable\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:route-table/\" + getPipeSplitField(requestBody, 17)\n        ];\n\n        reqParams.boto3['RouteTableId'] = getPipeSplitField(requestBody, 17);\n        reqParams.cli['--route-table-id'] = getPipeSplitField(requestBody, 17);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteRouteTable',\n                'boto3': 'delete_route_table',\n                'cli': 'delete-route-table'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteDhcpOptions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\?call=callSdk_com\\.amazonaws\\.services\\.ec2\\.AmazonEC2Client_deleteDhcpOptions\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:dhcp-options/\" + jsonRequestBody.request.dhcpOptionsId\n        ];\n\n        reqParams.boto3['DhcpOptionsId'] = jsonRequestBody.request.dhcpOptionsId;\n        reqParams.cli['--dhcp-options-id'] = jsonRequestBody.request.dhcpOptionsId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteDhcpOptions',\n                'boto3': 'delete_dhcp_options',\n                'cli': 'delete-dhcp-options'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateNatGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateNatGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['SubnetId'] = jsonRequestBody.SubnetId;\n        reqParams.cli['--subnet-id'] = jsonRequestBody.SubnetId;\n        reqParams.boto3['AllocationId'] = jsonRequestBody.AllocationId;\n        reqParams.cli['--allocation-id'] = jsonRequestBody.AllocationId;\n\n        reqParams.cfn['SubnetId'] = jsonRequestBody.SubnetId;\n        reqParams.cfn['AllocationId'] = jsonRequestBody.AllocationId;\n\n        reqParams.tf['subnet_id'] = jsonRequestBody.SubnetId;\n        reqParams.tf['allocation_id'] = jsonRequestBody.AllocationId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateNatGateway',\n                'boto3': 'create_nat_gateway',\n                'cli': 'create-nat-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::NatGateway',\n            'terraformType': 'aws_nat_gateway',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteNatGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteNatGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['NatGatewayId'] = jsonRequestBody.NatGatewayId;\n        reqParams.cli['--nat-gateway-id'] = jsonRequestBody.NatGatewayId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteNatGateway',\n                'boto3': 'delete_nat_gateway',\n                'cli': 'delete-nat-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateNetworkAcl\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"createNetworkACL\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpcId'] = getPipeSplitField(requestBody, 17);\n        reqParams.cli['--vpc-id'] = getPipeSplitField(requestBody, 17);\n\n        reqParams.cfn['VpcId'] = getPipeSplitField(requestBody, 17);\n\n        reqParams.tf['vpc_id'] = getPipeSplitField(requestBody, 17);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateNetworkAcl',\n                'boto3': 'create_network_acl',\n                'cli': 'create-network-acl'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::NetworkAcl',\n            'terraformType': 'aws_network_acl',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteNetworkAcl\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vpc\\/VpcConsoleService$/g) && gwtRequest['method'] == \"deleteNetworkACL\" && gwtRequest['service'] == \"amazonaws.console.vpc.client.VpcConsoleService\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:network-acl/\" + getPipeSplitField(requestBody, 17)\n        ];\n\n        reqParams.boto3['NetworkAclId'] = getPipeSplitField(requestBody, 17);\n        reqParams.cli['--network-acl-id'] = getPipeSplitField(requestBody, 17);\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteNetworkAcl',\n                'boto3': 'delete_network_acl',\n                'cli': 'delete-network-acl'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateCustomerGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateCustomerGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['PublicIp'] = jsonRequestBody.PublicIp;\n        reqParams.cli['--public-ip'] = jsonRequestBody.PublicIp;\n        reqParams.boto3['Type'] = jsonRequestBody.Type;\n        reqParams.cli['--type'] = jsonRequestBody.Type;\n\n        reqParams.cfn['IpAddress'] = jsonRequestBody.PublicIp;\n        reqParams.cfn['Type'] = jsonRequestBody.Type;\n\n        reqParams.tf['ip_address'] = jsonRequestBody.PublicIp;\n        reqParams.tf['type'] = jsonRequestBody.Type;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateCustomerGateway',\n                'boto3': 'create_customer_gateway',\n                'cli': 'create-customer-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::CustomerGateway',\n            'terraformType': 'aws_customer_gateway',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteCustomerGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteCustomerGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:ec2:*:*:customer-gateway/\" + jsonRequestBody.CustomerGatewayId\n        ];\n\n        reqParams.boto3['CustomerGatewayId'] = jsonRequestBody.CustomerGatewayId;\n        reqParams.cli['--customer-gateway-id'] = jsonRequestBody.CustomerGatewayId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteCustomerGateway',\n                'boto3': 'delete_customer_gateway',\n                'cli': 'delete-customer-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.CreateVpnGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.CreateVpnGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['Type'] = jsonRequestBody.Type;\n        reqParams.cli['--type'] = jsonRequestBody.Type;\n\n        reqParams.cfn['Type'] = jsonRequestBody.Type;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'CreateVpnGateway',\n                'boto3': 'create_vpn_gateway',\n                'cli': 'create-vpn-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::EC2::VPNGateway',\n            'terraformType': 'aws_vpn_gateway',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:ec2:ec2.DeleteVpnGateway\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/vpc\\/vcb\\/elastic\\/\\?call=com\\.amazonaws\\.ec2\\.AmazonEC2\\.DeleteVpnGateway\\?/g)) {\n        reqParams.iam['Resource'] = [\n            \"*\"\n        ];\n\n        reqParams.boto3['VpnGatewayId'] = jsonRequestBody.VpnGatewayId;\n        reqParams.cli['--vpn-gateway-id'] = jsonRequestBody.VpnGatewayId;\n\n        outputs.push({\n            'region': region,\n            'service': 'ec2',\n            'method': {\n                'api': 'DeleteVpnGateway',\n                'boto3': 'delete_vpn_gateway',\n                'cli': 'delete-vpn-gateway'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:sqs:sqs.ListQueues\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/sqs\\/sqsconsole\\/AmazonSQS$/g) && gwtRequest['service'] == \"com.amazonaws.console.sqs.shared.services.AmazonSQSService\" && gwtRequest['method'] == \"listQueues\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'sqs',\n            'method': {\n                'api': 'ListQueues',\n                'boto3': 'list_queues',\n                'cli': 'list-queues'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:sqs:kms.ListKeys\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/sqs\\/sqsconsole\\/AmazonKMS$/g) && gwtRequest['method'] == \"listKeys\" && gwtRequest['service'] == \"com.amazonaws.console.sqs.shared.services.AmazonKMSService\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'kms',\n            'method': {\n                'api': 'ListKeys',\n                'boto3': 'list_keys',\n                'cli': 'list-keys'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:sqs:sqs.DeleteQueue\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/sqs\\/sqsconsole\\/AmazonSQS$/g) && gwtRequest['service'] == \"com.amazonaws.console.sqs.shared.services.AmazonSQSService\" && gwtRequest['method'] == \"deleteQueue\") {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:sqs:*:*:\" + getPipeSplitField(requestBody, 10).split(\"/\").pop()\n        ];\n\n        reqParams.boto3['QueueUrl'] = getPipeSplitField(requestBody, 10);\n        reqParams.cli['--queue-url'] = getPipeSplitField(requestBody, 10);\n\n        outputs.push({\n            'region': region,\n            'service': 'sqs',\n            'method': {\n                'api': 'DeleteQueue',\n                'boto3': 'delete_queue',\n                'cli': 'delete-queue'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListGroups\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListGroups',\n                'boto3': 'list_groups',\n                'cli': 'list-groups'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListUsers\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListUsers',\n                'boto3': 'list_users',\n                'cli': 'list-users'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListPolicies\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/policies$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListPolicies',\n                'boto3': 'list_policies',\n                'cli': 'list-policies'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.CreateUser\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:user/\" + jsonRequestBody.name\n        ];\n\n        reqParams.boto3['UserName'] = jsonRequestBody.name;\n        reqParams.cli['--user-name'] = jsonRequestBody.name;\n        reqParams.boto3['Path'] = '/'; // path can't be set in console\n        reqParams.cli['--path'] = '/';\n\n        reqParams.cfn['UserName'] = jsonRequestBody.name;\n        reqParams.cfn['Path'] = '/';\n\n        reqParams.tf['name'] = jsonRequestBody.name;\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'CreateUser',\n                'boto3': 'create_user',\n                'cli': 'create-user'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::IAM::User',\n            'terraformType': 'aws_iam_user',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:iam:iam.AttachUserPolicy\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/.+\\/attachments$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:user/\" + /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1]\n        ];\n\n        reqParams.boto3['PolicyArn'] = jsonRequestBody.policyArn;\n        reqParams.cli['--policy-arn'] = jsonRequestBody.policyArn;\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'AttachUserPolicy',\n                'boto3': 'attach_user_policy',\n                'cli': 'attach-user-policy'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:iam:iam.AddUserToGroup\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/.+\\/members$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:group/\" + /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/(.+)\\//g.exec(details.url)[1]\n        ];\n\n        reqParams.boto3['UserName'] = jsonRequestBody.userName;\n        reqParams.cli['--user-name'] = jsonRequestBody.userName;\n        reqParams.boto3['GroupName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--group-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/(.+)\\//g.exec(details.url)[1];\n\n        reqParams.cfn['Users'] = [jsonRequestBody.userName];\n        reqParams.cfn['GroupName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/(.+)\\//g.exec(details.url)[1];\n\n        reqParams.tf['user'] = jsonRequestBody.userName;\n        reqParams.tf['groups'] = [\n            /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/groups\\/(.+)\\//g.exec(details.url)[1]\n        ];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'AddUserToGroup',\n                'boto3': 'add_user_to_group',\n                'cli': 'add-user-to-group'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'type': 'AWS::IAM::UserToGroupAddition',\n            'terraformType': 'aws_iam_user_group_membership',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListGroupsForUser\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/.+\\/groups$/g)) {\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListGroupsForUser',\n                'boto3': 'list_groups_for_user',\n                'cli': 'list-groups-for-user'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListAccessKeys\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/.+\\/accessKeys$/g)) {\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListAccessKeys',\n                'boto3': 'list_access_keys',\n                'cli': 'list-access-keys'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.GetLoginProfile\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/.+\\/loginProfile$/g)) {\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'GetLoginProfile',\n                'boto3': 'get_login_profile',\n                'cli': 'get-login-profile'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.CreateLoginProfile\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/.+\\/loginProfile$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:user/\" + /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1]\n        ];\n\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.boto3['Password'] = jsonRequestBody.password;\n        reqParams.cli['--password'] = jsonRequestBody.password;\n        reqParams.boto3['PasswordResetRequired'] = jsonRequestBody.resetRequired;\n        reqParams.cli['--password-reset-required'] = jsonRequestBody.resetRequired;\n\n        reqParams.tf['name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1];\n        reqParams.tf['pgp_key'] = \"REPLACEME\"\n        reqParams.tf['password_reset_required'] = jsonRequestBody.resetRequired;\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'CreateLoginProfile',\n                'boto3': 'create_login_profile',\n                'cli': 'create-login-profile'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('ec2', details.requestId),\n            'region': region,\n            'service': 'ec2',\n            'terraformType': 'aws_iam_user_login_profile',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:iam:iam.ListAccountAliases\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/aliases$/g)) {\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'ListAccountAliases',\n                'boto3': 'list_account_aliases',\n                'cli': 'list-account-aliases'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.GetUser\n    if (details.method == \"GET\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/[^/]+$/g)) {\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)$/g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)$/g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'GetUser',\n                'boto3': 'get_user',\n                'cli': 'get-user'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:iam:iam.DeleteUser\n    if (details.method == \"DELETE\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/[^/]+$/g)) {\n        reqParams.iam['Resource'] = [\n            \"arn:aws:iam::*:user/\" + /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)\\//g.exec(details.url)[1]\n        ];\n\n        reqParams.boto3['UserName'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)$/g.exec(details.url)[1];\n        reqParams.cli['--user-name'] = /.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/iam\\/api\\/users\\/(.+)$/g.exec(details.url)[1];\n\n        outputs.push({\n            'region': region,\n            'service': 'iam',\n            'method': {\n                'api': 'DeleteUser',\n                'boto3': 'delete_user',\n                'cli': 'delete-user'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetAccount\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.operation == \"getAccount\" && jsonRequestBody.method == \"GET\" && jsonRequestBody.path == \"/account\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetAccount',\n                'boto3': 'get_account',\n                'cli': 'get-account'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetRestApis\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path == \"/restapis\") {\n        reqParams.boto3['limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetRestApis',\n                'boto3': 'get_rest_apis',\n                'cli': 'get-rest-apis'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetRestApi\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+$/g)) {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetRestApi',\n                'boto3': 'get_rest_api',\n                'cli': 'get-rest-api'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetAuthorizers\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/authorizers$/g) && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['Limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n        reqParams.boto3['RestApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetAuthorizers',\n                'boto3': 'get_authorizers',\n                'cli': 'get-authorizers'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetRequestValidators\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/requestvalidators$/g) && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetRequestValidators',\n                'boto3': 'get_request_validators',\n                'cli': 'get-request-validators'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetDocumentationParts\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/documentation\\/parts$/g)) {\n        reqParams.boto3['limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetDocumentationParts',\n                'boto3': 'get_documentation_parts',\n                'cli': 'get-documentation-parts'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetResources\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources$/g) && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['embed'] = jsonRequestBody.params.embed;\n        reqParams.cli['--embed'] = jsonRequestBody.params.embed;\n        reqParams.boto3['limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetResources',\n                'boto3': 'get_resources',\n                'cli': 'get-resources'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetStages\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/stages$/g)) {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetStages',\n                'boto3': 'get_stages',\n                'cli': 'get-stages'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetUsagePlans\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path == \"/usageplans\" && jsonRequestBody.method == \"GET\") {\n        reqParams.boto3['Limit'] = jsonRequestBody.params.limit;\n        reqParams.cli['--limit'] = jsonRequestBody.params.limit;\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetUsagePlans',\n                'boto3': 'get_usage_plans',\n                'cli': 'get-usage-plans'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.PutMethod\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources\\/[a-zA-Z0-9]+\\/methods\\/[A-Z]+$/g) && jsonRequestBody.method == \"PUT\") {\n        reqParams.boto3['authorizationType'] = jsonRequestBody.contentString.authorizationType;\n        reqParams.cli['--authorization-type'] = jsonRequestBody.contentString.authorizationType;\n        reqParams.boto3['requestParameters'] = jsonRequestBody.contentString.requestParameters;\n        reqParams.cli['--request-parameters'] = jsonRequestBody.contentString.requestParameters;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['resourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--resource-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['httpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.cli['--http-method'] = jsonRequestBody.path.split(\"/\")[6];\n\n        reqParams.cfn['AuthorizationType'] = jsonRequestBody.contentString.authorizationType;\n        reqParams.cfn['RequestParameters'] = jsonRequestBody.contentString.requestParameters;\n        reqParams.cfn['RestApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cfn['ResourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cfn['HttpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n\n        reqParams.tf['authorization'] = jsonRequestBody.contentString.authorizationType;\n        reqParams.tf['request_parameters'] = jsonRequestBody.contentString.requestParameters;\n        reqParams.tf['rest_api_id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.tf['resource_id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.tf['http_method'] = jsonRequestBody.path.split(\"/\")[6];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'PutMethod',\n                'boto3': 'put_method',\n                'cli': 'put-method'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'type': 'AWS::ApiGateway::Method',\n            'terraformType': 'aws_api_gateway_method',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.PutMethodResponse\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources\\/[a-zA-Z0-9]+\\/methods\\/[A-Z]+\\/responses\\/[0-9]+$/g) && jsonRequestBody.method == \"PUT\") {\n        reqParams.boto3['responseModels'] = jsonRequestBody.contentString.responseModels;\n        reqParams.cli['--response-models'] = jsonRequestBody.contentString.responseModels;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['resourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--resource-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['httpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.cli['--http-method'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.boto3['statusCode'] = jsonRequestBody.path.split(\"/\")[8];\n        reqParams.cli['--status-code'] = jsonRequestBody.path.split(\"/\")[8];\n\n        reqParams.tf['response_models'] = jsonRequestBody.contentString.responseModels;\n        reqParams.tf['rest_api_id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.tf['resource_id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.tf['http_method'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.tf['status_code'] = jsonRequestBody.path.split(\"/\")[8];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'PutMethodResponse',\n                'boto3': 'put_method_response',\n                'cli': 'put-method-response'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'terraformType': 'aws_api_gateway_method_response',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:lambda.ListFunctions\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/lambda$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path == \"/2015-03-31/functions/\") {\n\n        outputs.push({\n            'region': region,\n            'service': 'lambda',\n            'method': {\n                'api': 'ListFunctions',\n                'boto3': 'list_functions',\n                'cli': 'list-functions'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.PutIntegration\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"PUT\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources\\/[a-zA-Z0-9]+\\/methods\\/[A-Z]+\\/integration$/g)) {\n        reqParams.boto3['type'] = jsonRequestBody.contentString.type;\n        reqParams.cli['--type'] = jsonRequestBody.contentString.type;\n        reqParams.boto3['requestTemplates'] = jsonRequestBody.contentString.requestTemplates;\n        reqParams.cli['--request-templates'] = jsonRequestBody.contentString.requestTemplates;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['resourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--resource-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['httpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.cli['--http-method'] = jsonRequestBody.path.split(\"/\")[6];\n\n        reqParams.tf['type'] = jsonRequestBody.contentString.type;\n        reqParams.tf['request_templates'] = jsonRequestBody.contentString.requestTemplates;\n        reqParams.tf['rest_api_id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.tf['resource_id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.tf['http_method'] = jsonRequestBody.path.split(\"/\")[6];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'PutIntegration',\n                'boto3': 'put_integration',\n                'cli': 'put-integration'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'terraformType': 'aws_api_gateway_integration',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.PutIntegrationResponse\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"PUT\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources\\/[a-zA-Z0-9]+\\/methods\\/[A-Z]+\\/integration\\/responses\\/[0-9]+$/g)) {\n        reqParams.boto3['responseTemplates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.cli['--response-templates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['resourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--resource-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['httpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.cli['--http-method'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.boto3['statusCode'] = jsonRequestBody.path.split(\"/\")[9];\n        reqParams.cli['--status-code'] = jsonRequestBody.path.split(\"/\")[9];\n\n        reqParams.tf['response_templates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.tf['rest_api_id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.tf['resource_id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.tf['http_method'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.tf['status_code'] = jsonRequestBody.path.split(\"/\")[9];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'PutIntegrationResponse',\n                'boto3': 'put_integration_response',\n                'cli': 'put-integration-response'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'terraformType': 'aws_api_gateway_integration_response',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.CreateDocumentationPart\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/documentation\\/parts$/g) && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['properties'] = jsonRequestBody.contentString.properties;\n        reqParams.cli['--properties'] = jsonRequestBody.contentString.properties;\n        reqParams.boto3['location'] = jsonRequestBody.contentString.location;\n        reqParams.cli['--location'] = jsonRequestBody.contentString.location;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        reqParams.cfn['Properties'] = jsonRequestBody.contentString.properties;\n        reqParams.cfn['Location'] = jsonRequestBody.contentString.location;\n        reqParams.cfn['RestApiId'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'CreateDocumentationPart',\n                'boto3': 'create_documentation_part',\n                'cli': 'create-documentation-part'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'type': 'AWS::ApiGateway::DocumentationPart',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.DeleteDocumentationPart\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"DELETE\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/documentation\\/parts\\/[a-zA-Z0-9]+$/g)) {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['documentationPartId'] = jsonRequestBody.path.split(\"/\")[5];\n        reqParams.cli['--documentation-part-id'] = jsonRequestBody.path.split(\"/\")[5];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'DeleteDocumentationPart',\n                'boto3': 'delete_documentation_part',\n                'cli': 'delete-documentation-part'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.DeleteMethod\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"DELETE\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/resources\\/[a-zA-Z0-9]+\\/methods\\/[A-Z]+$/g)) {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['resourceId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--resource-id'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.boto3['httpMethod'] = jsonRequestBody.path.split(\"/\")[6];\n        reqParams.cli['--http-method'] = jsonRequestBody.path.split(\"/\")[6];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'DeleteMethod',\n                'boto3': 'delete_method',\n                'cli': 'delete-method'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:cognito-idp.ListUserPools\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/cognito-idp$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path == \"/\" && jsonRequestBody.headers.X-Amz-Target == \"AWSCognitoIdentityProviderService.ListUserPools\") {\n        reqParams.boto3['MaxResults'] = jsonRequestBody.contentString.MaxResults;\n        reqParams.cli['--max-items'] = jsonRequestBody.contentString.MaxResults;\n\n        outputs.push({\n            'region': region,\n            'service': 'cognito-idp',\n            'method': {\n                'api': 'ListUserPools',\n                'boto3': 'list_user_pools',\n                'cli': 'list-user-pools'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.CreateAuthorizer\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/authorizers$/g)) {\n        reqParams.boto3['type'] = jsonRequestBody.contentString.type;\n        reqParams.cli['--type'] = jsonRequestBody.contentString.type;\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['authorizerUri'] = jsonRequestBody.contentString.authorizerUri;\n        reqParams.cli['--authorizer-uri'] = jsonRequestBody.contentString.authorizerUri;\n        reqParams.boto3['authorizerCredentials'] = jsonRequestBody.contentString.authorizerCredentials;\n        reqParams.cli['--authorizer-credentials'] = jsonRequestBody.contentString.authorizerCredentials;\n        reqParams.boto3['identityValidationExpression'] = jsonRequestBody.contentString.identityValidationExpression;\n        reqParams.cli['--identity-validation-expression'] = jsonRequestBody.contentString.identityValidationExpression;\n        reqParams.boto3['authorizerResultTtlInSeconds'] = jsonRequestBody.contentString.authorizerResultTtlInSeconds;\n        reqParams.cli['--authorizer-result-ttl-in-seconds'] = jsonRequestBody.contentString.authorizerResultTtlInSeconds;\n        reqParams.boto3['identitySource'] = jsonRequestBody.contentString.identitySource;\n        reqParams.cli['--identity-source'] = jsonRequestBody.contentString.identitySource;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        reqParams.cfn['ApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cfn['AuthorizerCredentialsArn'] = jsonRequestBody.contentString.authorizerCredentials;\n        reqParams.cfn['AuthorizerResultTtlInSeconds'] = jsonRequestBody.contentString.authorizerResultTtlInSeconds;\n        reqParams.cfn['AuthorizerType'] = jsonRequestBody.contentString.type;\n        reqParams.cfn['AuthorizerUri'] = jsonRequestBody.contentString.authorizerUri;\n        reqParams.cfn['IdentitySource'] = jsonRequestBody.contentString.identitySource;\n        reqParams.cfn['IdentityValidationExpression'] = jsonRequestBody.contentString.identityValidationExpression;\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'CreateAuthorizer',\n                'boto3': 'create_authorizer',\n                'cli': 'create-authorizer'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            //'type': 'AWS::ApiGateway::Authorizer',\n            'type': 'AWS::ApiGatewayV2::Authorizer',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.PutGatewayResponse\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"PUT\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/gatewayresponses\\/[a-zA-Z0-9_]+$/g)) {\n        reqParams.boto3['statusCode'] = jsonRequestBody.contentString.statusCode;\n        reqParams.cli['--status-code'] = jsonRequestBody.contentString.statusCode;\n        reqParams.boto3['responseParameters'] = jsonRequestBody.contentString.responseParameters;\n        reqParams.cli['--response-parameters'] = jsonRequestBody.contentString.responseParameters;\n        reqParams.boto3['responseTemplates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.cli['--response-templates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['responseType'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--response-type'] = jsonRequestBody.path.split(\"/\")[4];\n\n        reqParams.cfn['StatusCode'] = jsonRequestBody.contentString.statusCode;\n        reqParams.cfn['ResponseParameters'] = jsonRequestBody.contentString.responseParameters;\n        reqParams.cfn['ResponseTemplates'] = jsonRequestBody.contentString.responseTemplates;\n        reqParams.cfn['RestApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cfn['ResponseType'] = jsonRequestBody.path.split(\"/\")[4];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'PutGatewayResponse',\n                'boto3': 'put_gateway_response',\n                'cli': 'put-gateway-response'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'type': 'AWS::ApiGateway::GatewayResponse',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.CreateModel\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/models$/g)) {\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['contentType'] = jsonRequestBody.contentString.contentType;\n        reqParams.cli['--content-type'] = jsonRequestBody.contentString.contentType;\n        reqParams.boto3['schema'] = jsonRequestBody.contentString.schema;\n        reqParams.cli['--schema'] = jsonRequestBody.contentString.schema;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['ContentType'] = jsonRequestBody.contentString.contentType;\n        reqParams.cfn['Schema'] = jsonRequestBody.contentString.schema;\n        reqParams.cfn['ApiId'] = jsonRequestBody.path.split(\"/\")[2];\n\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['content_type'] = jsonRequestBody.contentString.contentType;\n        reqParams.tf['schema'] = jsonRequestBody.contentString.schema;\n        reqParams.tf['rest_api_id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'CreateModel',\n                'boto3': 'create_model',\n                'cli': 'create-model'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            //'type': 'AWS::ApiGateway::Model',\n            'type': 'AWS::ApiGatewayV2::Model',\n            'terraformType': 'aws_api_gateway_model',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.DeleteModel\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"DELETE\" && jsonRequestBody.path.match(/^\\/restapis\\/[a-zA-Z0-9]+\\/models\\/[a-zA-Z0-9]+$/g)) {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['modelName'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--model-name'] = jsonRequestBody.path.split(\"/\")[4];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'DeleteModel',\n                'boto3': 'delete_model',\n                'cli': 'delete-model'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:cloudwatch.GetMetricStatistics\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/monitoring$/g) && jsonRequestBody.params.Action == \"GetMetricStatistics\") {\n        reqParams.boto3['Namespace'] = jsonRequestBody.params.Namespace;\n        reqParams.cli['--namespace'] = jsonRequestBody.params.Namespace;\n        reqParams.boto3['StartTime'] = jsonRequestBody.params.StartTime;\n        reqParams.cli['--start-time'] = jsonRequestBody.params.StartTime;\n        reqParams.boto3['EndTime'] = jsonRequestBody.params.EndTime;\n        reqParams.cli['--end-time'] = jsonRequestBody.params.EndTime;\n        reqParams.boto3['Period'] = jsonRequestBody.params.Period;\n        reqParams.cli['--period'] = jsonRequestBody.params.Period;\n        reqParams.boto3['Unit'] = jsonRequestBody.params.Unit;\n        reqParams.cli['--unit'] = jsonRequestBody.params.Unit;\n        reqParams.boto3['MetricName'] = jsonRequestBody.params.MetricName;\n        reqParams.cli['--metric-name'] = jsonRequestBody.params.MetricName;\n\n        outputs.push({\n            'region': region,\n            'service': 'cloudwatch',\n            'method': {\n                'api': 'GetMetricStatistics',\n                'boto3': 'get_metric_statistics',\n                'cli': 'get-metric-statistics'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.CreateUsagePlan\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path == \"/usageplans\") {\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['description'] = jsonRequestBody.contentString.description;\n        reqParams.cli['--description'] = jsonRequestBody.contentString.description;\n        reqParams.boto3['throttle'] = jsonRequestBody.contentString.throttle;\n        reqParams.cli['--throttle'] = jsonRequestBody.contentString.throttle;\n        reqParams.boto3['quota'] = jsonRequestBody.contentString.quota;\n        reqParams.cli['--quota'] = jsonRequestBody.contentString.quota;\n\n        reqParams.cfn['UsagePlanName'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['Description'] = jsonRequestBody.contentString.description;\n        reqParams.cfn['Throttle'] = {\n            'RateLimit': jsonRequestBody.contentString.throttle.rateLimit,\n            'BurstLimit': jsonRequestBody.contentString.throttle.burstLimit\n        };\n        reqParams.cfn['Quota'] = {\n            'Limit': jsonRequestBody.contentString.quota.limit,\n            'Period': jsonRequestBody.contentString.quota.period\n        };\n\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['description'] = jsonRequestBody.contentString.description;\n        reqParams.tf['throttle_settings'] = {\n            'rate_limit': jsonRequestBody.contentString.throttle.rateLimit,\n            'burst_limit': jsonRequestBody.contentString.throttle.burstLimit\n        };\n        reqParams.tf['quota_settings'] = {\n            'limit': jsonRequestBody.contentString.quota.limit,\n            'period': jsonRequestBody.contentString.quota.period\n        };\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'CreateUsagePlan',\n                'boto3': 'create_usage_plan',\n                'cli': 'create-usage-plan'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'type': 'AWS::ApiGateway::UsagePlan',\n            'terraformType': 'aws_api_gateway_usage_plan',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetStage\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.operation == \"getStage\") {\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['stageName'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--stage-name'] = jsonRequestBody.path.split(\"/\")[4];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetStage',\n                'boto3': 'get_stage',\n                'cli': 'get-stage'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetDeployment\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.operation == \"getDeployment\") {\n        reqParams.boto3['embed'] = jsonRequestBody.params.embed;\n        reqParams.cli['--embed'] = jsonRequestBody.params.embed;\n        reqParams.boto3['restApiId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--rest-api-id'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.boto3['deploymentId'] = jsonRequestBody.path.split(\"/\")[4];\n        reqParams.cli['--deployment-id'] = jsonRequestBody.path.split(\"/\")[4];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetDeployment',\n                'boto3': 'get_deployment',\n                'cli': 'get-deployment'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.CreateApiKey\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.path == \"/apikeys\" && jsonRequestBody.method == \"POST\") {\n        reqParams.boto3['enabled'] = jsonRequestBody.contentString.enabled;\n        reqParams.cli['--enabled'] = jsonRequestBody.contentString.enabled;\n        reqParams.boto3['generateDistinctId'] = jsonRequestBody.contentString.generateDistinctId;\n        reqParams.cli['--generate-distinct-id'] = jsonRequestBody.contentString.generateDistinctId;\n        reqParams.boto3['name'] = jsonRequestBody.contentString.name;\n        reqParams.cli['--name'] = jsonRequestBody.contentString.name;\n        reqParams.boto3['value'] = jsonRequestBody.contentString.value;\n        reqParams.cli['--value'] = jsonRequestBody.contentString.value;\n        reqParams.boto3['description'] = jsonRequestBody.contentString.description;\n        reqParams.cli['--description'] = jsonRequestBody.contentString.description;\n\n        reqParams.cfn['Enabled'] = jsonRequestBody.contentString.enabled;\n        reqParams.cfn['GenerateDistinctId'] = jsonRequestBody.contentString.generateDistinctId;\n        reqParams.cfn['Name'] = jsonRequestBody.contentString.name;\n        reqParams.cfn['Description'] = jsonRequestBody.contentString.description;\n\n        reqParams.tf['enabled'] = jsonRequestBody.contentString.enabled;\n        reqParams.tf['name'] = jsonRequestBody.contentString.name;\n        reqParams.tf['description'] = jsonRequestBody.contentString.description;\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'CreateApiKey',\n                'boto3': 'create_api_key',\n                'cli': 'create-api-key'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        tracked_resources.push({\n            'logicalId': getResourceName('apigateway', details.requestId),\n            'region': region,\n            'service': 'apigateway',\n            'type': 'AWS::ApiGateway::ApiKey',\n            'terraformType': 'aws_api_gateway_api_key',\n            'options': reqParams,\n            'requestDetails': details,\n            'was_blocked': blocking\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.DeleteUsagePlan\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"POST\" && jsonRequestBody.path.match(/^\\/usageplans\\/[a-zA-Z0-9]+$/g)) {\n        reqParams.boto3['usagePlanId'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--usage-plan-id'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'DeleteUsagePlan',\n                'boto3': 'delete_usage_plan',\n                'cli': 'delete-usage-plan'\n            },\n            'options': reqParams,\n            'requestDetails': details\n        });\n\n        if (blocking) {\n            notifyBlocked();\n            return {cancel: true};\n        }\n        \n        return {};\n    }\n\n    // autogen:apigateway:apigateway.GetApiKey\n    if (details.method == \"POST\" && details.url.match(/.+console\\.(?:aws\\.amazon|amazonaws-us-gov)\\.com\\/apigateway\\/api\\/apigateway$/g) && jsonRequestBody.method == \"GET\" && jsonRequestBody.path.match(/^\\/apikeys\\/[a-zA-Z0-9]+$/g)) {\n        reqParams.boto3['includeValue'] = jsonRequestBody.params.includeValue;\n        reqParams.cli['--include-value'] = jsonRequestBody.params.includeValue;\n        reqParams.boto3['apiKey'] = jsonRequestBody.path.split(\"/\")[2];\n        reqParams.cli['--api-key'] = jsonRequestBody.path.split(\"/\")[2];\n\n        outputs.push({\n            'region': region,\n            'service': 'apigateway',\n            'method': {\n                'api': 'GetApiKey',\n                'boto3': 'get_api_key',\n                'cli': 'get-api-key'\n            },\n            'option"
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 14.732421875,
          "content": null
        },
        {
          "name": "firefoxManifest.json",
          "type": "blob",
          "size": 0.7880859375,
          "content": "{\n  \"name\": \"Console Recorder for AWS\",\n  \"version\": \"0.3.36\",\n  \"manifest_version\": 2,\n  \"description\": \"Records actions made in the AWS Management Console and outputs the equivalent CLI/SDK commands and CloudFormation template.\",\n  \"content_security_policy\": \"script-src 'self'; object-src 'self'\",\n  \"background\":  {\n    \"scripts\": [\"bg.js\"]\n  },\n  \"icons\": {\n    \"128\": \"icon-128.png\"\n  },\n  \"browser_action\": {\n    \"browser_style\": false,\n    \"default_icon\": {\n      \"128\": \"icon-128.png\"\n    },\n    \"default_popup\": \"popup.html\"\n  },\n  \"permissions\": [\n    \"clipboardWrite\",\n    \"webRequest\",\n    \"webRequestBlocking\",\n    \"tabs\",\n    \"notifications\",\n    \"storage\",\n    \"*://*.aws.amazon.com/*\",\n    \"*://*.amazonaws.com/*\",\n    \"*://developer.amazon.com/*\",\n    \"*://*.amazonaws-us-gov.com/*\"\n  ]\n}\n"
        },
        {
          "name": "icon-128.png",
          "type": "blob",
          "size": 3.6787109375,
          "content": null
        },
        {
          "name": "icon.png",
          "type": "blob",
          "size": 17.75,
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.css",
          "type": "blob",
          "size": 0.083984375,
          "content": ".CodeMirror {\n    font-size: 18px;\n    border: 2px solid #aaaaaa;\n    height: auto;\n}\n"
        },
        {
          "name": "main.html",
          "type": "blob",
          "size": 18.744140625,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\" />\n    <meta charset=\"utf-8\" />\n    <title>Console Recorder for AWS</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no\" />\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-touch-fullscreen\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n    <meta content=\"\" name=\"description\" />\n    <meta content=\"\" name=\"author\" />\n    <link href=\"assets/plugins/pace/pace-theme-flash.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"assets/plugins/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"assets/plugins/font-awesome/css/font-awesome.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"assets/plugins/jquery-scrollbar/jquery.scrollbar.css\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\" />\n    <link href=\"assets/plugins/select2/css/select2.min.css\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\" />\n    <link href=\"assets/plugins/switchery/css/switchery.min.css\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\" />\n\n    <link href=\"pages/css/pages-icons.css\" rel=\"stylesheet\" type=\"text/css\">\n    <link class=\"main-stylesheet\" href=\"pages/css/pages.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n    <!-- CodeMirror -->\n    <link rel=\"stylesheet\" href=\"lib/codemirror/codemirror.css\">\n\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/3024-day.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/3024-night.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/abcdef.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/ambiance-mobile.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/ambiance.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/base16-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/base16-light.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/bespin.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/blackboard.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/cobalt.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/colorforth.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/darcula.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/dracula.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/duotone-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/duotone-light.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/eclipse.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/elegant.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/erlang-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/gruvbox-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/hopscotch.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/icecoder.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/idea.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/isotope.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/lesser-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/liquibyte.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/lucario.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/material.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/mbo.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/mdn-like.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/midnight.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/monokai.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/neat.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/neo.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/night.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/oceanic-next.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/panda-syntax.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/paraiso-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/paraiso-light.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/pastel-on-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/railscasts.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/rubyblue.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/seti.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/shadowfox.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/solarized.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/ssms.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/the-matrix.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/tomorrow-night-bright.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/tomorrow-night-eighties.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/ttcn.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/twilight.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/vibrant-ink.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/xq-dark.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/xq-light.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/yeti.css\">\n    <link rel=\"stylesheet\" href=\"lib/codemirror/theme/zenburn.css\">\n\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"lib/codemirror/codemirror.js\"></script>\n    <script src=\"lib/codemirror/mode/python/python.js\"></script>\n    <script src=\"lib/codemirror/mode/shell/shell.js\"></script>\n    <script src=\"lib/codemirror/mode/go/go.js\"></script>\n    <script src=\"lib/codemirror/mode/javascript/javascript.js\"></script>\n    <script src=\"lib/codemirror/mode/yaml/yaml.js\"></script>\n    <script src=\"lib/codemirror/mode/ruby/ruby.js\"></script>\n  </head>\n  <body class=\"horizontal-menu horizontal-app-menu \">\n    <div class=\"header\">\n      <div class=\"container\">\n        <div class=\"header-inner justify-content-start header-lg-height title-bar\">\n          <div class=\"brand inline align-self-end\">\n            <img src=\"icon.png\" alt=\"logo\" data-src=\"icon.png\" data-src-retina=\"icon.png\" width=\"36\" height=\"36\">\n          </div>\n          <h2 class=\"page-title align-self-end\" style=\"line-height: 36px;\">\n                Console Recorder for AWS\n              </h2>\n        </div>\n      </div>\n    </div>\n    <div class=\"page-container \">\n      <div class=\"page-content-wrapper \">\n        <div class=\"content \">\n          <div class=\"jumbotron\">\n            <div class=\" container p-l-0 p-r-0 container-fixed-lg sm-p-l-0 sm-p-r-0\">\n              <div class=\"inner\" style=\"padding-bottom: 10px; display: flex; flex-wrap: wrap; justify-content: flex-start;\">\n                <button id=\"boto3_menubtn\" class=\"btn btn-primary m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">Boto3 (Python)</span></button>\n                <button id=\"cfn_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">CloudFormation</span></button>\n                <button id=\"tf_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">Terraform</span></button>\n                <button id=\"troposphere_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">Troposphere</span></button>\n                <button id=\"cdkts_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">CDK (TS)</span></button>\n                <button id=\"cli_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">AWS CLI</span></button>\n                <button id=\"iam_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">IAM</span></button>\n                <button id=\"js_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">JavaScript</span></button>\n                <button id=\"go_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><span class=\"bold\">Go SDK (v1)</span></button>\n                <button id=\"settings_menubtn\" class=\"btn btn-default m-t-10\" style=\"min-width: 146px; margin-left: 1px; margin-right: 1px;\"><i class=\"fa fa-cogs\"></i> <span class=\"bold\">Settings</span></button>\n              </div>\n            </div>\n          </div>\n          <div class=\" container container-fixed-lg\">\n            <div id='boto3_container'>\n                <!--<button id=\"copy_boto3\" style=\"z-index: 100; position: absolute; right: 180px; top: 100px;\" type=\"button\" class=\"btn btn-default active\"><i class=\"fa fa-copy\"></i></button>-->\n                <textarea id='boto3'></textarea>\n            </div>\n            <div id='cli_container' style=\"display: none;\">\n                <textarea id='cli'></textarea>\n            </div>\n            <div id='go_container' style=\"display: none;\">\n                <textarea id='go'></textarea>\n            </div>\n            <div id='cfn_container' style=\"display: none;\">\n                <textarea id='cfn'></textarea>\n            </div>\n            <div id='tf_container' style=\"display: none;\">\n                <textarea id='tf'></textarea>\n            </div>\n            <div id='js_container' style=\"display: none;\">\n                <textarea id='js'></textarea>\n            </div>\n            <div id='cdkts_container' style=\"display: none;\">\n                <textarea id='cdkts'></textarea>\n            </div>\n            <div id='iam_container' style=\"display: none;\">\n                <textarea id='iam'></textarea>\n            </div>\n            <div id='troposphere_container' style=\"display: none;\">\n                <textarea id='troposphere'></textarea>\n            </div>\n            <div id='settings_container' style=\"display: none;\">\n              <div class=\"card card-default\">\n                <div class=\"card-header \">\n                    <h4><span class=\"semi-bold\">Settings</span></h4>\n                </div>\n                <div class=\"card-body\">\n                  <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                      <h5>Block Mutable Requests</h5>\n                      <div class=\"checkbox check-primary\" style=\"margin-top: 24px; margin-bottom: 24px;\">\n                        <input type=\"checkbox\" value=\"0\" id=\"blocking\">\n                        <label for=\"blocking\"><span class=\"bold\">Enable</span></label>\n                      </div>\n                      <p>This option will stop any mutable requests (most things that aren't a <code>Get*</code> or <code>List*</code> action) from executing in the console, whilst still logging the generated outputs in the dashboard.</p>   \n                    </div>\n                    <div class=\"col-lg-4\">\n                      <h5>Intercept Responses</h5>\n                      <div class=\"checkbox check-primary\" style=\"margin-top: 24px; margin-bottom: 24px;\">\n                        <input type=\"checkbox\" value=\"0\" id=\"intercept\">\n                        <label for=\"intercept\"><span class=\"bold\">Enable</span></label>\n                      </div>\n                      <p>This option will record the response body from all AWS calls. Setting this allows CloudFormation, CDK, Troposphere and Terraform to correlate actions between resources.</p>\n                    </div>\n                    <div class=\"col-lg-4\">\n                      <h5>Recorded Data</h5>\n                      <button id=\"cleardata_btn\" class=\"btn btn-danger m-t-10\" style=\"width: 182px; margin-bottom: 13px;\"><span class=\"bold\">Clear Recorded Data</span></button>\n                      <p>Clicking the button above will clear all stored recordings and their outputs.</p>\n                    </div>\n                  </div>\n                  <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                      <h5>Theme</h5>\n                      <form role=\"form\" style=\"margin-top: 24px; margin-bottom: 24px;\">\n                          <div class=\"form-group \">\n                          <select id=\"theme\" class=\"full-width\" data-init-plugin=\"select2\">\n                              <option value=\"3024-day\">3024-day</option>\n                              <option value=\"3024-night\">3024-night</option>\n                              <option value=\"abcdef\">abcdef</option>\n                              <option value=\"ambiance\">ambiance</option>\n                              <option value=\"base16-dark\">base16-dark</option>\n                              <option value=\"base16-light\">base16-light</option>\n                              <option value=\"bespin\">bespin</option>\n                              <option value=\"blackboard\">blackboard</option>\n                              <option value=\"cobalt\">cobalt</option>\n                              <option value=\"colorforth\">colorforth</option>\n                              <option value=\"darcula\">darcula</option>\n                              <option value=\"dracula\">dracula</option>\n                              <option value=\"duotone-dark\">duotone-dark</option>\n                              <option value=\"duotone-light\">duotone-light</option>\n                              <option value=\"eclipse\">eclipse</option>\n                              <option value=\"elegant\">elegant</option>\n                              <option value=\"erlang-dark\">erlang-dark</option>\n                              <option value=\"gruvbox-dark\">gruvbox-dark</option>\n                              <option value=\"hopscotch\">hopscotch</option>\n                              <option value=\"icecoder\">icecoder</option>\n                              <option value=\"idea\">idea</option>\n                              <option value=\"isotope\">isotope</option>\n                              <option value=\"lesser-dark\">lesser-dark</option>\n                              <option value=\"liquibyte\">liquibyte</option>\n                              <option value=\"lucario\">lucario</option>\n                              <option value=\"material\">material</option>\n                              <option value=\"mbo\">mbo</option>\n                              <option value=\"mdn-like\">mdn-like</option>\n                              <option value=\"midnight\">midnight</option>\n                              <option value=\"monokai\">monokai</option>\n                              <option value=\"neat\">neat</option>\n                              <option value=\"neo\">neo</option>\n                              <option value=\"night\">night</option>\n                              <option value=\"oceanic-next\">oceanic-next</option>\n                              <option value=\"panda-syntax\">panda-syntax</option>\n                              <option value=\"paraiso-dark\">paraiso-dark</option>\n                              <option value=\"paraiso-light\">paraiso-light</option>\n                              <option value=\"pastel-on-dark\">pastel-on-dark</option>\n                              <option value=\"railscasts\">railscasts</option>\n                              <option value=\"rubyblue\">rubyblue</option>\n                              <option value=\"seti\">seti</option>\n                              <option value=\"shadowfox\">shadowfox</option>\n                              <option value=\"solarized dark\">solarized dark</option>\n                              <option value=\"solarized light\">solarized light</option>\n                              <option value=\"the-matrix\">the-matrix</option>\n                              <option value=\"tomorrow-night-bright\">tomorrow-night-bright</option>\n                              <option value=\"tomorrow-night-eighties\">tomorrow-night-eighties</option>\n                              <option value=\"ttcn\">ttcn</option>\n                              <option value=\"twilight\">twilight</option>\n                              <option value=\"vibrant-ink\">vibrant-ink</option>\n                              <option value=\"xq-dark\">xq-dark</option>\n                              <option value=\"xq-light\">xq-light</option>\n                              <option value=\"yeti\">yeti</option>\n                              <option value=\"zenburn\">zenburn</option>\n                          </select>\n                          </div>\n                      </form>\n                      <p>You can change the theme of the code blocks using this option.</p>\n                    </div>\n                    <div class=\"col-lg-4\">\n                      <h5>CloudFormation Spacing</h5>\n                      <form role=\"form\" style=\"margin-top: 24px; margin-bottom: 24px;\">\n                          <div class=\"form-group \">\n                          <select id=\"cfnspacing\" class=\"full-width\" data-init-plugin=\"select2\">\n                              <option value=\"4\">4 Spaces</option>\n                              <option value=\"2\">2 Spaces</option>\n                          </select>\n                          </div>\n                      </form>\n                      <p>Change your preference of the number of spaces for the CloudFormation output.</p>\n                    </div>\n                    <div class=\"col-lg-4\">\n                      &nbsp;\n                    </div>\n                  </div>\n                </div>\n            </div>\n            <div style=\"float: right;\">Version <span id=\"extversion\"></span>&nbsp;&nbsp;&#8226;&nbsp;&nbsp;<a href=\"https://github.com/iann0036/AWSConsoleRecorder/issues\" target=\"_blank\">Report a bug or issue</a></div>\n          </div>\n          <br /><br />\n        </div>\n      </div>\n    </div>\n    <script src=\"assets/plugins/pace/pace.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery/jquery-3.2.1.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/modernizr.custom.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery-ui/jquery-ui.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/popper/umd/popper.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/bootstrap/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery/jquery-easy.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery-unveil/jquery.unveil.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery-ios-list/jquery.ioslist.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery-actual/jquery.actual.min.js\"></script>\n    <script src=\"assets/plugins/jquery-scrollbar/jquery.scrollbar.min.js\"></script>\n    <script src=\"assets/plugins/select2/js/select2.full.min.js\" type=\"text/javascript\"></script>\n    <script src=\"pages/js/pages.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/js/scripts.js\" type=\"text/javascript\"></script>\n    <script src=\"main.js\" type=\"text/javascript\"></script>\n  </body>\n</html>"
        },
        {
          "name": "main.js",
          "type": "blob",
          "size": 12.310546875,
          "content": "var boto3_editor, go_editor, cfn_editor, tf_editor, cli_editor, js_editor, cdkts_editor, iam_editor, troposphere_editor;\n\nwindow.onload = function(){\n    chrome.runtime.sendMessage(null, {\n        \"action\": \"getBlockingStatus\"\n    }, null, function(blocking_status){\n        if (blocking_status) {\n            document.getElementById('blocking').checked = true;\n        } else {\n            document.getElementById('blocking').checked = false;\n        }\n    });\n\n    chrome.runtime.sendMessage(null, {\n        \"action\": \"getInterceptStatus\"\n    }, null, function(intercept_status){\n        if (intercept_status) {\n            document.getElementById('intercept').checked = true;\n        } else {\n            document.getElementById('intercept').checked = false;\n        }\n    });\n\n    chrome.runtime.sendMessage(null, {\n        \"action\": \"getCfnSpacing\"\n    }, null, function(cfnspacing){\n        $('#cfnspacing').val(cfnspacing).trigger('change');\n\n        document.getElementById('cfnspacing').onchange = function(evt) {\n            if (evt.target.value) {\n                chrome.runtime.sendMessage(null, {\n                    \"action\": \"setCfnSpacing\",\n                    \"cfnspacing\": evt.target.value\n                });\n            }\n        };\n    });\n\n    chrome.runtime.sendMessage(null, {\n        \"action\": \"getTheme\"\n    }, null, function(theme){\n        chrome.runtime.sendMessage(null, {\n            \"action\": \"getCompiledOutputs\"\n        }, null, function(response){\n            boto3_editor = CodeMirror.fromTextArea(document.getElementById('boto3'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"python\",\n                theme: theme,\n                indentUnit: 4\n            });\n            boto3_editor.getDoc().setValue(response['boto3']);\n    \n            go_editor = CodeMirror.fromTextArea(document.getElementById('go'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"go\",\n                theme: theme,\n                indentUnit: 4\n            });\n            go_editor.getDoc().setValue(response['go']);\n    \n            cfn_editor = CodeMirror.fromTextArea(document.getElementById('cfn'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"yaml\",\n                theme: theme,\n                indentUnit: 4\n            });\n            cfn_editor.getDoc().setValue(response['cfn']);\n    \n            tf_editor = CodeMirror.fromTextArea(document.getElementById('tf'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"ruby\",\n                theme: theme,\n                indentUnit: 4\n            });\n            tf_editor.getDoc().setValue(response['tf']);\n\n            cli_editor = CodeMirror.fromTextArea(document.getElementById('cli'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"shell\",\n                theme: theme,\n                indentUnit: 4\n            });\n            cli_editor.getDoc().setValue(response['cli']);\n    \n            js_editor = CodeMirror.fromTextArea(document.getElementById('js'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"javascript\",\n                theme: theme,\n                indentUnit: 4\n            });\n            js_editor.getDoc().setValue(response['js']);\n    \n            cdkts_editor = CodeMirror.fromTextArea(document.getElementById('cdkts'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"javascript\",\n                theme: theme,\n                indentUnit: 4\n            });\n            cdkts_editor.getDoc().setValue(response['cdkts']);\n    \n            iam_editor = CodeMirror.fromTextArea(document.getElementById('iam'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"javascript\",\n                theme: theme,\n                indentUnit: 4\n            });\n            iam_editor.getDoc().setValue(response['iam']);\n    \n            troposphere_editor = CodeMirror.fromTextArea(document.getElementById('troposphere'), {\n                lineNumbers: true,\n                lineWrapping: true,\n                mode: \"python\",\n                theme: theme,\n                indentUnit: 4\n            });\n            troposphere_editor.getDoc().setValue(response['troposphere']);\n            \n            setTimeout(function() {\n                boto3_editor.refresh();\n                go_editor.refresh();\n                cfn_editor.refresh();\n                tf_editor.refresh();\n                cli_editor.refresh();\n                js_editor.refresh();\n                cdkts_editor.refresh();\n                iam_editor.refresh();\n                troposphere_editor.refresh();\n            },1);\n\n            $('#theme').val(theme).trigger('change');\n\n            document.getElementById('theme').onchange = function(evt) {\n                if (evt.target.value) {\n                    chrome.runtime.sendMessage(null, {\n                        \"action\": \"setTheme\",\n                        \"theme\": evt.target.value\n                    });\n            \n                    boto3_editor.setOption(\"theme\", evt.target.value);\n                    go_editor.setOption(\"theme\", evt.target.value);\n                    cfn_editor.setOption(\"theme\", evt.target.value);\n                    tf_editor.setOption(\"theme\", evt.target.value);\n                    cli_editor.setOption(\"theme\", evt.target.value);\n                    js_editor.setOption(\"theme\", evt.target.value);\n                    cdkts_editor.setOption(\"theme\", evt.target.value);\n                    iam_editor.setOption(\"theme\", evt.target.value);\n                    troposphere_editor.setOption(\"theme\", evt.target.value);\n                }\n            };\n        });\n    });\n\n    document.getElementById('blocking').onchange = function(evt) {\n        if (evt.target.checked) {\n            chrome.runtime.sendMessage(null, {\n                \"action\": \"setBlockingOn\"\n            });\n        } else {\n            chrome.runtime.sendMessage(null, {\n                \"action\": \"setBlockingOff\"\n            });\n        }\n    };\n    \n    document.getElementById('intercept').onchange = function(evt) {\n        if (evt.target.checked) {\n            chrome.runtime.sendMessage(null, {\n                \"action\": \"setInterceptOn\"\n            });\n        } else {\n            chrome.runtime.sendMessage(null, {\n                \"action\": \"setInterceptOff\"\n            });\n        }\n    };\n    \n    document.getElementById('cleardata_btn').onclick = function(evt) {\n        chrome.runtime.sendMessage(null, {\n            \"action\": \"clearData\"\n        }, null, function(result){\n            boto3_editor.getDoc().setValue(\"# No recorded actions yet\");\n            go_editor.getDoc().setValue(\"// No recorded actions yet\");\n            cfn_editor.getDoc().setValue(\"# No recorded actions yet\");\n            tf_editor.getDoc().setValue(\"# No recorded actions yet\");\n            cli_editor.getDoc().setValue(\"# No recorded actions yet\");\n            js_editor.getDoc().setValue(\"// No recorded actions yet\");\n            cdkts_editor.getDoc().setValue(\"// No recorded actions yet\");\n            iam_editor.getDoc().setValue(\"// No recorded actions yet\");\n            troposphere_editor.getDoc().setValue(\"# No recorded actions yet\");\n\n            setTimeout(function() {\n                boto3_editor.refresh();\n                go_editor.refresh();\n                cfn_editor.refresh();\n                tf_editor.refresh();\n                cli_editor.refresh();\n                js_editor.refresh();\n                cdkts_editor.refresh();\n                iam_editor.refresh();\n                troposphere_editor.refresh();\n            },1);\n            \n            document.getElementById('cleardata_btn').innerHTML = \"<span class=\\\"bold\\\">Cleared!</span>\";\n            document.getElementById('cleardata_btn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n            document.getElementById('cleardata_btn').setAttribute(\"disabled\", \"disabled\");\n        });\n    };\n\n    document.getElementById('extversion').innerHTML = chrome.runtime.getManifest().version;\n};\n\nfunction resetMenu() {\n    document.getElementById('boto3_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('cli_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('go_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('cfn_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('tf_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('js_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('cdkts_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('iam_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('troposphere_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n    document.getElementById('settings_menubtn').setAttribute(\"class\", \"btn btn-default m-t-10\");\n\n    document.getElementById('boto3_container').style = \"display: none;\";\n    document.getElementById('cli_container').style = \"display: none;\";\n    document.getElementById('go_container').style = \"display: none;\";\n    document.getElementById('cfn_container').style = \"display: none;\";\n    document.getElementById('tf_container').style = \"display: none;\";\n    document.getElementById('js_container').style = \"display: none;\";\n    document.getElementById('cdkts_container').style = \"display: none;\";\n    document.getElementById('iam_container').style = \"display: none;\";\n    document.getElementById('troposphere_container').style = \"display: none;\";\n    document.getElementById('settings_container').style = \"display: none;\";\n}\n\ndocument.getElementById('boto3_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('boto3_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('boto3_container').style = \"\";\n\n    boto3_editor.refresh();\n};\n\ndocument.getElementById('cli_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('cli_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('cli_container').style = \"\";\n\n    cli_editor.refresh();\n};\n\ndocument.getElementById('go_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('go_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('go_container').style = \"\";\n\n    go_editor.refresh();\n};\n\ndocument.getElementById('cfn_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('cfn_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('cfn_container').style = \"\";\n\n    cfn_editor.refresh();\n};\n\ndocument.getElementById('tf_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('tf_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('tf_container').style = \"\";\n\n    tf_editor.refresh();\n};\n\ndocument.getElementById('js_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('js_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('js_container').style = \"\";\n\n    js_editor.refresh();\n};\n\ndocument.getElementById('cdkts_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('cdkts_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('cdkts_container').style = \"\";\n\n    cdkts_editor.refresh();\n};\n\ndocument.getElementById('iam_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('iam_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('iam_container').style = \"\";\n\n    iam_editor.refresh();\n};\n\ndocument.getElementById('troposphere_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('troposphere_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('troposphere_container').style = \"\";\n\n    troposphere_editor.refresh();\n};\n\ndocument.getElementById('settings_menubtn').onclick = function(evt) {\n    resetMenu();\n    document.getElementById('settings_menubtn').setAttribute(\"class\", \"btn btn-primary m-t-10\");\n    document.getElementById('settings_container').style = \"\";\n};\n"
        },
        {
          "name": "manifest.json",
          "type": "blob",
          "size": 0.8037109375,
          "content": "{\n  \"name\": \"Console Recorder for AWS\",\n  \"version\": \"0.3.36\",\n  \"manifest_version\": 2,\n  \"description\": \"Records actions made in the AWS Management Console and outputs the equivalent CLI/SDK commands and CloudFormation template.\",\n  \"content_security_policy\": \"script-src 'self'; object-src 'self'\",\n  \"background\":  {\n    \"scripts\": [\"bg.js\"]\n  },\n  \"icons\": {\n    \"128\": \"icon-128.png\"\n  },\n  \"browser_action\": {\n    \"browser_style\": false,\n    \"default_icon\": {\n      \"128\": \"icon-128.png\"\n    },\n    \"default_popup\": \"popup.html\"\n  },\n  \"permissions\": [\n    \"clipboardWrite\",\n    \"webRequest\",\n    \"webRequestBlocking\",\n    \"tabs\",\n    \"notifications\",\n    \"storage\",\n    \"debugger\",\n    \"*://*.aws.amazon.com/*\",\n    \"*://*.amazonaws.com/*\",\n    \"*://developer.amazon.com/*\",\n    \"*://*.amazonaws-us-gov.com/*\"\n  ]\n}\n"
        },
        {
          "name": "pages",
          "type": "tree",
          "content": null
        },
        {
          "name": "popup.html",
          "type": "blob",
          "size": 2.1748046875,
          "content": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\" />\n    <meta charset=\"utf-8\" />\n    <title>AWS Console Recorder</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no\" />\n    <link rel=\"apple-touch-icon\" href=\"pages/ico/60.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"pages/ico/76.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"pages/ico/120.png\">\n    <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"pages/ico/152.png\">\n    <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n    <meta name=\"apple-touch-fullscreen\" content=\"yes\">\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"default\">\n    <meta content=\"\" name=\"description\" />\n    <meta content=\"\" name=\"author\" />\n    <link href=\"assets/plugins/pace/pace-theme-flash.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"assets/plugins/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"assets/plugins/font-awesome/css/font-awesome.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n    <link href=\"pages/css/pages-icons.css\" rel=\"stylesheet\" type=\"text/css\">\n    <link class=\"main-stylesheet\" href=\"pages/css/pages.css\" rel=\"stylesheet\" type=\"text/css\" />\n\n  </head>\n  <body style=\"background: #ffffff;\">\n    <div style=\"height: 96px; min-height: 96px; min-width: 200px;\">\n        <center>\n            <div style=\"padding-top: 14px;\">\n                <button id=\"recordButton\" type=\"button\" class=\"btn btn-hover btn-success btn-block\" style=\"width: 150px; font-weight: bold;\">&nbsp;</button>\n            </div>\n            <p style=\"padding-top: 10px;\"><a id=\"dashLink\" href=\"#\">Go To Dashboard</a></p>\n        </center>\n    </div>\n    <script src=\"assets/plugins/jquery/jquery-3.2.1.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/jquery-ui/jquery-ui.min.js\" type=\"text/javascript\"></script>\n    <script src=\"assets/plugins/bootstrap/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n    <script src=\"popup.js\" type=\"text/javascript\"></script>\n  </body>\n</html>\n"
        },
        {
          "name": "popup.js",
          "type": "blob",
          "size": 1.51171875,
          "content": "var recording = false;\n\nfunction toggleRecording() {\n    if (recording) {\n        chrome.runtime.sendMessage(null, {\n            \"action\": \"setRecordingOff\"\n        }, null, function(resp){\n            chrome.tabs.create({\n                url: chrome.extension.getURL(\"main.html\")\n            });\n            window.close();\n        });\n    } else {\n        chrome.runtime.sendMessage(null, {\n            \"action\": \"setRecordingOn\"\n        }, null, function(resp){\n            window.close();\n        });\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', function () {\n    document.getElementById('recordButton').addEventListener('click', toggleRecording);\n\n    updatePopupUI();\n});\n\nfunction updatePopupUI() {\n    chrome.runtime.sendMessage(null, {\n        \"action\": \"getRecordingStatus\"\n    }, null, function(recording_status){\n        recording = recording_status;\n        if (recording) {\n            document.getElementById('recordButton').innerHTML = \"Stop Recording\";\n            document.getElementById('recordButton').setAttribute('class','btn btn-hover btn-danger btn-block');\n        } else {\n            document.getElementById('recordButton').innerHTML = \"Start Recording\";\n            document.getElementById('recordButton').setAttribute('class','btn btn-hover btn-success btn-block');\n        }\n    });\n};\n\nwindow.onload = function() {\n    document.getElementById('dashLink').onclick = function () {\n        chrome.tabs.create({\n            url: chrome.extension.getURL(\"main.html\")\n        });\n        window.close();\n    };\n}\n"
        }
      ]
    }
  ]
}