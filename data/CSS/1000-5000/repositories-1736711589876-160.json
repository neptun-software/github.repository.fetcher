{
  "metadata": {
    "timestamp": 1736711589876,
    "page": 160,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "PragmaticFlow/NBomber",
      "stars": 2089,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.2841796875,
          "content": "# EditorConfig is awesome:\nhttp://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n# Default settings:\n# A newline ending every file\n# Use 4 spaces as indentation\n[*]\ncharset = utf-8\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 5.62109375,
          "content": "## Ignore Visual Studio temporary files, build results, and\n## files generated by popular Visual Studio add-ons.\n##\n## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore\n\n# User-specific files\n*.suo\n*.user\n*.userosscache\n*.sln.docstates\n\n# User-specific files (MonoDevelop/Xamarin Studio)\n*.userprefs\n\n# Build results\n[Dd]ebug/\n[Dd]ebugPublic/\n[Rr]elease/\n[Rr]eleases/\nx64/\nx86/\nbld/\n[Bb]in/\n[Oo]bj/\n[Ll]og/\n[Rr]eports/\n\n# Visual Studio 2015/2017 cache/options directory\n.vs/\n.vscode/\n# Uncomment if you have tasks that create the project's static files in wwwroot\n#wwwroot/\n\n# Visual Studio 2017 auto generated files\nGenerated\\ Files/\n\n# MSTest test Results\n[Tt]est[Rr]esult*/\n[Bb]uild[Ll]og.*\n\n# NUNIT\n*.VisualState.xml\nTestResult.xml\n\n# Build Results of an ATL Project\n[Dd]ebugPS/\n[Rr]eleasePS/\ndlldata.c\n\n# Benchmark Results\nBenchmarkDotNet.Artifacts/\n\n# .NET Core\nproject.lock.json\nproject.fragment.lock.json\nartifacts/\n**/Properties/launchSettings.json\n\n# StyleCop\nStyleCopReport.xml\n\n# Files built by Visual Studio\n*_i.c\n*_p.c\n*_i.h\n*.ilk\n*.meta\n*.obj\n*.iobj\n*.pch\n*.pdb\n*.ipdb\n*.pgc\n*.pgd\n*.rsp\n*.sbr\n*.tlb\n*.tli\n*.tlh\n*.tmp\n*.tmp_proj\n*.log\n*.vspscc\n*.vssscc\n.builds\n*.pidb\n*.svclog\n*.scc\n\n# Chutzpah Test files\n_Chutzpah*\n\n# Visual C++ cache files\nipch/\n*.aps\n*.ncb\n*.opendb\n*.opensdf\n*.sdf\n*.cachefile\n*.VC.db\n*.VC.VC.opendb\n\n# Visual Studio profiler\n*.psess\n*.vsp\n*.vspx\n*.sap\n\n# Visual Studio Trace Files\n*.e2e\n\n# TFS 2012 Local Workspace\n$tf/\n\n# Guidance Automation Toolkit\n*.gpState\n\n# ReSharper is a .NET coding add-in\n_ReSharper*/\n*.[Rr]e[Ss]harper\n*.DotSettings.user\n\n# JustCode is a .NET coding add-in\n.JustCode\n\n# TeamCity is a build add-in\n_TeamCity*\n\n# DotCover is a Code Coverage Tool\n*.dotCover\n\n# AxoCover is a Code Coverage Tool\n.axoCover/*\n!.axoCover/settings.json\n\n# Visual Studio code coverage results\n*.coverage\n*.coveragexml\n\n# NCrunch\n_NCrunch_*\n.*crunch*.local.xml\nnCrunchTemp_*\n\n# MightyMoose\n*.mm.*\nAutoTest.Net/\n\n# Web workbench (sass)\n.sass-cache/\n\n# Installshield output folder\n[Ee]xpress/\n\n# DocProject is a documentation generator add-in\nDocProject/buildhelp/\nDocProject/Help/*.HxT\nDocProject/Help/*.HxC\nDocProject/Help/*.hhc\nDocProject/Help/*.hhk\nDocProject/Help/*.hhp\nDocProject/Help/Html2\nDocProject/Help/html\n\n# Click-Once directory\npublish/\n\n# Publish Web Output\n*.[Pp]ublish.xml\n*.azurePubxml\n# Note: Comment the next line if you want to checkin your web deploy settings,\n# but database connection strings (with potential passwords) will be unencrypted\n*.pubxml\n*.publishproj\n\n# Microsoft Azure Web App publish settings. Comment the next line if you want to\n# checkin your Azure Web App publish settings, but sensitive information contained\n# in these scripts will be unencrypted\nPublishScripts/\n\n# NuGet Packages\n*.nupkg\n# The packages folder can be ignored because of Package Restore\n**/[Pp]ackages/*\n# except build/, which is used as an MSBuild target.\n!**/[Pp]ackages/build/\n# Uncomment if necessary however generally it will be regenerated when needed\n#!**/[Pp]ackages/repositories.config\n# NuGet v3's project.json files produces more ignorable files\n*.nuget.props\n*.nuget.targets\n\n# Microsoft Azure Build Output\ncsx/\n*.build.csdef\n\n# Microsoft Azure Emulator\necf/\nrcf/\n\n# Windows Store app package directories and files\nAppPackages/\nBundleArtifacts/\nPackage.StoreAssociation.xml\n_pkginfo.txt\n*.appx\n\n# Visual Studio cache files\n# files ending in .cache can be ignored\n*.[Cc]ache\n# but keep track of directories ending in .cache\n!*.[Cc]ache/\n\n# Others\nClientBin/\n~$*\n*~\n*.dbmdl\n*.dbproj.schemaview\n*.jfm\n*.pfx\n*.publishsettings\norleans.codegen.cs\n\n# Including strong name files can present a security risk\n# (https://github.com/github/gitignore/pull/2483#issue-259490424)\n#*.snk\n\n# Since there are multiple workflows, uncomment next line to ignore bower_components\n# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)\n#bower_components/\n\n# RIA/Silverlight projects\nGenerated_Code/\n\n# Backup & report files from converting an old project file\n# to a newer Visual Studio version. Backup files are not needed,\n# because we have git ;-)\n_UpgradeReport_Files/\nBackup*/\nUpgradeLog*.XML\nUpgradeLog*.htm\nServiceFabricBackup/\n*.rptproj.bak\n\n# SQL Server files\n*.mdf\n*.ldf\n*.ndf\n\n# Business Intelligence projects\n*.rdl.data\n*.bim.layout\n*.bim_*.settings\n*.rptproj.rsuser\n\n# Microsoft Fakes\nFakesAssemblies/\n\n# GhostDoc plugin setting file\n*.GhostDoc.xml\n\n# Node.js Tools for Visual Studio\n.ntvs_analysis.dat\nnode_modules/\n\n# Visual Studio 6 build log\n*.plg\n\n# Visual Studio 6 workspace options file\n*.opt\n\n# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)\n*.vbw\n\n# Visual Studio LightSwitch build output\n**/*.HTMLClient/GeneratedArtifacts\n**/*.DesktopClient/GeneratedArtifacts\n**/*.DesktopClient/ModelManifest.xml\n**/*.Server/GeneratedArtifacts\n**/*.Server/ModelManifest.xml\n_Pvt_Extensions\n\n# Paket dependency manager\n.paket/paket.exe\npaket-files/\n\n# FAKE - F# Make\n.fake/\n\n# JetBrains Rider\n.idea/\n*.sln.iml\n\n# CodeRush\n.cr/\n\n# Python Tools for Visual Studio (PTVS)\n__pycache__/\n*.pyc\n\n# Cake - Uncomment if you are using it\ntools/**\n!tools/packages.config\n\n# Tabs Studio\n*.tss\n\n# Telerik's JustMock configuration file\n*.jmconfig\n\n# BizTalk build output\n*.btp.cs\n*.btm.cs\n*.odx.cs\n*.xsd.cs\n\n# OpenCover UI analysis results\nOpenCover/\n\n# Azure Stream Analytics local run output\nASALocalRun/\n\n# MSBuild Binary and Structured Log\n*.binlog\n\n# NVidia Nsight GPU debugger configuration file\n*.nvuser\n\n# MFractors (Xamarin productivity tool) working folder\n.mfractor/\n\n.ionide/\n/logs/\n\n.nbomber-plugins/\n\n.fake\n.ionide\n\n!/src/NBomber/DomainServices/Reports\n/examples/CSharpProd/DB/Redis/redis-data/\n/examples/WebAppSimulator/DB\n"
        },
        {
          "name": "NBomber.Performance.sln",
          "type": "blob",
          "size": 1.3037109375,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\nProject(\"{F2A71F9B-5D33-465A-A702-920D77279786}\") = \"NBomber.Benchmarks\", \"performance\\NBomber.Benchmarks\\NBomber.Benchmarks.fsproj\", \"{60140186-F81E-4C62-ACD9-1A327D297399}\"\nEndProject\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"NBomber.CSharpImpl\", \"performance\\NBomber.CSharpImpl\\NBomber.CSharpImpl.csproj\", \"{C4632132-9C00-4A87-A235-F7A830F5853E}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tRelease|Any CPU = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{60140186-F81E-4C62-ACD9-1A327D297399}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{60140186-F81E-4C62-ACD9-1A327D297399}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{60140186-F81E-4C62-ACD9-1A327D297399}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{60140186-F81E-4C62-ACD9-1A327D297399}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{C4632132-9C00-4A87-A235-F7A830F5853E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{C4632132-9C00-4A87-A235-F7A830F5853E}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{C4632132-9C00-4A87-A235-F7A830F5853E}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{C4632132-9C00-4A87-A235-F7A830F5853E}.Release|Any CPU.Build.0 = Release|Any CPU\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "NBomber.sln",
          "type": "blob",
          "size": 6.873046875,
          "content": "﻿\nMicrosoft Visual Studio Solution File, Format Version 12.00\n# Visual Studio Version 17\nVisualStudioVersion = 17.6.33717.318\nMinimumVisualStudioVersion = 10.0.40219.1\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"examples\", \"examples\", \"{10398A75-959D-4271-913A-BE99E4ED5744}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Demo\", \"examples\\Demo\\Demo.csproj\", \"{657861BD-19DA-4B93-937D-88B5C25E6D87}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"xUnitExample\", \"examples\\xUnitExample\\xUnitExample.csproj\", \"{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"WebAppSimulator\", \"examples\\WebAppSimulator\\WebAppSimulator.csproj\", \"{37D936ED-619C-47F8-95BD-63B966590A15}\"\nEndProject\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"BookstoreSimulator\", \"examples\\BookstoreSimulator\\BookstoreSimulator.csproj\", \"{9BC9E01E-C12A-45D6-9910-B0642F36338B}\"\nEndProject\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"simulators\", \"simulators\", \"{B20C9B19-52F5-4AF1-B41D-D01294BEC6C9}\"\nEndProject\nProject(\"{F2A71F9B-5D33-465A-A702-920D77279786}\") = \"NBomber\", \"src\\NBomber\\NBomber.fsproj\", \"{53904BB5-68B2-497A-93BD-46423FBD239C}\"\nEndProject\nGlobal\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\n\t\tDebug|Any CPU = Debug|Any CPU\n\t\tDebug|x64 = Debug|x64\n\t\tDebug|x86 = Debug|x86\n\t\tRelease|Any CPU = Release|Any CPU\n\t\tRelease|x64 = Release|x64\n\t\tRelease|x86 = Release|x86\n\tEndGlobalSection\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|x64.Build.0 = Release|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87}.Release|x86.Build.0 = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|x64.Build.0 = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A}.Release|x86.Build.0 = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|x64.Build.0 = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15}.Release|x86.Build.0 = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|x64.Build.0 = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B}.Release|x86.Build.0 = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|x64.ActiveCfg = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|x64.Build.0 = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|x86.ActiveCfg = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Debug|x86.Build.0 = Debug|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|Any CPU.Build.0 = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|x64.ActiveCfg = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|x64.Build.0 = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|x86.ActiveCfg = Release|Any CPU\n\t\t{53904BB5-68B2-497A-93BD-46423FBD239C}.Release|x86.Build.0 = Release|Any CPU\n\tEndGlobalSection\n\tGlobalSection(SolutionProperties) = preSolution\n\t\tHideSolutionNode = FALSE\n\tEndGlobalSection\n\tGlobalSection(NestedProjects) = preSolution\n\t\t{657861BD-19DA-4B93-937D-88B5C25E6D87} = {10398A75-959D-4271-913A-BE99E4ED5744}\n\t\t{062DD1FF-B466-4F40-BE1F-8D85EA3BDB6A} = {10398A75-959D-4271-913A-BE99E4ED5744}\n\t\t{B20C9B19-52F5-4AF1-B41D-D01294BEC6C9} = {10398A75-959D-4271-913A-BE99E4ED5744}\n\t\t{9BC9E01E-C12A-45D6-9910-B0642F36338B} = {B20C9B19-52F5-4AF1-B41D-D01294BEC6C9}\n\t\t{37D936ED-619C-47F8-95BD-63B966590A15} = {B20C9B19-52F5-4AF1-B41D-D01294BEC6C9}\n\tEndGlobalSection\n\tGlobalSection(ExtensibilityGlobals) = postSolution\n\t\tSolutionGuid = {C7E9329B-84FE-436E-8A44-26D8176C5C6F}\n\tEndGlobalSection\nEndGlobal\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.986328125,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/PragmaticFlow/NBomber/blob/dev/assets/nbomber_logo.png\" alt=\"NBomber logo\" width=\"600px\">\n</p>\n\n[![NuGet](https://img.shields.io/nuget/v/nbomber.svg)](https://www.nuget.org/packages/nbomber/)\n[![Nuget](https://img.shields.io/nuget/dt/nbomber.svg)](https://www.nuget.org/packages/nbomber/)\n\n**NBomber** - Distributed load-testing framework for .NET.\nIt is designed to test any system regardless of the protocol (HTTP/WebSockets/AMQP) or a semantic model (Pull/Push).\nIt allows to write distributed load test scenarios in plain C# or F#.\n\n[![NBomber 5](https://cdn.jsdelivr.net/gh/PragmaticFlow/NBomber@assets/v5.0/assets/NBomber_5_youtube.png)](https://youtu.be/Z51PyZvZNF8)\n\nNBomber as a modern framework provides:\n- Zero dependencies on protocol (HTTP/WebSockets/AMQP/SQL)\n- Zero dependencies on semantic model (Pull/Push)\n- Very flexible configuration and dead simple API\n- **Native Debug** - debug your tests using your favorite IDE (Visual Studio, VS Code, Rider)\n- [Informative Reports](https://nbomber.com/docs/reporting/reports): [HTML](https://nbomber.com/assets/reports/html_report.html)\n- Realtime reporting:\n    - [NBomber Studio](https://nbomber.com/docs/nbomber-studio/overview) - is a powerful management tool designed by NBomber. Monitor tests in real time with NBomber Studio and conduct detailed result analysis to identify trends.\n    - [Reporting Sinks](https://nbomber.com/docs/nbomber/reporting-sinks) for integration with popular systems for real-time monitoring\n        - [InfluxDB](https://nbomber.com/docs/reporting/realtime/influx-db)\n        - [TimescaleDB](https://nbomber.com/docs/reporting/realtime/timescale)\n        - [Grafana](https://nbomber.com/docs/reporting/realtime/grafana)\n- Protocols/extensions support:\n  - [HTTP](https://nbomber.com/docs/protocols/http),\n  - [WebSockets](https://nbomber.com/docs/protocols/websockets),\n  - [MQTT](https://nbomber.com/docs/protocols/mqtt),\n  - [WebBrowser](https://nbomber.com/docs/protocols/webbrowser)\n  - [Redis](https://github.com/PragmaticFlow/NBomber/tree/dev/examples/Demo/DB/Redis),\n  - [SQLite](https://github.com/PragmaticFlow/NBomber/tree/dev/examples/Demo/DB/SQLiteDB),\n  - MongoDB\n  - AMQP\n  - gRPC\n- [Data Feed](https://nbomber.com/docs/nbomber/data) - inject real or fake data into your tests\n- [Distributed Cluster](https://nbomber.com/docs/cluster/overview) - run your load tests in distributed mode\n- [Load Simulation](https://nbomber.com/docs/nbomber/load-simulation) - simulate realistic workloads\n- [Dynamic Workloads](https://nbomber.com/docs/nbomber/dynamic-workloads) - simulate dynamic workloads\n- [JSON Configuration](https://nbomber.com/docs/nbomber/json-config) - configure your load tests via JSON Config\n- [Asserts and Thresholds](https://nbomber.com/docs/nbomber/asserts_and_thresholds)\n- CI/CD integration ([xUnit](https://github.com/PragmaticFlow/NBomber/blob/dev/examples/xUnitExample/LoadTestExample.cs#L11) and NUnit runners are supported)\n\n### Why we build NBomber and what you can do with it?\nThe main reason behind NBomber is to provide a lightweight framework for writing load tests which you can use to test literally any system and simulate any production workload. We wanted to provide only a few abstractions so that we could describe any type of load and still have a simple, intuitive API.\nAnother goal is to provide building blocks to validate your POC (proof of concept) projects by applying any complex load distribution.\nWith NBomber you can test any PULL or PUSH system (HTTP, WebSockets, GraphQl, gRPC, SQL Databse, MongoDb, Redis etc).\nWith NBomber you can convert some of your integration tests to load tests easily.\n\n### What makes it very simple?\nOne of the design goals of NBomber is to keep API as minimal as possible.\nBecause of this, NBomber focuses on fully utilizing programming language(C#/F#) constructs instead of reinventing a new DSL that should be learned.\nIn other words, if you want to write a for loop, you don't need to learn a DSL for this.\n\n```csharp\nvar scenario = Scenario.Create(\"hello_world_scenario\", async context =>\n{\n    // you can define and execute any logic here,\n    // for example: send http request, SQL query etc\n    // NBomber will measure how much time it takes to execute your logic\n    await Task.Delay(1_000);\n\n    return Response.Ok();\n})\n.WithLoadSimulations(\n    Simulation.Inject(rate: 10,\n                      interval: TimeSpan.FromSeconds(1),\n                      during: TimeSpan.FromSeconds(30))\n);\n\nNBomberRunner\n    .RegisterScenarios(scenario)\n    .Run();\n```\n\n### Videos\n\n[Load Testing with C# and NBomber (Part 1)](https://youtu.be/XnK5sLhqXms)\n\n### Links\n- [Website](https://nbomber.com/)\n- [Documentation](https://nbomber.com/docs/getting-started/overview/)\n- [Examples](https://github.com/PragmaticFlow/NBomber/tree/dev/examples/Demo)\n\n### Frequently asked questions\n\n| Question                                                                        | Answer                                                                                                                       |\n|---------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------|\n| How NBomber can be installed?                                                   | NBomber is shipped as .NET library and can be installed via [NuGet package manager](https://www.nuget.org/packages/NBomber/) |\n| How can I run NBomber load test scenario?                                       | You can run it as Console application or as Unit test (xUnit/NUnit)                                                          |\n| Can I use NBomber for free?                                                     | You can use it for free, only for personal use. For the organization usage, you should have a license.                       |\n| Can multiple teams use the same license within one organization?                | Yes, a single license can be shared for the whole organization                                                               |\n| How many users from the same organization can use the license at the same time? | Unlimited                                                                                                                   |\n| Can I run NBomber Cluster without purchasing a license?                         | Yes, you can try [Local Dev Cluster](https://nbomber.com/docs/cluster/local-dev-cluster) mode                                |\n| How many instances can be installed with one NBomber license?                   | Unlimited                                                                                                                    |\n| How many NBomber executions can be run in parallel?                             | Unlimited                                                                                                                    |\n\n### About Us\n\nWe are US based company [NBomber LLC](https://www.linkedin.com/company/nbomber) (8 The Green, Dover, Delaware 19901, USA).\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.cake",
          "type": "blob",
          "size": 6.8740234375,
          "content": "#addin nuget:?package=Cake.Git&version=0.21.0\n\nusing LibGit2Sharp;\n\nvar target = Argument(\"target\", \"Default\");\nvar configuration = Argument(\"configuration\", \"Release\");\n\nvar committerName = Argument(\"username\", \"cake build script\");\nvar committerEmail = Argument(\"email\", \"pragmaticflow.org@gmail.com\");\nvar committerPassword = Argument(\"password\", \"\");\n\nvar solution = File(\"./NBomber.sln\");\nvar nbomberContractsProject = File(\"./src/NBomber.Contracts/NBomber.Contracts.fsproj\");\nvar nbomberProject = File(\"./src/NBomber/NBomber.fsproj\");\nvar nbomberVersion = XmlPeek(nbomberProject, \"//Version\");\n\nvar pluginsDir = Directory($\"./.nbomber-plugins/{nbomberVersion}\");\nvar plugins = new[]\n{\n    new PluginInfo\n    {\n        GitUrl = \"https://github.com/PragmaticFlow/NBomber.Http.git\",\n        DirPath = pluginsDir + Directory(\"NBomber.Http\"),\n        ProjPath = File(\"./src/NBomber.Http/NBomber.Http.fsproj\"),\n        SolutionPath = File(\"./NBomber.Http.sln\")\n    },\n    new PluginInfo\n    {\n        GitUrl = \"https://github.com/PragmaticFlow/NBomber.Sinks.InfluxDB.git\",\n        DirPath = pluginsDir + Directory(\"NBomber.Sinks.InfluxDB\"),\n        ProjPath = File(\"./src/NBomber.Sinks.InfluxDB/NBomber.Sinks.InfluxDB.fsproj\"),\n        SolutionPath = File(\"./NBomber.Sinks.InfluxDB.sln\")\n    }\n};\n\nTask(\"Clean\")\n    .Does(() =>\n{\n    CleanDirectories(\"./src/**/obj\");\n    CleanDirectories(\"./src/**/bin\");\n    CleanDirectories(\"./src/examples/**/obj\");\n    CleanDirectories(\"./src/examples/**/bin\");\n    CleanDirectories(\"./tests/**/obj\");\n    CleanDirectories(\"./tests/**/bin\");\n    CleanDirectories(\"./examples/**/obj\");\n    CleanDirectories(\"./examples/**/bin\");\n    CleanDirectories(\"./artifacts/\");\n});\n\nTask(\"Restore\")\n    .IsDependentOn(\"Clean\")\n    .Does(() =>\n{\n    DotNetCoreRestore(solution);\n});\n\nTask(\"Build\")\n    .IsDependentOn(\"Restore\")\n    .Does(() =>\n{\n    Information(\"NBomber Version: {0}\", nbomberVersion);\n\n    DotNetCoreBuild(solution, new DotNetCoreBuildSettings()\n    {\n        Configuration = configuration,\n        ArgumentCustomization = args => args.Append(\"--no-restore\"),\n    });\n});\n\nTask(\"Test\")\n    .Does(() =>\n{\n    var projects = GetFiles(\"./tests/**/*.fsproj\");\n    foreach(var project in projects)\n    {\n        Information(\"Testing project \" + project);\n\n        DotNetCoreTest(project.ToString(),\n            new DotNetCoreTestSettings()\n            {\n                Configuration = configuration,\n                NoBuild = true,\n                ArgumentCustomization = args => args.Append(\"--no-restore\"),\n            });\n    }\n});\n\nTask(\"Pack\")\n\t.IsDependentOn(\"Build\")\n    .Does(() =>\n{\n    // update plugin project version\n    Information(\"Updating NBomber.Contracts project version on '{0}'\", nbomberVersion);\n    var pluginVersionXPath = \"/Project/PropertyGroup/Version\";\n    XmlPoke(nbomberContractsProject, pluginVersionXPath, nbomberVersion);\n\n    var settings = new DotNetCorePackSettings\n    {\n        OutputDirectory = \"./artifacts/\",\n        NoBuild = false,\n        IncludeSource = true,\n        IncludeSymbols = true,\n        Configuration = configuration,\n        ArgumentCustomization = args => args.Append(\"-p:SymbolPackageFormat=snupkg\")\n    };\n\n    DotNetCorePack(nbomberContractsProject, settings);\n\tDotNetCorePack(nbomberProject, settings);\n});\n\nTask(\"BuildPlugins\")\n    .Does(() =>\n{\n    if (DirectoryExists(pluginsDir))\n        DeleteDirectory(pluginsDir, new DeleteDirectorySettings { Recursive = true, Force = true });\n\n    EnsureDirectoryExists(pluginsDir);\n\n    foreach (var plugin in plugins)\n    {\n        var branchName = \"dev\";\n        var projPath = plugin.GetAbsoluteProjPath();\n        var slnPath = plugin.GetAbsoluteSolutionPath();\n\n        Information(\"Cloning {0} branch for repository {1} to directory {2}\",\n            branchName, plugin.GitUrl, pluginsDir);\n\n        GitClone(plugin.GitUrl, plugin.DirPath, new GitCloneSettings { BranchName = branchName });\n\n        // update plugin project version\n        Information(\"Updating plugin project version on '{0}'\", nbomberVersion);\n        var pluginVersionXPath = \"/Project/PropertyGroup/Version\";\n        XmlPoke(projPath, pluginVersionXPath, nbomberVersion);\n\n        // update NBomber reference version\n        Information(\"Updating NBomber reference package on '{0}'\", nbomberVersion);\n        var nbomberReferenceVersionXPath = \"/Project/ItemGroup/PackageReference[@Include = 'NBomber']/@Version\";\n        XmlPoke(projPath, nbomberReferenceVersionXPath, nbomberVersion);\n\n        // update appveyor.yml\n        Information(\"Updating appveyor.yml\");\n        var appveyorPath = System.IO.Path.Combine(plugin.DirPath, \"appveyor.yml\");\n        var appveyorContent = System.IO.File.ReadAllLines(appveyorPath);\n        appveyorContent[0] = String.Format(\"version: {0}-{{build}}\", nbomberVersion);\n        System.IO.File.WriteAllLines(appveyorPath, appveyorContent);\n\n        // build and test plugin\n        Information(\"Build plugin solution\");\n        DotNetCoreBuild(slnPath, new DotNetCoreBuildSettings { Configuration = configuration });\n\n        // commit all changes\n        Information(\"Commiting all changes\");\n        GitAddAll(plugin.DirPath);\n\n        try\n        {\n            // commit can fail in case of 0 changes\n            GitCommit(plugin.DirPath, committerName, committerEmail, String.Format(\"version: {0}\", nbomberVersion));\n        }\n        catch (Exception ex)\n        {\n            Warning(ex.ToString());\n        }\n    }\n});\n\nTask(\"PublishPlugins\")\n    .Does(() =>\n{\n    foreach (var plugin in plugins)\n    {\n        Information(\"Publish plugin: '{0}'\", plugin.DirPath);\n        GitPush(plugin.DirPath, committerName, committerPassword);\n    }\n});\n\nTask(\"MergePluginsToMaster\")\n    .Does(() =>\n{\n    if (DirectoryExists(pluginsDir))\n        DeleteDirectory(pluginsDir, new DeleteDirectorySettings { Recursive = true, Force = true });\n\n    EnsureDirectoryExists(pluginsDir);\n\n    foreach (var plugin in plugins)\n    {\n        Information(\"clone master branch for plugin: '{0}'\", plugin.GitUrl);\n        GitClone(plugin.GitUrl, plugin.DirPath, new GitCloneSettings { BranchName = \"master\" });\n\n        Information(\"merge dev into master\");\n        using (var repo = new Repository(plugin.DirPath))\n        {\n            var comitterInfo = new Signature(committerName, committerEmail, System.DateTime.UtcNow);\n            var mergeResult = repo.Merge(repo.Branches[\"remotes/origin/dev\"], comitterInfo);\n        }\n\n        Information(\"add tag\");\n        GitTag(plugin.DirPath, $\"version-{nbomberVersion}\");\n    }\n});\n\nTask(\"Default\")\n    .IsDependentOn(\"Build\");\n\nRunTarget(target);\n\npublic class PluginInfo\n{\n    public string GitUrl { get; set; }\n    public ConvertableDirectoryPath DirPath { get; set; }\n    public ConvertableFilePath ProjPath { get; set; }\n    public ConvertableFilePath SolutionPath { get; set; }\n    public ConvertableFilePath GetAbsoluteProjPath () => DirPath + ProjPath;\n    public ConvertableFilePath GetAbsoluteSolutionPath () => DirPath + SolutionPath;\n}\n"
        },
        {
          "name": "build.ps1",
          "type": "blob",
          "size": 7.2431640625,
          "content": "##########################################################################\n# This is the Cake bootstrapper script for PowerShell.\n# This file was downloaded from https://github.com/cake-build/resources\n# Feel free to change this file to fit your needs.\n##########################################################################\n\n<#\n\n.SYNOPSIS\nThis is a Powershell script to bootstrap a Cake build.\n\n.DESCRIPTION\nThis Powershell script will download NuGet if missing, restore NuGet tools (including Cake)\nand execute your Cake build script with the parameters you provide.\n\n.PARAMETER Script\nThe build script to execute.\n.PARAMETER Target\nThe build script target to run.\n.PARAMETER Configuration\nThe build configuration to use.\n.PARAMETER Verbosity\nSpecifies the amount of information to be displayed.\n.PARAMETER ShowDescription\nShows description about tasks.\n.PARAMETER DryRun\nPerforms a dry run.\n.PARAMETER Experimental\nUses the nightly builds of the Roslyn script engine.\n.PARAMETER Mono\nUses the Mono Compiler rather than the Roslyn script engine.\n.PARAMETER SkipToolPackageRestore\nSkips restoring of packages.\n.PARAMETER ScriptArgs\nRemaining arguments are added here.\n\n.LINK\nhttps://cakebuild.net\n\n#>\n\n[CmdletBinding()]\nParam(\n    [string]$Script = \"build.cake\",\n    [string]$Target,\n    [string]$Configuration,\n    [ValidateSet(\"Quiet\", \"Minimal\", \"Normal\", \"Verbose\", \"Diagnostic\")]\n    [string]$Verbosity,\n    [switch]$ShowDescription,\n    [Alias(\"WhatIf\", \"Noop\")]\n    [switch]$DryRun,\n    [switch]$Experimental,\n    [switch]$Mono,\n    [switch]$SkipToolPackageRestore,\n    [Parameter(Position=0,Mandatory=$false,ValueFromRemainingArguments=$true)]\n    [string[]]$ScriptArgs\n)\n\n[Reflection.Assembly]::LoadWithPartialName(\"System.Security\") | Out-Null\nfunction MD5HashFile([string] $filePath)\n{\n    if ([string]::IsNullOrEmpty($filePath) -or !(Test-Path $filePath -PathType Leaf))\n    {\n        return $null\n    }\n\n    [System.IO.Stream] $file = $null;\n    [System.Security.Cryptography.MD5] $md5 = $null;\n    try\n    {\n        $md5 = [System.Security.Cryptography.MD5]::Create()\n        $file = [System.IO.File]::OpenRead($filePath)\n        return [System.BitConverter]::ToString($md5.ComputeHash($file))\n    }\n    finally\n    {\n        if ($file -ne $null)\n        {\n            $file.Dispose()\n        }\n    }\n}\n\nfunction GetProxyEnabledWebClient\n{\n    $wc = New-Object System.Net.WebClient\n    $proxy = [System.Net.WebRequest]::GetSystemWebProxy()\n    $proxy.Credentials = [System.Net.CredentialCache]::DefaultCredentials\n    $wc.Proxy = $proxy\n    return $wc\n}\n\nWrite-Host \"Preparing to run build script...\"\n\nif(!$PSScriptRoot){\n    $PSScriptRoot = Split-Path $MyInvocation.MyCommand.Path -Parent\n}\n\n$TOOLS_DIR = Join-Path $PSScriptRoot \"tools\"\n$ADDINS_DIR = Join-Path $TOOLS_DIR \"Addins\"\n$MODULES_DIR = Join-Path $TOOLS_DIR \"Modules\"\n$NUGET_EXE = Join-Path $TOOLS_DIR \"nuget.exe\"\n$CAKE_EXE = Join-Path $TOOLS_DIR \"Cake/Cake.exe\"\n$NUGET_URL = \"https://dist.nuget.org/win-x86-commandline/latest/nuget.exe\"\n$PACKAGES_CONFIG = Join-Path $TOOLS_DIR \"packages.config\"\n$PACKAGES_CONFIG_MD5 = Join-Path $TOOLS_DIR \"packages.config.md5sum\"\n$ADDINS_PACKAGES_CONFIG = Join-Path $ADDINS_DIR \"packages.config\"\n$MODULES_PACKAGES_CONFIG = Join-Path $MODULES_DIR \"packages.config\"\n\n# Make sure tools folder exists\nif ((Test-Path $PSScriptRoot) -and !(Test-Path $TOOLS_DIR)) {\n    Write-Verbose -Message \"Creating tools directory...\"\n    New-Item -Path $TOOLS_DIR -Type directory | out-null\n}\n\n# Make sure that packages.config exist.\nif (!(Test-Path $PACKAGES_CONFIG)) {\n    Write-Verbose -Message \"Downloading packages.config...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile(\"https://cakebuild.net/download/bootstrapper/packages\", $PACKAGES_CONFIG) } catch {\n        Throw \"Could not download packages.config.\"\n    }\n}\n\n# Try find NuGet.exe in path if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Trying to find nuget.exe in PATH...\"\n    $existingPaths = $Env:Path -Split ';' | Where-Object { (![string]::IsNullOrEmpty($_)) -and (Test-Path $_ -PathType Container) }\n    $NUGET_EXE_IN_PATH = Get-ChildItem -Path $existingPaths -Filter \"nuget.exe\" | Select -First 1\n    if ($NUGET_EXE_IN_PATH -ne $null -and (Test-Path $NUGET_EXE_IN_PATH.FullName)) {\n        Write-Verbose -Message \"Found in PATH at $($NUGET_EXE_IN_PATH.FullName).\"\n        $NUGET_EXE = $NUGET_EXE_IN_PATH.FullName\n    }\n}\n\n# Try download NuGet.exe if not exists\nif (!(Test-Path $NUGET_EXE)) {\n    Write-Verbose -Message \"Downloading NuGet.exe...\"\n    try {\n        $wc = GetProxyEnabledWebClient\n        $wc.DownloadFile($NUGET_URL, $NUGET_EXE)\n    } catch {\n        Throw \"Could not download NuGet.exe.\"\n    }\n}\n\n# Save nuget.exe path to environment to be available to child processed\n$ENV:NUGET_EXE = $NUGET_EXE\n\n# Restore tools from NuGet?\nif(-Not $SkipToolPackageRestore.IsPresent) {\n    Push-Location\n    Set-Location $TOOLS_DIR\n\n    # Check for changes in packages.config and remove installed tools if true.\n    [string] $md5Hash = MD5HashFile($PACKAGES_CONFIG)\n    if((!(Test-Path $PACKAGES_CONFIG_MD5)) -Or\n      ($md5Hash -ne (Get-Content $PACKAGES_CONFIG_MD5 ))) {\n        Write-Verbose -Message \"Missing or changed package.config hash...\"\n        Remove-Item * -Recurse -Exclude packages.config,nuget.exe\n    }\n\n    Write-Verbose -Message \"Restoring tools from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$TOOLS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet tools.\"\n    }\n    else\n    {\n        $md5Hash | Out-File $PACKAGES_CONFIG_MD5 -Encoding \"ASCII\"\n    }\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore addins from NuGet\nif (Test-Path $ADDINS_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $ADDINS_DIR\n\n    Write-Verbose -Message \"Restoring addins from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$ADDINS_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet addins.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Restore modules from NuGet\nif (Test-Path $MODULES_PACKAGES_CONFIG) {\n    Push-Location\n    Set-Location $MODULES_DIR\n\n    Write-Verbose -Message \"Restoring modules from NuGet...\"\n    $NuGetOutput = Invoke-Expression \"&`\"$NUGET_EXE`\" install -ExcludeVersion -OutputDirectory `\"$MODULES_DIR`\"\"\n\n    if ($LASTEXITCODE -ne 0) {\n        Throw \"An error occurred while restoring NuGet modules.\"\n    }\n\n    Write-Verbose -Message ($NuGetOutput | out-string)\n\n    Pop-Location\n}\n\n# Make sure that Cake has been installed.\nif (!(Test-Path $CAKE_EXE)) {\n    Throw \"Could not find Cake.exe at $CAKE_EXE\"\n}\n\n\n\n# Build Cake arguments\n$cakeArguments = @(\"$Script\");\nif ($Target) { $cakeArguments += \"-target=$Target\" }\nif ($Configuration) { $cakeArguments += \"-configuration=$Configuration\" }\nif ($Verbosity) { $cakeArguments += \"-verbosity=$Verbosity\" }\nif ($ShowDescription) { $cakeArguments += \"-showdescription\" }\nif ($DryRun) { $cakeArguments += \"-dryrun\" }\nif ($Experimental) { $cakeArguments += \"-experimental\" }\nif ($Mono) { $cakeArguments += \"-mono\" }\n$cakeArguments += $ScriptArgs\n\n# Start Cake\nWrite-Host \"Running build script...\"\n&$CAKE_EXE $cakeArguments\nexit $LASTEXITCODE\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.4873046875,
          "content": "#!/usr/bin/env bash\n\n# Define default arguments.\nSCRIPT=\"build.cake\"\nCAKE_ARGUMENTS=()\n\n# Parse arguments.\nfor i in \"$@\"; do\n    case $1 in\n        -s|--script) SCRIPT=\"$2\"; shift ;;\n        --) shift; CAKE_ARGUMENTS+=(\"$@\"); break ;;\n        *) CAKE_ARGUMENTS+=(\"$1\") ;;\n    esac\n    shift\ndone\n\n# Restore Cake tool\ndotnet tool restore\n\nif [ $? -ne 0 ]; then\n    echo \"An error occured while installing Cake.\"\n    exit 1\nfi\n\n# Start Cake\ndotnet tool run dotnet-cake \"$SCRIPT\" \"${CAKE_ARGUMENTS[@]}\""
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "global.json",
          "type": "blob",
          "size": 0.1025390625,
          "content": "{\n  \"sdk\": {\n    \"version\": \"7.0.0\",\n    \"rollForward\": \"latestMajor\",\n    \"allowPrerelease\": false\n  }\n}"
        },
        {
          "name": "performance",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}