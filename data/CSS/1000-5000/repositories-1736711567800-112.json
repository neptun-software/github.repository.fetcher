{
  "metadata": {
    "timestamp": 1736711567800,
    "page": 112,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tapquo/Lungo.js",
      "stars": 2401,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "build\nnode_modules\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.6953125,
          "content": "[submodule \"src/stylesheets/STYLmethods\"]\n\tpath = src/stylesheets/STYLmethods\n\turl = https://github.com/soyjavi/STYLmethods.git\n[submodule \"example/components/quojs\"]\n\tpath = example/components/quojs\n\turl = https://github.com/soyjavi/package-quojs.git\n[submodule \"package/lungo\"]\n\tpath = package/lungo\n\turl = https://github.com/tapquo/package-lungo.git\n[submodule \"package/lungo.theme\"]\n\tpath = package/lungo.theme\n\turl = https://github.com/tapquo/package-lungo.theme.git\n[submodule \"package/lungo.icon\"]\n\tpath = package/lungo.icon\n\turl = https://github.com/tapquo/lungo.icon.git\n[submodule \"package/lungo.thirdparties\"]\n\tpath = package/lungo.thirdparties\n\turl = https://github.com/tapquo/lungo.thirdparties.git\n"
        },
        {
          "name": "GruntFile.coffee",
          "type": "blob",
          "size": 4.1826171875,
          "content": "module.exports = (grunt) ->\n  grunt.initConfig\n    pkg: grunt.file.readJSON \"package/lungo/component.json\"\n\n    meta:\n      file: 'lungo'\n      temp: \"build\",\n      package: \"package\",\n      plugins: \"src/plugins\",\n      # BETA\n      # endpoint: \"example/components\",\n      # version: \".brownie\",\n      # RELEASE\n      endpoint: \"package\",\n      version: \"\",\n      banner: '/* <%= pkg.name %> v<%= pkg.version %> - <%= grunt.template.today(\"yyyy/m/d\") %>\\n' +\n              '   <%= pkg.homepage %>\\n' +\n              '   Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>' +\n              ' - Licensed <%= _.pluck(pkg.license, \"type\").join(\", \") %> */\\n'\n\n    source:\n      coffee: [\n        'src/Lungo.coffee',\n        'src/modules/Lungo.Attributes.coffee',\n        'src/modules/Lungo.Cache.coffee',\n        'src/modules/Lungo.Constants.coffee',\n        'src/modules/Lungo.Core.coffee',\n        'src/modules/Lungo.Dom.coffee',\n        'src/modules/Lungo.Events.coffee',\n        'src/modules/Lungo.Fallback.coffee',\n        'src/modules/Lungo.Init.coffee',\n        'src/modules/Lungo.Notification.coffee',\n        'src/modules/Lungo.Resource.coffee',\n        'src/modules/Lungo.Scroll.coffee',\n        'src/modules/Lungo.Service.coffee',\n        'src/modules/Lungo.Router.Phone.coffee',\n        'src/modules/Lungo.Router.Tablet.coffee',\n        'src/modules/Lungo.Aside.coffee',\n        'src/modules/Lungo.Section.coffee',\n        'src/modules/Lungo.Article.coffee',\n        'src/boot/*.coffee',\n        'src/element/*.coffee']\n      stylus: [\n        'src/stylesheets/lungo.base.styl',\n        'src/stylesheets/lungo.layout.styl',\n        'src/stylesheets/lungo.layout.*.styl',\n        'src/stylesheets/lungo.widget.styl',\n        'src/stylesheets/lungo.widget.*.styl',\n        'src/stylesheets/lungo.media.*.styl',\n        'src/stylesheets/lungo.animation.styl',\n        'src/stylesheets/lungo.animation.*.styl']\n      theme: [\n        'src/stylesheets/theme/theme.*.styl']\n      icons: [\n        'src/stylesheets/lungo.icon**.styl']\n      calendar:\n        coffee: 'src/plugins/calendar/**.coffee'\n        stylus: 'src/plugins/calendar/**.styl'\n\n    coffee:\n      core: files: '<%=meta.temp%>/<%=meta.file%>.debug.js': '<%= source.coffee %>'\n      calendar: files: 'package/lungo.calendar/lungo.calendar.js': '<%= source.calendar.coffee %>'\n\n    uglify:\n      options: compress: false, banner: \"<%= meta.banner %>\"\n      engine: files: '<%=meta.endpoint%>/<%=meta.file%><%=meta.version%>/<%=meta.file%>.js': '<%=meta.temp%>/<%=meta.file%>.debug.js'\n\n    stylus:\n      core:\n        options: compress: true, import: [ '__init']\n        files: '<%=meta.endpoint%>/<%=meta.file%><%=meta.version%>/<%=meta.file%>.css': '<%=source.stylus%>'\n      theme:\n        options: compress: false, import: [ '__init']\n        files: '<%=meta.endpoint%>/<%=meta.file%><%=meta.version%>/<%=meta.file%>.theme.css': '<%=source.theme%>'\n      icons:\n        files: '<%=meta.package%>/<%=meta.file%>.icon/<%=meta.file%>.icon.css': '<%=source.icons%>'\n      calendar:\n        files: 'package/lungo.calendar/lungo.calendar.css': '<%=source.calendar.stylus%>'\n\n    copy:\n      theme:\n        expand: true, flatten: true, src: '<%=source.theme%>', dest: '<%=meta.package%>/<%=meta.file%>.theme/'\n      icon:\n        expand: false, flatten: true, src: '<%=meta.package%>/<%=meta.file%>.icon/<%=meta.file%>.icon.css', dest: '<%=meta.endpoint%>/<%=meta.file%><%=meta.version%>/<%=meta.file%>.icon.css'\n\n    watch:\n      coffee:\n        files: ['<%= source.coffee %>']\n        tasks: [\"coffee:core\"]\n      stylus:\n        files: ['<%= source.stylus %>', 'src/stylesheets/__init.styl',]\n        tasks: [\"stylus:core\"]\n      theme:\n        files: ['<%= source.theme %>']\n        tasks: [\"stylus:theme\"]\n\n      calendar:\n        files: ['<%= source.calendar.coffee %>','<%= source.calendar.stylus %>']\n        tasks: [\"coffee:calendar\", \"stylus:calendar\"]\n\n  grunt.loadNpmTasks \"grunt-contrib-coffee\"\n  grunt.loadNpmTasks \"grunt-contrib-concat\"\n  grunt.loadNpmTasks \"grunt-contrib-uglify\"\n  grunt.loadNpmTasks \"grunt-contrib-stylus\"\n  grunt.loadNpmTasks \"grunt-contrib-copy\"\n  grunt.loadNpmTasks \"grunt-contrib-watch\"\n\n  grunt.registerTask \"default\", [\"coffee\", \"uglify\", \"stylus\", \"copy\"]\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 8.9365234375,
          "content": "#LUNGOJS LICENSE\nVersion 2.2.0 \n\n##1. Preamble\nThis Agreement governs the relationship between you, a duly registered company, (hereinafter: Licensee) and TAPQUO S.L., a duly registered company in Spain whose principal place of business is C/Campo Volantín, 17, Bajo Izq., 48007, Bilbao, Spain (Hereinafter: Licensor). This Agreement sets the terms, rights, restrictions and obligations on using [LungoJS] (hereinafter: The Software) created and owned by Licensor, as detailed herein\n\n##2. License Grant\nLicensor hereby grants Licensee a Personal, Non-assignable & non-transferable, Commercial, Royalty free, Including the rights to create but not distribute derivative works, Non-exclusive license, all with accordance with the terms set forth and other legal restrictions set forth in 3rd party software used while running Software.\n###2.1. Limited\nLicensee may use Software for the purpose of:\n\n**2.1.1. Running Software on Licensee’s Website[s] and Server[s];**\n\n**2.1.2. Allowing 3rd Parties to run Software on Licensee’s Website[s] and Server[s];**\n\n**2.1.3. Publishing Software’s output to Licensee and 3rd Parties;**\n\n**2.1.4. Distribute verbatim copies of Software’s output (including compiled binaries);**\n\n**2.1.5. Modify Software to suit Licensee’s needs and specifications.**\n\n\n###2.2. Binary Restricted\nLicensee may sublicense Software as a part of a larger work containing more than Software, distributed solely in Object or Binary form under a personal, non-sublicensable, limited license. Such redistribution shall be limited to {apps} codebases.\n\n###2.3. Non Assignable & Non-Transferable\nLicensee may not assign or transfer his rights and duties under this license.\n\n###2.4. Commercial, Royalty Free\nLicensee may use Software for any purpose, including paid-services, without any royalties.\n\n###2.5. Including the Right to Create Derivative Works\nLicensee may create derivative works based on Software, including amending Software’s source code, modifying it, integrating it into a larger work or removing portions of Software, as long as no distribution of the derivative works is made.\n\n##3. Term & Termination\nThe Term of this license shall be until terminated. Licensor may terminate this Agreement, including Licensee’s license in the case where Licensee:\n**Became insolvent or otherwise entered into any liquidation process; or exported The Software to any jurisdiction where licensor may not enforce his rights under this agreements in; or Licensee was in breach of any of this license's terms and conditions and such breach was not cured, immediately upon notification; or Licensee in breach of any of the terms of clause 2 to this license; or Licensee otherwise entered into any arrangement which caused Licensor to be unable to enforce his rights under this License.**\n\n##4. Payment\nIn consideration of the License granted under clause 2, Licensee shall pay Licensor a {fee}, via PayPal or any other mean which Licensor may deem adequate. Failure to perform payment shall construe as material breach of this Agreement.\n\n##5. Upgrades, Updates and Fixes\nLicensor may provide Licensee, from time to time, with Upgrades, Updates or Fixes, as detailed herein and according to his sole discretion. Licensee hereby warrants to keep The Software up-to-date and install all relevant updates and fixes, and may, at his sole discretion, purchase upgrades, according to the rates set by Licensor. Licensor shall provide any update or Fix free of charge; however, nothing in this Agreement shall require Licensor to provide Updates or Fixes.\n\n###5.1. Upgrades\nfor the purpose of this license, an Upgrade shall be a material amendment in The Software, which contains new features and or major performance improvements and shall be marked as a new version number. For example, should Licensee purchase The Software under version 1.X.X, an upgrade shall commence under number 2.0.0.\n\n###5.2. Updates\nfor the purpose of this license, an update shall be a minor amendment in The Software, which may contain new features or minor improvements and shall be marked as a new sub-version number. For example, should Licensee purchase The Software under version 1.1.X, an upgrade shall commence under number 1.2.0.\n\n###5.3. Fix\nfor the purpose of this license, a fix shall be a minor amendment in The Software, intended to remove bugs or alter minor features which impair the The Software's functionality. A fix shall be marked as a new sub-sub-version number. For example, should Licensee purchase Software under version 1.1.1, an upgrade shall commence under number 1.1.2.\n\n##6. Support\nSoftware is provided under an AS-IS basis and without any support, updates or maintenance. Nothing in this Agreement shall require Licensor to provide Licensee with support or fixes to any bug, failure, mis-performance or other defect in The Software.\n###6.1. Bug Notification\nLicensee may provide Licensor of details regarding any bug, defect or failure in The Software promptly and with no delay from such event; Licensee shall comply with Licensor's request for information regarding bugs, defects or failures and furnish him with information, screenshots and try to reproduce such bugs, defects or failures.\n\n###6.2. Feature Request\nLicensee may request additional features in Software, provided, however, that (i) Licesee shall waive any claim or right in such feature should feature be developed by Licensor; (ii) Licensee shall be prohibited from developing the feature, or disclose such feature request, or feature, to any 3rd party directly competing with Licensor or any 3rd party which may be, following the development of such feature, in direct competition with Licensor; (iii) Licensee warrants that feature does not infringe any 3rd party patent, trademark, trade-secret or any other intellectual property right; and (iv) Licensee developed, envisioned or created the feature solely by himself.\n\n##7. Liability\nTo the extent permitted under Law, The Software is provided under an AS-IS basis. Licensor shall never, and without any limit, be liable for any damage, cost, expense or any other payment incurred by Licesee as a result of Software’s actions, failure, bugs and/or any other interaction between The Software  and Licesee’s end-equipment, computers, other software or any 3rd party, end-equipment, computer or services.  Moreover, Licensor shall never be liable for any defect in source code written by Licensee when relying on The Software or using The Software’s source code.\n\n##8. Warranty:  \n###8.1. Intellectual Property\nLicensor hereby warrants that The Software does not violate or infringe any 3rd party claims in regards to intellectual property, patents and/or trademarks and that to the best of its knowledge no legal action has been taken against it for any infringement or violation of any 3rd party intellectual property rights.\n\n###8.2. No-Warranty\nThe Software is provided without any warranty; Licensor hereby disclaims any warranty that The Software shall be error free, without defects or code which may cause damage to Licensee’s computers or to Licensee, and that Software shall be functional. Licensee shall be solely liable to any damage, defect or loss incurred as a result of operating software and undertake the risks contained in running The Software on License’s Server[s] and Website[s].\n\n###8.3. Prior Inspection\nLicensee hereby states that he inspected The Software thoroughly and found it satisfactory and adequate to his needs, that it does not interfere with his regular operation and that it does meet the standards and scope of his computer systems and architecture. Licensee found that The Software interacts with his development, website and server environment and that it does not infringe any of End User License Agreement of any software Licensee may use in performing his services. Licensee hereby waives any claims regarding The Software's incompatibility, performance, results and features, and warrants that he inspected the The Software.\n\n##9. No Refunds\nLicensee warrants that he inspected The Software according to clause 7(c) and that it is adequate to his needs. Accordingly, as The Software is intangible goods, Licensee shall not be, ever, entitled to any refund, rebate, compensation or restitution for any reason whatsoever, even if The Software contains material flaws.\n\n##10. Indemnification\nLicensee hereby warrants to hold Licensor harmless and indemnify Licensor for any lawsuit brought against it in regards to Licensee’s use of The Software in means that violate, breach or otherwise circumvent this license, Licensor's intellectual property rights or Licensor's title in The Software. Licensor shall promptly notify Licensee in case of such legal action and request Licensee’s consent prior to any settlement in relation to such lawsuit or claim.\n\n##11. Governing Law, Jurisdiction\nLicensee hereby agrees not to initiate class-action lawsuits against Licensor in relation to this license and to compensate Licensor for any legal fees, cost or attorney fees should any claim brought by Licensee against Licensor be denied, in part or in full."
        },
        {
          "name": "README-ES.md",
          "type": "blob",
          "size": 38.552734375,
          "content": "LungoJS\n=======\nLungoJS es un framework HTML5 pensado en los desarrolladores a los que también les gusta el diseño, desarrollado para que crear aplicaciones compatibles con todos los dispositivos.\n\n * **Apps HTML5 optimizadas**: Soporta los open web standards como HMTL5, CSS3 y JavaScript. Proporciona un entorno consistente basado en navegador para cualquier dispositivo movil, TVs y aplicaciones de escritorio.\n\n * **Proyecto Open Source**: Cada nueva linea de código en Lungo es bienvenida, esperamos que cualquier desarrollador con mente intrépida nos ayude a mejorar día a día Lungo.\n\n * **Una poderos API JavaScript**: Existen muchas maneras de desarrollar un app pero no todas ellas de manera optimizada. Lungo te ofrece una API robusta con la que puedes tener completo control de todo lo que suceda en tu App.\n\n * **Soporte multiplataforma**: Es sabido que desarrollar apps para cada plataforma tiene un coste alto y mas aún si se tienen en cuenta el desarrollo para tablets y SmartTVs. Lungo se ajusta a todos ellos crean una interfaz de usuario única para todos ellos.\n\n*Current version: [2.2.0]()*\n\n\n\nEmpieza a usarlo\n----------------\nLa idea de Lungo surgió en el año 2010 cuando Javi Jiménez Villar ([**soyjavi**](https://twitter.com/soyjavi)) se dio cuenta de que los frameworks existentes en aquella época no eran muy versátiles y no hacían uso de las principales funcionalidades de HMTL5.\n\n### Comunidad\nSi esta documentación se te queda corta siempre te puedes suscribir a la comunidad de Lungo para compartir experiencias y conocimientos. En [Inglés](https://groups.google.com/forum/#!forum/lungojs) o [Castellano](https://groups.google.com/forum/#!forum/lungojs_es), tu decides.\n\n\n### GitHub\nEste es un proyecto opensource, asi que sientete libre de hacer un fork del proyecto para ayudarnos a mejorar Lungo. Todo el código fuente está escrito en CoffeScript y Stylus, como es código limpio podrás modificarlo de manera sencilla y realizar tus aportes.\n\n[https://github.com/tapquo/lungo.js](https://github.com/tapquo/lungo.js)\n\n### Licencia\nLungo esta bajo una licencia GPLv3 para mas información [LICENSE](https://github.com/tapquo/Lungo.js/blob/master/LICENSE.md).\n\n### Ayudanos a mejorar\nPor favor no tengas ninguna duda en contactarnos si crees que puedes realizar mejoras sobre la API. Si piensas que deberíamos dar soporte a alguna nueva funcionalidad o si encuentras un bug, utiliza GitHub issues](https://github.com/tapquo/lungo.js/issues). Sientete libre de mejorar esta documentación y mandanos tus *pull requests* con tus mejoras.\n\nPara contactar con nosotros o con otros desarrolladores acerca de la API de Lungo suscribete a nuestra [**lista de correo**](https://groups.google.com/forum/#!forum/lungojs).\n\nFácil de Prototipar\n===================\nEl objetivo es crear una estructura semántica en todo el proyecto, desde el lenguaje de marcado HTML, pasando por las clases CSS bien organizadas y acabando con la API JavaScript. Lungo ofrece una gran sencillez a la hora de hacer un prototipo rápido de tu aplicación, no te será necesario escribir ninguna línea de JavaScript para visualizar como debería comportarse tu aplicación. En esta documentación aprenderemos cuales son los elementos semánticos que utiliza Lungo y como se puede crear una aplicación unicamente con HTML. Así que no le demos mas vueltas y comencemos!\n\nEstructura\n----------\nEstas son las dependencias de tu aplicación Lungo, como mínimo deberia contener las siguientes:\n\n\thtml\n\t<link rel=\"stylesheet\" href=\"components/lungo.brownie/lungo.css\">\n\t<link rel=\"stylesheet\" href=\"components/lungo.icon/lungo.icon.css\">\n\t<link rel=\"stylesheet\" href=\"components/lungo.brownie/lungo.theme.css\">\n\t<script src=\"components/quojs/quo.js\"></script>\n\t<script src=\"components/lungo/lungo.js\"></script>\n\n\n`<section>` es el contenedor principal de la interfaz de usuario en tu app y `<article>` se debe colocar dentro de tu section,cada section y article deberían tener un ID único.\n``` html\n<section id=\"main\">\n    <article id=\"main-article\">\n        Your content\n    </article>\n</section>\n```\n\n<strong>Recuerda:</strong>La función JavaScript para inicializar el entorno de Lungo:\n``` javascript\nLungo.init({});\n```\n\n#### Carga de los recursos síncronos al inicializar Lungo\nPara que te sea mas sencillo crear y modificar tu app puedes crear las secciones en ficheros htmls separados y cargarlos de manerá síncrona, dejando tu fichero html principal mucho mas limpio y organizando mejor tu código.\n``` javascript\n//Cargar recurso al inicio\nLungo.init({\n    name: 'example',\n    resources: ['section_to_load.html']\n});\n```\n\n#### Carga de los recursos asíncronos mediante enlance\nSolo existe una manera de cargar los recursos de manera asíncrona, simplemente añade a la etiqueta `<a>` el atributo data-async con el enlace a tu sección.\n``` html\n<section id=\"loader\" data-transition=\"\">\n    <article id=\"art1\" class=\"active\">\n        <a href=\"#main\" data-router=\"section\" data-async=\"section_to_load.html\">\n            Go to section\n        </a>\n    </article>\n</section>\n```\n\n\nElementos básicos\n-----------------\nLungo utiliza el lenguaje semántico introducido en HMTL5, así que puedes añadir estos elementos utilizando las etiquetas semánticas.\n\n### Section y Article\nUna `<section>` es una vista donde se desplegará el contenido y existen muchos subelementos como `<header>`, `<footer>` y `<article>`.\n``` html\n<section id=\"main\">\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\nEl contenido de una `<section>` en particular esta estructurado por los `<article>`. Una `<section>` puede contener tantos `<article>` como quieras. El artículo que tiene preferencia para visualizarse es el que tenga la `class=\"active\" como atributo.\n\n``` html\n<section id=\"main_section\">\n    <header data-title=\"example\"></header>\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\n\n### Header\nCada `<section>` puede contener un `<header>` donde se visualizará el título de la sección en donde estés. También puedes añadirle si quieres botones para la navegación, que te muevan de una sección a otra, vuelvan a la sección anterior, cambien de artículo o simplemente abran el menu aside.\n\n``` html\n<section id=\"main_section\">\n    <header data-title=\"example\"></header>\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\n\n### Footer\nDe la misma manera cada `<section>` puede contener un `<footer>` y añadirle botones para navegar entre artículos, secciones o incluso menus laterales (aside).\n\n``` html\n<section id=\"main_section\">\n    <article id=\"main\" class=\"active\">\n        {{CONTENT}}\n    </article>\n    <footer>\n        <nav>\n            <a href=\"#\" data-icon=\"menu\" class=\"active\"></a>\n            <a href=\"#\" data-icon=\"share\"></a>\n            <a href=\"#\" data-icon=\"user\"></a>\n            <a href=\"#\" data-icon=\"users\"></a>\n        </nav>\n    </footer>\n</section>\n```\n\n\n### Aside\nEl elemento `<aside>` nos proporciona una area que se despliega de los laterales que podrá desplegarse o no en función del dispositivo en el que estemos. Por ejemplo un menu lateral que por defecto este oculto en móviles pero visible en tablets. La estructura es muy similar a la sección. Podemos crear un enlace que referencie un `<aside>` con una id en particular utilizando el sistea de navegación de Lungo. Utilizaremos el atributo data-router (El cual veremos mas adelante). También podemos definirle la posición utilizando estilos mediante las clases. Por defecto el aside estará a la izquierda de la pantalla.\n\n``` html\n<aside id=\"features\">\n    <header data-title=\"Options\"></header>\n    <article class=\"active\">\n        {{CONTENT}}\n    </article>\n</aside>\n```\nEn tu sección si quieres que se visualice el aside automáticamente necesitas enlazar tu aside con el atributo `data-aside`, y puedes mostrarlo u ocultarlo con el atributo `data-view-aside`.\n``` html\n<section id=\"main_section\" data-aside=\"features\">\n    <header data-title=\"Aside\">\n        <nav>\n            <button data-view-aside=\"features\" data-icon=\"menu\"></button>\n        </nav>\n    </header>\n    <article id=\"main-article\" class=\"active indented\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\nNavigación\n----------\nLa navegación de Lungo se realiza de una manera semántica, se utiliza el elemento `<a>` o `<button>` y el atributo \"view-*\" para indicarle a Lungo a que `<section>`, `<article>` o `<aside>` quieres ir.\n\n### Atributo Data-View\nEl atributo `data-view-*` se coloca en  los `<a>` o `<button>` para indicar a que tipo de elemento queremos navegar (`<section>`, `<article>` o `<aside>`) o si usamos el atributo href se debe usar un hashbang(#) mas el id del elemento destino. Lungo utiliza el href para ir dejando trazada la navegación de tu aplicación como si de una miga de pan se tratase.\n\n``` html\n<section id=\"main\">\n    <article id=\"article_1\" class=\"active\">\n        <button class=\"button\" data-view-article=\"article_2\" data-icon=\"forward\">To article_2</button>\n    </article>\n    <article id=\"article_2\">\n        <button class=\"button\" data-view-article=\"article_1\" data-icon=\"home\" data-label=\"To article_1\"></button>\n    </article>\n</section>\n```\n\n### Atributo Data-back\nComo se ha mencionado anteriormente la Navegación de Lungo funciona como si se tratase de un rastro de migas de pan, por lo que la navegación hacia atrás entre secciones se realiza de manera sencilla utilizando data-back. Puedes poner un botón en tu header con data-back o utilizar en `<a>` o `<button>` un data-router=\"section\" enlazandolo hacia detrás con href=\"#back\".\n\n``` html\n<section id=\"main\">\n\t<article id=\"main_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"main_2\">{{CONTENT}}</article>\n</section>\n<section id=\"second\">\n    <header data-back=\"home\"></header>\n    <article id=\"second_1\" class=\"active\">\n        Same as header:\n        <button data-view-section=\"back\" data-icon=\"left\" data-label=\"Return to previous section\"></button>\n    </article>\n</section>\n```\n\n### Nav\nPara crear estructuras de navegación con botones ya sea en un header o en un footer se ha de usar el elemento nav. En el header la posición del elemento nav dependera de la clase que se le aplique. `left` para la izquierda y `right` para la derecha.\n\n``` html\n<section id=\"main\">\n    <header data-title=\"<nav> example\">\n        <nav class=\"on-left\">\n            <button data-view-article=\"article_1\" data-label=\"Home\"></button>\n        </nav>\n        <nav class=\"on-right\">\n            <button data-view-section=\"second\" data-label=\"Section\"></button>\n        </nav>\n    </header>\n\n    <article id=\"article_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"article_2\">{{OTHER_CONTENT}}</article>\n\n    <footer>\n        <nav>\n            <a href=\"#\" data-view-article=\"article_1\" data-icon=\"home\"></a>\n            <a href=\"#\" data-view-article=\"article_2\" data-icon=\"user\"></a>\n            <a href=\"#\" data-view-section=\"second\" data-icon=\"right\"></a>\n        </nav>\n    </footer>\n</section>\n\n<section id=\"second\">\n    <header data-back=\"home\" data-title=\"example\"></header>\n    <article id=\"second_1\">{{CONTENT}}</article>\n</section>\n```\n\n### Groupbar\nLungo te da la capacidad de tener un menu especial en la parte superior de un interfaz. Para ello tienes que extender el elemento header utilizando class=\"extended\" y crear dentro de el un elemento de navegacion nav con class=\"groupbar\".\n\n``` html\n<section id=\"main\">\n    <header data-title=\"groupbar\" class=\"extended\"></header>\n\n    <nav data-control=\"groupbar\">\n        <a href=\"#\" data-view-article=\"article_1\" class=\"active\">Art-1</a>\n        <a href=\"#\" data-view-article=\"article_2\">Art-2</a>\n    </nav>\n\n    <article id=\"article_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"article_2\">{{OTHER_CONTENT}}</article>\n</section>\n```\n\n### Menu\nAdemás de los elementos `<nav>` `y` *groupbar* existe otra manera de que el usuario seleccione una nueva vista de tu aplicación. Desde la version 2.2 Brownie está disponible el control de *menu* y se utiliza poniendo el atributo \n`data-view-menu`:\n\n```html\n<section id=\"menu\" data-transition=\"slide\">\n    <header data-title=\"data-control=menu\">\n        <nav>\n            <a href=\"#\" data-view-menu=\"options\" data-icon=\"menu\"></a>\n        </nav>\n        <nav class=\"on-right\">\n            <a href=\"#\" data-view-menu=\"options-icons\" data-icon=\"grid\"></a>\n        </nav>\n    </header>  \n    <nav id=\"options\" data-control=\"menu\">\n\t    <a href=\"#\" data-view-article=\"home-menu\" data-icon=\"menu\">Home</a>\n\t    <a href=\"#\" data-view-article=\"explore-menu\" data-icon=\"globe\">Explore</a>\n\t    <a href=\"#\" data-view-article=\"activity-menu\" data-icon=\"comments\">Activity</a>\n\t    <a href=\"#\" data-view-article=\"profile-menu\" data-icon=\"user\">Profile</a>\n\t</nav>\n</section>\n```\nEn el caso de que quieras dar prioridad a los iconos simplemente tienes que aplicar la clase `icons`:\n\n```html\n<nav id=\"options-icons\" data-control=\"menu\" class=\"icons\">\n    …\n</nav>\n```\n\nBindings (Vínculos)\n-------------------\n#### Títulos vinculados\nPara que se actualice automáticamente el título de una sección mediante la navegación tan solo hay que usar el atributo `data-title` en tu elemento de navegación\n``` html\n<section id=\"main\">\n    <header data-title=\"Default title\"></header>\n    <article id=\"first\" class=\"active\">\n        <button data-view-article=\"second\" data-title=\"Second Article\"></button>\n    </article>\n    <article id=\"second\">\n        <button data-view-article=\"first\" data-title=\"First Article\"></button>\n    </article>\n</section>\n```\n\n#### Elementos vinculados\nPuedes mostrar elementos nav cuando un artículo en particular sea visible con el atributo data-article:\n\n``` html\n<section id=\"main\">\n    <header data-title=\"Title of section\">\n        <nav class=\"on-right\">\n            <button data-article=\"second\" data-view-article=\"first\" data-icon=\"left\"></button>\n            <button data-article=\"first\" data-view-article=\"second\" data-icon=\"right\"></button>\n        </nav>\n    </header>\n    <article id=\"first\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"second\">{{OTHER_CONTENT}}</article>\n</section>\n```\n\n* [Elementos](https://github.com/tapquo/Lungo.js/blob/master/docs/EN/prototype/elements.md)\n* [Navegación](https://github.com/tapquo/Lungo.js/blob/master/docs/EN/prototype/navigation.md)\n\n\nFormularios\n-----------\nLos formularios siempre han sido algo tedioso de manejar en los proyectos web, Lungo te ayuda a crear una base para los formularios que sea uniforme y que proporcione una experiencia de usuario similar en los distintos navegadores. Todos los controles desde los `input` (todas sus variantes) a los `button` están perfectamente adaptados para ser usados con dispositivos táctiles. Tan solo tienes que usar el elemento `form` o la clase `form`:\n``` html\n<div class=\"form\">\n\t<fieldset>\n\t    <label>Input</label>\n\t    <input type=\"text\" placeholder=\"value\">\n\t    <label>Input styled</label>\n\t    <input type=\"text\" placeholder=\"value on right\" class=\"text align_right error\">\n\t    <label>Select</label>\n\t    <label class=\"select\">\n\t        <select>\n\t            <option value=\"1\">HTML5</option>\n\t            <option value=\"2\">CSS3</option>\n\t            <option value=\"3\">JavaScript</option>\n\t        </select>\n\t    </label>\n\t    <label>Input date</label>\n\t    <input type=\"date\" class=\"align_right\" placeholder=\"Select finish\" value=\"10/04/1980\"/>\n        <label class=\"anchor\">Example of touch checkbox</label>\n        <input type=\"checkbox\" class=\"inline right\" />\n\t</fieldset>\n</div>\n```\n\n\nListas\n------\n¿Es posible imaginar una app que no tenga listas? Nosotros no podemos imaginar tal cosa, por lo que Lungo ofrece gran variedad de componentes para crear listas que se ajusten a tus gustos y necesidades. Siempre teniendo en cuenta que todo empieza con un elemento `<ul>` seguido por un elemento `<li>`:\n\n``` html\n<article id=\"example\" class=\"list\">\n   <ul>\n\t\t<li>\n\t\t\t<strong>Title</strong>\n\t\t\t<small>Description</small>\t\t\t\n\t\t</li>\n\t\t...\n   </ul>\n</article>\n```\nNuestro elemento `<li>` puede ser construido de varias maneras, y hacerlo todo lo complejo que necesites, aquí tienes un ejemplo de un listado mas completo:\n\n``` html\n<li class=\"thumb big\">\n    <img src=\"http://cdn.tapquo.com/lungo/icon-144.png\" />\n    <div>\n        <div class=\"on-right text tiny\">lorem ipsum</div>\n        <strong>Title</strong>\n        <span class=\"text tiny opacity\">lorem ipsum</span>\n        <small>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Neque, aliquam, nisi commodi blanditiis.\n        </small>\n    </div>\n</li>\n```\nSi quieres ver mas ejemplos de todos los posibles estilos que aplicar a una lista visita nuestra app de ejemplo *Kitchen-Sink*\n\nAPI JavaScript\n==============\n\nCore (núcleo)\n-------------\nLungo dispone de varios métodos que se usan internamente en su motor. Aquí los teneís por si deseís incluir parte de su funcionalidad en vuestra aplicación.\n\n#### log()\nSistema de consola para desplegar mensajes cuando estas debuggeando.\n**Parameters** (Parámetros)\n```\nnumber:     Severity based in (1)Log, (2)Warn, (>2)Error\nstring:     Message to show in the console\n```\n\n*Ejemplo*\n``` javascipt\nLungo.Core.log(1, \"Launched event\");\nLungo.Core.log(2, \"Warning!!\");\nLungo.Core.log(3, \"Error!!!!\");\n```\n\n\n#### execute()\nEjecuta los callback en función de los paramentros introducidos.\n**Parameters** (Parámetros)\n```\nfunction:   callback to execute\n```\n\n*Ejemplo*\n``` javascript\nvar myFunc = function(){\n    //Do something\n};\nvar myFunc2 = function(){\n    //Do something\n};\nLungo.Core.execute(myFunc, myFunc2);\n```\n\n\n#### bind()\nCrea una nueva función que cuando se la llama, en sí llama a esta función en el contexto del valor proporcionado, con la secuencia dada de argumentos.\n\n**Parameters** (Parámetros)\n```\nobject:     object that 'this' can refer in the new function.\nfunction:   A function object.\n```\n\nEste método devuelve la funcion que realizará la acción sobre el objeto.\n\n*Ejemplo*\n``` javascript\nvar example = \"This is \";\nvar addText = function(textToAdd){\n    text = this;\n    for(var i = 0, len = textToAdd.length; i < len; i++){\n        text += \" \" + textToAdd[i];\n    }\n    return text;\n};\nvar text = [\"an\", \"example\"];\nvar finalText = Lungo.Core.bind(example, addText)(text);\n//Result: \"This is an example\"\n```\n\n\n#### mix()\nCopia cuantos objetos reciba por parámetro y los mezcla todos dentro de un nuevo objetos, la implementación es muy sencilla. simplemente itera sobre los argumentos del objeto y copia cada propiedad de cada objeto recibido por parámetro.\n\n**Parameters** (Parámetros)\n```\nobject:     arguments to mix them all into a new object.\nobject:     arguments to mix them all into a new object.\n```\nEste método devuelve el objeto con el mix.\n\n*Ejemplo*\n``` javascript\nvar CONFIG_BASE = {\n    name: 'lungo_db',\n    version: '1.0'\n};\n\nvar CONFIG = {\n    version: '1.1';\n}\n\nvar finalConfig = lng.Core.mix(CONFIG_BASE, CONFIG);\n\n/*\nResult:\n{\n    name: 'lungo_db',\n    version: '1.1'\n}\n*/\n```\n\n\n#### isOwnProperty()\nTodos los objetos que descienden de Object heredan el método hasOwnProperty. Este método se usa para determinar si un objeto tiene una propiedad directa específica.\n\n**Parameters** (Parámetros)\n```\nobject:     object to test for a property's existence inside itself.\nstring:     property the name of the property to test.\n```\nEste método devuelve un boolean indicando si la propiedad existe o no.\n\n*Ejemplo*\n``` javascript\nvar car = {wheels:4,doors:true};\nLungo.Core.isOwnProperty(car,\"wheels\"); //Result: true\nLungo.Core.isOwnProperty(car,\"wings\");      //Result: false\n```\n\n\n#### toType()\nDetermina la [[Class]] interna JavaScript de un objeto.\n\n**Parameters** (Parámetros)\n```\nobject:     object to get the real type of itself.\n```\nEste método devuelve un string con la [[Class]] interna de JavaScript\n\n*Ejemplo*\n``` javascript\nvar name = \"Lungo\";\nLungo.Core.toType(name);    //Result: \"string\"\n```\n\n\n#### toArray()\nTransforma un objeto del tipo array en un objeto array de JavaScript.\n\n**Parameters** (Parámetros)\n```\nobject:     Any object to turn into a native Array.\n```\nEste método devuelve el objeto convertido en un array plano.\n\n*Ejemplo*\n``` javascript\nvar execute = function() {\n    var args = lng.Core.toArray(arguments);\n}\n```\n\n\n#### isMobile()\nDetermina si el entorno en el que se está ejecutando es móvil o no. Este método devuelve un objeto que ha sido mezclado con la función mix.\n\n*Ejemplo*\n``` javascript\nLungo.Core.isMobile();\n```\n\n\n#### environment()\nDevuelve la información del entorno en el que se está ejecutando.\n\n*Ejemplo*\n``` javascript\nLungo.Core.environment();\n```\n\n\n#### orderByProperty()\nOrdena objetos en función de sus propiedades.\n\n**Parameters** (Parámetros)\n```\nlist:       List of objects.\nstring:     Name of the property.\nstring:     Type of order: asc or desc.\n```\nEste método devuelve una lista ordenada de objetos ordenada por una propiedad.\n\n*Ejemplo*\n``` javascript\nvar list = [\n    {name: 'Lungo', twitter: 'lungojs'},\n    {name: 'Quojs', twitter: 'quojs'},\n];\n\nvar ordered_list = lng.Core.orderByProperty(list, 'name', 'asc');\n```\n\n#### findByProperty()\nBusca si existe algún objeto con la propiedad especificada por parámetro.\n\n**Parameters** (Parámetros)\n```\nlist:       The list with objects.\nstring:     Name of the property.\n```\nEste método devuelve una instancia del objeto si se a encontrado null si no.\n\n*Ejemplo*\n``` javascript\nvar list = [\n    {name: 'Lungo', twitter: 'lungojs'},\n    {name: 'Quojs', twitter: 'quojs'},\n];\n\nvar user = lng.Core.findByProperty(list, 'name', 'Lungo');\n```\n\n\nCaché\n-----\nLungo implementa su propia caché. Esta caché se encarga de almacenar el valor hasta que la webapp se cierra.\n\n#### set()\nPone en el sistema de caché de Lungo un nuevo par clave/valor.\n\n**Parameters** (Parámetros)\n```\nstring:     Key for the new value.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\nobject:     Value asigned to the key.\n```\n\n*Ejemplo*\n``` javascript\nvar framework = {name: \"Lungo\", twitter: \"lungojs\"};\nLungo.Cache.set(\"lungoFramework\", framework);\n```\n\n\n#### get()\nDevuelve el valor en caché del par clave/valor.\n\n**Parameters** (Parámetros)\n```\nstring:      Key in LungoJS Cache System.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\n```\nEste método devuelve un objeto que contiene el valor.\n\n*Example*\n``` javascript\nvar cachedFramework = Lungo.Cache.get(\"lungoFramework\");\n//Result: {name: \"Lungo\", twitter: \"lungojs\"}\n```\n\n\n#### remove()\nBorra la instancia de un determinado par clave/valor alojado en la caché de Lungo.\n\n**Parameters** (Parámetros)\n```\nstring:     Key in LungoJS Cache System.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\n```\n\n*Ejemplo*\n``` javascript\nLungo.Cache.remove(\"lungoFramework\");\n```\n\n\n#### exists()\nComprueba si un determinado par especificado por la clave se encuentra guardado en la caché de Lungo.\n\n**Parameters** (Parámetros)\n```\nstring Key in LungoJS Cache System.\n```\nEste método devuelve un boolean, true si existe false en caso contrario.\n\n*Ejemplo*\n``` javascript\nLungo.Cache.exists(\"lungoFramework\");\n```\n\n\nDOM\n---\nLungo utiliza la famosa libreria [QuoJS](http://quojs.tapquo.com) para manejar el DOM de tu aplicación. Quo es una micro librería JavaScript modular y orientada a objectos que simplifica la gestión del documento HTML,la gestión de eventos y las interacciones con Ajax para el desarrolo agil de nuestras aplicaciones móviles. Te permite escribir código flexible y util para todos los navegadores.\n\n### Manipulación del DOM\nUtilizando QuoJS, puedes encadenar varias funciones en una misma línea. Para mas información de la API de [Quo](http://quojs.tapquo.com).\n\n*Ejemplo*\n``` html\n<section id=\"main\"\">\n    <header data-title=\"Dom Manipulation\"></header>\n\n    <article id=\"main-article\" class=\"active\">\n        <ul>\n            <li class=\"dark\">\n                Tap here to change the color\n            </li>\n        </ul>\n    </article>\n</section>\n```\n\nSubscribe to a tap event with a callback\n``` javascript\nLungo.dom('#main-article li').tap(function(event) {\n    Lungo.dom(this).toggleClass('light').toggleClass('dark');\n});\n\n```\n\n\n### Triggers (Disparadores)\nCuando las secciones o artículos se cambian se lanza un evento. El section/article destino lanzará un evento `load` y la section/article origen lanzará un evento `unload`. Podemos vincular ambos eventos usando QuoJS.\n\n*Ejemplo*\n``` html\n<section id=\"section1\">\n    <article id=\"article1\">\n        <button data-view-section=\"section2\" data-label=\"2nd Section\"></button>\n    </article>\n</section>\n<section id=\"section2\">\n    <article id=\"article2\">{{CONTENT}}</article>\n</section>\n```\n``` javascript\nLungo.dom('#section1').on('unload', function(event) {\n    alert(\"Unloaded section 1\");\n});\n\nLungo.dom('#section2').on('load', function(event){\n    alert(\"Loaded section 2\");\n});\n```\n\n\n.Element\n--------\n\n### .Carousel\nLungo dispone de un elemento carousel donde publicar el contenido y el usuario navegar con el mediante los controles del carousel.\n\n**Parameters** (Parámetros)\n```\nstring:     Element query selector.\nfunction:   Function to execute when switching slide.\n```\n\n*Ejemplo*\n``` html\n<section id=\"carousel\" data-transition=\"slide\">\n    <header>\n        <div class=\"centered title\">Photo: <span>1</span></div>\n    </header>\n    <article id=\"art\" class=\"active block\" data-control=\"carousel\">\n        <div>\n            <div align=\"center\">\n                <img src=\"http://lorempixel.com/320/418/food/\">\n            </div>\n            <div align=\"center\">\n                <img src=\"http://lorempixel.com/320/418/sports/\">\n            </div>\n        </div>\n    </article>\n</section>\n```\n``` javascript\nvar el = Lungo.Dom('[data-control=carousel]').first();\n\nvar example = Lungo.Element.Carousel(el, function(index, element) {\n    Lungo.dom(\"section#carousel .title span\").html(index + 1);\n});\n```\n\n#### Carousel.prev()\nMuestra la slide anterior.\n*Ejemplo*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nLungo.dom('[data-direction=left]').tap(example.prev);\n```\n\n#### Carousel.next()\nMuesta la slide siguiente.\n*Ejemplo*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nLungo.dom('[data-direction=left]').tap(example.next);\n```\n\n#### Carousel.position()\nDevuelve el índice de la slide actual.\n*Ejemplo*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nexample.next();\nalert(example.position());\n```\n\n\n### .count\nComo mencionamos previamente en la parte de prototipado, puedes añadir un contador a los elementos usanto el atributo data-count. También puedes añadir este contador mediante JavaScript\n\n#### Método JavaScript\nEstablece un contador al elemento:\n\n**Parameters** (Parámetros)\n```\nstring:     Element query selector.\nnumber:     Value of the counter.\n```\n\n*Ejemplo*\n``` javascript\nLungo.Element.count(\"#messages\", 5);\n```\n\n\n#### método HTML\nPuedes definir mediante HTML un valor por defecto para el elemento contador.\n\n*Ejemplo*\n``` html\n<section>\n    …\n    <footer>\n        <nav>\n            <a href=\"#\" data-icon=\"user\" data-count=\"12\"></a>\n            <a href=\"#\" data-icon=\"globe\"></a>\n            <a href=\"#\" data-icon=\"cog\"></a>\n        </nav>\n    </footer>\n</section>\n```\n\n\n### .loading\nTambién puedes crear un elemento loading para representar los momentos en los que estas realizando la carga de datos utilizando el atributo data-loading. Otra manera de mostrar la animación de carga es utilizando JavaScript.\n\n**Parameters** (Parámetros)\n```\nstring:     Element query selector.\nstring:     [OPTIONAL] Stylesheet.\n```\nEste método devuelve una instance del objeto.\n\n*Ejemplo*\n``` html\n<section id=\"main\" data-transition=\"\">\n    <header data-title=\"loading\"></header>\n    <article id=\"main-article\"></article>\n</section>\n```\n``` javascript\nLungo.Element.loading(\"#main-article\", 1);\n```\n\n\n### .progress\nTambién es posible crear una barra de progreso utilizando el atributo data-progress. Otra manera de mostrar la animación de carga es utilizando JavaScript.\n\n**Parameters** (Parámetros)\n```\nstring:     Element query selector.\nnumber:     The percentage value.\nboolean:    Boolean to show the percentage label.\n```\n\n*Ejemplo*\n``` html\n<section id=\"main\" data-transition=\"\">\n    <article id=\"main-article\" class=\"active list indented scroll\">\n        <form>\n            <div id=\"prg-example\" class=\"progress\">\n                <span class=\"bar\">\n                    <span class=\"value\"></span>\n                </span>\n            </div>\n        </form>\n    </article>\n</section>\n```\n``` javascript\nLungo.Element.progress(\"#prg-example\", 65, true);\n```\n\n\n### .Pull\nPara crear un elemento pull and refresh añade el atributo data-pull o hazlo mediante JavaScript.\n\n**Parameters** (Parámetros)\n```\nstring:     Element query selector.\nobject:     Object with the configuration.\n```\n\n*Ejemplo*\n``` html\n<section id=\"main\" data-pull=\"normal\">\n    <header data-title=\"Pull & Refresh\"></header>\n    <article id=\"main-article\">\n        <ul>\n             <li class=\"dark\" data-icon=\"help\">\n                    <strong>\n                    Test this featury only drag down.\n                </strong>\n                <small>This element has an associated event</small>\n            </li>\n        </ul>\n    </article>\n</section>\n```\n\n``` javascript\nvar pull_example = new Lungo.Element.Pull('#main-article', {\n    onPull: \"Pull down to refresh\",      //Text on pulling\n    onRelease: \"Release to get new data\",//Text on releasing\n    onRefresh: \"Refreshing...\",          //Text on refreshing\n    callback: function() {               //Action on refresh\n        alert(\"Pull & Refresh completed!\");\n        pull_example.hide();\n    }\n});\n```\n\n\n###.Menu\nPara el comportamiento visual `<data-control-menu>`\n\n#### Show\nMuestra un <data-control-menu> con un determinado Id\n\n**Parameters** (Parámetros)\n```\nstring:     <data-control-menu> Id\n```\n\n*Ejemplo*\n``` javascript\nLungo.Element.menu.show(\"options\")\n```\n\n\n#### Hide\nEsconde el <data-control-menu> con un Id específico\n\n**Parameters** (Parámetros)\n\n```\nstring:     <data-control-menu> Id\n```\n\n*Ejemplo*\n``` javascript\nLungo.Element.menu.hide(\"options\")\n```\n\n#### Toggle\nMuestra o esconde el <data-control-menu> con id específico\n\n**Parameters** (Parámetros)\n```\nstring:     <data-control-menu> Id\n```\n\n*Ejemplo* \n``` javascript\nLungo.Element.menu.toggle(\"options\")\n```\n\n\n.Notification\n-------------\nPara mostrar notificaciones mucha gente utiliza el alert() de JavaScript. Pero así cada notificación depende del navegador donde se visualize. Lungo tiene su propio sistema de notificaciones para que se vean igual en todos los navegadores y además de manera responsive.\n\n#### show()\n\n**Parameters** (Parámetros)\n```\nstring:     The icon, null for no icon.\nstring:     Notification's title.\nnumber:     Seconds to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\nSi llamas a la función show() sin parametros simplemente se mostrará una animación de carga.\n\n*Ejemplo*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.show(\n    \"check\",                //Icon\n    \"Success\",              //Title\n    3,                      //Seconds\n    afterNotification       //Callback function\n);\n//Show loading screen\nLungo.Notification.show();\n```\n\n\n#### hide()\nOculta la notificación que se esté mostrando en ese momento.\n*Ejemplo*\n``` javascript\nLungo.Notification.hide();\n```\n\n\n#### success()\nMuestra una notificación para indicar al usuario que la operación en cuestión se realizó con éxito.\n\n**Parameters** (Parámetros)\n```\nstring:     Notification's title.\nstring:     Notification's description.\nstring:     The icon, null for no icon.\nnumber:     The time to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\n\n*Ejemplo*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.success(\n    \"Success\",                  //Title\n    \"Successful operation\",     //Description\n    \"check\",                    //Icon\n    7,                          //Time on screen\n    afterNotification           //Callback function\n);\n```\n\n\n#### error()\nMuestra una notificación de error.\n\n**Parameters** (Parámetros)\n```\nstring:     Notification's title.\nstring:     Notification's description.\nstring:     The icon, null for no icon.\nnumber:     The time to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\n\n*Ejemplo*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.error(\n    \"Error\",                      //Title\n    \"Unsuccessful operation\",     //Description\n    \"cancel\",                     //Icon\n    7,                            //Time on screen\n    afterNotification             //Callback function\n);\n```\n\n\n#### confirm()\nMuestra una notificación para que el usuario confirme alguna acción.\n\n**Parameters** (Parámetros)\n```\nobject:     An object with the notification's config.\n```\n\n*Ejemplo*\n``` javascript\nLungo.Notification.confirm({\n    icon: 'user',\n    title: 'Title of confirm.',\n    description: 'Description of confirm.',\n    accept: {\n        icon: 'checkmark',\n        label: 'Accept',\n        callback: function(){ alert(\"Yes!\"); }\n    },\n    cancel: {\n        icon: 'close',\n        label: 'Cancel',\n        callback: function(){ alert(\"No!\"); }\n    }\n});\n```\n\n\n#### html()\nCrea una notificación utilizando tu propio código html.\n\n**Parameters** (Parámetros)\n```\nstring:     The html code for the notification.\nstring:     The closing button text.\nstring:     Specific style for notification\nnumber:     The time to show the notification, 0 for unlimited.\n```\n\n*Ejemplo*\n``` javascript\nLungo.Notification.html('<h1>Hello World</h1>', \"Close\");\n```\n\n\n#### push()\nMuestra una notificación no obstruccione la interfaz.\n\n**Parameters** (Parámetros)\n```\nstring:\t\tNotification's title.\nstring:\t\tThe icon, null for no icon.\nstring:\t\tSpecific style for notification\n```\n\n*Ejemplo*\n``` javascript\nLungo.Notification.html('<h1>Hello World</h1>', \"Close\");\n```\n\n\n\n.Router\n-------\nLungo.Router otorga al usuario las funciones necesarias para manejar la navegación de la aplicación mediante JavaScript. Las siguientes funciones permiten a los desarrolladores trabajar con la navegación entre secciones, artículos y asides.\n\n#### section()\nEsta función navega desde una sección a otra. Se utiliza para navegar hacia delante entre secciones. Si quieres navegar hacia detrás podras utilizar la función back que se explica mas adelante.\n\n**Parameters** (Parámetros)\n```\nstring:     The section's id.\n```\n\n*Ejemplo*\n``` javascript\nLungo.Router.section(\"features\");\n```\n\n#### article()\nMuestra un `<article>` de una `<section>` en particular.\n\n**Parameters** (Parámetros)\n```json\nstring:\t\tThe section id\nstring:     The article's id.\n```\n\n*Ejemplo*\n```javascript\nLungo.Router.article(\"my-section\", \"my-article\");\n```\n\n#### back()\nSi quieres navegar hacia atrás tan solo utiliza la función Lungo.Router.back.\n\n*Ejemplo*\n``` javascript\nLungo.Router.back();\n```\n\n. aside \n-------\nEl elemento `<aside>`  se comporta diferente dependiendo de si está en un artículo o en una sección. Por ello Lungo tiene métodos específicos para estos casos:\n\n#### show()\nMuestra un elemento aside.\n\n**Parameters** (Parámetros)\n```\nstring:\t\t<aside> id\n```\n\n*Ejemplo*\n``` javascript\nLungo.Aside.show(\"my-aside\");\n```\n\n#### hide()\nOculta el elemento aside actual.\n*Example*\n``` javascript\nLungo.Aside.hide();\n```\n\n####  toggle()\nMuestra o oculta el elemento aside actual.\n\n**Parameters** (Parámetros)\n```\nstring:\t\t<aside> id\n```\n\n*Ejemplo*\n``` javascript\nLungo.Aside.toggle(\"my-aside\")\n```\n\n.Article\n--------\nDesde la versión 2.2 (Brownie) Lungo tiene un namespace reservado para e control\ndel elemento `<article>`.\n\n####  clean()\nLimpia el contenido de un artículo específico.\n\n**Parameters** (Parámetros)\n```\nstring:\t\t<article> ID\nstring:\t\tIcon\nstring:\t\tTitle\nstring:\t\tDescription [OPTIONAL]\nstring:\t\tButton label [OPTIONAL]\n```\n\n*Ejemplo*\n``` javascript\nLungo.Article.clean(\"my-article\", \"user\", \"Title\", \"Description\", \"Refresh\")\n```\n\n.Service\n--------\nLungo tambien puede realizar peticiones ajax a servicios web.\n\n\n#### Settings\nObjeto que contiene la configuración para realizar llamadas ajax.\n\n*Ejemplo*\n``` javascript\nLungo.Service.Settings.async = true;\nLungo.Service.Settings.error = function(type, xhr){\n    //Do something\n};\nLungo.Service.Settings.headers[\"Content-Type\"] = \"application/json\";\nLungo.Service.Settings.crossDomain = false;\nLungo.Service.Settings.timeout = 10;\n```\n\n\n#### get()\nCarga los datos de un server utilizando la llamada GET de HTTP.\n\n**Parameters** (Parámetros)\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Ejemplo*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.get(url, data, parseResponse, \"json\");\n//Another example\nvar result = Lungo.Service.get(url, \"id=25&len=50\", null, \"json\");\n```\n\n\n#### post()\nEnvia los datos a un server utilizando la llamada POST de HTTP.\n\n**Parameters** (Parámetros)\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Ejemplo*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.post(url, data, parseResponse, \"json\");\n//Another example\nvar result = Lungo.Service.post(url, \"id=25&len=50\", null, \"json\");\n```\n\n\n#### json()\nCarga los datos de un server utilizando la llamada GET de HTTP y el mime-tyme JSON.\n\n**Parameters** (Parámetros)\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\n```\n\n*Ejemplo*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.json(url, data, parseResponse);\n//Another example\nvar result = Lungo.Service.json(url, \"id=25&len=50\");\n```\n\n\n#### cache()\nSistema de auto-cache con patron fecha para peticiones GET de HTTP.\n\n**Parameters** (Parámetros)\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nstring:     Date pattern (example: 15 minutes, 1 hour, 3 days).\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Ejemplo*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\n\nLungo.Service.cache(url, data, \"2 hours\", parseResponse, \"json\");\n\n//Otro ejemplo\nvar result = Lungo.Service.cache(\n    url,\n    \"id=25&len=50\",\n    \"2 hours\",\n    null,\n    \"json\"\n);\n```\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.2724609375,
          "content": "LungoJS\n=======\nA HTML5 framework for developers who want to design, build and share cross device applications.\n\n * **HTML5 Optimized Apps**: Supports open web standards, such as HTML5, CSS3 and JavaScript. It brings a consistent browser environment across mobiles, TVs and desktop devices.\n\n * **Open Source Project**: Each new line of code in Lungo is welcome, we hope that Developers and restless minds will help us to improve day by day this humble project.\n\n * **Powerful JavaScript API**: here are many ways to develop apps, not all of them are optimized. Lungo offers you a robust API so you can have complete control of everything that happens in your App.\n\n * **Cross-Device full support**: It's known that creating apps for each platform is expensive, this situation is increased by the arrival of tablets and SmartTVs. Lungo will suit all of them creating a unique and amazing UX.\n\n*Current version: [2.2.0]()*\n\n\n\nGetting Started\n---------------\nThe idea of Lungo arose in year 2010 when the craftman Javi Jiménez Villar ([**soyjavi**](https://twitter.com/soyjavi)) saw that hot existing Mobile Frameworks at that time were not powerful and not using the features of HTML5.\n\n### Community\nIf this documentation is not enough for you, you can subscribe to the Lungo open community to share your experiences and knowledge. You can do it in [English](https://groups.google.com/forum/#!forum/lungojs) or [Spanish](https://groups.google.com/forum/#!forum/lungojs_es), you decide.\n\n### GitHub\nThis is opensource, so feel free to fork this project to help us create a better framework. All source code is developed with CoffeeScript and Stylus, but don't worry we worship clean-code so you can quickly get to make your own modifications in it.\n\n[https://github.com/tapquo/lungo.js](https://github.com/tapquo/lungo.js)\n\n### Licensing\nLungo is licensed under GPLv3 licensed and a Commercial License for OEM uses. See [LICENSE](https://github.com/tapquo/Lungo.js/blob/master/LICENSE.md) for more information.\n\n### Help us on being better\nPlease, don't have any doubt in contacting us if you think you can do a better API. If you think that we have to support a new feature or if you have found a bug, use [GitHub issues](https://github.com/tapquo/lungo.js/issues). Make a fork of this documentation and send us your *pull requests* with your improvements. \n\nTo talk with us or with other developers about the Lungo API, suscribe to our [**mailing list**](https://groups.google.com/forum/#!forum/lungojs).\n\n\n\nEASY PROTOTYPE\n==============\nThe main premise is to create a semantic structure in the whole project, starting from the markup language HTML, through a well organized CSS and ending with the JavaScript API. Lungo offers a great facility when prototyping applications, and will not be needed to enter any lines of code (JavaScript) to visualize how our application will behave. In this doc we will learn which are Lungo semantic elements as relate to each and how you can create applications with HTML only. It's really exciting! let's begin.\n\n\nStructure\n---------\nHere you have the dependencies of your Lungo application's body. It must contain at least:\n\n``` html\n<link rel=\"stylesheet\" href=\"components/lungo.brownie/lungo.css\">\n<link rel=\"stylesheet\" href=\"components/lungo.icon/lungo.icon.css\">\n<link rel=\"stylesheet\" href=\"components/lungo.brownie/lungo.theme.css\">\n<script src=\"components/quojs/quo.js\"></script>\n<script src=\"components/lungo/lungo.js\"></script>\n```\n\n`<section>` it's the main container of your UI Components in your App and `<article>` it must be placed inside your section and must have…. Each section and article must contain an unique ID. \n``` html\n<section id=\"main\">\n    <article id=\"main-article\">\n        Your content\n    </article>\n</section>\n```\n\nThe JavaScript function that initializes Lungo it's:\n``` javascript\nLungo.init({});\n```\n\n#### Load Sync resources on init\nTo make easier to create and modify your app you can create the sections in separate html files and load the synchonously, making your main file smaller and having your code organized better.\n``` javascript\n//Load resource on app init\nLungo.init({\n    name: 'example',\n    resources: ['section_to_load.html']\n});\n```\n\n#### Load async resources by link\nThere is other way to load resources asynchronously, just add to the `<a>` tag element the attribute data-async with the link to the section.\n``` html\n<section id=\"loader\" data-transition=\"\">\n    <article id=\"art1\" class=\"active\">\n        <a href=\"#main\" data-router=\"section\" data-async=\"section_to_load.html\">\n            Go to section\n        </a>\n    </article>\n</section>\n```\n\n\nBasic Elements\n--------------\nLungo uses the semantic language markup introduced with HTML5, so you can add this elements using the new semantic tags.\n\n### Section & Article\nA `<section>` is a view of our application where content will be displayed and where there may be subelements as `<header>`, `<footer>` and `<article>`.\n``` html\n<section id=\"main\">\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\nThe content a particular `<section>` is structured by `<article>`. Within a section may be as many `<article>` as you like. The article of the section that will be shown first must have th `class=\"active\"` attribute set.\n\n``` html\n<section id=\"main_section\">\n    <header data-title=\"example\"></header>\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\n\n### Header\nEach `<section>` can contain a `<header>` where the tittle of the section will be shown. Optionally you can add navigation buttons, to go to another section, go back to a previous one, go to another article or just open the aside menu.\n``` html\n<section id=\"main_section\">\n    <header data-title=\"example\"></header>\n    <article id=\"main-article\" class=\"active\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\n\n### Footer\nEach `<section>` can contain a `<footer>`. There you can add buttons to navigate through articles, sections and even asides.\n``` html\n<section id=\"main_section\">\n    <article id=\"main\" class=\"active\">\n        {{CONTENT}}\n    </article>\n    <footer>\n        <nav>\n            <a href=\"#\" data-icon=\"menu\" class=\"active\"></a>\n            <a href=\"#\" data-icon=\"share\"></a>\n            <a href=\"#\" data-icon=\"user\"></a>\n            <a href=\"#\" data-icon=\"users\"></a>\n        </nav>\n    </footer>\n</section>\n```\n\n\n### Aside\nThe `<aside>` element gives us a lateral area which will appear depending on the device (tablet) or hidden (mobile). Its structure is very similar to the section one's. We can create a link that references a `<aside>` with a particular id using the navigation system of Lungo. We will use the attribute data-router (which will be discussed in subsequent chapters). We can also define the positioning of it, using style classes. The default position is left.\n``` html\n<aside id=\"features\">\n    <header data-title=\"Options\"></header>\n    <article class=\"active\">\n        {{CONTENT}}\n    </article>\n</aside>\n```\n\nIn your section if you want view aside automaticaly in Tablet-Apps you need link your aside with `data-aside` attribute, and you can display/hide with attribute `data-view-aside`:\n``` html\n<section id=\"main_section\" data-aside=\"features\">\n    <header data-title=\"Aside\">\n        <nav>\n            <button data-view-aside=\"features\" data-icon=\"menu\"></button>\n        </nav>\n    </header>\n    <article id=\"main-article\" class=\"active indented\">\n        {{CONTENT}}\n    </article>\n</section>\n```\n\nNavigation\n----------\nThe navigation in Lungo is entirely semantic, and you will use the element `<a>` or `<button>` and his data attribute \"view-*\" to tell the system which `<section>`, `<article>` or `<aside>` you want to go to.\n\n### Data-View attribute\nThe `data-view-*` attribute is set in the `<a>` or `<button>` element to set the type of element we are going to navigate to (`<section>`, `<article>` or `<aside>`) and in the href attribute the hashbang plus the id of the element has to be set. Lungo uses this `href` to generate the bread crumbs.\n``` html\n<section id=\"main\">\n    <article id=\"article_1\" class=\"active\">\n        <button class=\"button\" data-view-article=\"article_2\" data-icon=\"forward\">To article_2</button>\n    </article>\n    <article id=\"article_2\">\n        <button class=\"button\" data-view-article=\"article_1\" data-icon=\"home\" data-label=\"To article_1\"></button>\n    </article>\n</section>\n```\n\n### Data-back attribute\nAs it has been said before, Lungo's navigation is based on the bread crumbs pattern, so navigation backwards between sections is done using the data-back functionality. You can set a button in your header using the data-back attribute or use in `<a>` or `button` tags data-router=\"section\" with href=\"#back\"\n``` html\n<section id=\"main\">\n\t<article id=\"main_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"main_2\">{{CONTENT}}</article>\n</section>\n<section id=\"second\">\n    <header data-back=\"home\"></header>\n    <article id=\"second_1\" class=\"active\">\n        Same as header:\n        <button data-view-section=\"back\" data-icon=\"left\" data-label=\"Return to previous section\"></button>\n    </article>\n</section>\n```\n\n### Nav\nTo create simple structures of navigation buttons within a footer or header the nav element has to be used. In the header, the nav element's position will depend on the class applied to it. `left` to the left and `right` to the right.\n\n``` html\n<section id=\"main\">\n    <header data-title=\"<nav> example\">\n        <nav class=\"on-left\">\n            <button data-view-article=\"article_1\" data-label=\"Home\"></button>\n        </nav>\n        <nav class=\"on-right\">\n            <button data-view-section=\"second\" data-label=\"Section\"></button>\n        </nav>\n    </header>\n\n    <article id=\"article_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"article_2\">{{OTHER_CONTENT}}</article>\n\n    <footer>\n        <nav>\n            <a href=\"#\" data-view-article=\"article_1\" data-icon=\"home\"></a>\n            <a href=\"#\" data-view-article=\"article_2\" data-icon=\"user\"></a>\n            <a href=\"#\" data-view-section=\"second\" data-icon=\"right\"></a>\n        </nav>\n    </footer>\n</section>\n\n<section id=\"second\">\n    <header data-back=\"home\" data-title=\"example\"></header>\n    <article id=\"second_1\">{{CONTENT}}</article>\n</section>\n```\n\n### Groupbar\nLungo gives you the capability to have a special menu at the top of your UI. To do this you have to extend the header element using class=\"extended\" and create inside of it a nav element with class=\"groupbar\"\n\n``` html\n<section id=\"main\">\n    <header data-title=\"groupbar\" class=\"extended\"></header>\n\n    <nav data-control=\"groupbar\">\n        <a href=\"#\" data-view-article=\"article_1\" class=\"active\">Art-1</a>\n        <a href=\"#\" data-view-article=\"article_2\">Art-2</a>\n    </nav>\n\n    <article id=\"article_1\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"article_2\">{{OTHER_CONTENT}}</article>\n</section>\n```\n\n### Menu\nBesides `<nav>` elements `and` *groupbar* there is another way to make the user select new view in your application. Since Brownie (v2.2) implements *menu* Control and it is called with the attribute `data-view-menu`:\n```html\n<section id=\"menu\" data-transition=\"slide\">\n    <header data-title=\"data-control=menu\">\n        <nav>\n            <a href=\"#\" data-view-menu=\"options\" data-icon=\"menu\"></a>\n        </nav>\n        <nav class=\"on-right\">\n            <a href=\"#\" data-view-menu=\"options-icons\" data-icon=\"grid\"></a>\n        </nav>\n    </header>  \n    <nav id=\"options\" data-control=\"menu\">\n\t    <a href=\"#\" data-view-article=\"home-menu\" data-icon=\"menu\">Home</a>\n\t    <a href=\"#\" data-view-article=\"explore-menu\" data-icon=\"globe\">Explore</a>\n\t    <a href=\"#\" data-view-article=\"activity-menu\" data-icon=\"comments\">Activity</a>\n\t    <a href=\"#\" data-view-article=\"profile-menu\" data-icon=\"user\">Profile</a>\n\t</nav>\n</section>\n```\n\nIn case you want to give it a priority to icons only have to apply the `icons` class.\n```html\n<nav id=\"options-icons\" data-control=\"menu\" class=\"icons\">\n    …\n</nav>\n```\n\nBindings\n--------\n#### Title Binding\nTo update the title of a section through the navigation, just use the attribute `data-title` in your navigation element.\n``` html\n<section id=\"main\">\n    <header data-title=\"Default title\"></header>\n    <article id=\"first\" class=\"active\">\n        <button data-view-article=\"second\" data-title=\"Second Article\"></button>\n    </article>\n    <article id=\"second\">\n        <button data-view-article=\"first\" data-title=\"First Article\"></button>\n    </article>\n</section>\n```\n\n#### Element binding\nYou can show nav elements when a particular article is visible with data-article attribute.\n``` html\n<section id=\"main\">\n    <header data-title=\"Title of section\">\n        <nav class=\"on-right\">\n            <button data-article=\"second\" data-view-article=\"first\" data-icon=\"left\"></button>\n            <button data-article=\"first\" data-view-article=\"second\" data-icon=\"right\"></button>\n        </nav>\n    </header>\n    <article id=\"first\" class=\"active\">{{CONTENT}}</article>\n    <article id=\"second\">{{OTHER_CONTENT}}</article>\n</section>\n```\n\n* [Elements](https://github.com/tapquo/Lungo.js/blob/master/docs/EN/prototype/elements.md)\n* [Navigation](https://github.com/tapquo/Lungo.js/blob/master/docs/EN/prototype/navigation.md)\n\n\nForms\n-----\nWe know that forms have always been somewhat tedious to handle in web projects, Lungo makes easy create a uniform base and unique experience among all browsers. All controls from the `input` (in any of its variants) to the `button` are perfectly adapted for use with touch devices. You only have to use the `form` or class `form`:\n``` html\n<div class=\"form\">\n\t<fieldset>\n\t    <label>Input</label>\n\t    <input type=\"text\" placeholder=\"value\">\n\t    <label>Input styled</label>\n\t    <input type=\"text\" placeholder=\"value on right\" class=\"text align_right error\">\n\t    <label>Select</label>\n\t    <label class=\"select\">\n\t        <select>\n\t            <option value=\"1\">HTML5</option>\n\t            <option value=\"2\">CSS3</option>\n\t            <option value=\"3\">JavaScript</option>\n\t        </select>\n\t    </label>\n\t    <label>Input date</label>\n\t    <input type=\"date\" class=\"align_right\" placeholder=\"Select finish\" value=\"10/04/1980\"/>\n        <label class=\"anchor\">Example of touch checkbox</label>\n        <input type=\"checkbox\" class=\"inline right\" />\n\t</fieldset>\n</div>\n```\n\n\nLists\n-----\nCan you imagine an App without lists? we can't conceive of such a thing, so in Lungo offers you an multiple components to make lists tailored to your needs. Always keeping in mind that everything starts with a `<ul>` and continous with a `<li>`:\n``` html\n<article id=\"example\" class=\"list\">\n   <ul>\n\t\t<li>\n\t\t\t<strong>Title</strong>\n\t\t\t<small>Description</small>\t\t\t\n\t\t</li>\n\t\t...\n   </ul>\n</article>\n```\n\nOur `<li>` element can be filled by multiple ways and how complex it all you want, check out a list item much more complete:\n``` html\n<li class=\"thumb big\">\n    <img src=\"http://cdn.tapquo.com/lungo/icon-144.png\" />\n    <div>\n        <div class=\"on-right text tiny\">lorem ipsum</div>\n        <strong>Title</strong>\n        <span class=\"text tiny opacity\">lorem ipsum</span>\n        <small>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Neque, aliquam, nisi commodi blanditiis.\n        </small>\n    </div>\n</li>\n```\n\nIf you want to know more about the possible styles of the lists have to study the examples in our wonderful *Kitchen-Sink*.\n\n\n\nJavaScript API\n==============\n\nCore\n----\nLungo has several methods that are used inside its engine. Here you have them if you need to include some of their functionality in your application.\n\n#### log()\nConsole system to display messages when you are in debug mode.\n**Parameters**\n```\nnumber:     Severity based in (1)Log, (2)Warn, (>2)Error\nstring:     Message to show in the console\n```\n\n*Example*\n``` javascipt\nLungo.Core.log(1, \"Launched event\");\nLungo.Core.log(2, \"Warning!!\");\nLungo.Core.log(3, \"Error!!!!\");\n```\n\n\n#### execute()\nExecutes callbacks based on the parameters received.\n**Parameters**\n```\nfunction:   callback to execute\n```\n\n*Example*\n``` javascript\nvar myFunc = function(){\n    //Do something\n};\nvar myFunc2 = function(){\n    //Do something\n};\nLungo.Core.execute(myFunc, myFunc2);\n```\n\n\n#### bind()\nCreates a new function that, when called, itself calls this function in the context of the provided this value, with a given sequence of arguments preceding any provided when the new function was called.\n**Parameters**\n```\nobject:     object that 'this' can refer in the new function.\nfunction:   A function object.\n```\nThis method **return** the function which will do the action on the object.\n\n*Example*\n``` javascript\nvar example = \"This is \";\nvar addText = function(textToAdd){\n    text = this;\n    for(var i = 0, len = textToAdd.length; i < len; i++){\n        text += \" \" + textToAdd[i];\n    }\n    return text;\n};\nvar text = [\"an\", \"example\"];\nvar finalText = Lungo.Core.bind(example, addText)(text);\n//Result: \"This is an example\"\n```\n\n\n#### mix()\nCopy from any number of objects and mix them all into a new object. The implementation is simple; just loop through arguments and copy every property of every object passed to the function.\n\n**Parameters**\n```\nobject:     arguments to mix them all into a new object.\nobject:     arguments to mix them all into a new object.\n```\nThis method **return** an object with the mix done.\n\n*Example*\n``` javascript\nvar CONFIG_BASE = {\n    name: 'lungo_db',\n    version: '1.0'\n};\n\nvar CONFIG = {\n    version: '1.1';\n}\n\nvar finalConfig = lng.Core.mix(CONFIG_BASE, CONFIG);\n\n/*\nResult:\n{\n    name: 'lungo_db',\n    version: '1.1'\n}\n*/\n```\n\n\n#### isOwnProperty()\nEvery object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object.\n\n**Parameters**\n```\nobject:     object to test for a property's existence inside itself.\nstring:     property the name of the property to test.\n```\nThis method **return** boolean indicating if property exists.\n\n*Example*\n``` javascript\nvar car = {wheels:4,doors:true};\nLungo.Core.isOwnProperty(car,\"wheels\"); //Result: true\nLungo.Core.isOwnProperty(car,\"wings\");      //Result: false\n```\n\n\n#### toType()\nDetermine the internal JavaScript [[Class]] of an object.\n\n**Parameters**\n```\nobject:     object to get the real type of itself.\n```\nThis method **return** a string with the internal JavaScript [[Class]]\n\n*Example*\n``` javascript\nvar name = \"Lungo\";\nLungo.Core.toType(name);    //Result: \"string\"\n```\n\n\n#### toArray()\nConvert an array-like object into a true JavaScript array.\n\n**Parameters**\n```\nobject:     Any object to turn into a native Array.\n```\nThis method **return** the object in a plain array.\n\n*Example*\n``` javascript\nvar execute = function() {\n    var args = lng.Core.toArray(arguments);\n}\n```\n\n\n#### isMobile()\nDetermine if the current environment is a mobile environment. This method **return** An object with the mix done.\n*Example*\n``` javascript\nLungo.Core.isMobile();\n```\n\n\n#### environment()\n**Returns** information of execute environment.\n*Example*\n``` javascript\nLungo.Core.environment();\n```\n\n\n#### orderByProperty()\nOrders a number of objects by a given parameter.\n\n**Parameters**\n```\nlist:       List of objects.\nstring:     Name of the property.\nstring:     Type of order: asc or desc.\n```\nThis method **return** an ordered list of objects by a property.\n\n*Example*\n``` javascript\nvar list = [\n    {name: 'Lungo', twitter: 'lungojs'},\n    {name: 'Quojs', twitter: 'quojs'},\n];\n\nvar ordered_list = lng.Core.orderByProperty(list, 'name', 'asc');\n```\n\n\n#### findByProperty()\nFinds a object with an specific property if exists in a list of Objects.\n\n**Parameters**\n```\nlist:       The list with objects.\nstring:     Name of the property.\n```\nThis method **return** An instance of the object found, null if not found.\n\n*Example*\n``` javascript\nvar list = [\n    {name: 'Lungo', twitter: 'lungojs'},\n    {name: 'Quojs', twitter: 'quojs'},\n];\n\nvar user = lng.Core.findByProperty(list, 'name', 'Lungo');\n```\n\n\nCache\n-----\nLungo implements its own cache type. This cache will store the value until the webapp is closed\n\n#### set()\nSets in the LungoJS cache system a new key/value pair.\n\n**Parameters**\n```\nstring:     Key for the new value.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\nobject:     Value asigned to the key.\n```\n\n*Example*\n``` javascript\nvar framework = {name: \"Lungo\", twitter: \"lungojs\"};\nLungo.Cache.set(\"lungoFramework\", framework);\n```\n\n\n#### get()\nReturns the cached value of a given key.\n\n**Parameters**\n```\nstring:      Key in LungoJS Cache System.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\n```\nThis method **return** an object containing the value.\n\n*Example*\n``` javascript\nvar cachedFramework = Lungo.Cache.get(\"lungoFramework\");\n//Result: {name: \"Lungo\", twitter: \"lungojs\"}\n```\n\n\n#### remove()\nRemoves the instance of a given key in LungoJs Cache System.\n\n**Parameters**\n```\nstring:     Key in LungoJS Cache System.\nstring:     [OPTIONAL] Subkey in LungoJS Cache System.\n```\n\n*Example*\n``` javascript\nLungo.Cache.remove(\"lungoFramework\");\n```\n\n\n#### exists()\nChecks if the given key is stored in the cache.\n\n**Parameters**\n```\nstring Key in LungoJS Cache System.\n```\nThis method **return** a boolean value which is true if the key is found\n\n*Example*\n``` javascript\nLungo.Cache.exists(\"lungoFramework\");\n```\n\n\nDOM\n---\nLungo uses the famous library [QuoJS](http://quojs.tapquo.com) to handle the DOM of your application. QuoJS is a micro, modular, Object-Oriented and concise JavaScript Library that simplifies HTML document traversing, event handling, and Ajax interactions for rapid mobile web development. It allows you to write powerful, flexible and cross-browser code with its elegant, well documented, and micro coherent API.\n\n\n### Manipulation\nUsing QuoJs, you can chain functions to execute several commands in one row. For more info about [Quo's](http://quojs.tapquo.com) API please go here.\n\n*Example*\n``` html\n<section id=\"main\"\">\n    <header data-title=\"Dom Manipulation\"></header>\n\n    <article id=\"main-article\" class=\"active\">\n        <ul>\n            <li class=\"dark\">\n                Tap here to change the color\n            </li>\n        </ul>\n    </article>\n</section>\n```\n\nSubscribe to a tap event with a callback\n``` javascript\nLungo.dom('#main-article li').tap(function(event) {\n    Lungo.dom(this).toggleClass('light').toggleClass('dark');\n});\n\n```\n\n\n### Triggers\nWhen sections or articles are switched an event is launched. The target section/article will launch an `load` event and the current section/article will launch the `unload` one. We can bind to this events using QuoJs.\n*Example*\n``` html\n<section id=\"section1\">\n    <article id=\"article1\">\n        <button data-view-section=\"section2\" data-label=\"2nd Section\"></button>\n    </article>\n</section>\n<section id=\"section2\">\n    <article id=\"article2\">{{CONTENT}}</article>\n</section>\n```\n``` javascript\nLungo.dom('#section1').on('unload', function(event) {\n    alert(\"Unloaded section 1\");\n});\n\nLungo.dom('#section2').on('load', function(event){\n    alert(\"Loaded section 2\");\n});\n```\n\n\n.Element\n--------\n\n### .Carousel\nLungo has a carousel element where content can be published and the user can navigate through it using the caroussel controls.\n\n**Parameters**\n```\nstring:     Element query selector.\nfunction:   Function to execute when switching slide.\n```\n\n*Example*\n``` html\n<section id=\"carousel\" data-transition=\"slide\">\n    <header>\n        <div class=\"centered title\">Photo: <span>1</span></div>\n    </header>\n    <article id=\"art\" class=\"active block\" data-control=\"carousel\">\n        <div>\n            <div align=\"center\">\n                <img src=\"http://lorempixel.com/320/418/food/\">\n            </div>\n            <div align=\"center\">\n                <img src=\"http://lorempixel.com/320/418/sports/\">\n            </div>\n        </div>\n    </article>\n</section>\n```\n``` javascript\nvar el = Lungo.Dom('[data-control=carousel]').first();\n\nvar example = Lungo.Element.Carousel(el, function(index, element) {\n    Lungo.dom(\"section#carousel .title span\").html(index + 1);\n});\n```\n\n#### Carousel.prev()\nShow the previous slide.\n*Example*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nLungo.dom('[data-direction=left]').tap(example.prev);\n```\n\n#### Carousel.next()\nShow the next slide.\n*Example*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nLungo.dom('[data-direction=left]').tap(example.next);\n```\n\n#### Carousel.position()\nReturns the actual index.\n*Example*\n``` javascript\nvar example = Lungo.Element.Carousel(el);\nexample.next();\nalert(example.position());\n```\n\n\n### .count\nAs it has been shown in the prototyping chapter, you can add a counter to elements using the data-count attribute. You can also add this counter using javascript.\n\n#### JavaScript method\nSet a counter to the element:\n\n**Parameters**\n```\nstring:     Element query selector.\nnumber:     Value of the counter.\n```\n\n*Example*\n``` javascript\nLungo.Element.count(\"#messages\", 5);\n```\n\n\n#### HTML method\nYou can define via HTML a default value for a count element.\n*Example*\n``` html\n<section>\n    …\n    <footer>\n        <nav>\n            <a href=\"#\" data-icon=\"user\" data-count=\"12\"></a>\n            <a href=\"#\" data-icon=\"globe\"></a>\n            <a href=\"#\" data-icon=\"cog\"></a>\n        </nav>\n    </footer>\n</section>\n```\n\n\n### .loading\nAs it has been shown in the prototyping chapter, you can create a loading animation using the data-loading attribute. You can also add this animation using javascript:\n\n**Parameters**\n```\nstring:     Element query selector.\nstring:     [OPTIONAL] Stylesheet.\n```\nThis method **returns** an instance of the object founded.\n\n*Example*\n``` html\n<section id=\"main\" data-transition=\"\">\n    <header data-title=\"loading\"></header>\n    <article id=\"main-article\"></article>\n</section>\n```\n``` javascript\nLungo.Element.loading(\"#main-article\", 1);\n```\n\n\n### .progress\nAs it has been shown in the prototyping chapter, you can create a progress bar using the data-progress attribute. You can also add this bar using javascript.\n\n**Parameters**\n```\nstring:     Element query selector.\nnumber:     The percentage value.\nboolean:    Boolean to show the percentage label.\n```\n\n*Example*\n``` html\n<section id=\"main\" data-transition=\"\">\n    <article id=\"main-article\" class=\"active list indented scroll\">\n        <form>\n            <div id=\"prg-example\" class=\"progress\">\n                <span class=\"bar\">\n                    <span class=\"value\"></span>\n                </span>\n            </div>\n        </form>\n    </article>\n</section>\n```\n``` javascript\nLungo.Element.progress(\"#prg-example\", 65, true);\n```\n\n\n### .Pull\nAs it has been shown in the prototyping chapter, you can create a pull and refresh element addind data-pull and some javascript code.\n\n**Parameters**\n```\nstring:     Element query selector.\nobject:     Object with the configuration.\n```\n\n*Example*\n``` html\n<section id=\"main\" data-pull=\"normal\">\n    <header data-title=\"Pull & Refresh\"></header>\n    <article id=\"main-article\">\n        <ul>\n             <li class=\"dark\" data-icon=\"help\">\n                    <strong>\n                    Test this featury only drag down.\n                </strong>\n                <small>This element has an associated event</small>\n            </li>\n        </ul>\n    </article>\n</section>\n```\n\n``` javascript\nvar pull_example = new Lungo.Element.Pull('#main-article', {\n    onPull: \"Pull down to refresh\",      //Text on pulling\n    onRelease: \"Release to get new data\",//Text on releasing\n    onRefresh: \"Refreshing...\",          //Text on refreshing\n    callback: function() {               //Action on refresh\n        alert(\"Pull & Refresh completed!\");\n        pull_example.hide();\n    }\n});\n```\n\n\n###.Menu\nManages visual behavior `<data-control-menu>`\n\n#### Show\nDisplays the <data-control-menu> with a determinate Id\n\n**Parameters**\n```\nstring:     <data-control-menu> Id\n```\n\n*Example*\n``` javascript\nLungo.Element.menu.show(\"options\")\n```\n\n\n#### Hide\nHides the <data-control-menu> with a determinate Id\n\n**Parameters**\n```\nstring:     <data-control-menu> Id\n```\n\n*Example*\n``` javascript\nLungo.Element.menu.hide(\"options\")\n```\n\n#### Toggle\nToggles the <data-control-menu> with a determinate Id\n\n**Parameters**\n```\nstring:     <data-control-menu> Id\n```\n\n*Example*\n``` javascript\nLungo.Element.menu.toggle(\"options\")\n```\n\n\n.Notification\n-------------\nTo display notifications, many times people tend to use the javascript alert() function. The notification it shows looks different depending on the browser. Lungo has a notification system that shows pretty and responsive notifications styled in the same way in all the browsers, making your app look the same no matter the browser you use.\n\n#### show()\nShows a customized notification.\n\n**Parameters**\n```\nstring:     The icon, null for no icon.\nstring:     Notification's title.\nnumber:     Seconds to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\nIf you call to the show function without parameters it will show a loading screen\n\n*Example*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.show(\n    \"check\",                //Icon\n    \"Success\",              //Title\n    3,                      //Seconds\n    afterNotification       //Callback function\n);\n//Show loading screen\nLungo.Notification.show();\n```\n\n\n#### hide()\nHides the current notification.\n*Example*\n``` javascript\nLungo.Notification.hide();\n```\n\n\n#### success()\nShows success notification.\n\n**Parameters**\n```\nstring:     Notification's title.\nstring:     Notification's description.\nstring:     The icon, null for no icon.\nnumber:     The time to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\n\n*Example*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.success(\n    \"Success\",                  //Title\n    \"Successful operation\",     //Description\n    \"check\",                    //Icon\n    7,                          //Time on screen\n    afterNotification           //Callback function\n);\n```\n\n\n#### error()\nShows an error notification.\n\n**Parameters**\n```\nstring:     Notification's title.\nstring:     Notification's description.\nstring:     The icon, null for no icon.\nnumber:     The time to show the notification, 0 for unlimited.\nfunction:   A function to execute when hiding the notification.\n```\n\n*Example*\n``` javascript\nvar afterNotification = function(){\n    //Do something\n};\nLungo.Notification.error(\n    \"Error\",                      //Title\n    \"Unsuccessful operation\",     //Description\n    \"cancel\",                     //Icon\n    7,                            //Time on screen\n    afterNotification             //Callback function\n);\n```\n\n\n#### confirm()\nShows a confirmation notification.\n\n**Parameters**\n```\nobject:     An object with the notification's config.\n```\n\n*Example*\n``` javascript\nLungo.Notification.confirm({\n    icon: 'user',\n    title: 'Title of confirm.',\n    description: 'Description of confirm.',\n    accept: {\n        icon: 'checkmark',\n        label: 'Accept',\n        callback: function(){ alert(\"Yes!\"); }\n    },\n    cancel: {\n        icon: 'close',\n        label: 'Cancel',\n        callback: function(){ alert(\"No!\"); }\n    }\n});\n```\n\n\n#### html()\nCreates a notification using your own html code.\n\n**Parameters**\n```\nstring:     The html code for the notification.\nstring:     The closing button text.\nstring:     Specific style for notification\nnumber:     The time to show the notification, 0 for unlimited.\n```\n\n*Example*\n``` javascript\nLungo.Notification.html('<h1>Hello World</h1>', \"Close\");\n```\n\n\n#### push()\nCreates a non-obstructive notification\n\n**Parameters**\n```\nstring:\t\tNotification's title.\nstring:\t\tThe icon, null for no icon.\nstring:\t\tSpecific style for notification\n```\n\n*Example*\n``` javascript\nLungo.Notification.html('<h1>Hello World</h1>', \"Close\");\n```\n\n\n\n.Router\n-------\nLungo.Router provides the user with the neccesary functions to manage the navigation through javascript. The following functions allow developers to work with the navigation through sections, articles and also asides.\n\n\n#### section()\nThis function allows the navigation from a section to another one. It is done to navigate forward to a section, if you want to go back to a previous one you have to use the back function which will be explained later.\n\n**Parameters**\n```\nstring:     The section's id.\n```\n\n*Example*\n``` javascript\nLungo.Router.section(\"features\");\n```\n\n#### article()\nDisplays the `<article>` in a particular `<section>`.\n\n**Parameters**\n```json\nstring:\t\tThe section id\nstring:     The article's id.\n```\n\n*Example*\n```javascript\nLungo.Router.article(\"my-section\", \"my-article\");\n```\n\n#### back()\nLungo uses the bread crumb pattern, so to return to a previous section you have to use the Lungo.Router.back function.\n\n*Example*\n``` javascript\nLungo.Router.back();\n```\n\n. aside \n-------\nThe `<aside>` element has a different behavior to article and section since its display is combined with them. For that reason Lungo offers specific methods:\n\n#### show()\nDisplay an aside element\n\n**Parameters**\n```\nstring:\t\t<aside> id\n```\n\n*Example*\n``` javascript\nLungo.Aside.show(\"my-aside\");\n```\n\n#### hide()\nHide current aside element\n*Example*\n``` javascript\nLungo.Aside.hide();\n```\n\n####  toggle()\nToggle an aside element\n\n**Parameters**\n```\nstring:\t\t<aside> id\n```\n\n*Example*\n``` javascript\nLungo.Aside.toggle(\"my-aside\")\n```\n\n.Article\n--------\nSince version 2.2 (Brownie) Lungo has a new namespace to control `<article>` element.\n\n####  clean()\nClean the content of a particular article with a specific markup\n\n**Parameters**\n```\nstring:\t\t<article> ID\nstring:\t\tIcon\nstring:\t\tTitle\nstring:\t\tDescription [OPTIONAL]\nstring:\t\tButton label [OPTIONAL]\n```\n\n*Example*\n``` javascript\nLungo.Article.clean(\"my-article\", \"user\", \"Title\", \"Description\", \"Refresh\")\n```\n\n.Service\n--------\nLungo can also make ajax requests to web services.\n\n\n#### Settings\nObject containing the ajax configuration.\n\n*Example*\n``` javascript\nLungo.Service.Settings.async = true;\nLungo.Service.Settings.error = function(type, xhr){\n    //Do something\n};\nLungo.Service.Settings.headers[\"Content-Type\"] = \"application/json\";\nLungo.Service.Settings.crossDomain = false;\nLungo.Service.Settings.timeout = 10;\n```\n\n\n#### get()\nLoad data from the server using a HTTP GET request.\n\n**Parameters**\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Example*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.get(url, data, parseResponse, \"json\");\n//Another example\nvar result = Lungo.Service.get(url, \"id=25&len=50\", null, \"json\");\n```\n\n\n#### post()\nLoad data from the server using a HTTP POST request.\n\n**Parameters**\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Example*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.post(url, data, parseResponse, \"json\");\n//Another example\nvar result = Lungo.Service.post(url, \"id=25&len=50\", null, \"json\");\n```\n\n\n#### json()\nLoad data from the server using a HTTP GET request and mime-type JSON.\n\n**Parameters**\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\n```\n\n*Example*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\nLungo.Service.json(url, data, parseResponse);\n//Another example\nvar result = Lungo.Service.json(url, \"id=25&len=50\");\n```\n\n\n#### cache()\nAuto-caching system with date pattern for HTTP GET requests.\n\n**Parameters**\n```\nstring:     The URL to which the request is sent.\nobject:     A map or string to send to the server.\nstring:     Date pattern (example: 15 minutes, 1 hour, 3 days).\nfunction:   [OPTIONAL] Callback function. (Asynchronous)\nstring:     [OPTIONAL] Mime-Type: json, xml, html, or text.\n```\n\n*Example*\n``` javascript\nvar url = \"http://localhost:8080/myService\";\nvar data = {id: 25, length: 50};\nvar parseResponse = function(result){\n    //Do something\n};\n\nLungo.Service.cache(url, data, \"2 hours\", parseResponse, \"json\");\n\n//Another example\nvar result = Lungo.Service.cache(\n    url,\n    \"id=25&len=50\",\n    \"2 hours\",\n    null,\n    \"json\"\n);\n```\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.421875,
          "content": "{\n  \"name\": \"lungo\",\n  \"version\": \"2.2.1\",\n  \"description\": \"HTML5 Cross-Device Framework.\",\n  \"homepage\": \"http://lungo.tapquo.com\",\n  \"author\": {\n    \"name\": \"Tapquo S.L.\",\n    \"site\": \"http://tapquo.com\"},\n  \"devDependencies\": {\n    \"grunt-contrib-coffee\": \"*\",\n    \"grunt-contrib-concat\": \"*\",\n    \"grunt-contrib-uglify\": \"*\",\n    \"grunt-contrib-stylus\": \"*\",\n    \"grunt-contrib-copy\": \"*\",\n    \"grunt-contrib-watch\": \"*\"\n  }\n}\n"
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}