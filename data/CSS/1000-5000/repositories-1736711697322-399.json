{
  "metadata": {
    "timestamp": 1736711697322,
    "page": 399,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "max-mapper/monu",
      "stars": 1111,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "node_modules\n.DS_Store\ntest/meta\nMonu.app\nMonu.zip"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.037109375,
          "content": "language: node_js\nnode_js:\n  - '0.12'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.265625,
          "content": "Copyright (c) 2015, Max Ogden and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "about.html",
          "type": "blob",
          "size": 2.466796875,
          "content": "<header class=\"bar bar-nav\">\n  <a href=\"/\">\n    <button class=\"btn btn-link btn-nav pull-left\">\n      <span class=\"icon icon-left-nav\"></span>\n      Back\n    </button>\n  </a>\n  <h1 class=\"title\">About Monu</h1>\n</header>\n<div class=\"content\" style=\"padding: 40px 20px\">\n  <h5>What is Monu</h5>\n  <p>Monu is an open source process monitoring application for Mac OS. You can configure Monu to launch programs, and when Monu starts up it will start them. Additionally, it will monitor the processes and restart them if they crash.</p>\n  <h5>How to use Monu</h5>\n  <p>To configure Monu, click 'Open Config Folder' and open 'config.json' in a text editor. When you save and return to Monu your new configuration will be automatically loaded.</p>\n  <p>Be sure your JSON syntax is valid when editing the configuration. Here are supported options. These should be added as top level key/value pairs to 'config.json':</p>\n  <ul>\n    <li><b>processes</b> the processes to run (see below)</li>\n    <li><b>logs</b> the directory to store logs in (default config/pids)</li>\n    <li><b>pids</b> the directory to store PIDs in (default config/logs)</li>\n    <li><b>on-error</b> a command to run when a process cannot start (default none)</li>\n    <li><b>on-restart</b> a command to run when a process restarts (default none)</li>\n    <li><b>sleep</b> sleep seconds before re-executing (default 1)</li>\n    <li><b>attempts</b> restart attempts within 60 seconds before stopping app (default 10)</li>\n    <li><b>prefix</b> add a string prefix to the log (default none)</li>\n  </ul>\n  <h5>Adding Processes</h5>\n  <p>In the 'config.json' file add processes to the 'processes' key. The key must be a name (lowercase letters and hypens) and the value must be the launch command. For example:<p>\n  <pre><code>{\n  \"logs\": \"./logs\",\n  \"pids\": \"./pids\",\n  \"processes\": {\n    \"web-1\": \"http-server . -p 8081\",\n    \"web-2\": \"http-server . -p 8082\",\n    \"web-3\": \"http-server . -p 8083\"\n  }\n}</code></pre>\n  <h5>Launch on Startup</h5>\n  <p>When you open Monu.app, it will start all configured processes.</p>\n  <p>If you would like Monu.app to start when your Mac starts up, got to <b>System Preferences &gt; Users and Groups</b> and add Monu.app to <b>Login Items</b> for your User.</p>\n  <h5>About</h5>\n  <p>Monu is a portmanteau of 'monitor' and 'menu'. It has two C/C++ dependencies, Electron and the Mon process monitor.</p>\n  <p>If you find bugs, want to send pull requests, or want the source code visit https://github.com/maxogden/monu</p>\n</div>\n"
        },
        {
          "name": "app.png",
          "type": "blob",
          "size": 15.1943359375,
          "content": null
        },
        {
          "name": "collaborators.md",
          "type": "blob",
          "size": 0.650390625,
          "content": "## Collaborators\n\nmonu is only possible due to the excellent work of the following collaborators:\n\n<table><tbody><tr><th align=\"left\">maxogden</th><td><a href=\"https://github.com/maxogden\">GitHub/maxogden</a></td></tr>\n<tr><th align=\"left\">mafintosh</th><td><a href=\"https://github.com/mafintosh\">GitHub/mafintosh</a></td></tr>\n<tr><th align=\"left\">marcbachmann</th><td><a href=\"https://github.com/marcbachmann\">GitHub/marcbachmann</a></td></tr>\n<tr><th align=\"left\">karissa</th><td><a href=\"https://github.com/karissa\">GitHub/karissa</a></td></tr>\n<tr><th align=\"left\">remixz</th><td><a href=\"https://github.com/remixz\">GitHub/remixz</a></td></tr>\n</tbody></table>\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.0634765625,
          "content": "{\n  \"logs\": \"./logs\",\n  \"pids\": \"./pids\",\n  \"processes\": {\n\n  }\n}"
        },
        {
          "name": "configure.js",
          "type": "blob",
          "size": 3.779296875,
          "content": "var Ractive = require('ractive')\nvar page = require('page')\nvar fs = require('fs')\nvar Client = require('electron-rpc/client')\nvar client = new Client()\n\nRactive.DEBUG = false\n\n// Throw unhandled javascript errors\nwindow.onerror = function errorHandler (message, url, lineNumber) {\n  message = message + '\\n' + url + ':' + lineNumber\n  throwError(message)\n}\n\nvar templates = {\n  configure: fs.readFileSync(__dirname + '/configure.tmpl').toString(),\n  detail: fs.readFileSync(__dirname + '/detail.tmpl').toString(),\n  about: fs.readFileSync(__dirname + '/about.html').toString()\n}\n\nvar state = {}\n\nvar events = {\n  processAction: function (e) {\n    var action = e.node.attributes['data-action'].value\n    var procNameAttr = e.node.attributes['data-name']\n    var data = {task: action}\n    if (procNameAttr) data.name = procNameAttr.value\n    execTask(data)\n  },\n\n  quit: function () {\n    client.request('terminate')\n  },\n\n  openDir: function () {\n    client.request('open-dir')\n  },\n\n  openKillMenu: function (e) {\n    var remote = require('remote')\n    var Menu = remote.require('menu')\n    var MenuItem = remote.require('menu-item')\n\n    function sendSignal (signal) {\n      return function () {\n        var procNameAttr = e.node.attributes['data-name']\n        execTask({task: 'stop', name: procNameAttr.value, signal: signal})\n      }\n    }\n\n    var menu = new Menu()\n    ;['SIGTERM', 'SIGHUP', 'SIGINT', 'SIGKILL', 'SIGQUIT'].forEach(function (signal) {\n      menu.append(new MenuItem({ label: 'Send ' + signal, click: sendSignal(signal) }))\n    })\n\n    menu.popup(remote.getCurrentWindow())\n    return false\n  },\n\n  openLogsDir: function (e) {\n    client.request('open-logs-dir', {name: e.context.name})\n  }\n}\n\nvar routes = {\n  configure: function configure (ctx, next) {\n    ctx.template = templates.configure\n    state.configure = render(ctx, {loading: true})\n    getAndRenderAll(next)\n  },\n  detail: function detail (ctx, next) {\n    ctx.template = templates.detail\n    state.detail = render(ctx, {loading: true})\n    getAndRender(ctx.params.name, next)\n  },\n  about: function about (ctx, next) {\n    ctx.template = templates.about\n    state.about = render(ctx, {})\n  }\n}\n\n// set up routes\npage('/', routes.configure)\npage('/detail/:name', routes.detail)\npage('/about', routes.about)\n\n// initialize router\npage.start()\npage('/')\n\n// Load all statuses when the app gets focused\nclient.on('show', function () {\n  getAndRenderAll()\n  var currentProcess = state.detail && state.detail.get('name')\n  if (currentProcess) getAndRender(currentProcess)\n})\n\nfunction execTask (task) {\n  client.request('task', task, function (err, data) {\n    if (err) return throwError(err)\n    if (!data) return\n\n    if (Array.isArray(data)) {\n      renderAll(data)\n    } else if (data.name) {\n      state.detail.set(data)\n    }\n  })\n}\n\nfunction render (ctx) {\n  var ract = new Ractive({\n    el: '#container',\n    template: ctx.template,\n    data: ctx.data\n  })\n\n  ract.on(events)\n  return ract\n}\n\nfunction getAndRenderAll (callback) {\n  callback = catchErrors(callback || function () {})\n  client.request('get-all', function (err, data) {\n    if (err) return callback(err)\n    renderAll(data)\n    callback()\n  })\n}\n\nfunction renderAll (data) {\n  data = data || []\n  var obj = {items: data, hasProcesses: data.length > 0}\n  state.configure.set(obj)\n}\n\nfunction getAndRender (name, callback) {\n  callback = catchErrors(callback || function () {})\n  client.request('get-one', {name: name}, function (err, data) {\n    if (err) return callback(err)\n    state.detail.set(data)\n    callback()\n  })\n}\n\nfunction catchErrors (callback) {\n  return function throwErrorsOrContinue (err) {\n    if (err) return throwError(err)\n    callback()\n  }\n}\n\nfunction throwError (error) {\n  var message = error.stack || error.message || JSON.stringify(error)\n  console.error(message)\n  window.alert(message)\n}\n"
        },
        {
          "name": "configure.tmpl",
          "type": "blob",
          "size": 2.08203125,
          "content": "<div class=\"content configure-content\">\n  <ul class=\"table-view\">\n    <li class=\"table-view-cell table-view-divider\">Processes</li>\n    {{#items}}\n      <li class=\"table-view-cell media\">\n        <a href=\"/detail/{{name}}\" class=\"navigate-right\">\n          <span class=\"media-object pull-left icon icon-gear\"></span> {{name}}\n          {{#state == 'alive'}}<span class=\"badge badge-positive\">Running</span>{{/state}}\n          {{#state == 'dead'}}<span class=\"badge badge-negative\">Dead</span>{{/state}}\n          {{#state == 'stopped'}}<span class=\"badge\">Not running</span>{{/state}}\n        </a>\n      </li>\n    {{/items}}\n    {{^items}}\n      <li class=\"table-view-cell media\">No Processes Configured</li>\n    {{/items}}\n    <li class=\"table-view-cell table-view-divider\">Actions</li>\n    {{#hasProcesses}}\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"startAll\">\n        <span class=\"media-object pull-left icon icon-play\"></span>\n        <div class=\"media-body\">\n          Start All\n        </div>\n      </a>\n    </li>\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"stopAll\">\n        <span class=\"media-object pull-left icon icon-stop\"></span>\n        <div class=\"media-body\">\n          Stop All\n        </div>\n      </a>\n    </li>\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"restartAll\">\n        <span class=\"media-object pull-left icon icon-refresh\"></span>\n        <div class=\"media-body\">\n          Restart All\n        </div>\n      </a>\n    </li>\n    {{/hasProcesses}}\n    <li class=\"table-view-cell media\">\n      <a class=\"navigate-right\" href=\"/about\">\n        <span class=\"media-object pull-left icon icon-search\"></span>\n        <div class=\"media-body\">\n          About\n        </div>\n      </a>\n    </li>\n  </ul>\n</div>\n<div class=\"bar bar-standard bar-footer\">\n  <button class=\"btn pull-left\" on-click=\"openDir\">\n    Open Config Folder\n  </button>\n  <button class=\"btn pull-right\" on-click=\"quit\">\n    Quit\n  </button>\n</div>\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "detail.tmpl",
          "type": "blob",
          "size": 1.73828125,
          "content": "<header class=\"bar bar-nav\">\n  <a href=\"/\">\n    <button class=\"btn btn-link btn-nav pull-left\">\n      <span class=\"icon icon-left-nav\"></span>\n      Back\n    </button>\n  </a>\n  <h1 class=\"title\">{{name}}</h1>\n  <button class=\"btn pull-right\" on-click=\"openLogsDir\">\n    View Logs\n  </button>\n</header>\n<div class=\"content\">\n  <ul class=\"table-view\">\n    {{#uptime}}<li class=\"table-view-cell\"><b>Uptime</b> {{uptime}}</li>{{/uptime}}\n    {{#pid}}<li class=\"table-view-cell\"><b>PID</b> {{pid}}</li>{{/pid}}\n    {{#state}}<li class=\"table-view-cell\"><b>State</b> {{state}}</li>{{/state}}\n    {{#cmd}}<li class=\"table-view-cell\"><b>CMD</b> {{cmd}}</li>{{/cmd}}\n    <li class=\"table-view-cell table-view-divider\">Actions</li>\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"start\" data-name=\"{{name}}\">\n        <span class=\"media-object pull-left icon icon-play\"></span>\n        <div class=\"media-body\">\n          Start\n        </div>\n      </a>\n    </li>\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"stop\" data-name=\"{{name}}\">\n        <span class=\"media-object pull-left icon icon-stop\"></span>\n        <div class=\"media-body\">\n          Stop\n        </div>\n        <button class=\"btn btn-link\" on-click=\"openKillMenu\" data-name=\"{{name}}\">\n          <span class=\"media-object icon icon-down-nav\"></span>\n        </button>\n      </a>\n    </li>\n    <li class=\"table-view-cell media\">\n      <a class=\"cursor-pointer\" on-click=\"processAction\" data-action=\"restart\" data-name=\"{{name}}\">\n        <span class=\"media-object pull-left icon icon-refresh\"></span>\n        <div class=\"media-body\">\n          Restart\n        </div>\n      </a>\n    </li>\n  </ul>\n</div>\n"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 0.53515625,
          "content": "<html>\n<head>\n  <link rel=\"stylesheet\" href=\"css/ratchet.css\">\n  <style type=\"text/css\">\n    /* overrides */\n    * { -webkit-user-select: none; }\n    .configure-content { bottom: 43px; }\n    .content .table-view { margin: 0 !important; }\n    .table-view-cell a:focus { background: rgba(0,0,0,.05);}\n    ul, code {font-size: 14px; color: #777;}\n    .badge { padding: 5px 8px; border-radius: 3px; }\n    .cursor-pointer { cursor: pointer; }\n  </style>\n</head>\n<body>\n  <div id=\"container\"></div>\n  <script src=\"configure.js\"></script>\n</body>\n</html>\n"
        },
        {
          "name": "index.js",
          "type": "blob",
          "size": 4.650390625,
          "content": "var path = require('path')\nvar fs = require('fs')\n\nvar menubar = require('menubar')\nvar ms = require('ms')\nvar Mongroup = require('mongroup')\nvar mkdir = require('mkdirp').sync\nvar debug = require('debug')('monu')\nvar shell = require('shell')\nvar dialog = require('dialog')\n\n// try to fix the $PATH on OS X\nrequire('fix-path')()\n\n// use current user env (https://github.com/sindresorhus/shell-path/issues/7)\ntry {\n  process.env = require('user-env')()\n} catch (e) {}\n\nvar Server = require('electron-rpc/server')\nvar app = new Server()\n\nvar opts = {dir: __dirname, icon: path.join(__dirname, 'images', 'Icon.png')}\nvar menu = menubar(opts)\nvar conf\n\nprocess.on('uncaughtException', function (err) {\n  dialog.showErrorBox('Uncaught Exception: ' + err.message, err.stack || '')\n  menu.app.quit()\n})\n\nmenu.on('ready', function ready () {\n  conf = loadConfig()\n  var canQuit = false\n  menu.app.on('will-quit', function tryQuit (e) {\n    if (canQuit) return true\n    menu.window = undefined\n    e.preventDefault()\n  })\n\n  // start all once\n  start([], function started (err) {\n    if (err) return console.log('error starting processes: ' + err.message)\n    console.log('started all processes')\n  })\n\n  menu.on('show', function show () {\n    app.configure(menu.window.webContents)\n    app.send('show')\n  })\n\n  app.on('terminate', function terminate (ev) {\n    canQuit = true\n    menu.app.terminate()\n  })\n\n  app.on('open-dir', function openDir (ev) {\n    shell.showItemInFolder(path.join(conf.exec.cwd, 'config.json'))\n  })\n\n  app.on('open-logs-dir', function openLogsDir (req) {\n    shell.showItemInFolder(path.join(conf.logs, req.body.name + '.log'))\n  })\n\n  app.on('get-all', function getAll (req, next) {\n    next(null, getProcessesStatus())\n  })\n\n  app.on('get-one', function getOne (req, next) {\n    next(null, getProcessStatus(req.body.name))\n  })\n\n  app.on('task', function task (req, next) {\n    if (req.body.task === 'startAll') start([], updateAll)\n    if (req.body.task === 'stopAll') stop([], req.body.signal, updateAll)\n    if (req.body.task === 'restartAll') restart([], updateAll)\n    if (req.body.task === 'start') start([req.body.name], updateSingle)\n    if (req.body.task === 'stop') stop([req.body.name], req.body.signal, updateSingle)\n    if (req.body.task === 'restart') restart([req.body.name], updateSingle)\n\n    function updateAll (err) {\n      if (err) throw err\n      next(null, getProcessesStatus())\n    }\n\n    function updateSingle (err) {\n      if (err) throw err\n      next(null, getProcessStatus(req.body.name))\n    }\n  })\n})\n\nfunction loadConfig () {\n  var dir = path.join(menu.app.getPath('userData'), 'data')\n  var configFile = dir + '/config.json'\n  var conf, data\n\n  try {\n    data = fs.readFileSync(configFile)\n  } catch (e) {\n    if (e.code === 'ENOENT') {\n      mkdir(dir)\n      fs.writeFileSync(configFile, fs.readFileSync(__dirname + '/config.json'))\n      return loadConfig()\n    } else {\n      throw e\n    }\n  }\n\n  try {\n    conf = JSON.parse(data.toString())\n  } catch (e) {\n    var code = dialog.showMessageBox({\n      message: 'Invalid configuration file\\nCould not parse JSON',\n      detail: e.stack,\n      buttons: ['Reload Config', 'Exit app']\n    })\n    if (code === 0) {\n      return loadConfig()\n    } else {\n      menu.app.quit()\n      return\n    }\n  }\n\n  conf.exec = {cwd: dir}\n  conf.logs = path.resolve(path.join(dir, conf.logs || 'logs'))\n  conf.pids = path.resolve(path.join(dir, conf.pids || 'pids'))\n\n  mkdir(conf.logs)\n  mkdir(conf.pids)\n\n  conf.mon = path.join(__dirname, 'mon')\n  return conf\n}\n\nfunction getProcessStatus (procName) {\n  var procs = getProcessesStatus()\n  return procs.filter(function filter (proc) {\n    return proc.name === procName\n  })[0]\n}\n\nfunction getProcessesStatus () {\n  debug('reload config, get proc status...')\n  conf = loadConfig()\n  var group = new Mongroup(conf)\n  var procs = group.procs\n\n  return procs.map(function each (proc) {\n    var uptime, state = proc.state()\n    if (state === 'alive') uptime = ms(Date.now() - proc.mtime(), { long: true })\n    var item = {\n      cmd: proc.cmd,\n      name: proc.name,\n      state: state,\n      pid: proc.pid,\n      uptime: uptime ? uptime : undefined\n    }\n\n    return item\n  })\n}\n\nfunction restart (procs, cb) {\n  stop(procs, 'SIGQUIT', function onstop (err1) {\n    start(procs, function onstart (err2) {\n      if (cb) cb(err1 || err2)\n    })\n  })\n}\n\nfunction start (procs, cb) {\n  var group = new Mongroup(conf)\n  group.start(procs, function onstart (err) {\n    if (err) return cb(err)\n    cb()\n  })\n}\n\nfunction stop (procs, signal, cb) {\n  if (!signal) signal = 'SIGQUIT'\n  var group = new Mongroup(conf)\n  group.stop(procs, signal, function onstop (err) {\n    if (!err || err.code === 'ENOENT') return cb()\n    cb(err)\n  })\n}\n"
        },
        {
          "name": "makefile",
          "type": "blob",
          "size": 0.3779296875,
          "content": "publish:\n\t-rm -rf Monu.app Monu.zip # prevent duplicates in the final bundle\n\tnpm run build\n\t@# ditto creates a much better compressed zip file compared to the zip command\n\t@# these flags come from ditto's man page on how to create an archive in the\n\t@# same manner as Finder's compress option\n\tditto -c -k --sequesterRsrc --keepParent Monu.app Monu.zip\n\tnpm run publish\n.PHONY: publish\n"
        },
        {
          "name": "mon",
          "type": "blob",
          "size": 23.8203125,
          "content": null
        },
        {
          "name": "notes.md",
          "type": "blob",
          "size": 0.13671875,
          "content": "Replace with release notes\n\nOn first launch you will probably have to **Right Click > Open** Monu.app in order to bypass the Mac OS warning."
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.02734375,
          "content": "{\n  \"name\": \"monu\",\n  \"productName\": \"Monu\",\n  \"version\": \"1.3.0\",\n  \"description\": \"menubar process monitor mac app\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard\",\n    \"start\": \"electron ./\",\n    \"build\": \"electron-packager . Monu --platform=darwin --arch=x64 --version=0.36.4 --icon=images/Monu.icns\",\n    \"publish\": \"publish-release --template notes.md --assets Monu.zip\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/maxogden/monu\"\n  },\n  \"author\": \"max ogden\",\n  \"license\": \"BSD-2-Clause\",\n  \"dependencies\": {\n    \"debug\": \"^2.1.3\",\n    \"electron-rpc\": \"^1.0.0\",\n    \"fix-path\": \"^1.1.0\",\n    \"menubar\": \"^2.0.0\",\n    \"mkdirp\": \"^0.5.0\",\n    \"mongroup\": \"maxogden/node-mongroup#monbin\",\n    \"ms\": \"^0.7.0\",\n    \"page\": \"^1.6.1\",\n    \"ractive\": \"^0.7.1\",\n    \"user-env\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"electron-packager\": \"^4.0.0\",\n    \"electron-prebuilt\": \"^0.36.4\",\n    \"publish-release\": \"^1.0.1\",\n    \"standard\": \"^3.2.1\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"Monu.app/**\"\n    ]\n  }\n}\n"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 3.73828125,
          "content": "### Monu\n\n![app.png](app.png)\n\nMonu is an open source process monitoring menu bar application for Mac OS. You can configure Monu to launch programs, and when Monu starts up it will start them. Additionally, it will monitor the processes and restart them if they crash.\n\nMonu is a portmanteau of 'monitor' and 'menu'. It has two C/C++ dependencies, [Electron](https://github.com/atom/electron) (which includes iojs) and the [mon](https://github.com/tj/mon) process monitor.\n\nMonu is currently **ALPHA STATUS** and is intended for developers/early adopters.\n\nTo download the latest version visit the [releases page](https://github.com/maxogden/monu/releases)\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n[![Build Status](https://travis-ci.org/maxogden/monu.svg?branch=master)](https://travis-ci.org/maxogden/monu)\n\n![screenshot.png](screenshot.png)\n\n##### How to use Monu\n\nTo configure Monu, click 'Open Config Folder' and open 'config.json' in a text editor. When you save and return to Monu your new configuration will be automatically loaded.\n\nBe sure your JSON syntax is valid when editing the configuration. Here are supported options. These should be added as top level key/value pairs to 'config.json':\n\n<ul>\n  <li><b>processes</b> the processes to run (see below)</li>\n  <li><b>logs</b> the directory to store logs in (default config/logs)</li>\n  <li><b>pids</b> the directory to store PIDs in (default config/pids)</li>\n  <li><b>on-error</b> a command to run when a process cannot start (default none)</li>\n  <li><b>on-restart</b> a command to run when a process restarts (default none)</li>\n  <li><b>sleep</b> sleep seconds before re-executing (default 1)</li>\n  <li><b>attempts</b> restart attempts within 60 seconds before stopping app (default 10)</li>\n  <li><b>prefix</b> add a string prefix to the log (default none)</li>\n</ul>\n\n##### Adding Processes\n\nIn the 'config.json' file add processes to the 'processes' key. The key must be a name (lowercase letters and hypens) and the value must be the launch command. For example:\n\n```json\n{\n  \"logs\": \"./logs\",\n  \"pids\": \"./pids\",\n  \"processes\": {\n    \"web-1\": \"http-server . -p 8081\",\n    \"web-2\": \"http-server . -p 8082\",\n    \"web-3\": \"http-server . -p 8083\"\n  }\n}\n```\n\n##### Launch on Startup\n\nWhen you open Monu.app, it will start all configured processes.\n\nIf you would like Monu.app to start when your Mac starts up, got to <b>System Preferences &gt; Users and Groups</b> and add Monu.app to <b>Login Items</b> for your User.\n\n##### Developing\n\n```bash\nnpm install # installs electron and all the deps needed for monu\nnpm start # runs the app in the electron wrapper\nnpm run build # builds the mac app\n```\n\n##### Publishing\n\nBefore publishing, make sure that your repo is clean, and that you've created a tag for the latest commit. `npm version [major|minor|patch]` will do this for you, increasing the package.json version, creating a commit and adding a tag.\n\nYou should see something like this:\n\n```\n🐈  make publish\nrm -rf Monu.app Monu.zip # prevent duplicates in the final bundle\nnpm run build\n\n> monu@1.0.4 build /Users/maxogden/src/js/monu\n> electron-packager . Monu --platform=darwin --arch=x64 --version=0.26.0 --ignore=node_modules/electron\n\nWrote new app to /Users/maxogden/src/js/monu/Monu.app\nditto -c -k --sequesterRsrc --keepParent Monu.app Monu.zip\nnpm run publish\n\n> monu@1.0.4 publish /Users/maxogden/src/js/monu\n> publish-release --template notes.md --assets Monu.zip\n\n? Git Tag: v1.0.4\n? Github repository owner: maxogden\n? Github repository name: monu\n? Release Name: Monu v1.0.4 Alpha\n\nUploading Monu.zip\n[=================================================>] 100.0% (1.17 MB/s)\nDone! Published at: https://github.com/maxogden/monu/releases/tag/v1.0.4\n```\n"
        },
        {
          "name": "screenshot.png",
          "type": "blob",
          "size": 44.986328125,
          "content": null
        }
      ]
    }
  ]
}