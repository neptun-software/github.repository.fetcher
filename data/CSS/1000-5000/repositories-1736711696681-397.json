{
  "metadata": {
    "timestamp": 1736711696681,
    "page": 397,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dowjones/intentionjs",
      "stars": 1115,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig.org",
          "type": "blob",
          "size": 0.2041015625,
          "content": "# editorconfig.org\n\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "node_modules\n.DS_Store\n_site\n*.espressostorage\n.projectile\n*.sublime*\n*~*\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 6.1181640625,
          "content": "/*\n *\n *  JSHint Configuration File for IntentionJS project.\n *  See http://jshint.com/docs/ for more details\n *\n */\n\n{\n\n  \"maxerr\"        : 100,       // {int} Maximum error before stopping\n\n  // Enforcing\n  \"bitwise\"       : true,     //  true: Prohibit bitwise operators (&, |, ^, etc.)\n  \"camelcase\"     : false,    //  true: Identifiers must be in camelCase\n                              //  TODO change to true with rule for __setters__\n  \"curly\"         : true,     //  true: Require {} for every new block or scope\n  \"eqeqeq\"        : true,     //  true: Require triple equals (===) for comparison\n  \"forin\"         : true,     //  true: Require filtering for..in loops with obj.hasOwnProperty()\n  \"immed\"         : true,     //  true: Require immediate invocations to be wrapped in parens e.g. `(function () { } ());`\n  \"indent\"        : 2,        //   {int} Number of spaces to use for indentation\n  \"latedef\"       : true,     //   true: Require variables/functions to be defined before being used\n  \"newcap\"        : true,     //   true: Require capitalization of all constructor functions e.g. `new F()`\n  \"noarg\"         : true,     //  true: Prohibit use of `arguments.caller` and `arguments.callee`\n  \"noempty\"       : true,     //  true: Prohibit use of empty blocks\n  \"nonew\"         : false,    //  true: Prohibit use of constructors for side-effects (without assignment)\n  \"plusplus\"      : false,    //  true: Prohibit use of `++` & `--`\n  \"quotmark\"      : \"single\",     //   Quotation mark consistency:\n                              //    false    : do nothing (default)\n                              //    true     : ensure whatever is used is consistent\n                              //    \"single\" : require single quotes\n                              //    \"double\" : require double quotes\n  \"undef\"         : true,     //  true: Require all non-global variables to be declared (prevents global leaks)\n  \"unused\"        : true,     //  true: Require all defined variables be used\n  \"strict\"        : true,     //  true: Requires all functions run in ES5 Strict Mode\n  \"trailing\"      : true,    //  true: Prohibit trailing whitespaces\n  \"maxparams\"     : false,    //  {int} Max number of formal params allowed per function\n  \"maxdepth\"      : false,    //  {int} Max depth of nested blocks (within functions)\n  \"maxstatements\" : false,    //  {int} Max number statements per function\n  \"maxcomplexity\" : false,    //  {int} Max cyclomatic complexity per function\n  \"maxlen\"        : false,    //  {int} Max number of characters per line\n\n  // Relaxing\n  \"asi\"           : false,     // true: Tolerate Automatic Semicolon Insertion (no semicolons)\n  \"boss\"          : false,     // true: Tolerate assignments where comparisons would be expected\n  \"debug\"         : false,     // true: Allow debugger statements e.g. browser breakpoints.\n  \"eqnull\"        : true,      //  true: Tolerate use of `== null`\n  \"esnext\"        : true,     // true: Allow ES.next (ES6) syntax (ex: `const`)\n  \"moz\"           : false,     // true: Allow Mozilla specific syntax (extends and overrides esnext features)\n                               // (ex: `for each`, multiple try/catch, function expressionâ€¦)\n  \"evil\"          : false,     // true: Tolerate use of `eval` and `new Function()`\n  \"expr\"          : false,     // true: Tolerate `ExpressionStatement` as Programs\n  \"funcscope\"     : false,     // true: Tolerate defining variables inside control statements\"\n  \"globalstrict\"  : false,     // true: Allow global \"use strict\" (also enables 'strict')\n  \"iterator\"      : false,     // true: Tolerate using the `__iterator__` property\n  \"lastsemic\"     : true,      // true: Tolerate omitting a semicolon for the last statement of a 1-line block\n  \"laxbreak\"      : false,     // true: Tolerate possibly unsafe line breakings\n  \"laxcomma\"      : false,     // true: Tolerate comma-first style coding\n  \"loopfunc\"      : false,     // true: Tolerate functions being defined in loops\n  \"multistr\"      : false,     // true: Tolerate multi-line strings\n  \"proto\"         : false,     // true: Tolerate using the `__proto__` property\n  \"scripturl\"     : false,     // true: Tolerate script-targeted URLs\n  \"smarttabs\"     : false,     // true: Tolerate mixed tabs/spaces when used for alignment\n  \"shadow\"        : false,     // true: Allows re-define variables later in code e.g. `var x=1; x=2;`\n  \"sub\"           : false,     // true: Tolerate using `[]` notation when it can still be expressed in dot notation\n  \"supernew\"      : false,     // true: Tolerate `new function () { ... };` and `new Object;`\n  \"validthis\"     : false,     // true: Tolerate using this in a non-constructor function\n  // \"regexp\"        : false,     // true if . and [^...] should be allowed in RegExp literals. They match more material than might be expected, allowing attackers to confuse applications. These forms should not be used when validating in secure applications.\n\n  // Environments\n  \"browser\"       : true,     //  Web Browser (window, document, etc)\n  \"couch\"         : false,    //  CouchDB\n  \"devel\"         : true,     //  Development/debugging (alert, confirm, etc)\n  \"dojo\"          : false,    //  Dojo Toolkit\n  \"jquery\"        : true,    //  jQuery\n  \"mootools\"      : false,    //  MooTools\n  \"node\"          : true,     //   Node.js\n  \"nonstandard\"   : false,    //  Widely adopted globals (escape, unescape, etc)\n  \"prototypejs\"   : false,    //  Prototype and Scriptaculous\n  \"rhino\"         : false,    //  Rhino\n  \"worker\"        : false,    //  Web Workers\n  \"wsh\"           : false,    //  Windows Scripting Host\n  \"yui\"           : false,    //  Yahoo User Interface\n\n  // Legacy\n  \"nomen\"         : false,    //  true: Prohibit dangling `_` in variables\n  \"onevar\"        : false,    //  true: Allow only one `var` statement per function\n  \"passfail\"      : false,    //  true: Stop on first error\n  \"white\"         : true,     //  true: Check against strict whitespace and indentation rules\n\n  // Custom Globals\n  \"globals\"       : {\n    \"_\"         : false,\n    \"it\"        : false,\n    \"underscore\": false,\n    \"define\"    : false,\n    \"describe\"  : false,\n    \"expect\"    : false,\n    \"module\"    : true,\n    \"Intention\" : true\n  }\n\n}\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 1.2041015625,
          "content": "module.exports = function (grunt) {\n  'use strict';\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  //grunt.loadNpmTasks('grunt-contrib-requirejs');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-release');\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    release: { options: { npm: false } },\n    jshint: {\n      files: [\n        '**.js',\n        'test/*.js'\n      ],\n      options: {\n        ignores: [\n          'code/*',\n          'test/vendor/**/*'\n        ],\n        jshintrc: '.jshintrc'\n      }\n    },\n    uglify: {\n      intention: {\n        options: { banner: '/*! <%= pkg.name %> v<%= pkg.version %> \\n* <%= pkg.homepage %> \\n* \\n* intention.js \\n* \\n* <%=pkg.copyright %>, <%= grunt.template.today(\"yyyy\") %>\\n* <%=pkg.banner %>*/ ' },\n        files: { 'code/intention.min.js': ['intention.js'] }\n      },\n      context: {\n        options: { banner: '/*! <%= pkg.name %> v<%= pkg.version %> \\n* <%= pkg.homepage %> \\n* \\n* context.js \\n* \\n* <%=pkg.copyright %>, <%= grunt.template.today(\"yyyy\") %>\\n* <%=pkg.banner %>*/ ' },\n        files: { 'code/context.min.js': ['context.js'] }\n      }\n    }\n  });\n  grunt.registerTask('default', [\n    'jshint',\n    'uglify'\n  ]);\n};"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.73046875,
          "content": "# intention.js\n\nDOM Manipulation via html attribute specification\n\n## Why intention.js\n\nIt's like a super amped up version of media queries on a per element basis!\n\nThe technology for dealing with responsive design is all over the place. Media queries, hacky javascript, and convoluted HTML. intention.js allows you to make all of the changes to HTML in the HTML itself. It's a way to describe the necessary differences of an HTML document between one device and another.\n\nWhat should the classes of an element be on mobile vs tablet? Where should your advertising code get placed when you're on a desktop? Does the page require an alternate slideshow widget on touch enabled devices? These are all changes that intention.js can make to the page based on a user's device. context.js creates a set of common page contexts for width thresholds, touch devices, highres displays and a fallback.\n\n\nAnd you can easily add your own contexts on top of these or create all your own custom contexts.\n\n## What's included:\n\t* intention.js\n\t* context.js\n\nintention.js is the library that manages the responsive axis, manipulates elements based on their specifications and emits events when contexts change.\n\ncontext.js is an implementation of intention.js that sets up common use patterns in responsive design.\n\nSpecifically it has the responsive contexts:\n\t* base (a catch-all)\n\t* mobile (triggered by width)\n\t* tablet (triggered by width)\n\t* standard (triggered by width)\n\t* portrait (orientation axis)\n\t* landscape (orientation axis)\n\t* touch\n\t* highres\n\n## Installation\n\n### Dependencies of intention\n\t* jquery\n\t* underscore.js\n\ninclude scripts on your page or just Intention via require.\n\n```html\n\t<!-- use with context defaults -->\n\t<script\n\t\tdata-main=\"assets/js/context\"\n\t\tsrc=\"assets/js/require/require.js\"></script>\n```\n\nOR:\n\n```html\n\t<!-- use only intention to build your own context -->\n\t<script src=\"underscore.js\"></script>\n\t<script src=\"jquery.js\"></script>\n\t<script src=\"intention.js\"></script>\n\t<script src=\"context.js\"></script>\n\t<script>\n\t\t// your amazing contextual threshold specification here!\n\t</script>\n```\n\n\n## Usage\n\nBy default context.js provides a number of threshold groups via intention.js: browser widths, orientation, touch, highres, and a base group\n\nthe default thresholds in each group are respectively:\nmobile (510 and below), tablet (510 to 840) and standard (840 to Infinity)\nportrait or landscape\ntouch (are touch gestures available)\nhighres (devicePixelRatio > 1)\nbase (default, always on)\n\nThere are three manipulation types: class names, attributes, placement on the page\n\n### Interface\n\nflag the element as \"intentional\"\n\n```html\n\t<div intent>\n```\n\nOr for valid html:\n\n```html\n\t<div data-intent>\n```\n\nAn intentional attribute:\n\nFor the purposes of the documentation the prefix \"in-\" will be used instead of \"data-in-\" to keep the code snippets concise\n\n#### Context aware elements\n\n```html\n\t<img intent in-orientation: src=\"cat.jpg\" />\n```\n\nIn the \"portrait\" orientation the above implementation will produce:\n\n```html\n\t<img class=\"portrait\" src=\"cat.jpg\" />\n```\n\nAnd in \"landscape\" orientation:\n\n```html\n\t<img class=\"landscape\" src=\"cat.jpg\" />\n```\n\ncontext.js includes four context groups or \"axes\"\n\n\t* width\n\t* orientation\n\t* touch\n\t* highres\n\nThey are associated with the following classes\n\n\t* width\n\t\t* mobile\n\t\t* tablet\n\t\t* standard\n\t* orientation\n\t\t* portrait\n\t\t* landscape\n\t* touch\n\t\t* touch\n\t* highres\n\t\t* highres\n\nAttribute structure: prefix-context-function=\"value\"\n\ni.e.\n\n```html\n\t<div class=\"not interesting\" intent in-mobile-class=\"more interesting\">\n```\n\n### Types of manipulation\n\n#### Attribute Manipulation\n\nmark an element as intention, set the base(default) attribute, specify which image to load in a given context\n\n```html\n\t<img\n\t\tintent\n\t\tin-base-src=\"small_img.png\"\n\t\tin-highres-src=\"big_img.png\" />\n```\n\nthe specification above will produce the following in each context\ndefault:\n\n```html\n<img src=\"small_img.png\" />\n```\n\nhighres:\n\n```html\n<img src=\"big_img.png\" />\n```\n\n#### Class Manipulation\n\nAn element can have more than one class. intent's aim is to be as unobtrusive as possible, at the same time allowing for a lot of flexibility with the way classes are combined.\n\n```html\n\t<section\n\t\tclass=\"column\"\n\t\tintent\n\t\tin-mobile-class=\"narrow\"\n\t\tin-tablet-class=\"medium\"\n\t\tin-standard-class=\"wide\"\n\t\tin-luxury-class=\"x-wide\"\n\t\tin-touch-class=\"swipe-nav\"\n\t>...</section>\n```\n\n#### Placement Manipulation\n\ntake this html structure\n\n```html\n\t<header><nav></nav></header>\n\t<section>...</section>\n\t<footer>...</footer>\n```\n\nsuppose we want to demote the status of the nav when the user is on smaller devices\n\nthe following specification on the nav might do what we need\n\n```html\n\t<nav intent\n\t\tin-mobile-prepend=\"footer\"\n\t\tin-tablet-append=\"section\"\n\t\tin-standard-append=\"header\">\n```\n\nwhen the device is 320px units or below the nav will appear at the top of the footer. when the device is between 320 and 768 it will go to the end of the section tag, and so forth.\n\n##### Move functions\n\t* prepend\n\t* append\n\t* before\n\t* after\n\n#### Why a base context?\n\nIn most scenarios you don't want to have to specify the way something will change in *every* context. Often times an element will be one of two things among many different contexts. take an img tag with two possible sources, it's either going to be highres or not. by specifying the in-highres-src attribute, you know that the source will be appropriately applied in that scenario. With a in-base-src attribute, you can rely on the source being set accordingly for all other contexts.\n\n### Making your own custom contexts or Intentional plugins\n\nIn addition to what is provided as a set of useful page contexts in the context.js script. You can define your own contexts, for anything!\n\nYou can extend the functionality of context.js or scrap the whole thing entirely.\n\nHere is an example for scroll depth responsive axis:\n\n```javascript\n\tvar scrolldepth_axis = intent.responsive({\n\t\tID: 'scrolldepth',\n\t\t// contexts\n\t\tcontexts: [{name:'shallow', value:20}, {name:'deep', value:1/0}],\n\t\t// matching:\n\t\tmatcher: function(measure, context){\n\t\t\treturn measure < context.value;\n\t\t},\n\t\t// measure\n\t\tmeasure:function(){\n\t\t\treturn window.pageYOffset;\n\t\t}});\n```\n\nintent.responsive returns an object with a bunch of useful properties.\nprobably the most important is \"respond\"\n\twhen you want to evaluate which context is relevant call scrolldepth_axis.respond();\n\nfor the above example you would want to call the respond function on window scroll\n\nlike so:\n\n```javascript\n\t$(window).on('scroll', scrolldepth_axis.respond);\n```\n\nThe optional \"ID\" property allows for context aware element feature for the axis outlined above.\n\nthis will compare the measurement against each context and determine which context is relevant every time the window is scrolled.\n\nOther properties of intent.responsive include:\n\n\t* ID\n\t* current (the current context)\n\t* contexts (the list of contexts you passed)\n\nthis will add all elements matching the \"$('[data-intent],[intent],[data-in],[in]')\" selector. Optionally pass a scope argument to this function to specify where in the dom to start searching. The default is the document.\n\ncalling the elements function will change the elements' attributes to the specification provided in the html as it finds them. This way your responsive axis can all be defined *before* any changes are made to the DOM.\n\n\n#### The components intent.responsive\n\n##### axis (contexts)\n\nThe thresholds are an array of context objects. the only requirement of these objects is that they have a name property.\n\nname is a required property of a context object\n```javascript\n\t[{name:'shallow'}, {name:'deep'}]\n```\n\nYou can specify any other properties (such as scroll depth values)\n\n```javascript\n\t[{name:'shallow', depth:20},\n\t\t{name:'deep', depth: Infinity}]\n```\n\n##### \"matcher\" function\n\nThe matching function is called for each item in the thresholds array until a match is made i.e. it returns true. it is totally optional. However if it is not specified a default will be used which matches based on the context name. have a look in the Default Compare Functions section for the specifics.\n\nThe context that produces a match is then understood as the current context for the threshold group. In other words there will only every be ONE matched context for a threshold group.\n\nIf a matching function is not specified this default is used:\n```javascript\n    function(measure, context){\n      return measure === context.name;\n    };\n```\n\n##### \"measure\" function\n\ndefault measure function is a pass-through\n\n```javascript\n\tfunction(arg){\n      return arg;\n    };\n```\n\nwhy? intent.responsive() // outputs a function. so calling the result of that function with an argument passed to it will get used as the measure arg in the *matcher* function\n\nlike so:\n\n```javascript\n\t// make a responsive group *thresholds* is the array of contexts and *matcher* is a custom comparison function\n\tvar responsive = intent.responsive(thresholds, matcher);\n\t// assuming we want to compare the scroll depth against each context you could do something like this:\n\tresponsive(window.pageYOffset);\n```\n\nin this example window.pageYOffset would get passed as the first argument to the matcher function for every context until the matcher returns true.\n\n#### Putting it all together\n\nThreshold objects must be passed to intent.responsive as an array\n\nThe only other requirement is that the threshold object has a \"name\" property, i.e. {name:'slow_page'}. The name is used for two main things: emmiting an event of that name on the intent object and allowing you to create specifications in the html for that threshold.\n\n\t* names may *not* have dashes\n\t* names can have \"_\"\n\t* the regex to match them is simply: [_a-zA-Z0-9]+\n\nto create an event handler for a threshold:\n\n```javascript\nintent.on('slow_page', function(){\n\talert('try another wifi network');\n});\n```\nto specify changes to the html when in that threshold\n\n```html\n\t<img intent in-slow_page-src=\"toobad.gif\" />\n```\n\n#### Default Matcher and Measure Functions\n\nMatcher\n\n```javascript\n    function(measure, ctx){\n      return measure === ctx.name;\n    };\n```\n\nMeasure\n\n```javascript\n  \t// measure default is just a pass through\n    function(arg){\n      return arg;\n    };\n```\n\n\n### Stuff to note:\n\n### Master list of document manipulation types:\n\n#### Multi-value attr (union of all current contexts)\n\t* class\n#### Move Functions\n\t* append\n\t* prepend\n\t* before\n\t* after\n#### Single-value attrs, (everything else)\n\t* any arbitrary atribute that doesn't include a dash.\n\n\n## Author\n\t* Joe Kendall\n\n## Contributors\n\t* Erin Sparling\n\t* Adrian Lafond\n\t* Mike Stamm\n\n## Major Contributions to examples and documentation\n\t* Camila Mercado\n\t* Paul Pangrazzi\n\n\n\n## License\n```javascript\n\t// MIT license for everything\n\n\t// Copyright (c) 2012 The Wall Street Journal,\n\t// http://wsj.com/\n\n\t// Permission is hereby granted, free of charge, to any person obtaining\n\t// a copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to\n\t// permit persons to whom the Software is furnished to do so, subject to\n\t// the following conditions:\n\n\t// The above copyright notice and this permission notice shall be\n\t// included in all copies or substantial portions of the Software.\n\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n\t// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n\t// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n\t// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.24609375,
          "content": "{\n  \"name\": \"intentionjs\",\n  \"version\": \"0.9.9\",\n  \"main\": \"intention.js\",\n  \"scripts\":\n  \"dependencies\": {\n    \"jquery\": \"1.9.0\",\n    \"underscore.js\": \"latest\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\"responsive\", \"touch\", \"contexts\", \"intentions\"]\n}\n"
        },
        {
          "name": "code",
          "type": "tree",
          "content": null
        },
        {
          "name": "context.js",
          "type": "blob",
          "size": 4.0654296875,
          "content": "/*!\n * context.js Library associated with > v0.9.6.2 of intention.js\n * http://intentionjs.com/\n *\n * Copyright 2011, 2013 Dowjones and other contributors\n * Released under the MIT license\n *\n */\n(function () {\n  'use strict';\n  var context = function ($, Intention) {\n    // create a brand spankin new intention object\n    var intent = new Intention(),\n      // placeholder for the horizontal axis\n      horizontal_axis, orientation_axis;\n    // throttle function used for keeping calls to the resize responsive\n    // callback to a minimum\n    function throttle(callback, interval) {\n      var lastExec = new Date(), timer = null;\n      return function (e) {\n        var d = new Date();\n        if (d - lastExec < interval) {\n          if (timer) {\n            window.clearTimeout(timer);\n          }\n          var callbackWrapper = function (event) {\n            return function () {\n              callback(event);\n            };\n          };\n          timer = window.setTimeout(callbackWrapper(e), interval);\n          return false;\n        }\n        callback(e);\n        lastExec = d;\n      };\n    }\n    // catchall\n    // =======================================================================\n    intent.responsive([{ name: 'base' }]).respond('base');\n    // width context?\n    // =======================================================================\n    horizontal_axis = intent.responsive({\n      ID: 'width',\n      contexts: [\n        {\n          name: 'standard',\n          min: 840\n        },\n        {\n          name: 'tablet',\n          min: 510\n        },\n        {\n          name: 'mobile',\n          min: 0\n        }\n      ],\n      matcher: function (test, context) {\n        if (typeof test === 'string') {\n          return test === context.name;\n        }\n        return test >= context.min;\n      },\n      measure: function (arg) {\n        if (typeof arg === 'string') {\n          return arg;\n        }\n        return $(window).width();\n      }\n    });\n    // orientation context?\n    // =======================================================================\n    orientation_axis = intent.responsive({\n      ID: 'orientation',\n      contexts: [\n        {\n          name: 'portrait',\n          rotation: 0\n        },\n        {\n          name: 'landscape',\n          rotation: 90\n        }\n      ],\n      matcher: function (measure, ctx) {\n        return measure === ctx.rotation;\n      },\n      measure: function () {\n        var test = Math.abs(window.orientation);\n        if (test > 0) {\n          test = 180 - test;\n        }\n        return test;\n      }\n    });\n    // ONE TIME CHECK AXES:\n    // touch device?\n    // =======================================================================\n    intent.responsive({\n      ID: 'touch',\n      contexts: [{ name: 'touch' }],\n      matcher: function () {\n        return 'ontouchstart' in window;\n      }\n    }).respond();\n    // retina display?\n    // =======================================================================\n    intent.responsive({\n      ID: 'highres',\n      contexts: [{ name: 'highres' }],\n      matcher: function () {\n        return window.devicePixelRatio > 1;\n      }\n    }).respond();\n    // bind events to the window\n    $(window).on('resize', throttle(horizontal_axis.respond, 100)).on('orientationchange', horizontal_axis.respond).on('orientationchange', orientation_axis.respond);\n    // register the current width and orientation without waiting for a window\n    // resize\n    horizontal_axis.respond();\n    orientation_axis.respond();\n    $(function () {\n      // at doc ready grab all of the elements in the doc\n      intent.elements(document);\n    });\n    // return the intention object so that it can be extended by other plugins\n    return intent;\n  };\n  (function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define('context', [\n        'jquery',\n        'intention'\n      ], factory);\n    } else {\n      // Browser globals\n      root.intent = factory(root.jQuery, root.Intention);\n    }\n  }(this, function ($, Intention) {\n    return context($, Intention);\n  }));\n}.call(this));"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "intention.js",
          "type": "blob",
          "size": 14.01171875,
          "content": "/*!\n * intention.js Library v0.9.9\n * http://intentionjs.com/\n *\n * Copyright 2011, 2013 Dowjones and other contributors\n * Released under the MIT license\n *\n */\n(function (root, factory) {\n  'use strict';\n  if (typeof define === 'function' && define.amd) {\n    define('intention', [\n      'jquery',\n      'underscore'\n    ], factory);\n  } else {\n    root.Intention = factory(root.jQuery, root._);\n  }\n}(this, function ($, _) {\n  'use strict';\n  var Intention = function (params) {\n    var intent = _.extend(this, params, {\n        _listeners: {},\n        contexts: [],\n        elms: $(),\n        axes: {},\n        priority: []\n      });\n    return intent;\n  };\n  Intention.prototype = {\n    /**************************************************************\n     *\n     * @public methods\n     *\n     **************************************************************/\n    responsive: function responsive(contexts, options) {\n      // for generating random ids for axis when not specified\n      var idChars = 'abcdefghijklmnopqrstuvwxyz0123456789',\n          len = idChars.length, id = '', i;\n      // create a random id for the axis\n      for (i = 0; i < 5; i++) {\n        id += idChars[Math.floor(Math.random() * len)];\n      }\n      var defaults = {\n          matcher: function (measure, ctx) {\n            return measure === ctx.name;\n          },\n          measure: _.identity,\n          ID: id\n        };\n      if (_.isObject(options) === false) {\n        options = {};\n      }\n      if (_.isArray(contexts) && _.isArray(contexts[0].contexts)) {\n        _.each(contexts, function (axis) {\n          responsive.apply(this, axis);\n        }, this);\n        return;\n      }\n      if (_.isArray(contexts) === false && _.isObject(contexts)) {\n        options = contexts;\n      } else {\n        options.contexts = contexts;\n      }\n      // fill in the options\n      options = _.extend({}, defaults, options);\n      // bind the respond function to the axis ID and prefix it\n      // with an underscore so that it does not get whomped accidentally\n      this.on('_' + options.ID + ':', _.bind(function (e) {\n        this.axes = this._contextualize(options.ID, e.context, this.axes);\n        this._respond(this.axes, this.elms);\n      }, this));\n      var axis = {\n          ID: options.ID,\n          current: null,\n          contexts: options.contexts,\n          respond: _.bind(this._responder(options.ID, options.contexts, options.matcher, options.measure), this)\n        };\n      this.axes[options.ID] = axis;\n      this.axes.__keys__ = this.priority;\n      this.priority.unshift(options.ID);\n      return axis;\n    },\n    elements: function (scope) {\n      // find all responsive elms in a specific dom scope\n      if (!scope) {\n        scope = document;\n      }\n      $('[data-intent],[intent],[data-in],[in]', scope).each(_.bind(function (i, elm) {\n        this.add($(elm));\n      }, this));\n      return this;\n    },\n    add: function (elms, options) {\n      var spec;\n      if (!options) {\n        options = {};\n      }\n      // is expecting a jquery object\n      elms.each(_.bind(function (i, elm) {\n        var exists = false;\n        this.elms.each(function (i, respElm) {\n          if (elm === respElm.elm) {\n            exists = true;\n            return false;\n          }\n          return true;\n        });\n        if (exists === false) {\n          // create the elements responsive data\n          spec = this._fillSpec(_.extend(options, this._attrsToSpec(elm.attributes, this.axes)));\n          // make any appropriate changes based on the current contexts\n          this._makeChanges($(elm), spec, this.axes);\n          this.elms.push({\n            elm: elm,\n            spec: spec\n          });\n        }\n      }, this));\n      return this;\n    },\n    remove: function (elms) {\n      // is expecting a jquery object\n      var respElms = this.elms;\n      // elms to remove\n      elms.each(function (i, elm) {\n        // elms to check against\n        respElms.each(function (i, candidate) {\n          if (elm === candidate.elm) {\n            respElms.splice(i, 1);\n            // found the match, break the loop\n            return false;\n          }\n          return true;\n        });\n      });\n      return this;\n    },\n    is: function (ctxName) {\n      var axes = this.axes;\n      return _.some(axes.__keys__, function (key) {\n        return ctxName === axes[key].current;\n      });\n    },\n    current: function (axisName) {\n      if (this.axes.hasOwnProperty(axisName)) {\n        return this.axes[axisName].current;\n      } else {\n        return false;\n      }\n    },\n    on: function (type, listener) {\n      var events = type.split(' '), i = 0;\n      for (i; i < events.length; i++) {\n        if (this._listeners[events[i]] === undefined) {\n          this._listeners[events[i]] = [];\n        }\n        this._listeners[events[i]].push(listener);\n      }\n      return this;\n    },\n    off: function (type, listener) {\n      if (_.isArray(this._listeners[type])) {\n        var listeners = this._listeners[type], i = 0;\n        for (i; i < listeners.length; i++) {\n          if (listeners[i] === listener) {\n            listeners.splice(i, 1);\n            break;\n          }\n        }\n      }\n      return this;\n    },\n    /**************************************************************\n      *\n      *@private methods\n      *\n      **************************************************************/\n    _responder: function (axisID, contexts, matcher, measure) {\n      var currentContext;\n      // called to perform a check\n      return function () {\n        var measurement = measure.apply(this, arguments);\n        _.every(contexts, function (ctx) {\n          if (matcher(measurement, ctx)) {\n            // first time, or different than last context\n            if (currentContext === undefined || ctx.name !== currentContext.name) {\n              currentContext = ctx;\n              // event emitting!\n              // emit the private axis event\n              this._emitter({\n                _type: '_' + axisID + ':',\n                context: currentContext.name\n              }, currentContext, this)._emitter({\n                _type: axisID + ':',\n                context: currentContext.name\n              }, currentContext, this)._emitter(_.extend({}, { _type: axisID + ':' + currentContext.name }, currentContext), currentContext, this)._emitter(_.extend({}, { _type: currentContext.name }, currentContext), currentContext, this);\n              // done, break the loop\n              return false;\n            }\n            // same context, break the loop\n            return false;\n          }\n          return true;\n        }, this);\n        // return the intention object for chaining\n        return this;\n      };\n    },\n    _emitter: function (event) {\n      if (typeof event === 'string') {\n        event = { _type: event };\n      }\n      if (!event.target) {\n        event.target = this;\n      }\n      if (!event._type) {\n        throw new Error(event._type + ' is not a supported event.');\n      }\n      if (_.isArray(this._listeners[event._type])) {\n        var listeners = this._listeners[event._type], i;\n        for (i = 0; i < listeners.length; i++) {\n          listeners[i].apply(this, arguments);\n        }\n      }\n      return this;\n    },\n    _fillSpec: function (spec) {\n      var applySpec = function (fn) {\n          _.each(spec, function (axisOptions, axis) {\n            _.each(axisOptions, function (ctxOptions, ctx) {\n              fn(ctxOptions, ctx, axis);\n            });\n          });\n        }, filler = {};\n      applySpec(function (options) {\n        // check to see if the ctx val is an object, could be a string\n        if (_.isObject(options)) {\n          _.each(options, function (val, func) {\n            filler[func] = '';\n          });\n        }\n      });\n      applySpec(function (options, ctx, axis) {\n        if (_.isObject(options)) {\n          spec[axis][ctx] = _.extend({}, filler, options);\n        }\n      });\n      return spec;\n    },\n    _assocAxis: function (ctx, axes) {\n      var match = false;\n      _.every(axes.__keys__, function (axis) {\n        if (match === false) {\n          _.every(axes[axis].contexts, function (ctxCandidate) {\n            if (ctxCandidate.name === ctx) {\n              match = axis;\n              return false;\n            }\n            return true;\n          });\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return match;\n    },\n    _makeSpec: function (axis, ctx, sAttr, value, spec) {\n      var axisObj, ctxObj;\n      if (spec[axis] !== undefined) {\n        axisObj = spec[axis];\n        if (axisObj[ctx] === undefined) {\n          axisObj[ctx] = {};\n        }\n      } else {\n        axisObj = {};\n        axisObj[ctx] = {};\n        spec[axis] = axisObj;\n      }\n      axisObj[ctx][sAttr] = value;\n      return spec;\n    },\n    _attrsToSpec: function (attrs, axes) {\n      var spec = {}, fullPattern = new RegExp('^(data-)?(in|intent)-(([a-zA-Z0-9][a-zA-Z0-9]*:)?([a-zA-Z0-9]*))-([A-Za-z:-]+)'), axisPattern = new RegExp('^(data-)?(in|intent)-([a-zA-Z0-9][_a-zA-Z0-9]*):$');\n      _.each(attrs, function (attr) {\n        var specMatch = attr.name.match(fullPattern), axisName;\n        if (specMatch !== null) {\n          specMatch = specMatch.slice(-3);\n          axisName = specMatch[0];\n          if (specMatch[0] === undefined || specMatch[0] === '') {\n            // if there is no axis find one:\n            specMatch[0] = this._assocAxis(specMatch[1], axes);\n            if (specMatch[0] === false) {\n              // there is no context, so get outa here\n              return;  // skipt the attr\n            }\n          } else {\n            specMatch[0] = specMatch[0].replace(/:$/, '');\n          }\n          specMatch.push(attr.value);\n          specMatch.push(spec);\n          spec = this._makeSpec.apply(this, specMatch);\n        } else if (axisPattern.test(attr.name)) {\n          axisName = attr.name.match(axisPattern)[3];\n          _.each(axes[axisName].contexts, function (context) {\n            this._makeSpec(axisName, context.name, 'class', context.name + ' ' + attr.value, spec);\n          }, this);\n        }\n      }, this);\n      return spec;\n    },\n    _contextSpec: function (ctxObj, specs) {\n      if (specs.hasOwnProperty(ctxObj.axis) && specs[ctxObj.axis].hasOwnProperty(ctxObj.ctx)) {\n        return specs[ctxObj.axis][ctxObj.ctx];\n      }\n      return {};\n    },\n    _resolveSpecs: function (currentContexts, specs) {\n      var changes = {}, moveFuncs = [\n          'append',\n          'prepend',\n          'before',\n          'after'\n        ];\n      _.each(currentContexts, function (ctxObj) {\n        // if the axis or the context to not exist in the specs object\n        // skip to the next one\n        _.each(this._contextSpec(ctxObj, specs), function (val, func) {\n          if (func === 'class') {\n            if (!changes[func]) {\n              changes[func] = [];\n            }\n            changes[func] = _.union(changes[func], val.split(' '));\n          } else if ((changes.move === undefined || changes.move.value === '') && $.inArray(func, moveFuncs) !== -1) {\n            changes.move = {\n              value: val,\n              placement: func\n            };\n          } else {\n            if (changes[func] === undefined || changes[func] === '') {\n              changes[func] = val;\n            }\n          }\n        }, this);\n      }, this);\n      return changes;\n    },\n    _currentContexts: function (axes) {\n      var contexts = [];\n      _.each(axes.__keys__, function (ID) {\n        if (axes[ID].current !== null) {\n          contexts.push({\n            ctx: axes[ID].current,\n            axis: ID\n          });\n          return;\n        }\n      });\n      return contexts;\n    },\n    _removeClasses: function (specs, axes) {\n      var toRemove = [];\n      _.each(axes.__keys__, function (key) {\n        var axis = axes[key];\n        _.each(axis.contexts, function (ctx) {\n          // ignore the current context, those classes SHOULD be applied\n          if (ctx.name === axis.current) {\n            return;\n          }\n          var contextSpec = this._contextSpec({\n              axis: axis.ID,\n              ctx: ctx.name\n            }, specs), classes;\n          if (contextSpec !== undefined) {\n            if (contextSpec['class'] !== undefined) {\n              classes = contextSpec['class'].split(' ');\n              if (classes !== undefined) {\n                toRemove = _.union(toRemove, classes);\n              }\n            }\n          }\n        }, this);\n      }, this);\n      return toRemove;\n    },\n    _contextConfig: function (specs, axes) {\n      return this._resolveSpecs(this._currentContexts(axes), specs, axes);\n    },\n    _makeChanges: function (elm, specs, axes) {\n      if (_.isEmpty(axes) === false) {\n        var ctxConfig = this._contextConfig(specs, axes);\n        _.each(ctxConfig, function (change, func) {\n          if (func === 'move') {\n            if (specs.__placement__ !== change.placement || specs.__move__ !== change.value) {\n              $(change.value)[change.placement](elm);\n              // save the last placement of the element so\n              // we're not moving it around for no good reason\n              specs.__placement__ = change.placement;\n              specs.__move__ = change.value;\n            }\n          } else if (func === 'class') {\n            var classes = elm.attr('class') || '';\n            // the class add/remove formula\n            classes = _.union(change, _.difference(classes.split(' '), this._removeClasses(specs, axes)));\n            elm.attr('class', classes.join(' '));\n          } else {\n            elm.attr(func, change);\n          }\n        }, this);\n      }\n      return elm;\n    },\n    _respond: function (axes, elms) {\n      // go through all of the responsive elms\n      elms.each(_.bind(function (i, elm) {\n        var $elm = $(elm.elm);\n        this._makeChanges($elm, elm.spec, axes);\n        $elm.trigger('intent', this);\n      }, this));\n    },\n    _contextualize: function (axisID, context, axes) {\n      axes[axisID].current = context;\n      return axes;\n    },\n    _axis_test_pattern: new RegExp('^_[a-zA-Z0-9]'),\n    _axis_match_pattern: new RegExp('^_([a-zA-Z0-9][_a-zA-Z0-9]*)'),\n    _trim_pattern: new RegExp('^s+|s+$', 'g')\n  };\n  return Intention;\n}));\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.8935546875,
          "content": "{\n  \"name\": \"intention.js\",\n  \"version\": \"0.9.9\",\n  \"description\": \"DOM Manipulation via html attribute specification\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"http://github.com/wsjdesign/intentionjs\"\n  },\n  \"homepage\": \"http://intentionjs.com/\",\n  \"author\": \"Joe Kendall\",\n  \"license\": \"MIT\",\n  \"copyright\": \"Copyright 2008\",\n  \"banner\": \"Dowjones and other contributors. \\n* Released under the MIT license. \\n*\",\n  \"main\": \"intention.js\",\n  \"keywords\": [\n    \"responsive\",\n    \"design\",\n    \"intention\",\n    \"ui\"\n  ],\n  \"dependencies\": {\n    \"jquery\": \"*\",\n    \"underscore\": \"*\"\n  },\n  \"devDependencies\": {\n    \"grunt-contrib-uglify\": \"~0.2.2\",\n    \"chai\": \"*\",\n    \"mocha\": \"*\",\n    \"grunt-release\": \"~0.5.1\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/wsjdesign/intentionjs/issues\"\n  },\n  \"directories\": {\n    \"example\": \"examples\",\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\"\n  }\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}