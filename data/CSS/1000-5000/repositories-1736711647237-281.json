{
  "metadata": {
    "timestamp": 1736711647237,
    "page": 281,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "openexchangerates/money.js",
      "stars": 1465,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": ".DS_Store\nerr.log\nout.log\nforever.log"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "demo-resources/\nfavicon.ico\nindex.html\nmoney.min.js"
        },
        {
          "name": "demo-resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 26.845703125,
          "content": "<!doctype html>\n<!--[if lt IE 7]> <html class=\"no-js ie6 oldie\" lang=\"en\"> <![endif]-->\n<!--[if IE 7]>\t\t<html class=\"no-js ie7 oldie\" lang=\"en\"> <![endif]-->\n<!--[if IE 8]>\t\t<html class=\"no-js ie8 oldie\" lang=\"en\"> <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\" lang=\"en\"> <!--<![endif]-->\n<head>\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\n\t<title>money.js / fx() - javascript currency conversion library</title>\n\t<meta name=\"description\" content=\"money.js is a tiny (1kb) javascript library for real-time currency conversion\">\n\t<meta name=\"author\" content=\"Open Exchange Rates\">\n\n\t<meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n\t<link rel=\"canonical\" href=\"http://openexchangerates.github.com/money.js/\" />\n\t<script type=\"text/javascript\">\n\t\tvar _gaq = _gaq || [];\n\t\t_gaq.push(['_setAccount', 'UA-17884149-3']);\n\t\t_gaq.push(['_trackPageview']);\n\t\t(function() {\n\t\t\tvar ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n\t\t\tga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n\t\t})();\n\t</script>\n\n\t<link rel=\"stylesheet\" href=\"demo-resources/style.css\">\n\t<link rel=\"stylesheet\" href=\"http://openexchangerates.github.io/javascript-sandbox-console/src/sandbox.css\">\n</head>\n<body>\n<!--\n                   $$$$$\n                   $$$$$\n           $$$$$$$$$$$$$$$$$$\n       $$$$$$$$$$$$$$$$$$$$$$$$$$\n     $$$$$$$       $$$$$     $$$$$$$\n   $$$$$$          $$$$$       $$$$$$$\n  $$$$$$           $$$$$        $$$$$$\n  $$$$$$           $$$$$\n  $$$$$$           $$$$$\n   $$$$$$          $$$$$\n    $$$$$$$$       $$$$$\n      $$$$$$$$$$$$$$$$$$\n          $$$$$$$$$$$$$$$$$$$\n                 $$$$$$$$$$$$$$$$$\n                   $$$$$ $$$$$$$$$$\n                   $$$$$       $$$$$$$\n                   $$$$$          $$$$$$\n                   $$$$$           $$$$$$\n$$$$$$$            $$$$$          $$$$$$$\n $$$$$$            $$$$$          $$$$$$$\n  $$$$$$$          $$$$$        $$$$$$$$\n   $$$$$$$$        $$$$$      $$$$$$$$\n      $$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n          $$$$$$$$$$$$$$$$$$$$$$\n                  $$$$$$$\n                   $$$$$\n                   $$$$$\n-->\n\t<div id=\"container\">\n\t\t<header class=\"clearfix\">\n\t\t\t<h1>money.js<span> / fx()</span></h1>\n\t\t\t<h2>Simple JavaScript currency conversion library with no dependencies, in just over 1 kb.</h2>\n\t\t\t<p>Designed to work seamlessly with data from the <strong><a href=\"https://openexchangerates.org/\" title=\"Free JSON Currency Conversion Exchange Rates API\" target=\"_blank\">Open Exchange Rates API</a></strong> - or any other data source and base currency, with just a few lines of setup. Use standalone, or as a nodeJS/npm or RequireJS (AMD) module.</p>\n\t\t</header>\n\n\t\t<div id=\"main\" role=\"main\">\n\n\t\t\t<pre class=\"prettyprint lang-js\">// From any currency, to any currency:\nfx.convert(12.99, {from: \"GBP\", to: \"HKD\"});\n\n// Chaining sugar:\nfx(1000).from(\"USD\").to(\"GBP\");\nfx(1000).to(\"AED\");\n\n// With simple settings and defaults, making this possible:\nfx.convert(5318008);\nfx(5318008).to(\"AED\");\n\n// Can also be used as a <strong>nodeJS/npm</strong> or <strong>requireJS/AMD</strong> module\nvar fx = require(\"money\");\nrequire([\"money\"], function(fx) { /* ... */ });\n\n// Read more below or jump to the <strong><a href=\"#download\" title=\"download money.js\">downloads</a></strong>, <strong><a href=\"#playground\" title=\"demo sandbox\">demo playground</a></strong> or <strong><a href=\"#documentation\" title=\"money.js documentation\">documentation</a></strong>\n// maintained by <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates currency conversion API\" target=\"_blank\">openexchangerates.org</a></strong></pre>\n\n\t\t\t<p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/money.js\" data-text=\"money.js - tiny javascript library for real-time currency conversion\" target=\"_blank\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n\n\t\t\t<h3>Introduction</h3>\n\t\t\t\n\t\t\t<p>Tired of trying to adapt those 10-year-old <em>\"FREE Currency Converter JavaScripts!\"</em> into something workable for your enterprise software or shopping cart? <strong>money.js</strong> is a simple library with one function: to convert a money value from any currency to any other currency.</p>\n\n\t\t\t<p>Read on for some background information, or jump straight to the <strong><a href=\"#download\" title=\"download money.js\">downloads</a></strong>, <strong><a href=\"#playground\" title=\"demo sandbox\">demo playground</a></strong> or <strong><a href=\"#documentation\" title=\"money.js documentation\">documentation</a></strong>.</p>\n\n\t\t\t<p>In order to perform currency conversion in JavaScript, you'll need a reliable source of real-time exchange rates. <strong><a href=\"https://openexchangerates.org\" title=\"Free Real-time Exchange Rates JSON API\" target=\"_blank\">Open Exchange Rates</a></strong> uses algorithmic blending to calculate a consistently accurate and unbiased set of rates for 165+ world currencies, and provides these via a seamless API to startups, businesses and Fortune 500s, costing 10-20x less than other industry providers (and the only API to offer a <em>Forever Free</em> plan).</p>\n\n\t\t\t<p>While we recommend this for all users, money.js is not tied to any particular data source - see the <strong><a href=\"#documentation\" title=\"money.js documentation\">documentation</a></strong> to integrate the Open Exchange Rates API data (or any exchange rate data source) with the library in only a few lines of code.</p>\n\n\t\t\t<p>You only need the conversion rates relative to any single currency, in order to be able to convert values between any other two currencies; <strong>money.js</strong> does it all for you.</p>\n\n\n\t\t\t<h3 id=\"download\">Downloads</h3>\n\t\t\t<p>These links always point to the latest stable version of money.js:</p>\n\n\t\t\t<h4>&raquo; &nbsp;<strong><a href=\"http://openexchangerates.github.io/money.js/money.js\" title=\"money.js (development, uncompressed)\" target=\"_blank\">money.js</a></strong> <span>development version (4.3 kb)</h4>\n\t\t\t<h4>&raquo; &nbsp;<strong><a href=\"http://openexchangerates.github.io/money.js/money.min.js\" title=\"money.min.js (production, minified)\" target=\"_blank\">money.min.js</a></strong> <span>production/minified version (1.1 kb)</h4>\n\t\t\t<p>There are more download options available on the GitHub repository, at <strong><a href=\"https://github.com/openexchangerates/money.js/\" title=\"openexchangerates/money.js on GitHub\">openexchangerates/money.js</a></strong>.</p>\n\n\n\t\t\t<h3 id=\"playground\">Demo Playground</h3>\n\n\t\t\t<p>You can use this JavaScript Sandbox to kick the tires and play around with money.js. It's running in a separate (sandboxed) scope, but you have access to jQuery (<code>$</code>), underscore (<code>_</code>), <a href=\"http://openexchangerates.github.io/accounting.js/\" title=\"accounting.js - JavaScript number and money formatting library\">accounting.js</a> (<code>accounting</code>) and money.js (<code>fx</code>).</p>\n\n\t\t\t<p>You can use <code>:load <em>script.js</em></code> to load extra libraries, or try <code>:help</code> if stuck.</p>\n\t\t\t<p>Exchange rates should be set up already (defaults = <code>from: \"USD\"</code>, <code>to: \"GBP\"</code>) but if not, try refreshing the page. There are some sample commands to try out below.</p>\n\n\n\t\t\t<!-- JS Sandbox Console [http://openexchangerates.github.io/javascript-sandbox-console/] -->\n\t\t\t<div id=\"sandbox\">sandbox console loading...</div>\n\n\n\t\t\t<h5>Some sample commands to get you started:</h5>\n\t\t\t<p id=\"sample-commands\"></p>\n\n\t\t\t<p><em>Interested in putting the sandbox on your JavaScript library homepage? It's on GitHub at <strong><a href=\"http://openexchangerates.github.io/javascript-sandbox-console/\" title=\"JS Sandbox Console\" target=\"_blank\">openexchangerates/javascript-sandbox-console</a></strong>.</em></p>\n\n\t\t\t<h3 id=\"documentation\">Documentation</h3>\n\n\t\t\t<ul>\n\t\t\t\t<li><strong><a href=\"#basic-install\" title=\"\">Basic installation</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#fx.rates\" title=\"\">Setting up exchange rates with fx.rates</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#fx.settings-fxSetup\" title=\"\">fx.settings</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#fx.convert\" title=\"\">fx.convert()</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#fx.noConflict\" title=\"\">fx.noConflict()</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#chaining-fx\" title=\"\">Chaining with fx(val)</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#accounting.js\" title=\"\">Usage with 'accounting.js'</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#nodeJS-npm\" title=\"\">Usage in nodeJS/npm</a></strong></li>\n\t\t\t\t<li><strong><a href=\"#amd-requirejs\" title=\"\">Usage as a RequireJS/AMD module</a></strong></li>\n\t\t\t</ul>\n\n\t\t\t<h4 id=\"basic-install\">Basic Installation</h4>\n\n\t\t\t<p>To use money.js as a standalone library, <strong><a href=\"#download\" title=\"download money.js\">download</a></strong> the minified or development version of money.js, and include it in your HTML page:</p>\n\n\t\t\t<pre class=\"prettyprint\">&lt;script src=&quot;path/to/money.js&quot;&gt;&lt;/script&gt;</pre>\n\n\t\t\t<p>You'll need to do one more thing before you can use it, which is:</p>\n\n\n\t\t\t<h4 id=\"fx.rates\">Setting up exchange rates with fx.rates</h4>\n\n\t\t\t<p>To use money.js to convert currencies, you'll need to feed it with some exchange rate data and provide a <code>base</code> currency. (As long as you have exchange rates for every currency relative to one single other ('base') currency, money.js can convert between <em>any other two</em>)</p>\n\n\t\t\t<p>The library doesn't specify a format for currency names/codes (we recommend sticking to the standard three-letter codes). It also does not mind how accurate they are, or which currency is your <code>base</code> rate.</p>\n\t\t\t<p>Rates are stored in the <code>fx.rates</code> object, while the <code>base</code> currency is stored in <code>fx.base</code>. The base currency must also appear in the rates object. They should like this:</p>\n\n\t\t\t<pre class=\"prettyprint\">fx.base = \"USD\";\nfx.rates = {\n\t\"EUR\" : 0.745101, // eg. 1 USD === 0.745101 EUR\n\t\"GBP\" : 0.647710, // etc...\n\t\"HKD\" : 7.781919,\n\t\"USD\" : 1,        // always include the base rate (1:1)\n\t/* etc */\n}</pre>\n\t\t\t<p>You can include as many or as few currencies as you need, and the rates can be approximate, historical or just plain wrong (though we recommend sticking with up-to-date, accurate data from a <strong><a href=\"https://openexchangerates.org\" title=\"Exchange Rates JSON API, free currency data\" target=\"_blank\">reliable exchange rates API</a></strong>.)</p>\n\t\t\t<p>Always include the <code>base</code> rate (the currency code from <code>fx.base</code>) in <code>fx.rates</code> object, for example <code>\"USD\" : 1</code>, so that money.js can use it for calculation.</p>\n\n\t\t\t<p>The latest rates from the <strong><a href=\"https://openexchangerates.org\" title=\"Exchange Rates JSON API, free currency data\" target=\"_blank\">Open Exchange Rates API</a></strong> are delivered as JSON in the required object format, ready to feed into money.js directly. You'll need to <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates Free App ID Sign-up\" target=\"_blank\">sign up</a></strong> for an App ID, and you can choose whichever option you need (there is a generous <em>Forever Free</em> plan.)</p>\n\t\t\t<p>Using the Open Exchange Rates API as an example, here we load them in via AJAX using jQuery:</p>\n\t\t\t<pre class=\"prettyprint lang-js\">&lt;script type=&quot;text/javascript&quot;&gt;\n    // Load exchange rates data via AJAX:\n    $.getJSON(\n    \t// NB: using Open Exchange Rates here, but you can use any source!\n        'https://openexchangerates.org/api/latest.json?app_id=<em>[YOUR APP ID]</em>',\n        function(data) {\n            // Check money.js has finished loading:\n            if ( typeof fx !== \"undefined\" && fx.rates ) {\n                fx.rates = data.rates;\n                fx.base = data.base;\n            } else {\n                // If not, apply to fxSetup global:\n                var fxSetup = {\n                    rates : data.rates,\n                    base : data.base\n                }\n            }\n        }\n    );\n&lt;/script&gt;</pre>\n\t\t\t<p>You'll need to wait until the AJAX request has completed before you can begin processing conversions. You may also wish to cache approximate/historical rates on your server and bootstrap them inline into the HTML as a backup.</p>\n\n\t\t\t<p>If bootstrapping rates into your HTML page directly, they would need to come after the script is loaded and look like this:</p>\n\t\t\t<pre class=\"prettyprint lang-js\">&lt;script&gt;\n    fx.rates = {\n    \tGBP: 0.6,\n    \tUSD: 1\n    };\n    fx.base = USD;\n&lt;/script&gt;';</pre>\n\n\t\t\t<p>There are more examples and methods of grabbing the latest (and historical) data, for all the most common languages and frameworks, is the <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates - Free JSON Currency Conversion\" target=\"_blank\">Open Exchange Rates</a></strong> documentation.</p>\n\n\t\t\t<p>Whichever API or data source you use, make sure that there is a <code>base</code> currency specified and that the exchange rates are in the object format shown above.</p>\n\n\n\t\t\t<h4 id=\"fx.settings-fxSetup\">fx.settings and fxSetup</h4>\n\n\t\t\t<p>Use <code>fx.settings</code> to set default <code>from</code> and <code>to</code> currencies (optional) after the library has loaded. If you want or need to set these before the library has loaded, create a global object called <code>fxSetup</code>, with the same properties:</p>\n\t\t\t<pre class=\"prettyprint\">// Using `fx.settings` (must be after loading the library)\nfx.settings = {\n\tfrom : \"GBP\",\n\tto : \"AED\"\n};\n\n// Using `fxSetup` (must be before loading the library; see note)\nvar fxSetup = {\n\tfrom : \"GBP\",\n\tto : \"AED\"\n};</pre>\n\t\t\t<p><strong>Note about using fxSetup:</strong> If using <code>fxSetup</code>, the variable needs to be available to the library (in scope) - use <code>window.fxSetup</code> if needed. Also note that the fxSetup method won't work if using money.js as an AMD / CommonJS module, because it won't have access to outside variables (use <code>fx.settings</code> for such cases).</p>\n\t\t\t<p>You can also use <code>fxSetup</code> to load in the exchange rates and <code>base</code> currency before loading the library, like so:</p>\n\t\t\t<pre class=\"prettyprint\">// Adding exchange rates and base currency to `fxSetup`:\nvar fxSetup = {\n\tfrom : \"GBP\",\n\tto : \"AED\",\n\tbase : \"USD\",\n\trates : {\n\t\t\"AED\" : 3.672905\n\t\t/* etc. */\n\t}\n};</pre>\n\n\t\t\t<h4 id=\"fx.convert\">fx.convert(val, <em>[opts\b\u0016\u0003\u0007]</em>)</h4>\n\n\t\t\t<p>The basic function of the library - converts a value from one currency to another. Uses the default <code>from</code> and <code>to</code> currencies in <code>fx.settings</code>, or those given in <code>opts</code>:</p>\n\t\t\t<pre class=\"prettyprint\">// Using defaults:\nfx.settings = { from: \"USD\", to: \"GBP\" };\nfx.convert(1000); // 647.71034\n\n// With options:\nfx.convert(1000, {to: \"HKD\"}); // 7781.91949 (default `from` currency)\nfx.convert(1000, {from: \"GBP\", to: \"HKD\"}); // 12014.50549</pre>\n\t\t\t<p><code>fx.convert</code> can convert from any currency to any currency, provided they're both in the <code>fx.rates</code> object. For example, if all rates are relative to USD (1:1), and you have the rate for <code>USD:GBP</code> and <code>USD:HKD</code>, you can specify <code>{from: \"GBP\", to: \"HKD\"}</code> - money.js will calculate the relative rate between the two currencies.</p>\n\n\t\t\t<h5>Currency names</h5>\n\t\t\t<p>Currency names directly reference entries in the <code>fx.rates</code> object, so you're not limited to using the standard 3-letter currency codes. If your exchange rates data source provides pounds (&pound;) as <code>\"British Pounds Sterling\"</code>, and you pass this directly into the <code>rates</code> object, you could use this instead of <code>\"GBP\"</code>.</p>\n\t\t\t<p>If you pass in a currency in <code>from</code> or <code>to</code> for which you don't have an exchange rate, money.js <strong>will throw an error</strong> to let you know that the rate wasn't found.</p>\n\n\t\t\t<h5>Pro Tip:</h5>\n\t\t\t<p>We recommend informing your users that exchange rates and currency conversion are for informational purposes only.</p>\n\n\n\t\t\t<h4 id=\"fx.noConflict\">fx.noConflict() <span>available in standalone mode (not AMD/CJS)</span></h4>\n\n\t\t\t<p>The library's reference - <code>fx</code> - is a fairly common namespace (think animation), which may clash with other scripts. For this case, money.js stores a reference to the previous global value of <code>fx</code>, if any, in case you need to restore it.</p>\n\t\t\t<p>If you're using another library that creates a global <code>fx</code> object or function, you can use <code>fx.noConflict</code> to restore that library's original value and also assign the money.js library object to another variable. For example:</p>\n\t\t\t<pre class=\"prettyprint\">// Some other `fx` library:\nvar fx = someOtherFxLibrary;\n\n// Assign the money.js library to a global <code>money</code> object:\nvar money = fx.noConflict();\n\n// `fx` is now back to whatever it was before money.js was loaded, and you\n// can use the library via the `money` reference, like so:\nmoney.convert(5318008);\nmoney.settings.from = \"JPY\";\nmoney(5318008).to(\"HKD\");</pre>\n\n\t\t\t<h4 id=\"chaining-fx\">Chaining with <code>fx(val)</code></h4>\n\n\t\t\t<p>money.js provides basic 'chaining' (i.e. connecting method calls together, with each acting on the value returned by the previous.)</p>\n\t\t\t<p>This allows a more expressive, human-readable way of writing code, while the underlying functions are exactly the same. The methods are as follows:</p>\n\n\t\t\t<h5>fx() <span>returns a 'wrapped' fx object with a value ready for chaining (does not perform any conversion)</span></h5>\n\t\t\t<pre class=\"prettyprint\">fx(16288) // (fxWrapper)\n\n// NB: if parameter is a currency string, fx() will attempt to parse it to extract the\n// `from` currency and `value` - so this is the same as the following example:\nfx(\"$16288 HKD\") // (fxWrapper)</pre>\n\n\t\t\t<h5>.from() <span>returns a wrapped fx object, with the value converted from default <code>base</code> to <code>from</code> currency, and ready for conversion to another:</span></h5>\n\t\t\t<pre class=\"prettyprint\">fx(16288).from(\"HKD\") // (fxWrapper)</pre>\n\n\t\t\t<h5>.to() <span>takes a wrapped fx object (as above) and converts the value to target currency:</span></h5>\n\t\t\t<pre class=\"prettyprint\">fx(16288).to(\"GBP\"); // 10549.906083 (uses default `from` currency)\nfx(16288).from(\"AED\").to(\"GBP\"); // 2872.359629</pre>\n\n\t\t\t<h5>.convert() <span>takes a wrapped fx object and performs <code>fx.convert(val, [opts])</code> on it:</span></h5>\n\t\t\t<pre class=\"prettyprint\">fx(16288).convert(); // uses default `from` / `to` currencies\nfx(16288).convert({ from:\"HKD\", to:\"GBP\" }); // 1355.694581</pre>\n\n\n\t\t\t<h4 id=\"accounting.js\">Integration with accounting.js</h4>\n\n\t\t\t<p>money.js works great with <strong><a href=\"http://openexchangerates.github.io/accounting.js\" title=\"accounting.js - format money and numbers in javascript\" target=\"_blank\">accounting.js</a></strong> - a standalone JavaScript library that provides reliable localisation and formatting of money and currency. A few examples:</p>\n\t\t\t<pre class=\"prettyprint\">var value = accounting.unformat(someNumber); // clean up number (eg. user input)\nvar target = \"GBP\"; // or some user input\nvar convertedValue = fx(value).from(\"USD\").to(target);\n\naccounting.formatMoney(convertedValue, {\n\tsymbol: target,\n\tformat: \"%v %s\"\n}); // eg. \"53,180.08 GBP\"</pre>\n\t\t\t<p>This is a good idea when you're displaying currencies - values converted through money.js may have high precision (eg. 12 decimal places) depending on the rates and input value. <strong><a href=\"http://openexchangerates.github.io/accounting.js\" title=\"accounting.js - format money and numbers in javascript\" target=\"_blank\">accounting.js</a></strong> takes care of all the formatting for you, and also correctly rounds values as currency, as shown below with the <code>toFixed()</code> method:</p>\n\t\t\t<pre class=\"prettyprint\">// accounting.toFixed() is a replacement for (Number).toFixed():\n(0.615).toFixed(2);           // \"0.61\" &lt;== standard JavaScript\naccounting.toFixed(0.615, 2); // \"0.62\" &lt;== better</pre>\n\n\n\t\t\t<h4 id=\"nodeJS-npm\">Usage in nodeJS / npm</h4>\n\n\t\t\t<p>money.js can easily be used inside nodeJS or any other module loader:</p>\n\t\t\t<pre class=\"prettyprint\">var fx = require(\"/path/to/money\");\n// Now load in your exchange rates and create `fx.settings` if needed</pre>\n\n\t\t\t<p>We recommend the <strong><a target=\"_blank\" href=\"http://openexchangerates.github.io/npm-exchange-rates\" title=\"nodeJS npm exchange rates module\">exchange-rates</a></strong> npm module to make loading rates quick and easy.</p>\n\n\t\t\t<p>You may also install the module via <code>npm install money</code> and reference it like this:</p>\n\t\t\t<pre class=\"prettyprint\">var fx = require(\"money\");</pre>\n\n\n\t\t\t<h4 id=\"amd-requirejs\">Usage as a RequireJS/AMD module</h4>\n\n\t\t\t<p>money.js exposes itself as an <acronym title=\"Asynchronous Module Definition\">AMD</acronym> module, for script loaders such as <strong><a href=\"http://requirejs.org/\" title=\"JavaScript file and AMD module loader\" target=\"_blank\">RequireJS</a></strong>:</p>\n\t\t\t<pre class=\"prettyprint\">// Usage as a dependency:\nrequire([\"path/to/money\"], function(fx) {\n\t// Now you have a well-scoped `fx` object to use\n\tfx.convert(5318008);\n});</pre>\n\t\t\t<p>You'll need to set up money.js inside the callback function, with <code>fx.rates</code>, <code>fx.base</code> and (optionally) <code>fx.settings</code> - once those are set up, they'll also be set up anywhere else you use <code>fx</code>.</p>\n\n\n\t\t\t<h3>Summary</h3>\n\t\t\t<p>That's all you need to know to get started. Summary: use <code>fx.rates</code> and <code>fx.base</code> for setup. Your basic function is <code>fx.convert(val, <em>[opts]</em>)</code>, which can be written like this: <code>fx(val).from(\"USD\").to(\"GBP\")</code> or in several other ways.</p>\n\n\t\t\t<h3>Links</h3>\n\n\t\t\t<p>money.js is open source and maintained by <strong><a href=\"https://openexchangerates.org\" title=\"Open Exchange Rates free currency data API\" target=\"_blank\">Open Exchange Rates</a></strong> - the lightweight currency data API for developers, startups and Fortune 500s.</p>\n\t\t\t<p>Feedback, support or questions? <strong><a href=\"mailto:info@openexchangerates.org\" title=\"Contact Open Exchange Rates\">Contact Open Exchange Rates</a></strong> for guidance.</p>\n\t\t\t<p>Bugs, issues, suggestions or contributions? Please <strong><a href=\"https://github.com/openexchangerates/money.js\" title=\"money.js Github repository\">post them here</a></strong>.</p>\n\t\t\t<p>money.js works great with <strong><a href=\"http://openexchangerates.github.io/accounting.js\" title=\"accounting.js - format money and numbers in javascript\" target=\"_blank\">accounting.js</a></strong> - the tiny standalone JavaScript number and currency formatting library, for web & nodeJS</p>\n\n\t\t\t<br />\n\t\t\t<hr />\n\t\t\t<p><a href=\"http://twitter.com/share\" class=\"twitter-share-button\" data-count=\"horizontal\" data-via=\"josscrowcroft\" data-url=\"http://openexchangerates.github.io/money.js\" data-text=\"money.js - tiny javascript library for real-time currency conversion\">Tweet</a> &nbsp; <g:plusone size=\"medium\"></g:plusone></p>\n\n\t\t</div>\n\t</div>\n\n\n\t<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\"></script>\n\t<script>window.jQuery || document.write('<script src=\"demo-resources/js/libs/jquery-1.6.2.min.js\"><\\/script>')</script>\n\n\t<script src=\"money.js\"></script>\n\n\n\t<script src=\"demo-resources/js/prettify.js\"></script>\n\n\t<script type=\"text/javascript\">\n\t\t$.ajax({\n\t\t\turl: 'https://openexchangerates.org/api/latest.json?app_id=temporary-1ba057ca38e2d94fe54',\n\t\t\tdataType: 'jsonp',\n\t\t\terror: function() {\n\t\t\t\tconsole.log(\"An error! Please contact info@openexchangerates.org\");\n\t\t\t},\n\t\t\tsuccess: function(data) {\n\t\t\t\tfx.rates = data.rates;\n\t\t\t\tfx.base = data.base;\n\n\t\t\t\tfx.settings = {\n\t\t\t\t\tfrom: \"USD\",\n\t\t\t\t\tto: \"GBP\"\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsandbox.model.iframeEval('fx.settings = { from : \"USD\", to : \"GBP\" }; fx.base = \"USD\"; fx.rates = ' + JSON.stringify(fx.rates) + '; ');\n\t\t\t\t}, (typeof sandbox !== \"undefined\") ? 0 : 1000);\n\t\t\t}\n\t\t});\n\n\t\tprettyPrint();\n\t</script>\n\n\n\t<!-- JS sandbox console [http://openexchangerates.github.io/javascript-sandbox-console/] -->\n\n\t<!-- The sandbox template: -->\n\t<script type=\"text/template\" id=\"tplSandbox\">\n\t\t<pre class=\"output\"></pre>\n\t\t<div class=\"input\">\n\t\t\t<textarea rows=\"1\" placeholder=\"<%= placeholder %>\"></textarea>\n\t\t</div>\n\t</script>\n\n\t<!-- The command/result template (NB whitespace/line breaks matter inside <pre> tag): -->\n\t<script type=\"text/template\" id=\"tplCommand\"><% if (! _hidden) { %><span class=\"command\"><%= command %></span>\n<span class=\"prefix\"><%= this.resultPrefix %></span><span class=\"<%= _class %>\"><%= result %></span>\n<% } %></script>\n\n\t<script src=\"http://openexchangerates.github.io/javascript-sandbox-console/src/libs/underscore.min.js\"></script>\n\t<script src=\"http://openexchangerates.github.io/javascript-sandbox-console/src/libs/backbone.min.js\"></script>\n\t<script src=\"http://openexchangerates.github.io/javascript-sandbox-console/src/libs/backbone-localStorage.min.js\"></script>\n\t<script src=\"http://openexchangerates.github.io/javascript-sandbox-console/src/sandbox-console.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tjQuery(document).ready(function($) {\n\t\t\t// Create the sandbox:\n\t\t\twindow.sandbox = new Sandbox.View({\n\t\t\t\tel : $('#sandbox'),\n\t\t\t\tmodel : new Sandbox.Model({ iframe : true, maxHistory : 0 })\n\t\t\t});\n\n\t\t\tsandbox.model.load(\"demo-resources/js/libs/jquery-1.6.2.min.js\");\n\t\t\tsandbox.model.load(\"demo-resources/js/libs/accounting-min.js\");\n\t\t\tsandbox.model.load(\"money.js\");\n\n\t\t\tvar sampleCommands = [\n\t\t\t\t[\"convert a simple value\", \"fx.convert(5318008);\"],\n\t\t\t\t[\"basic method chaining\", \"fx(1000).from('GBP').to('JPY');\"],\n\t\t\t\t[\"view the exchange rates\", \"JSON.stringify(fx.rates,0,2)\"],\n\t\t\t\t[\"get the rate from GBP to AED\", \"fx.convert(1, {from: 'GBP', to: 'AED'})\"],\n\t\t\t\t[\"set the default from/to currencies\", \"fx.settings = {from : 'GBP', to : 'EUR'};\"]\n\t\t\t];\n\t\t\t_.each(sampleCommands, function(cmd, i, list) {\n\t\t\t\t$('<strong><a href=\"\">' + cmd[0] + '</a></strong>').appendTo('#sample-commands').click(function() {\n\t\t\t\t\tsandbox.setValue(cmd[1]);\n\t\t\t\t\treturn false;\n\t\t\t\t}).after(i < (list.length - 1) ? \"&nbsp; &bull; &nbsp;\" : \"\");\n\t\t\t});\n\t\t});\n\n\n\t\t// twitter:\n\t\t(function(d, t) {\n\t\t\tvar g = d.createElement(t),\n\t\t\t\ts = d.getElementsByTagName(t)[0];\n\t\t\tg.async = true;\n\t\t\tg.src = 'http://platform.twitter.com/widgets.js';\n\t\t\ts.parentNode.insertBefore(g, s);\n\t\t})(document, 'script');\n\n\t\t// google plus:\n\t\twindow.___gcfg = {lang: 'en-GB'};\n\t\t(function() {\n\t\t\tvar po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;\n\t\t\tpo.src = 'https://apis.google.com/js/plusone.js';\n\t\t\tvar s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);\n\t\t})();\n\t</script>\n\n\n\t<!--[if lt IE 7 ]>\n\t\t<script src=\"//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js\"></script>\n\t\t<script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>\n\t<![endif]-->\n\n</body>\n</html>\n"
        },
        {
          "name": "license",
          "type": "blob",
          "size": 1.037109375,
          "content": "Copyright (c) 2014 Open Exchange Rates\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "money.js",
          "type": "blob",
          "size": 4.994140625,
          "content": "/*!\n * money.js / fx() v0.2\n * Copyright 2014 Open Exchange Rates\n *\n * JavaScript library for realtime currency conversion and exchange rate calculation.\n *\n * Freely distributable under the MIT license.\n * Portions of money.js are inspired by or borrowed from underscore.js\n *\n * For details, examples and documentation:\n * http://openexchangerates.github.io/money.js/\n */\n(function(root, undefined) {\n\n\t// Create a safe reference to the money.js object for use below.\n\tvar fx = function(obj) {\n\t\treturn new fxWrapper(obj);\n\t};\n\n\t// Current version.\n\tfx.version = '0.2';\n\n\n\t/* --- Setup --- */\n\n\t// fxSetup can be defined before loading money.js, to set the exchange rates and the base\n\t// (and default from/to) currencies - or the rates can be loaded in later if needed.\n\tvar fxSetup = root.fxSetup || {\n\t\trates : {},\n\t\tbase : \"\"\n\t};\n\n\t// Object containing exchange rates relative to the fx.base currency, eg { \"GBP\" : \"0.64\" }\n\tfx.rates = fxSetup.rates;\n\n\t// Default exchange rate base currency (eg \"USD\"), which all the exchange rates are relative to\n\tfx.base = fxSetup.base;\n\n\t// Default from / to currencies for conversion via fx.convert():\n\tfx.settings = {\n\t\tfrom : fxSetup.from || fx.base,\n\t\tto : fxSetup.to || fx.base\n\t};\n\n\n\t/* --- Conversion --- */\n\n\t// The base function of the library: converts a value from one currency to another\n\tvar convert = fx.convert = function(val, opts) {\n\t\t// Convert arrays recursively\n\t\tif (typeof val === 'object' && val.length) {\n\t\t\tfor (var i = 0; i< val.length; i++ ) {\n\t\t\t\tval[i] = convert(val[i], opts);\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\n\t\t// Make sure we gots some opts\n\t\topts = opts || {};\n\n\t\t// We need to know the `from` and `to` currencies\n\t\tif( !opts.from ) opts.from = fx.settings.from;\n\t\tif( !opts.to ) opts.to = fx.settings.to;\n\n\t\t// Multiple the value by the exchange rate\n\t\treturn val * getRate( opts.to, opts.from );\n\t};\n\n\t// Returns the exchange rate to `target` currency from `base` currency\n\tvar getRate = function(to, from) {\n\t\t// Save bytes in minified version\n\t\tvar rates = fx.rates;\n\n\t\t// Make sure the base rate is in the rates object:\n\t\trates[fx.base] = 1;\n\n\t\t// Throw an error if either rate isn't in the rates array\n\t\tif ( !rates[to] || !rates[from] ) throw \"fx error\";\n\n\t\t// If `from` currency === fx.base, return the basic exchange rate for the `to` currency\n\t\tif ( from === fx.base ) {\n\t\t\treturn rates[to];\n\t\t}\n\n\t\t// If `to` currency === fx.base, return the basic inverse rate of the `from` currency\n\t\tif ( to === fx.base ) {\n\t\t\treturn 1 / rates[from];\n\t\t}\n\n\t\t// Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the\n\t\t// relative exchange rate between the two currencies\n\t\treturn rates[to] * (1 / rates[from]);\n\t};\n\n\n\t/* --- OOP wrapper and chaining --- */\n\n\t// If fx(val) is called as a function, it returns a wrapped object that can be used OO-style\n\tvar fxWrapper = function(val) {\n\t\t// Experimental: parse strings to pull out currency code and value:\n\t\tif ( typeof\tval === \"string\" ) {\n\t\t\tthis._v = parseFloat(val.replace(/[^0-9-.]/g, \"\"));\n\t\t\tthis._fx = val.replace(/([^A-Za-z])/g, \"\");\n\t\t} else {\n\t\t\tthis._v = val;\n\t\t}\n\t};\n\n\t// Expose `wrapper.prototype` as `fx.prototype`\n\tvar fxProto = fx.prototype = fxWrapper.prototype;\n\n\t// fx(val).convert(opts) does the same thing as fx.convert(val, opts)\n\tfxProto.convert = function() {\n\t\tvar args = Array.prototype.slice.call(arguments);\n\t\targs.unshift(this._v);\n\t\treturn convert.apply(fx, args);\n\t};\n\n\t// fx(val).from(currency) returns a wrapped `fx` where the value has been converted from\n\t// `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`\n\tfxProto.from = function(currency) {\n\t\tvar wrapped = fx(convert(this._v, {from: currency, to: fx.base}));\n\t\twrapped._fx = fx.base;\n\t\treturn wrapped;\n\t};\n\n\t// fx(val).to(currency) returns the value, converted from `fx.base` to `currency`\n\tfxProto.to = function(currency) {\n\t\treturn convert(this._v, {from: this._fx ? this._fx : fx.settings.from, to: currency});\n\t};\n\n\n\t/* --- Module Definition --- */\n\n\t// Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.\n\t// Otherwise, just add `fx` to the global object\n\tif (typeof exports !== 'undefined') {\n\t\tif (typeof module !== 'undefined' && module.exports) {\n\t\t\texports = module.exports = fx;\n\t\t}\n\t\texports.fx = fx;\n\t} else if (typeof define === 'function' && define.amd) {\n\t\t// Return the library as an AMD module:\n\t\tdefine([], function() {\n\t\t\treturn fx;\n\t\t});\n\t} else {\n\t\t// Use fx.noConflict to restore `fx` back to its original value before money.js loaded.\n\t\t// Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`\n\t\tfx.noConflict = (function(previousFx) {\n\t\t\treturn function() {\n\t\t\t\t// Reset the value of the root's `fx` variable:\n\t\t\t\troot.fx = previousFx;\n\t\t\t\t// Delete the noConflict function:\n\t\t\t\tfx.noConflict = undefined;\n\t\t\t\t// Return reference to the library to re-assign it:\n\t\t\t\treturn fx;\n\t\t\t};\n\t\t})(root.fx);\n\n\t\t// Declare `fx` on the root (global/window) object:\n\t\troot['fx'] = fx;\n\t}\n\n\t// Root will be `window` in browser or `global` on the server:\n}(this));\n"
        },
        {
          "name": "money.min.js",
          "type": "blob",
          "size": 1.265625,
          "content": "/* money.js 0.2, MIT license, http://openexchangerates.github.io/money.js */\n(function(g,j){var b=function(a){return new i(a)};b.version=\"0.1.3\";var c=g.fxSetup||{rates:{},base:\"\"};b.rates=c.rates;b.base=c.base;b.settings={from:c.from||b.base,to:c.to||b.base};var h=b.convert=function(a,e){if(\"object\"===typeof a&&a.length){for(var d=0;d<a.length;d++)a[d]=h(a[d],e);return a}e=e||{};if(!e.from)e.from=b.settings.from;if(!e.to)e.to=b.settings.to;var d=e.to,c=e.from,f=b.rates;f[b.base]=1;if(!f[d]||!f[c])throw\"fx error\";d=c===b.base?f[d]:d===b.base?1/f[c]:f[d]*(1/f[c]);return a*d},i=function(a){\"string\"===typeof a?(this._v=parseFloat(a.replace(/[^0-9-.]/g,\"\")),this._fx=a.replace(/([^A-Za-z])/g,\"\")):this._v=a},c=b.prototype=i.prototype;c.convert=function(){var a=Array.prototype.slice.call(arguments);a.unshift(this._v);return h.apply(b,a)};c.from=function(a){a=b(h(this._v,{from:a,to:b.base}));a._fx=b.base;return a};c.to=function(a){return h(this._v,{from:this._fx?this._fx:b.settings.from,to:a})};if(\"undefined\"!==typeof exports){if(\"undefined\"!==typeof module&&module.exports)exports=module.exports=b;exports.fx=fx}else\"function\"===typeof define&&define.amd?define([],function(){return b}):(b.noConflict=function(a){return function(){g.fx=a;b.noConflict=j;return b}}(g.fx),g.fx=b)})(this);\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.7109375,
          "content": "{\n\t\"name\" : \"money\",\n\t\"description\" : \"JavaScript currency conversion library.\",\n\t\"homepage\": \"http://openexchangerates.github.io/money.js\",\n\t\"keywords\" : [\"money\", \"fx\", \"currency\", \"convert\", \"conversion\", \"exchange\", \"rate\", \"utilities\", \"accounting\", \"number\", \"cart\", \"ecommerce\"],\n\t\"author\": \"Open Exchange Rates <info@openexchangerates.org> (https://www.openexchangerates.org)\",\n\t\"contributors\" : [\n\t\t\"Open Exchange Rates <info@openxchangerates.org> (https://openexchangerates.org)\",\n\t\t\"Joss Crowcroft <josscrowcroft@gmail.com> (http://www.josscrowcroft.com)\"\n\t],\n\t\"dependencies\" : {},\n\t\"repository\" : {\"type\": \"git\", \"url\": \"git://github.com/openexchangerates/money.js.git\"},\n\t\"main\" : \"money.js\",\n\t\"version\" : \"0.2.0\"\n}"
        },
        {
          "name": "readme.md",
          "type": "blob",
          "size": 1.548828125,
          "content": "# money.js / fx() \n\nSimple and tiny JavaScript library for realtime currency conversion and exchange rate calculation, from any currency, to any currency. \n\n**money.js** is lightweight, has no dependencies, and works great client-side or server-side. Use standalone or as a nodeJS/npm and AMD/requireJS module.\n\nDesigned for seamless integration with the **[Open Exchange Rates API](https://openexchangerates.org \"Free reliable exchange rates/currency conversion data API\")**, but can be integrated with any source of currency data or with static/cached/approximate exchange rates.\n\nVisit the plugin homepage for demos and documentation: **http://openexchangerates.github.io/money.js/**\n\n\n## Quick Examples:\n\n```javascript\n// Simple syntax:\nfx.convert(1000, {from: \"GBP\", to: \"HKD\"});\n\n// Method chaining:\nfx(1.99).from(\"USD\").to(\"AED\");\n\n// Basic parsing:\nfx(\"$1.99 HKD\").to(\"EUR\");\n\n// Default parameters:\nfx(5318008).convert();\n\n// Supports nodeJS / AMD:\nvar fx = require('money');\nrequire([\"money\"], function(fx) { /* ... */ });\n```\n\n## Changelog\n\n**0.2**\n* Now maintained by Open Exchange Rates\n* Improved documentation\n\n**0.1.3** - Fixed typo in nodeJS module definition\n\n**0.1.2** - Strengthened up module definition similar to accounting.js\n\n**0.1.1** - Added fallback when base rate is not in rates object (e.g. `\"USD\": 1`) to avoid errors\n\n**0.1.0** - Added license; bumped version\n\n**0.0.2**\n* Adds basic parsing to `fx()`, so that you can pass a formatted string, like so: `fx(\"$1.99 HKD\").to(\"GBP\")`\n* Some cleanup and improved comments and docs\n\n**0.0.1** - First release\n"
        }
      ]
    }
  ]
}