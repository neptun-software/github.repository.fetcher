{
  "metadata": {
    "timestamp": 1736711670876,
    "page": 332,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "koudelka/visualixir",
      "stars": 1320,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.55859375,
          "content": "# Mix artifacts\n/_build\n/deps\n/*.ez\n\n# Generate on crash by the VM\nerl_crash.dump\n\n# Static artifacts\n/assets/node_modules\n\n# Since we are building assets from web/static,\n# we ignore priv/static. You may want to comment\n# this depending on your deployment strategy.\n/priv/static/\n\n# The config/prod.secret.exs file by default contains sensitive\n# data and you should not commit it into version control.\n#\n# Alternatively, you may comment the line below and commit the\n# secrets file as long as you replace its contents by environment\n# variables.\n/config/prod.secret.exs\n"
        },
        {
          "name": ".tool-versions",
          "type": "blob",
          "size": 0.0390625,
          "content": "elixir 1.8.1\nerlang 21.3.2\nnodejs 9.5.0\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Michael Shapiro\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.267578125,
          "content": "# Visualixir\n\nVisualixir is a toy visualizer for BEAM nodes, written in Elixir + Phoenix + d3, with live message sequence charts.\n\nIt's largely intended as a teaching tool, to give newer BEAM programmers a look into the process ecosystem living inside their nodes. However, it may prove of some amusement/use to more experienced folks (it's kinda neat to trace `iex` and the io system).\n\nHuge gifs are worth a thousand words:\n\n![Cluster Select](https://raw.githubusercontent.com/koudelka/visualixir/master/doc/cluster_select.gif)\n![Cluster Tour](https://raw.githubusercontent.com/koudelka/visualixir/master/doc/cluster_tour.gif)\n\n![Msg Seq](https://raw.githubusercontent.com/koudelka/visualixir/master/doc/msg_seq.gif)\n![Msg Seq 2](https://raw.githubusercontent.com/koudelka/visualixir/master/doc/msg_seq_2.gif)\n\n## Getting Going\n\n1. Clone this repository.\n2. Compile: `mix deps.get && mix compile && cd assets && npm install && cd -`\n3. Start 'er up: `elixir --sname visualixir -S mix phx.server`\n4. Navigate to [the GUI](http://0.0.0.0:4000)\n\nIf you want to visualize other BEAM nodes, you'll need to start them up with the `--sname <unique_name_here>` option.\n\nI suggest you use Chrome for Visualixir, Safari and Firefox's SVG performance seems to be lacking. :(\n\nThere are a couple example modules included, [SingleNodePingPong](https://github.com/koudelka/visualixir/blob/master/lib/visualixir/examples/single_node_ping_pong.ex) and [MultiNodePingPong](https://github.com/koudelka/visualixir/blob/master/lib/visualixir/examples/multi_node_ping_pong.ex). Additionally, there's a [Cluster](https://github.com/koudelka/visualixir/blob/master/test/support/cluster.ex) module to start up additional `:slave` nodes.\n\n## Usage\n\n#### Selecting Nodes\nOn the upper left of the terrible GUI is a list of nodes that Visualixir curently knows about, including itself. You can click on a node's name to visualize it, or you can add a new node by entering it in the text box.\n\n#### Moving Around\nDrag the background to pan around.\n\nMove processes around and pin them down by dragging and dropping. To un-pin, double click.\n\nZoom by scrolling (mousewheel or two-finger swipe).\n\n#### Message Tracing\nOption-dragging (alt-dragging), will open a new \"conversation\", you can drop a set of pids into the upper left box to start tracing, you should see messages they send/receive in the adjoining box. Its outline will change to red to remind you that you're tracing it. You can click the `Stop Msg Tracing` button to halt all message tracing.\n\nThe live message sequence charts have a configurable fade time, but there's no GUI for it yet, see [web/static/js/message_sequence.js](https://github.com/koudelka/visualixir/blob/master/web/static/js/message_sequence.js)\n\nThe charting library is [here](https://github.com/koudelka/d3-message-sequence), and it'd love some pull requests. <3\n\n## Warning\nDo not run Visualixir on production nodes, seriously. I've tried to make it somewhat safe, but I suspect you can get into some bad message-tracing scenarios that'll compromise your node.\n\n## Caveats\nThis a prototype, obviously, the code is a steaming pile of garbage. Visualixir is largely intended to be a playground for screwing around with visualization ideas. I'd love to see what folks come up with, PR's are gladly accepted! ðŸ’• (the GUI needs a lot of help)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "mix.exs",
          "type": "blob",
          "size": 0.927734375,
          "content": "defmodule Visualixir.Mixfile do\n  use Mix.Project\n\n  def project do\n    [\n      app: :visualixir,\n      version: \"0.1.99999999\",\n      elixir: \"~> 1.5\",\n      elixirc_paths: elixirc_paths(),\n      # elixirc_options: [warnings_as_errors: true],\n      compilers: [:phoenix] ++ Mix.compilers(),\n      build_embedded: Mix.env() == :prod,\n      start_permanent: Mix.env() == :prod,\n      deps: deps()\n    ]\n  end\n\n  defp elixirc_paths, do: [\"lib\", \"test/support\"]\n\n  # Configuration for the OTP application\n  #\n  # Type `mix help compile.app` for more information\n  def application do\n    [mod: {Visualixir, []},\n     applications: [:phoenix, :phoenix_html, :cowboy, :logger]]\n  end\n\n  # Specifies your project dependencies\n  #\n  # Type `mix help deps` for examples and options\n  defp deps do\n    [\n      {:phoenix, \"~> 1.3\"},\n      {:phoenix_html, \"~> 2.11\"},\n      {:phoenix_live_reload, \"~> 1.1\", only: :dev},\n      {:cowboy, \"~> 1.0\"}\n    ]\n  end\nend\n"
        },
        {
          "name": "mix.lock",
          "type": "blob",
          "size": 2.37109375,
          "content": "%{\n  \"cowboy\": {:hex, :cowboy, \"1.1.2\", \"61ac29ea970389a88eca5a65601460162d370a70018afe6f949a29dca91f3bb0\", [:rebar3], [{:cowlib, \"~> 1.0.2\", [hex: :cowlib, repo: \"hexpm\", optional: false]}, {:ranch, \"~> 1.3.2\", [hex: :ranch, repo: \"hexpm\", optional: false]}], \"hexpm\"},\n  \"cowlib\": {:hex, :cowlib, \"1.0.2\", \"9d769a1d062c9c3ac753096f868ca121e2730b9a377de23dec0f7e08b1df84ee\", [:make], [], \"hexpm\"},\n  \"file_system\": {:hex, :file_system, \"0.2.5\", \"a3060f063b116daf56c044c273f65202e36f75ec42e678dc10653056d3366054\", [:mix], [], \"hexpm\"},\n  \"fs\": {:hex, :fs, \"0.9.2\", \"ed17036c26c3f70ac49781ed9220a50c36775c6ca2cf8182d123b6566e49ec59\", [:rebar], [], \"hexpm\"},\n  \"mime\": {:hex, :mime, \"1.2.0\", \"78adaa84832b3680de06f88f0997e3ead3b451a440d183d688085be2d709b534\", [:mix], [], \"hexpm\"},\n  \"phoenix\": {:hex, :phoenix, \"1.3.2\", \"2a00d751f51670ea6bc3f2ba4e6eb27ecb8a2c71e7978d9cd3e5de5ccf7378bd\", [:mix], [{:cowboy, \"~> 1.0\", [hex: :cowboy, repo: \"hexpm\", optional: true]}, {:phoenix_pubsub, \"~> 1.0\", [hex: :phoenix_pubsub, repo: \"hexpm\", optional: false]}, {:plug, \"~> 1.3.3 or ~> 1.4\", [hex: :plug, repo: \"hexpm\", optional: false]}, {:poison, \"~> 2.2 or ~> 3.0\", [hex: :poison, repo: \"hexpm\", optional: false]}], \"hexpm\"},\n  \"phoenix_html\": {:hex, :phoenix_html, \"2.11.2\", \"86ebd768258ba60a27f5578bec83095bdb93485d646fc4111db8844c316602d6\", [:mix], [{:plug, \"~> 1.5\", [hex: :plug, repo: \"hexpm\", optional: false]}], \"hexpm\"},\n  \"phoenix_live_reload\": {:hex, :phoenix_live_reload, \"1.1.5\", \"8d4c9b1ef9ca82deee6deb5a038d6d8d7b34b9bb909d99784a49332e0d15b3dc\", [:mix], [{:file_system, \"~> 0.2.1 or ~> 0.3\", [hex: :file_system, repo: \"hexpm\", optional: false]}, {:phoenix, \"~> 1.0 or ~> 1.2 or ~> 1.3\", [hex: :phoenix, repo: \"hexpm\", optional: false]}], \"hexpm\"},\n  \"phoenix_pubsub\": {:hex, :phoenix_pubsub, \"1.0.2\", \"bfa7fd52788b5eaa09cb51ff9fcad1d9edfeb68251add458523f839392f034c1\", [:mix], [], \"hexpm\"},\n  \"plug\": {:hex, :plug, \"1.5.0\", \"224b25b4039bedc1eac149fb52ed456770b9678bbf0349cdd810460e1e09195b\", [:mix], [{:cowboy, \"~> 1.0.1 or ~> 1.1 or ~> 2.1\", [hex: :cowboy, repo: \"hexpm\", optional: true]}, {:mime, \"~> 1.0\", [hex: :mime, repo: \"hexpm\", optional: false]}], \"hexpm\"},\n  \"poison\": {:hex, :poison, \"3.1.0\", \"d9eb636610e096f86f25d9a46f35a9facac35609a7591b3be3326e99a0484665\", [:mix], [], \"hexpm\"},\n  \"ranch\": {:hex, :ranch, \"1.3.2\", \"e4965a144dc9fbe70e5c077c65e73c57165416a901bd02ea899cfd95aa890986\", [:rebar3], [], \"hexpm\"},\n}\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}