{
  "metadata": {
    "timestamp": 1736711627602,
    "page": 244,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ahangchen/How-to-Be-A-Programmer-CN",
      "stars": 1576,
      "defaultBranch": "master",
      "files": [
        {
          "name": "1-Beginner",
          "type": "tree",
          "content": null
        },
        {
          "name": "1792645569.jpg",
          "type": "blob",
          "size": 47.4833984375,
          "content": null
        },
        {
          "name": "2-Intermediate",
          "type": "tree",
          "content": null
        },
        {
          "name": "3-Advanced",
          "type": "tree",
          "content": null
        },
        {
          "name": "4-Glossary.md",
          "type": "blob",
          "size": 3.7060546875,
          "content": "# 词汇表\n\n这是这篇文章里用到的一些短语的词汇表。它们不一定是人们熟悉的标准含义，Eric S. Raymond曾经编译过一份信息量巨大的词汇表[HackerDict],如果你能理解其中的一些片段，阅读这个词汇表将是惊喜而愉悦的。\n\n**unk-unk**\n: unknown-unknown的简写。指的是一些暂时不能被概念化的问题，它们会偷走项目的时间并且阻塞时间表。\n\n**boss**\n: 给你任务的人或实体，有些地方可能泛指公众。\n\n**printlining**\n: 在严格的临时机制上，在程序中插入一些语句，为调试输出一些程序执行过程中的信息。\n\n**logging**\n: 实践中编写程序的一种方式，使得它能够产生可设置的输出以描述它的执行过程。\n\n**分治**\n: 一种自上而下设计的技术，更重要的是，一种调试的技术，划分问题或谜题为小的问题或谜题。\n\n**vapour**\n: 幻觉，而且通常是对还不能出售的软件虚假的承诺，往往不会物质化为任何固定的东西。\n\n**boss**\n: 给你设定任务的人，有些时候，也指用户。\n\n**tribe**\n: 与你一同为相同目标奋斗的人们。\n\n**低垂的水果**\n: 轻易能达到的巨大提升。\n\n**主办人**\n:项目的发起人\n\n**垃圾**\n: 不再需要被放在内存中的对象\n\n**商业**\n: 一群为财富聚合在一起的人\n\n**公司**\n: 一群为财富聚合在一起的人\n\n**集体**\n: 一群与你共享文化亲缘与忠诚的人。\n\n**滚动目盲**\n: 一种由于有效信息被太多无效信息掩盖导致你不能发现它的效应\n\n**挂钟**\n: 由挂钟测量的现实中真实的时间，与CPU时间相对。\n\n**瓶颈**\n: 系统性能最重要的限制/一个可以限制性能的界限。\n\n**主线**\n: 一个独特的信息块，所有缓存副本都从它继承而来，作为这份数据的官方版本。\n\n**分配的堆**\n: 一份内存在这样的情况下可以被称为分配了堆：当释放它的机制已经完成时。\n\n**垃圾**\n: 已经被分配但不再有有效意义的内存。\n\n**GC**\n: 一个回收垃圾的系统。\n\n**内存泄露**\n: 无意持有的一系列对象的引用，它们避免了垃圾回收（或者垃圾回收器或内存管理系统中的bug！）导致程序随时间逐渐增加了它的内存占用。\n\n**极限编程**\n: 一种强调与客户交流以及自动化测试的编程风格。\n\n**碰壁**\n: 因为耗尽了某种特定的资源导致性能突然大幅度地降级\n\n**投机编程**\n: 在知道一个东西有用前就把它做出来。\n\n**信息隐藏(封装)**\n: 通过使用尽可能少暴露信息的接口来让事情保持独立解耦的一种设计原则。\n\n**面向对象编程**\n: 一种强调在对象内部管理状态的编程风格。\n\n**交流语言**\n: 一种优先为标准化而非执行设计的语言。\n\n**箱子与箭头**\n: 一种宽松，非正式的，由箱子和箭头组合而成表达关系的图表制作风格，这与正式的图表方法论，比如UML，相对。\n\n**通用语**\n: 一种语言是如此受欢迎以至于它成了它的领域中实际上的标准，例如法语一度成为国际外交的手段。\n\n**buy vs. build**\n: 用来形容购买软件还是自己编写软件这样的选择。\n\n**合并工作**\n: 需要很少创造力并产生很少风险的工作，合并工作可以被很容易地评估。\n\n**编程符号**\n: 编程语言的同义词，强调编程语言的数学本质以及它们与自然语言相比的简单之处。\n\n**稻草人**\n: 一种用来作为技术讨论起点的文档。稻草人也可以引申出火柴人，罐头人，木头人，铁人，等等。\n\n**白纸**\n: 一种信息文档，通常用来解释或将产品或思想卖给观众而非程序员。\n\nNext [书籍/网站](5-Bibliography.md)\n"
        },
        {
          "name": "5-Bibliography.md",
          "type": "blob",
          "size": 1.720703125,
          "content": "# 附录 A - 书目/网站目录\n\n## 书目\n\n[Rules00] Guy Kawasaki, Michelle Moreno, and Gary Kawasaki. 2000. HarperBusiness. Rules for Revolutionaries: The Capitalist Manifesto for Creating and Marketing New Products and Services.\n\n[RDev96] Steve McConnell. 1996. Microsoft Press. Redmond, Wash. Rapid Development: Taming Wild Software Schedules.\n\n[CodeC93] Steve McConnell. 1993. Microsoft Press. Redmond, Wash. Code Complete.\n\n[XP99] Kent Beck. 1999. 0201616416. Addison-Wesley. Extreme Programming Explained: Embrace Change.\n\n[PlanXP00] Kent Beck and Martin Fowler. 2000. 0201710919. Addison-Wesley. Planning Extreme Programming.\n\n[Prag99] Andrew Hunt, David Thomas, and Ward Cunningham. 1999. 020161622X. Addison-Wesley. The Pragmatic Programmer: From Journeyman to Master.\n\n[Stronger] Friedrich Nietzsche. 1889. Twilight of the Idols, \"Maxims and Arrows\", section 8..\n\n## 网站\n\n[PGSite] Paul Graham. 2002. Articles on his website: [http://www.paulgraham.com/articles.html](http://www.paulgraham.com/articles.html). All of them, but especially \"Beating the Averages\".\n\n[Hacker] Eric S. Raymond. 2003. How to Become a Hacker. [http://www.catb.org/~esr/faqs/hacker-howto.html](http://www.catb.org/~esr/faqs/hacker-howto.html).\n\n[HackDict] Eric S. Raymond. 2003. The New Hacker Dictionary. [http://catb.org/esr/jargon/jargon.html](http://catb.org/esr/jargon/jargon.html).\n\n[ExpCS] Edsger W. Dijkstra. 1986. How Experimental is Computing Science?. [http://www.cs.utexas.edu/users/EWD/ewd09xx/EWD988a.PDF](http://www.cs.utexas.edu/users/EWD/ewd09xx/EWD988a.PDF).\n\n[Knife] Edsger W. Dijkstra. 1984. On a Cultural Gap. [http://www.cs.utexas.edu/users/EWD/ewd09xx/EWD913.PDF](http://www.cs.utexas.edu/users/EWD/ewd09xx/EWD913.PDF).\n\nNext [History](6-History.md)\n"
        },
        {
          "name": "6-History.md",
          "type": "blob",
          "size": 2.919921875,
          "content": "# 附录 B - 历史\n\n## 迁移到Github\n\n这篇文章已经在github上作为一个仓库创建了，这样它可以很容易地被分享、更新、提高。它是从这里复制过来的。[http://samizdat.mines.edu/howto/HowToBeAProgrammer.htm](http://samizdat.mines.edu/howto/HowToBeAProgrammer.htm) by [Braydie Grove](https://github.com/braydie)。 2016年1月迁移到github。\n\n## 希望反馈或扩展。\n\n请将你对这篇文章的任何评论发给我，我会考虑所有的建议，大部分都会对这篇文章有所帮助。\n\n这篇文章处于GNU免费文档授权下。这个授权不是专门为文章而设计的。文章通常有连贯的令人信服的服务于一个中心的论据。我希望这篇文章尽量短而易读。\n\n我希望它是说明性的，尽管不是一本教科书，它被划分成许多小节，这样新的章节可以被自由地添加进去。有了这样的倾向，你可以用你觉得合适的方式来扩展这篇文章，且服从这个授权的规定。\n\n可能认为这个文档值得扩展有点自大，但希望生生不息。我会很高兴看到你用以下的方式扩展它：\n\n对每个章节增加一些阅读理解，\n\n增加更多章节，\n\n翻译为其他语言，即使只是一小部分一小部分地翻译，或者\n\n在文字间留下批评或评论，\n\n用不同形式构建的能力：比如palm格式或更好的HTML格式。\n\n如果你向我传达了你的工作，我会考虑把它包括在我的子版本里，遵循这个许可证的规定。你也可以在我的了解之外制作你自己的版本，正如这个协议所说的。\n\nThank you.\n\nRobert L. Read\n\n## 原始版本\n\n这个文档的原始版本由Robert L. Read 在2000年制作，并且以电子形式在2002年首发于Samizdat Press(http://Samizdat.mines.edu) 。被Hire.com的程序员所使用。\n\n在这篇文章2003年被Slashdot刊载后，大概有75个人给我发过邮件提过建议与错误修改。我感激他们中的所有人。可能有很多重复，但这些人不是提出来最主要的建议就是第一个找到了我的bug：Morgan McGuire, David Mason, Tom Moertel, Ninja Programmer (145252) at Slashdot, Ben Vierck, Rob Hafernik, Mark Howe, Pieter Pareit, Brian Grayson, Zed A. Shaw, Steve Benz, Maksim Ioffe, Andrew Wu, David Jeschke, 以及Tom Corcoran。\n\n最后，我想感谢Christina Vallery,他的编辑和校对巨大地提高了第二份草稿，还有Wayne Allen，他鼓励我开始了这件事情。\n\n## 原始作者的简介\n\nRobert L. Read 生活在德克萨斯，奥斯汀, 有一个妻子和两个孩子，他现在是Hire.com的首席工程师。他在那里工作了四年。在这之前他建立了4R科技，为造纸工业生产基于扫描的图像分析质量控制工具。\n\nRob在1995年在德州大学获得数据库理论方向的计算机博士学位。1987年他在Rice大学获得计算机科学学士学位，在16岁时，他就是一个带薪程序员了。\n\nNext [License](LICENSE.md)\n"
        },
        {
          "name": "7-Contributions.md",
          "type": "blob",
          "size": 0.705078125,
          "content": "# Contributions\n\n这个仓库目标是成为一个社区驱动的工程，你的加入会极大地促进这个向导的质量。\n\n## 我可以做什么贡献？\n\n有很多方式为\"How to be a Programmer\"做贡献\n\n- 新章节的思想\n- 提升已有的章节\n- 识别排版错误或其他章节中的问题\n- 为章节提供额外的资源链接\n- 一般的用于提升工程的建议\n\n## 贡献者\n\nGithub在这里会维护一个所有贡献者的列表[contributors](https://github.com/braydie/HowToBeAProgrammer/graphs/contributors)\n\n## 校正与迁移到GitHub\n\n[Braydie Grove](https://www.github.com/braydie)已经同意作为主编。\n\nBraydie把原始的文档转成了Markdown的形式并创建了这个仓库。\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.154296875,
          "content": "\n## Creative Commons Attribution Share-Alike\n\n\"How To Be A Programmer: Community Version\" by Robert L. Read with Community is licensed under Creative Commons Attribution Share-Alike Internal v 4.0.\n\nAt present this work will be edited by Braydie Grove and Robert L. Read.\n\nWe will make reasonable attempts to maintain proper attributions of contributions in the section entittle \"Contributions\". If you make a pull-request with a significant contribution, please add a very brief description of your contribution to that section.\n\n\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">How To Be A Programmer: Community Version</span> by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Robert L. Read with Community</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.40234375,
          "content": "# How to be a Programmer 中文版\n\n> 原文 https://github.com/braydie/HowToBeAProgrammer \n\n> 译文 https://github.com/ahangchen/How-to-Be-A-Programmer-CN\n\n> 现在已经生成了[gitbook](https://www.gitbook.com/book/ahangchen/how-to-be-a-programmer-cn/details)，适合阅读，并且可以方便地导出PDF。\n\n> 如果你想要一起来改进这份翻译，可以给我提PR，不过希望翻译时尽量保持作者的原意。\n\n> 文章中出现的一些词汇往往有特殊的含义，可以在[4-词汇表](4-Glossary.md)找到注释。\n\n## 引言\n　　做一个好的程序员,困难而高尚。将一个软件工程集体愿景变为现实，最困难的地方在于与你的同事和顾客相处。编程很重要，这需要强大的智力和技能。 但在好的程序员看来，相比构建一个让客户和各种各样的同事都满意的软件系统，（纯粹的）编程真的只是小孩子的玩意。在这篇文章里，我尝试尽可能简洁地总结那些当我21岁时，希望别人告诉我的事。\n\n　　这可能很主观的，所以，这篇文章注定不适用于所有人，并且有的内容有点武断。我尽量写一些程序员在ta的工作中，非常可能会遇到的事情。大部分这些问题以及它们的解决方案在人们的环境中如此普遍，以至于我(说的)可能有点唠叨。尽管如此，我还是希望这篇文章是有用的。\n\n　　我们在课堂上学习编程。 那些著作: The Pragmatic Programmer [Prag99], Code Complete [CodeC93], Rapid Development [RDev96], 以及 Extreme Programming Explained [XP99] 都传授编程（知识），并阐述做一个好的程序员这个大话题。 在读这篇文章之前，或者就是现在，你当然也应该读一读Paul Graham [PGSite] 和 Eric Raymond [Hacker] 的文章。 但与那些著作不同，这篇文章强调社交问题并且总结了整套我所知的必须的技能。\n\n　　在这篇文章里，boss这个词指的是任何一个交给你工程去做的人。 除了一些语境外，我会同义地使用交易，公司，集体这些词，比如，交易意味着赚钱，公司意味着现代的工作空间，集体一般是那些你一起工作的人。\n\n　　欢迎来到这个群体。\n\n## 目录\n\n1. [入门](1-Beginner)\n\t- 个人技能\n\t\t- [学会Debug](1-Beginner/Personal-Skills/01-Learn To Debug.md)\n\t\t- [如何分离问题debug](1-Beginner/Personal-Skills/02-How to Debug by Splitting the Problem Space.md)\n\t\t- [如何移除错误](1-Beginner/Personal-Skills/03-How to Remove an Error.md)\n\t\t- [如何用Log来Debug](1-Beginner/Personal-Skills/04-How to Debug Using a Log.md)\n\t\t- [如何理解性能问题](1-Beginner/Personal-Skills/05-How to Understand Performance Problems.md)\n\t\t- [如何解决性能问题](1-Beginner/Personal-Skills/06-How to Fix Performance Problems.md)\n\t\t- [如何优化循环](1-Beginner/Personal-Skills/07-How to Optimize Loops.md)\n\t\t- [如何处理I/O开销](1-Beginner/Personal-Skills/08-How to Deal with IO Expense.md)\n\t\t- [如何管理内存](1-Beginner/Personal-Skills/09-How to Manage Memory.md)\n\t\t- [如何处理偶现的Bug](1-Beginner/Personal-Skills/10-How to Deal with Intermittent Bugs.md)\n\t\t- [如何学习设计技能](1-Beginner/Personal-Skills/11-How to Learn Design Skills.md)\n\t\t- [如何进行实验](1-Beginner/Personal-Skills/12-How to Conduct Experiments.md)\n\t- 团队技能\n\t\t- [为什么预估很重要](1-Beginner/Team-Skills/01-Why Estimation is Important.md)\n\t\t- [如何预估编程时间](1-Beginner/Team-Skills/02-How to Estimate Programming Time.md)\n\t\t- [如何搜索信息](1-Beginner/Team-Skills/03-How to Find Out Information.md)\n\t\t- [如何把人们作为信息源](1-Beginner/Team-Skills/04-How to Utilize People as Information Sources.md)\n\t\t- [如何优雅地写文档](1-Beginner/Team-Skills/05-How to Document Wisely.md)\n\t\t- [如何在垃圾代码上工作](1-Beginner/Team-Skills/06-How to Work with Poor Code.md)\n\t\t- [如何使用源代码控制](1-Beginner/Team-Skills/07-How to Use Source Code Control.md)\n\t\t- [如何进行单元测试](1-Beginner/Team-Skills/08-How to Unit Test.md)\n\t\t- [没有思路的时候，休息一下](1-Beginner/Team-Skills/09-Take Breaks when Stumped.md)\n\t\t- [如何决定下班时间](1-Beginner/Team-Skills/10-How to Recognize When to Go Home.md)\n\t\t- [如何与不好相处的人相处](1-Beginner/Team-Skills/11-How to Deal with Difficult People.md)\n2. [进阶](2-Intermediate)\n\t- 个人技能\n\t\t- [如何保持充满动力](2-Intermediate/Personal-Skills/01-How to Stay Motivated.md)\n\t\t- [如何才能被广泛信任](2-Intermediate/Personal-Skills/02-How to be Widely Trusted.md)\n\t\t- [在时间和空间之间该如何权衡](2-Intermediate/Personal-Skills/03-How to Tradeoff Time vs Space.md)\n\t\t- [如何进行压力测试](2-Intermediate/Personal-Skills/04-How to Stress Test.md)\n\t\t- [如何权衡简洁与抽象](2-Intermediate/Personal-Skills/05-How to Balance Brevity and Abstraction.md)\n\t\t- [如何学习新技能](2-Intermediate/Personal-Skills/06-How to Learn New Skills.md)\n\t\t- [学会打字](2-Intermediate/Personal-Skills/07-Learn to Type.md)\n\t\t- [如何进行集成测试](2-Intermediate/Personal-Skills/08-How to Do Integration Testing.md)\n\t\t- [交流语言](2-Intermediate/Personal-Skills/09-Communication Languages.md)\n\t\t- [重要的工具](2-Intermediate/Personal-Skills/10-Heavy Tools.md)\n\t\t- [如何分析数据](2-Intermediate/Personal-Skills/11-How to analyze data.md)\n\t- 团队技能\n\t\t- [如何管理开发时间](2-Intermediate/Team-Skills/01-How to Manage Development Time.md)\n\t\t- [如何管理第三方软件风险](2-Intermediate/Team-Skills/02-How to Manage Third-Party Software Risks.md)\n\t\t- [如何管理咨询](2-Intermediate/Team-Skills/03-How to Manage Consultants.md)\n\t\t- [如何适度交流](2-Intermediate/Team-Skills/04-How to Communicate the Right Amount.md)\n\t\t- [如何直言不赞同以及如何避免](2-Intermediate/Team-Skills/05-How to Disagree Honestly and Get Away with It.md)\n\t- 评判\n\t\t- [如何权衡开发质量与开发时间](2-Intermediate/Judgment/01-How to Tradeoff Quality Against Development Time.md)\n\t\t- [如何管理软件系统依赖](2-Intermediate/Judgment/02-How to Manage Software System Dependence.md)\n\t\t- [如何评判一个软件是否太不成熟了](2-Intermediate/Judgment/03-How to Decide if Software is Too Immature.md)\n\t\t- [如何决定购买还是构建](2-Intermediate/Judgment/04-How to Make a Buy vs Build Decision.md)\n\t\t- [如何专业地成长](2-Intermediate/Judgment/05-How to Grow Professionally.md)\n\t\t- [如何评估面试](2-Intermediate/Judgment/06-How to Evaluate Interviewees.md)\n\t\t- [如何知道何时实施昂贵的计算机科学](2-Intermediate/Judgment/07-How to Know When to Apply Fancy Computer Science.md)\n\t\t- [如何与非工程师交谈](2-Intermediate/Judgment/08-How to Talk to Non-Engineers.md)\n3. [高级](3-Advanced)\n\t- 技术评判\n        - [如何从不可能的事情中找到困难的地方](3-Advanced/Technical-Judgment/01-How to Tell the Hard From the Impossible.md)\n        - [如何使用嵌入型语言](3-Advanced/Technical-Judgment/02-How to Utilize Embedded Languages.md)\n        - [选择语言](3-Advanced/Technical-Judgment/03-Choosing Languages.md)\n    - 机智地妥协\n        - [如何与时间压力作斗争](3-Advanced/Compromising-Wisely/01-How to Fight Schedule Pressure.md)\n        - [如何理解用户](3-Advanced/Compromising-Wisely/02-How to Understand the User.md)\n        - [如何获得晋升](3-Advanced/Compromising-Wisely/03-How to Get a Promotion.md)\n    - 服务你的团队\n        - [如何发展才能](3-Advanced/Serving-Your-Team/01-How to Develop Talent.md)\n        - [如何选择工作内容](3-Advanced/Serving-Your-Team/02-How to Choose What to Work On.md)\n        - [如何从你的同伴身上获得最大收益](3-Advanced/Serving-Your-Team/03-How to Get the Most From Your Teammates.md)\n        - [如何分割问题](3-Advanced/Serving-Your-Team/04-How to Divide Problems Up.md)\n        - [如何处理无趣的问题](3-Advanced/Serving-Your-Team/05-How to Handle Boring Tasks.md)\n        - [如何为一个工程获取支持](3-Advanced/Serving-Your-Team/06-How to Gather Support for a Project.md)\n        - [如何发展一个系统](3-Advanced/Serving-Your-Team/07-How to Grow a System.md)\n        - [如何高效交流](3-Advanced/Serving-Your-Team/08-How to Communicate Well.md)\n        - [如何把别人不想听的话说给他们听](3-Advanced/Serving-Your-Team/09-How to Tell People Things They Don't Want to Hear.md)\n        - [如何处理管理神话](3-Advanced/Serving-Your-Team/10-How to Deal with Managerial Myths.md)\n        - [如何处理混乱的组织](3-Advanced/Serving-Your-Team/11-How to Deal with Organizational Chaos.md)\n4. [词汇表](4-Glossary.md)\n5. [附录 A - 书籍/网站](5-Bibliography.md)\n6. [附录 B - 历史 (至2016年1月)](6-History.md)\n6. [附录 C - 贡献 (至January 2016)](7-Contributions.md)\n\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">How To Be A Programmer: Community Version</span> by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Robert L. Read with Community</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 7.953125,
          "content": "# How to be a Programmer 中文版\n原文出自 https://github.com/braydie/HowToBeAProgrammer\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">How To Be A Programmer: Community Version</span> by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Robert L. Read with Community</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n## 目录\n\n1. [入门](1-Beginner/README.md)\n\t- 个人技能\n\t\t- [学会Debug](1-Beginner/Personal-Skills/01-Learn To Debug.md)\n\t\t- [如何分离问题debug](1-Beginner/Personal-Skills/02-How to Debug by Splitting the Problem Space.md)\n\t\t- [如何移除错误](1-Beginner/Personal-Skills/03-How to Remove an Error.md)\n\t\t- [如何用Log来Debug](1-Beginner/Personal-Skills/04-How to Debug Using a Log.md)\n\t\t- [如何理解性能问题](1-Beginner/Personal-Skills/05-How to Understand Performance Problems.md)\n\t\t- [如何解决性能问题](1-Beginner/Personal-Skills/06-How to Fix Performance Problems.md)\n\t\t- [如何优化循环](1-Beginner/Personal-Skills/07-How to Optimize Loops.md)\n\t\t- [如何处理I/O开销](1-Beginner/Personal-Skills/08-How to Deal with IO Expense.md)\n\t\t- [如何管理内存](1-Beginner/Personal-Skills/09-How to Manage Memory.md)\n\t\t- [如何处理偶现的Bug](1-Beginner/Personal-Skills/10-How to Deal with Intermittent Bugs.md)\n\t\t- [如何学习设计技能](1-Beginner/Personal-Skills/11-How to Learn Design Skills.md)\n\t\t- [如何进行实验](1-Beginner/Personal-Skills/12-How to Conduct Experiments.md)\n\t- 团队技能\n\t\t- [为什么预估很重要](1-Beginner/Team-Skills/01-Why Estimation is Important.md)\n\t\t- [如何预估编程时间](1-Beginner/Team-Skills/02-How to Estimate Programming Time.md)\n\t\t- [如何搜索信息](1-Beginner/Team-Skills/03-How to Find Out Information.md)\n\t\t- [如何把人们作为信息源](1-Beginner/Team-Skills/04-How to Utilize People as Information Sources.md)\n\t\t- [如何优雅地写文档](1-Beginner/Team-Skills/05-How to Document Wisely.md)\n\t\t- [如何在垃圾代码上工作](1-Beginner/Team-Skills/06-How to Work with Poor Code.md)\n\t\t- [如何使用源代码控制](1-Beginner/Team-Skills/07-How to Use Source Code Control.md)\n\t\t- [如何进行单元测试](1-Beginner/Team-Skills/08-How to Unit Test.md)\n\t\t- [没有思路的时候，休息一下](1-Beginner/Team-Skills/09-Take Breaks when Stumped.md)\n\t\t- [如何决定下班时间](1-Beginner/Team-Skills/10-How to Recognize When to Go Home.md)\n\t\t- [如何与不好相处的人相处](1-Beginner/Team-Skills/11-How to Deal with Difficult People.md)\n2. [进阶](2-Intermediate/README.md)\n\t- 个人技能\n\t\t- [如何保持充满动力](2-Intermediate/Personal-Skills/01-How to Stay Motivated.md)\n\t\t- [如何才能被广泛信任](2-Intermediate/Personal-Skills/02-How to be Widely Trusted.md)\n\t\t- [在时间和空间之间该如何权衡](2-Intermediate/Personal-Skills/03-How to Tradeoff Time vs Space.md)\n\t\t- [如何进行压力测试](2-Intermediate/Personal-Skills/04-How to Stress Test.md)\n\t\t- [如何权衡简洁与抽象](2-Intermediate/Personal-Skills/05-How to Balance Brevity and Abstraction.md)\n\t\t- [如何学习新技能](2-Intermediate/Personal-Skills/06-How to Learn New Skills.md)\n\t\t- [学会打字](2-Intermediate/Personal-Skills/07-Learn to Type.md)\n\t\t- [如何进行集成测试](2-Intermediate/Personal-Skills/08-How to Do Integration Testing.md)\n\t\t- [交流语言](2-Intermediate/Personal-Skills/09-Communication Languages.md)\n\t\t- [重要的工具](2-Intermediate/Personal-Skills/10-Heavy Tools.md)\n\t\t- [如何分析数据](2-Intermediate/Personal-Skills/11-How to analyze data.md)\n\t- 团队技能\n\t\t- [如何管理开发时间](2-Intermediate/Team-Skills/01-How to Manage Development Time.md)\n\t\t- [如何管理第三方软件风险](2-Intermediate/Team-Skills/02-How to Manage Third-Party Software Risks.md)\n\t\t- [如何管理咨询](2-Intermediate/Team-Skills/03-How to Manage Consultants.md)\n\t\t- [如何适度交流](2-Intermediate/Team-Skills/04-How to Communicate the Right Amount.md)\n\t\t- [如何直言不赞同以及如何避免](2-Intermediate/Team-Skills/05-How to Disagree Honestly and Get Away with It.md)\n\t- 评判\n\t\t- [如何权衡开发质量与开发时间](2-Intermediate/Judgment/01-How to Tradeoff Quality Against Development Time.md)\n\t\t- [如何管理软件系统依赖](2-Intermediate/Judgment/02-How to Manage Software System Dependence.md)\n\t\t- [如何评判一个软件是否太不成熟了](2-Intermediate/Judgment/03-How to Decide if Software is Too Immature.md)\n\t\t- [如何决定购买还是构建](2-Intermediate/Judgment/04-How to Make a Buy vs Build Decision.md)\n\t\t- [如何专业地成长](2-Intermediate/Judgment/05-How to Grow Professionally.md)\n\t\t- [如何评估面试](2-Intermediate/Judgment/06-How to Evaluate Interviewees.md)\n\t\t- [如何知道何时实施昂贵的计算机科学](2-Intermediate/Judgment/07-How to Know When to Apply Fancy Computer Science.md)\n\t\t- [如何与非工程师交谈](2-Intermediate/Judgment/08-How to Talk to Non-Engineers.md)\n3. [高级](3-Advanced/README.md)\n\t- 技术评判\n        - [如何从不可能的事情中找到困难的地方](3-Advanced/Technical-Judgment/01-How to Tell the Hard From the Impossible.md)\n        - [如何使用嵌入型语言](3-Advanced/Technical-Judgment/02-How to Utilize Embedded Languages.md)\n        - [选择语言](3-Advanced/Technical-Judgment/03-Choosing Languages.md)\n    - 机智地妥协\n        - [如何与时间压力作斗争](3-Advanced/Compromising-Wisely/01-How to Fight Schedule Pressure.md)\n        - [如何理解用户](3-Advanced/Compromising-Wisely/02-How to Understand the User.md)\n        - [如何获得晋升](3-Advanced/Compromising-Wisely/03-How to Get a Promotion.md)\n    - 服务你的团队\n        - [如何发展才能](3-Advanced/Serving-Your-Team/01-How to Develop Talent.md)\n        - [如何选择工作内容](3-Advanced/Serving-Your-Team/02-How to Choose What to Work On.md)\n        - [如何从你的同伴身上获得最大收益](3-Advanced/Serving-Your-Team/03-How to Get the Most From Your Teammates.md)\n        - [如何分割问题](3-Advanced/Serving-Your-Team/04-How to Divide Problems Up.md)\n        - [如何处理无趣的问题](3-Advanced/Serving-Your-Team/05-How to Handle Boring Tasks.md)\n        - [如何为一个工程获取支持](3-Advanced/Serving-Your-Team/06-How to Gather Support for a Project.md)\n        - [如何发展一个系统](3-Advanced/Serving-Your-Team/07-How to Grow a System.md)\n        - [如何高效交流](3-Advanced/Serving-Your-Team/08-How to Communicate Well.md)\n        - [如何把别人不想听的话说给他们听](3-Advanced/Serving-Your-Team/09-How to Tell People Things They Don't Want to Hear.md)\n        - [如何处理管理神话](3-Advanced/Serving-Your-Team/10-How to Deal with Managerial Myths.md)\n        - [如何处理混乱的组织](3-Advanced/Serving-Your-Team/11-How to Deal with Organizational Chaos.md)\n4. [词汇表](4-Glossary.md)\n5. [附录 A - 书籍/网站](5-Bibliography.md)\n6. [附录 B - 历史 (至2016年1月)](6-History.md)\n6. [附录 C - 贡献 (至January 2016)](7-Contributions.md)\n\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a><br /><span xmlns:dct=\"http://purl.org/dc/terms/\" href=\"http://purl.org/dc/dcmitype/Text\" property=\"dct:title\" rel=\"dct:type\">How To Be A Programmer: Community Version</span> by <span xmlns:cc=\"http://creativecommons.org/ns#\" property=\"cc:attributionName\">Robert L. Read with Community</span> is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n\n"
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}