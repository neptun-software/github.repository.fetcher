{
  "metadata": {
    "timestamp": 1736711607803,
    "page": 192,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "csswizardry/ct",
      "stars": 1880,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.0869140625,
          "content": "# ðŸ§  `ct.css` â€“ Letâ€™s take a look inside your `<head>`\n\n> Computed tomography of the head uses a series of X-rays in a CT scan of the\n> headâ€¦  \n> â€” [wikipedia.org/Computed_tomography_of_the_head](https://en.wikipedia.org/wiki/Computed_tomography_of_the_head)\n\nYour `<head>` is the single biggest render-blocking part of your pageâ€”ensuring\nit is well-formed is critical. `ct.css` is a diagnostic CSS snippet that exposes\npotential performance issues in your pageâ€™s `<head>` tags.\n\n## Example Output\n\n![](./demo.png)\n\n* **Red:** This is an error and should be addressed.\n* **Orange:** This could be problematic in certain scenarios.\n* **Green:** This is fine and is purely informational.\n* **Solid:** This file is the problem.\n* **Dashed:** Another file(s) are causing problems with this file.\n\n## Simple Usage\n\nPaste this anywhere in your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"https://csswizardry.com/ct/ct.css\" class=\"ct\" />\n```\n\n## Chrome Snippet\n\n![](./chrome-snippet.png)\n\n[_Run Snippets Of JavaScript On Any Page With Chrome DevTools_](https://developers.google.com/web/tools/chrome-devtools/javascript/snippets)\n\n```\n(function(){\n  var ct = document.createElement('link');\n  ct.rel = 'stylesheet';\n  ct.href = 'https://csswizardry.com/ct/ct.css';\n  ct.classList.add('ct');\n  document.head.appendChild(ct);\n}());\n```\n\n## Limitations\n\n* **Non-matching `media` types:** Currently, `ct.css` only takes print\n  stylesheets into account. This means that you may experience false-positives\n  for other non-blocking stylesheets.\n* **Injected `script` elements:** `ct.css`, as with all CSS, acts against the\n  DOM and not the HTML. As such, injected `script` elements will be falsely\n  flagged as blocking.\n  * Similarly, any `script` elements that are removed from the DOM will not be\n    flagged.\n* **Third-party blocking resources:** The check for whether or not something is\n  a third party is naive at best.\n* **CSP Issues:** If your app is blocking CSS from the `csswizardry.com` origin,\n  either self-host the `ct.css` file, or paste its contents into `<style\n  class=\"ct\">â€¦</style>` tags anywhere in your page.\n"
        },
        {
          "name": "chrome-snippet.png",
          "type": "blob",
          "size": 143.939453125,
          "content": null
        },
        {
          "name": "ct.css",
          "type": "blob",
          "size": 6.3935546875,
          "content": "/*!==========================================================================\n   #CT.CSS\n   ========================================================================== */\n\n/*!\n * ct.css â€“ Letâ€™s take a look inside your <head>â€¦\n *\n * Â© Harry Roberts 2021 â€“ twitter.com/csswizardry\n */\n\n\n\n\n\n/**\n * Itâ€™s slightly easier to remember topics than it is colours. Set up some\n * custom properties for use later on.\n */\n\nhead {\n  --ct-is-problematic: solid;\n  --ct-is-affected: dashed;\n  --ct-notify: #0bce6b;\n  --ct-warn: #ffa400;\n  --ct-error: #ff4e42;\n}\n\n\n\n\n\n/**\n * Show the <head> and set up the items we might be interested in.\n */\n\nhead,\nhead script,\nhead script[type]:not([type=\"text/javascript\"]),\nhead script:not([src])[async],\nhead script:not([src])[defer],\nhead style, head [rel=\"stylesheet\"],\nhead script ~ meta[http-equiv=\"content-security-policy\"],\nhead > meta[charset]:not(:nth-child(-n+5)) {\n  display: block;\n}\n\nhead script,\nhead style, head [rel=\"stylesheet\"],\nhead title,\nhead script ~ meta[http-equiv=\"content-security-policy\"],\nhead > meta[charset]:not(:nth-child(-n+5)) {\n  margin: 5px;\n  padding: 5px;\n  border-width: 5px;\n  background-color: white;\n  color: #333;\n}\n\nhead ::before,\nhead script, head style {\n  font: 16px/1.5 monospace, monospace;\n  display: block;\n}\n\nhead ::before {\n  font-weight: bold;\n}\n\n\n\n\n\n/**\n * External Script and Style\n */\n\nhead script[src],\nhead link[rel=\"stylesheet\"] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\n  head script[src]::before {\n    content: \"[Blocking Script â€“ \" attr(src) \"]\"\n  }\n\n  head link[rel=\"stylesheet\"]::before {\n    content: \"[Blocking Stylesheet â€“ \" attr(href) \"]\"\n  }\n\n\n\n\n\n/**\n * Inline Script and Style.\n */\n\nhead style:not(:empty),\nhead script:not(:empty) {\n  max-height: 5em;\n  overflow: auto;\n  background-color: #ffd;\n  white-space: pre;\n  border-color: var(--ct-notify);\n  border-style: var(--ct-is-problematic);\n}\n\n  head script:not(:empty)::before {\n    content: \"[Inline Script] \";\n  }\n\n  head style:not(:empty)::before {\n    content: \"[Inline Style] \";\n  }\n\n\n\n\n\n/**\n * Blocked Title.\n *\n * These selectors are generally more complex because the Key Selector (`title`)\n * depends on the specific conditions of preceding JS--we canâ€™t cast a wide net\n * and narrow it down later as we can when targeting elements directly.\n */\n\nhead script[src]:not([async]):not([defer]):not([type=module]) ~ title,\nhead script[type]:not([type=\"text/javascript\"]) ~ title,\nhead script:not(:empty) ~ title {\n  display: block;\n  border-style: var(--ct-is-affected);\n  border-color: var(--ct-error);\n}\n\n  head script[src]:not([async]):not([defer]):not([type=module]) ~ title::before,\n  head script:not(:empty) ~ title::before {\n    content: \"[<title> blocked by JS] \";\n  }\n\n\n\n\n\n/**\n * Blocked Scripts.\n *\n * These selectors are generally more complex because the Key Selector\n * (`script`) depends on the specific conditions of preceding CSS--we canâ€™t cast\n * a wide net and narrow it down later as we can when targeting elements\n * directly.\n */\n\nhead [rel=\"stylesheet\"]:not([media=\"print\"]):not(.ct) ~ script,\nhead style:not(:empty) ~ script {\n  border-style: var(--ct-is-affected);\n  border-color: var(--ct-warn);\n}\n\n  head [rel=\"stylesheet\"]:not([media=\"print\"]):not(.ct) ~ script::before,\n  head style:not(:empty) ~ script::before {\n    content: \"[JS blocked by CSS â€“ \" attr(src) \"]\";\n  }\n\n\n\n\n\n/**\n * Using both `async` and `defer` is redundant (an anti-pattern, even). Letâ€™s\n * flag that.\n */\n\nhead script[src][src][async][defer] {\n  display: block;\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\n  head script[src][src][async][defer]::before {\n    content: \"[async and defer is redundant: prefer defer â€“ \" attr(src) \"]\";\n  }\n\n\n\n\n\n/**\n * Async and defer simply do not work on inline scripts. It wonâ€™t do any harm,\n * but itâ€™s useful to know about.\n */\nhead script:not([src])[async],\nhead script:not([src])[defer] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\n  head script:not([src])[async]::before {\n    content: \"[The async attribute is redundant on inline scripts]\"\n  }\n\n  head script:not([src])[defer]::before {\n    content: \"[The defer attribute is redundant on inline scripts]\"\n  }\n\n\n\n\n\n/**\n * Supplying a character encoding for scripts is invalid and may pervert the\n * script from loading.\n */\nhead script[type*=\"charset\"] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\n  head script[type*=\"charset\"]::before {\n    content: \"[charset on scripts may prevent script from loading]\"\n  }\n\n\n\n\n\nhead script[type=\"text/javascript\"] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\n  head script[type=\"text/javascript\"]::before {\n    content: \"[\" attr(type) \" is redundant: you might as well delete it]\"\n  }\n\n\n\n\n\n/**\n * Third Party blocking resources.\n *\n * Expect false-positives hereâ€¦ itâ€™s a crude proxy at best.\n *\n * Selector-chaining (e.g. `[src][src]`) is used to bump up specificity.\n */\n\nhead script[src][src][src^=\"//\"],\nhead script[src][src][src^=\"http\"],\nhead [rel=\"stylesheet\"][href^=\"//\"],\nhead [rel=\"stylesheet\"][href^=\"http\"] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-error);\n}\n\n  head script[src][src][src^=\"//\"]::before,\n  head script[src][src][src^=\"http\"]::before {\n    content: \"[Third Party Blocking Script â€“ \" attr(src) \"]\";\n  }\n\n  head [rel=\"stylesheet\"][href^=\"//\"]::before,\n  head [rel=\"stylesheet\"][href^=\"http\"]::before {\n    content: \"[Third Party Blocking Stylesheet â€“ \" attr(href) \"]\";\n  }\n\n\n\n\n\n/**\n * Mid-HEAD CSP disables the Preload Scanner\n */\n\nhead script ~ meta[http-equiv=\"content-security-policy\"] {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-error);\n}\n\n  head script ~ meta[http-equiv=\"content-security-policy\"]::before {\n    content: \"[Meta CSP defined after JS]\"\n  }\n\n\n\n\n\n/**\n * Charset should appear as early as possible\n */\nhead > meta[charset]:not(:nth-child(-n+5)) {\n  border-style: var(--ct-is-problematic);\n  border-color: var(--ct-warn);\n}\n\nhead > meta[charset]:not(:nth-child(-n+5))::before {\n  content: \"[Charset should appear as early as possible]\";\n}\n\n\n\n\n\n/**\n * Hide all irrelevant or non-matching scripts and styles (including ct.css).\n *\n * Weâ€™re done!\n */\n\nhead link[rel=\"stylesheet\"][media=\"print\"],\nhead link[rel=\"stylesheet\"].ct, head style.ct,\nhead script[async], head script[defer], head script[type=module], head script[type]:not([type=\"text/javascript\"]) {\n  display: none;\n}\n"
        },
        {
          "name": "demo.png",
          "type": "blob",
          "size": 309.416015625,
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 2.1494140625,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\" />\n  <meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0\" />\n\n  <title>ðŸ§  ct.css â€“ Letâ€™s take a look inside your &lt;head&gt;</title>\n\n  <script>\n    window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;\n    ga('create', 'UA-1856861-4', {'siteSpeedSampleRate': 100});\n    ga('send', 'pageview');\n  </script>\n\n  <script src=\"https://www.google-analytics.com/analytics.js\" async></script>\n\n  <style>\n\n    html {\n      font: 1em/1.5 system-ui;\n      background-color: #f9f9f9;\n      color: #333;\n    }\n\n    body {\n      max-width: 72ch;\n    }\n\n    a {\n      color: #f43059;\n    }\n\n    code {\n      font-family: \"Operator Mono\", Inconsolata, Monaco, Consolas, \"Andale Mono\", \"Bitstream Vera Sans Mono\", \"Courier New\", Courier, monospace;\n    }\n\n  </style>\n\n  <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸ§ </text></svg>\" />\n\n  <link rel=canonical href=https://csswizardry.com/ct/>\n\n</head>\n<body>\n\n  <h1>ðŸ§  <code>ct.css</code> â€“ Letâ€™s take a look inside your <code>&lt;head&gt;</code></h1>\n\n  <p>Your <code>&lt;head&gt;</code> is the single biggest render-blocking part\n  of your pageâ€”ensuring\n  it is well-formed is critical. <code>ct.css</code> is a diagnostic CSS snippet\n  that exposes\n  potential performance issues in your pageâ€™s <code>&lt;head&gt;</code>\n  tags.</p></code></code></code></p>\n\n  <ul>\n    <li><a href=\"./test/\">View demo</a></li>\n    <li><a href=\"https://github.com/csswizardry/ct/blob/master/ct.css\">View\n        source</a></li>\n    <li><a href=\"https://speakerdeck.com/csswizardry/get-your-head-straight\">View\n        conference talk</a> (full context)</li>\n  </ul>\n\n  <p>Drag and drop the following link to your bookmarks bar (or click for simple\n  demo): <a href=\"javascript:(function(){ var ct = document.createElement('link'); ct.rel = 'stylesheet'; ct.href = 'https://csswizardry.com/ct/ct.css'; ct.classList.add('ct'); document.head.appendChild(ct); }());;\">ct.css</a>.</p>\n\n  <p><a href=\"https://twitter.com/csswizardry\">@csswizardry</a></p>\n\n</body>\n</html>\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}