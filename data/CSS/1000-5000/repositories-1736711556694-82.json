{
  "metadata": {
    "timestamp": 1736711556694,
    "page": 82,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "senchalabs/jQTouch",
      "stars": 2783,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": ".sass-cache\n**.sublime-project\n**.sublime-workspace\n.externalToolBuilders\n.project\n.settings\n.buildpath\n.DS_Store\n.~*\nnode_modules/\njqtouch-*/\nnpm-debug.log\nbuild/\ndist/\narchive/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.224609375,
          "content": "[submodule \"submodules/zepto\"]\n\tpath = submodules/zepto\n\turl = git://github.com/madrobby/zepto.git\n[submodule \"submodules/compass-recipes\"]\n\tpath = submodules/compass-recipes\n\turl = git://github.com/senchalabs/compass-recipes.git\n"
        },
        {
          "name": ".npmignore",
          "type": "blob",
          "size": 0.2919921875,
          "content": "# Source and Build Files\ndemos/\netc/\nextensions/\nlib/jquery\nsrc/\nsubmodules/\ntest/\nthemes/\nbuild/\narchive/\n.git*\n.travis.xml\nGruntfile.coffee\nsample.htaccess\n\n# Temp Files\n.~*\n.sass-cache\n\n# IDE and OS Files\n**.sublime-project\n**.sublime-workspace\n.externalToolBuilders\n.project\n.settings\n.DS_Store\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2021484375,
          "content": "language: node_js\nnode_js:\n  - 0.10\nrvm:\n  - \"1.8.7\"\nnotifications:\n  email:\n    on_success: never\n    on_failure: change\nbefore_install: npm install -g grunt-cli && gem install sass && gem install compass\n\n"
        },
        {
          "name": "Gruntfile.coffee",
          "type": "blob",
          "size": 13.9423828125,
          "content": "module.exports = (grunt) ->\n  extend  = require('util')._extend\n  path    = require('path')\n\n  # Project configuration.\n  grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n    meta:\n      version: \"<%= pkg.version %>-<%= pkg.versionId %>\"\n      tag: \"v<%= pkg.version %><%= pkg.versionId %>\"\n      build: \"jqt-<%= meta.tag %>\"\n      dist: \"<%= meta.build %>\"\n      demo: \"jqt-demo-<%= meta.tag %>\"\n      banner: \"\"\"\n        /*\n                   _/    _/_/    _/_/_/_/_/                              _/\n                      _/    _/      _/      _/_/    _/    _/    _/_/_/  _/_/_/\n                 _/  _/  _/_/      _/    _/    _/  _/    _/  _/        _/    _/\n                _/  _/    _/      _/    _/    _/  _/    _/  _/        _/    _/\n               _/    _/_/  _/    _/      _/_/      _/_/_/    _/_/_/  _/    _/\n              _/\n           _/\n\n           Created by David Kaneda <http://www.davidkaneda.com>\n           Maintained by Thomas Yip <http://beedesk.com/>\n           Sponsored by Sencha Labs <http://www.sencha.com/>\n           Special thanks to Jonathan Stark <http://www.jonathanstark.com/>\n\n           Documentation and issue tracking on GitHub <http://github.com/senchalabs/jQTouch/>\n\n           (c) 2009-<%= grunt.template.today(\"yyyy\") %> Sencha Labs\n\n           Version: <%= meta.version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\n\n           jQTouch may be freely distributed under the MIT license.\n        */\\n\n      \"\"\"\n    dirs:\n      src: \"src\"\n      etc: \"etc\"\n      build: \"build\"\n      dist: \"dist\"\n      archive: \"archive\"\n      package: \"<%= dirs.archive %>/package\"\n      css: \"<%= dirs.build %>/themes/css\"\n\n    clean:\n      build: [\"<%= dirs.build %>\"]\n      dist: [\"<%= dirs.dist %>\"]\n      package: [\"<%= dirs.package%>\"]\n      zepto: [\"submodules/zepto/dist\"]\n\n    coffee:\n      script:\n        expand: yes\n        cwd: 'src'\n        src: ['**.coffee']\n        dest: '<%= dirs.build %>/src/'\n        ext: '.js'\n\n      extension:\n        expand: yes\n        cwd: 'extensions'\n        src: ['**.coffee']\n        dest: '<%= dirs.build %>/extensions/'\n        rename: (dest, filepath) ->\n          path.join dest, filepath.replace /\\.coffee$/, '.js'\n\n      demo:\n        expand: yes\n        cwd: 'demos'\n        src: ['**/*.coffee']\n        dest: '<%= dirs.build %>/demos/'\n        rename: (dest, filepath) ->\n          path.join dest, filepath.replace /\\.coffee$/, '.js'\n\n    copy:\n      lib:\n        expand: yes\n        cwd: 'lib'\n        src: [\"**/*\", \"!.*\"]\n        dest: \"<%= dirs.build %>/lib/\"\n\n      script:\n        expand: yes\n        cwd: 'src'\n        src: [\"**/*.js\", \"!reference/**\"]\n        dest: \"<%= dirs.build %>/src/\"\n\n      demo:\n        expand: true\n        cwd: 'demos'\n        src: [\"**/*\", \"!.*\"]\n        dest: \"<%= dirs.build %>/demos\"\n\n      extension:\n        expand: true\n        cwd: 'extensions'\n        src: [\"**/*\", \"!.*\", \"!*.coffee\"]\n        dest: \"<%= dirs.build %>/extensions\"\n\n      theme:\n        expand: true\n        cwd: 'themes'\n        src: [\"img/**/*\", \"!.*\"]\n        dest: \"<%= dirs.build %>/themes\"\n\n      dist:\n        files: [\n          expand: yes\n          src: [\"{src,extensions,themes}/**\",\"lib/zepto/**\"]\n          dest: '<%= dirs.dist %>'\n          cwd: '<%= dirs.package %>'\n        ,\n          src: \"<%= dirs.package %>/fingerprint\"\n          dest: \"<%= dirs.dist %>/fingerprint\"\n          cwd: ''\n        ]\n\n      package:\n        files: [\n          expand: yes\n          src: [\"**/*\"]\n          dest: '<%= dirs.package %>'\n          cwd: '<%= dirs.build %>'\n        ,\n          expand: yes\n          src: [\"README.md\",\"VERSIONS.md\",\"LICENSE.txt\",\"package.json\"]\n          dest: '<%= dirs.package %>'\n          cwd: ''\n        ,\n          src: \"<%= dirs.etc %>/sample.htaccess\"\n          dest: \"<%= dirs.package %>/.htaccess\"\n          cwd: ''\n        ,\n          src: \"<%= dirs.etc %>/fingerprint\"\n          dest: \"<%= dirs.package %>/fingerprint\"\n          cwd: ''\n        ]\n\n        options:\n          processContentExclude: ['**/*.{png,gif,jpg,ico,psd}']\n          processContent: (content, path) ->\n            # Strip warnings from JavaScript\n            if path.match /\\.js$/\n              content.replace /\\n\\s*warn\\(.*/g, ''\n\n            # Update to minified JS/CSS paths in HTML\n            else if path.match /\\.html$/\n              content\n                .replace(/([\\w-\\.]*)(\\.min)?\\.js/g, '$1.min.js')\n                .replace(/(themes\\/css\\/[\\w-\\.]*)(\\.min)?\\.css/g, '$1.min.css')\n\n            else if path.match /\\/fingerprint$/\n              content\n                .replace(/\\{build_id\\}/, grunt.config('meta.build'))\n                .replace(/\\{build_git_revision\\}/, grunt.config('meta.revision'))\n                .replace(/\\{build_date\\}/, grunt.template.today('yyyy-mm-dd hh:mmZ'))\n\n            else\n              content\n\n      test:\n        expand: yes\n        cwd: '<%= dirs.build %>'\n        dest: 'test/build/'\n        src: '**/*'\n\n      zepto:\n        files: [\n          expand: yes\n          cwd: 'submodules/zepto/dist/'\n          src: ['zepto.js', 'zepto.min.js']\n          dest: '<%= dirs.build %>/lib/zepto'\n        ,\n          src: 'submodules/zepto/src/touch.js'\n          dest: '<%= dirs.build %>/src/jqtouch-jquery.js'\n        ]\n\n      \"jquery-bridge\":\n        options:\n          # Convert Zepto's touch class to work for jQuery\n          processContent: (content) ->\n            content\n              .replace(/e\\.touches/g, '(e.originalEvent||e).touches')\n              .replace('(Zepto)', '(jQuery)')\n\n        files:\n          \"<%= dirs.build %>/src/jqtouch-jquery.js\": [\"submodules/zepto/src/touch.js\"]\n\n    compress:\n      archive:\n        options:\n          archive: \"<%= dirs.archive %>/<%= meta.demo %>.tgz\"\n        files: [\n          src: [\"package/**/*\"]\n          dest: \"\"\n          cwd: '<%= dirs.archive %>'\n          expand: true\n        ]\n      dist:\n        options:\n          archive: \"<%= dirs.archive %>/<%= meta.dist %>.tgz\"\n        files: [\n          src: [\"dist/**/*\"]\n          dest: \"package\"\n          cwd: ''\n          expand: true\n        ,\n          src: [\"README.md\",\"LICENSE.txt\",\"VERSIONS.md\",\"package.json\"]\n          dest: \"package/dist\"\n          cwd: ''\n          expand: true\n        ]\n\n    \"npm-command\":\n      zepto:\n        command: \"run-script\"\n        script: \"dist\"\n        params: \"\"\n        options:\n          cwd: \"submodules/zepto\"\n          env: extend(process.env, {'MODULES': 'zepto event ajax form ie detect fx data touch'})\n\n    compass:\n      theme:\n        files: [\n          src: 'themes/scss/**/*.scss'\n        ]\n        options:\n          load: 'submodules/compass-recipes/'\n          sassDir: 'themes/scss'\n          cssDir: '<%= dirs.css %>'\n\n      demo:\n        files: [\n          src: 'demos/**/*.scss'\n        ]\n        options:\n          load: 'submodules/compass-recipes/'\n          sassDir: 'demos/'\n          cssDir: \"<%= dirs.build %>/demos/\"\n\n      extension:\n        files: [\n          src: 'extensions/**/*.scss'\n        ]\n        options:\n          load: 'submodules/compass-recipes/'\n          sassDir: 'extensions/'\n          cssDir: \"<%= dirs.build %>/extensions/\"\n\n    # Concat is only used to add our banner\n    concat:\n      script:\n        expand: yes\n        cwd: '<%= dirs.build %>/src/'\n        src: ['**/*.js', '!**/jqtouch-jquery.js']\n        dest: '<%= dirs.build %>/src/'\n        options:\n          banner: \"<%= meta.banner %>\"\n\n      theme:\n        expand: yes\n        cwd: '<%= dirs.build %>/themes/'\n        src: '**/*.css'\n        dest: '<%= dirs.build %>/themes/'\n        options:\n          banner: \"<%= meta.banner %>\"\n\n    qunit:\n      files: ['test/unit/**/*.html', '!**/disabled/**']\n      options:\n        timeout: 15000\n\n    uglify:\n      options:\n        globals:\n          jQTouch: yes\n\n      jqtouch:\n        expand: yes\n        cwd: '<%= dirs.package %>/src/'\n        src: ['**/*.js', '!**/jqtouch-jquery.js', '!**/*.min.js']\n        dest: '<%= dirs.package %>/src/'\n        ext: '.min.js'\n        options:\n          banner: '<%= meta.banner %>'\n\n      lib:\n        expand: yes\n        cwd: '<%= dirs.package %>'\n        src: ['lib/**/*.js', 'src/jqtouch-jquery.js', '!**/*.min.js']\n        dest: '<%= dirs.package %>'\n        rename: (dest, filepath) ->\n          path.join dest, filepath.replace /\\.js$/, '.min.js'\n\n        options:\n          preserveComments: (comment) ->\n            # Preserve comments near the top of the file.\n            # Loosey-goosey, I know, but I want to make sure we keep any\n            # Zepto and jQuery lines about (c) and license\n            if comment.start.line < 6\n              yes\n            else\n              no\n\n      extension:\n        expand: yes\n        cwd: \"<%= dirs.package %>/extensions/\"\n        src: '**/*.js'\n        dest: \"<%= dirs.package %>/extensions/\"\n        rename: (dest, filepath) ->\n          path.join dest, filepath.replace /\\.js$/, '.min.js'\n        options:\n          banner: \"<%= meta.banner %>\"\n\n    cssmin:\n      theme:\n        expand: yes\n        cwd: \"<%= dirs.package %>/themes/css\"\n        src: ['**/*.css', '!**/*.min.css']\n        dest: \"<%= dirs.package %>/themes/css\"\n        ext: '.min.css'\n        options:\n          banner: \"<%= meta.banner %>\"\n\n      extension:\n        expand: yes\n        cwd: \"<%= dirs.package %>/extensions\"\n        src: ['**/*.css', '!**/*.min.css']\n        dest: \"<%= dirs.package %>/extensions\"\n        rename: (dest, filepath) ->\n          path.join dest, filepath.replace /\\.css$/, '.min.css'\n        options:\n          banner: \"<%= meta.banner %>\"\n\n    cover:\n      compile:\n        files:\n          \"<%= dirs.build %>/test/instrumented/jqtouch.js\": [\"src/jqtouch.js\"]\n\n    watch_files:\n      live:\n        files: ['build/**', '!.*', '!.**/*']\n        options:\n          livereload: true  # default port: 35729, add <script src=\"http://localhost:35729/livereload.js\"></script>\n      theme:\n        files: ['themes/scss/**/*.scss', '!.*', '!.**/*']\n        tasks: ['compass']\n        dot: false\n      coffee:\n        files: ['src/**/*.coffee', '!.*', '!.**/*']\n        tasks: ['coffee:script']\n        dot: false\n      script:\n        files: ['src/**/*.js', '!.*', '!.**/*']\n        tasks: ['copy:script']\n        dot: false\n      demo:\n        files: ['demos/**/*', '!.*', '!.**/*']\n        tasks: ['demo']\n        dot: false\n      extension:\n        files: ['extensions/**/*', '!.*', '!.**/*']\n        tasks: ['extension']\n        dot: false\n\n    jshint:\n      src: \"<%= dirs.src %>/**/*.js\"\n      options:\n        camelcase: true\n        curly: false\n        eqeqeq: true\n        immed: true\n        latedef: true\n        newcap: true\n        noarg: true\n        sub: true\n        undef: true\n        boss: true\n        eqnull: true\n        browser: true\n\n        globals:\n          $: true\n          console: true\n\n  # Task definitions\n  require('load-grunt-tasks')(grunt);\n\n  grunt.registerMultiTask \"npm-command\", \"Run an NPM command in a specific module\", ->\n    cb = @async() # Tell grunt the task is async\n    command = @data[\"command\"]\n    params = grunt.template.process(@data[\"params\"])\n    script = grunt.template.process(@data[\"script\"])\n    options = @data[\"options\"]\n\n    exec = require(\"child_process\").exec\n    child = exec(\"npm install\", options, (error, stdout, stderr) ->\n      grunt.log.write stdout if stdout\n      grunt.log.error stdout if stderr\n      if error isnt null\n        cb(error) # Execute the callback when the async task is done\n      else\n        child = exec([\"npm\", command, script, params].join(' '), options, (error, stdout, stderr) ->\n          grunt.log.write stdout if stdout\n          grunt.log.error stdout if stderr\n          cb(error) # Execute the callback when the async task is done\n        )\n    )\n\n  grunt.registerTask \"git-describe\", \"Describes current git commit\", ->\n    # prefer to use our own task for better control over cmd line args\n    done = this.async();\n    args = [\"describe\", \"--tags\", \"--always\", \"--long\", \"--dirty=*\", \"--abbrev=12\"]\n    grunt.util.spawn cmd: \"git\", args: args, (err, result) ->\n      if err\n        grunt.log.error err\n        return done(false)\n      grunt.config(\"meta.revision\", result)\n      grunt.config(\"meta.dist\", 'jqt-' + result)\n      grunt.config(\"meta.demo\", 'jqt-demo-' + result)\n      return done(result)\n\n  grunt.registerTask \"git-tag\", \"Tag the current git commit\", ->\n    done = this.async();\n    args = [\"tag\", grunt.config(\"meta.tag\")]\n    console.log('$ git ' + args.join(' '))\n    grunt.util.spawn cmd: \"git\", args: args, (err, result) ->\n      if err\n        grunt.log.error err\n        return done(false)\n      return done(result)\n\n  grunt.renameTask 'watch', 'watch_files'\n\n  # Build Zepto\n  grunt.registerTask 'zepto', ['npm-command:zepto', 'copy:zepto', 'copy:jquery-bridge']\n\n  # Build Lib\n  grunt.registerTask 'lib', ['zepto', 'copy:lib']\n\n  # Build Scripts\n  grunt.registerTask 'script', ['copy:script', 'coffee:script', 'concat:script']\n\n  # jQT Theme\n  grunt.registerTask 'theme', ['script', 'copy:theme', 'compass:theme', 'concat:theme']\n\n  # Main jQT bits\n  grunt.registerTask 'main', ['script', 'theme']\n\n  # Build Extensions\n  grunt.registerTask 'extension', ['copy:extension', 'coffee:extension', 'compass:extension']\n\n  # Build Demos\n  grunt.registerTask 'demo', ['copy:demo', 'coffee:demo', 'compass:demo']\n\n  # Build\n  grunt.registerTask 'build', ['lib', 'main', 'extension', 'demo']\n\n  # Watch\n  grunt.registerTask 'watch', ['build', 'watch_files']\n\n  # Full (Clean and Build)\n  grunt.registerTask 'full', ['clean', 'update_submodules', 'build']\n\n  # Default (Same as full)\n  grunt.registerTask 'default', ['full']\n\n  # Test\n  grunt.registerTask 'test', ['copy:test', 'qunit']\n\n  # Minify Assets\n  grunt.registerTask 'minify', ['uglify', 'cssmin']\n\n  # Build full, and and minifies all artifacts\n  grunt.registerTask 'pack', ['git-describe', 'copy:package', 'minify']\n\n  # Pack and compress into a versioned archive\n  grunt.registerTask 'archive', ['pack', 'compress:archive']\n\n  # Select the core from package to make a `dist` structure\n  grunt.registerTask 'dist', ['full', 'test', 'archive', 'copy:dist', 'compress:dist']\n\n  # Npm Prepublish\n  grunt.registerTask 'release', ['git-tag', 'dist']\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.0537109375,
          "content": "The MIT License\nCopyright (c) 2009-2013 Sencha Labs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.4296875,
          "content": "# jQT\n\n## Create powerful mobile apps with just HTML, CSS, and Zepto.js (or jQuery).\n\n[![Build Status](https://api.travis-ci.org/senchalabs/jQTouch.png?branch=master)](http://travis-ci.org/senchalabs/jQTouch)\n\njQTouch is a JavaScript plugin which works with either Zepto.js or jQuery, and comes with smooth animations, navigation, and themes for mobile WebKit browsers (as found in iOS, Android, BlackBerry, and WebOS).\n\n- [Easy to install](https://github.com/senchalabs/jQTouch/wiki/Getting-Started). Get up and running in a few minutes.\n- [Entirely customizable](https://github.com/senchalabs/jQTouch/wiki/Initialization-Options) with selector options\n- [Theme support](https://github.com/senchalabs/jQTouch/wiki/Theming), including default Apple and jQTouch custom themes\n- [Callback functions](https://github.com/senchalabs/jQTouch/wiki/Callback-Events) throughout, including swipe and orientation change detection\n- [Zepto](https://github.com/madrobby/zepto) integration - Use Zepto.js instead of jQuery to cut down on precious bandwidth. Zepto.js features a similar API to jQuery, but optimized for WebKit and much smaller.\n- Sass-based stylesheets, easily modified with variables and optimized for size.\n- Image-less stylesheets -- Using [Compass Recipes](https://github.com/senchalabs/compass-recipes), we have recreated all of the gradients and background patterns with CSS. This way, they are resolution independent, dynamically theme-able, and lower bandwidth.\n- Page history management and CSS3 page transitions, including 3D flip, cube, and swap\n- Failover to 2D animations for devices that don't support 3D\n- Easily allow apps to run in fullscreen mode with custom icons and startup screens\n- The power of jQuery to build AJAX applications\n- New demos: Clock and Todo\n\n## Getting Started\n\nThe easiest way to try out jQT is with the demo archive, which can be found in the release tab on Github:\n\n- [jQT Releases](https://github.com/senchalabs/jQTouch/releases)\n\nPlease look for the download (green button) with filename prefixed with `jqt-demo` (ie, `jqt-demo-<< version >>.tar.gz`.)\n\nOnce unzipped and untar, you can open `package/demons/index.html` with any WebkitBrowser on a desktop.\n\n## Links\n\nRecently added features can be found at [New and Noteworthy](https://github.com/senchalabs/jQTouch/blob/master/VERSIONS.md) page.\n\n[Source code](http://github.com/senchalabs/jQTouch/archives/master), [issue tracking](http://github.com/senchalabs/jQTouch/issues), and [documentation](http://wiki.github.com/senchalabs/jQTouch/) are available on github.\n\n[Watch this video preview](http://www.jqtouch.com/) to see it in action.\n\n## Building your own version of jQTouch\n\n### Dependencies\n\nWe have quite a few dependencies at the moment, as we build with Compass/SASS for stylesheets, which is only available via Ruby. The actual build system, however, is built on Grunt.\n\nPlease make sure you have the following installed:\n\n* [Ruby](http://www.ruby-lang.org) — Comes default on Macs, Windows users can use [RubyInstaller](http://rubyinstaller.org)\n* [Sass](http://sass-lang.com) & [Compass](http://compass-style.org) — Install both with `sudo gem install compass` once you have Ruby/RubyGems installed\n* [Node.js & NPM](http://nodejs.org) — `brew install node`\n* [Grunt CLI](http://gruntjs.com) — Install with `npm install -g grunt-cli` once you have Node.js as listed above.\n* Local node packages — Run `npm install` from this directory\n\n### Commands\n\n#### `grunt` (default)\n\nWill create a build of jQTouch in the `build/` directory, compiling any theme files and updating with source from the Zepto submodule. This must be run to preview jQTouch.\n\n#### `grunt build`\n\nThis task is used only for iterative development. It does not update submodule, nor clean the build. (The `default` grunt task must be called once before this task.)\n\n#### `grunt watch`\n\nWill create the same build as `grunt build`, but will continue to watch for file changes to theme and source files, compiling/copying them into build every time you save. If you have a livereload browser extension installed and enabled, the page will update live after every change. (The `default` grunt task must be called once before this task.)\n\n#### `grunt compass`\n\nOnly build the theme files. Typically, you'll want to use `grunt watch` for developing a custom theme. (The `default` grunt task must be called once before this task.)\n\n#### `grunt test`\n\nRun our test suite. (The `default` grunt task must be called once before this task.)\n\n#### `grunt dist`\n\nThis is typically used internally for creating releases — It does everything the standard build does, but then additionally minifies all JS/CSS and updates the paths in demo files.\n\n\n\nExternal Guides\n---------------\n\nJonathan Stark has created an excellent introduction to jQTouch as part of his book, [Building iPhone Apps with HTML, CSS, and Javascript](http://ofps.oreilly.com/titles/9780596805784/chapAnimation.html).\n\n[PeepCode did a screencast](http://peepcode.com/products/jqtouch) ($9), as well as a [cheat sheet](http://blog.peepcode.com/tutorials/2009/jqtouch-cheat-sheet), which have been helpful to many people.\n\nCredits\n-------\n\nCreated, and still occasionally maintained, by [David Kaneda](http://www.davidkaneda.com).\n\nMaintained by [Thomas Yip](https://github.com/thomasyip).\n\nSpecial thanks to [pinch/zoom](http://www.pinchzoom.com/) and [Jonathan Stark](http://jonathanstark.com/).\n\n(c) 2009-2013 Sencha Labs.\n\njQTouch may be freely distributed under the MIT license.\nSee LICENSE.txt for license.\n"
        },
        {
          "name": "VERSIONS.md",
          "type": "blob",
          "size": 5.685546875,
          "content": "# New and Noteworthy — jQTouch\n\n## 1.0rc7\n\n### Innsbruck (iOS 7) Theme \n\n###### Dec, 2013\n\nA new theme that resemble to iOS 7 is added.\n\n![Innsbruck Screenshot 1][11] | ![Innsbruck Screenshot 2][12] | ![Innsbruck Screenshot 3][13] | ![Innsbruck Screenshot 4][14]\n\n## 1.0rc6\n\n### Coffee Script\n\n###### Feb, 2013 -- Dec, 2013\n\nThe main JavaScript file was ported / rewritten in CoffeeScript. Dave simplified the codebase and fixed a good number of bugs.\n\n\n## 1.0.0 - b5\n\n### Actionsheet\n\n###### Oct, 2012\n\n![ActionSheet Screenshot][9]\n\nActionsheet is similar to iOS's [UIActionSheet][2]. It is a modal sheet that can be used to prompt user for choices. \n\nIt is added to this version as an extension: `jqt.actionsheet.js`. When loaded, it attempts to load `jqt.actionsheet.css` from the same directory. (If you use ASL, such as require.js, you might need to include the css explicitly.) \n\nThe actionsheet uses the same markup as a jQT page and must be a direct child of `<div id=\"jqt\"/>`.\n\nTo trigger an actionsheet, use an anchor with class, `action` (ie, `<a class=\"action\">`) \n\nTapping on any anchor on the sheet causes the sheet to dismiss. After the sheet is dismissed, the original jQT action will be triggered. \n\nHere is an example sniplet:\n\n```html    \n<div id=\"ui\">\n    < ... >\n        <ul class=\"rounded\">\n            <li class=\"arrow\"><a class=\"action\" href=\"#actionsheet\">Action</a></li>\n        </ul>\n    < ... >\n</div>\n<div id=\"actionsheet\" class=\"actionsheet\">\n    <div class=\"actionchoices\">\n        <a href=\"#action_performed\" class=\"whiteButton\">Open in Safari</a>\n        <a href=\"#action_performed\" class=\"whiteButton\">Plan B</a>\n        <a href=\"#\" class=\"redButton dismiss\">Cancel</a>\n    </div>\n</div>\n```\n\nPlease refers to [demos/main/index.html#ui][4] for code sample.\n\n### Menusheet\n\n###### Oct, 2012\n\n![MenuSheet Screenshot][10] \n\nMenusheet is first made popular by facebook app on iOS. The menusheet hides beneath the main page and is revealed by a slide animation when activated.\n\nIts usage is very similar to actionsheet. \n\nIt is added to this version of jQT as an extension: `jqt.menusheet.js`. When loaded, it attempts to load `jqt.menusheet.css` from the same directory. (If you use ASL, such as require.js, you might need to include the css explicitly.) \n\nThe menusheet uses the same markup as a jQT page and must be a direct child of `<div id=\"jqt\">`. \n\nTo trigger an actionsheet, use an anchor with class, menu (ie, `<a class=\"menu\">`) \n\nTapping on any anchor on the sheet will cause the sheet to dismiss. After the sheet is dismissed, the original jQT action will be triggered. \n\nPlease refers to [demos/main/index.html#ui][4] for code sample. \n\n### Unit Tests\n\n###### Dec 18th, 2012\n\nWe have added unit tests into this release.\n\nThey can be found under test/unit/. Each test is a *.html file and can be run by simply open it with a web browser.\n\nThe tests can also be run from a command line. Under build/, exec `grunt test`.\n\n### Init Options: updateHash\n\n###### Dec 18th, 2012\n\nWhen options updateHash is set to true (default), page navigation will cause the url hash(#) to be updated.\n\n```javascript\nvar jQT = new $.jQTouch({updateHash: false});\n```                      \n\n### Init Options: starter (Experimental)\n\n###### Dec 23rd, 2012\n\nAdded init options, starter. By defaults, jQTouch is started upon `$(document).ready`.\n\nFor example, this option can be overridden:\n\n- to work with dynamically loaded body. The relevant part of the dom might not be available at `$(document).ready`.\n\n- to react upon user action\n\nHere is some code example:\n\n```javascript\nfunction starter(start) {\n    $(document).bind('ready', function() {\n       $('https://beedesk.fwd.wf#magic_button').bind('touchstart mousedown', function() {\n           start();\n       });\n    });\n }\n var jQT = new $.jQTouch({starter: starter});  \n```\n\n### Fixed Tap During Animation Break Navigation Bug\n\n###### Nov 2012\n\nPrior to this release, rapid taps on anchor before page transition ended might cause page navigation to break. The problem is fixed in this release.\n\n### Fixed intermittent touchscroll not-scrollable problem\n\n###### Dec 19th, 2012\n\nFor .scroll, overflow-y: scroll is used instead. Some old workaround on minHeight is removed. Tested on iPhone 4s, iPad 3, Nexus 7 and Safari\n\n\n### Grunt.js Build\n\n###### Jan 24th, 2012\n\nWe converted our build system from `Ant` into `Gruntjs`, for better dependeincies mangaement, build performance and flexibility. \n\n### Travis CI Integration\n\n###### Jan 24th, 2012\n\njQTouch repository is now connected to Travis CI.\n\n## 1.0 - b4\n\n### Improved Theming System\n\n![Theme Screenshot][3]\n\nSee, [jQTouch blog][6] for details.\n\n### iOS Native Scrolling\n\nSee, [jQTouch blog][7] for details.\n\n### Zepto.js Integration\n\nSee, [jQTouch blog][8] for details.\n\n [1]: images/ActionSheet_Small.png\n [2]: http://developer.apple.com/library/ios/#documentation/uikit/reference/UIActionSheet_Class/Reference/Reference.html\n [3]: http://25.media.tumblr.com/tumblr_lwknln4IbI1qa206po1_500.png\n [4]: demos/main/index.html#ui\n [6]: http://blog.jqtouch.com/post/14579716419/improved-theming\n [7]: http://blog.jqtouch.com/post/14586457670/ios5-scrolling\n [8]: http://blog.jqtouch.com/post/14576505296/zepto-js\n [9]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/ActionSheet_Small.png\n [10]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/MenuSheet_Small.png\n [11]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/Innsbruck_Main_Small.png\n [12]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/Innsbruck_EdgetoEdge_List_Small.png\n [13]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/Innsbruck_Buttons_Small.png\n [14]: https://raw.github.com/senchalabs/jQTouch/gh-pages/screenshots/Innsbruck_Actionsheet_Small.png\n"
        },
        {
          "name": "demos",
          "type": "tree",
          "content": null
        },
        {
          "name": "etc",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.28515625,
          "content": "{\n  \"author\": \"David Kaneda\",\n  \"name\": \"jqt\",\n  \"description\": \"Create powerful mobile apps with just HTML, CSS, and Zepto.js (or jQuery).\",\n  \"version\": \"1.0.1\",\n  \"versionId\": \"\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/senchalabs/jQTouch.git\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"David Kaneda\",\n      \"email\": \"dk@morfunk.com\"\n    },\n    {\n      \"name\": \"Jonathan Stark\"\n    },\n    {\n      \"name\": \"Thomas Yip\",\n      \"email\": \"thomasleaf@gmail.com\"\n    }\n  ],\n  \"licenses\": [\n    {\n      \"type\": \"MIT\"\n    }\n  ],\n  \"engines\": {\n    \"node\": \"~0.10\"\n  },\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.2\",\n    \"grunt-contrib-clean\": \"~0.5.0\",\n    \"grunt-contrib-coffee\": \"~0.10.1\",\n    \"grunt-contrib-compass\": \"~0.7.2\",\n    \"grunt-contrib-compress\": \"~0.6.1\",\n    \"grunt-contrib-concat\": \"~0.3.0\",\n    \"grunt-contrib-copy\": \"~0.5.0\",\n    \"grunt-contrib-cssmin\": \"~0.7.0\",\n    \"grunt-contrib-jshint\": \"~0.8.0\",\n    \"grunt-contrib-qunit\": \"~0.4.0\",\n    \"grunt-contrib-uglify\": \"~0.3.2\",\n    \"grunt-contrib-watch\": \"~0.5.3\",\n    \"grunt-coverjs\": \"~0.1.0\",\n    \"grunt-update-submodules\": \"~0.2.0\",\n    \"load-grunt-tasks\": \"^0.5.0\"\n  },\n  \"optionalDependencies\": {},\n  \"scripts\": {\n    \"test\": \"grunt test --verbose\",\n    \"prepublish\": \"grunt dist --verbose\"\n  }\n}\n"
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "submodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}