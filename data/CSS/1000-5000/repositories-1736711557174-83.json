{
  "metadata": {
    "timestamp": 1736711557174,
    "page": 83,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AlexTatiyants/pev",
      "stars": 2773,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.23828125,
          "content": "# http://editorconfig.org\n\nroot = true\n\n[*]\ncharset = utf-8\nindent_style = space\nindent_size = 2\nend_of_line = lf\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.md]\ninsert_final_newline = false\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5078125,
          "content": "# Logs\nlogs\n*.log\n\n# Runtime data\npids\n*.pid\n*.seed\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n\n# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Compiled binary addons (http://nodejs.org/api/addons.html)\nbuild/Release\n\nnode_modules\n.sass-cache\n\n# Users Environment Variables\n.lock-wscript\n.tsdrc\n\n#IDE configuration files\n.idea\n.vscode\n\ndist\ndev\ndocs\nlib\ntest\ntools/typings/tsd\ntmp\n"
        },
        {
          "name": ".jshintrc",
          "type": "blob",
          "size": 0.373046875,
          "content": "{\n  \"bitwise\": true,\n  \"immed\": true,\n  \"newcap\": true,\n  \"noarg\": true,\n  \"noempty\": true,\n  \"nonew\": true,\n  \"trailing\": true,\n  \"maxlen\": 200,\n  \"boss\": true,\n  \"eqnull\": true,\n  \"expr\": true,\n  \"globalstrict\": true,\n  \"laxbreak\": true,\n  \"loopfunc\": true,\n  \"sub\": true,\n  \"undef\": true,\n  \"indent\": 2,\n  \"unused\": true,\n\n  \"node\": true,\n  \"globals\": {\n    \"System\": true\n  }\n}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.330078125,
          "content": "FROM debian:jessie\n\nRUN apt-get update && apt-get -y install apt-transport-https curl g++ make python ruby\n\nRUN curl -sL https://deb.nodesource.com/setup_4.x | bash -\n\nRUN apt-get -y install nodejs\n\nCOPY tsdrc ~/.tsdrc\n\nCOPY . /var/www/pev\n\nWORKDIR /var/www/pev\n\nRUN npm install -g gulp\n\nRUN npm install\n\nCMD cd /var/www/pev && npm start\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 Alex Tatiyants\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.119140625,
          "content": "# Postgres Explain Visualizer (pev)\n\nPostgres Explain Visualizer (dev) is designed to make [EXPLAIN](http://www.postgresql.org/docs/current/static/sql-explain.html) output easier to grok. It creates a graphical representation of the plan. You can see it in action at [tatiyants.com/pev](http://tatiyants.com/pev/), or read about it [on my blog](http://tatiyants.com/postgres-query-plan-visualization/).\n\nPev is heavily influenced by the excellent [explain.depesz.com](http://explain.depesz.com/).\n\nPev is written in [angular 2](https://angular.io/) with [TypeScript](http://www.typescriptlang.org/). The project is based on [angular2 seed](https://github.com/mgechev/angular2-seed). It requires [npm](https://www.npmjs.com/), [gulp](http://gulpjs.com/), [tsd](http://definitelytyped.org/tsd/), and [compass](http://compass-style.org/).\n\n\n## Installation\n\n```\nnpm install\nnpm start\n```\n\nYou may also need to install tsd and compass:\n\n```\nnpm install tsd -g\ngem install compass\n```\n\n## Build\nTo build, run the build command for a specific environment. For example, the following will create a production distribution:\n\n```\nnpm start build.prod\n```\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.0751953125,
          "content": "pev:\n  build: .\n  ports:\n    - \"8000:8000\"\n  volumes:\n    - ./:/var/www/pev/\n"
        },
        {
          "name": "gulpfile.ts",
          "type": "blob",
          "size": 2.0009765625,
          "content": "import * as gulp from 'gulp';\nimport {runSequence, task} from './tools/utils';\n\n// --------------\n// Clean (override).\ngulp.task('clean',       task('clean', 'all'));\ngulp.task('clean.dist',  task('clean', 'dist'));\ngulp.task('clean.test',  task('clean', 'test'));\ngulp.task('clean.tmp',   task('clean', 'tmp'));\n\ngulp.task('check.versions', task('check.versions'));\n\n// --------------\n// Postinstall.\ngulp.task('postinstall', done =>\n  runSequence('clean',\n              'npm',\n              done));\n\n// --------------\n// Build dev.\ngulp.task('build.dev', done =>\n  runSequence('clean.dist',\n              'tslint',\n              'build.sass.dev',\n              'build.img.dev',\n              'build.fonts.dev',\n              'build.js.dev',\n              'build.index',\n              done));\n\n// --------------\n// Build prod.\ngulp.task('build.prod', done =>\n  runSequence('clean.dist',\n              'clean.tmp',\n              'tslint',\n              'build.sass.dev',\n              'build.img.dev',\n              'build.fonts.dev',\n              'build.html_css.prod',\n              'build.deps',\n              'build.js.prod',\n              'build.bundles',\n              'build.index',\n              done));\n\n// --------------\n// Watch.\ngulp.task('build.dev.watch', done =>\n  runSequence('build.dev',\n              'watch.dev',\n              done));\n\ngulp.task('build.test.watch', done =>\n  runSequence('build.test',\n              'watch.test',\n              done));\n\n// --------------\n// Test.\ngulp.task('test', done =>\n  runSequence('clean.test',\n              'tslint',\n              'build.test',\n              'karma.start',\n              done));\n\n// --------------\n// Serve.\ngulp.task('serve', done =>\n  runSequence('build.dev',\n              'server.start',\n              'watch.serve',\n              done));\n\n// --------------\n// Docs\n// Disabled until https://github.com/sebastian-lenz/typedoc/issues/162 gets resolved\n// gulp.task('docs', done =>\n//   runSequence('build.docs',\n//               'serve.docs',\n//               done));\n"
        },
        {
          "name": "karma.conf.js",
          "type": "blob",
          "size": 2.951171875,
          "content": "// Karma configuration\n// Generated on Wed Jul 15 2015 09:44:02 GMT+0200 (Romance Daylight Time)\n'use strict';\n\nmodule.exports = function(config) {\n  config.set({\n\n    // base path that will be used to resolve all patterns (eg. files, exclude)\n    basePath: './',\n\n\n    // frameworks to use\n    // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [\n      'node_modules/zone.js/dist/zone-microtask.js',\n      'node_modules/zone.js/dist/long-stack-trace-zone.js',\n      'node_modules/zone.js/dist/jasmine-patch.js',\n      'node_modules/es6-module-loader/dist/es6-module-loader.js',\n      'node_modules/traceur/bin/traceur-runtime.js', // Required by PhantomJS2, otherwise it shouts ReferenceError: Can't find variable: require\n      'node_modules/traceur/bin/traceur.js',\n      'node_modules/systemjs/dist/system.src.js',\n      'node_modules/reflect-metadata/Reflect.js',\n\n      { pattern: 'node_modules/angular2/**/*.js', included: false, watched: false },\n      { pattern: 'node_modules/rxjs/**/*.js', included: false, watched: false },\n      { pattern: 'test/**/*.js', included: false, watched: true },\n      { pattern: 'node_modules/systemjs/dist/system-polyfills.js', included: false, watched: false }, // PhantomJS2 (and possibly others) might require it\n\n      'test-main.js'\n    ],\n\n\n    // list of files to exclude\n    exclude: [\n      'node_modules/angular2/**/*_spec.js'\n    ],\n\n\n    // preprocess matching files before serving them to the browser\n    // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n    preprocessors: {\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress'\n    // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n    reporters: ['mocha'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // start these browsers\n    // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n    browsers: [\n      'PhantomJS2',\n      'Chrome'\n    ],\n\n\n    customLaunchers: {\n      Chrome_travis_ci: {\n        base: 'Chrome',\n        flags: ['--no-sandbox']\n      }\n    },\n\n\n    // Continuous Integration mode\n    // if true, Karma captures browsers, runs the tests and exits\n    singleRun: false\n  });\n\n  if (process.env.APPVEYOR) {\n    config.browsers = ['IE'];\n    config.singleRun = true;\n    config.browserNoActivityTimeout = 90000; // Note: default value (10000) is not enough\n  }\n\n  if (process.env.TRAVIS || process.env.CIRCLECI) {\n    config.browsers = ['Chrome_travis_ci'];\n    config.singleRun = true;\n  }\n};\n"
        },
        {
          "name": "logo.ai",
          "type": "blob",
          "size": 1576.55859375,
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.732421875,
          "content": "{\n  \"name\": \"pev\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Postgres Explain Visualizer\",\n  \"repository\": {\n    \"url\": \"http://www.tatiyants.com\"\n  },\n  \"scripts\": {\n    \"build.dev\": \"gulp build.dev\",\n    \"build.dev.watch\": \"gulp build.dev.watch\",\n    \"build.prod\": \"gulp build.prod --env prod\",\n    \"build.test\": \"gulp build.test\",\n    \"build.test.watch\": \"gulp build.test.watch\",\n    \"docs\": \"npm run gulp -- build.docs && npm run gulp -- serve.docs\",\n    \"gulp\": \"gulp\",\n    \"karma\": \"karma\",\n    \"karma.start\": \"karma start\",\n    \"lint\": \"gulp tslint\",\n    \"postinstall\": \"tsd reinstall --clean && tsd link && tsd rebundle && gulp check.versions && gulp postinstall\",\n    \"reinstall\": \"rimraf node_modules && npm cache clean && npm install\",\n    \"start\": \"gulp serve --env dev\",\n    \"serve.dev\": \"gulp serve --env dev\",\n    \"tasks.list\": \"gulp --tasks-simple\",\n    \"test\": \"gulp test\",\n    \"tsd\": \"tsd\"\n  },\n  \"author\": \"Alex Tatiyants\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"async\": \"^1.4.2\",\n    \"chalk\": \"^1.1.1\",\n    \"connect-livereload\": \"^0.5.3\",\n    \"del\": \"^1.1.1\",\n    \"express\": \"~4.13.1\",\n    \"extend\": \"^3.0.0\",\n    \"gulp\": \"^3.9.0\",\n    \"gulp-compass\": \"^2.1.0\",\n    \"gulp-concat\": \"^2.5.2\",\n    \"gulp-filter\": \"^2.0.2\",\n    \"gulp-inject\": \"^1.3.1\",\n    \"gulp-inline-ng2-template\": \"^0.0.7\",\n    \"gulp-load-plugins\": \"^0.10.0\",\n    \"gulp-minify-css\": \"^1.1.6\",\n    \"gulp-minify-html\": \"^1.0.3\",\n    \"gulp-plumber\": \"~1.0.1\",\n    \"gulp-sass\": \"^2.0.4\",\n    \"gulp-shell\": \"~0.4.3\",\n    \"gulp-sourcemaps\": \"~1.5.2\",\n    \"gulp-template\": \"^3.0.0\",\n    \"gulp-tslint\": \"^3.3.0\",\n    \"gulp-tslint-stylish\": \"^1.0.4\",\n    \"gulp-typescript\": \"~2.8.2\",\n    \"gulp-uglify\": \"^1.2.0\",\n    \"gulp-util\": \"^3.0.7\",\n    \"gulp-watch\": \"^4.2.4\",\n    \"jasmine-core\": \"~2.3.4\",\n    \"karma\": \"~0.13.15\",\n    \"karma-chrome-launcher\": \"~0.2.0\",\n    \"karma-ie-launcher\": \"^0.2.0\",\n    \"karma-jasmine\": \"~0.3.6\",\n    \"karma-mocha-reporter\": \"^1.1.1\",\n    \"karma-phantomjs2-launcher\": \"^0.3.2\",\n    \"merge-stream\": \"^1.0.0\",\n    \"open\": \"0.0.5\",\n    \"rimraf\": \"^2.4.3\",\n    \"run-sequence\": \"^1.1.0\",\n    \"semver\": \"^5.0.3\",\n    \"serve-static\": \"^1.9.2\",\n    \"slash\": \"~1.0.0\",\n    \"stream-series\": \"^0.1.1\",\n    \"systemjs-builder\": \"^0.14.8\",\n    \"tiny-lr\": \"^0.2.1\",\n    \"traceur\": \"^0.0.91\",\n    \"ts-node\": \"^0.5.4\",\n    \"tsd\": \"^0.6.4\",\n    \"typedoc\": \"^0.3.12\",\n    \"typescript\": \"~1.7.3\",\n    \"typescript-register\": \"^1.1.0\",\n    \"yargs\": \"^3.25.0\"\n  },\n  \"dependencies\": {\n    \"angular2\": \"2.0.0-beta.0\",\n    \"bootstrap\": \"^3.3.5\",\n    \"es6-module-loader\": \"^0.17.8\",\n    \"es6-shim\": \"^0.33.3\",\n    \"highlight.js\": \"^9.1.0\",\n    \"lodash\": \"^3.10.1\",\n    \"moment\": \"^2.10.6\",\n    \"reflect-metadata\": \"0.1.2\",\n    \"rxjs\": \"5.0.0-beta.0\",\n    \"systemjs\": \"^0.19.4\",\n    \"zone.js\": \"0.5.10\"\n  }\n}\n"
        },
        {
          "name": "test-main.js",
          "type": "blob",
          "size": 1.384765625,
          "content": "// Turn on full stack traces in errors to help debugging\nError.stackTraceLimit=Infinity;\n\njasmine.DEFAULT_TIMEOUT_INTERVAL = 100;\n\n// Cancel Karma's synchronous start,\n// we will call `__karma__.start()` later, once all the specs are loaded.\n__karma__.loaded = function() {};\n\nSystem.config({\n  baseURL: '/base/',\n  defaultJSExtensions: true,\n  paths: {\n    'angular2/*': 'node_modules/angular2/*.js',\n    'rxjs/*': 'node_modules/rxjs/*.js'\n  }\n});\n\nSystem.import('angular2/src/platform/browser/browser_adapter').then(function(browser_adapter) {\n  browser_adapter.BrowserDomAdapter.makeCurrent();\n}).then(function() {\n  return Promise.all(\n    Object.keys(window.__karma__.files) // All files served by Karma.\n    .filter(onlySpecFiles)\n    .map(file2moduleName)\n    .map(function(path) {\n      return System.import(path).then(function(module) {\n        if (module.hasOwnProperty('main')) {\n          module.main();\n        } else {\n          throw new Error('Module ' + path + ' does not implement main() method.');\n        }\n      });\n    }));\n})\n.then(function() {\n  __karma__.start();\n}, function(error) {\n  console.error(error.stack || error);\n  __karma__.start();\n});\n\n\nfunction onlySpecFiles(path) {\n  return /[\\.|_]spec\\.js$/.test(path);\n}\n\n// Normalize paths to module names.\nfunction file2moduleName(filePath) {\n  return filePath.replace(/\\\\/g, '/')\n    .replace(/^\\/base\\//, '')\n    .replace(/\\.js/, '');\n}\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "tsconfig.json",
          "type": "blob",
          "size": 0.37890625,
          "content": "{\n    \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"module\": \"commonjs\",\n        \"declaration\": false,\n        \"noImplicitAny\": false,\n        \"removeComments\": true,\n        \"noLib\": false,\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true,\n        \"sourceMap\": true\n    },\n    \"exclude\": [\n        \"node_modules\"\n    ],\n    \"compileOnSave\": false\n}\n"
        },
        {
          "name": "tsd.json",
          "type": "blob",
          "size": 1.853515625,
          "content": "{\n  \"version\": \"v4\",\n  \"repo\": \"DefinitelyTyped/DefinitelyTyped\",\n  \"ref\": \"master\",\n  \"path\": \"tools/typings/tsd\",\n  \"bundle\": \"tools/typings/tsd/tsd.d.ts\",\n  \"installed\": {\n    \"systemjs/systemjs.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"gulp/gulp.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"q/Q.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"orchestrator/orchestrator.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"gulp-shell/gulp-shell.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"mime/mime.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"express/express.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"serve-static/serve-static.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"del/del.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"glob/glob.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"minimatch/minimatch.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"async/async.d.ts\": {\n      \"commit\": \"5c3e47967affa3c4128a3875d1664ba206ae1b0f\"\n    },\n    \"es6-promise/es6-promise.d.ts\": {\n      \"commit\": \"923c5431d9447db9d5cf41adc5914e3c94c1ff10\"\n    },\n    \"node/node.d.ts\": {\n      \"commit\": \"5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff\"\n    },\n    \"gulp-util/gulp-util.d.ts\": {\n      \"commit\": \"5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff\"\n    },\n    \"vinyl/vinyl.d.ts\": {\n      \"commit\": \"5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff\"\n    },\n    \"through2/through2.d.ts\": {\n      \"commit\": \"5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff\"\n    },\n    \"chalk/chalk.d.ts\": {\n      \"commit\": \"5a8fc5ee71701431e4fdbb80c506e3c13f85a9ff\"\n    }\n  }\n}\n"
        },
        {
          "name": "tsdrc",
          "type": "blob",
          "size": 0.0263671875,
          "content": "{\n    \"strictSSL\": false\n}\n"
        },
        {
          "name": "tslint.json",
          "type": "blob",
          "size": 0.8447265625,
          "content": "{\n  \"rules\": {\n    \"class-name\": true,\n    \"curly\": false,\n    \"eofline\": true,\n    \"indent\": \"spaces\",\n    \"max-line-length\": [true, 140],\n    \"member-ordering\": [true,\n      \"public-before-private\",\n      \"static-before-instance\",\n      \"variables-before-functions\"\n    ],\n    \"no-arg\": true,\n    \"no-construct\": true,\n    \"no-duplicate-key\": true,\n    \"no-duplicate-variable\": true,\n    \"no-empty\": true,\n    \"no-eval\": true,\n    \"no-trailing-comma\": true,\n    \"no-trailing-whitespace\": true,\n    \"no-unused-expression\": true,\n    \"no-unused-variable\": true,\n    \"no-unreachable\": true,\n    \"no-use-before-declare\": true,\n    \"one-line\": [true,\n      \"check-open-brace\",\n      \"check-catch\",\n      \"check-else\",\n      \"check-whitespace\"\n    ],\n    \"quotemark\": [true, \"single\"],\n    \"semicolon\": true,\n    \"triple-equals\": true,\n    \"variable-name\": false\n  }\n}\n"
        }
      ]
    }
  ]
}