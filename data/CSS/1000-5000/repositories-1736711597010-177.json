{
  "metadata": {
    "timestamp": 1736711597010,
    "page": 177,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "FunctionClub/V2ray.Fun",
      "stars": 1996,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": ".vscode\n"
        },
        {
          "name": "1.png",
          "type": "blob",
          "size": 110.216796875,
          "content": null
        },
        {
          "name": "2.png",
          "type": "blob",
          "size": 98.92578125,
          "content": null
        },
        {
          "name": "Pipfile",
          "type": "blob",
          "size": 0.302734375,
          "content": "[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\n\n[dev-packages]\nyapf = \"*\"\nflake8 = \"*\"\n\n[packages]\nrequests = \">=2.20.0\"\nsix = \"==1.8.0\"\nurllib3 = \"==1.24.2\"\nFlask = \"==1.0.2\"\nFlask-BasicAuth = \"==0.2.0\"\nJinja2 = \"==2.10.1\"\npyOpenSSL = \"==18.0.0\"\n\n[requires]\npython_version = \"3.7\"\n"
        },
        {
          "name": "Pipfile.lock",
          "type": "blob",
          "size": 14.591796875,
          "content": "{\n    \"_meta\": {\n        \"hash\": {\n            \"sha256\": \"30630236163597a1f060b03bde64392fd1136d4bd90a71c3f72304699f24ab6d\"\n        },\n        \"pipfile-spec\": 6,\n        \"requires\": {\n            \"python_version\": \"3.7\"\n        },\n        \"sources\": [\n            {\n                \"name\": \"pypi\",\n                \"url\": \"https://pypi.org/simple\",\n                \"verify_ssl\": true\n            }\n        ]\n    },\n    \"default\": {\n        \"certifi\": {\n            \"hashes\": [\n                \"sha256:5930595817496dd21bb8dc35dad090f1c2cd0adfaf21204bf6732ca5d8ee34d3\",\n                \"sha256:8fc0819f1f30ba15bdb34cceffb9ef04d99f420f68eb75d901e9560b8749fc41\"\n            ],\n            \"version\": \"==2020.6.20\"\n        },\n        \"cffi\": {\n            \"hashes\": [\n                \"sha256:005f2bfe11b6745d726dbb07ace4d53f057de66e336ff92d61b8c7e9c8f4777d\",\n                \"sha256:09e96138280241bd355cd585148dec04dbbedb4f46128f340d696eaafc82dd7b\",\n                \"sha256:0b1ad452cc824665ddc682400b62c9e4f5b64736a2ba99110712fdee5f2505c4\",\n                \"sha256:0ef488305fdce2580c8b2708f22d7785ae222d9825d3094ab073e22e93dfe51f\",\n                \"sha256:15f351bed09897fbda218e4db5a3d5c06328862f6198d4fb385f3e14e19decb3\",\n                \"sha256:22399ff4870fb4c7ef19fff6eeb20a8bbf15571913c181c78cb361024d574579\",\n                \"sha256:23e5d2040367322824605bc29ae8ee9175200b92cb5483ac7d466927a9b3d537\",\n                \"sha256:2791f68edc5749024b4722500e86303a10d342527e1e3bcac47f35fbd25b764e\",\n                \"sha256:2f9674623ca39c9ebe38afa3da402e9326c245f0f5ceff0623dccdac15023e05\",\n                \"sha256:3363e77a6176afb8823b6e06db78c46dbc4c7813b00a41300a4873b6ba63b171\",\n                \"sha256:33c6cdc071ba5cd6d96769c8969a0531be2d08c2628a0143a10a7dcffa9719ca\",\n                \"sha256:3b8eaf915ddc0709779889c472e553f0d3e8b7bdf62dab764c8921b09bf94522\",\n                \"sha256:3cb3e1b9ec43256c4e0f8d2837267a70b0e1ca8c4f456685508ae6106b1f504c\",\n                \"sha256:3eeeb0405fd145e714f7633a5173318bd88d8bbfc3dd0a5751f8c4f70ae629bc\",\n                \"sha256:44f60519595eaca110f248e5017363d751b12782a6f2bd6a7041cba275215f5d\",\n                \"sha256:4d7c26bfc1ea9f92084a1d75e11999e97b62d63128bcc90c3624d07813c52808\",\n                \"sha256:529c4ed2e10437c205f38f3691a68be66c39197d01062618c55f74294a4a4828\",\n                \"sha256:6642f15ad963b5092d65aed022d033c77763515fdc07095208f15d3563003869\",\n                \"sha256:85ba797e1de5b48aa5a8427b6ba62cf69607c18c5d4eb747604b7302f1ec382d\",\n                \"sha256:8f0f1e499e4000c4c347a124fa6a27d37608ced4fe9f7d45070563b7c4c370c9\",\n                \"sha256:a624fae282e81ad2e4871bdb767e2c914d0539708c0f078b5b355258293c98b0\",\n                \"sha256:b0358e6fefc74a16f745afa366acc89f979040e0cbc4eec55ab26ad1f6a9bfbc\",\n                \"sha256:bbd2f4dfee1079f76943767fce837ade3087b578aeb9f69aec7857d5bf25db15\",\n                \"sha256:bf39a9e19ce7298f1bd6a9758fa99707e9e5b1ebe5e90f2c3913a47bc548747c\",\n                \"sha256:c11579638288e53fc94ad60022ff1b67865363e730ee41ad5e6f0a17188b327a\",\n                \"sha256:c150eaa3dadbb2b5339675b88d4573c1be3cb6f2c33a6c83387e10cc0bf05bd3\",\n                \"sha256:c53af463f4a40de78c58b8b2710ade243c81cbca641e34debf3396a9640d6ec1\",\n                \"sha256:cb763ceceae04803adcc4e2d80d611ef201c73da32d8f2722e9d0ab0c7f10768\",\n                \"sha256:cc75f58cdaf043fe6a7a6c04b3b5a0e694c6a9e24050967747251fb80d7bce0d\",\n                \"sha256:d80998ed59176e8cba74028762fbd9b9153b9afc71ea118e63bbf5d4d0f9552b\",\n                \"sha256:de31b5164d44ef4943db155b3e8e17929707cac1e5bd2f363e67a56e3af4af6e\",\n                \"sha256:e66399cf0fc07de4dce4f588fc25bfe84a6d1285cc544e67987d22663393926d\",\n                \"sha256:f0620511387790860b249b9241c2f13c3a80e21a73e0b861a2df24e9d6f56730\",\n                \"sha256:f4eae045e6ab2bb54ca279733fe4eb85f1effda392666308250714e01907f394\",\n                \"sha256:f92cdecb618e5fa4658aeb97d5eb3d2f47aa94ac6477c6daf0f306c5a3b9e6b1\",\n                \"sha256:f92f789e4f9241cd262ad7a555ca2c648a98178a953af117ef7fad46aa1d5591\"\n            ],\n            \"version\": \"==1.14.3\"\n        },\n        \"chardet\": {\n            \"hashes\": [\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n            ],\n            \"version\": \"==3.0.4\"\n        },\n        \"click\": {\n            \"hashes\": [\n                \"sha256:d2b5255c7c6349bc1bd1e59e08cd12acbbd63ce649f2588755783aa94dfb6b1a\",\n                \"sha256:dacca89f4bfadd5de3d7489b7c8a566eee0d3676333fbb50030263894c38c0dc\"\n            ],\n            \"version\": \"==7.1.2\"\n        },\n        \"cryptography\": {\n            \"hashes\": [\n                \"sha256:07ca431b788249af92764e3be9a488aa1d39a0bc3be313d826bbec690417e538\",\n                \"sha256:13b88a0bd044b4eae1ef40e265d006e34dbcde0c2f1e15eb9896501b2d8f6c6f\",\n                \"sha256:32434673d8505b42c0de4de86da8c1620651abd24afe91ae0335597683ed1b77\",\n                \"sha256:3cd75a683b15576cfc822c7c5742b3276e50b21a06672dc3a800a2d5da4ecd1b\",\n                \"sha256:4e7268a0ca14536fecfdf2b00297d4e407da904718658c1ff1961c713f90fd33\",\n                \"sha256:545a8550782dda68f8cdc75a6e3bf252017aa8f75f19f5a9ca940772fc0cb56e\",\n                \"sha256:55d0b896631412b6f0c7de56e12eb3e261ac347fbaa5d5e705291a9016e5f8cb\",\n                \"sha256:5849d59358547bf789ee7e0d7a9036b2d29e9a4ddf1ce5e06bb45634f995c53e\",\n                \"sha256:6dc59630ecce8c1f558277ceb212c751d6730bd12c80ea96b4ac65637c4f55e7\",\n                \"sha256:7117319b44ed1842c617d0a452383a5a052ec6aa726dfbaffa8b94c910444297\",\n                \"sha256:75e8e6684cf0034f6bf2a97095cb95f81537b12b36a8fedf06e73050bb171c2d\",\n                \"sha256:7b8d9d8d3a9bd240f453342981f765346c87ade811519f98664519696f8e6ab7\",\n                \"sha256:a035a10686532b0587d58a606004aa20ad895c60c4d029afa245802347fab57b\",\n                \"sha256:a4e27ed0b2504195f855b52052eadcc9795c59909c9d84314c5408687f933fc7\",\n                \"sha256:a733671100cd26d816eed39507e585c156e4498293a907029969234e5e634bc4\",\n                \"sha256:a75f306a16d9f9afebfbedc41c8c2351d8e61e818ba6b4c40815e2b5740bb6b8\",\n                \"sha256:bd717aa029217b8ef94a7d21632a3bb5a4e7218a4513d2521c2a2fd63011e98b\",\n                \"sha256:d25cecbac20713a7c3bc544372d42d8eafa89799f492a43b79e1dfd650484851\",\n                \"sha256:d26a2557d8f9122f9bf445fc7034242f4375bd4e95ecda007667540270965b13\",\n                \"sha256:d3545829ab42a66b84a9aaabf216a4dce7f16dbc76eb69be5c302ed6b8f4a29b\",\n                \"sha256:d3d5e10be0cf2a12214ddee45c6bd203dab435e3d83b4560c03066eda600bfe3\",\n                \"sha256:efe15aca4f64f3a7ea0c09c87826490e50ed166ce67368a68f315ea0807a20df\"\n            ],\n            \"version\": \"==3.2.1\"\n        },\n        \"flask\": {\n            \"hashes\": [\n                \"sha256:2271c0070dbcb5275fad4a82e29f23ab92682dc45f9dfbc22c02ba9b9322ce48\",\n                \"sha256:a080b744b7e345ccfcbc77954861cb05b3c63786e93f2b3875e0913d44b43f05\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.0.2\"\n        },\n        \"flask-basicauth\": {\n            \"hashes\": [\n                \"sha256:df5ebd489dc0914c224419da059d991eb72988a01cdd4b956d52932ce7d501ff\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.2.0\"\n        },\n        \"idna\": {\n            \"hashes\": [\n                \"sha256:c357b3f628cf53ae2c4c05627ecc484553142ca23264e593d327bcde5e9c3407\",\n                \"sha256:ea8b7f6188e6fa117537c3df7da9fc686d485087abf6ac197f9c46432f7e4a3c\"\n            ],\n            \"version\": \"==2.8\"\n        },\n        \"itsdangerous\": {\n            \"hashes\": [\n                \"sha256:321b033d07f2a4136d3ec762eac9f16a10ccd60f53c0c91af90217ace7ba1f19\",\n                \"sha256:b12271b2047cb23eeb98c8b5622e2e5c5e9abd9784a153e9d8ef9cb4dd09d749\"\n            ],\n            \"version\": \"==1.1.0\"\n        },\n        \"jinja2\": {\n            \"hashes\": [\n                \"sha256:065c4f02ebe7f7cf559e49ee5a95fb800a9e4528727aec6f24402a5374c65013\",\n                \"sha256:14dd6caf1527abb21f08f86c784eac40853ba93edb79552aa1e4b8aef1b61c7b\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.10.1\"\n        },\n        \"markupsafe\": {\n            \"hashes\": [\n                \"sha256:00bc623926325b26bb9605ae9eae8a215691f33cae5df11ca5424f06f2d1f473\",\n                \"sha256:09027a7803a62ca78792ad89403b1b7a73a01c8cb65909cd876f7fcebd79b161\",\n                \"sha256:09c4b7f37d6c648cb13f9230d847adf22f8171b1ccc4d5682398e77f40309235\",\n                \"sha256:1027c282dad077d0bae18be6794e6b6b8c91d58ed8a8d89a89d59693b9131db5\",\n                \"sha256:13d3144e1e340870b25e7b10b98d779608c02016d5184cfb9927a9f10c689f42\",\n                \"sha256:24982cc2533820871eba85ba648cd53d8623687ff11cbb805be4ff7b4c971aff\",\n                \"sha256:29872e92839765e546828bb7754a68c418d927cd064fd4708fab9fe9c8bb116b\",\n                \"sha256:43a55c2930bbc139570ac2452adf3d70cdbb3cfe5912c71cdce1c2c6bbd9c5d1\",\n                \"sha256:46c99d2de99945ec5cb54f23c8cd5689f6d7177305ebff350a58ce5f8de1669e\",\n                \"sha256:500d4957e52ddc3351cabf489e79c91c17f6e0899158447047588650b5e69183\",\n                \"sha256:535f6fc4d397c1563d08b88e485c3496cf5784e927af890fb3c3aac7f933ec66\",\n                \"sha256:596510de112c685489095da617b5bcbbac7dd6384aeebeda4df6025d0256a81b\",\n                \"sha256:62fe6c95e3ec8a7fad637b7f3d372c15ec1caa01ab47926cfdf7a75b40e0eac1\",\n                \"sha256:6788b695d50a51edb699cb55e35487e430fa21f1ed838122d722e0ff0ac5ba15\",\n                \"sha256:6dd73240d2af64df90aa7c4e7481e23825ea70af4b4922f8ede5b9e35f78a3b1\",\n                \"sha256:717ba8fe3ae9cc0006d7c451f0bb265ee07739daf76355d06366154ee68d221e\",\n                \"sha256:79855e1c5b8da654cf486b830bd42c06e8780cea587384cf6545b7d9ac013a0b\",\n                \"sha256:7c1699dfe0cf8ff607dbdcc1e9b9af1755371f92a68f706051cc8c37d447c905\",\n                \"sha256:88e5fcfb52ee7b911e8bb6d6aa2fd21fbecc674eadd44118a9cc3863f938e735\",\n                \"sha256:8defac2f2ccd6805ebf65f5eeb132adcf2ab57aa11fdf4c0dd5169a004710e7d\",\n                \"sha256:98c7086708b163d425c67c7a91bad6e466bb99d797aa64f965e9d25c12111a5e\",\n                \"sha256:9add70b36c5666a2ed02b43b335fe19002ee5235efd4b8a89bfcf9005bebac0d\",\n                \"sha256:9bf40443012702a1d2070043cb6291650a0841ece432556f784f004937f0f32c\",\n                \"sha256:ade5e387d2ad0d7ebf59146cc00c8044acbd863725f887353a10df825fc8ae21\",\n                \"sha256:b00c1de48212e4cc9603895652c5c410df699856a2853135b3967591e4beebc2\",\n                \"sha256:b1282f8c00509d99fef04d8ba936b156d419be841854fe901d8ae224c59f0be5\",\n                \"sha256:b2051432115498d3562c084a49bba65d97cf251f5a331c64a12ee7e04dacc51b\",\n                \"sha256:ba59edeaa2fc6114428f1637ffff42da1e311e29382d81b339c1817d37ec93c6\",\n                \"sha256:c8716a48d94b06bb3b2524c2b77e055fb313aeb4ea620c8dd03a105574ba704f\",\n                \"sha256:cd5df75523866410809ca100dc9681e301e3c27567cf498077e8551b6d20e42f\",\n                \"sha256:cdb132fc825c38e1aeec2c8aa9338310d29d337bebbd7baa06889d09a60a1fa2\",\n                \"sha256:e249096428b3ae81b08327a63a485ad0878de3fb939049038579ac0ef61e17e7\",\n                \"sha256:e8313f01ba26fbbe36c7be1966a7b7424942f670f38e666995b88d012765b9be\"\n            ],\n            \"version\": \"==1.1.1\"\n        },\n        \"pycparser\": {\n            \"hashes\": [\n                \"sha256:2d475327684562c3a96cc71adf7dc8c4f0565175cf86b6d7a404ff4c771f15f0\",\n                \"sha256:7582ad22678f0fcd81102833f60ef8d0e57288b6b5fb00323d101be910e35705\"\n            ],\n            \"version\": \"==2.20\"\n        },\n        \"pyopenssl\": {\n            \"hashes\": [\n                \"sha256:26ff56a6b5ecaf3a2a59f132681e2a80afcc76b4f902f612f518f92c2a1bf854\",\n                \"sha256:6488f1423b00f73b7ad5167885312bb0ce410d3312eb212393795b53c8caa580\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==18.0.0\"\n        },\n        \"requests\": {\n            \"hashes\": [\n                \"sha256:11e007a8a2aa0323f5a921e9e6a2d7e4e67d9877e85773fba9ba6419025cbeb4\",\n                \"sha256:9cf5292fcd0f598c671cfc1e0d7d1a7f13bb8085e9a590f48c010551dc6c4b31\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==2.22.0\"\n        },\n        \"six\": {\n            \"hashes\": [\n                \"sha256:047bbbba41bac37c444c75ddfdf0573dd6e2f1fbd824e6247bb26fa7d8fa3830\",\n                \"sha256:facfe0c7cceafd49e8f7e472111294566605fdfddc23011da06cc3a4601c9f7d\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.8.0\"\n        },\n        \"urllib3\": {\n            \"hashes\": [\n                \"sha256:4c291ca23bbb55c76518905869ef34bdd5f0e46af7afe6861e8375643ffee1a0\",\n                \"sha256:9a247273df709c4fedb38c711e44292304f73f39ab01beda9f6b9fc375669ac3\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==1.24.2\"\n        },\n        \"werkzeug\": {\n            \"hashes\": [\n                \"sha256:2de2a5db0baeae7b2d2664949077c2ac63fbd16d98da0ff71837f7d1dea3fd43\",\n                \"sha256:6c80b1e5ad3665290ea39320b91e1be1e0d5f60652b964a3070216de83d2e47c\"\n            ],\n            \"version\": \"==1.0.1\"\n        }\n    },\n    \"develop\": {\n        \"entrypoints\": {\n            \"hashes\": [\n                \"sha256:589f874b313739ad35be6e0cd7efde2a4e9b6fea91edcc34e58ecbb8dbe56d19\",\n                \"sha256:c70dd71abe5a8c85e55e12c19bd91ccfeec11a6e99044204511f9ed547d48451\"\n            ],\n            \"version\": \"==0.3\"\n        },\n        \"flake8\": {\n            \"hashes\": [\n                \"sha256:19241c1cbc971b9962473e4438a2ca19749a7dd002dd1a946eaba171b4114548\",\n                \"sha256:8e9dfa3cecb2400b3738a42c54c3043e821682b9c840b0448c0503f781130696\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==3.7.8\"\n        },\n        \"mccabe\": {\n            \"hashes\": [\n                \"sha256:ab8a6258860da4b6677da4bd2fe5dc2c659cff31b3ee4f7f5d64e79735b80d42\",\n                \"sha256:dd8d182285a0fe56bace7f45b5e7d1a6ebcbf524e8f3bd87eb0f125271b8831f\"\n            ],\n            \"version\": \"==0.6.1\"\n        },\n        \"pycodestyle\": {\n            \"hashes\": [\n                \"sha256:95a2219d12372f05704562a14ec30bc76b05a5b297b21a5dfe3f6fac3491ae56\",\n                \"sha256:e40a936c9a450ad81df37f549d676d127b1b66000a6c500caa2b085bc0ca976c\"\n            ],\n            \"version\": \"==2.5.0\"\n        },\n        \"pyflakes\": {\n            \"hashes\": [\n                \"sha256:17dbeb2e3f4d772725c777fabc446d5634d1038f234e77343108ce445ea69ce0\",\n                \"sha256:d976835886f8c5b31d47970ed689944a0262b5f3afa00a5a7b4dc81e5449f8a2\"\n            ],\n            \"version\": \"==2.1.1\"\n        },\n        \"yapf\": {\n            \"hashes\": [\n                \"sha256:02ace10a00fa2e36c7ebd1df2ead91dbfbd7989686dc4ccbdc549e95d19f5780\",\n                \"sha256:6f94b6a176a7c114cfa6bad86d40f259bbe0f10cf2fa7f2f4b3596fc5802a41b\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==0.28.0\"\n        }\n    }\n}\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.4794921875,
          "content": "![logo.png](logo.png)\n\n## 简介\n\n一个基于 Web 的 V2ray 控制面板\n\n![1.png](1.png)\n\n![2.png](2.png)\n\n## 系统支持\n\n**请务必使用新系统，纯净的VPS系统安装!!!**\n\n- Debian 8 \n- **Debian 9(推荐)**\n- Ubuntu 14\n- Ubuntu 16\n- CentOS 7\n\n## 不支持\n- CentOS 6\n\n## 一键安装\n\n目前处于测试阶段，不保证一键脚本能安装成功\n> wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/V2ray.Fun/master/install.sh && bash install.sh\n\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 6.712890625,
          "content": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport os\n\nfrom flask import Flask, render_template, request\nfrom flask_basicauth import BasicAuth\n\nfrom config_generator import *  # noqa\n\nwith open(\"panel.config\") as f:\n    panel_config = json.load(f)\n\napp = Flask(__name__, static_url_path='/static')\n\napp.config['BASIC_AUTH_USERNAME'] = panel_config['username']\napp.config['BASIC_AUTH_PASSWORD'] = panel_config['password']\napp.config['BASIC_AUTH_FORCE'] = True\nbasic_auth = BasicAuth(app)\n\n\ndef change_config(config, value):\n    with open(\"v2ray.config\") as f:\n        old_json = json.load(f)\n\n    old_json[str(config)] = str(value)\n\n    with open(\"v2ray.config\", \"w\") as f:\n        json.dump(old_json, f, indent=2)\n\n\ndef get_status():\n    cmd = \"\"\"ps -ef | grep \"v2ray\" | grep -v grep | awk '{print $2}'\"\"\"\n    output = commands.getoutput(cmd)\n    if output == \"\":\n        return \"off\"\n    else:\n        return \"on\"\n\n\n@app.route('/start_service')\ndef start_service():\n    cmd = \"service v2ray start\"\n    commands.getoutput(cmd)\n    change_config(\"status\", \"on\")\n    return \"OK\"\n\n\n@app.route('/stop_service')\ndef stop_service():\n    cmd = \"service v2ray stop\"\n    commands.getoutput(cmd)\n    change_config(\"status\", \"off\")\n    return \"OK\"\n\n\n@app.route('/restart_service')\ndef restart_service():\n    cmd = \"service v2ray restart\"\n    commands.getoutput(cmd)\n    change_config(\"status\", \"on\")\n    return \"OK\"\n\n\n@app.route('/set_protocol', methods=['GET', 'POST'])\ndef set_protocol():\n    items = request.args.to_dict()\n    if items['protocol'] == \"1\":\n        change_config('protocol', 'vmess')\n    elif items['protocol'] == \"2\":\n        change_config('protocol', 'mtproto')\n    gen_server()\n    gen_client()\n    return \"OK\"\n\n\n@app.route('/set_secret', methods=['GET', 'POST'])\ndef set_secret():\n    items = request.args.to_dict()\n    change_config('secret', items['secret'])\n    return \"OK\"\n\n\n@app.route('/set_uuid', methods=['GET', 'POST'])\ndef set_uuid():\n    items = request.args.to_dict()\n    change_config(\"uuid\", items['setuuid'])\n    gen_server()\n    gen_client()\n    restart_service()\n    return \"OK\"\n\n\n@app.route('/set_tls', methods=['GET', 'POST'])\ndef set_tls():\n    items = request.args.to_dict()\n    if (items['action'] == \"off\"):\n        change_config('tls', 'off')\n        change_config('domain', 'none')\n    else:\n        change_config(\"tls\", \"on\")\n        change_config(\"domain\", items['domain'])\n    gen_server()\n    gen_client()\n    restart_service()\n\n    return \"OK\"\n\n\n@app.route('/set_mux', methods=['GET', 'POST'])\ndef set_mux():\n    items = request.args.to_dict()\n    change_config(\"mux\", items['action'])\n    gen_client()\n    return \"OK\"\n\n\n@app.route('/set_port', methods=['GET', 'POST'])\ndef set_port():\n    items = request.args.to_dict()\n    change_config(\"port\", items['setport'])\n    gen_server()\n    gen_client()\n    restart_service()\n    open_port(items['setport'])\n    return \"OK\"\n\n\n@app.route('/set_encrypt', methods=['GET', 'POST'])\ndef set_encrypt():\n    items = request.args.to_dict()\n    encrypt = str(items['encrypt'])\n    if encrypt == \"1\":\n        change_config(\"encrypt\", \"auto\")\n    elif encrypt == \"2\":\n        change_config(\"encrypt\", \"aes-128-cfb\")\n    elif encrypt == \"3\":\n        change_config(\"encrypt\", \"aes-128-gcm\")\n    elif encrypt == \"4\":\n        change_config(\"encrypt\", \"chacha20-poly1305\")\n    else:\n        change_config(\"encrypt\", \"none\")\n\n    gen_server()\n    gen_client()\n    restart_service()\n\n    return \"OK\"\n\n\n@app.route('/set_trans', methods=['GET', 'POST'])\ndef set_trans():\n    items = request.args.to_dict()\n    trans = str(items['trans'])\n    if trans == \"1\":\n        change_config(\"trans\", \"tcp\")\n        change_config(\"domain\", \"none\")\n    elif trans == \"2\":\n        change_config(\"trans\", \"websocket\")\n        change_config(\"domain\", items['domain'])\n    elif trans == \"3\":\n        change_config(\"trans\", \"mkcp\")\n        change_config(\"domain\", \"none\")\n    elif trans == \"4\":\n        change_config(\"trans\", \"mkcp-srtp\")\n        change_config(\"domain\", \"none\")\n    elif trans == \"5\":\n        change_config(\"trans\", \"mkcp-utp\")\n        change_config(\"domain\", \"none\")\n    else:\n        change_config(\"trans\", \"mkcp-wechat\")\n        change_config(\"domain\", \"none\")\n\n    gen_server()\n    gen_client()\n    restart_service()\n\n    return \"OK\"\n\n\n@app.route('/')\n@app.route('/index.html')\ndef index_page():\n    return render_template(\"index.html\")\n\n\n@app.route('/app.html')\ndef app_page():\n    return render_template(\"app.html\")\n\n\n@app.route('/log.html')\ndef log_page():\n    return render_template(\"log.html\")\n\n\n@app.route('/config.html')\ndef config_page():\n    return render_template(\"config.html\")\n\n\n@app.route('/get_info')\ndef get_info():\n    with open(\"v2ray.config\") as v2ray_config:\n        json_content = json.load(v2ray_config)\n        if (json_content['domain'] != \"none\"):\n            json_content['ip'] = json_content['domain']\n\n        json_content['status'] = get_status()\n        json_dump = json.dumps(json_content)\n\n    return json_dump\n\n\n@app.route('/get_access_log')\ndef get_access_log():\n    with open('/var/log/v2ray/access.log') as f:\n        content = f.read().split(\"\\n\")\n        min_length = min(20, len(content))\n        content = content[-min_length:]\n        string = \"\"\n        for i in range(min_length):\n            string = string + content[i] + \"<br>\"\n    return string\n\n\n@app.route('/get_error_log')\ndef get_error_log():\n    with open('/var/log/v2ray/error.log') as f:\n        content = f.read().split(\"\\n\")\n        min_length = min(20, len(content))\n        content = content[-min_length:]\n        string = \"\"\n        for i in range(min_length):\n            string = string + content[i] + \"<br>\"\n    return string\n\n\n@app.route('/gen_ssl', methods=['GET', 'POST'])\ndef gen_ssl():\n    items = request.args.to_dict()\n    domain = str(items['domain'])\n\n    stop_service()\n    cmd = \"bash /root/.acme.sh/acme.sh  --issue -d {0} --standalone\".format(\n        domain)\n    check_acme = \"\"\"ps -ef | grep \"acme.sh\" | grep -v grep | awk '{print $2}'\"\"\"\n    commands.getoutput(cmd)\n    acme_status = commands.getoutput(check_acme)\n    while acme_status != \"\":\n        acme_status = commands.getoutput(check_acme)\n\n    result = os.path.exists(\"/root/.acme.sh/{0}/fullchain.cer\".format(domain))\n    start_service()\n    if result is True:\n        return \"True\"\n    else:\n        return \"False\"\n\n\nwith open(\"v2ray.config\") as f:\n    data = json.load(f)\n\nif data['tls'] == \"on\" and panel_config['use_ssl'] == \"on\":\n    key_file = \"/root/.acme.sh/{0}/{0}.key\".format(data['domain'],\n                                                   data['domain'])\n    crt_file = \"/root/.acme.sh/{0}/fullchain.cer\".format(data['domain'])\n    app.run(host='0.0.0.0',\n            port=panel_config['port'],\n            ssl_context=(crt_file, key_file))\nelse:\n    app.run(host='0.0.0.0', port=panel_config['port'])\n"
        },
        {
          "name": "config_generator.py",
          "type": "blob",
          "size": 10.794921875,
          "content": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport commands\nimport json\n\nimport requests\nfrom requests.exceptions import ConnectTimeout\n\n\ndef getip():\n    try:\n        resp = requests.get(\"http://httpbin.org/ip\", timeout=5).json()\n        ip = resp.get(\"origin\").split(\", \")[0]\n    except ConnectTimeout:\n        import socket\n        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:\n            s.connect((\"8.8.8.8\", 80))\n            ip = s.getsockname()[0]\n    return str(ip)\n\n\ndef open_port(port):\n    cmd = [\n        \"iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $1 -j ACCEPT\",\n        \"iptables -I INPUT -m state --state NEW -m udp -p udp --dport $1 -j ACCEPT\",\n        \"ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport $1 -j ACCEPT\",\n        \"ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport $1 -j ACCEPT\"\n    ]\n\n    for x in cmd:\n        x = x.replace(\"$1\", str(port))\n        commands.getoutput(x)\n\n\ndef gen_server():\n    with open(\"/usr/local/V2ray.Fun/v2ray.config\") as f:\n        data = json.load(f)\n\n    server_websocket = json.loads(\"\"\"\n    {\n  \"path\": \"\",\n  \"headers\": {\n    \"Host\": \"\"\n  }\n}\n    \"\"\")\n\n    server_mkcp = json.loads(\"\"\"\n    {\n        \"uplinkCapacity\": 20,\n        \"downlinkCapacity\": 100,\n        \"readBufferSize\": 2,\n        \"mtu\": 1350,\n        \"header\": {\n          \"request\": null,\n          \"type\": \"none\",\n          \"response\": null\n        },\n        \"tti\": 50,\n        \"congestion\": false,\n        \"writeBufferSize\": 2\n      }\n    \"\"\")\n\n    server_tls = json.loads(\"\"\"\n    {\n                \"certificates\": [\n                    {\n                        \"certificateFile\": \"/path/to/example.domain/fullchain.cer\",\n                        \"keyFile\": \"/path/to/example.domain.key\"\n                    }\n                ]\n            }\n    \"\"\")\n\n    server_raw = \"\"\"\n{\n    \"log\": {\n        \"access\": \"/var/log/v2ray/access.log\",\n        \"error\": \"/var/log/v2ray/error.log\",\n        \"loglevel\": \"info\"\n    },\n    \"inbound\": {\n        \"port\": 39885,\n        \"protocol\": \"vmess\",\n        \"settings\": {\n            \"clients\": [\n                {\n                    \"id\": \"475161c6-837c-4318-a6bd-e7d414697de5\",\n                    \"level\": 1,\n                    \"alterId\": 100\n                }\n            ]\n        },\n        \"streamSettings\": {\n            \"network\": \"ws\"\n        }\n    },\n    \"outbound\": {\n        \"protocol\": \"freedom\",\n        \"settings\": {}\n    },\n    \"outboundDetour\": [\n        {\n            \"protocol\": \"blackhole\",\n            \"settings\": {},\n            \"tag\": \"blocked\"\n        }\n    ],\n    \"routing\": {\n        \"strategy\": \"rules\",\n        \"settings\": {\n            \"rules\": [\n                {\n                    \"type\": \"field\",\n                    \"ip\": [\n                        \"0.0.0.0/8\",\n                        \"10.0.0.0/8\",\n                        \"100.64.0.0/10\",\n                        \"127.0.0.0/8\",\n                        \"169.254.0.0/16\",\n                        \"172.16.0.0/12\",\n                        \"192.0.0.0/24\",\n                        \"192.0.2.0/24\",\n                        \"192.168.0.0/16\",\n                        \"198.18.0.0/15\",\n                        \"198.51.100.0/24\",\n                        \"203.0.113.0/24\",\n                        \"::1/128\",\n                        \"fc00::/7\",\n                        \"fe80::/10\"\n                    ],\n                    \"outboundTag\": \"blocked\"\n                }\n            ]\n        }\n    }\n}\n    \"\"\"\n    server = json.loads(server_raw)\n    if data['protocol'] == \"vmess\":\n        server['inbound']['port'] = int(data['port'])\n        server['inbound']['settings']['clients'][0]['id'] = data['uuid']\n        server['inbound']['settings']['clients'][0]['security'] = data[\n            'encrypt']\n\n    elif data['protocol'] == \"mtproto\":\n        \"\"\" MTProto don't needs client config, just use Telegram\"\"\"\n        server['inbound']['port'] = int(data['port'])\n        server['inbound']['protocol'] = \"mtproto\"\n        server['inbound']['settings'] = dict()\n        server['inbound']['settings']['users'] = list()\n        server['inbound']['settings']['users'].append(\n            {'secret': data['secret']})\n        server['inbound']['tag'] = \"tg-in\"\n\n        server['outbound']['protocol'] = \"mtproto\"\n        server['outbound']['tag'] = \"tg-out\"\n\n        server['routing']['settings']['rules'].append({\n            \"type\": \"field\",\n            \"inboundTag\": [\"tg-in\"],\n            \"outboundTag\": \"tg-out\"\n        })\n\n    if data['trans'] == \"tcp\":\n        server['inbound']['streamSettings'] = dict()\n        server['inbound']['streamSettings']['network'] = \"tcp\"\n\n    elif data['trans'].startswith(\"mkcp\"):\n        server['inbound']['streamSettings'] = dict()\n        server['inbound']['streamSettings']['network'] = \"kcp\"\n        server['inbound']['streamSettings']['kcpSettings'] = server_mkcp\n\n        if data['trans'] == \"mkcp-srtp\":\n            server['inbound']['streamSettings']['kcpSettings']['header'][\n                'type'] = \"srtp\"\n        elif data['trans'] == \"mkcp-utp\":\n            server['inbound']['streamSettings']['kcpSettings']['header'][\n                'type'] = \"utp\"\n        elif data['trans'] == \"mkcp-wechat\":\n            server['inbound']['streamSettings']['kcpSettings']['header'][\n                'type'] = \"wechat-video\"\n\n    elif data['trans'] == \"websocket\":\n        server['inbound']['streamSettings'] = dict()\n        server['inbound']['streamSettings']['network'] = \"ws\"\n        server['inbound']['streamSettings']['wsSettings'] = server_websocket\n        server['inbound']['streamSettings']['wsSettings']['headers'][\n            'Host'] = data['domain']\n\n    if data['tls'] == \"on\":\n        server['inbound']['streamSettings']['security'] = \"tls\"\n        server_tls['certificates'][0][\n            'certificateFile'] = \"/root/.acme.sh/{0}/fullchain.cer\".format(\n                data['domain'])\n        server_tls['certificates'][0][\n            'keyFile'] = \"/root/.acme.sh/{0}/{0}.key\".format(\n                data['domain'], data['domain'])\n        server['inbound']['streamSettings']['tlsSettings'] = server_tls\n\n    with open(\"/etc/v2ray/config.json\", \"w\") as f:\n        f.write(json.dumps(server, indent=2))\n\n\ndef gen_client():\n    client_raw = \"\"\"\n    {\n    \"log\": {\n        \"error\": \"error.log\",\n        \"loglevel\": \"info\"\n    },\n    \"inbound\": {\n        \"port\": 1080,\n        \"listen\": \"127.0.0.1\",\n        \"protocol\": \"socks\",\n        \"settings\": {\n            \"auth\": \"noauth\",\n            \"ip\": \"127.0.0.1\"\n        }\n    },\n    \"outbound\": {\n        \"protocol\": \"vmess\",\n        \"settings\": {\n            \"vnext\": [\n                {\n                    \"address\": \"\",\n                    \"port\": 39885,\n                    \"users\": [\n                        {\n                            \"id\": \"475161c6-837c-4318-a6bd-e7d414697de5\",\n                            \"alterId\": 100,\n                            \"security\": \"auto\"\n                        }\n                    ]\n                }\n            ]\n        },\n        \"streamSettings\": {\n            \"network\": \"ws\"\n        },\n        \"mux\": {\n            \"enabled\": false\n        }\n    },\n    \"inboundDetour\": null,\n    \"outboundDetour\": [\n        {\n            \"protocol\": \"freedom\",\n            \"settings\": {},\n            \"tag\": \"direct\"\n        }\n    ],\n    \"dns\": {\n        \"servers\": [\n            \"8.8.8.8\",\n            \"8.8.4.4\",\n            \"localhost\"\n        ]\n    },\n    \"routing\": {\n        \"strategy\": \"rules\",\n        \"settings\": {\n            \"domainStrategy\": \"IPIfNonMatch\",\n            \"rules\": [\n                {\n                    \"type\": \"field\",\n                    \"ip\": [\n                        \"0.0.0.0/8\",\n                        \"10.0.0.0/8\",\n                        \"100.64.0.0/10\",\n                        \"127.0.0.0/8\",\n                        \"169.254.0.0/16\",\n                        \"172.16.0.0/12\",\n                        \"192.0.0.0/24\",\n                        \"192.0.2.0/24\",\n                        \"192.168.0.0/16\",\n                        \"198.18.0.0/15\",\n                        \"198.51.100.0/24\",\n                        \"203.0.113.0/24\",\n                        \"::1/128\",\n                        \"fc00::/7\",\n                        \"fe80::/10\",\n                        \"geoip:cn\"\n                    ],\n                    \"domain\": [\n                        \"geosite:cn\"\n                    ],\n                    \"outboundTag\": \"direct\"\n                },\n                {\n                    \"type\": \"chinasites\",\n                    \"outboundTag\": \"direct\"\n                },\n                {\n                    \"type\": \"chinaip\",\n                    \"outboundTag\": \"direct\"\n                }\n            ]\n        }\n    }\n}\n    \"\"\"\n\n    cLient_mkcp = json.loads(\"\"\"\n    {\n                \"mtu\": 1350,\n                \"tti\": 50,\n                \"uplinkCapacity\": 20,\n                \"downlinkCapacity\": 100,\n                \"congestion\": false,\n                \"readBufferSize\": 2,\n                \"writeBufferSize\": 2,\n                \"header\": {\n                    \"type\": \"none\"\n                }\n    }\n    \"\"\")\n\n    mux_enable = json.loads(\"\"\"\n    {\n            \"enabled\": true\n    }\n    \"\"\")\n\n    mux_disable = json.loads(\"\"\"\n    {\n            \"enabled\": false\n    }\n    \"\"\")\n\n    client = json.loads(client_raw)\n    with open(\"/usr/local/V2ray.Fun/v2ray.config\") as f:\n        data = json.load(f)\n\n    if data['mux'] == \"on\":\n        client['outbound']['mux']['enabled'] = True\n    elif data['mux'] == \"off\":\n        client['outbound']['mux']['enabled'] = False\n\n    if data['domain'] == \"none\":\n        client['outbound']['settings']['vnext'][0]['address'] = data['ip']\n    else:\n        client['outbound']['settings']['vnext'][0]['address'] = data['domain']\n\n    client['outbound']['settings']['vnext'][0]['port'] = int(data['port'])\n    client['outbound']['settings']['vnext'][0]['users'][0]['id'] = data['uuid']\n    client['outbound']['settings']['vnext'][0]['users'][0]['security'] = data[\n        'encrypt']\n\n    if data['trans'] == \"websocket\":\n        client['outbound']['streamSettings']['network'] = \"ws\"\n\n    elif data['trans'].startswith(\"mkcp\"):\n        if data['trans'] == \"mkcp-srtp\":\n            cLient_mkcp['header']['type'] = \"srtp\"\n        elif data['trans'] == \"mkcp-utp\":\n            cLient_mkcp['header']['type'] = \"utp\"\n        elif data['trans'] == \"mkcp-wechat\":\n            cLient_mkcp['header']['type'] = \"wechat-video\"\n\n        client['outbound']['streamSettings']['network'] = \"kcp\"\n        client['outbound']['streamSettings']['kcpSettings'] = cLient_mkcp\n\n    elif data['trans'] == \"tcp\":\n        client['outbound']['streamSettings']['network'] = \"tcp\"\n\n    if data['tls'] == \"on\":\n        client['outbound']['streamSettings']['security'] = \"tls\"\n\n    with open(\"/root/config.json\", \"w\") as f:\n        f.write(json.dumps(client, indent=2))\n\n    with open(\"/usr/local/V2ray.Fun/static/config.json\", \"w\") as f:\n        f.write(json.dumps(client, indent=2))\n"
        },
        {
          "name": "enable-debian9-rclocal.sh",
          "type": "blob",
          "size": 0.3984375,
          "content": "cat <<EOF >/etc/rc.local\n#!/bin/sh -e\n#\n# rc.local\n#\n# This script is executed at the end of each multiuser runlevel.\n# Make sure that the script will \"exit 0\" on success or any other\n# value on error.\n#\n# In order to enable or disable this script just change the execution\n# bits.\n#\n# By default this script does nothing.\nexit 0\nEOF\nchmod +x /etc/rc.local\nsystemctl start rc-local\nsystemctl status rc-local\n"
        },
        {
          "name": "init.py",
          "type": "blob",
          "size": 0.4716796875,
          "content": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport config_generator\nimport uuid\n\nwith open(\"/usr/local/V2ray.Fun/v2ray.config\") as f:\n    try:\n        data = json.load(f)\n    except ValueError:\n        data = {}\n\ndata['uuid'] = str(uuid.uuid4())\ndata['ip'] = config_generator.getip()\nconfig_generator.open_port(data['port'])\n\nwith open(\"/usr/local/V2ray.Fun/v2ray.config\", \"w\") as f:\n    json.dump(data, f)\n\nconfig_generator.gen_server()\nconfig_generator.gen_client()\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 5.0751953125,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#Check Root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\n#Check OS\nif [ -n \"$(grep 'Aliyun Linux release' /etc/issue)\" -o -e /etc/redhat-release ]; then\n  OS=CentOS\n  [ -n \"$(grep ' 7\\.' /etc/redhat-release)\" ] && CentOS_RHEL_version=7\n  [ -n \"$(grep ' 6\\.' /etc/redhat-release)\" -o -n \"$(grep 'Aliyun Linux release6 15' /etc/issue)\" ] && CentOS_RHEL_version=6\n  [ -n \"$(grep ' 5\\.' /etc/redhat-release)\" -o -n \"$(grep 'Aliyun Linux release5' /etc/issue)\" ] && CentOS_RHEL_version=5\nelif [ -n \"$(grep 'Amazon Linux AMI release' /etc/issue)\" -o -e /etc/system-release ]; then\n  OS=CentOS\n  CentOS_RHEL_version=6\nelif [ -n \"$(grep bian /etc/issue)\" -o \"$(lsb_release -is 2>/dev/null)\" == 'Debian' ]; then\n  OS=Debian\n  [ ! -e \"$(which lsb_release)\" ] && { apt-get -y update; apt-get -y install lsb-release; clear; }\n  Debian_version=$(lsb_release -sr | awk -F. '{print $1}')\nelif [ -n \"$(grep Deepin /etc/issue)\" -o \"$(lsb_release -is 2>/dev/null)\" == 'Deepin' ]; then\n  OS=Debian\n  [ ! -e \"$(which lsb_release)\" ] && { apt-get -y update; apt-get -y install lsb-release; clear; }\n  Debian_version=$(lsb_release -sr | awk -F. '{print $1}')\nelif [ -n \"$(grep Ubuntu /etc/issue)\" -o \"$(lsb_release -is 2>/dev/null)\" == 'Ubuntu' -o -n \"$(grep 'Linux Mint' /etc/issue)\" ]; then\n  OS=Ubuntu\n  [ ! -e \"$(which lsb_release)\" ] && { apt-get -y update; apt-get -y install lsb-release; clear; }\n  Ubuntu_version=$(lsb_release -sr | awk -F. '{print $1}')\n  [ -n \"$(grep 'Linux Mint 18' /etc/issue)\" ] && Ubuntu_version=16\nelse\n  echo \"${CFAILURE}Does not support this OS, Please contact the author! ${CEND}\"\n  kill -9 $$\nfi\n\n#Install Needed Packages\n\nif [ ${OS} == Ubuntu ] || [ ${OS} == Debian ];then\n\tapt-get update -y\n\tapt-get install wget curl socat git unzip python python-dev openssl libssl-dev ca-certificates supervisor -y\n\twget -O - \"https://bootstrap.pypa.io/get-pip.py\" | python\n\tpip install --upgrade pip\n\tpip install flask requests urllib3 Flask-BasicAuth Jinja2 requests six wheel\n\tpip install pyOpenSSL\nfi\n\nif [ ${OS} == CentOS ];then\n\tyum install epel-release -y\n\tyum install python-pip python-devel socat ca-certificates openssl unzip git curl crontabs wget -y\n\tpip install --upgrade pip\n\tpip install flask requests urllib3 Flask-BasicAuth supervisor Jinja2 requests six wheel\n\tpip install pyOpenSSL\nfi\n\nif [ ${Debian_version} == 9 ];then\n\twget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/V2ray.Fun/master/enable-debian9-rclocal.sh\n\tbash enable-debian9-rclocal.sh\n\trm enable-debian9-rclocal.sh\nfi\n\n#Install acme.sh\ncurl https://get.acme.sh | sh\n\n#Install V2ray\ncurl -L -s https://install.direct/go.sh | bash\n\n#Install V2ray.Fun\ncd /usr/local/\ngit clone https://github.com/FunctionClub/V2ray.Fun\n\n#Generate Default Configurations\ncd /usr/local/V2ray.Fun/ && python init.py\ncp /usr/local/V2ray.Fun/v2ray.py /usr/local/bin/v2ray\nchmod +x /usr/local/bin/v2ray\nchmod +x /usr/local/V2ray.Fun/start.sh\n\n#Start All services\nservice v2ray start\n\n#Configure Supervisor\nmkdir /etc/supervisor\nmkdir /etc/supervisor/conf.d\necho_supervisord_conf > /etc/supervisor/supervisord.conf\ncat>>/etc/supervisor/supervisord.conf<<EOF\n[include]\nfiles = /etc/supervisor/conf.d/*.ini\nEOF\ntouch /etc/supervisor/conf.d/v2ray.fun.ini\ncat>>/etc/supervisor/conf.d/v2ray.fun.ini<<EOF\n[program:v2ray.fun]\ncommand=/usr/local/V2ray.Fun/start.sh run\nstdout_logfile=/var/log/v2ray.fun\nautostart=true\nautorestart=true\nstartsecs=5\npriority=1\nstopasgroup=true\nkillasgroup=true\nEOF\n#Reload the supervisor after modifying the configuration\nsupervisorctl reload\n\nread -p \"请输入默认用户名[默认admin]： \" un\nread -p \"请输入默认登录密码[默认admin]： \" pw\nread -p \"请输入监听端口号[默认5000]： \" uport\nif [[ -z \"${uport}\" ]];then\n\tuport=\"5000\"\nelse\n\tif [[ \"$uport\" =~ ^(-?|\\+?)[0-9]+(\\.?[0-9]+)?$ ]];then\n\t\tif [[ $uport -ge \"65535\" || $uport -le 1 ]];then\n\t\t\techo \"端口范围取值[1,65535]，应用默认端口号5000\"\n\t\t\tunset uport\n\t\t\tuport=\"5000\"\n\t\telse\n\t\t\ttport=`netstat -anlt | awk '{print $4}' | sed -e '1,2d' | awk -F : '{print $NF}' | sort -n | uniq | grep \"$uport\"`\n\t\t\tif [[ ! -z ${tport} ]];then\n\t\t\t\techo \"端口号已存在！应用默认端口号5000\"\n\t\t\t\tunset uport\n\t\t\t\tuport=\"5000\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"请输入数字！应用默认端口号5000\"\n\t\tuport=\"5000\"\n\tfi\nfi\nif [[ -z \"${un}\" ]];then\n\tun=\"admin\"\nfi\nif [[ -z \"${pw}\" ]];then\n\tpw=\"admin\"\nfi\nsed -i \"s/%%username%%/${un}/g\" /usr/local/V2ray.Fun/panel.config\nsed -i \"s/%%passwd%%/${pw}/g\" /usr/local/V2ray.Fun/panel.config\nsed -i \"s/%%port%%/${uport}/g\" /usr/local/V2ray.Fun/panel.config\nchmod 777 /etc/v2ray/config.json\nsupervisord -c /etc/supervisor/supervisord.conf\necho \"supervisord -c /etc/supervisor/supervisord.conf\">>/etc/rc.local\nchmod +x /etc/rc.local\n\necho \"安装成功！\n\"\necho \"面板端口：${uport}\"\necho \"默认用户名：${un}\"\necho \"默认密码：${pw}\"\necho ''\necho \"输入 v2ray 并回车可以手动管理网页面板相关功能\"\n\n#清理垃圾文件\nrm -rf /root/config.json\nrm -rf /root/install-debian.sh\n"
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 10.5634765625,
          "content": null
        },
        {
          "name": "panel.config",
          "type": "blob",
          "size": 0.111328125,
          "content": "{\n    \"port\" : %%port%%,\n    \"username\" : \"%%username%%\",\n    \"password\" : \"%%passwd%%\",\n    \"use_ssl\" :  \"off\"\n}\n"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.125,
          "content": "Flask==1.0.2\nFlask-BasicAuth==0.2.0\nJinja2 ==2.10.1\npyOpenSSL==18.0.0\nrequests>=2.20.0\nsix==1.8.0\nurllib3==1.24.2\nwheel==0.24.0\n"
        },
        {
          "name": "start.sh",
          "type": "blob",
          "size": 0.2744140625,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#Check Root\n[ $(id -u) != \"0\" ] && { echo \"${CFAILURE}Error: You must be root to run this script${CEND}\"; exit 1; }\n\ncd /usr/local/V2ray.Fun\npython /usr/local/V2ray.Fun/app.py\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "v2ray.config",
          "type": "blob",
          "size": 0.265625,
          "content": "{\n  \"tls\": \"off\", \n  \"status\": \"on\", \n  \"domain\": \"none\", \n  \"encrypt\": \"auto\", \n  \"uuid\": \"9ce741b7-f27e-4d41-8510-a4994e8ee727\", \n  \"ip\": \"\", \n  \"mux\": \"on\", \n  \"secret\": \"44369f5382d51e6fcc4c254d1fc43820\", \n  \"protocol\": \"vmess\", \n  \"trans\": \"mkcp\", \n  \"port\": \"4617\"\n}"
        },
        {
          "name": "v2ray.py",
          "type": "blob",
          "size": 2.869140625,
          "content": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\nimport json\nimport os\nimport commands\n\n\ndef open_port(port):\n    cmd = [\n        \"iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport $1 -j ACCEPT\",\n        \"iptables -I INPUT -m state --state NEW -m udp -p udp --dport $1 -j ACCEPT\",\n        \"ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport $1 -j ACCEPT\",\n        \"ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport $1 -j ACCEPT\"\n    ]\n\n    for x in cmd:\n        x = x.replace(\"$1\", str(port))\n        commands.getoutput(x)\n\n\ndef start():\n    os.system(\"\"\"supervisorctl start v2ray.fun\"\"\")\n\n\ndef stop():\n    os.system(\"\"\"supervisorctl stop v2ray.fun\"\"\")\n\n\ndef write(data):\n    with open(\"/usr/local/V2ray.Fun/panel.config\", \"w\") as f:\n        json.dump(data, f, indent=2)\n\n\nif __name__ == '__main__':\n    with open(\"/usr/local/V2ray.Fun/panel.config\") as f:\n        data = json.load(f)\n\n    print(\"欢迎使用 V2ray.Fun 面板 ---- By 雨落无声\\n\")\n    print(\"当前面板用户名：\" + str(data['username']))\n    print(\"当前面板密码：\" + str(data['password']))\n    print(\"当前面板监听端口：\" + str(data['port']))\n    print(\"请输入数字选择功能：\\n\")\n    print(\"1. 启动面板\")\n    print(\"2. 停止面板\")\n    print(\"3. 重启面板\")\n    print(\"4. 设置面板用户名和密码\")\n    print(\"5. 设置面板SSL\")\n    print(\"6. 设置面板端口\")\n    choice = str(input(\"\\n请选择：\"))\n\n    if choice == \"1\":\n        start()\n        open_port(data['port'])\n        print(\"启动成功!\")\n\n    elif choice == \"2\":\n        stop()\n        print(\"停止成功！\")\n\n    elif choice == \"3\":\n        stop()\n        start()\n        open_port(data['port'])\n        print(\"重启成功!\")\n    elif choice == \"4\":\n        new_username = str(raw_input(\"请输入新的用户名：\"))\n        new_password = str(raw_input(\"请输入新的密码：\"))\n        data['username'] = new_username\n        data['password'] = new_password\n        write(data)\n        stop()\n        start()\n        print(\"用户名密码设置成功！\")\n    elif choice == \"5\":\n        print(\"提示：只有在面板开启 V2ray TLS 功能时，面板自身的SSL功能才会正常运行。\\n\")\n        print(\"1. 打开面板 SSL 功能\")\n        print(\"2. 关闭面板 SSL 功能\")\n        ssl_choice = str(input(\"请选择：\"))\n\n        if ssl_choice == \"1\":\n            data['use_ssl'] = \"on\"\n            write(data)\n            stop()\n            start()\n            print(\"面板SSL已开启！\")\n        else:\n            data['use_ssl'] = \"off\"\n            write(data)\n            stop()\n            start()\n            print(\"面板SSL已关闭！\")\n    elif choice == \"6\":\n        new_port = input(\"请输入新的面板端口：\")\n        data['port'] = int(new_port)\n        write(data)\n        stop()\n        start()\n        open_port(data['port'])\n        print(\"面板端口已修改！\")\n"
        }
      ]
    }
  ]
}