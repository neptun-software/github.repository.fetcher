{
  "metadata": {
    "timestamp": 1736711642889,
    "page": 272,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "csswizardry/csswizardry-grids",
      "stars": 1491,
      "defaultBranch": "master",
      "files": [
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.2626953125,
          "content": "* **1.0.0**     Initial release\n* **1.0.1**     Make base grid classes follow silencing rules\n* **1.1**       Use more robust, markup-based method for removing whitespace\n* **1.2**       Set `.grid__item` to be full-width by default\n* **1.3**       Offer switches for mobile-first and responsiveness\n* **1.4**       Add `.grid--rev` option to reverse grids’ display order\n* **1.5**       Add gutterless grids option\n* **1.5.1**     Use Sass’ nesting to keep things a tad DRYer\n* **1.6**       Add push and pull classes\n* **1.7**       Ability to define custom breakpoints\n* **1.7.1**     Add `!default` flags to library variables\n* **1.7.2**     Fix push and pull when using silent classes\n* **1.7.3**     DRY out silent relative positioning\n* **1.8**       Add grid centring class\n* **1.8.1**     Ensure `.grid--center` adopts `.grid` base styling.\n* **1.8.2**     Ensure `.grid__item`s in `.grid--center` have normal text-alignment restored\n* **1.9**       Allow users to use a non-markup fix for `inline-block` whitespace removal\n* **2.0.0**     Tighten up use of modifier (`--`) syntax.\n* **2.1.0**     Make distinction between right-aligning and reversing grids, provide a way to do both.\n* **2.2.0**     Drop `@extend`, add default flags, add gutter and vertical alignment modifiers\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.533203125,
          "content": "Copyright 2013 Harry Roberts\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\nhttp://apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4375,
          "content": "# csswizardry-grids\n\n**Simple, fluid, nestable, flexible, Sass-based, responsive grid system.**\n\n* Fully responsive\n* Mobile first\n* Infinitely nestable\n* Reversible/reorderable\n* With/without gutters\n* Endless possible combinations\n* Simple to understand, human-friendly classes\n* Option to keep classes out of your HTML\n* Robust\n* Simple\n* No `.clear` or `.last` classes\n* It just _works_\n\nPlease see [Responsive grid systems; a solution?](http://csswizardry.com/2013/02/responsive-grid-systems-a-solution/)\nfor a comprehensive overview of the principles of the grid system.\n\n## Demo\n\n* [csswizardry.github.com/csswizardry-grids](http://csswizardry.github.com/csswizardry-grids).\n* [Writeup](http://csswizardry.com/2013/02/introducing-csswizardry-grids/)\n\n## Setup\n\nSimply fill in/adjust the relevant variables.\n\n* `$responsive` is used to turn csswizardry-grids’ responsive features on and\n  off. csswizardry-grids is designed primarily for responsive builds but can\n  also be used on non-responsive projects just as easily. Setting this to false\n  will simply prevent Sass generating your `palm` etc modifiers.\n* `$gutter` controls how much space there is between columns.\n* `$mobile-first` controls whether you would like unclassed grid items to\n  _initially_ adopt `width:100%;. This means that you won’t need to add a class\n  to force a grid item to take up the full width of its container.\n* `$use-silent-classes` tells csswizardry-grids whether to go ahead and compile\n  solid, traditional classes (e.g. `.one-whole`) or to create Sass ‘silent’\n  classes which only compile to CSS once explictly called.\n* `$lap-start` and `$desk-start` tell csswizardry-grids when to fire particular\n  media queries to service those particular sizes. Note that csswizardry-grids\n  works out the ends of any other breakpoints by using these numbers.\n\n## Usage\n\ncsswizardry-grids is incredibly simple to implement, its classes are all\nhuman-readable and follow the same pattern.\n\n### Patterns\n\ncsswizardry-grids’ classes are based on [a modified BEM\nsyntax](http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/).\n\n* `.grid` is a **B**lock\n* `.grid__item` is an **E**lement\n* `.grid--rev` is a **M**odifier\n\nClasses include your breakpoint namespaces (e.g. `.palm--one-half`,\n`.desk--two-thirds` and so on); your push and pull classes (`.push--one-third`,\n`.pull--desk--one-quarter` and so on); your regular classes (`.one-tenth`,\n`.three-quarters` etc).\n\nKnowing these patterns will allow you to create hundreds of different\ncombinations. A few examples:\n\n    /**\n     * Sets an item to be one half across all breakpoints.\n     */\n    .one-half{}\n\n    /**\n     * Pushes an item one third of the way to the right across all breakpoints.\n     */\n    .push--one-third{}\n\n    /**\n     * Sets an item to be ten twelfths wide only at the desk breakpoint.\n     */\n    .desk--ten-twelthfs{}\n\n    /**\n     * Pulls an item one half of the way to the left only at the palm breakpoint.\n     */\n    .pull--palm--one-half{}\n\n### Classes in markup\n\nIf you are using traditional classes then an example, basic usage might look\nlike this:\n\n    <div class=\"grid\">\n    \n        <div class=\"grid__item  lap--one-half  desk--two-thirds\">\n            ...\n        </div><!--\n    \n     --><div class=\"grid__item  lap--one-half  desk--one-third\">\n            ...\n        </div>\n    \n    </div>\n\nIt’s as simple as that!\n\n---\n\n**Note the empty HTML comments.** These are to remove whitespace caused by using\n`inline-block`.  Prior to v1.1 this was tackled by using some\n[`[letter|word]-spacing` trickery](https://github.com/csswizardry/csswizardry-grids/blob/60a5075ac65282bb24fa5a5d5ed32a060ce2975f/csswizardry-grids.scss#L64-L65),\nhowever Chrome 25 introduced a change which meant this method now broke\ncsswizardry-grids.\n\nIf you’d rather not use HTML comments to remove the whitespace then you can set\nthe `$use-markup-fix` variable to false; this invokes a CSS hack that _cannot_\nbe guaranteed. Always take care to check things over if using this method.\n\nIf you need to use csswizardry-grids with a CMS, or data coming out of a loop,\nyou will need to format your template something a little like this:\n\n```php\n<div class=\"grid\">\n<!--\n<?php\n    $items = array('foo', 'bar', 'baz');\n\n    foreach ($items as $item) {\n?>\n\n--><div class=\"grid__item  one-third\">\n    <?= $item ?>\n</div><!--\n\n<?php\n    }\n?>\n-->\n</div>\n```\n\nNote the opening and closing comments before and after the loop, and the\ncorresponding opening and closing comments facing outward from the `.grid__item`\nelement. Try pasting the above into [the codepad\ncode runner](http://codepad.viper-7.com/): items from a loop without the need\nfor a counter :)\n\n---\n\n### Sass’ silent classes\n\nIf you are using silent classes (`$use-silent-classes: true;`) then your HTML\nmight look like this:\n\n    <div class=\"page\">\n    \n        <div class=\"content\">\n            ...\n        </div><!--\n    \n     --><div class=\"sub-content\">\n            ...\n        </div>\n    \n    </div>\n\n…and your Sass, something like this:\n\n    .page{\n        @extend %grid;\n    }\n    \n        .content,\n        .sub-content{\n            @extend %grid__item;\n            @extend %one-whole;\n            @extend %lap--one-half;\n        }\n    \n        .content{\n            @extend %desk--two-thirds;\n        }\n    \n        .sub-content{\n            @extend %desk--one-third;\n        }\n\n### Reversed grids (`.grid--rev{}`)\n\ncsswizardry-grids has the option to reverse a set of grids; this means that the\norder you write your source and the order it renders are total opposites, for\nexample:\n\n    <div class=\"grid  grid--rev\">\n\n        <div class=\"main-content  grid__item  two-thirds\">\n            I appear first in the markup, but render second in the page.\n        </div><!--\n\n     --><div class=\"sub-content  grid__item  one-third\">\n            I appear second in the markup, but render first in the page.\n        </div>\n\n    </div>\n\nThis is handy if you want to lay out your page a certain way visually but it\nwould be advantageous to order the source differently, for example to aid\naccessibility (getting a screenreader to read more important content first).\n\n### Gutterless grids (`.grid--full{}`)\n\nIt may be desirable at times to have no gutter between your grid items; with\ncsswizardry-grids this is as simple as:\n\n    <div class=\"grid  grid--full\">\n\n        <div class=\"grid__item  one-half\">\n            Look, ma! No gutter!\n        </div><!--\n\n     --><div class=\"grid__item  one-half\">\n            Look, ma! No gutter!\n        </div>\n\n    </div>\n\n### Right-aligned grids (`.grid--right{}`)\n\nKeep grids in their correct order, but have them flush right instead of left:\n\n    <div class=\"grid  grid--right\">\n\n        <div class=\"grid__item  one-quarter\">\n            I render first but start in the middle of the page.\n        </div><!--\n\n     --><div class=\"grid__item  one-quarter\">\n            I render second and appear at the very right edge of the page.\n        </div>\n\n    </div>\n\n### Centred grids (`.grid--center{}`)\n\nYou can centrally align your grids by simply using the `.grid--center` modifier:\n\n    <div class=\"grid  grid--center\">\n\n        <div class=\"grid__item  one-half\">\n            I’m in the middle!\n        </div>\n\n    </div>\n\n### Vertically aligned grids (`.grid--[middle|bottom]{}`)\n\nYou can vertically align your grids to each other by simply using the\n`.grid--[middle|bottom]` modifiers:\n\n    <div class=\"grid  grid--middle\">\n\n        <div class=\"grid__item  one-half\">\n            I’m in the middle!\n        </div>\n\n        <div class=\"grid__item  one-half\">\n            I’m in the middle!\n        </div>\n\n    </div>\n\n### Different sized grids (`.grid--[narrow|wide]{}`)\n\nYou can quickly alter the gutter size of your grids to half (`.grid--narrow`) or\ndouble (`.grid--wide`) by using the relevant modifiers.\n\n    <div class=\"grid  grid--narrow\">\n\n        <div class=\"grid__item  one-half\">\n            I’m a narrow-guttered grid.\n        </div>\n\n        <div class=\"grid__item  one-half\">\n            I’m a narrow-guttered grid.\n        </div>\n\n    </div>\n\n## Help and questions\n\nIf you have any trouble setting csswizardry-grids up, or would like some help\nusing and implementing it (or any questions about how it works) then please feel\nfree to [fire me a tweet](https://twitter.com/csswizardry) or\n[open an issue](https://github.com/csswizardry/csswizardry-grids/issues/new).\n\ncsswizardry-grids’ Sass can look a little daunting, but it’s doing quite a lot\nof work behind the scenes to make it as simple as possible when it comes to\nimplementation.\n"
        },
        {
          "name": "bower.json",
          "type": "blob",
          "size": 0.4765625,
          "content": "{\n  \"name\": \"csswizardry-grids\",\n  \"version\": \"2.2.0\",\n  \"homepage\": \"http://csswizardry.com/csswizardry-grids/\",\n  \"authors\": [\n    \"Harry Roberts <harry@csswizardry.com>\"\n  ],\n  \"description\": \"A fully responsive, mobile-first, infinitely nestable, reversible, reorderable, simple to understand, human-friendly, robust grid system.\",\n  \"main\": \"csswizardry-grids.scss\",\n  \"keywords\": [\n    \"csswizardry\",\n    \"grids\",\n    \"layout\",\n    \"grid\",\n    \"system\"\n  ],\n  \"license\": \"Apache\"\n}\n"
        },
        {
          "name": "csswizardry-grids.scss",
          "type": "blob",
          "size": 20.0107421875,
          "content": "/*------------------------------------*\\\n    $CSSWIZARDRY-GRIDS\n\\*------------------------------------*/\n/**\n * CONTENTS\n * INTRODUCTION.........How the grid system works.\n * VARIABLES............Your settings.\n * MIXINS...............Library mixins.\n * GRID SETUP...........Build the grid structure.\n * WIDTHS...............Build our responsive widths around our breakpoints.\n * PUSH.................Push classes.\n * PULL.................Pull classes.\n */\n\n\n\n\n\n/*------------------------------------*\\\n    $INTRODUCTION\n\\*------------------------------------*/\n/**\n * csswizardry grids provides you with widths to suit a number of breakpoints\n * designed around devices of a size you specify. Out of the box, csswizardry\n * grids caters to the following types of device:\n *\n * palm     --  palm-based devices, like phones and small tablets\n * lap      --  lap-based devices, like iPads or laptops\n * portable --  all of the above\n * desk     --  stationary devices, like desktop computers\n * regular  --  any/all types of device\n *\n * These namespaces are then used in the library to give you the ability to\n * manipulate your layouts based around them, for example:\n *\n   <div class=\"grid__item  one-whole  lap--one-half  desk--one-third\">\n *\n * This would give you a grid item which is 100% width unless it is on a lap\n * device, at which point it become 50% wide, or it is on a desktop device, at\n * which point it becomes 33.333% width.\n *\n * csswizardry grids also has push and pull classes which allow you to nudge\n * grid items left and right by a defined amount. These follow the same naming\n * convention as above, but are prepended by either `push--` or `pull--`, for\n * example:\n *\n   `class=\"grid__item  one-half  push--one-half\"`\n *\n * This would give you a grid item which is 50% width and pushed over to the\n * right by 50%.\n *\n * All classes in csswizardry grids follow this patten, so you should fairly\n * quickly be able to piece together any combinations you can imagine, for\n * example:\n *\n   `class=\"grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third\"`\n *\n   `class=\"grid__item  one-quarter  palm--one-half  push--palm--one-half\"`\n *\n   `class=\"grid__item  palm--one-third  desk--five-twelfths\"`\n */\n\n\n\n\n\n/*------------------------------------*\\\n    $VARIABLES\n\\*------------------------------------*/\n/**\n * If you are building a non-responsive site but would still like to use\n * csswizardry-grids, set this to ‘false’:\n */\n$responsive:            true !default;\n\n\n/**\n * Is this build mobile first? Setting to ‘true’ means that all grids will be\n * 100% width if you do not apply a more specific class to them.\n */\n$mobile-first:          true !default;\n\n\n/**\n * Set the spacing between your grid items.\n */\n$gutter:                24px !default;\n\n\n/**\n * Would you like Sass’ silent classes, or regular CSS classes?\n */\n$use-silent-classes:    false !default;\n\n\n/**\n * Would you like push and pull classes enabled?\n */\n$push:                  false !default;\n$pull:                  false !default;\n\n\n/**\n * Using `inline-block` means that the grid items need their whitespace removing\n * in order for them to work correctly. Set the following to true if you are\n * going to achieve this by manually removing/commenting out any whitespace in\n * your HTML yourself.\n *\n * Setting this to false invokes a hack which cannot always be guaranteed,\n * please see the following for more detail:\n *\n * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688\n * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371\n */\n$use-markup-fix:        true !default;\n\n\n/**\n * Define your breakpoints. The first value is the prefix that shall be used for\n * your classes (e.g. `.palm--one-half`), the second value is the media query\n * that the breakpoint fires at.\n */\n$breakpoints: (\n    'palm' '(max-width: 480px)',\n    'lap' '(min-width: 481px) and (max-width: 1023px)',\n    'portable' '(max-width: 1023px)',\n    'desk' '(min-width: 1024px)'\n) !default;\n\n\n/**\n * Define which namespaced breakpoints you would like to generate for each of\n * widths, push and pull. This is handy if you only need pull on, say, desk, or\n * you only need a new width breakpoint at mobile sizes. It allows you to only\n * compile as much CSS as you need. All are turned on by default, but you can\n * add and remove breakpoints at will.\n *\n * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`\n * have been set to ‘true’.\n */\n$breakpoint-has-widths: ('palm', 'lap', 'portable', 'desk') !default;\n$breakpoint-has-push:   ('palm', 'lap', 'portable', 'desk') !default;\n$breakpoint-has-pull:   ('palm', 'lap', 'portable', 'desk') !default;\n\n\n/**\n * You do not need to edit anything from this line onward; csswizardry-grids is\n * good to go. Happy griddin’!\n */\n$class-type: if($use-silent-classes, unquote(\"%\"), unquote(\".\"));\n\n\n\n\n\n/*------------------------------------*\\\n    $MIXINS\n\\*------------------------------------*/\n/**\n * These mixins are for the library to use only, you should not need to modify\n * them at all.\n *\n * Enclose a block of code with a media query as named in `$breakpoints`.\n */\n@mixin grid-media-query($media-query) {\n    $breakpoint-found: false;\n\n    @each $breakpoint in $breakpoints {\n        $name: nth($breakpoint, 1);\n        $declaration: nth($breakpoint, 2);\n\n        @if $media-query == $name and $declaration {\n            $breakpoint-found: true;\n\n            @media only screen and #{$declaration} {\n                @content;\n            }\n        }\n    }\n\n    @if not $breakpoint-found {\n        @warn \"Breakpoint ‘#{$media-query}’ does not exist\";\n    }\n}\n\n\n/**\n * Drop relative positioning into silent classes which can’t take advantage of\n * the `[class*=\"push--\"]` and `[class*=\"pull--\"]` selectors.\n */\n@mixin silent-relative {\n    @if $use-silent-classes {\n        position:relative;\n    }\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $GRID SETUP\n\\*------------------------------------*/\n/**\n * 1. Allow the grid system to be used on lists.\n * 2. Remove any margins and paddings that might affect the grid system.\n * 3. Apply a negative `margin-left` to negate the columns’ gutters.\n */\n#{$class-type}grid {\n    list-style:none;                /* [1] */\n    margin:0;                       /* [2] */\n    padding:0;                      /* [2] */\n    margin-left:-$gutter;           /* [3] */\n    @if not $use-markup-fix {\n        letter-spacing:-0.31em;\n    }\n}\n\n@if not $use-markup-fix {\n    /* Opera hack */\n    .opera:-o-prefocus,\n    #{$class-type}grid {\n        word-spacing:-0.43em;\n    }\n}\n\n\n    /**\n     * 1. Cause columns to stack side-by-side.\n     * 2. Space columns apart.\n     * 3. Align columns to the tops of each other.\n     * 4. Full-width unless told to behave otherwise.\n     * 5. Required to combine fluid widths and fixed gutters.\n     */\n    #{$class-type}grid__item {\n        display:inline-block;           /* [1] */\n        padding-left:$gutter;           /* [2] */\n        vertical-align:top;             /* [3] */\n        @if $mobile-first {\n            width:100%;                 /* [4] */\n        }\n        -webkit-box-sizing:border-box;  /* [5] */\n           -moz-box-sizing:border-box;  /* [5] */\n                box-sizing:border-box;  /* [5] */\n        @if not $use-markup-fix {\n            letter-spacing:normal;\n            word-spacing:normal;\n        }\n    }\n\n\n/**\n * Reversed grids allow you to structure your source in the opposite order to\n * how your rendered layout will appear. Extends `.grid`.\n */\n#{$class-type}grid--rev {\n    direction:rtl;\n    text-align:left;\n\n    > #{$class-type}grid__item {\n        direction:ltr;\n        text-align:left;\n    }\n}\n\n\n/**\n * Gutterless grids have all the properties of regular grids, minus any spacing.\n * Extends `.grid`.\n */\n#{$class-type}grid--full {\n    margin-left:0;\n\n    > #{$class-type}grid__item {\n        padding-left:0;\n    }\n}\n\n\n/**\n * Align the entire grid to the right. Extends `.grid`.\n */\n#{$class-type}grid--right {\n    text-align:right;\n\n    > #{$class-type}grid__item {\n        text-align:left;\n    }\n}\n\n\n/**\n * Centered grids align grid items centrally without needing to use push or pull\n * classes. Extends `.grid`.\n */\n#{$class-type}grid--center {\n    text-align:center;\n\n    > #{$class-type}grid__item {\n        text-align:left;\n    }\n}\n\n\n/**\n * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends\n * `.grid`.\n */\n#{$class-type}grid--middle {\n\n    > #{$class-type}grid__item {\n        vertical-align:middle;\n    }\n}\n\n#{$class-type}grid--bottom {\n\n    > #{$class-type}grid__item {\n        vertical-align:bottom;\n    }\n}\n\n\n/**\n * Create grids with narrower gutters. Extends `.grid`.\n */\n#{$class-type}grid--narrow {\n    margin-left:-($gutter / 2);\n\n    > #{$class-type}grid__item {\n        padding-left:$gutter / 2;\n    }\n}\n\n\n/**\n * Create grids with wider gutters. Extends `.grid`.\n */\n#{$class-type}grid--wide {\n    margin-left:-($gutter * 2);\n\n    > #{$class-type}grid__item {\n        padding-left:$gutter * 2;\n    }\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $WIDTHS\n\\*------------------------------------*/\n/**\n * Create our width classes, prefixed by the specified namespace.\n */\n@mixin device-type($namespace:\"\") {\n    $prefix: $class-type + $namespace;\n\n    /**\n     * Whole\n     */\n    #{$prefix}one-whole         { width:100%; }\n\n\n    /**\n     * Halves\n     */\n    #{$prefix}one-half          { width:50%; }\n\n\n    /**\n     * Thirds\n     */\n    #{$prefix}one-third         { width:33.333%; }\n    #{$prefix}two-thirds        { width:66.666%; }\n\n\n    /**\n     * Quarters\n     */\n    #{$prefix}one-quarter       { width:25%; }\n    #{$prefix}two-quarters      { @extend #{$prefix}one-half; }\n    #{$prefix}three-quarters    { width:75%; }\n\n\n    /**\n     * Fifths\n     */\n    #{$prefix}one-fifth         { width:20%; }\n    #{$prefix}two-fifths        { width:40%; }\n    #{$prefix}three-fifths      { width:60%; }\n    #{$prefix}four-fifths       { width:80%; }\n\n\n    /**\n     * Sixths\n     */\n    #{$prefix}one-sixth         { width:16.666%; }\n    #{$prefix}two-sixths        { @extend #{$prefix}one-third; }\n    #{$prefix}three-sixths      { @extend #{$prefix}one-half; }\n    #{$prefix}four-sixths       { @extend #{$prefix}two-thirds; }\n    #{$prefix}five-sixths       { width:83.333%; }\n\n\n    /**\n     * Eighths\n     */\n    #{$prefix}one-eighth        { width:12.5%; }\n    #{$prefix}two-eighths       { @extend #{$prefix}one-quarter; }\n    #{$prefix}three-eighths     { width:37.5%; }\n    #{$prefix}four-eighths      { @extend #{$prefix}one-half; }\n    #{$prefix}five-eighths      { width:62.5%; }\n    #{$prefix}six-eighths       { @extend #{$prefix}three-quarters; }\n    #{$prefix}seven-eighths     { width:87.5%; }\n\n\n    /**\n     * Tenths\n     */\n    #{$prefix}one-tenth         { width:10%; }\n    #{$prefix}two-tenths        { @extend #{$prefix}one-fifth; }\n    #{$prefix}three-tenths      { width:30%; }\n    #{$prefix}four-tenths       { @extend #{$prefix}two-fifths; }\n    #{$prefix}five-tenths       { @extend #{$prefix}one-half; }\n    #{$prefix}six-tenths        { @extend #{$prefix}three-fifths; }\n    #{$prefix}seven-tenths      { width:70%; }\n    #{$prefix}eight-tenths      { @extend #{$prefix}four-fifths; }\n    #{$prefix}nine-tenths       { width:90%; }\n\n\n    /**\n     * Twelfths\n     */\n    #{$prefix}one-twelfth       { width:8.333%; }\n    #{$prefix}two-twelfths      { @extend #{$prefix}one-sixth; }\n    #{$prefix}three-twelfths    { @extend #{$prefix}one-quarter; }\n    #{$prefix}four-twelfths     { @extend #{$prefix}one-third; }\n    #{$prefix}five-twelfths     { width:41.666% }\n    #{$prefix}six-twelfths      { @extend #{$prefix}one-half; }\n    #{$prefix}seven-twelfths    { width:58.333%; }\n    #{$prefix}eight-twelfths    { @extend #{$prefix}two-thirds; }\n    #{$prefix}nine-twelfths     { @extend #{$prefix}three-quarters; }\n    #{$prefix}ten-twelfths      { @extend #{$prefix}five-sixths; }\n    #{$prefix}eleven-twelfths   { width:91.666%; }\n}\n\n\n/**\n * Our regular, non-responsive width classes.\n */\n@include device-type;\n\n\n/**\n * Our responsive classes, if we have enabled them.\n */\n@if $responsive {\n\n    @each $name in $breakpoint-has-widths {\n        @include grid-media-query($name) {\n           @include device-type('#{$name}--');\n        }\n    }\n\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $PUSH\n\\*------------------------------------*/\n/**\n * Push classes, to move grid items over to the right by certain amounts.\n */\n@mixin push-setup($namespace: \"\") {\n    $prefix: $class-type + \"push--\" + $namespace;\n\n    /**\n     * Whole\n     */\n    #{$prefix}one-whole           { left:100%; @include silent-relative; }\n\n\n    /**\n     * Halves\n     */\n    #{$prefix}one-half            { left:50%; @include silent-relative; }\n\n\n    /**\n     * Thirds\n     */\n    #{$prefix}one-third           { left:33.333%; @include silent-relative; }\n    #{$prefix}two-thirds          { left:66.666%; @include silent-relative; }\n\n\n    /**\n     * Quarters\n     */\n    #{$prefix}one-quarter         { left:25%; @include silent-relative; }\n    #{$prefix}two-quarters        { @extend #{$prefix}one-half; }\n    #{$prefix}three-quarters      { left:75%; @include silent-relative; }\n\n\n    /**\n     * Fifths\n     */\n    #{$prefix}one-fifth           { left:20%; @include silent-relative; }\n    #{$prefix}two-fifths          { left:40%; @include silent-relative; }\n    #{$prefix}three-fifths        { left:60%; @include silent-relative; }\n    #{$prefix}four-fifths         { left:80%; @include silent-relative; }\n\n\n    /**\n     * Sixths\n     */\n    #{$prefix}one-sixth           { left:16.666%; @include silent-relative; }\n    #{$prefix}two-sixths          { @extend #{$prefix}one-third; }\n    #{$prefix}three-sixths        { @extend #{$prefix}one-half; }\n    #{$prefix}four-sixths         { @extend #{$prefix}two-thirds; }\n    #{$prefix}five-sixths         { left:83.333%; @include silent-relative; }\n\n\n    /**\n     * Eighths\n     */\n    #{$prefix}one-eighth          { left:12.5%; @include silent-relative; }\n    #{$prefix}two-eighths         { @extend #{$prefix}one-quarter; }\n    #{$prefix}three-eighths       { left:37.5%; @include silent-relative; }\n    #{$prefix}four-eighths        { @extend #{$prefix}one-half; }\n    #{$prefix}five-eighths        { left:62.5%; @include silent-relative; }\n    #{$prefix}six-eighths         { @extend #{$prefix}three-quarters; }\n    #{$prefix}seven-eighths       { left:87.5%; @include silent-relative; }\n\n\n    /**\n     * Tenths\n     */\n    #{$prefix}one-tenth           { left:10%; @include silent-relative; }\n    #{$prefix}two-tenths          { @extend #{$prefix}one-fifth; }\n    #{$prefix}three-tenths        { left:30%; @include silent-relative; }\n    #{$prefix}four-tenths         { @extend #{$prefix}two-fifths; }\n    #{$prefix}five-tenths         { @extend #{$prefix}one-half; }\n    #{$prefix}six-tenths          { @extend #{$prefix}three-fifths; }\n    #{$prefix}seven-tenths        { left:70%; @include silent-relative; }\n    #{$prefix}eight-tenths        { @extend #{$prefix}four-fifths; }\n    #{$prefix}nine-tenths         { left:90%; @include silent-relative; }\n\n\n    /**\n     * Twelfths\n     */\n    #{$prefix}one-twelfth         { left:8.333%; @include silent-relative; }\n    #{$prefix}two-twelfths        { @extend #{$prefix}one-sixth; }\n    #{$prefix}three-twelfths      { @extend #{$prefix}one-quarter; }\n    #{$prefix}four-twelfths       { @extend #{$prefix}one-third; }\n    #{$prefix}five-twelfths       { left:41.666%; @include silent-relative; }\n    #{$prefix}six-twelfths        { @extend #{$prefix}one-half; }\n    #{$prefix}seven-twelfths      { left:58.333%; @include silent-relative; }\n    #{$prefix}eight-twelfths      { @extend #{$prefix}two-thirds; }\n    #{$prefix}nine-twelfths       { @extend #{$prefix}three-quarters; }\n    #{$prefix}ten-twelfths        { @extend #{$prefix}five-sixths; }\n    #{$prefix}eleven-twelfths     { left:91.666%; @include silent-relative; }\n}\n\n@if $push {\n\n    /**\n     * Not a particularly great selector, but the DRYest way to do things.\n     */\n    [class*=\"push--\"] { position:relative; }\n\n    @include push-setup;\n\n    @if $responsive {\n        @each $name in $breakpoint-has-push {\n            @include grid-media-query($name) {\n                @include push-setup('#{$name}--');\n            }\n        }\n    }\n\n}\n\n\n\n\n\n/*------------------------------------*\\\n    $PULL\n\\*------------------------------------*/\n/**\n * Pull classes, to move grid items back to the left by certain amounts.\n */\n@mixin pull-setup($namespace: \"\") {\n    $prefix: $class-type + \"pull--\" + $namespace;\n\n    /**\n     * Whole\n     */\n    #{$prefix}one-whole           { right:100%; @include silent-relative; }\n\n\n    /**\n     * Halves\n     */\n    #{$prefix}one-half            { right:50%; @include silent-relative; }\n\n\n    /**\n     * Thirds\n     */\n    #{$prefix}one-third           { right:33.333%; @include silent-relative; }\n    #{$prefix}two-thirds          { right:66.666%; @include silent-relative; }\n\n\n    /**\n     * Quarters\n     */\n    #{$prefix}one-quarter         { right:25%; @include silent-relative; }\n    #{$prefix}two-quarters        { @extend #{$prefix}one-half; }\n    #{$prefix}three-quarters      { right:75%; @include silent-relative; }\n\n\n    /**\n     * Fifths\n     */\n    #{$prefix}one-fifth           { right:20%; @include silent-relative; }\n    #{$prefix}two-fifths          { right:40%; @include silent-relative; }\n    #{$prefix}three-fifths        { right:60%; @include silent-relative; }\n    #{$prefix}four-fifths         { right:80%; @include silent-relative; }\n\n\n    /**\n     * Sixths\n     */\n    #{$prefix}one-sixth           { right:16.666%; @include silent-relative; }\n    #{$prefix}two-sixths          { @extend #{$prefix}one-third; }\n    #{$prefix}three-sixths        { @extend #{$prefix}one-half; }\n    #{$prefix}four-sixths         { @extend #{$prefix}two-thirds; }\n    #{$prefix}five-sixths         { right:83.333%; @include silent-relative; }\n\n\n    /**\n     * Eighths\n     */\n    #{$prefix}one-eighth          { right:12.5%; @include silent-relative; }\n    #{$prefix}two-eighths         { @extend #{$prefix}one-quarter; }\n    #{$prefix}three-eighths       { right:37.5%; @include silent-relative; }\n    #{$prefix}four-eighths        { @extend #{$prefix}one-half; }\n    #{$prefix}five-eighths        { right:62.5%; @include silent-relative; }\n    #{$prefix}six-eighths         { @extend #{$prefix}three-quarters; }\n    #{$prefix}seven-eighths       { right:87.5%; @include silent-relative; }\n\n\n    /**\n     * Tenths\n     */\n    #{$prefix}one-tenth           { right:10%; @include silent-relative; }\n    #{$prefix}two-tenths          { @extend #{$prefix}one-fifth; }\n    #{$prefix}three-tenths        { right:30%; @include silent-relative; }\n    #{$prefix}four-tenths         { @extend #{$prefix}two-fifths; }\n    #{$prefix}five-tenths         { @extend #{$prefix}one-half; }\n    #{$prefix}six-tenths          { @extend #{$prefix}three-fifths; }\n    #{$prefix}seven-tenths        { right:70%; @include silent-relative; }\n    #{$prefix}eight-tenths        { @extend #{$prefix}four-fifths; }\n    #{$prefix}nine-tenths         { right:90%; @include silent-relative; }\n\n\n    /**\n     * Twelfths\n     */\n    #{$prefix}one-twelfth         { right:8.333%; @include silent-relative; }\n    #{$prefix}two-twelfths        { @extend #{$prefix}one-sixth; }\n    #{$prefix}three-twelfths      { @extend #{$prefix}one-quarter; }\n    #{$prefix}four-twelfths       { @extend #{$prefix}one-third; }\n    #{$prefix}five-twelfths       { right:41.666%; @include silent-relative; }\n    #{$prefix}six-twelfths        { @extend #{$prefix}one-half; }\n    #{$prefix}seven-twelfths      { right:58.333%; @include silent-relative; }\n    #{$prefix}eight-twelfths      { @extend #{$prefix}two-thirds; }\n    #{$prefix}nine-twelfths       { @extend #{$prefix}three-quarters; }\n    #{$prefix}ten-twelfths        { @extend #{$prefix}five-sixths; }\n    #{$prefix}eleven-twelfths     { right:91.666%; @include silent-relative; }\n}\n\n@if $pull {\n\n    /**\n     * Not a particularly great selector, but the DRYest way to do things.\n     */\n    [class*=\"pull--\"] { position:relative; }\n\n    @include pull-setup;\n\n    @if $responsive {\n        @each $name in $breakpoint-has-pull {\n            @include grid-media-query($name) {\n                @include pull-setup('#{$name}--');\n            }\n        }\n    }\n\n}\n"
        }
      ]
    }
  ]
}