{
  "metadata": {
    "timestamp": 1736711550501,
    "page": 67,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "max-mapper/screencat",
      "stars": 3017,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0703125,
          "content": "bundle.js\nnode_modules\n.DS_Store\nScreenCat.app\nScreenCat.zip\n.sass-cache"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.037109375,
          "content": "language: node_js\nnode_js:\n  - '0.12'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.265625,
          "content": "Copyright (c) 2015, Max Ogden and contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9814453125,
          "content": "### ScreenCat\n\n![Icon@2x.png](img/Icon@2x.png)\n\nScreenCat is an open source screen sharing + remote collaboration application. You can share your desktop with someone else while letting them share your mouse and keyboard remotely. Right now it is not as good as commercial alternatives, mostly because this is a hobby project and not a for-profit project. The big difference is that you can send PRs to make ScreenCat better!\n\n![demo](img/demo.png)\n\nScreenCat is named after cats, but also for the idea of 'catting' a screen (as in unix cat). It has two C/C++ dependencies, [Electron](https://github.com/atom/electron) (which includes node.js) and [robotjs](https://github.com/octalmage/robotjs) for creating mouse + keyboard events.\n\nScreenCat is currently **ALPHA STATUS** and is intended for developers/early adopters. Check out the Issues to get involved. ScreenCat is a volunteer run project, your contributions and improvements are welcome!\n\nTo download the latest build visit the [releases page](https://github.com/maxogden/screencat/releases). Builds for your OS may not be available and you may have to build it yourself, sorry.\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n[![Build Status](https://travis-ci.org/maxogden/screencat.svg?branch=master)](https://travis-ci.org/maxogden/screencat)\n\n![screenshot.png](img/screenshot.png)\n\n### How it works\n\nThe app itself is written in JS, HTML and CSS. The CSS is from [tachyons](https://www.npmjs.com/package/tachyons). The app is wrapped up in an [electron](https://github.com/atom/electron) application using the [menubar](https://www.npmjs.com/package/menubar) module.\n\nOne really cool feature of ScreenCat is the ability to screenshare with a normal browser. Using our [remote control page](http://maxogden.github.io/screencat/remote) you can send your invite code to a web user and they can remote control your computer. Currently Google Chrome is recommended. You can also screenshare between 2 `ScreenCat.app` users.\n\n![remote-control.gif](img/remote-control.gif)\n\nThe screensharing takes advantage of an experimental feature built in to Chromium's WebRTC implementation called `chromeMediaSource: 'screen'`. This lets you share the host computers entire desktop over a WebRTC video channel. On the remote end, you can render the data in a `<video>` element.\n\nTo initiate the WebRTC connection both peers must swap [sdp](http://en.wikipedia.org/wiki/Session_Description_Protocol) connection information payloads. After compression, you can get the payloads down to about 1K. This is technically small enough to copy/paste through e.g. SMS, but it's on the larger side. Also you have to do a full round trip, where user A sends their code to user B, *and* vice versa before a connection can be established.\n\nTo simplify the connection process the app uses [cat-lobby](https://github.com/maxogden/cat-lobby), a minimal lobby server using HTTP and Server-Sent Events. This simply lets users swap SDP payloads without having to copy/paste large text blocks back and forth.\n\nTo hook up the mouse and keyboard, the remote end uses standard `mousedown` and `keydown` events and sends them over a WebRTC data channel to the host. On the host side the app must synthesize mouse and keyboard events on the host OS. This is the tricky part, and the only part where a custom native node addon (C++) is required. Luckily I found the [robotjs](https://github.com/octalmage/robotjs) project which while still being relatively new and rough around the edges still got the job done after [some modifications](https://github.com/maxogden/robotjs/tree/keyupdown).\n\nCurrently the app works best between Macs, mostly because that is what the original author used. However, you can build it for Linux or Windows too.\n\nThe motivation for making ScreenCat came from a lack of open source + easily hackable screen sharing tools. I collaborate with many remote open source developers and being able to customize the software we use to work together is important to me. ScreenCat will remain free and BSD licensed, and your contributions are welcome! Check out the [issues](https://github.com/maxogden/screencat/issues), especially those marked as `help wanted`.\n\n##### Building the app\n\nFor mac/linux:\n\n```bash\nnpm install # installs electron and all the deps\nnpm start # runs the app in the electron wrapper\nnpm run build # builds the mac app\n```\n\nFor windows:\n\nYou will [need Visual studio C++](https://github.com/nodejs/node-gyp) installed so you can build the native modules. Here are instructions for cmd.exe:\n\n```\ngit clone https://github.com/maxogden/screencat.git\ncd screencat\nnpm install\nnpm install electron-rebuild\n.\\node_modules\\.bin\\electron-rebuild.cmd\nnpm start\n```\n\n## source code guide\n\n- the electron app executable is `electron.js`\n- the electron app UI and main code are `app.html`, `app.js` and `screen.js`\n- the remote web viewer UI and core are `remote.js` and `remote.html`\n- `peer.js` and `connect.js` are used by both the electron app and the web viewer\n"
        },
        {
          "name": "app.html",
          "type": "blob",
          "size": 3.904296875,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n    <title>ScreenCat</title>\n    <meta name=\"author\" content=\"max ogden\">\n    <meta name=\"description\" content=\"cool appz\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"stylesheets/css/tachyons.css\" />\n    <link rel=\"stylesheet\" href=\"stylesheets/css/screencat.css\" />\n</head>\n<body class=\"wi-100\">\n  <div class=\"sharing-container dn\">\n    <main class=\"center mw8 phm phl-ns ptl pbxl\">\n      <p class=\"mono gray lh-copy thin mw7 f4 f3-ns\">\n        You are now sharing your screen.\n        <a class=\"destroy-button small link tc pas db w-20 btn\" style=\"display: inline;\">Stop</a>\n      </p>\n    </main>\n  </div>\n\n  <div class=\"viewing-container dn\">\n    <main class=\"center mw8 phm phl-ns ptl pbxl\">\n      <p class=\"mono gray lh-copy thin mw7 f4 f3-ns\">\n        You are now viewing a remote screen.\n        <br />\n        <a class=\"destroy-button small link tc pas db w-20 btn\" style=\"display: inline;\">Stop Viewing</a>\n        <a class=\"show-button small link tc pas db w-20 btn\" style=\"display: inline;\">Show Window</a>\n      </p>\n    </main>\n  </div>\n\n  <div class=\"content-container\">\n    <header class=\"main-header bb b--light-gray pvs\">\n      <div class=\"center mw8 phm phl-ns\">\n        <h1 class=\"f3 book dib prm man\">ScreenCat</h1>\n        <div class=\"fr\">\n          <a class=\"back-button small link tc pas btn btn-plain\"></a>\n          <a class=\"quit-button small link tc pas btn btn-plain\"></a>\n        </div>\n      </div>\n    </header>\n    <main class=\"center mw8 phm phl-ns ptl\">\n      <div class=\"choose-container\">\n        <div class=\"cr\">\n          <p class=\"mbl\">While sharing the remote person will have full access to your desktop, mouse and keyboard.</p>\n          <div class=\"w-50 left\">\n            <a class=\"share-button tc phs pvs pvm-ns f4 btn w-100 mw-fill mrm\">Share Your Screen</a>\n          </div>\n          <div class=\"w-50 left\">\n            <a class=\"join-button tc phs pvs pvm-ns f4 btn w-100 mw-fill mlm\">Join Remote Screen</a>\n          </div>\n        </div>\n      </div>\n      \n      <div class=\"capturer-container dn\">\n        <div class=\"cr\">\n          <p class=\"mbl\">Select the window you want to share:</p>\n          <ul class=\"capturer-list\"></ul>\n        </div>\n      </div>\n\n      <div class=\"share-container dn\">\n        <h2 class=\"f4 ttu book\">Share</h2>\n        <div class=\"cr\">\n          <div class=\"w-80 left prl\">\n            <input type=\"text\" class=\"code-copy-input pam brs ba b--light-gray w-100 mw-fill\" autofocus></input>\n          </div>\n          <div class=\"w-20 left\">\n            <div class=\"code-copy-button tc phs pvs pvm-ns f4 btn w-100 mw-fill\">Copy</div>\n          </div>\n        </div>\n        <p>Send this code to the person you want to share your screen with. They can use <a href=\"https://github.com/maxogden/screencat/releases/latest\" class=\"open-externally\">ScreenCat.app</a> or <a href=\"http://maxogden.github.io/screencat/remote\" class=\"open-externally\">http://maxogden.github.io/screencat/remote</a> in Chrome/Firefox. <strong>Please wait here until they connect.</strong></p>\n      </div>\n\n      <div class=\"join-container dn\">\n        <h2 class=\"f4 ttu book cl\">join</h2>\n        <div class=\"cr\">\n          <div class=\"w-80 left prl\">\n            <input type=\"text\" class=\"code-paste-input pam brs ba b--light-gray w-100 mw-fill\" value=\"Loading...\" autofocus></input>\n          </div>\n          <div class=\"w-20 left\">\n            <div class=\"code-paste-button tc phs pvs pvm-ns f4 btn w-100 mw-fill\">Connect</div>\n          </div>\n        </div>\n        <p>Enter a code to connect to a remote screen. <span class=\"code-mdns\">Found <a href=\"javascript:void(0)\" class=\"code-mdns-button\"></a> near you</span></p>\n      </div>\n\n    </main>\n  </div>\n\n  <div class=\"multimedia-container\"></div>\n  <script src=\"app.js\"></script>\n</body>\n</html>\n"
        },
        {
          "name": "app.js",
          "type": "blob",
          "size": 5.7275390625,
          "content": "/* global screen */\nvar ipc = require('ipc')\nvar clipboard = require('clipboard')\nvar shell = require('shell')\nvar desktopCapturer = require('desktop-capturer')\n\nvar domify = require('domify')\nvar mdns = require('multicast-dns')()\nvar createPeerConnection = require('./peer.js')\nvar ui = require('./ui.js')\nvar connect = require('./connect.js')\n\nvar peer\nvar peerConnection = createPeerConnection()\nwindow.ui = ui\nwindow.pc = peerConnection\n\nmdns.on('query', function (query) {\n  if (!ui.inputs.copy.value) return\n  query.questions.forEach(function (q) {\n    if (q.type === 'TXT' && q.name === 'screencat') {\n      mdns.respond([{type: 'TXT', name: 'screencat', data: ui.inputs.copy.value}])\n    }\n  })\n})\n\nmdns.on('response', function (res) {\n  res.answers.forEach(function (a) {\n    if (a.type === 'TXT' && a.name === 'screencat') {\n      ui.buttons.mdns.innerText = a.data\n      ui.show(ui.containers.mdns)\n    }\n  })\n})\n\npeerConnection.on('connected', function connected (newPeer, remote) {\n  peer = newPeer\n\n  if (!remote) {\n    ipc.send('icon', 'connected')\n    ui.show(ui.containers.sharing)\n    ui.hide(ui.containers.content)\n  } else {\n    ui.show(ui.containers.multimedia)\n    ui.hide(ui.containers.content)\n  }\n\n  peer.on('error', function error (err) {\n    ipc.send('icon', 'disconnected')\n    console.error('peer error')\n    console.error(err)\n    ui.containers.content.innerHTML = 'Error connecting! Please Quit. ' + err.message\n  })\n\n  peer.on('close', function close () {\n    ipc.send('icon', 'disconnected')\n    showChoose()\n  })\n})\n\nipc.on('open-url', function (lnk) {\n  console.log('open url', lnk)\n})\n\nipc.on('connected', function () {\n  ui.hide(ui.containers.content)\n  ui.show(ui.containers.viewing)\n})\n\nipc.on('disconnected', function () {\n  console.log('disconnected')\n  showChoose()\n})\n\nui.buttons.quit.addEventListener('click', function (e) {\n  ipc.send('terminate')\n})\n\nui.buttons.destroy.addEventListener('click', function (e) {\n  if (peer) peer.destroy()\n  showChoose()\n})\n\nui.buttons.share.addEventListener('click', function (e) {\n  var sourcesList = document.querySelector('.capturer-list')\n  sourcesList.innerHTML = ''\n  ui.hide(ui.containers.choose)\n  ui.show(ui.buttons.back)\n  try {\n    if (!peerConnection.robot) peerConnection.robot = require('./robot.js')\n  } catch (e) {\n    error(new Error('./robot.js failed to load'))\n    error(e)\n  }\n  desktopCapturer.getSources({types: ['window', 'screen']}, function (err, sources) {\n    if (err) return error(err)\n    ui.hide(ui.containers.choose)\n    ui.show(ui.containers.capturer)\n    var id = 0\n    sources.forEach(function (source) {\n      var thumb = source.thumbnail.toDataUrl()\n      if (!thumb) return\n      var title = source.name.slice(0, 20)\n      var item = `<li><a href=\"#\"><img src=\"${thumb}\"><span>${title}</span></a></li>`\n      sourcesList.appendChild(domify(item))\n      id++\n    })\n    var links = sourcesList.querySelectorAll('a')\n\n    for (var i = 0; i < links.length; i++) {\n      links[i].onclick = closure(i)\n    }\n\n    function closure (i) {\n      return function (e) {\n        e.preventDefault()\n        var source = sources[i]\n        var opts = {\n          constraints: {\n            audio: false,\n            video: {\n              mandatory: {\n                chromeMediaSource: 'desktop',\n                chromeMediaSourceId: source.id,\n                maxWidth: screen.availWidth,\n                maxHeight: screen.availHeight,\n                maxFrameRate: 25\n              }\n            }\n          }\n        }\n        ui.show(ui.containers.share)\n        ui.hide(ui.containers.capturer)\n        sourcesList.innerHTML = ''\n        connect.host(peerConnection, ui, opts)\n        return false\n      }\n    }\n  })\n})\n\nui.buttons.mdns.addEventListener('click', function (e) {\n  ui.inputs.paste.value = ui.buttons.mdns.innerText.trim()\n  ui.buttons.paste.click()\n})\n\nui.buttons.join.addEventListener('click', function (e) {\n  ui.inputs.copy.value = ''\n  ui.hide(ui.containers.mdns)\n  ui.show(ui.containers.join)\n  ui.hide(ui.containers.choose)\n  ui.show(ui.buttons.back)\n\n  var interval = setInterval(query, 1000)\n  query()\n\n  connect.verifyUserRoom(peerConnection, ui, function (err, room, config) {\n    clearInterval(interval)\n    if (err) {\n      ui.inputs.paste.value = 'Error! ' + err.message\n      return\n    }\n    ui.inputs.paste.value = 'Waiting on other side...'\n    ipc.send('create-window', {config: config, room: room})\n  })\n\n  function query () {\n    mdns.query([{type: 'TXT', name: 'screencat'}])\n  }\n})\n\nui.buttons.back.addEventListener('click', function (e) {\n  // HACK do a clone-swap to remove listeners\n  var el = ui.buttons.paste\n  var elClone = el.cloneNode(true)\n  el.parentNode.replaceChild(elClone, el)\n  ui.buttons.paste = elClone\n\n  showChoose()\n})\n\nui.buttons.copy.addEventListener('click', function (e) {\n  e.preventDefault()\n  clipboard.writeText(ui.inputs.copy.value)\n})\n\nui.buttons.show.addEventListener('click', function (e) {\n  e.preventDefault()\n  ipc.send('show-window')\n})\n\nui.buttons.stopViewing.addEventListener('click', function (e) {\n  e.preventDefault()\n  ipc.send('stop-viewing')\n})\n\nfunction showChoose () {\n  ui.hide(ui.containers.viewing)\n  ui.hide(ui.containers.sharing)\n  ui.hide(ui.containers.multimedia)\n  ui.show(ui.containers.content)\n  ui.show(ui.containers.choose)\n  ui.hide(ui.containers.share)\n  ui.hide(ui.containers.join)\n  ui.hide(ui.buttons.back)\n  ui.hide(ui.containers.capturer)\n}\n\nvar externalLinks = document.querySelectorAll('.open-externally')\nfor (var i = 0; i < externalLinks.length; i++) {\n  externalLinks[i].onclick = function (e) {\n    e.preventDefault()\n    shell.openExternal(e.target.href)\n    return false\n  }\n}\n\nfunction error (e) {\n  // TODO: Display this as a site flash in addition to the app console\n  ipc.send('error', {message: e.message, name: e.name})\n  console.error(e)\n}\n"
        },
        {
          "name": "collaborators.md",
          "type": "blob",
          "size": 0.451171875,
          "content": "## Collaborators\n\nscreencat is only possible due to the excellent work of the following collaborators:\n\n<table><tbody><tr><th align=\"left\">maxogden</th><td><a href=\"https://github.com/maxogden\">GitHub/maxogden</a></td></tr>\n<tr><th align=\"left\">mafintosh</th><td><a href=\"https://github.com/mafintosh\">GitHub/mafintosh</a></td></tr>\n<tr><th align=\"left\">jsimplicio</th><td><a href=\"https://github.com/jsimplicio\">GitHub/jsimplicio</a></td></tr>\n</tbody></table>\n"
        },
        {
          "name": "connect.js",
          "type": "blob",
          "size": 3.1103515625,
          "content": "module.exports.verifyUserRoom = function (peerConnection, ui, cb) {\n  peerConnection.getRemoteConfig(function (err, config) {\n    if (err) return cb(err)\n    ui.inputs.paste.value = ''\n\n    // first, wait for user to enter room name\n    ui.buttons.paste.addEventListener('click', onJoinClick)\n\n    function onJoinClick (ev) {\n      ev.preventDefault()\n      var room = ui.inputs.paste.value\n      ui.inputs.paste.value = 'Connecting...'\n      if (!room) return\n      peerConnection.verifyRoom(room, function (err) {\n        cb(err, room, config)\n      })\n    }\n  })\n}\n\nmodule.exports.remote = function (peerConnection, ui, config, room) {\n  peerConnection.remotePeer(config, room, function (err, peer) {\n    if (err) {\n      ui.inputs.paste.value = 'Error! ' + err.message\n      return\n    }\n\n    if (!room) {\n      ui.inputs.paste.value = 'Error! Please Quit'\n      return\n    }\n\n    peer.on('stream', function (stream) { renderStreams(peerConnection, ui, stream) })\n\n    peer.on('signal', function (sdp) {\n      peerConnection.handleSignal(sdp, peer, true, room, function (err) {\n        if (err) {\n          ui.containers.content.innerHTML = 'Error! Please Quit. ' + err.message\n          return\n        }\n        console.log('SDP POST DONE')\n      })\n    })\n\n    if (peer.connected) peerConnection.onConnect(peer, true)\n    else peer.on('connect', function () { peerConnection.onConnect(peer, true) })\n  })\n}\n\nmodule.exports.host = function (peerConnection, ui, opts) {\n  if (!opts) opts = {}\n  getARoom(peerConnection, ui, function (err, room, config) {\n    if (err) {\n      ui.inputs.copy.value = 'Error! ' + err.message\n      return\n    }\n    ui.inputs.copy.value = room\n    opts.room = room\n    opts.config = config\n    peerConnection.hostPeer(opts, function (err, peer) {\n      if (err) {\n        ui.inputs.copy.value = 'Error! ' + err.message\n        return\n      }\n\n      if (!room) {\n        ui.inputs.copy.value = 'Error! Please Quit'\n        return\n      }\n\n      peer.on('stream', function (stream) { renderStreams(peerConnection, ui, stream) })\n\n      peer.on('signal', function (sdp) {\n        peerConnection.handleSignal(sdp, peer, false, room, function (err) {\n          if (err) {\n            ui.containers.content.innerHTML = 'Error! Please Quit. ' + err.message\n            return\n          }\n        })\n      })\n\n      if (peer.connected) peerConnection.onConnect(peer, false)\n      else peer.on('connect', function () { peerConnection.onConnect(peer, false) })\n    })\n  })\n}\n\nfunction renderStreams (peerConnection, ui, stream) {\n  stream.getAudioTracks().forEach(function each (track) {\n    var audio = peerConnection.audioElement(stream)\n    ui.containers.multimedia.appendChild(audio)\n    ui.hide(ui.containers.multimedia)\n  })\n  stream.getVideoTracks().forEach(function each (track) {\n    var video = peerConnection.videoElement(stream)\n    ui.containers.multimedia.appendChild(video)\n    ui.hide(ui.containers.multimedia)\n  })\n}\n\nfunction getARoom (peerConnection, ui, cb) {\n  peerConnection.getRemoteConfig(function (err, config) {\n    if (err) return cb(err)\n    peerConnection.createRoom(function (err, room) {\n      cb(err, room, config)\n    })\n  })\n}\n"
        },
        {
          "name": "css",
          "type": "tree",
          "content": null
        },
        {
          "name": "electron.js",
          "type": "blob",
          "size": 1.794921875,
          "content": "var path = require('path')\nvar menubar = require('menubar')\nvar BrowserWindow = require('browser-window')\nvar ipc = require('ipc')\n\nvar icons = {\n  connected: path.join(__dirname, 'img', 'IconRed.png'),\n  disconnected: path.join(__dirname, 'img', 'Icon.png')\n}\n\nvar mb = menubar({\n  width: 700,\n  height: 300,\n  index: 'file://' + path.join(__dirname, 'app.html'),\n  icon: 'file://' + icons.disconnected\n})\n\nvar win\n\nmb.app.commandLine.appendSwitch('disable-renderer-backgrounding')\n\nmb.on('ready', function ready () {\n  console.log('ready')\n})\n\nipc.on('icon', function (ev, key) {\n  mb.tray.setImage(icons[key])\n})\n\nmb.app.on('open-url', function (e, lnk) {\n  e.preventDefault()\n  if (mb.window) mb.window.webContents.send('open-url', lnk)\n})\n\nipc.on('terminate', function terminate (ev) {\n  mb.app.terminate()\n})\n\nipc.on('resize', function resize (ev, data) {\n  mb.window.setSize(data.width, data.height)\n})\n\nipc.on('error', function error (ev, err) {\n  console.error(new Error(err.message))\n})\n\nipc.on('create-window', function (ev, config) {\n  console.log('create-window', [config])\n  mb.app.dock.show()\n  win = new BrowserWindow({width: 720, height: 445})\n  win.loadUrl('file://' + path.join(__dirname, 'screen.html'))\n\n  win.on('closed', function () {\n    mb.app.dock.hide()\n    mb.window.webContents.send('disconnected', true)\n  })\n\n  ipc.once('window-ready', function () {\n    // win.webContents.openDevTools()\n    win.webContents.send('peer-config', config)\n  })\n\n  ipc.on('connected', function () {\n    mb.window.webContents.send('connected', true)\n  })\n\n  ipc.on('disconnected', function () {\n    mb.window.webContents.send('disconnected', true)\n  })\n\n  ipc.on('show-window', function () {\n    win.show()\n  })\n\n  ipc.on('stop-viewing', function () {\n    win.close()\n    mb.window.webContents.send('disconnected', true)\n  })\n})\n"
        },
        {
          "name": "fonts",
          "type": "tree",
          "content": null
        },
        {
          "name": "get-user-media.js",
          "type": "blob",
          "size": 0.2822265625,
          "content": "module.exports = function () {\n  var getUserMedia = (\n    window.navigator.getUserMedia ||\n    window.navigator.webkitGetUserMedia ||\n    window.navigator.mozGetUserMedia ||\n    window.navigator.msGetUserMedia\n  )\n  if (!getUserMedia) return\n  return getUserMedia.bind(window.navigator)\n}\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.html",
          "type": "blob",
          "size": 2.05078125,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n<meta name=\"author\" content=\"max ogden\">\n<meta name=\"description\" content=\"cool appz\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<link rel=\"stylesheet\" href=\"stylesheets/css/tachyons.css\" />\n<link rel=\"stylesheet\" href=\"stylesheets/css/screencat.css\" />\n<link rel=\"icon\" type=\"image/png\" src=\"img/Icon@2x.png\">\n</head>\n<body class=\"wi-100\">\n  <header class=\"main-header bb b--light-gray pvs\"> \n    <div class=\"center mw8 phm phl-ns\">\n      <h1 class=\"f3 book dib prm man\">ScreenCat</h1>\n    </div>\n  </header>\n  <div class=\"content-container w-50\">\n    <header class=\"bb b--light-gray pvm\">\n    <img src=\"img/screenshot.png\" />\n    </header>\n    <p>\n    ScreenCat is an open source screen sharing + remote collaboration application, currently only for Mac OS. You can share your desktop with someone else while letting them share your mouse and keyboard remotely. Right now it is not as good as commercial alternatives, mostly because this initial prototype was written in 3 days. <a href=\"http://github.com/maxogden/screencat\">The big difference is that you can send PRs to make ScreenCat better!</a>\n    </p>\n\n    <p>\n    ScreenCat is currently ALPHA STATUS and is intended for developers/early adopters. Check out the Issues to get involved. ScreenCat is a volunteer run project, your contributions and improvements are welcome!\n    </p>\n\n    <h2>Step 1: Download Screen Cat</h2>\n    <a href=\"https://github.com/maxogden/screencat/releases/latest\" class=\"\">Latest Release (MAC OSX)</a>\n\n\n    <h2>Step 2: Get a screen code</h2>\n    <img src=\"img/share.png\" />\n\n    <h2>Step 3: Share it with your fwiends</h2>\n    <p>They can use ScreenCat.app</p>\n    <img src=\"img/join.png\" />\n    \n    <p>Or Chrome/Firefox from our <a href=\"http://maxogden.github.io/screencat/remote\">Remote Control</a> page</p>\n    <img src=\"img/remote.png\" />\n    \n    <p>\n      <a href=\"http://github.com/maxogden/screencat\">github repo</a>\n    </p>\n  </div>\n</body>\n</html>"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.59765625,
          "content": "{\n  \"name\": \"screencat\",\n  \"version\": \"4.2.0\",\n  \"description\": \"webrtc screensharing with shared mouse and keyboard\",\n  \"main\": \"electron.js\",\n  \"scripts\": {\n    \"start\": \"electron electron.js\",\n    \"build\": \"electron-packager . ScreenCat --platform=darwin --arch=x64 --version=0.36.0 --protocol-name=\\\"ScreenCat URL\\\" --protocol=\\\"screencat\\\" --ignore=node_modules/electron-prebuilt --ignore=node_modules/electron-packager --ignore=node_modules/browserify --ignore=node_modules/wzrd --ignore=node_modules/standard && cp img/Icon.icns ScreenCat.app/Contents/Resources/atom.icns\",\n    \"css\": \"node-sass stylesheets/sass/screencat.scss stylesheets/css/screencat.css --watch\",\n    \"test\": \"standard\",\n    \"rebuild\": \"cd node_modules/robotjs && set HOME=~/.electron-gyp && node-gyp rebuild --target=0.36.0 --arch=x64 --dist-url=https://atom.io/download/atom-shell\"\n  },\n  \"author\": \"max ogden\",\n  \"license\": \"BSD-3-Clause\",\n  \"dependencies\": {\n    \"domify\": \"^1.4.0\",\n    \"menubar\": \"^2.0.4\",\n    \"multicast-dns\": \"^3.0.0\",\n    \"nets\": \"^3.1.0\",\n    \"simple-peer\": \"^5.11.5\",\n    \"ssejson\": \"^1.2.0\",\n    \"vkey\": \"^1.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"robotjs\": \"^0.3.0\"\n  },\n  \"devDependencies\": {\n    \"browserify\": \"^9.0.3\",\n    \"electron-packager\": \"^4.1.0\",\n    \"electron-prebuilt\": \"^0.36.0\",\n    \"node-sass\": \"^3.4.1\",\n    \"standard\": \"^5.3.1\",\n    \"tachyons\": \"^1.2.0\",\n    \"wzrd\": \"^1.2.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/maxogden/screencat.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/maxogden/screencat/issues\"\n  },\n  \"homepage\": \"https://github.com/maxogden/screencat\"\n}\n"
        },
        {
          "name": "peer.js",
          "type": "blob",
          "size": 7.978515625,
          "content": "/* global screen, EventSource */\nvar zlib = require('zlib')\nvar events = require('events')\nvar SimplePeer = require('simple-peer')\nvar nets = require('nets')\nvar getUserMedia = require('./get-user-media.js')()\n\nmodule.exports = function create () {\n  var server = 'http://catlobby.maxogden.com'\n  // var server = 'http://localhost:5005'\n  var remoteConfigUrl = 'https://instant.io/rtcConfig'\n  if (process.browser) remoteConfigUrl = 'http://cors.maxogden.com/' + remoteConfigUrl\n\n  var videoSize\n\n  var defaultConstraints = {\n    audio: false,\n    video: {\n      mandatory: {\n        chromeMediaSource: 'screen',\n        maxWidth: screen.availWidth,\n        maxHeight: screen.availHeight,\n        maxFrameRate: 25\n      },\n      optional: []\n    }\n  }\n\n  var pc = new events.EventEmitter()\n  pc.getRemoteConfig = getRemoteConfig\n  pc.verifyRoom = verifyRoom\n  pc.remotePeer = remotePeer\n  pc.hostPeer = hostPeer\n  pc.handleSignal = handleSignal\n  pc.videoElement = videoElement\n  pc.audioElement = audioElement\n  pc.onConnect = onConnect\n  pc.createRoom = createRoom\n\n  return pc\n\n  function verifyRoom (room, cb) {\n    // ensure room is still open\n    nets({method: 'POST', uri: server + '/v1/' + room + '/pong', json: {ready: true}}, function response (err, resp, data) {\n      if (err) return cb(err)\n      if (resp.statusCode !== 200) return cb(new Error('Invalid or expired invite code'))\n      cb()\n    })\n  }\n\n  // get remote webrtc config (ice/stun/turn)\n  function getRemoteConfig (cb) {\n    nets({url: remoteConfigUrl, json: true}, function gotConfig (err, resp, config) {\n      if (err || resp.statusCode > 299) config = undefined // ignore errors\n      cb(null, config)\n    })\n  }\n\n  // try getusermedia and then upload sdp pong. this causes host to ping sdp back\n  function getAudio (cb) {\n    getUserMedia({audio: true, video: false}, function ok (stream) {\n      cb(null, stream)\n    },\n    function error (err) {\n      // screenshare even if remote doesnt wanna do audio\n      if (err.name === 'PermissionDeniedError' || err.name === 'DevicesNotFoundError') {\n        cb()\n      } else {\n        cb(err)\n      }\n    })\n  }\n\n  function remotePeer (config, room, cb) {\n    // listen for pings\n    var pingsUrl = server + '/v1/' + room + '/pings'\n    console.log('getting pings', pingsUrl)\n    var events = new EventSource(pingsUrl)\n    events.onmessage = function onMessage (e) {\n      console.log('pings onmessage', e.data)\n      var row\n      try {\n        row = JSON.parse(e.data)\n      } catch (e) {\n        row = {}\n        return cb(new Error('Error connecting. Please start over.'))\n      }\n\n      if (!row.data) {\n        return\n      }\n\n      inflate(row.data, function inflated (err, stringified) {\n        if (err) return cb(err)\n\n        pc.emit('getting-audio')\n        getAudio(function got (err, audioStream) {\n          if (err) return handleRTCErr(err, cb)\n          var peer = new SimplePeer({ trickle: false, config: config })\n          if (audioStream) peer._pc.addStream(audioStream)\n          peer.signal(JSON.parse(stringified.toString()))\n          cb(null, peer)\n        })\n      })\n\n      events.close()\n    }\n\n    events.onerror = function onError (e) {\n      cb(new Error('Error connecting. Please start over.'))\n      events.close()\n    }\n  }\n\n  function createRoom (cb) {\n    nets({method: 'POST', uri: server + '/v1'}, function response (err, resp, body) {\n      if (err) return cb(err)\n      var room = JSON.parse(body)\n      cb(null, room.name)\n    })\n  }\n\n  function hostPeer (opts, cb) {\n    var room = opts.room\n    var config = opts.config\n    var constraints = opts.constraints || defaultConstraints\n    var peer\n\n    // listen for pongs\n    var events = new EventSource(server + '/v1/' + room + '/pongs')\n    events.onmessage = function onMessage (e) {\n      console.log('pongs onmessage', e.data)\n      var row\n      try {\n        row = JSON.parse(e.data)\n      } catch (e) {\n        return cb(new Error('Error connecting. Please start over.'))\n      }\n\n      // other side is ready\n      if (row.ready) {\n        connect(row.data)\n      }\n\n      // sdp from other side\n      if (row.data) {\n        inflate(row.data, function inflated (err, stringified) {\n          if (err) {\n            return cb(new Error('Error connecting. Please start over.'))\n          }\n\n          peer.signal(JSON.parse(stringified.toString()))\n        })\n        events.close()\n      }\n\n      function connect (pong) {\n        // screensharing\n        getUserMedia(constraints, function (videoStream) {\n          // audio\n          getUserMedia({audio: true, video: false}, function (audioStream) {\n            peer = new SimplePeer({ initiator: true, trickle: false, config: config })\n            peer._pc.addStream(videoStream)\n            peer._pc.addStream(audioStream)\n            pc.emit('waiting-for-peer')\n            cb(null, peer)\n          }, function (err) { handleRTCErr(err, cb) })\n        }, function (err) { handleRTCErr(err, cb) })\n      }\n    }\n\n    events.onerror = function onError (e) {\n      cb(e)\n      events.close()\n    }\n  }\n\n  function handleRTCErr (err, cb) {\n    if (err.name === 'PermissionDeniedError') {\n      console.error('permission denied')\n      console.error(err)\n      cb(new Error('Screensharing permission denied'))\n    } else {\n      console.error('Unknown error', err)\n      cb(err)\n    }\n  }\n\n  function handleSignal (sdp, peer, remote, room, cb) {\n    deflate(sdp, function deflated (err, data) {\n      if (err) return cb(err)\n\n      // upload sdp\n      var uploadURL = server + '/v1/' + room\n      if (remote) uploadURL += '/pong'\n      else uploadURL += '/ping'\n\n      console.log('POST', uploadURL)\n      nets({method: 'POST', json: {data: data}, uri: uploadURL}, function response (err, resp, body) {\n        if (err || resp.statusCode > 299) return cb(err)\n        cb(null)\n      })\n    })\n  }\n\n  function onConnect (peer, remote) {\n    pc.emit('connected', peer, remote)\n    var video\n\n    if (remote) {\n      window.addEventListener('mouseup', mouseupListener)\n      window.addEventListener('keydown', keydownListener)\n    }\n\n    if (!remote) {\n      peer.on('data', function (data) {\n        if (!pc.robot) return\n        console.log(data)\n        pc.robot(data)\n      })\n      return\n    }\n\n    peer.on('close', function cleanup () {\n      window.removeEventListener('mouseup', mouseupListener)\n      window.removeEventListener('keydown', keydownListener)\n    })\n\n    function mouseupListener (e) {\n      var data = getMouseData(e)\n      data.click = true\n      console.log('send mouseup', data)\n      peer.send(data)\n    }\n\n    function keydownListener (e) {\n      e.preventDefault()\n\n      var data = {\n        keyCode: e.keyCode,\n        shift: e.shiftKey,\n        meta: e.metaKey,\n        control: e.ctrlKey,\n        alt: e.altKey\n      }\n\n      console.log('send key', data)\n      peer.send(data)\n    }\n\n    function getMouseData (e) {\n      var data = {}\n      data.clientX = e.clientX\n      data.clientY = e.clientY\n\n      if (!video) video = document.querySelector('video')\n      if (video) {\n        videoSize = video.getBoundingClientRect()\n        data.canvasWidth = videoSize.width\n        data.canvasHeight = videoSize.height\n      }\n\n      return data\n    }\n  }\n\n  function videoElement (stream) {\n    var video = document.createElement('video')\n    video.src = window.URL.createObjectURL(stream)\n    video.autoplay = true\n    return video\n  }\n\n  function audioElement (stream) {\n    var audio = document.createElement('audio')\n    audio.src = window.URL.createObjectURL(stream)\n    audio.autoplay = true\n    return audio\n  }\n\n  function inflate (data, cb) {\n    data = decodeURIComponent(data.toString())\n    zlib.inflate(new Buffer(data, 'base64'), cb)\n  }\n\n  function deflate (data, cb) {\n    // sdp is ~2.5k usually, that's too big for a URL, so we zlib deflate it\n    var stringified = JSON.stringify(data)\n    zlib.deflate(stringified, function (err, deflated) {\n      if (err) {\n        cb(err)\n        return\n      }\n      var connectionString = deflated.toString('base64')\n      var code = encodeURIComponent(connectionString)\n      cb(null, code)\n    })\n  }\n}\n"
        },
        {
          "name": "remote.html",
          "type": "blob",
          "size": 1.8662109375,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n    <title>ScreenCat</title>\n    <meta name=\"author\" content=\"max ogden\">\n    <meta name=\"description\" content=\"cool appz\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"stylesheets/css/tachyons.css\" />\n    <link rel=\"stylesheet\" href=\"stylesheets/css/screencat.css\" />\n    <style type=\"text/css\">\n      .video-container {\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        text-align: center;\n      }\n      \n      .video-container header {\n        overflow: auto;\n        line-height: 1rem;\n      }\n    </style>\n</head>\n<body class=\"wi-100\">\n\n  <div class=\"content-container\">\n    <header class=\"main-header bb b--light-gray pvs\">\n      <div class=\"center mw8 phm phl-ns\">\n        <h1 class=\"f3 book dib prm man\">ScreenCat</h1>\n        <div class=\"fr\">\n          <a class=\"back-button small link tc pas dn btn btn-plain\"></a>\n        </div>\n      </div>\n    </header>\n    <main class=\"center mw8 phm phl-ns ptl\">\n      <div class=\"join-container\">\n        <h2 class=\"f4 ttu book cl\">join</h2>\n        <div class=\"cr\">\n          <div class=\"w-80 left prl\">\n            <input type=\"text\" class=\"code-paste-input brs ba b--light-gray w-100 mw-fill\" autofocus></input>\n          </div>\n          <div class=\"w-20 left\">\n            <div class=\"code-paste-button tc phs pvs pvm-ns f4 btn w-100 mw-fill\">Connect</div>\n          </div>\n        </div>\n        <p>Enter your invite code to connect to a ScreenCat screen. To share your screen, <a href=\"https://github.com/maxogden/screencat#readme\">download ScreenCat.app</a>.</p>\n      </div>\n    </main>\n  </div>\n  \n  <div class=\"multimedia-container dn\">\n  </div>\n  \n  <script src=\"remote-bundle.js\"></script>\n</body>\n</html>\n"
        },
        {
          "name": "remote.js",
          "type": "blob",
          "size": 1.5322265625,
          "content": "var createPeerConnection = require('./peer.js')\nvar peerConnection = createPeerConnection()\nvar ui = require('./ui.js')\nvar connect = require('./connect.js')\n\nui.inputs.paste.value = 'Loading...'\nconnect.verifyUserRoom(peerConnection, ui, function (err, room, config) {\n  if (err) {\n    ui.inputs.paste.value = 'Error! ' + err.message\n    return\n  }\n  ui.inputs.paste.value = 'Waiting on other side...'\n  connect.remote(peerConnection, ui, config, room)\n})\n\npeerConnection.on('connected', function connected (peer) {\n  ui.inputs.paste.value = ''\n  ui.show(ui.containers.multimedia)\n  ui.hide(ui.containers.content)\n\n  peer.on('error', function error (err) {\n    console.error('peer error')\n    console.error(err)\n    ui.hide(ui.containers.multimedia)\n    ui.show(ui.containers.content)\n    ui.containers.join.innerHTML = 'Error connecting! Please Quit. ' + err.message\n  })\n\n  peer.on('close', function close () {\n    ui.hide(ui.containers.multimedia)\n    ui.show(ui.containers.content)\n    ui.containers.join.innerHTML = 'The remote user ended the sharing session.'\n    ui.containers.multimedia.innerHTML = ''\n  })\n})\n\nui.buttons.back.addEventListener('click', function (e) {\n  showChoose()\n})\n\npeerConnection.on('getting-audio', function () {\n  ui.inputs.paste.value = 'Please allow or deny voice chat...'\n})\n\npeerConnection.on('waiting-for-peer', function () {\n  ui.inputs.paste.value = 'Waiting for other side...'\n})\n\nfunction showChoose () {\n  ui.show(ui.containers.choose)\n  ui.hide(ui.containers.share)\n  ui.hide(ui.containers.join)\n  ui.hide(ui.buttons.back)\n}\n"
        },
        {
          "name": "robot.js",
          "type": "blob",
          "size": 1.8193359375,
          "content": "/* global screen */\nvar robot = require('robotjs')\nwindow.robot = robot\nvar vkey = require('vkey')\n\nmodule.exports = function createEvents (data) {\n  if (data.click) {\n    var x = scale(data.clientX, 0, data.canvasWidth, 0, screen.width)\n    var y = scale(data.clientY, 0, data.canvasHeight, 0, screen.height)\n    var pos = robot.getMousePos() // hosts current x/y\n    robot.moveMouse(x, y) // move to remotes pos\n    robot.mouseToggle('up', 'left') // set mouse position to up\n    robot.mouseClick() // click on remote click spot\n    robot.moveMouse(pos.x, pos.y) // go back to hosts position\n  }\n\n  if (data.keyCode) {\n    var k = vkey[data.keyCode].toLowerCase()\n    if (k === '<space>') k = ' '\n    var modifiers = []\n    if (data.shift) modifiers.push('shift')\n    if (data.control) modifiers.push('control')\n    if (data.alt) modifiers.push('alt')\n    if (data.meta) modifiers.push('command')\n    if (k[0] !== '<') {\n      console.log('typed ' + k + ' ' + JSON.stringify(modifiers))\n      if (modifiers[0]) robot.keyTap(k, modifiers[0])\n      else robot.keyTap(k)\n    } else {\n      if (k === '<enter>') robot.keyTap('enter')\n      else if (k === '<backspace>') robot.keyTap('backspace')\n      else if (k === '<up>') robot.keyTap('up')\n      else if (k === '<down>') robot.keyTap('down')\n      else if (k === '<left>') robot.keyTap('left')\n      else if (k === '<right>') robot.keyTap('right')\n      else if (k === '<delete>') robot.keyTap('delete')\n      else if (k === '<home>') robot.keyTap('home')\n      else if (k === '<end>') robot.keyTap('end')\n      else if (k === '<page-up>') robot.keyTap('pageup')\n      else if (k === '<page-down>') robot.keyTap('pagedown')\n      else console.log('did not type ' + k)\n    }\n  }\n}\n\nfunction scale (x, fromLow, fromHigh, toLow, toHigh) {\n  return (x - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow\n}\n"
        },
        {
          "name": "screen.html",
          "type": "blob",
          "size": 0.708984375,
          "content": "<!DOCTYPE HTML>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n    <title>ScreenCat</title>\n    <meta name=\"author\" content=\"max ogden\">\n    <meta name=\"description\" content=\"cool appz\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"stylesheets/css/tachyons.css\" />\n    <link rel=\"stylesheet\" href=\"stylesheets/css/screencat.css\" />\n</head>\n<body class=\"wi-100\">\n  <div class=\"content-container\">\n    <input class=\"code-paste-input pam brs ba b--light-gray w-100 mw-fill\" value=\"Loading...\"></input>\n  </div>\n  <div class=\"multimedia-container\"></div>\n  <script src=\"screen.js\"></script>\n</body>\n</html>\n"
        },
        {
          "name": "screen.js",
          "type": "blob",
          "size": 0.775390625,
          "content": "var ipc = require('ipc')\nvar createPeerConnection = require('./peer.js')\nvar ui = require('./ui.js')\nvar connect = require('./connect.js')\n\nvar peerConnection = createPeerConnection()\n\nipc.send('window-ready', true)\n\nipc.on('peer-config', function (config) {\n  connect.remote(peerConnection, ui, config.config, config.room)\n})\n\npeerConnection.on('connected', function connected (peer) {\n  ui.show(ui.containers.multimedia)\n  ui.hide(ui.containers.content)\n\n  peer.on('error', function error (err) {\n    console.error('peer error')\n    console.error(err)\n    ui.containers.content.innerHTML = 'Error connecting! Please Quit. ' + err.message\n    ipc.send('disconnected', true)\n  })\n\n  peer.on('close', function close () {\n    ipc.send('disconnected', true)\n  })\n\n  ipc.send('connected', true)\n})\n"
        },
        {
          "name": "stylesheets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ui.js",
          "type": "blob",
          "size": 1.4306640625,
          "content": "var ui = {}\n\nmodule.exports = ui\n\nui.show = show\nui.hide = hide\n\nui.containers = {\n  share: document.querySelector('.share-container'),\n  join: document.querySelector('.join-container'),\n  content: document.querySelector('.content-container'),\n  choose: document.querySelector('.choose-container'),\n  capturer: document.querySelector('.capturer-container'),\n  multimedia: document.querySelector('.multimedia-container'),\n  sharing: document.querySelector('.sharing-container'),\n  viewing: document.querySelector('.viewing-container'),\n  mdns: document.querySelector('.code-mdns')\n}\n\nui.buttons = {\n  share: document.querySelector('.share-button'),\n  join: document.querySelector('.join-button'),\n  copy: document.querySelector('.code-copy-button'),\n  paste: document.querySelector('.code-paste-button'),\n  quit: document.querySelector('.quit-button'),\n  back: document.querySelector('.back-button'),\n  destroy: document.querySelector('.sharing-container .destroy-button'),\n  stopViewing: document.querySelector('.viewing-container .destroy-button'),\n  show: document.querySelector('.viewing-container .show-button'),\n  mdns: document.querySelector('.code-mdns-button')\n}\n\nui.inputs = {\n  copy: document.querySelector('.code-copy-input'),\n  paste: document.querySelector('.code-paste-input')\n}\n\nfunction show (ele) {\n  if (!ele) return\n  ele.classList.remove('dn')\n}\n\nfunction hide (ele) {\n  if (!ele) return\n  ele.classList.add('dn')\n  ele.classList.remove('db')\n}\n"
        }
      ]
    }
  ]
}