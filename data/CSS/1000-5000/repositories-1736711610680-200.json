{
  "metadata": {
    "timestamp": 1736711610680,
    "page": 200,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "douban/code",
      "stars": 1809,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": "*.pyc\n*.DS_Store\n*.ropeproject\n*.sw[po]\n/venv\n/permdir\n/tmpdir\n/vilya/permdir\n/vilya/tmpdir\nnode_modules\n/dist\n.tmp\n.sass-cache\nlocal_config.py\nvilya.log\n.vagrant/\ncode.local.env\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8349609375,
          "content": "language: python\n\npython:\n  - 2.7\n\nservices:\n  - redis-server\n  - memcache\n  - mysql\n\nbefore_script:\n  - memcached -p 11311 -d\n  - memcached -p 7901 -d\n  - memcached -p 7902 -d\n  - memcached -p 7903 -d\n  - mysql -e 'drop database if exists valentine;'\n  - mysql -e 'create database valentine;'\n  - mysql -D valentine < vilya/databases/schema.sql\n\ninstall:\n  - pip install -r requirements.txt\n\nscript:\n  - >\n      py.test tests --ignore=tests/test_git.py\n      --ignore=tests/test_git_commit_one_file.py\n      --ignore=tests/test_gyt.py --ignore=tests/test_project_git_calls.py\n      --ignore=tests/pulls/test_model.py --ignore=tests/pulls/test_ticket.py\n      --ignore=tests/issues/test_project_issue.py\n      --ignore=tests/issues/test_issue.py\n      --ignore=tests/test_stat.py --ignore=tests/test_test.py\n      --ignore=tests/pulls/test_pullrequest.py\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2646484375,
          "content": " * hongqn - pullrequest & code review\n * qingfeng - 其他 转换框架到quixote\n * mengwei - 前期构建\n * fengji - 前期构建\n * libohan - Hooks & API\n * zhangchi - Notifications\n * xingben - 各种提醒,UI的精简,向github致敬\n * lijunpeng - trello卡片墙\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.5712890625,
          "content": "FROM ubuntu:14.04\nMAINTAINER Dongweiming \"ciici123@gmail.com\"\n\nENV DEBIAN_FRONTEND noninteractive\nENV CODE_ENV \"unset\"\n\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\" > /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN echo \"deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse\" >> /etc/apt/sources.list\nRUN apt-get update\n\nRUN apt-get install curl python -yq\nRUN curl -O https://raw.githubusercontent.com/douban/code/master/scripts/install_code.sh\nRUN /bin/bash install_code.sh\nRUN rm -rf install_code.sh\nEXPOSE 8000\nWORKDIR /code\n"
        },
        {
          "name": "Gruntfile.js",
          "type": "blob",
          "size": 13.7099609375,
          "content": "module.exports = function(grunt) {\n    grunt.initConfig({\n        meta: {\n            src: 'hub/static/',\n            dest: 'dist/',\n            appOzConfig: {\n                baseUrl: '<%= meta.src %>js/',\n                distUrl: '<%= meta.dest %>js/',\n                disableAutoSuffix: true,\n                ignore: [ 'jquery', 'jquery-tmpl', 'mustache', 'bootbox', 'bootstrap',\n                          'spin', 'jquery-timeago', 'jquery-forms', 'jquery-atwho',\n                          'jquery-caret', 'jquery-zclip', 'jquery-lazyload', 'jquery-unobstrusive',\n                          'jquery-tooltipster']\n            }\n        },\n        ozma: {\n            common: {\n                src: 'hub/static/js/mod/common.js',\n                config: {\n                    baseUrl: '<%= meta.src %>js/',\n                    distUrl: '<%= meta.dest %>js/',\n                    loader: 'lib/oz.js',\n                    disableAutoSuffix: true\n                }\n            },\n            raven: {\n                src: 'hub/static/js/mod/raven.js',\n                config: {\n                    baseUrl: '<%= meta.src %>js/',\n                    distUrl: '<%= meta.dest %>js/',\n                    loader: 'lib/oz.js',\n                    disableAutoSuffix: true\n                }\n            },\n            badge: {\n                src: 'hub/static/js/app/badge/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            create: {\n                src: 'hub/static/js/app/create/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            explore: {\n                src: 'hub/static/js/app/explore/main.js',\n                config: '<%= meta.appOzConfig %>',\n            },\n            public_timeline: {\n                src: 'hub/static/js/app/explore/public_timeline.js',\n                config: '<%= meta.appOzConfig %>',\n            },\n            notify_timeline: {\n                src: 'hub/static/js/app/explore/notify_timeline.js',\n                config: '<%= meta.appOzConfig %>',\n            },\n            gist: {\n                src: 'hub/static/js/app/gist/gist.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            gist_edit: {\n                src: 'hub/static/js/app/gist/edit.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            gist_main: {\n                src: 'hub/static/js/app/gist/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            graph: {\n                src: 'hub/static/js/app/graph/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            home: {\n                src: 'hub/static/js/app/home/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            settings: {\n                src: 'hub/static/js/app/home/settings.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            userfeed_timeline: {\n                src: 'hub/static/js/app/home/userfeed_timeline.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            hook: {\n                src: 'hub/static/js/app/hook/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            people: {\n                src: 'hub/static/js/app/people/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            praise: {\n                src: 'hub/static/js/app/praise/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            pull: {\n                src: 'hub/static/js/app/pull/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            pull_new: {\n                src: 'hub/static/js/app/pull/new.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            pulls: {\n                src: 'hub/static/js/app/pull/pulls.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            src: {\n                src: 'hub/static/js/app/src/src.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            commit: {\n                src: 'hub/static/js/app/src/commit.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            compare: {\n                src: 'hub/static/js/app/src/compare.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            src_edit: {\n                src: 'hub/static/js/app/src/editor.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            search: {\n                src: 'hub/static/js/app/search/search.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            m: {\n                src: 'hub/static/js/app/m/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            team: {\n                src: 'hub/static/js/app/team/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            team_group: {\n                src: 'hub/static/js/app/team/group.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            team_settings: {\n                src: 'hub/static/js/app/team/settings.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            team_add_project: {\n                src: 'hub/static/js/app/team/add_project.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            teamfeed_timeline: {\n                src: 'hub/static/js/app/team/teamfeed_timeline.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            issue: {\n                src: 'hub/static/js/app/issue/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            issue_new: {\n                src: 'hub/static/js/app/issue/new.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            issues: {\n                src: 'hub/static/js/app/issue/issues.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            team_issue: {\n                src: 'hub/static/js/app/issue/team-issue.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            notification: {\n                src: 'hub/static/js/app/settings/notification.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            codereview: {\n                src: 'hub/static/js/app/settings/codereview.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            watch: {\n                src: 'hub/static/js/app/watching/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            chat: {\n                src: 'hub/static/js/app/chat/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            center: {\n                src: 'hub/static/js/app/center/main.js',\n                config: '<%= meta.appOzConfig %>'\n            },\n            stat: {\n                src: 'hub/static/js/app/stat/main.js',\n                config: '<%= meta.appOzConfig %>'\n            }\n        },\n        copy: {\n        },\n        lint: {\n            files: [ 'hub/static/js/app/**/*.js', 'hub/static/js/mod/**/*.js' ]\n        },\n        uglify: {\n            //options: {\n                //compress: true,\n                //mangle: true\n            //},\n            dynamic_mappings: {\n              files: [\n                {\n                    expand: true,\n                    cwd: '<%= meta.dest %>js/',\n                    src: ['**/?*.js'],\n                    dest: '<%= meta.dest %>js/',\n                },\n              ],\n            }\n        },\n        clean: [ 'dist/*' ],\n        watch: {\n            js: {\n                files: [ 'hub/static/js/**/*.js' ],\n                tasks: [ 'ozma' ]\n            },\n            scss: {\n              files: ['hub/static/css/**/*.scss'],\n              tasks: ['compass:dev']\n            }\n        },\n        compass: {\n            dev: {\n                options: {\n                    sassDir: '<%= meta.src %>css',\n                    cssDir: '<%= meta.dest %>css',\n                    noLineComments: false,\n                    force: true,\n                    importPath: '<%= meta.src %>',\n                    outputStyle: 'expanded'\n                }\n            },\n            prod: {\n                options: {\n                    sassDir: '<%= meta.src %>css',\n                    cssDir: '<%= meta.dest %>css',\n                    noLineComments: true,\n                    force: true,\n                    importPath: '<%= meta.src %>',\n                    outputStyle: 'compressed',\n                    environment: 'production'\n                }\n            },\n            dynamic_mappings: {\n              files: [\n                {\n                  expand: true,\n                  cwd: '<%= meta.src %>css/',\n                  src: ['**/?.scss'],\n                  dest: '<%= meta.dest %>css/',\n                  ext: '.css'\n                }\n              ]\n            }\n        },\n        deploy: {\n            'static': {\n                before_deploy: 'build',\n                submodule_dir: 'dist/',\n                submodule_commit_comment: 'deploy static files'\n            }\n        },\n    });\n\n    grunt.registerTask('default', 'dev');\n    grunt.registerTask('build', ['clean', 'ozma', 'uglify', 'compass:prod']);\n    grunt.registerTask('dev', ['clean', 'ozma', 'compass:dev']);\n\n    grunt.loadNpmTasks('grunt-contrib-watch');\n    grunt.loadNpmTasks('grunt-contrib-clean');\n    grunt.loadNpmTasks('grunt-contrib-copy');\n    grunt.loadNpmTasks('grunt-contrib-compass');\n    grunt.loadNpmTasks('grunt-contrib-uglify');\n    grunt.loadNpmTasks('grunt-ozjs');\n\n    grunt.registerMultiTask('deploy', 'Deploy submodule files', function() {\n        var data = this.data,\n            beforeCmd = data.before_deploy || '',\n            afterCmd = data.after_deploy || ',',\n            submoduleDirPath = data.submodule_dir,\n            submoduleDir,\n            comment = data.submodule_commit_comment || 'update';\n\n        if (submoduleDir = grunt.file.findup(submoduleDirPath)) {\n            try {\n                this.requires(beforeCmd);\n                var taskDone = this.async();\n                var oldBase = process.cwd();\n                grunt.log.ok('Grunt command: ' + beforeCmd + ' ok!');\n                grunt.file.setBase(submoduleDir);\n                grunt.util.async.series([\n                    // git add -A\n                    function(done) {\n                        grunt.log.writeln('git add -A');\n                        grunt.util.spawn({\n                            cmd: 'git',\n                            args: [ 'add', '-A' ]\n                        }, function(error, result, code) {\n                            if (code === 0) {\n                                done(null);\n                            } else {\n                                done(error);\n                            }\n                        });\n                    },\n                    // git commit -m\n                    function(done) {\n                        grunt.log.writeln('git commit -m');\n                        grunt.util.spawn({\n                            cmd: 'git',\n                            args: [ 'commit', '-m', comment ]\n                        }, function(error, result, code) {\n                            if (code === 0) {\n                                done(null);\n                            } else {\n                                done(result.stdout);\n                            }\n                        });\n                    },\n                    // git push\n                    function(done) {\n                        grunt.log.writeln('git push');\n                        grunt.util.spawn({\n                            cmd: 'git',\n                            args: [ 'push' ]\n                        }, function(error, result, code) {\n                            if (code === 0) {\n                                done(null);\n                            } else {\n                                done(error);\n                            }\n                        });\n                    },\n                    // git rev-parse HEAD\n                    function(done) {\n                        grunt.util.spawn({\n                            cmd: 'git',\n                            args: [ 'rev-parse', 'HEAD' ]\n                        }, function(error, result, code) {\n                            if (code === 0) {\n                                grunt.log.ok('Static files deployed @version: ' + result.stdout);\n                                done(null);\n                            } else {\n                                done(error);\n                            }\n                        });\n                    },\n                    // return to BASE and add submodule dir\n                    function(done) {\n                        grunt.file.setBase(oldBase);\n                        grunt.log.writeln('git add ' + submoduleDirPath);\n                        grunt.util.spawn({\n                            cmd: 'git',\n                            args: [ 'add', submoduleDirPath ]\n                        }, function(error, result, code) {\n                            if (code === 0) {\n                                grunt.log.ok('Git add submodule: ' + submoduleDirPath);\n                                done(null);\n                            } else {\n                                done(error);\n                            }\n                        });\n                    }\n                ], function(error, result) {\n                    if (error) {\n                        grunt.fail.fatal(error);\n                        grunt.file.setBase(oldBase);\n                    }\n                    taskDone();\n                });\n            } catch(ex) {\n                grunt.task.run([ beforeCmd, this.name + ':' + this.target ]);\n            }\n        } else {\n            grunt.log.error('Submodule directory: ' + submoduleDirPath + ' is not exsit.');\n        }\n    });\n};\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.458984375,
          "content": "Copyright (c) 2013-2016, Douban Inc.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of the Douban Inc. nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL DOUBAN INC. BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5546875,
          "content": "nothing:\n\t@echo \"Better make nothing be default\"\n\nctags:\n\t@ctags -R --exclude=dist --exclude=venv --exclude=permdir --exclude=tmpdir --exclude=node_modules\n\nclean_pyc:\n\t@find . -type f -name '*.pyc' -delete;\n\npylint:\n\t@pylint --errors-only --reports=n --include-ids=y --output-format=parseable  --ignore=tracplugs active_stubs/ libs/ models/ static/ stubs/ tasks/ tests/ tools/ views/\n\nweb: startcache startweb\n\t@echo go web: http://localhost:8000/\n\nstartweb:\n\texec gunicorn -b 0.0.0.0:8000 app:app\n\nstartcache:\n\texec memcached -d -u nobody -l 127.0.0.1 -p 11311 -U 0\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.30078125,
          "content": "[![Build Status](https://travis-ci.org/douban/code.png?branch=master)](https://travis-ci.org/douban/code)\n\nDouban CODE\n===========\n\n* Website: <http://douban-code.github.io>\n* Guide: <http://douban-code.github.io/pages/getting-started.html>\n\nDependency\n----------\n- libmc <https://github.com/douban/libmc>\n- Python 2.7+\n- pip >= 1.4.1\n\nDocker Installation\n-------------------\n\n1. Intall [Docker Engine](https://docs.docker.com/engine/installation/)\n   and [Docker Compose](https://docs.docker.com/compose/install/).\n2. Note the Docker host IP address, if you are using a Docker Machine VM,\n   you can use the `docker-machine ip MACHINE_NAME` to get the IP address.\n3. `cp code.local.env.sample code.local.env`\n    then change the value of `DOUBAN_CODE_DOMAIN` to `http://IP:8200`.\n4. `docker-compose build`\n5. `docker-compose up -d`\n6. `mysql -udouban_code -pmy-code-passwd -h IP -D valentine < vilya/databases/schema.sql`\n7. open http://IP:8200\n\nVagrant Installation(Recommended)\n--------------------\n\n```\n$cd code\n$vagrant up\n$vagrant ssh\n# In ubuntu. we use `supervisor` to monitor and control CODE and other services.\n#You just go web http://localhost:8200\n```\n\nQuick Installation\n------------------\nCurrently supports following systems:\n\n* gentoo\n* ubuntu/debian\n* centos/redhat/fedora\n* opensuse\n* archlinux\n\nYou only need to execute:\n\n```\n$bash <(curl -s https://raw.githubusercontent.com/douban/code/master/scripts/install_code.sh)\n```\n\nThen install & run `supervisor` to monitor and control all services of code.\n\n```\npip install supervisor\nsudo wget -O /etc/init.d/supervisor https://raw.githubusercontent.com/Supervisor/initscripts/master/ubuntu\nsudo chmod +x /etc/init.d/supervisor\nsudo cp scripts/supervisord.conf /etc/supervisord.conf\nsudo cp scripts/code.conf /etc/supervisor/conf.d/code.conf\nsudo /etc/init.d/supervisor start\n# go web http://localhost:8200\n```\n\nNotes: The installation script is in `scripts` subdirectory, for example for ubuntu/debian,\nyou can find `scripts/ubuntu.sh`\n\nFAQ\n----\n\n1. single http daemon\n - `gunicorn -b 127.0.0.1:8001 app:app` # git http daemon\n\n2. vilya.config.DOMAIN\n - if you run 'gunicorn -b IP:PORT app:app', the DOMAIN should be 'http://IP:PORT'\n\n\nLicense\n-------\nCODE is under Revised BSD License.\nSee the [LICENSE file](https://github.com/douban/code/blob/master/LICENSE) for the full license text.\n"
        },
        {
          "name": "Vagrantfile",
          "type": "blob",
          "size": 0.2392578125,
          "content": "# -*- mode: ruby -*-\n\nVagrant.configure(2) do |config|\n  config.vm.box = \"dongweiming/code\"\n\n  config.vm.network :forwarded_port, guest: 8200, host: 8200\n  for i in 29000..30000\n    config.vm.network :forwarded_port, guest: i, host: i\n  end\nend\n"
        },
        {
          "name": "app.py",
          "type": "blob",
          "size": 0.57421875,
          "content": "# -*- coding: utf-8 -*-\n\nimport re\nfrom gevent import monkey; monkey.patch_all()\nfrom web import app as web\nfrom app_sina import app as git_http\n\n\nROUTE_MAP = [(re.compile(r'/[^/]*\\.git.*'), git_http),\n             (re.compile(r'/[^/]*/([^/]*)\\.git.*'), git_http),\n             (re.compile(r'/.*'), web)]\n\n\nclass Application(object):\n\n    def __call__(self, environ, start_response):\n        for rule, func in ROUTE_MAP:\n            if rule.match(environ['PATH_INFO']):\n                return func(environ, start_response)\n        return web(environ, start_response)\n\napp = Application()\n"
        },
        {
          "name": "app_sina.py",
          "type": "blob",
          "size": 4.4521484375,
          "content": "# coding:utf8\nimport os\nimport select\nimport subprocess\nfrom wsgiauth.basic import BasicAuth\n\nfrom sina import Sina\nfrom sina.config import DEFAULT_CONFIG\n\nfrom vilya.config import DEVELOP_MODE\nfrom vilya.libs.permdir import get_repo_root\nfrom vilya.models.project import CodeDoubanProject\nfrom vilya.models.gist import Gist\nfrom vilya.models.user import User\n\nDOUBAN_REALM = \"douban wsgi basic auth\"\nDEFAULT_CONFIG['project_root'] = get_repo_root()\napp = Sina(DEFAULT_CONFIG)\n\n\n# @app.get_repo_path\ndef get_repo_path_handler(environ, path):\n    return ''\n\n\n# @app.before_request\ndef before_request_handler(environ):\n    return\n\n\n@app.has_permission\ndef has_permission_handler(environ, path, perm):\n\n    if DEVELOP_MODE:\n        return True\n\n    username = environ.get('REMOTE_USER')\n\n    # if len(path) < 4:\n    #    return\n    name = path[:-4]\n\n    # gist\n    if name.startswith('gist/'):\n        gist_id = name.rpartition(\"/\")[-1]\n        gist = Gist.get(gist_id)\n        if not gist:\n            return\n\n        if perm == 'read':\n            return True\n\n        if not username:\n            return\n\n        return gist.owner_id == username\n\n    # project\n    project = CodeDoubanProject.get_by_name(name)\n    if not project:\n        return\n\n    if perm == 'read':\n        return True\n\n    if not username:\n        return\n    if not project.can_push:\n        # merge only\n        return\n    return project.has_push_perm(username)\n\n\ndef authfunc(env, username, passwd):\n    if DEVELOP_MODE or (env['REMOTE_ADDR'] == '127.0.0.1'\n                        and env['HTTP_HOST'] == 'localhost:8080'):\n        return True\n\n    if not passwd:\n        return\n\n    if username == 'code' and passwd == 'code':\n        return True\n\n    user = User.get_by_name(username)\n    if user and user.validate_password(passwd):\n        return True\n\n    is_push = 'service=git-receive-pack' in env['QUERY_STRING'] \\\n              or '/git-receive-pack' in env['PATH_INFO']\n    if is_push:\n        pass\n        # FIXME: push permission\n    return True\n\n\ndef is_git_push_url(url, query=None):\n    if 'service=git-receive-pack' in query:\n        return True\n    if '/git-receive-pack' in url:\n        return True\n    return False\n\n\ndef get_proj(path):\n    '''\n    >>> get_proj('/a.git/info/refs')\n    'a'\n    >>> get_proj('/testuser/a.git/info/refs')\n    'testuser/a'\n    '''\n    path_split = path.split(\"/\")\n    git_name = path_split[1]\n    if not git_name.endswith('.git'):\n        git_name = \"/\".join(path_split[1:3])\n    assert \".\" in git_name, \"Need a string looking like project.git, got '%s'\" % git_name  # noqa\n    proj_name, _ = os.path.splitext(git_name)\n    return proj_name\n\n\nclass HTTPAuth(object):\n    def __init__(self, application, realm, authfunc, scheme, **kw):\n        self.application = application\n        self.authenticate = scheme(realm, authfunc, **kw)\n        self.scheme = scheme.authtype\n\n    def __call__(self, environ, start_response):\n        if not is_git_push_url(environ['PATH_INFO'], environ['QUERY_STRING']):\n            # passthrough basic auth\n            return self.application(environ, start_response)\n\n        if environ.get('REMOTE_USER') is None:\n            result = self.authenticate(environ)\n            if not isinstance(result, str):\n                # Request credentials if authentication fails\n                return result(environ, start_response)\n            environ['REMOTE_USER'] = result\n            # git hook env\n            environ['env'] = {'CODE_REMOTE_USER': result}\n            environ['AUTH_TYPE'] = self.scheme\n        return self.application(environ, start_response)\n\n\nclass GitDispatcher(object):\n\n    def __init__(self, git_app, web_app):\n        self.instances = {\n            'git_app': git_app,\n            'web_app': web_app,\n        }\n\n    def get_application(self, user_agent):\n        if user_agent and 'git' not in user_agent:\n            return self.instances['web_app']\n        return self.instances['git_app']\n\n    def __call__(self, environ, start_response):\n        user_agent = environ.get('HTTP_USER_AGENT')\n        app = self.get_application(user_agent)\n        return app(environ, start_response)\n\n\nclass RedirectWeb(object):\n\n    def __call__(self, environ, start_response):\n        path_info = environ.get('PATH_INFO')\n        proj_name = get_proj(path_info)\n        start_response('301 Redirect', [('Location', '/%s/' % proj_name), ])\n        return []\n\n\nredirect_app = RedirectWeb()\napp = HTTPAuth(app, DOUBAN_REALM, authfunc, BasicAuth)\napp = GitDispatcher(git_app=app, web_app=redirect_app)\n"
        },
        {
          "name": "celeryconfig.py",
          "type": "blob",
          "size": 0.5673828125,
          "content": "# coding=utf-8\nfrom kombu import Queue\n\nfrom vilya.config import REDIS_URI\n\nBROKER_URL = REDIS_URI\nCELERY_RESULT_BACKEND = REDIS_URI\nCELERY_TIMEZONE = 'UTC'\n\nCELERY_IMPORTS = ('tasks', )\n\nCELERY_DEFAULT_QUEUE = 'default'\nCELERY_QUEUES = (\n    Queue('default',    routing_key='task.#'),\n    Queue('feed_tasks', routing_key='feed.#'),\n)\nCELERY_DEFAULT_EXCHANGE = 'tasks'\nCELERY_DEFAULT_EXCHANGE_TYPE = 'topic'\nCELERY_DEFAULT_ROUTING_KEY = 'task.default'\nCELERY_ROUTES = {\n    'feeds.tasks.import_feed': {\n        'queue': 'feed_tasks',\n        'routing_key': 'feed.import',\n    },\n}\n"
        },
        {
          "name": "code.env",
          "type": "blob",
          "size": 0.4931640625,
          "content": "# MySQL\nMYSQL_ROOT_PASSWORD=my-secret-passwd\nMYSQL_DATABASE=valentine\nMYSQL_USER=douban_code\nMYSQL_PASSWORD=my-code-passwd\nMYSQL_ALLOW_EMPTY_PASSWORD=no\n\n# douban code\nDOUBAN_CODE_MEMCACHED_HOSTS=memcached:11311\nDOUBAN_CODE_DOUBANDB_SERVERS=memcached:11311\nDOUBAN_CODE_DOUBANDB_PROXIES=\nDOUBAN_CODE_MYSQL_STORE={\"farms\": {\"code_farm\": {\"master\": \"mysql:3306:valentine:douban_code:my-code-passwd\", \"tables\": [\"*\"]}}}\nDOUBAN_CODE_REDIS_URI=redis://redis:6379/0\nDOUBAN_CODE_DOMAIN=http://192.168.99.100:8200\n"
        },
        {
          "name": "code.local.env.sample",
          "type": "blob",
          "size": 0.044921875,
          "content": "DOUBAN_CODE_DOMAIN=http://192.168.99.100:8200\n"
        },
        {
          "name": "code_config.yaml",
          "type": "blob",
          "size": 0.201171875,
          "content": "docs:\n    pages:\n        builder: raw\n        dir: blog/output\n        name: Blog\n        sort: 1\n    docs:\n        builder: pickle\n        dir: docs\n        name: Docs\n        sort: 2\nonimaru: /public/code"
        },
        {
          "name": "default_code_config.yaml",
          "type": "blob",
          "size": 0.451171875,
          "content": "\n## Code-Douban config file\n## -----------------------\n##\n## YAML format\n\n## Docs functionality in Code allow your project to host\n## some content like a documentation or a blog.\n## By default, we have a sphinx builder running on\n## the rst files found in the docs/ directory, if any.\n\ndocs:\n  rstdocs:\n    dir: docs\n    builder: pickle\n    name: Docs\n\n# CSS customization\nstyle:\n  projhead: \"\"  # Inline styling for project head block\n\n# Onimaru url\nonimaru: ''"
        },
        {
          "name": "dispatches",
          "type": "tree",
          "content": null
        },
        {
          "name": "dist",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-common.yml",
          "type": "blob",
          "size": 0.20703125,
          "content": "code:\n  volumes:\n    - .:/code\n  working_dir: /code\n  env_file:\n    - ./code.env\n    - ./code.local.env\n\nnode:\n  build: ./dockerfiles/node\n  working_dir: /code\n  env_file:\n    - ./code.env\n    - ./code.local.env\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.787109375,
          "content": "web:\n  extends:\n    file: docker-common.yml\n    service: code\n  build: ./dockerfiles/python\n  command: gunicorn -b 0.0.0.0:8200 --reload app:app\n  ports:\n    - \"8200:8200\"\n  links:\n    - \"mysql\"\n    - \"memcached\"\n    - \"redis\"\n\nwebpack:\n  extends:\n    file: docker-common.yml\n    service: node\n  command: bash -c \"cp -R /node_modules /code; npm run build; npm run watch\"\n  volumes_from:\n    - web\n\ngrunt:\n  extends:\n    file: docker-common.yml\n    service: node\n  command: bash -c \"cp -R /node_modules /code; grunt ozma compass:dev; grunt watch\"\n  volumes_from:\n    - web\n\nmysql:\n  build: ./dockerfiles/mysql\n  env_file:\n    - ./code.env\n    - ./code.local.env\n  ports:\n    - \"3306:3306\"\n\nmemcached:\n  image: memcached:1.4\n  ports:\n    - \"11211:11211\"\n\nredis:\n  image: redis:3.0\n  ports:\n    - \"6379:6379\"\n"
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "favicon.ico",
          "type": "blob",
          "size": 1.123046875,
          "content": null
        },
        {
          "name": "hub",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.0283203125,
          "content": "dockerfiles/node/package.json"
        },
        {
          "name": "requirements.txt",
          "type": "blob",
          "size": 0.0341796875,
          "content": "dockerfiles/python/requirements.txt"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_databases.sh",
          "type": "blob",
          "size": 0.4716796875,
          "content": "#!/bin/bash\nread -p \"Please input Mysql User(default is root):\" user\nif [ \"${user}\" = \"\" ];then\n    user=\"root\"\nfi\nread -p \"Please input Mysql ${user}'s password(default is ''):\" passwd\necho \"drop database if exists valentine\" | mysql --user=${user} --password=${passwd}\necho \"create database valentine\" | mysql --user=${user} --password=${passwd}\nif [ $? -ne 0 ]; then\n    exit 1\nfi\n(echo \"use valentine\"; cat vilya/databases/schema.sql) | mysql --user=${user} --password=${passwd}\n"
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 4.1640625,
          "content": "# -*- coding: utf-8 -*-\nfrom datetime import datetime\n\nfrom ellen.utils import JagareError\nfrom celery.schedules import crontab\nfrom celery.task import periodic_task\n\nfrom vilya.libs.store import store\nfrom vilya.models.project import CodeDoubanProject\nfrom vilya.models.doc import DocBuilder\nfrom vilya.models.sphinx_docs import SphinxDocs\nfrom vilya.models.elastic.issue_pr_search import IssuePRSearch\nfrom vilya.models.elastic.indexer import IndexEngine\nfrom vilya.models.user import get_users, clean_user_pulls\nfrom vilya.models.team import Team\nfrom vilya.models.ticket import TicketRank\nfrom vilya.libs.gyt import is_git_dir\nfrom vilya.libs.mq import async\n\n\n# TODO: use sentry to catch exception\n# TODO: move data accessors (mc keys) to model\n\n\ndef get_teams():\n    rs = store.execute('select id from team')\n    for id, in rs:\n        yield Team.get(id)\n\n\ndef get_projects():\n    rs = store.execute('select project_id from codedouban_projects')\n    for proj_id, in rs:\n        yield CodeDoubanProject.get(proj_id)\n\n\ndef get_origin_projects():\n    rs = store.execute(\n        'select project_id from codedouban_projects where project_id=origin_project')  # noqa\n    for proj_id, in rs:\n        yield CodeDoubanProject.get(proj_id)\n\n\ndef get_mirror_projects():\n    rs = store.execute(\n        'select project_id from codedouban_projects where owner_id=mirror')\n    for proj_id, in rs:\n        yield CodeDoubanProject.get(proj_id)\n\n\n@async\ndef sphinx_builds_add(docs):\n    docs.build_all()\n\n\n@periodic_task(run_every=crontab(minute=0, hour=0))\ndef update_user_contributions():\n    from vilya.models.contributions import UserContributions\n    users = get_users()\n    for user in users:\n        UserContributions.update_by_user(user.name)\n\n\n@periodic_task(run_every=crontab(minute=0, hour=6, day_of_week='sat'))\ndef project_fsck_and_gc():\n    weekday = datetime.today().weekday()\n    if weekday != 6:\n        return\n    result = get_projects()\n    for proj in result:\n        if is_git_dir(proj.git_dir) and not proj.git.is_empty():\n            proj.git.call('fsck --full')\n            proj.git.call('gc')\n            proj.git.call('repack -adf')\n\n\n@periodic_task(run_every=crontab(minute='*/30'))\ndef check_doc_builds():\n    for proj in get_origin_projects():\n        doc = DocBuilder(proj)\n        if doc.can_build:\n            sphinx_builds_add(doc)\n\n\n@periodic_task(run_every=crontab(minute='*/30'))\ndef check_sphinx_builds():\n    for proj in get_origin_projects():\n        try:\n            docs = SphinxDocs(proj.name)\n        except JagareError:\n            continue\n        if not docs.enabled or not docs.need_rebuild():\n            continue\n        sphinx_builds_add(docs)\n\n\n@periodic_task(run_every=crontab(minute=0, hour=6))\ndef update_elastic_index():\n    results = get_projects()\n    IndexEngine.delete_mapping('pull')\n    IndexEngine.delete_mapping('issue')\n    for proj in results:\n        try:\n            IssuePRSearch.index_a_project(proj)\n        except:\n            pass\n\n\n@periodic_task(run_every=crontab(minute=0, hour=1))\ndef fetch_mirror_project():\n    results = get_mirror_projects()\n    for project in results:\n        project.fetch()\n\n\n@periodic_task(run_every=crontab(minute='*/15'))\ndef fetch_mirror_project_per_15m():\n    results = get_mirror_projects()\n    for project in results:\n        mirror = project.mirror\n        if mirror and mirror.frequency == 15:\n            project.fetch()\n\n\n@periodic_task(run_every=crontab(minute=15))\ndef update_user_pulls():\n    users = get_users()\n    for user in users:\n        clean_user_pulls(user)\n\n\n@periodic_task(run_every=crontab(minute=0, hour=12, day_of_week='sun'))\ndef send_team_week_report():\n    from dispatches import dispatch\n    for team in get_teams():\n        if team.weekly:\n            dispatch(\"weekly\", data=dict(team_id=team.id))\n\n\n@periodic_task(run_every=crontab(minute=0, hour='*'))\ndef update_ticket_rankscore_null():\n    TicketRank.count_ticket_rank(False)\n\n\n@periodic_task(run_every=crontab(minute=0, hour=0))\ndef update_ticket_rankscore_closed():\n    TicketRank.count_ticket_rank(True)\n\n\ndef index_srcs_action():\n    pass\n\n\ndef index_repos_action():\n    pass\n\n\ndef index_users_action():\n    pass\n\n\ndef index_a_project_docs():\n    pass\n\n\ndef index_a_gist():\n    pass\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vilya",
          "type": "tree",
          "content": null
        },
        {
          "name": "web.py",
          "type": "blob",
          "size": 2.947265625,
          "content": "#!/usr/bin/python\n# coding:utf8\n\nimport os\nimport sys\nimport time\nimport traceback\nfrom quixote.qwip import QWIP\nfrom quixote.publish import SessionPublisher\n\nfrom werkzeug.debug import DebuggedApplication\n\nfrom vilya import views as controllers\nfrom vilya.config import (\n    DEVELOP_MODE, SESSION_COOKIE_NAME, SESSION_COOKIE_PATH,\n    SESSION_COOKIE_DOMAIN\n)\nfrom vilya.libs.gzipper import make_gzip_middleware\nfrom vilya.libs.permdir import get_tmpdir\nfrom vilya.libs.import_obj import import_obj_set\nfrom vilya.libs.session import Session, SessionManager\nfrom vilya.libs.template import st\nfrom vilya.libs.auth.check_auth import check_auth\nfrom vilya.models.user import User\nfrom vilya.views.util import is_mobile_device\n\n\nclass CODEPublisher(SessionPublisher):\n\n    def __init__(self, *args, **kwargs):\n        SessionPublisher.__init__(self, *args, **kwargs)\n        self.configure(DISPLAY_EXCEPTIONS='plain',\n                       SECURE_ERRORS=0,\n                       DEBUG_PROPAGATE_EXCEPTIONS=DEVELOP_MODE,\n                       UPLOAD_DIR=get_tmpdir() + '/upload/',\n                       SESSION_COOKIE_NAME=SESSION_COOKIE_NAME,\n                       SESSION_COOKIE_DOMAIN=SESSION_COOKIE_DOMAIN,\n                       SESSION_COOKIE_PATH=SESSION_COOKIE_PATH)\n\n    def start_request(self, request):\n        SessionPublisher.start_request(self, request)\n        os.environ['SQLSTORE_SOURCE'] = request.get_url()\n\n        resp = request.response\n        resp.set_content_type('text/html; charset=utf-8')\n        resp.set_header('Pragma', 'no-cache')\n        resp.set_header('Cache-Control', 'must-revalidate, no-cache, private')\n        # FIXME: quixote with origin?\n        resp.set_header('Access-Control-Allow-Origin', '*')\n        request.enable_ajax = False\n        request.browser = request.guess_browser_version()\n        request.method = request.get_method()\n        request.url = request.get_path()\n        request.is_mobile = is_mobile_device(request)\n        request.start_time = time.time()\n        request.user = None\n        check_auth(request)  # OAuth\n        if request.user is None:\n            request.user = User.get_current_user()\n\n        import_obj_set(\"request\", request)\n\n    def try_publish(self, request, path):\n        output = SessionPublisher.try_publish(self, request, path)\n        return output\n\n    def finish_failed_request(self, request):\n        if DEVELOP_MODE:\n            exc_type, exc_value, tb = sys.exc_info()\n            raise exc_type, exc_value, tb\n        else:\n            return SessionPublisher.finish_failed_request(self, request)\n\n    def _generate_cgitb_error(self, request, original_response,\n                              exc_type, exc_value, tb):\n        traceback.print_exc()\n        return st('/errors/500.html', **locals())\n\n\ndef create_publisher():\n    return CODEPublisher(controllers, session_mgr=SessionManager(Session))\n\napp = make_gzip_middleware(QWIP(create_publisher()))\nif DEVELOP_MODE:\n    app = DebuggedApplication(app, evalex=True)\n"
        },
        {
          "name": "webpack.config.js",
          "type": "blob",
          "size": 1.857421875,
          "content": "var path = require(\"path\");\nvar webpack = require(\"webpack\");\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n\nvar nodePath = path.resolve(__dirname, \"node_modules\");\nvar distPath = path.resolve(__dirname, \"dist/js/mod\");\nvar jsPath = path.resolve(__dirname, \"hub/static/jsx\");\n\nmodule.exports = {\n\n    entry: {\n        register : path.join(jsPath, 'register.jsx'),\n        login : path.join(jsPath, 'login.jsx'),\n        vendors : ['jquery']\n    },\n\n    output: {\n        path: distPath,\n        filename: \"[name].js\",\n        sourceMapFilename: \"[file].map\",\n        publicPath: distPath\n    },\n\n    resolve: {\n        extensions: [\"\", \".js\", \".jsx\", \".json\", \".coffee\", \".css\", \".scss\"]\n    },\n\n    module: {\n        loaders: [\n            {\n                test: /\\.jsx$/,\n                exclude: /node_modules/,\n                loader: \"babel-loader\",\n                query: {stage: 0}\n            },\n            {\n                test: /\\.html$/,\n            loader: \"file?name=[name].[ext]\"\n            },\n            {\n                test: /\\.(woff2|woff|ttf|eot)$/,\n                loader: \"file?name=fonts/[name].[ext]\"\n            },\n            {\n                test: /\\.scss$/,\n                loader: ExtractTextPlugin.extract(\n                    'css-loader?sourceMap!sass-loader?sourceMap=true&sourceMapContents=true'\n                )\n            },\n            {\n                test: /\\.(png|jpg|svg|ico)$/,\n                loader: \"file-loader?name=[path][name].[ext]\"\n            }\n        ]\n    },\n\n    plugins: [\n        new ExtractTextPlugin(\"css/[name].css\"),\n        new webpack.optimize.CommonsChunkPlugin(\"vendors\", \"vendors.js\", Infinity),\n        new webpack.ProvidePlugin({\n            $: \"jquery\",\n            jQuery: \"jquery\",\n            \"window.jQuery\": \"jquery\",\n            \"root.jQuery\": \"jquery\"\n        })\n    ],\n\n    devtool: \"source-map\"\n}\n"
        },
        {
          "name": "wsgi.py",
          "type": "blob",
          "size": 0.626953125,
          "content": "#!/usr/bin/python\n# coding:utf8\n\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom werkzeug.serving import run_simple\n\nfrom app import app\n\nformatter = logging.Formatter(\n    \"[%(asctime)s] {%(pathname)s:%(lineno)d} %(levelname)s - %(message)s\")\n\nhandler = RotatingFileHandler('vilya.log', maxBytes=10000, backupCount=1)\nhandler.setLevel(logging.INFO)\n\n# werkzeug log\n# log = logging.getLogger('werkzeug')\n# log.setLevel(logging.DEBUG)\n# log.addHandler(handler)\n\nif __name__ == \"__main__\":\n    run_simple('0.0.0.0', 8000, app,\n               use_reloader=True,\n               use_debugger=True,\n               processes=2)\n"
        }
      ]
    }
  ]
}