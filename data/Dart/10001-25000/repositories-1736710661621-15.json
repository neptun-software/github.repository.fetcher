{
  "metadata": {
    "timestamp": 1736710661621,
    "page": 15,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE1",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dart-lang/sdk",
      "stars": 10379,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 0.45703125,
          "content": "# Defines the Chromium style for automatic reformatting.\n# http://clang.llvm.org/docs/ClangFormatStyleOptions.html\nBasedOnStyle: Chromium\n\n# clang-format doesn't seem to do a good job of this for longer comments.\nReflowComments: 'false'\n\n# We have lots of these. Though we need to put them all in curly braces,\n# clang-format can't do that.\nAllowShortIfStatementsOnASingleLine: 'true'\n\n# Put escaped newlines into the rightmost column.\nAlignEscapedNewlinesLeft: false\n"
        },
        {
          "name": ".dart_tool",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.2626953125,
          "content": "# Source files should not be normalized to avoid confusing clang-format-diff.py\n*.c text eol=lf\n*.cc text eol=lf\n*.cpp text eol=lf\n*.h text eol=lf\n*.dart text eol=lf\n*.sh text eol=lf\n\n# Explicitly declare text files we want to be normalized.\n*.gyp text\n*.gypi text\n*.mk text\n*.Makefile text\n*.md text\n*.yaml text\n\n# File that should not be converted.\ntests/web/eof_line_ending_test.dart -text\ntests/web/string_interpolation_test.dart -text\ntests/web/string_interpolation_dynamic_test.dart -text\ntests/web/literal_string_juxtaposition_test.dart -text\ntests/language/string/raw_string_test.dart -text\ntests/language/string/multiline_strings_test.dart -text\ntests/language/string/multiline_newline_cr.dart -text\ntests/language/string/multiline_newline_crlf.dart -text\ntests/language/string/multiline_newline_lf.dart -text\ntests/lib/mirrors/method_mirror_source_line_ending_cr.dart -text\ntests/lib/mirrors/method_mirror_source_line_ending_crlf.dart -text\ntests/lib/mirrors/method_mirror_source_line_ending_lf.dart -text\ntests/lib/mirrors/method_mirror_source_line_ending_test.dart -text\ntests/lib/mirrors/method_mirror_source_other.dart -text\ntests/lib/mirrors/method_mirror_source_test.dart -text\n\n# Files to leave alone and not diff.\n*.png binary\n*.jpg binary\n*.xpi binary\n\n*.status diff=status\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Add this to your Git config to set the section header as function context for status files.\n# git config --add --local include.path ../.gitconfig\n[diff \"status\"]\n\txfuncname = \"^\\\\[.*\\\\]$\"\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.6142578125,
          "content": "# Build artifacts and dependencies.\n/.children\n/.project\n/Makefile\n/base\n/benchmarks-internal\n/buildtools\n/ipch\n/out\n/xcodebuild\n/.flaky.log\n/.debug.log\n*.Makefile\n*.opensdf\n*.sdf\n*.sln\n*.suo\n*.target.mk\n*.host.mk\n*.vcproj\n*.vcxproj\n*.vcxproj.filters\n/*.vcxproj.user\n*.stamp\n\n# Gyp generated files\n*.xcodeproj\n*.intermediate\n\n# Eclipse config files - also in all subdirectories.\n.children\n.project\n.settings\n\n# IntelliJ project files\n*.iml\n.idea\nCMakeLists.txt\n.clang_complete\ncmake-build-debug\n\n# Windows toolchain.\nwin_toolchain\n\n# VS project files\n.vs\n\n# VSCode project files\n.vscode\n.history\n\n# https://github.com/Dart-Code/Dart-Code/issues/1295\n/analysis_options.yaml\n\n# analysis server files\ncompile_commands.json\n\n# GDB files\n.gdb_history\n\n# Clangd files\n.cache/clangd\n.clangd\n\n# Built by chromebot and downloaded from Google Storage\nclient/tests/drt\n\n# Compiled python binaries\n*.pyc\n\n# pydev project file.\n.pydevproject\n\n# From the Mac OS X Finder\n.DS_Store\n\n# Pub generated \"packages\" directories and files\npackages\npubspec.lock\n\n# Files for native assets auto-generated per checkout.\n/.dart_tool/native_assets_builder/\n\n# The top level package file (this is auto-generated per checkout).\n/.dart_tool/package_config.json\n\n# Local pub storage\n.pub\n\n# Vim temporary swap files.\n*.swp\n\n# Kate temporary files.\n*~\n*.kate-swp\n\n# Merge files.\n*.orig\n*.rej\n\n# Generated files.\ntools/dartium/out\ntools/out\ntools/xcodebuild\n.test-outcome.log\n/outline.dill\n/generated/\n/crash_logs/\n/build/config/gclient_args.gni\n/pkg/front_end/testcases/old_dills/\nlogs/logs.json\nlogs/results.json\n.dart_tool/bisect_dart/\ndoc/api/\nruntime/tools/heapsnapshot/.dart_tool\n"
        },
        {
          "name": ".gn",
          "type": "blob",
          "size": 0.67578125,
          "content": "# Copyright 2016 The Dart project authors. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n# This file is used by the gn meta-buildsystem find the root of the source tree\n# and to set startup options.\n\n# The location of the build configuration file.\nbuildconfig = \"//build/config/BUILDCONFIG.gn\"\n\n# The secondary source root is a parallel directory tree where\n# GN build files are placed when they can not be placed directly\n# in the source tree, e.g. for third party source trees.\nsecondary_source = \"//build/secondary/\"\n\n# Override the default script executable to always be python3.\nscript_executable = \"python3\"\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 5.4873046875,
          "content": "# This file contains name to mail address mappings that are useful\n# for old svn based commits (to get nice names instead of mail in blame and\n# other tools)\nAdam Klein <adamk@google.com>\nAdam Singer <financeCoding@gmail.com>\nAhmed Hussein <husseina@google.com>\nAlan Knight <alanknight@google.com>\nAlan Leung <acleung@google.com>\nAlexander Aprelev <aprelev@gmail.com>\nalf Filippov <alexeif@google.com>\nAmin Shali <amshali@google.com>\nAnders Johnsen <ajohnsen@google.com>\nAnders Sandholm <sandholm@google.com>\nAndrei Mouravski <amouravski@google.com>\nAnton Muhin <antonm@google.com>\nAsger Feldthaus <asgerf@google.com>\nBen Laurie <benl@google.com>\nBen Wells <benwells@google.com>\nBill Hesse <whesse@google.com>\nBob Nystrom <rnystrom@google.com>\nBradley Nelson <bradnelson@google.com>\nBrian Wilkerson <brianwilkerson@google.com>\nCarl Shapiro <cshapiro@google.com>\nCharlie Reis <creis@google.com>\nChip Brown <chipb@google.com>\nChris Bracken <cbracken@google.com>\nDan Grove <dgrove@google.com>\nDaniel Andersson <koda@google.com>\nDaniel Tang <tangd@google.com>\nDan Rice <rice@google.com>\nDan Rubel <danrubel@google.com>\nDavid Carlson <dcarlson@google.com>\nDavid Chandler <drfibonacci@google.com>\nDevon Carew <devoncarew@google.com>\nDominic Cooney <dominicc@google.com>\nDominic Hamon <dominich@google.com>\nDouglas Stockwell <dstockwell@google.com>\nEli Brandt <eub@google.com>\nEmily Fortuna <efortuna@google.com>\nEric Arnold <ericarnold@google.com>\nEric Ayers <zundel@google.com>\nErik Arvidsson <arv@google.com>\nErik Corry <erikcorry@google.com>\nErik Ernst <eernst@google.com>\nFabio Valbuena <fabiomfv@google.com>\nFlorian Loitsch <floitsch@google.com>\nFlorian Schneider <fschneider@google.com>\nFlorin Malita <fmalita@google.com>\nGilad Bracha <gbracha@google.com>\nGram Wheeler <gram@google.com>\nGreg Bigelow <gregbglw@google.com>\nGustav Wibling <wibling@google.com>\nHannes Payer <hpayer@google.com>\nHarry Roeck <hroeck@google.com>\nHarry Terkelsen <het@google.com>\nIan Zerny <zerny@google.com>\nIgor Sheludko <ishell@google.com>\nIvan Posva <iposva@google.com>\nJack Palevich <jackpal@google.com>\nJacob Macdonald <jakemac@google.com>\nJacob Richman <jacobr@google.com>\nJaime Wren <jwren@google.com>\nJakob Gruber <jgruber@google.com>\nJakob Kummerow <jkummerow@google.com>\nJanice Leung <janicejl@google.com>\nJason Rosenberg <jbrosenberg@google.com>\nJenny Messerly <jmesserly@google.com>\nJim Hugunin <jimhug@google.com>\nJoel Webber <jgw@google.com>\nJohn Lenz <johnlenz@google.com>\nJohn McCutchan <johnmccutchan@google.com>\nJohn McDole <codefu@google.com>\nJohnni Winther <johnniwinther@google.com>\nJohn Tamplin <jat@google.com>\nJørgen Fogh <jrgfogh@google.com>\nJoshua Bloch <jjb@google.com>\nJustin Fagnani-Bell <justinfagnani@google.com>\nKarl Klose <karlklose@google.com>\nKasper Lund <kasperl@google.com>\nKathy Walrath <kathyw@google.com>\nKeerti Parthasarathy <keertip@google.com>\nKelly Norton <knorton@google.com>\nKentaro Hara <haraken@google.com>\nKevin Millikin <kmillikin@google.com>\nKevin Moore <kevmoo@google.com>\nKevin Moore <kevmoo@j832.com>\nKonstantin Shcheglov <scheglov@google.com>\nLars Bak <bak@google.com>\nLasse Nielsen <lrn@google.com>\nLeaf Petersen <leafp@google.com>\nLukas Rytz <lry@google.com>\nLuke Church <lukechurch@google.com>\nLuke Church <lukeEChurch@gmail.com>\nMads Ager <ager@google.com>\nMark Lentczner <mzero@google.com>\nMark Russell <mrrussell@google.com>\nMartin Kustermann <kustermann@google.com>\nMary Campione <mcampione@google.com>\nMatthias Hausner <hausner@google.com>\nMatt May <mmay@google.com>\nMatt Shulman <mattsh@google.com>\nMax Heinritz <meh@google.com>\nMehmet Akin <mdakin@google.com>\nMichael Achenbach <machenbach@google.com>\nMichael Lippautz <mlippautz@google.com>\nMichael Starzinger <mstarzinger@google.com>\nMiguel Mendez <mmendez@google.com>\nNatalie Weizenbaum <nweiz@google.com>\nNathan Collins <collinsn@google.com>\nNicolas Garnier <nivco@google.com>\nNicolas Geoffray <ngeoffray@google.com>\nNicolas Sylvain <nsylvain@google.com>\nNike Igotti (Николай Иготти) <olonho@google.com>\nPaul Berry <paulberry@google.com>\nPaul Brauner <polux@google.com>\nPavel Podivilov <podivilov@google.com>\nPeng Li <lipeng@google.com>\nPete Blois <blois@google.com>\nPeter Hallam <peterhal@google.com>\nPeter Rybin <prybin@google.com>\nPeter von der Ahé <ahe@google.com>\nPhilip Rogers <pdr@google.com>\nPhil Quitslund <pquitslund@google.com>\nRafael Weinstein <rafaelw@google.com>\nRaja Aluri <aluri@google.com>\nRajeev Dayal <rdayal@google.com>\nRegis Crelier <regis@google.com>\nRico Wind <ricow@google.com>\nRodrigo Chandía <rchandia@google.com>\nRoman Shuvaev <smok@google.com>\nRyan Macnak <rmacnak@google.com>\nSam Hopkins <samhop@google.com>\nSam Rawlins <srawlins@google.com>\nSarah Zakarias <zarah@google.com>\nSasha Bermeister <sashab@google.com>\nSeth Ladd <sethladd@google.com>\nShailen Tuli <shailentuli@google.com>\nShams Zakhour <shaza@google.com>\nShauvik Roy Choudhary <shauvik@google.com>\nSiggi Cherem <sigmund@google.com>\nSigurd Meldgaard <sigurdm@google.com>\nSiva Annamalai <asiva@google.com>\nSøren Gjesse <sgjesse@google.com>\nSrdjan Mitrovic <srdjan@google.com>\nStephan Herhut <herhut@google.com>\nStephen Adams <sra@google.com>\nStephen Chenney <schenney@google.com>\nSteve Messick <messick@google.com>\nTayler Mandel <tmandel@google.com>\nTerry Lucas <terry@google.com>\nTim Blasi <tjblasi@google.com>\nTodd Turnidge <turnidge@google.com>\nTom Ball <tball@google.com>\nTy Overby <tyoverby@google.com>\nUlan Degenbaev <ulan@google.com>\nUlan Degenbaev <ulan@google.com>\nVijay Menon <vsm@google.com>\nVitaly Repeshko <vitalyr@google.com>\nVyacheslav \"Slava\" Egorov <vegorov@google.com>\nZach Anderson <zra@google.com>\n"
        },
        {
          "name": ".style.yapf",
          "type": "blob",
          "size": 0.03125,
          "content": "[style]\nbased_on_style = google\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.3701171875,
          "content": "# Below is a list of people and organizations that have contributed\n# to the Dart project. Names should be added to the list like so:\n#\n#   Name/Organization <email address>\n\nGoogle Inc.\nThe V8 project authors\nThe Go Authors\nArm Ltd. <*@arm.com>\n\nOla Martin Bini <ola.bini@gmail.com>\nMichael Haubenwallner <michael.haubenwallner@gmail.com>\nLadislav Thon <ladicek@gmail.com>\nJohn Evans <prujohn@gmail.com>\nLajos Koszti <ajnasz@ajnasz.hu>\nKevin Moore <kevmoo@j832.com>\nAustin Cummings <austincummings95@gmail.com>\nAlexander Aprelev <aprelev@gmail.com>\nChristopher Stone <chris.stone@gmail.com>\nKevin Kellogg <kelloggk@gmail.com>\nMatthew Butler <butler.matthew@gmail.com>\nAndy Trevorah <a.trevorah@gmail.com>\nJingwen Ou <jingweno@gmail.com>\nChris Strom <chris.eee@gmail.com>\nAdam Singer <financeCoding@gmail.com>\nChris Buckett <chrisbuckett@gmail.com>\nThiago Farina <tfarina@chromium.org>\nSami Ylönen <sami.ylonen@gmail.com>\nDavid Gomez <irisindigo@gmail.com>\nNikolaus Graf <nik@blossom.io>\nAlexandre Ardhuin <alexandre.ardhuin@gmail.com>\nVictor Berchet <victor.berchet@gmail.com>\nRoel Spilker <r.spilker@gmail.com>\nMartin Charles <martincharles07@gmail.com>\nAnders Holmgren <andersmholmgren@gmail.com>\nK. Alex Gann <k.alexgann@gmail.com>\nKenneth Endfinger <kaendfinger@gmail.com>\nCristian Almstrand <cristian.almstrand@gmail.com>\nRyan Macnak <rmacnak@gmail.com>\nGabriel Terwesten <gabriel@terwesten.net>\n"
        },
        {
          "name": "BUILD.gn",
          "type": "blob",
          "size": 15.6220703125,
          "content": "# Copyright (c) 2016, the Dart project authors.  Please see the AUTHORS file\n# for details. All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\nimport(\"build/config/gclient_args.gni\")\nimport(\"sdk_args.gni\")\n\ntargeting_fuchsia = target_os == \"fuchsia\"\n\n# This target will be built if no target is specified when invoking ninja.\ngroup(\"default\") {\n  if (targeting_fuchsia) {\n    # Fuchsia has run_vm_tests marked testonly.\n    testonly = true\n  }\n  deps = [ \":runtime\" ]\n}\n\ngroup(\"most\") {\n  import(\"runtime/runtime_args.gni\")\n  if (targeting_fuchsia) {\n    # Fuchsia has run_vm_tests marked testonly.\n    testonly = true\n  }\n  deps = [\n    \":analysis_server\",\n    \":create_sdk\",\n    \":dart2js\",\n    \":dartanalyzer\",\n    \":ddc\",\n    \":runtime\",\n    \":samples\",\n  ]\n}\n\ngroup(\"samples\") {\n  deps = [ \"samples/embedder:all\" ]\n}\n\ngroup(\"runtime\") {\n  import(\"runtime/runtime_args.gni\")\n\n  if (targeting_fuchsia) {\n    # Fuchsia has run_vm_tests marked testonly.\n    testonly = true\n  }\n\n  deps = [\n    \"runtime/bin:dart\",\n    \"runtime/bin:ffi_test_dynamic_library\",\n    \"runtime/bin:ffi_test_functions\",\n    \"runtime/bin:process_test\",\n    \"runtime/bin:run_vm_tests\",\n    \"runtime/vm:kernel_platform_files($host_toolchain)\",\n    \"samples/embedder:all\",\n    \"samples/ffi/http:fake_http\",\n    \"utils/dartdev:dartdev\",\n    \"utils/kernel-service:kernel-service\",\n  ]\n\n  # The following dependencies allow dartdev to start the resident frontend\n  # server.\n  if (dart_target_arch != \"ia32\" && dart_target_arch != \"x86\") {\n    deps += [ \"utils/kernel-service:frontend_server_aot_product\" ]\n    deps += [ \"runtime/bin:dartaotruntime_product\" ]\n  } else {\n    deps += [ \"utils/kernel-service:frontend_server\" ]\n  }\n\n  if (!is_win) {\n    # The test isn't run on windows\n    deps += [ \"runtime/bin:entrypoints_verification_test\" ]\n  }\n\n  # This flag is set in runtime/runtime_args.gni\n  # The analyze_snapshot tool is only supported on 64 bit AOT builds running\n  # under linux and android platforms\n  if (build_analyze_snapshot) {\n    deps += [\n      # The `analyze_snapshot` tests require the `analyze_snapshot` as well as\n      # `gen_snapshot` binaries.\n      \"runtime/bin:analyze_snapshot\",\n      \"runtime/bin:analyze_snapshot($host_toolchain)\",\n      \"runtime/bin:gen_snapshot\",\n      \"runtime/bin:gen_snapshot($host_toolchain)\",\n    ]\n  }\n\n  if (is_linux || is_android) {\n    deps += [ \"runtime/bin:abstract_socket_test\" ]\n  } else if (is_fuchsia) {\n    deps += [ \":fuchsia_test_package\" ]\n  }\n}\n\n# A separate target and not included in group(\"runtime\"). This way the target\\\n# \"runtime\" does not get many executables extra as build output.\ngroup(\"run_ffi_unit_tests\") {\n  deps = [ \"runtime/bin/ffi_unit_test:run_ffi_unit_tests\" ]\n}\n\ngroup(\"runtime_precompiled\") {\n  import(\"runtime/runtime_args.gni\")\n  deps = [\n    \"runtime/bin:dartaotruntime\",\n    \"runtime/bin:gen_snapshot\",\n    \"runtime/bin:gen_snapshot($host_toolchain)\",\n    \"runtime/bin:process_test\",\n    \"runtime/vm:kernel_platform_files($host_toolchain)\",\n  ]\n  if (is_linux || is_android) {\n    deps += [ \"runtime/bin:abstract_socket_test\" ]\n  }\n  if (dart_dynamic_modules) {\n    deps += [ \"utils/dart2bytecode:dart2bytecode_snapshot\" ]\n    deps += [ \"utils/dynamic_module_runner:dynamic_module_runner_snapshot\" ]\n  }\n}\n\ngroup(\"create_sdk\") {\n  public_deps = [ \"sdk:create_sdk\" ]\n}\n\ngroup(\"create_platform_sdk\") {\n  public_deps = [ \"sdk:create_platform_sdk\" ]\n}\n\ngroup(\"dart2js\") {\n  import(\"runtime/runtime_args.gni\")\n  if (dart_target_arch != \"ia32\" && dart_target_arch != \"x86\") {\n    deps = [\n      \":runtime_precompiled\",\n      \"utils/compiler:dart2js_sdk_aot\",\n    ]\n  } else {\n    deps = [ \"utils/compiler:dart2js\" ]\n  }\n}\n\ngroup(\"dart2wasm_platform\") {\n  deps = [\n    \":runtime_precompiled\",\n    \"utils/dart2wasm:compile_dart2wasm_js_compatibility_platform\",\n    \"utils/dart2wasm:compile_dart2wasm_platform\",\n    \"utils/dart2wasm:dart2wasm_snapshot\",\n  ]\n  if (defined(is_product)) {\n    if (is_product) {\n      deps += [ \"utils/dart2wasm:dart2wasm_product_snapshot\" ]\n    } else {\n      deps += [ \"utils/dart2wasm:dart2wasm_asserts_snapshot\" ]\n    }\n  }\n}\n\ngroup(\"dart2wasm\") {\n  deps = [\n    \":dart2wasm_platform\",\n    \"utils/dart2wasm:test_wasm_modules\",\n  ]\n}\n\ngroup(\"dart2wasm_benchmark\") {\n  deps = [\n    \":dart2wasm_platform\",\n    \"third_party/binaryen:wasm-opt\",\n  ]\n}\n\ngroup(\"dartanalyzer\") {\n  deps = [ \"utils/dartanalyzer\" ]\n}\n\ngroup(\"ddc\") {\n  import(\"runtime/runtime_args.gni\")\n  if (dart_target_arch != \"ia32\" && dart_target_arch != \"x86\") {\n    deps = [\n      \":runtime_precompiled\",\n      \"utils/bazel:kernel_worker_aot\",\n      \"utils/ddc:dartdevc_aot\",\n    ]\n  } else {\n    deps = [\n      \"utils/bazel:kernel_worker\",\n      \"utils/ddc:dartdevc\",\n    ]\n  }\n}\n\ngroup(\"analysis_server\") {\n  deps = [ \"utils/analysis_server\" ]\n}\n\ngroup(\"tools\") {\n  deps = [\n    \"utils:compile_platform.exe\",\n    \"utils:gen_kernel.exe\",\n  ]\n}\n\n# This is the target that is built on the dart2js build bots.\n# It must depend on anything that is required by the dart2js\n# test suites.\ngroup(\"dart2js_bot\") {\n  deps = [\n    \":create_sdk\",\n    \"utils/compiler:compile_dart2js_platform_unsound\",\n  ]\n}\n\n# This rule and the compressed_observatory_archive rule are for the Fuchsia\n# bots that pre-build the Observatory. They copy the observatory tar files to\n# the root build output directory for convenient access by the Fuchsia buildbot\n# scripts.\ngroup(\"observatory_archive\") {\n  deps = [ \"runtime/observatory:copy_observatory_archive\" ]\n}\n\ngroup(\"compressed_observatory_archive\") {\n  deps = [ \"runtime/observatory:copy_compressed_observatory_archive\" ]\n}\n\nif (is_fuchsia) {\n  import(\"third_party/fuchsia/gn-sdk/src/component.gni\")\n  import(\"third_party/fuchsia/gn-sdk/src/package.gni\")\n  import(\"utils/application_snapshot.gni\")\n\n  # tests/ffi/**_test.dart except those with compile-time errors\n  test_sources = [\n    \"tests/ffi/abi_specific_int_incomplete_aot_test.dart\",\n    \"tests/ffi/abi_specific_int_incomplete_jit_test.dart\",\n    \"tests/ffi/abi_specific_int_test.dart\",\n    \"tests/ffi/abi_test.dart\",\n    \"tests/ffi/address_of_array_generated_test.dart\",\n    \"tests/ffi/address_of_cast_test.dart\",\n    \"tests/ffi/address_of_struct_generated_test.dart\",\n    \"tests/ffi/address_of_test.dart\",\n    \"tests/ffi/address_of_typeddata_generated_test.dart\",\n    \"tests/ffi/aliasing_test.dart\",\n    \"tests/ffi/allocator_test.dart\",\n    \"tests/ffi/async_void_function_callbacks_test.dart\",\n    \"tests/ffi/bool_test.dart\",\n    \"tests/ffi/c_types_test.dart\",\n    \"tests/ffi/callback_unwind_error_test.dart\",\n    \"tests/ffi/calloc_test.dart\",\n    \"tests/ffi/data_not_asan_test.dart\",\n    \"tests/ffi/data_test.dart\",\n    \"tests/ffi/deeply_immutable_c_api_finalizer_test.dart\",\n    \"tests/ffi/dl_api_exit_enter_isolate_test.dart\",\n    \"tests/ffi/dylib_close_test.dart\",\n    \"tests/ffi/dylib_isolates_test.dart\",\n    \"tests/ffi/dylib_open_test.dart\",\n    \"tests/ffi/expando_test.dart\",\n    \"tests/ffi/extension_methods_test.dart\",\n    \"tests/ffi/external_typed_data_finalizer_test.dart\",\n    \"tests/ffi/external_typed_data_test.dart\",\n    \"tests/ffi/ffi_callback_unique_test.dart\",\n    \"tests/ffi/ffi_induce_a_crash_test.dart\",\n    \"tests/ffi/ffi_native_test.dart\",\n    \"tests/ffi/finalizer_external_size_accounting_test.dart\",\n    \"tests/ffi/function_callbacks_many_test.dart\",\n    \"tests/ffi/function_callbacks_structs_by_value_generated_test.dart\",\n    \"tests/ffi/function_callbacks_structs_by_value_native_callable_generated_test.dart\",\n    \"tests/ffi/function_callbacks_structs_by_value_test.dart\",\n    \"tests/ffi/function_callbacks_subtype_test.dart\",\n    \"tests/ffi/function_callbacks_test.dart\",\n    \"tests/ffi/function_callbacks_varargs_generated_test.dart\",\n    \"tests/ffi/function_callbacks_varargs_native_callable_generated_test.dart\",\n    \"tests/ffi/function_callbacks_very_many_test.dart\",\n    \"tests/ffi/function_struct_by_value_out_of_bounds_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_args_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_args_native_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_args_native_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_args_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_compounds_sizeof_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_arg_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_arg_native_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_arg_native_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_arg_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_native_leaf_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_native_test.dart\",\n    \"tests/ffi/function_structs_by_value_generated_ret_test.dart\",\n    \"tests/ffi/function_structs_test.dart\",\n    \"tests/ffi/function_test.dart\",\n    \"tests/ffi/function_varargs_generated_leaf_test.dart\",\n    \"tests/ffi/function_varargs_generated_native_leaf_test.dart\",\n    \"tests/ffi/function_varargs_generated_native_test.dart\",\n    \"tests/ffi/function_varargs_generated_test.dart\",\n    \"tests/ffi/function_varargs_name_test.dart\",\n    \"tests/ffi/function_varargs_test.dart\",\n    \"tests/ffi/function_very_many_test.dart\",\n    \"tests/ffi/hardfp_test.dart\",\n    \"tests/ffi/has_symbol_test.dart\",\n    \"tests/ffi/inline_array_multi_dimensional_test.dart\",\n    \"tests/ffi/inline_array_test.dart\",\n    \"tests/ffi/inline_array_variable_length_test.dart\",\n    \"tests/ffi/invoke_callback_after_suspension_test.dart\",\n    \"tests/ffi/isolate_local_function_callbacks_test.dart\",\n    \"tests/ffi/msan_test.dart\",\n    \"tests/ffi/native_assets/asset_absolute_test.dart\",\n    \"tests/ffi/native_assets/asset_executable_test.dart\",\n    \"tests/ffi/native_assets/asset_library_annotation_test.dart\",\n    \"tests/ffi/native_assets/asset_process_test.dart\",\n    \"tests/ffi/native_assets/asset_relative_test.dart\",\n    \"tests/ffi/native_assets/asset_system_test.dart\",\n    \"tests/ffi/native_assets/infer_native_assets_yaml_dart_kernel_snapshot_test.dart\",\n    \"tests/ffi/native_assets/infer_native_assets_yaml_isolate_spawnuri_2_test.dart\",\n    \"tests/ffi/native_assets/infer_native_assets_yaml_isolate_spawnuri_3_test.dart\",\n    \"tests/ffi/native_assets/infer_native_assets_yaml_isolate_spawnuri_test.dart\",\n    \"tests/ffi/native_assets/infer_native_assets_yaml_process_run_test.dart\",\n    \"tests/ffi/native_assets/process_test.dart\",\n    \"tests/ffi/native_callables_async_structs_by_value_generated_test.dart\",\n    \"tests/ffi/native_callables_sync_structs_by_value_generated_test.dart\",\n    \"tests/ffi/native_effect_test.dart\",\n    \"tests/ffi/negative_function_test.dart\",\n    \"tests/ffi/pointer_arithmetic_operators_test.dart\",\n    \"tests/ffi/regress_37254_test.dart\",\n    \"tests/ffi/regress_39044_test.dart\",\n    \"tests/ffi/regress_39063_test.dart\",\n    \"tests/ffi/regress_39885_test.dart\",\n    \"tests/ffi/regress_40537_test.dart\",\n    \"tests/ffi/regress_43016_test.dart\",\n    \"tests/ffi/regress_43693_test.dart\",\n    \"tests/ffi/regress_45189_test.dart\",\n    \"tests/ffi/regress_45198_test.dart\",\n    \"tests/ffi/regress_45507_test.dart\",\n    \"tests/ffi/regress_45988_test.dart\",\n    \"tests/ffi/regress_46004_test.dart\",\n    \"tests/ffi/regress_46127_test.dart\",\n    \"tests/ffi/regress_47594_test.dart\",\n    \"tests/ffi/regress_47673_test.dart\",\n    \"tests/ffi/regress_49402_test.dart\",\n    \"tests/ffi/regress_49684_test.dart\",\n    \"tests/ffi/regress_51315_test.dart\",\n    \"tests/ffi/regress_51321_test.dart\",\n    \"tests/ffi/regress_51504_test.dart\",\n    \"tests/ffi/regress_51538_2_test.dart\",\n    \"tests/ffi/regress_51538_3_test.dart\",\n    \"tests/ffi/regress_51538_test.dart\",\n    \"tests/ffi/regress_52298_test.dart\",\n    \"tests/ffi/regress_52399_test.dart\",\n    \"tests/ffi/regress_56412_2_test.dart\",\n    \"tests/ffi/regress_56412_test.dart\",\n    \"tests/ffi/regress_b_261224444_test.dart\",\n    \"tests/ffi/regress_flutter79441_test.dart\",\n    \"tests/ffi/regress_flutter97301_test.dart\",\n    \"tests/ffi/regress_jump_to_frame_test.dart\",\n    \"tests/ffi/sizeof_test.dart\",\n    \"tests/ffi/snapshot_test.dart\",\n    \"tests/ffi/stacktrace_regress_37910_test.dart\",\n    \"tests/ffi/structs_nested_test.dart\",\n    \"tests/ffi/structs_nnbd_workaround_test.dart\",\n    \"tests/ffi/structs_packed_test.dart\",\n    \"tests/ffi/structs_test.dart\",\n    \"tests/ffi/structs_typed_data_test.dart\",\n    \"tests/ffi/unaligned_test.dart\",\n    \"tests/ffi/variance_function_test.dart\",\n    \"tests/ffi/vmspecific_deprecated_funcs_test.dart\",\n    \"tests/ffi/vmspecific_dynamic_library_test.dart\",\n    \"tests/ffi/vmspecific_enable_ffi_test.dart\",\n    \"tests/ffi/vmspecific_ffi_native_handles_test.dart\",\n    \"tests/ffi/vmspecific_ffi_native_test.dart\",\n    \"tests/ffi/vmspecific_function_callbacks_exit_test.dart\",\n    \"tests/ffi/vmspecific_function_callbacks_test.dart\",\n    \"tests/ffi/vmspecific_function_gc_test.dart\",\n    \"tests/ffi/vmspecific_function_test.dart\",\n    \"tests/ffi/vmspecific_handle_dynamically_linked_test.dart\",\n    \"tests/ffi/vmspecific_handle_test.dart\",\n    \"tests/ffi/vmspecific_highmem_32bit_test.dart\",\n    \"tests/ffi/vmspecific_leaf_call_test.dart\",\n    \"tests/ffi/vmspecific_native_finalizer_2_test.dart\",\n    \"tests/ffi/vmspecific_native_finalizer_deeply_immutable_test.dart\",\n    \"tests/ffi/vmspecific_native_finalizer_isolate_groups_test.dart\",\n    \"tests/ffi/vmspecific_native_finalizer_isolates_test.dart\",\n    \"tests/ffi/vmspecific_native_finalizer_test.dart\",\n    \"tests/ffi/vmspecific_object_gc_test.dart\",\n    \"tests/ffi/vmspecific_pointer_load_il_test.dart\",\n    \"tests/ffi/vmspecific_regress_37100_test.dart\",\n    \"tests/ffi/vmspecific_regress_37511_callbacks_test.dart\",\n    \"tests/ffi/vmspecific_regress_37511_test.dart\",\n    \"tests/ffi/vmspecific_regress_37780_test.dart\",\n    \"tests/ffi/vmspecific_regress_51794_test.dart\",\n    \"tests/ffi/vmspecific_send_port_id_test.dart\",\n  ]\n\n  test_deps = []\n  test_resources = []\n  foreach(test_source, test_sources) {\n    label = string_replace(test_source, \"/\", \"_\")\n\n    application_snapshot(label) {\n      dart_snapshot_kind = \"kernel\"\n      main_dart = test_source\n      training_args = []  # Not used\n      output = \"$target_gen_dir/$test_source.dill\"\n    }\n\n    test_deps += [ \":$label\" ]\n    test_resources += [\n      {\n        path = rebase_path(\"$target_gen_dir/$test_source.dill\")\n        dest = \"data/$test_source\"\n      },\n    ]\n  }\n\n  test_binaries = [\n    \"dart\",\n    \"dartaotruntime\",\n    \"run_vm_tests\",\n  ]\n\n  foreach(binary, test_binaries) {\n    fuchsia_component(\"${binary}_test_component\") {\n      testonly = true\n      manifest = \"runtime/bin/${binary}_test_component.cml\"\n      data_deps = [\n        \"runtime/bin:${binary}\",\n        \"runtime/bin:ffi_test_dynamic_library\",\n        \"runtime/bin:ffi_test_functions\",\n      ]\n      library_files = [\n        \"libffi_test_dynamic_library.so\",\n        \"libffi_test_functions.so\",\n      ]\n      resource_files = [\n        \".dart_tool/package_config.json\",\n        \"tools/addlatexhash.dart\",\n      ]\n      resources = []\n      foreach(file, library_files) {\n        resources += [\n          {\n            path = root_out_dir + \"/\" + file\n            dest = \"lib/\" + file\n          },\n        ]\n      }\n      foreach(file, resource_files) {\n        resources += [\n          {\n            path = file\n            dest = \"data/\" + file\n          },\n        ]\n      }\n      deps = test_deps\n      resources += test_resources\n    }\n  }\n\n  fuchsia_package(\"fuchsia_test_package\") {\n    testonly = true\n    if (is_debug) {\n      package_name = \"dart_test_debug\"\n    } else if (is_release) {\n      package_name = \"dart_test_release\"\n    } else if (is_product) {\n      package_name = \"dart_test_product\"\n    }\n    deps = []\n    foreach(binary, test_binaries) {\n      deps += [ \":${binary}_test_component\" ]\n    }\n  }\n}\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 381.8076171875,
          "content": "## 3.7.0\n\n### Language\n\nDart 3.7 adds [wildcard variables] to the language. To use them, set your\npackage's [SDK constraint][language version] lower bound to 3.7 or greater\n(`sdk: '^3.7.0'`).\n\n#### Wildcard Variables\n\n[wildcard variables]: https://github.com/dart-lang/language/issues/3712\n\nLocal variables and parameters named `_` are now non-binding and they can\nbe declared multiple times without collisions. You will no longer be able to use\nthese variables nor access their values. All wildcard variable declaration types\nthat have this behavior are described in the\n[wildcard variables specification](https://github.com/dart-lang/language/blob/main/accepted/future-releases/wildcard-variables/feature-specification.md).\n\nTop-level variables, top-level function names, type names, member names, etc.\nare unchanged. They can be named `_` and used as they are today.\n\nThese are a few examples of where wildcard variables can be used:\n```dart\nFoo(_, this._, super._, void _()) {}\n\nmain() {\n  var _ = 1;\n  int _ = 2;\n\n  list.where((_) => true);\n}\n```\n\n#### Other Language Changes\n\n- **Breaking Change** [#56893][]: If a field is promoted to the type `Null`\n  using `is` or `as`, this type promotion is now properly accounted for in\n  reachability analysis. This makes the type system more self-consistent,\n  because it mirrors the behavior of promoted local variables. This change is\n  not expected to make any difference in practice.\n\n[#56893]: https://github.com/dart-lang/sdk/issues/56893\n\n### Tools\n\n#### Analyzer\n\n- Assists and quick fixes that add an import now consider the\n  `prefer_relative_imports` and `always_use_package_imports` lint rules.\n- Add a new fix that converts a `~/` operation into `/`, when the `~/`\n  operation is not available.\n- Add a fix that wraps an expression in `await` if the expression is currently\n  not assignable, but awaiting it would make it assignable.\n- Assists and quick fixes that convert a `forEach` call into a for-loop now\n  consider the `prefer_final_in_for_each` and `always_specify_types` lint\n  rules.\n- Add an additional fix to correct a `cascade_invocations` lint rule violation.\n- Offer additional assists to wrap a Flutter widget with an `Expanded` widget,\n  and with a `Flexible` widget.\n- Offer an assist to \"inline\" an else-block's inner if-statement with the\n  else-block to read `else if`.\n- Add an additional fix to import an unknown prefixed identifier by updating\n  the `show` combinator on an existing import.\n- Add a fix to import an unknown prefixed identifier by adding an\n  import directive with the given prefix.\n- Add a fix to import an unknown prefixed identifier by removing a `hide`\n  combinator.\n- Add a fix to import an unknown identifier by adding an import directive with a\n  `show` combinator, and optionally a prefix.\n- Code completion now suggests instance variables when completing inside the\n  initializer of a _late_ field.\n- Assists and quick fixes that add a const keyword now consider the\n  `prefer_const_declarations` lint rule, prefering to add `const` to a variable\n  declaration rather than the initial value.\n- Add a fix to add a missing `on` keyword in an extension declaration.\n- Add a fix to wrap an ambiguous property access or method call in an extension\n  override.\n  (Thanks [@FMorschel](https://github.com/FMorschel) for the above enhancements!\n- The 'sort members' command now considers the `sort_constructors_first` lint\n  rule.\n- The 'extract method' refactoring now uses generic method syntax for\n  function-typed parameters.\n- Add quick fixes for more than 30 diagnostics.\n- Add the [`strict_top_level_inference`] lint rule.\n- Add the [`unnecessary_underscores`][] lint rule.\n- Add the experimental [`specify_nonobvious_property_types`][] lint rule.\n- Add the experimental [`omit_obvious_property_types`][] lint rule.\n- Add the experimental [`unsafe_variance`][] lint rule.\n- Remove the [`package_api_docs`][] lint rule.\n- Remove the [`unsafe_html`][] lint rule.\n\n[`strict_top_level_inference`]: https://dart.dev/tools/linter-rules/strict_top_level_inference\n[`unnecessary_underscores`]: https://dart.dev/lints/unnecessary_underscores\n[`specify_nonobvious_property_types`]: https://dart.dev/tools/linter-rules/specify_nonobvious_property_types\n[`omit_obvious_property_types`]: https://dart.dev/tools/linter-rules/omit_obvious_property_types\n[`unsafe_variance`]: https://dart.dev/tools/linter-rules/unsafe_variance\n[`package_api_docs`]: https://dart.dev/tools/linter-rules/package_api_docs\n[`unsafe_html`]: https://dart.dev/tools/linter-rules/unsafe_html\n\n#### Dart format\n\nThe formatter implements a [new style][tall style] better suited for the kind of\ndeclarative code that many Dart users are writing today. The new style looks\nsimilar to the style you get when you add trailing commas to argument lists,\nexcept that now the formatter will add and remove those commas for you.\n\nThe `dart format` command [uses the language version][formatter lang version] of\neach input file to determine which style it gets. If the language version is 3.6\nor lower, the code is formatted with the old style. If 3.7 or later, it gets the\nnew tall style.\n\nYou typically control the language version by [setting a min SDK constraint in\nyour package's pubspec][versioning]. This means that when you update the SDK\nconstraint in your pubspec to move to 3.7, you are also opting in to the new\nstyle.\n\nIn order to correctly determine the language version of each file it formats,\n`dart format` (like other `dart` commands) looks for a `package_config.json`\nfile surrounding the files being formatted. This means that **you need to run\n`dart pub get` before formatting code in your package.** If you have format\nchecks in your continuous integration server, you'll want to make sure it runs\n`dart pub get` too.\n\nWe don't intend to support both styles indefinitely. At some point in the\nfuture when most of the ecosystem is on 3.7 or later, support for the old style\nwill be removed.\n\n[tall style]: https://github.com/dart-lang/dart_style/issues/1253\n\n[versioning]: https://dart.dev/guides/language/evolution\n\n[formatter lang version]: https://github.com/dart-lang/dart_style/issues/1402\n\nIn addition to the new formatting style, a number of other changes are included,\nsome of them breaking:\n\n* **Project-wide page width configuration.** By long request, you can now\n  configure your preferred formatting page width on a project-wide basis. When\n  formatting a file, the formatter will look in the file's directory and any\n  surrounding directories for an `analysis_options.yaml` file. If it finds one,\n  it looks for YAML like so:\n\n  ```yaml\n  formatter:\n    page_width: 123\n  ```\n\n  If it finds a page width matching that schema, then the file is formatted\n  using that width. Since the formatter will walk the surrounding directories\n  until it finds an `analysis_options.yaml` file, this can be used to globally\n  set the page width for an entire directory, package, or even collection of\n  packages. Since `analysis_options.yaml` files already support an `include`\n  key to reference other `analysis_options.yaml` files, you can define a single\n  configuration and share it across a number of packages.\n\n* **Opting out a region of code from formatting.** In code formatted using the\n  new style, you can use a pair of special marker comments to opt a region of\n  code out of automated formatting:\n\n  ```dart\n  main() {\n    this.isFormatted();\n    // dart format off\n    no   +   formatting\n      +\n        here;\n    // dart format on\n    formatting.isBackOnHere();\n  }\n  ```\n\n  The comments must be exactly `// dart format off` and `// dart format on`.\n  A file may have multiple regions, but they can't overlap or nest.\n\n  This can be useful for highly structured data where custom layout helps the\n  reader understand the data, like large lists of numbers.\n\n* **Overriding the page width for a single file.** In code formatted\n  using the new tall style, you can use a special marker comment to control the\n  page width that it's formatted using:\n\n  ```dart\n  // dart format width=30\n  main() {\n    someExpression +\n        thatSplitsAt30;\n  }\n  ```\n\n  This comment must appear before any code in the file and must match that\n  format exactly. The width set by the comment overrides the width set by any\n  surrounding `analysis_options.yaml` file.\n\n  This feature is mainly for code generators that generate and immediately\n  format code but don't know about any surrounding `analysis_options.yaml`\n  that might be configuring the page width. By inserting this comment in the\n  generated code before formatting, it ensures that the code generator's\n  behavior matches the behavior of `dart format`.\n\n  End users should mostly use `analysis_options.yaml` for configuring their\n  preferred page width (or do nothing and continue to use the default page width\n  of 80).\n\n* **Breaking change: Remove support for `dart format --fix`.** Instead, use\n  `dart fix`. It supports all of the fixes that `dart format --fix` could apply\n  and many more.\n\n* **Treat the `--stdin-name` name as a path when inferring language version.**\n  When reading input on stdin, the formatter still needs to know its language\n  version to know what style to apply. If the `--stdin-name` option is set, then\n  that is treated as a file path and the formatter looks for a package config\n  surrounding that file path to infer the language version from.\n\n  If you don't want that behavior, pass in an explicit language version using\n  `--language-version=`, or use `--language-version=latest` to parse the input\n  using the latest language version supported by the formatter.\n\n  If `--stdin-name` and `--language-version` are both omitted, then the\n  formatter parses stdin using the latest supported language version.\n\n* **Rename the `--line-length` option to `--page-width`.** This is consistent\n  with the public API, internal implementation, and docs, which all use \"page\n  width\" to refer to the limit that the formatter tries to fit code into.\n\n  The `--line-length` name is still supported for backwards compatibility, but\n  may be removed at some point in the future. You're encouraged to move to\n  `--page-width`. Use of this option (however it's named) is rare, and will\n  likely be even rarer now that project-wide configuration is supported, so\n  this shouldn't affect many users.\n\n#### Dart to Javascript Compiler (dart2js)\n\nThe dart2js compiler which is invoked when the command 'dart compile js' is\nused has been switched to use an AOT snapshot instead of a JIT snapshot.\n\n#### Dart Development Compiler (dartdevc)\n\nThe dartdevc compiler and kernel_worker utility have been switched to use an\nAOT snapshot instead of a JIT snapshot, the SDK build still includes a JIT\nsnapshot of these tools as package build/build_web_compiler depends on it. The\nAOT snapshot can be used as follows to run DDC <dart-sdk>/bin/dartaotruntime\n<dart-sdk>/bin/snapshots/dartdevc_aot.dart.snapshot <options>\n\n### Libraries\n\n#### `dart:html`\n\n- `dart:html` is marked deprecated and will be removed in an upcoming release.\n  Users should migrate to using `dart:js_interop` and `package:web`. See\n  [#59716][].\n\n#### `dart:indexed_db`\n\n- `dart:indexed_db` is marked deprecated and will be removed in an upcoming\n  release. Users should migrate to using `dart:js_interop` and `package:web`.\n  See [#59716][].\n\n#### `dart:io`\n\n- `HttpException` will be thrown by `HttpClient` and `HttpServer` if a `NUL`\n  (`0x00`) appears in a received HTTP header value.\n\n#### `dart:svg`\n\n- `dart:svg` is marked deprecated and will be removed in an upcoming release.\n  Users should migrate to using `dart:js_interop` and `package:web`. See\n  [#59716][].\n\n#### `dart:web_audio`\n\n- `dart:web_audio` is marked deprecated and will be removed in an upcoming\n  release. Users should migrate to using `dart:js_interop` and `package:web`.\n  See [#59716][].\n\n#### `dart:web_gl`\n\n- `dart:web_gl` is marked deprecated and will be removed in an upcoming release.\n  Users should migrate to using `dart:js_interop` and `package:web`. See\n  [#59716][].\n\n#### `dart:js`\n\n- `dart:js` is marked deprecated and will be removed in an upcoming release.\n  Users should migrate to using `dart:js_interop`. See [#59716][].\n\n#### `dart:js_util`\n\n- `dart:js_util` is marked deprecated and will be removed in an upcoming\n  release. Users should migrate to using `dart:js_interop`. See [#59716][].\n\n[#59716]: https://github.com/dart-lang/sdk/issues/59716\n\n## 3.6.0\n\n### Language\n\nDart 3.6 adds [digit separators] to the language. To use them, set your\npackage's [SDK constraint][language version] lower bound to 3.6 or greater\n(`sdk: '^3.6.0'`).\n\n#### Digit separators\n\n[digit separators]: https://github.com/dart-lang/language/issues/2\n\nDigits in number literals (decimal integer literals, double literals,\nscientific notation literals, and hexadecimal literals) can now include\nunderscores between digits, as \"digit separators.\" The separators do not change\nthe value of a literal, but can serve to make the number more readable.\n\n```dart\n100__000_000__000_000__000_000  // one hundred million million millions!\n0x4000_0000_0000_0000\n0.000_000_000_01\n0x00_14_22_01_23_45  // MAC address\n```\n\nSeparators are not allowed at the start of a number (this would be parsed as an\nidentifier), at the end of a number, or adjacent to another character in a\nnumber, like `.`, `x`, or the `e` in scientific notation.\n\n- **Breaking Change** [#56065][]: The context used by the compiler and analyzer\n  to perform type inference on the operand of a `throw` expression has been\n  changed from the \"unknown type\" to `Object`. This makes the type system more\n  self-consistent, because it reflects the fact that it's not legal to throw\n  `null`. This change is not expected to make any difference in practice.\n\n[#56065]: https://github.com/dart-lang/sdk/issues/56065\n\n### Libraries\n\n#### `dart:io`\n\n- **Breaking Change** [#52444][]: Removed the `Platform()` constructor, which\n  has been deprecated since Dart 3.1.\n\n- **Breaking Change** [#53618][]: `HttpClient` now responds to a redirect\n  that is missing a \"Location\" header by throwing `RedirectException`, instead\n  of `StateError`.\n\n[#52444]: https://github.com/dart-lang/sdk/issues/52444\n[#53618]: https://github.com/dart-lang/sdk/issues/53618\n\n#### `dart:js_interop`\n\n- Added constructors for `JSArrayBuffer`, `JSDataView`, and concrete typed array\n  types e.g. `JSInt8Array`.\n- Added `length` and `[]`/`[]=` operators to `JSArray`.\n- Added `toJSCaptureThis` so `this` is passed in from JavaScript to the\n  callback as the first parameter.\n- Added a static `from` method on `JSArray` to create a `JSArray` from a given\n  JavaScript iterable or array-like object.\n\n### Tools\n\n#### CFE\n\n- **Breaking Change** [#56466][]: The implementation of the UP and\n  DOWN algorithms in the CFE are changed to match the specification\n  and the corresponding implementations in the Analyzer. The upper and\n  lower closures of type schemas are now computed just before they are\n  passed into the subtype testing procedure instead of at the very\n  beginning of the UP and DOWN algorithms.\n\n[#56466]: https://github.com/dart-lang/sdk/issues/56466\n\n#### Dart format\n\n- Preserve type parameters on old-style function-typed formals that also use\n  `this.` or `super.`.\n- Correctly format imports with both `as` and `if` clauses.\n\n#### Wasm compiler (dart2wasm)\n\n- The condition `dart.library.js` is now false on conditional imports in\n  dart2wasm. Note that it was already a static error to import `dart:js`\n  directly (see [#55266][]).\n\n[#55266]: https://github.com/dart-lang/sdk/issues/55266\n\n#### Pub\n\n- Support for workspaces. This allows you to develop and resolve multiple\n  packages from the same repo together. See https://dart.dev/go/pub-workspaces\n  for more info.\n- New command `dart pub bump`. Increments the version number of the current\n  package.\n\n  For example: `dart pub bump minor` will change the version from `1.2.3` to\n  `1.3.0`.\n- New validation: `dart pub publish` will warn if your `git status` is not\n  clean.\n- New flag `dart pub upgrade --unlock-transitive`.\n\n- `dart pub upgrade --unlock-transitive pkg`, will unlock and upgrade all the\n  dependencies of `pkg` instead of just `pkg`.\n\n#### Analyzer\n\n- Add the [`use_truncating_division`][] lint rule.\n- Add the experimental [`omit_obvious_local_variable_types`][] lint rule.\n- Add the experimental [`specify_nonobvious_local_variable_types`][] lint rule.\n- Add the experimental [`avoid_futureor_void`][] lint rule.\n- Add quick fixes for more than 14 diagnostics.\n- Add new assists: \"add digit separators\", \"remove digit separators\", and\n  \"invert conditional expression\".\n\n[`use_truncating_division`]: https://dart.dev/lints/use_truncating_division\n[`omit_obvious_local_variable_types`]: https://dart.dev/lints/omit_obvious_local_variable_types\n[`specify_nonobvious_local_variable_types`]: https://dart.dev/lints/specify_nonobvious_local_variable_types\n[`avoid_futureor_void`]: https://dart.dev/lints/avoid_futureor_void\n\n## 3.5.3 - 2024-09-11\n\n- Fixes an issue with the DevTools Memory tool causing OOMs. and an\nissue resulting in a missing tab bar when DevTools is embedded in\nIntelliJ and Android Studio (issue[#56607][]).\n- Fixes an issue with the DevTools release notes showing each time\nDevTools is opened instead of only the first time (issue[#56607][]).\n- Fixes an issue resulting in a missing tab bar when DevTools is\nembedded in IntelliJ and Android Studio (issue[#56607][]).\n\n[#56607]: https://github.com/dart-lang/sdk/issues/56607\n\n## 3.5.2 - 2024-08-28\n\n- Fixes a bug where `ZLibDecoder` would incorrectly attempt to decompress data\n  past the end of the zlib footer (issue [#56481][]).\n- Fixes issue where running `dart` from `PATH` could result in some commands not\n  working as expected (issues [#56080][], [#56306][], [#56499][]).\n- Fixes analysis server plugins not receiving `setContextRoots` requests or\n  being provided incorrect context roots in multi-package workspaces (issue\n  [#56475][]).\n\n[#56481]: https://github.com/dart-lang/sdk/issues/56481\n[#56080]: https://github.com/dart-lang/sdk/issues/56080\n[#56306]: https://github.com/dart-lang/sdk/issues/56306\n[#56499]: https://github.com/dart-lang/sdk/issues/56499\n[#56475]: https://github.com/dart-lang/sdk/issues/56475\n\n## 3.5.1 - 2024-08-14\n\n- Fixes resolving `include:` in `analysis_options.yaml` file in a nested\n  folder in the workspace (issue[#56464][]).\n- Fixes source maps generated by `dart compile wasm` when optimizations are\n  enabled (issue [#56423][]).\n- Fixes a bug in the `dart2wasm` compiler in unsound `-O3` / `-O4` modes where a\n  implicit setter for a field of generic type will store `null` instead of the\n  field value (issue [#56374][]).\n- Fixes a bug in the `dart2wasm` compiler that can trigger in certain situations\n  when using partial instantiations of generic tear-offs (constructors or static\n  methods) in constant expressions (issue [#56440][]).\n- The algorithm for computing the standard upper bound of two types,\n  also known is UP, is provided the missing implementation for\n  `StructuralParameterType` objects. In some corner cases cases the\n  lacking implementation resulted in a crash of the compiler (issue [#56457][]).\n\n[#56464]: https://github.com/dart-lang/sdk/issues/56464\n[#56423]: https://github.com/dart-lang/sdk/issues/56423\n[#56374]: https://github.com/dart-lang/sdk/issues/56374\n[#56440]: https://github.com/dart-lang/sdk/issues/56440\n[#56457]: https://github.com/dart-lang/sdk/issues/56457\n\n## 3.5.0 - 2024-08-06\n\n### Language\n\n- **Breaking Change** [#55418][]: The context used by the compiler to perform\n  type inference on the operand of an `await` expression has been changed to\n  match the behavior of the analyzer. This change is not expected to make any\n  difference in practice.\n\n- **Breaking Change** [#55436][]: The context used by the compiler to perform\n  type inference on the right hand side of an \"if-null\" expression (`e1 ?? e2`)\n  has been changed to match the behavior of the analyzer. change is expected to\n  have low impact on real-world code. But in principle it could cause\n  compile-time errors or changes in runtime behavior by changing inferred\n  types. The old behavior can be restored by supplying explicit types.\n\n[#55418]: https://github.com/dart-lang/sdk/issues/55418\n[#55436]: https://github.com/dart-lang/sdk/issues/55436\n\n### Libraries\n\n#### `dart:core`\n\n- **Breaking Change** [#44876][]: `DateTime` on the web platform now stores\n  microseconds. The web implementation is now practically compatible with the\n  native implementation, where it is possible to round-trip a timestamp in\n  microseconds through a `DateTime` value without rounding the lower\n  digits. This change might be breaking for apps that rely in some way on the\n  `.microsecond` component always being zero, for example, expecting only three\n  fractional second digits in the `toString()` representation. Small\n  discrepancies in arithmetic due to rounding of web integers may still occur\n  for extreme values, (1) `microsecondsSinceEpoch` outside the safe range,\n  corresponding to dates with a year outside of 1685..2255, and (2) arithmetic\n  (`add`, `subtract`, `difference`) where the `Duration` argument or result\n  exceeds 570 years.\n\n[#44876]: https://github.com/dart-lang/sdk/issues/44876\n\n#### `dart:io`\n\n- **Breaking Change** [#55786][]: `SecurityContext` is now `final`. This means\n  that `SecurityContext` can no longer be subclassed. `SecurityContext`\n  subclasses were never able to interoperate with other parts of `dart:io`.\n\n- A `ConnectionTask` can now be created using an existing `Future<Socket>`.\n  Fixes [#55562].\n\n[#55786]: https://github.com/dart-lang/sdk/issues/55786\n[#55562]: https://github.com/dart-lang/sdk/issues/55562\n\n#### `dart:typed_data`\n\n- **Breaking Change** [#53785][]: The unmodifiable view classes for typed data\n  have been removed. These classes were deprecated in Dart 3.4.\n\n  To create an unmodifiable view of a typed-data object, use the\n  `asUnmodifiableView()` methods added in Dart 3.3.\n\n- Added superinterface `TypedDataList` to typed data lists, implementing both\n  `List` and `TypedData`. Allows abstracting over all such lists without losing\n  access to either the `List` or the `TypedData` members.\n  A `ByteData` is still only a `TypedData`, not a list.\n\n[#53785]: https://github.com/dart-lang/sdk/issues/53785\n\n#### `dart:js_interop`\n\n- **Breaking Change** [#55508][]: `importModule` now accepts a `JSAny` instead\n  of a `String` to support other JS values as well, like `TrustedScriptURL`s.\n\n- **Breaking Change** [#55267][]: `isTruthy` and `not` now return `JSBoolean`\n  instead of `bool` to be consistent with the other operators.\n\n- **Breaking Change** `ExternalDartReference` no longer implements `Object`.\n  `ExternalDartReference` now accepts a type parameter `T` with a bound of\n  `Object?` to capture the type of the Dart object that is externalized.\n  `ExternalDartReferenceToObject.toDartObject` now returns a `T`.\n  `ExternalDartReferenceToObject` and `ObjectToExternalDartReference` are now\n  extensions on `T` and `ExternalDartReference<T>`, respectively, where `T\n  extends Object?`. See [#55342][] and [#55536][] for more details.\n\n- Fixed some consistency issues with `Function.toJS` across all compilers.\n  Specifically, calling `Function.toJS` on the same function gives you a new JS\n  function (see issue [#55515][]), the maximum number of arguments that are\n  passed to the JS function is determined by the static type of the Dart\n  function, and extra arguments are dropped when passed to the JS function in\n  all compilers (see [#48186][]).\n\n[#55508]: https://github.com/dart-lang/sdk/issues/55508\n[#55267]: https://github.com/dart-lang/sdk/issues/55267\n[#55342]: https://github.com/dart-lang/sdk/issues/55342\n[#55536]: https://github.com/dart-lang/sdk/issues/55536\n[#55515]: https://github.com/dart-lang/sdk/issues/55515\n[#48186]: https://github.com/dart-lang/sdk/issues/48186\n\n### Tools\n\n#### Analyzer\n\n- Add the [`unintended_html_in_doc_comment`][] lint rule.\n- Add the [`invalid_runtime_check_with_js_interop_types`][] lint rule.\n- Add the [`document_ignores`][] lint rule.\n- Add quick fixes for more than 70 diagnostics.\n- The \"Add missing switch cases\" quick fix now adds multiple cases, such that\n  the switch becomes exhaustive.\n- The \"Remove const\" quick fix now adds `const` keywords to child nodes, where\n  appropriate.\n\n[`unintended_html_in_doc_comment`]: https://dart.dev/lints/unintended_html_in_doc_comment\n[`invalid_runtime_check_with_js_interop_types`]: https://dart.dev/lints/invalid_runtime_check_with_js_interop_types\n[`document_ignores`]: https://dart.dev/lints/document_ignores\n\n#### Pub\n\n- New flag `dart pub downgrade --tighten` to restrict lower bounds of\n  dependencies' constraints to the minimum that can be resolved.\n\n### Dart Runtime\n\n- The Dart VM only executes sound null safe code, running of unsound null\n  safe code using the option `--no-sound-null-safety` has been removed.\n\n- `Dart_NewListOf` and `Dart_IsLegacyType` functions are\n  removed from Dart C API.\n\n- `Dart_DefaultCanonicalizeUrl` is removed from the Dart C API.\n\n## 3.4.4 - 2024-06-12\n\nThis is a patch release that:\n\n- Fixes an issue where pub would crash when failing to fetch advisories from\n the server. (issue [pub#4269]).\n\n- Fixes an issue where `const bool.fromEnvironment('dart.library.ffi')` is true\n  and conditional import condition `dart.library.ffi` is true in dart2wasm.\n  (issue [#55948]).\n\n- Fixes an issue where FFI calls with variadic arguments on MacOS Arm64\n  would mangle the arguments. (issue [#55943]).\n\n[pub#4269]: https://github.com/dart-lang/pub/issues/4269\n[#55948]: https://github.com/dart-lang/sdk/issues/55948\n[#55943]: https://github.com/dart-lang/sdk/issues/55943\n\n## 3.4.3 - 2024-06-05\n\nThis is a patch release that:\n\n- Fixes an issue where `DART_VM_OPTIONS` were not correctly parsed for\n  standalone Dart executables created with `dart compile exe` (issue\n  [#55818]).\n\n- Fixes a bug in dart2wasm that can result in a runtime error that says\n  `array.new_fixed()` has a constant larger than 10000 (issue [#55873]).\n\n- Adds support for `--enable-experiment` flag to `dart compile` wasm\n  (issue [#55894]).\n\n- Fixes an issue in dart2wasm compiler that can result in incorrect\n  nullability of type parameter (see [#55895]).\n\n- Disallows `dart:ffi` imports in user code in dart2wasm (e.g. issue\n  [#53910]) as dart2wasm's currently only supports a small subset of\n  `dart:ffi` (issue [#55890]).\n\n[#55818]: https://github.com/dart-lang/sdk/issues/55818\n[#55873]: https://github.com/dart-lang/sdk/issues/55873\n[#55894]: https://github.com/dart-lang/sdk/issues/55894\n[#55895]: https://github.com/dart-lang/sdk/issues/55895\n[#55910]: https://github.com/dart-lang/sdk/issues/53910\n[#55890]: https://github.com/dart-lang/sdk/issues/55890\n\n## 3.4.2 - 2024-05-29\n\nThis is a patch release that:\n\n- Marks `dart compile wasm` as no longer experimental.\n\n- Fixes two bugs in exception handling in `async` functions in dart2wasm\n  (issues [#55347], [#55457]).\n\n- Fixes restoration of `this` variable in `sync*` and `async` functions in\n  dart2wasm.\n\n- Implements missing control flow constructs (exceptions, switch/case with\n  yields) in `sync*` in dart2wasm (issues [#51342], [#51343]).\n\n- Fixes a bug dart2wasm compiler that surfaces as a compiler crash when indexing\n  lists where the compiler proofs the list to be constant and the index is\n  out-of-bounds (issue [#55817]).\n\n[#55347]: https://github.com/dart-lang/sdk/issues/55347\n[#55457]: https://github.com/dart-lang/sdk/issues/55457\n[#51342]: https://github.com/dart-lang/sdk/issues/51342\n[#51343]: https://github.com/dart-lang/sdk/issues/51343\n[#55817]: https://github.com/dart-lang/sdk/issues/55817\n\n## 3.4.1 - 2024-05-22\n\nThis is a patch release that:\n\n- Fixes a bug in the CFE which could manifest as compilation errors of Flutter\n  web apps when compiled with dart2wasm (issue [#55714]).\n\n- Fixes a bug in the pub client, such that `dart run` will not interfere with\n  Flutter l10n (at least for most cases) (issue [#55758]).\n\n[#55714]: https://github.com/dart-lang/sdk/issues/55714\n[#55758]: https://github.com/dart-lang/sdk/issues/55758\n\n## 3.4.0 - 2024-05-14\n\n### Language\n\nDart 3.4 makes improvements to the type analysis of conditional expressions\n(`e1 ? e2 : e3`), if-null expressions (`e1 ?? e2`), if-null assignments\n(`e1 ??= e2`), and switch expressions (`switch (e) { p1 => e1, ... }`). To take\nadvantage of these improvements, set your package's\n[SDK constraint][language version] lower bound to 3.4 or greater\n(`sdk: '^3.4.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n- **Breaking Change** [#54640][]: The pattern context type schema for\n  cast patterns has been changed from `Object?` to `_` (the unknown\n  type), to align with the specification. This change is not expected\n  to make any difference in practice.\n\n- **Breaking Change** [#54828][]: The type schema used by the compiler front end\n  to perform type inference on the operand of a null-aware spread operator\n  (`...?`) in map and set literals has been made nullable, to match what\n  currently happens in list literals. This makes the compiler front end behavior\n  consistent with that of the analyzer. This change is expected to be very low\n  impact.\n\n[#54640]: https://github.com/dart-lang/sdk/issues/54640\n[#54828]: https://github.com/dart-lang/sdk/issues/54828\n\n### Libraries\n\n#### `dart:async`\n\n- Added option for `ParallelWaitError` to get some meta-information that\n  it can expose in its `toString`, and the `Iterable<Future>.wait` and\n  `(Future,...,Future).wait` extension methods now provide that information.\n  Should make a `ParallelWaitError` easier to log.\n\n#### `dart:cli`\n\n- **Breaking change** [#52121][]: `waitFor` is removed in 3.4.\n\n#### `dart:ffi`\n\n- Added `Struct.create` and `Union.create` to create struct and union views\n  of the sequence of bytes stored in a subtype of `TypedData`.\n\n#### `dart:io`\n\n- **Breaking change** [#53863][]: `Stdout` has a new field `lineTerminator`,\n  which allows developers to control the line ending used by `stdout` and\n  `stderr`. Classes that `implement Stdout` must define the `lineTerminator`\n  field. The default semantics of `stdout` and `stderr` are not changed.\n\n- Deprecates `FileSystemDeleteEvent.isDirectory`, which always returns\n  `false`.\n\n[#53863]: https://github.com/dart-lang/sdk/issues/53863\n\n#### `dart:js_interop`\n\n- Fixes an issue with several comparison operators in `JSAnyOperatorExtension`\n  that were declared to return `JSBoolean` but really returned `bool`. This led\n  to runtime errors when trying to use the return values. The implementation now\n  returns a `JSBoolean` to align with the interface. See issue [#55024] for\n  more details.\n\n- Added `ExternalDartReference` and related conversion functions\n  `toExternalReference` and `toDartObject`. This is a faster alternative to\n  `JSBoxedDartObject`, but with fewer safety guarantees and fewer\n  interoperability capabilities. See [#55187] for more details.\n\n- On dart2wasm, `JSBoxedDartObject` now is an actual JS object that wraps the\n  opaque Dart value instead of only externalizing the value. Like the JS\n  backends, you'll now get a more useful error when trying to use it in another\n  Dart runtime.\n\n- Added `isA` helper to make type checks easier with interop types. See\n  [#54138][] for more details.\n\n[#54138]: https://github.com/dart-lang/sdk/issues/54138\n[#55024]: https://github.com/dart-lang/sdk/issues/55024\n[#55187]: https://github.com/dart-lang/sdk/issues/55187\n\n#### `dart:typed_data`\n\n- **BREAKING CHANGE** [#53218][] [#53785][]: The unmodifiable view classes for\n  typed data are deprecated.\n\n  To create an unmodifiable view of a typed-data object, use the\n  `asUnmodifiableView()` methods added in Dart 3.3:\n\n  ```dart\n  Uint8List data = ...;\n  final readOnlyView = data.asUnmodifiableView();\n  // readOnlyView has type Uint8List, and throws if attempted modified.\n  ```\n\n  The reason for this change is to allow more flexibility in the implementation\n  of typed data, so the native and web platforms can use different strategies\n  to ensure that typed data has good performance.\n\n  The deprecated types will be removed in Dart 3.5.\n\n[#53218]: https://github.com/dart-lang/sdk/issues/53218\n[#53785]: https://github.com/dart-lang/sdk/issues/53785\n\n### Tools\n\n#### Analyzer\n\n- Improved code completion. Fixed over 50% of completion correctness bugs,\n  tagged `analyzer-completion-correctness` in the [issue\n  tracker][analyzer-completion-correction-issues].\n\n- Support for new annotations introduced in version 1.14.0 of the [meta]\n  package.\n\n  - Support for the [`@doNotSubmit`] annotation, noting that any usage of an\n    annotated member should not be submitted to source control.\n\n  - Support for the [`@mustBeConst`] annotation, which indicates that an\n    annotated parameter only accepts constant arguments.\n\n[analyzer-completion-correction-issues]: https://github.com/dart-lang/sdk/labels/analyzer-completion-correctness\n[meta]: https://pub.dev/packages/meta\n[`@doNotSubmit`]: https://pub.dev/documentation/meta/latest/meta/doNotSubmit-constant.html\n[`@mustBeConst`]: https://pub.dev/documentation/meta/latest/meta/mustBeConst-constant.html\n\n#### Linter\n\n- Added the [`unnecessary_library_name`][] lint.\n- Added the [`missing_code_block_language_in_doc_comment`][] lint.\n\n[`unnecessary_library_name`]: https://dart.dev/lints/unnecessary_library_name\n[`missing_code_block_language_in_doc_comment`]: https://dart.dev/lints/missing_code_block_language_in_doc_comment\n\n#### Compilers\n\n- The compilation environment will no longer pretend to contain entries with\n  value `\"\"` for all `dart.library.foo` strings, where `dart:foo` is not an\n  available library. Instead there will only be entries for the available\n  libraries, like `dart.library.core`, where the value was, and still is,\n  `\"true\"`. This should have no effect on `const bool.fromEnvironment(...)` or\n  `const String.fromEnvironment(...)` without a `defaultValue` argument, an\n  argument which was always ignored previously. It changes the behavior of\n  `const bool.hasEnvironment(...)` on such an input, away from always being\n  `true` and therefore useless.\n\n#### DevTools\n\n- Updated DevTools to version 2.33.0 from 2.31.1.\n  To learn more, check out the release notes for versions\n  [2.32.0][devtools-2-32-0] and [2.33.0][devtools-2-33-0].\n\n[devtools-2-32-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.32.0\n[devtools-2-33-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.33.0\n\n#### Pub\n\n- Dependency resolution and `dart pub outdated` will now surface if a dependency\n  is affected by a security advisory, unless the advisory is listed under a\n  `ignored_advisories` section in the `pubspec.yaml` file. To learn more about\n  pub's support for security advisories, visit\n  [dart.dev/go/pub-security-advisories][pub-security-advisories].\n\n- `path`-dependencies inside `git`-dependencies are now resolved relative to the\n  git repo.\n\n- All `dart pub` commands can now be run from any subdirectory of a project. Pub\n  will find the first parent directory with a `pubspec.yaml` and operate\n  relative it.\n\n- New command `dart pub unpack` that downloads a package from pub.dev and\n  extracts it to a subfolder of the current directory.\n\n  This can be useful for inspecting the code, or playing with examples.\n\n[pub-security-advisories]: https://dart.dev/go/pub-security-advisories\n\n### Dart Runtime\n\n- Dart VM flags and options can now be provided to any executable generated\n  using `dart compile exe` via the `DART_VM_OPTIONS` environment variable.\n  `DART_VM_OPTIONS` should be set to a list of comma-separated flags and options\n  with no whitespace. Options that allow for multiple values to be provided as\n  comma-separated values are not supported (e.g.,\n  `--timeline-streams=Dart,GC,Compiler`).\n\n  Example of a valid `DART_VM_OPTIONS` environment variable:\n\n  ```bash\n  DART_VM_OPTIONS=--random_seed=42,--verbose_gc\n  ```\n\n- Dart VM no longer supports external strings: `Dart_IsExternalString`,\n  `Dart_NewExternalLatin1String` and `Dart_NewExternalUTF16String` functions are\n  removed from Dart C API.\n\n## 3.3.4 - 2024-04-17\n\nThis is a patch release that:\n\n- Fixes an issue with JS interop in dart2wasm where JS interop methods that used\n  the enclosing library's `@JS` annotation were actually using the invocation's\n  enclosing library's `@JS` annotation. (issue [#55430]).\n\n[#55430]: https://github.com/dart-lang/sdk/issues/55430\n\n## 3.3.3 - 2024-03-27\n\nThis is a patch release that:\n\n- Fixes an issue where dart vm crashed when running on pre-SSE41 older CPUs on Windows (issue [#55211][]).\n\n[#55211]: https://github.com/dart-lang/sdk/issues/55211\n\n## 3.3.2 - 2024-03-20\n\nThis is a patch release that:\n\n- Fixes an issue in the CFE that placed some structural parameter references out\n  of their context in the code restored from dill files, causing crashes in the\n  incremental compiler whenever it restored a typedef from dill such that the\n  typedef contained a generic function type on its right-hand side (issue\n  [#55158][]).\n- Fixes an issue in the CFE that prevented redirecting factories from being\n  resolved in initializers of extension types (issue [#55194][]).\n- Fixes an issues with VM's implementation of `DateTime.timeZoneName`\n  on Windows, which was checking whether current date is in the summer or\n  standard time rather than checking if the given moment is in the summer or\n  standard time (issue [#55240][]).\n\n[#55158]: https://github.com/dart-lang/sdk/issues/55158\n[#55194]: https://github.com/dart-lang/sdk/issues/55194\n[#55240]: https://github.com/dart-lang/sdk/issues/55240\n\n## 3.3.1 - 2024-03-06\n\nThis is a patch release that:\n\n- Fixes an issue in dart2js where object literal constructors in interop\n  extension types would fail to compile without an `@JS` annotation on the\n  library (issue [#55057][]).\n- Disallows certain types involving extension types from being used as the\n  operand of an `await` expression, unless the extension type itself implements\n  `Future` (issue [#55095][]).\n\n[#55057]: https://github.com/dart-lang/sdk/issues/55057\n[#55095]: https://github.com/dart-lang/sdk/issues/55095\n\n## 3.3.0\n\n### Language\n\nDart 3.3 adds [extension types] to the language. To use them, set your\npackage's [SDK constraint][language version] lower bound to 3.3 or greater\n(`sdk: '^3.3.0'`).\n\n#### Extension types\n\n[extension types]: https://github.com/dart-lang/language/issues/2727\n\nAn _extension type_ wraps an existing type with a different, static-only\ninterface. It works in a way which is in many ways similar to a class that\ncontains a single final instance variable holding the wrapped object, but\nwithout the space and time overhead of an actual wrapper object.\n\nExtension types are introduced by _extension type declarations_. Each\nsuch declaration declares a new named type (not just a new name for the\nsame type). It declares a _representation variable_ whose type is the\n_representation type_. The effect of using an extension type is that the\n_representation_ (that is, the value of the representation variable) has\nthe members declared by the extension type rather than the members declared\nby its \"own\" type (the representation type). Example:\n\n```dart\nextension type Meters(int value) {\n  String get label => '${value}m';\n  Meters operator +(Meters other) => Meters(value + other.value);\n}\n\nvoid main() {\n  var m = Meters(42); // Has type `Meters`.\n  var m2 = m + m; // OK, type `Meters`.\n  // int i = m; // Compile-time error, wrong type.\n  // m.isEven; // Compile-time error, no such member.\n  assert(identical(m, m.value)); // Succeeds.\n}\n```\n\nThe declaration `Meters` is an extension type that has representation type\n`int`. It introduces an implicit constructor `Meters(int value);` and a\ngetter `int get value`. `m` and `m.value` is the very same object, but `m`\nhas type `Meters` and `m.value` has type `int`. The point is that `m`\nhas the members of `Meters` and `m.value` has the members of `int`.\n\nExtension types are entirely static, they do not exist at run time. If `o`\nis the value of an expression whose static type is an extension type `E`\nwith representation type `R`, then `o` is just a normal object whose\nrun-time type is a subtype of `R`, exactly like the value of an expression\nof type `R`. Also the run-time value of `E` is `R` (for example, `E == R`\nis true). In short: At run time, an extension type is erased to the\ncorresponding representation type.\n\nA method call on an expression of an extension type is resolved at\ncompile-time, based on the static type of the receiver, similar to how\nextension method calls work. There is no virtual or dynamic dispatch. This,\ncombined with no memory overhead, means that extension types are zero-cost\nwrappers around their representation value.\n\nWhile there is thus no performance cost to using extension types, there is\na safety cost. Since extension types are erased at compile time, run-time\ntype tests on values that are statically typed as an extension type will\ncheck the type of the representation object instead, and if the type check\nlooks like it tests for an extension type, like `is Meters`, it actually\nchecks for the representation type, that is, it works exactly like `is int`\nat run time. Moreover, as mentioned above, if an extension type is used as\na type argument to a generic class or function, the type variable will be\nbound to the representation type at run time. For example:\n\n```dart\nvoid main() {\n  var meters = Meters(3);\n\n  // At run time, `Meters` is just `int`.\n  print(meters is int); // Prints \"true\".\n  print(<Meters>[] is List<int>); // Prints \"true\".\n\n  // An explicit cast is allowed and succeeds as well:\n  List<Meters> meterList = <int>[1, 2, 3] as List<Meters>;\n  print(meterList[1].label); // Prints \"2m\".\n}\n```\n\nExtension types are useful when you are willing to sacrifice some run-time\nencapsulation in order to avoid the overhead of wrapping values in\ninstances of wrapper classes, but still want to provide a different\ninterface than the wrapped object. An example of that is interop, where you\nmay have data that are not Dart objects to begin with (for example, raw\nJavaScript objects when using JavaScript interop), and you may have large\ncollections of objects where it's not efficient to allocate an extra object\nfor each element.\n\n#### Other changes\n\n- **Breaking Change** [#54056][]: The rules for private field promotion have\n  been changed so that an abstract getter is considered promotable if there are\n  no conflicting declarations. There are no conflicting declarations if\n  there are no non-final fields, external fields, concrete getters, or\n  `noSuchMethod` forwarding getters with the same name in the same library.\n  This makes the implementation more consistent and allows\n  type promotion in a few rare scenarios where it wasn't previously allowed.\n  It is unlikely, but this change could cause a breakage by changing\n  an inferred type in a way that breaks later code. For example:\n\n  ```dart\n  class A {\n    int? get _field;\n  }\n  class B extends A {\n    final int? _field;\n    B(this._field);\n  }\n  test(A a) {\n    if (a._field != null) {\n      var x = a._field; // Previously had type `int?`; now has type `int`\n      ...\n      x = null; // Previously allowed; now causes a compile-time error.\n    }\n  }\n  ```\n\n  Affected code can be fixed by adding an explicit type annotation.\n  For example, in the above snippet, `var x` can be changed to `int? x`.\n\n  It's also possible that some continuous integration configurations might fail\n  if they have been configured to treat warnings as errors, because the expanded\n  type promotion could lead to one of the following warnings:\n\n  - `unnecessary_non_null_assertion`\n  - `unnecessary_cast`\n  - `invalid_null_aware_operator`\n\n  These warnings can be addressed in the usual way, by removing the unnecessary\n  operation in the first two cases, or changing `?.` to `.` in the third case.\n\n  To learn more about other rules surrounding type promotion,\n  check out the guide on [Fixing type promotion failures][].\n\n[#54056]: https://github.com/dart-lang/sdk/issues/54056\n[Fixing type promotion failures]: https://dart.dev/tools/non-promotion-reasons\n\n### Libraries\n\n#### `dart:core`\n\n- `String.fromCharCodes` now allow `start` and `end` to be after the end of\n  the `Iterable` argument, just like `skip` and `take` does on an `Iterable`.\n\n#### `dart:ffi`\n\n- In addition to functions, `@Native` can now be used on fields.\n- Allow taking the address of native functions and fields via\n  `Native.addressOf`.\n- The `elementAt` pointer arithmetic extension methods on\n  core `Pointer` types are now deprecated.\n  Migrate to the new `-` and `+` operators instead.\n- The experimental and deprecated `@FfiNative` annotation has been removed.\n  Usages should be updated to use the `@Native` annotation.\n\n#### `dart:js_interop`\n\n- **Breaking Change in the representation of JS types** [#52687][]: JS types\n  like `JSAny` were previously represented using a custom erasure of\n  `@staticInterop` types that were compiler-specific. They are now represented\n  as extension types where their representation types are compiler-specific.\n  This means that user-defined `@staticInterop` types that implemented `JSAny`\n  or `JSObject` can no longer do so and need to use\n  `JSObject.fromInteropObject`. Going forward, it's recommended to use extension\n  types to define interop APIs. Those extension types can still implement JS\n  types.\n- **JSArray and JSPromise generics**: `JSArray` and `JSPromise` are now generic\n  types whose type parameter is a subtype of `JSAny?`. Conversions to and from\n  these types are changed to account for the type parameters of the Dart or JS\n  type, respectively.\n- **Breaking Change in names of extensions**: Some `dart:js_interop` extension\n  members are moved to different extensions on the same type or a supertype to\n  better organize the API surface. See `JSAnyUtilityExtension` and\n  `JSAnyOperatorExtension` for the new extensions. This shouldn't make a\n  difference unless the extension names were explicitly used.\n- Add `importModule` to allow users to dynamically import modules using the JS\n  `import()` expression.\n\n[#52687]: https://github.com/dart-lang/sdk/issues/52687\n\n#### `dart:js_interop_unsafe`\n\n- Add `has` helper to make `hasProperty` calls more concise.\n\n#### `dart:typed_data`\n\n- **BREAKING CHANGE** (https://github.com/dart-lang/sdk/issues/53218) The\n  unmodifiable view classes for typed data are deprecated. Instead of using the\n  constructors for these classes to create an unmodifiable view, e.g.\n\n  ```dart\n  Uint8List data = ...\n  final readOnlyView = UnmodifiableUint8ListView(data);\n  ```\n\n  use the new `asUnmodifiableView()` methods:\n\n  ```dart\n  Uint8List data = ...\n  final readOnlyView = data.asUnmodifiableView();\n  ```\n\n  The reason for this change is to allow more flexibility in the implementation\n  of typed data so the native and web platforms can use different strategies\n  for ensuring typed data has good performance.\n\n  The deprecated types will be removed in a future Dart version.\n\n#### `dart:nativewrappers`\n\n- **Breaking Change** [#51896][]: The NativeWrapperClasses are marked `base` so\n  that none of their subtypes can be implemented. Implementing subtypes can lead\n  to crashes when passing such native wrapper to a native call, as it will try\n  to unwrap a native field that doesn't exist.\n\n[#51896]: https://github.com/dart-lang/sdk/issues/51896\n\n### Tools\n\n#### Dart command line\n\n- The `dart create` command now uses v3 of `package:lints`,\n  including multiple new recommended lints by default.\n  To learn more about the updated collection of lints,\n  check out the `package:lints` [3.0.0 changelog entry][lints-3-0].\n\n[lints-3-0]: https://pub.dev/packages/lints/changelog#300\n\n#### DevTools\n\n- Updated DevTools to version 2.31.1 from 2.28.1.\n  To learn more, check out the release notes for versions\n  [2.29.0][devtools-2-29-0], [2.30.0][devtools-2-30-0],\n  and [2.31.0][devtools-2-31-0].\n\n[devtools-2-29-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.29.0\n[devtools-2-30-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.30.0\n[devtools-2-31-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.31.0\n\n#### Wasm compiler (dart2wasm)\n\n- **Breaking Change** [#54004][]: `dart:js_util`, `package:js`, and `dart:js`\n  are now disallowed from being imported when compiling with `dart2wasm`. Prefer\n  using `dart:js_interop` and `dart:js_interop_unsafe`.\n\n[#54004]: https://github.com/dart-lang/sdk/issues/54004\n\n#### Development JavaScript compiler (DDC)\n\n- Type arguments of `package:js` interop types are now printed as `any` instead\n  of being omitted. This is simply a change to the textual representation of\n  package js types that have type arguments. These type arguments are still\n  completely ignored by the type system at runtime.\n\n- Removed \"implements <...>\" text from the Chrome custom formatter display for\n  Dart classes. This information provides little value and keeping it imposes an\n  unnecessary maintenance cost.\n\n#### Production JavaScript compiler (dart2js)\n\n- **Breaking Change** [#54201][]:\n  The `Invocation` that is passed to `noSuchMethod` will no longer have a\n  minified `memberName`, even when dart2js is invoked with `--minify`.\n  See [#54201][] for more details.\n\n[#54201]: https://github.com/dart-lang/sdk/issues/54201\n\n#### Analyzer\n\n- You can now suppress diagnostics in `pubspec.yaml` files by\n  adding an `# ignore: <diagnostic_id>` comment.\n- Invalid `dart doc` comment directives are now reported.\n- The [`flutter_style_todos`][] lint now has a quick fix.\n\n[`flutter_style_todos`]: https://dart.dev/lints/flutter_style_todos\n\n#### Linter\n\n- Removed the `iterable_contains_unrelated_type` and\n  `list_remove_unrelated_type` lints.\n  Consider migrating to the expanded\n  [`collection_methods_unrelated_type`][] lint.\n- Removed various lints that are no longer necessary with sound null safety:\n  - `always_require_non_null_named_parameters`\n  - `avoid_returning_null`,\n  - `avoid_returning_null_for_future`\n\n[`collection_methods_unrelated_type`]: https://dart.dev/lints/collection_methods_unrelated_type\n\n## 3.2.3 - 2023-12-06\n\nThis is a patch release that:\n\n- Disallows final fields to be used in a constant context during analysis\n  (issue [#54232][]).\n- Upgrades Dart DevTools to version 2.28.4 (issue [#54213][]).\n- Fixes new AOT snapshots in the SDK failing with SIGILL in ARM\n  environments that don't support the integer division\n  instructions or x86-64 environments that don't support\n  SSE4.1 (issue [#54215][]).\n\n[#54232]: https://github.com/dart-lang/sdk/issues/54232\n[#54213]: https://github.com/dart-lang/sdk/issues/54213\n[#54215]: https://github.com/dart-lang/sdk/issues/54215\n\n## 3.2.2 - 2023-11-29\n\nThis is a patch release that:\n\n- Adjusts the nullablity computations in the implementation of the\n  upper bound algorithm in the compiler frontend (issue [#53999][]).\n\n- Fixes missing closure code completion entries for function parameters\n  for LSP-based editors like VS Code (issue [#54112][]).\n\n[#53999]: https://github.com/dart-lang/sdk/issues/53999\n[#54112]: https://github.com/dart-lang/sdk/issues/54112\n\n## 3.2.1 - 2023-11-22\n\nThis is a patch release that:\n\n- Fixes the left/mobile sidebar being empty on non-class pages\n  in documentation generated with `dart doc` (issue [#54073][]).\n\n- Fixes a JSON array parsing bug that causes a segmentation fault when\n  `flutter test` is invoked with the `--coverage` flag\n  (SDK issue [#54059][], Flutter issue [#124145][]).\n\n- Upgrades Dart DevTools to version 2.28.3 (issue [#54085][]).\n\n[#54073]: https://github.com/dart-lang/sdk/issues/54073\n[#54059]: https://github.com/dart-lang/sdk/issues/54059\n[#124145]: https://github.com/flutter/flutter/issues/124145\n[#54085]: https://github.com/dart-lang/sdk/issues/54085\n\n## 3.2.0 - 2023-11-15\n\n### Language\n\nDart 3.2 adds the following features. To use them, set your package's [SDK\nconstraint][language version] lower bound to 3.2 or greater (`sdk: '^3.2.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n- **Private field promotion**: In most circumstances, the types of private final\n  fields can now be promoted by null checks and `is` tests. For example:\n\n  ```dart\n  class Example {\n    final int? _privateField;\n    Example(this._privateField);\n\n    f() {\n      if (_privateField != null) {\n        // _privateField has now been promoted; you can use it without\n        // null checking it.\n        int i = _privateField; // OK\n      }\n    }\n  }\n\n  // Private field promotions also work from outside of the class:\n  f(Example x) {\n    if (x._privateField != null) {\n      int i = x._privateField; // OK\n    }\n  }\n  ```\n\n  To ensure soundness, a field is not eligible for field promotion in the\n  following circumstances:\n  - If it's not final (because a non-final field could be changed in between the\n    test and the usage, invalidating the promotion).\n  - If it's overridden elsewhere in the library by a concrete getter or a\n    non-final field (because an access to an overridden field might resolve at\n    runtime to the overriding getter or field).\n  - If it's not private (because a non-private field might be overridden\n    elsewhere in the program).\n  - If it has the same name as a concrete getter or a non-final field in some\n    other unrelated class in the library (because a class elsewhere in the\n    program might extend one of the classes and implement the other, creating an\n    override relationship between them).\n  - If there is a concrete class `C` in the library whose interface contains a\n    getter with the same name, but `C` does not have an implementation of that\n    getter (such unimplemented getters aren't safe for field promotion, because\n    they are implicitly forwarded to `noSuchMethod`, which might not return the\n    same value each time it's called).\n\n- **Breaking Change** [#53167][]: Use a more precise split point for refutable\n  patterns. Previously, in an if-case statement, if flow analysis could prove\n  that the scrutinee expression was guaranteed to throw an exception, it would\n  sometimes fail to propagate type promotions implied by the pattern to the\n  (dead) code that follows. This change makes the type promotion behavior of\n  if-case statements consistent regardless of whether the scrutinee expression\n  throws an exception.\n\n  No live code is affected by this change, but there is a small chance that the\n  change in types will cause a compile-time error to appear in some dead code in\n  the user's project, where no compile-time error appeared previously.\n\n[#53167]: https://github.com/dart-lang/sdk/issues/53167\n\n### Libraries\n\n#### `dart:async`\n\n- Added `broadcast` parameter to `Stream.empty` constructor.\n\n#### `dart:cli`\n\n- **Breaking change** [#52121][]:\n  - `waitFor` is disabled by default and slated for removal in 3.4. Attempting\n  to call this function will now throw an exception. Users that still depend\n  on `waitFor` can enable it by passing `--enable_deprecated_wait_for` flag\n  to the VM.\n\n[#52121]: https://github.com/dart-lang/sdk/issues/52121\n\n#### `dart:convert`\n\n- **Breaking change** [#52801][]:\n  - Changed return types of `utf8.encode()` and `Utf8Codec.encode()` from\n    `List<int>` to `Uint8List`.\n\n[#52801]: https://github.com/dart-lang/sdk/issues/52801\n\n#### `dart:developer`\n\n- Deprecated the `Service.getIsolateID` method.\n- Added `getIsolateId` method to `Service`.\n- Added `getObjectId` method to `Service`.\n\n#### `dart:ffi`\n\n- Added the `NativeCallable.isolateLocal` constructor. This creates\n  `NativeCallable`s with the same functionality as `Pointer.fromFunction`,\n  except that `NativeCallable` accepts closures.\n- Added the `NativeCallable.keepIsolateAlive` method, which determines whether\n  the `NativeCallable` keeps the isolate that created it alive.\n- All `NativeCallable` constructors can now accept closures. Previously\n  `NativeCallable`s had the same restrictions as `Pointer.fromFunction`, and\n  could only create callbacks for static functions.\n- **Breaking change** [#53311][]: `NativeCallable.nativeFunction` now throws an\n  error if is called after the `NativeCallable` has already been `close`d. Calls\n  to `close` after the first are now ignored.\n\n[#53311]: https://github.com/dart-lang/sdk/issues/53311\n\n#### `dart:io`\n\n- **Breaking change** [#53005][]: The headers returned by\n  `HttpClientResponse.headers` and `HttpRequest.headers` no longer include\n  trailing whitespace in their values.\n\n- **Breaking change** [#53227][]: Folded headers values returned by\n  `HttpClientResponse.headers` and `HttpRequest.headers` now have a space\n  inserted at the fold point.\n\n[#53005]: https://dartbug.com/53005\n[#53227]: https://dartbug.com/53227\n\n#### `dart:isolate`\n\n- Added `Isolate.packageConfigSync` and `Isolate.resolvePackageUriSync` APIs.\n\n#### `dart:js_interop`\n\n- **Breaking Change on JSNumber.toDart and Object.toJS**:\n  `JSNumber.toDart` is removed in favor of `toDartDouble` and `toDartInt` to\n  make the type explicit. `Object.toJS` is also removed in favor of\n  `Object.toJSBox`. Previously, this function would allow Dart objects to flow\n  into JS unwrapped on the JS backends. Now, there's an explicit wrapper that is\n  added and unwrapped via `JSBoxedDartObject.toDart`. Similarly,\n  `JSExportedDartObject` is renamed to `JSBoxedDartObject` and the extensions\n  `ObjectToJSExportedDartObject` and `JSExportedDartObjectToObject` are renamed\n  to `ObjectToJSBoxedDartObject` and `JSBoxedDartObjectToObject` in order to\n  avoid confusion with `@JSExport`.\n- **Type parameters in external APIs**:\n  Type parameters must now be bound to a static interop type or one of the\n  `dart:js_interop` types like `JSNumber` when used in an external API. This\n  only affects `dart:js_interop` classes and not `package:js` or other forms of\n  JS interop.\n- **Subtyping `dart:js_interop` types**:\n  `@staticInterop` types can subtype only `JSObject` and `JSAny` from the set of\n  JS types in `dart:js_interop`. Subtyping other types from `dart:js_interop`\n  would result in confusing type errors before, so this makes it a static error.\n- **Global context of `dart:js_interop` and `@staticInterop` APIs**:\n  Static interop APIs will now use the same global context as non-static interop\n  instead of `globalThis` to avoid a greater migration. Static interop APIs,\n  either through `dart:js_interop` or the `@staticInterop` annotation, have used\n  JavaScript's `globalThis` as the global context. This is relevant to things\n  like external top-level members or external constructors, as this is the root\n  context we expect those members to reside in. Historically, this was not the\n  case in dart2js and DDC. We used either `self` or DDC's `global` in non-static\n  interop APIs with `package:js`. So, static interop APIs will now use one of\n  those global contexts. Functionally, this should matter in only a very small\n  number of cases, like when using older browser versions. `dart:js_interop`'s\n  `globalJSObject` is also renamed to `globalContext` and returns the global\n  context used in the lowerings.\n- **Breaking Change on Types of `dart:js_interop` External APIs**:\n  External JS interop APIs when using `dart:js_interop` are restricted to a set\n  of allowed types. Namely, this includes the primitive types like `String`, JS\n  types from `dart:js_interop`, and other static interop types (either through\n  `@staticInterop` or extension types).\n- **Breaking Change on `dart:js_interop` `isNull` and `isUndefined`**:\n  `null` and `undefined` can only be discerned in the JS backends. dart2wasm\n  conflates the two values and treats them both as Dart null. Therefore, these\n  two helper methods should not be used on dart2wasm and will throw to avoid\n  potentially erroneous code.\n- **Breaking Change on `dart:js_interop` `typeofEquals` and `instanceof`**:\n  Both APIs now return a `bool` instead of a `JSBoolean`. `typeofEquals` also\n  now takes in a `String` instead of a `JSString`.\n- **Breaking Change on `dart:js_interop` `JSAny` and `JSObject`**:\n  These types can only be implemented, and no longer extended, by user\n  `@staticInterop` types.\n- **Breaking Change on `dart:js_interop` `JSArray.withLength`**:\n  This API now takes in an `int` instead of `JSNumber`.\n\n### Tools\n\n#### Development JavaScript compiler (DDC)\n\n- Applications compiled by DDC will no longer add members to the native\n  JavaScript Object prototype.\n- **Breaking change for JS interop with Symbols and BigInts**:\n  JavaScript `Symbol`s and `BigInt`s are now associated with their own\n  interceptor and should not be used with `package:js` classes. These types were\n  being intercepted with the assumption that they are a subtype of JavaScript's\n  `Object`, but this is incorrect. This lead to erroneous behavior when using\n  these types as Dart `Object`s. See [#53106][] for more details. Use\n  `dart:js_interop`'s `JSSymbol` and `JSBigInt` with extension types to interop\n  with these types.\n\n#### Production JavaScript compiler (dart2js)\n\n- **Breaking change for JS interop with Symbols and BigInts**:\n  JavaScript `Symbol`s and `BigInt`s are now associated with their own\n  interceptor and should not be used with `package:js` classes. These types were\n  being intercepted with the assumption that they are a subtype of JavaScript's\n  `Object`, but this is incorrect. This lead to erroneous behavior when using\n  these types as Dart `Object`s. See [#53106][] for more details. Use\n  `dart:js_interop`'s `JSSymbol` and `JSBigInt` with extension types to interop\n  with these types.\n\n[#53106]: https://github.com/dart-lang/sdk/issues/53106\n\n#### Dart command line\n\n- The `dart create` command has a new `cli` template\n  to quickly create Dart command-line applications\n  with basic argument parsing capabilities.\n  To learn more about using the template,\n  run `dart help create`.\n\n#### Dart format\n\n- Always split enum declarations containing a line comment.\n- Fix regression in splitting type annotations with library prefixes.\n- Support `--enable-experiment` command-line option to enable language\n  experiments.\n\n#### DevTools\n\n- Incorporated the [2.26.1][devtools-2-26-1], [2.27.0][devtools-2-27-0], and\n  [2.28.1][devtools-2-28-1] releases of DevTools.\n\n[devtools-2-26-1]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.26.1\n[devtools-2-27-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.27.0\n[devtools-2-28-1]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.28.1\n\n#### Linter\n\n- Added the experimental [`annotate_redeclares`][] lint.\n- Marked the [`use_build_context_synchronously`][] lint as stable.\n\n[`annotate_redeclares`]: https://dart.dev/lints/annotate_redeclares\n[`use_build_context_synchronously`]: https://dart.dev/lints/use_build_context_synchronously\n\n#### Pub\n\n- New option `dart pub upgrade --tighten` which will update dependencies' lower\n  bounds in `pubspec.yaml` to match the current version.\n- The commands `dart pub get`/`add`/`upgrade` will now show if a dependency\n  changed between direct, dev and transitive dependency.\n- The command `dart pub upgrade` no longer shows unchanged dependencies.\n\n## 3.1.5 - 2023-10-25\n\nThis is a patch release that:\n\n- Fixes an issue affecting Dart compiled to JavaScript running in Node.js 21. A\n  change in Node.js 21 affected the Dart Web compiler runtime. This patch\n  release accommodates for those changes (issue #53810).\n\n[#53810]: https://github.com/dart-lang/sdk/issues/53810\n\n## 3.1.4 - 2023-10-18\n\nThis is a patch release that:\n\n- Fixes an issue in the Dart VM, users are not being able to see\n  value of variables while debugging code (issue [#53747]).\n\n[#53654]: https://github.com/dart-lang/sdk/issues/53747\n\n## 3.1.3 - 2023-09-27\n\nThis is a patch release that:\n\n- Fixes a bug in dart2js which would cause the compiler to crash when using\n  `@staticInterop` `@anonymous` factory constructors with type parameters (see\n  issue [#53579] for more details).\n\n- The standalone Dart VM now exports symbols only for the Dart_* embedding API\n  functions, avoiding conflicts with other DSOs loaded into the same process,\n  such as shared libraries loaded through `dart:ffi`, that may have different\n  versions of the same symbols (issue [#53503]).\n\n- Fixes an issue with super slow access to variables while debugging.\n  The fix avoids searching static functions in the imported libraries\n  as references to members are fully resolved by the front-end. (issue\n  [#53541])\n\n[#53579]: https://github.com/dart-lang/sdk/issues/53579\n[#53267]: https://github.com/dart-lang/sdk/issues/53503\n[#53541]: https://github.com/dart-lang/sdk/issues/53541\n\n## 3.1.2 - 2023-09-13\n\nThis is a patch release that:\n\n- Fixes a bug in dart2js which crashed the compiler when a typed record pattern\n  was used outside the scope of a function body, such as in a field initializer.\n  For example `final x = { for (var (int a,) in someList) a: a };`\n  (issue [#53449])\n\n- Fixes an expedient issue of users seeing an unhandled\n  exception pause in the debugger, please see\n  https://github.com/dart-lang/sdk/issues/53450 for more\n  details.\n  The fix uses try/catch in lookupAddresses instead of\n  Future error so that we don't see an unhandled exception\n  pause in the debugger (issue [#53450])\n\n[#53449]: https://github.com/dart-lang/sdk/issues/53449\n[#53450]: https://github.com/dart-lang/sdk/issues/53450\n\n## 3.1.1 - 2023-09-07\n\nThis is a patch release that:\n\n- Fixes a bug in the parser which prevented a record pattern from containing a\n  nested record pattern, where the nested record pattern uses record\n  destructuring shorthand syntax, for example `final ((:a, :b), c) = record;`\n  (issue [#53352]).\n\n[#53352]: https://github.com/dart-lang/sdk/issues/53352\n\n## 3.1.0 - 2023-08-16\n\n### Libraries\n\n#### `dart:async`\n\n- **Breaking change** [#52334][]:\n  - Added the `interface` modifier to purely abstract classes:\n    `MultiStreamController`, `StreamConsumer`, `StreamIterator` and\n    `StreamTransformer`. As a result, these types can only be implemented,\n    not extended or mixed in.\n\n[#52334]: https://github.com/dart-lang/sdk/issues/52334\n\n#### `dart:core`\n\n- `Uri.base` on native platforms now respects `IOOverrides` overriding\n   current directory ([#39796][]).\n\n[#39796]: https://github.com/dart-lang/sdk/issues/39796\n\n#### `dart:ffi`\n\n- Added the `NativeCallable` class, which can be used to create callbacks that\n  allow native code to call into Dart code from any thread. See\n  `NativeCallable.listener`. In future releases, `NativeCallable` will be\n  updated with more functionality, and will become the recommended way of\n  creating native callbacks for all use cases, replacing `Pointer.fromFunction`.\n\n#### `dart:io`\n\n- **Breaking change** [#51486][]:\n  - Added `sameSite` to the `Cookie` class.\n  - Added class `SameSite`.\n- **Breaking change** [#52027][]: `FileSystemEvent` is\n  [`sealed`](https://dart.dev/language/class-modifiers#sealed). This means\n  that `FileSystemEvent` cannot be extended or implemented.\n- Added a deprecation warning when `Platform` is instantiated.\n- Added `Platform.lineTerminator` which exposes the character or characters\n  that the operating system uses to separate lines of text, e.g.,\n  `\"\\r\\n\"` on Windows.\n\n[#51486]: https://github.com/dart-lang/sdk/issues/51486\n[#52027]: https://github.com/dart-lang/sdk/issues/52027\n\n#### `dart:js_interop`\n\n- **Object literal constructors**:\n  `ObjectLiteral` is removed from `dart:js_interop`. It's no longer needed in\n  order to declare an object literal constructor with inline classes. As long as\n  an external constructor has at least one named parameter, it'll be treated as\n  an object literal constructor. If you want to create an object literal with no\n  named members, use `{}.jsify()`.\n\n### Other libraries\n\n#### `package:js`\n\n- **Breaking change to `@staticInterop` and `external` extension members**:\n  `external` `@staticInterop` members and `external` extension members can no\n  longer be used as tear-offs. Declare a closure or a non-`external` method that\n  calls these members, and use that instead.\n- **Breaking change to `@staticInterop` and `external` extension members**:\n  `external` `@staticInterop` members and `external` extension members will\n  generate slightly different JS code for methods that have optional parameters.\n  Whereas before, the JS code passed in the default value for missing optionals,\n  it will now pass in only the provided members. This aligns with how JS\n  parameters work, where omitted parameters are actually omitted. For example,\n  calling `external void foo([int a, int b])` as `foo(0)` will now result in\n  `foo(0)`, and not `foo(0, null)`.\n\n### Tools\n\n#### DevTools\n\n- Incorporated the [2.24.0][devtools-2-24-0] and [2.25.0][devtools-2-25-0]\n  releases of DevTools.\n\n[devtools-2-24-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.24.0\n[devtools-2-25-0]: https://docs.flutter.dev/tools/devtools/release-notes/release-notes-2.25.0\n\n#### Linter\n\n- Added new static analysis lints you can [enable][enable-lints] in\n  your package's `analysis_options.yaml` file:\n  - [`no_self_assignments`](https://dart.dev/lints/no_self_assignments)\n  - [`no_wildcard_variable_uses`](https://dart.dev/lints/no_wildcard_variable_uses)\n\n[enable-lints]: https://dart.dev/tools/analysis#enabling-linter-rules\n\n## 3.0.7 - 2023-07-26\n\nThis is a patch release that:\n\n- Fixes a bug in dart2js which would cause certain uses of records to lead to\n  bad codegen causing a `TypeError` or `NoSuchMethodError` to be thrown\n  at runtime (issue [#53001]).\n\n[#53001]: https://github.com/dart-lang/sdk/issues/53001\n\n## 3.0.6 - 2023-07-12\n\nThis is a patch release that:\n\n- Fixes a flow in flow analysis that causes it to sometimes ignore destructuring\n  assignments (issue [#52767]).\n- Fixes an infinite loop in some web development compiles that include `is` or\n  `as` expressions involving record types with named fields (issue [#52869]).\n- Fixes a memory leak in Dart analyzer's file-watching (issue [#52791]).\n- Fixes a memory leak of file system watcher related data structures (issue [#52793]).\n\n[#52767]: https://github.com/dart-lang/sdk/issues/52767\n[#52869]: https://github.com/dart-lang/sdk/issues/52869\n[#52791]: https://github.com/dart-lang/sdk/issues/52791\n[#52793]: https://github.com/dart-lang/sdk/issues/52793\n\n## 3.0.5 - 2023-06-14\n\nThis is a patch release that:\n\n- Fixes a bad cast in the frontend which can manifest as a crash in the dart2js\n  `ListFactorySpecializer` during Flutter web builds (issue [#52403]).\n\n[#52403]: https://github.com/dart-lang/sdk/issues/52403\n\n## 3.0.4 - 2023-06-07\n\nThis is a patch release that:\n\n- `dart format` now handles formatting nullable record types\n  with no fields (dart_style issue [#1224]).\n- Fixes error when using records when targeting the web in development mode\n  (issue [#52480]).\n\n[#1224]: https://github.com/dart-lang/dart_style/issues/1224\n[#52480]: https://github.com/dart-lang/sdk/issues/52480\n\n## 3.0.3 - 2023-02-07\n\nThis is a patch release that:\n\n- Fixes an AOT compiler crash when generating an implicit getter\n  returning an unboxed record (issue [#52449]).\n- Fixes a situation in which variables appearing in multiple branches of an\n  or-pattern might be erroneously reported as being mismatched (issue [#52373]).\n- Adds missing `interface` modifiers on the purely abstract classes\n  `MultiStreamController`, `StreamConsumer`, `StreamIterator` and\n  `StreamTransformer` (issue [#52334]).\n- Fixes an error during debugging when `InternetAddress.tryParse` is\n  used (issue [#52423]).\n- Fixes a VM issue causing crashes on hot reload (issue [#126884]).\n- Improves linter support (issue [#4195]).\n- Fixes an issue in variable patterns preventing users from expressing\n  a pattern match using a variable or wildcard pattern with a nullable\n  record type (issue [#52439]).\n- Updates warnings and provide instructions for updating the Dart pub\n  cache on Windows (issue [#52386]).\n\n[#52373]: https://github.com/dart-lang/sdk/issues/52373\n[#52334]: https://github.com/dart-lang/sdk/issues/52334\n[#52423]: https://github.com/dart-lang/sdk/issues/52423\n[#126884]: https://github.com/flutter/flutter/issues/126884\n[#4195]: https://github.com/dart-lang/linter/issues/4195\n[#52439]: https://github.com/dart-lang/sdk/issues/52439\n[#52449]: https://github.com/dart-lang/sdk/issues/52449\n[#52386]: https://github.com/dart-lang/sdk/issues/52386\n\n## 3.0.2 - 2023-05-24\n\nThis is a patch release that:\n\n- Fixes a dart2js crash when using a switch case expression on a record where\n  the fields don't match the cases (issue [#52438]).\n- Add class modifier chips on class and mixin pages\n  generated with `dart doc` (issue [#3392]).\n- Fixes a situation causing the parser to fail resulting in an infinite loop\n  leading to higher memory usage (issue [#52352]).\n- Add clear errors when mixing inheritance in pre and post Dart 3 libraries\n  (issue: [#52078]).\n\n[#52438]: https://github.com/dart-lang/sdk/issues/52438\n[#3392]: https://github.com/dart-lang/dartdoc/issues/3392\n[#52352]: https://github.com/dart-lang/sdk/issues/52352\n[#52078]: https://github.com/dart-lang/sdk/issues/52078\n\n## 3.0.1 - 2023-05-17\n\nThis is a patch release that:\n\n- Fixes a compiler crash involving redirecting factories and FFI\n  (issue [#124369]).\n- Fixes a dart2js crash when using a combination of local functions, generics,\n  and records (issue [#51899]).\n- Fixes incorrect error using a `void` in a switch case expression\n  (issue [#52191]).\n- Fixes a false error when using in switch case expressions when the switch\n  refers to a private getter (issue [#52041]).\n- Prevent the use of `when` and `as` as variable names in patterns\n  (issue [#52260]).\n- Fixes an inconsistency in type promotion between the analyzer and VM\n  (issue [#52241]).\n- Improve performance on functions with many parameters (issue [#1212]).\n\n[#124369]: https://github.com/flutter/flutter/issues/124369\n[#51899]: https://github.com/dart-lang/sdk/issues/51899\n[#52191]: https://github.com/dart-lang/sdk/issues/52191\n[#52041]: https://github.com/dart-lang/sdk/issues/52041\n[#52260]: https://github.com/dart-lang/sdk/issues/52260\n[#52241]: https://github.com/dart-lang/sdk/issues/52241\n[#1212]: https://github.com/dart-lang/dart_style/issues/1212\n\n## 3.0.0 - 2023-05-10\n\n### Language\n\nDart 3.0 adds the following features. To use them, set your package's [SDK\nconstraint][language version] lower bound to 3.0 or greater (`sdk: '^3.0.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n- **[Records]**: Records are anonymous immutable data structures that let you\n  aggregate multiple values together, similar to [tuples][] in other languages.\n  With records, you can return multiple values from a function, create composite\n  map keys, or use them any other place where you want to bundle a couple of\n  objects together.\n\n  For example, using a record to return two values:\n\n  ```dart\n  (double x, double y) geoLocation(String name) {\n    if (name == 'Nairobi') {\n      return (-1.2921, 36.8219);\n    } else {\n      ...\n    }\n  }\n  ```\n\n- **[Pattern matching]**: Expressions build values out of smaller pieces.\n  Conversely, patterns are an expressive tool for decomposing values back into\n  their constituent parts. Patterns can call getters on an object, access\n  elements from a list, pull fields out of a record, etc. For example, we can\n  destructure the record from the previous example like so:\n\n  ```dart\n  var (lat, long) = geoLocation('Nairobi');\n  print('Nairobi is at $lat, $long.');\n  ```\n\n  Patterns can also be used in [switch cases]. There, you can destructure values\n  and also test them to see if they have a certain type or value:\n\n  ```dart\n  switch (object) {\n    case [int a]:\n      print('A list with a single integer element $a');\n    case ('name', _):\n      print('A two-element record whose first field is \"name\".');\n    default: print('Some other object.');\n  }\n  ```\n\n  Also, as you can see, non-empty switch cases no longer need `break;`\n  statements.\n\n  **Breaking change**: Dart 3.0 interprets [switch cases] as patterns instead of\n  constant expressions. Most constant expressions found in switch cases are\n  valid patterns with the same meaning (named constants, literals, etc.). You\n  may need to tweak a few constant expressions to make them valid. This only\n  affects libraries that have upgraded to language version 3.0.\n\n- **[Switch expressions]**: Switch expressions allow you to use patterns and\n  multi-way branching in contexts where a statement isn't allowed:\n\n  ```dart\n  return TextButton(\n    onPressed: _goPrevious,\n    child: Text(switch (page) {\n      0 => 'Exit story',\n      1 => 'First page',\n      _ when page == _lastPage => 'Start over',\n      _ => 'Previous page',\n    }),\n  );\n  ```\n\n- **[If-case statements and elements]**: A new if construct that matches a value\n  against a pattern and executes the then or else branch depending on whether\n  the pattern matches:\n\n  ```dart\n  if (json case ['user', var name]) {\n    print('Got user message for user $name.');\n  }\n  ```\n\n  There is also a corresponding [if-case element] that can be used in collection\n  literals.\n\n- **[Sealed classes]**: When you mark a type `sealed`, the compiler ensures that\n  switches on values of that type [exhaustively cover] every subtype. This\n  enables you to program in an [algebraic datatype][] style with the\n  compile-time safety you expect:\n\n  ```dart\n  sealed class Amigo {}\n  class Lucky extends Amigo {}\n  class Dusty extends Amigo {}\n  class Ned extends Amigo {}\n\n  String lastName(Amigo amigo) =>\n      switch (amigo) {\n        Lucky _ => 'Day',\n        Ned _   => 'Nederlander',\n      };\n  ```\n\n  In this last example, the compiler reports an error that the switch doesn't\n  cover the subclass `Dusty`.\n\n- **[Class modifiers]**: New modifiers `final`, `interface`, `base`, and `mixin`\n  on `class` and `mixin` declarations let you control how the type can be used.\n  By default, Dart is flexible in that a single class declaration can be used as\n  an interface, a superclass, or even a mixin. This flexibility can make it\n  harder to evolve an API over time without breaking users. We mostly keep the\n  current flexible defaults, but these new modifiers give you finer-grained\n  control over how the type can be used.\n\n  **Breaking change:** Class declarations from libraries that have been upgraded\n  to Dart 3.0 can no longer be used as mixins by default. If you want the class\n  to be usable as both a class and a mixin, mark it [`mixin class`][mixin\n  class]. If you want it to be used only as a mixin, make it a `mixin`\n  declaration. If you haven't upgraded a class to Dart 3.0, you can still use it\n  as a mixin.\n\n- **Breaking change** [#50902][]: Dart reports a compile-time error if a\n  `continue` statement targets a [label] that is not a loop (`for`, `do` and\n  `while` statements) or a `switch` member. Fix this by changing the `continue`\n  to target a valid labeled statement.\n\n- **Breaking change** [language/#2357][]: Starting in language version 3.0,\n  Dart reports a compile-time error if a colon (`:`) is used as the\n  separator before the default value of an optional named parameter.\n  Fix this by changing the colon (`:`) to an equal sign (`=`).\n\n[records]: https://dart.dev/language/records\n[tuples]: https://en.wikipedia.org/wiki/Tuple\n[pattern matching]: https://dart.dev/language/patterns\n[switch cases]: https://dart.dev/language/branches#switch\n[switch expressions]: https://dart.dev/language/branches#switch-expressions\n[if-case statements and elements]: https://dart.dev/language/branches#if-case\n[if-case element]: https://dart.dev/language/collections#control-flow-operators\n[sealed classes]: https://dart.dev/language/class-modifiers#sealed\n[exhaustively cover]: https://dart.dev/language/branches#exhaustiveness-checking\n[algebraic datatype]: https://en.wikipedia.org/wiki/Algebraic_data_type\n[class modifiers]: https://dart.dev/language/class-modifiers\n[mixin class]: https://dart.dev/language/mixins#class-mixin-or-mixin-class\n[#50902]: https://github.com/dart-lang/sdk/issues/50902\n[label]: https://dart.dev/language/branches#switch\n[language/#2357]: https://github.com/dart-lang/language/issues/2357\n\n### Libraries\n\n#### General changes\n\n- **Breaking Change**: Non-`mixin` classes in the platform libraries\n  can no longer be mixed in, unless they are explicitly marked as `mixin class`.\n  The following existing classes have been made mixin classes:\n  * `Iterable`\n  * `IterableMixin` (now alias for `Iterable`)\n  * `IterableBase` (now alias for `Iterable`)\n  * `ListMixin`\n  * `SetMixin`\n  * `MapMixin`\n  * `LinkedListEntry`\n  * `StringConversionSink`\n\n#### `dart:core`\n- Added `bool.parse` and `bool.tryParse` static methods.\n- Added `DateTime.timestamp()` constructor to get current time as UTC.\n- The type of `RegExpMatch.pattern` is now `RegExp`, not just `Pattern`.\n\n- **Breaking change** [#49529][]:\n  - Removed the deprecated `List` constructor, as it wasn't null safe.\n    Use list literals (e.g. `[]` for an empty list or `<int>[]` for an empty\n    typed list) or [`List.filled`][].\n  - Removed the deprecated `onError` argument on [`int.parse`][], [`double.parse`][],\n    and [`num.parse`][]. Use the [`tryParse`][] method instead.\n  - Removed the deprecated [`proxy`][] and [`Provisional`][] annotations.\n    The original `proxy` annotation has no effect in Dart 2,\n    and the `Provisional` type and [`provisional`][] constant\n    were only used internally during the Dart 2.0 development process.\n  - Removed the deprecated [`Deprecated.expires`][] getter.\n    Use [`Deprecated.message`][] instead.\n  - Removed the deprecated [`CastError`][] error.\n    Use [`TypeError`][] instead.\n  - Removed the deprecated [`FallThroughError`][] error. The kind of\n    fall-through previously throwing this error was made a compile-time\n    error in Dart 2.0.\n  - Removed the deprecated [`NullThrownError`][] error. This error is never\n    thrown from null safe code.\n  - Removed the deprecated [`AbstractClassInstantiationError`][] error. It was made\n    a compile-time error to call the constructor of an abstract class in Dart 2.0.\n  - Removed the deprecated [`CyclicInitializationError`]. Cyclic dependencies are\n    no longer detected at runtime in null safe code. Such code will fail in other\n    ways instead, possibly with a StackOverflowError.\n  - Removed the deprecated [`NoSuchMethodError`][] default constructor.\n    Use the [`NoSuchMethodError.withInvocation`][] named constructor instead.\n  - Removed the deprecated [`BidirectionalIterator`][] class.\n    Existing bidirectional iterators can still work, they just don't have\n    a shared supertype locking them to a specific name for moving backwards.\n\n- **Breaking change when migrating code to Dart 3.0**:\n  Some changes to platform libraries only affect code when that code is migrated\n  to language version 3.0.\n  - The `Function` type can no longer be implemented, extended or mixed in.\n    Since Dart 2.0 writing `implements Function` has been allowed\n    for backwards compatibility, but it has not had any effect.\n    In Dart 3.0, the `Function` type is `final` and cannot be subtyped,\n    preventing code from mistakenly assuming it works.\n  - The following declarations can only be implemented, not extended:\n    * `Comparable`\n    * `Exception`\n    * `Iterator`\n    * `Pattern`\n    * `Match`\n    * `RegExp`\n    * `RegExpMatch`\n    * `StackTrace`\n    * `StringSink`\n\n    None of these declarations contained any implementation to inherit,\n    and are marked as `interface` to signify that they are only intended\n    as interfaces.\n  - The following declarations can no longer be implemented or extended:\n    * `MapEntry`\n    * `OutOfMemoryError`\n    * `StackOverflowError`\n    * `Expando`\n    * `WeakReference`\n    * `Finalizer`\n\n    The `MapEntry` value class is restricted to enable later optimizations.\n    The remaining classes are tightly coupled to the platform and not\n    intended to be subclassed or implemented.\n\n[#49529]: https://github.com/dart-lang/sdk/issues/49529\n[`List.filled`]: https://api.dart.dev/stable/2.18.6/dart-core/List/List.filled.html\n[`int.parse`]: https://api.dart.dev/stable/2.18.4/dart-core/int/parse.html\n[`double.parse`]: https://api.dart.dev/stable/2.18.4/dart-core/double/parse.html\n[`num.parse`]: https://api.dart.dev/stable/2.18.4/dart-core/num/parse.html\n[`tryParse`]: https://api.dart.dev/stable/2.18.4/dart-core/num/tryParse.html\n[`Deprecated.expires`]: https://api.dart.dev/stable/2.18.4/dart-core/Deprecated/expires.html\n[`Deprecated.message`]: https://api.dart.dev/stable/2.18.4/dart-core/Deprecated/message.html\n[`AbstractClassInstantiationError`]: https://api.dart.dev/stable/2.17.4/dart-core/AbstractClassInstantiationError-class.html\n[`CastError`]: https://api.dart.dev/stable/2.17.4/dart-core/CastError-class.html\n[`FallThroughError`]: https://api.dart.dev/stable/2.17.4/dart-core/FallThroughError-class.html\n[`NoSuchMethodError`]: https://api.dart.dev/stable/2.18.4/dart-core/NoSuchMethodError/NoSuchMethodError.html\n[`NoSuchMethodError.withInvocation`]: https://api.dart.dev/stable/2.18.4/dart-core/NoSuchMethodError/NoSuchMethodError.withInvocation.html\n[`CyclicInitializationError`]: https://api.dart.dev/dev/2.19.0-430.0.dev/dart-core/CyclicInitializationError-class.html\n[`Provisional`]: https://api.dart.dev/stable/2.18.4/dart-core/Provisional-class.html\n[`provisional`]: https://api.dart.dev/stable/2.18.4/dart-core/provisional-constant.html\n[`proxy`]: https://api.dart.dev/stable/2.18.4/dart-core/proxy-constant.html\n[`CastError`]: https://api.dart.dev/stable/2.18.3/dart-core/CastError-class.html\n[`TypeError`]: https://api.dart.dev/stable/2.18.3/dart-core/TypeError-class.html\n[`FallThroughError`]: https://api.dart.dev/dev/2.19.0-374.0.dev/dart-core/FallThroughError-class.html\n[`NullThrownError`]: https://api.dart.dev/dev/2.19.0-430.0.dev/dart-core/NullThrownError-class.html\n[`AbstractClassInstantiationError`]: https://api.dart.dev/stable/2.18.3/dart-core/AbstractClassInstantiationError-class.html\n[`CyclicInitializationError`]: https://api.dart.dev/dev/2.19.0-430.0.dev/dart-core/CyclicInitializationError-class.html\n[`BidirectionalIterator`]: https://api.dart.dev/dev/2.19.0-430.0.dev/dart-core/BidirectionalIterator-class.html\n\n#### `dart:async`\n\n- Added extension member `wait` on iterables and 2-9 tuples of futures.\n\n- **Breaking change** [#49529][]:\n  - Removed the deprecated [`DeferredLibrary`][] class.\n    Use the [`deferred as`][] import syntax instead.\n\n[#49529]: https://github.com/dart-lang/sdk/issues/49529\n[`DeferredLibrary`]: https://api.dart.dev/stable/2.18.4/dart-async/DeferredLibrary-class.html\n[`deferred as`]: https://dart.dev/language/libraries#deferred-loading\n\n#### `dart:collection`\n\n- Added extension members `nonNulls`, `firstOrNull`, `lastOrNull`,\n  `singleOrNull`, `elementAtOrNull` and `indexed` on `Iterable`s.\n  Also exported from `dart:core`.\n- Deprecated the `HasNextIterator` class ([#50883][]).\n\n- **Breaking change when migrating code to Dart 3.0**:\n  Some changes to platform libraries only affect code when it is migrated\n  to language version 3.0.\n  - The following interface can no longer be extended, only implemented:\n    * `Queue`\n  - The following implementation classes can no longer be implemented:\n    * `LinkedList`\n    * `LinkedListEntry`\n  - The following implementation classes can no longer be implemented\n    or extended:\n    * `HasNextIterator` (Also deprecated.)\n    * `HashMap`\n    * `LinkedHashMap`\n    * `HashSet`\n    * `LinkedHashSet`\n    * `DoubleLinkedQueue`\n    * `ListQueue`\n    * `SplayTreeMap`\n    * `SplayTreeSet`\n\n[#50883]: https://github.com/dart-lang/sdk/issues/50883\n\n#### `dart:developer`\n\n- **Breaking change** [#49529][]:\n  - Removed the deprecated [`MAX_USER_TAGS`][] constant.\n    Use [`maxUserTags`][] instead.\n- Callbacks passed to `registerExtension` will be run in the zone from which\n  they are registered.\n\n- **Breaking change** [#50231][]:\n  - Removed the deprecated [`Metrics`][], [`Metric`][], [`Counter`][],\n    and [`Gauge`][] classes as they have been broken since Dart 2.0.\n\n[#49529]: https://github.com/dart-lang/sdk/issues/49529\n[#50231]: https://github.com/dart-lang/sdk/issues/50231\n[`MAX_USER_TAGS`]: https://api.dart.dev/stable/2.19.6/dart-developer/UserTag/MAX_USER_TAGS-constant.html\n[`maxUserTags`]: https://api.dart.dev/beta/2.19.0-255.2.beta/dart-developer/UserTag/maxUserTags-constant.html\n[`Metrics`]: https://api.dart.dev/stable/2.18.2/dart-developer/Metrics-class.html\n[`Metric`]: https://api.dart.dev/stable/2.18.2/dart-developer/Metric-class.html\n[`Counter`]: https://api.dart.dev/stable/2.18.2/dart-developer/Counter-class.html\n[`Gauge`]: https://api.dart.dev/stable/2.18.2/dart-developer/Gauge-class.html\n\n#### `dart:ffi`\n\n- The experimental `@FfiNative` annotation is now deprecated.\n  Usages should be replaced with the new `@Native` annotation.\n\n#### `dart:html`\n\n- **Breaking change**: As previously announced, the deprecated `registerElement`\n  and `registerElement2` methods in `Document` and `HtmlDocument` have been\n  removed.  See [#49536](https://github.com/dart-lang/sdk/issues/49536) for\n  details.\n\n#### `dart:math`\n\n- **Breaking change when migrating code to Dart 3.0**:\n  Some changes to platform libraries only affect code when it is migrated\n  to language version 3.0.\n  - The `Random` interface can only be implemented, not extended.\n\n#### `dart:io`\n\n- Added `name` and `signalNumber` to the `ProcessSignal` class.\n- Deprecate `NetworkInterface.listSupported`. Has always returned true since\n  Dart 2.3.\n- Finalize `httpEnableTimelineLogging` parameter name transition from `enable`\n  to `enabled`. See [#43638][].\n- Favor IPv4 connections over IPv6 when connecting sockets. See\n  [#50868].\n- **Breaking change** [#51035][]:\n  - Update `NetworkProfiling` to accommodate new `String` ids\n    that are introduced in vm_service:11.0.0\n\n[#43638]: https://github.com/dart-lang/sdk/issues/43638\n[#50868]: https://github.com/dart-lang/sdk/issues/50868\n[#51035]: https://github.com/dart-lang/sdk/issues/51035\n\n#### `dart:js_util`\n\n- Added several helper functions to access more JavaScript operators, like\n  `delete` and the `typeof` functionality.\n- `jsify` is now permissive and has inverse semantics to `dartify`.\n- `jsify` and `dartify` both handle types they understand natively more\n  efficiently.\n- Signature of `callMethod` has been aligned with the other methods and\n  now takes `Object` instead of `String`.\n\n### Tools\n\n#### Observatory\n- Observatory is no longer served by default and users should instead use Dart\n  DevTools. Users requiring specific functionality in Observatory should set\n  the `--serve-observatory` flag.\n\n#### Web Dev Compiler (DDC)\n- Removed deprecated command line flags `-k`, `--kernel`, and `--dart-sdk`.\n- The compile time flag `--nativeNonNullAsserts`, which ensures web library APIs\nare sound in their nullability, is by default set to true in sound mode. For\nmore information on the flag, see [NATIVE_NULL_ASSERTIONS.md][].\n\n[NATIVE_NULL_ASSERTIONS.md]: https://github.com/dart-lang/sdk/blob/main/sdk/lib/html/doc/NATIVE_NULL_ASSERTIONS.md\n\n#### dart2js\n- The compile time flag `--native-null-assertions`, which ensures web library\nAPIs are sound in their nullability, is by default set to true in sound mode,\nunless `-O3` or higher is passed, in which case they are not checked. For more\ninformation on the flag, see [NATIVE_NULL_ASSERTIONS.md][].\n\n[NATIVE_NULL_ASSERTIONS.md]: https://github.com/dart-lang/sdk/blob/main/sdk/lib/html/doc/NATIVE_NULL_ASSERTIONS.md\n\n#### Dart2js\n\n- Cleanup related to [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  the internal dart2js snapshot fails unless it is called from a supported\n  interface, such as `dart compile js`, `flutter build`, or\n  `build_web_compilers`. This is not expected to be a visible change.\n\n#### Formatter\n\n* Format `sync*` and `async*` functions with `=>` bodies.\n* Don't split after `<` in collection literals.\n* Better indentation of multiline function types inside type argument lists.\n* Fix bug where parameter metadata wouldn't always split when it should.\n\n#### Analyzer\n\n- Most static analysis \"hints\" are converted to be \"warnings,\" and any\n  remaining hints are intended to be converted soon after the Dart 3.0 release.\n  This means that any (previously) hints reported by `dart analyze` are now\n  considered \"fatal\" (will result in a non-zero exit code). The previous\n  behavior, where such hints (now warnings) are not fatal, can be achieved by\n  using the `--no-fatal-warnings` flag. This behavior can also be altered, on a\n  code-by-code basis, by [changing the severity of rules] in an analysis\n  options file.\n- Add static enforcement of the SDK-only `@Since` annotation. When code in a\n  package uses a Dart SDK element annotated with `@Since`, analyzer will report\n  a warning if the package's [Dart SDK constraint] allows versions of Dart\n  which don't include that element.\n- Protects the Dart Analysis Server against extreme memory usage by limiting\n  the number of plugins per analysis context to 1. (issue [#50981][]).\n\n[changing the severity of rules]: https://dart.dev/tools/analysis#changing-the-severity-of-rules\n[Dart SDK constraint]: https://dart.dev/tools/pub/pubspec#sdk-constraints\n\n#### Linter\n\nUpdates the Linter to `1.35.0`, which includes changes that\n\n- add new lints:\n  - `implicit_reopen`\n  - `unnecessary_breaks`\n  - `type_literal_in_constant_pattern`\n  - `invalid_case_patterns`\n- update existing lints to support patterns and class modifiers\n- remove support for:\n  - `enable_null_safety`\n  - `invariant_booleans`\n  - `prefer_bool_in_asserts`\n  - `prefer_equal_for_default_values`\n  - `super_goes_last`\n- fix `unnecessary_parenthesis` false-positives with null-aware expressions.\n- fix `void_checks` to allow assignments of `Future<dynamic>?` to parameters\n  typed `FutureOr<void>?`.\n- fix `use_build_context_synchronously` in if conditions.\n- fix a false positive for `avoid_private_typedef_functions` with generalized\n  type aliases.\n- update `unnecessary_parenthesis` to detect some doubled parens.\n- update `void_checks` to allow returning `Never` as void.\n- update `no_adjacent_strings_in_list` to support set literals and for- and\n  if-elements.\n- update `avoid_types_as_parameter_names` to handle type variables.\n- update `avoid_positional_boolean_parameters` to handle typedefs.\n- update `avoid_redundant_argument_values` to check parameters of redirecting\n  constructors.\n- improve performance for `prefer_const_literals_to_create_immutables`.\n- update `use_build_context_synchronously` to check context properties.\n- improve `unnecessary_parenthesis` support for property accesses and method\n  invocations.\n- update `unnecessary_parenthesis` to allow parentheses in more null-aware\n  cascade contexts.\n- update `unreachable_from_main` to track static elements.\n- update `unnecessary_null_checks` to not report on arguments passed to\n  `Future.value` or `Completer.complete`.\n- mark `always_use_package_imports` and `prefer_relative_imports` as\n  incompatible rules.\n- update `only_throw_errors` to not report on `Never`-typed expressions.\n- update `unnecessary_lambdas` to not report with `late final` variables.\n- update `avoid_function_literals_in_foreach_calls` to not report with nullable-\n  typed targets.\n- add new lint: `deprecated_member_use_from_same_package` which replaces the\n  soft-deprecated analyzer hint of the same name.\n- update `public_member_api_docs` to not require docs on enum constructors.\n- update `prefer_void_to_null` to not report on as-expressions.\n\n#### Migration tool removal\n\nThe null safety migration tool (`dart migrate`) has been removed.  If you still\nhave code which needs to be migrated to null safety, please run `dart migrate`\nusing Dart version 2.19, before upgrading to Dart version 3.0.\n\n#### Pub\n\n- To preserve compatibility with null-safe code pre Dart 3, Pub will interpret a\n  language constraint indicating a language version of `2.12` or higher and an\n  upper bound of `<3.0.0` as `<4.0.0`.\n\n  For example `>=2.19.2 <3.0.0` will be interpreted as `>=2.19.2 <4.0.0`.\n- `dart pub publish` will no longer warn about `dependency_overrides`. Dependency\n  overrides only take effect in the root package of a resolution.\n- `dart pub token add` now verifies that the given token is valid for including\n  in a header according to [RFC 6750 section\n  2.1](https://www.rfc-editor.org/rfc/rfc6750#section-2.1). This means they must\n  contain only the characters: `^[a-zA-Z0-9._~+/=-]+$`. Before a failure would\n  happen when attempting to send the authorization header.\n- `dart pub get` and related commands will now by default also update the\n  dependencies in the `example` folder (if it exists). Use `--no-example` to\n  avoid this.\n- On Windows the `PUB_CACHE` has moved to `%LOCALAPPDATA%`, since Dart 2.8 the\n  `PUB_CACHE` has been created in `%LOCALAPPDATA%` when one wasn't present.\n  Hence, this only affects users with a `PUB_CACHE` created by Dart 2.7 or\n  earlier. If you have `path/to/.pub-cache/bin` in `PATH` you may need to\n  update your `PATH`.\n\n## 2.19.6 - 2023-03-29\n\nThis is a patch release that:\n\n- Fixes an `Out of Memory` exception due to a VM bug. (issue [#50537]).\n\n[#50537]: https://github.com/dart-lang/sdk/issues/50537\n\n## 2.19.5 - 2023-03-22\n\nThis is a patch release that:\n\n- Fixes broken usage of `Dart_CObject_Type`. (issue [#51459]).\n\n[#51459]: https://github.com/dart-lang/sdk/issues/51459\n\n## 2.19.4 - 2023-03-08\n\nThis is a patch release that:\n\n- Fixes mobile devices vm crashes caused by particular use of RegExp. (issue\n  [#121270][]).\n\n[#121270]: https://github.com/flutter/flutter/issues/121270\n\n## 2.19.3 - 2023-03-01\n\nThis is a patch release that:\n\n- Updates DDC test and builder configuration. (issue [#51481][]).\n\n- Protects the Dart Analysis Server against extreme memory usage by limiting\n  the number of plugins per analysis context to 1. (issue [#50981][]).\n\n[#50981]: https://github.com/dart-lang/sdk/issues/50981\n[#51481]: https://github.com/dart-lang/sdk/issues/51481\n\n## 2.19.2 - 2023-02-08\n\nThis is a patch release that:\n\n- Fixes a VM crash when mixing the use of double and float calculations in\n  debug/jit configuration. (issue [#50622][]).\n\n- Fixes the compiler crashing when attempting to inline a method with lots of\n  optional parameters with distinct default values. (issue [#119220][]).\n\n- Fixes the `part_of_different_library` error encountered when using `PackageBuildWorkspace`. (issue [#51087][]).\n\n[#50622]: https://github.com/dart-lang/sdk/issues/50622\n[#119220]: https://github.com/flutter/flutter/issues/119220\n[#51087]: https://github.com/dart-lang/sdk/issues/51087\n\n## 2.19.1 - 2023-02-01\n\nThis is a patch release that:\n\n- Fixes `pub get` behaviour: In Dart 2.19.0 a `dart pub get` with a\n  `pubspec.lock` created by a 2.18 SDK will unlock all constraints, effectively\n  like a `pub upgrade` (issue [#51166][]).\n\n- Stops rewriting SDK constraints: In Dart 3, a SDK constraint like\n  `>=2.12.0 <3.0.0` gets interpreted by the pub client as `>=2.12.0 <4.0.0` to\n  allow for backwards compatibility (issue [#51101][]).\n\n  This change was intended for Dart 3.0.0 and later, but was landed already in\n  2.19.0. It is now being removed in 2.19.1, as it can give confusing messages\n  such as:\n\n  > Because library requires SDK version >=2.19.2 <4.0.0, version solving failed.\n\n  This reinterpretation no longer happens in Dart 2.19.1.\n\n- Fixes a VM crash caused by incorrect sharing of RegExp between isolates\n  (issue [#51130][]).\n\n[#51166]: https://github.com/dart-lang/sdk/issues/51166\n[#51101]: https://github.com/dart-lang/sdk/issues/51101\n[#51130]: https://github.com/dart-lang/sdk/issues/51130\n\n## 2.19.0 - 2023-01-24\n\n### Language\n\n- **Breaking change** [#49635][]: Flag additional code as unreachable due to\n  types `Null` and `Never`. Several unusual constructs that lead to unreachable\n  code are now recognized by flow analysis:\n\n  - Control flow after an expression of the form `e ?? other` or `e ??= other`,\n    where `e` has static type `Null` and `other` has static type `Never`, is\n    considered unreachable.\n\n  - Control flow predicated on an expression of the form `e is Never` evaluating\n    to `true` is considered unreachable.\n\n  - Control flow predicated on an expression of the form `e is! Never`\n    evaluating to `false` is considered unreachable.\n\n  - Control flow on the RHS of a null-aware access such as `e?.property...`,\n    `e?.property = ...` or `e?.method(...)`, where `e` has static type `Null`,\n    is considered unreachable (Note: this can arise in the presence of extension\n    methods).\n\n  Previously, these behaviors only took effect if `e` was a reference to a local\n  variable.\n\n  Additionally, a type test of the form `v is Never` (where `v` is a local\n  variable) no longer promotes `v` to type `Never`.\n\n[#49635]: https://github.com/dart-lang/sdk/issues/49635\n\n- **Breaking Change** [#49687][]: Don't delegate inaccessible private names to\n  `noSuchMethod`. If a concrete class implements an interface containing a\n  member with a name that's private to different library, and does not inherit\n  an implementation of that interface member, a invocation of that member will\n  result in an exception getting thrown. Previously, such attempts would result\n  in the call being diverted to the `noSuchMethod` method.\n\n  This change closes a loophole in Dart's privacy system, where another library\n  can provide a different implementation of a supposedly private member using\n  `noSuchMethod`, and paves the way for a future implementation of promotion for\n  private final fields (see [#2020][]).\n\n[#49687]: https://github.com/dart-lang/sdk/issues/49687\n[#2020]: https://github.com/dart-lang/language/issues/2020\n\n- **Breaking Change** [#50383][]: Report a compile-time error for all cyclic\n  dependencies during top-level type inference.\n\n  Previously, some of these dependencies were ignored, based on an analysis\n  determining that they could not influence the inferred type. However, this\n  analysis was complex, differed slightly among tools, and had become much more\n  complex due to other changes (especially, enhanced flow analysis).\n\n  With this change, all tools treat these cyclic dependencies in the same way,\n  the analysis is well-understood, and, arguably, the code is more readable.\n\n  Breakage is mitigated by adding a declared type to one top-level declaration\n  per cycle which is now an error.\n\n[#50383]: https://github.com/dart-lang/sdk/issues/50383\n\n- Add support for **unnamed libraries**. Dart language 2.19 allows a library\n  directive to be written without a name (`library;`). A library directive can\n  be used for library-level annotations (such as `@deprecated`) and for\n  library-level documentation comments, and with this new feature, you don't\n  have to provide a unique name for each library directive. Instead, a name can\n  simply be omitted (see [#1073][]).\n\n[#1073]: https://github.com/dart-lang/language/issues/1073\n\n### Libraries\n\n#### `dart:convert`\n\n- **Breaking change** [#34233]: The previously deprecated API\n  [`DEFAULT_BUFFER_SIZE`] in `JsonUtf8Encoder` has been removed.\n\n[#34233]: https://github.com/dart-lang/sdk/issues/34233\n[`DEFAULT_BUFFER_SIZE`]: https://api.dart.dev/stable/2.17.6/dart-convert/JsonUtf8Encoder/DEFAULT_BUFFER_SIZE-constant.html\n\n#### `dart:core`\n\n- Deprecated `FallThroughError`. Has not been thrown since Dart 2.0\n  (see [#49529]).\n- Added `copyWith` extension method on `DateTime` (see [#24644]).\n- Deprecated `RangeError.checkValidIndex` in favor of `IndexError.check`.\n- Deprecated `IndexError` constructor in favor of `IndexError.withLength`\n  constructor.\n- Deprecated `NullThrownError` and `CyclicInitializationError`.\n  Neither error is thrown by null safe code.\n[#49529]: https://github.com/dart-lang/sdk/issues/49529\n[#24644]: https://github.com/dart-lang/sdk/issues/24644\n\n#### `dart:developer`\n\n- **Breaking change** [#34233]: The previously deprecated APIs `kInvalidParams`,\n  `kExtensionError`, `kExtensionErrorMax`, and `kExtensionErrorMin` in\n  [`ServiceExtensionResponse`] have been removed. They have been replaced by\n  `invalidParams`, `extensionError`, `extensionErrorMax`, and\n  `extensionErrorMin`.\n- Deprecated `UserTag.MAX_USER_TAGS` in favor of `UserTag.maxUserTags`.\n\n[#34233]: https://github.com/dart-lang/sdk/issues/34233\n[`ServiceExtensionResponse`]: https://api.dart.dev/stable/2.17.6/dart-developer/ServiceExtensionResponse-class.html#constants\n\n#### `dart:ffi`\n\n- **Breaking change** [#49935]: The runtime type argument of `Pointer` has\n  changed to `Never` in preparation of completely removing the runtime type\n  argument. `Pointer.toString` has changed to not report any type argument.\n\n[#49935]: https://github.com/dart-lang/sdk/issues/49935\n\n#### `dart:html`\n\n- Add constructor and `slice` to `SharedArrayBuffer`.\n- Deprecated `registerElement` and `registerElement2` in `Document` and\n  `HtmlDocument`. These APIs were based on the deprecated Web Components v0.5\n  specification and are not supported by browsers today. These APIs are expected\n  to be deleted in a future release. See the related breaking change request\n  [#49536](https://github.com/dart-lang/sdk/issues/49536).\n\n#### `dart:io`\n\n- **Breaking change** [#49305](https://github.com/dart-lang/sdk/issues/49305):\n  Disallow negative or hexadecimal content-length headers.\n- **Breaking change** [#49647](https://github.com/dart-lang/sdk/issues/49647):\n  `File.create` now takes new optional `exclusive` `bool` parameter, and when it\n  is `true` the operation will fail if target file already exists.\n- **Breaking change** [#49878]: Calling `ResourceHandle.toFile()`,\n  `ResourceHandle.toSocket()`, `ResourceHandle.toRawSocket()` or\n  `ResourceHandle.toRawDatagramSocket()`, more than once now throws a\n  `StateError`.\n\n  The previous behavior would allow multiple Dart objects to refer to the same\n  file descriptor, which would produce errors when one object was closed or\n  garbage collected.\n\n[#49878]: https://github.com/dart-lang/sdk/issues/49878\n\n- Adds three new `FileSystemException` subclasses to handle common error cases:\n\n  - `PathAccessException`: The necessary access rights are not available.\n  - `PathExistsException`: The path being created already exists.\n  - `PathNotFoundException`: The path being accessed does not exist.\n\n[#12461]: https://github.com/dart-lang/sdk/issues/12461\n[#50436]: https://github.com/dart-lang/sdk/issues/50436\n\n#### `dart:isolate`\n\n- Add `Isolate.run` to run a function in a new isolate.\n- **Breaking change**: `SendPort.send` is again applying strict checks to the\n  contents of the message when sending messages between isolates that are not\n  known to share the same code (e.g. an isolate spawned via `Isolate.spawnUri`).\n  These checks were accidentally relaxed in an earlier Dart version allowing\n  all classes from `dart:core` and `dart:collection` through. This for\n  example means that you can't send an instance of a `HashMap` to an isolate\n  spawned via `Isolate.spawnUri`. See [`SendPort.send`] documentation for\n  the full list of restrictions.\n\n[`SendPort.send`]: https://api.dart.dev/dart-isolate/SendPort/send.html\n\n#### `dart:mirrors`\n\n- **Breaking change** [#34233]: The APIs [`MirrorsUsed`] and [`Comment`] have\n  been removed. `MirrorsUsed` was experimental and deprecated; `Comment` was\n  previously used internally in dart2js. Both are no longer functional.\n\n[#34233]: https://github.com/dart-lang/sdk/issues/34233\n[`MirrorsUsed`]: https://api.dart.dev/dart-mirrors/MirrorsUsed-class.html\n[`Comment`]: https://api.dart.dev/dart-mirrors/Comment-class.html\n\n### Other libraries\n\n#### `package:js`\n\n- **Breaking changes to the preview feature `@staticInterop`**:\n  - Classes with this annotation are now disallowed from using `external`\n    generative constructors. Use `external factory`s for these classes instead,\n    and the behavior should be identical. This includes use of synthetic\n    constructors. See [#48730] and [#49941] for more details.\n  - Classes with this annotation's external extension members are now disallowed\n    from using type parameters e.g. `external void method<T>(T t)`. Use a\n    non-`external` extension method for type parameters instead. See [#49350]\n    for more details.\n  - Classes with this annotation should also have the `@JS` annotation. You can\n    also have the `@anonymous` annotation with these two annotations for an\n    object literal constructor, but it isn't required.\n  - Classes with this annotation can not be implemented by classes without this\n    annotation. This is to avoid confusing type behavior.\n\n[#48730]: https://github.com/dart-lang/sdk/issues/48730\n[#49941]: https://github.com/dart-lang/sdk/issues/49941\n[#49350]: https://github.com/dart-lang/sdk/issues/49350\n\n### Tools\n\n#### Analyzer\n\n- add static enforcement of new `mustBeOverridden` annotation, and quick fixes\n- add quick fixes for many diagnostics including compile-time errors, hints, and\n  lints. There are now quick fixes for over 300 diagnostic codes. These lint\n  rules have new fixes: `combinators_ordering`, `dangling_library_doc_comments`,\n  `implicit_call_tearoffs`, `library_annotations`, and\n  `unnecessary_library_directive`.\n- add new hints: `body_might_complete_normally_catch_error`,\n  `cast_from_null_always_fails`, `cast_from_nullable_always_fails`,\n  `deprecated_colon_for_default_value`, and `duplicate_export`\n- remove hint: `invalid_override_different_default_values`\n\n#### Linter\n\nUpdated the Linter to `1.31.0`, which includes changes that\n\n- add new lint: `collection_methods_unrelated_type`.\n- add new lint: `combinators_ordering`.\n- add new lint: `dangling_library_doc_comments`.\n- add new lint: `enable_null_safety`.\n- add new lint: `implicit_call_tearoffs`.\n- add new lint: `library_annotations`.\n- add new lint: `unnecessary_library_directive`.\n- add new lint: `unreachable_from_main`.\n- add new lint: `use_string_in_part_of_directives`.\n- fix `no_leading_underscores_for_local_identifiers` to not report super formals\n  as local variables.\n- fix `unnecessary_overrides` false negatives.\n- fix `cancel_subscriptions` for nullable fields.\n- update `library_names` to support unnamed libraries.\n- fix `unnecessary_parenthesis` support for as-expressions.\n- fix `use_build_context_synchronously` to check for context property accesses.\n- fix false positive in `comment_references`.\n- improved unrelated type checks to handle enums and cascades.\n- fix `unnecessary_brace_in_string_interps` for `this` expressions .\n- update `use_build_context_synchronously` for `BuildContext.mounted`.\n- improve `flutter_style_todos` to handle more cases.\n- fix `use_build_context_synchronously` to check for `BuildContext`s in named\n  expressions.\n- fix `exhaustive_cases` to check parenthesized expressions\n- update `avoid_redundant_argument_values` to work with enum declarations.\n- fix `avoid_redundant_argument_values` when referencing required\n  parameters in legacy libraries.\n- fix `use_super_parameters` false positives with repeated super\n  parameter references.\n- update `use_late_for_private_fields_and_variables` to handle enums.\n- fix `prefer_contains` false positives when a start index is non-zero.\n- improve `noop_primitive_operations` to catch `.toString()`\n  in string interpolations.\n- update `public_member_api_docs` to report diagnostics on extension\n  names (instead of bodies).\n- fix `use_colored_box` and `use_decorated_box` to not over-report on containers without\n  a child.\n- fix `unnecessary_parenthesis` false positives on a map-or-set literal at the start of\n  an expression statement.\n- fix `prefer_final_locals` false positives reporting on fields.\n- fix `unnecessary_overrides` to allow overrides on `@Protected`members.\n- fix `avoid_multiple_declarations_per_line` false positives in `for` statements.\n- fix `prefer_final_locals` false positives on declaration lists with at least one\n  non-final variable.\n- fix`use_build_context_synchronously` to handle `await`s in `if` conditions.\n- improves performance for:\n  - `avoid_escaping_inner_quotes`.\n  - `avoid_null_checks_in_equality_operators`.\n  - `avoid_positional_boolean_parameters`.\n  - `avoid_returning_null`.\n  - `avoid_returning_null`.\n  - `avoid_returning_this`.\n  - `cascade_invocations`.\n  - `diagnostic_describe_all_properties`.\n  - `flutter_style_todos`.\n  - `join_return_with_statement`.\n  - `parameter_assignments`.\n  - `prefer_const_constructors`.\n  - `prefer_constructors_over_static_methods`.\n  - `prefer_constructors_over_static_methods`.\n  - `prefer_contains`.\n  - `prefer_foreach`.\n  - `prefer_interpolation_to_compose_strings`.\n  - `prefer_interpolation_to_compose_strings`.\n  - `recursive_getters`.\n  - `tighten_type_of_initializing_formals`.\n  - `unnecessary_lambdas`.\n  - `use_late_for_private_fields_and_variables`.\n\n#### Pub\n\n- Treats packages with sdk constraint lower bound `>=2.12.0` or more and upper\n  bound `<3.0.0` as compatible with `<4.0.0`.\n- Introduces content-hashes in pubspec.lock, to protect against corrupted\n  package repositories.\n\n  These will show up in the lock file on the first run of `dart pub get`.\n\n  See https://dart.dev/go/content-hashes for more details.\n- New flag `dart pub get --enforce-lockfile` will fetch dependencies, but fail\n  if anything deviates from `pubspec.lock`. Useful for ensuring reproducible runs\n  in CI and production.\n- Remove remaining support for `.packages` files. The flag\n  `--legacy-packages-file` is no longer supported.\n- The client will now default to the `pub.dev` repository instead of `pub.dartlang.org`.\n  This will cause a change in `pubspec.lock`.\n- Support a new field [`funding`](https://dart.dev/tools/pub/pubspec#funding) in `pubspec.yaml`.\n- Validate the CRC32c checksum of downloaded archives and retry on failure.\n- `dart pub add foo:<constraint>` with an existing dependency will now update\n  the constraint rather than fail.\n- Update `dart pub publish` to allow `dependency_overrides` in `pubspec.yaml`.\n  They will still cause a publication warning.\n  Note that only `dependency_overrides` from the root package effect resolution.\n- Update `dart pub publish` to require a working resolution.\n  If publishing a breaking release of mutually dependent packages use `dependency_overrides`\n  to obtain a resolution.\n- `dart pub add` will now allow adding multiple packages from any source using\n  the same YAML syntax as in `pubspec.yaml`.\n\n  For example:\n  ```console\n  $ dart pub add retry:^1.0.0 'dev:foo{\"git\":\"https://github.com/foo/foo\"}'\n  ```\n- `dart pub publish` will now give a warning if `dart analyze` reports any diagnostics.\n- `dart pub get` now fails gracefully when run from inside the pub-cache.\n- `dart pub publish` now shows the file sizes of large files in your package to\n  prevent accidental publication of large unrelated files.\n- Fix a bug in `dart pub upgrade --major-versions` where packages not requiring\n  major updates would be held back unless needed.\n\n#### dart2js\n\n- **Breaking change** [49473](https://github.com/dart-lang/sdk/issues/49473):\n  dart2js no longer supports HTTP URIs as inputs.\n\n## 2.18.5 - 2022-11-23\n\n- fixes an error on private variable setters in mixins on dart web\n  (issue [#50119][]).\n- fixes the handling of type parameter nullability in factory constructors\n  (issue [#50392][]).\n\n[#50119]: https://github.com/dart-lang/sdk/issues/50119\n[#50392]: https://github.com/dart-lang/sdk/issues/50392\n\n## 2.18.4 - 2022-11-02\n\nThis is a patch release that fixes crashes during hot reload\n(issue [flutter/flutter#113540][]).\n\n[flutter/flutter#113540]: https://github.com/flutter/flutter/issues/113540\n\n## 2.18.3 - 2022-10-19\n\nThis is a patch release that fixes a regression in code coverage computation\n(issue [#49887][]).\n\n[#49887]: https://github.com/dart-lang/sdk/issues/49887\n\n## 2.18.2 - 2022-09-28\n\nThis is a patch release that:\n\n- fixes incorrect behavior in `Uri.parse`.\n- fixes a compiler crash (issue [#50052][]).\n\n### Libraries\n\n#### `dart:core`\n\n- **Security advisory** [CVE-2022-3095](https://github.com/dart-lang/sdk/security/advisories/GHSA-m9pm-2598-57rj):\n  There is a auth bypass vulnerability in Dart SDK, specifically `dart:uri` core\n  library, used to parse and validate URLs. This library is vulnerable to the\n  backslash-trick wherein backslash is not recognized as equivalent to forward\n  slash in URLs.\n\n  The `Uri` class has been changed to parse a backslash in the path or the\n  authority separator of a URI as a forward slash. This affects the `Uri`\n  constructor's `path` parameter, and the `Uri.parse` method.\n  This change was made to not diverge as much from the browser `URL` behavior.\n  The Dart `Uri` class is still not an implementation of the same standard\n  as the browser's `URL` implementation.\n\n[#50052]: https://github.com/dart-lang/sdk/issues/50052\n\n## 2.18.1 - 2022-09-14\n\nThis is a patch release that fixes a crash caused by incorrect type inference\n(issues [flutter/flutter#110715][] and [flutter/flutter#111088][]).\n\n[flutter/flutter#110715]: https://github.com/flutter/flutter/issues/110715\n[flutter/flutter#111088]: https://github.com/flutter/flutter/issues/111088\n\n## 2.18.0 - 2022-08-30\n\n### Language\n\nThe following features are new in the Dart 2.18 [language version][]. To use\nthem, you must set the lower bound on the SDK constraint for your package to\n2.18 or greater (`sdk: '>=2.18.0 <3.0.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n-  **[Enhanced type inference for generic invocations with function literals][]**:\n   Invocations of generic methods/constructors that supply function literal\n   arguments now have improved type inference. This primarily affects the\n   `Iterable.fold` method. For example, in previous versions of Dart, the\n   compiler would fail to infer an appropriate type for the parameter `a`:\n\n   ```dart\n   void main() {\n     List<int> ints = [1, 2, 3];\n     var maximum = ints.fold(0, (a, b) => a < b ? b : a);\n   }\n   ```\n\n   With this improvement, `a` receives its type from the initial value, `0`.\n\n   On rare occasions, the wrong type will be inferred, leading to a compile-time\n   error, for example in this code, type inference will infer that `a` has a\n   type of `Null`:\n\n   ```dart\n   void main() {\n     List<int> ints = [1, 2, 3];\n     var maximumOrNull = ints.fold(null,\n         (a, b) => a == null || a < b ? b : a);\n   }\n   ```\n\n   This can be worked around by supplying the appropriate type as an explicit\n   type argument to `fold`:\n\n   ```dart\n   void main() {\n     List<int> ints = [1, 2, 3];\n     var maximumOrNull = ints.fold<int?>(null,\n         (a, b) => a == null || a < b ? b : a);\n   }\n   ```\n[Enhanced type inference for generic invocations with function literals]: https://github.com/dart-lang/language/issues/731\n\n- **Breaking Change** [#48167](https://github.com/dart-lang/sdk/issues/48167):\n  Mixin of classes that don't extend `Object` is no longer supported:\n  ```dart\n  class Base {}\n  class Mixin extends Base {}\n  class C extends Base with Mixin {}\n  ```\n  This should instead be written using a mixin declaration of `Mixin`:\n  ```dart\n  class Base {}\n  mixin Mixin on Base {}\n  class C extends Base with Mixin {}\n  ```\n  This feature has not been supported in most compilation targets for some\n  time but is now completely removed.\n\n### Core libraries\n\n#### `dart:async`\n\n- The `Stream.fromIterable` stream can now be listened to more than once.\n\n#### `dart:collection`\n\n- Deprecates `BidirectionalIterator`.\n\n#### `dart:core`\n\n- Allow omitting the `unencodedPath` positional argument to `Uri.http` and\n  `Uri.https` to default to an empty path.\n\n#### `dart:html`\n\n- Add `connectionState` attribute and `connectionstatechange` listener to\n  `RtcPeerConnection`.\n\n#### `dart:io`\n\n- **Breaking Change** [#49045](https://github.com/dart-lang/sdk/issues/49045):\n  The `uri` property of `RedirectException` in `dart:io` has been changed to\n  be nullable. Programs must be updated to handle the `null` case.\n- **Breaking Change** [#34218](https://github.com/dart-lang/sdk/issues/34218):\n  Constants in `dart:io`'s networking APIs following the `SCREAMING_CAPS`\n  convention have been removed (they were previously deprecated). Please use\n  the corresponding `lowerCamelCase` constants instead.\n\n- **Breaking Change** [#45630][]: The Dart VM no longer automatically restores\n    the initial terminal settings upon exit. Programs that change the `Stdin`\n    settings `lineMode` and `echoMode` are now responsible for restoring the\n    settings upon program exit. E.g. a program disabling `echoMode` will now\n    need to restore the setting itself and handle exiting by the appropriate\n    signals if desired:\n\n    ```dart\n    import 'dart:io';\n    import 'dart:async';\n\n    main() {\n      bool echoWasEnabled = stdin.echoMode;\n      try {\n        late StreamSubscription subscription;\n        subscription = ProcessSignal.sigint.watch().listen((ProcessSignal signal) {\n          stdin.echoMode = echoWasEnabled;\n          subscription.cancel();\n          Process.killPid(pid, signal); /* Die by the signal. */\n        });\n        stdin.echoMode = false;\n      } finally {\n        stdin.echoMode = echoWasEnabled;\n      }\n    }\n    ```\n\n    This change is needed to fix [#36453][] where the dart programs not caring\n    about the terminal settings can inadvertently corrupt the terminal settings\n    when e.g. piping into less.\n\n    Furthermore the `echoMode` setting now only controls the `echo` local mode\n    and no longer sets the `echonl` local mode on POSIX systems (which controls\n    whether newline are echoed even if the regular echo mode is disabled). The\n    `echonl` local mode is usually turned off in common shell environments.\n    Programs that wish to control the `echonl` local mode can use the new\n    `echoNewlineMode` setting.\n\n    The Windows console code pages (if not UTF-8) and ANSI escape code support\n    (if disabled) remain restored when the VM exits.\n\n[#45630]: https://github.com/dart-lang/sdk/issues/45630\n[#36453]: https://github.com/dart-lang/sdk/issues/36453\n\n#### `dart:js_util`\n\n- Added `dartify` and a number of minor helper functions.\n\n### Dart VM\n\nImplementation of `async`/`async*`/`sync*` is revamped in Dart VM,\nboth in JIT and AOT modes. This also affects Flutter except Flutter Web.\n\nBesides smaller code size and better performance of async methods,\nthe new implementation carries a few subtle changes in behavior:\n\n- If `async` method returns before reaching the first `await`, it now\n  returns a completed Future.\n  Previously `async` methods completed resulting Future in separate microtasks.\n\n- Stack traces no longer have duplicate entries for `async` methods.\n\n- New implementation now correctly throws an error if `null` occurs as\n  an argument of a logical expression (`&&` and `||`) which also contains\n  an `await`.\n\n- New implementation avoids unnecessary extending the liveness of local\n  variables in `async`/`async*`/`sync*` methods, which means that unused\n  objects stored in local variables in such methods might be garbage\n  collected earlier than they were before\n  (see issue [#36983](https://github.com/dart-lang/sdk/issues/36983)\n  for details).\n\n### Tools\n\n#### General\n\n- **Breaking Change** [#48272](https://github.com/dart-lang/sdk/issues/48272):\n  The `.packages` file has been fully discontinued. Historically when the\n  commands `dart pub get` or `flutter pub get` are executed, pub resolved all\n  dependencies, and installs those dependencies to the local pub cache. It\n  furthermore created a mapping from each used package to their location on the\n  local file system, and wrote that into two files:\n\n    * `.dart_tool/package_config.json`\n    * `.packages` (deprecated in Dart 2.8.0)\n\n  As of Dart 2.18.0, the `.packages` is now fully desupported, and all tools\n  distributed in, and based on, the Dart SDK no longer support it, and thus\n  solely use the `.dart_tool/package_config.json` file. If you've run `dart pub\n  get` or `flutter pub get` with any Dart SDK from the past few years you\n  already have a `.dart_tool/package_config.json` and thus should not be\n  impacted. You can delete any old `.packages` files.\n\n  If you have any third-party tools that for historical reasons depend on a\n  `.packages` we will support the ability to generate a `.packages` by passing\n  the flag `--legacy-packages-file` to `dart pub get`. This support will be\n  removed in a following stable release.\n\n#### Dart command line\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dart2js` and `dartdevc` tools have been removed as previously\n  announced. `dart2js` is replaced by the `dart compile js` command, `dartdevc`\n  is no longer exposed as a command-line tool.\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dartanalyzer` tool has been removed as previously\n  announced. `dartanalyzer` is replaced by the `dart analyze` command.\n\n#### Analyzer\n\n- added quick fixes for diagnostics: `abstract_field_constructor_initializer`,\n  `abstract_class_member`,\n  [`always_put_control_body_on_new_line`](https://dart.dev/lints/always_put_control_body_on_new_line),\n  [`avoid_print`](https://dart.dev/lints/avoid_print),\n  [`avoid_renaming_method_parameters`](https://dart.dev/lints/avoid_renaming_method_parameters),\n  [`discarded_futures`](https://dart.dev/lints/discarded_futures),\n  `enum_with_abstract_member`, `non_bool_condition`,\n  `super_formal_parameter_without_associated_named`,\n  [`unawaited_futures`](https://dart.dev/lints/unawaited_futures),\n  `unnecessary_final` `unused_element_parameter`,\n- added new Hint: `deprecated_export_use`\n\n#### Linter\n\nUpdated the Linter to `1.25.0`, which includes changes that\n\n- add new lint: `discarded_futures`.\n- add new lint: `unnecessary_null_aware_operator_on_extension_on_nullable`.\n- add new lint: `unnecessary_to_list_in_spreads`.\n- improve message and highlight range for `no_duplicate_case_values`\n- improve performance for `lines_longer_than_80_chars`,\n  `prefer_const_constructors_in_immutables`, and\n  `prefer_initializing_formals`.\n- fix `prefer_final_parameters` to support super parameters.\n- fix `unawaited_futures` to handle string interpolated\n  futures.\n- update `use_colored_box` to not flag nullable colors,\n- fix `no_leading_underscores_for_local_identifiers`\n  to lint local function declarations.\n- fix `avoid_init_to_null` to correctly handle super\n  initializing defaults that are non-null.\n- update `no_leading_underscores_for_local_identifiers`\n  to allow identifiers with just underscores.\n- fix `flutter_style_todos` to support usernames that\n  start with a digit.\n- update `require_trailing_commas` to handle functions\n  in asserts and multi-line strings.\n- update `unsafe_html` to allow assignments to\n  `img.src`.\n- fix `unnecessary_null_checks` to properly handle map\n  literal entries.\n\n#### Pub\n\n* `dart pub get` and `dart pub upgrade` no longer create the\n  `.packages` file. For details, see breaking change #48272 above.\n* `dart pub outdated` now shows which of your dependencies are discontinued.\n* `dart pub publish` will now list all the files it is about to publish.\n\n## 2.17.7 - 2022-08-24\n\nThis is a patch release that:\n\n- fixes a crash in the debugger (issue [#49209][]).\n\n[#49209]: https://github.com/dart-lang/sdk/issues/49209\n\n## 2.17.6 - 2022-07-13\n\nThis is a patch release that:\n\n- improves code completion for Flutter (issue [#49054][]).\n- fixes a crash on ARM (issue [#106510][]).\n- fixes a compiler crash with Finalizable parameters (issue [#49402][]).\n\n[#49054]: https://github.com/dart-lang/sdk/issues/49054\n[#106510]: https://github.com/flutter/flutter/issues/106510\n[#49402]: https://github.com/dart-lang/sdk/issues/49402\n\n## 2.17.5 - 2022-06-22\n\nThis is a patch release that:\n\n- improves analysis of enums and switch (issue [#49188][]).\n- fixes a compiler crash when initializing Finalizable objects\n  (issue [#49075][]).\n\n[#49188]: https://github.com/dart-lang/sdk/issues/49188\n[#49075]: https://github.com/dart-lang/sdk/issues/49075\n\n## 2.17.3 - 2022-06-01\n\nThis is a patch release that fixes:\n\n- a Dart VM compiler crash (issue [#100375][]).\n- code completion when writing method overrides (issue [#49027][]).\n- the `dart pub login` command (issue [#3424][]).\n- analysis of enhanced enums (issue [#49097][]).\n\n[#100375]: https://github.com/flutter/flutter/issues/100375\n[#49027]: https://github.com/dart-lang/sdk/issues/49027\n[#3424]: https://github.com/dart-lang/pub/issues/3424\n[#49097]: https://github.com/dart-lang/sdk/issues/49097\n\n## 2.17.1 - 2022-05-18\n\nThis is a patch release that fixes:\n\n- an analyzer plugin crash (issue [#48682][]).\n- Dart FFI support for `late` `Finalizable` variables (issue [#49024]).\n- `dart compile` on macOS 10.15 (issue [#49010][]).\n\n[#48682]: https://github.com/dart-lang/sdk/issues/48682\n[#49024]: https://github.com/dart-lang/sdk/issues/49024\n[#49010]: https://github.com/dart-lang/sdk/issues/49010\n\n## 2.17.0 - 2022-05-11\n\n### Language\n\nThe following features are new in the Dart 2.17 [language version][]. To use\nthem, you must set the lower bound on the SDK constraint for your package to\n2.17 or greater (`sdk: '>=2.17.0 <3.0.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n-   **[Enhanced enums with members][]**: Enum declarations can now define\n    members including fields, constructors, methods, getters, etc. For example:\n\n    ```dart\n    enum Water {\n      frozen(32),\n      lukewarm(100),\n      boiling(212);\n\n      final int tempInFahrenheit;\n      const Water(this.tempInFahrenheit);\n\n      @override\n      String toString() => \"The $name water is $tempInFahrenheit F.\";\n    }\n    ```\n\n    Constructors must be `const` since enum values are always constants. If the\n    constructor takes arguments, they are passed when the enum value is\n    declared.\n\n    The above enum can be used like so:\n\n    ```dart\n    void main() {\n      print(Water.frozen); // prints \"The frozen water is 32 F.\"\n    }\n    ```\n\n[enhanced enums with members]: https://github.com/dart-lang/language/blob/master/accepted/future-releases/enhanced-enums/feature-specification.md\n\n-   **[Super parameters][]**: When extending a class whose constructor takes\n    parameters, the subclass constructor needs to provide arguments for them.\n    Often, these are passed as parameters to the subclass constructor, which\n    then forwards them to the superclass constructor. This is verbose because\n    the subclass constructor must list the name and type of each parameter in\n    its parameter list, and then explicitly forward each one as an argument to\n    the superclass constructor.\n\n    [@roy-sianez][] suggested [allowing `super.`][super dot] before a subclass\n    constructor parameter to implicitly forward it to the corresponding\n    superclass constructor parameter. Applying this feature to Flutter\n    eliminated [nearly 2,000 lines of code][flutter super]. For example, before:\n\n    ```dart\n    class CupertinoPage<T> extends Page<T> {\n      const CupertinoPage({\n        required this.child,\n        this.maintainState = true,\n        this.title,\n        this.fullscreenDialog = false,\n        LocalKey? key,\n        String? name,\n        Object? arguments,\n        String? restorationId,\n      }) : super(\n            key: key,\n            name: name,\n            arguments: arguments,\n            restorationId: restorationId,\n          );\n\n      // ...\n    }\n    ```\n\n    And using super parameters:\n\n    ```dart\n    class CupertinoPage<T> extends Page<T> {\n      const CupertinoPage({\n        required this.child,\n        this.maintainState = true,\n        this.title,\n        this.fullscreenDialog = false,\n        super.key,\n        super.name,\n        super.arguments,\n        super.restorationId,\n      });\n\n      // ...\n    }\n    ```\n\n    From our analysis, over 90% of explicit superclass constructor calls can be\n    completely eliminated, using `super.` parameters instead.\n\n[super parameters]: https://github.com/dart-lang/language/blob/master/working/1855%20-%20super%20parameters/proposal.md\n[@roy-sianez]: https://github.com/roy-sianez\n[super dot]: https://github.com/dart-lang/language/issues/1855\n[flutter super]: https://github.com/flutter/flutter/pull/100905/files\n\n-   **[Named args everywhere][]**: In a function call, Dart requires positional\n    arguments to appear before named arguments. This can be frustrating for\n    arguments like collection literals and function expressions that look best\n    as the last argument in the argument list but are positional, like the\n    `test()` function in the [test package][]:\n\n    ```dart\n    main() {\n      test('A test description', () {\n        // Very long function body here...\n      }, skip: true);\n    }\n    ```\n\n    It would be better if the `skip` argument appeared at the top of the call\n    to `test()` so that it wasn't easily overlooked, but since it's named and\n    the test body argument is positional, `skip` must be placed at the end.\n\n    Dart 2.17 removes this restriction. Named arguments can be freely\n    interleaved with positional arguments, allowing code like:\n\n    ```dart\n    main() {\n      test(skip: true, 'A test description', () {\n        // Very long function body here...\n      });\n    }\n    ```\n\n[named args everywhere]: https://github.com/dart-lang/language/blob/master/accepted/future-releases/named-arguments-anywhere/feature-specification.md\n[test package]: https://pub.dev/packages/test\n\n### Core libraries\n\n#### `dart:core`\n\n- Add `Finalizer` and `WeakReference` which can potentially detect when\n  objects are \"garbage collected\".\n- Add `isMimeType` method to `UriData` class, to allow case-insensitive\n  checking of the MIME type.\n- Add `isCharset` and `isEncoding` methods to `UriData` class,\n  to allow case-insensitive and alternative-encoding-name aware checking\n  of the MIME type \"charset\" parameter.\n- Make `UriData.fromString` and `UriData.fromBytes` recognize and omit\n  a \"text/plain\" `mimeType` even if it is not all lower-case.\n\n#### `dart:ffi`\n\n- Add `ref=` and `[]=` methods to the `StructPointer` and `UnionPointer`\n  extensions. They copy a compound instance into a native memory region.\n- Add `AbiSpecificInteger`s for common C types:\n  - `char`\n  - `unsigned char`\n  - `signed char`\n  - `short`\n  - `unsigned short`\n  - `int`\n  - `unsigned int`\n  - `long`\n  - `unsigned long`\n  - `long long`\n  - `unsigned long long`\n  - `uintptr_t`\n  - `size_t`\n  - `wchar_t`\n- Add `NativeFinalizer` which can potentially detect when objects are\n  \"garbage collected\". `NativeFinalizer`s run native code where `dart:core`'s\n  `Finalizer`s run Dart code on finalization.\n\n#### `dart:html`\n\n- Add `scrollIntoViewIfNeeded` to `Element`. Previously, this method was nested\n  within `scrollIntoView` based on the `ScrollAlignment` value. `scrollIntoView`\n  is unchanged for now, but users who intend to use the native\n  `Element.scrollIntoViewIfNeeded` should use the new `scrollIntoViewIfNeeded`\n  definition instead.\n- Change `Performance.mark` and `Performance.measure` to accept their different\n  overloads. `mark` can now accept a `markOptions` map, and `measure` can now\n  accept a `startMark` and `endMark`, or a `measureOptions` map. Both methods\n  return their correct return types now as well - `PerformanceEntry?` and\n  `PerformanceMeasure?`, respectively.\n\n#### `dart:indexed_db`\n\n- `IdbFactory.supportsDatabaseNames` has been deprecated. It will always return\n  `false`.\n\n#### `dart:io`\n\n- **Breaking Change** [#47887](https://github.com/dart-lang/sdk/issues/47887):\n  `HttpClient` has a new `connectionFactory` property, which allows socket\n  creation to be customized. Classes that `implement HttpClient` may be broken\n  by this change. Add the following method to your classes to fix them:\n\n  ```dart\n  void set connectionFactory(\n      Future<ConnectionTask<Socket>> Function(\n              Uri url, String? proxyHost, int? proxyPort)?\n          f) =>\n      throw UnsupportedError(\"connectionFactory not implemented\");\n  ```\n\n- **Breaking Change** [#48093](https://github.com/dart-lang/sdk/issues/48093):\n  `HttpClient` has a new `keyLog` property, which allows TLS keys to be logged\n  for debugging purposes. Classes that `implement HttpClient` may be broken by\n  this change. Add the following method to your classes to fix them:\n\n  ```dart\n  void set keyLog(Function(String line)? callback) =>\n      throw UnsupportedError(\"keyLog not implemented\");\n  ```\n\n- **Breaking Change** [#34218](https://github.com/dart-lang/sdk/issues/34218):\n  Constants in `dart:io` following the `SCREAMING_CAPS` convention have been\n  removed (they were previously deprecated).  Please use the corresponding\n  `lowerCamelCase` constants instead.\n- **Breaking Change** [#48513](https://github.com/dart-lang/sdk/issues/48513):\n  Add a new `allowLegacyUnsafeRenegotiation` property to `SecurityContext`,\n  which allows TLS renegotiation for client secure sockets.\n- Add a optional `keyLog` parameter to `SecureSocket.connect` and\n  `SecureSocket.startConnect`.\n- Deprecate `SecureSocket.renegotiate` and `RawSecureSocket.renegotiate`,\n  which were no-ops.\n\n### Tools\n\n#### Dart command line\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dart2js` tool has been\n  marked deprecated as previously announced.\n  Its replacement is the `dart compile js` command.\n  Should you find any issues, or missing features, in the replacement\n  command, kindly file [an issue](https://github.com/dart-lang/sdk/issues/new).\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dartdevc` tool has been marked deprecated as previously\n  announced and will be deleted in a future Dart stable release.  This tool\n  was intended for use only by build systems like bazel, `build_web_compilers`\n  and `flutter_tools`. The functionality remains available for those systems,\n  but it is no longer exposed as a command-line tool in the SDK.\n  Please share any concerns in the\n  [breaking change tracking issue](https://github.com/dart-lang/sdk/issues/46100).\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dartdoc` tool has been removed as\n  previously announced. Its replacement is the `dart doc` command.\n\n- The template names used in the `dart create` command have been simplified,\n  and the current template names are now the set shown below. (Note: for\n  backwards compatibility the former template names can still be used.)\n```\n          [console] (default)    A command-line application.\n          [package]              A package containing shared Dart libraries.\n          [server-shelf]         A server app using package:shelf.\n          [web]                  A web app that uses only core Dart libraries.\n```\n\n#### Analyzer\n\n- added quick fixes for diagnostics:\n  [`always_use_package_imports`](https://dart.dev/lints/always_use_package_imports),\n  [`avoid_void_async`](https://dart.dev/lints/avoid_void_async),\n  [`cascade_invocations`](https://dart.dev/lints/cascade_invocations),\n  `default_list_constructor`,\n  [`must_call_super`](https://dart.dev/tools/diagnostic-messages#must_call_super),\n  [`no_leading_underscores_for_local_identifiers`](https://dart.dev/lints/no_leading_underscores_for_local_identifiers),\n  [`null_check_on_nullable_type_parameter`](https://dart.dev/lints/null_check_on_nullable_type_parameter),\n  [`prefer_function_declarations_over_variables`](https://dart.dev/lints/prefer_function_declarations_over_variables),\n  [`sort_constructors_first`](https://dart.dev/lints/sort_constructors_first),\n  [`sort_unnamed_constructors_first`](https://dart.dev/lints/sort_unnamed_constructors_first),\n  `undefined_enum_constant`,\n  [`unnecessary_late`](https://dart.dev/lints/unnecessary_late),\n  `unnecessary_null_aware_assignments`,\n  [`use_enums`](https://dart.dev/lints/use_enums),\n  [`use_raw_strings`](https://dart.dev/lints/use_raw_strings),\n  [`use_super_parameters`](https://dart.dev/lints/use_super_parameters),\n  `var_return_type`\n- added many errors for invalid enhanced enums\n- added new Hint: [`unnecessary_final`](https://dart.dev/tools/diagnostic-messages#unnecessary_final)\n- added new FFI error: `compound_implements_finalizable`\n- improved errors for invalid Unicode escapes in source code\n\n#### Linter\n\nUpdated the Linter to `1.22.0`, which includes changes that\n\n- fixes null-safe variance exceptions in `invariant_booleans`.\n- updates `depend_on_referenced_packages` to treat `flutter_gen` as a virtual\n  package, not needing an explicit dependency.\n- updates `unnecessary_null_checks` and\n  `null_check_on_nullable_type_parameter` to handle\n  list/set/map literals, and `yield` and `await` expressions.\n- fixes `unnecessary_null_aware_assignments` property-access\n  false positives.\n- adds new lint: `use_super_parameters`.\n- adds new lint: `use_enums`.\n- adds new lint: `use_colored_box`.\n- improves performance for `sort_constructors`.\n- improves docs for `always_use_package_imports`,\n  `avoid_print`, and `avoid_relative_lib_imports` .\n- updates `avoid_void_async` to skip `main` functions.\n- updates `prefer_final_parameters` to not super on super params.\n- updates lints for enhanced-enums and super-initializer language\n  features.\n- updates `unnecessary_late` to report on variable names.\n- marks `null_check_on_nullable_type_parameter` stable.\n\n#### Dartdoc\n\nUpdated dartdoc to 5.1.0, which includes changes that\n\n- support the enhanced enums feature\n- remove superfluous `[...]` links\n- fix `categoryOrder` option\n- display categorized extensions\n- add annotations to extensions\n- make minor improvements to performance\n\n## 2.16.2 - 2022-03-24\n\nThis is a patch release that fixes a dart2js crash when building some Flutter\nweb apps (issue [#47916][]).\n\n[#47916]: https://github.com/dart-lang/sdk/issues/47916\n\n## 2.16.1 - 2022-02-09\n\nThis is a patch release that fixes an AOT precompiler crash when building some\nFlutter apps (issue [flutter/flutter#97301][]).\n\n[flutter/flutter#97301]: https://github.com/flutter/flutter/issues/97301\n\n## 2.16.0 - 2022-02-03\n\n### Core libraries\n\n#### `dart:core`\n\n- Add `Error.throwWithStackTrace` which can `throw` an\n  error with an existing stack trace, instead of creating\n  a new stack trace.\n\n#### `dart:ffi`\n\n- Add `Abi` and `AbiSpecificInteger`. These enable specifying integers which\n  have different sizes/signs per ABI (hardware and OS combination).\n\n#### `dart:io`\n\n- **Security advisory**\n  [CVE-2022-0451](https://github.com/dart-lang/sdk/security/advisories/GHSA-c8mh-jj22-xg5h),\n  **breaking change** [#45410](https://github.com/dart-lang/sdk/issues/45410):\n  `HttpClient` no longer transmits some headers (i.e. `authorization`,\n  `www-authenticate`, `cookie`, `cookie2`) when processing redirects to a\n  different domain.\n- **Breaking change** [#47653](https://github.com/dart-lang/sdk/issues/47653):\n  On Windows, `Directory.rename` will no longer delete a directory if\n  `newPath` specifies one. Instead, a `FileSystemException` will be thrown.\n- **Breaking change** [#47769](https://github.com/dart-lang/sdk/issues/47769):\n  The `Platform.packageRoot` API has been removed. It had been marked deprecated\n  in 2018, as it doesn't work with any Dart 2.x release.\n- Add optional `sourcePort` parameter to `Socket.connect`, `Socket.startConnect`, `RawSocket.connect` and `RawSocket.startConnect`\n\n#### `dart:isolate`\n\n- **Breaking change** [#47769](https://github.com/dart-lang/sdk/issues/47769):\nThe `Isolate.packageRoot` API has been removed. It had been marked deprecated\nin 2018, as it doesn't work with any Dart 2.x release.\n\n### Tools\n\n#### Dart command line\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dartanalyzer` tool has been\n  marked deprecated as previously announced.\n  Its replacement is the `dart analyze` command.\n  Should you find any issues, or missing features, in the replacement\n  command, kindly file [an issue][].\n\n[an issue]: https://github.com/dart-lang/sdk/issues/new\n\n- **Breaking change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The standalone `dartdoc` tool has been\n  marked deprecated as previously announced.\n  Its replacement is the `dart doc` command.\n  Should you find any issues, or missing features, in the replacement\n  command, kindly file [an issue][].\n\n[an issue]: https://github.com/dart-lang/sdk/issues/new\n\n- **Breaking Change** [#46100](https://github.com/dart-lang/sdk/issues/46100):\n  The deprecated standalone `pub` tool has been removed.\n  Its replacement is the `dart pub` command.\n  Should you find any issues, or missing features, in the replacement\n  command, kindly file [an issue][].\n\n[an issue]: https://github.com/dart-lang/pub/issues/new\n\n#### Pub\n\n- Fixed race conditions in `dart pub get`, `dart run` and `dart pub global run`.\n  It should now be safe to run these concurrently.\n- If (when) Pub crashes it will save a verbose log in\n  `$PUB_CACHE/log/pub_log.txt` This can be used for filing issues to the issue\n  tracker.\n\n  `dart --verbose pub [command]` will also cause the log file to be written.\n- `dart pub global activate --source=git` now takes arguments `--git-path` to\n  specify the path of the activated package in the pubspec and `--git-ref` to\n  specify the branch or revision to check out.\n- `dart pub add` can now add multiple packages in one command.\n- `dart pub token add` can now add a token for [pub.dev](https://pub.dev).\n- `dart pub uploader` has been removed. To manage uploaders for a package use\n  the `https://pub.dev/<packagename>/admin` web-interface.\n- Pub now supports a separate `pubspec_overrides.yaml` file that can contain\n  `dependency_overrides`. This makes it easier to avoid checking the local\n  overrides into version control.\n\n#### Linter\n\nUpdated the Linter to `1.18.0`, which includes changes that\n\n- extends `camel_case_types` to cover enums.\n- fixes `no_leading_underscores_for_local_identifiers` to not\n  mis-flag field formal parameters with default values.\n- fixes `prefer_function_declarations_over_variables` to not\n  mis-flag non-final fields.\n- improves performance for `prefer_contains`.\n- updates `exhaustive_cases` to skip deprecated values that\n  redirect to other values.\n- adds new lint: `unnecessary_late`.\n- improves docs for `prefer_initializing_formals`.\n- updates `secure_pubspec_urls` to check `issue_tracker` and\n  `repository` entries.\n- adds new lint: `conditional_uri_does_not_exist`.\n- improves performance for\n  `missing_whitespace_between_adjacent_strings`.\n- adds new lint: `avoid_final_parameters`.\n- adds new lint: `no_leading_underscores_for_library_prefixes`.\n- adds new lint: `no_leading_underscores_for_local_identifiers`.\n- adds new lint: `secure_pubspec_urls`.\n- adds new lint: `sized_box_shrink_expand`.\n- adds new lint: `use_decorated_box`.\n- improves docs for `omit_local_variable_types`.\n\n## 2.15.1 - 2021-12-14\n\nThis is a patch release that fixes:\n\n- an AOT compilation failure in some Flutter apps (issue [#47878][]).\n- `dart pub publish` for servers with a path in the URL (pr\n  [dart-lang/pub#3244][]).\n\n[#47878]: https://github.com/dart-lang/sdk/issues/47878\n[dart-lang/pub#3244]: https://github.com/dart-lang/pub/pull/3244\n\n## 2.15.0 - 2021-12-08\n\n- **Security advisory**\n  [CVE-2021-22567](https://github.com/dart-lang/sdk/security/advisories/GHSA-8pcp-6qc9-rqmv):\n  Bidirectional Unicode text can be interpreted and compiled differently than\n  how it appears in editors and code-review tools. Exploiting this an attacker\n  could embed source that is invisible to a code reviewer but that modifies the\n  behavior of a program in unexpected ways. Dart 2.15.0 introduces new analysis\n  warnings that flags the use of these.\n\n- **Security advisory**\n  [CVE-2021-22568](https://github.com/dart-lang/sdk/security/advisories/GHSA-r32f-vhjp-qhj7):\n  A malicious third-party package repository may impersonate a user on pub.dev\n  for up to one hour after the user has published a package to that third-party\n  package repository using `dart pub publish`. As of Dart SDK version 2.15.0\n  requests to third-party package repositories will no longer include an OAuth2\n  `access_token` intended for pub.dev.\n\n### Language\n\nThe following features are new in the Dart 2.15 [language version][]. To use\nthem, you must set the lower bound on the SDK constraint for your package to\n2.15 or greater (`sdk: '>=2.15.0 <3.0.0'`).\n\n[language version]: https://dart.dev/guides/language/evolution\n\n- **[Constructor tear-offs][]**: Previous Dart versions allowed a method on an\n  instance to be passed as a closure, and similarly for static methods. This is\n  commonly referred to as \"closurizing\" or \"tearing off\" a method. Constructors\n  were not previously eligible for closurization, forcing users to explicitly\n  write wrapper functions when using constructors as first class functions.\n  See the calls to `map()` in this example:\n\n  ```dart\n  class A {\n    int x;\n    A(this.x);\n    A.fromString(String s) : x = int.parse(s);\n  }\n\n  void main() {\n    var listOfInts = [1, 2, 3];\n    var listOfStrings = [\"1\", \"2\", \"3\"];\n    for(var a in listOfInts.map((x) => A(x))) {\n      print(a.x);\n    }\n    for(var a in listOfStrings.map((x) => A.fromString(x))) {\n      print(a.x);\n    }\n  }\n  ```\n\n  New in Dart 2.15, constructors are now allowed to be torn off. Named\n  constructors are closurized using their declared name (here `A.fromString`).\n  To closurize unnamed constructors, use the keyword `new` (here `A.new`).\n  The above example may now be written as:\n\n  ```dart\n  class A {\n    int x;\n    A(this.x);\n    A.fromString(String s) : x = int.parse(s);\n  }\n\n  void main() {\n    var listOfInts = [1, 2, 3];\n    var listOfStrings = [\"1\", \"2\", \"3\"];\n    for(A a in listOfInts.map(A.new)) {\n      print(a.x);\n    }\n    for(A a in listOfStrings.map(A.fromString)) {\n      print(a.x);\n    }\n  }\n  ```\n\n  Constructors for generic classes may be torn off as generic functions, or\n  instantiated at the tear-off site. In the following example, the tear-off\n  `G.new` is used to initialize the variable `f` produces a generic function\n  which may be used to produce an instance of `G<T>` for any type `T` provided\n  when `f` is called. The tear-off `G<String>.new` is used to initialize the\n  variable `g` to produce a non-generic function which may only be used\n  to produce instances of type `G<String>`.\n\n  ```dart\n  class G<T> {\n    T x;\n    G(this.x);\n  }\n\n  void main() {\n    G<T> Function<T>(T x) f = G.new;\n    var x = f<int>(3);\n    G<String> Function(String y) g = G<String>.new;\n    var y = g(\"hello\");\n  }\n  ```\n\n[constructor tear-offs]: https://github.com/dart-lang/language/blob/master/accepted/2.15/constructor-tearoffs/feature-specification.md\n\n- **[Generic type literals][explicit instantiation]**: Previous Dart versions\n  allowed class names to be used as type literals. So for example,`int` may be\n  used as an expression, producing a value of type `Type`. Generic classes (e.g.\n  `List`) could be referred to by name as an expression, but no type arguments\n  could be provided and so only the `dynamic` instantiation could be produced\n  directly as an expression without using indirect methods:\n\n  ```dart\n  // Workaround to capture generic type literals.\n  Type typeOf<T>() => T;\n\n  void main() {\n    var x = int; // The Type literal corresponding to `int`.\n    var y = List; // The Type literal corresponding to `List<dynamic>`.\n    // Use workaround to capture generic type literal.\n    var z = typeOf<List<int>>(); // The Type literal for `List<int>`.\n  }\n  ```\n\n  New in Dart 2.15, instantiations of generic classes may now be used as Type\n  literals:\n\n  ```dart\n  void main() {\n    var x = int; // The Type literal corresponding to `int`.\n    var y = List; // The Type literal corresponding to `List<dynamic>`.\n    var z = List<int>; // The Type literal corresponding to `List<int>`.\n  }\n  ```\n\n- **[Explicit generic method instantiations][explicit instantiation]**: Previous\n  Dart versions allowed generic methods to be implicitly specialized (or\n  \"instantiated\") to non-generic versions when assigned to a location with a\n  compatible monomorphic type. Example:\n\n  ```dart\n  // The generic identity function.\n  T id<T>(T x) => x;\n\n  void main() {\n    // Initialize `intId` with a version of `id` implicitly specialized to\n    // `int`.\n    int Function(int) intId = id;\n    print(intId(3));\n    // Initialize `stringId` with a version of `id` implicitly specialized to\n    // `String`.\n    String Function(String) stringId = id;\n    print(stringId(\"hello\"));\n  }\n  ```\n\n  New in Dart 2.15, generic methods may be explicitly instantiated using the\n  syntax `f<T>` where `f` is the generic method to specialize and `T` is the\n  type argument (in general, type arguments) to be used to specialize the\n  method. Example:\n\n  ```dart\n  // The generic identity function.\n  T id<T>(T x) => x;\n\n  void main() {\n    // Initialize `intId` with a version of `id` explicitly specialized to\n    // `int`.\n    var intId = id<int>;\n    print(intId(3));\n    // Initialize `stringId` with a version of `id` explicitly specialized to\n    // `String`.\n    var stringId = id<String>;\n    print(stringId(\"hello\"));\n  }\n  ```\n\n[explicit instantiation]: https://github.com/dart-lang/language/blob/master/accepted/2.15/constructor-tearoffs/feature-specification.md#explicitly-instantiated-classes-and-functions\n\n- **[Generic instantiation of function objects][object instantiation]**: Generic\n  function instantiation was previously restricted to function declarations. For\n  example, as soon as a function had been torn off, it could not be\n  instantiated:\n\n  ```dart\n  // Before Dart 2.15:\n  X id<X>(X x) => x;\n\n  void main() {\n    var fo = id; // Tear off `id`, creating a function object.\n    var c1 = fo<int>; // Compile-time error: can't instantiate `fo`.\n    int Function(int) c2 = fo; // Same compile-time error.\n    // Constants are treated the same.\n  }\n  ```\n\n  New in Dart 2.15, this restriction has been lifted. It is now possible\n  to obtain a generic instantiation of an existing function object, both\n  explicitly and implicitly (again, this works the same for non-constants):\n\n  ```dart\n  X id<X>(X x) => x;\n  X other<X>(X x) => throw x;\n\n  void main() {\n    const fo = id; // Tear off `id`, creating a function object.\n\n    // Generic function instantiation on `fo` is no longer an error.\n    const c1 = fo<int>; // OK.\n    const int Function(int) c2 = fo; // OK.\n\n    // This also generalizes function instantiation because we can,\n    // e.g., use non-trivial expressions and go via a constructor.\n    const c3 = A(true); // OK.\n  }\n\n  class A {\n    final int Function(int) x;\n    // `(...)<T>` is now allowed, also in a `const` constructor.\n    const A(bool b): x = (b ? id : other)<int>;\n  }\n  ```\n\n[Object instantiation]: https://github.com/dart-lang/language/pull/1812\n\n- Annotations on type parameters of classes can no longer refer to class members\n  without a prefix.  For example, this used to be permitted:\n\n  ```dart\n  class C<@Annotation(foo) T> {\n    static void foo() {}\n  }\n  ```\n\n  Now, the reference must be qualified with the class name, i.e.:\n\n  ```dart\n  class C<@Annotation(C.foo) T> {\n    static void foo() {}\n  }\n  ```\n\n  This brings the implementation behavior in line with the spec.\n\n- Initializer expressions on implicitly typed condition variables can now\n  contribute to type promotion.  For example, this program no longer produces a\n  compile-time error:\n\n  ```dart\n  f(int? i) {\n    var iIsNull = i == null;\n    if (!iIsNull) {\n      print(i + 1); // OK, because `i` is known to be non-null.\n    }\n  }\n  ```\n\n  Previously, the above program had a compile-time error due to a bug\n  ([#1785][]) in type promotion which prevented the initializer expression\n  (`i == null`) from being accounted for when the variable in question\n  (`iIsNull`) lacked an explicit type.\n\n  To avoid causing problems for packages that are intended to work with older\n  versions of Dart, the fix only takes effect when the minimum SDK of the source\n  packages is 2.15 or greater.\n\n[#1785]: https://github.com/dart-lang/language/issues/1785\n\n- Restrictions on members of a class with a constant constructor are relaxed\n  such that they only apply when the class has a _generative_ constant\n  constructor. For example, this used to be an error, but is now permitted:\n\n  ```dart\n  abstract class A {\n    const factory A() = B;\n    var v1;\n    late final v2 = Random().nextInt(10);\n    late final v3;\n  }\n\n  class B implements A {\n    const B([this.v3 = 1]);\n    get v1 => null;\n    set v1(_) => throw 'Cannot mutate B.v1';\n    final v2 = 0;\n    final v3;\n    set v3(_) => throw 'Cannot initialize B.v3';\n  }\n  ```\n\n  This implements a relaxation of the specified rule for a `late final`\n  instance variable, and it brings the implementation behavior in line with\n  the specification in all other cases.\n\n- **Function object canonicalization and equality**: Several corner cases in the\n  area of function object canonicalization and function object equality have\n  been updated, such that all tools behave in the same way, and the behavior\n  matches the specification.\n\n  In particular, function objects are now equal when they are obtained by\n  generic instantiation from the same function with the same actual type\n  arguments, even when that type argument is not known at compile time.\n  When the expressions are constant then the function objects are identical.\n  Constant expressions are treated as such even when they do not occur in a\n  constant context (e.g., `var f = top;`).\n\n### Core libraries\n\n#### `dart:async`\n\n- Make the `unawaited` function's argument nullable, to allow calls like\n  `unawaited(foo?.bar())`.\n\n#### `dart:cli`\n\n- The experimental `waitFor` functionality, and the library containing only that\n  function, are now deprecated.\n\n#### `dart:core`\n\n- Add extension `name` getter on enum values.\n- Add `Enum.compareByIndex` helper function for comparing enum values by index.\n- Add `Enum.compareByName` helper function for comparing enum values by name.\n- Add extension methods on `Iterable<T extends Enum>`, intended for\n  `SomeEnumType.values` lists, to look up values by name.\n- Deprecate `IntegerDivisionByZeroException`.\n  Makes the class also implement `Error`. Code throwing the exception will be\n  migrated to throwing an `Error` instead until the class is unused and\n  ready to be removed.\n  Code catching the class should move to catching `Error` instead\n  (or, for integers, check first for whether it's dividing by zero).\n\n#### `dart:ffi`\n\n- Add `Bool` native type.\n\n#### `dart:io`\n\n- **Breaking change** [#46875](https://github.com/dart-lang/sdk/issues/46875):\n  The `SecurityContext` class in `dart:io` has been updated to set the minimum\n  TLS protocol version to TLS1_2_VERSION (1.2) instead of TLS1_VERSION.\n- Add `RawSocket.sendMessage`, `RawSocket.receiveMessage` that allow passing of\n  file handle references via Unix domain sockets.\n\n#### `dart:js_util`\n\n- The `js_util` methods `setProperty`, `callMethod`, and `callConstructor` have\n  been optimized to remove checks on arguments when the checks can be elided.\n  Also, those methods, along with `getProperty` and `newObject`, now support a\n  generic type argument to specify a return type. These two changes make simple\n  `js_util` usage, like reading and writing primitive properties or calling\n  methods with simple arguments, have zero overhead.\n\n#### `dart:web_sql`\n\n- **Breaking change** [#46316](https://github.com/dart-lang/sdk/issues/46316):\n  The WebSQL standard was abandoned more than 10\n  years ago and is not supported by many browsers. This release completely\n  deletes the `dart:web_sql` library.\n\n#### `dart:html`\n\n- **Breaking change** [#46316](https://github.com/dart-lang/sdk/issues/46316):\n  Related to the removal of `dart:web_sql` (see above), `window.openDatabase`\n  has been removed.\n\n### Tools\n\n#### Dart command line\n\n- **Breaking change** [#46100][]: The standalone `dart2native` tool has been\n  removed as previously announced. Its replacements are the\n  `dart compile exe` and `dart compile aot-snapshot` commands, which offer the\n  same functionality.\n\n- **Breaking change**: The standalone `dartfmt` tool has been removed as\n  previously announced. Its replacement is the `dart format` command.\n\n  Note that `dart format` has [a different set of options and\n  defaults][dartfmt cli] than `dartfmt`.\n\n- When a script is `dart run` it will always be precompiled, but with\n  incremental precompilation for following runs.\n\n#### Dart VM\n\n- **Breaking change** [#45451](https://github.com/dart-lang/sdk/issues/45451):\n  Support for `dart-ext:`-style native extensions has been removed as previously\n  announced. Use `dart:ffi` to bind to native libraries instead.\n\n- **Breaking change** [#46754](https://github.com/dart-lang/sdk/issues/46754):\n  Isolates spawned via the `Isolate.spawn()` API are now grouped, operate on the\n  same managed heap and can therefore share various VM-internal data structures.\n\n  This leads to ~100x faster isolate startup latency, ~10-100x lower\n  per-isolate base memory overhead and ~8x faster inter-isolate communication.\n\n  Making isolates operate on the same heap will also make them collaborate on\n  garbage collections, which changes performance characteristics for GC-heavy\n  applications that may - in rare cases - negatively affect pause times or\n  throughput.\n\n- Allow closures both in inter-isolate messages as well as as entrypoints in\n  `Isolate.spawn(<entrypoint>, ...)` calls. Closures and their enclosing context\n  may need to be copied in this process. The enclosing context is - as with\n  normal messages - verified to only contain objects that are sendable.\n\n  Note of caution: The Dart VM's current representation of enclosing variables\n  in closures can make closures hang on to more variables than strictly needed.\n  Using such closures in inter-isolate communication can therefore lead to\n  copying of larger transitive object graphs. If the extended transitive\n  closure includes objects that are illegal to send, the sending will fail.\n  See [#36983](https://github.com/dart-lang/sdk/issues/36983), which tracks this\n  existing memory leak issue.\n\n#### Linter\n\nUpdated the Linter to `1.14.0`, which includes changes that\n- improves performance for `annotate_overrides`, `prefer_contains`, and\n  `prefer_void_to_null`.\n- marks `avoid_dynamic_calls` stable.\n- fixed `avoid_null_checks_in_equality_operators` false positive with\n  non-nullable params.\n- update `avoid_print` to allow `kDebugMode`-wrapped print calls.\n- adds support for constructor tear-offs to `avoid_redundant_argument_values`,\n  `unnecessary_lambdas`, and `unnecessary_parenthesis`.\n- improves messages for `avoid_renaming_method_parameters`.\n- improves regular expression parsing performance for common checks\n  (`camel_case_types`, `file_names`, etc.).\n- fixed `file_names` to report at the start of the file\n  (not the entire compilation unit).\n- allow `while (true) { ... }` in `literal_only_boolean_expressions`.\n- fixed `omit_local_variable_types` false positives.\n- fixed `omit_local_variable_types` to not flag a local type that is required\n  for inference.\n- fixed `overridden_fields` false positive with static fields.\n- fixed `prefer_collection_literals` named typed parameter false positives.\n- fixed `prefer_const_constructors` false positive for deferred imports.\n- fixed `prefer_final_parameters` handling of initializing formals.\n- fixed `prefer_generic_function_type_aliases` false positives with incomplete\n  statements.\n- fixed `prefer_initializing_formals` false positives with factory constructors.\n- fixed `prefer_void_to_null` false positive with overridden properties.\n- fixed `prefer_void_to_null` false positives on overriding returns.\n- fixed `prefer_void_to_null` false positives.\n- adds a new lint: `unnecessary_constructor_name` to flag unnecessary uses of\n  `.new`.\n- updates `unnecessary_getters_setters` to only flag the getter.\n- fixed `unnecessary_parenthesis` false positive with function expressions.\n- fixed `use_build_context_synchronously` false positive in awaits inside\n  anonymous functions.\n- improve control flow analysis for `use_build_context_synchronously`.\n- fixed `use_rethrow_when_possible` false positives.\n- fixed `void_checks` false positives with incomplete source.\n\n### Pub\n\n- If you have analytics enabled `dart pub get` will send\n  [usage metrics](https://github.com/dart-lang/pub/blob/0035a40f25d027130c0314571da53ffafc6d973b/lib/src/solver/result.dart#L131-L175)\n  for packages from pub.dev, intended for popularity analysis.\n- Adds support for token-based authorization to third-party package-repositories\n  with the new command `dart pub token`.\n- Credentials are no longer stored in the pub-cache, but in a platform dependent\n  config directory:\n  * On Linux `$XDG_CONFIG_HOME/dart/pub-credentials.json` if `$XDG_CONFIG_HOME`\n    is defined, otherwise `$HOME/.config/dart/pub-credentials.json`\n  * On Mac OS: `$HOME/Library/Application Support/dart/pub-credentials.json`\n  * On Windows: `%APPDATA%/dart/pub-credentials.json`\n- The syntax for dependencies hosted at a third-party package repository has\n  been simplified. Before you would need to write:\n\n```yaml\ndependencies:\n  colorizer:\n    hosted:\n      name: colorizer\n      url: 'https://custom-pub-server.com'\n    version: ^1.2.3\nenvironment:\n  sdk: '>=2.14.0 < 3.0.0'\n```\n\nNow you can write:\n\n```yaml\ndependencies:\n  colorizer:\n    hosted: 'https://custom-pub-server.com'\n    version: ^1.2.3\nenvironment:\n  sdk: '>=2.15.0 < 3.0.0'\n```\n\nThis feature requires\n[language-version](https://dart.dev/guides/language/evolution#language-versioning)\n2.15 or later, e.g. the `pubspec.yaml` should have an SDK constraint of\n`>=2.15 <3.0.0`.\n\n- Detect potential leaks in `dart pub publish`.\n  When publishing, pub will examine your files for potential secret keys, and\n  warn you.\n\n  To ignore a file that has a false positive, add it to a\n  [`false_secrets`](https://dart.dev/go/false-secrets) section of your\n  `pubspec.yaml`.\n- Fixes unicode terminal detection windows.\n- New flag `--example` to the commands\n  `dart pub get/upgrade/downgrade/add/remove` that will result in the `example/`\n  folder dependencies to be updated after operating in the current directory.\n\n### Other libraries\n\n#### `package:js`\n\n- Extensions on JS interop or native `dart:html` classes can now declare\n  members as `external`. These members are equivalent to regular extension\n  members that use `js_util` to expose the underlying JavaScript.\n\n## 2.14.4 - 2021-10-14\n\nThis is a patch release that fixes:\n\n- a memory leak of analyzer plugins (issue [flutter/flutter#90868][]).\n- the Dart VM sometimes loading expired certificates on Windows (issues\n  [#46370][] and [#47420][]).\n\n[flutter/flutter#90868]: https://github.com/flutter/flutter/issues/90868\n[#46370]: https://github.com/dart-lang/sdk/issues/46370\n[#47420]: https://github.com/dart-lang/sdk/issues/47420\n\n## 2.14.3 - 2021-09-30\n\nThis is a patch release that fixes:\n\n- a code completion performance regression (issue\n  [flutter/flutter-intellij#5761][]).\n- debug information emitted by the Dart VM (issue [#47289][]).\n\n[flutter/flutter-intellij#5761]:\n  https://github.com/flutter/flutter-intellij/issues/5761\n[#47289]: https://github.com/dart-lang/sdk/issues/47289\n\n## 2.14.2 - 2021-09-16\n\nThis is a patch release that fixes:\n\n- two dartdoc crashes (issues [dart-lang/dartdoc#2740][] and\n  [dart-lang/dartdoc#2755][]).\n- error messages when using the `>>>` operator on older language versions\n  (issue [#46886][]).\n- invalid `pubspec.lock` paths on Windows (issue [dart-lang/pub#3012][]).\n\n[dart-lang/dartdoc#2740]: https://github.com/dart-lang/dartdoc/issues/2740\n[dart-lang/dartdoc#2755]: https://github.com/dart-lang/dartdoc/issues/2755\n[#46886]: https://github.com/dart-lang/sdk/issues/46886\n[#45767]: https://github.com/dart-lang/sdk/issues/45767\n[dart-lang/pub#3012]: https://github.com/dart-lang/pub/issues/3012\n\n## 2.14.1 - 2021-09-09\n\n- Fixed an issue specific to the macOS ARM64 (Apple Silicon) SDK, where the Dart\n  commandline tools did not have the expected startup performance.\n\n## 2.14.0 - 2021-09-09\n\n### Language\n\n- Add an unsigned shift right operator `>>>`. Pad with zeroes, ignoring the sign\n  bit. On the web platform `int.>>>` shifts the low 32 bits interpreted as an\n  unsigned integer, so `a >>> b` gives the same result as\n  `a.toUnsigned(32) >>> b` on the VM.\n\n- Prior to Dart 2.14, metadata (annotations) were not permitted to be specified\n  with generic type arguments. This restriction is lifted in Dart 2.14.\n\n  ```dart\n  class C<T> {\n    const C();\n  }\n  @C();      // Previously permitted.\n  @C<int>(); // Previously an error, now permitted.\n  ```\n\n- Prior to Dart 2.14, generic function types were not permitted as arguments to\n  generic classes or functions, nor to be used as generic bounds. This\n  restriction is lifted in Dart 2.14.\n\n  ```dart\n  T wrapWithLogging<T>(T f) {\n    if (f is void Function<T>(T x)) {\n      return <S>(S x) {\n        print(\"Call: f<$S>($x)\");\n        var r = f<S>(x);\n        print(\"Return: $x\");\n        return r;\n      } as T;\n    } // More cases here\n    return f;\n  }\n  void foo<T>(T x) {\n    print(\"Foo!\");\n  }\n  void main() {\n    // Previously an error, now permitted.\n    var f = wrapWithLogging<void Function<T>(T)>(foo);\n    f<int>(3);\n  }\n  ```\n\n### Core libraries\n\n#### `dart:async`\n\n- The uncaught error handlers of `Zone`s are now run in the parent zone of the\n  zone where they were declared. This prevents a throwing handler from causing\n  an infinite loop by repeatedly triggering itself.\n\n- Added `ignore()` as extension member on futures.\n\n- Added `void unawaited(Future)` top-level function to deal with the\n  `unawaited_futures` lint.\n\n#### `dart:core`\n\n- Introduce `Enum` interface implemented by all `enum` declarations.\n\n- The native `DateTime` class now better handles local time around daylight\n  saving changes that are not precisely one hour. (No change on the Web which\n  uses the JavaScript `Date` object.)\n\n- Adds static methods `hash`, `hashAll` and `hashAllUnordered` to the `Object`\n  class. These can be used to combine the hash codes of multiple objects in a\n  consistent way.\n\n- The `Symbol` constructor now accepts any string as argument. Symbols are equal\n  if they were created from the same string.\n\n\n#### `dart:ffi`\n\n- Add the `DynamicLibrary.providesSymbol` function to check whether a symbol is\n  available in a dynamic library.\n- Add `Union` native type for interacting with unions in native memory.\n\n#### `dart:html`\n\n- `convertNativeToDart_Dictionary()` now converts objects recursively, this\n  fixes APIs like MediaStreamTrack.getCapabilities that convert between Maps and\n  browser Dictionaries. [#44319]\n- Added some access-control HTTP header names to `HttpHeaders`.\n\n[#44319]: https://github.com/dart-lang/sdk/issues/44319\n\n#### `dart:io`\n\n- BREAKING CHANGE (for pre-migrated null safe code): `HttpClient`'s\n  `.authenticate` and `.authenticateProxy` setter callbacks must now accept a\n  nullable `realm` argument.\n- Added some access-control HTTP header names to `HttpHeaders`.\n\n#### `dart:typed_data`\n\n- **BREAKING CHANGE** (https://github.com/dart-lang/sdk/issues/45115) Most types\n  exposed by this library can no longer be extended, implemented or mixed-in.\n  The affected types are `ByteBuffer`, `TypedData` and _all_ its subclasses,\n  `Int32x4`, `Float32x4`, `Float64x2` and `Endian`.\n\n#### `dart:web_sql`\n\n- `dart:web_sql` is marked deprecated and will be removed in an upcoming\n  release. Also the API `window.openDatabase` in `dart:html` is deprecated as\n  well.\n\n  This API and library was exposing the WebSQL proposed standard. The standard\n  was abandoned more than 5 years ago and is not supported by most browsers. The\n  `dart:web_sql` library has been documented as unsupported and deprecated for\n  many years as well and but wasn't annotated properly until now.\n\n### Dart VM\n\n- **Breaking change** [#45071][]: `Dart_NewWeakPersistentHandle`'s and\n  `Dart_NewFinalizableHandle`'s `object` parameter no longer accepts `Pointer`s\n  and subtypes of `Struct`. Expandos no longer accept `Pointer`s and subtypes of\n  `Struct`s.\n\n[#45071]: https://github.com/dart-lang/sdk/issues/45071\n\n### Tools\n\n#### Dart command line\n\n- **Breaking change** [#46100][]: The standalone `dart2native` tool has been\n  marked deprecated, and now prints a warning message. Its replacements are the\n  `dart compile exe` and `dart compile aot-snapshot` commands, which offer the\n  same functionality. The `dart2native` tool will be removed from the Dart SDK\n  in Dart 2.15.\n\n- **Breaking change**: The standalone `dartfmt` tool has been marked deprecated,\n  and now prints a warning message. Instead, use `dart format`. The `dartfmt`\n  tool will be removed from the Dart SDK in Dart 2.15.\n\n  Note that `dart format` has [a different set of options and\n  defaults][dartfmt cli] than `dartfmt`.\n\n- The `dart create` command has been updated to create projects that use the new\n  'recommended' set of lints from `package:lints`. See\n  https://dart.dev/go/core-lints for more information about these lints.\n\n[#46100]: https://github.com/dart-lang/sdk/issues/46100\n[dartfmt cli]: https://github.com/dart-lang/dart_style/wiki/CLI-Changes\n\n- The `dart analyze` command has been extended to support specifying multiple\n  files or directories to analyze; see also\n  https://github.com/dart-lang/sdk/issues/45352.\n\n- The `dartanalyzer` command's JSON output mode has been changed to emit the\n  JSON output on stdout instead of stderr.\n\n#### dart format\n\n- Simplify and optimize cascade formatting. See:\n  https://github.com/dart-lang/dart_style/pull/1033\n- Don't unnecessarily split argument lists with `/* */` comments.\n- Return correct exit code from `FormatCommand` when formatting stdin.\n- Split empty catch blocks with finally clauses or catches after them.\n\n#### Linter\n\nUpdated the Linter to `1.8.0`, which includes changes that\n- improve performance for `prefer_is_not_empty`.\n- fix false positives in `no_logic_in_create_state`.\n- improve `package_names` to allow dart identifiers as package names.\n- fix a false-positive in `package_names` (causing keywords to wrongly get flagged).\n- fix `avoid_classes_with_only_static_member` to check for inherited members and also\n  flag classes with only methods.\n- fix `curly_braces_in_flow_control_structures` to properly flag terminating `else-if`\n  blocks.\n- improve `always_specify_types` to support type aliases.\n- fix a false positive in `unnecessary_string_interpolations` w/ nullable interpolated\n  strings\n- fix a false positive in `avoid_function_literals_in_foreach_calls` for nullable\n  iterables.\n- fix false positives in `avoid_returning_null` w/ NNBD\n- fix false positives in `use_late_for_private_fields_and_variables` in the presence\n  of const constructors.\n- adds a new lint: `eol_at_end_of_file`.\n- fix case-sensitive false positive in `use_full_hex_values_for_flutter_colors`.\n- improve try-block and switch statement flow analysis for\n  `use_build_context_synchronously`.\n- update `use_setters_to_change_properties` to only highlight a method name, not\n  the entire body and doc comment.\n- update `unnecessary_getters_setters` to allow otherwise \"unnecessary\" getters\n  and setters with annotations.\n- update `missing_whitespace_between_adjacent_strings` to allow String\n  interpolations at the beginning and end of String literals.\n- update `unnecessary_getters_setters` to allow for setters with non-basic\n  assignments (for example, `??=` or `+=`).\n- relax `non_constant_identifier_names` to allow for a trailing underscore.\n- fix false negative in `prefer_final_parameters` where first parameter is\n  final.\n- improve `directives_ordering` sorting of directives with dot paths and\n  dot-separated package names.\n- (internal) migrate to `SecurityLintCode` instead of deprecated\n  `SecurityLintCodeWithUniqueName`.\n- (internal) fix `avoid_types_as_parameter_names` to skip field formal\n  parameters.\n- fix false positives in `prefer_interpolation_to_compose_strings` where the\n  left operand is not a String.\n- fix false positives in `only_throw_errors` for misidentified type variables.\n- add new lint: `depend_on_referenced_packages`.\n- update `avoid_returning_null_for_future` to skip checks for null-safe\n  libraries.\n- add new lint: `use_test_throws_matchers`.\n- relax `sort_child_properties_last` to accept closures after child.\n- improve performance for `prefer_contains` and `prefer_is_empty`.\n- add new lint: `noop_primitive_operations`.\n- mark `avoid_web_libraries_in_flutter` as stable.\n- add new lint: `prefer_final_parameters`.\n- update `prefer_initializing_formals` to allow assignments where identifier\n  names don't match.\n- update `directives_ordering` to checks ordering of `package:` imports in code\n  outside pub packages.\n- add simple reachability analysis to `use_build_context_synchronously` to\n  short-circuit await-discovery in terminating blocks.\n- update `use_build_context_synchronously` to recognize nullable types when\n  accessed from legacy libraries.\n\n#### Pub\n\n- `dart pub publish` now respects `.pubignore` files with gitignore-style rules.\n  `.gitignore` files in the repo are still respected if they are not overridden\n  by a `.pubignore` in the same directory.\n\n  pub no longer queries git for listing the files. This implies:\n\n  - Checked in files will now be ignored if they are included by a `.gitignore`\n    rule.\n  - Global ignores are no longer taken into account.\n  - Even packages that are not in git source control will have their\n    `.gitignore` files respected.\n  - `.gitignore` and `.pubignore` is always case-insensitive on MacOs and\n    Windows (as is default for `git` repositories).\n\n- New flag `dart pub deps --json` gives a machine parsable overview of the\n  current dependencies.\n- New command: `dart pub cache clean`. Will delete everything in your current\n  pub cache.\n- Commands related to a single package now takes a `--directory` option to\n  operate on a package in the given directory instead of the working directory.\n- git dependencies with a relative repo url would previously be interpreted\n  relative to the current package, even for transitive dependencies. This now\n  fails instead.\n\n- Pub now uses a Dart library to read and write tar files. This should fix\n  several issues we had with incompatibilities between different system `tar`s.\n- `PUB_HOSTED_URL` can now include a trailing slash.\n- Incremental compilation is now used for compilation of executables from\n  dependencies when using `dart run <package>:<command>`.\n\n#### Dart2JS\n\n*   **Breaking change** [#46545][]: Dart2JS emits ES6+ JavaScript by default,\n    thereby no longer supporting legacy browsers. Passing the\n    `--legacy-javascript` flag will let you opt out of this update, but this\n    flag will be removed in a future release. Modern browsers will not be\n    affected, as Dart2JS continues to support [last two major releases][1] of\n    Edge, Safari, Firefox, and Chrome.\n\n[#46545]: https://github.com/dart-lang/sdk/issues/46545\n[1]: https://dart.dev/faq#q-what-browsers-do-you-support-as-javascript-compilation-targets\n\n#### Dart Dev Compiler (DDC)\n\n- **Breaking change** [#44154][]: Subtyping relations of `package:js` classes\n  have been changed to be more correct and consistent with Dart2JS.\n  Like `anonymous` classes, non-`anonymous` classes will no longer check the\n  underlying type in DDC. The internal type representation of these objects have\n  changed as well, which will affect the `toString` value of these types.\n\n[#44154]: https://github.com/dart-lang/sdk/issues/44154\n\n## 2.13.4 - 2021-06-28\n\nThis is a patch release that fixes:\n\n- a Dart VM compiler crash (issue [flutter/flutter#84212][]).\n- a DDC compiler crash (issue [flutter/flutter#82838][]).\n\n[flutter/flutter#84212]: https://github.com/flutter/flutter/issues/84212\n[flutter/flutter#82838]: https://github.com/flutter/flutter/issues/82838\n\n## 2.13.3 - 2021-06-10\n\nThis is a patch release that fixes:\n\n- a Dart compiler crash (issue [flutter/flutter#83094][]).\n- an analysis server deadlock causing it to stop responding to IDE requests\n  (issue [#45996][]).\n- an analyzer crash when analyzing against `package:meta` `v1.4.0` (issue\n  [#46183][]).\n\n[flutter/flutter#83094]: https://github.com/flutter/flutter/issues/83094\n[#45996]: https://github.com/dart-lang/sdk/issues/45996\n[#46183]: https://github.com/dart-lang/sdk/issues/46183\n\n## 2.13.1 - 2021-05-25\n\nThis is a patch release that fixes:\n\n- incorrect behavior in CastMap (issue [#45473][]).\n- missing nullability from recursive type hierarchies in DDC (issue [#45767][]).\n\n[#45473]: https://github.com/dart-lang/sdk/issues/45473\n[#45767]: https://github.com/dart-lang/sdk/issues/45767\n\n## 2.13.0 - 2021-05-18\n\n### Language\n\n- **Type aliases** [Non-function type aliases][]: Type aliases (names for types\n  introduced via the `typedef` keyword) were previously restricted to only\n  introduce names for function types. In this release, we remove this\n  restriction and allow type aliases to name any kind of type.\n\n  ```dart\n  import 'dart:convert';\n\n  typedef JsonMap = Map<String, dynamic>;\n\n  JsonMap parseJsonMap(String input) => json.decode(input) as JsonMap;\n  ```\n\n  In addition to being usable as type annotations, type aliases that name class\n  types can now also be used anywhere that the underlying class could be used,\n  allowing type aliases to be used to safely rename existing classes.\n\n  ```dart\n  class NewClassName<T> {\n     NewClassName.create(T x);\n     static NewClassName<T> mkOne<T>(T x) => NewClassName<T>.create(x);\n   }\n  @Deprecated(\"Use NewClassName instead\")\n  typedef OldClassName<T> = NewClassName<T>;\n\n  class LegacyClass extends OldClassName<int> {\n    LegacyClass() : super.create(3);\n  }\n  OldClassName<int> legacyCode() {\n    var one = OldClassName.create(1);\n    var two = OldClassName.mkOne(2);\n    return LegacyClass();\n  }\n  ```\n\n  The new type alias feature is only available as part of the 2.13\n  [language version](https://dart.dev/guides/language/evolution). To use this\n  feature, you must set the lower bound on the sdk constraint for your package\n  to 2.13 or greater.\n\n  [non-function type aliases]:\n    https://github.com/dart-lang/language/blob/master/accepted/2.13/nonfunction-type-aliases/feature-specification.md\n\n### Core libraries\n\n#### `dart:collection`\n\n- The `SplayTreeMap` was changed to allow `null` as key if the `compare`\n  function allows it. It now checks that a new key can be used as an argument to\n  the `compare` function when the member is added, _even if the map is empty_\n  (in which case it just compares the key to itself).\n\n- The `SplayTreeSet` was changed to checks that a new element can be used as an\n  argument to the `compare` function when the member is added, _even if the set\n  is empty_ (in which case it just compares the element to itself).\n\n#### `dart:developer`\n\n- Added `serverWebSocketUri` property to `ServiceProtocolInfo`.\n\n#### `dart:ffi`\n\n- Add `Packed` for interacting with packed structs in native memory.\n- Add `Array` for interacting with structs with inline arrays.\n\n### Dart VM\n\n### Tools\n\n#### Analyzer\n\n- Static analyses with \"error\" severity can once again be ignored with comments\n  like `// ignore: code` and `// ignore_for_file: code`. To declare that certain\n  analysis codes, or codes with certain severities (\"error\", \"warning\", and\n  \"info\") cannot be ignored with such comments, list them in\n  `analysis_options.yaml`, under the `analyzer` heading, with a new YAML key,\n  `cannot-ignore`. For example, to declare that \"error\" codes and\n  `unused_import` cannot be ignored, write the following into\n  `analysis_options.yaml`:\n\n  ```yaml\n  analyzer:\n    cannot-ignore:\n      - error\n      - unused_import\n  ```\n\n#### dart format\n\n- Correct constructor initializer indentation after `required` named parameters.\n\n#### Linter\n\nUpdated the Linter to `1.2.1`, which includes:\n\n- Improved `iterable_contains_unrelated_type` to better support `List` content\n  checks.\n- Fixed `camel_case_types` and `prefer_mixin` to support non-function type\n  aliases.\n- Fixed `prefer_mixin` to properly make exceptions for `dart.collection` legacy\n  mixins.\n- Added new lints `avoid_multiple_declarations_per_line`,\n  `use_if_null_to_convert_nulls_to_bools`, `deprecated_consistency`,\n  `use_named_constants`, `use_build_context_synchronously` (experimental).\n- Deprecated `avoid_as`.\n- Migrated library to null-safety.\n\n### Other libraries\n\n#### `package:js`\n\n- **Breaking change:** It is no longer valid to use `String`s that match an\n  `@Native` annotation in an `@JS()` annotation for a non-anonymous JS interop\n  class. This led to erroneous behavior due to the way interceptors work. If you\n  need to work with a native class, prefer `dart:html`, an `@anonymous` class,\n  or `js_util`. See issue [#44211][] for more details.\n\n[#44211]: https://github.com/dart-lang/sdk/issues/44211\n\n## 2.12.4 - 2021-04-15\n\nThis is a patch release that fixes a Dart VM compiler crashes when compiling\ninitializers containing async closures (issue [#45306][]).\n\n[#45306]: https://github.com/dart-lang/sdk/issues/45306\n\n## 2.12.3 - 2021-04-14\n\n**Security advisory**: This is a patch release that fixes a vulnerability in\n`dart:html` related to DOM clobbering. See the security advisory\n[CVE-2021-22540][cve-2021-22540] for more details. Thanks again to **Vincenzo di\nCicco** for finding and reporting this vulnerability.\n\n[cve-2021-22540]:\n  https://github.com/dart-lang/sdk/security/advisories/GHSA-3rfv-4jvg-9522\n\n## 2.12.2 - 2021-03-17\n\nThis is a patch release that fixes crashes reported by Flutter 2 users (issue\n[flutter/flutter#78167][]).\n\n[flutter/flutter#78167]: https://github.com/flutter/flutter/issues/78167\n\n## 2.12.1 - 2021-03-10\n\nThis is a patch release that fixes:\n\n- an unhandled exception in HTTPS connections (issue [#45047][]).\n- a typing issue in the typed_data `+` operator (issue [#45140][]).\n\n[#45047]: https://github.com/dart-lang/sdk/issues/45047\n[#45140]: https://github.com/dart-lang/sdk/issues/45140\n\n## 2.12.0 - 2021-03-03\n\n### Language\n\n- **Breaking change** [Null safety][] is now enabled by default in all code that\n  has not opted out. With null safety, types in your code are non-nullable by\n  default. Null can only flow into parts of your program where you want it. With\n  null safety, your runtime null-dereference bugs turn into edit-time analysis\n  errors.\n\n  You can opt out of null safety and preserve your code's previous behavior by\n  setting the lower bound of the SDK constraint in your pubspec to 2.11.0 or\n  earlier to request an earlier [language version][]. You can opt out individual\n  Dart files by adding `// @dart=2.11` to the beginning of the file.\n\n  Files that are opted in to null safety may report new compile-time errors.\n  Opting in to null safety also gives you access to other new language features:\n\n  - Smarter flow analysis and type promotion\n  - `required` named parameters\n  - `late` variables\n  - The postfix `!` null assertion operator\n  - The `?..` and `?[]` null-aware operators\n\n- **Breaking change** [#44660][]: Fixed an implementation bug where `this` would\n  sometimes undergo type promotion in extensions.\n\n[null safety]: https://dart.dev/null-safety/understanding-null-safety\n[language version]:\n  https://dart.dev/guides/language/evolution#language-versioning\n[#44660]: https://github.com/dart-lang/sdk/issues/44660\n\n### Core libraries\n\n#### `dart:async`\n\n- Add extension method `onError()` on `Future` to allow better typing of error\n  callbacks.\n\n#### `dart:collection`\n\n- Add `UnmodifiableSetView` class, which allows users to guarantee that methods\n  that could change underlying `Set` instance can not be invoked.\n\n- Make it explicit that `LinkedList` compares elements by identity, and update\n  `contains()` to take advantage of this.\n\n#### `dart:core`\n\n- Add `Set.unmodifiable()` constructor, which allows users to create\n  unmodifiable `Set` instances.\n\n#### `dart:ffi`\n\n- **Breaking change** [#44621][]: Invocations with a generic `T` of `sizeOf<T>`,\n  `Pointer<T>.elementAt()`, `Pointer<T extends Struct>.ref`, and\n  `Pointer<T extends Struct>[]` are being deprecated in the current stable\n  release (2.12), and are planned to be fully removed in the following stable\n  release (2.13). Consequently, `allocate` in `package:ffi` will no longer be\n  able to invoke `sizeOf<T>` generically, and will be deprecated as well.\n  Instead, the `Allocator` it is introduced to `dart:ffi`, and also requires a\n  constant `T` on invocations. For migration notes see the breaking change\n  request.\n\n- **Breaking change** [#44622][]: Subtypes of `Struct` without any native member\n  are being deprecated in the current stable release (2.12), and are planned to\n  be fully removed in the following stable release (2.13). Migrate opaque types\n  to extend `Opaque` rather than `Struct`.\n\n[#44621]: https://github.com/dart-lang/sdk/issues/44621\n[#44622]: https://github.com/dart-lang/sdk/issues/44622\n\n#### `dart:io`\n\n- `HttpRequest` now correctly follows HTTP 308 redirects\n  (`HttpStatus.permanentRedirect`).\n\n#### `dart:isolate`\n\n- Add `debugName` positional parameter to `ReceivePort` and `RawReceivePort`\n  constructors, a name which can be associated with the port and displayed in\n  tooling.\n- Introduce `Isolate.exit([port, message])` which terminates current isolate\n  and, if `port` is specified, as a last action sends out the `message` out to\n  that `port`.\n\n#### `dart:html`\n\n- `EventStreamSubscription.cancel` has been updated to retain its synchronous\n  timing when running in both sound and unsound null safety modes. See issue\n  [#44157][] for more details.\n\n[#44157]: https://github.com/dart-lang/sdk/issues/44157\n\n### Dart VM\n\n- **Breaking change** [#42312][]: `Dart_WeakPersistentHandle`s no longer\n  auto-delete themselves when the referenced object is garbage collected to\n  avoid race conditions, but they are still automatically deleted when the\n  isolate group shuts down.\n\n- **Breaking change** [#42312][]: `Dart_WeakPersistentHandleFinalizer` is\n  renamed to `Dart_HandleFinalizer` and had its `handle` argument removed. All\n  API functions using that type have been updated.\n\n[#42312]: https://github.com/dart-lang/sdk/issues/42312\n\n### Dart2JS\n\n- Remove `--no-defer-class-types` and `--no-new-deferred-split`.\n\n### Tools\n\n#### Analyzer\n\n- Remove the `--use-fasta-parser`, `--preview-dart-2`, and\n  `--enable-assert-initializers` command line options. These options haven't\n  been supported in a while and were no-ops.\n\n- Report diagnostics regarding the\n  [`@internal`](https://pub.dev/documentation/meta/latest/meta/internal-constant.html)\n  annotation.\n\n- Improve diagnostic-reporting regarding the\n  [`@doNotStore`](https://pub.dev/documentation/meta/latest/meta/doNotStore-constant.html)\n  annotation.\n\n- Introduce a diagnostic which is reported when a library member named `main` is\n  not a function.\n\n- Introduce a diagnostic which is reported when a `main` function's first\n  parameter is not a supertype of `List<String>`.\n\n- Introduce diagnostics for when an `// ignore` comment contains an error code\n  which is not being reported, cannot be ignored, or is already being ignored.\n\n- Report diagnostics when using\n  [`@visibleForTesting`](https://pub.dev/documentation/meta/latest/meta/\n  visibleForTesting-constant.html) on top-level variables.\n\n- Fix false positive reports of \"unused element\" for top-level setters and\n  getters.\n\n- Fix false positive reports regarding `@deprecated` field formal parameters at\n  their declaration.\n\n- For null safety, introduce a diagnostic which reports when a null-check will\n  always fail.\n\n- Fix false positive reports regarding optional parameters on private\n  constructors being unused.\n\n- Introduce a diagnostic which is reported when a constructor includes duplicate\n  field formal parameters.\n\n- Improve the \"unused import\" diagnostic when multiple import directives share a\n  common prefix.\n\n- Fix false positive \"unused import\" diagnostic regarding an import which\n  provides an extension method which is used.\n\n- For null safety, improve the messaging of \"use of nullable value\" diagnostics\n  for eight different contexts.\n\n- Fix false positive reports regarding `@visibleForTesting` members in a \"hide\"\n  combinator of an import or export directive.\n\n- Improve the messaging of \"invalid override\" diagnostics.\n\n- Introduce a diagnostic which is reported when `Future<T>.catchError` is called\n  with an `onError` callback which does not return `FutureOr<T>`.\n\n#### dartfmt\n\n- Don't duplicate comments on chained if elements.\n\n- Preserve `?` in initializing formal function-typed parameters.\n\n- Fix performance issue with constructors that have no initializer list.\n\n#### Linter\n\nUpdated the Linter to `0.1.129`, which includes:\n\n- New lints: `avoid_dynamic_calls`, `cast_nullable_to_non_nullable`,\n  `null_check_on_nullable_type_parameter`,\n  `tighten_type_of_initializing_formals`, `unnecessary_null_checks`, and\n  `avoid_type_to_string`.\n\n- Fix crash in `prefer_collection_literals` when there is no static parameter\n  element.\n\n- Fix false negatives for `prefer_collection_literals` when a LinkedHashSet or\n  LinkedHashMap instantiation is passed as the argument to a function in any\n  position other than the first.\n\n- Fix false negatives for `prefer_collection_literals` when a LinkedHashSet or\n  LinkedHashMap instantiation is used in a place with a static type other than\n  Set or Map.\n\n- Update to `package_names` to allow leading underscores.\n\n- Fix crashes in `unnecessary_null_checks` and\n  `missing_whitespace_between_adjacent_strings`.\n\n- Update to `void_checks` for null safety.\n\n- Fix range error in `unnecessary_string_escapes`.\n\n- Fix false positives in `unnecessary_null_types`.\n\n- Fix to `prefer_constructors_over_static_methods` to respect type parameters.\n\n- Update to `always_require_non_null_named_parameters` to be null safety-aware.\n\n- Update to `unnecessary_nullable_for_final_variable_declarations` to allow\n  dynamic.\n\n- Update `overridden_fields` to not report on abstract parent fields.\n\n- Fix to `unrelated_type_equality_checks` for null safety.\n\n- Improvements to `type_init_formals`to allow types not equal to the field type.\n\n- Updates to `public_member_apis` to check generic type aliases.\n\n- Fix `close_sinks` to handle `this`-prefixed property accesses.\n\n- Fix `unawaited_futures` to handle `Future` subtypes.\n\n- Performance improvements to `always_use_package_imports`,\n  `avoid_renaming_method_parameters`, `prefer_relative_imports` and\n  `public_member_api_docs`.\n\n#### Pub\n\n- **Breaking**: The Dart SDK constraint is now **required** in `pubspec.yaml`.\n  You must include a section like:\n\n  ```yaml\n  environment:\n    sdk: \">=2.10.0 <3.0.0\"\n  ```\n\n  See [#44072][].\n\n  For legacy dependencies without an SDK constraint, pub will now assume a\n  default language version of 2.7.\n\n- The top level `pub` executable has been deprecated. Use `dart pub` instead.\n  See [dart tool][].\n\n- New command `dart pub add` that adds new dependencies to your `pubspec.yaml`,\n  and a corresponding `dart pub remove` that removes dependencies.\n\n- New option `dart pub upgrade --major-versions` will update constraints in your\n  `pubspec.yaml` to match the _resolvable_ column reported in\n  `dart pub outdated`. This allows users to easily upgrade to latest version for\n  all dependencies where this is possible, even if such upgrade requires an\n  update to the version constraint in `pubspec.yaml`.\n\n  It is also possible to only upgrade the major version for a subset of your\n  dependencies using `dart pub upgrade --major-versions <dependencies...>`.\n\n- New option `dart pub upgrade --null-safety` will attempt to update constraints\n  in your `pubspec.yaml`, such that only null-safety migrated versions of\n  dependencies are allowed.\n\n- New option `dart pub outdated --mode=null-safety` that will analyze your\n  dependencies for null-safety.\n\n- `dart pub get` and `dart pub upgrade` will highlight dependencies that have\n  been [discontinued](https://dart.dev/tools/pub/publishing#discontinue) on\n  pub.dev.\n\n- `dart pub publish` will now check your pubspec keys for likely typos.\n\n- `dart pub upgrade package_foo` fetchs dependencies but ignores the\n  `pubspec.lock` for `package_foo`, allowing users to only upgrade a subset of\n  dependencies.\n\n- New command `dart pub login` that logs into pub.dev.\n\n- The `--server` option to `dart pub publish` and `dart pub uploader` are\n  deprecated. Use `publish_to` in your `pubspec.yaml` or set the\n  `$PUB_HOSTED_URL` environment variable.\n\n- `pub global activate` no longer re-precompiles if the current global\n  installation was same version.\n\n- The Flutter SDK constraint upper bound is now ignored in pubspecs and\n  deprecated when publishing. See: [flutter-upper-bound-deprecation][].\n\n[flutter-upper-bound-deprecation]:\n  https://dart.dev/go/flutter-upper-bound-deprecation\n[#44072]: https://github.com/dart-lang/sdk/issues/44072\n[dart tool]: https://dart.dev/tools/dart-tool\n\n## 2.10.5 - 2021-01-21\n\nThis is a patch release that fixes a crash in the Dart VM. (issue [#44563][]).\n\n[#44563]: https://github.com/dart-lang/sdk/issues/44563\n\n## 2.10.4 - 2020-11-12\n\nThis is a patch release that fixes a crash in the Dart VM (issues [#43941][],\n[flutter/flutter#43620][], and [Dart-Code/Dart-Code#2814][]).\n\n[#43941]: https://github.com/dart-lang/sdk/issues/43941\n[flutter/flutter#43620]: https://github.com/flutter/flutter/issues/43620\n[dart-code/dart-code#2814]: https://github.com/Dart-Code/Dart-Code/issues/2814\n\n## 2.10.3 - 2020-10-29\n\nThis is a patch release that fixes the following issues:\n\n- breaking changes in Chrome 86 that affect DDC (issues [#43750][] and\n  [#43193][]).\n- compiler error causing incorrect use of positional parameters when named\n  parameters should be used instead (issues [flutter/flutter#65324][] and\n  [flutter/flutter#68092][]).\n- crashes and/or undefined behavior in AOT compiled code (issues [#43770][] and\n  [#43786][]).\n- AOT compilation of classes with more than 64 unboxed fields (issue\n  [flutter/flutter#67803][]).\n\n[#43750]: https://github.com/dart-lang/sdk/issues/43750\n[#43193]: https://github.com/dart-lang/sdk/issues/43193\n[flutter/flutter#65324]: https://github.com/flutter/flutter/issues/65324\n[flutter/flutter#68092]: https://github.com/flutter/flutter/issues/68092\n[#43770]: https://github.com/dart-lang/sdk/issues/43770\n[#43786]: https://github.com/dart-lang/sdk/issues/43786\n[flutter/flutter#67803]: https://github.com/flutter/flutter/issues/67803\n\n## 2.10.2 - 2020-10-15\n\nThis is a patch release that fixes a DDC compiler crash (issue [#43589]).\n\n[#43589]: https://github.com/dart-lang/sdk/issues/43589\n\n## 2.10.1 - 2020-10-06\n\nThis is a patch release that fixes the following issues:\n\n- crashes when developing Flutter applications (issue [#43464][]).\n- non-deterministic incorrect program behaviour and/or crashes (issue\n  [flutter/flutter#66672][]).\n- uncaught TypeErrors in DDC (issue [#43661][]).\n\n[#43464]: https://github.com/dart-lang/sdk/issues/43464\n[flutter/flutter#66672]: https://github.com/flutter/flutter/issues/66672\n[#43661]: https://github.com/dart-lang/sdk/issues/43661\n\n## 2.10.0 - 2020-09-28\n\n### Core libraries\n\n#### `dart:io`\n\n- Adds `Abort` method to class `HttpClientRequest`, which allows users to cancel\n  outgoing HTTP requests and stop following IO operations.\n- A validation check is added to `path` of class `Cookie`. Having characters\n  ranging from 0x00 to 0x1f and 0x3b (\";\") will lead to a `FormatException`.\n- The `HttpClient` and `HttpServer` classes now have a 1 MiB limit for the total\n  size of the HTTP headers when parsing a request or response, instead of the\n  former 8 KiB limit for each header name and value. This limit cannot be\n  configured at this time.\n\n#### `dart:typed_data`\n\n- Class `BytesBuilder` is moved from `dart:io` to `dart:typed_data`. It's\n  temporarily being exported from `dart:io` as well.\n\n### `dart:uri`\n\n- [#42564]: Solved inconsistency in `Uri.https` and `Uri.http` constructors'\n  `queryParams` type.\n\n### Dart VM\n\n- **Breaking change** [#42982][]: `dart_api_dl.cc` is renamed to `dart_api_dl.c`\n  and changed to a pure C file.\n- Introduces `Dart_FinalizableHandle`s. They do auto-delete, and the weakly\n  referred object cannot be accessed through them.\n\n### Dart2JS\n\n- Adds support for deferred loading of types separately from classes. This\n  enables dart2js to make better optimization choices when deferred loading.\n  This work is necessary to address unsoundness in the deferred loading\n  algorithm. Currently, fixing this unsoundness would result in code bloat, but\n  loading types separately from classes will allow us to fix the unsoundness\n  with only a minimal regression. To explicitly disable deferred loading of\n  types, pass `--no-defer-class-types`. See the original post on the\n  [unsoundness in the deferred loading algorithm][].\n- Enables a new sound deferred splitting algorithm. To explicitly disable the\n  new deferred splitting algorithm, pass `--no-new-deferred-split`. See the\n  original post on the [unsoundness in the deferred loading algorithm][].\n\n[#42982]: https://github.com/dart-lang/sdk/issues/42982\n[unsoundness in the deferred loading algorithm]:\n  https://github.com/dart-lang/sdk/blob/302ad7ab2cd2de936254850550aad128ae76bbb7/CHANGELOG.md#dart2js-3\n\n### Tools\n\n#### dartfmt\n\n- Don't crash when non-ASCII whitespace is trimmed.\n- Split all conditional expressions (`?:`) when they are nested.\n- Handle `external` and `abstract` fields and variables.\n\n#### Linter\n\nUpdated the Linter to `0.1.118`, which includes:\n\n- New lint: `unnecessary_nullable_for_final_variable_declarations`.\n- Fixed NPE in `prefer_asserts_in_initializer_lists`.\n- Fixed range error in `unnecessary_string_escapes`.\n- `unsafe_html` updated to support unique error codes.\n- Updates to `diagnostic_describe_all_properties` to check for `Diagnosticable`s\n  (not `DiagnosticableMixin`s).\n- New lint: `use_late`.\n- Fixed `unnecessary_lambdas` to respect deferred imports.\n- Updated `public_member_api_docs` to check mixins.\n- Updated `unnecessary_statements` to skip `as` expressions.\n- Fixed `prefer_relative_imports` to work with path dependencies.\n\n#### Pub\n\n- `pub run` and `pub global run` accepts a `--(no-)-sound-null-safety` flag,\n  that is passed to the VM.\n- Fix: Avoid multiple recompilation of binaries in global packages.\n- Fix: Avoid exponential behaviour of error reporting from the solver.\n- Fix: Refresh binstubs after recompile in global run.\n\n## 2.9.3 - 2020-09-08\n\nThis is a patch release that fixes DDC to handle a breaking change in Chrome\n(issue [#43193][]).\n\n[#43193]: https://github.com/dart-lang/sdk/issues/43193\n\n## 2.9.2 - 2020-08-26\n\nThis is a patch release that fixes transient StackOverflow exceptions when\nbuilding Flutter applications (issue [flutter/flutter#63560][]).\n\n[flutter/flutter#63560]: https://github.com/flutter/flutter/issues/63560\n\n## 2.9.1 - 2020-08-12\n\nThis is a patch release that fixes unhandled exceptions in some Flutter\napplications (issue [flutter/flutter#63038][]).\n\n[flutter/flutter#63038]: https://github.com/flutter/flutter/issues/63038\n\n## 2.9.0 - 2020-08-05\n\n### Language\n\n### Core libraries\n\n#### `dart:async`\n\n- Adds `Stream.multi` constructor creating streams which can be listened to more\n  than once, and where each individual listener can be controlled independently.\n\n#### `dart:convert`\n\n- **Breaking change** [#41100][]: When encoding a string containing unpaired\n  surrogates as UTF-8, the unpaired surrogates will be encoded as replacement\n  characters (`U+FFFD`). When decoding UTF-8, encoded surrogates will be treated\n  as malformed input. When decoding UTF-8 with `allowMalformed: true`, the\n  number of replacement characters emitted for malformed input sequences has\n  been changed to match the [WHATWG encoding standard][].\n\n[#41100]: https://github.com/dart-lang/sdk/issues/41100\n[whatwg encoding standard]: https://encoding.spec.whatwg.org/#utf-8-decoder\n\n#### `dart:io`\n\n- [#42006][]: The signature of `exit` has been changed to return the `Never`type\n  instead of `void`. since no code will run after it,\n- Class `OSError` now implements `Exception`. This change means `OSError` will\n  now be caught in catch clauses catching `Exception`s.\n- Added `InternetAddress.tryParse`.\n- [Abstract Unix Domain Socket][] is supported on Linux/Android now. Using an\n  `InternetAddress` with `address` starting with '@' and type being\n  `InternetAddressType.Unix` will create an abstract Unix Domain Socket.\n- On Windows, file APIs can now handle files and directories identified by long\n  paths (greater than 260 characters). It complies with all restrictions from\n  [Long Path on Windows][]. Note that `Directory.current` does not work with\n  long path.\n\n[#42006]: https://github.com/dart-lang/sdk/issues/42006\n[abstract unix domain socket]: http://man7.org/linux/man-pages/man7/unix.7.html\n[long path on windows]:\n  https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#maximum-path-length-limitation\n\n#### `dart:html`\n\n- **Breaking change**: `CssClassSet.add()` previously returned `null` if the\n  `CssClassSet` corresponded to multiple elements. In order to align with the\n  null-safe changes in the `Set` interface, it will now return `false` instead.\n  The same applies for `CssClassSet.toggle`.\n\n- `EventStreamSubscription.cancel` method used to return `null`, but since\n  `StreamSubscription.cancel` has changed to be non-nullable, this method\n  returns an empty `Future` instead. Due to an optimization on `null` `Future`s,\n  this method used to complete synchronously, but now that the `Future` is empty\n  instead, it completes asynchronously, therefore potentially invalidating code\n  that relied on the synchronous side-effect. This change will only affect code\n  using sound null-safety. See issue [#41653][] for more details.\n\n- Methods in `Console` have been updated to better reflect the modern Console\n  specification. Particularly of interest are `dir` and `table` which take in\n  extra optional arguments.\n\n[#41653]: https://github.com/dart-lang/sdk/issues/41653\n\n#### `dart:mirrors`\n\n- **Breaking change** [#42714][]: web compilers (dart2js and DDC) now produce a\n  compile-time error if `dart:mirrors` is imported.\n\n  Most projects should not be affected. Since 2.0.0 this library was unsupported\n  and produced runtime errors on all its APIs. Since then several tools already\n  reject code that use `dart:mirrors` including webdev and flutter tools, we\n  expect few projects to run into this problem.\n\n[#42714]: https://github.com/dart-lang/sdk/issues/42714\n\n### Tools\n\n#### dartfmt\n\n- Add `--fix-single-cascade-statements`.\n- Correctly handle `var` in `--fix-function-typedefs`.\n- Preserve leading indentation in fixed doc comments.\n- Split outer nested control flow elements.\n- Always place a blank line after script tags.\n- Don't add unneeded splits on if elements near comments.\n- Indent blocks in initializers of multiple-variable declarations.\n- Update the null-aware subscript syntax from `?.[]` to `?[]`.\n\n#### Analyzer\n\n- Static analyses with a severity of \"error\" can no longer be ignored with\n  comments (`// ignore: code` and `// ignore_for_file: code`).\n\n#### Linter\n\nUpdated the Linter to `0.1.117`, which includes:\n\n- New lint: `do_not_use_environment`.\n- New lint: `exhaustive_cases`.\n- New lint: `no_default_cases` (experimental).\n- New lint: `sized_box_for_whitespace`.\n- New lint: `use_is_even_rather_than_modulo`.\n- Updated `directives_ordering` to remove third party package special-casing.\n- Updated `prefer_is_empty` to special-case assert initializers and const\n  contexts.\n- Updated `prefer_mixin` to allow \"legacy\" SDK abstract class mixins.\n- Updated `sized_box_for_whitespace` to address false-positives.\n- Updated `type_annotate_public_apis` to allow inferred types in final field\n  assignments.\n- Updated `unnecessary_lambdas` to check for tear-off assignability.\n- Updated `unsafe_html` to use a `SecurityLintCode` (making it un-ignorable) and\n  to include `Window.open`, `Element.html` and `DocumentFragment.html` in unsafe\n  API checks. Also added checks for attributes and methods on extensions.\n\n### Dart VM\n\n- **Breaking change** [#41100][]: When printing a string using the `print`\n  function, the default implementation (used when not overridden by the embedder\n  or the current zone) will print any unpaired surrogates in the string as\n  replacement characters (`U+FFFD`). Similarly, the `Dart_StringToUTF8` function\n  in the Dart API will convert unpaired surrogates into replacement characters.\n\n### Pub\n\n- `pub run` and `pub global run` accepts a `--enable-experiment` flag enabling\n  experiments in the Dart VM (and language).\n- Warn when publishing the first null-safe version of a package.\n- `pub outdated`:\n  - If the current version of a dependency is a prerelease version, use\n    prereleases for latest if there is no newer stable.\n  - Don't require a `pubspec.lock` file. When the lockfile is missing, the\n    **Current** column is empty.\n- `pub upgrade`: Show summary count of outdated packages after running. It will\n  also only show newer packages if they are not prereleases or the package is\n  already a prerelease.\n- Publishing Flutter plugins using the old plugin format is no longer allowed.\n  Plugins using the old plugin format can still be consumed.\n- `pub run`: Fix precompilation with relative `PUB_CACHE` paths\n  ([#2486](https://github.com/dart-lang/pub/pull/2486)).\n- Preserve Windows line endings in `pubspec.lock` if they are already there\n  ([#2489](https://github.com/dart-lang/pub/pull/2489)).\n- Better terminal color-detection. Use colors in terminals on Windows.\n- Fix git folder names in cache, allowing for ssh-style git dependencies.\n- Fix: Avoid precompilation of dependencies of global packages.\n\n## 2.8.4 - 2020-06-04\n\nThis is a patch release that fixes potential memory leaks in the Dart front-end\n(issues [#42111][] and [#42112][]).\n\n[#42111]: https://github.com/dart-lang/sdk/issues/42111\n[#42112]: https://github.com/dart-lang/sdk/issues/42112\n\n## 2.8.3 - 2020-05-28\n\nThis is a patch release that fixes the following issues:\n\n- crashes in Flutter apps (issue [flutter/flutter#57318][]).\n- a regression in stack traces (issue [#41907][]).\n- re-canonicalization of constants with unboxed fields (issue\n  [flutter/flutter#57190][]).\n\n[flutter/flutter#57318]: https://github.com/flutter/flutter/issues/57318\n[#41907]: https://github.com/dart-lang/sdk/issues/41907\n[flutter/flutter#57190]: https://github.com/flutter/flutter/issues/57190\n\n## 2.8.2 - 2020-05-13\n\nThis is a patch release that fixes an AOT compilation bug in global\ntransformations which manifests as a NoSuchMethod exception (issue\n[flutter/flutter#56479][]).\n\n[flutter/flutter#56479]: https://github.com/flutter/flutter/issues/56479\n\n## 2.8.1 - 2020-05-06\n\nMuch of the changes in this release are in preparation for non-nullable types,\nwhich will arrive in a future version. In anticipation of that, we have made a\nnumber of small but technically breaking changes to several core library APIs in\norder to make them easier to use in a world with non-nullable types. Almost all\nexisting Dart code will be unaffected by these changes, but if you see\nunexpected failures, note the breaking changes listed below.\n\n### Language\n\nThere are no new language features in this release. There are only two minor\nbreaking changes:\n\n- **Breaking change** [#40675][]: Fixed an implementation bug where local\n  variable inference would incorrectly use the promoted type of a type variable.\n\n- **Breaking change** [#41362][]: Dart 2.0.0 made the clauses\n  `implements Function`, `extends Function`, or `with Function` have no effect\n  (spec section 19.6). We fixed an implementation bug that may be visible on\n  some rare scenarios.\n\n[#40675]: https://github.com/dart-lang/sdk/issues/40675\n[#41362]: https://github.com/dart-lang/sdk/issues/41362\n\n### Core libraries\n\n#### `dart:async`\n\n- **Breaking change** [#40676][]: Changed the return type of\n  `StreamSubscription.cancel()` to `Future<void>`. Previously, it was declared\n  to return `Future` and was allowed to return `null` at runtime.\n\n- **Breaking change** [#40681][]: The `runZoned()` function is split into two\n  functions: `runZoned()` and `runZonedGuarded()`, where the latter has a\n  required `onError` parameter, and the former has none. This prepares the\n  functions for null safety where the two functions will differ in the\n  nullability of their return types.\n\n- **Breaking change** [#40683][]: Errors passed to `Completer.completeError()`,\n  `Stream.addError()`, `Future.error()`, etc. can no longer be `null`. These\n  operations now _synchronously_ throw an exception if passed a `null` error.\n\n- Make stack traces non-null [#40130][]. Where methods like\n  `completer.completeError()` allow omitting a stack trace, the platform will\n  now insert a default stack trace rather than propagate a `null` value.\n\n  Error handling functions need no longer be prepared for `null` stack traces.\n\n[#40676]: https://github.com/dart-lang/sdk/issues/40676\n[#40681]: https://github.com/dart-lang/sdk/issues/40681\n[#40683]: https://github.com/dart-lang/sdk/issues/40683\n[#40130]: https://github.com/dart-lang/sdk/issues/40130\n\n#### `dart:core`\n\n- **Breaking change** [#40674][]: Three members on `RuneIterator` no longer\n  return `null` when accessed before the first call to `moveNext()`. Instead,\n  `current` and `rawIndex` return `-1` and `currentAsString` returns an empty\n  string.\n\n- **Breaking change** [#40678][]: The `String.fromEnvironment()` default value\n  for `defaultValue` is now an empty string instead of `null`. Likewise, the\n  default value for `int.fromEnvironment()`'s `defaultValue` parameter is zero.\n  Under null safety, a constructor cannot return `null`, so this prepares these\n  APIs for that.\n\n- The class `CastError` is deprecated, and all implementation specific classes\n  implementing `TypeError` or `CastError` now implement both. In a future\n  release, `CastError` will be removed. See issue [40763][] for details.\n\n- Adds `StackTrace.empty` constant which is the stack trace used as default\n  stack trace when no better alternative is available.\n\n- The class `TypeError` no longer extends `AssertionError`. This also means that\n  it no longer inherits the spurious `message` getter which was added to\n  `AssertionError` when the second operand to `assert` was allowed. The value of\n  that getter on a `TypeError` was the same string as returned by `toString()`,\n  so it is still available.\n\n- `ArgumentError.checkNotNull()` and the `RangeError` static methods\n  `checkValueInInterval()`, `checkValidIndex()` and `checkNotNegative()` all\n  return their first argument on success. This makes these functions more\n  convenient to use in-line in, for example, `=>` function bodies or constructor\n  initialization lists.\n\n[#40674]: https://github.com/dart-lang/sdk/issues/40674\n[#40678]: https://github.com/dart-lang/sdk/issues/40678\n[40763]: https://github.com/dart-lang/sdk/issues/40763\n\n#### `dart:developer`\n\n- The constructors for `TimelineTask` now accept an optional `filterKey`\n  parameter. If provided, the arguments for all events associated with the task\n  will contain an entry named `filterKey`, set to the value of the `filterKey`\n  parameter provided in the constructor. This will be used by tooling to allow\n  for better filtering of timeline events.\n\n#### `dart:ffi`\n\n- **Breaking change**: Changed `Pointer.asFunction()` and\n  `DynamicLibrary.lookupFunction()` to extension methods. Invoking them\n  dynamically previously already threw an exception, so the runtime behavior\n  stays the same. However, the extension methods are only visible if `dart:ffi`\n  is imported directly. This breaks code where `dart:ffi` is not directly\n  imported. To fix, add:\n\n  ```dart\n  import 'dart:ffi';\n  ```\n\n#### `dart:html`\n\n- **Breaking change** [#39627][]: Changed the return type of several HTML native\n  methods involving futures. In return types that matched `Future<List<T>>`,\n  `T was` changed to `dynamic`. These methods would have resulted in a runtime\n  error if they were used.\n\n- **Breaking change**: `Node.insertAllBefore()` erroneously had a return type of\n  `Node`, even though it was not returning anything. This has been corrected to\n  `void`.\n\n[#39627]: https://github.com/dart-lang/sdk/issues/39627\n\n#### `dart:io`\n\n- Class `HttpParser` will no longer throw an exception when a HTTP response\n  status code is within [0, 999]. Customized status codes in this range are now\n  valid.\n\n- **Breaking change** [#33501][]: The signature of `HttpHeaders` methods `add()`\n  and `set` have been changed to:\n\n  ```dart\n  void add(String name, Object value, {bool preserveHeaderCase: false})\n  void set(String name, Object value, {bool preserveHeaderCase: false})\n  ```\n\n  Setting `preserveHeaderCase` to `true` preserves the case of the `name`\n  parameter instead of converting it to lowercase. The `HttpHeader.forEach()`\n  method provides the current case of each header.\n\n  This is breaking only for classes extending or implementing `HttpHeaders` and\n  having their own `add` or `set` methods without the `bool preserveHeaderCase`\n  named parameter.\n\n- **Breaking change** [#40702][]: The `Socket` class now throws a\n  `SocketException` if the socket has been explicitly destroyed or upgraded to a\n  secure socket upon setting or getting socket options. Previously, setting a\n  socket option would be ignored and getting a socket option would return\n  `null`.\n\n- **Breaking change** [#40483][]: The `Process` class now throws a `StateError`\n  if the process is detached (`ProcessStartMode.detached` and\n  `ProcessStartMode.detachedWithStdio`) upon accessing the `exitCode` getter. It\n  now also throws when not connected to the child process's stdio\n  (`ProcessStartMode.detached` and `ProcessStartMode.inheritStdio`) upon\n  accessing the `stdin`, `stdout`, and `stderr` getters. Previously, these\n  getters would all return `null`.\n\n- **Breaking change** [#40706][]: The dummy object returned if `FileStat.stat()`\n  or `FileStat.statSync()` fail now contains Unix epoch timestamps instead of\n  `null` for the `accessed`, `changed`, and `modified` getters.\n\n- **Breaking change** [#40709][]: The `HeaderValue` class now parses more\n  strictly in two invalid edge cases. This is the class used to parse the\n  semicolon delimited parameters used in the `Accept`, `Authorization`,\n  `Content-Type`, and other such HTTP headers.\n\n  The empty parameter value without double quotes (which is not allowed by the\n  standards) is now parsed as the empty string rather than `null`. E.g.\n  `HeaderValue.parse(\"v;a=\").parameters` now gives `{\"a\": \"\"}` rather than\n  `{\"a\": null}`.\n\n  Invalid inputs with unbalanced double quotes are now rejected. E.g.\n  `HeaderValue.parse('v;a=\"b').parameters` will now throw a `HttpException`\n  instead of giving `{\"a\": \"b\"}`.\n\n- The `HeaderValue.toString()` method now supports parameters with `null` values\n  by omitting the value. `HeaderValue(\"v\", {\"a\": null, \"b\": \"c\"}).toString()`\n  now gives `v; a; b=c`. This behavior can be used to implement some features in\n  the `Accept` and `Sec-WebSocket-Extensions` headers.\n\n  Likewise the empty value and values using characters outside of [RFC 7230\n  tokens][] are now correctly implemented by double quoting such values with\n  escape sequences. For example:\n\n  ```dart\n  HeaderValue(\"v\",\n      {\"a\": \"A\", \"b\": \"(B)\", \"c\": \"\", \"d\": \"ø\", \"e\": \"\\\\\\\"\"}).toString()\n  ```\n\n  Gives: `v;a=A;b=\"(B)\";c=\"\";d=\"ø\";e=\"\\\\\\\"\"`.\n\n- [Unix domain sockets][] are now supported on Linux, Android and MacOS, which\n  can be used by passing a `InternetAddress` of `InternetAddressType.Unix` into\n  the `connect()`, `startConnect()` and `bind()` methods. The `port` argument in\n  those methods will be ignored. The `port` getter always returns 0 for Unix\n  domain sockets.\n\n- Class `InternetAddressType` gains one more option `Unix`, which represents a\n  Unix domain address.\n\n- Class `InternetAddress`:\n\n  - `InternetAddress` constructor gains an optional `type` parameter. To create\n    a Unix domain address, `type` is set to `InternetAddressType.Unix` and\n    `address` is a file path.\n\n  - `InternetAddress` gains a new constructor `fromRawAddress()` that takes an\n    address in byte format for Internet addresses or raw file path for Unix\n    domain addresses.\n\n- **Breaking change** [#40681][]: The static methods `runZoned()` and\n  `runWithHttpOverrides()` on `HttpOverrides` no longer accept\n  `zoneSpecification` and `onError` parameters. Use the `runZoned()` or\n  `runZonedGuarded()` functions from `dart:async` directly if needing to specify\n  those.\n\n- Class `HttpClient` and `HttpServer`, when receiving `HttpRequest` or\n  `HttpClientResponse`, will now put a 8K size limit on its header fields and\n  values.\n\n[#33501]: https://github.com/dart-lang/sdk/issues/33501\n[#40702]: https://github.com/dart-lang/sdk/issues/40702\n[#40483]: https://github.com/dart-lang/sdk/issues/40483\n[#40706]: https://github.com/dart-lang/sdk/issues/40706\n[#40709]: https://github.com/dart-lang/sdk/issues/40709\n[rfc 7230 tokens]: https://tools.ietf.org/html/rfc7230#section-3.2.6\n[unix domain sockets]: https://en.wikipedia.org/wiki/Unix_domain_socket\n\n#### `dart:mirrors`\n\n- Added `MirrorSystem.neverType`.\n\n### Dart VM\n\n- Added `Dart_TypeDynamic`, `Dart_TypeVoid` and `Dart_TypeNever`. Type `dynamic`\n  can no longer by reached using `Dart_GetType(dart:core, dynamic)`.\n\n- Added the following methods to the VM embedding API:\n\n  - `Dart_GetNonNullableType()`\n  - `Dart_GetNullableType()`\n  - `Dart_TypeToNonNullable()`\n  - `Dart_TypeToNullable()`\n  - `Dart_IsLegacyType()`\n  - `Dart_IsNonNullableType()`\n  - `Dart_IsNullableType()`\n\n### Tools\n\n#### Dart Dev Compiler (DDC)\n\nWe fixed several inconsistencies between DDC and Dart2JS so that users less\nfrequently encounter code that is accepted by one compiler but then fails in the\nother.\n\n- **Breaking change**: Deleted the legacy (analyzer based) version of DDC. For\n  additional details see the [announcement][ddc].\n\n  - The `--kernel` option is now ignored and defaults to true. There is no\n    longer any way to invoke the legacy (analyzer based) version of DDC.\n\n  - Command line arguments that were only used for the legacy DDC have been\n    removed.\n\n  - The pre-compiled `dart_sdk.js` artifacts generated by legacy DDC have been\n    deleted from `dart-sdk/lib/dev_compiler` in favor of the versions located at\n    `dart-sdk/lib/dev_compiler/kernel`.\n\n- **Breaking change**: Functions passed to JavaScript using the recommended\n  `package:js` interop specification must now be wrapped with a call to\n  `allowInterop`. This behavior was always enforced by Dart2JS, but was not\n  enforced consistently by DDC. It is now enforced by both.\n\n- **Breaking change**: Constructors in `@JS()` classes must be marked with\n  `external`. Previously the `external` could be omitted in some cases with DDC\n  but doing so would cause incorrect behavior with Dart2JS.\n\n- JS interop classes with an index operator are now static errors.\n\n- All remaining support from the `dart:mirrors` library has been removed. Use of\n  this library on the web has been unsupported and prevented by the Dart build\n  systems since Dart v2.0.0. All known exception cases have been cleaned up.\n  This change makes DDC and Dart2JS now behave consistently.\n\n  The library can still be imported on web apps, but all APIs throw. In a future\n  breaking change release, imports to this library will likely become a\n  compile-time error.\n\n[ddc]: https://github.com/dart-lang/sdk/issues/38994\n\n#### Dart2JS\n\nA new representation of runtime types is enabled by default.\n\nThis change is part of a long term goal of making runtime checks cheaper and\nmore flexible for upcoming changes in the language. The new representation\ndisentangles how types and classes are represented and makes types first-class\nto the compiler. This makes it possible to do certain kind of optimizations on\ntype checks that were not possible before and will enable us to model\nnon-nullable types in the near future.\n\nThis change should not affect the semantics of your application, but it has some\nrelatively small visible effects that we want to highlight:\n\n- Types are now canonicalized, this fixes a long standing bug that Types could\n  not be used in switch cases (issue [17207][]).\n\n- Code-size changes may be visible, but the difference is small overall. It is\n  more visible on smaller apps because the new implementation includes more\n  helper methods. On large apps we have even seen an overall code-size\n  reduction.\n\n- Certain checks are a lot faster. This is less noticeable if you are compiling\n  apps with `-O3` where checks are omitted altogether. Even with `-O3`, the\n  performance of some `is` checks used by your app may improve.\n\n- When using `-O3` and `-O4` incorrect type annotations could surface as errors.\n  The old type representation was accidentally lenient on some invalid type\n  annotations. We have only encountered this issue on programs that were not\n  tested properly at the js-interop program boundary.\n\n- `Type.toString()` has a small change that is rarely visible. For a long time,\n  Dart2JS has had support to erase unused type variables. Today, when Dart2JS is\n  given `--lax-runtime-type-to-string` (currently included in `-O2`, `-O3`, and\n  `-O4`) and it decides to erase the type variable of a class `Foo<T>`, then it\n  compiles expressions like `foo.runtimeType.toString()` to print `Foo`. With\n  the new representation, this will show `Foo<erased>` instead. This change may\n  be visible in error messages produced by type checks involving erased types.\n\nBecause types and classes are represented separately, we will likely reevaluate\nrestrictions of deferred libraries in the near future. For example, we could\nsupport referring to deferred types because types can be downloaded while\nclasses are not.\n\nIn the unlikely case you run into any issues, please file a bug so we can\ninvestigate. You can temporarily force the old type representation by passing\n`--use-old-rti` to Dart2JS if necessary, but our goal is to delete the old type\nrepresentation soon.\n\nIn addition, we fixed some inconsistencies between Dart2JS and DDC:\n\n- JS interop classes with an index operator are now static errors instead of\n  causing invalid code in Dart2JS.\n\n- **Breaking change**: The subtyping rule for generic functions is now more\n  forgiving. Corresponding type parameter bounds now only need to be mutual\n  subtypes rather than structurally equal up to renaming of bound type variables\n  and equating all top types.\n\n- **Breaking change**: Types are now normalized. See [normalization][] for the\n  full specification. Types will now be printed in their normal form, and mutual\n  subtypes with the same normal form will now be considered equal.\n\n- **Breaking change**: Constructors in `@JS()` classes must be marked with\n  `external`. Previously, the external could be omitted for unused constructors.\n  Omitting `external` for a constructor which is used would cause incorrect\n  behavior at runtime, now omitting it on any constructor is a static error.\n\n[17207]: https://github.com/dart-lang/sdk/issues/17207\n[normalization]:\n  https://github.com/dart-lang/language/blob/master/resources/type-system/normalization.md\n\nOther dart2js changes:\n\n- **Breaking change**: The `--package-root` flag, which was hidden and disabled\n  in Dart 2.0.0, has been completely removed. Passing this flag will now cause\n  `dart2js` to fail.\n\n#### Linter\n\nUpdated the Linter to `0.1.114`, which includes:\n\n- Fixed `avoid_shadowing_type_parameters` to support extensions and mixins.\n- Updated `non_constant_identifier_names` to allow named constructors made up of\n  only underscores (`_`).\n- Updated `avoid_unused_constructor_parameters` to ignore unused params named in\n  all underscores (`_`).\n\n#### Analyzer\n\n- Removed support for the deprecated analysis options file name\n  `.analysis_options`.\n\n#### Pub\n\n- Added `pub outdated` command which lists outdated package dependencies, and\n  gives advice on how to upgrade.\n\n- `pub get` and `pub upgrade` now fetch version information about hosted\n  dependencies in parallel, improving the time package resolution performance.\n\n- `pub get` and `pub upgrade` no longer precompile executables from dependencies\n  by default. Instead they are precompiled on first `pub run`. Use\n  `pub get --precompile` to get the previous behavior.\n\n- Fixed missing retries of DNS failures during `pub get`.\n\n- If code contains imports for packages not listed in the package's\n  `pubspec.yaml` then `pub publish` will reject the package.\n\n- `pub publish` no longer requires the presence of a `homepage` field, if the\n  `repository` field is provided.\n\n- `pub publish` warns if non-pre-release packages depends on pre-release\n  packages or pre-release Dart SDKs.\n\n- Relative paths in `pubspec.lock` now use `/` also on Windows to make the file\n  sharable between machines.\n\n- Fixed language version in [`.dart_tool/package_config.json`][package config]\n  for packages without an explicit SDK constraint. Pub now writes an empty\n  language version where before the language version of the current SDK would be\n  used.\n\n- `%LOCALAPPDATA%` is now preferred over `%APPDATA%` when creating a pub cache\n  directory on Windows. `%LOCALAPPDATA%` is not copied when users roam between\n  devices.\n\n- `pub publish` warns if LICENSE and README.md files are not called those exact\n  names.\n\n- `pub repair cache` downloads hosted packages in parallel.\n\n[package config]:\n  https://github.com/dart-lang/language/blob/master/accepted/future-releases/language-versioning/package-config-file-v2.md\n\n## 2.7.2 - 2020-03-23\n\n**Security advisory**: This is a patch release that addresses a vulnerability in\n`dart:html` [NodeValidator][] related to DOM clobbering of `previousSibling`.\nSee the security advisory [CVE-2020-8923][cve-2020-8923] for more details.\nThanks to **Vincenzo di Cicco** for finding and reporting this issue.\n\nThis release also improves compatibility with ARMv8 processors (issue [40001][])\nand dart:io stability (issue [40589][]).\n\n[nodevalidator]: https://api.dart.dev/dart-html/NodeValidator-class.html\n[cve-2020-8923]:\n  https://github.com/dart-lang/sdk/security/advisories/GHSA-hfq3-v9pv-p627\n[40001]: https://github.com/dart-lang/sdk/issues/40001\n[40589]: https://github.com/dart-lang/sdk/issues/40589\n\n## 2.7.1 - 2020-01-23\n\nThis is a patch release that improves dart2js compile-time (issue [40217][]).\n\n[40217]: https://github.com/dart-lang/sdk/issues/40217\n\n**Breaking change**: The Dart SDK for macOS is now only available for x64 (issue\n[39810][]).\n\n[39810]: https://github.com/dart-lang/sdk/issues/39810\n\n## 2.7.0 - 2019-12-11\n\n**Extension methods** -- which we shipped in preview in 2.6.0 -- are no longer\nin preview, and are now officially supported as of 2.7.0. Learn more about them\nhere:\n\nhttps://medium.com/dartlang/extension-methods-2d466cd8b308\n\n### Language\n\n- **Breaking change**: [Static extension members][] are accessible when imported\n  with a prefix (issue [671][]). In the extension method **preview** launch,\n  importing a library with a prefix hid all extension members in addition to\n  hiding the extension name, thereby making them inaccessible in the importing\n  library except via the explicit override syntax. Based on user feedback, we\n  have changed this to make extensions methods accessible even when imported\n  with a prefix.\n\n      ```dart\n        // \"thing.dart\"\n        class Thing {\n        }\n        extension Show on Thing {\n          void show() {\n            print(\"This is a thing\");\n          }\n       }\n       // \"client.dart\"\n       import \"thing.dart\" as p;\n       void test() {\n         p.Thing().show(); // Previously an error, now resolves to Show.show\n       }\n      ```\n\n[static extension members]:\n  https://github.com/dart-lang/language/blob/master/accepted/2.6/static-extension-members/feature-specification.md\n[671]: https://github.com/dart-lang/language/issues/671\n\n### Core libraries\n\n#### `dart:io`\n\n- **Breaking change**: Added `IOOverrides.serverSocketBind` to aid in writing\n  tests that wish to mock `ServerSocket.bind`.\n\n#### `dart:typed_data`\n\n- Added new constructors, `.sublistView(TypedData, [start, end])` to all\n  `TypedData` classes. The constructor makes it easier, and less error-prone, to\n  create a view of (a slice of) another `TypedData` object.\n\n### Dart VM\n\n- New fields added to existing instances by a reload will now be initialized\n  lazily, as if the field was a late field. This makes the initialization order\n  program-defined, whereas previously it was undefined.\n\n### Tools\n\n#### Linter\n\nThe Linter was updated to `0.1.104`, which includes:\n\n- updated `unnecessary_overrides` to allow overrides when annotations (besides\n  `@override` are specified)\n- updated `file_names` to allow names w/ leading `_`'s (and improved\n  performance)\n- new lint: `unnecessary_final`\n\n#### Pub\n\n- `pub get` generates\n  [`.dart_tool/package_config.json`](https://github.com/dart-lang/language/blob/62c036cc41b10fb543102d2f73ee132d1e2b2a0e/accepted/future-releases/language-versioning/package-config-file-v2.md)\n  in addition to `.packages` to support language versioning.\n\n- `pub publish` now warns about the old flutter plugin registration format.\n\n- `pub publish` now warns about the `author` field in pubspec.yaml being.\n  obsolete.\n\n- Show a proper error message when `git` is not installed.\n\n## 2.6.1 - 2019-11-11\n\nThis is a patch release that reduces dart2js memory usage (issue [27883][]),\nimproves stability on arm64 (issue [39090][]) and updates the Dart FFI\ndocumentation.\n\n[27883]: https://github.com/dart-lang/sdk/issues/27883\n[39090]: https://github.com/dart-lang/sdk/issues/39090\n\n## 2.6.0 - 2019-11-05\n\n### Language\n\n- **[IN PREVIEW]** [Static extension members][]: A new language feature allowing\n  specially declared static functions to be invoked like instance members on\n  expressions of appropriate static types is available in preview.\n\n  Static extension members are declared using a new `extension` declaration.\n  Example:\n\n  ```dart\n  extension MyFancyList<T> on List<T> {\n    /// Whether this list has an even length.\n    bool get isLengthEven => this.length.isEven;\n\n    /// Whether this list has an odd length.\n    bool get isLengthOdd => !isLengthEven;\n\n    /// List of values computed for each pairs of adjacent elements.\n    ///\n    /// The result always has one element less than this list,\n    /// if this list has any elements.\n    List<R> combinePairs<R>(R Function(T, T) combine) =>\n        [for (int i = 1; i < this.length; i++)\n            combine(this[i - 1], this[i])];\n  }\n  ```\n\n  Extension declarations cannot declare instance fields or constructors.\n  Extension members can be invoked explicitly,\n  `MyFancyList(intList).isLengthEven)`, or implicitly, `intList.isLengthEven`,\n  where the latter is recognized by `intList` matching the `List<T>` \"on\" type\n  of the declaration. An extension member cannot be called implicitly on an\n  expression whose static type has a member with the same base-name. In that\n  case, the interface member takes precedence. If multiple extension members\n  apply to the same implicit invocation, the most specific one is used, if there\n  is one such.\n\n  Extensions can be declared on any type, not just interface types.\n\n  ```dart\n  extension IntCounter on int {\n    /// The numbers from this number to, but not including, [end].\n    Iterable<int> to(int end) sync* {\n      int step = end < this ? -1 : 1;\n      for (int i = this; i != end; i += step) yield i;\n    }\n  }\n\n  extension CurryFunction<R, S, T> on R Function(S, T) {\n    /// Curry a binary function with its first argument.\n    R Function(T) curry(S first) => (T second) => this(first, second);\n  }\n  ```\n\n  [static extension members]:\n    https://github.com/dart-lang/language/blob/master/accepted/2.6/static-extension-members/feature-specification.md\n\n- **Breaking change** [#37985](https://github.com/dart-lang/sdk/issues/37985):\n  Inference is changed when using `Null` values in a `FutureOr` context. Namely,\n  constraints of the forms similar to `Null` <: `FutureOr<T>` now yield `Null`\n  as the solution for `T`. For example, the following code will now print\n  \"Null\", and it was printing \"dynamic\" before (note that the anonymous closure\n  `() {}` in the example has `Null` as its return type):\n\n  ```dart\n  import 'dart:async';\n\n  void foo<T>(FutureOr<T> Function() f) { print(T); }\n\n  main() { foo(() {}); }\n  ```\n\n### Core libraries\n\n- Default values of parameters of abstract methods are no longer available via\n  `dart:mirrors`.\n\n#### `dart:developer`\n\n- Added optional `parent` parameter to `TimelineTask` constructor to allow for\n  linking of asynchronous timeline events in the DevTools timeline view.\n\n#### `dart:ffi`\n\n- **Breaking change**: The API now makes use of static extension members. Static\n  extension members enable the `dart:ffi` API to be more precise with types, and\n  provide convenient access to memory through extension getters and setters. The\n  extension members on `Pointer` provide `.value` and `.value =` for accessing\n  the value in native memory and `[]` and `[]=` for indexed access. The method\n  `asExternalTypedData` has been replaced with `asTypedList` extension methods.\n  And finally, `Structs` do no longer have a type argument and are accessed\n  using the extension member `.ref` on `Pointer`. These changes makes the code\n  using `dart:ffi` much more concise.\n- **Breaking change**: The memory management has been removed\n  (`Pointer.allocate` and `Pointer.free`). Instead, memory management is\n  available in [package:ffi](https://pub.dev/packages/ffi).\n- **Breaking change**: `Pointer.offsetBy` was removed, use `cast` and\n  `elementAt` instead.\n- Faster memory load and stores.\n- The dartanalyzer (commandline and IDEs) now reports `dart:ffi` static errors.\n- Callbacks are now supported in AOT (ahead-of-time) compiled code.\n\n#### `dart:io`\n\n- Added `enableTimelineLogging` property to `HttpClient` which, when enabled,\n  will post HTTP connection and request information to the developer timeline\n  for all `HttpClient` instances.\n\n### Dart VM\n\n- Added a new tool for AOT compiling Dart programs to native, self-contained\n  executables. See https://dart.dev/tools/dart2native for additional details.\n\n### Dart for the Web\n\n#### Dart Dev Compiler (DDC)\n\n- Kernel DDC will no longer accept non-dill files as summary inputs.\n- Removed support for the deprecated web extension.\n\n### Tools\n\n#### Linter\n\nThe Linter was updated to `0.1.101`, which includes:\n\n- fixed `diagnostic_describe_all_properties` to flag properties in\n  `Diagnosticable`s with no debug methods defined\n- fixed `noSuchMethod` exception in `camel_case_extensions` when analyzing\n  unnamed extensions\n- fixed `avoid_print` to catch tear-off usage\n- new lint: `avoid_web_libraries_in_flutter` (experimental)\n- (internal) prepare `unnecessary_lambdas` for coming `MethodInvocation` vs.\n  `FunctionExpressionInvocation` changes\n\n## 2.5.2 - 2019-10-08\n\nThis is a patch release with properly signed binaries required for macOS\nCatalina (Issue [38765][]).\n\n[38765]: https://github.com/dart-lang/sdk/issues/38765\n\n## 2.5.1 - 2019-09-27\n\nThis is a patch release that prevents type inference failures in the analyzer\n(Issue [38365][]).\n\n[38365]: https://github.com/dart-lang/sdk/issues/38365\n\n## 2.5.0 - 2019-09-10\n\n### Language\n\nThe set of operations allowed in constant expressions has been expanded as\ndescribed in the\n[constant update proposal](https://github.com/dart-lang/language/issues/61). The\ncontrol flow and spread collection features shipped in Dart 2.3 are now also\nsupported in constants as\n[described in the specification here](https://github.com/dart-lang/language/blob/master/accepted/2.3/unified-collections/feature-specification.md#constant-semantics).\n\nSpecifically, it is now valid to use the following operations in constant\nexpressions under the appropriate conditions:\n\n- Casts (`e as T`) and type tests (`e is T`).\n- Comparisons to `null`, even for types which override the `==` operator.\n- The `&`, `|`, and `^` binary operators on booleans.\n- The spread operators (`...` and `...?`).\n- An `if` element in a collection literal.\n\n```dart\n// Example: these are now valid constants.\nconst Object i = 3;\nconst list = [i as int];\nconst set = {if (list is List<int>) ...list};\nconst map = {if (i is int) i : \"int\"};\n```\n\nIn addition, the semantics of constant evaluation has been changed as follows:\n\n- The `&&` operator only evaluates its second operand if the first evaluates to\n  true.\n- The `||` operator only evaluates its second operand if the first evaluates to\n  false.\n- The `??` operator only evaluates its second operand if the first evaluates to\n  null.\n- The conditional operator (`e ? e1 : e2`) only evaluates one of the two\n  branches, depending on the value of the first operand.\n\n```dart\n// Example: x is now a valid constant definition.\nconst String s = null;\nconst int x = (s == null) ? 0 : s.length;\n```\n\n### Core libraries\n\n- **Breaking change** [#36900](https://github.com/dart-lang/sdk/issues/36900):\n  The following methods and properties across various core libraries, which used\n  to declare a return type of `List<int>`, were updated to declare a return type\n  of `Uint8List`:\n\n  - `BytesBuilder.takeBytes()`\n  - `BytesBuilder.toBytes()`\n  - `Datagram.data`\n  - `File.readAsBytes()` (`Future<Uint8List>`)\n  - `File.readAsBytesSync()`\n  - `InternetAddress.rawAddress`\n  - `RandomAccessFile.read()` (`Future<Uint8List>`)\n  - `RandomAccessFile.readSync()`\n  - `RawSocket.read()`\n  - `Utf8Codec.encode()` (and `Utf8Encoder.convert()`)\n\n  In addition, the following classes were updated to implement\n  `Stream<Uint8List>` rather than `Stream<List<int>>`:\n\n  - `HttpRequest`\n  - `Socket`\n\n  **Possible errors and how to fix them**\n\n  - > The argument type 'Utf8Decoder' can't be assigned to the parameter type\n    > 'StreamTransformer<Uint8List, dynamic>'\n\n    > type 'Utf8Decoder' is not a subtype of type 'StreamTransformer' of\n    > 'streamTransformer'\"\n\n    You can fix these call sites by updating your code to use\n    `StreamTransformer.bind()` instead of `Stream.transform()`, like so:\n\n    _Before:_ `stream.transform(utf8.decoder)` _After:_\n    `utf8.decoder.bind(stream)`\n\n  - > The argument type 'IOSink' can't be assigned to the parameter type\n    > 'StreamConsumer<Uint8List>'\n\n    > type '\\_IOSinkImpl' is not a subtype of type 'StreamConsumer<Uint8List>'\n    > of 'streamConsumer'\n\n    You can fix these call sites by casting your stream instance to a\n    `Stream<List<int>>` before calling `.pipe()` on the stream, like so:\n\n    _Before:_ `stream.pipe(consumer)` _After:_\n    `stream.cast<List<int>>().pipe(consumer)`\n\n  Finally, the following typed lists were updated to have their `sublist()`\n  methods declare a return type that is the same as the source list:\n\n  - `Int8List.sublist()` → `Int8List`\n  - `Int16List.sublist()` → `Int16List`\n  - `Int32List.sublist()` → `Int32List`\n  - `Int64List.sublist()` → `Int64List`\n  - `Int32x4List.sublist()` → `Int32x4List`\n  - `Float32List.sublist()` → `Float32List`\n  - `Float64List.sublist()` → `Float64List`\n  - `Float32x4List.sublist()` → `Float32x4List`\n  - `Float64x2List.sublist()` → `Float64x2List`\n  - `Uint8List.sublist()` → `Uint8List`\n  - `Uint8ClampedList.sublist()` → `Uint8ClampedList`\n  - `Uint16List.sublist()` → `Uint16List`\n  - `Uint32List.sublist()` → `Uint32List`\n  - `Uint64List.sublist()` → `Uint64List`\n\n#### `dart:async`\n\n- Add `value` and `error` constructors on `Stream` to allow easily creating\n  single-value or single-error streams.\n\n#### `dart:core`\n\n- Update `Uri` class to support [RFC6874](https://tools.ietf.org/html/rfc6874):\n  \"%25\" or \"%\" can be appended to the end of a valid IPv6 representing a Zone\n  Identifier. A valid zone ID consists of unreversed character or Percent\n  encoded octet, which was defined in RFC3986. IPv6addrz = IPv6address \"%25\"\n  ZoneID\n\n  [29456]: https://github.com/dart-lang/sdk/issues/29456\n\n#### `dart:io`\n\n- **Breaking change** [#37192](https://github.com/dart-lang/sdk/issues/37192):\n  The `Cookie` class's constructor's `name` and `value` optional positional\n  parameters are now mandatory. The signature changes from:\n\n      Cookie([String name, String value])\n\n  to\n\n      Cookie(String name, String value)\n\n  However, it has not been possible to set `name` and `value` to null since Dart\n  1.3.0 (2014) where a bug made it impossible. Any code not using both\n  parameters or setting any to null would necessarily get a noSuchMethod\n  exception at runtime. This change catches such erroneous uses at compile time.\n  Since code could not previously correctly omit the parameters, this is not\n  really a breaking change.\n\n- **Breaking change** [#37192](https://github.com/dart-lang/sdk/issues/37192):\n  The `Cookie` class's `name` and `value` setters now validates that the strings\n  are made from the allowed character set and are not null. The constructor\n  already made these checks and this fixes the loophole where the setters didn't\n  also validate.\n\n### Dart VM\n\n### Tools\n\n#### Pub\n\n- Clean-up invalid git repositories in cache when fetching from git.\n- **Breaking change** [#36765](https://github.com/dart-lang/sdk/issues/36765):\n  Packages published to [pub.dev](https://pub.dev) can no longer contain git\n  dependencies. These packages will be rejected by the server.\n\n#### Linter\n\nThe Linter was updated to `0.1.96`, which includes:\n\n- fixed false positives in `unnecessary_parens`\n- various changes to migrate to preferred analyzer APIs\n- rule test fixes\n\n#### Dartdoc\n\nDartdoc was updated to `0.28.4`; this version includes several fixes and is\nbased on a newer version of the analyzer package.\n\n## 2.4.1 - 2019-08-07\n\nThis is a patch release that fixes a performance regression in JIT mode, as well\nas a potential crash of our AOT compiler.\n\n### Dart VM\n\n- Fixed a performance regression where usage of `Int32List` could trigger\n  repeated deoptimizations in JIT mode (Issue [37551][]).\n\n- Fixed a bug where usage of a static getter with name `length` could cause a\n  crash in our AOT compiler (Issue [35121][]).\n\n[37551]: https://github.com/dart-lang/sdk/issues/37551\n[35121]: https://github.com/dart-lang/sdk/issues/35121\n\n### Dart Dev Compiler (DDC)\n\nCallbacks passed to JS and wrapped with `allowInterop` or\n`allowInteropCaptureThis` are now strict about argument counts and argument\ntypes. This may mean that tests which were previously passing and relying on\nloose argument checking (too many or too few arguments, or arguments with too\nspecific types like `List<Something>` instead of `List<dynamic>`) may start\nfailing. This changes makes DDC behave more like dart2js with the default flags.\n\n## 2.4.0 - 2019-06-27\n\n### Core libraries\n\n#### `dart:isolate`\n\n- `TransferableTypedData` class was added to facilitate faster cross-isolate\n  communication of `Uint8List` data.\n\n- **Breaking change**: `Isolate.resolvePackageUri` will always throw an\n  `UnsupportedError` when compiled with dart2js or DDC. This was the only\n  remaining API in `dart:isolate` that didn't automatically throw since we\n  dropped support for this library in [Dart 2.0.0][1]. Note that the API already\n  throws in dart2js if the API is used directly without manually setting up a\n  `defaultPackagesBase` hook.\n\n[1]: https://github.com/dart-lang/sdk/blob/main/CHANGELOG.md#200---2018-08-07\n\n#### `dart:developer`\n\n- Exposed `result`, `errorCode` and `errorDetail` getters in\n  `ServiceExtensionResponse` to allow for better debugging of VM service\n  extension RPC results.\n\n#### `dart:io`\n\n- Fixed `Cookie` class interoperability with certain websites by allowing the\n  cookie values to be the empty string (Issue [35804][]) and not stripping\n  double quotes from the value (Issue [33327][]) in accordance with RFC 6265.\n\n  [33327]: https://github.com/dart-lang/sdk/issues/33327\n  [35804]: https://github.com/dart-lang/sdk/issues/35804\n\n- [#36971](https://github.com/dart-lang/sdk/issues/36971): The\n  `HttpClientResponse` interface has been extended with the addition of a new\n  `compressionState` getter, which specifies whether the body of a response was\n  compressed when it was received and whether it has been automatically\n  uncompressed via `HttpClient.autoUncompress`.\n\n  As part of this change, a corresponding new enum was added to `dart:io`:\n  `HttpClientResponseCompressionState`.\n\n  This is a **breaking change** for those implementing the `HttpClientResponse`\n  interface as subclasses will need to implement the new getter.\n\n#### `dart:async`\n\n- **Breaking change** [#36382](https://github.com/dart-lang/sdk/issues/36382):\n  The `await for` allowed `null` as a stream due to a bug in `StreamIterator`\n  class. This bug has now been fixed.\n\n#### `dart:core`\n\n- [#36171](https://github.com/dart-lang/sdk/issues/36171): The `RegExp`\n  interface has been extended with two new constructor named parameters:\n\n  - `unicode:` (`bool`, default: `false`), for Unicode patterns\n  - `dotAll:` (`bool`, default: `false`), to change the matching behavior of '.'\n    to also match line terminating characters.\n\n  Appropriate properties for these named parameters have also been added so\n  their use can be detected after construction.\n\n  In addition, `RegExp` methods that originally returned `Match` objects now\n  return a more specific subtype, `RegExpMatch`, which adds two features:\n\n  - `Iterable<String> groupNames`, a property that contains the names of all\n    named capture groups\n  - `String namedGroup(String name)`, a method that retrieves the match for the\n    given named capture group\n\n  This is a **breaking change** for implementers of the `RegExp` interface.\n  Subclasses will need to add the new properties and may have to update the\n  return types on overridden methods.\n\n### Language\n\n- **Breaking change** [#35097](https://github.com/dart-lang/sdk/issues/35097):\n  Covariance of type variables used in super-interfaces is now enforced. For\n  example, the following code was previously accepted and will now be rejected:\n\n```dart\nclass A<X> {};\nclass B<X> extends A<void Function(X)> {};\n```\n\n- The identifier `async` can now be used in asynchronous and generator\n  functions.\n\n### Dart for the Web\n\n#### Dart Dev Compiler (DDC)\n\n- Improve `NoSuchMethod` errors for failing dynamic calls. Now they include\n  specific information about the nature of the error such as:\n  - Attempting to call a null value.\n  - Calling an object instance with a null `call()` method.\n  - Passing too few or too many arguments.\n  - Passing incorrect named arguments.\n  - Passing too few or too many type arguments.\n  - Passing type arguments to a non-generic method.\n\n### Tools\n\n#### Linter\n\nThe Linter was updated to `0.1.91`, which includes the following changes:\n\n- Fixed missed cases in `prefer_const_constructors`\n- Fixed `prefer_initializing_formals` to no longer suggest API breaking changes\n- Updated `omit_local_variable_types` to allow explicit `dynamic`s\n- Fixed null-reference in `unrelated_type_equality_checks`\n- New lint: `unsafe_html`\n- Broadened `prefer_null_aware_operators` to work beyond local variables.\n- Added `prefer_if_null_operators`.\n- Fixed `prefer_contains` false positives.\n- Fixed `unnecessary_parenthesis` false positives.\n- Fixed `prefer_asserts_in_initializer_lists` false positives\n- Fixed `curly_braces_in_flow_control_structures` to handle more cases\n- New lint: `prefer_double_quotes`\n- New lint: `sort_child_properties_last`\n- Fixed `type_annotate_public_apis` false positive for `static const`\n  initializers\n\n#### Pub\n\n- `pub publish` will no longer warn about missing dependencies for import\n  statements in `example/`.\n- OAuth2 authentication will explicitly ask for the `openid` scope.\n\n## 2.3.2 - 2019-06-11\n\nThis is a patch version release with a security improvement.\n\n### Security vulnerability\n\n- **Security improvement:** On Linux and Android, starting a process with\n  `Process.run`, `Process.runSync`, or `Process.start` would first search the\n  current directory before searching `PATH` (Issue [37101][]). This behavior\n  effectively put the current working directory in the front of `PATH`, even if\n  it wasn't in the `PATH`. This release changes that behavior to only searching\n  the directories in the `PATH` environment variable. Operating systems other\n  than Linux and Android didn't have this behavior and aren't affected by this\n  vulnerability.\n\n  This vulnerability could result in execution of untrusted code if a command\n  without a slash in its name was run inside an untrusted directory containing\n  an executable file with that name:\n\n  ```dart\n  Process.run(\"ls\", workingDirectory: \"/untrusted/directory\")\n  ```\n\n  This would attempt to run `/untrusted/directory/ls` if it existed, even though\n  it is not in the `PATH`. It was always safe to instead use an absolute path or\n  a path containing a slash.\n\n  This vulnerability was introduced in Dart 2.0.0.\n\n[37101]: https://github.com/dart-lang/sdk/issues/37101\n\n## 2.3.1 - 2019-05-21\n\nThis is a patch version release with bug fixes.\n\n### Tools\n\n#### dart2js\n\n- Fixed a bug that caused the compiler to crash when it compiled UI-as-code\n  features within fields (Issue [36864][]).\n\n[36864]: https://github.com/dart-lang/sdk/issues/36864\n\n## 2.3.0 - 2019-05-08\n\nThe focus in this release is on the new \"UI-as-code\" language features which\nmake collections more expressive and declarative.\n\n### Language\n\nFlutter is growing rapidly, which means many Dart users are building UI in code\nout of big deeply-nested expressions. Our goal with 2.3.0 was to [make that kind\nof code easier to write and maintain][ui-as-code]. Collection literals are a\nlarge component, so we focused on three features to make collections more\npowerful. We'll use list literals in the examples below, but these features also\nwork in map and set literals.\n\n[ui-as-code]:\n  https://medium.com/dartlang/making-dart-a-better-language-for-ui-f1ccaf9f546c\n\n#### Spread\n\nPlacing `...` before an expression inside a collection literal unpacks the\nresult of the expression and inserts its elements directly inside the new\ncollection. Where before you had to write something like this:\n\n```dart\nCupertinoPageScaffold(\n  child: ListView(children: [\n    Tab2Header()\n  ]..addAll(buildTab2Conversation())\n    ..add(buildFooter())),\n);\n```\n\nNow you can write this:\n\n```dart\nCupertinoPageScaffold(\n  child: ListView(children: [\n    Tab2Header(),\n    ...buildTab2Conversation(),\n    buildFooter()\n  ]),\n);\n```\n\nIf you know the expression might evaluate to null and you want to treat that as\nequivalent to zero elements, you can use the null-aware spread `...?`.\n\n#### Collection if\n\nSometimes you might want to include one or more elements in a collection only\nunder certain conditions. If you're lucky, you can use a `?:` operator to\nselectively swap out a single element, but if you want to exchange more than one\nor omit elements, you are forced to write imperative code like this:\n\n```dart\nWidget build(BuildContext context) {\n  var children = [\n    IconButton(icon: Icon(Icons.menu)),\n    Expanded(child: title)\n  ];\n\n  if (isAndroid) {\n    children.add(IconButton(icon: Icon(Icons.search)));\n  }\n\n  return Row(children: children);\n}\n```\n\nWe now allow `if` inside collection literals to conditionally omit or (with\n`else`) swap out an element:\n\n```dart\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      IconButton(icon: Icon(Icons.menu)),\n      Expanded(child: title),\n      if (isAndroid)\n        IconButton(icon: Icon(Icons.search)),\n    ],\n  );\n}\n```\n\nUnlike the existing `?:` operator, a collection `if` can be composed with\nspreads to conditionally include or omit multiple items:\n\n```dart\nWidget build(BuildContext context) {\n  return Row(\n    children: [\n      IconButton(icon: Icon(Icons.menu)),\n      if (isAndroid) ...[\n        Expanded(child: title),\n        IconButton(icon: Icon(Icons.search)),\n      ]\n    ],\n  );\n}\n```\n\n#### Collection for\n\nIn many cases, the higher-order methods on Iterable give you a declarative way\nto modify a collection in the context of a single expression. But some\noperations, especially involving both transforming and filtering, can be\ncumbersome to express in a functional style.\n\nTo solve this problem, you can use `for` inside a collection literal. Each\niteration of the loop produces an element which is then inserted in the\nresulting collection. Consider the following code:\n\n```dart\nvar command = [\n  engineDartPath,\n  frontendServer,\n  ...fileSystemRoots.map((root) => \"--filesystem-root=$root\"),\n  ...entryPoints\n      .where((entryPoint) => fileExists(\"lib/$entryPoint.json\"))\n      .map((entryPoint) => \"lib/$entryPoint\"),\n  mainPath\n];\n```\n\nWith a collection `for`, the code becomes simpler:\n\n```dart\nvar command = [\n  engineDartPath,\n  frontendServer,\n  for (var root in fileSystemRoots) \"--filesystem-root=$root\",\n  for (var entryPoint in entryPoints)\n    if (fileExists(\"lib/$entryPoint.json\")) \"lib/$entryPoint\",\n  mainPath\n];\n```\n\nAs you can see, all three of these features can be freely composed. For full\ndetails of the changes, see [the official proposal][ui-as-code proposal].\n\n[ui-as-code proposal]:\n  https://github.com/dart-lang/language/blob/master/accepted/future-releases/unified-collections/feature-specification.md\n\n**Note: These features are not currently supported in _const_ collection\nliterals. In a future release, we intend to relax this restriction and allow\nspread and collection `if` inside const collections.**\n\n### Core library changes\n\n#### `dart:isolate`\n\n- Added `debugName` property to `Isolate`.\n- Added `debugName` optional parameter to `Isolate.spawn` and\n  `Isolate.spawnUri`.\n\n#### `dart:core`\n\n- RegExp patterns can now use lookbehind assertions.\n- RegExp patterns can now use named capture groups and named backreferences.\n  Currently, named group matches can only be retrieved in Dart either by the\n  implicit index of the named group or by downcasting the returned Match object\n  to the type RegExpMatch. The RegExpMatch interface contains methods for\n  retrieving the available group names and retrieving a match by group name.\n\n### Dart VM\n\n- The VM service now requires an authentication code by default. This behavior\n  can be disabled by providing the `--disable-service-auth-codes` flag.\n\n- Support for deprecated flags '-c' and '--checked' has been removed.\n\n### Dart for the Web\n\n#### dart2js\n\nA binary format was added to dump-info. The old JSON format is still available\nand provided by default, but we are starting to deprecate it. The new binary\nformat is more compact and cheaper to generate. On some large apps we tested, it\nwas 4x faster to serialize and used 6x less memory.\n\nTo use the binary format today, use `--dump-info=binary`, instead of\n`--dump-info`.\n\nWhat to expect next?\n\n- The [visualizer tool][visualizer] will not be updated to support the new\n  binary format, but you can find several command-line tools at\n  `package:dart2js_info` that provide similar features to those in the\n  visualizer.\n\n- The command-line tools in `package:dart2js_info` also work with the old JSON\n  format, so you can start using them even before you enable the new format.\n\n- In a future release `--dump-info` will default to `--dump-info=binary`. At\n  that point, there will be an option to fallback to the JSON format, but the\n  visualizer tool will be deprecated.\n\n- A release after that, the JSON format will no longer be available from\n  dart2js, but may be available from a command-line tool in\n  `package:dart2js_info`.\n\n[visualizer]: https://dart-lang.github.io/dump-info-visualizer/\n\n### Tools\n\n#### dartfmt\n\n- Tweak set literal formatting to follow other collection literals.\n- Add support for \"UI as code\" features.\n- Properly format trailing commas in assertions.\n- Improve indentation of adjacent strings in argument lists.\n\n#### Linter\n\nThe Linter was updated to `0.1.86`, which includes the following changes:\n\n- Added the following lints: `prefer_inlined_adds`,\n  `prefer_for_elements_to_map_fromIterable`,\n  `prefer_if_elements_to_conditional_expressions`,\n  `diagnostic_describe_all_properties`.\n- Updated `file_names` to skip prefixed-extension Dart files (`.css.dart`,\n  `.g.dart`, etc.).\n- Fixed false positives in `unnecessary_parenthesis`.\n\n#### Pub\n\n- Added a CHANGELOG validator that complains if you `pub publish` without\n  mentioning the current version.\n- Removed validation of library names when doing `pub publish`.\n- Added support for `pub global activate`ing package from a custom pub URL.\n- Added subcommand: `pub logout`. Logs you out of the current session.\n\n#### Dart native\n\nInitial support for compiling Dart apps to native machine code has been added.\nTwo new tools have been added to the `bin` folder of the Dart SDK:\n\n- `dart2aot`: AOT (ahead-of-time) compiles a Dart program to native machine\n  code. The tool is supported on Windows, macOS, and Linux.\n\n- `dartaotruntime`: A small runtime used for executing an AOT compiled program.\n\n## 2.2.0 - 2019-02-26\n\n### Language\n\nSets now have a literal syntax like lists and maps do:\n\n```dart\nvar set = {1, 2, 3};\n```\n\nUsing curly braces makes empty sets ambiguous with maps:\n\n```dart\nvar collection = {}; // Empty set or map?\n```\n\nTo avoid breaking existing code, an ambiguous literal is treated as a map. To\ncreate an empty set, you can rely on either a surrounding context type or an\nexplicit type argument:\n\n```dart\n// Variable type forces this to be a set:\nSet<int> set = {};\n\n// A single type argument means this must be a set:\nvar set2 = <int>{};\n```\n\nSet literals are released on all platforms. The `set-literals` experiment flag\nhas been disabled.\n\n### Tools\n\n#### Analyzer\n\n- The `DEPRECATED_MEMBER_USE` hint was split into two hints:\n\n  - `DEPRECATED_MEMBER_USE` reports on usage of `@deprecated` members declared\n    in a different package.\n  - `DEPRECATED_MEMBER_USE_FROM_SAME_PACKAGE` reports on usage of `@deprecated`\n    members declared in the same package.\n\n#### Linter\n\nUpgraded the linter to `0.1.82` which adds the following improvements:\n\n- Added `provide_deprecation_message`, and\n  `use_full_hex_values_for_flutter_colors`, `prefer_null_aware_operators`.\n- Fixed `prefer_const_declarations` set literal false-positives.\n- Updated `prefer_collection_literals` to support set literals.\n- Updated `unnecessary_parenthesis` play nicer with cascades.\n- Removed deprecated lints from the \"all options\" sample.\n- Stopped registering \"default lints\".\n- Fixed `hash_and_equals` to respect `hashCode` fields.\n\n### Other libraries\n\n#### `package:kernel`\n\n- **Breaking change:** The `klass` getter on the `InstanceConstant` class in the\n  Kernel AST API has been renamed to `classNode` for consistency.\n\n- **Breaking change:** Updated `Link` implementation to utilize true symbolic\n  links instead of junctions on Windows. Existing junctions will continue to\n  work with the new `Link` implementation, but all new links will create\n  symbolic links.\n\n  To create a symbolic link, Dart must be run with administrative privileges or\n  Developer Mode must be enabled, otherwise a `FileSystemException` will be\n  raised with errno set to `ERROR_PRIVILEGE_NOT_HELD` (Issue [33966]).\n\n[33966]: https://github.com/dart-lang/sdk/issues/33966\n\n## 2.1.1 - 2019-02-18\n\nThis is a patch version release. Again, the team's focus was mostly on improving\nperformance and stability after the large changes in Dart 2.0.0. In particular,\ndart2js now always uses the \"fast startup\" emitter and the old emitter has been\nremoved.\n\nThere are a couple of very minor **breaking changes:**\n\n- In `dart:io`, adding to a closed `IOSink` now throws a `StateError`.\n\n- On the Dart VM, a soundness hole when using `dart:mirrors` to reflectively\n  invoke a method in an incorrect way that violates its static types has been\n  fixed (Issue [35611][]).\n\n### Language\n\nThis release has no language changes.\n\n### Core library\n\n#### `dart:core`\n\n- Made `DateTime.parse()` also recognize `,` as a valid decimal separator when\n  parsing from a string (Issue [35576][]).\n\n[35576]: https://github.com/dart-lang/sdk/issues/35576\n\n#### `dart:html`\n\n- Added methods `Element.removeAttribute`, `Element.removeAttributeNS`,\n  `Element.hasAttribute` and `Element.hasAttributeNS`. (Issue [35655][]).\n- Improved dart2js compilation of `element.attributes.remove(name)` to generate\n  `element.removeAttribute(name)`, so that there is no performance reason to\n  migrate to the above methods.\n- Fixed a number of `dart:html` bugs:\n\n  - Fixed HTML API's with callback typedef to correctly convert Dart functions\n    to JS functions (Issue [35484]).\n  - HttpStatus constants exposed in `dart:html` (Issue [34318]).\n  - Expose DomName `ondblclick` and `dblclickEvent` for Angular analyzer.\n  - Fixed `removeAll` on `classes`; `elements` parameter should be\n    `Iterable<Object>` to match Set's `removeAll` not `Iterable<E>` (Issue\n    [30278]).\n  - Fixed a number of methods on DataTransferItem, Entry, FileEntry and\n    DirectoryEntry which previously returned NativeJavaScriptObject. This fixes\n    handling drag/drop of files/directories (Issue [35510]).\n  - Added ability to allow local file access from Chrome browser in ddb.\n\n[35655]: https://github.com/dart-lang/sdk/issues/35655\n[30278]: https://github.com/dart-lang/sdk/issues/30278\n[34318]: https://github.com/dart-lang/sdk/issues/34318\n[35484]: https://github.com/dart-lang/sdk/issues/35484\n[35510]: https://github.com/dart-lang/sdk/issues/35510\n\n#### `dart:io`\n\n- **Breaking change:** Adding to a closed `IOSink` now throws a `StateError`.\n- Added ability to get and set low level socket options.\n\n[29554]: https://github.com/dart-lang/sdk/issues/29554\n\n### Dart VM\n\nIn previous releases it was possible to violate static types using\n`dart:mirrors`. This code would run without any TypeErrors and print\n\"impossible\" output:\n\n```dart\nimport 'dart:mirrors';\n\nclass A {\n  void method(int v) {\n    if (v != null && v is! int) {\n      print(\"This should be impossible: expected null or int got ${v}\");\n    }\n  }\n}\n\nvoid main() {\n  final obj = A();\n  reflect(obj).invoke(#method, ['not-an-number']);\n}\n```\n\nThis bug is fixed now. Only code that already violates static typing will break.\nSee Issue [35611][] for more details.\n\n[35611]: https://github.com/dart-lang/sdk/issues/35611\n\n### Dart for the Web\n\n#### dart2js\n\n- The old \"full emitter\" back-end is removed and dart2js always uses the \"fast\n  startup\" back-end. The generated fast startup code is optimized to load\n  faster, even though it can be slightly larger. The `--fast-startup` and\n  `--no-fast-startup` are allowed but ignored. They will be removed in a future\n  version.\n\n- We fixed a bug in how deferred constructor calls were incorrectly not marked\n  as deferred. The old behavior didn't cause breakages, but was imprecise and\n  pushed more code to the main output unit.\n\n- A new deferred split algorithm implementation was added.\n\n  This implementation fixes a soundness bug and addresses performance issues of\n  the previous implementation, because of that it can have a visible impact on\n  apps. In particular:\n\n  - We fixed a performance issue which was introduced when we migrated to the\n    common front-end. On large apps, the fix can cut 2/3 of the time spent on\n    this task.\n\n  - We fixed a bug in how inferred types were categorized (Issue [35311][]). The\n    old behavior was unsound and could produce broken programs. The fix may\n    cause more code to be pulled into the main output unit.\n\n    This shows up frequently when returning deferred values from closures since\n    the closure's inferred return type is the deferred type. For example, if you\n    have:\n\n    ```dart\n    () async {\n      await deferred_prefix.loadLibrary();\n      return new deferred_prefix.Foo();\n    }\n    ```\n\n    The closure's return type is `Future<Foo>`. The old implementation defers\n    `Foo`, and incorrectly makes the return type `Future<dynamic>`. This may\n    break in places where the correct type is expected.\n\n    The new implementation will not defer `Foo`, and will place it in the main\n    output unit. If your intent is to defer it, then you need to ensure the\n    return type is not inferred to be `Foo`. For example, you can do so by\n    changing the code to a named closure with a declared type, or by ensuring\n    that the return expression has the type you want, like:\n\n    ```dart\n    () async {\n      await deferred_prefix.loadLibrary();\n      return new deferred_prefix.Foo() as dynamic;\n    }\n    ```\n\n    Because the new implementation might require you to inspect and fix your\n    app, we exposed two temporary flags:\n\n  - The `--report-invalid-deferred-types` causes dart2js to run both the old and\n    new algorithms and report any cases where an invalid type was detected.\n\n  - The `--new-deferred-split` flag enables this new algorithm.\n\n- The `--categories=*` flag is being replaced. `--categories=all` was only used\n  for testing and it is no longer supported. `--categories=Server` continues to\n  work at this time but it is deprecated, please use `--server-mode` instead.\n\n- The `--library-root` flag was replaced by `--libraries-spec`. This flag is\n  rarely used by developers invoking dart2js directly. It's important for\n  integrating dart2js with build systems. See `--help` for more details on the\n  new flag.\n\n[35311]: https://github.com/dart-lang/sdk/issues/35311\n\n### Tools\n\n#### Analyzer\n\n- Support for `declarations-casts` has been removed and the `implicit-casts`\n  option now has the combined semantics of both options. This means that users\n  that disable `implicit-casts` might now see errors that were not previously\n  being reported.\n\n- New hints added:\n\n  - `NON_CONST_CALL_TO_LITERAL_CONSTRUCTOR` and\n    `NON_CONST_CALL_TO_LITERAL_CONSTRUCTOR_USING_NEW` inform you when a\n    `@literal` const constructor is called in a non-const context (or with\n    `new`).\n  - `INVALID_LITERAL_ANNOTATION` reports when something other than a const\n    constructor is annotated with `@literal`.\n  - `SUBTYPE_OF_SEALED_CLASS` reports when any class or mixin subclasses\n    (extends, implements, mixes in, or constrains to) a `@sealed` class, and the\n    two are declared in different packages.\n  - `MIXIN_ON_SEALED_CLASS` reports when a `@sealed` class is used as a\n    superclass constraint of a mixin.\n\n#### dartdoc\n\nDefault styles now work much better on mobile. Simple browsing and searching of\nAPI docs now work in many cases.\n\nUpgraded the linter to `0.1.78` which adds the following improvements:\n\n- Added `prefer_final_in_for_each`, `unnecessary_await_in_return`,\n  `use_function_type_syntax_for_parameters`, `avoid_returning_null_for_future`,\n  and `avoid_shadowing_type_parameters`.\n- Updated `invariant_booleans` status to experimental.\n- Fixed `type_annotate_public_apis` false positives on local functions.\n- Fixed `avoid_shadowing_type_parameters` to report shadowed type parameters in\n  generic typedefs.\n- Fixed `use_setters_to_change_properties` to not wrongly lint overriding\n  methods.\n- Fixed `cascade_invocations` to not lint awaited targets.\n- Fixed `prefer_conditional_assignment` false positives.\n- Fixed `join_return_with_assignment` false positives.\n- Fixed `cascade_invocations` false positives.\n- Deprecated `prefer_bool_in_asserts` as it is redundant in Dart 2.\n\n## 2.1.0 - 2018-11-15\n\nThis is a minor version release. The team's focus was mostly on improving\nperformance and stability after the large changes in Dart 2.0.0. Notable\nchanges:\n\n- We've introduced a dedicated syntax for declaring a mixin. Instead of the\n  `class` keyword, it uses `mixin`:\n\n  ```dart\n  mixin SetMixin<E> implements Set<E> {\n    ...\n  }\n  ```\n\n  The new syntax also enables `super` calls inside mixins.\n\n- Integer literals now work in double contexts. When passing a literal number to\n  a function that expects a `double`, you no longer need an explicit `.0` at the\n  end of the number. In releases before 2.1, you need code like this when\n  setting a double like `fontSize`:\n\n  ```dart\n  TextStyle(fontSize: 18.0)\n  ```\n\n  Now you can remove the `.0`:\n\n  ```dart\n  TextStyle(fontSize: 18)\n  ```\n\n  In releases before 2.1, `fontSize : 18` causes a static error. This was a\n  common mistake and source of friction.\n\n- **Breaking change:** A number of static errors that should have been detected\n  and reported were not supported in 2.0.0. These are reported now, which means\n  existing incorrect code may show new errors.\n\n- `dart:core` now exports `Future` and `Stream`. You no longer need to import\n  `dart:async` to use those very common types.\n\n### Language\n\n- Introduced a new syntax for mixin declarations.\n\n  ```dart\n  mixin SetMixin<E> implements Set<E> {\n    ...\n  }\n  ```\n\n  Most classes that are intended to be used as mixins are intended to _only_ be\n  used as mixins. The library author doesn't want users to be able to construct\n  or subclass the class. The new syntax makes that intent clear and enforces it\n  in the type system. It is an error to extend or construct a type declared\n  using `mixin`. (You can implement it since mixins expose an implicit\n  interface.)\n\n  Over time, we expect most mixin declarations to use the new syntax. However,\n  if you have a \"mixin\" class where users _are_ extending or constructing it,\n  note that moving it to the new syntax is a breaking API change since it\n  prevents users from doing that. If you have a type like this that is a mixin\n  as well as being a concrete class and/or superclass, then the existing syntax\n  is what you want.\n\n  If you need to use a `super` inside a mixin, the new syntax is required. This\n  was previously only allowed with the experimental `--supermixins` flag because\n  it has some complex interactions with the type system. The new syntax\n  addresses those issues and lets you use `super` calls by declaring the\n  superclass constraint your mixin requires:\n\n  ```dart\n  class Superclass {\n    superclassMethod() {\n      print(\"in superclass\");\n    }\n  }\n\n  mixin SomeMixin on Superclass {\n    mixinMethod() {\n      // This is OK:\n      super.superclassMethod();\n    }\n  }\n\n  class GoodSub extends Superclass with SomeMixin {}\n\n  class BadSub extends Object with SomeMixin {}\n  // Error: Since the super() call in mixinMethod() can't find a\n  // superclassMethod() to call, this is prohibited.\n  ```\n\n  Even if you don't need to use `super` calls, the new mixin syntax is good\n  because it clearly expresses that you intend the type to be mixed in.\n\n- Allow integer literals to be used in double contexts. An integer literal used\n  in a place where a double is required is now interpreted as a double value.\n  The numerical value of the literal needs to be precisely representable as a\n  double value.\n\n- Integer literals compiled to JavaScript are now allowed to have any value that\n  can be exactly represented as a JavaScript `Number`. They were previously\n  limited to such numbers that were also representable as signed 64-bit\n  integers.\n\n**(Breaking)** A number of static errors that should have been detected and\nreported were not supported in 2.0.0. These are reported now, which means\nexisting incorrect code may show new errors:\n\n- **Setters with the same name as the enclosing class aren't allowed.** (Issue\n  [34225][].) It is not allowed to have a class member with the same name as the\n  enclosing class:\n\n  ```dart\n  class A {\n    set A(int x) {}\n  }\n  ```\n\n  Dart 2.0.0 incorrectly allows this for setters (only). Dart 2.1.0 rejects it.\n\n  _To fix:_ This is unlikely to break anything, since it violates all style\n  guides anyway.\n\n- **Constant constructors cannot redirect to non-constant constructors.** (Issue\n  [34161][].) It is not allowed to have a constant constructor that redirects to\n  a non-constant constructor:\n\n  ```dart\n  class A {\n    const A.foo() : this(); // Redirecting to A()\n    A() {}\n  }\n  ```\n\n  Dart 2.0.0 incorrectly allows this. Dart 2.1.0 rejects it.\n\n  _To fix:_ Make the target of the redirection a properly const constructor.\n\n- **Abstract methods may not unsoundly override a concrete method.** (Issue\n  [32014][].) Concrete methods must be valid implementations of their\n  interfaces:\n\n  ```dart\n  class A {\n    num get thing => 2.0;\n  }\n\n  abstract class B implements A {\n    int get thing;\n  }\n\n  class C extends A with B {}\n  // 'thing' from 'A' is not a valid override of 'thing' from 'B'.\n\n  main() {\n    print(new C().thing.isEven); // Expects an int but gets a double.\n  }\n  ```\n\n  Dart 2.0.0 allows unsound overrides like the above in some cases. Dart 2.1.0\n  rejects them.\n\n  _To fix:_ Relax the type of the invalid override, or tighten the type of the\n  overridden method.\n\n- **Classes can't implement FutureOr.** (Issue [33744][].) Dart doesn't allow\n  classes to implement the FutureOr type:\n\n  ```dart\n  class A implements FutureOr<Object> {}\n  ```\n\n  Dart 2.0.0 allows classes to implement FutureOr. Dart 2.1.0 does not.\n\n  _To fix:_ Don't do this.\n\n- **Type arguments to generic typedefs must satisfy their bounds.** (Issue\n  [33308][].) If a parameterized typedef specifies a bound, actual arguments\n  must be checked against it:\n\n  ```dart\n  class A<X extends int> {}\n\n  typedef F<Y extends int> = A<Y> Function();\n\n  F<num> f = null;\n  ```\n\n  Dart 2.0.0 allows bounds violations like `F<num>` above. Dart 2.1.0 rejects\n  them.\n\n  _To fix:_ Either remove the bound on the typedef parameter, or pass a valid\n  argument to the typedef.\n\n- **Constructor invocations must use valid syntax, even with optional `new`.**\n  (Issue [34403][].) Type arguments to generic named constructors go after the\n  class name, not the constructor name, even when used without an explicit\n  `new`:\n\n  ```dart\n  class A<T> {\n    A.foo() {}\n  }\n\n  main() {\n    A.foo<String>(); // Incorrect syntax, was accepted in 2.0.0.\n    A<String>.foo(); // Correct syntax.\n  }\n  ```\n\n  Dart 2.0.0 accepts the incorrect syntax when the `new` keyword is left out.\n  Dart 2.1.0 correctly rejects this code.\n\n  _To fix:_ Move the type argument to the correct position after the class name.\n\n- **Instance members should shadow prefixes.** (Issue [34498][].) If the same\n  name is used as an import prefix and as a class member name, then the class\n  member name takes precedence in the class scope.\n\n  ```dart\n  import 'dart:core';\n  import 'dart:core' as core;\n\n  class A {\n    core.List get core => null; // \"core\" refers to field, not prefix.\n  }\n  ```\n\n  Dart 2.0.0 incorrectly resolves the use of `core` in `core.List` to the prefix\n  name. Dart 2.1.0 correctly resolves this to the field name.\n\n  _To fix:_ Change the prefix name to something which does not clash with the\n  instance member.\n\n- **Implicit type arguments in extends clauses must satisfy the class bounds.**\n  (Issue [34532][].) Implicit type arguments for generic classes are computed if\n  not passed explicitly, but when used in an `extends` clause they must be\n  checked for validity:\n\n  ```dart\n  class Foo<T> {}\n\n  class Bar<T extends Foo<T>> {}\n\n  class Baz extends Bar {} // Should error because Bar completes to Bar<Foo>\n  ```\n\n  Dart 2.0.0 accepts the broken code above. Dart 2.1.0 rejects it.\n\n  _To fix:_ Provide explicit type arguments to the superclass that satisfy the\n  bound for the superclass.\n\n- **Mixins must correctly override their superclasses.** (Issue [34235][].) In\n  some rare cases, combinations of uses of mixins could result in invalid\n  overrides not being caught:\n\n  ```dart\n  class A {\n    num get thing => 2.0;\n  }\n\n  class M1 {\n    int get thing => 2;\n  }\n\n  class B = A with M1;\n\n  class M2 {\n    num get thing => 2.0;\n  }\n\n  class C extends B with M2 {} // 'thing' from 'M2' not a valid override.\n\n  main() {\n    M1 a = new C();\n    print(a.thing.isEven); // Expects an int but gets a double.\n  }\n  ```\n\n  Dart 2.0.0 accepts the above example. Dart 2.1.0 rejects it.\n\n  _To fix:_ Ensure that overriding methods are correct overrides of their\n  superclasses, either by relaxing the superclass type, or tightening the\n  subclass/mixin type.\n\n[32014]: https://github.com/dart-lang/sdk/issues/32014\n[33308]: https://github.com/dart-lang/sdk/issues/33308\n[33744]: https://github.com/dart-lang/sdk/issues/33744\n[34161]: https://github.com/dart-lang/sdk/issues/34161\n[34225]: https://github.com/dart-lang/sdk/issues/34225\n[34235]: https://github.com/dart-lang/sdk/issues/34235\n[34403]: https://github.com/dart-lang/sdk/issues/34403\n[34498]: https://github.com/dart-lang/sdk/issues/34498\n[34532]: https://github.com/dart-lang/sdk/issues/34532\n\n### Core libraries\n\n#### `dart:async`\n\n- Fixed a bug where calling `stream.take(0).drain(value)` would not correctly\n  forward the `value` through the returned `Future`.\n- Added a `StreamTransformer.fromBind` constructor.\n- Updated `Stream.fromIterable` to send a done event after the error when the\n  iterator's `moveNext` throws, and handle if the `current` getter throws (issue\n  [33431][]).\n\n[33431]: http://dartbug.com/33431\n\n#### `dart:core`\n\n- Added `HashMap.fromEntries` and `LinkedHashmap.fromEntries` constructors.\n- Added `ArgumentError.checkNotNull` utility method.\n- Made `Uri` parsing more permissive about `[` and `]` occurring in the path,\n  query or fragment, and `#` occurring in fragment.\n- Exported `Future` and `Stream` from `dart:core`.\n- Added operators `&`, `|` and `^` to `bool`.\n- Added missing methods to `UnmodifiableMapMixin`. Some maps intended to be\n  unmodifiable incorrectly allowed new methods added in Dart 2 to succeed.\n- Deprecated the `provisional` annotation and the `Provisional` annotation\n  class. These should have been removed before releasing Dart 2.0, and they have\n  no effect.\n\n#### `dart:html`\n\nFixed Service Workers and any Promise/Future API with a Dictionary parameter.\n\nAPIs in dart:html (that take a Dictionary) will receive a Dart Map parameter.\nThe Map parameter must be converted to a Dictionary before passing to the\nbrowser's API. Before this change, any Promise/Future API with a Map/Dictionary\nparameter never called the Promise and didn't return a Dart Future - now it\ndoes.\n\nThis caused a number of breaks especially in Service Workers (register, etc.).\nHere is a complete list of the fixed APIs:\n\n- BackgroundFetchManager\n  - `Future<BackgroundFetchRegistration> fetch(String id, Object requests, [Map options])`\n- CacheStorage\n  - `Future match(/*RequestInfo*/ request, [Map options])`\n- CanMakePayment\n  - `Future<List<Client>> matchAll([Map options])`\n- CookieStore\n  - `Future getAll([Map options])`\n  - `Future set(String name, String value, [Map options])`\n- CredentialsContainer\n  - `Future get([Map options])`\n  - `Future create([Map options])`\n- ImageCapture\n  - `Future setOptions(Map photoSettings)`\n- MediaCapabilities\n  - `Future<MediaCapabilitiesInfo> decodingInfo(Map configuration)`\n  - `Future<MediaCapabilitiesInfo> encodingInfo(Map configuration)`\n- MediaStreamTrack\n  - `Future applyConstraints([Map constraints])`\n- Navigator\n  - `Future requestKeyboardLock([List<String> keyCodes])`\n  - `Future requestMidiAccess([Map options])`\n  - `Future share([Map data])`\n- OffscreenCanvas\n  - `Future<Blob> convertToBlob([Map options])`\n- PaymentInstruments\n  - `Future set(String instrumentKey, Map details)`\n- Permissions\n  - `Future<PermissionStatus> query(Map permission)`\n  - `Future<PermissionStatus> request(Map permissions)`\n  - `Future<PermissionStatus> revoke(Map permission)`\n- PushManager\n  - `Future permissionState([Map options])`\n  - `Future<PushSubscription> subscribe([Map options])`\n- RtcPeerConnection\n\n  - Changed:\n\n    ```dart\n    Future createAnswer([options_OR_successCallback,\n        RtcPeerConnectionErrorCallback failureCallback,\n        Map mediaConstraints])\n    ```\n\n    to:\n\n    ```dart\n    Future<RtcSessionDescription> createAnswer([Map options])\n    ```\n\n  - Changed:\n\n    ```dart\n    Future createOffer([options_OR_successCallback,\n        RtcPeerConnectionErrorCallback failureCallback,\n        Map rtcOfferOptions])\n    ```\n\n    to:\n\n    ```dart\n    Future<RtcSessionDescription> createOffer([Map options])\n    ```\n\n  - Changed:\n\n    ```dart\n    Future setLocalDescription(Map description,\n        VoidCallback successCallback,\n        [RtcPeerConnectionErrorCallback failureCallback])\n    ```\n\n    to:\n\n    ```dart\n    Future setLocalDescription(Map description)\n    ```\n\n  - Changed:\n\n    ```dart\n    Future setLocalDescription(Map description,\n        VoidCallback successCallback,\n        [RtcPeerConnectionErrorCallback failureCallback])\n    ```\n\n    to:\n\n    ```dart\n    Future setRemoteDescription(Map description)\n    ```\n\n- ServiceWorkerContainer\n  - `Future<ServiceWorkerRegistration> register(String url, [Map options])`\n- ServiceWorkerRegistration\n  - `Future<List<Notification>> getNotifications([Map filter])`\n  - `Future showNotification(String title, [Map options])`\n- VRDevice\n  - `Future requestSession([Map options])`\n  - `Future supportsSession([Map options])`\n- VRSession\n  - `Future requestFrameOfReference(String type, [Map options])`\n- Window\n  - `Future fetch(/*RequestInfo*/ input, [Map init])`\n- WorkerGlobalScope\n  - `Future fetch(/*RequestInfo*/ input, [Map init])`\n\nIn addition, exposed Service Worker \"self\" as a static getter named \"instance\".\nThe instance is exposed on four different Service Worker classes and can throw a\nInstanceTypeError if the instance isn't of the class expected\n(WorkerGlobalScope.instance will always work and not throw):\n\n- `SharedWorkerGlobalScope.instance`\n- `DedicatedWorkerGlobalScope.instance`\n- `ServiceWorkerGlobalScope.instance`\n- `WorkerGlobalScope.instance`\n\n#### `dart:io`\n\n- Added new HTTP status codes.\n\n### Dart for the Web\n\n#### dart2js\n\n- **(Breaking)** Duplicate keys in a const map are not allowed and produce a\n  compile-time error. Dart2js used to report this as a warning before. This was\n  already an error in dartanalyzer and DDC and will be an error in other tools\n  in the future as well.\n\n- Added `-O` flag to tune optimization levels. For more details run\n  `dart2js -h -v`.\n\n  We recommend to enable optimizations using the `-O` flag instead of individual\n  flags for each optimization. This is because the `-O` flag is intended to be\n  stable and continue to work in future versions of dart2js, while individual\n  flags may come and go.\n\n  At this time we recommend to test and debug with `-O1` and to deploy with\n  `-O3`.\n\n### Tool Changes\n\n#### dartfmt\n\n- Addressed several dartfmt issues when used with the new CFE parser.\n\n#### Linter\n\nBumped the linter to `0.1.70` which includes the following new lints:\n\n- `avoid_returning_null_for_void`\n- `sort_pub_dependencies`\n- `prefer_mixin`\n- `avoid_implementing_value_types`\n- `flutter_style_todos`\n- `avoid_void_async`\n- `prefer_void_to_null`\n\nand improvements:\n\n- Fixed NPE in `prefer_iterable_whereType`.\n- Improved message display for `await_only_futures`\n- Performance improvements for `null_closures`\n- Mixin support\n- Updated `sort_constructors_first` to apply to all members.\n- Updated `unnecessary_this` to work on field initializers.\n- Updated `unawaited_futures` to ignore assignments within cascades.\n- Improved handling of constant expressions with generic type params.\n- NPE fix for `invariant_booleans`.\n- Improved docs for `unawaited_futures`.\n- Updated `unawaited_futures` to check cascades.\n- Relaxed `void_checks` (allowing `T Function()` to be assigned to\n  `void Function()`).\n- Fixed false positives in `lines_longer_than_80_chars`.\n\n#### Pub\n\n- Renamed the `--checked` flag to `pub run` to `--enable-asserts`.\n- Pub will no longer delete directories named \"packages\".\n- The `--packages-dir` flag is now ignored.\n\n## 2.0.0 - 2018-08-07\n\nThis is the first major version release of Dart since 1.0.0, so it contains many\nsignificant changes across all areas of the platform. Large changes include:\n\n- **(Breaking)** The unsound optional static type system has been replaced with\n  a sound static type system using type inference and runtime checks. This was\n  formerly called \"[strong mode][]\" and only used by the Dart for web products.\n  Now it is the one official static type system for the entire platform and\n  replaces the previous \"checked\" and \"production\" modes.\n\n- **(Breaking)** Functions marked `async` now run synchronously until the first\n  `await` statement. Previously, they would return to the event loop once at the\n  top of the function body before any code runs ([issue 30345][]).\n\n- **(Breaking)** Constants in the core libraries have been renamed from\n  `SCREAMING_CAPS` to `lowerCamelCase`.\n\n- **(Breaking)** Many new methods have been added to core library classes. If\n  you implement the interfaces of these classes, you will need to implement the\n  new methods.\n\n- **(Breaking)** \"dart:isolate\" and \"dart:mirrors\" are no longer supported when\n  using Dart for the web. They are still supported in the command-line VM.\n\n- **(Breaking)** Pub's transformer-based build system has been replaced by a\n  [new build system][build system].\n\n- The `new` keyword is optional and can be omitted. Likewise, `const` can be\n  omitted inside a const context ([issue 30921][]).\n\n- Dartium is no longer maintained or supported.\n\n[issue 30345]: https://github.com/dart-lang/sdk/issues/30345\n[issue 30921]: https://github.com/dart-lang/sdk/issues/30921\n[strong mode]: https://dart.dev/guides/language/type-system\n[build system]: https://github.com/dart-lang/build\n\n### Language\n\n- \"[Strong mode][]\" is now the official type system of the language.\n\n- The `new` keyword is optional and can be omitted. Likewise, `const` can be\n  omitted inside a const context.\n\n- A string in a `part of` declaration may now be used to refer to the library\n  this file is part of. A library part can now declare its library as either:\n\n  ```dart\n  part of name.of.library;\n  ```\n\n  Or:\n\n  ```dart\n  part of \"uriReferenceOfLibrary.dart\";\n  ```\n\n  This allows libraries with no library declarations (and therefore no name) to\n  have parts, and it allows tools to easily find the library of a part file. The\n  Dart 1.0 syntax is supported but deprecated.\n\n- Functions marked `async` now run synchronously until the first `await`\n  statement. Previously, they would return to the event loop once at the top of\n  the function body before any code runs ([issue 30345][]).\n\n- The type `void` is now a Top type like `dynamic`, and `Object`. It also now\n  has new errors for being used where not allowed (such as being assigned to any\n  non-`void`-typed parameter). Some libraries (importantly, mockito) may need to\n  be updated to accept void values to keep their APIs working.\n\n- Future flattening is now done only as specified in the Dart 2.0 spec, rather\n  than more broadly. This means that the following code has an error on the\n  assignment to `y`.\n\n  ```dart\n  test() {\n    Future<int> f;\n    var x = f.then<Future<List<int>>>((x) => []);\n    Future<List<int>> y = x;\n  }\n  ```\n\n- Invocations of `noSuchMethod()` receive default values for optional args. The\n  following program used to print \"No arguments passed\", and now prints \"First\n  argument is 3\".\n\n  ```dart\n  abstract class B {\n    void m([int x = 3]);\n  }\n\n  class A implements B {\n    noSuchMethod(Invocation i) {\n      if (i.positionalArguments.length == 0) {\n        print(\"No arguments passed\");\n      } else {\n        print(\"First argument is ${i.positionalArguments[0]}\");\n      }\n    }\n  }\n\n  void main() {\n    A().m();\n  }\n  ```\n\n- Bounds on generic functions are invariant. The following program now issues an\n  invalid override error ([issue 29014][sdk#29014]):\n\n  ```dart\n  class A {\n    void f<T extends int>() {}\n  }\n\n  class B extends A {\n    @override\n    void f<T extends num>() {}\n  }\n  ```\n\n- Numerous corner case bugs around return statements in synchronous and\n  asynchronous functions fixed. Specifically:\n\n  - Issues [31887][issue 31887], [32881][issue 32881]. Future flattening should\n    not be recursive.\n  - Issues [30638][issue 30638], [32233][issue 32233]. Incorrect downcast errors\n    with `FutureOr`.\n  - Issue [32233][issue 32233]. Errors when returning `FutureOr`.\n  - Issue [33218][issue 33218]. Returns in functions with void related types.\n  - Issue [31278][issue 31278]. Incorrect hint on empty returns in async.\n    functions.\n\n- An empty `return;` in an async function with return type `Future<Object>` does\n  not report an error.\n\n- `return exp;` where `exp` has type `void` in an async function is now an error\n  unless the return type of the function is `void` or `dynamic`.\n\n- Mixed return statements of the form `return;` and `return exp;` are now\n  allowed when `exp` has type `void`.\n\n- A compile time error is emitted for any literal which cannot be exactly\n  represented on the target platform. As a result, dart2js and DDC report errors\n  if an integer literal cannot be represented exactly in JavaScript ([issue\n  33282][]).\n\n- New member conflict rules have been implemented. Most cases of conflicting\n  members with the same name are now static errors ([issue 33235][]).\n\n[sdk#29014]: https://github.com/dart-lang/sdk/issues/29014\n[issue 30638]: https://github.com/dart-lang/sdk/issues/30638\n[issue 31278]: https://github.com/dart-lang/sdk/issues/31278\n[issue 31887]: https://github.com/dart-lang/sdk/issues/31887\n[issue 32233]: https://github.com/dart-lang/sdk/issues/32233\n[issue 32881]: https://github.com/dart-lang/sdk/issues/32881\n[issue 33218]: https://github.com/dart-lang/sdk/issues/33218\n[issue 33235]: https://github.com/dart-lang/sdk/issues/33235\n[issue 33282]: https://github.com/dart-lang/sdk/issues/33282\n[issue 33341]: https://github.com/dart-lang/sdk/issues/33341\n\n### Core libraries\n\n- Replaced `UPPER_CASE` constant names with `lowerCamelCase`. For example,\n  `HTML_ESCAPE` is now `htmlEscape`.\n\n- The Web libraries were re-generated using Chrome 63 WebIDLs ([details][idl]).\n\n[idl]: https://github.com/dart-lang/sdk/wiki/Chrome-63-Dart-Web-Libraries\n\n#### `dart:async`\n\n- `Stream`:\n  - Added `cast` and `castFrom`.\n  - Changed `firstWhere`, `lastWhere`, and `singleWhere` to return `Future<T>`\n    and added an optional `T orElse()` callback.\n- `StreamTransformer`: added `cast` and `castFrom`.\n- `StreamTransformerBase`: new class.\n- `Timer`: added `tick` property.\n- `Zone`\n  - changed to be strong-mode clean. This required some breaking API changes.\n    See https://goo.gl/y9mW2x for more information.\n  - Added `bindBinaryCallbackGuarded`, `bindCallbackGuarded`, and\n    `bindUnaryCallbackGuarded`.\n  - Renamed `Zone.ROOT` to `Zone.root`.\n- Removed the deprecated `defaultValue` parameter on `Stream.firstWhere` and\n  `Stream.lastWhere`.\n- Changed an internal lazily-allocated reusable \"null future\" to always belong\n  to the root zone. This avoids race conditions where the first access to the\n  future determined which zone it would belong to. The zone is only used for\n  _scheduling_ the callback of listeners, the listeners themselves will run in\n  the correct zone in any case. Issue [#32556](http://dartbug.com/32556).\n\n#### `dart:cli`\n\n- _New_ \"provisional\" library for CLI-specific features.\n- `waitFor`: function that suspends a stack to wait for a `Future` to complete.\n\n#### `dart:collection`\n\n- `MapBase`: added `mapToString`.\n- `LinkedHashMap` no longer implements `HashMap`\n- `LinkedHashSet` no longer implements `HashSet`.\n- Added `of` constructor to `Queue`, `ListQueue`, `DoubleLinkedQueue`,\n  `HashSet`, `LinkedHashSet`, `SplayTreeSet`, `Map`, `HashMap`, `LinkedHashMap`,\n  `SplayTreeMap`.\n- Removed `Maps` class. Extend `MapBase` or mix in `MapMixin` instead to provide\n  map method implementations for a class.\n- Removed experimental `Document` method `getCSSCanvasContext` and property\n  `supportsCssCanvasContext`.\n- Removed obsolete `Element` property `xtag` no longer supported in browsers.\n- Exposed `ServiceWorker` class.\n- Added constructor to `MessageChannel` and `MessagePort` `addEventListener`\n  automatically calls `start` method to receive queued messages.\n\n#### `dart:convert`\n\n- `Base64Codec.decode` return type is now `Uint8List`.\n- `JsonUnsupportedObjectError`: added `partialResult` property\n- `LineSplitter` now implements `StreamTransformer<String, String>` instead of\n  `Converter`. It retains `Converter` methods `convert` and\n  `startChunkedConversion`.\n- `Utf8Decoder` when compiled with dart2js uses the browser's `TextDecoder` in\n  some common cases for faster decoding.\n- Renamed `ASCII`, `BASE64`, `BASE64URI`, `JSON`, `LATIN1` and `UTF8` to\n  `ascii`, `base64`, `base64Uri`, `json`, `latin1` and `utf8`.\n- Renamed the `HtmlEscapeMode` constants `UNKNOWN`, `ATTRIBUTE`, `SQ_ATTRIBUTE`\n  and `ELEMENT` to `unknown`, `attribute`, `sqAttribute` and `elements`.\n- Added `jsonEncode`, `jsonDecode`, `base64Encode`, `base64UrlEncode` and\n  `base64Decode` top-level functions.\n- Changed return type of `encode` on `AsciiCodec` and `Latin1Codec`, and\n  `convert` on `AsciiEncoder`, `Latin1Encoder`, to `Uint8List`.\n- Allow `utf8.decoder.fuse(json.decoder)` to ignore leading Unicode BOM.\n\n#### `dart:core`\n\n- `BigInt` class added to support integers greater than 64-bits.\n- Deprecated the `proxy` annotation.\n- Added `Provisional` class and `provisional` field.\n- Added `pragma` annotation.\n- `RegExp` added static `escape` function.\n- The `Uri` class now correctly handles paths while running on Node.js on\n  Windows.\n- Core collection changes:\n  - `Iterable` added members `cast`, `castFrom`, `followedBy` and `whereType`.\n  - `Iterable.singleWhere` added `orElse` parameter.\n  - `List` added `+` operator, `first` and `last` setters, and `indexWhere` and\n    `lastIndexWhere` methods, and static `copyRange` and `writeIterable`\n    methods.\n  - `Map` added `fromEntries` constructor.\n  - `Map` added `addEntries`, `cast`, `entries`, `map`, `removeWhere`, `update`\n    and `updateAll` members.\n  - `MapEntry`: new class used by `Map.entries`.\n  - _Note_: if a class extends `IterableBase`, `ListBase`, `SetBase` or\n    `MapBase` (or uses the corresponding mixins) from `dart:collection`, the new\n    members are implemented automatically.\n  - Added `of` constructor to `List`, `Set`, `Map`.\n- Renamed `double.INFINITY`, `double.NEGATIVE_INFINITY`, `double.NAN`,\n  `double.MAX_FINITE` and `double.MIN_POSITIVE` to `double.infinity`,\n  `double.negativeInfinity`, `double.nan`, `double.maxFinite` and\n  `double.minPositive`.\n- Renamed the following constants in `DateTime` to lower case: `MONDAY` through\n  `SUNDAY`, `DAYS_PER_WEEK` (as `daysPerWeek`), `JANUARY` through `DECEMBER` and\n  `MONTHS_PER_YEAR` (as `monthsPerYear`).\n- Renamed the following constants in `Duration` to lower case:\n  `MICROSECONDS_PER_MILLISECOND` to `microsecondsPerMillisecond`,\n  `MILLISECONDS_PER_SECOND` to `millisecondsPerSecond`, `SECONDS_PER_MINUTE` to\n  `secondsPerMinute`, `MINUTES_PER_HOUR` to `minutesPerHour`, `HOURS_PER_DAY` to\n  `hoursPerDay`, `MICROSECONDS_PER_SECOND` to `microsecondsPerSecond`,\n  `MICROSECONDS_PER_MINUTE` to `microsecondsPerMinute`, `MICROSECONDS_PER_HOUR`\n  to `microsecondsPerHour`, `MICROSECONDS_PER_DAY` to `microsecondsPerDay`,\n  `MILLISECONDS_PER_MINUTE` to `millisecondsPerMinute`, `MILLISECONDS_PER_HOUR`\n  to `millisecondsPerHour`, `MILLISECONDS_PER_DAY` to `millisecondsPerDay`,\n  `SECONDS_PER_HOUR` to `secondsPerHour`, `SECONDS_PER_DAY` to `secondsPerDay`,\n  `MINUTES_PER_DAY` to `minutesPerDay`, and `ZERO` to `zero`.\n- Added `typeArguments` to `Invocation` class.\n- Added constructors to invocation class that allows creation of `Invocation`\n  objects directly, without going through `noSuchMethod`.\n- Added `unaryMinus` and `empty` constant symbols on the `Symbol` class.\n- Changed return type of `UriData.dataAsBytes` to `Uint8List`.\n- Added `tryParse` static method to `int`, `double`, `num`, `BigInt`, `Uri` and\n  `DateTime`.\n- Deprecated `onError` parameter on `int.parse`, `double.parse` and `num.parse`.\n- Deprecated the `NoSuchMethodError` constructor.\n- `int.parse` on the VM no longer accepts unsigned hexadecimal numbers greater\n  than or equal to `2**63` when not prefixed by `0x`. (SDK issue\n  [32858](https://github.com/dart-lang/sdk/issues/32858))\n\n#### `dart:developer`\n\n- `Flow` class added.\n- `Timeline.startSync` and `Timeline.timeSync` now accepts an optional parameter\n  `flow` of type `Flow`. The `flow` parameter is used to generate flow timeline\n  events that are enclosed by the slice described by\n  `Timeline.{start,finish}Sync` and `Timeline.timeSync`.\n\n<!--\nStill need entries for all changes to dart:html since 1.x\n-->\n\n#### `dart:html`\n\n- Removed deprecated `query` and `queryAll`. Use `querySelector` and\n  `querySelectorAll`.\n\n#### `dart:io`\n\n- `HttpStatus` added `UPGRADE_REQUIRED`.\n- `IOOverrides` and `HttpOverrides` added to aid in writing tests that wish to\n  mock varios `dart:io` objects.\n- `Platform.operatingSystemVersion` added that gives a platform-specific String\n  describing the version of the operating system.\n- `ProcessStartMode.INHERIT_STDIO` added, which allows a child process to\n  inherit the parent's stdio handles.\n- `RawZLibFilter` added for low-level access to compression and decompression\n  routines.\n- Unified backends for `SecureSocket`, `SecurityContext`, and `X509Certificate`\n  to be consistent across all platforms. All `SecureSocket`, `SecurityContext`,\n  and `X509Certificate` properties and methods are now supported on iOS and OSX.\n- `SecurityContext.alpnSupported` deprecated as ALPN is now supported on all\n  platforms.\n- `SecurityContext`: added `withTrustedRoots` named optional parameter\n  constructor, which defaults to false.\n- Added a `timeout` parameter to `Socket.connect`, `RawSocket.connect`,\n  `SecureSocket.connect` and `RawSecureSocket.connect`. If a connection attempt\n  takes longer than the duration specified in `timeout`, a `SocketException`\n  will be thrown. Note: if the duration specified in `timeout` is greater than\n  the OS level timeout, a timeout may occur sooner than specified in `timeout`.\n- `Stdin.hasTerminal` added, which is true if stdin is attached to a terminal.\n- `WebSocket` added static `userAgent` property.\n- `RandomAccessFile.close` returns `Future<void>`\n- Added `IOOverrides.socketConnect`.\n- Added Dart-styled constants to `ZLibOptions`, `FileMode`, `FileLock`,\n  `FileSystemEntityType`, `FileSystemEvent`, `ProcessStartMode`,\n  `ProcessSignal`, `InternetAddressType`, `InternetAddress`, `SocketDirection`,\n  `SocketOption`, `RawSocketEvent`, and `StdioType`, and deprecated the old\n  `SCREAMING_CAPS` constants.\n- Added the Dart-styled top-level constants `zlib`, `gzip`, and\n  `systemEncoding`, and deprecated the old `SCREAMING_CAPS` top-level constants.\n- Removed the top-level `FileMode` constants `READ`, `WRITE`, `APPEND`,\n  `WRITE_ONLY`, and `WRITE_ONLY_APPEND`. Please use e.g. `FileMode.read`\n  instead.\n- Added `X509Certificate.der`, `X509Certificate.pem`, and\n  `X509Certificate.sha1`.\n- Added `FileSystemEntity.fromRawPath` constructor to allow for the creation of\n  `FileSystemEntity` using `Uint8List` buffers.\n- Dart-styled constants have been added for `HttpStatus`, `HttpHeaders`,\n  `ContentType`, `HttpClient`, `WebSocketStatus`, `CompressionOptions`, and\n  `WebSocket`. The `SCREAMING_CAPS` constants are marked deprecated. Note that\n  `HttpStatus.CONTINUE` is now `HttpStatus.continue_`, and that e.g.\n  `HttpHeaders.FIELD_NAME` is now `HttpHeaders.fieldNameHeader`.\n- Deprecated `Platform.packageRoot`, which is only used for `packages/`\n  directory resolution which is no longer supported. It will now always return\n  null, which is a value that was always possible for it to return previously.\n- Adds `HttpClient.connectionTimeout`.\n- Adds `{Socket,RawSocket,SecureSocket}.startConnect`. These return a\n  `ConnectionTask`, which can be used to cancel an in-flight connection attempt.\n\n#### `dart:isolate`\n\n- Make `Isolate.spawn` take a type parameter representing the argument type of\n  the provided function. This allows functions with arguments types other than\n  `Object` in strong mode.\n- Rename `IMMEDIATE` and `BEFORE_NEXT_EVENT` on `Isolate` to `immediate` and\n  `beforeNextEvent`.\n- Deprecated `Isolate.packageRoot`, which is only used for `packages/` directory\n  resolution which is no longer supported. It will now always return null, which\n  is a value that was always possible for it to return previously.\n- Deprecated `packageRoot` parameter in `Isolate.spawnUri`, which is was\n  previously used only for `packages/` directory resolution. That style of\n  resolution is no longer supported in Dart 2.\n\n<!--\nStill need entries for all changes to dart:js since 1.x\n-->\n\n#### `dart.math`\n\n- Renamed `E`, `LN10`, `LN`, `LOG2E`, `LOG10E`, `PI`, `SQRT1_2` and `SQRT2` to\n  `e`, `ln10`, `ln`, `log2e`, `log10e`, `pi`, `sqrt1_2` and `sqrt2`.\n\n#### `dart.mirrors`\n\n- Added `IsolateMirror.loadUri`, which allows dynamically loading additional\n  code.\n- Marked `MirrorsUsed` as deprecated. The `MirrorsUsed` annotation was only used\n  to inform the dart2js compiler about how mirrors were used, but dart2js no\n  longer supports the mirrors library altogether.\n\n<!--\nStill need entries for all changes to dart:svg since 1.x\n-->\n\n#### `dart:typed_data`\n\n- Added `Unmodifiable` view classes over all `List` types.\n- Renamed `BYTES_PER_ELEMENT` to `bytesPerElement` on all typed data lists.\n- Renamed constants `XXXX` through `WWWW` on `Float32x4` and `Int32x4` to\n  lower-case `xxxx` through `wwww`.\n- Renamed `Endinanness` to `Endian` and its constants from `BIG_ENDIAN`,\n  `LITTLE_ENDIAN` and `HOST_ENDIAN` to `little`, `big` and `host`.\n\n<!--\nStill need entries for all changes to dart:web_audio,web_gl,web_sql since 1.x\n-->\n\n### Dart VM\n\n- Support for MIPS has been removed.\n\n- Dart `int` is now restricted to 64 bits. On overflow, arithmetic operations\n  wrap around, and integer literals larger than 64 bits are not allowed. See\n  https://github.com/dart-lang/sdk/blob/main/docs/language/informal/int64.md\n  for details.\n\n- The Dart VM no longer attempts to perform `packages/` directory resolution\n  (for loading scripts, and in `Isolate.resolveUri`). Users relying on\n  `packages/` directories should switch to `.packages` files.\n\n### Dart for the Web\n\n- Expose JavaScript Promise APIs using Dart futures. For example,\n  `BackgroundFetchManager.get` is defined as:\n\n  ```dart\n    Future<BackgroundFetchRegistration> get(String id)\n  ```\n\n  It can be used like:\n\n  ```dart\n  BackgroundFetchRegistration result = await fetchMgr.get('abc');\n  ```\n\n  The underlying JS Promise-to-Future mechanism will be exposed as a public API\n  in the future.\n\n#### Dart Dev Compiler (DDC)\n\n- dartdevc will no longer throw an error from `is` checks that return a\n  different result in weak mode (SDK [issue 28988][sdk#28988]). For example:\n\n  ```dart\n  main() {\n    List l = [];\n    // Prints \"false\", does not throw.\n    print(l is List<String>);\n  }\n  ```\n\n- Failed `as` casts on `Iterable<T>`, `Map<T>`, `Future<T>`, and `Stream<T>` are\n  no longer ignored. These failures were ignored to make it easier to migrate\n  Dart 1 code to strong mode, but ignoring them is a hole in the type system.\n  This closes part of that hole. (We still need to stop ignoring \"as\" cast\n  failures on function types, and implicit cast failures on the above types and\n  function types.)\n\n[sdk#28988]: https://github.com/dart-lang/sdk/issues/28988\n\n#### dart2js\n\n- dart2js now compiles programs with Dart 2.0 semantics. Apps are expected to be\n  bigger than before, because Dart 2.0 has many more implicit checks (similar to\n  the `--checked` flag in Dart 1.0).\n\n  We exposed a `--omit-implicit-checks` flag which removes most of the extra\n  implicit checks. Only use this if you have enough test coverage to know that\n  the app will work well without the checks. If a check would have failed and it\n  is omitted, your app may crash or behave in unexpected ways. This flag is\n  similar to `--trust-type-annotations` in Dart 1.0.\n\n- dart2js replaced its front-end with the common front-end (CFE). Thanks to the\n  CFE, dart2js errors are more consistent with all other Dart tools.\n\n- dart2js replaced its source-map implementation. There aren't any big\n  differences, but more data is emitted for synthetic code generated by the\n  compiler.\n\n- `dart:mirrors` support was removed. Frameworks are encouraged to use\n  code-generation instead. Conditional imports indicate that mirrors are not\n  supported, and any API in the mirrors library will throw at runtime.\n\n- The generated output of dart2js can now be run as a webworker.\n\n- `dart:isolate` support was removed. To launch background tasks, please use\n  webworkers instead. APIs for webworkers can be accessed from `dart:html` or\n  JS-interop.\n\n- dart2js no longer supports the `--package-root` flag. This flag was deprecated\n  in favor of `--packages` long ago.\n\n### Tool Changes\n\n#### Analyzer\n\n- The analyzer will no longer issue a warning when a generic type parameter is\n  used as the type in an instance check. For example:\n\n  ```dart\n  test<T>() {\n    print(3 is T); // No warning\n  }\n  ```\n\n- New static checking of `@visibleForTesting` elements. Accessing a method,\n  function, class, etc. annotated with `@visibleForTesting` from a file _not_ in\n  a `test/` directory will result in a new hint ([issue 28273][]).\n\n- Static analysis now respects functions annotated with `@alwaysThrows` ([issue\n  31384][]).\n\n- New hints added:\n\n  - `NULL_AWARE_BEFORE_OPERATOR` when an operator is used after a null-aware\n    access. For example:\n\n    ```dart\n    x?.a - ''; // HINT\n    ```\n\n  - `NULL_AWARE_IN_LOGICAL_OPERATOR` when an expression with null-aware access\n    is used as a condition in logical operators. For example:\n\n    ```dart\n    x.a || x?.b; // HINT\n    ```\n\n- The command line analyzer (dartanalyzer) and the analysis server no longer\n  treat directories named `packages` specially. Previously they had ignored\n  these directories - and their contents - from the point of view of analysis.\n  Now they'll be treated just as regular directories. This special-casing of\n  `packages` directories was to support using symlinks for package: resolution;\n  that functionality is now handled by `.packages` files.\n\n- New static checking of duplicate shown or hidden names in an export directive\n  ([issue 33182][]).\n\n- The analysis server will now only analyze code in Dart 2 mode ('strong mode').\n  It will emit warnings for analysis options files that have\n  `strong-mode: false` set (and will emit a hint for `strong-mode: true`, which\n  is no longer necessary).\n\n- The dartanalyzer `--strong` flag is now deprecated and ignored. The\n  command-line analyzer now only analyzes code in strong mode.\n\n[issue 28273]: https://github.com/dart-lang/sdk/issues/28273\n[issue 31384]: https://github.com/dart-lang/sdk/issues/31384\n[issue 33182]: https://github.com/dart-lang/sdk/issues/33182\n\n#### dartfmt\n\n- Support `assert()` in const constructor initializer lists.\n\n- Better formatting for multi-line strings in argument lists.\n\n- Force splitting an empty block as the then body of an if with an else.\n\n- Support metadata annotations on enum cases.\n\n- Add `--fix` to remove unneeded `new` and `const` keywords, and change `:` to\n  `=` before named parameter default values.\n\n- Change formatting rules around static methods to uniformly format code with\n  and without `new` and `const`.\n\n- Format expressions inside string interpolation.\n\n#### Pub\n\n- Pub has a brand new version solver! It supports all the same features as the\n  old version solver, but it's much less likely to stall out on difficult\n  package graphs, and it's much clearer about why a solution can't be found when\n  version solving fails.\n\n- Remove support for transformers, `pub build`, and `pub serve`. Use the [new\n  build system][transformers] instead.\n\n- There is now a default SDK constraint of `<2.0.0` for any package with no\n  existing upper bound. This allows us to move more safely to 2.0.0. All new\n  packages published on pub will now require an upper bound SDK constraint so\n  future major releases of Dart don't destabilize the package ecosystem.\n\n  All SDK constraint exclusive upper bounds are now treated as though they allow\n  pre-release versions of that upper bound. For example, the SDK constraint\n  `>=1.8.0 <2.0.0` now allows pre-release SDK versions such as `2.0.0-beta.3.0`.\n  This allows early adopters to try out packages that don't explicitly declare\n  support for the new version yet. You can disable this functionality by setting\n  the `PUB_ALLOW_PRERELEASE_SDK` environment variable to `false`.\n\n- Allow depending on a package in a subdirectory of a Git repository. Git\n  dependencies may now include a `path` parameter, indicating that the package\n  exists in a subdirectory of the Git repository. For example:\n\n  ```yaml\n  dependencies:\n    foobar:\n      git:\n        url: git://github.com/dart-lang/multi_package_repo\n        path: pkg/foobar\n  ```\n\n- Added an `--executables` option to `pub deps` command. This will list all\n  available executables that can be run with `pub run`.\n\n- The Flutter `sdk` source will now look for packages in\n  `flutter/bin/cache/pkg/` as well as `flutter/packages/`. In particular, this\n  means that packages can depend on the `sky_engine` package from the `sdk`\n  source ([issue 1775][pub#1775]).\n\n- Pub now caches compiled packages and snapshots in the `.dart_tool/pub`\n  directory, rather than the `.pub` directory ([issue 1795][pub#1795]).\n\n- Other bug fixes and improvements.\n\n[issue 30246]: https://github.com/dart-lang/sdk/issues/30246\n[pub#1679]: https://github.com/dart-lang/pub/issues/1679\n[pub#1684]: https://github.com/dart-lang/pub/issues/1684\n[pub#1775]: https://github.com/dart-lang/pub/issues/1775\n[pub#1795]: https://github.com/dart-lang/pub/issues/1795\n[pub#1823]: https://github.com/dart-lang/pub/issues/1823\n\n## 1.24.3 - 2017-12-14\n\n- Fix for constructing a new SecurityContext that contains the built-in\n  certificate authority roots\n  ([issue 24693](https://github.com/dart-lang/sdk/issues/24693)).\n\n### Core library changes\n\n- `dart:io`\n  - Unified backends for `SecureSocket`, `SecurityContext`, and\n    `X509Certificate` to be consistent across all platforms. All `SecureSocket`,\n    `SecurityContext`, and `X509Certificate` properties and methods are now\n    supported on iOS and OSX.\n\n## 1.24.2 - 2017-06-22\n\n- Fixes for debugging in Dartium.\n  - Fix DevConsole crash with JS\n    ([issue 29873](https://github.com/dart-lang/sdk/issues/29873)).\n  - Fix debugging in WebStorm, NULL returned for JS objects\n    ([issue 29854](https://github.com/dart-lang/sdk/issues/29854)).\n\n## 1.24.1 - 2017-06-14\n\n- Bug fixes for dartdevc support in `pub serve`.\n  - Fixed module config invalidation logic so modules are properly recalculated\n    when package layout changes.\n  - Fixed exception when handling require.js errors that aren't script load\n    errors.\n  - Fixed an issue where requesting the bootstrap.js file before the dart.js\n    file would result in a 404.\n  - Fixed a Safari issue during bootstrapping (note that Safari is still not\n    officially supported but does work for trivial examples).\n- Fix for a Dartium issue where there was no sound in checked mode\n  ([issue 29810](https://github.com/dart-lang/sdk/issues/29810)).\n\n## 1.24.0 - 2017-06-12\n\n### Language\n\n- During a dynamic type check, `void` is not required to be `null` anymore. In\n  practice, this makes overriding `void` functions with non-`void` functions\n  safer.\n\n- During static analysis, a function or setter declared using `=>` with return\n  type `void` now allows the returned expression to have any type. For example,\n  assuming the declaration `int x;`, it is now type correct to have\n  `void f() => ++x;`.\n\n- A new function-type syntax has been added to the language. **Warning**: _In\n  Dart 1.24, this feature is incomplete, and not stable in the Analyzer._\n\n  Intuitively, the type of a function can be constructed by textually replacing\n  the function's name with `Function` in its declaration. For instance, the type\n  of `void foo() {}` would be `void Function()`. The new syntax may be used\n  wherever a type can be written. It is thus now possible to declare fields\n  containing functions without needing to write typedefs: `void Function() x;`.\n  The new function type has one restriction: it may not contain the old-style\n  function-type syntax for its parameters. The following is thus illegal:\n  `void Function(int f())`. `typedefs` have been updated to support this new\n  syntax.\n\n  Examples:\n\n  ```dart\n  typedef F = void Function();  // F is the name for a `void` callback.\n  int Function(int) f;  // A field `f` that contains an int->int function.\n\n  class A<T> {\n    // The parameter `callback` is a function that takes a `T` and returns\n    // `void`.\n    void forEach(void Function(T) callback);\n  }\n\n  // The new function type supports generic arguments.\n  typedef Invoker = T Function<T>(T Function() callback);\n  ```\n\n### Core library changes\n\n- `dart:async`, `dart:core`, `dart:io`\n\n  - Adding to a closed sink, including `IOSink`, is no longer not allowed. In\n    1.24, violations are only reported (on stdout or stderr), but a future\n    version of the Dart SDK will change this to throwing a `StateError`.\n\n- `dart:convert`\n\n  - **BREAKING** Removed the deprecated `ChunkedConverter` class.\n  - JSON maps are now typed as `Map<String, dynamic>` instead of\n    `Map<dynamic, dynamic>`. A JSON-map is not a `HashMap` or `LinkedHashMap`\n    anymore (but just a `Map`).\n\n- `dart:io`\n\n  - Added `Platform.localeName`, needed for accessing the locale on platforms\n    that don't store it in an environment variable.\n  - Added `ProcessInfo.currentRss` and `ProcessInfo.maxRss` for inspecting the\n    Dart VM process current and peak resident set size.\n  - Added `RawSynchronousSocket`, a basic synchronous socket implementation.\n\n- `dart:` web APIs have been updated to align with Chrome v50. This change\n  includes **a large number of changes**, many of which are breaking. In some\n  cases, new class names may conflict with names that exist in existing code.\n\n- `dart:html`\n\n  - **REMOVED** classes: `Bluetooth`, `BluetoothDevice`,\n    `BluetoothGattCharacteristic`, `BluetoothGattRemoteServer`,\n    `BluetoothGattService`, `BluetoothUuid`, `CrossOriginConnectEvent`,\n    `DefaultSessionStartEvent`, `DomSettableTokenList`, `MediaKeyError`,\n    `PeriodicSyncEvent`, `PluginPlaceholderElement`, `ReadableStream`,\n    `StashedMessagePort`, `SyncRegistration`\n\n  - **REMOVED** members:\n\n    - `texImage2DCanvas` was removed from `RenderingContext`.\n    - `endClip` and `startClip` were removed from `Animation`.\n    - `after` and `before` were removed from `CharacterData`, `ChildNode` and\n      `Element`.\n    - `keyLocation` was removed from `KeyboardEvent`. Use `location` instead.\n    - `generateKeyRequest`, `keyAddedEvent`, `keyErrorEvent`, `keyMessageEvent`,\n      `mediaGroup`, `needKeyEvent`, `onKeyAdded`, `onKeyError`, `onKeyMessage`,\n      and `onNeedKey` were removed from `MediaElement`.\n    - `getStorageUpdates` was removed from `Navigator`\n    - `status` was removed from `PermissionStatus`\n    - `getAvailability` was removed from `PreElement`\n\n  - Other behavior changes:\n    - URLs returned in CSS or html are formatted with quoted string. Like\n      `url(\"http://google.com\")` instead of `url(http://google.com)`.\n    - Event timestamp property type changed from `int` to `num`.\n    - Chrome introduced slight layout changes of UI objects. In addition many\n      height/width dimensions are returned in subpixel values (`num` instead of\n      whole numbers).\n    - `setRangeText` with a `selectionMode` value of 'invalid' is no longer\n      valid. Only \"select\", \"start\", \"end\", \"preserve\" are allowed.\n\n- `dart:svg`\n\n  - A large number of additions and removals. Review your use of `dart:svg`\n    carefully.\n\n- `dart:web_audio`\n\n  - new method on `AudioContext` - `createIirFilter` returns a new class\n    `IirFilterNode`.\n\n- `dart:web_gl`\n\n  - new classes: `CompressedTextureAstc`, `ExtColorBufferFloat`,\n    `ExtDisjointTimerQuery`, and `TimerQueryExt`.\n\n  - `ExtFragDepth` added: `readPixels2` and `texImage2D2`.\n\n#### Strong Mode\n\n- Removed ad hoc `Future.then` inference in favor of using `FutureOr`. Prior to\n  adding `FutureOr` to the language, the analyzer implemented an ad hoc type\n  inference for `Future.then` (and overrides) treating it as if the onValue\n  callback was typed to return `FutureOr` for the purposes of inference. This ad\n  hoc inference has been removed now that `FutureOr` has been added.\n\n  Packages that implement `Future` must either type the `onValue` parameter to\n  `.then` as returning `FutureOr<T>`, or else must leave the type of the\n  parameter entirely to allow inference to fill in the type.\n\n- During static analysis, a function or setter declared using `=>` with return\n  type `void` now allows the returned expression to have any type.\n\n### Tool Changes\n\n- Dartium\n\n  Dartium is now based on Chrome v50. See _Core library changes_ above for\n  details on the changed APIs.\n\n- Pub\n\n  - `pub build` and `pub serve`\n\n    - Added support for the Dart Development Compiler.\n\n      Unlike dart2js, this new compiler is modular, which allows pub to do\n      incremental re-builds for `pub serve`, and potentially `pub build` in the\n      future.\n\n      In practice what that means is you can edit your Dart files, refresh in\n      Chrome (or other supported browsers), and see your edits almost\n      immediately. This is because pub is only recompiling your package, not all\n      packages that you depend on.\n\n      There is one caveat with the new compiler, which is that your package and\n      your dependencies must all be strong mode clean. If you are getting an\n      error compiling one of your dependencies, you will need to file bugs or\n      send pull requests to get them strong mode clean.\n\n      There are two ways of opting into the new compiler:\n\n      - Use the new `--web-compiler` flag, which supports `dartdevc`, `dart2js`\n        or `none` as options. This is the easiest way to try things out without\n        changing the default.\n\n      - Add config to your pubspec. There is a new `web` key which supports a\n        single key called `compiler`. This is a map from mode names to compiler\n        to use. For example, to default to dartdevc in debug mode you can add\n        the following to your pubspec:\n\n        ```yaml\n        web:\n          compiler:\n            debug: dartdevc\n        ```\n\n      You can also use the new compiler to run your tests in Chrome much more\n      quickly than you can with dart2js. In order to do that, run\n      `pub serve test --web-compiler=dartdevc`, and then run\n      `pub run test -p chrome --pub-serve=8080`.\n\n    - The `--no-dart2js` flag has been deprecated in favor of\n      `--web-compiler=none`.\n\n    - `pub build` will use a failing exit code if there are errors in any\n      transformer.\n\n  - `pub publish`\n\n    - Added support for the UNLICENSE file.\n\n    - Packages that depend on the Flutter SDK may be published.\n\n  - `pub get` and `pub upgrade`\n\n    - Don't dump a stack trace when a network error occurs while fetching\n      packages.\n\n- dartfmt\n  - Preserve type parameters in new generic function typedef syntax.\n  - Add self-test validation to ensure formatter bugs do not cause user code to\n    be lost.\n\n### Infrastructure changes\n\n- As of this release, we'll show a warning when using the MIPS architecture.\n  Unless we learn about any critical use of Dart on MIPS in the meantime, we're\n  planning to deprecate support for MIPS starting with the next stable release.\n\n## 1.23.0 - 2017-04-21\n\n#### Strong Mode\n\n- Breaking change - it is now a strong mode error if a mixin causes a name\n  conflict between two private members (field/getter/setter/method) from a\n  different library. (SDK issue\n  [28809](https://github.com/dart-lang/sdk/issues/28809)).\n\nlib1.dart:\n\n```dart\nclass A {\n  int _x;\n}\n\nclass B {\n  int _x;\n}\n```\n\nlib2.dart:\n\n```dart\nimport 'lib1.dart';\n\nclass C extends A with B {}\n```\n\n```\n    error • The private name _x, defined by B, conflicts with the same name defined by A at tmp/lib2.dart:3:24 • private_collision_in_mixin_application\n```\n\n- Breaking change - strong mode will prefer the expected type to infer generic\n  types, functions, and methods (SDK issue\n  [27586](https://github.com/dart-lang/sdk/issues/27586)).\n\n  ```dart\n  main() {\n    List<Object> foo = /*infers: <Object>*/['hello', 'world'];\n    var bar = /*infers: <String>*/['hello', 'world'];\n  }\n  ```\n\n- Strong mode inference error messages are improved (SDK issue\n  [29108](https://github.com/dart-lang/sdk/issues/29108)).\n\n  ```dart\n  import 'dart:math';\n  test(Iterable/* fix is to add <num> here */ values) {\n    num n = values.fold(values.first as num, max);\n  }\n  ```\n\n  Now produces the error on the generic function \"max\":\n\n  ```\n  Couldn't infer type parameter 'T'.\n\n  Tried to infer 'dynamic' for 'T' which doesn't work:\n    Function type declared as '<T extends num>(T, T) → T'\n                  used where  '(num, dynamic) → num' is required.\n\n  Consider passing explicit type argument(s) to the generic.\n  ```\n\n- Strong mode supports overriding fields, `@virtual` is no longer required (SDK\n  issue [28120](https://github.com/dart-lang/sdk/issues/28120)).\n\n  ```dart\n  class C {\n    int x = 42;\n  }\n  class D extends C {\n    get x {\n      print(\"x got called\");\n      return super.x;\n    }\n  }\n  main() {\n    print(new D().x);\n  }\n  ```\n\n- Strong mode down cast composite warnings are no longer issued by default. (SDK\n  issue [28588](https://github.com/dart-lang/sdk/issues/28588)).\n\n```dart\nvoid test() {\n  List untyped = [];\n  List<int> typed = untyped; // No down cast composite warning\n}\n```\n\nTo opt back into the warnings, add the following to the\n[.analysis_options](https://dart.dev/guides/language/analysis-options)\nfile for your project.\n\n```\nanalyzer:\n  errors:\n    strong_mode_down_cast_composite: warning\n```\n\n### Core library changes\n\n- `dart:core`\n  - Added `Uri.isScheme` function to check the scheme of a URI. Example:\n    `uri.isScheme(\"http\")`. Ignores case when comparing.\n  - Make `UriData.parse` validate its input better. If the data is base-64\n    encoded, the data is normalized wrt. alphabet and padding, and it contains\n    invalid base-64 data, parsing fails. Also normalizes non-base-64 data.\n- `dart:io`\n  - Added functions `File.lastAccessed`, `File.lastAccessedSync`,\n    `File.setLastModified`, `File.setLastModifiedSync`, `File.setLastAccessed`,\n    and `File.setLastAccessedSync`.\n  - Added `{Stdin,Stdout}.supportsAnsiEscapes`.\n\n### Dart VM\n\n- Calls to `print()` and `Stdout.write*()` now correctly print unicode\n  characters to the console on Windows. Calls to `Stdout.add*()` behave as\n  before.\n\n### Tool changes\n\n- Analysis\n\n  - `dartanalyzer` now follows the same rules as the analysis server to find an\n    analysis options file, stopping when an analysis options file is found:\n    - Search up the directory hierarchy looking for an analysis options file.\n    - If analyzing a project referencing the [Flutter](https://flutter.io/)\n      package, then use the\n      [default Flutter analysis options](https://github.com/flutter/flutter/blob/master/packages/flutter/lib/analysis_options_user.yaml)\n      found in `package:flutter`.\n    - If in a Bazel workspace, then use the analysis options in\n      `package:dart.analysis_options/default.yaml` if it exists.\n    - Use the default analysis options rules.\n  - In addition, specific to `dartanalyzer`:\n    - an analysis options file can be specified on the command line via\n      `--options` and that file will be used instead of searching for an\n      analysis options file.\n    - any analysis option specified on the command line (e.g. `--strong` or\n      `--no-strong`) takes precedence over any corresponding value specified in\n      the analysis options file.\n\n- Dartium, dart2js, and DDC\n\n  - Imports to `dart:io` are allowed, but the imported library is not supported\n    and will likely fail on most APIs at runtime. This change was made as a\n    stopgap measure to make it easier to write libraries that share code between\n    platforms (like package `http`). This might change again when configuration\n    specific imports are supported.\n\n- Pub\n\n  - Now sends telemetry data to `pub.dartlang.org` to allow better understanding\n    of why a particular package is being accessed.\n  - `pub publish`\n    - Warns if a package imports a package that's not a dependency from within\n      `lib/` or `bin/`, or a package that's not a dev dependency from within\n      `benchmark/`, `example/`, `test/` or `tool/`.\n    - No longer produces \"UID too large\" errors on OS X. All packages are now\n      uploaded with the user and group names set to \"pub\".\n    - No longer fails with a stack overflow when uploading a package that uses\n      Git submodules.\n  - `pub get` and `pub upgrade`\n    - Produce more informative error messages if they're run directly in a\n      package that uses Flutter.\n    - Properly unlock SDK and path dependencies if they have a new version\n      that's also valid according to the user's pubspec.\n\n- dartfmt\n  - Support new generic function typedef syntax.\n  - Make the precedence of cascades more visible.\n  - Fix a couple of places where spurious newlines were inserted.\n  - Correctly report unchanged formatting when reading from stdin.\n  - Ensure space between `-` and `--`. Code that does this is pathological, but\n    it technically meant dartfmt could change the semantics of the code.\n  - Preserve a blank line between enum cases.\n  - Other small formatting tweaks.\n\n## 1.22.1 - 2017-02-22\n\nPatch release, resolves two issues:\n\n- Dart VM crash: [Issue 28072](https://github.com/dart-lang/sdk/issues/28757)\n\n- Dart VM bug combining types, await, and deferred loading:\n  [Issue 28678](https://github.com/dart-lang/sdk/issues/28678)\n\n## 1.22.0 - 2017-02-14\n\n### Language\n\n- Breaking change:\n  ['Generalized tear-offs'](https://github.com/gbracha/generalizedTearOffs/blob/master/proposal.md)\n  are no longer supported, and will cause errors. We updated the language spec\n  and added warnings in 1.21, and are now taking the last step to fully\n  de-support them. They were previously only supported in the VM, and there are\n  almost no known uses of them in the wild.\n\n- The `assert()` statement has been expanded to support an optional second\n  `message` argument (SDK issue\n  [27342](https://github.com/dart-lang/sdk/issues/27342)).\n\n  The message is displayed if the assert fails. It can be any object, and it is\n  accessible as `AssertionError.message`. It can be used to provide more user\n  friendly exception outputs. As an example, the following assert:\n\n  ```dart\n  assert(configFile != null, \"Tool config missing. Please see https://goo.gl/k8iAi for details.\");\n  ```\n\n  would produce the following exception output:\n\n  ```\n  Unhandled exception:\n  'file:///Users/mit/tmp/tool/bin/main.dart': Failed assertion: line 9 pos 10:\n  'configFile != null': Tool config missing. Please see https://goo.gl/k8iAi for details.\n  #0      _AssertionError._doThrowNew (dart:core-patch/errors_patch.dart:33)\n  #1      _AssertionError._throwNew (dart:core-patch/errors_patch.dart:29)\n  #2      main (file:///Users/mit/tmp/tool/bin/main.dart:9:10)\n  ```\n\n- The `Null` type has been moved to the bottom of the type hierarchy. As such,\n  it is considered a subtype of every other type. The `null` _literal_ was\n  always treated as a bottom type. Now the named class `Null` is too:\n\n  ```dart\n  const empty = <Null>[];\n\n  String concatenate(List<String> parts) => parts.join();\n  int sum(List<int> numbers) => numbers.fold(0, (sum, n) => sum + n);\n\n  concatenate(empty); // OK.\n  sum(empty); // OK.\n  ```\n\n- Introduce `covariant` modifier on parameters. It indicates that the parameter\n  (and the corresponding parameter in any method that overrides it) has looser\n  override rules. In strong mode, these require a runtime type check to maintain\n  soundness, but enable an architectural pattern that is useful in some code.\n\n  It lets you specialize a family of classes together, like so:\n\n  ```dart\n  abstract class Predator {\n    void chaseAndEat(covariant Prey p);\n  }\n\n  abstract class Prey {}\n\n  class Mouse extends Prey {}\n\n  class Seal extends Prey {}\n\n  class Cat extends Predator {\n    void chaseAndEat(Mouse m) => ...\n  }\n\n  class Orca extends Predator {\n    void chaseAndEat(Seal s) => ...\n  }\n  ```\n\n  This isn't statically safe, because you could do:\n\n  ```dart\n  Predator predator = new Cat(); // Upcast.\n  predator.chaseAndEat(new Seal()); // Cats can't eat seals!\n  ```\n\n  To preserve soundness in strong mode, in the body of a method that uses a\n  covariant override (here, `Cat.chaseAndEat()`), the compiler automatically\n  inserts a check that the parameter is of the expected type. So the compiler\n  gives you something like:\n\n  ```dart\n  class Cat extends Predator {\n    void chaseAndEat(o) {\n      var m = o as Mouse;\n      ...\n    }\n  }\n  ```\n\n  Spec mode allows this unsound behavior on all parameters, even though users\n  rarely rely on it. Strong mode disallowed it initially. Now, strong mode lets\n  you opt into this behavior in the places where you do want it by using this\n  modifier. Outside of strong mode, the modifier is ignored.\n\n- Change instantiate-to-bounds rules for generic type parameters when running in\n  strong mode. If you leave off the type parameters from a generic type, we need\n  to decide what to fill them in with. Dart 1.0 says just use `dynamic`, but\n  that isn't sound:\n\n  ```dart\n  class Abser<T extends num> {\n     void absThis(T n) { n.abs(); }\n  }\n\n  var a = new Abser(); // Abser<dynamic>.\n  a.absThis(\"not a num\");\n  ```\n\n  We want the body of `absThis()` to be able to safely assume `n` is at least a\n  `num` -- that's why there's a constraint on T, after all. Implicitly using\n  `dynamic` as the type parameter in this example breaks that.\n\n  Instead, strong mode uses the bound. In the above example, it fills it in with\n  `num`, and then the second line where a string is passed becomes a static\n  error.\n\n  However, there are some cases where it is hard to figure out what that default\n  bound should be:\n\n  ```dart\n  class RuhRoh<T extends Comparable<T>> {}\n  ```\n\n  Strong mode's initial behavior sometimes produced surprising, unintended\n  results. For 1.22, we take a simpler approach and then report an error if a\n  good default type argument can't be found.\n\n### Core libraries\n\n- Define `FutureOr<T>` for code that works with either a future or an immediate\n  value of some type. For example, say you do a lot of text manipulation, and\n  you want a handy function to chain a bunch of them:\n\n  ```dart\n  typedef String StringSwizzler(String input);\n\n  String swizzle(String input, List<StringSwizzler> swizzlers) {\n    var result = input;\n    for (var swizzler in swizzlers) {\n      result = swizzler(result);\n    }\n\n    return result;\n  }\n  ```\n\n  This works fine:\n\n  ```dart\n  main() {\n    var result = swizzle(\"input\", [\n      (s) => s.toUpperCase(),\n      (s) => () => s * 2)\n    ]);\n    print(result); // \"INPUTINPUT\".\n  }\n  ```\n\n  Later, you realize you'd also like to support swizzlers that are asynchronous\n  (maybe they look up synonyms for words online). You could make your API\n  strictly asynchronous, but then users of simple synchronous swizzlers have to\n  manually wrap the return value in a `Future.value()`. Ideally, your\n  `swizzle()` function would be \"polymorphic over asynchrony\". It would allow\n  both synchronous and asynchronous swizzlers. Because `await` accepts immediate\n  values, it is easy to implement this dynamically:\n\n  ```dart\n  Future<String> swizzle(String input, List<StringSwizzler> swizzlers) async {\n    var result = input;\n    for (var swizzler in swizzlers) {\n      result = await swizzler(result);\n    }\n\n    return result;\n  }\n\n  main() async {\n    var result = swizzle(\"input\", [\n      (s) => s.toUpperCase(),\n      (s) => new Future.delayed(new Duration(milliseconds: 40), () => s * 2)\n    ]);\n    print(await result);\n  }\n  ```\n\n  What should the declared return type on StringSwizzler be? In the past, you\n  had to use `dynamic` or `Object`, but that doesn't tell the user much. Now,\n  you can do:\n\n  ```dart\n  typedef FutureOr<String> StringSwizzler(String input);\n  ```\n\n  Like the name implies, `FutureOr<String>` is a union type. It can be a\n  `String` or a `Future<String>`, but not anything else. In this case, that's\n  not super useful beyond just stating a more precise type for readers of the\n  code. It does give you a little better error checking in code that uses the\n  result of that.\n\n  `FutureOr<T>` becomes really important in _generic_ methods like\n  `Future.then()`. In those cases, having the type system understand this\n  magical union type helps type inference figure out the type argument of\n  `then()` based on the closure you pass it.\n\n  Previously, strong mode had hard-coded rules for handling `Future.then()`\n  specifically. `FutureOr<T>` exposes that functionality so third-party APIs can\n  take advantage of it too.\n\n### Tool changes\n\n- Dart2Js\n\n  - Remove support for (long-time deprecated) mixin typedefs.\n\n- Pub\n\n  - Avoid using a barback asset server for executables unless they actually use\n    transformers. This makes precompilation substantially faster, produces\n    better error messages when precompilation fails, and allows\n    globally-activated executables to consistently use the\n    `Isolate.resolvePackageUri()` API.\n\n  - On Linux systems, always ignore packages' original file owners and\n    permissions when extracting those packages. This was already the default\n    under most circumstances.\n\n  - Properly close the standard input stream of child processes started using\n    `pub run`.\n\n  - Handle parse errors from the package cache more gracefully. A package whose\n    pubspec can't be parsed will now be ignored by `pub get --offline` and\n    deleted by `pub cache repair`.\n\n  - Make `pub run` run executables in spawned isolates. This lets them handle\n    signals and use standard IO reliably.\n\n  - Fix source-maps produced by dart2js when running in `pub serve`: URL\n    references to assets from packages match the location where `pub serve`\n    serves them (`packages/package_name/` instead of\n    `../packages/package_name/`).\n\n### Infrastructure changes\n\n- The SDK now uses GN rather than gyp to generate its build files, which will\n  now be exclusively ninja flavored. Documentation can be found on our\n  [wiki](https://github.com/dart-lang/sdk/wiki/Building-with-GN). Also see the\n  help message of `tools/gn.py`. This change is in response to the deprecation\n  of gyp. Build file generation with gyp will continue to be available in this\n  release by setting the environment variable `DART_USE_GYP` before running\n  `gclient sync` or `gclient runhooks`, but this will be removed in a future\n  release.\n\n## 1.21.1 - 2017-01-13\n\nPatch release, resolves one issue:\n\n- Dart VM: Snapshots of generic functions fail.\n  [Issue 28072](https://github.com/dart-lang/sdk/issues/28072)\n\n## 1.21.0 - 2016-12-07\n\n### Language\n\n- Support generic method syntax. Type arguments are not available at runtime.\n  For details, check the\n  [informal specification](https://gist.github.com/eernstg/4353d7b4f669745bed3a5423e04a453c).\n- Support access to initializing formals, e.g., the use of `x` to initialize `y`\n  in `class C { var x, y; C(this.x): y = x; }`. Please check the\n  [informal specification](https://gist.github.com/eernstg/cff159be9e34d5ea295d8c24b1a3e594)\n  for details.\n- Don't warn about switch case fallthrough if the case ends in a `rethrow`\n  statement. (SDK issue [27650](https://github.com/dart-lang/sdk/issues/27650))\n- Also don't warn if the entire switch case is wrapped in braces - as long as\n  the block ends with a `break`, `continue`, `rethrow`, `return` or `throw`.\n- Allow `=` as well as `:` as separator for named parameter default values.\n\n  ```dart\n  enableFlags({bool hidden: false}) { … }\n  ```\n\n  can now be replaced by\n\n  ```dart\n  enableFlags({bool hidden = false}) { … }\n  ```\n\n  (SDK issue [27559](https://github.com/dart-lang/sdk/issues/27559))\n\n### Core library changes\n\n- `dart:core`: `Set.difference` now takes a `Set<Object>` as argument. (SDK\n  issue [27573](https://github.com/dart-lang/sdk/issues/27573))\n\n- `dart:developer`\n\n  - Added `Service` class.\n    - Allows inspecting and controlling the VM service protocol HTTP server.\n    - Provides an API to access the ID of an `Isolate`.\n\n### Tool changes\n\n- Dart Dev Compiler\n\n  - Support calls to `loadLibrary()` on deferred libraries. Deferred libraries\n    are still loaded eagerly. (SDK issue\n    [27343](https://github.com/dart-lang/sdk/issues/27343))\n\n## 1.20.1 - 2016-10-13\n\nPatch release, resolves one issue:\n\n- Dartium: Fixes a bug that caused crashes. No issue filed.\n\n### Strong Mode\n\n- It is no longer a warning when casting from dynamic to a composite type (SDK\n  issue [27766](https://github.com/dart-lang/sdk/issues/27766)).\n\n  ```dart\n  main() {\n    dynamic obj = <int>[1, 2, 3];\n    // This is now allowed without a warning.\n    List<int> list = obj;\n  }\n  ```\n\n## 1.20.0 - 2016-10-11\n\n### Dart VM\n\n- We have improved the way that the VM locates the native code library for a\n  native extension (e.g. `dart-ext:` import). We have updated this\n  [article on native extensions](https://dart.dev/server/c-interop-native-extensions)\n  to reflect the VM's improved behavior.\n\n- Linux builds of the VM will now use the `tcmalloc` library for memory\n  allocation. This has the advantages of better debugging and profiling support\n  and faster small allocations, with the cost of slightly larger initial memory\n  footprint, and slightly slower large allocations.\n\n- We have improved the way the VM searches for trusted root certificates for\n  secure socket connections on Linux. First, the VM will look for trusted root\n  certificates in standard locations on the file system\n  (`/etc/pki/tls/certs/ca-bundle.crt` followed by `/etc/ssl/certs`), and only if\n  these do not exist will it fall back on the builtin trusted root certificates.\n  This behavior can be overridden on Linux with the new flags\n  `--root-certs-file` and `--root-certs-cache`. The former is the path to a file\n  containing the trusted root certificates, and the latter is the path to a\n  directory containing root certificate files hashed using `c_rehash`.\n\n- The VM now throws a catchable `Error` when method compilation fails. This\n  allows easier debugging of syntax errors, especially when testing. (SDK issue\n  [23684](https://github.com/dart-lang/sdk/issues/23684))\n\n### Core library changes\n\n- `dart:core`: Remove deprecated `Resource` class. Use the class in\n  `package:resource` instead.\n- `dart:async`\n  - `Future.wait` now catches synchronous errors and returns them in the\n    returned Future. (SDK issue\n    [27249](https://github.com/dart-lang/sdk/issues/27249))\n  - More aggressively returns a `Future` on `Stream.cancel` operations.\n    Discourages to return `null` from `cancel`. (SDK issue\n    [26777](https://github.com/dart-lang/sdk/issues/26777))\n  - Fixes a few bugs where the cancel future wasn't passed through\n    transformations.\n- `dart:io`\n  - Added `WebSocket.addUtf8Text` to allow sending a pre-encoded text message\n    without a round-trip UTF-8 conversion. (SDK issue\n    [27129](https://github.com/dart-lang/sdk/issues/27129))\n\n### Strong Mode\n\n- Breaking change - it is an error if a generic type parameter cannot be\n  inferred (SDK issue [26992](https://github.com/dart-lang/sdk/issues/26992)).\n\n  ```dart\n  class Cup<T> {\n    Cup(T t);\n  }\n  main() {\n    // Error because:\n    // - if we choose Cup<num> it is not assignable to `cOfInt`,\n    // - if we choose Cup<int> then `n` is not assignable to int.\n    num n;\n    C<int> cOfInt = new C(n);\n  }\n  ```\n\n- New feature - use `@checked` to override a method and tighten a parameter type\n  (SDK issue [25578](https://github.com/dart-lang/sdk/issues/25578)).\n\n  ```dart\n  import 'package:meta/meta.dart' show checked;\n  class View {\n    addChild(View v) {}\n  }\n  class MyView extends View {\n    // this override is legal, it will check at runtime if we actually\n    // got a MyView.\n    addChild(@checked MyView v) {}\n  }\n  main() {\n    dynamic mv = new MyView();\n    mv.addChild(new View()); // runtime error\n  }\n  ```\n\n- New feature - use `@virtual` to allow field overrides in strong mode (SDK\n  issue [27384](https://github.com/dart-lang/sdk/issues/27384)).\n\n  ```dart\n  import 'package:meta/meta.dart' show virtual;\n  class Base {\n    @virtual int x;\n  }\n  class Derived extends Base {\n    int x;\n\n    // Expose the hidden storage slot:\n    int get superX => super.x;\n    set superX(int v) { super.x = v; }\n  }\n  ```\n\n- Breaking change - infer list and map literals from the context type as well as\n  their values, consistent with generic methods and instance creation (SDK issue\n  [27151](https://github.com/dart-lang/sdk/issues/27151)).\n\n  ```dart\n  import 'dart:async';\n  main() async {\n    var b = new Future<B>.value(new B());\n    var c = new Future<C>.value(new C());\n    var/*infer List<Future<A>>*/ list = [b, c];\n    var/*infer List<A>*/ result = await Future.wait(list);\n  }\n  class A {}\n  class B extends A {}\n  class C extends A {}\n  ```\n\n### Tool changes\n\n- `dartfmt` - upgraded to v0.2.10\n\n  - Don't crash on annotations before parameters with trailing commas.\n  - Always split enum declarations if they end in a trailing comma.\n  - Add `--set-exit-if-changed` to set the exit code on a change.\n\n- Pub\n  - Pub no longer generates a `packages/` directory by default. Instead, it\n    generates a `.packages` file, called a package spec. To generate a\n    `packages/` directory in addition to the package spec, use the\n    `--packages-dir` flag with `pub get`, `pub upgrade`, and `pub downgrade`.\n    See the\n    [Good-bye symlinks](http://news.dartlang.org/2016/10/good-bye-symlinks.html)\n    article for details.\n\n## 1.19.1 - 2016-09-08\n\nPatch release, resolves one issue:\n\n- Dartdoc: Fixes a bug that prevented generation of docs. (Dartdoc issue\n  [1233](https://github.com/dart-lang/dartdoc/issues/1233))\n\n## 1.19.0 - 2016-08-26\n\n### Language changes\n\n- The language now allows a trailing comma after the last argument of a call and\n  the last parameter of a function declaration. This can make long argument or\n  parameter lists easier to maintain, as commas can be left as-is when\n  reordering lines. For details, see SDK issue\n  [26644](https://github.com/dart-lang/sdk/issues/26644).\n\n### Tool Changes\n\n- `dartfmt` - upgraded to v0.2.9+1\n\n  - Support trailing commas in argument and parameter lists.\n  - Gracefully handle read-only files.\n  - About a dozen other bug fixes.\n\n- Pub\n\n  - Added a `--no-packages-dir` flag to `pub get`, `pub upgrade`, and\n    `pub downgrade`. When this flag is passed, pub will not generate a\n    `packages/` directory, and will remove that directory and any symlinks to it\n    if they exist. Note that this replaces the unsupported\n    `--no-package-symlinks` flag.\n\n  - Added the ability for packages to declare a constraint on the [Flutter][]\n    SDK:\n\n    ```yaml\n    environment:\n      flutter: ^0.1.2\n      sdk: >=1.19.0 <2.0.0\n    ```\n\n    A Flutter constraint will only be satisfiable when pub is running in the\n    context of the `flutter` executable, and when the Flutter SDK version\n    matches the constraint.\n\n  - Added `sdk` as a new package source that fetches packages from a hard-coded\n    SDK. Currently only the `flutter` SDK is supported:\n\n    ```yaml\n    dependencies:\n      flutter_driver:\n        sdk: flutter\n        version: ^0.0.1\n    ```\n\n    A Flutter `sdk` dependency will only be satisfiable when pub is running in\n    the context of the `flutter` executable, and when the Flutter SDK contains a\n    package with the given name whose version matches the constraint.\n\n  - `tar` files on Linux are now created with `0` as the user and group IDs.\n    This fixes a crash when publishing packages while using Active Directory.\n\n  - Fixed a bug where packages from a hosted HTTP URL were considered the same\n    as packages from an otherwise-identical HTTPS URL.\n\n  - Fixed timer formatting for timers that lasted longer than a minute.\n\n  - Eliminate some false negatives when determining whether global executables\n    are on the user's executable path.\n\n- `dart2js`\n  - `dart2dart` (aka `dart2js --output-type=dart`) has been removed (this was\n    deprecated in Dart 1.11).\n\n[flutter]: https://flutter.io/\n\n### Dart VM\n\n- The dependency on BoringSSL has been rolled forward. Going forward, builds of\n  the Dart VM including secure sockets will require a compiler with C++11\n  support. For details, see the\n  [Building wiki page](https://github.com/dart-lang/sdk/wiki/Building).\n\n### Strong Mode\n\n- New feature - an option to disable implicit casts (SDK issue\n  [26583](https://github.com/dart-lang/sdk/issues/26583)), see the\n  [documentation](https://github.com/dart-lang/dev_compiler/blob/master/doc/STATIC_SAFETY.md#disable-implicit-casts)\n  for usage instructions and examples.\n\n- New feature - an option to disable implicit dynamic (SDK issue\n  [25573](https://github.com/dart-lang/sdk/issues/25573)), see the\n  [documentation](https://github.com/dart-lang/dev_compiler/blob/master/doc/STATIC_SAFETY.md#disable-implicit-dynamic)\n  for usage instructions and examples.\n\n- Breaking change - infer generic type arguments from the constructor invocation\n  arguments (SDK issue [25220](https://github.com/dart-lang/sdk/issues/25220)).\n\n  ```dart\n  var map = new Map<String, String>();\n\n  // infer: Map<String, String>\n  var otherMap = new Map.from(map);\n  ```\n\n- Breaking change - infer local function return type (SDK issue\n  [26414](https://github.com/dart-lang/sdk/issues/26414)).\n\n  ```dart\n  void main() {\n    // infer: return type is int\n    f() { return 40; }\n    int y = f() + 2; // type checks\n    print(y);\n  }\n  ```\n\n- Breaking change - allow type promotion from a generic type parameter (SDK\n  issue [26414](https://github.com/dart-lang/sdk/issues/26965)).\n\n  ```dart\n  void fn/*<T>*/(/*=T*/ object) {\n    if (object is String) {\n      // Treat `object` as `String` inside this block.\n      // But it will require a cast to pass it to something that expects `T`.\n      print(object.substring(1));\n    }\n  }\n  ```\n\n- Breaking change - smarter inference for Future.then (SDK issue\n  [25944](https://github.com/dart-lang/sdk/issues/25944)). Previous workarounds\n  that use async/await or `.then/*<Future<SomeType>>*/` should no longer be\n  necessary.\n\n  ```dart\n  // This will now infer correctly.\n  Future<List<int>> t2 = f.then((_) => [3]);\n  // This infers too.\n  Future<int> t2 = f.then((_) => new Future.value(42));\n  ```\n\n- Breaking change - smarter inference for async functions (SDK issue\n  [25322](https://github.com/dart-lang/sdk/issues/25322)).\n\n  ```dart\n  void test() async {\n    List<int> x = await [4]; // was previously inferred\n    List<int> y = await new Future.value([4]); // now inferred too\n  }\n  ```\n\n- Breaking change - sideways casts are no longer allowed (SDK issue\n  [26120](https://github.com/dart-lang/sdk/issues/26120)).\n\n## 1.18.1 - 2016-08-02\n\nPatch release, resolves two issues and improves performance:\n\n- Debugger: Fixes a bug that crashes the VM (SDK issue\n  [26941](https://github.com/dart-lang/sdk/issues/26941))\n\n- VM: Fixes an optimizer bug involving closures, try, and await (SDK issue\n  [26948](https://github.com/dart-lang/sdk/issues/26948))\n\n- Dart2js: Speeds up generated code on Firefox\n  (https://codereview.chromium.org/2180533002)\n\n## 1.18.0 - 2016-07-27\n\n### Core library changes\n\n- `dart:core`\n  - Improved performance when parsing some common URIs.\n  - Fixed bug in `Uri.resolve` (SDK issue\n    [26804](https://github.com/dart-lang/sdk/issues/26804)).\n- `dart:io`\n  - Adds file locking modes `FileLock.BLOCKING_SHARED` and\n    `FileLock.BLOCKING_EXCLUSIVE`.\n\n## 1.17.1 - 2016-06-10\n\nPatch release, resolves two issues:\n\n- VM: Fixes a bug that caused crashes in async functions. (SDK issue\n  [26668](https://github.com/dart-lang/sdk/issues/26668))\n\n- VM: Fixes a bug that caused garbage collection of reachable weak properties.\n  (https://codereview.chromium.org/2041413005)\n\n## 1.17.0 - 2016-06-08\n\n### Core library changes\n\n- `dart:convert`\n\n  - Deprecate `ChunkedConverter` which was erroneously added in 1.16.\n\n- `dart:core`\n\n  - `Uri.replace` supports iterables as values for the query parameters.\n  - `Uri.parseIPv6Address` returns a `Uint8List`.\n\n- `dart:io`\n  - Added `NetworkInterface.listSupported`, which is `true` when\n    `NetworkInterface.list` is supported, and `false` otherwise. Currently,\n    `NetworkInterface.list` is not supported on Android.\n\n### Tool Changes\n\n- Pub\n\n  - TAR files created while publishing a package on Mac OS and Linux now use a\n    more portable format.\n\n  - Errors caused by invalid arguments now print the full usage information for\n    the command.\n\n  - SDK constraints for dependency overrides are no longer considered when\n    determining the total SDK constraint for a lockfile.\n\n  - A bug has been fixed in which a lockfile was considered up-to-date when it\n    actually wasn't.\n\n  - A bug has been fixed in which `pub get --offline` would crash when a\n    prerelease version was selected.\n\n- Dartium and content shell\n  - Debugging Dart code inside iframes improved, was broken.\n\n## 1.16.1 - 2016-05-24\n\nPatch release, resolves one issue:\n\n- VM: Fixes a bug that caused intermittent hangs on Windows. (SDK issue\n  [26400](https://github.com/dart-lang/sdk/issues/26400))\n\n## 1.16.0 - 2016-04-26\n\n### Core library changes\n\n- `dart:convert`\n\n  - Added `BASE64URL` codec and corresponding `Base64Codec.urlSafe` constructor.\n\n  - Introduce `ChunkedConverter` and deprecate chunked methods on `Converter`.\n\n- `dart:html`\n\n  There have been a number of **BREAKING** changes to align APIs with recent\n  changes in Chrome. These include:\n\n  - Chrome's `ShadowRoot` interface no longer has the methods `getElementById`,\n    `getElementsByClassName`, and `getElementsByTagName`, e.g.,\n\n    ```dart\n    elem.shadowRoot.getElementsByClassName('clazz')\n    ```\n\n    should become:\n\n    ```dart\n    elem.shadowRoot.querySelectorAll('.clazz')\n    ```\n\n  - The `clipboardData` property has been removed from `KeyEvent` and `Event`.\n    It has been moved to the new `ClipboardEvent` class, which is now used by\n    `copy`, `cut`, and `paste` events.\n\n  - The `layer` property has been removed from `KeyEvent` and `UIEvent`. It has\n    been moved to `MouseEvent`.\n\n  - The `Point get page` property has been removed from `UIEvent`. It still\n    exists on `MouseEvent` and `Touch`.\n\n  There have also been a number of other additions and removals to `dart:html`,\n  `dart:indexed_db`, `dart:svg`, `dart:web_audio`, and `dart:web_gl` that\n  correspond to changes to Chrome APIs between v39 and v45. Many of the breaking\n  changes represent APIs that would have caused runtime exceptions when compiled\n  to JavaScript and run on recent Chrome releases.\n\n- `dart:io`\n  - Added `SecurityContext.alpnSupported`, which is true if a platform supports\n    ALPN, and false otherwise.\n\n### JavaScript interop\n\nFor performance reasons, a potentially **BREAKING** change was added for\nlibraries that use JS interop. Any Dart file that uses `@JS` annotations on\ndeclarations (top-level functions, classes or class members) to interop with\nJavaScript code will require that the file have the annotation `@JS()` on a\nlibrary directive.\n\n```dart\n@JS()\nlibrary my_library;\n```\n\nThe analyzer will enforce this by generating the error:\n\nThe `@JS()` annotation can only be used if it is also declared on the library\ndirective.\n\nIf part file uses the `@JS()` annotation, the library that uses the part should\nhave the `@JS()` annotation e.g.,\n\n```dart\n// library_1.dart\n@JS()\nlibrary library_1;\n\nimport 'package:js/js.dart';\n\npart 'part_1.dart';\n```\n\n```dart\n// part_1.dart\npart of library_1;\n\n@JS(\"frameworkStabilizers\")\nexternal List<FrameworkStabilizer> get frameworkStabilizers;\n```\n\nIf your library already has a JS module e.g.,\n\n```dart\n@JS('array.utils')\nlibrary my_library;\n```\n\nThen your library will work without any additional changes.\n\n### Analyzer\n\n- Static checking of `for in` statements. These will now produce static\n  warnings:\n\n  ```dart\n  // Not Iterable.\n  for (var i in 1234) { ... }\n\n  // String cannot be assigned to int.\n  for (int n in <String>[\"a\", \"b\"]) { ... }\n  ```\n\n### Tool Changes\n\n- Pub\n\n  - `pub serve` now provides caching headers that should improve the performance\n    of requesting large files multiple times.\n\n  - Both `pub get` and `pub upgrade` now have a `--no-precompile` flag that\n    disables precompilation of executables and transformed dependencies.\n\n  - `pub publish` now resolves symlinks when publishing from a Git repository.\n    This matches the behavior it always had when publishing a package that\n    wasn't in a Git repository.\n\n- Dart Dev Compiler\n\n  - The **experimental** `dartdevc` executable has been added to the SDK.\n\n  - It will help early adopters validate the implementation and provide\n    feedback. `dartdevc` **is not** yet ready for production usage.\n\n  - Read more about the Dart Dev Compiler [here][dartdevc].\n\n[dartdevc]: https://github.com/dart-lang/dev_compiler\n\n## 1.15.0 - 2016-03-09\n\n### Core library changes\n\n- `dart:async`\n\n  - Made `StreamView` class a `const` class.\n\n- `dart:core`\n\n  - Added `Uri.queryParametersAll` to handle multiple query parameters with the\n    same name.\n\n- `dart:io`\n  - Added `SecurityContext.usePrivateKeyBytes`,\n    `SecurityContext.useCertificateChainBytes`,\n    `SecurityContext.setTrustedCertificatesBytes`, and\n    `SecurityContext.setClientAuthoritiesBytes`.\n  - **Breaking** The named `directory` argument of\n    `SecurityContext.setTrustedCertificates` has been removed.\n  - Added support to `SecurityContext` for PKCS12 certificate and key\n    containers.\n  - All calls in `SecurityContext` that accept certificate data now accept an\n    optional named parameter `password`, similar to\n    `SecurityContext.usePrivateKeyBytes`, for use as the password for PKCS12\n    data.\n\n### Tool changes\n\n- Dartium and content shell\n\n  - The Chrome-based tools that ship as part of the Dart SDK - Dartium and\n    content shell - are now based on Chrome version 45 (instead of Chrome 39).\n  - Dart browser libraries (`dart:html`, `dart:svg`, etc) _have not_ been\n    updated.\n    - These are still based on Chrome 39.\n    - These APIs will be updated in a future release.\n  - Note that there are experimental APIs which have changed in the underlying\n    browser, and will not work with the older libraries. For example,\n    `Element.animate`.\n\n- `dartfmt` - upgraded to v0.2.4\n  - Better handling for long collections with comments.\n  - Always put member metadata annotations on their own line.\n  - Indent functions in named argument lists with non-functions.\n  - Force the parameter list to split if a split occurs inside a function-typed\n    parameter.\n  - Don't force a split for before a single named argument if the argument\n    itself splits.\n\n### Service protocol changes\n\n- Fixed a documentation bug where the field `extensionRPCs` in `Isolate` was not\n  marked optional.\n\n### Experimental language features\n\n- Added support for\n  [configuration-specific imports](https://github.com/munificent/dep-interface-libraries/blob/master/Proposal.md).\n  On the VM and `dart2js`, they can be enabled with `--conditional-directives`.\n\n  The analyzer requires additional configuration:\n\n  ```yaml\n  analyzer:\n    language:\n      enableConditionalDirectives: true\n  ```\n\n  Read about [configuring the analyzer] for more details.\n\n[configuring the analyzer]:\n  https://github.com/dart-lang/sdk/tree/master/pkg/analyzer#configuring-the-analyzer\n\n## 1.14.2 - 2016-02-10\n\nPatch release, resolves three issues:\n\n- VM: Fixed a code generation bug on x64. (SDK commit\n  [834b3f02](https://github.com/dart-lang/sdk/commit/834b3f02b6ab740a213fd808e6c6f3269bed80e5))\n\n- `dart:io`: Fixed EOF detection when reading some special device files. (SDK\n  issue [25596](https://github.com/dart-lang/sdk/issues/25596))\n\n- Pub: Fixed an error using hosted dependencies in SDK version 1.14. (Pub issue\n  [1386](https://github.com/dart-lang/pub/issues/1386))\n\n## 1.14.1 - 2016-02-04\n\nPatch release, resolves one issue:\n\n- Debugger: Fixes a VM crash when a debugger attempts to set a break point\n  during isolate initialization. (SDK issue\n  [25618](https://github.com/dart-lang/sdk/issues/25618))\n\n## 1.14.0 - 2016-01-28\n\n### Core library changes\n\n- `dart:async`\n\n  - Added `Future.any` static method.\n  - Added `Stream.fromFutures` constructor.\n\n- `dart:convert`\n\n  - `Base64Decoder.convert` now takes optional `start` and `end` parameters.\n\n- `dart:core`\n\n  - Added `current` getter to `StackTrace` class.\n  - `Uri` class added support for data URIs\n    - Added two new constructors: `dataFromBytes` and `dataFromString`.\n    - Added a `data` getter for `data:` URIs with a new `UriData` class for the\n      return type.\n  - Added `growable` parameter to `List.filled` constructor.\n  - Added microsecond support to `DateTime`: `DateTime.microsecond`,\n    `DateTime.microsecondsSinceEpoch`, and\n    `new DateTime.fromMicrosecondsSinceEpoch`.\n\n- `dart:math`\n\n  - `Random` added a `secure` constructor returning a cryptographically secure\n    random generator which reads from the entropy source provided by the\n    embedder for every generated random value.\n\n- `dart:io`\n\n  - `Platform` added a static `isIOS` getter and `Platform.operatingSystem` may\n    now return `ios`.\n  - `Platform` added a static `packageConfig` getter.\n  - Added support for WebSocket compression as standardized in RFC 7692.\n  - Compression is enabled by default for all WebSocket connections.\n    - The optionally named parameter `compression` on the methods\n      `WebSocket.connect`, `WebSocket.fromUpgradedSocket`, and\n      `WebSocketTransformer.upgrade` and the `WebSocketTransformer` constructor\n      can be used to modify or disable compression using the new\n      `CompressionOptions` class.\n\n- `dart:isolate`\n  - Added **_experimental_** support for [Package Resolution Configuration].\n    - Added `packageConfig` and `packageRoot` instance getters to `Isolate`.\n    - Added a `resolvePackageUri` method to `Isolate`.\n    - Added named arguments `packageConfig` and `automaticPackageResolution` to\n      the `Isolate.spawnUri` constructor.\n\n[package resolution configuration]:\n  https://github.com/dart-lang/dart_enhancement_proposals/blob/master/Accepted/0005%20-%20Package%20Specification/DEP-pkgspec.md\n\n### Tool changes\n\n- `dartfmt`\n\n  - Better line splitting in a variety of cases.\n\n  - Other optimizations and bug fixes.\n\n- Pub\n\n  - **Breaking:** Pub now eagerly emits an error when a pubspec's \"name\" field\n    is not a valid Dart identifier. Since packages with non-identifier names\n    were never allowed to be published, and some of them already caused crashes\n    when being written to a `.packages` file, this is unlikely to break many\n    people in practice.\n\n  - **Breaking:** Support for `barback` versions prior to 0.15.0 (released July\n\n    1.  has been dropped. Pub will no longer install these older barback\n        versions.\n\n  - `pub serve` now GZIPs the assets it serves to make load times more similar\n    to real-world use-cases.\n\n  - `pub deps` now supports a `--no-dev` flag, which causes it to emit the\n    dependency tree as it would be if no `dev_dependencies` were in use. This\n    makes it easier to see your package's dependency footprint as your users\n    will experience it.\n\n  - `pub global run` now detects when a global executable's SDK constraint is no\n    longer met and errors out, rather than trying to run the executable anyway.\n\n  - Pub commands that check whether the lockfile is up-to-date (`pub run`,\n    `pub deps`, `pub serve`, and `pub build`) now do additional verification.\n    They ensure that any path dependencies' pubspecs haven't been changed, and\n    they ensure that the current SDK version is compatible with all\n    dependencies.\n\n  - Fixed a crashing bug when using `pub global run` on a global script that\n    didn't exist.\n\n  - Fixed a crashing bug when a pubspec contains a dependency without a source\n    declared.\n\n## 1.13.2 - 2016-01-06\n\nPatch release, resolves one issue:\n\n- dart2js: Stack traces are not captured correctly (SDK issue [25235]\n  (https://github.com/dart-lang/sdk/issues/25235))\n\n## 1.13.1 - 2015-12-17\n\nPatch release, resolves three issues:\n\n- VM type propagation fix: Resolves a potential crash in the Dart VM (SDK commit\n  [dff13be]\n  (https://github.com/dart-lang/sdk/commit/dff13bef8de104d33b04820136da2d80f3c835d7))\n\n- dart2js crash fix: Resolves a crash in pkg/js and dart2js (SDK issue [24974]\n  (https://github.com/dart-lang/sdk/issues/24974))\n\n- Pub get crash on ARM: Fixes a crash triggered when running 'pub get' on ARM\n  processors such as those on a Raspberry Pi (SDK issue [24855]\n  (https://github.com/dart-lang/sdk/issues/24855))\n\n## 1.13.0 - 2015-11-18\n\n### Core library changes\n\n- `dart:async`\n\n  - `StreamController` added getters for `onListen`, `onPause`, and `onResume`\n    with the corresponding new `typedef void ControllerCallback()`.\n  - `StreamController` added a getter for `onCancel` with the corresponding new\n    `typedef ControllerCancelCallback()`;\n  - `StreamTransformer` instances created with `fromHandlers` with no\n    `handleError` callback now forward stack traces along with errors to the\n    resulting streams.\n\n- `dart:convert`\n\n  - Added support for Base-64 encoding and decoding.\n    - Added new classes `Base64Codec`, `Base64Encoder`, and `Base64Decoder`.\n    - Added new top-level `const Base64Codec BASE64`.\n\n- `dart:core`\n\n  - `Uri` added `removeFragment` method.\n  - `String.allMatches` (implementing `Pattern.allMatches`) is now lazy, as all\n    `allMatches` implementations are intended to be.\n  - `Resource` is deprecated, and will be removed in a future release.\n\n- `dart:developer`\n\n  - Added `Timeline` class for interacting with Observatory's timeline feature.\n  - Added `ServiceExtensionHandler`, `ServiceExtensionResponse`, and\n    `registerExtension` which enable developers to provide their own VM service\n    protocol extensions.\n\n- `dart:html`, `dart:indexed_db`, `dart:svg`, `dart:web_audio`, `dart:web_gl`,\n  `dart:web_sql`\n\n  - The return type of some APIs changed from `double` to `num`. Dartium is now\n    using JS interop for most operations. JS does not distinguish between\n    numeric types, and will return a number as an int if it fits in an int. This\n    will mostly cause an error if you assign to something typed `double` in\n    checked mode. You may need to insert a `toDouble()` call or accept `num`.\n    Examples of APIs that are affected include `Element.getBoundingClientRect`\n    and `TextMetrics.width`.\n\n- `dart:io`\n\n  - **Breaking:** Secure networking has changed, replacing the NSS library with\n    the BoringSSL library. `SecureSocket`, `SecureServerSocket`,\n    `RawSecureSocket`,`RawSecureServerSocket`, `HttpClient`, and `HttpServer`\n    now all use a `SecurityContext` object which contains the certificates and\n    keys used for secure TLS (SSL) networking.\n\n    This is a breaking change for server applications and for some client\n    applications. Certificates and keys are loaded into the `SecurityContext`\n    from PEM files, instead of from an NSS certificate database. Information\n    about how to change applications that use secure networking is at\n    https://www.dartlang.org/server/tls-ssl.html\n\n  - `HttpClient` no longer sends URI fragments in the request. This is not\n    allowed by the HTTP protocol. The `HttpServer` still gracefully receives\n    fragments, but discards them before delivering the request.\n  - To allow connections to be accepted on the same port across different\n    isolates, set the `shared` argument to `true` when creating server socket\n    and `HttpServer` instances.\n    - The deprecated `ServerSocketReference` and `RawServerSocketReference`\n      classes have been removed.\n    - The corresponding `reference` properties on `ServerSocket` and\n      `RawServerSocket` have been removed.\n\n- `dart:isolate`\n  - `spawnUri` added an `environment` named argument.\n\n### Tool changes\n\n- `dart2js` and Dartium now support improved JavaScript Interoperability via the\n  [js package](https://pub.dev/packages/js).\n\n- `docgen` and `dartdocgen` no longer ship in the SDK. The `docgen` sources have\n  been removed from the repository.\n\n- This is the last release to ship the VM's \"legacy debug protocol\". We intend\n  to remove the legacy debug protocol in Dart VM 1.14.\n\n- The VM's Service Protocol has been updated to version 3.0 to take care of a\n  number of issues uncovered by the first few non-observatory clients. This is a\n  potentially breaking change for clients.\n\n- Dartium has been substantially changed. Rather than using C++ calls into\n  Chromium internals for DOM operations it now uses JS interop. The DOM objects\n  in `dart:html` and related libraries now wrap a JavaScript object and delegate\n  operations to it. This should be mostly transparent to users. However,\n  performance and memory characteristics may be different from previous\n  versions. There may be some changes in which DOM objects are wrapped as Dart\n  objects. For example, if you get a reference to a Window object, even through\n  JS interop, you will always see it as a Dart Window, even when used\n  cross-frame. We expect the change to using JS interop will make it much\n  simpler to update to new Chrome versions.\n\n## 1.12.2 - 2015-10-21\n\n### Core library changes\n\n- `dart:io`\n\n  - A memory leak in creation of Process objects is fixed.\n\n## 1.12.1 - 2015-09-08\n\n### Tool changes\n\n- Pub\n\n  - Pub will now respect `.gitignore` when validating a package before it's\n    published. For example, if a `LICENSE` file exists but is ignored, that is\n    now an error.\n\n  - If the package is in a subdirectory of a Git repository and the entire\n    subdirectory is ignored with `.gitignore`, pub will act as though nothing\n    was ignored instead of uploading an empty package.\n\n  - The heuristics for determining when `pub get` needs to be run before various\n    commands have been improved. There should no longer be false positives when\n    non-dependency sections of the pubspec have been modified.\n\n## 1.12.0 - 2015-08-31\n\n### Language changes\n\n- Null-aware operators\n  - `??`: if null operator. `expr1 ?? expr2` evaluates to `expr1` if not `null`,\n    otherwise `expr2`.\n  - `??=`: null-aware assignment. `v ??= expr` causes `v` to be assigned `expr`\n    only if `v` is `null`.\n  - `x?.p`: null-aware access. `x?.p` evaluates to `x.p` if `x` is not `null`,\n    otherwise evaluates to `null`.\n  - `x?.m()`: null-aware method invocation. `x?.m()` invokes `m` only if `x` is\n    not `null`.\n\n### Core library changes\n\n- `dart:async`\n\n  - `StreamController` added setters for the `onListen`, `onPause`, `onResume`\n    and `onCancel` callbacks.\n\n- `dart:convert`\n\n  - `LineSplitter` added a `split` static method returning an `Iterable`.\n\n- `dart:core`\n\n  - `Uri` class now perform path normalization when a URI is created. This\n    removes most `..` and `.` sequences from the URI path. Purely relative paths\n    (no scheme or authority) are allowed to retain some leading \"dot\" segments.\n    Also added `hasAbsolutePath`, `hasEmptyPath`, and `hasScheme` properties.\n\n- `dart:developer`\n\n  - New `log` function to transmit logging events to Observatory.\n\n- `dart:html`\n\n  - `NodeTreeSanitizer` added the `const trusted` field. It can be used instead\n    of defining a `NullTreeSanitizer` class when calling `setInnerHtml` or other\n    methods that create DOM from text. It is also more efficient, skipping the\n    creation of a `DocumentFragment`.\n\n- `dart:io`\n\n  - Added two new file modes, `WRITE_ONLY` and `WRITE_ONLY_APPEND` for opening a\n    file write only.\n    [eaeecf2](https://github.com/dart-lang/sdk/commit/eaeecf2ed13ba6c7fbfd653c3c592974a7120960)\n  - Change stdout/stderr to binary mode on Windows.\n    [4205b29](https://github.com/dart-lang/sdk/commit/4205b2997e01f2cea8e2f44c6f46ed6259ab7277)\n\n- `dart:isolate`\n\n  - Added `onError`, `onExit` and `errorsAreFatal` parameters to\n    `Isolate.spawnUri`.\n\n- `dart:mirrors`\n  - `InstanceMirror.delegate` moved up to `ObjectMirror`.\n  - Fix InstanceMirror.getField optimization when the selector is an operator.\n  - Fix reflective NoSuchMethodErrors to match their non-reflective counterparts\n    when due to argument mismatches. (VM only)\n\n### Tool changes\n\n- Documentation tools\n\n  - `dartdoc` is now the default tool to generate static HTML for API docs.\n    [Learn more](https://pub.dev/packages/dartdoc).\n\n  - `docgen` and `dartdocgen` have been deprecated. Currently plan is to remove\n    them in 1.13.\n\n- Formatter (`dartfmt`)\n\n  - Over 50 bugs fixed.\n\n  - Optimized line splitter is much faster and produces better output on complex\n    code.\n\n- Observatory\n\n  - Allocation profiling.\n\n  - New feature to display output from logging.\n\n  - Heap snapshot analysis works for 64-bit VMs.\n\n  - Improved ability to inspect typed data, regex and compiled code.\n\n  - Ability to break on all or uncaught exceptions from Observatory's debugger.\n\n  - Ability to set closure-specific breakpoints.\n\n  - 'anext' - step past await/yield.\n\n  - Preserve when a variable has been expanded/unexpanded in the debugger.\n\n  - Keep focus on debugger input box whenever possible.\n\n  - Echo stdout/stderr in the Observatory debugger. Standalone-only so far.\n\n  - Minor fixes to service protocol documentation.\n\n- Pub\n\n  - **Breaking:** various commands that previously ran `pub get` implicitly no\n    longer do so. Instead, they merely check to make sure the \".packages\" file\n    is newer than the pubspec and the lock file, and fail if it's not.\n\n  - Added support for `--verbosity=error` and `--verbosity=warning`.\n\n  - `pub serve` now collapses multiple GET requests into a single line of\n    output. For full output, use `--verbose`.\n\n  - `pub deps` has improved formatting for circular dependencies on the\n    entrypoint package.\n\n  - `pub run` and `pub global run`\n\n    - **Breaking:** to match the behavior of the Dart VM, executables no longer\n      run in checked mode by default. A `--checked` flag has been added to run\n      them in checked mode manually.\n\n    - Faster start time for executables that don't import transformed code.\n\n    - Binstubs for globally-activated executables are now written in the system\n      encoding, rather than always in `UTF-8`. To update existing executables,\n      run `pub cache repair`.\n\n  - `pub get` and `pub upgrade`\n\n    - Pub will now generate a \".packages\" file in addition to the \"packages\"\n      directory when running `pub get` or similar operations, per the [package\n      spec proposal][]. Pub now has a `--no-package-symlinks` flag that will\n      stop \"packages\" directories from being generated at all.\n\n    - An issue where HTTP requests were sometimes made even though `--offline`\n      was passed has been fixed.\n\n    - A bug with `--offline` that caused an unhelpful error message has been\n      fixed.\n\n    - Pub will no longer time out when a package takes a long time to download.\n\n  - `pub publish`\n\n    - Pub will emit a non-zero exit code when it finds a violation while\n      publishing.\n\n    - `.gitignore` files will be respected even if the package isn't at the top\n      level of the Git repository.\n\n  - Barback integration\n\n    - A crashing bug involving transformers that only apply to non-public code\n      has been fixed.\n\n    - A deadlock caused by declaring transformer followed by a lazy transformer\n      (such as the built-in `$dart2js` transformer) has been fixed.\n\n    - A stack overflow caused by a transformer being run multiple times on the\n      package that defines it has been fixed.\n\n    - A transformer that tries to read a nonexistent asset in another package\n      will now be re-run if that asset is later created.\n\n[package spec proposal]: https://github.com/lrhn/dep-pkgspec\n\n### VM Service Protocol Changes\n\n- **BREAKING** The service protocol now sends JSON-RPC 2.0-compatible\n  server-to-client events. To reflect this, the service protocol version is now\n  2.0.\n\n- The service protocol now includes a `\"jsonrpc\"` property in its responses, as\n  opposed to `\"json-rpc\"`.\n\n- The service protocol now properly handles requests with non-string ids.\n  Numeric ids are no longer converted to strings, and null ids now don't produce\n  a response.\n\n- Some RPCs that didn't include a `\"jsonrpc\"` property in their responses now\n  include one.\n\n## 1.11.2 - 2015-08-03\n\n### Core library changes\n\n- Fix a bug where `WebSocket.close()` would crash if called after\n  `WebSocket.cancel()`.\n\n## 1.11.1 - 2015-07-02\n\n### Tool changes\n\n- Pub will always load Dart SDK assets from the SDK whose `pub` executable was\n  run, even if a `DART_SDK` environment variable is set.\n\n## 1.11.0 - 2015-06-25\n\n### Core library changes\n\n- `dart:core`\n\n  - `Iterable` added an `empty` constructor.\n    [dcf0286](https://github.com/dart-lang/sdk/commit/dcf0286f5385187a68ce9e66318d3bf19abf454b)\n  - `Iterable` can now be extended directly. An alternative to extending\n    `IterableBase` from `dart:collection`.\n  - `List` added an `unmodifiable` constructor.\n    [r45334](https://code.google.com/p/dart/source/detail?r=45334)\n  - `Map` added an `unmodifiable` constructor.\n    [r45733](https://code.google.com/p/dart/source/detail?r=45733)\n  - `int` added a `gcd` method.\n    [a192ef4](https://github.com/dart-lang/sdk/commit/a192ef4acb95fad1aad1887f59eed071eb5e8201)\n  - `int` added a `modInverse` method.\n    [f6f338c](https://github.com/dart-lang/sdk/commit/f6f338ce67eb8801b350417baacf6d3681b26002)\n  - `StackTrace` added a `fromString` constructor.\n    [68dd6f6](https://github.com/dart-lang/sdk/commit/68dd6f6338e63d0465041d662e778369c02c2ce6)\n  - `Uri` added a `directory` constructor.\n    [d8dbb4a](https://github.com/dart-lang/sdk/commit/d8dbb4a60f5e8a7f874c2a4fbf59eaf1a39f4776)\n  - List iterators may not throw `ConcurrentModificationError` as eagerly in\n    release mode. In checked mode, the modification check is still as eager as\n    possible. [r45198](https://github.com/dart-lang/sdk/commit/5a79c03)\n\n- `dart:developer` - **NEW**\n\n  - Replaces the deprecated `dart:profiler` library.\n  - Adds new functions `debugger` and `inspect`.\n    [6e42aec](https://github.com/dart-lang/sdk/blob/6e42aec4f64cf356dde7bad9426e07e0ea5b58d5/sdk/lib/developer/developer.dart)\n\n- `dart:io`\n\n  - `FileSystemEntity` added a `uri` property.\n    [8cf32dc](https://github.com/dart-lang/sdk/commit/8cf32dc1a1664b516e57f804524e46e55fae88b2)\n  - `Platform` added a `static resolvedExecutable` property.\n    [c05c8c6](https://github.com/dart-lang/sdk/commit/c05c8c66069db91cc2fd48691dfc406c818d411d)\n\n- `dart:html`\n\n  - `Element` methods, `appendHtml` and `insertAdjacentHtml` now take\n    `nodeValidator` and `treeSanitizer` parameters, and the inputs are\n    consistently sanitized.\n    [r45818 announcement](https://groups.google.com/a/dartlang.org/forum/#!topic/announce/GVO7EAcPi6A)\n\n- `dart:isolate`\n\n  - **BREAKING** The positional `priority` parameter of `Isolate.ping` and\n    `Isolate.kill` is now a named parameter named `priority`.\n  - **BREAKING** Removed the `Isolate.AS_EVENT` priority.\n  - `Isolate` methods `ping` and `addOnExitListener` now have a named parameter\n    `response`. [r45092](https://github.com/dart-lang/sdk/commit/1b208bd)\n  - `Isolate.spawnUri` added a named argument `checked`.\n  - Remove the experimental state of the API.\n\n- `dart:profiler` - **DEPRECATED**\n  - This library will be removed in 1.12. Use `dart:developer` instead.\n\n### Tool changes\n\n- This is the first release that does not include the Eclipse-based **Dart\n  Editor**. See [dart.dev/tools](https://dart.dev/tools#ides-and-editors) for\n  alternatives.\n- This is the last release that ships the (unsupported) dart2dart (aka\n  `dart2js --output-type=dart`) utility as part of dart2js\n\n## 1.10.0 - 2015-04-29\n\n### Core library changes\n\n- `dart:convert`\n\n  - **POTENTIALLY BREAKING** Fix behavior of `HtmlEscape`. It no longer escapes\n    no-break space (U+00A0) anywhere or forward slash (`/`, `U+002F`) in element\n    context. Slash is still escaped using `HtmlEscapeMode.UNKNOWN`.\n    [r45003](https://github.com/dart-lang/sdk/commit/8b8223d),\n    [r45153](https://github.com/dart-lang/sdk/commit/8a5d049),\n    [r45189](https://github.com/dart-lang/sdk/commit/3c39ad2)\n\n- `dart:core`\n\n  - `Uri.parse` added `start` and `end` positional arguments.\n\n- `dart:html`\n\n  - **POTENTIALLY BREAKING** `CssClassSet` method arguments must now be\n    'tokens', i.e. non-empty strings with no white-space characters. The\n    implementation was incorrect for class names containing spaces. The fix is\n    to forbid spaces and provide a faster implementation.\n    [Announcement](https://groups.google.com/a/dartlang.org/d/msg/announce/jmUI2XJHfC8/UZUCvJH3p2oJ)\n\n- `dart:io`\n\n  - `ProcessResult` now exposes a constructor.\n  - `import` and `Isolate.spawnUri` now supports the\n    [Data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme) on the VM.\n\n### Tool Changes\n\n#### pub\n\n- Running `pub run foo` within a package now runs the `foo` executable defined\n  by the `foo` package. The previous behavior ran `bin/foo`. This makes it easy\n  to run binaries in dependencies, for instance `pub run test`.\n\n- On Mac and Linux, signals sent to `pub run` and forwarded to the child\n  command.\n\n## 1.9.3 - 2015-04-14\n\nThis is a bug fix release which merges a number of commits from `bleeding_edge`.\n\n- dart2js: Addresses as issue with minified JavaScript output with CSP enabled -\n  [r44453](https://code.google.com/p/dart/source/detail?r=44453)\n\n- Editor: Fixes accidental updating of files in the pub cache during rename\n  refactoring - [r44677](https://code.google.com/p/dart/source/detail?r=44677)\n\n- Editor: Fix for\n  [issue 23032](https://code.google.com/p/dart/issues/detail?id=23032) regarding\n  skipped breakpoints on Windows -\n  [r44824](https://code.google.com/p/dart/source/detail?r=44824)\n\n- dart:mirrors: Fix `MethodMirror.source` when the method is on the first line\n  in a script - [r44957](https://code.google.com/p/dart/source/detail?r=44957),\n  [r44976](https://code.google.com/p/dart/source/detail?r=44976)\n\n- pub: Fix for\n  [issue 23084](https://code.google.com/p/dart/issues/detail?id=23084): Pub can\n  fail to load transformers necessary for local development -\n  [r44876](https://code.google.com/p/dart/source/detail?r=44876)\n\n## 1.9.1 - 2015-03-25\n\n### Language changes\n\n- Support for `async`, `await`, `sync*`, `async*`, `yield`, `yield*`, and\n  `await for`. See the [the language tour][async] for more details.\n\n- Enum support is fully enabled. See [the language tour][enum] for more details.\n\n[async]: https://dart.dev/guides/language/language-tour#asynchrony\n[enum]: https://dart.dev/guides/language/language-tour#enums\n\n### Tool changes\n\n- The formatter is much more comprehensive and generates much more readable\n  code. See [its tool page][dartfmt] for more details.\n\n- The analysis server is integrated into the IntelliJ plugin and the Dart\n  editor. This allows analysis to run out-of-process, so that interaction\n  remains smooth even for large projects.\n\n- Analysis supports more and better hints, including unused variables and unused\n  private members.\n\n[dartfmt]: https://dart.dev/tools/dart-format\n\n### Core library changes\n\n#### Highlights\n\n- There's a new model for shared server sockets with no need for a `Socket`\n  reference.\n\n- A new, much faster [regular expression engine][regexp].\n\n- The Isolate API now works across the VM and `dart2js`.\n\n[regexp]: http://news.dartlang.org/2015/02/irregexp-dart-vms-new-regexp.html\n\n#### Details\n\nFor more information on any of these changes, see the corresponding\ndocumentation on the [Dart API site](http://api.dart.dev).\n\n- `dart:async`:\n\n  - `Future.wait` added a new named argument, `cleanUp`, which is a callback\n    that releases resources allocated by a successful `Future`.\n\n  - The `SynchronousStreamController` class was added as an explicit name for\n    the type returned when the `sync` argument is passed to\n    `new StreamController`.\n\n- `dart:collection`: The `new SplayTreeSet.from(Iterable)` constructor was\n  added.\n\n- `dart:convert`: `Utf8Encoder.convert` and `Utf8Decoder.convert` added optional\n  `start` and `end` arguments.\n\n- `dart:core`:\n\n  - `RangeError` added new static helper functions: `checkNotNegative`,\n    `checkValidIndex`, `checkValidRange`, and `checkValueInInterval`.\n\n  - `int` added the `modPow` function.\n\n  - `String` added the `replaceFirstMapped` and `replaceRange` functions.\n\n- `dart:io`:\n\n  - Support for locking files to prevent concurrent modification was added. This\n    includes the `File.lock`, `File.lockSync`, `File.unlock`, and\n    `File.unlockSync` functions as well as the `FileLock` class.\n\n  - Support for starting detached processes by passing the named `mode` argument\n    (a `ProcessStartMode`) to `Process.start`. A process can be fully attached,\n    fully detached, or detached except for its standard IO streams.\n\n  - `HttpServer.bind` and `HttpServer.bindSecure` added the `v6Only` named\n    argument. If this is true, only IPv6 connections will be accepted.\n\n  - `HttpServer.bind`, `HttpServer.bindSecure`, `ServerSocket.bind`,\n    `RawServerSocket.bind`, `SecureServerSocket.bind` and\n    `RawSecureServerSocket.bind` added the `shared` named argument. If this is\n    true, multiple servers or sockets in the same Dart process may bind to the\n    same address, and incoming requests will automatically be distributed\n    between them.\n\n  - **Deprecation:** the experimental `ServerSocketReference` and\n    `RawServerSocketReference` classes, as well as getters that returned them,\n    are marked as deprecated. The `shared` named argument should be used\n    instead. These will be removed in Dart 1.10.\n\n  - `Socket.connect` and `RawSocket.connect` added the `sourceAddress` named\n    argument, which specifies the local address to bind when making a\n    connection.\n\n  - The static `Process.killPid` method was added to kill a process with a given\n    PID.\n\n  - `Stdout` added the `nonBlocking` instance property, which returns a\n    non-blocking `IOSink` that writes to standard output.\n\n- `dart:isolate`:\n\n  - The static getter `Isolate.current` was added.\n\n  - The `Isolate` methods `addOnExitListener`, `removeOnExitListener`,\n    `setErrorsFatal`, `addOnErrorListener`, and `removeOnErrorListener` now work\n    on the VM.\n\n  - Isolates spawned via `Isolate.spawn` now allow most objects, including\n    top-level and static functions, to be sent between them.\n\n## 1.8.5 - 2015-01-21\n\n- Code generation for SIMD on ARM and ARM64 is fixed.\n\n- A possible crash on MIPS with newer GCC toolchains has been prevented.\n\n- A segfault when using `rethrow` was fixed ([issue 21795][]).\n\n[issue 21795]: https://code.google.com/p/dart/issues/detail?id=21795\n\n## 1.8.3 - 2014-12-10\n\n- Breakpoints can be set in the Editor using file suffixes ([issue 21280][]).\n\n- IPv6 addresses are properly handled by `HttpClient` in `dart:io`, fixing a\n  crash in pub ([issue 21698][]).\n\n- Issues with the experimental `async`/`await` syntax have been fixed.\n\n- Issues with a set of number operations in the VM have been fixed.\n\n- `ListBase` in `dart:collection` always returns an `Iterable` with the correct\n  type argument.\n\n[issue 21280]: https://code.google.com/p/dart/issues/detail?id=21280\n[issue 21698]: https://code.google.com/p/dart/issues/detail?id=21698\n\n## 1.8.0 - 2014-11-28\n\n- `dart:collection`: `SplayTree` added the `toSet` function.\n\n- `dart:convert`: The `JsonUtf8Encoder` class was added.\n\n- `dart:core`:\n\n  - The `IndexError` class was added for errors caused by an index being outside\n    its expected range.\n\n  - The `new RangeError.index` constructor was added. It forwards to\n    `new IndexError`.\n\n  - `RangeError` added three new properties. `invalidProperty` is the value that\n    caused the error, and `start` and `end` are the minimum and maximum values\n    that the value is allowed to assume.\n\n  - `new RangeError.value` and `new RangeError.range` added an optional\n    `message` argument.\n\n  - The `new String.fromCharCodes` constructor added optional `start` and `end`\n    arguments.\n\n- `dart:io`:\n\n  - Support was added for the [Application-Layer Protocol Negotiation][alpn]\n    extension to the TLS protocol for both the client and server.\n\n  - `SecureSocket.connect`, `SecureServerSocket.bind`,\n    `RawSecureSocket.connect`, `RawSecureSocket.secure`,\n    `RawSecureSocket.secureServer`, and `RawSecureServerSocket.bind` added a\n    `supportedProtocols` named argument for protocol negotiation.\n\n  - `RawSecureServerSocket` added a `supportedProtocols` field.\n\n  - `RawSecureSocket` and `SecureSocket` added a `selectedProtocol` field which\n    contains the protocol selected during protocol negotiation.\n\n[alpn]: https://tools.ietf.org/html/rfc7301\n\n## 1.7.0 - 2014-10-15\n\n### Tool changes\n\n- `pub` now generates binstubs for packages that are globally activated so that\n  they can be put on the user's `PATH` and used as normal executables. See the\n  [`pub global activate` documentation][pub global activate].\n\n- When using `dart2js`, deferred loading now works with multiple Dart apps on\n  the same page.\n\n[pub global activate]:\n  https://dart.dev/tools/pub/cmd/pub-global#running-a-script-from-your-path\n\n### Core library changes\n\n- `dart:async`: `Zone`, `ZoneDelegate`, and `ZoneSpecification` added the\n  `errorCallback` function, which allows errors that have been programmatically\n  added to a `Future` or `Stream` to be intercepted.\n\n- `dart:io`:\n\n  - **Breaking change:** `HttpClient.close` must be called for all clients or\n    they will keep the Dart process alive until they time out. This fixes the\n    handling of persistent connections. Previously, the client would shut down\n    immediately after a request.\n\n  - **Breaking change:** `HttpServer` no longer compresses all traffic by\n    default. The new `autoCompress` property can be set to `true` to re-enable\n    compression.\n\n- `dart:isolate`: `Isolate.spawnUri` added the optional `packageRoot` argument,\n  which controls how it resolves `package:` URIs.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 8.10546875,
          "content": "Want to contribute? Great! First, read this page (including the small print at the end).\n\n## Ways you can contribute\n\nYou can help the Dart project in many ways, in addition to contributing code. For example, you can [report bugs](https://dartbug.com), ask and answer [Dart questions on StackOverflow](https://stackoverflow.com/questions/tagged/dart), and improve the documentation.\n\nIf you'd like to improve the documentation, you have three options:\n\n  * Give us feedback:\n    * If you're looking at a page with a **bug icon** at the **upper right**,\n      click that icon to report a bug on the page.\n    * To report an API doc bug,\n      [create an SDK issue](https://github.com/dart-lang/sdk/issues/new?title=API%20doc%20issue:).\n  * Contribute to the Dart developer websites such as [dart.dev](https://dart.dev) (repo: [dart-lang/site-www](https://github.com/dart-lang/site-www)). For more information, see [Writing for Dart and Flutter websites](https://github.com/dart-lang/site-shared/blob/master/doc/writing-for-dart-and-flutter-websites.md).\n  * Improve the API reference docs at [api.dart.dev](https://api.dart.dev) by editing doc comments in the [Dart SDK repo](https://github.com/dart-lang/sdk/tree/main/sdk/lib). For more information on how to write API docs, see [Effective Dart: Documentation](https://dart.dev/guides/language/effective-dart/documentation).\n\n## Before you contribute\n\nBefore we can use your code, you must sign the [Google Individual Contributor License Agreement](https://developers.google.com/open-source/cla/individual) (CLA), which you can do online.  The CLA is necessary mainly because you own the copyright to your changes, even after your contribution becomes part of our codebase, so we need your permission to use and distribute your code.  We also need to be sure of various other things—for instance that you'll tell us if you know that your code infringes on other people's patents.  You don't have to sign the CLA until after you've submitted your code for review and a member has approved it, but you must do it before we can put your code into our codebase.\n\nBefore you start working on a larger contribution, you should get in touch with us first through the  [Dart Issue Tracker](https://dartbug.com) with your idea so that we can help out and possibly guide you. Coordinating up front makes it much easier to avoid frustration later on.\n\nAll submissions, including submissions by project members, require review.  We use the same code-review tools and process as the chromium project.\n\nWe occasionally take pull requests, e.g., for comment changes, but the main flow is to use the Gerrit review system as explained below.\n\n## Submitting patches directly from GitHub\n\nThis repository primarily uses [Gerrit for code reviews](https://dart-review.googlesource.com/), rather than GitHub PRs. However, you may submit [a GitHub PR ](https://github.com/dart-lang/sdk/pulls), e.g. to edit some API documentation, and it will be automatically converted into a Gerrit change list (a \"CL\") by a copybara-service bot. You can find the link to that CL as a comment left on the PR by the bot. Any changes made to the PR after opening will also be sync'ed by the bot into the Gerrit review. The PR will be automatically closed when the CL is reviewed and landed.\n\n## Setting up the environment\n\nIn order to submit a patch from a local workspace, you need to install the Chromium\n[depot\\_tools](https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_setting_up).\n\n## Getting the code\n\nTo work with the Dart code, you need to download and build the development branch. Active development of Dart takes place on the `main` branch, from which we push \"green\" versions that have passed all tests to `dev` branch. Complete instructions are found at [Getting The Source](docs/Building.md#getting-the-source). **You must use the `gclient` tool (`fetch`), using `git clone` will not get you a functional environment!**\n\n## Starting a patch with git\n\nCreate a new branch using `git new-branch` (this is a command added by the aforementioned depot_tools).\n\nYou can be in any branch when you run `git new-branch`.\n\n```bash\ngit new-branch <feature name>\n<write code>\ngit commit\n<write code...>\ngit commit\n...\n```\n\n## Keeping your branch updated with origin/main\n\nAs you work, and before you send a patch for review, you should\nensure your branch is merging cleanly to `origin/main`.\n\nThere are multiple ways to do this, but we generally recommend\nusing `git rebase-update` (another feature added by depot_tools):\n\n```bash\ngit rebase-update\n```\n\nYou can run this command from any branch.\n\nThis command will fetch\n`origin/main`, rebase all your open branches, and delete\ncleanly merged branches.\n\nYour local workflow may vary.\n\n## Uploading the patch for review\n\nUpload the patch to Gerrit for review using `git cl upload`:\n\n```bash\n# Upload a CL, add reviewers from OWNERS files, and allow automatic submission.\ngit cl upload --send-mail --r-owners --auto-submit\n```\n\nThe above command returns a URL for the review. Attach this review to your issue in https://dartbug.com.\n\nTo update the CL, just commit your changes and run `git cl upload` for your branch again.\n\nMore detailed instructions for the `git cl` tools available on https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html#_creating_uploading_a_cl\n\n## Getting your patch reviewed and landed submitted.\n\nEnsure that your change has at least two reviewers who are OWNERS on your CL:\n\n```bash\ngit cl web # opens your review on https://dart-review.googlesource.com\n```\n\nCheck the \"Reviewers\" on the CL, there should be at least two. If there aren't,\nuse the \"ADD OWNERS\" button to add more. If you can't get enough reviewers, or\nthe reviewers are not responsive, you may add reviewers found in the `OWNERS`\nfile at the root of the repository to escalate.\n\nIt's part of a code owner's responsibility to review changes in their area and\nhelp you to get your patch submitted. They may also provide comments, or reject\nyour CL. They can run the presubmit tests on your behalf and submit your patch.\n\n## For committers: Submitting a patch\n\nIf you have commit access, when the review is done and the patch is good to go, submit the patch on https://dart-review.googlesource.com:\n\n*   Press \"Submit to CQ\" (CQ stands for \"Commit Queue\").\n*   You can follow the progress by looking at the \"Tryjobs\" panel in your review.\n*   Once the Commit Queue is green, the patch will be merged.\n*   If any of the try jobs is red, you will have to fix the errors and then \"Submit to CQ\" once more.\n\nIf you do not have commit access, a Dart engineer will commit on your behalf, assuming the patch is reviewed and accepted.\n\n## For committers: Merging contributions from non-members\n\nIf the author of a patch is not a committer, they will need help landing the patch.\nOnce a patch gets an LGTM, it's easy for a committer to merge it in.\n\n* Find and open the review on https://dart-review.googlesource.com.\n* Follow the instructions in the previous section to submit the patch.\n\n## Coding style\n\nThe source code of Dart follows the:\n\n  * [Google C++ style guide](https://google.github.io/styleguide/cppguide.html)\n  * [Dart style guide](https://dart.dev/guides/language/effective-dart/style)\n\nYou should familiarize yourself with those guidelines.\n\nAll files in the Dart project must start with the following header. If you add a new file please also add this. The year should be a single number (not a range; don't use \"2011-2012\", even if the original code did).  If you edit an existing file you don't have to update the year.\n\n```dart\n// Copyright (c) 2017, the Dart project authors. Please see the AUTHORS file\n// for details. All rights reserved. Use of this source code is governed by a\n// BSD-style license that can be found in the LICENSE file.\n```\n\n## The small print\n\nContributions made by corporations are covered by a different agreement than the one above, the [Software Grant and Corporate Contributor License Agreement](https://cla.developers.google.com/about/google-corporate).\n\nWe pledge to maintain an open and welcoming environment. For details, see our [code of conduct](https://dart.dev/code-of-conduct).\n"
        },
        {
          "name": "DEPS",
          "type": "blob",
          "size": 29.0556640625,
          "content": "# Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file\n# for details. All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\n# IMPORTANT:\n# Before adding or updating dependencies, please review the documentation here:\n# https://github.com/dart-lang/sdk/tree/main/docs/Adding-and-Updating-Dependencies.md\n#\n# Packages can be rolled to the latest version with `tools/manage_deps.dart`.\n#\n# For example:\n#\n#     dart tools/manage_deps.dart bump third_party/pkg/dart_style\n\nallowed_hosts = [\n  'android.googlesource.com',\n  'boringssl.googlesource.com',\n  'chrome-infra-packages.appspot.com',\n  'chromium.googlesource.com',\n  'dart.googlesource.com',\n  'dart-internal.googlesource.com',\n  'fuchsia.googlesource.com',\n  'llvm.googlesource.com',\n]\n\nvars = {\n  # The dart_root is the root of our sdk checkout. This is normally\n  # simply sdk, but if using special gclient specs it can be different.\n  \"dart_root\": \"sdk\",\n\n  # We use mirrors of all github repos to guarantee reproducibility and\n  # consistency between what users see and what the bots see.\n  # We need the mirrors to not have 100+ bots pulling github constantly.\n  # We mirror our github repos on Dart's git servers.\n  # DO NOT use this var if you don't see a mirror here:\n  #   https://dart.googlesource.com/\n  \"dart_git\": \"https://dart.googlesource.com/\",\n  \"dart_internal_git\": \"https://dart-internal.googlesource.com\",\n  # If the repo you want to use is at github.com/dart-lang, but not at\n  # dart.googlesource.com, please file an issue\n  # on github and add the label 'area-infrastructure'.\n  # When the repo is mirrored, you can add it to this DEPS file.\n\n  # Chromium git\n  \"android_git\": \"https://android.googlesource.com\",\n  \"chromium_git\": \"https://chromium.googlesource.com\",\n  \"fuchsia_git\": \"https://fuchsia.googlesource.com\",\n  \"llvm_git\": \"https://llvm.googlesource.com\",\n\n  # Checked-in SDK version. The checked-in SDK is a Dart SDK distribution\n  # in a cipd package used to run Dart scripts in the build and test\n  # infrastructure, which is automatically built on the release commits.\n  \"sdk_tag\": \"git_revision:f863f0b43625eb04539a34d7cc25029ba80dd522\",\n\n  # co19 is a cipd package automatically generated for each co19 commit.\n  # Use tests/co19/update.sh to update this hash.\n  \"co19_rev\": \"2424cfed7eedf53a122f8bfdbb6319692f726ec8\",\n\n  # The internal benchmarks to use. See go/dart-benchmarks-internal\n  \"benchmarks_internal_rev\": \"3bd6bc6d207dfb7cf687537e819863cf9a8f2470\",\n  \"checkout_benchmarks_internal\": False,\n\n  # Checkout the flute benchmark only when benchmarking.\n  \"checkout_flute\": False,\n\n  # Checkout Android dependencies only on Mac and Linux.\n  \"download_android_deps\":\n    \"host_os == mac or (host_os == linux and host_cpu == x64)\",\n\n  # Checkout extra javascript engines for testing or benchmarking. You can\n  # self-service update these by following the go/dart-engprod/browsers.md\n  # instructions. d8, the V8 shell, is always checked out.\n  \"checkout_javascript_engines\": False,\n  \"d8_tag\": \"version:13.3.255\",\n  \"jsshell_tag\": \"version:133.0\",\n  \"jsc_tag\": \"version:287397\",\n\n  # https://chrome-infra-packages.appspot.com/p/fuchsia/third_party/clang\n  \"clang_version\": \"git_revision:684052173971868aab0e6b62d7770a6299e84141\",\n\n  # https://chrome-infra-packages.appspot.com/p/gn/gn\n  \"gn_version\": \"git_revision:c97a86a72105f3328a540f5a5ab17d11989ab7dd\",\n\n  \"reclient_version\": \"git_revision:c7349324c93c6e0d85bc1e00b5d7526771006ea0\",\n  \"download_reclient\": True,\n\n  # Update from https://chrome-infra-packages.appspot.com/p/fuchsia/sdk/core\n  \"fuchsia_sdk_version\": \"version:26.20241231.3.1\",\n  \"download_fuchsia_deps\": False,\n\n  # Ninja, runs the build based on files generated by GN.\n  \"ninja_tag\": \"version:2@1.11.1.chromium.7\",\n\n  # Scripts that make 'git cl format' work.\n  \"clang_format_scripts_rev\": \"bb994c6f067340c1135eb43eed84f4b33cfa7397\",\n\n  ### /third_party/ dependencies\n\n  # Prefer to use hashes of binaryen that have been reviewed & rolled into g3.\n  \"binaryen_rev\" : \"87f9dac127b387715d8d96ac7ec8fd469d8c2dab\",\n  \"boringssl_rev\": \"822902749a5956bba09c7e9e451104e8a74f02c5\",\n  \"browser-compat-data_tag\": \"ac8cae697014da1ff7124fba33b0b4245cc6cd1b\", # v1.0.22\n  \"cpu_features_rev\": \"936b9ab5515dead115606559502e3864958f7f6e\",\n  \"devtools_rev\": \"8762b31f0d0ffeea6449fd02740e9ce7acb32503\",\n  \"icu_rev\": \"43953f57b037778a1b8005564afabe214834f7bd\",\n  \"jinja2_rev\": \"2222b31554f03e62600cd7e383376a7c187967a1\",\n  \"libcxx_rev\": \"44079a4cc04cdeffb9cfe8067bfb3c276fb2bab0\",\n  \"libcxxabi_rev\": \"2ce528fb5e0f92e57c97ec3ff53b75359d33af12\",\n  \"libprotobuf_rev\": \"24487dd1045c7f3d64a21f38a3f0c06cc4cf2edb\",\n  \"markupsafe_rev\": \"8f45f5cfa0009d2a70589bcda0349b8cb2b72783\",\n  \"perfetto_rev\": \"13ce0c9e13b0940d2476cd0cff2301708a9a2e2b\",\n  \"ply_rev\": \"604b32590ffad5cbb82e4afef1d305512d06ae93\",\n  \"protobuf_gn_rev\": \"ca669f79945418f6229e4fef89b666b2a88cbb10\",\n  \"WebCore_rev\": \"bcb10901266c884e7b3740abc597ab95373ab55c\",\n  \"zlib_rev\": \"108fa50cda23ed4a712a098d058dccbbfd248206\",\n\n  # Note: Updates to dart_style have to be coordinated with the infrastructure\n  # team so that the internal formatter `tools/sdks/dart-sdk/bin/dart format`\n  # matches the version here. Please follow this process to make updates:\n  #\n  # * Create a commit that updates the version here to the desired version and\n  #   adds any appropriate CHANGELOG text.\n  # * Send that to eng-prod to review. They will update the checked-in SDK\n  #   and land the review.\n  #\n  # For more details, see https://github.com/dart-lang/sdk/issues/30164.\n  \"dart_style_rev\": \"21de99ec0ff8ace4d946a746fb427fffd6afa535\", # disable tools/rev_sdk_deps.dart\n\n  ### /third_party/pkg dependencies\n  # 'tools/rev_sdk_deps.dart' can rev pkg dependencies to their latest; put an\n  # EOL comment after a dependency to disable this and pin it at its current\n  # revision.\n  \"core_rev\": \"7a71ad6b9170e09d5cbe39f3fccdee648659f1e7\",\n  \"dartdoc_rev\": \"c7f11603effa88ddacabfd555993f322fca8b3fe\",\n  \"ecosystem_rev\": \"efe4ee4af6ac2e4c90aa525fae213b65c97295a9\",\n  \"flute_rev\": \"e4ea0459a7debae5e9592c85141707b01fac86c9\",\n  \"glob_rev\": \"eee18d1a577d5f965f6afbbd251798e065dced43\",\n  \"http_rev\": \"6ecd13a88b82c2fdc8a555f218bafb0ad0370f51\",\n  \"intl_rev\": \"5d65e3808ce40e6282e40881492607df4e35669f\",\n  \"leak_tracker_rev\": \"f5620600a5ce1c44f65ddaa02001e200b096e14c\", # manually rolled\n  \"markdown_rev\": \"19aaded4300d24bedcbf52ade792b203ddf030b0\",\n  \"material_color_utilities_rev\": \"799b6ba2f3f1c28c67cc7e0b4f18e0c7d7f3c03e\",\n  # dart-native-interop-team@ is rolling breaking changes manually while the assets features are in experimental.\n  \"native_rev\": \"14368a80bae9e3f381a2e59c91405338d82451ee\", # disable tools/rev_sdk_deps.dart\n  \"package_config_rev\": \"07097d7ae60d40b34ce8daabdce318ecc168b7d1\",\n  \"pool_rev\": \"bf27900420ba382b6e5c0484ab3c79daad703dcd\",\n  \"protobuf_rev\": \"b7dd58cdbd879beee4c3fbf8ee80fce8e97bad26\",\n  \"pub_rev\": \"58de642dc1d07601f6eb2b4ecd94555c0210106b\", # disable tools/rev_sdk_deps.dart\n  \"pub_semver_rev\": \"960f91309e325ae037e5f1434acb77b83a12d91e\",\n  \"shelf_rev\": \"2b5b683e78f5cc84e479a43297fd7b5489d7db02\",\n  \"source_maps_rev\": \"e5e9d343302acf7df2145316ae4e56026c550989\",\n  \"source_span_rev\": \"e6a34591b7f7880c7ca0fcb95b858ccf7f8be304\",\n  \"sse_rev\": \"b573a1e9a61f5f3e2198becfa3f4f2e8decd1e90\",\n  \"stack_trace_rev\": \"5fe4cfea7f0d8e67b7d5738d2e1c64a18b5ba450\",\n  \"stream_channel_rev\": \"31a3aba8a78a78b266fbf7474f19cd4ba9ca562e\",\n  \"string_scanner_rev\": \"69212690d491603a511904a7a84cd502f34bf7a9\",\n  \"sync_http_rev\": \"47e6b264a209d0d806cfe9cdad8b6c69ce231986\",\n  \"tar_rev\": \"5a1ea943e70cdf3fa5e1102cdbb9418bd9b4b81a\",\n  \"term_glyph_rev\": \"52677db71a2c6b6d0018ebbe5ed7552dbae1248f\",\n  \"test_rev\": \"f364fc8291d668d85c702a5b9f9a4f2e5c1ade0e\",\n  \"test_descriptor_rev\": \"92fa0c551267b38e4b27c9f74976ae4cd96d8b1e\",\n  \"test_reflective_loader_rev\": \"9e35c9e00b8b6299e9295c0f29617af39276717d\",\n  \"tools_rev\": \"b412ba4550bb634caf3c1064b7ebb671cd5e9247\",\n  \"vector_math_rev\": \"bd4b574b2a457a3955d223694f1a979a0c0f38c9\",\n  \"watcher_rev\": \"7f3b3a3ea49ba7e21fff240ce8ee616d62d32956\",\n  \"web_rev\": \"af5de5e8548060c0795713ee7129ba6d5ff9f1b2\",\n  \"web_socket_channel_rev\": \"a937243563e8ee75d11fb23610297d4f6e5cb2b9\",\n  \"webdev_rev\": \"e72f365a4408dce73bc023e624adc6a9a72dd7a2\",\n  \"webdriver_rev\": \"d83d6a3cbaab152ff9b99b29382d1f48b5d5ba23\",\n  \"webkit_inspection_protocol_rev\": \"effa75205516757795683d527c3dea9546eb0c32\",\n  \"yaml_rev\": \"0406507fb719b0c8787896475734747fa35f2b78\",\n  \"yaml_edit_rev\": \"fbdc70acc164af187772e013a2e1364cd05b88dc\",\n\n  # Windows deps\n  \"crashpad_rev\": \"d256de317164c0eb362bdd9cbb4d259fe6d086f3\",\n  \"minichromium_rev\": \"203a01130fac64bfdcc8cab2e1798c7b2c0619bf\",\n  \"googletest_rev\": \"f854f1d27488996dc8a6db3c9453f80b02585e12\",\n\n  # Pinned browser versions used by the testing infrastructure. These are not\n  # meant to be downloaded by users for local testing. You can self-service\n  # update these by following the go/dart-engprod/browsers.md instructions.\n  \"download_chrome\": False,\n  \"chrome_tag\": \"132.0.6834.57\",\n  \"download_firefox\": False,\n  \"firefox_tag\": \"133.0.3\",\n\n  # Emscripten is used in dart2wasm tests.\n  \"download_emscripten\": False,\n  \"emsdk_rev\": \"e41b8c68a248da5f18ebd03bd0420953945d52ff\",\n  \"emsdk_ver\": \"3.1.3\",\n}\n\ngclient_gn_args_file = Var(\"dart_root\") + '/build/config/gclient_args.gni'\ngclient_gn_args = [\n]\n\ndeps = {\n  # Stuff needed for GN build.\n  Var(\"dart_root\") + \"/buildtools/clang_format/script\":\n    Var(\"chromium_git\") + \"/chromium/llvm-project/cfe/tools/clang-format.git\" +\n    \"@\" + Var(\"clang_format_scripts_rev\"),\n\n  Var(\"dart_root\") + \"/benchmarks-internal\": {\n    \"url\": Var(\"dart_internal_git\") + \"/benchmarks-internal.git\" +\n           \"@\" + Var(\"benchmarks_internal_rev\"),\n    \"condition\": \"checkout_benchmarks_internal\",\n  },\n  Var(\"dart_root\") + \"/tools/sdks/dart-sdk\": {\n      \"packages\": [{\n          \"package\": \"dart/dart-sdk/${{platform}}\",\n          \"version\": Var(\"sdk_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/d8/linux/x64\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/d8/linux-amd64\",\n          \"version\": Var(\"d8_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/d8/linux/arm64\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/d8/linux-arm64\",\n          \"version\": Var(\"d8_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/d8/macos/x64\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/d8/mac-amd64\",\n          \"version\": Var(\"d8_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/d8/macos/arm64\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/d8/mac-arm64\",\n          \"version\": Var(\"d8_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/d8/windows/x64\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/d8/windows-amd64\",\n          \"version\": Var(\"d8_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/firefox_jsshell\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/jsshell/${{platform}}\",\n          \"version\": Var(\"jsshell_tag\"),\n      }],\n      \"condition\": \"checkout_javascript_engines\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/jsc\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/jsc/${{platform}}\",\n          \"version\": Var(\"jsc_tag\"),\n      }],\n      \"condition\": \"checkout_javascript_engines and host_os == 'linux' and host_cpu == 'x64'\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/devtools\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/flutter/devtools\",\n          \"version\": \"git_revision:\" + Var(\"devtools_rev\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/tests/co19/src\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/co19\",\n          \"version\": \"git_revision:\" + Var(\"co19_rev\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/markupsafe\":\n      Var(\"chromium_git\") + \"/chromium/src/third_party/markupsafe.git\" +\n      \"@\" + Var(\"markupsafe_rev\"),\n  Var(\"dart_root\") + \"/third_party/babel\": {\n      \"packages\": [{\n          \"package\": \"dart/third_party/babel\",\n          \"version\": \"version:7.4.5\",\n      }],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/zlib\":\n      Var(\"chromium_git\") + \"/chromium/src/third_party/zlib.git\" +\n      \"@\" + Var(\"zlib_rev\"),\n  Var(\"dart_root\") + \"/third_party/cpu_features/src\":\n      Var(\"chromium_git\") + \"/external/github.com/google/cpu_features.git\" +\n      \"@\" + Var(\"cpu_features_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/libcxx\":\n      Var(\"llvm_git\") + \"/llvm-project/libcxx\" + \"@\" + Var(\"libcxx_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/libcxxabi\":\n      Var(\"llvm_git\") + \"/llvm-project/libcxxabi\" + \"@\" + Var(\"libcxxabi_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/boringssl/src\":\n      \"https://boringssl.googlesource.com/boringssl.git\" +\n      \"@\" + Var(\"boringssl_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/binaryen/src\" :\n      Var(\"chromium_git\") + \"/external/github.com/WebAssembly/binaryen.git\" +\n      \"@\" + Var(\"binaryen_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/gsutil\": {\n      \"packages\": [{\n          \"package\": \"infra/3pp/tools/gsutil\",\n          \"version\": \"version:3@5.30\",\n      }],\n      \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/third_party/emsdk\":\n      Var(\"dart_git\") + \"external/github.com/emscripten-core/emsdk.git\" +\n      \"@\" + Var(\"emsdk_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/jinja2\":\n      Var(\"chromium_git\") + \"/chromium/src/third_party/jinja2.git\" +\n      \"@\" + Var(\"jinja2_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/perfetto\":\n      Var(\"android_git\") + \"/platform/external/perfetto\" +\n      \"@\" + Var(\"perfetto_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/ply\":\n      Var(\"chromium_git\") + \"/chromium/src/third_party/ply.git\" +\n      \"@\" + Var(\"ply_rev\"),\n\n  Var(\"dart_root\") + \"/build/secondary/third_party/protobuf\":\n      Var(\"fuchsia_git\") + \"/protobuf-gn\" +\n      \"@\" + Var(\"protobuf_gn_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/protobuf\":\n      Var(\"fuchsia_git\") + \"/third_party/protobuf\" +\n      \"@\" + Var(\"libprotobuf_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/icu\":\n      Var(\"chromium_git\") + \"/chromium/deps/icu.git\" +\n      \"@\" + Var(\"icu_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/WebCore\":\n      Var(\"dart_git\") + \"webcore.git\" + \"@\" + Var(\"WebCore_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/mdn/browser-compat-data/src\":\n      Var('chromium_git') + '/external/github.com/mdn/browser-compat-data' +\n      \"@\" + Var(\"browser-compat-data_tag\"),\n\n  Var(\"dart_root\") + \"/third_party/pkg/core\":\n      Var(\"dart_git\") + \"core.git\" + \"@\" + Var(\"core_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/dart_style\":\n      Var(\"dart_git\") + \"dart_style.git\" + \"@\" + Var(\"dart_style_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/dartdoc\":\n      Var(\"dart_git\") + \"dartdoc.git\" + \"@\" + Var(\"dartdoc_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/ecosystem\":\n      Var(\"dart_git\") + \"ecosystem.git\" + \"@\" + Var(\"ecosystem_rev\"),\n  Var(\"dart_root\") + \"/third_party/flute\": {\n    \"url\": Var(\"dart_git\") + \"flute.git\" + \"@\" + Var(\"flute_rev\"),\n    \"condition\": \"checkout_flute\",\n  },\n  Var(\"dart_root\") + \"/third_party/pkg/glob\":\n      Var(\"dart_git\") + \"glob.git\" + \"@\" + Var(\"glob_rev\"),\n\n  Var(\"dart_root\") + \"/third_party/pkg/http\":\n      Var(\"dart_git\") + \"http.git\" + \"@\" + Var(\"http_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/intl\":\n      Var(\"dart_git\") + \"intl.git\" + \"@\" + Var(\"intl_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/leak_tracker\":\n      Var(\"dart_git\") + \"leak_tracker.git\" + \"@\" + Var(\"leak_tracker_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/markdown\":\n      Var(\"dart_git\") + \"markdown.git\" + \"@\" + Var(\"markdown_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/material_color_utilities\": {\n    \"url\": Var(\"dart_git\") +\n           \"external/github.com/material-foundation/material-color-utilities.git\" +\n           \"@\" + Var(\"material_color_utilities_rev\"),\n    \"condition\": \"checkout_flute\",\n  },\n  Var(\"dart_root\") + \"/third_party/pkg/native\":\n      Var(\"dart_git\") + \"native.git\" + \"@\" + Var(\"native_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/package_config\":\n      Var(\"dart_git\") + \"package_config.git\" +\n      \"@\" + Var(\"package_config_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/pool\":\n      Var(\"dart_git\") + \"pool.git\" + \"@\" + Var(\"pool_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/protobuf\":\n       Var(\"dart_git\") + \"protobuf.git\" + \"@\" + Var(\"protobuf_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/pub_semver\":\n      Var(\"dart_git\") + \"pub_semver.git\" + \"@\" + Var(\"pub_semver_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/pub\":\n      Var(\"dart_git\") + \"pub.git\" + \"@\" + Var(\"pub_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/shelf\":\n      Var(\"dart_git\") + \"shelf.git\" + \"@\" + Var(\"shelf_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/source_maps\":\n      Var(\"dart_git\") + \"source_maps.git\" + \"@\" + Var(\"source_maps_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/source_span\":\n      Var(\"dart_git\") + \"source_span.git\" + \"@\" + Var(\"source_span_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/sse\":\n      Var(\"dart_git\") + \"sse.git\" + \"@\" + Var(\"sse_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/stack_trace\":\n      Var(\"dart_git\") + \"stack_trace.git\" + \"@\" + Var(\"stack_trace_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/stream_channel\":\n      Var(\"dart_git\") + \"stream_channel.git\" +\n      \"@\" + Var(\"stream_channel_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/string_scanner\":\n      Var(\"dart_git\") + \"string_scanner.git\" +\n      \"@\" + Var(\"string_scanner_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/sync_http\":\n      Var(\"dart_git\") + \"sync_http.git\" + \"@\" + Var(\"sync_http_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/tar\":\n      Var(\"dart_git\") + \"external/github.com/simolus3/tar.git\" +\n      \"@\" + Var(\"tar_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/term_glyph\":\n      Var(\"dart_git\") + \"term_glyph.git\" + \"@\" + Var(\"term_glyph_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/test\":\n      Var(\"dart_git\") + \"test.git\" + \"@\" + Var(\"test_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/test_descriptor\":\n      Var(\"dart_git\") + \"test_descriptor.git\" + \"@\" + Var(\"test_descriptor_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/test_reflective_loader\":\n      Var(\"dart_git\") + \"test_reflective_loader.git\" +\n      \"@\" + Var(\"test_reflective_loader_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/tools\":\n      Var(\"dart_git\") + \"tools.git\" + \"@\" + Var(\"tools_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/vector_math\":\n      Var(\"dart_git\") + \"external/github.com/google/vector_math.dart.git\" +\n      \"@\" + Var(\"vector_math_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/watcher\":\n      Var(\"dart_git\") + \"watcher.git\" + \"@\" + Var(\"watcher_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/webdev\":\n      Var(\"dart_git\") + \"webdev.git\" + \"@\" + Var(\"webdev_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/webdriver\":\n      Var(\"dart_git\") + \"external/github.com/google/webdriver.dart.git\" +\n      \"@\" + Var(\"webdriver_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/webkit_inspection_protocol\":\n      Var(\"dart_git\") + \"external/github.com/google/webkit_inspection_protocol.dart.git\" +\n      \"@\" + Var(\"webkit_inspection_protocol_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/web\":\n      Var(\"dart_git\") + \"web.git\" + \"@\" + Var(\"web_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/web_socket_channel\":\n      Var(\"dart_git\") + \"web_socket_channel.git\" +\n      \"@\" + Var(\"web_socket_channel_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/yaml_edit\":\n      Var(\"dart_git\") + \"yaml_edit.git\" + \"@\" + Var(\"yaml_edit_rev\"),\n  Var(\"dart_root\") + \"/third_party/pkg/yaml\":\n      Var(\"dart_git\") + \"yaml.git\" + \"@\" + Var(\"yaml_rev\"),\n\n  Var(\"dart_root\") + \"/buildtools/sysroot/linux\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/sysroot/linux\",\n              \"version\": \"git_revision:fa7a5a9710540f30ff98ae48b62f2cdf72ed2acd\",\n          },\n      ],\n      \"condition\": \"host_os == linux\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/sysroot/focal\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/sysroot/focal\",\n              \"version\": \"git_revision:fa7a5a9710540f30ff98ae48b62f2cdf72ed2acd\",\n          },\n      ],\n      \"condition\": \"host_os == linux\",\n      \"dep_type\": \"cipd\",\n  },\n\n  # Keep consistent with pkg/test_runner/lib/src/options.dart.\n  Var(\"dart_root\") + \"/buildtools/linux-x64/clang\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/clang/linux-amd64\",\n              \"version\": Var(\"clang_version\"),\n          },\n      ],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/mac-x64/clang\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/clang/mac-amd64\",\n              \"version\": Var(\"clang_version\"),\n          },\n      ],\n      \"condition\": \"host_os == mac\", # On ARM64 Macs too because Goma doesn't support the host-arm64 toolchain.\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/win-x64/clang\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/clang/windows-amd64\",\n              \"version\": Var(\"clang_version\"),\n          },\n      ],\n      \"condition\": \"host_os == win\", # On ARM64 Windows too because Fuchsia doesn't provide the host-arm64 toolchain.\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/linux-arm64/clang\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/clang/linux-arm64\",\n              \"version\": Var(\"clang_version\"),\n          },\n      ],\n      \"condition\": \"host_os == 'linux' and host_cpu == 'arm64'\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/mac-arm64/clang\": {\n      \"packages\": [\n          {\n              \"package\": \"fuchsia/third_party/clang/mac-arm64\",\n              \"version\": Var(\"clang_version\"),\n          },\n      ],\n      \"condition\": \"host_os == 'mac' and host_cpu == 'arm64'\",\n      \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + '/buildtools/reclient': {\n    'packages': [\n      {\n        'package': 'infra/rbe/client/${{platform}}',\n        'version': Var('reclient_version'),\n      }\n    ],\n    # Download reclient only on the platforms where it has packages available.\n    # Unfortunately windows-arm64 gclient uses x64 python which lies in\n    # host_cpu, so we have to use a variable to not download reclient there.\n    'condition': 'download_reclient and (((host_os == \"linux\" or host_os == \"mac\" or host_os == \"win\") and host_cpu == \"x64\") or (host_os == \"mac\" and host_cpu == \"arm64\"))',\n    'dep_type': 'cipd',\n  },\n\n  Var(\"dart_root\") + \"/third_party/webdriver/chrome\": {\n    \"packages\": [\n      {\n        \"package\": \"dart/third_party/chromedriver/${{platform}}\",\n        \"version\": \"version:\" + Var(\"chrome_tag\"),\n      }\n    ],\n    \"condition\": \"download_chrome\",\n    \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/buildtools\": {\n      \"packages\": [\n          {\n              \"package\": \"gn/gn/${{platform}}\",\n              \"version\": Var(\"gn_version\"),\n          },\n      ],\n      \"condition\": \"host_os != 'win'\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/buildtools/win\": {\n      \"packages\": [\n          {\n              \"package\": \"gn/gn/windows-amd64\",\n              \"version\": Var(\"gn_version\"),\n          },\n      ],\n      \"condition\": \"host_os == 'win'\",\n      \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/buildtools/ninja\": {\n      \"packages\": [{\n          \"package\": \"infra/3pp/tools/ninja/${{platform}}\",\n          \"version\": Var(\"ninja_tag\"),\n      }],\n      \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/third_party/android_tools/ndk\": {\n      \"packages\": [\n          {\n            \"package\": \"flutter/android/ndk/${{os}}-amd64\",\n            \"version\": \"version:r27.0.10869015\"\n          }\n      ],\n      \"condition\": \"download_android_deps\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/android_tools/sdk/platform-tools\": {\n      \"packages\": [\n          {\n            \"package\": \"flutter/android/sdk/platform-tools/linux-amd64\",\n            \"version\": \"1tZc4sOxZS6FQIvT5i0wwdycmM8AO7QZY32FC9_HfR4C\"\n          }\n      ],\n      \"condition\": \"download_android_deps\",\n      \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/third_party/fuchsia/sdk/linux\": {\n    \"packages\": [\n      {\n      \"package\": \"fuchsia/sdk/core/${{platform}}\",\n      \"version\": Var(\"fuchsia_sdk_version\"),\n      }\n    ],\n    \"condition\": 'download_fuchsia_deps and host_os == \"linux\"',\n    \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/third_party/fuchsia/test_scripts\": {\n    \"packages\": [\n      {\n      \"package\": \"chromium/fuchsia/test-scripts\",\n      \"version\": \"r9Dc5VRF6sE3pJH20k2d1Yko3xSlwljH_nuw7O8vcb4C\",\n      }\n    ],\n    \"condition\": 'download_fuchsia_deps',\n    \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/third_party/fuchsia/gn-sdk\": {\n    \"packages\": [\n      {\n      \"package\": \"chromium/fuchsia/gn-sdk\",\n      \"version\": \"T6ahk2PZvX-n2RabPqFNTu_AL3tTBGgQMnfAOavwCtsC\",\n      }\n    ],\n    \"condition\": 'download_fuchsia_deps',\n    \"dep_type\": \"cipd\",\n  },\n\n  Var(\"dart_root\") + \"/pkg/front_end/test/types/benchmark_data\": {\n    \"packages\": [\n      {\n        \"package\": \"dart/cfe/benchmark_data\",\n        \"version\": \"sha1sum:5b6e6dfa33b85c733cab4e042bf46378984d1544\",\n      }\n    ],\n    \"dep_type\": \"cipd\",\n  },\n\n  # TODO(37531): Remove these cipd packages and build with sdk instead when\n  # benchmark runner gets support for that.\n  Var(\"dart_root\") + \"/benchmarks/FfiBoringssl/native/out/\": {\n      \"packages\": [\n          {\n              \"package\": \"dart/benchmarks/ffiboringssl\",\n              \"version\": \"commit:a86c69888b9a416f5249aacb4690a765be064969\",\n          },\n      ],\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/benchmarks/FfiCall/native/out/\": {\n      \"packages\": [\n          {\n              \"package\": \"dart/benchmarks/fficall\",\n              \"version\": \"ebF5aRXKDananlaN4Y8b0bbCNHT1MnkGbWqfpCpiND4C\",\n          },\n      ],\n          \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/benchmarks/NativeCall/native/out/\": {\n      \"packages\": [\n          {\n              \"package\": \"dart/benchmarks/nativecall\",\n              \"version\": \"w1JKzCIHSfDNIjqnioMUPq0moCXKwX67aUfhyrvw4E0C\",\n          },\n      ],\n          \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/browsers/chrome\": {\n      \"packages\": [\n          {\n              \"package\": \"dart/browsers/chrome/${{platform}}\",\n              \"version\": \"version:\" + Var(\"chrome_tag\"),\n          },\n      ],\n      \"condition\": \"download_chrome\",\n      \"dep_type\": \"cipd\",\n  },\n  Var(\"dart_root\") + \"/third_party/browsers/firefox\": {\n      \"packages\": [\n          {\n              \"package\": \"dart/browsers/firefox/${{platform}}\",\n              \"version\": \"version:\" + Var(\"firefox_tag\"),\n          },\n      ],\n      \"condition\": \"download_firefox\",\n      \"dep_type\": \"cipd\",\n  },\n}\n\ndeps_os = {\n  \"win\": {\n    Var(\"dart_root\") + \"/third_party/cygwin\":\n        Var(\"chromium_git\") + \"/chromium/deps/cygwin.git\" + \"@\" +\n        \"c89e446b273697fadf3a10ff1007a97c0b7de6df\",\n    Var(\"dart_root\") + \"/third_party/crashpad/crashpad\":\n        Var(\"chromium_git\") + \"/crashpad/crashpad.git\" + \"@\" +\n        Var(\"crashpad_rev\"),\n    Var(\"dart_root\") + \"/third_party/mini_chromium/mini_chromium\":\n        Var(\"chromium_git\") + \"/chromium/mini_chromium\" + \"@\" +\n        Var(\"minichromium_rev\"),\n    Var(\"dart_root\") + \"/third_party/googletest\":\n        Var(\"fuchsia_git\") + \"/third_party/googletest\" + \"@\" +\n        Var(\"googletest_rev\"),\n  }\n}\n\nhooks = [\n  {\n    # Generate the .dart_tool/package_confg.json file.\n    'name': 'Generate .dart_tool/package_confg.json',\n    'pattern': '.',\n    'action': ['python3', 'sdk/tools/generate_package_config.py'],\n  },\n  {\n    # Generate the sdk/version file.\n    'name': 'Generate sdk/version',\n    'pattern': '.',\n    'action': ['python3', 'sdk/tools/generate_sdk_version_file.py'],\n  },\n  {\n    'name': 'buildtools',\n    'pattern': '.',\n    'action': ['python3', 'sdk/tools/buildtools/update.py'],\n  },\n  {\n    # Update the Windows toolchain if necessary.\n    'name': 'win_toolchain',\n    'pattern': '.',\n    'action': ['python3', 'sdk/build/vs_toolchain.py', 'update'],\n    'condition': 'checkout_win'\n  },\n  # Install and activate the empscripten SDK.\n  {\n    'name': 'install_emscripten',\n    'pattern': '.',\n    'action': ['python3', 'sdk/third_party/emsdk/emsdk.py', 'install',\n        Var('emsdk_ver')],\n    'condition': 'download_emscripten'\n  },\n  {\n    'name': 'activate_emscripten',\n    'pattern': '.',\n    'action': ['python3', 'sdk/third_party/emsdk/emsdk.py', 'activate',\n        Var('emsdk_ver')],\n    'condition': 'download_emscripten'\n  },\n  {\n    'name': 'Erase arch/ from fuchsia sdk',\n    'pattern': '.',\n    'action': [\n      'rm',\n      '-rf',\n      'sdk/third_party/fuchsia/sdk/linux/arch',\n    ],\n    'condition': 'download_fuchsia_deps'\n  },\n  {\n    'name': 'Download Fuchsia system images',\n    'pattern': '.',\n    'action': [\n      'python3',\n      'sdk/build/fuchsia/with_envs.py',\n      'sdk/third_party/fuchsia/test_scripts/update_product_bundles.py',\n      'terminal.x64,terminal.qemu-arm64',\n    ],\n    'condition': 'download_fuchsia_deps'\n  },\n  {\n    'name': 'Generate Fuchsia GN build rules',\n    'pattern': '.',\n    'action': [\n      'python3',\n      'sdk/build/fuchsia/with_envs.py',\n      'sdk/third_party/fuchsia/test_scripts/gen_build_defs.py',\n    ],\n    'condition': 'download_fuchsia_deps'\n  },\n]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.466796875,
          "content": "Copyright 2012, the Dart project authors.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Google LLC nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "OWNERS",
          "type": "blob",
          "size": 0.9306640625,
          "content": "# Global approvers - only to be used as a last resort.\nasiva@google.com #{LAST_RESORT_SUGGESTION}\nathom@google.com #{LAST_RESORT_SUGGESTION}\ndevoncarew@google.com #{LAST_RESORT_SUGGESTION}\nkustermann@google.com #{LAST_RESORT_SUGGESTION}\nleafp@google.com #{LAST_RESORT_SUGGESTION}\nsigmund@google.com #{LAST_RESORT_SUGGESTION}\nvegorov@google.com #{LAST_RESORT_SUGGESTION}\nvsm@google.com #{LAST_RESORT_SUGGESTION}\n\n# DEPS\nper-file DEPS=file:/tools/OWNERS_ENG\n\n# Changelog, AUTHORS, and .git* do not require approval.\nper-file CHANGELOG.md,AUTHORS,WATCHLISTS,.gitattributes,.gitconfig,.gitignore,sdk.code-workspace=*\n\n# Product documentation\nper-file CONTRIBUTING.md,LICENSE,PATENT_GRANT,README.*,SECURITY.md,sdk_packages.yaml=file:/tools/OWNERS_PRODUCT\n\n# Top level build files\nper-file .clang-format,.gn,BUILD.gn,sdk_args.gni=file:/tools/OWNERS_BUILD\n\n# Infrastructure files.\nper-file .style.yapf,codereview.settings,PRESUBMIT.py=file:/tools/OWNERS_INFRA\n"
        },
        {
          "name": "PATENT_GRANT",
          "type": "blob",
          "size": 1.26953125,
          "content": "Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the Dart Project.\n\nGoogle hereby grants to you a perpetual, worldwide, non-exclusive,\nno-charge, royalty-free, irrevocable (except as stated in this\nsection) patent license to make, have made, use, offer to sell, sell,\nimport, transfer, and otherwise run, modify and propagate the contents\nof this implementation of Dart, where such license applies only to\nthose patent claims, both currently owned by Google and acquired in\nthe future, licensable by Google that are necessarily infringed by\nthis implementation of Dart. This grant does not include claims that\nwould be infringed only as a consequence of further modification of\nthis implementation. If you or your agent or exclusive licensee\ninstitute or order or agree to the institution of patent litigation\nagainst any entity (including a cross-claim or counterclaim in a\nlawsuit) alleging that this implementation of Dart or any code\nincorporated within this implementation of Dart constitutes direct or\ncontributory patent infringement, or inducement of patent\ninfringement, then any patent rights granted to you under this License\nfor this implementation of Dart shall terminate as of the date such\nlitigation is filed.\n"
        },
        {
          "name": "PRESUBMIT.py",
          "type": "blob",
          "size": 19.3515625,
          "content": "#!/usr/bin/env python3\n# Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file\n# for details. All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\"\"\"Top-level presubmit script for Dart.\n\nSee http://dev.chromium.org/developers/how-tos/depottools/presubmit-scripts\nfor more details about the presubmit API built into gcl.\n\"\"\"\n\nimport datetime\nimport importlib.util\nimport importlib.machinery\nimport os\nimport os.path\nfrom typing import Callable\nimport scm\nimport subprocess\nimport tempfile\nimport platform\n\nUSE_PYTHON3 = True\n\n\ndef is_cpp_file(path):\n    return path.endswith('.cc') or path.endswith('.h')\n\n\ndef is_dart_file(path):\n    return path.endswith('.dart')\n\n\ndef get_old_contents(input_api, path):\n    local_root = input_api.change.RepositoryRoot()\n    upstream = input_api.change._upstream\n    return scm.GIT.Capture(['show', upstream + ':' + path],\n                           cwd=local_root,\n                           strip_out=False)\n\n\ndef files_to_check_for_format(input_api, extension, exclude_folders):\n    files = []\n    exclude_folders += [\n        \"pkg/front_end/testcases/\", \"pkg/front_end/parser_testcases/\"\n    ]\n    for git_file in input_api.AffectedTextFiles():\n        local_path = git_file.LocalPath()\n        if not local_path.endswith(extension):\n            continue\n        if any([local_path.startswith(f) for f in exclude_folders]):\n            continue\n        files.append(git_file)\n    return files\n\n\ndef _CheckFormat(input_api, identification, extension, windows,\n                 hasFormatErrors: Callable[[str, list, str],\n                                           bool], exclude_folders):\n    files = files_to_check_for_format(input_api, extension, exclude_folders)\n    if not files:\n        return []\n\n    # Check for formatting errors in bulk first. This is orders of magnitude\n    # faster than checking file-by-file on large changes with hundreds of files.\n    if not hasFormatErrors(filenames=[f.AbsoluteLocalPath() for f in files]):\n        return []\n\n    print(\"Formatting errors found, comparing against old versions.\")\n    unformatted_files = []\n    for git_file in files:\n        filename = git_file.AbsoluteLocalPath()\n        if hasFormatErrors(filename=filename):\n            old_version_has_errors = False\n            try:\n                path = git_file.LocalPath()\n                if windows:\n                    # Git expects a linux style path.\n                    path = path.replace(os.sep, '/')\n                if hasFormatErrors(contents=get_old_contents(input_api, path)):\n                    old_version_has_errors = True\n            except subprocess.CalledProcessError as e:\n                old_version_has_errors = False\n\n            if old_version_has_errors:\n                print(\"WARNING: %s has existing and possibly new %s issues\" %\n                      (git_file.LocalPath(), identification))\n            else:\n                unformatted_files.append(filename)\n\n    return unformatted_files\n\n\ndef load_source(modname, filename):\n    loader = importlib.machinery.SourceFileLoader(modname, filename)\n    spec = importlib.util.spec_from_file_location(modname,\n                                                  filename,\n                                                  loader=loader)\n    module = importlib.util.module_from_spec(spec)\n    # The module is always executed and not cached in sys.modules.\n    # Uncomment the following line to cache the module.\n    # sys.modules[module.__name__] = module\n    loader.exec_module(module)\n    return module\n\n\ndef _CheckDartFormat(input_api, output_api):\n    local_root = input_api.change.RepositoryRoot()\n    utils = load_source('utils', os.path.join(local_root, 'tools', 'utils.py'))\n\n    dart = os.path.join(utils.CheckedInSdkPath(), 'bin', 'dart')\n\n    windows = utils.GuessOS() == 'win32'\n    if windows:\n        dart += '.exe'\n\n    if not os.path.isfile(dart):\n        print('WARNING: dart not found: %s' % (dart))\n        return []\n\n    def HasFormatErrors(filename: str = None,\n                        filenames: list = None,\n                        contents: str = None):\n        # Don't look for formatting errors in multitests. Since those are very\n        # sensitive to whitespace, many cannot be reformatted without breaking\n        # them.\n        def skip_file(path):\n            if path.endswith('_test.dart'):\n                with open(path, encoding='utf-8') as f:\n                    contents = f.read()\n                    if '//#' in contents:\n                        return True\n            return False\n\n        if filename and skip_file(filename):\n            return False\n\n        args = [\n            dart,\n            'format',\n            '--set-exit-if-changed',\n            '--output=none',\n            '--summary=none',\n        ]\n\n        # TODO(https://github.com/dart-lang/sdk/issues/46947): Remove this hack.\n        if windows and contents:\n            f = tempfile.NamedTemporaryFile(\n                encoding='utf-8',\n                delete=False,\n                mode='w',\n                suffix='.dart',\n            )\n            try:\n                f.write(contents)\n                f.close()\n                args.append(f.name)\n                process = subprocess.run(args)\n            finally:\n                os.unlink(f.name)\n        elif contents:\n            process = subprocess.run(args, input=contents, text=True)\n        elif filenames:\n            args += [f for f in filenames if not skip_file(f)]\n            process = subprocess.run(args)\n        else:\n            args.append(filename)\n            process = subprocess.run(args)\n\n        # Check for exit code 1 explicitly to distinguish it from a syntax error\n        # in the file (exit code 65). The repo contains many Dart files that are\n        # known to have syntax errors for testing purposes and which can't be\n        # parsed and formatted. Don't treat those as errors.\n        return process.returncode == 1\n\n    unformatted_files = _CheckFormat(input_api, \"dart format\", \".dart\", windows,\n                                     HasFormatErrors, [])\n\n    if unformatted_files:\n        lineSep = \" \\\\\\n\"\n        if windows:\n            lineSep = \" ^\\n\"\n        return [\n            output_api.PresubmitError(\n                'File output does not match dart format.\\n'\n                'Fix these issues with:\\n'\n                '%s format %s' % (dart, lineSep.join(unformatted_files)))\n        ]\n\n    return []\n\n\ndef _CheckStatusFiles(input_api, output_api):\n    local_root = input_api.change.RepositoryRoot()\n    utils = load_source('utils', os.path.join(local_root, 'tools', 'utils.py'))\n\n    dart = os.path.join(utils.CheckedInSdkPath(), 'bin', 'dart')\n    lint = os.path.join(local_root, 'pkg', 'status_file', 'bin', 'lint.dart')\n\n    windows = utils.GuessOS() == 'win32'\n    if windows:\n        dart += '.exe'\n\n    if not os.path.isfile(dart):\n        print('WARNING: dart not found: %s' % dart)\n        return []\n\n    if not os.path.isfile(lint):\n        print('WARNING: Status file linter not found: %s' % lint)\n        return []\n\n    def HasFormatErrors(filename=None, filenames=None, contents=None):\n        if filenames:\n            # The status file linter doesn't support checking files in bulk.\n            # Returning `True` causes `_CheckFormat` to fallback to check\n            # formatting file by file below.\n            return True\n        args = [dart, lint] + (['-t'] if contents else [filename])\n        process = subprocess.run(args, input=contents, text=True)\n        return process.returncode != 0\n\n    exclude_folders = [\n        \"pkg/status_file/test/data/\",\n        \"pkg/front_end/\",\n    ]\n    unformatted_files = _CheckFormat(input_api, \"status file\", \".status\",\n                                     windows, HasFormatErrors, exclude_folders)\n\n    if unformatted_files:\n        normalize = os.path.join(local_root, 'pkg', 'status_file', 'bin',\n                                 'normalize.dart')\n        lineSep = \" \\\\\\n\"\n        if windows:\n            lineSep = \" ^\\n\"\n        return [\n            output_api.PresubmitError(\n                'Status files are not normalized.\\n'\n                'Fix these issues with:\\n'\n                '%s %s -w%s%s' % (dart, normalize, lineSep,\n                                  lineSep.join(unformatted_files)))\n        ]\n\n    return []\n\n\ndef _CheckValidHostsInDEPS(input_api, output_api):\n    \"\"\"Checks that DEPS file deps are from allowed_hosts.\"\"\"\n    # Run only if DEPS file has been modified to annoy fewer bystanders.\n    if all(f.LocalPath() != 'DEPS' for f in input_api.AffectedFiles()):\n        return []\n    # Outsource work to gclient verify\n    try:\n        input_api.subprocess.check_output(['gclient', 'verify'])\n        return []\n    except input_api.subprocess.CalledProcessError as error:\n        return [\n            output_api.PresubmitError(\n                'DEPS file must have only dependencies from allowed hosts.',\n                long_text=error.output)\n        ]\n\n\ndef _CheckLayering(input_api, output_api):\n    \"\"\"Run VM layering check.\n\n  This check validates that sources from one layer do not reference sources\n  from another layer accidentally.\n  \"\"\"\n\n    # Run only if .cc or .h file was modified.\n    if all(not is_cpp_file(f.LocalPath()) for f in input_api.AffectedFiles()):\n        return []\n\n    local_root = input_api.change.RepositoryRoot()\n    compiler_layering_check = load_source(\n        'compiler_layering_check',\n        os.path.join(local_root, 'runtime', 'tools',\n                     'compiler_layering_check.py'))\n    errors = compiler_layering_check.DoCheck(local_root)\n    embedder_layering_check = load_source(\n        'embedder_layering_check',\n        os.path.join(local_root, 'runtime', 'tools',\n                     'embedder_layering_check.py'))\n    errors += embedder_layering_check.DoCheck(local_root)\n    if errors:\n        return [\n            output_api.PresubmitError(\n                'Layering check violation for C++ sources.',\n                long_text='\\n'.join(errors))\n        ]\n\n    return []\n\n\ndef _CheckClangTidy(input_api, output_api):\n    \"\"\"Run clang-tidy on VM changes.\"\"\"\n\n    # Only run clang-tidy on linux x64.\n    if platform.system() != 'Linux' or platform.machine() != 'x86_64':\n        return []\n\n    # Run only for modified .cc or .h files.\n    files = []\n    for f in input_api.AffectedFiles():\n        path = f.LocalPath()\n        if is_cpp_file(path) and os.path.isfile(path): files.append(path)\n\n    if not files:\n        return []\n\n    args = [\n        'tools/sdks/dart-sdk/bin/dart',\n        'runtime/tools/run_clang_tidy.dart',\n    ]\n    args.extend(files)\n    stdout = input_api.subprocess.check_output(args).strip()\n    if not stdout:\n        return []\n\n    return [\n        output_api.PresubmitError(\n            'The `clang-tidy` linter revealed issues:',\n            long_text=stdout)\n    ]\n\n\ndef _CheckClangFormat(input_api, output_api):\n    \"\"\"Run clang-format on VM changes.\"\"\"\n\n    # Only run clang-format on linux x64.\n    if platform.system() != 'Linux' or platform.machine() != 'x86_64':\n        return []\n\n    # Run only for modified .cc or .h files, except for DEPS changes.\n    files = []\n    is_deps = False\n    for f in input_api.AffectedFiles():\n        path = f.LocalPath()\n        if path == 'DEPS' and any(\n                map(lambda content: 'clang' in content[1],\n                    f.ChangedContents())):\n            is_deps = True\n            break\n        if is_cpp_file(path) and os.path.isfile(path):\n            files.append(path)\n\n    if is_deps:\n        find_args = [\n            'find',\n            'runtime/',\n            '-iname',\n            '*.h',\n            '-o',\n            '-iname',\n            '*.cc',\n        ]\n        files = subprocess.check_output(find_args, text=True).split()\n\n    if not files:\n        return []\n\n    args = [\n        'buildtools/linux-x64/clang/bin/clang-format',\n        '--dry-run',\n        '--Werror',\n    ]\n    args.extend(files)\n    stdout = input_api.subprocess.check_output(args).strip()\n    if not stdout:\n        return []\n\n    return [\n        output_api.PresubmitError('The `clang-format` revealed issues:',\n                                  long_text=stdout)\n    ]\n\n\ndef _CheckAnalyzerFiles(input_api, output_api):\n    \"\"\"Run analyzer checks on source files.\"\"\"\n\n    # Verify the \"error fix status\" file.\n    code_files = [\n        \"pkg/analyzer/lib/src/error/error_code_values.g.dart\",\n        \"pkg/linter/lib/src/rules.dart\",\n    ]\n\n    if any(f.LocalPath() in code_files for f in input_api.AffectedFiles()):\n        args = [\n            \"tools/sdks/dart-sdk/bin/dart\",\n            \"pkg/analysis_server/tool/presubmit/verify_error_fix_status.dart\",\n        ]\n        stdout = input_api.subprocess.check_output(args).strip()\n        if not stdout:\n            return []\n\n        return [\n            output_api.PresubmitError(\n                \"The verify_error_fix_status Analyzer tool revealed issues:\",\n                long_text=stdout)\n        ]\n\n    # Verify the linter's `example/all.yaml` file.\n    if any(f.LocalPath().startswith('pkg/linter/lib/src/rules')\n           for f in input_api.AffectedFiles()):\n        args = [\n            \"tools/sdks/dart-sdk/bin/dart\",\n            \"pkg/linter/tool/checks/check_all_yaml.dart\",\n        ]\n        stdout = input_api.subprocess.check_output(args).strip()\n        if not stdout:\n            return []\n\n        return [\n            output_api.PresubmitError(\n                \"The check_all_yaml linter tool revealed issues:\",\n                long_text=stdout)\n        ]\n\n    # TODO(srawlins): Check more:\n    # * \"verify_sorted\" for individual modified (not deleted) files in\n    #   Analyzer-team-owned directories.\n    # * \"verify_tests\" for individual modified (not deleted) test files in\n    #   Analyzer-team-owned directories.\n    # * Verify that `messages/generate.dart` does not produce different\n    #   content, when `pkg/analyzer/messages.yaml` is modified.\n    # * Verify that `diagnostics/generate.dart` does not produce different\n    #   content, when `pkg/analyzer/messages.yaml` is modified.\n    # * Maybe \"verify_no_solo\" for individual modified (not deleted test files\n    #   in Analyzer-team-owned directories.\n\n    # No files are relevant.\n    return []\n\n\ndef _CheckTestMatrixValid(input_api, output_api):\n    \"\"\"Run script to check that the test matrix has no errors.\"\"\"\n\n    def test_matrix_filter(affected_file):\n        \"\"\"Only run test if either the test matrix or the code that\n           validates it was modified.\"\"\"\n        path = affected_file.LocalPath()\n        return (path == 'tools/bots/test_matrix.json' or\n                path == 'tools/validate_test_matrix.dart' or\n                path.startswith('pkg/smith/'))\n\n    if len(\n            input_api.AffectedFiles(\n                include_deletes=False, file_filter=test_matrix_filter)) == 0:\n        return []\n\n    command = [\n        'tools/sdks/dart-sdk/bin/dart',\n        'tools/validate_test_matrix.dart',\n    ]\n    stdout = input_api.subprocess.check_output(command).strip()\n    if not stdout:\n        return []\n    else:\n        return [\n            output_api.PresubmitError(\n                'The test matrix is not valid:', long_text=stdout)\n        ]\n\n\ndef _CheckCopyrightYear(input_api, output_api):\n    \"\"\"Check copyright year in new files.\"\"\"\n\n    files = []\n    year = str(datetime.datetime.now().year)\n    for f in input_api.AffectedFiles(include_deletes=False):\n        path = f.LocalPath()\n        if (is_dart_file(path) or is_cpp_file(path)\n           ) and f.Action() == 'A' and os.path.isfile(path):\n            with open(path, encoding='utf-8') as f:\n                first_line = f.readline()\n                if 'Copyright' in first_line and year not in first_line:\n                    files.append(path)\n\n    if not files:\n        return []\n\n    return [\n        output_api.PresubmitPromptWarning(\n            'Copyright year for new files should be ' + year + ':\\n' +\n            '\\n'.join(files))\n    ]\n\n\ndef _CheckNoNewObservatoryServiceTests(input_api, output_api):\n    \"\"\"Ensures that no new tests are added to the Observatory test suite.\"\"\"\n    files = []\n\n    for f in input_api.AffectedFiles(include_deletes=False):\n        path = f.LocalPath()\n        if is_dart_file(path) and path.startswith(\n                \"runtime/observatory/tests/service/\") and f.Action(\n                ) == 'A' and os.path.isfile(path):\n            files.append(path)\n\n    if not files:\n        return []\n\n    return [\n        output_api.PresubmitError(\n            'New VM service tests should be added to pkg/vm_service/test, ' +\n            'not runtime/observatory/tests/service:\\n' + '\\n'.join(files))\n    ]\n\n\ndef _CheckDevCompilerSync(input_api, output_api):\n    \"\"\"Make sure that any changes in the original and the temporary forked\n    version of the DDC compiler are kept in sync. If a CL touches the\n    compiler.dart there should probably be in a change in compiler_new.dart\n    as well.\n    \"\"\"\n    OLD = \"pkg/dev_compiler/lib/src/kernel/compiler.dart\"\n    NEW = \"pkg/dev_compiler/lib/src/kernel/compiler_new.dart\"\n\n    files = [git_file.LocalPath() for git_file in input_api.AffectedTextFiles()]\n\n    if (OLD in files and NEW not in files):\n        return [\n            output_api.PresubmitPromptWarning(\n                \"Make sure to keep the original and temporary forked versions \"\n                \"of compiler.dart in sync.\\n\"\n                \"You may need to copy or adapt changes between these files:\\n\" +\n                \"\\n\".join([OLD, NEW]))\n        ]\n\n    return []\n\n\ndef _CheckDartApiWinCSync(input_api, output_api):\n    \"\"\"Ensure that dart_api_win.c is up-to-date.\"\"\"\n    GENERATOR = \"runtime/tools/generate_dart_api_win_c.dart\"\n    DART_API_H = \"runtime/include/dart_api.h\"\n    DART_NATIVe_API_H = \"runtime/include/dart_native_api.h\"\n\n    files = [git_file.LocalPath() for git_file in input_api.AffectedTextFiles()]\n\n    if (GENERATOR in files or DART_API_H in files or\n            DART_NATIVe_API_H in files):\n        # Run the generator with `--check-up-to-date` to see if the output is\n        # up-to-date.\n        args = [\n            \"tools/sdks/dart-sdk/bin/dart\",\n            GENERATOR,\n            \"--check-up-to-date\",\n        ]\n        try:\n            subprocess.run(args, check=True)\n        except subprocess.CalledProcessError as e:\n            return [\n                output_api.PresubmitError(\n                    f\"Make sure to re-run {GENERATOR} when it or its inputs \"\n                    \"change.\")\n            ]\n\n    return []\n\n\ndef _CommonChecks(input_api, output_api):\n    results = []\n    results.extend(_CheckValidHostsInDEPS(input_api, output_api))\n    results.extend(_CheckDartFormat(input_api, output_api))\n    results.extend(_CheckStatusFiles(input_api, output_api))\n    results.extend(_CheckLayering(input_api, output_api))\n    results.extend(_CheckClangTidy(input_api, output_api))\n    results.extend(_CheckClangFormat(input_api, output_api))\n    results.extend(_CheckTestMatrixValid(input_api, output_api))\n    results.extend(\n        input_api.canned_checks.CheckPatchFormatted(input_api, output_api))\n    results.extend(_CheckCopyrightYear(input_api, output_api))\n    results.extend(_CheckAnalyzerFiles(input_api, output_api))\n    results.extend(_CheckNoNewObservatoryServiceTests(input_api, output_api))\n    results.extend(_CheckDevCompilerSync(input_api, output_api))\n    results.extend(_CheckDartApiWinCSync(input_api, output_api))\n    return results\n\n\ndef CheckChangeOnCommit(input_api, output_api):\n    return _CommonChecks(input_api, output_api)\n\n\ndef CheckChangeOnUpload(input_api, output_api):\n    return _CommonChecks(input_api, output_api)\n"
        },
        {
          "name": "README.dart-sdk",
          "type": "blob",
          "size": 1.2412109375,
          "content": "The Dart SDK is a set of tools and libraries for the Dart programming language.\n\nYou can find information about Dart online at https://dart.dev/.\n\nHere's a brief guide to what's in here:\n\nbin/               Binaries/scripts to compile, run, and manage Dart apps.\n  dart             Command line Dart tool\n  dartaotruntime   Minimal Dart runtime for running AOT modules\n  resources/       Resource files for dartdoc and devtools\n  snapshots/       AppAOT and AppJIT snapshots of various tools\n  utils/           Tools used by Dart compilers\n\ninclude/           header files that define the Dart embedding API for use by\n                   - C/C++ applications that embed the Dart Virtual machine\n                   - native libraries loaded into a dart application using FFI\n                     (https://dart.dev/guides/libraries/c-interop)\n\nlib/               Libraries that are shipped with the Dart runtime. More\n                   information is available at https://api.dart.dev.\n\nLICENSE            Description of Dart SDK license\n\nREADME             This file\n\nrevision           The git commit ID of the SDK build\n                   (for example, 020b3efd3f0023c5db2097787f7cf778db837a8f).\n\nversion            The version number of the SDK (for example, 2.12.1).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.9248046875,
          "content": "# Dart\n\n## An approachable, portable, and productive language for high-quality apps on any platform\n\nDart is:\n\n  * **Approachable**:\n  Develop with a strongly typed programming language that is consistent,\n  concise, and offers modern language features like null safety and patterns.\n\n  * **Portable**:\n  Compile to ARM, x64, or RISC-V machine code for mobile, desktop, and backend.\n  Compile to JavaScript or WebAssembly for the web.\n\n  * **Productive**:\n  Make changes iteratively: use hot reload to see the result instantly in your running app.\n  Diagnose app issues using [DevTools](https://dart.dev/tools/dart-devtools).\n\nDart's flexible compiler technology lets you run Dart code in different ways,\ndepending on your target platform and goals:\n\n  * **Dart Native**: For programs targeting devices (mobile, desktop, server, and more),\n  Dart Native includes both a Dart VM with JIT (just-in-time) compilation and an\n  AOT (ahead-of-time) compiler for producing machine code.\n\n  * **Dart Web**: For programs targeting the web, Dart Web includes both a development time\n  compiler (dartdevc) and a production time compiler (dart2js).  \n\n![Dart platforms illustration](docs/assets/Dart-platforms.svg)\n\n## License & patents\n\nDart is free and open source.\n\nSee [LICENSE][license] and [PATENT_GRANT][patent_grant].\n\n## Using Dart\n\nVisit [dart.dev][website] to learn more about the\n[language][lang], [tools][tools], and to find\n[codelabs][codelabs].\n\nBrowse [pub.dev][pubsite] for more packages and libraries contributed\nby the community and the Dart team.\n\nOur API reference documentation is published at [api.dart.dev](https://api.dart.dev),\nbased on the stable release. (We also publish docs from our \n[beta](https://api.dart.dev/beta) and [dev](https://api.dart.dev/dev) channels,\nas well as from the [primary development branch](https://api.dart.dev/be)).\n\n## Building Dart\n\nIf you want to build Dart yourself, here is a guide to\n[getting the source, preparing your machine to build the SDK, and building][building].\n\nThere are more documents in our repo at [docs](https://github.com/dart-lang/sdk/tree/main/docs).\n\n## Contributing to Dart\n\nThe easiest way to contribute to Dart is to [file issues][dartbug].\n\nYou can also contribute patches, as described in [Contributing][contrib].\n\n## Roadmap\n\nFuture plans for Dart are included in the combined Dart and Flutter\n[roadmap][roadmap] on the Flutter wiki.\n\n[building]: https://github.com/dart-lang/sdk/blob/main/docs/Building.md\n[codelabs]: https://dart.dev/codelabs\n[contrib]: https://github.com/dart-lang/sdk/blob/main/CONTRIBUTING.md\n[dartbug]: http://dartbug.com\n[lang]: https://dart.dev/guides/language/language-tour\n[license]: https://github.com/dart-lang/sdk/blob/main/LICENSE\n[patent_grant]: https://github.com/dart-lang/sdk/blob/main/PATENT_GRANT\n[pubsite]: https://pub.dev\n[repo]: https://github.com/dart-lang/sdk\n[roadmap]: https://github.com/flutter/flutter/wiki/Roadmap\n[tools]: https://dart.dev/tools\n[website]: https://dart.dev\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.3232421875,
          "content": "## Reporting vulnerabilities\nTo report potential vulnerabilities, please see our security policy on\n[https://dart.dev/security](https://dart.dev/security).\n\n## Published security advisories\n\nFor advisories published for the Dart SDK, see\n[security advisories](https://github.com/dart-lang/sdk/security/advisories?state=published).\n"
        },
        {
          "name": "WATCHLISTS",
          "type": "blob",
          "size": 3.1708984375,
          "content": "# Copyright (c) 2013, the Dart project authors.  Please see the AUTHORS file\n# for details. All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\n# Watchlist Rules\n# Refer: http://dev.chromium.org/developers/contributing-code/watchlists\n\n{\n  'WATCHLIST_DEFINITIONS': {\n    '_fe_analyzer_shared': {\n      'filepath': '^pkg/_fe_analyzer_shared'\n    },\n    'analyzer': {\n      'filepath': (\n        '^pkg/analysis_server|'\n        '^pkg/analysis_server_client|'\n        '^pkg/analyzer|'\n        '^pkg/analyzer_cli|'\n        '^pkg/analyzer_plugin|'\n        '^pkg/analyzer_utilities|'\n        '^pkg/linter|'\n        '^pkg/meta'\n      )\n    },\n    'build': {\n      'filepath': (\n        '.*gyp$|'\n        '.*gypi$|'\n        '.*gn$|'\n        '.*gni$|'\n        '^tools/.*py$|'\n        '^build/|'\n        '^tools/buildtools/'\n      )\n    },\n    'experimental_features': {\n      'filepath': 'tools/experimental_features\\\\.yaml',\n    },\n    'front_end': {\n      'filepath': '^pkg/front_end',\n    },\n    'kernel': {\n      'filepath': '^pkg/kernel',\n    },\n    'dart2js': {\n      'filepath': (\n        '^pkg/compiler|'\n        '^sdk/lib/_internal/js_runtime|'\n        '^tests/web'\n      )\n    },\n    'dart2wasm': {\n      'filepath': (\n        '^pkg/dart2wasm|'\n        '^pkg/wasm_builder|'\n        '^sdk/lib/_internal/vm_shared|'\n        '^sdk/lib/_internal/wasm'\n      )\n    },\n    'dartdevc': {\n      'filepath': (\n        '^pkg/dev_compiler|'\n        '^sdk/lib/_internal/js_dev_runtime|'\n        '^tests/dartdevc'\n      )\n    },\n    'package_vm': {\n      'filepath': '^pkg/vm/',\n    },\n    'messages_review': {\n      'filepath': (\n        '^('\n        'pkg/front_end/messages\\\\.yaml|'\n        'pkg/compiler/lib/src/diagnostics/messages\\\\.dart|'\n        'pkg/analyzer/lib/src/analysis_options/error/option_codes\\\\.dart|'\n        'pkg/analyzer/lib/src/dart/error/hint_codes\\\\.dart|'\n        'pkg/analyzer/lib/src/dart/error/lint_codes\\\\.dart|'\n        'pkg/analyzer/lib/src/dart/error/todo_codes\\\\.dart|'\n        'pkg/analyzer/lib/src/html/error/html_codes\\\\.dart'\n        ')$'\n      )\n    },\n    'observatory': {\n      'filepath': (\n        '^runtime/bin/vmservice/|'\n        '^runtime/bin/vmservice*|'\n        '^runtime/observatory/|'\n        '^runtime/vm/service/|'\n        '^runtime/vm/service*'\n      )\n    },\n    'runtime': {\n      'filepath': '^runtime/',\n    },\n    'vm_compiler': {\n      'filepath': '^runtime/(vm|docs)/compiler/',\n    },\n  },\n\n  'WATCHLISTS': {\n    '_fe_analyzer_shared': [ 'paulberry@google.com' ],\n    'analyzer': [ 'dart-analysis-team-log@google.com' ],\n    'dart2js': [ 'dart2js-team+reviews@google.com' ],\n    'dart2wasm': [ 'dart2wasm-team+reviews@google.com' ],\n    'dartdevc': [ 'dart-dc-team+reviews@google.com' ],\n    'experimental_features': [ 'scheglov@google.com' ],\n    'front_end': [ 'dart-fe-team+reviews@google.com' ],\n    'kernel': [ 'jensj@google.com', 'alexmarkov@google.com' ],\n    'messages_review': [ 'dart-uxr+reviews@google.com' ],\n    'observatory': [ 'bkonyi@google.com' ],\n    'package_vm': [ 'alexmarkov@google.com' ],\n    'runtime': [ 'vm-dev@dartlang.org' ],\n    'vm_compiler': [ 'dart-vm-compiler-team+reviews@google.com' ],\n  },\n}\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "codereview.settings",
          "type": "blob",
          "size": 0.2294921875,
          "content": "# This file is used by gcl to get repository specific information.\nGERRIT_HOST: True\nCODE_REVIEW_SERVER: https://dart-review.googlesource.com\nVIEW_VC: https://dart.googlesource.com/sdk/+\nCC_LIST: reviews@dartlang.org\nUSE_PYTHON3: True\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk.code-workspace",
          "type": "blob",
          "size": 2.431640625,
          "content": "{\n  // This is a checked-in VSCode workspace configuration file that can be used\n  // instead of directly opening $SDK_DIR in VSCode.\n  //\n  // It's an opt-in workspace configuration that contains settings for:\n  //  - vscode itself\n  //  - Dart analyzer\n  //  - etc.\n  //\n  // In terms of precedence, VSCode uses the following order in which settings\n  // are applied (merged together).\n  //\n  //  0) default settings\n  //  1) user's settings\n  //  2) remote machine settings\n  //  3) workspace settings  (this file)\n  //  4) workspace folder settings\n  //\n  //\n  // For details, see:\n  // https://code.visualstudio.com/docs/getstarted/settings#_settings-precedence\n  //\n  ////////\n  // VSCode Workspace Contents\n  //\n  // These are the workspace folders, and general VSCode workspace\n  // configuration itself.\n  //\n  // See https://code.visualstudio.com/docs/editor/workspaces for more\n  // information on this section of the file.\n  //\n  ////////\n  // For more inspiration on what else we can do with this file, see:\n  // https://fuchsia.googlesource.com/fuchsia/+/main/fuchsia.code-workspace\n  //\n  \"folders\": [\n    {\n      \"path\": \".\"\n    }\n  ],\n  \"extensions\": {\n    \"recommendations\": [\n      // Official Dart support, provides analyzer integration.\n      \"Dart-Code.dart-code\",\n    ]\n  },\n  \"settings\": {\n    \"dart.analysisExcludedFolders\": [\n      // These \"tests\" folders include invalid Dart code which\n      // will show as analyzer warnings/errors we don't intend to fix.\n      \"tests\",\n      \"runtime/tests\",\n      \"runtime/observatory/tests\",\n\n      // We don't control the third_party code, so don't analyze it.\n      // It includes old Dart examples (e.g. protobuf) or README.dart\n      // files which don't actually contain dart code and thus don't\n      // analyze cleanly.\n      \"third_party\",\n      \"runtime/third_party\",\n\n      // This package depends on a package that will not be brought in as a\n      // dart-sdk dep. https://github.com/dart-lang/sdk/issues/50061\n      \"runtime/tools/heapsnapshot\",\n\n      // We probably can include 'lib', but it currently shows too many errors.\n      // We would need to ignore import_internal_library, and other warnings\n      // on a per-file basis, since the analyzer is designed to work with\n      // user code not sdk code.\n      \"sdk/lib\",\n\n      // I would have expected the analyzer to automatically exclude these\n      // since it's in .gitignore, but it doesn't seem to.\n      \"xcodebuild\",\n      \"out\",\n    ],\n  },\n}\n"
        },
        {
          "name": "sdk",
          "type": "tree",
          "content": null
        },
        {
          "name": "sdk_args.gni",
          "type": "blob",
          "size": 2.6201171875,
          "content": "# Copyright (c) 2019, the Dart project authors.  Please see the AUTHORS file\n# for details. All rights reserved. Use of this source code is governed by a\n# BSD-style license that can be found in the LICENSE file.\n\n_dart_root = get_path_info(\".\", \"abspath\")\n\ndeclare_args() {\n  # Absolute path to the .git folder.\n  #\n  # This is used in rules that need to refer to `.git/logs/HEAD` to include\n  # a hash in the version string. By default the folder is `.git`, but we define\n  # it as an argument so it can be overridden by users of `git-worktree` (See\n  # Issue #33619).\n  #\n  # When using git-worktree, you can add\n  #\n  #    default_git_folder = \"/path/to/main/git/repo/.git/worktrees/name/\"\n  #\n  # to out/ReleaseX64/args.gn. The path above can be extracted from the `.git`\n  # file under the git worktree folder.\n  # The script run here should take care of everything automatically though.\n  default_git_folder = \"\"\n\n  # Whether to enable the SDK hash check that will prevent loading a kernel\n  # into a VM which was built with a different SDK.\n  verify_sdk_hash = true\n\n  # When verify_sdk_hash is true, this string is used as the verification hash\n  # instead of calculating one from the contents of the tree using the\n  # make_version.py script.\n  dart_sdk_verification_hash = \"\"\n\n  # The location in the build output directory of the built Dart SDK.\n  dart_sdk_output = \"dart-sdk\"\n\n  # When set to `true` will cause compile_platform action to use a precompiled\n  # compile_platform.dart script instead of running it from source. This\n  # can significantly improve iteration time when iteration on changes in\n  # core libraries.\n  precompile_tools = false\n}\n\nif (default_git_folder == \"\") {\n  default_git_folder = exec_script(\"$_dart_root/tools/get_dot_git_folder.py\",\n                                   [\n                                     rebase_path(\"$_dart_root/.git\"),\n                                     \"$_dart_root/.git\",\n                                   ],\n                                   \"trim string\")\n}\n\n# The SDK hash to build into VM and kernels.\n# The value 0000000000 signifies no hash is set, which will disable the check.\nif (verify_sdk_hash) {\n  sdk_hash = dart_sdk_verification_hash\n  if (sdk_hash == \"\") {\n    sdk_hash = exec_script(\"$_dart_root/tools/make_version.py\",\n                           [ \"--format={{GIT_HASH}}\" ],\n                           \"trim string\",\n                           [\n                             \"$_dart_root/tools/VERSION\",\n                             \"$_dart_root/tools/utils.py\",\n                             \"$default_git_folder/logs/HEAD\",\n                           ])\n  }\n} else {\n  sdk_hash = \"0000000000\"\n}\n"
        },
        {
          "name": "sdk_packages.yaml",
          "type": "blob",
          "size": 0.1923828125,
          "content": "# Describes the SDK vendored packages shipped with the Dart SDK.\nversion: 1\nsdk: dart\n# Note that paths are relative to the root of the built SDK.\npackages:\n  - name: _macros\n    path: pkg/_macros\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}