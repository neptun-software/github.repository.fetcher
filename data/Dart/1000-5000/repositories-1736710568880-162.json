{
  "metadata": {
    "timestamp": 1736710568880,
    "page": 162,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Milad-Akarie/auto_route_library",
      "stars": 1618,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5859375,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n.dart_tool/\n.vscode/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.packages\n.pub-cache/\n.pub/\n/build/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\nauto_route/pubspec.lock\nauto_route/example/pubspec.lock\nauto_route_generator/pubspec.lock\npubspec_overrides.yaml"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.044921875,
          "content": "# Change Log\n\nAll notable changes to this project will be documented in this file.\nSee [Conventional Commits](https://conventionalcommits.org) for commit guidelines.\n\n## 2024-08-12\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v9.2.1`](#auto_route---v921)\n - [`auto_route_generator` - `v9.0.1`](#auto_route_generator---v901)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v9.0.1`\n\n---\n\n#### `auto_route` - `v9.2.1`\n\n - **FIX**: revert web package back to version ^0.5.1 because it's pinned in a lot of other packages.\n\n\n## 2024-08-03\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v9.2.0`](#auto_route---v920)\n - [`auto_route_generator` - `v9.0.1`](#auto_route_generator---v901)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v9.0.1`\n\n---\n\n#### `auto_route` - `v9.2.0`\n\n - **FIX**: revert web package back to version ^0.5.1 because it's pinned in a lot of other packages.\n - **FIX**: revert web package back to version ^0.5.1 because it's pinned in a lot of other packages.\n - **FEAT**: Add query params options to redirectTo in RedirectRoute #1721.\n - **FEAT**: Add query params options to redirectTo in RedirectRoute #1721.\n\n\n## 2024-07-31\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v9.1.0`](#auto_route---v910)\n - [`auto_route_generator` - `v9.0.1`](#auto_route_generator---v901)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v9.0.1`\n\n---\n\n#### `auto_route` - `v9.1.0`\n\n - **FEAT**: Add query params options to redirectTo in RedirectRoute #1721.\n\n\n## 2024-07-31\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v9.0.1`](#auto_route---v901)\n - [`auto_route_generator` - `v9.0.1`](#auto_route_generator---v901)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v9.0.1`\n\n---\n\n#### `auto_route` - `v9.0.1`\n\n - **FIX**: make EmptyShellRoute() a const.\n\n\n## 2024-07-16\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.3.0`](#auto_route---v830)\n - [`auto_route_generator` - `v8.1.0`](#auto_route_generator---v810)\n\n---\n\n#### `auto_route` - `v8.3.0`\n\n - **FEAT**: add url#fragment support.\n\n#### `auto_route_generator` - `v8.1.0`\n\n - **FEAT**: add url#fragment support.\n\n\n## 2024-06-13\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.2.0`](#auto_route---v820)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.2.0`\n\n - **FEAT**: migrate conditional import to js_interop.\n - **FEAT**: update to web library.\n\n\n## 2024-06-13\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.1.4`](#auto_route---v814)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.1.4`\n\n - **FIX**: fix an error when popping a nested route after flutter 3.22.0 #1973.\n\n\n## 2024-04-26\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.1.3`](#auto_route---v813)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.1.3`\n\n - **FIX**: Fixed back gesture when nested navigator only has multi nested entries.\n - **FIX**: Can not swipe back on iOS when using nested navigation #1932.\n\n\n## 2024-04-22\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.1.1`](#auto_route---v811)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.1.1`\n\n - **FIX**: Can not swipe back on iOS when using nested navigation #1932.\n\n\n## 2024-03-29\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.0.2`](#auto_route---v802)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.0.2`\n\n - **FIX**: only disable parent back gesture if the active child can pop.\n\n\n## 2024-03-27\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v8.0.1`](#auto_route---v801)\n - [`auto_route_generator` - `v8.0.1`](#auto_route_generator---v801)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v8.0.1`\n\n---\n\n#### `auto_route` - `v8.0.1`\n\n - **FIX**: back-gesture does not respect sub-routes.\n\n\n## 2024-03-23\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.10.0`](#auto_route---v7100)\n - [`auto_route_generator` - `v7.3.3`](#auto_route_generator---v733)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.3.3`\n\n---\n\n#### `auto_route` - `v7.10.0`\n\n - **FEAT**: AutoTabsRouter will now use the declared routes if AutoTabsRouter.routes is not provided.\n\n\n## 2024-03-19\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.9.1`](#auto_route---v791)\n - [`auto_route_generator` - `v7.3.3`](#auto_route_generator---v733)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.3.3`\n\n---\n\n#### `auto_route` - `v7.9.1`\n\n - **FIX**: incorrect top route information when deep-linking into an uninitialized tab route.\n\n\n## 2024-03-12\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.9.0`](#auto_route---v790)\n - [`auto_route_generator` - `v7.3.3`](#auto_route_generator---v733)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.3.3`\n\n---\n\n#### `auto_route` - `v7.9.0`\n\n - **REFACTOR**(example): remove unnecessary pageTransitionsTheme parameter.\n - **FIX**: unable to get the label for back button(previous route title) and current route title on CupertinoNavigationBar and CupertinoSliverNavigationBar #1795.\n - **FIX**: CupertinoNavigationBar and CupertinoSliverNavigationBar unable to get route title and previous route title.\n - **FIX**: docstring typo(RouteData.mete -> RouteData.meta).\n - **FIX**: keep TabsRouter.homeIndex in sync with AutoTabsRouter.homeIndex.\n - **FEAT**: add back mixin to AutoRouteAware.\n\n\n## 2023-10-05\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.8.4`](#auto_route---v784)\n - [`auto_route_generator` - `v7.3.2`](#auto_route_generator---v732)\n\n---\n\n#### `auto_route` - `v7.8.4`\n\n - **FIX**: ensure dynamic tab updates are handled in AutoTabsRouter.tabBar.\n - **FIX**: issue related to parsing deep-links after flutter 3.13.0.\n\n#### `auto_route_generator` - `v7.3.2`\n\n - **DOCS**: Add public Api docs to auto_route_generator.\n\n\n## 2023-08-23\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.8.2`](#auto_route---v782)\n - [`auto_route_generator` - `v7.3.2`](#auto_route_generator---v732)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.3.2`\n\n---\n\n#### `auto_route` - `v7.8.2`\n\n - **DOCS**: Fix typos and a broken links.\n\n\n## 2023-08-22\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.8.1`](#auto_route---v781)\n - [`auto_route_generator` - `v7.3.2`](#auto_route_generator---v732)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.3.2`\n\n---\n\n#### `auto_route` - `v7.8.1`\n\n - **FIX**: crash if pendingChildren are passed in as unmodifiable list.\n - **DOCS**: Fix typos and a broken links.\n - **DOCS**: Add public Api docs to auto_route_generator.\n\n\n## 2023-08-12\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route_generator` - `v7.3.1`](#auto_route_generator---v731)\n\n---\n\n#### `auto_route_generator` - `v7.3.1`\n\n - **DOCS**: Add public Api docs to auto_route_generator.\n\n\n## 2023-08-03\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.8.0`](#auto_route---v780)\n - [`auto_route_generator` - `v7.3.0`](#auto_route_generator---v730)\n\n---\n\n#### `auto_route` - `v7.8.0`\n\n - **FEAT**: add PlatformDeepLink.initial flag to tell whether we're coming from setInitialRoutePath or setNewRoutePath.\n - **FEAT**: add option to pass custom ignore_for_file rules to the generated file.\n - **FEAT**: support the new allowSnapshotting flag.\n\n#### `auto_route_generator` - `v7.3.0`\n\n - **REFACTOR**: generated routes are not alphabetically sorted.\n - **FEAT**: add option to pass custom ignore_for_file rules to the generated file.\n - **FEAT**: Add basic support to dart records.\n\n\n## 2023-07-18\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.7.1`](#auto_route---v771)\n - [`auto_route_generator` - `v7.2.1`](#auto_route_generator---v721)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.2.1`\n\n---\n\n#### `auto_route` - `v7.7.1`\n\n - **FIX**: tab routes should be matched by key not name.\n\n\n## 2023-07-05\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.7.0`](#auto_route---v770)\n - [`auto_route_generator` - `v7.2.0`](#auto_route_generator---v720)\n\n---\n\n#### `auto_route` - `v7.7.0`\n\n - **FEAT**: Add basic support to dart records.\n\n#### `auto_route_generator` - `v7.2.0`\n\n - **FEAT**: Add basic support to dart records.\n\n\n## 2023-07-03\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route_generator` - `v7.2.0`](#auto_route_generator---v720)\n\n---\n\n#### `auto_route_generator` - `v7.2.0`\n\n - **FEAT**: add 'scoped' argument to to StackRouter.popUntil, if true the predicate will visit all StackRouters in hierarchy.\n - **DOCS**: update CHANGELOG.md.\n\n\n## 2023-07-01\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.6.0`](#auto_route---v760)\n - [`auto_route_generator` - `v7.1.2`](#auto_route_generator---v712)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.1.2`\n\n---\n\n#### `auto_route` - `v7.6.0`\n\n - **FEAT**: add 'scoped' argument to to StackRouter.removeUntil, if true the predicate will visit all StackRouters in hierarchy.\n - **FEAT**: add 'scoped' argument to to StackRouter.popUntil, if true the predicate will visit all StackRouters in hierarchy.\n\n\n## 2023-06-24\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.5.0`](#auto_route---v750)\n - [`auto_route_generator` - `v7.1.2`](#auto_route_generator---v712)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.1.2`\n\n---\n\n#### `auto_route` - `v7.5.0`\n\n - **FIX**: Uri percent-encoded characters encoded twice #1620.\n - **FIX**: delegate missing arguments in auto_route_guard redirect.\n - **FEAT**(auto_route): add `AutoPageRouteBuilder.opaque` argument.\n\n\n## 2023-06-01\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.3.3`](#auto_route---v733)\n - [`auto_route_generator` - `v7.1.2`](#auto_route_generator---v712)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.1.2`\n\n---\n\n#### `auto_route` - `v7.3.3`\n\n - **FIX**: StackRouter.replaceAll does not work with nested tab-routes.\n\n\n## 2023-05-29\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.3.2`](#auto_route---v732)\n - [`auto_route_generator` - `v7.1.2`](#auto_route_generator---v712)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.1.2`\n\n---\n\n#### `auto_route` - `v7.3.2`\n\n - **FIX**: Remove guard from ActiveGuardObserver when resolved with false.\n\n\n## 2023-05-28\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.3.1`](#auto_route---v731)\n - [`auto_route_generator` - `v7.1.2`](#auto_route_generator---v712)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v7.1.2`\n\n---\n\n#### `auto_route` - `v7.3.1`\n\n - **FIX**: DeferredWidget's default loader not working,.\n\n\n## 2023-05-21\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route_generator` - `v7.1.1`](#auto_route_generator---v711)\n\n---\n\n#### `auto_route_generator` - `v7.1.1`\n\n - **REFACTOR**: change module extension from .module.dart to .gm.dart.\n - **DOCS**: update CHANGELOG.md.\n\n\n## 2023-05-20\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.2.0`](#auto_route---v720)\n - [`auto_route_generator` - `v7.1.0`](#auto_route_generator---v710)\n\n---\n\n#### `auto_route` - `v7.2.0`\n\n - **REVERT**: \"feat: add more flexible multi package support\".\n - **REFACTOR**: resolve some flutter 3.10 deprecations.\n - **FEAT**(auto_route): add `AutoRouterConfig.module` annotation.\n - **FEAT**(auto_route): add `AutoRouterModule`.\n - **FEAT**: add more flexible multi package support.\n - **DOCS**(auto_route): fix typo.\n\n#### `auto_route_generator` - `v7.1.0`\n\n - **REVERT**: \"feat: add more flexible multi package support\".\n - **REVERT**: \"cleanup\".\n - **FEAT**(auto_route_generator): expose the new `autoRouterModuleBuilder` to the package surface.\n - **FEAT**(auto_route_generator): add `AutoRouterModuleBuilder`.\n - **FEAT**(auto_route_generator): update code builder (add module support + rename).\n - **FEAT**(auto_route_generator): update `RouterConfig` + `RouterConfigResolver` to match `AutoRouterConfig.module`.\n - **FEAT**: add more flexible multi package support.\n\n\n## 2023-05-06\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route_generator` - `v7.0.0`](#auto_route_generator---v700)\n\n---\n\n#### `auto_route_generator` - `v7.0.0`\n\n - **FEAT**: add support to process files in micro-packages.\n - **DOCS**: add all public api docs.\n\n\n## 2023-05-06\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v7.1.0`](#auto_route---v710)\n - [`auto_route_generator` - `v6.2.1`](#auto_route_generator---v621)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v6.2.1`\n\n---\n\n#### `auto_route` - `v7.1.0`\n\n - **FEAT**: add support to process files in micro-packages.\n\n\n## 2023-05-06\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - [`auto_route` - `v7.0.0`](#auto_route---v700)\n\nPackages with other changes:\n\n - [`auto_route_generator` - `v6.2.1`](#auto_route_generator---v621)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v6.2.1`\n\n---\n\n#### `auto_route` - `v7.0.0`\n\n - **FIX**: deepLinkBuilder is not called on newRoutePath.\n - **BREAKING** **CHANGE**: DefaultRouteParser.includePrefixMatches's value is now set to '!kIsWeb' instead of 'false'.\n\n\n## 2023-04-27\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v6.4.0`](#auto_route---v640)\n - [`auto_route_generator` - `v6.2.1`](#auto_route_generator---v621)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v6.2.1`\n\n---\n\n#### `auto_route` - `v6.4.0`\n\n - **REFACTOR**: deprecated initialDeepLink and initialRouts.\n\n\n## 2023-04-18\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v6.3.0`](#auto_route---v630)\n - [`auto_route_generator` - `v6.2.1`](#auto_route_generator---v621)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v6.2.1`\n\n---\n\n#### `auto_route` - `v6.3.0`\n\n - **REFACTOR**: make AutoRouterState and AutoTabsRouterState public.\n - **FEAT**: Bring AutoRoute.initial back.\n\n\n## 2023-04-18\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v6.2.1`](#auto_route---v621)\n - [`auto_route_generator` - `v6.2.1`](#auto_route_generator---v621)\n\nPackages with dependency updates only:\n\n> Packages listed below depend on other packages in this workspace that have had changes. Their versions have been incremented to bump the minimum dependency versions of the packages they depend upon in this project.\n\n - `auto_route_generator` - `v6.2.1`\n\n---\n\n#### `auto_route` - `v6.2.1`\n\n - **REFACTOR**: make AutoRouterState and AutoTabsRouterState public.\n - **DOCS**: add all public api docs.\n\n\n## 2023-04-15\n\n### Changes\n\n---\n\nPackages with breaking changes:\n\n - There are no breaking changes in this release.\n\nPackages with other changes:\n\n - [`auto_route` - `v6.2.0`](#auto_route---v620)\n - [`auto_route_generator` - `v6.2.0`](#auto_route_generator---v620)\n\n---\n\n#### `auto_route` - `v6.2.0`\n\n - **FIX**: need to always depend on RouterScope.\n - **FIX**: url state decode issue.\n - **FEAT**: Add a getter to expose child widget from AutoRoutePage.\n - **FEAT**: deferred loading for web to enable code splitting for routes.\n\n#### `auto_route_generator` - `v6.2.0`\n\n - **FIX**: include nested pages imports.\n - **FIX**(generator): Bool opt type as num.\n - **FEAT**: deferred loading for web to enable code splitting for routes.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019 Milad Akarie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 49.318359375,
          "content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/art/auto_route_logo.svg\" height=\"170\" alt=\"auto_route_logo\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://img.shields.io/badge/License-MIT-green\">\n    <img src=\"https://img.shields.io/badge/License-MIT-green\" alt=\"MIT License\">\n  </a>\n  <a href=\"https://github.com/Milad-Akarie/auto_route_library/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/Milad-Akarie/auto_route_library?style=flat&logo=github&colorB=green&label=stars\" alt=\"stars\">\n  </a>\n  <a href=\"https://pub.dev/packages/auto_route\">\n    <img src=\"https://img.shields.io/pub/v/auto_route.svg?label=pub&color=orange\" alt=\"pub version\">\n  </a>\n  <a href=\"https://discord.gg/x3SBU4WRRd\">\n    <img src=\"https://img.shields.io/discord/821043906703523850.svg?color=7289da&label=Discord&logo=discord&style=flat-square\" alt=\"Discord Badge\">\n  </a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.buymeacoffee.com/miladakarie\" target=\"_blank\">\n    <img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" height=\"30px\" width= \"108px\">\n  </a>\n</p>\n\n---\n\n- [Introduction](#introduction)\n  - [Installation](#installation)\n  - [Setup and Usage](#setup-and-usage)\n- [Generated routes](#generated-routes)\n- [Navigation](#navigating-between-screens)\n  - [Navigating Between Screens](#navigating-between-screens)\n  - [Passing Arguments](#passing-arguments)\n  - [Returning Results](#returning-results)\n  - [Nested navigation](#nested-navigation)\n  - [Tab Navigation](#tab-navigation)\n    - [Using PageView](#using-pageview)\n    - [Using TabBar](#using-tabbar)\n  - [Finding The Right Router](#finding-the-right-router)\n  - [Navigating Without Context](#navigating-without-context)\n- [Deep Linking](#deep-linking)\n- [Declarative Navigation](#declarative-navigation)\n- [Working with Paths](#working-with-paths)\n- [Route guards](#route-guards)\n- [Wrapping routes](#wrapping-routes)\n- [Navigation Observers](#navigation-observers)\n- [Customization](#customizations)\n  - [Custom Route Transitions](#custom-route-transitions)\n  - [Custom Route Builder](#custom-route-builder)\n- [Others](#others)\n  - [Including Micro/External Packages](#including-microexternal-packages)\n  - [Configuring builders](#configuring-builders)\n    - [Optimizing Generation Time](#optimizing-generation-time)\n    - [Enabling Cached Builds (Experimental)](#enabling-cached-builds)\n  - [AutoLeadingButton-BackButton](#autoleadingbutton-backbutton)\n  - [ActiveGuardObserver](#activeguardobserver)\n- [Examples](#examples)\n\n\n## Migration guides\n- [Migrating to v9](https://github.com/Milad-Akarie/auto_route_library/blob/master/migrations/migrating_to_v9.md)\n- [Migrating to v6](https://github.com/Milad-Akarie/auto_route_library/blob/master/migrations/migrating_to_v6.md)\n\n## Old documentation\n- [Pre v9 documentation](https://github.com/Milad-Akarie/auto_route_library/blob/master/old/pre_v9_README.md)\n- [Pre v6 documentation](https://github.com/Milad-Akarie/auto_route_library/blob/master/old/pre_v6_README.md)\n\n## Introduction\n\n#### What is AutoRoute?\n\nIt’s a Flutter navigation package, it allows for strongly-typed arguments passing, effortless deep-linking and it uses code generation to simplify routes setup. With that being said, it requires a minimal amount of code to generate everything needed for navigation inside of your App.\n\n#### Why AutoRoute?\n\nIf your App requires deep-linking or guarded routes or just a clean routing setup, you'll need to use named/generated routes and you’ll end up writing a lot of boilerplate code for mediator argument classes, checking for required arguments, extracting arguments and a bunch of other stuff. **AutoRoute** does all that for you and much more.\n\n## Installation\n\n ```yaml\ndependencies:\n  auto_route: [latest-version]\n\ndev_dependencies:\n  auto_route_generator: [latest-version]\n  build_runner:\n```\n\n## Setup And Usage\n\n1. Create a router class and annotate it with `@AutoRouterConfig` then extend \"RootStackRouter\" from The auto_route package\n2. Override the routes getter and start adding your routes.\n\n ```dart\n@AutoRouterConfig()\nclass AppRouter extends RootStackRouter {\n\n  @override\n  List<AutoRoute> get routes => [\n    /// routes go here\n  ];\n}\n```\n\n### Using part builder\n\nTo generate a part-of file simply add a `part` directive to your `AppRouter`.\n\n**Note:** The `deferredLoading` functionality does not work with part-file setup.\n\n### Generating Routable pages\n\nRoutable pages are just simple everyday widgets annotated with `@RoutePage()` which allows them to be constructed by the router.\n\n```dart\n@RoutePage()\nclass HomeScreen extends StatefulWidget {}\n```\n\n#### Now simply run the generator\n\nUse the [watch] flag to watch the files' system for edits and rebuild as necessary.\n\n```terminal\ndart run build_runner watch\n```\n\nIf you want the generator to run one time and exit, use\n\n```terminal\ndart run build_runner build\n```\n\n#### Add the generated route to your routes list\n\n```dart\n@AutoRouterConfig(replaceInRouteName: 'Screen|Page,Route')\nclass AppRouter extends RootStackRouter {\n\n  @override\n  RouteType get defaultRouteType => RouteType.material(); //.cupertino, .adaptive ..etc\n  \n  @override\n  List<AutoRoute> get routes => [\n    // HomeScreen is generated as HomeRoute because\n    // of the replaceInRouteName property\n    AutoRoute(page: HomeRoute.page),\n  ];\n\n  @override\n  List<AutoRouteGuard> get guards => [\n    // optionally add root guards here\n  ];\n}\n```\n\n#### Finalize the setup\n\nAfter you run the generator, your router class will be generated. Then simply hook it up with your MaterialApp.\n\n```dart\n// assuming this is the root widget of your App\nclass App extends StatelessWidget {\n  // make sure you don't initiate your router\n  // inside of the build function.\n  final _appRouter = AppRouter();\n\n  @override\n  Widget build(BuildContext context){\n    return MaterialApp.router(\n      routerConfig: _appRouter.config(),\n    );\n  }\n}\n```\n\n## Generated Routes\n\nA `PageRouteInfo` object will be generated for every declared **AutoRoute**. These objects hold strongly-typed page arguments which are extracted from the page's default constructor. Think of them as string path segments on steroids.\n\n```dart\nclass BookListRoute extends PageRouteInfo {\n  const BookListRoute({\n    List<PagerouteInfo>? children,\n  }) : super(name, initialChildren: children);\n\n  static const String name = 'BookListRoute';\n  static const PageInfo page = PageInfo(name,builder: (...));\n}\n```\n\n## Navigating Between Screens\n\n`AutoRouter` offers the same known push, pop and friends methods to manipulate the pages stack using both the generated `PageRouteInfo` objects and paths.\n\n```dart\n// get the scoped router by calling\nAutoRouter.of(context);\n// or using the extension\ncontext.router;\n// adds a new entry to the pages stack\nrouter.push(const BooksListRoute());\n// or by using paths\nrouter.pushNamed('/books');\n// removes last entry in stack and pushes provided route\n// if last entry == provided route page will just be updated\nrouter.replace(const BooksListRoute());\n// or by using paths\nrouter.replaceNamed('/books');\n// pops until provided route, if it already exists in stack\n// else adds it to the stack (good for web Apps).\nrouter.navigate(const BooksListRoute());\n// or by using paths\nrouter.navigateNamed('/books');\n// on Web it calls window.history.back();\n// on Native it navigates you back\n// to the previous location\nrouter.back();\n// adds a list of routes to the pages stack at once\nrouter.pushAll([\n  BooksListRoute(),\n  BookDetailsRoute(id: 1),\n]);\n// This is like providing a completely new stack as it rebuilds the stack\n// with the list of passed routes\n// entries might just update if already exist\nrouter.replaceAll([\n  LoginRoute(),\n]);\n// pops the last page unless blocked or stack has only 1 entry\ncontext.router.maybePop();\n// pops the most top page of the most top router unless blocked\n// or stack has only 1 entry\ncontext.router.maybePopTop();\n// keeps popping routes until predicate is satisfied\ncontext.router.popUntil((route) => route.settings.name == 'HomeRoute');\n// a simplified version of the above line\ncontext.router.popUntilRouteWithName('HomeRoute');\n// keeps popping routes until route with provided path is found\ncontext.router.popUntilRouteWithPath('/some-path');\n// pops all routes down to the root\ncontext.router.popUntilRoot();\n// removes the top most page in stack even if it's the last\n// remove != pop, it doesn't respect WillPopScopes it just\n// removes the entry.\ncontext.router.removeLast();\n// removes any route in stack that satisfies the predicate\n// this works exactly like removing items from a regular List\n// <PageRouteInfo>[...].removeWhere((r)=>)\ncontext.router.removeWhere((route) => );\n// you can also use the common helper methods from context extension to navigate\ncontext.pushRoute(const BooksListRoute());\ncontext.replaceRoute(const BooksListRoute());\ncontext.navigateTo(const BooksListRoute());\ncontext.navigateNamedTo('/books');\ncontext.back();\ncontext.maybePop();\n```\n\n## Passing Arguments\n\nThat's the fun part! **AutoRoute** automatically detects and handles your page arguments for you, the generated route object will deliver all the arguments your page needs including path/query params.\n\ne.g. The following page widget will take an argument of type `Book`.\n\n```dart\n@RoutePage()\nclass BookDetailsPage extends StatelessWidget {\n  const BookDetailsPage({required this.book});\n\n  final Book book;\n  ...\n```\n\n**Note:** Default values are respected. Required fields are also respected and handled properly.\n\nThe generated `BookDetailsRoute` will deliver the same arguments to its corresponding page.\n\n```dart\nrouter.push(BookDetailsRoute(book: book));\n```\n\n**Note:** All arguments are generated as named parameters regardless of their original type.\n\n## Returning Results\n\nYou can return results by either using the pop completer or by passing a callback function as an argument the same way you'd pass an object.\n\n#### 1. Using the `pop` completer\n\n```dart\nvar result = await router.push(LoginRoute());\n```\n\nthen inside of your `LoginPage`, pop with results\n\n```dart\nrouter.maybePop(true);\n```\nSpecifying the type of the result is optional, but it's recommended to avoid runtime errors.\n\n```dart\nvar result = await router.push<bool>(LoginRoute());\n```\n\nand of course we pop with the same type\n\n```dart\nrouter.maybePop<bool>(true);\n```\n\n#### 2. Passing a callback function as an argument.\nWe only have to add a callback function as a parameter to our page constructor like follows:\n\n```dart\n@RoutePage()\nclass BookDetailsPage extends StatelessWidget {\n  const BookDetailsRoute({this.book, required this.onRateBook});\n\n  final Book book;\n  final void Function(int) onRateBook;\n  ...\n```\n\nThe generated `BookDetailsRoute` will deliver the same arguments to its corresponding page.\n\n```dart\ncontext.pushRoute(\n  BookDetailsRoute(\n    book: book,\n    onRateBook: (rating) {\n      // handle result\n    },\n  ),\n);\n```\n\nIf you're finishing with results, make sure you call the callback function as you pop the page\n\n```dart\nonRateBook(RESULT);\ncontext.maybePop();\n```\n\n**Note:** Default values are respected. Required fields are also respected and handled properly.\n\n## Nested Navigation\n\nNested navigation means building an inner router inside of a page of another router, for example in the below diagram users page is built inside of dashboard page.\n\n<p align=\"center\">\n  <img alt=\"nested-router-demo\"  src=\"https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/art/nested_router_demo.png?raw=true\" height=\"370\">\n</p>\n\nDefining nested routes is as easy as populating the children field of the parent route. In the following example  `UsersPage`, `PostsPage` and `SettingsPage` are nested children of `DashboardPage`.\n\n```dart\n@AutoRouterConfig(replaceInRouteName: 'Page,Route')\nclass AppRouter extends RootStackRouter {\n\n@override\nList<AutoRoute> get routes => [\n    AutoRoute(\n      path: '/dashboard',\n      page: DashboardRoute.page,\n      children: [\n        AutoRoute(path: 'users', page: UsersRoute.page),\n        AutoRoute(path: 'posts', page: PostsRoute.page),\n        AutoRoute(path: 'settings', page: SettingsRoute.page),\n      ],\n    ),\n    AutoRoute(path: '/login', page: LoginRoute.page),\n  ];\n}\n```\n\nTo render/build nested routes we need an `AutoRouter` widget that works as an outlet or a nested router-view inside of our dashboard page.\n\n```dart\nclass DashboardPage extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Column(\n          children: [\n            NavLink(label: 'Users', destination: const UsersRoute()),\n            NavLink(label: 'Posts', destination: const PostsRoute()),\n            NavLink(label: 'Settings', destination: const SettingsRoute()),\n          ],\n        ),\n        Expanded(\n          // nested routes will be rendered here\n          child: AutoRouter(), // this is important\n        ),\n      ],\n    );\n  }\n}\n```\n**Note** NavLink is just a button that calls router.push(destination). Now if we navigate to `/dashboard/users`, we will be taken to the `DashboardPage` and the `UsersPage` will be shown inside of it.\n\nWhat if want to show one of the child pages at `/dashboard`? We can simply do that by giving the child routes an empty path `''` to make initial or by setting initial to true.\n\n```dart\nAutoRoute(\n  path: '/dashboard',\n  page: DashboardRoute.page,\n  children: [\n    AutoRoute(path: '', page: UsersRoute.page),\n    AutoRoute(path: 'posts', page: PostsRoute.page),\n  ],\n)\n```\n\nor by using a `RedirectRoute`\n\n```dart\nAutoRoute(\n  path: '/dashboard',\n  page: DashboardRoute.page,\n  children: [\n    RedirectRoute(path: '', redirectTo: 'users'),\n    AutoRoute(path: 'users', page: UsersRoute.page),\n    AutoRoute(path: 'posts', page: PostsRoute.page),\n  ],\n)\n```\n\n#### Creating Empty Shell routes\nEmpty shell routes build a screen that contain the `AutoRouter` widget, which is used to render nested routes.\nSo you can build the widget your self like follows:\n```dart\n@RoutePage()\nclass MyShellPage extends StatelessWidget {\n  const MyShellPage({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n     /// you can wrap the AutoRouter with any widget you want\n    return  AutoRouter();\n  }\n}\n```\nYou can shorten the code above a bit by directly extending the `AutoRouter` Widget.\n```dart\n@RoutePage()\nclass MyShellPage extends AutoRouter {\n   const MyShellPage({Key? key}) : super(key: key);  \n}\n```\n\nfinally you can create a shell route without code generation using the `EmptyShellRoute` helper\n\n  ```dart\n     const BooksTab = EmptyShellRoute('BooksTab');\n     context.push(BooksTab());\n  ```\n\n\n\n\n### Things to keep in mind when implementing nested navigation\n\n1. Each router manages its own pages stack.\n2. Navigation actions like push, pop and friends are handled by the topmost router and bubble up if it couldn't be handled.\n\n## Tab Navigation\n\nIf you're working with flutter mobile, you're most likely to implement tabs navigation, that's why `auto_route` makes tabs navigation as easy and straightforward as possible.\n\nIn the previous example we used an `AutoRouter` widget to render nested child routes, `AutoRouter` is just a shortcut for `AutoStackRouter`. `StackRouters` manage a stack of pages inside of them, where the active/visible page is always the one on top and you'd need to pop it to see the page beneath it.\n\nNow we can try to implement our tabs using an `AutoRouter` (StackRouter) by pushing or replacing a nested route every time the tab changes and that might work, but our tabs state will be lost, not to mention the transition between tabs issue, luckily auto_route comes equipped with an `AutoTabsRouter`, which is especially made to handle tab navigation.\n\n`AutoTabsRouter` lets you switch between different routes while preserving offstage-routes state, tab routes are lazily loaded by default (can be disabled) and it finally allows to create whatever transition animation you want.\n\nLet's change the previous example to use tab navigation.\n\nNotice that we're not going to change anything in our routes declaration map, we still have a dashboard page that has three nested children: users, posts and settings.\n\n```dart\nclass DashboardPage extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return AutoTabsRouter(\n      // list of your tab routes\n      // routes used here must be declared as children\n      // routes of /dashboard\n      routes: const [\n        UsersRoute(),\n        PostsRoute(),\n        SettingsRoute(),\n      ],\n      transitionBuilder: (context,child,animation) => FadeTransition(\n            opacity: animation,\n            // the passed child is technically our animated selected-tab page\n            child: child,\n          ),\n      builder: (context, child) {\n        // obtain the scoped TabsRouter controller using context\n        final tabsRouter = AutoTabsRouter.of(context);\n        // Here we're building our Scaffold inside of AutoTabsRouter\n        // to access the tabsRouter controller provided in this context\n        //\n        // alternatively, you could use a global key\n        return Scaffold(\n          body: child,\n          bottomNavigationBar: BottomNavigationBar(\n            currentIndex: tabsRouter.activeIndex,\n            onTap: (index) {\n              // here we switch between tabs\n              tabsRouter.setActiveIndex(index);\n            },\n            items: [\n              BottomNavigationBarItem(label: 'Users', ...),\n              BottomNavigationBarItem(label: 'Posts', ...),\n              BottomNavigationBarItem(label: 'Settings', ...),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n```\n\nIf you think the above setup is a bit messy you could use the shipped-in `AutoTabsScaffold` that makes things much cleaner.\n\n```dart\nclass DashboardPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return AutoTabsScaffold(\n      routes: const [\n        UsersRoute(),\n        PostsRoute(),\n        SettingsRoute(),\n      ],\n      bottomNavigationBuilder: (_, tabsRouter) {\n        return BottomNavigationBar(\n          currentIndex: tabsRouter.activeIndex,\n          onTap: tabsRouter.setActiveIndex,\n          items: const [\n            BottomNavigationBarItem(label: 'Users', ...),\n            BottomNavigationBarItem(label: 'Posts', ...),\n            BottomNavigationBarItem(label: 'Settings', ...),\n          ],\n        );\n      },\n    );\n  }\n}\n```\n\n### Using PageView\n\nUse the `AutoTabsRouter.pageView` constructor to implement tabs using PageView\n\n```dart\nAutoTabsRouter.pageView(\n  routes: [\n    BooksTab(),\n    ProfileTab(),\n    SettingsTab(),\n  ],\n  builder: (context, child, _) {\n    final tabsRouter = AutoTabsRouter.of(context);\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(context.topRoute.name),\n        leading: AutoLeadingButton(),\n      ),\n      body: child,\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: tabsRouter.activeIndex,\n        onTap: tabsRouter.setActiveIndex,\n        items: [\n          BottomNavigationBarItem(label: 'Books', ...),\n          BottomNavigationBarItem(label: 'Profile', ...),\n          BottomNavigationBarItem(label: 'Settings', ...),\n        ],\n      ),\n    );\n  },\n);\n```\n\n### Using TabBar\n\nUse the `AutoTabsRouter.tabBar` constructor to implement tabs using TabBar\n\n```dart\nAutoTabsRouter.tabBar(\n  routes: [\n    BooksTab(),\n    ProfileTab(),\n    SettingsTab(),\n  ],\n  builder: (context, child, controller) {\n    final tabsRouter = AutoTabsRouter.of(context);\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(context.topRoute.name),\n        leading: AutoLeadingButton(),\n        bottom: TabBar(\n          controller: controller,\n          tabs: const [\n            Tab(text: '1', icon: Icon(Icons.abc)),\n            Tab(text: '2', icon: Icon(Icons.abc)),\n            Tab(text: '3', icon: Icon(Icons.abc)),\n          ],\n        ),\n      ),\n      body: child,\n      bottomNavigationBar: BottomNavigationBar(\n        currentIndex: tabsRouter.activeIndex,\n        onTap: tabsRouter.setActiveIndex,\n        items: [\n          BottomNavigationBarItem(label: 'Books',...),\n          BottomNavigationBarItem(label: 'Profile',...),\n          BottomNavigationBarItem(label: 'Settings',...),\n        ],\n      ),\n    );\n  },\n);\n```\n\n## Finding The Right Router\n\nEvery nested `AutoRouter` has its own routing controller to manage the stack inside of it and the easiest way to obtain a scoped controller is by using the `BuildContext`.\n\nIn the previous example, `DashboardPage` is a root level stack entry so calling `AutoRouter.of(context)` anywhere inside of it will get us the root routing controller.\n\n`AutoRouter` widgets that are used to render nested routes, insert a new router scope into the widgets tree, so when a nested route calls for the scoped controller, they will get the closest parent controller in the widgets tree; not the root controller.\n\n```dart\nclass Dashboard extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    // this will get us the root routing controller\n    AutoRouter.of(context);\n    return Scaffold(\n      appBar: AppBar(title: Text('Dashboard page')),\n      // this inserts a new router scope into the widgets tree\n      body: AutoRouter()\n    );\n  }\n}\n```\n\nHere's a simple diagram to help visualize this\n\n<p align=\"center\">\n  <img  alt=\"scoped-router-demo\" src=\"https://raw.githubusercontent.com/Milad-Akarie/auto_route_library/master/art/scoped_routers_demo.png\" height=\"570\">\n</p>\n\nAs you can tell from the above diagram it's possible to access parent routing controllers by calling `router.parent<T>()`, we're using a generic function because we have two different routing controllers: `StackRouter` and `TabsRouter`, one of them could be the parent controller of the current router and that's why we need to specify a type.\n\n```dart\nrouter.parent<StackRouter>() // this returns  the parent router as a Stack Routing controller\nrouter.parent<TabsRouter>() // this returns the parent router as a Tabs Routing controller\n```\n\nOn the other hand, obtaining the root controller does not require type casting because it's always a `StackRouter`.\n\n```dart\nrouter.root // this returns the root router as a Stack Routing controller\n```\n\nYou can obtain access to inner-routers from outside their scope using a global key\n\n```dart\nclass DashboardPage extends StatefulWidget {\n  @override\n  _DashboardPageState createState() => _DashboardPageState();\n}\n\nclass _DashboardPageState extends State<DashboardPage> {\n  final _innerRouterKey = GlobalKey<AutoRouterState>();\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: [\n        Column(\n          children: [\n            NavLink(\n              label: 'Users',\n              onTap: () {\n                final router = _innerRouterKey.currentState?.controller;\n                router?.push(const UsersRoute());\n              },\n            ),\n            ...\n          ],\n        ),\n        Expanded(\n          child: AutoRouter(key: _innerRouterKey),\n        ),\n      ],\n    );\n  }\n}\n```\n\nYou could also obtain access to inner-routers from outside their scope without a global key, as long as they're initiated.\n\n```dart\n// assuming this is the root router\ncontext.innerRouterOf<StackRouter>(UserRoute.name);\n// or if we're using an AutoTabsRouter inside of DashboardPage\ncontext.innerRouterOf<TabsRouter>(UserRoute.name);\n```\n\nAccessing the `DashboardPage` inner router from the previous example.\n\n```dart\nclass Dashboard extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Dashboard'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.person),\n            onPressed: () {\n              // accessing the inner router from\n              // outside the scope\n              final router = context.innerRouterOf<StackRouter>(DashboardRoute.name)\n              router?.push(const UsersRoute());\n            },\n          ),\n        ],\n      ),\n      body: AutoRouter(), // we're trying to get access to this\n    );\n  }\n}\n```\n\n## Navigating Without Context\n\nTo navigate without context you can simply assign your generated router to a global variable\n\n```dart\n// declare your route as a global variable\nfinal appRouter = AppRouter();\n\nclass MyApp extends StatefulWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp.router(\n      routerConfig: appRouter.config(),\n    );\n  }\n}\n```\n\n**Note:** Using global variable is not recommended and is considered bad practice and most of the times you should use dependency injection instead.\n\nHere's an example using `get_it` (which is just a personal favorite). You can use any dependency injection package you like.\n\n```dart\nvoid main(){\n  // make sure you register it as a Singleton or a lazySingleton\n  getIt.registerSingleton<AppRouter>(AppRouter());\n  runApp(MyApp());\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  Widget build(BuildContext context) {\n    final appRouter = getIt<AppRouter>();\n\n    return MaterialApp.router(\n      routerConfig: appRouter.config(),\n    );\n  }\n}\n```\n\nNow you can access your router anywhere inside of your app without using context.\n\n```dart\ngetIt<AppRouter>().push(...);\n```\n\n**Note:** Navigating without context is not recommended in nested navigation unless you use `navigate` instead of `push` and you provide a full hierarchy, e.g `router.navigate(SecondRoute(children: [SubChild2Route()]))`\n\n## Deep Linking\n\n**AutoRoute** will automatically handle deep-links coming from the platform, but native platforms require some setup, see [Deep linking topic](https://docs.flutter.dev/ui/navigation/deep-linking) in flutter documentation.\n\n### Using Deep-link Transformer\n\nDeep link transformer intercepts deep-links before they're processed by the matcher, it's useful for stripping or modifying deep-links before they're matched.\n\nIn the following example we will strip a prefix from the deep-link before it's matched.\n\n```dart\nMaterialApp.router(\n  routerConfig: _appRouter.config(\n    deepLinkTransformer: (uri) {\n      if (uri.path.startsWith('/prefix')) {\n        return SynchronousFuture(\n        uri.replace(path: uri.path.replaceFirst('/prefix', '')),\n          );\n      }  \n      return SynchronousFuture(uri);\n    }\n  ),\n);\n```\n**Note** for prefix stripping use the shipped-in `DeepLink.prefixStripper('prefix')`\n\n```dart\nMaterialApp.router(\n  routerConfig: _appRouter.config(\n    deepLinkTransformer: DeepLink.prefixStripper('prefix'),\n  ),\n);\n```\n\n```dart\n### Using Deep-link Builder\n\nDeep link builder is an interceptor for deep-links where you can validate or override deep-links coming from the platform.\n\nIn the following example we will only allow deep-links starting with `/products`\n\n```dart\nMaterialApp.router(\n  routerConfig: _appRouter.config(\n    deepLinkBuilder: (deepLink) {\n      if (deepLink.path.startsWith('/products')) {\n        // continue with the platform link\n        return deepLink;\n      } else {\n        return DeepLink.defaultPath;\n        // or DeepLink.path('/')\n        // or DeepLink([HomeRoute()])\n      }\n    }\n  ),\n);\n```\n\n### Deep Linking to non-nested Routes\n\n**AutoRoute** can build a stack from a linear route list as long as they're ordered properly and can be matched as prefix, e.g `/` is a prefix match of `/products`, and `/products` is prefix match of `/products/:id`. Then we have a setup that looks something like this:\n- `/`\n- `/products`\n- `/products/:id`\n\nNow, receiving this deep-link `/products/123` will add all above routes to the stack. This of course requires `includePrefixMatches` to be true in the root config (default is `!kWeb`) or when using `pushNamed`, `navigateNamed` and `replaceNamed`.\n\n**Things to keep in mind**:\n\n- If a full match can not finally be found, no prefix matches will be included.\n- Paths that require a full path match => `AutoRoute(path:'path', fullMatch: true)` will not be\n  included as prefix matches.\n- In the above example, if `/products/:id` comes before `/products`, `/products` will not be\n  included.\n\n## Declarative Navigation\n\nTo use declarative navigation with auto_route, you simply use the `AutoRouter.declarative` constructor and return a list of routes based on state.\n\n```dart\nAutoRouter.declarative(\n  routes: (handler) => [\n    BookListRoute(),\n    if(_selectedBook != null) {\n      BookDetailsRoute(id: _selectedBook.id),\n    }\n  ],\n);\n```\n\n**Note:** The handler contains a temp-list of pending initial routes which can be read only once.\n\n## Working with Paths\n\nWorking with paths in **AutoRoute** is optional because `PageRouteInfo` objects are matched by name unless pushed as a string using the `deepLinkBuilder` property in root delegate or `pushNamed`, `replaceNamed` `navigateNamed` methods.\n\nIf you don’t specify a path it’s going to be generated from the page name e.g. `BookListPage` will have ‘book-list-page’ as a path, if initial arg is set to true the path will be `/`, unless it's relative then it will be an empty string `''`.\n\nWhen developing a web application or a native app that requires deep-linking, you'd probably need to define paths with clear memorable names, and that's done using the `path` argument in `AutoRoute`.\n\n```dart\nAutoRoute(path: '/books', page: BookListPage),\n```\n\n### Path Parameters (dynamic segments)\n\nYou can define a dynamic segment by prefixing it with a colon\n\n```dart\nAutoRoute(path: '/books/:id', page: BookDetailsPage),\n```\n\nThe simplest way to extract path parameters from path and gain access to them is by annotating constructor params with `@PathParam('optional-alias')` with the same alias/name of the segment.\n\n```dart\nclass BookDetailsPage extends StatelessWidget {\n  const BookDetailsPage({@PathParam('id') this.bookId});\n\n  final int bookId;\n  ...\n}\n```\n\nNow writing `/books/1` in the browser will navigate you to `BookDetailsPage` and automatically extract the `bookId` argument from path and inject it to your widget.\n\n#### Inherited Path Parameters\n\nTo inherit a path-parameter from a parent route's path, we need to use `@PathParam.inherit` annotation in the child route's constructor. Let's say we have the following setup:\n\n```dart\nAutoRoute(\n  path: '/product/:id',\n  page: ProductRoute.page,\n  children: [\n    AutoRoute(path: 'review',page: ProductReviewRoute.page),\n  ],\n)\n```\n\nNow `ProductReviewScreen` expects a path-param named `id` but, from the above snippet we know that the path corresponding with it. `review` has no path parameters, but we can inherit 'id' from the parent `/product/:id` like follows:\n\n```dart\n@RoutePage()\nclass ProductReviewScreen extends StatelessWidget {\n  // the path-param 'id' will be inherited and it can not be passed\n  // as a route arg by user\n  const ProductReviewScreen({super.key, @PathParam.inherit('id') required String id});\n}\n```\n\n### Query Parameters\n\nQuery parameters are accessed the same way, simply annotate the constructor parameter to hold the value of the query param with `@QueryParam('optional-alias')` and let **AutoRoute** do the rest.\n\nYou could also access path/query parameters using the scoped `RouteData` object.\n\n```dart\nRouteData.of(context).pathParams;\n// or using the extension\ncontext.routeData.queryParams;\n```\n\n`Tip`: if your parameter name is the same as the path/query parameter, you could use the const `@pathParam` or `@queryParam` and not pass a slug/alias.\n\n```dart\n@RoutePage()\nclass BookDetailsPage extends StatelessWidget {\n  const BookDetailsPage({@pathParam this.id});\n\n  final int id;\n  ...\n}\n```\n\n### Redirecting Paths\n\nPaths can be redirected using `RedirectRoute`. The following setup will navigate us to `/books` when `/` is matched.\n\n```dart\n<AutoRoute> [\n  RedirectRoute(path: '/', redirectTo: '/books'),\n  AutoRoute(path: '/books', page: BookListRoute.page),\n]\n```\n\nWhen redirecting initial routes the above setup can be simplified by setting the `/books` path as initial and **AutoRoute** will automatically generate the required redirect code for you.\n\n```dart\n<AutoRoute> [\n  AutoRoute(path: '/books', page: BookListRoute.page, initial: true),\n]\n```\n\nYou can also redirect paths with params like follows:\n\n```dart\n<AutoRoute> [\n  RedirectRoute(path: 'books/:id', redirectTo: '/books/:id/details'),\n  AutoRoute(path: '/books/:id/details', page: BookDetailsRoute.page),\n]\n```\n\n**Note**: `RedirectRoutes` are fully matched.\n\n### Wildcards\n\n**AutoRoute** supports wildcard matching to handle invalid or undefined paths.\n\n```dart\nAutoRoute(\n  path: '*',\n  page: UnknownRoute.page,\n)\n// it could be used with defined prefixes\nAutoRoute(\n  path: '/profile/*',\n  page: ProfileRoute.page,\n)\n// or it could be used with RedirectRoute\nRedirectRoute(\n  path: '*',\n  redirectTo: '/',\n)\n```\n\n**Note:** Be sure to always add your wildcards at the end of your route list because routes are matched in order.\n\n## Route Guards\n\nThink of route guards as middleware or interceptors, routes can not be added to the stack without going through their assigned guards. Guards are useful for restricting access to certain routes.\n\nWe create a route guard by extending `AutoRouteGuard` from the **AutoRoute** package and implementing our logic inside of the onNavigation method.\n\n```dart\nclass AuthGuard extends AutoRouteGuard {\n\n  @override\n  void onNavigation(NavigationResolver resolver, StackRouter router) {\n    // the navigation is paused until resolver.next() is called with either\n    // true to resume/continue navigation or false to abort navigation\n    if(authenticated) {\n      // if user is authenticated we continue\n      resolver.next(true);\n    } else {\n        // we redirect the user to our login page\n        // tip: use resolver.redirect to have the redirected route\n        // automatically removed from the stack when the resolver is completed\n        resolver.redirect(\n          LoginRoute(onResult: (success) {\n            // if success == true the navigation will be resumed\n            // else it will be aborted\n            resolver.next(success);\n          },\n        );\n      );\n    }\n  }\n}\n```\n\n**Important**:  `resolver.next()` should only be called once.\n\nThe `NavigationResolver` object contains the guarded route which you can access by calling the property `resolver.route` and a list of pending routes (if there are any) accessed by calling `resolver.pendingRoutes`.\n\nNow we assign our guard to the routes we want to protect.\n\n```dart\nAutoRoute(\n  page: ProfileRoute.page,\n  guards: [AuthGuard()],\n);\n```\n\n#### Guarding all stack-routes\n\nYou can have all your stack-routes (non-tab-routes) go through a list of global guards by overriding the guards property inside your router class. Lets say you have an app with no public screens, we'd have a global guard that only allows navigation if the user is authenticated or if we're navigating to the LoginRoute.\n\n```dart\n@AutoRouterConfig()\nclass AppRouter extends RootStackRouter{\n\n  @override\n  late final List<AutoRouteGuard> guards = [\n    AutoRouteGuard.simple((resolver, router) {\n        if(isAuthenticated || resolver.routeName == LoginRoute.name) {\n          // we continue navigation\n          resolver.next();\n        } else {\n          // else we navigate to the Login page so we get authenticated\n\n          // tip: use resolver.redirect to have the redirected route\n          // automatically removed from the stack when the resolver is completed\n          resolver.redirect(LoginRoute(onResult: (didLogin) => resolver.next(didLogin)));\n        }\n      },\n    ),\n    // add more guards here\n  ];\n\n// ..routes[]\n}\n```\n\n### Using a Reevaluate Listenable\n\nRoute guards can prevent users from accessing private pages until they're logged in for example, but auth state may change when the user is already navigated to the private page, to make sure private pages are only accessed by logged-in users all the time, we need a listenable that tells the router that the auth state has changed and you need to re-evaluate your stack.\n\nThe following auth provider mock will act as our re-valuate listenable\n\n```dart\nclass AuthProvider extends ChangeNotifier {\n  bool _isLoggedIn = false;\n\n  bool get isLoggedIn => _isLoggedIn;\n\n  void login() {\n    _isLoggedIn = true;\n    notifyListeners();\n  }\n\n  void logout() {\n    _isLoggedIn = false;\n    notifyListeners();\n  }\n}\n```\n\nWe simply pass an instance of our `AuthProvider` to `reevaluateListenable` inside of `router.config`\n\n```dart\nMaterialApp.router(\n  routerConfig: _appRouter.config(\n    reevaluateListenable: authProvider,\n  ),\n);\n```\n\nNow, every time `AutoProvider` notifies listeners, the stack will be re-evaluated and `AutoRouteGuard.onNavigation()`. Methods will be re-called on all guards\n\nIn the above example, we assigned our `AuthProvider` to `reevaluateListenable` directly, that's because `reevaluateListenable` takes a `Listenable` and AuthProvider extends `ChangeNotifier` which is a `Listenable`, if your auth provider is a stream you can use `reevaluateListenable: ReevaluateListenable.stream(YOUR-STREAM)`\n\n**Note**: When the Stack is re-evaluated, the whole existing hierarchy will be re-pushed, so if you want to stop re-evaluating routes at some point, use `resolver.resolveNext(<options>)` which is like `resolver.next()` but with more options.\n\n```dart\n@override\nvoid onNavigation(NavigationResolver resolver, StackRouter router) async {\n  if (authProvider.isAuthenticated) {\n    resolver.next();\n  } else {\n    resolver.redirect(\n      WebLoginRoute(\n        onResult: (didLogin) {\n          // stop re-pushing any pending routes after current\n          resolver.resolveNext(didLogin, reevaluateNext: false);\n        },\n      ),\n    );\n  }\n}\n```\n\n## Wrapping Routes\n\nIn some cases we want to wrap our screen with a parent widget, usually to provide some values through context, e.g wrapping your route with a custom `Theme` or a `Provider`. To do that, simply implement `AutoRouteWrapper`, and have wrappedRoute(context) method return (this) as the child of your wrapper widget.\n\n```dart\n@RoutePage()\nclass ProductsScreen extends StatelessWidget implements AutoRouteWrapper {\n  \n  @override\n  Widget wrappedRoute(BuildContext context) {\n    return Provider(create: (ctx) => ProductsBloc(), child: this);\n  }\n  ...\n}\n```\n\n\n\n## Navigation Observers\n\nNavigation observers are used to observe when routes are pushed ,replaced or popped ..etc.\n\nWe implement an AutoRouter observer by extending an `AutoRouterObserver` which is just a `NavigatorObserver` with tab route support.\n\n```dart\nclass MyObserver extends AutoRouterObserver {\n\n  @override\n  void didPush(Route route, Route? previousRoute) {\n    print('New route pushed: ${route.settings.name}');\n  }\n\n // only override to observer tab routes\n  @override\n  void didInitTabRoute(TabPageRoute route, TabPageRoute? previousRoute) {\n    print('Tab route visited: ${route.name}');\n  }\n\n  @override\n  void didChangeTabRoute(TabPageRoute route, TabPageRoute previousRoute) {\n    print('Tab route re-visited: ${route.name}');\n  }\n}\n```\n\nThen we pass our observer to the `<routerName>.config().` **Important:** Notice that `navigatorObservers` property is a builder function that returns a list of observers and the reason for that is a navigator observer instance can only be used by a single router, so unless you're using a single router or you don't want your nested routers to inherit observers, make sure navigatorObservers builder always returns fresh observer instances.\n\n```dart\nreturn MaterialApp.router(\n  routerConfig: _appRouter.config(\n    navigatorObservers: () => [MyObserver()],\n  ),\n);\n```\n\nThe following approach **won't** work if you have nested routers unless they don't inherit the observers.\n\n```dart\nfinal _observer = MyObserver();\nreturn MaterialApp.router(\n  routerConfig: _appRouter.config(\n    // this should always return new instances\n    navigatorObservers: () => [_observer],\n  ),\n);\n```\n\nEvery nested router can have it's own observers and inherit it's parent's.\n\n```dart\nAutoRouter(\n  inheritNavigatorObservers: true, // true by default\n  navigatorObservers:() => [list of observers],\n);\n\nAutoTabsRouter(\n  inheritNavigatorObservers: true, // true by default\n  navigatorObservers:() => [list of observers],\n);\n```\n\nWe can also make a certain screen **route** aware by subscribing to an `AutoRouteObserver` (route not router).\n\nFirst we provide our `AutoRouteObserver` instance\n\n```dart\nreturn MaterialApp.router(\n  routerConfig: _appRouter.config(\n    navigatorObservers: () => [AutoRouteObserver()],\n  ),\n);\n```\n\nNext, we use an `AutoRouteAware` mixin which is a `RouteAware` mixin with tab support to provide the needed listeners, then subscribe to our `AutoRouteObserver`.\n\n```dart\nclass BooksListPage extends State<BookListPage> with AutoRouteAware {\n  AutoRouteObserver? _observer;\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    // RouterScope exposes the list of provided observers\n    // including inherited observers\n    _observer = RouterScope.of(context).firstObserverOfType<AutoRouteObserver>();\n    if (_observer != null) {\n      // we subscribe to the observer by passing our\n      // AutoRouteAware state and the scoped routeData\n      _observer.subscribe(this, context.routeData);\n    }\n  }\n\n @override\n  void dispose() {\n    super.dispose();\n    // don't forget to unsubscribe from the\n    // observer on dispose\n    _observer.unsubscribe(this);\n  }\n\n  // only override if this is a tab page\n  @override\n  void didInitTabRoute(TabPageRoute? previousRoute) {}\n\n  // only override if this is a tab page\n  @override\n  void didChangeTabRoute(TabPageRoute previousRoute) {}\n\n  @override\n  void didPopNext() {}\n\n  @override\n  void didPushNext() {}\n\n  @override\n  void didPush() {}\n\n  @override\n  void didPop() {}\n}\n```\n\n#### AutoRouteAwareStateMixin\n\nThe above code can be simplified using `AutoRouteAwareStateMixin`\n\n```dart\nclass BooksListPage extends State<BookListPage> with AutoRouteAwareStateMixin<BookListPage> {\n  // only override if this is a tab page\n  @override\n  void didInitTabRoute(TabPageRoute? previousRoute) {}\n\n  // only override if this is a tab page\n  @override\n  void didChangeTabRoute(TabPageRoute previousRoute) {}\n\n  // only override if this is a stack page\n  @override\n  void didPopNext() {}\n  \n  // only override if this is a stack page\n  @override\n  void didPushNext() {}\n}\n```\n\n## Customizations\n\n##### MaterialAutoRouter | CupertinoAutoRouter | AdaptiveAutoRouter\n\n| Property                    | Default value         | Definition                                                                        |\n|-----------------------------|-----------------------|-----------------------------------------------------------------------------------|\n| replaceInRouteName [String] | Page&#124Screen,Route | Used to replace conventional words in generated route name (pattern, replacement) |\n\n## Custom Route Transitions\n\nTo use custom route transitions use a `CustomRoute` and pass in your preferences. The `TransitionsBuilder` function needs to be passed as a static/const reference that has the same signature as the `TransitionsBuilder` function of the `PageRouteBuilder` class.\n\n```dart\nCustomRoute(\n  page: LoginRoute.page,\n  // TransitionsBuilders class contains a preset of common transitions builders.\n  transitionsBuilder: TransitionsBuilders.slideBottom,\n  durationInMilliseconds: 400,\n)\n```\n\n`Tip:` Override `defaultRouteType` in generated router to define global custom route transitions.\n\nYou can of course use your own transitionsBuilder function, as long as it has the same function signature. The function has to take in exactly one `BuildContext`, `Animation<Double>`, `Animation<Double>` and a child `Widget` and it needs to return a `Widget`. Typically, you would wrap your child with one of Flutter's transition widgets as follows:\n\n```dart\nCustomRoute(\n  page: ZoomInScreen,\n  transitionsBuilder:\n    (BuildContext context, Animation<double> animation, Animation<double> secondaryAnimation, Widget child) {\n      // you get an animation object and a widget\n      // make your own transition\n      return ScaleTransition(scale: animation, child: child);\n  },\n)\n```\n\n## Custom Route Builder\n\nYou can use your own custom route by passing a `CustomRouteBuilder` function to `CustomRoute' and implement the builder function the same way we did with the TransitionsBuilder function, the most important part here is passing the page argument to our custom route.\n\nmake sure you pass the return type <T> to your custom route builder function.\n```dart\nCustomRoute(\n  page: CustomPage,\n  customRouteBuilder: <T>(BuildContext context, Widget child, AutoRoutePage<T> page) {\n    return PageRouteBuilder<T>(\n      fullscreenDialog: page.fullscreenDialog,\n      // this is important\n      settings: page,\n      pageBuilder: (_,__,___) => child,\n    );\n  },\n)\n```\n\n## Others\n\n### Including Micro/External Packages\n\nTo include routes inside of a depended-on package, we generated the routes inside the micro package like normal, then either use the generated routes inside your main router individually,\nor declare them inside your micro router and merge them with the main router.\n\n```dart\n  final myMicroRouter = MyMicroRouter();\n\n  @override\n  List<AutoRoute> get routes => [\n        AutoRoute(page: HomeRoute.page, initial: true),\n        /// use micro routes individually\n        AutoRoute(page: RouteFromMicroPackage.page),\n        /// or merge all routes from micro router\n        ...myMicroRouter.routes,\n      ];\n```\n\n`Tip:` You can add export `MyMicroRouter` to `app_router.dart`, so you only import `app_router.dart` inside of your code.\n\n```dart\n// ...imports\nexport 'package:my_package/my_micro_router.dart'\n@AutoRouterConfig()\nclass AppRouter extends RootStackRouter {}\n```\n\n## Configuring builders\nTo pass builder configuration to `auto_route_generator` we need to add `build.yaml` file next to `pubspec.yaml` if not already added.\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_route_generator:\n      # configs for @RoutePage() generator ...\n      auto_route_generator:auto_router_generator:\n      # configs for @AutoRouterConfig() generator ...\n```\n\n### Passing custom ignore_for_file rules\nYou can pass custom ignore_for_file rules to the generated router by adding the following:\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_router_generator:\n       options:\n         ignore_fore_file:\n           - custom_rule_1\n           - custom_rule_2\n```\n\n### Optimizing generation time\nThe first thing you want to do to reduce generation time, is specifying the files build_runner should process and we do that by using [globs](https://pub.dev/packages/glob). Globs are kind of regex patterns with little differences that's used to match file names. **Note:** for this to work on file level you need to follow a naming convention\n\n```\nlet's say we have the following files tree\n├── lib\n│ ├── none_widget_file.dart\n│ ├── none_widget_file2.dart\n│ └── ui\n│ ├── products_screen.dart\n│ ├── products_details_screen.dart\n```\n\nBy default, the builder will process all of these files to check for a page with `@RoutePage()`\nannotation, we can help by letting it know what files we need processed, e.g only process the files\ninside the ui folder:\n**Note** (**) matches everything including '/';\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_route_generator:\n        generate_for:\n          - lib/ui/**.dart\n```\n\nLet's say you have widget files inside of the ui folder, but we only need to process files ending with `_screen.dart`\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_route_generator:\n        generate_for:\n          - lib/ui/**_screen.dart\n```\n\nNow only `products_screen.dart`, `products_details_screen.dart` will be processed\n\nThe same goes for `@AutoRouterConfig` builder\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_route_generator: # this for @RoutePage\n        generate_for:\n          - lib/ui/**_screen.dart\n      auto_route_generator:auto_router_generator: # this for @AutoRouterConfig\n        generate_for:\n          - lib/ui/router.dart\n```\n\n## Enabling cached builds\n\n**This is still experimental**\nWhen cached builds are enabled, **AutoRoute** will try to prevent redundant re-builds by analyzing whether the file changes has any effect on the extracted route info, e.g any changes inside of the build method should be ignored.\n\n**Note** Enable cached builds on both generators\n\n```yaml\ntargets:\n  $default:\n    builders:\n      auto_route_generator:auto_route_generator: # this for @RoutePage\n        options:\n          enable_cached_builds: true\n        generate_for:\n          - lib/ui/**_screen.dart\n      auto_route_generator:auto_router_generator: # this for @AutoRouterConfig\n        options:\n          enable_cached_builds: true\n        generate_for:\n          - lib/ui/router.dart\n```\n\n### AutoLeadingButton-BackButton\n\n`AutoLeadingButton` is **AutoRoute**'s replacement to the default BackButton to handle nested or parent stack popping. To use it, simply assign it to the `leading` property inside of `AppBar`\n\n```dart\nAppBar(\n  title: Text(context.topRoute.name),\n  leading: AutoLeadingButton(),\n)\n```\n\n### ActiveGuardObserver\n\n`ActiveGuardObserver` can notify you when a guard is being checked and what guard it is. This can be used to implement a loading indicator for example.\n\n```dart\nvar isLoading = false;\nvoid initState(){\n  final guardObserver = context.router.activeGuardObserver;\n\n  guardObserver.addListener(() {\n    setState((){\n      isLoading = guardObserver.guardInProgress;\n    });\n  });\n}\n```\n\n\n## Examples\n \n- [Declarative Navigation](https://github.com/Milad-Akarie/auto_route_library/blob/master/auto_route/example/lib/declarative/declarative.router.dart)\n- [Nested Navigation](https://github.com/Milad-Akarie/auto_route_library/blob/master/auto_route/example/lib/nested-navigation/nested_navigation.router.dart)\n \n### Support auto_route\n\nYou can support auto_route by liking it on Pub and staring it on Github, sharing ideas on how we can enhance a certain functionality or by reporting any problems you encounter and of course buying a couple coffees will help speed up the development process"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "auto_route",
          "type": "tree",
          "content": null
        },
        {
          "name": "auto_route_generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "melos.yaml",
          "type": "blob",
          "size": 0.34375,
          "content": "name: auto_route_library\n\npackages:\n  - auto_route\n  - auto_route_generator\n\n\ncommand:\n  bootstrap:\n    usePubspecOverrides: true\n\n\nscripts:\n  analyze:\n    exec: dart analyze .\n  version-ar:\n    exec: melos version\n\n\n# alias version-ar='melos version --no-dependent-constraints --scope=auto_route'\n# alias version-ar='melos publish --scope=auto_route'\n"
        },
        {
          "name": "migrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "old",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 8.984375,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  ansi_styles:\n    dependency: transitive\n    description:\n      name: ansi_styles\n      sha256: \"9c656cc12b3c27b17dd982b2cc5c0cfdfbdabd7bc8f3ae5e8542d9867b47ce8a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.3.2+1\"\n  args:\n    dependency: transitive\n    description:\n      name: args\n      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.4.2\"\n  async:\n    dependency: transitive\n    description:\n      name: async\n      sha256: \"947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.11.0\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      sha256: \"6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  charcode:\n    dependency: transitive\n    description:\n      name: charcode\n      sha256: fb98c0f6d12c920a02ee2d998da788bca066ca5f148492b7085ee23372b12306\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.1\"\n  cli_launcher:\n    dependency: transitive\n    description:\n      name: cli_launcher\n      sha256: \"5e7e0282b79e8642edd6510ee468ae2976d847a0a29b3916e85f5fa1bfe24005\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.3.1\"\n  cli_util:\n    dependency: transitive\n    description:\n      name: cli_util\n      sha256: c05b7406fdabc7a49a3929d4af76bcaccbbffcbcdcf185b082e1ae07da323d19\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.4.1\"\n  collection:\n    dependency: transitive\n    description:\n      name: collection\n      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.18.0\"\n  conventional_commit:\n    dependency: transitive\n    description:\n      name: conventional_commit\n      sha256: dec15ad1118f029c618651a4359eb9135d8b88f761aa24e4016d061cd45948f2\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.6.0+1\"\n  file:\n    dependency: transitive\n    description:\n      name: file\n      sha256: \"1b92bec4fc2a72f59a8e15af5f52cd441e4a7860b49499d69dfa817af20e925d\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"6.1.4\"\n  glob:\n    dependency: transitive\n    description:\n      name: glob\n      sha256: \"0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  graphs:\n    dependency: transitive\n    description:\n      name: graphs\n      sha256: aedc5a15e78fc65a6e23bcd927f24c64dd995062bcd1ca6eda65a3cff92a4d19\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.3.1\"\n  http:\n    dependency: transitive\n    description:\n      name: http\n      sha256: \"761a297c042deedc1ffbb156d6e2af13886bb305c2a343a4d972504cd67dd938\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  http_parser:\n    dependency: transitive\n    description:\n      name: http_parser\n      sha256: \"2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.2\"\n  io:\n    dependency: transitive\n    description:\n      name: io\n      sha256: \"2ec25704aba361659e10e3e5f5d672068d332fc8ac516421d483a11e5cbd061e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.4\"\n  json_annotation:\n    dependency: transitive\n    description:\n      name: json_annotation\n      sha256: b10a7b2ff83d83c777edba3c6a0f97045ddadd56c944e1a23a3fdf43a1bf4467\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.8.1\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.12.16+1\"\n  melos:\n    dependency: \"direct dev\"\n    description:\n      name: melos\n      sha256: \"96e64bbade5712c3f010137e195bca9f1b351fac34ab1f322af492ae34032067\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.4.0\"\n  meta:\n    dependency: transitive\n    description:\n      name: meta\n      sha256: \"7687075e408b093f36e6bbf6c91878cc0d4cd10f409506f7bc996f68220b9136\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.12.0\"\n  mustache_template:\n    dependency: transitive\n    description:\n      name: mustache_template\n      sha256: a46e26f91445bfb0b60519be280555b06792460b27b19e2b19ad5b9740df5d1c\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.0\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      sha256: \"087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.9.0\"\n  platform:\n    dependency: transitive\n    description:\n      name: platform\n      sha256: \"12220bb4b65720483f8fa9450b4332347737cf8213dd2840d8b2c823e47243ec\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.4\"\n  pool:\n    dependency: transitive\n    description:\n      name: pool\n      sha256: \"20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.5.1\"\n  process:\n    dependency: transitive\n    description:\n      name: process\n      sha256: \"53fd8db9cec1d37b0574e12f07520d582019cb6c44abf5479a01505099a34a09\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.2.4\"\n  prompts:\n    dependency: transitive\n    description:\n      name: prompts\n      sha256: \"3773b845e85a849f01e793c4fc18a45d52d7783b4cb6c0569fad19f9d0a774a1\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.0\"\n  pub_semver:\n    dependency: transitive\n    description:\n      name: pub_semver\n      sha256: \"40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.4\"\n  pub_updater:\n    dependency: transitive\n    description:\n      name: pub_updater\n      sha256: b06600619c8c219065a548f8f7c192b3e080beff95488ed692780f48f69c0625\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.3.1\"\n  pubspec:\n    dependency: transitive\n    description:\n      name: pubspec\n      sha256: f534a50a2b4d48dc3bc0ec147c8bd7c304280fff23b153f3f11803c4d49d927e\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.3.0\"\n  quiver:\n    dependency: transitive\n    description:\n      name: quiver\n      sha256: b1c1ac5ce6688d77f65f3375a9abb9319b3cb32486bdc7a1e0fdf004d7ba4e47\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.2.1\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      sha256: \"53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.10.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      sha256: \"73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.11.1\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      sha256: \"556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.0\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      sha256: \"9955ae474176f7ac8ee4e989dadfb411a58c30415bcfb648fa04b2b8a03afa7f\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.0\"\n  typed_data:\n    dependency: transitive\n    description:\n      name: typed_data\n      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.2\"\n  uri:\n    dependency: transitive\n    description:\n      name: uri\n      sha256: \"889eea21e953187c6099802b7b4cf5219ba8f3518f604a1033064d45b1b8268a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.0\"\n  web:\n    dependency: transitive\n    description:\n      name: web\n      sha256: \"97da13628db363c635202ad97068d47c5b8aa555808e7a9411963c533b449b27\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.5.1\"\n  yaml:\n    dependency: transitive\n    description:\n      name: yaml\n      sha256: \"75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.2\"\n  yaml_edit:\n    dependency: transitive\n    description:\n      name: yaml_edit\n      sha256: c566f4f804215d84a7a2c377667f546c6033d5b34b4f9e60dfb09d17c4e97826\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.2.0\"\nsdks:\n  dart: \">=3.3.0 <4.0.0\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.1025390625,
          "content": "name: melos_root\npublish_to: none\n\nenvironment:\n  sdk: \">=3.3.0 <4.0.0\"\ndev_dependencies:\n  melos: ^3.0.0"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}