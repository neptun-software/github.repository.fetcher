{
  "metadata": {
    "timestamp": 1736710547206,
    "page": 119,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fluttercandies/extended_image",
      "stars": 1958,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5390625,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\npubspec.lock\n.env\n.vscode"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.302734375,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 63b2daff7f91afeaac47f3646f59eefd59210c41\n  channel: unknown\n\nproject_type: package\n"
        },
        {
          "name": ".pubignore",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.3369140625,
          "content": "## 9.1.0\n\n* Removed the `enableMemoryCache` variable in `ExtendedImage`,please Use `clearMemoryCacheWhenDispose` instead for managing memory cache behavior. \n* Scale the image to align with the crop rect and make crop rect as bigger as possible when rotate Image on Editor mode.(#713)\n\n## 9.0.9\n\n* Fix drag crop rect can't zoom in the image(#723)\n\n## 9.0.8\n\n* Fix the issue with 90-degree judgment when rotate image.\n* Fix SetState will Reset ExtendedImage and clear the Crop State. (#712)\n\n## 9.0.7\n\n* Fix crop rect transform not invert\n* Support editor config history\n* Add updateConfig and get config from editor controller\n\n## 9.0.6\n\n* Fix issue about worng scale for crop rect when scale is more than max scale\n\n## 9.0.5\n\n* Fix issue about worng scale for crop rect when scale is more than max scale\n\n## 9.0.4\n\n* Public [ImageEditorController.currentIndex],[ImageEditorController.history],[ImageEditorController.saveCurrentState]\n* Scale the crop rect if the image can't be scaled(max scale) when rotate the image.\n\n## 9.0.3\n\n* Breaking change: update the term 'angle' to 'degree'.\n\n## 9.0.2\n\n* Update eidtor crop rect when srceen size is changed.\n\n## 9.0.1\n\n* Take care about web platform, update eidtor layer size when srceen size is changed.\n* Make the list can be scrolled on web platform.\n\n## 9.0.0\n\n* Feature:\n  1. support to change free angle rotation on editor mode.\n  2. support to control whether the cropping box follows rotation on editor mode.\n  3. support flip and rotate animation on editor mode.\n  4. support undo and redo on editor mode.\n  5. support update cropAspectRatio without reset state on editor mode.\n  6. add [ImageEditorController] for [EditorConfig] to control the editor state.\n  \n* Issues:\n  1. Fix issue about free angle rotation. (#702, #627, #78, #441)\n  2. Fix issue about control whether the cropping box also rotate follows the rotation. (#691, #277)\n  3. Fix issue about flip animation. (#397)\n  4. Fix issue about crop rect gets invalid randomly on zooming in and out. (#548) \n  5. Fix issue about undo and redo. (#553)\n\n* Breaking change:\n  1. EditorCropLayerPainter.paintMask method the [Size] argument to [Rect].\n  2. Remove flipX support.\n  3. Change the cropping process, now they are rotate, flipY and getCropRect.\n\n\n## 8.3.1\n\n* Fix issue that unsmooth zooming when using ExtendedImageGesturePageView (#631)\n* Add [ExtendedImageGesturePageView.shouldAccpetHorizontalOrVerticalDrag] to custum whether should accpet horizontal or vertical drag at that time.\n\n## 8.3.0\n\n* Add [imageGestureState] parameter for ImageBuilderForGesture call back, add [wrapGestureWidget] method for [ExtendedImageGestureState] and add [GestureWidgetDelegate]. All of them are using to build a custom gesture widget when the image is in ExtendedImageMode.gesture mode.\n\n* Add Live Photo Demo to show how to use the new feature.\n\n## 8.2.4\n\n* Fix issue that pageSpacing not work as expected after flutter 3.22.0 (#692)\n\n## 8.2.3\n\n* fix _DragGestureRecognizer build error after https://github.com/flutter/flutter/pull/151627\n\n## 8.2.2\n\n* Fix issue that pageSpacing not work as expected after flutter 3.22.0 (#692)\n\n## 8.2.1\n\n* dart fix\n\n## 8.2.0\n\n* Migrate to 3.16.0 \n\n## 8.1.1\n\n* Fix issue with onDragEnd\n\n## 8.1.0\n\n* Migrate to 3.13.0 \n* Breaking change: remove preloadPagesCount of ExtendedImageGesturePageView. The cacheExtent of Viewport should be 0. \n* Add demo to instead of preloadPagesCount of ExtendedImageGesturePageView\n\n\n## 8.0.2\n\n* [EditorCropLayerPainter.paintMask] not use BlendMode.clear now, due to '--web-renderer html' is not support.\n\n## 8.0.1\n\n* Dart sdk: '>=2.18.0 <4.0.0'\n\n## 8.0.0\n\n* Migrate to Flutter 3.10.0 and Dart 3.0.0 (#557,#563,#570,#572,#573)\n* Cherry Pick https://github.com/flutter/flutter/pull/110131\n* Cherry Pick https://github.com/flutter/flutter/pull/119495\n\n## 7.0.2\n\n* publish v6.4.1 for flutter 3.3.0 and v6.2.2 for flutter 3.0.5\n\n## 7.0.1\n\n* update judging condition of delta(minGesturePageDelta) at it's sliding page when set ExtendedImageMode.gesture\n\n## 7.0.0\n\n* Migrate to 3.7.0 (#545)\n\n## 6.4.1\n\n* latest code on Flutter 3.3.0 \n\n## 6.4.0\n\n* add [ExtendedImage.globalStateWidgetBuilder] to support to override State Widget if loadStateChanged is not define.(#541)\n\n## 6.3.4\n\n* add preloadPagesCount for ExtendedImageGesturePageView\n\n## 6.3.3\n\n* draw editor with BlendMode.clear.\n\n## 6.3.2\n\n* support to set insets for paint image at the beginning.(#417)\n* merge code from official (#515)\n  \n## 6.3.1\n\n* fix issue that rebuild viewportDimension is not right when pageSpacing is not zero(ExtendedImageGesturePageView #516)\n\n## 6.3.0\n\n* Migrate to 3.3.0\n\n## 6.2.2\n\n* latest code on Flutter 3.0.5 \n\n## 6.2.1\n\n* Add DeviceGestureSettings for ExtendedVerticalDragGestureRecognizer and ExtendedHorizontalDragGestureRecognizer.(#482,#483)\n\n## 6.2.0\n\n* Migrate to 3.0.0\n\n## 6.1.0\n\n* override == and hashCode for ExtendedResizeImage\n* fix issue that ExtendedResizeImage can't get rawImageData(#477)\n* ExtendedResizeImage.maxBytes is actual bytes of Image, not decode bytes.\n* fix issue that max scale look bigger after zoom in and zoom out (#476)\n\n## 6.0.3\n\n* Improve:\n  add [EditorConfig.initialCropAspectRatio] to support to set initial CropAspectRatio(#462 It's good for that you can set initial CropAspectRatio at first time and set CropAspectRatio to custom, so that the users can change CropAspectRatio as they want). \n\n\n## 6.0.2+1\n\n* Issues:\n  1. Hide `FileImage` from `extended_image_library` explicitly.\n\n## 6.0.2\n\n* Issues:\n  1. Remove the deprecated constructor for the `ExtendedVelocityTracker`. (#460)\n  2. Hide `File` from `extended_image_library` explicitly.\n\n## 6.0.1\n\n* Issues:\n  Fix VelocityTracker is not type ExtendedVelocityTracker\n\n## 6.0.0\n\n* Breaking change:\n  Migrate to 2.8\n\n## 5.1.3\n\n* Issues:\n  1. fix issue that solve gesture conflict between MovePage and vertical pan.\n\n## 5.1.2\n\n* Issues:\n  1. fix issue that mouse wheel/double tap are not working.(#404)\n\n## 5.1.1\n\n* Bumping flutter sdk minimum version to 2.5.0\n## 5.1.0\n\n* Improve:\n  add [ExtendedPageController.shouldIgnorePointerWhenScrolling] to solve issue that we can's zoom image before [PageView] stop scroll in two way.  \n\n## 5.0.0\n\n* Improve:\n  1. solve gesture conflict between Scale and Horizontal/Vertical drag.\n  2. support to set page spacing. [ExtendedPageController.pageSpacing]\n  3. add [ExtendedImage.opacity].\n  4. fix that we can't zoom image before [PageView] stop scroll.\n\n* Breaking change:\n  1. use [ExtendedPageController] instead of [PageController].\n  2. use [ExtendedImageGesturePageView.canScrollPage] instead of [ExtendedImageGesturePageView.canMovePage].\n\n## 4.2.1\n\n* Improve:\n  1. fix description of reverseMousePointerScrollDirection\n\n## 4.2.0\n\n* Issues:\n  1. fix issue that inverse zoom by mouse wheel.(#382)\n  2. fix issue that crop_layer with/height is negative\n\n## 4.1.0\n\n* Improve:\n  1. add [ExtendedImage.network.cacheMaxAge] to set max age to be cached.\n  2. update demo about hero, make it better when slide out.\n\n## 4.0.1\n\n* Issues:\n  1. fix issue that we should end method with a call to super.dispose().(#329).\n\n## 4.0.0\n\n* Breaking change:\n\n  1. we cache raw image pixels as default behavior at previous versions, it's not good for heap memory usage. so add [ExtendedImageProvider.cacheRawData] to support whether should cache the raw image pixels. It's [false] now.\n\n* Improve:\n\n  1. add [ExtendedResizeImage] to support resize image more convenient.\n  2. add [ExtendedImageProvider.imageCacheName] to support custom ImageCache to store ExtendedImageProvider.\n  3. add MemoryUsageDemo. #315\n\n* Issues:\n  1. fix issue that [EditorConfig.editActionDetailsIsChanged] is not fire when change crop area. #317\n\n## 3.0.0\n\n* Improve:\n\n  1. support null-safety\n  2. add [ExtendedNetworkImageProvider.printError]\n  3. merge code from Flutter 2.0\n\n* Breaking change:\n\n  1. remove [TransparentMaterialPageRoute] and [TransparentMaterialPageRoute]\n\n## 2.0.0\n\n* Improve:\n  1. add cacheKey for NetworkProvider. #288\n  2. web capability at pub.dev.\n  3. add change event for editor. #300\n\n* Breaking change:\n  1. Use [EditorCropLayerPainter] instead of [ExtendedImageCropLayerCornerPainter]\n\n## 1.6.0\n\n* Improve:\n\n  1. public ExtendedImageSlidePageHandler for slide other widget. #298\n\n## 1.5.0\n\n* Improve:\n\n  1. public handleLoadingProgress for default constructor of ExtendedImage. #274\n\n## 1.4.0\n\n* Improve:\n\n  1. add hitTestBehavior for GestureConfig and EditorConfig. #271\n\n## 1.3.0\n\n* Features:\n  1. support zoom with mouse wheel.\n\n## 1.2.0\n\n* Features:\n  1. add posibility to draw custom crop layout corners\n  2. add corner shape(ExtendedImageCropLayerPainterCircleCorner())\n\n## 1.1.2\n\n* Issues:\n  1. fix issue that flickering when zooming out(#235).\n\n## 1.1.1\n\n* Issues:\n  1. fix issue that slide offset is not right.\n\n## 1.1.0\n\n* Features:\n  1. add cacheHeight and cacheWidth params for all constructors.\n  2. add isAntiAlias parameter.\n  3. add GestureDetailsIsChanged call back for GestureConfig(#214).\n\n* Improve:\n  1. more demo.\n\n## 1.0.0\n\n* Improve:\n\n  1. merge from Defer image decoding when scrolling fast(https://github.com/flutter/flutter/pull/49389).\n\n  2. flutter sdk minimum version limit to 1.17.0.\n\n\n## 0.9.0\n\n* Features:\n  1. add cacheHeight and cacheWidth params for ExtendedImage.network.\n  2. add Key extendedImageGestureKey for ExtendedImageGesture.\n\n## 0.8.0\n\n* Features:\n  1. add call back CanScrollPage for ExtendedImageGesturePageView.\n\n## 0.7.4\n\n* Issues:\n  1. fix ScrollPhysics is not working for ExtendedImageGesturePageView\n\n## 0.7.3+1\n\n* Improve:\n  1. remove docs from master branch and release web at github_page branch.\n\n## 0.7.3\n\n* Improve:\n  1. fix build error on high flutter sdk(> 1.6.0)\n  2. fix analysiz_options\n\n## 0.7.2\n\n* Features:\n  1. support loading progress for network\n  2. public HttpClient of ExtendedNetworkImageProvider\n  3. public ExtendedImageGestureState for SlideOffsetHandler/SlideEndHandler/            SlideScaleHandler to get scale of image\n\n## 0.7.1\n\n* Improve:\n  1. scale parameter of method(handleDoubleTap) is support animationMinScale and animationMaxScale now.\n\n## 0.7.0\n\n* Features:\n  1. support web.\n  2. add [clearMemoryCacheWhenDispose] parameter that whether clear memory cache when image is disposed.\n\n* Issues:\n  1. fix animationMinScale and animationMaxScale are not working for gif.\n  2. fix scale parameter of method(handleDoubleTap) is beyond minScale and maxScale.\n\n## 0.6.9\n\n* Features:\n  1. support customize offset when slide page.\n\n## 0.6.8\n\n* Issues:\n  1. fix breaking change for flutter 1.10.15 about miss load parameter.\n\n## 0.6.7\n\n* Issues:\n  1. fix issue that ExtendedImageGesturePageView didn't work well when set initial alignment.\n\n## 0.6.6\n\n* Features:\n  1. support init image with alignment when initialScale >1.0.\n* Issues:\n  1. fix issue that scrollDirection didn't work when set it dynamically(ExtendedImageGesturePageView ).\n* Improve:\n  1. add WaterfallFlow demo.\n\n## 0.6.5\n\n* Features:\n  1. \badd completedWidget for ExtendedImageState, it is include gesture or editor, so that you would't miss them\n* Improve:\n  2. improve documents about Load State\n\n## 0.6.4\n\n* Issues:\n  1. fix issue that rawImageData can't be cached for ExtendedExactAssetImageProvider/ExtendedAssetImageProvider.\n* Improve:\n  1. add demo about ImageEditor with native library, it's faster.\n\n## 0.6.3\n\n* Issues:\n  1. fix issue that forget canvas.restore after canvas.clipRect\n* Breaking Change:\n  2. ImageEditor：you should crop image data before flip or rotate image data now.\n* Improve:\n  3. increase cropping speed\n\n## 0.6.2\n\n* Features:\n  1. add InitCropRectType(imageRect,layoutRect) for EditorConfig to define init crop rect base on initial image rect or image layout rect.\n* Breaking Change:\n  1. make sure the image is all painted to crop,the fit of image must be BoxFit.contain.\n\n## 0.6.1\n\n* Issues:\n  1. fix issue about drag slowly in ImageEditor\n\n## 0.6.0\n\n* Issues:\n  1. fix issue about strange behaviour at slide out page\n\n## 0.5.9\n\n* Issues:\n  1. add HeroBuilderForSlidingPage call back to fix strange hero animation\n\n## 0.5.8\n\n* Features:\n  1. support to crop,rotate,flip image\n\n## 0.5.6\n\n* Improve:\n  1. add key for ExtendedImageSlidePage\n\n## 0.5.5\n\n* Features:\n  1. add call back CanMovePage for ExtendedImageGesturePageView. related issue. #32\n\n## 0.5.4\n\n* Issues:\n  1. fix issue about borderRadius and border\n  2. fix demo error about extended_text\n\n## 0.5.3\n\n* Improve:\n  1. merge codes base on v1.7.8\n\n## 0.5.1\n\n* Features:\n  1. add call back onSlidingPage when is sliding page, you can change other widgets state in page.ExtendedImageSlidePage\n  2. add enableSlideOutPage parameter to define whether enable slide out page. ExtendedImage\n\n## 0.4.3\n\n* Breaking Change:\n  1. parameter gestureConfig is obsolete. initGestureConfigHandler is used to setting GestureConfig now.\n\n* Issues:\n  1. fix issue about slide page.\n\n* Features:\n  1. support to slide page at loading/failed state\n\n## 0.4.2\n\n* Improve:\n  1. add README-ZH.md\n\n## 0.4.1\n\n* Improve:\n  1. add SlideType to support slide only image or whole pageExtendedImageSlidePage\n\n## 0.4.0\n\n* Features:\n  1. support to slide out page\n\n## 0.3.8\n\n* Improve:\n  1. update path_provider 1.1.0\n\n## 0.3.6\n\n* Improve:\n  1. handle load failed when re-addListener\n\n## 0.3.4\n\n* Features:\n  1. add physics parameter for ExtendedImageGesturePageView\n\n## 0.3.3\n\n* Improve:\n  1. disabled informationCollector to keep backwards compatibility for now (ExtendedNetworkImageProvider)\n\n## 0.3.2\n\n* Improve:\n  1. import extended_image_library for network cache\n\n## 0.3.1\n* Issues:\n  1. fix issue that AnimationController.stop() called after AnimationController.dispose().\n* Improve:\n  1. show how to build a double tap scale animation.\n\n## 0.2.9\n\n* Improve:\n  1. add handleDoubleTap method to support zoom image base on double tap position.\n\n## 0.2.8\n\n* Improve:\n  1. add inertia scroll when image is zoom in and it's moving page.\n\n## 0.2.7\n\n* Issues:\n  1. fix issue that wrong behavior of page view scroll when image has big width or big height.\n\n## 0.2.6\n\n* Issues:\n  1. fix issue that wrong behavior of page view scroll when image is zoom in.\n\n## 0.2.5\n\n* Improve:\n  1. add onDoubleTap parameter to custom double tap behavior under ExtendedImageMode.Gesture\n\n## 0.2.3\n\n* Features:\n  1. add enableMemoryCache parameter, whether cache in PaintingBinding.instance.imageCache\n  2. add clearMemoryCacheIfFailed parameter, when failed to load image, whether clear memory cache,if true, image will reload in next time.\n* Breaking Change:\n  1. auto cancel network request is obsolete.\n\n## 0.2.2\n\n* Improve:\n  1. update path_provider version from 0.4.1 to 0.5.0+1\n\n## 0.2.1\n\n* Features:\n  1. add cancelToken,retries,timeLimit and timeRetry parameters for ExtendedImage.network method\n  2. add default cancelToken for ExtendedImage.network method\n* Issues:\n  1. fix issue about cancel network image request\n  2. fix gesture page view scrolls not smooth\n\n## 0.2.0\n\n* Features:\n  1. support zoom/pan image and view image in page view like wechat(support zoom in and scroll next or previous image)\n\n## 0.1.8\n\n* Breaking Change:\n  1. remove image_picker_saver from extended_image.\n  obsolete saveNetworkImageToPhoto method(if you want to save photo,you can import image_picker_saver and get data from getNetworkImageData method)\n\n## 0.1.7\n\n* Improve:\n  1. public instantiateImageCodec method so that you can handle image data by override this in ExtendedNetworkImageProvider\n\n## 0.1.6\n\n* Improve:\n  1. add getNetworkImageData method\n\n## 0.1.5\n\n* Improve:\n  1. change toMd5 to keyToMd5\n\n## 0.1.4\n\n* Improve:\n  1. public imageProvider for ExtendedImageState\n\n## 0.1.3\n* First Release:\n  1. Release ExtendedImage.\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0126953125,
          "content": "* @zmtzawqlp\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2019 zmtzawqlp\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README-ZH.md",
          "type": "blob",
          "size": 43.46875,
          "content": "# extended_image\n\n[![pub package](https://img.shields.io/pub/v/extended_image.svg)](https://pub.dartlang.org/packages/extended_image) [![GitHub stars](https://img.shields.io/github/stars/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/stargazers) [![GitHub forks](https://img.shields.io/github/forks/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/network) [![GitHub license](https://img.shields.io/github/license/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/blob/master/LICENSE) [![GitHub issues](https://img.shields.io/github/issues/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/issues) <a target=\"_blank\" href=\"https://jq.qq.com/?_wv=1027&k=5bcc0gy\"><img border=\"0\" src=\"https://pub.idqqimg.com/wpa/images/group.png\" alt=\"flutter-candies\" title=\"flutter-candies\"></a>\n\n文档语言: [English](README.md) | 中文简体\n\n强大的官方 Image 扩展组件, 支持加载以及失败显示，缓存网络图片，缩放拖拽图片，图片浏览(微信掘金效果)，滑动退出页面(微信掘金效果)，编辑图片(裁剪旋转翻转)，保存，绘制自定义效果等功能\n\n[Web demo for ExtendedImage](https://fluttercandies.github.io/extended_image/)\n\n* [Flutter 什么功能都有的Image](https://juejin.cn/post/6844903794656952328)\n* [Flutter 可以缩放拖拽的图片](https://juejin.cn/post/6844903814324027400)\n* [Flutter 仿掘金微信图片滑动退出页面效果](https://juejin.cn/post/6844903860163575815)\n* [Flutter 图片裁剪旋转翻转编辑器](https://juejin.cn/post/6844903939670802446)\n* [Flutter 图片全家桶](https://juejin.cn/post/6844904122571816968)\n* [Flutter 什么，微信现在才支持实况图！？](https://juejin.cn/post/7418391732162854927)\n\nExtendedImage 是官方 Image 的扩展三方库，主要扩展功能如下:\n\n| 功能                                           | ExtendedImage                                            | Flutter 官方 Image                 |\n| ---------------------------------------------- | -------------------------------------------------------- | ---------------------------------- |\n| 缓存网络图片资源本地以及从本地加载网络缓存资源 | 支持                                                     | 不支持                             |\n| 压缩显示                                       | 支持，在官方的基础上，更多的灵活选项 compressionRatio 和 maxBytes 进行压缩显示 | 支持 cacheHeight,cacheWidth                            |\n| 自动释放图片资源                               | 支持                                                     | 需手动管理图片资源                 |\n| 缩放模式                                       | 支持                                                     | 不支持                               |\n| 编辑模式                                       | 支持                                                     | 不支持                             |\n| 拖动图片退出页面效果                           | 支持                                                     | 不支持                             |\n\n\n\n## 目录\n\n- [extended\\_image](#extended_image)\n  - [目录](#目录)\n  - [导入](#导入)\n  - [缓存网络图片](#缓存网络图片)\n    - [简单使用](#简单使用)\n    - [使用 ExtendedNetworkImageProvider](#使用-extendednetworkimageprovider)\n  - [加载状态](#加载状态)\n    - [例子](#例子)\n  - [缩放拖拽](#缩放拖拽)\n    - [双击图片动画](#双击图片动画)\n  - [图片编辑](#图片编辑)\n    - [裁剪框的宽高比](#裁剪框的宽高比)\n    - [裁剪图层 Painter](#裁剪图层-painter)\n    - [翻转、旋转、重新设置裁剪比例、撤消、重做、重置](#翻转旋转重新设置裁剪比例撤消重做重置)\n      - [翻转](#翻转)\n      - [旋转](#旋转)\n      - [重新设置裁剪比例](#重新设置裁剪比例)\n      - [撤消](#撤消)\n      - [重做](#重做)\n      - [重置](#重置)\n      - [历史](#历史)\n      - [配置更新](#配置更新)\n    - [裁剪数据](#裁剪数据)\n      - [使用 dart 库(稳定)](#使用-dart-库稳定)\n      - [使用原生库(快速)](#使用原生库快速)\n  - [图片浏览](#图片浏览)\n  - [滑动退出页面](#滑动退出页面)\n    - [首先开启滑动退出页面效果](#首先开启滑动退出页面效果)\n    - [把你的页面用 ExtendedImageSlidePage 包一下](#把你的页面用-extendedimageslidepage-包一下)\n    - [确保你的页面是透明背景的](#确保你的页面是透明背景的)\n    - [Push 一个透明的页面](#push-一个透明的页面)\n  - [Border BorderRadius Shape](#border-borderradius-shape)\n  - [清除缓存和保存](#清除缓存和保存)\n    - [清除缓存](#清除缓存)\n    - [保存网络图片](#保存网络图片)\n  - [显示裁剪图片](#显示裁剪图片)\n  - [绘制](#绘制)\n  - [Notch](#notch)\n  - [内存使用](#内存使用)\n  - [其他 APIs](#其他-apis)\n\n\n## 导入\n\n*  空安全\n\n``` yaml\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n  flutter: '>=2.0'\ndependencies:\n  extended_image: ^4.0.0\n```\n\n*  非空安全\n\n1.22.6 到 2.0, Flutter Api 有 breaking change，所以 1.22.6 以下的，请使用非空安全版本\n\n``` yaml\nenvironment:\n  sdk: '>=2.6.0 <2.12.0'\n  flutter: '>1.17.0 <=1.22.6'\ndependencies:\n  extended_image: ^3.0.0-non-null-safety\n```\n\n## 缓存网络图片\n\n### 简单使用\n\n你可以直接使用 ExtendedImage.network，这跟官方是一样。\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(400),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  border: Border.all(color: Colors.red, width: 1.0),\n  shape: boxShape,\n  borderRadius: BorderRadius.all(Radius.circular(30.0)),\n  //cancelToken: cancellationToken,\n)\n```\n\n### 使用 ExtendedNetworkImageProvider\n\n你也可以通过[ExtendedNetworkImageProvider](https://github.com/fluttercandies/extended_image_library/blob/master/lib/src/extended_network_image_provider.dart)，设置更多的网络请求的参数\n\n```dart\nExtendedNetworkImageProvider(\n  this.url, {\n  this.scale = 1.0,\n  this.headers,\n  this.cache: false,\n  this.retries = 3,\n  this.timeLimit,\n  this.timeRetry = const Duration(milliseconds: 100),\n  CancellationToken cancelToken,\n})  : assert(url != null),\n      assert(scale != null),\n      cancelToken = cancelToken ?? CancellationToken();\n```\n\n| 参数        | 描述                  | 默认                |\n| ----------- | --------------------- | ------------------- |\n| url         | 网络请求地址          | required            |\n| scale       | ImageInfo 中的 scale  | 1.0                 |\n| headers     | HttpClient 的 headers | -                   |\n| cache       | 是否缓存到本地        | false               |\n| retries     | 请求尝试次数          | 3                   |\n| timeLimit   | 请求超时              | -                   |\n| timeRetry   | 请求重试间隔          | milliseconds: 100   |\n| cancelToken | 用于取消请求的 Token  | CancellationToken() |\n\n当然你也可以继承任何的 ExtendedProvider,并且覆写 instantiateImageCodec 方法，这样你可以统一处理图片的元数据，比如进行压缩图片。\n\n## 加载状态\n\nExtended Image 一共有 3 种状态，分别是正在加载，完成，失败(loading,completed,failed)，你可以通过实现 loadStateChanged 回调来定义显示的效果\n\nloadStateChanged 不仅仅只在网络图片中可以使用, 如果你的图片很大，需要长时间加载，\n你可以把 enableLoadState 设置为了 true，这样也会有状态回调了，（默认只有网络图片,enableLoadState 为 true）\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/custom.gif)\n\n注意:\n\n- 如果你不想重写某个状态，那么请返回 null\n\n- 如果你想重写完成图片的 size 或者 sourceRect, 你可以通过使用 ExtendedRawImage 来完成\n\n- 如果你想增加一些新效果 (比如动画), 你可以重写并且使用 ExtendedImageState.completedWidget\n\n- ExtendedImageState.completedWidget 包含手势或者裁剪, 这样你不会丢失它们\n\n```dart\n/// custom load state widget if you want\n    final LoadStateChanged loadStateChanged;\n\nenum LoadState {\n  //loading\n  loading,\n  //completed\n  completed,\n  //failed\n  failed\n}\n\n  ///whether has loading or failed state\n  ///default is false\n  ///but network image is true\n  ///better to set it's true when your image is big and take some time to ready\n  final bool enableLoadState;\n```\n\nExtendedImageState 状态回调\n\n| 参数/方法                    | 描述                                                                                                   | 默认 |\n| ---------------------------- | ------------------------------------------------------------------------------------------------------ | ---- |\n| extendedImageInfo            | 图片的信息，包括底层 image 和 image 的大小                                                             | -    |\n| extendedImageLoadState       | 状态(loading,completed,failed)                                                                         | -    |\n| returnLoadStateChangedWidget | 如果这个为 true 的话，状态回调返回的 widget 将不会对(width/height/gesture/border/shape）等效果进行包装 | -    |\n| imageProvider                | 图片的 Provider                                                                                        | -    |\n| invertColors                 | 是否反转颜色                                                                                           | -    |\n| imageStreamKey               | 图片流的唯一键                                                                                         | -    |\n| reLoadImage()                | 如果图片加载失败，你可以通过调用这个方法来重新加载图片                                                 | -    |\n| completedWidget              | 返回图片完成的 Widget，它包含手势以及裁剪                                                              | -    |\n| loadingProgress              | 返回网络图片加载进度 (ImageChunkEvent )                                                                | -    |\n\n```dart\nabstract class ExtendedImageState {\n  void reLoadImage();\n  ImageInfo get extendedImageInfo;\n  LoadState get extendedImageLoadState;\n\n  ///return widget which from LoadStateChanged function  immediately\n  bool returnLoadStateChangedWidget;\n\n  ImageProvider get imageProvider;\n\n  bool get invertColors;\n\n  Object get imageStreamKey;\n\n  Widget get completedWidget;\n}\n```\n\n### 例子\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(600),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  loadStateChanged: (ExtendedImageState state) {\n    switch (state.extendedImageLoadState) {\n      case LoadState.loading:\n        _controller.reset();\n        return Image.asset(\n          \"assets/loading.gif\",\n          fit: BoxFit.fill,\n        );\n        break;\n      ///if you don't want override completed widget\n      ///please return null or state.completedWidget\n      //return null;\n      //return state.completedWidget;\n      case LoadState.completed:\n        _controller.forward();\n        return FadeTransition(\n          opacity: _controller,\n          child: ExtendedRawImage(\n            image: state.extendedImageInfo?.image,\n            width: ScreenUtil.instance.setWidth(600),\n            height: ScreenUtil.instance.setWidth(400),\n          ),\n        );\n        break;\n      case LoadState.failed:\n        _controller.reset();\n        return GestureDetector(\n          child: Stack(\n            fit: StackFit.expand,\n            children: <Widget>[\n              Image.asset(\n                \"assets/failed.jpg\",\n                fit: BoxFit.fill,\n              ),\n              Positioned(\n                bottom: 0.0,\n                left: 0.0,\n                right: 0.0,\n                child: Text(\n                  \"load image failed, click to reload\",\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n          onTap: () {\n            state.reLoadImage();\n          },\n        );\n        break;\n    }\n  },\n)\n```\n\n## 缩放拖拽\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/zoom.gif)\n\nExtendedImage\n\n| 参数                     | 描述                                                                  | 默认 |\n| ------------------------ | --------------------------------------------------------------------- | ---- |\n| mode                     | 图片模式，默认/手势/编辑 (none, gesture, editor)                      | none |\n| initGestureConfigHandler | 手势配置的回调(图片加载完成时).你可以根据图片的信息比如宽高，来初始化 | -    |\n| onDoubleTap              | 支持手势的时候，双击回调                                              | -    |\n| extendedImageGestureKey  | 你可以通过这个key来手动控制缩放和平移                                 | -    |\n\n\nGestureConfig\n\n| 参数              | 描述                                                                                                         | 默认值                       |\n| ----------------- | ------------------------------------------------------------------------------------------------------------ | ---------------------------- |\n| minScale          | 缩放最小值                                                                                                   | 0.8                          |\n| animationMinScale | 缩放动画最小值，当缩放结束时回到 minScale 值                                                                 | minScale \\* 0.8              |\n| maxScale          | 缩放最大值                                                                                                   | 5.0                          |\n| animationMaxScale | 缩放动画最大值，当缩放结束时回到 maxScale 值                                                                 | maxScale \\* 1.2              |\n| speed             | 缩放拖拽速度，与用户操作成正比                                                                               | 1.0                          |\n| inertialSpeed     | 拖拽惯性速度，与惯性速度成正比                                                                               | 100                          |\n| cacheGesture      | 是否缓存手势状态，可用于 ExtendedImageGesturePageView 中保留状态，**使用 clearGestureDetailsCache 方法清除** | false                        |\n| inPageView        | 是否使用 ExtendedImageGesturePageView 展示图片                                                               | false                        |\n| initialAlignment  | 当图片的初始化缩放大于 1.0 的时候，根据相对位置初始化图片                                                    | InitialAlignment.center      |\n| hitTestBehavior   | 设置hittest的行为                                                                                            | HitTestBehavior.deferToChild |\n\n```dart\nExtendedImage.network(\n  imageTestUrl,\n  fit: BoxFit.contain,\n  //enableLoadState: false,\n  mode: ExtendedImageMode.gesture,\n  initGestureConfigHandler: (state) {\n    return GestureConfig(\n        minScale: 0.9,\n        animationMinScale: 0.7,\n        maxScale: 3.0,\n        animationMaxScale: 3.5,\n        speed: 1.0,\n        inertialSpeed: 100.0,\n        initialScale: 1.0,\n        inPageView: false,\n        initialAlignment: InitialAlignment.center,\n        );\n  },\n)\n```\n\n### 双击图片动画\n\n支持双击动画，具体双击图片什么样子的效果，可以自定义\n\n```dart\nonDoubleTap: (ExtendedImageGestureState state) {\n  ///you can use define pointerDownPosition as you can,\n  ///default value is double tap pointer down position.\n  var pointerDownPosition = state.pointerDownPosition;\n  double begin = state.gestureDetails.totalScale;\n  double end;\n\n  //remove old\n  _animation?.removeListener(animationListener);\n\n  //stop pre\n  _animationController.stop();\n\n  //reset to use\n  _animationController.reset();\n\n  if (begin == doubleTapScales[0]) {\n    end = doubleTapScales[1];\n  } else {\n    end = doubleTapScales[0];\n  }\n\n  animationListener = () {\n    //print(_animation.value);\n    state.handleDoubleTap(\n        scale: _animation.value,\n        doubleTapPosition: pointerDownPosition);\n  };\n  _animation = _animationController\n      .drive(Tween<double>(begin: begin, end: end));\n\n  _animation.addListener(animationListener);\n\n  _animationController.forward();\n},\n```\n\n## 图片编辑\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/editor.gif)\n\n```dart\n    ExtendedImage.network(\n      imageTestUrl,\n      fit: BoxFit.contain,\n      mode: ExtendedImageMode.editor,\n      extendedImageEditorKey: editorKey,\n      initEditorConfigHandler: (state) {\n        return EditorConfig(\n            maxScale: 8.0,\n            cropRectPadding: EdgeInsets.all(20.0),\n            hitTestSize: 20.0,\n            cropAspectRatio: _aspectRatio.aspectRatio);\n      },\n    );\n```\n\nExtendedImage\n\n| 参数                     | 描述                                                                    | 默认 |\n| ------------------------ | ----------------------------------------------------------------------- | ---- |\n| mode                     | 图片模式，默认/手势/编辑 (none, gesture, editor)                        | none |\n| initGestureConfigHandler | 编辑器配置的回调(图片加载完成时).你可以根据图片的信息比如宽高，来初始化 | -    |\n| extendedImageEditorKey   | key of ExtendedImageEditorState 用于裁剪旋转翻转                        | -    |\n\nEditorConfig\n\n| 参数                   | 描述                                                                               | 默认                                                         |\n| ---------------------- | ---------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n| maxScale               | 最大的缩放倍数                                                                     | 5.0                                                          |\n| cropRectPadding        | 裁剪框跟图片 layout 区域之间的距离。最好是保持一定距离，不然裁剪框边界很难进行拖拽 | EdgeInsets.all(20.0)                                         |\n| cornerSize             | 裁剪框四角图形的大小                                                               | Size(30.0, 5.0)                                              |\n| cornerColor            | 裁剪框四角图形的颜色                                                               | primaryColor                                                 |\n| lineColor              | 裁剪框线的颜色                                                                     | scaffoldBackgroundColor.withOpacity(0.7)                     |\n| lineHeight             | 裁剪框线的高度                                                                     | 0.6                                                          |\n| editorMaskColorHandler | 蒙层的颜色回调，你可以根据是否手指按下来设置不同的蒙层颜色                         | scaffoldBackgroundColor.withOpacity(pointerDown ? 0.4 : 0.8) |\n| hitTestSize            | 裁剪框四角以及边线能够拖拽的区域的大小                                             | 20.0                                                         |\n| animationDuration      | 当裁剪框拖拽变化结束之后，自动适应到中间的动画的时长                               | Duration(milliseconds: 200)                                  |\n| tickerDuration         | 当裁剪框拖拽变化结束之后，多少时间才触发自动适应到中间的动画                       | Duration(milliseconds: 400)                                  |\n| cropAspectRatio        | 裁剪框的宽高比                                                                     | null(无宽高比)                                               |\n| initialCropAspectRatio | 初始化的裁剪框的宽高比                                                             | null(custom: 填充满图片原始宽高比)                           |\n| initCropRectType       | 剪切框的初始化类型(根据图片初始化区域或者图片的 layout 区域)                       | imageRect                                                    |\n| hitTestBehavior        | 设置hittest的行为                                                                  | HitTestBehavior.deferToChild                                 |\n| controller        | 提供旋转,翻转,撤销,重做,重置, 重新设置裁剪比例等操作              | null                                 |\n\n\n### 裁剪框的宽高比\n\n这是一个 double 类型，你可以自定义裁剪框的宽高比。\n如果为 null，那就没有宽高比限制。\n如果小于等于 0，宽高比等于图片的宽高比。\n下面是一些定义好了的宽高比\n\n```dart\nclass CropAspectRatios {\n  /// no aspect ratio for crop\n  static const double custom = null;\n\n  /// the same as aspect ratio of image\n  /// [cropAspectRatio] is not more than 0.0, it's original\n  static const double original = 0.0;\n\n  /// ratio of width and height is 1 : 1\n  static const double ratio1_1 = 1.0;\n\n  /// ratio of width and height is 3 : 4\n  static const double ratio3_4 = 3.0 / 4.0;\n\n  /// ratio of width and height is 4 : 3\n  static const double ratio4_3 = 4.0 / 3.0;\n\n  /// ratio of width and height is 9 : 16\n  static const double ratio9_16 = 9.0 / 16.0;\n\n  /// ratio of width and height is 16 : 9\n  static const double ratio16_9 = 16.0 / 9.0;\n}\n```\n\n### 裁剪图层 Painter\n\n你现在可以通过覆写 [EditorConfig.editorCropLayerPainter] 里面的方法来自定裁剪图层.\n\n```dart\nclass EditorCropLayerPainter {\n  const EditorCropLayerPainter();\n  void paint(\n    Canvas canvas,\n    Size size,\n    ExtendedImageCropLayerPainter painter,\n    Rect rect,\n  ) {\n    // Draw the mask layer\n    paintMask(canvas, rect, painter);\n\n    // Draw the grid lines\n    paintLines(canvas, size, painter);\n\n    // Draw the corners of the crop area\n    paintCorners(canvas, size, painter);\n  }\n\n  /// draw crop layer corners\n  void paintCorners(\n      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {\n  }\n\n  /// draw crop layer lines\n  void paintMask(\n      Canvas canvas, Rect rect, ExtendedImageCropLayerPainter painter) {\n  }\n  \n\n  /// draw crop layer lines\n  void paintLines(\n      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {\n  } \n}\n```\n\n### 翻转、旋转、重新设置裁剪比例、撤消、重做、重置\n\n#### 翻转\n\n```dart\n   _editorController.flip();\n\n  void flip({\n    bool animation = false,\n    Duration duration = const Duration(milliseconds: 200),\n  })\n```\n\n\n\n #### 旋转\n\n```dart\n   _editorController.rotate();\n\n  void rotate({\n    double degrees = 90,\n    bool animation = false,\n    Duration duration = const Duration(milliseconds: 200),\n    bool rotateCropRect = true,\n  })\n```\n\n\n\n #### 重新设置裁剪比例\n\n```dart\n   _editorController.updateCropAspectRatio(CropAspectRatios.ratio4_3);\n```\n\n\n\n #### 撤消\n\n```dart\n  bool canUndo = _editorController.canUndo;\n   _editorController.undo();\n\n```\n\n #### 重做\n\n```dart\n  bool canRedo = _editorController.canRedo;\n   _editorController.redo();\n```\n\n#### 重置\n\n```dart\n   _editorController.reset();\n```\n\n#### 历史\n\n```dart\n   _editorController.currentIndex;\n   _editorController.history;\n   _editorController.saveCurrentState();   \n```\n\n#### 配置更新\n\n```dart\n   _editorController.updateConfig(EditorConfig config);\n   _editorController.config;\n```\n\n### 裁剪数据\n\n#### 使用 dart 库(稳定)\n\n- 添加 [Image](https://github.com/brendan-duncan/image) 库到 pubspec.yaml, 它是用来裁剪/旋转/翻转图片数据的\n\n```yaml\ndependencies:\n  image: any\n```\n\n- 从 ExtendedImageEditorState 中获取裁剪区域以及图片数据\n\n```dart\n  ///crop rect base on raw image\n  final Rect cropRect = state.getCropRect();\n\n  var data = state.rawImageData;\n```\n\n- 将 flutter 的图片数据转换为 image 库的数据\n\n```dart\n  /// it costs much time and blocks ui.\n  //Image src = decodeImage(data);\n\n  /// it will not block ui with using isolate.\n  //Image src = await compute(decodeImage, data);\n  //Image src = await isolateDecodeImage(data);\n  final lb = await loadBalancer;\n  Image src = await lb.run<Image, List<int>>(decodeImage, data);\n```\n\n- 翻转，旋转，裁剪数据\n\n```dart\n  //相机拍照的图片带有旋转，处理之前需要去掉\n  image = bakeOrientation(image);\n  if (editAction.hasRotateDegrees) {\n    image = copyRotate(image, angle: editAction.rotateDegrees);\n  }\n\n  if (editAction.flipY) {\n    image = flip(image, direction: FlipDirection.horizontal);\n  }\n\n  if (editAction.needCrop) {\n    image = copyCrop(\n      image,\n      x: cropRect.left.toInt(),\n      y: cropRect.top.toInt(),\n      width: cropRect.width.toInt(),\n      height: cropRect.height.toInt(),\n    );\n  }\n```\n\n- 将数据转为为图片的元数据\n\n获取到的将是图片的元数据，你可以使用它来保存或者其他的一些用途\n\n```dart\n  /// you can encode your image\n  ///\n  /// it costs much time and blocks ui.\n  //var fileData = encodeJpg(src);\n\n  /// it will not block ui with using isolate.\n  //var fileData = await compute(encodeJpg, src);\n  //var fileData = await isolateEncodeImage(src);\n  var fileData = await lb.run<List<int>, Image>(encodeJpg, src);\n```\n\n#### 使用原生库(快速)\n\n- 添加 [ImageEditor](https://github.com/fluttercandies/flutter_image_editor) 库到 pubspec.yaml, 它是用来裁剪/旋转/翻转图片数据的。\n\n```yaml\ndependencies:\n  image_editor: any\n```\n\n- 从 ExtendedImageEditorState 中获取裁剪区域以及图片数据\n\n```dart\n  ///crop rect base on raw image\n  final Rect cropRect = state.getCropRect();\n\n  final img = state.rawImageData;\n```\n\n- 准备裁剪选项\n\n```dart\n  if (action.hasRotateDegrees) {\n    final int rotateDegrees = action.rotateDegrees.toInt();\n    option.addOption(RotateOption(rotateDegrees));\n  }\n  if (action.flipY) {\n    option.addOption(const FlipOption(horizontal: true, vertical: false));\n  }\n\n  if (action.needCrop) {\n    Rect cropRect = imageEditorController.getCropRect()!;\n    option.addOption(ClipOption.fromRect(cropRect));\n  }\n```\n\n- 使用 editImage 方法进行裁剪\n\n获取到的将是图片的元数据，你可以使用它来保存或者其他的一些用途\n\n```dart\n  final result = await ImageEditor.editImage(\n    image: img,\n    imageEditorOption: option,\n  );\n```\n\n[more detail](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/utils/crop_editor_helper.dart)\n\n## 图片浏览\n\n支持跟微信/掘金一样的图片查看效果\n\nExtendedImageGesturePageView 跟官方 PageView 一样的使用，不同的是，它避免了跟缩放拖拽手势冲突\n\n支持缓存手势的状态，就是说你缩放了图片，然后下一个，再回到之前的图片，图片的缩放状态可以保存，\n如果你缓存了手势，记住在合适的时候使用 clearGestureDetailsCache()清除掉，比如页面销毁的时候\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/photo_view.gif)\n\nExtendedImageGesturePageView\n\n| parameter   | description                                                              | default |\n| ----------- | ------------------------------------------------------------------------ | ------- |\n| canMovePage | 是否滑动页面.有些场景如果 Scale 大于 1.0，并不想滑动页面，可以返回 false | true    |\n\nGestureConfig\n\n| 参数         | 描述                                                                                                     | 默认  |\n| ------------ | -------------------------------------------------------------------------------------------------------- | ----- |\n| cacheGesture | 是否缓存手势状态，可用于 ExtendedImageGesturePageView 中保留状态，使用 clearGestureDetailsCache 方法清除 | false |\n| inPageView   | 是否使用 ExtendedImageGesturePageView 展示图片                                                           | false |\n\n```dart\nExtendedImageGesturePageView.builder(\n  itemBuilder: (BuildContext context, int index) {\n    var item = widget.pics[index].picUrl;\n    Widget image = ExtendedImage.network(\n      item,\n      fit: BoxFit.contain,\n      mode: ExtendedImageMode.gesture,\n      gestureConfig: GestureConfig(\n        inPageView: true, initialScale: 1.0,\n        //you can cache gesture state even though page view page change.\n        //remember call clearGestureDetailsCache() method at the right time.(for example,this page dispose)\n        cacheGesture: false\n      ),\n    );\n    image = Container(\n      child: image,\n      padding: EdgeInsets.all(5.0),\n    );\n    if (index == currentIndex) {\n      return Hero(\n        tag: item + index.toString(),\n        child: image,\n      );\n    } else {\n      return image;\n    }\n  },\n  itemCount: widget.pics.length,\n  onPageChanged: (int index) {\n    currentIndex = index;\n    rebuild.add(index);\n  },\n  controller: PageController(\n    initialPage: currentIndex,\n  ),\n  scrollDirection: Axis.horizontal,\n),\n```\n\n## 滑动退出页面\n\n支持微信掘金滑动退出页面的效果\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/slide.gif)\n\n### 首先开启滑动退出页面效果\n\nExtendedImage\n\n| parameter                 | description                                                                              | default |\n| ------------------------- | ---------------------------------------------------------------------------------------- | ------- |\n| enableSlideOutPage        | 是否开启滑动退出页面效果                                                                 | false   |\n| heroBuilderForSlidingPage | 滑动退出页面的 transform 必须作用在 Hero 上面，这样在退出页面的时候，Hero 动画才不会奇怪 | null    |\n\n### 把你的页面用 ExtendedImageSlidePage 包一下\n\n注意：onSlidingPage 回调，你可以使用它来设置滑动页面的时候,页面上其他元素的状态。但是注意别直接使用 setState 来刷新，因为这样会导致 ExtendedImage 的状态重置掉，你应该只通知需要刷新的 Widgets 进行刷新\n\n```dart\n    return ExtendedImageSlidePage(\n      child: result,\n      slideAxis: SlideAxis.both,\n      slideType: SlideType.onlyImage,\n      onSlidingPage: (state) {\n        ///you can change other widgets' state on page as you want\n        ///base on offset/isSliding etc\n        //var offset= state.offset;\n        var showSwiper = !state.isSliding;\n        if (showSwiper != _showSwiper) {\n          // do not setState directly here, the image state will change,\n          // you should only notify the widgets which are needed to change\n          // setState(() {\n          // _showSwiper = showSwiper;\n          // });\n\n          _showSwiper = showSwiper;\n          rebuildSwiper.add(_showSwiper);\n        }\n      },\n    );\n```\n\nExtendedImageGesturePage 的参数\n\n| parameter                  | description                                                             | default                           |\n| -------------------------- | ----------------------------------------------------------------------- | --------------------------------- |\n| child                      | 需要包裹的页面                                                          | -                                 |\n| slidePageBackgroundHandler | 在滑动页面的时候根据 Offset 自定义整个页面的背景色                      | defaultSlidePageBackgroundHandler |\n| slideScaleHandler          | 在滑动页面的时候根据 Offset 自定义整个页面的缩放值                      | defaultSlideScaleHandler          |\n| slideEndHandler            | 滑动页面结束的时候计算是否需要 pop 页面                                 | defaultSlideEndHandler            |\n| slideAxis                  | 滑动页面的方向（both,horizontal,vertical）,掘金是 vertical，微信是 Both | both                              |\n| resetPageDuration          | 滑动结束，如果不 pop 页面，整个页面回弹动画的时间                       | milliseconds: 500                 |\n| slideType                  | 滑动整个页面还是只是图片(wholePage/onlyImage)                           | SlideType.onlyImage               |\n| onSlidingPage              | 滑动页面的回调，你可以在这里改变页面上其他元素的状态                    | -                                 |\n| slideOffsetHandler         | 在滑动页面的时候自定义 Offset                                           | -                                 |\n\n下面是默认实现，你也可以根据你的喜好，来定义属于自己方式\n\n```dart\nColor defaultSlidePageBackgroundHandler(\n    {Offset offset, Size pageSize, Color color, SlideAxis pageGestureAxis}) {\n  double opacity = 0.0;\n  if (pageGestureAxis == SlideAxis.both) {\n    opacity = offset.distance /\n        (Offset(pageSize.width, pageSize.height).distance / 2.0);\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    opacity = offset.dx.abs() / (pageSize.width / 2.0);\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    opacity = offset.dy.abs() / (pageSize.height / 2.0);\n  }\n  return color.withOpacity(min(1.0, max(1.0 - opacity, 0.0)));\n}\n\nbool defaultSlideEndHandler(\n    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {\n  if (pageGestureAxis == SlideAxis.both) {\n    return offset.distance >\n        Offset(pageSize.width, pageSize.height).distance / 3.5;\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    return offset.dx.abs() > pageSize.width / 3.5;\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    return offset.dy.abs() > pageSize.height / 3.5;\n  }\n  return true;\n}\n\ndouble defaultSlideScaleHandler(\n    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {\n  double scale = 0.0;\n  if (pageGestureAxis == SlideAxis.both) {\n    scale = offset.distance / Offset(pageSize.width, pageSize.height).distance;\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    scale = offset.dx.abs() / (pageSize.width / 2.0);\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    scale = offset.dy.abs() / (pageSize.height / 2.0);\n  }\n  return max(1.0 - scale, 0.8);\n}\n```\n\n### 确保你的页面是透明背景的\n\n如果你设置 slideType =SlideType.onlyImage, 请确保的你页面是透明的，毕竟没法操控你页面上的颜色\n\n### Push 一个透明的页面\n\n这里我把官方的 MaterialPageRoute 和 CupertinoPageRoute 拷贝出来了，\n改为 TransparentMaterialPageRoute/TransparentCupertinoPageRoute，因为它们的 opaque 不能设置为 false\n\n```dart\n  Navigator.push(\n    context,\n    Platform.isAndroid\n        ? TransparentMaterialPageRoute(builder: (_) => page)\n        : TransparentCupertinoPageRoute(builder: (_) => page),\n  );\n```\n\n[滑动退出页面相关代码演示 1](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/crop_image.dart)\n\n[滑动退出页面相关代码演示 2](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/pic_swiper.dart)\n\n## Border BorderRadius Shape\n\nExtendedImage\n\n| 参数         | 描述                                               | 默认 |\n| ------------ | -------------------------------------------------- | ---- |\n| border       | 跟官方的含义一样，你可以通过它设置边框             | -    |\n| borderRadius | 跟官方的含义一样，你可以通过它设置圆角             |\n| shape        | 跟官方的含义一样，你可以通过它设置裁剪（矩形和圆） | -    |\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(400),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  border: Border.all(color: Colors.red, width: 1.0),\n  shape: boxShape,\n  borderRadius: BorderRadius.all(Radius.circular(30.0)),\n),\n```\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/image.gif)\n\n## 清除缓存和保存\n\n### 清除缓存\n\n清除本地缓存，可以调用 clearDiskCachedImages 方法\n\n```dart\n// Clear the disk cache directory then return if it succeed.\n///  <param name=\"duration\">timespan to compute whether file has expired or not</param>\nFuture<bool> clearDiskCachedImages({Duration duration})\n```\n\n根据某一个 url 清除缓存， 可以调用 clearDiskCachedImage 方法.\n\n```dart\n/// clear the disk cache image then return if it succeed.\n///  <param name=\"url\">clear specific one</param>\nFuture<bool> clearDiskCachedImage(String url) async {\n```\n\n根据 url 获取缓存图片文件\n\n```dart\nFuture<File> getCachedImageFile(String url) async {\n```\n\n清除内存缓存，可以调用 clearMemoryImageCache 方法\n\n```dart\n///clear all of image in memory\n clearMemoryImageCache();\n\n/// get ImageCache\n getMemoryImageCache() ;\n```\n\n### 保存网络图片\n\n这是一个例子，使用到[image_picker_saver](https://github.com/cnhefang/image_picker_saver)\n插件，ExtendedImage 做的只是提供网络图片的数据源\n\n```dart\n///save network image to photo\nFuture<bool> saveNetworkImageToPhoto(String url, {bool useCache: true}) async {\n  var data = await getNetworkImageData(url, useCache: useCache);\n  var filePath = await ImagePickerSaver.saveFile(fileData: data);\n  return filePath != null && filePath != \"\";\n}\n```\n\n## 显示裁剪图片\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/crop.gif)\n\n你可以通过\n[ExtendedRawImage](https://github.com/fluttercandies/extended_image/blob/master/lib/src/image/raw_image.dart)(可以在状态回调的时候使用),sourceRect 是你想要显示图片的哪一部分，这个在各个 app 里面应该是比较常见的操作\n\n```dart\nExtendedRawImage(\n  image: image,\n  width: num400,\n  height: num300,\n  fit: BoxFit.fill,\n  sourceRect: Rect.fromLTWH(\n      (image.width - width) / 2.0, 0.0, width, image.height.toDouble()),\n)\n```\n\n## 绘制\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/paint.gif)\n\n提供了 BeforePaintImage and AfterPaintImage 两个回调, 这样你就能绘制你想要的东西或者进图片进行 Clip。\n\nExtendedImage\n\n| parameter        | description    | default |\n| ---------------- | -------------- | ------- |\n| beforePaintImage | 在绘制图片之前 | -       |\n| afterPaintImage  | 在绘制图片之后 | -       |\n\n```dart\n  ExtendedImage.network(\n    url,\n    width: ScreenUtil.instance.setWidth(400),\n    height: ScreenUtil.instance.setWidth(400),\n    fit: BoxFit.fill,\n    cache: true,\n    beforePaintImage: (Canvas canvas, Rect rect, ui.Image image) {\n      if (paintType == PaintType.ClipHeart) {\n        if (!rect.isEmpty) {\n          canvas.save();\n          canvas.clipPath(clipheart(rect, canvas));\n        }\n      }\n      return false;\n    },\n    afterPaintImage: (Canvas canvas, Rect rect, ui.Image image) {\n      if (paintType == PaintType.ClipHeart) {\n        if (!rect.isEmpty) canvas.restore();\n      } else if (paintType == PaintType.PaintHeart) {\n        canvas.drawPath(\n            clipheart(rect, canvas),\n            Paint()\n              ..colorFilter =\n                  ColorFilter.mode(Color(0x55ea5504), BlendMode.srcIn)\n              ..isAntiAlias = false\n              ..filterQuality = FilterQuality.low);\n      }\n    },\n  );\n```\n\n在例子中可以看到把图片 Clip 成了一个桃心，你也可以根据你的要求，做出不同的 Clip\n[绘制例子](https://github.com/fluttercandies/extended_image/blob/master/example/lib/pages/simple/paint_image_demo.dart)\n[下拉刷新头当中，也使用了这个技巧](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/push_to_refresh_header.dart)\n\n## Notch\n\n设置图片初始化的 Insets，不会影响放大。\n\nExtendedImage\n\n| parameter    | description              | default         |\n| ------------ | ------------------------ | --------------- |\n| layoutInsets | 设置图片初始化时候的边距 | EdgeInsets.zero |\n\n```dart\n  ExtendedImage.network(\n    url,\n    fit: BoxFit.contain,\n    layoutInsets: MediaQuery.of(context).padding\n  );\n```\n\n## 内存使用\n\n现在你可以通过下面设置来减少图片内存的占用.\n\n* ExtendedResizeImage\n\n| parameter                                                | description                                                                   | default  |\n| -------------------------------------------------------- | ----------------------------------------------------------------------------- | -------- |\n| [ExtendedResizeImage.compressionRatio]                   | 图片压缩率，大于0小于1                                                        | null     |\n| [ExtendedResizeImage.maxBytes]                           | 图片的大小的最大值. 默认值为 50KB. 这是图片实际的的大小，而不是解码之后的大小 | 50 << 10 |\n| [ExtendedResizeImage.width]/[ExtendedResizeImage.height] | 宽和高用于decode和缓存. 跟官方的[ResizeImage]一致。                           | null     |\n\n```dart\n    ExtendedImage.network(\n      'imageUrl',  \n      compressionRatio: 0.1,\n      maxBytes: null,\n      cacheWidth: null,\n      cacheHeight: null,  \n    )\n\n    ExtendedImage(\n      image: ExtendedResizeImage(\n        ExtendedNetworkImageProvider(\n          'imageUrl',  \n        ),\n        compressionRatio: 0.1,\n        maxBytes: null,\n        width: null,\n        height: null,\n      ),\n    )\n```\n\n* clearMemoryCacheWhenDispose\n\n| parameter                   | description                                                                                                                                                    | default |\n| --------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| clearMemoryCacheWhenDispose | 在Flutter 2.0之后也许不会起作用, 因为没法在图片没有完成之前释放掉(https://github.com/fluttercandies/extended_image/issues/317).  现在只会释放已完成的图片资源. | false   |\n\n\n\n```dart\n   ExtendedImage.network(\n     'imageUrl',     \n     clearMemoryCacheWhenDispose: true,\n   )\n```\n\n* imageCacheName\n\n| parameter      | description                                                                               | default |\n| -------------- | ----------------------------------------------------------------------------------------- | ------- |\n| imageCacheName | 你可以指定一个 ImageCache 来缓存一些图片。这样你可以一起处理它们，不会影响其他的图片缓存. | null    |\n\n```dart\n   ExtendedImage.network(\n     'imageUrl',  \n     imageCacheName: 'MemoryUsage',\n   )\n     \n  /// clear when this page is disposed   \n  @override\n  void dispose() {\n    // clear ImageCache which named 'MemoryUsage'\n    clearMemoryImageCache(imageCacheName);\n    super.dispose();\n  }   \n```\n\n## 其他 APIs\n\nExtendedImage\n\n| 参数                        | 描述                                     | 默认  |\n| --------------------------- | ---------------------------------------- | ----- |\n| enableMemoryCache           | 是否缓存到内存                           | true  |\n| clearMemoryCacheIfFailed    | 如果图片加载失败，是否清掉内存缓存       | true  |\n| clearMemoryCacheWhenDispose | 如果图片从 tree 中移除，是否清掉内存缓存 | false |\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 44.1826171875,
          "content": "# extended_image\n\n[![pub package](https://img.shields.io/pub/v/extended_image.svg)](https://pub.dartlang.org/packages/extended_image) [![GitHub stars](https://img.shields.io/github/stars/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/stargazers) [![GitHub forks](https://img.shields.io/github/forks/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/network) [![GitHub license](https://img.shields.io/github/license/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/blob/master/LICENSE) [![GitHub issues](https://img.shields.io/github/issues/fluttercandies/extended_image)](https://github.com/fluttercandies/extended_image/issues) <a target=\"_blank\" href=\"https://jq.qq.com/?_wv=1027&k=5bcc0gy\"><img border=\"0\" src=\"https://pub.idqqimg.com/wpa/images/group.png\" alt=\"flutter-candies\" title=\"flutter-candies\"></a>\n\nLanguage: English| [中文简体](README-ZH.md)\n\nA powerful official extension library of images, which supports placeholder(loading)/ failed state, cache network, zoom pan image, photo view, slide-out page, editor (crop, rotate, flip), paint custom etc.\n\n[Web demo for ExtendedImage](https://fluttercandies.github.io/extended_image/)\n\nExtendedImage is an third-party library that extends the functionality of Flutter's Image component. The main extended features are as follows:\n\n| Feature                                                | ExtendedImage                                           |  Image            |\n| ------------------------------------------------------ | ------------------------------------------------------- | --------------------------------- |\n| Cache network images locally and load from cache        | Supported                                               | Not supported                     |\n| Compression display                                    | Supported, with additional options (compressionRatio and maxBytes)            | Supported, with cacheHeight, cacheWidth |\n| Automatic release of image resources                    | Supported                                               | Requires manual management        |\n| Scaling mode                                           | Supported                                               | Not supported                     |\n| Editing mode                                           | Supported                                               | Not supported                     |\n| Drag-to-dismiss effect for images in a page transition | Supported                                               | Not supported                     |\n\n\n## Table of contents\n\n- [extended\\_image](#extended_image)\n  - [Table of contents](#table-of-contents)\n  - [Import](#import)\n  - [Cache Network](#cache-network)\n    - [Simple use](#simple-use)\n    - [Use ExtendedNetworkImageProvider](#use-extendednetworkimageprovider)\n  - [Load State](#load-state)\n    - [demo code](#demo-code)\n  - [Zoom Pan](#zoom-pan)\n    - [double tap animation](#double-tap-animation)\n  - [Editor](#editor)\n    - [crop aspect ratio](#crop-aspect-ratio)\n    - [crop layer painter](#crop-layer-painter)\n    - [flip, rotate, cropAspectRatio, undo ,redo , reset](#flip-rotate-cropaspectratio-undo-redo--reset)\n      - [`ImageEditorController`](#imageeditorcontroller)\n      - [flip](#flip)\n      - [rotate](#rotate)\n      - [cropAspectRatio](#cropaspectratio)\n      - [undo](#undo)\n      - [redo](#redo)\n      - [reset](#reset)\n      - [history](#history)\n      - [update config](#update-config)\n    - [crop data](#crop-data)\n      - [dart library(stable)](#dart-librarystable)\n      - [native library(faster)](#native-libraryfaster)\n  - [Photo View](#photo-view)\n  - [Slide Out Page](#slide-out-page)\n    - [enable slide out page](#enable-slide-out-page)\n    - [include your page in ExtendedImageSlidePage](#include-your-page-in-extendedimageslidepage)\n    - [make sure your page background is transparent](#make-sure-your-page-background-is-transparent)\n    - [push with transparent page route](#push-with-transparent-page-route)\n  - [Border BorderRadius Shape](#border-borderradius-shape)\n  - [Clear Save](#clear-save)\n    - [clear](#clear)\n    - [save network](#save-network)\n  - [Show Crop Image](#show-crop-image)\n  - [Paint](#paint)\n  - [Notch](#notch)\n  - [MemoryUsage](#memoryusage)\n  - [Other APIs](#other-apis)\n\n## Import\n\n*  null-safety\n\n``` yaml\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n  flutter: '>=2.0'\ndependencies:\n  extended_image: ^4.0.0\n```\n\n*  non-null-safety\n\n1.22.6 to 2.0, Flutter Api has breaking change，please use non-null-safety if you under 1.22.6.\n\n``` yaml\nenvironment:\n  sdk: '>=2.6.0 <2.12.0'\n  flutter: '>1.17.0 <=1.22.6'\ndependencies:\n  extended_image: ^3.0.0-non-null-safety\n```\n\n## Cache Network\n\n### Simple use\n\nYou can use `ExtendedImage.network` as Image Widget\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(400),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  border: Border.all(color: Colors.red, width: 1.0),\n  shape: boxShape,\n  borderRadius: BorderRadius.all(Radius.circular(30.0)),\n  //cancelToken: cancellationToken,\n)\n```\n\n### Use ExtendedNetworkImageProvider\n\n[ExtendedNetworkImageProvider](https://github.com/fluttercandies/extended_image_library/blob/master/lib/src/extended_network_image_provider.dart)\n\n```dart\n   ExtendedNetworkImageProvider(\n      this.url, {\n      this.scale = 1.0,\n      this.headers,\n      this.cache: false,\n      this.retries = 3,\n      this.timeLimit,\n      this.timeRetry = const Duration(milliseconds: 100),\n      CancellationToken cancelToken,\n    })  : assert(url != null),\n          assert(scale != null),\n          cancelToken = cancelToken ?? CancellationToken();\n```\n\n| parameter   | description                                                                           | default             |\n| ----------- | ------------------------------------------------------------------------------------- | ------------------- |\n| url         | The URL from which the image will be fetched.                                         | required            |\n| scale       | The scale to place in the [ImageInfo] object of the image.                            | 1.0                 |\n| headers     | The HTTP headers that will be used with [HttpClient.get] to fetch image from network. | -                   |\n| cache       | whether cache image to local                                                          | false               |\n| retries     | the time to retry to request                                                          | 3                   |\n| timeLimit   | time limit to request image                                                           | -                   |\n| timeRetry   | the time duration to retry to request                                                 | milliseconds: 100   |\n| cancelToken | token to cancel network request                                                       | CancellationToken() |\n\nyou can create new provider and extends it with ExtendedProvider, and override instantiateImageCodec method.\nso that you can handle image raw data here (compress image).\n\n## Load State\n\nExtended Image provide 3 states(loading,completed,failed), you can define your state widget with\nloadStateChanged call back.\n\nloadStateChanged is not only for network, if your image need long time to load,\nyou can set enableLoadState(default value is true for network and others are false) to true\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/custom.gif)\n\nNotice:\n\n- if you don't want to override any state, please return null in this case\n\n- if you want to override size or sourceRect, you can override it with ExtendedRawImage at completed state\n\n- if you want to add something (like animation) at completed state, you can override it with ExtendedImageState.completedWidget\n\n- ExtendedImageState.completedWidget is include gesture or editor, so that you would't miss them\n\n```dart\n/// custom load state widget if you want\n    final LoadStateChanged loadStateChanged;\n\nenum LoadState {\n  //loading\n  loading,\n  //completed\n  completed,\n  //failed\n  failed\n}\n\n  ///whether has loading or failed state\n  ///default is false\n  ///but network image is true\n  ///better to set it's true when your image is big and take some time to ready\n  final bool enableLoadState;\n```\n\nExtendedImageState(LoadStateChanged call back)\n\n| parameter/method             | description                                                                                                                                   | default |\n| ---------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| extendedImageInfo            | image info                                                                                                                                    | -       |\n| extendedImageLoadState       | LoadState(loading,completed,failed)                                                                                                           | -       |\n| returnLoadStateChangedWidget | if this is true, return widget which from LoadStateChanged function immediately(width/height/gesture/border/shape etc, will not effect on it) | -       |\n| imageProvider                | ImageProvider                                                                                                                                 | -       |\n| invertColors                 | invertColors                                                                                                                                  | -       |\n| imageStreamKey               | key of image                                                                                                                                  | -       |\n| reLoadImage()                | if image load failed,you can reload image by call it                                                                                          | -       |\n| completedWidget              | return completed widget include gesture or editor                                                                                             | -       |\n| loadingProgress              | return the loading progress for network image (ImageChunkEvent )                                                                              | -       |\n\n```dart\nabstract class ExtendedImageState {\n  void reLoadImage();\n  ImageInfo get extendedImageInfo;\n  LoadState get extendedImageLoadState;\n\n  ///return widget which from LoadStateChanged function immediately\n  bool returnLoadStateChangedWidget;\n\n  ImageProvider get imageProvider;\n\n  bool get invertColors;\n\n  Object get imageStreamKey;\n\n  Widget get completedWidget;\n}\n```\n\n### demo code\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(600),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  loadStateChanged: (ExtendedImageState state) {\n    switch (state.extendedImageLoadState) {\n      case LoadState.loading:\n        _controller.reset();\n        return Image.asset(\n          \"assets/loading.gif\",\n          fit: BoxFit.fill,\n        );\n        break;\n\n      ///if you don't want override completed widget\n      ///please return null or state.completedWidget\n      //return null;\n      //return state.completedWidget;\n      case LoadState.completed:\n        _controller.forward();\n        return FadeTransition(\n          opacity: _controller,\n          child: ExtendedRawImage(\n            image: state.extendedImageInfo?.image,\n            width: ScreenUtil.instance.setWidth(600),\n            height: ScreenUtil.instance.setWidth(400),\n          ),\n        );\n        break;\n      case LoadState.failed:\n        _controller.reset();\n        return GestureDetector(\n          child: Stack(\n            fit: StackFit.expand,\n            children: <Widget>[\n              Image.asset(\n                \"assets/failed.jpg\",\n                fit: BoxFit.fill,\n              ),\n              Positioned(\n                bottom: 0.0,\n                left: 0.0,\n                right: 0.0,\n                child: Text(\n                  \"load image failed, click to reload\",\n                  textAlign: TextAlign.center,\n                ),\n              )\n            ],\n          ),\n          onTap: () {\n            state.reLoadImage();\n          },\n        );\n        break;\n    }\n  },\n)\n```\n\n## Zoom Pan\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/zoom.gif)\n\nExtendedImage\n\n| parameter                | description                                                                     | default |\n| ------------------------ | ------------------------------------------------------------------------------- | ------- |\n| mode                     | image mode (none, gesture, editor)                                              | none    |\n| initGestureConfigHandler | init GestureConfig when image is ready，for example, base on image width/height | -       |\n| onDoubleTap              | call back of double tap under ExtendedImageMode.gesture                         | -       |\n| extendedImageGestureKey  | you can handle zoom/pan by using this key manually                              | -       |\n\nGestureConfig\n\n| parameter         | description                                                                                                                                                          | default                      |\n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------- |\n| minScale          | min scale                                                                                                                                                            | 0.8                          |\n| animationMinScale | the min scale for zooming then animation back to minScale when scale end                                                                                             | minScale \\_ 0.8              |\n| maxScale          | max scale                                                                                                                                                            | 5.0                          |\n| animationMaxScale | the max scale for zooming then animation back to maxScale when scale end                                                                                             | maxScale \\_ 1.2              |\n| speed             | speed for zoom/pan                                                                                                                                                   | 1.0                          |\n| inertialSpeed     | inertial speed for zoom/pan                                                                                                                                          | 100                          |\n| cacheGesture      | save Gesture state (for example in ExtendedImageGesturePageView, gesture state will not change when scroll back),**remember clearGestureDetailsCache at right time** | false                        |\n| inPageView        | whether in ExtendedImageGesturePageView                                                                                                                              | false                        |\n| initialAlignment  | init image rect with alignment when initialScale > 1.0                                                                                                               | InitialAlignment.center      |\n| hitTestBehavior   | How to behave during hit tests                                                                                                                                       | HitTestBehavior.deferToChild |\n\n```dart\nExtendedImage.network(\n  imageTestUrl,\n  fit: BoxFit.contain,\n  //enableLoadState: false,\n  mode: ExtendedImageMode.gesture,\n  initGestureConfigHandler: (state) {\n    return GestureConfig(\n        minScale: 0.9,\n        animationMinScale: 0.7,\n        maxScale: 3.0,\n        animationMaxScale: 3.5,\n        speed: 1.0,\n        inertialSpeed: 100.0,\n        initialScale: 1.0,\n        inPageView: false,\n        initialAlignment: InitialAlignment.center,\n        );\n  },\n)\n```\n\n### double tap animation\n\n```dart\nonDoubleTap: (ExtendedImageGestureState state) {\n  ///you can use define pointerDownPosition as you can,\n  ///default value is double tap pointer down postion.\n  var pointerDownPosition = state.pointerDownPosition;\n  double begin = state.gestureDetails.totalScale;\n  double end;\n\n  //remove old\n  _animation?.removeListener(animationListener);\n\n  //stop pre\n  _animationController.stop();\n\n  //reset to use\n  _animationController.reset();\n\n  if (begin == doubleTapScales[0]) {\n    end = doubleTapScales[1];\n  } else {\n    end = doubleTapScales[0];\n  }\n\n  animationListener = () {\n    //print(_animation.value);\n    state.handleDoubleTap(\n        scale: _animation.value,\n        doubleTapPosition: pointerDownPosition);\n  };\n  _animation = _animationController\n      .drive(Tween<double>(begin: begin, end: end));\n\n  _animation.addListener(animationListener);\n\n  _animationController.forward();\n},\n```\n\n## Editor\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/editor.gif)\n\n```dart\n    ExtendedImage.network(\n      imageTestUrl,\n      fit: BoxFit.contain,\n      mode: ExtendedImageMode.editor,\n      initEditorConfigHandler: (state) {\n        return EditorConfig(\n            maxScale: 8.0,\n            cropRectPadding: EdgeInsets.all(20.0),\n            hitTestSize: 20.0,\n            cropAspectRatio: _aspectRatio.aspectRatio,\n        );\n      },\n    );\n```\n\nExtendedImage\n\n| parameter               | description                                                  | default |\n| ----------------------- | ------------------------------------------------------------ | ------- |\n| mode                    | image mode (none,gestrue,editor)                             | none    |\n| initEditorConfigHandler | init EditorConfig when image is ready.                       | -       |\n| extendedImageEditorKey  | key of ExtendedImageEditorState to flip/rotate/get crop rect | -       |\n\nEditorConfig\n\n| parameter              | description                                                        | default                                                      |\n| ---------------------- | ------------------------------------------------------------------ | ------------------------------------------------------------ |\n| maxScale               | max scale of zoom                                                  | 5.0                                                          |\n| cropRectPadding        | the padding between crop rect and image layout rect.               | EdgeInsets.all(20.0)                                         |\n| cornerSize             | size of corner shape  (DEPRECATED! Use cornerPainter)              | Size(30.0, 5.0)                                              |\n| cornerColor            | color of corner shape (DEPRECATED! Use cornerPainter)              | primaryColor                                                 |\n| lineColor              | color of crop line                                                 | scaffoldBackgroundColor.withOpacity(0.7)                     |\n| lineHeight             | height of crop line                                                | 0.6                                                          |\n| editorMaskColorHandler | call back of editor mask color base on pointerDown                 | scaffoldBackgroundColor.withOpacity(pointerDown ? 0.4 : 0.8) |\n| hitTestSize            | hit test region of corner and line                                 | 20.0                                                         |\n| animationDuration      | auto center animation duration                                     | Duration(milliseconds: 200)                                  |\n| tickerDuration         | duration to begin auto center animation after crop rect is changed | Duration(milliseconds: 400)                                  |\n| cropAspectRatio        | aspect ratio of crop rect                                          | null(custom)                                                 |\n| initialCropAspectRatio | initial aspect ratio of crop rect                                  | null(custom: initial crop rect will fill the entire image)   |\n| initCropRectType       | init crop rect base on initial image rect or image layout rect     | imageRect                                                    |\n| cornerPainter          | corner shape                                                       | ExtendedImageCropLayerPainterNinetyDegreesCorner()           |\n| hitTestBehavior        | How to behave during hit tests                                     | HitTestBehavior.deferToChild                                 |\n| controller        | providing functions like rotating, flipping, undoing, redoing and reset actions.                                    | null                                 |\n\n\n### crop aspect ratio\n\nit's a double value, so it's easy for you to define by yourself.\nfollowing are official values\n\n```dart\nclass CropAspectRatios {\n  /// no aspect ratio for crop\n  static const double custom = null;\n\n  /// the same as aspect ratio of image\n  /// [cropAspectRatio] is not more than 0.0, it's original\n  static const double original = 0.0;\n\n  /// ratio of width and height is 1 : 1\n  static const double ratio1_1 = 1.0;\n\n  /// ratio of width and height is 3 : 4\n  static const double ratio3_4 = 3.0 / 4.0;\n\n  /// ratio of width and height is 4 : 3\n  static const double ratio4_3 = 4.0 / 3.0;\n\n  /// ratio of width and height is 9 : 16\n  static const double ratio9_16 = 9.0 / 16.0;\n\n  /// ratio of width and height is 16 : 9\n  static const double ratio16_9 = 16.0 / 9.0;\n}\n```\n\n### crop layer painter\n\nyou can define your crop layer by override [EditorConfig.editorCropLayerPainter].\n\n```dart\nclass EditorCropLayerPainter {\n  const EditorCropLayerPainter();\n  void paint(\n    Canvas canvas,\n    Size size,\n    ExtendedImageCropLayerPainter painter,\n    Rect rect,\n  ) {\n    // Draw the mask layer\n    paintMask(canvas, rect, painter);\n\n    // Draw the grid lines\n    paintLines(canvas, size, painter);\n\n    // Draw the corners of the crop area\n    paintCorners(canvas, size, painter);\n  }\n\n  /// draw crop layer corners\n  void paintCorners(\n      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {\n  }\n\n  /// draw crop layer lines\n  void paintMask(\n      Canvas canvas, Rect rect, ExtendedImageCropLayerPainter painter) {\n  }\n  \n\n  /// draw crop layer lines\n  void paintLines(\n      Canvas canvas, Size size, ExtendedImageCropLayerPainter painter) {\n  } \n}\n```\n\n### flip, rotate, cropAspectRatio, undo ,redo , reset\n\n#### `ImageEditorController` \n\n```dart\nfinal ImageEditorController _editorController = ImageEditorController();\n\n    initEditorConfigHandler: (ExtendedImageState? state) {\n      return EditorConfig(\n        maxScale: 4.0,\n        cropRectPadding: const EdgeInsets.all(20.0),\n        hitTestSize: 20.0,\n        initCropRectType: InitCropRectType.imageRect,\n        cropAspectRatio: CropAspectRatios.ratio4_3,\n        controller: _editorController,\n      );\n    },\n```\n#### flip\n\n```dart\n   _editorController.flip();\n\n  void flip({\n    bool animation = false,\n    Duration duration = const Duration(milliseconds: 200),\n  })\n```\n\n\n\n #### rotate\n\n```dart\n   _editorController.rotate();\n\n  void rotate({\n    double degrees = 90,\n    bool animation = false,\n    Duration duration = const Duration(milliseconds: 200),\n    bool rotateCropRect = true,\n  })\n```\n\n\n\n #### cropAspectRatio\n\n```dart\n   _editorController.updateCropAspectRatio(CropAspectRatios.ratio4_3);\n```\n\n\n\n #### undo\n\n```dart\n  bool canUndo = _editorController.canUndo;\n   _editorController.undo();\n\n```\n\n #### redo\n\n```dart\n  bool canRedo = _editorController.canRedo;\n   _editorController.redo();\n```\n\n#### reset\n\n```dart\n   _editorController.reset();\n```\n\n\n#### history\n\n```dart\n   _editorController.currentIndex;\n   _editorController.history;\n   _editorController.saveCurrentState();\n```\n\n#### update config\n\n```dart\n   _editorController.updateConfig(EditorConfig config);\n   _editorController.config;\n```\n\n### crop data\n\n#### dart library(stable)\n\n- add [Image](https://github.com/brendan-duncan/image) library into your pubspec.yaml, it's used to crop/rotate/flip image data\n\n```yaml\ndependencies:\n  image: any\n```\n\n- get crop rect and raw image data from ExtendedImageEditorState\n\n```dart\n  ///crop rect base on raw image\n  final Rect cropRect = state.getCropRect();\n\n  var data = state.rawImageData;\n```\n\n- convert raw image data to image library data.\n\n```dart\n  /// it costs much time and blocks ui.\n  //Image src = decodeImage(data);\n\n  /// it will not block ui with using isolate.\n  //Image src = await compute(decodeImage, data);\n  //Image src = await isolateDecodeImage(data);\n  final lb = await loadBalancer;\n  Image src = await lb.run<Image, List<int>>(decodeImage, data);\n```\n\n- crop,flip,rotate data\n\n```dart\n  //clear orientation\n  image = bakeOrientation(image);\n  if (editAction.hasRotateDegrees) {\n    image = copyRotate(image, angle: editAction.rotateDegrees);\n  }\n\n  if (editAction.flipY) {\n    image = flip(image, direction: FlipDirection.horizontal);\n  }\n\n  if (editAction.needCrop) {\n    image = copyCrop(\n      image,\n      x: cropRect.left.toInt(),\n      y: cropRect.top.toInt(),\n      width: cropRect.width.toInt(),\n      height: cropRect.height.toInt(),\n    );\n  }\n```\n\n- convert to original image data\n\noutput is raw image data, you can use it to save or any other thing.\n\n```dart\n  /// you can encode your image\n  ///\n  /// it costs much time and blocks ui.\n  //var fileData = encodeJpg(src);\n\n  /// it will not block ui with using isolate.\n  //var fileData = await compute(encodeJpg, src);\n  //var fileData = await isolateEncodeImage(src);\n  var fileData = await lb.run<List<int>, Image>(encodeJpg, src);\n```\n\n#### native library(faster)\n\n- add [ImageEditor](https://github.com/fluttercandies/flutter_image_editor) library into your pubspec.yaml, it's used to crop/rotate/flip image data\n\n```yaml\ndependencies:\n  image_editor: any\n```\n\n- get crop rect and raw image data from ExtendedImageEditorState\n\n```dart\n  ///crop rect base on raw image\n  final Rect cropRect = state.getCropRect();\n\n  var data = state.rawImageData;\n```\n\n- prepare crop option\n\n```dart\n  if (action.hasRotateDegrees) {\n    final int rotateDegrees = action.rotateDegrees.toInt();\n    option.addOption(RotateOption(rotateDegrees));\n  }\n  if (action.flipY) {\n    option.addOption(const FlipOption(horizontal: true, vertical: false));\n  }\n\n  if (action.needCrop) {\n    Rect cropRect = imageEditorController.getCropRect()!;\n    option.addOption(ClipOption.fromRect(cropRect));\n  }\n```\n\n- crop with editImage\n\noutput is raw image data, you can use it to save or any other thing.\n\n```dart\n  final result = await ImageEditor.editImage(\n    image: img,\n    imageEditorOption: option,\n  );\n```\n\n[more detail](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/utils/crop_editor_helper.dart)\n\n## Photo View\n\nExtendedImageGesturePageView is the same as PageView and it's made for show zoom/pan image.\n\nif you have cache the gesture, remember call clearGestureDetailsCache() method at the right time.(for example,page view page is disposed)\n\n![img](https://github.com/fluttercandies/Flutter_Candies/blob/master/gif/extended_image/photo_view.gif)\n\nExtendedImageGesturePageView\n\n| parameter    | description              | default |\n| ------------ | ------------------------ | ------- |\n| cacheGesture | whether should move page | true    |\n\nGestureConfig\n\n| parameter    | description                                                                                                                                                      | default |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| cacheGesture | save Gesture state (for example in ExtendedImageGesturePageView, gesture state will not change when scroll back),remember clearGestureDetailsCache at right time | false   |\n| inPageView   | whether in ExtendedImageGesturePageView                                                                                                                          | false   |\n\n```dart\nExtendedImageGesturePageView.builder(\n  itemBuilder: (BuildContext context, int index) {\n    var item = widget.pics[index].picUrl;\n    Widget image = ExtendedImage.network(\n      item,\n      fit: BoxFit.contain,\n      mode: ExtendedImageMode.gesture,\n      gestureConfig: GestureConfig(\n        inPageView: true, initialScale: 1.0,\n        //you can cache gesture state even though page view page change.\n        //remember call clearGestureDetailsCache() method at the right time.(for example,this page dispose)\n        cacheGesture: false\n      ),\n    );\n    image = Container(\n      child: image,\n      padding: EdgeInsets.all(5.0),\n    );\n    if (index == currentIndex) {\n      return Hero(\n        tag: item + index.toString(),\n        child: image,\n      );\n    } else {\n      return image;\n    }\n  },\n  itemCount: widget.pics.length,\n  onPageChanged: (int index) {\n    currentIndex = index;\n    rebuild.add(index);\n  },\n  controller: PageController(\n    initialPage: currentIndex,\n  ),\n  scrollDirection: Axis.horizontal,\n),\n```\n\n## Slide Out Page\n\nExtended Image support to slide out page as WeChat.\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/slide.gif)\n\n### enable slide out page\n\nExtendedImage\n\n| parameter                 | description                                                                                                                                      | default |\n| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------ | ------- |\n| enableSlideOutPage        | whether enable slide out page                                                                                                                    | false   |\n| heroBuilderForSlidingPage | build Hero only for sliding page, the transform of sliding page must be working on Hero,so that Hero animation wouldn't be strange when pop page | null    |\n\n### include your page in ExtendedImageSlidePage\n\ntake care of onSlidingPage call back, you can update other widgets' state as you want.\nbut, do not setState directly here, image state will changed, you should only notify the widgets which are needed to change\n\n```dart\n    return ExtendedImageSlidePage(\n      child: result,\n      slideAxis: SlideAxis.both,\n      slideType: SlideType.onlyImage,\n      onSlidingPage: (state) {\n        ///you can change other widgets' state on page as you want\n        ///base on offset/isSliding etc\n        //var offset= state.offset;\n        var showSwiper = !state.isSliding;\n        if (showSwiper != _showSwiper) {\n          // do not setState directly here, the image state will change,\n          // you should only notify the widgets which are needed to change\n          // setState(() {\n          // _showSwiper = showSwiper;\n          // });\n\n          _showSwiper = showSwiper;\n          rebuildSwiper.add(_showSwiper);\n        }\n      },\n    );\n```\n\nExtendedImageGesturePage\n\n| parameter                  | description                                                                      | default                           |\n| -------------------------- | -------------------------------------------------------------------------------- | --------------------------------- |\n| child                      | The [child] contained by the ExtendedImageGesturePage.                           | -                                 |\n| slidePageBackgroundHandler | build background when slide page                                                 | defaultSlidePageBackgroundHandler |\n| slideScaleHandler          | customize scale of page when slide page                                          | defaultSlideScaleHandler          |\n| slideEndHandler            | call back of slide end,decide whether pop page                                   | defaultSlideEndHandler            |\n| slideAxis                  | axis of slide(both,horizontal,vertical)                                          | SlideAxis.both                    |\n| resetPageDuration          | reset page position when slide end(not pop page)                                 | milliseconds: 500                 |\n| slideType                  | slide whole page or only image                                                   | SlideType.onlyImage               |\n| onSlidingPage              | call back when it's sliding page, change other widgets state on page as you want | -                                 |\n| slideOffsetHandler         | customize offset when slide page                                                 | -                                 |\n\n```dart\nColor defaultSlidePageBackgroundHandler(\n    {Offset offset, Size pageSize, Color color, SlideAxis pageGestureAxis}) {\n  double opacity = 0.0;\n  if (pageGestureAxis == SlideAxis.both) {\n    opacity = offset.distance /\n        (Offset(pageSize.width, pageSize.height).distance / 2.0);\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    opacity = offset.dx.abs() / (pageSize.width / 2.0);\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    opacity = offset.dy.abs() / (pageSize.height / 2.0);\n  }\n  return color.withOpacity(min(1.0, max(1.0 - opacity, 0.0)));\n}\n\nbool defaultSlideEndHandler(\n    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {\n  if (pageGestureAxis == SlideAxis.both) {\n    return offset.distance >\n        Offset(pageSize.width, pageSize.height).distance / 3.5;\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    return offset.dx.abs() > pageSize.width / 3.5;\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    return offset.dy.abs() > pageSize.height / 3.5;\n  }\n  return true;\n}\n\ndouble defaultSlideScaleHandler(\n    {Offset offset, Size pageSize, SlideAxis pageGestureAxis}) {\n  double scale = 0.0;\n  if (pageGestureAxis == SlideAxis.both) {\n    scale = offset.distance / Offset(pageSize.width, pageSize.height).distance;\n  } else if (pageGestureAxis == SlideAxis.horizontal) {\n    scale = offset.dx.abs() / (pageSize.width / 2.0);\n  } else if (pageGestureAxis == SlideAxis.vertical) {\n    scale = offset.dy.abs() / (pageSize.height / 2.0);\n  }\n  return max(1.0 - scale, 0.8);\n}\n```\n\n### make sure your page background is transparent\n\nif you use ExtendedImageSlidePage and slideType =SlideType.onlyImage,\nmake sure your page background is transparent\n\n### push with transparent page route\n\nyou should push page with TransparentMaterialPageRoute/TransparentCupertinoPageRoute\n\n```dart\n  Navigator.push(\n    context,\n    Platform.isAndroid\n        ? TransparentMaterialPageRoute(builder: (_) => page)\n        : TransparentCupertinoPageRoute(builder: (_) => page),\n  );\n```\n\n[Slide Out Page Demo Code 1](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/crop_image.dart)\n\n[Slide Out Page Demo Code 2](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/pic_swiper.dart)\n\n## Border BorderRadius Shape\n\nExtendedImage\n\n| parameter    | description                                                                                                                                                             | default |\n| ------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| border       | BoxShape.circle and BoxShape.rectangle,If this is [BoxShape.circle] then [borderRadius] is ignored.                                                                     | -       |\n| borderRadius | If non-null, the corners of this box are rounded by this [BorderRadius].,Applies only to boxes with rectangular shapes; ignored if [shape] is not [BoxShape.rectangle]. | -       |\n| shape        | BoxShape.circle and BoxShape.rectangle,If this is [BoxShape.circle] then [borderRadius] is ignored.                                                                     | -       |\n\n```dart\nExtendedImage.network(\n  url,\n  width: ScreenUtil.instance.setWidth(400),\n  height: ScreenUtil.instance.setWidth(400),\n  fit: BoxFit.fill,\n  cache: true,\n  border: Border.all(color: Colors.red, width: 1.0),\n  shape: boxShape,\n  borderRadius: BorderRadius.all(Radius.circular(30.0)),\n),\n```\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/image.gif)\n\n## Clear Save\n\n### clear\n\nto clear disk cached , call clearDiskCachedImages method.\n\n```dart\n// Clear the disk cache directory then return if it succeed.\n///  <param name=\"duration\">timespan to compute whether file has expired or not</param>\nFuture<bool> clearDiskCachedImages({Duration duration})\n```\n\nto clear disk cached with specific url, call clearDiskCachedImage method.\n\n```dart\n/// clear the disk cache image then return if it succeed.\n///  <param name=\"url\">clear specific one</param>\nFuture<bool> clearDiskCachedImage(String url) async {\n```\n\nget the local cached image file\n\n```dart\nFuture<File> getCachedImageFile(String url) async {\n```\n\nto clear memory cache , call clearMemoryImageCache method.\n\n```dart\n///clear all of image in memory\n clearMemoryImageCache();\n\n/// get ImageCache\n getMemoryImageCache() ;\n```\n\n### save network\n\ncall saveNetworkImageToPhoto and save image with [image_picker_saver](https://github.com/cnhefang/image_picker_saver)\n\n```dart\n///save network image to photo\nFuture<bool> saveNetworkImageToPhoto(String url, {bool useCache: true}) async {\n  var data = await getNetworkImageData(url, useCache: useCache);\n  var filePath = await ImagePickerSaver.saveFile(fileData: data);\n  return filePath != null && filePath != \"\";\n}\n```\n\n## Show Crop Image\n\nget your raw image by [Load State](#Load State), and crop image by sourceRect.\n\n[ExtendedRawImage](https://github.com/fluttercandies/extended_image/blob/master/lib/src/image/raw_image.dart)\nsourceRect is which you want to show image rect.\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/crop.gif)\n\n```dart\nExtendedRawImage(\n  image: image,\n  width: num400,\n  height: num300,\n  fit: BoxFit.fill,\n  sourceRect: Rect.fromLTWH(\n      (image.width - width) / 2.0, 0.0, width, image.height.toDouble()),\n)\n```\n\n## Paint\n\nprovide BeforePaintImage and AfterPaintImage callback, you will have the chance to paint things you want.\n\n![img](https://raw.githubusercontent.com/fluttercandies/Flutter_Candies/master/gif/extended_image/paint.gif)\n\nExtendedImage\n\n| parameter        | description                                            | default |\n| ---------------- | ------------------------------------------------------ | ------- |\n| beforePaintImage | you can paint anything if you want before paint image. | -       |\n| afterPaintImage  | you can paint anything if you want after paint image.  | -       |\n\n```dart\n  ExtendedImage.network(\n    url,\n    width: ScreenUtil.instance.setWidth(400),\n    height: ScreenUtil.instance.setWidth(400),\n    fit: BoxFit.fill,\n    cache: true,\n    beforePaintImage: (Canvas canvas, Rect rect, ui.Image image) {\n      if (paintType == PaintType.ClipHeart) {\n        if (!rect.isEmpty) {\n          canvas.save();\n          canvas.clipPath(clipheart(rect, canvas));\n        }\n      }\n      return false;\n    },\n    afterPaintImage: (Canvas canvas, Rect rect, ui.Image image) {\n      if (paintType == PaintType.ClipHeart) {\n        if (!rect.isEmpty) canvas.restore();\n      } else if (paintType == PaintType.PaintHeart) {\n        canvas.drawPath(\n            clipheart(rect, canvas),\n            Paint()\n              ..colorFilter =\n                  ColorFilter.mode(Color(0x55ea5504), BlendMode.srcIn)\n              ..isAntiAlias = false\n              ..filterQuality = FilterQuality.low);\n      }\n    },\n  );\n```\n\nsee [paint image demo](https://github.com/fluttercandies/extended_image/blob/master/example/lib/pages/simple/paint_image_demo.dart)\nand [push to refresh header which is used in crop image demo](https://github.com/fluttercandies/extended_image/blob/master/example/lib/common/widget/push_to_refresh_header.dart)\n\n## Notch\n\nBy setting layoutInsets, you can ensure the image is positioned outside of obstructing elements such as\nthe phone notch or home indicator if displayed in full screen. This will still allow the image margin to\nshow underneath the notch if zoomed in. \n\nExtendedImage\n\n| parameter        | description                                       | default         |\n| ---------------- | ------------------------------------------------- | --------------- |\n| layoutInsets     | Amount to inset from the edge during image layout | EdgeInsets.zero |\n\n```dart\n  ExtendedImage.network(\n    url,\n    fit: BoxFit.contain,\n    layoutInsets: MediaQuery.of(context).padding\n  );\n```\n\n## MemoryUsage\n\nYou can reduce memory usage with following settings now.\n\n* ExtendedResizeImage\n\n| parameter                                                | description                                                  | default   |\n| -------------------------------------------------------- | ------------------------------------------------------------ | --------- |\n| [ExtendedResizeImage.compressionRatio]                   | The image`s size will resize to original * [compressionRatio].It's ExtendedResizeImage`s first pick.The compressionRatio`s range is from 0.0 (exclusive), to 1.0 (exclusive). | null      |\n| [ExtendedResizeImage.maxBytes]                           | [ExtendedResizeImage] will compress the image to a size that is smaller than [maxBytes]. The default size is 50KB. It's actual bytes of Image, not decode bytes | 50 << 10 |\n| [ExtendedResizeImage.width]/[ExtendedResizeImage.height] | The width/height the image should decode to and cache. It's same as [ResizeImage], | null      |\n\n```dart\n    ExtendedImage.network(\n      'imageUrl',  \n      compressionRatio: 0.1,\n      maxBytes: null,\n      cacheWidth: null,\n      cacheHeight: null,  \n    )\n\n    ExtendedImage(\n      image: ExtendedResizeImage(\n        ExtendedNetworkImageProvider(\n          'imageUrl',  \n        ),\n        compressionRatio: 0.1,\n        maxBytes: null,\n        width: null,\n        height: null,\n      ),\n    )\n```\n\n* clearMemoryCacheWhenDispose\n\n| parameter                                                | description                                                  | default |\n| -------------------------------------------------------- | ------------------------------------------------------------ | ------- |\n| clearMemoryCacheWhenDispose                              | It's not good enough after Flutter 2.0, it seems that we can't release memory usage if this image is not completed(https://github.com/fluttercandies/extended_image/issues/317). It will release memory usage only for completed image now.  | false   |\n\n```dart\n   ExtendedImage.network(\n     'imageUrl',     \n     clearMemoryCacheWhenDispose: true,\n   )\n```\n\n* imageCacheName\n\n| parameter      | description                                                  | default |\n| -------------- | ------------------------------------------------------------ | ------- |\n| imageCacheName | The name of [ImageCache], you can define custom [ImageCache] to store this image. In this way you can work with them without affecting other [ImageCache]| null    |\n\n```dart\n   ExtendedImage.network(\n     'imageUrl',  \n     imageCacheName: 'MemoryUsage',\n   )\n     \n  /// clear when this page is disposed   \n  @override\n  void dispose() {\n    // clear ImageCache which named 'MemoryUsage'\n    clearMemoryImageCache(imageCacheName);\n    super.dispose();\n  }   \n```\n\n## Other APIs\n\nExtendedImage\n\n| parameter                   | description                                                                                    | default |\n| --------------------------- | ---------------------------------------------------------------------------------------------- | ------- |\n| enableMemoryCache           | whether cache in PaintingBinding.instance.imageCache)                                          | true    |\n| clearMemoryCacheIfFailed    | when failed to load image, whether clear memory cache.if true, image will reload in next time. | true    |\n| clearMemoryCacheWhenDispose | when image is removed from the tree permanently, whether clear memory cache.                   | false   |\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 8.984375,
          "content": "# Specify analysis options.\n#\n# Until there are meta linter rules, each desired lint must be explicitly enabled.\n# See: https://github.com/dart-lang/linter/issues/288\n#\n# For a list of lints, see: http://dart-lang.github.io/linter/lints/\n# See the configuration guide for more\n# https://github.com/dart-lang/sdk/tree/master/pkg/analyzer#configuring-the-analyzer\n#\n# There are other similar analysis options files in the flutter repos,\n# which should be kept in sync with this file:\n#\n#   - analysis_options.yaml (this file)\n#   - packages/flutter/lib/analysis_options_user.yaml\n#   - https://github.com/flutter/plugins/blob/master/analysis_options.yaml\n#   - https://github.com/flutter/engine/blob/master/analysis_options.yaml\n#\n# This file contains the analysis options used by Flutter tools, such as IntelliJ,\n# Android Studio, and the `flutter analyze` command.\n\nanalyzer:\n  errors:\n    # treat missing required parameters as a warning (not a hint)\n    missing_required_param: warning\n    # treat missing returns as a warning (not a hint)\n    missing_return: warning\n    # allow having TODOs in the code\n    todo: ignore\n    # Ignore analyzer hints for updating pubspecs when using Future or\n    # Stream and not importing dart:async\n    # Please see https://github.com/flutter/flutter/pull/24528 for details.\n    # sdk_version_async_exported_from_core: ignore\n  exclude:\n    # the following two are relative to the stocks example and the flutter package respectively\n    # see https://github.com/dart-lang/sdk/issues/28463\n    #- \"lib/src/gesture_detector/*.dart\"\n\nlinter:\n  rules:\n    # these rules are documented on and in the same order as\n    # the Dart Lint rules page to make maintenance easier\n    # https://github.com/dart-lang/linter/blob/master/example/all.yaml\n    - always_declare_return_types\n    - always_put_control_body_on_new_line\n    # - always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219\n    - always_specify_types\n    - annotate_overrides\n    # - avoid_annotating_with_dynamic # conflicts with always_specify_types\n    # - avoid_as # required for implicit-casts: true\n    - avoid_bool_literals_in_conditional_expressions\n    # - avoid_catches_without_on_clauses # we do this commonly\n    # - avoid_catching_errors # we do this commonly\n    - avoid_classes_with_only_static_members\n    # - avoid_double_and_int_checks # only useful when targeting JS runtime\n    - avoid_empty_else\n    # - avoid_equals_and_hash_code_on_mutable_classes # not yet tested\n    - avoid_field_initializers_in_const_classes\n    - avoid_function_literals_in_foreach_calls\n    # - avoid_implementing_value_types # not yet tested\n    - avoid_init_to_null\n    # - avoid_js_rounded_ints # only useful when targeting JS runtime\n    - avoid_null_checks_in_equality_operators\n    # - avoid_positional_boolean_parameters # not yet tested\n    # - avoid_print # not yet tested\n    # - avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)\n    # - avoid_redundant_argument_values # not yet tested\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    # - avoid_returning_null # there are plenty of valid reasons to return null\n    # - avoid_returning_null_for_future # not yet tested\n    - avoid_returning_null_for_void\n    # - avoid_returning_this # there are plenty of valid reasons to return this\n    # - avoid_setters_without_getters # not yet tested\n    # - avoid_shadowing_type_parameters # not yet tested\n    - avoid_single_cascade_in_expression_statements\n    - avoid_slow_async_io\n    - avoid_types_as_parameter_names\n    # - avoid_types_on_closure_parameters # conflicts with always_specify_types\n    # - avoid_unnecessary_containers # not yet tested\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    # - avoid_web_libraries_in_flutter # not yet tested\n    - await_only_futures\n    - camel_case_extensions\n    - camel_case_types\n    - cancel_subscriptions\n    # - cascade_invocations # not yet tested\n    # - close_sinks # not reliable enough\n    # - comment_references # blocked on https://github.com/flutter/flutter/issues/20765\n    # - constant_identifier_names # needs an opt-out https://github.com/dart-lang/linter/issues/204\n    - control_flow_in_finally\n    # - curly_braces_in_flow_control_structures # not yet tested\n    # - diagnostic_describe_all_properties # not yet tested\n    - directives_ordering\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    # - file_names # not yet tested\n    - flutter_style_todos\n    - hash_and_equals\n    - implementation_imports\n    # - invariant_booleans # too many false positives: https://github.com/dart-lang/linter/issues/811\n    # - iterable_contains_unrelated_type\n    # - join_return_with_assignment # not yet tested\n    - library_names\n    - library_prefixes\n    # - lines_longer_than_80_chars # not yet tested\n    # - list_remove_unrelated_type\n    # - literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/sdk/issues/34181\n    # - missing_whitespace_between_adjacent_strings # not yet tested\n    - no_adjacent_strings_in_list\n    - no_duplicate_case_values\n    # - no_logic_in_create_state # not yet tested\n    # - no_runtimeType_toString # not yet tested\n    - non_constant_identifier_names\n    # - null_closures  # not yet tested\n    # - omit_local_variable_types # opposite of always_specify_types\n    # - one_member_abstracts # too many false positives\n    # - only_throw_errors # https://github.com/flutter/flutter/issues/5792\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    # - parameter_assignments # we do this commonly\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    # - prefer_asserts_with_message # not yet tested\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    # - prefer_constructors_over_static_methods # not yet tested\n    - prefer_contains\n    # - prefer_double_quotes # opposite of prefer_single_quotes\n    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods\n    - prefer_final_fields\n    - prefer_final_locals\n    - prefer_for_elements_to_map_fromIterable\n    - prefer_foreach\n    # - prefer_function_declarations_over_variables # not yet tested\n    - prefer_generic_function_type_aliases\n    - prefer_if_elements_to_conditional_expressions\n    - prefer_if_null_operators\n    - prefer_initializing_formals\n    - prefer_inlined_adds\n    # - prefer_int_literals # not yet tested\n    # - prefer_interpolation_to_compose_strings # not yet tested\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_is_not_operator\n    - prefer_iterable_whereType\n    # - prefer_mixin # https://github.com/dart-lang/language/issues/32\n    # - prefer_null_aware_operators # disable until NNBD, see https://github.com/flutter/flutter/pull/32711#issuecomment-492930932\n    # - prefer_relative_imports # not yet tested\n    - prefer_single_quotes\n    - prefer_spread_collections\n    - prefer_typing_uninitialized_variables\n    - prefer_void_to_null\n    # - provide_deprecation_message # not yet tested\n    # - public_member_api_docs # enabled on a case-by-case basis; see e.g. packages/analysis_options.yaml\n    - recursive_getters\n    - slash_for_doc_comments\n    # - sort_child_properties_last # not yet tested\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - test_types_in_equals\n    - throw_in_finally\n    # - type_annotate_public_apis # subset of always_specify_types\n    - type_init_formals\n    # - unawaited_futures # too many false positives\n    # - unnecessary_await_in_return # not yet tested\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    # - unnecessary_final # conflicts with prefer_final_locals\n    - unnecessary_getters_setters\n    # - unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_statements\n    - unnecessary_string_interpolations\n    - unnecessary_this\n    - unrelated_type_equality_checks\n    # - unsafe_html # not yet tested\n    - use_full_hex_values_for_flutter_colors\n    # - use_function_type_syntax_for_parameters # not yet tested\n    # - use_key_in_widget_constructors # not yet tested\n    - use_rethrow_when_possible\n    # - use_setters_to_change_properties # not yet tested\n    # - use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182\n    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review\n    - valid_regexps\n    - void_checks\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.6611328125,
          "content": "name: extended_image\ndescription: Official extension image, support placeholder(loading)/ failed state, cache network, zoom/pan, photo view, slide out page, editor(crop,rotate,flip), painting etc.\nversion: 9.1.0\nrepository: https://github.com/fluttercandies/extended_image\nissue_tracker: https://github.com/fluttercandies/extended_image/issues\ntopics:\n  - image\n  - cropper\n  - photo-view\n  - editor\n  - slide-out\n\nenvironment:\n  sdk: '>=2.18.0 <4.0.0'\n  flutter: '>=3.16.0'\n\ndependencies:\n  extended_image_library: ^4.0.1\n  flutter:\n    sdk: flutter\n  meta: ^1.7.0\n  vector_math: ^2.1.4\ndependency_overrides:\n  # extended_image_library:\n  #   path: ../extended_image_library\n\n"
        }
      ]
    }
  ]
}