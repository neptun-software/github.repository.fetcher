{
  "metadata": {
    "timestamp": 1736710528935,
    "page": 78,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pauldemarco/flutter_blue",
      "stars": 2402,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0810546875,
          "content": ".DS_Store\n.dart_tool/\n\n.packages\n.pub/\npubspec.lock\n\nbuild/\n\n.atom/\n.idea/\n.vscode/"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.30078125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: f53b32eb2317ba09137969999d130c24a6314997\n  channel: master\n\nproject_type: plugin\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 4.4462890625,
          "content": "## 0.8.0\n* Migrate the plugin to null safety.\n\n## 0.7.3\n* Fix Android project template files to be compatible with protobuf-lite.\n* Add experimental support for MacOS.\n\n## 0.7.2\n* Add `allowDuplicates` option to `startScan`.\n* Fix performance issue with GUID initializers.\n\n## 0.7.1+1\n* Fix for FlutterBlue constructor when running on emulator.\n* Return error when attempting to `discoverServices` while not connected.\n\n## 0.7.1\n* Fix incorrect value notification when write is performed.\n* Add `toString` to each bluetooth class.\n* Various other bug fixes.\n\n## 0.7.0\n* Support v2 android embedding.\n* Various bug and documentation fixes.\n\n## 0.6.3+1\n* Fix compilation issue with iOS.\n* Bump protobuf version to 1.0.0.\n\n## 0.6.3\n* Update project files for Android and iOS.\n* Remove dependency on protoc for iOS.\n\n## 0.6.2\n* Add `mtu` and `requestMtu` to BluetoothDevice.\n\n## 0.6.0+4\n* Fix duplicate characteristic notifications when connection lost.\n* Fix duplicate characteristic notifications when reconnecting.\n* Add minimum SDK version of 18 for the plugin.\n* Documentation updates.\n\n## 0.6.0\n* **Breaking change**. API refactoring with RxDart (see example).\n* Log a more detailed warning at build time about the previous AndroidX migration.\n* Ensure that all channel calls to the Dart side from the Java side are done on the UI thread.\n  This change allows Transactions to work with upcoming Engine restrictions, which require\n  channel calls be made on the UI thread. Note this is an Android only change,\n  the iOS implementation was not impacted.\n\n## 0.5.0\n* **Breaking change**. Migrate from the deprecated original Android Support\n  Library to AndroidX. This shouldn't result in any functional changes, but it\n  requires any Android apps using this plugin to [also\n  migrate](https://developer.android.com/jetpack/androidx/migrate) if they're\n  using the original support library.\n\n## 0.4.2+1\n* Upgrade Android Gradle plugin to 3.3.0.\n* Refresh iOS build files.\n\n## 0.4.2\n* Set the verbosity of log messages with `setLogLevel`.\n* Updated iOS and Android project files.\n* `autoConnect` now configurable for Android.\n* Various bug fixes.\n\n## 0.4.1\n* Fixed bug where setNotifyValue wasn't properly awaitable.\n* Various UI bug fixes to example app.\n* Removed unnecessary intl dependencies in example app.\n\n## 0.4.0\n* **Breaking change**. Manufacturer Data is now a `Map` of manufacturer ID's.\n* Service UUID's, service data, tx power level packets fixed in advertising data.\n* Example app updated to show advertising data.\n* Various other bug fixes.\n\n## 0.3.4\n* Updated to use the latest protobuf (^0.9.0+1).\n* Updated other dependencies.\n\n## 0.3.3\n* `scan` `withServices` to filter by service UUID's (iOS).\n* Error handled when trying to scan with adapter off (Android).\n\n## 0.3.2\n* Runtime permissions for Android.\n* `scan` `withServices` to filter by service UUID's (Android).\n* Scan mode can be specified (Android).\n* Now targets the latest android SDK.\n* Dart 2 compatibility.\n\n## 0.3.1\n* Now allows simultaneous notifications of characteristics.\n* Fixed bug on iOS that was returning `discoverServices` too early.\n\n## 0.3.0\n* iOS support added.\n* Bug fixed in example causing discoverServices to be called multiple times.\n* Various other bug fixes.\n\n## 0.2.4\n* **Breaking change**. Upgraded to Gradle 4.1 and Android Studio Gradle plugin\n  3.0.1. Older Flutter projects need to upgrade their Gradle setup as well in\n  order to use this version of the plugin. Instructions can be found\n  [here](https://github.com/flutter/flutter/wiki/Updating-Flutter-projects-to-Gradle-4.1-and-Android-Studio-Gradle-plugin-3.0.1).\n\n## 0.2.3\n* Bug fixes\n\n## 0.2.2\n* **Breaking changes**:\n* `startScan` renamed to `scan`.\n* `ScanResult` now returns a `BluetoothDevice`.\n* `connect` now takes a `BluetoothDevice` and returns Stream<BluetoothDeviceState>.\n* Added parameter `timeout` to `connect`.\n* Automatic disconnect on deviceConnection.cancel().\n\n## 0.2.1\n* **Breaking change**. Removed `stopScan` from API, use `scanSubscription.cancel()` instead.\n* Automatically stops scan when `startScan` subscription is canceled (thanks to @brianegan).\n* Added `timeout` parameter to `startScan`.\n* Updated example app to show new scan functionality.\n\n## 0.2.0\n\n* Added state and onStateChanged for BluetoothDevice.\n* Updated example to show new functionality.\n\n## 0.1.1\n\n* Fixed image for pub.dartlang.org.\n\n## 0.1.0\n\n* Characteristic notifications/indications.\n* Merged in Guid library, removed from pubspec.yaml.\n\n## 0.0.1 - September 1st, 2017\n\n* Initial Release.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.44140625,
          "content": "Copyright 2017 Paul DeMarco. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Buffalo PC Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.0732421875,
          "content": "[![pub package](https://img.shields.io/pub/v/flutter_blue.svg)](https://pub.dartlang.org/packages/flutter_blue)\n[![Chat](https://img.shields.io/discord/634853295160033301.svg?style=flat-square&colorB=758ED3)](https://discord.gg/Yk5Efra)\n\n<br>\n<p align=\"center\">\n<img alt=\"FlutterBlue\" src=\"https://github.com/pauldemarco/flutter_blue/blob/master/site/flutterblue.png?raw=true\" />\n</p>\n<br><br>\n\n## Introduction\n\nFlutterBlue is a bluetooth plugin for [Flutter](https://flutter.dev), a new app SDK to help developers build modern multi-platform apps.\n\n## Alpha version\n\nThis library is actively developed alongside production apps, and the API will evolve as we continue our way to version 1.0.\n\n**Please be fully prepared to deal with breaking changes.**\n**This package must be tested on a real device.**\n\nHaving trouble adapting to the latest API?   I'd love to hear your use-case, please contact me.\n\n## Cross-Platform Bluetooth LE\nFlutterBlue aims to offer the most from both platforms (iOS and Android).\n\nUsing the FlutterBlue instance, you can scan for and connect to nearby devices ([BluetoothDevice](#bluetoothdevice-api)).\nOnce connected to a device, the BluetoothDevice object can discover services ([BluetoothService](lib/src/bluetooth_service.dart)), characteristics ([BluetoothCharacteristic](lib/src/bluetooth_characteristic.dart)), and descriptors ([BluetoothDescriptor](lib/src/bluetooth_descriptor.dart)).\nThe BluetoothDevice object is then used to directly interact with characteristics and descriptors.\n\n## Usage\n### Obtain an instance\n```dart\nFlutterBlue flutterBlue = FlutterBlue.instance;\n```\n\n### Scan for devices\n```dart\n// Start scanning\nflutterBlue.startScan(timeout: Duration(seconds: 4));\n\n// Listen to scan results\nvar subscription = flutterBlue.scanResults.listen((results) {\n    // do something with scan results\n    for (ScanResult r in results) {\n        print('${r.device.name} found! rssi: ${r.rssi}');\n    }\n});\n\n// Stop scanning\nflutterBlue.stopScan();\n```\n\n### Connect to a device\n```dart\n// Connect to the device\nawait device.connect();\n\n// Disconnect from device\ndevice.disconnect();\n```\n\n### Discover services\n```dart\nList<BluetoothService> services = await device.discoverServices();\nservices.forEach((service) {\n    // do something with service\n});\n```\n\n### Read and write characteristics\n```dart\n// Reads all characteristics\nvar characteristics = service.characteristics;\nfor(BluetoothCharacteristic c in characteristics) {\n    List<int> value = await c.read();\n    print(value);\n}\n\n// Writes to a characteristic\nawait c.write([0x12, 0x34])\n```\n\n### Read and write descriptors\n```dart\n// Reads all descriptors\nvar descriptors = characteristic.descriptors;\nfor(BluetoothDescriptor d in descriptors) {\n    List<int> value = await d.read();\n    print(value);\n}\n\n// Writes to a descriptor\nawait d.write([0x12, 0x34])\n```\n\n### Set notifications and listen to changes\n```dart\nawait characteristic.setNotifyValue(true);\ncharacteristic.value.listen((value) {\n    // do something with new value\n});\n```\n\n### Read the MTU and request larger size\n```dart\nfinal mtu = await device.mtu.first;\nawait device.requestMtu(512);\n```\nNote that iOS will not allow requests of MTU size, and will always try to negotiate the highest possible MTU (iOS supports up to MTU size 185)\n\n## Getting Started\n### Change the minSdkVersion for Android\n\nFlutter_blue is compatible only from version 19 of Android SDK so you should change this in **android/app/build.gradle**:\n```dart\nAndroid {\n  defaultConfig {\n     minSdkVersion: 19\n```\n### Add permissions for Bluetooth\nWe need to add the permission to use Bluetooth and access location:\n\n#### **Android**\nIn the **android/app/src/main/AndroidManifest.xml** let’s add:\n\n```xml \n\t <uses-permission android:name=\"android.permission.BLUETOOTH\" />  \n\t <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />  \n\t <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>  \n <application\n```\n#### **IOS**\nIn the **ios/Runner/Info.plist** let’s add:\n\n```dart \n\t<dict>  \n\t    <key>NSBluetoothAlwaysUsageDescription</key>  \n\t    <string>Need BLE permission</string>  \n\t    <key>NSBluetoothPeripheralUsageDescription</key>  \n\t    <string>Need BLE permission</string>  \n\t    <key>NSLocationAlwaysAndWhenInUseUsageDescription</key>  \n\t    <string>Need Location permission</string>  \n\t    <key>NSLocationAlwaysUsageDescription</key>  \n\t    <string>Need Location permission</string>  \n\t    <key>NSLocationWhenInUseUsageDescription</key>  \n\t    <string>Need Location permission</string>\n```\n\nFor location permissions on iOS see more at: [https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services](https://developer.apple.com/documentation/corelocation/requesting_authorization_for_location_services)\n\n\n## Reference\n### FlutterBlue API\n|                  |      Android       |         iOS          |             Description            |\n| :--------------- | :----------------: | :------------------: |  :-------------------------------- |\n| scan             | :white_check_mark: |  :white_check_mark:  | Starts a scan for Bluetooth Low Energy devices. |\n| state            | :white_check_mark: |  :white_check_mark:  | Stream of state changes for the Bluetooth Adapter. |\n| isAvailable      | :white_check_mark: |  :white_check_mark:  | Checks whether the device supports Bluetooth. |\n| isOn             | :white_check_mark: |  :white_check_mark:  | Checks if Bluetooth functionality is turned on. |\n\n### BluetoothDevice API\n|                             |       Android        |         iOS          |             Description            |\n| :-------------------------- | :------------------: | :------------------: |  :-------------------------------- |\n| connect                     |  :white_check_mark:  |  :white_check_mark:  | Establishes a connection to the device. |\n| disconnect                  |  :white_check_mark:  |  :white_check_mark:  | Cancels an active or pending connection to the device. |\n| discoverServices            |  :white_check_mark:  |  :white_check_mark:  | Discovers services offered by the remote device as well as their characteristics and descriptors. |\n| services                    |  :white_check_mark:  |  :white_check_mark:  | Gets a list of services. Requires that discoverServices() has completed. |\n| state                       |  :white_check_mark:  |  :white_check_mark:  | Stream of state changes for the Bluetooth Device. |\n| mtu                         |  :white_check_mark:  |  :white_check_mark:  | Stream of mtu size changes. |\n| requestMtu                  |  :white_check_mark:  |                      | Request to change the MTU for the device. |\n\n### BluetoothCharacteristic API\n|                             |       Android        |         iOS          |             Description            |\n| :-------------------------- | :------------------: | :------------------: |  :-------------------------------- |\n| read                        |  :white_check_mark:  |  :white_check_mark:  | Retrieves the value of the characteristic.  |\n| write                       |  :white_check_mark:  |  :white_check_mark:  | Writes the value of the characteristic. |\n| setNotifyValue              |  :white_check_mark:  |  :white_check_mark:  | Sets notifications or indications on the characteristic. |\n| value                       |  :white_check_mark:  |  :white_check_mark:  | Stream of characteristic's value when changed. |\n\n### BluetoothDescriptor API\n|                             |       Android        |         iOS          |             Description            |\n| :-------------------------- | :------------------: | :------------------: |  :-------------------------------- |\n| read                        |  :white_check_mark:  |  :white_check_mark:  | Retrieves the value of the descriptor.  |\n| write                       |  :white_check_mark:  |  :white_check_mark:  | Writes the value of the descriptor. |\n\n## Troubleshooting\n### When I scan using a service UUID filter, it doesn't find any devices.\nMake sure the device is advertising which service UUID's it supports.  This is found in the advertisement\npacket as **UUID 16 bit complete list** or **UUID 128 bit complete list**.\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter_blue.iml",
          "type": "blob",
          "size": 0.9248046875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/lib\" isTestSource=\"false\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.idea\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/build\" />\n    </content>\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Dart SDK\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Flutter Plugins\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "macos",
          "type": "tree",
          "content": null
        },
        {
          "name": "protos",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.685546875,
          "content": "name: flutter_blue\ndescription:\n  Flutter plugin for connecting and communicating with Bluetooth Low Energy devices,\n  on Android and iOS\nversion: 0.8.0\nhomepage: https://github.com/pauldemarco/flutter_blue\n\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n  flutter: \">=1.12.13+hotfix.6\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  convert: ^3.0.0\n  protobuf: ^2.0.0\n  rxdart: ^0.26.0\n  collection: ^1.15.0\n  meta: ^1.3.0\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nflutter:\n  plugin:\n    platforms:\n      android:\n        package: com.pauldemarco.flutter_blue\n        pluginClass: FlutterBluePlugin\n      ios:\n        pluginClass: FlutterBluePlugin\n      macos:\n        pluginClass: FlutterBluePlugin\n"
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}