{
  "metadata": {
    "timestamp": 1736710574956,
    "page": 176,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "NearHuscarl/flutter_login",
      "stars": 1537,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.13671875,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n.last_build_id\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.classpath\n.project\n.settings/\n.vscode/\n\n# Flutter repo-specific\n/bin/cache/\n/bin/mingit/\n/dev/benchmarks/mega_gallery/\n/dev/bots/.recipe_deps\n/dev/bots/android_tools/\n/dev/docs/doc/\n/dev/docs/flutter.docs.zip\n/dev/docs/lib/\n/dev/docs/pubspec.yaml\n/dev/integration_tests/**/xcuserdata\n/dev/integration_tests/**/Pods\n/packages/flutter/coverage/\nversion\n\n# packages file containing multi-root paths\n.packages.generated\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\nflutter_*.png\nlinked_*.ds\nunlinked.ds\nunlinked_spec.ds\n/pubspec.lock\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n**/android/key.properties\n*.jks\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/.symlinks/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# macOS\n**/macos/Flutter/GeneratedPluginRegistrant.swift\n**/macos/Flutter/Flutter-Debug.xcconfig\n**/macos/Flutter/Flutter-Release.xcconfig\n**/macos/Flutter/Flutter-Profile.xcconfig\n\n# Coverage\ncoverage/\n\n# Symbols\napp.*.symbols\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n!/dev/ci/**/Gemfile.lock"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 2d2a1ffec95cc70a3218872a2cd3f8de4933c42f\n  channel: beta\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.087890625,
          "content": "## 5.0.0\nBreaking Changes:\n- [Android] Upgraded to Gradle 8. Due to a dependency update (intl_phone_number_input), the minimum Flutter version is changed to 3.16.\n\nFeatures:\n- Added keyboardDismissBehavior parameter to select the behaviour of the keyboard when scrolling.\n- Added initialIsoCode parameter to set the initial iso code for the widget [LoginUserType.intlPhone]. Defaults to ['US'] if not specified.\n- The card surfaceTintColor can now be set using cardTheme.surfaceTintColor.\n\nBugs fixed:\n- Navigate to login page after pressing sign up confirm button when loginAfterSignUp is disabled and additionalSignupData is not null.\n- Added context checks to prevent crashes when widget is not mounted anymore.\n\n## 4.2.1\n- Added dynamic prefix-icon on recover card based on user type. (thanks @lucaloiacono !)\n\n## 4.2.0\nFeatures:\n- Added validateUserImmediately property. Should email be validated after losing focus [true] or after form submissions. \n- Added confirmSignupRequired property. Additional option to decide in runtime if confirmation is required. \n- Added UserFormField tooltip. \n- Added LoginUserType Firstname, Lastname, Text, Intlphone and checkbox.\n\nBugs fixed:\n- Fix autofill \n- Fixed dispose() method must be called before super.dispose() \n- Fixed providerNeedsSignUpCallback not being called. \n- Provider Sign-up now also executes beforeAdditionalFieldsCallback() \n- LoginUserType.phone now returns TextInputType.number\n- Scrollbar not attached to scroll controller\n\n## 4.1.1\nBugs fixed:\n- Fixed an issue with keyboard unfocusing. (Thanks @otto-dev !)\n- Fixed an issue with checkboxFormField not updating value. (Thanks @Mojo1917 !)\n- Updated dependencies.\n\n## 4.1.0\nFeatures:\n* You can now select the keyboardType for the confirm Signup Code with [confirmSignupKeyboardType]. (Thanks @0ttik !)\n* Added a [headerWidget] that can be used to provide some text above the loginCard. (Thanks @cloudonlanapps !)\n* You can now perform checks between switching to additionalData (if provided) using [onSwitchToAdditionalFields] (Thanks @blanquartf !)\n\nBugs fixed:\n* Fixed termOfService.linkUrl. (Thanks @fotiDim !)\n\nOther improvements:\n* Migrated to lint and applied all suggested lints.\n* Updated dependencies.\n\n## 4.0.0\nBREAKING CHANGES:\nFlutter 3 or higher is required. All other dependencies are updated to match this.\n\n## 4.0.0-beta.1\nBREAKING CHANGES:\n* Upgraded font_awesome_flutter from v9 to v10\n* Changed from flutter_signin_button to sign_in_button. This changes the enum names.\n\n## 3.2.0\nFeatures:\n* It is now possible to enable scrolling instead of resizing the login card. You can enable this by setting the `scrollable` parameter to true.\n* The prefix icon of the user/email field now changes depending on the type.\n* Custom sign-in buttons using [flutter_signin_button](https://pub.dev/packages/flutter_signin_button) package is now integrated. See the example app for an example.\n* Add an animation to the termsOfService buttons.\n\n## 3.1.0\nFeatures:\n* Add children parameter to FlutterLogin which takes a list of widgets that can be added in the\nbackground of the Login view. For example: a custom banner or a custom logo.\n* Improved footer style\n\nBugs fixed:\n* The signup confirmation page is now also shown when additionalSignupData is not provided or loginAfterSignUp is disabled. \n* Back button of confirmSignUp page now returns Login or AdditionalSignUpData page depending on whether additionalSignupData has been provided or not.\n\n\n## 3.0.0\nFirst stable release of 3.0.0.\nPlease see the changelog entries of the beta versions for all changes.\nNew features include:\n* Additional signup fields!\n* Confirmation card for password recovery.\n* Confirmation card for user registration.\n\nThis release also fixes:\n* White space visible when animation is complete\n* Several other animation improvements\n\n## 3.0.0-beta.2\nBesides the existing loginProvider icons, you can now also add a LoginButton as provider widget.\nPlease check out [flutter_signin_button](https://pub.dev/packages/flutter_signin_button) for supported buttons.\n\nBREAKING CHANGES:\n* Provider has been updated to 6.0.1.\n* Instead of hideSignUpButton, you can now set onSignup parameter to null (or just leave it out) in\norder to hide the signup button.\n  \nFixed several other small bugs like color not being applied correctly to all widgets.\n\n## 3.0.0-beta.1\nYou can now add more signup-fields! Please keep in mind that this is a beta release and may still\ncontain bugs.\n\nOther features:\n* You can now use an ImageProvider instead of only an AssetImage. [#216](https://github.com/NearHuscarl/flutter_login/pull/216)\n\n## 2.2.1\nBug fixes\n* Fixes issue with switch auth button not calculating correct color. [#210](https://github.com/NearHuscarl/flutter_login/pull/210)\n\n## 2.2.0\nFeatures\n* Added possibility to disable custom page transformer. [#202](https://github.com/NearHuscarl/flutter_login/pull/202)\n* Added possibility to automatically navigate back to login page after successful recovery. [#207](https://github.com/NearHuscarl/flutter_login/pull/207)\n\nBug fixes\n* Fixed primary color not applying to input decoration. ([@SalahAdDin](https://github.com/SalahAdDin) in [#201](https://github.com/NearHuscarl/flutter_login/pull/201))\n* Fixed forgot password button not coloring. [#203](https://github.com/NearHuscarl/flutter_login/pull/203)\n* Fixed black text when night mode is enabled and no other theme is provided. [#206](https://github.com/NearHuscarl/flutter_login/pull/206)\n* Fixed routing issue in example app. [#204](https://github.com/NearHuscarl/flutter_login/pull/204)\n\n## 2.1.0\nFeatures\n* Added possibility to change switch authentication button color. [#195](https://github.com/NearHuscarl/flutter_login/pull/195)\n* Added possibility to change logo size. [#193](https://github.com/NearHuscarl/flutter_login/pull/193)\n* Added labels to LoginProviders. [#192](https://github.com/NearHuscarl/flutter_login/pull/192)\n* Added a bar with title/description above providers. Can be disabled using hideProvidersTitle. See [#181](https://github.com/NearHuscarl/flutter_login/pull/181)\n\nBug fixes\n* Fixed animation padding not filling screen. [#194](https://github.com/NearHuscarl/flutter_login/pull/194)\n\n## 2.0.0\nStable release of null-safety\n\nChanged\n* emailValidator is now userValidator\n\nFeatures\n* Add bottom padding to LoginTheme\n\nAlso fixed numerous other bugs.\n\n## 2.0.0-nullsafety.0\nMigrated to null-safety\n\n## 1.1.0\nFeatures (30/03/2021)\n* Possibility to hide the sign-up and forgot password button [#115](https://github.com/NearHuscarl/flutter_login/pull/115)\n* Possibility to provide flushbar title [#117](https://github.com/NearHuscarl/flutter_login/pull/117)\n* Support for auto-fill hints [#125](https://github.com/NearHuscarl/flutter_login/pull/125)\n* Possibility to navigate back to login after sign-up [#126](https://github.com/NearHuscarl/flutter_login/pull/126)\n* Support for external login providers [#127](https://github.com/NearHuscarl/flutter_login/pull/127)\n* Footer for copyright notice [#129](https://github.com/NearHuscarl/flutter_login/pull/129)\n* Add custom padding to sign-up and login provider buttons [#135](https://github.com/NearHuscarl/flutter_login/pull/135)\n* Possibility to only show logo without title\n\nBug fixes\n* Add safe area to header\n* Scaffold is now transparent so background images are now supported\n* Fix logo size\n* Disable auto-correct for text field\n\n## 1.0.15\nBug fixes (16/03/2021)\n* Fixed animationController methods should not be used after calling dispose [#114](https://github.com/NearHuscarl/flutter_login/pull/114)\n* Upgrade to AndroidX [#111](https://github.com/NearHuscarl/flutter_login/pull/111)\n* Upgrade Android example to embedding V2 [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n* Fixed initialRoute function [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n* Added pedantic for code analysis [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n* Migrated discontinued flushbar to another_flushbar [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n* Updated all deprecated widgets to current widgets [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n* Fixed widget_test [#110](https://github.com/NearHuscarl/flutter_login/pull/110)\n\n## 1.0.14\nFix signup textfield not selectable in signup mode (26/01/2020)\n* [#34](https://github.com/NearHuscarl/flutter_login/issues/34)\n\n## 1.0.13+1\nUpdate dependency (23/01/2020)\n* Update Provider dependency [#35](https://github.com/NearHuscarl/flutter_login/issues/35)\n\n## 1.0.13 \nMinor improvements and Bug fix(es) (23/01/2020)\n* Share email input between login and recovery cards ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#13](https://github.com/NearHuscarl/flutter_login/pull/13))\n* Fix render overflow exceptions [#20](https://github.com/NearHuscarl/flutter_login/issues/20)\n\n## 1.0.11\nMisc bug fixes (17/01/2020)\n- Attempt to fix text not centered in the web build\n- Fix exception on submit when onSubmitAnimationCompleted is empty\n- Fix: test failed due to framework error\n\n## 1.0.10+1\nFix example's logo hero animation (11/12/2019)\n\n## 1.0.10\nExtend configurations & bug fixes (09/12/2019)\n* Add `pageColorLight` and `pageColorDark` to customize screen background color gradients ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#12](https://github.com/NearHuscarl/flutter_login/pull/12))\n* Add configurable intro to recovery card ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#9](https://github.com/NearHuscarl/flutter_login/pull/9))\n* Fix empty/null title still takes empty space (should be collapse) ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#10](https://github.com/NearHuscarl/flutter_login/pull/10))\n* Fix hardcode button width ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#17](https://github.com/NearHuscarl/flutter_login/pull/17))\n* Fix crashing when applying `primaryColor` ([@doc-rj-celltrak](https://github.com/doc-rj-celltrak) in [#11](https://github.com/NearHuscarl/flutter_login/pull/11))\n\n## 1.0.4\nAdd option to disable debug buttons (11/10/2019)\n\n## 1.0.3\n* Fix app crashing when omitting `logoPath` parameter\n\n## 1.0.2\nAdd license\n\n## 1.0.1\nFix Document\n* Fix image not loading on pub.dev README\n* Reduce font size in description column\n\n## 1.0.0\nInitial release"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2019 Near Huscarl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 40.4384765625,
          "content": "# Flutter Login\n[![pub package](https://img.shields.io/pub/v/flutter_login?include_prereleases)](https://pub.dartlang.org/packages/flutter_login)\n[![Join the chat](https://img.shields.io/discord/817442412313051220)](https://discord.gg/kP7jXHeNtS)\n[![Workflow](https://github.com/NearHuscarl/flutter_login/actions/workflows/test.yml/badge.svg?branch=master)](https://github.com/NearHuscarl/flutter_login/actions)\n\n`FlutterLogin` is a ready-made login/signup widget with many animation effects to\ndemonstrate the capabilities of Flutter\n\n<p align=\"center\">\n  <a href='https://i.imgur.com/z3FJSe7.mp4'>\n    <img src='https://github.com/NearHuscarl/flutter_login/raw/master/demo/demo.gif' width=320>\n  </a>\n</p>\n\n## Installation\n\nFollow the install instructions [here](https://pub.dev/packages/flutter_login#-installing-tab-)\n\n## Reference\n\n| Property                              | Type                                    | Description                                                                                                                                                                                                                                            |\n|---------------------------------------|-----------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| onSignup                              | `AuthCallback`                          | <sub>Called when the user hit the submit button when in sign up mode. It receives a `SignupData` object, with name, password and, if `additionalSignUpFields` is not null, the additional fields filled in by the user in a `Map<String,String>`</sub> |\n| onConfirmSignup                       | `ConfirmSignupCallback`                 | <sub>Called when the user hits the submit button when confirming signup. If not specified, signup will not be confirmed by user.</sub>                                                                                                                 |\n| confirmSignupRequired                 | `ConfirmSignupRequiredCallback`         | <sub>Additional option to decide in runtime if confirmation is required. If not specified, signup will be confirmed by user if onConfirmSignup is specified.</sub>                                                                                     |\n| confirmSignupKeyboardType             | `TextInputType`                         | <sub>The keyboard type of the confirm signup field</sub>                                                                                                                                                                                               |\n| onResendCode                          | `AuthCallback`                          | <sub>Called when the user hits the resend code button when confirming signup. Only required when onConfirmSignup is provided.</sub>                                                                                                                    |\n| onLogin                               | `AuthCallback`                          | <sub>Called when the user hit the submit button when in login mode</sub>                                                                                                                                                                               |\n| onRecoverPassword                     | `RecoverCallback`                       | <sub>Called when the user hit the submit button when in recover password mode</sub>                                                                                                                                                                    |\n| onConfirmRecover                      | `ConfirmRecoverCallback`                | <sub>Called when the user submits confirmation code and sets password in recover password mode. If not specified, a confirmation code will not be used to recover password.</sub>                                                                      |\n| title                                 | `String`                                | <sub>The large text above the login [Card], usually the app or company name. Leave the string empty or null if you want no title.</sub>                                                                                                                |\n| logo                                  | `ImageProvider or String`               | <sub>The image provider or asset path string for the logo image to be displayed</sub>                                                                                                                                                                  |\n| messages                              | [`LoginMessages`](#LoginMessages)       | <sub>Describes all of the labels, text hints, button texts and other auth descriptions</sub>                                                                                                                                                           |\n| theme                                 | [`LoginTheme`](#LoginTheme)             | <sub>FlutterLogin's theme. If not specified, it will use the default theme as shown in the demo gifs and use the colorsheme in the closest `Theme` widget</sub>                                                                                        |\n| userType                              | [`LoginUserType`](#LoginUserType)       | <sub>FlutterLogin's user type. If not specified, it will use the default user type as email</sub>                                                                                                                                                      |\n| userValidator                         | <sub>`FormFieldValidator<String>`</sub> | <sub>User field validating logic, add your custom validation here. The default is email validation logic. Expects to return an error message [String] to be display if validation fails or [null] if validation succeeds</sub>                         |\n| validateUserImmediately               | <sub>`bool`</sub>                       | <sub>Should email be validated after losing focus [true] or after form submissions [false]. Default: [false]</sub>                                                                                                                                     |\n| passwordValidator                     | <sub>`FormFieldValidator<String>`</sub> | <sub>Same as `userValidator` but for password</sub>                                                                                                                                                                                                    |\n| <sub>onSubmitAnimationCompleted</sub> | `Function`                              | <sub>Called after the submit animation's completed. Put your route transition logic here</sub>                                                                                                                                                         |\n| logoTag                               | `String`                                | <sub>`Hero` tag for logo image. If not specified, it will simply fade out when changing route</sub>                                                                                                                                                    |\n| titleTag                              | `String`                                | <sub>`Hero` tag for title text. Need to specify `LoginTheme.beforeHeroFontSize` and `LoginTheme.afterHeroFontSize` if you want different font size before and after hero animation</sub>                                                               |\n| showDebugButtons                      | `bool`                                  | <sub>Display the debug buttons to quickly forward/reverse login animations. In release mode, this will be overridden to `false` regardless of the value passed in</sub>                                                                                |\n| hideForgotPasswordButton              | `bool`                                  | <sub>Hides the Forgot Password button if set to true</sub>                                                                                                                                                                                             |\n| hideProvidersTitle                    | `bool`                                  | <sub>Hides the title above login providers if set to true. In case the providers List is empty this is uneffective, as the title is hidden anyways. The default is `false`</sub>                                                                       |\n| disableCustomPageTransformer          | `bool`                                  | <sub>Disables the custom transition which causes RenderBox was not laid out error. See [#97](https://github.com/NearHuscarl/flutter_login/issues/97) for more info.</sub>                                                                              |\n| additionalSignUpFields                | `Map<String, UserFormField>`            | <sub> Used to specify the additional form fields; the form is shown right after signin up. You can provide at most 6 additional fields. </sub>                                                                                                         |\n| onSwitchToAdditionalFields            | `AdditionalFieldsCallback`              | <sub>Called when the user switches to additional fields.</sub>                                                                                                                                                                                         |\n| navigateBackAfterRecovery             | `bool`                                  | <sub>Navigate back to the login page after successful recovery.</sub>                                                                                                                                                                                  |\n| savedEmail                            | `String`                                | <sub>Prefilled value for user field (ie. saved from previous session via other means, ie. via SharedPreferences)</sub>                                                                                                                                 |\n| savedPassword                         | `String`                                | <sub>Prefilled value for password field (ie. saved from previous session via other means, ie. via SharedPreferences). Will set also confirmation password in Auth class</sub>                                                                          |\n| termsOfService                        | [`TermOfService`](#TermOfService)       | <sub>List of terms of service to be listed during registration. On onSignup callback LoginData contains a list of [`TermOfServiceResult`](#TermOfServiceResult) </sub>                                                                                 |\n| children                              | [`Widget`]                              | <sub>List of widgets that can be added to the stack of the login screen. Can be used to show custom banners or logos. </sub>                                                                                                                           |\n| scrollable                            | `bool`                                  | <sub>When set to true, the login card becomes scrollable instead of resizing when needed.                                                                                                                                                              |\n| headerWidget                          | `Widget`                                | <sub>A widget that can be placed on top of the loginCard.</sub>                                                                                                                                                                                        |\n\n*NOTE:* It is recommended that the child widget of the `Hero` widget should be the\nsame in both places. For title's hero animation use the\n`LoginThemeHelper.loginTextStyle` in the next screen to get the style of the\nexact text widget in the login screen. `LoginThemeHelper` can be accessed by adding\nthis line\n\n```dart\nimport 'package:flutter_login/theme.dart';\n```\n\n### LoginMessages\n\n| Property                        | Type     | Description                                                                                                                                    |\n|---------------------------------|----------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| userHint                        | `String` | Hint text of the user field [TextField] (Note: user field can be name, email or phone. For more info check: [`LoginUserType`](#LoginUserType)) |\n| passwordHint                    | `String` | Hint text of the password [TextField]                                                                                                          |\n| confirmPasswordHint             | `String` | Hint text of the confirm password [TextField]                                                                                                  |\n| forgotPasswordButton            | `String` | Forgot password button's label                                                                                                                 |\n| loginButton                     | `String` | Login button's label                                                                                                                           |\n| signupButton                    | `String` | Signup button's label                                                                                                                          |\n| recoverPasswordButton           | `String` | Recover password button's label                                                                                                                |\n| recoverPasswordIntro            | `String` | Intro in password recovery form                                                                                                                |\n| recoverPasswordDescription      | `String` | Description in password recovery form, shown when the onConfirmRecover callback is not provided                                                |\n| recoverCodePasswordDescription  | `String` | Description in password recovery form, shown when the onConfirmRecover callback is provided                                                    |\n| goBackButton                    | `String` | Go back button's label. Go back button is used to go back to to login/signup form from the recover password form                               |\n| confirmPasswordError            | `String` | The error message to show when the confirm password not match with the original password                                                       |\n| recoverPasswordSuccess          | `String` | The success message to show after submitting recover password                                                                                  |\n| confirmSignupIntro              | `String` | The intro text for the confirm signup card                                                                                                     |\n| confirmationCodeHint            | `String` | Hint text of the confirmation code [TextField]                                                                                                 |\n| confirmationCodeValidationError | `String` | The error message to show if confirmation code is empty                                                                                        |\n| resendCodeButton                | `String` | Resend code button's label                                                                                                                     |\n| resendCodeSuccess               | `String` | The success message to show after resending a confirmation code                                                                                |\n| confirmSignupButton             | `String` | Confirm signup button's label                                                                                                                  |\n| confirmSignupSuccess            | `String` | The success message to show after confirming signup                                                                                            |\n| confirmRecoverIntro             | `String` | The intro text for the confirm recover password card                                                                                           |\n| recoveryCodeHint                | `String` | Hint text of the recovery code [TextField]                                                                                                     |\n| recoveryCodeValidationError     | `String` | The error message to show if recovery code is empty                                                                                            |\n| setPasswordButton               | `String` | Set password button's label for password recovery                                                                                              |\n| confirmRecoverSuccess           | `String` | The success message to show after confirming recovered password                                                                                |\n| flushbarTitleError              | `String` | The Flushbar title on errors                                                                                                                   |\n| flushbarTitleSuccess            | `String` | The Flushbar title on successes                                                                                                                |\n| providersTitle                  | `String` | A string shown above the login Providers, defaults to `or login with`                                                                          |\n\n### LoginTheme\n\n| Property                 | Type                   | Description                                                                                                       |\n|--------------------------|------------------------|-------------------------------------------------------------------------------------------------------------------|\n| primaryColor             | `Color`                | The background color of major parts of the widget like the login screen and buttons                               |\n| accentColor              | `Color`                | The secondary color, used for title text color, loading icon, etc. Should be contrast with the [primaryColor]     |\n| errorColor               | `Color`                | The color to use for [TextField] input validation errors                                                          |\n| cardTheme                | `CardTheme`            | The colors and styles used to render auth [Card]                                                                  |\n| inputTheme               | `InputDecorationTheme` | Defines the appearance of all [TextField]s                                                                        |\n| buttonTheme              | `LoginButtonTheme`     | A theme for customizing the shape, elevation, and color of the submit button                                      |\n| titleStyle               | `TextStyle`            | Text style for the big title                                                                                      |\n| bodyStyle                | `TextStyle`            | Text style for small text like the recover password description                                                   |\n| textFieldStyle           | `TextStyle`            | Text style for [TextField] input text                                                                             |\n| buttonStyle              | `TextStyle`            | Text style for button text                                                                                        |\n| beforeHeroFontSize       | `double`               | Defines the font size of the title in the login screen (before the hero transition)                               |\n| afterHeroFontSize        | `double`               | Defines the font size of the title in the screen after the login screen (after the hero transition)               |\n| pageColorLight           | `Color`                | The optional light background color of login screen; if provided, used for light gradient instead of primaryColor |\n| pageColorDark            | `Color`                | The optional dark background color of login screen; if provided, used for dark gradient instead of primaryColor   |\n| footerBottomPadding      | `double`               | The footer bottom Padding; defaults to 0 if not provided.                                                         |\n| switchAuthTextColor      | `Color`                | The optional color for the switch authentication text, if nothing is specified [primaryColor] is used.            |\n| logoWidth                | `double`               | Width of the logo where 1 is the full width of the login card. ; defaults to 0.75 if not provided.                |\n| primaryColorAsInputLabel | `bool`                 | Set to true if you want to use the primary color for input labels. Defaults to false.                             |\n\n### LoginUserType\n| Enum      | Description                                                        |\n|-----------|--------------------------------------------------------------------|\n| EMAIL     | The User Field will be set to be email                             |\n| NAME      | The User Field will be set to be username                          |\n| FIRSTNAME | The User Field will be set to be first name                        |\n| LASTNAME  | The User Field will be set to be last name                         |\n| PHONE     | The User Field will be set to be phone                             |\n| INTLPHONE | The User Field will be set to be phone with country code selection |\n| TEXT      | The User Field will be set to be text                              |\n\n[LoginUserType] will change how the user field [TextField] behaves. Autofills and Keyboard Type will be adjusted automatically for the type of user that you pass.\n\n### UserFormField\n| Property       | Type                         | Description                                                                                                                           |\n|----------------|------------------------------|---------------------------------------------------------------------------------------------------------------------------------------|\n| keyName        | `String`                     | The identifier of the fields, it will be the key in the returned map. Please ensure this is unique, otherwise an Error will be thrown |\n| displayName    | `String`                     | The name of the field displayed on the form. Defaults to `keyName` if not given                                                       |\n| defaultValue   | `String`                     | The default value of the field, if given the field will be pre-filled in with this                                                    |\n| fieldValidator | `FormFieldValidator<String>` | A function to validate the field. It should return null on success, or a string with the explanation of the error                     |\n| icon           | `Icon?`                      | The icon shown on the left of the field. Defaults to the user icon when not provided                                                  |\n| userType       | `LoginUserType`              | The LoginUserType of the form. The right keyboard and suggestions will be shown accordingly. Defaults to `LoginUserType.user`         |\n| tooltip        | `InlineSpan`                 | Additional description for that field                                                                                                 |\n\n### LoginProvider\n| Property                    | Type                           | Description                                                                                                                                                                                                                                                                                                                                          |\n|-----------------------------|--------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| button                      | `Widget`                       | Used for Buttons for [LoginProvider] - see example uses [SignInButton] package                                                                                                                                                                                                                                                                       |\n| icon                        | `IconData`                     | Icon that is used for a button for [LoginProvider]                                                                                                                                                                                                                                                                                                   |\n| label                       | `String`                       | The label shown under the provider                                                                                                                                                                                                                                                                                                                   |\n| callback                    | `ProviderAuthCallback`         | A Function called when the provider button is pressed. It must return null on success, or a `String` describing the error on failure.                                                                                                                                                                                                                |\n| providerNeedsSignUpCallback | `ProviderNeedsSignUpCallback?` | Optional. Requires that the `additionalSignUpFields` argument is passed to `FlutterLogin`. When given, this callback must return a `Future<bool>`. If it evaluates to `true` the card containing the additional signup fields is shown, right after the evaluation of `callback`. If not given the default behaviour is not to show the signup card. |\n\n*NOTE:* Both [button] and [icon] can be added to [LoginProvider], but [button] will take preference over [icon]\n\n### TermOfService\n\n\n| Property               | Type     | Description                                                                                                   |\n|------------------------|----------|---------------------------------------------------------------------------------------------------------------|\n| id                     | `String` | Used only on Signup callback to identify a single Term Of service if it's optional.                           |\n| mandatory              | `bool`   | If set true and term is not check when form is validate on submit, the validation error message will be shown |\n| text                   | `String` | Name of Term to show.                                                                                         |\n| linkUrl                | `String` | Web url link to additional term of services info.                                                             |\n| validationErrorMessage | `String` | Validation error message to show.                                                                             |\n| initialValue           | `bool`   | Specify if checkbox is initialized checked                                                                    |\n\n#### TermOfServiceResult\n\n| Property | Type                              | Description                                                                   |\n|----------|-----------------------------------|-------------------------------------------------------------------------------|\n| term     | [`TermOfService`](#TermOfService) | Contains a termOfServiceObject.                                               |\n| accepted | `bool`                            | Indicates whether or not the term of service was selected during registration |\n\n## Examples\n\nYou can view the complete example in the [example project] which resulted in the\ngif above\n\n### Basic example\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_login/flutter_login.dart';\nimport 'dashboard_screen.dart';\n\nconst users =  {\n  'dribbble@gmail.com': '12345',\n  'hunter@gmail.com': 'hunter',\n};\n\nclass LoginScreen extends StatelessWidget {\n  const LoginScreen({super.key});\n\n  Duration get loginTime => const Duration(milliseconds: 2250);\n\n  Future<String?> _authUser(LoginData data) {\n    debugPrint('Name: ${data.name}, Password: ${data.password}');\n    return Future.delayed(loginTime).then((_) {\n      if (!users.containsKey(data.name)) {\n        return 'User not exists';\n      }\n      if (users[data.name] != data.password) {\n        return 'Password does not match';\n      }\n      return null;\n    });\n  }\n\n  Future<String?> _signupUser(SignupData data) {\n    debugPrint('Signup Name: ${data.name}, Password: ${data.password}');\n    return Future.delayed(loginTime).then((_) {\n      return null;\n    });\n  }\n\n  Future<String> _recoverPassword(String name) {\n    debugPrint('Name: $name');\n    return Future.delayed(loginTime).then((_) {\n      if (!users.containsKey(name)) {\n        return 'User not exists';\n      }\n      return null;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FlutterLogin(\n      title: 'ECORP',\n      logo: const AssetImage('assets/images/ecorp-lightblue.png'),\n      onLogin: _authUser,\n      onSignup: _signupUser,\n      onSubmitAnimationCompleted: () {\n        Navigator.of(context).pushReplacement(MaterialPageRoute(\n          builder: (context) => const DashboardScreen(),\n        ));\n      },\n      onRecoverPassword: _recoverPassword,\n    );\n  }\n}\n```\n\n<img src=\"https://github.com/NearHuscarl/flutter_login/raw/master/demo/basic.png\" width=\"300\">\n\n\n\n### Basic example with sign in providers\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_login/flutter_login.dart';\nimport 'dashboard_screen.dart';\n\nconst users = {\n  'dribbble@gmail.com': '12345',\n  'hunter@gmail.com': 'hunter',\n};\n\nclass LoginScreen extends StatelessWidget {\n  const LoginScreen({super.key});\n\n  Duration get loginTime => const Duration(milliseconds: 2250);\n\n  Future<String?> _authUser(LoginData data) {\n    debugPrint('Name: ${data.name}, Password: ${data.password}');\n    return Future.delayed(loginTime).then((_) {\n      if (!users.containsKey(data.name)) {\n        return 'User not exists';\n      }\n      if (users[data.name] != data.password) {\n        return 'Password does not match';\n      }\n      return null;\n    });\n  }\n\n  Future<String?> _signupUser(SignupData data) {\n    debugPrint('Signup Name: ${data.name}, Password: ${data.password}');\n    return Future.delayed(loginTime).then((_) {\n      return null;\n    });\n  }\n\n  Future<String> _recoverPassword(String name) {\n    debugPrint('Name: $name');\n    return Future.delayed(loginTime).then((_) {\n      if (!users.containsKey(name)) {\n        return 'User not exists';\n      }\n      return null;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FlutterLogin(\n      title: 'ECORP',\n      logo: const AssetImage('assets/images/ecorp-lightblue.png'),\n      onLogin: _authUser,\n      onSignup: _signupUser,\n      \n        loginProviders: <LoginProvider>[\n          LoginProvider(\n            icon: FontAwesomeIcons.google,\n            label: 'Google',\n            callback: () async {\n              debugPrint('start google sign in');\n              await Future.delayed(loginTime);\n              debugPrint('stop google sign in');              \n              return null;\n            },\n          ),\n          LoginProvider(\n            icon: FontAwesomeIcons.facebookF,\n            label: 'Facebook',\n            callback: () async {            \n              debugPrint('start facebook sign in');\n              await Future.delayed(loginTime);\n              debugPrint('stop facebook sign in');              \n              return null;\n            },\n          ),\n          LoginProvider(\n            icon: FontAwesomeIcons.linkedinIn,\n            callback: () async {         \n              debugPrint('start linkdin sign in');\n              await Future.delayed(loginTime);         \n              debugPrint('stop linkdin sign in');              \n              return null;\n            },\n          ),\n          LoginProvider(\n            icon: FontAwesomeIcons.githubAlt,\n            callback: () async {\n              debugPrint('start github sign in');\n              await Future.delayed(loginTime);\n              debugPrint('stop github sign in');              \n              return null;\n            },\n          ),\n        ],\n      onSubmitAnimationCompleted: () {\n        Navigator.of(context).pushReplacement(MaterialPageRoute(\n          builder: (context) => const DashboardScreen(),\n        ));\n      },\n      onRecoverPassword: _recoverPassword,\n    );\n  }\n}\n```\n\n<img src=\"https://github.com/NearHuscarl/flutter_login/raw/master/demo/login-with-provider.png\" width=\"300\">\n\n\n\n### Theming via `ThemeData`\n\nLogin theme can be customized indectly by using `ThemeData` like this\n\n```dart\n// main.dart\nimport 'package:flutter/material.dart';\nimport 'login_screen.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Login Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.deepPurple,\n        accentColor: Colors.orange,\n        cursorColor: Colors.orange,\n        textTheme: const TextTheme(\n          headline3: TextStyle(\n            fontFamily: 'OpenSans',\n            fontSize: 45.0,\n            color: Colors.orange,\n          ),\n          button: TextStyle(\n            fontFamily: 'OpenSans',\n          ),\n          subtitle1: TextStyle(fontFamily: 'NotoSans'),\n          bodyText2: TextStyle(fontFamily: 'NotoSans'),\n        ),\n      ),\n      home: LoginScreen(),\n    );\n  }\n}\n\n// login_screen.dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_login/flutter_login.dart';\nimport 'dashboard_screen.dart';\n\nclass LoginScreen extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return FlutterLogin(\n      title: 'ECORP',\n      logo: const AssetImage('assets/images/ecorp.png'),\n      onLogin: (_) => Future(null),\n      onSignup: (_) => Future(null),\n      onSubmitAnimationCompleted: () {\n        Navigator.of(context).pushReplacement(MaterialPageRoute(\n          builder: (context) => const DashboardScreen(),\n        ));\n      },\n      onRecoverPassword: (_) => Future(null),\n    );\n  }\n}\n```\n\n<img src=\"https://github.com/NearHuscarl/flutter_login/raw/master/demo/theme-data.png\" width=\"300\">\n\n### Custom labels\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:flutter_login/flutter_login.dart';\nimport 'dashboard_screen.dart';\n\nclass LoginScreen extends StatelessWidget {\n  const LoginScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return FlutterLogin(\n      title: 'ECORP',\n      logo: const AssetImage('assets/images/ecorp.png'),\n      onLogin: (_) => Future(null),\n      onSignup: (_) => Future(null),\n      onSubmitAnimationCompleted: () {\n        Navigator.of(context).pushReplacement(MaterialPageRoute(\n          builder: (context) => const DashboardScreen(),\n        ));\n      },\n      onRecoverPassword: (_) => Future(null),\n      messages: LoginMessages(\n        userHint: 'User',\n        passwordHint: 'Pass',\n        confirmPasswordHint: 'Confirm',\n        loginButton: 'LOG IN',\n        signupButton: 'REGISTER',\n        forgotPasswordButton: 'Forgot huh?',\n        recoverPasswordButton: 'HELP ME',\n        goBackButton: 'GO BACK',\n        confirmPasswordError: 'Not match!',\n        recoverPasswordDescription:\n            'Lorem Ipsum is simply dummy text of the printing and typesetting industry',\n        recoverPasswordSuccess: 'Password rescued successfully',\n      ),\n    );\n  }\n}\n\n```\n\n|                 Login/Signup                 |                  Password Recovery                  |\n|:--------------------------------------------:|:---------------------------------------------------:|\n| ![Login/Signup](demo/custom-label-login.png) | ![Password Recovery](demo/custom-label-recover.png) |\n\n### Theme customization\n\n```dart\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_login/flutter_login.dart';\nimport 'dashboard_screen.dart';\n\nclass LoginScreen extends StatelessWidget {\n  const LoginScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    const inputBorder = BorderRadius.vertical(\n      bottom: Radius.circular(10.0),\n      top: Radius.circular(20.0),\n    );\n\n    return FlutterLogin(\n      title: 'ECORP',\n      logo: const AssetImage('assets/images/ecorp-lightgreen.png'),\n      onLogin: (_) => Future(null),\n      onSignup: (_) => Future(null),\n      onSubmitAnimationCompleted: () {\n        Navigator.of(context).pushReplacement(MaterialPageRoute(\n          builder: (context) => const DashboardScreen(),\n        ));\n      },\n      onRecoverPassword: (_) => Future(null),\n      theme: LoginTheme(\n        primaryColor: Colors.teal,\n        accentColor: Colors.yellow,\n        errorColor: Colors.deepOrange,\n        titleStyle: const TextStyle(\n          color: Colors.greenAccent,\n          fontFamily: 'Quicksand',\n          letterSpacing: 4,\n        ),\n        bodyStyle: const TextStyle(\n          fontStyle: FontStyle.italic,\n          decoration: TextDecoration.underline,\n        ),\n        textFieldStyle: const TextStyle(\n          color: Colors.orange,\n          shadows: [Shadow(color: Colors.yellow, blurRadius: 2)],\n        ),\n        buttonStyle: const TextStyle(\n          fontWeight: FontWeight.w800,\n          color: Colors.yellow,\n        ),\n        cardTheme: CardTheme(\n          color: Colors.yellow.shade100,\n          elevation: 5,\n          margin: const EdgeInsets.only(top: 15),\n          shape: ContinuousRectangleBorder(\n              borderRadius: BorderRadius.circular(100.0)),\n        ),\n        inputTheme: InputDecorationTheme(\n          filled: true,\n          fillColor: Colors.purple.withOpacity(.1),\n          contentPadding: EdgeInsets.zero,\n          errorStyle: const TextStyle(\n            backgroundColor: Colors.orange,\n            color: Colors.white,\n          ),\n          labelStyle: const TextStyle(fontSize: 12),\n          enabledBorder: UnderlineInputBorder(\n            borderSide: BorderSide(color: Colors.blue.shade700, width: 4),\n            borderRadius: inputBorder,\n          ),\n          focusedBorder: UnderlineInputBorder(\n            borderSide: BorderSide(color: Colors.blue.shade400, width: 5),\n            borderRadius: inputBorder,\n          ),\n          errorBorder: UnderlineInputBorder(\n            borderSide: BorderSide(color: Colors.red.shade700, width: 7),\n            borderRadius: inputBorder,\n          ),\n          focusedErrorBorder: UnderlineInputBorder(\n            borderSide: BorderSide(color: Colors.red.shade400, width: 8),\n            borderRadius: inputBorder,\n          ),\n          disabledBorder: const UnderlineInputBorder(\n            borderSide: BorderSide(color: Colors.grey, width: 5),\n            borderRadius: inputBorder,\n          ),\n        ),\n        buttonTheme: LoginButtonTheme(\n          splashColor: Colors.purple,\n          backgroundColor: Colors.pinkAccent,\n          highlightColor: Colors.lightGreen,\n          elevation: 9.0,\n          highlightElevation: 6.0,\n          shape: BeveledRectangleBorder(\n            borderRadius: BorderRadius.circular(10),\n          ),\n          // shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(5)),\n          // shape: CircleBorder(side: BorderSide(color: Colors.green)),\n          // shape: ContinuousRectangleBorder(borderRadius: BorderRadius.circular(55.0)),\n        ),\n      ),\n    );\n  }\n}\n```\n\n<img src=\"https://github.com/NearHuscarl/flutter_login/raw/master/demo/theme.png\" width=\"300\">\n\n## Inspiration\n* [VNPAY App Interactions](https://dribbble.com/shots/3829985-VNPAY-App-Interactions)\n* [Flat UI Login animated](https://dribbble.com/shots/1058688-Flat-UI-Login-animated)\n\n## License\n\n* MIT License\n\n[example project]: example/\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.033203125,
          "content": "include: package:lint/package.yaml"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.6845703125,
          "content": "name: flutter_login\ndescription: A login widget with login/signup functionalities to help speed up development\nversion: 5.0.0\nrepository: https://github.com/NearHuscarl/flutter_login\n\nenvironment:\n  sdk: \">=3.2.0 <4.0.0\"\n  flutter: \">=3.16.0\"\n\ndependencies:\n  another_flushbar: ^1.10.29\n  another_transformer_page_view: ^2.0.0\n  flutter:\n    sdk: flutter\n  font_awesome_flutter: ^10.0.0\n  intl_phone_number_input: ^0.7.4\n  phone_numbers_parser: ^8.0.0\n  provider: ^6.0.1\n  quiver: ^3.0.1\n  sign_in_button: ^3.0.0\n  url_launcher: ^6.1.3\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  lint: ^2.1.2\n  mockito: ^5.0.16\n\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/images/ecorp.png\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}