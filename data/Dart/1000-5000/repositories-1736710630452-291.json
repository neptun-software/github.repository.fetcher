{
  "metadata": {
    "timestamp": 1736710630452,
    "page": 291,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjI5NQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AndreHaueisen/flushbar",
      "stars": 1012,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.138671875,
          "content": ".DS_Store\n.dart_tool/\n\n.packages\n.pub/\n\n.idea/*\n\nbuild/\nios/.generated/\nios/Flutter/Generated.xcconfig\nios/Runner/GeneratedPluginRegistrant.*\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 10.20703125,
          "content": "## [1.10.4] - 2020-15-05\n- [button] is now a [Widget] instead of [FlatButton]\n- Removed generic type requirement to extend Object\n- Fixed bar blur clipping\n\n## [1.10.3] - 2020-15-05\n- Fixes example pictures\n\n## [1.10.2] - 2020-15-05\n- Fixes SDK version\n\n## [1.10.1] - 2020-07-05\n- With FLutter's 1.17 release, Flushbar 1.10 is now compatible with stable channel\n\n## [1.10.0] - 2020-25-03\n- **Breaking change** fixes a breaking change introduced by Flutter. Only use this version if you are using flutter v1.15 or greater (currently on the beta channel)\n- **Breaking change** adds blockBackgroundInteraction property.\n- **Breaking change** overlayBlur renamed to routeBlur. Will be ignored if blockBackgroundInteraction is false\n- **Breaking change** overlayColor renamed to routeColor. Will be ignored if blockBackgroundInteraction is false\n- Now, if [showProgressIndicator] is true and [progressIndicatorController] is null, an infinite linear progress indicator will be shown\n- Performance improvements\n- Code refactoring\n\n## [1.9.1] - 2019-21-10\n- Fixed shadows not showing up\n\n## [1.9.0] - 2019-01-09\n- Added `maxWidth` property\n- Added `barBlur` which applies a BackdropFilter only to Flushbar's background\n- Default animation curve changed from `fastOutSlowIn` to `easeOutCirc`\n\n## [1.8.2] - 2019-02-08\n- Blur overlay is now dismissible by click if `isDismissible == true`\n- Blur overlay will now animate until it disappears instead of vanishing\n\n## [1.8.1] - 2019-29-07\n- Removed context requirement from flushbar_route\n- Fix onTap requiring a return value\n\n## [1.8.0] - 2019-17-07\n- **Breaking Change** renamed `aroundPadding` to `margin`\n- Flushbar now supports uniform borders (same border on all sides)\n- Added `borderColor` property\n- Added `borderWidth` property\n- Added `padding` property - default still complies with material design specs\n\n## [1.7.1+1] - 2019-10-07\n- Fixed environment variables\n\n## [1.7.1] - 2019-10-07\n- Changed file docs to comply with dartdoc directives\n- Flutter minimum version for Flushbar is now 1.7.8\n- With Flutter version 1.7.8 hitting stable, there is no version restriction for stable channel users anymore\n\n## [1.7.0] - 2019-05-06\n- add onTap property\n- fix exception caused by user dismissal while flushbar is appearing or hiding\n\n## [1.6.0] - 2019-31-05\n- **breaking change** this fixes `The method 'detach' isn't defined for the class 'FocusScopeNode'`\n\n## [1.5.3] - 2019-27-05\n- update README file\n\n## [1.5.2] - 2019-26-05\n- `titleText` and `messageText` are now widgets so users can use `RichText` or `Text`\n- Add `shouldIconPulse` property\n\n## [1.5.0] - 2019-04-05\n- **Breaking Change** boxShadow is now called boxShadows and is a List<BoxShadow>\n\n## [1.4.0] - 2019-08-04\n- Add `overlayBlur` property that pushes an overlay blocking user input on the background. Only takes effect if greater then 0.0\n- Add `overlayColor` property that changes the overlay color. Default is transparent. Only takes effect if overlayBlur is greater then 0.0\n- Create new file for FlushbarRoute\n\n## [1.3.1] - 2019-02-04\n- Constructor now has strongly typed parameters (my bad for forgetting it)\n- Improved null message error\n\n## [1.3.0] - 2019-14-03\n- **Breaking Change** expect for `onStatusChanged`, all properties are now final. Two dot notation does \nnot work anymore. Since you can only use the instance one time, this\nis the best practice.\n- Add `dismissDirection` property.\n- **Behaviour change** dismiss is now vertical by default. This is more natural since \nFlushbar show animation is also vertical.\n- It is now possible to dismiss a Flushbar that is not the top route. \nThe only inconvenient is that it will not animate back (simply disappear) and the listener, if used, will not register the dismissal.\n- Updated README file\n\n## [1.2.4] - 2019-05-03\n- Added FlushbarStyle.FLOATING & FlushbarStyle.GROUNDED\n- Fixed icon animation being started even if icon is null\n\n## [1.2.3] - 2019-25-02\n- **Breaking Change** Flushbar now accepts a BoxShadow for a more customized shadow\n\n## [1.2.2] - 2019-22-02\n- Fixed a bug when push an route after flushbar, and flushbar timer pop the current route out\n\n## [1.2.1] - 2019-11-01\n- aroundPadding is now more flexible and receives EdgeInsets instead of an int\n\n## [1.2.0] - 2018-09-12\n- add animationDuration argument. You can now control how long does it take to show and dismiss Flushbar\n\n## [1.1.2] - 2018-24-10\n- icon argument can now be any widget, though I recommend using Icon or Image\n- added null checks\n\n## [1.1.1] - 2018-17-10\n\n- Fixed bug where calling Navigator.push() on Flushbar swipe dismissal did not pop the route\n- Fixed bug where swipe to dismiss a padded Flushbar caused to being stuck at the edge\n\n## [1.1.0] - 2018-11-10\n\n- Added two new features: aroundPadding and borderRadius\n- Fixed a bug where the overlay background was not null\n\n## [1.0.1] - 2018-11-02\n\n- Texts now respond to alignment\n\n## [1.0.0] - 2018-11-02\n\n- No changes. Simply reached stable after a month without new bugs\n\n## [0.9.2] - 2018-09-29\n\n### Changes\n\n- Dismissing a Flushbar that is not the top route no longer throws an exception\n- Dismissing a Flushbar that is not the top route has the following effects:\n   * It does not animate back. It simply vanishes\n   * FlushbarStatus listener will not register `FlushbarStatus.IS_HIDING` or `FlushbarStatus.DISMISSED`\n   * It returns no value when the Future yield by `dismiss()` completes\n\n### Fixes\n\n- Fixed an issue where a dismissible Flushbar would not cancel the timer and pop two routes instead of one\n\n## [0.9.1] - 2018-09-25\n\n### Changes\n\n- Fixed an issue where Flushbar could get stuck when swipe to dismiss was used\n- Minor layout tweeks\n- Flushbar gets a weird logo! Do not judge me. I'm not a designer :)\n- README file update\n- README file fixes\n\n## [0.9.0] - 2018-09-10\n\nLooking good for version 1.0. Please, report any issues your have.\n\n### Changes\n\n- **IMPORTANT** `dismiss()` now returns a future when the animation is completed and route is poped. That makes it easier to concatenate two or more Flushbars.\n- Major changes on how `show` and `dismiss` animations work, making Flushbar more reliable.\n- Trying to `dismiss()` a Flushbar that is not the top route is going to throw an error.\n- Pressing the back button will now properly `dismiss()` Flushbar.\n- Performance improvements. In and out animations are smoother.\n\n### Layout Changes\n\n- Removed top padding when `flushbarPosition == FlushbarPosition.TOP`\n\n## [0.8.3] - 2018-09-07\n\n### Fixes\n\n- Fixed issue when `isDismissible` is set to false [Issue #6](https://github.com/AndreHaueisen/flushbar/issues/6#issue-357423067)\n- Fixed issue where the keyboard would hide Flushbar [Issue #7](https://github.com/AndreHaueisen/flushbar/issues/7#issue-357946307)\n\n## [0.8.2] - 2018-08-27\n\n### Changes\n\n- Add `key` property\n- Fixed bug here using flushbar_helper progressIndicator did not show\n- Fixed documentation about progressIndicator\n\n## [0.8.1] - 2018-08-12\n\n### Changes\n\n- Fixed Dart version issue\n\n## [0.8.0] - 2018-08-11\n### Breaking changes\n- Changed the behaviour of linearProgressIndicator to allow the user to controll its progress. See README.md for examples\n### Changes\n- Added a left vertical bar to better convey the humor of the notification. See README.md for examples\n- Title is not mandatory anymore\n\n## [0.7.6] - 2018-08-07\n### Changes\n- Version update to supprt master channel\n\n## [0.7.5] - 2018-07-28\n### Changes\n- Fix bug where keyboard did not show when using a Form\n- Flushbar is now compatible with the master channel\n- Bug fixes\n\n## [0.7.1] - 2018-07-08\n### Changes\n- Flushbar doc update\n\n## [0.7.0] - 2018-07-08\n### Breaking changes\n- Flushbar does not need a global instance anymore\n- Flushbar it now made be used only one time. After it hits the dismissed state, that instance wont work anymore\n- Due to the behaviour above, there is no need to call commitChanges() anymore\n- Flushbar does not need to be within a Stack widget anymore\n- Purged state eliminated\n- FlushbarMorph is now called FlushbarHelper\n\n### Changes\n- README.md is updated\n\n### Known issues\n- When using a Form, the keyboard is not shown. Still figuring out how to solve it.\n\n## [0.5.6] - 2018-06-20\n### Changed\n- Fixed dependency issue\n\n## [0.5.5] - 2018-06-20\n### Changed\n- Updated flushbar_morph\n- Updated sdk version\n\n## [0.5.4] - 2018-06-16\n### Changed\n- Flushbar now animates size changes when commit is called while showing\n- Layout refinements\n\n## [0.5.2] - 2018-06-05\n### Changed\n- User input now receives a Form to facilitate field validation\n\n## [0.5.1] - 2018-06-05\n### Changed\n- Fixed brain fart. Same changes as 0.5.0\n\n## [0.5.0] - 2018-06-05\n### Changed\n- Removed change...() functions. Cascade notation is now recommended\n- Update readme file\n- Default message font size reduced from 16.0 to 14.0\n- Default title font size reduced from 16.0 to 15.0\n\n## [0.4.7] - 2018-06-04\n### Changed\n- Fixed bug with bar duration\n- Blink animation when Flushbar is not dismissed now animates the whole bar\nand is synchronised with content change.\n\n## [0.4.5] - 2018-06-03\n### Added\n- Blink animation when commitChanges() is called when Flushbar is not dismissed. This provides a \nsmooth content transition\n- Helper class to morph Flushbar (FlushbarMorph)\n### Changed\n- Code cleanup\n\n## [0.4.0] - 2018-05-27\n### Added\n- InputTextField\n\n## [0.3.1] - 2018-05-27\n### Changed\n- Fixed bar being automatically called\n- Title and message are not required at construction time\n- Better usage example\n- Removed callback from constructor\n\n## [0.3.0] - 2018-05-27\n### Changed\n- Removed the possibility to chose icon position\n- Widgets are now aligned correctly\n- Documentation improvements\n\n## [0.2.5] - 2018-05-26\n### Changed\n- Bug fixes\n- Moved icon animation into the flushbar\n- changeStatusListener() is now activated on change\n\n## [0.2.0] - 2018-05-24\n### Added\n- Removed requirement for a initial widget\n- OnStatusChanged callback so it is possible to listen to the various Flushbar status\n- The callback can be changed using changeStatusListener()\n- Started working on the README.md file\n\n### Changed\n- IconAwareAnimation is now more general and it is called PulseAnimator\n- Flushbar now accepts an Icon instead of only the IconData and IconColor\n- Alignment changes\n- Default background color\n\n## [0.0.1] - 2018-05-23\n             \n### Added\n- Flushbar creation\n- Single button action\n- Status listeners\n- Left or right icon positioning\n- Top or bottom positioning"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.5615234375,
          "content": "Copyright [2018] [André Haueisen Batista de Lima]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.501953125,
          "content": "# Flushbar\n\nUse this package if you need more customization when notifying your user. For Android developers, it is made to substitute\ntoasts and snackbars. IOS developers, I don't know what you use there, but you will like it.\n\nSee the [install instructions](https://pub.dartlang.org/packages/flushbar#-installing-tab-).\n\n## Quick reference\n\nSince customization requires a lot of properties, here is a quick cheatsheet:\n\nProperty | What does it do\n-------- | ---------------\ntitle    | The title displayed to the user\nmessage  | The message displayed to the user.\ntitleText | Replaces [title]. Although this accepts a [widget], **it is meant to receive [Text] or [RichText]**\nmessageText | Replaces [message]. Although this accepts a [widget], **it is meant to receive [Text] or  [RichText]**\nicon | You can use any widget here, but I recommend [Icon] or [Image] as indication of what kind of message you are displaying. Other widgets may break the layout\nshouldIconPulse | An option to animate the icon (if present). Defaults to true.\nmaxWidth | Used to limit Flushbar width (usually on large screens)\nmargin | Adds a custom margin to Flushbar\npadding | Adds a custom padding to Flushbar. The default follows material design guide line\nborderRadius | Adds a radius to all corners of Flushbar. Best combined with [margin]. I do not recommend using it with [showProgressIndicator] or [leftBarIndicatorColor]\nborderColor | Adds a border to every side of Flushbar. I do not recommend using it with [showProgressIndicator] or [leftBarIndicatorColor]\nborderWidth | Changes the width of the border if [borderColor] is specified\nbackgroundColor | Flushbar background color. Will be ignored if [backgroundGradient] is not null.\nleftBarIndicatorColor | If not null, shows a left vertical bar to better indicate the humor of the notification. It is not possible to use it with a [Form] and I do not recommend using it with [LinearProgressIndicator].\nboxShadows | The shadows generated by Flushbar. Leave it null if you don't want a shadow. You can use more than one if you feel the need. Check [this example](https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/material/shadows.dart)\nbackgroundGradient | Flushbar background gradient. Makes [backgroundColor] be ignored.\nmainButton | Use if you need an action from the user. [FlatButton] is recommended here.\nonTap | A callback that registers the user's click anywhere. An alternative to [mainButton]\nduration | How long until Flushbar will hide itself (be dismissed). To make it indefinite, leave it null.\nisDismissible | Determines if the user can swipe or click the overlay (if [routeBlur] > 0) to dismiss. It is recommended that you set [duration] != null if this is false. If the user swipes to dismiss or clicks the overlay, no value will be returned.\ndismissDirection | FlushbarDismissDirection.VERTICAL by default. Can also be [FlushbarDismissDirection.HORIZONTAL] in which case both left and right dismiss are allowed.\nflushbarPosition | Flushbar can be based on [FlushbarPosition.TOP] or on [FlushbarPosition.BOTTOM] of your screen. [FlushbarPosition.BOTTOM] is the default.\nflushbarStyle | Flushbar can be floating or be grounded to the edge of the screen. If grounded, I do not recommend using [margin] or [borderRadius]. [FlushbarStyle.FLOATING] is the default\nforwardAnimationCurve | The [Curve] animation used when show() is called. [Curves.easeOut] is default.\nreverseAnimationCurve | The [Curve] animation used when dismiss() is called. [Curves.fastOutSlowIn] is default.\nanimationDuration | Use it to speed up or slow down the animation duration\nshowProgressIndicator | true if you want to show a [LinearProgressIndicator]. If [progressIndicatorController] is null, an infinite progress indicator will be shown\nprogressIndicatorController | An optional [AnimationController] when you want to control the progress of your [LinearProgressIndicator]. You are responsible for controlling the progress\nprogressIndicatorBackgroundColor | a [LinearProgressIndicator] configuration parameter.\nprogressIndicatorValueColor | a [LinearProgressIndicator] configuration parameter.\nbarBlur | Default is 0.0. If different than 0.0, blurs only Flushbar's background. To take effect, make sure your [backgroundColor] has some opacity. The greater the value, the greater the blur.\nblockBackgroundInteraction | Determines if user can interact with the screen behind it. If this is false, [routeBlur] and [routeColor] will be ignored\nrouteBlur | Default is 0.0. If different than 0.0, creates a blurred overlay that prevents the user from interacting with the screen. The greater the value, the greater the blur. It does not take effect if [blockBackgroundInteraction] is false\nrouteColor | Default is [Colors.transparent]. Only takes effect if [routeBlur] > 0.0. Make sure you use a color with transparency e.g. `Colors.grey[600].withOpacity(0.2)`. It does not take effect if [blockBackgroundInteraction] is false\nuserInputForm | A [TextFormField] in case you want a simple user input. Every other widget is ignored if this is not null.\nonStatusChanged | a callback for you to listen to the different Flushbar status\n\n#### Quick tip\n\nIf you use a lot of those properties, it makes sense to make a factory to help with  your Flushbar's base appearance.\nThings like shadows, padding, margins, text styles usually don't change within the app. Take a look at FlushbarHelper class and use it as an example.\n\n## We are on YouTube!\n\nWhile studying Flutter I stumbled on two amazing tutorials on how to use Flushbar.\nMake sure you show those guys some love.\n1. A beginners [tutorial](https://www.youtube.com/watch?v=KNpxyyA8MDA) by **Matej Rešetár**\n2. A more [advanced usage](https://www.youtube.com/watch?v=FRCvqkyeCzQ) by **Javier González Rodríguez**\n\n## Getting Started\n\nThe examples bellow were updated for version 1.3.0. Changes might have been made. See the [changelog](CHANGELOG.md) if any of the examples do not\nreflect Flushbar's current state.\n\n### The possibilities\n\n![Flushbar Animated](readme_resources/flushbar_animated.gif)\n\n### A basic Flushbar\n\nThe most basic Flushbar uses only a message. Failing to provide it before you call `show()` will result in a runtime error.\n`Duration`, if not provided, will create an infinite Flushbar, only dismissible by code, back button clicks, or a drag (case `isDismissible` is set to `true`).\n\n- Note that only `message` is a required parameter. All the other ones are optional\n\n```dart\nclass YourAwesomeApp extends StatelessWidget {\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'YourAwesomeApp',\n      home: Scaffold(\n        Container(\n          child: Center(\n            child: MaterialButton(\n              onPressed: (){\n                Flushbar(\n                  title:  \"Hey Ninja\",\n                  message:  \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n                  duration:  Duration(seconds: 3),              \n                )..show(context);\n              },\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n\n![Basic Example](readme_resources/basic_bar.png)\n\n### Lets get crazy Flushbar\n\nHere is how customized things can get.\n\n```dart\nFlushbar(\n      title: \"Hey Ninja\",\n      message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n      flushbarPosition: FlushbarPosition.TOP,\n      flushbarStyle: FlushbarStyle.FLOATING,\n      reverseAnimationCurve: Curves.decelerate,\n      forwardAnimationCurve: Curves.elasticOut,\n      backgroundColor: Colors.red,\n      boxShadows: [BoxShadow(color: Colors.blue[800], offset: Offset(0.0, 2.0), blurRadius: 3.0)],\n      backgroundGradient: LinearGradient(colors: [Colors.blueGrey, Colors.black]),\n      isDismissible: false,\n      duration: Duration(seconds: 4),\n      icon: Icon(\n        Icons.check,\n        color: Colors.greenAccent,\n      ),\n      mainButton: FlatButton(\n        onPressed: () {},\n        child: Text(\n          \"CLAP\",\n          style: TextStyle(color: Colors.amber),\n        ),\n      ),\n      showProgressIndicator: true,\n      progressIndicatorBackgroundColor: Colors.blueGrey,\n      titleText: Text(\n        \"Hello Hero\",\n        style: TextStyle(\n            fontWeight: FontWeight.bold, fontSize: 20.0, color: Colors.yellow[600], fontFamily: \"ShadowsIntoLightTwo\"),\n      ),\n      messageText: Text(\n        \"You killed that giant monster in the city. Congratulations!\",\n        style: TextStyle(fontSize: 18.0, color: Colors.green, fontFamily: \"ShadowsIntoLightTwo\"),\n      ),\n    );\n```\n\n![Complete Example](readme_resources/complete_bar.png)\n\n- Don't forget to call `show()` or the bar will stay hidden.\n- To deactivate any of those properties, pass `null` to it.\n\n### Styles\nFlushbar can be either floating or grounded to the edge of the screen.\nI don't recommend using `margin` or `borderRadius` if you chose `FlushbarStyle.GROUNDED` style.\n\n```dart\nFlushbar(flushbarStyle: FlushbarStyle.FLOATING)\n```\nor\n```dart\nFlushbar(flushbarStyle: FlushbarStyle.GROUNDED)\n```\nFloating Style            |  Grounded Style\n:------------------------------------------------------:|:-------------------------------------------------------:\n![Floating Style](readme_resources/floating_style.png)  |  ![Grounded Style](readme_resources/grounded_style.png) \n\n### Padding and Border Radius\nYou can give it some padding and a border radius. Works best with `FlushbarStyle.FLOATING`\n\n```dart\nFlushbar(\n  margin: EdgeInsets.all(8),\n  borderRadius: 8,\n);\n  \n```\n![Padding and Radius](readme_resources/padding_and_radius.png)\n\n### Left indicator bar\n\nFlushbar has a lateral bar to better convey the humor of the notification. To use it, simple give `leftBarIndicatorColor` a color.\n\n```dart\nFlushbar(\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n  icon: Icon(\n    Icons.info_outline,\n    size: 28.0,\n    color: Colors.blue[300],\n    ),\n  duration: Duration(seconds: 3),\n  leftBarIndicatorColor: Colors.blue[300],\n)..show(context);\n```\n\n![Left indicator example](readme_resources/left_bar_indicator.png)\n\n### Customize your text\n\nIf you need a more fancy text, you can use [Text](https://docs.flutter.io/flutter/widgets/Text-class.html) or [RichText](https://api.flutter.dev/flutter/widgets/RichText-class.html)\nand pass it to the `titleText` or `messageText` variables.\n\n- Note that `title` will be ignored if `titleText` is not `null`\n- Note that `message` will be ignored if `messageText` is not `null`\n\n```dart\nFlushbar(\n  title: \"Hey Ninja\", //ignored since titleText != null\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\", //ignored since messageText != null\n  titleText: Text(\"Hello Hero\", style: TextStyle(fontWeight: FontWeight.bold, fontSize: 20.0 color: Colors.yellow[600], fontFamily:\"ShadowsIntoLightTwo\"),),\n  messageText: Text(\"You killed that giant monster in the city. Congratulations!\", style: TextStyle(fontSize: 16.0, color: Colors.green[fontFamily: \"ShadowsIntoLightTwo\"),),\n)..show(context);\n```\n\n![Customized Text](readme_resources/text_bar.png)\n\n### Customize background and shadow\n\nYou can paint the background with any color you want. You can use any shadow you want.\nJust give it a `backgroundColor` and `boxShadows`.\n\n```dart\nFlushbar(\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n  backgroundColor: Colors.red,\n  boxShadows: [BoxShadow(color: Colors.red[800], offset: Offset(0.0, 2.0), blurRadius: 3.0,)],\n)..show(context);\n```\n\n![Background and Shadow](readme_resources/background_color_bar.png)\n\nWant a gradient in the background? No problem.\n\n- Note that `backgroundColor` will be ignored while `backgroundGradient` is not `null`\n\n```dart\nFlushbar(\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n  backgroundGradient: LinearGradient(colors: [Colors.blue, Colors.teal]),\n  backgroundColor: Colors.red,\n  boxShadows: [BoxShadow(color: Colors.blue[800], offset: Offset(0.0, 2.0), blurRadius: 3.0,)],\n)..show(context);\n```\n\n![Background Gradient](readme_resources/gradient_bar.png)\n\n### Icon and button action\n\nLet us put a Icon that has a `PulseAnimation`. Icons have this animation by default and cannot be changed as of now.\nAlso, let us put a button. Have you noticed that `show()` returns a `Future`?\nThis Future will yield a value when you call `dismiss([T result])`.\nI recommend that you specify the `result` generic type if you intend to collect an user input.\n\n```dart\nFlushbar flush;\nbool _wasButtonClicked;\n```\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Container(\n      child: Center(\n        child: MaterialButton(\n          onPressed: () {\n            flush = Flushbar<bool>(\n              title: \"Hey Ninja\",\n              message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n              icon: Icon(\n                       Icons.info_outline,\n                       color: Colors.blue,),\n              mainButton: FlatButton(\n                             onPressed: () {\n                                 flush.dismiss(true); // result = true\n                               },\n                             child: Text(\n                               \"ADD\",\n                               style: TextStyle(color: Colors.amber),\n                             ),\n                           ),) // <bool> is the type of the result passed to dismiss() and collected by show().then((result){})\n              ..show(context).then((result) {\n                setState(() { // setState() is optional here\n                  _wasButtonClicked = result;\n                });\n              });\n          },\n        ),\n      ),\n    );\n  }\n```\n\n![Icon and Button](readme_resources/icon_and_button_bar.png)\n\n### Flushbar position\n\nFlushbar can be at `FlushbarPosition.BOTTOM` or `FlushbarPosition.TOP`.\n\n```dart\nFlushbar(\n  flushbarPosition: FlushbarPosition.TOP,\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",)..show(context);\n```\n\n![Bar position](readme_resources/position_bar.png)\n\n### Duration and dismiss policy\n\nBy default, Flushbar is infinite. To set a duration, use the `duration` property.\nBy default, Flushbar is dismissible by the user. A right or left drag will dismiss it.\nSet `isDismissible` to `false` to change this behaviour.\n\n```dart\nFlushbar(\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n  duration: Duration(seconds: 3),\n  isDismissible: false,\n)..show(context);\n```\n\n### Progress Indicator\n\nIf you are loading something, use a [LinearProgressIndicator](https://docs.flutter.io/flutter/material/LinearProgressIndicator-class.html)\nIf you want an undetermined progress indicator, do not set `progressIndicatorController`.\nIf you want a determined progress indicator, you now have full control over the progress since you own the `AnimationController`\n\n- There is no need to add a listener to your controller just to call `setState(){}`. Once you pass in your controller, `Flushbar` will do this automatically. Just make sure you call `_controller.forward()`\n\n```dart\n\nAnimationController _controller = AnimationController(\n      vsync: this,\n      duration: Duration(seconds: 3),\n    );\n\nFlushbar(\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n  showProgressIndicator: true,\n  progressIndicatorController: _controller,\n  progressIndicatorBackgroundColor: Colors.grey[800],\n)..show(context);\n```\n\n### Show and dismiss animation curves\n\nYou can set custom animation curves using `forwardAnimationCurve` and `reverseAnimationCurve`.\n\n```dart\nFlushbar(\n  forwardAnimationCurve: Curves.decelerate,\n  reverseAnimationCurve: Curves.easeOut,\n  title: \"Hey Ninja\",\n  message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\",\n)..show(context);\n```\n\n### Listen to status updates\n\nYou can listen to status update using the `onStatusChanged` property.\n\n- Note that when you pass a new listener using `onStatusChanged`, it will activate once immediately so you can check in what state the Flushbar is.\n\n```dart\n\nFlushbar flushbar = Flushbar(title: \"Hey Ninja\", message: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry\");\n\n  flushbar\n    ..onStatusChanged = (FlushbarStatus status) {\n      switch (status) {\n        case FlushbarStatus.SHOWING:\n          {\n            doSomething();\n            break;\n          }\n        case FlushbarStatus.IS_APPEARING:\n          {\n            doSomethingElse();\n            break;\n          }\n        case FlushbarStatus.IS_HIDING:\n          {\n            doSomethingElse();\n            break;\n          }\n        case FlushbarStatus.DISMISSED:\n          {\n            doSomethingElse();\n            break;\n          }\n      }\n    }\n    ..show(context);\n\n```\n\n### Input text\n\nSometimes we just want a simple user input. Use the property`userInputForm`.\n\n- Note that buttons, messages, and icons will be ignored if `userInputForm != null`\n- `dismiss(result)` will yield result. `dismiss()` will yield null.\n\n```dart\nFlushbar<List<String>> flush;\nfinal GlobalKey<FormState> _formKey = GlobalKey<FormState>();\n```\n\n```dart\nTextFormField getFormField(String text) {\n    return TextFormField(\n      initialValue: text,\n      style: TextStyle(color: Colors.white),\n      maxLength: 100,\n      maxLines: 1,\n      maxLengthEnforced: true,\n      decoration: InputDecoration(\n          fillColor: Colors.white10,\n          filled: true,\n          icon: Icon(\n            Icons.label,\n            color: Colors.grey[500],\n          ),\n          border: UnderlineInputBorder(),\n          helperText: \"Helper Text\",\n          helperStyle: TextStyle(color: Colors.grey),\n          labelText: \"Label Text\",\n          labelStyle: TextStyle(color: Colors.grey)),\n    );\n  }\n\nflush = Flushbar<List<String>>(\n  userInputForm = Form(\n          key: _formKey,\n          child: Column(\n            mainAxisSize: MainAxisSize.min,\n            children: [\n              getTextFormField(\"Initial Value\"),\n              getTextFormField(\"Initial Value Two\"),\n            ]\n            Align(\n              alignment: Alignment.bottomRight,\n              child: Padding(\n                padding: const EdgeInsets.only(top: 8.0),\n                child: MaterialButton(\n                  textColor: Colors.amberAccent,\n                  child: Text(\"SUBMIT\"),\n                  onPressed: () {\n                    flush.dismiss([_controller1.value.text, _controller2.value.text]);\n                  },\n                ),\n              ),\n            )\n          ],),),\n)..show(context).then((result) {\n        if (result != null) {\n          String userInput1 = result[0];\n          String userInput2 = result[1];\n        }\n      });\n```\n\nThis example tries to mimic the [Material Design style guide](https://material.io/design/components/text-fields.html#anatomy)\n\n![Bar input](readme_resources/input_bar.png)\n\n## Flushbar Helper\n\nI made a helper class to facilitate the creation of the most common Flushbars.\n\n```dart\nFlushbarHelper.createSuccess({message, title, duration});\nFlushbarHelper.createInformation({message, title, duration});\nFlushbarHelper.createError({message, title, duration});\nFlushbarHelper.createAction({message, title, duration flatButton});\nFlushbarHelper.createLoading({message,linearProgressIndicator, title, duration, progressIndicatorController, progressIndicatorBackgroundColor});\nFlushbarHelper.createInputFlushbar({textForm});\n```\n\n## Make it rain\n\n<a href=\"https://www.buymeacoffee.com/AndreHaueisen\" target=\"_blank\"><img src=\"https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\" alt=\"Buy Me A Coffee\" style=\"height: auto !important;width: auto !important;\" ></a>"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "flushbar.iml",
          "type": "blob",
          "size": 0.958984375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/lib\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.idea\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Android API 25 Platform\" jdkType=\"Android SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Dart Packages\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Dart SDK\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Flutter Plugins\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 3.9453125,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  archive:\n    dependency: transitive\n    description:\n      name: archive\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.0.13\"\n  args:\n    dependency: transitive\n    description:\n      name: args\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.6.0\"\n  async:\n    dependency: transitive\n    description:\n      name: async\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.4.1\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.0.0\"\n  charcode:\n    dependency: transitive\n    description:\n      name: charcode\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.1.3\"\n  collection:\n    dependency: transitive\n    description:\n      name: collection\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.14.12\"\n  convert:\n    dependency: transitive\n    description:\n      name: convert\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.1.1\"\n  crypto:\n    dependency: transitive\n    description:\n      name: crypto\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.1.4\"\n  flutter:\n    dependency: \"direct main\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  flutter_test:\n    dependency: \"direct dev\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  image:\n    dependency: transitive\n    description:\n      name: image\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.1.12\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"0.12.6\"\n  meta:\n    dependency: transitive\n    description:\n      name: meta\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.1.8\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.6.4\"\n  petitparser:\n    dependency: transitive\n    description:\n      name: petitparser\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.4.0\"\n  quiver:\n    dependency: transitive\n    description:\n      name: quiver\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.1.3\"\n  sky_engine:\n    dependency: transitive\n    description: flutter\n    source: sdk\n    version: \"0.0.99\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.7.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.9.3\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.0.0\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.0.5\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.1.0\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"0.2.15\"\n  typed_data:\n    dependency: transitive\n    description:\n      name: typed_data\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"1.1.6\"\n  vector_math:\n    dependency: transitive\n    description:\n      name: vector_math\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"2.0.8\"\n  xml:\n    dependency: transitive\n    description:\n      name: xml\n      url: \"https://pub.dartlang.org\"\n    source: hosted\n    version: \"3.6.1\"\nsdks:\n  dart: \">=2.7.2 <3.0.0\"\n  flutter: \">=1.5.0 <2.0.0\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 1.7255859375,
          "content": "name: flushbar\ndescription: A flexible widget for user notification. Customize your text, button, duration, animations and much more. For Android devs, it is made to replace Snackbars and Toasts.\nversion: 1.10.4\nhomepage: https://github.com/AndreHaueisen/flushbar\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nenvironment:\n  sdk: \">=2.7.2 <3.0.0\"\n  flutter: \">=1.5.0 <2.0.0\"\n\n# For information on the generic Dart part of this file, see the\n# following page: https://www.dartlang.org/tools/pub/pubspec\n\n# publish command: flutter packages pub publish --dry-run\n\n# The following section is specific to Flutter.\nflutter:\n\n  # To add assets to your package, add an assets section, like this:\n  # assets:\n  #  - images/a_dot_burr.jpeg\n  #  - images/a_dot_ham.jpeg\n  #\n  # For details regarding assets in packages, see\n  # https://flutter.io/assets-and-images/#from-packages\n  #\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.io/assets-and-images/#resolution-aware.\n\n  # To add custom fonts to your package, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts in packages, see\n  # https://flutter.io/custom-fonts/#from-packages\n"
        },
        {
          "name": "readme_resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}