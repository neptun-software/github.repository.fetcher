{
  "metadata": {
    "timestamp": 1736710586296,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fluttercommunity/get_it",
      "stars": 1370,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1640625,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\nend_of_line = lf\ninsert_final_newline = true\ncharset = utf-8\nmax_line_length = 80\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 8.8271484375,
          "content": "\r\n# Created by https://www.gitignore.io/api/flutter,jetbrains,androidstudio\r\n# Edit at https://www.gitignore.io/?templates=flutter,jetbrains,androidstudio\r\n\r\n\r\n*.iml\r\n*.class\r\n.gradle\r\n/local.properties\r\n/.idea/workspace.xml\r\n/.idea/libraries\r\n.DS_Store\r\n/build\r\n/captures\r\nGeneratedPluginRegistrant.java\r\n\r\nstatus.txt\r\n\r\n*.code-workspace\r\n\r\n### AndroidStudio ###\r\n# Covers files to be ignored for android development using Android Studio.\r\n\r\n# Built application files\r\n*.apk\r\n*.ap_\r\n\r\n# Files for the ART/Dalvik VM\r\n*.dex\r\n\r\n# Java class files\r\n*.class\r\n\r\n# Generated files\r\nbin/\r\ngen/\r\nout/\r\n\r\n\r\n# Flutter/Dart/Pub related\r\n**/doc/api/\r\n.dart_tool/\r\n.flutter-plugins\r\n.packages\r\n.pub-cache/\r\n.pub/\r\nbuild/\r\n\r\n# Gradle files\r\n.gradle\r\n.gradle/\r\nandroid/.gradle\r\nandroid/.gradle/\r\nbuild/\r\n\r\n# Signing files\r\n.signing/\r\n\r\n# Local configuration file (sdk path, etc)\r\nlocal.properties\r\n\r\n# Proguard folder generated by Eclipse\r\nproguard/\r\n\r\n# Log Files\r\n*.log\r\n\r\n# Android Studio\r\n/*/build/\r\n/*/local.properties\r\n/*/out\r\n/*/*/build\r\n/*/*/production\r\ncaptures/\r\n.navigation/\r\n*.ipr\r\n*~\r\n*.swp\r\n\r\n# Android Patch\r\ngen-external-apklibs\r\n\r\n# External native build folder generated in Android Studio 2.2 and later\r\n.externalNativeBuild\r\n\r\n# NDK\r\nobj/\r\n\r\n# IntelliJ IDEA\r\n*.iml\r\n*.iws\r\n/out/\r\n\r\n# User-specific configurations\r\nandroid/.idea/\r\n.idea/caches/\r\n.idea/libraries/\r\n.idea/shelf/\r\n.idea/workspace.xml\r\n.idea/tasks.xml\r\n.idea/.name\r\n.idea/compiler.xml\r\n.idea/copyright/profiles_settings.xml\r\n.idea/encodings.xml\r\n.idea/misc.xml\r\n.idea/modules.xml\r\n.idea/scopes/scope_settings.xml\r\n.idea/dictionaries\r\n.idea/vcs.xml\r\n.idea/jsLibraryMappings.xml\r\n.idea/datasources.xml\r\n.idea/dataSources.ids\r\n.idea/sqlDataSources.xml\r\n.idea/dynamic.xml\r\n.idea/uiDesigner.xml\r\n.idea/assetWizardSettings.xml\r\n\r\n# OS-specific files\r\n.DS_Store\r\n.DS_Store?\r\n._*\r\n.Spotlight-V100\r\n.Trashes\r\nehthumbs.db\r\nThumbs.db\r\n\r\n# Legacy Eclipse project files\r\n.classpath\r\n.project\r\n.cproject\r\n.settings/\r\n\r\n# Mobile Tools for Java (J2ME)\r\n.mtj.tmp/\r\n\r\n# Package Files #\r\n*.war\r\n*.ear\r\n\r\n# virtual machine crash logs (Reference: http://www.java.com/en/download/help/error_hotspot.xml)\r\nhs_err_pid*\r\n\r\n## Plugin-specific files:\r\n\r\n# mpeltonen/sbt-idea plugin\r\n.idea_modules/\r\n\r\n# JIRA plugin\r\natlassian-ide-plugin.xml\r\n\r\n# Mongo Explorer plugin\r\n.idea/mongoSettings.xml\r\n\r\n# Crashlytics plugin (for Android Studio and IntelliJ)\r\ncom_crashlytics_export_strings.xml\r\ncrashlytics.properties\r\ncrashlytics-build.properties\r\nfabric.properties\r\n\r\n### AndroidStudio Patch ###\r\n\r\n!/gradle/wrapper/gradle-wrapper.jar\r\n\r\n### Flutter ###\r\n# Flutter/Dart/Pub related\r\n**/doc/api/\r\n.dart_tool/\r\n.flutter-plugins\r\n.packages\r\n.pub-cache/\r\n.pub/\r\n\r\n# Android related\r\n**/android/**/gradle-wrapper.jar\r\n**/android/.gradle\r\n**/android/captures/\r\n**/android/gradlew\r\n**/android/gradlew.bat\r\n**/android/local.properties\r\n**/android/**/GeneratedPluginRegistrant.java\r\n\r\n# iOS/XCode related\r\n**/ios/**/*.mode1v3\r\n**/ios/**/*.mode2v3\r\n**/ios/**/*.moved-aside\r\n**/ios/**/*.pbxuser\r\n**/ios/**/*.perspectivev3\r\n**/ios/**/*sync/\r\n**/ios/**/.sconsign.dblite\r\n**/ios/**/.tags*\r\n**/ios/**/.vagrant/\r\n**/ios/**/DerivedData/\r\n**/ios/**/Icon?\r\n**/ios/**/Pods/\r\n**/ios/**/.symlinks/\r\n**/ios/**/profile\r\n**/ios/**/xcuserdata\r\n**/ios/.generated/\r\n**/ios/Flutter/App.framework\r\n**/ios/Flutter/Flutter.framework\r\n**/ios/Flutter/Generated.xcconfig\r\n**/ios/Flutter/app.flx\r\n**/ios/Flutter/app.zip\r\n**/ios/Flutter/flutter_assets/\r\n**/ios/ServiceDefinitions.json\r\n**/ios/Runner/GeneratedPluginRegistrant.*\r\n\r\n# Exceptions to above rules.\r\n!**/ios/**/default.mode1v3\r\n!**/ios/**/default.mode2v3\r\n!**/ios/**/default.pbxuser\r\n!**/ios/**/default.perspectivev3\r\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\r\n\r\n### JetBrains ###\r\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and WebStorm\r\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\r\n\r\n# User-specific stuff\r\n.idea/**/workspace.xml\r\n.idea/**/tasks.xml\r\n.idea/**/usage.statistics.xml\r\n.idea/**/dictionaries\r\n.idea/**/shelf\r\n\r\n# Generated files\r\n.idea/**/contentModel.xml\r\n\r\n# Sensitive or high-churn files\r\n.idea/**/dataSources/\r\n.idea/**/dataSources.ids\r\n.idea/**/dataSources.local.xml\r\n.idea/**/sqlDataSources.xml\r\n.idea/**/dynamic.xml\r\n.idea/**/uiDesigner.xml\r\n.idea/**/dbnavigator.xml\r\n\r\n# Gradle\r\n.idea/**/gradle.xml\r\n.idea/**/libraries\r\n\r\n# Gradle and Maven with auto-import\r\n# When using Gradle or Maven with auto-import, you should exclude module files,\r\n# since they will be recreated, and may cause churn.  Uncomment if using\r\n# auto-import.\r\n# .idea/modules.xml\r\n# .idea/*.iml\r\n# .idea/modules\r\n\r\n# CMake\r\ncmake-build-*/\r\n\r\n# Mongo Explorer plugin\r\n.idea/**/mongoSettings.xml\r\n\r\n# File-based project format\r\n\r\n# IntelliJ\r\n\r\n# mpeltonen/sbt-idea plugin\r\n\r\n# JIRA plugin\r\n\r\n# Cursive Clojure plugin\r\n.idea/replstate.xml\r\n\r\n# Crashlytics plugin (for Android Studio and IntelliJ)\r\n\r\n# Editor-based Rest Client\r\n.idea/httpRequests\r\n\r\n# Android studio 3.1+ serialized cache file\r\n.idea/caches/build_file_checksums.ser\r\n\r\n# JetBrains templates\r\n**___jb_tmp___\r\n\r\n### JetBrains Patch ###\r\n# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721\r\n\r\n# *.iml\r\n# modules.xml\r\n# .idea/misc.xml\r\n# *.ipr\r\n\r\n# Sonarlint plugin\r\n.idea/sonarlint\r\n\r\n# End of https://www.gitignore.io/api/flutter,jetbrains,androidstudio\r\n\r\n\r\n# Created by https://www.gitignore.io/api/linux,xcode,macos,android,windows\r\n# Edit at https://www.gitignore.io/?templates=linux,xcode,macos,android,windows\r\n\r\n### Android ###\r\n# Built application files\r\n*.apk\r\n*.ap_\r\n*.aab\r\n\r\n# Files for the ART/Dalvik VM\r\n*.dex\r\n\r\n# Java class files\r\n*.class\r\n\r\n# Generated files\r\nbin/\r\ngen/\r\nout/\r\n\r\n# Gradle files\r\n.gradle/\r\nbuild/\r\n\r\n# Local configuration file (sdk path, etc)\r\nlocal.properties\r\n\r\n# Proguard folder generated by Eclipse\r\nproguard/\r\n\r\n# Log Files\r\n*.log\r\n\r\n# Android Studio Navigation editor temp files\r\n.navigation/\r\n\r\n# Android Studio captures folder\r\ncaptures/\r\n\r\n# IntelliJ\r\n*.iml\r\n.idea/workspace.xml\r\n.idea/tasks.xml\r\n.idea/gradle.xml\r\n.idea/assetWizardSettings.xml\r\n.idea/dictionaries\r\n.idea/libraries\r\n.idea/caches\r\n# Android Studio 3 in .gitignore file.\r\n.idea/caches/build_file_checksums.ser\r\n.idea/modules.xml\r\n\r\n# Keystore files\r\n# Uncomment the following lines if you do not want to check your keystore files in.\r\n#*.jks\r\n#*.keystore\r\n\r\n# External native build folder generated in Android Studio 2.2 and later\r\n.externalNativeBuild\r\n\r\n# Google Services (e.g. APIs or Firebase)\r\n# google-services.json\r\n\r\n# Freeline\r\nfreeline.py\r\nfreeline/\r\nfreeline_project_description.json\r\n\r\n# fastlane\r\nfastlane/report.xml\r\nfastlane/Preview.html\r\nfastlane/screenshots\r\nfastlane/test_output\r\nfastlane/readme.md\r\n\r\n# Version control\r\nvcs.xml\r\n\r\n# lint\r\nlint/intermediates/\r\nlint/generated/\r\nlint/outputs/\r\nlint/tmp/\r\n# lint/reports/\r\n\r\n### Android Patch ###\r\ngen-external-apklibs\r\noutput.json\r\n\r\n### Linux ###\r\n*~\r\n\r\n# temporary files which can be created if a process still has a handle open of a deleted file\r\n.fuse_hidden*\r\n\r\n# KDE directory preferences\r\n.directory\r\n\r\n# Linux trash folder which might appear on any partition or disk\r\n.Trash-*\r\n\r\n# .nfs files are created when an open file is removed but is still being accessed\r\n.nfs*\r\n\r\n### macOS ###\r\n# General\r\n.DS_Store\r\n.AppleDouble\r\n.LSOverride\r\n\r\n# Icon must end with two \\r\r\nIcon\r\n\r\n# Thumbnails\r\n._*\r\n\r\n# Files that might appear in the root of a volume\r\n.DocumentRevisions-V100\r\n.fseventsd\r\n.Spotlight-V100\r\n.TemporaryItems\r\n.Trashes\r\n.VolumeIcon.icns\r\n.com.apple.timemachine.donotpresent\r\n\r\n# Directories potentially created on remote AFP share\r\n.AppleDB\r\n.AppleDesktop\r\nNetwork Trash Folder\r\nTemporary Items\r\n.apdisk\r\n\r\n### Windows ###\r\n# Windows thumbnail cache files\r\nThumbs.db\r\nehthumbs.db\r\nehthumbs_vista.db\r\n\r\n# Dump file\r\n*.stackdump\r\n\r\n# Folder config file\r\n[Dd]esktop.ini\r\n\r\n# Recycle Bin used on file shares\r\n$RECYCLE.BIN/\r\n\r\n# Windows Installer files\r\n*.cab\r\n*.msi\r\n*.msix\r\n*.msm\r\n*.msp\r\n\r\n# Windows shortcuts\r\n*.lnk\r\n\r\n### Xcode ###\r\n# Xcode\r\n#\r\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\r\n\r\n## User settings\r\nxcuserdata/\r\n\r\n## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)\r\n*.xcscmblueprint\r\n*.xccheckout\r\n\r\n## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)\r\nDerivedData/\r\n*.moved-aside\r\n*.pbxuser\r\n!default.pbxuser\r\n*.mode1v3\r\n!default.mode1v3\r\n*.mode2v3\r\n!default.mode2v3\r\n*.perspectivev3\r\n!default.perspectivev3\r\n\r\n### Xcode Patch ###\r\n*.xcodeproj/*\r\n!*.xcodeproj/project.pbxproj\r\n!*.xcodeproj/xcshareddata/\r\n!*.xcworkspace/contents.xcworkspacedata\r\n/*.gcno\r\n**/xcshareddata/WorkspaceSettings.xcsettings\r\n\r\n# End of https://www.gitignore.io/api/linux,xcode,macos,android,windows\r\n\r\n.flutter-plugins\r\n.packages\r\nandroid/local.properties\r\n.vscode/settings.json\r\nexample/ios/Flutter/flutter_export_environment.sh\r\n\r\n# code coverage files\r\ncoverage\r\n"
        },
        {
          "name": ".idea",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 12.8525390625,
          "content": "## [8.0.3]\r\n\r\n* fixing linter warning thanks to @PatrickChrestin\r\n\r\n## [8.0.2]\r\n\r\n* Fixes by @kuhnroyal and  @ArtAhmetajCR who spotted some flaws in my latest changes. Thanks a lot\r\n\r\n## [8.0.1]\r\n\r\n* Bugfixes and improvements for certain edge cases thanks to @KnightOfBlackLily and @kuhnroyal \r\n\r\n## [8.0.0]\r\n\r\n* official new release with all the changes\r\n\r\n## [8.0.0-pre-7] - 12.08.2024 \r\n\r\n* adding cachedFatories and better scope protection against race conditions\r\n\r\n## [8.0.0-pre-6] - 11.08.2024 \r\n\r\n* testing weak references in lazySingeltons\r\n\r\n## [8.0.0-pre-5] - 25.06.2024 \r\n\r\n* adding `changeTypeInstanceName`\r\n\r\n## [8.0.0-pre-4] - 03.06.2024 \r\n\r\n* fixing bug in `unregister` that happened if you tried to unregister a named registration by providing an instance instead of the type and the instance name\r\n\r\n## [8.0.0-pre-3] - 31.05.2024\r\n\r\n* releaseInstance will now throw if the instance isn't registered\r\n\r\n## [8.0.0-pre-2] - 29.05.2024 \r\n\r\n* fixing negative reference count\r\n\r\n## [8.0.0-pre-1] - 26.05.2024 \r\n\r\n* `getAll()` and `getAllAsync()` now have a `fromAllScopes` parameter.\r\n* adding safeguards according to https://github.com/fluttercommunity/get_it/issues/364 to make it impossible to call `push/popScope` while the `init()` function of another pushScope is running.\r\n* fixed an unsafe type check when using a runtime type to access an object in get_it.\r\n\r\n## [7.7.0] - 15.04.2024 \r\n\r\n* thanks to the PR by @kasefuchs https://github.com/fluttercommunity/get_it/pull/361 `getAll` is now available in an async version too.\r\n\r\n## [7.6.9] - 11.04.2024\r\n\r\n* fig for bug that was introduced in 7.6.8 https://github.com/fluttercommunity/get_it/issues/358\r\n\r\n## [7.6.8] - 03.04.2024\r\n\r\n* merged PR by @venkata-reddy-dev https://github.com/fluttercommunity/get_it/pull/356 adding new `skipDoubleRegistration` flag for testing\r\n\r\n## [7.6.7] - 18.01.2024\r\n\r\n* merged PR by @subzero911  https://github.com/fluttercommunity/get_it/pull/330\r\n\r\n## [7.6.6] - 04.01.2024\r\n\r\n* Thanks to PR by @bvoq `getIt.reset, getIt.popScope, getIt.dropScope` now dispose registered objects in the reverse order in which they were registered.\r\n\r\n## [7.6.5] - 25.09.2023\r\n\r\n* updated Discord link\r\n\r\n## [7.6.4] - 04.09.2023\r\n\r\n* fixed the throwing of a StateError that was previously thrown as String\r\n\r\n## [7.6.3] - 04.09.2023\r\n\r\n* push new version because pub didn't list this one\r\n\r\n## [7.6.2] - 31.08.2023\r\n\r\n* fix linter error\r\n\r\n## [7.6.1] - 31.08.2023\r\n\r\n* added `isFinal` scope parameter which fixes https://github.com/fluttercommunity/get_it/issues/326\r\n* version bump of dependencies and updates readme\r\n\r\n## [7.6.0] - 09.05.2023\r\n\r\n* merged PR by lacopiroty https://github.com/fluttercommunity/get_it/pull/297 which now allows to access objects inside GetIt by runtime type too like\r\n```Dart\r\n    getIt.registerSingleton(TestClass());\r\n\r\n    final instance1 = getIt.get(type: TestClass);\r\n\r\n    expect(instance1 is TestClass, true);\r\n```\r\n* fix for https://github.com/fluttercommunity/get_it/issues/299 \r\n* fix for https://github.com/fluttercommunity/get_it/issues/300    \r\n\r\n\r\n## [7.5.0] - 07.05.2023\r\n\r\n* new function `dropScope(scopeName)` which allows to remove and dispose any named scope even if it's not the top one. Great PR by @olexale https://github.com/fluttercommunity/get_it/pull/292 which fixes sort of race conditions if you create scopes just for the life time of a widget. \r\n## [7.4.1]\r\n* PR from @dzziwny which fixed an edge case with LazySingletons https://github.com/fluttercommunity/get_it/pull/284\r\n* Changed an assertion in case that an object is not registered to an Exception that also will throw in real time so that you get meaningful errors based on https://github.com/fluttercommunity/get_it/issues/312\r\n\r\n## [7.4.0]\r\n* `registerSingleton` now returns the passed instance as a return value thanks to the PR by @Rexios80 https://github.com/fluttercommunity/get_it/pull/242\r\n* In some cases GetIt will print error messages to the debug output. Now this won't happen anymore in release mode and can be completely disabled by setting `GetIt.noDebugOutput=true` following the PR from @James1345 \r\n## [7.3.0]\r\n\r\nNew features:\r\n* `popScopeTil` got a new optional `inclusive` parameter so you can now decide if scope with the passed name should be popped too or only the ones above\r\n* PR by @jtdLab that adds to reset a LazySingleton by providing an existing instance\r\n* Fix for an internal state error by @ioantsaf \r\n* Fix for a rare edge case if you manually `signalReady`\r\n* Many PRs with improvements to spelling and grammar of readme, source documentation and even one assert message by @selcukguvel @isinghmitesh @UsamaKarim @nilsreichardt and  Os-Prog\r\n@Ae-Mc \r\n\r\n\r\n## [7.2.0] \r\n\r\n* fix for https://github.com/fluttercommunity/get_it/issues/210\r\n* Parameters of factories are no longer needed to be casted because they are nullable\r\n* downgraded the dependency on `async` to 2.6 again\r\n* you couldn't push two Scopes without a name\r\n\r\n## [7.1.4]\r\n\r\n* fixed bug with manual synchronization of SingletonsWithDependencies \r\nhttps://github.com/fluttercommunity/get_it/issues/196\r\n\r\n## [7.1.3] - 07.05.2021\r\n\r\n* Fix for https://github.com/fluttercommunity/get_it/issues/186\r\n\r\n## [7.1.2] - 06.05.2021\r\n\r\n* Thanks to the clever PR https://github.com/fluttercommunity/get_it/pull/185 by @kmartins `unregister` and `resetLazySingleton` now only have to be awaited if you use an async disposal function.\r\n\r\n## [7.1.1] - 05.05.2021\r\n\r\n* `pushNewScope()` now got an optional `init` parameter where you can pass a function that registers new objects inside the newly pushed Scope. Doing the registration in this function ensures that the `onScopeChanged` call-back is called after the objects are registered.\r\n\r\n## [7.1.0] - 05.05.2021\r\n\r\n* The new `Disposable` interface had a typo that now got corrected. You could call this a breaking change but as the last version change is just three days old I guess not many people will be affected by this correction.\r\n\r\n#### Getting notified when a scope change happens\r\n\r\nWhen using scopes with objects that shadow other objects its important to give the UI a chance to rebuild and acquire references to the now active objects. For this you can register an call-back function in GetIt\r\nThe getit_mixin has a matching `rebuiltOnScopeChange` method.\r\n\r\n```Dart\r\n  /// Optional call-back that will get call whenever a change in the current scope happens\r\n  /// This can be very helpful to update the UI in such a case to make sure it uses\r\n  /// the correct Objects after a scope change\r\n  void Function(bool pushed)? onScopeChanged;\r\n```\r\n## [7.0.0] - 02.05.2021\r\n\r\nThis is a breaking change because there were some inconsistencies in the handling of the disposal functions that you can pass when registering an Object, pop a Scope or use `unregister()`  `resetLazySingleton()`.  Some of accepted a `FutureOr` method type, others just a `void` which meant you couldn't use async functions consistently. With this release you can use async functions in all disposal functions which unfortunately also required to change the signatures of the following functions:\r\n\r\n```dart\r\n  Future<void> reset({bool dispose = true});\r\n\r\n  Future<void> resetScope({bool dispose = true});\r\n\r\n  Future<void> popScope();\r\n\r\n  Future<bool> popScopesTill(String name);\r\n\r\n  FutureOr resetLazySingleton<T extends Object>({\r\n    Object? instance,\r\n    String? instanceName,\r\n    FutureOr Function(T)? disposingFunction,\r\n  });\r\n\r\n  FutureOr unregister<T extends Object>({\r\n    Object? instance,\r\n    String? instanceName,\r\n    FutureOr Function(T)? disposingFunction,\r\n  });\r\n```\r\n\r\nBasically all functions that can possibly call a disposal functions should be awaited. \r\n#### Implementing the `Disposable` interface\r\n\r\nInstead of passing a disposing function on registration or when pushing a Scope from V7.0 on your objects `onDispose()` method will be called\r\nif the object that you register implements the `Disposable`´interface:\r\n\r\n```Dart\r\nabstract class Disposable {\r\n  FutureOr onDispose();\r\n}\r\n```\r\n#### Getting notified about the shadowing state of an object\r\nIn some cases it might be helpful to know if an Object gets shadowed by another one e.g. if it has some Stream subscriptions that it want to cancel before the shadowing object creates a new subscription. Also the other way round so that a shadowed Object gets notified when it's \"active\" again meaning when a shadowing object is removed.\r\n\r\nFor this a class had to implement the `ShadowChangeHandlers` interface:\r\n\r\n```Dart\r\nabstract class ShadowChangeHandlers {\r\n  void onGetShadowed(Object shadowing);\r\n  void onLeaveShadow(Object shadowing);\r\n}\r\n```\r\nWhen the Object is shadowed its `onGetShadowed()` method is called with the object that is shadowing it. When this object is removed from GetIt `onLeaveShadow()` will be called. \r\n\r\n\r\n * Thanks to this PR https://github.com/fluttercommunity/get_it/pull/181 by @n3wtron you can now also make objects depend on other objects not only by type but also by type and name if you used a named registration\r\n\r\n## [6.1.1] - 13.04.2021\r\n\r\n* small fix in getAsync with parameters\r\n\r\n## [6.1.0] - 12.04.2021\r\n\r\n* Exceptions that occur during an async initialisation are now forwarded to the future that `allReady()` returns instead to get swallowed https://github.com/fluttercommunity/get_it/issues/148\r\n* Added a property `currentScopeName` to query the name of the currently active scope https://github.com/fluttercommunity/get_it/issues/153\r\n* `popScope` will know throw an Exception instead just an assert if you are already on the `baseScope` and you try to pop it. \r\n\r\n## [6.0.0] - 15.02.2021\r\n\r\n* Official null safety release\r\n\r\n## [5.0.2] - 08.12.2020\r\n\r\n* fixed https://github.com/fluttercommunity/get_it/issues/138 when calling `unRegister` the dispose function\r\nthat can be passed when registering wasn't called. \r\n\r\n## [5.0.1] - 23.09.2020\r\n\r\n* fixed formatting in readme\r\n\r\n## [5.0.0-mixin-version] - 17.09.2020\r\n\r\n* experimental\r\n\r\n## [5.0.0] - 15.09.2020\r\n\r\n* New scope support for registration\r\n* optional dispose functions for registered objects\r\n* **Breaking change:** `reset()` now is async and returns a `Future` because it will call the new optional disposal functions that can be async\r\n* **Breaking change:** If you use names to register your objects you now have to provide a type too or at least make sure the compiler can infer the type. With this change it is now possible to use the same name for different types.\r\n\r\n## [5.0.0-alpha] - 11.09.2020\r\n\r\n* alpha version of V5.0 \r\n\r\n## [4.0.4] - 22.07.2020\r\n\r\n* fixed linter errors\r\n\r\n## [4.0.3] - 22.07.2020\r\n\r\n* fixes of several typos thanks to PRs from @Bryanx, @sspatari \r\n* fixed error https://github.com/fluttercommunity/get_it/issues/92\r\n\r\n## [4.0.2] - 26.04.2020\r\n\r\n* removed too strong type check for passed factory parameter\r\n* fixed error message https://github.com/fluttercommunity/get_it/issues/69\r\n\r\n\r\n## [4.0.1] - 19.03.2020\r\n\r\n* overhauled readme\r\n* removed unnecessary print statement\r\n\r\n## [4.0.0] - 26.02.2020\r\n\r\n* Added abstract `WillSignalReady` class\r\n\r\n## [4.0.0-release-candidate] - 14.02.2020\r\n\r\n* Breaking changes in API!!!\r\n* Release candidate\r\n* New Async functions\r\n* Factories with parameters\r\n* Improved startup synchronisation\r\n\r\n## [3.0.2] - 23.10.2019\r\n\r\n* Bugfix when using named instances\r\n\r\n## [3.0.1] - 24.09.2019\r\n\r\n* Bugfix with https://github.com/fluttercommunity/get_it/pull/21\r\n\r\n## [3.0.0+1] - 07.09.2019\r\n\r\n* Small fix to make the analyser happy\r\n\r\n## [3.0.0] - 07.09.2019\r\n\r\n* Overhauled the signalling API because the way it was was not optimal. Now you can either signal globally or by passing the instance of the registered object that shall signal. This way it's ensured that you have to have access to the instance to signal, typically from within the instance with a `GetIt.instance.signalReady(this)` \r\nindividual signalling from other places but the instance itself is probably an error.\r\n* Unregister of singletons /lazysingletons now possible also over a registered instance.\r\n* Most asserts have bin replaced with throwing `Error`objects.\r\n* The example now shows the ready signalling.\r\n\r\n## [2.1.0] - 26.08.2019\r\n\r\n* Added handy ready signal to make start-up logic a bit easier\r\n* Unregister of Objects now possible with optional disposing function\r\n\r\n## [2.0.3] - 26.08.2019\r\n\r\n* Small fix\r\n\r\n## [2.0.2] - 19.08.2019\r\n\r\n* Small fix\r\n\r\n## [2.0.1] - 19.08.2019\r\n\r\n* Small fix\r\n\r\n## [2.0.0] - 18.08.2019\r\n\r\n* **Breaking Change with V2.0.0** \r\nyou no longer can directly create instances of the type `GetIt` because `GetIt` is now a singleton please see [README](README.md)\r\n\r\n## [1.1.0] - 18.08.2019\r\n\r\n* added named registration\r\n\r\n## [1.0.3+2] - 26.06.2019\r\n\r\n* updated logo in readme\r\n\r\n## [1.0.3+1] - 22.05.2019\r\n\r\n* updated authors\r\n\r\n## [1.0.3] - 01.03.2019\r\n\r\n* Small fix so that intellisense works now if you use the short calling form without using `.get()` \r\n\r\n## [1.0.2] - 22.06.2018\r\n\r\n* Moved package to [Flutter Community](https://github.com/fluttercommunity) \r\n\r\n## [1.0.1] - 20.06.2018\r\n\r\n* Added `reset()`method \r\n\r\n## [1.0.0] - 22.05.2018\r\n\r\n* Initial release \r\n\r\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0654296875,
          "content": "MIT License\r\n\r\nCopyright (c) 2018 Thomas Burkhart\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 31.1591796875,
          "content": "[![Flutter Community: get_it](https://fluttercommunity.dev/_github/header/get_it)](https://github.com/fluttercommunity/community)\n\n[:heart: Sponsor](https://github.com/sponsors/escamoteur) <a href=\"https://www.buymeacoffee.com/escamoteur\" target=\"_blank\"><img align=\"right\" src=\"https://cdn.buymeacoffee.com/buttons/default-orange.png\" alt=\"Buy Me A Coffee\" height=\"41\" width=\"174\"></a>\n\n# get_it\n\n>Check out my new package [watch_it](https://github.com/escamoteur/watch_it) the state management addon to get_it\n>There is now a discord support channel for my packages https://discord.gg/ZHYHYCM38h\n\nThis is a simple **Service Locator** for Dart and Flutter projects with some additional goodies highly inspired by [Splat](https://github.com/reactiveui/splat). It can be used instead of `InheritedWidget` or `Provider` to access objects e.g. from your UI.\n\nTypical usage:\n\n- Accessing service objects like REST API clients or databases so that they easily can be mocked.\n- Accessing View/AppModels/Managers/BLoCs from Flutter Views\n\n\n\n## Why GetIt\n\nAs your App grows, at some point you will need to put your app's logic in classes that are separated from your Widgets. Keeping your widgets from having direct dependencies makes your code better organized and easier to test and maintain.\nBut now you need a way to access these objects from your UI code. When I came to Flutter from the .Net world, the only way to do this was the use of InheritedWidgets. I found the way to use them by wrapping them in a StatefulWidget; quite cumbersome and have problems working consistently. Also:\n\n- I missed the ability to easily switch the implementation for a mocked version without changing the UI.\n- The fact that you need a `BuildContext` to access your objects made it inaccessible from the Business layer.\n\nAccessing an object from anywhere in an App can be done in other ways, but:\n\n- If you use a Singleton you can't easily switch the implementation out for a mock version in tests\n- IoC containers for Dependency Injections offer similar functionality, but with the cost of slow start-up time and less readability because you don't know where the magically injected object comes from. Most IoC libs rely on reflection they cannot be ported to Flutter.\n\nAs I was used to using the Service Locator _Splat_ from .Net, I decided to port it to Dart. Since then, more features have been added.\n\n> If you are not familiar with the concept of Service Locators, it's a way to decouple the interface (abstract base class) from a concrete implementation, and at the same time allows to access the concrete implementation from everywhere in your App over the interface.\n> I can only highly recommend reading this classic article by Martin Fowler [Inversion of Control Containers and the Dependency Injection pattern](https://martinfowler.com/articles/injection.html).\n\nGetIt is:\n\n- Extremely fast (O(1))\n- Easy to learn/use\n- Doesn't clutter your UI tree with special Widgets to access your data like, Provider or Redux does.\n\n### watch_it\n\nGetIt isn't a state management solution! It's a locator for your objects so you need some other way to notify your UI about changes like `Streams` or `ValueNotifiers`. But together with my package [watch_it](https://pub.dev/packages/watch_it), it gets a full-featured easy to use state management solution that integrates with the Objects registered in get_it.\n\n\n## Getting Started\n\nAt your start-up you register all the objects you want to access later like this:\n\n```Dart\nfinal getIt = GetIt.instance;\n\nvoid setup() {\n  getIt.registerSingleton<AppModel>(AppModel());\n\n// Alternatively you could write it if you don't like global variables\n  GetIt.I.registerSingleton<AppModel>(AppModel());\n}\n```\n\nAfter that you can access your `AppModel` class from anywhere like this:\n\n```Dart\nMaterialButton(\n  child: Text(\"Update\"),\n  onPressed: getIt<AppModel>().update   // given that your AppModel has a method update\n),\n```\n\nYou can find here a [detailed blog post on how to use GetIt](https://www.burkharts.net/apps/blog/one-to-find-them-all-how-to-use-service-locators-with-flutter/)\n\n## GetIt in Detail\n\nAs Dart supports global (or euphemistic ambient) variables I often assign my GetIt instance to a global variable to make access to it as easy as possible.\n\nAlthough the approach with a global variable worked well, it has its limitations if you want to use `GetIt` across multiple packages. Therefore GetIt itself is a singleton and the default way to access an instance of `GetIt` is to call:\n\n```Dart\nGetIt getIt = GetIt.instance;\n\n//There is also a shortcut (if you don't like it just ignore it):\nGetIt getIt = GetIt.I;\n```\n\nThrough this, any call to `instance` in any package of a project will get the same instance of `GetIt`. I still recommend just assigning the instance to a global variable in your project as it is more convenient and doesn't harm (Also it allows you to give your service locator your own name).\n\n```Dart\nGetIt getIt = GetIt.instance;\n```\n\n> You can use any name you want which makes Brian :smiley: happy like (`sl, backend, services...`) ;-)\n\nBefore you can access your objects you have to register them within `GetIt` typically direct in your start-up code.\n\n```Dart\ngetIt.registerSingleton<AppModel>(AppModelImplementation());\ngetIt.registerLazySingleton<RESTAPI>(() => RestAPIImplementation());\n\n// if you want to work just with the singleton:\nGetIt.instance.registerSingleton<AppModel>(AppModelImplementation());\nGetIt.I.registerLazySingleton<RESTAPI>(() => RestAPIImplementation());\n\n/// `AppModel` and `RESTAPI` are both abstract base classes in this example\n```\n\nTo access the registered objects call `get<Type>()` on your `GetIt` instance\n\n```Dart\nvar myAppModel = getIt.get<AppModel>();\n```\n\nAlternatively, as `GetIt` is a [callable class](https://www.w3adda.com/dart-tutorial/dart-callable-classes) depending on the name you choose for your `GetIt` instance you can use the shorter version:\n\n```Dart\nvar myAppModel = getIt<AppModel>();\n\n// as Singleton:\nvar myAppModel = GetIt.instance<AppModel>();\nvar myAppModel = GetIt.I<AppModel>();\n```\n\n## Different ways of registration\n\n`GetIt` offers different ways how objects are registered that affect the lifetime of these objects.\n\n#### Factory\n\n```Dart\nvoid registerFactory<T>(FactoryFunc<T> func)\n```\n\nYou have to pass a factory function `func` that returns a NEW instance of an implementation of `T`. Each time you call `get<T>()` you will get a new instance returned. How to pass parameters to a factory you can find [here](#passing-parameters-to-factories).\n\n#### Singleton & LazySingleton\n\n> Although I always would recommend using an abstract base class as a registration type so that you can vary the implementations you don't have to do this. You can also register concrete types.\n\n```Dart\nT registerSingleton<T>(T instance)\n```\n\nYou have to pass an instance of `T` or a derived class of `T` that you will always get returned on a call to `get<T>()`. The newly registered instance is also returned which can be sometimes convenient.\n\nAs creating this instance can be time-consuming at app start-up you can shift the creation to the time the object is the first time requested with:\n\n```Dart\nvoid registerLazySingleton<T>(FactoryFunc<T> func)\n```\n\nYou have to pass a factory function `func` that returns an instance of an implementation of `T`. Only the first time you call `get<T>()` this factory function will be called to create a new instance. After that, you will always get the same instance returned.\n\n### Registering multiple implementations\n\nThere are certain circumstances where you might wish to register multiple implementations of the same interface and then get a list of all of the relevant implementations later on. For instance, you might have a modular design where each module registers an interface defining a page and then all of these get injected into your navigation bar in your main layout without your layout needing to know about each module.\n\n> [!NOTE]  \n> To avoid this being a breaking change and to prevent you from erroneously re-registering a type without expecting this behaviour, to enable this you need to call:\n>\n>```dart\n>getIt.enableRegisteringMultipleInstancesOfOneType();\n>```\n\nThen, you just register your classes as you normally would:\n\n```dart\ngetIt.registerLazySingleton<MyBase>(\n  () => ImplA(),\n);\ngetIt.registerLazySingleton<MyBase>(\n  () => ImplB(),\n);\n```\n\nThen, later on you can fetch all instances of this interface by calling:\n\n```dart\nfinal Iterable<MyBase> instances = getIt.getAll<MyBase>();\n```\nThe returned `Iterable` will then contain all registered instances of the requested interface with or without an instance name.\nThere is also an `async` implementation available for this:\n\n```dart\nfinal Iterable<MyBase> instances = await getIt.getAllAsync<MyBase>();\n```\n\n### Overwriting registrations\n\nIf you try to register a type more than once you will fail with an assertion in debug mode because normally this is not needed and probably a bug.\nIf you really have to overwrite a registration, then you can by setting the property `allowReassignment = true`.\n\n### Skip Double registrations while testing\n\nIf you try to register a type more than once and when `allowReassignment = false`  you will fail with an assertion in debug mode.\nIf you want to just skip this double registration silently without an error, then you can by setting the property `skipDoubleRegistration = true`.\nThis is only available inside tests where is can be handy.\n\n### Testing if a Singleton is already registered\n\nYou can check if a certain Type or instance is already registered in GetIt with:\n\n```Dart\n /// Tests if an [instance] of an object or aType [T] or a name [instanceName]\n /// is registered inside GetIt\n bool isRegistered<T>({Object instance, String instanceName});\n```\n\n### Unregistering Singletons or Factories\n\nIf you need to you can also unregister your registered singletons and factories and pass an optional `disposingFunction` for clean-up.\n\n```Dart\n/// Unregister an [instance] of an object or a factory/singleton by Type [T] or by name [instanceName]\n/// if you need to dispose some resources before the reset, you can\n/// provide a [disposingFunction]. This function overrides the disposing\n/// you might have provided when registering.\nvoid unregister<T>({Object instance,String instanceName, void Function(T) disposingFunction})\n```\n\n### Resetting LazySingletons\n\nIn some cases, you might not want to unregister a LazySingleton but instead, reset its instance so that it gets newly created on the next access to it.\n\n```Dart\n  /// Clears the instance of a lazy singleton,\n  /// being able to call the factory function on the next call\n  /// of [get] on that type again.\n  /// you select the lazy Singleton you want to reset by either providing\n  /// an [instance], its registered type [T] or its registration name.\n  /// if you need to dispose some resources before the reset, you can\n  /// provide a [disposingFunction]. This function overrides the disposing\n  /// you might have provided when registering.\nvoid resetLazySingleton<T>({Object instance,\n                            String instanceName,\n                            void Function(T) disposingFunction})\n```\n\n### Resetting GetIt completely\n\n```Dart\n/// Clears all registered types in the reverse order in which they were registered.\n/// Handy when writing unit tests or before quitting your application.\n/// If you provided dispose function when registering they will be called\n/// [dispose] if `false` it only resets without calling any dispose\n/// functions\n/// As dispose funcions can be async, you should await this function.\nFuture<void> reset({bool dispose = true});\n```\n\n## Scopes\n\nWith V5.0 of GetIt, it now supports hierarchical scoping of registration. What does this mean?\nYou can push a new registration scope like you push a new page on the Navigator. Any registration after that will be registered in this new scope. When accessing an object with `get` GetIt first checks the topmost scope for registration and then the ones below. This means you can register the same type that was already registered in a lower scope again in the scope above and you will always get the latest registered object.\n\nImagine an app that can be used with or without a login. On App start-up, a `DefaultUser` object is registered with the abstract type `User` as a singleton. As soon as the user logs in, a new scope is pushed and a new `LoggedInUser` object again with the `User` type is registered that allows more functions. For the rest of the App, nothing has changed as it still accesses `User` objects through GetIt.\nAs soon as the user Logs off all you have to do is pop the Scope and automatically the `DefaultUser` is used again.\n\nAnother example could be a shopping basket where you want to ensure that not a cart from a previous session is used again. So at the beginning of a new session, you push a new scope and register a new cart object. At the end of the session, you pop this scope again.\n\n### Scope functions\n\n```Dart\n  /// Creates a new registration scope. If you register types after creating\n  /// a new scope they will hide any previous registration of the same type.\n  /// Scopes allow you to manage different live times of your Objects.\n  /// [scopeName] if you name a scope you can pop all scopes above the named one\n  /// by using the name.\n  /// [dispose] function that will be called when you pop this scope. The scope\n  /// is still valid while it is executed\n  /// [init] optional function to register Objects immediately after the new scope is\n  /// pushed. This ensures that [onScopeChanged] will be called after their registration\n  /// if [isFinal] is set to true, you can't register any new objects in this scope after\n  /// this call. In Other words you have to register the objects for this scope inside\n  /// [init] if you set [isFinal] to true. This is useful if you want to ensure that\n  /// no new objects are registered in this scope by accident which could lead to race conditions\n  void pushNewScope({void Function(GetIt getIt)? init,String scopeName, ScopeDisposeFunc dispose});\n\n  /// Disposes all factories/Singletons that have been registered in this scope\n  /// and pops (destroys) the scope so that the previous scope gets active again.\n  /// if you provided dispose functions on registration, they will be called.\n  /// if you passed a dispose function when you pushed this scope it will be\n  /// called before the scope is popped.\n  /// As dispose functions can be async, you should await this function.\n  Future<void> popScope();\n\n  /// if you have a lot of scopes with names you can pop (see [popScope]) all\n  /// scopes above the scope with [name] including that scope unless [inclusive]= false\n  /// Scopes are popped in order from the top\n  /// As dispose functions can be async, you should await this function.\n  /// If no scope with [name] exists, nothing is popped and `false` is returned\n  Future<bool> popScopesTill(String name, {bool inclusive = true});\n\n  /// Clears all registered factories and singletons in the provided scope,\n  /// then destroys (drops) the scope. If the dropped scope was the last one,\n  /// the previous scope becomes active again.\n  /// if you provided dispose functions on registration, they will be called.\n  /// if you passed a dispose function when you pushed this scope it will be\n  /// called before the scope is dropped.\n  /// As dispose functions can be async, you should await this function.\n  Future<void> dropScope(String scopeName);\n\n  /// Tests if the scope by name [scopeName] is registered in GetIt\n  bool hasScope(String scopeName);\n\n  /// Clears all registered types for the current scope in the reverse order in which they were registered.\n  /// If you provided dispose function when registering they will be called\n  /// [dispose] if `false` it only resets without calling any dispose\n  /// functions\n  /// As dispose funcions can be async, you should await this function.\n  Future<void> resetScope({bool dispose = true});\n```\n\n#### Getting notified about the shadowing state of an object\n\nIn some cases, it might be helpful to know if an Object gets shadowed by another one e.g. if it has some Stream subscriptions that it wants to cancel before the shadowing object creates a new subscription. Also, the other way round so that a shadowed Object gets notified when it's \"active\" again meaning when a shadowing object is removed.\n\nFor this a class had to implement the `ShadowChangeHandlers` interface:\n\n```Dart\nabstract class ShadowChangeHandlers {\n  void onGetShadowed(Object shadowing);\n  void onLeaveShadow(Object shadowing);\n}\n```\n\nWhen the Object is shadowed its `onGetShadowed()` method is called with the object that is shadowing it. When this object is removed from GetIt `onLeaveShadow()` will be called.\n\n#### Getting notified when a scope change happens\n\nWhen using scopes with objects that shadow other objects it's important to give the UI a chance to rebuild and acquire references to the now active objects. For this, you can register a call-back function in GetIt.\nThe getit_mixin has a matching `rebuiltOnScopeChange` method.\n\n```Dart\n  /// Optional call-back that will get called whenever a change in the current scope happens\n  /// This can be very helpful to update the UI in such a case to make sure it uses\n  /// the correct Objects after a scope change\n  void Function(bool pushed)? onScopeChanged;\n```\n\n### Disposing Singletons and Scopes\n\nFrom V5.0 on you can pass a `dispose` function when registering any Singletons. For this the registration functions have an optional parameter:\n\n```Dart\nDisposingFunc<T> dispose\n```\n\nwhere `DisposingFunc` is defined as\n\n```Dart\ntypedef DisposingFunc<T> = FutureOr Function(T param);\n```\n\nSo you can pass simple or async functions as this parameter. This function is called when you pop or reset the scope or when you reset GetIt completely.\n\nWhen you push a new scope you can also pass a `dispose` function that is called when a scope is popped or reset but before the dispose functions of the registered objects is called which means it can still access the objects that were registered in that scope.\n\n#### Implementing the `Disposable` interface\n\nInstead of passing a disposing function on registration or when pushing a Scope from V7.0 on your objects `onDispose()` method will be called\nif the object that you register implements the `Disposable` interface:\n\n```Dart\nabstract class Disposable {\n  FutureOr onDispose();\n}\n```\n\n## Asynchronous Factories\n\nIf a factory needs to call an async function you can use `registerFactoryAsync()`\n\n```Dart\n/// [T] type to register\n/// [func] factory function for this type\n/// [instanceName] if you provide a value here your factory gets registered with that\n/// name instead of a type. This should only be necessary if you need to register more\n/// than one instance of one type.\nvoid registerFactoryAsync<T>(FactoryFuncAsync<T> func, {String instanceName});\n```\n\nTo access instances created by such a factory you can't use `get()` but you have to use `getAsync()` so that\nyou can await the creation of the requested new instance.\n\n```Dart\n/// Returns a Future of an instance that is created by an async factory or a Singleton that is\n/// not ready with its initialization.\nFuture<T> getAsync<T>([String instanceName]);\n```\n\n## Asynchronous Singletons\n\nAdditionally, you can register asynchronous Singletons which means Singletons that have an initialization that requires async function calls. To be able to control such asynchronous start-up behaviour GetIt supports mechanisms to ensure the correct initialization sequence.\n\nYou create a Singleton with an asynchronous creation function\n\n```Dart\n  void registerSingletonAsync<T>(FactoryFuncAsync<T> factoryfunc,\n      {String instanceName,\n      Iterable<Type> dependsOn,\n      bool signalsReady = false});\n```\n\nThe difference to a normal Singleton is that you don't pass an existing instance but provide a factory function\nthat returns a `Future` that completes at the end of `factoryFunc` and signals that the Singleton is ready to use unless `true` is passed for `signalsReady`. (see next chapter)\nTo synchronize with other \"async Singletons\" you can pass a list of `Type`s in `dependsOn` that have to be ready before the passed factory is executed.\n\nThere are two ways to signal the system that an instance is ready.\n\n## Synchronizing asynchronous initializations of Singletons\n\nOften your registered services need to do asynchronous initialization work before they can be used from the rest of the app. As this is such a common task, and it's closely related to registration/initialization GetIt supports you here too.\n\n`GetIt` has the function `allReady` which returns `Future<void>` that can be used e.g. with a Flutter FutureBuilder to await that all asynchronous initialization is finished.\n\n```Dart\n  Future<void> allReady({Duration timeout, bool ignorePendingAsyncCreation = false});\n```\n\nThere are different approaches to how the returned Future can be completed:\n\n### Using async Singletons\n\nIf you register any async Singletons `allReady` will complete only after all of them have completed their factory functions. Like:\n\n```Dart\n  class RestService {\n    Future<RestService> init() async {\n      Future.delayed(Duration(seconds: 1));\n      return this;\n    }\n  }\n\n  final getIt = GetIt.instance;\n\n  /// in your setup function:\n  getIt.registerSingletonAsync<ConfigService>(() async {\n    final configService = ConfigService();\n    await configService.init();\n    return configService;\n  });\n\n  getIt.registerSingletonAsync<RestService>(() async => RestService().init());\n  // here we asume an async factory function `createDbServiceAsync`\n  getIt.registerSingletonAsync<DbService>(createDbServiceAsync);\n\n\n  /// ... in your startup page:\n  return FutureBuilder(\n      future: getIt.allReady(),\n      builder: (BuildContext context, AsyncSnapshot snapshot) {\n        if (snapshot.hasData) {\n          return Scaffold(\n            body: Center(\n              child: Text('The first real Page of your App'),\n            ),\n          );\n        } else {\n          return CircularProgressIndicator();\n        }\n      });\n```\n\nThe above example shows you different ways to register async Singletons. The start-up page will display a `CircularProgressIndicator` until all services have been created.\n\n### Solving dependencies\n\n### Automatic using `dependsOn`\n\nIn a case, these services have to be initialized in a certain order because they depend on that other services are already ready to be used you can use the `dependsOn` parameter of `registerFactoryAsync`. If you have a non-async Singleton that depends on other Singletons, there is `registerSingletonWithDependencies`. In the following example, `DbService` depends on `ConfigService`, and `AppModel` depends on `ConfigService` and `RestService`\n\n```Dart\n  getIt.registerSingletonAsync<ConfigService>(() async {\n    final configService = ConfigService();\n    await configService.init();\n    return configService;\n  });\n\n  getIt.registerSingletonAsync<RestService>(() async => RestService().init());\n\n  getIt.registerSingletonAsync<DbService>(createDbServiceAsync,\n      dependsOn: [ConfigService]);\n\n  getIt.registerSingletonWithDependencies<AppModel>(\n      () => AppModelImplmentation(),\n      dependsOn: [ConfigService, DbService, RestService]);\n```\n\nWhen using `dependsOn` you ensure that the registration waits with creating its singleton on the completion of the type defined in `dependsOn`.\n\nThe `dependsOn` field also accepts `InitDependency` classes that allow specifying the dependency by type and `instanceName`.\n\n```Dart\n  getIt.registerSingletonAsync<RestService>(() async => RestService().init(), instanceName:\"rest1\");\n\n  getIt.registerSingletonWithDependencies<AppModel>(\n      () => AppModelImplmentation(),\n      dependsOn: [InitDependency(RestService, instanceName:\"rest1\")]);\n```\n\n### Manually signaling the ready state of a Singleton\n\nSometimes the mechanism of `dependsOn` might not give you enough control. For this case you can use `isReady` to wait for a certain singleton:\n\n```Dart\n  /// Returns a Future that completes if the instance of a Singleton, defined by Type [T] or\n  /// by name [instanceName] or passing the an existing [instance], is ready\n  /// If you pass a [timeout], a [WaitingTimeOutException] will be thrown if the instance\n  /// is not ready in the given time. The Exception contains details on which Singletons are\n  /// not ready at that time.\n  /// [callee] optional parameter which makes debugging easier. Pass `this` in here.\n  Future<void> isReady<T>({\n    Object instance,\n    String instanceName,\n    Duration timeout,\n    Object callee,\n  });\n```\n\nTo signal that a singleton is ready it can use `signalReady`, provided you have set the optional `signalsReady` parameter when registering it OR make your registration type implement the empty abstract class `WillSignalReady`. Otherwise, `allReady` will wait on a call to signalsReady. No automatic signaling will happen in that case.\n\n```Dart\n/// Typically this is used in this way inside the registered objects init\n/// method `GetIt.instance.signalReady(this);`\nvoid signalReady(Object instance);\n```\n\nYou can use this to initialize your Singletons without async registration by using fire and forget async function from your constructors like so:\n\n```Dart\nclass ConfigService {\n  ConfigService()\n  {\n    init();\n  }\n  Future init() async {\n    // do your async initialisation...\n\n    GetIt.instance.signalReady(this);\n  }\n}\n```\n\n### Using `allReady` repeatedly\n\nEven if you already have awaited `allReady`, the moment you register new async singletons or singletons with dependencies you can use `allReady` again. This makes especially sense if you use scopes where every scope needs to get initialized.\n\n### Manual triggering **allReady** (almost deprecated)\n\nBy calling `signalReady(null)` on your `GetIt` instance the `Future` you can get from `allReady` will be completed.\nThis is the most basic way to synchronize your start-up. If you want to do that **don't use `signalsReady` or async Singletons**!!!\nI recommend using one of the other ways because they are more flexible and express your intention more clear.\n\nYou can find here a [detailed blog post on async factories and startup synchronization](https://www.burkharts.net/apps/blog/one-to-find-them-all-how-to-use-service-locators-with-flutter/)\n\n## Passing Parameters to factories\n\nIn some cases, it's handy if you could pass changing values to factories when calling `get()`. For that there are two variants for registering factories:\n\n```dart\n/// registers a type so that a new instance will be created on each call of [get] on that type based on\n/// up to two parameters provided to [get()]\n/// [T] type to register\n/// [P1] type of param1\n/// [P2] type of param2\n/// if you use only one parameter pass void here\n/// [factoryfunc] factory function for this type that accepts two parameters\n/// [instanceName] if you provide a value here your factory gets registered with that\n/// name instead of a type. This should only be necessary if you need to register more\n/// than one instance of one type.\n///\n/// example:\n///    getIt.registerFactoryParam<TestClassParam,String,int>((s,i)\n///        => TestClassParam(param1:s, param2: i));\n///\n/// if you only use one parameter:\n///\n///    getIt.registerFactoryParam<TestClassParam,String,void>((s,_)\n///        => TestClassParam(param1:s);\nvoid registerFactoryParam<T,P1,P2>(FactoryFuncParam<T,P1,P2> factoryfunc, {String instanceName});\n\n```\n\nand\n\n```Dart\n  void registerFactoryParamAsync<T,P1,P2>(FactoryFuncParamAsync<T,P1,P2> factoryfunc, {String instanceName});\n```\n\nThe reason why I settled to use two parameters is that I can imagine some scenarios where you might want to register a builder function for Flutter Widgets that need to get a `BuildContext` and some data object.\n\nWhen accessing these factories you pass the parameters a optional arguments to `get()`:\n\n```Dart\n  var instance = getIt<TestClassParam>(param1: 'abc',param2:3);\n```\n\nThese parameters are passed as `dynamics` (otherwise I would have had to add more generic parameters to `get()`), but they are checked at runtime to be the correct types.\n\n## Testing with GetIt\n\n### Unit Tests\n\nWhen you are writing unit tests with GetIt in your App you have two possibilities:\n\n- Register all the Objects you need inside your unit Tests so that GetIt can provide its objects to the objects that you are testing.\n- Pass your dependent objects into the constructor of your test objects like:\n\n```Dart\nGetIt getIt = GetIt.instance;\n\nclass UserManager {\n  AppModel appModel;\n  DbService dbService;\n\n  UserManager({AppModel? appModel, DbService? dbService}) {\n    this.appModel = appModel ?? getIt.get<AppModel>();\n    this.dbService = dbService ?? getIt.get<DbService>();\n  }\n}\n```\n\nThis way you don't need to pass them in the `AppModel` and `dbService` inside your App but you can pass them (or a mocked version) in your Unit tests.\n\n### Integration Tests\n\nIf you have a mocked version of a Service, you can easily switch between that and the real one based on a flag:\n\n```Dart\n  if (testing) {\n    getIt.registerSingleton<AppModel>(AppModelMock());\n  } else {\n    getIt.registerSingleton<AppModel>(AppModelImplementation());\n  }\n```\n\n## Experts region\n\n### Named registration\n\nOk, you have been warned! All registration functions have an optional named parameter `instanceName`. Providing a name with factory/singleton here registers that instance with that name and a type. Consequently `get()` has also an optional parameter `instanceName` to access\nfactories/singletons that were registered by name.\n\n**IMPORTANT:** Each name must be unique per type.\n\n```Dart\n  abstract class RestService {}\n  class RestService1 implements RestService{\n    Future<RestService1> init() async {\n      Future.delayed(Duration(seconds: 1));\n      return this;\n    }\n  }\n  class RestService2 implements RestService{\n    Future<RestService2> init() async {\n      Future.delayed(Duration(seconds: 1));\n      return this;\n    }\n  }\n\n  getIt.registerSingletonAsync<RestService>(() async => RestService1().init(), instanceName : \"restService1\");\n  getIt.registerSingletonAsync<RestService>(() async => RestService2().init(), instanceName : \"restService2\");\n\n  getIt.registerSingletonWithDependencies<AppModel>(\n      () {\n          RestService restService1 = GetIt.I.get<RestService>(instanceName: \"restService1\");\n          return AppModelImplmentation(restService1);\n      },\n      dependsOn: [InitDependency(RestService, instanceName:\"restService1\")],\n  );\n```\n\n### Accessing an object inside GetIt by a runtime type\n\nIn rare occasions you might be faced with the problem that you don't know the type that you want to retrieve from GetIt at compile time which means you can't pass it as a generic parameter. For this the `get` functions have an optional `type` parameter\n\n```Dart\n    getIt.registerSingleton(TestClass());\n\n    final instance1 = getIt.get(type: TestClass);\n\n    expect(instance1 is TestClass, true);\n```\n\nBe careful that the receiving variable has the correct type and don't pass `type` and a generic parameter.\n\n### More than one instance of GetIt\n\nWhile not recommended, you can create your own independent instance of `GetIt` if you don't want to share your locator with some\nother package or because the physics of your planet demands it :-)\n\n```Dart\n/// To make sure you really know what you are doing\n/// you have to first enable this feature:\nGetIt myOwnInstance = GetIt.asNewInstance();\n```\n\nThis new instance does not share any registrations with the singleton instance.\n\n## Acknowledgements\n\nMany thanks to the insightful discussions on the API with [Brian Egan](https://github.com/brianegan) and [Simon Lightfoot](https://github.com/slightfoot)\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.4638671875,
          "content": "include: package:lint/analysis_options_package.yaml\n\n# analyzer:\n#   exclude:\n    \nlinter:\n  rules:\n    - always_declare_return_types\n\n    # ------ Disable individual rules ----- #\n    #                 ---                   #\n    # Turn off what you don't like.         #\n    # ------------------------------------- #\n\n#    avoid_print: false\n#    unnecessary_await_in_return: false\n#    type_annotate_public_apis: false\n#    avoid_function_literals_in_foreach_calls: false\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "makedoc.bat",
          "type": "blob",
          "size": 0.17578125,
          "content": "dartdoc  --exclude 'dart:async,dart:collection,dart:convert,dart:core,dart:developer,dart:ffi,dart:html,dart:io,dart:isolate,dart:js,dart:js_util,dart:math,dart:typed_data,dart:ui'"
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 10.484375,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  _fe_analyzer_shared:\n    dependency: transitive\n    description:\n      name: _fe_analyzer_shared\n      sha256: \"0b2f2bd91ba804e53a61d757b986f89f1f9eaed5b11e4b2f5a2468d86d6c9fc7\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"67.0.0\"\n  analyzer:\n    dependency: transitive\n    description:\n      name: analyzer\n      sha256: \"37577842a27e4338429a1cbc32679d508836510b056f1eedf0c8d20e39c1383d\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"6.4.1\"\n  args:\n    dependency: transitive\n    description:\n      name: args\n      sha256: \"7cf60b9f0cc88203c5a190b4cd62a99feea42759a7fa695010eb5de1c0b2252a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.5.0\"\n  async:\n    dependency: \"direct main\"\n    description:\n      name: async\n      sha256: \"947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.11.0\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      sha256: \"6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  collection:\n    dependency: \"direct main\"\n    description:\n      name: collection\n      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.18.0\"\n  convert:\n    dependency: transitive\n    description:\n      name: convert\n      sha256: \"0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.1\"\n  coverage:\n    dependency: transitive\n    description:\n      name: coverage\n      sha256: \"3945034e86ea203af7a056d98e98e42a5518fff200d6e8e6647e1886b07e936e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.8.0\"\n  crypto:\n    dependency: transitive\n    description:\n      name: crypto\n      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.3\"\n  file:\n    dependency: transitive\n    description:\n      name: file\n      sha256: \"5fc22d7c25582e38ad9a8515372cd9a93834027aacf1801cf01164dac0ffa08c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"7.0.0\"\n  frontend_server_client:\n    dependency: transitive\n    description:\n      name: frontend_server_client\n      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  glob:\n    dependency: transitive\n    description:\n      name: glob\n      sha256: \"0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  http_multi_server:\n    dependency: transitive\n    description:\n      name: http_multi_server\n      sha256: \"97486f20f9c2f7be8f514851703d0119c3596d14ea63227af6f7a481ef2b2f8b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.2.1\"\n  http_parser:\n    dependency: transitive\n    description:\n      name: http_parser\n      sha256: \"2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.2\"\n  io:\n    dependency: transitive\n    description:\n      name: io\n      sha256: \"2ec25704aba361659e10e3e5f5d672068d332fc8ac516421d483a11e5cbd061e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.4\"\n  js:\n    dependency: transitive\n    description:\n      name: js\n      sha256: c1b2e9b5ea78c45e1a0788d29606ba27dc5f71f019f32ca5140f61ef071838cf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.1\"\n  lint:\n    dependency: \"direct dev\"\n    description:\n      name: lint\n      sha256: \"77b3777e8e9adca8e942da1e835882ae3248dfa00488a2ebbdbc1f1a4aa3f4a7\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.2.0\"\n  logging:\n    dependency: transitive\n    description:\n      name: logging\n      sha256: \"623a88c9594aa774443aa3eb2d41807a48486b5613e67599fb4c41c0ad47c340\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.0\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.12.16+1\"\n  meta:\n    dependency: \"direct main\"\n    description:\n      name: meta\n      sha256: \"25dfcaf170a0190f47ca6355bdd4552cb8924b430512ff0cafb8db9bd41fe33b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.14.0\"\n  mime:\n    dependency: transitive\n    description:\n      name: mime\n      sha256: e4ff8e8564c03f255408decd16e7899da1733852a9110a58fe6d1b817684a63e\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.4\"\n  node_preamble:\n    dependency: transitive\n    description:\n      name: node_preamble\n      sha256: \"6e7eac89047ab8a8d26cf16127b5ed26de65209847630400f9aefd7cd5c730db\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.2\"\n  package_config:\n    dependency: transitive\n    description:\n      name: package_config\n      sha256: \"1c5b77ccc91e4823a5af61ee74e6b972db1ef98c2ff5a18d3161c982a55448bd\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.0\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      sha256: \"087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.9.0\"\n  pool:\n    dependency: transitive\n    description:\n      name: pool\n      sha256: \"20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.5.1\"\n  pub_semver:\n    dependency: transitive\n    description:\n      name: pub_semver\n      sha256: \"40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.4\"\n  shelf:\n    dependency: transitive\n    description:\n      name: shelf\n      sha256: ad29c505aee705f41a4d8963641f91ac4cee3c8fad5947e033390a7bd8180fa4\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.4.1\"\n  shelf_packages_handler:\n    dependency: transitive\n    description:\n      name: shelf_packages_handler\n      sha256: \"89f967eca29607c933ba9571d838be31d67f53f6e4ee15147d5dc2934fee1b1e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.2\"\n  shelf_static:\n    dependency: transitive\n    description:\n      name: shelf_static\n      sha256: a41d3f53c4adf0f57480578c1d61d90342cd617de7fc8077b1304643c2d85c1e\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.2\"\n  shelf_web_socket:\n    dependency: transitive\n    description:\n      name: shelf_web_socket\n      sha256: \"073c147238594ecd0d193f3456a5fe91c4b0abbcc68bf5cd95b36c4e194ac611\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.0\"\n  source_map_stack_trace:\n    dependency: transitive\n    description:\n      name: source_map_stack_trace\n      sha256: \"84cf769ad83aa6bb61e0aa5a18e53aea683395f196a6f39c4c881fb90ed4f7ae\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  source_maps:\n    dependency: transitive\n    description:\n      name: source_maps\n      sha256: \"708b3f6b97248e5781f493b765c3337db11c5d2c81c3094f10904bfa8004c703\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.10.12\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      sha256: \"53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.10.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      sha256: \"73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.11.1\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      sha256: \"556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.0\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  test:\n    dependency: \"direct dev\"\n    description:\n      name: test\n      sha256: d11b55850c68c1f6c0cf00eabded4e66c4043feaf6c0d7ce4a36785137df6331\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.25.5\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      sha256: \"2419f20b0c8677b2d67c8ac4d1ac7372d862dc6c460cdbb052b40155408cd794\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.1\"\n  test_core:\n    dependency: transitive\n    description:\n      name: test_core\n      sha256: \"4d070a6bc36c1c4e89f20d353bfd71dc30cdf2bd0e14349090af360a029ab292\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.6.2\"\n  typed_data:\n    dependency: transitive\n    description:\n      name: typed_data\n      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.2\"\n  vm_service:\n    dependency: transitive\n    description:\n      name: vm_service\n      sha256: a2662fb1f114f4296cf3f5a50786a2d888268d7776cf681aa17d660ffa23b246\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"14.0.0\"\n  watcher:\n    dependency: transitive\n    description:\n      name: watcher\n      sha256: \"3d2ad6751b3c16cf07c7fca317a1413b3f26530319181b37e3b9039b84fc01d8\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.0\"\n  web_socket_channel:\n    dependency: transitive\n    description:\n      name: web_socket_channel\n      sha256: d88238e5eac9a42bb43ca4e721edba3c08c6354d4a53063afaa568516217621b\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.4.0\"\n  webkit_inspection_protocol:\n    dependency: transitive\n    description:\n      name: webkit_inspection_protocol\n      sha256: \"87d3f2333bb240704cd3f1c6b5b7acd8a10e7f0bc28c28dcf14e782014f4a572\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  yaml:\n    dependency: transitive\n    description:\n      name: yaml\n      sha256: \"75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.2\"\nsdks:\n  dart: \">=3.1.0 <4.0.0\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.5068359375,
          "content": "name: get_it\ndescription: Simple direct Service Locator that allows to decouple the interface from a concrete implementation and  to access the concrete implementation from everywhere in your App\"\nversion: 8.0.3\nmaintainer: Thomas Burkhart (@escamoteur)\nhomepage: https://github.com/fluttercommunity/get_it\nfunding:\n  - https://github.com/sponsors/escamoteur/\n  \nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n\ndependencies:\n  async: ^2.11.0\n  collection: ^1.17.1\n  meta: ^1.9.1\n\ndev_dependencies:\n  lint: ^2.1.2\n  test: ^1.25.5\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}