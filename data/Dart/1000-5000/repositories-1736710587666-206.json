{
  "metadata": {
    "timestamp": 1736710587666,
    "page": 206,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flutter/news_toolkit",
      "stars": 1335,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2080078125,
          "content": ".DS_Store\n.atom/\n.idea/\n.vscode/\n!flutter_news_**/.idea/\n!flutter_news_**/.vscode/\n\n# Files and directories created by pub\n.dart_tool/\n.packages\npubspec.lock\n\n# Conventional directory for build outputs\nbuild/\ntmp/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4833984375,
          "content": "Copyright 2024 The Flutter Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n    * Neither the name of Google Inc. nor the names of its\n      contributors may be used to endorse or promote products derived\n      from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.79296875,
          "content": "<img alt=\"Flutter News Toolkit Logo\" height=\"75\" src=\"./docs/static/img/header_light.svg#gh-light-mode-only\"/>\n<img alt=\"Flutter News Toolkit Logo\" height=\"75\" src=\"./docs/static/img/header_dark.svg#gh-dark-mode-only\"/>\n\n<br/>\n\nFlutter and the [Google News Initiative](https://newsinitiative.withgoogle.com/) have co-sponsored the development of a news application template. The goal of this project is to help news publishers build mobile applications easily in order to make reliable information accessible to all.\n\nThis template aims to **significantly reduce the development time for typical news applications** by giving developers a head start on core components and features.\n\nThe Flutter News Toolkit:\n\n- Contains common news app UI workflows and core features built with Flutter and Firebase\n- Implements best practices for news apps based on [Google News Initiative research](https://newsinitiative.withgoogle.com/info/assets/static/docs/nci/nci-playbook-en.pdf)\n- Allows publishers to monetize immediately with ads and subscription services\n\nCommon services such as authentication, notifications, analytics, and ads have been implemented using [Firebase](https://firebase.flutter.dev/docs/overview/) and [Google Mobile Ads](https://pub.dev/packages/google_mobile_ads). Developers are free to substitute these services and can find publicly available packages on [pub.dev](https://pub.dev).\n\nIf you're just getting started with Flutter, we recommend first developing familiarity with the framework by reviewing the [onboarding guides](https://docs.flutter.dev/get-started/install), [tutorials](https://docs.flutter.dev/reference/tutorials), and [codelabs](https://docs.flutter.dev/codelabs) before using this template.\n\n## Get Started\n\nTo get started, see the official documentation at https://flutter.github.io/news_toolkit.\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.0498046875,
          "content": "analyzer:\n  exclude:\n    - flutter_news_template/*\n"
        },
        {
          "name": "codemagic.yaml",
          "type": "blob",
          "size": 7.2958984375,
          "content": "# Codemagic Remarks:\n# - As the encrypt button is no longer available in Codemagic web ui\n# to encrypt the variable see this curl request https://docs.codemagic.io/rest-api/applications/#curl-example\ndefinitions:\n  environment:\n    prod_emails: &prod_emails\n      - engineering@verygood.ventures\n    tst_emails: &tst_emails\n      - engineering@verygood.ventures\n    # common_environment: &common_environment\n    #   FLUTTER_PROJECT_DIRECTORY: flutter_news_example\n    automatic_ios_signing: &automatic_ios_signing\n      # Encrypt the **content** of the API key for AppStore Connect\n      # - Log in to App Store Connect and navigate to Users and Access > Keys.\n      # - Click on the + sign to generate a new API key.\n      # - Enter the name for the key and select an access level: either Developer or App Manager.\n      # - Click Generate.\n      # - As soon as the key is generated, you can see it added in the list of active keys.\n      # Click Download API Key to save the private key for later. Note that the key can only be downloaded once.\n      # Save the key in the project 1Password or Lastpass.\n      # Encrypt the CONTENT of the p8 file and provide below in APP_STORE_CONNECT_PRIVATE_KEY.\n      APP_STORE_CONNECT_ISSUER_ID: TODO\n      APP_STORE_CONNECT_KEY_IDENTIFIER: TODO\n      APP_STORE_CONNECT_PRIVATE_KEY: TODO\n      # Generate the ssh key:\n      # ssh-keygen -t rsa -b 2048 -m PEM -f ./codemagic_private_key -q -N \"\"\n      # This will be used by app-store-connect to generate the signing certificates.\n      # Save the key in the project 1Password or Lastpass.\n      # Encrypt the CONTENT of the file and provide below in CERTIFICATE_PRIVATE_KEY.\n      CERTIFICATE_PRIVATE_KEY: TODO\n    android_signing: &android_signing\n      # Generate the project Android keystore either via Android Studio or command:\n      # keytool -genkey -v -keystore ./[project_name]-prod.keystore -alias [project_name] -keyalg RSA -keysize 2048 -validity 10000\n      # Save the key and password in the project 1Password or Lastpass\n      # See instruction: https://docs.codemagic.io/code-signing-yaml/signing-android/#set-up-code-signing-with-user-specified-keys\n      FCI_KEYSTORE_PATH: /tmp/keystore.keystore\n      FCI_KEYSTORE: TODO\n      FCI_KEYSTORE_PASSWORD: TODO\n      FCI_KEY_PASSWORD: TODO\n      FCI_KEY_ALIAS: flutter-news-example\n      # The Google Play service account key should be generated by the owner of Google Play account\n      # See instruction https://docs.codemagic.io/knowledge-base/google-play-api/\n      # Encrypt the **content** of the Service Account Key\n      GPLAY_KEY: TODO\nworkflows:\n  development:\n    name: development\n    working_directory: flutter_news_example\n    max_build_duration: 60\n    environment:\n      flutter: 3.24.2\n      xcode: latest\n      cocoapods: default\n      vars:\n        <<: *automatic_ios_signing\n        <<: *android_signing\n        FLAVOR: development\n        BUNDLE_ID: com.flutter.news.example.dev\n    cache:\n      cache_paths:\n        - $HOME/Library/Caches/CocoaPods\n        - $HOME/.pub-cache\n        - $HOME/.gradle/caches\n    triggering:\n      events:\n        - tag\n      # Include or exclude watched branches.\n      branch_patterns:\n        - pattern: \"main\"\n          include: true\n          source: true\n      # Include or exclude watched tag labels.\n      tag_patterns:\n        - pattern: \"*\"\n          include: true\n      # Set to `true` to automatically cancel outdated webhook builds.\n      cancel_previous_builds: true\n    scripts:\n      - &get_latest_tag\n        name: Get latest tag\n        script: set TAG=$(git describe --tags)\n      - &set_up_key_properties\n        name: Set up Android key.properties\n        script: |\n          echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH\n          cat >> \"$FCI_BUILD_DIR/flutter_news_example/android/key.properties\" <<EOF\n          storePassword=$FCI_KEYSTORE_PASSWORD\n          keyPassword=$FCI_KEY_PASSWORD\n          keyAlias=$FCI_KEY_ALIAS\n          storeFile=$FCI_KEYSTORE_PATH\n          EOF\n      - &set_up_local_properties\n        name: Set up Android local properties\n        script: echo \"flutter.sdk=$HOME/programs/flutter\" > \"$FCI_BUILD_DIR/flutter_news_example/android/local.properties\"\n      - &setup_keychain\n        name: Setup keychain\n        script: keychain initialize\n      - &fetch_signing_files\n        name: Fetch signing files\n        script: |\n          app-store-connect fetch-signing-files \"${BUNDLE_ID}\" \\\n              --type IOS_APP_STORE \\\n              --create\n      - &get_packages\n        name: Get packages\n        script: flutter packages pub get\n      - &build_apk\n        name: Build Android APK\n        script: flutter build apk --release --flavor ${FLAVOR} -t lib/main/main_${FLAVOR}.dart --build-number=$PROJECT_BUILD_NUMBER\n      - &build_aab\n        name: Build Android AAB\n        script: flutter build appbundle --release --flavor ${FLAVOR} -t lib/main/main_${FLAVOR}.dart --build-number=$PROJECT_BUILD_NUMBER\n      - &setup_signing_certificates\n        name: Set up signing certificate\n        script: keychain add-certificates\n      - &use_profiles\n        name: Use Xcode profiles\n        script: xcode-project use-profiles\n      - &pod_install\n        name: Run pod install\n        script: find . -name \"Podfile\" -execdir pod install \\;\n      - &build_ios\n        name: Build and sign iOS\n        script: flutter build ipa --release --flavor ${FLAVOR} -t lib/main/main_${FLAVOR}.dart --build-number=$PROJECT_BUILD_NUMBER --export-options-plist=/Users/builder/export_options.plist\n    artifacts:\n      - build/app/outputs/apk/${FLAVOR}/release/*.apk\n      - build/app/outputs/bundle/${FLAVOR}Release/*.aab\n      - build/app/outputs/mapping/**/mapping.txt\n      - build/ios/ipa/*.ipa\n      - /tmp/xcodebuild_logs/*.log\n      - flutter_drive.log\n    publishing:\n      app_store_connect:\n        api_key: $APP_STORE_CONNECT_PRIVATE_KEY\n        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER\n        issuer_id: $APP_STORE_CONNECT_ISSUER_ID\n      email:\n        recipients: *tst_emails\n      google_play:\n        credentials: $GPLAY_KEY\n        track: internal\n  production:\n    name: production\n    working_directory: flutter_news_example\n    max_build_duration: 60\n    environment:\n      flutter: 3.24.2\n      xcode: latest\n      cocoapods: default\n      vars:\n        <<: *automatic_ios_signing\n        <<: *android_signing\n        FLAVOR: production\n        BUNDLE_ID: com.flutter.news.example\n    cache:\n      cache_paths:\n        - $HOME/Library/Caches/CocoaPods\n        - $HOME/.pub-cache\n        - $HOME/.gradle/caches\n    scripts:\n      - *get_latest_tag\n      - *set_up_key_properties\n      - *set_up_local_properties\n      - *setup_keychain\n      - *fetch_signing_files\n      - *get_packages\n      - *build_apk\n      - *build_aab\n      - *setup_signing_certificates\n      - *use_profiles\n      - *pod_install\n      - *build_ios\n    artifacts:\n      - build/app/outputs/apk/${FLAVOR}/release/*.apk\n      - build/app/outputs/bundle/${FLAVOR}Release/*.aab\n      - build/app/outputs/mapping/**/mapping.txt\n      - build/ios/ipa/*.ipa\n      - /tmp/xcodebuild_logs/*.log\n      - flutter_drive.log\n    publishing:\n      app_store_connect:\n        api_key: $APP_STORE_CONNECT_PRIVATE_KEY\n        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER\n        issuer_id: $APP_STORE_CONNECT_ISSUER_ID\n      email:\n        recipients: *prod_emails\n      google_play:\n        credentials: $GPLAY_KEY\n        track: internal\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter_news_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}