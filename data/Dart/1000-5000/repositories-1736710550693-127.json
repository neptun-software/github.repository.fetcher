{
  "metadata": {
    "timestamp": 1736710550693,
    "page": 127,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TheAlgorithms/Dart",
      "stars": 1889,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6103515625,
          "content": "# See https://www.dartlang.org/guides/libraries/private-files\n\n# Files and directories created by pub\n.dart_tool/\n.packages\nbuild/\n# If you're building an application, you may want to check-in your pubspec.lock\npubspec.lock\n\n# Directory created by dartdoc\n# If you don't generate documentation locally you can remove this line.\ndoc/api/\n\n# Avoid committing generated Javascript files:\n*.dart.js\n*.info.json      # Produced by the --dump-info flag.\n*.js             # When generated by dart2js. Don't specify *.js if your\n                 # project includes source files written in JavaScript.\n*.js_\n*.js.deps\n*.js.map\n*.json\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.748046875,
          "content": "# Contributing guidelines\n\nWelcome to [TheAlgorithms/Dart](https://github.com/TheAlgorithms/Dart)!\n\n## Contributing\n* Fork this [repo](https://github.com/TheAlgorithms/Dart).\n* If Already Forked, Then make sure to sync your fork.\n* Make some changes and pull a request\n* [Automated tests are run](https://github.com/TheAlgorithms/Dart/actions) on all pull requests\n    * `dart analyze` is mandatory\n    * `dart format` is mandatory\n    * `dart test` is recommended\n\n## New File Name guidelines\n* Use lowercase words with \"_\" as separator\n* For example:\n```\nMyNewAlgorithm.dart     is incorrect\nmy_new_algorithm.dart   is correct format\n```\n\nWriter [@StepfenShawn](https://github.com/StepfenShawn), Feb 2020.\nUpdated [@akashgk](https://github.com/akashgk), Oct 2022.\n"
        },
        {
          "name": "DIRECTORY.md",
          "type": "blob",
          "size": 14.90625,
          "content": "\n## Array\n  * [Car Pool](https://github.com/TheAlgorithms/Dart/blob/master/array/car_pool.dart)\n  * [Move Zeroes](https://github.com/TheAlgorithms/Dart/blob/master/array/move_zeroes.dart)\n  * [Pivot Index](https://github.com/TheAlgorithms/Dart/blob/master/array/pivot_index.dart)\n  * [Sorted Squared Array](https://github.com/TheAlgorithms/Dart/blob/master/array/sorted_squared_array.dart)\n  * [Two Sum](https://github.com/TheAlgorithms/Dart/blob/master/array/two_sum.dart)\n  * [Validate Subsequence](https://github.com/TheAlgorithms/Dart/blob/master/array/validate_subsequence.dart)\n\n## Backtracking\n  * [N-Queen](https://github.com/TheAlgorithms/Dart/blob/master/backtracking/n-queen.dart)\n  * [Open Knight Tour](https://github.com/TheAlgorithms/Dart/blob/master/backtracking/open_knight_tour.dart)\n\n## Conversions\n  * [Binary To Decimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/binary_to_decimal.dart)\n  * [Binary To Hexadecimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/binary_to_hexadecimal.dart)\n  * [Binary To Octal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/binary_to_octal.dart)\n  * [Decimal To Any](https://github.com/TheAlgorithms/Dart/blob/master/conversions/Decimal_To_Any.dart)\n  * [Decimal To Binary](https://github.com/TheAlgorithms/Dart/blob/master/conversions/Decimal_To_Binary.dart)\n  * [Decimal To Hexadecimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/Decimal_to_Hexadecimal.dart)\n  * [Decimal To Octal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/Decimal_to_Octal.dart)\n  * [Hexadecimal To Binary](https://github.com/TheAlgorithms/Dart/blob/master/conversions/hexadecimal_to_binary.dart)\n  * [Hexadecimal To Decimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/hexadecimal_to_decimal.dart)\n  * [Hexadecimal To Octal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/hexadecimal_to_octal.dart)\n  * [Integer To Roman](https://github.com/TheAlgorithms/Dart/blob/master/conversions/Integer_To_Roman.dart)\n  * [Octal To Binary](https://github.com/TheAlgorithms/Dart/blob/master/conversions/octal_to_binary.dart)\n  * [Octal To Decimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/octal_to_decimal.dart)\n  * [Octal To Hexadecimal](https://github.com/TheAlgorithms/Dart/blob/master/conversions/octal_to_hexadecimal.dart)\n  * [Roman To Integer](https://github.com/TheAlgorithms/Dart/blob/master/conversions/roman_to_integer.dart)\n\n## Data Structures\n  * Binary Tree\n    * [Basic Binary Tree](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/binary_tree/basic_binary_tree.dart)\n    * [Binary Tree Traversal](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/binary_tree/binary_tree_traversal.dart)\n  * Hashmap\n    * [Hashing](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/HashMap/Hashing.dart)\n  * Heap\n    * Binary Heap\n      * [Max Heap](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Heap/Binary_Heap/Max_heap.dart)\n      * [Min Heap](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Heap/Binary_Heap/Min_Heap.dart)\n      * [Min Heap Two](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Heap/Binary_Heap/min_heap_two.dart)\n  * Linked List\n    * [Cycle In Linked List](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/linked_list/cycle_in_linked_list.dart)\n    * [Linked List](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/linked_list/linked_list.dart)\n    * [Merge Sorted List](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/linked_list/merge_sorted_list.dart)\n  * Queue\n    * [Circular Queue](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Queue/Circular_Queue.dart)\n    * [List Queue](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Queue/List_Queue.dart)\n    * [Priority Queue](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Queue/Priority_Queue.dart)\n  * Stack\n    * [Array Stack](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Stack/Array_Stack.dart)\n    * [Balanced Brackets](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Stack/balanced_brackets.dart)\n    * [Linked List Stack](https://github.com/TheAlgorithms/Dart/blob/master/data_structures/Stack/Linked_List_Stack.dart)\n\n## Dynamic Programming\n  * [01Knapsack Recursive](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/01knapsack_recursive.dart)\n  * [Coin Change](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/coin_change.dart)\n  * [Kadanes Algorithm](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/kadanes_algorithm.dart)\n  * [Longest Common Subsequence](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/longest_common_subsequence.dart)\n  * [Longest Common Substring](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/longest_common_substring.dart)\n  * [Min Number Of Jumps](https://github.com/TheAlgorithms/Dart/blob/master/dynamic_programming/min_number_of_jumps.dart)\n\n## Graphs\n  * [Area Of Island](https://github.com/TheAlgorithms/Dart/blob/master/graphs/area_of_island.dart)\n  * [Breadth First Search](https://github.com/TheAlgorithms/Dart/blob/master/graphs/breadth_first_search.dart)\n  * [Depth First Search](https://github.com/TheAlgorithms/Dart/blob/master/graphs/depth_first_search.dart)\n  * [Nearest Neighbour Algorithm](https://github.com/TheAlgorithms/Dart/blob/master/graphs/nearest_neighbour_algorithm.dart)\n\n## Maths\n  * [Abs](https://github.com/TheAlgorithms/Dart/blob/master/maths/abs.dart)\n  * [Abs Max](https://github.com/TheAlgorithms/Dart/blob/master/maths/abs_max.dart)\n  * [Abs Min](https://github.com/TheAlgorithms/Dart/blob/master/maths/abs_min.dart)\n  * [Amicable Numbers](https://github.com/TheAlgorithms/Dart/blob/master/maths/amicable_numbers.dart)\n  * [Armstrong Number](https://github.com/TheAlgorithms/Dart/blob/master/maths/Armstrong_number.dart)\n  * [Average](https://github.com/TheAlgorithms/Dart/blob/master/maths/average.dart)\n  * [Eulers Totient](https://github.com/TheAlgorithms/Dart/blob/master/maths/eulers_totient.dart)\n  * [Factorial](https://github.com/TheAlgorithms/Dart/blob/master/maths/factorial.dart)\n  * [Factorial Approximation](https://github.com/TheAlgorithms/Dart/blob/master/maths/factorial_approximation.dart)\n  * [Factorial Recursion](https://github.com/TheAlgorithms/Dart/blob/master/maths/factorial_recursion.dart)\n  * [Factors](https://github.com/TheAlgorithms/Dart/blob/master/maths/factors.dart)\n  * [Fermats Little Theorem](https://github.com/TheAlgorithms/Dart/blob/master/maths/fermats_little_theorem.dart)\n  * [Fibonacci Dynamic Programming](https://github.com/TheAlgorithms/Dart/blob/master/maths/fibonacci_dynamic_programming.dart)\n  * [Fibonacci Recursion](https://github.com/TheAlgorithms/Dart/blob/master/maths/fibonacci_recursion.dart)\n  * [Find Max](https://github.com/TheAlgorithms/Dart/blob/master/maths/find_max.dart)\n  * [Find Max Recursion](https://github.com/TheAlgorithms/Dart/blob/master/maths/find_max_recursion.dart)\n  * [Find Min](https://github.com/TheAlgorithms/Dart/blob/master/maths/find_min.dart)\n  * [Find Min Recursion](https://github.com/TheAlgorithms/Dart/blob/master/maths/find_min_recursion.dart)\n  * [Hamming Distance](https://github.com/TheAlgorithms/Dart/blob/master/maths/hamming_distance.dart)\n  * [Kynea Numbers](https://github.com/TheAlgorithms/Dart/blob/master/maths/Kynea_numbers.dart)\n  * [Lineardiophantineeqn](https://github.com/TheAlgorithms/Dart/blob/master/maths/LinearDiophantineEqn.dart)\n  * [Lu Decomposition](https://github.com/TheAlgorithms/Dart/blob/master/maths/lu_decomposition.dart)\n  * [Newton Method](https://github.com/TheAlgorithms/Dart/blob/master/maths/newton_method.dart)\n  * [Palindrome Number](https://github.com/TheAlgorithms/Dart/blob/master/maths/palindrome_number.dart)\n  * [Palindrome String](https://github.com/TheAlgorithms/Dart/blob/master/maths/palindrome_string.dart)\n  * [Palindrome String Recursion](https://github.com/TheAlgorithms/Dart/blob/master/maths/palindrome_string_recursion.dart)\n  * [Perfect Number](https://github.com/TheAlgorithms/Dart/blob/master/maths/perfect_number.dart)\n  * [Pow](https://github.com/TheAlgorithms/Dart/blob/master/maths/pow.dart)\n  * [Power Of Two](https://github.com/TheAlgorithms/Dart/blob/master/maths/power_of_two.dart)\n  * [Prime Check](https://github.com/TheAlgorithms/Dart/blob/master/maths/prime_check.dart)\n  * [Relu Function](https://github.com/TheAlgorithms/Dart/blob/master/maths/relu_function.dart)\n  * [Shreedharacharya](https://github.com/TheAlgorithms/Dart/blob/master/maths/shreedharacharya.dart)\n  * [Sieve Of Eratosthenes](https://github.com/TheAlgorithms/Dart/blob/master/maths/sieve_of_eratosthenes.dart)\n  * [Sigmoid](https://github.com/TheAlgorithms/Dart/blob/master/maths/sigmoid.dart)\n  * [Simpson Rule](https://github.com/TheAlgorithms/Dart/blob/master/maths/simpson_rule.dart)\n  * [Sphenic Number](https://github.com/TheAlgorithms/Dart/blob/master/maths/sphenic_number.dart)\n  * [Symmetric Derivative](https://github.com/TheAlgorithms/Dart/blob/master/maths/symmetric_derivative.dart)\n  * [Ugly Numbers](https://github.com/TheAlgorithms/Dart/blob/master/maths/Ugly_numbers.dart)\n\n## Other\n  * [Ackermann](https://github.com/TheAlgorithms/Dart/blob/master/other/ackermann.dart)\n  * [Binpow](https://github.com/TheAlgorithms/Dart/blob/master/other/binpow.dart)\n  * [Chinese Remainder Theorem](https://github.com/TheAlgorithms/Dart/blob/master/other/chinese_remainder_theorem.dart)\n  * [Collatz](https://github.com/TheAlgorithms/Dart/blob/master/other/collatz.dart)\n  * [Fisher Yates Shuffle](https://github.com/TheAlgorithms/Dart/blob/master/other/fisher_yates_shuffle.dart)\n  * [Fizzbuzz](https://github.com/TheAlgorithms/Dart/blob/master/other/FizzBuzz.dart)\n  * [Gcd](https://github.com/TheAlgorithms/Dart/blob/master/other/gcd.dart)\n  * [Haversine Formula](https://github.com/TheAlgorithms/Dart/blob/master/other/haversine_formula.dart)\n  * [Heaps Algorithm](https://github.com/TheAlgorithms/Dart/blob/master/other/heaps_algorithm.dart)\n  * [Kadanealgo](https://github.com/TheAlgorithms/Dart/blob/master/other/kadaneAlgo.dart)\n  * [Lcm](https://github.com/TheAlgorithms/Dart/blob/master/other/LCM.dart)\n  * [Magic Number](https://github.com/TheAlgorithms/Dart/blob/master/other/magic_number.dart)\n  * [Moore Voting Algorithm](https://github.com/TheAlgorithms/Dart/blob/master/other/Moore_voting_algorithm.dart)\n  * [N Bonacci](https://github.com/TheAlgorithms/Dart/blob/master/other/N_bonacci.dart)\n  * [Swap All Odd And Even Bits](https://github.com/TheAlgorithms/Dart/blob/master/other/swap_all_odd_and_even_bits.dart)\n  * [Tower Of Hanoi](https://github.com/TheAlgorithms/Dart/blob/master/other/tower_of_hanoi.dart)\n\n## Project Euler\n  * Problem 1\n    * [Sol1](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_1/sol1.dart)\n  * Problem 10\n    * [Sol10](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_10/sol10.dart)\n  * Problem 12\n    * [Sol12](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_12/sol12.dart)\n  * Problem 13\n    * [Sol13](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_13/sol13.dart)\n  * Problem 17\n    * [Sol17](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_17/sol17.dart)\n  * Problem 2\n    * [Sol2](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_2/sol2.dart)\n  * Problem 20\n    * [Sol20](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_20/sol20.dart)\n  * Problem 3\n    * [Sol3](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_3/sol3.dart)\n  * Problem 4\n    * [Sol4](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_4/sol4.dart)\n  * Problem 5\n    * [Sol5](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_5/sol5.dart)\n  * Problem 6\n    * [Sol6](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_6/sol6.dart)\n  * Problem 7\n    * [Sol7](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_7/sol7.dart)\n  * Problem 8\n    * [Sol8](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_8/sol8.dart)\n  * Problem 9\n    * [Sol9](https://github.com/TheAlgorithms/Dart/blob/master/project_euler/problem_9/sol9.dart)\n\n## Search\n  * [Binary Search](https://github.com/TheAlgorithms/Dart/blob/master/search/binary_Search.dart)\n  * [Binary Search Recursion](https://github.com/TheAlgorithms/Dart/blob/master/search/binary_search_recursion.dart)\n  * [Fibonacci Search](https://github.com/TheAlgorithms/Dart/blob/master/search/fibonacci_Search.dart)\n  * [Interpolation Search](https://github.com/TheAlgorithms/Dart/blob/master/search/interpolation_Search.dart)\n  * [Jump Search](https://github.com/TheAlgorithms/Dart/blob/master/search/jump_Search.dart)\n  * [Linear Search](https://github.com/TheAlgorithms/Dart/blob/master/search/linear_Search.dart)\n  * [Peak Element](https://github.com/TheAlgorithms/Dart/blob/master/search/peak_element.dart)\n  * [Ternary Search](https://github.com/TheAlgorithms/Dart/blob/master/search/ternary_Search.dart)\n\n## Sort\n  * [Bubble Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/bubble_Sort.dart)\n  * [Cocktail Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/cocktail_sort.dart)\n  * [Comb Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/comb_sort.dart)\n  * [Count Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/count_sort.dart)\n  * [Gnome Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/gnome_Sort.dart)\n  * [Heap Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/heap_Sort.dart)\n  * [Insert Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/insert_Sort.dart)\n  * [Merge Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/merge_sort.dart)\n  * [Pigeonhole Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/pigeonhole_sort.dart)\n  * [Quick Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/quick_Sort.dart)\n  * [Radix Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/radix_sort.dart)\n  * [Select Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/select_Sort.dart)\n  * [Shell Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/shell_Sort.dart)\n  * [Tim Sort](https://github.com/TheAlgorithms/Dart/blob/master/sort/tim_Sort.dart)\n\n## Strings\n  * [Isomorphic Strings](https://github.com/TheAlgorithms/Dart/blob/master/strings/isomorphic_strings.dart)\n  * [Knuth Morris Prat](https://github.com/TheAlgorithms/Dart/blob/master/strings/knuth_morris_prat.dart)\n  * [Remove Duplicates](https://github.com/TheAlgorithms/Dart/blob/master/strings/remove%20duplicates.dart)\n  * [Reverse String](https://github.com/TheAlgorithms/Dart/blob/master/strings/reverse_string.dart)\n  * [Reverse Words Of String](https://github.com/TheAlgorithms/Dart/blob/master/strings/reverse_words_of_string.dart)\n\n## Trees\n  * [Path Sum](https://github.com/TheAlgorithms/Dart/blob/master/trees/path_sum.dart)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0458984375,
          "content": "MIT License\n\nCopyright (c) 2025 The Algorithms\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.2197265625,
          "content": "# The Algorithms - Dart\n\n[![Build Status](https://travis-ci.com/TheAlgorithms/Dart.svg?branch=master)](https://travis-ci.com/TheAlgorithms/Dart)\n[![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.me/TheAlgorithms/100) &nbsp;\n[![Discord chat](https://img.shields.io/discord/808045925556682782.svg?logo=discord&colorB=5865F2)](https://the-algorithms.com/discord/) &nbsp;\n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://gitter.im/#TheAlgorithms_community:gitter.im)\n\n### All algorithms implemented in Dart (for education)\n\nThese implementations are for learning purposes. They may be less efficient than the implementations in the Dart standard library.\n\n## List of Algorithms\n\nSee our [directory](https://github.com/TheAlgorithms/Dart/blob/master/DIRECTORY.md) for full list of all algorithms. A few of the algorithms (the most common ones) are explained here.\n\n## Search Algorithms\n\n### Linear\n![alt text][linear-image]\n\nFrom [Wikipedia][linear-wiki]: linear search or sequential search is a method for finding a target value within a list. It sequentially checks each element of the list for the target value until a match is found or until all the elements have been searched.\n  Linear search runs in at the worst linear time and makes at most n comparisons, where n is the length of the list.\n\n__Properties__\n* Worst case performance    O(n)\n* Best case performance    O(1)\n* Average case performance    O(n)\n* Worst case space complexity    O(1) iterative\n\n\n### Binary\n![alt text][binary-image]\n\nFrom [Wikipedia][binary-wiki]: Binary search, also known as half-interval search or logarithmic search, is a search algorithm that finds the position of a target value within a sorted array. It compares the target value to the middle element of the array; if they are unequal, the half in which the target cannot lie is eliminated and the search continues on the remaining half until it is successful.\n\n__Properties__\n* Worst case performance    O(log n)\n* Best case performance    O(1)\n* Average case performance    O(log n)\n* Worst case space complexity    O(1)\n\n----------------------------------------------------------------------------------------------------------------------\n\n## Sort Algorithms\n\n\n### Bubble\n![alt text][bubble-image]\n\nFrom [Wikipedia][bubble-wiki]: Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list to be sorted, compares each pair of adjacent items and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted.\n\n__Properties__\n* Worst case performance    O(n^2)\n* Best case performance    O(n)\n* Average case performance    O(n^2)\n\n###### View the algorithm in [action][bubble-toptal]\n\n\n\n### Insertion\n![alt text][insertion-image]\n\nFrom [Wikipedia][insertion-wiki]: Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort.\n\n__Properties__\n* Worst case performance    O(n^2)\n* Best case performance    O(n)\n* Average case performance    O(n^2)\n\n###### View the algorithm in [action][insertion-toptal]\n\n\n### Quick\n![alt text][quick-image]\n\nFrom [Wikipedia][quick-wiki]: Quicksort (sometimes called partition-exchange sort) is an efficient sorting algorithm, serving as a systematic method for placing the elements of an array in order.\n\n__Properties__\n* Worst case performance    O(n^2)\n* Best case performance    O(n log n) or O(n) with three-way partition\n* Average case performance    O(n^2)\n\n###### View the algorithm in [action][quick-toptal]\n\n### Selection\n![alt text][selection-image]\n\nFrom [Wikipedia][selection-wiki]: The algorithm divides the input list into two parts: the sublist of items already sorted, which is built up from left to right at the front (left) of the list, and the sublist of items remaining to be sorted that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\n\n__Properties__\n* Worst case performance    O(n^2)\n* Best case performance    O(n^2)\n* Average case performance    O(n^2)\n\n###### View the algorithm in [action][selection-toptal]\n\n\n### Merge\n![alt text][merge-image]\n\nFrom [Wikipedia][merge-wiki]: Merge sort (also commonly spelled mergesort) is a divide and conquer algorithm that was invented by John von Neumann in 1945. The algorithm dirst divides the list into the smallest unit (1 element), then compares each element with the adjacent list to sort and merge the two adjacent lists. Finally all the elements are sorted and merged. It is an efficient, general-purpose, comparison-based sorting algorithm.\n\n__Properties__\n* Worst case performance    O(n log n)\n* Best case performance    O(n log n)\n* Average case performance    O(n log n)\n\n###### View the algorithm in [action][merge-toptal]\n\n\n### Shell\n![alt text][shell-image]\n\nFrom [Wikipedia][shell-wiki]:  Shellsort is a generalization of insertion sort that allows the exchange of items that are far apart.  The idea is to arrange the list of elements so that, starting anywhere, considering every nth element gives a sorted list.  Such a list is said to be h-sorted.  Equivalently, it can be thought of as h interleaved lists, each individually sorted.\n\n__Properties__\n* Worst case performance O(nlog2 2n)\n* Best case performance O(n log n)\n* Average case performance depends on gap sequence\n\n###### View the algorithm in [action][shell-toptal]\n\n### Time-Complexity Graphs\n\nComparing the complexity of sorting algorithms (Bubble Sort, Insertion Sort, Selection Sort)\n\n[Complexity Graphs](https://github.com/prateekiiest/Python/blob/master/sorts/sortinggraphs.png)\n\n[bubble-toptal]: https://www.toptal.com/developers/sorting-algorithms/bubble-sort\n[bubble-wiki]: https://en.wikipedia.org/wiki/Bubble_sort\n[bubble-image]: https://upload.wikimedia.org/wikipedia/commons/thumb/8/83/Bubblesort-edited-color.svg/220px-Bubblesort-edited-color.svg.png \"Bubble Sort\"\n\n[insertion-toptal]: https://www.toptal.com/developers/sorting-algorithms/insertion-sort\n[insertion-wiki]: https://en.wikipedia.org/wiki/Insertion_sort\n[insertion-image]: https://upload.wikimedia.org/wikipedia/commons/7/7e/Insertionsort-edited.png \"Insertion Sort\"\n\n[quick-toptal]: https://www.toptal.com/developers/sorting-algorithms/quick-sort\n[quick-wiki]: https://en.wikipedia.org/wiki/Quicksort\n[quick-image]: https://upload.wikimedia.org/wikipedia/commons/6/6a/Sorting_quicksort_anim.gif \"Quick Sort\"\n\n[merge-toptal]: https://www.toptal.com/developers/sorting-algorithms/merge-sort\n[merge-wiki]: https://en.wikipedia.org/wiki/Merge_sort\n[merge-image]: https://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif \"Merge Sort\"\n\n[selection-toptal]: https://www.toptal.com/developers/sorting-algorithms/selection-sort\n[selection-wiki]: https://en.wikipedia.org/wiki/Selection_sort\n[selection-image]: https://upload.wikimedia.org/wikipedia/commons/thumb/b/b0/Selection_sort_animation.gif/250px-Selection_sort_animation.gif \"Selection Sort Sort\"\n\n[shell-toptal]: https://www.toptal.com/developers/sorting-algorithms/shell-sort\n[shell-wiki]: https://en.wikipedia.org/wiki/Shellsort\n[shell-image]: https://upload.wikimedia.org/wikipedia/commons/d/d8/Sorting_shellsort_anim.gif \"Shell Sort\"\n\n[linear-wiki]: https://en.wikipedia.org/wiki/Linear_search\n[linear-image]: http://www.tutorialspoint.com/data_structures_algorithms/images/linear_search.gif\n\n[binary-wiki]: https://en.wikipedia.org/wiki/Binary_search_algorithm\n[binary-image]: https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_search_into_array.png\n\n----------------------------------------------------------------------------------\n\n## Community Channel\n\nWe're on [Gitter](https://gitter.im/TheAlgorithms)! Please join us.\n\n## Contribution\n\nPlease read our [CONTRIBUTING.md](https://github.com/TheAlgorithms/Dart/blob/master/CONTRIBUTING.md).\n\n## License\n\n[MIT](https://github.com/TheAlgorithms/Dart/blob/master/LICENSE)\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.0595703125,
          "content": "analyzer:\n  exclude:\n    - maths/fermats_little_theorem.dart\n"
        },
        {
          "name": "array",
          "type": "tree",
          "content": null
        },
        {
          "name": "backtracking",
          "type": "tree",
          "content": null
        },
        {
          "name": "conversions",
          "type": "tree",
          "content": null
        },
        {
          "name": "dart_test.yaml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "paths: [.]\n\nfilename: \"*.dart\"\n"
        },
        {
          "name": "data_structures",
          "type": "tree",
          "content": null
        },
        {
          "name": "dynamic_programming",
          "type": "tree",
          "content": null
        },
        {
          "name": "graphs",
          "type": "tree",
          "content": null
        },
        {
          "name": "maths",
          "type": "tree",
          "content": null
        },
        {
          "name": "other",
          "type": "tree",
          "content": null
        },
        {
          "name": "project_euler",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.1962890625,
          "content": "name: the_algorithms_dart\n\nrepository: https://github.com/TheAlgorithms/Dart\n\ndependencies:\n  test: ^1.15.4\n  coverage: ^1.6.0\n\ndev_dependencies:\n  stack: ^0.2.1\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n"
        },
        {
          "name": "search",
          "type": "tree",
          "content": null
        },
        {
          "name": "sort",
          "type": "tree",
          "content": null
        },
        {
          "name": "strings",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "trees",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}