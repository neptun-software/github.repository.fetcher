{
  "metadata": {
    "timestamp": 1736710582405,
    "page": 193,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Sky24n/common_utils",
      "stars": 1423,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3876953125,
          "content": "# See https://www.dartlang.org/guides/libraries/private-files\n\n# Files and directories created by pub\n.dart_tool/\n.packages\n.pub/\nbuild/\n# If you're building an application, you may want to check-in your pubspec.lock\npubspec.lock\n\n# Directory created by dartdoc\n# If you don't generate documentation locally you can remove this line.\ndoc/api/\n\n*/.idea/\n.idea/\n/.idea/workspace.xml\n/.idea/libraries"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.08203125,
          "content": "## 2.1.0\n\n* TODO: fix decimal.\n\n## 2.0.2\n\n* TODO: fix TimerUtil.\n\n## 2.0.1\n\n* TODO: fix analysis.\n\n## 2.0.0\n\n* TODO: Migrate to null-safety.\n\n## 1.2.4\n\n* TODO: fix regex mobileExact.\n\n## 1.2.3\n\n* TODO: fix analysis.\n\n## 1.2.2\n\n* TODO: RegexUtil add regexPassport, fix TimelineInfo bugs and some updates.\n\n## 1.2.1\n\n* TODO: fix DataFormats -> DateFormats, fix TimelineInfo bugs.\n\n## 1.2.0\n\n* TODO: add JsonUtil, EncryptUtil, Some updates.\n\n## 1.1.3\n\n* TODO: TextUtil, EnDecodeUtil, Some updates.\n## 1.1.1\n\n* TODO: Some updates. \n\n## 1.0.9\n\n* TODO: NumUtil updates(add subtract multiply divide without loosing precision). MoneyUtil precise conversion.\n\n## 1.0.8\n\n* TODO: Some updates. \n\n## 1.0.4\n\n* TODO: Newly TimelineUtil.DateUtil update.No platform restriction found in primary library. \n\n## 1.0.3\n\n* TODO: Newly added TimerUtil, MoneyUtil, LogUtil,Some updates.\n\n## 1.0.2\n\n* TODO: fix bug.\n\n## 1.0.1\n\n* TODO: Newly added NumUtil,Some updates.\n\n## 1.0.0\n\n* TODO: Newly added DateUtil.\n\n## 0.0.2\n\n* TODO: Contains ScreenUtil, WidgetUtil, ObjectUtil, RegexUtil.\n\n## 0.0.1\n\n* TODO: CommonUtils initial release."
        },
        {
          "name": "CHANGE_LOG.md",
          "type": "blob",
          "size": 6.9423828125,
          "content": "## 更新说明\n#### v1.2.1 (2020.05.29)\n1、fix DataFormats -> DateFormats。  \n2、fix TimelineInfo bugs。\n\n#### v1.2.0 (2020.05.23)\n1、新增JsonUtil。  \n2、新增EncryptUtil 简单加解密。  \n3、LogUtil 更新。\n```yaml\nString objStr = \"{\\\"name\\\":\\\"成都市\\\"}\";\nCity hisCity = JsonUtil.getObj(objStr, (v) => City.fromJson(v));\nString listStr = \"[{\\\"name\\\":\\\"成都市\\\"}, {\\\"name\\\":\\\"北京市\\\"}]\";\nList<City> cityList = JsonUtil.getObjList(listStr, (v) => City.fromJson(v));\n\nconst String key = '11, 22, 33, 44, 55, 66';\nString userName = 'Sky24n';\nString encode = EncryptUtil.xorBase64Encode(userName, key); // WH1YHgMs\nString decode = EncryptUtil.xorBase64Decode(encode, key); // Sky24n\n\n//超长log查看\ncommon_utils e  — — — — — — — — — — — — — — — — st — — — — — — — — — — — — — — — —\ncommon_utils e | 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,\ncommon_utils e | 7,988,989,990,991,992,993,994,995,996,997,998,999,\ncommon_utils e  — — — — — — — — — — — — — — — — ed — — — — — — — — — — — — — — — —\n```\n#### v1.1.3 (2019.07.10)  1、新增TextUtil 银行卡号每隔4位加空格，每隔3三位加逗号，隐藏手机号等等.\n2、新增EnDecodeUtil md5加密，Base64加/解密.  \n3、DateUtil 新增日期格式化，支持自定义格式输出。  \n4、LogUtil 支持输出超长log。  \n5、RegexUtil 支持199号段。\n```dart\n/// DateUtil\nDateUtil.formatDateMs(DateTime.now().millisecondsSinceEpoch, format: DataFormats.full); // 2019-07-09 16:51:14\nDateUtil.formatDateStr(\"2019-07-09 16:51:14\", format: \"yyyy/M/d HH:mm:ss\"); // 2019/7/9 16:51:14\nDateUtil.formatDate(DateTime.now(), format: \"yyyy/MM/dd HH:mm:ss\");  // 2019/07/09 16:51:14\n  \n/// TextUtil\nString phoneNo = TextUtil.formatSpace4(\"15845678910\"); // 1584 5678 910\nString num     = TextUtil.formatComma3(\"12345678\"); // 12,345,678\nString phoneNo = TextUtil.hideNumber(\"15845678910\"); // 158****8910\n\n```\n```dart\n/// DateUtil\nDateUtil.formatDateMs(DateTime.now().millisecondsSinceEpoch, format: DataFormats.full); // 2019-07-09 16:51:14\nDateUtil.formatDateStr(\"2019-07-09 16:51:14\", format: \"yyyy/M/d HH:mm:ss\"); // 2019/7/9 16:51:14\nDateUtil.formatDate(DateTime.now(), format: \"yyyy/MM/dd HH:mm:ss\");  // 2019/07/09 16:51:14\n  \n/// TextUtil\nString phoneNo = TextUtil.formatSpace4(\"15845678910\"); // 1584 5678 910\nString num     = TextUtil.formatComma3(\"1234\"); // 123,4\nString phoneNo = TextUtil.hidePhone(\"15845678910\")// 158****8910\n\n```\n(2018.10.31)  \nNumUtil更新, 精确加、减、乘、除, 防止精度丢失.  \nMoneyUtil更新, 精确转换, 防止精度丢失.  \n  \ncommon_utils库不再有平台限制.  \nWidgetUtil,ScreenUtil迁移至[flustars][flustars_github]库。\n\n\n## Flutter工具类库[flustars][flustars_github]更新说明\n#### v0.1.8(2018.12.29)   \nScreenUtil 屏幕适配更新。  \n方案一、不依赖context\n```\n步骤 1\n//如果设计稿尺寸默认配置一致，无需该设置。  配置设计稿尺寸 默认 360.0 / 640.0 / 3.0\nsetDesignWHD(_designW,_designH,_designD);  \n  \n步骤 2\n// 在MainPageState build 调用MediaQuery.of(context)\nclass MainPageState extends State<MainPage> {\n  @override\n  Widget build(BuildContext context) {\n  \n    // 在 MainPageState build 调用 MediaQuery.of(context)\n    MediaQuery.of(context);\n    \n    double width = ScreenUtil.getInstance().screenWidth;\n    double height = ScreenUtil.getInstance().screenHeight;\n    return new Scaffold(\n      appBar: new AppBar(),\n    );\n  }\n}  \n  \n步骤 3\nScreenUtil.getInstance().screenWidth\nScreenUtil.getInstance().screenHeight\nScreenUtil.getInstance().screenDensity\nScreenUtil.getInstance().statusBarHeight\nScreenUtil.getInstance().bottomBarHeight\n//屏幕适配相关  \nScreenUtil.getInstance().getWidth(size); //返回根据屏幕宽适配后尺寸（单位 dp or pt）\nScreenUtil.getInstance().getHeight(size); //返回根据屏幕高适配后尺寸 （单位 dp or pt）\nScreenUtil.getInstance().getWidthPx(sizePx); //sizePx 单位px\nScreenUtil.getInstance().getHeightPx(sizePx); //sizePx 单位px\nScreenUtil.getInstance().getSp(fontSize); //返回根据屏幕宽适配后字体尺寸\n\n```\n方案二、依赖context\n```\n//如果设计稿尺寸默认配置一致，无需该设置。  配置设计稿尺寸 默认 360.0 / 640.0 / 3.0\nsetDesignWHD(_designW,_designH,_designD);  \n\nScreenUtil.getScreenW(context); //屏幕 宽\nScreenUtil.getScreenH(context); //屏幕 高\nScreenUtil.getScreenDensity(context); //屏幕 像素密度\nScreenUtil.getStatusBarH(context); //状态栏高度\nScreenUtil.getBottomBarH(context); //bottombar 高度\n//屏幕适配相关  \nScreenUtil.getScaleW(context, size); //返回根据屏幕宽适配后尺寸（单位 dp or pt）\nScreenUtil.getScaleH(context, size); //返回根据屏幕高适配后尺寸 （单位 dp or pt）\nScreenUtil.getScaleSp(context, size) ;//返回根据屏幕宽适配后字体尺寸\n```\n#### v0.1.6(2018.12.20)  \n新增网络请求工具DioUtil, 单例模式，可输出请求日志。详细请求+解析请参考[flutter_wanandroid][flutter_wanandroid_github]项目。\n```\n// 打开debug模式.\nDioUtil.openDebug(); \n\n// 配置网络参数.\nOptions options = DioUtil.getDefOptions();\noptions.baseUrl = \"http://www.wanandroid.com/\";\nHttpConfig config = new HttpConfig(options: options);\nDioUtil().setConfig(config);\n  \n// 两种单例请求方式.\nDioUtil().request<List>(Method.get, \"banner/json\");\nDioUtil.getInstance().request(Method.get, \"banner/json\");\n  \n//示例\nLoginReq req = new LoginReq('username', 'password');\nDioUtil().request(Method.post, \"user/login\",data: req.toJson());\n  \n//示例\nFormData formData = new FormData.from({\n      \"username\": \"username\",\n      \"password\": \"password\",\n    });\nDioUtil().requestR(Method.post, \"user/login\",data: rformData);\n  \n// 网络请求日志  \nI/flutter ( 5922): ----------------Http Log----------------\nI/flutter ( 5922): [statusCode]:   200\nI/flutter ( 5922): [request   ]:   method: GET  baseUrl: http://www.wanandroid.com/  path: lg/collect/list/0/json\nI/flutter ( 5922): [reqdata   ]:   null\nI/flutter ( 5922): [response  ]:   {data: {curPage: 1, datas: [], offset: 0, over: true, pageCount: 0, size: 20, total: 0}, errorCode: 0, errorMsg: }\n```\n\n#### v0.1.5(2018.12.14)  \nScreenUtil 新增屏幕适配，不依赖context。\n```\n//如果设计稿尺寸默认配置一致，无需该设置。  配置设计稿尺寸 默认 360.0 / 640.0 / 3.0\nsetDesignWHD(_designW,_designH,_designD);\n\n//返回根据屏幕宽适配后尺寸（单位 dp or pt）\nScreenUtil.getInstance().getWidth(100.0);  \n\n//返回根据屏幕高适配后尺寸（单位 dp or pt）\nScreenUtil.getInstance().getHeight(100.0); \n\n//返回根据屏幕宽适配后字体尺寸\nScreenUtil.getInstance().getSp(12.0); \n```\n\n\n\n\n[flutter_wanandroid_github]: https://github.com/Sky24n/flutter_wanandroid\n[common_utils_github]: https://github.com/Sky24n/common_utils\n[flustars_github]: https://github.com/Sky24n/flustars"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2802734375,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2018, Sky24n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 12.2041015625,
          "content": "Language: English | [中文简体](https://github.com/Sky24n/common_utils)\n\n[![Pub](https://img.shields.io/pub/v/common_utils.svg?style=flat-square&color=009688)](https://pub.dartlang.org/packages/common_utils)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![Pub](https://img.shields.io/pub/v/common_utils.svg?style=flat-square&color=2196F3)](https://pub.flutter-io.cn/packages/common_utils)\n\n## common_utils is a Dart common utils library.\n\n1、Dart project dependencies.\n```yaml\ndependencies:\n  common_utils: ^2.1.0\n```\n2、Dart project dependencies, [flustars][flustars_github] is a Flutter common utils library. More SpUtil, ScreenUtil, DirectoryUtil.\n```yaml\ndependencies:\n  flustars: ^2.0.1  \n```\n\nDart utils Library [common_utils][common_utils_github]\n1. TimelineUtil     : timeline util.\n2. TimerUtil        : countdown，timer.\n3. MoneyUtil        : fen to yuan, format output.\n4. LogUtil          : simply encapsulate print logs.\n5. DateUtil         : date conversion formatted output.\n6. RegexUtil        : regular verification of mobile phone numbers, ID cards, mailboxes and so on.\n7. NumUtil          : keep [x] decimal places, add subtract multiply divide without loosing precision.\n8. ObjectUtil       : object is empty, two List is equal.\n9. EncryptUtil      : xor, md5 ，Base64..\n10. TextUtil        : hide phoneNo.\n11. JsonUtil        : json to object.\n\nFlutter utils Library [flustars][flustars_github]\n1. SpUtil           : SharedPreferences Util.\n2. ScreenUtil       : get screen width height density, appBarHeight, statusBarHeight, orientation.\n3. WidgetUtil       : get Widget width height，coordinates.\n4. ImageUtil        : get image size.\n5. DirectoryUtil    : Directory Util.\n6. DioUtil          : Dio Util(move to[DioUtil](https://github.com/Sky24n/FlutterRepos/blob/master/base_library/lib/src/data/net/dio_util.dart))。\n\n### APIs\n* SpUtil\nSharedPreferences util.\n```dart\n/// await sp initialized。\nawait SpUtil.getInstance();  \n  \n/// support default value.\nString name = SpUtil.putString(\"key_username\", \"Sky24n\");\nbool isShow = SpUtil.getBool(\"key_show\", defValue: true);\n  \n/// save object example.\nCity city = new City();\ncity.name = \"成都市\";\nSpUtil.putObject(\"loc_city\", city);\n    \nCity hisCity = SpUtil.getObj(\"loc_city\", (v) => City.fromJson(v));\nprint(\"City: \" + (hisCity == null ? \"null\" : hisCit.toString()));\n  \n\n/// save object list example.\nList<City> list = new List();\nlist.add(new City(name: \"成都市\"));\nlist.add(new City(name: \"北京市\"));\nSpUtil.putObjectList(\"loc_city_list\", list);\n    \nList<City> _cityList = SpUtil.getObjList(\"loc_city_list\", (v) => City.fromJson(v));\nprint(\"City list: \" + (_cityList == null ? \"null\" : _cityList.toString()));\n```\n\n* DateUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/date_page.dart)\n```\n/// common format。example：\"yyyy/MM/dd HH:mm:ss\"，\"yyyy/M/d HH:mm:ss\"。\n/// year -> yyyy/yy   month -> MM/M    day -> dd/d\n/// hour -> HH/H      minute -> mm/m   second -> ss/s\nclass DataFormats {\n  static String full = \"yyyy-MM-dd HH:mm:ss\";\n  static String y_mo_d_h_m = \"yyyy-MM-dd HH:mm\";\n  static String y_mo_d = \"yyyy-MM-dd\";\n  static String y_mo = \"yyyy-MM\";\n  static String mo_d = \"MM-dd\";\n  static String mo_d_h_m = \"MM-dd HH:mm\";\n  static String h_m_s = \"HH:mm:ss\";\n  static String h_m = \"HH:mm\";\n\n  static String zh_full = \"yyyy年MM月dd日 HH时mm分ss秒\";\n  static String zh_y_mo_d_h_m = \"yyyy年MM月dd日 HH时mm分\";\n  static String zh_y_mo_d = \"yyyy年MM月dd日\";\n  static String zh_y_mo = \"yyyy年MM月\";\n  static String zh_mo_d = \"MM月dd日\";\n  static String zh_mo_d_h_m = \"MM月dd日 HH时mm分\";\n  static String zh_h_m_s = \"HH时mm分ss秒\";\n  static String zh_h_m = \"HH时mm分\";\n}\n\ngetDateTimeByMs                 : \ngetDateMsByTimeStr              : \ngetNowDateMs                    : get Now Date milliseconds.\ngetNowDateStr                   : get Now DateStr.(yyyy-MM-dd HH:mm:ss)\nformatDate                      : format Date by DateTime.\nformatDateStr                   : format Date by DateStr.\nformatDateMs                    : format Date by milliseconds.\ngetWeekday                      : get weekDay.\ngetDayOfYear                    : get day of year.\nisToday                         : is today.\nisYesterday                     : is yesterday.\nisWeek                          : is week.\nyearIsEqual                     : whether it is leap year.\nisLeapYear                      : year is equal.\n\n// example\nDateUtil.formatDateMs(dateMs, format: DateFormats.full); //2019-07-09 16:16:16\nDateUtil.formatDateStr('2019-07-09 16:16:16', format: \"yyyy/M/d HH:mm:ss\"); //2019/7/9 16:16:16\nDateUtil.formatDate(DateTime.now(), format: DateFormats.zh_full); //2019年07月09日 16时16分16秒\n```\n\n* EncryptUtil\n```\nencodeMd5                   : md5.\nencodeBase64                : Base64 encode.\ndecodeBase64()              : Base64 decode.\nxorCode()                   : xor.\nxorBase64Encode()           : xor Base64 encode.\nxorBase64Decode()           : xor Base64 decode.\n\nconst String key = '11, 22, 33, 44, 55, 66';\nString userName = 'Sky24n';\nString encode = EncryptUtil.xorBase64Encode(userName, key); // WH1YHgMs\nString decode = EncryptUtil.xorBase64Decode(encode, key); // Sky24n\n```\n\n* JsonUtil\n```\nencodeObj                   : Obj to json string.\ngetObj                      : json string to object.\ngetObject                   : json string / map to object.\ngetObjList                  : json string list to object list.\ngetObjectList               : json string / map list to object list.\n\nString objStr = \"{\\\"name\\\":\\\"成都市\\\"}\";\nCity hisCity = JsonUtil.getObj(objStr, (v) => City.fromJson(v));\nString listStr = \"[{\\\"name\\\":\\\"成都市\\\"}, {\\\"name\\\":\\\"北京市\\\"}]\";\nList<City> cityList = JsonUtil.getObjList(listStr, (v) => City.fromJson(v));\n```\n\n* LogUtil\n```\ninit(tag, isDebug, maxLen)  : tag, isDebug, maxLen.\ne(object, tag)              : Log e.\nv(object, tag)              : Log v,debug output.\n\n//超长log查看\ncommon_utils e  — — — — — — — — — — — — — — — — st — — — — — — — — — — — — — — — —\ncommon_utils e | 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,\ncommon_utils e | 7,988,989,990,991,992,993,994,995,996,997,998,999,\ncommon_utils e  — — — — — — — — — — — — — — — — ed — — — — — — — — — — — — — — — —\n```\n\n* MoneyUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/money_page.dart)\n```\nchangeF2Y                   : fen to yuan, format output.\nchangeFStr2YWithUnit        : fen str to yuan, format & unit  output.\nchangeF2YWithUnit           : fen to yuan, format & unit  output.\nchangeYWithUnit             : yuan, format & unit  output.(yuan is int,double,str).\nchangeY2F                   : fen to yuan.\n```\n\n* NumUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/num_util_page.dart)\n```\ngetIntByValueStr            : get int By value string.\ngetDoubleByValueStr         : get double By value string.\ngetNumByValueStr            : Keep [x] decimal places by value string.\ngetNumByValueDouble         : Keep [x] decimal places by double.\nisZero                      : is Zero.\nadd                         : add (without loosing precision).\nsubtract                    : subtract (without loosing precision).\nmultiply                    : multiply (without loosing precision).\ndivide                      : divide (without loosing precision).\nremainder                   : 余.\nlessThan                    : < .\nthanOrEqual                 : <= .\ngreaterThan                 : > .\ngreaterOrEqual              : >= .\n```\n\n* ObjectUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/object_util_page.dart)\n```\nisEmptyString             : String is empty.\nisEmptyList               : List is empty.\nisEmptyMap                : Map Map empty.\nisEmpty                   : Object is empty.(String List Map).\nisNotEmpty                : Object is not empty.(String List Map).\ntwoListIsEqual            : Two List Is Equal.\n```\n\n* RegexUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/regex_page.dart)\n```\nisMobileSimple            : \nisMobileExact             : \nisTel                     : \nisIDCard                  : \nisIDCard15                : \nisIDCard18                : \nisIDCard18Exact           : \nisEmail                   : \nisURL                     : \nisZh                      : \nisDate                    : \nisIP                      : \nisUserName                :\nisQQ                      :\n```\n\n* TextUtil\n```\nisEmpty                     : isEmpty.\nformatSpace4                : format Space 4.\nformatComma3                : format Comma 3.\nformatDoubleComma3          : format Double Comma3.\nhideNumber                  : hide number.\nreplace                     : replace.\nsplit                       : split.\nreverse                     : reverse.\n  \n/// example\nString phoneNo = TextUtil.formatSpace4(\"15845678910\"); // 1584 5678 910\nString num     = TextUtil.formatComma3(\"1234\"); // 123,4\nString phoneNo = TextUtil.hideNumber(\"15845678910\")// 158****8910\n```\n\n* TimelineUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/timeline_page.dart)\n```\n///(xx)Configurable output.\nenum DayFormat {\n  ///(less than 30s->just now)、x minutes、x hours、(Yesterday)、x days.\n  Simple,\n  ///(less than 30s->just now)、x minutes、x hours、[This year:(Yesterday/a day ago)、(two days age)、MM-dd ]、[past years: yyyy-MM-dd]\n  Common,\n  ///(less than 30s->just now)、x minutes、x hours、[This year:(Yesterday HH:mm/a day ago)、(two days age)、MM-dd HH:mm]、[past years: yyyy-MM-dd HH:mm]\n  Full,\n}\n///Timeline information configuration.\nabstract class TimelineInfo {\n  String suffixAgo(); //suffix ago(后缀 后).\n  String suffixAfter(); //suffix after(后缀 前).\n  int maxJustNowSecond() => 30; // max just now second.\n  String lessThanOneMinute() => ''; //just now(刚刚).\n  String customYesterday() => ''; //Yesterday(昨天).优先级高于keepOneDay\n  bool keepOneDay(); //保持1天,example: true -> 1天前, false -> MM-dd.\n  bool keepTwoDays(); //保持2天,example: true -> 2天前, false -> MM-dd.\n  String oneMinute(int minutes); //a minute(1分钟).\n  String minutes(int minutes); //x minutes(x分钟).\n  String anHour(int hours); //an hour(1小时).\n  String hours(int hours); //x hours(x小时).\n  String oneDay(int days); //a day(1天).\n  String days(int days); //x days(x天).\n}\nsetLocaleInfo               : add custom configuration.\nformatByDateTime            : timeline format output by DateTime .\nformat                      : timeline format output.\nformatA                     : timeline format output. like QQ.\n\n```\n\n* TimerUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/timer_page.dart)\n```\nsetInterval                 : set Timer interval.\nsetTotalTime                : set countdown totalTime.\nstartTimer()                : start Timer.\nstartCountDown              : start countdown Timer.\nupdateTotalTime             : update countdown totalTime.\ncancel                      : cancels the timer.\nsetOnTimerTickCallback      : set timer callback.\nisActive                    : timer is Active.\n```\n\n### [Flutter Demos](https://github.com/Sky24n/flutter_wanandroid/tree/master/lib/demos)\n\n>- |--demos\n>    - |-- city_select_page.dart\n>    - |-- date_page.dart\n>    - |-- image_size_page.dart\n>    - |-- money_page.dart\n>    - |-- pinyin_page.dart\n>    - |-- regex_page.dart\n>    - |-- round_portrait_page.dart\n>    - |-- timeline_page.dart\n>    - |-- timer_page.dart\n>    - |-- widget_page.dart\n\n### Demo Apk : [flutter_wanandroid](https://github.com/Sky24n/Doc)\n\n### Thanks\nBlankj [AndroidUtilCode](https://github.com/Blankj/AndroidUtilCode)。  \nAndres Araujo [timeago](https://github.com/andresaraujo/timeago.dart)。  \na14n [decimal](https://github.com/a14n/dart-decimal)。\n\n### Apps\n[flutter_wanandroid](https://github.com/Sky24n/flutter_wanandroid)  \n[Moss App](https://github.com/Sky24n/Moss)\n\n### [Change Log](CHANGELOG.md)\nv1.2.1 (2020.05.29)  \n1、fix DataFormats -> DateFormats。  \n2、fix TimelineInfo bugs。\n\n\n\n[flustars_github]: https://github.com/Sky24n/flustars\n[common_utils_github]: https://github.com/Sky24n/common_utils"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.359375,
          "content": "Language: [English](README-EN.md) | 中文简体\n\n[![Pub](https://img.shields.io/pub/v/common_utils.svg?style=flat-square&color=009688)](https://pub.dartlang.org/packages/common_utils)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![Pub](https://img.shields.io/pub/v/common_utils.svg?style=flat-square&color=2196F3)](https://pub.flutter-io.cn/packages/common_utils)\n\nDart常用工具类库。包含日期，正则，倒计时，时间轴等工具类。如果你有好的工具类欢迎PR.\n\n1、如果您是纯Dart项目，可以直接引用本库。\n```yaml\ndependencies:\n  common_utils: ^2.1.0\n```\n2、如果您是Flutter项目，请使用Flutter常用工具类库 [flustars][flustars_github]，该库依赖于本项目。[flustars][flustars_github]库为大家提供更多的工具类，例如SpUtil，ScreenUtil, DirectoryUtil等等。\n```yaml\ndependencies:\n  flustars: ^2.0.1  \n```\n\nDart常用工具类库 [common_utils][common_utils_github]\n1. TimelineUtil     : 时间轴.\n2. TimerUtil        : 倒计时，定时任务.\n3. MoneyUtil        : 精确转换，元转分，分转元，支持格式输出.\n4. LogUtil          : 简单封装打印日志.\n5. DateUtil         : 日期转换格式化输出.\n6. RegexUtil        : 正则验证手机号，身份证，邮箱等等.\n7. NumUtil          : 保留x位小数, 精确加、减、乘、除, 防止精度丢失.\n8. ObjectUtil       : 判断对象是否为空(String List Map),判断两个List是否相等.\n9. EncryptUtil      : 异或对称加/解密，md5加密，Base64加/解密.\n10. TextUtil        : 银行卡号每隔4位加空格，每隔3三位加逗号，隐藏手机号等等.\n11. JsonUtil        : 简单封装json字符串转对象.\n\nFlutter常用工具类库 [flustars][flustars_github]\n1. SpUtil           : 单例\"同步\"SharedPreferences工具类。支持get传入默认值，支持存储对象，支持存储对象数组。\n2. ScreenUtil       : 屏幕适配，获取屏幕宽、高、密度，AppBar高，状态栏高度，屏幕方向.\n3. WidgetUtil       : 监听Widget渲染状态，获取Widget宽高，在屏幕上的坐标，获取网络/本地图片尺寸.\n4. ImageUtil        : 获取网络/本地图片尺寸.\n5. DirectoryUtil    : 文件目录工具类.\n6. DioUtil          : 单例Dio网络工具类(已迁移至此处[DioUtil](https://github.com/Sky24n/FlutterRepos/blob/master/base_library/lib/src/data/net/dio_util.dart))。\n \n\n### APIs\n* SpUtil\n强大易用的SharedPreferences工具类，详细使用请参考原仓库[flustars][flustars_github]。\n```dart\n/// 等待Sp初始化完成。\nawait SpUtil.getInstance();  \n  \n/// 同步使用Sp。支付默认值。\nString name = SpUtil.putString(\"key_username\", \"Sky24n\");\nbool isShow = SpUtil.getBool(\"key_show\", defValue: true);\n  \n/// 存储实体对象示例。\nCity city = new City();\ncity.name = \"成都市\";\nSpUtil.putObject(\"loc_city\", city);\n    \nCity hisCity = SpUtil.getObj(\"loc_city\", (v) => City.fromJson(v));\nprint(\"City: \" + (hisCity == null ? \"null\" : hisCit.toString()));\n  \n/// 存储实体对象list示例。\nList<City> list = new List();\nlist.add(new City(name: \"成都市\"));\nlist.add(new City(name: \"北京市\"));\nSpUtil.putObjectList(\"loc_city_list\", list);\n    \nList<City> _cityList = SpUtil.getObjList(\"loc_city_list\", (v) => City.fromJson(v));\nprint(\"City list: \" + (_cityList == null ? \"null\" : _cityList.toString()));\n```\n\n* DateUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/date_page.dart)\n```\n/// 一些常用格式参照。可以自定义格式，例如：\"yyyy/MM/dd HH:mm:ss\"，\"yyyy/M/d HH:mm:ss\"。\n/// 格式要求\n/// year -> yyyy/yy   month -> MM/M    day -> dd/d\n/// hour -> HH/H      minute -> mm/m   second -> ss/s\nclass DataFormats {\n  static String full = \"yyyy-MM-dd HH:mm:ss\";\n  static String y_mo_d_h_m = \"yyyy-MM-dd HH:mm\";\n  static String y_mo_d = \"yyyy-MM-dd\";\n  static String y_mo = \"yyyy-MM\";\n  static String mo_d = \"MM-dd\";\n  static String mo_d_h_m = \"MM-dd HH:mm\";\n  static String h_m_s = \"HH:mm:ss\";\n  static String h_m = \"HH:mm\";\n\n  static String zh_full = \"yyyy年MM月dd日 HH时mm分ss秒\";\n  static String zh_y_mo_d_h_m = \"yyyy年MM月dd日 HH时mm分\";\n  static String zh_y_mo_d = \"yyyy年MM月dd日\";\n  static String zh_y_mo = \"yyyy年MM月\";\n  static String zh_mo_d = \"MM月dd日\";\n  static String zh_mo_d_h_m = \"MM月dd日 HH时mm分\";\n  static String zh_h_m_s = \"HH时mm分ss秒\";\n  static String zh_h_m = \"HH时mm分\";\n}\n\ngetDateTimeByMs                 : .\ngetDateMsByTimeStr              : .\ngetNowDateMs                    : 获取现在 毫秒.\ngetNowDateStr                   : 获取现在 日期字符串.(yyyy-MM-dd HH:mm:ss)\nformatDate                      : 格式化日期 DateTime.\nformatDateStr                   : 格式化日期 字符串.\nformatDateMs                    : 格式化日期 毫秒.\ngetWeekday                      : 获取星期几.\ngetDayOfYear                    : 在今年的第几天.\nisToday                         : 是否是今天.\nisYesterday                     : 是否是昨天.\nisWeek                          : 是否是本周.\nyearIsEqual                     : 是否同年.\nisLeapYear                      : 是否是闰年.\n\n// example\nDateUtil.formatDateMs(dateMs, format: DateFormats.full); //2019-07-09 16:16:16\nDateUtil.formatDateStr('2019-07-09 16:16:16', format: \"yyyy/M/d HH:mm:ss\"); //2019/7/9 16:16:16\nDateUtil.formatDate(DateTime.now(), format: DateFormats.zh_full); //2019年07月09日 16时16分16秒\n```\n\n* EncryptUtil\n```\nencodeMd5                   : md5 加密.\nencodeBase64                : Base64加密.\ndecodeBase64()              : Base64解密.\nxorCode()                   : 异或对称加密.\nxorBase64Encode()           : 异或对称 Base64 加密.\nxorBase64Decode()           : 异或对称 Base64 解密.\n\nconst String key = '11, 22, 33, 44, 55, 66';\nString userName = 'Sky24n';\nString encode = EncryptUtil.xorBase64Encode(userName, key); // WH1YHgMs\nString decode = EncryptUtil.xorBase64Decode(encode, key); // Sky24n\n```\n\n* JsonUtil\n```\nencodeObj                   : object to json string.\ngetObj                      : json string to object.\ngetObject                   : json string / map to object.\ngetObjList                  : json string list to object list.\ngetObjectList               : json string / map list to object list.\n\nString objStr = \"{\\\"name\\\":\\\"成都市\\\"}\";\nCity hisCity = JsonUtil.getObj(objStr, (v) => City.fromJson(v));\nString listStr = \"[{\\\"name\\\":\\\"成都市\\\"}, {\\\"name\\\":\\\"北京市\\\"}]\";\nList<City> cityList = JsonUtil.getObjList(listStr, (v) => City.fromJson(v));\n```\n\n* LogUtil\n```\ninit(tag, isDebug, maxLen)  : tag 标签, isDebug: 模式, maxLen 每行最大长度.\ne(object, tag)              : 日志e\nv(object, tag)              : 日志v，只在debug模式输出.\n\n//超长log查看\ncommon_utils e  — — — — — — — — — — — — — — — — st — — — — — — — — — — — — — — — —\ncommon_utils e | 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,\ncommon_utils e | 7,988,989,990,991,992,993,994,995,996,997,998,999,\ncommon_utils e  — — — — — — — — — — — — — — — — ed — — — — — — — — — — — — — — — —\n```\n\n* MoneyUtil 精确转换,防止精度丢失 -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/money_page.dart)\n```\nchangeF2Y                   : 分 转 元, format格式输出.\nchangeFStr2YWithUnit        : 分字符串 转 元, format 与 unit 格式 输出.\nchangeF2YWithUnit           : 分 转 元, format 与 unit 格式 输出.\nchangeYWithUnit             : 元, format 与 unit 格式 输出.\nchangeY2F                   : 元 转 分. \n```\n\n* NumUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/num_util_page.dart)\n```\ngetIntByValueStr            : 数字字符串转int.\ngetDoubleByValueStr         : 数字字符串转double.\ngetNumByValueStr            : 保留x位小数 by 数字字符串.\ngetNumByValueDouble         : 保留x位小数 by double.\nisZero                      : 是否为0.\nadd                         : 加(精确相加,防止精度丢失).\nsubtract                    : 减(精确相减,防止精度丢失).\nmultiply                    : 乘(精确相乘,防止精度丢失).\ndivide                      : 除(精确相除,防止精度丢失).\nremainder                   : 余.\nlessThan                    : < .\nthanOrEqual                 : <= .\ngreaterThan                 : > .\ngreaterOrEqual              : >= .\n```\n\n* ObjectUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/object_util_page.dart)\n```\nisEmptyString             : 判断String是否为空.\nisEmptyList               : 判断List是否为空.\nisEmptyMap                : 判断Map是否为空.\nisEmpty                   : 判断对象是否为空.(String List Map).\nisNotEmpty                : 判断对象是否非空.(String List Map).\ntwoListIsEqual            : 判断两个List是否相等.\n```\n\n* RegexUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/regex_page.dart)\n```\nisMobileSimple            : 简单验证手机号\nisMobileExact             : 精确验证手机号\nisTel                     : 验证电话号码\nisIDCard                  : 验证身份证号码\nisIDCard15                : 验证身份证号码 15 位\nisIDCard18                : 简单验证身份证号码 18 位\nisIDCard18Exact           : 精确验证身份证号码 18 位\nisEmail                   : 验证邮箱\nisURL                     : 验证 URL\nisZh                      : 验证汉字\nisDate                    : 验证 yyyy-MM-dd 格式的日期校验，已考虑平闰年\nisIP                      : 验证 IP 地址\nisUserName                : 验证用户名\nisQQ                      : 验证 QQ\n```\n\n* TextUtil\n```\nisEmpty                     : isEmpty.\nformatSpace4                : 每隔4位加空格，格式化银行卡.\nformatComma3                : 每隔3三位加逗号.\nformatDoubleComma3          : 每隔3三位加逗号.\nhideNumber                  : 隐藏号码.\nreplace                     : replace.\nsplit                       : split.\nreverse                     : reverse.\n  \n/// example\nString phoneNo = TextUtil.formatSpace4(\"15845678910\"); // 1584 5678 910\nString num     = TextUtil.formatComma3(\"1234\"); // 123,4\nString phoneNo = TextUtil.hideNumber(\"15845678910\")// 158****8910\n```\n\n* TimelineUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/timeline_page.dart)\n```\n///(xx)为可配置输出\nenum DayFormat {\n  ///(小于30s->刚刚)、x分钟、x小时、(昨天)、x天.\n  Simple,\n  ///(小于30s->刚刚)、x分钟、x小时、[今年: (昨天/1天前)、(2天前)、MM-dd],[往年: yyyy-MM-dd].\n  Common,\n  ///小于30s->刚刚)、x分钟、x小时、[今年: (昨天 HH:mm/1天前)、(2天前)、MM-dd HH:mm],[往年: yyyy-MM-dd HH:mm].\n  Full,\n}\n///Timeline信息配置.\nabstract class TimelineInfo {\n  String suffixAgo(); //suffix ago(后缀 后).\n  String suffixAfter(); //suffix after(后缀 前).\n  int maxJustNowSecond() => 30; // max just now second.\n  String lessThanOneMinute() => ''; //just now(刚刚).\n  String customYesterday() => ''; //Yesterday(昨天).优先级高于keepOneDay\n  bool keepOneDay(); //保持1天,example: true -> 1天前, false -> MM-dd.\n  bool keepTwoDays(); //保持2天,example: true -> 2天前, false -> MM-dd.\n  String oneMinute(int minutes); //a minute(1分钟).\n  String minutes(int minutes); //x minutes(x分钟).\n  String anHour(int hours); //an hour(1小时).\n  String hours(int hours); //x hours(x小时).\n  String oneDay(int days); //a day(1天).\n  String days(int days); //x days(x天).\n}\nsetLocaleInfo               : 自定义设置配置信息.\nformatByDateTime            : 格式输出时间轴信息 by DateTime .\nformat                      : 格式输出时间轴信息.\nformatA                     : 格式输出时间轴信息. like QQ.\n```\n\n* TimerUtil -> [Example](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/timer_page.dart)\n```\nsetInterval                 : 设置Timer间隔.\nsetTotalTime                : 设置倒计时总时间.\nstartTimer()                : 启动定时Timer.\nstartCountDown              : 启动倒计时Timer.\nupdateTotalTime             : 重设倒计时总时间.\ncancel                      : 取消计时器.\nsetOnTimerTickCallback      : 计时器回调.\nisActive                    : Timer是否启动.\n```\n\n### [Flutter Demos](https://github.com/Sky24n/flutter_wanandroid/tree/master/lib/demos)   \n \n>- |--demos\n>    - |-- city_select_page.dart 城市列表(索引&悬停)示例\n>    - |-- date_page.dart 日期格式化示例\n>    - |-- image_size_page.dart 获取网络/本地图片尺寸示例\n>    - |-- money_page.dart 金额(元转分/分转元)示例\n>    - |-- pinyin_page.dart 汉字转拼音示例\n>    - |-- regex_page.dart 正则工具类示例\n>    - |-- round_portrait_page.dart 圆形圆角头像示例\n>    - |-- timeline_page.dart 时间轴示例\n>    - |-- timer_page.dart 倒计时/定时器示例\n>    - |-- widget_page.dart 获取Widget尺寸/屏幕坐标示例\n\n### Thanks\n本库部分源码参考，正则，时间轴。  \nBlankj [AndroidUtilCode](https://github.com/Blankj/AndroidUtilCode) 强大易用的安卓工具类库。   \nAndres Araujo [timeago](https://github.com/andresaraujo/timeago.dart) Dart时间轴库。   \na14n [decimal](https://github.com/a14n/dart-decimal) 精确运算，避免精度丢失。\n\n### 关于作者\nGitHub : [Sky24n](https://github.com/Sky24n)  \n掘金 &nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://juejin.im/user/5b9e8a92e51d453df0440422/posts)  \n简书 &nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://www.jianshu.com/u/cbf2ad25d33a)\n\n### Changelog\nPlease see the [Changelog](CHANGELOG.md) page to know what's recently changed.\n\n### Apps\n[flutter_wanandroid](https://github.com/Sky24n/flutter_wanandroid)  \n[Moss](https://github.com/Sky24n/Moss).  \nA GitHub client app developed with Flutter, which supports Android iOS Web.  \nWeb ：[Flutter Web](https://sky24n.github.io/Sky24n/moss).\n\n|![](https://z3.ax1x.com/2021/04/26/gp1hm6.jpg)|![](https://z3.ax1x.com/2021/04/26/gp1Tte.jpg)|![](https://z3.ax1x.com/2021/04/26/gp17fH.jpg)|\n|:---:|:---:|:---:|\n\n\n[flutter_wanandroid_qr]: https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_wanandroid/qrcode.png\n\n[common_utils_github]: https://github.com/Sky24n/common_utils\n\n[flustars_github]: https://github.com/Sky24n/flustars\n\n\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.482421875,
          "content": "# https://www.dartlang.org/guides/language/analysis-options\n# Source of linter options:\n# http://dart-lang.github.io/linter/lints/options/options.html\nanalyzer:\n  strong-mode:\n    implicit-casts: false\n    implicit-dynamic: false\n  errors:\n    todo: ignore\n  exclude:\n    - flutter/**\n    - lib/*.dart\n\nlinter:\n  rules:\n    - camel_case_types\n    - hash_and_equals\n    - iterable_contains_unrelated_type\n    - list_remove_unrelated_type\n    - unrelated_type_equality_checks\n    - valid_regexps\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgget",
          "type": "blob",
          "size": 0.126953125,
          "content": "export PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\nflutter packages get"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.564453125,
          "content": "name: common_utils\ndescription: Dart common utils library.Contain DateUtil, EncryptUtil, JsonUtil, LogUtil, MoneyUtil, NumUtil, ObjectUtil, RegexUtil, TextUtil, TimelineUtil, TimerUtil.\nversion: 2.1.0\nhomepage: https://github.com/Sky24n/common_utils\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n\ndependencies:\n  # https://github.com/a14n/dart-decimal\n  rational: \">=2.0.0 <5.0.0\"\n  # https://github.com/a14n/dart-decimal\n  decimal: \">=2.0.0 <5.0.0\"\n  # https://github.com/dart-lang/crypto\n  crypto: \">=3.0.0 <5.0.0\"\n  # https://github.com/dart-lang/convert\n  convert: \">=3.0.0 <5.0.0\""
        },
        {
          "name": "uploadMaster",
          "type": "blob",
          "size": 0.0224609375,
          "content": "git push origin master\n"
        }
      ]
    }
  ]
}