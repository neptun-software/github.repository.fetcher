{
  "metadata": {
    "timestamp": 1736710619065,
    "page": 267,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "simc/logger",
      "stars": 1069,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.103515625,
          "content": ".vscode/\n.DS_Store\n.dart_tool/\n.idea/\n.iml\n\n.packages\n.pub/\n\nbuild/\nios/\nandroid/\ndemo/\n\npubspec.lock\ndoc/"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 7a4c33425ddd78c54aba07d86f3f9a4a0051769b\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.099609375,
          "content": "language: dart\ndart:\n  - stable\n\ndart_task:\n  - dartfmt\n  - dartanalyzer: --fatal-warnings .\n  - test\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.5654296875,
          "content": "## 1.1.0\n- Enhance boxing control with PrettyPrinter. Credits to @timmaffett\n- Add trailing new line to FileOutput. Credits to @narumishi\n- Add functions as a log message. Credits to @smotastic\n\n## 1.0.0\n- Stable nullsafety\n\n## 1.0.0-nullsafety.0\n- Convert to nullsafety. Credits to @DevNico\n\n## 0.9.4\n- Remove broken platform detection.\n\n## 0.9.3\n- Add `MultiOutput`. Credits to @gmpassos.\n- Handle browser Dart stacktraces in PrettyPrinter. Credits to @gmpassos.\n- Add platform detection. Credits to @gmpassos.\n- Catch output exceptions. Credits to @gmpassos.\n- Several documentation fixes. Credits to @gmpassos.\n\n## 0.9.2\n- Add `PrefixPrinter`. Credits to @tkutcher.\n- Add `HybridPrinter`. Credits to @tkutcher.\n \n## 0.9.1\n- Fix logging output for Flutter Web. Credits to @nateshmbhat and @Cocotus.\n\n## 0.9.0\n- Remove `OutputCallback` and `LogCallback`\n- Rename `SimplePrinter`s argument `useColor` to `colors`\n- Rename `DebugFilter` to `DevelopmentFilter`\n- \n## 0.8.3\n- Add LogfmtPrinter\n- Add colored output to SimplePrinter\n\n## 0.8.2\n- Add StreamOutput\n\n## 0.8.1\n- Deprecate callbacks\n\n## 0.8.0\n- Fix SimplePrinter showTime #12\n- Remove buffer field\n- Update library structure (thanks @marcgraub!)\n \n## 0.7.0+1\n- Added `ProductionFilter`, `FileOutput`, `MemoryOutput`, `SimplePrinter`\n- Breaking: Changed `LogFilter`, `LogPrinter` and `LogOutput`\n\n## 0.6.0\n- Added option to output timestamp\n- Added option to disable color\n- Added `LogOutput`\n- Behaviour change of `LogPrinter`\n- Remove dependency\n\n## 0.5.0\n- Added emojis\n- `LogFilter` is a class now\n\n## 0.4.0\n- First version of the new logger\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.26953125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at harm@aarts.email. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019 Simon Leier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.58984375,
          "content": "# Logger\n\n[![pub package](https://img.shields.io/pub/v/logger.svg?logo=dart&logoColor=00b9fc)](https://pub.dartlang.org/packages/logger)\n[![CI](https://img.shields.io/github/workflow/status/leisim/logger/Dart%20CI/master?logo=github-actions&logoColor=white)](https://github.com/leisim/logger/actions)\n[![Last Commits](https://img.shields.io/github/last-commit/leisim/logger?logo=git&logoColor=white)](https://github.com/leisim/logger/commits/master)\n[![Pull Requests](https://img.shields.io/github/issues-pr/leisim/logger?logo=github&logoColor=white)](https://github.com/leisim/logger/pulls)\n[![Code size](https://img.shields.io/github/languages/code-size/leisim/logger?logo=github&logoColor=white)](https://github.com/leisim/logger)\n[![License](https://img.shields.io/github/license/leisim/logger?logo=open-source-initiative&logoColor=green)](https://github.com/leisim/logger/blob/master/LICENSE)\n\n\n> [!CAUTION] \n> This repo is NOT LONGER leading! The new repo is here: [https://github.com/SourceHorizon/logger](https://github.com/SourceHorizon/logger)\n\nSmall, easy to use and extensible logger which prints beautiful logs.<br>\nInspired by [logger](https://github.com/orhanobut/logger) for Android.\n\n**Show some ❤️ and star the repo to support the project**\n\n### Resources:\n- [Documentation](https://pub.dev/documentation/logger/latest/logger/logger-library.html)\n- [Pub Package](https://pub.dev/packages/logger)\n- [GitHub Repository](https://github.com/leisim/logger)\n\n## Getting Started\n\nJust create an instance of `Logger` and start logging:\n```dart\nvar logger = Logger();\n\nlogger.d(\"Logger is working!\");\n```\n\nInstead of a string message, you can also pass other objects like `List`, `Map` or `Set`.\n\n## Output\n\n![](https://raw.githubusercontent.com/leisim/logger/master/art/screenshot.png)\n\n# Documentation\n\n## Log level\n\nYou can log with different levels:\n\n```dart\nlogger.v(\"Verbose log\");\n\nlogger.d(\"Debug log\");\n\nlogger.i(\"Info log\");\n\nlogger.w(\"Warning log\");\n\nlogger.e(\"Error log\");\n\nlogger.wtf(\"What a terrible failure log\");\n```\n\nTo show only specific log levels, you can set:\n\n```dart\nLogger.level = Level.warning;\n```\n\nThis hides all `verbose`, `debug` and `info` log events.\n\n## Options\n\nWhen creating a logger, you can pass some options:\n\n```dart\nvar logger = Logger(\n  filter: null, // Use the default LogFilter (-> only log in debug mode)\n  printer: PrettyPrinter(), // Use the PrettyPrinter to format and print log\n  output: null, // Use the default LogOutput (-> send everything to console)\n);\n```\n\nIf you use the `PrettyPrinter`, there are more options:\n\n```dart\nvar logger = Logger(\n  printer: PrettyPrinter(\n    methodCount: 2, // number of method calls to be displayed\n    errorMethodCount: 8, // number of method calls if stacktrace is provided\n    lineLength: 120, // width of the output\n    colors: true, // Colorful log messages\n    printEmojis: true, // Print an emoji for each log message\n    printTime: false // Should each log print contain a timestamp\n  ),\n);\n```\n\n### Auto detecting\n\nWith the `io` package you can auto detect the `lineLength` and `colors` arguments. \nAssuming you have imported the `io` package with `import 'dart:io' as io;` you \ncan auto detect `colors` with `io.stdout.supportsAnsiEscapes` and `lineLength` \nwith `io.stdout.terminalColumns`.\n\nYou should probably do this unless there's a good reason you don't want to \nimport `io`, for example when using this library on the web.\n\n## LogFilter\n\nThe `LogFilter` decides which log events should be shown and which don't.<br>\nThe default implementation (`DevelopmentFilter`) shows all logs with `level >= Logger.level` while in debug mode. In release mode all logs are omitted.\n\nYou can create your own `LogFilter` like this:\n```dart\nclass MyFilter extends LogFilter {\n  @override\n  bool shouldLog(LogEvent event) {\n    return true;\n  }\n}\n```\nThis will show all logs even in release mode. (**NOT** a good idea)\n\n\n## LogPrinter\n\nThe `LogPrinter` creates and formats the output, which is then sent to the `LogOutput`.<br>\nYou can implement your own `LogPrinter`. This gives you maximum flexibility.\n\nA very basic printer could look like this:\n```dart\nclass MyPrinter extends LogPrinter {\n  @override\n  List<String> log(LogEvent event) {\n    return [event.message];\n  }\n}\n```\n\nIf you created a cool `LogPrinter` which might be helpful to others, feel free to open a pull request. :)\n\n### Colors\n\nPlease note that all IDEs (VSCode, XCode, Android Studio, IntelliJ) do not \nsupport ANSI escape sequences in their terminal outputs. These escape sequences \nare used to color output. If using such an IDE do not configure colored output.\n\nHowever, if you are using a JetBrains IDE (Android Studio, IntelliJ, etc.) \nyou can make use of the [Grep Console Plugin](https://plugins.jetbrains.com/plugin/7125-grep-console)\nand the [`PrefixPrinter`](/lib/src/printers/prefix_printer.dart) \ndecorator to achieved colored logs for any logger:\n\n```dart\nvar logger = Logger(\n  printer: PrefixPrinter(PrettyPrinter(colors: false))\n);\n```\n\n## LogOutput\n\n`LogOutput` sends the log lines to the desired destination.<br>\nThe default implementation (`ConsoleOutput`) send every line to the system console.\n\n```dart\nclass ConsoleOutput extends LogOutput {\n  @override\n  void output(OutputEvent event) {\n    for (var line in event.lines) {\n      print(line);\n    }\n  }\n}\n```\n\nPossible future `LogOutput`s could send to a file, firebase or to Logcat. Feel free to open pull requests.\n\n\n## logger_flutter extension\n\nThe [logger_flutter](https://pub.dev/packages/logger_flutter) package is an extension for logger. You can add it to any Flutter app. Just shake the phone to show the console.\n\n\n## MIT License\n```\nCopyright (c) 2019 Simon Leier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.0458984375,
          "content": "include: package:pedantic/analysis_options.yaml"
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.2421875,
          "content": "name: logger\ndescription: Small, easy to use and extensible logger which prints beautiful logs.\nversion: 1.1.0\nhomepage: https://github.com/leisim/logger\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n\ndev_dependencies:\n  test: ^1.16.8\n  pedantic: ^1.11.0\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}