{
  "metadata": {
    "timestamp": 1736710509484,
    "page": 38,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "letsar/flutter_staggered_grid_view",
      "stars": 3167,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.25390625,
          "content": "# Miscellaneous\n*.class\n*.lock\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.classpath\n.project\n.settings/\n.vscode/\n\n# Flutter repo-specific\n/bin/cache/\n/bin/mingit/\n/dev/benchmarks/mega_gallery/\n/dev/bots/.recipe_deps\n/dev/bots/android_tools/\n/dev/docs/doc/\n/dev/docs/flutter.docs.zip\n/dev/docs/lib/\n/dev/docs/pubspec.yaml\n/dev/integration_tests/**/xcuserdata\n/dev/integration_tests/**/Pods\n/packages/flutter/coverage/\nversion\n# packages file containing multi-root paths\n.packages.generated\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\nflutter_*.png\nlinked_*.ds\nunlinked.ds\nunlinked_spec.ds\n\n# Web related\nlib/generated_plugin_registrant.dart\n\n# Symbolication related\napp.*.symbols\n\n# Obfuscation related\napp.*.map.json\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n**/android/key.properties\n*.jks\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n**/ios/Flutter/.last_build_id\n\n\n# macOS\n**/macos/Flutter/GeneratedPluginRegistrant.swift\n**/macos/Flutter/Flutter-Debug.xcconfig\n**/macos/Flutter/Flutter-Release.xcconfig\n**/macos/Flutter/Flutter-Profile.xcconfig\n\n# Coverage\ncoverage/\n\n# Symbols\napp.*.symbols\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n!/dev/ci/**/Gemfile.lock\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 18116933e77adc82f80866c928266a5b4f1ed645\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": ".pubignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "docs/\nexamples/\nbuild/\n*.iml"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.8720703125,
          "content": "## 0.7.0\n### Changed\n* Bump minimal Flutter version to 3.7.0\n### Fixed\n* Warning with Scrollable.of\n\n## 0.6.2\n### Fixed\n* Issue with Quilted layout algorithm. (https://github.com/letsar/flutter_staggered_grid_view/issues/232)\n\n## 0.6.1\n### Fixed\n* Issue when childCount is 0 with Quilted layout.\n\n## 0.6.0\n### Added\n* SliverAlignedGrid and AlignedGridView widgets.\n### Changed\n* Renamed SliverMasonryGridDelegate to SliverSimpleGridDelegate.\n\n## 0.5.1\n### Added\n* StaggeredTile.fit constructor.\n\n## 0.5.0\n### Changed\n* Stable release \n\n## 0.5.0-dev.8\n### Changed\n* Make the `childCount` parameter of `SliverMasonryGrid` constructors, nullable and not required.\n\n## 0.5.0-dev.7\n### Fixed\n* Remove position issue with staired pattern.\n\n## 0.5.0-dev.6\n### Fixed\n* Remove extra space on fixed woven grid.\n\n## 0.5.0-dev.5\n### Fixed\n* Remove extra space on fixed quilted grid (#216).\n\n## 0.5.0-dev.4\n### Fixed\n* Issue with Woven pattern layout flow in second run.\n\n## 0.5.0-dev.3\n### Fixed\n* Issue with Woven pattern and text direction.\n\n## 0.5.0-dev.2\n### Fixed\n* Issue with Quilted pattern.\n\n## 0.5.0-dev.1\n### Changed\n* Complete rewriting of the package.\nIt comes now with 5 differents grid layouts (Staggered, Masonry, Quilted, Woven, Staired).\n\n## 0.4.1\n### Changed\n* Add option to disable keepAlives\n\n## 0.4.0\n### Changed\n* Stable null safety version\n\n## 0.4.0-nullsafety.3\n### Fixed\n* LateInitializationError: Local `firstIndex` has not been initialized. (https://github.com/letsar/flutter_staggered_grid_view/issues/151)\n\n## 0.4.0-nullsafety.2\n### Added\n* Support for state restoration\n\n## 0.4.0-nullsafety.1\n### Added\n* Null Safety Support\n\n## 0.3.4\n### Fixed\n* KeepAliveBucket logic, should improve performances\n\n## 0.3.3\n### Added\n* Support for state restoration.\n\n## 0.3.2\n### Fixed\n* Flutter version dependency.\n\n## 0.3.1\n### Fixed\n* Static analysis issues.\n\n## 0.3.0\n### Fixed\n* Upgrade to AndroidX and fixes the BoxHitTestResult exception (https://github.com/letsar/flutter_staggered_grid_view/issues/49)\n\n## 0.2.7\n### Fixed\n* Better fix for the bug where items are built only once.\n\n## 0.2.6\n### Fixed\n* Fix a bug where items are built only once.\n\n## 0.2.5\n### Changed\n* Use the new SliverWithKeepAliveWidget.\n\n## 0.2.4\n### Fixed\n* Dart 2.1 mixin support.\n\n## 0.2.3\n### Fixed\n* Fix the rtl support (https://github.com/letsar/flutter_staggered_grid_view/issues/17).\n\n## 0.2.2\n* Add Dart 2 support.\n\n## 0.2.1\n* Fix #10 `StatefulWidget.createState must return a subtype of State<AutomaticKeepAliveVariableSizeBox>`.\n\n## 0.2.0\n* Add a way to let the tile's content to define the tile's extent in the main axis.\n* Add `fit` constructor to `StaggeredTile`.\n\n## 0.1.4\n* Add `countBuilder` and `extendBuilder` constructors to `SliverStaggeredGrid`\n\n## 0.1.3\n* Remove Flutter SDK constraint\n\n## 0.1.2\n* Remove update Flutter SDK constraint\n\n## 0.1.1\n* Fix images in readme\n* Add dynamic resizing demo\n\n## 0.1.0\n* Initial Open Source release"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2018 Romain Rastel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.265625,
          "content": "[![Pub][pub_badge]][pub] [![BuyMeACoffee][buy_me_a_coffee_badge]][buy_me_a_coffee]\n\n\n# flutter_staggered_grid_view\nProvides a collection of Flutter grids layouts.\n\n## Getting started\n\nIn the `pubspec.yaml` of your flutter project, add the following dependency:\n\n```yaml\ndependencies:\n  ...\n  flutter_staggered_grid_view: <latest_version>\n```\n\nIn your library add the following import:\n\n```dart\nimport 'package:flutter_staggered_grid_view/flutter_staggered_grid_view.dart';\n```\n\nFor help getting started with Flutter, view the online [documentation][flutter_documentation].\n\n## Layouts\n\nThis package contains various grid layouts. In the following section, you'll discover each one of them.\nThe explanation of the layout will always considered a top-to-bottom and left-to-right directions to simplify the description. However it is possible to change these directions in the code. \n\n### **Staggered**\n![Staggered Grid Layout][staggered_preview]\n\nThis layout is intended for a small number of items. \nI didn't find, for the moment, a performant algorithm which would work in a `Sliver` context, that's why this is not a GridView and therefore there are no `SliverStaggeredGrid`.\n\n#### **Grid properties**\n- Evenly divided in *n* columns\n- Small number of items\n- Not scrollable\n\n#### **Tile properties**\n- Must occupy 1 to *n* columns\n\n#### **Placement algorithm**\n- Top-most and then left-most\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Staggered example][staggered_example]\n\n```dart\nStaggeredGrid.count(\n  crossAxisCount: 4,\n  mainAxisSpacing: 4,\n  crossAxisSpacing: 4,\n  children: const [\n    StaggeredGridTile.count(\n      crossAxisCellCount: 2,\n      mainAxisCellCount: 2,\n      child: Tile(index: 0),\n    ),\n    StaggeredGridTile.count(\n      crossAxisCellCount: 2,\n      mainAxisCellCount: 1,\n      child: Tile(index: 1),\n    ),\n    StaggeredGridTile.count(\n      crossAxisCellCount: 1,\n      mainAxisCellCount: 1,\n      child: Tile(index: 2),\n    ),\n    StaggeredGridTile.count(\n      crossAxisCellCount: 1,\n      mainAxisCellCount: 1,\n      child: Tile(index: 3),\n    ),\n    StaggeredGridTile.count(\n      crossAxisCellCount: 4,\n      mainAxisCellCount: 2,\n      child: Tile(index: 4),\n    ),\n  ],\n);\n```\n\n### **Masonry**\n![Masonry Grid Layout][masonry_preview]\n\nThis layout facilitates the browsing of uncropped peer content. Container heights are sized based on the widget size.\n\nThis is a complete separate grid and not a `SliverGridDelegate` for performance reasons. The `SliverGrid` is great but it needs to have a layout which does not depends on the size of its children. Otherwise we have to compute the size to all children before the end of the cache, which is really not performant for a masonry layout.\n\n#### **Grid properties**\n- Evenly divided in *n* columns\n\n#### **Tile properties**\n- Must occupy 1 column only\n\n#### **Placement algorithm**\n- Top-most and then left-most\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Masonry example][masonry_example]\n\n```dart\nMasonryGridView.count(\n  crossAxisCount: 4,\n  mainAxisSpacing: 4,\n  crossAxisSpacing: 4,\n  itemBuilder: (context, index) {\n    return Tile(\n      index: index,\n      extent: (index % 5 + 1) * 100,\n    );\n  },\n);\n```\n\n### **Quilted**\n![Quilted Grid Layout][quilted_preview]\n\nThis layout emphasizes certain items over others in a collection. It creates hierarchy using varied container sizes and ratios.\n\n**This is a specific delegate for the built-in `GridView` (or `SliverGrid`) widget. That's why the example below will create such a layout with a `GridView`.**\n\n#### **Grid properties**\n- Evenly divided in *n* columns\n- The height of each row is equal to the width of each column\n- A pattern defines the size of the tiles and different mode of repetition are possible\n\n#### **Tile properties**\n- Must occupy 1 to *n* columns\n- Must occupy 1 or more entire rows\n\n#### **Placement algorithm**\n- Top-most and then left-most\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Quilted example][quilted_example]\n\n```dart\nGridView.custom(\n  gridDelegate: SliverQuiltedGridDelegate(\n    crossAxisCount: 4,\n    mainAxisSpacing: 4,\n    crossAxisSpacing: 4,\n    repeatPattern: QuiltedGridRepeatPattern.inverted,\n    pattern: [\n      QuiltedGridTile(2, 2),\n      QuiltedGridTile(1, 1),\n      QuiltedGridTile(1, 1),\n      QuiltedGridTile(1, 2),\n    ],\n  ),\n  childrenDelegate: SliverChildBuilderDelegate(\n    (context, index) => Tile(index: index),\n  ),\n);\n```\n\n### **Woven**\n![Woven Grid Layout][woven_preview]\n\nThis layout facilitates the browsing of peer content. The items are displayed in containers of varying ratios to create a rhythmic layout.\n\n**This is a specific delegate for the built-in `GridView` (or `SliverGrid`) widget. That's why the example below will create such a layout with a `GridView`.**\n\n#### **Grid properties**\n- Evenly divided in *n* columns\n- The height the rows is the maximum height of the tiles\n- A pattern defines the size of the tiles\n- The size of the tiles follows the pattern in a 'z' sequence.\n\n#### **Tile properties**\n- The height is defined by an `aspectRatio` (width/height)\n- The width is defined by a `crossAxisRatio` (width/column's width) between 0 (exclusive) and 1 (inclusive)\n- Each tile can define how it is aligned within the available space\n\n#### **Placement algorithm**\n- Top-most and then left-most\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Woven example][woven_example]\n\n```dart\nGridView.custom(\n  gridDelegate: SliverWovenGridDelegate.count(\n    crossAxisCount: 2,\n    mainAxisSpacing: 8,\n    crossAxisSpacing: 8,\n    pattern: [\n      WovenGridTile(1),\n      WovenGridTile(\n        5 / 7,\n        crossAxisRatio: 0.9,\n        alignment: AlignmentDirectional.centerEnd,\n      ),\n    ],\n  ),\n  childrenDelegate: SliverChildBuilderDelegate(\n    (context, index) => Tile(index: index),\n  ),\n);\n```\n\n### **Staired**\n![Staired Grid Layout][staired_preview]\n\nThis layout uses alternating container sizes and ratios to create a rhythmic effect. It's another kind of woven grid layout.\n\n**This is a specific delegate for the built-in `GridView` (or `SliverGrid`) widget. That's why the example below will create such a layout with a `GridView`.**\n\n#### **Grid properties**\n- A pattern defines the size of the tiles\n- Each tile is shifted from the previous one by a margin in both axis\n- The placement follows a 'z' sequence\n\n#### **Tile properties**\n- The height is defined by an `aspectRatio` (width/height)\n- The width is defined by a `crossAxisRatio` (width/available horizontal space) between 0 (exclusive) and 1 (inclusive)\n\n#### **Placement algorithm**\n- In a 'z' sequence\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Staired example][staired_example]\n\n```dart\nGridView.custom(\n  gridDelegate: SliverStairedGridDelegate(\n    crossAxisSpacing: 48,\n    mainAxisSpacing: 24,\n    startCrossAxisDirectionReversed: true,\n    pattern: [\n      StairedGridTile(0.5, 1),\n      StairedGridTile(0.5, 3 / 4),\n      StairedGridTile(1.0, 10 / 4),\n    ],\n  ),\n  childrenDelegate: SliverChildBuilderDelegate(\n    (context, index) => Tile(index: index),\n  ),\n);\n```\n\n### **Aligned**\n![Aligned Grid Layout][aligned_preview]\n\nThis layout is also called CSS Grid. This is a common grid layout on the web, where each item within a track has the maximum cross axis extent of its siblings.\n\n#### **Grid properties**\n- Evenly divided in *n* columns\n- The rows can have differents heights\n\n#### **Tile properties**\n- Must occupy 1 column only\n- Each tile has the same height as the tallest one of the row.\n\n#### **Placement algorithm**\n- Top-most and then left-most\n\n#### **Example**\nBelow you'll find the code to create this grid layout:\n\n![Aligned example][aligned_example]\n\n```dart\nAlignedGridView.count(\n  crossAxisCount: 4,\n  mainAxisSpacing: 4,\n  crossAxisSpacing: 4,\n  itemBuilder: (context, index) {\n    return Tile(\n      index: index,\n      extent: (index % 7 + 1) * 30,\n    );\n  },\n);\n```\n\n## Sponsoring\n\nI'm working on my packages on my free-time, but I don't have as much time as I would. If this package or any other package I created is helping you, please consider to sponsor me so that I can take time to read the issues, fix bugs, merge pull requests and add features to these packages.\n\n## Sponsors\n\nI want to thank [Tommy][first_sponsor] for sponsoring this package. Thanks to him, I took the time to investigate in the previous performance issues and refactor this library to make it how is it today.\n\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/Tom3652\"><img src=\"https://avatars.githubusercontent.com/u/32631467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tom3652</b></sub></a><br /></td>\n  </tr>\n</table>\n\n## Contributions\n\nFeel free to contribute to this project.\n\nIf you find a bug or want a feature, but don't know how to fix/implement it, please fill an [issue][issue].  \nIf you fixed a bug or implemented a feature, please send a [pull request][pr].\n\n<!-- Links -->\n[github_action_badge]: https://github.com/letsar/flutter_staggered_grid_view/workflows/Build/badge.svg\n[github_action]: https://github.com/letsar/flutter_staggered_grid_view/actions\n[pub_badge]: https://img.shields.io/pub/v/flutter_staggered_grid_view.svg\n[pub]: https://pub.dartlang.org/packages/flutter_staggered_grid_view\n[codecov]: https://codecov.io/gh/letsar/flutter_staggered_grid_view\n[codecov_badge]: https://codecov.io/gh/letsar/flutter_staggered_grid_view/branch/main/graph/badge.svg\n[buy_me_a_coffee]: https://www.buymeacoffee.com/romainrastel\n[buy_me_a_coffee_badge]: https://img.buymeacoffee.com/button-api/?text=Donate&emoji=&slug=romainrastel&button_colour=29b6f6&font_colour=000000&font_family=Cookie&outline_colour=000000&coffee_colour=FFDD00\n[issue]: https://github.com/letsar/flutter_staggered_grid_view/issues\n[pr]: https://github.com/letsar/flutter_staggered_grid_view/pulls\n[flutter_documentation]: https://docs.flutter.dev/\n[first_sponsor]: https://github.com/Tom3652\n[staggered_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/staggered.png\n[masonry_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/masonry.png\n[quilted_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/quilted.png\n[woven_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/woven.png\n[staired_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/staired.png\n[aligned_preview]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/aligned.png\n[staggered_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/staggered_example.png\n[masonry_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/masonry_example.png\n[quilted_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/quilted_example.png\n[woven_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/woven_example.png\n[staired_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/staired_example.png\n[aligned_example]: https://raw.githubusercontent.com/letsar/flutter_staggered_grid_view/master/docs/images/aligned_example.png"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 2.248046875,
          "content": "analyzer:\n  strong-mode:\n    implicit-casts: false\n    implicit-dynamic: false\n  errors:\n    missing_required_param: error\n    missing_return: error\n    todo: warning\n    include_file_not_found: ignore\n\nlinter:\n  rules:\n    - annotate_overrides\n    - avoid_empty_else\n    - avoid_function_literals_in_foreach_calls\n    - avoid_init_to_null\n    - avoid_null_checks_in_equality_operators\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    - avoid_returning_null\n    - avoid_types_as_parameter_names\n    - avoid_unused_constructor_parameters\n    - await_only_futures\n    - camel_case_types\n    - cancel_subscriptions\n    - comment_references\n    - constant_identifier_names\n    - control_flow_in_finally\n    - directives_ordering\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    - hash_and_equals\n    - implementation_imports\n    - invariant_booleans\n    - iterable_contains_unrelated_type\n    - library_names\n    - library_prefixes\n    - list_remove_unrelated_type\n    - no_adjacent_strings_in_list\n    - no_duplicate_case_values\n    - non_constant_identifier_names\n    - null_closures\n    - only_throw_errors\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    - prefer_adjacent_string_concatenation\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_contains\n    - prefer_equal_for_default_values\n    - prefer_final_fields\n    - prefer_initializing_formals\n    - prefer_interpolation_to_compose_strings\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_single_quotes\n    - prefer_typing_uninitialized_variables\n    - public_member_api_docs\n    - recursive_getters\n    - require_trailing_commas\n    - slash_for_doc_comments\n    - test_types_in_equals\n    - throw_in_finally\n    - type_init_formals\n    - type_annotate_public_apis\n    - unawaited_futures\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    - unnecessary_getters_setters\n    - unnecessary_lambdas\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_statements\n    - unnecessary_this\n    - unrelated_type_equality_checks\n    - use_rethrow_when_possible\n    - valid_regexps"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.3623046875,
          "content": "name: flutter_staggered_grid_view\ndescription: Provides a collection of Flutter grids layouts (staggered, masonry, quilted, woven, etc.).\nversion: 0.7.0\nhomepage: https://github.com/letsar/flutter_staggered_grid_view\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n  flutter: \">=3.7.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}