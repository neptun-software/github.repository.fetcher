{
  "metadata": {
    "timestamp": 1736710537581,
    "page": 97,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cunarist/rinf",
      "stars": 2115,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.45703125,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\nmigrate_working_dir/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.vscode/\n\n# Flutter/Dart/Pub related\n# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.\n/pubspec.lock\n**/doc/api/\n.dart_tool/\n.packages\nbuild/\n\n# Rust related\n.cargo/\ntarget/\n\n# Others\n*.lock\n/documentation/site/\n.python-version"
        },
        {
          "name": ".rustfmt.toml",
          "type": "blob",
          "size": 0.0654296875,
          "content": "max_width = 80 # This matches the maximum line length used in Dart\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.646484375,
          "content": "## 7.1.0\n\n- Fixed JavaScript bindings on the web, resolving errors related to the missing `rinf` JavaScript object in web workers.\n- Cleaned up the usage of the global JavaScript namespace on the web.\n\n## 7.0.4\n\n- Upgraded `allo-isolate` to fix crashes on Android.\n\n## 7.0.3\n\n- Fixed a problem where generated Rust message structs were unable to import other messages.\n\n## 7.0.2\n\n- Optimized certain async APIs in the `rinf` crate for better performance.\n\n## 7.0.1\n\n- The initial template and example code has been improved.\n\n## 7.0.0\n\n- To migrate from Rinf version 6, please refer to [this section](https://rinf.cunarist.com/upgrading/) in the documentation.\n- Rinf no longer relies on `tokio`. While it is provided by default in the template, you can now choose whichever async runtime you prefer.\n- The CLI output is now more compact and includes animations.\n- The full `flutter run` command with the necessary arguments can now be obtained by running `rinf server`.\n- It is now recommended to import compiled message classes and structs from the root messages module.\n- Memory copying for messages sent from Dart to Rust has been reduced. This was achieved using Dart's FFI feature called 'leaf calls.'\n\n## 7.0.0-beta\n\n- This is a beta version.\n\n## 7.0.0-alpha\n\n- This is an alpha version.\n\n## 6.15.0\n\n- Now it's possible to add attributes to generated message structs in Rust. Thanks @H2Sxxa!\n\n## 6.14.2\n\n- Now, the message channels work after reopening the app following the use of the back button on mobile devices.\n\n## 6.14.1\n\n- The return type of Rust's `main` function can now be anything.\n- Fixed the issue causing the app to hang on the splash screen after closing it with the back button on Android.\n\n## 6.14.0\n\n- New feature `bevy` for treating Dart signals as Bevy events was added. Thanks @Deep-co-de!\n\n## 6.13.0\n\n- The `get_dart_signal_receiver` function now returns `Result`. You need to use `unwrap` or `?` to retrieve Dart signal receivers from the generated message structs.\n- You now need to manually provide the generated `assignRustSignal` to the `initializeRust` function, which can be imported using `import 'package:rinf/rinf.dart';` in Dart.\n- The tokio runtime will now default to being single-threaded. To use a multi-threaded tokio runtime, enable the new `rt-multi-thread` crate feature.\n- By default, backtraces will be hidden in the CLI, with only the error message being printed. To display the Rust backtrace, enable the new `backtrace` crate feature.\n\n## 6.12.1\n\n- Fixed linefeed problem in published files.\n\n## 6.12.0\n\n- Generated message channels are now more efficient.\n- Minimum Android SDK version increased from 16 to 21. Thanks @debanjanbasu!\n- The `finalizeRust()` function in Dart has been removed. The `tokio` async runtime, which holds Rust logic, still drops automatically when the app ends.\n- Bumped `prost` version to 0.12.6. Thanks @yeoupooh!\n- Internal code has been organized.\n\n## 6.11.1\n\n- Fixed a bug with Dart's extension methods in the generated message code.\n\n## 6.11.0\n\n- Now it's possible to set the dynamic library's path.\n- Now `rinf message` generates more memory-efficient and cleaner code.\n\n## 6.10.0\n\n- Early Dart signals are now stored in the tokio channel instead of being ignored. Their performance is also slightly better.\n- Excessive sample code is not included in the template from the `rinf template` command anymore.\n- Now `tokio` is enabled by default in the template, not `tokio_with_wasm`.\n- A configuration option, `rinf.message.rust_serde`, was added to make generated Rust message files compatible with `serde`. Thanks @NeoVance!\n\n## 6.9.2\n\n- Early Dart signals have become more stable.\n\n## 6.9.1\n\n- Now the memory allocation and drop is done in each language.\n\n## 6.9.0\n\n- This version supports Flutter 3.22.\n- The new version of Flutter has a little different way of resolving paths. This release adapts to this change.\n\n## 6.8.0\n\n- Now `sendSignalToRust` and `send_signal_to_dart` methods no longer require `null` or `None`, making the API much cleaner. To make them include binary data, write `[RINF:DART-SIGNAL-BINARY]` or `[RINF:RUST-SIGNAL-BINARY]` in Protobuf files.\n- The problem of panicking from null pointers that arise from empty signal data has been fixed.\n\n## 6.7.0\n\n- Allowed `enum` and `oneof` statements to work in Protobuf message files. Thanks @yeoupooh!\n\n## 6.6.3\n\n- Fixed a linting issue. Thanks @romanseo1!\n\n## 6.6.2\n\n- Updated `tokio_with_wasm` to a newer version that addresses performance issues with `spawn_blocking`.\n- Added example code that shows how to use global state in `sample_functions.rs` file.\n\n## 6.6.1\n\n- Added support for some Linux distributions where patching Flutter SDK is not possible.\n- Fixed a problem with the web sector not working. To use this new version, it's recommended to discard all Git changes in Flutter SDK's directory, or simply run `flutter upgrade --force`.\n- Fixed a problem with `cd` error on Windows. Thanks @H2Sxxa!\n- Fixed `pub.dev` package score.\n\n## 6.6.0\n\n- Now early Rust signals on startup works properly, even if the widgets are not built yet. `rustSignalStream` will remember Rust signals that were received before widgets were built, and give them to the first listener.\n\n## 6.5.0\n\n- Now the native library file is loaded as dynamic library, not static library, on iOS and macOS, like other platforms. This reduces the possibility of potential conflicts of native symbols.\n- Now `rinf template` checks `pubspec.yaml` instead of `lib/main.dart` to ensure that the current folder is a Flutter project.\n\n## 6.4.0\n\n- The start and stop mechanism of Rust has become more stable.\n\n## 6.3.1\n\n- Fixed a small glitch with codegen.\n\n## 6.3.0\n\n- The interface code has been organized. Now the `bridge` Rust module is gone and the API makes more sense. Please refer to the example code to upgrade.\n\n## 6.2.0\n\n- Now custom installation of `protoc` works. This is useful when you don't have full access to GitHub APIs, which is needed for automatic `protoc` installation. Thanks @TENX-S!\n- Signal handling has become more efficient.\n\n## 6.1.0\n\n- Now `rustSignalStream`s `listen` can be called multiple times. Thanks @rabbitson87!\n\n## 6.0.1\n\n- Improved CLI output texts.\n- `js` Dart package was removed.\n\n## 6.0.0\n\n- You need to run `rinf template`, `cargo install rinf` again to use this new version.\n- Now the communication between Dart and Rust is much simpler. You can mark messages in `.proto` files so that Rinf's code generator can generate channels in-between. This new system is not compatible with older Rinf versions, so please check the docs before you upgrade.\n- Added the ability to customize Rinf's behaviors by writing fields inside `pubspec.yaml` file. Thanks @thlorenz!\n- Allowed users to check when the documentation page was made and edited. Thanks @VictorieeMan!\n- Now it's possible to quit `rinf message --watch` by pressing `q` on your keyboard.\n- Internal code has been organized.\n\n## 6.0.0-beta\n\n- This is a beta version.\n\n## 6.0.0-alpha\n\n- This is an alpha version.\n\n## 5.4.0\n\n- Now users do not have to manually install `protoc` binary executable anymore. Protobuf compiler is now automatically installed. Note that you need to run `cargo install rinf` again to use this new version.\n\n## 5.3.1\n\n- Fixed a bug with `rinf message` that omits `mod.rs` inside a folder without any message.\n\n## 5.3.0\n\n- Now it is possible to use `import` statements in `.proto` files.\n- Now you can properly use Flutter's hot restart while developing.\n- Tutorials and guides are improved.\n- Fixed a bug with `rinf message`, that might fail if some of the folders are empty.\n\n## 5.2.0\n\n- Unnecessary memory copy is now avoided.\n\n## 5.1.3\n\n- Fixed introductions.\n\n## 5.1.2\n\n- Fixed a bug with memory freeing.\n\n## 5.1.1\n\n- The codebase was organized further.\n- Fixed a problem with Dart analysis.\n\n## 5.1.0\n\n- All the code from `flutter_rust_bridge` was removed. This was due to criticisms about Rinf from the community and FRB devs. Also, internal bridge and FFI code is now much smaller. User API remains unchanged.\n\n## 5.0.0\n\n- Now `requestToRust` Dart function will return `null` when the handler function in Rust cannot respond or has panicked. This is a breaking change, so when you upgrade to this version, you need to run `rinf template --bridge` in the terminal and refactor some of the code where IDE warns you about mismatches. You also need to modify `lib.rs` and `with_request.rs` modules of the `hub` crate. Also, the `timeout` parameter was removed from the `requestToRust` function because Dart will always get some return value from Rust in all cases. Please refer to the example code and documentation tutorials if you need detailed information.\n\n## 4.20.0\n\n- Added support for Android Gradle Plugin 8.\n\n## 4.19.1\n\n- Switched to the new official website `rinf.cunarist.com`.\n\n## 4.19.0\n\n- The mechanism for awaiting Rust's responses from Dart has become much more efficient.\n\n## 4.18.0\n\n- Now `null` can be provided to the `timeout` parameter in the `requestToRust()` Dart function. This enables awaiting a Rust response forever, but it should be used cautiously because it may potentially lead to resource leaks.\n\n## 4.17.1\n\n- Now `rinf message --watch` works on all platforms. Thanks @bookshiyi!\n\n## 4.17.0\n\n- New command `rinf message --watch` for automatic message code generation. Thanks @bookshiyi!\n\n## 4.16.3\n\n- Updated package descriptions.\n\n## 4.16.2\n\n- Improved guides to avoid misconceptions about the communication system. Rinf only uses FFI without any web server.\n\n## 4.16.1\n\n- Fixed the broken `rinf template --bridge` command\n\n## 4.16.0\n\n- Vastly organized files, dependencies, and code readability. Now the `hub` crate is much cleaner than before. If you already have an app using older Rinf versions, it is recommended to run `rinf template --bridge` and add `rinf = \"4.16.0\"` to `Cargo.toml` of the `hub` crate.\n\n## 4.15.2\n\n- Now the web API fetching example uses `http` instead of `https` in the example app.\n\n## 4.15.1\n\n- Now the `reqwest` crate will be disabled when compiling the example app for Android.\n\n## 4.15.0\n\n- Allowed setting custom timeout when using `requestToRust()`. Thanks @cipherchabon!\n\n## 4.14.0\n\n- Added a web API fetching example to the template.\n- Fixed various things such as template comments, code linting issues.\n\n## 4.13.2\n\n- Fixed small things.\n\n## 4.13.1\n\n- Fixed formatting issues in Dart code.\n\n## 4.13.0\n\n- Improved the template code by disabling CPU-intensive tasks and removing unneeded dependency features.\n- Improved CLI outputs from `rinf wasm`.\n- Improved various guides and template comments.\n\n## 4.12.5\n\n- Automated publication.\n\n## 4.12.4\n\n- Fixed permission related problems with build script files.\n\n## 4.12.3\n\n- Fixed permission related problems with build script files.\n\n## 4.12.2\n\n- Fixed guide badges.\n\n## 4.12.1\n\n- Fixed publishing issues.\n\n## 4.12.0\n\n- Renamed the framework to Rinf.\n\n## 4.11.8\n\n- Improved first guides.\n\n## 4.11.7\n\n- Improved the example app's code and guides.\n\n## 4.11.6\n\n- Improved the shorthand command crate.\n\n## 4.11.5\n\n- Improved the shorthand command crate.\n\n## 4.11.4\n\n- Improved the first preview image and some comments.\n\n## 4.11.3\n\n- Improved the example app's code.\n\n## 4.11.2\n\n- Fixed a problem with compilation on macOS.\n\n## 4.11.1\n\n- Fixed a problem with compilation on macOS.\n\n## 4.11.0\n\n- New Dart function `ensureFinalized()`. This function ensures that all Rust tasks are terminated. Take a look at the example code to understand how to run this function before closing the Flutter app. Note that you have to run `rifs template --bridge` again to use this function.\n\n## 4.10.0\n\n- New default web alias `spawn_blocking()`. CPU-intensive blocking tasks are better to be executed on a separate thread pool.\n- Improved the example app's performance and debug tests.\n\n## 4.9.0\n\n- New default web alias `yield_now()`. Inside a long-running code, calling this will help you avoid blocking the whole async event loop, by giving the flow back to other async tasks.\n- Vastly improved comments inside the `web_alias` Rust module.\n- Now Rust panics on the web will be printed to the CLI too.\n- Improved the example app's performance and debug tests.\n\n## 4.8.2\n\n- Improved guide sentences.\n\n## 4.8.1\n\n- Improved the readability of the example code.\n- Organized and clarified first guides.\n\n## 4.8.0\n\n- Now by running `rifs template --bridge`, you can apply and update only the `bridge` module inside the `hub` crate. This is useful when you've upgraded RIF but do not need to apply the whole template again.\n- Improved `rifs --help` output.\n\n## 4.7.0\n\n- Now Rust stacktrace will be printed to the CLI when a panic occurs. The changes are mostly included in the template, so make sure you've run `rifs template` on this new version.\n\n## 4.6.2\n\n- Polished various aspects.\n\n## 4.6.1\n\n- Stabilized `debug_print!` logic.\n\n## 4.6.0\n\n- New `debug_print!` macro that works on all environments, including web and mobile emulators, with the power of Flutter debuggers. To use this, you need to run `rifs template` again.\n- Now panic information in Rust will be properly printed to the CLI. Note that Rust panics don't crash the app and do not hinder stability.\n- Improved docs. There are also more guides about well-known types in Protobuf. Thanks @LucaCoduriV!\n\n## 4.5.0\n\n- Added support for external symbols on iOS and macOS. This is needed for some Rust crates that depend on Apple's system frameworks.\n\n## 4.4.2\n\n- Updated docs and demo links.\n\n## 4.4.1\n\n- Updated docs and demo links.\n\n## 4.4.0\n\n- Improved various guides and comments.\n- Fixed a bug that made the app crash when passing in an empty `Vec<u8>`.\n- Fixed the formatting of Rust files.\n\n## 4.3.0\n\n- Now `flutter run` will use `require-corp` value for `cross-origin-embedder-policy` HTTP header that works on all web browsers.\n\n## 4.2.1\n\n- Fixed a bug with `RustResponse::default()`.\n\n## 4.2.0\n\n- New command `rifs --help`. Thanks @bookshiyi!\n\n## 4.1.4\n\n- Fixed a sentence in the guides.\n\n## 4.1.3\n\n- Made `rifs message` command read `PUB_CACHE` enviornment variable if present. Thanks @rabbitson87!\n\n## 4.1.2\n\n- Fixed `rifs template` command.\n\n## 4.1.1\n\n- Added some guides to the shorthand crate.\n- Removed an unneeded dependency from the shorthand crate.\n\n## 4.1.0\n\n- Fixed `sleep()` on the web.\n- Added demo link in the guides.\n\n## 4.0.3\n\n- Fixed bugs with `rifs template` on Windows.\n- Fixed outdated comments.\n- Organized sample code.\n\n## 4.0.2\n\n- Eliminated an unnecessary Dart dependency.\n\n## 4.0.1\n\n- Eliminated an unnecessary Dart dependency.\n\n## 4.0.0\n\n- Added support for sending large binaries between Dart and Rust. This is now possible by using the `blob` field in `RustRequest`, `RustResponse`, and `RustSignal`. Please make sure you've run `rifs template` before using this new version because the template has changed a little.\n- Added support for nested message folders.\n- Added support for Rust nightly.\n- Eliminated unnecessary Dart dependencies.\n\n## 3.7.4\n\n- Updated `cargokit`, the build connector between Flutter and Rust.\n\n## 3.7.3\n\n- Fixed a bug with cargo.\n\n## 3.7.2\n\n- Fixed a bug with cargo.\n\n## 3.7.1\n\n- Organized descriptions and files.\n\n## 3.7.0\n\n- Now this framework provides a shorthand command `rifs ...` which is equivalent to `dart run rust_in_flutter ...`.\n\n## 3.6.0\n\n- Fixed a bug that prevents the app from running on Linux.\n- Improved various texts exposed to developers for clarity.\n\n## 3.5.1\n\n- Bumped `prost` version to avoid snake case related warnings.\n\n## 3.5.0\n\n- Shortend some names that were unnecessarily long.\n\n## 3.4.5\n\n- Import statements became shorter in Dart.\n\n## 3.4.4\n\n- Cleaned up outdated dependencies in `Cargo.toml`.\n\n## 3.4.3\n\n- Now `syntax` and `package` statements in `.proto` files should be handled automatically.\n\n## 3.4.2\n\n- Now running `dart run rust_in_flutter message` verifies `package` statement in `.proto` files and mistakes are fixed automatically.\n\n## 3.4.1\n\n- Now match statement is used for handling requests. This improves code readability.\n\n## 3.4.0\n\n- Now each `.proto` file is treated as a Rust resource, which essentially becomes an API endpoint.\n\n## 3.3.0\n\n- `RustResource` enum has been added to `interaction.proto`. Now the list of available Rust resources are managed by Protobuf, which makes the project less error-prone. This new system also has less runtime overhead because interactions are distinguished by simple integers, not strings.\n\n## 3.2.3\n\n- Improved guides.\n\n## 3.2.2\n\n- Organized guides.\n\n## 3.2.1\n\n- Matched first guides with the docs.\n\n## 3.2.0\n\n- Now when applying the Rust template with `dart run rust_in_flutter template`, `README.md` file will get a new section explaining about this framework.\n\n## 3.1.1\n\n- Updated docs link.\n\n## 3.1.0\n\n- Now there's a new Dart command `message`. Developers can now generate Dart and Rust message code from `.proto` files with `dart run rust_in_flutter message`. `build.rs` file that used to do this is removed.\n\n## 3.0.9\n\n- Fixed a problem with pub.dev score.\n\n## 3.0.8\n\n- Fixed a problem with pub.dev score.\n\n## 3.0.7\n\n- Fixed a problem with pub.dev score.\n\n## 3.0.6\n\n- Fixed a problem with pub.dev score.\n\n## 3.0.5\n\n- Moved documentation to a dedicated website.\n- Now `build.rs` will automatically modify PATH for `protoc-gen-dart`.\n- Fixed an error appearing in Rust-analyzer's webassembly mode.\n\n## 3.0.4\n\n- Polished template code.\n\n## 3.0.3\n\n- Polished template code.\n\n## 3.0.2\n\n- Polished guides, comments and template code.\n\n## 3.0.1\n\n- Fixed and organized tutorials and comments.\n\n## 3.0.0\n\n- Adopted Protobuf for message serialization. Now communication between Dart and Rust is much more type-safe and faster than before. Because the template has now changed, you need to run `dart run rust_in_flutter template` again when migrating from version 2. Thanks @wheregmis` and @bookshiyi!\n\n## 2.9.0\n\n- Removed `corrosion`. Now this package solely relies on `cargokit` and is much more slimmer. Thanks @bookshiyi!\n- Removed unneeded files from pub.dev publication.\n\n## 2.8.5\n\n- Fixed a problem with pub.dev score.\n\n## 2.8.4\n\n- Fixed a problem with pub.dev score.\n\n## 2.8.3\n\n- Wrote new catchphrase.\n\n## 2.8.2\n\n- Updated links.\n\n## 2.8.1\n\n- Updated links.\n\n## 2.8.0\n\n- Removed unneeded dependencies.\n\n## 2.7.4\n\n- Fixed CI badge showing rate limit error.\n\n## 2.7.3\n\n- Fixed wrong guides.\n\n## 2.7.2\n\n- Organized guides.\n\n## 2.7.1\n\n- Organized guides. Thanks @bookshiyi!\n\n## 2.7.0\n\n- Stabilized web-related Rust toolchain's auto-installation. Thanks @bookshiyi!\n\n## 2.6.0\n\n- Applied continuous integration for checking builds and improving project stability. Thanks @bookshiyi!\n\n## 2.5.6\n\n- Updated Cargokit. Thanks @bookshiyi!\n\n## 2.5.5\n\n- Improved guides about HTTP headers.\n\n## 2.5.4\n\n- Updated example code.\n\n## 2.5.3\n\n- Improved guides and CLI messages.\n\n## 2.5.2\n\n- Optimized web binary size.\n\n## 2.5.1\n\n- Optimized web performance.\n\n## 2.5.0\n\n- Now Rust logic will be restarted upon Dart's hot restart on the web too.\n- CLI commands are shortened.\n\n## 2.4.0\n\n- Fixed the problem with dangling threads from the `tokio` runtime remaining after closing the Flutter app. Even after the app window was closed, `tokio` threads were still running, resulting in becoming a background process without a window. Now the `tokio` runtime will properly be shut down.\n\n## 2.3.2\n\n- Re-publishing due to `pub.dev`'s `[UNKNOWN PLATFORMS]` error.\n\n## 2.3.1\n\n- Restored the benefits section in the first guide.\n\n## 2.3.0\n\n- Improved Dart's hot restart process on native platforms.\n\n## 2.2.0\n\n- Improved the procedure of building for the web.\n- Simplfied unneeded complexities.\n\n## 2.1.2\n\n- Improved web alias module.\n- Fixed small things.\n\n## 2.1.1\n\n- Optimized the bridge thread on native platforms.\n- Updated many minor errors in the guides.\n- Fixed a problem with import statement not being written in `./lib/main.dart` when applying Rust template.\n\n## 2.1.0\n\n- Merged `frb_engine` crate into `hub`.\n- Removed unneeded intermediate worker pools.\n- Added `time` web alias import.\n- Added many guides and comments.\n\n## 2.0.1\n\n- Improved guides.\n- Added `print!` web alias macro.\n- Organized exposed Dart APIs.\n\n## 2.0.0\n\n- Added web support.\n\n## 1.6.6\n\n- Improved guides.\n- Now, the template application command will check if the current directory is a Flutter project first.\n\n## 1.6.5\n\n- Improved guides.\n\n## 1.6.4\n\n- Organized guide sections.\n\n## 1.6.3\n\n- Organized guide sections.\n\n## 1.6.2\n\n- Filled in missing translations.\n\n## 1.6.1\n\n- Slightly improved guide sections.\n\n## 1.6.0\n\n- Added step-by-step guides.\n\n## 1.5.3\n\n- Fixed some example app code.\n\n## 1.5.2\n\n- Improved the readability of example app code.\n\n## 1.5.1\n\n- Added Japanese translation.\n- Fixed some sentences in Korean guides.\n\n## 1.5.0\n\n- Now the Android NDK version that the Flutter SDK expects will be used, not the version specified by this package.\n- Fixed a bug saying `IntoDart` trait is not implemented.\n\n## 1.4.1\n\n- Improved various guides.\n\n## 1.4.0\n\n- Filled in various guides to help developers understand the structure more easily.\n\n## 1.3.2\n\n- Added Chinese guides. Thanks @moluopro!\n- Added Korean guides.\n- Added guides about build tool version issues.\n- Added guides about library bundling.\n\n## 1.3.1\n\n- Fixed a problem with Rust crate path detection on Android.\n\n## 1.3.0\n\n- Changed the name of an exposed enum. Now `Operation` has changed to `RustOperation` so that it won't make confusions with other operations. All developers should update their code to match this new name, probably using the batch replace function in various IDEs.\n- Updated code snippets.\n\n## 1.2.8\n\n- Fixed small things.\n\n## 1.2.7\n\n- Stabilized `main.dart` modifcation upon `dart run rust_in_flutter:apply_template`.\n\n## 1.2.6\n\n- Hid the information regarding the compilation of connector crates to avoid confusion with actual crates.\n\n## 1.2.5\n\n- Updated the guide about Android NDK version.\n\n## 1.2.4\n\n- Updated many outdated comments and guides.\n- Decreased the time spent on `ensureInitialized`. Also, `ensureInitialized()` is automatically inserted in `main.dart` when doing `dart run rust_in_flutter:apply_template` from now on.\n- Various code improvements were applied.\n\n## 1.2.3\n\n- Clarified template structure in guides.\n\n## 1.2.2\n\n- Hide more Dart APIs that are not meant to be used outside.\n\n## 1.2.1\n\n- Updated many comments.\n- Fine-tuned the visibility of Dart APIs.\n- Organized guides.\n\n## 1.2.0\n\n- Made the Rust request handler more future-proof, taking potential web support into account.\n\n## 1.1.1\n\n- Improved various guides to help understanding the features of this package.\n\n## 1.1.0\n\n- Now this package is a Flutter FFI plugin without dummy native code.\n- Improved guides\n\n## 1.0.4\n\n- Fixed a problem with library bundling on Linux.\n- Added comments.\n- Added guides.\n- Improved template application.\n\n## 1.0.3\n\n- Included code snippets in guides.\n\n## 1.0.2\n\n- Fixed typos.\n- Organized inner code.\n\n## 1.0.1\n\n- Enforced bundling on macOS and iOS.\n- Improved pub score.\n- Make `apply_rust` modify `.gitignore`.\n\n## 1.0.0\n\n- Previously `flutter_rust_app_template`, now this is a small convenient framework that can be applied to existing Flutter projects.\n"
        },
        {
          "name": "Cargo.toml",
          "type": "blob",
          "size": 0.140625,
          "content": "[workspace]\nmembers = [\"./flutter_package/example/native/*\", \"./rust_crate\"]\nresolver = \"2\"\n\n[patch.crates-io]\nrinf = { path = \"./rust_crate\" }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2024 Cunarist\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.6376953125,
          "content": "# Rinf: Rust in Flutter\n\n[![Pub Version](https://img.shields.io/pub/v/rinf)](https://pub.dev/packages/rinf)\n[![Crate Version](https://img.shields.io/crates/v/rinf)](https://crates.io/crates/rinf)\n[![GitHub Stars](https://img.shields.io/github/stars/cunarist/rinf)](https://github.com/cunarist/rinf/stargazers)\n[![Test App](https://github.com/cunarist/rinf/actions/workflows/test_app.yaml/badge.svg)](https://github.com/cunarist/rinf/actions/workflows/test_app.yaml?query=branch%3Amain)\n[![GitHub License](https://img.shields.io/github/license/cunarist/rinf)](https://github.com/cunarist/rinf/blob/main/LICENSE)\n\n**Rust for native business logic, Flutter for flexible and beautiful GUI**\n\n![Preview](https://github.com/cunarist/rinf/assets/66480156/5c9a7fb6-e566-4c4e-bd77-d72c1c064d6c)\n\nRinf is a framework for creating beautiful and performant cross-platform apps using Flutter and Rust with batteries fully included. Simply add this framework to your app project, and you're all set to write Flutter and Rust together!\n\n## 🎮 Demo\n\nVisit the [demo](https://rinf-demo.cunarist.com/) running on the web to experience the smoothness and delightfulness that comes from the combination of Flutter and Rust. You can also dive into the [example code](https://github.com/cunarist/rinf/tree/main/flutter_package/example).\n\n## 🖥️ Platform Support\n\nAll platforms available with Flutter are [tested](https://github.com/cunarist/rinf/actions/workflows/test_app.yaml?query=branch%3Amain) and supported. Challenging build settings are automatically handled by this framework.\n\n- ✅ Linux: Tested and supported\n- ✅ Android: Tested and supported\n- ✅ Windows: Tested and supported\n- ✅ macOS: Tested and supported\n- ✅ iOS: Tested and supported\n- ✅ Web: Tested and supported\n\n## 📞 Communication\n\nBelow is Rust code with business logic, and following that is Dart code with widgets.\n\n```rust\nMyMessage {\n    current_number: 7,\n    other_bool: true,\n}\n.send_signal_to_dart();\n```\n\n```dart\nStreamBuilder(\n  stream: MyMessage.rustSignalStream,\n  builder: (context, snapshot) {\n    final rustSignal = snapshot.data;\n    if (rustSignal == null) {\n      return Text('Nothing received yet');\n    }\n    final myMessage = rustSignal.message;\n    return Text(myMessage.currentNumber.toString());\n  },\n),\n```\n\nOf course, the opposite way from Dart to Rust is also possible in a similar manner.\n\nAll message classes and structs are generated by Rinf. You can define the message schema simply with Protobuf, making message passing between Dart and Rust very convenient.\n\n## 🎁 Benefits\n\n- **Truly easy**: It only takes about about a minute or two to fully setup your app.\n- **Efficient**: All communication occurs solely through native FFI. There are no webviews, web servers, hidden threads, or unnecessary memory copying that might cause performance overhead. This setup acts as a very thin wrapper around Dart and Rust.\n- **Minimal**: This is not a bulky framework that requires you to install so many dependencies and use complicated CLI commands. Just focus on your code using your preferred Flutter and Rust libraries.\n- **Scalable**: Creating hundreds or even thousands of message APIs between Dart and Rust feels smooth and clean. Additionally, you have the flexibility to utilize any number of Rust library crates, perhaps including those you might have been working on.\n- **High-level interface**: No messing with sensitive build files, no concerns about memory safety. Stay with Dart and Rust that you're familiar with.\n- **Well maintained**: Our [automated workflows](https://github.com/cunarist/rinf/actions) including build tests are always kept passing, thanks to the main branch protection rule. Also, the number of external dependencies is kept as low as possible and documentations are thoughtfully organized.\n- **Convenient debugging**: All the debugging functionalities are provided by default, without the need for dealing with browsers or mobile emulators. Also, the whole Rust logic is automatically restarted on Dart's hot restart.\n- **Reliable**: Each component is supported by huge communities, ensuring a strong emphasis on future safety. You can easily assure your team of stability since this framework's underlying concept is fairly simple.\n\n## 🐦 Why Use Flutter?\n\nWhile Rust is a powerful language for high-performance native programming, its ecosystem for building graphical user interfaces is far from being mature. Though Rust already has some GUI frameworks, they don't compete with extensive support and smooth development experience that Flutter provides. It's only Flutter that compiles to all 6 major platforms from a single codebase.\n\nFlutter is a powerful and versatile framework that has gained immense popularity for building cross-platform applications with stunning user interfaces. It provides declarative pattern, beautiful widgets, hot reload, convenient debugging tools, and dedicated packages for user interfaces right out-of-the-box.\n\n## 🦀 Why Use Rust?\n\nWhile Dart excels as an amazing object-oriented language for GUI apps, its non-native garbage collection may not always meet demanding performance requirements, and it may lack advanced data manipulation packages. This is where Rust steps in, offering an incredible speed advantage of roughly [2~40 times faster](https://programming-language-benchmarks.vercel.app/dart-vs-rust) than Dart, alongside the ability to leverage multiple threads and various crates that get the job done.\n\nRust has garnered a devoted following, being [the most loved programming language](https://survey.stackoverflow.co/2022#section-most-loved-dreaded-and-wanted-programming-scripting-and-markup-languages) on Stack Overflow. Its native performance, thanks to the zero-cost abstraction philosophy, ensures high productivity. Many developers foresee Rust potentially replacing C++ in the future. Rust's simplicity, memory safety, superior performance in various scenarios, vibrant community, and robust tooling support contribute to its growing popularity.\n\n## 📖 Documentation\n\nCheck out the [documentation](https://rinf.cunarist.com) for everything you need to know about how to use this thing.\n\n## 👥 Contribution\n\nIf Rinf has been helpful, please consider giving a star to our [GitHub repository](https://github.com/cunarist/rinf) and a like to our [Pub package](https://pub.dev/packages/rinf). You can also support us by spreading the word and sharing this framework online.\n\nWe appreciate your contribution to the development of this project! We're always open to discussions and pull requests, so please do not hesitate to leave your ideas or opinions at our GitHub repository.\n\n[![GitHub contributors](https://contrib.rocks/image?repo=cunarist/rinf)](https://github.com/cunarist/rinf/graphs/contributors)\n"
        },
        {
          "name": "automate",
          "type": "tree",
          "content": null
        },
        {
          "name": "documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter_package",
          "type": "tree",
          "content": null
        },
        {
          "name": "rust_crate",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}