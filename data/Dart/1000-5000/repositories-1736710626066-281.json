{
  "metadata": {
    "timestamp": 1736710626066,
    "page": 281,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "felixblaschke/simple_animations",
      "stars": 1042,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5244140625,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n\ncoverage\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 8661d8aecd626f7f57ccbcb735553edc05a2e713\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.77734375,
          "content": "## 5.1.0\n\n- Realigned code base with Flutter `3.24.0`\n- Removed dependency to package `collection`\n\n## 5.0.2\n\n- Added compatibility with Flutter `3.12.0`\n\n## 5.0.1\n\n- More robust implementation for `CustomAnimationBuilder` with `delay`.\n\n## 5.0.0+3\n\n- Added funding section\n\n## 5.0.0+2\n\n- Readme path fixes\n\n## 5.0.0\n\nIf you come from 4.x, please look at [migration kit package for 4.x to 5.x upgrade](https://pub.dev/packages/sa4_migration_kit) for detailed description of breaking changes. That package also contain all original classes from 4.x to simplify the upgrade.\n\n- **New:** MovieTween (replaces MultiTween and TimelineTween)\n- **Update:** Reworked the documentation\n- **Breaking changes:** Builder classes got API changes to be closer to Flutter conventions. Old classes and behavior are still available via [migration kit package](https://pub.dev/packages/sa4_migration_kit).\n- **Breaking changes:** Dropped TimelineTween. TimelineTween is still available via [migration kit package](https://pub.dev/packages/sa4_migration_kit).\n- **Breaking changes:** Dropped MultiTween. MultiTween is still available via [migration kit package](https://pub.dev/packages/sa4_migration_kit).\n\n---\n\n## 4.1.0\n\n- **Update:** Code base is now compliant to Flutter `3.0.0`\n- **Update:** Dependencies\n\n## 4.0.2\n\n- **Update:** `flutter_lints` is now listed as `dev_dependencies` within `pubspec.yaml`.\n\n## 4.0.1\n\n- **Fix:** Increase Dart minimum SDK version to `2.14.0` because of used `unawaited` method.\n\n## 4.0.0\n\n- **New:** Added lifecycle callbacks `onStart` and `onComplete` for `PlayAnimation` and `CustomAnimation` widgets.\n- **Breaking change:** The liquid feature has been separated into an own package [sa3_liquid](https://pub.dev/packages/sa3_liquid).\n- **Breaking change:** Removed deprecated uppercase variants of `CustomAnimationControl` enum. Use the lower case ones.\n- **Update:** Removed supercharged dependency\n- **Update:** Removed supercharged usage from documentation\n- **Update:** Restructured documentation\n\n---\n\n## 3.2.0\n\n- **Update**: Adapt code and examples to modern Dart style guide.\n- **Update**: Use `flutter_lints` instead of `pedantic`\n\n## 3.1.1\n\n- **Fix:** README file issue\n\n## 3.1.0\n\n- **Update:** Reworked and improved documentation\n- **Update:** Adapted `CustomAnimationControl` enum style guide. The values in \"SCREAMING_CAPS\" are deprecated now.\n\n## 3.0.3\n\n- **Fix:** Analyzer issue\n\n## 3.0.2\n\n- **Fix:** Exception in SKIA web if effective blur radius is `0` (`PlasmaRenderer`)\n\n## 3.0.1\n\n- **Fix:** Rendering size / position of atlas-based particle rendering\n\n## 3.0.0\n\n- **New:** Simple Animations is sound null-safe (Flutter 2.0)\n- **New:** Atlas-based particle rendering mode for `PlasmaRenderer`\n- **Update:** Optimization of `TimelineTween` computations\n- **Breaking:** Remove widgets that got deprecated with version `2.x.x`\n\n---\n\n## 2.5.1\n\n- **Fix:** Added missing type annotations to `TimelineTween`\n\n## 2.5.0\n\n- **New:** PlasmaRenderer\n- **New:** Timeline Tween\n- **New:** Animation Developer Tools\n- **Update:** Reorganized documentation\n- **Deprecation:** Plasma (replaced by PlasmaRenderer)\n\n## 2.4.2\n\n- **Fix:** Link in `README.md`\n\n## 2.4.1\n\n- **Update:** Dependencies\n- **Fix:** Homepage url in `pubspec.yaml`\n\n## 2.4.0\n\n- **Update:** Merged module packages into a single `simple_animations` package\n\n## 2.3.1\n\n- **Fix:** Liquid - Plasma: added fix for render issue in web builds (#45)\n\n## 2.3.0\n\n- **New:** Added new module **Liquid** along with **[Liquid Studio](https://felixblaschke.github.io/liquid-studio)**\n- **New:** FPS-Limiter for **Anicoto** and **Stateless Animation**\n\n## 2.2.3\n\n- **New:** Added accessor `getOrElse()` for the `MultiTweenValues` class\n\n## 2.2.2\n\n- **Update:** Migrated to new pub.dev page structure\n- **Update:** Upgraded dependencies\n- **Fix:** removed directory with old / outdated documentation\n\n## 2.2.1\n\n- **Update:** dependencies\n- **Update:** enforce stricter type rules\n- **Update:** upgraded to pedantic rule set 1.9.0\n\n## 2.2.0\n\n- **New:** MultiTween `add` method now uses `Animatable` instead of `Tween`.\n\n## 2.1.1\n\n- **Fix:** critical typo in readme (dependency name)\n\n## 2.1.0\n\n- **New:** integrated all classes from version 1. They are all marked as deprecated.\n\n## 2.0.2\n\n- **Fix:** typo in README documentation\n\n## 2.0.1\n\n- **Fix:** pub.dev dart analyzer issues\n\n## 2.0.0\n\n- **New:** Simple Animation has been reworked with version `2.0.0`.\n\n- **New:** Added module [Stateless Animation](https://pub.dev/packages/sa_animation_builder)\n- **New:** Added module [Multi Tween](https://pub.dev/packages/sa_multi_tween)\n- **New:** Added module [Anicoto](https://pub.dev/packages/sa_anicoto)\n- **Breaking changes:** See [migration guide](https://pub.dev/packages/sa_v1_migration)\n\n---\n\n## 1.3.12\n\n- Fixed bug when updating `curve` parameter in `ControlledAnimation`\n\n## 1.3.11\n\n- Integrated example from pub example page into example_app\n\n## 1.3.10\n\n- App example is now fully integrated into package example\n- Updated all documentation references to the app example\n\n## 1.3.9\n\n- Fixed Flutter health suggestions\n- Updated links to example app\n\n## 1.3.8\n\n- Integrated app example into main repository:\n  - `example/example_app`\n\n## 1.3.7\n\n- This release contains fixes requested by the Flutter Ecosystem Committee:\n  - Added API documentation and improved test coverage\n  - Accidentally public method `LoopTask.finishIteration(Duration)` is now private.\n    Instead you can use public APIs of `AnimationControllerX` to control the tasks.\n  - Accidentally public method `AnimationControllerX.completeCurrentTask()` is now private.\n    Instead you can use `AnimationControllerX.forceCompleteCurrentTask()`.\n\n## 1.3.6\n\n- Fixed bug in type generics\n\n## 1.3.5\n\n- Preparations for avoiding implicit casting\n\n## 1.3.4\n\n- Fixed documentation: missing line about manual creation of AnimationControllerX\n\n## 1.3.1 - 1.3.3\n\n- Upgraded to Flutter 1.7 and Dart 2.4\n\n## 1.3.0\n\n- Upgraded to Flutter 1.5 and Dart 2.3\n\n### New features\n\n- `AnimationControllerX` a new, powerful AnimationController\n- `AnimationControllerMixin` to easily setup AnimationControllerX\n- 5 types of `AnimationTask`s to use for AnimationControllerX\n\n## 1.2.0\n\n### New features\n\n- `Rendering` a widget for building of continuous animations\n- `AnimationProgress` a utility class that helps you with `Duration`-based\n  Animations\n\n## 1.1.1\n\n- Fixed strange effect when rebuilding a `ControlledAnimation` with `playback` set to\n  `Playback.MIRROR`\n\n## 1.1.0\n\n### New features\n\n- New property `startPosition` for `ControlledAnimation` widget:\n  you can now specify the initial start position (time) of the animation.\n  This is useful for designing interactive UI elements.\n\n## 1.0.0\n\n- Initial release\n\n### New features\n\n- `ControlledAnimation`: Widget for simple tween-based custom animations\n- `MultiTrackTween`: Animatable for tweening multiple properties at once\n\n## 0.x\n\n- Setting up the project"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Felix Blaschke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 40.634765625,
          "content": "<!-- This file uses generated code. Visit https://pub.dev/packages/readme_helper for usage information. -->\n\n# 🎬 Simple Animations\n\n[![Pub](https://img.shields.io/pub/v/simple_animations.svg)](https://pub.dartlang.org/packages/simple_animations)\n[![Awesome Flutter](https://img.shields.io/badge/Awesome-Flutter-blue)](https://github.com/Solido/awesome-flutter)\n[![Flutter gems - Top 5 Animation packages](https://img.shields.io/badge/Flutter%20gems-TOP%205%20Animation%20packages-blue)](https://fluttergems.dev/animation-transition/)\n\n**Simple Animations** simplifies the process of creating beautiful custom animations:\n\n- Easily create **custom animations in stateless widgets**\n- Animate **multiple properties** at once\n- Create **staggered animations** within seconds\n- Simplified working with **AnimationController** instances\n- Debug animations\n\n<!-- #toc -->\n## Table of Contents\n\n[**Quickstart**](#quickstart)\n  - [Animation Builder - Quickstart](#animation-builder---quickstart)\n  - [Movie Tween - Quickstart](#movie-tween---quickstart)\n  - [Animation Mixin - Quickstart](#animation-mixin---quickstart)\n  - [Animation Developer Tools - Quickstart](#animation-developer-tools---quickstart)\n\n[**Animation Builder**](#animation-builder)\n  - [Essential parts of the animation](#essential-parts-of-the-animation)\n  - [PlayAnimationBuilder](#playanimationbuilder)\n  - [LoopAnimationBuilder](#loopanimationbuilder)\n  - [MirrorAnimationBuilder](#mirroranimationbuilder)\n  - [CustomAnimationBuilder](#customanimationbuilder)\n\n[**Movie Tween**](#movie-tween)\n  - [Basic usage pattern](#basic-usage-pattern)\n  - [Scenes](#scenes)\n  - [Animate properties](#animate-properties)\n  - [Curves](#curves)\n  - [Extrapolation](#extrapolation)\n  - [Use developer tools](#use-developer-tools)\n  - [Animation duration](#animation-duration)\n\n[**Animation Mixin**](#animation-mixin)\n  - [Basic usage pattern](#basic-usage-pattern)\n  - [Create multiple AnimationController](#create-multiple-animationcontroller)\n\n[**Shortcuts for AnimationController**](#shortcuts-for-animationcontroller)\n\n[**Animation Developer Tools**](#animation-developer-tools)\n  - [Basic usage pattern](#basic-usage-pattern)\n  - [Features and tricks](#features-and-tricks)\n<!-- // end of #toc -->\n\n## Quickstart\n\nDirectly dive in and let the code speak for itself.\n\n### Animation Builder - Quickstart\n\nAnimation Builder are powerful widgets to easily create custom animations.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder.dart -->\n```dart\nimport 'dart:math';\n\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass ResizeCubeAnimation extends StatelessWidget {\n  const ResizeCubeAnimation({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // PlayAnimationBuilder plays animation once\n    return PlayAnimationBuilder<double>(\n      tween: Tween(begin: 100.0, end: 200.0), // 100.0 to 200.0\n      duration: const Duration(seconds: 1), // for 1 second\n      builder: (context, value, _) {\n        return Container(\n          width: value, // use animated value\n          height: value,\n          color: Colors.blue,\n        );\n      },\n      onCompleted: () {\n        // do something ...\n      },\n    );\n  }\n}\n\nclass RotatingBox extends StatelessWidget {\n  const RotatingBox({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // LoopAnimationBuilder plays forever: from beginning to end\n    return LoopAnimationBuilder<double>(\n      tween: Tween(begin: 0.0, end: 2 * pi), // 0° to 360° (2π)\n      duration: const Duration(seconds: 2), // for 2 seconds per iteration\n      builder: (context, value, _) {\n        return Transform.rotate(\n          angle: value, // use value\n          child: Container(color: Colors.blue, width: 100, height: 100),\n        );\n      },\n    );\n  }\n}\n\nclass ColorFadeLoop extends StatelessWidget {\n  const ColorFadeLoop({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // MirrorAnimationBuilder plays forever: alternating forward and backward\n    return MirrorAnimationBuilder<Color?>(\n      tween: ColorTween(begin: Colors.red, end: Colors.blue), // red to blue\n      duration: const Duration(seconds: 5), // for 5 seconds per iteration\n      builder: (context, value, _) {\n        return Container(\n          color: value, // use animated value\n          width: 100,\n          height: 100,\n        );\n      },\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\n[**Read guide**](#animation-builder) or [**watch examples**](example/example.md#animation-builder).\n\n---\n\n### Movie Tween - Quickstart\n\nMovie Tween combines multiple tween into one, including timeline control and value extrapolation.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\n// Simple staggered tween\nfinal tween1 = MovieTween()\n  ..tween('width', Tween(begin: 0.0, end: 100),\n          duration: const Duration(milliseconds: 1500), curve: Curves.easeIn)\n      .thenTween('width', Tween(begin: 100, end: 200),\n          duration: const Duration(milliseconds: 750), curve: Curves.easeOut);\n\n// Design tween by composing scenes\nfinal tween2 = MovieTween()\n  ..scene(\n          begin: const Duration(milliseconds: 0),\n          duration: const Duration(milliseconds: 500))\n      .tween('width', Tween<double>(begin: 0.0, end: 400.0))\n      .tween('height', Tween<double>(begin: 500.0, end: 200.0))\n      .tween('color', ColorTween(begin: Colors.red, end: Colors.blue))\n  ..scene(\n          begin: const Duration(milliseconds: 700),\n          end: const Duration(milliseconds: 1200))\n      .tween('width', Tween<double>(begin: 400.0, end: 500.0));\n\n// Type-safe alternative\nfinal width = MovieTweenProperty<double>();\nfinal color = MovieTweenProperty<Color?>();\n\nfinal tween3 = MovieTween()\n  ..tween<double>(width, Tween(begin: 0.0, end: 100))\n  ..tween<Color?>(color, ColorTween(begin: Colors.red, end: Colors.blue));\n```\n<!-- // end of #code -->\n\n[**Read guide**](#movie-tween) or [**watch examples**](example/example.md#movie-tween).\n\n---\n\n### Animation Mixin - Quickstart\n\nThe **Animation Mixin** manages `AnimationController` instances for you.\nNo more boilerplate code.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_mixin.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass MyWidget extends StatefulWidget {\n  const MyWidget({super.key});\n\n  @override\n  _MyWidgetState createState() => _MyWidgetState();\n}\n\n// Add AnimationMixin\nclass _MyWidgetState extends State<MyWidget> with AnimationMixin {\n  late Animation<double> size;\n\n  @override\n  void initState() {\n    // The AnimationController instance `controller` is already wired up.\n    // Just connect with it with the tweens.\n    size = Tween<double>(begin: 0.0, end: 200.0).animate(controller);\n\n    controller.play(); // start the animation playback\n\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      width: size.value, // use animated value\n      height: size.value,\n      color: Colors.red,\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\n[**Read guide**](#animation-mixin) or [**watch examples**](example/example.md#animation-mixin).\n\n---\n\n### Animation Developer Tools - Quickstart\n\nHelps you fine tuning the animation. It allows you to pause anywhere, scroll around, speed up, slow down or focus on a certain part of the animation.\n\n![devtools](https://github.com/felixblaschke/simple_animations/raw/main/example/img/d1.gif)\n\n[**Read guide**](#animation-developer-tools)\n\n&nbsp;\n\n## Animation Builder\n\nAnimation Builder enables developers to craft custom animations with simple widgets.\n\n### Essential parts of the animation\n\nYou need three things to create an animation:\n\n- **tween**: What _value_ is changing within the animation?\n- **duration**: How long does the animation take?\n- **builder**: How does the UI look like regarding the changing _value_?\n\n#### Tween\n\nThe `tween` is the description of your animation. Mostly it will change a value from A to B. Tweens describe **what** will happen but **not how fast it will happen**.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_tween.dart -->\n```dart\nimport 'package:flutter/material.dart';\n\n// Animate a color from red to blue\nvar colorTween = ColorTween(begin: Colors.red, end: Colors.blue);\n\n// Animate a double value from 0 to 100\nvar doubleTween = Tween<double>(begin: 0.0, end: 100.0);\n```\n<!-- // end of #code -->\n\nTo animate multiple properties, use a [Movie Tween](#movie-tween).\n\n#### Duration\n\nThe `duration` is the time the animation takes.\n\n#### Builder\n\nThe `builder` is a function that is called for **each new rendered frame** of your animation. It takes three parameters: `context`, `value` and `child`.\n\n- `context` is your Flutter `BuildContext`\n\n- `value` is **current value** of any animated variable, produced by the tween. If your tween is `Tween<double>(begin: 0.0, end: 100.0)`, the `value` is a `double` somewhere between `0.0` and `100.0`.\n\n- `child` can be a widget that you might pass in a Animation Builder widget. This widget stays constant and is not affected by the animation.\n\nHow often the `builder` function is called, depends on the animation duration, and the framerate of the device used.\n\n### PlayAnimationBuilder\n\nThe PlayAnimationBuilder is a widget that plays an animation once.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_basic.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\n// Use type `Color?` because ColorTween produces type `Color?`\nvar widget = PlayAnimationBuilder<Color?>(\n  tween: ColorTween(begin: Colors.red, end: Colors.blue), // define tween\n  duration: const Duration(seconds: 5), // define duration\n  builder: (context, value, _) {\n    return Container(\n      color: value, // use animated color\n      width: 100,\n      height: 100,\n    );\n  },\n);\n```\n<!-- // end of #code -->\n\n#### Delay\n\nBy default, animations will play automatically. You can set a `delay` to make `PlayAnimationBuilder` wait for a given amount of time.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_delay.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = PlayAnimationBuilder<Color?>(\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  delay: const Duration(seconds: 2), // add delay\n  builder: (context, value, _) {\n    return Container(\n      color: value,\n      width: 100,\n      height: 100,\n    );\n  },\n);\n```\n<!-- // end of #code -->\n\n#### Non-linear motion\n\nYou can make your animation more appealing by applying non-linear motion behavior to it.\nJust pass a `curve` into the widget.\n\nFlutter comes with a set of predefined curves inside the `Curves` class.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_curve.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = PlayAnimationBuilder<Color?>(\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  curve: Curves.easeInOut, // specify curve\n  builder: (context, value, _) {\n    return Container(\n      color: value,\n      width: 100,\n      height: 100,\n    );\n  },\n);\n```\n<!-- // end of #code -->\n\n#### Animation lifecycle\n\nYou can react to the animation status by setting callbacks.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_lifecycle.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = PlayAnimationBuilder<Color?>(\n  // lifecycle callbacks\n  onStarted: () => debugPrint('Animation started'),\n  onCompleted: () => debugPrint('Animation complete'),\n\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  builder: (context, value, _) =>\n      Container(color: value, width: 100, height: 100),\n);\n```\n<!-- // end of #code -->\n\n#### Using child widgets\n\nParts of the UI that are not effected by the animated value can be passed as a `Widget` into the `child` property. That `Widget` is available within the `builder` function.\nThey will not rebuild when animated value changes and therefore has a positive performance impact.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/pa_child.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = PlayAnimationBuilder<Color?>(\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  // child gets passed into builder function\n  builder: (context, value, child) {\n    return Container(\n      color: value,\n      width: 100,\n      height: 100,\n      child: child, // use child\n    );\n  },\n  child: const Text('Hello World'), // specify child widget\n);\n```\n<!-- // end of #code -->\n\n#### Using keys\n\nIf Flutter swaps out a `PlayAnimationBuilder` with another different `PlayAnimationBuilder` in a rebuild, it may recycle the first one.\nThis may lead to a undesired behavior.\nIn such a case use the `key` property.\n\nYou may [watch this introduction](https://www.youtube.com/watch?v=kn0EOS-ZiIc) to `Key`.\n\n#### App example\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/example_play_animation.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvoid main() => runApp(\n    const MaterialApp(home: Scaffold(body: Center(child: AnimatedGreenBox()))));\n\nclass AnimatedGreenBox extends StatelessWidget {\n  const AnimatedGreenBox({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return PlayAnimationBuilder<double>(\n      // specify tween (from 50.0 to 200.0)\n      tween: Tween<double>(begin: 50.0, end: 200.0),\n\n      // set a duration\n      duration: const Duration(seconds: 5),\n\n      // set a curve\n      curve: Curves.easeInOut,\n\n      // use builder function\n      builder: (context, value, child) {\n        // apply animated value obtained from builder function parameter\n        return Container(\n          width: value,\n          height: value,\n          color: Colors.green,\n          child: child,\n        );\n      },\n      child: const Text('Hello World'),\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\n### LoopAnimationBuilder\n\nA `LoopAnimationBuilder` repeatedly plays the animation from the start to the end over and over again.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/loop_animation.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = LoopAnimationBuilder<Color?>(\n  // mandatory parameters\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  builder: (context, value, child) {\n    return Container(color: value, width: 100, height: 100, child: child);\n  },\n  // optional parameters\n  curve: Curves.easeInOut,\n  child: const Text('Hello World'),\n);\n```\n<!-- // end of #code -->\n\n### MirrorAnimationBuilder\n\nA `MirrorAnimationBuilder` repeatedly plays the animation from the start to the end, then reverse to the start, then again forward and so on.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/mirror_animation.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = MirrorAnimationBuilder<Color?>(\n  // mandatory parameters\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  builder: (context, value, child) {\n    return Container(color: value, width: 100, height: 100, child: child);\n  },\n  // optional parameters\n  curve: Curves.easeInOut,\n  child: const Text('Hello World'),\n);\n```\n<!-- // end of #code -->\n\n### CustomAnimationBuilder\n\nUse `CustomAnimationBuilder` if the animation widgets discussed above aren't sufficient for you use case. Beside all parameters mentioned for `PlayAnimationBuilder` it allows you actively control the animation.\n\n#### Control the animation\n\nThe `control` parameter can be set to the following values:\n\n| Control.VALUE        | Description                                                                                                                |\n| -------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| `stop`               | Stops the animation at the current position.                                                                               |\n| `play`               | Plays the animation from the current position to the end.                                                                  |\n| `playReverse`        | Plays the animation from the current position reverse to the start.                                                        |\n| `playFromStart`      | Resets the animation position to the beginning (`0.0`) and starts playing to the end.                                      |\n| `playReverseFromEnd` | Resets the position of the animation to end (`1.0`) and starts playing backwards to the start.                             |\n| `loop`               | Endlessly plays the animation from the start to the end.                                                                   |\n| `mirror`             | Endlessly plays the animation from the start to the end, then it plays reverse to the start, then forward again and so on. |\n\nYou can bind the `control` value to state variable and change it during the animation. The `CustomAnimationBuilder` will adapt to that.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/example_control.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvoid main() => runApp(\n    const MaterialApp(home: Scaffold(body: Center(child: SwappingButton()))));\n\nclass SwappingButton extends StatefulWidget {\n  const SwappingButton({super.key});\n\n  @override\n  _SwappingButtonState createState() => _SwappingButtonState();\n}\n\nclass _SwappingButtonState extends State<SwappingButton> {\n  var control = Control.play; // define variable\n\n  void _toggleDirection() {\n    setState(() {\n      // let the animation play to the opposite direction\n      control = control == Control.play ? Control.playReverse : Control.play;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CustomAnimationBuilder<double>(\n      control: control, // bind variable with control instruction\n      tween: Tween<double>(begin: -100.0, end: 100.0),\n      duration: const Duration(seconds: 1),\n      builder: (context, value, child) {\n        // moves child from left to right\n        return Transform.translate(\n          offset: Offset(value, 0),\n          child: child,\n        );\n      },\n      child: OutlinedButton(\n        // clicking button changes animation direction\n        onPressed: _toggleDirection,\n        child: const Text('Swap'),\n      ),\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\n#### Start position\n\nBy default the animation starts from the beginning (`0.0`). You can change this by setting the `startPosition` parameter. It can be set to a value between `0.0` (beginning) and `1.0` (end).\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/start_position.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = CustomAnimationBuilder<Color?>(\n  control: Control.play,\n  startPosition: 0.5, // set start position at 50%\n  duration: const Duration(seconds: 5),\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  builder: (context, value, child) {\n    return Container(color: value, width: 100, height: 100);\n  },\n);\n```\n<!-- // end of #code -->\n\n#### Animation lifecycle\n\nYou can react to the animation status by setting callbacks.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/ca_lifecycle.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = CustomAnimationBuilder<Color?>(\n  // lifecycle callbacks\n  onStarted: () => debugPrint('Animation started'),\n  onCompleted: () => debugPrint('Animation complete'),\n\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  builder: (context, value, child) {\n    return Container(color: value, width: 100, height: 100);\n  },\n);\n```\n<!-- // end of #code -->\n\nIt's also possible to directly access the `AnimationStatusListener` of the internal `AnimationController`.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_builder/animation_status.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvar widget = CustomAnimationBuilder<Color?>(\n  animationStatusListener: (AnimationStatus status) {\n    // provide listener\n    if (status == AnimationStatus.completed) {\n      debugPrint('Animation completed!');\n    }\n  },\n  tween: ColorTween(begin: Colors.red, end: Colors.blue),\n  duration: const Duration(seconds: 5),\n  builder: (context, value, child) {\n    return Container(color: value, width: 100, height: 100);\n  },\n);\n```\n<!-- // end of #code -->\n\n&nbsp;\n\n## Movie Tween\n\nMovie Tween combines multiple tween into one, including timeline control and value extrapolation.\n\n### Basic usage pattern\n\nCreate a new `MovieTween` and use the `tween()` to tween multiples values:\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/basic1.dart -->\n```dart\nfinal tween = MovieTween();\n\ntween.tween('width', Tween(begin: 0.0, end: 100.0),\n    duration: const Duration(milliseconds: 700));\n\ntween.tween('height', Tween(begin: 100.0, end: 200.0),\n    duration: const Duration(milliseconds: 700));\n```\n<!-- // end of #code -->\n\nYou can use `..` to get a nice builder style syntax:\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/basic1_builder.dart -->\n```dart\nfinal tween = MovieTween()\n  ..tween('width', Tween(begin: 0.0, end: 100.0),\n      duration: const Duration(milliseconds: 700))\n  ..tween('height', Tween(begin: 100.0, end: 200.0),\n      duration: const Duration(milliseconds: 700));\n```\n<!-- // end of #code -->\n\nIn order to not repeat yourself, you can use `scene()` to create an explicit scene and apply both tween to it:\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/basic2.dart -->\n```dart\nfinal tween = MovieTween();\n\ntween.scene(duration: const Duration(milliseconds: 700))\n  ..tween('width', Tween(begin: 0.0, end: 100.0))\n  ..tween('height', Tween(begin: 100.0, end: 200.0));\n```\n<!-- // end of #code -->\n\nCalling `tween()` creates a scene as well. Therefore you can just call `thenTween()` to create staggered animations.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/basic3.dart -->\n```dart\nfinal tween = MovieTween();\n\ntween\n    .tween('width', Tween(begin: 0.0, end: 100.0),\n        duration: const Duration(milliseconds: 700))\n    .thenTween('width', Tween(begin: 100.0, end: 200.0),\n        duration: const Duration(milliseconds: 500));\n```\n<!-- // end of #code -->\n\nYou can use e.g. a `PlayAnimationBuilder` to bring the `MovieTween` alive:\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/play_animation_example.dart -->\n```dart\n@override\nWidget build(BuildContext context) {\n  // create tween\n  var tween = MovieTween()\n    ..scene(duration: const Duration(milliseconds: 700))\n        .tween('width', Tween<double>(begin: 0.0, end: 100.0))\n        .tween('height', Tween<double>(begin: 300.0, end: 200.0));\n\n  return PlayAnimationBuilder<Movie>(\n    tween: tween, // provide tween\n    duration: tween.duration, // total duration obtained from MovieTween\n    builder: (context, value, _) {\n      return Container(\n        width: value.get('width'), // get animated width value\n        height: value.get('height'), // get animated height value\n        color: Colors.yellow,\n      );\n    },\n  );\n}\n```\n<!-- // end of #code -->\n\n`MovieTween` animates to `Movie` that offers you a `get()` method to obtain a single animated value.\n\n### Scenes\n\nA `MovieTween` can consist of multiple scenes with each scene having multiple tweened properties. Those scenes can be created\n\n- implicitly using `tween()` or `thenTween()`,\n- explicitly using `scene()` or `thenFor()`.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/scenes.dart -->\n```dart\nfinal tween = MovieTween();\n\n// implicit scenes\nfinal sceneA1 = tween.tween('x', Tween(begin: 0.0, end: 1.0),\n    duration: const Duration(milliseconds: 700));\n\nfinal sceneA2 = sceneA1.thenTween('x', Tween(begin: 1.0, end: 2.0),\n    duration: const Duration(milliseconds: 500));\n\n// explicit scenes\nfinal sceneB1 = tween\n    .scene(duration: const Duration(milliseconds: 700))\n    .tween('x', Tween(begin: 0.0, end: 1.0));\n\nfinal sceneB2 = sceneA1\n    .thenFor(duration: const Duration(milliseconds: 500))\n    .tween('x', Tween(begin: 1.0, end: 2.0));\n```\n<!-- // end of #code -->\n\n#### Absolute scenes\n\nYou can add scenes anywhere in the timeline of your tween by using `tween.scene()`. You just need to provide two of these parameters:\n\n- `begin` (start time of the scene)\n- `duration` (duration of the scene)\n- `end` (end time of the scene)\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/scenes_absolute.dart -->\n```dart\nfinal tween = MovieTween();\n\n// start at 0ms and end at 1500ms\nfinal scene1 = tween.scene(\n  duration: const Duration(milliseconds: 1500),\n);\n\n// start at 200ms and end at 900ms\nfinal scene2 = tween.scene(\n  begin: const Duration(milliseconds: 200),\n  duration: const Duration(milliseconds: 700),\n);\n\n// start at 700ms and end at 1400ms\nfinal scene3 = tween.scene(\n  begin: const Duration(milliseconds: 700),\n  end: const Duration(milliseconds: 1400),\n);\n\n// start at 1000ms and end at 1600ms\nfinal scene4 = tween.scene(\n  duration: const Duration(milliseconds: 600),\n  end: const Duration(milliseconds: 1600),\n);\n```\n<!-- // end of #code -->\n\n#### Relative scenes\n\nYou can also make scenes depend on each other by using `thenFor()`.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/scenes_relative.dart -->\n```dart\nfinal tween = MovieTween();\n\nfinal firstScene = tween\n    .scene(\n      begin: const Duration(seconds: 0),\n      duration: const Duration(seconds: 2),\n    )\n    .tween('x', ConstantTween<int>(0));\n\n// secondScene references the firstScene\nfinal secondScene = firstScene\n    .thenFor(\n      delay: const Duration(milliseconds: 200),\n      duration: const Duration(seconds: 2),\n    )\n    .tween('x', ConstantTween<int>(1));\n```\n<!-- // end of #code -->\n\nIt also possible to add an optional `delay` to add further time between the scenes.\n\n#### Hint on code style\n\nBy using builder style Dart syntax and comments you can easily create a well-readable animation.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/tween.dart -->\n```dart\nMovieTween()\n\n    /// fade in\n    .scene(\n      begin: const Duration(seconds: 0),\n      duration: const Duration(milliseconds: 300),\n    )\n    .tween('x', Tween<double>(begin: 0.0, end: 100.0))\n    .tween('y', Tween<double>(begin: 0.0, end: 200.0))\n\n    /// grow\n    .thenFor(duration: const Duration(milliseconds: 700))\n    .tween('x', Tween<double>(begin: 100.0, end: 200.0))\n    .tween('y', Tween<double>(begin: 200.0, end: 400.0))\n\n    /// fade out\n    .thenFor(duration: const Duration(milliseconds: 300))\n    .tween('x', Tween<double>(begin: 200.0, end: 0.0))\n    .tween('y', Tween<double>(begin: 400.0, end: 0.0));\n```\n<!-- // end of #code -->\n\n### Animate properties\n\nYou can use `tween()` to specify a tween for single property.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/animate1.dart -->\n```dart\nfinal tween = MovieTween();\nfinal scene = tween.scene(end: const Duration(seconds: 1));\n\nscene.tween('width', Tween(begin: 0.0, end: 100.0));\nscene.tween('color', ColorTween(begin: Colors.red, end: Colors.blue));\n```\n<!-- // end of #code -->\n\nYou can fine tune the timing with `shiftBegin` or `shiftEnd` for each property.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/animate2.dart -->\n```dart\nscene.tween('width', Tween(begin: 0.0, end: 100.0),\n    shiftBegin: const Duration(milliseconds: 200), // start later\n    shiftEnd: const Duration(milliseconds: -200) // end earlier\n    );\n```\n<!-- // end of #code -->\n\n### Curves\n\nYou can customize the default easing curve at MovieTween, scene or property tween level.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/curve.dart -->\n```dart\nfinal tween = MovieTween(curve: Curves.easeIn);\n\n// scene1 will use Curves.easeIn defined by the MovieTween\nfinal scene1 = tween.scene(duration: const Duration(seconds: 1));\n\n// scene2 will use Curves.easeOut\nfinal scene2 =\n    tween.scene(duration: const Duration(seconds: 1), curve: Curves.easeOut);\n\n// will use Curves.easeIn defined by the MovieTween\nscene1.tween('value1', Tween(begin: 0.0, end: 100.0));\n\n// will use Curves.easeOut defined by scene2\nscene2.tween('value2', Tween(begin: 0.0, end: 100.0));\n\n// will use Curves.easeInOut defined by property tween\nscene2.tween('value3', Tween(begin: 0.0, end: 100.0),\n    curve: Curves.easeInOut);\n```\n<!-- // end of #code -->\n\n### Extrapolation\n\nAll values that are not explicitly set in the timeline will be extrapolated.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/extrapolation.dart -->\n```dart\nfinal tween = MovieTween()\n\n  // implicitly use 100.0 for width values from 0.0s - 1.0s\n\n  // 1.0s - 2.0s\n  ..scene(\n    begin: const Duration(seconds: 1),\n    duration: const Duration(seconds: 1),\n  ).tween('width', Tween<double>(begin: 100.0, end: 200.0))\n\n  // implicitly use 200.0 for width values from 2.0s - 3.0s\n\n  // 3.0s - 4.0s\n  ..scene(\n    begin: const Duration(seconds: 3),\n    end: const Duration(seconds: 4),\n  ).tween('height', Tween<double>(begin: 400.0, end: 500.0));\n```\n<!-- // end of #code -->\n\n### Use developer tools\n\nCreating complex tweens with multiple or staggered properties can be time consuming to create and maintain. I recommend using the [**Animation Developer Tools**](#animation-developer-tools) to streamline this process.\n\n![devtools](https://github.com/felixblaschke/simple_animations/raw/main/example/img/d1.gif)\n\n### Animation duration\n\nNormally an `Animatable` or `Tween` doesn't contain a duration information. But `MovieTween` class contains a `duration` property that contains the total duration of the animation.\n\n<!-- #code example/sa_flutter_app/lib/readme/movie_tween/duration.dart -->\n```dart\n@override\nWidget build(BuildContext context) {\n  final tween = MovieTween()\n    ..tween('width', Tween<double>(begin: 0.0, end: 100.0),\n        duration: const Duration(milliseconds: 700))\n    ..tween('height', Tween<double>(begin: 300.0, end: 200.0),\n        duration: const Duration(milliseconds: 700));\n\n  return PlayAnimationBuilder<Movie>(\n    tween: tween,\n    duration: tween.duration, // use duration from MovieTween\n    builder: (context, value, _) {\n      return Container(\n        width: value.get('width'),\n        height: value.get('height'),\n        color: Colors.yellow,\n      );\n    },\n  );\n}\n```\n<!-- // end of #code -->\n\n_Hint: You can also multiply the `duration` value with a numeric factor in order to speed up or slow down an animation._\n\nOf cause you can also use an own `Duration` for the animation.\n\n&nbsp;\n\n## Animation Mixin\n\nIt reduces boilerplate code when using `AnimationController` instances.\n\n### Basic usage pattern\n\nCreate an `AnimationController` just by adding `AnimationMixin` to your stateful widget:\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_mixin/basic.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass MyAnimatedWidget extends StatefulWidget {\n  const MyAnimatedWidget({super.key});\n\n  @override\n  _MyAnimatedWidgetState createState() => _MyAnimatedWidgetState();\n}\n\n// Add AnimationMixin to state class\nclass _MyAnimatedWidgetState extends State<MyAnimatedWidget>\n    with AnimationMixin {\n  late Animation<double> size;\n\n  @override\n  void initState() {\n    size = Tween<double>(begin: 0.0, end: 200.0).animate(controller);\n    controller.play();\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(width: size.value, height: size.value, color: Colors.red);\n  }\n}\n```\n<!-- // end of #code -->\n\n💪 The `AnimationMixin` generates a preconfigured AnimationController as `controller`. You can just use it. No need to worry about initialization or disposing.\n\n### Create multiple AnimationController\n\nWith multiple AnimationController you can have many parallel animations at the same time.\n\nAnicoto's `AnimationMixin` enhances your **state class** with a method `createController()` to create multiple **managed\\*** AnimationController. _(\"Managed\" means that you don't need to care about initialization and disposing.)_\n\n#### Create a managed AnimationController\n\nFirst create a class variable of type `AnimationController`. Then inside the `initState() {...}` method call `createController()`. That's all.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_mixin/managed1.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass MyAnimatedWidget extends StatefulWidget {\n  const MyAnimatedWidget({super.key});\n\n  @override\n  _MyAnimatedWidgetState createState() => _MyAnimatedWidgetState();\n}\n\n// use AnimationMixin\nclass _MyAnimatedWidgetState extends State<MyAnimatedWidget>\n    with AnimationMixin {\n  late AnimationController sizeController; // declare custom AnimationController\n  late Animation<double> size;\n\n  @override\n  void initState() {\n    sizeController = createController(); // create custom AnimationController\n    size = Tween<double>(begin: 0.0, end: 200.0).animate(sizeController);\n    sizeController.play(duration: const Duration(seconds: 5));\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(width: size.value, height: size.value, color: Colors.red);\n  }\n}\n```\n<!-- // end of #code -->\n\n#### Create many managed AnimationController\n\nAnicoto allows you to have as many AnimationController you want. Behind the scenes it keeps track of them.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_mixin/managed2.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass MyAnimatedWidget extends StatefulWidget {\n  const MyAnimatedWidget({super.key});\n\n  @override\n  _MyAnimatedWidgetState createState() => _MyAnimatedWidgetState();\n}\n\nclass _MyAnimatedWidgetState extends State<MyAnimatedWidget>\n    with AnimationMixin {\n  late AnimationController widthController;\n  late AnimationController heightController;\n  late AnimationController colorController;\n\n  late Animation<double> width;\n  late Animation<double> height;\n  late Animation<Color?> color;\n\n  @override\n  void initState() {\n    widthController = createController()\n      ..mirror(duration: const Duration(seconds: 5));\n    heightController = createController()\n      ..mirror(duration: const Duration(seconds: 3));\n    colorController = createController()\n      ..mirror(duration: const Duration(milliseconds: 1500));\n\n    width = Tween<double>(begin: 100.0, end: 200.0).animate(widthController);\n    height = Tween<double>(begin: 100.0, end: 200.0).animate(heightController);\n    color = ColorTween(begin: Colors.red, end: Colors.blue)\n        .animate(colorController);\n\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n        width: width.value, height: height.value, color: color.value);\n  }\n}\n```\n<!-- // end of #code -->\n\n&nbsp;\n\n## Shortcuts for AnimationController\n\nThe extension for `AnimationController` adds four convenience functions:\n\n- `controller.play()` plays animation and stops at the end.\n\n- `controller.playReverse()` plays animation reversed and stops at the start.\n\n- `controller.loop()` repetitively plays the animation from start to the end.\n\n- `controller.mirror()` repetitively plays the animation forward, then backwards, then forward and so on.\n\nEach of these methods take an optional `duration` named parameter to configure your animation action within one line of code.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_controller_extension/shortcuts.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvoid someFunction(AnimationController controller) {\n  controller.play(duration: const Duration(milliseconds: 1500));\n  controller.playReverse(duration: const Duration(milliseconds: 1500));\n  controller.loop(duration: const Duration(milliseconds: 1500));\n  controller.mirror(duration: const Duration(milliseconds: 1500));\n}\n```\n<!-- // end of #code -->\n\nYou can use these methods nicely along the already existing `controller.stop()` and `controller.reset()` methods.\n\n&nbsp;\n\n## Animation Developer Tools\n\nThe Animation Developer Tools allow you to create or review your animation step by step.\n\n### Basic usage pattern\n\nWrap your UI with the `AnimationDeveloperTools` widget.\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_developer_tools/intro.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nclass MyPage extends StatelessWidget {\n  const MyPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      // put DevTools very high in the widget hierarchy\n      body: AnimationDeveloperTools(\n        child: Container(), // your UI\n      ),\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\nEnable developer mode on the animation you want to debug.\n\n#### Using Animation Builder widgets\n\nThe Animation Builder widgets\n\n- `PlayAnimationBuilder`\n- `LoopAnimationBuilder`\n- `MirrorAnimationBuilder`\n- `CustomAnimationBuilder`\n\nhave a constructor parameter `developerMode` that can be set to `true`. It will connect to the closest `AnimationDeveloperTools` widget.\n\n**Example**\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_developer_tools/animation_builder.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvoid main() => runApp(const MaterialApp(home: Scaffold(body: MyPage())));\n\nclass MyPage extends StatelessWidget {\n  const MyPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return SafeArea(\n      // put DevTools very high in the widget hierarchy\n      child: AnimationDeveloperTools(\n        child: Center(\n          child: PlayAnimationBuilder<double>(\n            tween: Tween<double>(begin: 0.0, end: 100.0),\n            duration: const Duration(seconds: 1),\n            developerMode: true, // enable developer mode\n            builder: (context, value, child) {\n              return Container(\n                width: value,\n                height: value,\n                color: Colors.blue,\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n```\n<!-- // end of #code -->\n\n![devtools](https://github.com/felixblaschke/simple_animations/raw/main/example/img/d1.gif)\n\n#### Using Animation Mixin\n\nIf your stateful widget uses `AnimationMixin` to manage your instances of `AnimationController` you can call `enableDeveloperMode()` to connect to the clostest `AnimationDeveloperMode` widget.\n\n**Example**\n\n<!-- #code example/sa_flutter_app/lib/readme/animation_developer_tools/animation_mixin.dart -->\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:simple_animations/simple_animations.dart';\n\nvoid main() => runApp(const MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Scaffold(\n        body: SafeArea(\n          // put DevTools very high in the widget hierarchy\n          child: AnimationDeveloperTools(\n            child: Center(\n              child: MyAnimation(),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass MyAnimation extends StatefulWidget {\n  const MyAnimation({super.key});\n\n  @override\n  _MyAnimationState createState() => _MyAnimationState();\n}\n\nclass _MyAnimationState extends State<MyAnimation> with AnimationMixin {\n  late Animation<double> size;\n\n  @override\n  void initState() {\n    size = Tween<double>(begin: 0.0, end: 100.0).animate(controller);\n    enableDeveloperMode(controller); // enable developer mode\n    controller.forward();\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(width: size.value, height: size.value, color: Colors.blue);\n  }\n}\n```\n<!-- // end of #code -->\n\n### Features and tricks\n\nThe Animation Developer Tools come with several features that simplify your developer life:\n\n- Regardless of the real animation, with developer mode activated the animation will always loop.\n- You can use Flutter hot reloading for editing and debugging if your tween is created stateless.\n- Use the slider to edit the animated scene while pausing.\n- You can slow down the animation to look out for certain details.\n- Use the interval buttons to focus on a time span of the animation."
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.431640625,
          "content": "# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at https://dart.dev/lints.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n    library_private_types_in_public_api: false\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 5.69921875,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  async:\n    dependency: transitive\n    description:\n      name: async\n      sha256: \"947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.11.0\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      sha256: \"6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  characters:\n    dependency: transitive\n    description:\n      name: characters\n      sha256: \"04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  clock:\n    dependency: transitive\n    description:\n      name: clock\n      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.1\"\n  collection:\n    dependency: transitive\n    description:\n      name: collection\n      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.18.0\"\n  fake_async:\n    dependency: transitive\n    description:\n      name: fake_async\n      sha256: \"511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.1\"\n  flutter:\n    dependency: \"direct main\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  flutter_lints:\n    dependency: \"direct dev\"\n    description:\n      name: flutter_lints\n      sha256: \"3f41d009ba7172d5ff9be5f6e6e6abb4300e263aab8866d2a0842ed2a70f8f0c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  flutter_test:\n    dependency: \"direct dev\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  leak_tracker:\n    dependency: transitive\n    description:\n      name: leak_tracker\n      sha256: \"3f87a60e8c63aecc975dda1ceedbc8f24de75f09e4856ea27daf8958f2f0ce05\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"10.0.5\"\n  leak_tracker_flutter_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_flutter_testing\n      sha256: \"932549fb305594d82d7183ecd9fa93463e9914e1b67cacc34bc40906594a1806\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.5\"\n  leak_tracker_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_testing\n      sha256: \"6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.1\"\n  lints:\n    dependency: transitive\n    description:\n      name: lints\n      sha256: \"976c774dd944a42e83e2467f4cc670daef7eed6295b10b36ae8c85bcbf828235\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.12.16+1\"\n  material_color_utilities:\n    dependency: transitive\n    description:\n      name: material_color_utilities\n      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.11.1\"\n  meta:\n    dependency: transitive\n    description:\n      name: meta\n      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.15.0\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      sha256: \"087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.9.0\"\n  sky_engine:\n    dependency: transitive\n    description: flutter\n    source: sdk\n    version: \"0.0.99\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      sha256: \"53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.10.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      sha256: \"73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.11.1\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      sha256: \"556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.0\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      sha256: \"5b8a98dafc4d5c4c9c72d8b31ab2b23fc13422348d2997120294d3bac86b4ddb\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.2\"\n  vector_math:\n    dependency: transitive\n    description:\n      name: vector_math\n      sha256: \"80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.4\"\n  vm_service:\n    dependency: transitive\n    description:\n      name: vm_service\n      sha256: \"5c5f338a667b4c644744b661f309fb8080bb94b18a7e91ef1dbd343bed00ed6d\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"14.2.5\"\nsdks:\n  dart: \">=3.5.4 <4.0.0\"\n  flutter: \">=3.18.0-18.0.pre.54\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 1.5908203125,
          "content": "name: simple_animations\ndescription: Powerful package to create beautiful custom animations in no time.\nversion: 5.1.0\nhomepage: https://github.com/felixblaschke/simple_animations\n\nfunding: \n  - https://www.paypal.com/donate/?hosted_button_id=9H2FEXT6VCWJ4\n\nenvironment:\n  sdk: ^3.5.4\n  flutter: \">=1.17.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^4.0.0\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n# To add assets to your package, add an assets section, like this:\n# assets:\n#   - images/a_dot_burr.jpeg\n#   - images/a_dot_ham.jpeg\n#\n# For details regarding assets in packages, see\n# https://flutter.dev/to/asset-from-package\n#\n# An image asset can refer to one or more resolution-specific \"variants\", see\n# https://flutter.dev/to/resolution-aware-images\n\n# To add custom fonts to your package, add a fonts section here,\n# in this \"flutter\" section. Each entry in this list should have a\n# \"family\" key with the font family name, and a \"fonts\" key with a\n# list giving the asset and other descriptors for the font. For\n# example:\n# fonts:\n#   - family: Schyler\n#     fonts:\n#       - asset: fonts/Schyler-Regular.ttf\n#       - asset: fonts/Schyler-Italic.ttf\n#         style: italic\n#   - family: Trajan Pro\n#     fonts:\n#       - asset: fonts/TrajanPro.ttf\n#       - asset: fonts/TrajanPro_Bold.ttf\n#         weight: 700\n#\n# For details regarding fonts in packages, see\n# https://flutter.dev/to/font-from-package\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}