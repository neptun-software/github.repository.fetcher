{
  "metadata": {
    "timestamp": 1736710616210,
    "page": 260,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trevorwang/retrofit.dart",
      "stars": 1091,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 6.9658203125,
          "content": "{\n  \"projectName\": \"retrofit.dart\",\n  \"projectOwner\": \"trevorwang\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 100,\n  \"commit\": true,\n  \"commitConvention\": \"none\",\n  \"contributors\": [\n    {\n      \"login\": \"trevorwang\",\n      \"name\": \"Trevor Wang\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/121966?v=4\",\n      \"profile\": \"http://mings.in\",\n      \"contributions\": [\n        \"infra\",\n        \"test\",\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"devkabiir\",\n      \"name\": \"devkabiir\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/18462563?v=4\",\n      \"profile\": \"https://github.com/devkabiir\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"NicolaVerbeeck\",\n      \"name\": \"Nicola Verbeeck\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7778415?v=4\",\n      \"profile\": \"https://github.com/NicolaVerbeeck\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ipcjs\",\n      \"name\": \"ipcjs\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/4396864?v=4\",\n      \"profile\": \"https://ipcjs.top/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"jiechic\",\n      \"name\": \"戒尺\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/518977?v=4\",\n      \"profile\": \"https://github.com/jiechic\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"mohn93\",\n      \"name\": \"Mohaned Benmesken\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/11969733?v=4\",\n      \"profile\": \"https://github.com/mohn93\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"2ZeroSix\",\n      \"name\": \"Bogdan Lukin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/14371067?v=4\",\n      \"profile\": \"https://github.com/2ZeroSix\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"sooxt98\",\n      \"name\": \"sooxt98\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/13378059?v=4\",\n      \"profile\": \"https://sooxt98.space/\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"SBNTT\",\n      \"name\": \"SBNTT\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/20710321?v=4\",\n      \"profile\": \"https://github.com/SBNTT\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Czocher\",\n      \"name\": \"Paweł Czochański\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/95644?v=4\",\n      \"profile\": \"https://github.com/Czocher\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"bar4488\",\n      \"name\": \"bar4488\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/36762719?v=4\",\n      \"profile\": \"https://github.com/bar4488\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"via-guy\",\n      \"name\": \"via-guy\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/74960121?v=4\",\n      \"profile\": \"https://github.com/via-guy\",\n      \"contributions\": [\n        \"code\",\n        \"test\",\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"martinellimarco\",\n      \"name\": \"Marco Martinelli\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6640057?v=4\",\n      \"profile\": \"https://github.com/martinellimarco\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"LeonColt\",\n      \"name\": \"LeonColt\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/34907762?v=4\",\n      \"profile\": \"https://github.com/LeonColt\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"alexaf2000\",\n      \"name\": \"Alex A.F.\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/37296203?v=4\",\n      \"profile\": \"https://github.com/alexaf2000\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"woprandi\",\n      \"name\": \"William Oprandi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1449422?v=4\",\n      \"profile\": \"https://github.com/woprandi\",\n      \"contributions\": [\n        \"code\",\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"Brazol\",\n      \"name\": \"Maciej Brażewicz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5622717?v=4\",\n      \"profile\": \"https://github.com/Brazol\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"lyqiai\",\n      \"name\": \"river\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/22760358?v=4\",\n      \"profile\": \"https://github.com/lyqiai\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"srburton\",\n      \"name\": \"Renato Burton\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/15394508?v=4\",\n      \"profile\": \"https://github.com/srburton\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"teddichiiwa\",\n      \"name\": \"Teddy\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/32252270?v=4\",\n      \"profile\": \"https://github.com/teddichiiwa\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"ignacioberdinas\",\n      \"name\": \"Ignacio Berdiñas\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/19497384?v=4\",\n      \"profile\": \"https://github.com/ignacioberdinas\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"themadmrj\",\n      \"name\": \"themadmrj\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/11475495?v=4\",\n      \"profile\": \"https://github.com/themadmrj\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"stewemetal\",\n      \"name\": \"István Juhos\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5860632?v=4\",\n      \"profile\": \"https://github.com/stewemetal\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"Akash98Sky\",\n      \"name\": \"Akash Mondal\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/37451227?v=4\",\n      \"profile\": \"https://github.com/Akash98Sky\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"JasonHezz\",\n      \"name\": \"JasonHezz\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/15358765?v=4\",\n      \"profile\": \"https://github.com/JasonHezz\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"gfranks\",\n      \"name\": \"Garrett Franks\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2064984?v=4\",\n      \"profile\": \"https://github.com/gfranks\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"xoltawn\",\n      \"name\": \"xoltawn\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/86798241?v=4\",\n      \"profile\": \"https://github.com/xoltawn\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"FaKenKoala\",\n      \"name\": \"FaKenKoala\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/60820399?v=4\",\n      \"profile\": \"https://github.com/FaKenKoala\",\n      \"contributions\": [\n        \"code\",\n        \"example\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7,\n  \"skipCi\": true\n}\n"
        },
        {
          "name": ".commitlintrc.yml",
          "type": "blob",
          "size": 0.0458984375,
          "content": "extends:\n  - \"@commitlint/config-conventional\"\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.224609375,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = false\ninsert_final_newline = false"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.759765625,
          "content": "# See https://www.dartlang.org/guides/libraries/private-files\n\n# Files and directories created by pub\n.dart_tool/\n.packages\nbuild/\n# If you're building an application, you may want to check-in your pubspec.lock\npubspec.lock\n\n# Directory created by dartdoc\n# If you don't generate documentation locally you can remove this line.\ndoc/api/\n\n# Reflectable\nexample/lib/json_mapper_example.reflectable.dart\n\n# Avoid committing generated Javascript files:\n*.dart.js\n*.info.json      # Produced by the --dump-info flag.\n*.js             # When generated by dart2js. Don't specify *.js if your\n                 # project includes source files written in JavaScript.\n*.js_\n*.js.deps\n*.js.map\nnode_modules\n.DS_Store\n.idea\n.classpath\n.project\n.settings\nyarn.lock\n*.reflectable.dart\n*.g.dart"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.6689453125,
          "content": "# Created with package:mono_repo v2.0.0\nlanguage: dart\n\njobs:\n  include:\n    - stage: analyze\n      name: 'SDK: dev; PKG: all; TASKS: `dartanalyzer .`'\n      env: PKGS=\"example retrofit generator\"\n      script: ./tool/travis.sh dartanalyzer\n    # - stage: formatting\n    # name: \"Checking code style\"\n    # scripts: dartfmt . -n --set-exit-if-changed --fix\n    - stage: test\n      name: 'Test generator'\n      script: |\n        cd generator \n        pub get\n        pub run test\n\nstages:\n  - analyze\n  - formatting\n  - test\n\n# Only building master means that we don't run two builds for each pull request.\nbranches:\n  only:\n    - master\n\ncache:\n  directories:\n    - '$HOME/.pub-cache'\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.271484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at trevor.wang@qq.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2019 Trevor Wang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.4580078125,
          "content": "# Retrofit For Dart\n\n[![retrofit](https://img.shields.io/pub/v/retrofit?label=retrofit&style=flat-square)](https://pub.dartlang.org/packages/retrofit)\n[![retrofit_generator](https://img.shields.io/pub/v/retrofit_generator?label=retrofit_generator&style=flat-square)](https://pub.dartlang.org/packages/retrofit_generator)\n![Pub Likes](https://img.shields.io/pub/likes/retrofit)\n[![Testing](https://github.com/trevorwang/retrofit.dart/actions/workflows/test.yml/badge.svg)](https://github.com/trevorwang/retrofit.dart/actions/workflows/test.yml)\n\nretrofit.dart is a type conversion [dio](https://github.com/flutterchina/dio/) client generator using [source_gen](https://github.com/dart-lang/source_gen) and inspired by [Chopper](https://github.com/lejard-h/chopper) and [Retrofit](https://github.com/square/retrofit).\n\n## Usage\n\n### Generator\n\nAdd the generator to your dev dependencies\n\n```yaml\ndependencies:\n  retrofit: ^4.4.0\n  logger: ^2.4.0  # for logging purpose\n  json_annotation: ^4.9.0\n\ndev_dependencies:\n  retrofit_generator: '>=8.0.0 <10.0.0' # for Dart 3.3 use ^9.0.0\n  build_runner: ^2.3.3\n  json_serializable: ^6.8.0\n```\n\n### Define and Generate your API\n\n```dart\nimport 'package:dio/dio.dart';\nimport 'package:json_annotation/json_annotation.dart';\nimport 'package:retrofit/retrofit.dart';\n\npart 'example.g.dart';\n\n@RestApi(baseUrl: 'https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1/')\nabstract class RestClient {\n  factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n\n  @GET('/tasks')\n  Future<List<Task>> getTasks();\n}\n\n@JsonSerializable()\nclass Task {\n  const Task({this.id, this.name, this.avatar, this.createdAt});\n\n  factory Task.fromJson(Map<String, dynamic> json) => _$TaskFromJson(json);\n\n  final String? id;\n  final String? name;\n  final String? avatar;\n  final String? createdAt;\n\n  Map<String, dynamic> toJson() => _$TaskToJson(this);\n}\n```\n\nthen run the generator\n\n```sh\n# dart\ndart pub run build_runner build\n```\n\n### Use it\n\n```dart\nimport 'package:dio/dio.dart';\nimport 'package:logger/logger.dart';\nimport 'package:retrofit_example/example.dart';\n\nfinal logger = Logger();\n\nvoid main(List<String> args) {\n  final dio = Dio(); // Provide a dio instance\n  dio.options.headers['Demo-Header'] = 'demo header'; // config your dio headers globally\n  final client = RestClient(dio);\n\n  client.getTasks().then((it) => logger.i(it));\n}\n```\n\n## More\n\n### Types\n\n#### Types conversion\n\n> Before you use the type conversion, please make sure that a ` factory Task.fromJson(Map<String, dynamic> json)` must be provided for each model class. `json_serializable` is recommended to be used as the serialization tool.\n\n```dart\n@GET('/tasks')\nFuture<List<Task>> getTasks();\n\n@JsonSerializable()\nclass Task {\n  const Task({required this.name});\n\n  factory Task.fromJson(Map<String, dynamic> json) => _$TaskFromJson(json);\n\n  final String name;\n}\n```\n\n#### Typed extras\nIf you want to add static extra to all requests.\n\n```dart\nclass MetaData extends TypedExtras {\n  final String id;\n  final String region;\n\n  const MetaData({required this.id, required region});\n}\n\n@MetaData(\n  id: '1234',\n  region: 'ng',\n)\n@GET(\"/get\")\nFuture<String> fetchData();\n\n```\n\n### HTTP Methods\n\nThe HTTP methods in the below sample are supported.\n\n```dart\n  @GET('/tasks/{id}')\n  Future<Task> getTask(@Path('id') String id);\n  \n  @GET('/demo')\n  Future<String> queries(@Queries() Map<String, dynamic> queries);\n  \n  @GET('https://httpbin.org/get')\n  Future<String> namedExample(\n      @Query('apikey') String apiKey,\n      @Query('scope') String scope,\n      @Query('type') String type,\n      @Query('from') int from,\n  );\n  \n  @PATCH('/tasks/{id}')\n  Future<Task> updateTaskPart(\n    @Path() String id, \n    @Body() Map<String, dynamic> map,\n  );\n  \n  @PUT('/tasks/{id}')\n  Future<Task> updateTask(@Path() String id, @Body() Task task);\n  \n  @DELETE('/tasks/{id}')\n  Future<void> deleteTask(@Path() String id);\n  \n  @POST('/tasks')\n  Future<Task> createTask(@Body() Task task);\n  \n  @POST('http://httpbin.org/post')\n  Future<void> createNewTaskFromFile(@Part() File file);\n  \n  @POST('http://httpbin.org/post')\n  @FormUrlEncoded()\n  Future<String> postUrlEncodedFormData(@Field() String hello);\n```\n\n### Get original HTTP response\n\n```dart\n  @GET('/tasks/{id}')\n  Future<HttpResponse<Task>> getTask(@Path('id') String id);\n\n  @GET('/tasks')\n  Future<HttpResponse<List<Task>>> getTasks();\n```\n### HTTP Header\n\n* Add a HTTP header from the parameter of the method\n\n```dart\n  @GET('/tasks')\n  Future<Task> getTasks(@Header('Content-Type') String contentType);\n ```\n\n* Add static HTTP headers\n\n```dart\n  import 'package:dio/dio.dart' hide Headers;\n\n  // ...\n  \n  @GET('/tasks')\n  @Headers(<String, dynamic>{\n    'Content-Type': 'application/json',\n    'Custom-Header': 'Your header',\n  })\n  Future<Task> getTasks();\n```\n\n\n\n### Error Handling\n\n`catchError(Object)` should be used for capturing the exception and failed response. You can get the detailed response info from `DioError.response`.\n\n```dart\nclient.getTask('2').then((it) {\n  logger.i(it);\n}).catchError((obj) {\n  // non-200 error goes here.\n  switch (obj.runtimeType) {\n    case DioException:\n      // Here's the sample to get the failed response error code and message\n      final res = (obj as DioException).response;\n      logger.e('Got error : ${res.statusCode} -> ${res.statusMessage}');\n      break;\n  default:\n    break;\n  }\n});\n```\n\n### Relative API baseUrl\n\nIf you want to use a relative `baseUrl` value in the `RestApi` annotation of the `RestClient`, you need to specify a `baseUrl` in `dio.options.baseUrl`.\n\n```dart\n@RestApi(baseUrl: '/tasks')\nabstract class RestClient {\n  factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n\n  @GET('{id}')\n  Future<HttpResponse<Task>> getTask(@Path('id') String id);\n\n  @GET('')\n  Future<HttpResponse<List<Task>>> getTasks();\n}\n\ndio.options.baseUrl = 'https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1';\nfinal client = RestClient(dio);\n```\n\n### Call Adapter\n\nThis feature allows you to adapt the return type of a network call from one type to another.\n\nFor example:\nFuture<User> → Future<Result<User>>\n\nThis feature provides flexibility in handling API responses, enabling better integration with custom response wrappers or error handling libraries.\n\nThe CallAdapter takes the original return type R and transforms it into a new type T. This is particularly useful when working with response wrappers like Either, Result, or ApiResponse.\n\nBelow is an example using a custom CallAdapter with a Result wrapper:\n```dart\n  class MyCallAdapter<T> extends CallAdapter<Future<T>, Future<Result<T>>> {\n    @override\n    Future<Result<T>> adapt(Future<T> Function() call) async {\n      try {\n        final response = await call();\n        return Result<T>.ok(response);\n      } catch (e) {\n        return Result.err(e.toString());\n      }\n    }\n  }\n\n  @RestApi(callAdapter: MyCallAdapter)\n  abstract class RestClient {\n    factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n\n    @GET('/')\n    Future<Result<User>> getUser();\n  }\n```\n\n### Multiple endpoints support\n\nIf you want to use multiple endpoints to your `RestClient`, you should pass your base url when you initiate `RestClient`. Any value defined in `RestApi` will be ignored.\n\n```dart\n@RestApi(baseUrl: 'this url will be ignored if baseUrl is passed')\nabstract class RestClient {\n  factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n}\n\nfinal client = RestClient(dio, baseUrl: 'your base url');\n```\n\nIf you want to use the base url from `dio.option.baseUrl`, which has lowest priority, please don't pass any parameter to `RestApi` annotation and `RestClient`'s structure method.\n\n### Multithreading (Flutter only)\n\nIf you want to parse models on a separate thread, you can take advantage of the `compute` function, just like Dio does when converting String data responses into json objects.\n\nFor each model that you use you will need to define 2 top-level functions:\n```dart\nFutureOr<Task> deserializeTask(Map<String, dynamic> json);\nFutureOr<dynamic> serializeTask(Task object);\n```\n\nIf you want to handle lists of objects, either as return types or parameters, you should provide List counterparts:\n\n```dart\nFutureOr<List<Task>> deserializeTaskList(Map<String, dynamic> json);\nFutureOr<dynamic> serializeTaskList(List<Task> objects);\n```\n\nFinally, make sure you set your `@RestApi` to use the `Parser.FlutterCompute` parser:\n\n```dart\n@RestApi(parser: Parser.FlutterCompute)\n```\n\nE.g.\n```dart\n@RestApi(\n  baseUrl: 'https://5d42a6e2bc64f90014a56ca0.mockapi.io/api/v1/',\n  parser: Parser.FlutterCompute,\n)\nabstract class RestClient {\n  factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n\n  @GET('/task')\n  Future<Task> getTask();\n\n  @GET('/tasks')\n  Future<List<Task>> getTasks();\n\n  @POST('/task')\n  Future<void> updateTasks(Task task);\n\n  @POST('/tasks')\n  Future<void> updateTasks(List<Task> tasks);\n}\n\nTask deserializeTask(Map<String, dynamic> json) => Task.fromJson(json);\n\nList<Task> deserializeTaskList(List<Map<String, dynamic>> json) =>\n    json.map((e) => Task.fromJson(e)).toList();\n\nMap<String, dynamic> serializeTask(Task object) => object.toJson();\n\nList<Map<String, dynamic>> serializeTaskList(List<Task> objects) =>\n    objects.map((e) => e.toJson()).toList();\n```\n\nN.B.\nAvoid using Map values, otherwise multiple background isolates will be spawned to perform the computation, which is extremely intensive for Dart.\n\n```dart\nabstract class RestClient {\n  factory RestClient(Dio dio, {String? baseUrl}) = _RestClient;\n\n  // BAD\n  @GET('/tasks')\n  Future<Map<String, Task>> getTasks();\n\n  @POST('/tasks')\n  Future<void> updateTasks(Map<String, Task> tasks);\n\n  // GOOD\n  @GET('/tasks_names')\n  Future<TaskNames> getTaskNames();\n\n  @POST('/tasks_names')\n  Future<void> updateTasks(TaskNames tasks);\n}\n\nTaskNames deserializeTaskNames(Map<String, dynamic> json) =>\n    TaskNames.fromJson(json);\n\n@JsonSerializable\nclass TaskNames {\n  const TaskNames({required this.taskNames});\n\n  final Map<String, Task> taskNames;\n\n  factory TaskNames.fromJson(Map<String, dynamic> json) =>\n      _$TaskNamesFromJson(json);\n}\n```\n\n### Hide generated files\n\nFor the project not to be confused with the files generated by the retrofit you can hide them.\n\n##### Android studio\n\n`File -> Settings -> Editor -> File Types`\n\nAdd \"ignore files and folders\"\n\n`*.g.dart`\n\n## Videos\n- [Flutter Rest API - Simplifying Make API Call Using Retrofit](https://www.youtube.com/watch?v=zjNhlmue5Os)\n- [Flutter retrofit implementation | Flutter Network Calls | Source Code In Desc | flutter coding](https://www.youtube.com/watch?v=OZF9mqKbi3k)\n- [Flutter retrofit api call | GET | amplifyabhi ](https://www.youtube.com/watch?v=ARIy5OSIspQ)\n- [Flutter - Retrofit Setup & Explanation | Clean Architecture | In Hindi](https://www.youtube.com/watch?v=e6JV-t9Yo3U)\n- [How to call API using retrofit in flutter application and JSON parsing ?](https://www.youtube.com/watch?v=UDhRvP1Iafc)\n- [API Integration in Flutter using Retrofit | Flutter Package Tutorial](https://www.youtube.com/watch?v=upX9T_ciWz4&t=39s)\n- [Build A News App - Make Request To API Using Retrofit | PART 4 - Flutter Clean Architecture](https://www.youtube.com/watch?v=kjMoW4cs2kU)\n\n\n## Credits\n\n- [JetBrains](https://www.jetbrains.com/). Thanks for providing the great IDE tools.\n\n\n## Contributors ✨\n\nThanks goes to these wonderful people:\n\n<a href=\"https://github.com/trevorwang/retrofit.dart/graphs/contributors\"><img src=\"https://opencollective.com/retrofitdart/contributors.svg?width=890&button=false\" /></a>\n\nContributions of any kind welcome!\n## Activities\n\n![Alt](https://repobeats.axiom.co/api/embed/76948dfe0698cce4724567ccbf38139823939350.svg \"Repobeats analytics image\")\n"
        },
        {
          "name": "_config.yml",
          "type": "blob",
          "size": 0.025390625,
          "content": "theme: jekyll-theme-cayman"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_dartmapper",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_protobuf",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_relative_base_url",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter_example",
          "type": "tree",
          "content": null
        },
        {
          "name": "generator",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.578125,
          "content": "{\n  \"name\": \"retrofit.dart\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"repository\": \"git@github.com:trevorwang/retrofit.dart.git\",\n  \"author\": \"Trevor Wang <trevor.wang@qq.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^8.0.0\",\n    \"@commitlint/config-conventional\": \"^8.0.0\",\n    \"all-contributors-cli\": \"^6.20.0\",\n    \"husky\": \"^4.2.3\"\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  },\n  \"scripts\": {\n    \"contributors:add\": \"all-contributors add\",\n    \"contributors:generate\": \"all-contributors generate\"\n  }\n}"
        },
        {
          "name": "retrofit",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}