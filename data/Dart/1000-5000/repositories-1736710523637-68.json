{
  "metadata": {
    "timestamp": 1736710523637,
    "page": 68,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "serverpod/serverpod",
      "stars": 2615,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.791015625,
          "content": "# Files and directories created by pub\n.packages\n.pub/\nbuild/\n# If you're building an application, you may want to check-in your pubspec.lock\npubspec.lock\n\n# Directory created by dartdoc\n# If you don't generate documentation locally you can remove this line.\ndoc/api/\n\n*.iml\n*.ipr\n*.iws\n\n**/pubspec_overrides.yaml\n\n\n.DS_Store\n.atom/\n.idea\n.vscode/\n.vscode-test/\n.packages\n.pub/\n.fvm/\nbuild/\nios/.generated/\npubspec.lock\n.flutter-plugins\n.flutter-plugins-dependencies\n.dart_tool\ngoogle_client_secret.json\nfirebase_service_account_key.json\nfirebase_options.dart\ntests/temp\ntemplates/serverpod_templates/projectname_flutter/android\ntemplates/serverpod_templates/projectname_flutter/ios\ntemplates/serverpod_templates/projectname_flutter/macos\ntemplates/serverpod_templates/projectname_server/deploy/gcp/.terraform\n"
        },
        {
          "name": ".vaunt",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 29.4619140625,
          "content": "## 2.3.1\n- fix: Resolved an issue where database exceptions failed to generate informative `toString` messages.\n- fix: Improves performance of HTTP request body parsing for both endpoints and the web server.\n\n## 2.3.0\n- feat: Adds support for transaction isolation levels.\n- feat: Adds typed interface for transaction savepoints.\n- feat: Adds support for endpoint definition placement anywhere in server's `src` directory.\n- feat: Adds support for model definitions placement anywhere in server's `src` directory.\n- fix: Adds additional diagnostic information to database query exceptions.\n- fix: Resolved an issue that caused premature closure of method stream websocket connections.\n- fix: Improves message transmission guarantee in method streams.\n\n## 2.2.2\n - fix: Fixes possible import issue in generated code when the same model name is used in different modules.\n\n## 2.2.1\n - fix: Fixes an issue where invalid Dart import paths would be generated on Windows.\n\n## 2.2.0\n - feat: Improves Serverpod startup and lifecycle events logging.\n - feat: Adds full support for testing framework.\n - feat: Adds configuration for controlling log output location.\n - feat: Adds support for signing out a user from a single device.\n - feat: EXPERIMENTAL. Adds support for inheritance in models.\n - feat: EXPERIMENTAL. Adds support for sealed classes in models.\n - fix: Only reports invalid Dart endpoint definition files when using `--watch`.\n - fix: Uses direct model import when protocol files are analyzed.\n - fix: Removes redundant file collection from code generation.\n - fix: Fixes error in `serverpod generate` when a `Session` is set as a named required parameter.\n - fix: Responds with 400 when throwing serializable exceptions.\n - fix: Correctly removes account requests after an account is created (auth module).\n - fix: Passes `String` instead of `Error` object to logger in `session.close`.\n - fix: Replaces `null` assert with error check in `WebWidget`.\n\n## 2.1.5\n - feat: EXPERIMENTAL. Adds testing framework. [docs](https://docs.serverpod.dev/next/concepts/testing/get-started)\n - fix: Correctly handles method and endpoint streams for modules.\n - fix: Correctly handles errors in method streams.\n\n## 2.1.4\n - feat: Adds detailed reporting for schema mismatches when checking database consistency.\n - fix: Takes current transaction into account for include queries.\n - fix: Loads passwords from env variables even if the `passwords.yaml` file doesn't exist.\n - fix: Corrects type mismatch in `onTimeout` callback for cancelled subscriptions in `MethodStreamManager.closeAllStreams` method.\n - fix: Correctly returns HTTP 400 error code if parameters passed to Serverpod are incorrect.\n\n## 2.1.3\n - fix: Includes Dockerfile for Serverpod Mini projects.\n\n## 2.1.2\n - fix: Supports updating full user name in auth module.\n - fix: Adds missing transaction parameter in `deleteWhere` query.\n - fix: Correctly preserves non-persisted fields during database insert and update operations.\n - fix: Allows event listeners to remove themselves inside their handler.\n - fix: Correctly checks settings before letting a user change name or image in auth module.\n\n## 2.1.1\n - fix: Posts revoked authentication events locally if Redis is disabled.\n - fix: Uses `dynamic` type for `fromJson` parameter in custom class serialization.\n\n## 2.1.0\n - feat: Adds DevTools extension.\n - feat: Adds support for `Stream` as parameters and return type in endpoint methods.\n - feat: Adds stream subscriptions to message central.\n - feat: Adds support for `willClose` listener on `Session`.\n - feat: Adds support for default values in model files (types supported are `String`, `int`, `double`, `bool`, `DateTime`, `UuidValue`, `Duration`, enums)\n - feat: Adds support for WASM compiled web apps.\n - feat: Endpoint methods with `@Deprecated` annotation are now also annotated in the client.\n - feat: Allows custom password hash generator in `AuthConfig`.\n - feat: Allows rewrite rule in root path in static web directories.\n - feat: Improves error handling in `SignInWithGoogle` by rethrowing exceptions.\n - feat: Adds support for nullable types in `encodeWithType` and `decodeWithType`.\n - feat: Adds `Uuid` identifier to sessions.\n - feat: Supports configuration through environment variables instead of yaml.\n - feat: Models can now be created without fields.\n - feat: Adds ability to register custom environment variables to loaded as passwords.\n - feat: Adds ability to modify `maxFileSize` and expiration time for GCP and AWS buckets.\n - feat: Moves the auth key from the body of the request to the HTTP header in endpoint methods.\n - feat: When sending a HTTP 400 Bad Request error message to the client, an error message may now be included in the client side exception.\n - fix: Allows Serverpod defined models to be encoded and decoded with type.\n - fix: Allows AWS deployments to update Dart version.\n - fix: Fixes top error handling on server's request handler to ensure proper error boundary.\n - fix: Fixes `copyWith` method for nested `List` and `Map` in models.\n - fix: Fixes Dart version and other issues in AWS deployment templates.\n - fix: Improved error message if there are missing tables.\n - fix: Better error message if an error occurs when parsing the config files in CLI.\n - fix: Adds validation of custom class names to look for potential collisions.\n - fix: Only considers positional `Session` parameter when validating endpoint method.\n - fix: Updates example documentation. \n - fix: Before a session is closed, all logging is now awaited.\n - fix: Adds new `WebCallSession` for Relic.\n - fix: Correctly verifies `iss` value for all possible domains in Sign in with Google.\n - fix: Add `methodName` and `endpointName` to base session class.\n - fix: Handles malformed web server URI parameters more gracefully.\n - fix: Uses `text` as `KeyboardType` for validation code in `SignInWithEmailDialog`.\n - fix: Correctly orders logs in Insights.\n - fix: Correctly strips data in serialization of `List` and `Map`.\n - fix: Starts database pool manager on Serverpod instance creation.\n - fix: Adds mechanism for awaiting pending future calls on shutdown.\n - fix: Improvements to websocket lifecycle.\n - fix: Registers cloud storage endpoint for any `storageId` with `db` storage.\n - fix: Adds logging for when when uploads to buckets fail.\n - fix: Removes redundant and non-prefixed `serverpod_serialization` import.\n - fix: Sets the default authentication handler even when the database is disabled.\n - chore: Updates dependencies.\n\n## 2.0.2\n- fix: Conditionally imports `HttpStatus` to improve compatibility.\n- fix: Improve `encodeForProtocol` method for `List` and `Map` input object types.\n\n## 2.0.1\n- fix: Writes websocket errors to stderr.\n- fix: Adds missing web socket connection notification on stream closed.\n- fix: Sign in with Email dialog can toggle visibility of passwords.\n- fix: Allows usage of user related Google API calls in `onUserCreated` callback.\n- fix: Disposes streaming connection listener when disposing handler.\n- fix: Only notifies listeners when streaming connection status changes.\n- fix: Adds ready check for websocket channel.\n- fix: Handles bad websocket upgrade requests.\n- fix: Makes sign in buttons customizable.\n- fix: Exposes getter for `Session` `authenticationKey`.\n- fix: `postMessage` in messages now returns `true` if successful.\n- fix: Improved Firebase login widget.\n- fix: Adds support for inserting models with only an `id` field.\n- fix: Throws exception if required fields are missing when parsing config files.\n- fix: Adds explicit exception types for client side exceptions.\n- fix: Correctly sets offset and length when encoding `ByteData` for database.\n- fix: Removes endpoint to validate validation code.\n- fix: Replaces asserts in auth module with throws and logs.\n- fix: Changes default values in auth config.\n- fix: Removes password reset verification code on usage attempt.\n- fix: Stops web server when shutdown method is called.\n- chore: Removes dependency to unsupported `firebase_admin` package.\n- chore: Bumps minimum Dart version to 3.2.0.\n- chore: Updates dependencies.\n\n## 2.0.0\n- fix: BREAKING. Database delete methods now return removed objects.\n- fix: BREAKING. Removes automatic redirect from Relic.\n- fix: BREAKING. Removes `SerializationManager` as a parameter from `fromJson` factory constructor.\n- fix: BREAKING. Remove allToJson method.\n- fix: BREAKING. Makes user name nullable in `UserInfo`.\n- fix: BREAKING. Removes deprecated methods.\n- fix: BREAKING. Introduces `DatabaseException`.\n- fix: BREAKING. Introduces new types for database result sets.\n- fix: BREAKING. Updates transaction interface in database.\n- fix: BREAKING. Changes `SerializableEntity` mixin into `SerializableModel` interface.\n- fix: BREAKING. Removes support for implicit string to expression conversion.\n- fix: BREAKING. Marks deprecated yaml keywords as `isRemoved`.\n- fix: BREAKING. Move authentication implementaqtions from core to auth module.\n- fix: BREAKING. Removes `customConstructor` map from protocol class.\n- chore: BREAKING. Updates Postgres library to new major version.\n- feat: Adds parameter arguments to unsafe database queries.\n- feat: Adds `upgrade` command to Serverpod CLI.\n- feat: Introduces `CacheMissHandler` to improve cache API.\n- feat: Serverpod mini. Allows running Serverpod without the database.\n- feat: Makes email verification code length customizable.\n- feat: Adds client entitlements to MacOS after creating Flutter project.\n- fix: Improves server only field validation.\n- fix: Retrieves and removes future call entries in a single operation.\n- fix: toJson now includes all fields of Serverpod Models.\n- fix: Maps Dart `int` to `bigint` in database.\n- fix: Generates thumbnails in isolates for auth and chat module.\n- fix: Improved logging in CLI.\n- fix: Changes root file name in modules to follow Dart standards.\n- fix: Removes useless stack trace print from database connection check.\n- fix: Uses user scopes from `UserInfo` when authenticating in all providers.\n- fix: Prevents silencing deserialization exceptions for unmatched class types.\n- fix: Removes deprecated `generated` folder from Serverpod's upgrade template.\n- fix: Endpoint requests can now respond with 401 or 403 on failed authentication.\n- fix: Gives error when enpoint classes have naming conflicts.\n- fix: Run `_storeSharedPrefs` in `logOut` method to preserve state.\n- fix: Prints streaming message handler exceptions to console.\n- chore: Bumps minimum required Dart version to 3.1.\n- docs: Corrects spelling mistakes.\n- docs: Improved documentation for chat module.\n\n## 1.2.7\n- fix: Spelling fix in UserAuthentication.\n- fix: Prevents crash when web or template directory is missing (webserver).\n- fix: Removes server only fields from client protocol deserialization.\n- fix: Improved error messages in email authentication.\n- fix: Minor log fixes.\n- fix: Prevents generating empty endpoints variable when no endpoints are defined.\n- fix: Adds Docker support for x86 architectures.\n- fix: Adds timestamps to `generate --watch` command.\n- chore: Updates dependencies.\n\n## 1.2.6\n- feat: Adds missing callbacks when sending chat messages in chat module.\n- fix: Updates password hash algorithm for email authentication. [Security Advisories](https://github.com/serverpod/serverpod/security/advisories)\n- fix: Improves client certificate security. [Security Advisories](https://github.com/serverpod/serverpod/security/advisories)\n- fix: Fixes issue when passing empty set in `inSet` and `notInSet`.\n- fix: Fixes issue with incorrect line breaks in CLI.\n\n## 1.2.5\n- fix: Custom classes respect nullable configuration.\n\n## 1.2.4\n- fix: Sets the correct output path for generated files on Windows.\n- fix: Prevents VS Code extension from crashing on startup.\n- fix: Marks file handling database methods as deprecated.\n- fix: Correctly handles transaction parameters for delete method.\n- fix: Correctly resolves and validates registered custom classes used as types in model fields.\n\n## 1.2.3\n- fix: Correctly cleans up health check manager when shutting down server.\n- fix: Supports projects without a config generator file in CLI.\n- fix: Adds additional requirements to Insights setup.\n- fix: Removes unnecessary database connection creation in pool manager.\n- fix: CLI gives error if non-string value is used as parent keyword.\n\n## 1.2.2\n- fix: Makes it possible to create modules from templates in developer mode.\n- fix: Correctly marks nested enum types in the analyzer.\n- fix: Adds support for all Serverpod's supported types as keys in Maps.\n- fix: Restrict fields with scopes other than all to be nullable.\n- fix: Uses pubspec override instead of direct paths (to improve score on pub.dev).\n- fix: Less restrictive enum naming rules.\n- fix: Pins Dart and Busybox docker image versions (only for new projects).\n- fix: Deterministically truncate list aliases in database relations.\n- fix: Enables server to start without migrated database.\n- fix: Adds missing deprecation messages.\n- fix: Adds placeholder for old postgres file, to aid users who are following old tutorials.\n- fix: Resolves internal relation pointers in class representations.\n\n## 1.2.1\n- fix: Removes old generated folder from Dockerfile.\n- fix: Prevents database analyzer from crashing when missing table.\n- fix: Fixes issue with DevTools extension not being bundled with the `serverpod` package.\n- fix: Ignores all null fields in JSON map serialization.\n- fix: Improved error message if port is in use when starting server.\n- chore: Bumps `vm_service` version to support latest version.\n\n## 1.2.0\nThis is a summary of the new features in version 1.2.0. For the full list, please refer to the [commits](https://github.com/serverpod/serverpod/commits/main/) on Github. Instructions for updating from 1.1 of Serverpod is available in our documentation [here](https://docs.serverpod.dev/upgrading/upgrade-to-one-point-two).\n\n### Main new features and fixes\n- feat: Adds official support for Windows.\n- feat: Adds Visual Studio Code extension.\n- feat: Syntax highlighting in model files.\n- feat: Adds LSP server for analyzing model files.\n- feat: CLI automatically detects modules without the need to modify the generator file.\n- feat: Validates project names on `serverpod create`.\n- feat: Validates Serverpod packages and CLI version in `serverpod generate`.\n- feat: Prompts user to update Serverpod when running an old version of the CLI.\n- feat: Improves exit codes for CLI.\n- feat: Improvements to output from CLI, including different formats for different platforms and run-modes.\n- feat: Progress animations in CLI.\n- feat: Uses CommandRunner for CLI.\n- feat: Adds global `--verbose` and `--quiet` flags to control log level.\n- feat: Developer version of `serverpod create` now creates a project referring to the local version of Serverpod.\n- feat: Adds `copyWith` methods on all generated model files.\n- feat: Makes it possible to call endpoint methods by specifying the method name in the path.\n- feat: Makes return headers configurable for API and OPTION HTTP calls.\n- feat: Adds `fromYaml` constructor to `ServerpodConfig`.\n- feat: Adds reference to all modules in config.\n- feat: Makes HTTP timeout configurable.\n- feat: Improves compatibility for `serverpod create` by not running Docker through tooling.\n- fix: Makes endpoint classes public to enable Dart doc.\n- fix: Serializable exceptions now work with modules.\n- fix: Handles invalid return types when parsing endpoint methods.\n- fix: Fixes localhost on Android emulator.\n- fix: Use explicit version for all Serverpod packages.\n- fix: Uses git version of CLI in local tests.\n- fix: Fixes typos in `serverpod create` start instructions.\n- fix: Makes include class fields private.\n- fix: Adds flag to disable analytics reporting.\n- fix: Correctly resets error message state when and endpoint call was successful in template project.\n- fix: Closes session when protocol exception is thrown.\n- fix: Allows deeply nested `Map` and `List` in model files.\n- docs: Many improvements to API documentation.\n- chore: Updates to latest version of Flutter.\n- chore: Updates dependencies.\n- chore: Fixes deprecated methods.\n- chore: Makes Dart & Flutter version requirements consistent across packages.\n- chore: Adds serverpod_lints package.\n- ci: Now runs tests on multiple Flutter versions.\n- ci: Adds 2000 new tests.\n- ci: Unit tests are now running on Windows.\n\n### Database ORM\n- feat: Adds support for database migrations.\n- feat: Adds support for database repair migrations.\n- feat: Adds support for database relations.\n- feat: Support `IN`, `NOT IN`, `BETWEEN` and `NOT BETWEEN` query operations.\n- feat: Separates `Column` from `Expression` and harmonizes operations.\n- feat: Adds scoped database operations on generated models.\n- feat: Adds batch `insert`, `update`, and `delete` database operations.\n- feat: Exposes mapped results database query for public use.\n- feat: Adds `notLike` and `notILike` on database `String` expressions.\n- feat: Adds column selection to generated update method.\n- fix: Adds helpful error message if wrong table is used for `where` or `orderBy` expression.\n- fix: Change signature of `orderBy` and `orderByList` to callback taking a typed table.\n- fix: Removes old Postgres generator (replaced by migrations).\n\n### Model files (.spy.yaml) and code generation\n- feat: Dual pass parsing when validating model files.\n- feat: Validates field datatypes when running `serverpod generate`.\n- feat: Adds deprecation warnings to old model file keywords.\n- feat: Adds severity levels to reported errors in analyzer.\n- feat: Adds ability to toggle implicit key in stringified nodes.\n- feat: Reports severity level of errors.\n- feat: Adds `scope` and `persist` keywords to models.\n- feat: Adds `onDelete` and `onUpdate` bindings.\n- feat: Introduces reserved keywords in protocols.\n- feat: Adds serialization `byName` option for enums.\n- feat: Allow `.spy` file extension on model files (default is now `.spy.yaml`).\n- feat: Now loads model files from `src/lib/models` directory (old `protocol` directory is still supported for backward compatibility).\n- feat: Adds type validation to model files.\n- fix: Allows multiple uppercase characters in model class names.\n- fix: Protocol entities only allowed to be one type.\n- fix: Better error messages for `fields` in model files.\n- fix: Enforce index types to be a valid Postgres index type.\n- fix: Require all serialized enum values to be unique.\n- fix: Enforce that the `id` field isn't used for models that have a table defined.\n- fix: Enforce that `parent` keyword is only used if a model has an associated table.\n- fix: Report an error if the referenced parent table does not exists.\n- fix: Report an error if the table name in a model is not globally unique.\n- fix: Report an error if an index name is not globally unique.\n- fix: Report an error if a field is referenced twice in the same index.\n- fix: Allows complex types to be nullable.\n- fix: Parse the source location for all comma separated values in a field string.\n- fix: Restrict class names to now allow standard datatypes.\n- fix: Add automatic deprecated reporting of keys in analyzer.\n- fix: Set exit code to non-zero if generator finds issues.\n- fix: Correctly validate deeply nested datatypes in protocols.\n- fix: Enum value restrictions matches default linting in Dart.\n- fix: Less restrictive naming of model class names.\n- fix: Avoid generating code from broken protocol files.\n- fix: Deprecate `database` and `api` keywords.\n- fix: Stop generator from getting stuck on circular dependencies.\n- fix: Handle invalid YAML errors and report them.\n- fix: Only report duplicated and invalid negations once.\n- fix: Adds deep check of `DateTime` and `Uint8List` during deserialization.\n- fix: Deserialization of `DateTime` handles `null` explicitly.\n- fix: Only return valid entries from analyzer.\n- fix: Reintroduces generation of `protocol.yaml`.\n- fix: Use version command to check if a command exists.\n- fix: Prevents `generate --watch` from crashing.\n- fix: Prevents analyzer from crashing because of invalid Dart syntax.\n- fix: Prevents analyzer from crashing when an unsupported type is used.\n- fix: Avoid serializing null `Map` values.\n- fix: Restrict length of user defined Postgres identifier names.\n\n### Insights\n- feat: Insight endpoint methods for running queries and fetching full database configuration.\n- feat: Adds module name and Dart class names to table definitions in Insights protocol.\n- feat: Support for filtering bulk data fetched from Serverpod Insights.\n- feat: Adds API for accessing files local to the server.\n- fix: Include installed modules in all database definitions.\n\n### Auth module\n- feat: Improves auth example.\n- feat: Adds Sign in with Apple button.\n- feat: Adds Google Sign in on the web.\n- feat: Allows min and max password lengths to be configured in auth module.\n- feat: Allows label and icon to be customized for Sign in with Email button in auth.\n- fix: Removes dead code in auth module.\n- fix: Adds error message if email is already in use in auth.\n- fix: Properly close barrier when sign in is complete in auth.\n- fix: Corrects typo in sign in button.\n- fix: Require consent in order to generate refresh token for Google Signin.\n- fix: Throw descriptive error if Google auth secret is not loaded on the server.\n- fix: Typo in reset password example email.\n- fix: Enforces user blocked status on login.\n- fix: Allows Firebase phone auth and logs auth errors.\n\n### File storage\n- feat: Adds bulk file URL lookup method for file storage.\n\n### Chat module\n- fix: Adds missing return statement to require authentication.\n\n\n## 1.1.0\n- feat: Lightweight run mode and support for serverless platforms.\n- feat: Support for Google Cloud Platform deployments, including Terraform module.\n- feat: Adds serializable exceptions that can be passed from the server to the client.\n- feat: Adds `serverOnly` option to yaml-files, which is set to true will prevent the code to be generated for the client.\n- feat: Support for `UUID` in serialization.\n- feat: New supported static file types in Relic.\n- feat: Allows endpoints in sub directories.\n- feat: Support for GCP Cloud Storage.\n- feat: Support for connecting to Postgres through a UNIX socket.\n- feat: Adds database maintenance methods to Insights APIs (still experimental and API may change).\n- docs: Improved documentation.\n- fix: Better output on startup to aid in debugging connectivity issues.\n- fix: Prevents self referencing table to cause `serverpod generate` to hang.\n- fix: Adds email from Firebase to UserInfo in auth module.\n- fix: Don't print stack trace when Google signin disconnect fails.\n- fix: Return bool from `SessionManager.initialize()` to indicate if server was reached.\n- fix: Better recovery when parsing yaml-files.\n- chore: Migrates Firebase to new Flutter APIs.\n- chore: Updates dependencies.\n- chore: Refactors CLI tooling.\n\n## 1.0.1\n- Fixes import of generics in subdirectories.\n- Generated enums now respect their subdirectories.\n- Masks out passwords in email debug logging.\n- Replaces deprecated `docker-compose` with `docker compose`\n\n## 1.0.0\n- First stable release! :D\n- Fixes incorrectly set database index on health metrics.\n\n## 0.9.22\n- Adds support for snake case in fields.\n- Adds support for Duration data types in serialized objects.\n- Correctly sets CORS headers on failed calls.\n- Correctly imports generated files in subdirectories.\n- Allows documentation in yaml files.\n- Adds documentation for all generated code.\n- __Breaking changes__: Optimizes health metric data. Requires updates to two database tables. Detailed migration instructions here: [https://github.com/serverpod/serverpod/discussions/567](https://github.com/serverpod/serverpod/discussions/567)\n\n## 0.9.21\n- Supports sub directories for protocol class files.\n- Updates dependencies for auth module.\n- Nicer default web page for new projects.\n- Adds authentication example.\n- Correctly inserts ByteData into the database.\n- Much improved documentation for authentication.\n- __Breaking changes__: The `active` and `suspendedUntil` fields of `UserInfo` in the auth module has been removed. These fields need to be removed from the database for authentication to work.\n\n## 0.9.20\n- New serialization layer thanks to the extensive work of [Maximilian Fischer](https://github.com/fischerscode). This adds compatibility with custom serialization, such as [Freezed](https://pub.dev/packages/freezed). It also adds support for nested `Map`s and `List`s.\n- Updates examples.\n- More extensive test coverage.\n- Much improved documentation.\n- __Breaking changes__: This version updates the Serverpod protocol, which is now much more streamlined ahead of the 1.0 release. Unfortunately, it makes apps built with earlier versions incompatible with the latest version of Serverpod. More detailed migration instructions here: [https://github.com/serverpod/serverpod/discussions/401](https://github.com/serverpod/serverpod/discussions/401)\n\n## 0.9.19\n- Adds support for storing and reading binary ByteData to/from the database.\n\n## 0.9.18\n- Adds chat module to published packages.\n\n## 0.9.17\n- Reliability fix for FlutterConnectivityMonitor on web platform.\n\n## 0.9.16\n- Changes default log level to `info`.\n- Fixes issue with `serverpod create` command and updates template files with correct Flutter dependencies.\n\n## 0.9.15\n- Correctly sets 404 return code if no route is matched in Relic web server.\n- Templates are updated to use latest version of flutter_lints.\n- Adds connectivity monitor for streaming connections, which improves their reliability.\n\n## 0.9.14\n- Official support for Linux.\n- Improved support for Windows.\n- Adds tests for command line tools.\n\n## 0.9.13\n- Updates download path for template files.\n\n## 0.9.12\n- Adds `connecting` state to streaming connections.\n- Refactors streaming connection method names to be more consistent (backwards compatible with deprecations).\n- Adds `StreamingConnectionHandler` to automatically reconnect to the server when streaming connection is lost.\n- Automatically upgrades streaming connections when a user is signed it (`serverpod_auth` module).\n- Better error handling when providing invalid commands to the CLI.\n- Moves tests to `serverpod_test_server`.\n- Fixes error on `serverpod create --template module ...`\n- Hides errors produced by health checks.\n\n## 0.9.11\n- Adds support for Map structures in serialized objects.\n- Adds support for passing maps and lists as parameters to endpoint methods.\n- Much improved error checks in code generation.\n- Adds continuous code generation with `serverpod generate --watch`.\n- Removes the `serverpod run` command in favor for continuous generation.\n- Updates dependencies to latest versions.\n- Cleans up `serverpod help` command.\n\n## 0.9.10\n- Brings example code up-to-date with latest changes in Serverpod\n- Improved security for email sign in (limits sign in attempts based on a time period).\n- Dart docs are now copied to generated code, making it easier to document APIs.\n- Fixes issue with logging of queries in streaming sessions.\n- Adds support for Sign in with Firebase.\n- __Breaking changes__: Adds a new table for email sign in. Migration instructions here: [https://github.com/serverpod/serverpod/discussions/246](https://github.com/serverpod/serverpod/discussions/246)\n\n## 0.9.9\n- Improved Terraform scripts for AWS will use less resources. Most notably, only uses one load balancer which will fit within AWS free tier.\n- Adds web server to Terraform scripts.\n- Includes the Relic web server within the main Serverpod package.\n- Much improved logging and health checks.\n- Allows for monitoring of CPU and memory use.\n- Many smaller bug fixes and improvements.\n- __Breaking changes__: Updates config files and tables for logging. Migration instructions here: [https://github.com/serverpod/serverpod/discussions/190](https://github.com/serverpod/serverpod/discussions/190)\n\n## 0.9.8\n- Adds Terraform deployment scripts for AWS. Documentation here: [https://github.com/serverpod/serverpod/discussions/182](https://github.com/serverpod/serverpod/discussions/182)\n- __Breaking change__: Updates structure of config files. Migration instructions here: [https://github.com/serverpod/serverpod/discussions/182](https://github.com/serverpod/serverpod/discussions/182)\n- Moves Redis enabled option to config file and turns it off by default.\n- `serverpod run` no longer manages the Docker containers as it caused an issue with restarting the server.\n\n## 0.9.7\n- `serverpod create` and `serverpod generate` is now working on Windows. Tested on a fresh install of Windows 10.\n\n## 0.9.6\n- Improved, but still experimental support for Windows.\n- Fixes issue with error being thrown when internet connection is missing in CLI.\n- Correctly ignores overridden methods of Endpoints in code generation.\n- Makes using Redis optional.\n- Much improved [documentation](https://docs.serverpod.dev).\n\n## 0.9.5\n\n- Adds `serverpod run` command and improves `serverpod create`.\n- Continuous generation through `severpod run`.\n- Automatic restarts through `serverpod run`.\n\n## 0.9.4\n\n- Updates to documentation.\n- Makes it possible to cancel future calls.\n- Improves accuracy in future calls.\n- Saves/restores refresh tokens for Google sign in.\n\n## 0.9.3\n\n- Updates to documentation.\n\n## 0.9.2\n\n- Adds serverpod_auth module for authentication with email, Apple, and Google.\n\n## 0.9.1\n\n- Fixes broken images in documentation.\n\n## 0.9.0\n\n- Updates documentation and logos\n- Ready for 0.9 release!\n\n## 0.8.12\n\n- Updates default templates.\n\n## 0.8.11\n\n- Improved ORM.\n- Support for Docker.\n- Chat module.\n- Updated docs.\n\n## 0.8.10\n\n- Support for static file directories in Relic.\n- Adds logos (psd and pngs).\n- Adds example project.\n- Initial version of authentication module.\n- Cloud storage support.\n- Adds auth module\n\n## 0.8.6\n\n- Adds documentation.\n- Generates SQL files for creating database tables.\n\n## 0.8.5\n\n- Fixes compilation in broken serverpod_cli package\n\n## 0.8.4\n\n- Updates template files and fixes `serverpod create` command.\n- Adds CHANGELOG.md\n\n## 0.8.3\n\n- Initial working version.\n"
        },
        {
          "name": "CLA.md",
          "type": "blob",
          "size": 5.42578125,
          "content": "### Serverpod Individual Contributor License Agreement\n\nThank you for your interest in contributing to open source software projects (“Projects”) made available by Serverpod AB or its affiliates (“Serverpod”). This Individual Contributor License Agreement (“Agreement”) sets out the terms governing any source code, object code, bug fixes, configuration changes, tools, specifications, documentation, data, materials, feedback, information or other works of authorship that you submit or have submitted, in any form and in any manner, to Serverpod in respect of any of the Projects (collectively “Contributions”). If you have any questions respecting this Agreement, please contact opensource@serverpod.dev.\n\n\nYou agree that the following terms apply to all of your past, present and future Contributions. Except for the licenses granted in this Agreement, you retain all of your right, title and interest in and to your Contributions.\n\n\n**Copyright License.** You hereby grant, and agree to grant, to Serverpod a non-exclusive, perpetual, irrevocable, worldwide, fully-paid, royalty-free, transferable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, and distribute your Contributions and such derivative works, with the right to sublicense the foregoing rights through multiple tiers of sublicensees.\n\n\n**Patent License.** You hereby grant, and agree to grant, to Serverpod a non-exclusive, perpetual, irrevocable,\nworldwide, fully-paid, royalty-free, transferable patent license to make, have made, use, offer to sell, sell,\nimport, and otherwise transfer your Contributions, where such license applies only to those patent claims\nlicensable by you that are necessarily infringed by your Contributions alone or by combination of your\nContributions with the Project to which such Contributions were submitted, with the right to sublicense the\nforegoing rights through multiple tiers of sublicensees.\n\n\n**Moral Rights.** To the fullest extent permitted under applicable law, you hereby waive, and agree not to\nassert, all of your “moral rights” in or relating to your Contributions for the benefit of Serverpod, its assigns, and their respective direct and indirect sublicensees.\n\n\n**Third Party Content/Rights.** If your Contribution includes or is based on any source code, object code, bug\nfixes, configuration changes, tools, specifications, documentation, data, materials, feedback, information or\nother works of authorship that were not authored by you (“Third Party Content”) or if you are aware of any\nthird party intellectual property or proprietary rights associated with your Contribution (“Third Party Rights”),\nthen you agree to include with the submission of your Contribution full details respecting such Third Party\nContent and Third Party Rights, including, without limitation, identification of which aspects of your\nContribution contain Third Party Content or are associated with Third Party Rights, the owner/author of the\nThird Party Content and Third Party Rights, where you obtained the Third Party Content, and any applicable\nthird party license terms or restrictions respecting the Third Party Content and Third Party Rights. For greater\ncertainty, the foregoing obligations respecting the identification of Third Party Content and Third Party Rights\ndo not apply to any portion of a Project that is incorporated into your Contribution to that same Project.\n\n\n**Representations.** You represent that, other than the Third Party Content and Third Party Rights identified by\nyou in accordance with this Agreement, you are the sole author of your Contributions and are legally entitled\nto grant the foregoing licenses and waivers in respect of your Contributions. If your Contributions were\ncreated in the course of your employment with your past or present employer(s), you represent that such\nemployer(s) has authorized you to make your Contributions on behalf of such employer(s) or such employer\n(s) has waived all of their right, title or interest in or to your Contributions.\n\n\n**Disclaimer.** To the fullest extent permitted under applicable law, your Contributions are provided on an \"asis\"\nbasis, without any warranties or conditions, express or implied, including, without limitation, any implied\nwarranties or conditions of non-infringement, merchantability or fitness for a particular purpose. You are not\nrequired to provide support for your Contributions, except to the extent you desire to provide support.\n\n\n**No Obligation.** You acknowledge that Serverpod is under no obligation to use or incorporate your Contributions\ninto any of the Projects. The decision to use or incorporate your Contributions into any of the Projects will be\nmade at the sole discretion of Serverpod or its authorized delegates ..\n\n\n**Disputes.** This Agreement shall be governed by and construed in accordance with the laws of Sweden, without giving effect to its principles or rules regarding conflicts of laws,\nother than such principles directing application of Swedish law. The parties hereby submit to venue in, and\njurisdiction of the courts located in Stockholm, Sweden for purposes relating to this Agreement. In the event\nthat any of the provisions of this Agreement shall be held by a court or other tribunal of competent jurisdiction\nto be unenforceable, the remaining portions hereof shall remain in full force and effect.\n\n\n**Assignment.** You agree that Serverpod may assign this Agreement, and all of its rights, obligations and licenses hereunder.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.09765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ninfo@serverpod.dev.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "DART_VERSION",
          "type": "blob",
          "size": 0.015625,
          "content": "'>=3.3.0 <4.0.0'"
        },
        {
          "name": "FLUTTER_VERSION",
          "type": "blob",
          "size": 0.009765625,
          "content": "'>=3.19.0'"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.431640625,
          "content": "Copyright 2023 The Serverpod authors\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the\nfollowing conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following\ndisclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following\ndisclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products\nderived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\nINCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "PUBLISHABLE_PACKAGES",
          "type": "blob",
          "size": 0.81640625,
          "content": "packages/serverpod_lints\npackages/serverpod_serialization\npackages/serverpod_client\npackages/serverpod_service_client\npackages/serverpod_shared\npackages/serverpod\npackages/serverpod_flutter\npackages/serverpod_test\ntemplates/serverpod_templates\ntools/serverpod_cli\nmodules/serverpod_auth/serverpod_auth_server\nmodules/serverpod_auth/serverpod_auth_client\nmodules/serverpod_auth/serverpod_auth_shared_flutter\nmodules/serverpod_auth/serverpod_auth_apple_flutter\nmodules/serverpod_auth/serverpod_auth_google_flutter\nmodules/serverpod_auth/serverpod_auth_email_flutter\nmodules/serverpod_auth/serverpod_auth_firebase_flutter\nmodules/serverpod_chat/serverpod_chat_server\nmodules/serverpod_chat/serverpod_chat_client\nmodules/serverpod_chat/serverpod_chat_flutter\nintegrations/serverpod_cloud_storage_s3\nintegrations/serverpod_cloud_storage_gcp\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9501953125,
          "content": "![Serverpod banner](https://github.com/serverpod/serverpod/raw/main/misc/images/github-header.webp)\n\n# Serverpod\n[Serverpod](https://serverpod.dev) is a next-generation app and web server, built for the Flutter community. It allows you to write your server-side code in Dart, automatically generate your APIs, and hook up your database with minimal effort. Serverpod is open-source, and you can host your server anywhere.\n\n__[Get Started](https://docs.serverpod.dev)__ - __[Join the Mailing List](https://serverpod.news)__\n\n## Capabilities\n\nServerpod is a complete, competent backend for Flutter. For the glossy sales pitch, head to our main page at [Serverpod.dev](https://serverpod.dev).\n\nEvery design decision in Serverpod aims to minimize the amount of code you need to write and make it as readable as possible. Apart from being just a server, Serverpod incorporates many common tasks that are otherwise cumbersome to implement or require external services.\n\n### Code generation\nServerpod automatically generates your model and client-side code by analyzing your server. Calling a remote endpoint is as easy as making a local method call.\n\n### World-class logging\nStop struggling. You no longer need to search through endless server logs. Pinpoint exceptions and slow database queries in an easy-to-use user interface with a single click.\n\n### Built-in caching\nCut down on your database costs. Don't save all your data permanently when you don't have to. Serverpod comes with a high-performance distributed cache built right in. Any serializable objects can be cached locally on your server or using Redis if you need to use the same cache across a cluster of servers.\n\n### Easy to use ORM\nSave time. Talking with your database can be a hassle. With Serverpod's ORM, your queries use native Dart types and null-safety. There is a straight path from your statically checked code to the database.\n\n### Database migrations\nEasily keep your database in sync as the requirements of your project evolve. Serverpod comes with a complete database migration system that helps you apply and version changes to the database. \n\n### File uploads\nUpload files straight to Google Cloud Storage, S3, or store them in your database.\n\n### Authentication\nSign in through social logins or wing your own. Currently supported are Google, Apple, Firebase, and email.\n\n### Data streaming\nPass serialized objects through authenticated sockets. Push messages from your server for real-time communication. Sending messages across a cluster of servers is supported. Perfect for building games or chatting applications, or anything you can imagine.\n\n### Task scheduling\nServerpod's future calls replace complicated cron jobs. Call a method anytime in the future or after a specified delay. The calls persist even if the server is restarted.\n\n### Health checks\nMonitor the database and external services that you are using. Write custom health checks and get notified when something goes wrong.\n\n### Easy deployment\nServerpod comes with Terraform scripts for Google Cloud Platform and AWS, making deploying your server very quick. We are still working on scripts for other platforms. Please get in touch with us if you want to [contribute](https://docs.serverpod.dev/contribute).\n\n### Built-in web server\nServerpod comes with a built-in web server. This makes it very easy to share data for applications that need both an app and traditional web pages. You can also use the webserver to create webhooks or generate custom REST APIs to communicate with 3rd party services. _The web server is still experimental, and we are actively working on it_.\n\n\n## License\nAll Serverpod packages are licensed under BSD-3, except for the main `serverpod` package, which uses the SSPL license. In short, this means that you can, without limitation, use any of the client packages in your app. You can also host your Serverpod server without limitation as long as you do not offer Severpod as a cloud service to 3rd parties (this is typically only relevant for cloud service providers)."
        },
        {
          "name": "README_subpackage.md",
          "type": "blob",
          "size": 0.3994140625,
          "content": "![Serverpod banner](https://github.com/serverpod/serverpod/raw/main/misc/images/github-header.webp)\n\n# Serverpod\nThis package is a core part of Serverpod. For documentation, visit: [https://docs.serverpod.dev](https://docs.serverpod.dev).\n\n## What is Serverpod?\nServerpod is an open-source, scalable app server, written in Dart for the Flutter community. Check it out!\n\n[Serverpod.dev](https://serverpod.dev)\n"
        },
        {
          "name": "SERVERPOD_VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.3.1\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.0390625,
          "content": "analyzer:\n  exclude:\n    - templates/**\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "integrations",
          "type": "tree",
          "content": null
        },
        {
          "name": "melos.yaml",
          "type": "blob",
          "size": 0.515625,
          "content": "name: serverpod\n\npackages:\n  - examples/**\n  - integrations/*\n  - modules/*\n  - packages/*\n  - tests/*\n  - tools/*\n\nscripts:\n  lint:\n    run: melos analyze --fatal-warnings\n  lint_loose:\n    run: melos analyze --no-fatal-warnings\n  lint_strict:\n    run: melos analyze --fatal-infos --fatal-warnings\n  downgrade_flutter:\n    run: melos exec --flutter -c 1 -- flutter pub downgrade\n  downgrade_dart:\n    run: melos exec --no-flutter -c 1 -- dart pub downgrade\n  downgrade:\n    run: melos downgrade_flutter && melos downgrade_dart\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.0859375,
          "content": "name: serverpod\n\nenvironment:\n  sdk: '>=3.3.0 <4.0.0'\ndev_dependencies:\n  melos: ^6.1.0\n"
        },
        {
          "name": "templates",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}