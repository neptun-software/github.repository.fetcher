{
  "metadata": {
    "timestamp": 1736710562811,
    "page": 151,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dnfield/flutter_svg",
      "stars": 1680,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.212890625,
          "content": "pubspec.lock\n.DS_Store\n.atom/\n.dart_tool/\n.idea\n.vscode/\n.packages\n.pub/\nbuild/\nios/.generated/\n.flutter-plugins\ndoc/api/\ncoverage/\n.project\n\n# golden failure diffs\n**/test/failures\n# Flutter crash logs\n/flutter_*.log\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.279296875,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 48bb5b7926452e2b138000c3d06a075273efbd90\n  channel: master\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.44921875,
          "content": "# Contributing to Flutter SVG\n\nFound a bug? Want an enhancement?  Feel free to submit a pull request for it!\n\n## Creating a Pull Request\n\nContributions are welcome in this repo. Before submitting, please ensure that\nyour request will pass CI:\n\n```bash\nflutter format .\nflutter analyze .\nflutter test\n```\n\nIf you're adding a feature that impacts rendering, please add an SVG asset to\nthe `assets/` folder, and then run `flutter test tool/gen_golden.dart` to\nupdate the golden image files.  Note that this has not been tested in Windows\nplatforms. If you're unable to run it, let me know and I'll work with you to\nupdate the goldens.\n\nPassing the golden tests is critical to ensure backward compatibility, and that\nyour code has not unintentionally broken a previously working feature. While\nsometimes such changes are necessary to fix a broken rendering method, they\nshould not be introduced without care.\n\nIf you're fixing a bug, please make sure to include some tests that fail before\napplying your fix and now succeed. This might be a regular Dart unit test, or\nit could be a SVG in the `assets/` folder and a corresponding PNG in `goldens/`\nthat now renders correctly because of your fix.\n\nFor the PR to be incorporated into the package, it must be compatible with\nthe the latest `beta` channel for Flutter (or, the latest stable/mainline\nrelease). If it someday becomes possible to conditionally pre-process the\nDart code based on Flutter/Dart version, this can be relaxed.\n\n## Opening an issue\n\nIf you've got an issue and you're not able to fix it yourself, or you're\nlooking for feedback before doing any coding work for a PR, feel free to open\nan issue about it.\n\nIf the issue is related to rendering or a specific SVG feature, be sure to\ninclude at least one sample SVG. The smaller/simpler the example, the better.\n\nIf the issue is related to architecture/project structure/coding standards,\nconsider including some kind of example of what you're trying to achieve. For\nexample, instead of saying\n\n> This project should use Design Pattern X to solve Problem Y! I love pattern\nX and when we used it on Project Z it made everything better.\n\nconsider\n\n> Here's an example of implementing this feature using Deisgn Pattern X.\nThis memory/time benchmark shows that it makes rendering perform 10% faster\non Phone Model W....\n\nor\n\n> It's very difficult to implement feature A in the current codebase. Applying\nPattern X could help solve this, as in the following example....\n\nwhich will be received better."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.02734375,
          "content": "Copyright (c) 2018 Dan Field\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 0.759765625,
          "content": "# flutter_svg\n\nDraw SVG files using Flutter.\n\n## Commemoration and new location\n\nThis repository was originally created by Dan Field and its contents has been\nmoved into the Flutter GitHub organization. Dan was a member of the Flutter\nteam at Google from 2018 until his death in 2024. Danâ€™s impact and contributions\nto Flutter were immeasurable, and we honor his memory by continuing to publish and\nmaintain these packages.\n\nThese packages are now maintained by the Flutter team in the\n[flutter/packages](https://github.com/flutter/packages) repository.\n  * [package:flutter_svg](https://github.com/flutter/packages/tree/main/third_party/packages/flutter_svg)\n  * [package:flutter_svg_test](https://github.com/flutter/packages/tree/main/third_party/packages/flutter_svg_test)\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 7.0625,
          "content": "# Specify analysis options.\n#\n# Until there are meta linter rules, each desired lint must be explicitly enabled.\n# See: https://github.com/dart-lang/linter/issues/288\n#\n# For a list of lints, see: http://dart-lang.github.io/linter/lints/\n# See the configuration guide for more\n# https://github.com/dart-lang/sdk/tree/master/pkg/analyzer#configuring-the-analyzer\n#\n# There are other similar analysis options files in the flutter repos,\n# which should be kept in sync with this file:\n#\n#   - analysis_options.yaml (this file)\n#   - packages/flutter/lib/analysis_options_user.yaml\n#   - https://github.com/flutter/plugins/blob/master/analysis_options.yaml\n#   - https://github.com/flutter/engine/blob/master/analysis_options.yaml\n#\n# This file contains the analysis options used by Flutter tools, such as IntelliJ,\n# Android Studio, and the `flutter analyze` command.\n\nanalyzer:\n  language:\n    strict-casts: true\n    strict-raw-types: true\n  errors:\n    # treat missing required parameters as a warning (not a hint)\n    missing_required_param: warning\n    # treat missing returns as a warning (not a hint)\n    missing_return: warning\n    # allow having TODOs in the code\n    todo: ignore\n  exclude:\n    - 'flutter/**'\n\nlinter:\n  rules:\n    # these rules are documented on and in the same order as\n    # the Dart Lint rules page to make maintenance easier\n    # https://github.com/dart-lang/linter/blob/master/example/all.yaml\n    - always_declare_return_types\n    - always_put_control_body_on_new_line\n    # - always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219\n    - always_require_non_null_named_parameters\n    - always_specify_types\n    - annotate_overrides\n    # - avoid_annotating_with_dynamic # conflicts with always_specify_types\n    # - avoid_as # conflicts with implicit-casts: false\n    # - avoid_bool_literals_in_conditional_expressions # not yet tested\n    # - avoid_catches_without_on_clauses # we do this commonly\n    # - avoid_catching_errors # we do this commonly\n    - avoid_classes_with_only_static_members\n    # - avoid_double_and_int_checks # only useful when targeting JS runtime\n    - avoid_equals_and_hash_code_on_mutable_classes\n    - avoid_empty_else\n    - avoid_field_initializers_in_const_classes\n    - avoid_function_literals_in_foreach_calls\n    # - avoid_implementing_value_types # not yet tested\n    - avoid_init_to_null\n    # - avoid_js_rounded_ints # only useful when targeting JS runtime\n    - avoid_null_checks_in_equality_operators\n    # - avoid_positional_boolean_parameters # not yet tested\n    # - avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    # - avoid_returning_null # there are plenty of valid reasons to return null\n    - avoid_returning_null_for_void\n    # - avoid_returning_this # there are plenty of valid reasons to return this\n    # - avoid_setters_without_getters # not yet tested\n    # - avoid_single_cascade_in_expression_statements # not yet tested\n    - avoid_slow_async_io\n    - avoid_types_as_parameter_names\n    # - avoid_types_on_closure_parameters # conflicts with always_specify_types\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    - await_only_futures\n    - camel_case_types\n    - cancel_subscriptions\n    # - cascade_invocations # not yet tested\n    # - close_sinks # not reliable enough\n    # - comment_references # blocked on https://github.com/flutter/flutter/issues/20765\n    # - constant_identifier_names # needs an opt-out https://github.com/dart-lang/linter/issues/204\n    - control_flow_in_finally\n    # - curly_braces_in_flow_control_structures # not yet tested\n    - directives_ordering\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    # - file_names # not yet tested\n    - flutter_style_todos\n    - hash_and_equals\n    - implementation_imports\n    # - invariant_booleans # too many false positives: https://github.com/dart-lang/linter/issues/811\n    # - join_return_with_assignment # not yet tested\n    - library_names\n    - library_prefixes\n    # - lines_longer_than_80_chars # not yet tested\n    # - literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/sdk/issues/34181\n    - no_adjacent_strings_in_list\n    - no_duplicate_case_values\n    - non_constant_identifier_names\n    # - null_closures  # not yet tested\n    # - omit_local_variable_types # opposite of always_specify_types\n    # - one_member_abstracts # too many false positives\n    # - only_throw_errors # https://github.com/flutter/flutter/issues/5792\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    # - parameter_assignments # we do this commonly\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    # - prefer_constructors_over_static_methods # not yet tested\n    - prefer_contains\n    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods\n    - prefer_final_fields\n    - prefer_final_locals\n    - prefer_foreach\n    # - prefer_function_declarations_over_variables # not yet tested\n    - prefer_generic_function_type_aliases\n    - prefer_initializing_formals\n    # - prefer_int_literals # not yet tested\n    # - prefer_interpolation_to_compose_strings # not yet tested\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_iterable_whereType\n    # - prefer_mixin # https://github.com/dart-lang/language/issues/32\n    - prefer_single_quotes\n    - prefer_typing_uninitialized_variables\n    - prefer_void_to_null\n    - recursive_getters\n    - slash_for_doc_comments\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - public_member_api_docs\n    - test_types_in_equals\n    - throw_in_finally\n    # - type_annotate_public_apis # subset of always_specify_types\n    - type_init_formals\n    # - unawaited_futures # too many false positives\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    - unnecessary_getters_setters\n    # - unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_statements\n    - unnecessary_this\n    - unrelated_type_equality_checks\n    - use_rethrow_when_possible\n    # - use_setters_to_change_properties # not yet tested\n    # - use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182\n    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review\n    - valid_regexps\n    # - void_checks # not yet tested\n"
        },
        {
          "name": "flutter_test_registry",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "vector_graphics.md",
          "type": "blob",
          "size": 8.7099609375,
          "content": "# `vector_graphics`, or `flutter_svg` 2.0\n\nStarting in version 2.0, `flutter_svg` migrated to using the\n`vector_graphics_compiler` as an SVG parsing backend and the `vector_graphics`\nruntime package for widget/render object responsibilities.\n\nThe `vector_graphics` packages provide a compiler runtime that has no\ndependencies on `dart:ui`, and so can run completely as a CLI application or in\na background isolate. It produces a binary file that has no versioning or\ncompatibility guarantees - meaning that the output of the compiler is only\nsuitable for use with the runtime and codec with the same exact git hash. This\nallows for a compact, optimized, and further optimizable format.\n\nThe ideal way to use that package is to convert your assets at compile time and\nbundle them with your application, or store them on a server in a location that\nis matched precisely to git hash of the package that produced them. This can\nbe challenging with the current state of the flutter_tools and Dart build\nsystems, as well as for developers who lack the resources to version and control\nall of their network vector graphic assets. This package is meant to help bridge\nthe gap, as well as to help existing `flutter_svg` users benefit from more\noptimizations and an easier migration path.\n\n## Why `vector_graphics`?\n\nSVG, as specified, is a nightmare. Parsing XML is slow, especially in comparison\nto binary formats like Flat/Protocol Buffers and the like. SVG itself pulls in\nmany other web standards like CSS, JavaScript, and HTML. Even if you restrict\nyourself to some static subset of SVG, the specification allows for a wide\nlatitude of insane but valid things. For example, the specification does nothing\nto prevent or discourage an editor from inserting dozens of `<g>` nodes, each\nhaving a `transform`, that eventually transform their sole child back to the\nidentity matrix. And because the specification states that each group node can\nhave other inheritable attributes attached, each node must be examined and some\nsuitable data structure(s) must be allocated to account for how to pass on\nthose heritable attributes if any arise. On a slow, lost-cost mobile device,\nthis cuts into valuable frame-time if done on the UI isolate. And this doesn't\neven mention that design tool may have snuck in any number of masks, which as\nspecified require at least two render target switches but frequently are used in\nplace of what could be achieved with a much cheaper clip.\n\nThe basic problem is that SVG gives design tools a very large number of ways to\nspecify a drawing, and design tools are generally not written to produce SVG\nthat will be fast to render or fast to parse. Existing SVG optimization tools\ntend to focus on network download size, and may lack internal capabilities to\nexamine the relationships between nodes to decide when and how they can be\noptimized.\n\nThe `vector_graphics` suite addresses this by focusing less on being fast at\nparsing and more on being able to produce something that will be fast when it\nfinally gets to the UI isolate - and faster when Flutter's rasterizer goes to\nrender it. Some of the optimizations available that suite are currently only\navailable when directly using the `vector_graphics` package, both because of\nchallenges around packaging FFI libraries for various platforms and because\nsome of the optimization algorithms may be more expensive than just taking the\npenalty of not using them.\n\nAdditionally, the design that `flutter_svg` was using took inspiration from\n`package:flutter`'s image related classes. This turned out to be a mistake.\nThere is no intention for `flutter_svg` to ever support animated/multi-frame\nSVGs, and the way that Flutter ties together byte acquisition and image decoding\nmakes things a bit complicated. Instead, `vector_graphics` introduces the\nconcept of a `BytesLoader` class, which knows how to obtain encoded bytes to\nfeed to the runtime via an asynchronous method that optionally receives a\n`BuildContext`.  See the `loaders.dart` file in this package for examples.\n\nAs of this writing, the optimizations that are available include:\n\n- Useless element/attribute pruning.\n- Inheritance removal.\n- Paint/path deduplication.\n- Transform pre-calculation/collapsing.\n- Elimination of XML parsing on the UI isolate.\n- Elimination of UTF-8 and Base 64 decoding (i.e. for embedded images) on the UI\n  isolate.\n- Path dashing is done completely on a background isolate.\n- More use of 32-bit floats instead of 64-bit doubles, which saves on memory\n  with good visual fidelity.\n\n## What changes?\n\nCompared to prior releases of flutter_svg, the following changes can be\nexpected:\n\n- Loss of support for `text` elements that use `dx` or `dy` attributes, which\n  already was implemented only partially and incorrectly.\n- Support for out of order `defs` and element references.\n- Support for patterns.\n- Gradients render slightly differently. This is likely due to a combination of\n  some precision differences and pre-calculating transforms.\n- Some shapes, such as circles and rounded rects, render slightly differently.\n  This is due to precision differences and pre-calculation of curves.\n- Golden tests may now show SVGs they did not used to show. this is because more\n  parsing and rendering is completely synchronous in tests, whereas previously\n  it was always at least partially async.\n- Outside of tests (where the extra async makes life more confusing) and web\n  (which does not have isolates), parsing happens in a separate isolates.\n\n## What do I need to change in my code?\n\n### `precachePicture`\n\nThis API doesn't exist anymore. If you were using it to pre-fetch bytes from\nsome `PictureProvider`, instead write a custom `BytesLoader` implementation\n(or use an existing one) and use `vg.loadPicture`. However, there is currently\nno provided widget to make drawing that picture easy, but generally speaking\nyou can use a `CustomPainter`.\n\n### `PictureProvider`s\n\nIf you had a custom `PictureProvider`, you will now want a custom `BytesLoader`.\nConsider overriding `SvgLoader<T>`, which takes care of doing the right thing\nwith isolates for you and only requires you to implement a function to obtain\nthe SVG string that will be run in a non-UI isolate. See more examples in\n`loaders.dart` in this package.\n\n### `PictureCache`\n\nPictures are no longer cached, however the byte data for vector_graphics output\nis cached in the `Cache` object. This is similar to but not quite the same as\nthe old picture cache. It is available via `svg.cache`.\n\n### Widget changes\n\nThe `SvgPicture.clipBehavior` property is deprecated (no-op).\n\nThe `SvgPicture.cacheColorFilter` property is deprecated (no-op).\n\nThe `SvgPicture.*` constructors still have `color` and `colorBlendMode`\nproperties, which are deprecated. Instead use the `colorFilter` property. To\nachieve the old behavior of the `color` property, use\n`ColorFilter.mode(color, BlendMode.srcIn)`.\n\nThe `SvgPicture.pictureProvider` property has been removed. Use the `loader`\nproperty instead, if you must.\n\n### Golden testing\n\nPlease limit your golden tests. In particular, try to make sure that you avoid\ntesting the same SVG over and over again in multiple different golden tests,\nand try to make sure that you _only have as many golden files that as can be\nreviewed by you and your team if they all changed in a single update_. In\ngeneral, this is somewhere around 10-20 golden files _per reviwer_, and that is\ngenerously assuming that each reviewer will carefully examine the differences\nin those 10-20 files. Assume that the reviewer will have no idea what the author\nof the test intended, _even if the reviewer authored the test_. If your team\nis 5 people, that means somewhere between 50-100 goldens.\n\nAnecdotally, I have missed important regressions in golden tests I wrote because\nI wrote them several years ago and just forgot, and I was only looking for\nchange X which I verified but missed changes Y and Z that I hadn't thought about\nin over a year. I have also worked with partner projects that use `flutter_svg`\nthat have _tens of thousands of golden images directly or indirectly involveing\nSVGs_ and it is a _nightmare_ for everyone when some minor change comes along\nthat touches most of them. Very frequently in such projects, it becomes obvious\nthat _no one_ has ever looked at a large number of these golden tests, and they\nactually harm test coverage because they falsely make broken code appear to have\ncoverage via a test that requires a human to double check its result.\n\nWith that said, most golden testing should \"just work,\" except if your SVGs have\nimages in them. In that case, \"real\" async work needs to get done, and at some\npoint the test in question will have to call\n\n```dart\nawait tester.runAsync(() => vg.waitForPendingDecodes());\nawait tester.pump();\n```\n\nto make sure that the image decode(s) finish and the placeholder widget is\nreplaced with the actual picture.\n"
        }
      ]
    }
  ]
}