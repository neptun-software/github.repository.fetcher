{
  "metadata": {
    "timestamp": 1736710626423,
    "page": 282,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/quiver-dart",
      "stars": 1041,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0537109375,
          "content": "# Ensure line-endings are normalized to LF\n* text=auto\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1201171875,
          "content": "# Pub\npackages\npubspec.lock\nbuild/\n.dart_tool/\n.pub\n.packages\n\n# IDE\n.project\n.settings\n.idea\n*.iml\n\n# Temp files\n*~\n*.sw?\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.802734375,
          "content": "# Below is a list of people and organizations that have contributed\n# to the Quiver project. Names should be added to the list like so:\n#\n#   Name/Organization <email address>\n\nGoogle Inc.\nJustin Fagnani <justinfagnani@google.com>\nYegor Jbanov <yjbanov@google.com>\nChris Bracken <cbracken@google.com>\nAlexandre Ardhuin <alexandre.ardhuin@gmail.com>\nDavid Morgan <davidmorgan@google.com>\nJohn McDole <codefu@google.com>\nMatan Lurey <matanl@google.com>\nGünter Zöchbauer <guenter@gzoechbauer.com>\nSean Eagan <seaneagan1@gmail.com>\nVictor Berchet <victor@suumit.com>\nWil Pirino <willyp@google.com>\nAdam Lofts <adam.lofts@gmail.com>\nAlec Henninger <alechenninger@gmail.com>\nMark Fielbig <mfielbig@gmail.com>\nLucy Gettinger <lucyget@google.com>\nMichel Feinstein <michel@feinstein.com.br>\nPatrik Badanjak <pbadanjak@gmail.com>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.8056640625,
          "content": "## 3.2.2\n\n- Fix a number of doc comment issues.\n- Re-deprecate `Optional` but provide more nuance to the documentation.\n\n## 3.2.1 - 2022-12-20\n\n- Un-deprecate `Optional`. Causing breaks with hints internally at Google. \n  Need to remove all usages before we try to land again.\n\n## 3.2.0 - 2022-12-20 (Retracted)\n\n- Deprecate `Optional`. With the introduction of non-null by default in Dart SDK\n  2.12, existing users should migrate to non-nullable types. This type will be\n  removed in Quiver 4.0.0.\n- Make `TreeIterator` not implement deprecated `BidirectionalIterator`. The\n  `movePrevious` method still exists on `TreeIterator`.\n- Require Dart 2.17\n\n## 3.1.0 - 2022-05-03\n\n- Fix: Make Cache.get ifAbsent parameter nullable. The parameter was always\n  optional; this just corrects the type.\n- Fix: Remove documentation links to the (previously removed) mirrors library.\n\n## 3.0.1+2 - 2022-03-09\n\n- Remove broken references to the defunct mirrors library.\n\n## 3.0.1+1 - 2021-10-14\n\n- Add documentation to `Optional` suggesting that adding new uses be avoided and\n  existing uses should be migrated to nullable types in codebases where non-null\n  by default has been enabled.\n\n## 3.0.1 - 2021-04-06\n\n- Fix: Eliminate null check error on removal of root node of `AVLTree`.\n- Fix: Eliminate null check in partition internal iterator `current` getter.\n- Minor documentation typo corrections.\n\n## 3.0.0 - 2021-02-16\n\n- BREAKING CHANGE: This version requires Dart SDK 2.12.0 or later.\n- BREAKING CHANGE: Remove `assertCheckedMode`. This was deprecated in 2.1.2.\n  Checked mode no longer exists in Dart 2.0 since the vast majority of what\n  checked mode did is now done in the type system itself.\n- BREAKING CHANGE: Remove `doWhileAsync`. This was deprecated in 2.1.1. Existing\n  callers should migrate to `Future.doWhile()`.\n- BREAKING CHANGE: Remove IO library. This was deprecated in 2.1.4.\n- BREAKING CHANGE: Remove mirrors library. This was deprecated in 2.1.4.\n- BREAKING CHANGE: forEachAsync now returns Future<void> instead of\n  Future<Null>.\n- BREAKING CHANGE: BiMap no longer throws ArgumentError on insertion of a null\n  key or value, if the corresponding K or V type is nullable. As before, values\n  in the map must be unique and ArgumentError is thrown on attempts to add a\n  key-value pair whose value is already in the map.\n- BREAKING CHANGE: `TreeSet.first` and `TreeSet.last` now throw StateError if no\n  element exists, as specified by the Set API contract both with null safety\n  enabled or disabled.\n- BREAKING CHANGE: `TreeSet` iterators now throw if `Iterator.current` is called\n  before `moveNext` is called, or after `moveNext` has returned false when\n  running with null safety enabled.\n- Deprecate `checkNotNull`. Users of this function should migrate to\n  `ArgumentError.checkNotNull`. This will be removed in 4.0.0.\n- Deprecate `firstNonNull`. Users of this function should migrate to\n  `var v = o1 ?? o2 ?? o3 ?? o4; ArgumentError.checkNotNull(v);`. This will be\n  removed in 4.0.0\n- Eliminate dependency on package:meta.\n\n## 2.1.5 - 2020-11-05\n\n- Deprecate `forEachAsync`, `reduceAsync`. Existing callers should migrate to\n  `Future.forEach`. Migration examples have been added to the documentation for\n  these methods. This will be removed in Quiver 3.0.0.\n\n## 2.1.4+1 - 2020-10-26\n\n- Fix: Add dart:async import to async/string.dart. Stream wasn't exported from\n  dart:core until Dart 2.1 but Quiver supports back to Dart 2.0.\n\n## 2.1.4 - 2020-10-26\n\n- Move `stringFromByteStream` from the IO library to the async library. The\n  original in IO has been deprecated and will be removed in 3.0.0. Users should\n  update their code to import this function from `quiver/async.dart`. If both\n  `quiver/io.dart` and `quiver.async.dart` are imported in the same file, users\n  should hide the symbol from IO as described here:\n  https://dart.dev/guides/language/language-tour#importing-only-part-of-a-library\n- Deprecate `getFullPath`. Users should use\n  `File(path).resolveSymbolicLinksSync`. This will be removed in 3.0.0.\n- Deprecate `visitDirectory`. This will be removed in 3.0.0. The source can be\n  copied under the terms of the Apache 2.0 license.\n- Deprecate mirrors library. This will be removed in 3.0.0. This library was\n  written prior to Dart 1.0 and in the interim, mirrors have been found to be\n  problematic for production code. The primary Dart runtimes today are Flutter\n  and the web. Flutter disables dart:mirrors altogether. On the web, the use of\n  mirrors disables tree-shaking since in theory almost any symbol could be used\n  reflectively; this can't be solved through static analysis -- one could\n  imagine the situation where a user of a web app inputs the name of a method to\n  be reflectively invoked at runtime. Users of this code can rewrite this code,\n  or copy it into their own projects under the terms of the Apache 2.0 license.\n- Fix: Eliminate a set literal inadvertently introduced in\n  https://github.com/google/quiver-dart/pull/359. Set literals are only\n  supported starting in Dart 2.2, but Quiver supports back to Dart 2.0.\n- Switched from using part/part of to re-exporting the underlying libraries. We\n  weren't making use of private symbols across files within lib/src. This\n  improves readability by keeping imports with the code that's using them. It\n  also allows for cross-imports within lib/src if necessary.\n\n## 2.1.3 - 2020-02-28\n\n- Fix: revert const constructor change to `Optional.transform`,\n  `Optional.transformNull` which causes type errors when used in combination\n  with certain operations that trigger an implicit type check. The error in\n  question was introduced in 2.1.2.\n\n## 2.1.2+1 - 2019-11-05\n\n- Minor linter fix: added curly brackets on flow-control structures to make Pana\n  package scoring happier.\n\n## 2.1.2 - 2019-11-05\n\n- Deprecate `assertCheckedMode`. Checked mode no longer exists in Dart 2.0 since\n  the vast majority of what checked mode did is now done in the type system\n  itself. This will be removed in Quiver 3.0.0.\n- TreeSet.isEmpty/isNotEmpty are now constant-time checks.\n- Large amounts of linter-related cleanups.\n\n## 2.1.1 - 2019-11-03\n\n- Deprecate `doWhileAsync`. Existing callers should migrate to\n  `Future.doWhile()` from `dart:async`. This will be removed in Quiver 3.0.0.\n- Fix: Eliminate a crash in `LruMap.putIfAbsent` when `maximumSize` is 1.\n- Add return types on any function that didn't include one.\n\n## 2.1.0 - 2019-10-28\n\n- Upgraded matcher dependency lower-bound from 0.10.0 to 0.12.5 to migrate from\n  `isInstanceOf` to `isA` in tests.\n- Style cleanups.\n\n## 2.0.5 - 2019-08-06\n\n- Added `isNotBlank` to strings library.\n\n## 2.0.4 - 2019-08-01\n\n- Added `FakeAsync.pendingTimersDebugInfo`.\n\n## 2.0.3 - 2019-04-11\n\n- Do not cache failed `ifAbsent` calls in `MapCache`.\n\n## 2.0.2 - 2019-03-19\n\n- `partition` is now a generic function.\n- New: Optional now includes an `isNotPresent` getter alongside the existing\n  `isPresent` getter.\n\n## 2.0.1 - 2018-10-22\n\n- New: Optional now includes `transformNullable` to pass maybe present values\n  through a transformer with a nullable return value.\n\n## 2.0.0+1 - 2017-07-18\n\n- Updated Dart SDK constraint to >=2.0.0-dev.61 < 3.0.0.\n\n## 2.0.0 - 2018-07-18\n\n- BREAKING CHANGE: This version requires Dart SDK 2.0.0-dev.61 or later.\n\n## 1.0.0 - 2018-07-18\n\n- BREAKING CHANGE: StreamBuffer has been changed from implementing\n  `StreamConsumer<T>` to `StreamConsumer<List<T>>`. Users of\n  `StreamBuffer<List<T>>` can simply change declarations to `StreamBuffer<T>`.\n  In cases where the generic type is already not a list type, inputs to the list\n  may need to be wrapped in a list.\n\n## 0.29.0+1 - 2018-03-29\n\n- BREAKING CHANGE: This version requires Dart SDK 2.0.0-dev.30 or later.\n  Bugfixes will be backported to the 0.28.x series for Dart 1 users.\n- New: BiMap now includes a real implementation of `addEntries`, `get entries`,\n  `map`, `removeWhere`, `update`, and `updateAll`.\n- New: DelegatingIterable now includes a real implementation of `followedBy`,\n  and accepts the `orElse` parameter on `singleWhere`.\n- New: DelegatingList now includes real implementations of `operator +`,\n  `indexWhere`, and `lastIndexWhere`.\n- New: LruMap now includes a real implementation of `addEntries`, `get entries`,\n  `removeWhere`, `update`, and `updateAll`.\n- New: The map returned by `Multimap.asMap()` now includes real implementations\n  of `get entries` and `removeWhere`. This class also has \"real\" implementations\n  of `addEntries`, `map`, `update`, and `updateAll`, which just throw an\n  `UnsupportedError`, as inserts and updates are not allowed on map views.\n- New: The list keys of `ListMultimap` now include real implementations of\n  `operator +`, `indexWhere`, and `lastIndexWhere`.\n- New: The iterable keys of `ListMultimap` and `SetMultimap` now include a real\n  implementation of `followedBy`, and accept the `orElse` parameter on\n  `singleWhere`.\n\n## 0.29.0 - 2018-03-28\n\n- BREAKING CHANGE: Deleted `createTimer` and `createTimerPeriodic`, which were\n  deprecated in 0.26.0.\n- BREAKING CHANGE: Deleted `reverse`, which was deprecated in 0.25.0.\n- BREAKING CHANGE: Deleted `FutureGroup`, which was deprecated in 0.25.0.\n- BREAKING CHANGE: `InfiniteIterable.singleWhere` now throws `UnsupportedError`.\n\n## 0.28.2 - 2018-03-24\n\n- Fix: Eliminate a bug where `LruMap` linkage is incorrectly preserved when\n  items are removed.\n\n## 0.28.1 - 2018-03-22\n\n- Remove use of `Maps.mapToString` in `LruMap`.\n- Add `@visibleForTesting` annotation in `AvlTreeSet`.\n\n## 0.28.0 - 2018-01-19\n\n- BREAKING CHANGE: The signature of `MultiMap`'s `update` stub has changed from\n  `V update(K key, C update(C value), {C ifAbsent()})` to\n  `C update(K key, C update(C value), {C ifAbsent()})`.\n\n## 0.27.0 - 2018-01-03\n\n- BREAKING CHANGE: all classes that implement `Iterable`, `List`, `Map`,\n  `Queue`, `Set`, or `Timer` now implement stubs of upcoming Dart 2.0 methods.\n  Any class that reimplements these classes also needs new method\n  implementations. The classes with these breaking changes include: `HashBiMap`,\n  `DelegatingIterable`, `DelegatingList`, `DelegatingMap`,`DelegatingQueue`,\n  `DelegatingSet`, `LinkedLruHashMap`, `TreeSet`, and `AvlTreeSet`.\n- Fix: Use FIFO ordering in `FakeAsync`. PR\n  [#265](https://github.com/google/quiver-dart/pull/265)\n\n## 0.26.2 - 2017-11-16\n\n- Fix: re-adding the most-recently-used entry to a `LinkedLruHashMap` previously\n  introduced a loop in the internal linked list.\n- Fix: when removing an entry in the middle of the `LinkedLruHashMap`, the\n  recency list was not correctly re-linked.\n\n## 0.26.1 - 2017-11-16\n\n- Fix: when removing the last item, `LinkedLruHashMap` was put into a state such\n  that the next cache eviction could cause a null-pointer exception. Issue\n  [#385](https://github.com/google/quiver-dart/issues/385).\n- Fix: strong mode fix when calling `merge` on the empty set of iterables. PR\n  [#384](https://github.com/google/quiver-dart/pull/384).\n\n## 0.26.0 - 2017-11-01\n\n- BREAKING CHANGE: eliminated deprecated `flip`. Replaced by `reverse` in\n  0.25.0.\n- BREAKING CHANGE: eliminated deprecated `repeat`. Deprecated in 0.25.0. Callers\n  should use `String`'s `*` operator.\n- BREAKING CHANGE: `collect`, `concat`, `doWhileAsync`, `enumerate`, `extent`,\n  `forEachAsync`, `max`, `merge`, `min`, `reduceAsync`, and `zip` are now type\n  parameterized. Depending on the inferred value of each type parameter, the\n  return type of each function may change in existing code.\n- BREAKING CHANGE: `Optional`'s `==` operator now takes into account `T`, the\n  type of the value. This changes, e.g. `Optional<int>.absent()` to no longer be\n  equal to `Optional<String>.absent()`.\n- BREAKING CHANGE: stronger generics added in `Cache` and `MapCache`.\n- Deprecated: `reverse` in the `strings` library. No replacement is provided.\n- Deprecated: `createTimer`, `createTimerPeriodic` in the `async` library. These\n  were originally written to support FakeTimer, which is superseded by\n  FakeAsync.\n- New: Added `isLeapYear`, `daysInMonth`, `clampDayOfMonth` APIs in the `time`\n  library.\n- Multimap is now backed by a LinkedHashMap rather than HashMap.\n- Multimap: added `contains` to know if an association key/value exists.\n\n## 0.25.0 - 2017-03-28\n\n- BREAKING CHANGE: minimum SDK constraint increased to 1.21.0. This allows use\n  of async-await and generic function in Quiver.\n- BREAKING CHANGE: eliminated deprecated `FakeTimer`.\n- BREAKING CHANGE: `StreamBuffer<T>` now implements `StreamConsumer<T>` as\n  opposed to `StreamConsumer<T|List<T>>`.\n- Deprecated: `FutureGroup`. Use the replacement in `package:async` which\n  requires a `close()` call to trigger auto-completion when the count of pending\n  tasks drops to 0.\n- Deprecated: `repeat` in the `strings` library. Use the `*` operator on the\n  String class.\n- Deprecated: in the strings library, `flip` has been renamed `reverse`. `flip`\n  is deprecated and will be removed in the next release.\n- Iterables: `enumerate` is now generic.\n- Collection: added `indexOf`.\n\n## 0.24.0 - 2016-10-31\n\n- BREAKING CHANGE: eliminated deprecated `nullToEmpty`, `emptyToNull`.\n- Fix: Strong mode: As of Dart SDK 1.21.0, `Set.difference` takes a\n  `Set<Object>` parameter.\n\n## 0.23.0 - 2016-09-21\n\n- Strings: `nullToEmpty`, `emptyToNull` deprecated. Removal in 0.24.0.\n- BREAKING CHANGE: eliminated deprecated multimap `toMap`.\n- BREAKING CHANGE: eliminated deprecated `pad*`, `trim*` string functions.\n\n## 0.22.0 - 2015-04-21\n\n- BREAKING CHANGE: `streams` and `async` libraries have been\n  [merged](https://github.com/google/quiver-dart/commit/671f1bc75742b4393e203c9520a3bf1e031967dc)\n  into one `async` library\n- BREAKING CHANGE: Pre-1.8.0 SDKs are no longer supported.\n- Quiver is now\n  [strong mode](https://github.com/dart-lang/dev_compiler/blob/master/STRONG_MODE.md)\n  compliant\n- New: `Optional` now implements `Iterable` and its methods are generic (using\n  temporary syntax)\n- New: `isNotEmpty` and `isDigit` in `strings.dart`\n- New: `Multimap.fromIterable`\n- Fix: Change `TreeSearch` from `class` to `enum`.\n- Fix: `fake_async.dart` timers are now active while executing the callback\n\n## 0.21.4 - 2015-05-15\n\n- Add stats reporting for fake async tests. You can query the number of pending\n  microtasks and timers via `microtaskCount`, `periodicTimerCount`,\n  `nonPeriodicTimerCount`.\n\n## 0.21.3+1 - 2015-05-11\n\n- Switch from unittest to test.\n\n## 0.21.3 - 2015-03-03\n\n- Bugfix: fixed return type on some methods (e.g. `where` of `Iterable`s\n  returned by Multimap.\n\n## 0.21.2 - 2015-03-03\n\n- Bugfix: fix drifting times in `Metronome`.\n- Add `LruMap` to quiver/collection.\n- Un-deprecate Glob; feedback was that package:glob was not a suitable\n  replacement in many cases. Key reasons: dependency on dart:io and\n  significantly poorer performance.\n\n## 0.21.1 - 2015-02-05\n\n- Add optional start param to `Glob.allMatches()` to match superclass method\n  signature.\n- Add optional start param to `Pattern` returned by `matchesAny()` to match\n  superclass method signature.\n- Deprecate Glob. Use package:glob. Will be removed in 0.22.0.\n\n## 0.21.0+3 - 2015-02-04\n\n- Travis CI integration support added.\n- Document that the deprecated functions `padLeft`, `padRight`, `trimLeft`,\n  `trimRight` will be removed in 0.22.0.\n\n## 0.21.0+2 - 2015-02-04\n\n- Fix hanging `FakeAsync` unit test.\n\n## 0.21.0+1 - 2015-02-03\n\n- Replace `equalsTester` dependency on `unittest` with finer-grained dependency\n  on `matcher`.\n- `path` is now a dev dependency.\n\n## 0.21.0 - 2015-02-02\n\n- Multimap: `toMap()` is deprecated and replaced with `asMap()`. `toMap()` will\n  be removed in v0.22.0.\n- Cleanup method signatures that were inconsistent with the core library.\n- Added `areEqualityGroups` matcher for testing `operator==` and `hashCode`.\n- CONTRIBUTING.md added.\n\n## 0.20.0 - 2014-12-10\n\n- Multimap: better `toString()` on returned collections.\n- Multimap: Bugfix: support edits on empty value collections.\n- Multimap: Added missing return statement in `fold`.\n- Added isEmpty() in `strings`.\n- Added max SDK constraint <2.0.0\n- Minor updates to README.md.\n- CHANGELOG.md added\n\n## 0.19.0+1 - 2014-11-12\n\n- Corrected version constraint suggestion in README.md.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.2607421875,
          "content": "# How to contribute\n\n### Before you contribute\n\nBefore we can use your code, you must sign the [Google Individual Contributor\nLicense Agreement][cla] (CLA), which you can do online. The CLA is necessary\nmainly because you own the copyright to your changes even after your\ncontribution becomes part of our codebase, so we need your permission to use and\ndistribute your code. We also need to be sure of various other things—for\ninstance that you'll tell us if you know that your code infringes on other\npeople's patents. You'll only need to do this once.\n\nBefore you start working on a larger contribution, you should get in touch with\nus first through the  [Issue Tracker][issues] with your idea so that we can help\nout and possibly guide you. Co-ordinating up front makes it much easier to avoid\nfrustration later on.\n\nAll submissions, including submissions by project members, require review.\n\n### Contribution Guidelines\n\nWe welcome your pull requests, issue reports and enhancement requests. To make\nthe process as smooth as possible, we request the following:\n\n   * Sign the [CLA][cla] (see above) before sending your pull request.\n     It's quick, we promise!\n   * Have test cases for your changes and ensure that the existing ones still\n     pass.\n   * Ensure your code is consistent with the [Style Guide][style_guide].\n   * Run your changes through `dartfmt`. Follow the installation instructions in\n     the [dart_style][dartfmt_usage] README for more info.\n   * Squash your commits into a single commit with a good description. You can\n     use `git rebase -i` for this. For more details on rebasing, check out\n     Atlassian's [tutorial][rebase_tutorial].\n   * During code review, go ahead and pile up commits addressing review\n     comments. Once you get an LGTM (looks good to me) on the review, we'll\n     squash your commits and merge!\n   * If you're not already listed as an author in `AUTHORS`, remember to add\n     yourself and claim your rightful place amongst the Quiverati.\n\n[cla]: https://developers.google.com/open-source/cla/individual\n[issues]: https://github.com/google/quiver-dart/issues\n[style_guide]: https://dart.dev/guides/language/effective-dart\n[dartfmt_usage]: https://github.com/dart-lang/dart_style\n[rebase_tutorial]: https://www.atlassian.com/git/tutorials/rewriting-history\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.5595703125,
          "content": "Copyright 2013 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "PATENTS",
          "type": "blob",
          "size": 1.26953125,
          "content": "Additional IP Rights Grant (Patents)\n\n\"This implementation\" means the copyrightable works distributed by\nGoogle as part of the Dart Project.\n\nGoogle hereby grants to you a perpetual, worldwide, non-exclusive,\nno-charge, royalty-free, irrevocable (except as stated in this\nsection) patent license to make, have made, use, offer to sell, sell,\nimport, transfer, and otherwise run, modify and propagate the contents\nof this implementation of Dart, where such license applies only to\nthose patent claims, both currently owned by Google and acquired in\nthe future, licensable by Google that are necessarily infringed by\nthis implementation of Dart. This grant does not include claims that\nwould be infringed only as a consequence of further modification of\nthis implementation. If you or your agent or exclusive licensee\ninstitute or order or agree to the institution of patent litigation\nagainst any entity (including a cross-claim or counterclaim in a\nlawsuit) alleging that this implementation of Dart or any code\nincorporated within this implementation of Dart constitutes direct or\ncontributory patent infringement, or inducement of patent\ninfringement, then any patent rights granted to you under this License\nfor this implementation of Dart shall terminate as of the date such\nlitigation is filed.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.564453125,
          "content": "A set of utility libraries for Dart that makes using many Dart libraries easier\nand more convenient, or adds additional functionality.\n\n[![Build Status](https://github.com/google/quiver-dart/workflows/Dart%20CI/badge.svg)](https://github.com/google/quiver-dart/actions?query=workflow%3A\"Dart+CI\"+branch%3Amaster)\n[![Coverage Status](https://img.shields.io/coveralls/google/quiver-dart.svg)](https://coveralls.io/r/google/quiver-dart)\n[![Pub](https://img.shields.io/pub/v/quiver.svg)](https://pub.dev/packages/quiver)\n\n## Documentation\n\n[API Docs](https://pub.dev/documentation/quiver/latest/) are available.\n\n## Main Libraries\n\n## [quiver.async][]\n\nUtilities for working with Futures, Streams and async computations.\n\n`collect` collects the completion events of an `Iterable` of `Future`s into a\n`Stream`.\n\n`enumerate` and `concat` represent `Stream` versions of the same-named\n[quiver.iterables][] methods.\n\n`StreamBuffer` allows for the orderly reading of elements from a stream, such as\na socket.\n\n`FutureStream` turns a `Future<Stream>` into a `Stream` which emits the same\nevents as the stream returned from the future.\n\n`StreamRouter` splits a Stream into multiple streams based on a set of\npredicates.\n\n`CountdownTimer` is a simple countdown timer that fires events in regular\nincrements.\n\n`Metronome` is a self-correcting alternative to `Timer.periodic`. It provides a\nsimple, tracking periodic stream of `DateTime` events with optional anchor time.\n\n`stringFromByteStream` constructs a string from a stream of byte lists.\n\n[quiver.async]:\n  https://pub.dev/documentation/quiver/latest/quiver.async/quiver.async-library.html\n\n## [quiver.cache][]\n\n`Cache` is a semi-persistent, asynchronously accessed, mapping of keys to\nvalues. Caches are similar to Maps, except that the cache implementation might\nstore values in a remote system, so all operations are asynchronous, and caches\nmight have eviction policies.\n\n`MapCache` is a Cache implementation backed by a Map.\n\n[quiver.cache]:\n  https://pub.dev/documentation/quiver/latest/quiver.cache/quiver.cache-library.html\n\n## [quiver.check][]\n\n`checkArgument` throws `ArgumentError` if the specified argument check\nexpression is false.\n\n`checkListIndex` throws `RangeError` if the specified index is out of bounds.\n\n`checkState` throws `StateError` if the specified state check expression is\nfalse.\n\n[quiver.check]:\n  https://pub.dev/documentation/quiver/latest/quiver.check/quiver.check-library.html\n\n## [quiver.collection][]\n\n`listsEqual`, `mapsEqual` and `setsEqual` check collections for equality.\n\n`indexOf` finds the first index of an item satisfying a predicate.\n\n`LruMap` is a map that removes the least recently used item when a threshold\nlength is exceeded.\n\n`Multimap` is an associative collection that maps keys to collections of values.\n\n`BiMap` is a bidirectional map and provides an inverse view, allowing lookup of\nkey by value.\n\n`TreeSet` is a balanced binary tree that offers a bidirectional iterator, the\nability to iterate from an arbitrary anchor, and 'nearest' search.\n\n[quiver.collection]:\n  https://pub.dev/documentation/quiver/latest/quiver.collection/quiver.collection-library.html\n\n## [quiver.core][]\n\n`Optional` is a way to represent optional values without allowing `null`.\n\n`hashObjects`, `hash2`, `hash3`, and `hash4` generate high-quality hashCodes for\na list of objects, or 2, 3, or 4 arguments respectively.\n\n[quiver.core]:\n  https://pub.dev/documentation/quiver/latest/quiver.core/quiver.core-library.html\n\n## [quiver.iterables][]\n\n`concat`, `count`, `cycle`, `enumerate`, `merge`, `partition`, `range`, and\n`zip` create, transform, or combine Iterables in different ways, similar to\nPython's itertools.\n\n`min`, `max`, and `extent` retrieve the minimum and maximum elements from an\niterable.\n\n`GeneratingIterable` is an easy way to create lazy iterables that produce\nelements by calling a function. A common use-case is to traverse properties in\nan object graph, like the parent relationship in a tree.\n\n`InfiniteIterable` is a base class for Iterables that throws on operations that\nrequire a finite length.\n\n[quiver.iterables]:\n  https://pub.dev/documentation/quiver/latest/quiver.iterables/quiver.iterables-library.html\n\n## [quiver.pattern][]\n\npattern.dart container utilities for work with `Pattern`s and `RegExp`s.\n\n`Glob` implements glob patterns that are commonly used with filesystem paths.\n\n`matchesAny` combines multiple Patterns into one, and allows for exclusions.\n\n`matchesFull` returns true if a Pattern matches an entire String.\n\n`escapeRegex` escapes special regex characters in a String so that it can be\nused as a literal match inside of a RegExp.\n\n[quiver.pattern]:\n  https://pub.dev/documentation/quiver/latest/quiver.pattern/quiver.pattern-library.html\n\n## [quiver.strings][]\n\n`isBlank` checks if a string is `null`, empty or made of whitespace characters.\n\n`isNotBlank` checks if a string is not `null`, and not blank.\n\n`isEmpty` checks if a string is `null` or empty.\n\n`isNotEmpty` checks if a string is not `null` and not empty.\n\n`equalsIgnoreCase` checks if two strings are equal, ignoring case.\n\n`compareIgnoreCase` compares two strings, ignoring case.\n\n`loop` allows you to loop through characters in a string starting and ending at\narbitrary indices. Out of bounds indices allow you to wrap around the string,\nsupporting a number of use-cases, including:\n\n- Rotating: `loop('lohel', -3, 2) => 'hello'`\n- Repeating, like `String`'s `operator*`, but with better character-level\n  control, e.g.: `loop('la ', 0, 8) => 'la la la' // no trailing space`\n- Tailing: `loop('/path/to/some/file.txt', -3) => 'txt'`\n- Reversing: `loop('top', 3, 0) => 'pot'`\n\n[quiver.strings]:\n  https://pub.dev/documentation/quiver/latest/quiver.strings/quiver.strings-library.html\n\n## [quiver.time][]\n\n`Clock` provides points in time relative to the current point in time, for\nexample: now, 2 days ago, 4 weeks from now, etc. For testability, use Clock\nrather than other ways of accessing time, like `new DateTime()`, so that you can\nuse a fake time function in your tests to control time.\n\n`Now` is a typedef for functions that return the current time in microseconds,\nsince Clock deals in DateTime which only have millisecond accuracy.\n\n`aMicrosecond`, `aMillisecond`, `aSecond`, `aMinute`, `anHour`, `aDay`, and\n`aWeek` are unit duration constants to allow writing for example:\n\n- `aDay` vs. `const Duration(days: 1)`\n- `aSecond * 30` vs. `const Duration(seconds: 30)`\n\n[quiver.time]:\n  https://pub.dev/documentation/quiver/latest/quiver.time/quiver.time-library.html\n\n## Testing Libraries\n\nThe Quiver testing libraries are intended to be used in testing code, not\nproduction code. It currently consists of fake implementations of some Quiver\ninterfaces.\n\n## [quiver.testing.async][]\n\n`FakeAsync` enables testing of units which depend upon timers and microtasks. It\nsupports fake advancements of time and the microtask queue, which cause fake\ntimers and microtasks to be processed. A `Clock` is provided from which to read\nthe current fake time. Faking synchronous or blocking time advancement is also\nsupported.\n\n[quiver.testing.async]:\n  https://pub.dev/documentation/quiver/latest/quiver.testing.async/quiver.testing.async-library.html\n\n## [quiver.testing.equality][]\n\n`areEqualityGroups` is a matcher that supports testing `operator==` and\n`hashCode` implementations.\n\n[quiver.testing.equality]:\n  https://pub.dev/documentation/quiver/latest/quiver.testing.equality/quiver.testing.equality-library.html\n\n## [quiver.testing.time][]\n\n`FakeStopwatch` is a Stopwatch that uses a provided `now()` function to get the\ncurrent time.\n\n[quiver.testing.time]:\n  https://pub.dev/documentation/quiver/latest/quiver.testing.time/quiver.testing.time-library.html\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.0810546875,
          "content": "# https://dart.dev/guides/language/analysis-options\ninclude: package:lints/recommended.yaml\n\nlinter:\n  rules:\n    - always_declare_return_types\n    - always_put_required_named_parameters_first\n    - avoid_bool_literals_in_conditional_expressions\n    - avoid_classes_with_only_static_members\n    - avoid_field_initializers_in_const_classes\n    - avoid_slow_async_io\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    - cancel_subscriptions\n    - directives_ordering\n    - flutter_style_todos\n    - no_adjacent_strings_in_list\n    - prefer_asserts_in_initializer_lists\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    - prefer_final_in_for_each\n    - prefer_foreach\n    - prefer_if_elements_to_conditional_expressions\n    - prefer_single_quotes\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - test_types_in_equals\n    - throw_in_finally\n    - unnecessary_parenthesis\n    - unnecessary_statements\n    - use_super_parameters\n"
        },
        {
          "name": "dart_test.yaml",
          "type": "blob",
          "size": 0.26953125,
          "content": "# Format: https://github.com/dart-lang/test/blob/master/doc/configuration.md.\n\n# TODO(https://github.com/dart-lang/test/issues/772): Headless chrome timeout.\noverride_platforms:\n  chrome:\n    settings:\n      headless: false\n\ntags:\n  \"fails-on-dart2js\":\n  \"fails-on-dartdevc\":\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.482421875,
          "content": "name: quiver\ndescription: >-\n  Quiver is a set of utility libraries for Dart that makes using many Dart\n  libraries easier and more convenient, or adds additional functionality.\nrepository: https://github.com/google/quiver-dart\nversion: 3.2.2\n\n# When updating SDK lower bound, also update .github/workflows/dart.yml to test\n# against the new lower bound.\nenvironment:\n  sdk: '>=2.17.0 <4.0.0'\n\ndependencies:\n  matcher: ^0.12.10\n\ndev_dependencies:\n  lints: ^2.0.0\n  path: ^1.8.0\n  test: ^1.16.0\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}