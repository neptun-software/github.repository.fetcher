{
  "metadata": {
    "timestamp": 1736710548572,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "macosui/macos_ui",
      "stars": 1916,
      "defaultBranch": "dev",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.60546875,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n.vscode\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n.fvm/\nmetrics\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n/example/detective_connect.txt\n\ncoverage_report\ncoverage\nexample/macos/Flutter/GeneratedPluginRegistrant.swift\nexample/devtools_options.yaml\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 4d7946a68d26794349189cf21b3f68cc6fe61dcb\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.474609375,
          "content": "## [2.1.5]\n### 🛻 Migrated 🛻\n* Migrate to Flutter’s new Color API.\n\n## [2.1.4]\n### 🛠️ Fixed 🛠️\n* Fix incorrect barrier color when calling `showMacosAlertDialog` when dark mode is enabled.\n\n## [2.1.3]\n### 🛠️ Fixed 🛠️\n* Fix `ToolbarOverflowButton` only reacting to every second click.\n\n## [2.1.2]\n### 🛠️ Updated 🛠️\n* Add “Older macOS versions” section to README\n* Add Flutter version constraints to prevent the following error:\n  ```\n  Package validation found the following error:\n  * pubspec.yaml allows Flutter SDK version 1.9.x, which does not support the flutter.plugin.platforms key.\n    Please consider increasing the Flutter SDK requirement to ^1.10.0 (environment.sdk.flutter)\n  ```\n\n## [2.1.1]\n* Fixed a bug where `MacosPulldownMenuItem` would not show an alert dialog when tapped.\n\n## [2.1.0]\n* Updated dependencies\n* Support macOS 15\n\n## [2.0.9]\n### 🛠️ Updated 🛠️\n* Add `expandDisclosureItems` flag to `SidebarItem` to optionally (default not changed) expand disclosure items initially\n\n## [2.0.8]\n### 🛠️ Updated 🛠️\n* Fixed `SidebarItem` text overflowing.\n\n## [2.0.7]\n### 🛠️ Updated 🛠️\n* Made most widgets aware of the user’s accent color and window state by adding respective fields to `MacosThemeData`.\n* `MacosCheckbox` has received a facelift to mimic the look and feel of native macOS checkboxes better.\n\n## [2.0.6]\n### 🛠️ Updated 🛠️\n* Implemented value equality for `MacosThemeData`.\n\n## [2.0.5]\n### 🛠️ Fixed 🛠️\n* Fixed `MacosRadioButton` check null value issue.\n\n## [2.0.4]\n### 🔄 Updated 🔄\n* Added `initialTime` parameter to `MacosTimePicker`, allowing to set an initial time for the picker.This provides more customization options for selecting time.\n\n## [2.0.3]\n### 🛠️ Fixed 🛠️\n* Fixed a bug that caused the sidebar to appear darker than intended.\n\n### 🔄 Updated 🔄\n* `SidebarItems` has now respects the user’s selected accent color and mimics the look of macOS’ sidebar items more closely.\n\n## [2.0.2]\n### 🛠️ Fixed 🛠️\n* Fixed images in generated documentation.\n\n## [2.0.1]\n### 🔄 Updated 🔄\n* `PushButton` has received a facelift. It now mimics the look and feel of native macOS buttons more closely.\n    * **Note:** As a result, its `pressedOpacity` property and the `PushButtonTheme` class have been deprecated.\n\n## [2.0.0]\n### 🚨 Breaking Changes 🚨\n* `macos_ui` has been migrated to utilize [macos_window_utils](https://pub.dev/packages/macos_window_utils) under the hood, which provides the following benefits:\n    * Window animation smoothness is drastically improved, particularly when miniaturizing and deminiaturizing the application window.\n    * Some visual artifacts that occurred while the window was being (de)miniaturized (such as the application's shadow going missing) no longer occur.\n    * The sidebar remains transparent when the app's brightness setting mismatches the OS setting.\n    * Wallpaper tinting is now supported.\n    * To migrate an existing application, please refer to the “Modern window look” section in the README.\n\n* Support for Flutter 3.10 and Dart 3\n* `PushButton` has been updated to support the `ControlSize` enum.\n    * The `buttonSize` property has been changed to `controlSize`.\n    * Buttons can now be any of the following sizes: mini, small, regular, or large.\n* `PushButton.isSecondary` is now `PushButton.secondary`.\n* `MacosAlertDialog`: `primaryButton` and `secondaryButton` are now declared to be of type `PushButton`.\n* `RelevanceIndicator` has been deprecated\n* `MacosTypography` white and black are now factory constructors called `darkOpaque()` and `lightOpaque()` to reflect\n  Apple's naming conventions.\n\n### ✨ New ✨\n* `MacosSwitch` has been completely rewritten and now matches the native macOS switch in appearance and behavior.\n* A `ControlSize` enum has been introduced, which will allow widgets to more closely match their native counterparts.\n* `MacosTypography`\n    * You can now call `MacosTypography.of(context)` as a shorthand for retrieving the typography used in your `MacosTheme`.\n    * `MacosFontWeight` allows using Apple-specific font weights like `w510`, `w590`, and `w860`.\n* Localization\n    * Added support for `weekdayAbbreviations` and `monthAbbreviations` to `MacosDatePicker`.\n    * Added support for `dateFormat` to `MacosDatePicker`.\n    * Added support for `startWeekOnMonday` to `MacosDatePicker`.\n\n### 🔄 Updated 🔄\n* `MacosColor` has been updated with some previously missing elements.\n* `PushButton`\n    * Now uses the correct `body` text style instead of the incorrect `headline`\n* `PushButton`'s secondary and disabled colors more closely match their native counterparts.\n* `MacosCheckbox` appearance more closely matches its native counterpart.\n* `MacosAlertDialog`\n    * `primaryButton` and `secondaryButton` are now required to have `controlSize`s of `ControlSize.large`.\n    * Docs now suggest that `appIcon` should be of size 64x64.\n* `Toolbar` now uses the correct `title3` text style instead of the incorrect `headline`\n* `MacosTheme` sets the global typography more efficiently\n* `HelpButton` now sizes itself according to specification\n* `ResizablePane` can now disallow the usage of its internal scrollbar via the  `ReziablePane.noScrollBar` constructor.\n\n### 🛠️ Fixed 🛠️\n* Clicking on the calendar elements in `MacosDatePicker` has better UX\n* `ToolBar`s in use where a `SideBar` is not present will now have their title's avoid the traffic lights (native window controls).\n* `MacosTypography.darkOpaque()` and `MacosTypography.lightOpaque()` now conform to specification by using `MacosColors.labelColor`\n* Ensure builds targeting web do not utilize any `macos_window_utils` code\n* Ensure builds targeting web are themed correctly\n\n## [1.12.5]\n* Fixed a bug where the `Sidebar.key` parameter wasn't used, which caused certain layouts to be unachievable.\n\n## [1.12.4]\n* Default the `_selectedDay` state variable to be 1 when selecting the previous/next month from widget to ensure new date is valid for `_formatAsDateTime()` method (https://github.com/flutter/flutter/issues/123669 & https://github.com/macosui/macos_ui/pull/402)\n\n## [1.12.3]\n* Added support for `routerConfig` to `MacosApp.router`. ([#388](https://github.com/macosui/macos_ui/issues/388))\n\n## [1.12.2]\n* Fixed a bug where clicking on a overflowed toolbar item with a navigation callback wouldn't work ([#346](https://github.com/GroovinChip/macos_ui/issues/346)).\n\n## [1.12.1+1]\n* Fixed a typo in the December abbreviation displayed in the `MacosDatePicker`.\n\n## [1.12.1]\n* Fix SidebarItem's leading icons not respecting the theme's primary color\n\n## [1.12.0]\n✨ New widget: `SliverToolBar`\n\n## [1.11.1]\n* Fixed an issue where the `MacosSearchField` would not perform an action when an item was selected.\n\n## [1.11.0]\n* 🚨 Breaking Changes 🚨\n* `ResizablePane` can now be vertically resized\n    * `ResizablePane.startWidth` has been changed to `ResizablePane.startSize`\n    * `ResizablePane.minWidth` has been changed to `ResizablePane.minSize`\n    * `ResizablePane.maxWidth` has been changed to `ResizablePane.maxSize`\n\n## [1.10.0]\n🚨 Breaking Changes 🚨\n* `MacosScrollbar` has been completely overhauled and now resembles the native macOS scrollbar in appearance and\n  behavior. Previously, it wrapped the material scrollbar, and now creates a custom scrollbar that extends\n  `RawScrollbar`. This resulted in the removal of several material-based properties for the scrollbar, and\n  `ContentArea.builder` is once again a `ScrollableWidgetBuilder`! 🎉\n* Removed material-based scrollbar properties from `MacosScrollbarThemeData`\n\nOther changes:\n* Added implementation of `MacosDisclosureButton`\n* Fixed a bug where `CapacityIndicator` only worked correctly for splits = 10\n\n## [1.9.1]\n* Adds optional `initialDate` to `MacosDatePicker`\n\n## [1.9.0]\n* Implement `MacosSlider`\n\n## [1.8.0]\n🚨 Breaking Changes 🚨\n* `ContentArea.builder` has been changed from a `ScrollableWidgetBuilder` to a `WidgetBuilder` due to\n  changes in Flutter 3.7. The `MacosScrollbar` widget needs to undergo radical changes in order to achieve the\n  native macOS scrollbar look and feel in the future, so this will be revisited at that time.\n\nOther changes:\n* Per Flutter 3.7.0: Replace deprecated `MacosTextField.toolbarOptions` with `MacosTextField.contextMenuBuilder`\n* Ensure the color panel releases when it is closed\n* Avoid render overflows in the `Sidebar` when the window height is resized below a certain threshold ([#325](https://github.com/GroovinChip/macos_ui/issues/325))\n* Update `MacosScrollbar.thumbVisibility` with the latest change introduced in Flutter 3.7\n* Update `README.md` to address issues [#325](https://github.com/GroovinChip/macos_ui/issues/325) & [#332](https://github.com/GroovinChip/macos_ui/issues/332)\n\n## [1.7.6]\n* Fixed a bug where `MacosPopupButton` would report that a `ScrollController` was not attached to any views\n\n## [1.7.5]\n* Addressed Flutter 3.3 analyzer warnings\n\n## [1.7.4]\n* Added `backgroundColor` to `MacosSheet`\n\n## [1.7.3]\n* Fixed an issue where the `title` property of `TitleBar` did not apply a fitting `DefaultTextStyle`\n\n## [1.7.2]\n* Added padding as parameter to MacosTabView constructor.\n\n## [1.7.1]\n* Fixed an issue where end sidebar window breakpoints were not respected\n\n## [1.7.0]\n* ✨ New\n    * `MacosImageIcon` widget. Identical to the `ImageIcon` from `flutter/widgets.dart` except it will obey a\n      `MacosIconThemeData` instead of an `IconThemeData`\n    * `SidebarItemSize` enum, which determines the height of sidebar items and the maximum size their `leading` widgets.\n    * `SidebarItem` now accepts an optional `trailing` widget.\n* 🔄 Updated\n    * `SidebarItems` now supports `SidebarItemSize` via the `itemSize` property, which defaults to\n      `SidebarItemSize.medium`. The widget has been updated to manage the item's height, the maximum size of the item's\n      leading widget, and the font size of the item's label widget according to the given `SidebarItemSize`.\n    * The example app has been tweaked to use some icons from the SF Symbols 4 Beta via the new `MacosImageIcon` widget.\n\n## [1.6.0]\n* New widgets: `MacosTabView` and `MacosTabView`\n* BREAKING CHANGE: `Label.yAxis` has been renamed to `Label.crossAxisAlignment`\n* BREAKING CHANGE: `TooltipTheme` and `TooltipThemeData` have been renamed to `MacosTooltipTheme` and\n  `MacosTooltipThemeData`\n\n## [1.5.1]\n* Correct the placement of the leading widget in disclosure sidebar items [#268](https://github.com/GroovinChip/macos_ui/issues/268)\n* Improve the sizing of the disclosure item indicator\n\n## [1.5.0]\n* Adds `endSidebar` to `MacosWindow`\n\n## [1.4.2]\n* Fixes RenderFlex overflowed in `MacosListTile` [#264](https://github.com/GroovinChip/macos_ui/issues/264)\n\n## [1.4.1+1]\n* Update `pubspec.yaml` with `repository` and new `homepage` field.\n\n## [1.4.1]\n* Fixes an issue where if the app was displayed in full screen mode, an opaque empty toolbar would appear at the top [#249](https://github.com/GroovinChip/macos_ui/issues/249)\n\n## [1.4.0]\n* Migration to Flutter 3.0\n    * Minimum dart sdk version is now 2.17.0\n    * Use new super parameters feature\n    * Update to `flutter_lints: ^2.0.1` with subsequent fixes\n    * `MacosScrollbar` API more closely matches its material counterpart\n* Update `MacosColor` to more closely match the `Color` class\n    * Adds `MacosColor.fromARGB` constructor\n    * Adds `MacosColor.fromRGBO` constructor\n    * Adds `alphaBlend` function\n    * Adds `getAlphaFromOpacity` function\n\n## [1.3.0]\n* Add a `top` property to `Sidebar`\n* Tweak the default `primaryColor` value in `MacosThemeData`.\n\n## [1.2.1+1]\n* Fix `MacosApp` documentation\n\n## [1.2.1]\n* Fixes issue with error thrown when toolbar actions are modified programmatically [#239](https://github.com/GroovinChip/macos_ui/issues/239)\n\n## [1.2.0]\n* Improved styling for `MacosTooltip`:\n    * Better color and shadows.\n    * Displays left-aligned, below the mouse cursor.\n* New widget: `ToolBarDivider` that can be used as a divider (vertical/horizontal line) in the `ToolBar` [#231](https://github.com/GroovinChip/macos_ui/issues/231).\n* All toolbar widgets can now receive a `tooltipMessage` property to display a `MacosTooltip` when user hovers over them [#232](https://github.com/GroovinChip/macos_ui/issues/232).\n\n## [1.1.0+1]\n* Minor improvements to `README.md`\n\n## [1.1.0]\n* New functionality for `MacosSearchField`\n    * Shows a list of search results in an overlay below the field\n    * A result can be selected and customized.\n* A `MacosOverlayFilter` widget can now be used to apply the blurry \"frosted glass\" effect on surfaces.\n* New widget: `CustomToolbarItem` that enables any widget to be used in the `Toolbar`.\n\n## [1.0.1]\n* Improvements to the graphical `MacosTimePicker`\n    * Better color gradient on the border\n    * Better inner shadow\n    * Minor size adjustments\n    * API improvements\n* Throw an exception if `MacosColorWell` is clicked on a non-macOS platform\n\n## [1.0.0+1]\n* Minor documentation fix for [MacosColorWell]\n\n## [1.0.0]\n* First stable release 🎉\n\n## [0.16.0]\n* New widget: `MacosTimePicker` (textual style only!)\n\n## [0.15.0]\n* New widget: `MacosColorWell`\n\n## [0.14.0]\n* New widget: `ToolBar`, which can be used to create a toolbar at the top of the `MacosScaffold`. Toolbar items include `ToolBarIconButton`, `ToolBarPulldownButton`, and `ToolBarSpacer` widgets.\n* New widget: `MacosSearchField`, which creates a macOS-style search field.\n* Breaking change: the title bar (`TitleBar`) should now be set via the `titlebar` property of `MacosWindow` (was previously a property of `MacosScaffold`). If you are using a title bar in your app, please note a small change you would need to make in your `macos/Runner/MainFlutterWindow.swift` file, described in the \"Modern window look\" section of the README file.\n* Fix the graphical version of `MacosDatePicker` having an incorrect current day text color in light theme\n\n## [0.13.1]\n* Minor style fixes for `MacosTextField`\n\n## [0.13.0]\n* New widget: `MacosDatePicker`\n\n## [0.12.4+3]\n* Move theme classes to their own files in the `/theme` directory\n\n## [0.12.4+2]\n* Switch over to `flutter_lints`\n\n## [0.12.4+1]\n* Improve visual design of `MacosPopupButton` and `MacosPulldownButton`, to better match the styling and translucency effect of Apple design.\n* Remove unnecessary properties of `MacosPopupButton`\n\n## [0.12.4]\n* New widget: `MacosPulldownButton`, which can be used as a dropdown for selecting actions with either text or an icon as its title.\n\n## [0.12.3+1]\n* Fix `padding` on `MacosAlertDialog` when `supress` is null [#188](https://github.com/GroovinChip/macos_ui/issues/188)\n\n## [0.12.3]\n* Remove `MacosScrollbar` from `ContentArea` widget (fixes [#170](https://github.com/GroovinChip/macos_ui/issues/170))\n* Remove useless bundled fonts (fixes [#187](https://github.com/GroovinChip/macos_ui/issues/187))\n* Allow users to customize the mouse cursor for sidebar items (fixes [#181](https://github.com/GroovinChip/macos_ui/issues/181))\n* Fix active sidebar item icon color (fixes [#190](https://github.com/GroovinChip/macos_ui/issues/190))\n\n## [0.12.2+2]\n* Added `padding` property to `MacosIconButton` and `MacosIconButtonTheme`.\n\n## [0.12.2+1]\n* Adds missing `merge` methods to `MacosThemeData` and widget `ThemeData` classes, making it possible to use them properly with any number of user-provided custom properties.\n\n## [0.12.2]\n* Fixes `MacosThemeData` to properly apply user-defined `pushButtonTheme`, `helpButtonTheme`, and `tooltipTheme` properties.\n\n## [0.12.1]\n* Sidebar and ResizablePane more precisely track cursor location\n* Sidebar can now be closed by dragging below its minWidth\n* Sidebar can now be configured to snap into place when dragged near its startWidth\n\n## [0.12.0+1]\n* Reverts bundling the `native_context_menu` plugin per [#179](https://github.com/GroovinChip/macos_ui/issues/179)\n\n## [0.12.0]\n* New Widget: `MacosPopupButton`\n\n\n## [0.10.2]\n* Updates to `MacosIconButton` and `MacosBackButton`:\n    * Added a hover effect when mouse moves over the buttons ([#168](https://github.com/GroovinChip/macos_ui/issues/168))\n    * Added `hoverColor` property.\n    * Default shape is now `BoxShape.rectangle` with border radius, as it seems to be the most used in macOS design.\n\n## [0.10.1]\n* Added support for transparent sidebar. Please note that changes to `MainFlutterWindow.swift` are required for this to work. [(#175)](https://github.com/GroovinChip/macos_ui/pull/175)\n\n## [0.10.0+1]\n* Update `native_context_menu` dependency\n\n## [0.10.0]\n* New widget - `MacosIcon`! `MacosIcon` is identical to regular icons, with the exception that it respects a `MacosTheme`. Also includes corresponding theme classes\n* `MacosThemeData` now sets a global, configurable `iconTheme` for `MacosIcon`s\n\n## [0.9.3]\n* Update to `PushButton`:\n    * Added `isSecondary` property\n\n## [0.9.2]\n* Nearly all `MouseRegion`s have been updated to use `SystemMouseCursors.basic` in order to more closely adhere to Apple norms\n* `mouseCursor` properties have been added to most buttons\n\n## [0.9.1]\n* Added top-level theming for `MacosIconButton`\n    * Introduces the `MacosIconButtonTheme` InheritedTheme and the `MacosIconButtonThemeData` theme class\n* Updates `MacosThemeData` and `MacosIconButton` to use the new `MacosIconButtonThemeData`\n* Removes an unnecessary setting of VisualDensity from `MacosThemeData.dark()`\n\n## [0.9.0]\n* Added [native_context_menu](https://pub.dev/packages/native_context_menu) as a dependency for native context menus!\n\n## [0.8.2]\n* Updates to `MacosListTile`:\n    * Added `leadingWhitespace` property\n    * Added `onClick` callback\n    * Added `onLongPress` callback\n    * Added `mouseCursor` property\n\n## [0.8.1]\n* Fix the outer border of `MacosSheet` not having a border radius\n\n## [0.8.0]\n* New Widget: `MacoSheet`\n* New Widget: `MacosListTile`\n\n## [0.7.3]\n* Fixed bug where cursor would not change caret location on mouse click\n\n## [0.7.2]\n* Upgraded various `copyWith` functions\n* Added `==` and `hashCode` to various classes\n\n## [0.7.1]\n* Add generics support to `MacosRadioButton` - Thank you, [Sacha Arbonel](https://github.com/sachaarbonel)!\n\n## [0.7.0+2]\n* Add note in docs that a `Builder` is required for manual sidebar toggling to work.\n\n## [0.7.0+1]\n* Fix docs for `PushButtonThemeData`\n* Update `dart_code_metrics` dependency\n\n## [0.7.0]\n* Adds: `MacosWindow`\n* Improved `MacosScaffold`\n\n## [0.6.2]\n* Chore: Remove box shadows from `MacosIconButton`\n\n## [0.6.1]\n* Fix `builder` property in `MacosApp` never being used ([#148](https://github.com/GroovinChip/macos_ui/issues/148))\n\n## [0.6.0]\n* Improved `MacosAlertDialog` design\n* Added `showMacosAlertDialog` to display a `MacosAlertDialog` with standard macOS animations and behaviour.\n\n## [0.5.2]\n* Fixes maximum height issue with `MacosAlertDialog`\n\n## [0.5.1]\n* Adds `suppress` widget parameter to `MacosAlertDialog`\n\n## [0.5.0]\n* Adds `MacosAlertDialog`\n\n## [0.4.2]\n* Add `bottom` Item to `Sidebar`\n\n## [0.4.1]\n* Update `MacosColors`\n* Fix `Label` alignment\n\n## [0.4.0]\n* Adds the `SidebarItem` widget\n* Fixes an alignment issue with `MacosTextField`\n\n## [0.3.0]\n* Add `MacosPrefix` to widgets/classes with names that overlap with the material/cupertino libraries:\n    * `TextField` -> `MacosTextField`\n    * `Scaffold` -> `MacosTextField`\n    * `IconButton` -> `MacosIconButton`\n    * `BackButton` -> `MacosBackButton`\n    * `Scrollbar` -> `MacosScrollbar`\n    * `Checkbox` -> `MacosCheckbox`\n    * `RadioButton` -> `MacosRadioButton`\n    * `Tooltip` -> `MacosTooltip`\n    * `Typography` -> `MacosTypography`\n    * `Switch` -> `MacosSwitch`\n\n## [0.2.4]\n* Fix text field prefix icon alignment\n\n## [0.2.3]\n* Add `canvasColor` to `MacosThemeData`. `Scaffold` now uses this as its default background color.\n\n## [0.2.2]\n* Add new `MacosColor` and `MacosColors` classes\n* Rename `colors.dart` to `macos_dynamic_color`\n\n## [0.2.1]\n* `IconButton` updates:\n    - The `color` property is now `backgroundColor`\n    - The widget now takes a `Widget icon` rather than `IconData iconData` for better control over widget properties\n    - Deprecate and remove internal `foregroundColor` value\n\n## [0.2.0]\n* New widget: `BackButton`, `IconButton`\n* Add `VisualDensity` to `MacosThemeData`\n* Ensure localizations get returned in `MacosApp`\n\n## [0.1.4]\n* Add `startWidth` properties to `ResizablePane` and `Sidebar`\n* Implement `Scrollbar`\n* Implement `MacosScrollBehavior`\n\n## [0.1.3]\n* Fix `TextField` on Flutter v2.2.0\n\n## [0.1.2]\n* Updated the theme api\n    * Properties in `MacosThemeData` and in `Typography` can't be null\n    * Renamed `DynamicColorX` to `MacosDynamicColor`\n    * Added the method `lerp` on all theme data classes.\n\n## [0.1.1]\n* Implemented `Label` ([#61](https://github.com/GroovinChip/macos_ui/issues/61))\n* Capacity Indicator now works as expected ([#49](https://github.com/GroovinChip/macos_ui/issues/49))\n* Clear button is now aligned to text ([#82](https://github.com/GroovinChip/macos_ui/issues/82))\n\n## [0.1.0]\n* pub.dev release\n\n## [0.0.13]\n* Documentation for `ScaffoldScope`\n\n## [0.0.12]\n* Implement `Tooltip`\n* Add mouse cursors to help button, push button and `TextField`\n\n## [0.0.11]\n* Implement `TextField`\n\n## [0.0.10]\n* Revamp `Scaffold` [#26](https://github.com/GroovinChip/macos_ui/issues/26)\n\n## [0.0.9+1]\n* `CapacityIndicator` colors can now be set on its constructor\n* Accessibility support for most of the widgets\n* Diagnostics Properties (dev tools) for most of the widgets\n\n## [0.0.9]\n* Implemented `HelpButton`\n* Fixed [#49](https://github.com/GroovinChip/macos_ui/issues/49)\n\n## [0.0.7]\n* Implemented `Checkbox`\n* Implemented `RadioButton`\n\n## [0.0.6]\n* Update `Typography` with correct letter spacing and font weights\n* Add `brightnessOf` and `maybeBrightnessOf` functions to `MacosTheme`\n\n## [0.0.5]\n* Adds the `PushButton` widget along with `PushButtonTheme` and `PushButtonThemeData`\n* Removes the `height` property from `Typography`'s `TextStyle`s\n* Updates `Typography.headline`'s weight and letter spacing\n\n## [0.0.4]\n* Major theme refactor that more closely resembles flutter/material and flutter/cupertino\n    * The `Style` class is now `MacosThemeData`\n    * `MacosTheme` is now a `StatelessWidget` that returns a private `_InheritedMacosTheme`.\n      The static `MacosTheme.of(context)` is now defined here.\n    * `MacosApp` now takes a `theme` and `darkTheme` rather than `style` and `darkStyle`.\n      Additionally, there are minor changes to the way `MacosApp` is built that more closely\n      resemble how `MaterialApp` is built.\n\n## [0.0.3]\n\n* Implemented `Checkbox`\n* Implemented `ProgressCircle` and `ProgressBar`\n* Implemented the `Switch` widget\n\n## [0.0.2]\n\n* `Scaffold` widget\n* Fix `Typography` so that text color is shown appropriately based on Brightness\n\n## [0.0.1]\n\n* Project creation\n    * `MacosApp` widget\n    * Basic `Typography`\n    * Basic theming via `MacosTheme` and `Style`\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8984375,
          "content": "# Contributing to macos_ui\n\nThanks for checking out `macos_ui`! We appreciate your interest in contributing! Here are some \nbasic things you'll need to know to get started.\n\n## Branch structure\n\nThe default branch for this project is `dev`. Your work should take place in a branch checked out\nfrom here. `stable` is reserved for releases to pub.dev. All pull requests should therefore\ntarget `dev`.\n\n`dev`, `stable`, and `customer_testing` are protected branches.\n\n### The `stable` Branch\nThis branch is solely for pub releases. Only authorized maintainers may make pull requests to this branch.\n\n### The `customer_testing` branch\nThis branch is the ***only*** branch in this repository based on Flutter's `master` channel; every other branch is based on Flutter's `stable` channel. This is so that `macos_ui` can be included in Flutter's [tests](https://github.com/flutter/tests) repo. It is beneficial for `macos_ui` to be included there so that if any changes are introduced to Flutter that break `macos_ui`, we will be informed and can make the appropriate changes.\n\nOnly authorized maintainers may make pull requests to this branch.\n\n## Commit style\nThis repository uses [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/). Please ensure that you use them!\n\n## Pull Requests\nAs mentioned above, all pull requests should target `dev`.\n\nBefore opening your pull request, please ensure that the following requirements are met:\n* You have run `flutter pub get` at the package level\n* You have incremented the version number in `pubspec.yaml` properly\n* You have updated the `CHANGELOG.md` file accordingly\n* All code is properly formatted\n* There are no Dart analysis warnings\n* All tests pass\n\nA note for authorized maintainers: Pull requests should **always** be merged via GitHub and not via command-line.\n\n### Versioning\n\n`macos_ui` uses semantic versioning. Please ensure your updates follow this method accordingly.  \n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) [2021] [Reuben Turner]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 36.4892578125,
          "content": "# macos_ui\n\nFlutter widgets and themes implementing the current macOS design language.\n\nCheck out our **interactive widget gallery** online at https://macosui.github.io/macos_ui/#/\n\nGuides, codelabs, and other documentation can be found at https://macosui.dev\n\n[![pub package](https://img.shields.io/pub/v/macos_ui.svg)](https://pub.dev/packages/macos_ui)\n[![pub package](https://img.shields.io/pub/publisher/macos_ui.svg)](https://pub.dev/packages/macos_ui)  \n\n[![Flutter Analysis](https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml/badge.svg?branch=stable)](https://github.com/GroovinChip/macos_ui/actions/workflows/flutter_analysis.yml)\n[![Pana Analysis](https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml/badge.svg)](https://github.com/GroovinChip/macos_ui/actions/workflows/pana_analysis.yml)\n[![codecov](https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml/badge.svg)](https://github.com/GroovinChip/macos_ui/actions/workflows/codecov.yaml)\n[![codecov](https://codecov.io/gh/macosui/macos_ui/branch/dev/graph/badge.svg?token=1SZGEVVMCH)](https://codecov.io/gh/macosui/macos_ui)\n\n<img src=\"https://imgur.com/44iJB7H.png\" width=\"75%\"/>\n\n## 🚨 Usage notes\n### <img src=\"https://storage.googleapis.com/cms-storage-bucket/0dbfcc7a59cd1cf16282.png\" height=\"14\"/> Flutter channel\n`macos_ui` is developed against Flutter's `stable` channel. To ensure a smooth development experience with `macos_ui`, you should build your application on Flutter's `stable` channel.\n\n### <img src=\"https://storage.googleapis.com/cms-storage-bucket/0dbfcc7a59cd1cf16282.png\" height=\"14\"/> Platform Compatibility\n\npub.dev shows that `macos_ui` only supports macOS. This is because `macos_ui` calls some native code, and therefore \nspecifies macOS as a plugin platform in the `pubspec.yaml` file.\n\n`macos_ui` _technically_ will work on any platform that\nFlutter supports, **but you will get best results on macOS**. non-macOS platform support is ***not*** guaranteed.\n\nThe features of `macos_ui` that will _not_ work on platforms other than macOS due to calling native code are:\n* Anything related to `macos_window_utils`\n* The `MacosColors.controlAccentColor()` function\n* The `MacosColorWell` widget\n\n### <img src=\"https://imgur.com/TIP0V7H.png\" height=\"14\"/> Popups & window resizing\n\nSince at this time Flutter does not allow UI elements to overflow the bounds of the window, popups are constrained to\nthe available space.\n\nTherefore, if you are using widgets that create popups in your toolbar, like `ToolBarPopupButton`, you \nshould avoid allowing your application window to be resized below the height of your tallest popup.\n\n## Contents\n\n<details>\n<summary>Contributing & Resources</summary>\n\n- [Contributing](#contributing)\n- [Resources](#resources)\n</details>\n\n<details>\n<summary>Layout</summary>\n\n- [Layout](#layout)\n  - [MacosWindow](#macoswindow)\n  - [Sidebar](#sidebar)\n  - [MacosScaffold](#macosscaffold)\n  - [Modern Window Look](#modern-window-look)\n  - [ToolBar](#toolbar)\n  - [SliverToolBar](#SliverToolBar)\n  - [MacosListTile](#MacosListTile)\n  - [MacosTabView](#MacosTabView)\n</details>\n\n<details>\n<summary>Icons</summary>\n\n- [Icons](#icons)\n  - [MacosIcon](#MacosIcon)\n</details>\n\n<details>\n<summary>Buttons</summary>\n\n- [Buttons](#buttons)\n  - [MacosCheckbox](#macoscheckbox)\n  - [HelpButton](#helpbutton)\n  - [RadioButton](#radiobutton)\n  - [PulldownButton](#pulldownbutton)\n  - [PopupButton](#popupbutton)\n  - [PushButton](#pushbutton)\n  - [MacosSwitch](#macosswitch)\n  - [MacosSegmentedControl](#macossegmentedcontrol)\n</details>\n  \n<details>\n<summary>Dialogs & Sheets</summary>\n\n- [Dialogs & Sheets](#dialogs)\n  - [MacosAlertDialog](#MacosAlertDialog)\n  - [MacosSheet](#MacosSheet)\n</details>\n\n<details>\n<summary>Fields & Labels</summary>\n\n- [Fields](#fields)\n  - [MacosTextField](#macostextfield)\n  - [MacosSearchField](#macossearchfield)\n- [Labels](#labels)\n  - [MacosTooltip](#macostooltip)\n</details>\n\n<details>\n<summary>Indicators</summary>\n\n- [Indicators](#indicators)\n  - [Progress Indicators](#progress-indicators)\n    - [ProgressCircle](#progresscircle)\n    - [ProgressBar](#progressbar)\n  - [Level Indicators](#level-indicators)\n    - [CapacityIndicator](#capacityindicator)\n    - [RatingIndicator](#ratingindicator)\n</details>\n\n<details>\n<summary>Selectors</summary>\n\n- [Selectors](#selectors)\n  - [MacosDatePicker](#macosdatepicker)\n  - [MacosTimePicker](#macostimepicker)\n  - [MacosColorWell](#macoscolorwell)\n</details>\n\n<details>\n<summary>Older macOS versions</summary>\n\n- [Older macOS versions](#older-macos-versions)\n</details>\n\n---\n\n## Contributing\n\n`macos_ui` welcomes contributions! Please see `CONTRIBUTING.md` for more information.\n\n## Resources\n\n- [macOS Sonoma Figma kit](https://www.figma.com/file/M6K5L3GK0WJh6pnsASyVeE/macOS-Big-Sur-UI-Kit?node-id=1%3A2)\n- [macOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/designing-for-macos)\n- [macOS Design Resources](https://developer.apple.com/design/resources/)\n\n# Layout\n\n## MacosWindow\n\n`MacosWindow` is the basic frame for a macOS-style layout.\n\n<img src=\"https://imgur.com/olstQFC.png\" width=\"40%\"/>\n<img src=\"https://imgur.com/yFXsoSy.png\" width=\"40%\"/>\n\nIt supports a `Sidebar` on the left, an optional `TitleBar` at the top, and the rest of the window is typically filled out\nwith a `MacosScaffold`. \n\nA scope for the `MacosWindow` is provided by `MacosWindowScope`.\nThe sidebar can be toggled with `MacosWindowScope.of(context).toggleSidebar()`. **Please note** that you must wrap \nyour `MacosScaffold` in a `Builder` widget in order for this to work properly.\n\n<img src=\"https://imgur.com/IBbp5rN.gif\" width=\"75%\">\n\n## Sidebar\nA sidebar enables app navigation and provides quick access to top-level collections of content in your app.\n\nSidebars may be placed at the left or right of your app. To place a sidebar on the left, use the `MacosWindow.sidebar` property. To place a sidebar on the right, use the `MacosWindow.endSidebar` property.\n\n<img src=\"https://imgur.com/BfoHcXE.png\" width=\"75%\"/>\n\nExample usage:\n\n```dart\nint pageIndex = 0;\n\n...\n\nMacosWindow(\n  sidebar: Sidebar(\n    minWidth: 200,\n    builder: (context, scrollController) {\n      return SidebarItems(\n        currentIndex: pageIndex,\n        scrollController: scrollController,\n        itemSize: SidebarItemSize.large,\n        onChanged: (i) {\n          setState(() => pageIndex = i);\n        },\n        items: const [\n          SidebarItem(\n            label: Text('Page One'),\n          ),\n          SidebarItem(\n            label: Text('Page Two'),\n          ),\n        ],\n      );\n    },\n  ),\n  endSidebar: Sidebar(\n    startWidth: 200,\n    minWidth: 200,\n    maxWidth: 300,\n    shownByDefault: false,\n    builder: (context, _) {\n      return const Center(\n        child: Text('End Sidebar'),\n      );\n    },\n  ),\n),\n```\n\n## MacosScaffold\n\nThe `MacosScaffold` is what you might call a \"page\".\n\nThe scaffold has a `toolbar` property and a `children` property. `children` accepts a `ContentArea` widget and \nmultiple `ResizablePane` widgets. To catch navigation or routes below the scaffold, consider wrapping the \n`MacosScaffold` in a [`CupertinoTabView`](https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html). \nBy doing so, navigation inside the `MacosScaffold` will be displayed inside the `MacosScaffold` area instead of \ncovering the entire window. To push a route outside a `MacosScaffold` wrapped in a \n[`CupertinoTabView`](https://api.flutter.dev/flutter/cupertino/CupertinoTabView-class.html), use the root navigator \n`Navigator.of(context, rootNavigator: true)`\n\nSee the documentation for customizations and `ToolBar` examples.\n\n<img src=\"https://imgur.com/ePV2x2p.png\" width=\"75%\"/>\n\n<img src=\"https://imgur.com/76fpFE2.png\" width=\"75%\"/>\n\n## Modern window look\n\nA new look for macOS apps was introduced in Big Sur (macOS 11). To match that look in your Flutter app, macos_ui relies on [macos_window_utils](https://pub.dev/packages/macos_window_utils), which requires a minimum macOS deployment target of 10.14.6. Therefore, make sure to open the `macos/Runner.xcworkspace` folder of your project using Xcode and search for `Runner.xcodeproj`. Go to `Info` > `Deployment Target` and set the `macOS Deployment Target` to `10.14.6` or above. Then, open your project's `Podfile` (if it doesn't show up in Xcode, you can find it in your project's `macos` directory via VS Code) and set the minimum deployment version in the first line to `10.14.6` or above:\n\n```podspec\nplatform :osx, '10.14.6'\n```\n\nYou may also need to open up your app's `Runner.xcodeproj` in XCode and set the minimum deployment version there.\n\nNow, configure your window inside your `main()` as follows:\n\n```dart\n/// This method initializes macos_window_utils and styles the window.\nFuture<void> _configureMacosWindowUtils() async {\n  const config = MacosWindowUtilsConfig(\n    toolbarStyle: NSWindowToolbarStyle.unified,\n  );\n  await config.apply();\n}\n\nvoid main() async {\n  await _configureMacosWindowUtils();\n\n  runApp(const YourAppHere());\n}\n```\n\nPlease note that if you are using a title bar (`TitleBar`) in your `MacosWindow`, you should set the `toolbarStyle` of your window to `NSWindowToolbarStyle.expanded`, in order to properly align the close, minimize, zoom window buttons:\n\n```dart\nFuture<void> _configureMacosWindowUtils() async {\n  const config = MacosWindowUtilsConfig(\n    toolbarStyle: NSWindowToolbarStyle.expanded,\n  );\n  await config.apply();\n}\n```\n\nIn any other case, you should keep it as `NSWindowToolbarStyle.unified`.\n\n## ToolBar\n\nCreates a toolbar in the `MacosScaffold`. The toolbar appears below the title bar (if present) of the macOS app or integrates with it, by using its `title` property. \n\nA toolbar provides convenient access to frequently used commands and features (toolbar items). Different routes of your app could have different toolbars. \n\nToolbar items include `ToolBarIconButton`, `ToolBarPulldownButton`, and `ToolBarSpacer` widgets, and should be provided via the `items` property. The action of every toolbar item should also be provided as a menu bar command of your app.\n\nToolbars look best and are easiest to understand when they contain elements of the same type (so either use labels for every toolbar item or not).\n\nYou can use the `ToolBarSpacer` widgets to set the grouping of the different toolbar actions.\n\nAn example toolbar would be:\n\n```dart\nToolBar(\n  title: const Text('Untitled Document'),\n  titleWidth: 200.0,\n  leading: MacosBackButton(\n    onPressed: () => debugPrint('click'),\n    fillColor: Colors.transparent,\n  ),\n  actions: [\n    ToolBarIconButton(\n      label: \"Add\",\n      icon: const MacosIcon(\n        CupertinoIcons.add_circled,\n      ),\n      onPressed: () => debugPrint(\"Add...\"),\n      showLabel: true,\n    ),\n    const ToolBarSpacer(),\n    ToolBarIconButton(\n      label: \"Delete\",\n      icon: const MacosIcon(\n        CupertinoIcons.trash,\n      ),\n      onPressed: () => debugPrint(\"Delete\"),\n      showLabel: false,\n    ),\n    ToolBarPullDownButton(\n      label: \"Actions\",\n      icon: CupertinoIcons.ellipsis_circle,\n      items: [\n        MacosPulldownMenuItem(\n          label: \"New Folder\",\n          title: const Text(\"New Folder\"),\n          onTap: () => debugPrint(\"Creating new folder...\"),\n        ),\n        MacosPulldownMenuItem(\n          label: \"Open\",\n          title: const Text(\"Open\"),\n          onTap: () => debugPrint(\"Opening...\"),\n        ),\n      ],\n    ),\n  ]\n),\n```\n\nThis builds this simple toolbar: \n<img src=\"https://imgur.com/BDUdQkj.png\"/>\n\nOther toolbar examples:\n\n- Toolbar with icon buttons (no labels):\n<img src=\"https://imgur.com/PtrjhPx.png\"/>\n\n- Toolbar with icon buttons and labels:\n<img src=\"https://imgur.com/Ouaud12.png\"/>\n\n- Toolbar with a pulldown button open:\n<img src=\"https://imgur.com/msGmcNY.png\"/>\n\n- Toolbar with title bar above (also see [the note above](#modern-window-look)):\n<img src=\"https://imgur.com/eAgcsKY.png\"/>\n\nYou can also create your own `CustomToolbarItem` to include any type of widget in the toolbar:\n\n```dart\n// Add a grey vertical line as a custom toolbar item:\nCustomToolbarItem(\n  inToolbarBuilder: (context) => Padding(\n    padding: const EdgeInsets.all(8.0),\n    child: Container(color: Colors.grey, width: 1, height: 30),\n  ),\n  inOverflowedBuilder: (context) =>\n      Container(color: Colors.grey, width: 30, height: 1),\n),\n```\n\n## `SliverToolBar`\n<img src=\"https://imgur.com/u4LDaxj.gif\" width=\"75%\"/>\n\n`SliverToolbar` is a variant of the standard `ToolBar`, with the key difference being that (as the name implies), it \nis compatible with scrollable widgets like `CustomScrollView` and `NestedScrollView`. There are three additional \nproperties on `SliverToolBar`:\n* `pinned`, which determines if the toolbar should remain visible while scrolling\n* `floating`, which determines if the toolbar should become visible as soon as the use starts scrolling upwards\n* `opacity`, which manages the translucency effect of the toolbar\n\nThis widget enables developers to achieve the toolbar behaviors seen in Apple's App Store.\n\nSample usage:\n```dart\nreturn CustomScrollView(\n  controller: scrollController,\n  slivers: [\n    SliverToolBar(\n      title: const Text('SliverToolbar'),\n      pinned: true,\n      toolbarOpacity: 0.75,\n    ),\n    // Other slivers below  \n  ],\n);\n```\n\n## MacosListTile\n\nA widget that aims to approximate the [`ListTile`](https://api.flutter.dev/flutter/material/ListTile-class.html) widget found in\nFlutter's material library.\n\n![MacosListTile](https://imgur.com/pQB99M2.png)\n\nSample usage:\n```dart\nMacosListTile(\n  leading: const Icon(CupertinoIcons.lightbulb),\n  title: Text(\n    'A robust library of Flutter components for macOS',\n    style: MacosTheme.of(context).typography.headline,\n  ),\n  subtitle: Text(\n    'Create native looking macOS applications using Flutter',\n    style: MacosTheme.of(context).typography.subheadline.copyWith(\n      color: MacosColors.systemGrayColor,\n    ),\n  ),\n),\n```\n\n## MacosTabView\nA multipage interface that displays one page at a time. Must be used in a `StatefulWidget`.\n\n<img src=\"https://imgur.com/WNF1CSl.png\"/>\n\nYou can control the placement of the tabs using the `position` property.\n\nUsage:\n```dart\nfinal _controller = MacosTabController(\n  initialIndex: 0,\n  length: 3,\n);\n\n...\n\nMacosTabView(\n  controller: _controller,\n  tabs: const [\n    MacosTab(\n      label: 'Tab 1',\n    ),\n    MacosTab(\n      label: 'Tab 2',\n    ),\n    MacosTab(\n      label: 'Tab 3',\n    ),\n  ],\n  children: const [\n    Center(\n      child: Text('Tab 1'),\n    ),\n    Center(\n      child: Text('Tab 2'),\n    ),\n    Center(\n      child: Text('Tab 3'),\n    ),\n  ],\n),        \n\n```\n\n# Icons\n\n## MacosIcon\n\nA `MacosIcon` is identical to a regular `Icon` in every way with one exception - it respects\na `MacosTheme`. Use it the same way you would a regular icon:\n\n```dart\nMacosIcon(\n  CupertinoIcons.add,\n  // color: CupertinoColors.activeBlue.color,\n  // size: 20,\n),\n```\n\n# Buttons\n\n## MacosCheckbox\n\nA checkbox is a type of button that lets the user choose between two opposite states, actions, or values. A selected \ncheckbox is considered on when it contains a checkmark and off when it's empty. A checkbox is almost always followed \nby a title unless it appears in a checklist. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/checkboxes/)\n\n| Unchecked                                            | Checked                                            | Mixed                                            |\n| ---------------------------------------------------- | -------------------------------------------------- | ------------------------------------------------ |\n| ![Unchecked Checkbox](https://imgur.com/Pu4EDAE.png) | ![Checked Checkbox](https://imgur.com/CB3Kmwo.png) | ![Mixed Checkbox](https://imgur.com/T44rV38.png) |\n\nHere's an example of how to create a basic checkbox:\n\n```dart\nbool selected = false;\n\nMacosCheckbox(\n  value: selected,\n  onChanged: (value) {\n    setState(() => selected = value);\n  },\n)\n```\n\nTo make a checkbox in the `mixed` state, set `value` to `null`.\n\n## HelpButton\n\nA help button appears within a view and opens app-specific help documentation when clicked. All help buttons are \ncircular, consistently sized buttons that contain a question mark icon. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/help-buttons/)\n\n![HelpButton Example](https://imgur.com/DlP7uLV.png)\n\nHere's an example of how to create a help button:\n\n```dart\nHelpButton(\n  onPressed: () {\n    print('pressed help button'),\n  },\n)\n```\n\nYou can customize the help button appearance and behaviour using the `HelpButtonTheme`, but it's not recommended by \napple to change help button's appearance.\n\n## RadioButton\n\nA radio button is a small, circular button followed by a title. Typically presented in groups of two to five, radio \nbuttons provide the user a set of related but mutually exclusive choices. A radio button’s state is either on \n(a filled circle) or off (an empty circle). [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/radio-buttons/)\n\n![RadioButton Preview](https://imgur.com/HI0eQsU.png)\n\nHere's an example of how to create a basic radio button:\n\n```dart\nbool selected = false;\n\nMacosRadioButton(\n  value: selected,\n  onChanged: (value) {\n    setState(() => selected = value);\n  },\n),\n```\n\n## PulldownButton\n\nA pull-down button (often referred to as a pull-down menu) is a type of pop-up button that, when clicked, displays a \nmenu containing a list of choices. The menu appears below the button. Once the menu is displayed onscreen, it remains \nopen until the user chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or \nuntil the system displays an alert. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pull-down-buttons/)\n\nUse a pull-down button to present a list of commands. A pull-down button can either show a `title` or an `icon` to \ndescribe the contents of the button's menu. If you use an icon, make sure it clearly communicates the button’s purpose.\n\nIf `items` is null, the button will be disabled (greyed out). \n\n A `title` or an `icon` must be provided, to be displayed as the  pull-down button's title, but not both at the same time.\n\nThe menu can also be navigated with the up/down keys and an action selected with the Return key.\n\nIt can also appear in the toolbar, via the `ToolBarPulldownButton` widget.\n\n| Dark Theme                                 | Light Theme                                |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/XZlsUxF.jpg\"/> | <img src=\"https://imgur.com/EtrydYd.jpg\"/> |\n| <img src=\"https://imgur.com/KVX8OsR.jpg\"/> | <img src=\"https://imgur.com/mTvBxyL.jpg\"/> |\n| <img src=\"https://imgur.com/k1Wm6fd.jpg\"/> | <img src=\"https://imgur.com/wb08RXI.jpg\"/> |\n\nHere's an example of how to create a basic pull-down button:\n\n```dart\nMacosPulldownButton(\n  title: \"Actions\",\n  // Or provide an icon to use as title:\n  // icon: CupertinoIcons.ellipsis_circle, \n  items: [\n    MacosPulldownMenuItem(\n      title: const Text('Save'),\n      onTap: () => debugPrint(\"Saving...\"),\n    ),\n    MacosPulldownMenuItem(\n      title: const Text('Save as...'),\n      onTap: () => debugPrint(\"Opening Save As dialog...\"),\n    ),\n    const MacosPulldownMenuDivider(),\n    MacosPulldownMenuItem(\n      enabled: false,\n      title: const Text('Export'),\n      onTap: () => debugPrint(\"Exporting\"),\n    ),\n  ],\n),\n```\n\n## PopupButton\n\nA pop-up button (often referred to as a pop-up menu) is a type of button that, when clicked, displays a menu containing \na list of mutually exclusive choices. The menu appears on top of the button. Like other types of menus, a pop-up \nbutton’s menu can include separators and symbols like checkmarks. After the menu is revealed, it remains open until the \nuser chooses a menu item, clicks outside of the menu, switches to another app, or quits the app; or until the system \ndisplays an alert. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/pop-up-buttons/)\n\nThe type `T` of the `MacosPopupButton` is the type of the value that each pop-up menu item represents. All the entries \nin a given menu must represent values with consistent types. Typically, an `enum` is used. Each `MacosPopupMenuItem` \nin items must be specialized with that same type argument.\n\nThe `onChanged` callback should update a state variable that defines the pop-up menu's value. It should also call \n`State.setState` to rebuild the pop-up button with the new value.\n\nWhen there are menu items that cannot be displayed within the available menu constraints, a caret is shown at the top \nor bottom of the open menu to signal that there are items that are not currently visible. \n\nThe menu can also be navigated with the up/down keys and an item selected with the Return key.\n\n| Dark Theme                                 | Light Theme                                |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/ov0kzJC.jpg\"/> | <img src=\"https://imgur.com/buhYEo1.jpg\"/> |\n| <img src=\"https://imgur.com/BOEH59L.jpg\"/> | <img src=\"https://imgur.com/61S7DSX.jpg\"/> |\n| <img src=\"https://imgur.com/zY0d8RF.jpg\"/> | <img src=\"https://imgur.com/W4CMa5z.jpg\"/> |\n\nHere's an example of how to create a basic pop-up button:\n\n```dart\nString popupValue = 'One';\n\nMacosPopupButton<String>(\n  value: popupValue,\n  onChanged: (String? newValue) {\n    setState(() {\n      popupValue = newValue!;\n    });\n  },\n  items: <String>['One', 'Two', 'Three', 'Four']\n      .map<MacosPopupMenuItem<String>>((String value) {\n    return MacosPopupMenuItem<String>(\n      value: value,\n      child: Text(value),\n    );\n  }).toList(),\n),\n```\n\n## PushButton\n\nPush buttons are the standard button type in macOS. Push buttons contain text—not icons—and often open a separate window, dialog, or app so the user can \ncomplete a task. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/buttons/push-buttons/)\n\n| Dark Theme                                 | Light Theme                                |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/RLg1tWu.png\"/> | <img src=\"https://imgur.com/zymbEIE.png\"/> |\n\nℹ️ **Note** ℹ️\nNative push buttons can be styled as text-only, text with an icon, or icon-only. Currently, text-only push buttons are supported. To create an icon-only button, use the `MacosIconButton` widget.\n\nHere's an example of how to create a basic push button:\n\n```dart\nPushButton(\n  child: Text('button'),\n  controlSize: ControlSize.regular,\n  onPressed: () {\n    print('button pressed');\n  },\n),\n```\n\n## MacosSwitch\n\nA switch (also known as a toggle) is a control that offers a binary choice between two mutually exclusive states — on and off. A switch shows that it's on when the \naccent color is visible and off when the switch appears colorless.\n\nThe `ContolSize` enum can be passed to the `size` property to control the size of the switch. `MacosSwitch` supports the following\ncontrol sizes:\n* `mini`\n* `small`\n* `regular`\n\n| Off                                        | On                                         |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/bH7I0Lg.png\"/> | <img src=\"https://imgur.com/uuaXiS3.png\"/> |\n\nHere's an example of how to create a basic toggle switch:\n\n```dart\nbool switchValue = false;\n\nMacosSwitch(\n  value: switchValue,\n  onChanged: (value) {\n    setState(() => switchValue = value);\n  },\n),\n```\n\nLearn more about switches [here](https://developer.apple.com/design/human-interface-guidelines/toggles).\n\n## MacosSegmentedControl\n\nDisplays one or more navigational tabs in a single horizontal group. Used by `MacosTabView` to navigate between the \ndifferent tabs of the tab bar.\n\n<img src=\"https://imgur.com/6fIkCMr.png\"/>\n\nThe typical usage of this widget is by `MacosTabView`, to control the navigation of its children. You do not need to \nspecify a `MacosSegmentedControl` with your `MacosTabView`, as it is built by that widget.\n\n# Dialogs and Sheets\n\n## MacosAlertDialog\n\nUsage:\n```dart\nshowMacosAlertDialog(\n  context: context,\n  builder: (_) => MacosAlertDialog(\n    appIcon: FlutterLogo(size: 64),\n    title: Text(\n      'Alert Dialog with Primary Action',\n      style: MacosTheme.of(context).typography.headline,\n    ),\n    message: Text(\n      'This is an alert dialog with a primary action and no secondary action',\n      textAlign: TextAlign.center,\n      style: MacosTypography.of(context).headline,\n    ),\n    primaryButton: PushButton(\n      controlSize: ControlSize.large,\n      child: Text('Primary'),\n      onPressed: () {},\n    ),\n  ),\n);\n```\n\n![](https://imgur.com/4zbGsFi.png)\n![](https://imgur.com/5fgkRU9.png)\n![](https://imgur.com/jOyJrZO.png)\n![](https://imgur.com/NX9taPj.png)\n\n## MacosSheet\n\nUsage:\n```dart\nshowMacosSheet(\n  context: context,\n  builder: (_) => const MacosuiSheet(),\n);\n```\n\n![](https://imgur.com/Mnw2ywm.png)\n\n# Fields\n\n## MacosTextField\n\nA text field is a rectangular area in which the user enters or edits one or more lines of text. A text field can \ncontain plain or styled text.\n\n<img src=\"https://imgur.com/UzyMlcL.png\" width=\"75%\"/>\n\nHere's an example of how to create a basic text field:\n\n```dart\nMacosTextField(\n  placeholder: 'Type some text here',\n)\n```\n\n## MacosSearchField\n\nA search field is a style of text field optimized for performing text-based searches in a large collection of values.\n\nWhen the user starts typing into the search field, a list of selectable results appears in an overlay below (or above) the field. \n\n<img src=\"https://imgur.com/qbabwAW.png\" width=\"75%\"/>\n\n| Dark Theme                                 | Light Theme                                |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/Jol85ny.jpg\"/> | <img src=\"https://imgur.com/xP3l3Lv.jpg\"/> |\n\nHere's an example of how to create a search field:\n\n```dart\nMacosSearchField(\n  placeholder: 'Search for a country...',\n  results: countries.map((e) => SearchResultItem(e)).toList(),\n  onResultSelected: (resultItem) {\n    debugPrint(resultItem.searchKey);\n  },\n)\n```\n\nCheck the `examples/fields_page` for more examples.\n\n# Labels\n\nLabels are a short description of what an element on the screen does.\n\n## MacosTooltip\n\nTooltips succinctly describe how to use controls without shifting people’s focus away from the primary interface. \nHelp tags appear when the user positions the pointer over a control for a few seconds. A tooltip remains visible for \n10 seconds, or until the pointer moves away from the control.\n\n| Dark Theme                                 | Light Theme                                |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/0qLFqdK.jpg\"/> | <img src=\"https://imgur.com/Y3PLqBo.jpg\"/> |\n\nTo create a tooltip, wrap any widget on a `MacosTooltip`:\n\n```dart\nMacosTooltip(\n  message: 'This is a tooltip',\n  child: Text('Hover or long press to show a tooltip'),\n),\n```\n\nYou can customize the tooltip the way you want by customizing the theme's `TooltipTheme`. A tooltip automatically adapts to its \nenvironment, responding to touch and pointer events. To use a tooltip with a toolbar item, provide it with a `tooltipMessage` property.\n\n# Indicators\n\n## Progress Indicators\n\nDon’t make people sit around staring at a static screen waiting for your app to load content or perform lengthy data \nprocessing operations. Use progress indicators to let people know your app hasn't stalled and to give them some idea \nof how long they’ll be waiting.\n\nProgress indicators have two distinct styles:\n\n- **Bar indicators**, more commonly known as progress bars, show progress in a horizontal bar.\n- **Spinning indicators** show progress in a circular form, either as a spinner or as a circle that fills in as progress continues.\n\nPeople don't interact with progress indicators; however, they are often accompanied by a button for canceling the \ncorresponding operation. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/indicators/progress-indicators/)\n\n### ProgressCircle\n\nA `ProgressCircle` can be either determinate or indeterminate.\n\n| Determinate Progress Circle                | Indeterminate Progress Circle              |\n| ------------------------------------------ | ------------------------------------------ |\n| <img src=\"https://imgur.com/hr3dHn9.jpg\"/> | <img src=\"https://imgur.com/NSbKqLK.gif\"/> |\n\nHere's an example of how to create an indeterminate progress circle:\n\n```dart\nProgressCircle(\n  value: null,\n),\n```\n\nYou can provide a non-null value to `value` to make the progress circle determinate.\n\n### ProgressBar\n\nA `ProgressBar` can only be determinate.\n\n<img src=\"https://imgur.com/tdYgJmB.jpg\" width=\"50%\" height=\"50%\"/>\n\nHere's an example of how to create a determinate progress bar:\n\n```dart\nProgressBar(\n  value: 30,\n)\n```\n\n## Level Indicators\n\nA level indicator graphically represents of a specific value within a range of numeric values. It’s similar to a \n[slider](#slider) in purpose, but more visual and doesn’t contain a distinct control for selecting a value—clicking and \ndragging across the level indicator itself to select a value is supported, however. A level indicator can also include \ntick marks, making it easy for the user to pinpoint a specific value in the range. There are three different level \nindicator styles, each with a different appearance, for communicating capacity, rating, and relevance.\n\n### CapacityIndicator\n\nA capacity indicator illustrates the current level in relation to a finite capacity. Capacity indicators are often used \nwhen communicating factors like disk and battery usage. [Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#capacity-indicators)\n\n<img src=\"https://imgur.com/U7hcCqJ.png\" />\n<img src=\"https://imgur.com/AJyXG6p.png\" />\n\nHere's an example of how to create an interactive continuous capacity indicator:\n\n```dart\ndouble value = 30;\n\nCapacityIndicator(\n  value: value,\n  discrete: false,\n  onChanged: (v) {\n    setState(() => value = v);\n  },\n),\n```\n\nYou can set `discrete` to `true` to make it a discrete capacity indicator.\n\n### MacosSlider\n\nA slider is a control that lets people select a value from a continuous or discrete range of values by moving the slider thumb.\n\n | Continuous                                                                                 | Discrete                                                                                                                                 |\n | ------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------- |\n | ![Continuous Slider Example](https://i.imgur.com/dc4YjoX.png)                              | ![Discrete Slider Example](https://i.imgur.com/KckOTUf.png)                                                                              |\n | A horizontal slider where any value continuous value between a min and max can be selected | A horizontal slider where only discrete values between a min and max can be selected. Tick marks are often displayed to provide context. |\n\n\nHere's an example of how to create an interactive continuous slider:\n\n```dart\ndouble value = 0.5;\n\nMacosSlider(\n  value: value,\n  onChanged: (v) {\n    setState(() => value = v);\n  },\n),\n```\n\n### RatingIndicator\n\nA rating indicator uses a series of horizontally arranged graphical symbols to communicate a ranking level. The default \nsymbol is a star.\n\n![RatingIndicator Example](https://imgur.com/ySQBpL6.png)\n\nA rating indicator doesn’t display partial symbols—its value is rounded in order to display complete symbols only. \nWithin a rating indicator, symbols are always the same distance apart and don't expand or shrink to fit the control. \n[Learn more](https://developer.apple.com/design/human-interface-guidelines/macos/indicators/level-indicators#rating-indicators)\n\nHere's an example of how to create an interactive rating indicator:\n\n```dart\ndouble value = 3;\n\nRatingIndicator(\n  amount: 5,\n  value: value,\n  onChanged: (v) {\n    setState(() => value = v);\n  }\n)\n```\n\n# Selectors\n\n## MacosDatePicker\n\n<img src=\"https://imgur.com/sprmep1.png\" width=\"75%\"/>\n\nLets the user choose a date.\n\nThere are three styles of `MacosDatePickers`:\n* `textual`: a text-only date picker where the user must select the day,\n  month, or year and use the caret-control buttons to change the value.\n  This is useful when space in your app is constrained.\n* `graphical`: a visual date picker where the user can navigate through a\n  calendar-like interface to select a date.\n* `combined`: provides both `textual` and `graphical` interfaces.\n\nLocalization of the time picker is supported by the `weekdayAbbreviations` and `monthAbbreviations` parameters (instead of e.g. standard `localizations.narrowWeekdays()` in order to match Apple's spec).\n* `weekdayAbbreviations` should be a list of 7 strings, one for each day of the week, starting with Sunday\n* `monthAbbreviations` should be a list of 12 strings, one for each month of the year, starting with January\n\nYou can also define the `dateFormat` to change the way dates are displayed in the textual interface.\nIt takes a string of tokens (case-insensitive) and replaces them with their corresponding values.\nThe following tokens are supported:\n* `D`: day of the month (1-31)\n* `DD`: day of the month (01-31)\n* `M`: month of the year (1-12)\n* `MM`: month of the year (01-12)\n* `YYYY`: year (0000-9999)\n* Any separator between tokens is preserved (e.g. `/`, `-`, `.`)\n\nThe default format is `M/D/YYYY`. \n\nExample usage:\n```dart\nMacosDatePicker(\n  onDateChanged: (date) => debugPrint('$date'),\n),\n```\n\n## MacosTimePicker\n\n<img src=\"https://imgur.com/RtPbRo2.png\" width=\"50%\"/>\n\nLets the user choose a time.\n\nThere are three styles of `MacosTimePickers`:\n* `textual`: a text-only time picker where the user must select the hour\n  or minute and use the caret-control buttons to change the value.\n  This is useful when space in your app is constrained.\n* `graphical`: a visual time picker where the user can move the hands of a\n  clock-like interface to select a time.\n* `combined`: provides both `textual` and `graphical` interfaces.\n\nExample usage:\n```dart\nMacosTimePicker(\n  onTimeChanged: (time) => debugPrint('$time'),\n),\n```\n\n## MacosColorWell\n\n<img src=\"https://imgur.com/VpK4IlM.gif\" width=\"50%\"/>\n\nLets the user choose a color via the native macOS color picker.\n\nYou can choose which mode to launch the picker in using the `ColorPickerMode` enum. The default is `ColorPickerMode.wheel`\n\n🚨 This widget will not work on platforms other than macOS!\n\nExample usage: \n```dart\nMacosColorWell(\n  onColorSelected: (color) => debugPrint('$color'),\n),\n```\n\n## Older macOS versions\n\nIf you’re targeting older macOS versions (Monterey and earlier), it is necessary to perform the following steps to make the [macos_window_utils](https://pub.dev/packages/macos_window_utils) plugin, which macos_ui depends on, work correctly:\n\nOpen the `macos/Runner.xcworkspace` folder of your project using Xcode, press ⇧ + ⌘ + O and search for `MainFlutterWindow.swift`.\n\nInsert `import macos_window_utils` at the top of the file.\nThen, replace the code above the `super.awakeFromNib()`-line with the following code:\n\n```swift\nlet windowFrame = self.frame\nlet macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\nself.contentViewController = macOSWindowUtilsViewController\nself.setFrame(windowFrame, display: true)\n\n/* Initialize the macos_window_utils plugin */\nMainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\nRegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n```\n\nAssuming you're starting with the default configuration, the finished code should look something like this:\n\n```diff\nimport Cocoa\nimport FlutterMacOS\n+import macos_window_utils\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n-   let flutterViewController = FlutterViewController.init()\n-   let windowFrame = self.frame\n-   self.contentViewController = flutterViewController\n-   self.setFrame(windowFrame, display: true)\n\n-   RegisterGeneratedPlugins(registry: flutterViewController)\n    \n+   let windowFrame = self.frame\n+   let macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\n+   self.contentViewController = macOSWindowUtilsViewController\n+   self.setFrame(windowFrame, display: true)\n\n+   /* Initialize the macos_window_utils plugin */\n+   MainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\n+   RegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n\n    super.awakeFromNib()\n  }\n}\n```"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.0390625,
          "content": "include: package:flutter_lints/flutter.yaml\n\nlinter:\n  rules:\n    - use_super_parameters\n\nanalyzer:\n  exclude:\n    - test/mock_canvas.dart\n    - test/recording_canvas.dart\n    \ndart_code_metrics:\n  metrics:\n    cyclomatic-complexity: 20\n    maximum-nesting-level: 5\n  metrics-exclude:\n    - test/**\n    - example/test/**\n  rules:\n    - prefer-trailing-comma\n    - double-literal-format\n    - prefer-first\n    - prefer-last\n    - prefer-immediate-return\n    - avoid-global-state\n    - always-remove-listener\n    - avoid-unnecessary-setstate\n    - avoid-wrapping-in-padding\n    - prefer-const-border-radius\n    - prefer-correct-edge-insets-constructor\n    - use-setstate-synchronously\n    - member-ordering:\n        alphabetize: false\n        order:\n          - constructors\n          - public_fields\n          - private-fields\n        widgets-order:\n          - const fields\n          - init-state-method\n          - did-change-dependencies-method\n          - did-update-widget-method\n          - private-methods\n          - dispose-method\n          - build-method\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "macos",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 7.1357421875,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  appkit_ui_element_colors:\n    dependency: \"direct main\"\n    description:\n      name: appkit_ui_element_colors\n      sha256: c3e50f900aae314d339de489535736238627071457c4a4a2dbbb1545b4f04f22\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.0\"\n  async:\n    dependency: transitive\n    description:\n      name: async\n      sha256: \"947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.11.0\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      sha256: \"6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  characters:\n    dependency: transitive\n    description:\n      name: characters\n      sha256: \"04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  clock:\n    dependency: transitive\n    description:\n      name: clock\n      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.1\"\n  collection:\n    dependency: transitive\n    description:\n      name: collection\n      sha256: a1ace0a119f20aabc852d165077c036cd864315bd99b7eaa10a60100341941bf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.19.0\"\n  equatable:\n    dependency: \"direct main\"\n    description:\n      name: equatable\n      sha256: c2b87cb7756efdf69892005af546c56c0b5037f54d2a88269b4f347a505e3ca2\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.5\"\n  fake_async:\n    dependency: transitive\n    description:\n      name: fake_async\n      sha256: \"511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.1\"\n  flutter:\n    dependency: \"direct main\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  flutter_lints:\n    dependency: \"direct dev\"\n    description:\n      name: flutter_lints\n      sha256: \"3f41d009ba7172d5ff9be5f6e6e6abb4300e263aab8866d2a0842ed2a70f8f0c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  flutter_test:\n    dependency: \"direct dev\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  gradient_borders:\n    dependency: \"direct main\"\n    description:\n      name: gradient_borders\n      sha256: b1cd969552c83f458ff755aa68e13a0327d09f06c3f42f471b423b01427f21f8\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.1\"\n  leak_tracker:\n    dependency: transitive\n    description:\n      name: leak_tracker\n      sha256: \"7bb2830ebd849694d1ec25bf1f44582d6ac531a57a365a803a6034ff751d2d06\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"10.0.7\"\n  leak_tracker_flutter_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_flutter_testing\n      sha256: \"9491a714cca3667b60b5c420da8217e6de0d1ba7a5ec322fab01758f6998f379\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.8\"\n  leak_tracker_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_testing\n      sha256: \"6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.1\"\n  lints:\n    dependency: transitive\n    description:\n      name: lints\n      sha256: \"976c774dd944a42e83e2467f4cc670daef7eed6295b10b36ae8c85bcbf828235\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  macos_window_utils:\n    dependency: \"direct main\"\n    description:\n      name: macos_window_utils\n      sha256: \"230be594d26f6dee92c5a1544f4242d25138a5bfb9f185b27f14de3949ef0be8\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.5.0\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.12.16+1\"\n  material_color_utilities:\n    dependency: transitive\n    description:\n      name: material_color_utilities\n      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.11.1\"\n  meta:\n    dependency: transitive\n    description:\n      name: meta\n      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.15.0\"\n  mocktail:\n    dependency: \"direct dev\"\n    description:\n      name: mocktail\n      sha256: \"890df3f9688106f25755f26b1c60589a92b3ab91a22b8b224947ad041bf172d8\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.4\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      sha256: \"087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.9.0\"\n  plugin_platform_interface:\n    dependency: transitive\n    description:\n      name: plugin_platform_interface\n      sha256: \"4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.8\"\n  sky_engine:\n    dependency: transitive\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      sha256: \"53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.10.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      sha256: \"9f47fd3630d76be3ab26f0ee06d213679aa425996925ff3feffdec504931c377\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.12.0\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      sha256: \"688af5ed3402a4bde5b3a6c15fd768dbf2621a614950b17f04626c431ab3c4c3\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      sha256: \"664d3a9a64782fcdeb83ce9c6b39e78fd2971d4e37827b9b06c3aa1edc5e760c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.3\"\n  vector_math:\n    dependency: transitive\n    description:\n      name: vector_math\n      sha256: \"80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.4\"\n  vm_service:\n    dependency: transitive\n    description:\n      name: vm_service\n      sha256: f6be3ed8bd01289b34d679c2b62226f63c0e69f9fd2e50a6b3c1c729a961041b\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"14.3.0\"\nsdks:\n  dart: \">=3.5.3 <4.0.0\"\n  flutter: \">=3.18.0-18.0.pre.54\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.619140625,
          "content": "name: macos_ui\ndescription: Flutter widgets and themes implementing the current macOS design language.\nversion: 2.1.5\nhomepage: \"https://macosui.dev\"\nrepository: \"https://github.com/GroovinChip/macos_ui\"\n\nenvironment:\n  sdk: \">=3.5.3 <4.0.0\"\n  flutter: \">=1.20.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  macos_window_utils: ^1.5.0\n  gradient_borders: ^1.0.1\n  appkit_ui_element_colors: ^1.0.0\n  equatable: ^2.0.5\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^4.0.0\n  mocktail: ^1.0.4\n\nflutter:\n  plugin:\n    platforms:\n      macos:\n        package: dev.macosui.macos_ui\n        pluginClass: MacOSUiPlugin\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}