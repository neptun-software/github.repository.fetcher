{
  "metadata": {
    "timestamp": 1736710514188,
    "page": 48,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "erluxman/awesomefluttertips",
      "stars": 2936,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.2724609375,
          "content": "# ‚ù§Ô∏èAwesome Flutter ‚ù§Ô∏è tips and tricks ‚ù§Ô∏è\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Ferluxman%2Fawesomefluttertips&count_bg=%2379C83D&title_bg=%23555555&icon=prometheus.svg&icon_color=%23E7E7E7&title=hits&edge_flat=true)](https://hits.seeyoufarm.com)<a href=\"https://github.com/Solido/awesome-flutter\">\n   <img alt=\"Awesome Flutter\" src=\"https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&style=flat-square\" />\n</a>\n\n## Tip 1 : `stless` & `stful`\n\nWe can type `stless` and `stful` and we get Autocomplete Suggestion to generate Stateless Flutter Widget or Stateful Flutter Widget Respectively.\n\n![statful](assets/01stlesstful.gif)\n\n## Tip 2 : `If Null` Operator (`??`)\n\n`??` checks If something is `null`. If it's not null it returns its own value but if it's `null` it returns the value after `??`\n\n`return abc??10; //returns 10 if abc is null else returns its own value,`\n\nIt also has shorthand assignment when it's null.\n\n`abc??=5 //assigns 5 to abc if it's null`\n\n```dart\ntestOldMethod() {\n  print(\"NullChecking in old way\");\n  var abc;\n  \n  if (abc == null) {\n    print(\"It's null\");\n  } else {\n    print(abc);\n  }\n\n  if (abc == null) {\n    abc = 5;\n  }\n}\n\ntestIfNullOperator() {\n  print(\"NullChecking with if Null Operator\");\n  var abc;\n\n  print(abc ?? \"It's null\");\n  abc ??= 5;\n  print(abc ?? \"It's null\");\n}\n```\nOutput:\n```\nNullChecking in old way\nIt's null\n5\n--------------------\nNullChecking with if Null Operator\nIt's null\n5\n```\n\n## Tip 3 : Inner Function\n\nWe can define a function inside another function.\n\nThis is to encapsulate the inner function from everything else outside the outer function.\n\n```dart\nmain() {\n  String getName() {\n\n    String getFirstName() { return \"Laxman\"; }\n\n    String getLastName() { return \"Bhattarai\"; }\n\n    return getFirstName() + \" \" + getLastName();\n  }\n\n  print(getName());\n}\n```\nOutput\n```\nLaxman Bhattarai\n```\n\n\n## Tip 4 : ..Cascade..Chaining..Fluent API\n\nWe can chain method/member calls without returning `this` from **method(), getter() and setter()** using cascade operator (..)\n\ntry in [Dartpad](https://dartpad.dartlang.org/290e17306b745ed83b9242653ca55041)\n\nBefore:\n```dart\nclass User {\n  String name;\n  int age;\n\n  User({this.name = \"Foo\", this.age = 0});\n\n  User withName(String name) {\n    this.name = name;\n    return this;\n  }\n\n  User withAge(int age) {\n    this.age = age;\n    return this;\n  }\n\n  void printId() => print(\"$name is $age years old.\");\n}\n\nmain() {\n  User()\n  .withAge(27)\n  .withName(\"Laxman\")\n  .printId();\n}\n```\n\nCan be replaced with\n```dart\nclass User {\n  String name;\n  int age;\n\n  void printId() => print(\"$name is $age years old.\");\n}\n\nmain() {\n  User()\n  ..age = 27\n  ..name = \"Laxman\"\n  ..printId();\n}\n```\n\n## Tip 5 : Dart `data class`\n\nDart does not support data class by default, but with plugins, we can simply generate data class (`copyWith()`,`fromMap()`, `toMap()`, `Named Constructor`, `toString()`,`hashCode()` & `equals()` methods implemented by the tool).\n\n### `üö®‚ùóÔ∏èCaution‚ùóÔ∏èüö®` : **Your cursor should be inside the class that you want to generate data class.**\n\n![dataclass](assets/05dataclass.gif)\n\nDownload Plugins :\n\n[For Android Studio](https://plugins.jetbrains.com/plugin/12429-dart-data-class)\n\n[For VsCode](https://marketplace.visualstudio.com/items?itemName=BendixMa.dart-data-class-generator)\n\n## Tip 6 : RichText Widget\n\nIf you want to have a single text with different style within it? Do not bother or try to hack with with `Text()` and use `RichText()` with `TextSpan()`\n\n[Try on dartpad](https://dartpad.dartlang.org/f87dddb2f48f1d1ef0f25903af1ded58)\n\n[See Youtube Demo](https://www.youtube.com/watch?v=rykDVh-QFfw)\n\n![richtext](assets/06richtext.png)\n\n## Tip 7 : Spacer Widget\n\nUsing Container with certain height/width to create responsive space between Widgets? That may look good on one screen but will not look the same in different screen size.\n\nSpacer Widget comes for the rescue. Instead of `Container(width: / height: )`, use `Spacer(flex: )`.\n\nHow on this earth did I not know about this widget earlier? This is going to save many lives üòÇ\n\n[Try on dartpad](https://dartpad.dev/f0d077124527a8078cdb2eede1e9bf73)\n\n[See Youtube Demo](https://www.youtube.com/watch?v=7FJgd7QN1zI)\n\n![spacer](assets/07spacer.gif)\n\n## Tip 8 : ListView.separated()\n\nIf you have you been adding `Container()` with `maxwidth` at the bottom of `ListItem` to put divider line like me, you have been doing it wrong all the time.\n\nFlutter has `ListView.separated` just for that purpose. We have to also provide `separatorBuilder` in addition to what we already passed while using `ListView.builder`\n\n**Bonus üçæüéÅüéäüéâ : You do not have to check if the item is last in order not to draw divider after the last item.**\n\n[try in dartpad](https://dartpad.dartlang.org/31ec967b140ac6a5795c38ea4bdfd9a2)\n\n```dart\nListView.separated(\n  itemCount: 25,\n  separatorBuilder: (BuildContext context, int index) => Divider(\n    thickness: 1,\n  ),\n  itemBuilder: (BuildContext context, int index) {\n    return ListTile(\n      title: Text(\n        'Index Number $index',\n      ),\n    );\n  },\n);\n```\n\n## Tip 9 : Passing Function as parameter\n\nWe can simply pass a `function` as `parameter` like we pass a variable. When we want to call the passed function from calling function, we just call it with `()` at the end along with parameters if it accepts any.\n\n[try in dartpad](https://dartpad.dev/fa46336f5c1b3287c6420d3b3a277178)\n\n```dart\nvoid main() {\n  f2(f1, 3);\n  f2(f1, 4);\n  f2(f1, 7);\n}\n\nf1(int venOrOdd) {\n  print(\"$evenOrOdd is ${evenOrOdd % 2 == 0 ? \"Even\" : \"Odd\"}\");\n}\n\nf2(Function(int) evenOrOddFunction, int argumentToPass) {\n  evenOrOddFunction(argumentToPass);\n}\n```\nOutPut\n```dart\n3 is Odd\n4 is Even\n7 is Odd\n```\n\n---\n\n## Tip 10 : Relative Import : the right way to import `.dart` files we have in our lib package\n\nEver wondered what is the right way to import a file in your own package?\n\nPrefer relative imports to absolute imports.\n\nWhy?\n\n- It's shorter and cleaner.\n- We can easily differentiate our files and third-party ones.\n- It makes sense, doesn't it?\n\n```\nmy_package\n‚îî‚îÄ lib\n   ‚îú‚îÄ src\n   ‚îÇ  ‚îî‚îÄ utils.dart\n   ‚îî‚îÄ api.dart\n```\nIf `api.dart` wants to import `utils.dart`, it should do so using:\n```dart\nimport 'src/utils.dart';\n```\n\nAnd not:\n```dart\nimport 'package:my_package/src/utils.dart';\n```\n\n## Tip 11 : Reusing Text Style\n\nTired of defining `textStyle` everytime you want to customize `Text`? **Even worse** if you have multiple theme (**dark, light, full black theme etc**).\n\njust use\n\n`Theme.of(context).textTheme.title`\n\nwhere there are other styles like `title` inside `textTheme`.\n\n[try in dartpad with theme example](https://dartpad.dartlang.org/5270714ce97853fc36db1b17c255c999)\n\n```dart\nText(\n  \"Title\",\n  style: Theme.of(context).textTheme.title,\n)\n```\n\n## Tip 12 : Use Literal to initialize growable collections\n\nIf we are to initialize growable collection, use literal initialization rather than with constructors.\n\n```dart\n// Good\nvar points = [];\nvar addresses = {};\n\n// Bad\nvar points = List();\nvar addresses = Map();\n\n// With type argument\n\n// Good\nvar points = <Point>[];\nvar addresses = <String, Address>{};\n\n// Bad\nvar points = List<Point>();\nvar addresses = Map<String, Address>();\n```\n\n## Tip 13 : Fat arrow functions\n\nWe can use fat arrow `=>` members (`function, getter,setter`) in dart.\n\nI would not use `=>` if the declaration is not **ONE LINER**. But few lines are OK.\n\n[try on dartpad](https://dartpad.dev/76922028eccb4535f0cdddc8e4b17aa1)\n\n```dart\nvoid main() {\n  User()\n    ..firstName = \"Laxman\"\n    ..lastName = \" Bhattarai\"\n    ..age = 18\n    ..printUser();\n}\n\nclass User {\n  String firstName;\n  String lastName;\n  DateTime birthday;\n\n  String get fullName => firstName + lastName;\n\n  set age(int age) =>  birthday = DateTime.now().subtract(Duration(days: age * 365));\n\n  int get age => DateTime.now().year - birthday.year;\n\n  bool get isAdult => age >= 18;\n\n  printUser() => print(fullName + \" is a ${isAdult ? \"Adult\" : \"Child\"}\");\n}\n```\n\n## Tip 14 : FractionallySizedBox\n\nEver wanted the widget to have height and width exactly in the same proportion to it's screen's height and width?\n\nFractionallySizedBox is build exactly for that use case. Just give it the fraction you need for your height and width and it will handle everything else. The fraction value will range between 0.0 to 1.0\n\n```dart\nFractionallySizedBox(\n  widthFactor: 0.5,\n  heightFactor: 0.5,\n  child: Container(color: Colors.green),\n)\n```\n[try on codepen](https://codepen.io/erluxman/pen/rNOLOzG)\n\n![fractionally](assets/14fractionallysizedbox.gif)\n\n## Tip 15 : Flexible vs Expanded\n\nExpanded() is nothing more than Flexible() with\n\n```dart\nFlexible (fit: FlexFit.tight) = Expanded()\n```\n\nbut, Flexible uses `fit :FlexFit.loose` by default.\n\n**FlexFit.tight** = Wants to fit tight into parent taking as much space as possible.\n\n**FlexFit.loose** = Wants to fit loose into parent taking as little space as possible for itself.\n\n**flex** = The factor of space taken from parent. Mostly not fully used if `flex: FlexFit.loose` used i.e. `Flexible`.\n\n![flex](assets/15flexibleexpanded.png)\n\nIf you fully read the following image, you will fully understand the difference between `Flexible` and `Expanded`\n\n```dart\nclass Flexible extends... {\n  /// The flex factor to use for this child\n  ///\n  /// If null or zero, the child is inflexible and determines its own size. If\n  /// non-zero, the amount of space the child's can occupy in the main axis is\n  /// determined by dividing the free space (after placing the inflexible\n  /// children) according to the flex factors of the flexible children.\n  final int flex;\n\n  /// How a flexible child is inscribed into the available space.\n  ///\n  /// If [flex] is non-zero, the [fit] determines whether the child fills the\n  /// space the parent makes available during layout. If the fit is\n  /// [FlexFit.tight], the child is required to fill the available space. If the\n  /// fit is [FlexFit.loose], the child can be at most as large as the available\n  /// space (but is allowed to be smaller).\n  final FlexFit fit;\n\n  ........\n}\n\nclass Expanded extends Flexible {\n  /// Creates a widget that expands a child of a [Row], [Column], or [Flex]\n  /// so that the child fills the available space along the flex widget's\n  /// main axis.\n  const Expanded({\n    Key key,\n    int flex = 1,\n    @required Widget child,\n  }) : super(key: key, flex: flex, fit: FlexFit.tight, child: child);\n}\n```\n\n[try in codepen](https://codepen.io/erluxman/pen/JjYKZGG)\n\n## Tip 16 : Bulk declaration\n\nIf you have been declaring each member separately all the time, you can declare members of same types at once.\n\nI wouldn't declare `age` and `shoeSize` at once because they are not related.\n\nWith great power comes great responsibility, Use this wisely.\n\n```dart\nclass Footballer {\n\n  String firstName = \"Lionel\";\n  String middleName = \"Andr√©s\";\n  String lastName = \"Messi\";\n\n  double weightKG;\n  double heightCM;\n\n  int goals;\n  int assists;\n  int tackles;\n  int takeons;\n  int saves;\n  int shots;\n}\n\n// The class above can be replaced with:\nclass Footballer {\n\n  String firstName = \"Lionel\", middleName = \"Andr√©s\", lastName = \"Messi\";\n\n  double weightKG, heightCM;\n\n  int goals, assists, tackles, takeons, saves, shots;\n}\n```\n\n## Tip 17 : SliverAppBar / Collapsable AppBar / ParallaxHeader\n\nRemember CollapsableAppBar (android) / ParallaxHeader (ios)? We have SliverAppBar in Flutter to do exactly that.\n\nTo use it, you will have to have a CustomScrollView as parent.\n\nthen you add two slivers of it.\n\n1. SliverAppBar\n2. SliverFillRemaining\n\nYou can play with values of snap, floating, pinned etc to get desired effect\n\n[try on dartpad](https://dartpad.dartlang.org/6874032a7a1ea129640b8f617f7ffed3)\n\n[see various types of SliverAppBars here](https://api.flutter.dev/flutter/material/SliverAppBar-class.html#snippet-container)\n\n![sliverappbar](assets/17sliverappbars.gif)\n\n## Tip 18 : What the Key\n\n![keys](assets/18keys.gif)\n\nEver wondered why we need GlobalKey(children : GlobalObjectKey, LabeledGlobalKey), LocalKey(children: ObjectKey, ValueKey & UniqueKey) right?\n\nThey are used to access or restore state In a statefulWidget (Mostly we don't need them at all if our widget tree is all Stateless Widgets).\n\n### Purpose (Key to use inside bracket)\n\n- Mutate the collection i.e. remove / add / reorder item to list in stateful widget like draggable todo list where checked items get removed (ObjectKey, ValueKey & UniqueKey)\n- Move widget from one Parent to another preserving it's state. (GlobalKey)\n- Display same Widget in multiple screens and holding its state.(GlobalKey)\n- Validate Form.(GlobalKey)\n- You can to give a key without using any data. (UniqueKey)\n- If you can use certain field of data like UUID of users as unique Key. (ValueKey)\n- If you do not have any unique field to use as key but object itself is unique. (ObjectKey)\n- If you have multiple Forms or Multiple Widgets of same type that need GlobalKey. (GlobalObjectKey, LabeledGlobalKey whichever is appropriate , similar logic to ValueKey and ObjectKey)\n\n[Learn more on this video](https://www.youtube.com/watch?v=kn0EOS-ZiIc)\n\n## Tip 19 : Amazing Library `time.dart`\n\nIf you are tired to long and verbose DateTime and Duration calculation `time.dart` comes to your rescue.\n\n```dart\n//Before\nvar 3dayLater = DateTime.now().add(Duration(days: 3)).day;\n\n//After\nvar 3dayLater = 3.days.fromNow.day;\n\n//Before\nvar duration = Duration(minutes: 10) +Duration(seconds: 15) \n  - Duration(minutes: 3) + Duration(hours: 2;\n\n//After\nvar duration = 10.minutes + 15.seconds - 3.minutes + 2.hours;\n\n//Before\nawait  Future.delayed(Duration(seconds: 2))\n\n//After\nawait 2.seconds.delay\n```\n[visit time.dart](https://github.com/jogboms/time.dart)\n\n## Tip 20 : Testing errors\n\nYou can simply test if two values are equal in dart with `expect(actual, expected)`\n\nBut if you want to test errors use the `function closure` that throws error as actual and check with `throwsA<ErrorType>` as expected.\n\n```dart\nvoid main() {\n  group(\"Exception/Error testing\", () {\n    test(\"test method that throws errors\", () {\n      expect(_testError(fails: false), false);\n      expect(() => _testError(fails: true), throwsA(isA<FooError>()));\n    });\n  });\n}\n\nbool _testError({bool fails}) {\n  if(fails)throw FooError();\n    return fails;\n}\n\nclass FooError extends Error {}\n```\n\n[___`Tips 1-20`___](README.md)\n[__`Next >>`__](page2.md)\n\n[__`Tips 41-60`__](page3.md)\n[__`Tips 61-80`__](page4.md)\n[__`Tips 81-100`__](page5.md)\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "page2.md",
          "type": "blob",
          "size": 17.029296875,
          "content": "# Tips 21-40\n\n## Tip 21 : Concisely add collection into collection with `Spread(...)` operator\n\nWe normally use addAll() on collection to add one collection to another.\n\nBut From dart 2.3 and above, we can use Spread Operator (`...`) to add collection inside collection.\n\n```dart\nvar numbers = [1, 2, 3];\nvar names = [\"Smith\", \"Laxman\"];\nList<int> nullList;\nList<int> getLostNumbers() => null;\n\n// This is long way\nvar list = List();\nlist.addAll(numbers);\nlist.addAll(names);\n\n// Hassale to add nullList\nlist.addAll(nullList ?? []);\nlist.addAll(getLostNumbers() ?? []);\nlist.forEach(print);\n\n// This is short way with easy null safe insertion\nvar list = [...numbers, ...names, ...?nullList, ...?getLostNumbers()];\n\nlist.forEach(print);\n```\nOutput:\n\n```\n1\n2\n3\nSmith\nLaxman\n```\n\n[try in dartpad](https://dartpad.dev/98c2ab9d41fb2c20cc67c94956972721)\n\n\n## Tip 22 : Callable Class\n\nIn flutter we can call instance of a class like we call method.\n\nWhat you have to do is defile a `call()` method of any return type or arguments. that `call()` method will be called when you call the instance.\n\n```dart\nvoid main() {\n    var member = CallableClass();\n    member(\"Flutter\");    \n}\n\nclass CallableClass{\n    call(String name){\n        print(\"Name is $name\");\n    }\n}\n```\n\n[try in dartpad](https://dartpad.dartlang.org/294c4973aeab2b8312e415ce4dc55799)\n\n## Tip 23 : ListWheelScrollView\n\nWe can implement following Wheel List using `ListWheelScrollView` in flutter.\n\nJust give it the children and it will start working for you.\n\nYou can customize the wheel with Constructor arguments of `ListWheelScrollView` play with them.\n\n```\nListWheelScrollView(\n    children: <Widget>[\n        ..Children Widgets\n    ],\n)\n```\n\n[try on dartpad](https://dartpad.dartlang.org/a30529134eb181507207f305b2bf6201)\n\n[try on codepen](https://codepen.io/erluxman/pen/NWGjBjX)\n\n![wheelscroll](assets/23wheelscrollview.gif)\n\n## Tip 24 : Rectangular Fab with Notched Bottom Appbar\n\nCircular notched Button Bar with Fab is cool\n\n### ___**BUT**___\n\nEver wanted rectangular/stadium Fab with Notch?\n\n`FloatingActionButton.extended` with `BottomAppBar`'s `shape` as `AutomaticNotchedShape` like this:\n\n```\nshape: AutomaticNotchedShape(\n            RoundedRectangleBorder(),\n            StadiumBorder(\n              side: BorderSide(),\n            ),\n        ),\n```\n    \n\n[try this code on your editor](https://gist.github.com/erluxman/fd442639bcaf84e14b31f70b00c48fe9)\n\n[<img src=\"assets/24rectangularnotch.png\" width=\"350\">](assets/24rectangularnotch.png)\n\n## Tip 25 : Google Fonts in flutter\n\nWith the pub.dev package `google_fonts` you can use any google fonts without downloading them.\n\nJust give the textStyle as any google fonts.\n\nWant to set other textStyles properties? Just provide `textStyle` to the font (Which is a textStyle itself)\n\n```\nText(\n    'Notched Rectangular Fab',\n    style: GoogleFonts.pacifico(\n        textStyle: TextStyle(color: Colors.red),\n    ),\n)\n```\n\n[try on pub.dev](https://pub.dev/packages/google_fonts)\n\n![googlefonts](assets/25googlefontstest.gif)\n\n## Tip 26 : Hero Animation (Shared Element Transition)\n\n### **Do you want your Widget/Image to fly from one screen to another?**\n\nFlutter makes it super easy to do **Shared Element / Hero animation** with Widget called `Hero`.\nJust give **same `tag`** for the `Hero` widget in both screen and your Widget will start flying from one screen to another.\n\nCaution : Do not give a static string as tag if your UI has dynamic data like List, use a value of object like title,id etc as tag\n\n```dart\n//First Screen\n\nFirstPageWidget extends StatelessWidget{\n    return Scaffold(\n        ...\n        Hero(\n            tag: player.name\n            child: Image.network(url)\n        )\n        //Other player List\n        ...\n        );\n}\n\n//Second Page\n\nSecondPageWidget extends StatelessWidget{\n    return Scaffold(\n        ...\n        Hero(\n            tag: player.name\n            child: Image.network(url)\n            )\n        //Player details\n        ...\n        );\n}\n```\n    \n\n[try on Codepen](https://codepen.io/erluxman/pen/eYpEjoQ)\n\nFor better experience : Decrease the browser width\n\n![hero](assets/26hero.gif)\n\n## Tip 27 : Dart function/constructor Arguments\n\nThere are three types of arguments (Function arguments and constructor arguments work the same way).\n\n1. Normal Parameters (‚úÖ‚úÖShort & ‚ùåFlexible) => required, requires all arguments to be called in order, most concise (doesn't need argument names),least flexible.\n\n2. Named Parameters (‚úÖShort & ‚úÖ‚úÖFlexible) => Optional, can be called in any order BUT must provide the argument name.\n\n3. Positional Parameters (‚úÖ‚úÖShort & ‚úÖFlexible) => optional but we cannot skip any argument on left to provide argument right to it. Does not require argument name.\n\n```dart\nvoid main() {\n    normalFunction(\"Laxman\", \"Bhattarai\", 26, 65);\n\n    optionalFunction(\"Laxman\", \"Bhattarai\");\n    optionalFunction(\"Laxman\", \"Bhattarai\", age: 26);\n    optionalFunction(\"Laxman\", \"Bhattarai\", weight: 65);\n    optionalFunction(\"Laxman\", \"Bhattarai\", weight: 65, age: 26);\n\n    positionalFunction(\"Laxman\", \"Bhattarai\");\n    positionalFunction(\"Laxman\", \"Bhattarai\", 26);\n    positionalFunction(\"Laxman\", \"Bhattarai\", 26, 65);\n}\n\n\n//Requires all arguments passed in order, i.e. no meaning of default parameters\nnormalFunction(String firstName, String lastName, int age, int weight) {\n    print(\"$firstName $lastName age: $age weight: $weight\");\n}\n\n\n//Optional, can be called in any order BUT must provide the argument name.\noptionalFunction(String firstName, String lastName,\n    {int age = 18, int weight = 60}) {\n    print(\"$firstName $lastName age: $age weight: $weight\");\n}\n\n//Optional, doesn't need argument name  but cannot be skipped an argument on left to provide argument on right of it.\n    positionalFunction(String first, String last,[int age = 18, int weight = 60]) {\n        print(\"$first $last age: $age weight: $weight\");\n}\n```\n\n\n\n[try on dartpad](https://dartpad.dartlang.org/5cb4bf8b064f117a22aadaee26747721)\n\n## Tip 28 : AnimatedContainer\n\n`ImplicitlyAnimatedWidget`s like `AnimatedAlign,AnimatedContainer, AnimatedPadding, AnimatedTheme` are easy way to do animation.\n\n`AnimatedContainer()` is one of the most common.\n\nYou can animate any properties of `container` with `AnimatedContainer`. Mastery of this widget alone can get you far ahead in you animation game.\n\nJust provide the changed value like\n\n    height, width,padding,transform,decoration(backgroundcolor, border radius & alignment etc.\n\nalong with curve then AnimatedContainer will automatically do the animation for you.\n\nThe following animation is done with just `AnimatedContainer()`\n\n[play with the animation in codepen](https://codepen.io/erluxman/pen/MWaEZEz)\n\n![animatedcontainer](assets/28animatedcontainer.gif)\n\n## Tip 29 : Wrap widget\n\nWhen you are making responsive UIs, you need to wrap contents dynamically.\n\nWrap comes to the rescue. Wrap is like Column/Row but wraps it's children to next row or column.\n\nUse Wrap like you use Column or Row just give it's direction (either vertical or horizontal)\n\n    Wrap(\n        direction: Axis.vertical/Axis.horizontal,\n        children: [Widgets],\n        runAlignment: WrapAlignment.start,\n        spacing: 20, //space between previous and next item\n        runSpacing: 20, //space between new row or column\n        );\n[try in codepen](https://codepen.io/erluxman/pen/YzyENpR)\n![wrap](assets/29wrap.gif)\n\n## Tip 30 : Blur a Widget in Flutter\n\nTo blur a widget, put it below a BackdropFilter widget in stack.\n\n1. Adjust Gussian blur level with sigmaX, and sigmaY.\n2. Must provide child to Backdrop it needs a layer to act as blur.\n\n```dart\nStack(\n    fit: StackFit.loose,\n    children: <Widget>[\n        FlutterLogo(size: 300),\n        Positioned.fill(\n            child: BackdropFilter(\n            filter: ImageFilter.blur(sigmaX: 5, sigmaY: 5),\n            child: Container(\n                        color: Colors.transparent,\n                    ),\n        ),\n    ],\n)\n```\n        \n\nYou will a blur like this.\n[play in codepen](https://codepen.io/erluxman/pen/xxwPJrY)\n![blur](assets/30blur.png)\n\n## Tip 31 : Changing Theme Dynamically\n\nTheme of the application is nothing but argument in MaterialApp or CupertinoApp.\n\nJust create a StreamController of bool to represent it's theme.\n\nWith the use of StreamBuilder, set the theme of inside Material/Cupertino App and boom üöÄ your app will be able to change it's theme dynamically.\n\n```dart\n//Define a Inherited Widget\nclass SettingsStore extends InheritedWidget {\n    final ValueNotifier<ThemeData> theme = ValueNotifier(ThemeData.light());\n\n    SettingsStore({@required Widget child}) : super(child: child);\n\n    static SettingsStore of(BuildContext context) =>\n    context.dependOnInheritedWidgetOfExactType<SettingsStore>();\n    \n    void updateTheme(ThemeData theme) => this.theme.value = theme;\n\n    @override\n    bool updateShouldNotify(SettingsStore oldWidget) => oldWidget.theme != this.theme;\n}\n\n\n//Listen to it\nclass App extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    return ValueListenableBuilder(\n        valueListenable: SettingsStore.of(context).theme,\n        builder: (context, theme, child) => MaterialApp(\n        theme: theme,\n        home: SettingsView(),),\n        );\n    }\n}\n\n//Change the theme from any build method.\nSettingsStore.of(context).updateTheme(ThemeData.light())\n```\n\nCredit: [u/Kounex's](https://www.reddit.com/user/Kounex/)\n\n[try on dartpad](https://dartpad.dartlang.org/ccac4c4dff07d69deb6fcacbdeebaa3c)\n\n![dynamicTheme](assets/32dynamictheme.gif)\n\n## Tip 32 : Dart Extension\n\nWe can extend functionality to existing class/API/Library without inheriting it to a child class.\n\nExtensions can have method, getter and setter.\n\nHere we add function to DateTime class without subclassing it.\n\nDefine extension like this :\n\n```dart\nextension DateExtensions on DateTime{\n        \n    printYYYYMMdd(String seperator) {\n        var dateString = \"${this.year}$seperator${getTwoDigit(this.month)}$seperator${getTwoDigit(this.day)}\";\n            print(dateString);\n    }\n        \n    String getTwoDigit(int number){\n        return (number < 10)? \"0$number\" :number.toString();\n    }\n        \n    DateTime get  nextYear => this.add(Duration(days:365));\n        \n    DateTime previousYear() => this.subtract(Duration(days:365));\n}\n```\n\nThen Just Call those extensions\n\n```dart\nvoid main() {\n    var now = DateTime.now();\n    var nextYear = now.nextYear;\n    var lastYear = now.previousYear();\n\n    now.printYYYYMMdd(\"-\");\n    nextYear.printYYYYMMdd(\"/\");\n    previousYear.printYYYYMMdd(\".\");\n}\n```\n\n[try on dartpad](https://dartpad.dartlang.org/45e30e5208b39123053f2408624d641c)\n\n## Tip 33 : ToastBadge (toast_badge) package\n\nIf you want to show notification that auto dismisses anywhere in the screen, use `toast_badge`.\n\nJust wrap any widget with `ToastBadget` or call `.enableBadge()` on any widget, you will be able to show notification on that widget without the need of BuildContext object.\n\ni.e. You use it like toast but in the place you desire.\n\n1. Wrap\n```dart\nchild: ToastBadge( child: SettingPage(),),\n\n//OR \n\nchild: SettingPage().enableBadge(),\n```        \n\n2. Call\n\n```dart\nToastBadge.show(\"Hello Toast\");\n\n\n//With more options\n\nToastBadge.show(\"Hello Toast\",  \nmode: ToastMode.INFO, \nduration: Duration(milliseconds: 500));\n```\n\n[use this package](https://github.com/erluxman/toast_badge)\n\n![toast](assets/33toastbadge.gif)\n\n## Tip 34 : Making Reorderable list\n\nCreate ReorderableListView just like normal ListView.\n\n1. Give Key to each child\n2. Handle onReorder: (oldIndex, newIndex)\n\n```dart\nReorderableListView(\n    onReorder: (oldIndex, newIndex) {\n        setState(() {\n            if (oldIndex < newIndex) {\n                newIndex -= 1;\n            }\n            var previous = names.removeAt(oldIndex);\n            names.insert(newIndex, previous);\n        });\n    },\n    children:[\n        child(key:ObjectKey(item)),.....\n    ]\n)\n```\n\n[try in codepen](https://codepen.io/erluxman/pen/Yzyabpz)\n\n![reorderable](assets/34reorderable.gif)\n\n## Tip 35 : Dart Dev tools\n\nDart dev tool is powerful set of debugging and performance tools like Layout Inspector,Timeline, Memory, App Performance,Debugger,Logging & Network monitor.\n\nAndroid Stidio : You can open it by clicking dart icon on Run tab when app is runnin in Anadroid Studio\n\nVSCode: typing Open Dev Tools in command Pallet.\n\nLearining to use Dart Dev tool  is very üö®important skillüö® to have as a Flutter/dart developer.\n\n![Opening in Android Studio](assets/35as.png)\n_Opening in Android Stuido_\n\n![vscode](assets/35vscode.png)\n_Opening in VSCode_\n\n![as](assets/35devtools.png)\n_Dev tools page_\n\n[See amazing dart dev tool gifs](https://www.google.com/search?q=dart+devtools+gif&tbm=isch&rlz=1C5CHFA_enNP896NP896&hl=en&ved=2ahUKEwjG5J75pqjpAhW8A7cAHTFmCdYQBXoECAEQKA&biw=1920&bih=1066)\n\n\n## Tip 36 : Implicit Interface of class\n\nDid you know you can extend and implement a class in Dart?\n\n* No need to create `IInterface` to mock a `class`.\n* No need to extract `IInterface` as Contract / Protocal\n\nEvery class implicitly defines an interface containing all the instance variables, methods getter and setters.\n\n1. extends ->  must override abstract methods, other methods and variables override optional. i.e can inherit parent's behavior.\n2. implements -> Every methdos and variables must be overriden. i.e. can't inherit parent behavior\n\n```dart\n// Dart has implicit Interface of every class          \n\nclass A {\n    //Optional @override for 'extends' &&  must for 'implements'. \n    var name;\n    //Optional @override for 'extends' &&  must for 'implements'.     \n    void normalMethod() => print(\"B -> Normal Method\");\n}\n\nabstract class B{\n    //must @override in both 'extends' and 'implements'.\n    void abstractMethod();\n}\n\n//Non abstract \nclass C extends A {}    // ‚úÖ\nclass C implements A {} //‚ùå Must override name & normalMethod()   \nclass C extends B {}    //‚ùå Needs to override `abstractMethod()`\nclass C implements B {} //‚ùå Needs to override `abstractMethod()`\n\n//Abstract Child\nabstract class C extends A {}    // ‚úÖ\nabstract class C implements A {} // ‚úÖ\nabstract class C implements B {} // ‚úÖ \nabstract class C extends B {}    // ‚úÖ \n```\n\n## Tip 37 : Animated Switcher\n\nUse `Animated Switcher` for smooth transition when a widget is switched with another.\n\n**Provide:**\n\n1. `duration` of transition\n\n2. dynamic `child` &\n\n3. `TransitionBuilder` like `Fade,Scale,Rotation`\n\nThen, Flutter will handle the rest.\n\n```dart\nAnimatedSwitcher(\n    duration: Duration(milliseconds: 800),\n    child: shouldShowCard ? CreditCardFront() : CreditCardBack(),\n    transitionBuilder: (child, animation) {\n        print(\"Animation asked ${widget.runtimeType}\");\n        return FadeTransition(\n            child: child,\n            opacity: animation,\n        );\n    },\n)\n```\n[try in codepen](https://codepen.io/erluxman/pen/xxwJRBQ)\n\n![animatedswitcher](assets/37animatedswitcher.gif)\n\n## Tip 38 : GestureDetector widget\n\nUse Gesture Detector to detect gestures like tap, double Tap, press, LongPress, pan, drag, zoom etc.\n\nAll those callbacks behave like `onClick(){}` on Button.\n\n```dart\nGestureDetector(\n    onTap: //Tapped\n    onDoubleTap: //\"Double Tapped\n    onLongPress: //Long Press\n    onLongPressEnd: //Long Press ends\n    onPanStart: // Pan Started\n    onPanUpdate: //\"Pan\" + paninfo.delta\n    onPanEnd: //Pan Ended\n    onHorizontalDragStart: //\"Drag\" + draginfo\n    child: Padding(\n        padding: const EdgeInsets.all(48.0),\n        child: InkWell(\n            child: Card(\n                child: Center(\n                    child: Text(\n                    currentGesture.toUpperCase(),\n                    style: TextStyle(fontSize: 20, \n                        fontWeight: FontWeight.w700),\n                    ),\n                ),\n            ),\n        ),\n    ),\n);\n```\n[try on codepen](https://codepen.io/erluxman/pen/wvKxVrE)\n\n![gesture](assets/38gesture.gif)\n\n## Tip 39 : Package Animated Text Kit\n\nanimated_text_kit provides some cool ways to animate text appearences.\n\n1. Use built in Widget like\n\n        RotateAnimatedTextKit(), TextLiquidFill(), ColorizeAnimatedTextKit() etc.\n\n2. & Pass a list of text in constructor\n\n       TyperAnimatedTextKit( \n           text: [\"Colorize\",\"Animated\", \"TextKit\",])\n\n3. Do additional customization if you want. To do that Look into constructor of each Widgets provided.\n\n[sample code](https://gist.github.com/erluxman/821568539592f9ac798172dfffa14540)\n\n[animated_text_kit package](https://pub.dev/packages/animated_text_kit#-installing-tab-)\n\n![animatedtext](assets/39animatetext.gif)\n\n## Tip 40 : 5 Steps of AnimatedIcon\n\nWe can use AnimatedIcon in 5 simple steps.\n\n1. Define a Stateful Widget whose state mixins with SingleTickerProviderStateMixin.\n2. Define an AnimationController inside state with animation duration and pass this into vsync.\n3. Define a variable that stores wheather animation is at start or end.\n4. Provide the controller  to AnimatedIcon.\n5. Animate  icon by calling `.forward()` or `.reverse()` on AnimationController based on the current state of icon.\n\n[play on codepen](https://codepen.io/erluxman/pen/PoPyNrM)\n\n![animatedicon](assets/40animatedicon.gif)\n\n[__`<< Previous`__](README.md)\n[___`Tips 21-40`___](page2.md)\n[__`Next >>`__](page3.md)\n\n[__`Tips 61-80`__](page4.md)\n[__`Tips 81-100`__](page5.md)\n"
        },
        {
          "name": "page3.md",
          "type": "blob",
          "size": 18.5810546875,
          "content": "# Tips 41 - 60\n\n## Tip 41 : Path Provider( `path_provider package`) (common file locations in iOS and Android)\n\nSometimes we want to get the location of Various common directories like:\n\n### Download, Cache, Documents, External Storage, External Cache etc\n\nThe package `path_provider` is build for exact same reason so that we do not have to deal with Platform specific issues by our own.\n\n1. Add path_provider to pubspect.\n   `path_provider: ^verison`\n2. Use it\n\n```dart\n//Gives download directory\nDirectory tempDir = await getTemporaryDirectory();\n\n//Gives documents directory\nDirectory docDir = await getApplicationDocumentsDirectory();\n\n//Gives external Storages\nList<Directory> externalStorages = await getExternalStorageDirectories();\n\n//Gives download directory\nDirectory downloadDir = await getDownloadsDirectory();\n```\n\n[Download `path_provider`](https://pub.dev/packages/path_provider#-readme-tab-)\n\n## Tip 42 : Flutter ShapeBorder\n\nWe can use ShapeBorder to give outline to widgets or Clip them on it's shape. There are my ShapeBorder like `Border, ContinuousRectangleBorder, StadiumBorder, CircleBorder, BeveledRectangleBorder` etc.\n\n1. Use ShapeBorder to give a Widget outline.\n```dart\nContainer(\n    decoration: ShapeDecoration(\n        color: Colors.white,\n        shape: // Any shape border\n    ),\n)\n```\n2. Use ShapeBorder to clip a Widget.\n```dart\nClipPath(\n    clipper: ShapeBorderClipper(\n        shape: // Any shape border\n    ),\n    child: // Any Child to be clipped\n)\n```\n[try in codepen](https://codepen.io/erluxman/pen/vYNQLPx)\n\n![shapeborder](assets/41shapeborder1.png)\n![shapeborder](assets/41shapeborder2.png)\n\n## Tip  43 : Collection if & for\n\nDo you miss number ranges like these in dart?\n\n```kotlin\nfor (i in 1..4) print(i) //Kotlin Range\nfor (i until 1..4) print(i) //Kotlin Range\n````\n\nNo problem. Just define this Range Extension on numbers and you will be good to go.\n```dart\nextension Range on num {\n    List<num> until(num endPoint) {\n        var exclusive = to(endPoint);\n        exclusive.removeLast();\n        return exclusive;\n    }\n\n    List<num> to(num endPoint) {\n        var numbers = <num>[];\n        if (endPoint > this) {\n            for (int i = this; i <= endPoint; i++) {\n                numbers.add(i);\n            }\n        } else {\n            for (int i = this; i >= endPoint; i--) {\n                numbers.add(i);\n            }\n        }\n        return numbers;\n    }\n}\n```\nThen Simply use them  like this:\n\n```dart\nvoid main() {\n    // 2,3,4,5,6,7,8,9,10\n    for (int i in 2.to(10)) { print(i); }\n\n    // 2,3,4,5,6,7,8,9\n    for (int i in 2.until(10)) { print(i); }\n\n    // 2,1,0,-1,-2,-3,-4,-5,-6,-7\n    for (int i in 2.to(-7)) { print(i); }\n\n    // 2,1,0,-1,-2,-3,-4,-5,-6\n    for (int i in 2.until(-7)) { print(i); }\n}\n```\n[try in dartpad](https://dartpad.dartlang.org/b14078511495bc822dfbc6895c273e15)\n\nIf you want more advanced range and other cool extensions use [dartx](https://github.com/leisim/dartx)\n\n## Tip  44 : Collection if & for\n\nIf you logically decide wheather to add a particular item into collection or not? It looks like no big deal when we dealing with adding normal objects to a collection as we could simply add collection items inside if or for statement.\n\nBut if we want to conditionally add widget or list of them inside another as one as it's children, it's a pain.\n\nFrom dart 2.3 onwards, we can use `collection if` and `collection for` operators for adding items to a collection `conditionally` or `in bulk`.\n\n### **Without collection if  or collection for**\n\n```dart\nListView(\n    children: [\n        Title(news.headline),      \n        (news.cover != null) ? FeatureImage(news.cover) : Container(),\n        ...news.paragraphs.map((paragraph) => Paragraph(paragraph)).toList(),\n        (news.author != null) ? Authored(news.author) : Container(),\n        Row(\n           mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n                (selected > 0) ? nextButton() : Container(),\n                (selected < (allNews.length - 1)) ? prevButton() : Container(),\n            ],\n        )\n    ],\n)\n```\n### **With collection if  or collection for**\n```dart\nListView(\n    children: [\n        Title(news.headline),\n        if (news.cover != null) FeatureImage(news.cover),\n        for (var paragraph in news.paragraphs) Paragraph(paragraph),\n        if (news.author != null) Authored(news.author),\n        Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n                if (selected > 0) nextButton(),\n                if (selected < (allNews.length - 1)) prevButton(),\n            ],\n        )\n    ],\n)\n```\n[try on codepen](https://codepen.io/erluxman/pen/yLYGbdy)\n\n![collectionif](assets/44collectioniffor.png)\n\n## Tip 45 : tear-off vs lambda vs function call\n\n### When possible we should use tear-off instead of these\n\n1. ___`A function call if caller and calling functions have same arguments.`___\n\n```dart\n// Use tear-off instead of Function if arguments of caller and calling method match\n\n// ‚ùå  Normal Method call ‚ùå\nvoid logSomething(String abc) => print(abc);\n// ‚úÖ  Using tear-off ‚úÖ\nvoid logSomething(String abc) => print;\n\n// ‚ùå  Normal Method call ‚ùå\npritSum(int first, int second) {\n    var sum = getSum(first, second);\n    print(sum);\n}\n// ‚úÖ  Using tear-off ‚úÖ\nprintSum1(int first, int second) => print(getSum);\n\n// ‚ùå  We cannot call tear-off on tear-off ‚ùå\nprintSum2(int first, int second) => getSum.print;\n\nint getSum(int first, int second) => first + second;\n```\n\n2. ___`A lambda.`___\n\n ```dart\n// Use 'tear-off' closure instead of lambda when possible\n\n// ‚ùå  Using Lambda ‚ùå\nvar button = MaterialButton( onPressed: () { buttonPressed(); } );\n// ‚úÖ  Using tear-off ‚úÖ\nvar button1 = MaterialButton( onPressed: buttonPressed );\n\nvoid buttonPressed() => print(\"Button Pressed\");\n\n// ‚ùå  Using Lambda ‚ùå\nprintFirstNSquares1(int count) {\n    1.to(count)\n    .map((number) {return getSquare(number); })\n    .foreach((square) { print(square); } );\n}\n// ‚úÖ  Using tear-off ‚úÖ\nprintFirstNSquares(int count) => 1.to(count).map(getSquare).forEach(print);\n\nint getSquare(int number) => number * number;\n```\n## Tip 46 : ColorFilterd Widget\n\nWant to apply filter to image or any widget? Use ColorFiltered widget like this.\n\n```dart\nColorFiltered(\n    colorFilter :ColorFilter.mode(Colors.pink,BlendMode.multiply),\n    child: //Widget\n)\n```\n    \n\nTry different BlendMode and colors.\n\nColorFiltered works with any widgets as child not just Image.\n\n[get the code](https://gist.github.com/erluxman/7b5c1dfec4461b147d9b00a86d080bb5)\n\n![filters](assets/46colorfiltered.gif)\n\n## Tip 47 : ShaderMask Widget\n\nIf you want to apply gradient mask or Image mask to any widget in flutter ShaderMask is the tool to use.\n\nJust give `blendMode` and `shaderCallback` to ShaderMask along with the Child that you want to mask.\n\nGradients can be easily converted to Shader with createShader() method.\n\n    ShaderMask(\n        blendMode: BlendMode.srcIn,\n        shaderCallback: (Rect bound) {\n            return LinearGradient(colors: <Color>[\n                Colors.deepOrange,\n                Colors.blue,\n                Colors.green,\n                Colors.amber,\n            ]).createShader(bound);\n        },\n        child: Icon(\n            Icons.ac_unit,\n            size: 200,\n            ),\n        )\n[get the code](https://gist.github.com/erluxman/b6f1166ac19b7b2654ee2102c58a8837)\n\n![mask](assets/47mask.png)\n\n## Tip 48 : `synchronized` in dart\n\nIn languages like Java there is a `synchronized` keyboard that acts as lock for preventing concurrent access like while handling transactions.\n\nIn dart we have a package called `synchronized`. Add `synchronized: ^latest_version` to `pubspec.yaml` then start using it by:\n\nSimply wrapping the transaction / block to be synchronized inside `synchronized()` and that block won't be called again until the previous call is finished.\n\n```dart\nimport 'package:synchronized/extension.dart';\nmain() async {\n    var demo = Demo();\n    await demo.runSynchronized();   // prints 12341234\n    await demo.runNotSynchronized();// prints 11223344\n}\n\nclass Demo {\n    Future runNotSynchronized() async {\n        stdout.writeln('not synchronized');\n        write1234();\n        write1234();\n        await Future.delayed(const Duration(milliseconds: 300));                            \n        stdout.writeln();\n    }\n\n    Future runSynchronized() async {\n        stdout.writeln('synchronized');\n        synchronized(() async { await write1234(); });\n        synchronized(write1234);\n        await Future.delayed(const Duration(milliseconds: 300));\n        stdout.writeln();\n    }\n        \n    Future write1234() async {\n        for (var value in [1, 2, 3, 4]) {\n            await Future.delayed(const Duration(milliseconds: 30));\n            stdout.write(value);  \n        }\n    }\n}\n```\n[get synchronous package](https://pub.dev/packages/synchronized#-installing-tab-)\n\n[get code Gist](https://gist.github.com/erluxman/ff1e8e9581285cf327e95b281585fbd7)\n\n## Tip  49 : Circular Image/Widget\n\nIn almost every app we need circular image (with a border & shadow).\n\nJust wrap the Image like this :  \n\n___`Widget/Image()`___ -Inside-> ___`ClipRRect()`___ -Inside-> ___`Container()`___(with circular BoxDecoration and boxShadow)\n\n```dart\nContainer(\n    decoration: BoxDecoration(\n        borderRadius: BorderRadius.circular(200),\n        border: Border.all(color: Colors.indigoAccent, width: 8),\n        boxShadow: [\n            BoxShadow(\n                color: Color(0x332222CC),\n                blurRadius: 6,\n                spreadRadius: 6,\n                offset: Offset.fromDirection(0, 0)),\n            ]\n        ),\n    child: ClipRRect(\n        borderRadius: BorderRadius.circular(400),\n        child: Image.network(\"imageUrl\",height: 200,width: 200,),\n    ),\n),\n```\n[try in codepen](https://codepen.io/erluxman/pen/abvxvOz)\n![circularimage](assets/49circularImage.png)\n\n## Tip  50 : Use `a is! A` instead of `!(a is A)`\n\nFlutter has special keyword to check if an instance ___`is not a type`___.\n\n```dart\nvar name = \"Hello World\";\n\n// ‚úÖ  Right way ‚úÖ\nassert(name is String);\n\n//‚ùå  Wrong way ‚ùå\nassert(!(name is int));\n\n// ‚úÖ  Right way ‚úÖ\nassert( name is! int); \n```\n## Tip 51 : Named constructor\n\nHave you been using static methods to initialze Objects with name?\n\nUse named constructor :\n\n```dart\nclass Color {\n    Color({this.r, this.b, this.g});\n    int r = 0, g = 0, b = 0;\n\n    // ‚ùå static method\n    static Color red() => Color(r: 255,g: 0,b:255);                                      \n    // ‚úÖ named constructor\n    Color.red() {\n        r = 255;\n    }\n\n    // ‚ùå static method\n    static Color cyan() => Color(r:0, b: 128, g: 128);\n    // ‚úÖ named constructor\n    Color.cyan(): g = 128, b = 128;\n    // ‚úÖ named constructor\n    Color.cyan() {\n        g = 128;\n        b = 128;\n    }\n}\n```\n## Tip 52 : Imports on Steroids üíâüíâ\n\n___`as :`___ If we import two or more libraries that have conflicting identifiers, we can use them with `prefix.` given after `as` keyword.\n\n`import 'package:library.dart' as lib;`\n\n___`show :`___ Show only certain class and hide everything else from it.\n\n`import 'dart:math' show max,tan;`\n\n___`hide :`___ Hide only certain class & show everything else from it.\n\n`import 'dart:core' hide String;`\n\n![importsonsteroid](assets/52importonsteroid.png)\n\n## Tip 53 : final vs const\n\n`final and const` in dart are confusing to the level we think both of them are same. Let's see their diffrences\n\n| ___`final`___ (global / static / member variables)                                                                                                                                                                 | ___`const`___ (static / global variables)                                                                                                 |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------- |\n| Has single value of a `member or static or global variable` from start to end.                                                                                                                                     | Has single value of a `static or global variable` from start to end.                                                                      |\n| Different objects of same type can have different final values in same member varaible.                                                                                                                            | Different objects of same type cannot have different const values in same varaible. (i.e. `const members should be static`)               |\n| Should be initialzed `before constructor is called`.                                                                                                                                                               | Should be `strictly initialized during declaration`.                                                                                      |\n| Only the `final` declared `member/staic/global variable` objects are immutable, their content variables may not. i.e. variables inside final objects can be udpated / reassigned if they are not final themselves. | All `const` declared `Golbal/static` variable objects including all their internal content varibales are immutable and cannot be changed. |\n| Can be `intialized` with `immutable/ mutable / calculated values` determined at  `compile time or runtime`.                                                                                                        | Can be `initialized`  with `only immutable values` with all their immutable internal varaibles, determined at `compile time`.             |\n\nWe can take example of various computers and how they can be compared with dart modifiers.\n![final vs constant](assets/53finalvsconstant.png)\n\n## Tip 54 : FutureBuilder\n\nIf you want to display data from API backend or any async source, use FutureBuilder.\n\nFutureBuilder will automatically give you Widget with default  value until the data arrives from API/ async Source.\n\nAs soon as the real data arrives, it will rebuild the Widget with actual data.\n\nJust provide the async function / source that will return the values asynchronously along with initial(default) data.\n\nIt works very similar to `StreamBuilder`\n\n```dart\n//Future Builder\nFutureBuilder<List<Player>>(\n    initialData: [],\n    future: FakePlayersAPI().getPlayers(),\n    builder: (context, snapshot) {\n        if (snapshot.data.isEmpty) return CircularProgressIndicator()\n        else return PlayersListWidget(snapshot.data)\n    }\n)\n\n//Fake Backed API.\nclass FakePlayersAPI {\n    Future<List<Player>> getPlayers() async {\n        await Future.delayed(Duration(seconds: 1));\n        return _players;\n    }\n\n    Future<String> getPlayerStory() async {\n        await Future.delayed(Duration(seconds: 1));\n        return playerStoryText;\n    }\n}\n```\n[try on codepen](https://codepen.io/erluxman/pen/PoPrgbR)\n\n![future builder](assets/54futurebuilder.gif)\n\n## Tip 55 : `Get` the easy Navigation library\n\nBored of writing `PageRoute`,`context` and `builder` without actual use of them just to navigate to different Widget? Use `get: ^version` library.\n\nAlso this gives us superpower to `navigate/show dialog/ BottomSheet/ Snackbar` without`BuildContext`, there might be cool patterns to be developed with this freedom.\n\n1. Just Replace your MaterialApp with `GetMaterialApp`.\n2. Start navigating like this :\n\n```dart\n//Go to next screen\nGet.to(NextScreen());\n        \n//Show dialog\nGet.dialog(MyDialogWidget());\n        \n//Show bottom sheet\nGet.bottomSheet(MyButtomSheetWidget)\n\n//Show snackbar \nGet.snackbar(title, subTitle);\n```\n[visit library](https://pub.dev/packages/get)\n\n[demo](https://gist.github.com/erluxman/2d1723e3395325fb5511809f6f95e21b)\n\n![getlib](assets/55getlib.gif)\n\n## Tip 56 : `pub outdated`\n\nMaintaining latest versions of pub dependencies is pain. Even worse, every latest versions are compatible.\n\nFrom dart 2.8 onwards, the command `pub outdated` gives you the overview of your dependencies and possible upgrades in ___**`Resolvable column`**___.\n\n![outdated](assets/56outdated.png)\n\nüö®üö®Tip: use `flutter pub outdated` if `pub outdated` can't find Flutter SDK.\n\n## Tip 57 : typedef\n\n`typedef` is used when you want to give an alias to a **`Function signature`**. As it can be laborous and error prone to type the Function Signature in every field or return type. As a bonus, we do not lose Function's type info.\n\n__`Steps to use typedef:`__\n\nStep 1 : Define a `typedef`  with Function Signature __`outside a class`__.\n```dart\ntypedef UserSelector = User Function(String, String);\n```\nStep 2 : Replace the Function Signature with typedef to declare members or return type.\n```dart\nclass A{\n    //Use this ‚úÖ\n    UserSelector userSelector;\n\n    // Not this ‚ùå\n    User Function(String, String) userSelector;\n\n    A ({this.userSelector});\n}\n```\nStep: Simply pass function/ lambda like you did before.\n```dart\n//Pass lambda \nvar a = A(userSelector: (id, authKey) {\n    return User(id, \"User name\");\n});\n\n//Pass Method\nvar a = A(userSelector: getUser)\n\nUser getUser(String id, String key) {\n    return User(id, \"User name\");\n}\n```\n## Tip 58 : Easy Flutter installation\n\nStill confused installing flutter in mac/linux easily?\n\n1. Download Flutter zip.\n2. Decompress it in desired directory.\n3. `cd` to that desired directory from terminal.\n      [üö®‚ö†Ô∏è flutter should be inside desired directory]\n4. Run the following command  \n```bash\n# If you are using zsh:\necho \"\\nexport PATH=\"\\$PATH:`pwd`/flutter/bin\"\">>~/.zshrc ; source ~/.zshrc\n\n# If you are using bash:\necho \"\\nexport PATH=\"\\$PATH:`pwd`/flutter/bin\"\">>~/.bashrc ; source ~/.bashrc\n```\n![a](assets/58flutterinstall.png)\n\n## Tip 59 : #BlackLifeMatter\n\nBlack lives matter ‚úäüèø& Racial Equality should be the norm.\n\nThis is a tip not just for Flutter developers but to all of us human.\n\nThis is my tip number #59.\n\n![a](assets/59blacklifematter.jpeg)\n\n## Tip 60 : Using SVG\n\nEven though flutter doesn't support any vector graphics out of the box, the package `flutter_svg` can render `svg` into Flutter app.\n\n1. Add dependency :\n        `flutter_svg: ^version`\n\n2. Start using it like Flutter `Image` Widget.\n```dart\n//load SVG from network\nSvgPicture.network(\"https://image.flaticon.com/icons/svg/124/124555.svg\", height: 200)\n        \n//load SVG from assets folder\nSvgPicture.asset(\"assets/ufo.svg\", height: 200)\n```\n[visit flutter_svg](https://pub.dev/packages/flutter_svg#-readme-tab-)\n\n![a](assets/60svg.png)\n\n[__`Tips 1-20`__](README.md)\n\n[__`<< Previous`__](page2.md)\n[___`Tips 41-60`___](page3.md)\n[__`Next >>`__](page4.md)\n\n[__`Tips 81-100`__](page5.md)\n"
        },
        {
          "name": "page4.md",
          "type": "blob",
          "size": 13.72265625,
          "content": "# Tips 61 - 80\n\n## Tip 61 : Using Flare Animations\n\nSimilar to vector graphics, Flutter doesn't support vector animation natively. [Rive (rive.app)](https://rive.app/explore) helps with amazing vector animations in Flutter.\n\n1. Add flare in `pubspec.yaml`:\n```yaml\nflare_flutter: ^version\n```\n\n2. Download flare files from [rive.app](https://rive.app/explore) & put those `.flr` files into \n```yaml\n`assets/` folder:\n\n        assets:\n            - assets/\n```\n3. Start using `FlareActor` widget.\n```dart\nFlareActor(\n        \"assets/world.flr\",\n\n        //üö®Cautionüö®, you can find üëâ #animation name in\n        //left bottom üëàüëá of rive.app designer tool when\n        //Animation tab is selected\n            \n        animation: \"world\")\n```\n[Visit Flare and SVG sample](https://github.com/erluxman/FlutterSVGFlareDemo)\n\n![a](assets/61flare.gif)\n\n## Tip 62 : `pubspec` autocomplete\n\nWhen we want to add a dependency only way is either going to github document or pub.dev.\n\nWe can directly add dependencies from our IDEs using extensions/plugins.\n\n__`For VS code`__ : [Pubspec Assist](https://marketplace.visualstudio.com/items?itemName=jeroen-meijer.pubspec-assist)            |  __`For Android Studio`__ : [Flutter Enhancement Suite](https://plugins.jetbrains.com/plugin/12693-flutter-enhancement-suite)\n:-------------------------:|:-------------------------:\n![a](assets/62pubspectassist.gif)  |  ![a](assets/62FlutterEnhancement.gif)\n\nP.S. Flutter Enhancement Suite comes with a lot of other great features.\n\n## Tip 63 : cached_network_image\n\n`cached_network_image` helps to __`show`__ and __`cache`__ image from Internet.\n\nIt shows image from cache if it's already cached instead of downloading.\n\nIt will make app feel faster and save network bandwidth.\n\n1. Add cached_network_image in pubspec.yaml\n\n```yaml\ndependencies:\ncached_network_image: ^version\n```\n2. Start using `CachedNetworkImage`.\n```dart\nCachedNetworkImage(\n        imageUrl: imageUrl,\n        placeholder: (context, url) => CircularProgressIndicator(),\n        errorWidget: (context, url, error) => Icon(Icons.error),\n)\n```\n\n[get cached_network_image](https://pub.dev/packages/cached_network_image#-readme-tab-)\n\nImage.network            |  CachedNetworkImage\n:-------------------------:|:-------------------------:\n![a](assets/63imagenetwork.gif)  |  ![a](assets/63cachednetworkimage.gif)\n\n## Tip 64 : `get_it`\n\n`get_it` helps you to access :\n\n- Service objects like `RESTClient`, `DB` & their `mocks` from anywhere.\n- `(View/UI)Model,BLoCs` etc. from `Widgets`.\n\n**without `BuildContext`.**\n\n### To use `get_it`\n\n1. Add get_it to dependencies\n\n        dependencies:\n        get_it: ^4.0.2\n\n2. Provide an object/dependency to get_it\n\n        void main() {\n            GetIt.I.registerSingleton(Player.messi());\n            runApp(MyApp());\n        }\n\n3. Get the dependency from anywhere in app with it's type.\n\n        Player currentPlayer = GetIt.I<Player>();\n        print(currentPlayer)  // Player{name: Messi,shirtNumber: 10}\n\n[visit get_it](https://pub.dev/packages/get_it#-readme-tab-)\n\n## Tip 65 : Setup Linter\n\nLint helps you to find potential errors, bugs, & code style inconsistancy etc.\n\n__`To setup lint in Flutter :`__\n\n1. Add lint in dev dependencies.\n\n```yaml\ndev_dependencies:\n        lint: ^version\n```\n2. Add `analysis_options.yaml` in project root directory.\n![lint](assets/65lint.png)\n\n3. Include `package:lint/analysis_options.yaml` inside `analysis_options.yaml` and add your custom rules.\n\n```yaml\ninclude: package:lint/analysis_options.yaml\n\n        # Custom Rules\n        linter:\n                rules:\n                        sort_constructors_first: true\n                        prefer_single_quotes: true\n```\n4. Done.\n\n### Before Lint\n\n![Before](assets/65lintbefore.png)\n\n### After Lint\n\n![Before](assets/65afterlint.png)\n\n[visit lint package](https://pub.dev/packages/lint)\n\n## Tip 66 : assert(boolean,messageIfFalse)\n\nIf some `conditions` __`must not ever occur`__ on program, we use assert to halt the execution.\n\nAssert condition means that there is no way we can handle exception caused if the condition fails, it must be fixed.\n\n`assert()` statement also help reduce the responsibility of a program as it doesn't need to handle every edge cases.\n\n`assert()` are ignored in release/production.\n\nSome examples :\n\n```dart\nupdateUser(User user){\n        assert(user.id != null) // There is no way to udpate user without id.\n        syncUser(user);\n}\n\nint  getRealSquareRoot(int square){\n        assert(square >= 0) //square must be positive to have real root.\n        return sqrt(square);\n}\n\ndriveCar(Car car){\n        assert(car.hasEngine);\n        assert(car.hasFuel);\n        assert(car.hasWheels);\n        car.drive();\n}\n```\n## Tip 67 : Show build Status badget on Readme\n\n![badge](assets/67cibadge.png)\n\n1. Create `.github/workflows/main.yml` Inside your project's root directory. or Run the command in your **terminal / Powershell** :\n```bash\nmd .github/workflows  && cd \"$_\" && touch main.yml\n```\n2. Put the steps in [this](https://gist.github.com/erluxman/ac4916fedc3b37982181b0a631561d20) file inside `main.yml`\n![main.yml](assets/67mainyml.png)\n\n3. Add the build badge on your README.md.\n\n        [![Dart CI]({YOUR_GITHUB_PROJECT_URL}/workflows/Flutter%20CI/badge.svg)]({YOUR_GITHUB_PROJECT_URL}/actions)\n\n4. Commit to Github.\n\n## Tip 68 : Show code coverage badget on Readme ![codecov](https://codecov.io/gh/erluxman/productive/branch/master/graph/badge.svg)\n\n1. Add the following steps at the end of your Github Actions  main.yml from previous tips.\nFind the full `main.yml` file [here](https://github.com/erluxman/productive/blob/master/.github/workflows/main.yml)\n\n       - uses: codecov/codecov-action@v1.0.2\n           if: matrix.os == 'ubuntu-latest'\n           with:\n             token: ${{secrets.CODECOV}} #required\n             file: ./coverage/lcov.info #optional \n\n2. Login/Sign up to [codecov.io](https://codecov.io/)\n3. Go to [https://codecov.io/gh](https://codecov.io/gh) > click on your username > search the repo to show codecoverage and select it.\n![codecov](assets/68codecov.gif)\n\n4. After that copy the Uplaod token (which should be staring at you at this point/inside setting tab)\n5. Go to project's setting(__`not profile setting`__), select \"Secrets\" from left navigation panel, Add new secret\n![github](assets/68gh.gif)\n\n6. Add code Coverage badge to your github repo README file.\n\n        [![codecov](https://codecov.io/gh/USER_NAME/REPO_NAME/branch/master/graph/badge.svg)](https://codecov.io/gh/USER_NAME/REPO_NAME)\n\n7. Git Push and wait for the build to complete, you will have the badges in your github Repo like this:\n![result](assets/68result.png)\n\n[See Video](https://www.youtube.com/watch?v=r4NQNSRWgY8)\n\n## Tip 69 : `factory` constructors\n\nInstead of using `static` methods to `create/return` `new/cached` instance of it's class or it's sub classi.e. __`factory pattern`__, we can use `factory constructors`.\n\n`factory` constructors **behave** like `static methods` but **called** like `normal constructors`. Factory constructors can also be be named & unnamed.\n\n    void main() {\n          //‚ùå static method ‚ùå \n          var staticUser = User.getUser(\"John Doe\");\n\n          //‚úÖ factory connstructor ‚úÖ\n          var factoryUser = User(\"John Doe\");\n    }\n    class User {\n          User._(this.name);\n          String name;\n          \n          static Map<String, User> users = {};\n\n          //‚ùå static method ‚ùå \n          static User getUser(String name) => users.putIfAbsent(name, () => User._(name));\n          \n          //‚úÖ factory connstructor ‚úÖ\n          factory User(String name) =>  users.putIfAbsent(name, () => User._(name));\n    }\n\n## Tip 70 : `AnimatedDefaultTextStyle`\n\nWe can animate change in TextStyle with `AnimatedDefaultTextStyle`.\n\nJust give the animation `duration` & the updated `TextStyle`. `AnimatedDefaultTextStyle` will take care of the rest.\n\n        AnimatedDefaultTextStyle(\n          duration: Duration(milliseconds: 300),\n          child: Text(\"Flutter\"),\n          style: newStyle,\n        )\n\n[try in codepen](https://codepen.io/erluxman/pen/XWXKBJP)\n\n![animatedtext](assets/70textanim.gif)\n\n## Tip 71 : MediaQuery\n\n`MediaQuery` gives the information about screen like `height`, `width`, `pixels`, `notch size`, **Device scale factor & text scale factor set on setting**, `device theme light/dark` , system animation `enabled/disabled` etc.\n[try on codepen](https://codepen.io/erluxman/pen/xxZEZGG)\n\n![snapshot](assets/71mediaquery.png)\n\n## Tip 72 : Decimal points\n\nWant to get desired number of digits after decimal?\n\n1. Use `number.toStringAsFixed()`  \n2. Parse the String to number.\n\nFor convenience we can use extension functions.\n[try on dartpad](https://dartpad.dartlang.org/3bdfd6923d1e8788ed81eaae9e77655f)\n\n![decimal](assets/72decimal.png)\n\n## Tip 73 : String multiplication\n\nYou can multiply String like numbers.\n\n    \"Foo\"*2 //Foo\n    \"Bar \"*5 //Bar Bar Bar Bar Bar\n\n![stringmultiplication](assets/73stringmultiplication.png)\n\n## Tip 74 : enum values\n\nGetting value of `enum` is **not trivial** in dart. This simple extension function can get rid of `Pain in the enum.`\n\n1. Define this extension\n2. Start calling `.asEnum()` in any `enum` to print the `Value`.\n3. You can use underscore `_` if you want space between words.\n\n[try in dartpad](https://dartpad.dartlang.org/f8233e822afa073a90018c3bf8a9e271)\n\n![demo](assets/74enum.png)\n\n## Tip 75 : Don't be afraid with `mixin`, it's here to help\n\n### üí£ Spoiler : `mixin` is not related to Animation by any means üòÇ, its just another keyword like `class`\n\n### But mixin is similar to\n\n#### **fastfood üçî/ plugin üß©/ an interface with already implemented methods & state, that is ready to be used without reimplementing those features everywhere we need them**\n\nWhen paired up with a `StatefulWidget`'s `State`,`TickerProviderStateMixin` creates `ticker` that ticks with every frame which is need by every AnimationController . It also disposes ticker when stateful widget disposes. That's why we provide `this` as TickerProvider(`vsync`) in every AnimationController.\n\nSimilarly we use ListMixin to use obvious implementation of List so that we do not have to implement obvious stuffs in every List implementation like `ElementList,NodeList,FileList,TouchList` etc.\n\n`extends (inheritance)` => only one class can be inherited along with their public/protected members and behaviors.\n\n`implements (contract)` => many classes can be implemented but we have to redefine every behavior.\n\n`with(mixin)` => Many classes can be mixed in and we can reuse the behavior of them.\n\nAny class or abstract class can be used as mixin. But we declare mixin, it cannot be extended like normal class or abstract class.\n\n    class A{} //Declaring class\n    mixin B{} //Declaring mixin\n    class C extends A{} // Valid ‚úÖ\n    class C extends B{} // Invalid ‚ùå\n\nA mixin cannot use another mixin.\n\n    mixin C with B{} // Invalid ‚ùå\n\n#### Conclusion : Use `mixin` if you want to reuse the behavior and state of multiple classes\n\n## Tip 76 : CustomPainter\n\nCustomPainter provides canvas to draw different shapes.\n\n1. Define a class and extend CustomPainter.\n2. Override paint(canvas,size) method and draw various shapes(circle,arc,rectangle,line etc) inside it.\n3. Add a CustomPaint widget  on screen and pass the CustomPainter as paint and it's size.\n\n![code ](assets/76paints.png)\n\nOutput\n\n![emoji ](assets/76emoji.png)\n![emoji ](assets/76emojis.png)\n\n[try on codepen](https://codepen.io/erluxman/pen/YzwZpba)\n\n## Tip 77 : Pause / wait program flow\n\nDo you want pause program flow for a certain duration? You can use `Future.delayed()` :\n\n`await Future.delayed( duration )`\n![future delayed](assets/77future.delayed.gif)\n\n## Tip  78 : Easy navigation\n\nHave you been navigating to different screen like this?\n\n ‚ùå Dont do this anymore ‚ùå\n\n    Navigator.of(this).push(\n          MaterialPageRoute(builder: (context) => NextScreen()),\n        );\n\n ‚úÖ Do this ‚úÖ\n\n1. Define a simple extension on `BuildContext`.\n\n        extension NavigationExtension on BuildContext {\n          \n          navigateTo(Widget destination) {\n            Navigator.of(this).push(\n              MaterialPageRoute(builder: (context) => destination),\n            );\n          }\n        }\n2. üéâ Celebrate üéâ üéâ\n\n        context.navigateTo( NextScreen());\n        context.navigateTo( SeventhScreen());\n        context.navigateTo( SettingPage());\n\n## Tip  79 : Just import every folders inside assets rather than every files\n\n**It's too much of work üò∞ü•± to import every assets like image üèû, json , audio üéµinto `pubspec.yml`**\n\n**But sadly üò¢, you can't import just the `assets` folder.**\n\n**Just import all the folders, it will work üéâüçæ.**\n\n![import](assets/79assets.png)\n\n## Tip  80 : Awesome way to access resources like images, fonts, strings and links\n\nInstead of using raw string, path & URLs, we can organize them in Resource classes.\n\n __`Group constants, paths and strings by their types`__\n\n    class Strings {\n      String appName = \"Productive\";\n      String privacyURL = \"https://blabla.com\";\n    }\n    class SVGImages { String homeIcon = \"assets/images/home.svg\";}\n    class LottieFiles { String paperPlane = \"assets/lottie/paper_plane.json\";}    \n\n__`Organize all resource into one class`__\n\n    class R {\n      static Strings strings = Strings();\n      static SVGImages svgImages = SVGImages();\n      static LottieFiles lottieFiles = LottieFiles();\n    }\n\n__`Use resources instead of raw strings and path`__\n\n    // ‚ùå Don't use raw Strings & Paths ‚ùå\n    Text(\"Productive\"),\n    Image.asset(\"assets/images/home.svg\"),\n    Lottie.asset(\"assets/lottie/paper_plane.json\"),   \n\n    // ‚úÖ Acess String & Pathsfrom Resource ‚úÖ\n    Text(R.strings.appName),\n    Image.asset(R.svgImages.homeIcon),\n    Lottie.asset(R.lottieFiles.paperPlane),\n\n[__`Tips 1-20`__](README.md)\n[__`Tips 21-40`__](page2.md)\n\n[__`<< Previous`__](page3.md)\n[___`Tips 61-80`___](page4.md)\n[__`Next >>`__](page5.md)\n"
        },
        {
          "name": "page5.md",
          "type": "blob",
          "size": 15.0263671875,
          "content": "# Tips 81 - 100\n\n## Tip 81 : Use [quicktype.io](https://app.quicktype.io/) to generate `serializer/deserializer` for dart\n\nConvert a `JSON` into `Dart class` with `fromJSON()` and `toJSON()` methods easily with  [quicktype.io](http://quicktype.io) \n\nJust **paste your JSON** and select `dart` from languages (right-top), you will get the `dart class`.\n\n try quicktype\n\n[app.quicktype.io](app.quicktype.io)\n\nAlternative:\n\nOr [json to dart](https://javiercbk.github.io/json_to_dart/)\n\n![quicktype](assets/81quicktype.gif)\n\n## Tip 82 : Loading PDF\n\nYou can display PDF easily with `pdf_flutter`\n\n1. Add `pdf_flutter` on pubspec.yml\n\n        dependencies:\n          pdf_flutter: ^version\n\n2. On `iOS` enable **PDF preview** like by adding this on ios/Runner/info.plist:\n\n        <key>io.flutter.embedded_views_preview</key>\n        <true/>\n3. Start Using\n\n        //Load PDF from Network\n        PDF.network(\n            'https://raw.githubusercontent.com/FlutterInThai/Dart-for-Flutter-Sheet-cheet/master/Dart-for-Flutter-Cheat-Sheet.pdf',\n            height: 500,\n            width: 300,)\n        \n        //Load PDF from Assets\n        PDF.assets(\"assets/pdf/demo.pdf\",height:400,width:300)\n        \n        //Load PDF from file\n        File fileName;\n        PDF.file(fileName,height:400,width:300)\n\nVisit [pdf_flutter](https://github.com/erluxman/pdf_flutter)\n\n![pdf_flutter](assets/82pdf_flutter.gif)\n\n## Tip 83 : `flutter clean`\n\nAn obvious but underappreciated tip:\n\nMore than half of the unexpected/strange build errors can be solved by `flutter clean`\n\nThe first step towards fixing any build errors in Flutter should be:\n\n    flutter clean \n\n__`ü§°Remember this command, it will save you hours of frustration`__\n\n## Tip  84 : Use `Alice` plugin to inspect network requests like chuck\n\nAlice records Http request,payload & response which can be viewed in simple UI (notification or widget). Alice can work with http:http, dart:io/HttpClient, Chopper & Dio.\n\n### Steps\n\n1. Add dependency.\n2. Create Alice instance (global is OK)\n\n        Alice _alice = Alice(showNotification: true, showInspectorOnShake: true);\n\n3. Pass  `_alice.getNavigatorKey()` as NavigatorKey of Material/Cupertino App.\n\n        MaterialApp(\n            navigatorKey: _alice.getNavigatorKey(),\n            child:....\n        )\n\n4. Start logging (using http:http for sample)\n\n        import 'package:http/http.dart' as http;\n\n        http\n            .post('https://jsonplaceholder.typicode.com/posts', body: body)\n            .interceptWithAlice(_alice, body: body);\n\n        http\n            .get('https://jsonplaceholder.typicode.com/posts')\n            .interceptWithAlice(_alice);\n\n        http\n            .put('https://jsonplaceholder.typicode.com/posts/1', body: body)\n            .then((response) {\n          _alice.onHttpResponse(response, body: body);\n        });\n\n5. See the HTTP call details  \n  Simply call `_alice.showInspector();`  \n\n    **or**\n\n    `Just shake the phone`\n\n    **to**\n\n    open the **Http call details** screen.\n\n[get alice](https://pub.dev/packages/alice)\n\n![alice](assets/84inspector.gif)\n\n## Tip 85 : Neumorphic Design with `clay_containers`\n\n`clay_containers` makes it easy to build Neumorphic UI.\n\n1. Add dependency\n\n    dependencies:\n      clay_containers: ^version\n\n2. Start using\n\n        ClayContainer(\n                color: baseColor,\n                height: 200,\n                width: 200,\n                child:Center(child:newChild) //Put child inside Center to align it centrally.\n                depth:45, // negative elevation(both +ve & -ve)\n                curveType: CurveType.convex, //Curve of surface (concave, convex, plane)\n                borderRadius: 200,\n              )\n\n![clay](assets/85claycontainer.png)\n\n[see xbox controller demo](https://github.com/erluxman/clay_container_demo)\n\n[visit clay_containers](https://pub.dev/packages/clay_containers#-readme-tab-)\n\n## Tip  86 : `provider`\n\nPassing an object/bloc from a parent widget to it's children across the widget tree by passing it through every Widget constructor between parent and the reciever child is hard.\n\nWith `provider` you can easily pass object/bloc from parent to any widget below it in widget tree.\n\n1. Add dependency\n  \n```dart\nprovider: ^4.1.3\n```\n\n2. Pass object/model/bloc from Parent Widget by wrapping any widget with Provider.\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    return Provider(\n      create:(_)=> User(\"erluxman\"),\n      child: ScreenA(\n        child:ScreenB(\n          child:ScreenC(),\n        ),\n      ),\n    );\n  }\n\n  class User{\n    String name;\n    User(this.name);\n  }\n```\n\n3. Recieve object/model/bloc/ by calling `Provider.of<ObjectType>(context)`\n\n```dart\nclass ScreenC extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    User user = Provider.of<User>(context);\n    print(user.name); //erluxman\n    return Container(\n      child: Center(\n        child: Text(user.name), //erluxman\n      ),\n    );\n  }\n}\n```\n\n[visit provider](https://pub.dev/packages/provider)\n\n## Tip 87 : Flutter Sinppets\n\nUsing Flutter snippets helps gain speed and become productive by eliminating the time typing the boilerplate code by autocompleting various snippets.\n\n[for android studio](https://plugins.jetbrains.com/plugin/12348-flutter-snippets)\n\n[for vscode](https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets)\n\n![snippets](assets/87snippets.gif)\n\n## Tip 88 : Create Emoji FloatingActionButton\n\nWhen we get too used to using Icon in FloatingActionButton, we tend to forget that we can use various types of widget as FloatingActionButton's child.\n\nWe can use emoji Text as Child to FloatingActionButton to get wonderful colorful Fabs without any image.\n\n```dart\nFloatingActionButton(\n  backgroundColor: Colors.white,\n  child: Text(\n    \"üöÄ\",\n    textAlign: TextAlign.center,\n    style: TextStyle(fontSize: 30),),\n)\n```\n\n[try in codepen](https://codepen.io/erluxman/pen/vYLpgBo)\n\n![emojifab](assets/88emojifab.gif)\n\n## Tip 89 : Run any task in a periodic interval  with `Timer.periodic()`\n\nYou can run any task repeatedly in a certain time period like this:\n\n```dart\nTimer.periodic(const Duration(seconds: 1), (Timer time) {\n    setState(() {\n        // Your code that runs periodically\n        secondsPast += 1;\n    });\n});\n```\n\n[try on codepen](https://codepen.io/erluxman/pen/pogpqxX)\n\n![periodic](assets/89periodic.gif)\n\n## Tip 90 : Launcher Icon with ease\n\n **Don't want to create launcher Icons for platform and put them in place manually?**\n\n use `flutter_launcher_icons`\n\n 1. Add dev dependency (__`remember dev_dependencies`__).\n\n```yml\ndev_dependencies:\n  flutter_launcher_icons: ^0.7.5\n```\n\n 2. Configure flutter_icons (**`no spaces before flutter_icons:`**)\n\n```yml\nflutter_icons:\n  android: \"launcher_icon\"\n  ios: true\n  image_path: \"assets/images/ic_launcher.png\" #use your image path\n```\n\n3. Generate Icons\n\n```shell\nflutter pub run flutter_launcher_icons:main\n```\n\n4. Run app\n\n| Android icon |iOS icon|\n|--|--|\n|![](assets/90_android.png)| ![](assets/90_ios.png) |\n\n[visit flutter_launcher_icons](https://pub.dev/packages/flutter_launcher_icons)\n\n## Tip 91 : `dough` package\n\nWant to make Flutter widgets smooshy like Jelly or Dough? Use the package `dough`\n\n1. Add `dough` to dependency\n```yml\ndependencies:\n  dough: ^version\n```\n\n2. Wrap any widget with `PressableDough()`. \n\n```dart\nPressableDough(\n  child: FloatingActionButton(\n    onPressed: () {},\n    child: Text(\"üß†\",style: TextStyle(fontSize: 40)),\n  ),\n)\n```\n\n3. **Sorry to disappoint but you are already done üòú**\n\n[sample gist](https://gist.github.com/erluxman/1e102548403db046872d7db530e73594)\n\n[visit dough](https://pub.dev/packages/dough#-installing-tab-)\n\n![dough](assets/91doughh.gif)\n\n## Tip 92 : Autocomplete TextField with `flutter_typeahead`\n\nAutocomplete TextField can be implemented with `flutter_typeahead` Package.\n\n1. Add Dependency\n\n```yml\ndependencies:\n  flutter_typeahead: ^version\n```\n\n2. Use `TypeAheadFormField` / `TypeAheadField`\n\n```dart\nvar platforms = [\"Flutter\", \"Android\", \"iOS\", \"Mac\", \"React\", \"Cordova\"];\nfinal TextEditingController input = TextEditingController();\n\nTypeAheadFormField(\n  textFieldConfiguration: TextFieldConfiguration(\n    decoration: InputDecoration(labelText: 'City'),\n    controller: this.input),\n\n  //Search and return found values\n  suggestionsCallback: (pattern) => platforms.where(\n    (item) => item.toLowerCase().contains(pattern.toLowerCase()),\n  ),\n  itemBuilder: (_, item) => ListTile(title: Text(item)),\n  onSuggestionSelected: (query) => this.input.text = query,\n),\n```\n\n[visit flutter_typeahead](https://pub.dev/packages/flutter_typeahead)\n\n[visit demo](https://gist.github.com/erluxman/523818577fa54cb6d0f5e0e8cc1d6a9a)\n\n![autocomplete](assets/92_autocomplete_textfield.gif)\n\n## Tip 93 : Read Network State with `connectivity` package\n\n`connectivity` package makes it easy to read network state of device.\n\n1. Add dependency\n\n```yml\ndependencies:\n  connectivity: ^version\n```\n\n2. Read network states\n\n```dart\nclass State ...{\n  @override\n  initState() {\n    super.initState();\n    subscription = Connectivity()\n      .onConnectivityChanged\n      .listen((ConnectivityResult result) {\n          if (result == ConnectivityResult.mobile) //mobile connected.\n          else if (result == ConnectivityResult.wifi) //Wifi Connected.  \n          else if(result == ConnectivityResult.none) //No network\n    });\n  }\n\n  @override\n  dispose() {\n    subscription.cancel();\n    super.dispose();\n  }\n}\n```\n\n[visit connectivity package](https://pub.dev/packages/connectivity)\n\n[visit sample gist](https://gist.github.com/erluxman/7e47f12378e79e0168cca7b6eea1c416)\n\n![](assets/93connectivity.gif)\n\n## 94 Tip  ‚ö°Ô∏è `superCharged`‚ö°Ô∏è\n\n`supercharged` brings awesome utility features from other languages to dart üéØ. making developers life easier.\n### 1. Add Dependency\n\n```yml\ndependencies:\n  supercharged: ^1.6.0\n```  \n\n### 2. Have fun üéâ\n\n```dart\n\"#ff00ff\".toColor();\n\"red\".toColor();\n\"flutter is cool\".allBefore(\" is\"); // \"flutter\"\n12.between(0, 30); // true\n[1, 2, 3].elementAtOrNull(4); // Don't throw, return null\n[1, 2, 3].elementAtOrElse(4, () => 0); //Don't throw, return default value\n//Create Pages from list\n[\"a\", \"b\", \"c\"].chunked(2, fill: () => \"\"); // [ [\"a\", \"b\"], [\"c\", \"\"] ]\n\nvar duration = 5.minutes + 30.seconds;\nduration += 0.5.hours\n\n100.0.tweenTo(200.0); // Tween(begin: 100.0, end: 200.0)\nColors.red.tweenTo(Colors.blue); // ColorTween(...)\n\n//Easy for loop\n[\"dog\", \"cat\"].forEachIndexed((index, value) {\n    print(\"$i : $value\") // 1 : dog, 2 : cat\n});\n```\n\n[visit supercharged](https://pub.dev/packages/supercharged)\n\n## Tip 95 : DefaultTextStyle Widget\n\nWe can apply TextStyle to all the widgets in the hirarchy by wrapping it with DefaultTextStyle.\n\n```dart\n DefaultTextStyle(\n    child: Column(\n      children: <Widget>[\n        Text(\n          \"DefaultTextStyle With Green text color\",\n          textAlign: TextAlign.center,\n          style: TextStyle(fontSize: 20, color: Colors.black),\n        ),\n        Text(\"Title\"), //Green color, size 30\n        Text(\"SubTitle\", style: TextStyle(fontSize: 25)), //Green color, size 25\n        Text(\"Heading\", style: TextStyle(fontSize: 20)), //Green color, size 20\n      ],\n    ),\n    style: TextStyle(fontSize: 30, color: Colors.green),\n  );\n```\n\n[visit sample](https://codepen.io/erluxman/pen/wvMXJKK)\n\n![defaulttextstyle](assets/95defaulttextstyle.png)\n\n## Tip 96 : `flutter_cache_manager`\n\nYou can use `flutter_cache_manager` to Download **`and / or`** Cache files.\n\n```dart\n//Get file from Cache and download if not cached already.\nFile file = await DefaultCacheManager().getSingleFile(url);\n\n//Download File without caching\nFile file = await DefaultCacheManager().downloadFile(url);\n```\n\n[visit on pub.dev](https://pub.dev/packages/flutter_cache_manager#-readme-tab-)\n\n## Tip 97 : Make link on Text clickable using `flutter_linkify`\n\n`flutter_linkify` is a Text Widget that automatically finds the URL link in the string and makes it clickable.\n\n1. Add dependency\n\n```yml\ndependencies:\n  flutter_linkify: ^version\n```\n\n2. Enjoy\n\n```dart\n  Linkify(\n    text: \"My  twitter https://twitter.com/erluxman\",\n    onOpen: (LinkableElement url) {\n      Scaffold.of(context).showSnackBar(\n        SnackBar(content: Text(\"${url.text} clicked\")),\n      );\n    },\n  )\n```\n\n![linkify](assets/97linkify.gif)\n[visit pacakge](https://pub.dev/packages/flutter_linkify#-installing-tab-)\n\n### Tip 98 : Package `flutter_spinkit`\n\nWe need to show **`loading/progress`** in almost every apps, but `CircularProgressBar` everywhere is boring.\n\n`flutter_spinkit` provides many awesome Progress indictors that we can use.\n\n1. Add dependency\n\n```yml\nflutter_spinkit: ^4.1.2+1\n```\n\n1. Start Using\n   - #### üî•Type `SpinKit` and press  `Ctrl+SPACE` to see all possible indicators.\n   - Give `color (@required)`, `size(optional)` and `duration(optional)` to SpinKit* widgets.\n\n```yml\nSpinKitCircle(size: 90, color: Colors.cyan),\nSpinKitChasingDots(size: 190, color: Colors.blue),\nSpinKitCubeGrid(size: 90, color: Colors.blue),\nSpinKitDualRing(size: 90, color: Colors.blue,),\nSpinKitFadingCube(size: 90, color: Colors.red),\nSpinKitFadingFour(size: 90, color: Colors.green)\n```\n\n[visit flutter_spinkit](https://pub.dev/packages/flutter_spinkit#-readme-tab-)\n\n![spinkit](assets/98spinkit.gif)\n\n\n### Tip 99 : Show widgets as `Toast` with `oktoast`\n\nWe can show toast with `oktoast` package.\n\n1. Add dependency:\n\n```yml\ndependencies:\n  oktoast: ^2.3.2\n```\n\n2. Wrap **`(Material/Cupertino)App`** with `OKToast`\n\n```dart\nOKToast(\n  child: MaterialApp( home: child)\n)\n```\n\n3. Show `Text/Widget` as __`Toast`__ by calling `showToast()/showToastWidget()` from anywhere.\n\n```dart\nimport 'package:oktoast/oktoast.dart';\n\nshowToast(\"Hello world\");\nshowToast(Text(\"Hello world\"));\n```\n\n[visit oktoast](https://pub.dev/packages/oktoast#-installing-tab-)\n\n![toast](assets/99toasts.gif)\n\n### Tip 100 : Easy Setting screens with `settings_ui`\n\nAlmost every app needs setting page, but doing it right across multiple platform is not a easy.\n\n#### `settings_ui` helps create Consistant Setting Page with standard components\n\n1. Add dependency\n\n```yml\ndependencies:\n  settings_ui: ^version\n```\n\n2. Start Using\n\n```dart\n\nSettingsList( // Whole setting Page\n  sections: [\n    SettingsSection( // Set of similar settings items\n      title: 'Common',\n      tiles: [\n        SettingsTile( // Single Setting item\n          title: 'Language',\n          subtitle: 'English',\n          leading: Icon(Icons.language),\n        ),\n        SettingsTile( // Single Setting item\n          title: 'Environment',\n          subtitle: 'Production',\n          leading: Icon(Icons.cloud_queue),\n        ),\n      ],\n    ),\n  ],\n)\n```\n\n__`SettingList`__ -> Whole setting Page\n\n__`SettingsSection`__ -> Set of similar settings Eg. Account, Security\n\n__`SettingTile`__ -> Single Setting item Eg. Phone Number, Email\n\n[visit settings_ui](https://pub.dev/packages/settings_ui#-example-tab-)\n\n| Android Setting                   | iOS Setting               |\n| --------------------------------- | ------------------------- |\n| ![android](assets/100settingandroid.png) | ![ios](assets/100settingios.png) |\n\n[__`Tips 1-20`__](README.md)\n[__`Tips 21-40`__](page2.md)\n[__`Tips 61-80`__](page3.md)\n\n[__`<< Previous`__](page4.md)\n[___`Tips 81-100`___](page5.md)\n"
        },
        {
          "name": "wip.md",
          "type": "blob",
          "size": 2.255859375,
          "content": "<!-- ---\ntitle: Flutter Tips 85-91\ndate: '2020-07-12'\nspoiler: 14th batch of 7 tips and tricks on the series 100DaysOfFlutter.\n---\n\n### #99 Bottom Sheet(modal_bottom_sheet)\n\n### #98 Flutter TTS\n\n### #98 avatar_glow 1.2.0\n\n### #98 animate_do 1.7.2\n### workmanager\n\n### zefyr\n### oktoast 2.3.2\n### feature_discovery\n### settings_ui 0.3.0 (Building setting UI that will reflect corresponding platform)\n### flutter_neumorphic 3.0.1\n### #98 awesome_dialog\n### #98 after_layout\n### #flutter_email_sender\n### #flutter_staggered_animations\n### #flutter_native_splash\n\n## #97 `rate_my_app`\n\nWe ask users to **`rate our app`**, but doing it effeciently without irritating users is a difficult job.\n\nInstead of making manual popups and logic, `rate_my_app` makes it easy to properly show **`rate our app`** properly with requirements to show dialog like:\n\n- Minimum number of days & launches from app is installed.\n- Minimum number of days & launches between two popups.\n- iOS in-app rating dialog.\n  \n1. Add dependency.\n\n```yml\ndependencies:\n  rate_my_app: ^0.6.1+6\n```\n\n2. Add following to iOS/Runner/Info.plist\n\n```xml\n<key>LSApplicationQueriesSchemes</key>\n<array>\n    <string>itms</string>\n</array>\n```\n\n3. Initialze\n\n```dart\n  WidgetsFlutterBinding.ensureInitialized();\n```\n\n## #95 Flutter hooks(`flutter_hooks`)\n\n- Do you think `StatefulWidget` is too verbose?\n- Do you want to reuse it's init() and dispose() method?\n- Do you want AnimationControoler,TextInputController, StreamController etc's creation and dispose() taken care of automatically?\n- Do you want to reuse logic inside StatefulWidget in different widgets?\n  \n  Use `flutter_hooks`.\n\n### Without `flutter_hooks`\n\n```\n\n## #95 https://pub.dev/packages/sa_stateless_animation\n\n## #94 EZ simple_animations: ^2.2.1\n\n## #94 EZ animations\n\n## #95 Riverpod Flutter\n\n## #Day86 Difference between pump(),pumpWidget() and pumpAndSettle()\n\n## #Day86 Flutter-Neumorphic\n\nIf you need advanced library for flutter with lots of Neumorphic features, use this package.\n\nhttps://github.com/Idean/Flutter-Neumorphic\n\n## #Publish a library\n\nhttps://stackoverflow.com/questions/51536756/flutter-listview-jumps-to-top\n\nhttps://blog.codemagic.io/how-to-improve-the-performance-of-your-flutter-app./\n\nhttps://blog.codemagic.io/flutter-matrix4-perspective-transformations/ -->"
        }
      ]
    }
  ]
}