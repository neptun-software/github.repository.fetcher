{
  "metadata": {
    "timestamp": 1736710569463,
    "page": 164,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "flutter/devtools",
      "stars": 1605,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5751953125,
          "content": "# Auto detect text files and perform LF normalization\n*        text=auto\n\n# Always perform LF normalization on these files\n*.dart   text\n*.gradle text\n*.html   text\n*.java   text\n*.json   text\n*.md     text\n*.py     text\n*.sh     text\n*.txt    text\n*.xml    text\n*.yaml   text\n\n# Make sure that these Windows files always have CRLF line endings in checkout\n*.bat    text eol=crlf\n*.ps1    text eol=crlf\n\n# Never perform LF normalization on these files\n*.ico    binary\n*.jar    binary\n*.png    binary\n*.zip    binary\n\n# Preserve \\n line endings in Golden files.\n**/*test*/goldens*/* eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0625,
          "content": "# See https://www.dartlang.org/guides/libraries/private-files\n\n# Files and directories created by pub\n.dart_tool/\n.packages\n.pub/\npubspec.lock\n\n.idea/\n.data_dir/\n\n# Ignore any Flutter SDK in flutter-sdk/\nflutter-sdk/\n\n# .DS_Store is a file that stores custom attributes of its containing folder,\n# such as the position of icons or the choice of a background image.\n.DS_Store\n\n# Generated files not intended to be checked in to version control\n.flutter-plugins\n**/.flutter-plugins-dependencies\nflutter_export_environment.sh\nPodfile\nPodfile.lock\n**/generated/not_namespaced_r_class_sources/\n**/devtools_app/build/\n**/devtools_app_shared/build/\n**/devtools_extensions/build/\n**/devtools_shared/build/\n**/devtools_test/build/\npackages/devtools_test/lib/src/mocks/generated.mocks.dart\n**/*.stager_app.dart\n**/test/**/failures/\n*.dill\nDEPENDENCIES.md\n**/*.log\n\n# Ignore logs generated by VS Code\n**/logs/**\n*.stager_app.g.dart\n\n# Ignore VS code workspaces that may be configured per-user\n*.code-workspace\n\n# Ignore devtools_options.yaml files under example.\n**/example/**/devtools_options.yaml\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.185546875,
          "content": "# Below is a list of people and organizations that have contributed\n# to the Flutter project. Names should be added to the list like so:\n#\n#   Name/Organization <email address>\n\nGoogle Inc.\n"
        },
        {
          "name": "BETA_TESTING.md",
          "type": "blob",
          "size": 4.3720703125,
          "content": "# Build DevTools\n\nThis page describes the fastest way to build DevTools with the goal to use it. Do not mix this setup with development environment. If you want to make code changes, follow [contributing guidance](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md).\n\nYou may want to build DevTools locally to:\n\n1. Try experimental features\n\n2. Run DevTools on Flutter Desktop instead of Flutter Web. This will eliminate issues like the browser memory limit, for example, to be able to analyze heap snapshots of large applications.\n\nThese steps are tested for Mac and may require adjustments for other platforms. Contributions\nto make these instructions more platform-agnostic are welcome.\n\n## Prerequisites (first time only)\n\n### Set up Dart & Flutter\n\n[Configure](https://docs.flutter.dev/get-started/install) Dart & Flutter on your local machine.\n\nAfter doing so, typing `which flutter` and `which dart` (or `where.exe flutter` and `where.exe dart` for Windows)\ninto your terminal should print the path to your Flutter and Dart executables.\n\n### Set up your DevTools environment\n\n1. Ensure you have a clone of the DevTools repository on your machine. This can be a clone of\n`flutter/devtools` or a clone of a DevTools\n[fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) from your own Github\naccount. You may want to fork Devtools to your own Github account if you plan to contribute\nto the project.\n\n    In your terminal, navigate to a directory where you want to clone DevTools: `cd some/directory`.\n    This folder must not already contain a folder named 'devtools'.\n \n    **To clone flutter/devtools**:\n    - Clone the DevTools repo: `git clone git@github.com:flutter/devtools.git` \n        - If you haven't already, you may need to\n    [generate a new SSH key](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)\n    to connect to Github with SSH.\n\n    **To clone your fork of flutter/devtools**:\n    - [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the DevTools repo to your\n    own Github account.\n    - Clone your fork of the DevTools repo: `git clone git@github.com:your_github_account/devtools.git` \n        - If you haven't already, you may need to\n    [generate a new SSH key](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)\n    to connect to Github with SSH.\n    - Make sure to [configure Git to keep your fork in sync](https://docs.github.com/en/get-started/quickstart/fork-a-repo#configuring-git-to-sync-your-fork-with-the-upstream-repository)\n    with the upstream DevTools repo.\n\n2. Ensure that you have access to the `dt` executable by:\n\t- Running `flutter pub get` on the `devtools/tool` directory\n\t- Adding the `devtools/tool/bin` folder to your `PATH` environment variable:\n\t  - **MacOS Users**\n\t    - add the following to your `~/.zshrc` file (or `~/.bashrc`, `~/.bash_profile` if you use Bash),\n\t\treplacing `<DEVTOOLS_DIR>` with the local path to your DevTools repo:\n\n\t\t\t```\n\t\t\texport PATH=$PATH:<DEVTOOLS_DIR>/tool/bin\n\t\t\t```\n\t  - **Windows Users**\n\t\t- Open \"Edit environment variables for your account\" from Control Panel\n\t\t- Locate the `Path` variable and click **Edit**\n\t\t- Click the **New** button and paste in `<DEVTOOLS_DIR>/tool/bin`, replacing `<DEVTOOLS_DIR>`\n\t\twith the local path to your DevTools repo.\n\t\n\tExplore the commands and helpers that the `dt` provides by running `dt -h`. \n\n## Prepare to build DevTools\n\nTo ensure your DevTools repository is up to date and ready to build, run the following from the\n`devtools` directory (this will delete any local changes you have made to your DevTools clone):\n```bash\ngit checkout master\ngit reset --hard origin/master\n\ndt update-flutter-sdk\ndt pub-get --only-main --upgrade\n```\n\n## Start DevTools and connect to an app\n\n1. From the main `devtools/packages/devtools_app` directory, run the following, where\n`<platform>` is one of `chrome`, `macos`, or `windows` depending on which platform you\nare targeting:\n    ```bash\n    ../../tool/flutter-sdk/bin/flutter run --release -d <platform>\n    ```\n\n    - Add `--dart-define=enable_experiments=true` to enable experimental features.\n\n2. Run the application that you want to debug or profile with DevTools. \n3. Paste the VM Service URL of your application into the DevTools connect dialog. See this\n[example](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md#connect-devtools-to-a-test-application).\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.9306640625,
          "content": "*                   @flutter/devtools-reviewers\n\n# Inspector Files\ninspector/          @elliette\n\n# Network Files\nnetwork/            @bkonyi @kenzieschmoll\n\n# Performance Files\nperformance/        @kenzieschmoll\n\n# CPU Profiler files\nprofiler/           @kenzieschmoll @bkonyi\n\n# Memory files\nmemory/             @bkonyi @kenzieschmoll\n\n# Debugger files\ndebugger/           @elliette\n\n# VM Developer files\nvm_developer/       @bkonyi\n\n# Tooling files\n/tool/              @kenzieschmoll\n\n# DevTools extensions and related files\nsrc/extensions/\npackages/devtools_extensions/    @kenzieschmoll\npackages/devtools_app_shared/    @kenzieschmoll\n\n# package:devtools_shared code, which is used across DevTools and the Dart SDK\npackages/devtools_shared/        @kenzieschmoll @bkonyi\n\n# Version bump files.\n# No owners to prevent version update spam\npackages/devtools_app/lib/devtools.dart\npackages/devtools_app/pubspec.yaml\npackages/devtools_test/pubspec.yaml\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.17578125,
          "content": "# Code of conduct\n\nWhen contributing code to the `devtools` project, please observe\nFlutter's [code of conduct](https://github.com/flutter/flutter/blob/master/CODE_OF_CONDUCT.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 15.0537109375,
          "content": "# Contributing to DevTools\n\n![GitHub contributors](https://img.shields.io/github/contributors/flutter/devtools.svg)\n\n_tl;dr: join [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md), be\n[courteous](https://github.com/flutter/flutter/blob/master/CODE_OF_CONDUCT.md), follow the steps below\nto set up a development environment; if you stick around and contribute, you can\n[join the team](https://github.com/flutter/flutter/blob/master/docs/contributing/Contributor-access.md) and get commit access._\n\n> If you are here because you just want to test the bleeding-edge (unreleased) DevTools functionality,\nfollow our [beta testing guidance](https://github.com/flutter/devtools/blob/master/BETA_TESTING.md).\n\n## Welcome\n\nWe gladly accept contributions via GitHub pull requests! We encourage you to read the\n[Welcome](https://github.com/flutter/flutter/blob/master/CONTRIBUTING.md#welcome) remarks in the Flutter\nframework's contributing guide, as all of that information applies to contributing to the `flutter/devtools`\nrepo as well.\n\nWe communicate primarily over GitHub and [Discord](https://github.com/flutter/flutter/blob/master/docs/contributing/Chat.md) on the\n[#hackers-devtools](https://discord.com/channels/608014603317936148/1106667330093723668) channel.\n\nBefore contributing code:\n\n1. Complete the\n[Contributor License Agreement](https://cla.developers.google.com/clas).\nYou can do this online, and it only takes a minute.\n\n2. Review the [DevTools style guide](STYLE.md), which uses a combination of Dart and Flutter best practices.\n\n## Table of contents\n1. [Developing for DevTools](#developing-for-devtools)\n\t- [Set up your DevTools environment](#set-up-your-devtools-environment)\n\t- [Workflow for making changes](#workflow-for-making-changes)\n\t- [Keeping your fork in sync](#keeping-your-fork-in-sync)\n2. [Running and debugging DevTools](#running-and-debugging-devtools)\n    - [Frontend only (most common)](#frontend-only-most-common)\n    - [Frontend + DevTools server](#frontend--devtools-server)\n    - [DevTools + VS Code integration](#devtools--vs-code-integration-ide-embedded-devtools-experience)\n3. [Testing for DevTools](#testing-for-devtools)\n4. [Appendix](#appendix)\n\n## Developing for DevTools\n\n### Set up your DevTools environment\n\n**Before setting up your DevTools environment**, please make sure you have\n[cloned the Flutter SDK from GitHub](https://github.com/flutter/flutter/blob/main/docs/contributing/Setting-up-the-Framework-development-environment.md)\nand added the included `flutter` and `dart` executables to your `PATH` environment variable (see Flutter\ninstructions for how to [update your PATH](https://flutter.dev/to/update-macos-path)).\n\nTyping `which flutter` and `which dart` (or `where.exe flutter` and `where.exe dart` for Windows)\ninto your terminal should print the path to the binaries from Flutter SDK you cloned from GitHub.\n\n1. [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the DevTools repo to your\nown Github account, and then clone it using SSH. If you haven't already, you may need to\n[generate a new SSH key](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)\nto connect to Github with SSH.\n2. Make sure to [configure Git to keep your fork in sync](https://docs.github.com/en/get-started/quickstart/fork-a-repo#configuring-git-to-sync-your-fork-with-the-upstream-repository)\nwith the upstream DevTools repo.\n3. Ensure that you have access to the DevTools repo management tool exectuable, `dt`:\n\t- Running `flutter pub get` on the `devtools/tool` directory\n\t- Adding the `devtools/tool/bin` folder to your `PATH` environment variable:\n\t  - **MacOS Users**\n\t    - add the following to your `~/.zshrc` file (or `~/.bashrc`, `~/.bash_profile` if you use Bash),\n\t\treplacing `<DEVTOOLS_DIR>` with the local path to your DevTools repo:\n\n\t\t\t```\n\t\t\texport PATH=$PATH:<DEVTOOLS_DIR>/tool/bin\n\t\t\t```\n\t  - **Windows Users**\n\t\t- Open \"Edit environment variables for your account\" from Control Panel\n\t\t- Locate the `Path` variable and click **Edit**\n\t\t- Click the **New** button and paste in `<DEVTOOLS_DIR>/tool/bin`, replacing `<DEVTOOLS_DIR>`\n\t\twith the local path to your DevTools repo.\n\n\tExplore the commands and helpers that `dt` provides by running `dt -h`.\n4. **Optional:** enable and activate DCM (Dart Code Metrics) - see the [DCM section below](#enable-and-activate-dcm-dart-code-metrics)\n\n#### Set up your IDE\n\nWe recommend using VS Code for your DevTools development environment because this gives you\naccess to some advanced development and configuration features. When you open DevTools in VS Code,\nopen the `devtools/packages` directory in your VS Code workspace. This will give you access to a set\nof launch configurations for running and debugging DevTools:\n\n![VS Code launch configurations](_markdown_images/vs_code_launch_configurations.png)\n\n### Workflow for making changes\n\n1. Change your local Flutter SDK to the latest flutter candidate branch: `dt update-flutter-sdk --from-path`\n\n> Note: Until  https://github.com/flutter/devtools/issues/7939 is fixed, run\n`dt update-flutter-sdk --use-cache` instead.\n\n2. Create a branch from your cloned DevTools repo: `git checkout -b myBranch`\n3. Ensure your branch, dependencies, and generated code are up-to-date: `dt sync`\n4. Implement your changes, and commit to your branch: `git commit -m “description”`\n\t- If your improvement is user-facing, [document it](packages/devtools_app/release_notes/README.md) in the same PR.\n5. Push to your branch to GitHub: `git push origin myBranch`\n6. Navigate to the [Pull Requests](https://github.com/flutter/devtools/pulls) tab in the main\n[DevTools repo](https://github.com/flutter/devtools). You should see a popup to create a pull\nrequest from the branch in your cloned repo to the DevTools master branch. Create a pull request.\n\t- **Running the Dart Code Metrics Github workflow:** any PRs that change Dart code require the\n\tDart Code Metrics workflow to be run before being submitted. To trigger the workflow, add the\n\tlabel `run-dcm-workflow` to your PR. If you don't have permission to add the label, your\n\treviewer can add it for you.\n\t\t- Any DCM errors will be caught by the workflow. Fix them and push up your changes. To trigger\n\t\tthe DCM workflow to run again, you will need to remove and then re-add the `run-dcm-workflow` label.\n\n### Keeping your fork in-sync\n\n- If at any time you need to re-sync your branch, run:\n\t```\n\tdt sync\n\t```\n\tThis will pull the latest code from the upstream DevTools, upgrade dependencies, and perform code generation.\n\n- If you want to upgrade dependencies and re-generate code (like mocks), but do not want to merge `upstream/master`, instead run\n\t```\n\tdt generate-code --upgrade\n\t```\n\n - To update DCM to the same version as on GitHub bots with apt-get or brew:\n\n    1. Locate, copy and run apt-get command searching by searching for `install dcm` in [build.yaml](https://github.com/flutter/devtools/blob/master/.github/workflows/build.yaml)\n\n    2. Locate version on bots by searching for `install dcm` in [build.yaml](https://github.com/flutter/devtools/blob/master/.github/workflows/build.yaml) and run `brew install cqlabs/dcm/dcm@<version on bots without -1>`\n\n    You can check you current local version with `dcm --version`.\n\n    If version of DCM on bots is outdated, consider to submit a PR to refresh the version on bots.\n\n## Running and debugging DevTools\n\nThere are a few different environments that you may need to run DevTools in. After running DevTools\nin one of the environments below, connect to a test application to debug DevTools runtime tooling\n(the majority of DevTools tools). See the\n[Connect DevTools to a test application](#connect-devtools-to-a-test-application) section below.\n\n### Frontend only (most common)\n\nMost of the time, you will not need to run DevTools with the DevTools server to test your changes.\nYou can run DevTools in debug mode as either a Flutter web or Flutter desktop app.\n\n> Note: though DevTools is shipped as a Flutter Web app, we recommend developing as a Flutter\nDesktop app whenever possible for a more efficient development workflow. Please see the\n[running on Flutter desktop](#running-devtools-on-flutter-desktop) section below for instructions.\n\n- To run DevTools as a Flutter web app **from VS Code**, run with the **devtools (packages)** configuration and the \"Chrome\" device\n\t- To run with experiments enabled, run from VS Code with the **devtools + experiments (packages)** configuration\n- To run DevTools as a Flutter web app **from the command line**, run `flutter run -d chrome`\n\t- To run with experiments enabled, add the flag `--dart-define=enable_experiments=true`\n\n### Frontend + DevTools server\n\nTo develop with a workflow that exercises the DevTools server <==> DevTools client connection,\nyou will need to perform the following set up steps (first time only).\n\n1. Clone the [Dart SDK](https://github.com/dart-lang/sdk) fron GitHub.\n2. The `LOCAL_DART_SDK` environment variable needs to point to this path: `export LOCAL_DART_SDK=/path/to/dart/sdk`\n\nIf you are also developing server side code (e.g. the `devtools_shared` package), you will need to add a\ndependency override to `sdk/pkg/dds/pubspec.yaml`.\n\n```yaml\ndependency_overrides:\n  devtools_shared:\n    path: relative/path/to/devtools/packages/devtools_shared\n```\n\nThen you can run DevTools with the server by running the following from anywhere under the `devtools/` directory:\n1. To run DevTools in release mode, served with the DevTools server (this emulates the production environment):\n\t```\n\tdt serve\n\t```\n2. To run DevTools in debug mode with full debugging support and a connection to a live DevTools server:\n\t```sh\n\tdt run\n\t```\n\nOption 2 is useful for a quicker development cycle. The DevTools build time will be faster, and you will be\nable to connect the DevTools web app to an IDE or DevTools for debugging purposes.\n\nTo see the full list of arguments available for either command, please pass the `-h` flag.\n\n### DevTools + VS Code integration (IDE-embedded DevTools experience)\n\nTo test the integration with VS Code, you can set up the Dart VS Code extension to run DevTools\nand the server from your local source code. Follow the\n[Frontend + DevTools server](#frontend--devtools-server) setup instructions above, and make sure\nyou have version v3.47 or newer of the Dart extension for VS Code.\n\nOpen your VS Code settings (Run the **Preferences: Open User Settings (JSON)** command from the\ncommand palette (`F1`)) and add the following to your settings:\n\n```js\n\"dart.customDevTools\": {\n\t\"path\": \"/path/to/devtools\",\n\t\"env\": {\n\t\t\"LOCAL_DART_SDK\": \"/path/to/sdk\"\n\t\t// Path to the version that Flutter DevTools is pinned to.\n\t\t\"FLUTTER_ROOT\": \"/path/to/devtools/tool/flutter-sdk\"\n\t},\n\t\"args\": [\n\t\t// Arguments that will be passed along to the `dt serve` command.\n    ],\n},\n```\n\nThis instructs VS Code to run the `dt serve` command instead of running `dart devtools`.\nYou must set the `LOCAL_DART_SDK` and `FLUTTER_ROOT` env variables correctly for the script to work.\n\nNext, restart VS Code (or run the **Developer: Reload Window** command from the command palette (`F1`))\nand DevTools will be run from your local source code. After making any code changes to DevTools or the\nserver, you will need to re-run the **Developer: Reload Window** command to rebuild and restart the server.\n\n## Testing for DevTools\n\nPlease see [TESTING.md](TESTING.md) for guidance on running and writing tests.\n\n## Appendix\n\n### Connect DevTools to a test application\n\nFor working on most DevTools tools, a connection to a running Dart or Flutter app is required. Run any Dart of Flutter app of your choice to\nconnect it to DevTools. Consider running the [Flutter gallery](https://github.com/flutter/gallery#running) app, as it has plenty of interesting\ncode to debug.\n1. Run your Dart or Flutter app\n\t> Note: some DevTools features may be unavailable depending on the test app platform (Flutter native, Flutter web, Dart CLI, etc.) or run mode\n\t(debug, profile) you choose.\n2. Copy the URI printed to the command line (you will use this uri to connect to DevTools)\n\n\t```\n\t\"A Dart VM Service on iPhone 14 Pro Max is available at: <copy-this-uri>\"\n\t```\n3. Paste this URI into the connect dialog in DevTools and click \"Connect\"\n\n\t![Connect dialog example](_markdown_images/connect_dialog_example.png)\n\n### Running DevTools on Flutter Desktop\n\nFor a faster development cycle with hot reload, you can run DevTools on Flutter desktop. Some DevTools\nfeatures only work on the web, like the embedded Perfetto trace viewer, DevTools extensions, or DevTools\nanalytics, but the limitations on the desktop app are few.\n\nTo run DevTools with the desktop embedder, you can run with either of the following from `devtools/packages/devtools_app`:\n\n- `flutter run -d macos`\n- `flutter run -d linux`\n\nIf this fails, you may need to run `flutter create .` from `devtools/packages/devtools_app` to generate\nthe updated files for your platform. If you want to run DevTools on Flutter desktop for Windows, you will\nneed to generate the files for this platform using the same command, and then run using `flutter run -d windows`.\n\n### Enable and activate DCM (Dart Code Metrics)\n\nEnabling and activating DCM is optional. When you open a PR, the CI bots will show you any DCM warnings introduced\nby your change which should be fixed before submitting.\n\n- **Contributors who work at Google:** you can use the Google-purchased license key to activate DCM.\nSee [go/dash-devexp-dcm-keys](http://goto.google.com/dash-devexp-dcm-keys).\n\n- **All other contributors:** please follow instructions at <https://dcm.dev/pricing/>. You can either use the free tier of DCM, or purchase a team license. Note that the free tier doesn't support all the rules of the paid tier, so you will also need to consult the output of the [Dart Code Metrics workflow on Github](#running-the-dart-code-metrics-github-workflow) when you open your PR.\n\nTo enable DCM:\n\n1. Install the executable for your target platform. You can refer to [this guide](https://dcm.dev/docs/teams/getting-started/#installation).\n2. [Get the license key](http://goto.google.com/dash-devexp-dcm-keys) and activate DCM. To do so, run `dcm activate --license-key=YOUR_KEY` from the console.\n3. Install the extension for your IDE. If you use VS Code, you can get it from [the marketplace](https://marketplace.visualstudio.com/items?itemName=dcmdev.dcm-vscode-extension). If you use IntelliJ IDEA or Android Studio, you can find the plugin [here](https://plugins.jetbrains.com/plugin/20856-dcm).\n4. Reload the IDE.\n\n>Note:  DCM issues can be distinguished from the Dart analyzer issues by their name: DCM rule names contain `-`. Some of the issues can be fixed via CLI, to do so, run `dcm fix` for any directory. To apply `dcm fix` on a file save in the IDE, refer to [this guide](https://dcm.dev/docs/teams/ide-integrations/vscode/#extension-capabilities).\n\n### third_party dependencies\n\nAll content not authored by the Flutter team (which includes both sponsored and open-source contributors)\nmust go in the `third_party` directory. As an expedient to make the `third_party` code work well with our\nbuild scripts, code in `third_party` should be given a stub `pubspec.yaml` file so that you can reference\nthe resources from the packages directory from `packages/devtools_app/web/index.html`\n"
        },
        {
          "name": "DOCUMENTATION.md",
          "type": "blob",
          "size": 1.7880859375,
          "content": "## DevTools Documentation - How To Guide\n\nThe documentation for Dart & Flutter DevTools lives on [flutter.dev](https://docs.flutter.dev/tools/devtools).\n\nOur docs are written and pushed up to the [flutter/website](https://docs.flutter.dev/tools/devtools)\nrepo by the Flutter DevRel team. Developers working on DevTools should collaborate with Flutter tech writers by following\nthe below workflow.\n\n## How to request documentation updates\n\n### For simple updates:\nSome examples of \"simple\" updates include updating screenshots, glossary terms, coding recipes, etc. For this type of documentation request, you can include all the relevant information in a GitHub issue. Please follow\nthe [guidance below](#file-an-issue-on-the-flutterwebsite-repo) to create this issue.\n\n### For feature updates that can be shown in a demo video:\n\n1. Create a [Screencast](chrome://extensions/?id=ccbdlfckiiklnpopmgihhnegpbcgceja) (preferred) or a Google Drive video\nexplaining the new feature or functionality changes that require docs updates. If the feature is quick to document, you\ncan include a rough draft of the documentation you think should be written, but where possible, we should leave the\nwriting to our talented tech writers.\n2. Create a Go Link pointed at your demo video.\n3. Follow\nthe [guidance below](#file-an-issue-on-the-flutterwebsite-repo) to create a GitHub issue.\n\n### File an issue on the flutter/website repo:\n\nCreate an [new issue](https://github.com/flutter/website/issues/new) on the flutter/website repository.\n- Add a descriptive title for your request.\n- Add the `devtools-request` label.\n- Add relevant information to the issue description. This may include\na Go Link to your demo video or doc, a screenshot, a short description,\nor any other relevant context that our tech writers may need to fulfill\nyour request.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4462890625,
          "content": "Copyright 2018 The Chromium Authors. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n   * Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.\n   * Redistributions in binary form must reproduce the above\ncopyright notice, this list of conditions and the following disclaimer\nin the documentation and/or other materials provided with the\ndistribution.\n   * Neither the name of Google Inc. nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.041015625,
          "content": "# Dart & Flutter DevTools\n\n[![Build Status](https://github.com/flutter/devtools/workflows/devtools/badge.svg)](https://github.com/flutter/devtools/actions)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/flutter/devtools/badge)](https://deps.dev/project/github/flutter%2Fdevtools)\n\n## What is this?\n\n[Dart & Flutter DevTools](https://docs.flutter.dev/tools/devtools) is a suite of performance tools for Dart and Flutter.\n\n## Getting started\n\nFor documentation on installing and trying out DevTools, please see our\n[docs](https://docs.flutter.dev/tools/devtools).\n\n## Contributing and development\n\nContributions welcome! See our\n[contributing page](https://github.com/flutter/devtools/blob/master/CONTRIBUTING.md)\nfor an overview of how to build and contribute to the project.\n\n## Terms and Privacy\n\nBy using Dart DevTools, you agree to the [Google Terms of Service](https://policies.google.com/terms). To understand how we use data collected from this service, see the [Google Privacy Policy](https://policies.google.com/privacy?hl=en).\n"
        },
        {
          "name": "STYLE.md",
          "type": "blob",
          "size": 2.3154296875,
          "content": "# DevTools style guide\n\nWe fully follow [Effective Dart](https://dart.dev/effective-dart)\nand some items of\n[Style guide for Flutter repo](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md):\n\n## Order of getters and setters\n\nWhen an object owns and exposes a (listenable) value,\nmore complicated than just public field\nwe declare the related class members always in the same order,\nwithout new lines separating the members,\nin compliance with\n[Flutter repo style guide](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#order-other-class-members-in-a-way-that-makes-sense):\n\n1. Public getter\n2. Private field\n3. Public setter (when needed)\n\n## Naming for typedefs and function variables\n\nFollow [Flutter repo naming rules for typedefs and function variables](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#naming-rules-for-typedefs-and-function-variables).\n\n## Overriding equality\n\nUse [boilerplate](https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#common-boilerplates-for-operator--and-hashcode).\n\n## URIs and File Paths\n\nCare should be taken when using file paths to ensure compatibility with both\nWindows and POSIX style paths. File URIs should generally be preferred and only\nconverted to paths when required to interact with the file system.\n\n`String` variables that hold paths or URIs should be named explicitly with a\n`Path` or `Uri` suffix, such as `appRootPath` or `appRootUri`.\n\nAdditionally:\n\n- `Uri.parse()` should not be used for converting file paths to URIs, instead\n  `Uri.file()` should be used\n- `Uri.path` should not be used for extracting a file path from a URI, instead\n  `uri.toFilePath()` should be used\n- In code compiled to run in the browser, `Uri.file()` and `uri.toFilePath()`\n  will assume POSIX-style paths even on Windows, so care should be taken to\n  handle these correctly (if possible, avoid converting between URIs and file\n  paths in code running in a browser)\n\n## Text styles\n\nThe default text style for DevTools is `Theme.of(context).regularTextStyle`. The default\nvalue for `Theme.of(context).bodyMedium` is equivalent to `Theme.of(context).regularTextStyle`.\n\nWhen creating a `Text` widget, this is the default style that will be applied.\n"
        },
        {
          "name": "TESTING.md",
          "type": "blob",
          "size": 3.8857421875,
          "content": "# Testing for DevTools\n\nDevTools is test covered by multiple types of tests, all of which are run on the CI for each DevTools PR / commit:\n\n1. Unit tests\n    - tests for business logic\n2. Widget tests\n    - tests for DevTools UI components using mock or fake data\n    - some widget tests may contain golden image testing\n3. Partial integration tests\n    - tests for DevTools UI and business logic with a real VM service connection to a test app\n4. Full integration tests\n    - Flutter web integration tests that run DevTools as a Flutter web app and connect it to a real test app\n    on multiple platforms (Flutter mobile, Flutter web, and Dart CLI)\n\n**The following instructions are for unit tests, widget tests, and partial integration tests** in DevTools. For instructions\non running and writing full integration tests, please see [integration_test/README.md](integration_test/README.md).\nIn general, we should first try to test cover new features and bug fixes with unit tests or widget tests\nbefore writing new integration tests, which are slower to run and are not as easy to debug or iterate upon.\n\n## Running DevTools tests\n\nBefore running tests, make sure your Flutter SDK matches the version that will be used on\nthe CI. To update your local flutter version, run:\n\n```shell\ndt update-flutter-sdk --update-on-path\n```\n\n> Note: Running this command requires that you have followed the [set up instructions](CONTRIBUTING.md#set-up-your-devtools-environment) in the DevTools contributing guide regarding cloning the Flutter SDK from GitHub, adding the `dt` executable to your PATH, and running `dart pub get` in the `tool` directory.\n\nYou may need to re-generate the testing mocks before running the tests:\n\n```shell\ndt generate-code --upgrade\n```\n\nNow you can proceed with running DevTools tests:\n\n```shell\ncd packages/devtools_app\nflutter test test/\n```\n\n### Updating golden image files\n\n> Note: golden images should only be generated on MacOS.\n\nGolden image tests will fail for one of three reasons:\n\n1. The UI has been _intentionally_ modified.\n2. Something changed in the Flutter framework that would cause downstream changes for our tests.\n3. The UI has been _unintentionally_ modified, in which case we should not accept the changes.\n\nFor valid golden image updates (1 and 2 above), the failing golden images will need to be updated. This can\nbe done in one of two ways:\n\n1. If the tests failed on the CI for a PR, we can download the generated golden images directly from GitHub.\n    > If you are developing on a non-MacOS machine, this is the only way you'll be able to update the golden images.\n    - Navigate to the failed Actions run for your PR on GitHub. Example:\n\n        ![Failed actions run](_markdown_images/failed_actions_run.png)\n\n    - Scroll to the bottom of the Summary view to see the errors from the `macos goldens` job, and the notice containing the golden update command:\n\n        ![Failed goldens notice](_markdown_images/failed_goldens_notice.png)\n\n2. Update the goldens locally by running the failing test(s) with the `--update-goldens` flag.\n\n    - Before updating the goldens, ensure your version of Flutter matches the version of Flutter that is used\n    on the CI. To update your local flutter version, run:\n\n        ```shell\n        dt update-flutter-sdk --update-on-path\n        ```\n\n    - Then proceed with updating the goldens:\n\n        ```shell\n        flutter test <path/to/my/test> --update-goldens\n        ```\n\n        or to update goldens for all tests:\n\n        ```shell\n        flutter test test/ --update-goldens\n        ```\n\n## Writing DevTools tests\n\nWhen you add a new feature or fix a bug, please add a corresponding test for your change.\n\n- If there is an existing test file for the feature your code touches, you can add the test case\nthere.\n- Otherwise, create a new test file with the `_test.dart` suffix, and place it in an appropriate\nlocation under the `test/` directory for the DevTools package you are working on.\n"
        },
        {
          "name": "TRIAGE.md",
          "type": "blob",
          "size": 3.958984375,
          "content": "# Triage\n\n## The Process\n\nDevTools issues are triaged weekly as time allows or at a dedicated time set aside by the triager.\nThe triager is assigned by an automatic rotation of DevTools team members. \n\n## Quick links\n- [Untriaged issues](https://github.com/flutter/devtools/issues?q=is%3Aopen+is%3Aissue+-label%3AP0%2CP1%2CP2%2CP3)\n- [Reproduce to verify issues](https://github.com/flutter/devtools/labels/reproduce%20to%20verify)\n(issues that need to be manually reproduced in order to verify validity)\n- [flutter/flutter issues related to DevTools](https://github.com/flutter/flutter/labels/d%3A%20devtools)\n\n## Triager responsibilities\n\nThe triager should spend about ~1 hour per week on maintaining the health of the DevTools repository.\n\n1. Triage any [new flutter/devtools issues](https://github.com/flutter/devtools/issues?q=is%3Aopen+is%3Aissue+-label%3AP0%2CP1%2CP2%2CP3)\nby applying [proper labels](#label-the-issue) and [assigning priority](#prioritize-the-issue).\n2. Triage any new [flutter/flutter issues related to DevTools](https://github.com/flutter/flutter/labels/d%3A%20devtools).\nTransfer any issues to the `flutter/devtools` repo that should be tracked on our own issue tracker, and close issues you\nfind that are obsolete.\n3. Try to reproduce any issues with the [reproduce to verify](https://github.com/flutter/devtools/labels/reproduce%20to%20verify) label.\n4. Spend at least 20 minutes [cleaning up the issue backlog](#clean-up-the-issue-backlog).\n5. Look through the DevTools discord [channel](https://discord.com/channels/608014603317936148/958862085297672282) for any recent user\nquestions or concerns that require a response.\n\n### Label the issue\n\n* Add labels for its proper category or categories ( “screen: inspector\", “screen: network\", “bug”, etc.)\n* Add cost labels (\"cost: low\", \"cost: medium\", etc.) if you have a good idea of how much work it will\ntake to resolve this issue. Leave the cost label off if you do not know.\n* Add label “waiting for customer response” if you requested more details from reporter\n* Add label “fix it friday” if the issue should be fixed and looks easy to fix\n* Add label \"good first issue\" if the issue looks like an easy starter bug for a new contributor\n\n### Prioritize the issue\n\nFollow the prioritization rubric [here](https://github.com/flutter/flutter/blob/master/docs/contributing/issue_hygiene/README.md#priorities).\nIf the issue requires specific expertise, tag a product area owner (see below) in a comment and ask them to take a look. \nIf the issue is actively being worked on or if it needs immediate / almost-immediate attention (P0, P1), assign the issue\nto a product area owner.\n\nHere are some suggested owners by product area:\n* **Flutter Inspector**: @elliette\n* **Performance**: @kenzieschmoll\n* **CPU Profiler**: @kenzieschmoll or @bkonyi\n* **Memory**: @kenzieschmoll or @bkonyi\n* **Network**: @elliette or @bkonyi\n* **Logging**: @elliette or @bkonyi\n* **VM Tools**: @bkonyi\n* **Debugger**: @elliette\n* **DevTools extensions**: @kenzieschmoll\n* **Tooling integrations with VS Code**: @DanTup\n* **Tooling integrations with IntelliJ or Android Studio**: @helin24 or @jwren\n\nFor anything else that requires immediate attention but does not fit into one of\nthe above areas, please tag @kenzieschmoll or @elliette.\n\n**Ping the [hackers-devtools](https://discord.com/channels/608014603317936148/1106667330093723668) discord channel\nabout issues marked “severe: …” or “P0”.**\n\n### Clean up the issue backlog\n\nThis step is to ensure the health of the [DevTools issue backlog](https://github.com/flutter/devtools/issues) over time.\nThere are a couple of things to do as part of the backlog clean up work:\n- Close any obsolete issues. Recommendation: start with the oldest issues first since these are the most likely to be stale.\n- Add good candidates for product excellence / quality work to the \n[DevTools Product Excellence project](https://github.com/orgs/flutter/projects/157). This project feeds monthly milestone\nplanning for ongoing P.E. work.\n"
        },
        {
          "name": "_markdown_images",
          "type": "tree",
          "content": null
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 10.4140625,
          "content": "include: package:flutter_lints/flutter.yaml\n\nanalyzer:\n  language:\n    # strict-casts: true # Over 300 issues; mostly parsing JSON\n    # Enabling strict-inference requires adding type annotations to a bunch of\n    # silly locations; namely `Future.delayed`. Does not seem pragmatic right\n    # now.\n    # strict-inference: true # 34 issues\n    # strict-raw-types: true # Over 100 issues.\n  errors:\n    # treat missing required parameters as a warning (not a hint)\n    missing_required_param: warning\n  exclude:\n    - '**/build/**'\n    - '**.freezed.dart'\n    - tool/flutter-sdk/\n\nlinter:\n  rules:\n    # Added on top of the flutter/flutter lints:\n    - prefer_generic_function_type_aliases\n\n    # From flutter/flutter:\n    # these rules are documented on and in the same order as\n    # the Dart Lint rules page to make maintenance easier\n    # https://github.com/dart-lang/linter/blob/master/example/all.yaml\n    - always_declare_return_types\n    # - always_put_control_body_on_new_line\n    # - always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219\n    # - always_specify_types\n    - annotate_overrides\n    # - avoid_annotating_with_dynamic # conflicts with always_specify_types\n    # - avoid_as # we use 'as' in this codebase\n    # - avoid_bool_literals_in_conditional_expressions # not yet tested\n    # - avoid_catches_without_on_clauses # we do this commonly\n    # - avoid_catching_errors # we do this commonly\n    - avoid_classes_with_only_static_members\n    # - avoid_double_and_int_checks # only useful when targeting JS runtime\n    - avoid_empty_else\n    - avoid_dynamic_calls\n    - avoid_field_initializers_in_const_classes\n    - avoid_function_literals_in_foreach_calls\n    - avoid_init_to_null\n    # - avoid_js_rounded_ints # only useful when targeting JS runtime\n    # - avoid_positional_boolean_parameters # not yet tested\n    - avoid_print\n    # - avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)\n    - avoid_redundant_argument_values\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    # - avoid_returning_null # we do this commonly\n    # - avoid_returning_this # https://github.com/dart-lang/linter/issues/842\n    # - avoid_setters_without_getters # not yet tested\n    # - avoid_single_cascade_in_expression_statements # not yet tested\n    - avoid_slow_async_io\n    # - avoid_types_as_parameter_names # https://github.com/dart-lang/linter/pull/954/files\n    # - avoid_types_on_closure_parameters # conflicts with always_specify_types\n    - avoid_unnecessary_containers\n    # - avoid_unused_constructor_parameters # https://github.com/dart-lang/linter/pull/847\n    - await_only_futures\n    - camel_case_types\n    - cancel_subscriptions\n    # - cascade_invocations # not yet tested\n    # - close_sinks # https://github.com/flutter/flutter/issues/5789\n    # - comment_references # blocked on https://github.com/dart-lang/dartdoc/issues/1153\n    # - constant_identifier_names # https://github.com/dart-lang/linter/issues/204\n    - control_flow_in_finally\n    - directives_ordering\n    - discarded_futures\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    - hash_and_equals\n    - implementation_imports\n    # - join_return_with_assignment # not yet tested\n    - library_names\n    - library_prefixes\n    # - literal_only_boolean_expressions # https://github.com/flutter/flutter/issues/5791\n    - no_adjacent_strings_in_list\n    - no_duplicate_case_values\n    - non_constant_identifier_names\n    # - omit_local_variable_types # opposite of always_specify_types\n    # - one_member_abstracts # too many false positives\n    # - only_throw_errors # https://github.com/flutter/flutter/issues/5792\n    - overridden_fields\n    - package_names\n    - package_prefixed_library_names\n    # - parameter_assignments # we do this commonly\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    # - prefer_constructors_over_static_methods # not yet tested\n    - prefer_contains\n    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/blob/master/docs/contributing/Style-guide-for-Flutter-repo.md#consider-using--for-short-functions-and-methods\n    - prefer_final_fields\n    - prefer_final_in_for_each\n    - prefer_final_locals\n    - prefer_foreach\n    # - prefer_function_declarations_over_variables # not yet tested\n    - prefer_initializing_formals\n    # - prefer_interpolation_to_compose_strings # not yet tested\n    # - prefer_iterable_whereType # https://github.com/dart-lang/sdk/issues/32463\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_relative_imports\n    - prefer_single_quotes\n    - prefer_typing_uninitialized_variables\n    # Obsolete with the new Dart formatter.\n    # - require_trailing_commas\n    - recursive_getters\n    - slash_for_doc_comments\n    - sort_child_properties_last\n    - sort_constructors_first\n    - sort_unnamed_constructors_first\n    - test_types_in_equals\n    - throw_in_finally\n    # - type_annotate_public_apis # subset of always_specify_types\n    - type_init_formals\n    - unawaited_futures\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    - unnecessary_getters_setters\n    # - unnecessary_lambdas # https://github.com/dart-lang/linter/issues/498\n    - unnecessary_library_directive\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_statements\n    - unnecessary_this\n    - unrelated_type_equality_checks\n    - use_rethrow_when_possible\n    # - use_setters_to_change_properties # not yet tested\n    # - use_string_buffers # https://github.com/dart-lang/linter/pull/664\n    - use_string_in_part_of_directives\n    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review\n    - valid_regexps\n    # - void_checks # not yet tested\n\ndart_code_metrics:\n  metrics:\n    cyclomatic-complexity: 20\n    number-of-parameters: 4\n    maximum-nesting-level: 5\n  metrics-exclude:\n    - test/**\n  rules:\n#    - arguments-ordering Too strict\n#    - avoid-banned-imports # TODO(polina-c): add configuration\n    - avoid-importing-entrypoint-exports:\n        only-in-src: true\n    - avoid-cascade-after-if-null\n    - avoid-collection-methods-with-unrelated-types\n    - avoid-duplicate-exports\n    - avoid-dynamic\n#    - avoid-global-state   TODO(jacobr): bunch of false positives around boolean flags.\n#    - avoid-ignoring-return-values\n#    - avoid-late-keyword\n    - avoid-missing-enum-constant-in-map\n#    - avoid-nested-conditional-expressions Worth enabling but currently too many violators.\n#    - avoid-non-ascii-symbols  TODO(jacobr): probably worth enabling.\n#    - avoid-non-null-assertion\n#    - avoid-passing-async-when-sync-expected TODO(jacobr): consider re-enabliing.\n    - avoid-redundant-async\n    - avoid-throw-in-catch-block:\n        exclude:\n          - '*test.dart'\n\n#    - avoid-top-level-members-in-tests Doesn't seem to match our style.\n    - avoid-unnecessary-type-assertions\n    - avoid-unnecessary-type-casts\n    - avoid-unrelated-type-assertions\n    - avoid-unused-parameters\n    - avoid-explicit-type-declaration\n    # - ban-name # TODO(polina-c): add configuration\n    # - binary-expression-operand-order Some nice catches but too many false positives to enable.\n    - double-literal-format\n    # - format-comment TODO(jacobr): enable this one after fixing violations.\n    # TODO(jacobr): enable member-ordering. This catches a bunch of real style\n    # issues but would be alot of work to migrate.\n    # - member-ordering\n    # - newline-before-return TODO(jacobr): should be in the formatter if it was a rule to adopt.\n    - no-boolean-literal-compare\n    # - no-empty-block Too many false positives. However it does flag a bunch of code smells so possibly worth re-enabling.\n    # This one seems interesting but has too many false positives. Gave it a try.\n    # - no-equal-arguments:\n    #    ignored-parameters:\n    #      - height\n    #      - width\n    #      - double-literal-format\n    #      - defaultSortColumn\n    #      - left\n    #      - right\n    #      - top\n    #      - bottom\n    #      - bottomLeft\n    #      - topLeft\n    #      - enabledBorder\n    - no-equal-then-else\n #   - no-magic-number\n #   - no-object-declaration Too difficult to use along with avoiding dynamic particular for JSON decoding logic.\n #   - prefer-async-await TODO(jacobr): evaluate enabling.\n    - prefer-commenting-analyzer-ignores\n  #  - prefer-conditional-expressions Too many false positives involving large conditional expressions.\n  #  - prefer-correct-identifier-length Too many false positives with fine names like i and id.\n  #  - prefer-correct-test-file-name TODO(jacobr): enable and fix violations.\n    - prefer-correct-type-name\n  #  - prefer-enums-by-name Cannot able unless lint adds a special case for orElse\n  #  - prefer-first TODO(jacobr): enable as a follow up PR.\n  #  - prefer-immediate-return TODO(jacobr): enable as a follow up PR.\n    - prefer-iterable-of\n    - prefer-last\n    # - prefer-match-file-name\n    # TODO(jacobr): consider enabling or enabling to periodically audit.\n    # This one has a lot of false positives but is also quite nice.\n    # - prefer-moving-to-variable:\n    #    allowed-duplicated-chains: 2\n    # - prefer-static-class\n    # Obsolete with the new Dart formatter.\n    # - prefer-trailing-comma\n    - always-remove-listener\n    # - avoid-border-all Micro-optimization to avoid a const constructor.\n    # - avoid-returning-widgets  This one is nice but has a lot of false positives.\n    - avoid-shrink-wrap-in-lists\n    # - avoid-unnecessary-setstate It is unclear why to \"Avoid calling sync methods that call 'setState'.\"\n    - avoid-expanded-as-spacer\n    - avoid-wrapping-in-padding\n    - check-for-equals-in-render-object-setters\n    - consistent-update-render-object\n    # - prefer-const-border-radius TODO(jacobr): enable.\n    - prefer-correct-edge-insets-constructor\n    # - prefer-extracting-callbacks I'm not clear this is always a good idea. Seems like a workaround.\n    # - prefer-single-widget-per-file\n    - prefer-using-list-view\n    - prefer-explicit-type-arguments\n    - prefer-explicit-function-type\n"
        },
        {
          "name": "case_study",
          "type": "tree",
          "content": null
        },
        {
          "name": "devtools_options.yaml",
          "type": "blob",
          "size": 0.197265625,
          "content": "description: This file stores settings for Dart & Flutter DevTools.\ndocumentation: https://docs.flutter.dev/tools/devtools/extensions#configure-extension-enablement-states\nextensions:\n  - provider: true"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter-candidate.txt",
          "type": "blob",
          "size": 0.0400390625,
          "content": "434ca754e3b972725938d72b83bfa84f083fb0a7\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.2705078125,
          "content": "name: _devtools\nenvironment:\n  sdk: ^3.6.0\nworkspace:\n  - packages/devtools_app\n  - packages/devtools_app_shared\n  - packages/devtools_extensions\n  - packages/devtools_shared\n  - packages/devtools_test\n  - tool\n\ndev_dependencies:\n  build_runner: ^2.3.3\n  flutter_lints: ^5.0.0\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}