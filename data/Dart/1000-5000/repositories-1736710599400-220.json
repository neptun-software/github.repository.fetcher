{
  "metadata": {
    "timestamp": 1736710599400,
    "page": 220,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nslogx/flutter_easyloading",
      "stars": 1278,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.5947265625,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n\n\n# add some ignore\n.vscode\npubspec.lock\n\n.vscode/launch.json\nexample/pubspec.lock"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 27321ebbad34b0a3fafe99fac037102196d655ff\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.30078125,
          "content": "## [3.0.5] - 2022.05.23\n\n* 🎉 It's support flutter 3.0 and previous version now \n* fixed [#169](https://github.com/nslogx/flutter_easyloading/issues/169)\n\n## [3.0.3] - 2021.08.31\n\n* fixed [#126](https://github.com/nslogx/flutter_easyloading/issues/126)\n## [3.0.2] - 2021.08.31\n\n* fixed [#125](https://github.com/nslogx/flutter_easyloading/issues/125)\n\n## [3.0.1] - 2021.08.28\n\n* fixed [#120](https://github.com/nslogx/flutter_easyloading/issues/120)\n\n## [3.0.0] - 2021.03.12\n\n* 🎉 It's support Null Safety now \n\n## [2.2.2] - 2020.12.28\n\n* fixed [#77](https://github.com/nslogx/flutter_easyloading/issues/77)\n\n## [2.2.1] - 2020.11.30\n\n* fixed bugs\n## [2.2.0] - 2020.11.19\n\n* add init method\n\n## [2.1.3] - 2020.11.13\n\n* fixed [#64](https://github.com/nslogx/flutter_easyloading/issues/64)\n\n## [2.1.2] - 2020.11.12\n\n* fixed [#63](https://github.com/nslogx/flutter_easyloading/issues/63)\n\n## [2.1.1] - 2020.11.11\n\n* fixed bugs\n\n## [2.1.0] - 2020.11.11\n\n* add loading status callback\n* add dismissOnTap option [#59](https://github.com/nslogx/flutter_easyloading/issues/59)\n* fixed [#61](https://github.com/nslogx/flutter_easyloading/issues/61)\n* fixed bugs\n\n## [2.0.1] - 2020.11.06\n\n* fixed [#58](https://github.com/nslogx/flutter_easyloading/issues/58)\n\n## [2.0.0] - 2020.09.28\n\n* add custom animation style\n* add toast postion option [#14](https://github.com/nslogx/flutter_easyloading/issues/14) [#49](https://github.com/nslogx/flutter_easyloading/issues/49)\n* fixed bugs\n\n## [1.3.0] - 2020.09.24\n\n* fixed bugs\n\n## [1.2.1] - 2020.09.22\n\n* add indicatorWidget option [#45](https://github.com/nslogx/flutter_easyloading/issues/45)\n\n## [1.2.0] - 2020.09.16\n\n* add textStyle option [#34](https://github.com/nslogx/flutter_easyloading/issues/34)\n* fixed bugs\n\n## [1.1.4] - 2020.03.23\n\n* add lineWidth option [#9](https://github.com/nslogx/flutter_easyloading/issues/9)\n\n## [1.1.3] - 2020.03.19\n\n* fixed [#8](https://github.com/nslogx/flutter_easyloading/issues/8)\n\n## [1.1.2] - 2020.03.16\n\n* fixed [#7](https://github.com/nslogx/flutter_easyloading/issues/7)\n* optimize code style\n\n## [1.1.1] - 2020.02.28\n\n* add showToast\n\n## [1.0.1] - 2019.12.26\n\n* fixed bugs\n\n## [1.0.0] - 2019.12.26\n\n* support custom style\n* relased v1.0.0\n* fixed bugs\n\n## [0.0.3] - 2019.12.25\n\n* fixed bugs\n\n## [0.0.2] - 2019.12.24\n\n* add indicatorType\n\n## [0.0.1] - 2019.12.23\n\n* init\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.037109375,
          "content": "MIT License\n\nCopyright (c) 2020 nslogx\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 6.279296875,
          "content": "# Flutter EasyLoading\n\n[![pub package](https://img.shields.io/pub/v/flutter_easyloading?style=flat)](https://pub.dev/packages/flutter_easyloading) [![pub points](https://badges.bar/flutter_easyloading/pub%20points)](https://pub.dev/packages/flutter_easyloading/score) [![popularity](https://badges.bar/flutter_easyloading/popularity)](https://pub.dev/packages/flutter_easyloading/score) [![likes](https://badges.bar/flutter_easyloading/likes)](https://pub.dev/packages/flutter_easyloading/score) [![license](https://img.shields.io/github/license/nslogx/flutter_easyloading?style=flat)](https://github.com/nslogx/flutter_easyloading) [![stars](https://img.shields.io/github/stars/nslogx/flutter_easyloading?style=social)](https://github.com/nslogx/flutter_easyloading)\n\n[English](./README.md) | 简体中文\n\n<img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif01.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif02.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif03.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif04.gif\" width=200 height=429/>\n\n## 在线预览\n\n👉 [https://nslogx.github.io/flutter_easyloading](https://nslogx.github.io/flutter_easyloading/#/)\n\n## 安装\n\n将以下代码添加到您项目中的 `pubspec.yaml` 文件:\n\n```yaml\ndependencies:\n  flutter_easyloading: ^latest\n```\n\n## 导入\n\n```dart\nimport 'package:flutter_easyloading/flutter_easyloading.dart';\n```\n\n## 如何使用\n\n首先, 在`MaterialApp`/`CupertinoApp`中初始化`FlutterEasyLoading`:\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter EasyLoading',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(title: 'Flutter EasyLoading'),\n      builder: EasyLoading.init(),\n    );\n  }\n}\n```\n\n然后, 请尽情使用吧:\n\n```dart\nEasyLoading.show(status: 'loading...');\n\nEasyLoading.showProgress(0.3, status: 'downloading...');\n\nEasyLoading.showSuccess('Great Success!');\n\nEasyLoading.showError('Failed with Error');\n\nEasyLoading.showInfo('Useful Information.');\n\nEasyLoading.showToast('Toast');\n\nEasyLoading.dismiss();\n```\n\n添加 Loading 状态回调\n\n```dart\nEasyLoading.addStatusCallback((status) {\n  print('EasyLoading Status $status');\n});\n```\n\n移除 Loading 状态回调\n\n```dart\nEasyLoading.removeCallback(statusCallback);\n\nEasyLoading.removeAllCallbacks();\n```\n\n## 自定义\n\n❗️**注意:**\n\n- **`textColor`、`indicatorColor`、`progressColor`、`backgroundColor` 仅对 `EasyLoadingStyle.custom`有效。**\n\n- **`maskColor` 仅对 `EasyLoadingMaskType.custom`有效。**\n\n```dart\n/// loading的样式, 默认[EasyLoadingStyle.dark].\nEasyLoadingStyle loadingStyle;\n\n/// loading的指示器类型, 默认[EasyLoadingIndicatorType.fadingCircle].\nEasyLoadingIndicatorType indicatorType;\n\n/// loading的遮罩类型, 默认[EasyLoadingMaskType.none].\nEasyLoadingMaskType maskType;\n\n/// toast的位置, 默认 [EasyLoadingToastPosition.center].\nEasyLoadingToastPosition toastPosition;\n\n/// 动画类型, 默认 [EasyLoadingAnimationStyle.opacity].\nEasyLoadingAnimationStyle animationStyle;\n\n/// 自定义动画, 默认 null.\nEasyLoadingAnimation customAnimation;\n\n/// 文本的对齐方式 , 默认[TextAlign.center].\nTextAlign textAlign;\n\n/// 文本的样式 , 默认 null.\nTextStyle textStyle;\n\n/// loading内容区域的内边距.\nEdgeInsets contentPadding;\n\n/// 文本的内边距.\nEdgeInsets textPadding;\n\n/// 指示器的大小, 默认40.0.\ndouble indicatorSize;\n\n/// loading的圆角大小, 默认5.0.\ndouble radius;\n\n/// 文本大小, 默认15.0.\ndouble fontSize;\n\n/// 进度条指示器的宽度, 默认2.0.\ndouble progressWidth;\n\n/// 指示器的宽度, 默认4.0, 仅对[EasyLoadingIndicatorType.ring, EasyLoadingIndicatorType.dualRing]有效.\ndouble lineWidth;\n\n/// [showSuccess] [showError] [showInfo]的展示时间, 默认2000ms.\nDuration displayDuration;\n\n/// 动画时间, 默认200ms.\nDuration animationDuration;\n\n/// 文本的颜色, 仅对[EasyLoadingStyle.custom]有效.\nColor textColor;\n\n/// 指示器的颜色, 仅对[EasyLoadingStyle.custom]有效.\nColor indicatorColor;\n\n/// 进度条指示器的颜色, 仅对[EasyLoadingStyle.custom]有效.\nColor progressColor;\n\n/// loading的背景色, 仅对[EasyLoadingStyle.custom]有效.\nColor backgroundColor;\n\n/// 遮罩的背景色, 仅对[EasyLoadingMaskType.custom]有效.\nColor maskColor;\n\n/// 当loading展示的时候，是否允许用户操作.\nbool userInteractions;\n\n/// 点击背景是否关闭.\nbool dismissOnTap;\n\n/// 指示器自定义组件\nWidget indicatorWidget;\n\n/// 展示成功状态的自定义组件\nWidget successWidget;\n\n/// 展示失败状态的自定义组件\nWidget errorWidget;\n\n/// 展示信息状态的自定义组件\nWidget infoWidget;\n```\n\n因为 `EasyLoading` 是一个全局单例, 所以你可以在任意一个地方自定义它的样式:\n\n```dart\nEasyLoading.instance\n  ..displayDuration = const Duration(milliseconds: 2000)\n  ..indicatorType = EasyLoadingIndicatorType.fadingCircle\n  ..loadingStyle = EasyLoadingStyle.dark\n  ..indicatorSize = 45.0\n  ..radius = 10.0\n  ..progressColor = Colors.yellow\n  ..backgroundColor = Colors.green\n  ..indicatorColor = Colors.yellow\n  ..textColor = Colors.yellow\n  ..maskColor = Colors.blue.withOpacity(0.5)\n  ..userInteractions = true\n  ..dismissOnTap = false\n  ..customAnimation = CustomAnimation();\n```\n\n更多的指示器类型可查看 👉 [flutter_spinkit showcase](https://github.com/jogboms/flutter_spinkit#-showcase)\n\n## 自定义动画\n\n例子: 👉 [Custom Animation](https://github.com/nslogx/flutter_easyloading/blob/develop/example/lib/custom_animation.dart)\n\n## 待完成\n\n- [x] 新增进度条指示器\n\n- [x] 新增自定义动画\n\n## 更新日志\n\n[CHANGELOG](./CHANGELOG.md)\n\n## 开源许可协议\n\n[MIT License](./LICENSE)\n\n## ❤️❤️❤️\n\n感谢 [flutter_spinkit](https://github.com/jogboms/flutter_spinkit) ❤️\n\n感谢 [JetBrains Open Source](https://www.jetbrains.com/community/opensource/#support) 提供支持\n\n[<img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/jetbrains.png\" width=200 height=112/>](https://www.jetbrains.com/?from=FlutterEasyLoading)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.341796875,
          "content": "# Flutter EasyLoading\n\n[![pub package](https://img.shields.io/pub/v/flutter_easyloading?style=flat)](https://pub.dev/packages/flutter_easyloading) [![pub points](https://badges.bar/flutter_easyloading/pub%20points)](https://pub.dev/packages/flutter_easyloading/score) [![popularity](https://badges.bar/flutter_easyloading/popularity)](https://pub.dev/packages/flutter_easyloading/score) [![likes](https://badges.bar/flutter_easyloading/likes)](https://pub.dev/packages/flutter_easyloading/score) [![license](https://img.shields.io/github/license/nslogx/flutter_easyloading?style=flat)](https://github.com/nslogx/flutter_easyloading) [![stars](https://img.shields.io/github/stars/nslogx/flutter_easyloading?style=social)](https://github.com/nslogx/flutter_easyloading)\n\nEnglish | [简体中文](./README-zh_CN.md)\n\n<img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif01.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif02.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif03.gif\" width=200 height=429/> <img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/gif04.gif\" width=200 height=429/>\n\n## Live Preview\n\n👉 [https://nslogx.github.io/flutter_easyloading](https://nslogx.github.io/flutter_easyloading/#/)\n\n## Installing\n\nAdd this to your package's `pubspec.yaml` file:\n\n```yaml\ndependencies:\n  flutter_easyloading: ^latest\n```\n\n## Import\n\n```dart\nimport 'package:flutter_easyloading/flutter_easyloading.dart';\n```\n\n## How to use\n\nFirst, initialize `EasyLoading` in your `MaterialApp`/`CupertinoApp`:\n\n```dart\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter EasyLoading',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(title: 'Flutter EasyLoading'),\n      builder: EasyLoading.init(),\n    );\n  }\n}\n```\n\nThen, enjoy yourself:\n\n```dart\nEasyLoading.show(status: 'loading...');\n\nEasyLoading.showProgress(0.3, status: 'downloading...');\n\nEasyLoading.showSuccess('Great Success!');\n\nEasyLoading.showError('Failed with Error');\n\nEasyLoading.showInfo('Useful Information.');\n\nEasyLoading.showToast('Toast');\n\nEasyLoading.dismiss();\n```\n\nAdd loading status callback\n\n```dart\nEasyLoading.addStatusCallback((status) {\n  print('EasyLoading Status $status');\n});\n```\n\nRemove loading status callback(s)\n\n```dart\nEasyLoading.removeCallback(statusCallback);\n\nEasyLoading.removeAllCallbacks();\n```\n\n## Customize\n\n❗️**Note:**\n\n- **`textColor`、`indicatorColor`、`progressColor`、`backgroundColor` only used for `EasyLoadingStyle.custom`.**\n\n- **`maskColor` only used for `EasyLoadingMaskType.custom`.**\n\n```dart\n/// loading style, default [EasyLoadingStyle.dark].\nEasyLoadingStyle loadingStyle;\n\n/// loading indicator type, default [EasyLoadingIndicatorType.fadingCircle].\nEasyLoadingIndicatorType indicatorType;\n\n/// loading mask type, default [EasyLoadingMaskType.none].\nEasyLoadingMaskType maskType;\n\n/// toast position, default [EasyLoadingToastPosition.center].\nEasyLoadingToastPosition toastPosition;\n\n/// loading animationStyle, default [EasyLoadingAnimationStyle.opacity].\nEasyLoadingAnimationStyle animationStyle;\n\n/// loading custom animation, default null.\nEasyLoadingAnimation customAnimation;\n\n/// textAlign of status, default [TextAlign.center].\nTextAlign textAlign;\n\n/// textStyle of status, default null.\nTextStyle textStyle;\n\n/// content padding of loading.\nEdgeInsets contentPadding;\n\n/// padding of [status].\nEdgeInsets textPadding;\n\n/// size of indicator, default 40.0.\ndouble indicatorSize;\n\n/// radius of loading, default 5.0.\ndouble radius;\n\n/// fontSize of loading, default 15.0.\ndouble fontSize;\n\n/// width of progress indicator, default 2.0.\ndouble progressWidth;\n\n/// width of indicator, default 4.0, only used for [EasyLoadingIndicatorType.ring, EasyLoadingIndicatorType.dualRing].\ndouble lineWidth;\n\n/// display duration of [showSuccess] [showError] [showInfo], default 2000ms.\nDuration displayDuration;\n\n/// animation duration of indicator, default 200ms.\nDuration animationDuration;\n\n/// color of loading status, only used for [EasyLoadingStyle.custom].\nColor textColor;\n\n/// color of loading indicator, only used for [EasyLoadingStyle.custom].\nColor indicatorColor;\n\n/// progress color of loading, only used for [EasyLoadingStyle.custom].\nColor progressColor;\n\n/// background color of loading, only used for [EasyLoadingStyle.custom].\nColor backgroundColor;\n\n/// mask color of loading, only used for [EasyLoadingMaskType.custom].\nColor maskColor;\n\n/// should allow user interactions while loading is displayed.\nbool userInteractions;\n\n/// should dismiss on user tap.\nbool dismissOnTap;\n\n/// indicator widget of loading\nWidget indicatorWidget;\n\n/// success widget of loading\nWidget successWidget;\n\n/// error widget of loading\nWidget errorWidget;\n\n/// info widget of loading\nWidget infoWidget;\n```\n\nBecause of `EasyLoading` is a singleton, so you can custom loading style any where like this:\n\n```dart\nEasyLoading.instance\n  ..displayDuration = const Duration(milliseconds: 2000)\n  ..indicatorType = EasyLoadingIndicatorType.fadingCircle\n  ..loadingStyle = EasyLoadingStyle.dark\n  ..indicatorSize = 45.0\n  ..radius = 10.0\n  ..progressColor = Colors.yellow\n  ..backgroundColor = Colors.green\n  ..indicatorColor = Colors.yellow\n  ..textColor = Colors.yellow\n  ..maskColor = Colors.blue.withOpacity(0.5)\n  ..userInteractions = true\n  ..dismissOnTap = false\n  ..customAnimation = CustomAnimation();\n```\n\nMore indicatorType can see in 👉 [flutter_spinkit showcase](https://github.com/jogboms/flutter_spinkit#-showcase)\n\n## Custom Animation\n\nexample: 👉 [Custom Animation](https://github.com/nslogx/flutter_easyloading/blob/develop/example/lib/custom_animation.dart)\n\n## Todo\n\n- [x] add progress indicator\n\n- [x] add custom animation\n\n## Changelog\n\n[CHANGELOG](./CHANGELOG.md)\n\n## License\n\n[MIT License](./LICENSE)\n\n## ❤️❤️❤️\n\nThanks to [flutter_spinkit](https://github.com/jogboms/flutter_spinkit) ❤️\n\nSupported by [JetBrains Open Source](https://www.jetbrains.com/community/opensource/#support)\n\n[<img src=\"https://raw.githubusercontent.com/nslogx/flutter_easyloading/master/images/jetbrains.png\" width=200 height=112/>](https://www.jetbrains.com/?from=FlutterEasyLoading)\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.388671875,
          "content": "name: flutter_easyloading\ndescription: A clean and lightweight loading/toast widget for Flutter, Easy to use without context, Support iOS、Android and Web\nversion: 3.0.5\nhomepage: https://github.com/nslogx/flutter_easyloading\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\n  flutter_spinkit: ^5.1.0\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\nflutter:\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}