{
  "metadata": {
    "timestamp": 1736710531691,
    "page": 84,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zubairehman/flutter_boilerplate_project",
      "stars": 2322,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.333984375,
          "content": "# Miscellaneous\n*.class\n*.lock\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n.flutter-plugins-dependencies\nios/Flutter/flutter_export_environment.sh\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1083984375,
          "content": "[submodule \"injection/inject.dart\"]\n\tpath = injection/inject.dart\n\turl = https://github.com/google/inject.dart\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 1.62890625,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled.\n\nversion:\n  revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n  channel: stable\n\nproject_type: app\n\n# Tracks metadata for the flutter migrate command\nmigration:\n  platforms:\n    - platform: root\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: android\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: ios\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: linux\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: macos\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: web\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n    - platform: windows\n      create_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n      base_revision: f468f3366c26a5092eb964a230ce7892fda8f2f8\n\n  # User provided section\n\n  # List of Local paths (relative to this file) that should be\n  # ignored by the migrate tool.\n  #\n  # Files that are not part of the templates will be ignored by default.\n  unmanaged_files:\n    - 'lib/main.dart'\n    - 'ios/Runner.xcodeproj/project.pbxproj'\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.0693359375,
          "content": "## June 11, 2019\n\n* Added dependency injection\n* Refactored dio client\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Zubair Rehman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.533203125,
          "content": "# This branch is still under development\n\n\n# Boilerplate Project\n\nA boilerplate project created in flutter using MobX and Provider. Boilerplate supports both web and mobile, clone the appropriate branches mentioned below:\n\n* For Mobile: https://github.com/zubairehman/flutter-boilerplate-project/tree/master (stable channel)\n* For Web: https://github.com/zubairehman/flutter-boilerplate-project/tree/feature/web-support (beta channel)\n\n## Getting Started\n\nThe Boilerplate contains the minimal implementation required to create a new library or project. The repository code is preloaded with some basic components like basic app architecture, app theme, constants and required dependencies to create a new project. By using boiler plate code as standard initializer, we can have same patterns in all the projects that will inherit it. This will also help in reducing setup & development time by allowing you to use same code pattern and avoid re-writing from scratch.\n\n## How to Use \n\n**Step 1:**\n\nDownload or clone this repo by using the link below:\n\n```\nhttps://github.com/zubairehman/flutter-boilerplate-project.git\n```\n\n**Step 2:**\n\nGo to project root and execute the following command in console to get the required dependencies: \n\n```\nflutter pub get \n```\n\n**Step 3:**\n\nThis project uses `inject` library that works with code generation, execute the following command to generate files:\n\n```\nflutter packages pub run build_runner build --delete-conflicting-outputs\n```\n\nor watch command in order to keep the source code synced automatically:\n\n```\nflutter packages pub run build_runner watch\n```\n\n## Hide Generated Files\n\nIn-order to hide generated files, navigate to `Android Studio` -> `Preferences` -> `Editor` -> `File Types` and paste the below lines under `ignore files and folders` section:\n\n```\n*.inject.summary;*.inject.dart;*.g.dart;\n```\n\nIn Visual Studio Code, navigate to `Preferences` -> `Settings` and search for `Files:Exclude`. Add the following patterns:\n```\n**/*.inject.summary\n**/*.inject.dart\n**/*.g.dart\n```\n\n## Boilerplate Features:\n\n* Splash\n* Login\n* Home\n* Routing\n* Theme\n* Dio\n* Database\n* MobX (to connect the reactive data of your application with the UI)\n* Provider (State Management)\n* Encryption\n* Validation\n* Code Generation\n* User Notifications\n* Logging\n* Dependency Injection\n* Dark Theme Support (new)\n* Multilingual Support (new)\n* Provider example (new)\n\n### Up-Coming Features:\n\n* Connectivity Support\n* Background Fetch Support\n\n### Libraries & Tools Used\n\n* [Dio](https://github.com/flutterchina/dio)\n* [Database](https://github.com/tekartik/sembast.dart)\n* [MobX](https://github.com/mobxjs/mobx.dart) (to connect the reactive data of your application with the UI)\n* [Provider](https://github.com/rrousselGit/provider) (State Management)\n* [Encryption](https://github.com/xxtea/xxtea-dart)\n* [Validation](https://github.com/dart-league/validators)\n* [Logging](https://github.com/zubairehman/Flogs)\n* [Notifications](https://github.com/AndreHaueisen/flushbar)\n* [Json Serialization](https://github.com/dart-lang/json_serializable)\n* [Dependency Injection](https://github.com/fluttercommunity/get_it)\n\n### Folder Structure\nHere is the core folder structure which flutter provides.\n\n```\nflutter-app/\n|- android\n|- build\n|- ios\n|- lib\n|- test\n```\n\nHere is the folder structure we have been using in this project\n\n```\nlib/\n|- constants/\n|- data/\n|- stores/\n|- ui/\n|- utils/\n|- widgets/\n|- main.dart\n|- routes.dart\n```\n\nNow, lets dive into the lib folder which has the main code for the application.\n\n```\n1- constants - All the application level constants are defined in this directory with-in their respective files. This directory contains the constants for `theme`, `dimentions`, `api endpoints`, `preferences` and `strings`.\n2- data - Contains the data layer of your project, includes directories for local, network and shared pref/cache.\n3- stores - Contains store(s) for state-management of your application, to connect the reactive data of your application with the UI. \n4- ui — Contains all the ui of your project, contains sub directory for each screen.\n5- util — Contains the utilities/common functions of your application.\n6- widgets — Contains the common widgets for your applications. For example, Button, TextField etc.\n7- routes.dart — This file contains all the routes for your application.\n8- main.dart - This is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.\n```\n\n### Constants\n\nThis directory contains all the application level constants. A separate file is created for each type as shown in example below:\n\n```\nconstants/\n|- app_theme.dart\n|- dimens.dart\n|- endpoints.dart\n|- preferences.dart\n|- strings.dart\n```\n\n### Data\n\nAll the business logic of your application will go into this directory, it represents the data layer of your application. It is sub-divided into three directories `local`, `network` and `sharedperf`, each containing the domain specific logic. Since each layer exists independently, that makes it easier to unit test. The communication between UI and data layer is handled by using central repository.\n\n```\ndata/\n|- local/\n    |- constants/\n    |- datasources/\n    |- app_database.dart\n   \n|- network/\n    |- constants/\n    |- exceptions/\n    |- rest_client.dart\n    \n|- sharedpref\n    |- constants/\n    |- shared_preference_helper.dart\n    \n|- repository.dart\n\n```\n\n### Stores\n\nThe store is where all your application state lives in flutter. The Store is basically a widget that stands at the top of the widget tree and passes it's data down using special methods. In-case of multiple stores, a separate folder for each store is created as shown in the example below:\n\n```\nstores/\n|- login/\n    |- login_store.dart\n    |- form_validator.dart\n```\n\n### UI\n\nThis directory contains all the ui of your application. Each screen is located in a separate folder making it easy to combine group of files related to that particular screen. All the screen specific widgets will be placed in `widgets` directory as shown in the example below:\n\n```\nui/\n|- login\n   |- login_screen.dart\n   |- widgets\n      |- login_form.dart\n      |- login_button.dart\n```\n\n### Utils\n\nContains the common file(s) and utilities used in a project. The folder structure is as follows: \n\n```\nutils/\n|- encryption\n   |- xxtea.dart\n|- date\n  |- date_time.dart\n```\n\n### Widgets\n\nContains the common widgets that are shared across multiple screens. For example, Button, TextField etc.\n\n```\nwidgets/\n|- app_icon_widget.dart\n|- empty_app_bar.dart\n|- progress_indicator.dart\n```\n\n### Routes\n\nThis file contains all the routes for your application.\n\n```dart\nimport 'package:flutter/material.dart';\n\nimport 'ui/post/post_list.dart';\nimport 'ui/login/login.dart';\nimport 'ui/splash/splash.dart';\n\nclass Routes {\n  Routes._();\n\n  //static variables\n  static const String splash = '/splash';\n  static const String login = '/login';\n  static const String home = '/post';\n\n  static final routes = <String, WidgetBuilder>{\n    splash: (BuildContext context) => SplashScreen(),\n    login: (BuildContext context) => LoginScreen(),\n    home: (BuildContext context) => HomeScreen(),\n  };\n}\n```\n\n### Main\n\nThis is the starting point of the application. All the application level configurations are defined in this file i.e, theme, routes, title, orientation etc.\n\n```dart\nimport 'package:boilerplate/routes.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nimport 'constants/app_theme.dart';\nimport 'constants/strings.dart';\nimport 'ui/splash/splash.dart';\n\nvoid main() {\n  SystemChrome.setPreferredOrientations([\n    DeviceOrientation.portraitUp,\n    DeviceOrientation.portraitDown,\n    DeviceOrientation.landscapeRight,\n    DeviceOrientation.landscapeLeft,\n  ]).then((_) {\n    runApp(MyApp());\n  });\n}\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: Strings.appName,\n      theme: themeData,\n      routes: Routes.routes,\n      home: SplashScreen(),\n    );\n  }\n}\n```\n\n## Wiki\n\nCheckout [wiki](https://github.com/zubairehman/flutter-boilerplate-project/wiki) for more info\n\n## Conclusion\n\nI will be happy to answer any questions that you may have on this approach, and if you want to lend a hand with the boilerplate then please feel free to submit an issue and/or pull request 🙂\n\nAgain to note, this is example can appear as over-architectured for what it is - but it is an example only. If you liked my work, don’t forget to ⭐ star the repo to show your support.\n\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.4189453125,
          "content": "# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at\n  # https://dart-lang.github.io/linter/lints/index.html.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "art",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "linux",
          "type": "tree",
          "content": null
        },
        {
          "name": "macos",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 1.9091796875,
          "content": "name: boilerplate\ndescription: A flutter boilerplate project created using MobX and Provider.\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# Read more about versioning at semver.org.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.0.6 <4.0.0'\n\ndependencies:\n  flutter:\n    sdk: flutter\n\n  flutter_localizations:\n    sdk: flutter\n\n  # A\n  another_flushbar: ^1.12.29\n  # B\n  # C\n  cupertino_icons: ^1.0.5\n  # D\n  dio: ^5.1.1\n  # E\n  event_bus: ^2.0.0\n  # F\n  flutter_mobx: ^2.0.6+5\n  # G\n  get_it: ^7.2.0\n  google_fonts: ^4.0.3\n  # H\n  http: ^0.13.5\n  # I\n  intl: ^0.19.0\n  # J\n  json_serializable: ^6.6.1\n  # K\n  # L\n  # M\n  mobx: ^2.1.4\n  # N\n  # O\n  # P\n  path_provider: ^2.0.14\n  # Q\n  # R\n  # S\n  shared_preferences: ^2.1.0\n  sembast_web: ^2.1.3\n  sembast: ^3.4.4\n  # T\n  # U\n  # V\n  validators: ^3.0.0\n  # W\n  # X\n  xxtea: ^2.1.0\n  # Y\n  # Z\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The following adds the launcher icon support to your application.\n  # run below mentioned commands to generate launcher icons\n  # flutter packages get\n  # flutter packages pub run flutter_launcher_icons:main\n  flutter_launcher_icons: ^0.13.1\n  mobx_codegen: ^2.2.0\n  build_runner: ^2.3.3\n  analyzer: ^5.10.0\n\nflutter_icons:\n  image_path: \"assets/icons/ic_launcher.png\"\n  android: true\n  ios: true\n\nflutter:\n  uses-material-design: true\n  assets:\n    - assets/images/\n    - assets/icons/\n    - assets/lang/\n\n  fonts:\n    - family: ProductSans\n      fonts:\n        - asset: assets/fonts/Product-Sans-Regular.ttf\n        - asset: assets/fonts/Product-Sans-Italic.ttf\n          style: italic\n        - asset: assets/fonts/Product-Sans-Bold.ttf\n          weight: 700\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}