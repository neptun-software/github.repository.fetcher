{
  "metadata": {
    "timestamp": 1736710628006,
    "page": 285,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rydmike/flex_color_scheme",
      "stars": 1035,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".fvmrc",
          "type": "blob",
          "size": 0.041015625,
          "content": "{\n  \"flutter\": \"stable\",\n  \"flavors\": {}\n}"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.9345703125,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\nmigrate_working_dir/\n.fvm/\n**.fvm/\n.fvm\nexample/.fvm\nexample/.fvm/\n/coverage/lcov.info\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n**/ios/Flutter/.last_build_id\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\n/build/\nbuild/\n\n# Symbolication related\napp.*.symbols\n\n# Don't want to commit the custom lint log file\ncustom_lint.log\n\n# Obfuscation related\napp.*.map.json\n\n# Android Studio will place build artifacts here\n/android/app/debug\n/android/app/profile\n/android/app/release\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# Web related\nlib/generated_plugin_registrant.dart\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Flutter.podspec\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.298828125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: a0860f6e87ba4f9031bee4d6f56c08b970606bee\n  channel: dev\n\nproject_type: package\n"
        },
        {
          "name": ".run",
          "type": "tree",
          "content": null
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 191.55859375,
          "content": "# Changelog\n\nAll changes to the **FlexColorScheme** (FCS) package are documented here.\n\n## 8.1.0\n\n**Dec 29, 2024**\n\n### Package\n\n* Updated the package to support and require at least Flutter v3.27.0.\n* Fixed all new analyzer lint warnings and removed usage of all deprecated `Color` properties.\n\n**NEW**\n\n* **Slider**: Added theming properties for the Slider thumb color.\n  * `FlexSubThemesData` got the property `sliderThumbSchemeColor`.\n  * `FlexSubThemes.sliderTheme` got the property `thumbSchemeColor`.\n* **BottomSheet**: Added theming properties for the BottomSheet clip behavior property.\n  * `FlexSubThemesData` got the property `bottomSheetClipBehavior`.\n  * `FlexSubThemes.bottomSheetTheme` got the property `clipBehavior`.\n  * The default value is now `null` causing the sheet to use `Clip.none` as the default via the component's built-in default value. Keeping it null, or setting it to `Clip.none` helps avoid this Flutter SDK issue: https://github.com/rydmike/flex_color_scheme/issues/270 where using a `BackdropFilter` does not work correctly is any other clip behavior value than `Clip.none` is used.\n  * **CHANGE/FIX**\n    * Previously **FlexColorScheme** made `BottomSheetThemeData` where the clip behavior was set to `Clip.antialias` by default, causing the issue with `BackdropFilter` usage to emerge by default. Now you have to select another clip behavior explicitly to get the same result as before, and ne warned that Flutter SDK has issues when doing so.\n* **TabBar**: Added theming properties for the TabBar indicator animation behavior, that are based on the new enum property `TabIndicatorAnimation` in Flutter 3.27.0.\n  * `FlexSubThemesData` got the property `tabBarIndicatorAnimation`.\n  * `FlexSubThemes.tabBarTheme` got the property `indicatorAnimation`.\n\n* Exposes the convenience `Color` sRGB extensions from package `flex_seed_scheme`, that can be used as none deprecated replacements for `alpha`, `red`, `green`, `blue` and `value` they are called `alpha8bit`, `red8bit`, `green8bit`, `blue8bit` and `value32bit`. FlexColorPicker uses them internally to avoid using the deprecated Color properties.\n  \n**CHANGE**\n  * **Slider**: Minor color fidelity change to the Slider's thumb overlay color, it now uses Material-3 default for none tinted overlay. The M3 spec default is tinted as well, so the difference to when using FlexColorScheme's tinted interactions via `FlexSubThemesData(interactionEffects: true)` is now negligible for the Slider's default thumb overlay color.\n  * Migrated `FlexSubThemes.cardTheme` and `FlexSubThemes.dialogTheme` to use normalized component themes and return `CardThemeData` and `DialogThemeData` instead of `CardTheme`and `DialogTheme`. This is in-line with changes in Flutter 3.27.0. \n\n**FIX**\n\n* BUG: Locked `errorContainer` used `tertiaryContainer`, corrected to use `errorContainer`.\n\n### Themes Playground\n\n**NEW**\n\n* **Slider**: On the Slider panel added a scheme color selector for the Slider thumb color.\n* **BottomSheet**: On the BottomSheet panel added a clipping behavior selector.\n* **TabBar**: On the TabBar panel added a tab indicator animation selector.\n \n**CHANGE**\n\n* **Slider**: Increased Playground allowed max Slider track height from 14 to 40.\n\n\n## 8.0.2\n\n**Dec 1, 2024**\n\n### Package\n\n**FIX**\n\n* Changelog for version 8.0.0 says and intended this: \n  > \"The `FlexSubThemesData` property `inputDecoratorIsFilled` now default to `false` when undefined, like Flutter SDK does. \n  > Set it to `true` to get the same style it had with previous undefined value.\"\n\n  Due to a bug, this was not the case. This release fixes the bug and the property now defaults to `false` when undefined, as intended and documented in version 8.0.0 changelog. FIX: https://github.com/rydmike/flex_color_scheme/issues/265 \n\n## 8.0.1\n\n**Nov 13, 2024**\n\n### Package\n\n**FIX** \n\n- Fixed the version constraint. The V8 package is **only** compatible with Flutter 3.24.0 and later. It was intended to be compatible with Flutter 3.22.0 and later, but a theming API that is only available in Flutter version 3.24.0 and later made it into the release. If you need a release of version 8 that is also compatible with Flutter 3.22.x, you can use [version 8.0.1-dev.3.22](https://pub.dev/packages/flex_color_scheme/versions/8.0.1-dev.3.22) of the package. That package release is identical to this release, but excludes the API not available in Flutter 3.22.0.  \n\n\n### Themes Playground\n\n**NEW**\n \n- Added a quick share button on the side menu. It exports the Playground settings to JSON, makes a URL of it and copies the result to the clip board in one go. Ready to be shared where needed.\n \n**CHANGE**\n\n- Made changes to the Playground to make it possible to compile it to a Web WASM-GC build. The Playground WASM build is still experimental and not yet published anywhere.\n\n\n## 8.0.0\n\n**Nov 3, 2024**\n\n### SUMMARY\n\nVersion 8.0.0 makes **FlexColorScheme** fully aligned with Flutter's **MAJOR BREAKING** Material-3 theming changes introduced in **Flutter version 3.22**. Due to Flutter 3.22 breaking many past Material styles, introducing new colors to `ColorScheme` and deprecating three colors, FlexColorScheme had to undergo major revision and also break many of its past styles and some older APIs.\n\nMost APIs are still there and work as before, but a few produce results that differ slightly from past ones, just like **Flutter 3.22** also does over previous versions. Generally, the upgrade should be smooth, but you may need to review the produced theme result to see that you don't get any changes that don't fit with your design goals. Some past defaults have changed in FCS V8, but previous settings are still available. However, you will need to enable them explicitly to get the same results as before. The purpose of these default value changes is to make FCS have less opinionated defaults, and be more aligned with Flutter's Material-3 design defaults. The **Themes Playground** app will still have some of its own opinionated defaults, done via default settings values the app uses in its default configuration, but the package Material-3 default starting points are now much more aligned with Flutter's Material-3 defaults.\n\nIn the **Themes Playground** you can now export and import settings to a JSON file, and import them back into the Playground later. This is a great way to save your theme settings for later re-use. The exported JSON contains all the internal controller settings values you have configured in the Playground app, that are needed to restore a given configuration state. This **Playground** feature was a nice contribution by GitHub user [@akiller](https://github.com/akiller) in [!PR 257](https://github.com/rydmike/flex_color_scheme/pull/257), thank you! This contributed feature got enhanced with more error handling and a slightly refined UI to make it production ready. As a further enhancement of the JSON export feature, the **Themes Playground** app also got the ability to convert the exported settings JSON config to a shareable URL. You can now share Playground settings with other Flutter developers. \n\n\n\n### MIGRATION\n\nThe most critical changes to migrate from **FlexColorScheme V7 to V8** are listed below. For a full list of all breaking changes, see **PACKAGE CHANGES** and the **BREAKING** part further below.\n\n* The flag `useMaterial3` now defaults to `true` in `FlexColorScheme` and `FlexThemeData` constructors. Set it to `false` to explicitly use Material-2 theming. It defaulted to true before. Material-2 is still fully supported in FCS v8 and Flutter v3.24, but will eventually be deprecated in Flutter, when that happens, it will also happen in FCS. \n  >With the **Themes Playground** app, you can use a pre-configured Material-3 based theme that looks very similar to legacy Material-2 design. This will continue to be available also after Material-2 is deprecated in Flutter.  \n\n* The `FlexSubThemesData` properties `interactionEffects`, `tintedDisabledControls`, `defaultUseM2StyleDividerInM3` and `blendOnColors` now all default to `false`. In previous versions they defaulted to `true`. If you before had not explicitly turned these properties `false`, they were all `true` by default. To get the same result as before in FCS V8, you now have to set these properties to `true`. This change was made to have fewer opinionated defaults in FCS to align it more with Flutter SDK default styles. \n\n* The `FlexSubThemesData` property `navigationRailLabelType` no default to `NavigationRailLabelType.none`. To get the same result as before by default, you will need to set it to `NavigationRailLabelType.all`. This change was made to have fewer opinionated defaults in FCS to align it more with Flutter SDK default styles. The Playground defaults it to `NavigationRailLabelType.all` by adding this by default to new default themes.\n\n* Since `ColorScheme.background` color was deprecated in Flutter 3.22.0 we can no longer use it as a part of surface blends and its modes. For example, when `surfaceMode` is set to `FlexSurfaceMode.highBackgroundLowScaffold` it now uses surface and dialog blends set to 2x instead of 1x, so that it represents the \"high background\" style as before, but done via surface color. Without this breaking change, this mode would produce the same result as `FlexSurfaceMode.levelSurfacesLowScaffold` and be redundant. \n  * **NOTE:** You may want to check your surface mode and blends to see that they still look as you want them to, as they may have changed slightly depending on your configuration. We have tried to keep required changes subtle, you may not notice any difference, but it is good to check. These changes we forced by Flutter 3.22.0 deprecation of `ColorScheme` colors `background`, `onBackground` and `surfaceVariant`.\n\n\nThis major release has many breaking changes forced via breaking changes in Flutter 3.22.0. Due to this, the release also uses this opportunity to clean up APIs with opinionated defaults, like the ones mentioned above. There are additional smaller and more subtle changes in defaults values, that align FCS to use the same color defaults from the new `ColorScheme` colors, that Flutter started using in version 3.22.0 as well. You can find all the details below in the **PACKAGE CHANGES** chapter.  \n\n### BACKGROUND\n\nFlutter 3.22 introduced a large number of breaking changes to the `ColorScheme` and default color mappings that Flutter's Material components use. In total, the Flutter 3.22.0 release adjusted 249 of its own internal tests to accommodate for new Material-3 spec changes, that all broke past Flutter Material-3 component styles. For a reference to the broken and updated tests, see [this issue side comment](https://github.com/flutter/flutter/issues/130135#issuecomment-2308522312).\n\nFlexColorScheme V8 now allows you to use the new colors introduced in Flutter 3.22. As before, with FCS you can get fully defined hand-tuned `ColorScheme`s without using Material-3 design's Material Color Utilities (MCU) based seed-generated ColorSchemes. You may prefer to use seed generated ColorSchemes with Material-3, but it is nice to know you do not have to.\n\nTo the seed generated `ColorScheme`s, FCS adds support for all the Flutter `DynamicSchemeVariant` seed generated variants. It also improves them by allowing you to use separate seed colors for each palette. With Flutter's `ColorScheme.fromSeed`, you can only seed with one color, the primary color. The resulting `ColorScheme` always uses computed values for **secondary** and **tertiary** palettes, plus a hard coded fixed color for the **error** palette seeding. **Surfaces** colors are always tied to primary color as well and include a hint of primary color. With FCS, you do not have these limitations, you can seed with separate colors for each palette with even with Flutter's own dynamic scheme variants. This was always possible with FlexColorScheme and its FlexSeedScheme (FSS) based FlexTones, seed generated scheme variants. FCS now brings this feature to Flutter's own dynamic scheme variants as well.\n\nAs before, FCS also has its own even configurable `FlexTones` way of making seed generated ColorSchemes. Typically, you use predefined `FlexTones`, but you can also create your own `FlexTones` configurations. With it, you can define the chroma goals for each palette and define which tone is mapped to what `ColorScheme` color. An internal example of using them is the implementation of `FlexTones` modifiers. \n\nFlexColorScheme V8 adds three new `FlexTones` modifiers. The most useful one is called `monochromeSurfaces()`. This tone modifier makes the surface shades of any used `FlexTones` configuration use monochrome greyscale shades for the surface and surface variant palettes. It thus gives us greyscale colors for **ALL** surfaces, instead of primary-tinted ones. It can be applied to any `FlexTones` seed generated scheme variant. The other new modifiers are `expressiveOnContainer()` and `higherContrastFixed()`. Check the API docs for more details.\n\n### PACKAGE CHANGES\n\nThis section contains a detailed list of all changes introduced in FlexColorScheme version 8.0.0.\n  \n**BREAKING CHANGES**\n\nThis version contains a lot of breaking changes due to updates in the Material-3 ColorScheme in Flutter 3.22. At the same time, this release uses the forced breaking change to clean up some older APIs. FCS is now more aligned with Flutter's Material-3 theming defaults, by typically using them as starting points in the default Material-3 mode. Material-2 mode is still supported, it has its own opinionated defaults as before.\n\n- The `ThemeData` flag `useMaterial3` is now **true by default** to align with **Flutter 3.16.0** and later default for ThemeData. To continue using Material-2 theming, set `useMaterial3` to false. All component themes in `FlexSubThemes` that have a `useMaterial3` property now also default to true. \n- Keeping to Material-3 defaults, in the theme factories `light` and `dark`, if `scheme` is undefined it now defaults to `FlexScheme.materialBaseline` the Material-3 baseline scheme, when `useMaterial3` is true. If `useMaterial3` is false and `scheme`is undefined, it defaults to `FlexScheme.material`, the default Material-2 theme, as before. \n\n\n- Removed **ALL** references to in Flutter 3.22 deprecated `ColorScheme` colors `background`, `onBackground` and `surfaceVariant`. They are not used in FCS anymore. The `background` color was critical for FCS surface blending, it is now handled differently. The removal of these `ColorScheme` colors had far-reaching, but typically still subtle implications on styles created by FCS. There are many breaking minor style changes in this release due to this. Here are the critical changes caused by all these breaking changes in Flutter 3.22:\n  - Deprecated `background` and `onBackground` colors in `FlexColorScheme`, `FlexColorScheme.light`, `FlexColorScheme.dark`, `FlexThemeData.light` and `FlexThemeData.dark` factories. They are not used anymore. Use `surface` and `onSurface` colors instead.\n  - Deprecated `background`, `onBackground`, `surfaceVariant` from `FlexSchemeOnColors` and `FlexSchemeSurfaceColors`. They are no longer used and have no function. They were deprecated since the same colors were deprecated in `ColorScheme` in Flutter 3.22.\n  - Deprecated `surfaceVariantAlpha` and `backgroundAlpha` colors in `FlexAlphaValues`. They are not used anymore and have no function, use `surfaceAlpha` instead. They were deprecated since the colors they related to were deprecated in `ColorScheme` in Flutter 3.22.\n  - The `FlexSchemeSurfaceColors.blend` factory constructor produces slightly different blend result than in earlier versions. Because Flutter 3.22 deprecated `ColorScheme` colors `background`, `onBackground` and `surfaceVariant`, that were used in the blend calculation earlier. It is no longer possible to produce the same results as before, but the results are equivalent to previous design intent. With one exception, using `surfaceMode` with `FlexSurfaceMode.highBackgroundLowScaffold` sets surface and dialog blends to 2x instead of 1x, so that it represents the \"high background\" style as before, but done via surface. Without this breaking change, this mode would produce the same result `FlexSurfaceMode.levelSurfacesLowScaffold` and be redundant.\n  - The enum `SchemeColor` **removed** all the corresponding colors that Flutter 3.22 deprecated. This is a **VERY breaking** change and will break your code if you happened to use any of the removed enum values. This may likely happen. The removed enum values are: `SchemeColor.background`, `SchemeColor.onBackground` and `SchemeColor.surfaceVariant`. For **background** Flutter recommends that you should use the values `SchemeColor.surface` and `SchemeColor.onSurface` instead and for `surfaceVariant` the `SchemeColor.surfaceContainerHighest` is recommended. In all cases you can try the other new surface colors as well, to see what best fits your design goals and intent. \n  - The enum `SchemeColor` got support for all the new colors in Flutter 3.22 `ColorScheme`. It also removed the colors Flutter 3.22 deprecated. The order of the enum values was modified. This will break usage that depends on the enum's index, for example, storage of the values for implementations that depend on the index value.\n  - Property `systemNavBarStyle` in `FlexColorScheme.themedSystemNavigationBar` now defaults to `FlexSystemNavBarStyle.surface`, instead of `FlexSystemNavBarStyle.background`. Using `FlexSystemNavBarStyle.background` results in the color `Theme.of(context).colorScheme.surfaceContainerLow` being used, where it previously was `Theme.of(context).colorScheme.background`. This is because Flutter 3.22 deprecated `ColorSCheme.background`.\n  - The enum `FlexAppBarStyle` value `background` now results in the `AppBar` using the `surfaceContainerLow` color instead of `background`. This breaking change was introduced because of the breaking change in Material-3 in Flutter 3.22 where the color `background` was deprecated. The new color is kind of the best match for the old `background` color in a typical FCS configuration.\n  - The enum `FlexSystemNavBarStyle` value `background` now results in the app bar using the `surfaceContainerLow` color instead of `background`. This breaking change was introduced because of the breaking change in Material-3 in Flutter 3.22 where the color `background` was deprecated. The new color is kind of the best match for the old `background` color in typical FCS configuration. \n\n\n- Breaking rename: All helper component themes in `FlexSubThemes` ended with `Theme`, as designed, except `FlexSubThemes.bottomNavigationBar`. This mistake is now corrected, it was renamed to `FlexSubThemes.bottomNavigationBarTheme`. The old version is deprecated and passes its props through to the renamed version. The old and wrong named one will be removed in version 9.0.0. \n\n- Deprecated `FlexSubThemesData.blendTextTheme`, it no longer has any function. See topic _\"Why is blendTextTheme deprecated?\"_ further below for more information,\n\n- Deprecated the FCS legacy property `useFlutterDefaults`. FlexColorScheme in Material-3 mode now defaults to using Flutter default styles. For other configurations, modify them as desired. In Material-2 mode, FCS continues to use its opinionated own defaults as before, as long as Material-2 exists.\n\n\n- Deprecated the static function `FlexColorScheme.createPrimarySwatch`, it is no longer used by FlexColorScheme internally, it is now deprecated in FlexColorScheme and will go away in V9. After this, you will still be able to find this function in `ColorTools` in the package `flex_Color_picker`, where it will remain available.\n\n\n- Replaced the FCS legacy property `useTextTheme` with a more feature correctly named property `useMaterial3Typography`. Use it instead. The `useTextTheme` originally had another function in much older versions of FCS. Its name no longer represented its function, the new name does. If not defined, the default is `true` in Material-3 mode and `false` in Material-2 mode. If you still use Material-2, try setting this to true to get nicer typography in Material-2 mode.\n\n\n- The color `material3DarkOnErrorContainer` was changed from `Color(0xFFFFB4AB)` to `Color(0xFFFFDAD6)` to match the **new** Material-3 default dark error color used in **Flutter 3.22**. \n\n\n- Dialog background color now defaults to `surfaceContainerHigh` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. Breaking change introduced to match the breaking change in Material-3 defaults in Flutter 3.22.\n\n\n- The `ElevatedButton` background color now defaults to `surfaceContainerLow` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22.\n\n\n- The `PopupMenuButton` background color now defaults to `surfaceContainer` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22.\n\n\n- The `MenuBar` background color now defaults to `surfaceContainer` instead of `surface` with elevation tint in Material-3 mode. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22.\n\n- The produced `MenuTheme` background color now defaults to `surfaceContainer` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22. This affects default background color of the opened menu on `MenuBar`, `MenuAnchor` and `DropdownMenu`.\n\n\n- The `BottomSheet` background color now defaults to `surfaceContainerLow` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22.\n\n\n- The produced `DrawerTheme` background color now defaults to `surfaceContainerLow` with no elevation tint color in Material-3 mode, instead of `surface` with elevation tint. This breaking change was introduced to match the breaking change in Material-3 defaults in Flutter 3.22. This affects the default background color of the `Drawer` and `NavigationDrawer`. FCS uses `surfaceContainerLow` as background color in Material-2 mode by default too.\n- The produced `DrawerTheme` width now defaults to 304 dp in Material-3 mode. The [official Material-3 spec is 360 dp](Material-3 spec https://m3.material.io/components/navigation-drawer/specs), FCS was using it, but Flutter SDK has so far \"declined\" following the Material-3 spec here and still uses the older default 304 dp used in the Material-2 spec. This older default is actually a better choice, so FCS has now opted to revert to using it as default too. For more information about this and why 304 dp is better, see Flutter [issue #123380](https://github.com/flutter/flutter/issues/123380).  \n \n\n- The `FlexSubThemesData` properties `interactionEffects`, `tintedDisabledControls` and `defaultUseM2StyleDividerInM3` now all default to `false`. In previous versions they defaulted to `true`. This change was made to have fewer opinionated defaults in FCS to align it more with Flutter SDK default styles. If you had **NOT** configured these values before, they defaulted to `true`. You now have to set them explicitly to `true` to opt in and get the same results as you got before when they were not configured.\n\n \n- The `FlexSubThemesData` properties `blendOnColors` now defaults to `false`. In previous versions it defaulted to `true`. This change was made to have fewer opinionated defaults in FCS, to align it more with Flutter defaults. If you had **NOT** configured this values before, it defaulted to `true`. You now have to set it explicitly to `true` to get the same result as before, when it was not configured. Consider setting this property `true` in dark mode, and false in `light` theme mode, for a style that matches the Material-3 color design, when you are not using a seed generated `ColorScheme`. This setting has no effect when using a seed generated `ColorScheme`, as it generates blended/tinted onColors based on the seed algorithm, that overrides the effect of this setting. This setting creates a similar effect for none seeded ColorSchemes.\n\n\n- The `FlexSubThemesData` property `inputSelectionHandleSchemeColor` when not defined, defaults to `inputDecoratorSchemeColor` and if it is not defined either, the effective text selection handle color result is `ColorScheme.primary`, same as Flutter SDK default. In previous versions, no definitions, resulted in `ThemeData.primaryColorDark` being used. This was changed in preparation of Flutter's planned deprecation of `primaryColorDark`.   \n- The `FlexSubThemesData` property `inputDecoratorIsFilled` now default to `false` when undefined, like Flutter SDK does. Set it to `true` to get the same style it had with previous undefined value.\n- The `FlexSubThemesData` property `inputDecoratorBorderType` now default to `FlexInputBorderType.underline` when undefined, producing same default as Flutter SDK does. Set it to `FlexInputBorderType.outline` to get the same style it had with previous undefined value.\n- The `FlexSubThemesData` property `inputDecoratorUnfocusedBorderIsColored` now default to `false` when undefined, like Flutter SDK does. Set it to `true` to get the same style it had with previous undefined value.\n- In `FlexSubTheme.InputDecorationTheme` the following properties have new breaking default values: `filled` default to `false`, `borderType` default to `FlexInputBorderType.underline` and `unfocusedBorderIsColored` to `false`.\n\n\n\n- The `FlexSubThemesData` properties `navigationRailMutedUnselectedLabel` and `navigationRailMutedUnselectedIcon` now default to `false`. In previous versions they defaulted to `true`. This change was made to have fewer opinionated defaults in FCS and follow Material-3 design spec by default.\n- The `FlexSubThemesData` properties `navigationRailUseIndicator` now defaults to `null`, resulting in `true` being used in Material-3 mode and `false` in Material-2 mode. In previous versions it defaulted to `true`. This change was made to have fewer opinionated defaults in FCS and follow Material design specs for default values. If you still use Material-2, you now have to set this to true to see the indicator. The Playground now always sets either true or false in both modes, it never leaves out the default choice in generated config code. The field is nullable, and you can now also get the M2/M3 different default styles, by not defining this property at all.\n- In `FlexSubThemes.navigationRailTheme` the properties `mutedUnselectedLabel` and `mutedUnselectedIcon` now default to `false` if undefined. In previous versions they defaulted to `true`. Property `selectedLabelSchemeColor` defaults to `onSurface` and `unselectedLabelSchemeColor` default to `onSurfaceVariant`, they were `primary` before. Property `unselectedIconColor` now defaults to `onSurfaceVariant` it was `onSurface`. Property `selectedIconColor` now defaults to `onSecondaryContainer` it was `primary`. Property `labelType` now defaults to `NavigationRailLabelType.none` it was `NavigationRailLabelType.all`.\n  - All these changes were made to have fewer opinionated defaults in FCS and follow Material-3 design spec by default. Past FCS defaults were made before some Material-3 specs existed. In some cases, earlier FCS versions also kept its opinionated defaults from Material-2 as defaults for its Material-3 default theme. \n- The `FlexSubThemesData` properties `navigationRailUnselectedLabelSchemeColor` and `navigationRailUnselectedIconSchemeColor` now default to `onSurfaceVariant` (was `onSurface`). The `onSurfaceVariant` is used as on color pair default when any surface color is used as background color for the rail, if a none surface color is used as background scheme color, its contrast color pair is used as default for the labels and unselected icons. The `navigationRailSelectedIconSchemeColor` will if undefined, default to the contrast color pair for `navigationRailIndicatorSchemeColor`. These default behaviors result in less configuration in typical designs, while starting points defaults are the same as before and full configuration options are also available as before. The equivalent colors in `FlexSubThemes.navigationRailTheme` behave the same way.\n\n\n- The `FlexSubThemesData` properties `navigationBarMutedUnselectedLabel` and `navigationBarMutedUnselectedIcon` now default to `false`. In previous versions they defaulted to `true`. This change was made to have fewer opinionated defaults in FCS and follow Material-3 design spec by default.\n- In `FlexSubThemes.navigationBarTheme` the properties `mutedUnselectedLabel` and `mutedUnselectedIcon` now default to `false` if undefined. In previous versions they defaulted to `true`. Property `selectedLabelSchemeColor` defaults to `onSurface` and `unselectedLabelSchemeColor` default to `onSurfaceVariant`, they were `primary` before. Property `unselectedIconColor` now defaults to `onSurfaceVariant` it was `onSurface`. Property `selectedIconColor` now defaults to `onSecondaryContainer` it was `primary`.\n  - All these changes were made to have fewer opinionated defaults in FCS and follow Material-3 design spec by default. Past FCS defaults were made before some Material-3 specs existed. In some cases, earlier FCS versions also kept its opinionated defaults from Material-2 as defaults for its Material-3 default theme.\n- The `FlexSubThemesData` properties `navigationBarUnselectedLabelSchemeColor` and `navigationBarUnselectedIconSchemeColor` now default to `onSurfaceVariant` (was `onSurface`). The `onSurfaceVariant` is used as on color pair default when any surface color is used as background color for the rail, if a none surface color is used as background scheme color, its contrast color pair is used as default for the labels and unselected icons. The `navigationBarSelectedIconSchemeColor` will if undefined, default to the contrast color pair for `navigationBarIndicatorSchemeColor`. These default behaviors result in less configuration in typical designs, while starting points defaults are the same as before and full configuration options are also available as before. The equivalent colors in `FlexSubThemes.navigationBarTheme` behave the same way.\n\n  \n- The `FlexSubThemesData` properties `bottomNavigationBarMutedUnselectedLabel` and `bottomNavigationBarMutedUnselectedIcon` now default to `null`, resulting in `true` being used as default in Material-2 mode and `false` in Material-3 mode. In previous versions these properties defaulted to `true` in both modes. This change was made to have fewer opinionated defaults in FCS.\n- The `FlexSubThemesData` properties `bottomNavigationBarUnselectedLabelSchemeColor` and `bottomNavigationBarUnselectedIconSchemeColor` now default to `onSurfaceVariant` in Material-3 mode, it was `onSurface`, which remains the default in Material-3 mode. In Material-3 mode, the `onSurfaceVariant` is used as on color pair default when any surface color is used as background color for the navigation bar. If a none surface color is used as background scheme color, its contrast color pair is used as default for the labels and unselected icons, in both Material-2 and Material-3 mode. These default behaviors result in less configuration in typical designs, while starting points defaults are the same as before and full configuration options are also available as before. The equivalent colors in `FlexSubThemes.bottomNavigationBar` behave the same way.\n\n\n- The `FlexSubThemesData` property `chipDeleteIconSchemeColor` now default to `SchemeColor.onSurfaceVariant`. In previous versions it defaulted to `SchemeColor.onSurface`. Likewise in `FlexSubThemes.chipTheme` the property `deleteIconSchemeColor` now defaults to `SchemeColor.onSurfaceVariant` if undefined. In previous versions it defaulted to `SchemeColor.onSurface`. This change was made to adjust to follow updated Material-3 spec defaults.\n\n\n- The `FlexSubThemesData` property `drawerUnselectedItemSchemeColor` now default to `SchemeColor.onSurfaceVariant`, as on color pair default when any surface color is used as drawer background color. Previously it defaulted to `onSurface`. Likewise in `FlexSubThemes.navigationDrawerTheme` the property `unselectedItemSchemeColor` now defaults to `SchemeColor.onSurfaceVariant` if undefined. This was changed to use ase as Material-3 defaults.\n\n\n- Minor style breaking, the tinted interactions were slightly modified. They are now a bit less pronounced and also have a bit less gray in them.\n\n**NEW**\n\n- Added three new `FlexScheme`s, called `blackWhite`, `greys` and `sepia`. They are primarily intended to be used as prototype phase color schemes that do not use colors. This can be useful for focusing on features and layout during the early development phase, keeping the discussion away from colors. The schemes can also be used as neutral baselines for custom color schemes, where only a few colors are overridden with custom colors.\n\n- The const color definition class `FlexColor` got 24 new color values to support monochrome greyscale colors for all new surfaces and their on colors for light and dark mode. These are used as starting colors for the new surface colors in the **Flutter 3.22** updated and new Material-3 `ColorScheme`, when a seed generated `ColorScheme` is **NOT** used. These colors follow the naming convention `lightFlexSurface___` and `darkFlexSurface___`, plus their on and inverse versions.\n\n- Added named bool parameter `useOnSurfaceVariant` that defaults to `false`, to `FlexSubTheme.schemeColorPair()` and to `FlexSubTheme.onSchemeColor()`, when set to true, the on color `onSurfaceVariant` is returned instead for `onSurface` for all surface colors.\n\n- Added `black`, `white` and `transparent` as enum values to `SchemeColor`. These are not `ColorScheme` colors, **but** these colors can in many theming situations be useful instead of the `ColorScheme` based ones.\n  - The automatic on color pair for black is white and white for black. For transparent, it is `onSurface`. \n- Added all the new surface colors in Flutter 3.22 to `FlexSchemeSurfaceColors`.\n- Added all the new on colors in Flutter 3.22 to `FlexSchemeOnColors`.\n \n\n- The `FlexKeyColor` class got three new properties, `contrastLevel`, `useExpressiveOnContainerColors` and `useLegacyMonochromeSeedBehavior`. They are used to control seed generation results.\n\n  1) The `contrastLevel` is used to control the contrast level of MCU generated scheme colors. The `contrastLevel` parameter indicates the contrast level between color pairs, such as `primary` and `onPrimary`. The value 0.0 is the default, standard contrast; -1.0 is the lowest; 1.0 is the highest. From the Material-3 Design guideline, the standard, medium and high contrast options correspond to values 0.0, 0.5 and 1.0 respectively. \n      - The `contrastLevel` property is only available when seed generating a `ColorScheme` using `FlexSeedScheme`'s `SeedColorScheme.fromSeeds` when a scheme `variant` is used where its `FlexSchemeVariant.value`, `isFlutterScheme` is true. This set corresponds to all the `DynamicSchemeVariant`s available in the Flutter SDK.\n      - The `contrastLevel` is the same as the Flutter `contrastLevel` property available in `ColorScheme.fromSeed`. As of Sep 3, 2024, this `contrastLevel` is still only available in the master channel. It will land in the next Flutter stable, released after Flutter 3.24. With FCS v8 you can use it already now.\n        > When using FSS `tones` based seed generated schemes or a `variant` having its `FlexSchemeVariant.value`, `isFlutterScheme` it set to `false`, the `contrastLevel` value is ignored. With `tones` based schemes, the contrast level can instead be defined as desired using custom `FlexTones` configurations. There are two predefined higher contrast level tone and chroma mappings available as `FlexTones.highContrast` and `FlexTones.ultraContrast`, you can use them as they are, or as examples of how to create your own custom high contrast tone mappings.\n \n  2) The boolean `useExpressiveOnContainerColors` is used to make the light theme mode colors `onPrimaryContainer`, `onSecondaryContainer`, `onTertiaryContainer` and `onErrorContainer` more color expressive, at the cost of their contrast level and accessibility. Defaults to `false` if undefined.\n\n     - The Material design spec for the tones used by the colors `onPrimaryContainer`, `onSecondaryContainer`, `onTertiaryContainer` and `onErrorContainer` have changed from tone **10** to **30** for **LIGHT** theme mode. This change will land in Flutter when the Material Color Utilities (MCU) package is updated to at least 0.12.0. This has not been done even in master (Sep 3, 2024). \n     - Setting the `useExpressiveOnContainerColors` to `true` will make the colors use the new expressive tone. The expressive tone spec is not yet used in Flutter SDK, but is in the Material-3 design spec and also in MCU v 0.12.0. When this change lands in stable Flutter, it will be made **ON** by default in FCS too. You will still be able to opt out of using it. Flutter SDK and MCU will not contain such an opt-out feature.\n     - The new **on** color tones for containers in light mode make them more color expressive, but they also reduce their contrast level and accessibility. We recommend keeping them at the higher contrast level, by setting `useExpressiveOnContainerColors` to `false`. With it set to false, you will also keep this preference when the Flutter SDK defaults to using the expressive tones. \n\n  3) The boolean `useLegacyMonochromeSeedBehavior` is used for enabling the legacy behavior for monochrome seed colors\n     - With Flutter SDK and also FCS versions before 8.0.0, using a monochrome seed color or white color, resulted in a tonal palette with cyan color tones. Whereas a black seed color resulted in red like color tones. This is not very intuitive and not really expected or desired when using monochrome seed colors. In version 8.0.0 and later of FCS any monochrome RGB input value will result in the creation of a greyscale tonal palette for the palette using the monochrome seed color. An RGB monochrome value is one where Red, Green and Blue values are all equal.\n     - If you require the old style seed result for monochrome seed colors, set `useLegacyMonochromeSeedBehavior` to `true`.\n     - Defaults to `false`.\n     - Under the hood this setting is passed to `respectMonochromeSeed` in `SeedColorScheme.fromSeeds` in FlexSeedScheme's internal MCU fork, and sets it `!useLegacyMonochromeSeedBehavior`. In FSS this feature is opt-in and recommended to be used. Here, in FCS this setting is opt-out if not desired, and it is strongly recommended to use the new behavior. When using `useLegacyMonochromeSeedBehavior` with\n       > When using `useLegacyMonochromeSeedBehavior` with `DynamicSchemeVariant` variants `fidelity` or `content`, for some monochrome input colors they produce `primaryContainer` and `onPrimaryContainer` as well as `tertiaryContainer` and `onTertiaryContainer` color pairs, with low contrast. Consider using some other scheme variants with monochrome seed colors. All others work well with any monochrome seed color. This is just how the MCU `DynamicScheme`s `SchemeContent` and `SchemeFidelity` are defined in MCU. They also produce fairly low contrast for these color pairs with very dark seed colors. This behavior with MCU's `SchemeContent` and `SchemeFidelity` could be fixed in FlexSeedScheme's internal MCU fork, but we want to keep the result of these schemes consistent with MCU. \n\n\n- Added TextStyles for `FlexSubThemesData` so that:\n  - `FlexSubThemes.appBarTheme` **uses** `FlexSubThemesData.appBarToolbarTextStyle` for its `toolbarTextStyle`.\n  - `FlexSubThemes.appBarTheme` **uses** `FlexSubThemesData.appBarTitleTextStyle` for its `titleTextStyle`.\n  - `FlexSubThemes.chipTheme` **uses** `FlexSubThemesData.chipLabelStyle` for its `labelStyle`.\n  - `FlexSubThemes.chipTheme` **uses** `FlexSubThemesData.chipSecondaryLabelStyle` for its `secondaryLabelStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerHeaderHeadlineStyle` for its `headerHeadlineStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerHeaderHelpStyle` for its `headerHelpStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerWeekdayStyle` for its `weekdayStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerDayStyle` for its `dayStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerYearStyle` for its `yearStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerRangePickerHeaderHeadlineStyle` for its `rangePickerHeaderHeadlineStyle`.\n  - `FlexSubThemes.datePickerTheme` **uses** `FlexSubThemesData.datePickerRangePickerHeaderHelpStyle` for its `rangePickerHeaderHelpStyle`.\n  - `FlexSubThemes.dialogTheme` **uses** `FlexSubThemesData.dialogTitleTextStyle` for its `titleTextStyle`.\n  - `FlexSubThemes.dialogTheme` **uses** `FlexSubThemesData.dialogContentTextStyle` for its `contentTextStyle`.\n  - `FlexSubThemes.floatingActionButtonTheme` **uses** `FlexSubThemesData.fabExtendedTextStyle` for its `extendedTextStyle`.\n  - `FlexSubThemes.menuButtonTheme` **uses** `FlexSubThemesData.menuButtonTextStyle` for its `textStyle`.  \n  - `FlexSubThemes.timePickerTheme` **uses** `FlexSubThemesData.timePickerDayPeriodTextStyle` for its `dayPeriodTextStyle`.\n  - `FlexSubThemes.timePickerTheme` **uses** `FlexSubThemesData.timePickerDialTextStyle` for its `dialTextStyle`.,\n  - `FlexSubThemes.timePickerTheme` **uses** `FlexSubThemesData.timePickerHelpTextStyle` for its `helpTextStyle`.,\n  - `FlexSubThemes.timePickerTheme` **uses** `FlexSubThemesData.timePickerHourMinuteTextStyle` for its `hourMinuteTextStyle`.,\n  - `FlexSubThemes.toggleButtonsTheme` **uses** `FlexSubThemesData.toggleButtonsTextStyle` for its `textStyle`.\n  - `FlexSubThemes.segmentedButtonTheme` **uses** `FlexSubThemesData.segmentedButtonTextStyle` for its `textStyle`.  \n  - `FlexSubThemes.snackBarTheme` **uses** `FlexSubThemesData.snackBarContentTextStyle` for its `contentTextStyle`.\n  - These are not available in the **Themes Playground**. Their purpose is that you can use them with the API to provide custom text styles for FCS styled components. You could do this in the past too, but you had to use rather complicated deep `copyWith` on the produced component themes. With these props you get access to direct `TextStyle` styling for these component properties in the FCS API too.\n\n\n- Added `useCupertinoStyle` property to `FlexSubThemes.switchTheme`. Added `switchAdaptiveCupertinoLike` property to `FlexSubThemesData` and made `FlexSubThemes.switchTheme` use it.\n\n\n- Added `secondarySelectedSchemeColor`, `fontSize`, `secondaryFontSize`, `iconSize` and `padding` properties to `FlexSubThemes.chipTheme`. Added `chipSecondarySelectedSchemeColor`, `chipFontSize`, `chipSecondaryFontSize`, `chipIconSize` and `chipPadding` properties to `FlexSubThemesData` and made `FlexSubThemes.chipTheme` use them.\n\n\n- Added `headerForegroundSchemeColor` property to `FlexSubThemes.datePickerTheme`. Added `datePickerHeaderForegroundSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.datePickerTheme` use it for its header foreground color.\n- Added `dividerSchemeColor` property to `FlexSubThemes.datePickerTheme`. Added `datePickerDividerSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.datePickerTheme` use it for its divider color.\n\n\n- Added `isDense` property to `FlexSubThemes.inputDecoratorTheme`. Added `inputDecoratorIsDense` property to `FlexSubThemesData`.\n- Added `contentPadding` property to `FlexSubThemes.inputDecoratorTheme`. Added `inputDecoratorContentPadding` property to `FlexSubThemesData` and made `FlexSubThemes.inputDecoratorTheme` use it.\n- Added `inputDecoratorSuffixIconSchemeColor` property to `FlexSubThemes.inputDecorationTheme`. Added `toggleButtonsSelectedForegroundSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.segmentedButtonTheme` use it.\n- Added `adaptiveInputDecoratorRadius` and `inputDecoratorRadiusAdaptive` properties to `FlexSubThemesData`. They are used to select platform(s) to an alternative border radius response for the input decorator, for the selected platform(s).\n\n\n- Added `minWidth` and `minExtendedWidth` to `FlexSubThemes.navigationRailTheme`. Added `navigationRailMinWidth` and `navigationRailMinExtendedWidth` properties to `FlexSubThemesData` and made `FlexSubThemes.navigationRailTheme` use them.\n\n\n- Added `tabAlignment` property to `FlexSubThemes.tabAlignment`. Added `tabBarTabAlignment` property to `FlexSubThemesData` and made `FlexSubThemes.tabBarTheme` use it for its. (TODO: Add a note about thrown assert, open an issue in Flutter SDK about it and suggest an alternative solution.)\n\n\n- Added `foregroundSchemeColor` property to `FlexSubThemes.floatingActionButtonTheme`. Added `fabForegroundSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.floatingActionButtonTheme` use it for its foreground color.\n \n\n- Added `selectedForegroundSchemeColor` property to `FlexSubThemes.segmentedButtonTheme`.\n- Added `segmentedButtonSelectedForegroundSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.segmentedButtonTheme` use it.\n- Added `selectedForegroundSchemeColor` property to `FlexSubThemes.toggleButtonsTheme`.\n- Added `toggleButtonsSelectedForegroundSchemeColor` property to `FlexSubThemesData` and made `FlexSubThemes.toggleButtonsTheme` use it.\n\n\n- Added `appBarForegroundSchemeColor`, `appBarIconSchemeColor` and `appBarActionsIconSchemeColor` properties to `FlexSubThemesData` and made `FlexSubThemes.appBarTheme` use it for its colors on title, icon and actions.\n- Added `bottomAppBarHeight` property to `FlexSubThemesData` and made `FlexSubThemes.bottomAppBarTheme` use it as its `height` value.\n\n\n- Added `scaffoldBackgroundBaseColor` property to `FlexSubThemesData`. It is a `FlexScaffoldBaseColor` enum that can be used to select the base color used as `Themedata.scaffoldBackgroundColor` in a theme. The selected base color is modified by used `surfaceMode` and `blendLevel`] in the `FlexColorScheme`'s `light` and `dark` factory constructors.\n- Added `scaffoldBackgroundSchemeColor` property to `FlexSubThemesData` and made `ThemeData.scaffoldBackgroundColor` use it as an override color, if it is defined. Setting `scaffoldBackgroundSchemeColor` will override any blended background or true black or plain white setting.\n\n\n- Added `cupertinoOverrideTheme` to `FlexColorScheme` constructor and to `FlexColorScheme.light`, `FlexColorScheme.dark`, `FlexThemeData.light` and `FlexThemeData.dark` factory constructors.\n\n\n- Added enum `variant` a `FlexSchemeVariant` to `FlexColorsScheme` and `FlexThemeData` light and dark. This is used to define the variant of the seeded `ColorScheme`. It is an alternative to `tones` that also includes scheme seed variants that Flutter SDK added in version 3.22.2. \n\n\n- Added enhanced enum functions `data` and `colors` to the `FlexScheme` enum, that returns the predefined `FlexSchemeData` and `FlexSchemeColor` respectively, that are associated with a given enum value. This could be done already using the `FlexColor.schemes` map. This is a convenience API to be able to use e.g. `FlexColor.mango.data` to get the predefined `FlexSchemeData` for the `mango` enum scheme and e.g. `FlexColor.barossa.colors(Brightness.dark)` to get the pre-defined dark colors used for the `barossa` scheme colors. See feature request: https://github.com/rydmike/flex_color_scheme/issues/210\n\n\n- Added ability to use custom seed key colors to `FlexKeyColors`.\n- Added support for error colors to `FlexKeyColors`.\n- Added direct color properties for `errorContainer` and `onErrorContainer` to `FlexColorScheme`, `FlexColorScheme.light`, `FlexColorScheme.dark`, `FlexThemeData.light`, `FlexThemeData.dark`. It was required to support custom error container colors in the `FlexKeyColors` API.  \n- Added `Color` properties `primaryLightRef`, `secondaryLightRef` and `tertiaryLightRef` to `FlexSchemeColor`.\n  - They are used to store references to the corresponding color in a `FlexSchemeColor` made for light mode in the dark mode `FlexSchemeColor`. This is used to create computed \"fixed\" and \"fixedDim\" colors for dark mode and the light mode `ColorScheme` that are identical in light and dark mode.\n  - Made `FlexSchemeColor()`, `FlexSchemeColor.from()`, `FlexSchemeColor.effective()` and `FlexSchemeColor.toDark()` work correctly with the new `primaryLightRef`, `secondaryLightRef` and `tertiaryLightRef` properties. \n  - Used all main `light` color properties in `FlexSchemeData` static `FlexSchemeColor` color definitions, as **lightRef** colors in their `dark` mode equivalent FlexSchemeColor. That was 156 color values to add to the 52 dark `FlexSchemeColor` definitions.\n\n- Added `fixedColorStyle` to `FlexColorScheme`, `FlexColorScheme.light`, `FlexColorScheme.dark`, `FlexThemeData.light`, `FlexThemeData.dark`. It was required to support custom error container colors in the `FlexKeyColors` API. The property is an enum `FlexFixedColorStyle`, that allows us to choose the style of the generated \"fixed\" and \"fixedDim\" colors when not using seed generated color schemes. \n\n\n- Added `Color` properties `primaryLightRef`, `secondaryLightRef` and `tertiaryLightRef` to `FlexColorScheme.dark` and `FlexThemeData.dark`. If you use the override colors `primary`, `secondary` or `tertiary` and are not using seeded ColorScheme, you need them to provide the correct light mode reference colors for computing fixed colors that will match the light mode fixed colors, for that it is required to know what the light mode colors are. If you are seeding and use the overrides, and will switch between seeded and not seeded, you can provide the override for the not seeded values in `primary`, `secondary` or `tertiary`, and the ref to their seed colors from light mode, in the light ref colors. If you always seed when using the overrides, you can also provide the seed colors in the `primary`, `secondary` or `tertiary` overrides, the light refs fall through to these colors in that cases if not provided during seeding.\n\n\n- Added style `navigationBar` to enum `FlexSystemNavBarStyle` that use the color for default or themed `NavigationBar` background color on the system navigation bar helper.\n  - You can get a similar result with the transparent option. Using the `navigationBar` option does not require using the edge-to-edge config required when using transparent system navigation bar to see things behind it. The `transparent` option sets edge-to-edge mode behind the scenes when used. This can cause some layout changes that must be considered in the app design when used. This is an optional way to style the system navigation bar to match the app's themed `NavigationBar` background color, without using edge-to-edge Android screen mode.\n\n\n- Added `ListTile` theming support to `FlexSubThemesData` and made corresponding `FlexSubThemes.listTileTheme` properties use them in `FlexColorScheme` as `ListTileTheme` theming properties.\n  - The following `FlexSubThemesData` properties were added: `listTileSelectedSchemeColor`, `listTileIconSchemeColor`, `listTileTextSchemeColor`, `listTileTitleTextStyle`, `listTileSubtitleTextStyle`, `listTileLeadingAndTrailingTextStyle`, `listTileTileSchemeColor`,   `listTileSelectedTileSchemeColor`, `listTileContentPadding`, `listTileHorizontalTitleGap`, `listTileMinVerticalPadding`, `listTileStyle`, `listTileTitleAlignment` and `listTileControlAffinity`.\n\n\n- Added `SearchBar` and `SearchView` theming support to `FlexSubThemesData` and made corresponding `FlexSubThemes.searchBarTheme` and `FlexSubThemes.searchViewTheme` properties use them in `FlexColorScheme` as `SearchBarThemeData` and `SearchViewThemeData` theming properties.\n  - The following `FlexSubThemesData` properties were added: `searchBarBackgroundSchemeColor`, `searchViewBackgroundSchemeColor`, `searchBarElevation`, `searchViewElevation`, `searchBarRadius`, `searchViewRadius`, `searchViewHeaderHeight`, `searchBarTextStyle`, `searchViewHeaderTextStyle`, `searchBarHintStyle`, `searchViewHeaderHintStyle`, `searchViewDividerColor`, `searchBarShadowColor`, `searchBarTextCapitalization`, `searchBarPadding`, `searchBarConstraints`, `searchViewConstraints` and `searchUseGlobalShape`.\n\n\n**CHANGE**\n\n- Changed all internal usage of `MaterialStateProperty` and `MaterialState` to use new `WidgetStateProperty` and `WidgetState` introduced in **Flutter 3.22** and later.\n- Static functions `FlexSubThemes.schemeColor` and `FlexSubThemes.onSchemeColor` now support the updated `SchemeColor` and `ColorScheme`.\n\n- Improved the theming logic for `Card` theme.\n  - It now avoids [issue #153912](https://github.com/flutter/flutter/issues/153912), but **only** when the Flutter default radius is used. This is done by not creating a shape theme when the default radius is used and using the default created one instead. This will keep the outline for the default radius theme cases. Previously FCS Card theme created a shape with the default radius. Both cases are now using default and null radius value, it keeps shape null and lets the widget default behavior be used, so we can keep the outline on `Card.outlined` variant for the default case at least. This Flutter theming limitation and impact is thus now the same in FCS, as it is with vanilla Flutter `ThemeData` and its `CardTheme`. It is still broken as mentioned in the above issue, but that is a Flutter theming issue and limitation that FCS cannot fix.\n\n- Changed the `FlexSubThemes.inputDecoratorTheme` to use only `border` and its **WidgetState** for its theme. It offers more and nicer control over hover state than using the older legacy more limited border styles. \n\n**FIX**\n \n- Fixed [#198 AppBar color issue when using seed generated scheme with key color locked](https://github.com/rydmike/flex_color_scheme/issues/198).\n   \n- Fixed that the Rectangular Slider value indicator did not default to `primary` color when undefined, as intended in FCS M2 and M3 mode. Only the Drop style indicator defaulted to primary. This came from the framework defaulting the old M2 rectangular indicator to a complex, opacity and alpha blended `onSurface` grey looking result.\n\n#### Why is blendedTextTheme deprecated?\n\nThe `blendTextTheme` feature was originally made before Material-3's TextTheme was available, before it was fully known how it was going to be implemented. It was an approximation of the TextStyles that could be seen in early versions of Material-3 images. Since the actual Material-3 TextTheme is available, the tinted TextTheme feature is no longer required. While the FCS tinted TextTheme did provide an alternative version of the actual tint used in Material-3, the differences were quite subtle. Additionally, recent changes in Flutter make using it very verbose and complicated. Why it does so is explained in detail below.\n    \nIn Material-3 Typography 2021, the TextTheme and all styles in it are fully opaque and use onSurface as color on all TextStyles. In a seed generated ColorScheme, the text styles become primary color tinted, because the onSurface color by default has subtle primary tint. With FCS, you can modify the onSurface to black or white to avoid this, if so preferred.\n    \nIn Material-2 Typography 2018 and 2014, some TextStyles in their TextThemes use partially transparent white or black colors, making them appear tinted when placed on lightly colored backgrounds. Such TextStyles also have lower contrast. If the Material-3 default text theme is used on background colors that are tinted with a color that deviates a lot in hue from the hue used as tint color by the TextTheme, it may not fit it so well. The Material-2 opacity-based text styles do not have this limitation. It is unknown why Material-3 switched to a fixed tint color instead of using the opacity-based approach used in Material-2, that is more universally usable on backgrounds with different tint colors.\n    \nIn Material-3, some component themes override the default color of the default TextTheme TextStyles they use with `onSurfaceVariant`. This color has slightly more tint and lower contrast than the default `onSurface`. This is used for elements in components that should have less emphasis. Many default Material-3 components also override the color in default TextTheme TextStyles they use with `ColorScheme.onSurface` color, that it actually already has in a default TextTheme. These two overrides results in that whatever color the default TextTheme TextStyles have, they will be overridden by these `ColorScheme` colors. Resulting in that any custom-colored `TextTheme`and its `TextStyle`s are not getting used by such Material-3 components and that the custom colors from the meticulously colored custom `TextTheme`, are rarely visible anywhere in a Material-3 application. Material-2 component themes do not do this, nor did older Flutter versions of Material-3 component themes do this.\n    \nAn issue has been raised explaining the challenges this newer approach in Flutter causes when using custom colored text themes. If this issue is addressed, the tinted TextTheme feature in FCS may be brought back if it is a requested feature. \n\nIn current Flutter versions, using a custom-tinted TextTheme is rather pointless. You can, but it is not enough to define the TextTheme. You also have to pass each tinted TextStyle it has to the appropriate TextStyles in ALL component themes that override its colors, for it to have any effect. It is typically not worth the effort.\n\n### THEMES PLAYGROUND\n\n**NEW**\n\n- The **Theme Code** view panel now has a toggle that allows you to generate the configured code for the theme as input suitable for a separate app theme file. It has static getters that you can use in your `MaterialApp`'s `theme` and `darkTheme`.\n  >**TIP:** You can modify this file and e.g., pass in controller that contains user-configurable settings for theme configuration properties and generate the theme on the fly in your app. This way you can let the user configure the theme in your app, a few props anyway. This is basically what the Playground app does with all theming properties. That is why you can see the result and impact of defined theme in the Playground app itself, as you modify the desired theme configuration in the app.\n \n- The **Theme Code** view got a long asked for feature, Themes Playground settings export and import! You can now export your configured theme settings to a JSON file and import them back into the Playground later. This is a great way to save your theme settings for later use or to share them with others. The exported JSON file contains all the internal controller settings values you have configured in the Playground that are needed to restore a given configuration state. This Playground feature was contributed by GitHub user [@akiller](https://github.com/akiller) in [!PR 257](https://github.com/rydmike/flex_color_scheme/pull/257). Thank you! \n- The contributed feature got enhanced with more error handling and a slightly refined UI to make it production ready. \n- As a further enhancement of the JSON export feature, the **Themes Playground** app also got the ability to convert the exported settings JSON config to a shareable URL. You can now share Playground settings with other Flutter developers.\n\n\n- On each theme settings panel, many controls now appear in two columns to reduce the need to scroll so much on wider media and see more controls on the same screen. The layout is panel width responsive and controls will be in one column as before on smaller media.\n- Split the \"FAB and Chip\" settings panels to separate panels **FAB** and **Chip**. \n- Split the \"BottomAppBar and SearchBar\" panels to separate panels **SearchBar** and **BottomAppBar**.\n\n\n- On the surface **Color Blends** settings panel, you can choose which surface color the scaffold background color will use as its starting point surface color and as base for the blend level and mode. You can also select any ColorScheme color and use it as an override for the scaffold background color. This will override any blended color result as well as the plain white and true black settings.\n\n\n- The **ColorScheme** settings panel got **five** new settings:\n  1) **Contrast level** slider control for MCU based scheme variants. This feature is equivalent to the FSS based scheme variant contrast level control. It is als available in the Flutter master channel as `contrastLevel` property in `ColorScheme.fromSeed`. It is used to control the contrast level of the generated scheme colors. It will most likely land in the next stable Flutter release after 3.24. With FCS V8 you can use it already now.\n  2) A dropdown for **Fixed colors**, where you can choose between three different variants for the  `fixed`, `onFixed`, `fixedDim` and `onFixedVariant` colors, when a seed generated `ColorScheme` is **NOT** being used.\n  3) A Switch for **Higher contrast fixed and fixedDim** colors. When using FSS based seed generated color schemes, you can keep the standard Material-3 based tones for the `fixed`, `onFixed`, `fixedDim` and `onFixedVariant` colors to the Material-3 design specified values 90, 10, 80, 30 **or** and or opt-in on an alternative set 92, 6, 84, 12 that have higher contrast. \n  4) A Switch for **Expressive LIGHT containers**. The Material design spec for the tones used by the colors `onPrimaryContainer`, `onSecondaryContainer`, `onTertiaryContainer` and `onErrorContainer` have changed from tone **10** to **30** for **LIGHT** theme mode. This change will land in Flutter when the Material Color Utilities (MCU) package is updated to at least 0.12.0. This has not been done even in master (Sep 3, 2024).\n     - A toggle was added where you can opt in on using them already now in FCS. It is not ON by default. When it lands in stable Flutter, it will be made **ON** by default, but you will still be able to opt out of using it. Flutter SDK and MCU will not contain such an opt-out feature. The new **on** colors for containers in light mode, make them more color expressive, but it also reduces their contrast level and accessibility. We prefer them to have higher contrast.\n  5) A switch for using **Legacy monochrome seed behavior**. See package changes for an explanation of this feature. It is not recommended to turn this ON, but it is there if you need it for legacy seed behavior with monochrome input colors. The new default behavior for monochrome seed colors is much better, more intuitive and what it should always have been.\n\n\n- Added customizable error colors to the custom scheme. Only available when **Use Material3 error colors** setting is **OFF**, when using the custom scheme on **Input Colors** and **ColorScheme** settings panels.\n- Added using error color as a seed color for error tonal palette in the **ColorScheme** settings panel. The tonal palette now also supports using a custom error color to generate its tonal palette. \n- Added error color and error container color locking to the **ColorScheme** settings panel.  \n- Added code gen for custom error colors.\n\n\n- Added **ColorScheme** code generation for all the new `ColorScheme` colors introduced in Flutter 3.22.\n- Added showing the new Flutter 3.22 `ColorScheme` colors in the **Effective Colors** panel.\n- Added showing the new Flutter 3.22 `ColorScheme` colors in the **ColorScheme** settings panel.\n- Added showing the new Flutter 3.22 `ColorScheme` surface colors in the **Color Blends** settings panel.\n\n\n- Added support for using MCU and FSS based seed generated `ColorScheme` variants using `FlexSchemeVariant`.\n- Added code generation for the new MCU and FSS scheme variants.\n  - For MCU based variants it uses `FlexColorScheme.variant` API with `FlexSchemeVariant` and for FSS based variants it uses `FlexColorScheme.tones` API with `FlexSchemeVariant` and its `tones` getter. \n  - The `FlexTones` modifiers only show up on FSS based variants with `FlexColorScheme.tones` API, as they are not available when using the `FlexColorScheme.variant` API.\n- Added the FFS seed option \"Monochrome surfaces\" introduced in package **FlexSeedScheme** 3.0.0.\n\n\n- Added an **Apply ColorScheme to all Cupertino components** setting to the **Component Themes** settings panel\n  - It toggles setting `cupertinoOverrideTheme: const CupertinoThemeData(applyThemeToAll: true)` and generate code for it and applies the setting to the Playground app's theme as well.  \n- In the **Switch, Checkbox and Radio** settings panel, the **Switch** now has a platform adaptive theme setting for theming the Material `Switch` to look close to the iOS `CupertinoSwitch`.\n- On the surface **Color Blends** settings panel, you can now select a scheme color to use as the theme resulting **Scaffold Background** color. The selection is independent for light and dark theme mode.\n- Added separate controls and code gen for light and dark mode background color selection for the `BottomAppBar` on settings panel **BottomAppBar**.\n- Added divider color selection to **Dialogs** settings panel for the **DatePicker** divider color. Setting it to transparent will hide the divider in Material-3 mode, in Material-2 mode the Divider does not exist. Also added feature to allow selection of DatePicker header foreground color independently of the used background color. Previously it always used the contrast pair of the background color, which is still the default if you do not select a custom foreground color.  \n- Added the ability to change tab alignment in the **TabBar** settings panel.\n- In the **Floating Action Button** settings panel, added the ability to change the foreground color of FAB to something that is not its automatic on-color pair.\n\n- To **TextField** settings panel, added the ability to change the focused suffix icon color. The **TextField** also got controls for dense input decorator and custom content padding, as well as for using a platform adaptive border radius. It also has two new pre-made design examples. In addition to selecting Material-3 default and Playground defaults, you can now also use \"Colored outline\" and \"Dense, no focused border\" as design examples or as `TextField` starting configuration points.\n\n- To **AppBar** settings panel, added the **Center title** setting to control if the title is centered or not. This API has been available in FCS since v6, but not offered in the Playground, now it is in the Playground too.\n- To the **AppBar** settings panel, title foreground color, leading icon and actions icon color settings were added.\n- The **Chip** settings now include separate color for the `ChoiceChip (called Suggestion Chip in M3 design). The feature that blends the selected main overall Chip color was made optional. It is a useful feature due to the limited independent theme control over the Chips.  \n- The **Chip** settings panel now includes font size and padding controls.\n- The **ListTile** settings panel now includes a large number of theming controls for ListTile theming.\n- The **SearchBar** settings panel now includes theming controls for SearchBar and SearchView theming.\n- On the **Adaptive Theming** settings panel you can now also control the `MaterialTapTargetSize` setting.\n- The **Segmented Buttons** settings panel now includes a control for selected foreground colors for both `SegmentedButton` and `ToggleButtons`.\n- Added feature [#224](https://github.com/rydmike/flex_color_scheme/issues/224) that adds `Card.filled` and `Card.outlined` to widget showcase. They are also used in the \"**Card**\" settings\" panel for card presentation.\n\n \n- The Playground can now also show the used color tones numbers for MCU based generated dynamic color schemes, also when they use dynamically obtained tones and when e.g., contrast level is adjusted. This feature is computationally complex and quite expensive, but we thought it was worth it to show the correct palette color tones also for DynamicScheme variants.\n\n\n\n**CHANGE**\n\n- The optional staggered grid-based Playground UI was removed.\n  - The rationale for removing it is to simplify the app. \n  - The staggered grid view was originally included in the Playground for its \"example 5\" tutorial intent. It was used to demonstrate how the same widget panels could be used in a completely different app layout, for Flutter tutorial purposes. The UI was not so brilliant and way to heavy to use on web builds, at least if you opened up all panels. \n    - Did anybody use the staggered grid layout anyway? Let me know if you miss it. Just so I know, but it is not coming back :)\n- No longer generate any code for `useMaterial3: true` value. The FSS default is now `true` and we thus no longer explicitly need to add API code gen when the setting is **ON**.\n- The **Introduction** panel's content was updated.\n- The Playground defaults the replacement for `useTextTheme`, the `useMaterial3Typography` to null. This makes Material-2 and Material-3 mode use their respective mode-based typography by default. If you still make a Material-2 app, prefer using Material-3 typography and set it to `true`, like the Playground did before. Material-3 typography is much nicer than Material-2 typography. This is not a breaking API change, just a change in the default value used when you rest the Playground to its default values. Turn it **ON** in **TextTheme** settings, to get the same config as you did with a reset before. If you use Material-3, this Playground settings change has no impact on your theme result.\n- Updated the presentation of `Switch`, `Checkbox`and `Radio` on their settings panel.\n- Changed the name of the \"Theme colors\" settings panel to **Input Colors**. \n- Changed the name of the \"Surface blends\" settings panel to **Color Blends**.\n- Changed the name of the \"Component Themes\" settings panel to **General Settings**.\n- Changed the order of topic panels. The **General Settings**, **Adaptive Theming** and **Shape Radius** panels now come before the color panels.\n- The feature **Swap secondary and tertiary legacy colors in Material-3** on the **Input Colors** settings panel is now **OFF** by default. The settings info expand explains when it is preferable to use it.\n- The feature **Use TextField's InputDecorationTheme in picker dialogs** on the \"**Dialog**\" settings panel is now OFF by default.\n\n- Modified settings panel background and header colors, as well as theme selector buttons to use suitable new `ColorScheme` surface theme colors, instead of computing their own shades from theme colors.\n- Changed surface and on-color blends to default to 0. Blends are not **ON** by default anymore in Playground. The feature is still very cool and useful for many different design goals.\n- Adjusted the code gen for surface colors setting \"Main and container colors on color blending\" to handle the new `FlexSubThemesData.blendOnColors` default being `false` instead of `true`. The Playground still by default sets `blendOnColors` to `true` for dark mode and defaults to `false` for light mode. This is done to mimic seed generated `ColorScheme` behavior, when not using seed generated colors.\n- Update Material-3 default info for `BottomAppBar` to `surfaceContainer`.\n- Improved the `Chip` presentation, by having them in own wraps per type and a column that names the Chip type with both Flutter and Material-3 naming \n  - Flutter SDK ActionChip = Material-3 Assist Chip\n  - Flutter SDK FilterChip = Material-3 Filter Chip\n  - Flutter SDK InputChip = Material-3 InputChip\n  - Flutter SDK ChoiceChip = Material-3 Suggestion Chip\n- Improved `IconButton` presentation, by adding a text column explaining the type, as on the Chips panel.\n- Improved presentation of `Switch`, `Checkbox` and `Radio`, by using more orderly columns and spacing and explanation labels, similar style as on `Chip` and `IconButton`.  \n\n\n- The Playground default for the **TextField** settings panel is still using \"Outline\" and filled as default, not \"Underline\" and filled style like Flutter SDK does. The FCS API defaults to underline, only the Playground comes with a slightly opinionated nicer default. Playground **TextField** default, along with FCS API, it was changed to not using color on the unfocused border, like Flutter M3 and M2 default styles do. Making both Playground and FCS API less opinionated in its default values in this case. \n\n- In **General Settings**, the Playground by default turns **ON** the settings \"Use Material-2 style Divider in Material-2\", \"Tinted disabled components\" and \"Tinted interaction\". Corresponding to `FlexSubThemesData` for `useM2StyleDividerInM3`, `interactionEffects` and `tintedDisabledControls` being set to `true`. Their FCS API defaults are however `false`, to keep the API itself less opinionated. Before FCS v8, these API defaults were `true` as stated in breaking changes. The Playground thus keeps this past, already in API opinionated defaults, as its pre-configured defaults, but the defaults for the FCS API itself, in Material-3 mode, are much less opinionated now.\n\n- In **Navigation Rail** panel settings, the \"Labels when collapsed\" defaults to \"All items have labels\". This means that `navigationRailLabelType: NavigationRailLabelType.all` is used by default in Playground generated `FlexSubThemesData()` passed to `subThemesData`, thus applying what was API default before. When you create a new theme with the Playground, you get same style as before. If you migrate from V7 you will need to set `NavigationRailLabelType.all` in yur old theme to get the same Rail style, if you had not defined it explicitly before. \n\n- The **NavigationRail** settings panel got controls for selected and unselected label size, as well as selected and unselected icon size. The panel now also has settings for collapsed and expanded rail widths and destination group alignment.\n\n- The **NavigationBar** settings panel got controls for selected and unselected label size, as well as selected and unselected icon size.\n\n- The **BottomNavigationBar** settings panel got controls for selected and unselected label size, as well as selected and unselected icon size. The `BottomNavigationBar` animates their size transitions as it is intended to use different sizes for selected and unselected item. The `NavigationBar`na d`NavigationRail` do not animate their item size changes, but you can still use it.\n\n\n- Changed how ALL opacity sliders work. They now all work with default (null) color and opacity is also nullable. If the `SchemeColor` it is used on is null, it will use the default color and apply opacity on it. It is no longer required to select the same color as default to apply opacity anywhere.\n- Major internal refactor of all `Sliders` used in the Playground. Converted the Sliders to custom composed `SliderListTileReveal`, a combo convenience widget used for `Sliders` with a null default value. Also having separate labels for disabled and null default values, and a built info `ListTileReveal`.\n\n- Changed the style and speed of all popup menus. They are more compact with smaller font, and open under the ListTile you open them from, when there is room to do so. They also have no animation to open quickly and more desktop like, as this app is intended to be used primary on desktop. Their states now communicate the default for their settings better when FCS is used, as well as when FCS is disabled.\n  > **DETAILS:** The bulk of used popups components in the Playground are now using a shared a generic `EnumPopupMenu<T extends Enum>`, based on `ListTile` and `PopupMenuButton` that now supports nullable enums and has built-in support for null selection and disabled defaults. It also has built-in `ListTileReveal` for info expand reveals. There are still a few special case popups that have some specialized features like `ColorSchemePopupMenu` but it is based on the same design. It needs to be able to communicate a large number of default color values for its color default labels, depending on active theme state, so it supports things like `defaultLabel`, `defaultLabelDark`, `defaultLabelM2`, `defaultLabelDarkM2`, `defaultDisabledLabel`, `defaultDisabledLabelDark`, `defaultDisabledLabelM2` and `defaultDisabledLabelDarkM2`. This refactoring was also in preparation for adding more features, as it makes it easier to add enum based props. Sadly the refactor and migration of the Playground to use these components took a long time and delayed the release at least two weeks, maybe more. Some snafus in shown default value labels may also exist concerning colors, due to this refactor.\n\n- Updated the official Material-3 demo app in the Theme Simulator to a version with the same look as the latest official version. The updated version now also uses the demo's new Sliver-based cached scrolling. The version is still a fork, with some tweaks to make it work when embedded into the Playground simulator and getting its theme from the Playground and not inside the demo app. The fork also has a denser two-column layout with different breakpoints. This was done so that we in **portrait mode** can get two columns with a `NavigationRail` already on iPad Pro 11\" and the expanded Rail on iPad Pro 12.9\".\n\n- In the *ColorScheme* panel, we brought back the ColorScheme color hover that highlights its color source tone in the Tonal Palette above. This feature existed before, but started causing issues on WEB builds and was removed 16.3.2023. It has now been brought back, and we will test if it works better now. It is a nice feature to see where the color comes from in the palette.\n\n- The controls to test settings for platform adaptive responses are now hidden behind an expanding `ListTile`. This is used on every panel where the controls exist. It is intended to make the UI less cluttered, the controls are not used so often.\n\n**FIX**\n\n- Fixed [#188](https://github.com/rydmike/flex_color_scheme/issues/188) add info about theme simulator being an approximation.\n- Fixed [#200](https://github.com/rydmike/flex_color_scheme/issues/200) FAB config code for `fabSchemeColor: SchemeColor.secondary` selection was not generated.\n- Fixed [#222](https://github.com/rydmike/flex_color_scheme/issues/222) PersistentBottomSheetController's type in Example 5/Playground.\n- Fixed that Card was not showing the correct default border radius in Material-2 mode when using FCS.\n- Fixed that applying dialog elevation in the Playground app's own dark mode theme was missing.\n- Fixed that enum `FlexAdaptive.setting` value `FlexAdaptive.appleWeb` did not return `AdaptiveTheme.appleWeb` when selected, it returned `FlexAdaptive.apple`. This only impacted **simulation** of responsive themes for the Apple and Web response **in the Playground app**. Themes using this feature worked correctly. \n\n\n\n## 7.3.1\n\n**August 17, 2023**\n\n- FIX: Themes Playground: Update the in-app documentation of known Flutter issues to reflect changes brought by Flutter 3.13.\n- FIX: Changelog 7.3.0 typos and style corrections by @TahaTesser.\n\n## 7.3.0\n\n**August 16, 2023**\n\nThis release uses new features in Material-3 theming that are only available in Flutter 3.13 or later. It thus **requires** minimum **Flutter 3.13.0**. \n\nIn the next Flutter stable release after 3.13, Flutter will change the `ThemeData.useMaterial3` default from `false` to true. In other words, applications using FCS will get the Material-3 colors, text styles, and other visuals, by default. The `FlexColorScheme` API will then be following along with this breaking change. In this release the `FlexColorScheme` API `useMaterial3` still defaults to `false`. The **Themes Playground** app has for quite some time already defaulted to setting the value to `true`. Which is also already the case in Flutter when you create a new application with `flutter create`.  \n\n### PACKAGE\n\n**NEW**\n\n* To `FlexSubThemes` in `buttonTheme` **added** bool `alignedDropdown`.\n* To `FlexSubThemesData` **added** bool `alignedDropdown`. Setting it to true improves the style of the `DropdownButton` and the `DropdownButtonFormField`. They no longer expand outside the width of the parent dropdown button but are kept size aligned with it.\n  \n \n* To `FlexSubThemes` in:\n  - `chipTheme` **added** TextStyle `secondaryLabelStyle`\n  - `dialogTheme` **added** TextStyle `titleTextStyle` and `contentTextStyle`\n  - `floatingActionButtonTheme` **added** TextStyle `extendedTextStyle`\n  - `menuButtonTheme` **added** TextStyle `textStyle`\n  - `snackBarTheme` **added** TextStyle `contentTextStyle`\n  - `timePickerTheme` **added** TextStyle `dayPeriodTextStyle`, `dialTextStyle`, `helpTextStyle`, and `hourMinuteTextStyle`\n  - `toggleButtonsTheme` **added** TextStyle `textStyle`\n\n* The `TextStyle` additions above, to mentioned `FlexSubThemes`, do not yet bring any new features usable via `FlexColorScheme` theming APIs. They are a preparation for adding more component `TextStyles` to `FlexSubThemesData`. This in turn, will enable more direct `TextStyle` theming via `FlexColorScheme` API without using `copyWith` to override produced `ThemeData`. \n\n\n* As planned in previous versions, made the `FlexSubThemesData.useInputDecoratorThemeInDialogs` apply also to `DatePickerDialog` and not only to `TimePickerDialog`. This feature is not optimally supported by the framework. The current implementation has severe limitations. See more info in [PR #128950 comment](https://github.com/flutter/flutter/pull/128950#issuecomment-1657177393). For more information about the differences in how `InputDecorationTheme` behaves in different component themes, read the proposal **\"Make InputDecorationTheme usage in components consistent\"** in [issue #131666](https://github.com/flutter/flutter/issues/131666).\n\n**CHANGE** \n\n* **Minor style breaking changes:**\n\n - `FlexSubThemes.dropdownMenuTextStyle` now default to `TextTheme.bodyLarge` if not defined. Previously it used Flutter SDK default `TextTheme.bodyLarge`, which is a poor design default as the style does not fit with default style `bodyLarge` used as default style in `TextField`in Material-3 mode. See [issue #131350](https://github.com/flutter/flutter/issues/131350) that contains a mention of this style deviant. In Jetpack Compose, the `DropdownMenu` and its `TextField` part correctly defaults to using `bodyLarge`, this is thus assumed to be the correct spec wise. The issue of wrong default text styles in Flutter menus is further discussed in [issue #131676](https://github.com/flutter/flutter/issues/131676). FlexColorScheme will not internally correct the wrong default `TextStyle` on menu items, it will however change to follow the default when Flutter stable does. The difference in the `DropdownMenu` text input field was however significant enough to warrant a change already before the fix lands in Flutter stable.\n\n**FIX**\n\n* Fixed the `FlexSubThemes.checkboxTheme` that broke due to an unexpected breaking change in Flutter 3.13 caused by PR [#125643](https://github.com/flutter/flutter/pull/125643). The breaking change is discussed further in [issue #130295](https://github.com/flutter/flutter/issues/130295). The fix to the checkbox theme incorporates the new behavior to keep its custom styling working as before and expected.\n\n* Fixed `useInputDecoratorThemeInDialogs` not working for some properties in the `InputDecorator`, when the value was null or `false`, where some properties in the `TextField`s in the `TimePickerDialog` did not revert to default styles. Now they do, but via defined values to mimic the default Material-3 style, as that is the only way to get back to it when a very custom `themeData.inputDecoratorTheme` is being used.\n\n### THEMES PLAYGROUND\n\n**NEW**\n\n* The **PopupMenu and Dropdowns** panel got a setting for older Material-2 based `DropdownButtonFormField` and `DropdownButton` to set the new alignment property, which is an ancient theming property in the old `ButtonThemeData` that was used by deprecated and removed Material Buttons, but the theme is still used by these buttons. \n\n* On the TextField panel, added a feature to set the input decoration style back to FlexColorScheme's own defaults.\n\n**CHANGE**\n\n* Harmonized custom color activation settings on **Theme Colors** and **Seeded ColorScheme**.\n\n* Removed old switch in custom colors in dark mode, that was used to enable using input scheme color as own seed colors in dark mode when using custom colors. For simplicity, the custom dark mode colors have been used directly as seed colors in a few releases in the Playground already. The control was an old left-over with no function anymore.\n\n* The global themed input decorator usage is now on by default for `TimePickerDialog` and `DatePickerDialog`. This is the only style currently supported for `DatePickerDialog` in Flutter, so it makes sense to keep it on by default. Turning it OFF for now only removes the custom, input decorator style from the `TimePickerDialog`. Despite the new feature in Flutter SDK, it cannot be removed from the `DatePickerDialog`. This is discussed in [PR #128950 comment](https://github.com/flutter/flutter/pull/128950#issuecomment-1657177393). Additional info is also available in Flutter [issue #131666](https://github.com/flutter/flutter/issues/131666).\n\n**FIX**\n\n* Fixed the old default color info for the toggles Switch, Checkbox and Radio, that are shown when FlexColorScheme is disabled as default values in Material-2 dark mode. They have been updated in Flutter SDK to `ColorScheme.secondary` color and are no longer not the horrid dark mode teal color. This default color info, shown when FlexColorScheme is disabled in the **Themes Playground**, had not been updated for the dark Material-2 mode Switch, Checkbox and Radio colors. \n\n\n## 7.2.0\n\n**July 20, 2023**\n\n### PACKAGE\n\n**NEW**  \n\n* Added boolean property `switchThumbFixedSize` to `FlexSubThemesData`. When set to true, the Material-3 `Switch` themed thumb size is same size when `Switch` is ON and OFF. When the property value is false or undefined, it retains its default behavior and the thumb is smaller when the switch is OFF. Only has any impact in Material-3 mode.\n* Added `FlexAdaptive` property `adaptiveRemoveNavigationBarTint` to `FlexSubThemesData`. It is used to control platform adaptive elevation tint removal on the `NavigationBar` theme.\n* Added `textSelectionTheme` to `FlexSubThemes`, used to make a `TextSelectionThemeData`.\n* Added properties `inputCursorSchemeColor`, `inputSelectionSchemeColor`, `inputSelectionOpacity`, and `inputSelectionHandleSchemeColor`, to `FlexSubThemesData` used to configure `TextSelectionThemeData` as a part of `FlexColorScheme.subThemesData`.\n* Added a new feature that enables platform adaptive Material ink selection via `adaptiveSplash` a `FlexAdaptive` property, and the `FlexSplashType` values `splashType` and `splashTypeAdaptive` in `FlexSubThemesData`.\n* FlexColorScheme got the `splashFactory` property, which can be used to override any splash type setting in `FlexSubThemesData`. This addition also removes the need to do a copy with on `ThemeData` to provide a custom `splashFactory`. Prefer using the `FlexSubThemesData` properties `splashType` and `splashTypeAdaptive` to control the selection of used ink factory together with `adaptiveSplash`, unless you have written a custom ink factory that you want to use, in which case using the `splashFactory` override is appropriate.\n* New feature that enable platform adaptive theming of border radius on dialogs via `adaptiveDialogRadius` a `FlexAdaptive` property and double `dialogRadiusAdaptive` in `FlexSubThemesData`.\n* Added tinted disable support when `FlexSubThemesData.tintedDisabledControls` is `true` to `FilledButton` and `FilledButton.tonal`. They have the same disabled style when not tinted, so we can do the same to their tinted variants. Even if we still cannot theme them to have different themed colors when enabled, due to [issue #118063](https://github.com/flutter/flutter/issues/118063), we can still theme their disabled state with tint when the option is used.\n* Added tinted disable support when `FlexSubThemesData.tintedDisabledControls` is `true` to `IconButton`, `IconButton.filled`, `IconButton.filledTonal` and `IconButton.outlined` foreground colors. They have the same disabled foreground style when not tinted, so we can do the same to their tinted foreground color variants. We still cannot theme them to have different themed background colors when disabled, or at all when enabled, due to [issue #118063](https://github.com/flutter/flutter/issues/118063). We can only theme their disabled foreground color state with tint when the option is used.\n\n**CHANGE**\n\n* Updated to use version 1.4.0 of FlexSeedScheme offering two new `FlexTones` and extended tonal palette.\n\n* **Minor style breaking changes:**\n\n* Removed elevation tint impact of general `FlexSubThemesData.adaptiveRemoveElevationTint` setting, from the `NavigationBar` component. It instead has its own setting in `FlexSubThemesData.adaptiveRemoveNavigationBarTint`, that can be used independently of the general tint removal setting. This was done since it may be preferred to not remove the elevation tint from the `NavigationBar`, even when otherwise doing so on selected platforms.\n* In Material-2 mode, when not using a component theme, `ThemeData.textSelectionTheme` it now gets a default `TextSelectionThemeData()` and its themed style defaults to SDK defaults. Enable and use component themes and its new theming features to style it further.\n  * In previous versions in Material-2 mode, text selection handles used `Theme.of(context).primaryColorDark`, even when component themes where not enabled. They still do by default, but only when component themes are enabled. \n* In both Material-2 and Material-3 mode `bottomNavigationBarElevation` in `FlexSubThemesData` and `elevation` in `FlexSubThemes.bottomNavigationBar` when undefined, now default to elevation 3, giving the `BottomNavigationBar` a default elevation of 3 when using FlexColorScheme.\n  * Previously default elevation was zero. Flutter SDK defaults to 8. The FlexColorScheme opinionated default value was changed to 3 to make it equal to the default elevation of `NavigationBar` in Material-3 mode, so that the bottom navigators share same default elevation when using FlexColorScheme. As before, you can adjust the elevation as needed with the API and in the Themes Playground.\n* In Material-2 mode `navigationBarElevation` in `FlexSubThemesData` and `elevation` in `FlexSubThemes.navigationBarTheme` when undefined, now default to elevation 3, giving the `NavigationBar` a default elevation of 3 in Material-2 mode when using FlexColorScheme.\n  * Previously default elevation was zero. Flutter SDK defaults to 0. The FlexColorScheme opinionated default value was changed to 3 to make it equal to the default elevation of `NavigationBar` in Material-3 mode, so that the bottom navigators share same default elevation when using FlexColorScheme. As before, you can adjust the elevation as needed with the API and in the Themes Playground.\n* In Material-2 mode, `bottomAppBarElevation` when undefined, now also remains undefined in `FlexSubThemes.bottomAppBarTheme` causing default elevation in Material-2 mode to become 8 like in the SDK default for Material-2. \n    * Previous default used same elevation as `AppBar`, when `bottomAppBarElevation` was undefined, or 0 if `AppBar`'s elevation was also undefined. The rationale for removal of this default behavior is to start cleaning out opinionated behavior that no longer makes sense to keep around, especially since eventually Material-2 mode is going away in Flutter. \n    * The default for Material-3 mode is unchanged, using elevation 3, via SDK defaults when undefined.\n* In Material-2 mode, `ElevatedButton`, `FilledButton`, `FilledButton.tonal`, `OutlinedButton`, `TextButton` and `ToggleButtons` now default to border radius 40 dp. Previously they defaulted to 20 dp. Their style is intended to match the used Stadium border design in Material-3, which is still the default in Material-3 mode. When using very tall buttons, the 20 dp default value was not enough to keep the buttons looking Stadium shaped as intended in FCS Material-2 mode.\n\n\n**FIX**\n\n* Fixed that `TextSelectionThemeData` did not automatically use colors that matched and followed `subThemes.inputDecoratorSchemeColor` when it was modified and text selection colors were not explicitly defined. The text selection, cursor and text selection handles should follow the input decoration's base color by default when they are not defined separately. Defining text selection colors was not possible before version 7.2.0, but defining input decoration colors was, but text selection remained using primary. Now they by default follow the input decoration color, but can also be separately defined via new features in version 7.2.0.\n  * **Known limitation**: Text selection handles on iOS platform cannot be changed with a theme from `primary` color. So on iOS their themed color is always `colorScheme.primary`. The text selection color and cursor color do follow the theme also on iOS.\n* Fixed `useFlutterDefaults` when elevation is null in `FlexSubThemes.bottomNavigationBar` not using Flutter SDK default elevation of 8.\n* Added a built-in theme fix to make the elevation tint change in the `AppBar` animate when it changes. Based on Material spec and observed native Android behavior and compose behavior, the `AppBar` color change when it is scrolled under should animate. Flutter Material-3 apps do not do this, the color change is instant. Discovered a theme workaround that makes it animate. This is now always used in FCS themes until Flutter includes its own fix for it.\n* The `FlexSubThemes.menuButtonTheme` and the `MenuButtonThemeData` it makes, got a `style` value, where `ButtonStyle.animationDuration` is always `Duration.zero`. This solved the issue reported in [issue #123615](https://github.com/flutter/flutter/issues/123615). Consequently, there is no need for a fix for the issue, since it could be solved with a theme property.\n\n\n### THEMES PLAYGROUND\n\n**NEW**\n\n* In the **Switch Check Radio** panel, the `Switch` got a setting to control if thumb is fixed sized or not.\n* The `NavigationBar` got its own setting for elevation tint removal in light and dark mode.\n* Introduction text updated. New information about Material-3 design becoming the default in Flutter SDK soon added, and that Material-2 will be deprecated.\n* Added text selection theming to the **Text Field** panel. By default, cursor color, text selection color and text selection handles, default to following the input decorator default color or its selected color. The cursor color, text selection, and text selection handle colors, can also be overridden and defined separately. These settings for light and dark mode, have their own property values in the Playground.  \n* Added support for selecting a custom ink splash effect and another custom platform adaptive splash effect on selected other platforms. \n* Added support for configuring the used VisualDensity. When using mock platform setting in the Playground, it also affects the result of used setting when `VisualDensity.adaptivePlatformDensity`, `FlexColorScheme.comfortablePlatformDensity` or default undefined value, that falls back to `VisualDensity.adaptivePlatformDensity`, are used. \n* Added support for selecting and using `FlexTones.candyPop` and `FlexTones.chroma`.\n* Added support for making any seed strategy use tone 100 (white) or tone 0 (black) as resulting surface and background tones.\n* Added an option to show the new extended tonal palette tones to the seeded color scheme panel.\n* Shape and radius now have their own theming topic panel, removed radius from **Component Themes** topic.\n* Add adaptive border radius setting to the Dialogs panel. \n* Add TimePicker border radius override value setting to the Dialogs panel.\n* Add DatePicker border radius override value setting to the Dialogs panel.\n* Added a switch to show TextStyle details to TextTheme presentations.\n* Added font NotoSans Medium (W500) to assets.\n* On theme showcase and icon button panels, show both tappable and toggleable `IconButton` styles.\n* Theme topic selector uses a group color on icons and selected item. The colors are fixed semantic colors, but the colors are Material-3 harmonized to active theme surface tint color. This makes them fit nicely when the overall color theme of the app changes. It is also a nice additional demo of theme extensions with many colors that are harmonized. The concept is the same as the one used on the code highlighter colors earlier. \n\n\n**CHANGE**\n\n* The onColor blend-level and on onMain setting are no longer disabled when using seeded ColorScheme. Rationale: If some colors are locked to use custom colors, using onBlend level has an impact on their contrasting colors and should be allowed in the Playground. The API could use it before too, but Playground could not, now it can.\n* Changed the order of theming topic panels. All color and surface related topic panels are now before component theme panels. Theme settings topic panels have been split into more discrete topics and have a new order.\n* Changed the order of components and labels on many theme topic panels.\n* The apps included in the **Theme Simulator** now all extend content behind their app bars and bottom navigation. This allows themed opacity settings on app bar and bottom navigation to become observable in the simulated apps.\n* The Shop app in the **Theme Simulator** received some style updates to use more theme-dependent styling, like Card as containers for shop items. \n\n**FIX**\n\n* Fixed allowing elevation changes of `BottomNavigationBar` and `NavigationBar` when `useFlutterDefaults` is true (ON).\n* Fixed allowing opacity usage on `NavigationBar` when default undefined background color is used. \n\n\n**POSTPONED**\n\n* The new Squircle and platform adaptive shape selection features were postponed. They may arrive later this year in version 7.3 or a later release. It is pending more investigation into the best choice concerning correct shapes and potential performance issues they might come with.\n\n\n## 7.1.2\n\n**May 17, 2023**\n\n### PACKAGE\n\n**FIX**\n\n* SubThemes ElevatedButton in Material-3 mode, when using `elevatedButtonSecondarySchemeColor` and there was no value defined on `elevatedButtonSchemeColor` it resulted in wrong color being used as default for `elevatedButtonSchemeColor`. Issue and test fixed.\n\n**CHORE**\n\n* Updated Android runner included for all the examples. The previous one no longer worked with Flutter 3.10 and its used Kotlin version. With included updated version, the examples can be built as Android apps again.\n\n\n## 7.1.1\n\n**May 15, 2023**\n\n### PACKAGE\n\n**FIX**\n\n* Fixed regression issue where custom a `textTheme`'s color is no longer applied. \n  * See issue [#151](https://github.com/rydmike/flex_color_scheme/issues/151). \n  * The issue was introduced in version 7.0.0, when adding a feature that provided automatic correct default contrast text color for **GoogleFonts**, when a default `GoogleFonts` and its `TextTheme`, like `GoogleFonts.notoSansTextTheme()` is used in `textTheme` or `primaryTextTheme` in `FlexColorScheme`. \n  * The `GoogleFonts` and its  `textTheme` color always defaults to the color from Material-2 mode default light mode `ThemeData.light().textTheme`. This when used in `ThemeData` forces users to assign correct Material-2/Material-3 color and `textTheme`/`primaryTextTheme` contrast color, to all its styles, whenever used in a situation where the default is light theme mode Material-2 color is the wrong color. The default contrast color is basically only correct for a light theme when using Material-2. For anything else, it is incorrect.\n  * FCS version 7.0.0 got rid of the need to make such a correction assignment, but it also incorrectly disabled using custom colors used in any custom `TextTheme`.\n  * The applied FIX keeps the desired \"no need to give correct contrast color\" to a default **GoogleFonts** `TextTheme` in **FlexColorScheme** and also allows making custom colored text custom text themes.\n  * The FIX is a bit involved, it also led to an idea that maybe `GoogleFonts`, should just keep the font color default as null, and let Flutter's default Theme behavior handle the assignment of correct color for the Material-2/Material-3 mode and light/dark theme mode, using each mode's default contrast color, for each style in the `TextTheme`. See issue [GoogleFonts #401](https://github.com/material-foundation/flutter-packages/issues/401) for more info on this.\n  * Tests added for the regression and for the new `GoogleFonts` default `TextTheme` being used and nulling its colors, so they get correct Material-2/Material-3 style contrast colors in both light and dark mode and for both `textTheme` and `primaryTextTheme`. \n\n\n### THEMES PLAYGROUND\n\n**FIX**\n\n* Fixed the code gen for `useTextTheme` setting to always generate code for setting's value in Playground code gen when it is not null. When it is undefined or null, it means that the `TextTheme` follows the Material-2/Material-3 specification mode default `TextTheme` and `Typography`. In previous versions, the code setting for `useTextTheme` only showed up in the generated code, when it was necessary to produce the viewed result. If the Material-2/m3 mode default produced the same result, the setting was not added to the generated API config. This may be confusing. It is clearer to always show it in code gen when it is set to a none null value. See discussion in repo [Q&A #150](https://github.com/rydmike/flex_color_scheme/discussions/150).\n\n\n## 7.1.0 \n\n**May 12, 2023**\n\nFlexColorScheme v7.1.0 supports new theming features in Flutter 3.10, it thus requires minimum Flutter 3.10 and Dart 3.0. \n\n### PACKAGE\n\n**NEW**\n\n* Added support for \"bring shadows back\" adaptive theming feature to `BottomAppBar` and `BottomSheet`.\n* Added `datePickerTheme` to `FlexSubThemes`.\n* Added properties `datePickerDialogRadius` and `datePickerHeaderBackgroundSchemeColor` to `FlexSubThemesData`.\n\n**CHANGE**\n\n- Updated to use minimum `flex_seed_scheme ^1.3.0`. This version, no longer depends on `material_color_utilities`, thus avoiding all version issues and conflicts when Flutter changes what breaking version of `material_color_utilities` it uses on different channels and versions.\n\n### THEMES PLAYGROUND\n\nThemes Playground 7.1 for FlexColorScheme 7.1 can be found [here](https://rydmike.com/flexcolorscheme/themesplayground-v7-1).\n\n**NEW**\n  - Added selection of themed header color scheme color for the DatePickerDialog on the Dialogs panel.\n  - Added showing SearchBar with SearchView to the AppBar panel.\n  - Added showing SearchBar with SearchView to the Widget Showcase.\n\n**UPDATE**\n  - Reviewed and updated status of all known theming issues in info expands.\n  - The SKIA **canvaskit** renderer is again being used to build all the web examples, including the **Themes Playground**.\n  - Updated all examples to use new `ListenableBuilder` instead of `AnimatedBuilder` where appropriate.\n\n\n## 7.0.5\n\n**Apr 29, 2023**\n\n- **Fix:** [#143](https://github.com/rydmike/flex_color_scheme/issues/143) Glitches in highlighting effect on mouse hover over `FlexThemeModeSwitch` and `FlexThemeModeOptionButton`.\n\n## 7.1.0-dev.1\n\n**Apr 24, 2023**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_1_0_dev_1.md)\n\n## 7.0.4\n\n**Apr 22, 2023**\n\n* **Package**\n  * No changes.\n* **Themes Playground**\n  * **FIX:** AppBar setting for using platform adaptive scroll under elevation tint removal was not working correctly. UI bug in Playground only, no package impact.   \n\n## 7.0.3\n\n**Apr 19, 2023**\n\n- **Fix:** [#136](https://github.com/rydmike/flex_color_scheme/issues/136) default background color regression on `FlexThemeModeSwitch` and `FlexThemeModeOptionButton`.\n\n## 7.0.2\n\n**Apr 16, 2023**\n\n- **Chore:** Changed to using `flex_seed_scheme: ^1.2.4` that depends on  `material_color_utilities` with version constraint set to `>=0.2.0 <0.4.0` from `^0.2.0`.\n  - This change enables the package to be used on current Flutter **stable** 3.7 versions, as well as the latest 3.10.x versions on channels **beta** and **master**. It will also work with the next stable Flutter release after 3.7.\n\n## 7.0.1\n\n**Apr 6, 2023**\n\n* **Package**\n  * No changes.\n* **CHANGE: Themes Playground**\n  * Less chatty UI\n  * Revised media size breakpoints. \n  * Vertical color selector mode. \n  * More compact UI options for smaller laptop displays and tablets.\n\n## 7.0.0\n\n**Apr 2, 2023**\n\nThis is a major update to the **FlexColorScheme** package and a significant leap for the companion app **Themes Playground**. For a detailed list of all changes, please refer to the incremental log from its development releases linked below.\n\n* [Changes from 6.1.2 to 7.0.0-dev.1](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_1.md)\n\n* [Changes from 7.0.0-dev.1 to 7.0.0-dev.2](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_2.md)\n\n* [Changes from 7.0.0-dev.2 to 7.0.0-dev.3 (final beta)](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_3.md)\n\n* Changes from 7.0.0-dev.3 to 7.0.0\n  - Package: Only tests and documentation additions and updates.\n  - Playground: Label and layout corrections.\n\nThe [Themes Playground](https://rydmike.com/flexcolorscheme/themesplayground-v7/) app built for this release is unfortunately not a SKIA renderer build, it is using the HTML renderer. This makes it less performant than the app would otherwise be. Additionally, scaled content, like the **Themes Simulator** panel in the **Playground**, is also fuzzier than it would be with the SKIA renderer. Due to an issue in Flutter stable 3.7.0 to at least 3.7.9, builds made with the SKIA renderer performs very poorly and crash quickly. For more information, see Flutter [issue #122189](https://github.com/flutter/flutter/issues/122189). A new build using the same package version will be made later and released when fixes for the SKIA issues are available on the Flutter stable channel.\n\n## 7.0.0-dev.3\n\n**Mar 18, 2023**\n\nThis is **the final beta v7** release before **stable v7**. There will be no new features or API changes in the FlexColorScheme package from this version to stable version 7.0.0. The only changes to stable will be potential bug fixes, typo corrections, API doc comment improvements and adding more tests.\n\nThe companion app **Themes Playground**, may get label improvements plus spelling and grammar corrections. Layouts in it may also be modified and improved as needed. It will not get any new features, but it may of course receive bug fixes.\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_3.md)\n\n## 7.0.0-dev.2\n\n**Jan 25, 2023**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_2.md)\n\n## 7.0.0-dev.1\n\n**Jan 23, 2023**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_7_0_0_dev_1.md)\n\n**Jan 23, 2023**\n\n## 6.1.2\n\n**Dec 26, 2022**\n\n**FIX**\n\n- Fix for issue [#106 bottomSheetModalBackgroundColor not correctly set](https://github.com/rydmike/flex_color_scheme/issues/106). Thanks [mcssym](https://github.com/mcssym) for the fix [PR #107](https://github.com/rydmike/flex_color_scheme/pull/107).\n\n## 6.1.1\n\n**Nov 22, 2022**\n\n**FIX**\n\n- Themes Playground (Example 5): Fixed scroll issue in page view mode on Web builds. Only examples related, no package impact.\n- API doc updates.\n\n## 6.1.0\n\n**Nov 20, 2022**\n\n**FlexColorScheme** version 6.1.0 contains many new features, more component themes and configurable properties. It improves seed-generated color scheme capabilities by adding more pre-configured seed generation configurations and color contrast accessibility options. \n\nA criticism of Material-3's color system and seed-generated color schemes, is that using colored contrasting colors may be less accessible. FlexColorScheme offers a way to enable in-app modification of its seed-generated color schemes. Any seed generation configuration can optionally return results with plain white and black contrasting on colors. This can be applied separately for main on colors and on surfaces.\n\nThe **Themes Playground** application has been updated to include most of the new features. It has been improved to make it easier to discover some of its previously existing features, like using custom colors in the Playground to define your own theme. \n\n**NEW**\n\n* Scaffold background color can now be used as the themed AppBar background color. The enum `FlexAppBarStyle` that is used by property `appBarStyle` got a new value `scaffoldBackground` that enables this. This is useful for matching the AppBar color exactly to the Scaffold background color, when Scaffold background uses different surface blends than the theme's `ColorScheme` surface or background colors.\n* Added properties `materialTapTargetSize` and `pageTransitionsTheme` to `FlexColorScheme` and `FlexThemeData`. They are only convenience properties to avoid having to use a `copyWith` on FlexColorScheme produced `ThemeData`, to define them.\n* Property `swapLegacyOnMaterial3` in `FlexColorScheme.light/dark` and `FlexThemeData.light/dark` allows for better automatic adjustment of built-in scheme colors to the Material-3 color-system. It applies to color schemes that were originally designed for Material-2, when using the Material-3 mode with or without seed-generated ColorSchemes. \n  - Setting `swapLegacyOnMaterial3` to `true`, will when `useMaterial3` is `true`, swap the built-in scheme colors `secondary` and `tertiary` and also their container colors. \n  - This only happens for built-in schemes where this swap makes the color design **more compatible** with the intended design and usage of the `secondary` and `tertiary` colors in Material-3 color system.\n  - To implement this, the class `FlexSchemeColor` has a new boolean meta-data property called `swapOnMaterial3`, that has been defined to be `true`, if the `FlexSchemeColor` it defines, benefits design compliance wise from swapping its `secondary` and `tertiary` colors when using Material-3.\n  - For backwards compatibility the `swapLegacyOnMaterial3` is `false` by default, but it is recommended to always set it to `true`. The flag has no impact when using Material-2. \n  - The `swapLegacyOnMaterial3` flag can also be toggled in the **Themes Playground**, it is on by default there.\n  - When the swap is done for a `FlexSchemeColor`, it is done before any other built-in scheme modifier properties, including `swapColor` and `usedColors`. \n* The `FloatingActionButton` can now be set to always be circular, also in Material-3 and without assigning a high-radius setting. If you always want a circular FAB, and stadium on extended FAB, then set `fabAlwaysCircular` in `FlexSubThemesData` to `true`, and FAB stays circular regardless of if you use Material-2 or Material-3, or how you modify the global default border radius. You could get this effect before too by setting a very high themed radius on the FAB, but this is more convenient.\n* Additional new `FlexSubThemesData` properties:\n  - `Slider` theme can now be adjusted via `FlexSubThemesData` properties `sliderBaseSchemeColor`, `sliderValueTinted` and `sliderTrackHeight`.\n  - The `chipSelectedSchemeColor` was added as themed background color, it is used by Chips that are selectable. The `chipDeleteIconSchemeColor` can be used to theme the \"Delete\" icon color on Chips. While adding these features, some Flutter Material-3 Chip spec and theming issues were found, [see issue #115364](https://github.com/flutter/flutter/issues/115364) for more information.\n  - Switch got a `switchThumbSchemeColor` property, to control the thumb color separately. A switch custom color theme was prepared for Material-3 `Switch`, which is not yet available in Flutter 3.3.\n  - `Tooltip` theme now has `FlexSubThemesData` properties `tooltipRadius`, `tooltipWaitDuration`, `tooltipShowDuration`, `tooltipSchemeColor` and `tooltipSchemeColor`.\n  - The `bottomSheetBackgroundColor` and `bottomSheetModalBackgroundColor` can be used to theme the background color of the `BottomSheet`.\n  - Use `navigationBarElevation` to adjust the themed elevation of `NavigationBar`.\n  - Use `popupMenuElevation` and `popupMenuSchemeColor` to further quick theme the `PopupMenuButton`.\n  - The `outlinedButtonBorderWidth`, `outlinedButtonPressedBorderWidth`, `toggleButtonsBorderWidth`, `inputDecoratorBorderWidth` and `inputDecoratorFocusedBorderWidth` define the themed outline border thickness in different states of their respective components. These properties use previously existing properties `thinBorderWidth` and `thickBorderWidth` as their defaults. Resulting in that, the new properties are API backwards compatible, and they have shared global default settings. The new part is that you can now define themed outline border thickness separately for these components.\n  - The `elevatedButtonTextStyle`, `outlinedButtonTextStyle` and `textButtonTextStyle` were added to be able to theme `TextStyle` on `ElevatedButton`, `OutlinedButton`, `TextButton`. These are convenience properties to allow different text styles on buttons without having to use `copyWith` on the overall `ThemeData` and its button component themes to modify the text styles, often sizes. \n    - These properties do not offer any simplification over standard `ThemeData` and its button themes. The current version does not include adjusting them in the Themes Playground. Adding all possible usage of them is currently not in the scope of the Playground app. However, button font size changes may be added later as a usage example of these properties. These properties are using the tricky `MaterialStateProperty`, that have so far been avoided in this flattened simplified theming. It was used for the benefit of offering the text styles as `ThemeData` pass along properties. Modifying the `ButtonStyle` theme using `copyWith`, is a bit more involved than for other component themes, with these properties you can customize the button text style using `FlexSubThemesData` properties instead. If you need to modify the `FlexColorScheme` created buttons themes even further for some not included properties, an example of how to do that can be found [here](https://github.com/rydmike/flex_color_scheme/discussions/92).\n\n**CHANGE**\n\n* FlexColorScheme now uses **FlexSeedScheme** version 1.1. It includes the following new features and changes:\n  - Features that enabled implementation of just black and white seeded **on** colors. \n  - Additional `FlexTones`, the `FlexTones.oneHue` and `FlexTones.vividBackground`.\n  - See [FlexSeedScheme on pub.dev](https://pub.dev/packages/flex_seed_scheme/changelog) for more information.\n* In `FlexSubThemesData` all component controlling properties except booleans, are now nullable and null by default. FlexColorScheme made component themes still default to same values as before when assigning a default `FlexSubThemesData()` to `FlexColorScheme.subThemesData`. The properties are nullable to enable using different defaults in FlexColorScheme made component themes for Material-2 and Material-3 modes.\n* **Style breaking:** Changed component themes `thinBorderWidth` to default to 1.0. It was 1.5 before. This is a style breaking change from previous thin outline style in FlexColorScheme.\n  - Using fractional values may cause artifacts on monitors using native resolution where 1 dp = 1 physical display pixel (common on desktop PC/Linux monitors). We see the new default as a design FIX to avoid such issues with default settings. You can still set `thinBorderWidth` to 1.5, to get the same result as previous default theme.\n* **Style breaking:** When opting in on opinionated component themes, the `Chip` style is slightly modified from previous versions. The new opinionated FCS default style is more distinct than before and more aligned with styling borrowed from the Material-3 mode `Chip` design. The `deleteIconColor` now defaults to `onSurface` instead of `primary` and it can be defined to be any `SchemeColor` based color. The Chips revised style, look better than before. Using Material-3 and with it themed `Chips` is also fully supported, also customizing color on selected state of selectable **Chips** is available. Color-tinted chips are also available as before. Be aware though that Material-3 theming in the current 3.3 version of Flutter has some limitations. If you assign a custom color to selected chips, the disabled state of Chips can no longer conform, to Material-3 spec of disabled selected Chips. \n  - For more information, [see issue #115364](https://github.com/flutter/flutter/issues/115364). Note that if you deviate on Chips from its expected designed background brightness, which is now possible to do for **selected** Chips with the new theming capabilities in the Playground. There is no way via theming to set correct text and icon contrasting brightness for selected Chips that require dark text and icons on bright Chips in dark theme mode. Wise versa for light theme mode, setting light text on dark selected Chips in light mode, is also not possible. This limitation applies to selected `FilterChip` and `InputChip`, there is simple not enough theme properties in `ChipTheme` to support this. Due to this limitation, we recommend only using Chip theme designs that work with dark text in light mode, and light text in dark mode.\n* **Style breaking:** When opting in on opinionated component themes, the `BottomSheet` background color now defaults to theme's ColorScheme `surface` color, in both Material-2 and Material-3 mode. Previously it defaulted to the `Material`'s default color `theme.canvasColor`, that typically equals ColorScheme `background`. The new default follows upcoming Material-3 default for `BottomSheet`. The style change is minor, in most designs the color values are the same. If needed you can put it back to theme `background` color with:\n\n```dart\n    final ThemeData themeLight = FlexThemeData.light(\n      subThemesData: const FlexSubThemesData(\n        bottomSheetBackgroundColor: SchemeColor.background,\n        bottomSheetModalBackgroundColor: SchemeColor.background,\n      ),\n    );\n```\n\n**FIX**\n\n* **Temporary Material-3 Flutter SDK GAP fixes** \n  - The FlexColorScheme Material-3 mode, component themed `BottomSheet` gets a manually applied elevation tint to keep it distinguishable from the background. This temporary fix works despite Material tint elevation being broken in Flutter 3.3 and earlier, when `useMaterial3` is true. \n  - Same temporary Material-3 fix is also used on themed `PopupMenuButton`. \n  - Unfortunately, elevation-based shadow cannot be added to any of them in the Material-3 mode. It will have to wait for actual implementation of the components and their Material-3 themes with support for it.\n  - The Material-3 supporting components and themes for `BottomSheet` and `PopupMenuButton`, already exist in the Flutter master channel, they will probably land in next new stable release after Flutter 3.3. \n  - These temporary Material-3 fixes, make it possible to use the `BottomSheet` and `PopupMenuButton` when opting in on Material-3. Since shadow elevations are still not working for them in Material-3 mode, it is not perfect, but much better.\n  - The reasons why these issues exist are because these components have not yet been migrated to Material-3 in Flutter 3.3, plus the combination of this `Material` elevation [issue #107190](https://github.com/flutter/flutter/issues/107190) in Material-3 mode. As a result we get no elevation tint or any shadow on such `Material` using widgets in Material-3 mode.\n  - The [issue #107190](https://github.com/flutter/flutter/issues/107190) has been fixed in master. Even if only it lands, we will get shadows back in Material-3 default `Material`, also if the components and their themes do not land. In combination with the here made Material-3 manual elevation tint fix, they would in such a case get the correct Material-3 default background elevation tint behavior and shadow.\n  - The above temporary work-around fixes will be removed when the stable version of the framework implements the correct Material-3 elevation behavior for these widgets, and produces the same results itself. Hopefully in the next stable release of Flutter.\n\n**THEMES PLAYGROUND**\n\n* On **Theme colors** panel:\n  - Improved the discoverability of defining and using totally custom colors for your theme in the **Playground**. It has always existed, but maybe now users will discover it more easily. You can still also copy any existing theme as a starting point for your custom color definitions.\n  - Simplified the terminology used on the **Theme colors** panel. Also simplified its color presentation.\n  - Added an on/off switch that controls the `swapLegacyOnMaterial3` setting.\n\n* Updated and shortened the **Introduction**. Probably nobody reads it, or the [package docs](https://docs.flexcolorscheme.com/) with **Playground** guides, but at least it is there.\n\n* The **Seeded ColorScheme** panel:\n  - When using seeded color schemes, it is now possible to force contrasting **on** colors for all the main colors (primary, secondary, tertiary, error and their containers) to be plain black or white. This can result in better and more traditional contrast for text and iconography colors. Likewise, for the **on** colors for all the surfaces, background, surface, surfaceVariant and inverseSurface. This is a great toggle to get a more classic look while seeding main and surface colors. Turning these toggles on can also help with accessibility by increasing contrast and not using color on color for contrast. Offering these as user controllable toggles in apps can be a good way to allow users to tune not only the look, but also color accessibility.  \n  - Now also show the source input \"Scheme defined\" colors, the `FlexSchemeColor`, that gets used as key colors for the Material-3 seeded ColorScheme generation, when it is turned on.\n    - Arranged the panel content for better inclusion and presentation of the created **Tonal Palettes** used to make the seeded ColorScheme.\n    - The Tonal palette color **tones** now have tooltips that present each tone.\n\n* On **Surface blends**: \n  - Changed surface blend mode defaults to values that are more mobile design-friendly. No API change involved. API defaults are the same as before, changes only affect the Playground app defaults. \n    - Previously used **Playground** default values were intended for desktop and tablet designs, where controls and text are placed on containers with a lower surface blend, like the **Cards** used in the Themes Playground app itself. While one can make a responsive app, that uses this design nicely from mobile to tablet and desktop sizes, most mobile only apps are not designed so. Using Playground defaults that produce a nice theme for more typical mobile designs, will help new FlexColorScheme and Themes Playground users, configure nice themes even quicker.\n  - The blend mode control now also has a popup menu that always shows all surface blend modes, also in smaller media. On smaller devices the `ToggleButtons` control, as before, only shows popular options.\n\n* Other **new controllable properties** and features:\n  - **AppBar** theming can now use themed `scaffoldBackground` color as its themed background color. This is useful for matching the AppBar color exactly to the Scaffold background color, when Scaffold background uses different surface blends than the theme's ColorScheme surface or background colors.\n  - On **FAB and Chips** panel, added the **Always use circular FAB** feature.\n  - Added support for adjusting background color and elevation of `BottomSheet`.\n  - Added support for adjusting elevation of `NavigationBar`.\n  - Added support for adjusting elevation and background color of `PopupMenuButton`.\n  - Added support for component independent settings of `ToggleButtons` border width.\n  - Added support for component independent settings of `OutlineButtons` border widths.\n  - Added support for component independent settings of `InputDecorator` border widths.\n  - Added support for adjusting `Dialog` elevation.\n  - Added support for adjusting `Slider` via base color, track height and base color tinted value indicator.\n  - Added support for adjusting `Tooltip` via scheme color, radius, opacity, show duration and wait duration.\n  - Added support for adjusting `Switch` thumb color via scheme color selection.\n\n* User interface changes:\n  - New design of popup menu indicators for `AppBarStyle`, `SchemeColor` selection and `SurfaceStyle`. Their style follow `ToggleButtons` height and border radius.\n  - All single option select `ToggleButtons` controls in a `ListTile` can now for convenience be toggled in sequence by just tapping on the `ListTile` it is used in.\n  - Split out some components that where on shared panels, to their own panel/page. This is done when components get more settings and having them in a separate panel makes sense.\n  - A themed `Slider` widget is now presented in the **Widget Showcase** panel. Basic theming options are now available. The Slider theme is already excellent out of the box. When you need more radical changes to it, those typically go beyond the scope of FCS and require extending the Slider widget. \n  - Removed animation from horizontal list **Theme selector** when selecting a theme.\n  - Removed animation from the theming topics when selecting one on the **Page view**.\n  - Removed the slide to page animation, that was used when clicking on a topic on the **topic panel selector**.\n    - Direct panel/page selection via the control now instead uses a small **Fade and Zoom in** to show the selected settings panel.\n    - Without any panel page change effect, it was hard to notice what changed. The default slide to the page animation, with the `PageView` is fine when swiping, where it remains, but it was a tad annoying when clicking on the panel page selector.\n  - Changed all used `Slider.adaptive` to `Slider`.\n    - The Cupertino adaptive one has poorer UX. You cannot click on the track to move the thumb to a given position. The app presents Material theming, so we will show only Material widgets in the apps own controls, on all platforms going forward.\n  - Changed all used custom `SwitchListTileAdaptive` to just `SwitchListTile`.\n    - We like using the Material theme following `SwitchListTileAdaptive` iOS switch on iOS on macOS. However, the app presents Material theming, and the new Material-3 Switch will land in Flutter stable soon. The new Material-3 `Switch` is even nicer than the Cupertino Switch, and we want to see it in the app when it lands. We will thus use the Material Switch in the Themes Playground app on all of its own controls on all platforms going forward.\n    - The `SwitchListTileAdaptive` is kept in use on examples 2 to 4. As an example of how to make and use a theme following platform adaptive `ListTileSwitch`. In the `SwitchListTileAdaptive` doc comments it is mentioned that the plain `SwitchListTile.adaptive` is not theme color following on iOS/macOS platforms, nor can it be themed to be so. You have to make a custom wrapper like [`SwitchListTileAdaptive`](https://github.com/rydmike/flex_color_scheme/blob/master/example/lib/shared/widgets/universal/switch_list_tile_adaptive.dart).\n\n\n* **FIX** Themes Playground \n    - Fixed the codegen for Switch, Checkbox and Radio, that did not include color selection for setting primary color since it used to be default. The issue only concerned the Themes Playground code generation, APIs worked as expected.\n\n\n## 6.0.1\n\n**Sep 21, 2022**\n\n**FIX**\n \n* A null check was fixed by [sososdk](https://github.com/sososdk) in `FlexColorScheme.light` when using custom scheme [PR #90](https://github.com/rydmike/flex_color_scheme/pull/90). Issue did not exist in `FlexColorScheme.dark`.\n\n* Cam16 from Material Color Utilities exported by accident by FlexColorScheme in version 6.0.0 via its **FlexSeedScheme** package export. This export was removed. Cam16 was not exported before moving features to FlexSeedScheme and should not have been now either. FlexSeedScheme does export it as before. It is used by the **FlexColorPicker**.\n\n## 6.0.0\n\n**Aug 31, 2022**\n\n* Updated minimum dependencies to Dart >=2.18.0 and Flutter >= 3.3.0.\n\nDue to a number of known and below documented Flutter SDK issues when using `useMaterial3` set to\n`true`, we cannot yet recommend using the option in production. Use it only if you are willing to\naccept the still incomplete Material-3 implementation in Flutter and the issues. If you\nkeep `useMaterial3` set to `false`, and use FCS opinionated component themes, you can create a\ntheme that is visually fairly similar to Material-3, but still using Material-2 `ThemeData` mode to avoid many\nissues.\n\n**BREAKING**\n\n* This **FlexColorScheme** version no longer directly depends on the\n  [Material Color Utilities package](https://pub.dev/packages/material_color_utilities), which\n  is also used by Flutter SDK. Instead, it uses package\n  [FlexSeedScheme](https://pub.dev/packages/flex_seed_scheme) that depends on it.\n  As a part of this change classes `FlexTones`, `FlexTonalPalette` and `FlexCorePalette` where\n  moved into the package **FlexSeedScheme**. FlexColorScheme still exports these classes. If you\n  were using them directly before, you can still do so without adding the FlexSeedScheme package.\n\n* In **FlexSeedScheme**, `FlexTones` contains a minor breaking change to make the API cleaner.\n  The `FlexTones.light` and `FlexTones.dark` no longer produce the config for the Material-3 tone\n  and chroma setup. They no longer lock the chroma values to the default values for Material-3, but use\n  null in their configs for their chroma values. Resulting in that chroma from key colors will be\n  used, as long as they are over set minimum values.\n  These named constructors then provide a cleaner starting API for\n  defining additional configurations, by not forcing `null` to be passed to use chroma value in\n  key colors. To get the Material-3 configuration, use the factory `FlexTones.material` instead of\n  `FlexTones.light` and `FlexTones.light`. It as before produces the correct Material-3\n  configuration, by defining `secondaryChroma: 16` and `tertiaryChroma: 24` using `FlexTones.light`\n  and `FlexTones.dark` to return the correct Material-3 matching `FlexTones` configuration as\n  before. This change was introduced to prepare for extracting `FlexTones` and `FlexSeedScheme` to\n  their own package that will provide a `fromFlexSeeds` extension on `ColorScheme`. It is unlikely\n  to impact any normal usage of FlexColorScheme, but it is still a breaking change.\n\n* In **FlexSeedScheme** `FlexCorePalette.fromSeeds` properties `secondaryChroma` and\n  `tertiaryChroma` now default to null instead of previous Material-3 palette default generating values\n  16 and 24 respectively. Set them to 16 and 24 to create same tonal palettes as\n  Material Color Utilities `CorePalette` and previous versions of `FlexCorePalette`.\n\n* To allow for greater flexibility, and addition of tonal palette tones 5 (custom for FCS) and 98\n  (Google Material-3, Web theme builder app includes tone 98 to, but not Flutter SDK),\n  `FlexCorePalette` no longer extends `CorePalette`, it is a modified re-implementation.\n\n* In **FlexSeedScheme** the `FlexTonalPalette` method `asList` and constructor `fromList`, now\n  include the values of the error color in produced asList, and as required values in fromList.\n\n**NEW**\n\n* In **FlexSeedScheme**, added customization possibility of `error` tonal palette to the default\n  `FlexTonalPalette` constructor.\n\n* In **FlexSeedScheme**, added two new `FlexTones`:\n  1. `FlexTones.ultraContrast` with even more contrast that `highContrast`.\n  2. `FlexTones.jolly` for a seeded `ColorScheme` with more poppy and jolly seed colors.\n\n* In **FlexSeedScheme**, added `SeedColorScheme.fromSeeds(...)` that can be used to create a\n  seeded `ColorScheme` using multiple seed colors and `FlexTones` configuration.\n\n* In **FlexSeedScheme**, added `FlexTonalPalette` a re-implementation of Material Color Utilities\n  `TonalPalette`, with addition of tonal palette tones 5 and 98. Tone 98 also exists in the\n  [Web Material Theme Builder app](https://m3.material.io/theme-builder#/custom), but not in\n  Flutter or [Material Color Utilities package](https://pub.dev/packages/material_color_utilities).\n  Tone 5 is custom addition for `FlexTones` and `FlexColorScheme`.\n\n* Added `appBarCenterTitle` property to `FlexSubThemesData` configuration. It works the\n  same way as `centerTitle` in `AppBar` and its theme. The property is not available in the\n  Themes Playground app, only via the API. We recommend keeping it null to use platform\n  adaptive default behavior, but offer it as a convenience property for those that like to use the\n  same centering style, regardless of the used platform.\n\n* Added two new properties to `FlexSubThemes.elevatedButtonTheme`.\n  * Boolean `useMaterial3`, defaults to false.\n  * `onBaseSchemeColor`, defaults to null `SchemeColor?`.\n\n  When `useMaterial3` is `false`, the `elevatedButtonTheme.baseSchemeColor` is used as background\n  color as before, and the new property `elevatedButtonTheme.onBaseSchemeColor` is used as\n  foreground color. However, when `useMaterial3` is `true`, their foreground and background\n  color roles are reversed, and `baseSchemeColor` becomes its foreground color and the\n  `onBaseSchemeColor` its background color.\n\n* Added `elevatedButtonSecondarySchemeColor` property of type `SchemeColor?` to\n  `FlexSubThemesData`. Use it to control secondary color of the `ElevatedButton` in its\n  component themes. FCS applies this color to `FlexSubThemes.elevatedButtonTheme.onBaseSchemeColor`.\n  If `useMaterial3` is false, it is the foreground color. If `useMaterial3` is true, it is the\n  background color. Material-3, and 2, have completely different elevated button styles.\n  The Material-2 elevated button is color wise, like the Material-3-filled button, but with elevation.\n\n* Added two new properties to `FlexSubThemes.outlinedButtonTheme`.\n  * Boolean `useMaterial3`, defaults to false.\n  * `outlineSchemeColor`, defaults to null `SchemeColor?`.\n    When `useMaterial3` is `false`, the `outlineSchemeColor` defaults to `baseSchemeColor`.\n    When `useMaterial3` is `true`, the `outlineSchemeColor` defaults to `SchemeColor.outline`.\n\n**REMOVED EARLIER DEPRECATED MEMBERS**\n\nAs a chore and cleanup, all previously deprecated members have been removed from version 6.0.0. It\nno longer has any self-deprecated members. This removes legacy backwards compatibility with\ndeprecated members from versions 2, 3 and 4, and even one from version 5.1.0. Removed all earlier\nself-deprecated members as follows:\n\n* *FlexSubThemesData:*  \n  `inputDecorationRadius`, `bottomNavigationBarSchemeColor`,\n  `navigationBarIsStyled`, `navigationBarTextSchemeColor`, `navigationBarMutedUnselectedText`,\n  `navigationBarIconSchemeColor`, `navigationBarHighlightSchemeColor`.\n* *FlexColorScheme:*  \n  `primaryVariant`, `secondaryVariant`, `useSubThemes`. Removed static `FlexColorScheme.m3TextTheme`\n  deprecated in 5.1.0 and static `FlexColorScheme.themedSystemNavigationBar` in version\n  2 its deprecated parameter `nullContextBackground`.\n* *FlexThemeData:*  \n  `primaryVariant`, `secondaryVariant`, `useSubThemes`.\n* *FlexSchemeColor:*  \n  `primaryVariant`, `secondaryVariant`.\n* *SchemeColor:*  \n  `primaryVariant`, `secondaryVariant`.\n* *FlexConstants:*  \n  `kDarkenSecondaryVariant`, `kDarkenSecondaryVariantFromSecondary`, `kDarkenPrimaryVariant`.\n* *FlexSubThemes.bottomNavigationBar:*\n  `baseSchemeColor`.\n* *FlexSubThemes.navigationBarTheme:*\n  `textSchemeColor`, `unselectedTextSchemeColor`, `mutedUnselectedText`, `iconSchemeColor`,\n  `highlightSchemeColor`.\n\n**STYLE CHANGE — BREAKING**\n\n* `FlexSubThemesData.fabUseShape` opinionated component theme style default was changed from `true`\n  to `false`, this breaks previous default style. The opinionated style change was done\n  to use a style that by default matches Material-3 style when `ThemeData.useMaterial3` is `true`.\n  The new default style is also a way to work around issue\n  [#107946](https://github.com/flutter/flutter/issues/107946), where it is shown that you cannot\n  create a theme that replicates the default border radius in Material-3 of the FAB.\n  **Style migration**: If you had kept `FlexSubThemesData.fabUseShape` unspecified and relied on\n  default value in a previous version, you must set it to `true` to get the same result as before.\n  Breaking style changes like this, in the opinionated opt-in component themes are unfortunate.\n  They are, however, required as FlexColorScheme continues to evolve with Flutter SDK to support Material-3\n  theming, while offering its own opinionated tweaks on some Material-3 default styles as well.\n\n**STYLE CHANGE — MINOR**\n\n* The Material-3 color utilities package *material_color_utilities* from the Material team, that Flutter SDK\n  depends on and FCS also uses, introduced a minor breaking change going from version 0.1.4 to\n  0.1.5. Some colors in the tonal palettes no longer give exactly the same color values as before.\n  This changes the results for some colors when you create a `ColorScheme.fromSeed` or FCS does\n  it internally with its extended version `SeedColorScheme.fromSeeds`. The new algorithm changes \n  all the default Material-3 error colors slightly. The changes in the color values are minor,\n  and not visually noticeable to the eye. Values are still slightly different, and this release\n  uses the new value for FCS Material-3 error colors. Tests were also updated to use the new values.\n  The change did break FCS color value tests, and should per its own policy be considered a\n  major breaking change. However, since the Material-3 design and **material_color_utilities**\n  call this change minor, then so does FCS.  \n\n* The opt-in opinionated tinted text themes were made less aggressive on the tint and received a\n  bit of opacity for styles that in 2014/2018/2021 styles have opacity. The custom styles use\n  significantly less opacity since they already also get alpha-blended tint color applied.\n  Combining it with the same level of opacity would make them too low contrast.\n\n* Style **fix**, the main text theme uses `surfaceTint` color instead of `primary` when tinted text\n  theme is enabled. By default `surfaceTint` equals `primary`, but if theme `surfaceTint` is set\n  to use a custom color, the for surface tinted textTheme is now also based on it, to fit the\n  custom-tinted surfaces. The primary text theme, that fits on primary color, still\n  uses `primary` color as its tint color.\n\n* The `FlexAppBarStyle` property was made nullable. It now defaults to null in all constructors.\n  When it is null and `useMaterial3` is false, the app bar will use style `FlexAppBarStyle.primary`\n  in light mode as default, like before and `FlexAppBarStyle.material` in dark mode. However, if\n  `useMaterial3` is true, then it will use `FlexAppBarStyle.surface` in both light and dark mode,\n  to match the un-themed defaults of Material-3 design `AppBar`.\n\n* Updated `ElevatedButton` to support `useMaterial3` defaults concerning its switched foreground and\n  background color roles. It now also uses a stadium border instead of 20 dp, Material-3 size, padding and\n  elevation defaults, when `useMaterial3` is opted in on.\n\n* Updated `OutlinedButton` to support `useMaterial3` defaults concerning its outline color default.\n  It now also uses a stadium border instead of 20 dp, Material-3 size and padding, when `useMaterial3` is\n  opted in on.\n\n* Updated `TextButton` to support `useMaterial3` defaults concerning its use of a stadium border\n  instead of 20 dp radius, as well Material-3 size and padding, when `useMaterial3` is opted in on.\n\n* Changed opinionated dialog component theme defaults to match Material-3 defaults. Elevation set to 6, was\n  10 and actionsPadding defaults to `EdgeInsets.only(left: 24.0, right: 24.0, bottom: 24.0)`, it\n  did not have a custom default before. These are new defaults for the opinionated dialog component theme\n  for both Material-2 and Material-3.\n\n* Updated `Chip` component theme when opting in on `useMaterial3`. When  `useMaterial3` is `true`, it \n  now uses upcoming \n  Material-3-styled Chips instead of its own opinionated custom style, also when the opinionated \n  component themes are enabled. To get the same opinionated coloring as before, but on the Material-3 styled\n  chips when using Material-3, set component themes data\n  `subThemesData: const FlexSubThemesData(chipSchemeColor: SchemeColor.primary)`.\n  This feature will only work with intended design in the stable channel, after the feature and PR\n  [\"Migrate Chips to Material-3\"](https://github.com/flutter/flutter/pull/107166), lands in the stable\n  channel. Currently, it is only available in Flutter *master 3.1.0-x*.\n\n* Updated `InputDecoration` default component theme when opting in on `useMaterial3`. When `true` it\n  now results in a more upcoming Material-3 styled `TextField` style by default, instead of its own more\n  opinionated custom style, also when the opinionated component themes are enabled.\n  It still uses a touch a lot of its own style in Material-3 mode, because TextField's real Material-3 design is\n  not yet available in Flutter 3.3. TextField FCS opinionated style, combined with Material-3 real defaults,\n  will need more work on Material-3 styles after\n  [\"Migrate TextField to Material-3\"](https://github.com/flutter/flutter/pull/108366) lands in\n  the stable channel.   \n  The Material-3 alignment of FCS `InputDecoration` planned adjustments are:\n  - Use the same error container color idea for FCS default that Material-3 uses, could be OK for all modes.\n  - Option to use FCS component defaults on fill colors and disabled colors, also when\n    opting in on Material-3. These FCS defaults can provide a nice alternative also when opting in on Material-3,\n    but should not force it on Material-3 unless asked for.\n\n**CHANGE**\n\n* Removed earlier internal deprecation of `FlexSubThemes.buttonTheme`, as long as Flutter\n  SDK has not deprecated it, neither will FCS.\n* Removed earlier internal deprecation of all *\"variant\"* named const `FlexColor` colors.\n  They are not used actively by any built-in schemes. However, in line with past practice,\n  the old Material-2 color names and values will not be removed. Feel free to use them, if so desired.\n* To support deprecation of `toggleableActiveColor` when PR\n  [Deprecate toggleableActiveColor #97972](https://github.com/flutter/flutter/pull/97972) lands,\n  while retaining the previous FCS defaults for `Switch`, `CheckBox` and `Radio` widgets, when\n  not opting in on component themes. The created `SwitchThemeData`, `CheckboxThemeData` and\n  `CheckboxThemeData` can no longer be null, when not opting in on component themes like before.\n  To support the previous theme colored\n  toggles in light and dark themes, that were set by defining the right scheme color for\n  `toggleableActiveColor` in Material-2 and Material-3 theme modes, component themes for them that replicates the color\n  styles must now be created also when not opting in on component themes. This update includes the\n  necessary change to do so. This will be reflected in updates to the core default documentation.\n  For a migration guide concerning `toggleableActiveColor` see\n  [Flutter breaking-changes](https://flutter.dev/docs/release/breaking-changes/toggleable-active-color#migration-guide).\n* Since Flutter 3.3 did not yet include the actual deprecation of `toggleableActiveColor` FCS still\n  defines its appropriate color value for `ThemeData`.\n\n\n**EXAMPLES**\n\n* *Themes Playground:* New feature, the used code highlight colors were added as colors in\n  a `CodeTheme` class `ThemeExtension` to `ThemeData`. To demonstrate how one can use theme\n  extensions directly with FlexColorScheme as well, in this case to add custom semantic colors\n  for the code view's code keyword highlighter. Additionally, a fancy Material-3 feature was added,\n  color harmonization of custom colors. The process is described in the Material-3 guide under\n  [custom colors](https://m3.material.io/styles/color/the-color-system/custom-colors).\n  The Material-3 library [MaterialColorUtilities](https://pub.dev/packages/material_color_utilities) has\n  the `Blend` function needed to perform the color harmonization, as described\n  [here](https://github.com/material-foundation/material-color-utilities#readme) and the Dart color\n  `Blend` function is [here](https://github.com/material-foundation/material-color-utilities/blob/main/dart/lib/blend/blend.dart).\n\n* *Themes Playground:* Updated the default AppBar style, it uses a dropdown menu that can also select\n  'null' choice and use default Material-2 and Material-3 theming as defaults via it. The AppBar panel now also\n  displays an AppBar Widget of its own, so one does not have to look at the actual AppBar to\n  see the style. It also has widgets below it used to demonstrate the opacity setting.\n\n* *Themes Playground:* Code gen and control enable/disable for onColor blends updated to lock controls\n  with no impact when using seeded color schemes. Code is also not generated for onColor blend\n  settings that have no impact when using seeded color schemes.\n\n* *Themes Playground*: Features and code gen for additional `Elevated.button` individual foreground\n  and background colors.\n\n* *Themes Playground*: Features and code gen for additional `Outlined.button` separate outline\n  color.\n\n* *Themes Playground*: To the component panel added support to customize outline border\n  thickness for `OutlinedButton`, `ToggleButtons` and `TextField`'s `InputDecorator`.\n\n* *Themes Playground*: Added features and UI for new Flutter SDK `ColorScheme` colors\n  `outlineVariant` and `scrim`.\n\n**DOCS**\n\n* Removed the duplicated section of 5.1.0 changelog entry with date July 5, 2022.\n\n* Harmonized the changelog style and its history. The new style and how it looks will be tested\n  with a dev release to ensure it works well on pub.\n\n**KNOWN FLUTTER SDK ISSUES IMPACTING THEMING**\n\nThe issues below in the Flutter SDK itself, are known to impact FlexColorScheme and Flutter theming\nin general. The issues are typically caused by incomplete Material-3 implementation in Flutter.\n\n* The Material-3 Chip themes available in Flutter `master 3.1.0-0.0.pre.2216` at the time of writing,\n  do as noted here\n  [PR #107166 comment](https://github.com/flutter/flutter/pull/107166#issuecomment-1189206217),\n  not yet Material-3 theme plain vanilla `Chip` when using Material-3. This might be fixed in an\n  additional PR later in the SDK. This proposal tracks the potential implementation of this\n  [#109470](https://github.com/flutter/flutter/issues/109470).\n\n* [**#107946**](https://github.com/flutter/flutter/issues/107946) Cannot theme Shape and IconSize\n  differently for different sized FloatingActionButtons. One of the drivers behind the breaking\n  FAB style defaults for the opinionated FAB theme in FCS was this issue.\n\n* [**#108539**](https://github.com/flutter/flutter/issues/108539) Cannot theme shape independently\n  for `SnackBar` with different `behavior`. This is the reason why FCS does not yet offer a\n  custom shape in its opinionated `SnackBar` theme. To replicate the un-themed behavior with\n  slightly different border radius values, one must make custom wrapper widgets for `SnackBar`.\n\nThe Flutter SDK Material-3 `useMaterial3` flag set to `true` continues to have a number of challenges in\naddition to the above ones. We as before still have the issues below in Flutter *stable 3.0.5* and\nalso at least in Flutter *master 3.1.0-0.0.pre.2216* and earlier:\n\n* [**#107190**](https://github.com/flutter/flutter/issues/107190) Elevation issue with `Material` widget, when opting in on `useMaterial3` causes widespread elevation issues. Concerning the reported elevation issue for dialogs included in the linked report, it was observed as fixed for them in master, but later the PR fixing it was reverted. After that, it was relanded, then the reland reverted, see [Issue #107423](https://github.com/flutter/flutter/issues/107423), [PR #108718](https://github.com/flutter/flutter/pull/108718), [PR #109170](https://github.com/flutter/flutter/pull/109170) and [PR 109172](https://github.com/flutter/flutter/pull/109172). Even after it eventually lands in stable, it will not solve all the mentioned incompleteness caused Material-3 elevation issues. It will only do so for Dialogs. Popup in particular will remain troublesome.\n\n* [**#103864**](https://github.com/flutter/flutter/issues/103864) Dynamically changing `Typography`\n  in `ThemeData` generates an error\n\n* [**#107305**](https://github.com/flutter/flutter/issues/107305) Regression: `AppBarTheme` properties `iconTheme` and `actionsIconTheme` are ignored in the master channel when `useMaterial3` is true. This was not in stable Flutter channel *stable 3.0.5*. This issue was fixed via [PR #108332](https://github.com/flutter/flutter/pull/108332) and could no longer be observed in *master, 3.1.0-0.0.pre.2108* or later versions. The fix did however not make it into Flutter stable 3.3.0 and now exists there. The issue must be re-opened or a new one submitted.\n\n* This issue discussed in `SliverAppBar.medium` and `large` [PR #103962](https://github.com/flutter/flutter/pull/103962#issuecomment-1224269768), now exists in the stable channel. There is no open issue for it yet.\n\n## 6.0.0-dev.1\n\n**Aug 28, 2022**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_6_0_0_dev_1.md)\n\n## 5.1.0\n\n**July 8, 2022**\n\n* Updated to support *Flutter 3.0.0*, with *Dart 2.17* and the latest Flutter package dependencies in example apps. Requires at least *Flutter 3.0.0* and *Dart 2.17.0*.\n\n**NEW**\n\n* **Added** full support for in *Flutter 3.0.0* new `ColorScheme.surfaceTint` color. It is set to `ColorScheme.primary` color by default, as Flutter and Material-3 does. If a custom `surfaceTint` color is provided, it is also used as the blend color, instead of `primary` color, for FlexColorScheme's surface blend feature.\n\n* **Added** API for using *Flutter 3.0.0* theme extensions directly via FlexColorScheme API. It was added as a convenience feature to avoid having to add theme extensions with a `copyWith` on FlexColorScheme produced ThemeData. With the `FlexColorScheme.extensions` and `FlexThemeData.extensions` properties you can add custom theme extensions directly.\n\n**DEPRECATED**\n\n* **Deprecated:** `FlexColorScheme.m3TextTheme`. The custom Material-3 text theme is no longer required after Flutter 3.0.0 release that includes the new Material-3 Typography in addition to its earlier released `TextTheme`. You can opt in on using the new Material-3 style TextTheme as before by setting `FlexColorScheme.subThemesData.useTextTheme` to true **or** by setting `FlexColorScheme.useMaterial3` to true. Using either does however, come with known issue [#103864](https://github.com/flutter/flutter/issues/103864), where dynamically switching Typography, e.g., from 2014 or 2018, to Material-3 2021 Typography triggers mentioned assert in issue [#103864](https://github.com/flutter/flutter/issues/103864). This issue has always existed in Flutter SDK ThemeData when dynamically changing between different Typography. Before FlexColorScheme avoided triggering this issue by only using Typography 2018, also when opting in on Material-3 TextTheme, that before used 2018 based Typography to make a custom Material-3 like `TextTheme`. Avoiding this issue is no longer possible when opting in on Material-3, that now correctly uses its own and different Typography from Material-2. This exposes this issue if you dynamically change ThemeData from one to another Typography. To avoid this Flutter SDK issue, use the same Typography for all your themes in your app and do not dynamically switch theme between ThemeData objects that use different Typography in your application. The use cases for doing this are few, but it is still a Flutter SDK limitation to be aware of.\n\n* **Deprecated:** `FlexSubThemes.buttonTheme` that creates an opinionated `ButtonThemeData`. The ButtonThemeData is marked as obsolete in Flutter SDK but not yet deprecated in Flutter 3.0.0. FlexColorscheme now marks it as **deprecated**. It will be removed in a future FlexColorScheme release when Flutter SDK deprecates `ButtonThemeData`.\n\n**Material-3 STYLE FIXES AND CHANGES**\n\n* **FAB Material-3 defaults change**: Floating Action Button background color, will when opting in on `ThemeData.useMaterial3`, use color `theme.colorScheme.primaryContainer`, otherwise `theme.colorScheme.secondary` is used.\n\n* **Input Decorator default change**: The `TextField` and its `InputDecorator` border radius \n  default value was changed from 20 dp to 16 dp when using opinionated component themes.\n  If opting in on Material-3, the default value for Material-3 design is used, which is only 4 dp.\n  See specification https://m3.material.io/components/text-fields/specs.\n  Flutter 3.0.x does not yet implement the new Material-3 TextField style, but via this change when\n  opting in on Material-3, FlexColorScheme offers an early approximation of it. \n\n* **NavigationBar Material-3 defaults change**: Default colors of `NavigationBar` when opting in on \n  `useMaterial3` and not using opinionated component themes will now match Material-3 default colors. The background color will follow Material-3 style also by default when component themes are enabled and `useMaterial3` is true. This style is difficult to replicate with a single color otherwise. The difference is subtle for FCS surface tinted background colors. You can still set it to `background` color to replicate past FCS default color when component themes were enabled. For other properties, if opinionated component themes are not used, FCS will use default Material-3 theme styles on `NavigationBar` when `useMaterial3` is true. If opting in on opinionated component themes, FCS uses its own custom and opinionated default style. It can be modified to be the same as the default Material-3 style too, just as before. The change also includes a default font size change for FCS opinionated styled navigation bar, from 11 dp to 12 dp. This change was done to harmonize it with its Material-3 style.\n\n* **NavigationRail Material-3 defaults change**: Default colors of `NavigationRail` when opting in on\n  `useMaterial3` and not using opinionated component themes will now match Material-3 default colors. If opinionated component themes are not used, FCS will use default Material-3 theme styles on `NavigationRail` when `useMaterial3` is true. If opting in on opinionated component themes, FCS uses its own custom and opinionated default style. It can be modified to be the same as the default Material-3 style too, just as before. The change also includes a default font size change for FCS opinionated styled rail, from 14 dp to 12 dp. This change was done to harmonize it with its Material-3 style.\n\n* **Toggleable Material-3 style change:** Default color of toggles (Switch, CheckBox and Radio) are now using `primary` color as the default theme color when opting in on opinionated component themes or setting `ThemeData.useMaterial3` to true. The Switch, CheckBox and Radio themes then use a style that matches the Material-3 color design intent. In it, switches and toggles are mostly primary color. In Material-3 color design, the secondary color is a poor choice for switches and toggles, and it is therefore not used as their default color. It does not look nice with Material-3-based ColorSchemes, created e.g., using Material-3 color seeding. If you use a custom Material-3 color design, where secondary color is still prominent, you can, of course, still use it.\n\n* **Fixed lint:** \"Avoid using private types in public APIs\". See tweet [discussion](https://twitter.com/RydMike/status/1533788260320923649) about why and when you might run into this lint being triggered by older Stateful Widgets. The lint warning was addressed in the package and examples.\n\n**EXAMPLES**\n\n* Added a **Theme Extensions** example to the default example app *Hot Reload Playground*.\n\n* *Themes Playground:* Updated the default style info labels for Switch, Checkbox, and Radio.\n\n* *Themes Playground:* To the top row theme selector, where the FlexColorScheme and component themes switches are, added the \"Use Material-3\" toggle. Previously, this toggle was only available on the introduction panel. The availability in the header makes it easy to toggle it ON and OFF at any time, to see what impact it has on widgets.\n\n* *Themes Playground:* Updated the default style info labels for the NavigationBar. The logic to display default color labels in different config modes (Material-2/Material-3/FCS/FCS+Material-2/FCS+Material-3) is quite involved, please report any issues. \n\n* *Themes Playground:* Updated the default style info labels for the NavigationRail. The logic to display default color labels in different config modes (Material-2/Material-3/FCS/FCS+Material-2/FCS+Material-3) is quite involved, please report any issues.\n\n* *Themes Playground:* Due to issue [#107190](https://github.com/flutter/flutter/issues/107190), the Playground previous default to use Material-3 was changed to false. \n\n* *Themes Playground:* Added support to customize the `surfaceTint` color. It controls both the elevation color used for elevated `Material` surfaces in Material-3. Plus for FlexColorScheme it is also used as the surface blend color. By default, the `surfaceTint` color equals `ColorScheme.primary` color. Generally, there are few good design reasons to change the color, but it is now possible to do so. A good graphical designer can use it to create subtle difference from the standard surface elevation color branding effects. Used poorly, it mostly creates not so appealing visual and coloring results.\n\n**KNOWN FLUTTER SDK ISSUES**\n\nThe issues below in the Flutter SDK itself, are known to impact FlexColorScheme and Flutter \ntheming in general.\n\n* Switching `Typography` dynamically in Flutter SDK ThemeData is broken, see\n  issue [#103864](https://github.com/flutter/flutter/issues/103864) for more information.\n  If it is done and the error is ignored, an app doing so eventually becomes unstable.\n\n* The *Themes Playground* app contains a workaround to avoid issue [#103864](https://github.com/flutter/flutter/issues/103864). The workaround is done by always using the 2021 Typography, and simulate 2018 Typography. This is done by using a custom TextTheme that looks like the 2018 Typography, when selecting it. The Playground App actually always stays in 2021 Typography, but it looks like it switches it. Which it does by applying a custom `TextTheme` to its 2021 Typography, that looks like 2018 Typography is used. All other examples avoid the issue by only using the Material-3 2021 Typography and not even mimicking a switch between Material-2 and Material-3 Typography.\n\n  The above workaround is required because the **Themes Playground** app has toggles that can switch `Typography`, without the workaround it will eventually crash. With this work-around it never switches Typography, it just looks like it does, but app stays in 2021 Typography all the time. The by Themes Playground generated ThemeData config will use the actual real effective Typography. This is also fine, since an app using the theme will likely never switch used Typography. However, if it does, it will face the same issue as the Playground app did. The issue is a Flutter SDK issue that FlexColorScheme cannot fix. Most likely, 99% of apps will never run into this issue.\n\n* In Flutter *stable 3.0.x*, when opting in on `useMaterial3:true`, the `Material` widget and other SDK widgets built on it, gets no elevation when only the `elevation` property is defined. It is required to also define `shadowColor` and/or `surfaceTintColor` to get any elevation effect. When using the `Material` widget itself this is easy to address. However, widgets like `Drawer`, `PopupMenuButton`, `BottomNavigationBar`, `NavigationRail`, `Dialog`, `AlertDialog`, `TimePickerDialog`, `DatePickerDialog`, `MaterialBanner` and `BottomSheet` do not expose these `Material` properties and cannot be elevated. \n \n  The issue is reported and tracked here [#107190](https://github.com/flutter/flutter/issues/107190) and also mentioned in the `FlexColorScheme` repo here\n  [#54](https://github.com/rydmike/flex_color_scheme/issues/54). There are no good workarounds for using elevation on these widgets when `useMaterial3` is true. The options are to not use Material-3 if such elevations are important to your app design. One working fix is to wrap those widgets in a theme where `useMaterial3` is false, then the rest of your app can still use it. This is, however, a rather tedious workaround. Due to current Flutter SDK `Material` elevation issues when `useMaterial3` is true, it is recommended to not use it until this issue is fixed.\n\n* This regression in master channel impacts AppBar icon colors when using Material-3 [#107305](https://github.com/flutter/flutter/issues/107305). It has not yet landed in stable channel Flutter *stable 3.0.5*, but if you use the master channel, it is something to be aware of.\n\n## 5.0.1\n\n**April 29, 2022**\n\n**FIX**\n\n* For the custom and temporary `m3TextTheme`: Fixed the Typography letterSpacing for bodyLarge to match corrected Material-3 spec that had wrong specification on the Material-3 website 0.15 -> 0.5. See Flutter SDK issue [#102121](https://github.com/flutter/flutter/issues/102121).\n* Themes Playground: Fix wrong color code copied to clipboard when tapping input color.\n* Themes Playground: Make prettier default constructor for FlexSubThemesData() if that is all that was defined in Themes Playground config.\n\n## 5.0.0\n\n**April 21, 2022**\n\n### Overview\n\nThe full journey from version 4.2.0 to stable 5.0.0 includes the steps in\nchange logs for development versions 5.0.0-dev.3, -dev.2 and -dev.1.\nPlease refer to them for all details. This changelog contains a summary of\nbreaking and other critical changes from version 4.2.0.\n\nFlexColorScheme version 5 is style wise a big breaking change since all the\nbuilt-in produced `ColorScheme`s the themes' use have been revised to follow\nthe new Flutter 2.10.0 Material-3 based `ColorScheme`. The color changes to\nthe built-in schemes have been kept minimal compared to previous styles.\n\nMostly new color values were added to provide support for all the new\ncolors in the Flutter Material-3 `ColorScheme` update, that landed in Flutter\n2.10.0. The new colors are style aligned with past styles as far as possible, while\nalso keeping them inline with the Material-3 ColorScheme design intent.\n\nAs `ColorScheme.primaryVariant` and `secondaryVariant` have been deprecated\nin Flutter 2.10 SDK, so have they in FlexColorScheme. All past color constants\nfor all color values and helper classes with the name \"variant\" in them have been\nself-deprecated in FlexColorScheme. The variant color values still exist\nif you have used any of them directly, they still work. The old built-in\nvariant color values will remain available at least until version 6.0,\nmaybe even 7.0 if so requested by users.\n\n**BREAKING**\n\n* Version 5.0.0 requires at least Flutter version 2.10.0 to work. This breaking\n  change is required since the new color properties in `ColorScheme` do not exist\n  in any stable version of Flutter before version 2.10.\n\n* `surfaceStyle` removed.\n  * In version 5.0.0, the in version 4.2.0 deprecated property `surfaceStyle`, including all\n    its implementing classes, enums, helpers and tests have been removed.\n  * Removed property: `surfaceStyle` in `FlexColorScheme.light` and `FlexSchemeData.light`.\n  * Removed property: `surfaceStyle` in `FlexColorScheme.dark` and `FlexSchemeData.dark`.\n  * Removed: enum `FlexSurface`, that only `surfaceStyle` was using.\n  * Removed: factory `FlexSchemeSurfaceColors.from` that was used to create\n    surface using the `surfaceStyle`. The factory `FlexSchemeSurfaceColors.blend`\n    replaced it in version 4.0.0 already, when using `surfaceMode` and `blendLevel`.\n  * **Migration:** Use `surfaceMode` and `blendLevel` instead, it has more blend\n    styles and finer granularity than the removed `surfaceStyle`.\n\n```\ntheme: FlexThemeData.light(\n  scheme: FlexScheme.flutterDash,\n  surfaceMode: FlexSurfaceMode.highScaffoldLowSurface,\n  blendLevel: 20,\n),\n```\n\n* `FlexSubThemesData.navigationBarIsStyled` removed.\n  * The property `navigationBarIsStyled` in `FlexSubThemesData` has been\n    removed. If you have used it, it has a broader more general replacement called\n    `FlexSubThemesData.useFlutterDefaults`.\n  * **Migration:** Consider using `useFlutterDefaults` instead, or set styles\n    manually using individual properties to match Flutter defaults\n    un-themed component designs.\n\n\n* `FlexColorScheme.useSubThemes` no function\n  * Deprecated property `useSubThemes`. This property has no function after 4.2.0\n    stable and 5.0.0-dev.1. Previously setting this property to true activated\n    the default set and configuration of the optional opinionated component themes,\n    even if you did not pass any `FlexSubThemesData()` configuration data to\n    `subThemesData`. Before when `useSubThemes` was true and no `subThemesData`\n    defined, it created one internally using the default constructor\n    `FlexSubThemesData()` and used it. It also ignored any defined and to\n    `subThemesData` assigned one, if the flag was set to false.\n  * The default component themes are now instead always activated and created by\n    explicitly assigning at least a default constructor `FlexSubThemesData()` to\n    `FlexColorScheme.subThemesData`.\n  * Removing this property makes the API more consistent. It follows the same\n    design that is used for `keyColors`  with `FlexKeyColors` and `tones` with `FlexTones`.\n  * **Migration:** If you previously had only set `FlexColorScheme.useSubThemes` to true and not\n    specified any `subThemesData` properties, you must now add the default constructor. Likewise,\n    if you had set `FlexColorScheme.useSubThemes` to false, and had a `FlexColorScheme.subThemesData`\n    defined, you must remove it to stop using it. If you need to toggle it ON and OFF, use a bool\n    to enable and disable it, then pass in the `FlexSubThemesData` when enabled,\n    and null when not using it.\n\n**DEPRECATED AND BREAKING** due to Flutter SDK change in 2.10.0 stable release.\n\n* `primaryVariant` and `secondaryVariant`\n  * The colors `primaryVariant` and `secondaryVariant` in FlexColorScheme are\n    deprecated and can no longer be used to set colors values that result in any\n    color values in Flutter SDK deprecated same named `ColorScheme` color properties.\n  * The `ColorScheme` deprecated properties `primaryVariant` and\n    `secondaryVariant` will always get their Flutter SDK default values,\n    regardless of what input you give to them in FlexColorScheme. Flutter sets its\n    deprecated `primaryVariant` equal to `primary` and `secondaryVariant` equal\n    to `secondary`.\n  * This means that if your application used those color scheme values on any\n    custom widgets, their colors will change if you upgrade from a previous\n    version of FlexColorScheme and do not do any other changes. You need to\n    migrate to use `primaryContainer`, `secondaryContainer`, `tertiary` or\n    `tertiaryContainer` color, as replacement colors in your custom widgets.\n     The right choice depends on your color design.\n  * If you use a `FlexColorScheme` setup made for a version before version 5.0,\n    with version 5.0, and, if you have used custom color schemes where you\n    defined the`FlexColorScheme` properties `primaryVariant` and `secondaryVariant`\n    or defined and used them via custom `FlexSchemeColors`, in the `colors` property in\n    `FlexColorScheme`. **Then**, in those cases the **variant** color\n    properties will function as fallback input for color properties\n    `primaryContainer` and `secondaryContainer` respectively, unless own color\n    values for these properties are provided.\n  * When you upgrade the package version to 5.0.0 and have used custom color schemes,\n    you will find your custom variant colors on the corresponding new\n    container colors. Be aware that past variant color shades are not necessarily a great\n    fit for a Material-3 design intent of container colors, but at least you will get\n    your past custom colors used in the new theme by default.\n  * **Migration:** Define new custom colors values for all container colors and\n    tertiary color. Use them to make your custom `FlexColorScheme` instead.\n    Then migrate away from using Flutter SDK `ColorScheme` colors `primaryVariant`\n    and `secondaryVariant` anywhere in your application. Instead, use any of its new\n    `ColorScheme` color properties as fitting with your design. This is something you have\n    to do after Flutter 2.10, even if you are not using FlexColorScheme. Sure, not immediately, but\n    eventually when the Flutter SDK `ColorScheme` colors `primaryVariant` and `secondaryVariant`\n    are removed after a year or so.\n\n* `SchemeColor` values and order, potentially breaking.\n  The enum `SchemeColor` has new values and past values are in a new order.\n  The order was changed to accommodate all the new color values, and to keep them in\n  the same order as their corresponding color properties in Flutter Material-3\n  `ColorScheme` color values. The change of order is potentially breaking,\n  but highly unlikely to break anything in major ways in normal usage.\n\n**STYLE CHANGE - BREAKING**\n\n* The custom \"internal\" and temporary `m3TextTheme` was changed.\n  It is **style-breaking** with 4.2.0 and 5.0.0-dev.1 & 2.\n  It breaks past used style when opting in on component themes and its optional\n  custom `m3TextTheme` enabled. The updated custom implementation of it now follows the\n  implementation used in the Flutter master channel, apart from this\n  [issue](https://github.com/flutter/flutter/issues/102121),\n  where it for now implements the value used in the Material-3 Web guide.\n  The changes in styles otherwise concern the addition of the font geometry height, which the\n  previous custom implementation did not have. The usage of the custom `m3TextTheme` should be\n  considered internal and temporary. It will be changed to use the actual Flutter implementation\n  once [PR #97829](https://github.com/flutter/flutter/pull/97829) lands in the Flutter stable\n  channel. The custom `m3TextTheme` will then be deprecated.\n\n* The computed colors for `ThemeData` colors `primaryColorLight`, `primaryColorDark` and\n  `secondaryHeaderColor` were changed.\n  It is **style-breaking** with 4.2.0 and 5.0.0-dev.1 & 2. The change breaks past\n  used styles on these rarely used colors. These `ThemeData` colors are also on\n  a deprecation path and will likely receive some new none `MaterialColor` dependent\n  color defaults when that change happens. The new `ColorScheme.primary` computed\n  colors for these rarely used colors are better balanced than before and work well\n  regardless of used `ColorScheme.primary` shade and tint.\n\n* The color definition value for `FlexColor.espressoLightPrimary` color was changed.\n  This is **style-breaking** with 4.2.0 and 5.0.0-dev.1 & 2. The new color for\n  `FlexColor.espressoLightPrimary` breaks past used color for this color constant.\n  The color was changed from `0xFF220804` to `0xFF452F2B`. Past color was too dark brown, almost\n  black to be very usable in a UI. It was very black coffee like, but not very practical in a UI,\n  it was too close to black. Since version 5 is anyway a major style-breaking with the introduction\n  of the new Material-3 ColorScheme, the opportunity to improve this color value used in the\n  built-in theme `espresso` theme was used.\n\n## 5.0.0-dev.3\n\n**April 20, 2022**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_5_0_0_dev_3.md)\n\n## 5.0.0-dev.2\n\n**April 4, 2022**\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_5_0_0_dev_2.md)\n\n## 5.0.0-dev.1\n\n**March 14, 2022**\n\n### Overview\n\nVersion 5.0.0-dev.1 is a big refactor, with deprecation of previous `variant` based color names in favor of `container` ones that were added to updated Material-3 based `ColorScheme` in Flutter 2.10.0. The same additions and changes are now also introduced in FlexColorScheme. Despite being a big release, with many new features, actual breaking changes are very few and mostly concerns in version 4 deprecated members and, of course, requiring minimum Flutter 2.10.0 to work.\n\n* [Detailed changelog](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_5_0_0_dev_1.md)\n\n## 4.2.0\n\n**January 24, 2022**\n\n**DEPRECATED**\n\n* The property `surfaceStyle` has been deprecated. In\n  version 4.0.0 it was already recommended to instead use the then introduced more\n  powerful surface branding properties `surfaceMode` and `blendLevel`.\n  The `surfaceStyle` property is still available and works as before, but you\n  now get a deprecation warning if it is used. The property and all its related features\n  will be completely removed in version 5.0.\n\n**NEW**\n\n* Updated required Dart SDK to minimum 2.15 that Flutter 2.8.0 uses.\n  To use this release, at least Flutter 2.8.0 is required.\n \n* Added support for opinionated component theme for the new Material-3 based\n  `NavigationBar`. Flutter version 2.8.0 is the first stable version that\n  includes the new Material-3 design based `NavigationBar`.\n\n* Custom `FlexColorScheme` based themes can now also be defined by\n  alternatively passing in a `ColorScheme` object to the `colorScheme`\n  property in the constructor, as well as in `FlexColorScheme.light` and\n  `FlexColorScheme.dark` factories. When used it overrides the `scheme` and\n  `colors` properties in the factories. Same color properties in any constructor\n  that exists as a direct property in the constructor still have the highest\n  priority and will also override corresponding color properties in passed in\n  `colorScheme`. The feature to make custom FlexColorScheme based themes from\n  standard Flutter color schemes is useful if you already have a predefined\n  elaborate `ColorScheme` definition. You can now use it directly and still\n  use FlexColorScheme for its surface color branding and easy sub-theming.\n  This capability will also be useful when Material-3 based `ColorScheme`\n  in Flutter SDK arrives in the stable channel. With Material-3, color schemes\n  may be created using the new Material-3 design color tools, e.g., from\n  seed color(s) or using dynamic colors extracted from system wallpaper colors.\n  With this feature it will then be able to feed those colors directly into\n  FlexColorScheme, and use them as colors to create your `ThemeData`.\n\n* Added a `ColorScheme` color selection option to selected opinionated\n  component themes configuration class `FlexSubThemesData`. The component themes that\n  support changing their `ColorScheme` based\n  used theme color selection, have one or more properties called\n  `nnnSchemeColor` where `nnn` describes the color feature that can be set\n  to an alternative `ColorScheme` based color and not just its pre-defined\n  `ColorScheme` based color property.\n  The color selector is a `SchemeColor` enum property value used to\n  select the enum value that corresponds to same named color\n  property value in `theme.colorScheme`. This `SchemeColor` color quick\n  selection option has been added to:\n  - Theming `TextField` via `FlexSubThemes.inputDecorationTheme` to select a\n    base color for the border and fill color.\n  - `TabBar` sub-theming to select its indicator color, when you want it to be a\n    different color than the color of the `TabBar` icon and text, which are\n    controlled via `FlexTabBarStyle` in the `FlexColorScheme.tabBarStyle`\n    property as before. It gives you an easy option to override the indicator\n    color with any of the theme's `colorScheme` colors.\n  - To `BottomNavigationBar` via `FlexSubThemes.bottomNavigationBar` to set the\n    preferred color of the icon and label text in the Material-2 based\n    `BottomNavigationBar`, as well as used container background color.\n  - `NavigationBar` in `FlexSubThemes.navigationBarTheme` to set the\n    preferred `ColorScheme` color of the text and icon in the Material-3 based\n    `NavigationBar`, as well as the pill shaped highlight color separately that\n    surrounds the selected icon and its container background color.\n  - `ChipThemeData` from `FlexSubThemes.chipTheme` to change the used\n    `ColorScheme` based base color of Chips.\n* The `SchemeColor` properties for the above component themes have a default selection\n  that results in same `ColorScheme` color values being used as they had\n  before. The additional configuration options are none breaking. The enum\n  properties to modify the used `ColorScheme` color can be defined in the\n  configuration class `FlexSubThemesData` using its new properties:\n  - `inputDecoratorSchemeColor`\n  - `chipSchemeColor`\n  - `tabBarIndicatorSchemeColor`\n  - `bottomNavigationBarUsedColor`\n  - `bottomNavigationBarSchemeColor`\n  - `bottomNavigationBarBackgroundSchemeColor`\n  - `navigationBarIconSchemeColor`\n  - `navigationBarTextSchemeColor`\n  - `navigationBarHighlightSchemeColor`\n  - `navigationBarBackgroundSchemeColor`\n\n* Usage examples of the above new configuration possibilities have been added to\n  the default example, the so-called developers hot reload playground.\n* The ColorScheme color selection in `SchemeColor` includes all colors in\n  `ColorScheme` supported by Flutter 2.8. You may want to avoid using the\n  `primaryVariant` and `secondaryVariant` colors if you want to avoid later\n  migrations. These variant colors are being deprecated in Flutter SDK,\n  see [#93427](https://github.com/flutter/flutter/pull/93427).\n* A later FlexColorScheme version will add support for the new Material-3\n  colors in `ColorScheme` when they land in the stable channel.\n* This quick selection of `ColorScheme` based colors as theme-based\n  colors of component themes, may be extended to a few more component themes in\n  future versions. At least if it is seen as a practical and quick way to\n  customize widget component theme colors within the constraints of colors in\n  the `theme.colorScheme`.\n* As before you can still apply your own total custom component themes to the\n  `ThemeData` created with `FlexColorScheme` by using `copyWith`.\n  FlexColorScheme is a way to easily make fancy, color consistent and\n  balanced `ThemeData` objects using convenience-shortcut properties and\n  methods. It does not prevent you from further modifying and tuning the\n  produced `ThemeData` with standard Flutter SDK features.\n\n**CHANGE**\n\n* All properties in all `FlexColorScheme` constructors are now\n  optional. The change is none breaking, and uses the Material-2\n  design guide example theme light and dark as defaults for undefined values.\n\n* Removed the `uses-material-design: true` line from library\n  `pubspec.yaml` file was removed. It is not required since Material icon\n  features are not used by this package.\n\n\n* **Example 5 - Themes Playground**\n  * Fixed onColor for a few colors in the ThemeData color presentation boxes\n    for cases where it might differ from colorScheme onColors. This could happen\n    when disabling FlexColorScheme.\n  * Fixed index on _AppBarSettings card.\n  * Changed the feature that animate hides not available options based on selections\n    to a version that disables them and resets their state when disabled.\n    A few controls are hidden but take up the same space.\n    Hiding the controls caused the panels to change size, often causing relayout\n    of the masonry-grid layout. This was confusing UX, as entire panels might\n    move into new places. While the UI hide animations were cool, this keeps\n    the panels in the same place in the grid, which is less confusing to use.\n    Panels can still be closed, and it, of course, causes relayout of the grid too,\n    but in that use case it is expected.\n  * Changed ColorScheme indicator boxes to use the themed border radius.\n  * Added a button to copy theme, and improved the explanations to make the\n    functionality more obvious and accessible. Previously, only the entire\n    ListTile was the button. This UI with no button was not so clear. Now\n    there is also a button that says COPY. Clicking on the ListTile still\n    works as well.\n  * Add and updated app icon resources used by all the example apps.\n  * Updated to a new breaking version of StaggeredGridView 0.6.0. It no longer\n    requires previously used bug work-around(s) for a window resize issue that\n    had existed since 2019. For more info on this solved issue, see this\n    [article](https://rydmike.com/gridview).\n  * Added most new features in version 4.2.0 to the Themes Playground app and\n    its theme code generation.\n\n\n* **Example theme — Copy Playground Theme**\n  * Added a new simple template example that is handy for trying copy-pasted\n    theme setup code, generated by Themes Playground example 5.\n\n\n* **Documentation:** Reviewed and corrected many API docs. The API docs are\n  very thorough and complete. They usually cover any question you might have and\n  more. Added a brief \"API Intro and Guide\" chapter to the readme.\n\n\n* **Tests:** Added tests to cover the new features, now total 1123 tests.\n\n\n## 4.1.1\n\n**November 20, 2021**\n\n**FIX DOCS** \n\n* Fixed a broken link in the readme that pub.dev analyzer found.\n\n## 4.1.0\n\n**November 20, 2021**\n\n**FIX**\n\n* The `defaultRadius` in `FlexSubThemesData` now defaults to null, \n  component themes border radius will then default to Material-3 default border\n  radius per widget. The const default value it had before was a remnant from early\n  dev phase when widgets all defaulted to single shared radius and not Material-3\n  defaults per widget type. If you explicitly passed in null, you did also in\n  previous versions get the Material-3 defaults. Older tests did that, but now they expect\n  the same result when no value is assigned, as it should have been.\n\n**CHANGE**\n\nOpt in opinionated component themes minor style changes:\n\n* Added missing themed background color for `SnackBarThemeData` when\n  using opt in opinionated component themes.\n \n* Tuned the colored text theme on the component themes that are applied when\n  using the optional colored text themes. The text styles now better match\n  the regular none-colored style,\n  and they are a bit more subtle. Text style `caption` got a bit\n  of opacity. Material-2 designed widgets like `ListTile`, depend on it for\n  making more muted subtitles by default for `ListTile` via the heading level\n  opacity on `caption` text style. The opacity on it is lower though, to\n  retain a bit more contrast on blended surfaces, while still adhering to\n  the style intent.\n\n* Major updates to readme doc, and typo corrections.\n\n**EXAMPLES**\n\n* Updated and tuned the examples. Example 5, the **Themes Playground**\n  now includes the feature to define custom color schemes starting from built-in ones.\n  It can also generate the FlexColorScheme setup code needed for any defined\n  viewed theme setup. You can copy/paste a theme's Flutter Dart code,\n  from the Themes Playground to your app and use it as its theme. This is a\n  quick and convenient way to try a theme you made and see in the Themes\n  Playground in your own app.\n\n**TESTS**\n \n* Modified tests to catch the fixed `defaultRadius` issue.\n* Added more tests, now total 1069 tests.\n\n## 4.0.0\n\n**November 13, 2021**\n\n### Overview\n\nThe breaking case is a minor difference in produced style for true\nblack mode. Version 4.0.0 is still fully API compatible with version 3.\nVersion 4.0.0 does, however, contain so many new\nfeatures that it in itself warrants a new major release bump.\n\n**BREAKING** \n\n* In dark mode, the `darkIsTrueBlack` now makes `surface` color\n  8% darker instead of 6%. This change was required to support overlay color\n  in dark mode when using `darkIsTrueBlack` when using the new `surfaceMode`\n  property. For more information, see Flutter SDK\n  issue [90353](https://github.com/flutter/flutter/issues/90353).\n \n* From all the color scheme English descriptions, the sentence ending period was removed from all \n  description strings. If and when you want one, you can add it as needed.\n\n**NEW**\n\n* Added a more flexible and powerful alpha blending feature for\n  surface and background colors. The new properties in the `FlexColorScheme`\n  factories `light` and `dark` are `surfaceMode`, of type enum `FlexSurfaceMode`\n  and integer `blendLevel`. Consider using them instead of previous\n  `surfaceStyle`.\n  The surface color blend style `surfaceStyle` is still default, and not yet\n  deprecated, but may be so in version 5. It is not required anymore,\n  but there was no major reason to break things by removing it either.\n  \n* Major new feature, easy sub-theming of Flutter SDK UI widgets.\n  * You can opt in on nice looking opinionated component themes by setting\n  `FlexColorScheme.useSubThemes` to true, it is false by default.\n  * The defaults for the component themes are inspired by\n  [Material-3 design (M3)](https://m3.material.io). It mimics it to a large extent\n  when using default component theme values and settings. The varying corner\n  radius is different per widget type. The new TextTheme Typography is also\n  included. All parts cannot be made to look exactly like Material-3 in Flutter when using\n  [Material-2 design (M2)](https://material.io), but many parts\n  can, and where possible, the defaults try to follow those values. You can, of course, \n  override the defaults.\n  * You can tweak these component themes with a number of parameters\n  defined in the `FlexSubThemesData` class, passed to\n  `FlexColorScheme.subThemesData`.\n  * The `FlexSubThemesData` class provides parameters for easy adjustment\n  of corner radius in Widgets that use `ShapeBorder` or decorations, that\n  support changing the Widget's corner radius. With the component themes enabled, you\n  can create a theme with a consistent corner radius on built-in\n  Flutter SDK UI widgets.\n  * The component themes also harmonize a few other styles, e.g. `ToggleButtons`\n  to match the standard buttons regarding size and design as far as possible.\n  * In case you still use the old deprecated buttons, they also get\n  `ButtonThemeData` that as far as possible match the same style.\n  * Via the component themes, it is by default opted-in to also use a bit of Material You\n  like coloring on the text styles. This can also be opted out of, even if\n  otherwise opting in on component themes, it is on by default when opting in on\n    component themes.\n  \n* Added `FlexThemeData` static extension on `ThemeData`.\n  * FlexColorScheme Themes can now also be created with the new syntax\n  `FlexThemeData.light` and `FlexThemeData.dark`, instead of using\n  `FlexColorScheme.light().toTheme` and `FlexColorScheme.dark().toTheme`.\n  * The `toTheme` method is still available and works as before. It will not\n    be deprecated. It is required when making elaborate custom component themes beyond\n    what is offered when using `FlexColorScheme` based opt-in component themes. When\n    you make custom component themes yourself, you often need access to\n    the `ColorScheme` that is defined in current `FlexColorScheme()` instance.\n    You can get it with `FlexColorScheme().toScheme`. Then use this\n    standard `ColorScheme` or any of its colors, in your custom component theme\n    definitions, that you then add with copyWith to your FlexColorScheme based\n    theme, like `FlexColorScheme().toTheme.copyWith(...\"your sub themes and\n    other ThemeData over-rides here\")`.\n   \n* Added `textTheme` and `primaryTextTheme` properties to\n  `FlexColorScheme` to enable easy setup of custom `TextThemes`, without the\n   need to add a custom `TextTheme` via a `copyWith`, plus `merge` with the\n   default text theme.\n\n* Added `FlexColorScheme.dialogBackground` as a background surface\n  color that can be controlled and themed separately.\n\n* Added `appBarOpacity` to `FlexColorScheme.light()` and `dark()`.\n  With it, you can apply themed opacity to the `AppBar` background color to\n  the selected `FlexAppBarStyle` it is using.\n\n* On the `FlexColorScheme` factories `light` and `dark`, exposed\n  the `Color` properties `primary`, `primaryVariant`, `secondary`,\n  `secondaryVariant`, `appBarBackground`, `dialogBackground` and `error`.\n  They all default to null, but if provided they can be used as override values\n  to factory behaviors defined by `scheme`, `colors`, `appBarStyle`,\n  `surfaceMode` and `surfaceStyle` that\n  otherwise via the factories define the colors for these properties. If a value\n  for one of the new direct color properties is used with the factory, it always\n  has precedence over other properties that assign or compute colors for it.\n \n* Exposed boolean property `applyElevationOverlayColor`. It has the same\n  function as the same property in `ThemeData`. It applies a semi-transparent\n  overlay color on Material surfaces to indicate elevation for dark themes.\n  In `FlexColorScheme` it defaults to true. In Flutter `ThemeData.from` it\n  also default to true, but in `ThemeData` it defaults to false.\n  The property is just available for convenience, so you can avoid a `copyWith`\n  if you wish to turn it off. It is not required or even desired when\n  using strong alpha blends on surfaces in dark mode, to use an elevation\n  overlay color.\n\n* All `FlexSchemeData` objects in `FlexColor` are exposed as static\n  const objects, making them easy to pick and reuse as const objects\n  individually in custom color scheme lists, or as input to the `colors`\n  property. Previously, only the individual color value definitions were exposed.\n \n* Added convenience extension `.blendAlpha()` on `Color`\n  in `FlexColorExtensions`.\n\n* The `FlexThemeModeSwitch` got a bool property `hasTitle`, if set\n  to `false` it removes the title entirely.\n\n* The `FlexThemeModeSwitch` got a `buttonOrder` property using enum\n  `FlexThemeModeButtonOrder` that you can use to define the order of its\n  light, system and dark theme mode buttons, in all possible combinations.\n\n* Added edgeToEdge support to\n  `FlexColorScheme.themedSystemNavigationBar`. This brings the previously\n  experimental support for transparent system navigation bar in Android\n  into the supported fold in FlexColorScheme. Its functionality\n  requires min Android SDK level 29, but other than that, it works without\n  Android setup shenanigans. No added APIs, the API for it already existed\n  in the previous version of FlexColorScheme, using it did, however, require\n  special Android build configuration setup. This is no longer required.\n\n* **New color schemes:** Added four new built-in color schemes. The total number of color schemes is now 36 matched light and dark theme pairs.\n  * **Blue whale**, jungle green and outrageous tango orange. Use enum value `FlexScheme.blueWhale` for easy access to it. This theme is final and selected for inclusion as a new one.\n  * **San Juan blue** and pink salmon theme. Use enum value `FlexScheme.sanJuanBlue` for easy access to it.\n  * **Rosewood** red, with horses neck and driftwood theme. Use enum value `FlexScheme.rosewood` for easy access to it.\n  * **Blumine**, easter blue and saffron mango theme. Use enum value `FlexScheme.blumineBlue` for easy access to it.\n  \n**CHANGE**\n\n* The `FlexColor.schemesList` is now a `const` for improved efficiency.\n\n\n**DOCS**\n \n* The new main example is a complete quick start guide that doubles as the \"developers\" hot reload playground template. It has comments explaining what is going on. If you skip reading the readme docs and tutorial, the example may help to kick-start using FlexColorScheme and all its features. It shows most of the features in last tutorial example 5, but without any interactive UI. You are the UI and can edit prop values and use hot-reload to see changes.\n* All examples now use the new `FlexThemeData` extension syntax to create the `ThemeData` and `surfaceMode` to define the alpha blended surfaces.\n* Examples 2 to 5 also use the in Flutter 2.5 new skeleton architecture, with a ChangeNotifier based controller. AnimatedBuilder to listen to it, and an abstract service to get and persist the theme settings, with a concrete in-memory implementation, plus the implementations to persist the theme.\n  * Examples #2 to #4 use the Hive implementation.\n  * Example #5 uses the SharedPreferences implementation.\n\n**TESTS**\n\n* Added tests for the new features, total 1066 tests.\n* Coverage is now 99%, will improve it more later.\n\n## 4.0.0-dev.1\n\n**November 13, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_4_0_0_dev_1.md)\n\n## 3.0.1\n\n**July 1, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_3_0_1.md)\n\n## 3.0.0\n\n**June 25, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_3_0_0.md)\n\n## 2.1.1\n\n**March 30, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_2_1_1.md)\n\n## 2.1.0\n\n**March 22, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_2_1_0.md)\n\n## 2.0.0\n\n**March 15, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_2_0_0.md)\n\n## 2.0.0-nullsafety.2\n\n**March 15, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_2_0_0-nullsafety_2.md)\n\n## 2.0.0-nullsafety.1\n\n**February 4, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_2_0_0-nullsafety_1.md)\n\n## 1.4.1\n \n**January 31, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_4_1.md)\n\n## 1.4.0\n\n**January 18, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_4_0.md)\n\n## 1.3.0\n\n**January 7, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_3_0.md)\n\n## 1.2.0\n\n**January 4, 2021**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_2_0.md)\n\n## 1.1.1\n\n**December 31, 2020**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_1_1.md)\n\n## 1.1.0\n\n**December 29, 2020**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_1_0.md)\n\n## 1.0.0\n\n**December 21, 2020**\n\n* Version 1.0.0 released\n\n**DOCS**\n\n* Documentation layout updates and typo corrections.\n\n## 1.0.0-dev.2\n\n**December 21, 2020**\n\n* [Changes](https://github.com/rydmike/flex_color_scheme/blob/master/changelog/changelog_1_0_0-dev.2.md)\n\n## 1.0.0-dev.1\n\n**December 17, 2020**\n\n* First development pre-release on pub.dev.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.2919921875,
          "content": "# Code of Conduct for Contributors\n\nWe are committed to creating a friendly and respectful community for everyone who wants to contribute to this open source library. By participating in this project, you agree to abide by the following code of conduct.\n\n## Be respectful and constructive\n\nWe value your feedback and suggestions, but please be respectful and constructive when you communicate with other contributors, maintainers, and users. Avoid personal attacks, insults, trolling, harassment, or any other behavior that could make others feel unwelcome or uncomfortable. If you disagree with someone, try to understand their perspective and explain your reasoning in a polite and clear manner.\n\n## Follow the project guidelines\n\nWe have some guidelines for how to contribute to this project, such as coding style enforced via lint rules, documentation, testing, and pull requests. Please follow these guidelines when you make your contributions. They are designed to ensure the quality and consistency of the codebase, as well as to facilitate the review process. If you are unsure about something, feel free to ask the maintainers or other contributors for help.\n\n## Acknowledge the work of others\n\nWe appreciate your contributions, but we also expect you to acknowledge the work of others who have contributed to this project before you. Do not claim credit for something that is not your own, or plagiarize from other sources. If you use or modify code from other sources, make sure to give proper attribution and follow the license terms.\n\n## Be honest and transparent\n\nWe expect you to be honest and transparent about your contributions. Do not submit code that you know is faulty, incomplete, or untested. Do not misrepresent the purpose or scope of your contribution. Do not hide any potential conflicts of interest or ulterior motives. If you encounter any problems or issues with your contribution, please report them promptly and openly.\n\n## Be open and inclusive\n\nWe welcome contributions from anyone who shares our vision and values for this project. We do not discriminate based on age, gender, race, ethnicity, religion, sexual orientation, disability, or any other personal characteristics. We strive to create an inclusive and diverse community that fosters collaboration and innovation.\n\nThank you for your contribution! 🙏\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.7861328125,
          "content": "# Contributing to FlexColorScheme\n\nThank you for your interest in contributing to **FlexColorScheme**, a Flutter package that provides flexible and easy to use color schemes and theming for Flutter applications. We welcome contributions that fix bugs, introduce enhancements or new features, and correct API documentation errors or typos.\n\n## How to contribute\n\nBefore you start working on your contribution, please follow these steps:\n\n- Fork the repository on GitHub and clone your fork to your local machine.\n- Create a new branch from the main branch and name it according to the type and scope of your contribution. For example, `fix/issue-123` or `feature/new-color-option`.\n- Make your changes in the new branch, following the code style and conventions of the project.\n- Write tests for your changes, using the existing test framework. Make sure your changes do not break any existing tests or decrease the test coverage of the project.\n- Commit your changes with a clear and descriptive message, referencing any relevant issues or pull requests.\n- Push your changes to your fork on GitHub and create a pull request against the main branch of the original repository.\n- Wait for the maintainers to review your pull request and provide feedback or approval.\n\n## What to contribute\n\nWe appreciate any contribution that improves the quality and functionality of the package. Here are some examples of what you can contribute:\n\n- Bug fixes: If you find a bug in the package, please report it as an issue on GitHub and provide a fix if possible.\n- Enhancements: If you have an idea for a new feature or an improvement to an existing feature, please create an issue on GitHub to discuss it with the maintainers before working on it.\n- Documentation: If you notice any errors or typos in the API documentation or the README file, please correct them and submit a pull request.\n\n## What not to contribute\n\nWe value your time and effort, but we also have some guidelines for what kind of contributions we do not accept. Please do not submit contributions that:\n\n- Introduce breaking API changes **without** prior discussion and approval from the maintainers.\n- Add little or no value to the package, such as stylistic or irrelevant updates in the samples that demonstrate usage of the package. Such contributions are unlikely to be merged, as they may cause unnecessary conflicts or maintenance issues.\n- Violate the code of conduct or the license of the project.\n\n## Code of conduct\n\nWe expect all contributors to follow our code of conduct, which promotes a respectful and inclusive contribution community.\n\n## License\n\nBy contributing to **flex_color_scheme**, you agree that your contributions will be licensed under its [BSD 3-Clause License](https://github.com/rydmike/flex_color_scheme/blob/master/LICENSE).\n\nThank you for your contribution! 🙏\n"
        },
        {
          "name": "FEATURES.md",
          "type": "blob",
          "size": 19.0478515625,
          "content": "# FlexColorScheme Feature Details\n\nThis feature details document provides more details and explanations\nof some features in FlexColorScheme V4. The reason for keeping it in\na separate file from the package readme is that the package readme is \nalready very long, and keeping it separate document allows it to be updated and \ncomplemented more freely without updating the package due to complementary\ndocumentation updates.\n\n## Version 4 Notice\n\nThis document is ported from the version 3 readme documentation. \nIt still applies to version 4, it will be updated and more feature documentation \nadded when this document is merged and included in a separate documentation site. \n\n# Contents\n\n- [Visual Density](#visual-density)\n- [Optional FlexThemeModeSwitch](#optional-flexthememodeswitch)\n- [Computed Dark Theme](#computed-dark-theme)\n- [Convenient AppBar Theming](#convenient-appbar-theming)\n- [The TabBar Style](#the-tabbar-style)\n- [True Black](#true-black)\n- [Themed System Navigation Bar in Android](#themed-system-navigation-bar-in-android)\n  - [Android Transparent System Navigation Bar](#android-transparent-system-navigation-bar)\n\n## Visual Density\n\nExamples 3,4 and 5 in this package use **comfortable** adaptive platform visual\ndensity via `FlexColorScheme.comfortablePlatformDensity`, instead of the\ndefault counter application's `VisualDensity.adaptivePlatformDensity`.\n\nThis is an alternative visual density design that on desktop applications\nresults in the Flutter `comfortable` visual density being used, instead of\n`compact`. On devices, they both result in the default large `standard`\nvisual density that is suitable for small touch devices.\n\nThis helper function was added to provide an easy option for using a bit larger\nUI elements on desktop and web apps, while keeping the correct size for devices.\n\nIf the desktop and web versions of the app is used on computers with touch\nscreens, the `comfortable` density provides a nice balance. It still looks\ncompact enough to be desktop like, while providing a bit more touch friendly\nspace, without looking like an overblown small device UI on a desktop.\n\nFlexColorScheme can also use the `VisualDensity.adaptivePlatformDensity` value.\nIf you prefer it, just replace the line with it. If you do not specify any\nvisual density, the Flutter default density `standard` is used on\n**all platforms**. This creates widgets with a lot of white space around and\ninside them. It may not be what you want on web/desktop applications, but is\nthe correct choice for small touch devices. The visual density feature in\nFlutter was created to address this difference in design requirement.\n\nThe Flutter SDK built-in function `VisualDensity.adaptivePlatformDensity`\nwas added to adapt the density according to used platform. The\n`FlexColorScheme.comfortablePlatformDensity` does the same, but with a bit\nmore white space on desktops.  Use the one you like and works best for\nyour use case.\n\n## Optional FlexThemeModeSwitch\n\nOne feature on the `HomePage` of examples 1 to 4 is the `FlexThemeModeSwitch`.\nIt is the UI Widget used for the 3-way theme mode switch used in these\nexamples to change the active theme mode.\n\n<img src=\"https://rydmike.com/assets_fcsv4/theme_mode_switch.png?raw=true\" alt=\"theme mode switch\" width=\"350\"/>\n\nUsing the switch is very simple, give it the currently selected and active theme\nmode, the current `FlexSchemeData` scheme, so it can color its buttons correctly.\nThen use the `onThemeModeChanged` callback for changes to its mode, and change\nthe `themeMode` property in the `MaterialApp` accordingly, to actually change\nthe used theme mode.\n\n```dart\nFlexThemeModeSwitch(\n  themeMode: themeMode,\n  onThemeModeChanged: onThemeModeChanged,\n  flexSchemeData: flexSchemeData,\n),\n```\n\nUsing the `FlexThemeModeSwitch` 3-way theme mode switch is optional and not\nrequired to use `FlexColorScheme` based themes. It is just a custom theme mode\nswitch design and was included as a bonus feature in the\n`FlexColorScheme` package. It was added based on a request after it\nhad been observed in the wild in the Flexfold demo app.\n\nIn the Flexfold demo app the switch was originally a fairly fixed design.\nThis `FlexThemeModeSwitch` has many properties that allow you to customize\nit extensively. You can find its [API\nreference here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeModeSwitch-class.html) and its companion, the\n`FlexThemeModeOptionButton` [API reference here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeModeOptionButton-class.html).\nWith the API you can customize the look of the `FlexThemeModeSwitch`,\nhere are some examples:\n\n<img src=\"https://rydmike.com/assets_fcsv4/ThemeSwitchCustomize.png?raw=true\" alt=\"theme mode customize\"/>\n\nThe `FlexThemeModeOptionButton` is typically used by the `FlexThemeModeSwitch`,\nbut it can also be used as a part of other theme related indicator widgets.\nLike for example the scrolling horizontal list used in example 5, where it is\nused as a theme indicator and selector in a horizontally scrolling list.\n\n<img src=\"https://rydmike.com/assets_fcsv4/ThemeIndicatorList.png?raw=true\" alt=\"theme indicator list\"/>\n\n## Computed Dark Theme\n\nExample 5 allows us to toggle the dark mode, from using its hand tuned\npredefined dark scheme colors, to the dark scheme colors computed from the\nlight scheme colors. Let's use it to compare some examples.\n\nWhen using the **deep blue sea** scheme, the computed dark theme colors ones\nare a bit more dull and muted in this example, the computed dark scheme\nis on the right.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad.png?raw=true\" alt=\"ColorScheme example 5 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad-to-black.png?raw=true\" alt=\"ColorScheme example 5 dark computed\" width=\"250\"/>\n\nWith some other color schemes, like the **Aqua blue** one, there is only a\nminor difference, the computed dark scheme is on the right.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5a2d.png?raw=true\" alt=\"ColorScheme example 5a2 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5a2d-to-black.png?raw=true\" alt=\"ColorScheme example 5 dark computed\" width=\"250\"/>\n\nThe result of the `toDark` method varies depending on how saturated the used\nlight scheme colors are. It is possible to tune the calculated dark scheme by\nmodifying the `whiteBlend` property it uses to blend in white to make the\ndark scheme. The default `whiteBlend` is 35%, this is normally a suitable\nvalue. For more saturated light scheme colors try 40%, which is also used in\nthe Material 2 design guide to convert the default red error color for light\nmode, to dark mode. For light scheme color with low saturation, a white\nblend of 20...30% often produces nice results.\n\nWith the included level slider in the example 5 we can interactively change\nthe `whiteBlend` level for the computed dark mode scheme colors. Let's select\na color scheme, say the **Brand blues** one, then go dark.\n\nBy default, the built-in predefined hand-picked matching dark scheme colors\nfor the dark theme mode are used. Turn on the \"Compute dark theme\" mode,\nthe result is pretty close to the predefined one for this dark scheme with\nthe default level of 35%. Then adjust the white level blend to tune how\nsaturated the computed dark scheme colors are compared to their light scheme\nmaster. At 0% they are the same as the light scheme, at 100%, well then they\nare white, not so useful. A range of 10...50% can produce excellent results.\nWhat is best depends on how saturated your starting light scheme colors are,\nand of course what kind of matching dark theme look you like and want.\n\nIf you use the even darker dark-mode, **true black**, you may want to have a\ndifferent saturation for your dark scheme colors compared to standard\ndark-mode surface. You could easily implement that adjustment with this feature.\n\nThis screen recording compares the computed `toDark` theme result, to the\nbuilt-in hand-picked one. It does this by toggling the mode a few times, so\nyou can compare the different results. It also uses the level slider\nto adjust the `toDark` theme result. A sharp eye might notice that this\nrecording does not use the `defaultError` error color modifier, the changing\ndark error color does not look so nice when tuning the computed scheme colors.\nThe bundled example 5 and live web version of it uses the modifier.\n\n<img src=\"https://rydmike.com/assets/fcs_v1-1-0-phone1.gif?raw=true\" alt=\"Dark scheme calc level\"/>\n\n## Convenient AppBar Theming\n\nLet's study what `FlexColorScheme` can do with the `AppBarTheme` and how you\ncan match it to your surface blending if you like.\n\nYou can easily toggle both dark and light mode AppBars to use differently\nthemed backgrounds. By default, Material design uses AppBars with\n`ColorScheme.primary` color for light theme mode, and the dark background\ncolor in dark theme mode. Without using a separately defined sub `AppBarTheme`,\n**FlexColorScheme** AppBars can use different themed backgrounds based on\nan enum value.\n\nThe themed `AppBar` background can use scheme primary color, default Material\nplain white/dark background color, primary branded surface, primary branded\nbackground color, or a custom AppBar color.\n\nThe `FlexColorScheme` scheme's `appBarColor` is a separate scheme color that\ndoes not exist in Flutter's standard `ColorScheme`, so it does not have to be\nany of the colors available in a `ColorScheme`.\n\nThe predefined schemes use the color defined in a `ColorScheme`\nscheme's `secondaryVariant` color, as their value for the custom `appBarColor`.\nWhen you make your own schemes you can do the same or use a totally\nnone `ColorScheme` related color as the AppBar's custom color option. This\ncolor then becomes one of the FlexColorScheme's easy selectable AppBar theme\ncolor options, via the `appBarStyle` property and the `FlexAppBarStyle` enum,\nin this case via the `custom` choice.\n\nBelow you can see some different branding strengths with a background primary\ncolor branded app bar theme used. This example compares medium versus heavy\nbranding. The medium choice is usually well-balanced, but light can be\nsubtle and nice too. If you want to make a bold statement theme, go with heavy.\nPlease note that the visual impact of the branding also depends on how\nsaturated the primary color is.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5dl.png?raw=true\" alt=\"ColorScheme example 5d light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5el.png?raw=true\" alt=\"ColorScheme example 5e light\" width=\"250\"/>\n\nHere are few more images of the heavy primary color branded version, when\nlooking at some widgets as well.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5fl.png?raw=true\" alt=\"ColorScheme example 5f light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5gl.png?raw=true\" alt=\"ColorScheme example 5g light\" width=\"250\"/>\n\n## The TabBar Style\n\nThe `tabBarStyle` property can be used to toggle the theme the `TabBar`\nreceives. By default, a theme that is designed to make it fit in an `AppBar`,\nregardless of which style you have selected for it, is used. This is the\n`FlexTabBarStyle.forAppBar` style. The typical usage of a `TabBar` is to have\nit in an `AppBar`, and the default style works for this use case.\n\nAlternatively you can choose a style that makes a `TabBarTheme` that fits well\non background colors. Use this option if you intend to use the `TabBar` in a\n`Scaffold` body, in Dialogs, Drawers or other surface and\nbackground colored Material. If you do so, you do not have re-theme it, or\nstyle it separately for this purpose.\n\nIf you intend to use `TabBar` widgets in both AppBars and on surface and\nbackgrounds, you will have to choose the style that most often fits your\nuse case. Then theme it separately for the other use case. You would have to do\nthe same with Flutter standard themes and `TabBarTheme` as well when not\nusing FlexColorScheme, but the first theme your get without effort.\n\nWhich `tabBarStyle` style and resulting `TabBarTheme` actually works best,\ndepends on the background color. Here we see TabBars used on surfaces and in\nan `AppBar`, when the AppBar is using primary color. As can be seen, the tab bar\ntheme that goes well in an app bar in such a case, does not fit on the surfaces\nat all, and wise versa.\n\n<img src=\"https://rydmike.com/assets_fcsv4/TabBar-on-primary.png?raw=true\" alt=\"tab bar on primary\"/>\n\nIf you plan to use only surface or background (also the branded ones) colored\nAppBars, you can see that both tab bar styles, and their resulting themes work\nfor both situations. The difference is minor, and it is a matter of opinion\nwhich one is preferable. Both style options can be used if you restrict your\napp bar color to background colors, or their primary branded variants.\nIn such a use case you can get away with using just one of the built-in\nstyle options, even if you use tab bars in both app bars and on other surfaces.\n\n<img src=\"https://rydmike.com/assets_fcsv4/TabBar-on-surface.png?raw=true\" alt=\"tab bar on surface\"/>\n\n## True Black\n\nDark-mode is nice, but with `FlexColorScheme` you can go even darker, go **true black** with the flick of a\nswitch. When using the true black option for dark-mode, surface, background and scaffold background are set to\nfully black. This can save power on OLED screens as the pixels are turned off, but it can also cause scrolling artefact\nissues when pixels turn fully on and off rapidly as you scroll. You can read about this and see an example of it in\nthe [Material design guide](https://material.io/design/color/dark-theme.html#ui-application)\nas well. (Scroll back up one heading from the link to get to the mention of it.)\n\nIf you use branded surfaces with true black mode enabled, you will notice that the branding has a lower impact,\nonly at strong and heavy levels does it have a visible effect. This is by design to keep most surfaces totally or\nvery close to black when true black is combined with surface branding. If you really want complete black\nfor all surfaces and backgrounds, then avoid combining true black mode with branded surfaces. On the other hand it\nstill makes a darker theme than normal dark theme, which can look nice. It may also eliminate the scrolling issue, since\nall background colored pixels are not fully off in the strong and heavy branded true black modes.\n\nHere is an example of a branded dark theme with true black OFF (default and standard) and true black ON,\nwhen using heavy branding with the **Red red wine** color scheme.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5cd.png?raw=true\" alt=\"ColorScheme example 5c dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5bd.png?raw=true\" alt=\"ColorScheme example 5b dark\" width=\"250\"/>\n\nHere is another difference example with the **Deep blue sea** scheme, when using medium strength surface branding, and\na primary colored app bar in dark-mode.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad.png?raw=true\" alt=\"ColorScheme example 5 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad-true-black.png?raw=true\" alt=\"ColorScheme example 5 true black\" width=\"250\"/>\n\n## Themed System Navigation Bar in Android\n\nThe HomePage's build method for this example starts by wrapping the entire page content in an `AnnotatedRegion`\nwith a `SystemUiOverlayStyle` value that we get from the static helper\n`FlexColorScheme.themedSystemNavigationBar(context, ...)`.\n\nUsing this we can get a system navigation bar, typically on older Android phones that still uses one, that\nfollows the active theme's background color and theme mode. The system navigation bar will get updated as\nyou select new themes, different background color branding style and strength, and\ntoggle dark and light theme mode. Many Flutter applications neglect or forget to include this feature in their themes.\n\n```dart\n   return AnnotatedRegion<SystemUiOverlayStyle>(\n     value: FlexColorScheme.themedSystemNavigationBar(\n       context,\n       systemNavBarStyle: systemNavBarStyle,\n       useDivider: useSysNavDivider,\n     ),\n     child: ....\n   );\n```\n\nAbove the `systemNavBarStyle` is a local `FlexSystemNavBarStyle` state variable tied to the same UI choice in the demo\nhome screen and `useSysNavDivider` is local bool state variable. Together with the option to remove the status bar\nscrim, you can have easy complete control of both the AppBar's status bar, and the system navigation bar look,\nlike shown below:\n\n<img src=\"https://rydmike.com/assets_fcsv4/FlexSchemeAppBar.gif?raw=true\" alt=\"AppBar StatusBar\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/FlexSchemeNavBar.gif?raw=true\" alt=\"SysNavBar Style\" width=\"250\"/>\n\nThe top status bar scrim toggle, system navigation bar divider and style only have an impact\non Android builds, they do not have any functionality on the live Web example.\n\n> **NOTE:**  \n> The static helper `FlexColorScheme.themedSystemNavigationBar(context, ...)` is designed to provide a convenience\n> wrapper for a `SystemUiOverlayStyle` that works for screens that use and adhere to current theme mode colors.\n> If your application use screens that do not follow the current theme, then just use `SystemUiOverlayStyle`\n> directly in the annotated region for such screens to define their desired style. You can also make your own\n> convenience wrapper function or even just a const value for it if you need to use a fixed style and design frequently.\n>\n> The system navigation bar icons do not seem to change color correctly until API30 (Android 11). On earlier\n> API levels you may sometimes end up with light themed system navigation bar icons, even if you requested dark\n> ones from the Android system. This has been observed at least with Pixel 4XL emulator on API29 (Android 10).\n\nYou can also use the `FlexColorScheme.themedSystemNavigationBar` to hide the top status icons if you are not\nusing an app bar at all. This can be useful on a splash or onboarding page. Example 5 contains three different\nexamples, each with their own limitations, read more in the example 5 source code comments on how it\ncan be used, here what they look like. The last Example SplashPage 2, would be the ideal version, and it\nworks well on some versions of Android, but seems to fail on newer ones, so you may prefer 1b instead.\n\n<img src=\"https://rydmike.com/assets_fcsv4/FlexColorScheme-Splash-half-Size.png?raw=true\" alt=\"ColorScheme Splash pages\"/>\n\n## Android Transparent System Navigation Bar\n\nVersion 4 added full support for transparent system navigation bar for Android \nSDK >= 29 (Android 10). The support is added via the\n[opacity](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/themedSystemNavigationBar.html)\nproperty in `FlexColorScheme.themedSystemNavigationBar`.\n\nUse and support for the opacity\nvalue on the system navigation bar is supported \nstarting from Flutter 2.5. The [PR 28616](https://github.com/flutter/engine/pull/28616) will \nonce it lands in stable also result in more predictable\nand consistent behavior, and limit its functionality to SDK >= 29. \n\nIf you build example 5 on an Android device you can try and see the partially and even \nfully transparent Android system navigation bar in action, by using its interactive\n\"Navigation Bar Settings\" panel.\n\n"
        },
        {
          "name": "INSIDE.md",
          "type": "blob",
          "size": 26.193359375,
          "content": "# Inside FlexColorScheme\n\n\nThis document provides more details and explanations\nof the inner workings of FlexColorScheme V4. The reason for keeping it in\na separate file from the package readme is that the package readme is\nalready very long, and keeping it separate document allows it to be updated and\ncomplemented more freely without updating the package due to complementary\ndocumentation updates.\n\n## Version 4 Notice\n\nThis document is ported from the version 3 readme documentation.\nIt still applies to version 4, it will be updated and more inside documentation\nadded when this document is merged and included in a separate documentation site.\n\n# Contents\n- [Introduction](#introduction)\n- [None null sub-themes](#none-null-sub-themes)\n- [ThemeData modifications](#themedata-modifications)\n- [Additional optional widget sub-theming](#additional-optional-widget-sub-theming)\n\n# Introduction \n\n**FlexColorScheme** does not actually use the `ThemeData.from` factory with a passed\nin `ColorScheme` to make its `ThemeData` object. It uses the `ThemeData` factory directly, with\nsome additional custom theming.  It does of course define a `ColorScheme` that it uses in its `ThemeData`.\nFlexColorScheme uses color calculations for the primary color branded/blended surfaces, and\nfor the lazy schemes that do not specify all colors in a color scheme.\n\n# None Null Sub-Themes\n\nFlutter's default Theme and its ThemeData is moving towards a design where all the sub-theme's in the default\nThemeData are NULL. It is always the widget that defines the default behavior and look when its sub-theme and its\nproperties are null and its properties for the same values are null. The widget colors for such cases are\nthen defined by `ThemeData.of(context).colorScheme`.\n\nThis Flutter theming design goal is described in this\n[document](https://docs.google.com/document/d/1kzIOQN4QYfVsc5lMZgy_A-FWGXBAJBMySGqZqsJytcE). It is mostly implemented\nby now, but there might still be some sub-themes in Flutter SDK remaining that do not fully adhere to this design.\n\nFlexColorScheme sets `ThemeData.of(context).colorScheme` to ensure that its colors are applied to all widgets\nthat adhere to this newer standard. It also sets all still existing legacy colors in\n`ThemeData.of(context)`, that some Flutter Widgets still use, to use scheme appropriate or scheme derived colors.\nThanks to this there should not be any built-in Widgets in Flutter that do not get color scheme themed\nby FlexColorScheme.\n\nThe ThemeData created by `FlexColorScheme().toTheme` also tries to not create and modify sub-themes when it does not\nhave to. However, to meet its design goals, FlexColorScheme has to create a number of sub-themes and set some\nof their properties. In some rare cases this is done to correct theming issues in Flutter SDK, and sometimes to\nreach its own design goals. Further below is a list of all the sub-themes it creates and properties that you can\n**currently** expect to have none null values in them. These sub-themes and their properties,\nwould otherwise be null when just using default `ThemeData()` or `ThemeData.from()` factories, if they\ndid not specify sub-themes.\n\nEven though some sub-themes currently are not null, and have some none null properties in FlexColorScheme\nbased `ThemeData`. It is still recommended to use null fallback values if you access ThemeData sub-themes and\ntheir properties in `ThemeData.of(context)` that are null in default `ThemeData`.\n\nFor example, when using the AppBar's theme data, don't just use:\n\n```dart\nfinal Color fabColor = Theme.of(context).appBarTheme.backgroundColor;\n```\n\nIt should never be considered fully **safe** to access properties like it without using null fallbacks.\nInstead, do something similar to this:\n\n```dart\nfinal Color fabColor = Theme.of(context)?.appBarTheme?.backgroundColor ??\n  Theme.of(context).colorScheme.primary ?? kMyDefaultAppBarColor;\n```\n\n**FlexColorScheme** will try to not change past creation of its none null sub-themes. However, changes to these\nimplementation details are only considered breaking if they produce a theme that is visibly different from\npast behavior.\n\n**Flutter SDK** may also change some of its implementation details of `ThemeData`. Take for example the broken\nChip case, if it is modified to fix its dark theme bug, then FlexColorScheme would have no reason\nfor its own fix. In cases where Flutter defaults moves in a direction that the same definition is no longer\nneeded in FlexColorScheme, such sub-theme definitions may eventually be removed, **but not without due warning**.\n\nOne recent such case was the `floatingActionButtonTheme` sub-theme that FlexColorScheme created in earlier\nversions. The used sub-theme did not change Flutter's default behavior. However, in some older versions of\nFlutter there was a severe deprecation warning if the sub-theme was not defined. Later it was\nobserved that Flutter SDK default and FlexColorScheme sub-theme now agrees 100% on the design. There was\nno longer any deprecated warning if the sub-theme was totally removed from FlexColorScheme's theme definition.\nThis sub-theme definition was thus no longer needed and was removed starting from FlexColorScheme  \nversion 2.0.0-nullsafety.2.\n\nAnother similar change that has still not landed in Flutter 2.2.x stable channel, is the deprecation\nof `ThemeData.accentColor`. From version 3.0.0 **FlexColorScheme** is prepared for when this\nchange lands in stable.\n\n* **AppBarTheme** in `ThemeData.appBarTheme` is NOT null.  \n  The actual values are defined to match the offered convenience theming options for the AppBar.\n  The property values depend on made configuration choices.\n    * backgroundColor: *Depends on chosen `appBarStyle`.*\n    * foregroundColor: Black if brightness of backgroundColor is light otherwise white.\n    * iconTheme: Not null, defines:\n        * color: : *Depends on chosen `appBarStyle`.*\n    * actionsIconTheme: Not null, defines:\n        * color: : *Depends on chosen `appBarStyle`.*\n    * elevation: *As defined, default is 0*\n    * systemOverlayStyle: *A custom SystemUiOverlayStyle is defined*\n    * backwardsCompatibility: `false`\n\n\n* **BottomAppBarTheme** in `ThemeData.bottomAppBarTheme` is NOT null.\n    * Color: `colorScheme.background`\n    * elevation: *As defined, default is 0*\n\n\n* **TextSelectionThemeData** in `ThemeData.bottomAppBarTheme` is NOT null.\n    * selectionColor: `dark ? primary.withOpacity(0.50) : primary.withOpacity(0.30)`\n    * selectionHandleColor: `primaryColorDark`\n\n\n* **InputDecorationTheme** in `ThemeData.inputDecorationTheme` is NOT null.\n    * filled: `true`\n    * fillColor: `dark ? primary.withOpacity(0.06) : primary.withOpacity(0.35)`\n\n\n* **ButtonThemeData** in `ThemeData.buttonTheme` is NOT null.\n    * colorScheme: `colorScheme`\n    * textTheme: `ButtonTextTheme.primary`\n    * materialTapTargetSize: `MaterialTapTargetSize.shrinkWrap`\n    * padding: `EdgeInsets.symmetric(horizontal: 16)`\n\n\n* **ChipThemeData** in `ThemeData.chipTheme` is NOT null.  \n  It is defined to fix issue [#65663](https://github.com/flutter/flutter/issues/65663) and uses\n  ChipThemeData.fromDefaults to set:\n    * secondaryColor: `colorScheme.primary`\n    * brightness: `colorScheme.brightness`\n    * labelStyle: `textTheme.bodyText1`\n\n\n* **TabBarTheme** in `ThemeData.tabBarTheme` is NOT null.  \n  Its colors depend on if a theme appropriate for current active app bar background color (default), or one for\n  background and surface color usage is selected. It sets:\n    * indicatorSize: `TabBarIndicatorSize.tab`\n    * labelStyle: `TextTheme().button`\n    * labelColor: *Depends on selected and targeted main usage.*\n    * unselectedLabelColor: *Depends on selected and targeted main usage*.\n\n\n* **BottomNavigationBarThemeData** in `ThemeData.bottomNavigationBarTheme` is NOT null.\n    * selectedIconTheme: Not null, defines:\n        *  color: `colorScheme.primary`\n    * selectedItemColor: `colorScheme.primary`\n\n\n* **TooltipThemeData** in `ThemeData.tooltipTheme` is NOT null. This theme is\n  modified to address issue [#71429](https://github.com/flutter/flutter/issues/71429) and\n  to also enable a toggle that inverts the tooltip colors, which is a style often\n  used on Windows desktops. The toggle can be used to change the style depending on the current platform.\n  The used logic and theme changes are defined as.\n    * margin: `EdgeInsets.symmetric(horizontal: 12, vertical: 6)`\n    * padding: `desktop ? EdgeInsets.fromLTRB(8, 3, 8, 4) : EdgeInsets.symmetric(horizontal: 16, vertical: 8)`\n    * textStyle:\n      ```dart\n      textTheme.bodyText2.copyWith(  \n        inherit: false,\n        color: tooltipsMatchBackground \n           ? dark ? Colors.white : Colors.black    \n           : dark ? Colors.black : Colors.white,    \n        fontSize: desktop ? 12 : 14)\n      ```\n    * decoration:\n      ```dart\n      tooltipsMatchBackground\n        ? BoxDecoration(\n           color: isDark ? const Color(0xED444444) : const Color(0xF0FCFCFC),\n           borderRadius: const BorderRadius.all(Radius.circular(4)),\n           border: Border.all(color: dividerThemeColor))\n       : null // Use default Flutter SDK decoration.\n      ```\n\n# ThemeData Modifications\n\nIn addition to the primary color branded surfaces, full shaded schemes from just one primary color, true\nblack and app bar convenience tricks. The returned `ThemeData` contains some opinionated modifications and theme\ncorrections compared to what you get if you would just use the standard `ThemeData.from` with a `ColorScheme`.\n\nYou can still of course override the returned `ThemeData` with your own theme modifications and\nadditions, by using the `copyWith` method on the resulting `ThemeData` object.\n\nThe following lists the full details of what the differences compared to the standard `ThemeData.from` factory\nare, as well as the rationale behind the made design choices and changes to the defaults.\n\n* `ScaffoldBackground` has its own color property in `FlexColorScheme`\n  and can if so desired differ from the `ColorScheme.background`\n  color. In the used surface branding implementation, the `scaffoldBackground`\n  typically gets no primary branding applied. Only in the heavy choice\n  is there a small amount. Whereas `background` in a FlexColorScheme theme\n  receives the most color branding of the surface colors. This fits\n  well for where the `background` color is typically used in Material background\n  by Widgets, but it does not go so well together with `scaffoldBackground`.\n  This is why it has its own color value in this implementation.\n\n\n* The `dialogBackgroundColor` uses the `ColorScheme.surface` color\n  instead of `ColorScheme.background`. The `background` color needed\n  the strongest branding when branding is used, but this did not look\n  so good on dialogs. Therefore, its color choice was changed to `surface`\n  instead, that gets much lighter branding in FlexColorScheme when it is\n  used. With standard Material surface colors, the `background` and\n  `surface` colors are the same, so there is no difference when using\n  the default background and surface colors.\n\n\n* The `indicatorColor` is same as effectiveTabColor. It uses a function with\n  logic to determine its color bases on if a TabBarTheme was selected that should\n  work on current app bar background color, or on surface/background colors.\n\n\n* For `toggleableActiveColor` the `ColorScheme.secondary` color is used.\n  The Flutter default just uses the default `ThemeData` colors and\n  not the actual colors you define in the `ColorScheme` you create your\n  theme from. Perhaps an oversight in Flutter?\n  See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n\n\n* Flutter themes created with `ThemeData.from` do not define any color\n  scheme related color for the `primaryColorDark` color, this method\n  does.  See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n  The `ThemeData.from` leaves this color at `ThemeData` factory default,\n  this may not match your scheme. Flutter SDK Widgets seldom use this color,\n  so the issue is rarely seen. Like `accentColor`, this color may be\n  deprecated in the Flutter SDK in upcoming versions.\n\n\n* Flutter themes created with `ThemeData.from` do not define any color\n  scheme based color for the `primaryColorLight` color, this method does.\n  See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n  The `ThemeData.from` leaves this color at `ThemeData` factory default\n  this may not match your scheme.  Flutter SDK Widgets seldom use this color,\n  so the issue is rarely seen. Like `accentColor`, this color may be\n  deprecated in the Flutter SDK in upcoming versions.\n\n\n* Flutter themes created with `ThemeData.from` do not define any color\n  scheme based color for the `secondaryHeaderColor` color, this method\n  does. See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n  `ThemeData.from` leaves this color at `ThemeData` factory default this\n  may not match your scheme.  Flutter SDK Widgets seldom use this color,\n  so the issue is rarely seen. Like `accentColor`, this color may be\n  deprecated in the Flutter SDK in upcoming versions.\n\n\n* Background color for `AppBarTheme` can use a custom color theme\n  in both light and dark themes, that is not dependent on the theme's\n  primary or surface color.\n  In the versions prior to Flutter 2.0.0 doing this was difficult to do,\n  as presented in [#50606](https://github.com/flutter/flutter/issues/50606)\n  A new feature in Flutter 2.0.0 implemented via:\n  [#71184](https://github.com/flutter/flutter/pull/71184) makes this easy and\n  better. FlexColorScheme's implementation has been changed to use this\n  new AppBarTheme feature starting from version 2.0.0-nullsafety.2.\n\n\n* The `AppBarTheme` elevation defaults to 0, an iOs style influenced\n  opinionated choice. It can easily be adjusted directly in the\n  `FlexColorScheme` definition with property value `appBarElevation`\n  without creating a sub theme or using `copyWith`.\n\n\n* The `bottomAppBarColor` uses color scheme background color to match the\n  background color of the drawer, bottom navigation bar, possible side\n  menu and system navigation bar on android, if theming of it is used.\n  This is a slight change from the ColorScheme default that uses\n  surface color.\n\n\n* The `BottomAppBarTheme` elevation defaults to `appBarElevation` or 0 if\n  it is null, an iOs style influenced opinionated choice. It can easily\n  be adjusted directly in the `FlexColorScheme` definition with property\n  value `bottomAppBarElevation` without creating a sub theme or\n  using `copyWith`.\n\n\n* In `TextSelectionThemeData`, the standard for `selectionColor` is\n  `colorScheme.primary` with opacity value `0.4` for dark-mode and `0.12`\n  for light mode. Here, primary with `0.5` opacity for dark-mode and `0.3` for\n  light mode is used. The standard for `selectionHandleColor` is\n  `colorScheme.primary`, here we use the slightly darker shade\n  `primaryColorDark` instead, which does not have a proper color\n  scheme color value in Flutter standard `ColorScheme` based themes.\n\n\n* A predefined slightly opinionated `InputDecorationTheme` is used. It\n  sets `filled` to `true` and fill color to color scheme primary color\n  with opacity `0.035` in light mode and with opacity `0.06` in dark-mode.    \n  Since the used theme, does not define a `border` property of `TextField`,\n  an app can easily use both the default underline style, or the\n  outline style by just specifying `OutlineInputBorder()`,\n  when an outlined `TextField` is desired.\n  If you don't  want the filled style, or the primary colored\n  borders in dark-mode, you can override them back with `copyWith`.\n\n\n* The property `fixTextFieldOutlineLabel` is set to `true` by default,\n  it looks better. The only reason why it is not the default in Flutter,\n  is for default backwards legacy design compatibility.\n\n\n* **NOTE:**  \n  Since the old buttons have been deprecated in Flutter 2.0.0\n  they are no longer presented or used in code in FlexColorScheme and its\n  examples. **However**, FlexColorScheme still defines the theme for\n  them described below. Defining the theme does not yet cause any\n  deprecation warnings or errors, as long as that is the case. this\n  theming will be kept available to support out of the box nice themes for\n  the old buttons as before.\n\n\n* Button theming is applied to `ThemeData.buttonColor` using color\n  `colorScheme.primary` color.\n\n\n* For `ThemeData.buttonTheme` the entire color scheme is passed to its\n  `colorScheme` property, and it uses `textTheme` set to\n  `ButtonTextTheme.primary`, plus minor changes to padding and tap target\n  size. These modifications make the old buttons almost match the\n  default design and look of their corresponding newer buttons.\n  The `RaisedButton` looks very similar to `ElevatedButton`,\n  `OutlineButton` to `OutlinedButton` and `FlatButton` to `TextButton`.\n  There are some differences in margins and looks, especially in\n  dark-mode, but they are very similar.\n\n\n* The default theme for Chips contain a design bug that makes the\n  selected `ChoiceChip` widget look disabled in dark-mode, regardless\n  if was created with `ThemeData` or `ThemeData.from` factory.\n  See issue [#65663](https://github.com/flutter/flutter/issues/65663).\n  The `ChipThemeData` modification used here fixes the issue.\n\n\n* For `TabBarTheme`, the Flutter standard selected tab and indicator\n  color is onSurface in dark-mode and onPrimary in light mode, which is\n  designed to fit an AppBar colored TabBar. This is kept, and the default\n  via `FlexTabBarStyle.forAppBar` style, with a minor modification. If\n  AppBar is \"light\", then black87 is used, not black, it is the same as\n  the textTheme on AppBar in light app bar brightness.\n  If the `FlexTabBarStyle.forBackground` style was used, the\n  selected  color is always color scheme primary color, which works well\n  on surface, background and scaffold background colors.\n\n  The unselected TabBar color when `FlexTabBarStyle.forBackground` style\n  is used, is always the onSurface color with 60% opacity. This is also\n  the color if the AppBar background color brightness is light AND its\n  color is white, surface or background colored.\n  Otherwise, when the style `FlexTabBarStyle.forAppBar` is used, the\n  unselected tab bar color is the selected tab color with 70% opacity.\n  This opacity value is the same  as Flutter default for the default\n  theme that is also designed for AppBar usage.\n\n\n* The `BottomNavigationBarThemeData` uses color scheme primary color for\n  the selected item in both light and dark theme mode. Flutter default uses\n  primary in light mode, but default to secondary color in dark mode. Primary\n  color is a design used on iOS by default for the bottom navigation bar in\n  both theme modes. We agree and think it looks better as the default \n  choice for apps in both theme modes.\n\n\n* Default `tooltipTheme` in Flutter is currently a bit flawed on desktop\n  and web, because it defaults to using a very small font (10dp).\n  See issue [#71429](https://github.com/flutter/flutter/issues/71429).\n  The default theming also does not handle multiline tooltips very well.\n  The here used `TooltipThemeData` theme design, corrects both these\n  issues. It uses 12dp font on desktop and web instead of 10dp,\n  and some padding instead of a height constraint to ensure that\n  multiline tooltips look nice too.\n\n\n* FlexColorScheme also includes a boolean property\n  `tooltipsMatchBackground`, that can be toggled to not use Flutter's\n  Material default design that has a theme mode\n  inverted background. Tooltips using light background in light theme\n  and dark in dark, are commonly used on the Windows desktop platform.\n  You can easily tie this extra property to the used platform to make an automatic\n  platform adaptation of the tooltip style if you like. You can also use it\n  to give users a preference toggle where they change the tooltip\n  style to their liking.\n\n\n* The property `transparentStatusBar` is set to true by default. It is\n  used to make to the AppBar one-toned on Android devices, like on iOS devices.\n  Set it to `false` if you want to restore the default Android two toned design.\n\n# Additional Optional Widget Sub-Theming\n\nFlexColorScheme V4 also offers opinionated widget sub-theming that enables you to get\nmore heavily styled and themed widgets automatically. You can customize the\nstyles further via\n[FlexSubThemesData](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData-class.html).\n\nThese sub-themes are as the heading states **opinionated** design choices.\nYou may or may not like them. They can be modified and tuned, some of them only\na bit, while some offer quite extensive quick configuration options. The intent\nis to keep the sub-themes visual results consistent from version to version.\nHowever, changes in the SDK and supporting new features may require minor\nvisual breaking changes to them from time to time.\n\nThe defaults for these\nFlutter Material 2 based theming features, draw inspiration from Material 3,\nand their defaults follow the [Material 3 Design Guide](https://m3.material.io/), \nwithin reasonable limits of current Flutter Material 2 based theming capabilities.\n\nThe sub-themes will be modified and extended when Material 3 features reaches\nFlutter stable channel, to use actual Material 3 implementations in Flutter.\nThis may modify the design of some sub-themes. These changes\nare planned to be included in FlexColorScheme v5, that will be released after\nenough Material 3 features have reached Flutter stable channel. A dev version\nof the package may be released before that, that requires using Flutter\nmaster channel.\n\nTo use the optional sub-theming feature in `FlexColorScheme` use the following\nproperties:\n\n* [`useSubTheme`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/useSubThemes.html)\n  when `true` activates the opinionated sub theming, it is `false` by default.\n* `subThemesData` is a\n  [`FlexSubThemesData`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData-class.html)\n  data class that contain many optional quick configuration parameters\n  for the opt-in widget sub-themes. For example, one of its parameters gives you\n  access to easy use customization of default corner radius on all Flutter SDK\n  UI widgets and elements that supports corner radius either via\n  ShapeBorder or BorderRadiusGeometry. See its\n  [`defaultRadius`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData/defaultRadius.html)\n  property for more information.\n\nWhen you opt in on using sub-themes, the `FlexColorScheme.toTheme` method uses\nthe passed in `FlexSubThemesData` configuration data object, passed in via\n`FlexColorScheme.subThemesData`, or a default one if one is not provided.\n\nThe property values in this `FlexSubThemesData` are used to define the created\nopinionated sub-themes. In some simple cases the sub-themes are created\ndirectly with the Flutter SDK widget sub-theme in question, in the `toTheme`\nmethod. But in most cases it uses separate static sub-theme helper functions\nfrom the `FlexSubThemes` class. \n\nThe configuration class `FlexSubThemesData` offers easy to use configuration\nproperties for using these sub-themes in FlexColorScheme. You can also use\nthe static sub-themes without using FlexColorScheme based theming.\nHowever, the `FlexSubThemesData` has no impact on the static helpers, it\nis the `FlexColorScheme.toTheme` that uses the `FlexSubThemesData` \nclass to configure\nthe opt-in sub-themes. \n\nYou can of course also do this if you use `FlexSubThemesData` outside of \n`FlexColorScheme` or in `copyWith` on each sub-theme with custom ThemeData.\n\nSub themes for the following widgets are provided and used via opt-in\nproperty the `FlexColorScheme.useSubThemes`:\n* `TextButton`\n* `ElevatedButton`\n* `OutlinedButton`\n* Older buttons using `ButtonThemeData`\n* `ToggleButtons`\n* `InputDecoration`\n* `FloatingActionButton`\n* `Chip`\n* `Card`\n* `PopupMenuButton`\n* `Dialog`\n* `TimePickerDialog`\n* `SnackBar`\n* `Tooltip`\n* `BottomSheet`\n* `BottomNavigationBar`\n* `NavigationBar`\n\nIn `ToggleButtons` hover, press, selected and focus states are not\nan exact match for the main buttons. It does not have as flexible styling\nas the main buttons. The theme mimics the style of the `OutlinedButton` for\nnot selected buttons and the style of `ElevatedButton` for selected\nbutton. It does not support `MaterialStateProperty` and has only\none state for different parts of the button. The selected and not selected,\nstates would need different property values to be able to match the general\nbuttons. It can therefore not fully match the same theme style as the\nMaterial states used on two different `ButtonStyleButton` buttons that\nit should match.\n\nThe theme `ButtonThemeData` is included to provide a very similar\ntheme style on the deprecated legacy buttons `RaisedButton`,\n`OutlineButton` and `FlatButton` as on the current main buttons. It is not\nan exact match, since the legacy buttons do not offer as flexible\nstyling as the newer buttons. They do follow and match the styling on\n`ToggleButtons` when it comes to hover, press, selected and focus.\nPlease consider phasing out the legacy buttons, as they are deprecated and\nmay soon be removed from the Flutter SDK.\n\nThe following widgets that have rounded corners are excluded from the\nsub-theming:\n* `Tooltip`, generally so small that larger prominent rounding the\n  opinionated sub-theming is designed for, is not a good fit.\n  FlexColorScheme does include out of the box theming options for tooltips,\n  that also adapts to color branding when opting in on sub themes,\n  it also gets a bit more rounded than when not opting in on sub themes.\n* `Scrollbar`, rounding on edges of scrollbars are left to platform default.\n* `AppBar` and `BottomAppBar` shape properties are left to their defaults.\n* `SnackBar` the floating snackbar should be sub-themed to also include\n  border radius, but the none floating one should remain\n  straight. Unclear if it can be done via SDK's current theming features,\n  will investigate more in future version.\n* `Drawer` should have 16dp default rounding on shown side edge, but in\n  current version of Flutter SDK (2.8.1 when this was written) it has\n  no theme property to enable\n  this. It is coming in later Flutter version since it is required by the\n  Material 3 design. When it is available, it will be added.\n\n\nYou can find more information about available sub-theme\nhelpers\n[here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemes-class.html).\nYou can also use these static sub-theme helpers to manually define widget\nsub-theme and even modify them using `copywith`."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.5400390625,
          "content": "BSD 3-Clause License\n\nFlexColorScheme Copyright (c) 2020 - 2024\nMike Rydstrom (Twitter @RydMike GitHub rydmike)\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-V3.md",
          "type": "blob",
          "size": 120.0400390625,
          "content": "[![Pub Version](https://img.shields.io/pub/v/flex_color_scheme?label=flex_color_scheme&labelColor=333940&logo=dart)](https://pub.dev/packages/flex_color_scheme) ![GitHub Workflow Status (event)](https://img.shields.io/github/workflow/status/rydmike/flex_color_scheme/Test?event=push)\n![Test](https://github.com/rydmike/flex_color_scheme/workflows/Test/badge.svg) [![codecov](https://codecov.io/gh/rydmike/flex_color_scheme/branch/master/graph/badge.svg?token=4XJU30IGO3)](https://codecov.io/gh/rydmike/flex_color_scheme) [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n# FlexColorScheme\n\nUse **FlexColorScheme** to make beautiful color scheme based Flutter themes, with optional color \nbranded surfaces. The created themes are based on the same concept as Flutter's ColorScheme based \nthemes, with many additional features.\n\n<img src=\"https://rydmike.com/assets_fcsv4/CollageSize50.png?raw=true\" alt=\"ColorScheme Intro\"/>\n\n# Contents\n- [FlexColorScheme](#flexcolorscheme)\n  - [Contents](#contents)\n  - [Introduction](#introduction)\n    - [Color Branded Backgrounds and Surfaces](#color-branded-backgrounds-and-surfaces)\n    - [Nuanced Scheme Set from One Color](#nuanced-scheme-set-from-one-color)\n    - [What About My Own Theme Additions?](#what-about-my-own-theme-additions)\n    - [Built-in Color Schemes](#built-in-color-schemes)\n      - [This ColorScheme Should be Different](#this-colorscheme-should-be-different)\n      - [If I don't Use the Predefined Schemes, Why Should I Use FlexColorScheme?](#if-i-dont-use-the-predefined-schemes-why-should-i-use-flexcolorscheme)\n      - [Design Your Custom Schemes for FlexColorScheme](#design-your-custom-schemes-for-flexcolorscheme)\n      - [Can We Change this Predefined Scheme's Colors?](#can-we-change-this-predefined-schemes-colors)\n      - [Can We Add This Scheme?](#can-we-add-this-scheme)\n  - [Installing and Using](#installing-and-using)\n    - [Default Sample Application](#default-sample-application)\n    - [Live WEB Demos of the Examples](#live-web-demos-of-the-examples)\n  - [Tutorial](#tutorial)\n    - [Used HomePage in the Examples](#used-homepage-in-the-examples)\n    - [Optional FlexThemeModeSwitch](#optional-flexthememodeswitch)\n  - [Example 1 - Use a Predefined Color Scheme](#example-1---use-a-predefined-color-scheme)\n    - [Building and running example 1](#building-and-running-example-1)\n  - [Example 2 - Create a Custom Color Scheme](#example-2---create-a-custom-color-scheme)\n  - [Example 3 - Switch Between Different Color Schemes](#example-3---switch-between-different-color-schemes)\n  - [Example 4 - Switch Between Built-in Color Schemes and Custom Ones](#example-4---switch-between-built-in-color-schemes-and-custom-ones)\n  - [Example 5 - Full Featured Demo](#example-5---full-featured-demo)\n    - [Local State and Setup](#example-5---local-state-and-setup)\n    - [FlexColorScheme Properties and toTheme](#example-5---the-flexcolorscheme-properties-and-totheme)  \n    - [FlexColorScheme Properties and toScheme](#example-5---the-flexcolorscheme-properties-and-toscheme)  \n    - [Equivalent Setup for the Dark Theme, but with More Options](#example-5---equivalent-setup-for-the-dark-theme-but-with-more-options)    \n    - [Passing All the Values Back and Forth to the HomePage](#example-5---passing-all-the-values-back-and-forth-to-the-homepage)\n    - [Themed System Navigation Bar in Android](#example-5---themed-system-navigation-bar-in-android)\n    - [Building the Example](#example-5---building-the-example)\n    - [Computed Dark Theme](#example-5---computed-dark-theme)\n    - [Computed Dark Theme with Level Adjustment](#example-5---computed-dark-theme-with-level-adjustment)\n    - [Branded Surfaces and App Bar Options](#example-5---branded-surfaces-and-app-bar-options)\n    - [The TabBar Style](#example-5---the-tabbar-style)\n    - [True Black](#example-5---true-black)\n  - [Android Transparent System Navigation Bar](#android-transparent-system-navigation-bar)\n  - [Behind the Scenes](#behind-the-scenes)\n    - [None Null Sub-Themes](#none-null-sub-themes)\n    - [ThemeData Default Modifications](#themedata-default-modifications)\n  - [Appendix A - Built-in Scheme Reference](#appendix-a---built-in-scheme-reference)\n  \n## Introduction\n\nGenerally when you design Flutter applications you should base the colors of your application on a light theme mode\n`ColorScheme` and a dark theme mode `ColorScheme`. Then make your light and dark ThemeData from these color schemes.\n\nIn your `MaterialApp` you then use these color schemes for the light and dark themes. This gives you an \napplication that uses the defined color scheme on the built-in Material UI Widgets, well on most of them anyway.\nFlutter's `ThemeData.from` a `ColorScheme` has a few gaps, the used color scheme is not consistently applied \nto **all** standard Material UI Widgets.\n\nFlexColorScheme corrects these minor inconsistencies and gaps that exist in the current version of Flutter's\n`ThemeData.from` factory. It also makes a few opinionated, but subtle theme modifications compared to the\n`ThemeData.from` themes created from a `ColorScheme`. These topics are covered in detail in the\n[last chapter](#behind-the-scenes) and in the blog article you can find a\n[visual presentation](https://rydmike.com/colorscheme#the-difference) of the differences.\n\nFlexColorScheme also does some other nice theme design tricks. If you have seen the Flutter\n[**Flexfold web demo**](https://rydmike.com/demoflexfold) application, then you\nhave seen **FlexColorScheme** in action. The Flexfold demo app uses this package for its fancy theming and to\nenable effortless switching between all the themes it uses. The included examples in this package, show you how \nthe Flexfold demo app theming is done. The [tutorial chapter](#tutorial) walks through and explains\neach example in detail.\n\nFor some additional information about **FlexColorScheme** and its background see this \n[**blog**](https://rydmike.com/colorscheme).\n\n## Installing and Using\n\nIn the `pubspec.yaml` of your **Flutter** project, add the following dependency:\n\n```yaml\ndependencies:\n  flex_color_scheme: ^3.0.1\n```\n\nIn your library file add the following import:\n\n```dart\nimport 'package:flex_color_scheme/flex_color_scheme.dart';\n```\n\nYou can now start using `FlexColorScheme` based themes in your application. The easiest way to do so is to use one\nof the 32 built-in color schemes. The schemes have enums that you can use to refer to them. Their corresponding\ndata object holds name, description and separate scheme data for each schemes' light and dark mode.\n\nAs a simple use case, take the **default Flutter counter app**, do the above installation and select one of the\nbuilt-in FlexColorScheme's schemes to use with it.\n\nIn this example we use **\"Oh Mandy red\"** scheme that is represented by enum value `FlexScheme.mandyRed`.\n\nWe set `MaterialApp.themeMode` to `ThemeMode.system`, so that the device can control if the app\nuses its light or dark theme mode, based on the device theme mode system setting.\n\nTotally just one property modified, and two properties added to the default counter app, plus the package\nimport of course. The modified `MaterialApp` from the Flutter default counter app is shown below.\n\n```dart\n  class MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      // The Mandy red, light theme.\n      theme: FlexColorScheme.light(scheme: FlexScheme.mandyRed).toTheme,\n      // The Mandy red, dark theme.\n      darkTheme: FlexColorScheme.dark(scheme: FlexScheme.mandyRed).toTheme,\n      // Use dark or light theme based on system setting.\n      themeMode: ThemeMode.system,\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n```\n\nThe above additions gives us the following counter app look:\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_counter_app.png?raw=true\" alt=\"counter sample\"/>\n\nPerhaps not so exciting, that is because the basic counter app uses very few features and widgets, so it cannot really\nillustrate the result very well. This is why the included examples contain demo UI, that is not really at all relevant\nto using FlexColorScheme and is really only there to better demonstrate the results.\n\n\n\n\n### Color Branded Backgrounds and Surfaces\n\nThe Material Guide briefly mentions\n[color branded surfaces](https://material.io/design/color/dark-theme.html#properties). \nIn the next version of Material Design called **MaterialYou**, color branded surfaces are \nused extensively.\nWith **FlexColorScheme** you can easily create such primary color branded themes. \nThis is done by using the four built-in strengths for blending in\nprimary color into surface and background colors. Color branding of the scaffold background color,\nis only done very slightly at the highest strength. \nIt is quite interesting what a bit of extra flair and purposefully designed feeling it\ncan result in when used appropriately.\n\n### Nuanced Scheme Set from One Color\n\nA `FlexColorScheme` can like Flutter's standard `ColorScheme` be created by specifying all the required\nscheme colors. However, with `FlexColorScheme` you can also specify only the primary color, and \nget all other colors needed for a complete color scheme computed based the given primary color.\n\nThere is a helper class, with a factory called `FlexSchemeColor.from` that can do this for you. The \n`toDark` method on `FlexSchemeColor` can create a computed matching dark scheme from a defined light scheme.\nThis works regardless of if you created a fully specified custom light scheme, or one from just a single color.\nThese features are presented and explained in tutorial\n[example 4](#example-4---switch-between-built-in-color-schemes-and-custom-ones) and\n[example 5](#example-5---full-featured-demo).\n\nThese features are useful when you quickly want to test a single color, or maybe a single\nprimary and secondary color for a light theme, and get all other scheme colors computed.\n\n### What About My Own Theme Additions?\n\nFlexColorScheme does not get in the way of adding your own additional custom theming to your application.\nWhen you have defined your `FlexColorScheme`, you make a theme based on its color scheme with `FlexColorScheme.toTheme`,\nthat returns a `ThemeData` object that you can use like any other `ThemeData` object. You can then \noverride this returned `ThemeData` and add additional custom sub-theming to it with the normal\nThemeData `copyWith` method, before passing it on to your application's `theme` or `darkTheme` property.\n\n### Built-in Color Schemes\n\nColor schemes are no fun without some built-in example schemes to use and play with.\n**FlexColorScheme** comes with **36** ready to go matching light and dark color schemes, that you can \nuse in your applications if you like. Here is a composite image showing them all.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_all_schemes_32_at_100.png?raw=true\" alt=\"ColorScheme all\"/>\n\nThe above image is an overview of all the color schemes. In the package companion blog post you can\nfind [**high resolution images**](https://rydmike.com/colorscheme#built-in-color-schemes) of each one of them.\n\nAnother convenient and recommended way to see and try all the predefined color schemes is by using the live Web\nversions of the package [example 4](https://rydmike.com/flexcolorscheme4) or \n[example 5](https://rydmike.com/flexcolorscheme4). Using the examples you can try all the built-in color schemes \nand see the impact they have on often used Flutter widgets. \n\nIn [**Appendix A**](#appendix-a---built-in-scheme-reference) you\ncan find a table listing all the built-in color schemes, their `FlexScheme` enum value, name and description, plus \nthumbnail of each color scheme, with a link to its high-resolution images.\n\nThe built-in color schemes are all tuned matching light and dark scheme pairs. Most of them are pretty conservative,\nbut some are intentionally a bit more playful and bold. The first two color schemes are actually\nthe Flutter and Material Design Guide examples of light and dark color schemes, and the Flutter high contrast light and\ndark color versions as well. So OK, there are actually \"only\" 30 new ready-made light and dark color scheme pairs.\n\n#### This ColorScheme Should be Different!\n\nThe built-in schemes in no way claim to be a \"this selection\" fits all needs collection, nor do they claim to be \nmore correct than any other color scheme. What fits your needs and looks good to you, is of course the right choice\nfor your application and use case. You can make your own custom scheme totally from scratch, or use these as \na starting point. Copy colors from existing schemes or change colors that do not fit your design requirements.\n\n#### Design Your Custom Schemes for FlexColorScheme\n\nThe package examples show how you can easily make and use your own custom schemes with FlexColorScheme. Maybe \nthe built-in examples will inspire your creative side to define your own schemes. The tutorial walks you through how\nto define your own color schemes and make themes based on them too.\n\nYou can even create your own custom list or map of schemes and use all of them, instead of the built-in ones. \nThe built-in schemes implementation can then function as one possible implementation guide on how to do this.\n\nWhile building, testing and using this package over a period of time, a number of color schemes were born as a \nside product. I decided to include them in FlexColorscheme and offer them for re-use and inspiration as they are.  \nIt is however not necessary to use them to get the benefits of FlexColorScheme.\n\nThe color and scheme definitions for the built-in color schemes are in their own classes. They will not be included \nin the release compiled version of your application if you do not use (reference) them in your application, and instead \nonly use your own custom scheme colors.\n\n#### If I don't Use the Predefined Schemes, Why Should I Use FlexColorScheme?\n\nThe purposes with the FlexColorScheme package is to: \n* Enable easy switching among multiple color schemes in an app. \n* Address some gaps in Flutter's default color scheme based themes.\n* Provide an easy way to make themes with primary color branded backgrounds and surfaces, \n  and to easily vary this branding strength. \n* Provide an easy toggle for different app bar styles, without the need to manually make a custom theme \n  for it every time. \n* Provide optional support for a **true black** mode for dark themes.\n* Be able to quickly swap the primary and secondary color definitions, if you want to try your\n  theme the other way around.\n\nAdditionally, FlexColorScheme introduces a way to make \"lazy\" quick toned `ColorScheme` like themes from just a single\nlight scheme color. Even its dark scheme counterpart can be made from this single color definition. To understand how\nthis can be done, it is recommended to go through the tutorial in this readme file.\n\nIf you like and need the above features, then FlexColorScheme may fit your theming requirements even if you do not\nuse any of its built-in color schemes. There is no need to use any of the built-in color schemes to \nbenefit from FlexColorScheme's capabilities.\n\n#### Can We Change this Predefined Scheme's Colors?\n\nNo, current predefined schemes will not be changed. Changing them would be a breaking change to the package\nversion promise. Sure, the scheme colors could in theory be changed by releasing a new major version \nthat break past scheme color definitions. \n\nAt the moment, there are no plans to ever add breaking releases to just change a predefined \nscheme's color(s). All current color definition values are also included in the package tests, and\na failed color value test is considered a breaking change.\n\n#### Can We Add This Scheme?\n\nTo keep things interesting, I do plan to from time to time add new color schemes to the built-in ones.\n\nInspired by **MaterialYou**, I recently hooked up FlexColorScheme with an algorithm that extracts\nprominent colors from images. Then fed these colors to FlexColorScheme to make themes from them.\nThe new color schemes in release 3.0.0 came from these image based theme experiments.\nYou can see examples of FlexColorScheme making color schemes and themes from \nimages in my Tweets about it. This was a first [quick test](https://twitter.com/RydMike/status/1399139552200114179?s=20)\nof the idea, later I added some more features to it, [here](https://twitter.com/RydMike/status/1399301081939820545?s=20) and [here](https://twitter.com/RydMike/status/1399933068614504451?s=20). This\nexperiment shows that **FlexColorScheme** is very versatile.\n\nIf you have a beautiful color scheme with matching light and dark theme mode colors, that you think \nshould be included in the built-in schemes, please post a \nsuggestion as a GitHub issue. No promise is made about its eventual inclusion, but if I also \nthink it is a nice, unique and overall a pretty color scheme, it will very likely be included.\nComing up with nice color schemes is trickier than it seems, so contributions to new ones will \ncertainly be considered.\n\n\n\n#### Can I use different built-in color schemes for my light and dark themes?\n\nYes this is possible, just use different `FlexScheme` enum values for the light and dark FlexColorScheme factories\n`scheme` property. If the colors used by the selected schemes are a bit related, this\ncan be used to create nice and unique light and dark combinations of the predefined schemes.\n\nBy using the `colors` property you could even apply a `FlexSchemeColor` that has data that was designed for a light \ntheme to the `FlexColorScheme.dark` factory and wise versa. For example, with the \n`FlexColorScheme.dark` factory, you could to its `colors` property assign the `FlexSchemeColors` from  \n`FlexColor.schemes[FlexScheme.mandyRed].light` that are designed and intended to be used with the light mode factory.\nThe results will typically just not be as useful or pretty.\nThe rationale for the slightly involved structure, is to keep it flexible, but at the same time provide self\ndocumenting API guidance on how the data was designed to be used and consumed. \n\nThe new `scheme` property \nprevents using the light scheme colors for the dark factory and wise versa. It can however still be done if so desired\nwith the `colors` property as shown above. The `colors` property is always needed and used when you make \ncustom color schemes with the `FlexColorScheme.light` and `FlexColorScheme.dark` factories.\n\n### Default Sample Application\n\nThe package contains five different example applications with increasing complexity.\n\n**Example 1**, is just a repeat of the above example, but with a `themeMode` 3-way toggle\nswitch, an effective theme colors presentation widget, plus a bunch of dummy commonly \nused Material UI widgets.\n\nTo try the simplest and default **example 1** on a device or simulator,\nclone the [repository](https://github.com/rydmike/flex_color_scheme) and run the example:\n\n```bash\ncd example/\nflutter run --release\n```\n\nThe result is a sample app that uses the built-in \"Oh Mandy red\" color scheme as its theme. Has a\nlight/dark/system theme mode switch, includes a theme colors presentation widget and Material UI widget samples.\nWith them, you can see the active theme's colors, and the created theme's impact on common Material UI widgets.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1al.png?raw=true\" alt=\"ColorScheme example 1 light\" width=\"180\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1bl.png?raw=true\" alt=\"ColorScheme example 1 lightb\" width=\"180\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1cl.png?raw=true\" alt=\"ColorScheme example 1 dark\" width=\"180\"/>\n\nExample app 1, shows the simplest use-case of FlexColorScheme and barely scratches the \nsurface of what it can do. To get the full details in a step by step progression, go through the tutorial. \nIt uses examples 1 through 5 to introduce more features with increased complexity.\n\n> **Building the examples**\n> \n>If you cloned the repository to build the examples, you can open the package `/example` folder with your IDE to build\n>the above default example. This example is the same as the example in the `/example/lib/example1` folder.\n> \n>If you want to build the other examples, without setting up different configurations in your IDE for the different\n>main files. Copy and paste the wanted example's `main.dart` code, into the `/example/lib/main.dart` file to\n>build it from your IDE. After copying the new main example content, change the relative\n>import for the \"all shared imports\" file to:  \n>`import 'all_shared_imports.dart';`   \n>For examples 4 and 5, also the \"sub_page\" import to:  \n>`import 'shared/sub_page.dart';`\n\n### Live WEB Demos of the Examples\n\nIf you want to take a quick look at all the examples, you can try live web versions of them.\n\n[**Example 1**](https://rydmike.com/flexcolorscheme1) represents the simplest use case, to just use one of the\nbuilt-in color schemes as your application theme. You can toggle between its light\nand dark variant, or allow device system theme mode setting to control if the dark or light theme is used.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1al.png?raw=true\" alt=\"ColorScheme example 1 light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1ad.png?raw=true\" alt=\"ColorScheme example 1 dark\" width=\"120\"/>\n\n[**Example 2**](https://rydmike.com/flexcolorscheme2) is like example 1, but here we use custom colors\nto make a custom color scheme and turn it into a theme.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2al.png?raw=true\" alt=\"ColorScheme example 2 light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2ad.png?raw=true\" alt=\"ColorScheme example 2 dark\" width=\"120\"/>\n\n[**In example 3**](https://rydmike.com/flexcolorscheme3) we can toggle the active theme between 3 different\npredefined color schemes, plus the custom one we made in example 2.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3al.png?raw=true\" alt=\"ColorScheme example 3a light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3ad.png?raw=true\" alt=\"ColorScheme example 3a dark\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3bl.png?raw=true\" alt=\"ColorScheme example 3b light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3bd.png?raw=true\" alt=\"ColorScheme example 3b dark\" width=\"120\"/>\n\n[**In example 4**](https://rydmike.com/flexcolorscheme4) we can select any of the different built-in color schemes,\nplus three custom ones, and use them as the application theme.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4al.png?raw=true\" alt=\"ColorScheme example 4a light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4bl.png?raw=true\" alt=\"ColorScheme example 4b light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4cl.png?raw=true\" alt=\"ColorScheme example 4c light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4cd.png?raw=true\" alt=\"ColorScheme example 4c dark\" width=\"120\"/>\n\n[**Example 5**](https://rydmike.com/flexcolorscheme5) is the last, and most complex of the examples and presents\nmore configuration options, that you can also modify interactively. \nThis example is best seen and tested on a tablet, desktop or desktop web browser, rather than on a phone, but it\ncertainly works on a phone sized canvas too. This example is explained in more detail further below.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5al.png?raw=true\" alt=\"ColorScheme example 5 light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5bl.png?raw=true\" alt=\"ColorScheme example 5b light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5fl.png?raw=true\" alt=\"ColorScheme example 5f light\" width=\"120\"/><img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5gl.png?raw=true\" alt=\"ColorScheme example 5g light\" width=\"120\"/>\n\n[**Flexfold demo**](https://rydmike.com/demoflexfold)\n\nA fancier example of **FlexColorScheme** usage can be seen in the [**Flexfold demo app**](https://rydmike.com/demoflexfold).\n\n<img src=\"https://rydmike.com/assets/FoldTheme1.gif?raw=true\" alt=\"FlexFold Demo\" width=\"800\"/>\n\nIt might look and feel complicated, but it is actually only slightly more involved than above example nr 5, that\nhas almost all the same theming features as the Flexfold demo app.\n\nGo through all the examples in the tutorial below, and you will be ready to make cool interactively \ncustom themed apps like this in no time.\n\n## Tutorial\n\nIn this tutorial we go through all the bundled examples and explain the used `FlexColorScheme` features in each example.\nFor simplicity the example applications do not use any state management solution. The key part for each\nexample is always in the used stateful `MaterialApp`, where all the scheme setup for the themes are made. The rest of\nthe content in the examples is just there to make a visual presentation of the resulting theme from the used\ncolor scheme.\n\n### Used HomePage in the Examples\n\nThe content of the `HomePage` in all these examples is not relevant for using `FlexColorScheme` based\napplication theming. The critical parts are in the example `MaterialApp` theme definitions. The `HomePage` just\ncontains UI to visually show what the resulting themes look like, when used in an application with frequently \nused Flutter Widgets.\n\nIn **example 5** we can also make interactive changes to many `FlexColorScheme` API values, to\nsee and learn how they work in practice.\n\nIn all the examples we pass in the `FlexSchemeData` object we used for the active theme to the application's `HomePage`.\nThis is not needed in order to use `FlexColorScheme` based themes. It is done to be able to show\nthe active color scheme's name and description in the examples. It also provides the right color data for \nthe 3-way theme mode switch `FlexThemeModeSwitch`. The switch uses the light and dark scheme colors in its theme \nmode option buttons. This way the theme mode option buttons always show the 4 main colors in \nthe active light and dark color scheme used by the active theme.\n\n### Optional FlexThemeModeSwitch\n\nOne unique feature on the `HomePage` of all the examples is the `FlexThemeModeSwitch`. It is the UI Widget used\nfor the 3-way theme mode switch used in all the examples to change the active theme mode.\n\n<img src=\"https://rydmike.com/assets_fcsv4/theme_mode_switch.png?raw=true\" alt=\"theme mode switch\" width=\"350\"/>\n\nUsing the switch is very simple, give it the currently selected and active theme mode, the current `FlexSchemeData`\nscheme, so it can color its buttons correctly. Then use the `onThemeModeChanged` callback for changes to its mode,\nand change the `themeMode` property in the `MaterialApp` accordingly, to actually change the used theme mode.\n\n```dart\nFlexThemeModeSwitch(\n  themeMode: themeMode,\n  onThemeModeChanged: onThemeModeChanged,\n  flexSchemeData: flexSchemeData,\n),\n```\n\nUsing the `FlexThemeModeSwitch` 3-way theme mode switch is optional and not required to\nuse `FlexColorScheme` based themes. It is just a custom theme mode switch design and was included\nas a bonus feature in the `FlexColorScheme` package. It was added based on a request after it\nhad been observed in the wild in the Flexfold demo app.\n\nIn the Flexfold demo app the switch was originally a fairly fixed design. This `FlexThemeModeSwitch` has many\nproperties that allow you to customize it extensively. You can find its [API\nreference here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeModeSwitch-class.html)\nand its companion, the `FlexThemeModeOptionButton`\n[API reference here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeModeOptionButton-class.html).\nWith the API you can customize the look of the `FlexThemeModeSwitch`, here are some examples:\n\n<img src=\"https://rydmike.com/assets_fcsv4/ThemeSwitchCustomize.png?raw=true\" alt=\"theme mode customize\"/>\n\nThe `FlexThemeModeOptionButton` is typically used by the `FlexThemeModeSwitch`, but it can also be used as a part\nof other theme related indicator widgets. Like for example the scrolling horizontal list used in the Flexfold demo app,\nwhere it is used as a theme indicator in a list. This is used as a way to show all available themes and select \nthe active theme, it is as an alternative to the rather plain popup menu.\n\n<img src=\"https://rydmike.com/assets_fcsv4/ThemeIndicatorList.png?raw=true\" alt=\"theme indicator list\"/>\n\n## Example 1 - Use a Predefined Color Scheme\n\nThe first and simplest example shows how you can use a predefined color scheme in `FlexColorScheme` to\ndefine light and dark themes using the scheme, and then switch between the light and dark mode. A theme showcase\nwidget shows the theme's effect on several common Material widgets.\n\nThis example is basically a repeat of the Flutter default counter app modification earlier, but with a different\n`HomePage` and a way to change the `MaterialApp` active `themeMode` property value with the `FlexThemeModeSwitch`\nswitch on the `HomePage`. This done in the example by using simple value changed callback function.\n\n ```dart\nvoid main() => runApp(const DemoApp());\n\nclass DemoApp extends StatefulWidget {\n  const DemoApp({Key key}) : super(key: key);\n  @override\n  _DemoAppState createState() => _DemoAppState();\n}\n\nclass _DemoAppState extends State<DemoApp> {\n  // Used to select if we use the dark or light theme.\n  ThemeMode themeMode = ThemeMode.light;\n\n  @override\n  Widget build(BuildContext context) {\n    // Define which predefined FlexScheme to use.\n    // Go ahead and try some other ones too.\n    const FlexScheme usedFlexScheme = FlexScheme.mandyRed;\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'FlexColorScheme',\n      // A light scheme, passed to FlexColorScheme.light factory, then use\n      // toTheme to return the resulting theme to the MaterialApp theme.\n      theme: FlexColorScheme.light(\n        scheme: usedFlexScheme,\n        // Use comfortable on desktops instead of compact, devices use default.\n        visualDensity: FlexColorScheme.comfortablePlatformDensity,\n      ).toTheme,\n      // Same thing for the dark theme, but using FlexColorScheme.dark factory.\n      darkTheme: FlexColorScheme.dark(\n        scheme: usedFlexScheme,\n        visualDensity: FlexColorScheme.comfortablePlatformDensity,\n      ).toTheme,\n      // Use the above dark or light theme, based on active themeMode\n      // value light/dark/system.\n      themeMode: themeMode,\n      // The HomePage, with its properties. In this example we pass it the\n      // current themeMode, change it via its call-back. We also pass the\n      // currently used FlexSchemeData to the HomePage so we can use it to \n      // display some info about it, and use the colors on the theme switch.\n      home: HomePage(\n        themeMode: themeMode,\n        onThemeModeChanged: (ThemeMode mode) {\n          setState(() { themeMode = mode; });\n        },\n        // Pass in the used active FlexSchemeData so we can\n        // use its properties on the HomePage.\n        flexSchemeData: FlexColor.schemes[usedFlexScheme],\n      ),\n    );\n  }\n}\n\n```\n\n> **One minor addition - visualDensity**  \n> \n> All examples in this package use **comfortable** adaptive platform visual density via\n> `FlexColorScheme.comfortablePlatformDensity`, instead of the **default** counter application's\n> `VisualDensity.adaptivePlatformDensity`.\n>\n> This is an alternative visual density design that on desktop applications results in the Flutter\n> `comfortable` visual density being used, instead of `compact`. On devices, they both result in the default large\n> `standard` visual density that is suitable for small touch devices. \n> \n> This helper function was added to\n> provide an easy option for using a bit larger UI elements on desktop and web apps, \n> while keeping the correct size for devices.\n>\n> If the desktop and web versions of the app is used on computers with touch screens, the `comfortable` density provides\n> a nice balance. It still looks compact enough to be desktop like, while providing\n> a bit more touch friendly space, without looking like an overblown small device UI on a desktop.\n>\n> FlexColorScheme can also use the `VisualDensity.adaptivePlatformDensity` value. If you prefer it,\n> just replace the line with it. If you do not specify any visual density, the Flutter default density `standard`\n> is used on **all platforms**. This creates widgets with a lot of white space around and inside them. It\n> may not be what you want on web/desktop applications, but is the correct choice for small touch devices. The\n> visual density feature in Flutter was created to address this difference in design requirement. \n> \n> The Flutter SDK built-in\n> function `VisualDensity.adaptivePlatformDensity` was added to adapt the density according to used platform. The\n> `FlexColorScheme.comfortablePlatformDensity` does the same, but with a bit more white space on desktops.\n> Use the one you like and works best for your use case.\n\n### Building and running example 1\n\nWhen you build and run **example 1** you get a sample application that looks like this in light and dark mode:\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1al.png?raw=true\" alt=\"ColorScheme example 1 light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1ad.png?raw=true\" alt=\"ColorScheme example 1 dark\" width=\"250\"/>\n\nTry example 1 live on the [**web here**](https://rydmike.com/flexcolorscheme1).\n\nIn the app, scroll down to see the theme showcase further below, it presents the theme with common Material widgets.\nThis simple first example is not using primary color surface branding. It is a normal theme with a few\nconvenient fixes for some theme design gaps in Flutter's own themes created with `ThemeData.from` a `ColorScheme`.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1bl.png?raw=true\" alt=\"ColorScheme example 1b light\" width=\"250\"/></nb></nb>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex1cl.png?raw=true\" alt=\"ColorScheme example 1c light\" width=\"250\"/>\n\n## Example 2 - Create a Custom Color Scheme\n\nThis example shows how you can define your own `FlexSchemeData` and create `FlexColorScheme` based themes from it.\n\nThe full code is not shown in the tutorial, please see the code in the folder\n[flex_color_scheme/example/lib/example2](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example2/main.dart)\nfor the entire example.\n\nTo make a custom color scheme, we will for simplicity define it as a constant in this example.\nWe make a `FlexSchemeData` object with a name, description and scheme colors defined with\n`FlexSchemeColor` for the light and matching dark scheme. In this example we use dark purple and deep green\nand matching desaturated versions for the dark scheme.\n\nWe could also have stored the light and dark scheme in their own FlexSchemeColor objects, or even created them\ndirectly in their respective `colors` property in the light and dark factories. However, since we will also use this\ninformation on the HomePage for the theme switch widget and to display the scheme name and description. \nPutting them in a FlexSchemeData object that contains both the light and dark scheme, plus its name and description, is a\nconvenient way to pass along and re-use the information on the HomePage.\n\n```dart\nconst FlexSchemeData customFlexScheme = FlexSchemeData(\n  name: 'Toledo purple',\n  description: 'Purple theme created from custom defined colors.',\n  light: FlexSchemeColor(\n    primary: Color(0xFF4E0028),\n    primaryVariant: Color(0xFF320019),\n    secondary: Color(0xFF003419),\n    secondaryVariant: Color(0xFF002411),\n  ),\n  dark: FlexSchemeColor(\n    primary: Color(0xFF9E7389),\n    primaryVariant: Color(0xFF775C69),\n    secondary: Color(0xFF738F81),\n    secondaryVariant: Color(0xFF5C7267),\n  ),\n);\n```\n> **NOTE:**   \n>The above custom color scheme is fairly close to the built-in scheme\n> **Barossa**. If you like it, you can probably use it instead. \n\nWe use the `FlexSchemeData` **customFlexScheme** instance `light` and `dark` properties as scheme `colors`\nfor the `FlexColorScheme.light` and `dark` factory for each theme mode and `toTheme` to get the themes they define.\n\nThis setup is totally equivalent to how we used one of the built-in predefined `FlexSchemeData` objects in example 1,\nin this case we just defined our own custom `FlexSchemeData` in `customFlexScheme`.\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'FlexColorScheme',\n      // The color scheme for the light theme, made toTheme\n      theme: FlexColorScheme.light(\n        colors: customFlexScheme.light,\n        visualDensity: FlexColorScheme.comfortablePlatformDensity,\n      ).toTheme,\n      // The color scheme for the dark theme, made toTheme\n      darkTheme: FlexColorScheme.dark(\n        colors: customFlexScheme.dark,\n        visualDensity: FlexColorScheme.comfortablePlatformDensity,\n      ).toTheme,\n      // Demo home page, same as in example 1\n      home: HomePage(\n        themeMode: themeMode,\n        onThemeModeChanged: (ThemeMode mode) {\n          setState(() { themeMode = mode; });\n        },\n        // We use our custom FlexSchemeData on the HomePage too.\n        flexSchemeData: customFlexScheme,\n      ),\n    );\n  }\n}\n```\nWhen you build and run **example 2** you get a sample application that looks like this in light and dark mode:\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2al.png?raw=true\" alt=\"ColorScheme example 2 light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2ad.png?raw=true\" alt=\"ColorScheme example 2 dark\" width=\"250\"/>\n\nTry example 2 live on the [**web here**](https://rydmike.com/flexcolorscheme2).\n\nScroll down to see the theme showcase widgets further below, presenting the theme with some widgets. This example is\nnot using primary color surface branding, it is just a normal theme with a few convenient fixes for certain\ntheme properties.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2bl.png?raw=true\" alt=\"ColorScheme example 2b light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex2cl.png?raw=true\" alt=\"ColorScheme example 2c light\" width=\"250\"/>\n\n## Example 3 - Switch Between Different Color Schemes\n\nThis example shows how you can use three built-in color schemes, add a custom scheme and then use all four as\nselectable `FlexColorScheme` based theme options in an application. The example also uses strong branded\nsurface colors. \n\nThe full example code is not shown here, please see the code in the folder\n[flex_color_scheme/example/lib/example3](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example3/main.dart)\nfor the entire example.\n\nThe **customFlexScheme** `FlexSchemeData` definition is the same as in example 2, it is not repeated below.\nIn the example below, if we select the `FlexScheme.custom` option, we use our **customFlexScheme** object, otherwise\nthe built-in scheme we select on the HomePage is used. We also set the surface style to\n`FlexSurface.strong`, for a strong primary color branded blend in surface and background colors.\n\n ```dart\n class _DemoAppState extends State<DemoApp> {\n   ThemeMode themeMode = ThemeMode.light;\n   // Used to store which FlexSchemeData option we selected\n   FlexScheme flexScheme = FlexScheme.hippieBlue; // Default selected theme\n\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n       title: 'FlexColorScheme',\n       theme: FlexColorScheme.light(\n         // When we select the custom FlexScheme on the home\n         // page, we get the custom enum value back and use the custom\n         // scheme we defined, otherwise we use the selected scheme\n         // from the the built in map.\n         colors: flexScheme == FlexScheme.custom\n             ? customFlexScheme.light\n             : FlexColor.schemesWithCustom[flexScheme].light,\n         // This surface style gives a strong blend of primary\n         // color on surfaces and background colors.\n         surfaceStyle: FlexSurface.strong,\n         visualDensity: FlexColorScheme.comfortablePlatformDensity,\n       ).toTheme,\n       // Just a repeat with equivalent setup for the dark theme.\n       darkTheme: FlexColorScheme.dark(\n         colors: flexScheme == FlexScheme.custom\n             ? customFlexScheme.dark\n             : FlexColor.schemesWithCustom[flexScheme].dark,\n         surfaceStyle: FlexSurface.strong,\n         visualDensity: FlexColorScheme.comfortablePlatformDensity,\n       ).toTheme,\n       themeMode: themeMode,\n\n       home: HomePage(\n         themeMode: themeMode,\n         onThemeModeChanged: (ThemeMode mode) {\n           setState(() { themeMode = mode; });\n         },\n         // We pass the enum value of the active scheme to the HomePage.\n         flexScheme: flexScheme,\n         // Where we can select a new scheme and get its enum value back.\n         onFlexSchemeChanged: (FlexScheme selectedScheme) {\n           setState(() { flexScheme = selectedScheme; });\n         },\n         // We take care to pass in selected built-in scheme data\n         // or the custom one we made if it is selected.\n         flexSchemeData: flexScheme == FlexScheme.custom\n             ? customFlexScheme\n             : FlexColor.schemesWithCustom[flexScheme],\n       ),\n     );\n   }\n }\n ```\n\nIn this example on the **HomePage** we removed the option to allow the theme mode to depend on the system theme mode\nsetting, by setting `showSystemMode` to `false`, thus removing this option from the switch.\n\n```dart\n  FlexThemeModeSwitch(\n    themeMode: themeMode,\n    onThemeModeChanged: onThemeModeChanged,\n    flexSchemeData: flexSchemeData,\n    // We don't show the system mode option button\n    showSystemMode: false,\n  ),\n```\n\nThese are the four resulting themes with their light and dark modes, that we can select and\nuse in this example.\n\n**Hippie blue** scheme in light and dark mode.  \n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3al.png?raw=true\" alt=\"ColorScheme example 3a light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3ad.png?raw=true\" alt=\"ColorScheme example 3a dark\" width=\"250\"/>\n\n**Green money** scheme in light and dark mode.  \n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3bl.png?raw=true\" alt=\"ColorScheme example 3b light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3bd.png?raw=true\" alt=\"ColorScheme example 3b dark\" width=\"250\"/>\n\n**Red red wine** scheme in light and dark mode.  \n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3cl.png?raw=true\" alt=\"ColorScheme example 3c light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3cd.png?raw=true\" alt=\"ColorScheme example 3c dark\" width=\"250\"/>\n\n**Our custom Toledo purple** scheme in light and dark mode.  \n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3dl.png?raw=true\" alt=\"ColorScheme example 3d light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex3dd.png?raw=true\" alt=\"ColorScheme example 3d dark\" width=\"250\"/>\n\nTry example 3 live on the [**web here**](https://rydmike.com/flexcolorscheme3).\n\n## Example 4 - Switch Between Built-in Color Schemes and Custom Ones\n\nThis example shows how you can use all the built-in color schemes, plus three custom schemes.\nHow to interactively select which one of these schemes is used to define the active theme. The example also uses\nmedium branded background and surface colors. A subpage is available that shows the same theme applied when \nopening another page, that in Flutter just inherits the same theme.\n\nThe full example code is not shown here, please see the code in the package folder\n[flex_color_scheme/example/lib/example4](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example4/main.dart)\nfor the entire example.\n\nIn this example we set the surface style to `FlexSurface.medium`, for medium primary color branded surfaces.\n\nThis time we use the built in `FlexColor.schemesList` to access all\nthe pre-defined `FlexSchemeData` objects as a plain list with the predefined scheme data.\nWe unpack this list with the spread operator into a new custom `myFlexSchemes` list, and add our three custom schemes\nas `FlexSchemeData` objects to the end of this new list. We then access the list's `FlexSchemeData` objects with\nan index number, that we simply change with a popup menu on the HomePage.\nThat is the general principle, let's go through it step by step.\n\nBegin by defining the same colors that we used in example 2 and 3 for our first custom color. In this\ncase we also assign the same color that we used for our `secondaryVariant` scheme color, to the optional `appBarColor`.\nThis is done because the built-in schemes use their secondary variant color as their custom app bar color. It could\nbe any color, but for consistency, we will do the same for our custom `FlexSchemeColor` data objects.\n\nFirst we define the light and dark `FlexSchemeColor` data objects, that we will use as\nlight and dark matched pairs in the `FlexSchemeData` that we are going to add to our list.\n\n```dart\n void main() => runApp(const DemoApp());\n // Create a custom flex color scheme for a light theme.\n const FlexSchemeColor myScheme1Light = FlexSchemeColor(\n   primary: Color(0xFF4E0028),\n   primaryVariant: Color(0xFF320019),\n   secondary: Color(0xFF003419),\n   secondaryVariant: Color(0xFF002411),\n   appBarColor: Color(0xFF002411),\n );\n // Create a corresponding custom flex color scheme for a dark theme.\n const FlexSchemeColor myScheme1Dark = FlexSchemeColor(\n   primary: Color(0xFF9E7389),\n   primaryVariant: Color(0xFF775C69),\n   secondary: Color(0xFF738F81),\n   secondaryVariant: Color(0xFF5C7267),\n   appBarColor: Color(0xFF5C7267),\n );\n```\n\nWe can build a scheme the long way like above, by specifying all hand-picked scheme colors, or we can\nbuild schemes from a single primary color using the `FlexSchemeColor.from` factory. With this factory the\nonly required color is the primary color, the other colors will be computed.\n\nYou can provide the `primaryVariant`, `secondary` and `secondaryVariant` colors with the factory as well, \nany color that is not provided will always be computed for the full set of required colors in a `FlexSchemeColor`.\n\nIn this example we create our 2nd scheme from just a primary color for the light and dark schemes. The custom\n`appBarColor` does in this case also receive the same color value as the one that is computed for `secondaryVariant`\ncolor. This is its default with the `FlexSchemeColor.from` factory if the color is not specified.\n\n\n```dart\n // Use olive green like colors.\n final FlexSchemeColor myScheme2Light =\n   FlexSchemeColor.from(primary: const Color(0xFF4C4E06));\n\n final FlexSchemeColor myScheme2Dark =\n   FlexSchemeColor.from(primary: const Color(0xFF9D9E76));\n```\n\nFor our 3rd custom scheme we will define `primary` and `secondary` colors for the light color scheme, but no\nvariant colors. We will not make any dark scheme definitions at all either. The primary color is \"Oregon\" orange,\nand the used secondary color is a complementary dark teal like color.\n\n```dart\n final FlexSchemeColor myScheme3Light = FlexSchemeColor.from(\n   primary: const Color(0xFF993200),\n   secondary: const Color(0xFF1B5C62),\n );\n```\n\nNext we create a list with all the `FlexSchemeData` objects we will use as our schemes in this example,\nstarting with all the built-in ones and adding our three custom ones at the end.\n\n>A **FlexSchemeData** object stores `name` and `description` plus the matching `FlexSchemeColor` for `light`\n>and `dark` mode color schemes. \n\nNext we unpack the predefined `FlexSchemeData` into the list `myFlexSchemes` with the spread operator, add our\nown light and dark scheme definition pairs as `FlexSchemeData` to the end. For our last custom `FlexSchemeColor`\n`myScheme3Light` that we did not make a matching dark scheme for, we use the `.toDark()` method on\nthe light scheme, to get one computed from the defined light scheme colors.\n\n```dart\n final List<FlexSchemeData> myFlexSchemes = <FlexSchemeData>[\n   // Add ALL the predefined FlexColor schemes\n   ...FlexColor.schemesList,\n   // Then add our first custom schemes to the FlexSchemeData list.\n   const FlexSchemeData(\n     name: 'Toledo purple',\n     description: 'Purple theme, created from full custom defined color scheme.',\n     light: myScheme1Light,\n     dark: myScheme1Dark,\n   ),\n   // Do the same for our second custom scheme.\n   FlexSchemeData(\n     name: 'Olive green',\n     description: 'Olive green theme, created from primary light and dark colors.',\n     light: myScheme2Light,\n     dark: myScheme2Dark,\n   ),\n   FlexSchemeData(\n     name: 'Oregon orange',\n     description: 'Custom orange and blue theme, from only light scheme colors.',\n     light: myScheme3Light,\n     // We create the dark desaturated colors from the light scheme.\n     dark: myScheme3Light.toDark(),\n   ),\n ];\n```\n\nThe setup of the stateful MaterialApp is just as simple as in the previous examples.\n\n```dart\n class _DemoAppState extends State<DemoApp> {\n   ThemeMode themeMode = ThemeMode.light;\n   // Used to select which FlexSchemeData we currently use in our list.\n   int themeIndex = 6; // Start with index 6, the brand blue colors.\n\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n       title: 'FlexColorScheme',\n       // Light theme definition.\n       theme: FlexColorScheme.light(\n         // As scheme colors we use the one from our list\n         // pointed to by the current themeIndex.\n         colors: myFlexSchemes[themeIndex].light,\n         // Medium strength surface branding used in this example.\n         surfaceStyle: FlexSurface.medium,\n         visualDensity: FlexColorScheme.comfortablePlatformDensity,\n       ).toTheme,\n       // Just a repeat with equivalent setup for the dark theme.\n       darkTheme: FlexColorScheme.dark(\n         colors: myFlexSchemes[themeIndex].dark,\n         surfaceStyle: FlexSurface.medium,\n        visualDensity: FlexColorScheme.comfortablePlatformDensity,\n       ).toTheme,\n\n       themeMode: themeMode,\n\n       home: HomePage(\n         themeMode: themeMode,\n         onThemeModeChanged: (ThemeMode mode) {\n           setState(() { themeMode = mode; });\n         },\n         // We pass the index of the active theme to the HomePage.\n         schemeIndex: themeIndex,\n         // Where we can select a new theme in a popup menu\n         // and get its index back and update state.\n         onSchemeChanged: (int index) {\n           setState(() { themeIndex = index; });\n         },\n         // As FlexSchemeData is needed for info on the home\n         // page, we just pass the used from out list\n         // pointed to by our current themeIndex.\n         flexSchemeData: myFlexSchemes[themeIndex],\n       ),\n     );\n   }\n }\n ```\n\nWhen you build **Example 4**, it starts with the **Brand blues** theme. It is based on a scheme that uses blue colors\nfound in different well known web brands. The primary blue color in the light scheme might thus look very familiar.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4al.png?raw=true\" alt=\"ColorScheme example 4a light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4bl.png?raw=true\" alt=\"ColorScheme example 4b light\" width=\"250\"/>\n\nYou can use the popup menu available in the ListTile showing the current theme to change the active theme. You\ncan choose any of the built-in 36 schemes, plus the three custom color schemes we added. When you change scheme, you\nwill notice that the active theme color changes are animated by interpolating from the active theme colors,\nto the new theme colors. This is a very nice standard feature when you modify the theme used by a Flutter\nMaterial applications.\n\nTry some other color scheme, here is for example the theme based one the **Mango mojito** color scheme.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4cl.png?raw=true\" alt=\"ColorScheme example 4c light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex4cd.png?raw=true\" alt=\"ColorScheme example 4c dark\" width=\"250\"/>\n\nTry example 4 live on the [**web here**](https://rydmike.com/flexcolorscheme4)\n\n## Example 5 - Full Featured Demo\n\nThis example shows how you can use all the built-in color schemes in FlexColorScheme to define themes from them.\nHow you can define your own custom scheme colors, and use them together with the predefined ones. Like the previous\nexample, this can give you an idea of how you can create your own complete custom list of color schemes if you do not\nwant to use the predefined ones.\n\nThis example also shows how you can use the surface branding feature, vary its strength and how to use the custom app\nbar theme features. The usage of the true black theme feature for dark themes is also demonstrated.\nUsing the optional Windows desktop like tooltip theme is also shown.\n\nThe example includes a dummy responsive side menu and rail to give a visual presentation of what applications\nthat have larger visible surfaces using the surface branding look like. \n\nA subpage is also available that show that the same active theme is also applied when opening another page.\nThis is because all the built-in widgets use the same inherited theme and use the colors in the theme in\npredefined ways by default. This is also a good example and explanation of why you should use the same theme\ncolors for your custom re-usable widgets as their default color property values. Then theme your application to\nmake it look the way you want, rather than defining constants that you apply directly to widget color properties.\n\nIf you tried the previous examples on a device, you might\nhave noticed that the system navigation bar on Android devices does not always change. It is not themed to\nhave matching background and theme mode that matches the active application theme as it changes. This example shows\nhow this can be fixed and that the used method remain in effect when opening a subpage.\n\nThe same custom color schemes as in example 4, are also used in this example. They are not explained here again, please\nsee [example 4](#example-4---switch-between-built-in-color-schemes-and-custom-ones) for details.\nThe full example code is not shown here either, please see the code in the package folder\n[flex_color_scheme/example/lib/example5](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example5/main.dart)\nfor the entire example's code.\n\n### Example 5 - Local State and Setup\n\nIn this example we can toggle the used app bar theme style, the surfaces branding strength,\ntooltip style and try the true black theme toggle for dark-mode. This is done so that you can interactively try the\noptions and see what they do.\n\nYou can also use the example to toggle the `tabBarStyle` to use a tab bar theme that is designed\nto fit in an app bar, regardless of which style you selected for the AppBar. This is the default style for \nthis sub theme. Alternatively you can choose a style that makes a `TabBarTheme` that fits well on \nbackground colors. Use this\noption if you intend to use the TabBar primarily in a Scaffold body, in dialog or Drawer or other surface and\nbackground colored Material. \n\nStarting with version 3.0.0 the `swapColors` property can be used to swap the primary and secondary colors\nin a color scheme. All built-in colors schemes might not work so well when using this, but many do. One possible\ntheme variation that one can use, is to only swap the colors in dark theme and keep them as defined\nfor light theme mode. This can work quite well with many of the pre-defined color schemes.\n\nThis example has a toggle that allows you to for all the schemes use `toDark` computed dark schemes instead\nof the hand tuned built-in ones. You can then compare this result to hand-made dark themes. \nThe `toDark` method does a pretty good job and can\neven be tuned with a level property. If you use the `toDark` method on the last custom scheme, you will not see\nany difference, because we already created its dark scheme in this example with this method. \nTurning the toggle on for it, computes the same dark scheme from the same light scheme colors again. \n\nThere is a slider that you can use to adjust the white blend level \nof the `toDark` method. From its default value of 35%, to be anything from 0...100 %, you can experiment \nwith it and see what it does.\n\nAdditionally, this example includes a toggle that allows you to instead of using the `FlexColorScheme.toTheme` method, \nuse the standard flutter `ThemeData.from` factory to create the theme from the same color scheme definitions.\nWe can use this toggle to see and study the differences that `FlexColorScheme.toTheme` brings.\n\n```dart\n class _DemoAppState extends State<DemoApp> {\n   // Used to select if we use the dark or light theme.\n   ThemeMode themeMode = ThemeMode.light;\n    // Used to select which FlexSchemeData we use in our list of schemes.\n   int themeIndex = 7; // Start with deep blue see theme.\n   // Enum used to control primary color branding on surface and background.\n   FlexSurface flexSurface = FlexSurface.medium;\n   // Enum used to select what app bar style we use.\n   FlexAppBarStyle flexAppBarStyle = FlexAppBarStyle.primary;\n   // Used to modify the themed app bar elevation.\n   double appBarElevation = 0;\n   // Used to control if we use one or two toned status bar.\n   bool transparentStatusBar = false;\n   // Enum used to select what tab bar style we use.\n   FlexTabBarStyle flexTabBarStyle = FlexTabBarStyle.forAppBar;\n   // If true, tooltip background will be light in light theme, and dark\n   // in dark themes. The Flutter Material default and standard is the other\n   // way, tooltip background color is inverted compared to app background.\n   bool tooltipsMatchBackground = false;\n   // Swap primary and secondary colors in light theme mode.\n   bool swapLightColors = false;\n   // Swap primary and secondary colors in dark theme mode.\n   bool swapDarkColors = false;\n   // Allow toggling between normal dark mode and true black dark mode.\n   bool darkIsTrueBlack = false;\n   // Allow toggling between using the actual defined dark color scheme or\n   // try how it would look if we had not defined the dark colors, but had\n   // been lazy and just created the dark scheme from the light scheme\n   // with the toDark() method.\n   bool useToDarkMethod = false;\n   // The 'level' of white blend percentage used when computing dark scheme\n   // colors from the light scheme colors with the toDark method.\n   int level = 35;\n   // Use the toTheme to create Themes from `FlexColorScheme`. This is\n   // the preferred method when using `FlexColorScheme`. In the demo\n   // you can use a toggle to see what a FlexColorScheme looks like if\n   // you the color scheme and `ThemeData.from` to instead create the theme.\n   bool useToThemeMethod = true;\n```\n\n### Example 5 - The FlexColorScheme Properties and toTheme\n\nWe define the light theme for the app, using current theme index, selected surface style and app bar style. \nWith the built-in 36 themes, and the three custom ones we made, we can use 35 different app themes via the setup below.\n\nIf we consider the other style, options we have to multiply that with five different surface styles and five app \nbar variants, four times for the variations from swapping primary and secondary colors. That's a lot of styles and \nthemes!\n\nThe factory `FlexColorScheme.light` is used to define a `FlexColorScheme` for a light theme, from the light\nFlexSchemeColor in the `myFlexSchemes` list, plus some other properties. Those include among others, \nthe surface and app bar style, as well as the tooltip and true black setting for the dark theme.\n\n```dart\n   @override\n   Widget build(BuildContext context) {\n     return MaterialApp(\n       debugShowCheckedModeBanner: false,\n       title: 'FlexColorScheme',\n       theme: useToThemeMethod\n         ? FlexColorScheme.light(\n             colors: myFlexSchemes[themeIndex].light,\n             surfaceStyle: flexSurface,\n             appBarStyle: flexAppBarStyle,\n             appBarElevation: appBarElevation,\n             transparentStatusBar: transparentStatusBar,\n             tabBarStyle: flexTabBarStyle,\n             tooltipsMatchBackground: tooltipsMatchBackground,\n             swapColors: swapLightColors,\n             visualDensity: FlexColorScheme.comfortablePlatformDensity,\n             fontFamily: AppFonts.mainFont,\n           ).toTheme\n```\n\n\n### Example 5 - The FlexColorScheme Properties and toScheme\n\nWe also demonstrate how to create the same theme with the standard from color scheme ThemeData factory\n`ThemeData.from`. The surface style works, but will not be applied as elegantly, but it works fairly OK up\nto medium branding. The app bar style has no effect, nor the tooltip or tab bar style.\n\nWhen toggling between the standard `ThemeData.from` and the `FlexColorScheme.toTheme` made themes from the\nsame `ColorScheme` data, we can observe the differences. We can notice some theme colors that the standard \nmethod does not adjust to match the used color scheme. The previously mentioned \n[article](https://rydmike.com/colorscheme) also includes\na [visual presentation of the differences](https://rydmike.com/colorscheme#the-difference).\n\n```dart\n         : ThemeData.from(\n             colorScheme: FlexColorScheme.light(\n               colors: myFlexSchemes[themeIndex].light,\n               surfaceStyle: flexSurface,\n               appBarStyle: flexAppBarStyle,\n               appBarElevation: appBarElevation,\n               transparentStatusBar: transparentStatusBar,\n               tabBarStyle: flexTabBarStyle,\n               tooltipsMatchBackground: tooltipsMatchBackground,\n               swapColors: swapLightColors,\n               visualDensity: FlexColorScheme.comfortablePlatformDensity,\n               fontFamily: AppFonts.mainFont,\n             ).toScheme,\n           ).copyWith(\n             visualDensity: FlexColorScheme.comfortablePlatformDensity,\n             typography: Typography.material2018(\n               platform: defaultTargetPlatform,\n             ),\n           ),\n```\n\n**IMPORTANT**  \nWhen using FlexColorScheme and making themes with it, you would normally **NOT** USE THE ABOVE toScheme APPROACH.\nIt is **ONLY** included in this example to be able to demonstrate the theme adjustments provided by \n`FlexColorScheme.toTheme`. That said, it is as shown totally possible to do so if you for some reasons prefer\nthe results with the `toScheme` approach. By using it, you do however loose most of the end results and features\noffered by `FlexColorScheme`. You can see an example visual comparison and presentation of the\n[**differences here**](https://rydmike.com/colorscheme#the-difference).\n\nThe used `FlexColorScheme.light` properties `appBarStyle`, `appBarElevation`, `tabBarStyle`, \n`tooltipsMatchBackground` and `visualDensity` in the example above, actually have\nno impact at all on the returned `ColorScheme` by `toScheme`. It can only return colors in a `ColorScheme`, \nthat of course have no such theming concept. Definition of these values above could just as well be removed in the\nabove example. They were left in there to demonstrate that for this **NOT** recommended FlexColorScheme theme \ndefinition method, they have no impact on the end result. Only properties that adjust scheme colors, \nlike `colors`, `scheme`, `surfaceStyle` and `usedColors` will have an impact on the `toScheme` \nreturned by **FlexColorScheme**.\n\n> **AVOID**   \n> Using a light theme and dark theme that do no define and use the same `Typogrpahy`!   \n> To make the above demo work interactively we also have to make sure we use the same **typography** when\n> we make the ThemeData object from the returned ColorScheme.\n> If we do not, the animated theme will show an assertion error, because the **Flutter SDK** cannot \n> animate between text themes using different `Typography`. To fix this, we use the same nicer \n> and newer typography that is used by default by FlexColorScheme based themes. We also add the \n> visual density to the `ThemeData` with the same `copyWith`, so we get the same Widget spacing \n> as the one used in our `FlexColorScheme.light().toTheme` setup.\n\n### Example 5 - Equivalent Setup for the Dark Theme, but with More Options\n\nWe do the equivalent definition for the dark theme, and we add\nthe true black option as well. We also use the `useToDarkMethod` boolean as switch for `colors` to pass it a\n`FlexSchemeColor` that is either using the predefined ones or computes it from its light `FlexSchemeColor`.\n\nFor the `toDark` calculation we give it the level property that allows us to tune the dark conversion with\nthe slider in the UI. We also use the `defaultError` modifier. This ensures that the resulting computed\ntoDark scheme will ignore any existing light scheme error color definition, and use Material default dark mode\nerror color as its error color. Without this modifier, toDark will also compute the error color for the\ndark scheme from the light scheme's error color. It will thus also change with the level adjustment.\nThis is certainly also a usable option, but in this example we do not want this behavior.\n\n```dart\n     darkTheme: useToThemeMethod\n       ? FlexColorScheme.dark(\n          colors: useToDarkMethod\n             ? myFlexSchemes[themeIndex].light.defaultError.toDark(level)\n             : myFlexSchemes[themeIndex].dark,\n           surfaceStyle: flexSurface,\n           appBarStyle: flexAppBarStyle,\n           appBarElevation: appBarElevation,\n           transparentStatusBar: transparentStatusBar,\n           tabBarStyle: flexTabBarStyle,\n           tooltipsMatchBackground: tooltipsMatchBackground,\n           swapColors: swapDarkColors,\n           darkIsTrueBlack: darkIsTrueBlack,\n           visualDensity: FlexColorScheme.comfortablePlatformDensity,\n           fontFamily: AppFonts.mainFont,\n         ).toTheme\n\n       : ThemeData.from(\n           colorScheme: FlexColorScheme.dark(\n             colors: useToDarkMethod\n               ? myFlexSchemes[themeIndex].light.defaultError.toDark(level)\n               : myFlexSchemes[themeIndex].dark,\n             surfaceStyle: flexSurface,\n             appBarStyle: flexAppBarStyle,\n             appBarElevation: appBarElevation,\n             transparentStatusBar: transparentStatusBar,\n             tabBarStyle: flexTabBarStyle,\n             tooltipsMatchBackground: tooltipsMatchBackground,\n             swapColors: swapDarkColors,\n             darkIsTrueBlack: darkIsTrueBlack,\n             visualDensity: FlexColorScheme.comfortablePlatformDensity,\n             fontFamily: AppFonts.mainFont,\n           ).toScheme,\n         ).copyWith(\n             visualDensity: FlexColorScheme.comfortablePlatformDensity,\n             typography: Typography.material2018(\n             platform: defaultTargetPlatform,\n           ),\n         ),\n```\n\n> **What does defaultError actually do?**  \n> \n> The `defaultError` modifier creates a new copy of the object, where `error` color is null.\n> This causes the `toDark` method to skip it and keep it as null. \n> It then gets the default Material error via the `toTheme` method. \n> For the custom `FlexSchemeColor` objects in example 4 and 5, we did not specify\n> any error color, they are already `null` and get the default fixed Material error in dark mode.\n> However, the built-in schemes **do specify** their error color for both light and dark schemes. \n> Since the light error color is defined, and we do not want `toDark` to compute a dark scheme \n> error color that changes with the level, \n> we set it to null with `defaultError`.\n\n### Example 5 - Passing All the Values Back and Forth to the HomePage\n\nThe rest of the additions in the stateful MaterialApp are only passing in current values and getting a new value for\nit via callbacks for all our settings and their current values.\n\nIt is certainly getting tedious to do it this way by now. Since it was stated that we would not add any \nadvanced state management solution to these bundled examples, we are sticking to this \nway in this more complex example as well. Let it at the same time be a good example of why and when \na state management solution should really be considered.\n\n```dart\n       // themeMode value and change callback.\n       themeMode: themeMode,\n       home: HomePage(\n         themeMode: themeMode,\n         onThemeModeChanged: (ThemeMode mode) {\n           setState(() { themeMode = mode; });\n         },\n         // Used theme index and change callback.\n         schemeIndex: themeIndex,\n         onSchemeChanged: (int index) {\n           setState(() { themeIndex = index;});\n         },\n         // Used surface branding and change callback.\n         themeSurface: flexSurface,\n         onThemeSurfaceChanged: (FlexSurface surface) {\n           setState(() { flexSurface = surface; });\n         },\n         // Used app bar style and change callback.\n         appBarStyle: flexAppBarStyle,\n         onAppBarStyleChanged: (FlexAppBarStyle style) {\n           setState(() { flexAppBarStyle = style; });\n         },\n         // Used transparentStatusBar and change callback.\n         transparentStatusBar: transparentStatusBar,\n         onTransparentStatusBarChanged: (bool value) {\n           setState(() {transparentStatusBar = value; });\n         },\n         // Used app bar elevation and change value callback.\n         appBarElevation: appBarElevation,\n         onAppBarElevationChanged: (double value) {\n           setState(() { appBarElevation = value; });\n         },\n         // Used tab bar style and change callback.\n         tabBarStyle: flexTabBarStyle,\n         onTabBarStyleChanged: (FlexTabBarStyle style) {\n           setState(() { flexTabBarStyle = style; });\n         },\n         // Used tooltip style and change callback.\n         tooltipsMatchBackground: tooltipsMatchBackground,\n         onTooltipsMatchBackgroundChanged: (bool value) {\n           setState(() { tooltipsMatchBackground = value; });\n         },\n         // Swap colors value for light mode and change callback.\n         swapLightColors: swapLightColors,\n         onSwapLightColors: (bool value) {\n           setState(() { swapLightColors = value; });\n         },\n         // Swap colors value for dark mode and change callback.\n         swapDarkColors: swapDarkColors,\n         onSwapDarkColors: (bool value) {\n           setState(() { swapDarkColors = value; });\n         },\n         // True black mode and change callback.\n         darkIsTrueBlack: darkIsTrueBlack,\n         onDarkIsTrueBlackChanged: (bool value) {\n           setState(() { darkIsTrueBlack = value; });\n         },\n         // Dark scheme method and toggle method callback.\n         useToDark: useToDarkMethod,\n         onUseToDarkChanged: (bool value) {\n           setState(() { useToDarkMethod = value; });\n         },\n        // Dark scheme white blend level and change callback.\n         whiteBlend: level,\n         onWhiteBlendChanged: (int value) {\n           setState(() { level = value; });\n         },\n         // Theme creation method and toggle method callback.\n         useToTheme: useToThemeMethod,\n         onUseToThemeChanged: (bool value) {\n           setState(() { useToThemeMethod = value; });\n         },\n         // And pass the current FlexSchemeData to the\n         // homePage so we can use some info from it.\n         // We use copyWith to modify the dark scheme to\n         // the colors we get from toggling the switch\n         // for computed dark colors or the actual defined\n         // dark colors.\n         flexSchemeData: myFlexSchemes[themeIndex].copyWith(\n           dark: useToDarkMethod\n             ? myFlexSchemes[themeIndex].light.toDark()\n             : myFlexSchemes[themeIndex].dark),\n       ),\n     );\n   }\n }\n```\n\nWith this example we include a side rail. It expands to a menu on desktop/web when using a larger\ncanvas, it even does this in phone landscape mode. This just a dummy for demo purposes. It is here to give a better\nidea and presentation of what a surface branded theme looks like. The effect is best viewed and experienced\non a tablet, or the with a desktop browser via the live web demo, where the surface branded\ntheming effect is more obvious.\n\n### Example 5 - Themed System Navigation Bar in Android\n\nThe HomePage's build method for this example starts by wrapping the entire page content in an `AnnotatedRegion`\nwith a `SystemUiOverlayStyle` value that we get from the static helper\n`FlexColorScheme.themedSystemNavigationBar(context, ...)`. \n\nUsing this we can get a system navigation bar, typically on older Android phones that still uses one, that \nfollows the active theme's background color and theme mode. The system navigation bar will get updated as \nyou select new themes, different background color branding style and strength, and \ntoggle dark and light theme mode. Many Flutter applications neglect or forget to include this feature in their themes.\n\n```dart\n   return AnnotatedRegion<SystemUiOverlayStyle>(\n     value: FlexColorScheme.themedSystemNavigationBar(\n       context,\n       systemNavBarStyle: systemNavBarStyle,\n       useDivider: useSysNavDivider,\n     ),\n     child: ....\n   );\n```\n\nAbove the `systemNavBarStyle` is a local `FlexSystemNavBarStyle` state variable tied to the same UI choice in the demo\nhome screen and `useSysNavDivider` is local bool state variable. Together with the option to remove the status bar \nscrim, you can have easy complete control of both the AppBar's status bar, and the system navigation bar look, \nlike shown below:\n\n<img src=\"https://rydmike.com/assets_fcsv4/FlexSchemeAppBar.gif?raw=true\" alt=\"AppBar StatusBar\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/FlexSchemeNavBar.gif?raw=true\" alt=\"SysNavBar Style\" width=\"250\"/>\n\nThe top status bar scrim toggle, system navigation bar divider and style only have an impact \non Android builds, they do not have any functionality on the live Web example.\n\n> **NOTE:**  \n> The static helper `FlexColorScheme.themedSystemNavigationBar(context, ...)` is designed to provide a convenience\n> wrapper for a `SystemUiOverlayStyle` that works for screens that use and adhere to current theme mode colors.\n> If your application use screens that do not follow the current theme, then just use `SystemUiOverlayStyle`\n> directly in the annotated region for such screens to define their desired style. You can also make your own \n> convenience wrapper function or even just a const value for it if you need to use a fixed style and design frequently.\n> \n> The system navigation bar icons do not seem to change color correctly until API30 (Android 11). On earlier\n> API levels you may sometimes end up with light themed system navigation bar icons, even if you requested dark \n> ones from the Android system. This has been observed at least with Pixel 4XL emulator on API29 (Android 10).\n\nYou can also use the `FlexColorScheme.themedSystemNavigationBar` to hide the top status icons if you are not\nusing an app bar at all. This can be useful on a splash or onboarding page. Example 5 contains three different\nexamples, each with their own limitations, read more in the example 5 source code comments on how it\ncan be used, here what they look like. The last Example SplashPage 2, would be the ideal version, and it \nworks well on some versions of Android, but seems to fail on newer ones, so you may prefer 1b instead.\n\n<img src=\"https://rydmike.com/assets_fcsv4/FlexColorScheme-Splash-half-Size.png?raw=true\" alt=\"ColorScheme Splash pages\"/>\n\n### Example 5 - Building the Example\n\nThe above concludes the code walk through of example 5. When we build it, the example starts with \nthe **deep blue sea** scheme. In the example below we can also see the correctly\nthemed system navigation bar on the Android device.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5al.png?raw=true\" alt=\"ColorScheme example 5 light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad.png?raw=true\" alt=\"ColorScheme example 5 dark\" width=\"250\"/>\n\nTry example 5 live on the [**web here**](https://rydmike.com/flexcolorscheme5)\n\n### Example 5 - Computed Dark Theme\n\nSince example 5 allows us to toggle the dark mode from using its hand tuned predefined dark scheme colors, to the\ndark scheme colors computed from the light scheme colors. Let's use that feature study and compare some examples.\n\nWith the above **deep blue sea** scheme, the computed ones are a bit more dull and muted in this example.\nThese screenshots are using medium surface branding, the computed dark scheme is on the right.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad.png?raw=true\" alt=\"ColorScheme example 5 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad-to-black.png?raw=true\" alt=\"ColorScheme example 5 dark computed\" width=\"250\"/>\n\nWith some other schemes, like the **Aqua blue** one there is only a minor difference. These screenshots\nare using strong surface branding, the computed dark scheme is on the right.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5a2d.png?raw=true\" alt=\"ColorScheme example 5a2 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5a2d-to-black.png?raw=true\" alt=\"ColorScheme example 5 dark computed\" width=\"250\"/>\n\n### Example 5 - Computed Dark Theme with Level Adjustment\n\nThe result of the `toDark` method varies depending on how saturated the used light scheme colors are. It is possible\nto tune the calculated dark scheme by modifying the `whiteBlend` property it uses to blend in white to make the\ndark scheme. The default `whiteBlend` is 35%, this is normally a suitable value. For more saturated light scheme\ncolors try 40%, which is also used in the Material design guide to convert the default red error color for light mode,\nto dark mode. For light scheme color with low saturation, a white blend of 20...30% often also produces nice results.\n\nWith the included level slider in the example we can interactively change the `whiteBlend` level for the computed\ndark mode scheme colors. Let's select a color scheme, say the **Brand blues** one, then go dark.\nBy default, the built-in predefined hand-picked matching dark scheme colors for the dark theme mode are used.\n\nTurn on the \"Compute dark theme\" mode, the result is pretty close to the predefined one for this dark scheme with\nthe default level of 35%. Then adjust the white level blend to tune how saturated the computed dark scheme colors are\ncompared to their light scheme master. At 0% they are the same as the light scheme, at 100%, well then they are white,\nnot so useful. A range of 10...50% can produce excellent results. What is best depends on how saturated your starting\nlight scheme colors are, and of course what kind of matching dark theme look you like and want. If you use the even\ndarker dark-mode, **true black**, you may want to have a different saturation for your dark scheme colors compared to\nstandard dark-mode surface. You could easily implement that adjustment with this feature.\n\nThis screen recording compares the computed `toDark` theme result, to the built-in hand-picked one.\nIt does this by toggling the mode a few times, so you can compare the different results. It also uses the level slider\nto adjust the `toDark` theme result. A sharp eye might notice that this recording does not use the `defaultError`\nerror color modifier, the changing dark error color does not look so nice when tuning the computed scheme colors.\nThe bundled example 5 and live web version of it uses the modifier.\n\n<img src=\"https://rydmike.com/assets/fcs_v1-1-0-phone3.gif?raw=true\" alt=\"Dark scheme calc level\"/>\n\n### Example 5 - Branded Surfaces and App Bar Options\n\nLet us now explore the effect of branded surface colors. Branded surfaces are often\nassociated with dark mode, but it works well with light mode too when applied delicately. Below you can see how\nthe primary color gets blended into Material surface and even stronger so, into Material background colors.\nThe screenshots below are using the medium branding strength.\n\nYou can use the toggle in the example to change from standard no branded surfaces colors, to light, medium,\nstrong and heavy.\n\nThe scaffold background does not receive any branding until the heavy mode. You might think that this and all\nthe other theming can be done by just passing the same scheme colors to the `ThemeData.from` factory. That is why\nthis demo allows you to flip a switch to do just that, so you can see and observe the difference between\ncolor scheme based themes created by `FlexColorScheme.toTheme` and `ThemeData.from`.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5bl.png?raw=true\" alt=\"ColorScheme example 5b light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5cl.png?raw=true\" alt=\"ColorScheme example 5c light\" width=\"250\"/>\n\nFeel free to experiment with\nthe live web demo where the differences are even easier to observe since you can have both versions open side by\nside, in a large browser windows. A ready-made example comparison can be\nfound [here](https://rydmike.com/colorscheme#the-difference).\n\nNow that when we tried basic surface color branding, we can test the tricks `FlexColorScheme` can do\nwith the `AppBarTheme` and how you can match it to your surface branding if you like.\n\nYou can easily toggle both dark and light mode AppBars to use differently\nthemed backgrounds. By default, Material design uses AppBars with `ColorScheme.primary` color for light theme \nmode, and the dark background color in dark theme mode. Without using a separately defined sub `AppBarTheme`,\n**FlexColorScheme** AppBars can use different themed backgrounds based on an enum value. The themed `AppBar` \nbackground can use scheme primary color, default Material plain white/dark background color, primary \nbranded surface, primary branded background color, or a custom AppBar color.\n\nThe `FlexColorScheme` scheme's `appBarColor` is a separate scheme color that does not exist in Flutter's standard\n`ColorScheme`, so it does not have to be any of the colors available in a `ColorScheme`.\n\nThe predefined schemes use the color defined in a `ColorScheme` scheme's `secondaryVariant` color, as their value for\nthe custom `appBarColor`. When you make your own schemes you can do the same or use a totally none `ColorScheme`\nrelated color as the AppBar's custom color option. This color then becomes one of the FlexColorScheme's easy\nselectable AppBar theme color options, via the `appBarStyle` property and the `FlexAppBarStyle` enum, in this case\nvia the `custom` choice.\n\nBelow you can see some different branding strengths with a background primary color branded app bar theme used.\nThis example compares medium versus heavy branding. The medium choice is usually well-balanced, but light can be\nsubtle and nice too. If you want to make a bold statement theme, go with heavy. Please note that the visual\nimpact of the branding also depends on how saturated the primary color is.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5dl.png?raw=true\" alt=\"ColorScheme example 5d light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5el.png?raw=true\" alt=\"ColorScheme example 5e light\" width=\"250\"/>\n\nHere are few more images of the heavy primary color branded version, when looking at some widgets as well.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5fl.png?raw=true\" alt=\"ColorScheme example 5f light\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5gl.png?raw=true\" alt=\"ColorScheme example 5g light\" width=\"250\"/>\n\n### Example 5 - The TabBar Style\n\nThe `tabBarStyle` property can be used to toggle the theme the `TabBar` receives. By default, a theme that is designed\nto make it fit in an `AppBar`, regardless of which style you have selected for it, is used. This is the\n`FlexTabBarStyle.forAppBar` style. The typical usage of a `TabBar` is to have it in an `AppBar`, \nand the default style works for this use case.\n\nAlternatively you can choose a style that makes a `TabBarTheme` that fits well on background colors. Use this\noption if you intend to use the `TabBar` in a `Scaffold` body, in Dialogs, Drawers or other surface and\nbackground colored Material. If you do so, you do not have re-theme it, or style it separately for this purpose.\n\nIf you intend to use `TabBar` widgets in both AppBars and on surface and backgrounds, you will have to choose the style\nthat most often fits your use case. Then theme it separately for the other use case. You would have to do the same\nwith Flutter standard themes and `TabBarTheme` as well when not using FlexColorScheme, but the first theme your\nget without effort.\n\nWhich `tabBarStyle` style and resulting `TabBarTheme` actually works best, depends on the background color. Here we see\nTabBars used on surfaces and in an `AppBar`, when the AppBar is using primary color. As can be seen, the tab bar\ntheme that goes well in an app bar in such a case, does not fit on the surfaces at all, and wise versa.\n\n<img src=\"https://rydmike.com/assets_fcsv4/TabBar-on-primary.png?raw=true\" alt=\"tab bar on primary\"/>\n\nIf you plan to use only surface or background (also the branded ones) colored AppBars, you can see that both tab bar\nstyles, and their resulting themes work for both situations. The difference is minor, and it is a matter of opinion\nwhich one is preferable. Both style options can be used if you restrict your app bar color to background colors, or \ntheir primary branded variants.\nIn such a use case you can get away with using just one of the built-in style options, even if you use tab\nbars in both app bars and on other surfaces.\n\n<img src=\"https://rydmike.com/assets_fcsv4/TabBar-on-surface.png?raw=true\" alt=\"tab bar on surface\"/>\n\n### Example 5 - True Black\n\nDark-mode is nice, but with `FlexColorScheme` you can go even darker, go **true black** with the flick of a\nswitch. When using the true black option for dark-mode, surface, background and scaffold background are set to\nfully black. This can save power on OLED screens as the pixels are turned off, but it can also cause scrolling artefact\nissues when pixels turn fully on and off rapidly as you scroll. You can read about this and see an example of it in\nthe [Material design guide](https://material.io/design/color/dark-theme.html#ui-application)\nas well. (Scroll back up one heading from the link to get to the mention of it.)\n\nIf you use branded surfaces with true black mode enabled, you will notice that the branding has a lower impact,\nonly at strong and heavy levels does it have a visible effect. This is by design to keep most surfaces totally or\nvery close to black when true black is combined with surface branding. If you really want complete black\nfor all surfaces and backgrounds, then avoid combining true black mode with branded surfaces. On the other hand it\nstill makes a darker theme than normal dark theme, which can look nice. It may also eliminate the scrolling issue, since\nall background colored pixels are not fully off in the strong and heavy branded true black modes.\n\nHere is an example of a branded dark theme with true black OFF (default and standard) and true black ON,\nwhen using heavy branding with the **Red red wine** color scheme.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5cd.png?raw=true\" alt=\"ColorScheme example 5c dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5bd.png?raw=true\" alt=\"ColorScheme example 5b dark\" width=\"250\"/>\n\nHere is another difference example with the **Deep blue sea** scheme, when using medium strength surface branding, and\na primary colored app bar in dark-mode.\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad.png?raw=true\" alt=\"ColorScheme example 5 dark\" width=\"250\"/>  <img src=\"https://rydmike.com/assets_fcsv4/fcs_phone_ex5ad-true-black.png?raw=true\" alt=\"ColorScheme example 5 true black\" width=\"250\"/>\n\n## Android Transparent System Navigation Bar\n\nVersion 1.4.0 adds experimental support for transparent system navigation bar for Android for SDK >= 30 (Android 11).\nThe support is added via the new `opacity` property in `FlexColorScheme.themedSystemNavigationBar`.\nA separate example, that builds on example 5 for this more advanced use case, shows and explains how and when\ntransparent system navigation bar can be used in Android.\n\nThe example also shows how to set it up so that it always looks as nice as possible. This is done by using a \nprimary color branded background color applied to the system navigation bar in Android, when \ntransparency is not supported. While still using a transparent system navigation bar, \nwhen running on an API level that supports it.\n\nPlease see the separate small stand-alone example Android project called\n[**sysnavbar** on GitHub](https://github.com/rydmike/sysnavbar) for full details.\n\nWith this experimental feature you can make an Android system navigation that looks like the left one below when\nit is supported. It then falls back to just being theme color branded, like the right one, on API levels that do not\nsupport it.\n\nThe example below uses the classical system navigation bar with the navigation buttons. It also works when\nthe phone settings is changed to use the much smaller gesture bar, or on phones that don't even have a \nvisible gesture bar.\n\n<img src=\"https://rydmike.com/assets/sysnavbar4.gif?raw=true\" alt=\"System navbar transparent\"/>\n\n>Please note that phones with API30 (Android 11) were when this was first written (Jan 16, 2021) still very\n>rare, and at the time did not even register on\n>[**stats counter**](https://gs.statcounter.com/os-version-market-share/android/mobile-tablet/worldwide). \n> When this update was made (June 26, 2021) the share of Android 11 phones had risen to 15%.\n\n## Behind the Scenes\n\n**FlexColorScheme** does not actually use the `ThemeData.from` factory with a passed\nin `ColorScheme` to make its `ThemeData` object. It uses the `ThemeData` factory directly, with \nsome additional custom theming.  It does of course define a `ColorScheme` that it uses in its `ThemeData`.\nFlexColorScheme uses color calculations for the primary color branded/blended surfaces, and \nfor the lazy schemes that do not specify all colors in a color scheme.\n\n### None Null Sub-Themes\n\nFlutter's default Theme and its ThemeData is moving towards a design where all the sub-theme's in the default\nThemeData are NULL. It is always the widget that defines the default behavior and look when its sub-theme and its\nproperties are null and its properties for the same values are null. The widget colors for such cases are\nthen defined by `ThemeData.of(context).colorScheme`.\n\nThis Flutter theming design goal is described in this\n[document](https://docs.google.com/document/d/1kzIOQN4QYfVsc5lMZgy_A-FWGXBAJBMySGqZqsJytcE). It is mostly implemented\nby now, but there might still be some sub-themes in Flutter SDK remaining that do not fully adhere to this design.\n\nFlexColorScheme sets `ThemeData.of(context).colorScheme` to ensure that its colors are applied to all widgets\nthat adhere to this newer standard. It also sets all still existing legacy colors in\n`ThemeData.of(context)`, that some Flutter Widgets still use, to use scheme appropriate or scheme derived colors.\nThanks to this there should not be any built-in Widgets in Flutter that do not get color scheme themed \nby FlexColorScheme.\n\nThe ThemeData created by `FlexColorScheme().toTheme` also tries to not create and modify sub-themes when it does not\nhave to. However, to meet its design goals, FlexColorScheme has to create a number of sub-themes and set some\nof their properties. In some rare cases this is done to correct theming issues in Flutter SDK, and sometimes to \nreach its own design goals. Further below is a list of all the sub-themes it creates and properties that you can\n**currently** expect to have none null values in them. These sub-themes and their properties, \nwould otherwise be null when just using default `ThemeData()` or `ThemeData.from()` factories, if they\ndid not specify sub-themes.\n\nEven though some sub-themes currently are not null, and have some none null properties in FlexColorScheme \nbased `ThemeData`. It is still recommended to use null fallback values if you access ThemeData sub-themes and \ntheir properties in `ThemeData.of(context)` that are null in default `ThemeData`.\n\nFor example, when using the AppBar's theme data, don't just use:\n\n```dart\nfinal Color fabColor = Theme.of(context).appBarTheme.backgroundColor;\n```\n\nIt should never be considered fully **safe** to access properties like it without using null fallbacks.\nInstead, do something similar to this:\n\n```dart\nfinal Color fabColor = Theme.of(context)?.appBarTheme?.backgroundColor ??\n  Theme.of(context).colorScheme.primary ?? kMyDefaultAppBarColor;\n```\n\n**FlexColorScheme** will try to not change past creation of its none null sub-themes. However, changes to these\nimplementation details are only considered breaking if they produce a theme that is visibly different from\npast behavior.\n\n**Flutter SDK** may also change some of its implementation details of `ThemeData`. Take for example the broken\nChip case, if it is modified to fix its dark theme bug, then FlexColorScheme would have no reason\nfor its own fix. In cases where Flutter defaults moves in a direction that the same definition is no longer\nneeded in FlexColorScheme, such sub-theme definitions may eventually be removed, **but not without due warning**.\n\nOne recent such case was the `floatingActionButtonTheme` sub-theme that FlexColorScheme created in earlier\nversions. The used sub-theme did not change Flutter's default behavior. However, in some older versions of \nFlutter there was a severe deprecation warning if the sub-theme was not defined. Later it was \nobserved that Flutter SDK default and FlexColorScheme sub-theme now agrees 100% on the design. There was\nno longer any deprecated warning if the sub-theme was totally removed from FlexColorScheme's theme definition. \nThis sub-theme definition was thus no longer needed and was removed starting from FlexColorScheme  \nversion 2.0.0-nullsafety.2.\n\nAnother similar change that has still not landed in Flutter 2.2.x stable channel, is the deprecation\nof `ThemeData.accentColor`. From version 3.0.0 **FlexColorScheme** is prepared for when this\nchange lands in stable.\n\n* **AppBarTheme** in `ThemeData.appBarTheme` is NOT null.  \n  The actual values are defined to match the offered convenience theming options for the AppBar.\n  The property values depend on made configuration choices.\n  * backgroundColor: *Depends on chosen `appBarStyle`.*\n  * foregroundColor: Black if brightness of backgroundColor is light otherwise white.  \n  * iconTheme: Not null, defines:\n    * color: : *Depends on chosen `appBarStyle`.*\n  * actionsIconTheme: Not null, defines:\n    * color: : *Depends on chosen `appBarStyle`.*\n  * elevation: *As defined, default is 0*\n  * systemOverlayStyle: *A custom SystemUiOverlayStyle is defined*  \n  * backwardsCompatibility: `false`\n\n\n* **BottomAppBarTheme** in `ThemeData.bottomAppBarTheme` is NOT null.\n  * Color: `colorScheme.background`\n  * elevation: *As defined, default is 0*\n\n\n* **TextSelectionThemeData** in `ThemeData.bottomAppBarTheme` is NOT null.\n  * selectionColor: `dark ? primary.withOpacity(0.50) : primary.withOpacity(0.30)`\n  * selectionHandleColor: `primaryColorDark`\n\n\n* **InputDecorationTheme** in `ThemeData.inputDecorationTheme` is NOT null.\n  * filled: `true`\n  * fillColor: `dark ? primary.withOpacity(0.06) : primary.withOpacity(0.35)`\n\n\n* **ButtonThemeData** in `ThemeData.buttonTheme` is NOT null.\n  * colorScheme: `colorScheme`\n  * textTheme: `ButtonTextTheme.primary`\n  * materialTapTargetSize: `MaterialTapTargetSize.shrinkWrap`\n  * padding: `EdgeInsets.symmetric(horizontal: 16)`\n\n\n* **ChipThemeData** in `ThemeData.chipTheme` is NOT null.  \n  It is defined to fix issue [#65663](https://github.com/flutter/flutter/issues/65663) and uses\n  ChipThemeData.fromDefaults to set:\n  * secondaryColor: `colorScheme.primary`\n  * brightness: `colorScheme.brightness`\n  * labelStyle: `textTheme.bodyText1`\n\n\n* **TabBarTheme** in `ThemeData.tabBarTheme` is NOT null.  \n  Its colors depend on if a theme appropriate for current active app bar background color (default), or one for\n  background and surface color usage is selected. It sets:\n  * indicatorSize: `TabBarIndicatorSize.tab`\n  * labelStyle: `TextTheme().button`\n  * labelColor: *Depends on selected and targeted main usage.*\n  * unselectedLabelColor: *Depends on selected and targeted main usage*.\n\n\n* **BottomNavigationBarThemeData** in `ThemeData.bottomNavigationBarTheme` is NOT null.\n  * selectedIconTheme: Not null, defines:\n     *  color: `colorScheme.primary`\n  * selectedItemColor: `colorScheme.primary`\n\n\n* **TooltipThemeData** in `ThemeData.tooltipTheme` is NOT null. This theme is\n modified to address issue [#71429](https://github.com/flutter/flutter/issues/71429) and\n to also enable a toggle that inverts the tooltip colors, which is a style often\n used on Windows desktops. The toggle can be used to change the style depending on the current platform. \n The used logic and theme changes are defined as.\n  * margin: `EdgeInsets.symmetric(horizontal: 12, vertical: 6)`  \n  * padding: `desktop ? EdgeInsets.fromLTRB(8, 3, 8, 4) : EdgeInsets.symmetric(horizontal: 16, vertical: 8)`\n  * textStyle:  \n    ```dart\n    textTheme.bodyText2.copyWith(  \n      inherit: false,\n      color: tooltipsMatchBackground \n         ? dark ? Colors.white : Colors.black    \n         : dark ? Colors.black : Colors.white,    \n      fontSize: desktop ? 12 : 14)\n    ```\n  * decoration: \n    ```dart\n    tooltipsMatchBackground\n      ? BoxDecoration(\n         color: isDark ? const Color(0xED444444) : const Color(0xF0FCFCFC),\n         borderRadius: const BorderRadius.all(Radius.circular(4)),\n         border: Border.all(color: dividerThemeColor))\n     : null // Use default Flutter SDK decoration.\n    ```\n  \n### ThemeData Default Modifications\n\nIn addition to the primary color branded surfaces, full shaded schemes from just one primary color, true\nblack and app bar convenience tricks. The returned `ThemeData` contains some opinionated modifications and theme\ncorrections compared to what you get if you would just use the standard `ThemeData.from` with a `ColorScheme`.\n\nYou can still of course override the returned `ThemeData` with your own theme modifications and \nadditions, by using the `copyWith` method on the resulting `ThemeData` object.\n\nThe following lists the full details of what the differences compared to the standard `ThemeData.from` factory\nare, as well as the rationale behind the made design choices and changes to the defaults.\n\n  * `ScaffoldBackground` has its own color property in `FlexColorScheme`\n    and can if so desired differ from the `ColorScheme.background`\n    color. In the used surface branding implementation, the `scaffoldBackground`\n    typically gets no primary branding applied. Only in the heavy choice\n    is there a small amount. Whereas `background` in a FlexColorScheme theme\n    receives the most color branding of the surface colors. This fits\n    well for where the `background` color is typically used in Material background \n    by Widgets, but it does not go so well together with `scaffoldBackground`. \n    This is why it has its own color value in this implementation.\n\n\n  * The `dialogBackgroundColor` uses the `ColorScheme.surface` color\n    instead of `ColorScheme.background`. The `background` color needed\n    the strongest branding when branding is used, but this did not look\n    so good on dialogs. Therefore, its color choice was changed to `surface`\n    instead, that gets much lighter branding in FlexColorScheme when it is\n    used. With standard Material surface colors, the `background` and\n    `surface` colors are the same, so there is no difference when using\n    the default background and surface colors.\n\n\n  * The `indicatorColor` is same as effectiveTabColor. It uses a function with\n    logic to determine its color bases on if a TabBarTheme was selected that should\n    work on current app bar background color, or on surface/background colors.\n\n\n  * For `toggleableActiveColor` the `ColorScheme.secondary` color is used.\n    The Flutter default just uses the default `ThemeData` colors and\n    not the actual colors you define in the `ColorScheme` you create your\n    theme from. Perhaps an oversight in Flutter?\n    See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n\n\n  * Flutter themes created with `ThemeData.from` do not define any color\n    scheme related color for the `primaryColorDark` color, this method\n    does.  See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n    The `ThemeData.from` leaves this color at `ThemeData` factory default,\n    this may not match your scheme. Flutter SDK Widgets seldom use this color, \n    so the issue is rarely seen. Like `accentColor`, this color may be \n    deprecated in the Flutter SDK in upcoming versions.\n\n\n  * Flutter themes created with `ThemeData.from` do not define any color\n    scheme based color for the `primaryColorLight` color, this method does.\n    See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n    The `ThemeData.from` leaves this color at `ThemeData` factory default\n    this may not match your scheme.  Flutter SDK Widgets seldom use this color,\n    so the issue is rarely seen. Like `accentColor`, this color may be\n    deprecated in the Flutter SDK in upcoming versions.\n\n\n  * Flutter themes created with `ThemeData.from` do not define any color\n    scheme based color for the `secondaryHeaderColor` color, this method\n    does. See issue [#65782](https://github.com/flutter/flutter/issues/65782).\n    `ThemeData.from` leaves this color at `ThemeData` factory default this\n    may not match your scheme.  Flutter SDK Widgets seldom use this color,\n    so the issue is rarely seen. Like `accentColor`, this color may be\n    deprecated in the Flutter SDK in upcoming versions.\n\n\n  * Background color for `AppBarTheme` can use a custom color theme\n    in both light and dark themes, that is not dependent on the theme's\n    primary or surface color.\n    In the versions prior to Flutter 2.0.0 doing this was difficult to do,\n    as presented in [#50606](https://github.com/flutter/flutter/issues/50606)\n    A new feature in Flutter 2.0.0 implemented via:\n    [#71184](https://github.com/flutter/flutter/pull/71184) makes this easy and\n    better. FlexColorScheme's implementation has been changed to use this\n    new AppBarTheme feature starting from version 2.0.0-nullsafety.2.\n    \n\n  * The `AppBarTheme` elevation defaults to 0, an iOs style influenced\n    opinionated choice. It can easily be adjusted directly in the\n    `FlexColorScheme` definition with property value `appBarElevation`\n    without creating a sub theme or using `copyWith`.\n\n\n  * The `bottomAppBarColor` uses color scheme background color to match the\n    background color of the drawer, bottom navigation bar, possible side\n    menu and system navigation bar on android, if theming of it is used.\n    This is a slight change from the ColorScheme default that uses\n    surface color.\n\n\n  * The `BottomAppBarTheme` elevation defaults to `appBarElevation` or 0 if\n    it is null, an iOs style influenced opinionated choice. It can easily\n    be adjusted directly in the `FlexColorScheme` definition with property\n    value `bottomAppBarElevation` without creating a sub theme or\n    using `copyWith`.\n\n\n  * In `TextSelectionThemeData`, the standard for `selectionColor` is\n    `colorScheme.primary` with opacity value `0.4` for dark-mode and `0.12`\n    for light mode. Here, primary with `0.5` opacity for dark-mode and `0.3` for\n    light mode is used. The standard for `selectionHandleColor` is\n    `colorScheme.primary`, here we use the slightly darker shade\n    `primaryColorDark` instead, which does not have a proper color\n    scheme color value in Flutter standard `ColorScheme` based themes.\n\n\n  * A predefined slightly opinionated `InputDecorationTheme` is used. It\n    sets `filled` to `true` and fill color to color scheme primary color\n    with opacity `0.035` in light mode and with opacity `0.06` in dark-mode.    \n    Since the used theme, does not define a `border` property of `TextField`,\n    an app can easily use both the default underline style, or the\n    outline style by just specifying `OutlineInputBorder()`, \n    when an outlined `TextField` is desired.\n    If you don't  want the filled style, or the primary colored\n    borders in dark-mode, you can override them back with `copyWith`.\n\n\n  * The property `fixTextFieldOutlineLabel` is set to `true` by default,\n    it looks better. The only reason why it is not the default in Flutter,\n    is for default backwards legacy design compatibility.\n    \n\n  * **NOTE:**  \n    Since the old buttons have been deprecated in Flutter 2.0.0\n    they are no longer presented or used in code in FlexColorScheme and its\n    examples. **However**, FlexColorScheme still defines the theme for\n    them described below. Defining the theme does not yet cause any\n    deprecation warnings or errors, as long as that is the case. this\n    theming will be kept available to support out of the box nice themes for\n    the old buttons as before.\n    \n\n  * Button theming is applied to `ThemeData.buttonColor` using color\n    `colorScheme.primary` color.\n\n\n  * For `ThemeData.buttonTheme` the entire color scheme is passed to its\n    `colorScheme` property, and it uses `textTheme` set to\n    `ButtonTextTheme.primary`, plus minor changes to padding and tap target\n    size. These modifications make the old buttons almost match the\n    default design and look of their corresponding newer buttons.\n    The `RaisedButton` looks very similar to `ElevatedButton`,\n    `OutlineButton` to `OutlinedButton` and `FlatButton` to `TextButton`.\n    There are some differences in margins and looks, especially in\n    dark-mode, but they are very similar.\n\n\n  * The default theme for Chips contain a design bug that makes the\n    selected `ChoiceChip` widget look disabled in dark-mode, regardless\n    if was created with `ThemeData` or `ThemeData.from` factory.\n    See issue [#65663](https://github.com/flutter/flutter/issues/65663).\n    The `ChipThemeData` modification used here fixes the issue.\n    \n\n * For `TabBarTheme`, the Flutter standard selected tab and indicator\n   color is onSurface in dark-mode and onPrimary in light mode, which is\n   designed to fit an AppBar colored TabBar. This is kept, and the default\n   via `FlexTabBarStyle.forAppBar` style, with a minor modification. If\n   AppBar is \"light\", then black87 is used, not black, it is the same as\n   the textTheme on AppBar in light app bar brightness.\n   If the `FlexTabBarStyle.forBackground` style was used, the\n   selected  color is always color scheme primary color, which works well\n   on surface, background and scaffold background colors.\n\n   The unselected TabBar color when `FlexTabBarStyle.forBackground` style\n   is used, is always the onSurface color with 60% opacity. This is also\n   the color if the AppBar background color brightness is light AND its\n   color is white, surface or background colored.\n   Otherwise, when the style `FlexTabBarStyle.forAppBar` is used, the\n   unselected tab bar color is the selected tab color with 70% opacity.\n   This opacity value is the same  as Flutter default for the default\n   theme that is also designed for AppBar usage.\n\n\n  * The `BottomNavigationBarThemeData` uses color scheme primary color for\n    the selected item. Flutter defaults to secondary color. Primary color\n    is a design used on iOS by default for the bottom navigation bar. We\n    agree and think it looks better as the default choice for apps.\n\n\n  * Default `tooltipTheme` in Flutter is currently a bit flawed on desktop\n    and web, because it defaults to using a very small font (10dp).\n    See issue [#71429](https://github.com/flutter/flutter/issues/71429).\n    The default theming also does not handle multiline tooltips very well.\n    The here used `TooltipThemeData` theme design, corrects both these\n    issues. It uses 12dp font on desktop and web instead of 10dp,\n    and some padding instead of a height constraint to ensure that\n    multiline tooltips look nice too.\n    \n       \n  * FlexColorScheme also includes a boolean property\n    `tooltipsMatchBackground`, that can be toggled to not use Flutter's\n    Material default design that has a theme mode\n    inverted background. Tooltips using light background in light theme\n    and dark in dark, are commonly used on the Windows desktop platform.\n    You can easily tie this extra property to the used platform to make an automatic\n    platform adaptation of the tooltip style if you like. You can also use it \n    to give users a preference toggle where they change the tooltip \n    style to their liking.\n\n\n  * The property `transparentStatusBar` is set to true by default. It is\n    used to make to the AppBar one-toned on Android devices, like on iOS devices.\n    Set it to `false` if you want to restore the default Android two toned design.\n\n\n## Appendix A - Built-in Scheme Reference\n\nThis table lists all current built-in schemes and provides a link to a high-resolution example phone image of each one.\n\n| FlexScheme   | Name                   | Description | Light___| Dark___|\n| ----         | ----                   | ----        | ----  | ---- |\n| material     | Material default       | Default Material color theme, used in the design guide. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb01.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme001.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb01.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme001.png?raw=true) |\n| materialHc   | Material high contrast | High contrast Material design guide theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb02.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme002.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb02.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme002.png?raw=true) |\n| blue         | Blue delight           | Blue color theme, based on Material blue and light blue colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb03.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme003.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb03.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme003.png?raw=true) |\n| indigo       | Indigo nights          | Indigo color theme, based on Material indigo and deep purple colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb04.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme004.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb04.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme004.png?raw=true) |\n| hippieBlue   | Hippie blue            | Hippie blue with surfie green and chock coral pink theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb05.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme005.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb05.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme005.png?raw=true) |\n| aquaBlue     | Aqua blue              | Aqua tropical ocean blue theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb06.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme006.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb06.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme006.png?raw=true) |\n| brandBlue    | Brand blues            | A mixture of blue colors from well known web brands. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb07.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme007.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb07.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme007.png?raw=true) |\n| deepBlue     | Deep blue sea          | Dark deep blue sea color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb08.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme008.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb08.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme008.png?raw=true) |\n| sakura       | Pink sakura            | Pink color theme, based on sakura cherry blossom like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb09.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme009.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb09.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme009.png?raw=true) |\n| mandyRed     | Oh Mandy red           | Mandy red and Viking blue colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb10.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme010.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb10.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme010.png?raw=true) |\n| red          | Red tornado            | Red color theme, based on Material red and pink colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb11.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme011.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb11.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme011.png?raw=true) |\n| redWine      | Red red wine           | Red color theme, based on red wine like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb12.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme012.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb12.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme012.png?raw=true) |\n| purpleBrown  | Purple brown           | Purple brown tinted aubergine and eggplant colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb13.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme013.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb13.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme013.png?raw=true) |\n| green        | Green forest           | Green color theme, based on Material green and cyan colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb14.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme014.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb14.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme014.png?raw=true) |\n| money        | Green money            | Green money and finance style color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb15.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme015.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb15.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme015.png?raw=true) |\n| jungle       | Green jungle           | Green jungle and rain forest color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb16.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme016.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb16.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme016.png?raw=true) |\n| greyLaw      | Grey law               | Material blue grey and ultra dark purple color theme. Colors suitable for law firms.  | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb17.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme017.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb17.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme017.png?raw=true) |\n| wasabi       | Willow and wasabi      | Wild Willow and wasabi green with orchid purple inspired colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb18.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme018.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb18.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme018.png?raw=true) |\n| gold         | Gold sunset            | Gold sunset color theme, based on orange like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb19.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme019.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb19.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme019.png?raw=true) |\n| mango        | Mango mojito           | Orange and green Mango mojito color theme.  | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb20.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme020.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb20.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme020.png?raw=true) |\n| amber        | Amber blue             | Amber blaze and blue color theme, based on Material amber and blue accent colors, a high-contrast theme. An alternative to the default Material high contrast theme.| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb21.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme021.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb21.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme021.png?raw=true)|\n| vesuviusBurn | Vesuvius burned        | Vesuvius burned orange and eden green theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb22.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme022.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb22.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme022.png?raw=true) |\n| deepPurple   | Deep purple            | Deep purple daisy bush theme, based on Material deepPurple and lightBlueAccent colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb23.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme023.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb23.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme023.png?raw=true)|\n| ebonyClay    | Ebony clay             | Ebony clay dark blue-grey and watercourse green colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb24.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme024.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb24.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme024.png?raw=true) |\n| barossa      | Barossa                | Barossa red and cardin green colored theme. A somber color set suited for courts and law firms. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb25.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme025.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb25.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme025.png?raw=true) |\n| shark        | Shark and orange       | Shark grey and orange ecstasy colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb26.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme026.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb26.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme026.png?raw=true) |\n| bigStone     | Big stone tulip        | Big stone blue and tulip tree yellow colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb27.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme027.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb27.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme027.png?raw=true) |\n| damask       | Damask and lunar       | Damask red and lunar green colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb28.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme028.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb28.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme028.png?raw=true) |\n| bahamaBlue       |Bahama and trinidad | Bahama blue and trinidad orange colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb29.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme029.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb29.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme029.png?raw=true) |\n| mallardGreen       | Mallard and valencia | Mallard green and Valencia pink colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb30.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme030.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb30.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme030.png?raw=true) |\n| espresso       | Espresso and crema   | Espresso dark brown and crema colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb31.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme031.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb31.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme031.png?raw=true) |\n| outerSpace       | Outer space stage  | Outer space dark blue-grey and stage red theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb32.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme032.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb32.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme032.png?raw=true) |"
        },
        {
          "name": "README-V4.md",
          "type": "blob",
          "size": 124.369140625,
          "content": "[![Pub Version](https://img.shields.io/pub/v/flex_color_scheme?label=flex_color_scheme&labelColor=333940&logo=dart)](https://pub.dev/packages/flex_color_scheme) ![GitHub Workflow Status (event)](https://img.shields.io/github/workflow/status/rydmike/flex_color_scheme/Test?event=push)\n![Test](https://github.com/rydmike/flex_color_scheme/workflows/Test/badge.svg) [![codecov](https://codecov.io/gh/rydmike/flex_color_scheme/branch/master/graph/badge.svg?token=4XJU30IGO3)](https://codecov.io/gh/rydmike/flex_color_scheme) [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n# FlexColorScheme\n\n[<img src=\"https://rydmike.com/assets_fcsv4/flutter-favorite-logo.png?raw=true?\" alt=\"flutter favorite logo\" width=\"170\"/>](https://docs.flutter.dev/development/packages-and-plugins/favorites)\n\nUse **FlexColorScheme** to make beautiful color scheme based Flutter themes,\nwith optional primary color surface blends. The themes are based on the same\nconcept as Flutter's ColorScheme based themes, but with many\nadditional features.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/00-main-image.jpg?raw=true?\" alt=\"main_image\"/>](https://rydmike.com/assets_fcsv4/00-main-image.png?raw=true>)\n_FlexColorScheme theme examples (click image to open hires version)_\n\nWhen you color theme a Flutter application, all built in\nwidgets use the colors of the `ColorScheme` in your theme. At least in theory,\nand it is almost so if you defined your Flutter ThemeData by using the\n`ThemeData.from` factory, but even it misses a few details.\n**FlexColorScheme** goes the extra mile to ensure that all Flutter SDK widgets gets\nthemed completely by its built-in color schemes, or custom colors you provide.\n\nYou can also opt in on using pre-made opinionated widget sub-themes.\nBy opting in, you can for example adjust the border radius on all widgets\nwith a single property to set the same themed border radius on all of them with\none property. Current Flutter SDK widgets are based on the Material 2 guide\nand use 4 dp corner radius as default on most corners.\n\nWhen you opt in on using the sub themes, the border radius on widgets default\nto the new rounded corners as specified by the\n[Material 3 guide](https://m3.material.io/), where the\nrounding varies by widget type. You can stick with this, or set global\nradius to a value you prefer. You can also easily set the themed border\nradius per widget and override the shared radius value in just a few cases. Use\nsimple property values per widget, no need for verbose custom sub theme\nShape definitions.\n\n# Contents\n- [FlexColorScheme](#flexcolorscheme)\n- [Contents](#contents)\n- [What is New in Version 4?](#what-is-new-in-version-4)\n  - [New Color Schemes](#new-color-schemes)\n- [Installing and Using](#installing-and-using)\n  - [Default Example - Hot Reload Playground](#default-example---hot-reload-playground)\n  - [Themes Playground](#themes-playground)\n  - [Copy Playground Theme](#copy-playground-theme)\n- [All Color Schemes](#all-color-schemes)\n  - [Built-in Color Scheme Designs](#built-in-color-scheme-designs)\n  - [Use Your Own Color Schemes with FlexColorScheme](#use-your-own-color-schemes-with-flexcolorscheme)\n- [Example Applications](#example-applications)\n  - [Building the Examples](#building-the-examples)\n  - [Live WEB Demos of the Examples](#live-web-demos-of-the-examples)\n- [Flutter Theming Introduction](#flutter-theming-introduction)\n  - [Flutter ThemeData](#flutter-themedata)\n  - [Color Blended Surfaces](#color-blended-surfaces)\n- [Frequently Asked Questions](#frequently-asked-questions)\n  - [Custom color schemes?](#custom-color-schemes)\n  - [Can I add custom sub themes?](#can-i-add-custom-sub-themes)\n  - [If I don't use the predefined Schemes, why should I use FlexColorScheme?](#if-i-dont-use-the-predefined-schemes-why-should-i-use-flexcolorscheme)\n  - [Can we change this predefined scheme's colors?](#can-we-change-this-predefined-schemes-colors)\n  - [Can we add this scheme?](#can-we-add-this-scheme)\n  - [Can I use different built-in color schemes for my light and dark themes?](#can-i-use-different-built-in-color-schemes-for-my-light-and-dark-themes)\n- [Tutorial](#tutorial)\n  - [Example 1 - Basic Theme Usage](#example-1---basic-theme-usage)\n  - [Example 2 - Custom Theme](#example-2---custom-theme)\n  - [Example 3 - Four Themes](#example-3---four-themes)\n  - [Example 4 - All Themes](#example-4---all-themes)\n  - [Example 5 - Themes Playground](#example-5---themes-playground)\n  - [Custom Themes and Automatic Flutter Source Code](#custom-themes-and-automatic-flutter-source-code)\n- [API Intro and Guide](#api-intro-and-guide)\n  - [Main Setup](#main-setup)\n    - [FlexColorScheme](#flexcolorscheme-1)\n    - [FlexThemeData extension on ThemeData](#flexthemedata-extension-on-themedata)\n    - [Main setup parameters](#main-setup-parameters)\n- [Scheme Reference](#scheme-reference)\n\n# What is New in Version 4?\n\nFor a detailed list of what is new in version 4, please refer to the\n[change log](https://pub.dev/packages/flex_color_scheme/changelog).\n\nThere are two major new features. The first one is that FlexColorScheme\nnow comes with **opinionated widget sub themes** that you can opt in on.\nBy default, these Flutter UI widget sub themes follow the\n[Material 3 guide](https://m3.material.io/). This is done\nas far as reasonably possible while still using standard Material 2 theming features\navailable in Flutter 2.8. There is a Material 3 style TextTheme as well, and by\ndefault this text theme is also slightly color tinted using the color\nscheme's primary color. You can turn these styles on and off, based on your\nyour own preferences when you opt in on the sub themes.\n\nThe second main new feature is that FlexColorScheme now offers **9 different surface\ncolor blend modes**, with **40 different blend levels** each. Version 3 only had one\n\"blend style\" with 5 levels, including the no blend option.\nThe version 3 blend style API is still available and works, but is deprecated\nsince version 4.2.0. Despite the major version bump from 3 to 4, all APIs from\nversion 3 are fully compatible with version 4. The version was mostly bumped\nbecause it contains so many new features that it made sense.\n\n> ### Looking for version 3 documentation with working image links?\n> #### You can find it [here](https://github.com/rydmike/flex_color_scheme/blob/master/README-V3.md).\n\n## New Color Schemes\n\nThere are of course new built-in color schemes. Four of them seems to\nbe the standard for major new releases. The new color schemes are:\n\n* **Blue whale** - Blue whale, jungle green and outrageous tango orange\n* **San Juan** - San Juan blue and pink salmon theme\n* **Rosewood** - Rosewood red, with horses neck and driftwood theme\n* **Blumine** - Blumine, easter blue and saffron mango theme\n\n[<img src=\"https://rydmike.com/assets_fcsv4/04-news-themes-gang.jpg?raw=true\" alt=\"new_themes\"/>](https://rydmike.com/assets_fcsv4/04-news-themes-gang.png?raw=true)\n_FlexColorScheme new V4 themes (click image to open hires version)_\n\nTotal number of offered built-in color schemes is now **36 matched light\nand dark pairs**. By using the swap primary and secondary colors, you can double\nthe amount of variations with just a boolean toggle. Not all the color\nschemes are so attractive when you swap the colors, but some were designed to\nsupport it and look well with the colors reversed too. You can for example use\nthis to present the dark mode with primary and secondary colors swapped\ncompared to the light mode.\n\nYou can check out this Tweet and its thread\n[here](https://twitter.com/RydMike/status/1459984929631215618) to see a visual\npresentation of FlexColorScheme's features.\n\n# Installing and Using\n\nIn the `pubspec.yaml` of your **Flutter** project, add the following dependency:\n\n```yaml\ndependencies:\n  flex_color_scheme: ^4.2.0\n```\n\nIn your library file add the following import:\n\n```dart\nimport 'package:flex_color_scheme/flex_color_scheme.dart';\n```\n\nYou can now start using `FlexColorScheme` V4 based color schemes and theming\nin your application. A quick way to do so is to try one of the 36 built-in\ncolor schemes. The schemes have enums that you can use to refer to them with.\n\nPlease study the default example for a thorough guide on how to use almost\n**all** properties in FlexColorScheme. To try it on your own from scratch,\ncreate a default Flutter counter app. Add the FlexColorScheme import and modify\none line of code and add two lines as shown below.\n\nHere we use the  **\"Oh Mandy red\"** color scheme that is represented by `enum`\nvalue `FlexScheme.mandyRed`. We set the `MaterialApp.themeMode` to\n`ThemeMode.system`, so that the device can control if the app uses its light\nor dark theme mode, based on the device theme mode system setting. You can\ntoggle theme mode by changing theme mode on the device.\n\nAssign `FlexThemeData.light` to the app's `theme`, which is the application's\nlight theme definition property, and `FlexThemeData.dark` to `darkTheme`.\nFor both `FlexThemeData` dark and light we set the `scheme` property to\n`FlexScheme.mandyRed` to use the \"Oh Mandy red\" predefined `scheme` colors, and\nget matching light and dark themes based on the scheme's color definitions.\n\nThe three line modified `MaterialApp` of the Flutter default counter app\nbecomes:\n\n```dart\n  class MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      // The Mandy red, light theme.\n      theme: FlexThemeData.light(scheme: FlexScheme.mandyRed),\n      // The Mandy red, dark theme.\n      darkTheme: FlexThemeData.dark(scheme: FlexScheme.mandyRed),\n      // Use dark or light theme based on system setting.\n      themeMode: ThemeMode.system,\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n```\nThe above additions to the Flutter default counter application, gives us the\nfollowing look on the familiar counter app:\n\n<img src=\"https://rydmike.com/assets_fcsv4/fcs_counter_app.png?raw=true\" alt=\"counter sample\" width=\"500\"/>\n\n_FlexColorScheme applied on the standard Flutter Counter Template_\n\nNot as exciting as the earlier theme images above. That is because the basic\ncounter app uses very few features and widgets, therefore it cannot fully\ndemonstrate the results. This is why the included examples contain a lot of\ndemo UI code, that is not really relevant to using FlexColorScheme and is only\nthere to be able to properly demonstrate and show the results.\n\n> **New in version 4:**\n> The `FlexThemeData.light()` and `FlexThemeData.dark()` APIs used above are\n> new in version 4. They are extensions on `ThemeData` that create\n> `FlexColorScheme.light()` and `FlexColorScheme.dark()` objects and call their\n> `toTheme` method in one step. The new syntax is shorter and also look very\n> similar to Flutter SDK `ThemeData.light` and `ThemeData.dark` factories.\n>\n> The original APIs `FlexColorScheme.light().toTheme` and\n> `FlexColorScheme.light().toTheme` do the same thing and still work.\n> They will not be deprecated, they implement\n> the actual functionality and are useful in more advanced theming use\n> cases. They can for example be useful and preferred when you add your own\n> custom widget sub-themes to FlexColorScheme themes. With FlexColorScheme\n> you can then extract the `ColorScheme` it will use for its ThemeData. You\n> often need the colors in this `ColorSchene` when you create widget sub-themes\n> that use matching colors.\n\n## Default Example - Hot Reload Playground\n\nA quick and simple way to try FlexColorScheme V4 is to build the\ndefault example application. You can then use it as a hot reload playground to\nexperiment with and test all the different theming and configuration options.\n\nTo try the default **example** on a device or simulator,\nclone the [repository](https://github.com/rydmike/flex_color_scheme) and\nrun the example:\n\n```bash\ncd example/\nflutter run --release\n```\n\nThe result is a demo app that uses a custom defined color scheme,\nhas a theme mode switch, includes theme colors presentation\nand Material widget samples. With these you can see the active color scheme's\ncolors and the created theme's impact on common Material UI widgets.\n\nThe default sample app, the **Hot Reload Playground**, looks like this:\n\n[<img src=\"https://rydmike.com/assets_fcsv4/00_playground_default.jpg?raw=true\" alt=\"playground_default\"/>](\nhttps://rydmike.com/assets_fcsv4/00_playground_default.png?raw=true)\n_Hot Reload Playground the Default Example App (click image to open hires version)_\n\nIt comes fully loaded with template settings and thorough\ncomments that explain what to change to produce different results. You\ncould for example change the `_useScheme` to `true`, as shown below and hot\nreload it, to then use the new `FlexScheme.blueWhale` theme instead.\n\n```dart\n// To use a pre-defined color scheme, don't assign any FlexSchemeColor to\n// `colors`, instead pick a FlexScheme and assign it to the `scheme` property.\n// Try eg the new \"Blue Whale\" color scheme.\nconst FlexScheme _scheme = FlexScheme.blueWhale;\n\n// To make it easy to toggle between using the above custom colors, or the\n// selected predefined scheme in this example, set _useScheme to true to use the\n// selected predefined scheme above, change to false to use the custom colors.\nconst bool _useScheme = true;\n```\n\nThere are many settings you can play with in the default\nexample application. The above selected **blue whale** theme is the first one\nshown in the image below.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/01_playground_options.jpg?raw=true\" alt=\"options\"/>](\nhttps://rydmike.com/assets_fcsv4/01_playground_options.png?raw=true)\n_Hot Reload Playground (click image to open hires version)_\n\nThe other results shown above were also produced by editing a few\nproperties in this hot reload playground.\n\nIn the hot reload playground the side menu has no real functionality, it is\nonly there to present more surface area using the `theme.colorScheme`\nbackground color. The theme toggle in the menu does work though.\n\n## Themes Playground\n\nThe side menu in the default example is actually made for and used\nin the last example in the tutorial. The final example\ndoubles as an interactive **Themes Playground** application.\n\nThe **Themes Playground** is useful as a tool to find themes and settings you\nprefer, or just use it to figure out what you can do with\nFlexColorScheme. The playground persists all its settings, and you can\nreset them back to their default values. It can even generate the Flutter\nFlxColorScheme setup code needed to produce the shown active theme.\n\nThe **Themes Playground** can be used as a [web app\nhere](https://rydmike.com/flexcolorschemeV4Tut5). Its source code\nis also available in the example sub folder in folder\n[/example5](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example5).\n\nIt is recommended to go through the tutorial further below to get introduced to\nall features step by step. However, feel free to go straight for example 5 if\nyour really like to dive into the deep end. It is a bit more advanced example\nthan those generally bundled with packages, but not that complicated.\n\nThe **Themes Playground** web app is best experienced at as high resolution as\npossible, preferably even 4k. It is responsive and works splendidly down to\nphone sizes too. It is however easier to see and experience what each\nconfiguration option in FlexColorScheme does, when you use a large screen\nwith high resolution, because then you can see the result of all settings at\none glance.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/05-web-demo-4k.jpg?raw=true\" alt=\"playground-4k\"/>](\nhttps://rydmike.com/assets_fcsv4/05-web-demo-4k.png?raw=true)\n_FlexColorScheme **Themes Playground** app at 4k resolution (click image to open hires version)_\n\nWith the Themes Playground you can also copy any built-in color scheme to a\ncustomizable color scheme, that you can modify by clicking\non the four main scheme colors in the custom scheme. The Themes Playground\ncan also generate FlexColorScheme setup code that will create the same\ncolor scheme and theme that you are looking. All you have to do is copy the\ncode and paste it into your app. You can find an example in this\n[tweet and referenced thread](https://twitter.com/RydMike/status/1461381878494150659)\n\n## Copy Playground Theme\n\nThere is also a simple template example suitable for testing themes that you\ncopy-paste from the **Themes Playground** example. It is intended to be used\nas a quick and simple app that you can use for experimenting with pasted in\nthemes generated by the live web application. Its source code is available in\nthe example sub folder in folder\n[/example_copy_paste](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example_copy_paste).\n\n# All Color Schemes\n\nColor schemes are not fun without some built-in schemes ready to try and use.\n**FlexColorScheme** comes bundled with **36** ready to go matching light\nand dark color schemes. You you can use them in your applications if you like.\nHere is a grid showing all the color schemes in light and dark mode. You\ncan click on them to open a high resolution version of each image.\n\n\n|  Light | Dark | Light | Dark | Light | Dark | Light | Dark |\n| ----  | ---- | ----  | ---- | ----  | ---- | ----  | ---- |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb01.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme001.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb01.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme001.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb02.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme002.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb02.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme002.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb03.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme003.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb03.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme003.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb04.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme004.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb04.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme004.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb05.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme005.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb05.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme005.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb06.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme006.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb06.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme006.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb07.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme007.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb07.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme007.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb08.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme008.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb08.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme008.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb09.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme009.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb09.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme009.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb10.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme010.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb10.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme010.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb11.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme011.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb11.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme011.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb12.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme012.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb12.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme012.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb13.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme013.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb13.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme013.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb14.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme014.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb14.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme014.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb15.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme015.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb15.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme015.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb16.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme016.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb16.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme016.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb17.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme017.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb17.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme017.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb18.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme018.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb18.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme018.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb19.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme019.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb19.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme019.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb20.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme020.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb20.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme020.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb21.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme021.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb21.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme021.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb22.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme022.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb22.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme022.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb23.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme023.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb23.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme023.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb24.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme024.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb24.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme024.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb25.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme025.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb25.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme025.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb26.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme026.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb26.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme026.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb27.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme027.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb27.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme027.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb28.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme028.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb28.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme028.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb29.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme029.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb29.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme029.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb30.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme030.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb30.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme030.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb31.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme031.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb31.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme031.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb32.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme032.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb32.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme032.png?raw=true) |\n| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb33.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme033.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb33.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme029.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb34.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme034.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb34.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme030.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb35.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme035.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb35.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme031.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb36.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/LightScheme036.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb36.jpg?raw=true\" width=\"150\"/>](https://rydmike.com/assets/DarkScheme032.png?raw=true) |\n\n_All available color schemes (click to open a hires version of each image)_\n\nIn the [**scheme reference**](#scheme-reference) you can find a table listing\nall the built-in color schemes with their `FlexScheme` enum value, name and\ndescription.\n\nAnother convenient and recommended way to see and try all the predefined color\nschemes is by using the Web versions of the package\n[example 4 \"All Themes\"](https://rydmike.com/flexcolorschemeV4Tut4) and of course\n[example 5 \"Themes Playground\"](https://rydmike.com/flexcolorschemeV4Tut5) is\nthe ultimate showcase of all the built-in color schemes.\nUsing it you can try all the built-in color schemes with theming options,\nand see the impact they have on often used Flutter UI widgets.\n\n## Built-in Color Scheme Designs\n\nThe built-in color schemes are all tuned matching light and dark scheme pairs.\nMost of them are pretty conservative, but some are intentionally a bit more\nplayful and bold. The first two color schemes are actually the Flutter and\nMaterial 2 Design Guide examples of light and dark color schemes, and the Flutter\nhigh contrast light and dark color versions as well. So OK, there are actually\n\"only\" 34 new and different from standard Flutter ready-made light and dark\ncolor scheme pairs. The color scheme \"Amber blue\" is also a high-contrast theme.\nAn alternative to the built-in Material high contrast theme.\n\nThe built-in schemes do not claim to be a \"this selection\" fits all needs\ncollection. Nor do they claim to be more correct than any other color scheme.\nWhat fits your needs and looks good to you, is the right choice for your\napplication and use case.\n\nYou can make your own custom scheme totally from scratch, or use the built-in\nones as a starting point and inspiration. You can re-use colors from existing\nschemes, via their const `FlexColor` name. All the color values in the color\nschemes are available as const values, so you can easily make new custom\ncombinations using existing color schemes and add a few custom ones to the mix.\n\n## Use Your Own Color Schemes with FlexColorScheme\n\nThe package examples show how you can easily make and use your own custom\ncolor schemes with FlexColorScheme. Maybe the built-in examples will inspire\nyour creative side to define your own schemes. The tutorial walks you through\nhow to define your own color schemes and make themes based on them.\n\nYou can create your own custom list of schemes, then use this list with\nonly your own custom color schemes selection. You may also append some, or\neven all the built-in schemes after your custom schemes, and give your\nusers a lot of theme options. How to do this is demonstrated in the tutorial\nin examples 4 and 5.\n\nWhere did the built-in color schemes come from? While building, testing and\nusing this package over a long period of time, a number\nof color schemes were born as a side product. I decided to include them in\nFlexColorscheme and offer them for re-use and inspiration as they are. It is\nhowever not necessary to use them to reap the benefits of FlexColorScheme.\n\nThe color and scheme definitions for the built-in color schemes are in their\nown class. They will not be included in the release compiled version of your\napplication if you do not use (reference) them in your application, and instead\nonly use your own custom color schemes for the themes.\n\n# Example Applications\n\nFlexColorScheme comes bundled with six different examples. Earlier we\nsaw how you can build the default example, and use it as a\n\"Hot Reload Playground\". You can use it to experiment and learn on your own\nabout FlexColorScheme's features and how to use them.\n\nThe default example is a template that is heavily commented to guide\nyou and encourage you to play around with different options in code, then use\nFlutter's hot reload feature and see the results at once.\n\nThe other five examples are a part of a tutorial path, with increasing\ncomplexity, that we walk through in the tutorial. It ends with the complete\n**Themes Playground** demo app included as example 5.\n\n## Building the Examples\n\nYou can build the examples by using preconfigured launch and run config files for\nVS-Code (.vscode -> launch.json) and Android Studio/IntelliJ\n(.run -> *.xml files).\n\nWhen you have cloned the package repo and open the\nproject in VS-Code or Android Studio/IntelliJ the configurations should be\navailable for you, so you can easily build all the examples.\n\nIn IntelliJ and Android Studio you can use:\n<img src=\"https://rydmike.com/assets_fcsv4/intelliJ-run-file.png?raw=true\" alt=\"intellij-run\"/>\n\n_For IntelliJ and Studio there is a .run config that can be used to build and run the examples_\n\nIn VS-Code you can use:\n<img src=\"https://rydmike.com/assets_fcsv4/vscode-run-file.png?raw=true\" alt=\"vscode-run\"/>\n\n_For VS-Code there is a launch.json that can be used to build and run the examples_\n\n\n## Live WEB Demos of the Examples\n\nIf you want to take a quick look at all the examples, you can try live web\nversions of them.\n\n[**Example 1**](https://rydmike.com/flexcolorschemeV4Tut1) represents the simplest\nuse case. To use one of the built-in color schemes as your application theme.\nYou can toggle between its light and dark variant, or allow device system theme\nmode setting to control if the dark or light theme is used.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/21-example-1-a-small.jpg?raw=true\" alt=\"ColorScheme example 1\"/>](https://rydmike.com/assets_fcsv4/21-example-1-a.png?raw=true)\n_Example 1) Using a built-in FlexColorScheme color scheme as application\ntheme (click image to open hires version)_\n\n[**Example 2**](https://rydmike.com/flexcolorschemeV4Tut2) is like example 1,\nbut we use custom colors to make a custom color scheme and turn it into a theme.\nThe architecture is also more advanced, it uses the approach introduced with\nFlutter skeleton template, using a theme service and theme controller.\nHere we keep settings only in memory using the in memory `ThemeServiceMem`\ntheme service.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/22-example-2-a-small.jpg?raw=true\" alt=\"ColorScheme example 2\" />](https://rydmike.com/assets_fcsv4/22-example-2-a.png?raw=true)\n_Example 2) Using custom colors with FlexColorScheme color scheme as\napplication theme (click image to open hires version)_\n\n[**In example 3**](https://rydmike.com/flexcolorschemeV4Tut3) we can toggle the\nactive theme between 3 different predefined color schemes, plus the custom one\nwe defined in example 2. We can also opt in and out of using the new sub theming.\n\nAll the settings are persisted locally, using a theme service\ncalled `ThemeServicePrefs`. This service uses the package\n[SharedPreferences](https://pub.dev/packages/shared_preferences) to persist\nthe theme settings locally as they are modified.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/23-example-3-a-small.jpg?raw=true\" alt=\"ColorScheme example 3\" />](https://rydmike.com/assets_fcsv4/23-example-3-a.png?raw=true)\n_Example 3) Using three built-in schemes, plus a custom color scheme\nas application theme options (click image to open hires version)_\n\n[**In example 4**](https://rydmike.com/flexcolorschemeV4Tut4) we can select any\nof the different built-in color schemes plus three custom ones, and\nuse them as the application theme. In this example we persist the theme\nsettings using a theme service called `ThemeServiceHive`. It persists the\nsettings locally using a package called [Hive](https://pub.dev/packages/hive).\n\n[<img src=\"https://rydmike.com/assets_fcsv4/24-example-4-a-small.jpg?raw=true\" alt=\"ColorScheme example 4\" />](https://rydmike.com/assets_fcsv4/24-example-4-a.png?raw=true)\n_Example 4) Using custom schemes, plus all the built-in ones as application\ntheme options (click image to open hires version)_\n\n[**Example 5**](https://rydmike.com/flexcolorschemeV4Tut5) is the last, and most\ncomplex of the examples. It presents most configuration and\nsettings available in FlexColorScheme. You can modify them interactively\nand the application changes theme as you modify any setting.\n\nIn this example we also persist the theme settings as you change any value\nand parameter in the app. This is done using the same theme service\n`ThemeServiceHive` that was used in example 4. The settings can also be reset\nback to their default values.\n\nThis example is best seen and tested on a tablet, desktop or desktop web browser,\nrather than on a phone. The app certainly works well on a phone sized\ncanvas too, it is using a **very** responsive design. It is just difficult to\nget a good overview of all the settings possibilities and their impact on different,\nwidgets, while changing the settings on the small phone UI, since you cannot see\neverything at the same time as you change property values.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/25-example-5-a-small.jpg?raw=true\" alt=\"ColorScheme example 5\" />](https://rydmike.com/assets_fcsv4/25-example-5-a.png?raw=true)\n_Example 5) The Themes Playground (click image to open hires version)_\n\n\n[**Flexfold demo**](https://rydmike.com/demoflexfold)\n\nAnother classic example of **FlexColorScheme** usage can be seen in the Flutter\nweb [**Flexfold demo app**](https://rydmike.com/demoflexfold).\n\n<img src=\"https://rydmike.com/assets/FoldTheme1.gif?raw=true\" alt=\"Flexfold demo\"/>\n\n_Flexfold Demo uses FlexColorScheme for its themes._\n\nThe live version of the Flexfold demo is still using FlexColorScheme version 3.\nExample 5, the **Themes Playground**, has more theming features\nthan the Flexfold demo.\n\n# Flutter Theming Introduction\n\nWhen you make themed Flutter applications you should base the colors of your\napplication on a light theme mode suitable `ColorScheme`, and a dark theme mode\n`ColorScheme`. Then create your light and dark `ThemeData` using these color\nschemes, by assigning the `ColorScheme` for each mode to the `colorScheme`\nproperty in `ThemeData`. In your `MaterialApp` you then assign the `ThemeData`\nfor your light, and dark theme to the `theme` and `darkTheme` properties\nin the `MaterialApp`.\n\nThis gives you an application that uses the defined color schemes on all the\nFlutter SDK built-in Material UI widgets. Well, on most of them anyway.\nFlutter's `ThemeData.from` a `ColorScheme` has a few gaps. The used color scheme\nis not consistently applied on all built-in Flutter SDK Material UI Widgets.\nTo get it really right, you also have to assign the colors from your\n`ColorScheme` to a number of color properties that still\nexist as direct properties in `ThemeData`.\n\n## Flutter ThemeData\n\nAt its core, `FlexColorScheme.toTheme` creates a `ThemeData` object. It helps\nyou make a color scheme based, consistent and a more refined\nFlutter `ThemeData` object.\n\nThe Flutter `ThemeData` object is a very large theme property data,\nand theme behaviour controlling class. It can change the look and feel of Flutter\napplications completely. It is not really that difficult to use, but it has many\nquirks and oddities, especially when it comes to used colors. This is mostly\ndue to past legacy and things that were not considered early on. Some parts were\ndone differently first, later things changed, but those earlier ways are\nstill supported to not break past behavior, together with some newer ways to\ndefine and setup colors.\n\nThis is all further complicated by the fact that\nunder the hood many Flutter SDK UI widgets still use the original direct color\nproperties in `ThemeData`. These properties are now mostly assigned color\nvalues via `ThemeData.colorScheme`. Exactly how depends on which\n`ThemeData` factory constructor you use.\n\nMany older widgets still do not use the `ThemeData.colorScheme` properties for\ntheir default color values directly, they still use color property values in\n`ThemeData`, that got assigned values from `ThemeData.colorScheme`, that varies\ndepending on used `ThemeData` factory! Still with me?\nVery basic and old widgets, like for example `Material` and `Card` fall into\nthis category.\nWhile some newer widgets actually do use colors from `ThemeData.colorScheme`\ndirectly. Additionally, the colors in the\n`ColorScheme` held by the `colorScheme` property in `ThemeData` can actually not\nrepresent all the colors that exist in `ThemeData`'s color properties. Thus, some\nof those color properties never get any `ColorScheme` based values assigned to\nthem. They are left to default values assigned by the `ThemeData` factory,\nunless you explicitly assign them some color that fits with your color scheme.\nIf this is not done, it can then look odd when some widgets use the factory\ndefault colors, while the rest of your app's widgets correctly use the\n`ColorScheme` based colors. Luckily there are not so many widgets left that this\nstill applies to, but there are a few, for example `CircleAvatar`.\n\nIt can all be very confusing and frustrating to fight with ThemeData and its\ncolors, and if not done properly, it may result in themes with color schemes\nthat are not entirely consistent or logical across all standard SDK\nwidgets in your application.\n\nOne of the fundamental things FlexColorScheme does, is that it fixes these minor\ninconsistencies and gaps that exist with Flutter's `ThemeData.from` factory\nand handles the complexity of using the `ThemeData` factory directly. It\nreleases you from the burden of knowing what colors in it affects which widgets\nhow.\n\nFlexColorScheme makes a few opinionated, but subtle theme modifications compared\nto the `ThemeData.from` themes created from a `ColorScheme`. By default,\nFlexColorScheme theming refrains from touching theme properties not related\nto making the colors more consistent. Some minor adjustments were however\nneeded. This is covered in detail in the external\n[inside FlexColorScheme document (external link)](https://github.com/rydmike/flex_color_scheme/blob/master/INSIDE.md).\n\nThere is a Flutter development plan to deprecate most, if not all, of the direct\ncolor properties in the `ThemeData` class. Flutter SDK Widgets should after that\nonly use `ColorSceheme` based colors that are in the ThemeData `colorScheme`\nproperty, as the default colors for their designs. This design\n[document](https://flutter.dev/go/material-theme-system-updates)\ndescribes the plan and reasoning. There is also a color property deprecation\ncheck list [issue 91772](https://github.com/flutter/flutter/issues/91772) to\nmirror this plan.\n\nFor FlexColorScheme the progress of these actions are monitored\nclosely. Needed changes and updates in FlexColorScheme will be implemented when\nrelated changes in ThemeData reach the Flutter stable channel. FlexColorScheme\nalready of course correctly defines a `ColorScheme` for `ThemeData`. The\ntypical maintenance need is removing deprecated `ThemeData` properties and check\nif some new sub-theme color property needs to be modified to replicate past\nFlexColorScheme theming behaviour, when its corresponding color property is\nremoved from `ThemeData`.\n\n## Color Blended Surfaces\n\nThe Material 2 Guide briefly mentions\n[color branded and blended surfaces](https://material.io/design/color/dark-theme.html#properties).\nIn the new version of Material Design called [Material You and now also known as\nMaterial 3](https://m3.material.io/), color branded or blended and also\njust colored surfaces, are used extensively. It is done in more flexible ways\nthan what can be done with theming alone in current version of Flutter. We look\nforward to seeing these features soon in Flutter as well.\n\nWith **FlexColorScheme** you can already with current version of Flutter SDK\neasily create fancy looking primary color branded\nand alpha blended themes. These themes work natively with the current Material\n2 design based themes and all UI widgets in the current version of Flutter.\n\nThe themes are created by using different blend modes and blend level strengths,\nfor blending in primary color into surface and background colors. This can bring\ndifferent and new nuances to your application. Below an example of the\nsame theme, but using different blend modes and levels. The effect can be kept\nvery subtle or made very bold and impactful.\n\nThe first light and dark image pair show the theme using blend level 0.\nAt level 0 there are no alpha blends of primary color in any surfaces, so all\nmodes look the same. The next six images use the same blend level strength 18,\nbut show six different blend modes. Next, one of the modes is repeated,\nbut at blend level 33. Last the theme that was used to generate all these\ndifferent nuances of the same color scheme based theme, is shown.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/06-blend-examples.jpg?raw=true\" alt=\"blend examples\"/>](\nhttps://rydmike.com/assets_fcsv4/06-blend-examples.png?raw=true)\n_FlexColorScheme using same theme, but with\ndifferent blend modes and levels (click image to open hires version)_\n\nThere are **9 different blend modes at 40 different levels each**, that you can\nchoose from, to tune a theme to your liking. You don't have to use the\nsame blend mode or level for your light and dark theme mode, the included\nexamples only do so to keep the interactive examples simpler. Often a\ndifferent blend mode and level for your light and dark themes, may produce\na more balanced or more impactful result, depending on your design goal.\n\nThe above images were made with the **Themes Playground** (example 5) app\nrunning as a phone app, instead of using the\n[web demo](https://rydmike.com/flexcolorschemeV4Tut5).\nThe application is open source, and is included as the last example in the\npub.dev bundled examples and on\n[GitHub here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example5).\nThe **Themes Playground** is an interesting and useful tool when you want to\nfind fitting themes, blend modes and levels to use as your application's\nFlexColorScheme based theme. It even allows you to copy/paste the code needed\nto make the Flutter theme you are looking at.\n\n# Frequently Asked Questions\n\nBelow some frequently asked question and answers about using FlexColorScheme.\n\n## Custom color schemes?\n\nA `FlexColorScheme` based theme, can like Flutter's standard `ColorScheme`\nbased theme be created by specifying all the required color scheme colors.\nHowever, with `FlexColorScheme`\nyou can also specify only the primary color and get all other colors needed\nfor a complete color scheme computed based the given primary color.\n\nThere is a helper class `FlexSchemeColor`, with a factory called\n`FlexSchemeColor.from`, it can create complete color schemes from\nincomplete color scheme data. Additionally, its `toDark` method can create a\ncomputed matching dark scheme from a defined light scheme.\n\nThese features are useful when you quickly want to test a single color, or maybe\nonly a primary and secondary color for a light theme, and get all other scheme\ncolors computed. When you figure out the colors you want, you can use exactly\ntuned color definitions and make your custom color schemes from const values\ninstead. Using different ways to create custom color schemes is presented in\ndetail in the tutorial examples 2, 3 and 4.\n\nAnd you can also use the live version of example 5, the\n[Themes Playground](https://rydmike.com/flexcolorschemeV4Tut5) to copy\nexisting color schemes and modify them\ninteractively and copy the code for a theme, either custom one or all\nthe setups you made for a built-in one.\n\n## Can I add custom sub themes?\n\nWhen you make a theme with `FlexThemeData.light` or `dark`, it returns a normal\nFlutter `ThemeData` object that you can use like any other `ThemeData` object.\nYou can then use this returned `ThemeData` and add\nadditional custom sub theming to it with `ThemeData`'s normal `copyWith` method,\nbefore passing it on to your application's `theme` or `darkTheme` properties.\n\nIf you need color values that `FlexColorScheme` has created, maybe some auto\ncalculated main colors, but more typically the blended surface and on surface\ncolors for your sub themes, you can get them too. For this advanced use case,\nit is recommended to use FlexColorScheme with the factory constructor\n`FlexColorScheme.light` and `FlexColorScheme.dark`, to create the\n`FlexColorScheme` objects first. Then get the `ColorScheme` they define\nwith its `toScheme` method, and use this `ColorScheme` data as input to your\ncustom sub theme creation.\n\nWhen you make sub themes, you often need access to the colors their main\n`ThemeData` is using and storing in its `colorScheme` property. This step\ngives you that before even creating the `ThemeData` object from your\nFlexColorScheme object. You can then Pass the `ColorScheme` you got\nfrom `toScheme`, or just one or some of its\ncolor values, along to your methods that define your sub theme data.\n\nUsing these steps you can turn your FlexColorScheme to `ThemeData` with its\n`toTheme` method, and then add your sub themes with `copyWith` to this\nobject in the same go, since they now use the same `ColorScheme` colors, that\nthe ThemeData created with `toTheme` will get as as well.\n\nYou can of course also create the FlexColorScheme `ThemeData` with the\nextensions `FlexThemeData.light` and `dark`, and get the `ColorScheme`\nobject from the ThemeData `colorScheme` property. Then use that color\nscheme to create your sub-themes that need access to those color values.\nFinally, use `copyWith` to create a new `ThemeData` with your custom sub themes\nincluded. This is however one extra step and additional ThemeData object\ncompared to the other approach.\n\nIf you are creating modifications to a sub-theme that FlexColorScheme already\ndefines, **and** you want to keep the properties it has assigned. For example\nonly override a few property values in such a sub theme, then you will indeed\nneed to first create the `FlexColorScheme` based `ThemeData` object. Use the\nsub theme from it that you want to add a modified copy of, as input to the\nnew `ThemeData`. In such a case you might as well use `FlexThemeData.light`\nand `dark` API, since there is no win in the steps by first creating\nthe `FlexColorScheme` object.\n\nIf you are not opting in on the opinionated sub themes, this applies to the\nfollowing sub themes that are not null even in the vanilla FlexColorScheme\nbased `ThemeData`:\n\n- `ThemeData.appBarTheme`\n- `ThemeData.bottomAppBarTheme`\n- `ThemeData.tabBarTheme`\n- `ThemeData.inputDecorationTheme`\n- `ThemeData.textSelectionTheme`\n- `ThemeData.tooltipTheme`\n- `ThemeData.buttonTheme` (for the legacy deprecated buttons)\n- `ThemeData.chipTheme`\n- `ThemeData.bottomNavigationBarTheme`\n\nThe changes made in the above vanilla FlexColorScheme based `ThemeData`\nsub themes are pretty small, but the themes are not null. You can read more\nabout what changes `FlexColorScheme` makes to them in this\n[\"Inside FlexColorScheme\" document (external link)](https://github.com/rydmike/flex_color_scheme/blob/master/INSIDE.md).\n\nWhen you opt in on using the opinionated sub themes in version 4, the above\nsub themes are typically further modified. Additionally, the following sub\nthemes are also no longer null, which they are in the vanilla version:\n\n- `ThemeData.iconTheme`\n- `ThemeData.primaryIconTheme`\n- `ThemeData.textButtonTheme`\n- `ThemeData.elevatedButtonTheme`\n- `ThemeData.outlinedButtonTheme`\n- `ThemeData.toggleButtonsTheme`\n- `ThemeData.floatingActionButtonTheme`\n- `ThemeData.cardTheme`\n- `ThemeData.popupMenuTheme`\n- `ThemeData.dialogTheme`\n- `ThemeData.timePickerTheme`\n- `ThemeData.snackBarTheme`\n- `ThemeData.bottomSheetTheme`\n- `ThemeData.navigationBarTheme`\n\nIf you want to add custom sub-themes and keep the already existing modified\nproperties in `ThemeData` intact, you cannot use just a `copyWith` using\na sub theme constructor. You have to use the sub-theme instance from\nthe current `ThemeData`, and the `copyWith` on it, assign it to the sub theme\nin the `copyWith` on the `ThemeData`. This is the same way that you\nwould modify `ThemeData` when you create scoped ThemeData inside your\napp, and want it to fully inherit the parent Theme, but with a few\nproperties modified in some sub themes only. This sounds more complicated\nthan it is.\n\nTo make it easier to follow, here is an example of what this looks like.\nSay you want to modify shadow color of the `appBarTheme` in `ThemeData`,\nbut you also want to keep all the other theme changes FlexColorScheme has\nintroduced to it, like e.g. using surface color with a blend of primary as\nits background color, if you have chosen that mode for the `AppBar` theme.\nYou can then add your shadow color like this:\n\n\n```dart\nclass MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    final ThemeData lightTheme = FlexThemeData.light(scheme: FlexScheme.mandyRed);\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: lightTheme.copyWith(appBarTheme: lightTheme.appBarTheme.copyWith(\n           shadowColor: const Color(0xFFFFFFFF));\n      themeMode: ThemeMode.light,\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n```\n\nThis is still a bit involved. I might look into the possibility of providing\ndeepCopyWith methods, at least for the first sub theme level, in a\nfuture version. Some kind of `deepCopyWith` method for sub-themes would be\nreally handy to even have in the Flutter SDK on `ThemeData`.\n\nOne additional possibility when creating totally custom sub-themes is to utilize the\nstatic helper functions in the `FlexSubThemes` class. FlexColorScheme uses\nthem internally to create the sub themes in version 4.\nYou can find its API documentation [here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemes-class.html).\nSome of them offer simplified APIs for setting and using more involved features\nin its standard SDK sub-theme. You can also use them to check out\nhow a particular design is implemented if you want to replicate it in a standard\nFlutter SDK sub-theme.\n\nYou can of course also use these sub theming functions to make custom\nsub-themes, and even complement them with `copyWith` values for properties\nthey do not provide. Please note\nthat the `FlexSubThemes` static helper functions are not meant to provide\nall properties for all existing sub themes. They only cover the properties\nand shortcut features needed by `FlexColorScheme`. When using `FlexColorScheme`\nyou typically use the `FlexSubThemesData` configuration class, passed in to\n`FlexColorScheme.subThemesData` property, as a convenient way to configure\nand customize them in one go.\n\n\n## If I don't use the predefined Schemes, why should I use FlexColorScheme?\n\nThe purposes with the FlexColorScheme package is to:\n\n* Fixes some odd things in Flutter's standard ThemeData definitions and make\n  all SDK Widgets, old, new and even deprecated ones, use the specified color\n  scheme in the expected way.\n* Enable easy switching among multiple color schemes in an app.\n* Provide an easy way to make themes with primary color branded and blended\n  backgrounds and surfaces. Be able to easily vary the blend level and mode\n  for different surfaces.\n* Provide a quick toggle for different `AppBar` styles, without the need to\n  manually make a custom theme for it every time, including matching `TabBar`.\n* Provide optional support for a true black mode for dark themes.\n* Quickly swap the primary and secondary color definitions, if you\n  want to try your theme the other way around.\n* Theme the Android System navigation bar to match your app theme, and make it\n  partially or totally transparent.\n* With default settings FlexColorScheme avoids touching the Widget sub-theme\n  definitions, but in a few cases it is needed to fix things and to make some\n  minor design changes. In the default produced ThemeData the changes are as few\n  and subtle as possible, leaving the task of Widget sub theming more up to you.\n  However, you can also opt in on widget sub themes to get a more refined and\n  opinionated look on widgets and used text theme. The defaults for\n  the new opt in sub themes are inspired by the new\n  [Material 3 guide](https://m3.material.io/). Following it when it can easily\n  be accomplished by using the Material 2 based theming in Flutter. Full\n  support for Material 3 widgets and themes is coming to Flutter later.\n* FlexColorScheme also provides a way to make \"lazy\" quick toned `ColorScheme`\n  themes from just a single light scheme color. Even its dark scheme\n  counterpart can be made from this single color definition.\n\nIf you like the above features, then FlexColorScheme may fit your theming\nrequirements, even if you do not use any of its built-in color schemes.\n\n## Can we change this predefined scheme's colors?\n\nNo, current predefined schemes will not be changed. Changing them would be a\nbreaking change to the package version promise. The scheme colors could in theory\nbe changed by releasing a new major version that break past scheme color\ndefinitions. At the moment, there are no plans to ever add breaking releases\nto just change a predefined scheme's color(s). All current color definition\nvalues are also included in the package tests, and a failed color value test is\nconsidered a breaking design change.\n\n## Can we add this scheme?\n\nTo keep things interesting, there will from time to time be new color schemes\nadded to the package. If you have a beautiful color scheme with matching light\nand dark theme mode colors, that you think would be perfect to include, then\nplease post a suggestion as a GitHub issue.\n\nNo promise is made about its eventual inclusion, but if it is a nice,\nunique, and overall a pretty color scheme, it will likely be included.\nComing up with nice color schemes is trickier than it seems,\nsuggestions and contributions to new ones are very welcome.\n\n## Can I use different built-in color schemes for my light and dark themes?\n\nYes this is possible. Use different `FlexScheme` enum values for the light\nand dark `FlexThemeData.light` and `FlexThemeData.dark` factories' `scheme`\nproperty. If the colors used by the selected schemes are a bit related, this\ncan be used to create nice and unique light and dark combinations of\nthe predefined schemes.\n\nBy using the `colors` property you could even apply a `FlexSchemeColor` that\nhas data that was designed for a light theme, to the `FlexThemeData.dark` factory,\nand wise versa. For example, using the `FlexThemeData.dark` factory, you could\nto its `colors` property assign the `FlexSchemeColors` from\n`FlexColor.schemes[FlexScheme.mandyRed].light` that are designed and intended\nto be used with the light mode factory.\n\nThe results will typically not be very useful or pretty. The rationale for\nthe slightly involved data structure, is to keep it flexible, but at the same\ntime provide self documenting API guidance on how the data was designed to be\nused and consumed.\n\nThe `scheme` property prevents using the light scheme colors for the dark\nfactory and wise versa. It can however be done if so desired by using the\n`colors` property as explained above. The `colors` property is always needed and\nused when you make custom color schemes using the `FlexThemeData.light` and\n`FlexThemeData.dark` factories.\n\n# Tutorial\n\nIn this tutorial we go through all the bundled examples and explain the\nused `FlexColorScheme` features in each example.\n\nThe key part for each example is always in the used `MaterialApp`, where all the\nFlexColorScheme setup for the themes are made. The rest of the content in the\nexamples is mainly there to make a visual presentation of the resulting theme from\nthe used color scheme, and to allow you to control the theme settings.\n\n## Example 1 - Basic Theme Usage\n\nThe first and simplest example shows how you can use a predefined color scheme\nin `FlexColorScheme` to define light and dark themes using the selected scheme.\nHow to turn it into a theme used by your application, and then switch between\nits light and dark mode themes. A theme showcase widget shows the theme's effect\non several common Material UI widgets.\n\n> The full code is not shown below, only highlights.\n> Please find the complete example code\n> [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example1).\n\n ```dart\nvoid main() => runApp(const DemoApp());\n\nclass DemoApp extends StatefulWidget {\n  const DemoApp({Key? key}) : super(key: key);\n\n  @override\n  _DemoAppState createState() => _DemoAppState();\n}\n\nclass _DemoAppState extends State<DemoApp> {\n  // Used to select if we use the dark or light theme, start with system mode.\n  ThemeMode themeMode = ThemeMode.system;\n\n  @override\n  Widget build(BuildContext context) {\n    // Select the predefined FlexScheme color scheme to use. Modify the\n    // used FlexScheme enum value below to try other pre-made color schemes.\n    const FlexScheme usedScheme = FlexScheme.mandyRed;\n\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      scrollBehavior: AppScrollBehavior(),\n      title: 'Basic Theme Usage',\n      // Use a predefined FlexThemeData.light() theme for the light theme.\n      theme: FlexThemeData.light(\n        scheme: usedScheme,\n        // Use very subtly themed app bar elevation in light mode.\n        appBarElevation: 0.5,\n      ),\n      // Same definition for the dark theme, but using FlexThemeData.dark().\n      darkTheme: FlexThemeData.dark(\n        scheme: usedScheme,\n        // Use stronger themed app bar elevation in dark mode.\n        appBarElevation: 2,\n      ),\n      // Use the above dark or light theme based on active themeMode.\n      themeMode: themeMode,\n      home: HomePage(\n        // We pass it the current theme mode.\n        themeMode: themeMode,\n        // On the home page we can toggle theme mode between light and dark.\n        onThemeModeChanged: (ThemeMode mode) {\n          setState(() {\n            themeMode = mode;\n          });\n        },\n        // Pass in the FlexSchemeData we used for the active theme.\n        flexSchemeData: FlexColor.schemes[usedScheme]!,\n      ),\n    );\n  }\n}\n```\n\nTo the `HomePage` we pass in the current value of the `themeMode` and use a\ncallback to get back its changed value, we use it to update\n`themeMode` in a standard `setState` to make the app rebuild using\nthe new value.\n\nWe also pass in the `FlexSchemeData` we defined for our custom theme to the\n`HomePage`. Not really needed, but we use it on the home page to show the\nactive theme's name, description and colors in a theme mode switch.\n\nWhen you build and run **example 1** you get an application that looks\nlike this in light and dark mode:\n\n[<img src=\"https://rydmike.com/assets_fcsv4/21-example-1-a-small.jpg?raw=true\" alt=\"ColorScheme example 1 light\"/>](https://rydmike.com/assets_fcsv4/21-example-1-a.png?raw=true)\n[<img src=\"https://rydmike.com/assets_fcsv4/21-example-1-b-small.jpg?raw=true\" alt=\"ColorScheme example 1 dark\"/>](https://rydmike.com/assets_fcsv4/21-example-1-b.png?raw=true)\n_Example 1) Using a built-in FlexColorScheme color scheme as application\ntheme. (click image to open hires version)_\n\nScroll down in the app to see the theme showcase further below. It presents the\ntheme with common Material UI widgets. You can try this example as a Flutter\n[web app here](https://rydmike.com/flexcolorschemeV4Tut1).\n\n## Example 2 - Custom Theme\n\nThis example shows how you can define your own color schemes using\n`FlexSchemeColor` and `FlexSchemeData`, to create `FlexColorScheme` based\napplication themes from them.\n\n> The full code is not shown below, only highlights.\n> Please find the complete example code\n> [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example2).\n\n\nIn this example, and the ones after it, we use a `ThemeService` and\n`ThemeController` to manage our theme settings. This follows the example\narchitecture you get when you create a Flutter template application\narchitecture with:\n\n```bash\n > flutter create -t skeleton my_flutter_app\n```\n\nThis example uses a theme service with only memory storage and no persistence.\nIn later examples we use locally persisting theme services. In this example we\nuse the theme controller to change the theme mode and to toggle opting in and\nout of FlexColorScheme's opinionated sub-themes.\n\n```dart\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  // This used theme service.\n  final ThemeService themeService = ThemeServiceMem();\n  // Initialize the theme service.\n  await themeService.init();\n  // Create a ThemeController that uses the ThemeService.\n  final ThemeController themeController = ThemeController(themeService);\n  // Load all the preferred theme settings, while the app is loading, before\n  // MaterialApp is created. This prevents a sudden theme change when the app\n  // is first displayed.\n  await themeController.loadAll();\n  // Run the app and pass in the ThemeController. The app listens to the\n  // ThemeController for changes.\n  runApp(DemoApp(themeController: themeController));\n}\n```\n\nTo make a custom color scheme, we for simplicity define it as a local\nconstant in this example. We make a `FlexSchemeData` object with a name,\ndescription and `FlexSchemeColor` scheme colors defined for the light and\nmatching dark scheme.\n\n```dart\nconst FlexSchemeData _myFlexScheme = FlexSchemeData(\n  name: 'Midnight blue',\n  description: 'Midnight blue theme, custom definition of all colors',\n  light: FlexSchemeColor(\n    primary: Color(0xFF00296B),\n    primaryContainer: Color(0xFF2F5C91),\n    secondary: Color(0xFFFF7B00),\n    secondaryContainer: Color(0xFFFDB100),\n  ),\n  dark: FlexSchemeColor(\n    primary: Color(0xFF6B8BC3),\n    primaryContainer: Color(0xFF4874AA),\n    secondary: Color(0xffff7155),\n    secondaryContainer: Color(0xFFF1CB9D),\n  ),\n);\n```\n\nWe could also have stored the light and dark scheme only in their own\n`FlexSchemeColor` objects, and added them directly in their respective\n`colors` property in `FlexThemeData.light` and `FlexThemeData.dark`.\nHowever, we will also use this information on the `HomePage` for the\ntheme switch widget and to display the scheme name and description.\nPutting them in a `FlexSchemeData` object that bundles the light and\ndark scheme color `FlexSchemeColor`, plus a name and description, is a\nconvenient way to pass it along and re-use the information on the home page.\n\nWe use the `FlexSchemeData` instance `_myFlexScheme` instance `light` and `dark`\nproperties, as `colors` value for our `FlexThemeData.light` and\n`FlexThemeData.dark`, that we then assign to the `MaterialApp` light theme\nproperty `theme` and `darkTheme` property respectively.\n\nThe setup is similar to how we used one of the built-in predefined\n`FlexSchemeData` objects in example 1 via its enum selection property,\nbut in this case we defined our own custom `FlexSchemeData` in `_myFlexScheme`\nand used the `colors` property in `FlexSchemeData` to tell it to use those\ncolors instead of a built-in scheme.\n\nWe glue the `ThemeController` to the MaterialApp. The Flutter standard\n`AnimatedBuilder` Widget listens to the `ThemeController` for changes.\n\nThe Flutter `AnimatedBuilder` is a bit oddly named for this use case. Here\nit serves the purpose of functioning as a \"`ChangeNotifierBuilder`\",\nthat rebuilds its child when its `Listenable`, the `animation` changes.\nWhich it does whenever our `ThemeController` calls `notifyListeners`.\nWhich we do in the `ThemeController` class when we have new updated data\nthat requires the theme to update.\n\n> The usage of the `AnimatedBuilder` does not have anything to do with the\n> fact that the theme changes animate from current ThemeData and colors in it,\n> to the new ones it changes to. This is a built-in feature in ThemeData and\n> its inherited Theme in Flutter SDK. You can change the Theme with\n> call-backs or other state management systems too, and still get the\n> nice theme change animation.\n>\n> The `AnimatedBuilder` is a poor name when it is used as\n> `ChangeNotifierBuilder`, that does not exist in Flutter SDK. It\n> should, just for a better and more logical name, but the `AnimatedBuilder`\n> serves the same purpose here as a `ChangeNotifierBuilder` would.\n\nThis results in that whenever you update any theme settings managed by\nthe `ThemeController`, the `MaterialApp` is rebuilt with the new setting\nbecoming effective. It rebuilds the entire app UI when any value in\nthe `ThemeController` trigger a change via a `notifyListeners` call.\nThis is fine though, since all property changes in it are of the\nnature that the entire App UI needs to be redrawn anyway, so this approach\nworks well for this use case.\n\n```dart\nclass DemoApp extends StatelessWidget {\n  const DemoApp({Key? key, required this.themeController}) : super(key: key);\n  final ThemeController themeController;\n\n  @override\n  Widget build(BuildContext context) {\n\n    return AnimatedBuilder(\n      animation: themeController,\n      builder: (BuildContext context, Widget? child) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          scrollBehavior: AppScrollBehavior(),\n          title: 'Custom Theme',\n          // Define FlexThemeData.light() theme using above custom colors.\n          theme: FlexThemeData.light(\n            colors: _myFlexScheme.light,\n            // Opt in/out on FlexColorScheme sub-themes with theme controller.\n            useSubThemes: themeController.useSubThemes,\n            // Use  very low elevation light theme mode. On light colored\n            // AppBars this show up as a nice thin underline effect.\n            appBarElevation: 0.5,\n            // Here we want the large default visual density on all platforms.\n            visualDensity: VisualDensity.standard,\n            // Use a custom font, Noto Sans in this case.\n            fontFamily: GoogleFonts.notoSans().fontFamily,\n          ),\n          // Same setup for the dark theme, but using FlexThemeData.dark().\n          darkTheme: FlexThemeData.dark(\n            colors: _myFlexScheme.dark,\n            useSubThemes: themeController.useSubThemes,\n            appBarElevation: 1,\n            visualDensity: VisualDensity.standard,\n            fontFamily: GoogleFonts.notoSans().fontFamily,\n          ),\n          // Use the dark or light theme, based on theme controller setting.\n          themeMode: themeController.themeMode,\n          home: HomePage(\n            flexSchemeData: _myFlexScheme,\n            // Pass in the theme controller to the home page.\n            controller: themeController,\n          ),\n        );\n      });\n  }\n}\n```\n\n> As shown above, you can add a font via just a `fontFamily` from GoogleFonts.\nFor better and more fine controlled results, prefer defining complete\n`TextThemes,` using a font and its different styles, you can then even use\nmore than one font for your text theme. Then assign the `TextTheme` to\nthe `textTheme` and `primaryTextTheme` properties in `FlexThemeData`.\nThis is how you would use do it with standard `ThemeData` too.\n\nThe `themeController` is also passed to the `HomePage` where we use it in UI\nwidgets to change the theme mode, and to opt in and out of using the sub themes\nfeature in FlexColorScheme.\n\nWhen you build and run **example 2** you get a sample application that looks\nlike this in light and dark mode:\n[<img src=\"https://rydmike.com/assets_fcsv4/22-example-2-a-small.jpg?raw=true\" alt=\"ColorScheme example 2 light\" />](https://rydmike.com/assets_fcsv4/22-example-2-a.png?raw=true)\n[<img src=\"https://rydmike.com/assets_fcsv4/22-example-2-b-small.jpg?raw=true\" alt=\"ColorScheme example 2 dark\" />](https://rydmike.com/assets_fcsv4/22-example-2-b.png?raw=true)\n_Example 2) Using custom colors with FlexColorScheme color scheme as\napplication theme (click image to open hires version)_\n\nScroll down in the app to see the theme showcase further below. It presents the\ntheme with common Material UI widgets. You can try this example as a Flutter\n[web app here](https://rydmike.com/flexcolorschemeV4Tut2).\n\n\n## Example 3 - Four Themes\n\nThis example shows how you can use three built-in color schemes, add a custom\nscheme, using the same colors as in example 2. We use these four color schemes\nas selectable `FlexColorScheme` based theme options. The example also uses surface\ncolors with primary color blends.\n\n> The full code is not shown below, only highlights.\n> Please find the complete example code\n> [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example3).\n\nThe `main` start function of the app is very similar to example 2, but in this\ncase we use another `ThemeService` implementation, the `ThemeServicePrefs`\nversion, that will locally persist the theme selection options we make.\n\nThe `ThemeServicePrefs` persistence is based on the popular package\n[SharedPreferences](https://pub.dev/packages/shared_preferences).\n\n```dart\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  // Here we can use Shared Preferences. The examples are all built using same\n  // \"example\" app. If we use SharedPreferences in more than one of the apps\n  // they would use the same storage container and share the settings when you\n  // build them locally. By using Hive for most examples, we can change\n  // the storage container name for each example. In these demos the\n  // SharedPreferences service is only used for this example, but you can swap\n  // in the Hive based one here as well if you want to try it.\n  // This also demonstrates how swap used persistence implementation.\n  final ThemeService themeService = ThemeServicePrefs();\n  // To swap to Hive use this instead:\n  // final ThemeService themeService = ThemeServiceHive('flex_scheme_box_3');\n  // Initialize the theme service.\n  await themeService.init();\n  // Create a ThemeController that uses the ThemeService.\n  final ThemeController themeController = ThemeController(themeService);\n  // Load all the preferred theme settings, while the app is loading, before\n  // MaterialApp is created. This prevents a sudden theme change when the app\n  // is first displayed.\n  await themeController.loadAll();\n  // Run the app and pass in the ThemeController. The app listens to the\n  // ThemeController for changes.\n  runApp(DemoApp(themeController: themeController));\n}\n```\n\nWe set the surface mode to\n`FlexSurfaceMode.levelSurfacesLowScaffold` and `blendLevel` to 20. This\ngives us the same medium blend level primary color alpha blend, on the\ntheme colorscheme background and surface colors, while\nscaffold uses a much lower blend.\n\nIn dark mode we decided to use the inverted blend surface mode to this,\n`highScaffoldLowSurfaces`, where surface and background colors have lower\nprimary color alpha blend, in relation the Scaffold background color. We also\nset the used blend level a btt lower, to 15 in dark mode.\n\n ```dart\n class DemoApp extends StatelessWidget {\n  const DemoApp({Key? key, required this.themeController}) : super(key: key);\n  final ThemeController themeController;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: themeController,\n      builder: (BuildContext context, Widget? child) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          scrollBehavior: AppScrollBehavior(),\n          title: 'Four Themes',\n          theme: FlexThemeData.light(\n            colors: themeController.usedScheme == FlexScheme.custom\n                    ? _myFlexScheme.light\n                    : FlexColor.schemes[themeController.usedScheme]!.light,\n            // We use a surface color mode where all Material surfaces use\n            // the same primary color branding, but scaffold background\n            // uses much less.\n            surfaceMode: FlexSurfaceMode.levelSurfacesLowScaffold,\n            // We set the blend level strength to 20.\n            blendLevel: 20,\n            appBarElevation: 0.5,\n            useSubThemes: themeController.useSubThemes,\n            visualDensity: FlexColorScheme.comfortablePlatformDensity,\n            fontFamily: GoogleFonts.notoSans().fontFamily,\n          ),\n          // We do the exact same definition for the dark theme.\n          darkTheme: FlexThemeData.dark(\n            colors: themeController.usedScheme == FlexScheme.custom\n                    ? _myFlexScheme.dark\n                    : FlexColor.schemes[themeController.usedScheme]!.dark,\n            // We don't have to use the same surface mode in dark mode, for an\n            // interesting effect here we use a mode where scaffold background\n            // color gets a much higher blend value than surface and background.\n            surfaceMode: FlexSurfaceMode.highScaffoldLowSurfaces,\n            // You don't have to use same blend level or mode in light\n            // and dark mode, here we use a lower value in dark mode, that\n            // goes better together with the highScaffoldLowSurfaces mode.\n            blendLevel: 15,\n            appBarElevation: 1,\n            useSubThemes: themeController.useSubThemes,\n            visualDensity: FlexColorScheme.comfortablePlatformDensity,\n            fontFamily: GoogleFonts.notoSans().fontFamily,\n          ),\n          themeMode: themeController.themeMode,\n          // This simple example app has only one page.\n          home: HomePage(\n            // Pass in the FlexSchemeData we use for the active theme.\n            flexSchemeData: themeController.usedScheme == FlexScheme.custom\n                    ? _myFlexScheme\n                    : FlexColor.schemes[themeController.usedScheme]!,\n            // Pass in the theme controller to the home page.\n            controller: themeController,\n          ),\n        );\n      },\n    );\n  }\n}\n ```\n\nWe select used theme for the app by using the theme controller's\n`usedScheme` property, that contains the value of currently selected\n`FlexScheme` enum. If it is the `custom` value, we use our custom scheme\n`myFlexScheme` colors. If it is any other value, we get the corresponding\ncolors from the `FlexColor.schemes` map, using the enum value as key.\n\nOn the `HomePage` we have a Flutter SDK `ToggleButtons` UI widget, that\nallows us the select 4 different `FlexScheme` enum values, it changes the\n`themeController` accordingly. The used enum values we can use are\n`hippieBlue`, `mallardGreen`, `outerSpace` and the `custom` option.\n\nYou can find the simple `ToggleButtons` based enum value selector\n[here](https://github.com/rydmike/flex_color_scheme/blob/master/example/lib/shared/widgets/app/theme_select_buttons.dart).\n\nThe `themeController` is also used to decide if we opt in or out on using\nthe new sub theming via `useSubThemes`. A simple on/off switch on the `HomePage`\nallows us to toggle its state between true and false, thus turning on or off\nthe usage of FlexColorScheme's sub theming feature.\n\nBelow are the four resulting themes with their light and dark modes, that we\ncan select and use in this example.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/23-example-3-a-small.jpg?raw=true\" alt=\"ColorScheme example 3 light\" />](https://rydmike.com/assets_fcsv4/23-example-3-a.png?raw=true)\n[<img src=\"https://rydmike.com/assets_fcsv4/23-example-3-b-small.jpg?raw=true\" alt=\"ColorScheme example 3 dark\" />](https://rydmike.com/assets_fcsv4/23-example-3-b.png?raw=true)\n_Example 3) Using three built-in schemes, plus a custom color scheme\nas application theme options. (click image to open hires version)_\n\nScroll down in the app to see the theme showcase further below. It presents the\ntheme with common Material UI widgets. You can try this example as a Flutter\n[web app here](https://rydmike.com/flexcolorschemeV4Tut3).\n\n## Example 4 - All Themes\n\nThis example shows how you can use all the built-in color schemes, plus three\ncustom color schemes. How to select which one of these schemes is used to\ndefine the active theme.\n\nThe example also uses primary color blending on background and\nsurface colors. A subpage is available that shows the same theme applied when\nopening another page, that in Flutter just inherits the same theme.\n\n> The full code is not shown below, only highlights.\n> Please find the complete example code\n> [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example4).\n\nThe `main` start function of the app is very similar to example 3.\nHowever, here we use the popular package [Hive](https://pub.dev/packages/hive) to\npersist settings and persist the theme settings with a `ThemeServiceHive`\ninstead of using the `ThemeServicePrefs` service.\n\n> #### Why do we use Hive here and not SharedPreferences?\n>\n> The examples are all built using same \"example\" app. If we use\n> SharedPreferences in more than one of the apps\n> they would use the same storage container and share the settings when you\n> build them locally. By using Hive for most examples, we can change\n> the storage container name for each example. In these demos the\n> SharedPreferences service is only used for example 3.\n\n```dart\n// The ThemeServiceHive constructor requires a box name, the others do not.\n// The box name is just a file name for the file that stores the settings.\nfinal ThemeService themeService = ThemeServiceHive('flex_scheme_box_4');\n// Initialize the theme service.\nawait themeService.init();\n// Create a ThemeController that uses the ThemeService.\nfinal ThemeController themeController = ThemeController(themeService);\n// Load all the preferred theme settings, while the app is loading, before\n// MaterialApp is created. This prevents a sudden theme change when the app\n// is first displayed.\nawait themeController.loadAll();\n// Run the app and pass in the ThemeController. The app listens to the\n// ThemeController for changes.\nrunApp(DemoApp(themeController: themeController));\n```\n\nInstead of having having our final and const color and scheme definitions\nvalues in the main file, we moved them into a static class called\n[AppColor](https://github.com/rydmike/flex_color_scheme/blob/master/example/lib/shared/const/app_color.dart).\n\nThere we begin by defining the same colors that we used in example 2 and 3,\nto be our first custom color. In this case we also assign a custom color\nto the optional `appBarColor`.\n\n```dart\n// Create a custom flex scheme color for a light theme.\nstatic const FlexSchemeColor _myScheme1Light = FlexSchemeColor(\n  primary: Color(0xFF00296B),\n  primaryContainer: Color(0xFF2F5C91),\n  secondary: Color(0xFFFF7B00),\n  secondaryContainer: Color(0xFFFDB100),\n  // The built in schemes use their secondary container color as their\n  // custom app bar color, but it can be any color. We use a custom color\n  // here. We will see this in example 5 when using the theme and selecting\n  // the custom app bar style.\n  appBarColor: Color(0xFFf95738),\n);\n// Create a corresponding custom flex scheme color for a dark theme.\nstatic const FlexSchemeColor _myScheme1Dark = FlexSchemeColor(\n  primary: Color(0xFF6B8BC3),\n  primaryContainer: Color(0xFF4874AA),\n  secondary: Color(0xffff7155),\n  secondaryContainer: Color(0xFFF1CB9D),\n  appBarColor: Color(0xFF892807),\n);\n```\n\nYou can build a scheme the long way, by specifying all the required\nscheme colors, like above, or you can also build schemes from a\nsingle primary color. With the `FlexSchemeColor.from` factory. When doing so\nthe only required color is the primary color, the other colors will be\ncomputed. You can optionally also provide the `primaryContainer`, `secondary` and\n`secondaryContainer` colors with the factory, but any color that is not provided\nwill always be computed to get all the required colors in `FlexSchemeColor`.\n\nIn this example we create our 2nd scheme from just a primary color for the\nlight and dark schemes. The custom `appBarColor` does in this case also receive\nthe same color value as the one that is computed for `secondaryContainer`\ncolor. This is its default with the `FlexSchemeColor.from` factory if the\ncolor is not specified.\n\n```dart\n // Vivid green colors.\nstatic final FlexSchemeColor _myScheme2Light =\nFlexSchemeColor.from(primary: const Color(0xFF055C34));\nstatic final FlexSchemeColor _myScheme2Dark =\nFlexSchemeColor.from(primary: const Color(0xFF629F80));\n```\n\nFor our 3rd custom color scheme we define primary and secondary colors,\nbut no container colors, we will not make any dark scheme definitions either, all\nthese missing colors will be computed. The missing color definitions will\nget computed by the factory `FlexSchemeColor.from` when it creates the\n`FlexSchemeColor` object. To make our dark colors for this light scheme, we\nuse the method `toDark` further below with the `_myScheme3Light` instance.\n\n\n```dart\n  // Blue and red colors, for a classic blue and red theme.\n final FlexSchemeColor myScheme3Light = FlexSchemeColor.from(\n  primary: const Color(0xFF04368E),\n  secondary: const Color(0xFFA00505),\n );\n```\n\nNext we create a list `AppData.schemes`, with all the color schemes we will use.\nStarting with our three custom color schemes. Normally when we make custom\nschemes, those are probably the ones we want to use primarily, so we put them\nfirst in our preferred order. After our custom schemes, we add all the\npre-defined built-in ones, offering them as options users can switch to\nand use if they like.\n\n> A **FlexSchemeData** object stores `name` and `description` plus the\n> matching `FlexSchemeColor` for `light` and `dark` mode color schemes.\n\n```dart\nstatic final List<FlexSchemeData> schemes = <FlexSchemeData>[\n  // We add our custom light and dark FlexSchemeColor schemes we defined\n  // to a list of FlexSchemeData, where we can bundle each light and dark\n  // theme that goes together and give it a name and description too.\n  const FlexSchemeData(\n    name: 'C1: Midnight',\n    description: 'Midnight blue theme, created by using custom color values '\n            'for all colors in the scheme',\n    // FlexSchemeData holds separate defined color schemes for light and\n    // matching dark theme colors. Dark theme colors typically need to be less\n    // saturated versions of their than light counter parts. Using the same\n    // colors in light and dark theme modes does not work so well.\n    light: _myScheme1Light,\n    dark: _myScheme1Dark,\n  ),\n  // Do the same for our second custom scheme.\n  FlexSchemeData(\n    name: 'C2: Greens',\n    description: 'Vivid green theme, created from one primary color in light '\n            'mode and another primary for dark mode',\n    light: _myScheme2Light,\n    dark: _myScheme2Dark,\n  ),\n  // We also do the same for our 3rd custom scheme, BUT we create its matching\n  // dark colors, from the light FlexSchemeColor with the toDark method.\n  FlexSchemeData(\n    name: 'C3: Red & Blue',\n    description: 'Classic read and blue, created from only light theme mode '\n            'primary and secondary colors',\n    light: _myScheme3Light,\n    // We create the dark desaturated colors from the light scheme.\n    dark: _myScheme3Light.toDark(),\n  ),\n  // Unpack all built-in FlexColor schemes using spread operator into our list.\n  ...FlexColor.schemesList,\n];\n```\n\nThe setup of the `MaterialApp` is as simple as in the previous example and\nalmost identical, for demonstration purposes we use other values for\n`surfaceMode` and its `blendLevel`. We also use values for the choice\nof `visualDensity` and `fontFamily` from a static `AppData` class.\n\n```dart\nclass DemoApp extends StatelessWidget {\n  const DemoApp({Key? key, required this.themeController}) : super(key: key);\n  final ThemeController themeController;\n\n  @override\n  Widget build(BuildContext context) {\n    // Whenever the user updates theme settings, the MaterialApp is rebuilt.\n    return AnimatedBuilder(\n      animation: themeController,\n      builder: (BuildContext context, Widget? child) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          scrollBehavior: AppScrollBehavior(),\n          title: 'All Themes',\n          // Define the light theme for the app, using current scheme index.\n          theme: FlexThemeData.light(\n            // We moved the definition of the list of color schemes to use into\n            // a separate static class and list. We use the theme controller\n            // to change the index of used color scheme from the list.\n            colors: AppColor.schemes[themeController.schemeIndex].light,\n            // Here we use another surface blend mode, where the scaffold\n            // background gets a strong blend. This type is commonly used\n            // on web/desktop when you wrap content on the scaffold in a\n            // card that has a lighter background.\n            surfaceMode: FlexSurfaceMode.highScaffoldLowSurfaces,\n            // Our content is not all wrapped in cards in this demo, so\n            // we keep the blend level fairly low for good contrast.\n            blendLevel: 5,\n            appBarElevation: 0.5,\n            useSubThemes: themeController.useSubThemes,\n            // In this example we use the values for visual density and font\n            // from a single static source, so we can change it easily there.\n            visualDensity: AppData.visualDensity,\n            fontFamily: AppData.font,\n          ),\n          // We do the exact same definition for the dark theme, but using\n          // FlexThemeData.dark() and the dark FlexSchemeColors in our\n          // AppColor.schemes list instead.\n          darkTheme: FlexThemeData.dark(\n            colors: AppColor.schemes[themeController.schemeIndex].dark,\n            surfaceMode: FlexSurfaceMode.highScaffoldLowSurfaces,\n            // We go with a slightly stronger blend in dark mode. It is worth\n            // noticing, that in light mode, the alpha value used for the blends\n            // is the blend level value, but in dark mode it is 2x this value.\n            // Visually they match fairly well, but it depends on how saturated\n            // your dark mode primary color is.\n            blendLevel: 7,\n            appBarElevation: 0.5,\n            useSubThemes: themeController.useSubThemes,\n            visualDensity: AppData.visualDensity,\n            fontFamily: AppData.font,\n          ),\n          // Use the dark or light theme based on controller setting.\n          themeMode: themeController.themeMode,\n          // Here we only pass the theme controller to the HomePage.\n          home: HomePage(controller: themeController),\n        );\n      },\n    );\n  }\n}\n ```\n\nTo select which of the 39 themes we use, becomes as simple as\ngiving the `themeController.schemeIndex` the index value of the color scheme\nwe want to use. We do that with a simple popup menu button on the `HomePage`.\nThis is a standard Flutter SDK UI widget, you can find how it is set up\nfor this use case\n[here](https://github.com/rydmike/flex_color_scheme/blob/master/example/lib/example4/widgets/theme_popup_menu.dart).\n\nIn the app you can then use the popup menu available in the ListTile, showing the\ncurrent theme to change the active theme. You can choose any of the built-in 36\nschemes, plus the three custom color schemes we added.\n\nWhen you change scheme, you will notice that the active theme color changes are\nanimated by interpolating from the active theme colors, to the new theme colors.\nThis is a very nice standard feature when you modify the theme used by a Flutter\nMaterial application.\n\nWhen you build **Example 4**, it starts with the **Blue whale** theme.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/24-example-4-a-small.jpg?raw=true\" alt=\"ColorScheme example 4 light\" />](https://rydmike.com/assets_fcsv4/24-example-4-a.png?raw=true)\n[<img src=\"https://rydmike.com/assets_fcsv4/24-example-4-b-small.jpg?raw=true\" alt=\"ColorScheme example 4 dark\" />](https://rydmike.com/assets_fcsv4/24-example-4-b.png?raw=true)\n_Example 4) Using custom schemes, plus all the built-in ones as application\ntheme options (click image to open hires version)_\n\nScroll down in the app to see the theme showcase further below. It presents the\ntheme with common Material UI widgets. You can try this example as a Flutter\n[web app here](https://rydmike.com/flexcolorschemeV4Tut4).\n\n## Example 5 - Themes Playground\n\nThis example shows how you can use all the built-in color schemes in\nFlexColorScheme to define themes from them. How you can set up your own\ncustom scheme colors, and use them together with the predefined ones. Like the\nprevious example, this can give you an idea of how you can create your own\ncomplete custom list of color schemes if you do not want to use the predefined\nones.\n\nThis example also shows how you can use and vary the surface blend modes, change\nthe blend strength. You can see how the quick custom AppBar theme and its companion\nTabBar theme works. The usage of the true black feature for dark\nthemes is also demonstrated. Using the optional Windows desktop like tooltip\ntheme is also shown.\n\nThe example includes a responsive side menu, it gives a visual\npresentation of what applications that have larger visible surfaces using\nsurface blends look like. The menu has working click commands that allow you to\nshow and hide the contents of the cards holding settings and results. On\nsmaller media this makes it quicker to find interesting parts. There is a choice\nthat allows you the reset the persisted settings back to their default values.\nTo make a light/dark mode quick toggle always accessible when you test options\nand themes, it is also available on the side menu as a toggle.\n\nIn addition to allowing you to opt in and out of using the sub themes, this demo\nalso allows you to control many sub theming parameters, like adjusting the border\nradius on all widgets to some other preferred value. To use the Material 3 (M3)\ninspired text theme, different theme options on TextField, among many other\nsub theming features.\n\nA subpage is also available that show that the same active theme is also\napplied when opening another page. This works because all built-in widgets use\nthe same inherited theme and use the colors in the theme in predefined ways\nby default. This is a good example and explanation of why you should use\nthe same theme colors for your custom re-usable widgets as their default color\nproperty values. Then theme your application to make it look the way you want\nit to look, rather than defining constant color values that you apply\ndirectly to widget color properties.\n\nIf you tried the previous examples on an Android device, you might have noticed\nthat the system navigation bar on Android devices does not change. It is\nnot themed to have matching background or theme mode that matches the active\napplication theme as it changes. This example shows how it can be fixed and\nthat the used method remain in effect when opening a subpage.\n\nThe same custom color schemes as in example 4, are also used in this example.\nThey are not explained here again, please\nsee [example 4](#example-4---all-themes) for details.\n\n> The full code is not shown below, only highlights.\n> Please find the complete example code\n> [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example5).\n\nThe `main` start function of the app is the same as in previous example.\n\n```dart\nFuture<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  // Use a ThemeController, which glues our theme settings to Flutter Widgets.\n  //\n  // The controller uses an abstract ThemeService interface to get and save the\n  // settings. There are 3 implementations available to choose from:\n  //\n  // 0. ThemeService      - Abstract interface base class, contains defaults\n  //                        values and shared storage key value strings.\n  // 1. ThemeServiceMem   - Only keeps settings in memory.\n  // 2. ThemeServicePrefs - Persist settings locally using SharedPreferences.\n  // 3. ThemeServiceHive  - Persist settings locally using Hive.\n  //\n  // Here we use Hive. The examples are all built using same\n  // \"example\" app. If we use SharedPreferences in more than one of the apps\n  // they would use the same storage container and share the settings when you\n  // build them locally. By using Hive for most examples, we can change\n  // the storage container name for each example. In these demos the\n  // SharedPreferences service is only used for example 3, but you can swap in\n  // the Hive based one for it as well.\n\n  // The ThemeServiceHive constructor requires a box name, the others do not.\n  // The box name is just a file name for the file that stores the settings.\n  final ThemeService themeService = ThemeServiceHive('flex_scheme_box_5');\n  // Initialize the theme service.\n  await themeService.init();\n  // Create a ThemeController that uses the ThemeService.\n  final ThemeController themeController = ThemeController(themeService);\n  // Load all the preferred theme settings, while the app is loading, before\n  // MaterialApp is created. This prevents a sudden theme change when the app\n  // is first displayed.\n  await themeController.loadAll();\n  // Run the app and pass in the ThemeController. The app listens to the\n  // ThemeController for changes.\n  // The ThemeController controls all the myriad of Theme settings used\n  // in the demo application and also persists settings with injected\n  // ThemeService.\n  runApp(DemoApp(themeController: themeController));\n}\n```\n\nThis example has a toggle that allows you to for all the schemes use `toDark`\ncomputed dark schemes, instead of the hand tuned built-in ones. You can then\ncompare this result to hand-made dark themes. The `toDark` method does a\npretty good job and can even be tuned with a level property.\n\n> If you use the `toDark` method on the last custom scheme, you will not see\nany difference, because we already created its dark scheme in this\nexample with this method. Turning the toggle on for it, computes the same dark\nscheme from the same light scheme colors again. There is a slider that\nyou can use to adjust the white blend level of the `toDark` method.\nFrom its default value of 35%, to be anything from 0...100 %, you can experiment\nwith it and see what it does.\n\nAdditionally, this example includes a toggle that allows you to instead of\nusing the `FlexColorScheme.toTheme` method, use the standard Flutter\n`ThemeData.from` factory to create the theme from the same color scheme\ndefinition. We can use this toggle to see and study the differences\nthat `FlexThemeData` brings to the standard theme with different settings.\n\nThe code for the `MaterialApp` for this complex looking application is actually\nvery similar and even identical regarding its core principle to example 4.\nIt is just a large number of `ThemeController` values that we assign\nto properties in `FlexThemeData.light` and `FlexThemeData.dark`. Plus many more\nUI widgets used to set new values to the controller. The `ThemeService`\npersists all the values as we change them, same way as before too. The theme\ncontroller notifies its listeners about the change, still using the same setup\nas before in our `MaterialApp` since example 2. The app then just\nrebuilds the UI to reflect our new theme settings.\n\nIt gets repetitive and rather long to show the details here. It is easier to\nread `main` and `MaterialApp` StatelessWidget code [here](https://github.com/rydmike/flex_color_scheme/blob/master/example/lib/example5/main.dart).\nIt is well commented and explains all its parts well. You can certainly\nexamine the `HomePage` too, I recommend doing that with an IDE though.\nIt is beyond the scope of this tutorial to explain all its details,\nbut mostly it is just simple UI layout code.\n\nThe concludes the walk through of example 5. When we build it,\nthe example starts with the **blue whale** color scheme.\n\n[<img src=\"https://rydmike.com/assets_fcsv4/25-example-5-a-small.jpg?raw=true\" alt=\"ColorScheme example 5 light\" />](https://rydmike.com/assets_fcsv4/25-example-5-a.png?raw=true)\n[<img src=\"https://rydmike.com/assets_fcsv4/25-example-5-b-small.jpg?raw=true\" alt=\"ColorScheme example 5 dark\" />](https://rydmike.com/assets_fcsv4/25-example-5-b.png?raw=true)\n_Example 5) The Themes Playground (click image to open hires version)_\n\nYou can try the **FlexColorScheme Themes Playground** example as a Flutter\n[web app here](https://rydmike.com/flexcolorschemeV4Tut5).\n\n## Custom Themes and Automatic Flutter Source Code\n\nAfter the first release of FlexColorScheme v4, example 5 was expanded with\ntwo new major features. This did not require any changes to FlexColorScheme\nitself, it was just useful new features in example 5 and the\npublished live version of it. The new features make the **Themes Playground**\na very useful companion app for FlexColorScheme. It is now possible to use it\nto make custom theme setups with totally custom colors, and get the colors and\ntheme you see, in use in your app with just a few clicks and a bit of\ncode copy/paste action.\n\nIn the updated version of example 5, published as the\n[Themes Playground](https://rydmike.com/flexcolorschemeV4Tut5), these\nnew features and tools are available:\n\n**Custom Color Scheme**\nCopy an existing color scheme's colors to a custom scheme, that can then\nbe modified by using a color picker. In this case by using\n[FlexColorPicker](https://pub.dev/packages/flex_color_picker).\nIt has an interesting feature that names all colors, a practical copy/paste\ncolor values feature, and it also allows you to enter a color\nusing its hex RGB color value.\n\n\n**Get Setup Source Code**\nThe Themes Playground can now also generate the code needed for you to\nmake the same FlexColorScheme based theme you currently see, in your own app.\n\nUsing the **Get the code for this theme** feature, you can just copy and\npaste the current seen `FlexColorScheme` configuration from it, to your own\napplication. Then just use it without even knowing what all the properties do.\nYou can just go by what looks OK to you in the **Themes Playground**, copy\nits setup code and use it as it is. All you have to do is copy the code and\npaste it into your app.\n\nYou can find an example on how to do in this\n[tweet and referenced thread](https://twitter.com/RydMike/status/1461381878494150659).\n\n[<img src=\"https://rydmike.com/assets_fcsv4/09-ThemeMagic007.jpg?raw=true\" alt=\"copy theme code\" />](https://rydmike.com/assets_fcsv4/09-ThemeMagic007.png?raw=true)\n_Using Themes Playground to Copy Theme Setup Source Code (click image to open hires version)_\n\nThis is the first version of this code copy/paste feature to get the\nconfiguration code for the shown FlexColorScheme based theme. A small bit\nof inception going on here, basically using FlexColorScheme to generate\ncode for using FlexColorScheme. If you notice any issues with it,\nplease open an issue in the repo.\n\n# API Intro and Guide\n\nThe API reference documentation for FlexColorScheme is very thorough and complete.\nIt usually covers any question you might have, and more. The automatically\ngenerated API docs from source code document comments are available\n[here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/flex_color_scheme-library.html).\n\nA brief overview of key APIs is presented below. This readme file is reaching\nthe character limit of 128kB, which is the maximum size pub.dev allows, if the\nreadme is larger it rejects the packages.\n\nTo make the documentation more accessible and easier to read, and to\nalso make it possible to extend it further and update it without publishing\na new package version, this readme will later be migrated to use\na markup generated documentation site. It will be based on\n[docs.page](https://docs.page/homepage). When that is done, this chapter can\nbe further extended with more examples and screenshots.\n\n## Main Setup\n\nYou can create FlexColorScheme based `ThemeData` objects using two\ndifferent ways. Using the `FlexColorScheme` class or the `FlexThemeData`\nextension.\n\n### FlexColorScheme\n\nAPI reference: [FlexColorScheme](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme-class.html)\n\nThe original way to create FlexColorScheme based `ThemeData` objects is to use\nthe package namesake\n[`FlexColorScheme`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme-class.html)\nclass and then use the `toTheme` getter to produce and get the `ThemeData`\nobject specified by your immutable `FlexColorScheme` configuration.\n\nTypically, you would not use the default `FlexColorScheme()` constructor to\ncreate your `FlexColorScheme` object. Instead, you would use\n[`FlexColorScheme.light()`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/FlexColorScheme.light.html)\nand\n[`FlexColorScheme.dark()`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/FlexColorScheme.dark.html) factory\nconstructors to make definitions for light and dark theme modes. The\nfactory constructors also offer many additional parameters that give you\nthe capability to easily create more nuanced color schemes definitions.\n\n**Example:**\n```dart\n  class MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      // The Mandy red, light theme.\n      theme: FlexColorScheme.light(scheme: FlexScheme.mandyRed).toTheme,\n      // The Mandy red, dark theme.\n      darkTheme: FlexColorScheme.dark(scheme: FlexScheme.mandyRed).toTheme,\n      // Use dark or light theme based on system setting.\n      themeMode: ThemeMode.system,\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n```\n\n### FlexThemeData extension on ThemeData\n\nAPI reference: [FlexThemeData](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeData.html)\n\nThe `FlexThemeData` is a convenience extension on `ThemeData` to define a\n`FlexColorScheme` object and return the `ThemeData` object defined by\nits instance, using its `FlexColorScheme.toTheme` method in one go.\n\nProvided `ThemeData` convenience static extension functions are:\n\n* [`FlexThemeData.light()`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeData/light.html) based on `FlexColorScheme.light().toTheme`\n* [`FlexThemeData.dark()`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexThemeData/dark.html) based on `FlexColorScheme.dark().toTheme`\n\nUsing e.g. `FlexThemeData.light()` is a bit shorter than\n`FlexColorScheme.light().toTheme`, and it may feel more familiar since\nyou get a `ThemeData` object directly that you can use just like any\nother `ThemeData` object produced by Flutter SDK built in `ThemeData` factory\nconstructors.\n\n**Example:**\n```dart\n  class MyApp extends StatelessWidget {\n    @override\n    Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      // The Mandy red, light theme.\n      theme: FlexThemeData.light(scheme: FlexScheme.mandyRed),\n      // The Mandy red, dark theme.\n      darkTheme: FlexThemeData.dark(scheme: FlexScheme.mandyRed),\n      // Use dark or light theme based on system setting.\n      themeMode: ThemeMode.system,\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n```\n\nThe `FlexColorScheme.light().toTheme` and `FlexThemedata.light()` and its dark\ncounterparts, have the same parameter value and are interchangeable.\nThe `light` and `dark` parameters differ slightly due to a few different features.\n\n### Main setup parameters\n\nKey setup parameters for `FlexColorScheme.light()` and\n`FlexThemedata.light()` as well as for `FlexColorScheme.dark()` and\n`FlexThemedata.dark()` are listed below. The two most important ones are:\n\n* `scheme` a [`FlexScheme`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexScheme.html)\n  enum value used to select which predefined color scheme to use for the theme.\n* `colors` a [`FlexSchemeColor`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSchemeColor-class.html)\n  object used to define custom colors to be used to create the theme.\n\nIf you specify both `scheme` and `colors` the custom colors have higher precedence\nand are used, the `scheme` property is ignored. If you specify neither, then\n`scheme` defaults to `FlexScheme.material`.\n\nStarting from version 4.2.0 you also have the possibility of creating your custom\n`FlexColorScheme` based theme from a Flutter SDK standard `ColorScheme` object.\nUse the property:\n\n* `colorScheme` a\n  [`ColorScheme`](https://api.flutter.dev/flutter/material/ColorScheme-class.html)\n  object used to create a custom `FlexColorScheme` based theme from custom color\n  definitions you may have in a standard color scheme\n  object. This property also exist in the default constructor. When you use it\n  with the factory constructors `light` and `dark` the colors in the provided\n  `colorScheme` will override any value you have given in the `scheme` or `colors`\n  properties. The individual direct color properties available in the constructors,\n  will override any corresponding color values that would be set via other\n  properties, also the ones you in your `colorScheme` if it is provided.\n\nFlexColorScheme has shortcut enum properties that you can use to quickly adjust\nthe theme design for your AppBar and TabBar:\n\n* `appBarStyle`\n  a [`FlexAppBarStyle`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexAppBarStyle.html)\n  enum value used to define the themed color of the AppBar background color.\n* [`tabBarStyle`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/tabBarStyle.html)\n  a [`FlexTabBarStyle`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexTabBarStyle.html)\n  enum value used to select preferred style for the default TabBarTheme sub-theme.\n\nAn interesting and unique feature of FlexColorScheme is its capability to\nautomatically create color schemes and resulting themes that blend in the primary\ncolor into different surfaces. You can also vary this blending depending\non surface type and use different blend strengths. This feature is only available\nvia the factory constructors and their `ThemeData`extensions, not via the\ndefault `FlexColorscheme` constructor. To use the surface blending features use\nthe properties:\n\n* `surfaceMode` a [`FlexSurfaceMode`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSurfaceMode.html)\n  enum value used to select the mode for blending in primary color into\n  surface, background, scaffoldBackground and dialogBackground colors.\n* `blendLevel`, when `surfaceMode` is defined, this sets the blend level strength\n   used by the selected surface mode.\n   The blend level is the integer decimal value of the alpha value\n   used in the alpha blend function. It mixes one color with another\n   by using alpha opacity value in the color of a surface put on top of\n   another surface with opaque color and returns the result as one opaque\n   color.\n\nFlexColorScheme also offers opinionated widget sub-theming that enables you to get\nmore snazzy looking widgets automatically that you can customize further via\n[FlexSubThemesData](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData-class.html).\n\n* [`useSubTheme`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexColorScheme/useSubThemes.html)\n  when `true` activates the opinionated sub theming, it is `false` by default.\n* `subThemesData` is a\n  [`FlexSubThemesData`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData-class.html)\n  data class that contain many optional quick configuration parameters\n  for the opt-in widget sub-themes. For example, one of its parameters gives you\n  access to easy use customization of default border radius on all Flutter SDK\n  UI widgets and elements that supports border radius, either via\n  ShapeBorder or BorderRadiusGeometry. See its\n  [`defaultRadius`](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemesData/defaultRadius.html)\n  property for more information.\n\nWhen you opt in on using sub-themes, the `FlexColorScheme.toTheme` method uses\nthe passed in `FlexSubThemesData` configuration data object, passed in via\n`FlexColorScheme.subThemesData`, or a default one if one is not provided.\n\nThe property values in `FlexSubThemesData` are used to define the created\nopinionated sub-themes. In some simple cases the sub-themes are created\ndirectly with the Flutter SDK widget sub-theme in question, in the `toTheme`\nmethod. But in most cases it uses separate static sub-theme helper functions\nfrom the `FlexSubThemes` class. You can find more information about available\nhelpers\n[here](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/FlexSubThemes-class.html).\nYou can also use these static sub-theme helpers to manually define widget\nsub-theme and even modify them using `copywith`.\n\n# Scheme Reference\n\nThis table lists all current built-in color schemes, with its enum value, short\nname and description. It shows a small thumbnail of each color scheme, that\nopens a link to a high-resolution version of it.\n\n| FlexScheme   | Name                   | Description | Light___| Dark___|\n| ----         | ----                   | ----        | ----  | ---- |\n| material     | Material default       | Default Material color theme, used in the design guide. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb01.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme001.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb01.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme001.png?raw=true) |\n| materialHc   | Material high contrast | High contrast Material design guide theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb02.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme002.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb02.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme002.png?raw=true) |\n| blue         | Blue delight           | Blue color theme, based on Material blue and light blue colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb03.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme003.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb03.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme003.png?raw=true) |\n| indigo       | Indigo nights          | Indigo color theme, based on Material indigo and deep purple colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb04.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme004.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb04.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme004.png?raw=true) |\n| hippieBlue   | Hippie blue            | Hippie blue with surfie green and chock coral pink theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb05.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme005.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb05.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme005.png?raw=true) |\n| aquaBlue     | Aqua blue              | Aqua tropical ocean blue theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb06.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme006.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb06.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme006.png?raw=true) |\n| brandBlue    | Brand blues            | A mixture of blue colors from well known web brands. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb07.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme007.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb07.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme007.png?raw=true) |\n| deepBlue     | Deep blue sea          | Dark deep blue sea color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb08.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme008.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb08.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme008.png?raw=true) |\n| sakura       | Pink sakura            | Pink color theme, based on sakura cherry blossom like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb09.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme009.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb09.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme009.png?raw=true) |\n| mandyRed     | Oh Mandy red           | Mandy red and Viking blue colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb10.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme010.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb10.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme010.png?raw=true) |\n| red          | Red tornado            | Red color theme, based on Material red and pink colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb11.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme011.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb11.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme011.png?raw=true) |\n| redWine      | Red red wine           | Red color theme, based on red wine like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb12.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme012.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb12.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme012.png?raw=true) |\n| purpleBrown  | Purple brown           | Purple brown tinted aubergine and eggplant colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb13.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme013.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb13.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme013.png?raw=true) |\n| green        | Green forest           | Green color theme, based on Material green and cyan colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb14.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme014.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb14.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme014.png?raw=true) |\n| money        | Green money            | Green money and finance style color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb15.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme015.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb15.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme015.png?raw=true) |\n| jungle       | Green jungle           | Green jungle and rain forest color theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb16.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme016.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb16.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme016.png?raw=true) |\n| greyLaw      | Grey law               | Material blue grey and ultra dark purple color theme. Colors suitable for law firms.  | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb17.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme017.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb17.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme017.png?raw=true) |\n| wasabi       | Willow and wasabi      | Wild Willow and wasabi green with orchid purple inspired colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb18.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme018.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb18.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme018.png?raw=true) |\n| gold         | Gold sunset            | Gold sunset color theme, based on orange like colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb19.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme019.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb19.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme019.png?raw=true) |\n| mango        | Mango mojito           | Orange and green Mango mojito color theme.  | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb20.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme020.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb20.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme020.png?raw=true) |\n| amber        | Amber blue             | Amber blaze and blue color theme, based on Material amber and blue accent colors, a high-contrast theme. An alternative to the default Material high contrast theme.| [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb21.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme021.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb21.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme021.png?raw=true)|\n| vesuviusBurn | Vesuvius burned        | Vesuvius burned orange and eden green theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb22.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme022.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb22.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme022.png?raw=true) |\n| deepPurple   | Deep purple            | Deep purple daisy bush theme, based on Material deepPurple and lightBlueAccent colors. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb23.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme023.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb23.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme023.png?raw=true)|\n| ebonyClay    | Ebony clay             | Ebony clay dark blue-grey and watercourse green colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb24.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme024.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb24.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme024.png?raw=true) |\n| barossa      | Barossa                | Barossa red and cardin green colored theme. A somber color set suited for courts and law firms. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb25.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme025.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb25.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme025.png?raw=true) |\n| shark        | Shark and orange       | Shark grey and orange ecstasy colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb26.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme026.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb26.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme026.png?raw=true) |\n| bigStone     | Big stone tulip        | Big stone blue and tulip tree yellow colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb27.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme027.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb27.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme027.png?raw=true) |\n| damask       | Damask and lunar       | Damask red and lunar green colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb28.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme028.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb28.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme028.png?raw=true) |\n| bahamaBlue       |Bahama and trinidad | Bahama blue and trinidad orange colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb29.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme029.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb29.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme029.png?raw=true) |\n| mallardGreen       | Mallard and valencia | Mallard green and Valencia pink colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb30.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme030.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb30.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme030.png?raw=true) |\n| espresso       | Espresso and crema   | Espresso dark brown and crema colored theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb31.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme031.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb31.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme031.png?raw=true) |\n| outerSpace       | Outer space stage  | Outer space dark blue-grey and stage red theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb32.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme032.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb32.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme032.png?raw=true) |\n| blueWhale       |Blue whale | Blue whale, jungle green and outrageous tango orange theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb33.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme033.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb33.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme029.png?raw=true) |\n| sanJuanBlue       | San Juan blue | San Juan blue and pink salmon theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb34.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme034.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb34.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme030.png?raw=true) |\n| rosewood       | Rosewood   | Rosewood red, with horses neck and driftwood theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb35.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme035.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb35.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme031.png?raw=true) |\n| blumineBlue       | Blumine  | Blumine, easter blue and saffron mango theme. | [<img src=\"https://rydmike.com/assets_fcsv4/LightSchemeThumb36.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/LightScheme036.png?raw=true) | [<img src=\"https://rydmike.com/assets_fcsv4/DarkSchemeThumb36.jpg?raw=true\" width=\"120\"/>](https://rydmike.com/assets/DarkScheme032.png?raw=true) |\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.1337890625,
          "content": "[![Pub Version](https://img.shields.io/pub/v/flex_color_scheme?label=flex_color_scheme&labelColor=333940&logo=dart)](https://pub.dev/packages/flex_color_scheme) [![codecov](https://codecov.io/gh/rydmike/flex_color_scheme/branch/master/graph/badge.svg?token=4XJU30IGO3)](https://codecov.io/gh/rydmike/flex_color_scheme) [![License](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n\n# FlexColorScheme\n\n[<img src=\"https://github.com/rydmike/flex_color_scheme_docs/blob/master/docs/images/flutter-favorite-logo.png?raw=true?\" alt=\"flutter favorite logo\" width=\"170\"/>](https://docs.flutter.dev/development/packages-and-plugins/favorites)\n\nUse **FlexColorScheme** to make beautiful Flutter Material Design themes. Apply optional surface blends, and use Material-3 seeded generated ColorSchemes. The returned themes are standard `ThemeData` objects, but **very** sophisticated ones. They are based on the same idea as Flutter's `ThemeData.from(ColorScheme)` and `ThemeData(colorSchemeSeed)` themes, but with many additional features. Choose from many pre-made designs or make your own. You can also use easy-to-configure component themes.\n\n<table>\n  <tr>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-l-37.png\" alt=\"Dash light\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-d-37.png\" alt=\"Dash dark\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-l-38.png\" alt=\"M3 baseline light\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-d-38.png\" alt=\"M3 baseline dark\" width=\"220\"/></td>\n  </tr>\n</table>\n\nWhen you theme a Flutter application **in the intended manner**, all built-in widgets use the colors of the `ColorScheme` in your theme. However, all Flutter's `ThemeData` factories misses a few details when it comes to direct color properties in `ThemeData`itself. This applies in particular if you still use legacy Material-2 mode in Flutter. When you use the current default Material-3 mode, the color results and styles are much more consistent by default, with only a few colors in `ThemeData` not matching the defined `ColorScheme` colors. \n\n**FlexColorScheme** ensures that all Flutter SDK UI components get themed completely by its `ColorScheme` and custom colors you provide. It also applies the `ColorScheme` colors to all legacy color properties in `ThemeData`. This ensures that all the direct colors properties in `ThemeData` match your `ColorScheme`. There are no surprising colors in `ThemeData` that do not match your `ColorScheme`. This applies regardless of if you use Material-2 or Material-3 mode.\n\nYou can also opt in on using FlexColorScheme's component theme customization features. By doing so, you can, for example, adjust the border radius on all UI widgets with a single property value. \n\n<table>\n  <tr>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-l-39.png\" alt=\"Verdun green light\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-d-39.png\" alt=\"Verdun green dark\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-l-40.png\" alt=\"Dell genoa light\" width=\"220\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-d-40.png\" alt=\"Dell genoa dark\" width=\"220\"/></td>\n  </tr>\n</table>\n\nWhen you enable component themes in Material-2 mode, the border radius on components defaults to the Material-3 more rounded design. In Material-3, the radius varies by widget type, as specified by the [Material-3 Guide](https://m3.material.io/). You can keep this or set the shared global widget radius to a value you prefer. You can also set the themed border radius per widget and override the defaults or the global radius value you defined. \n\n### Material-3\n\nAs in Flutter's `ThemeData`, Material-3 mode is enabled by default in **FlexColorScheme** V8 and later. The Material-3 mode component theme defaults are far less opinionated than the Material-2 defaults. In **FlexColorScheme** V8 and later, enabling component themes use almost only Material-3 defaults as starting points for component styles and seeded `ColorScheme` generation. With the large number of component theme settings, you can quickly customize Material-3 to fit your application's design goals.\n\nSince Flutter **3.7 and later**, using Material-3 design is production ready. Some minor issues may always exist. Please refer to the FlexColorScheme docs [known issues](https://docs.flexcolorscheme.com/known_issues) chapter for more information on the status of known **theming** issues in Flutter, and to which versions they apply.\n\n<table>\n  <tr>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-l-50.png\" alt=\"Yukon gold light\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-d-50.png\" alt=\"Yukon gold dark\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-l-52.png\" alt=\"Rust light\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-d-52.png\" alt=\"Rust dark\" /> </td>\n  </tr>\n</table>\n\n**FlexColorScheme** has many advanced coloring features, like using surface alpha blends. It also fully supports Material-3 based ColorSchemes, including seed generated `ColorSchemes`. It offers many advanced configuration options that you can use when you generate your `ColorScheme` from seed colors. You can e.g., make more saturated seed generated themes and themes with higher contrast. FlexColorScheme's advanced seeded `ColorScheme` offer features that are not available in Flutter directly. This includes using multiple key colors as seeds, custom minimum chroma levels and customized tone mapping to ColorScheme colors.\n\n<table>\n  <tr>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-l-44.png\" alt=\"Indigo San Marino light\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-d-44.png\" alt=\"Indigo San Marino dark\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-l-42.png\" alt=\"Lipstick pink light\" /> </td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v7-d-42.png\" alt=\"Lipstick pink dark\" /> </td>\n  </tr>\n</table>\n\nWith **FlexColorScheme** component themes, you use simple flat property values. No need for verbose Flutter SDK component themes, for example `ShapeBorder` definitions on multiple widget themes to change their border radius. Component theming provides a large number of easy-to-configure options via direct properties. In most cases you can avoid using complicated and sometimes confusing `WidgetState` theming properties.\n\n\n## Getting Started\n\nTo use **FlexColorScheme** in your project, add the `flex_color_scheme` package to `pubspec.yaml`:\n\n`dart pub add flex_color_scheme` or `flutter pub add flex_color_scheme`\n\nImport the package to use it:\n\n```dart\nimport 'package:flex_color_scheme/flex_color_scheme.dart';\n```\n\nYou can now start using **FlexColorScheme** based color schemes and theming in your application. A quick way to do so is to try one of the **55** built-in color schemes. They have enum values that you use to select which one to use as the theme for your application.\n\nThe package **default example** offers a heavily commented code guide on how to use key features in FlexColorScheme. The [**Examples**](https://docs.flexcolorscheme.com/examples) chapter shows you how to try it. In the [**Tutorial**](https://docs.flexcolorscheme.com/tutorial1) you can learn more via five additional examples of increasing complexity.\n\n## FlexColorScheme Counter App\n\nLet's first setup FlexColorScheme in the default Flutter counter app. Create a new Flutter project, giving you the default counter-application. Add the FlexColorScheme import, after that we change one line of code, and add two lines to enable it in the default counter-application.\n\nHere we use the **Oh Mandy red** color scheme, it is represented by `enum` value `FlexScheme.mandyRed`. Set the `MaterialApp.themeMode` to `ThemeMode.system` so that the device can control if the app uses its light or dark theme mode. You can then toggle the theme mode by changing mode on the used device.\n\nAssign `FlexThemeData.light` to the app's `theme` property, which is the application's light theme definition property, and `FlexThemeData.dark` to `darkTheme`.\n\nFor both `FlexThemeData` dark and light we set the `scheme` property to `FlexScheme.mandyRed` to use the same **Oh Mandy red** predefined `scheme` colors in both theme modes. We then get matching light and dark themes based on the built-in scheme's color definitions.\n\nThe three line modified `MaterialApp`, of the Flutter default counter-application becomes:\n\n```dart\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      // The Mandy red, light theme.\n      theme: FlexThemeData.light(scheme: FlexScheme.mandyRed),\n      // The Mandy red, dark theme.\n      darkTheme: FlexThemeData.dark(scheme: FlexScheme.mandyRed),\n      // Use dark or light theme based on system setting.\n      themeMode: ThemeMode.system,\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n```\n\nThis gives us a counter-application that looks like this:\n\n<table>\n  <tr>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-counter-01.png\" alt=\"Counter light\" width=\"280\"/></td>\n    <td><img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/fcs-v5-counter-02.png\" alt=\"Counter dark\" width=\"280\"/></td>\n  </tr>\n</table>\n\n*FlexColorScheme in Material-2 mode applied to the standard Flutter counter template*\n\n\nNot as exciting as the images shown above. That is because the basic counter-application uses very few features and widgets, so it does not present the results very well.\n\nThe included examples contain placeholder user interface to better demonstrate the results. The used UI demonstration code in the examples is not relevant to using FlexColorScheme, it is only there to present the results.\n\n## Documentation\n\nFor more information and tutorials on how to use **FlexColorScheme**, please see its documentation site at [**docs.flexcolorscheme.com**](https://docs.flexcolorscheme.com/). It contains additional getting started info, extensive tutorials, key API walkthrough and even general Flutter theming advice and guidance. The documentation site is powered by [docs.page](https://docs.page/) from [Invertase](https://invertase.io/). \nComplete generated package [**API documentation**](https://pub.dev/documentation/flex_color_scheme/latest/flex_color_scheme/flex_color_scheme-library.html) is also available. \n\n## Themes Playground\n\nTo make it even easier to configure and setup **FlexColorScheme**, it comes with a WEB companion app called the [**Themes Playground**](https://rydmike.com/flexcolorscheme/themesplayground-latest).\n\nThe **Themes Playground** is a useful tool to find **FlexColorScheme** themes and settings you like. You can use it to discover what you can do with FlexColorScheme. The playground persists all its settings. You can reset settings back to their default values, so you can always start over if you get lost in all the configuration possibilities.\n\nThe most useful and popular feature of the **Playground** is that it can generate **FlexColorScheme API** setup code needed to produce the shown active theme configuration. The themed style of the app itself, and the same styled demo apps shown in its theme simulator, is what you get when you copy the theme config code to your app, and use it with the **FlexColorScheme** package. \n\n[<img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/themes_playground_7_2.png\" alt=\"Themes Playround Image\"/>](https://rydmike.com/flexcolorscheme/themesplayground-latest)\n\n*In [Themes Playground](https://rydmike.com/flexcolorscheme/themesplayground-latest) you can visually configure your theme and copy its setup code.*\n\nIf you use the code view panel side-by-side, as you change settings, the Playground modifies the code as you change settings. This is a fun way to get familiar with the API.\n\n[<img src=\"https://raw.githubusercontent.com/rydmike/flex_color_scheme_docs/master/docs/images/themes_playground_7_2_dark_code.png\" alt=\"Themes Playround Image\"/>](https://rydmike.com/flexcolorscheme/themesplayground-latest)\n\n*Viewing API configuration and its updates as you change setting in [Themes Playground](https://rydmike.com/flexcolorscheme/themesplayground-latest).*\n\nThe latest **Themes Playground** build can be used as a [web app here](https://rydmike.com/flexcolorscheme/themesplayground-latest). For guidance on how to use the Themes Playground, please read the [Themes Playground chapter](https://docs.flexcolorscheme.com/playground) available in the documentation site.\n\nBeware, fiddling with all the different themes and settings can be quite fun and addictive, happy theming! 💙\n\n\n### Open Source\n\nThe **Themes Playground** application is open source and bundled with the `FlexColorScheme` package in the example folder. In its GitHub repository you can find it [here](https://github.com/rydmike/flex_color_scheme/tree/master/example/lib/example5_themes_playground).\n\nThe Playground app is also the last step in the package tutorial series. The [tutorial](https://docs.flexcolorscheme.com/tutorial1) goes through its main used features that are relevant to using `FlexColorScheme`, and features that differ from the previous examples. It does not go through all the details of the application. You are welcome to study its source code for more insights and inspiration. It is on purposes a bit excessively commented. The tutorial also briefly talks about its background, design choices and limitations.\n\n### Available Themes Playground Versions\n\nThere are **Theme Playground** version builds corresponding to the last major releases of the **FlexColorScheme** package available. For Version 7 there are also Playground builds for the different minor releases.\n\nYou should use the same major version of **Themes Playground** as the `flex_color_scheme` package you are using. With version 7 and 8, you should prefer to match the minor version too.\n\n| Name  | Version | Link                                                         |\n|-------|---------|--------------------------------------------------------------| \n| V8.1  | V8.1.0  | https://rydmike.com/flexcolorscheme/themesplayground-latest  |\n| V8.0  | V8.0.2  | https://rydmike.com/flexcolorscheme/themesplayground-v8-0    |\n| V7.3  | V7.3.1  | https://rydmike.com/flexcolorscheme/themesplayground-v7-3    |\n| V7.2  | V7.2.0  | https://rydmike.com/flexcolorscheme/themesplayground-v7-2    |\n| V7.1  | V7.1.2  | https://rydmike.com/flexcolorscheme/themesplayground-v7-1    |\n| V7.0  | V7.0.5  | https://rydmike.com/flexcolorscheme/themesplayground-v7      |\n| V6    | V6.1.1  | https://rydmike.com/flexcolorscheme/themesplayground-v6      |\n| V5    | V5.1.0  | https://rydmike.com/flexcolorscheme/themesplayground-v5      |\n| V4    | V4.2.0  | https://rydmike.com/flexcolorschemeV4Tut5                    |\n\n\n> **NOTE!**  \n> If you use a higher version of a WEB build and try to load a lower version again with the same browser, it will most likely fail and not load. This happens because older and newer builds run on the same domain and share the same browser local storage file. This allows newer versions to load data configured in older versions. However, older versions may not understand some data stored and inserted by the newer versions and they will fail. You can get the web build for an older version to start again by clearing stored browser data:  \n>\"Settings\" → \"Delete browsing data...\" → \"Cookies and other site data\".  \n> You do of course lose any config you had used then. This issue could be fixed, but would require updating rebuilding the old builds and there are currently no plans to do so.  \n> Version 8.0.0 and later uses a new local storage name to avoid this issue, so it will not conflict with V7 and older versions. There are few storage settings in V8 that are backwards compatible anyway.\n> \n\nYou can also build Windows, macOS or Linux desktop versions of the **Themes Playground**, it is highly recommended, as it runs much smoother and nicer than the WEB build. The **Themes Playground** app is bundled with the package GitHub repository as **Example 5**. If you need a Themes Playground companion build for a specific older FlexColorScheme version, you can download a ZIP bundle from the GitHub repo for any past [release here](https://github.com/rydmike/flex_color_scheme/releases).\n"
        },
        {
          "name": "all_lint_rules.yaml",
          "type": "blob",
          "size": 7.95703125,
          "content": "# A list of all linter rules.\n# Expected by rydmike analysis_options: V2.3.0\n#\n# Up-to-date auto generated list: https://dart.dev/tools/linter-rules/all\n#\n# The list below has removed ALL deprecated lint rules. These following were still included\n# in the above list of all lint rules, but are deprecated and should NOT be used:\n#\n# - avoid_returning_null_for_future (Deprecated)\n# - iterable_contains_unrelated_type (Deprecated)\n# - list_remove_unrelated_type (Deprecated)\n# - always_require_non_null_named_parameters (Deprecated)\n# - avoid_returning_null (Deprecated)\n#\n# Version 2.3.0 removed the following deprecated rules:\n# - avoid_unstable_final_fields\n# - unnecessary_getters_settersinvariant_booleans\n# - unsafe_html\n#\nlinter:\n  rules:\n    - always_declare_return_types\n    - always_put_control_body_on_new_line\n    - always_put_required_named_parameters_first\n    - always_specify_types\n    - always_use_package_imports\n    - annotate_overrides\n    - annotate_redeclares\n    - avoid_annotating_with_dynamic\n    - avoid_bool_literals_in_conditional_expressions\n    - avoid_catches_without_on_clauses\n    - avoid_catching_errors\n    - avoid_classes_with_only_static_members\n    - avoid_double_and_int_checks\n    - avoid_dynamic_calls\n    - avoid_empty_else\n    - avoid_equals_and_hash_code_on_mutable_classes\n    - avoid_escaping_inner_quotes\n    - avoid_field_initializers_in_const_classes\n    - avoid_final_parameters\n    - avoid_function_literals_in_foreach_calls\n    - avoid_futureor_void\n    - avoid_implementing_value_types\n    - avoid_init_to_null\n    - avoid_js_rounded_ints\n    - avoid_multiple_declarations_per_line\n    - avoid_null_checks_in_equality_operators\n    - avoid_positional_boolean_parameters\n    - avoid_print\n    - avoid_private_typedef_functions\n    - avoid_redundant_argument_values\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    - avoid_returning_null_for_void\n    - avoid_returning_this\n    - avoid_setters_without_getters\n    - avoid_shadowing_type_parameters\n    - avoid_single_cascade_in_expression_statements\n    - avoid_slow_async_io\n    - avoid_type_to_string\n    - avoid_types_as_parameter_names\n    - avoid_types_on_closure_parameters\n    - avoid_unnecessary_containers\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    - avoid_web_libraries_in_flutter\n    - await_only_futures\n    - camel_case_extensions\n    - camel_case_types\n    - cancel_subscriptions\n    - cascade_invocations\n    - cast_nullable_to_non_nullable\n    - close_sinks\n    - collection_methods_unrelated_type\n    - combinators_ordering\n    - comment_references\n    - conditional_uri_does_not_exist\n    - constant_identifier_names\n    - control_flow_in_finally\n    - curly_braces_in_flow_control_structures\n    - dangling_library_doc_comments\n    - depend_on_referenced_packages\n    - deprecated_consistency\n    - deprecated_member_use_from_same_package\n    - diagnostic_describe_all_properties\n    - directives_ordering\n    - discarded_futures\n    - do_not_use_environment\n    - document_ignores\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    - eol_at_end_of_file\n    - exhaustive_cases\n    - file_names\n    - flutter_style_todos\n    - hash_and_equals\n    - implementation_imports\n    - implicit_call_tearoffs\n    - implicit_reopen\n    - invalid_case_patterns\n    - invalid_runtime_check_with_js_interop_types\n    - join_return_with_assignment\n    - leading_newlines_in_multiline_strings\n    - library_annotations\n    - library_names\n    - library_prefixes\n    - library_private_types_in_public_api\n    - lines_longer_than_80_chars\n    - literal_only_boolean_expressions\n    - matching_super_parameters\n    - missing_code_block_language_in_doc_comment\n    - missing_whitespace_between_adjacent_strings\n    - no_adjacent_strings_in_list\n    - no_default_cases\n    - no_duplicate_case_values\n    - no_leading_underscores_for_library_prefixes\n    - no_leading_underscores_for_local_identifiers\n    - no_literal_bool_comparisons\n    - no_logic_in_create_state\n    - no_runtimeType_toString\n    - no_self_assignments\n    - no_wildcard_variable_uses\n    - non_constant_identifier_names\n    - noop_primitive_operations\n    - null_check_on_nullable_type_parameter\n    - null_closures\n    - omit_local_variable_types\n    - omit_obvious_local_variable_types\n    - one_member_abstracts\n    - only_throw_errors\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    - parameter_assignments\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    - prefer_asserts_with_message\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    - prefer_constructors_over_static_methods\n    - prefer_contains\n    - prefer_double_quotes\n    - prefer_expression_function_bodies\n    - prefer_final_fields\n    - prefer_final_in_for_each\n    - prefer_final_locals\n    - prefer_final_parameters\n    - prefer_for_elements_to_map_fromIterable\n    - prefer_foreach\n    - prefer_function_declarations_over_variables\n    - prefer_generic_function_type_aliases\n    - prefer_if_elements_to_conditional_expressions\n    - prefer_if_null_operators\n    - prefer_initializing_formals\n    - prefer_inlined_adds\n    - prefer_int_literals\n    - prefer_interpolation_to_compose_strings\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_is_not_operator\n    - prefer_iterable_whereType\n    - prefer_mixin\n    - prefer_null_aware_method_calls\n    - prefer_null_aware_operators\n    - prefer_relative_imports\n    - prefer_single_quotes\n    - prefer_spread_collections\n    - prefer_typing_uninitialized_variables\n    - prefer_void_to_null\n    - provide_deprecation_message\n    - public_member_api_docs\n    - recursive_getters\n    - require_trailing_commas\n    - secure_pubspec_urls\n    - sized_box_for_whitespace\n    - sized_box_shrink_expand\n    - slash_for_doc_comments\n    - sort_child_properties_last\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - specify_nonobvious_local_variable_types\n    - test_types_in_equals\n    - throw_in_finally\n    - tighten_type_of_initializing_formals\n    - type_annotate_public_apis\n    - type_init_formals\n    - type_literal_in_constant_pattern\n    - unawaited_futures\n    - unintended_html_in_doc_comment\n    - unnecessary_await_in_return\n    - unnecessary_brace_in_string_interps\n    - unnecessary_breaks\n    - unnecessary_const\n    - unnecessary_constructor_name\n    - unnecessary_final\n    - unnecessary_getters_setters\n    - unnecessary_lambdas\n    - unnecessary_late\n    - unnecessary_library_directive\n    - unnecessary_library_name\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_aware_operator_on_extension_on_nullable\n    - unnecessary_null_checks\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_nullable_for_final_variable_declarations\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_raw_strings\n    - unnecessary_statements\n    - unnecessary_string_escapes\n    - unnecessary_string_interpolations\n    - unnecessary_this\n    - unnecessary_to_list_in_spreads\n    - unreachable_from_main\n    - unrelated_type_equality_checks\n    - use_build_context_synchronously\n    - use_colored_box\n    - use_decorated_box\n    - use_enums\n    - use_full_hex_values_for_flutter_colors\n    - use_function_type_syntax_for_parameters\n    - use_if_null_to_convert_nulls_to_bools\n    - use_is_even_rather_than_modulo\n    - use_key_in_widget_constructors\n    - use_late_for_private_fields_and_variables\n    - use_named_constants\n    - use_raw_strings\n    - use_rethrow_when_possible\n    - use_setters_to_change_properties\n    - use_string_buffers\n    - use_string_in_part_of_directives\n    - use_super_parameters\n    - use_test_throws_matchers\n    - use_to_and_as_if_applicable\n    - use_truncating_division\n    - valid_regexps\n    - void_checks"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 55.521484375,
          "content": "# RydMike LINTER Preferences v2.3.0\n#\n# Get this file here: https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n#\n# We include and activate all lint rules, later below we disable the not used or desired ones.\n# You can find a list of all lint rules to put in your all_lint_rules.yaml file here:\n# https://dart.dev/tools/linter-rules/all\n#\n# This version is updated for Flutter 3.27 and Dart 3.6.\n#\n# For a comparison of all lint rules settings in rule styles listed below, please see this Google\n# sheet: https://docs.google.com/spreadsheets/d/1Nc1gFjmCOMubWZD7f2E4fLhWN7LYaOE__tsA7bf2NjA\n#\n# Versions used for comparison:\n#\n# Core           v5.1.1     : https://pub.dev/packages/lints\n# Recommended    v5.1.1     : https://pub.dev/packages/lints\n# Flutter Lints  v5.0.0     : https://pub.dev/packages/flutter_lints\n# Pedantic       v1.11.1    : https://pub.dev/packages/pedantic\n# Effective Dart v1.3.2     : https://pub.dev/packages/effective_dart\n# Flutter repo   master     : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n# Lint           v2.3.0     : https://pub.dev/packages/lint\n# VG Analysis    v7.0.0     : https://pub.dev/packages/very_good_analysis\n# RydMike        v2.3.0     : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\ninclude: all_lint_rules.yaml\nanalyzer:\n  exclude:\n    - \"**/*.g.dart\"\n    - \"**/*.freezed.dart\"\n    - \"test/.test_coverage.dart\"\n    - \"bin/cache/**\"\n    - \"lib/generated_plugin_registrant.dart\"\n\n  # For more information see: https://dart.dev/tools/analysis\n  language:\n    strict-casts: true\n    strict-inference: true\n    strict-raw-types: true\n\n  errors:\n    # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.\n    # We explicitly enable conflicting rules and are fixing the conflicts in this file.\n    # Put it to warning temporarily if you need to troubleshoot lint rule settings.\n    included_file_warning: ignore\n\n    # Treat missing required parameters as an error, not as a hint or a warning.\n    missing_required_param: error\n\n    # Treat missing returns as an error, not as a hint or a warning.\n    missing_return: error\n\n    # A record literal with exactly one positional field requires a trailing comma.\n    record_literal_one_positional_no_trailing_comma: error\n\n    # Invocation collection methods with arguments of unrelated types.\n    collection_methods_unrelated_type: warning\n\n    # Invocation of equality operator == with references of unrelated types.\n    unrelated_type_equality_checks: warning\n\n    # Allow self-reference to deprecated members. This is done because otherwise we have\n    # to annotate every member in every test, assert, etc. when we deprecate something.\n    # deprecated_member_use_from_same_package: ignore\n\n    # DON'T assign new values to parameters of methods or functions.\n    #\n    # https://dart.dev/tools/linter-rules/parameter_assignments.html\n    #\n    # Treats assigning new values to a parameter as a warning. We would almost like to set this\n    # to an error. However, this warning rule, or even more so if you set it to be an error, may\n    # be a bit problematic if/when you include other code directly that does it a lot.\n    # It does, however, make code safer when this cannot be done without involving\n    # an extra local variable for clarity and safety. Enabling this error, even as just a warning,\n    # does get in the way a bit if all you want to do is a null to default value release runtime\n    # safety/fallback assignment. For that use case, you have to add a local rule override. With\n    # null-safety, the need for this kind of null check and re-assignment to default if null,\n    # is rarely needed. Considering the comment in:\n    # https://dart.dev/tools/linter-rules/parameter_assignments.html:\n    # \"Assigning new values to parameters is generally a bad practice unless an operator\n    # such as ??= is used. Otherwise, arbitrarily reassigning parameters is usually a mistake.\"\n    # One might even think the rule would allow using the ??= operator, but it does not. For now,\n    # we keep this lint as warning and overriding locally with:\n    #\n    # When we need it for the ??= operator, or some copy/pasted in code that does things that\n    # require it, that we don't want to deal with fixing at the moment.\n    parameter_assignments: warning\n\n    # Allow having TODOs in the code.\n    todo: ignore\n\n# LINTER Preferences\n#\n# Explicitly disable only the rules we do not want.\nlinter:\n  rules:\n\n    # ALWAYS separate the control structure expression from its statement.\n    #\n    # https://dart.dev/tools/linter-rules/always_put_control_body_on_new_line.html\n    #\n    # This sometimes makes things more unclear when one line is enough. Also, single line if:s are\n    # fine and also recommended in Effective Dart \"DO format your code using dartfmt\".\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    always_put_control_body_on_new_line: false\n\n    # ALWAYS specify @required on named parameter before other named parameters.\n    #\n    # https://dart.dev/tools/linter-rules/always_put_required_named_parameters_first.html\n    #\n    # Conflicts with the convention used by Flutter, which puts `Key key` first\n    # and `@required Widget child` last.\n    #\n    # Other known linters use:\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    always_put_required_named_parameters_first: false\n\n    # ALWAYS specify type annotations.\n    #\n    # https://dart.dev/tools/linter-rules/always_specify_types.html\n    #\n    # Avoid var when specifying that a type is unknown and short-hands that elude type annotations. Use\n    # dynamic if you are being explicit that the type is unknown. Use Object if you are being explicit\n    # that you want an object that implements == and hashCode.\n    # The linter rule link above states this rule is from the Flutter style guide.\n    #\n    # This makes most code intent very explicit, sometimes this may help you\n    # reason about unfamiliar libs, but it might get tedious when dealing with very familiar ones.\n    # For devs used to more relaxed or no type declaration, it is probably the other way around.\n    # This rule is, of course, also in conflict with some other lint rules. Most notably, it\n    # violates Effective Dart \"AVOID type annotating initialized local variables\".\n    # https://dart.dev/tools/linter-rules/omit_local_variable_types.html\n    # Which we find to be a strange rule, the package lint agrees with the statement that\n    # \"Types for local variables may improve readability\" and keeps that avoid rule disabled.\n    #\n    # Turning always_specify_types lint rule on in a project at a later stage is very tedious,\n    # fixing all the analyzer warnings will take quite some time. Having it on as you write new code\n    # is not so bad though, the IDE will handle it most of the time.\n    #\n    # Most people probably want this lint rule OFF, but for now we keep it on in our projects.\n    # We might reconsider this choice later. For example, this issue has requested\n    # a new softer related lint rule that could be used only for declarations:\n    # https://github.com/dart-lang/linter/issues/1620\n    # If such a lint rule materializes, we might switch to using it instead and turn off this lint.\n    #\n    # Using always_specify_type ON lint like Flutter repo does, makes it easier to reason about\n    # unfamiliar codebases, especially when you read it on GitHub where the IDE cannot be used to\n    # look into what type an object is.\n    #\n    # We felt the above long explanation was warranted as a reminder. Keeping the rule listed here\n    # and the setting below, in order to easily turn it OFF permanently some day, or in some\n    # projects.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        enabled  : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : Enable rule by commenting it below, do this for PACKAGES.\n    #   APPLICATION: disabled : Disable rule by not commenting the row below, do this for APPS.\n    # always_specify_types: false\n\n    # ALWAYS use package imports for files in lib/.\n    #\n    # https://dart.dev/tools/linter-rules/always_use_package_imports.html\n    #\n    # This rule conflicts with `prefer_relative_imports` so we turn it OFF.\n    # We are still conflicted about which version to use, keeping it this way for now. Support\n    # for relative imports has improved in both IDEs. Adding imports still often get imported as\n    # package imports, and then you have to edit them manually. The IDEs can help with fixing them.\n    # The relative paths can be a bit messy to keep track off, package imports are actually\n    # a bit easier from that point of view.\n    # Flutter repo now also prefers relative imports over package imports, so that is\n    # another reason to use that.\n    #\n    # Use what you prefer, but you have to be consistent though, since mixing and matching can\n    # cause issues as the same file imported with the different options are considered to be\n    # different libs and code, even if it is the same file. This may impact the functionality\n    # of e.g. singletons, service locators and increase code size.\n    #\n    # When you refactor and move folders with a lot of code in them, that other code depends\n    # on for imports via relative imports, then they get messed up by Flutter IDEs\n    # VS-Code and AS/IntelliJ. Both main Flutter IDEs may fail to correctly refactor moved folders\n    # and imports that depend on files in the moved folders.\n    #\n    # Other known linters use:\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    always_use_package_imports: false\n\n    # AVOID annotating with dynamic when not required.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_annotating_with_dynamic.html\n    #\n    # Violates Effective Dart \"PREFER annotating with dynamic instead of letting inference fail\", it\n    # also conflicts with strong mode disabling `implicit-dynamic`. Turning it OFF.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    avoid_annotating_with_dynamic: false\n\n    # AVOID catches without on clauses.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_catches_without_on_clauses.html\n    #\n    # Using catch clauses without on clauses makes your code prone to encountering unexpected\n    # errors that won't be thrown (and thus will go unnoticed). However, there are situations\n    # where we voluntarily want to catch everything, especially as a library.\n    # See https://github.com/dart-lang/linter/issues/3023\n    #\n    # The above issue has been resolved and closed, so the rule is now enabled\n    # starting in version 2.3.0.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out below.\n    #   APPLICATION: disabled : With false value.\n    #\n    #avoid_catches_without_on_clauses: false\n\n    # AVOID defining a class that contains only static members.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_classes_with_only_static_members.html\n    #\n    # Creating classes with the sole purpose of providing utility, or otherwise static methods, is\n    # discouraged in effective Dart. Dart allows functions to exist outside of classes for this\n    # very reason. Effective Dart says avoid classes with only static members:\n    # https://dart.dev/guides/language/effective-dart/design#avoid-defining-a-class-that-contains-only-static-members\n    # However, the Flutter style guide says use them when it makes sense:\n    # https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#begin-global-constant-names-with-prefix-k\n    # Colors is an example of such a class, but they still enable this rule in the repo though, go figure.\n    #\n    # Like Pedantic, we like util and static classes too, so we use them.\n    # We tried the Effective Dart style and used kConstants in different const files. This\n    # is more cumbersome to use than static classes. The import is simpler with static classes and\n    # the code looks cleaner. If you use a lot of constant files, importing them is more tedious,\n    # and you cannot enforce a given 'as' name to have a consistent name space prefix. A static\n    # class gives you that automatically, thus providing context for the constants and static functions.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    avoid_classes_with_only_static_members: false\n\n    # AVOID declaring parameters as final.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_final_parameters.html\n    #\n    # Declaring parameters as final can lead to unnecessarily verbose code,\n    # especially when using the \"parameter_assignments\" rule.\n    #\n    # This rule is turned off, so we can define final parameters when it makes\n    # sense to do so without triggering a lint rule.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    avoid_final_parameters: false\n\n    # AVOID positional boolean parameters.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_positional_boolean_parameters.html\n    #\n    # Positional boolean parameters are considered a bad practice because they are very ambiguous.\n    # Using named boolean parameters is much more readable because it inherently describes\n    # what the boolean value represents.\n    # In principle, we agree with the argument against positional booleans. However, positional booleans\n    # are OK when they are the ONLY boolean parameter in a callback, and also very handy when used in a\n    # model setter from the callback directly.\n    #\n    # Flutter API contains many callbacks with the signature: {void Function(bool) onChanged} often\n    # for UI toggle switches. To keep things tidy and clean with a model setter for such a callback,\n    # a setter method with a positional boolean is needed, a typical pattern is:\n    # Switch.adaptive(\n    #   value: model.hideTooltips,\n    #   onChanged: model.setHideTooltips,\n    # ),\n    #\n    # We are turning OFF this AVOID rule. Willing to reconsider if I get convinced there are better ways,\n    # and it does not get in the way of single none named bool callbacks.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    avoid_positional_boolean_parameters: false\n\n    # AVOID print calls in production code.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_print.html\n    #\n    # Our default is to have this rule enabled.\n    #\n    # In example apps you may want to print to the console. You may want to do so during development\n    # too. We keep the rule here, to handily disable/enable as and when needed. This lint rule is\n    # a good way to find print statements that you may have used during development in code that\n    # should not have them in production, so at least before committing the code in such\n    # projects, make sure to keep this rule enabled by commenting it out here.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  enabled  : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   RELEASE:     enabled  : By commenting it out. (default)\n    #   DEVELOPMENT: disabled : Uncomment below if the warnings bother you during dev or making a console app.\n    #\n    # avoid_print: false\n\n    # AVOID redundant argument values.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_redundant_argument_values.html\n    #\n    # Using redundant (default) argument values can be useful for in-code documentation\n    # purposes and also handy as a template when trying different settings in Flutter. It is often\n    # quicker when dealing with not well-known APIs to see parameter values in the call/constructor,\n    # instead of using the IDE to peek into its default to figure out what the defaults are.\n    # Occasionally, leaving a few redundant default valued parameters in the code is not that bad\n    # when you are developing something new. For public packages, you probably want to keep this\n    # rule enabled. I like to sometimes be explicit and specify values that are the same as\n    # default one, mostly to make an unfamiliar API more readable on GitHub.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out below, often a good idea in packages.\n    #   APPLICATION: disabled : With false value.\n    avoid_redundant_argument_values: false\n\n    # AVOID annotating types for function expression parameters.\n    #\n    # https://dart.dev/tools/linter-rules/avoid_catches_without_on_clauses.html\n    #\n    # Annotating types for function expression parameters is usually unnecessary because the\n    # parameter types can almost always be inferred from the context, thus making the practice redundant.\n    # However, since we are using `always_specify_types`, we should not have this one ON either\n    # as it conflicts with it. Even if you do not do that, we still recommend keeping this rule OFF.\n    # While always specifying the type on callbacks is certainly a bit tedious and not necessary,\n    # it can sometimes improve readability, so let's not force them to not be allowed.\n    # Thus, even if you don't use `always_specify_types`, it is possible to sometimes specify\n    # them on closures when it improves the readability of unfamiliar closures.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    avoid_types_on_closure_parameters: false\n\n    # DO Use the cascading style when successively invoking methods on the same reference.\n    #\n    # https://dart.dev/tools/linter-rules/cascade_invocations.html\n    #\n    # We disable this rule, just a personal preference, using them is fine though,\n    # but let's not enforce it.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    cascade_invocations: false\n\n    # DO invoke close on instances of dart.core.Sink.\n    #\n    # https://dart.dev/tools/linter-rules/close_sinks.html\n    #\n    # Disabling it, may generate false positives. https://github.com/dart-lang/linter/issues/1381.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    close_sinks: false\n\n    # AVOID using deprecated elements from within the package in which they are declared.\n    #\n    # https://dart.dev/tools/linter-rules/deprecated_member_use_from_same_package\n    #\n    # Elements that are annotated with @Deprecated should not be referenced from within the\n    # package in which they are declared.\n    #\n    # RydMike: In packages and especially in public packages, it is often useful to deprecate a\n    # member, but keep it available and functional until the deprecated member is completley\n    # removed. We thus need to reference it in code and doc comments.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    deprecated_member_use_from_same_package: false\n\n    # DO reference all public properties in debug method implementations.\n    #\n    # https://dart.dev/tools/linter-rules/diagnostic_describe_all_properties.html\n    #\n    # Consider using this lint rule if you are making a public Flutter package.\n    # For private ones and private apps we recommend keeping it off as you probably\n    # won't be making diagnostic properties for all your\n    # classes, unless you are using a data class lib that does it for you via code generation.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   ENABLED? disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out, sometimes use it, not always.\n    #   APPLICATION: disabled : With false value. (Default, assume we are making an app most of the time.)\n    diagnostic_describe_all_properties: false\n\n    # DO NOT use environment declared variables.\n    #\n    # https://dart.dev/tools/linter-rules/do_not_use_environment\n    #\n    # Using values derived from the environment at compile-time, creates hidden global state\n    # and makes applications hard to understand and maintain.\n    # DON’T use fromEnvironment or hasEnvironment factory constructors.\n    #\n    # RydMike: There are appropriate times to use the environment, e.g. in tests and build logic\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    do_not_use_environment: false\n\n    # DO document lint ignores.\n    #\n    # https://dart.dev/tools/linter-rules/document_ignores\n    #\n    # Document ignore comments.\n    #\n    # RydMike: This is good, but putting it false for now. This lint is triggered a lot\n    # in our code bases that did not do this originally.\n    # Consider enabling it for new projects. May enable later in older projects too and\n    # add explanations to all the ignored rules.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    document_ignores: false\n\n    # DO Use Flutter TO-DO format.\n    #\n    # https://dart.dev/tools/linter-rules/flutter_style_todos.html\n    #\n    # Use Flutter-style todos with GitHub username. Useful if you are coding in a\n    # larger team, if not, you may also consider turning off the rule by removing\n    # its comment below.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        enabled  : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #flutter_style_todos: false\n\n    # AVOID lines longer than 80 characters\n    #\n    # https://dart.dev/tools/linter-rules/lines_longer_than_80_chars.html\n    #\n    # Using this rule will sometimes force a line of 81 characters to be split in two.\n    # As long as we try to respect the 80-character limit, going slightly above is fine.\n    #\n    # For packages, keep this rule enabled though, because the pub.dev dart format check will\n    # penalize package points if it does not adhere to strict Dart format rules, which\n    # requires max 80 char lines. This rule will then help you find cases where you go over\n    # and fix them manually when possible. Ironically, Flutter repo violates this rule, but\n    # if you do it in a package for pub.dev you get a score deduction. We often disable this rule\n    # if this is not a package, so we keep it listed here as a handy toggle.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out. (Default, even if it is not a package, we start with this.)\n    #   APPLICATION: disabled : With false value. (When/if short lines become problematic. We sometimes like 100 chars.)\n    # lines_longer_than_80_chars: false\n\n    # DO use super parameter names that match their corresponding super constructor’s\n    # parameter names.\n    #\n    # https://dart.dev/tools/linter-rules/matching_super_parameters\n    #\n    # Blocked by issue: https://github.com/dart-lang/language/issues/2509\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    matching_super_parameters: false\n\n    # DO define default behavior outside switch statements.\n    #\n    # https://dart.dev/tools/linter-rules/no_default_cases.html\n    #\n    # An experimental lint rule maturity wise. I enabled it, it seems to work well.\n    # Remove the comment below if it is causing issues.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        enabled  : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #no_default_cases: false\n\n    # CONSIDER omitting type annotations for local variables.\n    #\n    # https://dart.dev/tools/linter-rules/omit_local_variable_types.html\n    #\n    # Conflicts with 'always_specify_types' that is used, so then we can't have this rule either,\n    # besides we like being verbose and specific. Why and when would omitting the type for local\n    # variables be a good thing anyway, be specific, is our take on this.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       enabled  : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    omit_local_variable_types: false\n\n    # CONSIDER omitting obvious type annotations for local variables.\n    #\n    # https://dart.dev/tools/linter-rules/omit_obvious_local_variable_types\n    #\n    # Conflicts with 'always_specify_types' that is used, so then we can't have this rule either,\n    # besides we like being verbose and specific. Why and when would omitting the type for local\n    # variables be a good thing anyway, be specific, is our take on this.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    omit_obvious_local_variable_types: false\n\n    # PREFER asserts with a message string.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_asserts_with_message.html\n    #\n    # When assertions fail, it's not always simple to understand why. Adding a message to the\n    # assert function helps the developer to understand why the AssertionError occurs.\n    #\n    # While this is true, Dart does nowadays create very clear messages from assert-terms by default.\n    # Flutter SDK does not use this rule or style. When you use code from it for customized\n    # widgets, you will end up having to write your own messages for the code snippet.\n    #\n    # Rationale for not using this in Flutter SDK:\n    # \"Assertions blocks don't require a message because they throw simple to understand errors\"\n    #\n    # We agree, so we do not mind turning OFF this rule when it becomes tedious, but we start\n    # with it ON. With NNBD, you also usually need fewer asserts than you did before in Dart code,\n    # since NNBD made almost all \"not null\" assertions unnecessary.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out. (default)\n    #   APPLICATION: disabled : With false value. (If it gets tedious in an app, we may turn it off)\n    # prefer_asserts_with_message: false\n\n    # PREFER to define constructors, instead of static methods to create instances.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_constructors_over_static_methods.html\n    #\n    # Dart has named constructors. Static methods in other languages (java) are a workaround to\n    # not having named constructors.\n    #\n    # We don't mind this lint rule, it is OK, BUT we noticed that\n    # if you want/need to create instances of classes via static helpers in another class, that\n    # this lint rules complains about it. We are OK with preferring a named constructor over a\n    # static method to create an instance from within the same class. However, this lint rule\n    # complained about the above usage too, where we think it makes sense to use a static method.\n    # This rule currently complains about use cases that in some scenarios are impossible to comply\n    # with. Maybe this is another issue with this lint rule. We should investigate it further and\n    # report it if it is an issue. For now, we disable this rule.\n    # A past now resolved issue with this lint rule was: https://github.com/dart-lang/linter/issues/2149\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    prefer_constructors_over_static_methods: false\n\n    # DO use double quotes where they wouldn't require additional escapes.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_double_quotes.html\n    #\n    # This rule is mostly about what style you want to use and enforce, if any.\n    # It of course conflicts with rule:\n    # `prefer_single_quotes` : \"DO use single quotes where they wouldn't require additional escapes.\"\n    # https://dart.dev/tools/linter-rules/prefer_single_quotes.html\n    #\n    # For us single quotes are easier to type. On our ISO keyboards it is next to Enter key, and\n    # we don't need the Shift plus the far to reach nr 2 key on R1 to type it. Also, we don't think\n    # they compromise on readability.\n    # Then again, if you don't care and don't mind mixing and matching, then ALSO\n    # turning OFF `prefer_single_quotes` works fine too, and then you can use both options.\n    #\n    # We thought it was cleaner to stick to one style. Single quotes are easier to type for us,\n    # thus we turn OFF this `prefer_double_quotes` rule. There is another lint rule that recommends\n    # you to use double quotes when you otherwise would need to escape the single quote char, it works\n    # well when you use the prefer_single_quotes rule as well.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    prefer_double_quotes: false\n\n    # CONSIDER using => for short members whose body is a single return statement.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_expression_function_bodies.html\n    #\n    # Certainly a good idea in many cases, but not always. For example, it is not always suitable for\n    # Flutter, which may have a `build` method with a single return. This return is still\n    # complex enough that a \"body\" is worth it, and it might not even fit on a single line.\n    # https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    prefer_expression_function_bodies: false\n\n    # DO prefer declaring parameters as final if they are not reassigned in the function body.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_final_parameters.html\n    #\n    # Declaring parameters as final when possible is a good practice because it helps\n    # avoid accidental reassignments.\n    #\n    # Certainly a good idea in many cases. There seems to be one \"small\" false positive issue with it.\n    # Lint is triggered by final constructor properties, e.g. in\n    # `final int i;` the parameter `this.i` is not also final, which is not really needed\n    # since the property is final. However, this triggers the rule unnecessarily. We had to\n    # turn OFF this rule due to it.\n    #\n    # We turned OFF the rule. In a test project, after we cleaned up all that could be after Flutter 2.5 upgrade.\n    # There were still 150 positives from the rule, from above issue. So after having it on and doing cleanup\n    # where it could be used, we turned off the rule for now. Pity, it is a useful and nice rule otherwise.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    prefer_final_parameters: false\n\n    # DO use int literals rather than the corresponding double literal.\n    #\n    # https://dart.dev/tools/linter-rules/prefer_int_literals.html\n    #\n    # This rule goes against the preferred style of being explicit with\n    # declarations and hides when a number is double. We cannot declare it\n    # as 0.0 or 1.0 when it is double, it has to be 0 or 1, making it look\n    # like an integer, even if it is not. Sometimes doing that is OK, but let's\n    # not enforce it.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    prefer_int_literals: false\n\n    # DO document all public members.\n    #\n    # https://dart.dev/tools/linter-rules/public_member_api_docs.html\n    #\n    # All non-overriding public members should be documented with /// doc-style comments.\n    # Not necessary for an app or the examples in a pub.dev package. I always enable this for\n    # public packages.\n    #\n    # NOTE: There is also the lint rule \"package_api_docs\", that is enabled as well via all being enabled.\n    # https://dart.dev/tools/linter-rules/package_api_docs.html\n    # \"DO provide doc comments for all public APIs.\", is what it is supposed to do, but only for\n    # packages. However, if we turn OFF the rule \"public_member_api_docs\", then the\n    # \"package_api_docs\" offers no warnings on missing API doc comments alone. So our conclusion\n    # for now is that this rule has to be used instead to ensure we find all APIs that should\n    # have documentation comments in a package as well.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart enabled  : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    # VG Analysis    disabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike                 : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    #   PACKAGE:     enabled  : By commenting it out. (My default, I start with this)\n    #   APPLICATION: disabled : With false value. (But usually uncomment the false value if it is an app)\n    #public_member_api_docs: false\n\n    # DO use trailing commas for all function calls and declarations unless the function call or\n    # definition, from the start of the function name up to the closing parenthesis,\n    # fits in a single line.\n    #\n    # https://dart.dev/tools/linter-rules/require_trailing_commas.html\n    #\n    # This rule forces commas even in places where it just adds extra lines, that\n    # adds little value. There is also not a bulk dart fix for it:\n    # https://github.com/dart-lang/sdk/issues/47441\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           enabled  : https://pub.dev/packages/lint\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    require_trailing_commas: false\n\n    # DO sort constructor declarations before other members.\n    #\n    # We do like this lint rule, but we want to have the default constructor first, followed\n    # by its properties, after this, other named constructors and factories. This rule gets\n    # in the way of that. It forces you to put (often final) constructor properties after all\n    # the named constructors and factories, making them tedious to find and disconnected from\n    # where we want to see, read and handily edit them. This is especially the case if there are\n    # many constructors and factories, and they have a lot of parameters. For now, we disable\n    # this rule and order things as described above. The default constructor properties coming\n    # right after the constructor, is the only part where we in practice\n    # deviate from this rule, so otherwise yes, we do put constructors first as well anyway.\n    #\n    # From version v2.3.0 started using this rule, but add exceptions for files with\n    # classes that have a lot of properties and factory constructors. In those cases,\n    # we disable this rule, so we can get a better overview of the class properties\n    # and main constructor, before the factory constructors.\n    #\n    # Remove the comment below to disable this rule again.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Flutter repo   enabled  : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # Lint           disabled : https://pub.dev/packages/lint\n    #                           Discussion https://github.com/passsy/dart-lint/issues/1\n    # VG Analysis    enabled  : https://pub.dev/packages/very_good_analysis\n    # RydMike        enabled  : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    # sort_constructors_first: false\n\n    # DON'T use final for local variables.\n    #\n    # https://dart.dev/tools/linter-rules/unnecessary_final.html\n    #\n    # Incompatible with `prefer_final_locals` that we want because having immutable local variables when\n    # applicable makes larger functions more predictable and easier to reason about, so we\n    # use `prefer_final_locals` instead.\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    unnecessary_final: false\n\n    # DO use DecoratedBox when a Container has only a Decoration.\n    #\n    # Not used because of this issue https://github.com/dart-lang/linter/issues/3286\n    #\n    # Other known linters use:\n    #\n    # Core           disabled : https://pub.dev/packages/lints\n    # Recommended    disabled : https://pub.dev/packages/lints\n    # Flutter Lints  disabled : https://pub.dev/packages/flutter_lints\n    # Pedantic       disabled : https://pub.dev/packages/pedantic\n    # Effective Dart disabled : https://pub.dev/packages/effective_dart\n    # Lint           disabled : https://pub.dev/packages/lint\n    # Flutter repo   disabled : https://github.com/flutter/flutter/blob/master/analysis_options.yaml\n    # VG Analysis    disabled : https://pub.dev/packages/very_good_analysis\n    # RydMike        disabled : https://gist.github.com/rydmike/fdb53ddd933c37d20e6f3188a936cd4c\n    use_decorated_box: false"
        },
        {
          "name": "changelog",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yaml",
          "type": "blob",
          "size": 0.29296875,
          "content": "codecov:\n  require_ci_to_pass: yes\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"80...100\"\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\ncomment:\n  layout: \"reach,diff,flags,files,footer\"\n  behavior: default\n  require_changes: no"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 16.310546875,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  _fe_analyzer_shared:\n    dependency: transitive\n    description:\n      name: _fe_analyzer_shared\n      sha256: \"16e298750b6d0af7ce8a3ba7c18c69c3785d11b15ec83f6dcd0ad2a0009b3cab\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"76.0.0\"\n  _macros:\n    dependency: transitive\n    description: dart\n    source: sdk\n    version: \"0.3.3\"\n  analyzer:\n    dependency: transitive\n    description:\n      name: analyzer\n      sha256: \"1f14db053a8c23e260789e9b0980fa27f2680dd640932cae5e1137cce0e46e1e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"6.11.0\"\n  args:\n    dependency: transitive\n    description:\n      name: args\n      sha256: bf9f5caeea8d8fe6721a9c358dd8a5c1947b27f1cfaa18b39c301273594919e6\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.6.0\"\n  async:\n    dependency: transitive\n    description:\n      name: async\n      sha256: \"947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.11.0\"\n  boolean_selector:\n    dependency: transitive\n    description:\n      name: boolean_selector\n      sha256: \"6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  characters:\n    dependency: transitive\n    description:\n      name: characters\n      sha256: \"04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  clock:\n    dependency: transitive\n    description:\n      name: clock\n      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.1\"\n  collection:\n    dependency: transitive\n    description:\n      name: collection\n      sha256: a1ace0a119f20aabc852d165077c036cd864315bd99b7eaa10a60100341941bf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.19.0\"\n  convert:\n    dependency: transitive\n    description:\n      name: convert\n      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.2\"\n  coverage:\n    dependency: \"direct dev\"\n    description:\n      name: coverage\n      sha256: e3493833ea012784c740e341952298f1cc77f1f01b1bbc3eb4eecf6984fb7f43\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.11.1\"\n  crypto:\n    dependency: transitive\n    description:\n      name: crypto\n      sha256: \"1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.6\"\n  fake_async:\n    dependency: transitive\n    description:\n      name: fake_async\n      sha256: \"511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.1\"\n  ffi:\n    dependency: transitive\n    description:\n      name: ffi\n      sha256: \"16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.3\"\n  file:\n    dependency: transitive\n    description:\n      name: file\n      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"7.0.1\"\n  flex_seed_scheme:\n    dependency: \"direct main\"\n    description:\n      name: flex_seed_scheme\n      sha256: d3ba3c5c92d2d79d45e94b4c6c71d01fac3c15017da1545880c53864da5dfeb0\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.5.0\"\n  flutter:\n    dependency: \"direct main\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  flutter_test:\n    dependency: \"direct dev\"\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  frontend_server_client:\n    dependency: transitive\n    description:\n      name: frontend_server_client\n      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.0.0\"\n  glob:\n    dependency: transitive\n    description:\n      name: glob\n      sha256: \"0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  google_fonts:\n    dependency: \"direct dev\"\n    description:\n      name: google_fonts\n      sha256: b1ac0fe2832c9cc95e5e88b57d627c5e68c223b9657f4b96e1487aa9098c7b82\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"6.2.1\"\n  http:\n    dependency: transitive\n    description:\n      name: http\n      sha256: b9c29a161230ee03d3ccf545097fccd9b87a5264228c5d348202e0f0c28f9010\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.2\"\n  http_multi_server:\n    dependency: transitive\n    description:\n      name: http_multi_server\n      sha256: \"97486f20f9c2f7be8f514851703d0119c3596d14ea63227af6f7a481ef2b2f8b\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.2.1\"\n  http_parser:\n    dependency: transitive\n    description:\n      name: http_parser\n      sha256: \"76d306a1c3afb33fe82e2bbacad62a61f409b5634c915fceb0d799de1a913360\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"4.1.1\"\n  io:\n    dependency: transitive\n    description:\n      name: io\n      sha256: dfd5a80599cf0165756e3181807ed3e77daf6dd4137caaad72d0b7931597650b\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.0.5\"\n  js:\n    dependency: transitive\n    description:\n      name: js\n      sha256: c1b2e9b5ea78c45e1a0788d29606ba27dc5f71f019f32ca5140f61ef071838cf\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.1\"\n  leak_tracker:\n    dependency: transitive\n    description:\n      name: leak_tracker\n      sha256: \"7bb2830ebd849694d1ec25bf1f44582d6ac531a57a365a803a6034ff751d2d06\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"10.0.7\"\n  leak_tracker_flutter_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_flutter_testing\n      sha256: \"9491a714cca3667b60b5c420da8217e6de0d1ba7a5ec322fab01758f6998f379\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.8\"\n  leak_tracker_testing:\n    dependency: transitive\n    description:\n      name: leak_tracker_testing\n      sha256: \"6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.1\"\n  logging:\n    dependency: transitive\n    description:\n      name: logging\n      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  macros:\n    dependency: transitive\n    description:\n      name: macros\n      sha256: \"1d9e801cd66f7ea3663c45fc708450db1fa57f988142c64289142c9b7ee80656\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.1.3-main.0\"\n  matcher:\n    dependency: transitive\n    description:\n      name: matcher\n      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.12.16+1\"\n  material_color_utilities:\n    dependency: transitive\n    description:\n      name: material_color_utilities\n      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.11.1\"\n  meta:\n    dependency: \"direct main\"\n    description:\n      name: meta\n      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.15.0\"\n  mime:\n    dependency: transitive\n    description:\n      name: mime\n      sha256: \"41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.0\"\n  node_preamble:\n    dependency: transitive\n    description:\n      name: node_preamble\n      sha256: \"6e7eac89047ab8a8d26cf16127b5ed26de65209847630400f9aefd7cd5c730db\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.2\"\n  package_config:\n    dependency: transitive\n    description:\n      name: package_config\n      sha256: \"92d4488434b520a62570293fbd33bb556c7d49230791c1b4bbd973baf6d2dc67\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.1\"\n  path:\n    dependency: transitive\n    description:\n      name: path\n      sha256: \"087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.9.0\"\n  path_provider:\n    dependency: transitive\n    description:\n      name: path_provider\n      sha256: \"50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.5\"\n  path_provider_android:\n    dependency: transitive\n    description:\n      name: path_provider_android\n      sha256: \"4adf4fd5423ec60a29506c76581bc05854c55e3a0b72d35bb28d661c9686edf2\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.2.15\"\n  path_provider_foundation:\n    dependency: transitive\n    description:\n      name: path_provider_foundation\n      sha256: \"4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.4.1\"\n  path_provider_linux:\n    dependency: transitive\n    description:\n      name: path_provider_linux\n      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.2.1\"\n  path_provider_platform_interface:\n    dependency: transitive\n    description:\n      name: path_provider_platform_interface\n      sha256: \"88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  path_provider_windows:\n    dependency: transitive\n    description:\n      name: path_provider_windows\n      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.3.0\"\n  platform:\n    dependency: transitive\n    description:\n      name: platform\n      sha256: \"5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.6\"\n  plugin_platform_interface:\n    dependency: transitive\n    description:\n      name: plugin_platform_interface\n      sha256: \"4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.8\"\n  pool:\n    dependency: transitive\n    description:\n      name: pool\n      sha256: \"20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.5.1\"\n  pub_semver:\n    dependency: transitive\n    description:\n      name: pub_semver\n      sha256: \"7b3cfbf654f3edd0c6298ecd5be782ce997ddf0e00531b9464b55245185bbbbd\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.5\"\n  shelf:\n    dependency: transitive\n    description:\n      name: shelf\n      sha256: e7dd780a7ffb623c57850b33f43309312fc863fb6aa3d276a754bb299839ef12\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.4.2\"\n  shelf_packages_handler:\n    dependency: transitive\n    description:\n      name: shelf_packages_handler\n      sha256: \"89f967eca29607c933ba9571d838be31d67f53f6e4ee15147d5dc2934fee1b1e\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.2\"\n  shelf_static:\n    dependency: transitive\n    description:\n      name: shelf_static\n      sha256: c87c3875f91262785dade62d135760c2c69cb217ac759485334c5857ad89f6e3\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.3\"\n  shelf_web_socket:\n    dependency: transitive\n    description:\n      name: shelf_web_socket\n      sha256: cc36c297b52866d203dbf9332263c94becc2fe0ceaa9681d07b6ef9807023b67\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.0.1\"\n  sky_engine:\n    dependency: transitive\n    description: flutter\n    source: sdk\n    version: \"0.0.0\"\n  source_map_stack_trace:\n    dependency: transitive\n    description:\n      name: source_map_stack_trace\n      sha256: c0713a43e323c3302c2abe2a1cc89aa057a387101ebd280371d6a6c9fa68516b\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  source_maps:\n    dependency: transitive\n    description:\n      name: source_maps\n      sha256: \"190222579a448b03896e0ca6eca5998fa810fda630c1d65e2f78b3f638f54812\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.10.13\"\n  source_span:\n    dependency: transitive\n    description:\n      name: source_span\n      sha256: \"53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.10.0\"\n  stack_trace:\n    dependency: transitive\n    description:\n      name: stack_trace\n      sha256: \"9f47fd3630d76be3ab26f0ee06d213679aa425996925ff3feffdec504931c377\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.12.0\"\n  stream_channel:\n    dependency: transitive\n    description:\n      name: stream_channel\n      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.2\"\n  string_scanner:\n    dependency: transitive\n    description:\n      name: string_scanner\n      sha256: \"688af5ed3402a4bde5b3a6c15fd768dbf2621a614950b17f04626c431ab3c4c3\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.3.0\"\n  term_glyph:\n    dependency: transitive\n    description:\n      name: term_glyph\n      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  test:\n    dependency: \"direct dev\"\n    description:\n      name: test\n      sha256: \"713a8789d62f3233c46b4a90b174737b2c04cb6ae4500f2aa8b1be8f03f5e67f\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.25.8\"\n  test_api:\n    dependency: transitive\n    description:\n      name: test_api\n      sha256: \"664d3a9a64782fcdeb83ce9c6b39e78fd2971d4e37827b9b06c3aa1edc5e760c\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.7.3\"\n  test_core:\n    dependency: transitive\n    description:\n      name: test_core\n      sha256: \"12391302411737c176b0b5d6491f466b0dd56d4763e347b6714efbaa74d7953d\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.6.5\"\n  typed_data:\n    dependency: transitive\n    description:\n      name: typed_data\n      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.4.0\"\n  vector_math:\n    dependency: transitive\n    description:\n      name: vector_math\n      sha256: \"80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"2.1.4\"\n  vm_service:\n    dependency: transitive\n    description:\n      name: vm_service\n      sha256: f6be3ed8bd01289b34d679c2b62226f63c0e69f9fd2e50a6b3c1c729a961041b\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"14.3.0\"\n  watcher:\n    dependency: transitive\n    description:\n      name: watcher\n      sha256: \"3d2ad6751b3c16cf07c7fca317a1413b3f26530319181b37e3b9039b84fc01d8\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.0\"\n  web:\n    dependency: transitive\n    description:\n      name: web\n      sha256: cd3543bd5798f6ad290ea73d210f423502e71900302dde696f8bff84bf89a1cb\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.0\"\n  web_socket:\n    dependency: transitive\n    description:\n      name: web_socket\n      sha256: \"3c12d96c0c9a4eec095246debcea7b86c0324f22df69893d538fcc6f1b8cce83\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"0.1.6\"\n  web_socket_channel:\n    dependency: transitive\n    description:\n      name: web_socket_channel\n      sha256: \"9f187088ed104edd8662ca07af4b124465893caf063ba29758f97af57e61da8f\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.0.1\"\n  webkit_inspection_protocol:\n    dependency: transitive\n    description:\n      name: webkit_inspection_protocol\n      sha256: \"87d3f2333bb240704cd3f1c6b5b7acd8a10e7f0bc28c28dcf14e782014f4a572\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.2.1\"\n  xdg_directories:\n    dependency: transitive\n    description:\n      name: xdg_directories\n      sha256: \"7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"1.1.0\"\n  yaml:\n    dependency: transitive\n    description:\n      name: yaml\n      sha256: \"75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5\"\n      url: \"https://pub.dev\"\n    source: hosted\n    version: \"3.1.2\"\nsdks:\n  dart: \">=3.5.0 <4.0.0\"\n  flutter: \">=3.27.0\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 2.6826171875,
          "content": "name: flex_color_scheme\ndescription: A Flutter package to use and make beautiful Material design based themes.\nversion: 8.1.0\nhomepage: https://docs.flexcolorscheme.com\nrepository: https://github.com/rydmike/flex_color_scheme\nissue_tracker: https://github.com/rydmike/flex_color_scheme/issues\ndocumentation: https://docs.flexcolorscheme.com\nscreenshots:\n  - description: 'Example of FlexColorScheme light theme colors in Themes Playground theme simulator'\n    path: example/screenshots/fcs_colors_light.png\n  - description: 'Example of FlexColorScheme dark theme colors in Themes Playground theme simulator'\n    path: example/screenshots/fcs_colors_dark.png\n  - description: 'FlexColorScheme light theme applied to a mock login screen in Themes Playground'\n    path: example/screenshots/fcs_login_light.png\n  - description: 'FlexColorScheme dark theme applied to a mock login screen in Themes Playground'\n    path: example/screenshots/fcs_login_dark.png\n  - description: 'FlexColorScheme light theme applied to a mock shop app in Themes Playground'\n    path: example/screenshots/fcs_shop_light.png\n  - description: 'FlexColorScheme dark theme applied to a mock shop app in Themes Playground'\n    path: example/screenshots/fcs_shop_dark.png\n  - description: 'A FlexColorScheme pink light theme applied on the Flutter M3 demo app in Themes Playground'\n    path: example/screenshots/fcs_pad_light.png\n  - description: 'A FlexColorScheme pink dark theme applied on the Flutter M3 demo app in Themes Playground'\n    path: example/screenshots/fcs_pad_dark.png\n  - description: 'A FlexColorScheme blue light theme applied on the Flutter M3 demo app in Themes Playground'\n    path: example/screenshots/fcs_big_pad_light.png\n  - description: 'A FlexColorScheme blue dark theme applied on the Flutter M3 demo app in Themes Playground'\n    path: example/screenshots/fcs_big_pad_dark.png\ntopics:\n  - theme\n  - colorscheme\n  - material3\n  - color\n  - materialdesign\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n  flutter: '>=3.27.0'\n\ndependencies:\n  # FlexSeedScheme package, by Mike Rydstrom, rydmike.com (@rydmike).\n  # https://pub.dev/packages/flex_seed_scheme\n  flex_seed_scheme: ^3.5.0\n\n  flutter:\n    sdk: flutter\n\n  # Annotations used to express developer intentions that can't otherwise be deduced by\n  # statically analyzing source code. Package is from Google dart.dev team.\n  #\n  # Flutter does not expose the \"@internal\" annotation via foundation, to use it we need to\n  # import the package.\n  meta: ^1.9.0\n\ndev_dependencies:\n  # Dart test coverage\n  coverage: ^1.11.1\n  # Flutter test tools\n  flutter_test:\n    sdk: flutter\n  # Google fonts, by Google material.io.\n  # https://pub.dev/packages/google_fonts\n  google_fonts: ^6.2.1\n\n  # Test lib.\n  test:\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}