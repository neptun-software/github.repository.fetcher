{
  "metadata": {
    "timestamp": 1736710500014,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xuelongqy/flutter_easy_refresh",
      "stars": 3957,
      "defaultBranch": "v3",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.52734375,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\nmigrate_working_dir/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n.vscode/\n\n# Flutter/Dart/Pub related\n# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.\n/pubspec.lock\n**/doc/api/\n.dart_tool/\n.packages\nbuild/\n"
        },
        {
          "name": ".pubignore",
          "type": "blob",
          "size": 0.5439453125,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\nmigrate_working_dir/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n.vscode/\n\n# Flutter/Dart/Pub related\n# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.\n/pubspec.lock\n**/doc/api/\n.dart_tool/\n.packages\nbuild/\n\n# styles\n/styles"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 9.0673828125,
          "content": "## Next\n- feat: Added EasyRefresh.isNested parameter to determine whether to handle NestedScrollView. In versions 3.4.0 and earlier, no setting is required.\n- fix: Adjust the Flutter version, Flutter >=3.10.0.\n\n## 3.4.0\n- breaking: Flutter >=3.7.0, dart >=2.19.0. Remove some unnecessary compatibility, please update the Flutter version in time, or use the previous version.\n- fix: Scroll bar adaptation for unknown platforms [#825](https://github.com/xuelongqy/flutter_easy_refresh/issues/825).\n- feat: Add BoxDecoration to ClassicHeader and ClassicFooter, Thanks GiampaoloGabba for [PR#822](https://github.com/xuelongqy/flutter_easy_refresh/pull/822).\n- fix: Compatible with Flutter3.22.0.\n\n## 3.3.5+1\n- fix: Indicator properties cannot be updated [#818](https://github.com/xuelongqy/flutter_easy_refresh/issues/818).\n\n## 3.3.5\n- fix: Material style performance optimization [#814](https://github.com/xuelongqy/flutter_easy_refresh/issues/814).\n- fix: Issue during build when IndicatorStateListenable rebinds IndicatorNotifier [#607](https://github.com/xuelongqy/flutter_easy_refresh/issues/607).\n\n## 3.3.4\n- fix: EasyPaging.itemBuilder type inference [#762](https://github.com/xuelongqy/flutter_easy_refresh/issues/762).\n- fix: Event notification after dispose [#726](https://github.com/xuelongqy/flutter_easy_refresh/issues/726). \n- fix: Using refreshOnStart, onRefresh may not be triggered [#789](https://github.com/xuelongqy/flutter_easy_refresh/issues/789).\n- fix: Using refreshOnStart, scrolling to the bottom when the Header is visible cannot trigger loading [#787](https://github.com/xuelongqy/flutter_easy_refresh/issues/787). \n\n## 3.3.3+1\n- fix: All styles are lost.\n\n## 3.3.3\n- fix: When start on refresh, interrupted by loading [#785](https://github.com/xuelongqy/flutter_easy_refresh/issues/785).\n- feat: Use Flutter default scroll bar [#775](https://github.com/xuelongqy/flutter_easy_refresh/issues/775).\n\n## 3.3.2+4\n- fix: IndicatorNotifier._onCanProcess. Null check operator used on a null value [#782](https://github.com/xuelongqy/flutter_easy_refresh/issues/782), [#774](https://github.com/xuelongqy/flutter_easy_refresh/issues/774).\n\n## 3.3.2+2\n- feat: All kind of pointer device are supported by default [#777](https://github.com/xuelongqy/flutter_easy_refresh/issues/777).\n\n## 3.3.2+1\n- fix: Compatible with versions below Flutter3.10 [#722](https://github.com/xuelongqy/flutter_easy_refresh/issues/722).\n\n## 3.3.2\n- fix: BezierIndicator.spinBuilder doesn't work. \n- feat: Add BezierIndicator.spinInCenter.\n- feat: Add BezierIndicator.onlySpin [#689](https://github.com/xuelongqy/flutter_easy_refresh/issues/689).\n- feat: Add support for ScrollPhysics.toleranceFor.\n- feat: After failure, continue to scroll to trigger the task [#718](https://github.com/xuelongqy/flutter_easy_refresh/issues/718).\n- feat: [EasyRefresh] noMoreRefresh -> canRefreshAfterNoMore, noMoreLoad -> canRefreshAfterLoad\n- fix: Use canRefreshAfterNoMore or canRefreshAfterLoad, abnormal NoMore status.\n- feat: EasyRefreshController.finishRefresh and EasyRefreshController.finishLoad add force parameter.\n- feat: Add EasyRefresh.triggerAxis, specifies the direction of the trigger.\n\n## 3.3.1+2\n- fix: Secondary click event hit area [#688](https://github.com/xuelongqy/flutter_easy_refresh/issues/688), Thanks notbucai for [PR#714](https://github.com/xuelongqy/flutter_easy_refresh/pull/714).\n\n## 3.3.1+1\n- fix: Increase the priority of ClassicIndicator.pullIconBuilder [#674](https://github.com/xuelongqy/flutter_easy_refresh/issues/674).\n- fix: fit parameter is invalid [#708](https://github.com/xuelongqy/flutter_easy_refresh/issues/708).\n\n## 3.3.1\n- fix: Avoid an endless loop caused by multiple ListViews nested, Thanks LinXunFeng for [PR#681](https://github.com/xuelongqy/flutter_easy_refresh/pull/681).\n- fix: FooterNotifier.callTask use callRefreshOverOffset, Thanks AWarmHug for [PR#680](https://github.com/xuelongqy/flutter_easy_refresh/pull/680).\n- fix: NestedScrollView resize error [#666](https://github.com/xuelongqy/flutter_easy_refresh/issues/666).\n\n## 3.3.0+1\n- fix: Removed compatibility code for list height changes [#646](https://github.com/xuelongqy/flutter_easy_refresh/issues/646), [#671](https://github.com/xuelongqy/flutter_easy_refresh/issues/671).\n\n## 3.3.0\n- fix: Compatible with Flutter 3.7.\n\n## 3.2.2+2\n- fix: The indicator does not retract when the height of the list changes [#618](https://github.com/xuelongqy/flutter_easy_refresh/issues/618).\n\n## 3.2.2+1\n- fix: CupertinoActivityIndicator renamed to avoid conflicts.\n\n## 3.2.2\n- fix: Compatible with Flutter2.8.1 and below [#619](https://github.com/xuelongqy/flutter_easy_refresh/issues/619).\n- perf: Pub scores.\n\n## 3.2.1\n- fix: Footer's maxOverOffset property does not work.\n- fix: When maxOverOffset is 0, list scrolling loses inertia.\n- fix: When there is no task, the mode still changes [#608](https://github.com/xuelongqy/flutter_easy_refresh/issues/608).\n- fix: HapticFeedback does not work when triggerWhenReach is true.\n\n## 3.2.0+1\n- fix: When clamping, triggerWhenRelease is true causing the indicator to be stuck.\n- feat: Material indicator support triggerWhenRelease.\n\n## 3.2.0\n- feat: EasyRefreshController add headerState, footerState [#635](https://github.com/xuelongqy/flutter_easy_refresh/issues/635).\n- feat: Add triggerWhenRelease and triggerWhenReleaseNoWait [#593](https://github.com/xuelongqy/flutter_easy_refresh/issues/593).\n- fix: Error when using NotLoadFooter with clamping. Thanks Pwuts for [PR#659](https://github.com/xuelongqy/flutter_easy_refresh/pull/659).\n- feat: Add maxOverOffset [#590](https://github.com/xuelongqy/flutter_easy_refresh/issues/590).\n\n## 3.1.0\n- feat: Add paging widget [EasyPaging].\n\n## 3.0.5+1\n- fix: Clamping refresh, causing Material3 AppBar to change color.\n\n## 3.0.5\n- fix: [EasyRefreshController.callRefresh] and [EasyRefreshController.callLoad] add force [#633](https://github.com/xuelongqy/flutter_easy_refresh/issues/633) [#642](https://github.com/xuelongqy/flutter_easy_refresh/issues/642). Thanks percival888 for [PR#639](https://github.com/xuelongqy/flutter_easy_refresh/issues/639).\n- fix: When the height changes when callTask causes the list not to rebound.\n- feat: Add [EasyRefresh.scrollBehaviorBuilder] and [EasyRefresh.defaultScrollBehaviorBuilder]. Thanks laiiihz for [PR#614](https://github.com/xuelongqy/flutter_easy_refresh/pull/614).\n\n## 3.0.4+4\n- fix: Type 'SpringDescription' not found [#638](https://github.com/xuelongqy/flutter_easy_refresh/issues/638).\n\n## 3.0.4+3\n- feat: When the content of the list is not full, the infinite scroll does not cross the bounds [#588](https://github.com/xuelongqy/flutter_easy_refresh/issues/588).\n\n## 3.0.4+2\n- fix: [refreshOnStart] safe area [#586](https://github.com/xuelongqy/flutter_easy_refresh/issues/586).\n\n## 3.0.4+1\n- fix: [NestedScrollView.viewportDimension] should use outer's [#582](https://github.com/xuelongqy/flutter_easy_refresh/issues/582).\n- fix: Notify UI to update when indicator property changes [#582](https://github.com/xuelongqy/flutter_easy_refresh/issues/582).\n\n## 3.0.4\n- fix: ScrollMetrics.minScrollExtent != 0.0, offset calculation error.\n- feat: Supported [ScrollView.center] [#581](https://github.com/xuelongqy/flutter_easy_refresh/issues/581).\n\n## 3.0.3+1\n- docs: NestedScrollView example.\n\n## 3.0.3\n- fix: processedDuration == Duration.zero, can't rebound [#572](https://github.com/xuelongqy/flutter_easy_refresh/issues/572).\n- fix: [clamping] may not have rebound animation.\n- fix: Indicator overflow [#575](https://github.com/xuelongqy/flutter_easy_refresh/issues/575).\n- fix: BezierCircleHeader drop overflow.\n- feat: Supported NestedScrollView.\n- feat: Supported ScrollController trigger events.\n\n## 3.0.2+2\n- fix: ClassicIndicator transition animation.\n- fix: NotRefreshHeader and NotLoadFooter [position] causes tree structure changes.\n\n## 3.0.2+1\n- fix: [viewportDimension] changes may trigger loading.\n\n## 3.0.2\n- feat: Indicator add [triggerWhenReach] [#348](https://github.com/xuelongqy/flutter_easy_refresh/issues/348). Trigger immediately when reaching the [triggerOffset].\n- feat: CupertinoIndicator support horizontal.\n\n## 3.0.1+1\n- fix: CupertinoActivityIndicator radius == 0.\n\n## 3.0.1\n- fix: Use notifyListeners after ChangeNotifier disposed. Thanks laiiihz for [PR#555](https://github.com/xuelongqy/flutter_easy_refresh/pull/555).\n- feat: ClassicHeader、ClassicFooter add IconThemeData. Thanks Lay523 for [PR#562](https://github.com/xuelongqy/flutter_easy_refresh/pull/562).\n- feat: ClassicIndicator add [progressIndicatorSize] and [progressIndicatorStrokeWidth].\n- feat: Add CupertinoIndicator.\n- fix: finishLoad asset [#563](https://github.com/xuelongqy/flutter_easy_refresh/issues/563).\n\n## 3.0.0+3\n- fix: dart >=2.13.0.  \n- fix: The screen is not full, [infinite] can not reset.\n- feat: HeaderLocator and FooterLocator add [clearExtent].\n- feat: Add OverrideFooter and OverrideHeader.\n\n## 3.0.0+2\n- fix: Scores\n\n## 3.0.0+1\n- fix: .pubignore\n\n## 3.0.0\n> ### New version\n> Framework rewrite, stronger refresh widget.\n> - Supports all scrollable widgets.\n> - Physics scope, no longer limited to child types.\n> - Adjustable scroll parameters, infinite possibilities for the indicator.\n> - Safe area support.\n> - Indicator position setting.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.041015625,
          "content": "MIT License\n\nCopyright (c) 2018 xuelongqy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4638671875,
          "content": "# flutter_easy_refresh\n\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](/LICENSE)\n[![Platform Flutter](https://img.shields.io/badge/platform-Flutter-blue.svg)](https://flutter.dev)\n[![Pub](https://img.shields.io/pub/v/easy_refresh)](https://pub.dev/packages/easy_refresh)\n\n## English | [中文](https://github.com/xuelongqy/flutter_easy_refresh/blob/v3/README_CN.md)\n\nJust like the name, EasyRefresh can easily implement pull-down refresh and pull-up load on Flutter applications. It supports almost all Flutter Scrollable widgets. Its function is very similar to Android's SmartRefreshLayout, and it also absorbs the advantages of many third-party libraries. EasyRefresh integrates various styles of Header and Footer, but it has no limitations, you can easily customize it. Using Flutter's powerful animations, even just a simple control can be done. The goal of EasyRefresh is to create a powerful, stable and mature pull-to-refresh framework for Flutter.\n\n### [Online demo](https://xuelongqy.github.io/flutter_easy_refresh/)\n### [APK download](https://github.com/xuelongqy/flutter_easy_refresh/releases)\n### [API reference](https://pub.dev/documentation/easy_refresh/latest/)\n\n## Features:\n- Supports all scrollable widgets\n- Scrolling physics scope, exactly matching scrollable widgets\n- Integrate multiple cool Header and Footer\n- Support custom styles to achieve various animation effects\n- Support pull-down refresh, pull-up load (Can be triggered and finished with a controller)\n- Support indicator position setting, combined with listeners can also be placed in any position\n- Support refresh when the page starts, and customize the view\n- Support safe area, no more occlusion\n- Customize scroll parameters to allow lists to have different scrolling feedback and inertia\n\n## Sample\n#### 1. Default constructor\n- In the child scope, all scrolling components will share one physics. If there is scroll nesting, use EasyRefresh.builder or set the scope with ScrollConfiguration\n```dart\n  EasyRefresh(\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n    },\n    child: ListView(),\n  );\n```\n#### 2. Builder constructor\n```dart\n  EasyRefresh.builder(\n    onRefresh: () async {\n      ....\n      return IndicatorResult.success; \n    },\n    onLoad: () async {\n      ....\n    },\n    childBuilder: (context, physics) {\n      return ListView(\n        physics: physics,\n      );\n    },\n  );\n```\n#### 3. Indicator locate\n```dart\n  EasyRefresh(\n    header: Header(\n      position: IndicatorPosition.locator,\n    ),\n    footer: Footer(\n      position: IndicatorPosition.locator,\n    ),\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n      return IndicatorResult.noMore;\n    },\n    child: CustomScrollView(\n      slivers: [\n        SliverAppBar(),\n        const HeaderLocator.sliver(),\n        ...\n        const FooterLocator.sliver(),\n      ],\n    ),\n  );\n```\n#### 4. Use controller\n```dart\n  EasyRefreshController _controller = EasyRefreshController(\n    controlFinishRefresh: true,\n    controlFinishLoad: true,\n  );\n  ....\n  EasyRefresh(\n    controller: _controller,\n    onRefresh: () async {\n      ....\n      _controller.finishRefresh();\n      _controller.resetFooter();\n    },\n    onLoad: () async {\n      ....\n      _controller.finishLoad(IndicatorResult.noMore);\n    },\n    ....\n  );\n  ....\n  _controller.callRefresh();\n  _controller.callLoad();\n```\n#### 5. Specify Header and Footer\n```dart\n  EasyRefresh(\n    header: MaterialHeader(),\n    footer: MaterialFooter(),\n    child: ListView(),\n    ....\n  );\n  // Global\n  EasyRefresh.defaultHeaderBuilder = () => ClassicHeader();\n  EasyRefresh.defaultFooterBuilder = () => ClassicFooter();\n```\n#### 6. NestedScrollView\n```dart\n  EasyRefresh.builder(\n    header: MaterialHeader(\n      clamping: true,\n    ),\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n    },\n    childBuilder: (context, physics) {\n      return NestedScrollView(\n        physics: physics,\n        body: ListView(\n          physics: physics,\n        );\n      );\n    },\n  );\n  // or\n  EasyRefresh.builder(\n    header: MaterialHeader(\n      clamping: true,\n      position: IndicatorPosition.locator,\n    ),\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n    },\n    childBuilder: (context, physics) {\n      return NestedScrollView(\n        physics: physics,\n        headerSliverBuilder: (context, innerBoxIsScrolled) {\n          return [\n            const HeaderLocator.sliver(clearExtent: false),\n            ....\n          ];\n        },\n        body: ListView(\n          physics: physics,\n        );\n      );\n    },\n  );\n```\n\n## Feel free to contribute\nOne's maintenance is lonely. If you have good suggestions and changes, feel free to contribute your code. If you have really cool styles, It's even cooler to share with everyone.\n\n#### Thanks to all the people who already contributed!\n\n<a href=\"https://github.com/xuelongqy/flutter_easy_refresh/graphs/contributors\">\n    <img src=\"https://contrib.rocks/image?repo=xuelongqy/flutter_easy_refresh\" />\n</a>\n\n## QQ Group - 554981921\n#### Into the group of instructions\nThe group is not only solve the problem of EasyRefresh, any Flutter related issues can be discussed. Just as its name, craigslist, as long as there is time, group of Lord will help you solve problems together.\n\n## Thanks \n[SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout)  \n[flutter_spinkit](https://github.com/jogboms/flutter_spinkit)  \n\n## Licenses\n\n```\n \nMIT License\n\nCopyright (c) 2018 xuelongqy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n \n```\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 5.328125,
          "content": "# flutter_easy_refresh\n\n[![License](https://img.shields.io/badge/license-MIT-green.svg)](/LICENSE)\n[![Platform Flutter](https://img.shields.io/badge/platform-Flutter-blue.svg)](https://flutter.dev)\n[![Pub](https://img.shields.io/pub/v/easy_refresh)](https://pub.dev/packages/easy_refresh)\n\n## [English](https://github.com/xuelongqy/flutter_easy_refresh/blob/v3/README.md) | 中文\n\n正如名字一样，EasyRefresh很容易就能在Flutter应用上实现下拉刷新以及上拉加载操作，它支持几乎所有的Flutter滚动组件。它的功能与Android的SmartRefreshLayout很相似，同样也吸取了很多三方库的优点。EasyRefresh中集成了多种风格的Header和Footer，但是它并没有局限性，你可以很轻松的自定义。使用Flutter强大的动画，甚至随便一个简单的控件也可以完成。EasyRefresh的目标是为Flutter打造一个强大，稳定，成熟的下拉刷新框架。\n\n### [在线演示](https://xuelongqy.github.io/flutter_easy_refresh/)\n### [APK下载](https://github.com/xuelongqy/flutter_easy_refresh/releases)\n### [API文档](https://pub.dev/documentation/easy_refresh/latest/)\n\n## 特点功能:\n - 支持所有的滚动组件\n - 滚动物理作用域，精确匹配滚动组件\n - 集成多个炫酷的 Header 和 Footer\n - 支持自定义样式，实现各种动画效果\n - 支持下拉刷新、上拉加载(可使用控制器触发和结束)\n - 支持指示器位置设定，结合监听器也放置在任何位置\n - 支持页面启动时刷新，并自定义视图\n - 支持安全区域，不再有遮挡\n - 自定义滚动参数，让列表具有不同的滚动反馈和惯性\n\n## 简单用例\n#### 1.默认构造器\n - child作用域内，所有滚动组件会公用一个physics。如果有滚动嵌套，请使用EasyRefresh.builder或用ScrollConfiguration设置作用域\n```dart\n  EasyRefresh(\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n    },\n    child: ListView(),\n  )\n```\n#### 2.builder构造器\n```dart\n  EasyRefresh.builder(\n    onRefresh: () async {\n      ....\n      return IndicatorResult.success; \n    },\n    onLoad: () async {\n      ....\n    },\n    childBuilder: (context, physics) {\n      return ListView(\n        physics: physics,\n      );\n    },\n  )\n```\n#### 3.指示器定位\n```dart\n  EasyRefresh(\n    header: Header(\n      position: IndicatorPosition.locator,\n    ),\n    footer: Footer(\n      position: IndicatorPosition.locator,\n    ),\n    onRefresh: () async {\n      ....\n    },\n    onLoad: () async {\n      ....\n      return IndicatorResult.noMore;\n    },\n    child: CustomScrollView(\n      slivers: [\n        SliverAppBar(),\n        const HeaderLocator.sliver(),\n        ...\n        const FooterLocator.sliver(),\n        ],\n      ),\n  )\n```\n#### 4.控制器使用\n```dart\n  EasyRefreshController _controller = EasyRefreshController(\n    controlFinishRefresh: true,\n    controlFinishLoad: true,\n  );\n  ....\n  EasyRefresh(\n    controller: _controller,\n    onRefresh: () async {\n      ....\n      _controller.finishRefresh();\n      _controller.resetFooter();\n    },\n    onLoad: () async {\n      ....\n      _controller.finishLoad(IndicatorResult.noMore);\n    },\n    ....\n  );\n  ....\n  _controller.callRefresh();\n  _controller.callLoad();\n```\n#### 5.使用指定的 Header 和 Footer\n```dart\n  EasyRefresh(\n    header: MaterialHeader(),\n    footer: MaterialFooter(),\n    child: ListView(),\n    ....\n  )\n  // 全局设置\n  EasyRefresh.defaultHeaderBuilder = () => ClassicHeader();\n  EasyRefresh.defaultFooterBuilder = () => ClassicFooter();\n```\n\n## 欢迎贡献\n一个人的维护是孤独的。如果你有好的建议和改动，欢迎贡献你的代码。如果你有非常酷的样式，能够分享给大家那就更酷了。\n\n__感谢所有的贡献者!__\n\n<a href=\"https://github.com/xuelongqy/flutter_easy_refresh/graphs/contributors\">\n    <img src=\"https://contrib.rocks/image?repo=xuelongqy/flutter_easy_refresh\" />\n</a>\n\n## QQ讨论群 - 554981921\n#### 进群须知\n这个群不仅仅是解决EasyRefresh的问题，任何Flutter相关的问题都可以进行讨论。正如它的名字一样，有问必答，只要群主有时间，都会帮大家一起解决问题。\n\n## 感谢\n[SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout)  \n[flutter_spinkit](https://github.com/jogboms/flutter_spinkit)  \n\n## 开源协议\n\n```\n \nMIT License\n\nCopyright (c) 2018 xuelongqy\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n \n```\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.412109375,
          "content": "# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.cn/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at\n  # https://dart-lang.github.io/linter/lints/index.html.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n  # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n  # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.cn/guides/language/analysis-options"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 2.4033203125,
          "content": "name: easy_refresh\ndescription: A flutter widget that provides pull-down refresh and pull-up load.\nversion: 3.4.0\nhomepage: https://xuelongqy.github.io/flutter_easy_refresh\nrepository: https://github.com/xuelongqy/flutter_easy_refresh\nissue_tracker: https://github.com/xuelongqy/flutter_easy_refresh/issues\n\nenvironment:\n  sdk: \">=2.19.0 <4.0.0\"\n  flutter: \">=3.10.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\n  path_drawing: ^1.0.1\n\ndev_dependencies:\n  flutter_lints: ^4.0.0\n  flutter_test:\n    sdk: flutter\n\n# For information on the generic Dart part of this file, see the\n# following page: https://www.dartlang.org/tools/pub/pubspec\n\nflutter:\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add Flutter specific assets to your application, add an assets section, \n  # like this:\n  # assets:\n  #  - images/a_dot_burr.jpeg\n  #  - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.io/assets-and-images/#resolution-aware.\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.io/assets-and-images/#from-packages\n\n  # To add Flutter specific custom fonts to your application, add a fonts\n  # section here, in this \"flutter\" section. Each entry in this list should\n  # have a \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.io/custom-fonts/#from-packages\n\n\n  # This section identifies your Flutter project as a module meant for\n  # embedding in a native host app.  These identifiers should _not_ ordinarily\n  # be changed after generation - they are used to ensure that the tooling can\n  # maintain consistency when adding or modifying assets and plugins.\n  # They also do not have any bearing on your native host application's\n  # identifiers, which may be completely independent or the same as these.\n"
        },
        {
          "name": "styles",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}