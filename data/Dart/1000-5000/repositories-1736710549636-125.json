{
  "metadata": {
    "timestamp": 1736710549636,
    "page": 125,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "VeryGoodOpenSource/dart_frog",
      "stars": 1908,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.037109375,
          "content": ".idea\n.vscode/settings.json\n.DS_Store\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.279296875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at hello@verygood.ventures. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faqs"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.7314453125,
          "content": "# Contributing to Dart Frog\n\nFirst off, thanks for taking the time to contribute! 🎉👍\n\nThese are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.\n\nThis project is opinionated and follows patterns and practices used by the team at [Very Good Ventures][very_good_ventures_link].\n\n## Understanding the Dart Frog repository\n\nThis is a mono repo, a repository that includes more than one individual project. In fact, the Dart Frog repository includes all the packages, example apps, CLIs, and IDE integration plugins that have a role in the Dart Frog developer experience.\n\nThe contents of the mono repo is divided into the following directories:\n\n- [`tool/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/tool): contains internal operation scripts\n- [`assets/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/assets): images to embed into READMEs\n- [`docs/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/docs): source code for the [docs site][dart_frog_site].\n- [`examples/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/examples): example projects of some of the several usages of Dart Frog\n- [`extensions/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/extensions): Integrations with IDEs such as VS Code.\n- [`bricks/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/bricks): Internal mason bricks used by [dart_frog_cli][dart_frog_cli_link] to perform tasks such as creating new projects, starting a dev server, and building a prod server.\n- [`packages/`](https://github.com/VeryGoodOpenSource/dart_frog/tree/main/packages): The source code of the packages that constitute the Dart Frog suite (`dart_frog_cli`, `dart_frog` and `dart_frog_gen`) as well as companion packages (such as `dart_frog_web_socket`).\n\nSome of the included projects have more specific instructions on contribution. In these cases, the project root may include a `CONTRIBUTING.md` file with such instructions.\n\n## Proposing a changes & reporting bugs\n\nIf you intend to change the public API or make any non-trivial changes to the implementation, we recommend filing an issue. This lets us reach an agreement on your proposal before you put significant effort into it.\n\nIf you’re only fixing a bug, it’s fine to submit a pull request right away but we still recommend to [filing an issue][issue_creation_link] detailing what you’re fixing. This is helpful in case we don’t accept that specific fix but want to keep track of the issue. Please use the built-in [Bug Report][bug_report_link] template and provide as much information as possible including detailed reproduction steps. Once one of the package maintainers has reviewed the issue and an agreement is reached regarding the fix, a pull request can be created.\n\n## Creating a Pull Request\n\nBefore creating a pull request please:\n\n1. Fork the repository and create your branch from `main`.\n1. Install all dependencies (`dart pub get`).\n1. Squash your commits and ensure you have a meaningful, [semantic][conventional_commits_link] commit message.\n1. Add tests! Pull Requests without 100% test coverage will not be approved.\n1. Ensure the existing test suite passes locally.\n1. Format your code (`dart format .`).\n1. Analyze your code (`dart analyze --fatal-infos --fatal-warnings .`).\n1. Create the Pull Request.\n1. Verify that all status checks are passing.\n\nWhile the prerequisites above must be satisfied prior to having your\npull request reviewed, the reviewer(s) may ask you to complete additional\nwork, tests, or other changes before your pull request can be ultimately\naccepted.\n\n# Maintaining Dart Frog\n\n## Setting up your local development environment\n\nPrerequisites:\n\n- Install a valid [Dart SDK](https://dart.dev/get-dart) in your local environment, it should be compatible with the latest version of [Dart Frog CLI](https://github.com/VeryGoodOpenSource/dart_frog/blob/main/packages/dart_frog_cli/pubspec.yaml). If you have Flutter installed, you likely have a valid Dart SDK version already installed.\n- [Mason CLI][mason_install_link] (to run and test the `bricks`);\n- [Node.js][node_js_dowload_link], for working with the VS Code extension or the documentation website. Refer to their CONTRIBUTING files for further installation requirements.\n- Capability to run shell scripts (for the scripts under `tool/`).\n\n## Understanding the `packages/` contents:\n\n### `dart_frog`\n\nThis is the user-facing package of the Dart Frog SDK, which means that Dart Frog users will be using its API to construct servers and runtime operations. It contains logic for request parsing, middleware, and response creation.\n\n### `dart_frog_gen`\n\nThis is the internal package used by the Dart Frog tooling to interpret the file disposition and from it construct a Dart Frog server.\n\n> :warning: **Warning**: this package is a dependency on the bricks bundled into the CLI. This means that any changes that break the bricks should be released with a major version, otherwise dart frog users may be blocked from performing tasks such as `dev`, `build`, and `new`.\n\n### `dart_frog_cli`\n\nA Dart command line interface package that serves as the main tool for Dart Frog. It includes bundled versions of the bricks under `bricks/`. To sync the source code of the bricks with new bundles, run `tool/generate_bundles.sh`.\n\n### Companion packages\n\nThe other items under `packages/` are companion packages in which dart_frog users may include on their project for specific server-side capabilities, such as auth (`dart_frog_auth`) and WebSockets (`dart_frog_web_socket`)\n\n## Releasing versions of packages\n\nBefore starting the release process of an individual package, first check:\n\n1. If your local `main` branch is up to date:\n\n```shell\n# ☁️ Ensure you're up to date with the GitHub remote\ngit checkout main\ngit fetch\ngit status\n```\n\n2. Ensure the [GitHub pipeline](https://github.com/VeryGoodOpenSource/dart_frog/actions) is green (has passed successfully) for your given package.\n\n3. Run the script under `tool/release_ready.sh` within the package root repository and the desired new version.\n\n```shell\n# 🚀 Run the release ready script (from packages/<package>)\n../../tool/release_ready.sh <version>\n```\n\nThe above example will: update the version of `<package>` to `<version>`, update the dart_frog CHANGELOG.md, create and checkout to a local release branch.\n\n4. Review the recently updated CHANGELOG file. You should manually amend the content were necessary. For example, by removing the redundant scope of some semantic pull requests or removing superfluous or unrelated logged changes.\n\n5. Commit, push and open a pull request from the new release branch.\n\n6. Once merged, create a [release on GitHub][github_release_link]. The [publish workflow](https://github.com/VeryGoodOpenSource/dart_frog/blob/main/.github/workflows/publish.yaml) should take care of publishing the new version on the appropriate package manager.\n\n7. Open follow-up pull requests updating this package usage in any other Dart Frog package that depends on this new release.\n\n[conventional_commits_link]: https://www.conventionalcommits.org/en/v1.0.0\n[bug_report_link]: https://github.com/VeryGoodOpenSource/dart_frog/issues/new?assignees=&labels=bug&projects=&template=bug_report.md&title=fix%3A+\n[issue_creation_link]: https://github.com/VeryGoodOpenSource/dart_frog/issues/new/choose\n[very_good_ventures_link]: https://verygood.ventures\n[dart_frog_site]: https://dartfrog.vgv.dev/\n[dart_frog_cli_link]: https://pub.dev/packages/dart_frog_cli\n[node_js_dowload_link]: https://nodejs.org/pt-br/download\n[mason_install_link]: https://docs.brickhub.dev/installing/\n[dart_standalone_link]: https://dart.dev/get-dart\n[dart_on_flutter_link]: https://docs.flutter.dev/get-started/install\n[github_release_link]: https://github.com/VeryGoodOpenSource/dart_frog/releases\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2022 Very Good Ventures\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.6025390625,
          "content": "[![Dart Frog Logo][logo_white]][dart_frog_link_dark]\n[![Dart Frog Logo][logo_black]][dart_frog_link_light]\n\n[![ci][ci_badge]][ci_link]\n[![coverage][coverage_badge]][ci_link]\n[![style: very good analysis][very_good_analysis_badge]][very_good_analysis_link]\n[![License: MIT][license_badge]][license_link]\n[![Powered by Mason](https://img.shields.io/endpoint?url=https%3A%2F%2Ftinyurl.com%2Fmason-badge)](https://github.com/felangel/mason)\n\nA fast, minimalistic backend framework for Dart 🎯\n\nDeveloped with 💙 by [Very Good Ventures][very_good_ventures_link] 🦄\n\n## Documentation 📝\n\nFor official documentation, please visit https://dartfrog.vgv.dev.\n\n## Packages 📦\n\n| Package                                                                                                         | Pub                                                                                                                    |\n| --------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| [dart_frog](https://github.com/verygoodopensource/dart_frog/tree/main/packages/dart_frog)                       | [![pub package](https://img.shields.io/pub/v/dart_frog.svg)](https://pub.dev/packages/dart_frog)                       |\n| [dart_frog_gen](https://github.com/verygoodopensource/dart_frog/tree/main/packages/dart_frog_gen)               | [![pub package](https://img.shields.io/pub/v/dart_frog_gen.svg)](https://pub.dev/packages/dart_frog_gen)               |\n| [dart_frog_cli](https://github.com/verygoodopensource/dart_frog/tree/main/packages/dart_frog_cli)               | [![pub package](https://img.shields.io/pub/v/dart_frog_cli.svg)](https://pub.dev/packages/dart_frog_cli)               |\n| [dart_frog_web_socket](https://github.com/verygoodopensource/dart_frog/tree/main/packages/dart_frog_web_socket) | [![pub package](https://img.shields.io/pub/v/dart_frog_web_socket.svg)](https://pub.dev/packages/dart_frog_web_socket) |\n| [dart_frog_auth](https://github.com/verygoodopensource/dart_frog/tree/main/packages/dart_frog_auth)             | [![pub package](https://img.shields.io/pub/v/dart_frog_auth.svg)](https://pub.dev/packages/dart_frog_auth)             |\n\n\n## Quick Start 🚀\n\n### Prerequisites 📝\n\nIn order to use Dart Frog you must have the [Dart SDK][dart_installation_link] installed on your machine.\n\n### Installing 🧑‍💻\n\n```sh\n# 📦 Install the dart_frog cli from pub.dev\ndart pub global activate dart_frog_cli\n```\n\n### Creating a Project ✨\n\nUse the `dart_frog create` command to create a new project.\n\n```sh\n# 🚀 Create a new project called \"my_project\"\ndart_frog create my_project\n```\n\n### Start the Dev Server 🏁\n\nNext, open the newly created project and start the dev server via:\n\n```sh\n# 🏁 Start the dev server\ndart_frog dev\n```\n\n💡 **Tip**: By default port `8080` is used. A custom port can be used via the `--port` option.\n\n### Create a Production Build 📦\n\nCreate a production build which includes a `DockerFile` so that you can deploy anywhere:\n\n```sh\n# 📦 Create a production build\ndart_frog build\n```\n\n### Create New Routes and Middleware 🛣️\n\nTo add new routes and middleware to your project, use the `dart_frog new` command.\n\n```sh\n# 🛣️ Create a new route \"/hello/world\"\ndart_frog new route \"/hello/world\"\n\n# 🛣️ Create a new middleware for the route \"/hello/world\"\ndart_frog new middleware \"/hello/world\"\n```\n\n## Goals 🎯\n\nDart Frog is built on top of [shelf](https://pub.dev/packages/shelf) and [mason](https://pub.dev/packages/mason) and is inspired by many tools including [remix.run](https://remix.run), [next.js](https://nextjs.org), and [express.js](https://expressjs.com).\n\nThe goal of Dart Frog is to help developers effectively build backends in Dart. Currently, Dart Frog is focused on optimizing the process of building backends which aggregate, compose, and normalize data from multiple sources.\n\nDart Frog provides a simple core with a small API surface area in order to reduce the learning curve and ramp-up time for developers. In addition, Dart Frog is intended to help Flutter/Dart developers maximize their productivity by having a unified tech stack that enables sharing tooling, models, and more!\n\n## Extensions 💻\n\n- [VS Code](https://marketplace.visualstudio.com/items?itemName=VeryGoodVentures.dart-frog): extends VS Code with support for Dart Frog and provides tools for effectively managing Dart Frog projects within VS Code.\n\n[dart_installation_link]: https://dart.dev/get-dart\n[ci_badge]: https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/main.yaml/badge.svg\n[ci_link]: https://github.com/VeryGoodOpenSource/dart_frog/actions/workflows/main.yaml\n[coverage_badge]: https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/packages/dart_frog/coverage_badge.svg\n[dart_frog_link_dark]: https://github.com/verygoodopensource/dart_frog#gh-dark-mode-only\n[dart_frog_link_light]: https://github.com/verygoodopensource/dart_frog#gh-light-mode-only\n[license_badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[license_link]: https://opensource.org/licenses/MIT\n[logo_black]: https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_black.png#gh-light-mode-only\n[logo_white]: https://raw.githubusercontent.com/VeryGoodOpenSource/dart_frog/main/assets/dart_frog_logo_white.png#gh-dark-mode-only\n[very_good_analysis_badge]: https://img.shields.io/badge/style-very_good_analysis-B22C89.svg\n[very_good_analysis_link]: https://pub.dev/packages/very_good_analysis\n[very_good_ventures_link]: https://verygood.ventures\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.0478515625,
          "content": "analyzer:\n  exclude:\n    - bricks/**/__brick__/**"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bricks",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}