{
  "metadata": {
    "timestamp": 1736710512717,
    "page": 45,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "2d-inc/developer_quest",
      "stars": 2991,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.263671875,
          "content": "# Miscellaneous\n*.class\n*.lock\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.2978515625,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 5391447fae6209bb21a89e6a5a6583cac1af9b4b\n  channel: stable\n\nproject_type: app\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2018 2D, Inc\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7001953125,
          "content": "# Developer Quest\n\nBecome a tech lead, slay bugs, and don't get fired.\n\nAll in Flutter.\n\n## Research tree\n\nThe game progression is based on a \"research tree\" of tasks. The tree is defined in code\nin `lib/src/shared_state/task_tree` but for clarity it is also kept as a diagram\nin `assets/docs`. Here's the PNG.\n\n![The task \"research tree\"](https://github.com/2d-inc/dev_rpg/blob/master/assets/docs/research-tree.png)\n\n## Performance testing\n\nAttach a real device and run the following command from the root of the repo:\n\n```sh\nflutter drive --target=test_driver/performance.dart --profile\n```\n\nThis will do an automated run-through of the app, and will save the output to files.\n\n* Look into to `build/walkthrough-*.json` files for detailed summaries of each run.\n* Look at `test_driver/perf_stats.tsv` to compare latest runs with historical data.\n* Run `Rscript test_driver/generate-graphs.R` (assuming you have R installed) to generate\n  boxplots of the latest runs. This will show up as `test_driver/*.pdf` files.\n* Peruse the raw data file (used by R to generate the boxplots) by opening the\n  `durations.tsv` file. These files contain build and rasterization times for each frame\n  for every run.\n\nIf you want to get several runs at once, you can use something like the following command:\n\n```sh\nDESC=\"my change\" bash -c 'for i in {1..5}; do flutter drive --target=test_driver/performance.dart --profile; sleep 1; done'\n```\n\nWhy run several times when we get so many data points on each walkthrough? With several identical\nwalkthroughs it's possible to visually check variance between runs. Even with box plots,\nthese nuances get lost in the summary stats, so it's hard to see whether a change actually\nbrought any performance improvement or not. Running several times also eliminates\nthe effect of extremely bad luck, like for example when Android decides to update some app while\ntest is running.\n\n### Lock CPU and GPU speed for your performance test device\n\nRun the following command when your performance test device is attached via USB.\n\n```bash\n./tool/lock_android_scaling.sh\n```\n\nWARNING:\n\n* This only works for rooted devices.\n* This only works for Nexus 5. The specifics of scaling lock are different from device to device.\n  You can modify the script to your needs, following\n  [this template](https://github.com/google/skia/blob/master/infra/bots/recipe_modules/flavor/android.py)\n  and\n  [/sys/devices/system/cpu documentation](https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-devices-system-cpu).\n\n### Where to store the profiling data\n\nYou probably don't want to check the `*.tsv` output files into the repo. For that,\nrun `git update-index --assume-unchanged test_driver/*.tsv` in the root dir. This is a one time\ncommand per machine.\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 3.3828125,
          "content": "analyzer:\n  strong-mode:\n    implicit-casts: false\n    implicit-dynamic: false\n\nlinter:\n  rules:\n  - always_put_required_named_parameters_first\n  - always_require_non_null_named_parameters\n  - annotate_overrides\n  - avoid_annotating_with_dynamic\n  - avoid_bool_literals_in_conditional_expressions\n  - avoid_catches_without_on_clauses\n  - avoid_catching_errors\n  - avoid_classes_with_only_static_members\n  - avoid_double_and_int_checks\n  - avoid_empty_else\n  - avoid_field_initializers_in_const_classes\n  - avoid_implementing_value_types\n  - avoid_init_to_null\n  - avoid_js_rounded_ints\n  - avoid_null_checks_in_equality_operators\n  - avoid_relative_lib_imports\n  - avoid_return_types_on_setters\n  - avoid_returning_null\n  - avoid_returning_null_for_future\n  - avoid_returning_null_for_void\n  - avoid_returning_this\n  - avoid_setters_without_getters\n  - avoid_shadowing_type_parameters\n  - avoid_single_cascade_in_expression_statements\n  - avoid_slow_async_io\n  - avoid_types_as_parameter_names\n  - avoid_unused_constructor_parameters\n  - avoid_void_async\n  - await_only_futures\n  - camel_case_types\n  - cancel_subscriptions\n  - close_sinks\n  - constant_identifier_names\n  - control_flow_in_finally\n  - curly_braces_in_flow_control_structures\n  - directives_ordering\n  - empty_catches\n  - empty_constructor_bodies\n  - empty_statements\n  - file_names\n  - hash_and_equals\n  - implementation_imports\n  - invariant_booleans\n  - iterable_contains_unrelated_type\n  - join_return_with_assignment\n  - library_names\n  - library_prefixes\n  - lines_longer_than_80_chars\n  - list_remove_unrelated_type\n  - literal_only_boolean_expressions\n  - no_adjacent_strings_in_list\n  - no_duplicate_case_values\n  - non_constant_identifier_names\n  - null_closures\n  - one_member_abstracts\n  - only_throw_errors\n  - overridden_fields\n  - package_api_docs\n  - package_names\n  - package_prefixed_library_names\n  - parameter_assignments\n  - prefer_adjacent_string_concatenation\n  - prefer_asserts_in_initializer_lists\n  - prefer_collection_literals\n  - prefer_conditional_assignment\n  - prefer_const_constructors\n  - prefer_const_constructors_in_immutables\n  - prefer_const_declarations\n  - prefer_const_literals_to_create_immutables\n  - prefer_constructors_over_static_methods\n  - prefer_contains\n  - prefer_equal_for_default_values\n  - prefer_final_fields\n  - prefer_final_in_for_each\n  - prefer_foreach\n  - prefer_function_declarations_over_variables\n  - prefer_initializing_formals\n  - prefer_is_empty\n  - prefer_is_not_empty\n  - prefer_iterable_whereType\n  - prefer_mixin\n  - prefer_null_aware_operators\n  - prefer_typing_uninitialized_variables\n  - prefer_void_to_null\n  - recursive_getters\n  - slash_for_doc_comments\n  - sort_pub_dependencies\n  - sort_unnamed_constructors_first\n  - test_types_in_equals\n  - throw_in_finally\n  - type_annotate_public_apis\n  - type_init_formals\n  - unawaited_futures\n  - unnecessary_await_in_return\n  - unnecessary_brace_in_string_interps\n  - unnecessary_const\n  - unnecessary_getters_setters\n  - unnecessary_lambdas\n  - unnecessary_new\n  - unnecessary_null_aware_assignments\n  - unnecessary_null_in_if_null_operators\n  - unnecessary_overrides\n  - unnecessary_parenthesis\n  - unnecessary_statements\n  - unnecessary_this\n  - unrelated_type_equality_checks\n  - use_full_hex_values_for_flutter_colors\n  - use_rethrow_when_possible\n  - use_setters_to_change_properties\n  - use_string_buffers\n  - use_to_and_as_if_applicable\n  - valid_regexps\n  - void_checks\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "artwork",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 2.482421875,
          "content": "name: dev_rpg\ndescription: Become a tech lead, slay bugs, and don't get fired.\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# Read more about versioning at semver.org.\nversion: 1.0.0+1\n\nenvironment:\n  # For Google I/O we are being very specific about pinning to specific branch revision.\n  # This is flutter commit hash b593f5167bce84fb3cad5c258477bf3abc1b14eb, tagged\n  # as Flutter version 1.5.4.\n  sdk: \">=2.3.0-dev.0.1 <3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  intl: any\n  provider: ^2.0.0\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^0.1.2\n  flare_flutter: ^1.8.3\n  auto_size_text: ^1.1.2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_driver:\n    sdk: flutter\n  logging: ^0.11.3+2\n  git: ^0.5.1+1\n  t_stats: ^2.0.0\n  test: ^1.6.1\n\n\n# For information on the generic Dart part of this file, see the\n# following page: https://www.dartlang.org/tools/pub/pubspec\n\n# The following section is specific to Flutter.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  # To add assets to your application, add an assets section, like this:\n  assets:\n    - assets/style_sphinx/\n    - assets/images/\n    - assets/images/2.0x/\n    - assets/images/3.0x/\n    - assets/flare/\n    - assets/docs/code_chomper_alpha.dart\n    - assets/docs/code_chomper_beta.dart\n\n  fonts:\n      - family: SpaceMonoRegular\n        fonts:\n          - asset: assets/fonts/SpaceMono-Regular.ttf\n      - family: SpaceMonoBold\n        fonts:\n          - asset: assets/fonts/SpaceMono-Bold.ttf\n      - family: RobotoCondensedBold\n        fonts:\n          - asset: assets/fonts/RobotoCondensed-Bold.ttf\n      - family: RobotoRegular\n        fonts:\n          - asset: assets/fonts/Roboto-Regular.ttf\n      - family: MontserratMedium\n        fonts:\n          - asset: assets/fonts/Montserrat-Medium.otf\n      - family: MontserratRegular\n        fonts:\n          - asset: assets/fonts/Montserrat-Regular.otf\n      - family: MontserratBold\n        fonts:\n          - asset: assets/fonts/Montserrat-Bold.otf\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}