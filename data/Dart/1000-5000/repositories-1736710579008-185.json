{
  "metadata": {
    "timestamp": 1736710579008,
    "page": 185,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gskinnerTeam/flokk",
      "stars": 1467,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7939453125,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Desktop & Web related\n**/GeneratedPlugins.props\n**/generated_plugin_registrant.cc\n**/generated_plugins.mk\n**/generated_plugin_registrant.dart\n\n# Exceptions to above rules.\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n\n# Sample data\nsample_data\nspikes/contacts_creator/*.csv\n\n# Firebase\n/.firebase\n.firebaserc\nfirebase.json\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.240234375,
          "content": "Copyright 2020 gskinner.com, inc.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.8779296875,
          "content": "# Flokk\nA fresh and modern Google Contacts manager that integrates with GitHub and Twitter.\n\n## Demo Builds\n- Web: https://flokk.app\n- Linux: https://snapcraft.io/flokk-contacts\n- macOS: https://flokk.app/macos/Flokk_Contacts_v1.0.1.dmg\n- Windows: https://flokk.app/windows/flokk-v1.0.1-signed.zip\n  \n## Contributing\n\nYou are invited to improve Flokk Contacts! Submitting pull requests, answering and asking questions in the [Issues](https://github.com/gskinnerTeam/flokk/issues) page, and updating documentation are all ways you can contribute to the app.\n\nPlease note that although we are monitoring GitHub issues, we aren't actively maintaining the codebase, so community involvement and contributions are really appreciated going forward. We're aiming to review pull requests on a weekly basis.\n\n## Getting Set Up\n### Demo Builds\nTo preview the app you can download from the app store on your device by visiting: \nhttps://flutter.gskinner.com/folio/#g-download\n\n### Installation\n\nIf you're new to Flutter the first thing you'll need is to follow the [setup instructions](https://flutter.dev/docs/get-started/install). \n\nOnce Flutter is setup, you can use the latest `stable` channel:\n * Run `flutter channel stable`\n * Run `flutter upgrade`\n\nOnce you're on `dev` and desktop is enabled, you're ready to run the app:\n* `flutter run -d windows`\n* `flutter run -d macos`\n* `flutter run -d linux`\n* `flutter run -d android`\n* `flutter run -d ios`\n* `flutter run -d web`\n\nIf you re-start your IDE, you should also see a new launch option for your current desktop platform.\n\n### Client Keys\n\nGoogle Sign In is required in order to run the app (unless running with [cached data](#running-with-cached-data)). The app uses the Google People API, and you will need to provide your own Google OAuth 2 client credentials in the `/lib/api_keys.dart` file. \n\nFollow the instructions here to enable the People API and create credentials:\n- https://developers.google.com/people/v1/getting-started\n- https://developers.google.com/people/v1/how-tos/authorizing\nIn your Google API Console, ensure you add the People API scope, \"https://www.googleapis.com/auth/contacts\". Please see below for details:\n- https://developers.google.com/identity/protocols/oauth2/scopes#people\n\nTo optionally fetch social data for your contacts, add your own API keys for those as well:\n- Twitter: https://developer.twitter.com/en/docs/basics/getting-started\n- GitHub: https://developer.github.com/v3/guides/basics-of-authentication/\n\nAlthough the Twitter and GitHub keys are optional, they are recommended. Otherwise the app will not be able to fetch tweets and GitHub calls will be subject to a rate limit (https://developer.github.com/v3/#rate-limiting).\n\n### Web Builds\nIf you're building for web:\n- Edit `/web/index.html` to include your web credentials (web client Id) `<meta name=\"google-signin-client_id\" content=\"YOUR_GOOGLE_SIGN_IN_OAUTH_CLIENT_ID.apps.googleusercontent.com\">`.\n- This is needed for Google Sign In to work on web builds. For more details, see https://pub.dev/packages/google_sign_in_web\n\n#### CORS Proxy\nFor Twitter support to work on web builds, it is necessary to use a CORS proxy. You can set up a proxy on your own domain, or else run a localhost instance with `proxy/app.js`.\n\nIf setting up on your domain, ensure you have enabled https (https://letsencrypt.org/). Once you have the security certificate, edit `proxy/app.js` and insert your cert and key. This is not necessary if running a localhost instance.\n\nAfter the proxy is set up, edit `services/twitter_rest_service.dart` to point to your running proxy instance (e.g. \"https://my-proxy.com\", \"http://localhost\", etc.)\n\nFor more information, see https://github.com/Rob--W/cors-anywhere\n\n## Running With Cached Data\nIf you simply want to see the app running, it is possible to run the app using cached data:\n- Run the app at least once, to create your data folders\n- Extract the _contents_ of /sample_data.zip to the newly created data folder on your machine:\n  - Windows: \\Users\\\\[USER]\\AppData\\Roaming\\flokk\n  - Linux: $HOME/.local/share/flokk-contacts\n  - macOS: /Users/[USER]/Library/Containers/app.flokk/Data/Library/Application Support/app.flokk\n- Overwrite any files that are there\n- Launch the app again, it should now sign in, and load with existing data.\n- If you sign out, your saved data will be wiped and you will need to repeat the process.\n\nNote: This is meant as a 'read-only' mode so you can quickly explore all the widgets and features of the app. Updates, deletes, etc are not expected to work.\n\n## Test & Build\nDebug Builds\n- Use `flutter run -d DEVICE_ID`  to deploy a test build\n- To get a list of available DEVICE_ID, use `flutter run`\n- Typical values are: `windows`, `linux`, `macos`, `chrome`\n- Add `--release` to deploy an optimized build\n\nRelease Builds\n- Use `flutter build PACKAGE_TYPE` to build a release package\n- To get a list of available PACKAGE_TYPE, use `flutter build`\n- Typical values are `windows`, `linux`, `apk`, `ios`\n- In order to build the snap package one must first run `lxd init` on your system if you haven't already.\n   ** Then execute `snapcraft --use-lxd` to create the snap from the flutter build\n\nForce Log In\n- The app uses a `kForceWebLogin` flag to force release builds to skip the oauth screen.\n- Add `--dart-define=flokk.forceWebLogin=true` to your build command to enable\n- E.g. `flutter build web --dart-define=flokk.forceWebLogin=true`\n\n## Desktop Runners\nThe /linux and /windows folders contain modifications and should not be upgraded to upstream without first verifying that each plugin works correctly with the new upstream code and any modifications are made.\n\nSince the desktop runners for this project may contain modifications, upgrades should not be made without first verifying that every plugin and embedder can be upgraded and that they remain compatible after an upgrade. Hopefully this will not be as much of an issue once Flutter's desktop support becomes more mature.\n\n--\n\nHappy Flokking!\n"
        },
        {
          "name": "flokk_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "marketing",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "releases",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample_data.zip",
          "type": "blob",
          "size": 35.9306640625,
          "content": null
        },
        {
          "name": "snap",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}