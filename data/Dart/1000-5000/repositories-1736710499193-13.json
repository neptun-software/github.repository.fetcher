{
  "metadata": {
    "timestamp": 1736710499193,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sass/dart-sass",
      "stars": 4013,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2490234375,
          "content": ".buildlog\n.DS_Store\n.idea\n.pub/\n.dart_tool/\n.settings/\n.sass-cache/\nbuild/\npackages\n.packages\npubspec.lock\npackage-lock.json\n/benchmark/source\nnode_modules/\ndist/\n/doc/api\n/pkg/*/doc/api\n/pkg/sass-parser/doc\n\n# Generated protocol buffer files.\n*.pb*.dart\n"
        },
        {
          "name": ".pubignore",
          "type": "blob",
          "size": 0.271484375,
          "content": "# This should be identical to .gitignore except that it doesn't exclude\n# generated Dart files.\n\n.buildlog\n.DS_Store\n.idea\n.pub/\n.dart_tool/\n.settings/\n.sass-cache/\nbuild/\npackages\n.packages\npubspec.lock\npackage-lock.json\n/benchmark/source\nnode_modules/\n/doc/api\n/pkg/*/doc/api\n"
        },
        {
          "name": ".test_config",
          "type": "blob",
          "size": 0.02734375,
          "content": "{ \n  \"test_package\": true\n}\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2451171875,
          "content": "# Below is a list of people and organizations that have contributed\n# to the project. Names should be added to the list like so:\n#\n#   Name/Organization <email address>\n\nGoogle Inc.\nMarks and Spencer Plc. John Harvey John.Harvey@marks-and-spencer.com\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 125.888671875,
          "content": "## 1.83.1\n\n* Fix a bug where `--quiet-deps` would get deactivated for `@content` blocks,\n  even when those blocks were entirely contained within dependencies.\n\n* Include deprecation IDs in deprecation warnings to make it easier to determine\n  what to pass to `--silence-deprecation` or `--fatal-deprecation`.\n\n## 1.83.0\n\n* Allow trailing commas in *all* argument and parameter lists.\n\n## 1.82.0\n\n### Command-Line Interface\n\n* Improve `--watch` mode reliability when making multiple changes at once, such\n  as checking out a different Git branch.\n\n* Parse the `calc-size()` function as a calculation now that it's supported in\n  some browsers.\n\n### Dart API\n\n* Add a `SassCalculation.calcSize()` function.\n\n## 1.81.1\n\n* No user-visible changes.\n\n## 1.81.0\n\n* Fix a few cases where deprecation warnings weren't being emitted for global\n  built-in functions whose names overlap with CSS calculations.\n\n* Add support for the CSS `round()` calculation with a single argument, as long\n  as that argument might be a unitless number.\n\n## 1.80.7\n\n### Embedded Host\n\n* Don't treat `0` as `undefined` for the `green` and `blue` channels in the\n  `LegacyColor` constructor.\n\n## 1.80.6\n\n### Command-Line Interface\n\n* Make `@parcel/watcher` an optional dependency so this can still be installed\n  on operating systems where it's unavailable.\n\n## 1.80.5\n\n### Embedded Host\n\n* Don't produce phantom `@import` deprecations when using an importer with the\n  legacy API.\n\n## 1.80.4\n\n* No user-visible changes.\n\n## 1.80.3\n\n* Fix a bug where `@import url(\"...\")` would crash in plain CSS files.\n\n* Improve consistency of how warnings are emitted by different parts of the\n  compiler. This should result in minimal user-visible changes, but different\n  types of warnings should now respond more reliably to flags like `--quiet`,\n  `--verbose`, and `--silence-deprecation`.\n\n## 1.80.2\n\n* Fix a bug where deprecation warnings were incorrectly emitted for the\n  plain-CSS `invert()` function.\n\n## 1.80.1\n\n* Fix a bug where repeated deprecation warnings were not automatically limited.\n\n## 1.80.0\n\n* `@import` is now officially deprecated, as are global built-in functions that\n  are available within built-in modules. See [the Sass blog post] for more\n  details on the deprecation process.\n\n[the Sass blog post]: https://sass-lang.com/blog/import-is-deprecated/\n\n### Embedded Host\n\n* Fix an error that would sometimes occur when deprecation warnings were\n  emitted when using a custom importer with the legacy API.\n\n## 1.79.6\n\n* Fix a bug where Sass would add an extra `*/` after loud comments with\n  whitespace after an explicit `*/` in the indented syntax.\n\n* **Potentially breaking bug fix:** Adding text after an explicit `*/` in the\n  indented syntax is now an error, rather than silently generating invalid CSS.\n\n### Embedded Host\n\n* Properly export the `SassBoolean` type.\n\n## 1.79.5\n\n* Changes to how `selector.unify()` and `@extend` combine selectors:\n\n  * The relative order of pseudo-classes (like `:hover`) and pseudo-elements\n    (like `::before`) within each original selector is now preserved when\n    they're combined.\n\n  * Pseudo selectors are now consistently placed at the end of the combined\n    selector, regardless of which selector they came from. Previously, this\n    reordering only applied to pseudo-selectors in the second selector.\n\n* Tweak the color transformation matrices for OKLab and OKLCH to match the\n  newer, more accurate values in the CSS spec.\n\n* Fix a slight inaccuracy case when converting to `srgb-linear` and\n  `display-p3`.\n\n* **Potentially breaking bug fix:** `math.unit()` now wraps multiple denominator\n  units in parentheses. For example, `px/(em*em)` instead of `px/em*em`.\n\n### Command-Line Interface\n\n* Use `@parcel/watcher` to watch the filesystem when running from JavaScript and\n  not using `--poll`. This should mitigate more frequent failures users have\n  been seeing since version 4.0.0 of Chokidar, our previous watching tool, was\n  released.\n\n### JS API\n\n* Fix `SassColor.interpolate()` to allow an undefined `options` parameter, as\n  the types indicate.\n\n### Embedded Sass\n\n* Properly pass missing color channel values to and from custom functions.\n\n## 1.79.4\n\n### JS API\n\n* Fix a bug where passing `green` or `blue` to `color.change()` for legacy\n  colors would fail.\n\n## 1.79.3\n\n* Update the `$channel` parameter in the suggested replacement for\n  `color.red()`, `color.green()`, `color.blue()`, `color.hue()`,\n  `color.saturation()`, `color.lightness()`, `color.whiteness()`, and\n  `color.blackness()` to use a quoted string.\n\n## 1.79.2\n\n* Add a `$space` parameter to the suggested replacement for `color.red()`,\n  `color.green()`, `color.blue()`, `color.hue()`, `color.saturation()`,\n  `color.lightness()`, `color.whiteness()`, and `color.blackness()`.\n\n* Update deprecation warnings for the legacy JS API to include a link to\n  [relevant documentation].\n\n[relevant documentation]: https://sass-lang.com/d/legacy-js-api\n\n## 1.79.1\n\n* No user-visible changes.\n\n## 1.79.0\n\n* **Breaking change**: Passing a number with unit `%` to the `$alpha` parameter\n  of `color.change()`, `color.adjust()`, `change-color()`, and `adjust-color()`\n  is now interpreted as a percentage, instead of ignoring the unit. For example,\n  `color.change(red, $alpha: 50%)` now returns `rgb(255 0 0 / 0.5)`.\n\n* **Potentially breaking compatibility fix**: Sass no longer rounds RGB channels\n  to the nearest integer. This means that, for example, `rgb(0 0 1) != rgb(0 0\n  0.6)`. This matches the latest version of the CSS spec and browser behavior.\n\n* **Potentially breaking compatibility fix**: Passing large positive or negative\n  values to `color.adjust()` can now cause a color's channels to go outside that\n  color's gamut. In most cases this will currently be clipped by the browser and\n  end up showing the same color as before, but once browsers implement gamut\n  mapping it may produce a different result.\n\n* Add support for CSS Color Level 4 [color spaces]. Each color value now tracks\n  its color space along with the values of each channel in that color space.\n  There are two general principles to keep in mind when dealing with new color\n  spaces:\n\n  1. With the exception of legacy color spaces (`rgb`, `hsl`, and `hwb`), colors\n     will always be emitted in the color space they were defined in unless\n     they're explicitly converted.\n\n  2. The `color.to-space()` function is the only way to convert a color to\n     another color space. Some built-in functions may do operations in a\n     different color space, but they'll always convert back to the original space\n     afterwards.\n\n* `rgb` colors can now have non-integer channels and channels outside the normal\n  gamut of 0-255. These colors are always emitted using the `rgb()` syntax so\n  that modern browsers that are being displayed on wide-gamut devices can\n  display the most accurate color possible.\n\n* Add support for all the new color syntax defined in Color Level 4, including:\n\n  * `oklab()`, `oklch()`, `lab()`, and `lch()` functions;\n  * a top-level `hwb()` function that matches the space-separated CSS syntax;\n  * and a `color()` function that supports the `srgb`, `srgb-linear`,\n    `display-p3`, `a98-rgb`, `prophoto-rgb`, `rec2020`, `xyz`, `xyz-d50`, and\n    `xyz-d65` color spaces.\n\n* Add new functions for working with color spaces:\n\n  * `color.to-space($color, $space)` converts `$color` to the given `$space`. In\n    most cases this conversion is losslessâ€”the color may end up out-of-gamut for\n    the destination color space, but browsers will generally display it as best\n    they can regardless. However, the `hsl` and `hwb` spaces can't represent\n    out-of-gamut colors and so will be clamped.\n\n  * `color.channel($color, $channel, $space: null)` returns the value of the\n    given `$channel` in `$color`, after converting it to `$space` if necessary.\n    It should be used instead of the old channel-specific functions such as\n    `color.red()` and `color.hue()`.\n\n  * `color.same($color1, $color2)` returns whether two colors represent the same\n    color even across color spaces. It differs from `$color1 == $color2` because\n    `==` never consider colors in different (non-legacy) spaces as equal.\n\n  * `color.is-in-gamut($color, $space: null)` returns whether `$color` is\n    in-gamut for its color space (or `$space` if it's passed).\n\n  * `color.to-gamut($color, $space: null)` returns `$color` constrained to its\n    space's gamut (or to `$space`'s gamut, if passed). This is generally not\n    recommended since even older browsers will display out-of-gamut colors as\n    best they can, but it may be necessary in some cases.\n\n  * `color.space($color)`: Returns the name of `$color`'s color space.\n\n  * `color.is-legacy($color)`: Returns whether `$color` is in a legacy color\n    space (`rgb`, `hsl`, or `hwb`).\n\n  * `color.is-powerless($color, $channel, $space: null)`: Returns whether the\n    given `$channel` of `$color` is powerless in `$space` (or its own color\n    space). A channel is \"powerless\" if its value doesn't affect the way the\n    color is displayed, such as hue for a color with 0 chroma.\n\n  * `color.is-missing($color, $channel)`: Returns whether `$channel`'s value is\n    missing in `$color`. Missing channels can be explicitly specified using the\n    special value `none` and can appear automatically when `color.to-space()`\n    returns a color with a powerless channel. Missing channels are usually\n    treated as 0, except when interpolating between two colors and in\n    `color.mix()` where they're treated as the same value as the other color.\n\n* Update existing functions to support color spaces:\n\n  * `hsl()` and `color.hwb()` no longer forbid out-of-bounds values. Instead,\n    they follow the CSS spec by clamping them to within the allowed range.\n\n  * `color.change()`, `color.adjust()`, and `color.scale()` now support all\n    channels of all color spaces. However, if you want to modify a channel\n    that's not in `$color`'s own color space, you have to explicitly specify the\n    space with the `$space` parameter. (For backwards-compatibility, this\n    doesn't apply to legacy channels of legacy colorsâ€”for example, you can still\n    adjust an `rgb` color's saturation without passing `$space: hsl`).\n\n  * `color.mix()` and `color.invert()` now support the standard CSS algorithm\n    for interpolating between two colors (the same one that's used for gradients\n    and animations). To use this, pass the color space to use for interpolation\n    to the `$method` parameter. For polar color spaces like `hsl` and `oklch`,\n    this parameter also allows you to specify how hue interpolation is handled.\n\n  * `color.complement()` now supports a `$space` parameter that indicates which\n    color space should be used to take the complement.\n\n  * `color.grayscale()` now operates in the `oklch` space for non-legacy colors.\n\n  * `color.ie-hex-str()` now automatically converts its color to the `rgb` space\n    and gamut-maps it so that it can continue to take colors from any color\n    space.\n\n[color spaces]: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n\n* The following functions are now deprecated, and uses should be replaced with\n  the new color-space-aware functions defined above:\n\n  * The `color.red()`, `color.green()`, `color.blue()`, `color.hue()`,\n    `color.saturation()`, `color.lightness()`, `color.whiteness()`, and\n    `color.blackness()` functions, as well as their global counterparts, should\n    be replaced with calls to `color.channel()`.\n\n  * The global `adjust-hue()`, `saturate()`, `desaturate()`, `lighten()`,\n    `darken()`, `transaprentize()`, `fade-out()`, `opacify()`, and `fade-in()`\n    functions should be replaced by `color.adjust()` or `color.scale()`.\n\n* Add a `global-builtin` future deprecation, which can be opted-into with the\n  `--future-deprecation` flag or the `futureDeprecations` option in the JS or\n  Dart API. This emits warnings when any global built-in functions that are\n  now available in `sass:` modules are called. It will become active by default\n  in an upcoming release alongside the `@import` deprecation.\n\n### Dart API\n\n* Added a `ColorSpace` class which represents the various color spaces defined\n  in the CSS spec.\n\n* Added `SassColor.space` which returns a color's color space.\n\n* Added `SassColor.channels` and `.channelsOrNull` which returns a list\n  of channel values, with missing channels converted to 0 or exposed as null,\n  respectively.\n\n* Added `SassColor.isLegacy`, `.isInGamut`, `.channel()`, `.isChannelMissing()`,\n  `.isChannelPowerless()`, `.toSpace()`, `.toGamut()`, `.changeChannels()`, and\n  `.interpolate()` which do the same thing as the Sass functions of the\n  corresponding names.\n\n* `SassColor.rgb()` now allows out-of-bounds and non-integer arguments.\n\n* `SassColor.hsl()` and `.hwb()` now allow out-of-bounds arguments.\n\n* Added `SassColor.hwb()`, `.srgb()`, `.srgbLinear()`, `.displayP3()`,\n  `.a98Rgb()`, `.prophotoRgb()`, `.rec2020()`, `.xyzD50()`, `.xyzD65()`,\n  `.lab()`, `.lch()`, `.oklab()`, `.oklch()`, and `.forSpace()` constructors.\n\n* Deprecated `SassColor.red`, `.green`, `.blue`, `.hue`, `.saturation`,\n  `.lightness`, `.whiteness`, and `.blackness` in favor of\n  `SassColor.channel()`.\n\n* Deprecated `SassColor.changeRgb()`, `.changeHsl()`, and `.changeHwb()` in\n  favor of `SassColor.changeChannels()`.\n\n* Added `SassNumber.convertValueToUnit()` as a shorthand for\n  `SassNumber.convertValue()` with a single numerator.\n\n* Added `InterpolationMethod` and `HueInterpolationMethod` which collectively\n  represent the method to use to interpolate two colors.\n\n### JS API\n\n* While the legacy API has been deprecated since we released the modern API, we\n  now emit warnings when the legacy API is used to make sure users are aware\n  that it will be removed in Dart Sass 2.0.0. In the meantime, you can silence\n  these warnings by passing `legacy-js-api` in `silenceDeprecations` when using\n  the legacy API.\n\n* Modify `SassColor` to accept a new `space` option, with support for all the\n  new color spaces defined in Color Level 4.\n\n* Add `SassColor.space` which returns a color's color space.\n\n* Add `SassColor.channels` and `.channelsOrNull` which returns a list of channel\n  values, with missing channels converted to 0 or exposed as null, respectively.\n\n* Add `SassColor.isLegacy`, `.isInGamut()`, `.channel()`, `.isChannelMissing()`,\n  `.isChannelPowerless()`, `.toSpace()`, `.toGamut()`, `.change()`, and\n  `.interpolate()` which do the same thing as the Sass functions of the\n  corresponding names.\n\n* Deprecate `SassColor.red`, `.green`, `.blue`, `.hue`, `.saturation`,\n  `.lightness`, `.whiteness`, and `.blackness` in favor of\n  `SassColor.channel()`.\n\n### Embedded Sass\n\n* Add `Color` SassScript value, with support for all the new color spaces\n  defined in Color Level 4.\n\n* Remove `RgbColor`, `HslColor` and `HwbColor` SassScript values.\n\n## 1.78.0\n\n* The `meta.feature-exists` function is now deprecated. This deprecation is\n  named `feature-exists`.\n\n* Fix a crash when using `@at-root` without any queries or children in the\n  indented syntax.\n\n### JS API\n\n* Backport the deprecation options (`fatalDeprecations`, `futureDeprecations`,\n  and `silenceDeprecations`) to the legacy JS API. The legacy JS API is itself\n  deprecated, and you should move off of it if possible, but this will allow\n  users of bundlers and other tools that are still using the legacy API to\n  still control deprecation warnings.\n\n* Fix a bug where accessing `SourceSpan.url` would crash when a relative URL was\n  passed to the Sass API.\n\n### Embedded Sass\n\n* Explicitly expose a `sass` executable from the `sass-embedded` npm package.\n  This was intended to be included in 1.63.0, but due to the way\n  platform-specific dependency executables are installed it did not work as\n  intended. Now users can run `npx sass` for local installs or just `sass` when\n  `sass-embedded` is installed globally.\n\n* Add linux-riscv64, linux-musl-riscv64, and android-riscv64 support for the\n  `sass-embedded` npm package.\n\n* Fix an edge case where the Dart VM could hang when shutting down when requests\n  were in flight.\n\n* Fix a race condition where the embedded host could fail to shut down if it was\n  closed around the same time a new compilation was started.\n\n* Fix a bug where parse-time deprecation warnings could not be controlled by\n  the deprecation options in some circumstances.\n\n## 1.77.8\n\n* No user-visible changes.\n\n## 1.77.7\n\n* Declarations that appear after nested rules are deprecated, because the\n  semantics Sass has historically used are different from the semantics\n  specified by CSS. In the future, Sass will adopt the standard CSS semantics.\n\n  See [the Sass website](https://sass-lang.com/d/mixed-decls) for details.\n\n* **Potentially breaking bug fix:** `//` in certain places such as unknown\n  at-rule values was being preserved in the CSS output, leading to potentially\n  invalid CSS. It's now properly parsed as a silent comment and omitted from the\n  CSS output.\n\n## 1.77.6\n\n* Fix a few cases where comments and occasionally even whitespace wasn't allowed\n  between the end of Sass statements and the following semicolon.\n\n## 1.77.5\n\n* Fully trim redundant selectors generated by `@extend`.\n\n## 1.77.4\n\n### Embedded Sass\n\n* Support passing `Version` input for `fatalDeprecations` as string over\n  embedded protocol.\n\n* Fix a bug in the JS Embedded Host where `Version` could be incorrectly accepted\n  as input for `silenceDeprecations` and `futureDeprecations` in pure JS.\n\n## 1.77.3\n\n### Dart API\n\n* `Deprecation.duplicateVariableFlags` has been deprecated and replaced with\n  `Deprecation.duplicateVarFlags` to make it consistent with the\n  `duplicate-var-flags` name used on the command line and in the JS API.\n\n## 1.77.2\n\n* Don't emit deprecation warnings for functions and mixins beginning with `__`.\n\n* Allow user-defined functions whose names begin with `_` and otherwise look\n  like vendor-prefixed functions with special CSS syntax.\n\n### Command-Line Interface\n\n* Properly handle the `--silence-deprecation` flag.\n\n* Handle the `--fatal-deprecation` and `--future-deprecation` flags for\n  `--interactive` mode.\n\n## 1.77.1\n\n* Fix a crash that could come up with importers in certain contexts.\n\n## 1.77.0\n\n* *Don't* throw errors for at-rules in keyframe blocks.\n\n## 1.76.0\n\n* Throw errors for misplaced statements in keyframe blocks.\n\n* Mixins and functions whose names begin with `--` are now deprecated for\n  forwards-compatibility with the in-progress CSS functions and mixins spec.\n  This deprecation is named `css-function-mixin`.\n\n## 1.75.0\n\n* Fix a bug in which stylesheet canonicalization could be cached incorrectly\n  when custom importers or the Node.js package importer made decisions based on\n  the URL of the containing stylesheet.\n\n### JS API\n\n* Allow `importer` to be passed without `url` in `StringOptionsWithImporter`.\n\n## 1.74.1\n\n* No user-visible changes.\n\n## 1.74.0\n\n### JS API\n\n* Add a new top-level `deprecations` object, which contains various\n  `Deprecation` objects that define the different types of deprecation used by\n  the Sass compiler and can be passed to the options below.\n\n* Add a new `fatalDeprecations` compiler option that causes the compiler to\n  error if any deprecation warnings of the provided types are encountered. You\n  can also pass in a `Version` object to treat all deprecations that were active\n  in that Dart Sass version as fatal.\n\n* Add a new `futureDeprecations` compiler option that allows you to opt-in to\n  certain deprecations early (currently just `import`).\n\n* Add a new `silenceDeprecations` compiler option to ignore any deprecation\n  warnings of the provided types.\n\n### Command-Line Interface\n\n* Add a new `--silence-deprecation` flag, which causes the compiler to ignore\n  any deprecation warnings of the provided types.\n\n* Previously, if a future deprecation was passed to `--fatal-deprecation` but\n  not `--future-deprecation`, it would be treated as fatal despite not being\n  enabled. Both flags are now required to treat a future deprecation as fatal\n  with a warning emitted if `--fatal-deprecation` is passed without\n  `--future-deprecation`, matching the JS API's behavior.\n\n### Dart API\n\n* The `compile` methods now take in a `silenceDeprecations` parameter, which\n  causes the compiler to ignore any deprecation warnings of the provided types.\n\n* Add `Deprecation.obsoleteIn` to match the JS API. This is currently null for\n  all deprecations, but will be used once some deprecations become obsolete in\n  Dart Sass 2.0.0.\n\n* **Potentially breaking bug fix:** Fix a bug where `compileStringToResultAsync`\n  ignored `fatalDeprecations` and `futureDeprecations`.\n\n* The behavior around making future deprecations fatal mentioned in the CLI\n  section above has also been changed in the Dart API.\n\n## 1.73.0\n\n* Add support for nesting in plain CSS files. This is not processed by Sass at\n  all; it's emitted exactly as-is in the CSS.\n\n* In certain circumstances, the current working directory was unintentionally\n  being made available as a load path. This is now deprecated. Anyone relying on\n  this should explicitly pass in `.` as a load path or `FilesystemImporter('.')`\n  as the current importer.\n\n* Add linux-riscv64 and windows-arm64 releases.\n\n### Command-Line Interface\n\n* Fix a bug where absolute `file:` URLs weren't loaded for files compiled via\n  the command line unless an unrelated load path was also passed.\n\n* Fix a bug where `--update` would always update files that were specified via\n  absolute path unless an unrelated load path was also passed.\n\n### Dart API\n\n* Add `FilesystemImporter.noLoadPath`, which is a `FilesystemImporter` that can\n  load absolute `file:` URLs and resolve URLs relative to the base file but\n  doesn't load relative URLs from a load path.\n\n* `FilesystemImporter.cwd` is now deprecated. Either use\n  `FilesystemImporter.noLoadPath` if you weren't intending to rely on the load\n  path, or `FilesystemImporter('.')` if you were.\n\n## 1.72.0\n\n* Support adjacent `/`s without whitespace in between when parsing plain CSS\n  expressions.\n\n* Allow the Node.js `pkg:` importer to load Sass stylesheets for `package.json`\n  `exports` field entries without extensions.\n\n* When printing suggestions for variables, use underscores in variable names\n  when the original usage used underscores.\n\n### JavaScript API\n\n* Properly resolve `pkg:` imports with the Node.js package importer when\n  arguments are passed to the JavaScript process.\n\n## 1.71.1\n\n### Command-Line Interface\n\n* Ship the musl Linux release with the proper Dart executable.\n\n### JavaScript API\n\n* Export the `NodePackageImporter` class in ESM mode.\n\n* Allow `NodePackageImporter` to locate a default directory even when the\n  entrypoint is an ESM module.\n\n### Dart API\n\n* Make passing a null argument to `NodePackageImporter()` a static error rather\n  than just a runtime error.\n\n### Embedded Sass\n\n* In the JS Embedded Host, properly install the musl Linux embedded compiler\n  when running on musl Linux.\n\n## 1.71.0\n\nFor more information about `pkg:` importers, see [the\nannouncement][pkg-importers] on the Sass blog.\n\n[pkg-importers]: https://sass-lang.com/blog/announcing-pkg-importers\n\n### Command-Line Interface\n\n* Add a `--pkg-importer` flag to enable built-in `pkg:` importers. Currently\n  this only supports the Node.js package resolution algorithm, via\n  `--pkg-importer=node`. For example, `@use \"pkg:bootstrap\"` will load\n  `node_modules/bootstrap/scss/bootstrap.scss`.\n\n### JavaScript API\n\n* Add a `NodePackageImporter` importer that can be passed to the `importers`\n  option. This loads files using the `pkg:` URL scheme according to the Node.js\n  package resolution algorithm. For example, `@use \"pkg:bootstrap\"` will load\n  `node_modules/bootstrap/scss/bootstrap.scss`. The constructor takes a single\n  optional argument, which indicates the base directory to use when locating\n  `node_modules` directories. It defaults to\n  `path.dirname(require.main.filename)`.\n\n### Dart API\n\n* Add a `NodePackageImporter` importer that can be passed to the `importers`\n  option. This loads files using the `pkg:` URL scheme according to the Node.js\n  package resolution algorithm. For example, `@use \"pkg:bootstrap\"` will load\n  `node_modules/bootstrap/scss/bootstrap.scss`. The constructor takes a single\n  argument, which indicates the base directory to use when locating\n  `node_modules` directories.\n\n## 1.70.0\n\n### JavaScript API\n\n* Add a `sass.initCompiler()` function that returns a `sass.Compiler` object\n  which supports `compile()` and `compileString()` methods with the same API as\n  the global Sass object. On the Node.js embedded host, each `sass.Compiler`\n  object uses a single long-lived subprocess, making compiling multiple\n  stylesheets much more efficient.\n\n* Add a `sass.initAsyncCompiler()` function that returns a `sass.AsyncCompiler`\n  object which supports `compileAsync()` and `compileStringAsync()` methods with\n  the same API as the global Sass object. On the Node.js embedded host, each\n  `sass.AsynCompiler` object uses a single long-lived subprocess, making\n  compiling multiple stylesheets much more efficient.\n\n### Embedded Sass\n\n* Support the `CompileRequest.silent` field. This allows compilations with no\n  logging to avoid unnecessary request/response cycles.\n\n* The Dart Sass embedded compiler now reports its name as \"dart-sass\" rather\n  than \"Dart Sass\", to match the JS API's `info` field.\n\n## 1.69.7\n\n### Embedded Sass\n\n* In the JS Embedded Host, properly install the x64 Dart Sass executable on\n  ARM64 Windows.\n\n## 1.69.6\n\n* Produce better output for numbers with complex units in `meta.inspect()` and\n  debugging messages.\n\n* Escape U+007F DELETE when serializing strings.\n\n* When generating CSS error messages to display in-browser, escape all code\n  points that aren't in the US-ASCII region. Previously only code points U+0100\n  LATIN CAPITAL LETTER A WITH MACRON were escaped.\n\n* Provide official releases for musl LibC and for Android.\n\n* Don't crash when running `meta.apply()` in asynchronous mode.\n\n### JS API\n\n* Fix a bug where certain exceptions could produce `SourceSpan`s that didn't\n  follow the documented `SourceSpan` API.\n\n## 1.69.5\n\n### JS API\n\n* Compatibility with Node.js 21.0.0.\n\n## 1.69.4\n\n* No user-visible changes.\n\n## 1.69.3\n\n### Embedded Sass\n\n* Fix TypeScript type locations in `package.json`.\n\n## 1.69.2\n\n### JS API\n\n* Fix a bug where Sass crashed when running in the browser if there was a global\n  variable named `process`.\n\n## 1.69.1\n\n* No user-visible changes.\n\n## 1.69.0\n\n* Add a `meta.get-mixin()` function that returns a mixin as a first-class Sass\n  value.\n\n* Add a `meta.apply()` mixin that includes a mixin value.\n\n* Add a `meta.module-mixins()` function which returns a map from mixin names in\n  a module to the first-class mixins that belong to those names.\n\n* Add a `meta.accepts-content()` function which returns whether or not a mixin\n  value can take a content block.\n\n* Add support for the relative color syntax from CSS Color 5. This syntax\n  cannot be used to create Sass color values. It is always emitted as-is in the\n  CSS output.\n\n### Dart API\n\n* Deprecate `Deprecation.calcInterp` since it was never actually emitted as a\n  deprecation.\n\n### Embedded Sass\n\n* Fix a rare race condition where the embedded compiler could freeze when a\n  protocol error was immediately followed by another request.\n\n## 1.68.0\n\n* Fix the source spans associated with the `abs-percent` deprecation.\n\n### JS API\n\n* Non-filesystem importers can now set the `nonCanonicalScheme` field, which\n  declares that one or more URL schemes (without `:`) will never be used for\n  URLs returned by the `canonicalize()` method.\n\n* Add a `containingUrl` field to the `canonicalize()` and `findFileUrl()`\n  methods of importers, which is set to the canonical URL of the stylesheet that\n  contains the current load. For filesystem importers, this is always set; for\n  other importers, it's set only if the current load has no URL scheme, or if\n  its URL scheme is declared as non-canonical by the importer.\n\n### Dart API\n\n* Add `AsyncImporter.isNonCanonicalScheme`, which importers (async or sync) can\n  use to indicate that a certain URL scheme will never be used for URLs returned\n  by the `canonicalize()` method.\n\n* Add `AsyncImporter.containingUrl`, which is set during calls to the\n  `canonicalize()` method to the canonical URL of the stylesheet that contains\n  the current load. This is set only if the current load has no URL scheme, or\n  if its URL scheme is declared as non-canonical by the importer.\n\n### Embedded Sass\n\n* The `CalculationValue.interpolation` field is deprecated and will be removed\n  in a future version. It will no longer be set by the compiler, and if the host\n  sets it it will be treated as equivalent to `CalculationValue.string` except\n  that `\"(\"` and `\")\"` will be added to the beginning and end of the string\n  values.\n\n* Properly include TypeScript types in the `sass-embedded` package.\n\n## 1.67.0\n\n* All functions defined in CSS Values and Units 4 are now once again parsed as\n  calculation objects: `round()`, `mod()`, `rem()`, `sin()`, `cos()`, `tan()`,\n  `asin()`, `acos()`, `atan()`, `atan2()`, `pow()`, `sqrt()`, `hypot()`,\n  `log()`, `exp()`, `abs()`, and `sign()`.\n\n  Unlike in 1.65.0, function calls are _not_ locked into being parsed as\n  calculations or plain Sass functions at parse-time. This means that\n  user-defined functions will take precedence over CSS calculations of the same\n  name. Although the function names `calc()` and `clamp()` are still forbidden,\n  users may continue to freely define functions whose names overlap with other\n  CSS calculations (including `abs()`, `min()`, `max()`, and `round()` whose\n  names overlap with global Sass functions).\n\n* **Breaking change**: As a consequence of the change in calculation parsing\n  described above, calculation functions containing interpolation are now parsed\n  more strictly than before. However, _almost_ all interpolations that would\n  have produced valid CSS will continue to work. The only exception is\n  `#{$variable}%` which is not valid in Sass and is no longer valid in\n  calculations. Instead of this, either use `$variable` directly and ensure it\n  already has the `%` unit, or write `($variable * 1%)`.\n\n* **Potentially breaking bug fix**: The importer used to load a given file is no\n  longer used to load absolute URLs that appear in that file. This was\n  unintented behavior that contradicted the Sass specification. Absolute URLs\n  will now correctly be loaded only from the global importer list. This applies\n  to the modern JS API, the Dart API, and the embedded protocol.\n\n### Embedded Sass\n\n* Substantially improve the embedded compiler's performance when compiling many\n  files or files that require many importer or function call round-trips with\n  the embedded host.\n\n## 1.66.1\n\n### JS API\n\n* Fix a bug where Sass compilation could crash in strict mode if passed a\n  callback that threw a string, boolean, number, symbol, or bignum.\n\n## 1.66.0\n\n* **Breaking change:** Drop support for the additional CSS calculations defined\n  in CSS Values and Units 4. Custom Sass functions whose names overlapped with\n  these new CSS functions were being parsed as CSS calculations instead, causing\n  an unintentional breaking change outside our normal [compatibility policy] for\n  CSS compatibility changes.\n\n  Support will be added again in a future version, but only after Sass has\n  emitted a deprecation warning for all functions that will break for at least\n  three months prior to the breakage.\n\n## 1.65.1\n\n* Update abs-percent deprecatedIn version to `1.65.0`.\n\n## 1.65.0\n\n* All functions defined in CSS Values and Units 4 are now parsed as calculation\n  objects: `round()`, `mod()`, `rem()`, `sin()`, `cos()`, `tan()`, `asin()`,\n  `acos()`, `atan()`, `atan2()`, `pow()`, `sqrt()`, `hypot()`, `log()`, `exp()`,\n  `abs()`, and `sign()`.\n\n* Deprecate explicitly passing the `%` unit to the global `abs()` function. In\n  future releases, this will emit a CSS abs() function to be resolved by the\n  browser. This deprecation is named `abs-percent`.\n\n## 1.64.3\n\n### Dart API\n\n* Deprecate explicitly passing `null` as the alpha channel for\n  `SassColor.rgb()`, `SassColor.hsl()`, and `SassColor.hwb()`. Omitting the\n  `alpha` channel is still allowed. In future releases, `null` will be used to\n  indicate a [missing component]. This deprecation is named `null-alpha`.\n\n  [missing component]: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#missing_color_components\n\n* Include protocol buffer definitions when uploading the `sass` package to pub.\n\n### JS API\n\n* Deprecate explicitly passing `null` as the alpha channel for `new\n  SassColor()`. Omitting the `alpha` channel or passing `undefined` for it is\n  still allowed. In future releases, `null` will be used to indicate a [missing\n  component]. This deprecation is named `null-alpha`.\n\n  [missing component]: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#missing_color_components\n\n  (Note that this was already prohibited by the TypeScript types, but in\n  practice prior to this `null` was treated as `1`.)\n\n## 1.64.2\n\n* No user-visible changes.\n\n## 1.64.1\n\n### Embedded Sass\n\n* Fix a bug where a valid `SassCalculation.clamp()` with less than 3 arguments\n  would throw an error.\n\n## 1.64.0\n\n* Comments that appear before or between `@use` and `@forward` rules are now\n  emitted in source order as much as possible, instead of always being emitted\n  after the CSS of all module dependencies.\n\n* Fix a bug where an interpolation in a custom property name crashed if the file\n  was loaded by a `@use` nested in an `@import`.\n\n### JavaScript API\n\n* Add a new `SassCalculation` type that represents the calculation objects added\n  in Dart Sass 1.40.0.\n\n* Add `Value.assertCalculation()`, which returns the value if it's a\n  `SassCalculation` and throws an error otherwise.\n\n* Produce a better error message when an environment that supports some Node.js\n  APIs loads the browser entrypoint but attempts to access the filesystem.\n\n### Embedded Sass\n\n* Fix a bug where nested relative `@imports` failed to load when using the\n  deprecated functions `render` or `renderSync` and those relative imports were\n  loaded multiple times across different files.\n\n## 1.63.6\n\n### JavaScript API\n\n* Fix `import sass from 'sass'` again after it was broken in the last release.\n\n### Embedded Sass\n\n* Fix the `exports` declaration in `package.json`.\n\n## 1.63.5\n\n### JavaScript API\n\n* Fix a bug where loading the package through both CJS `require()` and ESM\n  `import` could crash on Node.js.\n\n### Embedded Sass\n\n* Fix a deadlock when running at high concurrency on 32-bit systems.\n\n* Fix a race condition where the embedded compiler could deadlock or crash if a\n  compilation ID was reused immediately after the compilation completed.\n\n## 1.63.4\n\n### JavaScript API\n\n* Re-enable support for `import sass from 'sass'` when loading the package from\n  an ESM module in Node.js. However, this syntax is now deprecated; ESM users\n  should use `import * as sass from 'sass'` instead.\n\n  On the browser and other ESM-only platforms, only `import * as sass from\n  'sass'` is supported.\n\n* Properly export the legacy API values `TRUE`, `FALSE`, `NULL`, and `types` from\n  the ECMAScript module API.\n\n### Embedded Sass\n\n* Fix a race condition where closing standard input while requests are in-flight\n  could sometimes cause the process to hang rather than shutting down\n  gracefully.\n\n* Properly include the root stylesheet's URL in the set of loaded URLs when it\n  fails to parse.\n\n## 1.63.3\n\n### JavaScript API\n\n* Fix loading Sass as an ECMAScript module on Node.js.\n\n## 1.63.2\n\n* No user-visible changes.\n\n## 1.63.1\n\n* No user-visible changes.\n\n## 1.63.0\n\n### JavaScript API\n\n* Dart Sass's JS API now supports running in the browser. Further details and\n  instructions for use are in [the README](README.md#dart-sass-in-the-browser).\n\n### Embedded Sass\n\n* The Dart Sass embedded compiler is now included as part of the primary Dart\n  Sass distribution, rather than a separate executable. To use the embedded\n  compiler, just run `sass --embedded` from any Sass executable (other than the\n  pure JS executable).\n\n  The Node.js embedded host will still be distributed as the `sass-embedded`\n  package on npm. The only change is that it will now provide direct access to a\n  `sass` executable with the same CLI as the `sass` package.\n\n* The Dart Sass embedded compiler now uses version 2.0.0 of the Sass embedded\n  protocol. See [the spec][embedded-protocol-spec] for a full description of the\n  protocol, and [the changelog][embedded-protocol-changelog] for a summary of\n  changes since version 1.2.0.\n\n  [embedded-protocol-spec]: https://github.com/sass/sass/blob/main/spec/embedded-protocol.md\n  [embedded-protocol-changelog]: https://github.com/sass/sass/blob/main/EMBEDDED_PROTOCOL_CHANGELOG.md\n\n* The Dart Sass embedded compiler now runs multiple simultaneous compilations in\n  parallel, rather than serially.\n\n## 1.62.1\n\n* Fix a bug where `:has(+ &)` and related constructs would drop the leading\n  combinator.\n\n## 1.62.0\n\n* Deprecate the use of multiple `!global` or `!default` flags on the same\n  variable. This deprecation is named `duplicate-var-flags`.\n\n* Allow special numbers like `var()` or `calc()` in the global functions:\n  `grayscale()`, `invert()`, `saturate()`, and `opacity()`. These are also\n  native CSS `filter` functions. This is in addition to number values which were\n  already allowed.\n\n* Fix a cosmetic bug where an outer rule could be duplicated after nesting was\n  resolved, instead of re-using a shared rule.\n\n## 1.61.0\n\n* **Potentially breaking change:** Drop support for End-of-Life Node.js 12.\n\n* Fix remaining cases for the performance regression introduced in 1.59.0.\n\n### Embedded Sass\n\n* The JS embedded host now loads files from the working directory when using the\n  legacy API.\n\n## 1.60.0\n\n* Add support for the `pi`, `e`, `infinity`, `-infinity`, and `NaN` constants in\n  calculations. These will be interpreted as the corresponding numbers.\n\n* Add support for unknown constants in calculations. These will be interpreted\n  as unquoted strings.\n\n* Serialize numbers with value `infinity`, `-infinity`, and `NaN` to `calc()`\n  expressions rather than CSS-invalid identifiers. Numbers with complex units\n  still can't be serialized.\n\n## 1.59.3\n\n* Fix a performance regression introduced in 1.59.0.\n\n* The NPM release of 1.59.0 dropped support for Node 12 without actually\n  indicating so in its pubspec. This release temporarily adds back support so\n  that the latest Sass version that declares it supports Node 12 actually does\n  so. However, Node 12 is now end-of-life, so we will drop support for it\n  properly in an upcoming release.\n\n## 1.59.2\n\n* No user-visible changes.\n\n## 1.59.1\n\n* No user-visible changes.\n\n## 1.59.0\n\n### Command Line Interface\n\n* Added a new `--fatal-deprecation` flag that lets you treat a deprecation\n  warning as an error. You can pass an individual deprecation ID\n  (e.g. `slash-div`) or you can pass a Dart Sass version to treat all\n  deprecations initially emitted in that version or earlier as errors.\n\n* New `--future-deprecation` flag that lets you opt into warning for use of\n  certain features that will be deprecated in the future. At the moment, the\n  only option is `--future-deprecation=import`, which will emit warnings for\n  Sass `@import` rules, which are not yet deprecated, but will be in the future.\n\n### Dart API\n\n* New `Deprecation` enum, which contains the different current and future\n  deprecations used by the new CLI flags.\n\n* The `compile` methods now take in `fatalDeprecations` and `futureDeprecations`\n  parameters, which work similarly to the CLI flags.\n\n## 1.58.4\n\n* Pull `@font-face` to the root rather than bubbling the style rule selector\n  inwards.\n\n* Improve error messages for invalid CSS values passed to plain CSS functions.\n\n* Improve error messages involving selectors.\n\n### Embedded Sass\n\n* Improve the performance of starting up a compilation.\n\n## 1.58.3\n\n* No user-visible changes.\n\n## 1.58.2\n\n### Command Line Interface\n\n* Add a timestamp to messages printed in `--watch` mode.\n\n* Print better `calc()`-based suggestions for `/`-as-division expression that\n  contain calculation-incompatible constructs like unary minus.\n\n## 1.58.1\n\n* Emit a unitless hue when serializing `hsl()` colors. The `deg` unit is\n  incompatible with IE, and while that officially falls outside our\n  compatibility policy, it's better to lean towards greater compatibility.\n\n## 1.58.0\n\n* Remove sourcemap comments from Sass sources. The generated sourcemap comment\n  for the compiled CSS output remains unaffected.\n\n* Fix a bug in `@extend` logic where certain selectors with three or more\n  combinators were incorrectly considered superselectors of similar selectors\n  with fewer combinators, causing them to be incorrectly trimmed from the\n  output.\n\n* Produce a better error message for a number with a leading `+` or `-`, a\n  decimal point, but no digits.\n\n* Produce a better error message for a nested property whose name starts with\n  `--`.\n\n* Fix a crash when a selector ends in an escaped backslash.\n\n* Add the relative length units from CSS Values 4 and CSS Contain 3 as known\n  units to validate bad computation in `calc`.\n\n### Command Line Interface\n\n* The `--watch` flag will now track loads through calls to `meta.load-css()` as\n  long as their URLs are literal strings without any interpolation.\n\n## 1.57.1\n\n* No user-visible changes.\n\n## 1.57.0\n\n* Add a `split($string, $separator, $limit: null)` function to `sass:string`\n  that splits a string into separate substrings based on a separator string.\n\n### JavaScript API\n\n* **Potentially breaking bug fix**: Custom functions in both the modern and\n  legacy API now properly reject signatures with whitespace between the function\n  name and parentheses.\n\n* Custom functions in the legacy API now allow signatures with whitespace before\n  the function name, to match a bug in Node Sass.\n\n### Dart API\n\n* **Potentially breaking bug fix**: `Callable.fromSignature()` and\n  `AsyncCallable.fromSignature()` now reject signatures with whitespace between\n  the function name and parentheses.\n\n## 1.56.2\n\n### Embedded Sass\n\n* The embedded compiler now supports version 1.2.0 of [the embedded\n  protocol](https://github.com/sass/embedded-protocol).\n\n## 1.56.1\n\n### Embedded Sass\n\n* Importer results now validate that `contents` is actually a string and whether\n  `sourceMapUrl` is an absolute URL.\n\n## 1.56.0\n\n* **Potentially breaking change:** To match the CSS spec, SassScript expressions\n  beginning with `not` or `(` are no longer supported at the beginning of\n  parenthesized sections of media queries. For example,\n\n  ```scss\n  @media (width >= 500px) and (not (grid))\n  ```\n\n  will now be emitted unchanged, instead of producing\n\n  ```scss\n  @media (width >= 500px) and (false)\n  ```\n\n  See [the Sass website](https://sass-lang.com/d/media-logic) for details.\n\n* **Potentially breaking bug fix:** Angle units like `rad` or `turn` are now\n  properly converted to equivalent `deg` values for `hsl()`, `hsla()`,\n  `adjust-hue()`, `color.adjust()`, and `color.change()`.\n\n  See [the Sass website](https://sass-lang.com/d/function-units#hue) for\n  details.\n\n* Fix indentation for selectors that span multiple lines in a `@media` query.\n\n* Emit a deprecation warning when passing `$alpha` values with units to\n  `color.adjust()` or `color.change()`. This will be an error in Dart Sass\n  2.0.0.\n\n  See [the Sass website](https://sass-lang.com/d/function-units#alpha) for\n  details.\n\n* Emit a deprecation warning when passing a `$weight` value with no units or\n  with units other than `%` to `color.mix()`. This will be an error in Dart Sass\n  2.0.0.\n\n  See [the Sass website](https://sass-lang.com/d/function-units#weight) for\n  details.\n\n* Emit a deprecation warning when passing `$n` values with units to `list.nth()`\n  or `list.set-nth()`. This will be an error in Dart Sass 2.0.0.\n\n  See [the Sass website](https://sass-lang.com/d/function-units#index) for\n  details.\n\n* Improve existing deprecation warnings to wrap `/`-as-division suggestions in\n  `calc()` expressions.\n\n* Properly mark the warning for passing numbers with units to `random()` as a\n  deprecation warning.\n\n* Fix a bug where `@extend` could behave unpredicatably when used along with\n  `meta.load-css()` and shared modules that contained no CSS themselves but\n  loaded CSS from other modules.\n\n### Dart API\n\n* Emit a deprecation warning when passing a `sassIndex` with units to\n  `Value.sassIndexToListIndex()`. This will be an error in Dart Sass 2.0.0.\n\n### JS API\n\n* Importer results now validate whether `contents` is actually a string type.\n\n* Importer result argument errors are now rendered correctly.\n\n## 1.55.0\n\n* **Potentially breaking bug fix:** Sass numbers are now universally stored as\n  64-bit floating-point numbers, rather than sometimes being stored as integers.\n  This will generally make arithmetic with very large numbers more reliable and\n  more consistent across platforms, but it does mean that numbers between nine\n  quadrillion and nine quintillion will no longer be represented with full\n  accuracy when compiling Sass on the Dart VM.\n\n* **Potentially breaking bug fix:** Sass equality is now properly [transitive].\n  Two numbers are now considered equal (after doing unit conversions) if they\n  round to the same `1e-11`th. Previously, numbers were considered equal if they\n  were within `1e-11` of one another, which led to some circumstances where `$a\n  == $b` and `$b == $c` but `$a != $b`.\n\n[transitive]: https://en.wikipedia.org/wiki/Transitive_property\n\n* **Potentially breaking bug fix:** Various functions in `sass:math` no longer\n  treat floating-point numbers that are very close (but not identical) to\n  integers as integers. Instead, these functions now follow the floating-point\n  specification exactly. For example, `math.pow(0.000000000001, -1)` now returns\n  `1000000000000` instead of `Infinity`.\n\n* Emit a deprecation warning for `$a -$b` and `$a +$b`, since these look like\n  they could be unary operations but they're actually parsed as binary\n  operations. Either explicitly write `$a - $b` or `$a (-$b)`. See\n  https://sass-lang.com/d/strict-unary for more details.\n\n### Dart API\n\n* Add an optional `argumentName` parameter to `SassScriptException()` to make it\n  easier to throw exceptions associated with particular argument names.\n\n* Most APIs that previously returned `num` now return `double`. All APIs\n  continue to _accept_ `num`, although in Dart 2.0.0 these APIs will be changed\n  to accept only `double`.\n\n### JS API\n\n* Fix a bug in which certain warning spans would not have their properties\n  accessible by the JS API.\n\n## 1.54.9\n\n* Fix an incorrect span in certain `@media` query deprecation warnings.\n\n## 1.54.8\n\n* No user-visible changes.\n\n## 1.54.7\n\n* Add support for 32-bit ARM releases on Linux.\n\n## 1.54.6\n\n* Fix a bug where a `@media` query could be incorrectly omitted from a\n  stylesheet if it had multiple levels of nested `@media` queries within it\n  *and* the inner queries were mergeable but the outer query was not.\n\n## 1.54.5\n\n* Properly consider `a ~ c` to be a superselector of `a ~ b ~ c` and `a + b +\n  c`.\n\n* Properly consider `b > c` to be a superselector of `a > b > c`, and similarly\n  for other combinators.\n\n* Properly calculate specificity for selector pseudoclasses.\n\n* Deprecate use of `random()` when `$limit` has units to make it explicit that\n   `random()` currently ignores units. A future version will no longer ignore\n  units.\n\n* Don't throw an error when the same module is `@forward`ed multiple times\n  through a configured module.\n\n### Embedded Sass\n\n* Rather than downloading the embedded compiler for the local platform on\n  install, the `sass-embedded` npm package now declares optional dependencies on\n  platform-specific embedded compiler packages.\n\n## 1.54.4\n\n* Improve error messages when passing incorrect units that are also\n  out-of-bounds to various color functions.\n\n## 1.54.3\n\n* Release a native ARM64 executable for Mac OS.\n\n## 1.54.2\n\n* No user-visible changes.\n\n## 1.54.1\n\n* When unifying selectors for `@extend` and `selector.unify()`, ensure that\n  `:root`, `:scope`, `:host`, and `:host-context` only appear at the beginning\n  of complex selectors.\n\n## 1.54.0\n\n* Deprecate selectors with leading or trailing combinators, or with multiple\n  combinators in a row. If they're included in style rules after nesting is\n  resolved, Sass will now produce a deprecation warning and, in most cases, omit\n  the selector. Leading and trailing combinators can still be freely used for\n  nesting purposes.\n\n  See https://sass-lang.com/d/bogus-combinators for more details.\n\n* Add partial support for new media query syntax from Media Queries Level 4. The\n  only exception are logical operations nested within parentheses, as these were\n  previously interpreted differently as SassScript expressions.\n\n  A parenthesized media condition that begins with `not` or an opening\n  parenthesis now produces a deprecation warning. In a future release, these\n  will be interpreted as plain CSS instead.\n\n* Deprecate passing non-`deg` units to `color.hwb()`'s `$hue` argument.\n\n* Fix a number of bugs when determining whether selectors with pseudo-elements\n  are superselectors.\n\n* Treat `*` as a superselector of all selectors.\n\n### Dart API\n\n* Add a top-level `fakeFromImport()` function for testing custom importers\n  that use `AsyncImporter.fromImport`.\n\n### JS API\n\n* Add a `charset` option that controls whether or not Sass emits a\n  `@charset`/BOM for non-ASCII stylesheets.\n\n* Fix Sass npm package types for TS 4.7+ Node16 and NodeNext module resolution.\n\n## 1.53.0\n\n* Add support for calling `var()` with an empty second argument, such as\n  `var(--side, )`.\n\n### JS API\n\n* Fix a bug where `meta.load-css()` would sometimes resolve relative URLs\n  incorrectly when called from a mixin using the legacy JS API.\n\n### Embedded Sass\n\n* Respect npm's proxy settings when downloading the embedded Sass compiler.\n\n## 1.52.3\n\n* Fix crash when trailing loud comments (`/* ... */`) appear twice in a row\n  across two different imports which themselves imported the same file each.\n\n## 1.52.2\n\n* Preserve location of trailing loud comments (`/* ... */`) instead of pushing\n  the comment to the next line.\n\n## 1.52.1\n\n### Command Line Interface\n\n* Fix a bug where `--watch` mode would close immediately in TTY mode. This was\n  caused by our change to close `--watch` when stdin was closed *outside of* TTY\n  mode, which has been reverted for now while we work on a fix.\n\n## 1.52.0\n\n* Add support for arbitrary modifiers at the end of plain CSS imports, in\n  addition to the existing `supports()` and media queries. Sass now allows any\n  sequence of identifiers of functions after the URL of an import for forwards\n  compatibility with future additions to the CSS spec.\n\n* Fix an issue where source locations tracked through variable references could\n  potentially become incorrect.\n\n* Fix a bug where a loud comment in the source can break the source map when\n  embedding the sources, when using the command-line interface or the legacy JS\n  API.\n\n### JS API\n\n* `SassNumber.assertUnit()` and `SassNumber.assertNoUnits()` now correctly\n  return the number called on when it passes the assertion.\n\n## 1.51.0\n\n* **Potentially breaking change**: Change the order of maps returned by\n  `map.deep-merge()` to match those returned by `map.merge()`. All keys that\n  appeared in the first map will now be listed first in the same order they\n  appeared in that map, followed by any new keys added from the second map.\n\n* Improve the string output of some AST nodes in error messages.\n\n## 1.50.1\n\n### Embedded Sass\n\n* The JS embedded host and the embedded compiler will now properly avoid\n  resolving imports relative to the current working directory unless `'.'` is\n  passed as a load path.\n\n* Fix a bug in the JS embedded host's implementation of the legacy JS API where\n  imports that began with `/` could crash on Windows.\n\n## 1.50.0\n\n* `@extend` now treats [`:where()`] the same as `:is()`.\n\n[`:where()`]: https://developer.mozilla.org/en-US/docs/Web/CSS/:where\n\n### Command Line Interface\n\n* Closing the standard input stream will now cause the `--watch` command to stop\n  running.\n\n### Embedded Sass\n\n* Fix a bug where the JS embedded host crashed when invoking a legacy importer\n  after resolving a relative filesystem import.\n\n* Improve error messages when returning non-`Object` values from legacy\n  importers.\n\n## 1.49.11\n\n* Add support for 64-bit ARM releases on Linux.\n\n### Embedded Sass\n\n* The embedded compiler now correctly sets the `id` field for all\n  `OutboundMessage`s.\n\n## 1.49.10\n\n* Quiet deps mode now silences compiler warnings in mixins and functions that\n  are defined in dependencies even if they're invoked from application\n  stylesheets.\n\n* In expanded mode, Sass will now emit colors using `rgb()`, `rbga()`, `hsl()`,\n  and `hsla()` function notation if they were defined using the corresponding\n  notation. As per our browser support policy, this change was only done once\n  95% of browsers were confirmed to support this output format, and so is not\n  considered a breaking change.\n\n  Note that this output format is intended for human readability and not for\n  interoperability with other tools. As always, Sass targets the CSS\n  specification, and any tool that consumes Sass's output should parse all\n  colors that are supported by the CSS spec.\n\n* Fix a bug in which a color written using the four- or eight-digit hex format\n  could be emitted as a hex color rather than a format with higher browser\n  compatibility.\n\n* Calculations are no longer simplified within supports declarations\n\n## 1.49.9\n\n### Embedded Sass\n\n* Fixed a bug where the legacy API could crash when passed an empty importer\n  list.\n\n## 1.49.8\n\n* Fixed a bug where some plain CSS imports would not be emitted.\n\n### JS API\n\n* Fix a bug where inspecting the Sass module in the Node.js console crashed on\n  Node 17.\n\n### Embedded Sass\n\n* Fix a bug where source map URLs were incorrectly generated when passing\n  importers to the legacy API.\n\n## 1.49.7\n\n### Embedded Sass\n\n* First stable release the `sass-embedded` npm package that contains the Node.js\n  Embedded Host.\n\n* First stable release of the `sass_embedded` pub package that contains the\n  Embedded Dart Sass compiler.\n\n## 1.49.6\n\n* No user-visible changes.\n\n## 1.49.5\n\n* No user-visible changes.\n\n## 1.49.4\n\n* No user-visible changes.\n\n## 1.49.3\n\n* No user-visible changes.\n\n## 1.49.2\n\n* No user-visible changes.\n\n## 1.49.1\n\n* Stop supporting non-LTS Node.js versions.\n\n## 1.49.0\n\n* Fix a bug in `string.insert` with certain negative indices.\n\n### JS API\n\n* Add support for the `sourceMapIncludeSources` option in the new JS API.\n\n#### TypeScript Declarations\n\n* Fix a bug where `LegacyPluginThis.options.linefeed` was typed to return\n  abbreviations when it actually returned literal linefeed characters.\n\n## 1.48.0\n\n### JS API\n\n* **Potentially breaking bug fix:** Match the specification of the new JS API by\n  setting `LegacyResult.map` to `undefined` rather than `null`.\n\n#### TypeScript Declarations\n\n* Add a declaration for the `NULL` constant.\n\n## 1.47.0\n\n### JS API\n\n#### TypeScript Declarations\n\n* Add declarations for the `TRUE` and `FALSE` constants.\n\n## 1.46.0\n\n### JS API\n\n* **Potentially breaking bug fix:** Match the specification of the new JS API by\n  passing `undefined` rather than `null` to `Logger.warn()` for an unset `span`.\n\n#### TypeScript Declarations\n\n* Add a declaration for the `LegacyPluginThis.options.context` field.\n\n* Update the definition of `LegacyAsyncFunction` to include explicit definitions\n  with zero through six arguments before the `done` parameter. This makes it\n  possible for TypeScript users to pass in callbacks that take a specific number\n  of arguments, rather than having to declare a callback that takes an arbitrary\n  number.\n\n* Add a declaration for `types.Error`, a legacy API class that can be returned\n  by asynchronous functions to signal asynchronous errors.\n\n* Add a `LegacyAsyncFunctionDone` type for the `done` callback that's passed to\n  `LegacyAsyncFunction`.\n\n## 1.45.2\n\n### JS API\n\n* **Potentially breaking bug fix:** Change the default value of the `separator`\n  parameter for `new SassArgumentList()` to `','` rather than `null`. This\n  matches the API specification.\n\n## 1.45.1\n\n* **Potentially breaking bug fix:** Properly parse custom properties in\n  `@supports` conditions. Note that this means that SassScript expressions on\n  the right-hand side of custom property `@supports` queries now need to be\n  interpolated, as per https://sass-lang.com/d/css-vars.\n\n* **Potentially breaking bug fix:** Fix a bug where `inspect()` was not\n  properly printing nested, empty, bracketed lists.\n\n## 1.45.0\n\n### JS API\n\nThis release includes an entirely new JavaScript API, designed to be more\nidiomatic, performant, and usable. The old API will continue to be supported\nuntil Dart Sass 2.0.0, but it is now considered deprecated and should be avoided\nfor new code.\n\nThe new API includes:\n\n* `compile()` and `compileAsync()` functions that take Sass file paths and\n  return the result of compiling them to CSS. The async function returns a\n  `Promise` rather than using a callback-based API.\n\n* `compileString()` and `compileStringAsync()` functions that take a string of\n  Sass source and compiles it to CSS. As above, the async function returns a\n  `Promise`.\n\n* A new importer API that more closely matches the Sass specification's logic\n  for resolving loads. This makes it much easier for Sass to cache information\n  across `@import` and `@use` rules, which substantially improves performance\n  for applications that rely heavily on repeated `@import`s.\n\n* A new custom function API, including much more usable JS representations of\n  Sass value types complete with type-assertion functions, easy map and list\n  lookups, and compatibility with the [`immutable`] package. **Unlike in the\n  legacy API,** function callbacks now take one argument which contains an array\n  of Sass values (rather than taking a separate JS argument for each Sass\n  argument).\n\n[`immutable`]: https://immutable-js.com/\n\nFor full documentation of this API, please see [the Sass website][js-api].\n\n[js-api]: https://sass-lang.com/documentation/js-api\n\nThis release also adds TypeScript type definitions.\n\n## 1.44.0\n\n* Suggest `calc()` as an alternative in `/`-as-division deprecation messages.\n\n### Dart API\n\n* Add `SassNumber.convert()` and `SassNumber.convertValue()`. These work like\n  `SassNumber.coerce()` and `SassNumber.coerceValue()`, except they don't treat\n  unitless numbers as universally compatible.\n\n* Fix a bug where `SassNumber.coerceToMatch()` and\n  `SassNumber.coerceValueToMatch()` wouldn't coerce single-unit numbers to\n  match unitless numbers.\n\n## 1.43.5\n\n* Fix a bug where calculations with different operators were incorrectly\n  considered equal.\n\n* Properly parse attribute selectors with empty namespaces.\n\n### JS API\n\n* Print more detailed JS stack traces. This is mostly useful for the Sass team's\n  own debugging purposes.\n\n## 1.43.4\n\n### JS API\n\n* Fix a bug where the `logger` option was ignored for the `render()` function.\n\n## 1.43.3\n\n* Improve performance.\n\n## 1.43.2\n\n* Improve the error message when the default namespace of a `@use` rule is not\n  a valid identifier.\n\n## 1.43.1\n\n* No user-visible changes.\n\n## 1.43.0\n\n### JS API\n\n* Add support for the `logger` option. This takes an object that can define\n  `warn` or `debug` methods to add custom handling for messages emitted by the\n  Sass compiler. See [the JS API docs] for details.\n\n  [the JS API docs]: https://sass-lang.com/documentation/js-api/interfaces/Logger\n\n* Add a `Logger.silent` object that can be passed to the `logger` option to\n  silence all messages from the Sass compiler.\n\n## 1.42.1\n\n* Fix a bug where Sass variables and function calls in calculations weren't\n  being resolved correctly if there was a parenthesized interpolation elsewhere\n  in the file.\n\n## 1.42.0\n\n* `min()` and `max()` expressions are once again parsed as calculations as long\n  as they contain only syntax that's allowed in calculation expressions. To\n  avoid the backwards-compatibility issues that were present in 1.40.0, they now\n  allow unitless numbers to be mixed with numbers with units just like the\n  global `min()` and `max()` functions. Similarly, `+` and `-` operations within\n  `min()` and `max()` functions allow unitless numbers to be mixed with numbers\n  with units.\n\n## 1.41.1\n\n* Preserve parentheses around `var()` functions in calculations, because they\n  could potentially be replaced with sub-expressions that might need to be\n  parenthesized.\n\n## 1.41.0\n\n* Calculation values can now be combined with strings using the `+` operator.\n  This was an error in 1.40.0, but this broke stylesheets that were relying on\n  `$value + \"\"` expressions to generically convert values to strings. (Note that\n  the Sass team recommends the use of `\"#{$value}\"` or `inspect($value)` for\n  that use-case.)\n\n* The `selector.unify()` function now correctly returns `null` when one selector\n  is a `:host` or `:host-context` and the other is a selector that's guaranteed\n  to be within the current shadow DOM. The `@extend` logic has been updated\n  accordingly as well.\n\n* Fix a bug where extra whitespace in `min()`, `max()`, `clamp()`, and `calc()`\n  expressions could cause bogus parse errors.\n\n* Fix a bug where the right-hand operand of a `-` in a calculation could\n  incorrectly be stripped of parentheses.\n\n### Dart API\n\n* `SassCalculation.plus()` now allows `SassString` arguments.\n\n## 1.40.1\n\n* **Potentially breaking bug fix:** `min()` and `max()` expressions outside of\n  calculations now behave the same way they did in 1.39.2, returning unquoted\n  strings if they contain no Sass-specific features and calling the global\n  `min()` and `max()` functions otherwise. Within calculations, they continue to\n  behave how they did in 1.40.0.\n\n  This fixes an unintended breaking change added in 1.40.0, wherein passing a\n  unitless number and a number without units to `min()` or `max()` now produces\n  an error. Since this breakage affects a major Sass library, we're temporarily\n  reverting support for `min()` and `max()` calculations while we work on\n  designing a longer-term fix.\n\n## 1.40.0\n\n* Add support for first-class `calc()` expressions (as well as `clamp()` and\n  plain-CSS `min()` and `max()`). This means:\n\n  * `calc()` expressions will be parsed more thoroughly, and errors will be\n    highlighted where they weren't before. **This may break your stylesheets,**\n    but only if they were already producing broken CSS.\n\n  * `calc()` expressions will be simplified where possible, and may even return\n    numbers if they can be simplified away entirely.\n\n  * `calc()` expressions that can't be simplified to numbers return a new data\n    type known as \"calculations\".\n\n  * Sass variables and functions can now be used in `calc()` expressions.\n\n  * New functions `meta.calc-name()` and `meta.calc-args()` can now inspect\n    calculations.\n\n### Dart API\n\n* Add a new value type, `SassCalculation`, that represents calculations.\n\n* Add new `CalculationOperation`, `CalculationOperator`, and\n  `CalculationInterpolation` types to represent types of arguments that may\n  exist as part of a calculation.\n\n* Add a new `Value.assertCalculation()` method.\n\n* Add a new `Number.hasCompatibleUnits()` method.\n\n## 1.39.2\n\n* Fix a bug where configuring with `@use ... with` would throw an error when\n  that variable was defined in a module that also contained `@forward ... with`.\n\n## 1.39.1\n\n* Partial fix for a bug where `@at-root` does not work properly in nested\n  imports that contain `@use` rules. If the only `@use` rules in the nested\n  import are for built-in modules, `@at-root` should now work properly.\n\n## 1.39.0\n\n### JS API\n\n* Add a `charset` option that controls whether or not Sass emits a\n  `@charset`/BOM for non-ASCII stylesheets.\n\n## 1.38.2\n\n* No user-visible changes\n\n## 1.38.1\n\n* No user-visible changes\n\n## 1.38.0\n\n* In expanded mode, emit characters in Unicode private-use areas as escape\n  sequences rather than literal characters.\n\n* Fix a bug where quotes would be omitted for an attribute selector whose value\n  was a single backslash.\n\n* Properly consider numbers that begin with `.` as \"plain CSS\" for the purposes\n  of parsing plain-CSS `min()` and `max()` functions.\n\n* Allow `if` to be used as an unquoted string.\n\n* Properly parse backslash escapes within `url()` expressions.\n\n* Fix a couple bugs where `@extend`s could be marked as unsatisfied when\n  multiple identical `@extend`s extended selectors across `@use` rules.\n\n### Command Line Interface\n\n* Strip CRLF newlines from snippets of the original stylesheet that are included\n  in the output when an error occurs.\n\n### JS API\n\n* Don't crash when a Windows path is returned by a custom Node importer at the\n  same time as file contents.\n\n* Don't crash when an error occurs in a stylesheet loaded via a custom importer\n  with a custom URL scheme.\n\n### Dart API\n\n* Add a `SassArgumentList.keywordsWithoutMarking` getter to access the keyword\n  arguments of an argument list without marking them accessed.\n\n## 1.37.5\n\n* No user-visible changes.\n\n## 1.37.4\n\n* No user-visible changes.\n\n## 1.37.3\n\n* No user-visible changes.\n\n## 1.37.2\n\n* No user-visible changes.\n\n## 1.37.1\n\n* No user-visible changes.\n\n## 1.37.0\n\n### Dart API\n\n* **Potentially breaking bug fix:** `SassNumber.asSlash`,\n  `SassNumber.withSlash()`, and `SassNumber.withoutSlash()` have been marked as\n  `@internal`. They were never intended to be used outside the `sass` package.\n\n* **Potentially breaking bug fix:** `SassException` has been marked as `@sealed`\n  to formally indicate that it's not intended to be extended outside of the\n  `sass` package.\n\n* Add a `Value.withListContents()` method that returns a new Sass list with the\n  same list separator and brackets as the current value, interpreted as a list.\n\n## 1.36.0\n\n### Dart API\n\n* Added `compileToResult()`, `compileStringToResult()`,\n  `compileToResultAsync()`, and `compileStringToResultAsync()` methods. These\n  are intended to replace the existing `compile*()` methods, which are now\n  deprecated. Rather than returning a simple string, these return a\n  `CompileResult` object, which will allow us to add additional information\n  about the compilation without having to introduce further deprecations.\n\n  * Instead of passing a `sourceMaps` callback to `compile*()`, pass\n    `sourceMaps: true` to `compile*ToResult()` and access\n    `CompileResult.sourceMap`.\n\n  * The `CompileResult` object exposes a `loadedUrls` object which lists the\n    canonical URLs accessed during a compilation. This information was\n    previously unavailable except through the JS API.\n\n## 1.35.2\n\n* **Potentially breaking bug fix**: Properly throw an error for Unicode ranges\n  that have too many `?`s after hexadecimal digits, such as `U+12345??`.\n\n* **Potentially breaking bug fix:** Fixed a bug where certain local variable\n  declarations nested within multiple `@if` statements would incorrectly\n  override a global variable. It's unlikely that any real stylesheets were\n  relying on this bug, but if so they can simply add `!global` to the variable\n  declaration to preserve the old behavior.\n\n* **Potentially breaking bug fix:** Fix a bug where imports of root-relative\n  URLs (those that begin with `/`) in `@import` rules would be passed to\n  both Dart and JS importers as `file:` URLs.\n\n* Properly support selector lists for the `$extendee` argument to\n  `selector.extend()` and `selector.replace()`.\n\n* Fix an edge case where `@extend` wouldn't affect a selector within a\n  pseudo-selector such as `:is()` that itself extended other selectors.\n\n* Fix a race condition where `meta.load-css()` could trigger an internal error\n  when running in asynchronous mode.\n\n### Dart API\n\n* Use the `@internal` annotation to indicate which `Value` APIs are available\n  for public use.\n\n## 1.35.1\n\n* Fix a bug where the quiet dependency flag didn't silence warnings in some\n  stylesheets loaded using `@import`.\n\n## 1.35.0\n\n* Fix a couple bugs that could prevent some members from being found in certain\n  files that use a mix of imports and the module system.\n\n* Fix incorrect recommendation for migrating division expressions that reference\n  namespaced variables.\n\n### JS API\n\n* Add a `quietDeps` option which silences compiler warnings from stylesheets\n  loaded through importers and load paths.\n\n* Add a `verbose` option which causes the compiler to emit all deprecation\n  warnings, not just 5 per feature.\n\n## 1.34.1\n\n* Fix a bug where `--update` would always compile any file that depends on a\n  built-in module.\n\n* Fix the URL for the `@-moz-document` deprecation message.\n\n* Fix a bug with `@for` loops nested inside property declarations.\n\n## 1.34.0\n\n* Don't emit the same warning in the same location multiple times.\n\n* Cap deprecation warnings at 5 per feature by default.\n\n### Command Line Interface\n\n* Add a `--quiet-deps` flag which silences compiler warnings from stylesheets\n  loaded through `--load-path`s.\n\n* Add a `--verbose` flag which causes the compiler to emit all deprecation\n  warnings, not just 5 per feature.\n\n### Dart API\n\n* Add a `quietDeps` argument to `compile()`, `compileString()`,\n  `compileAsync()`, and `compileStringAsync()` which silences compiler warnings\n  from stylesheets loaded through importers, load paths, and `package:` URLs.\n\n* Add a `verbose` argument to `compile()`, `compileString()`, `compileAsync()`,\n  and `compileStringAsync()` which causes the compiler to emit all deprecation\n  warnings, not just 5 per feature.\n\n## 1.33.0\n\n* Deprecate the use of `/` for division. The new `math.div()` function should be\n  used instead. See [this page][] for details.\n\n[this page]: https://sass-lang.com/documentation/breaking-changes/slash-div\n\n* Add a `list.slash()` function that returns a slash-separated list.\n\n* **Potentially breaking bug fix:** The heuristics around when potentially\n  slash-separated numbers are converted to slash-free numbersâ€”for example, when\n  `1/2` will be printed as `0.5` rather than `1/2`â€”have been slightly expanded.\n  Previously, a number would be made slash-free if it was passed as an argument\n  to a *user-defined function*, but not to a *built-in function*. Now it will be\n  made slash-free in both cases. This is a behavioral change, but it's unlikely\n  to affect any real-world stylesheets.\n\n* [`:is()`][] now behaves identically to `:matches()`.\n\n[`:is()`]: https://developer.mozilla.org/en-US/docs/Web/CSS/:is\n\n* Fix a bug where non-integer numbers that were very close to integer\n  values would be incorrectly formatted in CSS.\n\n* Fix a bug where very small number and very large negative numbers would be\n  incorrectly formatted in CSS.\n\n### JS API\n\n* The `this` context for importers now has a `fromImport` field, which is `true`\n  if the importer is being invoked from an `@import` and `false` otherwise.\n  Importers should only use this to determine whether to load [import-only\n  files].\n\n[import-only files]: https://sass-lang.com/documentation/at-rules/import#import-only-files\n\n### Dart API\n\n* Add an `Importer.fromImport` getter, which is `true` if the current\n  `Importer.canonicalize()` call comes from an `@import` rule and `false`\n  otherwise. Importers should only use this to determine whether to load\n  [import-only files].\n\n## 1.32.13\n\n* **Potentially breaking bug fix:** Null values in `@use` and `@forward`\n  configurations no longer override the `!default` variable, matching the\n  behavior of the equivalent code using `@import`.\n\n* Use the proper parameter names in error messages about `string.slice`\n\n## 1.32.12\n\n* Fix a bug that disallowed more than one module from extending the same\n  selector from a module if that selector itself extended a selector from\n  another upstream module.\n\n## 1.32.11\n\n* Fix a bug where bogus indented syntax errors were reported for lines that\n  contained only whitespace.\n\n## 1.32.10\n\n* No user-visible changes.\n\n## 1.32.9\n\n* Fix a typo in a deprecation warning.\n\n### JavaScript API\n\n* Drop support for Chokidar 2.x. This version was incompatible with Node 14, but\n  due to shortcomings in npm's version resolver sometimes still ended up\n  installed anyway. Only declaring support for 3.0.0 should ensure compatibility\n  going forward.\n\n### Dart API\n\n* Allow the null safety release of args and watcher.\n\n### Command Line Interface\n\n* Add a `-w` shorthand for the `--watch` flag.\n\n## 1.32.8\n\n* Update chokidar version for Node API tests.\n\n### JavaScript API\n\n* Allow a custom function to access the `render()` options object within its\n  local context, as `this.options`.\n\n## 1.32.7\n\n* Allow the null safety release of stream_transform.\n\n* Allow `@forward...with` to take arguments that have a `!default` flag without\n  a trailing comma.\n\n* Improve the performance of unitless and single-unit numbers.\n\n## 1.32.6\n\n### Node JS API\n\n* Fix Electron support when `nodeIntegration` is disabled.\n\n### Dart API\n\n* All range checks for `SassColor` constructors now throw `RangeError`s with\n  `start` and `end` set.\n\n## 1.32.5\n\n* **Potentially breaking bug fix:** When using `@for` with numbers that have\n  units, the iteration variable now matches the unit of the initial number. This\n  matches the behavior of Ruby Sass and LibSass.\n\n### Node JS API\n\n* Fix a few infrequent errors when calling `render()` with `fiber` multiple\n  times simultaneously.\n\n* Avoid possible mangled error messages when custom functions or importers throw\n  unexpected exceptions.\n\n* Fix Electron support when `nodeIntegration` is disabled.\n\n## 1.32.4\n\n* No user-visible changes.\n\n## 1.32.3\n\n* Optimize `==` for numbers that have different units.\n\n## 1.32.2\n\n* Print the actual number that was received in unit deprecation warnings for\n  color functions.\n\n## 1.32.1\n\n* Don't emit permissions errors on Windows and OS X when trying to determine the\n  real case of path names.\n\n## 1.32.0\n\n* Deprecate passing non-`%` numbers as lightness and saturation to `hsl()`,\n  `hsla()`, `color.adjust()`, and `color.change()`. This matches the CSS\n  specification, which also requires `%` for all lightness and saturation\n  parameters. See [the Sass website][color-units] for more details.\n\n* Deprecate passing numbers with units other than `deg` as the hue to `hsl()`,\n  `hsla()`, `adjust-hue()`, `color.adjust()`, and `color.change()`. Unitless\n  numbers *are* still allowed here, since they're allowed by CSS. See [the Sass\n  website][color-units] for more details.\n\n* Improve error messages about incompatible units.\n\n* Properly mark some warnings emitted by `sass:color` functions as deprecation\n  warnings.\n\n### Dart API\n\n* Rename `SassNumber.valueInUnits()` to `SassNumber.coerceValue()`. The old name\n  remains, but is now deprecated.\n\n* Rename `SassNumber.coerceValueToUnit()`, a shorthand for\n  `SassNumber.coerceValue()` that takes a single numerator unit.\n\n* Add `SassNumber.coerceToMatch()` and `SassNumber.coerceValueToMatch()`, which\n  work like `SassNumber.coerce()` and `SassNumber.coerceValue()` but take a\n  `SassNumber` whose units should be matched rather than taking the units\n  explicitly. These generate better error messages than `SassNumber.coerce()`\n  and `SassNumber.coerceValue()`.\n\n* Add `SassNumber.convertToMatch()` and `SassNumber.convertValueToMatch()`,\n  which work like `SassNumber.coerceToMatch()` and\n  `SassNumber.coerceValueToMatch()` except they throw exceptions when converting\n  unitless values to or from units.\n\n* Add `SassNumber.compatibleWithUnit()`, which returns whether the number can be\n  coerced to a single numerator unit.\n\n## 1.31.0\n\n* Add support for parsing `clamp()` as a special math function, the same way\n  `calc()` is parsed.\n\n* Properly load files in case-sensitive Windows directories with upper-case\n  names.\n\n## 1.30.0\n\n* Fix a bug where `@at-root (without: all)` wouldn't properly remove a\n  `@keyframes` context when parsing selectors.\n\n### Node JS API\n\n* The generated `main()` function in `sass.js` now returns a `Promise` that\n  completes when the executable is finished running.\n\n### Dart API\n\n* Fix a bug that prevented importers from returning null when loading from a\n  URL that they had already canonicalized.\n\n## 1.29.0\n\n* Support a broader syntax for `@supports` conditions, based on the latest\n  [Editor's Draft of CSS Conditional Rules 3]. Almost all syntax will be allowed\n  (with interpolation) in the conditions' parentheses, as well as function\n  syntax such as `@supports selector(...)`.\n\n[Editor's Draft of CSS Conditional Rules 3]: https://drafts.csswg.org/css-conditional-3/#at-supports\n\n## 1.28.0\n\n* Add a [`color.hwb()`] function to `sass:color` that can express colors in [HWB] format.\n\n[`color.hwb()`]: https://sass-lang.com/documentation/modules/color#hwb\n[HWB]: https://en.wikipedia.org/wiki/HWB_color_model\n\n* Add [`color.whiteness()`] and [`color.blackness()`] functions to `sass:color`\n  to get a color's [HWB] whiteness and blackness components.\n\n[`color.whiteness()`]: https://sass-lang.com/documentation/modules/color#whiteness\n[`color.blackness()`]: https://sass-lang.com/documentation/modules/color#blackness\n\n* Add `$whiteness` and `$blackness` parameters to [`color.adjust()`],\n  [`color.change()`], and [`color.scale()`] to modify a color's [HWB] whiteness\n  and blackness components.\n\n[`color.adjust()`]: https://sass-lang.com/documentation/modules/color#adjust\n[`color.change()`]: https://sass-lang.com/documentation/modules/color#change\n[`color.scale()`]: https://sass-lang.com/documentation/modules/color#scale\n\n### Dart API\n\n* Add [HWB] support to the `SassColor` class, including a `SassColor.hwb()`\n  constructor, `whiteness` and `blackness` getters, and a `changeHwb()` method.\n\n[HWB]: https://en.wikipedia.org/wiki/HWB_color_model\n\n## 1.27.2\n\n* No user-visible changes.\n\n## 1.27.1\n\n* **Potentially breaking bug fix:** `meta.load-css()` now correctly uses the\n  name `$url` for its first argument, rather than `$module`.\n\n* Don't crash when using `Infinity` or `NaN` as a key in a map.\n\n* Emit a proper parse error for a `=` with no right-hand side in a function.\n\n* Avoid going exponential on certain recursive `@extend` edge cases.\n\n## 1.27.0\n\n* Adds an overload to `map.merge()` that supports merging a nested map.\n\n  `map.merge($map1, $keys..., $map2)`: The `$keys` form a path to the nested map\n  in `$map1`, into which `$map2` gets merged.\n\n  See [the Sass documentation][map-merge] for more details.\n\n  [map-merge]: https://sass-lang.com/documentation/modules/map#merge\n\n* Adds an overloaded `map.set()` function.\n\n  `map.set($map, $key, $value)`: Adds to or updates `$map` with the specified\n  `$key` and `$value`.\n\n  `map.set($map, $keys..., $value)`: Adds to or updates a map that is nested\n  within `$map`. The `$keys` form a path to the nested map in `$map`, into\n  which `$value` is inserted.\n\n  See [the Sass documentation][map-set] for more details.\n\n  [map-set]: https://sass-lang.com/documentation/modules/map#set\n\n* Add support for nested maps to `map.get()`.\n  For example, `map.get((a: (b: (c: d))), a, b, c)` would return `d`.\n  See [the documentation][map-get] for more details.\n\n  [map-get]: https://sass-lang.com/documentation/modules/map#get\n\n* Add support for nested maps in `map.has-key`.\n  For example, `map.has-key((a: (b: (c: d))), a, b, c)` would return true.\n  See [the documentation][map-has-key] for more details.\n\n  [map-has-key]: https://sass-lang.com/documentation/modules/map#has-key\n\n* Add a `map.deep-merge()` function. This works like `map.merge()`, except that\n  nested map values are *also* recursively merged. For example:\n\n  ```\n  map.deep-merge(\n    (color: (primary: red, secondary: blue),\n    (color: (secondary: teal)\n  ) // => (color: (primary: red, secondary: teal))\n  ```\n\n  See [the Sass documentation][map-deep-merge] for more details.\n\n  [map-deep-merge]: https://sass-lang.com/documentation/modules/map#deep-merge\n\n* Add a `map.deep-remove()` function. This allows you to remove keys from\n  nested maps by passing multiple keys. For example:\n\n  ```\n  map.deep-remove(\n    (color: (primary: red, secondary: blue)),\n    color, primary\n  ) // => (color: (secondary: blue))\n  ```\n\n  See [the Sass documentation][map-deep-remove] for more details.\n\n  [map-deep-remove]: https://sass-lang.com/documentation/modules/map#deep-remove\n\n* Fix a bug where custom property values in plain CSS were being parsed as\n  normal property values.\n\n### Dart API\n\n* Add a `Value.tryMap()` function which returns the `Value` as a `SassMap` if\n  it's a valid map, or `null` otherwise. This allows function authors to safely\n  retrieve maps even if they're internally stored as empty lists, without having\n  to catch exceptions from `Value.assertMap()`.\n\n## 1.26.12\n\n* Fix a bug where nesting properties beneath a Sass-syntax custom property\n  (written as `#{--foo}: ...`) would crash.\n\n## 1.26.11\n\n* **Potentially breaking bug fix:** `selector.nest()` now throws an error\n  if the first arguments contains the parent selector `&`.\n\n* Fixes a parsing bug with inline comments in selectors.\n\n* Improve some error messages for edge-case parse failures.\n\n* Throw a proper error when the same built-in module is `@use`d twice.\n\n* Don't crash when writing `Infinity` in JS mode.\n\n* Produce a better error message for positional arguments following named\n  arguments.\n\n## 1.26.10\n\n* Fixes a bug where two adjacent combinators could cause an error.\n\n## 1.26.9\n\n* Use an updated version of `node_preamble` when compiling to JS.\n\n## 1.26.8\n\n* Fixes an error when emitting source maps to stdout.\n\n## 1.26.7\n\n* No user-visible changes.\n\n## 1.26.6\n\n* Fix a bug where escape sequences were improperly recognized in `@else` rules.\n\n### JavaScript API\n\n* Add `sass.NULL`, `sass.TRUE`, and `sass.FALSE` constants to match Node Sass's\n  API.\n\n* If a custom Node importer returns both `file` and `contents`, don't attempt to\n  read the `file`. Instead, use the `contents` provided by the importer, with\n  `file` as the canonical url.\n\n## 1.26.5\n\n* No user-visible changes.\n\n## 1.26.4\n\n* Be more memory-efficient when handling `@forward`s through `@import`s.\n\n## 1.26.3\n\n* Fix a bug where `--watch` mode could go into an infinite loop compiling CSS\n  files to themselves.\n\n## 1.26.2\n\n* More aggressively eliminate redundant selectors in the `selector.extend()` and\n  `selector.replace()` functions.\n\n## 1.26.1\n\n### Command Line Interface\n\n* Fix a longstanding bug where `--watch` mode could enter into a state where\n  recompilation would not occur after a syntax error was introduced into a\n  dependency and then fixed.\n\n## 1.26.0\n\n* **Potentially breaking bug fix:** `@use` rules whose URLs' basenames begin\n  with `_` now correctly exclude that `_` from the rules' namespaces.\n\n* Fix a bug where imported forwarded members weren't visible in mixins and\n  functions that were defined before the `@import`.\n\n* Don't throw errors if the exact same member is loaded or forwarded from\n  multiple modules at the same time.\n\n## 1.25.2\n\n* Fix a bug where, under extremely rare circumstances, a valid variable could\n  become unassigned.\n\n## 1.25.0\n\n* Add functions to the built-in \"sass:math\" module.\n\n  * `clamp($min, $number, $max)`. Clamps `$number` in between `$min` and `$max`.\n\n  * `hypot($numbers...)`. Given *n* numbers, outputs the length of the\n    *n*-dimensional vector that has components equal to each of the inputs.\n\n  * Exponential. All inputs must be unitless.\n    * `log($number)` or `log($number, $base)`. If no base is provided, performs\n       a natural log.\n    * `pow($base, $exponent)`\n    * `sqrt($number)`\n\n  * Trigonometric. The input must be an angle. If no unit is given, the input is\n    assumed to be in `rad`.\n    * `cos($number)`\n    * `sin($number)`\n    * `tan($number)`\n\n  * Inverse trigonometric. The output is in `deg`.\n    * `acos($number)`. Input must be unitless.\n    * `asin($number)`. Input must be unitless.\n    * `atan($number)`. Input must be unitless.\n    * `atan2($y, $x)`. `$y` and `$x` must have compatible units or be unitless.\n\n* Add the variables `$pi` and `$e` to the built-in \"sass:math\" module.\n\n### JavaScript API\n\n* `constructor.value` fields on value objects now match their Node Sass\n  equivalents.\n\n## 1.24.5\n\n* Highlight contextually-relevant sections of the stylesheet in error messages,\n  rather than only highlighting the section where the error was detected.\n\n## 1.24.4\n\n### JavaScript API\n\n* Fix a bug where source map generation would crash with an absolute source map\n  path and a custom importer that returns string file contents.\n\n## 1.24.3\n\n### Command Line Interface\n\n* Fix a bug where `sass --version` would crash for certain executable\n  distributions.\n\n## 1.24.2\n\n### JavaScript API\n\n* Fix a bug introduced in the previous release that prevented custom importers\n  in Node.js from loading import-only files.\n\n## 1.24.1\n\n* Fix a bug where the wrong file could be loaded when the same URL is used by\n  both a `@use` rule and an `@import` rule.\n\n## 1.24.0\n\n* Add an optional `with` clause to the `@forward` rule. This works like the\n  `@use` rule's `with` clause, except that `@forward ... with` can declare\n  variables as `!default` to allow downstream modules to reconfigure their\n  values.\n\n* Support configuring modules through `@import` rules.\n\n## 1.23.8\n\n* **Potentially breaking bug fix:** Members loaded through a nested `@import`\n  are no longer ever accessible outside that nested context.\n\n* Don't throw an error when importing two modules that both forward members with\n  the same name. The latter name now takes precedence over the former, as per\n  the specification.\n\n### Dart API\n\n* `SassFormatException` now implements `SourceSpanFormatException` (and thus\n  `FormatException`).\n\n## 1.23.7\n\n* No user-visible changes\n\n## 1.23.6\n\n* No user-visible changes.\n\n## 1.23.5\n\n* Support inline comments in the indented syntax.\n\n* When an overloaded function receives the wrong number of arguments, guess\n  which overload the user actually meant to invoke, and display the invalid\n  argument error for that overload.\n\n* When `@error` is used in a function or mixin, print the call site rather than\n  the location of the `@error` itself to better match the behavior of calling a\n  built-in function that throws an error.\n\n## 1.23.4\n\n### Command-Line Interface\n\n* Fix a bug where `--watch` wouldn't watch files referred to by `@forward`\n  rules.\n\n## 1.23.3\n\n* Fix a bug where selectors were being trimmed over-eagerly when `@extend`\n  crossed module boundaries.\n\n## 1.23.2\n\n### Command-Line Interface\n\n* Fix a bug when compiling all Sass files in a directory where a CSS file could\n  be compiled to its own location, creating an infinite loop in `--watch` mode.\n\n* Properly compile CSS entrypoints in directories outside of `--watch` mode.\n\n## 1.23.1\n\n* Fix a bug preventing built-in modules from being loaded within a configured\n  module.\n\n* Fix a bug preventing an unconfigured module from being loaded from within two\n  different configured modules.\n\n* Fix a bug when `meta.load-css()` was used to load some files that included\n  media queries.\n\n* Allow `saturate()` in plain CSS files, since it can be used as a plain CSS\n  filter function.\n\n* Improve the error messages for trying to access functions like `lighten()`\n  from the `sass:color` module.\n\n## 1.23.0\n\n* **Launch the new Sass module system!** This adds:\n\n  * The [`@use` rule][], which loads Sass files as *modules* and makes their\n    members available only in the current file, with automatic namespacing.\n\n    [`@use` rule]: https://sass-lang.com/documentation/at-rules/use\n\n  * The [`@forward` rule][], which makes members of another Sass file available\n    to stylesheets that `@use` the current file.\n\n    [`@forward` rule]: https://sass-lang.com/documentation/at-rules/forward\n\n  * Built-in modules named `sass:color`, `sass:list`, `sass:map`, `sass:math`,\n    `sass:meta`, `sass:selector`, and `sass:string` that provide access to all\n    the built-in Sass functions you know and love, with automatic module\n    namespaces.\n\n  * The [`meta.load-css()` mixin][], which includes the CSS contents of a module\n    loaded from a (potentially dynamic) URL.\n\n    [`meta.load-css()` mixin]: https://sass-lang.com/documentation/modules/meta#load-css\n\n  * The [`meta.module-variables()` function][], which provides access to the\n    variables defined in a given module.\n\n    [`meta.module-variables()` function]: https://sass-lang.com/documentation/modules/meta#module-variables\n\n  * The [`meta.module-functions()` function][], which provides access to the\n    functions defined in a given module.\n\n    [`meta.module-functions()` function]: https://sass-lang.com/documentation/modules/meta#module-functions\n\n  Check out [the Sass blog][migrator blog] for more information on the new\n  module system. You can also use the new [Sass migrator][] to automatically\n  migrate your stylesheets to the new module system!\n\n  [migrator blog]: https://sass-lang.com/blog/the-module-system-is-launched\n  [Sass migrator]: https://sass-lang.com/documentation/cli/migrator\n\n## 1.22.12\n\n* **Potentially breaking bug fix:** character sequences consisting of two or\n  more hyphens followed by a number (such as `--123`), or two or more hyphens on\n  their own (such as `--`), are now parsed as identifiers [in accordance with\n  the CSS spec][ident-token-diagram].\n\n  [ident-token-diagram]: https://drafts.csswg.org/css-syntax-3/#ident-token-diagram\n\n  The sequence `--` was previously parsed as multiple applications of the `-`\n  operator. Since this is unlikely to be used intentionally in practice, we\n  consider this bug fix safe.\n\n### Command-Line Interface\n\n* Fix a bug where changes in `.css` files would be ignored in `--watch` mode.\n\n### JavaScript API\n\n* Allow underscore-separated custom functions to be defined.\n\n* Improve the performance of Node.js compilation involving many `@import`s.\n\n## 1.22.11\n\n* Don't try to load unquoted plain-CSS indented-syntax imports.\n\n* Fix a couple edge cases in `@extend` logic and related selector functions:\n\n  * Recognize `:matches()` and similar pseudo-selectors as superselectors of\n    matching complex selectors.\n\n  * Recognize `::slotted()` as a superselector of other `::slotted()` selectors.\n\n  * Recognize `:current()` with a vendor prefix as a superselector.\n\n## 1.22.10\n\n* Fix a bug in which `get-function()` would fail to find a dash-separated\n  function when passed a function name with underscores.\n\n## 1.22.9\n\n* Include argument names when reporting range errors and selector parse errors.\n\n* Avoid double `Error:` headers when reporting selector parse errors.\n\n* Clarify the error message when the wrong number of positional arguments are\n  passed along with a named argument.\n\n### JavaScript API\n\n* Re-add support for Node Carbon (8.x).\n\n## 1.22.8\n\n### JavaScript API\n\n* Don't crash when running in a directory whose name contains URL-sensitive\n  characters.\n\n* Drop support for Node Carbon (8.x), which doesn't support `url.pathToFileURL`.\n\n## 1.22.7\n\n* Restrict the supported versions of the Dart SDK to `^2.4.0`.\n\n## 1.22.6\n\n* **Potentially breaking bug fix:** The `keywords()` function now converts\n  underscore-separated argument names to hyphen-separated names. This matches\n  LibSass's behavior, but not Ruby Sass's.\n\n* Further improve performance for logic-heavy stylesheets.\n\n* Improve a few error messages.\n\n## 1.22.5\n\n### JavaScript API\n\n* Improve performance for logic-heavy stylesheets.\n\n## 1.22.4\n\n* Fix a bug where at-rules imported from within a style rule would appear within\n  that style rule rather than at the root of the document.\n\n## 1.22.3\n\n* **Potentially breaking bug fix:** The argument name for the `saturate()`\n  function is now `$amount`, to match the name in LibSass and originally in Ruby\n  Sass.\n\n* **Potentially breaking bug fix:** The `invert()` function now properly returns\n  `#808080` when passed `$weight: 50%`. This matches the behavior in LibSass and\n  originally in Ruby Sass, as well as being consistent with other nearby values\n  of `$weight`.\n\n* **Potentially breaking bug fix:** The `invert()` function now throws an error\n  if it's used [as a plain CSS function][plain-CSS invert] *and* the Sass-only\n  `$weight` parameter is passed. This never did anything useful, so it's\n  considered a bug fix rather than a full breaking change.\n\n  [plain-CSS invert]: https://developer.mozilla.org/en-US/docs/Web/CSS/filter-function/invert\n\n* **Potentially breaking bug fix**: The `str-insert()` function now properly\n  inserts at the end of the string if the `$index` is `-1`. This matches the\n  behavior in LibSass and originally in Ruby Sass.\n\n* **Potentially breaking bug fix**: An empty map returned by `map-remove()` is\n  now treated as identical to the literal value `()`, rather than being treated\n  as though it had a comma separator. This matches the original behavior in Ruby\n  Sass.\n\n* The `adjust-color()` function no longer throws an error when a large `$alpha`\n  value is combined with HSL adjustments.\n\n* The `alpha()` function now produces clearer error messages when the wrong\n  number of arguments are passed.\n\n* Fix a bug where the `str-slice()` function could produce invalid output when\n  passed a string that contains characters that aren't represented as a single\n  byte in UTF-16.\n\n* Improve the error message for an unknown separator name passed to the `join()`\n  or `append()` functions.\n\n* The `zip()` function no longer deadlocks if passed no arguments.\n\n* The `map-remove()` function can now take a `$key` named argument. This matches\n  the signature in LibSass and originally in Ruby Sass.\n\n## 1.22.2\n\n### JavaScript API\n\n* Avoid re-assigning the `require()` function to make the code statically\n  analyzable by Webpack.\n\n## 1.22.1\n\n### JavaScript API\n\n* Expand the dependency on `chokidar` to allow 3.x.\n\n## 1.22.0\n\n* Produce better stack traces when importing a file that contains a syntax\n  error.\n\n* Make deprecation warnings for `!global` variable declarations that create new\n  variables clearer, especially in the case where the `!global` flag is\n  unnecessary because the variables are at the top level of the stylesheet.\n\n### Dart API\n\n* Add a `Value.realNull` getter, which returns Dart's `null` if the value is\n  Sass's null.\n\n## 1.21.0\n\n### Dart API\n\n* Add a `sass` executable when installing the package through `pub`.\n\n* Add a top-level `warn()` function for custom functions and importers to print\n  warning messages.\n\n## 1.20.3\n\n* No user-visible changes.\n\n## 1.20.2\n\n* Fix a bug where numbers could be written using exponential notation in\n  Node.js.\n\n* Fix a crash that would appear when writing some very large integers to CSS.\n\n### Command-Line Interface\n\n* Improve performance for stand-alone packages on Linux and Mac OS.\n\n### JavaScript API\n\n* Pass imports to custom importers before resolving them using `includePaths` or\n  the `SASS_PATH` environment variable. This matches Node Sass's behavior, so\n  it's considered a bug fix.\n\n## 1.20.1\n\n* No user-visible changes.\n\n## 1.20.0\n\n* Support attribute selector modifiers, such as the `i` in `[title=\"test\" i]`.\n\n### Command-Line Interface\n\n* When compilation fails, Sass will now write the error message to the CSS\n  output as a comment and as the `content` property of a `body::before` rule so\n  it will show up in the browser (unless compiling to standard output). This can\n  be disabled with the `--no-error-css` flag, or forced even when compiling to\n  standard output with the `--error-css` flag.\n\n### Dart API\n\n* Added `SassException.toCssString()`, which returns the contents of a CSS\n  stylesheet describing the error, as above.\n\n## 1.19.0\n\n* Allow `!` in `url()`s without quotes.\n\n### Dart API\n\n* `FilesystemImporter` now doesn't change its effective directory if the working\n  directory changes, even if it's passed a relative argument.\n\n## 1.18.0\n\n* Avoid recursively listing directories when finding the canonical name of a\n  file on case-insensitive filesystems.\n\n* Fix importing files relative to `package:`-imported files.\n\n* Don't claim that \"package:\" URLs aren't supported when they actually are.\n\n### Command-Line Interface\n\n* Add a `--no-charset` flag. If this flag is set, Sass will never emit a\n  `@charset` declaration or a byte-order mark, even if the CSS file contains\n  non-ASCII characters.\n\n### Dart API\n\n* Add a `charset` option to `compile()`, `compileString()`, `compileAsync()` and\n  `compileStringAsync()`. If this option is set to `false`, Sass will never emit\n  a `@charset` declaration or a byte-order mark, even if the CSS file contains\n  non-ASCII characters.\n\n* Explicitly require that importers' `canonicalize()` methods be able to take\n  paths relative to their outputs as valid inputs. This isn't considered a\n  breaking change because the importer infrastructure already required this in\n  practice.\n\n## 1.17.4\n\n* Consistently parse U+000C FORM FEED, U+000D CARRIAGE RETURN, and sequences of\n  U+000D CARRIAGE RETURN followed by U+000A LINE FEED as individual newlines.\n\n### JavaScript API\n\n* Add a `sass.types.Error` constructor as an alias for `Error`. This makes our\n  custom function API compatible with Node Sass's.\n\n## 1.17.3\n\n* Fix an edge case where slash-separated numbers were written to the stylesheet\n  with a slash even when they're used as part of another arithmetic operation,\n  such as being concatenated with a string.\n\n* Don't put style rules inside empty `@keyframes` selectors.\n\n## 1.17.2\n\n* Deprecate `!global` variable assignments to variables that aren't yet defined.\n  This deprecation message can be avoided by assigning variables to `null` at\n  the top level before globally assigning values to them.\n\n### Dart API\n\n* Explicitly mark classes that were never intended to be subclassed or\n  implemented as \"sealed\".\n\n## 1.17.1\n\n* Properly quote attribute selector values that start with identifiers but end\n  with a non-identifier character.\n\n## 1.17.0\n\n* Improve error output, particularly for errors that cover multiple lines.\n\n* Improve source locations for some parse errors. Rather than pointing to the\n  next token that wasn't what was expected, they point *after* the previous\n  token. This should generally provide more context for the syntax error.\n\n* Produce a better error message for style rules that are missing the closing\n  `}`.\n\n* Produce a better error message for style rules and property declarations\n  within `@function` rules.\n\n### Command-Line Interface\n\n* Passing a directory on the command line now compiles all Sass source files in\n  the directory to CSS files in the same directory, as though `dir:dir` were\n  passed instead of just `dir`.\n\n* The new error output uses non-ASCII Unicode characters by default. Add a\n  `--no-unicode` flag to disable this.\n\n## 1.16.1\n\n* Fix a performance bug where stylesheet evaluation could take a very long time\n  when many binary operators were used in sequence.\n\n## 1.16.0\n\n* `rgb()` and `hsl()` now treat unquoted strings beginning with `env()`,\n  `min()`, and `max()` as special number strings like `calc()`.\n\n## 1.15.3\n\n* Properly merge `all and` media queries. These queries were previously being\n  merged as though `all` referred to a specific media type, rather than all\n  media types.\n\n* Never remove units from 0 values in compressed mode. This wasn't safe in\n  general, since some properties (such as `line-height`) interpret `0` as a\n  `<number>` rather than a `<length>` which can break CSS transforms. It's\n  better to do this optimization in a dedicated compressor that's aware of CSS\n  property semantics.\n\n* Match Ruby Sass's behavior in some edge-cases involving numbers with many\n  significant digits.\n\n* Emit escaped tab characters in identifiers as `\\9` rather than a backslash\n  followed by a literal tab.\n\n### Command-Line Interface\n\n* The source map generated for a stylesheet read from standard input now uses a\n  `data:` URL to include that stylesheet's contents in the source map.\n\n### Node JS API\n\n* `this.includePaths` for a running importer is now a `;`-separated string on\n  Windows, rather than `:`-separated. This matches Node Sass's behavior.\n\n### Dart API\n\n* The URL used in a source map to refer to a stylesheet loaded from an importer\n  is now `ImportResult.sourceMapUrl` as documented.\n\n## 1.15.2\n\n### Node JS API\n\n* When `setValue()` is called on a Sass string object, make it unquoted even if\n  it was quoted originally, to match the behavior of Node Sass.\n\n## 1.15.1\n\n* Always add quotes to attribute selector values that begin with `--`, since IE\n  11 doesn't consider them to be identifiers.\n\n## 1.15.0\n\n* Add support for passing arguments to `@content` blocks. See [the\n  proposal][content-args] for details.\n\n* Add support for the new `rgb()` and `hsl()` syntax introduced in CSS Colors\n  Level 4, such as `rgb(0% 100% 0% / 0.5)`. See [the proposal][color-4-rgb-hsl]\n  for more details.\n\n* Add support for interpolation in at-rule names. See [the\n  proposal][at-rule-interpolation] for details.\n\n* Add paths from the `SASS_PATH` environment variable to the load paths in the\n  command-line interface, Dart API, and JS API. These load paths are checked\n  just after the load paths explicitly passed by the user.\n\n* Allow saturation and lightness values outside of the `0%` to `100%` range in\n  the `hsl()` and `hsla()` functions. They're now clamped to be within that\n  range rather than producing an error if they're outside it.\n\n* Properly compile selectors that end in escaped whitespace.\n\n[content-args]: https://github.com/sass/language/blob/master/accepted/content-args.md\n[color-4-rgb-hsl]: https://github.com/sass/language/blob/master/accepted/color-4-rgb-hsl.md\n[at-rule-interpolation]: https://github.com/sass/language/blob/master/accepted/at-rule-interpolation.md\n\n### JavaScript API\n\n* Always include the error location in error messages.\n\n## 1.14.4\n\n* Properly escape U+0009 CHARACTER TABULATION in unquoted strings.\n\n## 1.14.3\n\n* Treat `:before`, `:after`, `:first-line`, and `:first-letter` as\n  pseudo-elements for the purposes of `@extend`.\n\n* When running in compressed mode, remove spaces around combinators in complex\n  selectors, so a selector like `a > b` is output as `a>b`.\n\n* Properly indicate the source span for errors involving binary operation\n  expressions whose operands are parenthesized.\n\n## 1.14.2\n\n* Fix a bug where loading the same stylesheet from two different import paths\n  could cause its imports to fail to resolve.\n\n* Properly escape U+001F INFORMATION SEPARATOR ONE in unquoted strings.\n\n### Command-Line Interface\n\n* Don't crash when using `@debug` in a stylesheet passed on standard input.\n\n### Dart API\n\n* `AsyncImporter.canonicalize()` and `Importer.canonicalize()` must now return\n  absolute URLs. Relative URLs are still supported, but are deprecated and will\n  be removed in a future release.\n\n## 1.14.1\n\n* Canonicalize escaped digits at the beginning of identifiers as hex escapes.\n\n* Properly parse property declarations that are both *in* content blocks and\n  written *after* content blocks.\n\n### Command-Line Interface\n\n* Print more readable paths in `--watch` mode.\n\n## 1.14.0\n\n### BREAKING CHANGE\n\nIn accordance with our [compatibility policy][], breaking changes made for CSS\ncompatibility reasons are released as minor version revision after a three-month\ndeprecation period.\n\n[compatibility policy]: README.md#compatibility-policy\n\n* Tokens such as `#abcd` that are now interpreted as hex colors with alpha\n  channels, rather than unquoted ID strings.\n\n## 1.13.4\n\n### Node JS\n\n* Tweak JS compilation options to substantially improve performance.\n\n## 1.13.3\n\n* Properly generate source maps for stylesheets that emit `@charset`\n  declarations.\n\n### Command-Line Interface\n\n* Don't error out when passing `--embed-source-maps` along with\n  `--embed-sources` for stylesheets that contain non-ASCII characters.\n\n## 1.13.2\n\n* Properly parse `:nth-child()` and `:nth-last-child()` selectors with\n  whitespace around the argument.\n\n* Don't emit extra whitespace in the arguments for `:nth-child()` and\n  `:nth-last-child()` selectors.\n\n* Fix support for CSS hacks in plain CSS mode.\n\n## 1.13.1\n\n* Allow an IE-style single equals operator in plain CSS imports.\n\n## 1.13.0\n\n* Allow `@extend` to be used with multiple comma-separated simple selectors.\n  This is already supported by other implementations, but fell through the\n  cracks for Dart Sass until now.\n\n* Don't crash when a media rule contains another media rule followed by a style\n  rule.\n\n## 1.12.0\n\n### Dart API\n\n* Add a `SassException` type that provides information about Sass compilation\n  failures.\n\n### Node JS API\n\n* Remove the source map comment from the compiled JS. We don't ship with the\n  source map, so this pointed to nothing.\n\n## 1.11.0\n\n* Add support for importing plain CSS files. They can only be imported *without*\n  an extensionâ€”for example, `@import \"style\"` will import `style.css`. Plain CSS\n  files imported this way only support standard CSS features, not Sass\n  extensions.\n\n  See [the proposal][css-import] for details.\n\n* Add support for CSS's `min()` and `max()` [math functions][]. A `min()` and\n  `max()` call will continue to be parsed as a Sass function if it involves any\n  Sass-specific features like variables or function calls, but if it's valid\n  plain CSS (optionally with interpolation) it will be emitted as plain CSS instead.\n\n  See [the proposal][css-min-max] for details.\n\n* Add support for range-format media features like `(10px < width < 100px)`. See\n  [the proposal][media-ranges] for details.\n\n* Normalize escape codes in identifiers so that, for example, `Ã©clair` and\n  `\\E9clair` are parsed to the same value. See\n  [the proposal][identifier-escapes] for details.\n\n* Don't choke on a [byte-order mark][] at the beginning of a document when\n  running in JavaScript.\n\n[math functions]: https://drafts.csswg.org/css-values/#math-function\n[css-import]: https://github.com/sass/language/blob/master/accepted/css-imports.md\n[css-min-max]: https://github.com/sass/language/blob/master/accepted/min-max.md\n[media-ranges]: https://github.com/sass/language/blob/master/accepted/media-ranges.md\n[identifier-escapes]: https://github.com/sass/language/blob/master/accepted/identifier-escapes.md\n[byte-order mark]: https://en.wikipedia.org/wiki/Byte_order_mark\n\n### Command-Line Interface\n\n* The `--watch` command now continues to recompile a file after a syntax error\n  has been detected.\n\n### Dart API\n\n* Added a `Syntax` enum to indicate syntaxes for Sass source files.\n\n* The `compile()` and `compileAsync()` functions now parse files with the `.css`\n  extension as plain CSS.\n\n* Added a `syntax` parameter to `compileString()` and `compileStringAsync()`.\n\n* Deprecated the `indented` parameter to `compileString()` and `compileStringAsync()`.\n\n* Added a `syntax` parameter to `new ImporterResult()` and a\n  `ImporterResult.syntax` getter to set the syntax of the source file.\n\n* Deprecated the `indented` parameter to `new ImporterResult()` and the\n  `ImporterResult.indented` getter in favor of `syntax`.\n\n## 1.10.4\n\n### Command-Line Interface\n\n* Fix a Homebrew installation failure.\n\n## 1.10.3\n\n### Command-Line Interface\n\n* Run the Chocolatey script with the correct arguments so it doesn't crash.\n\n## 1.10.2\n\n* No user-visible changes.\n\n## 1.10.1\n\n### Node JS API\n\n* Don't crash when passing both `includePaths` and `importer`.\n\n## 1.10.0\n\n* When two `@media` rules' queries can't be merged, leave nested rules in place\n  for browsers that support them.\n\n* Fix a typo in an error message.\n\n## 1.9.2\n\n### Node JS API\n\n* Produce more readable filesystem errors, such as when a file doesn't exist.\n\n## 1.9.1\n\n### Command-Line Interface\n\n* Don't emit ANSI codes to Windows terminals that don't support them.\n\n* Fix a bug where `--watch` crashed on Mac OS.\n\n## 1.9.0\n\n### Node API\n\n* Add support for `new sass.types.Color(argb)` for creating colors from ARGB hex\n  numbers. This was overlooked when initially adding support for Node Sass's\n  JavaScript API.\n\n## 1.8.0\n\n### Command-Line Interface\n\n* Add a `--poll` flag to make `--watch` mode repeatedly check the filesystem for\n  updates rather than relying on native filesystem notifications.\n\n* Add a `--stop-on-error` flag to stop compiling additional files once an error\n  is encountered.\n\n## 1.7.3\n\n* No user-visible changes.\n\n## 1.7.2\n\n* Add a deprecation warning for `@-moz-document`, except for cases where only an\n  empty `url-prefix()` is used. Support is [being removed from Firefox][] and\n  will eventually be removed from Sass as well.\n\n[being removed from Firefox]: https://www.fxsitecompat.com/en-CA/docs/2018/moz-document-support-has-been-dropped-except-for-empty-url-prefix/\n\n* Fix a bug where `@-moz-document` functions with string arguments weren't being\n  parsed.\n\n### Command-Line Interface\n\n* Don't crash when a syntax error is added to a watched file.\n\n## 1.7.1\n\n* Fix crashes in released binaries.\n\n## 1.7.0\n\n* Emit deprecation warnings for tokens such as `#abcd` that are ambiguous\n  between ID strings and hex colors with alpha channels. These will be\n  interpreted as colors in a release on or after 19 September 2018.\n\n* Parse unambiguous hex colors with alpha channels as colors.\n\n* Fix a bug where relative imports from files on the load path could look in the\n  incorrect location.\n\n## 1.6.2\n\n### Command-Line Interface\n\n* Fix a bug where the source map comment in the generated CSS could refer to the\n  source map file using an incorrect URL.\n\n## 1.6.1\n\n* No user-visible changes.\n\n## 1.6.0\n\n* Produce better errors when expected tokens are missing before a closing brace.\n\n* Avoid crashing when compiling a non-partial stylesheet that exists on the\n  filesystem next to a partial with the same name.\n\n### Command-Line Interface\n\n* Add support for the `--watch`, which watches for changes in Sass files on the\n  filesystem and ensures that the compiled CSS is up-to-date.\n\n* When using `--update`, surface errors when an import doesn't exist even if the\n  file containing the import hasn't been modified.\n\n* When compilation fails, delete the output file rather than leaving an outdated\n  version.\n\n## 1.5.1\n\n* Fix a bug where an absolute Windows path would be considered an `input:output`\n  pair.\n\n* Forbid custom properties that have no values, like `--foo:;`, since they're\n  forbidden by the CSS spec.\n\n## 1.5.0\n\n* Fix a bug where an importer would be passed an incorrectly-resolved URL when\n  handling a relative import.\n\n* Throw an error when an import is ambiguous due to a partial and a non-partial\n  with the same name, or multiple files with different extensions. This matches\n  the standard Sass behavior.\n\n### Command-Line Interface\n\n* Add an `--interactive` flag that supports interactively running Sass\n  expressions (thanks to [Jen Thakar][]!).\n\n[Jen Thakar]: https://github.com/jathak\n\n## 1.4.0\n\n* Improve the error message for invalid semicolons in the indented syntax.\n\n* Properly disallow semicolons after declarations in the indented syntax.\n\n### Command-Line Interface\n\n* Add support for compiling multiple files at once by writing\n  `sass input.scss:output.css`. Note that unlike Ruby Sass, this *always*\n  compiles files by default regardless of when they were modified.\n\n  This syntax also supports compiling entire directories at once. For example,\n  `sass templates/stylesheets:public/css` compiles all non-partial Sass files\n  in `templates/stylesheets` to CSS files in `public/css`.\n\n* Add an `--update` flag that tells Sass to compile only stylesheets that have\n  been (transitively) modified since the CSS file was generated.\n\n### Dart API\n\n* Add `Importer.modificationTime()` and `AsyncImporter.modificationTime()` which\n  report the last time a stylesheet was modified.\n\n### Node API\n\n* Generate source maps when the `sourceMaps` option is set to a string and the\n  `outFile` option is not set.\n\n## 1.3.2\n\n* Add support for `@elseif` as an alias of `@else if`. This is not an\n  intentional feature, so using it will cause a deprecation warning. It will be\n  removed at some point in the future.\n\n## 1.3.1\n\n### Node API\n\n* Fix loading imports relative to stylesheets that were themselves imported\n  though relative include paths.\n\n## 1.3.0\n\n### Command-Line Interface\n\n* Generate source map files by default when writing to disk. This can be\n  disabled by passing `--no-source-map`.\n\n* Add a `--source-map-urls` option to control whether the source file URLs in\n  the generated source map are relative or absolute.\n\n* Add an `--embed-sources` option to embed the contents of all source files in\n  the generated source map.\n\n* Add an `--embed-source-map` option to embed the generated source map as a\n  `data:` URL in the generated CSS.\n\n### Dart API\n\n* Add a `sourceMap` parameter to `compile()`, `compileString()`,\n  `compileAsync()`, and `compileStringAsync()`. This takes a callback that's\n  called with a [`SingleMapping`][] that contains the source map information for\n  the compiled CSS file.\n\n[`SingleMapping`]: https://www.dartdocs.org/documentation/source_maps/latest/source_maps.parser/SingleMapping-class.html\n\n### Node API\n\n* Added support for the `sourceMap`, `omitSourceMapUrl`, `outFile`,\n  `sourceMapContents`, `sourceMapEmbed`, and `sourceMapRoot` options to\n  `render()` and `renderSync()`.\n\n* Fix a bug where passing a relative path to `render()` or `renderSync()` would\n  cause relative imports to break.\n\n* Fix a crash when printing warnings in stylesheets compiled using `render()` or\n  `renderSync()`.\n\n* Fix a bug where format errors were reported badly on Windows.\n\n## 1.2.1\n\n* Always emit units in compressed mode for `0` dimensions other than lengths and\n  angles.\n\n## 1.2.0\n\n* The command-line executable will now create the directory for the resulting\n  CSS if that directory doesn't exist.\n\n* Properly parse `#{$var} -#{$var}` as two separate values in a list rather than\n  one value being subtracted from another.\n\n* Improve the error message for extending compound selectors.\n\n## 1.1.1\n\n* Add a commit that was accidentally left out of 1.1.0.\n\n## 1.1.0\n\n* The command-line executable can now be used to write an output file to disk\n  using `sass input.scss output.css`.\n\n* Use a POSIX-shell-compatible means of finding the location of the `sass` shell\n  script.\n\n## 1.0.0\n\n**Initial stable release.**\n\n### Changes Since 1.0.0-rc.1\n\n* Allow `!` in custom property values ([#260][]).\n\n[#260]: https://github.com/sass/dart-sass/issues/260\n\n#### Dart API\n\n* Remove the deprecated `render()` function.\n\n#### Node API\n\n* Errors are now subtypes of the `Error` type.\n\n* Allow both the `data` and `file` options to be passed to `render()` and\n  `renderSync()` at once. The `data` option will be used as the contents of the\n  stylesheet, and the `file` option will be used as the path for error reporting\n  and relative imports. This matches Node Sass's behavior.\n\n## 1.0.0-rc.1\n\n* Add support for importing an `_index.scss` or `_index.sass` file when\n  importing a directory.\n\n* Add a `--load-path` command-line option (alias `-I`) for passing additional\n  paths to search for Sass files to import.\n\n* Add a `--quiet` command-line option (alias `-q`) for silencing warnings.\n\n* Add an `--indented` command-line option for using the indented syntax with a\n  stylesheet from standard input.\n\n* Don't merge the media queries `not type` and `(feature)`. We had previously\n  been generating `not type and (feature)`, but that's not actually the\n  intersection of the two queries.\n\n* Don't crash on `$x % 0`.\n\n* The standalone executable distributed on GitHub is now named `sass` rather\n  than `dart-sass`. The `dart-sass` executable will remain, with a deprecation\n  message, until 1.0.0 is released.\n\n### Dart API\n\n* Add a `Logger` class that allows users to control how messages are printed by\n  stylesheets.\n\n* Add a `logger` parameter to `compile()`, `compileAsync()`, `compileString()`,\n  and `compileStringAsync()`.\n\n### Node JS API\n\n* Import URLs passed to importers are no longer normalized. For example, if a\n  stylesheet contains `@import \"./foo.scss\"`, importers will now receive\n  `\"./foo.scss\"` rather than `\"foo.scss\"`.\n\n## 1.0.0-beta.5.3\n\n* Support hard tabs in the indented syntax.\n\n* Improve the formatting of comments that don't start on the same line as the\n  opening `/*`.\n\n* Preserve whitespace after `and` in media queries in compressed mode.\n\n### Indented Syntax\n\n* Properly parse multi-line selectors.\n\n* Don't deadlock on `/*` comments.\n\n* Don't add an extra `*/` to comments that already have it.\n\n* Preserve empty lines in `/*` comments.\n\n## 1.0.0-beta.5.2\n\n* Fix a bug where some colors would crash `compressed` mode.\n\n## 1.0.0-beta.5.1\n\n* Add a `compressed` output style.\n\n* Emit a warning when `&&` is used, since it's probably not what the user means.\n\n* `round()` now returns the correct results for negative numbers that should\n  round down.\n\n* `var()` may now be passed in place of multiple arguments to `rgb()`, `rgba()`,\n  `hsl()` and `hsla()`.\n\n* Fix some cases where equivalent numbers wouldn't count as the same keys in\n  maps.\n\n* Fix a bug where multiplication like `(1/1px) * (1px/1)` wouldn't properly\n  cancel out units.\n\n* Fix a bug where dividing by a compatible unit would produce an invalid\n  result.\n\n* Remove a non-`sh`-compatible idiom from the standalone shell script.\n\n### Dart API\n\n* Add a `functions` parameter to `compile()`, `compleString()`,\n  `compileAsync()`, and `compileStringAsync()`. This allows users to define\n  custom functions in Dart that can be invoked from Sass stylesheets.\n\n* Expose the `Callable` and `AsyncCallable` types, which represent functions\n  that can be invoked from Sass.\n\n* Expose the `Value` type and its subclasses, as well as the top-level\n  `sassTrue`, `sassFalse`, and `sassNull` values, which represent Sass values\n  that may be passed into or returned from custom functions.\n\n* Expose the `OutputStyle` enum, and add a `style` parameter to `compile()`,\n  `compleString()`, `compileAsync()`, and `compileStringAsync()` that allows\n  users to control the output style.\n\n### Node JS API\n\n* Support the `functions` option.\n\n* Support the `\"compressed\"` value for the `outputStyle` option.\n\n## 1.0.0-beta.4\n\n* Support unquoted imports in the indented syntax.\n\n* Fix a crash when `:not(...)` extends a selector that appears in\n  `:not(:not(...))`.\n\n### Node JS API\n\n* Add support for asynchronous importers to `render()` and `renderSync()`.\n\n### Dart API\n\n* Add `compileAsync()` and `compileStringAsync()` methods. These run\n  asynchronously, which allows them to take asynchronous importers (see below).\n\n* Add an `AsyncImporter` class. This allows imports to be resolved\n  asynchronously in case no synchronous APIs are available. `AsyncImporter`s are\n  only compatible with `compileAysnc()` and `compileStringAsync()`.\n\n## 1.0.0-beta.3\n\n* Properly parse numbers with exponents.\n\n* Don't crash when evaluating CSS variables whose names are entirely\n  interpolated (for example, `#{--foo}: ...`).\n\n### Node JS API\n\n* Add support for the `importer` option to `render()` and `renderSync()`.\n  Only synchronous importers are currently supported.\n\n### Dart API\n\n* Added an `Importer` class. This can be extended by users to provide support\n  for custom resolution for `@import` rules.\n\n* Added built-in `FilesystemImporter` and `PackageImporter` implementations that\n  support resolving `file:` and `package:` URLs, respectively.\n\n* Added an `importers` argument to the `compile()` and `compileString()`\n  functions that provides `Importer`s to use when resolving `@import` rules.\n\n* Added a `loadPaths` argument to the `compile()` and `compileString()`\n  functions that provides paths to search for stylesheets when resolving\n  `@import` rules. This is a shorthand for passing `FilesystemImporter`s to the\n  `importers` argument.\n\n## 1.0.0-beta.2\n\n* Add support for the `::slotted()` pseudo-element.\n\n* Generated transparent colors will now be emitted as `rgba(0, 0, 0, 0)` rather\n  than `transparent`. This works around a bug wherein IE incorrectly handles the\n  latter format.\n\n### Command-Line Interface\n\n* Improve the logic for whether to use terminal colors by default.\n\n### Node JS API\n\n* Add support for `data`, `includePaths`, `indentedSyntax`, `lineFeed`,\n  `indentWidth`, and `indentType` options to `render()` and `renderSync()`.\n\n* The result object returned by `render()` and `renderSync()` now includes the\n  `stats` object which provides metadata about the compilation process.\n\n* The error object thrown by `render()` and `renderSync()` now includes `line`,\n  `column`, `file`, `status`, and `formatted` fields. The `message` field and\n  `toString()` also provide more information.\n\n### Dart API\n\n* Add a `renderString()` method for rendering Sass source that's not in a file\n  on disk.\n\n## 1.0.0-beta.1\n\n* Drop support for the reference combinator. This has been removed from the\n  spec, and will be deprecated and eventually removed in other implementations.\n\n* Trust type annotations when compiling to JavaScript, which makes it\n  substantially faster.\n\n* Compile to minified JavaScript, which decreases the code size substantially\n  and makes startup a little faster.\n\n* Fix a crash when inspecting a string expression that ended in \"\\a\".\n\n* Fix a bug where declarations and `@extend` were allowed outside of a style\n  rule in certain circumstances.\n\n* Fix `not` in parentheses in `@supports` conditions.\n\n* Allow `url` as an identifier name.\n\n* Properly parse `/***/` in selectors.\n\n* Properly parse unary operators immediately after commas.\n\n* Match Ruby Sass's rounding behavior for all functions.\n\n* Allow `\\` at the beginning of a selector in the indented syntax.\n\n* Fix a number of `@extend` bugs:\n\n  * `selector-extend()` and `selector-replace()` now allow compound selector\n    extendees.\n\n  * Remove the universal selector `*` when unifying with other selectors.\n\n  * Properly unify the result of multiple simple selectors in the same compound\n    selector being extended.\n\n  * Properly handle extensions being extended.\n\n  * Properly follow the [first law of `@extend`][laws].\n\n  * Fix selector specificity tracking to follow the\n    [second law of `@extend`][laws].\n\n  * Allow extensions that match selectors but fail to unify.\n\n  * Partially-extended selectors are no longer used as parent selectors.\n\n  * Fix an edge case where both the extender and the extended selector\n    have invalid combinator sequences.\n\n  * Don't crash with a \"Bad state: no element\" error in certain edge cases.\n\n[laws]: https://github.com/sass/sass/issues/324#issuecomment-4607184\n\n## 1.0.0-alpha.9\n\n* Elements without a namespace (such as `div`) are no longer unified with\n  elements with the empty namespace (such as `|div`). This unification didn't\n  match the results returned by `is-superselector()`, and was not guaranteed to\n  be valid.\n\n* Support `&` within `@at-root`.\n\n* Properly error when a compound selector is followed immediately by `&`.\n\n* Properly handle variable scoping in `@at-root` and nested properties.\n\n* Properly handle placeholder selectors in selector pseudos.\n\n* Properly short-circuit the `or` and `and` operators.\n\n* Support `--$variable`.\n\n* Don't consider unitless numbers equal to numbers with units.\n\n* Warn about using named colors in interpolation.\n\n* Don't emit loud comments in functions.\n\n* Detect import loops.\n\n* Fix `@import` with a `supports()` clause.\n\n* Forbid functions named \"and\", \"or\", and \"not\".\n\n* Fix `type-of()` with a function.\n\n* Emit a nicer error for invalid tokens in a selector.\n\n* Fix `invert()` with a `$weight` parameter.\n\n* Fix a unit-parsing edge-cases.\n\n* Always parse imports with queries as plain CSS imports.\n\n* Support `&` followed by a non-identifier.\n\n* Properly handle split media queries.\n\n* Properly handle a placeholder selector that isn't at the beginning of a\n  compound selector.\n\n* Fix more `str-slice()` bugs.\n\n* Fix the `%` operator.\n\n* Allow whitespace between `=` and the mixin name in the indented syntax.\n\n* Fix some slash division edge cases.\n\n* Fix `not` when used like a function.\n\n* Fix attribute selectors with single-character values.\n\n* Fix some bugs with the `call()` function.\n\n* Properly handle a backslash followed by a CRLF sequence in a quoted string.\n\n* Fix numbers divided by colors.\n\n* Support slash-separated numbers in arguments to plain CSS functions.\n\n* Error out if a function is passed an unknown named parameter.\n\n* Improve the speed of loading large files on Node.\n\n* Don't consider browser-prefixed selector pseudos to be superselectors of\n  differently- or non-prefixed selector pseudos with the same base name.\n\n* Fix an `@extend` edge case involving multiple combinators in a row.\n\n* Fix a bug where a `@content` block could get incorrectly passed to a mixin.\n\n* Properly isolate the lexical environments of different calls to the same mixin\n  and function.\n\n## 1.0.0-alpha.8\n\n* Add the `content-exists()` function.\n\n* Support interpolation in loud comments.\n\n* Fix a bug where even valid semicolons and exclamation marks in custom property\n  values were disallowed.\n\n* Disallow invalid function names.\n\n* Disallow extending across media queries.\n\n* Properly parse whitespace after `...` in argument declaration lists.\n\n* Support terse mixin syntax in the indented syntax.\n\n* Fix `@at-root` query parsing.\n\n* Support special functions in `@-moz-document`.\n\n* Support `...` after a digit.\n\n* Fix some bugs when treating a map as a list of pairs.\n\n## 1.0.0-alpha.7\n\n* Fix `function-exists()`, `variable-exists()`, and `mixin-exists()` to use the\n  lexical scope rather than always using the global scope.\n\n* `str-index()` now correctly inserts at negative indices.\n\n* Properly parse `url()`s that contain comment-like text.\n\n* Fix a few more small `@extend` bugs.\n\n* Fix a bug where interpolation in a quoted string was being dropped in some\n  circumstances.\n\n* Properly handle `@for` rules where each bound has a different unit.\n\n* Forbid mixins and functions from being defined in control directives.\n\n* Fix a superselector-computation edge case involving `:not()`.\n\n* Gracefully handle input files that are invalid UTF-8.\n\n* Print a Sass stack trace when a file fails to load.\n\n## 1.0.0-alpha.6\n\n* Allow `var()` to be passed to `rgb()`, `rgba()`, `hsl()`, and `hsla()`.\n\n* Fix conversions between numbers with `dpi`, `dpcm`, and `dppx` units.\n  Previously these conversions were inverted.\n\n* Don't crash when calling `str-slice()` with an `$end-at` index lower than the\n  `$start-at` index.\n\n* `str-slice()` now correctly returns `\"\"` when `$end-at` is negative and points\n  before the beginning of the string.\n\n* Interpolation in quoted strings now properly preserves newlines.\n\n* Don't crash when passing only `$hue` or no keyword arguments to\n  `adjust-color()`, `scale-color()`, or `change-color()`.\n\n* Preserve escapes in identifiers. This used to only work for identifiers in\n  SassScript.\n\n* Fix a few small `@extend` bugs.\n\n## 1.0.0-alpha.5\n\n* Fix bounds-checking for `opacify()`, `fade-in()`, `transparentize()`, and\n  `fade-out()`.\n\n* Fix a bug with `@extend` superselector calculations.\n\n* Fix some cases where `#{...}--` would fail to parse in selectors.\n\n* Allow a single number to be passed to `saturate()` for use in filter contexts.\n\n* Fix a bug where `**/` would fail to close a loud comment.\n\n* Fix a bug where mixin and function calls could set variables incorrectly.\n\n* Move plain CSS `@import`s to the top of the document.\n\n## 1.0.0-alpha.4\n\n* Add support for bracketed lists.\n\n* Add support for Unicode ranges.\n\n* Add support for the Microsoft-style `=` operator.\n\n* Print the filename for `@debug` rules.\n\n* Fix a bug where `1 + - 2` and similar constructs would crash the parser.\n\n* Fix a bug where `@extend` produced the wrong result when used with\n  selector combinators.\n\n* Fix a bug where placeholder selectors were not allowed to be unified.\n\n* Fix the `mixin-exists()` function.\n\n* Fix `:nth-child()` and `:nth-last-child()` parsing when they contain `of\n  selector`.\n\n## 1.0.0-alpha.3\n\n* Fix a bug where color equality didn't take the alpha channel into account.\n\n* Fix a bug with converting some RGB colors to HSL.\n\n* Fix a parent selector resolution bug.\n\n* Properly declare the arguments for `opacify()` and related functions.\n\n* Add a missing dependency on the `stack_trace` package.\n\n* Fix broken Windows archives.\n\n* Emit colors using their original representation if possible.\n\n* Emit colors without an original representation as names if possible.\n\n## 1.0.0-alpha.2\n\n* Fix a bug where variables, functions, and mixins were broken in imported\n  files.\n\n## 1.0.0-alpha.1\n\n* Initial alpha release.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.5244140625,
          "content": "Sass is more than a technology; Sass is driven by the community of individuals\nthat power its development and use every day. As a community, we want to embrace\nthe very differences that have made our collaboration so powerful, and work\ntogether to provide the best environment for learning, growing, and sharing of\nideas. It is imperative that we keep Sass a fun, welcoming, challenging, and\nfair place to play.\n\n[The full community guidelines can be found on the Sass website.][link]\n\n[link]: https://sass-lang.com/community-guidelines\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.58203125,
          "content": "Want to contribute? Great! First, read this page.\n\n* [Before You Contribute](#before-you-contribute)\n  * [The Small Print](#the-small-print)\n* [Large Language Models](#large-language-models)\n* [Development Dependencies](#development-dependencies)\n* [Writing Code](#writing-code)\n  * [Changing the Language](#changing-the-language)\n  * [Changing the Node API](#changing-the-node-api)\n  * [Synchronizing](#synchronizing)\n  * [File Headers](#file-headers)\n* [Release Process](#release-process)\n* [Package Structure](#package-structure)\n\n## Before You Contribute\n\nBefore we can use your code, you must sign the\n[Google Individual Contributor License Agreement][cla] (CLA), which you can do\nonline. The CLA is necessary mainly because you own the copyright to your\nchanges, even after your contribution becomes part of our codebase, so we need\nyour permission to use and distribute your code. We also need to be sure of\nvarious other thingsâ€”for instance that you'll tell us if you know that your code\ninfringes on other people's patents. You don't have to sign the CLA until after\nyou've submitted your code for review and a member has approved it, but you must\ndo it before we can put your code into our codebase.\n\n[cla]: https://cla.developers.google.com/about/google-individual\n\nBefore you start working on a larger contribution, you should get in touch with\nus first through the issue tracker with your idea so that we can help out and\npossibly guide you. Coordinating up front makes it much easier to avoid\nfrustration later on.\n\n### The Small Print\n\nContributions made by corporations are covered by a different agreement than the\none above, the\n[Software Grant and Corporate Contributor License Agreement][corporate cla].\n\n[corporate cla]: https://developers.google.com/open-source/cla/corporate\n\n## Large Language Models\n\nDo not submit any code or prose written or modified by large language models or\n\"artificial intelligence\" such as GitHub Copilot or ChatGPT to this project.\nThese tools produce code that looks plausible, which means that not only is it\nlikely to contain bugs those bugs are likely to be difficult to notice on\nreview. In addition, because these models were trained indiscriminately and\nnon-consensually on open-source code with a variety of licenses, it's not\nobvious that we have the moral or legal right to redistribute code they\ngenerate.\n\n## Development Dependencies\n\n1. [Install the Dart SDK][]. If you download an archive manually rather than\n   using an installer, make sure the SDK's `bin` directory is on your `PATH`.\n\n2. In this repository, run `dart pub get`. This will install all of the Dart\n   dependencies.\n\n3. [Install Node.js][]. This is only necessary if you're making changes to the\n   language or to Dart Sass's Node API.\n\n[Install the Dart SDK]: https://www.dartlang.org/install\n[Install Node.js]: https://nodejs.org/en/download/\n\n## Writing Code\n\nDart Sass follows the standard [Dart style guide][] wherever possible, including\nusing the [Dart formatter][] on all code. We also try to have no\n[Dart analyzer][] warnings or hints, although if one sneaks in for a few\nrevisions that's not a big deal.\n\n[Dart style guide]: https://www.dartlang.org/guides/language/effective-dart\n[Dart formatter]: https://github.com/dart-lang/dart_style#readme\n[Dart analyzer]: https://www.dartlang.org/tools/analyzer\n\nBefore you send a pull request, we recommend you run the following steps:\n\n* `dart run grinder` will reformat your code using the Dart formatter to make\n  sure it's nice and neat, and [run the synchronizer](#synchronizing) on\n  asynchronous files.\n\n* `dart analyze lib test` will run Dart's static analyzer to ensure that there\n  aren't any obvious bugs in your code. If you're using a Dart-enabled IDE, you\n  can also just check that there aren't any warnings in there.\n\n* `dart run test -x node` will run the tests for the Dart VM API. These are a\n  good sanity check, but they aren't comprehensive; GitHub Actions will also run\n  Node.js API tests and Sass language tests, all of which must pass before your\n  pull request is merged. See [Changing the Language](#changing-the-language)\n  and [Changing the Node API](#changing-the-node-api) for more details.\n\n### Changing the Language\n\nIf you're making a change to the Sass language, either to fix a bug or add a\nfeature, you'll need to write tests in the [sass-spec][] repository. This\nrepository contains language tests that are shared among the main Sass\nimplementations. Any new feature should be thoroughly tested there, and any bug\nshould have a regression test added.\n\n[sass-spec]: https://github.com/sass/sass-spec\n\nTo create a new spec:\n\n* [Fork sass-spec](https://help.github.com/articles/fork-a-repo/).\n\n* [Install Node.js][] v14.14 or newer.\n\n* ```sh\n  # Replace $USER with your GitHub username.\n  git clone https://github.com/$USER/sass-spec\n  cd sass-spec\n  npm install\n  ```\n\n* For each test case you want to add:\n\n  * Create a directory within `sass-spec/spec/` for your test. Don't worry too\n    much about finding exactly the right place, we'll sort that out during code\n    review.\n\n  * Following the [spec style guide][], create an `hrx` file that exercises your\n    language change, verifying that the change produces expected output/errors.\n\n    [spec style guide]: https://github.com/sass/sass-spec/blob/master/STYLE_GUIDE.md\n\n* If you're adding a new language feature, it probably won't be supported by\n  LibSass yet. You can indicate this and keep tests passing by adding an\n  `options.yml` file like this to the directory containing your tests:\n\n  ```yaml\n  ---\n  :ignore_for:\n  - libsass\n  ```\n\n  If you're fixing a bug, you'll only need to do this if the bug also appears\n  in other Sass implementations.\n\n* Make sure all the language tests, including the new ones, are passing by\n  running this within `sass-spec/`:\n\n  ```sh\n  # Replace .. with the path to dart-sass if it's not the parent directory.\n  npm run sass-spec -- --dart ..\n  ```\n\n  * You can also run specs within a single directory:\n\n    ```sh\n    npm run sass-spec --dart .. spec/my/new/feature\n    ```\n\n  * If you pass the `--interactive` flag, the spec runner will stop each time a\n    spec fails and ask you what to do about the failure.\n\n* Once you've added specs and they're passing for Dart Sass, create a pull\n  request for [sass-spec][] with `[skip dart-sass]` at the end of the\n  message. This tells sass-spec not to run tests against the old version of Dart\n  Sass, since it doesn't have your changes yet.\n\n* Finally, create a pull request for Dart Sass with a link to the sass-spec pull\n  request at the end of the message. This tells Dart Sass to test against your\n  new sass-spec tests.\n\n### Changing the Node API\n\nMost of Dart Sass's code is shared between Dart and Node.js, but the API that's\nexported by the [`sass`][npm] npm package is Node-specific. It's defined using\nDart's [JS interop package][], and it's tested by compiling the Dart package to\nJS and loading that JS using JS interop to best simulate the conditions under\nwhich it will be used in the real world.\n\n[npm]: https://www.npmjs.com/package/sass\n[JS interop package]: https://pub.dartlang.org/packages/js\n\nThe tests for the Node API live in `test/node_api`. Before running them, and any\ntime you make a change to Dart Sass, run `dart run grinder before-test` to\ncompile the Dart code to JavaScript (note that you don't need to recompile if\nyou've only changed the test code). To run Node tests, just run\n`dart run test -t node`.\n\n### Synchronizing\n\nDart Sass supports two modes of operation: synchronous ([`compile()`][] and\n[`compileString()`][]), which requires all importers and custom functions to be\nsynchronous themselves, and asynchronous ([`compileAsync()`][] and\n[`compileStringAsync()`][]), which allows importers and custom functions to be\nasynchronous. These modes use essentially identical logic, but because Dart\nrepresents synchronous and asynchronous computations in fundamentally different\nways they can't share code.\n\n[`compile()`]: https://www.dartdocs.org/documentation/sass/latest/sass/compile.html\n[`compileString()`]: https://www.dartdocs.org/documentation/sass/latest/sass/compileString.html\n[`compileAsync()`]: https://www.dartdocs.org/documentation/sass/latest/sass/compileAsync.html\n[`compileStringAsync()`]: https://www.dartdocs.org/documentation/sass/latest/sass/compileStringAsync.html\n\nTo avoid colossal amounts of duplicated code, we have a few files that are\nwritten in an asynchronous style originally and then compiled to their\nsynchronous equivalents using `dart run grinder synchronize`. In particular:\n\n* `lib/src/visitor/async_evaluate.dart` is compiled to\n  `lib/src/visitor/evaluate.dart`.\n* `lib/src/async_environment.dart` is compiled to `lib/src/environment.dart`.\n\nWhen contributing code to these files, you should make manual changes only to\nthe asynchronous versions and run `dart run grinder` to compile them to their\nsynchronous equivalents.\n\nNote that the `lib/src/callable/async_built_in.dart` and\n`lib/src/callable/built_in.dart` files are *not* automatically synchronized;\nthey're so small and would require so many special cases that they're not worth\nautomating.\n\n### File Headers\n\nAll files in the project must start with the following header.\n\n```dart\n// Copyright 2021 Google LLC. Use of this source code is governed by an\n// MIT-style license that can be found in the LICENSE file or at\n// https://opensource.org/licenses/MIT.\n```\n\n## Release Process\n\nMost of the release process is fully automated on GitHub actions, triggered by\npushing a tag matching the current `pubspec.yaml` version. However, there are a\nfew things to do before pushing that tag:\n\n* Make sure the `pubspec.yaml` version doesn't end in `-dev`. (This is a Dart\n  convention to distinguish commits that aren't meant for release from commits\n  that are.)\n\n* Make sure that `CHANGELOG.md` has an entry for the current version.\n\n* Make sure that any packages in `pkg` depend on the current version of `sass`.\n\n* Increment the versions of all packages in `pkg`. These should be incremented\n  at least as much as the `sass` version, and more if you add a new API that's\n  exposed by one of those packages.\n\n* Make sure that every package in `pkg`'s `CHANGELOG.md` has an entry for its\n  current version.\n\nYou *don't* need to create tags for packages in `pkg`; that will be handled\nautomatically by GitHub actions.\n\n## Package Structure\n\nThe structure of the Sass package is documented in README.md files in most\ndirectories under `lib/`. This documentation is intended to help contributors\nquickly build a basic understanding of the structure of the compiler and how its\nvarious pieces fit together. [`lib/src/README.md`] is a good starting point to get\nan overview of the compiler as a whole.\n\n[`lib/src/README.md`]: lib/src/README.md\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03125,
          "content": "Copyright (c) 2016, Google Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.390625,
          "content": "A [Dart][dart] implementation of [Sass][sass]. **Sass makes CSS fun**.\n\n<table>\n  <tr>\n    <td>\n      <img width=\"118px\" alt=\"Sass logo\" src=\"https://rawgit.com/sass/sass-site/main/source/assets/img/logos/logo.svg\" />\n    </td>\n    <td valign=\"middle\">\n      <a href=\"https://www.npmjs.com/package/sass\"><img width=\"100%\" alt=\"npm statistics\" src=\"https://nodei.co/npm/sass.png?downloads=true\"></a>\n    </td>\n    <td valign=\"middle\">\n      <a href=\"https://pub.dartlang.org/packages/sass\"><img alt=\"Pub version\" src=\"https://img.shields.io/pub/v/sass.svg\"></a>\n      <br>\n      <a href=\"https://github.com/sass/dart-sass/actions\"><img alt=\"GitHub actions build status\" src=\"https://github.com/sass/dart-sass/workflows/CI/badge.svg\"></a>\n    </td>\n    <td>\n      <a href=\"https://front-end.social/@sass\"><img alt=\"@sass@front-end.social on Fediverse\" src=\"https://img.shields.io/mastodon/follow/110159358073946175?domain=https%3A%2F%2Ffront-end.social\"></a>\n      <br>\n      <a href=\"https://twitter.com/SassCSS\"><img alt=\"@SassCSS on Twitter\" src=\"https://img.shields.io/twitter/follow/SassCSS?label=%40SassCSS&style=social\"></a>\n      <br>\n      <a href=\"https://stackoverflow.com/questions/tagged/sass\"><img alt=\"stackoverflow\" src=\"https://img.shields.io/stackexchange/stackoverflow/t/sass?label=Sass%20questions&logo=stackoverflow&style=social\"></a>\n      <br>\n      <a href=\"https://gitter.im/sass/sass?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge\"><img alt=\"Gitter\" src=\"https://img.shields.io/gitter/room/sass/sass?label=chat&logo=gitter&style=social\"></a>\n    </td>\n  </tr>\n</table>\n\n[dart]: https://www.dartlang.org\n[sass]: https://sass-lang.com/\n\n* [Using Dart Sass](#using-dart-sass)\n  * [From Chocolatey or Scoop (Windows)](#from-chocolatey-or-scoop-windows)\n  * [From Homebrew (macOS)](#from-homebrew-macos-or-linux)\n  * [Standalone](#standalone)\n  * [From npm](#from-npm)\n    * [Dart Sass in the Browser](#dart-sass-in-the-browser)\n    * [Legacy JavaScript API](#legacy-javascript-api)\n    * [Using Sass with Jest](#using-sass-with-jest)\n  * [From Pub](#from-pub)\n    * [`sass_api` Package](#sass_api-package)\n  * [From Source](#from-source)\n  * [In Docker](#in-docker)\n* [Why Dart?](#why-dart)\n* [Compatibility Policy](#compatibility-policy)\n  * [Browser Compatibility](#browser-compatibility)\n  * [Node.js Compatibility](#nodejs-compatibility)\n  * [Invalid CSS](#invalid-css)\n* [Embedded Dart Sass](#embedded-dart-sass)\n  * [Usage](#usage)\n* [Behavioral Differences from Ruby Sass](#behavioral-differences-from-ruby-sass)\n\n## Using Dart Sass\n\nThere are a few different ways to install and run Dart Sass, depending on your\nenvironment and your needs.\n\n### From Chocolatey or Scoop (Windows)\n\nIf you use [the Chocolatey package manager](https://chocolatey.org/)\nor [the Scoop package manager](https://github.com/lukesampson/scoop) for\nWindows, you can install Dart Sass by running\n\n```cmd\nchoco install sass\n```\n\nor\n\n```cmd\nscoop install sass\n```\n\nThat'll give you a `sass` executable on your command line that will run Dart\nSass. See [the CLI docs][cli] for details.\n\n[cli]: https://sass-lang.com/documentation/cli/dart-sass\n\n### From Homebrew (macOS or Linux)\n\nIf you use [the Homebrew package manager](https://brew.sh/), you\ncan install Dart Sass by running\n\n```sh\nbrew install sass/sass/sass\n```\n\nThat'll give you a `sass` executable on your command line that will run Dart\nSass.\n\n### Standalone\n\nYou can download the standalone Dart Sass archive for your operating\nsystemâ€”containing the Dart VM and the snapshot of the executableâ€”from [the\nGitHub release page][]. Extract it, [add the directory to your path][], restart\nyour terminal, and the `sass` executable is ready to run!\n\n[the GitHub release page]: https://github.com/sass/dart-sass/releases/\n[add the directory to your path]: https://katiek2.github.io/path-doc/\n\n### From npm\n\nDart Sass is available, compiled to JavaScript, [as an npm package][npm]. You\ncan install it globally using `npm install -g sass` which will provide access to\nthe `sass` executable. You can also add it to your project using\n`npm install --save-dev sass`. This provides the executable as well as a\nlibrary:\n\n[npm]: https://www.npmjs.com/package/sass\n\n```js\nconst sass = require('sass');\n\nconst result = sass.compile(scssFilename);\n\n// OR\n\n// Note that `compileAsync()` is substantially slower than `compile()`.\nconst result = await sass.compileAsync(scssFilename);\n```\n\nSee [the Sass website][js api] for full API documentation.\n\n[js api]: https://sass-lang.com/documentation/js-api\n\n#### Dart Sass in the Browser\n\nThe `sass` npm package can also be run directly in the browser. It's compatible\nwith all major web bundlers as long as you disable renaming (such as\n[`--keep-names`] in esbuild). You can also import it directly from a browser as\nan ECMAScript Module without any bundling (assuming `node_modules` is served as\nwell):\n\n[`--keep-names`]: https://esbuild.github.io/api/#keep-names\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"immutable\": \"./node_modules/immutable/dist/immutable.es.js\",\n      \"sass\": \"./node_modules/sass/sass.default.js\"\n    }\n  }\n</script>\n\n<!-- Support browsers like Safari 16.3 without import maps support. -->\n<script async src=\"https://unpkg.com/es-module-shims@^1.7.0\" crossorigin=\"anonymous\"></script>\n\n<script type=\"module\">\n  import * as sass from 'sass';\n\n  console.log(sass.compileString(`\n    .box {\n      width: 10px + 15px;\n    }\n  `));\n</script>\n```\n\nOr from a CDN:\n\n```html\n<script type=\"importmap\">\n  {\n    \"imports\": {\n      \"immutable\": \"https://unpkg.com/immutable@^4.0.0\",\n      \"sass\": \"https://unpkg.com/sass@^1.63.0/sass.default.js\"\n    }\n  }\n</script>\n\n<!-- Support browsers like Safari 16.3 without import maps support. -->\n<script async src=\"https://unpkg.com/es-module-shims@^1.7.0\" crossorigin=\"anonymous\"></script>\n\n<script type=\"module\">\n  import * as sass from 'sass';\n\n  console.log(sass.compileString(`\n    .box {\n      width: 10px + 15px;\n    }\n  `));\n</script>\n```\n\nOr even bundled with all its dependencies:\n\n```html\n<script type=\"module\">\n  import * as sass from 'https://jspm.dev/sass';\n\n  console.log(sass.compileString(`\n    .box {\n      width: 10px + 15px;\n    }\n  `));\n</script>\n```\n\nSince the browser doesn't have access to the filesystem, the [`compile()`] and\n`compileAsync()` functions aren't available for it. If you want to load other\nfiles, you'll need to pass a [custom importer] to [`compileString()`] or\n[`compileStringAsync()`]. The [legacy API] is also not supported in the browser.\n\n[`compile()`]: https://sass-lang.com/documentation/js-api/functions/compile\n[`compileAsync()`]: https://sass-lang.com/documentation/js-api/functions/compileAsync\n[custom importer]: https://sass-lang.com/documentation/js-api/interfaces/stringoptions/#importer\n[`compileString()`]: https://sass-lang.com/documentation/js-api/functions/compileString\n[`compileStringAsync()`]: https://sass-lang.com/documentation/js-api/functions/compileStringAsync\n[legacy API]: #legacy-javascript-api\n\n#### Legacy JavaScript API\n\nDart Sass also supports an older JavaScript API that's fully compatible with\n[Node Sass] (with a few exceptions listed below), with support for both the\n[`render()`] and [`renderSync()`] functions. This API is considered deprecated\nand will be removed in Dart Sass 2.0.0, so it should be avoided in new projects.\n\n[Node Sass]: https://github.com/sass/node-sass\n[`render()`]: https://sass-lang.com/documentation/js-api/functions/render\n[`renderSync()`]: https://sass-lang.com/documentation/js-api/functions/renderSync\n\nSass's support for the legacy JavaScript API has the following limitations:\n\n* Only the `\"expanded\"` and `\"compressed\"` values of [`outputStyle`] are\n  supported.\n\n* Dart Sass doesn't support the [`precision`] option. Dart Sass defaults to a\n  sufficiently high precision for all existing browsers, and making this\n  customizable would make the code substantially less efficient.\n\n* Dart Sass doesn't support the [`sourceComments`] option. Source maps are the\n  recommended way of locating the origin of generated selectors.\n\n[`outputStyle`]: https://sass-lang.com/documentation/js-api/interfaces/LegacySharedOptions#outputStyle\n[`precision`]: https://github.com/sass/node-sass#precision\n[`sourceComments`]: https://github.com/sass/node-sass#sourcecomments\n\n#### Using Sass with Jest\n\nIf you're using [Jest] to run your tests, be aware that it has a [longstanding\nbug] where its default test environment breaks JavaScript's built-in\n[`instanceof` operator]. Dart Sass's JS package uses `instanceof` fairly\nheavily, so in order to avoid breaking Sass you'll need to install\n[`jest-environment-node-single-context`] and add `testEnvironment:\n'jest-environment-node-single-context'` to your Jest config.\n\n[Jest]: https://jestjs.io/\n[longstanding bug]: https://github.com/facebook/jest/issues/2549\n[`instanceof` operator]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof\n[`jest-environment-node-single-context`]: https://www.npmjs.com/package/jest-environment-node-single-context\n\n### From Pub\n\nIf you're a Dart user, you can install Dart Sass globally using `pub global\nactivate sass`, which will provide a `sass` executable. You can also add it to\nyour pubspec and use it as a library. We strongly recommend importing it with\nthe prefix `sass`:\n\n```dart\nimport 'package:sass/sass.dart' as sass;\n\nvoid main(List<String> args) {\n  print(sass.compile(args.first));\n}\n```\n\nSee [the Dart API docs][api] for details.\n\n[api]: https://www.dartdocs.org/documentation/sass/latest/sass/sass-library.html\n\n#### `sass_api` Package\n\nDart users also have access to more in-depth APIs via the [`sass_api` package].\nThis provides access to the Sass AST and APIs for resolving Sass loads without\nrunning a full compilation. It's separated out into its own package so that it\ncan increase its version number independently of the main `sass` package.\n\n[`sass_api` package]: https://pub.dev/packages/sass_api\n\n### From Source\n\nAssuming you've already checked out this repository:\n\n1. [Install Dart](https://www.dartlang.org/install). If you download an archive\n   manually rather than using an installer, make sure the SDK's `bin` directory\n   is on your `PATH`.\n\n2. [Install Buf]. This is used to build the protocol buffers for the [embedded\n   compiler].\n\n3. In this repository, run `dart pub get`. This will install Dart Sass's\n   dependencies.\n\n4. Run `dart run grinder protobuf`. This will download and build the embedded\n   protocol definition.\n\n5. Run `dart bin/sass.dart path/to/file.scss`.\n\n[Install Buf]: https://docs.buf.build/installation\n[embedded compiler]: #embedded-dart-sass\n\nThat's it!\n\n### In Docker\n\nYou can install and run Dart Sass within Docker using the following Dockerfile\ncommands:\n\n```Dockerfile\n# Dart stage\nFROM bufbuild/buf AS buf\nFROM dart:stable AS dart\n\n# Add your scss files\nCOPY --from=another_stage /app /app\n\n# Include Protocol Buffer binary\nCOPY --from=buf /usr/local/bin/buf /usr/local/bin/\n\nWORKDIR /dart-sass\nRUN git clone https://github.com/sass/dart-sass.git . && \\\n  dart pub get && \\\n  dart run grinder protobuf\n# This is where you run sass.dart on your scss file(s)\nRUN dart ./bin/sass.dart /app/sass/example.scss /app/public/css/example.css\n```\n\n## Why Dart?\n\nDart Sass has replaced Ruby Sass as the canonical implementation of the Sass\nlanguage. We chose Dart because it presented a number of advantages:\n\n* It's fast. The Dart VM is highly optimized, and getting faster all the time\n  (for the latest performance numbers, see [`perf.md`][perf]). It's much faster\n  than Ruby, and close to par with C++.\n\n* It's portable. The Dart VM has no external dependencies and can compile\n  applications into standalone snapshot files, so we can distribute Dart Sass as\n  only three files (the VM, the snapshot, and a wrapper script). Dart can also\n  be compiled to JavaScript, which makes it easy to distribute Sass through npm,\n  which the majority of our users use already.\n\n* It's easy to write. Dart is a higher-level language than C++, which means it\n  doesn't require lots of hassle with memory management and build systems. It's\n  also statically typed, which makes it easier to confidently make large\n  refactors than with Ruby.\n\n* It's friendlier to contributors. Dart is substantially easier to learn than\n  Ruby, and many Sass users in Google in particular are already familiar with\n  it. More contributors translates to faster, more consistent development.\n\n[perf]: https://github.com/sass/dart-sass/blob/master/perf.md\n\n## Compatibility Policy\n\nFor the most part, Dart Sass follows [semantic versioning][]. We consider all of\nthe following to be part of the versioned API:\n\n[semantic versioning]: https://semver.org/\n\n* The Sass language semantics implemented by Dart Sass.\n* The Dart API.\n* The JavaScript API.\n* The command-line interface.\n\nBecause Dart Sass has a single version that's shared across the Dart,\nJavaScript, and standalone distributions, this may mean that we increment the\nmajor version number when there are in fact no breaking changes for one or more\ndistributions. However, we will attempt to limit the number of breaking changes\nwe make and group them in as few releases as possible to minimize churn. We\nstrongly encourage users to use [the changelog][] for a full understanding of\nall the changes in each release.\n\n[the changelog]: https://github.com/sass/dart-sass/blob/master/CHANGELOG.md\n\nThere is one exception where breaking changes may be made outside of a major\nversion revision. It is occasionally the case that CSS adds a feature that's\nincompatible with existing Sass syntax in some way. Because Sass is committed to\nfull CSS compatibility, we occasionally need to break compatibility with old\nSass code in order to remain compatible with CSS.\n\nIn these cases, we will first release a version of Sass that emits deprecation\nwarnings for any stylesheets whose behavior will change. Then, at least three\nmonths after the release of a version with these deprecation warnings, we will\nrelease a minor version with the breaking change to the Sass language semantics.\n\n### Browser Compatibility\n\nIn general, we consider any change to Dart Sass's CSS output that would cause\nthat CSS to stop working in a real browser to be a breaking change. However,\nthere are some cases where such a change would have substantial benefits and\nwould only negatively affect a small minority of rarely-used browsers. We don't\nwant to have to block such a change on a major version release.\n\nAs such, if a change would break compatibility with less than 2% of the global\nmarket share of browser according to [StatCounter GlobalStats][], we may release\na minor version of Dart Sass with that change.\n\n[StatCounter GlobalStats]: https://gs.statcounter.com/\n\n### Node.js Compatibility\n\nWe consider dropping support for a given version of Node.js to be a breaking\nchange *as long as* that version is still supported by Node.js. This means that\nreleases listed as Current, Active LTS, or Maintenance LTS according to [the\nNode.js release page][]. Once a Node.js version is out of LTS, Dart Sass\nconsiders itself free to break support if necessary.\n\n[the Node.js release page]: https://nodejs.org/en/about/previous-releases\n\n### Invalid CSS\n\nChanges to the behavior of Sass stylesheets that produce invalid CSS output are\n_not_ considered breaking changes. Such changes are almost always necessary when\nadding support for new CSS features, and delaying all such features until a new\nmajor version would be unduly burdensome for most users.\n\nFor example, when Sass began parsing `calc()` expressions, the invalid\nexpression `calc(1 +)` became a Sass error where before it was passed through\nas-is. This was not considered a breaking change, because `calc(1 +)` was never\nvalid CSS to begin with.\n\n## Embedded Dart Sass\n\nDart Sass includes an implementation of the compiler side of the [Embedded Sass\nprotocol]. It's designed to be embedded in a host language, which then exposes\nan API for users to invoke Sass and define custom functions and importers.\n\n[Embedded Sass protocol]: https://github.com/sass/sass/blob/main/spec/embedded-protocol.md\n\n### Usage\n\n* `sass --embedded` starts the embedded compiler and listens on stdin.\n* `sass --embedded --version` prints `versionResponse` with `id = 0` in JSON and\n  exits.\n\nThe `--embedded` command-line flag is not available when you install Dart Sass\nas an [npm package]. No other command-line flags are supported with\n`--embedded`.\n\n[npm package]: #from-npm\n\n## Behavioral Differences from Ruby Sass\n\nThere are a few intentional behavioral differences between Dart Sass and Ruby\nSass. These are generally places where Ruby Sass has an undesired behavior, and\nit's substantially easier to implement the correct behavior than it would be to\nimplement compatible behavior. These should all have tracking bugs against Ruby\nSass to update the reference behavior.\n\n1. `@extend` only accepts simple selectors, as does the second argument of\n   `selector-extend()`. See [issue 1599][].\n\n2. Subject selectors are not supported. See [issue 1126][].\n\n3. Pseudo selector arguments are parsed as `<declaration-value>`s rather than\n   having a more limited custom parsing. See [issue 2120][].\n\n4. The numeric precision is set to 10. See [issue 1122][].\n\n5. The indented syntax parser is more flexible: it doesn't require consistent\n   indentation across the whole document. See [issue 2176][].\n\n6. Colors do not support channel-by-channel arithmetic. See [issue 2144][].\n\n7. Unitless numbers aren't `==` to unit numbers with the same value. In\n   addition, map keys follow the same logic as `==`-equality. See\n   [issue 1496][].\n\n8. `rgba()` and `hsla()` alpha values with percentage units are interpreted as\n   percentages. Other units are forbidden. See [issue 1525][].\n\n9. Too many variable arguments passed to a function is an error. See\n   [issue 1408][].\n\n10. Allow `@extend` to reach outside a media query if there's an identical\n    `@extend` defined outside that query. This isn't tracked explicitly, because\n    it'll be irrelevant when [issue 1050][] is fixed.\n\n11. Some selector pseudos containing placeholder selectors will be compiled\n    where they wouldn't be in Ruby Sass. This better matches the semantics of\n    the selectors in question, and is more efficient. See [issue 2228][].\n\n12. The old-style `:property value` syntax is not supported in the indented\n    syntax. See [issue 2245][].\n\n13. The reference combinator is not supported. See [issue 303][].\n\n14. Universal selector unification is symmetrical. See [issue 2247][].\n\n15. `@extend` doesn't produce an error if it matches but fails to unify. See\n    [issue 2250][].\n\n16. Dart Sass currently only supports UTF-8 documents. We'd like to support\n    more, but Dart currently doesn't support them. See [dart-lang/sdk#11744][],\n    for example.\n\n[issue 1599]: https://github.com/sass/sass/issues/1599\n[issue 1126]: https://github.com/sass/sass/issues/1126\n[issue 2120]: https://github.com/sass/sass/issues/2120\n[issue 1122]: https://github.com/sass/sass/issues/1122\n[issue 2176]: https://github.com/sass/sass/issues/2176\n[issue 2144]: https://github.com/sass/sass/issues/2144\n[issue 1496]: https://github.com/sass/sass/issues/1496\n[issue 1525]: https://github.com/sass/sass/issues/1525\n[issue 1408]: https://github.com/sass/sass/issues/1408\n[issue 1050]: https://github.com/sass/sass/issues/1050\n[issue 2228]: https://github.com/sass/sass/issues/2228\n[issue 2245]: https://github.com/sass/sass/issues/2245\n[issue 303]: https://github.com/sass/sass/issues/303\n[issue 2247]: https://github.com/sass/sass/issues/2247\n[issue 2250]: https://github.com/sass/sass/issues/2250\n[dart-lang/sdk#11744]: https://github.com/dart-lang/sdk/issues/11744\n\nDisclaimer: this is not an official Google product.\n"
        },
        {
          "name": "analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.396484375,
          "content": "# We could depend on sass_analysis with a path dependency and include\n# package:sass_analysis/analysis_options.yaml, but path dependencies don't play\n# nicely with the logic we use to determine whether generated files are\n# out-of-date (because they cause \"pub run\" to modify the lockfile before it\n# runs the executable).\ninclude: analysis/lib/analysis_options.yaml\nanalyzer:\n  exclude: ['**/*.pb*.dart']\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "buf.gen.yaml",
          "type": "blob",
          "size": 0.05859375,
          "content": "version: v1\nplugins:\n- plugin: dart\n  out: lib/src/embedded\n"
        },
        {
          "name": "buf.work.yaml",
          "type": "blob",
          "size": 0.0458984375,
          "content": "version: v1\ndirectories: [build/language/spec]\n"
        },
        {
          "name": "dart_test.yaml",
          "type": "blob",
          "size": 0.0546875,
          "content": "tags:\n  # Indicates tests that require Node.js.\n  node:\n"
        },
        {
          "name": "dartdoc_options.yaml",
          "type": "blob",
          "size": 0.1494140625,
          "content": "dartdoc:\n  categories:\n    Compile:\n      markdown: doc/compile.md\n    Importer:\n      markdown: doc/importer.md\n    Value:\n      markdown: doc/value.md\n"
        },
        {
          "name": "differences.md",
          "type": "blob",
          "size": 4.8349609375,
          "content": "# Differences from Ruby Sass\n\nDart Sass was created and architected by Natalie Weizenbaum, the lead designer\nand developer of Ruby Sass. Its architecture is informed by lessons learned from\nworking on the Ruby implementation, and as such differs in a number of key ways.\nThis document is intended to record the differences and to act as a guide to\nDart Sass for developers familiar with Ruby Sass.\n\n1. The biggest difference is that Dart Sass intentionally tries to minimize the\n   number of whole-stylesheet compilation phases. Ruby Sass loses a lot of time\n   to the raw mechanics of AST traversal, so minimizing that should produce\n   enough benefit to offset the more complex code.\n\n   The parse phase and the CSS serialization phase both still exist and do more\n   or less the same thing as in Ruby Sass. However, the perform, cssize, and\n   extend phases are now a single perform phase. This phase executes SassScript\n   and builds the final CSS syntax tree from the resulting information. Extends\n   and bubbling are applied as the tree is being created.\n\n   The nesting verification phases have been removed in favor of more thorough\n   parser-based checking for appropriate nesting, as well as dynamic\n   valid-parent checks in the perform phase where necessary.\n\n2. Dart Sass uses entirely separate abstract syntax trees for the Sass input\n   than for the CSS output, rather than having some node types shared between\n   them. This better models the fact that the data being consumed from the user\n   is very different than the data being emitted. In particular, the input data\n   often has SassScript in places where the output needs to rely on plain CSS\n   for proper formatting.\n\n3. The Sass abstract syntax tree is immutable. This is enabled in part by #2,\n   since there's no need to set resolved data on a node that was not previously\n   resolved. Immutability makes code dealing with the AST much easier to reason\n   about and consequently to refactor.\n\n   The CSS AST, however, is mutable. This is necessary to avoid duplicating all\n   the data in the tree when converting it to an immutable form. This is\n   especially important because bubbling behavior requires that nodes either be\n   inserted or removed from between existing children. We may still use\n   interfaces to expose only an immutable view of the CSS AST after\n   construction, though.\n\n4. There's no distinction between the statement-level parser and the\n   expression-level parser. This distinction in Ruby Sass was an artifact of the\n   original indented-syntax-only implementation and didn't really provide any\n   utility.\n\n5. The parser is character-based rather than regular-expression-based. This is\n   faster due to Dart's well-tuned support for integers, and it gives developers\n   finer control over the precise workings of the parser.\n\n6. The parser is more switch-based and less recursion-based. The Ruby Sass\n   parser's methods returned a value or `nil`, and much of its logic was based\n   on trying to consume one production and moving on to another if the first\n   returned `nil`. This makes parsing tend towards `O(n)` in the number of\n   productions. The Dart Sass parser instead checks the first character (or\n   several characters if necessary) and chooses which production to consume\n   based on those.\n\n7. The indented syntax parser and the SCSS parser are subclasses of the same\n   superclass. This substantially reduces the amount of duplicated code between\n   the two, and makes it easier to give the indented parser good error messaging\n   and source span tracking.\n\n8. The environment uses an array of maps to track variable (and eventually\n   function and mixin) definitions. This requires fewer allocations and produces\n   more cache locality.\n\n9. Because extension is done during the creation of the CSS AST, it works\n   differently than the Ruby implementation. Ruby builds a collection of all\n   `@extend` directives, and then iterates over the tree applying them to each\n   selector as applicable. The perform visitor has similar behavior when\n   extending selectors that appear after the `@extend`, but it also needs to\n   handle selectors that appear before. To do so, it builds a map of simple\n   selectors to the rules that contain them. When an `@extend` is encountered,\n   it indexes into this map to determine if anything needs to be extended, and\n   applies the extend as needed.\n\n9. Newlines in selectors are tracked using a `ComplexSelector.lineBreak` rather\n   than being included in the complex selector's components directly. The\n   presence of this flag indicates that a newline should be written *before* the\n   selector. This ensures that the components contain only\n   semantically-meaningful objects, rather than a mix of semantics and style\n   that must be parsed out. In addition, newlines are *never* preserved within\n   complex selectors; in general, selectors should be short enough that this\n   isn't an issue.\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.388671875,
          "content": "{\n  \"//\": [\n    \"This isn't the official package.json for Dart Sass. It's just used to \",\n    \"install dependencies used for testing the Node API. It defines a package\",\n    \"name to enable GitHub's dependency graph tracking.\"\n  ],\n  \"name\": \"sass\",\n  \"devDependencies\": {\n    \"@parcel/watcher\": \"^2.4.1\",\n    \"chokidar\": \"^4.0.0\",\n    \"immutable\": \"^5.0.2\",\n    \"intercept-stdout\": \"^0.1.2\"\n  }\n}\n"
        },
        {
          "name": "package",
          "type": "tree",
          "content": null
        },
        {
          "name": "perf.md",
          "type": "blob",
          "size": 6.169921875,
          "content": "These benchmarks are informal and only intended to give us a general sense of\nthe benefit Dart Sass could provide relative to other implementations.\n\nThis was tested against:\n\n* libsass 006bbf5 and sassc 66f0ef3 compiled with g++ (Debian 11.2.0-10) 11.2.0.\n* Dart Sass 4fa365a on Dart 2.15.0 (stable) (Fri Dec 3 14:23:23 2021 +0100) on \"linux_x64\" and Node v16.10.0.\n\non Debian x64 with Intel Core i7-8650U CPU @ 1.90GHz.\n\n# Measurements\n\nI ran five instances of each configuration and recorded the fastest time.\n\n## Small Plain CSS\n\nRunning on a file containing 4 instances of `.foo {a: b}`:\n\n* sassc: 0.003s\n* Dart Sass from a script snapshot: 0.327s\n* Dart Sass native executable: 0.011s\n* Dart Sass on Node.js: 0.281s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 3.7x slower than libsass\n* 25.5x faster than Dart Sass on Node\n\n## Large Plain CSS\n\nRunning on a file containing 2^17 instances of `.foo {a: b}`:\n\n* sassc: 1.769s\n* Dart Sass from a script snapshot: 2.061s\n* Dart Sass native executable: 1.666s\n* Dart Sass on Node.js: 3.913s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.1x faster than libsass\n* 2.3x faster than Dart Sass on Node\n\n## Preceding Sparse `@extend`\n\nRunning on a file containing `.x {@extend .y}`, 2^17 instances of `.foo {a: b}`, and then `.y {a: b}`:\n\n* sassc: 1.846s\n* Dart Sass from a script snapshot: 2.218s\n* Dart Sass native executable: 1.726s\n* Dart Sass on Node.js: 4.176s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.1x faster than libsass\n* 2.4x faster than Dart Sass on Node\n\n## Following Sparse `@extend`\n\nRunning on a file containing `.y {a: b}`, 2^17 instances of `.foo {a: b}`, and then `.x {@extend .y}`:\n\n* sassc: 1.778s\n* Dart Sass from a script snapshot: 2.058s\n* Dart Sass native executable: 2.152s\n* Dart Sass on Node.js: 4.231s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.2x slower than libsass\n* 2.0x faster than Dart Sass on Node\n\n## Preceding Dense `@extend`\n\nRunning on a file containing `.bar {@extend .foo}` followed by 2^17 instances of `.foo {a: b}`:\n\n* sassc: 2.393s\n* Dart Sass from a script snapshot: 2.981s\n* Dart Sass native executable: 2.942s\n* Dart Sass on Node.js: 9.858s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.2x slower than libsass\n* 3.4x faster than Dart Sass on Node\n\n## Following Dense `@extend`\n\nRunning on a file containing 2^17 instances of `.foo {a: b}` followed by `.bar {@extend .foo}`:\n\n* sassc: 2.685s\n* Dart Sass from a script snapshot: 3.838s\n* Dart Sass native executable: 3.033s\n* Dart Sass on Node.js: 9.527s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.1x slower than libsass\n* 3.1x faster than Dart Sass on Node\n\n## Bootstrap\n\nRunning on a file containing 16 instances of importing the Bootstrap framework:\n\n* sassc: 0.891s\n* Dart Sass from a script snapshot: 2.041s\n* Dart Sass native executable: 0.787s\n* Dart Sass on Node.js: 4.218s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.1x faster than libsass\n* 5.4x faster than Dart Sass on Node\n\n## a11ycolor\n\nRunning on a file containing test cases for a computation-intensive color-processing library:\n\n* sassc: 0.387s\n* Dart Sass from a script snapshot: 0.970s\n* Dart Sass native executable: 0.367s\n* Dart Sass on Node.js: 1.409s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.1x faster than libsass\n* 3.8x faster than Dart Sass on Node\n\n## Duomo\n\nRunning on a file containing the output of the numerically-intensive Duomo framework (skipping LibSass due to module system use):\n\n* Dart Sass from a script snapshot: 3.946s\n* Dart Sass native executable: 2.169s\n* Dart Sass on Node.js: 7.108s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 3.3x faster than Dart Sass on Node\n\n## Carbon\n\nRunning on a file containing the output of the import-intensive Carbon framework:\n\n* sassc: 9.373s\n* Dart Sass from a script snapshot: 7.454s\n* Dart Sass native executable: 7.537s\n* Dart Sass on Node.js: 25.790s\n\nBased on these numbers, Dart Sass from a native executable is approximately:\n\n* 1.2x faster than libsass\n* 3.4x faster than Dart Sass on Node\n\n# Prior Measurements\n\n* [1.22.6](https://github.com/sass/dart-sass/blob/eec6ccc9d96fdb5dd30122a0c824efe8a6bfd168/perf.md).\n* [1.22.5](https://github.com/sass/dart-sass/blob/ed73c2c053435703cfbee8709f0dfb110cd31487/perf.md).\n* [1.22.4](https://github.com/sass/dart-sass/blob/a7172a2b1dd48b339e5d57159ed364ffb9f5812e/perf.md).\n* [1.20.2](https://github.com/sass/dart-sass/blob/4b7699291c9f69533d25980d23b0647266b665f2/perf.md).\n* [1.13.4](https://github.com/sass/dart-sass/blob/b6ccc91a138e75420227ff79381c5f70e60254f1/perf.md).\n* [1.6.0](https://github.com/sass/dart-sass/blob/048cbe197a77e1cf4b837a40a5acb737e949fd5c/perf.md).\n* [1.0.0-alpha.8](https://github.com/sass/dart-sass/blob/be44245a849f2bb18b5ca1fc74f3043a36da17f0/perf.md).\n* [Pre-alpha, 30 September 2016](https://github.com/sass/dart-sass/blob/169370bf18fd01d0618b0fc00d9db33e2fc52aa7/perf.md).\n* [Pre-alpha, 19 August 2016](https://github.com/sass/dart-sass/blob/4bea13cfe57d9e3c7f1f8580b80c59abe1cfabf8/perf.md).\n* [Pre-alpha, 15 July 2016](https://github.com/sass/dart-sass/blob/a3e00059c4371bfde9afada1759d8484aee05584/perf.md).\n\n# Conclusions\n\nThis is the first measurement with Dart Sass running as ahead-of-time-compiled\nnative code, and the results are encouraging. It's well below the 100ms\nthreshold for tiny files, and it's on par with SassC for most test cases. SassC\nstill leads for tests with many extends, although only slightly, and for one of\nour real-world test cases (although Dart Sass leads in others). The two\nimplementations can be fairly described as having about the same performance\noverall.\n\nDart Sass on Node is still substantially slower than on the Dart VM, and that\nrelative slowdown becomes more pronounced as the raw Dart code becomes faster.\nSolutions for this such as [the embedded protocol][] or [WebAssembly support][]\nare becoming more and more important.\n\n[the embedded protocol]: https://github.com/sass/sass-embedded-protocol\n[WebAssembly support]: https://github.com/dart-lang/sdk/issues/32894\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 1.072265625,
          "content": "name: sass\nversion: 1.83.1\ndescription: A Sass implementation in Dart.\nhomepage: https://github.com/sass/dart-sass\n\nexecutables:\n  dart-sass: sass\n  sass: sass\n\nenvironment:\n  sdk: \">=3.3.0 <4.0.0\"\n\ndependencies:\n  args: ^2.0.0\n  async: ^2.5.0\n  charcode: ^1.2.0\n  cli_pkg: ^2.11.0\n  cli_repl: ^0.2.1\n  collection: ^1.16.0\n  http: ^1.1.0\n  js: ^0.6.3\n  meta: ^1.3.0\n  native_synchronization: ^0.3.0\n  node_interop: ^2.1.0\n  package_config: ^2.0.0\n  path: ^1.8.0\n  pool: ^1.5.1\n  protobuf: \">=2.0.0 <4.0.0\"\n  pub_semver: ^2.0.0\n  source_maps: ^0.10.10\n  source_span: ^1.10.0\n  stack_trace: ^1.10.0\n  stream_channel: ^2.1.0\n  stream_transform: ^2.0.0\n  string_scanner: ^1.3.0\n  term_glyph: ^1.2.0\n  typed_data: ^1.1.0\n  watcher: ^1.0.0\n\ndev_dependencies:\n  analyzer: ^6.8.0\n  archive: ^3.1.2\n  crypto: ^3.0.0\n  dart_style: ^3.0.0\n  dartdoc: ^8.0.14\n  grinder: ^0.9.0\n  node_preamble: ^2.0.2\n  lints: \">=4.0.0 <6.0.0\"\n  protoc_plugin: ^21.1.2\n  pub_api_client: \">=2.1.1 <4.0.0\"\n  pubspec_parse: ^1.3.0\n  test: ^1.16.7\n  test_descriptor: ^2.0.0\n  test_process: ^2.0.0\n  yaml: ^3.1.0\n  cli_util: ^0.4.0\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tool",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}