{
  "metadata": {
    "timestamp": 1736710548932,
    "page": 123,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Sky24n/flustars",
      "stars": 1910,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3876953125,
          "content": "# See https://www.dartlang.org/guides/libraries/private-files\n\n# Files and directories created by pub\n.dart_tool/\n.packages\n.pub/\nbuild/\n# If you're building an application, you may want to check-in your pubspec.lock\npubspec.lock\n\n# Directory created by dartdoc\n# If you don't generate documentation locally you can remove this line.\ndoc/api/\n\n*/.idea/\n.idea/\n/.idea/workspace.xml\n/.idea/libraries"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 8af6b2f038c1172e61d418869363a28dffec3cb4\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.3349609375,
          "content": "## 2.0.1\n\n* TODO: dependencies update.\n\n## 2.0.0\n\n* TODO: Migrate to null-safety.\n\n## 0.3.3\n\n* TODO: split [sp_util](https://github.com/Sky24n/sp_util) as a separate library.\n\n## 0.3.2\n\n* TODO: remove MyAppBar.\n\n## 0.3.1\n\n* TODO: add ImageUtil, Refactor DirectoryUtil.\n\n## 0.2.6+2\n\n* TODO: fix minimum version dependency.\n\n## 0.2.6+1\n\n* TODO: fix path_provider compatible.\n\n## 0.2.6\n\n* TODO: dependencies common_utils ，new DirectoryUtil, SpUtil add getObj，getObjList, ScreenUtil add getAdapterSize, getAdapterSizeCtx.\n\n## 0.2.5+1\n\n* TODO: fix WidgetUtil error with flutter v1.6.3.\n\n## 0.2.5\n\n* TODO: WidgetUtil add getImageWH(x,x,x,x).\n\n## 0.2.4\n\n* TODO: synchronized : >=0.1.0 - 3.0.0 shared_preferences >= 0.1.1 - 1.0.0\n\n## 0.2.3\n\n* TODO: synchronized : any , shared_preferences : any , SpUtil add putObject，getObject，putObjectList，getObjectList。\n\n## 0.2.2\n\n* TODO: SpUtil add get default value.\n\n## 0.1.9\n\n* TODO: remove DioUtil.\n\n## 0.1.8\n\n* TODO: fix ScreenUtil bug, Dio v1.0.13.\n\n## 0.1.7\n\n* TODO: Dio v1.0.12.\n\n## 0.1.6\n\n* TODO: Dio Util, print http log, singleton mode.\n\n## 0.1.5\n\n* TODO: Screen adaptation，屏幕适配.\n\n## 0.1.4\n\n* TODO: ScreenUtil update. UI MyAppBar.\n\n## 0.1.3\n\n* TODO: Health updated.\n\n## 0.1.2\n\n* TODO: SpUtil updated.\n\n## 0.1.0\n\n* TODO: Contains SpUtil,ScreenUtil,WidgetUtil.\n\n## 0.0.1\n\n* TODO: Describe initial release.\n"
        },
        {
          "name": "CHANGE_LOG.md",
          "type": "blob",
          "size": 3.361328125,
          "content": "# 更新日志\n\nv0.3.2\nremove MyAppBar。\n\nv0.3.0\n新增ImageUtil。\n\n[common_utils](https://github.com/Sky24n/common_utils)新版本v1.1.3。  \n如果项目中使用了 flustars: ^0.2.6及以上版本。  \n删除pubspec.lock文件，直接运行flutter  packages get 即可使用最新版！\n\nv1.1.3 (2019.07.10)  \n1、新增TextUtil 银行卡号每隔4位加空格，每隔3三位加逗号，隐藏手机号等等.  \n2、新增EnDecodeUtil md5加密，Base64加/解密.  \n3、DateUtil 新增日期格式化，支持自定义格式输出。  \n4、LogUtil 支持输出超长log。  \n5、RegexUtil 支持199号段。\n```dart\n/// DateUtil\nDateUtil.formatDateMs(DateTime.now().millisecondsSinceEpoch, format: DataFormats.full); // 2019-07-09 16:51:14\nDateUtil.formatDateStr(\"2019-07-09 16:51:14\", format: \"yyyy/M/d HH:mm:ss\"); // 2019/7/9 16:51:14\nDateUtil.formatDate(DateTime.now(), format: \"yyyy/MM/dd HH:mm:ss\");  // 2019/07/09 16:51:14\n  \n/// TextUtil\nString phoneNo = TextUtil.formatSpace4(\"15845678910\"); // 1584 5678 910\nString num     = TextUtil.formatComma3(\"12345678\"); // 12,345,678\nString phoneNo = TextUtil.hideNumber(\"15845678910\")// 158****8910\n```\n\n\nv0.2.6 (2019.06.11)  \n1.新增文件目录工具类\n```dart\nawait DirectoryUtil.getInstance();\nString path = DirectoryUtil.getTempPath(fileName: 'demo.png', category: 'image');\nString path = DirectoryUtil.getAppDocPath(fileName: 'demo.mp4', category: 'video');\nString path = DirectoryUtil.getStoragePath(fileName: 'flutterwanandroid.apk', package: 'com.thl.flutterwanandroid');\n\nDirectory dir = DirectoryUtil.createTempDirSync(package: 'doc', category: 'image');\n...\n```\n\n2.SpUtil全面支持读取对象，对象列表。\n```dart\nCity hisCity = SpUtil.getObj(\"loc_city\", (v) => City.fromJson(v));  \nList<City> _cityList = SpUtil.getObjList(\"loc_city_list\", (v) => City.fromJson(v));\n```\n\n3.ScreenUtil 兼容横/纵屏适配。\n```dart\ndouble adapterSize = ScreenUtil.getInstance().getAdapterSize(100);\ndouble adapterSize = ScreenUtil.getAdapterSizeCtx(context, 100)\n```\n\nv0.2.5 (2019.03.07)  \nWidgetUtil 新增获取图片尺寸。  \n/// get image width height，load error return Rect.zero.（unit px）  \n/// 获取图片宽高，加载错误情况返回 Rect.zero.（单位 px）  \nFuture<Rect> getImageWH({Image image, String url, String localUrl, String package});\n\n/// get image width height, load error throw exception.（unit px）  \n/// 获取图片宽高，加载错误会抛出异常.（单位 px）  \nFuture<Rect> getImageWHE({Image image, String url, String localUrl, String package});\n```dart\n/// 获取CachedNetworkImage下的图片尺寸\nImage image = new Image(image: new CachedNetworkImageProvider(\"Url\"));\nRect rect1 = await WidgetUtil.getImageWH(image: image);  \n\n/// 其他image\nImage imageAsset = new Image.asset(\"\");\nImage imageFile = new Image.file(File(\"path\"));\nImage imageNetwork = new Image.network(\"url\");\nImage imageMemory = new Image.memory(null);\n\n/// 获取网络图片尺寸\nRect rect2 = await WidgetUtil.getImageWH(url: \"Url\");\n\n/// 获取本地图片尺寸 localUrl 需要全路径\nRect rect3 = await WidgetUtil.getImageWH(localUrl: \"assets/images/3.0x/ali_connors.png\");\n\n/// 其他方式\nWidgetUtil.getImageWH(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n});\n\nWidgetUtil.getImageWHE(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n}).catchError((error) {\n  print(\"rect: \" + error.toString();\n});\n```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2802734375,
          "content": "BSD 2-Clause License\n\nCopyright (c) 2018, Sky24n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README-EN.md",
          "type": "blob",
          "size": 17.5390625,
          "content": "Language: English | [中文简体](https://github.com/Sky24n/flustars)\n\n# flustars(Flutter common utils library)\n[![Pub](https://img.shields.io/pub/v/flustars.svg?style=flat-square)](https://pub.dartlang.org/packages/flustars)  \n\nFlutter common utils library, SharedPreferences Util, Screen Util, Directory Util, Widget Util, Image Util。If you have good tools, welcome PR.\n\nPub [flustars](https://pub.flutter-io.cn/packages/flustars)\n\n[✓] Flutter (Channel stable, v2.0.0, locale zh-Hans-CN)\n\n## Get started\n\n### Add dependency\n```yaml\ndependencies:\n  flustars: ^2.01\n  \nimport 'package:flustars/flustars.dart';\n\nor\n\n// git (version 0.3.2)\ndependencies:\n  flustars:\n    git:\n      url: git://github.com/Sky24n/flustars.git\n```\n\n### [Change Log](CHANGE_LOG.md)\nv2.0.0  \nMigrate to null-safety.\n\nv0.3.2\nremove MyAppBar。\n\nv0.3.0\nadd ImageUtil。\nDirectoryUtil change\n```dart\nbool _initTempDir = false;\nbool _initAppDocDir = false;\nbool _initAppSupportDir = false;\nbool _initStorageDir = false;\n\nremove package parm.\n```\n\n### Flutter common util library [flustars][flustars_github]\n 1、SpUtil       : SharedPreferences util, support save object, object list.  \n 2、ScreenUtil   : adapter size，screen size.  \n 3、WidgetUtil   : Widget rendering listener，get Widget Bounds.  \n 4、DioUtil      : dio util move to [DioUtil](https://github.com/Sky24n/FlutterRepos/blob/master/base_library/lib/src/data/net/dio_util.dart)。  \n 5、ImageUtil    : get image size.\n\n### Dart common util library [common_utils][common_utils_github]\n 1、TimelineUtil : timeline util.  \n 2、TimerUtil    : timer util.  \n 3、MoneyUtil    : money util.  \n 4、LogUtil      : log util.  \n 5、DateUtil     : date util.  \n 6、RegexUtil    : regex util, mobile, email, date.\n 7、NumUtil      : num util.  \n 8、ObjectUtil   : object util.\n 9、TextUtil     : TextUtil.  \n 10、EncryptUtil : EncryptUtil.  \n 11、JsonUtil    : JsonUtil.\n\n\n### APIs\n\n* #### SpUtil -> [Example](./example/lib/main.dart)\n```dart\ngetObj\ngetObjList\nputObject\ngetObject\nputObjectList\ngetObjectList\ngetString\nputString\ngetBool\nputBool\ngetInt\nputInt\ngetDouble\nputDouble\ngetStringList\nputStringList\ngetDynamic\nhaveKey\ngetKeys\nremove\nclear\nisInitialized\n  \n  \n/// SpUtil使用：\n/// 方式一\n/// 等待sp初始化完成后再运行app。\n/// sp初始化时间 release模式下30ms左右，debug模式下100多ms。\nvoid main() async {\n  await SpUtil.getInstance();\n  runApp(MyApp());\n}\n\nclass MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    /// 同步使用Sp。\n    SpUtil.remove(\"username\");\n    String defName = SpUtil.getString(\"username\", defValue: \"sky\");\n    SpUtil.putString(\"username\", \"sky24\");\n    String name = SpUtil.getString(\"username\");\n    print(\"MyApp defName: $defName, name: $name\");\n  }\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: SplashPage(),\n    );\n  }\n}  \n\n\n/// 方式二\n/// 增加闪屏页，在闪屏页SpUtil初始化完成， await SpUtil.getInstance();\n/// 跳转到主页后，可以直接同步使用。 String defName = SpUtil.getString(\"username\");\n   \nimport 'package:flustars/flustars.dart'; \n  \n/// SpUtil详细使用示例！  \nvoid main() => runApp(MyApp());\n  \nclass MyApp extends StatefulWidget {\n  @override\n  State<StatefulWidget> createState() {\n    return MyAppState();\n  }\n}\n  \nclass MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    _initAsync();\n  }\n  \n  _initAsync() async {\n    /// App启动时读取Sp数据，需要异步等待Sp初始化完成。\n    await SpUtil.getInstance();\n\n    /// 同步使用Sp。\n    SpUtil.remove(\"username\");\n    String defName = SpUtil.getString(\"username\", defValue: \"sky\");\n    SpUtil.putString(\"username\", \"sky24\");\n    String name = SpUtil.getString(\"username\");\n    print(\"MyApp defName: $defName, name: $name\");\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      routes: {\n        '/MainPage': (ctx) => MyHomePage(),\n      },\n      home: SplashPage(),\n    );\n  }\n}  \n  \n/// 闪屏页。\nclass SplashPage extends StatefulWidget {\n  SplashPage({Key key}) : super(key: key);\n  \n  @override\n  _SplashPageState createState() => _SplashPageState();\n}\n  \nclass _SplashPageState extends State<SplashPage> {\n  String _info = '';\n  \n  @override\n  void initState() {\n    super.initState();\n    _initAsync();\n  }\n  \n  _initAsync() async {\n    /// App启动时读取Sp数据，需要异步等待Sp初始化完成。\n    await SpUtil.getInstance();\n    Future.delayed(new Duration(milliseconds: 500), () {\n      /// 同步使用Sp。\n      /// 是否显示引导页。\n      if (SpUtil.getBool(\"key_guide\", defValue: true)) {\n        SpUtil.putBool(\"key_guide\", false);\n        _initBanner();\n      } else {\n        _initSplash();\n      }\n    });\n  }\n  \n  /// App引导页逻辑。\n  void _initBanner() {\n    setState(() {\n      _info = \"引导页～\";\n    });\n  }\n  \n  /// App广告页逻辑。\n  void _initSplash() {\n    setState(() {\n      _info = \"广告页，2秒后跳转到主页\";\n    });\n    Future.delayed(new Duration(milliseconds: 2000), () {\n      Navigator.of(context).pushReplacementNamed('/MainPage');\n    });\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Splash\"),\n      ),\n      body: new Center(\n        child: new Text(\"$_info\"),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          bool isGuide = SpUtil.getBool(\"key_guide\", defValue: true);\n          if (isGuide) {\n            Navigator.of(context).pushReplacementNamed('/MainPage');\n          }\n        },\n        child: Icon(Icons.navigate_next),\n      ),\n    );\n  }\n}\n  \nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key}) : super(key: key);\n  \n  @override\n  _MyHomePageState createState() => _MyHomePageState();\n}\n  \nclass _MyHomePageState extends State<MyHomePage> {\n  @override\n  void initState() {\n    super.initState();\n    \n    /// 同步使用Sp。\n   \n    /// 存取基础类型\n    SpUtil.putString(\"username\", \"Sky24n\");\n    String userName = SpUtil.getString(\"username\");\n    print(\"MyHomePage userName: \" + userName);\n    \n    bool isFirst = SpUtil.getBool(\"userName\", defValue: true);\n    SpUtil.putBool(\"isFirst\", false);\n    print(\"MyHomePage isFirst: $isFirst\");\n    \n    /// save object example.\n    /// 存储实体对象示例。\n    City city = new City();\n    city.name = \"成都市\";\n    SpUtil.putObject(\"loc_city\", city);\n    \n    City hisCity = SpUtil.getObj(\"loc_city\", (v) => City.fromJson(v));\n    print(\"City: \" + (hisCity == null ? \"null\" : hisCity.toString()));\n    \n    /// save object list example.\n    /// 存储实体对象list示例。\n    List<City> list = new List();\n    list.add(new City(name: \"成都市\"));\n    list.add(new City(name: \"北京市\"));\n    SpUtil.putObjectList(\"loc_city_list\", list);\n    \n    List<City> _cityList = SpUtil.getObjList(\"loc_city_list\", (v) => City.fromJson(v));\n    print(\"City list: \" + (_cityList == null ? \"null\" : _cityList.toString()));\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(\"Home\"),\n      ),\n      body: new Center(\n        child: new Text(SpUtil.getString(\"username\")),\n      ),\n    );\n  }\n}\n  \nclass City {\n  String name;\n  \n  City({this.name});\n  \n  /// 必须写.\n  City.fromJson(Map<String, dynamic> json) : name = json['name'];\n  \n  /// 必须写.\n  Map<String, dynamic> toJson() => {\n        'name': name,\n      };\n  \n  @override\n  String toString() {\n    StringBuffer sb = new StringBuffer('{');\n    sb.write(\"\\\"name\\\":\\\"$name\\\"\");\n    sb.write('}');\n    return sb.toString();\n  }\n}\n\n```\n\n* #### ScreenUtil -> [Example](./example/lib/main.dart) \n```dart\ngetWidth                  : 返回根据屏幕宽适配后尺寸.\ngetHeight                 : 返回根据屏幕高适配后尺寸.\ngetWidthPx                : 返回根据屏幕宽适配后尺寸.\ngetHeightPx               : 返回根据屏幕高适配后尺寸.\ngetSp                     : 返回根据屏幕宽适配后字体尺寸.\nscreenWidth               : 获取屏幕宽.\nscreenHeight              : 获取屏幕高.\nscreenDensity             : 获取屏幕密度.\nappBarHeight              : 获取系统AppBar高度.\nstatusBarHeight           : 获取系统状态栏高度.\ngetScreenW(ctx)           : 当前屏幕 宽.\ngetScreenH(ctx)           : 当前屏幕 高.\ngetStatusBarH(ctx)        : 当前状态栏高度.\ngetBottomBarH(ctx)        : 当前BottomBar高度.\ngetScaleW(ctx,size)       : 返回根据屏幕宽适配后尺寸.\ngetScaleH(ctx,size)       : 返回根据屏幕高适配后尺寸.\ngetScaleSp(ctx,size)      : 返回根据屏幕宽适配后字体尺寸.  \ngetScaleSp(ctx,size)      : 返回根据屏幕宽适配后字体尺寸.  \n\n///旧适配方法仅适用于纵屏适配。\n///推荐使用以下新适配方法。\ngetAdapterSize(size)             : 返回适配后尺寸，可用于宽，高，字体尺寸.  \ngetAdapterSizeCtx(ctx,size)      : 返回适配后尺寸，可用于宽，高，字体尺寸.   \n\ndouble adapterSize = ScreenUtil.getInstance().getAdapterSize(100);\ndouble adapterSize = ScreenUtil.getAdapterSizeCtx(context, 100);\n  \n一、不依赖context\n// 屏幕宽\ndouble screenWidth = ScreenUtil.getInstance().screenWidth;\n// 屏幕高\ndouble screenHeight = ScreenUtil.getInstance().screenHeight;\n// 屏幕像素密度\ndouble screenDensity = ScreenUtil.getInstance().screenDensity;\n// 系统状态栏高度\ndouble statusBarHeight = ScreenUtil.getInstance().statusBarHeight;\n// BottomBar高度 \ndouble bottomBarHeight = ScreenUtil.getInstance().bottomBarHeight;\n// 系统AppBar高度\ndouble appBarHeight = ScreenUtil.getInstance().appBarHeight;\n// 根据屏幕宽适配后尺寸\ndouble adapterW100 = ScreenUtil.getInstance().getWidth(100);\n// 根据屏幕高适配后尺寸\ndouble adapterH100 = ScreenUtil.getInstance().getHeight(100);\n// 根据屏幕宽适配后字体尺寸\ndouble adapterSp100 = ScreenUtil.getInstance().getSp(100);\n// 根据屏幕宽适配后尺寸(输入px)\ndouble adapterW100px = ScreenUtil.getInstance().getWidthPx(300);\n// 根据屏幕高适配后尺寸(输入px)\ndouble adapterH100px = ScreenUtil.getInstance().getHeightPx(300);\n  \n二、依赖context\n// 屏幕宽\ndouble screenWidth = ScreenUtil.getScreenW(context);\n// 屏幕高\ndouble screenHeight = ScreenUtil.getScreenH(context);\n// 屏幕像素密度\ndouble screenDensity = ScreenUtil.getScreenDensity(context);\n// 系统状态栏高度\ndouble statusBarHeight = ScreenUtil.getStatusBarH(context);\n// BottomBar高度\ndouble bottomBarHeight = ScreenUtil.getBottomBarH(context);\n// 根据屏幕宽适配后尺寸\ndouble adapterW100 = ScreenUtil.getScaleW(context, 100);\n// 根据屏幕高适配后尺寸\ndouble adapterH100 = ScreenUtil.getScaleH(context, 100);\n// 根据屏幕宽适配后字体尺寸\ndouble adapterSp100 = ScreenUtil.getScaleSp(context, 100);\n// 屏幕方向\nOrientation orientation = ScreenUtil.getOrientation(context);\n\n```\n\n* #### DirectoryUtil\n```dart\nsetInitDir\ninitTempDir\ninitAppDocDir\ninitAppSupportDir\ninitStorageDir\ncreateDirSync\ncreateDir\ngetTempPath\ngetAppDocPath\ngetAppSupportPath\ngetStoragePath\ncreateTempDirSync\ncreateAppDocDirSync\ncreateStorageDirSync\ncreateTempDir\ncreateAppDocDir\ncreateStorageDir\n\n    await DirectoryUtil.getInstance();\n    String tempPath = DirectoryUtil.getTempPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  tempPath: $tempPath\");\n\n    String appDocPath = DirectoryUtil.getAppDocPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  appDocPath: $appDocPath\");\n\n    String appSupportPath = DirectoryUtil.getAppSupportPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  appSupportPath: $appSupportPath\");\n\n    String storagePath = DirectoryUtil.getStoragePath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  storagePath: $storagePath\");\n\n```\n\n* #### WidgetUtil -> [Example1](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/widget_page.dart)，[Example2](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/image_size_page.dart)\n```dart\nasyncPrepare              : Widget渲染监听，监听widget宽高变化,callback返回宽高等参数.\ngetWidgetBounds           : 获取widget 宽高.\ngetWidgetLocalToGlobal    : 获取widget在屏幕上的坐标.\ngetImageWH                : 获取图片宽高，加载错误情况返回 Rect.zero.（单位 px）. \ngetImageWHE               : 获取图片宽高，加载错误会抛出异常.（单位 px）. \n\n/// widget渲染监听。\nWidgetUtil widgetUtil = new WidgetUtil();\nwidgetUtil.asyncPrepare(context, true, (Rect rect) {\n  // widget渲染完成。\n});\n\n/// widget宽高。\nRect rect = WidgetUtil.getWidgetBounds(context);\n\n/// widget在屏幕上的坐标。\nOffset offset = WidgetUtil.getWidgetLocalToGlobal(context);\n  \n/// 获取CachedNetworkImage下的图片尺寸\nImage image = new Image(image: new CachedNetworkImageProvider(\"Url\"));\nRect rect1 = await WidgetUtil.getImageWH(image: image);  \n\n/// 其他image\nImage imageAsset = new Image.asset(\"\");\nImage imageFile = new Image.file(File(\"path\"));\nImage imageNetwork = new Image.network(\"url\");\nImage imageMemory = new Image.memory(null);\n\n/// 获取网络图片尺寸\nRect rect2 = await WidgetUtil.getImageWH(url: \"Url\");\n\n/// 获取本地图片尺寸 localUrl 需要全路径\nRect rect3 = await WidgetUtil.getImageWH(localUrl: \"assets/images/3.0x/ali_connors.png\");\n\n/// 其他方式\nWidgetUtil.getImageWH(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n});\n\nWidgetUtil.getImageWHE(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n}).catchError((error) {\n  print(\"rect: \" + error.toString();\n});\n```\n\n* #### ImageUtil\n```dart\ngetImageWH\n```\n\n* #### DioUtil (dio: ^1.0.13) 详细请求+解析请参考[flutter_wanandroid][flutter_wanandroid_github]项目。\n```dart\n// 打开debug模式.\nDioUtil.openDebug(); \n\n// 配置网络参数.\nOptions options = DioUtil.getDefOptions();\noptions.baseUrl = \"http://www.wanandroid.com/\";\nHttpConfig config = new HttpConfig(options: options);\nDioUtil().setConfig(config);\n  \n// 两种单例请求方式.\nDioUtil().request<List>(Method.get, \"banner/json\");\nDioUtil.getInstance().request(Method.get, \"banner/json\");\n  \n//示例\nLoginReq req = new LoginReq('username', 'password');\nDioUtil().request(Method.post, \"user/login\",data: req.toJson());\n  \n//示例\nFormData formData = new FormData.from({\n      \"username\": \"username\",\n      \"password\": \"password\",\n    });\nDioUtil().requestR(Method.post, \"user/login\",data: rformData);\n  \n// 网络请求日志  \nI/flutter ( 5922): ----------------Http Log----------------\nI/flutter ( 5922): [statusCode]:   200\nI/flutter ( 5922): [request   ]:   method: GET  baseUrl: http://www.wanandroid.com/  path: lg/collect/list/0/json\nI/flutter ( 5922): [reqdata   ]:   null\nI/flutter ( 5922): [response  ]:   {data: {curPage: 1, datas: [], offset: 0, over: true, pageCount: 0, size: 20, total: 0}, errorCode: 0, errorMsg: }\n```\n\n### [Flutter Demos](https://github.com/Sky24n/flutter_wanandroid/tree/master/lib/demos)   \n \n>- |--demos\n>    - |-- city_select_page.dart 城市列表(索引&悬停)示例\n>    - |-- date_page.dart 日期格式化示例\n>    - |-- image_size_page.dart 获取网络/本地图片尺寸示例\n>    - |-- money_page.dart 金额(元转分/分转元)示例\n>    - |-- pinyin_page.dart 汉字转拼音示例\n>    - |-- regex_page.dart 正则工具类示例\n>    - |-- round_portrait_page.dart 圆形圆角头像示例\n>    - |-- timeline_page.dart 时间轴示例\n>    - |-- timer_page.dart 倒计时/定时任务示例\n>    - |-- widget_page.dart 获取Widget尺寸/屏幕坐标示例\n\n### Screenshots\n<img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20181003-234414.jpg\" width=\"200\">   <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20181003-211011.jpg\" width=\"200\">   <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180930-012302.jpg\" width=\"200\">  \n<img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180930-012431.jpg\" width=\"200\">  <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180919-231618.jpg\" width=\"200\">   <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180926-144840.png\" width=\"200\">  \n<img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180919-224204.jpg\" width=\"200\">   <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180919-224146.jpg\" width=\"200\">   <img src=\"https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_demos/Screenshot_20180919-224231.jpg\" width=\"200\">   \n\n### 关于作者\nGitHub : [Sky24n](https://github.com/Sky24n)  \n简书 &nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://www.jianshu.com/u/cbf2ad25d33a)  \n掘金 &nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://juejin.im/user/5b9e8a92e51d453df0440422/posts)\n\n### Apps\n[flutter_wanandroid](https://github.com/Sky24n/flutter_wanandroid)  \n[Moss App](https://github.com/Sky24n/Moss)\n \n[flutter_wanandroid_github]: https://github.com/Sky24n/flutter_wanandroid\n[flutter_wanandroid_apk]: https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppStore/flutter_wanandroid.apk\n[flutter_wanandroid_qr]: https://raw.githubusercontent.com/Sky24n/LDocuments/master/AppImgs/flutter_wanandroid/qrcode.png\n\n[common_utils_github]: https://github.com/Sky24n/common_utils\n\n[flustars_github]: https://github.com/Sky24n/flustars"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.7998046875,
          "content": "Language: [English](README-EN.md) | 中文简体\n\n[![Pub](https://img.shields.io/pub/v/flustars.svg?style=flat-square&color=009688)](https://pub.dartlang.org/packages/flustars)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[![Pub](https://img.shields.io/pub/v/flustars.svg?style=flat-square&color=2196F3)](https://pub.flutter-io.cn/packages/flustars)\n\n# Flutter常用工具类库\n\nflustars依赖于Dart常用工具类库[common_utils](https://github.com/Sky24n/common_utils),以及对其他第三方库封装，致力于为大家分享简单易用工具类。如果你有好的工具类欢迎PR.  \n目前包含SharedPreferences Util, Screen Util, Directory Util, Widget Util, Image Util。\n\n[✓] Flutter (Channel stable, v2.0.0, locale zh-Hans-CN)\n\n### Pub\n```yaml\ndependencies:\n  flustars: ^2.0.1\n  \n  # https://github.com/Sky24n/sp_util\n  # sp_util分拆成单独的库，可以直接引用\n  sp_util: ^2.0.3\n```\n\n### [Change Log](CHANGE_LOG.md)\nv2.0.0  \nMigrate to null-safety.\n\nv0.3.3  \n分拆[sp_util](https://github.com/Sky24n/sp_util)成单独的库，可以直接引用\n\n[common_utils](https://github.com/Sky24n/common_utils)新版本v1.2.0。  \n如果项目中使用了 flustars: ^0.2.6及以上版本。  \n删除pubspec.lock文件，直接运行flutter  packages get 即可使用最新版！  \n  \ncommon_utils v1.2.0  \n1、新增JsonUtil。  \n2、新增EncryptUtil 简单加解密。  \n3、LogUtil 更新。\n```yaml\nString objStr = \"{\\\"name\\\":\\\"成都市\\\"}\";\nCity hisCity = JsonUtil.getObj(objStr, (v) => City.fromJson(v));\nString listStr = \"[{\\\"name\\\":\\\"成都市\\\"}, {\\\"name\\\":\\\"北京市\\\"}]\";\nList<City> cityList = JsonUtil.getObjList(listStr, (v) => City.fromJson(v));\n\nconst String key = '11, 22, 33, 44, 55, 66';\nString value = 'Sky24n';\nString encode = EncryptUtil.xorBase64Encode(value, key); // WH1YHgMs\nString decode = EncryptUtil.xorBase64Decode(encode, key); // Sky24n\n\n//超长log查看\ncommon_utils e  — — — — — — — — — — — — — — — — st — — — — — — — — — — — — — — — —\ncommon_utils e | 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,\ncommon_utils e | 7,988,989,990,991,992,993,994,995,996,997,998,999,\ncommon_utils e  — — — — — — — — — — — — — — — — ed — — — — — — — — — — — — — — — —\n```\n\n### [Flutter工具类库 flustars][flustars_github]\n 1、SpUtil       : 单例\"同步\"SharedPreferences工具类。支持get传入默认值，支持存储对象，支持存储对象数组。  \n 2、ScreenUtil   : 屏幕适配，获取屏幕宽、高、密度，AppBar高，状态栏高度，屏幕方向.  \n 3、WidgetUtil   : 监听Widget渲染状态，获取Widget宽高，在屏幕上的坐标，获取网络/本地图片尺寸.  \n 4、DioUtil      : 单例Dio网络工具类(已迁移至此处[DioUtil](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/data/net/dio_util.dart))。  \n 5、ImageUtil    : 获取网络/本地图片尺寸.\n\n### [Dart常用工具类库 common_utils][common_utils_github]  \n 1、TimelineUtil : 时间轴.(新)  \n 2、TimerUtil    : 倒计时，定时任务.(新)  \n 3、MoneyUtil    : 精确转换，元转分，分转元，支持格式输出.(新)  \n 4、LogUtil      : 简单封装打印日志.(新)  \n 5、DateUtil     : 日期转换格式化输出.  \n 6、RegexUtil    : 正则验证手机号，身份证，邮箱等等.  \n 7、NumUtil      : 保留x位小数, 精确加、减、乘、除, 防止精度丢失.  \n 8、ObjectUtil   : 判断对象是否为空(String List Map),判断两个List是否相等.  \n 9、TextUtil     : TextUtil.  \n 10、EncryptUtil : EncryptUtil.  \n 11、JsonUtil    : JsonUtil.\n\n### APIs\n\n* #### SpUtil -> [Example](./example/lib/main.dart)\n```dart\ngetObj\ngetObjList\nputObject\ngetObject\nputObjectList\ngetObjectList\ngetString\nputString\ngetBool\nputBool\ngetInt\nputInt\ngetDouble\nputDouble\ngetStringList\nputStringList\ngetDynamic\nhaveKey\ngetKeys\nremove\nclear\nisInitialized\n  \n  \n/// SpUtil使用：\n/// 方式一\n/// 等待sp初始化完成后再运行app。\n/// sp初始化时间 release模式下30ms左右，debug模式下100多ms。\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await SpUtil.getInstance();\n  runApp(MyApp());\n}\n\nclass MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    /// 同步使用Sp。\n    /// 存取基础类型\n    SpUtil.putString(\"username\", \"Sky24n\");\n    String userName = SpUtil.getString(\"username\");\n    print(\"MyHomePage userName: \" + userName);\n    \n    bool isFirst = SpUtil.getBool(\"userName\", defValue: true);\n    SpUtil.putBool(\"isFirst\", false);\n    print(\"MyHomePage isFirst: $isFirst\");\n    \n    /// save object example.\n    /// 存储实体对象示例。\n    City city = new City();\n    city.name = \"成都市\";\n    SpUtil.putObject(\"loc_city\", city);\n    \n    City hisCity = SpUtil.getObj(\"loc_city\", (v) => City.fromJson(v));\n    print(\"City: \" + (hisCity == null ? \"null\" : hisCity.toString()));\n    \n    /// save object list example.\n    /// 存储实体对象list示例。\n    List<City> list = new List();\n    list.add(new City(name: \"成都市\"));\n    list.add(new City(name: \"北京市\"));\n    SpUtil.putObjectList(\"loc_city_list\", list);\n    \n    List<City> _cityList = SpUtil.getObjList(\"loc_city_list\", (v) => City.fromJson(v));\n    print(\"City list: \" + (_cityList == null ? \"null\" : _cityList.toString()));\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp();\n  }\n}\n\n```\n\n* #### ScreenUtil -> [Example](./example/lib/main.dart) \n```\ngetWidth                  : 返回根据屏幕宽适配后尺寸.\ngetHeight                 : 返回根据屏幕高适配后尺寸.\ngetWidthPx                : 返回根据屏幕宽适配后尺寸.\ngetHeightPx               : 返回根据屏幕高适配后尺寸.\ngetSp                     : 返回根据屏幕宽适配后字体尺寸.\nscreenWidth               : 获取屏幕宽.\nscreenHeight              : 获取屏幕高.\nscreenDensity             : 获取屏幕密度.\nappBarHeight              : 获取系统AppBar高度.\nstatusBarHeight           : 获取系统状态栏高度.\ngetScreenW(ctx)           : 当前屏幕 宽.\ngetScreenH(ctx)           : 当前屏幕 高.\ngetStatusBarH(ctx)        : 当前状态栏高度.\ngetBottomBarH(ctx)        : 当前BottomBar高度.\ngetScaleW(ctx,size)       : 返回根据屏幕宽适配后尺寸.\ngetScaleH(ctx,size)       : 返回根据屏幕高适配后尺寸.\ngetScaleSp(ctx,size)      : 返回根据屏幕宽适配后字体尺寸.  \ngetScaleSp(ctx,size)      : 返回根据屏幕宽适配后字体尺寸.  \n\n///旧适配方法仅适用于纵屏适配。\n///推荐使用以下新适配方法。\ngetAdapterSize(size)             : 返回适配后尺寸，可用于宽，高，字体尺寸.  \ngetAdapterSizeCtx(ctx,size)      : 返回适配后尺寸，可用于宽，高，字体尺寸.   \n\ndouble adapterSize = ScreenUtil.getInstance().getAdapterSize(100);\ndouble adapterSize = ScreenUtil.getAdapterSizeCtx(context, 100);\n  \n一、不依赖context\n// 屏幕宽\ndouble screenWidth = ScreenUtil.getInstance().screenWidth;\n// 屏幕高\ndouble screenHeight = ScreenUtil.getInstance().screenHeight;\n// 屏幕像素密度\ndouble screenDensity = ScreenUtil.getInstance().screenDensity;\n// 系统状态栏高度\ndouble statusBarHeight = ScreenUtil.getInstance().statusBarHeight;\n// BottomBar高度 \ndouble bottomBarHeight = ScreenUtil.getInstance().bottomBarHeight;\n// 系统AppBar高度\ndouble appBarHeight = ScreenUtil.getInstance().appBarHeight;\n// 根据屏幕宽适配后尺寸\ndouble adapterW100 = ScreenUtil.getInstance().getWidth(100);\n// 根据屏幕高适配后尺寸\ndouble adapterH100 = ScreenUtil.getInstance().getHeight(100);\n// 根据屏幕宽适配后字体尺寸\ndouble adapterSp100 = ScreenUtil.getInstance().getSp(100);\n// 根据屏幕宽适配后尺寸(输入px)\ndouble adapterW100px = ScreenUtil.getInstance().getWidthPx(300);\n// 根据屏幕高适配后尺寸(输入px)\ndouble adapterH100px = ScreenUtil.getInstance().getHeightPx(300);\n  \n二、依赖context\n// 屏幕宽\ndouble screenWidth = ScreenUtil.getScreenW(context);\n// 屏幕高\ndouble screenHeight = ScreenUtil.getScreenH(context);\n// 屏幕像素密度\ndouble screenDensity = ScreenUtil.getScreenDensity(context);\n// 系统状态栏高度\ndouble statusBarHeight = ScreenUtil.getStatusBarH(context);\n// BottomBar高度\ndouble bottomBarHeight = ScreenUtil.getBottomBarH(context);\n// 根据屏幕宽适配后尺寸\ndouble adapterW100 = ScreenUtil.getScaleW(context, 100);\n// 根据屏幕高适配后尺寸\ndouble adapterH100 = ScreenUtil.getScaleH(context, 100);\n// 根据屏幕宽适配后字体尺寸\ndouble adapterSp100 = ScreenUtil.getScaleSp(context, 100);\n// 屏幕方向\nOrientation orientation = ScreenUtil.getOrientation(context);\n\n```\n\n* #### DirectoryUtil\n```\nsetInitDir\ninitTempDir\ninitAppDocDir\ninitAppSupportDir\ninitStorageDir\ncreateDirSync\ncreateDir\ngetTempPath\ngetAppDocPath\ngetAppSupportPath\ngetStoragePath\ncreateTempDirSync\ncreateAppDocDirSync\ncreateStorageDirSync\ncreateTempDir\ncreateAppDocDir\ncreateStorageDir\n\n    await DirectoryUtil.getInstance();\n    String tempPath = DirectoryUtil.getTempPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  tempPath: $tempPath\");\n\n    String appDocPath = DirectoryUtil.getAppDocPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  appDocPath: $appDocPath\");\n\n    String appSupportPath = DirectoryUtil.getAppSupportPath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  appSupportPath: $appSupportPath\");\n\n    String storagePath = DirectoryUtil.getStoragePath(\n        category: 'Pictures', fileName: 'demo', format: 'png');\n    print(\"thll  storagePath: $storagePath\");\n\n```\n\n* #### WidgetUtil -> [Example1](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/widget_page.dart)，[Example2](https://github.com/Sky24n/flutter_wanandroid/blob/master/lib/demos/image_size_page.dart)\n```\nasyncPrepare              : Widget渲染监听，监听widget宽高变化,callback返回宽高等参数.\ngetWidgetBounds           : 获取widget 宽高.\ngetWidgetLocalToGlobal    : 获取widget在屏幕上的坐标.\ngetImageWH                : 获取图片宽高，加载错误情况返回 Rect.zero.（单位 px）. \ngetImageWHE               : 获取图片宽高，加载错误会抛出异常.（单位 px）. \n\n/// widget渲染监听。\nWidgetUtil widgetUtil = new WidgetUtil();\nwidgetUtil.asyncPrepare(context, true, (Rect rect) {\n  // widget渲染完成。\n});\n\n/// widget宽高。\nRect rect = WidgetUtil.getWidgetBounds(context);\n\n/// widget在屏幕上的坐标。\nOffset offset = WidgetUtil.getWidgetLocalToGlobal(context);\n  \n/// 获取CachedNetworkImage下的图片尺寸\nImage image = new Image(image: new CachedNetworkImageProvider(\"Url\"));\nRect rect1 = await WidgetUtil.getImageWH(image: image);  \n\n/// 其他image\nImage imageAsset = new Image.asset(\"\");\nImage imageFile = new Image.file(File(\"path\"));\nImage imageNetwork = new Image.network(\"url\");\nImage imageMemory = new Image.memory(null);\n\n/// 获取网络图片尺寸\nRect rect2 = await WidgetUtil.getImageWH(url: \"Url\");\n\n/// 获取本地图片尺寸 localUrl 需要全路径\nRect rect3 = await WidgetUtil.getImageWH(localUrl: \"assets/images/3.0x/ali_connors.png\");\n\n/// 其他方式\nWidgetUtil.getImageWH(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n});\n\nWidgetUtil.getImageWHE(url: \"Url\").then((Rect rect) {\n  print(\"rect: \" + rect.toString();\n}).catchError((error) {\n  print(\"rect: \" + error.toString();\n});\n```\n\n* #### ImageUtil\n```dart\ngetImageWH\n```\n\n* #### DioUtil (dio: ^1.0.13) 详细请求+解析请参考[flutter_wanandroid][flutter_wanandroid_github]项目。\n```\n// 打开debug模式.\nDioUtil.openDebug(); \n\n// 配置网络参数.\nOptions options = DioUtil.getDefOptions();\noptions.baseUrl = \"http://www.wanandroid.com/\";\nHttpConfig config = new HttpConfig(options: options);\nDioUtil().setConfig(config);\n  \n// 两种单例请求方式.\nDioUtil().request<List>(Method.get, \"banner/json\");\nDioUtil.getInstance().request(Method.get, \"banner/json\");\n  \n//示例\nLoginReq req = new LoginReq('username', 'password');\nDioUtil().request(Method.post, \"user/login\",data: req.toJson());\n  \n//示例\nFormData formData = new FormData.from({\n      \"username\": \"username\",\n      \"password\": \"password\",\n    });\nDioUtil().requestR(Method.post, \"user/login\",data: rformData);\n  \n// 网络请求日志  \nI/flutter ( 5922): ----------------Http Log----------------\nI/flutter ( 5922): [statusCode]:   200\nI/flutter ( 5922): [request   ]:   method: GET  baseUrl: http://www.wanandroid.com/  path: lg/collect/list/0/json\nI/flutter ( 5922): [reqdata   ]:   null\nI/flutter ( 5922): [response  ]:   {data: {curPage: 1, datas: [], offset: 0, over: true, pageCount: 0, size: 20, total: 0}, errorCode: 0, errorMsg: }\n```\n\n### 关于作者\nGitHub &nbsp;&nbsp;&nbsp;: [Sky24n](https://github.com/Sky24n)  \n简书 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://www.jianshu.com/u/cbf2ad25d33a)  \n掘金 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: [Sky24n](https://juejin.im/user/5b9e8a92e51d453df0440422/posts)  \n项目合集 : [FlutterRepos](https://github.com/Sky24n/FlutterRepos)\n\n### Changelog\nPlease see the [Changelog](CHANGELOG.md) page to know what's recently changed.\n\n### Apps\n[flutter_wanandroid](https://github.com/Sky24n/flutter_wanandroid)  \n[Moss](https://github.com/Sky24n/Moss).  \nA GitHub client app developed with Flutter, which supports Android iOS Web.  \nWeb ：[Flutter Web](https://sky24n.github.io/Sky24n/moss).\n\n|![](https://z3.ax1x.com/2021/04/26/gp1hm6.jpg)|![](https://z3.ax1x.com/2021/04/26/gp1Tte.jpg)|![](https://z3.ax1x.com/2021/04/26/gp17fH.jpg)|\n|:---:|:---:|:---:|\n\n\n\n[flutter_wanandroid_github]: https://github.com/Sky24n/flutter_wanandroid\n\n[common_utils_github]: https://github.com/Sky24n/common_utils\n\n[flustars_github]: https://github.com/Sky24n/flustars\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.4892578125,
          "content": "# https://www.dartlang.org/guides/language/analysis-options\n# Source of linter options:\n# http://dart-lang.github.io/linter/lints/options/options.html\nanalyzer:\n  strong-mode: true\n#    implicit-casts: false\n#    implicit-dynamic: false\n  errors:\n    todo: ignore\n  exclude:\n    - flutter/**\n    - lib/*.dart\n\nlinter:\n  rules:\n    - camel_case_types\n    - hash_and_equals\n    - iterable_contains_unrelated_type\n    - list_remove_unrelated_type\n    - unrelated_type_equality_checks\n    - valid_regexps\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "flustars.iml",
          "type": "blob",
          "size": 1.4482421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"android\" name=\"Android\">\n      <configuration>\n        <option name=\"ALLOW_USER_CONFIGURATION\" value=\"false\" />\n      </configuration>\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/lib\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/test\" isTestSource=\"true\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/gen\" isTestSource=\"false\" generated=\"true\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.idea\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/build\" />\n    </content>\n    <orderEntry type=\"jdk\" jdkName=\"Android API 25 Platform\" jdkType=\"Android SDK\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Dart Packages\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Dart SDK\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Flutter Plugins\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgget",
          "type": "blob",
          "size": 0.126953125,
          "content": "export PUB_HOSTED_URL=https://pub.flutter-io.cn\nexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn\nflutter packages get"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.6845703125,
          "content": "name: flustars\ndescription: Flutter common utils library. SpUtil, ScreenUtil, WidgetUtil, DirectoryUtil, ImageUtil. SharedPreferences Util. Screen info & Screen adaptation. get image size.\nversion: 2.0.1\nhomepage: https://github.com/Sky24n/flustars\n\nenvironment:\n  sdk: \">=2.12.0-259.9.beta <3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  # Dart common utils library. https://github.com/Sky24n/common_utils\n  common_utils: '>=2.0.2 <3.0.0'\n  # https://github.com/Sky24n/sp_util\n  sp_util: '>=2.0.3 <3.0.0'\n  # https://github.com/tekartik/synchronized.dart\n  synchronized: '>=3.0.0 <5.0.0'\n  # https://github.com/flutter/plugins/tree/master/packages/path_provider\n  path_provider: '>=2.0.0 <4.0.0'"
        },
        {
          "name": "uploadMaster",
          "type": "blob",
          "size": 0.0224609375,
          "content": "git push origin master\n"
        }
      ]
    }
  ]
}