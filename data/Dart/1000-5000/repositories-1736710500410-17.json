{
  "metadata": {
    "timestamp": 1736710500410,
    "page": 17,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "OpenFlutter/flutter_screenutil",
      "stars": 3935,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".flutter_tool_state",
          "type": "blob",
          "size": 0.0576171875,
          "content": "{\n  \"is-bot\": true,\n  \"redisplay-welcome-message\": false\n}\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0263671875,
          "content": "*.h linguist-language=Dart\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 2.6376953125,
          "content": "# Miscellaneous\r\n*.class\r\n*.lock\r\n*.log\r\n*.pyc\r\n*.swp\r\n.DS_Store\r\n.atom/\r\n.buildlog/\r\n.history\r\n.svn/\r\n\r\n# IntelliJ related\r\n*.ipr\r\n*.iws\r\n.idea/\r\n\r\n# Visual Studio Code related\r\n.classpath\r\n.project\r\n.vscode/\r\n\r\n# Flutter repo-specific\r\n/bin/cache/\r\n/bin/internal/bootstrap.bat\r\n/bin/internal/bootstrap.sh\r\n/bin/mingit/\r\n/dev/benchmarks/mega_gallery/\r\n/dev/bots/.recipe_deps\r\n/dev/bots/android_tools/\r\n/dev/devicelab/ABresults*.json\r\n/dev/docs/doc/\r\n/dev/docs/flutter.docs.zip\r\n/dev/docs/lib/\r\n/dev/docs/pubspec.yaml\r\n/dev/integration_tests/**/xcuserdata\r\n/dev/integration_tests/**/Pods\r\n/packages/flutter/coverage/\r\nversion\r\nanalysis_benchmark.json\r\n\r\n# packages file containing multi-root paths\r\n.packages.generated\r\n\r\n# Flutter/Dart/Pub related\r\n**/doc/api/\r\n.dart_tool/\r\n.flutter-plugins\r\n.flutter-plugins-dependencies\r\n.packages\r\n.pub-cache/\r\n.pub/\r\nbuild/\r\nflutter_*.png\r\nlinked_*.ds\r\nunlinked.ds\r\nunlinked_spec.ds\r\n\r\n# Android related\r\n**/android/**/gradle-wrapper.jar\r\n.gradle/\r\n**/android/captures/\r\n**/android/gradlew\r\n**/android/gradlew.bat\r\n**/android/local.properties\r\n**/android/**/GeneratedPluginRegistrant.java\r\n**/android/key.properties\r\n*.jks\r\n\r\n# iOS/XCode related\r\n**/ios/**/*.mode1v3\r\n**/ios/**/*.mode2v3\r\n**/ios/**/*.moved-aside\r\n**/ios/**/*.pbxuser\r\n**/ios/**/*.perspectivev3\r\n**/ios/**/*sync/\r\n**/ios/**/.sconsign.dblite\r\n**/ios/**/.tags*\r\n**/ios/**/.vagrant/\r\n**/ios/**/DerivedData/\r\n**/ios/**/Icon?\r\n**/ios/**/Pods/\r\n**/ios/**/.symlinks/\r\n**/ios/**/profile\r\n**/ios/**/xcuserdata\r\n**/ios/.generated/\r\n**/ios/Flutter/.last_build_id\r\n**/ios/Flutter/App.framework\r\n**/ios/Flutter/Flutter.framework\r\n**/ios/Flutter/Generated.xcconfig\r\n**/ios/Flutter/ephemeral\r\n**/ios/Flutter/app.flx\r\n**/ios/Flutter/app.zip\r\n**/ios/Flutter/flutter_assets/\r\n**/ios/ServiceDefinitions.json\r\n**/ios/Runner/GeneratedPluginRegistrant.*\r\n\r\n# macOS\r\n**/Flutter/ephemeral/\r\n**/Pods/\r\n**/macos/Flutter/GeneratedPluginRegistrant.swift\r\n**/macos/Flutter/ephemeral\r\n**/xcuserdata/\r\n\r\n\r\n# Coverage\r\ncoverage/\r\n\r\n# Symbols\r\napp.*.symbols\r\n\r\n# Exceptions to above rules.\r\n!**/ios/**/default.mode1v3\r\n!**/ios/**/default.mode2v3\r\n!**/ios/**/default.pbxuser\r\n!**/ios/**/default.perspectivev3\r\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\r\n!/dev/ci/**/Gemfile.lock\r\n\r\n# Don’t commit the following directories created by pub.\r\n.buildlog\r\n.dart_tool/\r\n.pub/\r\nbuild/\r\npackages\r\n*.packages\r\n.idea/\r\nweb/experimental\r\ndoc\r\n.packages\r\n\r\n# Or the files created by dart2js.\r\n*.dart.js\r\n*.js_\r\n*.js.deps\r\n*.js.map\r\n\r\n# Include when developing application packages.\r\n.lock\r\ncoverage*\r\n*.lock\r\n\r\n# Don't commit .fvm directory containing machine-specific symlink to sdk & flutter version\r\n**/.fvm\r\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 7.869140625,
          "content": "# 5.9.3\nfeat: support for disabling scaling\n\n# 5.9.2\n- Add ability to exclude widgets from from rebuild list\n- Depend on View instead of MediaQuery\n- update readme\n\n# 5.9.1\n- merge pr #550 #555 #556\n- update readme\n\n# 5.9.0\n- ScreenUtilInit won't rebuild the whole widget tree\n- Add `fontSizeResolver` to specify how font size should be scaled\n- Add `diameter` & `diagonal` factors\n- `useInheritedMediaQuery` has not effect, and will be removed in next release\n- Fix `ensureScreenSize` in web platform\n- add deviceType\n\n# 5.8.4\n- bug fix\n- change useInheritedMediaQuery default value to false\n\n# 5.8.3\n- Adapt to flutter3.10\n\n# 5.8.2\n- change useInheritedMediaQuery default value to true\n- update readme\n- remove ScreenutilInit layout listener\n\n# 5.8.1\n- Limit flutter version > 3.10.0\n\n# 5.7.0\n- merge #464\n\n# 5.6.1\n\n- add spMax => max(toDouble(), sp), and spMin, for example: 12.spMax\n- FlutterView instead of FlutterWindow\n\n# 5.6.0\n\n- bug fix: #434\n- add w and h on EdgeInsets,Radius,BorderRadius,BoxConstraints\n\n# 5.5.4\n\n- Bug Fix: False sizes when using DevicePreview\n\n# 5.5.3+2\n\n- Fix #398\n\n# 5.5.3+1\n\n- Fix compatibility with flutter sdk 2.x\n\n# 5.5.3\n\n- Bug Fix: Some widgets disapear because of parent rebuild.\n- Bug Fix: issue #362. Null check operator used on a null value when using ScreenUtil.init().\n- Re-add context to builder parameters **(users request)**.\n- Add some standard rebuild factors.\n\n# 5.5.2\n\n- Add rebuildFactor property\n- Bug Fix: False sizes when resizing\n\n# 5.5.1\n\n- Bug Fix: Assertion Failed (Find MediaQuery in ancestors)\n- Some performance improvements and fixes\n\n# 5.5.0\n\n- Bug Fix: Reaching context that no longer used.\n\n# 5.4.0+1\n\n- delete log\n\n# 5.4.0\n\n- merge #352\n\n# 5.3.1\n\n- add num.verticalSpacingRadius num.horizontalSpaceRadius num.setVerticalSpacingFromWidth\n- update num.horizontalSpace\n\n# 5.3.0\n\n- For the size, use the context to get it first, which needs to provide the Context More rigorous\n  context checking\n\n# 5.2.0\n\n- Rollback of 5.1.1 commit\n- Fix the problem of inaccurate height\n- merge #332(https://github.com/OpenFlutter/flutter_screenutil/pull/332)\n  add num.setVerticalSpacing // SizedBox(height: num * scaleHeight)\n  num.horizontalSpace // SizedBox(height: num * scaleWidth)\n\n# 5.1.1\n\n- .w,.h use MediaQuery\n\n# 5.1.0\n\n- Break Change: updated the first initialization method, please refer to README.md\n\n# 5.0.4\n\n- Break Change : add setContext() , the first initialization method requires calling\n- fix # 310\n- update ReadMe.md\n\n# 5.0.3\n\n- init method add \"context\" param\n- update ReadMe.md\n\n# 5.0.2+1\n\n- fix splitScreenMode to false\n\n# 5.0.2\n\n- add \"minTextAdapt\" param , Font adaptation is based on the minimum value of width and height or\n  only based on width(default)\n- update readme\n\n# 5.0.1+3\n\n- fix .r\n\n# 5.0.1+2\n\n- Text adaptation no longer considers the height of the screen\n\n# 5.0.1+1\n\n- split default value change to false\n\n# 5.0.1\n\n- support for split screen\n- add number.sm (return min(number.sp , number))\n\n# 5.0.0+2\n\n- update readme\n\n# 5.0.0+1\n\n- update readme\n\n# 5.0.0\n\n-Breaking change. Use a new way to set font scaling -Deprecated ssp and nsp\n\n# 5.0.0-nullsafety.11\n\n- revert 5.0.0-nullsafety.10\n- fix #230\n\n# 5.0.0-nullsafety.10\n\n- fix #228\n\n# 5.0.0-nullsafety.9\n\n- Supplementary documentation, supports two initialization methods\n\n# 5.0.0-nullsafety.8\n\n- merge v4\n- Add a method to get the screen orientation\n\n# 5.0.0-nullsafety.7\n\n- fix #221\n\n# 5.0.0-nullsafety.6\n\n- merge #216 #218\n\n# 5.0.0-nullsafety.5\n\n- Optimize initialization method\n\n# 5.0.0-nullsafety.4\n\n- merge #205\n\n# 5.0.0-nullsafety.3\n\n- merge 4.0.2+3\n\n# 5.0.0-nullsafety.2\n\n- merge 4.0.2+2 #186\n\n# 5.0.0-nullsafety.1\n\n- merge 4.0.1 ,4.0.2 #183\n\n# 5.0.0-nullsafety.0\n\n- Migrated flutter_screenutil to non-nullable\n\n# 4.0.2\n\n- add r(),adapt according to the smaller of width or height\n\n# 4.0.1\n\n- Modify the initialization unit to dp\n- delete screenWidthPx and screenHeightPx(No one use these method,I guess)\n\n# 4.0.0\n\n- update to 4.0.0\n\n# 4.0.0-beta3\n\n- Optimize the way of initialization\n\n# 4.0.0-beta2\n\n- fix error:'window is not a type.'\n\n# 4.0.0-beta1\n\n- change readme\n\n# 4.0.0-beta\n\n- Modified the initialization method\n- Support font adaptation in themedata\n\n# 3.2.0\n\n- Modify the method name to be more semantic: wp->sw , hp->sh\n- Remove the restriction of flutter version\n- Modify the return type num to double\n\n# 3.1.1\n\n- change readme\n\n# 3.1.0\n\n- Use the way back to v2 version\n- Modify registration method\n\n# 3.0.2+1\n\n- Guide users to use V2 version\n\n# 3.0.2\n\n- Change the unit of'statusBarHeight' and 'bottomBarHeight' to dp\n\n# 3.0.1\n\n- update readme\n\n# 3.0.0\n\n- After a period of experimentation, I think it's time to release the official version\n\n# 3.0.0-beta.2\n\n- readme update\n\n# 3.0.0-beta.1\n\n**BREAKING CHANGES**\n\n- `BuildContext` is no more required while initializing. i.e. ScreenUtil.init(~~context~~)\n- Initialize size of design draft using `designSize` instead of width & height.\n- All the static methods are now member methods.\n\n# 2.3.1\n\n- add textStyle Example.\n\n# 2.3.0\n\n- We still need context to initialize, sorry.\n\n# 2.2.0\n\n- add 'wp','hp'. Get the height/width of the screen proportionally\n- For example: 0.5.wp : Half the width of the screen.\n\n# 2.1.0\n\n- add 'nsp' , you can use 'fontSize: 24.nsp' instead of 'fontSize: ScreenUtil().setSp(24,\n  allowFontScalingSelf: false)'\n\n# 2.0.0\n\n- Use `MediaQueryData.fromWindow(window)` instead of `MediaQuery.of(context)`, no context parameter\n  required\n- API changes, please note\n\n# 1.1.0\n\n- support ExtensionMethod Dart-SDK-2.6.0\n- you can use 'width: 50.w' instead of 'width: ScreenUtil().setWidth(50)'\n  '50.h' instead of 'ScreenUtil().setHeight(50)'\n  '24.sp' instead of 'ScreenUtil().setSp(24)'\n  '24.ssp' instead of 'ScreenUtil().setSp(24, allowFontScalingSelf: true)'\n\n# 1.0.2\n\n- fix #89\n- 优化屏幕旋转效果\n- 字体适配统一使用宽度\n\n# 1.0.1\n\n- Rebuild code, change API Delete \"getInstance()\", please use \"ScreenUtil ()\" instead of \"\n  ScreenUtil.getInstance()\"\n  use \"ScreenUtil().setSp(24, allowFontScalingSelf: true)\" instead of \"ScreenUtil.getInstance()\n  .setSp(14, true)\"\n- Modify the initialization method\n- Fix #68\n- Change example code Example CompileSdkVersion change to 28\n\n**If there is significant impact, please return to 0.7.0**\n\n# 0.7.0\n\n- Replace textScaleFactory with textScaleFactor , It's a typo.\n\n# 0.6.1\n\n- Add return types to all methods.\n\n# 0.6.0\n\n- Completing comments , adding English commentsWelcome to add, correct\n- 参数同时支持传入 int / double 或者是var size = 100 , var size = 100.0.\n- The argument also supports passing in in / double / var size = 100 /var size = 100.0\n\n# 0.5.3\n\n- Change the units of statusBarHeight and bottomBarHeight to dp\n\n# 0.5.2\n\n- Change the parameter type from int to double\n\n- setWidth,setHeight,setSp. for example: you can use setWidth(100) or setWidth(100.0)\n\n# 0.5.1\n\n- Fix the wrong way of using\n\n- It is recommended to use `ScreenUtil.getInstance()` instead of `ScreenUtil()` , for\n  example: `ScreenUtil.getInstance().setHeight(25)` instead of `ScreenUtil().setHeight(25)`\n\n# 0.4.4\n\n- Fix bugs that default fonts change with the system\n\n# 0.4.3\n\n- Modify the font to change with the system zoom mode. The default value is false.\n\n- setSp(int fontSize, [allowFontScaling = false]) => allowFontScaling ? setWidth(fontSize) \\*\n  \\_textScaleFactor\n  : setWidth(fontSize);\n\n# 0.4.2\n\n- add two Properties\n- ///Current device width dp\n- ///当前设备宽度 dp\n- ScreenUtil.screenWidthDp\n\n- ///Current device height dp\n- ///当前设备高度 dp\n- ScreenUtil.screenHeightDp\n\n# 0.4.1\n\n- Fix font adaptation issues\n\n# 0.4.0\n\n- Optimize font adaptation method\n\n# 0.3.1\n\n- Perfect documentation\n- Width is enlarged relative to the design draft => The ratio of font and width to the size of the\n  design\n- Height is enlarged relative to the design draft => The ratio of height width to the size of the\n  design\n\n# 0.3.0\n\n- Add font size adaptation\n\n# 0.2.2\n\n- Optimize documentation\n\n# 0.0.2\n\n- Fixed bug when releasing\n\n# 0.0.1\n\n- first version\n\n\n\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.2529296875,
          "content": "Apache License\r\n                           Version 2.0, January 2004\r\n                        http://www.apache.org/licenses/\r\n\r\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n   1. Definitions.\r\n\r\n      \"License\" shall mean the terms and conditions for use, reproduction,\r\n      and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n      \"Licensor\" shall mean the copyright owner or entity authorized by\r\n      the copyright owner that is granting the License.\r\n\r\n      \"Legal Entity\" shall mean the union of the acting entity and all\r\n      other entities that control, are controlled by, or are under common\r\n      control with that entity. For the purposes of this definition,\r\n      \"control\" means (i) the power, direct or indirect, to cause the\r\n      direction or management of such entity, whether by contract or\r\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\r\n      outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\r\n      exercising permissions granted by this License.\r\n\r\n      \"Source\" form shall mean the preferred form for making modifications,\r\n      including but not limited to software source code, documentation\r\n      source, and configuration files.\r\n\r\n      \"Object\" form shall mean any form resulting from mechanical\r\n      transformation or translation of a Source form, including but\r\n      not limited to compiled object code, generated documentation,\r\n      and conversions to other media types.\r\n\r\n      \"Work\" shall mean the work of authorship, whether in Source or\r\n      Object form, made available under the License, as indicated by a\r\n      copyright notice that is included in or attached to the work\r\n      (an example is provided in the Appendix below).\r\n\r\n      \"Derivative Works\" shall mean any work, whether in Source or Object\r\n      form, that is based on (or derived from) the Work and for which the\r\n      editorial revisions, annotations, elaborations, or other modifications\r\n      represent, as a whole, an original work of authorship. For the purposes\r\n      of this License, Derivative Works shall not include works that remain\r\n      separable from, or merely link (or bind by name) to the interfaces of,\r\n      the Work and Derivative Works thereof.\r\n\r\n      \"Contribution\" shall mean any work of authorship, including\r\n      the original version of the Work and any modifications or additions\r\n      to that Work or Derivative Works thereof, that is intentionally\r\n      submitted to Licensor for inclusion in the Work by the copyright owner\r\n      or by an individual or Legal Entity authorized to submit on behalf of\r\n      the copyright owner. For the purposes of this definition, \"submitted\"\r\n      means any form of electronic, verbal, or written communication sent\r\n      to the Licensor or its representatives, including but not limited to\r\n      communication on electronic mailing lists, source code control systems,\r\n      and issue tracking systems that are managed by, or on behalf of, the\r\n      Licensor for the purpose of discussing and improving the Work, but\r\n      excluding communication that is conspicuously marked or otherwise\r\n      designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\r\n      on behalf of whom a Contribution has been received by Licensor and\r\n      subsequently incorporated within the Work.\r\n\r\n   2. Grant of Copyright License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      copyright license to reproduce, prepare Derivative Works of,\r\n      publicly display, publicly perform, sublicense, and distribute the\r\n      Work and such Derivative Works in Source or Object form.\r\n\r\n   3. Grant of Patent License. Subject to the terms and conditions of\r\n      this License, each Contributor hereby grants to You a perpetual,\r\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\r\n      (except as stated in this section) patent license to make, have made,\r\n      use, offer to sell, sell, import, and otherwise transfer the Work,\r\n      where such license applies only to those patent claims licensable\r\n      by such Contributor that are necessarily infringed by their\r\n      Contribution(s) alone or by combination of their Contribution(s)\r\n      with the Work to which such Contribution(s) was submitted. If You\r\n      institute patent litigation against any entity (including a\r\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\r\n      or a Contribution incorporated within the Work constitutes direct\r\n      or contributory patent infringement, then any patent licenses\r\n      granted to You under this License for that Work shall terminate\r\n      as of the date such litigation is filed.\r\n\r\n   4. Redistribution. You may reproduce and distribute copies of the\r\n      Work or Derivative Works thereof in any medium, with or without\r\n      modifications, and in Source or Object form, provided that You\r\n      meet the following conditions:\r\n\r\n      (a) You must give any other recipients of the Work or\r\n          Derivative Works a copy of this License; and\r\n\r\n      (b) You must cause any modified files to carry prominent notices\r\n          stating that You changed the files; and\r\n\r\n      (c) You must retain, in the Source form of any Derivative Works\r\n          that You distribute, all copyright, patent, trademark, and\r\n          attribution notices from the Source form of the Work,\r\n          excluding those notices that do not pertain to any part of\r\n          the Derivative Works; and\r\n\r\n      (d) If the Work includes a \"NOTICE\" text file as part of its\r\n          distribution, then any Derivative Works that You distribute must\r\n          include a readable copy of the attribution notices contained\r\n          within such NOTICE file, excluding those notices that do not\r\n          pertain to any part of the Derivative Works, in at least one\r\n          of the following places: within a NOTICE text file distributed\r\n          as part of the Derivative Works; within the Source form or\r\n          documentation, if provided along with the Derivative Works; or,\r\n          within a display generated by the Derivative Works, if and\r\n          wherever such third-party notices normally appear. The contents\r\n          of the NOTICE file are for informational purposes only and\r\n          do not modify the License. You may add Your own attribution\r\n          notices within Derivative Works that You distribute, alongside\r\n          or as an addendum to the NOTICE text from the Work, provided\r\n          that such additional attribution notices cannot be construed\r\n          as modifying the License.\r\n\r\n      You may add Your own copyright statement to Your modifications and\r\n      may provide additional or different license terms and conditions\r\n      for use, reproduction, or distribution of Your modifications, or\r\n      for any such Derivative Works as a whole, provided Your use,\r\n      reproduction, and distribution of the Work otherwise complies with\r\n      the conditions stated in this License.\r\n\r\n   5. Submission of Contributions. Unless You explicitly state otherwise,\r\n      any Contribution intentionally submitted for inclusion in the Work\r\n      by You to the Licensor shall be under the terms and conditions of\r\n      this License, without any additional terms or conditions.\r\n      Notwithstanding the above, nothing herein shall supersede or modify\r\n      the terms of any separate license agreement you may have executed\r\n      with Licensor regarding such Contributions.\r\n\r\n   6. Trademarks. This License does not grant permission to use the trade\r\n      names, trademarks, service marks, or product names of the Licensor,\r\n      except as required for reasonable and customary use in describing the\r\n      origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n   7. Disclaimer of Warranty. Unless required by applicable law or\r\n      agreed to in writing, Licensor provides the Work (and each\r\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\r\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\r\n      implied, including, without limitation, any warranties or conditions\r\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\r\n      PARTICULAR PURPOSE. You are solely responsible for determining the\r\n      appropriateness of using or redistributing the Work and assume any\r\n      risks associated with Your exercise of permissions under this License.\r\n\r\n   8. Limitation of Liability. In no event and under no legal theory,\r\n      whether in tort (including negligence), contract, or otherwise,\r\n      unless required by applicable law (such as deliberate and grossly\r\n      negligent acts) or agreed to in writing, shall any Contributor be\r\n      liable to You for damages, including any direct, indirect, special,\r\n      incidental, or consequential damages of any character arising as a\r\n      result of this License or out of the use or inability to use the\r\n      Work (including but not limited to damages for loss of goodwill,\r\n      work stoppage, computer failure or malfunction, or any and all\r\n      other commercial damages or losses), even if such Contributor\r\n      has been advised of the possibility of such damages.\r\n\r\n   9. Accepting Warranty or Additional Liability. While redistributing\r\n      the Work or Derivative Works thereof, You may choose to offer,\r\n      and charge a fee for, acceptance of support, warranty, indemnity,\r\n      or other liability obligations and/or rights consistent with this\r\n      License. However, in accepting such obligations, You may act only\r\n      on Your own behalf and on Your sole responsibility, not on behalf\r\n      of any other Contributor, and only if You agree to indemnify,\r\n      defend, and hold each Contributor harmless for any liability\r\n      incurred by, or claims asserted against, such Contributor by reason\r\n      of your accepting any such warranty or additional liability.\r\n\r\n   END OF TERMS AND CONDITIONS\r\n\r\n   APPENDIX: How to apply the Apache License to your work.\r\n\r\n      To apply the Apache License to your work, attach the following\r\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\r\n      replaced with your own identifying information. (Don't include\r\n      the brackets!)  The text should be enclosed in the appropriate\r\n      comment syntax for the file format. We also recommend that a\r\n      file or class name and description of purpose be included on the\r\n      same \"printed page\" as the copyright notice for easier\r\n      identification within third-party archives.\r\n\r\n   Copyright [yyyy] [name of copyright owner]\r\n\r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.7431640625,
          "content": "# flutter_screenutil\n\n[![Flutter Package](https://img.shields.io/pub/v/flutter_screenutil.svg)](https://pub.dev/packages/flutter_screenutil)\n[![Pub Points](https://img.shields.io/pub/points/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![Popularity](https://img.shields.io/pub/popularity/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![CodeFactor](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil/badge)](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil)\n\n**A flutter plugin for adapting screen and font size.Let your UI display a reasonable layout on different screen sizes!**\n\n*Note*: This plugin is still under development, and some APIs might not be available yet.\n\n[中文文档](https://github.com/OpenFlutter/flutter_screenutil/blob/master/README_CN.md)  \n\n[README em Português](https://github.com/OpenFlutter/flutter_screenutil/blob/master/README_PT.md)\n\n[github](https://github.com/OpenFlutter/flutter_screenutil)\n\n[Update log](https://github.com/OpenFlutter/flutter_screenutil/blob/master/CHANGELOG.md)\n\n## Usage\n\n### Add dependency\n\nPlease check the latest version before installation.\nIf there is any problem with the new version, please use the previous version\n\n```yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  # add flutter_screenutil\n  flutter_screenutil: ^{latest version}\n```\n\n### Add the following imports to your Dart code\n\n```dart\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\n```\n\n### Properties\n\n| Property          | Type             | Default Value | Description                                                                                                                                   |\n| ----------------- | ---------------- | ------------- |-----------------------------------------------------------------------------------------------------------------------------------------------|\n| designSize        | Size             | Size(360,690) | The size of the device screen in the design draft, in dp                                                                                      |\n| builder           | Function         | null          | Return widget that uses the library in a property (ex: MaterialApp's theme)                                                                   |\n| child             | Widget           | null          | A part of builder that its dependencies/properties don't use the library                                                                      |\n| rebuildFactor     | Function         | _default_     | Function that take old and new screen metrics and returns whether to rebuild or not when changes.                                             |\n| splitScreenMode   | bool             | false         | support for split screen                                                                                                                      |\n| minTextAdapt      | bool             | false         | Whether to adapt the text according to the minimum of width and height                                                                        |\n| context           | BuildContext     | null          | Get physical device data if not provided, by MediaQuery.of(context)                                                                           |\n| fontSizeResolver  | Function         | _default_     | Function that specify how font size should be adapted. Default is that font size scale with width of screen.                                  |\n| responsiveWidgets | Iterable<String> | null          | List/Set of widget names that should be included in rebuilding tree. (See [How flutter_screenutil marks a widget needs build](#rebuild-list)) |\n| excludeWidgets    | Iterable<String> | null          | List/Set of widget names that should be excluded from rebuilding tree.                                                                        |\n| enableScaleWH    | Function | null          | Support enable scale width and height.                                                                                                        |\n| enableScaleText    | Function | null          | Support enable scale text.                                                                                                                    |\n\n\n**Note : You must either provide builder, child or both.**\n\n### Rebuild list\nStarting from version 5.9.0, ScreenUtilInit won't rebuild the whole widget tree, instead it will mark widget needs build only if:\n- Widget is not a flutter widget (widgets are available in [Flutter Docs](https://docs.flutter.dev/reference/widgets))\n- Widget does not start with underscore (`_`)\n- Widget does not declare `SU` mixin\n- `responsiveWidgets` does not contains widget name\n\nIf you have a widget that uses the library and doesn't meet these options you can either add `SU` mixin or add widget name in responsiveWidgets list.\n\n### Initialize and set the fit size and font size to scale according to the system's \"font size\" accessibility option \n\nPlease set the size of the design draft before use, the width and height of the design draft.\n\n#### The first way (You should use it once in your app)\n\n```dart\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    //Set the fit size (Find your UI design, look at the dimensions of the device screen and fill it in,unit in dp)\n    return ScreenUtilInit(\n      designSize: const Size(360, 690),\n      minTextAdapt: true,\n      splitScreenMode: true,\n      // Use builder only if you need to use library outside ScreenUtilInit context\n      builder: (_ , child) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'First Method',\n          // You can use the library anywhere in the app even in theme\n          theme: ThemeData(\n            primarySwatch: Colors.blue,\n            textTheme: Typography.englishLike2018.apply(fontSizeFactor: 1.sp),\n          ),\n          home: child,\n        );\n      },\n      child: const HomePage(title: 'First Method'),\n    );\n  }\n}\n```\n\n#### The second way:You need a trick to support font adaptation in the textTheme of app theme\n\n**Hybrid development uses the second way**\n\nnot support this:\n\n```dart\nMaterialApp(\n  ...\n  //To support the following, you need to use the first initialization method\n  theme: ThemeData(\n    textTheme: TextTheme(\n      button: TextStyle(fontSize: 45.sp)\n    ),\n  ),\n)\n```\n\nbut you can do this:\n\n```dart\nvoid main() async {\n  // Add this line\n  await ScreenUtil.ensureScreenSize();\n  runApp(MyApp());\n}\n...\nMaterialApp(\n  ...\n  builder: (ctx, child) {\n    ScreenUtil.init(ctx);\n    return Theme(\n      data: ThemeData(\n        primarySwatch: Colors.blue,\n        textTheme: TextTheme(bodyText2: TextStyle(fontSize: 30.sp)),\n      ),\n      child: HomePage(title: 'FlutterScreenUtil Demo'),\n    );\n  },\n)\n```\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter_ScreenUtil',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: HomePage(title: 'FlutterScreenUtil Demo'),\n    );\n  }\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  @override\n  Widget build(BuildContext context) {\n    //Set the fit size (fill in the screen size of the device in the design) \n    //If the design is based on the size of the 360*690(dp)\n    ScreenUtil.init(context, designSize: const Size(360, 690));\n    ...\n  }\n}\n```\n\n**Note: calling ScreenUtil.init second time, any non-provided parameter will not be replaced with default value. Use ScreenUtil.configure instead**\n\n### API\n\n#### Enable or disable scale\n\n```dart\n  Widget build(BuildContext context) {\n    return ScreenUtilInit(\n      enableScaleWH: ()=>false,\n      enableScaleText: ()=>false,\n      //...\n    );\n  }\n```\n\nor\n\n```dart\nScreenUtil.enableScale(enableWH: () => false, enableText: () => false);\n```\n\n\n#### Pass the dp size of the design draft\n\n```dart\n    ScreenUtil().setWidth(540)  (dart sdk>=2.6 : 540.w) //Adapted to screen width\n    ScreenUtil().setHeight(200) (dart sdk>=2.6 : 200.h) //Adapted to screen height , under normal circumstances, the height still uses x.w\n    ScreenUtil().radius(200)    (dart sdk>=2.6 : 200.r)    //Adapt according to the smaller of width or height\n    ScreenUtil().setSp(24)      (dart sdk>=2.6 : 24.sp) //Adapter font\n    12.sm   //return min(12,12.sp)\n\n    ScreenUtil().pixelRatio       //Device pixel density\n    ScreenUtil().screenWidth   (dart sdk>=2.6 : 1.sw)    //Device width\n    ScreenUtil().screenHeight  (dart sdk>=2.6 : 1.sh)    //Device height\n    ScreenUtil().bottomBarHeight  //Bottom safe zone distance, suitable for buttons with full screen\n    ScreenUtil().statusBarHeight  //Status bar height , Notch will be higher\n    ScreenUtil().textScaleFactor  //System font scaling factor\n\n    ScreenUtil().scaleWidth //The ratio of actual width to UI design\n    ScreenUtil().scaleHeight //The ratio of actual height to UI design\n\n    ScreenUtil().orientation  //Screen orientation\n    0.2.sw  //0.2 times the screen width\n    0.5.sh  //50% of screen height\n    20.setVerticalSpacing  // SizedBox(height: 20 * scaleHeight)\n    20.horizontalSpace  // SizedBox(height: 20 * scaleWidth)\n    const RPadding.all(8)   // Padding.all(8.r) - take advantage of const key word\n    EdgeInsets.all(10).w    //EdgeInsets.all(10.w)\n    REdgeInsets.all(8)       // EdgeInsets.all(8.r)\n    EdgeInsets.only(left:8,right:8).r // EdgeInsets.only(left:8.r,right:8.r).\n    BoxConstraints(maxWidth: 100, minHeight: 100).w    //BoxConstraints(maxWidth: 100.w, minHeight: 100.w)\n    Radius.circular(16).w          //Radius.circular(16.w)\n    BorderRadius.all(Radius.circular(16)).w  \n```\n\n#### Adapt screen size\n\nPass the dp size of the design draft((The unit is the same as the unit at initialization))：\n\nAdapted to screen width: `ScreenUtil().setWidth(540)`,\n\nAdapted to screen height: `ScreenUtil().setHeight(200)`, In general, the height is best to adapt to the width\n\nIf your dart sdk>=2.6, you can use extension functions:\n\nexample:\n\ninstead of :\n\n```dart\nContainer(\n  width: ScreenUtil().setWidth(50),\n  height:ScreenUtil().setHeight(200),\n)\n```\n\nyou can use it like this:\n\n```dart\nContainer(\n  width: 50.w,\n  height:200.h\n)\n```\n\n#### `Note`\n\nThe height can also use setWidth to ensure that it is not deformed(when you want a square)\n\nThe setHeight method is mainly to adapt to the height, which is used when you want to control the height of a screen on the UI to be the same as the actual display.\n\nGenerally speaking, 50.w!=50.h.\n\n```dart\n//for example:\n\n//If you want to display a rectangle:\nContainer(\n  width: 375.w,\n  height: 375.h,\n),\n            \n//If you want to display a square based on width:\nContainer(\n  width: 300.w,\n  height: 300.w,\n),\n\n//If you want to display a square based on height:\nContainer(\n  width: 300.h,\n  height: 300.h,\n),\n\n//If you want to display a square based on minimum(height, width):\nContainer(\n  width: 300.r,\n  height: 300.r,\n),\n```\n\n#### Adapter font\n\n``` dart\n//Incoming font size(The unit is the same as the unit at initialization)\nScreenUtil().setSp(28) \n28.sp\n\n//for example:\nColumn(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  children: <Widget>[\n    Text(\n      '16sp, will not change with the system.',\n      style: TextStyle(\n        color: Colors.black,\n        fontSize: 16.sp,\n      ),\n      textScaleFactor: 1.0,\n    ),\n    Text(\n      '16sp,if data is not set in MediaQuery,my font size will change with the system.',\n      style: TextStyle(\n        color: Colors.black,\n        fontSize: 16.sp,\n      ),\n    ),\n  ],\n)\n```\n\n#### Setting font does not change with system font size\n\nAPP global:\n\n```dart\nMaterialApp(\n  debugShowCheckedModeBanner: false,\n  title: 'Flutter_ScreenUtil',\n  theme: ThemeData(\n    primarySwatch: Colors.blue,\n  ),\n  builder: (context, widget) {\n    return MediaQuery(\n      ///Setting font does not change with system font size\n      data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n      child: widget,\n    );\n  },\n  home: HomePage(title: 'FlutterScreenUtil Demo'),\n),\n```\n\nSpecified Text:\n\n```dart\nText(\"text\", textScaleFactor: 1.0)\n```\n\nSpecified Widget:\n\n```dart\nMediaQuery(\n  // If there is no context available you can wrap [MediaQuery] with [Builder]\n  data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n  child: AnyWidget(),\n)\n```\n\n[widget test](https://github.com/OpenFlutter/flutter_screenutil/issues/115)\n\n### Example\n\n[example demo](https://github.com/OpenFlutter/flutter_screenutil/blob/master/example/lib)\n\nTo use second method run: `flutter run --dart-define=method=2`\n\n### Effect\n\n![effect](demo_en.png)\n![tablet effect](demo_tablet_en.png)\n\n\n### Update for Version 5.9.0 (Tests)\nReported as bug in [#515](https://github.com/OpenFlutter/flutter_screenutil/issues/515)\n\n\nIn version 5.9.0, to ensure compatibility and proper functioning of your tests, it is crucial to use the method `tester.pumpAndSettle()`; when conducting widget tests that depend on animations or a settling time to complete their state.\n\nIn the previous version, this step was not strictly necessary. However, to maintain consistency in your tests and avoid unexpected errors, it's strongly recommended incorporating await tester.pumpAndSettle(); in your widget tests if you are using version 5.9.0\n\nExample usage:\n```dart\ntestWidgets('Should ensure widgets settle correctly', (WidgetTester tester) async {\nawait tester.pumpWidget(\n  const MaterialApp(\n    home: ScreenUtilInit(\n      child: MyApp(),\n    ),  \n  ),\n);\n// Insertion of recommended method to prevent failures\nawait tester.pumpAndSettle();\n// Continue with your assertions and tests\n});\n```"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 9.8603515625,
          "content": "# flutter_screenutil\n\n[![Flutter Package](https://img.shields.io/pub/v/flutter_screenutil.svg)](https://pub.dev/packages/flutter_screenutil)\n[![Pub Points](https://img.shields.io/pub/points/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![Popularity](https://img.shields.io/pub/popularity/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![CodeFactor](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil/badge)](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil)\n\n**flutter 屏幕适配方案，用于调整屏幕和字体大小的flutter插件，让你的UI在不同尺寸的屏幕上都能显示合理的布局!**\n\n\n*注意*：此插件仍处于开发阶段，某些API可能尚不可用。\n\n[README of English](https://github.com/OpenFlutter/flutter_ScreenUtil/blob/master/README.md)\n\n[README em Português](https://github.com/OpenFlutter/flutter_screenutil/blob/master/README_PT.md)\n\n[github](https://github.com/OpenFlutter/flutter_screenutil)\n\n[csdn博客工具介绍](https://blog.csdn.net/u011272795/article/details/82795477)\n\n[更新日志](https://github.com/OpenFlutter/flutter_screenutil/blob/master/CHANGELOG.md)\n\n## 使用方法:\n\n### 安装依赖：\n\n安装之前请查看最新版本\n新版本如有问题请使用以前的版本\n```yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  # 添加依赖\n  flutter_screenutil: ^{latest version}\n```\n### 在每个使用的地方导入包：\n```dart\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\n```\n\n### 属性\n\n|属性|类型|默认值|描述|\n|:---|:---|:---|:---|\n|designSize|Size|Size(360, 690)|设计稿中设备的尺寸(单位随意,建议dp,但在使用过程中必须保持一致)|\n| deviceSize      | Size         | null          | 物理设备的大小                                             |\n|builder|Widget Function()|Container()|一般返回一个MaterialApp类型的Function()|\n|orientation|Orientation|portrait|屏幕方向|\n|splitScreenMode|bool|false|支持分屏尺寸|\n|minTextAdapt|bool|false|是否根据宽度/高度中的最小值适配文字|\n|context|BuildContext|null|传入context会更灵敏的根据屏幕变化而改变|\n| child           | Widget       | null          | builder的一部分，其依赖项属性不使用该库    |\n| rebuildFactor   | Function     | *default*     | 返回屏幕指标更改时是否重建。          |\n\n注意：builder和child中必须填写至少一项\n\n### 初始化并设置适配尺寸及字体大小是否根据系统的“字体大小”辅助选项来进行缩放\n在使用之前请设置好设计稿的宽度和高度，传入设计稿的宽度和高度(单位随意,但在使用过程中必须保持一致)\n一定要进行初始化(只需设置一次),以保证在每次使用之前设置好了适配尺寸:\n\n#### 方式一（您必须在app中使用它一次）:\n```dart\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //填入设计稿中设备的屏幕尺寸,单位dp\n    return ScreenUtilInit(\n      designSize: const Size(360, 690),\n      minTextAdapt: true,\n      splitScreenMode: true,\n      builder: (context , child) {\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'First Method',\n          // You can use the library anywhere in the app even in theme\n          theme: ThemeData(\n            primarySwatch: Colors.blue,\n            textTheme: Typography.englishLike2018.apply(fontSizeFactor: 1.sp),\n          ),\n          home: child,\n        );\n      },\n      child: const HomePage(title: 'First Method'),\n    );\n  }\n}\n```\n\n#### 方式二: 你需要一个技巧来支持文字自适应主题\n\n**混合开发使用方式二**\n\n不支持这样做：\n```dart\nMaterialApp(\n  ...\n  //如果你想这样做，你应该选择方式一\n  theme: ThemeData(\n    textTheme: TextTheme(\n      button: TextStyle(fontSize: 45.sp)\n    ),\n  ),\n)\n```\n\n正确的方法应当是这样：\n```dart\nvoid main() async {\n  // Add this line\n  await ScreenUtil.ensureScreenSize();\n  runApp(MyApp());\n}\n...\nMaterialApp(\n  ...\n  builder: (ctx, child) {\n    ScreenUtil.init(ctx);\n    return Theme(\n      data: ThemeData(\n        primarySwatch: Colors.blue,\n        textTheme: TextTheme(bodyText2: TextStyle(fontSize: 30.sp)),\n      ),\n      child: HomePage(title: 'FlutterScreenUtil Demo'),\n    );\n   },\n)\n```\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter_ScreenUtil',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: HomePage(title: 'FlutterScreenUtil Demo'),\n    );\n  }\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  @override\n  Widget build(BuildContext context) {\n    //设置尺寸（填写设计中设备的屏幕尺寸）如果设计基于360dp * 690dp的屏幕\n    ScreenUtil.init(context, designSize: const Size(360, 690));\n    ...\n  }\n}\n```\n\n### 使用\n\n### API\n#### 传入设计稿的dp尺寸\n```dart\n    ScreenUtil().setWidth(540)  (dart sdk>=2.6 : 540.w)   //根据屏幕宽度适配尺寸\n    ScreenUtil().setHeight(200) (dart sdk>=2.6 : 200.h)   //根据屏幕高度适配尺寸(一般根据宽度适配即可)\n    ScreenUtil().radius(200)    (dart sdk>=2.6 : 200.r)   //根据宽度或高度中的较小者进行调整\n    ScreenUtil().setSp(24)      (dart sdk>=2.6 : 24.sp)   //适配字体\n    12.sm   // 取12和12.sp中的最小值\n\n    ScreenUtil.pixelRatio       //设备的像素密度\n    ScreenUtil.screenWidth   (dart sdk>=2.6 : 1.sw)   //设备宽度\n    ScreenUtil.screenHeight  (dart sdk>=2.6 : 1.sh)   //设备高度\n    ScreenUtil.bottomBarHeight  //底部安全区距离，适用于全面屏下面有按键的\n    ScreenUtil.statusBarHeight  //状态栏高度 刘海屏会更高\n    ScreenUtil.textScaleFactor //系统字体缩放比例\n\n    ScreenUtil().scaleWidth  // 实际宽度设计稿宽度的比例\n    ScreenUtil().scaleHeight // 实际高度与设计稿高度度的比例\n\n    ScreenUtil().orientation  //屏幕方向\n\n    0.2.sw  //屏幕宽度的0.2倍\n    0.5.sh  //屏幕高度的50%\n    20.setVerticalSpacing  // SizedBox(height: 20 * scaleHeight)\n    20.horizontalSpace  // SizedBox(height: 20 * scaleWidth)\n    const RPadding.all(8)   // Padding.all(8.r) - 获取到const的优点\n    EdgeInsets.all(10).w    //EdgeInsets.all(10.w)\n    REdgeInsets.all(8)       // EdgeInsets.all(8.r)\n    EdgeInsets.only(left:8,right:8).r // EdgeInsets.only(left:8.r,right:8.r).\n    BoxConstraints(maxWidth: 100, minHeight: 100).w    //BoxConstraints(maxWidth: 100.w, minHeight: 100.w)\n    Radius.circular(16).w          //Radius.circular(16.w)\n    BorderRadius.all(Radius.circular(16)).w  \n```\n\n\n#### 适配尺寸\n\n传入设计稿的尺寸(单位与初始化时的单位相同)：\n\n根据屏幕宽度适配 `width: ScreenUtil().setWidth(540)`,\n\n根据屏幕高度适配 `height: ScreenUtil().setHeight(200)`, 一般来说，控件高度也根据宽度进行适配\n\n如果您的 dart sdk>=2.6，则可以使用一些特殊的函数：\n\n例子：\n\n你不应当这样做：\n```dart\nContainer(\n  width: ScreenUtil().setWidth(50),\n  height:ScreenUtil().setHeight(200),\n)\n```\n正确的方法应当是这样使用：\n```dart\nContainer(\n  width: 50.w,\n  height:200.h\n)\n```\n\n`注意`\n\n高度也根据setWidth来做适配可以保证不变形(当你想要一个正方形的时候)\n\nsetHeight方法主要是在高度上进行适配, 在你想控制UI上一屏的高度与实际中显示一样时使用.\n\n一般来说，50.w!=50.h\n\n例如:\n\n```dart\n//如果你想显示一个矩形:\nContainer(\n  width: 375.w,\n  height: 375.h,\n),\n\n//如果你想基于宽显示一个正方形:\nContainer(\n  width: 300.w,\n  height: 300.w,\n),\n\n//如果你想基于高显示一个正方形:\nContainer(\n  width: 300.h,\n  height: 300.h,\n),\n\n//如果你想基于高或宽中的较小值显示一个正方形:\nContainer(\n  width: 300.r,\n  height: 300.r,\n),\n```\n\n**适配字体**\n\n```dart\n//输入字体大小（单位与初始化时的单位相同）\nScreenUtil().setSp(28) \n28.sp\n\n//例子:\nColumn(\n  crossAxisAlignment: CrossAxisAlignment.start,\n  children: <Widget>[\n    Text(\n      '16sp, 因为设置了`textScaleFactor`，不会随系统变化.',\n      style: TextStyle(\n        color: Colors.black,\n        fontSize: 16.sp,\n      ),\n      textScaleFactor: 1.0,\n    ),\n    Text(\n      '16sp,如果未设置，我的字体大小将随系统而变化.',\n      style: TextStyle(\n        color: Colors.black,\n        fontSize: 16.sp,\n      ),\n    ),\n  ],\n)\n```\n\n#### 设置字体不随系统字体大小进行改变\n\nAPP全局:\n```dart\n       MaterialApp(\n        debugShowCheckedModeBanner: false,\n        title: 'Flutter_ScreenUtil',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        builder: (context, widget) {\n          return MediaQuery(\n            ///设置文字大小不随系统设置改变\n            data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n            child: widget,\n          );\n        },\n        home: HomePage(title: 'FlutterScreenUtil Demo'),\n      ),\n```\n单独的Text:\n```dart\nText(\"text\", textScaleFactor: 1.0)\n```\n\n指定的小部件：\n```dart\nMediaQuery(\n  // 如果这里context不可用，你可以新建一个 [Builder] 将 [MediaQuery] 放入其中\n  data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n  child: AnyWidget(),\n)\n```\n\n[小部件测试](https://github.com/OpenFlutter/flutter_screenutil/issues/115)\n\n### 使用示例:\n\n[示例演示](https://github.com/OpenFlutter/flutter_ScreenUtil/blob/master/example/lib/main_zh.dart)\n\n要使用第二种方法，请运行：`flutter run --dart-define=method=2`\n\n效果:\n\n![手机效果](demo_zh.png)\n![平板效果](demo_tablet_zh.png)\n"
        },
        {
          "name": "README_PT.md",
          "type": "blob",
          "size": 15.1640625,
          "content": "# I don’t speak Portuguese, and other developers have translated the first version. I later modified it based on the translation software. It is recommended to read the English/Chinese version.\n# flutter_screenutil\n[![Flutter Package](https://img.shields.io/pub/v/flutter_screenutil.svg)](https://pub.dev/packages/flutter_screenutil)\n[![Pub Points](https://img.shields.io/pub/points/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![Popularity](https://img.shields.io/pub/popularity/flutter_screenutil)](https://pub.dev/packages/flutter_screenutil/score)\n[![CodeFactor](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil/badge)](https://www.codefactor.io/repository/github/openflutter/flutter_screenutil)\n\n**Um plugin Flutter para adaptação de tamanho de tela e fontes. Deixe sua UI exibir um layout aceitável em diferentes tamanhos de tela!**\n\n*Nota*: Este plugin ainda está em desenvolvimento e algumas APIs podem ainda não estar disponíveis.\n\n[中文文档](https://github.com/OpenFlutter/flutter_screenutil/blob/master/README_CN.md)  \n\n[README of English](https://github.com/OpenFlutter/flutter_ScreenUtil/blob/master/README.md)\n\n[github](https://github.com/OpenFlutter/flutter_screenutil)\n\n[Histórico de atualizações](https://github.com/OpenFlutter/flutter_screenutil/blob/master/CHANGELOG.md)\n\n## Como usar:\n\n### Adicionando a dependência：\nPor favor, verifique a última versão antes da instalação.\nSe houver algum problema com a nova versão, use a versão anterior\n```yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  # add flutter_screenutil\n  flutter_screenutil: ^{latest version}\n```\n\n### Adicione o seguinte import em seu código Dart:\n```dart\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\n```\n\n### Propriedades\n   \n|Propriedade|Tipo|Valor Padrão|Descrição|\n|:---|:---|:---|:---| \n|designSize|Size|Size(360, 690)|The size of the device screen in the design draft, in dp|\n|builder|Widget Function()|Container()|Generally returning a Function of MaterialApp type|\n|orientation|Orientation|portrait|screen orientation|\n|minTextAdapt|bool|false|Whether to adapt the text according to the minimum of width and height|\n|context|BuildContext|null|传入context会更灵敏的根据屏幕变化而改变|\n| splitScreenMode | bool          | false           | support for split screen                                               |\n\n### Inicialize e defina o tamanho de ajuste e tamanho da fonte para dimensionar de acordo com a opção \"tamanho de fonte\" na acessibilidade do sistema\nPor favor, defina a largura e altura do protótipo de design antes de usar (em pixels).\nCertifique-se de definir as dimensões na paginal inicial do MaterialApp (ou seja, no arquivo de entrada, defina apenas uma vez) para garantir que o tamanho de ajuste seja o mesmo antes de cada uso:\n\nThe first way:\n```dart\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    //Set the fit size (Find your UI design, look at the dimensions of the device screen and fill it in,unit in dp)\n    return ScreenUtilInit(\n      designSize: Size(360, 690),\n      minTextAdapt: true,\n      splitScreenMode: true,\n      builder: () =>\n          MaterialApp(\n            //... other code\n            builder: (context, widget) {\n              //add this line\n              ScreenUtil.setContext(context);\n              return MediaQuery(\n                //Setting font does not change with system font size\n                data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n                child: widget!,\n              );\n            },\n            theme: ThemeData(\n              textTheme: TextTheme(\n                //To support the following, you need to use the first initialization method\n                  button: TextStyle(fontSize: 45.sp)\n              ),\n            ),\n          ),\n    );\n  }\n}\n```\n\nThe second way:Does not support font adaptation in the textTheme of MaterialApp's theme.\n**Hybrid development uses the second way**\n\n```\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Flutter_ScreenUtil',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: HomePage(title: 'FlutterScreenUtil Demo'),\n    );\n  }\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  @override\n  Widget build(BuildContext context) {\n    //Set the fit size (Find your UI design, look at the dimensions of the device screen and fill it in,unit in dp)\n    ScreenUtil.init(\n        BoxConstraints(\n            maxWidth: MediaQuery.of(context).size.width,\n            maxHeight: MediaQuery.of(context).size.height),\n        designSize: Size(360, 690),\n        context: context,\n        orientation: Orientation.portrait);\n    return Scaffold();\n  }\n}\n```\n\n### Uso：\n\n### API\n\n```dart\n    ScreenUtil().setWidth(540)  (sdk>=2.6 : 540.w) //Adapted to screen width\n    ScreenUtil().setHeight(200) (sdk>=2.6 : 200.h) //Adapted to screen height\n    ScreenUtil().radius(200) (dart sdk>=2.6 : 200.r)    //Adapt according to the smaller of width or height\n    ScreenUtil().setSp(24)      (sdk>=2.6 : 24.sp)  //Adapter font\n\n    ScreenUtil.pixelRatio       //Device pixel density\n    ScreenUtil.screenWidth     (sdk>=2.6 : 1.sw)  //Device width\n    ScreenUtil.screenHeight    (sdk>=2.6 : 1.sh)  //Device height\n    ScreenUtil.bottomBarHeight  //Bottom safe zone distance, suitable for buttons with full screen\n    ScreenUtil.statusBarHeight  //Status bar height , Notch will be higher\n    ScreenUtil.textScaleFactor  //System font scaling factor\n\n    ScreenUtil().scaleWidth //The ratio of actual width to UI design\n    ScreenUtil().scaleHeight //The ratio of actual height to UI design\n\n    ScreenUtil().orientation  //Screen orientation\n\n    0.2.sw  //0,2 vezes a largura da tela\n    0.5.sh  //50% altura da tela\n    20.setVerticalSpacing  // SizedBox(height: 20 * scaleHeight)\n    20.horizontalSpace  // SizedBox(height: 20 * scaleWidth)\n    const RPadding.all(8)   // Padding.all(8.r) - take advantage of const key word\n    REdgeInsts.all(8)       // EdgeInsets.all(8.r)\n    EdgeInsets.only(left:8,right:8).r // EdgeInsets.only(left:8.r,right:8.r).\n```\n\n#### Adaptar o tamanho da tela：\n\nInforme o tamanho em pixels do protótipo de design:\n\nAdaptado à largura da tela: `ScreenUtil().setWidth(540)`,\n\nAdaptado à altura da tela: `ScreenUtil().setHeight(200)`,\n\nIf your dart sdk>=2.6, you can use extension functions:\n\nexample:\ninstead of :\n```\nContainer(\nwidth: ScreenUtil().setWidth(50),\nheight:ScreenUtil().setHeight(200),\n)\n```\nyou can use it like this:\n```\nContainer(\nwidth: 50.w,\nheight:200.h\n)\n```\n\n**Nota** \n\nAltura também é adaptada de acordo com o setWidth para garantir que não tenha deformação (quando quiser um quadrado)\n\nO método setHeight é a principal forma de adaptar a altura, se quiser controlar a altura e a realidade de uma tela na UiUsed quando a mesma for exibida.\n\nGenerally speaking, 50.w!=50.h.\n\n```dart\n//Exemplo:\n//Retângulo\nContainer(\n           width: 375.w,\n           height: 200.w,\n           ...\n            ),\n            \n////Se quiser exibir um quadrado:\nContainer(\n           width: 300.r,\n           height: 300.r,\n            ),\n            \n```\n\n#### Adaptar fonte:\n``` dart\n//Tamanho da fonte informado, em dp\n\nScreenUtil().setSp(28)    \n     \n//Tamanho da fonte informado，em pixels，a fonte irá dimensionar respeitando a opção \"Tamanho de Fonte\" nas configurações de acessibilidade\nScreenUtil().setSp(24)\n\n//Exemplo:\n\nColumn(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: <Widget>[\n                Text(\n                    'Minha fonte tem 24px no protótipo de design e não irá mudar com o sistema.',\n                    style: TextStyle(\n                      color: Colors.black,\n                      fontSize: ScreenUtil().setSp(24),\n                    ),\n                    textScaleFactor: 1.0,),\n                Text(\n                    'Minha fonte tem 24px no protótipo de design e poderá mudar com o sistema.',\n                    style: TextStyle(\n                        color: Colors.black,\n                        fontSize: ScreenUtil()\n                            .setSp(24))),\n              ],\n            )\n```\n\n#### Outras APIs relacionadas：\n```dart\n    ScreenUtil.pixelRatio       //Densidade de pixels do dispositivo\n    ScreenUtil.screenWidth      //Largura da tela do dispositivo\n    ScreenUtil.screenHeight     //Altura da tela do dispositivo\n    ScreenUtil.bottomBarHeight  //Distância segura do rodapé, adequada para botões em tela cheia\n    ScreenUtil.statusBarHeight  //Altura da status bar em pixels, Notch será maior\n    ScreenUtil.textScaleFactor //Fator de escala da fonte do sistema\n\n    ScreenUtil().scaleWidth //Razão entre a largura atual e a largura do protótipo de design em pixels\n    ScreenUtil().scaleHeight //Razão entre a altura atual e a altura do protótipo de design em pixels\n\n```\n\n```dart\n...\nimport 'package:flutter/material.dart';\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n      builder: (context, constraints) {\n        //Set the fit size (fill in the screen size of the device in the design) If the design is based on the size of the iPhone6 ​​(iPhone6 ​​750*1334)\n        ScreenUtil.init(constraints, designSize: Size(750, 1334));\n\n        return MaterialApp(\n          debugShowCheckedModeBanner: false,\n          title: 'Flutter_ScreenUtil',\n          theme: ThemeData(\n            primarySwatch: Colors.blue,\n          ),\n          home: HomePage(title: 'FlutterScreenUtil Demo'),\n        );\n      },\n    );\n  }\n}\n\nclass HomePage extends StatefulWidget {\n  const HomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  @override\n  Widget build(BuildContext context) {\n    //Set the fit size (fill in the screen size of the device in the design) If the design is based on the size of the iPhone6 ​​(iPhone6 ​​750*1334)\n\n    printScreenInformation();\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: SingleChildScrollView(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.center,\n          children: <Widget>[\n            Row(\n              children: <Widget>[\n                // Using Extensions\n                Container(\n                  padding: EdgeInsets.all(10.w),\n                  width: 0.5.sw,\n                  height: 200.h,\n                  color: Colors.red,\n                  child: Text(\n                    'My width:${0.5.sw}dp \\n'\n                    'My height:${200.h}dp',\n                    style: TextStyle(\n                      color: Colors.white,\n                      fontSize: 24.sp,\n                    ),\n                  ),\n                ),\n                // Without using Extensions\n                Container(\n                  padding: EdgeInsets.all(ScreenUtil().setWidth(10)),\n                  width: ScreenUtil().screenWidth * 0.5,\n                  height: ScreenUtil().setHeight(200),\n                  color: Colors.blue,\n                  child: Text(\n                    'My width:${ScreenUtil().screenWidth * 0.5}dp \\n'\n                    'My height:${ScreenUtil().setHeight(200)}dp',\n                    style: TextStyle(\n                      color: Colors.white,\n                      fontSize: ScreenUtil().setSp(24),\n                    ),\n                  ),\n                ),\n              ],\n            ),\n            Text('Device width:${ScreenUtil().screenWidthPx}px'),\n            Text('Device height:${ScreenUtil().screenHeightPx}px'),\n            Text('Device width:${ScreenUtil().screenWidth}dp'),\n            Text('Device height:${ScreenUtil().screenHeight}dp'),\n            Text('Device pixel density:${ScreenUtil().pixelRatio}'),\n            Text('Bottom safe zone distance:${ScreenUtil().bottomBarHeight}dp'),\n            Text('Status bar height:${ScreenUtil().statusBarHeight}dp'),\n            Text(\n              'Ratio of actual width dp to design draft px:${ScreenUtil().scaleWidth}',\n              textAlign: TextAlign.center,\n            ),\n            Text(\n              'Ratio of actual height dp to design draft px:${ScreenUtil().scaleHeight}',\n              textAlign: TextAlign.center,\n            ),\n            SizedBox(\n              height: 5.h,\n            ),\n            Text('System font scaling factor:${ScreenUtil().textScaleFactor}'),\n            Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: <Widget>[\n                Text(\n                  'My font size is 24px on the design draft and will not change with the system.',\n                  style: TextStyle(\n                    color: Colors.black,\n                    fontSize: 24.sp,\n                  ),\n                ),\n                Text(\n                  'My font size is 24px on the design draft and will change with the system.',\n                  style: TextStyle(\n                    color: Colors.black,\n                    fontSize: 24.ssp,\n                  ),\n                ),\n              ],\n            )\n          ],\n        ),\n      ),\n    );\n  }\n\n  void printScreenInformation() {\n    print('Device width dp:${1.sw}'); //Device width\n    print('Device height dp:${1.sh}'); //Device height\n    print('Device pixel density:${ScreenUtil().pixelRatio}'); //Device pixel density\n    print(\n        'Bottom safe zone distance dp:${ScreenUtil().bottomBarHeight}'); //Bottom safe zone distance，suitable for buttons with full screen\n    print(\n        'Status bar height px:${ScreenUtil().statusBarHeight}dp'); //Status bar height , Notch will be higher Unit px\n    print('Ratio of actual width dp to UI Design:${ScreenUtil().scaleWidth}');\n    print('Ratio of actual height dp to UI Design:${ScreenUtil().scaleHeight}');\n    print('System font scaling:${ScreenUtil().textScaleFactor}');\n    print('0.5 times the screen width:${0.5.sw}');\n    print('0.5 times the screen height:${0.5.sh}');\n  }\n}\n\n```\n\n#### Setting font does not change with system font size\n\nAPP global:\n```\n MaterialApp(\n        debugShowCheckedModeBanner: false,\n        title: 'Flutter_ScreenUtil',\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        builder: (context, widget) {\n          return MediaQuery(\n            ///Setting font does not change with system font size\n            data: MediaQuery.of(context).copyWith(textScaleFactor: 1.0),\n            child: widget,\n          );\n        },\n        home: HomePage(title: 'FlutterScreenUtil Demo'),\n      ),\n```\n\nSeparate Text:\n```dart\nText(\"text\", textScaleFactor: 1.0)\n```\n\n\n[widget test](https://github.com/OpenFlutter/flutter_screenutil/issues/115)\n\n### Exemplo:\n\n[Demonstração](https://github.com/OpenFlutter/flutter_screenutil/blob/master/example/lib/main.dart)\n \nEfeito:\n\n![效果](demo_en.png)\n![tablet effect](demo_tablet_en.png)\n"
        },
        {
          "name": "demo_en.png",
          "type": "blob",
          "size": 110.0068359375,
          "content": null
        },
        {
          "name": "demo_tablet_en.png",
          "type": "blob",
          "size": 257.9677734375,
          "content": null
        },
        {
          "name": "demo_tablet_zh.png",
          "type": "blob",
          "size": 294.9150390625,
          "content": null
        },
        {
          "name": "demo_zh.png",
          "type": "blob",
          "size": 112.625,
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.35546875,
          "content": "name: flutter_screenutil\ndescription: A flutter plugin for adapting screen and font size.Guaranteed to look good on different models\nversion: 5.9.3\nhomepage: https://github.com/OpenFlutter/flutter_screenutil\n\nenvironment:\n  sdk: \">=2.17.0 <4.0.0\"\n  flutter: \">=3.10.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}