{
  "metadata": {
    "timestamp": 1736710597742,
    "page": 216,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Codelessly/ResponsiveFramework",
      "stars": 1295,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5283203125,
          "content": "# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\nmigrate_working_dir/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n# Libraries should not include pubspec.lock, per https://dart.dev/guides/libraries/private-files#pubspeclock.\n/pubspec.lock\n**/doc/api/\n.dart_tool/\n.packages\nbuild/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0986328125,
          "content": "[submodule \"example\"]\n\tpath = example\n\turl = https://github.com/Codelessly/FlutterMinimalWebsite.git\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: d2b66dbfcfdad68473fc4366e3042cd2e17706ac\n  channel: master\n\nproject_type: package\n"
        },
        {
          "name": ".run",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 2.1005859375,
          "content": "# Changelog\n## 1.5.1\n- Fix ScrollBehavior missing default values.\n\n## 1.5.0\n- Create new MaxWidthBox implementation that only uses constraints for setting max width.\n- Create NoScrollBarBehavior.\n- Update ScrollBehavior to inherit default behavior.\n- Fix imports. Added responsive_utils.dart to the library file.\n- Update examples.\n\n## 1.4.0\n- Update license.\n\n## 1.3.0\n- Refactor Library Imports. \n  - Unify library imports.\n- Restore const Conditions.\n  - Fix `copyWith` type.\n- Update examples.\n- Fix ResponsiveVisibility nullable type error.\n\n## 1.2.0\n- Flutter v3.19 update.\n- ResponsiveValue nullable type support.\n- Update ResponsiveRowColumn to use underlying Flex instead of Row and Columns.\n  - Preserves nested widget state when switching between Rows and Columns.\n- Fix `landscape` incorrectly set to always true.\n\n## 1.1.1\n- v1.0.0 migration guide: [Migration Guide](https://github.com/Codelessly/ResponsiveFramework/blob/master/migration_0.2.0_to_1.0.0.md)\n- Fix landscape values null.\n- Remove names and comments of deprecated `ResponsiveWrapper` in code.\n\n## 1.1.0\n- Breaking Change - Responsive Value Condition is no longer constant to support inheriting type nullability.\n- Simplify example.\n\n## 1.0.0\n- New ResponsiveBreakpoints widget.\n- Deprecated ResponsiveWrapper widget.\n\n## 0.2.0\nLegacy `ResponsiveWrapper` implementation.\n\nUsage instructions:\n\n```yaml\nresponsive_framework: 0.2.0\n```\n\nAdd `ResponsiveWrapper.builder` to your MaterialApp or CupertinoApp.\n```dart\nimport 'package:responsive_framework/responsive_framework.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      builder: (context, child) => ResponsiveWrapper.builder(\n          child,\n          maxWidth: 1200,\n          minWidth: 480,\n          defaultScale: true,\n          breakpoints: [\n            ResponsiveBreakpoint.resize(480, name: MOBILE),\n            ResponsiveBreakpoint.autoScale(800, name: TABLET),\n            ResponsiveBreakpoint.resize(1000, name: DESKTOP),\n          ],\n          background: Container(color: Color(0xFFF5F5F5))),\n      initialRoute: \"/\",\n    );\n  }\n}\n```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2024 Codelessly\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.57421875,
          "content": "![Screenshots](packages/Responsive%20Cover.png)\n# Responsive Framework\n[![Flutter Responsive](https://img.shields.io/badge/flutter-responsive-brightgreen.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework) [![Pub release](https://img.shields.io/pub/v/responsive_framework.svg?style=flat-square)](https://pub.dev/packages/responsive_framework) [![GitHub Release Date](https://img.shields.io/github/release-date/Codelessly/ResponsiveFramework.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework) [![GitHub issues](https://img.shields.io/github/issues/Codelessly/ResponsiveFramework.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework/issues) [![GitHub top language](https://img.shields.io/github/languages/top/Codelessly/ResponsiveFramework.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework) [![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/Codelessly/ResponsiveFramework.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework) [![Awesome Flutter](https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&style=flat-square)](https://github.com/Solido/awesome-flutter) [![Libraries.io for GitHub](https://img.shields.io/librariesio/github/Codelessly/ResponsiveFramework.svg?style=flat-square)](https://libraries.io/github/Codelessly/ResponsiveFramework) [![License](https://img.shields.io/badge/License-BSD%200--Clause-orange.svg?style=flat-square)](https://opensource.org/licenses/0BSD)\n\n![Screenshots](packages/Responsive%20Demo.gif)\n\n> ### Responsiveness made simple\n\nThe Responsive Framework includes widgets that help developers build responsive apps for mobile, desktop, and website layouts.\n\n## Demo\n\n### [Minimal Website](https://gallery.codelessly.com/flutterwebsites/minimal/?utm_medium=link&utm_campaign=demo)\n\nA demo website built with the Responsive Framework. [View Code](https://github.com/Codelessly/FlutterMinimalWebsite)\n\n### [Flutter Website](https://gallery.codelessly.com/flutterwebsites/flutterwebsite/?utm_medium=link&utm_campaign=demo)\n\nThe flutter.dev website recreated in Flutter. [View Code](https://github.com/Codelessly/FlutterWebsite)\n\n### [Pub.dev Website](https://gallery.codelessly.com/flutterwebsites/pub/?utm_medium=link&utm_campaign=demo)\n\nThe pub.dev website recreated in Flutter. [View Code](https://github.com/Codelessly/FlutterPubWebsite)\n\n## Quick Start\n\n[![Pub release](https://img.shields.io/pub/v/responsive_framework.svg?style=flat-square)](https://pub.dev/packages/responsive_framework)\n\nImport this library into your project:\n\n```yaml\nresponsive_framework: ^latest_version\n```\n\nAdd `ResponsiveBreakpoints.builder` to your MaterialApp or CupertinoApp. Define your own breakpoints and labels.\n```dart\nimport 'package:responsive_framework/responsive_framework.dart';\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      builder: (context, child) => ResponsiveBreakpoints.builder(\n        child: child!,\n        breakpoints: [\n          const Breakpoint(start: 0, end: 450, name: MOBILE),\n          const Breakpoint(start: 451, end: 800, name: TABLET),\n          const Breakpoint(start: 801, end: 1920, name: DESKTOP),\n          const Breakpoint(start: 1921, end: double.infinity, name: '4K'),\n        ],\n      ),\n      initialRoute: \"/\",\n    );\n  }\n}\n```\n\nUse the labels you defined for layouts and values.\n\n```dart\n// Example: if the screen is bigger than the Mobile breakpoint, build full width AppBar icons and labels.\nif (ResponsiveBreakpoints.of(context).largerThan(MOBILE))\n    FullWidthAppBarItems()\n\n// Booleans\nResponsiveBreakpoints.of(context).isDesktop;\nResponsiveBreakpoints.of(context).isTablet;\nResponsiveBreakpoints.of(context).isMobile;\nResponsiveBreakpoints.of(context).isPhone;\n\n// Conditionals\nResponsiveBreakpoints.of(context).equals(DESKTOP)\nResponsiveBreakpoints.of(context).largerThan(MOBILE)\nResponsiveBreakpoints.of(context).smallerThan(TABLET)\nResponsiveBreakpoints.of(context).between(MOBILE, TABLET)\n...\n```\n\n### Customization\nYou can define your own breakpoint labels and use them in your conditionals.\n\nFor example, if you're building a Material 3 Navigation Rail and want to expand the menu to full width once there is enough room, you can add a custom `EXPAND_SIDE_PANEL` breakpoint.\n\n```dart\nbreakpoints: [\n  ...\n  const Breakpoint(start: 801, end: 1920, name: DESKTOP),\n  const Breakpoint(start: 900, end: 900, name: 'EXPAND_SIDE_PANEL') <- Custom label.\n  const Breakpoint(start: 1921, end: double.infinity, name: '4K'),\n  ...\n]\n```\n\nThen, in your code, show the Rail based on the breakpoint condition.\n\n> expand: ResponsiveBreakpoints.of(context).largerThan('EXPAND_SIDE_PANEL')\n\n### Responsive Framework Widgets\nThe ResponsiveFramework includes a few custom widgets that supplement Flutter's responsive capabilities. Their usages are showcased in the demo projects.\n\n- *[ResponsiveValue](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_value.dart)*\n  - *[ResponsiveVisibility](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_value.dart)*\n  - *[ResponsiveConstraints](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_value.dart)*\n- *[ResponsiveRowColumn](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_row_column.dart)*\n- *[ResponsiveGridView](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_grid.dart)*\n- *[ResponsiveScaledBox](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/responsive_scaled_box.dart)*\n- *[MaxWidthBox](https://github.com/Codelessly/ResponsiveFramework/blob/master/lib/src/max_width_box.dart)*\n\n\n## Legacy ReadMe (v0.2.0 and below)\n\n### ResponsiveWrapper Migration\n[v1.0.0 Migration Guide](https://github.com/Codelessly/ResponsiveFramework/blob/master/migration_0.2.0_to_1.0.0.md)\n\n### The remainder of the legacy ReadMe is preserved below as the concepts are still useful and used by the new widgets. ResponsiveWrapper has been deprecated and removed.\n\n### The Problem\nSupporting multiple display sizes often means recreating the same layout multiple times. Under the traditional _Bootstrap_ approach, building responsive UI is time consuming, frustrating and repetitive. Furthermore, getting everything pixel perfect is near impossible and simple edits take hours.\n\n![Screenshots](packages/Bad%20Viewport%20Selector%20Animated.gif)\n\n### The Solution\nUse Responsive Framework to automatically scale your UI.\n\n> **ResponsiveBreakpoint.autoScale(600);**\n\n\n## AutoScale\n\n![Screenshots](packages/Scale%20Resize%20Comparison.gif)\n\nAutoScale shrinks and expands your layout *proportionally*, preserving the exact look of your UI.\nThis eliminates the need to manually adapt layouts to mobile, tablet, and desktop.\n\n```dart\nResponsiveBreakpoint.autoScale(600);\n```\n\nFlutter's default behavior is resize which Responsive Framework respects. AutoScale is off by default and can be enabled at breakpoints by setting `autoScale` to `true`.\n\n## Breakpoints\n\n![Screenshots](packages/Device%20Preview.gif)\n\nBreakpoints control responsive behavior at different screen sizes.\n\n```dart\nResponsiveWrapper(\n    child,\n    breakpoints: [\n        ResponsiveBreakpoint.resize(600, name: MOBILE),\n        ResponsiveBreakpoint.autoScale(800, name: TABLET),\n        ResponsiveBreakpoint.autoScale(1200, name: DESKTOP),\n    ],\n)\n```\nBreakpoints give you fine-grained control over how your UI displays.\n\n## Introductory Concepts\n\nThese concepts helps you start using the Responsive Framework and build an responsive app quickly.\n\n### Scale vs Resize\n\nFlutter's default behavior is to resize your layout when the screen dimensions change. Resizing a layout stretches it in the direction of an unconstrained width or height. Any constrained dimension stays fixed which is why mobile app UIs look tiny on desktop. The following example illustrates the difference between resizing and scaling.\n\n![Screenshots](packages/AppBar%20Scale%20vs%20Resize%20Comparison.png)\n\nAn AppBar widget looks correct on a phone. When viewed on a desktop however, the AppBar is too short and the title looks too small.\nHere is what happens under each behavior: \n1. Resizing (default) - the AppBar's width is double.infinity so it stretches to fill the available width. The Toolbar height is fixed and stays 56dp.\n2. Scaling - the AppBar's width stretches to fill the available width. The height scales proportionally using an aspect ratio automatically calculated from the nearest `ResponsiveBreakpoint`. As the width increases, the height increases proportionally.\n\nWhen scaled, the AppBar looks correct on desktop, up to a certain size. Once the screen becomes too wide, the AppBar starts to appear too large. This is where breakpoints come in.\n\n### Breakpoint Configuration\n\nTo adapt to a wide variety of screen sizes, set breakpoints to control responsive behavior.\n\n```dart\nResponsiveWrapper(\n    child,\n    maxWidth: 1200,\n    minWidth: 480,\n    defaultScale: true,\n    breakpoints: [\n        ResponsiveBreakpoint.resize(480, name: MOBILE),\n        ResponsiveBreakpoint.autoScale(800, name: TABLET),\n        ResponsiveBreakpoint.resize(1000, name: DESKTOP),\n        ResponsiveBreakpoint.autoScale(2460, name: '4K'),\n    ],\n)\n```\n\nAn arbitrary number of breakpoints can be set. Resizing/scaling behavior can be mixed and matched.\n- below 480: resize on small screens to avoid cramp and overflow errors.\n- 480-800: resize on phones for native widget sizes.\n- 800-1000: scale on tablets to avoid elements appearing too small.\n- 1000+: resize on desktops to use available space. \n- 2460+: scale on extra large 4K displays so text is still legible and widgets are not spaced too far apart.\n\n## Additional Resources\n\n### Resocoder Tutorial\n\nThe wonderful people at Resocoder created a great tutorial video and article walking through the usage of the Responsive Framework at the link below.\n\n[View Responsive Framework Tutorial](https://resocoder.com/2021/10/03/create-responsive-flutter-apps-with-minimal-effort/)\n\n### Project Wiki\n\nNo project wiki exists yet unfortunately. That means this is an opportunity for you to create and maintain the wiki for one of the most popular Flutter packages. This package needs **your** help with documentation!\n\nPlease reach out via the contact links below if you are interested.\n\n## About\n\nResponsive Framework was created out of a desire for a better way to manage responsiveness. The ability to automatically adapt UI to different sizes opens up a world of possibilities. Here at Codelessly, we're building a Flutter app UI and website builder, development tools, and UI templates to increase productivity. If that sounds interesting, you'll want to subscribe to updates below 😎\n\nResponsive Framework is licensed under Zero-Clause BSD and released as Emailware. If you like this project or it helped you, please subscribe to updates. Although it is not required, you might miss the goodies we share!\n\n<a href=\"https://codelessly.com/?utm_medium=banner&utm_campaign=newsletter_subscribe\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Email%20Newsletter%20Signup.png\"></a>\n\n## Badges 🏆\n\nNow you can proudly display the time and headache saved by using Responsive Framework with a supporter's badge.\n\n[![Pub release](https://img.shields.io/badge/flutter-responsive-brightgreen.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework) \n\n```\n[![Flutter Responsive](https://img.shields.io/badge/flutter-responsive-brightgreen.svg?style=flat-square)](https://github.com/Codelessly/ResponsiveFramework)\n```\n<img alt=\"Built Responsive\" src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Built%20Responsive%20Badge.png\"/>\n\n```html\n<a href=\"https://github.com/Codelessly/ResponsiveFramework\">\n  <img alt=\"Built Responsive\"\n       src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Built%20Responsive%20Badge.png\"/>\n</a>\n```\n<img alt=\"Built with Responsive Framework\" src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Built%20with%20Responsive%20Badge.png\"/>\n\n```html\n<a href=\"https://github.com/Codelessly/ResponsiveFramework\">\n  <img alt=\"Built with Responsive Framework\"\n       src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Built%20with%20Responsive%20Badge.png\"/>\n</a>\n```\n\n## Contributors ❤️\n\n**Design:** \n* [Ray Li](https://github.com/searchy2)\n\n**Development:** \n* [Ray Li](https://github.com/searchy2)\n* [Spencer Lindemuth](https://github.com/SpencerLindemuth)\n* [Trefa1998](https://github.com/Trefa1998)\n* *add yourself here by contributing*\n\n**Sponsor:** [Codelessly - Flutter App UI and Website Builder](https://codelessly.com/?utm_medium=link&utm_campaign=direct)\n\n<a href=\"mailto:ray@codelessly.com\">\n  <img alt=\"Codelessly Email\"\n       src=\"https://lh3.googleusercontent.com/yN_m90WN_HSCohXdgC2k91uSTk9dnYfoxTYwG_mv_l5_05dV2CzkQ1B6rEqH4uqdgjA=w96\" />\n</a>\n<a href=\"https://codelessly.com/?utm_medium=icon&utm_campaign=direct\">\n  <img alt=\"Codelessly Website\"\n       src=\"https://lh3.googleusercontent.com/YmMGcgeO7Km9-J9vFRByov5sb7OUKetnKs8pTi0JZMDj3GVJ61GMTcTlHB7u9uHDHag=w96\" />\n</a>\n<a href=\"https://twitter.com/BuildCodelessly\">\n  <img alt=\"Codelessly Twitter\"\n       src=\"https://lh3.ggpht.com/lSLM0xhCA1RZOwaQcjhlwmsvaIQYaP3c5qbDKCgLALhydrgExnaSKZdGa8S3YtRuVA=w96\" />\n</a>\n<a href=\"https://github.com/Codelessly\">\n  <img alt=\"Codelessly GitHub\"\n       src=\"https://lh3.googleusercontent.com/L15QqmKK7Vl-Ag1ZxaBqNQlXVEw58JT2BDb-ef5t2eboDh0pPSLjDgi3-aQ3Opdhhyk=w96\" />\n</a>\n<br></br>\n\nFlutter is a game-changing technology that will revolutionize not just development, but software itself. A big thank you to the Flutter team for building such an amazing platform 💙 \n\n<a href=\"https://github.com/flutter/flutter\">\n  <img alt=\"Flutter\"\n       src=\"https://raw.githubusercontent.com/Codelessly/ResponsiveFramework/master/packages/Flutter%20Logo%20Banner.png\" />\n</a>\n \n## License\n\n    BSD Zero Clause License\n\n    Copyright © 2024 Codelessly\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 1.4189453125,
          "content": "# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at\n  # https://dart-lang.github.io/linter/lints/index.html.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n"
        },
        {
          "name": "example",
          "type": "commit",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "migration_0.2.0_to_1.0.0.md",
          "type": "blob",
          "size": 6.974609375,
          "content": "# v1.0.0 Migration Guide\n\nThe legacy ResponsiveWrapper combined multiple features into one widget. This made it difficult to use at times when custom behavior was required. The updated V1 implementation separates each feature into its own widget.\n\n**Before**\n\n- ResponsiveWrapper\n\n**After**\n- ResponsiveBreakpoints\n- ResponsiveScaledBox\n- MaxWidthBox\n\n## Example\n\n**Before**\n\n```dart\nMaterialApp(\n  builder: (context, child) => ResponsiveWrapper.builder(\n      BouncingScrollWrapper.builder(context, child!),\n      maxWidth: 1200,\n      minWidth: 450,\n      defaultScale: true,\n      breakpoints: [\n        const ResponsiveBreakpoint.resize(450, name: MOBILE),\n        const ResponsiveBreakpoint.autoScale(800, name: TABLET),\n        const ResponsiveBreakpoint.resize(1920, name: DESKTOP),\n        const ResponsiveBreakpoint.autoScale(2460, name: \"4K\"),\n      ],\n      background: Container(color: const Color(0xFFF5F5F5))),\n);\n```\n\n**After**\n\n```dart\nMaterialApp(\n  builder: (context, child) => ResponsiveBreakpoints.builder(\n    child: child!,\n    breakpoints: [\n      const Breakpoint(start: 0, end: 450, name: MOBILE),\n      const Breakpoint(start: 451, end: 800, name: TABLET),\n      const Breakpoint(start: 801, end: 1920, name: DESKTOP),\n      const Breakpoint(start: 1921, end: double.infinity, name: '4K'),\n    ],\n  ),\n  onGenerateRoute: (RouteSettings settings) {\n    return MaterialPageRoute(builder: (context) {\n      // The following code implements the legacy ResponsiveWrapper AutoScale functionality\n      // using the new ResponsiveScaledBox. The ResponsiveScaledBox widget preserves\n      // the legacy ResponsiveWrapper behavior, scaling the UI instead of resizing.\n      //\n      // **MaxWidthBox** - A widget that limits the maximum width.\n      // This is used to create a gutter area on either side of the content.\n      //\n      // **ResponsiveScaledBox** - A widget that  renders its child\n      // with a FittedBox set to the `width` value. Set the fixed width value\n      // based on the active breakpoint.\n      return MaxWidthBox(\n        maxWidth: 1200,\n        background: Container(color: const Color(0xFFF5F5F5)),\n        child: ResponsiveScaledBox(\n          width: ResponsiveValue<double>(context, conditionalValues: [\n            Condition.equals(name: MOBILE, value: 450),\n            Condition.between(start: 800, end: 1100, value: 800),\n            Condition.between(start: 1000, end: 1200, value: 1000),\n            // There are no conditions for width over 1200\n            // because the `maxWidth` is set to 1200 via the MaxWidthBox.\n          ]).value,\n          child: BouncingScrollWrapper.builder(\n              context, buildPage(settings.name ?? ''),\n              dragWithMouse: true),\n        ),\n      );\n    });\n  },\n);\n```\n\n\n#### ResponsiveScaledBox\n> ResponsiveScaledBox(width: width, child: child);\n\nReplaces the core AutoScale functionality of ResponsiveWrapper. ResponsiveScaledBox renders the `child` widget with the specified `width`. \n\nThis widget wraps the Flutter `FittedBox` widget with a `LayoutBuilder` and `MediaQuery`. \n\n**Why should you use a `ResponsiveScaledBox`?**\n\nUse a `ResponsiveScaledBox` instead of a `FittedBox` if the layout is full screen as the widget helps calculate correctly scaled `MediaQueryData`.\n\n#### MaxWidthBox\n> MaxWidthBox(maxWidth: maxWidth, background: background, child: child);\n\nLimit the `child` widget to the `maxWidth` and paints an optional `background` behind the widget. \n\nThis widget is helpful for limiting the content width on large desktop displays and creating gutters on the left and right side of the page.\n\n## Walkthrough\n\n### Core Concept\n\nThe v0.2.0 ResponsiveWrapper is deprecated and the old `AutoScale` functionality has been moved to `ResponsiveScaledBox`.\nNow, breakpoints and `AutoScale` behavior are separated. This enables \"page-level\" responsiveness and more customizability in v1.0.0 which was a limitation of v0.2.0. \n\nThe `maxWidth` feature has been moved to `MaxWidthBox`.\n\n### Step 1: Migrate ResponsiveWrapper to ResponsiveBreakpoints\n\n```dart\nResponsiveBreakpoints.builder(\n    child: child!,\n    breakpoints: [\n      const Breakpoint(start: 0, end: 450, name: MOBILE),\n      const Breakpoint(start: 451, end: 800, name: TABLET),\n      const Breakpoint(start: 801, end: 1920, name: DESKTOP),\n      const Breakpoint(start: 1921, end: double.infinity, name: '4K'),\n    ],\n)\n```\n\n#### Breakpoints\n\n**Old**\n```dart\nconst ResponsiveBreakpoint.resize(450, name: MOBILE)\n```\n\n**New**\n```dart\nconst Breakpoint(start: 0, end: 450, name: MOBILE)\n```\n\nIn v1.0.0, breakpoints are explicit and clearly define a `start` and `end`. \nIt's highly recommended to create contiguous breakpoints from `0` to `double.infinity`.\n\n#### Tags\n\n**Old**\n```dart\nconst ResponsiveBreakpoint.tag(900, name: 'EXPAND_SIDE_PANEL')\n```\n\n**New**\n```dart\nconst Breakpoint(start: 900, end: 900, name: 'EXPAND_SIDE_PANEL')\n```\n\nTo create a \"TAG\", set the start and end breakpoints to the same value.\nFor example, if you're building a Material 3 Navigation Rail and want to expand the menu to full width once there is enough room, you can add a custom `EXPAND_SIDE_PANEL` breakpoint.\n\nThen, in your code, show the Rail based on the breakpoint condition.\n\n> expand: ResponsiveBreakpoints.of(context).largerThan('EXPAND_SIDE_PANEL')\n\n## Step 2: Migrate AutoScale to ResponsiveScaledBox\n\nThe `ResponsiveScaledBox` replaces the AutoScale functionality from `ResponsiveWrapper`. \n\n**Before**\n\n```dart \nResponsiveWrapper.builder(\n  child: child,\n  maxWidth: 1200,\n  minWidth: 450,\n  defaultScale: true,\n  breakpoints: [...],\n)\n```\n\n**After**\n\n```dart\nResponsiveScaledBox(\n  width: ResponsiveValue<double>(context, conditionalValues: [\n    Condition.equals(name: MOBILE, value: 450),\n    Condition.between(start: 800, end: 1100, value: 800),\n    Condition.between(start: 1000, end: 1200, value: 1000),\n  ]).value,\n  child: child,\n)\n```\n\nThe ResponsiveScaledBox takes a ResponsiveValue<double> for its width property. The ResponsiveValue looks up the value based on breakpoint conditions.\n\nFor example:\n\n> Condition.equals(name: MOBILE, value: 450),\n\nThe first condition checks if the active breakpoint name equals \"MOBILE\". If true, it will return the value 450.\n\nWhen the MOBILE breakpoint is active (the screen width is between 0 and 450), this condition will match and the ResponsiveScaledBox width will be set to 450. This is useful for AutoScaling on screens that are too small and avoiding layout errors.\n\nThe ResponsiveValue allows you to define different width values for each breakpoint. It will find the first condition that matches the current active breakpoint, and return that conditional value.\n\nDefine fixed width values per breakpoint with Conditions. `Condition.equals()`, `Condition.between()`, etc.\n\n## Step 3: Migrate MaxWidth to MaxWidthBox\nThe `MaxWidthBox` replaces the maxWidth property from `ResponsiveWrapper`.\n\n**Before**\n\n```dart\nResponsiveWrapper.builder(\n  maxWidth: 1200,\n  child: child \n)\n```\n\n**After**\n\n```dart\nMaxWidthBox(\n  maxWidth: 1200,\n  child: child\n)  \n```\n\nWrap the `MaxWidthBox` around a page to limit the max width."
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.587890625,
          "content": "name: responsive_framework\ndescription: Easily make Flutter apps responsive. Automatically adapt UI to different screen sizes. Responsiveness made simple.\nversion: 1.5.1\nhomepage: https://codelessly.com\nrepository: https://github.com/Codelessly/ResponsiveFramework\ndocumentation: https://github.com/Codelessly/ResponsiveFramework\n\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n  flutter: '>=3.7.0'\n\ndependencies:\n  flutter:\n    sdk: flutter\n  collection: ^1.16.0 # Do not force latest version to prevent dependency conflicts.\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n  flutter_lints: ^4.0.0\n\nflutter:"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}