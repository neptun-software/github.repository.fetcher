{
  "metadata": {
    "timestamp": 1736710614552,
    "page": 256,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "XianyuTech/aspectd",
      "stars": 1105,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0458984375,
          "content": ".packages\n.idea/*\n.dart_tool/*\nSnapshot/*\n*.iml"
        },
        {
          "name": "0001-aspectd.patch",
          "type": "blob",
          "size": 10.4013671875,
          "content": "From 9a94fddaf7ceedfcbef267b293634e5fbcfb0996 Mon Sep 17 00:00:00 2001\nFrom: \"kylewong.wk\" <kylewong.wk@alibaba-inc.com>\nDate: Wed, 23 Jun 2021 01:42:43 +0800\nSubject: [PATCH] aspectd\n\n---\n packages/flutter_tools/lib/src/aspectd.dart   | 206 ++++++++++++++++++\n .../lib/src/build_system/targets/common.dart  |   9 +\n 2 files changed, 215 insertions(+)\n create mode 100644 packages/flutter_tools/lib/src/aspectd.dart\n\ndiff --git a/packages/flutter_tools/lib/src/aspectd.dart b/packages/flutter_tools/lib/src/aspectd.dart\nnew file mode 100644\nindex 0000000000..773caaa1c9\n--- /dev/null\n+++ b/packages/flutter_tools/lib/src/aspectd.dart\n@@ -0,0 +1,206 @@\n+// Copyright 2018 The Chromium Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+import 'dart:io';\n+\n+import 'package:package_config/package_config.dart';\n+\n+import 'artifacts.dart';\n+import 'base/common.dart';\n+import 'base/file_system.dart';\n+import 'build_system/build_system.dart';\n+import 'build_system/targets/common.dart';\n+import 'cache.dart';\n+import 'compile.dart';\n+import 'dart/package_map.dart';\n+import 'globals.dart' as globals;\n+\n+const String aspectdImplPackageRelPath = '..';\n+const String aspectdImplPackageName = 'aspectd_impl';\n+const String frontendServerDartSnapshot = 'frontend_server.dart.snapshot';\n+\n+class AspectdHook {\n+  static String? aspectdTransformerSnapshot;\n+\n+  static Directory getAspectdImplDirectory(Directory rootProjectDir) {\n+    return globals.fs.directory(globals.fs.path.normalize(globals.fs.path.join(\n+        rootProjectDir.path,\n+        aspectdImplPackageRelPath,\n+        aspectdImplPackageName)));\n+  }\n+\n+  static Future<Directory> getPackagePathFromConfig(\n+      String packageConfigPath, String packageName) async {\n+    final PackageConfig packageConfig = await loadPackageConfigWithLogging(\n+      globals.fs.file(packageConfigPath),\n+      logger: globals.logger,\n+    );\n+    if ((packageConfig?.packages?.length ?? 0) > 0) {\n+      final Package aspectdPackage = packageConfig.packages\n+          .toList()\n+          .firstWhere((Package element) => element.name == packageName);\n+      return globals.fs.directory(aspectdPackage.root.toFilePath());\n+    }\n+    return Future.value(null);\n+  }\n+\n+  static Future<Directory> getFlutterFrontendServerDirectory(\n+      String packagesPath) async {\n+    return globals.fs.directory(globals.fs.path.join(\n+        (await getPackagePathFromConfig(packagesPath, 'aspectd')).absolute.path,\n+        'lib',\n+        'src',\n+        'flutter_frontend_server'));\n+  }\n+\n+  static Future<bool> isAspectdEnabled() async {\n+    final Directory currentDirectory = globals.fs.currentDirectory;\n+    final Directory aspectdDirectory =\n+        getAspectdImplDirectory(currentDirectory);\n+    if (!aspectdDirectory.existsSync()) {\n+      return false;\n+    }\n+    final String aspectdImplPackagesPath =\n+        globals.fs.path.join(aspectdDirectory.absolute.path, '.packages');\n+    final Directory flutterFrontendServerDirectory =\n+        await getFlutterFrontendServerDirectory(aspectdImplPackagesPath);\n+    if (!(aspectdDirectory.existsSync() &&\n+        flutterFrontendServerDirectory.existsSync() &&\n+        currentDirectory.absolute.path != aspectdDirectory.absolute.path &&\n+        globals.fs\n+            .file(globals.fs.path.join(aspectdDirectory.path, 'pubspec.yaml'))\n+            .existsSync() &&\n+        globals.fs\n+            .file(globals.fs.path.join(aspectdDirectory.path, '.packages'))\n+            .existsSync() &&\n+        globals.fs\n+            .file(globals.fs.path.join(\n+                aspectdDirectory.path, 'lib', aspectdImplPackageName + '.dart'))\n+            .existsSync())) {\n+      return false;\n+    }\n+    return await checkAspectdFlutterFrontendServerSnapshot(\n+        aspectdImplPackagesPath);\n+  }\n+\n+  static Future<bool> checkAspectdFlutterFrontendServerSnapshot(\n+      String packagesPath) async {\n+    final Directory flutterFrontendServerDirectory =\n+        await getFlutterFrontendServerDirectory(packagesPath);\n+    final String aspectdFlutterFrontendServerSnapshot = globals.fs.path.join(\n+        flutterFrontendServerDirectory.absolute.path,\n+        frontendServerDartSnapshot);\n+    final String defaultFlutterFrontendServerSnapshot = globals.artifacts\n+        .getArtifactPath(Artifact.frontendServerSnapshotForEngineDartSdk);\n+    if (!globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync()) {\n+      final String dartSdkDir = await getDartSdkDependency(\n+          (await getPackagePathFromConfig(packagesPath, 'aspectd'))\n+              .absolute\n+              .path);\n+\n+      final String frontendServerPackageConfigJsonFile =\n+          '${flutterFrontendServerDirectory.absolute.path}/package_config.json';\n+      final String rebasedFrontendServerPackageConfigJsonFile =\n+          '${flutterFrontendServerDirectory.absolute.path}/rebased_package_config.json';\n+      String frontendServerPackageConfigJson = globals.fs\n+          .file(frontendServerPackageConfigJsonFile)\n+          .readAsStringSync();\n+      frontendServerPackageConfigJson = frontendServerPackageConfigJson\n+          .replaceAll('../../../third_party/dart/', dartSdkDir);\n+      globals.fs\n+          .file(rebasedFrontendServerPackageConfigJsonFile)\n+          .writeAsStringSync(frontendServerPackageConfigJson);\n+\n+      final List<String> commands = <String>[\n+        globals.artifacts.getArtifactPath(Artifact.engineDartBinary),\n+        '--deterministic',\n+        '--packages=$rebasedFrontendServerPackageConfigJsonFile',\n+        '--snapshot=$aspectdFlutterFrontendServerSnapshot',\n+        '--snapshot-kind=kernel',\n+        '${flutterFrontendServerDirectory.absolute.path}/starter.dart'\n+      ];\n+      final ProcessResult processResult =\n+          await globals.processManager.run(commands);\n+      globals.fs.file(rebasedFrontendServerPackageConfigJsonFile).deleteSync();\n+      if (processResult.exitCode != 0 ||\n+          globals.fs.file(aspectdFlutterFrontendServerSnapshot).existsSync() ==\n+              false) {\n+        throwToolExit(\n+            'Aspectd unexpected error: ${processResult.stderr.toString()}');\n+      }\n+    }\n+    if (globals.fs.file(defaultFlutterFrontendServerSnapshot).existsSync()) {\n+      globals.fs.file(defaultFlutterFrontendServerSnapshot).deleteSync();\n+    }\n+    globals.fs\n+        .file(aspectdFlutterFrontendServerSnapshot)\n+        .copySync(defaultFlutterFrontendServerSnapshot);\n+    return true;\n+  }\n+\n+  static Future<String> getDartSdkDependency(String aspectdDir) async {\n+    final ProcessResult processResult = await globals.processManager.run(\n+        <String>[\n+          globals.fs.path.join(\n+              globals.artifacts.getArtifactPath(Artifact.engineDartSdkPath),\n+              'bin',\n+              'pub'),\n+          'get',\n+          '--verbosity=warning'\n+        ],\n+        workingDirectory: aspectdDir,\n+        environment: <String, String>{'FLUTTER_ROOT': Cache.flutterRoot ?? \"\"});\n+    if (processResult.exitCode != 0) {\n+      throwToolExit(\n+          'Aspectd unexpected error: ${processResult.stderr.toString()}');\n+    }\n+    final Directory kernelDir = await getPackagePathFromConfig(\n+        globals.fs.path.join(aspectdDir, '.packages'), 'kernel');\n+    return kernelDir.parent.parent.uri.toString();\n+  }\n+\n+  Future<void> runBuildDillCommand(Environment environment) async {\n+    final Directory aspectdDir =\n+        getAspectdImplDirectory(globals.fs.currentDirectory);\n+    final Directory previousDirectory = globals.fs.currentDirectory;\n+    globals.fs.currentDirectory = aspectdDir;\n+\n+    String relativeDir = environment.outputDir.absolute.path\n+        .substring(environment.projectDir.absolute.path.length + 1);\n+    final String outputDir = globals.fs.path.join(aspectdDir.path, relativeDir);\n+\n+    final String buildDir =\n+        globals.fs.path.join(aspectdDir.path, '.dart_tool', 'flutter_build');\n+\n+    final Map<String, String> defines = environment.defines;\n+    defines[kTargetFile] = globals.fs.path\n+        .join(aspectdDir.path, 'lib', aspectdImplPackageName + '.dart');\n+\n+    final Environment auxEnvironment = Environment(\n+        projectDir: aspectdDir,\n+        outputDir: globals.fs.directory(outputDir),\n+        cacheDir: environment.cacheDir,\n+        flutterRootDir: environment.flutterRootDir,\n+        fileSystem: environment.fileSystem,\n+        logger: environment.logger,\n+        artifacts: environment.artifacts,\n+        processManager: environment.processManager,\n+        engineVersion: environment.engineVersion,\n+        buildDir: globals.fs.directory(buildDir),\n+        defines: defines,\n+        inputs: environment.inputs);\n+    const KernelSnapshot auxKernelSnapshot = KernelSnapshot();\n+    final CompilerOutput compilerOutput =\n+        await auxKernelSnapshot.buildImpl(auxEnvironment);\n+\n+    final String aspectdDill = compilerOutput.outputFilename;\n+    final File originalDillFile = globals.fs.file(\n+        globals.fs.path.join(environment.buildDir.absolute.path, 'app.dill'));\n+    if (originalDillFile.existsSync()) {\n+      originalDillFile.renameSync(originalDillFile.absolute.path + '.bak');\n+    }\n+    globals.fs.file(aspectdDill).copySync(originalDillFile.absolute.path);\n+    globals.fs.currentDirectory = previousDirectory;\n+  }\n+}\ndiff --git a/packages/flutter_tools/lib/src/build_system/targets/common.dart b/packages/flutter_tools/lib/src/build_system/targets/common.dart\nindex f22100901d..f514b11893 100644\n--- a/packages/flutter_tools/lib/src/build_system/targets/common.dart\n+++ b/packages/flutter_tools/lib/src/build_system/targets/common.dart\n@@ -7,6 +7,7 @@\n import 'package:package_config/package_config.dart';\n \n import '../../artifacts.dart';\n+import '../../aspectd.dart';\n import '../../base/build.dart';\n import '../../base/file_system.dart';\n import '../../build_info.dart';\n@@ -213,6 +214,13 @@ class KernelSnapshot extends Target {\n \n   @override\n   Future<void> build(Environment environment) async {\n+    await buildImpl(environment);\n+    if (await AspectdHook.isAspectdEnabled()) {\n+        await AspectdHook().runBuildDillCommand(environment);\n+    }\n+  }\n+\n+  Future<CompilerOutput> buildImpl(Environment environment) async {\n     final KernelCompiler compiler = KernelCompiler(\n       fileSystem: environment.fileSystem,\n       logger: environment.logger,\n@@ -290,6 +298,7 @@ class KernelSnapshot extends Target {\n     if (output == null || output.errorCount != 0) {\n       throw Exception();\n     }\n+    return output;\n   }\n }\n \n-- \n2.30.1 (Apple Git-130)\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.2685546875,
          "content": "## [0.9.0] - Pre release version.\n\n* Support AOP programming for instance method、class method and library method.\n* Provide  call&execute&inject grammar.\n\n## [0.9.1]\n\n* Add example.\n\n## [0.9.2]\n\n* Make the aop process more easy by generating aspectd.dart.snapshot automatically.\n\n## [0.9.3]\n\n* Capatible with flutter v1.7.4 and above as the BundleBuilder api changed.\n\n## [0.9.4]\n\n* Remove the aspectd.dart.snapshot as it will be generated automatically.\n* Better design diagram.\n\n## [0.9.5]\n\n* Design diagram in https.\n\n## [0.9.6]\n\n* Add MIT license\n* Add better demo and README\n* Keep compatible with latest dart-sdk as it has breaking changes in TypeParameterType.\n\n## [0.9.7]\n\n* Add regex support\n\n* Add documentation\n\n* Add linter\n\n## [0.9.8]\n\n* Compative with stable/v1.17.5\n\n## [0.9.9]\n\n* Compative with stable/v1.20.4\n\n## [1.0.0]\n\n* Compatible with WidgetTrackCreation logic, make it easy to upgrade later.\n\n* Compative with stable/v1.22.1\n\n## [1.0.1]\n* Compative with stable/v1.22.2\n\n## [1.0.2]\n* Compative with stable/v1.22.3\n\n## [1.0.3]\n* Compative with stable/v1.22.4\n\n## [1.0.4]\n* Compative with stable/v1.22.5\n\n## [1.0.5]\n* Compative with stable/v1.22.6\n\n## [1.0.6]\n* Compative with stable/v2.0.0\n\n## [1.1.0]\n* Compative with stable/v2.2.2\n\n## [1.1.1]\n* Compative with stable/v2.2.3\n"
        },
        {
          "name": "DEBUG.md",
          "type": "blob",
          "size": 4.3662109375,
          "content": "How to debug aspectd?\n\n# Prepare\n\nMake sure that you've read README.md and can run the example embedded.\n\nLet's take android as an example.\n\n```shell\nflutter run -d xxxxx --verbose --release\n```\n\n# Flutter Command Parameters\n\n## Modify flutter_tools/bin/flutter_tools.dart\n```dart\nimport 'package:flutter_tools/executable.dart' as executable;\n\nvoid main(List<String> args) {\n  print(\"[KWLM]:${args.join(' ')}\");\n  executable.main(args);\n}\n```\n## Remove cache to rebuild flutter command\n```shell\nkylewong@KyleWongs-Work-MBP aspectd % which flutter                                      \n/Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/bin/flutter\nkylewong@KyleWongs-Work-MBP aspectd % rm /Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/bin/cache/flutter_tools.stamp \n```\n## Rerun flutter command to get parameters to build dill\n```shell\nkylewong@KyleWongs-Work-MBP example % flutter run -d PQY0220C11037930 --verbose --release\n[KWLM]:run -d PQY0220C11037930 --verbose --release\n*******\n [KWLM]:--verbose assemble --depfile\n/Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/build/app/intermediates/flutter/release/flutter_build.d --output /Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/build/app/intermediates/flutter/release -dTargetFile=/Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/lib/main.dart -dTargetPlatform=android -dBuildMode=release -dTrackWidgetCreation=true android_aot_bundle_release_android-arm64\n```\n# Frontend_server parameters\n## Debug flutter command with parameters get above\n![Debug flutter_tools](https://user-images.githubusercontent.com/817851/114263158-89fdc600-9a16-11eb-8d14-ce144faad830.png)\n\n## Set breakpoint for KernelCompiler.compile to get parameters for frontend_server.dart.snapshot\n\nNotice that the breakpoint would enter twice as one for example project and another for aspectd_impl. We want to know what parameters are passed to frontend_server.dart.snapshot when building dill for aspectd_impl project.\n\n![frontend_server.dart.snapshot](https://user-images.githubusercontent.com/817851/114263264-1314fd00-9a17-11eb-972d-416551e20ae5.png)\n\nEvaluate command.join(\" \") to get the parameters like below:\n```shell\n/Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/bin/cache/dart-sdk/bin/dart --disable-dart-dev /Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/bin/cache/artifacts/engine/darwin-x64/frontend_server.dart.snapshot --sdk-root /Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/bin/cache/artifacts/engine/common/flutter_patched_sdk_product/ --target=flutter -Ddart.developer.causal_async_stacks=false -Ddart.vm.profile=false -Ddart.vm.product=true --bytecode-options=source-positions --aot --tfa --packages /Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/.packages --output-dill /Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/.dart_tool/flutter_build/aaf5bbafc04eaf18a1287f2e90c38b60/app.dill --depfile /Users/kylewong/Codes/Flutter/alibaba-flutter/Middleware/aspectd/example/.dart_tool/flutter_build/aaf5bbafc04eaf18a1287f2e90c38b60/kernel_snapshot.d package:example/main.dart\n```\n\n# Debug frontend_server.dart.snapshot\n## Prepare package dependencies for aspectd package\n```shell\nkylewong@KyleWongs-Work-MBP flutter_tools % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/StableV1.22.x/taobao/flutter/packages/flutter_tools\nkylewong@KyleWongs-Work-MBP flutter_tools % mkdir .dart_tool\n```\n\nIn order to debug aspectd package, I mean the dill manipulating logic, a lot of dart sdk dependency is needed. You can copy the package_config.json (aspectd/lib/src/flutter_frontend_server/package_config.json) to aspectd/.dart_tool.\nRemember to modify package_config.json with absolute path. For example, modify \"\"../../../third_party/dart/pkg/_fe_analyzer_shared\",\" to \"\"rootUri\": \"file:///Users/kylewong/.pub-cache/git/sdk-e0932796a56a8de60c77923a69b98fdafd0d8db1/pkg/_fe_analyzer_shared\",\".\n\n## Launch the aspectd/starter.dart as entrypoint\nIn aspectd, we compile the frontend_server.dart.snapshot with starter.dart, so you can launch it in source mode with parameters above for frontend_server.dart.snapshot.\n![Starter.dart](https://user-images.githubusercontent.com/817851/114263646-76079380-9a19-11eb-8284-7ad9ac6adbff.png)\n\nNow you can debug the transformer logic, enjoy."
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0146484375,
          "content": "The MIT License\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.27734375,
          "content": "# AspectD\n\n<a href=\"https://github.com/Solido/awesome-flutter\">\n   <img alt=\"Awesome Flutter\" src=\"https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&style=flat-square\" />\n</a>\n\nSalute to AspectJ.\n\nAspectD is an AOP(aspect oriented programming) framework for dart. Like other traditional aop framework,   AspectD provides call&execute grammar. Besides, as we can't use dart:mirrors in flutter, AspectD also provides a  way named inject enhancing the dart code manipulation.\n\nBesides, AspectD provides a dill transformer container above which developers can implement their own transformers like hook, json, mirrors, etc.\n\n# Design\n\n![Aspectd Diagram](https://gw.alicdn.com/mt/TB10SBIdgaH3KVjSZFjXXcFWpXa-865-771.png)\n\nSuppose you have a flutter project named example located in hf_dir.\n\n# Installation\n\n## 1. Create a dart package named aspectd_impl in hf_dir/example\n\n```dart\nflutter create --template=package aspectd_impl\n```\n\n## 2. Add aspectd&example dependency to aspectd_impl package\n```dart\ndependencies:\n  flutter:\n    sdk: flutter\n  aspectd:\n    git:\n      url: git@github.com:XianyuTech/aspectd.git\n      ref: stable/v2.2.3\n  example:\n    path: ../example\n```\nRemember to change the branch matching your flutter environment (stable supported currently).\nFetch package dependency in aspectd_impl package\n\n```dart\nflutter packages get\n```\n## 3. Modify aspectd_impl package\n\naspectd_impl.dart(entrypoint)\n```dart\nimport 'package:example/main.dart' as app;\nimport 'aop_impl.dart';\n\nvoid main()=> app.main();\n```\naop_impl.dart(aop implementation)\n```dart\nimport 'package:aspectd/aspectd.dart';\n\n@Aspect()\n@pragma(\"vm:entry-point\")\nclass ExecuteDemo {\n  @pragma(\"vm:entry-point\")\n  ExecuteDemo();\n\n  @Execute(\"package:example/main.dart\", \"_MyHomePageState\", \"-_incrementCounter\")\n  @pragma(\"vm:entry-point\")\n  void _incrementCounter(PointCut pointcut) {\n    pointcut.proceed();\n    print('KWLM called!');\n  }\n}\n```\n## 4. Patch flutter_tools to apply aspectd.dart.snapshot\n```shell\ncd path-for-flutter-git-repo\ngit apply --3way path-for-aspectd-package/0001-aspectd.patch\nrm bin/cache/flutter_tools.stamp\n```\nOn Windows, use \"git am --reject --whitespace=fix aspectd\\0001-aspectd.patch\" to apply the patch instead.\n\nAs flutter_tools doesn't support hooks now, the aspectd.patch is necessary currently. As flutter is evolving, this patch might fail sometimes. However, It would be simple to resolve the conflicts as AspectD only adds two hooks when building dill.  See https://github.com/alibaba-flutter/aspectd/issues/5 for more.\n\nIf you want to customize the aspectd_impl package, edit aspectdImplPackageRelPath(aspectd_impl package relative path to the example's pubspec.yaml) and aspectdImplPackageName(aspectd_impl package folder name and main entry file name) defined in path-for-flutter-git-repo/flutter/packages/flutter_tools/lib/src/aspectd.dart. \n\n```dart\nconst String aspectdImplPackageRelPath = '..';\nconst String aspectdImplPackageName = 'aspectd_impl';\n```\n\nStep 1~3 are expected to run each time you want to add aspectd_impl to a flutter(dart) package. 4 is expected to run only once unless the dart-sdk changes. For example, If you upgrade flutter, you need to check if to re-run 4.\n\nIf you're using example with an aspectd_impl package not generated locally, remember to run `flutter packages get` in aspectd_impl package to get aspectd and check 4.\n\nIf the flutter version you want is not supported yet, see [UPGRADE.md](https://github.com/alibaba-flutter/aspectd/blob/master/UPGRADE.md) for more.\n\n# Tutorial\nNow AspectD provides three ways to do AOP programming.\n\n## call\nEvery callsites for a specific function would be manipulated.\n```dart\nimport 'package:aspectd/aspectd.dart';\n\n@Aspect()\n@pragma(\"vm:entry-point\")\nclass CallDemo{\n  @Call(\"package:app/calculator.dart\",\"Calculator\",\"-getCurTime\")\n  @pragma(\"vm:entry-point\")\n  Future<String> getCurTime(PointCut pointcut) async{\n    print('Aspectd:KWLM02');\n    print('${pointcut.sourceInfos.toString()}');\n    Future<String> result = pointcut.proceed();\n    String test = await result;\n    print('Aspectd:KWLM03');\n    print('${test}');\n    return result;\n  }\n\n  @Call(\"package:app/calculator.dart\",\"Calculator\",\"+getCurTemporature\")\n  @pragma(\"vm:entry-point\")\n  String getCurTemporature(PointCut pointcut) {\n    print('Aspectd:KWLM04');\n    print('${pointcut.sourceInfos.toString()}');\n    try{\n      String res = pointcut.proceed();\n    } catch (error, trace){\n      print('Aspectd:KWLM05');\n    }\n    return null;\n  }\n\n  @Call(\"package:flutter/src/widgets/binding.dart\",\"\",\"+runApp\")\n  @pragma(\"vm:entry-point\")\n  static void runAppKWLM(PointCut pointcut){\n    print('Aspectd:KWLM07');\n    print('${pointcut.sourceInfos.toString()}');\n    pointcut.proceed();\n  }\n}\n```\n\nIn this case, notice that @Aspect() is needed to mark a class so that the aspectd will know that this class contains AspectD annotation informations. \n@pragma(\"vm:entry-point\") is needed so that the class/function will not be removed by tree-shaking.\nFor @Call(\"package:app/calculator.dart\",\"Calculator\",\"-getCurTime\"), there are several things to know. Now call/execute/inject accept three positional parameters, package name, class name(If the procedure is a library method, this part is empty string), and function name. The function name may have a prefix('-' or '+'), '-' refers to instance method while '+' refers to library static method(like main) and class method. There is also a named parameter lineNum for inject so that AspectD know which line to inject a code snippet. The lineNum parameter is 1 based and code snippet would be injected before that line.\n\nBesides, when you want to manipulate a static method(including library method and class method), your aop method(runAppKWLM here) should also be declared static. This requirement also applies when using execute command.\n\n## execute\n\nEvery implementation for a specific function would be manipulated.\n```dart\nimport 'package:aspectd/aspectd.dart';\n\n@Aspect()\n@pragma(\"vm:entry-point\")\nclass ExecuteDemo{\n  @Execute(\"package:app/calculator.dart\",\"Calculator\",\"-getCurTime\")\n  @pragma(\"vm:entry-point\")\n  Future<String> getCurTime(PointCut pointcut) async{\n    print('Aspectd:KWLM12');\n    print('${pointcut.sourceInfos.toString()}');\n    Future<String> result = pointcut.proceed();\n    String test = await result;\n    print('Aspectd:KWLM13');\n    print('${test}');\n    return result;\n  }\n\n  @Execute(\"package:app/calculator.dart\",\"Calculator\",\"+getCurTemporature\")\n  @pragma(\"vm:entry-point\")\n  String getCurTemporature(PointCut pointcut) {\n    print('Aspectd:KWLM14');\n    print('${pointcut.sourceInfos.toString()}');\n    try{\n      String res = pointcut.proceed();\n    } catch (error, trace){\n      print('Aspectd:KWLM15');\n    }\n    return null;\n  }\n\n  @Execute(\"package:flutter/src/widgets/binding.dart\",\"\",\"+runApp\")\n  @pragma(\"vm:entry-point\")\n  static void runAppKWLM(PointCut pointcut){\n    print('Aspectd:KWLM17');\n    print('${pointcut.sourceInfos.toString()}');\n    pointcut.proceed();\n  }\n}\n```\n\n## inject\nFor a original function like below:(package:flutter/src/widgets/gesture_detector.dart)\n```dart\n  @override\n  Widget build(BuildContext context) {\n    final Map<Type, GestureRecognizerFactory> gestures = <Type, GestureRecognizerFactory>{};\n\n    if (onTapDown != null || onTapUp != null || onTap != null || onTapCancel != null) {\n      gestures[TapGestureRecognizer] = GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>(\n        () => TapGestureRecognizer(debugOwner: this),\n        (TapGestureRecognizer instance) {\n          instance\n            ..onTapDown = onTapDown\n            ..onTapUp = onTapUp\n            ..onTap = onTap\n            ..onTapCancel = onTapCancel;\n        },\n      );\n    }\n...\n}\n```\n\n```dart\nimport 'package:aspectd/aspectd.dart';\nimport 'package:flutter/services.dart';\n\n@Aspect()\n@pragma(\"vm:entry-point\")\nclass InjectDemo{\n  @Inject(\"package:flutter/src/widgets/gesture_detector.dart\",\"GestureDetector\",\"-build\", lineNum:452)\n  @pragma(\"vm:entry-point\")\n  static void onTapBuild() {\n    Object instance; //Aspectd Ignore\n    Object context; //Aspectd Ignore\n    print(instance);\n    print(context);\n    print('Aspectd:KWLM25');\n  }\n}\n```\n\nAfter that, the original build function will look like below:\n```dart\n  @override\n  Widget build(BuildContext context) {\n    final Map<Type, GestureRecognizerFactory> gestures = <Type, GestureRecognizerFactory>{};\n\n    if (onTapDown != null || onTapUp != null || onTap != null || onTapCancel != null) {\n      gestures[TapGestureRecognizer] = GestureRecognizerFactoryWithHandlers<TapGestureRecognizer>(\n        () => TapGestureRecognizer(debugOwner: this),\n        (TapGestureRecognizer instance) {\n          instance\n            ..onTapDown = onTapDown\n            ..onTapUp = onTapUp\n            ..onTap = onTap\n            ..onTapCancel = onTapCancel;\n        },\n    \tprint(instance);\n    \tprint(context);\n    \tprint('Aspectd:KWLM25');\n      );\n    }\n...\n}\n```\nNotice that `//Aspectd Ignore` part when using injection, we need to compile the aop package successfully so we need to declare the instance/context variable. However, when injecting to origin function (build in this case), variable declaration\n```dart\nObject instance; //Aspectd Ignore \nObject context; //Aspectd Ignore\n```\nwould be discarded to avoid overring the original one.\n\n# Debug\n\nRead [DEBUG.md](https://github.com/XianyuTech/aspectd/blob/master/DEBUG.md) for more.\n\n# Compatibility\n\nStable version >= 1.0, currently v2.2.2\n\n\n# Notice\nBecause of the dart compilation implementation, there are several points to pay attention to:\n1. package:aspectd_impl/aspectd_impl.dart should contains the main entry for aspectd_impl package and contains a app.main call.\n2. Every aop implementation file should be imported by aspectd_impl.dart so that it will work in debug mode.\n3. @pragma(\"vm:entry-point\") is needed to mark class/function to avoid been trimmed by tree-shaking.\n4. inject might fail in some cases while call&execute are expected to be more stable.\n5. If you want to disable AspectD, remove the aspectd.dart.snapshot located in aspectd or change the name of aspectd_impl package, or remove the @Aspect() annotation. Anyone will be fine.\n6. If you want to hook an instance method, the hook class should declare a default constructor and mark it with @pragma(\"vm:entry-point\").\n\n# Contact\n\nIf you meet any problem when using AspectD, file a issue or contact me directly. \n\n[Contact Author](mailto:kang.wang1988@gmail.com)"
        },
        {
          "name": "UPGRADE.md",
          "type": "blob",
          "size": 8.791015625,
          "content": "This document describes how to upgrade aspectd in order to compatible with various flutter new versions.\n\nLet's take flutter 1.23.0-7.0.pre (FLT_VER below) as an example.\n\n# Update flutter and dependency(engine,dart) to FLT_VER\n## Create branch stable/FLT_VER for flutter repo\n```shell\nkylewong@KyleWongs-Work-MBP aspectd % flutter --version\nFlutter 1.23.0-7.0.pre • channel unknown • unknown source\nFramework • revision db6e2d8aa5 (2 weeks ago) • 2020-09-25 06:47:03 -0400\nEngine • revision 3a73d073c8\nTools • Dart 2.11.0 (build 2.11.0-161.0.dev)\n```\n## Fetch flutter engine dependency\nSee [Setting up the Engine development environment](https://github.com/flutter/flutter/wiki/Setting-up-the-Engine-development-environment) for more.\n\n## Create branch stable/FLT_VER for engine repo\n```shell\nkylewong@KyleWongs-Work-MBP flutter % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/flutter\nkylewong@KyleWongs-Work-MBP flutter % git branch stable/v1.23.0-7.0.pre 3a73d073c8 && git checkout stable/v1.23.0-7.0.pre\nSwitched to branch 'stable/v1.23.0-7.0.pre'\n```\n## Fetch dart dependency\n```shell\nkylewong@KyleWongs-Work-MBP flutter % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/flutter\nkylewong@KyleWongs-Work-MBP flutter % gclient sync\nSyncing projects: 100% (104/104), done.                                                                                        \nRunning hooks: 100% ( 9/ 9) dart package config   \n________ running 'vpython src/flutter/tools/run_third_party_dart.py' in '/Users/kylewong/Codes/Flutter/alibaba-flutter/engine'\nResolving dependencies... \nGot dependencies!\nPackage generate_package_config is currently active at path \"/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/flutter/tools/generate_package_config\".\nActivated generate_package_config 0.0.0 at path \"/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/flutter/tools/generate_package_config\".\nRunning hooks: 100% (9/9), done.  \n```\n# Modify dart repo\n## Create branch stable/FLT_VER for dart repo with HEAD commit\n```shell\nkylewong@KyleWongs-Work-MBP dart % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/third_party/dart\nkylewong@KyleWongs-Work-MBP dart % git branch stable/v1.23.0-7.0.pre HEAD && git checkout stable/v1.23.0-7.0.pre\nSwitched to branch 'stable/v1.23.0-7.0.pre'\n```\nNotice the head commit for dart above, it can be found in flutter_engine_repo/DEPS file as below:\n```DEPS\n  'dart_revision': 'eb8e6232da023cddd3326e13c9a4f9ace0acc346',\n```\n## Add dart_repo/third_party/pkg and dart_repo/third_party/pkg_tested under source control\n### Edit .gitignore under dart_repo/third_party\nRemove  *, !pkg, and !pkg_tested \n```shell\n# ignore everything\n*\n# except for items in the pkg directory and self.\n# except for our files in boringssl.  The checkout is in boringssl/src.\n!.gitignore\n!pkg\n!pkg_tested\n!/tcmalloc\n!d8\n!7zip.tar.gz.sha1\n!firefox_jsshell\n!clang.tar.gz.sha1\n!unittest.tar.gz.sha1\n!update.sh\n!/wasmer\n# but ignore a subfolder of tcmalloc (some client ignores /tcmalloc/.gitignore)\n/tcmalloc/gperftools\n```\n### Remove all .git repos under pkg and pkg_tested\n```shell\nkylewong@KyleWongs-Work-MBP third_party % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/third_party/dart/third_party\nkylewong@KyleWongs-Work-MBP third_party % rm -rf pkg/*/.git pkg_tested/*/.git\nkylewong@KyleWongs-Work-MBP third_party % \n```\n### Commit all the files under source control now.\n```shell\nkylewong@KyleWongs-Work-MBP dart % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/third_party/dart\nkylewong@KyleWongs-Work-MBP dart % git add -A && git commit -m \"Add pkg/pkg_tested under source control.\"\nwarning: CRLF will be replaced by LF in third_party/pkg/linter/README.md.\nThe file will have its original line endings in your working directory\nwarning: CRLF will be replaced by LF in third_party/pkg/mustache/lib/src/template.dart.\nThe file will have its original line endings in your working directory\n[stable/v1.23.0-7.0.pre 9fa5ae49522] Add pkg/pkg_tested under source control.\n 4522 files changed, 742202 insertions(+), 3 deletions(-)\n create mode 100644 third_party/pkg/args/.gitignore\n```\nSo that the dart sdk and all its dependencies can be fetched in single git repo using flutter packages get.\n### Modify dart repo and push it to remote\n```shell\nkylewong@KyleWongs-Work-MBP dart % pwd\n/Users/kylewong/Codes/Flutter/alibaba-flutter/engine/src/third_party/dart\nkylewong@KyleWongs-Work-MBP dart % git remote add alf_upstream git@github.com:alibaba-flutter/sdk.git\nkylewong@KyleWongs-Work-MBP dart % git fetch alf_upstream\nremote: Enumerating objects: 3274, done.\nremote: Counting objects: 100% (3274/3274), done.\nremote: Compressing objects: 100% (2225/2225), done.\nremote: Total 7473 (delta 1422), reused 2834 (delta 995), pack-reused 4199\nReceiving objects: 100% (7473/7473), 14.80 MiB | 2.06 MiB/s, done.\nResolving deltas: 100% (2041/2041), completed with 650 local objects.\nFrom github.com:alibaba-flutter/sdk\n * [new branch]              master                             -> alf_upstream/master\n * [new branch]              stable/v1.22.1                     -> alf_upstream/stable/v1.22.1\n```\n\nCherry-pick commit at [Support customized transformer for developers.](https://github.com/alibaba-flutter/sdk/commit/6106808f20068c7d180c9b897e0dcaef52a8af63) and resolve the conflicts if occurs.\n```shell\nkylewong@KyleWongs-Work-MBP dart % git cherry-pick 6106808f20068c7d180c9b897e0dcaef52a8af63\n[stable/v1.23.0-7.0.pre 8ea36b47942] Support customized transformer for developers.\n Date: Thu Oct 8 18:19:04 2020 +0800\n 1 file changed, 13 insertions(+)\n```\n\n### Push it to github\n```shell\nkylewong@KyleWongs-Work-MBP dart % git push alf_upstream stable/v1.23.0-7.0.pre \nEnumerating objects: 4980, done.\nCounting objects: 100% (4980/4980), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (4005/4005), done.\nWriting objects: 100% (4971/4971), 11.96 MiB | 1.52 MiB/s, done.\nTotal 4971 (delta 795), reused 4255 (delta 753)\nremote: Resolving deltas: 100% (795/795), completed with 8 local objects.\nremote: \nremote: Create a pull request for 'stable/v1.23.0-7.0.pre' on GitHub by visiting:\nremote:      https://github.com/alibaba-flutter/sdk/pull/new/stable/v1.23.0-7.0.pre\nremote: \nTo github.com:alibaba-flutter/sdk.git\n * [new branch]              stable/v1.23.0-7.0.pre -> stable/v1.23.0-7.0.pre\n```\nIf you don't have permission, file a pull request.\n# Modify aspectd\n## Edit sdk dependency in pubspec.yaml\n```yaml\ndependency_overrides:\n  kernel:\n    git:\n      url: git@github.com:alibaba-flutter/sdk.git\n      ref: stable/v1.23.0-7.0.pre\n      path: pkg/kernel\n```\n## Fetch dependency for aspectd\n```shell\nkylewong@KyleWongs-Work-MBP aspectd % pwd                                 \n/Users/kylewong/Codes/Flutter/alibaba-flutter/aspectd\nkylewong@KyleWongs-Work-MBP aspectd % flutter packages upgrade\n```\n# Modify flutter_tools\n```shell\nkylewong@KyleWongs-Work-MBP flutter % git apply --3way /Users/kylewong/Codes/Flutter/alibaba-flutter/aspectd/0001-aspectd.patch \nkylewong@KyleWongs-Work-MBP flutter % rm /Users/kylewong/Codes/Flutter/alibaba-flutter/flutter/bin/cache/flutter_tools.stamp && flutter --version\n```\nIf there's any errors(conflicts) occurs when running commands above, resolve it, commit it and recreate the patch:\n```shell\nkylewong@KyleWongs-Work-MBP flutter % git format-patch -1 xxxxxx\n0001-aspectd.patch\n```\nThen replace the original patch under aspectd repo using the newly created one.\n\n# Modify flutter_frontend_server folder\n1. Replace aspectd/lib/src/flutter_frontend_server/package_config.json with engine/src/flutter/flutter_frontend_server/.dart_tool/package_config.json\n2. Replace aspectd/lib/src/flutter_frontend_server/server.dart with engine/src/flutter/flutter_frontend_server/lib/server.dart\n3. Replace aspectd/lib/src/flutter_frontend_server/starter.dart  with engine/src/flutter/flutter_frontend_server/bin/starter.dart\n\nFor changes happens for server.dart and starter.dart from git's angle of view, you should make sure that only contents below should use our changes(make sure there is also no compilation error), otherwise, using the engine provide content.\n![start.dart](http://gw.alicdn.com/mt/TB1_lKwYuL2gK0jSZFmXXc7iXXa-3292-610.png)\n![server.dart](http://gw.alicdn.com/mt/TB1j7ybYpY7gK0jSZKzXXaikpXa-3292-1416.png)\n\n# Verify it\n## Modify aspectd_impl/pubspec.yaml with contents below:\n```yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  aspectd:\n    path: ../\n  example:\n    path: ../example\n```\n## Run commands below for aspectd, example, aspectd_impl.\n```shell\nflutter clean && rm .packages pubspec.lock && flutter packages upgrade\n```\n## Check the cases given in aop_impl.dart\nCheck RegularCallDemo, RegexCallDemo, RegularExecuteDemo, RegexExecuteDemo, InjectDemo one by one.\n## Run the example using commands below to verify it.\n```shell\nflutter run --release --verbose\nflutter run --debug --verbose\n```\nIf it works fine, the upgrade will be completed."
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 8.27734375,
          "content": "# Specify analysis options.\n#\n# Until there are meta linter rules, each desired lint must be explicitly enabled.\n# See: https://github.com/dart-lang/linter/issues/288\n#\n# For a list of lints, see: http://dart-lang.github.io/linter/lints/\n# See the configuration guide for more\n# https://github.com/dart-lang/sdk/tree/master/pkg/analyzer#configuring-the-analyzer\n#\n# There are other similar analysis options files in the flutter repos,\n# which should be kept in sync with this file:\n#\n#   - analysis_options.yaml (this file)\n#   - packages/flutter/lib/analysis_options_user.yaml\n#   - https://github.com/flutter/plugins/blob/master/analysis_options.yaml\n#   - https://github.com/flutter/engine/blob/master/analysis_options.yaml\n#\n# This file contains the analysis options used by Flutter tools, such as IntelliJ,\n# Android Studio, and the `flutter analyze` command.\n\nanalyzer:\n  strong-mode:\n    implicit-dynamic: false\n  errors:\n    # treat missing required parameters as a warning (not a hint)\n    missing_required_param: warning\n    # treat missing returns as a warning (not a hint)\n    missing_return: warning\n    # allow having TODOs in the code\n    todo: ignore\n    # Ignore analyzer hints for updating pubspecs when using Future or\n    # Stream and not importing dart:async\n    # Please see https://github.com/flutter/flutter/pull/24528 for details.\n    sdk_version_async_exported_from_core: ignore\n\nlinter:\n  rules:\n    # these rules are documented on and in the same order as\n    # the Dart Lint rules page to make maintenance easier\n    # https://github.com/dart-lang/linter/blob/master/example/all.yaml\n    - always_declare_return_types\n    - always_put_control_body_on_new_line\n    # - always_put_required_named_parameters_first # we prefer having parameters in the same order as fields https://github.com/flutter/flutter/issues/10219\n    - always_require_non_null_named_parameters\n    - always_specify_types\n    - annotate_overrides\n    # - avoid_annotating_with_dynamic # conflicts with always_specify_types\n    - avoid_as\n    - avoid_bool_literals_in_conditional_expressions\n    # - avoid_catches_without_on_clauses # we do this commonly\n    # - avoid_catching_errors # we do this commonly\n    - avoid_classes_with_only_static_members\n    # - avoid_double_and_int_checks # only useful when targeting JS runtime\n    - avoid_empty_else\n    - avoid_field_initializers_in_const_classes\n    - avoid_function_literals_in_foreach_calls\n    # - avoid_implementing_value_types # not yet tested\n    - avoid_init_to_null\n    # - avoid_js_rounded_ints # only useful when targeting JS runtime\n    - avoid_null_checks_in_equality_operators\n    # - avoid_positional_boolean_parameters # not yet tested\n    # - avoid_private_typedef_functions # we prefer having typedef (discussion in https://github.com/flutter/flutter/pull/16356)\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    # - avoid_returning_null # there are plenty of valid reasons to return null\n    # - avoid_returning_null_for_future # not yet tested\n    - avoid_returning_null_for_void\n    # - avoid_returning_this # there are plenty of valid reasons to return this\n    # - avoid_setters_without_getters # not yet tested\n    # - avoid_shadowing_type_parameters # not yet tested\n    # - avoid_single_cascade_in_expression_statements # not yet tested\n    - avoid_slow_async_io\n    - avoid_types_as_parameter_names\n    # - avoid_types_on_closure_parameters # conflicts with always_specify_types\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    - await_only_futures\n    - camel_case_types\n    - cancel_subscriptions\n    # - cascade_invocations # not yet tested\n    # - close_sinks # not reliable enough\n    # - comment_references # blocked on https://github.com/flutter/flutter/issues/20765\n    # - constant_identifier_names # needs an opt-out https://github.com/dart-lang/linter/issues/204\n    - control_flow_in_finally\n    # - curly_braces_in_flow_control_structures # not yet tested\n    # - diagnostic_describe_all_properties # not yet tested\n    - directives_ordering\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    # - file_names # not yet tested\n    - flutter_style_todos\n    - hash_and_equals\n    - implementation_imports\n    # - invariant_booleans # too many false positives: https://github.com/dart-lang/linter/issues/811\n    - iterable_contains_unrelated_type\n    # - join_return_with_assignment # not yet tested\n    - library_names\n    - library_prefixes\n    # - lines_longer_than_80_chars # not yet tested\n    - list_remove_unrelated_type\n    # - literal_only_boolean_expressions # too many false positives: https://github.com/dart-lang/sdk/issues/34181\n    - no_adjacent_strings_in_list\n    - no_duplicate_case_values\n    - non_constant_identifier_names\n    # - null_closures  # not yet tested\n    # - omit_local_variable_types # opposite of always_specify_types\n    # - one_member_abstracts # too many false positives\n    # - only_throw_errors # https://github.com/flutter/flutter/issues/5792\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    # - parameter_assignments # we do this commonly\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    # - prefer_asserts_with_message # not yet tested\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    # - prefer_constructors_over_static_methods # not yet tested\n    - prefer_contains\n    # - prefer_double_quotes # opposite of prefer_single_quotes\n    - prefer_equal_for_default_values\n    # - prefer_expression_function_bodies # conflicts with https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#consider-using--for-short-functions-and-methods\n    - prefer_final_fields\n    # - prefer_final_in_for_each # not yet tested\n    - prefer_final_locals\n    # - prefer_for_elements_to_map_fromIterable # not yet tested\n    - prefer_foreach\n    # - prefer_function_declarations_over_variables # not yet tested\n    - prefer_generic_function_type_aliases\n    - prefer_if_elements_to_conditional_expressions\n    - prefer_if_null_operators\n    - prefer_initializing_formals\n    - prefer_inlined_adds\n    # - prefer_int_literals # not yet tested\n    # - prefer_interpolation_to_compose_strings # not yet tested\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_iterable_whereType\n    # - prefer_mixin # https://github.com/dart-lang/language/issues/32\n    # - prefer_null_aware_operators # disable until NNBD, see https://github.com/flutter/flutter/pull/32711#issuecomment-492930932\n    - prefer_single_quotes\n    - prefer_spread_collections\n    - prefer_typing_uninitialized_variables\n    - prefer_void_to_null\n    # - provide_deprecation_message # not yet tested\n    - public_member_api_docs # enabled on a case-by-case basis; see e.g. packages/analysis_options.yaml\n    - recursive_getters\n    - slash_for_doc_comments\n    # - sort_child_properties_last # not yet tested\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - test_types_in_equals\n    - throw_in_finally\n    # - type_annotate_public_apis # subset of always_specify_types\n    - type_init_formals\n    # - unawaited_futures # too many false positives\n    # - unnecessary_await_in_return # not yet tested\n    - unnecessary_brace_in_string_interps\n    - unnecessary_const\n    - unnecessary_getters_setters\n    # - unnecessary_lambdas # has false positives: https://github.com/dart-lang/linter/issues/498\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_statements\n    - unnecessary_this\n    - unrelated_type_equality_checks\n    # - unsafe_html # not yet tested\n    - use_full_hex_values_for_flutter_colors\n    # - use_function_type_syntax_for_parameters # not yet tested\n    - use_rethrow_when_possible\n    # - use_setters_to_change_properties # not yet tested\n    # - use_string_buffers # has false positives: https://github.com/dart-lang/sdk/issues/34182\n    # - use_to_and_as_if_applicable # has false positives, so we prefer to catch this by code-review\n    - valid_regexps\n    # - void_checks # not yet tested"
        },
        {
          "name": "aspectd_impl",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.yaml",
          "type": "blob",
          "size": 0.0302734375,
          "content": "plugins:\n  - aop\n  - pluginDemo"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.lock",
          "type": "blob",
          "size": 0.6142578125,
          "content": "# Generated by pub\n# See https://dart.dev/tools/pub/glossary#lockfile\npackages:\n  kernel:\n    dependency: \"direct dev\"\n    description:\n      path: \"pkg/kernel\"\n      ref: \"stable/v2.2.3\"\n      resolved-ref: c9f1a5df275bb007ae414abfd1349294e28b0d28\n      url: \"git@github.com:XianyuTech/sdk.git\"\n    source: git\n    version: \"0.0.0\"\n  meta:\n    dependency: \"direct overridden\"\n    description:\n      path: \"pkg/meta\"\n      ref: \"stable/v2.2.3\"\n      resolved-ref: c9f1a5df275bb007ae414abfd1349294e28b0d28\n      url: \"git@github.com:XianyuTech/sdk.git\"\n    source: git\n    version: \"1.3.0\"\nsdks:\n  dart: \">=2.3.0-dev.68.0 <3.0.0\"\n"
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.703125,
          "content": "name: aspectd\ndescription: AOP for Flutter. AspectD is an AOP(aspect oriented programming) framework for dart. It provides call&execute&inject grammar.\nversion: 1.1.0\nhomepage: https://github.com/alibaba-flutter/aspectd\n\nenvironment:\n  sdk: \">=2.3.0-dev.68.0 <3.0.0\"\n\ndev_dependencies:\n  kernel: any\n\ndependency_overrides:\n  kernel:\n    git:\n      url: git@github.com:XianyuTech/sdk.git\n      ref: stable/v2.2.3\n      path: pkg/kernel\n  meta:\n    git:\n      url: git@github.com:XianyuTech/sdk.git\n      ref: stable/v2.2.3\n      path: pkg/meta\n\n\n# For information on the generic Dart part of this file, see the\n# following page: https://www.dartlang.org/tools/pub/pubspec\n\n# The following section is specific to Flutter.\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}