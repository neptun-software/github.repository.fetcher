{
  "metadata": {
    "timestamp": 1736710584564,
    "page": 199,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "akshathjain/sliding_up_panel",
      "stars": 1385,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.337890625,
          "content": "# playground app\nplayground/\n\n# Miscellaneous\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# Visual Studio Code related\n.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.packages\n.pub-cache/\n.pub/\n/build/\n*.lock\n\n# Android related\n**/android/**/gradle-wrapper.jar\n**/android/.gradle\n**/android/captures/\n**/android/gradlew\n**/android/gradlew.bat\n**/android/local.properties\n**/android/**/GeneratedPluginRegistrant.java\n\n# iOS/XCode related\n**/ios/**/*.mode1v3\n**/ios/**/*.mode2v3\n**/ios/**/*.moved-aside\n**/ios/**/*.pbxuser\n**/ios/**/*.perspectivev3\n**/ios/**/*sync/\n**/ios/**/.sconsign.dblite\n**/ios/**/.tags*\n**/ios/**/.vagrant/\n**/ios/**/DerivedData/\n**/ios/**/Icon?\n**/ios/**/Pods/\n**/ios/**/.symlinks/\n**/ios/**/profile\n**/ios/**/xcuserdata\n**/ios/.generated/\n**/ios/Flutter/App.framework\n**/ios/Flutter/Flutter.framework\n**/ios/Flutter/Generated.xcconfig\n**/ios/Flutter/app.flx\n**/ios/Flutter/app.zip\n**/ios/Flutter/flutter_assets/\n**/ios/Flutter/flutter_export_environment.sh\n**/ios/ServiceDefinitions.json\n**/ios/Runner/GeneratedPluginRegistrant.*\n\n# Exceptions to above rules.\n!**/ios/**/default.mode1v3\n!**/ios/**/default.mode2v3\n!**/ios/**/default.pbxuser\n!**/ios/**/default.perspectivev3\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n"
        },
        {
          "name": ".metadata",
          "type": "blob",
          "size": 0.3017578125,
          "content": "# This file tracks properties of this Flutter project.\n# Used by Flutter tool to assess capabilities and perform upgrades etc.\n#\n# This file should be version controlled and should not be manually edited.\n\nversion:\n  revision: 8661d8aecd626f7f57ccbcb735553edc05a2e713\n  channel: stable\n\nproject_type: package\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.5634765625,
          "content": "## [2.0.0+1] - [April 26, 2021]\n### Features\n- Formatted code according to dartfmt\n\n### Documentation\n- Updated documentation to reflect new features and fixes\n\n## [2.0.0] - [April 26, 2021]\n### Features\n- Addressed issue #223,#240 - Added null safety support\n\n### Documentation\n- Updated documentation to reflect new features and fixes\n\n## [1.0.2] - [April 13, 2020]\n### Features\n- Addressed issue #71, #103 - Added an optional `header` widget that floats above the `panel` and attaches to the top\n- Added an optional `footer` widget that floats above the `panel` and attaches to the bottom\n\n### Documentation\n- Updated documentation to reflect new features and fixes\n\n## [1.0.1] - [April 2, 2020]\n### Fixes\n- Addressed issue #94: Too much widget rebuild occurring when the user slides the panel. This fix results in huge performance benefits when using the `panelChild` and `panelBuilder` properties\n- Addressed issues #102, #111: Fixed issue where tapping on the panel closes it (when using the `panelBuilder`)\n- Addressed issues #24, #70, #108, #121: Changed `backdropTapClosesPanel` to use `onTap` and `onVerticalDragEnd` so swipes on the backdrop cause the panel to close\n\n### Features\n- Addressed issue #107: Added duration and curve properties to the `PanelController`'s `animatePanelToPosition` method\n- Addressed issues #12,#77,#86,#100: Added a `snapPoint` property to allow the panel to snap to a position midway during its slide\n\n### Documentation\n- Updated documentation to reflect new features and fixes\n- Updated copyright year in the LICENSE\n\n## [1.0.0] - [January 25, 2020]\n\n#### Fixes\n- Addressed issue #69: Used a FadeTransition to handle opacity changes (as per Flutter documentation)\n- Cleaned up `PanelController` code to make maintenance easier\n- Added clearer assert statements and messages to indicate why calling `PanelController` methods would fail before attaching the `PanelController`.\n\n#### Features\n- Addressed issues #17, #55, #60: Added the ability to link / nested the scroll position of the panel content with the position of the panel (i.e. infinite scrolling).\n- Added the `panelBuilder` property that's required to implement the nested scrolling as described above.\n- Added an `isAttached` property to the `PanelController` to indicate whether or not the `PanelController` is attached to an instance of the `SlidingUpPanel`\n\n#### Breaking Changes\nThe following `PanelController` methods now return `Future<void>` instead of `void`:\n- `close()`\n- `open()`\n- `hide()`\n- `show()`\n- `animatePanelToPosition(double value)`\n\nThe following `PanelController` methods have changed to Dart properties to better reflect Dart language conventions:\n- `setPanelPosition()` -> `panelPosition` [as a setter]\n- `getPanelPosition()` -> `panelPosition` [as a getter]\n- `isPanelAnimating()` -> `isPanelAnimating`\n- `isPanelOpen()` -> `isPanelOpen`\n- `isPanelClosed()` -> `isPanelClosed`\n- `isPanelShown()` -> `isPanelShown`\n\n\nFor example, here's how you would have previously used `setPanelPosition()` and `getPanelPosition()` vs. how you would now use the `panelPosition` property:\n```dart\n// OLD, no longer supported\nprint(pc.getPanelPosition()); // print a value between 0.0 and 1.0\npc.setPanelPosition(0.5);     // sets the panelPosition to 0.5\n```\n\n```dart\n// NEW\nprint(pc.panelPosition); // print a value between 0.0 and 1.0\npc.panelPosition = 0.5;  // sets the panelPosition to 0.5\n```\n\nAnd here's how you would have previously called `isPanelAnimating()` vs. how you would now call `isPanelAnimating`.\n```dart\npanelController.isPanelAnimating(); // OLD, no longer supported\n```\n```dart\npanelController.isPanelAnimating; // NEW\n```\n\n\n#### Documentation\n- Updated the documentation to reflect changes\n- Updated example to use nested scrolling\n\n\n\n<br><br>\n## [0.3.6] - [September 25, 2019]\n\n#### Fixes\n- Fixed issues #54, #59 where panel listeners would be called before UI was rendered (related to `defaultPanelState`)\n\n#### Documentation\n- Updated the documentation to reflect fixes\n\n\n<br><br>\n## [0.3.5] - [August 31, 2019]\n\n#### Features\n- Added the `defaultPanelState` property that changes whether the panel is either open or closed by default (`PanelState.OPEN` or `PanelState.CLOSED`)\n\n#### Documentation\n- Updated the documentation to reflect new features\n\n\n<br><br>\n## [0.3.4] - [April 16, 2019]\n\n#### Features\n- Added the `slideDirection` property that changes how the panel slides open (either up or down)\n\n#### Documentation\n- Updated the documentation to reflect new features\n\n\n<br><br>\n## [0.3.3] - [April 6, 2019]\n\n#### Features\n- Added the `isDraggable` property that allows/prevents dragging of the panel\n\n#### Documentation\n- Updated the documentation to reflect new features\n\n\n<br><br>\n## [0.3.2] - [April 5, 2019]\n\n#### Documentation\n- Fixed problem where images would wrap on pub (instead of displaying on one line)\n\n\n\n<br><br>\n## [0.3.1] - [April 5, 2019]\n\n#### Features\n- Configuration options to `SlidingUpPanel`\n    - `parallaxEnabled`\n    - `parallaxOffset`\n\n#### Documentation\n- Created a new example app (Maps)\n- Updated documentation to reflect new features\n\n\n\n<br><br>\n## [0.3.0] - April 2, 2019\n\n#### Features\n- Added ability to close the `panel` when the backdrop is tapped\n\n- Added callbacks to the `SlidingUpPanel`\n    - `onPanelSlide`\n    - `onPanelOpened`\n    - `onPanelClosed`\n\n- Added methods to the `PanelController`\n    - `setPanelPosition`\n    - `animatePanelToPosition`\n    - `getPanelPosition`\n    - `isPanelAnimating`\n    - `isPanelOpen`\n    - `isPanelClosed`\n    - `isPanelShown`\n\n#### Bug Fixes\n- Fixed issue where the `collapsed` widget would accept touch events even when invisible (i.e. even when the panel was fully open)\n\n#### Documentation\n- Updated documentation to reflect new features\n- Added clarification on `PanelController` lifecycle\n- Added an explanation about nesting the `Scaffold` when displaying a backdrop\n\n\n<br><br>\n## [0.2.0] - April 1, 2019\n\nAdded the backdrop feature:\n- Body darkens as the panel opens\n- The backdrop color is customizable\n- The backdrop opacity is also customizable\n- Off by default\n\nOther changes:\n- Removed the README from the example app (pub will display the code on the website now)\n- Specified Dart as the language in the README code snippets\n\n\n\n<br><br>\n## [0.1.2] - March 31, 2019\n\n- Updated documentation to be more comprehensive\n\n\n\n<br><br>\n## [0.1.1] - March 31, 2019\n\n- Added a CHANGELOG file\n\n\n\n<br><br>\n## [0.1.0] - March 31, 2019\n\nThis is the initial release of the sliding_up_panel package. This includes features such as\n- A sliding up panel that responds to user gestures\n- Customizing the look and feel of the sliding panel\n- Manually controlling the sliding panel via the PanelController"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4189453125,
          "content": "Copyright (c) 2020, Akshath Jain\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* All use of this software must display the following acknowledgement: This\n  product includes software developed by Akshath Jain (https://akshathjain.com).\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 21.9775390625,
          "content": "# sliding_up_panel\n[![pub package](https://img.shields.io/pub/v/sliding_up_panel.svg)](https://pub.dartlang.org/packages/sliding_up_panel)\n[![GitHub Stars](https://img.shields.io/github/stars/akshathjain/sliding_up_panel.svg?logo=github)](https://github.com/akshathjain/sliding_up_panel)\n[![Platform](https://img.shields.io/badge/platform-android%20|%20ios-green.svg)](https://img.shields.io/badge/platform-Android%20%7C%20iOS-green.svg)\n\nA draggable Flutter widget that makes implementing a SlidingUpPanel much easier! Based on the Material Design bottom sheet component, this widget works on both Android & iOS.\n\n<p>\n  <img width=\"205px\" alt=\"Example\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/example.gif\"/>\n  <img width=\"220px\" alt=\"Example App Closed\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/exampleclosed.png\"/>\n  <img width=\"220px\" alt=\"Example App Open\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/exampleopen.png\" />\n</p>\n\n<br>\n\n## Installing\nAdd the following to your `pubspec.yaml` file:\n```yaml\ndependencies:\n  sliding_up_panel: ^2.0.0+1\n```\nNote that `v1.0.0` introduced some breaking changes outlined [below](#breaking-changes).\n\n<br>\n\n### Maintaining sliding_up_panel\nThank you everyone for the support surrounding this project! `sliding_up_panel` has grown far larger than I could have ever imagined, so parsing through all the feature requests and new issues has taken me more time than I'd like. If you're interested in helping maintain this project, please send me an email at arjain@andrew.cmu.edu. As a sidenote, I'll always try to make sure that this project is compatible with the latest version of Flutter.\n\n<br>\n\n## Simple Usage\nThere are two ways which the `SlidingUpPanel` can easily be added to your project.\n1. Using the `SlidingUpPanel` as the root widget for the body (recommended).\n2. Nesting the `SlidingUpPanel`\n\n<br>\n\n#### `SlidingUpPanel` as the Root (recommended)\nThis method is recommended as it allows for the least interference with the behavior of other UI elements. For example:\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      panel: Center(\n        child: Text(\"This is the sliding Widget\"),\n      ),\n      body: Center(\n        child: Text(\"This is the Widget behind the sliding panel\"),\n      ),\n    ),\n  );\n}\n```\n<br>\n\n#### Nesting the `SlidingUpPanel`\nThis method isn't recommended but can still be used. Only use this to avoid refactoring large chunks of code or to implement custom scrolling behavior. For example, the `SlidingUpPanel` can be nested inside of a `Stack` (note that there are many other possible implementations that vary on a case-by-case basis).\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: Stack(\n      children: <Widget>[\n        Center(child: Text(\"This is the Widget behind the sliding panel\"),),\n\n        SlidingUpPanel(\n          panel: Center(child: Text(\"This is the sliding Widget\"),),\n        )\n      ],\n    )\n  );\n}\n```\n<br>\n\n#### Screenshots\nBoth methods produce the same result:\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/simpleusageclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/simpleusagemidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/simpleusageopen.png\">\n</p>\n\n<br>\n<br>\n<br>\n\n## Custom Usage\nThere are several options that allow for more control:\n\n|  Properties  |   Description   |\n|--------------|-----------------|\n| `panel` | The Widget that slides into view. When the `panel` is collapsed and if `collapsed` is null, then top portion of this Widget will be displayed; otherwise, `collapsed` will be displayed overtop of this Widget. |\n|`panelBuilder` [beta]| NOTE: This feature is still in beta and may have some problems. Please open an issue on [GitHub](https://github.com/akshathjain/sliding_up_panel) if you encounter something unexpected. <br><br> Provides a `ScrollController` to attach to a scrollable object in the panel that links the panel position with the scroll position. Useful for implementing an infinite scroll behavior. If `panel` and `panelBuilder` are both non-null, `panel` will be used. |\n| `collapsed` | The Widget displayed overtop the `panel` when collapsed. This fades out as the `panel` is opened. |\n| `body` | The Widget that lies underneath the sliding panel. This Widget automatically sizes itself to fill the screen. |\n| `header` | Optional persistent widget that floats above the `panel` and attaches to the top of the `panel`. Content at the top of the panel will be covered by this widget. Add padding to the top of the `panel` to avoid coverage. |\n| `footer` | Optional persistent widget that floats above the `panel` and attaches to the bottom of the `panel`. Content at the bottom of the panel will be covered by this widget. Add padding to the bottom of the `panel` to avoid coverage. |\n| `minHeight` | The height of the sliding panel when fully collapsed. |\n| `maxHeight` | The height of the sliding panel when fully open. |\n| `snapPoint` [beta] | NOTE: This feature is still in beta and may have some problems. Please open an issue on [GitHub](https://github.com/akshathjain/sliding_up_panel) if you encounter something unexpected. <br><br> A point between `minHeight` and `maxHeight` that the panel snaps to while animating. A fast swipe on the panel will disregard this point and go directly to the open/close position. This value is represented as a percentage of the total animation distance (`maxHeight` - `minHeight`), so it must be between 0.0 and 1.0, exclusive. |\n| `border` | A border to draw around the sliding panel sheet. |\n| `borderRadius` | If non-null, the corners of the sliding panel sheet are rounded by this. |\n| `boxShadow` | A list of shadows cast behind the sliding panel sheet. |\n| `color` | The color to fill the background of the sliding panel sheet. |\n| `padding` | The amount to inset the children of the sliding panel sheet. |\n| `margin` | Empty space surrounding the sliding panel sheet. |\n| `renderPanelSheet` | Set to false to not to render the sheet the `panel` sits upon. This means that only `body`, `collapsed`, and the `panel` Widgets will be rendered. Set this to false if you want to achieve a floating effect or want more customization over how the sliding panel looks like. |\n| `panelSnapping` | Set to false to disable the panel from snapping open or closed. |\n| `backdropEnabled` | If non-null, shows a darkening shadow over the `body` as the panel slides open. |\n| `backdropColor` | Shows a darkening shadow of this Color over the `body` as the panel slides open. |\n| `backdropOpacity` | The opacity of the backdrop when the panel is fully open. This value can range from 0.0 to 1.0 where 0.0 is completely transparent and 1.0 is completely opaque. |\n| `backdropTapClosesPanel` | Flag that indicates whether or not tapping the backdrop closes the panel. Defaults to true. |\n| `controller` | If non-null, this can be used to control the state of the panel. |\n| `onPanelSlide` | If non-null, this callback is called as the panel slides around with the current position of the panel. The position is a double between 0.0 and 1.0 where 0.0 is fully collapsed and 1.0 is fully open. |\n| `onPanelOpened` | If non-null, this callback is called when the panel is fully opened. |\n| `onPanelClosed` | If non-null, this callback is called when the panel is fully collapsed. |\n| `parallaxEnabled` | If non-null and true, the SlidingUpPanel exhibits a parallax effect as the panel slides up. Essentially, the body slides up as the panel slides up. |\n| `parallaxOffset` | Allows for specifying the extent of the parallax effect in terms of the percentage the panel has slid up/down. Recommended values are within 0.0 and 1.0 where 0.0 is no parallax and 1.0 mimics a one-to-one scrolling effect. Defaults to a 10% parallax. |\n| `isDraggable` | Allows toggling of draggability of the SlidingUpPanel. Set this to false to prevent the user from being able to drag the panel up and down. Defaults to true. |\n| `slideDirection` | Either `SlideDirection.UP` or `SlideDirection.DOWN`. Indicates which way the panel should slide. Defaults to `UP`. If set to `DOWN`, the panel attaches itself to the top of the screen and is fully opened when the user swipes down on the panel. |\n| `defaultPanelState` | The default state of the panel; either PanelState.OPEN or `PanelState.CLOSED`. This value defaults to `PanelState.CLOSED` which indicates that the panel is in the closed position and must be opened. `PanelState.OPEN` indicates that by default the Panel is open and must be swiped closed by the user. |\n\n<br>\n<br>\n\n### Darkening the Body as the Panel Opens\nIf desired, the `body` can be darkened as the panel is opened by setting `backdropEnabled` to `true`. You can also customize the `backdropColor`, `backdropOpacity`, and `backdropTapClosesPanel`. For example:\n\n```dart\n@override\nWidget build(BuildContext context){\n  return Material(\n    child: SlidingUpPanel(\n      backdropEnabled: true,\n      panel: Center(\n        child: Text(\"This is the sliding Widget\"),\n      ),\n      body: Scaffold(\n        appBar: AppBar(\n          title: Text(\"SlidingUpPanelExample\"),\n        ),\n        body:  Center(\n          child: Text(\"This is the Widget behind the sliding panel\"),\n        ),\n      ),\n    ),\n  );\n}\n```\nNotice how the `Scaffold` is nested inside of the `SlidingUpPanel`. This because the backdrop is rendered only over the `body` of the `SlidingUpPanel`. As a result, if we want the `backdrop` to appear over the `AppBar`, then we *must* nest the `Scaffold` this way.\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/backdropclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/backdropmidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/backdropopen.png\">\n</p>\n\n<br>\n<br>\n\n### Displaying a Different Child When the Panel is Closed\nBy assigning a non-null Widget to the `collapsed` property, you can add a Widget that displays overtop the `panel` when collapsed. As the `panel` is opened, this Widget will fade out to display the `panel` underneath. For example:\n\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      panel: Center(\n        child: Text(\"This is the sliding Widget\"),\n      ),\n      collapsed: Container(\n        color: Colors.blueGrey,\n        child: Center(\n          child: Text(\n            \"This is the collapsed Widget\",\n            style: TextStyle(color: Colors.white),\n          ),\n        ),\n      ),\n      body: Center(\n        child: Text(\"This is the Widget behind the sliding panel\"),\n      ),\n    ),\n  );\n}\n```\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/collapsedpanelclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/collapsedpanelmidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/collapsedpanelopen.png\">\n</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n\n### Rounding the Borders\nModern design principles (especially in the Material Design Refresh) emphasize rounded borders. A similar effect can be easily achieved by providing a non-null `BorderRadiusGeometry` to the `borderRadius` property. Note that this only curves the border on the underlying panel sheet: any children passed to `panel` or `collapsed` must also have their borders curved separately in order to achieve a uniform effect. For example:\n\n\n```dart\n@override\nWidget build(BuildContext context) {\n  BorderRadiusGeometry radius = BorderRadius.only(\n    topLeft: Radius.circular(24.0),\n    topRight: Radius.circular(24.0),\n  );\n\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      panel: Center(\n        child: Text(\"This is the sliding Widget\"),\n      ),\n\n      collapsed: Container(\n        decoration: BoxDecoration(\n          color: Colors.blueGrey,\n          borderRadius: radius\n        ),\n        child: Center(\n          child: Text(\n            \"This is the collapsed Widget\",\n            style: TextStyle(color: Colors.white),\n          ),\n        ),\n      ),\n\n      body: Center(\n        child: Text(\"This is the Widget behind the sliding panel\"),\n      ),\n\n      borderRadius: radius,\n    ),\n  );\n}\n```\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/borderclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/bordermidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/borderopen.png\">\n</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n\n### Creating A Floating Effect\nTo create a fully custom effect, the default panel sheet can be completely hidden and only the children rendered (i.e. only `body`, `panel`, and `collapsed` are rendered). To do this, set the `renderPanelSheet` property to `false`. For example, to create a floating effect:\n\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      renderPanelSheet: false,\n      panel: _floatingPanel(),\n      collapsed: _floatingCollapsed(),\n      body: Center(\n        child: Text(\"This is the Widget behind the sliding panel\"),\n      ),\n    ),\n  );\n}\n\nWidget _floatingCollapsed(){\n  return Container(\n    decoration: BoxDecoration(\n      color: Colors.blueGrey,\n      borderRadius: BorderRadius.only(topLeft: Radius.circular(24.0), topRight: Radius.circular(24.0)),\n    ),\n    margin: const EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0),\n    child: Center(\n      child: Text(\n        \"This is the collapsed Widget\",\n        style: TextStyle(color: Colors.white),\n      ),\n    ),\n  );\n}\n\nWidget _floatingPanel(){\n  return Container(\n    decoration: BoxDecoration(\n      color: Colors.white,\n      borderRadius: BorderRadius.all(Radius.circular(24.0)),\n      boxShadow: [\n        BoxShadow(\n          blurRadius: 20.0,\n          color: Colors.grey,\n        ),\n      ]\n    ),\n    margin: const EdgeInsets.all(24.0),\n    child: Center(\n      child: Text(\"This is the SlidingUpPanel when open\"),\n    ),\n  );\n}\n```\n\nNote that a similar effect can be created by simply adding a `margin` to the `SlidingUpPanel`.\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/floatingclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/floatingmidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/floatingopen.png\">\n</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n\n### Adding Scrollable Elements to the Sliding Panel\nThe `panel` itself can contain Scrollable elements. As of `v1.0.0`, you can link the scroll position of the Scrollable elements with the position of the sliding up panel by using the `panelBuilder`. For example:\n\n```dart\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      panelBuilder: (ScrollController sc) => _scrollingList(sc),\n      body: Center(\n        child: Text(\"This is the Widget behind the sliding panel\"),\n      ),\n    ),\n  );\n}\n\nWidget _scrollingList(ScrollController sc){\n  return ListView.builder(\n    controller: sc,\n    itemCount: 50,\n    itemBuilder: (BuildContext context, int i){\n      return Container(\n        padding: const EdgeInsets.all(12.0),\n        child: Text(\"$i\"),\n      );\n    },\n  );\n}\n```\n\n<p float=\"left\">\n  <img alt=\"Panel Closed\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/scrollclosed.png\">\n  <img alt=\"Panel Midway\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/scrollmidway.png\">\n  <img alt=\"Panel Open\" width=\"217px\" src=\"https://raw.githubusercontent.com/akshathjain/sliding_up_panel/master/screenshots/scrollopen.png\">\n</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n\n### Using the `PanelController`\nAt times, it can be useful to manually change the state of the `SlidingUpPanel`. This can be easily achieved by using a `PanelController` and attaching it to an instance of the `SlidingUpPanel`. Note that since the `PanelController` modifies the state of a `SlidingUpPanel`, these methods can *only* be called after the `SlidingUpPanel` has been rendered.\n\n<!-- Get the panel position (returns a value between 0.0 and 1.0) and set the panel position (without animation). The value assigned must between 0.0 and 1.0 where 0.0 is fully collapsed and 1.0 is completely open. -->\n|  Properties  | Data Type | Permissions | Description |\n|--------------|-----------|-------------|-------------|\n|`panelPosition`| `double` | Read / Write | Evaluates to the current panel position (a value between 0.0 and 1.0) where 0.0 is closed and 1.0 is open. Any value assigned to this property must be between 0.0 and 1.0, inclusive. |\n| `isAttached` | `bool` | Read | Determine if the panelController is attached to an instance of the SlidingUpPanel (this property must be true before any other `PanelController` functions can be used) |\n|`isPanelAnimating`| `bool` | Read | Returns whether or not the panel is currently animating. |\n|`isPanelOpen`| `bool` | Read | Returns whether or not the panel is open. |\n|`isPanelClosed`| `bool` | Read | Returns whether or not the panel is collapsed.|\n|`isPanelShown`| `bool` | Read | Returns whether or not the panel is shown/hidden.|\n\n<br>\n\n|  Methods  | Return Type | Description |\n|-----------|-------------|-------------|\n|`open()`| `Future<void>` | Opens the sliding panel fully (i.e. to the  `maxHeight`) |\n|`close()`| `Future<void>` | Closes the sliding panel to its collapsed state (i.e. to the  `minHeight`) |\n|`hide()`| `Future<void>` | Hides the sliding panel (i.e. is invisible) |\n|`show()`| `Future<void>` | Shows the sliding panel in its collapsed state (i.e. \"un-hide\" the sliding panel) |\n|`animatePanelToPosition(double value, {Duration duration, Curve curve = Curves.linear})`| `Future<void>` | Animates the panel position to the value. The value must between 0.0 and 1.0 where 0.0 is fully collapsed and 1.0 is completely open. (optional) `duration` specifies the time for the animation to complete. (optional) `curve` specifies the easing behavior of the animation. |\n|`animatePanelToSnapPoint(double value, {Duration duration, Curve curve = Curves.linear})` [beta]| `Future<void>` | NOTE: This feature is still in beta and may have some problems. Please open an issue on [GitHub](https://github.com/akshathjain/sliding_up_panel) if you encounter something unexpected. <br><br> Animates the panel position to the snap point. Requires that the SlidingUpPanel `snapPoint` property is not null. (optional) `duration` specifies the time for the animation to complete. (optional) `curve` specifies the easing behavior of the animation. |\n\n\n```dart\nPanelController _pc = new PanelController();\n\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(\"SlidingUpPanelExample\"),\n    ),\n    body: SlidingUpPanel(\n      controller: _pc,\n      panel: Center(\n        child: Text(\"This is the sliding Widget\"),\n      ),\n      body: _body(),\n    ),\n  );\n}\n\nWidget _body(){\n  return Container(\n    child: Column(\n      children: <Widget>[\n        RaisedButton(\n          child: Text(\"Open\"),\n          onPressed: () => _pc.open(),\n        ),\n        RaisedButton(\n          child: Text(\"Close\"),\n          onPressed: () => _pc.close(),\n        ),\n        RaisedButton(\n          child: Text(\"Show\"),\n          onPressed: () => _pc.show(),\n        ),\n        RaisedButton(\n          child: Text(\"Hide\"),\n          onPressed: () => _pc.hide(),\n        ),\n      ],\n    ),\n  );\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n<br>\n<br>\n\n## Breaking Changes\n`v1.0.0` introduced some breaking changes to the `PanelController` to better adhere to Dart language conventions. The changes are outlined below.\n\nThe following `PanelController` methods now return `Future<void>` instead of `void`:\n- `close()`\n- `open()`\n- `hide()`\n- `show()`\n- `animatePanelToPosition(double value)`\n\nThe following `PanelController` methods have changed to Dart properties to better reflect Dart language conventions:\n- `setPanelPosition()` -> `panelPosition` [as a setter]\n- `getPanelPosition()` -> `panelPosition` [as a getter]\n- `isPanelAnimating()` -> `isPanelAnimating`\n- `isPanelOpen()` -> `isPanelOpen`\n- `isPanelClosed()` -> `isPanelClosed`\n- `isPanelShown()` -> `isPanelShown`\n\n\nFor example, here's how you would have previously used `setPanelPosition()` and `getPanelPosition()` vs. how you would now use the `panelPosition` property:\n```dart\n// OLD, no longer supported\nprint(pc.getPanelPosition()); // print a value between 0.0 and 1.0\npc.setPanelPosition(0.5);     // sets the panelPosition to 0.5\n```\n\n```dart\n// NEW\nprint(pc.panelPosition); // print a value between 0.0 and 1.0\npc.panelPosition = 0.5;  // sets the panelPosition to 0.5\n```\n\nAnd here's how you would have previously called `isPanelAnimating()` vs. how you would now call `isPanelAnimating`.\n```dart\npanelController.isPanelAnimating(); // OLD, no longer supported\n```\n```dart\npanelController.isPanelAnimating; // NEW\n```\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.318359375,
          "content": "name: sliding_up_panel\ndescription: A draggable Flutter widget that makes implementing a SlidingUpPanel much easier!\nversion: 2.0.0+1\nhomepage: https://github.com/akshathjain/sliding_up_panel\n\nenvironment:\n  sdk: \">=2.12.0 <3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n"
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}