{
  "metadata": {
    "timestamp": 1736710649453,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rrousselGit/riverpod",
      "stars": 6392,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.03515625,
          "content": "**/*.*.dart linguist-generated=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.0908203125,
          "content": "pubspec.lock\n\n# Ignoring native folders of the example as they can be re-generated easily using:\n# flutter create --platforms=android,ios,web,windows,macos .\n**/example/android/\n**/example/ios/\n**/example/web/\nexamples/**/android/\nexamples/**/ios/\nexamples/**/web/\nexamples/**/windows/\nexamples/**/macos/\n# Include specific entitlements files which enable internet access\n!examples/**/macos/Runner/DebugProfile.entitlements\n\n# Miscellaneous\ncoverage/\n*.class\n*.log\n*.pyc\n*.swp\n.DS_Store\n.atom/\n.buildlog/\n.history\n.svn/\ncoverage.lcov\n\n# IntelliJ related\n*.iml\n*.ipr\n*.iws\n.idea/\n\n# The .vscode folder contains launch configuration and tasks you configure in\n# VS Code which you may wish to be included in version control, so this line\n# is commented out by default.\n#.vscode/\n\n# Flutter/Dart/Pub related\n**/doc/api/\n.dart_tool/\n.flutter-plugins\n.flutter-plugins-dependencies\n.packages\n.pub-cache/\n.pub/\nbuild/\n\n# Web related\nlib/generated_plugin_registrant.dart\n\n# Exceptions to above rules.\n!/packages/flutter_tools/test/data/dart_dependencies_test/**/.packages\n.vscode/settings.json\n\nnode_modules\npackage-lock.json\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2705078125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at darky12s@gmail.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.90625,
          "content": "## Contributing to Riverpod\n\nSo you want to contribute? Awesome! Contributions are welcomed.  \nBefore we get started on setting up the development environment, check out\nour [Code of conduct](./CODE_OF_CONDUCT.md).  \nYou will also want to join our [Discord](https://discord.gg/Bbumvej) to chat.  \nFeel free to ping @rrousselGit there for questions related to contributing.\n\nWith that out of the way, the way to contribute may vary depending on what you\nwant to contribute to.  \nThere are a few ways to contribute to the Riverpod ecosystem:\n\n- Documentation work (adding new articles, fixing typos, translations).  \n  This is the easiest and recommended way of contributing.\n  There is generally a low barrier to entry with such contributions.\n\n- Tooling work.\n  You could work on side-tools for Riverpod, such as adding new lint rules\n  or working on a migration CLI or devtool, etc...\n  This is more technical, but code quality won't matter too much.\n\n- Contributing to Riverpod itself.\n  This is the hardest part. Adding new APIs will be generally very difficult,\n  as we'll need to have an extensive discussion about that new API first.  \n  If you want to contribute to Riverpod itself, it is recommended to work\n  on bug fixes instead.\n\n**It is highly encouraged to make an issue before creating your PR**  \nThis is especially crucial for larger work.  \nYou do not need to spend a lot of time making that issue. The important is:\n\n- Mention that you want to contribute\n- Explain a bit what you want to do.\n\nMaking an issue is important to discuss what needs to be done.  \nYou wouldn't want to spend tens of hours working on something, only to\nhave your PR rejected because we disagree on the direction taken.\nA discussion may slow down the work initially, but it can save you from a lot\nof frustration.\n\n## Documentation work\n\nRiverpod's documentation uses [Docusaurus](https://docusaurus.io/fr/docs).  \nThis framework is responsible for various features of the website. Check out\nits documentation, as it may have the answer to your questions.\n\nDocumentation is written in \"mdx\", which is a combination of Markdown and JSX.  \nIf you are familiar with Markdown, this should be reasonably easy to pick up.\nFeel free to look at existing pages to see how they work.\n\n### Installing the website locally\n\nThe docs uses [node](https://nodejs.org/fr) and [yarn](https://yarnpkg.com/).  \nYou will need to install both and run:\n\n```sh\nyarn install\n```\n\nThen, you can start the documentation locally with:\n\n```sh\nyarn dev\n```\n\nFinally, head to `localhost:3000`\n\n### Adding new language\n\nRiverpod supports multiple languages.  \nTo add new languages, it is recommended to follow the [i18n](https://docusaurus.io/docs/i18n/introduction)\ndocumentation of Docusaurus.\n\nThe English documentation is hosted in [`/website/docs`](https://github.com/rrousselGit/riverpod/tree/master/website/docs).  \nTranslations are hosted in [`/website/i18n`](https://github.com/rrousselGit/riverpod/tree/master/website/i18n).\n\nNote that [you can only host one locale at a time](https://tutorial.docusaurus.io/docs/tutorial-extras/translate-your-site#start-your-localized-site) when hosting the website locally with `yarn dev`.\n\n```sh\nyarn dev -l ja # When you are checking the Japanese docs locally\n```\n\n### Working on packages\n\n### Updating English docs\n\nEnglish docs are the source of truth for Riverpod docs. As such, translations\nmay get \"out of date\" for a period of time.  \nTo make it obvious for users that a translated page may be out of date, Riverpod's\nwebsite supports showing a warning banner at the top of the translation pages.\n\nTo support in a maintainable way, when editing English docs in a way that requires\ntranslations to be updated, the English's \"version number\" needs to be bumped.  \n**This does not need to be done when fixing typos**\n\nTo bump the version number of a page, you should either add or update\na `version: nbr` at the very top of the file.\n\nFor example:\n\n```md\n---\ntitle: This is an example\nversion: 2\n# ^ This number needs to be incremented.\n# Doing so will show an outdated banner on all translations of this page.\n---\n\nSome content\n```\n\n#### Adding code snippets\n\nUnless agree otherwise, all code snippets inside docs need to be placed in a `.dart` file\nand then imported in `.mdx` files.  \nThis is important to enable static analysis of the code snippets, such that when\na breaking change happens, all associated snippets in the documentation that\nneed updating will be highlighted.\n\nYou can check out the [Getting Started] source for an example on how to do this.\n\nAt the same time, if you are working on a branch of the documentation\nwhere the toggles for enabling/disabling code-generation and hooks are supported; then\nyour code snippets should support those.  \nThis is done by having a separate `.dart` file for each possible scenario.  \nAgain, look at the [Getting Started] for an example.\n\n[Getting Started]: https://github.com/rrousselGit/riverpod/blob/master/website/docs/introduction/getting_started.mdx\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2020 Remi Rousselet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.330078125,
          "content": "<p>\n  <a href=\"https://flutter.dev/docs/development/packages-and-plugins/favorites\">\n    <img src=\"https://raw.githubusercontent.com/rrousselGit/riverpod/master/resources/flutter_favorite.png\" width=\"100\" align=\"left\" />\n  </a>\n  <a href=\"https://github.com/rrousselGit/riverpod/actions\"><img src=\"https://github.com/rrousselGit/riverpod/workflows/Build/badge.svg\" alt=\"Build Status\"></a>\n  <a href=\"https://codecov.io/gh/rrousselgit/riverpod\"><img src=\"https://codecov.io/gh/rrousselgit/riverpod/branch/master/graph/badge.svg\" alt=\"codecov\"></a>\n  <a href=\"https://github.com/rrousselgit/riverpod\"><img src=\"https://img.shields.io/github/stars/rrousselgit/riverpod.svg?style=flat&logo=github&colorB=deeppink&label=stars\" alt=\"Star on Github\"></a>\n  <a href=\"https://opensource.org/licenses/MIT\"><img src=\"https://img.shields.io/badge/license-MIT-purple.svg\" alt=\"License: MIT\"></a>\n  <a href=\"https://discord.gg/Bbumvej\"><img src=\"https://img.shields.io/discord/765557403865186374.svg?logo=discord&color=blue\" alt=\"Discord\"></a>\n\n  <p>\n    <a href=\"https://www.netlify.com\">\n      <img src=\"https://www.netlify.com/img/global/badges/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" />\n    </a>\n  </p>\n\n</p>\n\n<p align=\"center\">\n  <img src=\"https://github.com/rrousselGit/riverpod/blob/master/resources/icon/Facebook%20Cover%20A.png?raw=true\" width=\"100%\" alt=\"Riverpod\" />\n</p>\n\n---\n\nA reactive caching and data-binding framework. https://riverpod.dev\nRiverpod makes working with asynchronous code a breeze by:\n\n- handling errors/loading states by default. No need to manually catch errors\n- natively supporting advanced scenarios, such as pull-to-refresh\n- separating the logic from your UI\n- ensuring your code is testable, scalable and reusable\n\n| riverpod         | [![pub package](https://img.shields.io/pub/v/riverpod.svg?label=riverpod&color=blue)](https://pub.dartlang.org/packages/riverpod)                 |\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n| flutter_riverpod | [![pub package](https://img.shields.io/pub/v/riverpod.svg?label=flutter_riverpod&color=blue)](https://pub.dartlang.org/packages/flutter_riverpod) |\n| hooks_riverpod   | [![pub package](https://img.shields.io/pub/v/riverpod.svg?label=hooks_riverpod&color=blue)](https://pub.dartlang.org/packages/hooks_riverpod)     |\n\nWelcome to [Riverpod] (anagram of [Provider])!\n\nFor learning how to use [Riverpod], see its documentation:\n\\>\\>\\> https://riverpod.dev <<<\n\nLong story short:\n\n- Define network requests by writing a function annotated with `@riverpod`:\n\n  ```dart\n  @riverpod\n  Future<String> boredSuggestion(Ref ref) async {\n    final response = await http.get(\n      Uri.https('boredapi.com', '/api/activity'),\n    );\n    final json = jsonDecode(response.body);\n    return json['activity']! as String;\n  }\n  ```\n\n- Listen to the network request in your UI and gracefully handle loading/error states.\n\n  ```dart\n  class Home extends ConsumerWidget {\n    @override\n    Widget build(BuildContext context, WidgetRef ref) {\n      final boredSuggestion = ref.watch(boredSuggestionProvider);\n      // Perform a switch-case on the result to handle loading/error states\n      return switch (boredSuggestion) {\n        AsyncData(:final value) => Text('data: $value'),\n        AsyncError(:final error) => Text('error: $error'),\n        _ => const Text('loading'),\n      };\n    }\n  }\n  ```\n\n## Contributing\n\nContributions are welcome!\n\nHere is a curated list of how you can help:\n\n- Report bugs and scenarios that are difficult to implement\n- Report parts of the documentation that are unclear\n- Fix typos/grammar mistakes\n- Update the documentation or add examples\n- Implement new features by making a pull-request\n\n## Sponsors\n\n<p align=\"center\">\n  <a href=\"https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg\">\n    <img src='https://raw.githubusercontent.com/rrousselGit/freezed/master/sponsorkit/sponsors.svg'/>\n  </a>\n</p>\n\n[provider]: https://github.com/rrousselGit/provider\n[riverpod]: https://github.com/rrousselGit/riverpod\n[flutter_hooks]: https://github.com/rrousselGit/flutter_hooks\n[inheritedwidget]: https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html\n[hooks_riverpod]: https://pub.dev/packages/hooks_riverpod\n[flutter_riverpod]: https://pub.dev/packages/flutter_riverpod\n"
        },
        {
          "name": "all_lint_rules.yaml",
          "type": "blob",
          "size": 7.15234375,
          "content": "linter:\n  rules:\n    - always_declare_return_types\n    - always_put_control_body_on_new_line\n    - always_put_required_named_parameters_first\n    - always_require_non_null_named_parameters\n    - always_specify_types\n    - always_use_package_imports\n    - annotate_overrides\n    - annotate_redeclares\n    - avoid_annotating_with_dynamic\n    - avoid_bool_literals_in_conditional_expressions\n    - avoid_catches_without_on_clauses\n    - avoid_catching_errors\n    - avoid_classes_with_only_static_members\n    - avoid_double_and_int_checks\n    - avoid_dynamic_calls\n    - avoid_empty_else\n    - avoid_equals_and_hash_code_on_mutable_classes\n    - avoid_escaping_inner_quotes\n    - avoid_field_initializers_in_const_classes\n    - avoid_final_parameters\n    - avoid_function_literals_in_foreach_calls\n    - avoid_implementing_value_types\n    - avoid_init_to_null\n    - avoid_js_rounded_ints\n    - avoid_multiple_declarations_per_line\n    - avoid_null_checks_in_equality_operators\n    - avoid_positional_boolean_parameters\n    - avoid_print\n    - avoid_private_typedef_functions\n    - avoid_redundant_argument_values\n    - avoid_relative_lib_imports\n    - avoid_renaming_method_parameters\n    - avoid_return_types_on_setters\n    - avoid_returning_null\n    - avoid_returning_null_for_future\n    - avoid_returning_null_for_void\n    - avoid_returning_this\n    - avoid_setters_without_getters\n    - avoid_shadowing_type_parameters\n    - avoid_single_cascade_in_expression_statements\n    - avoid_slow_async_io\n    - avoid_type_to_string\n    - avoid_types_as_parameter_names\n    - avoid_types_on_closure_parameters\n    - avoid_unnecessary_containers\n    - avoid_unstable_final_fields\n    - avoid_unused_constructor_parameters\n    - avoid_void_async\n    - avoid_web_libraries_in_flutter\n    - await_only_futures\n    - camel_case_extensions\n    - camel_case_types\n    - cancel_subscriptions\n    - cascade_invocations\n    - cast_nullable_to_non_nullable\n    - close_sinks\n    - collection_methods_unrelated_type\n    - combinators_ordering\n    - comment_references\n    - conditional_uri_does_not_exist\n    - constant_identifier_names\n    - control_flow_in_finally\n    - curly_braces_in_flow_control_structures\n    - dangling_library_doc_comments\n    - depend_on_referenced_packages\n    - deprecated_consistency\n    - deprecated_member_use_from_same_package\n    - diagnostic_describe_all_properties\n    - directives_ordering\n    - discarded_futures\n    - do_not_use_environment\n    - empty_catches\n    - empty_constructor_bodies\n    - empty_statements\n    - eol_at_end_of_file\n    - exhaustive_cases\n    - file_names\n    - flutter_style_todos\n    - hash_and_equals\n    - implementation_imports\n    - implicit_call_tearoffs\n    - implicit_reopen\n    - invalid_case_patterns\n    - iterable_contains_unrelated_type\n    - join_return_with_assignment\n    - leading_newlines_in_multiline_strings\n    - library_annotations\n    - library_names\n    - library_prefixes\n    - library_private_types_in_public_api\n    - lines_longer_than_80_chars\n    - list_remove_unrelated_type\n    - literal_only_boolean_expressions\n    - matching_super_parameters\n    - missing_whitespace_between_adjacent_strings\n    - no_adjacent_strings_in_list\n    - no_default_cases\n    - no_duplicate_case_values\n    - no_leading_underscores_for_library_prefixes\n    - no_leading_underscores_for_local_identifiers\n    - no_literal_bool_comparisons\n    - no_logic_in_create_state\n    - no_runtimeType_toString\n    - no_self_assignments\n    - no_wildcard_variable_uses\n    - non_constant_identifier_names\n    - noop_primitive_operations\n    - null_check_on_nullable_type_parameter\n    - null_closures\n    - omit_local_variable_types\n    - one_member_abstracts\n    - only_throw_errors\n    - overridden_fields\n    - package_api_docs\n    - package_names\n    - package_prefixed_library_names\n    - parameter_assignments\n    - prefer_adjacent_string_concatenation\n    - prefer_asserts_in_initializer_lists\n    - prefer_asserts_with_message\n    - prefer_collection_literals\n    - prefer_conditional_assignment\n    - prefer_const_constructors\n    - prefer_const_constructors_in_immutables\n    - prefer_const_declarations\n    - prefer_const_literals_to_create_immutables\n    - prefer_constructors_over_static_methods\n    - prefer_contains\n    - prefer_double_quotes\n    - prefer_expression_function_bodies\n    - prefer_final_fields\n    - prefer_final_in_for_each\n    - prefer_final_locals\n    - prefer_final_parameters\n    - prefer_for_elements_to_map_fromIterable\n    - prefer_foreach\n    - prefer_function_declarations_over_variables\n    - prefer_generic_function_type_aliases\n    - prefer_if_elements_to_conditional_expressions\n    - prefer_if_null_operators\n    - prefer_initializing_formals\n    - prefer_inlined_adds\n    - prefer_int_literals\n    - prefer_interpolation_to_compose_strings\n    - prefer_is_empty\n    - prefer_is_not_empty\n    - prefer_is_not_operator\n    - prefer_iterable_whereType\n    - prefer_mixin\n    - prefer_null_aware_method_calls\n    - prefer_null_aware_operators\n    - prefer_relative_imports\n    - prefer_single_quotes\n    - prefer_spread_collections\n    - prefer_typing_uninitialized_variables\n    - prefer_void_to_null\n    - provide_deprecation_message\n    - public_member_api_docs\n    - recursive_getters\n    - require_trailing_commas\n    - secure_pubspec_urls\n    - sized_box_for_whitespace\n    - sized_box_shrink_expand\n    - slash_for_doc_comments\n    - sort_child_properties_last\n    - sort_constructors_first\n    - sort_pub_dependencies\n    - sort_unnamed_constructors_first\n    - test_types_in_equals\n    - throw_in_finally\n    - tighten_type_of_initializing_formals\n    - type_annotate_public_apis\n    - type_init_formals\n    - type_literal_in_constant_pattern\n    - unawaited_futures\n    - unnecessary_await_in_return\n    - unnecessary_brace_in_string_interps\n    - unnecessary_breaks\n    - unnecessary_const\n    - unnecessary_constructor_name\n    - unnecessary_final\n    - unnecessary_getters_setters\n    - unnecessary_lambdas\n    - unnecessary_late\n    - unnecessary_library_directive\n    - unnecessary_new\n    - unnecessary_null_aware_assignments\n    - unnecessary_null_aware_operator_on_extension_on_nullable\n    - unnecessary_null_checks\n    - unnecessary_null_in_if_null_operators\n    - unnecessary_nullable_for_final_variable_declarations\n    - unnecessary_overrides\n    - unnecessary_parenthesis\n    - unnecessary_raw_strings\n    - unnecessary_statements\n    - unnecessary_string_escapes\n    - unnecessary_string_interpolations\n    - unnecessary_this\n    - unnecessary_to_list_in_spreads\n    - unreachable_from_main\n    - unrelated_type_equality_checks\n    - unsafe_html\n    - use_build_context_synchronously\n    - use_colored_box\n    - use_decorated_box\n    - use_enums\n    - use_full_hex_values_for_flutter_colors\n    - use_function_type_syntax_for_parameters\n    - use_if_null_to_convert_nulls_to_bools\n    - use_is_even_rather_than_modulo\n    - use_key_in_widget_constructors\n    - use_late_for_private_fields_and_variables\n    - use_named_constants\n    - use_raw_strings\n    - use_rethrow_when_possible\n    - use_setters_to_change_properties\n    - use_string_buffers\n    - use_string_in_part_of_directives\n    - use_super_parameters\n    - use_test_throws_matchers\n    - use_to_and_as_if_applicable\n    - valid_regexps\n    - void_checks"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 3.3291015625,
          "content": "include: all_lint_rules.yaml\nanalyzer:\n  language:\n    strict-casts: true\n    strict-inference: true\n    strict-raw-types: true\n  errors:\n    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.\n    # We explicitly enabled even conflicting rules and are fixing the conflict\n    # in this file\n    included_file_warning: ignore\n    # false positive when using Freezed\n    invalid_annotation_target: ignore\n    # I prefer specifying a parameter on a widget even if they are unused (such as Key)\n    # for the sake of consistency.\n    unused_element_parameter: false\n    unrecognized_error_code: ignore\n\nlinter:\n  rules:\n    # False positive for custom enum-like classes (such as Flutter's \"Colors\")\n    avoid_classes_with_only_static_members: false\n\n    # False positive when the future is returned by the function\n    discarded_futures: false\n\n    # Low value and lacks a quick fix\n    combinators_ordering: false\n    \n    # Low value and high cost to change on all files\n    eol_at_end_of_file: false\n\n    # Conflicts with unused variables\n    no_leading_underscores_for_local_identifiers: false\n\n    # false positive\n    one_member_abstracts: false\n\n    # too verbose\n    prefer_final_parameters: false\n\n    # Too verbose with little value, and this is taken care of by the Flutter devtool anyway.\n    diagnostic_describe_all_properties: false\n\n    # Personal preference. I prefer \"if (bool) return;\" over having it in multiple lines\n    always_put_control_body_on_new_line: false\n\n    # Personal preference. I don't find it more readable\n    cascade_invocations: false\n\n    # Conflicts with `prefer_single_quotes`\n    # Single quotes are easier to type and don't compromise on readability.\n    prefer_double_quotes: false\n\n    # Conflicts with `omit_local_variable_types` and other rules.\n    # As per Dart guidelines, we want to avoid unnecessary types to make the code\n    # more readable.\n    # See https://dart.dev/guides/language/effective-dart/design#avoid-type-annotating-initialized-local-variables\n    always_specify_types: false\n\n    # Incompatible with `prefer_final_locals`\n    # Having immutable local variables makes larger functions more predictable\n    # so we will use `prefer_final_locals` instead.\n    unnecessary_final: false\n\n    # Not quite suitable for Flutter, which may have a `build` method with a single\n    # return, but that return is still complex enough that a \"body\" is worth it.\n    prefer_expression_function_bodies: false\n\n    # Conflicts with the convention used by flutter, which puts `Key key`\n    # and `@required Widget child` last.\n    always_put_required_named_parameters_first: false\n\n    # This project doesn't use Flutter-style todos\n    flutter_style_todos: false\n\n    # There are situations where we voluntarily want to catch everything,\n    # especially as a library.\n    avoid_catches_without_on_clauses: false\n\n    # Boring as it sometimes force a line of 81 characters to be split in two.\n    # As long as we try to respect that 80 characters limit, going slightly\n    # above is fine.\n    lines_longer_than_80_chars: false\n\n    # Conflicts with disabling `implicit-dynamic`\n    avoid_annotating_with_dynamic: false\n\n    # conflicts with `prefer_relative_imports`\n    always_use_package_imports: false\n\n    # Disabled for now until we have NNBD as it otherwise conflicts with `missing_return`\n    no_default_cases: false\n"
        },
        {
          "name": "benchmarks",
          "type": "tree",
          "content": null
        },
        {
          "name": "codecov.yml",
          "type": "blob",
          "size": 0.525390625,
          "content": "codecov:\n  require_ci_to_pass: true\n\ncoverage:\n  precision: 2\n  round: down\n  range: \"70...100\"\n\nparsers:\n  gcov:\n    branch_detection:\n      conditional: yes\n      loop: yes\n      method: no\n      macro: no\n\n# excluding generated files and examples from the coverage report\nignore:\n  - \"**/example/\"\n  - \"examples\"\n  - \"**/*.g.dart\"\n  - \"**/*.freezed.dart\"\n  - \"packages/riverpod_cli\"\n  - \"packages/riverpod_generator\"\n  - \"packages/riverpod_lint\"\n\ncomment:\n  layout: \"reach,diff,flags,tree\"\n  behavior: default\n  require_changes: false\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "melos.yaml",
          "type": "blob",
          "size": 0.728515625,
          "content": "name: my_project\n\npackages:\n  - website\n  - packages/**\n  - examples/**\n  - tools/**\n\nscripts:\n  # we voluntarily do not use melos inside goldens\n  postbootstrap: |\n    cd MELOS_ROOT_PATH/packages/riverpod_cli/fixtures/notifiers/input && \n    flutter pub get && \n    cd MELOS_ROOT_PATH/packages/riverpod_cli/fixtures/notifiers/golden && \n    flutter pub get &&\n    cd MELOS_ROOT_PATH/packages/riverpod_cli/fixtures/unified_syntax/input && \n    flutter pub get &&\n    cd MELOS_ROOT_PATH/packages/riverpod_cli/fixtures/unified_syntax/golden && \n    flutter pub get\n\n  generate:\n    run: melos exec --depends-on=build_runner -- \"dart run build_runner build -d\"\n    description: Build all generated files for Dart & Flutter packages in this project.\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.1044921875,
          "content": "name: melos_root\npublish_to: none\n\nenvironment:\n  sdk: \">=2.17.0 <4.0.0\"\ndev_dependencies:\n  melos: ^3.0.0\n"
        },
        {
          "name": "resources",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}