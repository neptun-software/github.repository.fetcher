{
  "metadata": {
    "timestamp": 1736710639841,
    "page": 15,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alibaba/flutter_boost",
      "stars": 7017,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.7802734375,
          "content": ".DS_Store\n.dart_tool/\n\n.packages\n.pub/\n.idea\n\nbuild/\npubspec.lock\n.flutter-plugins\nflutter\nIDEWorkspaceChecks.plist\norg.eclipse.buildship.core.prefs\nBreakpoints_v2.xcbkptlist\nflutter_boost2\nexample/android/app/.classpath\nexample/android/app/.project\nexample/android/.project\nflutter_boost\n.flutter-plugins-dependencies\n\n# ohos\nexample/ohos/entry/libs/\nexample/ohos/entry/har/\nexample/ohos/har/\nexample/ohos/node_modules\nexample/ohos/oh_modules\nexample/ohos/.idea\nexample/ohos/build\nexample/ohos/.hvigor\nexample/ohos/.cxx\nexample/ohos/.clangd\nexample/ohos/.clang-format\nexample/ohos/.clang-tidy\nexample/ohos**/.test\n\nohos/entry/libs/\nohos/entry/har/\nohos/har/\nohos/node_modules\nohos/oh_modules\nohos/.idea\nohos/build\nohos/.hvigor\nohos/.cxx\nohos/.clangd\nohos/.clang-format\nohos/.clang-tidy\nohos**/.test"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.486328125,
          "content": "os:\n    - linux\nsudo: false\naddons:\n    apt:\n        sources:\n            - ubuntu-toolchain-r-test\n        packages:\n            - libstdc++6\n            # - fonts-droid\nbefore_script:\n    - git clone https://github.com/flutter/flutter.git -b v1.12.13-hotfixes --depth 1\n    - ./flutter/bin/flutter doctor\nscript:\n    - ./flutter/bin/flutter test --coverage --coverage-path=lcov.info\nafter_success:\n    - bash <(curl -s https://codecov.io/bash)\ncache:\n    directories:\n        - $HOME/.pub-cache\n\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.3046875,
          "content": "# Below is a list of people and organizations that have contributed\n# to the Flutter Boost project. Names should be added to the list like so:\n#\n#   Name/Organization <email address>\n\nAlibaba Inc.\nnoborder <noborder@qq.com>\nnightwolf-chen\n0xZOne <rulong.crl@alibaba-inc.com>\nYacumima <terry.yacumima@gmail.com>\nColdPaleLight\nluckysmg <2539699336@qq.com>\nxujim\nVadaski <xinlei966@gmail.com>\nFirewayer <xieweideveloper@gmail.com>\nnightfallsad\nbktoky\nAlexV525 <github@alexv525.com>\nhuangyumeng123\nseedotlee <lisi_1987@foxmail.com>\nSpiciedCrab\nchristyuj <christ.yuj@alibaba-inc.com>\ngzhongcheng <gzhongcheng@qq.com>\nTeahomLee\nliaoyuanng\ntrevorwang <trevor.wang@qq.com>\ngws321 <88161159@qq.com>\nkimlet <jinbangzhu@gmail.com>\nzhangao0086 <zhangao0086@gmail.com>\nmk-wang\nscutlight <jianguang.cjg@alibaba-inc.com>\nchunhtai\ndzchen\nMrThanksgiving <MrThanksgiving@163.com>\nJianweiWangs <wangjianwei.sir@gmail.com>\nJaminZhou <zhoujiamin1992@gmail.com>\nYunanChen <ync618@163.com>\nCheungSKei <180353389@qq.com>\nxujinping <804677682@qq.com>\nJunhuaLin <1075209054@qq.com>\ndengzq <956796570@qq.com>\npkuyaoyao <525841634@qq.com>\n郭翰林 <2318560278@qq.com>\nqianhk <hongkai.qhk@alibaba-inc.com>\n法的空间 <zmtzawqlp@live.com>\njoechan-cq <1787678994@qq.com>\nRoger Luo<tjrogertj@gmail.com>\nhuan10 <huanly.w@gmail.com>\nStarve-to-Death <506119631@qq.com>"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.9423828125,
          "content": "## NEXT\n\n## 4.6.5\n1. [dart]支持业务侧获取当前flutter页面是否是外部路由flutter页面\n\n## 4.6.4\n1. [dart]新增demo验证extended_image插件的图片左右滑动切换、缩放等手势操作是否有效\n2. [ohos]对外提供接口用于业务侧判断当前flutterEntry是否处于topContainer\n\n## 4.6.3\n1. Revert \"支持ACB跳跃路由业务场景\" Reason: 经讨论，认为夸克业务中的该场景可以直接在业务侧实现，不需要改动boost内部，为了尽量减少对boost内部逻辑的干扰，决定回滚该提交\n2. [ohos]简化实现'修复连续打开同一个弹窗再回退时页面卡死的问题'\n3. [ios]修复打开一个新的container时会执行多次surfaceUpdated的问题\n4. Revert \"[ios]修复打开一个新的container时会执行多次surfaceUpdated的问题\" Reason: 该修改存在bad case，需要换一种实现方式\n5. [ios]重新实现“修复打开一个新的container时会执行多次surfaceUpdated的问题”\n\n## 4.6.2\n1. 更新README以及FAQ\n2. [ohos]修复日志无法序列化处理BigInt的问题\n3. 支持ACB跳跃路由业务场景\n\n## 4.6.1\n1. [ohos]解决应用切换横屏时自动分屏的问题\n2. [ohos]解决dialog透明弹窗从全屏页面返回时重新执行进入动画的问题\n3. [ohos,dart]native侧取消业务自定义实现RouterOptions，优化页面返回传参接口易用性，修复native页面返回flutter页面时传参可能失败的问题\n4. [ohos]允许业务自己实现页面出栈逻辑\n5. [dart]优化PlatformView示例代码\n6. [dart]增加隐藏platformview的示例代码\n7. [dart]补充完善图片格式测试案例\n8. Revert: \"[ohos,dart]native侧取消业务自定义实现RouterOptions，优化页面返回传参接口易用性...\"\n9. [ohos]修复连续打开同一个弹窗再回退时页面卡死的问题\n10. [ohos,dart]优化页面返回传参接口易用性，修复native页面返回flutter页面时传参可能失败的问题\n\n## 4.5.11\n1. [dart]添加`SystemChrome.setPreferredOrientations`测试案例\n2. [ohos]修复透明弹窗由于被其他全屏page遮盖导致弹窗再现时页面假死等一系列问题，补充和dialog相关场景example demo\n3. [ohos]解决FlutterBoostEntry中onPageHide的调用和onPageShow不对称问题\n4. [ohos]适配最新的PlatformView方案\n5. [ohos]解决横竖屏不生效的问题\n6. [ohos]解决因权限问题从系统剪贴板获取数据失败的问题\n7. [ohos]解决透明弹窗返回时底下flutter页面闪烁的问题\n\n# 4.5.10\n1. [dart]添加HDR/HEIC/HEIF/TIFF/WBMP/WEBP等图片格式的测试案例\n2. [ohos]解决透明弹窗页面切后台或被Native页面覆盖后出现的假死问题\n\n# 4.5.9\n1. [ohos]完全支持鸿蒙页面返回参数传递，包括全部四种情况(native返回native、Flutter返回native、native返回Flutter、Flutter返回Flutter)\n2. [ohos]添加前后台事件通知逻辑\n3. [ohos]让业务可以控制调试日志的输出\n4. [ohos]解决透明弹窗场景下前后台切换页面假死的问题\n\n# 4.5.8\n1. [ohos]鸿蒙页面返回传参支持\n2. [ohos]修复Tab场景下log莫名报‘Missing params’的问题\n3. [ohos]重构ets层页面路由参数传递逻辑，支持native页面获取来自上一个native或flutter页面的业务参数\n4. [ohos]适配api12 & DevEco-5.0.3.300\n\n# 4.5.7\n1. [ohos]问题已修复，统一使用回鸿蒙社区的git依赖\n2. 更新FlutterBoost版本说明\n3. 添加clipboard示例\n4. [ohos]更新FlutterBoost项目结构\n\n# 4.5.6\n1. [ohos]接管FlutterView绑定引擎的时机，解决Tab场景显示异常的问题，避免冗余的attach/detach\n2. [ohos]解决从透明弹窗返回后页面假死的问题\n\n# 4.5.5\n1. [ohos]修复image_pick插件示例\n2. [ohos]简化鸿蒙示例代码\n3. [ohos]非官方认可的联合插件，需要在pubspec中单独指定\n4. [ohos]修复WebView示例代码\n5. [ohos]使用Navigation，解决半透明弹窗不透底的问题\n6. [ohos]修复使用Navigation后页面后退异常的问题\n7. [ohos]代码重构，便于后续优化\n8. [ohos]默认显式使用surface模式\n9. 添加SafeArea测试案例\n10. [ohos]设置全屏窗口\n11. [ohos]修复透明弹窗透底异常的问题\n12. [ohos]添加PlatformView测试案例\n13. [ohos]更新插件的import方式\n\n## 4.5.4\n1. [ohos]支持传入启动参数和dart入口参数\n2. [ohos]更新plugin注册逻辑（BREAKING CHANGE）\n\n## 4.5.3\n1. [ohos]移除不必要的生命周期通知\n2. [ohos]修复getStackFromHost/saveStackToHost相关的message channel代码错误\n3. [ohos]example增加打开鸿蒙原生页面的逻辑\n4. [ohos]修复`hot restart`白屏的问题\n\n## 4.5.2\n1. [ohos]解决页面切换闪烁问题\n\n## 4.5.1\n1. [ohos]临时修复tab内容第一次显示异常的问题\n\n## 4.5.0\n1. 适配鸿蒙\n\n## 4.4.2\n1. 将AGP的版本从7.0.4降回3.3.0\n\n## 4.4.1\n1. Revert: \"修复快速内部路由切换导致页面卡死的问题\"\n\n## 4.4.0\n1. 向业务暴露更新SystemUIOverlays方法\n2. 完善SystemUiOverlayStyle Demo\n3. 创建新容器时，默认使用上个容器的SystemUiOverlayStyle来配置新容器的状态栏、导航栏\n4. 修复快速内部路由切换导致页面卡死的问题\n\n## 4.3.1\n1. Uniform iOS code style.\n2. 更新提issue的模版\n3. fix: 修复6.0 AccessibilityBridge.release()' on a null object reference\n4. [ios] 解决pop传参不能返回的问题\n\n## 4.3.0\n1. Improve codes in Android. (#1855)\n2. Improve codes (#1856)\n3. [Android] 解决横/竖屏切换后，后退时闪现页面被拉伸（或压缩）的问题 (#1857)\n4. Support passing through Dart entrypoint arguments (#1858)\n5. Revert: \"[Android] 解决横/竖屏切换后，后退时闪现页面被拉伸（或压缩）的问题 (#1857)\" (#1859)\n\n## 4.2.3\n1. 增加自定义`appBuilder`示例 (#1827)\n2. [Android] fix flutterfragment快速切换时，出现不渲染的bug (#1830)\n3. Fixes the compilation errors when running the example with Flutter 3.10.0 (#1838)\n4. 解决打开弹窗并关闭后再关闭页面时「返回参数」不能传递到上一个页面的问题 (#1846)\n5. 修复removeWithResult接口不能返回结果的问题 (#1850)\n6. Add license headers (#1851)\n7. 暴露接口，让业务可以开启Android端内部日志输出，便于调试问题 (#1853)\n\n## 4.2.2\n1. [Android] 通过栈来记录活动的Activity，解决部分场景下topActivity可能为空的问题 (#1810)\n2. Add Test Cases for ImageCache. (#1822)\n3. Fix type conversion errors and add a prompt for unregistered routes. (#1823)\n4. 修复后退时前一个页面不必要的rebuild的问题 (#1824)\n\n## 4.2.1\n1. Add hero animation demo. (#1756)\n2. [ios] Fixes the warning that the license file does not exist (#1759)\n3. 处理 pushReplacement 泛型转换错误 (#1758)\n4. 更新授权许可链接 (#1754)\n5. fix(FlutterTextureHooker):设置setSurfaceTexture异常问题 (#1774)\n6. 为半透明弹窗增加PlatformView场景 (#1799)\n7. 开放FlutterBoostAppState中的_containers (#1800)\n8. 修复部分push场景与该手势可能冲突导致触发了两次pop\n9. [Android] 解决FlutterBoostFragment切换时可能闪现上一个页面的问题 (#1807)\n\n## 4.2.0\n1. [Android] Fixes HybridCompositon does not work (#1743)\n2. Add pigeon commands to script file. (#1744)\n3. [ios] Use a screen edge pan gesture to go back to the previous page of a non-container page. (#1751)\n\n## 4.1.1\n1. [Android] 修复FlutterFragment可能会盖住NativeFragment的Bug (#1736)\n2. Update README_CN.md (#1731)\n\n## 4.1.0\n1. [Android]fix popUntil not working (#1718)\n2. Add demo for afterimage test\n3. [Android] 与纯Flutter应用生命周期行为保持一致：应用切换到后台时，暂停帧调度，解决动画残影的问题。[注意] 应用「务必」确保前后台通知事件（onBackground/onForeground）的准确性（必要时通过dispatchBackForegroundEvent接口进行接管），否则可能出现页面假死现象；\n4. [Android]对子类开放didFragmentShow和didFragmentHide (#1726)\n\n## 4.0.4\n1. 修复 onPostPush 和 onPostPush 类型强转失败 (#1707)\n2. [Android] 提前暴露混淆导致的异常，并给出明确指引\n\n## 4.0.3\n1. 修复`addEventListener`函数中可能的类型转换错误\n\n## 4.0.2\n1. 增加dual_screen测试案例\n2. [Android]恢复detachFromFlutterEngine重载逻辑，解决空指针崩溃问题\n\n## 4.0.1\n1. 修复部分场景下运行时类型错误，例如hot restart\n2. 删除调试信息\n## 4.0.0\n1. 支持Flutter 3.0\n2. 示例代码迁移至空安全\n\n## 3.1.0\n1. [Android] 去掉不必要的兜底方案，解决Native页面返回值丢失的问题\n2. [Android] 增加计数器测试案例，验证页面刷新问题\n3. 支持空安全（基于Flutter2.5.x）\n4. [Android] 移除对AndroidX的依赖\n\n## v3.0-release.2\n1. 修复flutter首页打开A页面，打开B页面返回到首页后内存泄露问题\n2. [bugfix] 1.解决异步导致的断言错误(#1583)；2.修改测试案例，解决测试页面被拦截的问题\n3. [Android] 完善PlatformView测试案例： 1. 增加复杂的Native动画场景； 2. 支持intent打开测试页面，方便自动化测试；\n4. 增加简单的WebView测试场景\n5. 将拦截器内部实现修改为同步，避免时序相关问题\n\n## v3.0-release.1\n1. [ios]增加platform view测试案例 (#1546)\n2. [Android] 在Fragment的使用场景中，onHiddenChanged/setUserVisibleHint可能比onCreateView先调用 (#1456)\n3. [featurePR]使FlutterBoost的FlutterBoostFragment#finishContainer方法在子类可以定制容器关闭逻辑 (#1565)\n4. fix(Android):FlutterBoost开启FlutterBoostFragment页面导致状态栏颜色异常 (#1570)\n5. 拦截器重构： (#1583)\n6. 重命名example_new为example_new_for_ios\n\nBreaking Change\n1. 拦截器重构，具体见 https://github.com/alibaba/flutter_boost/pull/1583\n\n## v3.0-preview.18\n1. 修复hot restart导致的黑屏问题 (#1537)\n2. feat: Android抛出popRoute代理回调 (#1531)\n3. 将运行时异常修改为日志输出 (#1541)\n4. BoostContainer增加backPressedHandler用于自定义返回键功能\n5. 支持通过FlutterEngineProvider创建引擎\n6. 优化example\n\n## v3.0-preview.17\n1. [Android]修复特定场景下activity泄漏的问题\n2. [Android] 修复FlutterEngine空指针异常 (#1471)\n3. [flutter] 提供带有缓存的widget组件 BoostCacheWidget,可以解决在push过程中导致页面rebuild的问题 (#1486)\n4. [iOS] 修改 podspec xcconfig 为 pod_target_xcconfig ，避免修改宿主工程编译配置 (#1507)\n\n## v3.0-preview.16\n1. [Android] 修复特定场景下activity泄漏的问题 (#1444)\n2. [Android] 修复Fragment特定使用场景下的崩溃问题 (#1450)\n3. popUntil使用containers列表不能保证顺序性，在同步popRoute过程会导致出现containers的乱序。需要通过提前clone队列进行保证 (#1462)\n4. [dart] 修复应用启动首次访问flutter页面白屏问题\n\n## v3.0-preview.15\n1. [ios]对外暴露flutter页面资源释放API(#1443)\n2. [Android] 从Native页面切换回FlutterFragment时，恢复Dart视角的system chrome style，解决沉浸式状态栏显示问题\n\n## v3.0-preview.14\n1. [ios] 修复应用置后台后，通过外链接起应用进入Flutter页面,applicationState还处于inActive状态,渲染错误的问题 (#1442)\n\n## v3.0-preview.13\n1. [flutter] 修复在引擎启动完毕但是flutter侧还没有加载完毕的时候进行操作的函数调用的时序问题 (#1415)\n2. [Android] 修复实现了onWillPop回调的Widget不能后退的问题 (#1411)\n\n## v3.0-preview.12\n1. [iOS] 将控制iOS手势的方法收口到BoostChannel作为通用方法，以及在container的show的监听中做手势的动态禁用和启用\n2. [flutter] 更新example以及默认的appBuilder实现，传入builder参数，避免showDialog无法关闭dialog而是关闭页面的操作\n3. [flutter] 修复路由在极端情况下顺序错误的问题\n\n## v3.0-preview.11\n1. [flutter] 让NavigatorExt接管pushNamed方法\n2. [flutter] 增加tab模式的example，删除iOS端无用的生命周期，避免初始化阶段进行push，造成初始化情况下tab白屏问题\n3. [iOS] 提前事件监听的注册时机，以及在删除的时候对block进行判空，避免crash\n\n## v3.0-preview.10\n1. [iOS] 提供引擎预热功能，避免第一次进入flutter页面短暂的白屏/黑屏，以及字体大小跳动的情况\n2. [iOS] 单VC，多flutterPage下，动态控制容器手势侧滑，内部有多page的时候，侧滑将走flutter内部侧滑逻辑，避免多page下侧滑直接带走整个容器的情况\n3. [dart] 更新example代码，表明如何在单容器内跳转拥有跳转动画（比如iOS的push效果）\n\n## v3.0-preview.9\n1.  [Android] 解决切后台场景下Android Q生命周期回调异常导致透明弹窗背景不正确问题 (#1288)\n2.  [Android] 增加引擎释放接口 (#1291)\n\n## v3.0-preview.8\n1. [Android] 解决特定场景下半透明弹窗背景黑/白屏、传参丢失、请求权限失败，以及image_picker插件不可用等问题\n2. [Android] 修复FlutterBoostActivity和FlutterBoostFragment接收不到请求权限结果的bug\n3. 解决 iOS dismissViewController completion 异步回调事件不完整的问题\n4. [Android] 适配页面透明参数，增加测试案例 (#1265)\n5. [Android] fix #1264 修复由于这条提交 #1250 导致FlutterboosrActivity 接收不到onActivityResult 回调结果 的bug\n\n## v3.0-preview.7\n1. [Android] 解决前一个页面destroy时导致当前页面的PlatformViewsChannel断开的问题 (#1250)\n2. Hfix #1229 修复example中从Flutter页面推后台再回前天，栈顶页面是Native的页面的问题\n3. 修复单引擎多VC下问题：1.updateViewportMetrics在键盘唤起时被多个VC调用 2.Tab初始化场景下导致的Crash\n4. 修复 FlutterBoostFragment跳转新的FlutterBoostFragment，返回上一个FlutterFragment后不响应点击事件\n\n\n## v3.0-preview.6\n1.[iOS] 修复iOS打开Flutter页面再关闭不走dispose逻辑问题\n2.[Android] 解决setSystemUIOverlayStyle不生效的问题\n3.[Android] 默认开启状态恢复功能\n\n## v3.0-preview.5\n1. Native侧代码重构\n  a.uniqueId的创建方式与Dart侧保持一致\n  b.去掉ContainerShadowNode抽象代码\n  c.去掉Flutter容器创建时不必要的engineId参数\n2. open方法实现自定义配置参数，增强拓展性\n3. [双端一致性] Android端抽象出FlutterContainerManager的概念\n4. 原生 onActivityResult 回传参数到Flutter 重构\n5. 增加线程判断，确保 engine run 在主线程，可以让业务在子线程 setup boost\n6. [android] 修复Tab场景下多个Fragment使用了同一个FlutterView，以及解决Fragment第一次显示时不能正确切换surface的问题\n7. FlutterBoostFragment优化\n8. [android]当FlutterFragment的onCreateView回调时，暂不attache到引擎\n9. iOS侧透明能力提供\n10. 增加example3.0\n11. 修复FlutterFragment退出后，下面的容器页面出现假死问题\n12. 为了业务能更方便地从2.0升级到3.0，为remove接口提供argument可选参数\n13. 【dart,Android,iOS】均提供自定义事件发送机制，事件均可双向传递\n14. [Android] 允许业务复用提前创建的引擎\n15. FIXED:HeroController.didPush assert(navigator != null) 报空异常\n16. 确保onPageShow事件能够在页面创建的时候调用到\n17. PageVisibility不再提供create和destroy方法，另外onPageCreate和onPageDestroy改名为onPagePush和onPagePop\n18. FIXED:同一个容器提供多个FlutterView,业务层通过remove(uniqueId)，指定id移除非首个flutterview会失效\n19. Boost接管handleAppLifecycleStateChanged，让Flutter生命周期与应用前后台对齐\n20. BoostNavigator添加pushReplacement方法，同时修复pop和findContainerById的逻辑\n21. 过滤内部路由RouteSettings.name为null的路由事件，如对话框路等非页面路由事件，否则影响正常页面生命周期\n22. [双端一致性] iOS端FBFlutterContainerManager与Android统一，FLutterBoostPlugin生命周期相关逻辑统一\n23. 调整 Flutter Engine 初始化流程，避免使用异步方式产生插件注册时序问题\n24. 支持通过原生Navigator关闭容器页面\n25. 重构内部路由Pop时的结果回传逻辑\n26. [Android] 修复特定场景下（例如，ViewPager2）onPageHide事件未触发的问题\n\nBreaking Change\n1.为了后续Delegate的可扩展性，增加一个FlutterBoostRouteOptions的概念用于封装参数，Delegate的push和pop的参数传递都依赖这个对象\n\n具体见\nhttps://github.com/alibaba/flutter_boost/commit/14a3be59f97cad24bdba8663a79f3d17359641df\nhttps://github.com/alibaba/flutter_boost/commit/c085258e09b79dc6c3660d384409c50e2497ef4b\nhttps://github.com/alibaba/flutter_boost/commit/ce48530ad7114703d3a8dfb02e4e32543c9aaa10\nhttps://github.com/alibaba/flutter_boost/commit/47676230f21472c28791660ec93515f41d4f6c2f\n\n2. BoostNavigator提供的pop接口改为异步\nhttps://github.com/alibaba/flutter_boost/commit/d2d1fdc100dee34085b76d597194b93309e0cd0f\n\n3. PageVisibility不再提供create和destroy方法，另外onPageCreate和onPageDestroy改名为onPagePush和onPagePop\n原先写在onPageCreate和onPageDestroy的代码，写到initState和dispose中\nhttps://github.com/alibaba/flutter_boost/commit/e2f15b234260ede810e943c4f8248fd07fce6414\n\n4. Boost接管handleAppLifecycleStateChanged，让容器数量决定Flutter的resume和pause状态\n请移步接入文档，看BoostFlutterBinding的使用方式\nhttps://github.com/alibaba/flutter_boost/commit/173c910ff8ed971eacfa1a263745921ae5cd5689\nhttps://github.com/alibaba/flutter_boost/commit/abc2598f48dbcbeabf48057eec6d7737b0e21989\n\n\n## v3.0-beta.11\n1. 修复透明页面背景是前一个Container的问题\n2. 重写BoostContainerWidget判等方法，避免框架层对已存在页面进行rebuild\n\n## v3.0-beta.10\n1. BoostContainer重构，修复容器内打开和关闭页面时界面不刷新问题\n\n## v3.0-beta.9\n1. 添加前台后台的回调接口\n2. 增加从原生open flutter页面时，open操作完成后的回调能力\n\nBreaking Change:\n [iOS] 增加从原生open flutter页面时，open操作完成后的回调能力 : https://github.com/alibaba/flutter_boost/commit/7f55728955b0afcdbaba5a17543e9dbdf1c24e65\n由于一些业务方需要知道页面动画是否完成，需要获取present的completion回调，\n因此将\n- (void) pushFlutterRoute:(NSString *) pageName uniqueId:(NSString *)uniqueId arguments:(NSDictionary *) arguments\n改为\n- (void) pushFlutterRoute:(NSString *) pageName uniqueId:(NSString *)uniqueId arguments:(NSDictionary *) arguments completion:(void(^)(BOOL)) completion;\n\n## v3.0-beta.8\n1. 提供flutter_boost.dart作为对外接口\n2. BoostNavigator相关API和实现的修改\n3. 解决_pendingResult可能没有完成的问题\n4. 新增前置拦截器能力\n5. 解决在push和pop的时候，页面栈所有页面重复build的问题\n6. 使用effective_dart包提供的linter规则文件\n\n## v3.0-beta.7\n1. 生命周期实现调整\n2. 解决Android端特定场景下生命周期事件重复的问题\n3. 添加自定义启动参数设置入口\n4. 新增页面回退传参能力\n\nBreaking Change:\npage create and destroy event adjustment : https://github.com/alibaba/flutter_boost/commit/62c88805bf08606805e13254170691d2bc00bd4a\n由于生命周期实现的改变，PageVisiblityObserver的onPageShow和onPageHide方法中，不再包含参数isForegroundEvent以及isBackgroundEvent\n\n## 1.12.13+2\n  Fixed bugs\n\n## 1.12.13\n  Supported Flutter sdk 1.12.13\n\n## 1.9.1+2\n\n  Rename the version number and start supporting androidx by default, Based on the flutter 1.9.1 - hotfixs。\n  fixed bugs\n\n## 0.1.66\n\n  Fixed bugs\n\n## 0.1.64\n\n  Fixed bugs\n\n## 0.1.63\n\n  android:\n  Fixed bugs\n\n  iOS:\n  no change\n\n## 0.1.61\n\n  android:\n  Fixed bugs\n\n  iOS:\n  no change\n\n## 0.1.60\n\nA better implementation to support Flutter v1.9.1+hotfixes\n\nChange the content\nandroid:\n\n1. based on the v1.9.1+hotfixes branch of flutter\n2. Solve major bugs, such as page parameter passing\n3. Support platformview\n4. Support androidx branch :feature/flutter_1.9_androidx_upgrade\n5. Resolve memory leaks\n6. Rewrite part of the code\n7. API changes\n8. Improved demo and added many demo cases\n\nios:\n\n1.based on the v1.9.1+hotfixes branch of flutter\n2.bugfixed\n\n\n\n## 0.1.5\nThe main changes are as following:\n1. The new version do the page jump (URL route) based on the inherited FlutterViewController or Activity. The jump procedure will create new instance of FlutterView, while the old version just reuse the underlying FlutterView\n2. Avoiding keeping and reusing the FlutterView, there is no screenshot and complex attach&detach logical any more. As a result, memory is saved and black or white-screen issue occured in old version all are solved.\n3. This version also solved the app life cycle observation issue, we recommend you to use ContainerLifeCycle observer to listen the app enter background or foreground notification instead of WidgetBinding.\n4. We did some code refactoring, the main logic became more straightforward.\n\n## 0.0.1\n\n* TODO: Describe initial release.\n\n\n### API changes\nFrom the point of API changes, we did some refactoring as following:\n#### iOS API changes\n1. FlutterBoostPlugin's startFlutterWithPlatform function change its parameter from FlutterViewController to Engine\n2.\n**Before change**\n```objectivec\nFlutterBoostPlugin\n- (void)startFlutterWithPlatform:(id<FLBPlatform>)platform onStart:(void (^)(FlutterViewController *))callback;\n```\n\n**After change**\n\n```objectivec\nFlutterBoostPlugin2\n- (void)startFlutterWithPlatform:(id<FLB2Platform>)platform\n                         onStart:(void (^)(id<FlutterBinaryMessenger,\n                                           FlutterTextureRegistry,\n                                           FlutterPluginRegistry> engine))callback;\n\n```\n\n2. FLBPlatform protocol removed flutterCanPop、accessibilityEnable and added entryForDart\n**Before change:**\n```objectivec\n@protocol FLBPlatform <NSObject>\n@optional\n//Whether to enable accessibility support. Default value is Yes.\n- (BOOL)accessibilityEnable;\n// flutter模块是否还可以pop\n- (void)flutterCanPop:(BOOL)canpop;\n@required\n- (void)openPage:(NSString *)name\n          params:(NSDictionary *)params\n        animated:(BOOL)animated\n      completion:(void (^)(BOOL finished))completion;\n- (void)closePage:(NSString *)uid\n         animated:(BOOL)animated\n           params:(NSDictionary *)params\n       completion:(void (^)(BOOL finished))completion;\n@end\n```\n**After change:**\n```objectivec\n@protocol FLB2Platform <NSObject>\n@optional\n- (NSString *)entryForDart;\n\n@required\n- (void)open:(NSString *)url\n   urlParams:(NSDictionary *)urlParams\n        exts:(NSDictionary *)exts\n      completion:(void (^)(BOOL finished))completion;\n- (void)close:(NSString *)uid\n       result:(NSDictionary *)result\n         exts:(NSDictionary *)exts\n   completion:(void (^)(BOOL finished))completion;\n@end\n```\n\n#### Android API changes\nAndroid mainly changed the IPlatform interface and its implementation.\nIt removed following APIs:\n```java\nActivity getMainActivity();\nboolean startActivity(Context context,String url,int requestCode);\nMap getSettings();\n```\n\nAnd added following APIs:\n\n```java\nvoid registerPlugins(PluginRegistry registry) 方法\nvoid openContainer(Context context,String url,Map<String,Object> urlParams,int requestCode,Map<String,Object> exts);\nvoid closeContainer(IContainerRecord record, Map<String,Object> result, Map<String,Object> exts);\nIFlutterEngineProvider engineProvider();\nint whenEngineStart();\n```\n"
        },
        {
          "name": "Frequently Asked Question.md",
          "type": "blob",
          "size": 7.6796875,
          "content": "### 1. 在FlutterBoost下如何管理Flutter页面的生命周期？原生的Flutter的AppLifecycleState事件会不一致，比如ViewAppear会导致app状态suspending或者paused。混合栈怎么处理？\n回答：在混合栈下，页面事件基于以下自定义的事件：\n```dart\nenum ContainerLifeCycle {\n  Init,\n  Appear,\n  WillDisappear,\n  Disappear,\n  Destroy,\n  Background,\n  Foreground\n}\n```\n对于页面事件重复，请参考下面的FAQ。\n### 2. 如何判断flutter的widget或者container是当前可见的？\n回答：有个api可以判断当前页面是否可见：\n```dart\nbool isTopContainer = FlutterBoost.BoostContainer.of(context).onstage\n```\n传入你widget的context，就能判断你的widget是否是可见的\n基于这个API，可以判断你的widget是否可见，从而避免接收一些重复的生命周期消息。参考这个issue:https://github.com/alibaba/flutter_boost/issues/498\n\n### 3. 您好，我想请教一下flutter_boost有关的问题：ABC三个都是flutter页面，从 A页面 -> B页面 -> C页面，当打开C页面时希望自动关掉B页面，当从C页面返回时直接返回A页面，可有什么方法？\n回答：你只需要操作Native层的UINavigationController里的vc数组就可以了。就如同平时你操作普通的UIViewController一样。因为FlutterBoost对Native层的FlutterViewController和Dart层的flutter page的生命周期管理是一致的，当FlutterViewController被销毁，其在dart层管理的flutter page也会自动被销毁。\n\n### 4. 在ios中voice over打开，demo在点击交互会crash;\n回答：无障碍模式下目前Flutter Engine有bug，已经提交issue和PR给flutter啦。请参考这个issue：https://github.com/alibaba/flutter_boost/issues/488及其分析。提交给flutter的PR见这里：https://github.com/flutter/engine/pull/14155\n\n### 5. 在ios模拟器下运行最新的flutter boost会闪退\n回答：如上面第4条所说的，最新的flutter engine在voice over下有bug，会导致crash。因为模拟器下flutter默认会将voice over模式打开，所以其实就是辅助模式，这回触发上面的bug：“在ios中voice over打开，demo在点击交互会crash”。\n可参考Engine的代码注释：\n```c++\n#if TARGET_OS_SIMULATOR\n  // There doesn't appear to be any way to determine whether the accessibility\n  // inspector is enabled on the simulator. We conservatively always turn on the\n  // accessibility bridge in the simulator, but never assistive technology.\n  platformView->SetSemanticsEnabled(true);\n  platformView->SetAccessibilityFeatures(flags);\n```\n\n### 6. 似乎官方已经提供了混合栈的功能，参考这里：https://flutter.dev/docs/development/add-to-app; FlutterBoost是否有存在的必要？\n回答：官方的解决方案仅仅是在native侧对FlutterViewController和Flutterengine进行解耦，如此可以一个FlutterEngine切换不同的FlutterViewController或者Activity进行渲染。但其并未解决Native和Flutter页面混合的问题，无法保证两侧的页面生命周期一致。即使是Flutter官方针对这个问题也是建议使用FlutterBoost。\n其差别主要有：\n\n|*|FlutterBoost2.0\t|Flutter官方方案\t|其他框架|\n|----|----|----|----|\n|是否支持混合页面之间随意跳转\t|Y\t|N\t|Y|\n|一致的页面生命周期管理(多Flutter页面)\t|Y\t|N\t|?|\n|是否支持页面间数据传递(回传等)\t|Y\t|N\t|N|\n|是否支持测滑手势\t|Y\t|Y\t|Y|\n|是否支持跨页的hero动画\t|Y\t|Y\t|N|\n|内存等资源占用是否可控\t|Y\t|Y\t|Y|\n|是否提供一致的页面route方案\t|Y\t|Y\t|N|\n|iOS和Android能力及接口是否一致\t|Y\t|N\t|N|\n|框架是否稳定，支持Flutter1.9\t|Y\t|N\t|?|\n|是否已经支持到View级别混合\t|N\t|N\t|N|\n\n同时FlutterBoost也提供了一次性创建混合工程的命令：flutterboot。代码参考：https://github.com/alibaba-flutter/flutter-boot\n\n### 7. 如果我需要通过FlutterViewController再弹出一个新的但frame比较小的FlutterViewController，应该怎么实现？\n回答：如果不加处理会遇到window大小变化的问题，但可以解决。具体可以参考这个issue：https://github.com/alibaba/flutter_boost/issues/435\n\n### 8. Flutter ViewController如何设置横屏\nVC设置横屏依赖于NavigationController或者rootVC。可以通过一下方式来设置：\n1. dart层的SystemChrome.setPreferredOrientations函数并非直接设置转向，而是设置页面优先使用的转向(preferred)\n2. app的转向控制除了info.plist的设置外，主要受UIWindow.rootViewController控制。大概过程是这样的：硬件检测到转向，就会调用UIWindow的转向函数，然后调用其rootViewController的shouldAutorotate判断是否需要自动转，然后取supportedInterfaceOrientations和info.plist中设置的交集来判断可否转\n3. 对于UIViewController中的转向，也只在rootviewcontroller中才有效\n\n举例如下，实现步骤可以这样：\n1. 重写NavigationController：\n```objc\n-(BOOL)shouldAutorotate\n{\n//    id currentViewController = self.topViewController;\n//\n//\n//     if ([currentViewController isKindOfClass:[FlutterViewController class]])\n//        return [currentViewController shouldAutorotate];\n\n    return YES;\n}\n\n-(UIInterfaceOrientationMask)supportedInterfaceOrientations\n{\n    id currentViewController = self.topViewController;\n    if ([currentViewController isKindOfClass:[FlutterViewController class]]){\n        NSLog(@\"[XDEBUG]----fvc supported:%ld\\n\",[currentViewController supportedInterfaceOrientations]);\n         return [currentViewController supportedInterfaceOrientations];\n    }\n    return UIInterfaceOrientationMaskAll;\n}\n```\n2. 改dart层：因为SystemChrome.setPreferredOrientations的设置是全局的，但混合栈是多页面，所以在main函数中设置，后面在新建一个FlutterViewController时会被冲掉。为了解决这个问题，需要在每个dart页面的build处都加上这语句来设置每个页面能支持哪些转向类型\n\n### 9. FlutterBoost for flutter1.12出现和surface相关的crash。可以参考这个issue：https://github.com/flutter/flutter/issues/52455\n可能flutter engine的bug引起\n\n### 10. FlutterBoost接入ohos端的一些关键性约定以及常见疑问解答（如仍有疑问，请仔细阅读example示例代码）\n1. FlutterBoostEntry的构造函数的第二个参数是一个routerOptions，boost内部并没有对其类型做强制要求（any），并允许业务方自定义routerOptions的实现，但是需要满足一些约定：\n```\n非Tab场景：务必保证uri: string、params: Record<string, Object>、uniqueId: string | null，这三个属性的存在，并且不允许对这三个属性的名称进行修改\nTab场景：务必保证uri: string、params: Record<string, Object>，这两个属性的存在，并且不允许对这两个属性的名称进行修改，不允许在此传递uniqueId\n```\n2. Log输出遇到‘Missing uri’或者‘Missing params’如何解决？\n答：按照第1条的约定，正确传递routerOptions。\n3. 如果需要使用boost的能力来实现页面返回传参的话，需要利用到NavPathStack的pushPath方法的onPop参数，对于数据需要返回给flutter页面的情况，请务必将popInfo.result的类型转换成Record<string, Object>，详情见example示例。\n4. FlutterBoostEntry的构造函数的第四个参数是一个onPop回调函数，它允许调用者以page为粒度来控制每个页面的退出逻辑。对于该回调函数的接管，需要满足以下约定：\n```\nTab场景：如果你不希望一个tab在dart侧调用pop的时候整个应用都退出，请务必接管该回调函数，并且在接管逻辑中不要对路由进行pop调用\n非Tab场景：你可以不接管该回调函数，但是如果选择接管，在接管逻辑中请务必对路由进行pop调用\n```"
        },
        {
          "name": "INTEGRATION.md",
          "type": "blob",
          "size": 9.6044921875,
          "content": "# Boost集成文档\n## dart测接入\n### 1. 初始化：\n\n```dart\nvoid main() {\n  runApp(MyApp());\n}\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\nclass _MyAppState extends State<MyApp> {\n   static Map<String, FlutterBoostRouteFactory>\n\t   routerMap = {\n    '/': (settings, uniqueId) {\n      return PageRouteBuilder<dynamic>(\n          settings: settings, pageBuilder: (_, __, ___)\n          => Container());\n    },\n    'embedded': (settings, uniqueId) {\n      return PageRouteBuilder<dynamic>(\n          settings: settings,\n          pageBuilder: (_, __, ___) =>\n          EmbeddedFirstRouteWidget());\n    },\n    'presentFlutterPage': (settings, uniqueId) {\n      return PageRouteBuilder<dynamic>(\n          settings: settings,\n          pageBuilder: (_, __, ___) =>\n          FlutterRouteWidget(\n                params: settings.arguments,\n                uniqueId: uniqueId,\n              ));\n    }};\n   Route<dynamic> routeFactory(RouteSettings settings, String uniqueId) {\n    FlutterBoostRouteFactory func =routerMap[settings.name];\n    if (func == null) {\n      return null;\n    }\n    return func(settings, uniqueId);\n  }\n\n  @override\n  void initState() {\n    super.initState();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return FlutterBoostApp(\n      routeFactory\n    );\n  }\n  ```\n### 2.Boost生命周期监听：\n```dart\nclass SimpleWidget extends StatefulWidget {\n  final Map params;\n  final String messages;\n  final String uniqueId;\n\n  const SimpleWidget(this.uniqueId, this.params, this.messages);\n\n  @override\n  _SimpleWidgetState createState() => _SimpleWidgetState();\n}\n\nclass _SimpleWidgetState extends State<SimpleWidget>\n    with PageVisibilityObserver {\n  static const String _kTag = 'xlog';\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    print('$_kTag#didChangeDependencies, ${widget.uniqueId}, $this');\n\n  }\n\n  @override\n  void initState() {\n    super.initState();\n   PageVisibilityBinding.instance.addObserver(this, ModalRoute.of(context));\n   print('$_kTag#initState, ${widget.uniqueId}, $this');\n  }\n\n  @override\n  void dispose() {\n    PageVisibilityBinding.instance.removeObserver(this);\n    print('$_kTag#dispose, ${widget.uniqueId}, $this');\n    super.dispose();\n  }\n\n  @override\n  void onForeground() {\n    print('$_kTag#onForeground, ${widget.uniqueId}, $this');\n  }\n\n  @override\n  void onBackground() {\n    print('$_kTag#onBackground, ${widget.uniqueId}, $this');\n  }\n\n  @override\n  void onAppear(ChangeReason reason) {\n    print('$_kTag#onAppear, ${widget.uniqueId}, $reason, $this');\n  }\n\n  void onDisappear(ChangeReason reason) {\n    print('$_kTag#onDisappear, ${widget.uniqueId}, $reason, $this');\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('tab_example'),\n      ),\n      body: SingleChildScrollView(\n          physics: BouncingScrollPhysics(),\n          child: Container(\n              child: Column(\n            crossAxisAlignment: CrossAxisAlignment.start,\n            children: <Widget>[\n              Container(\n                margin: const EdgeInsets.only(top: 80.0),\n                child: Text(\n                  widget.messages,\n                  style: TextStyle(fontSize: 28.0, color: Colors.blue),\n                ),\n                alignment: AlignmentDirectional.center,\n              ),\n              Container(\n                margin: const EdgeInsets.only(top: 32.0),\n                child: Text(\n                  widget.uniqueId,\n                  style: TextStyle(fontSize: 22.0, color: Colors.red),\n                ),\n                alignment: AlignmentDirectional.center,\n              ),\n              InkWell(\n                child: Container(\n                    padding: const EdgeInsets.all(8.0),\n                    margin: const EdgeInsets.all(30.0),\n                    color: Colors.yellow,\n                    child: Text(\n                      'open flutter page',\n                      style: TextStyle(fontSize: 22.0, color: Colors.black),\n                    )),\n                onTap: () => BoostNavigator.instance.push(\"flutterPage\",\n                    arguments: <String, String>{'from': widget.uniqueId}),\n              )\n              Container(\n                height: 300,\n                width: 200,\n                child: Text(\n                  '',\n                  style: TextStyle(fontSize: 22.0, color: Colors.black),\n                ),\n              )\n            ],\n          ))),\n    );\n  }\n}\n```\n### 页面跳转\n打开页面\n```java\n String result = await BoostNavigator.instance\n                        .push(\"flutterPage\", withContainer: true);\n```\n关闭页面\n```java\nBoostNavigator.instance.pop('I am result for popping.'),\n```\n## Android 测接入\n### 1.Application 初始化\n```java\npublic class MyApplication extends FlutterApplication {\n\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        FlutterBoost.instance().setup(this, new FlutterBoostDelegate() {\n\n            @Override\n            public void pushNativeRoute(String pageName, HashMap<String, String> arguments) {\n                Intent intent = new Intent(FlutterBoost.instance().currentActivity(), NativePageActivity.class);\n                FlutterBoost.instance().currentActivity().startActivity(intent);\n            }\n\n            @Override\n            public void pushFlutterRoute(String pageName, HashMap<String, String> arguments) {\n                Intent intent = new FlutterBoostActivity.CachedEngineIntentBuilder(FlutterBoostActivity.class, FlutterBoost.ENGINE_ID)\n                        .backgroundMode(FlutterActivityLaunchConfigs.BackgroundMode.opaque)\n                        .destroyEngineWithActivity(false)\n                        .url(pageName)\n                        .urlParams(arguments)\n                        .build(FlutterBoost.instance().currentActivity());\n                FlutterBoost.instance().currentActivity().startActivity(intent);\n            }\n\n        },engine->{\n            engine.getPlugins();\n        } );\n\n\n    }\n}\n\n```\n\n### 2.AndroidManifest.xml\nflutterEmbedding=2\n\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n          xmlns:tools=\"http://schemas.android.com/tools\"\n          package=\"com.idlefish.flutterboost.example\">\n\n    <application\n        android:name=\"com.idlefish.flutterboost.example.MyApplication\"\n        android:label=\"flutter_boost_example\"\n        android:icon=\"@mipmap/ic_launcher\">\n\n        <activity\n            android:name=\"com.idlefish.flutterboost.containers.FlutterBoostActivity\"\n            android:theme=\"@style/Theme.AppCompat\"\n            android:configChanges=\"orientation|keyboardHidden|keyboard|screenSize|locale|layoutDirection|fontScale|screenLayout|density\"\n            android:hardwareAccelerated=\"true\"\n            android:windowSoftInputMode=\"adjustResize\" >\n            <meta-data android:name=\"io.flutter.embedding.android.SplashScreenDrawable\" android:resource=\"@drawable/launch_background\"/>\n\n        </activity>\n        <meta-data android:name=\"flutterEmbedding\"\n                   android:value=\"2\">\n        </meta-data>\n    </application>\n</manifest>\n```\n### 3.native 打开关闭Flutter页面\n```java\nFlutterBoost.instance().open(\"flutterPage\",params);\n\n FlutterBoost.instance().close(\"uniqueId\");\n\n```\n## IOS测接入\n\n### 1.AppDelegate\n```objc\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n\n    MyFlutterBoostDelegate* delegate=[[MyFlutterBoostDelegate alloc ] init];\n\n    [[FlutterBoost instance] setup:application delegate:delegate callback:^(FlutterEngine *engine) {\n\n    } ];\n\n    return YES;\n}\n@end\n\n```\n\n### FlutterBoostDelegate\n```objc\n@interface MyFlutterBoostDelegate : NSObject<FlutterBoostDelegate>\n@property (nonatomic,strong) UINavigationController *navigationController;\n@end\n\n@implementation MyFlutterBoostDelegate\n\n- (void) pushNativeRoute:(FBCommonParams*) params{\n    BOOL animated = [params.arguments[@\"animated\"] boolValue];\n    BOOL present= [params.arguments[@\"present\"] boolValue];\n    UIViewControllerDemo *nvc = [[UIViewControllerDemo alloc] initWithNibName:@\"UIViewControllerDemo\" bundle:[NSBundle mainBundle]];\n    if(present){\n        [self.navigationController presentViewController:nvc animated:animated completion:^{\n        }];\n    }else{\n        [self.navigationController pushViewController:nvc animated:animated];\n    }\n}\n\n- (void) pushFlutterRoute:(FBCommonParams*)params {\n\n    FlutterEngine* engine =  [[FlutterBoost instance ] getEngine];\n    engine.viewController = nil;\n\n    FBFlutterViewContainer *vc = FBFlutterViewContainer.new ;\n\n    [vc setName:params.pageName params:params.arguments];\n\n    BOOL animated = [params.arguments[@\"animated\"] boolValue];\n    BOOL present= [params.arguments[@\"present\"] boolValue];\n    if(present){\n        [self.navigationController presentViewController:vc animated:animated completion:^{\n        }];\n    }else{\n        [self.navigationController pushViewController:vc animated:animated];\n\n    }\n}\n\n- (void) popRoute:(FBCommonParams*)params\n         result:(NSDictionary *)result{\n\n    FBFlutterViewContainer *vc = (id)self.navigationController.presentedViewController;\n\n    if([vc isKindOfClass:FBFlutterViewContainer.class] && [vc.uniqueIDString isEqual: params.uniqueId]){\n        [vc dismissViewControllerAnimated:YES completion:^{}];\n    }else{\n        [self.navigationController popViewControllerAnimated:YES];\n    }\n\n}\n\n@end\n\n```\n### native 打开flutter 页面\n\n```objc\n[[FlutterBoost instance] open:@\"flutterPage\" arguments:@{@\"animated\":@(YES)}  ];\n\n[[FlutterBoost instance] open:@\"secondStateful\" arguments:@{@\"present\":@(YES)}];\n```"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2019 Alibaba Group\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7041015625,
          "content": "<p align=\"center\">\n  <img src=\"flutter_boost.png\">\n   <b></b><br>\n  <a href=\"README_CN.md\">中文文档</a>\n  <a href=\"https://zhuanlan.zhihu.com/p/362662962\">中文介绍</a>\n</p>\n\n# Release Note\n\n## [ohos] New Platform\nflutter_boost has been fully adapted for the ohos platform. Please refer to item 10 of the following document to understand the related conventions before integrating：\n<a href=\"Frequently Asked Question.md\">FAQ</a>\n\n## 4.6.5\n\nPS：Null-safety is already supported.\n\n- Flutter SDK upgrades do not require Boost upgrades\n- Simplify the architecture\n- Simplify the interface\n- Unified design of double-end interface\n- Solved the Top Issue\n- Android does not need to distinguish between AndroidX and Support\n\n# FlutterBoost\nA next-generation Flutter-Native hybrid solution. FlutterBoost is a Flutter plugin which enables hybrid integration of Flutter for your existing native apps with minimum efforts. The philosophy of FlutterBoost is to use Flutter as easy as using a WebView. Managing Native pages and Flutter pages at the same time is non-trivial in an existing App. FlutterBoost takes care of page resolution for you. The only thing you need to care about is the name of the page(usually could be an URL). \n<a name=\"bf647454\"></a>\n\n# Prerequisites\n\n1. Before proceeding, you need to integrate Flutter into your existing project.\n2. The Flutter SDK version supported by Boost 3.0 is >= 1.22\n\n\n# Getting Started\n\n\n## Add a dependency in you Flutter project.\n\nOpen you pubspec.yaml and add the following line to dependencies:\n\n``` yaml\nflutter_boost:\n    git:\n        url: 'https://github.com/alibaba/flutter_boost.git'\n        ref: '4.6.5'\n```\n\n# Version Notes\n- For Flutter SDK 3.0 and above, use `4.0.1+`.\n- For Flutter SDK below 3.0, use `v3.0-release.2` or earlier versions.\n- The null safety versions supporting Flutter SDK 2.5.x are `3.1.0+`.\n- The versions supporting Flutter SDK 3.16.x are `5.0.0+`.\n- The versions supporting HarmonyOS are `[4.5.0, 5.0.0)`.\n\n\n# Usage\n- [Detailed Integration Steps](https://github.com/alibaba/flutter_boost/blob/master/docs/install.md)\n- [Basic Routing API](https://github.com/alibaba/flutter_boost/blob/master/docs/routeAPI.md)\n- [API for Page Lifecycle](https://github.com/alibaba/flutter_boost/blob/master/docs/lifecycle.md)\n- [Custom API for Sending Cross-Platform Events](https://github.com/alibaba/flutter_boost/blob/master/docs/event.md)\n\n# Contribution\n- [How to File an Issue to Us](https://github.com/alibaba/flutter_boost/blob/master/docs/issue.md)\n- [How to Submit a PR to Us](https://github.com/alibaba/flutter_boost/blob/master/docs/pr.md)\n\n# FAQ\nplease read this document:\n<a href=\"Frequently Asked Question.md\">FAQ</a>\n\n\n# License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## About Us\nAlibaba-Xianyu Tech is one of the earliest and largest teams running Flutter on a large scale online in China.\n\nIn our official WeChat account, we have carefully selected exclusive Flutter content for you, both comprehensive and in-depth.\n\nThe content includes tutorials and open-source information on Flutter integration, large-scale applications, engine exploration, engineering systems, and innovative technologies.\n\n**Architects / Backend Engineers / Client-side Engineers / Frontend Developers / Algorithm Engineers / Quality Engineers - submit your resumes through our WeChat account, there is no limit to the number of positions.**\n\nWe welcome you to join Xianyu and become a curious, happy, and influential programmer. To send your resume, please email: `tino.wjf@alibaba-inc.com`\n\nSubscribe at:\n\n<img src=\"https://img.alicdn.com/tfs/TB17Ki5XubviK0jSZFNXXaApXXa-656-656.png\" width=\"328px\" height=\"328px\">\n\n[For English](https://twitter.com/xianyutech \"For English\")\n"
        },
        {
          "name": "README_CN.md",
          "type": "blob",
          "size": 3.0615234375,
          "content": "<p align=\"center\">\n  <img src=\"flutter_boost.png\">\n</p>\n\n\n# Release Note\n\n## 鸿蒙新平台\nflutter_boost已完全适配ohos鸿蒙端，接入之前请阅读以下文档第10条了解相关约定：\n<a href=\"Frequently Asked Question.md\">FAQ</a>\n\n## 4.6.5\n\nPS：主线已支持空安全(null-safety)\n\n\n- 1.flutter sdk升级不需要升级boost\n- 2.简化架构\n- 3.简化接口\n- 4.双端接口设计统一\n- 5.解决了top issue\n- 6.android不需要区分androidx 和support\n\n# FlutterBoost\n\n新一代Flutter-Native混合解决方案。 FlutterBoost是一个Flutter插件，它可以轻松地为现有原生应用程序提供Flutter混合集成方案。FlutterBoost的理念是将Flutter像Webview那样来使用。在现有应用程序中同时管理Native页面和Flutter页面并非易事。 FlutterBoost帮你处理页面的映射和跳转，你只需关心页面的名字和参数即可（通常可以是URL）。\n\n\n# 前置条件\n\n1.在继续之前，您需要将Flutter集成到你现有的项目中。\n2.boost3.0版本支持的flutter sdk 版本为 >= 1.22\n\n## 将FlutterBoost添加到你的Flutter工程依赖中\n\n打开你的工程的pubspec.yaml ，增加以下依赖\n\n```json\nflutter_boost:\n    git:\n        url: 'https://github.com/alibaba/flutter_boost.git'\n        ref: '4.6.5'\n```\n\n# 版本说明\n- Flutter SDK 3.0.0及以上，使用`4.0.1+`\n- Flutter SDK 3.0.0以下，使用`v3.0-release.2`或以下版本\n- 支持Flutter SDK 2.5.x的空安全版本是`3.1.0+`\n- 支持Flutter SDK 3.16.0+的版本是`5.0.0+`\n- 支持**鸿蒙**的版本是`[4.5.0, 5.0.0)`\n\n\n# 使用文档\n\n- [集成详细步骤](https://github.com/alibaba/flutter_boost/blob/master/docs/install.md)\n- [基本的路由API](https://github.com/alibaba/flutter_boost/blob/master/docs/routeAPI.md)\n- [页面生命周期监测相关API](https://github.com/alibaba/flutter_boost/blob/master/docs/lifecycle.md)\n- [自定义发送跨端事件API](https://github.com/alibaba/flutter_boost/blob/master/docs/event.md)\n\n# 建设文档\n- [如何向我们提issue](https://github.com/alibaba/flutter_boost/blob/master/docs/issue.md)\n- [如何向我们提PR](https://github.com/alibaba/flutter_boost/blob/master/docs/pr.md)\n\n\n# FAQ\n\n请阅读这篇文章:\n<a href=\"Frequently Asked Question.md\">FAQ</a>\n\n\n# 许可证\n该项目根据MIT许可证授权 - 有关详细信息，请参阅[LICENSE](LICENSE)文件\n<a name=\"Acknowledgments\"> </a>\n\n\n\n## 关于我们\n阿里巴巴-闲鱼技术是国内最早也是最大规模线上运行Flutter的团队。\n\n我们在公众号中为你精选了Flutter独家干货，全面而深入。\n\n内容包括：Flutter的接入、规模化应用、引擎探秘、工程体系、创新技术等教程和开源信息。\n\n**架构／服务端／客户端／前端／算法／质量工程师 在公众号中投递简历，名额不限哦**\n\n欢迎来闲鱼做一个好奇、幸福、有影响力的程序员，简历投递：tino.wjf@alibaba-inc.com\n\n订阅地址\n\n<img src=\"https://img.alicdn.com/tfs/TB17Ki5XubviK0jSZFNXXaApXXa-656-656.png\" width=\"328px\" height=\"328px\">\n\n[For English](https://twitter.com/xianyutech \"For English\")\n"
        },
        {
          "name": "analysis_options.yaml",
          "type": "blob",
          "size": 0.185546875,
          "content": "include: package:flutter_lints/flutter.yaml\n\nanalyzer:\n  exclude:\n    - \"example_new_for_ios/**\"\n    - \"test/**\"\n    - \"lib/messages.dart\" # Autogenerated from Pigeon, do not edit directly.\n"
        },
        {
          "name": "android",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "example_new_for_ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "flutter_boost.iml",
          "type": "blob",
          "size": 1.0166015625,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$\">\n      <sourceFolder url=\"file://$MODULE_DIR$/lib\" isTestSource=\"false\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.idea\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/build\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.dart_tool\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/.pub\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/build\" />\n      <excludeFolder url=\"file://$MODULE_DIR$/example/ios/Flutter/flutter_assets/packages\" />\n    </content>\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Dart SDK\" level=\"project\" />\n    <orderEntry type=\"library\" name=\"Flutter Plugins\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "flutter_boost.png",
          "type": "blob",
          "size": 25.4638671875,
          "content": null
        },
        {
          "name": "flutter_boost_android.iml",
          "type": "blob",
          "size": 1.537109375,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"JAVA_MODULE\" version=\"4\">\n  <component name=\"FacetManager\">\n    <facet type=\"android\" name=\"Android\">\n      <configuration>\n        <option name=\"ALLOW_USER_CONFIGURATION\" value=\"false\" />\n        <option name=\"GEN_FOLDER_RELATIVE_PATH_APT\" value=\"/android/gen\" />\n        <option name=\"GEN_FOLDER_RELATIVE_PATH_AIDL\" value=\"/android/gen\" />\n        <option name=\"MANIFEST_FILE_RELATIVE_PATH\" value=\"/android/AndroidManifest.xml\" />\n        <option name=\"RES_FOLDER_RELATIVE_PATH\" value=\"/android/res\" />\n        <option name=\"ASSETS_FOLDER_RELATIVE_PATH\" value=\"/android/assets\" />\n        <option name=\"LIBS_FOLDER_RELATIVE_PATH\" value=\"/android/libs\" />\n        <option name=\"PROGUARD_LOGS_FOLDER_RELATIVE_PATH\" value=\"/android/proguard_logs\" />\n      </configuration>\n    </facet>\n  </component>\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\n    <exclude-output />\n    <content url=\"file://$MODULE_DIR$/android\">\n      <sourceFolder url=\"file://$MODULE_DIR$/android/src/main/java\" isTestSource=\"false\" />\n      <sourceFolder url=\"file://$MODULE_DIR$/android/gen\" isTestSource=\"false\" generated=\"true\" />\n    </content>\n    <content url=\"file://$MODULE_DIR$/example/android\">\n      <sourceFolder url=\"file://$MODULE_DIR$/example/android/app/src/main/java\" isTestSource=\"false\" />\n    </content>\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n    <orderEntry type=\"library\" name=\"Flutter for Android\" level=\"project\" />\n  </component>\n</module>"
        },
        {
          "name": "ios",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "ohos",
          "type": "tree",
          "content": null
        },
        {
          "name": "pigeon",
          "type": "tree",
          "content": null
        },
        {
          "name": "pubspec.yaml",
          "type": "blob",
          "size": 0.7568359375,
          "content": "name: flutter_boost\ndescription: A next-generation Flutter-Native hybrid solution. FlutterBoost is a Flutter plugin which enables hybrid integration of Flutter for your existing native apps with minimum efforts.\nversion: 4.6.5\n\nhomepage: https://github.com/alibaba/flutter_boost\n\nenvironment:\n  sdk: '>=2.12.0 <4.0.0'\n  flutter: \">=3.0.0\"\n\ndependencies:\n  flutter:\n    sdk: flutter\n  collection: ^1.16.0\n\ndev_dependencies:\n  flutter_lints: ^2.0.1\n  flutter_test:\n    sdk: flutter\n  pigeon: ^3.2.9\n\nflutter:\n  plugin:\n    platforms:\n      android:\n        package: com.idlefish.flutterboost\n        pluginClass: FlutterBoostPlugin\n      ios:\n        pluginClass: FlutterBoostPlugin\n      ohos:\n        package: com.idlefish.flutterboost\n        pluginClass: FlutterBoostPlugin"
        },
        {
          "name": "run_pigeon.sh",
          "type": "blob",
          "size": 0.2294921875,
          "content": "#!/bin/sh\n# Copyright (c) 2019 Alibaba Group. All rights reserved.\n# Use of this source code is governed by a MIT license that can be\n# found in the LICENSE file.\n\nflutter pub get && flutter pub run pigeon --input pigeon/messages.dart\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}