{
  "metadata": {
    "timestamp": 1736711271019,
    "page": 4,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjU=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WindowsAddict/IDM-Activation-Script",
      "stars": 6525,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".Rhistory",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0732421875,
          "content": "# IAS.cmd export-ignore\r\n# LICENSE export-ignore\r\n# README.md export-ignore"
        },
        {
          "name": "IAS.cmd",
          "type": "blob",
          "size": 31.359375,
          "content": "@set iasver=1.2\r\n@setlocal DisableDelayedExpansion\r\n@echo off\r\n\r\n\r\n\r\n::============================================================================\r\n::\r\n::   IDM Activation Script (IAS)\r\n::\r\n::   Homepages: https://github.com/WindowsAddict/IDM-Activation-Script\r\n::              https://massgrave.dev/idm-activation-script\r\n::\r\n::       Email: windowsaddict@protonmail.com\r\n::\r\n::============================================================================\r\n\r\n\r\n\r\n::  To activate, run the script with \"/act\" parameter or change 0 to 1 in below line\r\nset _activate=0\r\n\r\n::  To Freeze the 30 days trial period, run the script with \"/frz\" parameter or change 0 to 1 in below line\r\nset _freeze=0\r\n\r\n::  To reset the activation and trial, run the script with \"/res\" parameter or change 0 to 1 in below line\r\nset _reset=0\r\n\r\n::  If value is changed in above lines or parameter is used then script will run in unattended mode\r\n\r\n::========================================================================================================================================\r\n\r\n::  Set Path variable, it helps if it is misconfigured in the system\r\n\r\nset \"PATH=%SystemRoot%\\System32;%SystemRoot%\\System32\\wbem;%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\\"\r\nif exist \"%SystemRoot%\\Sysnative\\reg.exe\" (\r\nset \"PATH=%SystemRoot%\\Sysnative;%SystemRoot%\\Sysnative\\wbem;%SystemRoot%\\Sysnative\\WindowsPowerShell\\v1.0\\;%PATH%\"\r\n)\r\n\r\n:: Re-launch the script with x64 process if it was initiated by x86 process on x64 bit Windows\r\n:: or with ARM64 process if it was initiated by x86/ARM32 process on ARM64 Windows\r\n\r\nset \"_cmdf=%~f0\"\r\nfor %%# in (%*) do (\r\nif /i \"%%#\"==\"r1\" set r1=1\r\nif /i \"%%#\"==\"r2\" set r2=1\r\n)\r\n\r\nif exist %SystemRoot%\\Sysnative\\cmd.exe if not defined r1 (\r\nsetlocal EnableDelayedExpansion\r\nstart %SystemRoot%\\Sysnative\\cmd.exe /c \"\"!_cmdf!\" %* r1\"\r\nexit /b\r\n)\r\n\r\n:: Re-launch the script with ARM32 process if it was initiated by x64 process on ARM64 Windows\r\n\r\nif exist %SystemRoot%\\SysArm32\\cmd.exe if %PROCESSOR_ARCHITECTURE%==AMD64 if not defined r2 (\r\nsetlocal EnableDelayedExpansion\r\nstart %SystemRoot%\\SysArm32\\cmd.exe /c \"\"!_cmdf!\" %* r2\"\r\nexit /b\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\nset \"blank=\"\r\nset \"mas=ht%blank%tps%blank%://mass%blank%grave.dev/\"\r\n\r\n::  Check if Null service is working, it's important for the batch script\r\n\r\nsc query Null | find /i \"RUNNING\"\r\nif %errorlevel% NEQ 0 (\r\necho:\r\necho Null service is not running, script may crash...\r\necho:\r\necho:\r\necho Help - %mas%idm-activation-script.html#Troubleshoot\r\necho:\r\necho:\r\nping 127.0.0.1 -n 10\r\n)\r\ncls\r\n\r\n::  Check LF line ending\r\n\r\npushd \"%~dp0\"\r\n>nul findstr /v \"$\" \"%~nx0\" && (\r\necho:\r\necho Error: Script either has LF line ending issue or an empty line at the end of the script is missing.\r\necho:\r\nping 127.0.0.1 -n 6 >nul\r\npopd\r\nexit /b\r\n)\r\npopd\r\n\r\n::========================================================================================================================================\r\n\r\ncls\r\ncolor 07\r\ntitle  IDM Activation Script %iasver%\r\n\r\nset _args=\r\nset _elev=\r\nset _unattended=0\r\n\r\nset _args=%*\r\nif defined _args set _args=%_args:\"=%\r\nif defined _args (\r\nfor %%A in (%_args%) do (\r\nif /i \"%%A\"==\"-el\"  set _elev=1\r\nif /i \"%%A\"==\"/res\" set _reset=1\r\nif /i \"%%A\"==\"/frz\" set _freeze=1\r\nif /i \"%%A\"==\"/act\" set _activate=1\r\n)\r\n)\r\n\r\nfor %%A in (%_activate% %_freeze% %_reset%) do (if \"%%A\"==\"1\" set _unattended=1)\r\n\r\n::========================================================================================================================================\r\n\r\nset \"nul1=1>nul\"\r\nset \"nul2=2>nul\"\r\nset \"nul6=2^>nul\"\r\nset \"nul=>nul 2>&1\"\r\n\r\nset psc=powershell.exe\r\nset winbuild=1\r\nfor /f \"tokens=6 delims=[]. \" %%G in ('ver') do set winbuild=%%G\r\n\r\nset _NCS=1\r\nif %winbuild% LSS 10586 set _NCS=0\r\nif %winbuild% GEQ 10586 reg query \"HKCU\\Console\" /v ForceV2 %nul2% | find /i \"0x0\" %nul1% && (set _NCS=0)\r\n\r\nif %_NCS% EQU 1 (\r\nfor /F %%a in ('echo prompt $E ^| cmd') do set \"esc=%%a\"\r\nset     \"Red=\"41;97m\"\"\r\nset    \"Gray=\"100;97m\"\"\r\nset   \"Green=\"42;97m\"\"\r\nset    \"Blue=\"44;97m\"\"\r\nset  \"_White=\"40;37m\"\"\r\nset  \"_Green=\"40;92m\"\"\r\nset \"_Yellow=\"40;93m\"\"\r\n) else (\r\nset     \"Red=\"Red\" \"white\"\"\r\nset    \"Gray=\"Darkgray\" \"white\"\"\r\nset   \"Green=\"DarkGreen\" \"white\"\"\r\nset    \"Blue=\"Blue\" \"white\"\"\r\nset  \"_White=\"Black\" \"Gray\"\"\r\nset  \"_Green=\"Black\" \"Green\"\"\r\nset \"_Yellow=\"Black\" \"Yellow\"\"\r\n)\r\n\r\nset \"nceline=echo: &echo ==== ERROR ==== &echo:\"\r\nset \"eline=echo: &call :_color %Red% \"==== ERROR ====\" &echo:\"\r\nset \"line=___________________________________________________________________________________________________\"\r\nset \"_buf={$W=$Host.UI.RawUI.WindowSize;$B=$Host.UI.RawUI.BufferSize;$W.Height=34;$B.Height=300;$Host.UI.RawUI.WindowSize=$W;$Host.UI.RawUI.BufferSize=$B;}\"\r\n\r\n::========================================================================================================================================\r\n\r\nif %winbuild% LSS 7600 (\r\n%nceline%\r\necho Unsupported OS version Detected [%winbuild%].\r\necho Project is supported only for Windows 7/8/8.1/10/11 and their Server equivalent.\r\ngoto done2\r\n)\r\n\r\nfor %%# in (powershell.exe) do @if \"%%~$PATH:#\"==\"\" (\r\n%nceline%\r\necho Unable to find powershell.exe in the system.\r\ngoto done2\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n::  Fix for the special characters limitation in path name\r\n\r\nset \"_work=%~dp0\"\r\nif \"%_work:~-1%\"==\"\\\" set \"_work=%_work:~0,-1%\"\r\n\r\nset \"_batf=%~f0\"\r\nset \"_batp=%_batf:'=''%\"\r\n\r\nset _PSarg=\"\"\"%~f0\"\"\" -el %_args%\r\nset _PSarg=%_PSarg:'=''%\r\n\r\nset \"_appdata=%appdata%\"\r\nset \"_ttemp=%userprofile%\\AppData\\Local\\Temp\"\r\n\r\nsetlocal EnableDelayedExpansion\r\n\r\n::========================================================================================================================================\r\n\r\necho \"!_batf!\" | find /i \"!_ttemp!\" %nul1% && (\r\nif /i not \"!_work!\"==\"!_ttemp!\" (\r\n%eline%\r\necho Script is launched from the temp folder,\r\necho Most likely you are running the script directly from the archive file.\r\necho:\r\necho Extract the archive file and launch the script from the extracted folder.\r\ngoto done2\r\n)\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n::  Check PowerShell\r\n\r\nREM :PowerShellTest: $ExecutionContext.SessionState.LanguageMode :PowerShellTest:\r\n\r\n%psc% \"$f=[io.file]::ReadAllText('!_batp!') -split ':PowerShellTest:\\s*';iex ($f[1])\" | find /i \"FullLanguage\" %nul1% || (\r\n%eline%\r\n%psc% $ExecutionContext.SessionState.LanguageMode\r\necho:\r\necho PowerShell is not working. Aborting...\r\necho If you have applied restrictions on Powershell then undo those changes.\r\necho:\r\necho Check this page for help. %mas%idm-activation-script.html#Troubleshoot\r\ngoto done2\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n::  Elevate script as admin and pass arguments and preventing loop\r\n\r\n%nul1% fltmc || (\r\nif not defined _elev %psc% \"start cmd.exe -arg '/c \\\"!_PSarg!\\\"' -verb runas\" && exit /b\r\n%eline%\r\necho This script requires admin privileges.\r\necho To do so, right click on this script and select 'Run as administrator'.\r\ngoto done2\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n::  Disable QuickEdit and launch from conhost.exe to avoid Terminal app\r\n\r\nset quedit=\r\nset terminal=\r\n\r\nif %_unattended%==1 (\r\nset quedit=1\r\nset terminal=1\r\n)\r\n\r\nfor %%# in (%_args%) do (if /i \"%%#\"==\"-qedit\" set quedit=1)\r\n\r\nif %winbuild% LSS 10586 (\r\nreg query HKCU\\Console /v QuickEdit %nul2% | find /i \"0x0\" %nul1% && set quedit=1\r\n)\r\n\r\nif %winbuild% GEQ 17763 (\r\nset \"launchcmd=start conhost.exe %psc%\"\r\n) else (\r\nset \"launchcmd=%psc%\"\r\n)\r\n\r\nset \"d1=$t=[AppDomain]::CurrentDomain.DefineDynamicAssembly(4, 1).DefineDynamicModule(2, $False).DefineType(0);\"\r\nset \"d2=$t.DefinePInvokeMethod('GetStdHandle', 'kernel32.dll', 22, 1, [IntPtr], @([Int32]), 1, 3).SetImplementationFlags(128);\"\r\nset \"d3=$t.DefinePInvokeMethod('SetConsoleMode', 'kernel32.dll', 22, 1, [Boolean], @([IntPtr], [Int32]), 1, 3).SetImplementationFlags(128);\"\r\nset \"d4=$k=$t.CreateType(); $b=$k::SetConsoleMode($k::GetStdHandle(-10), 0x0080);\"\r\n\r\nif defined quedit goto :skipQE\r\n%launchcmd% \"%d1% %d2% %d3% %d4% & cmd.exe '/c' '!_PSarg! -qedit'\" &exit /b\r\n:skipQE\r\n\r\n::========================================================================================================================================\r\n\r\n::  Check for updates\r\n\r\nset -=\r\nset old=\r\n\r\nfor /f \"delims=[] tokens=2\" %%# in ('ping -4 -n 1 iasupdatecheck.mass%-%grave.dev') do (\r\nif not [%%#]==[] (echo \"%%#\" | find \"127.69\" %nul1% && (echo \"%%#\" | find \"127.69.%iasver%\" %nul1% || set old=1))\r\n)\r\n\r\nif defined old (\r\necho ________________________________________________\r\n%eline%\r\necho You are running outdated version IAS %iasver%\r\necho ________________________________________________\r\necho:\r\nif not %_unattended%==1 (\r\necho [1] Get Latest IAS\r\necho [0] Continue Anyway\r\necho:\r\ncall :_color %_Green% \"Enter a menu option in the Keyboard [1,0] :\"\r\nchoice /C:10 /N\r\nif !errorlevel!==2 rem\r\nif !errorlevel!==1 (start https://github.com/WindowsAddict/IDM-Activation-Script & start %mas%/idm-activation-script & exit /b)\r\n)\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\ncls\r\ntitle  IDM Activation Script %iasver%\r\n\r\necho:\r\necho Initializing...\r\n\r\n::  Check WMI\r\n\r\n%psc% \"Get-WmiObject -Class Win32_ComputerSystem | Select-Object -Property CreationClassName\" %nul2% | find /i \"computersystem\" %nul1% || (\r\n%eline%\r\n%psc% \"Get-WmiObject -Class Win32_ComputerSystem | Select-Object -Property CreationClassName\"\r\necho:\r\necho WMI is not working. Aborting...\r\necho:\r\necho Check this page for help. %mas%idm-activation-script.html#Troubleshoot\r\ngoto done2\r\n)\r\n\r\n::  Check user account SID\r\n\r\nset _sid=\r\nfor /f \"delims=\" %%a in ('%psc% \"([System.Security.Principal.NTAccount](Get-WmiObject -Class Win32_ComputerSystem).UserName).Translate([System.Security.Principal.SecurityIdentifier]).Value\" %nul6%') do (set _sid=%%a)\r\n \r\nreg query HKU\\%_sid%\\Software %nul% || (\r\nfor /f \"delims=\" %%a in ('%psc% \"$explorerProc = Get-Process -Name explorer | Where-Object {$_.SessionId -eq (Get-Process -Id $pid).SessionId} | Select-Object -First 1; $sid = (gwmi -Query ('Select * From Win32_Process Where ProcessID=' + $explorerProc.Id)).GetOwnerSid().Sid; $sid\" %nul6%') do (set _sid=%%a)\r\n)\r\n\r\nreg query HKU\\%_sid%\\Software %nul% || (\r\n%eline%\r\necho:\r\necho [%_sid%]\r\necho User Account SID not found. Aborting...\r\necho:\r\necho Check this page for help. %mas%idm-activation-script.html#Troubleshoot\r\ngoto done2\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n::  Check if the current user SID is syncing with the HKCU entries\r\n\r\n%nul% reg delete HKCU\\IAS_TEST /f\r\n%nul% reg delete HKU\\%_sid%\\IAS_TEST /f\r\n\r\nset HKCUsync=$null\r\n%nul% reg add HKCU\\IAS_TEST\r\n%nul% reg query HKU\\%_sid%\\IAS_TEST && (\r\nset HKCUsync=1\r\n)\r\n\r\n%nul% reg delete HKCU\\IAS_TEST /f\r\n%nul% reg delete HKU\\%_sid%\\IAS_TEST /f\r\n\r\n::  Below code also works for ARM64 Windows 10 (including x64 bit emulation)\r\n\r\nfor /f \"skip=2 tokens=2*\" %%a in ('reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v PROCESSOR_ARCHITECTURE') do set arch=%%b\r\nif /i not \"%arch%\"==\"x86\" set arch=x64\r\n\r\nif \"%arch%\"==\"x86\" (\r\nset \"CLSID=HKCU\\Software\\Classes\\CLSID\"\r\nset \"CLSID2=HKU\\%_sid%\\Software\\Classes\\CLSID\"\r\nset \"HKLM=HKLM\\Software\\Internet Download Manager\"\r\n) else (\r\nset \"CLSID=HKCU\\Software\\Classes\\Wow6432Node\\CLSID\"\r\nset \"CLSID2=HKU\\%_sid%\\Software\\Classes\\Wow6432Node\\CLSID\"\r\nset \"HKLM=HKLM\\SOFTWARE\\Wow6432Node\\Internet Download Manager\"\r\n)\r\n\r\nfor /f \"tokens=2*\" %%a in ('reg query \"HKU\\%_sid%\\Software\\DownloadManager\" /v ExePath %nul6%') do call set \"IDMan=%%b\"\r\n\r\nif not exist \"%IDMan%\" (\r\nif %arch%==x64 set \"IDMan=%ProgramFiles(x86)%\\Internet Download Manager\\IDMan.exe\"\r\nif %arch%==x86 set \"IDMan=%ProgramFiles%\\Internet Download Manager\\IDMan.exe\"\r\n)\r\n\r\nif not exist %SystemRoot%\\Temp md %SystemRoot%\\Temp\r\nset \"idmcheck=tasklist /fi \"imagename eq idman.exe\" | findstr /i \"idman.exe\" %nul1%\"\r\n\r\n::  Check CLSID registry access\r\n\r\n%nul% reg add %CLSID2%\\IAS_TEST\r\n%nul% reg query %CLSID2%\\IAS_TEST || (\r\n%eline%\r\necho Failed to write in %CLSID2%\r\necho:\r\necho Check this page for help. %mas%idm-activation-script.html#Troubleshoot\r\ngoto done2\r\n)\r\n\r\n%nul% reg delete %CLSID2%\\IAS_TEST /f\r\n\r\n::========================================================================================================================================\r\n\r\nif %_reset%==1 goto :_reset\r\nif %_activate%==1 (set frz=0&goto :_activate)\r\nif %_freeze%==1 (set frz=1&goto :_activate)\r\n\r\n:MainMenu\r\n\r\ncls\r\ntitle  IDM Activation Script %iasver%\r\nif not defined terminal mode 75, 28\r\n\r\necho:\r\necho:\r\necho:\r\necho:\r\necho:\r\necho:                This script is NOT working with latest IDM.     \r\necho:            ___________________________________________________ \r\necho:                                                               \r\necho:               [1] Freeze Trial\r\necho:               [2] Activate\r\necho:               [3] Reset Activation / Trial\r\necho:               _____________________________________________   \r\necho:                                                               \r\necho:               [4] Download IDM\r\necho:               [5] Help\r\necho:               [0] Exit\r\necho:            ___________________________________________________\r\necho:         \r\ncall :_color2 %_White% \"             \" %_Green% \"Enter a menu option in the Keyboard [1,2,3,4,5,0]\"\r\nchoice /C:123450 /N\r\nset _erl=%errorlevel%\r\n\r\nif %_erl%==6 exit /b\r\nif %_erl%==5 start https://github.com/WindowsAddict/IDM-Activation-Script & start https://massgrave.dev/idm-activation-script & goto MainMenu\r\nif %_erl%==4 start https://www.internetdownloadmanager.com/download.html & goto MainMenu\r\nif %_erl%==3 goto _reset\r\nif %_erl%==2 (set frz=0&goto :_activate)\r\nif %_erl%==1 (set frz=1&goto :_activate)\r\ngoto :MainMenu\r\n\r\n::========================================================================================================================================\r\n\r\n:_reset\r\n\r\ncls\r\nif not %HKCUsync%==1 (\r\nif not defined terminal mode 153, 35\r\n) else (\r\nif not defined terminal mode 113, 35\r\n)\r\nif not defined terminal %psc% \"&%_buf%\" %nul%\r\n\r\necho:\r\n%idmcheck% && taskkill /f /im idman.exe\r\n\r\nset _time=\r\nfor /f %%a in ('%psc% \"(Get-Date).ToString('yyyyMMdd-HHmmssfff')\"') do set _time=%%a\r\n\r\necho:\r\necho Creating backup of CLSID registry keys in %SystemRoot%\\Temp\r\n\r\nreg export %CLSID% \"%SystemRoot%\\Temp\\_Backup_HKCU_CLSID_%_time%.reg\"\r\nif not %HKCUsync%==1 reg export %CLSID2% \"%SystemRoot%\\Temp\\_Backup_HKU-%_sid%_CLSID_%_time%.reg\"\r\n\r\ncall :delete_queue\r\n%psc% \"$sid = '%_sid%'; $HKCUsync = %HKCUsync%; $lockKey = $null; $deleteKey = 1; $f=[io.file]::ReadAllText('!_batp!') -split ':regscan\\:.*';iex ($f[1])\"\r\n\r\ncall :add_key\r\n\r\necho:\r\necho %line%\r\necho:\r\ncall :_color %Green% \"The IDM reset process has been completed.\"\r\n\r\ngoto done\r\n\r\n:delete_queue\r\n\r\necho:\r\necho Deleting IDM registry keys...\r\necho:\r\n\r\nfor %%# in (\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"FName\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"LName\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"Email\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"Serial\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"scansk\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"tvfrdt\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"radxcnt\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"LstCheck\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"ptrk_scdt\"\"\r\n\"\"HKCU\\Software\\DownloadManager\" \"/v\" \"LastCheckQU\"\"\r\n\"%HKLM%\"\r\n) do for /f \"tokens=* delims=\" %%A in (\"%%~#\") do (\r\nset \"reg=\"%%~A\"\" &reg query !reg! %nul% && call :del\r\n)\r\n\r\nif not %HKCUsync%==1 for %%# in (\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"FName\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"LName\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"Email\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"Serial\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"scansk\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"tvfrdt\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"radxcnt\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"LstCheck\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"ptrk_scdt\"\"\r\n\"\"HKU\\%_sid%\\Software\\DownloadManager\" \"/v\" \"LastCheckQU\"\"\r\n) do for /f \"tokens=* delims=\" %%A in (\"%%~#\") do (\r\nset \"reg=\"%%~A\"\" &reg query !reg! %nul% && call :del\r\n)\r\n\r\nexit /b\r\n\r\n:del\r\n\r\nreg delete %reg% /f %nul%\r\n\r\nif \"%errorlevel%\"==\"0\" (\r\nset \"reg=%reg:\"=%\"\r\necho Deleted - !reg!\r\n) else (\r\nset \"reg=%reg:\"=%\"\r\ncall :_color2 %Red% \"Failed - !reg!\"\r\n)\r\n\r\nexit /b\r\n\r\n::========================================================================================================================================\r\n\r\n:_activate\r\n\r\ncls\r\nif not %HKCUsync%==1 (\r\nif not defined terminal mode 153, 35\r\n) else (\r\nif not defined terminal mode 113, 35\r\n)\r\nif not defined terminal %psc% \"&%_buf%\" %nul%\r\n\r\nif %frz%==0 if %_unattended%==0 (\r\necho:\r\necho %line%\r\necho:\r\necho      Activation is not working for some users and IDM may show fake serial nag screen.\r\necho:\r\ncall :_color2 %_White% \"     \" %_Green% \"Its recommended to use Freeze Trial option instead.\"\r\necho %line%\r\necho:\r\nchoice /C:19 /N /M \">    [1] Go Back [9] Activate : \"\r\nif !errorlevel!==1 goto :MainMenu\r\ncls\r\n)\r\n\r\necho:\r\nif not exist \"%IDMan%\" (\r\ncall :_color %Red% \"IDM [Internet Download Manager] is not Installed.\"\r\necho You can download it from  https://www.internetdownloadmanager.com/download.html\r\ngoto done\r\n)\r\n\r\n:: Internet check with internetdownloadmanager.com ping and port 80 test\r\n\r\nset _int=\r\nfor /f \"delims=[] tokens=2\" %%# in ('ping -n 1 internetdownloadmanager.com') do (if not [%%#]==[] set _int=1)\r\n\r\nif not defined _int (\r\n%psc% \"$t = New-Object Net.Sockets.TcpClient;try{$t.Connect(\"\"\"internetdownloadmanager.com\"\"\", 80)}catch{};$t.Connected\" | findstr /i \"true\" %nul1% || (\r\ncall :_color %Red% \"Unable to connect internetdownloadmanager.com, aborting...\"\r\ngoto done\r\n)\r\ncall :_color %Gray% \"Ping command failed for internetdownloadmanager.com\"\r\necho:\r\n)\r\n\r\nfor /f \"skip=2 tokens=2*\" %%a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\" /v ProductName 2^>nul') do set \"regwinos=%%b\"\r\nfor /f \"skip=2 tokens=2*\" %%a in ('reg query \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" /v PROCESSOR_ARCHITECTURE') do set \"regarch=%%b\"\r\nfor /f \"tokens=6-7 delims=[]. \" %%i in ('ver') do if \"%%j\"==\"\" (set fullbuild=%%i) else (set fullbuild=%%i.%%j)\r\nfor /f \"tokens=2*\" %%a in ('reg query \"HKU\\%_sid%\\Software\\DownloadManager\" /v idmvers %nul6%') do set \"IDMver=%%b\"\r\n\r\necho Checking Info - [%regwinos% ^| %fullbuild% ^| %regarch% ^| IDM: %IDMver%]\r\n\r\n%idmcheck% && (echo: & taskkill /f /im idman.exe)\r\n\r\nset _time=\r\nfor /f %%a in ('%psc% \"(Get-Date).ToString('yyyyMMdd-HHmmssfff')\"') do set _time=%%a\r\n\r\necho:\r\necho Creating backup of CLSID registry keys in %SystemRoot%\\Temp\r\n\r\nreg export %CLSID% \"%SystemRoot%\\Temp\\_Backup_HKCU_CLSID_%_time%.reg\"\r\nif not %HKCUsync%==1 reg export %CLSID2% \"%SystemRoot%\\Temp\\_Backup_HKU-%_sid%_CLSID_%_time%.reg\"\r\n\r\ncall :delete_queue\r\ncall :add_key\r\n\r\n%psc% \"$sid = '%_sid%'; $HKCUsync = %HKCUsync%; $lockKey = 1; $deleteKey = $null; $toggle = 1; $f=[io.file]::ReadAllText('!_batp!') -split ':regscan\\:.*';iex ($f[1])\"\r\n\r\nif %frz%==0 call :register_IDM\r\n\r\ncall :download_files\r\nif not defined _fileexist (\r\n%eline%\r\necho Error: Unable to download files with IDM.\r\necho:\r\necho Help: %mas%idm-activation-script.html#Troubleshoot\r\ngoto :done\r\n)\r\n\r\n%psc% \"$sid = '%_sid%'; $HKCUsync = %HKCUsync%; $lockKey = 1; $deleteKey = $null; $f=[io.file]::ReadAllText('!_batp!') -split ':regscan\\:.*';iex ($f[1])\"\r\n\r\necho:\r\necho %line%\r\necho:\r\nif %frz%==0 (\r\ncall :_color %Green% \"The IDM Activation process has been completed.\"\r\necho:\r\ncall :_color %Gray% \"If the fake serial screen appears, use the Freeze Trial option instead.\"\r\n) else (\r\ncall :_color %Green% \"The IDM 30 days trial period is successfully freezed for Lifetime.\"\r\necho:\r\ncall :_color %Gray% \"If IDM is showing a popup to register, reinstall IDM.\"\r\n)\r\n\r\n::========================================================================================================================================\r\n\r\n:done\r\n\r\necho %line%\r\necho:\r\necho:\r\nif %_unattended%==1 timeout /t 2 & exit /b\r\n\r\nif defined terminal (\r\ncall :_color %_Yellow% \"Press 0 key to return...\"\r\nchoice /c 0 /n\r\n) else (\r\ncall :_color %_Yellow% \"Press any key to return...\"\r\npause %nul1%\r\n)\r\ngoto MainMenu\r\n\r\n:done2\r\n\r\nif %_unattended%==1 timeout /t 2 & exit /b\r\n\r\nif defined terminal (\r\necho Press 0 key to exit...\r\nchoice /c 0 /n\r\n) else (\r\necho Press any key to exit...\r\npause %nul1%\r\n)\r\nexit /b\r\n\r\n::========================================================================================================================================\r\n\r\n:_rcont\r\n\r\nreg add %reg% %nul%\r\ncall :add\r\nexit /b\r\n\r\n:register_IDM\r\n\r\necho:\r\necho Applying registration details...\r\necho:\r\n\r\nset /a fname = %random% %% 9999 + 1000\r\nset /a lname = %random% %% 9999 + 1000\r\nset email=%fname%.%lname%@tonec.com\r\n\r\nfor /f \"delims=\" %%a in ('%psc% \"$key = -join ((Get-Random -Count  20 -InputObject ([char[]]('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))));$key = ($key.Substring(0,  5) + '-' + $key.Substring(5,  5) + '-' + $key.Substring(10,  5) + '-' + $key.Substring(15,  5) + $key.Substring(20));Write-Output $key\" %nul6%') do (set key=%%a)\r\n\r\nset \"reg=HKCU\\SOFTWARE\\DownloadManager /v FName /t REG_SZ /d \"%fname%\"\" & call :_rcont\r\nset \"reg=HKCU\\SOFTWARE\\DownloadManager /v LName /t REG_SZ /d \"%lname%\"\" & call :_rcont\r\nset \"reg=HKCU\\SOFTWARE\\DownloadManager /v Email /t REG_SZ /d \"%email%\"\" & call :_rcont\r\nset \"reg=HKCU\\SOFTWARE\\DownloadManager /v Serial /t REG_SZ /d \"%key%\"\" & call :_rcont\r\n\r\nif not %HKCUsync%==1 (\r\nset \"reg=HKU\\%_sid%\\SOFTWARE\\DownloadManager /v FName /t REG_SZ /d \"%fname%\"\" & call :_rcont\r\nset \"reg=HKU\\%_sid%\\SOFTWARE\\DownloadManager /v LName /t REG_SZ /d \"%lname%\"\" & call :_rcont\r\nset \"reg=HKU\\%_sid%\\SOFTWARE\\DownloadManager /v Email /t REG_SZ /d \"%email%\"\" & call :_rcont\r\nset \"reg=HKU\\%_sid%\\SOFTWARE\\DownloadManager /v Serial /t REG_SZ /d \"%key%\"\" & call :_rcont\r\n)\r\nexit /b\r\n\r\n:download_files\r\n\r\necho:\r\necho Triggering a few downloads to create certain registry keys, please wait...\r\necho:\r\n\r\nset \"file=%SystemRoot%\\Temp\\temp.png\"\r\nset _fileexist=\r\n\r\nset link=https://www.internetdownloadmanager.com/images/idm_box_min.png\r\ncall :download\r\nset link=https://www.internetdownloadmanager.com/register/IDMlib/images/idman_logos.png\r\ncall :download\r\nset link=https://www.internetdownloadmanager.com/pictures/idm_about.png\r\ncall :download\r\n\r\necho:\r\ntimeout /t 3 %nul1%\r\n%idmcheck% && taskkill /f /im idman.exe\r\nif exist \"%file%\" del /f /q \"%file%\"\r\nexit /b\r\n\r\n:download\r\n\r\nset /a attempt=0\r\nif exist \"%file%\" del /f /q \"%file%\"\r\nstart \"\" /B \"%IDMan%\" /n /d \"%link%\" /p \"%SystemRoot%\\Temp\" /f temp.png\r\n\r\n:check_file\r\n\r\ntimeout /t 1 %nul1%\r\nset /a attempt+=1\r\nif exist \"%file%\" set _fileexist=1&exit /b\r\nif %attempt% GEQ 20 exit /b\r\ngoto :Check_file\r\n\r\n::========================================================================================================================================\r\n\r\n:add_key\r\n\r\necho:\r\necho Adding registry key...\r\necho:\r\n\r\nset \"reg=\"%HKLM%\" /v \"AdvIntDriverEnabled2\"\"\r\n\r\nreg add %reg% /t REG_DWORD /d \"1\" /f %nul%\r\n\r\n:add\r\n\r\nif \"%errorlevel%\"==\"0\" (\r\nset \"reg=%reg:\"=%\"\r\necho Added - !reg!\r\n) else (\r\nset \"reg=%reg:\"=%\"\r\ncall :_color2 %Red% \"Failed - !reg!\"\r\n)\r\nexit /b\r\n\r\n::========================================================================================================================================\r\n\r\n:regscan:\r\n$finalValues = @()\r\n\r\n$arch = (Get-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment').PROCESSOR_ARCHITECTURE\r\nif ($arch -eq \"x86\") {\r\n  $regPaths = @(\"HKCU:\\Software\\Classes\\CLSID\", \"Registry::HKEY_USERS\\$sid\\Software\\Classes\\CLSID\")\r\n} else {\r\n  $regPaths = @(\"HKCU:\\Software\\Classes\\WOW6432Node\\CLSID\", \"Registry::HKEY_USERS\\$sid\\Software\\Classes\\Wow6432Node\\CLSID\")\r\n}\r\n\r\nforeach ($regPath in $regPaths) {\r\n    if (($regPath -match \"HKEY_USERS\") -and ($HKCUsync -ne $null)) {\r\n        continue\r\n    }\r\n\t\r\n\tWrite-Host\r\n\tWrite-Host \"Searching IDM CLSID Registry Keys in $regPath\"\r\n\tWrite-Host\r\n\t\r\n    $subKeys = Get-ChildItem -Path $regPath -ErrorAction SilentlyContinue -ErrorVariable lockedKeys | Where-Object { $_.PSChildName -match '^\\{[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}\\}$' }\r\n\r\n    foreach ($lockedKey in $lockedKeys) {\r\n        $leafValue = Split-Path -Path $lockedKey.TargetObject -Leaf\r\n        $finalValues += $leafValue\r\n        Write-Output \"$leafValue - Found Locked Key\"\r\n    }\r\n\r\n    if ($subKeys -eq $null) {\r\n\tcontinue\r\n\t}\r\n\t\r\n\t$subKeysToExclude = \"LocalServer32\", \"InProcServer32\", \"InProcHandler32\"\r\n\r\n    $filteredKeys = $subKeys | Where-Object { !($_.GetSubKeyNames() | Where-Object { $subKeysToExclude -contains $_ }) }\r\n\r\n    foreach ($key in $filteredKeys) {\r\n        $fullPath = $key.PSPath\r\n        $keyValues = Get-ItemProperty -Path $fullPath -ErrorAction SilentlyContinue\r\n        $defaultValue = $keyValues.PSObject.Properties | Where-Object { $_.Name -eq '(default)' } | Select-Object -ExpandProperty Value\r\n\r\n        if (($defaultValue -match \"^\\d+$\") -and ($key.SubKeyCount -eq 0)) {\r\n            $finalValues += $($key.PSChildName)\r\n            Write-Output \"$($key.PSChildName) - Found Digit In Default and No Subkeys\"\r\n            continue\r\n        }\r\n        if (($defaultValue -match \"\\+|=\") -and ($key.SubKeyCount -eq 0)) {\r\n            $finalValues += $($key.PSChildName)\r\n            Write-Output \"$($key.PSChildName) - Found + or = In Default and No Subkeys\"\r\n            continue\r\n        }\r\n        $versionValue = Get-ItemProperty -Path \"$fullPath\\Version\" -ErrorAction SilentlyContinue | Select-Object -ExpandProperty '(default)' -ErrorAction SilentlyContinue\r\n        if (($versionValue -match \"^\\d+$\") -and ($key.SubKeyCount -eq 1)) {\r\n            $finalValues += $($key.PSChildName)\r\n            Write-Output \"$($key.PSChildName) - Found Digit In \\Version and No Other Subkeys\"\r\n            continue\r\n        }\r\n        $keyValues.PSObject.Properties | ForEach-Object {\r\n            if ($_.Name -match \"MData|Model|scansk|Therad\") {\r\n                $finalValues += $($key.PSChildName)\r\n                Write-Output \"$($key.PSChildName) - Found MData Model scansk Therad\"\r\n                continue\r\n            }\r\n        }\r\n        if (($key.ValueCount -eq 0) -and ($key.SubKeyCount -eq 0)) {\r\n            $finalValues += $($key.PSChildName)\r\n            Write-Output \"$($key.PSChildName) - Found Empty Key\"\r\n            continue\r\n        }\r\n    }\r\n}\r\n\r\n$finalValues = @($finalValues | Select-Object -Unique)\r\n\r\nif ($finalValues -ne $null) {\r\n    Write-Host\r\n    if ($lockKey -ne $null) {\r\n        Write-Host \"Locking IDM CLSID Registry Keys...\"\r\n    }\r\n    if ($deleteKey -ne $null) {\r\n        Write-Host \"Deleting IDM CLSID Registry Keys...\"\r\n    }\r\n    Write-Host\r\n} else {\r\n    Write-Host \"IDM CLSID Registry Keys are not found.\"\r\n\tExit\r\n}\r\n\r\nif (($finalValues.Count -gt 20) -and ($toggle -ne $null)) {\r\n\t$lockKey = $null\r\n\t$deleteKey = 1\r\n    Write-Host \"The IDM keys count is more than 20. Deleting them now instead of locking...\"\r\n\tWrite-Host\r\n}\r\n\r\nfunction Take-Permissions {\r\n    param($rootKey, $regKey)\r\n    $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly(4, 1)\r\n    $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule(2, $False)\r\n    $TypeBuilder = $ModuleBuilder.DefineType(0)\r\n\r\n    $TypeBuilder.DefinePInvokeMethod('RtlAdjustPrivilege', 'ntdll.dll', 'Public, Static', 1, [int], @([int], [bool], [bool], [bool].MakeByRefType()), 1, 3) | Out-Null\r\n    9,17,18 | ForEach-Object { $TypeBuilder.CreateType()::RtlAdjustPrivilege($_, $true, $false, [ref]$false) | Out-Null }\r\n\r\n    $SID = New-Object System.Security.Principal.SecurityIdentifier('S-1-5-32-544')\r\n    $IDN = ($SID.Translate([System.Security.Principal.NTAccount])).Value\r\n    $Admin = New-Object System.Security.Principal.NTAccount($IDN)\r\n\r\n    $everyone = New-Object System.Security.Principal.SecurityIdentifier('S-1-1-0')\r\n    $none = New-Object System.Security.Principal.SecurityIdentifier('S-1-0-0')\r\n\r\n    $key = [Microsoft.Win32.Registry]::$rootKey.OpenSubKey($regkey, 'ReadWriteSubTree', 'TakeOwnership')\r\n\r\n    $acl = New-Object System.Security.AccessControl.RegistrySecurity\r\n    $acl.SetOwner($Admin)\r\n    $key.SetAccessControl($acl)\r\n\r\n    $key = $key.OpenSubKey('', 'ReadWriteSubTree', 'ChangePermissions')\r\n    $rule = New-Object System.Security.AccessControl.RegistryAccessRule($everyone, 'FullControl', 'ContainerInherit', 'None', 'Allow')\r\n    $acl.ResetAccessRule($rule)\r\n    $key.SetAccessControl($acl)\r\n\r\n    if ($lockKey -ne $null) {\r\n        $acl = New-Object System.Security.AccessControl.RegistrySecurity\r\n        $acl.SetOwner($none)\r\n        $key.SetAccessControl($acl)\r\n\r\n        $key = $key.OpenSubKey('', 'ReadWriteSubTree', 'ChangePermissions')\r\n        $rule = New-Object System.Security.AccessControl.RegistryAccessRule($everyone, 'FullControl', 'Deny')\r\n        $acl.ResetAccessRule($rule)\r\n        $key.SetAccessControl($acl)\r\n    }\r\n}\r\n\r\nforeach ($regPath in $regPaths) {\r\n    if (($regPath -match \"HKEY_USERS\") -and ($HKCUsync -ne $null)) {\r\n        continue\r\n    }\r\n    foreach ($finalValue in $finalValues) {\r\n        $fullPath = Join-Path -Path $regPath -ChildPath $finalValue\r\n        if ($fullPath -match 'HKCU:') {\r\n            $rootKey = 'CurrentUser'\r\n        } else {\r\n            $rootKey = 'Users'\r\n        }\r\n\r\n        $position = $fullPath.IndexOf(\"\\\")\r\n        $regKey = $fullPath.Substring($position + 1)\r\n\r\n        if ($lockKey -ne $null) {\r\n            if (-not (Test-Path -Path $fullPath -ErrorAction SilentlyContinue)) { New-Item -Path $fullPath -Force -ErrorAction SilentlyContinue | Out-Null }\r\n            Take-Permissions $rootKey $regKey\r\n            try {\r\n                Remove-Item -Path $fullPath -Force -Recurse -ErrorAction Stop\r\n                Write-Host -back 'DarkRed' -fore 'white' \"Failed - $fullPath\"\r\n            }\r\n            catch {\r\n                Write-Host \"Locked - $fullPath\"\r\n            }\r\n        }\r\n\r\n        if ($deleteKey -ne $null) {\r\n            if (Test-Path -Path $fullPath) {\r\n                Remove-Item -Path $fullPath -Force -Recurse -ErrorAction SilentlyContinue\r\n                if (Test-Path -Path $fullPath) {\r\n                    Take-Permissions $rootKey $regKey\r\n                    try {\r\n                        Remove-Item -Path $fullPath -Force -Recurse -ErrorAction Stop\r\n                        Write-Host \"Deleted - $fullPath\"\r\n                    }\r\n                    catch {\r\n                        Write-Host -back 'DarkRed' -fore 'white' \"Failed - $fullPath\"\r\n                    }\r\n                }\r\n                else {\r\n                    Write-Host \"Deleted - $fullPath\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n:regscan:\r\n\r\n::========================================================================================================================================\r\n\r\n:_color\r\n\r\nif %_NCS% EQU 1 (\r\necho %esc%[%~1%~2%esc%[0m\r\n) else (\r\n%psc% write-host -back '%1' -fore '%2' '%3'\r\n)\r\nexit /b\r\n\r\n:_color2\r\n\r\nif %_NCS% EQU 1 (\r\necho %esc%[%~1%~2%esc%[%~3%~4%esc%[0m\r\n) else (\r\n%psc% write-host -back '%1' -fore '%2' '%3' -NoNewline; write-host -back '%4' -fore '%5' '%6'\r\n)\r\nexit /b\r\n\r\n::========================================================================================================================================\r\n:: Leave empty line below\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.357421875,
          "content": "# Notice:\r\n\r\n## This project has been archived and is no longer being maintained.\r\n\r\nI've switched to FDM, don't want to keep up with IDM new nags anymore.\r\n\r\n------------------------------------------------------------------------\r\n\r\n## IDM Activation Script\r\n\r\nAn open-source tool to activate and reset the trial of [Internet Download Manager](https://www.internetdownloadmanager.com/)\r\n\r\n## Features\r\n\r\n-   IDM freeze trial and activation with registry key lock method\r\n-   Activation and trial persist even after installing IDM updates\r\n-   IDM trial reset\r\n-   Fully open source\r\n-   Based on the transparent batch script\r\n\r\n## IAS Latest Release\r\n\r\nLast Release - v1.2 (12-Feb-2024)\\\r\n[GitHub](https://github.com/WindowsAddict/IDM-Activation-Script) - [BitBucket](https://bitbucket.org/WindowsAddict/idm-activation-script/)\r\n\r\n## Download / How to use it?\r\n\r\n-   First fresh install [Internet Download Manager](https://www.internetdownloadmanager.com/). Make sure previous cracks/patches are removed/uninstalled if there are any.\r\n-   After that follow the below steps to activate it.\r\n\r\n## Note\r\n\r\n-   📌 The activation option is currently not working in the script, use the Freeze trial option to lock 30-day trial period for the lifetime.\r\n\r\n### Method 1 - PowerShell\r\n\r\n(Recommended)\r\n\r\n-   Right-click on the Windows start menu and select PowerShell or Terminal (Not CMD).\r\n-   Copy-paste the below code and press enter\\\r\n    `irm https://massgrave.dev/ias | iex`\r\n-   You will see the activation options, follow the on-screen instructions.\r\n-   That's all.\r\n\r\n### Method 2 - Traditional\r\n\r\n-   Download the file from [GitHub](https://github.com/WindowsAddict/IDM-Activation-Script/archive/refs/heads/main.zip) or [Bitbucket](https://bitbucket.org/WindowsAddict/idm-activation-script/get/main.zip)\r\n-   Right-click on the downloaded zip file and extract\r\n-   In the extracted folder, run the file named `IAS.cmd`\r\n-   You will see the activation options, and follow onscreen instructions.\r\n-   That's all.\r\n\r\n## Info\r\n\r\n#### Freeze Trial\r\n\r\n-   IDM provides a 30-day trial period, you can use this option in the script to lock this trial period for the lifetime so that you won't have to reset the trial again and your trial won't expire.\r\n-   This method requires the Internet at the time of applying this option.\r\n-   IDM updates can be installed directly without having to freeze it again.\r\n\r\n#### Activation\r\n\r\n(\\*Currently not working)\r\n\r\n-   This script applies the registry lock method to activate the Internet download manager (IDM).\r\n-   This method requires the Internet at the time of activation.\r\n-   IDM updates can be installed directly without having to activate it again.\r\n-   After the activation, if in some cases, IDM starts to show an activation nag screen, then just run the activation option again without using the reset option.\r\n\r\n#### Reset IDM Activation / Trial\r\n\r\n-   Internet download manager provides a 30-day trial period, you can use this script to reset this Activation / Trial period whenever you want.\r\n-   This option also can be used to restore status if in case IDM reports a fake serial key and other similar errors.\r\n\r\n#### OS requirement\r\n\r\n-   The project is supported for Windows 7/8/8.1/10/11 and their Server equivalent.\r\n-   The PowerShell method to run IAS is supported on Windows 8 and higher.\r\n\r\n#### Advanced Info\r\n\r\n-   To activate in unattended mode, run the script with the `/act` parameter.\r\n-   To freeze the trial in unattended mode, run the script with the `/frz` parameter.\r\n-   To reset in unattended mode, run the script with the `/res` parameter.\r\n\r\n## How does it work?\r\n\r\n-   IDM stores the data related to trial and activation across various registry keys. Some of these keys are locked to protect them from tampering and data is stored in a pattern to track the fake serial issue and the remaining trial days. To activate it, the script here simply generates those registry keys by triggering a few downloads in IDM, identifies those registry keys, and locks them so IDM can't edit and view them. That way IDM cannot show the warning that it's activated with a fake serial key.\r\n\r\n## Troubleshoot\r\n\r\n-   Browser Integration Fix: [Chrome](https://www.internetdownloadmanager.com/register/new_faq/bi9.html) - [Firefox](https://www.internetdownloadmanager.com/register/new_faq/bi4.html)\r\n-   Raise the issue on [Github](https://github.com/WindowsAddict/IDM-Activation-Script) with screenshots.\r\n\r\n## Changelog\r\n\r\n#### v1.2\r\n\r\n-   Added back activation option with a randomized name, email, and key in registration details along with a warning that it's not working for some users, the recommended option is to use Freeze trial.\r\n\r\n#### v1.1\r\n\r\n-   IDM update 6.42b3 has started showing fake serial popups with IAS activation, due to this we have removed the activation option and replaced it with the Freeze trial option to lock the 30-day trial period for the lifetime.\r\n-   Now the script will disable quick-edit in CMD windows using Powershell instead of editing registry, thanks to @abbodi1406 for the code and @awuctl for the idea.\r\n-   Code to relaunch script with conhost.exe to avoid terminal app is now merged in quick-edit disable code, thanks to @abbodi1406.\r\n\r\n#### v1.0\r\n\r\n-   Added the code to relaunch the script with conhost.exe if the script is running from the terminal app.\r\n-   Fixed an issue in getting the current user account SID.\r\n\r\n#### v0.9\r\n\r\n-   Fixed an issue where the script can not activate and reset IDM in non-admin user accounts.\r\n-   Fixed an issue where the script incorrectly shows that IDM is activated.\r\n-   Fixed an issue where a fake serial pop-up may appear. The script will also show the info to run the activation option again without using the reset option.\r\n-   Fixed an issue where Powershell code to launch IAS may not work due to GitHub block in some regions. It will use the new [BitBucket](https://bitbucket.org/WindowsAddict/idm-activation-script/) repo as a fallback link.\r\n-   IDM registry scanning and locking code is now written in Powershell.\r\n-   The script update checker code is added to the script.\r\n-   The script will now disable quick edit mode temporarily because users often click inside the script window and it pauses the script.\r\n-   The script will back up the CLSISD registry keys before performing operations on them.\r\n-   Many error checks are added to better identify the issues.\r\n\r\n#### v0.8\r\n\r\n-   Move the project to [Github](https://github.com/WindowsAddict/IDM-Activation-Script) and [massgrave.dev](https://massgrave.dev/idm-activation-script.html)\r\n-   Minor bug fixes\r\n-   Add info to inform users that empty registry keys are being deleted when the script deletes a lot of them\r\n\r\n## Screenshots\r\n\r\n![](https://massgrave.dev/images/IAS.png?raw=true)\r\n\r\n![](https://massgrave.dev/images/IAS_Freeze_Trial.png?raw=true)\r\n\r\n## Credits\r\n\r\n|                                             |                                                                                                                                                                                                                                        |\r\n|----------------------|--------------------------------------------------|\r\n| Dukun Cabul                                 | Original researcher of this IDM trial reset and activation logic, made an Autoit tool for these methods, [IDM-AIO_2020_Final](https://nsaneforums.com/topic/371047-discussion-internet-download-manager-fixes/page/8/#comment-1632062) |\r\n| AveYo aka BAU                               | [reg_own lean and mean snippet](https://pastebin.com/XTPt0JSC)                                                                                                                                                                         |\r\n| [abbodi1406](https://github.com/abbodi1406) | Help in coding                                                                                                                                                                                                                         |\r\n| WindowsAddict                               | IAS Author                                                                                                                                                                                                                             |\r\n\r\nAnd thanks to the IAS users for their interest, feedback, and assistance.\r\n\r\n------------------------------------------------------------------------\r\n\r\nMade with Love ❤️\r\n"
        }
      ]
    }
  ]
}