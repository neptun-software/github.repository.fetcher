{
  "metadata": {
    "timestamp": 1736711271697,
    "page": 5,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjU=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "enhorse/java-interview",
      "stars": 5314,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.072265625,
          "content": "# IntelliJ\n*.iml\nout/\n.idea/\n\n# System specific\n.DS_Store\n\n# Maven\ntarget/"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 137.224609375,
          "content": "[Свёрстанные вопросы и ответы](book/Java_questions.pdf) [by Victoria Demidova](https://github.com/VictoriaDemidova)  \n[Telegram Bot](https://web.telegram.org/#/im?p=@DevInterviewBot) [by cmmttd](https://github.com/cmmttd)\n\n# Вопросы для собеседования на Java Developer\n\n+ [ООП](#ООП) ![icon][done]\n+ [JVM](#jvm) ![icon][done]\n+ [Java Core](#java-core) ![icon][done]\n+ [Java Collections Framework](#java-collections) ![icon][done]\n+ [Java 8](#java-8) ![icon][done]\n+ [Потоки ввода-вывода в Java](#Потоки-вводавывода-в-java) ![icon][done]\n+ [Сериализация](#Сериализация) ![icon][done]\n+ [Многопоточность](#Многопоточность) ![icon][done]\n+ [Реактивное программирование](#реактивное-программирование) ![icon][done]\n+ [Servlets, JSP, JSTL](#servlets-jsp-jstl) ![icon][done]\n+ [Базы данных](#Базы-данных) ![icon][done]\n+ [SQL](#sql) ![icon][done]\n+ [JDBC](#jdbc) ![icon][done]\n+ [Тестирование](#Тестирование) ![icon][done]\n+ [Журналирование](#Журналирование) ![icon][done]\n+ [UML](#uml) ![icon][done]\n+ [XML](#xml) ![icon][done]\n+ [Шаблоны проектирования](#Шаблоны-проектирования) ![icon][done]\n+ [Основы HTML](#Основы-html) ![icon][done]\n+ [Основы CSS](#Основы-css) ![icon][done]\n+ [Основы Web](#Основы-web) ![icon][done]\n+ [Apache Kafka](#apache-kafka) ![icon][done]\n+ [Дополнительные материалы](#Дополнительные-материалы) ![icon][done]\n\n[done]:done.png\n\n## ООП\n+ [Что такое _ООП_?](oop.md#Что-такое-ООП)\n+ [Назовите основные принципы _ООП_.](oop.md#Назовите-основные-принципы-ООП)\n+ [Что такое _«инкапсуляция»_?](oop.md#Что-такое-инкапсуляция)\n+ [Что такое _«наследование»_?](oop.md#Что-такое-наследование)\n+ [Что такое _«полиморфизм»_?](oop.md#Что-такое-полиморфизм)\n+ [Что такое _«абстракция»_?](oop.md#Что-такое-абстракция)\n+ [Что представляет собой _«обмен сообщениями»_?](oop.md#Что-представляет-собой-обмен-сообщениями)\n+ [Расскажите про основные понятия ООП: _«класс»_, _«объект»_, _«интерфейс»_.](oop.md#Расскажите-про-основные-понятия-ООП-класс-объект-интерфейс)\n+ [В чем заключаются преимущества и недостатки объектно-ориентированного подхода в программировании?](oop.md#В-чем-заключаются-преимущества-и-недостатки-объектно-ориентированного-подхода-в-программировании)\n+ [Что подразумевают в плане принципов ООП выражения _«является»_ и _«имеет»_?](oop.md#Что-подразумевают-в-плане-принципов-ООП-выражения-является-и-имеет)\n+ [В чем разница между _композицией_ и _агрегацией_?](oop.md#В-чем-разница-между-композицией-и-агрегацией)\n+ [Что такое _статическое_ и _динамическое связывание_?](oop.md#Что-такое-статическое-и-динамическое-связывание)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## JVM\n+ [За что отвечает JVM](jvm.md#За-что-отвечает-JVM)\n+ [Classloader](jvm.md#Classloader)\n+ [Области данных времени выполнения](jvm.md#Области-данных-времени-выполнения)\n+ [Frames](jvm.md#Frames)\n+ [Execution Engine](jvm.md#Execution-Engine)\n+ [Полезные ссылки](jvm.md#Полезные-ссылки)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Java Core\n+ [Чем различаются JRE, JVM и JDK?](core.md#Чем-различаются-jre-jvm-и-jdk)\n+ [Какие существуют модификаторы доступа?](core.md#Какие-существуют-модификаторы-доступа)\n+ [О чем говорит ключевое слово `final`?](core.md#О-чем-говорит-ключевое-слово-final)\n+ [Какими значениями инициализируются переменные по умолчанию?](core.md#Какими-значениями-инициализируются-переменные-по-умолчанию)\n+ [Что вы знаете о функции `main()`?](core.md#Что-вы-знаете-о-функции-main)\n+ [Какие логические операции и операторы вы знаете?](core.md#Какие-логические-операции-и-операторы-вы-знаете)\n+ [Что такое тернарный оператор выбора?](core.md#Что-такое-тернарный-оператор-выбора)\n+ [Какие побитовые операции вы знаете?](core.md#Какие-побитовые-операции-вы-знаете)\n+ [Где и для чего используется модификатор `abstract`?](core.md#Где-и-для-чего-используется-модификатор-abstract)\n+ [Дайте определение понятию _«интерфейс»_. Какие модификаторы по умолчанию имеют поля и методы интерфейсов?](core.md#Дайте-определение-понятию-интерфейс-Какие-модификаторы-по-умолчанию-имеют-поля-и-методы-интерфейсов)\n+ [Чем абстрактный класс отличается от интерфейса? В каких случаях следует использовать абстрактный класс, а в каких интерфейс?](core.md#Чем-абстрактный-класс-отличается-от-интерфейса-В-каких-случаях-следует-использовать-абстрактный-класс-а-в-каких-интерфейс)\n+ [Почему в некоторых интерфейсах вообще не определяют методов?](core.md#Почему-в-некоторых-интерфейсах-вообще-не-определяют-методов)\n+ [Почему нельзя объявить метод интерфейса с модификатором `final`?](core.md#Почему-нельзя-объявить-метод-интерфейса-с-модификатором-final)\n+ [Что имеет более высокий уровень абстракции - класс, абстрактный класс или интерфейс?](core.md#Что-имеет-более-высокий-уровень-абстракции---класс-абстрактный-класс-или-интерфейс)\n+ [Может ли объект получить доступ к `private`-переменной класса? Если, да, то каким образом?](core.md#Может-ли-объект-получить-доступ-к-private-переменной-класса-Если-да-то-каким-образом)\n+ [Каков порядок вызова конструкторов и блоков инициализации с учётом иерархии классов?](core.md#Каков-порядок-вызова-конструкторов-и-блоков-инициализации-с-учётом-иерархии-классов)\n+ [Зачем нужны и какие бывают блоки инициализации?](core.md#Зачем-нужны-и-какие-бывают-блоки-инициализации)\n+ [К каким конструкциям Java применим модификатор `static`?](core.md#К-каким-конструкциям-java-применим-модификатор-static)\n+ [Для чего в Java используются статические блоки инициализации?](core.md#Для-чего-в-java-используются-статические-блоки-инициализации)\n+ [Что произойдёт, если в блоке инициализации возникнет исключительная ситуация?](core.md#Что-произойдёт-если-в-блоке-инициализации-возникнет-исключительная-ситуация)\n+ [Какое исключение выбрасывается при возникновении ошибки в блоке инициализации класса?](core.md#Какое-исключение-выбрасывается-при-возникновении-ошибки-в-блоке-инициализации-класса)\n+ [Может ли статический метод быть переопределён или перегружен?](core.md#Может-ли-статический-метод-быть-переопределён-или-перегружен)\n+ [Могут ли нестатические методы перегрузить статические?](core.md#Могут-ли-нестатические-методы-перегрузить-статические)\n+ [Можно ли сузить уровень доступа/тип возвращаемого значения при переопределении метода?](core.md#Можно-ли-сузить-уровень-доступатип-возвращаемого-значения-при-переопределении-метода)\n+ [Возможно ли при переопределении метода изменить: модификатор доступа; возвращаемый тип; тип аргумента или их количество; имена аргументов или их порядок, убирать, добавлять, изменять порядок следования элементов секции `throws`?](core.md#Возможно-ли-при-переопределении-метода-изменить-модификатор-доступа-возвращаемый-тип-тип-аргумента-или-их-количество-имена-аргументов-или-их-порядок-убирать-добавлять-изменять-порядок-следования-элементов-секции-throws)\n+ [Как получить доступ к переопределенным методам родительского класса?](core.md#Как-получить-доступ-к-переопределенным-методам-родительского-класса)\n+ [Можно ли объявить метод абстрактным и статическим одновременно?](core.md#Можно-ли-объявить-метод-абстрактным-и-статическим-одновременно)\n+ [В чем разница между членом экземпляра класса и статическим членом класса?](core.md#В-чем-разница-между-членом-экземпляра-класса-и-статическим-членом-класса)\n+ [Где разрешена инициализация статических/нестатических полей?](core.md#Где-разрешена-инициализация-статическихнестатических-полей)\n+ [Какие типы классов бывают в java?](core.md#Какие-типы-классов-бывают-в-java)\n+ [Расскажите про вложенные классы. В каких случаях они применяются?](core.md#Расскажите-про-вложенные-классы-В-каких-случаях-они-применяются)\n+ [Что такое _«статический класс»_?](core.md#Что-такое-статический-класс)\n+ [Какие существуют особенности использования вложенных классов: статических и внутренних? В чем заключается разница между ними?](core.md#Какие-существуют-особенности-использования-вложенных-классов-статических-и-внутренних-В-чем-заключается-разница-между-ними)\n+ [Что такое _«локальный класс»_? Каковы его особенности?](core.md#Что-такое-локальный-класс-Каковы-его-особенности)\n+ [Что такое _«анонимные классы»_? Где они применяются?](core.md#Что-такое-анонимные-классы-Где-они-применяются)\n+ [Каким образом из вложенного класса получить доступ к полю внешнего класса?](core.md#Каким-образом-из-вложенного-класса-получить-доступ-к-полю-внешнего-класса)\n+ [Для чего используется оператор `assert`?](core.md#Для-чего-используется-оператор-assert)\n+ [Для чего нужен сборщик мусора?](core.md#Для-чего-нужен-сборщик-мусора)\n+ [Как работает сборщик мусора?](core.md#Как-работает-сборщик-мусора)\n+ [Какие разновидности сборщиков мусора реализованы в виртуальной машине HotSpot?](core.md#Какие-разновидности-сборщиков-мусора-реализованы-в-виртуальной-машине-hotspot)\n+ [Опишите алгоритм работы какого-нибудь сборщика мусора реализованного в виртуальной машине HotSpot.](core.md#Опишите-алгоритм-работы-какого-нибудь-сборщика-мусора-реализованного-в-виртуальной-машине-hotspot)\n+ [Что такое `finalize()`? Зачем он нужен?](core.md#Что-такое-finalize-Зачем-он-нужен)\n+ [Что произойдет со сборщиком мусора, если выполнение метода `finalize()` требует ощутимо много времени, или в процессе выполнения будет выброшено исключение?](core.md#Что-произойдет-со-сборщиком-мусора-если-выполнение-метода-finalize-требует-ощутимо-много-времени-или-в-процессе-выполнения-будет-выброшено-исключение)\n+ [Чем отличаются `final`, `finally` и `finalize()`?](core.md#Чем-отличаются-final-finally-и-finalize)\n+ [Что такое Heap и Stack память в Java? Какая разница между ними?](core.md#Что-такое-heap-и-stack-память-в-java-Какая-разница-между-ними)\n+ [Верно ли утверждение, что примитивные типы данных всегда хранятся в стеке, а экземпляры ссылочных типов данных в куче?](core.md#Верно-ли-утверждение-что-примитивные-типы-данных-всегда-хранятся-в-стеке-а-экземпляры-ссылочных-типов-данных-в-куче)\n+ [Каким образом передаются переменные в методы, по значению или по ссылке?](core.md#Каким-образом-передаются-переменные-в-методы-по-значению-или-по-ссылке)\n+ [Расскажите про приведение типов. Что такое понижение и повышение типа?](core.md#Расскажите-про-приведение-типов-Что-такое-понижение-и-повышение-типа)\n+ [Когда в приложении может быть выброшено исключение `ClassCastException`?](core.md#Когда-в-приложении-может-быть-выброшено-исключение-classcastexception)\n+ [Что такое литералы?](core.md#Что-такое-литералы)\n+ [Что такое _autoboxing («автоупаковка»)_ в Java и каковы правила упаковки примитивных типов в классы-обертки?](core.md#Что-такое-autoboxing-автоупаковка-в-java-и-каковы-правила-упаковки-примитивных-типов-в-классы-обертки)\n+ [Какие есть особенности класса `String`?](core.md#Какие-есть-особенности-класса-string)\n+ [Что такое «пул строк»?](core.md#Что-такое-пул-строк)\n+ [Почему `String` неизменяемый и финализированный класс?](core.md#Почему-string-неизменяемый-и-финализированный-класс)\n+ [Почему `char[]` предпочтительнее `String` для хранения пароля?](core.md#Почему-char-предпочтительнее-string-для-хранения-пароля)\n+ [Почему строка является популярным ключом в `HashMap` в Java?](core.md#Почему-строка-является-популярным-ключом-в-hashmap-в-java)\n+ [Что делает метод `intern()` в классе `String`?.](core.md#Что-делает-метод-intern-в-классе-string)\n+ [Можно ли использовать строки в конструкции `switch`?](core.md#Можно-ли-использовать-строки-в-конструкции-switch)\n+ [Какая основная разница между `String`, `StringBuffer`, `StringBuilder`?](core.md#Какая-основная-разница-между-string-stringbuffer-stringbuilder)\n+ [Что такое класс `Object`? Какие в нем есть методы?](core.md#Что-такое-класс-object-Какие-в-нем-есть-методы)\n+ [Расскажите про клонирование объектов.](core.md#Расскажите-про-клонирование-объектов)\n+ [В чем отличие между _поверхностным_ и _глубоким_ клонированием?](core.md#В-чем-отличие-между-поверхностным-и-глубоким-клонированием)\n+ [Какой способ клонирования предпочтительней?](core.md#Какой-способ-клонирования-предпочтительней)\n+ [Почему метод `clone()` объявлен в классе `Object`, а не в интерфейсе `Cloneable`?](core.md#Почему-метод-clone-объявлен-в-классе-object-а-не-в-интерфейсе-cloneable)\n+ [Дайте определение понятию «конструктор».](core.md#Дайте-определение-понятию-конструктор)\n+ [Что такое _«конструктор по умолчанию»_?](core.md#Что-такое-конструктор-по-умолчанию)\n+ [Чем отличаются конструкторы по-умолчанию, копирования и конструктор с параметрами?](core.md#Чем-отличаются-конструкторы-по-умолчанию-копирования-и-конструктор-с-параметрами)\n+ [Где и как вы можете использовать закрытый конструктор?](core.md#Где-и-как-вы-можете-использовать-закрытый-конструктор)\n+ [Расскажите про классы-загрузчики и про динамическую загрузку классов.](core.md#Расскажите-про-классы-загрузчики-и-про-динамическую-загрузку-классов)\n+ [Что такое _Reflection_?](core.md#Что-такое-reflection)\n+ [Зачем нужен `equals()`. Чем он отличается от операции `==`?](core.md#Зачем-нужен-equals-Чем-он-отличается-от-операции-)\n+ [`equals()` порождает отношение эквивалентности. Какими свойствами обладает такое отношение?](core.md#equals-порождает-отношение-эквивалентности-Какими-свойствами-обладает-такое-отношение)\n+ [Если вы хотите переопределить `equals()`, какие условия должны удовлетворяться для переопределенного метода?](core.md#Если-вы-хотите-переопределить-equals-какие-условия-должны-удовлетворяться-для-переопределенного-метода)\n+ [Правила переопределения метода `Object.equals()`.](core.md#Правила-переопределения-метода-objectequals)\n+ [Какая связь между `hashCode()` и `equals()`?](core.md#Какая-связь-между-hashcode-и-equals)\n+ [Если `equals()` переопределен, есть ли какие-либо другие методы, которые следует переопределить?](core.md#Если-equals-переопределен-есть-ли-какие-либо-другие-методы-которые-следует-переопределить)\n+ [Что будет, если переопределить `equals()` не переопределяя `hashCode()`? Какие могут возникнуть проблемы?](core.md#Что-будет-если-переопределить-equals-не-переопределяя-hashcode-Какие-могут-возникнуть-проблемы)\n+ [Каким образом реализованы методы `hashCode()` и `equals()` в классе `Object`?](core.md#Каким-образом-реализованы-методы-hashcode-и-equals-в-классе-object)\n+ [Для чего нужен метод `hashCode()`?](core.md#Для-чего-нужен-метод-hashcode)\n+ [Правила переопределения метода `Object.hashCode()`.](core.md#Правила-переопределения-метода-objecthashcode)\n+ [Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете `hashCode()`?](core.md#Есть-ли-какие-либо-рекомендации-о-том-какие-поля-следует-использовать-при-подсчете-hashcode)\n+ [Могут ли у разных объектов быть одинаковые `hashCode()`?](core.md#Могут-ли-у-разных-объектов-быть-одинаковые-hashcode)\n+ [Если у класса `Point{int x, y;}` реализовать метод `equals(Object that) {(return this.x == that.x && this.y == that.y)}`, но сделать хэш-код в виде `int hashCode() {return x;}`, то будут ли корректно такие точки помещаться и извлекаться из `HashSet`?](core.md#Если-у-класса-pointint-x-y-реализовать-метод-equalsobject-that-return-thisx--thatx--thisy--thaty-но-сделать-хэш-код-в-виде-int-hashcode-return-x-то-будут-ли-корректно-такие-точки-помещаться-и-извлекаться-из-hashset)\n+ [Могут ли у разных объектов `(ref0 != ref1)` быть `ref0.equals(ref1) == true`?](core.md#Могут-ли-у-разных-объектов-ref0--ref1-быть-ref0equalsref1--true)\n+ [Могут ли у разных ссылок на один объект `(ref0 == ref1)` быть `ref0.equals(ref1) == false`?](core.md#Могут-ли-у-разных-ссылок-на-один-объект-ref0--ref1-быть-ref0equalsref1--false)\n+ [Можно ли так реализовать метод `equals(Object that) {return this.hashCode() == that.hashCode()}`?](core.md#Можно-ли-так-реализовать-метод-equalsobject-that-return-thishashcode--thathashcode)\n+ [В `equals()` требуется проверять, что аргумент `equals(Object that)` такого же типа что и сам объект. В чем разница между `this.getClass() == that.getClass()` и `that instanceof MyClass`?](core.md#В-equals-требуется-проверять-что-аргумент-equalsobject-that-такого-же-типа-что-и-сам-объект-В-чем-разница-между-thisgetclass--thatgetclass-и-that-instanceof-myclass)\n+ [Можно ли реализовать метод `equals()` класса `MyClass` вот так: `class MyClass {public boolean equals(MyClass that) {return this == that;}}`?](core.md#Можно-ли-реализовать-метод-equals-класса-myclass-вот-так-class-myclass-public-boolean-equalsmyclass-that-return-this--that)\n+ [Есть класс `Point{int x, y;}`. Почему хэш-код в виде `31 * x + y` предпочтительнее чем `x + y`?](core.md#Есть-класс-pointint-x-y-Почему-хэш-код-в-виде-31--x--y-предпочтительнее-чем-x--y)\n+ [Опишите иерархию исключений.](core.md#Опишите-иерархию-исключений)\n+ [Какие виды исключений в Java вы знаете, чем они отличаются?](core.md#Какие-виды-исключений-в-java-вы-знаете-чем-они-отличаются)\n+ [Что такое _checked_ и _unchecked exception_?](core.md#Что-такое-checked-и-unchecked-exception)\n+ [Какой оператор позволяет принудительно выбросить исключение?](core.md#Какой-оператор-позволяет-принудительно-выбросить-исключение)\n+ [О чем говорит ключевое слово `throws`?](core.md#О-чем-говорит-ключевое-слово-throws)\n+ [Как написать собственное («пользовательское») исключение?](core.md#Как-написать-собственное-пользовательское-исключение)\n+ [Какие существуют _unchecked exception_?](core.md#Какие-существуют-unchecked-exception)\n+ [Что такое `Error`?](core.md#Что-такое-error)\n+ [Что вы знаете о `OutOfMemoryError`?](core.md#Что-вы-знаете-о-outofmemoryerror)\n+ [Опишите работу блока _try-catch-finally_.](core.md#Опишите-работу-блока-try-catch-finally)\n+ [Что такое механизм _try-with-resources_?](core.md#Что-такое-механизм-try-with-resources)\n+ [Возможно ли использование блока _try-finally_ (без `catch`)?](core.md#Возможно-ли-использование-блока-try-finally-без-catch)\n+ [Может ли один блок `catch` отлавливать сразу несколько исключений?](core.md#Может-ли-один-блок-catch-отлавливать-сразу-несколько-исключений)\n+ [Всегда ли исполняется блок `finally`?](core.md#Всегда-ли-исполняется-блок-finally)\n+ [Существуют ли ситуации, когда блок `finally` не будет выполнен?](core.md#Существуют-ли-ситуации-когда-блок-finally-не-будет-выполнен)\n+ [Может ли метод main выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?](core.md#Может-ли-метод-main-выбросить-исключение-во-вне-и-если-да-то-где-будет-происходить-обработка-данного-исключения)\n+ [Предположим, есть метод, который может выбросить `IOException` и `FileNotFoundException` в какой последовательности должны идти блоки `catch`? Сколько блоков `catch` будет выполнено?](core.md#Предположим-есть-метод-который-может-выбросить-ioexception-и-filenotfoundexception-в-какой-последовательности-должны-идти-блоки-catch-Сколько-блоков-catch-будет-выполнено)\n+ [Что такое _generics_?](core.md#Что-такое-generics)\n+ [Что такое _«интернационализация»_, _«локализация»_?](core.md#Что-такое-интернационализация-локализация)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Java Collections\n+ [Что такое _«коллекция»_?](jcf.md#Что-такое-коллекция)\n+ [Назовите основные интерфейсы JCF и их реализации.](jcf.md#Назовите-основные-интерфейсы-jcf-и-их-реализации)\n+ [Расположите в виде иерархии следующие интерфейсы: `List`, `Set`, `Map`, `SortedSet`, `SortedMap`, `Collection`, `Iterable`, `Iterator`, `NavigableSet`, `NavigableMap`.](jcf.md#Расположите-в-виде-иерархии-следующие-интерфейсы-list-set-map-sortedset-sortedmap-collection-iterable-iterator-navigableset-navigablemap)\n+ [Почему `Map` — это не `Collection`, в то время как `List` и `Set` являются `Collection`?](jcf.md#Почему-map--это-не-collection-в-то-время-как-list-и-set-являются-collection)\n+ [В чем разница между классами `java.util.Collection` и `java.util.Collections`?](jcf.md#В-чем-разница-между-классами-javautilcollection-и-javautilcollections)\n+ [Что такое «fail-fast поведение»?](jcf.md#Что-такое-fail-fast-поведение)\n+ [Какая разница между fail-fast и fail-safe?](jcf.md#Какая-разница-между-fail-fast-и-fail-safe)\n+ [Приведите примеры итераторов реализующих поведение fail-safe](jcf.md#Приведите-примеры-итераторов-реализующих-поведение-fail-safe)\n+ [Чем различаются `Enumeration` и `Iterator`.](jcf.md#Чем-различаются-enumeration-и-iterator)\n+ [Как между собой связаны `Iterable` и `Iterator`?](jcf.md#Как-между-собой-связаны-iterable-и-iterator)\n+ [Как между собой связаны `Iterable`, `Iterator` и «for-each»?](jcf.md#Как-между-собой-связаны-iterable-iterator-и-for-each)\n+ [Сравните `Iterator` и `ListIterator`.](jcf.md#Сравните-iterator-и-listiterator)\n+ [Что произойдет при вызове `Iterator.next()` без предварительного вызова `Iterator.hasNext()`?](jcf.md#Что-произойдет-при-вызове-iteratornext-без-предварительного-вызова-iteratorhasnext)\n+ [Сколько элементов будет пропущено, если `Iterator.next()` будет вызван после 10-ти вызовов `Iterator.hasNext()`?](jcf.md#Сколько-элементов-будет-пропущено-если-iteratornext-будет-вызван-после-10-ти-вызовов-iteratorhasnext)\n+ [Как поведёт себя коллекция, если вызвать `iterator.remove()`?](jcf.md#Как-поведёт-себя-коллекция-если-вызвать-iteratorremove)\n+ [Как поведёт себя уже инстанциированный итератор для `collection`, если вызвать `collection.remove()`?](jcf.md#Как-поведёт-себя-уже-инстанциированный-итератор-для-collection-если-вызвать-collectionremove)\n+ [Как избежать `ConcurrentModificationException` во время перебора коллекции?](jcf.md#Как-избежать-concurrentmodificationexception-во-время-перебора-коллекции)\n+ [Какая коллекция реализует дисциплину обслуживания FIFO?](jcf.md#Какая-коллекция-реализует-дисциплину-обслуживания-fifo)\n+ [Какая коллекция реализует дисциплину обслуживания FILO?](jcf.md#Какая-коллекция-реализует-дисциплину-обслуживания-filo)\n+ [Чем отличается `ArrayList` от `Vector`?](jcf.md#Чем-отличается-arraylist-от-vector)\n+ [Зачем добавили `ArrayList`, если уже был `Vector`?](jcf.md#Зачем-добавили-arraylist-если-уже-был-vector)\n+ [Чем отличается `ArrayList` от `LinkedList`? В каких случаях лучше использовать первый, а в каких второй?](jcf.md#Чем-отличается-arraylist-от-linkedlist-В-каких-случаях-лучше-использовать-первый-а-в-каких-второй)\n+ [Что работает быстрее `ArrayList` или `LinkedList`?](jcf.md#Что-работает-быстрее-arraylist-или-linkedlist)\n+ [Какое худшее время работы метода `contains()` для элемента, который есть в `LinkedList`?](jcf.md#Какое-худшее-время-работы-метода-contains-для-элемента-который-есть-в-linkedlist)\n+ [Какое худшее время работы метода `contains()` для элемента, который есть в `ArrayList`?](jcf.md#Какое-худшее-время-работы-метода-contains-для-элемента-который-есть-в-arraylist)\n+ [Какое худшее время работы метода `add()` для `LinkedList`?](jcf.md#Какое-худшее-время-работы-метода-add-для-linkedlist)\n+ [Какое худшее время работы метода `add()` для `ArrayList`?](jcf.md#Какое-худшее-время-работы-метода-add-для-arraylist)\n+ [Необходимо добавить 1 млн. элементов, какую структуру вы используете?](jcf.md#Необходимо-добавить-1-млн-элементов-какую-структуру-вы-используете)\n+ [Как происходит удаление элементов из `ArrayList`? Как меняется в этом случае размер `ArrayList`?](jcf.md#Как-происходит-удаление-элементов-из-arraylist-Как-меняется-в-этом-случае-размер-arraylist)\n+ [Предложите эффективный алгоритм удаления нескольких рядом стоящих элементов из середины списка, реализуемого `ArrayList`.](jcf.md#Предложите-эффективный-алгоритм-удаления-нескольких-рядом-стоящих-элементов-из-середины-списка-реализуемого-arraylist)\n+ [Сколько необходимо дополнительной памяти при вызове `ArrayList.add()`?](jcf.md#Сколько-необходимо-дополнительной-памяти-при-вызове-arraylistadd)\n+ [Сколько выделяется дополнительно памяти при вызове `LinkedList.add()`?](jcf.md#Сколько-выделяется-дополнительно-памяти-при-вызове-linkedlistadd)\n+ [Оцените количество памяти на хранение одного примитива типа `byte` в `LinkedList`?](jcf.md#Оцените-количество-памяти-на-хранение-одного-примитива-типа-byte-в-linkedlist)\n+ [Оцените количество памяти на хранение одного примитива типа `byte` в `ArrayList`?](jcf.md#Оцените-количество-памяти-на-хранение-одного-примитива-типа-byte-в-arraylist)\n+ [Для `ArrayList` или для `LinkedList` операция добавления элемента в середину (`list.add(list.size()/2, newElement)`) медленнее?](jcf.md#Для-arraylist-или-для-linkedlist-операция-добавления-элемента-в-середину-listaddlistsize2-newelement-медленнее)\n+ [В реализации класса `ArrayList` есть следующие поля: `Object[] elementData`, `int size`. Объясните, зачем хранить отдельно `size`, если всегда можно взять `elementData.length`?](jcf.md#В-реализации-класса-arraylist-есть-следующие-поля-object-elementdata-int-size-Объясните-зачем-хранить-отдельно-size-если-всегда-можно-взять-elementdatalength)\n+ [Сравните интерфейсы `Queue` и `Deque`.](jcf.md#Сравните-интерфейсы-queue-и-deque)\n+ [Кто кого расширяет: `Queue` расширяет `Deque`, или `Deque` расширяет `Queue`?](jcf.md#Кто-кого-расширяет-queue-расширяет-deque-или-deque-расширяет-queue)\n+ [Почему `LinkedList` реализует и `List`, и `Deque`?](jcf.md#Почему-linkedlist-реализует-и-list-и-deque)\n+ [`LinkedList` — это односвязный, двусвязный или четырехсвязный список?](jcf.md#linkedlist--это-односвязный-двусвязный-или-четырехсвязный-список)\n+ [Как перебрать элементы `LinkedList` в обратном порядке, не используя медленный `get(index)`?](jcf.md#Как-перебрать-элементы-linkedlist-в-обратном-порядке-не-используя-медленный-getindex)\n+ [Что позволяет сделать `PriorityQueue`?](jcf.md#Что-позволяет-сделать-priorityqueue)\n+ [`Stack` считается «устаревшим». Чем его рекомендуют заменять? Почему?](jcf.md#stack-считается-устаревшим-Чем-его-рекомендуют-заменять-Почему)\n+ [Зачем нужен `HashMap`, если есть `Hashtable`?](jcf.md#Зачем-нужен-hashmap-если-есть-hashtable)\n+ [В чем разница между `HashMap` и `IdentityHashMap`? Для чего нужна `IdentityHashMap`?](jcf.md#В-чем-разница-между-hashmap-и-identityhashmap-Для-чего-нужна-identityhashmap)\n+ [В чем разница между `HashMap` и `WeakHashMap`? Для чего используется `WeakHashMap`?](jcf.md#В-чем-разница-между-hashmap-и-weakhashmap-Для-чего-используется-weakhashmap)\n+ [В `WeakHashMap` используются WeakReferences. А почему бы не создать `SoftHashMap` на SoftReferences?](jcf.md#В-weakhashmap-используются-weakreferences-А-почему-бы-не-создать-softhashmap-на-softreferences)\n+ [В `WeakHashMap` используются WeakReferences. А почему бы не создать `PhantomHashMap` на PhantomReferences?](jcf.md#В-weakhashmap-используются-weakreferences-А-почему-бы-не-создать-phantomhashmap-на-phantomreferences)\n+ [`LinkedHashMap` - что в нем от `LinkedList`, а что от `HashMap`?](jcf.md#linkedhashmap---что-в-нем-от-linkedlist-а-что-от-hashmap)\n+ [В чем проявляется «сортированность» `SortedMap`, кроме того, что `toString()` выводит все элементы по порядку?](jcf.md#В-чем-проявляется-сортированность-sortedmap-кроме-того-что-tostring-выводит-все-элементы-по-порядку)\n+ [Как устроен `HashMap`?](jcf.md#Как-устроен-hashmap)\n+ [Согласно Кнуту и Кормену существует две основных реализации хэш-таблицы: на основе открытой адресации и на основе метода цепочек. Как реализована `HashMap`? Почему, по вашему мнению, была выбрана именно эта реализация? В чем плюсы и минусы каждого подхода?](jcf.md#Согласно-Кнуту-и-Кормену-существует-две-основных-реализации-хэш-таблицы-на-основе-открытой-адресации-и-на-основе-метода-цепочек-Как-реализована-hashmap-Почему-по-вашему-мнению-была-выбрана-именно-эта-реализация-В-чем-плюсы-и-минусы-каждого-подхода)\n+ [Как работает `HashMap` при попытке сохранить в него два элемента по ключам с одинаковым `hashCode()`, но для которых `equals() == false`?](jcf.md#Как-работает-hashmap-при-попытке-сохранить-в-него-два-элемента-по-ключам-с-одинаковым-hashcode-но-для-которых-equals--false)\n+ [Какое начальное количество корзин в `HashMap`?](jcf.md#Какое-начальное-количество-корзин-в-hashmap)\n+ [Какова оценка временной сложности операций над элементами из `HashMap`? Гарантирует ли `HashMap` указанную сложность выборки элемента?](jcf.md#Какова-оценка-временной-сложности-операций-над-элементами-из-hashmap-Гарантирует-ли-hashmap-указанную-сложность-выборки-элемента)\n+ [Возможна ли ситуация, когда `HashMap` выродится в список даже с ключами имеющими разные `hashCode()`?](jcf.md#Возможна-ли-ситуация-когда-hashmap-выродится-в-список-даже-с-ключами-имеющими-разные-hashcode)\n+ [В каком случае может быть потерян элемент в `HashMap`?](jcf.md#В-каком-случае-может-быть-потерян-элемент-в-hashmap)\n+ [Почему нельзя использовать `byte[]` в качестве ключа в `HashMap`?](jcf.md#Почему-нельзя-использовать-byte-в-качестве-ключа-в-hashmap)\n+ [Какова роль `equals()` и `hashCode()` в `HashMap`?](jcf.md#Какова-роль-equals-и-hashcode-в-hashmap)\n+ [Каково максимальное число значений `hashCode()`?](jcf.md#Каково-максимальное-число-значений-hashcode)\n+ [Какое худшее время работы метода get(key) для ключа, которого нет в `HashMap`?](jcf.md#Какое-худшее-время-работы-метода-getkey-для-ключа-которого-нет-в-hashmap)\n+ [Какое худшее время работы метода get(key) для ключа, который есть в `HashMap`?](jcf.md#Какое-худшее-время-работы-метода-getkey-для-ключа-который-есть-в-hashmap)\n+ [Почему несмотря на то, что ключ в `HashMap` не обязан реализовывать интерфейс `Comparable`, двусвязный список всегда удается преобразовать в красно-черное-дерево?](jcf.md#Почему-несмотря-на-то-что-ключ-в-HashMap-не-обязан-реализовывать-интерфейс-Comparable-двусвязный-список-всегда-удается-преобразовать-в-красно-черное-дерево)\n+ [Сколько переходов происходит в момент вызова `HashMap.get(key)` по ключу, который есть в таблице?](jcf.md#Сколько-переходов-происходит-в-момент-вызова-hashmapgetkey-по-ключу-который-есть-в-таблице)\n+ [Сколько создается новых объектов, когда вы добавляете новый элемент в `HashMap`?](jcf.md#Сколько-создается-новых-объектов-когда-вы-добавляете-новый-элемент-в-hashmap)\n+ [Как и когда происходит увеличение количества корзин в `HashMap`?](jcf.md#Как-и-когда-происходит-увеличение-количества-корзин-в-hashmap)\n+ [Объясните смысл параметров в конструкторе `HashMap(int initialCapacity, float loadFactor)`.](jcf.md#Объясните-смысл-параметров-в-конструкторе-hashmapint-initialcapacity-float-loadfactor)\n+ [Будет ли работать `HashMap`, если все добавляемые ключи будут иметь одинаковый `hashCode()`?](jcf.md#Будет-ли-работать-hashmap-если-все-добавляемые-ключи-будут-иметь-одинаковый-hashcode)\n+ [Как перебрать все ключи `Map`?](jcf.md#Как-перебрать-все-ключи-map)\n+ [Как перебрать все значения `Map`?](jcf.md#Как-перебрать-все-значения-map)\n+ [Как перебрать все пары «ключ-значение» в `Map`?](jcf.md#Как-перебрать-все-пары-ключ-значение-в-map)\n+ [В чем отличия `TreeSet` и `HashSet`?](jcf.md#В-чем-отличия-treeset-и-hashset)\n+ [Что будет, если добавлять элементы в `TreeSet` по возрастанию?](jcf.md#Что-будет-если-добавлять-элементы-в-treeset-по-возрастанию)\n+ [Чем `LinkedHashSet` отличается от `HashSet`?](jcf.md#Чем-linkedhashset-отличается-от-hashset)\n+ [Для `Enum` есть специальный класс `java.util.EnumSet`. Зачем? Чем авторов не устраивал `HashSet` или `TreeSet`?](jcf.md#Для-enum-есть-специальный-класс-javautilenumset-Зачем-Чем-авторов-не-устраивал-hashset-или-treeset)\n+ [Какие существуют способы перебирать элементы списка?](jcf.md#Какие-существуют-способы-перебирать-элементы-списка)\n+ [Каким образом можно получить синхронизированные объекты стандартных коллекций?](jcf.md#Каким-образом-можно-получить-синхронизированные-объекты-стандартных-коллекций)\n+ [Как получить коллекцию только для чтения?](jcf.md#Как-получить-коллекцию-только-для-чтения)\n+ [Напишите однопоточную программу, которая заставляет коллекцию выбросить `ConcurrentModificationException`.](jcf.md#Напишите-однопоточную-программу-которая-заставляет-коллекцию-выбросить-concurrentmodificationexception)\n+ [Приведите пример, когда какая-либо коллекция выбрасывает `UnsupportedOperationException`.](jcf.md#Приведите-пример-когда-какая-либо-коллекция-выбрасывает-unsupportedoperationexception)\n+ [Реализуйте симметрическую разность двух коллекций используя методы `Collection` (`addAll(...)`, `removeAll(...)`, `retainAll(...)`).](jcf.md#Реализуйте-симметрическую-разность-двух-коллекций-используя-методы-collection-addall-removeall-retainall)\n+ [Как, используя LinkedHashMap, сделать кэш c «invalidation policy»?](jcf.md#Как-используя-linkedhashmap-сделать-кэш-c-invalidation-policy)\n+ [Как одной строчкой скопировать элементы любой `collection` в массив?](jcf.md#Как-одной-строчкой-скопировать-элементы-любой-collection-в-массив)\n+ [Как одним вызовом из `List` получить `List` со всеми элементами, кроме первых и последних 3-х?](jcf.md#Как-одним-вызовом-из-list-получить-list-со-всеми-элементами-кроме-первых-и-последних-3-х)\n+ [Как одной строчкой преобразовать `HashSet` в `ArrayList`?](jcf.md#Как-одной-строчкой-преобразовать-hashset-в-arraylist)\n+ [Как одной строчкой преобразовать `ArrayList` в `HashSet`?](jcf.md#Как-одной-строчкой-преобразовать-arraylist-в-hashset)\n+ [Сделайте `HashSet` из ключей `HashMap`.](jcf.md#Сделайте-hashset-из-ключей-hashmap)\n+ [Сделайте `HashMap` из `HashSet<Map.Entry<K, V>>`.](jcf.md#Сделайте-hashmap-из-hashsetmapentryk-v)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Java 8\n+ [Какие нововведения, появились в Java 8 и JDK 8?](java8.md#Какие-нововведения-появились-в-java-8-и-jdk-8)\n+ [Что такое _«лямбда»_? Какова структура и особенности использования лямбда-выражения?](java8.md#Что-такое-лямбда-Какова-структура-и-особенности-использования-лямбда-выражения)\n+ [К каким переменным есть доступ у лямбда-выражений?](java8.md#К-каким-переменным-есть-доступ-у-лямбда-выражений)\n+ [Как отсортировать список строк с помощью лямбда-выражения?](java8.md#Как-отсортировать-список-строк-с-помощью-лямбда-выражения)\n+ [Что такое «ссылка на метод»?](java8.md#Что-такое-ссылка-на-метод)\n+ [Какие виды ссылок на методы вы знаете?](java8.md#Какие-виды-ссылок-на-методы-вы-знаете)\n+ [Объясните выражение `System.out::println`.](java8.md#Объясните-выражение-systemoutprintln)\n+ [Что такое «функциональные интерфейсы»?](java8.md#Что-такое-функциональные-интерфейсы)\n+ [Для чего нужны функциональные интерфейсы `Function<T,R>`, `DoubleFunction<R>`, `IntFunction<R>` и `LongFunction<R>`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-functiontr-doublefunctionr-intfunctionr-и-longfunctionr)\n+ [Для чего нужны функциональные интерфейсы `UnaryOperator<T>`, `DoubleUnaryOperator`, `IntUnaryOperator` и `LongUnaryOperator`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-unaryoperatort-doubleunaryoperator-intunaryoperator-и-longunaryoperator)\n+ [Для чего нужны функциональные интерфейсы `BinaryOperator<T>`, `DoubleBinaryOperator`, `IntBinaryOperator` и `LongBinaryOperator`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-binaryoperatort-doublebinaryoperator-intbinaryoperator-и-longbinaryoperator)\n+ [Для чего нужны функциональные интерфейсы `Predicate<T>`, `DoublePredicate`, `IntPredicate` и `LongPredicate`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-predicatet-doublepredicate-intpredicate-и-longpredicate)\n+ [Для чего нужны функциональные интерфейсы `Consumer<T>`, `DoubleConsumer`, `IntConsumer` и `LongConsumer`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-consumert-doubleconsumer-intconsumer-и-longconsumer)\n+ [Для чего нужны функциональные интерфейсы `Supplier<T>`,  `BooleanSupplier`, `DoubleSupplier`, `IntSupplier` и `LongSupplier`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-suppliert--booleansupplier-doublesupplier-intsupplier-и-longsupplier)\n+ [Для чего нужен функциональный интерфейс `BiConsumer<T,U>`?](java8.md#Для-чего-нужен-функциональный-интерфейс-biconsumertu)\n+ [Для чего нужен функциональный интерфейс `BiFunction<T,U,R>`?](java8.md#Для-чего-нужен-функциональный-интерфейс-bifunctiontur)\n+ [Для чего нужен функциональный интерфейс `BiPredicate<T,U>`?](java8.md#Для-чего-нужен-функциональный-интерфейс-bipredicatetu)\n+ [Для чего нужны функциональные интерфейсы вида `_To_Function`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-вида-tofunction)\n+ [Для чего нужны функциональные интерфейсы `ToDoubleBiFunction<T,U>`, `ToIntBiFunction<T,U>` и `ToLongBiFunction<T,U>`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-todoublebifunctiontu-tointbifunctiontu-и-tolongbifunctiontu)\n+ [Для чего нужны функциональные интерфейсы `ToDoubleFunction<T>`, `ToIntFunction<T>` и `ToLongFunction<T>`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-todoublefunctiont-tointfunctiont-и-tolongfunctiont)\n+ [Для чего нужны функциональные интерфейсы `ObjDoubleConsumer<T>`, `ObjIntConsumer<T>` и `ObjLongConsumer<T>`?](java8.md#Для-чего-нужны-функциональные-интерфейсы-objdoubleconsumert-objintconsumert-и-objlongconsumert)\n+ [Что такое `StringJoiner`?](java8.md#Что-такое-stringjoiner)\n+ [Что такое `default` методы интрефейса?](java8.md#Что-такое-default-методы-интрефейса)\n+ [Как вызывать `default` метод интерфейса в реализующем этот интерфейс классе?](java8.md#Как-вызывать-default-метод-интерфейса-в-реализующем-этот-интерфейс-классе)\n+ [Что такое `static` метод интерфейса?](java8.md#Что-такое-static-метод-интерфейса)\n+ [Как вызывать `static` метод интерфейса?](java8.md#Как-вызывать-static-метод-интерфейса)\n+ [Что такое `Optional`?](java8.md#Что-такое-optional)\n+ [Что такое `Stream`?](java8.md#Что-такое-stream)\n+ [Какие существуют способы создания стрима?](java8.md#Какие-существуют-способы-создания-стрима)\n+ [В чем разница между `Collection` и `Stream`?](java8.md#В-чем-разница-между-collection-и-stream)\n+ [Для чего нужен метод `collect()` в стримах?](java8.md#Для-чего-нужен-метод-collect-в-стримах)\n+ [Для чего в стримах применяются методы `forEach()` и `forEachOrdered()`?](java8.md#Для-чего-в-стримах-применяются-методы-foreach-и-foreachordered)\n+ [Для чего в стримах предназначены методы `map()` и `mapToInt()`, `mapToDouble()`, `mapToLong()`?](java8.md#Для-чего-в-стримах-предназначены-методы-map-и-maptoint-maptodouble-maptolong)\n+ [Какова цель метода `filter()` в стримах?](java8.md#Какова-цель-метода-filter-в-стримах)\n+ [Для чего в стримах предназначен метод `limit()`?](java8.md#Для-чего-в-стримах-предназначен-метод-limit)\n+ [Для чего в стримах предназначен метод `sorted()`?](java8.md#Для-чего-в-стримах-предназначен-метод-sorted)\n+ [Для чего в стримах предназначены методы `flatMap()`, `flatMapToInt()`, `flatMapToDouble()`, `flatMapToLong()`?](java8.md#Для-чего-в-стримах-предназначены-методы-flatmap-flatmaptoint-flatmaptodouble-flatmaptolong)\n+ [Расскажите о параллельной обработке в Java 8.](java8.md#Расскажите-о-параллельной-обработке-в-java-8)\n+ [Какие конечные методы работы со стримами вы знаете?](java8.md#Какие-конечные-методы-работы-со-стримами-вы-знаете)\n+ [Какие промежуточные методы работы со стримами вы знаете?](java8.md#Какие-промежуточные-методы-работы-со-стримами-вы-знаете)\n+ [Как вывести на экран 10 случайных чисел, используя `forEach()`?](java8.md#Как-вывести-на-экран-10-случайных-чисел-используя-foreach)\n+ [Как можно вывести на экран уникальные квадраты чисел используя метод `map()`?](java8.md#Как-можно-вывести-на-экран-уникальные-квадраты-чисел-используя-метод-map)\n+ [Как вывести на экран количество пустых строк с помощью метода `filter()`?](java8.md#Как-вывести-на-экран-количество-пустых-строк-с-помощью-метода-filter)\n+ [Как вывести на экран 10 случайных чисел в порядке возрастания?](java8.md#Как-вывести-на-экран-10-случайных-чисел-в-порядке-возрастания)\n+ [Как найти максимальное число в наборе?](java8.md#Как-найти-максимальное-число-в-наборе)\n+ [Как найти минимальное число в наборе?](java8.md#Как-найти-минимальное-число-в-наборе)\n+ [Как получить сумму всех чисел в наборе?](java8.md#Как-получить-сумму-всех-чисел-в-наборе)\n+ [Как получить среднее значение всех чисел?](java8.md#Как-получить-среднее-значение-всех-чисел)\n+ [Какие дополнительные методы для работы с ассоциативными массивами (maps) появились в Java 8?](java8.md#Какие-дополнительные-методы-для-работы-с-ассоциативными-массивами-maps-появились-в-java-8)\n+ [Что такое `LocalDateTime`?](java8.md#Что-такое-localdatetime)\n+ [Что такое `ZonedDateTime`?](java8.md#Что-такое-zoneddatetime)\n+ [Как получить текущую дату с использованием Date Time API из Java 8?](java8.md#Как-получить-текущую-дату-с-использованием-date-time-api-из-java-8)\n+ [Как добавить 1 неделю, 1 месяц, 1 год, 10 лет к текущей дате с использованием Date Time API?](java8.md#Как-добавить-1-неделю-1-месяц-1-год-10-лет-к-текущей-дате-с-использованием-date-time-api)\n+ [Как получить следующий вторник используя Date Time API?](java8.md#Как-получить-следующий-вторник-используя-date-time-api)\n+ [Как получить вторую субботу текущего месяца используя Date Time API?](java8.md#Как-получить-вторую-субботу-текущего-месяца-используя-date-time-api)\n+ [Как получить текущее время с точностью до миллисекунд используя Date Time API?](java8.md#Как-получить-текущее-время-с-точностью-до-миллисекунд-используя-date-time-api)\n+ [Как получить текущее время по местному времени с точностью до миллисекунд используя Date Time API?](java8.md#Как-получить-текущее-время-по-местному-времени-с-точностью-до-миллисекунд-используя-date-time-api)\n+ [Как определить повторяемую аннотацию?](java8.md#Как-определить-повторяемую-аннотацию)\n+ [Что такое `Nashorn`?](java8.md#Что-такое-nashorn)\n+ [Что такое `jjs`?](java8.md#Что-такое-jjs)\n+ [Какой класс появился в Java 8 для кодирования/декодирования данных?](java8.md#Какой-класс-появился-в-java-8-для-кодированиядекодирования-данных)\n+ [Как создать Base64 кодировщик и декодировщик?](java8.md#Как-создать-base64-кодировщик-и-декодировщик)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Потоки ввода/вывода в Java\n+ [В чём заключается разница между IO и NIO?](io.md#В-чём-заключается-разница-между-io-и-nio)\n+ [Какие особенности NIO вы знаете?](io.md#Какие-особенности-nio-вы-знаете)\n+ [Что такое _«каналы»_?](io.md#Что-такое-каналы)\n+ [Какие существуют виды потоков ввода/вывода?](io.md#Какие-существуют-виды-потоков-вводавывода)\n+ [Назовите основные классы потоков ввода/вывода.](io.md#Назовите-основные-классы-потоков-вводавывода)\n+ [В каких пакетах расположены классы потоков ввода/вывода?](io.md#В-каких-пакетах-расположены-классы-потоков-вводавывода)\n+ [Какие подклассы класса `InputStream` вы знаете, для чего они предназначены?](io.md#Какие-подклассы-класса-inputstream-вы-знаете-для-чего-они-предназначены)\n+ [Для чего используется `PushbackInputStream`?](io.md#Для-чего-используется-pushbackinputstream)\n+ [Для чего используется `SequenceInputStream`?](io.md#Для-чего-используется-sequenceinputstream)\n+ [Какой класс позволяет читать данные из входного байтового потока в формате примитивных типов данных?](io.md#Какой-класс-позволяет-читать-данные-из-входного-байтового-потока-в-формате-примитивных-типов-данных)\n+ [Какие подклассы класса `OutputStream` вы знаете, для чего они предназначены?](io.md#Какие-подклассы-класса-outputstream-вы-знаете-для-чего-они-предназначены)\n+ [Какие подклассы класса `Reader` вы знаете, для чего они предназначены?](io.md#Какие-подклассы-класса-reader-вы-знаете-для-чего-они-предназначены)\n+ [Какие подклассы класса `Writer` вы знаете, для чего они предназначены?](io.md#Какие-подклассы-класса-writer-вы-знаете-для-чего-они-предназначены)\n+ [В чем отличие класса `PrintWriter` от `PrintStream`?](io.md#В-чем-отличие-класса-printwriter-от-printstream)\n+ [Чем отличаются и что общего у `InputStream`, `OutputStream`, `Reader`, `Writer`?](io.md#Чем-отличаются-и-что-общего-у-inputstream-outputstream-reader-writer)\n+ [Какие классы позволяют преобразовать байтовые потоки в символьные и обратно?](io.md#Какие-классы-позволяют-преобразовать-байтовые-потоки-в-символьные-и-обратно)\n+ [Какие классы позволяют ускорить чтение/запись за счет использования буфера?](io.md#Какие-классы-позволяют-ускорить-чтениезапись-за-счет-использования-буфера)\n+ [Какой класс предназначен для работы с элементами файловой системы?](io.md#Какой-класс-предназначен-для-работы-с-элементами-файловой-системы)\n+ [Какие методы класса `File` вы знаете?](io.md#Какие-методы-класса-file-вы-знаете)\n+ [Что вы знаете об интерфейсе `FileFilter`?](io.md#Что-вы-знаете-об-интерфейсе-filefilter)\n+ [Как выбрать все элементы определенного каталога по критерию (например, с определенным расширением)?](io.md#Как-выбрать-все-элементы-определенного-каталога-по-критерию-например-с-определенным-расширением)\n+ [Что вы знаете о `RandomAccessFile`?](io.md#Что-вы-знаете-о-randomaccessfile)\n+ [Какие режимы доступа к файлу есть у `RandomAccessFile`?](io.md#Какие-режимы-доступа-к-файлу-есть-у-randomaccessfile)\n+ [Какие классы поддерживают чтение и запись потоков в компрессированном формате?](io.md#Какие-классы-поддерживают-чтение-и-запись-потоков-в-компрессированном-формате)\n+ [Существует ли возможность перенаправить потоки стандартного ввода/вывода?](io.md#Существует-ли-возможность-перенаправить-потоки-стандартного-вводавывода)\n+ [Какой символ является разделителем при указании пути в файловой системе?](io.md#Какой-символ-является-разделителем-при-указании-пути-в-файловой-системе)\n+ [Что такое _«абсолютный путь»_ и _«относительный путь»_?](io.md#Что-такое-абсолютный-путь-и-относительный-путь)\n+ [Что такое _«символьная ссылка»_?](io.md#Что-такое-символьная-ссылка)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Сериализация\n+ [Что такое _«сериализация»_?](serialization.md#Что-такое-сериализация)\n+ [Опишите процесс сериализации/десериализации с использованием `Serializable`.](serialization.md#Опишите-процесс-сериализациидесериализации-с-использованием-serializable)\n+ [Как изменить стандартное поведение сериализации/десериализации?](serialization.md#Как-изменить-стандартное-поведение-сериализациидесериализации)\n+ [Как исключить поля из сериализации?](serialization.md#Как-исключить-поля-из-сериализации)\n+ [Что обозначает ключевое слово `transient`?](serialization.md#Что-обозначает-ключевое-слово-transient)\n+ [Какое влияние оказывают на сериализуемость модификаторы полей `static` и `final`](serialization.md#Какое-влияние-оказывают-на-сериализуемость-модификаторы-полей-static-и-final)\n+ [Как не допустить сериализацию?](serialization.md#Как-не-допустить-сериализацию)\n+ [Как создать собственный протокол сериализации?](serialization.md#Как-создать-собственный-протокол-сериализации)\n+ [Какая роль поля `serialVersionUID` в сериализации?](serialization.md#Какая-роль-поля-serialversionuid-в-сериализации)\n+ [Когда стоит изменять значение поля `serialVersionUID`?](serialization.md#Когда-стоит-изменять-значение-поля-serialversionuid)\n+ [В чем проблема сериализации Singleton?](serialization.md#В-чем-проблема-сериализации-singleton)\n+ [Какие существуют способы контроля за значениями десериализованного объекта](serialization.md#Какие-существуют-способы-контроля-за-значениями-десериализованного-объекта)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Многопоточность\n+ [Расскажите о модели памяти Java?](concurrency.md#Расскажите-о-модели-памяти-java)\n+ [Что такое «потокобезопасность»?](concurrency.md#Что-такое-потокобезопасность)\n+ [В чём разница между _«конкуренцией»_ и _«параллелизмом»_?](concurrency.md#В-чём-разница-между-конкуренцией-и-параллелизмом)\n+ [Что такое _«кооперативная многозадачность»_? Какой тип многозадачности использует Java? Чем обусловлен этот выбор?](concurrency.md#Что-такое-кооперативная-многозадачность-Какой-тип-многозадачности-использует-java-Чем-обусловлен-этот-выбор)\n+ [Что такое _ordering_, _as-if-serial semantics_, _sequential consistency_, _visibility_, _atomicity_, _happens-before_, _mutual exclusion_, _safe publication_?](concurrency.md#Что-такое-ordering-as-if-serial-semantics-sequential-consistency-visibility-atomicity-happens-before-mutual-exclusion-safe-publication)\n+ [Чем отличается процесс от потока?](concurrency.md#Чем-отличается-процесс-от-потока)\n+ [Что такое _«зелёные потоки»_ и есть ли они в Java?](concurrency.md#Что-такое-зелёные-потоки-и-есть-ли-они-в-java)\n+ [Каким образом можно создать поток?](concurrency.md#Каким-образом-можно-создать-поток)\n+ [Чем различаются `Thread` и `Runnable`?](concurrency.md#Чем-различаются-thread-и-runnable)\n+ [В чём заключается разница между методами `start()` и `run()`?](concurrency.md#В-чём-заключается-разница-между-методами-start-и-run)\n+ [Как принудительно запустить поток?](concurrency.md#Как-принудительно-запустить-поток)\n+ [Что такое _«монитор»_ в Java?](concurrency.md#Что-такое-монитор-в-java)\n+ [Дайте определение понятию «синхронизация».](concurrency.md#Дайте-определение-понятию-синхронизация)\n+ [Какие существуют способы синхронизации в Java?](concurrency.md#Какие-существуют-способы-синхронизации-в-java)\n+ [В каких состояниях может находиться поток?](concurrency.md#В-каких-состояниях-может-находиться-поток)\n+ [Можно ли создавать новые экземпляры класса, пока выполняется `static synchronized` метод?](concurrency.md#Можно-ли-создавать-новые-экземпляры-класса-пока-выполняется-static-synchronized-метод)\n+ [Зачем может быть нужен `private` мьютекс?](concurrency.md#Зачем-может-быть-нужен-private-мьютекс)\n+ [Как работают методы `wait()` и `notify()`/`notifyAll()`?](concurrency.md#Как-работают-методы-wait-и-notifynotifyall)\n+ [В чем разница между `notify()` и `notifyAll()`?](concurrency.md#В-чем-разница-между-notify-и-notifyall)\n+ [Почему методы `wait()` и `notify()` вызываются только в синхронизированном блоке?](concurrency.md#Почему-методы-wait-и-notify-вызываются-только-в-синхронизированном-блоке)\n+ [Чем отличается работа метода `wait()` с параметром и без параметра?](concurrency.md#Чем-отличается-работа-метода-wait-с-параметром-и-без-параметра)\n+ [Чем отличаются методы `Thread.sleep()` и `Thread.yield()`?](concurrency.md#Чем-отличаются-методы-threadsleep-и-threadyield)\n+ [Как работает метод `Thread.join()`?](concurrency.md#Как-работает-метод-threadjoin)\n+ [Что такое _deadlock_?](concurrency.md#Что-такое-deadlock)\n+ [Что такое _livelock_?](concurrency.md#Что-такое-livelock)\n+ [Как проверить, удерживает ли поток монитор определённого ресурса?](concurrency.md#Как-проверить-удерживает-ли-поток-монитор-определённого-ресурса)\n+ [На каком объекте происходит синхронизация при вызове `static synchronized` метода?](concurrency.md#На-каком-объекте-происходит-синхронизация-при-вызове-static-synchronized-метода)\n+ [Для чего используется ключевое слово `volatile`, `synchronized`, `transient`, `native`?](concurrency.md#Для-чего-используется-ключевое-слово-volatile-synchronized-transient-native)\n+ [В чём различия между `volatile` и _Atomic_ переменными?](concurrency.md#В-чём-различия-между-volatile-и-atomic-переменными)\n+ [ В чём заключаются различия между `java.util.concurrent.Atomic*.compareAndSwap()` и `java.util.concurrent.Atomic*.weakCompareAndSwap()`.](concurrency.md#-В-чём-заключаются-различия-между-javautilconcurrentatomiccompareandswap-и-javautilconcurrentatomicweakcompareandswap)\n+ [Что значит _«приоритет потока»_?](concurrency.md#Что-значит-приоритет-потока)\n+ [Что такое _«потоки-демоны»_?](concurrency.md#Что-такое-потоки-демоны)\n+ [Можно ли сделать основной поток программы демоном?](concurrency.md#Можно-ли-сделать-основной-поток-программы-демоном)\n+ [Что значит _«усыпить»_ поток?](concurrency.md#Что-значит-усыпить-поток)\n+ [Чем отличаются два интерфейса `Runnable` и `Callable`?](concurrency.md#Чем-отличаются-два-интерфейса-runnable-и-callable)\n+ [Что такое `FutureTask`?](concurrency.md#Что-такое-futuretask)\n+ [В чем заключаются различия между `CyclicBarrier` и `CountDownLatch`?](concurrency.md#В-чем-заключаются-различия-между-cyclicbarrier-и-countdownlatch)\n+ [Что такое _race condition_?](concurrency.md#Что-такое-race-condition)\n+ [Существует ли способ решения проблемы _race condition_?](concurrency.md#Существует-ли-способ-решения-проблемы-race-condition)\n+ [Как остановить поток?](concurrency.md#Как-остановить-поток)\n+ [Почему не рекомендуется использовать метод `Thread.stop()`?](concurrency.md#Почему-не-рекомендуется-использовать-метод-threadstop)\n+ [Что происходит, когда в потоке выбрасывается исключение?](concurrency.md#Что-происходит-когда-в-потоке-выбрасывается-исключение)\n+ [В чем разница между `interrupted()` и `isInterrupted()`?](concurrency.md#В-чем-разница-между-interrupted-и-isinterrupted)\n+ [Что такое _«пул потоков»_?](concurrency.md#Что-такое-пул-потоков)\n+ [Какого размера должен быть пул потоков?](concurrency.md#Какого-размера-должен-быть-пул-потоков)\n+ [Что будет, если очередь пула потоков уже заполнена, но подаётся новая задача?](concurrency.md#Что-будет-если-очередь-пула-потоков-уже-заполнена-но-подаётся-новая-задача)\n+ [В чём заключается различие между методами `submit()` и `execute()` у пула потоков?](concurrency.md#В-чём-заключается-различие-между-методами-submit-и-execute-у-пула-потоков)\n+ [В чем заключаются различия между cтеком (stack) и кучей (heap) с точки зрения многопоточности?](concurrency.md#В-чем-заключаются-различия-между-cтеком-stack-и-кучей-heap-с-точки-зрения-многопоточности)\n+ [Как поделиться данными между двумя потоками?](concurrency.md#Как-поделиться-данными-между-двумя-потоками)\n+ [Какой параметр запуска JVM используется для контроля размера стека потока?](concurrency.md#Какой-параметр-запуска-jvm-используется-для-контроля-размера-стека-потока)\n+ [Как получить дамп потока?](concurrency.md#Как-получить-дамп-потока)\n+ [Что такое _ThreadLocal-переменная_?](concurrency.md#Что-такое-threadlocal-переменная)\n+ [Назовите различия между `synchronized` и `ReentrantLock`?](concurrency.md#Назовите-различия-между-synchronized-и-reentrantlock)\n+ [Что такое `ReadWriteLock`?](concurrency.md#Что-такое-readwritelock)\n+ [Что такое _«блокирующий метод»_?](concurrency.md#Что-такое-блокирующий-метод)\n+ [Что такое _«фреймворк Fork/Join»_?](concurrency.md#Что-такое-фреймворк-forkjoin)\n+ [Что такое `Semaphore`?](concurrency.md#Что-такое-semaphore)\n+ [Что такое _double checked locking Singleton_?](concurrency.md#Что-такое-double-checked-locking-singleton)\n+ [Как создать потокобезопасный Singleton?](concurrency.md#Как-создать-потокобезопасный-singleton)\n+ [Чем полезны неизменяемые объекты?](concurrency.md#Чем-полезны-неизменяемые-объекты)\n+ [Что такое _busy spin_?](concurrency.md#Что-такое-busy-spin)\n+ [Перечислите принципы, которым вы следуете в многопоточном программировании?](concurrency.md#Перечислите-принципы-которым-вы-следуете-в-многопоточном-программировании)\n+ [Какое из следующих утверждений о потоках неверно?](concurrency.md#Какое-из-следующих-утверждений-о-потоках-неверно)\n+ [Даны 3 потока Т1, Т2 и Т3? Как реализовать выполнение в последовательности Т1, Т2, Т3?](concurrency.md#Даны-3-потока-Т1-Т2-и-Т3-Как-реализовать-выполнение-в-последовательности-Т1-Т2-Т3)\n+ [Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`).](concurrency.md#Напишите-минимальный-неблокирующий-стек-всего-два-метода--push-и-pop)\n+ [Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`) с использованием `Semaphore`.](concurrency.md#Напишите-минимальный-неблокирующий-стек-всего-два-метода--push-и-pop-с-использованием-semaphore)\n+ [Напишите минимальный неблокирующий ArrayList (всего четыре метода — `add()`, `get()`, `remove()`, `size()`).](concurrency.md#Напишите-минимальный-неблокирующий-arraylist-всего-четыре-метода--add-get-remove-size)\n+ [Напишите потокобезопасную реализацию класса с неблокирующим методом `BigInteger next()`, который возвращает элементы последовательности: `[1, 2, 4, 8, 16, ...]`.](concurrency.md#Напишите-потокобезопасную-реализацию-класса-с-неблокирующим-методом-biginteger-next-который-возвращает-элементы-последовательности-1-2-4-8-16-)\n+ [Напишите простейший многопоточный ограниченный буфер с использованием `synchronized`.](concurrency.md#Напишите-простейший-многопоточный-ограниченный-буфер-с-использованием-synchronized)\n+ [Напишите простейший многопоточный ограниченный буфер с использованием `ReentrantLock`.](concurrency.md#Напишите-простейший-многопоточный-ограниченный-буфер-с-использованием-reentrantlock)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Реактивное программирование\n\n* [Что такое реактивное программирование и чем оно отличается от процедурного программирования?](reactive.md#что-такое-реактивное-программирование-и-чем-оно-отличается-от-процедурного-программирования)\n* [Объясните концепцию потоков данных в реактивном программировании](reactive.md#объясните-концепцию-потоков-данных-в-реактивном-программировании)\n* [Что такое паттерн Observer и как он лежит в основе реактивного программирования?](reactive.md#что-такое-паттерн-observer-и-как-он-лежит-в-основе-реактивного-программирования)\n* [Опишите роль Observable и Observer в реактивном программировании](reactive.md#опишите-роль-observable-и-observer-в-реактивном-программировании)\n* [Что такое backpressure в контексте реактивного программирования?](reactive.md#что-такое-backpressure-в-контексте-реактивного-программирования)\n* [Объясните разницу между Hot и Cold Observable](reactive.md#объясните-разницу-между-hot-и-cold-observable)\n* [Какова роль Подписки в реактивном программировании?](reactive.md#какова-роль-подписки-в-реактивном-программировании)\n* [Как отписаться от потока для предотвращения утечки памяти?](reactive.md#как-отписаться-от-потока-для-предотвращения-утечки-памяти)\n* [Какие есть операторы в Project Reactor и для чего они используются?](reactive.md#какие-есть-операторы-в-project-reactor-и-для-чего-они-используются)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Servlets, JSP, JSTL\n+ [Что такое _«сервлет»_?](servlets.md#Что-такое-сервлет)\n+ [В чем заключаются преимущества технологии сервлетов над CGI (Common Gateway Interface)?](servlets.md#В-чем-заключаются-преимущества-технологии-сервлетов-над-cgi-common-gateway-interface)\n+ [Какова структура веб-проекта?](servlets.md#Какова-структура-веб-проекта)\n+ [Что такое _«контейнер сервлетов»_?](servlets.md#Что-такое-контейнер-сервлетов)\n+ [Зачем нужны сервера приложений, если есть контейнеры сервлетов?](servlets.md#Зачем-нужны-сервера-приложений-если-есть-контейнеры-сервлетов)\n+ [Как контейнер сервлетов управляет жизненным циклом сервлета, когда и какие методы вызываются?](servlets.md#Как-контейнер-сервлетов-управляет-жизненным-циклом-сервлета-когда-и-какие-методы-вызываются)\n+ [Что такое _«дескриптор развертывания»_?](servlets.md#Что-такое-дескриптор-развертывания)\n+ [Какие действия необходимо проделать при создании сервлетов?](servlets.md#Какие-действия-необходимо-проделать-при-создании-сервлетов)\n+ [В каком случае требуется переопределять метод `service()`?](servlets.md#В-каком-случае-требуется-переопределять-метод-service)\n+ [Есть ли смысл определять для сервлета конструктор? Каким образом лучше инициализировать данные?](servlets.md#Есть-ли-смысл-определять-для-сервлета-конструктор-Каким-образом-лучше-инициализировать-данные)\n+ [Почему необходимо переопределить только `init()` метод без аргументов?](servlets.md#Почему-необходимо-переопределить-только-init-метод-без-аргументов)\n+ [Какие наиболее распространенные задачи выполняются в контейнере сервлетов?](servlets.md#Какие-наиболее-распространенные-задачи-выполняются-в-контейнере-сервлетов)\n+ [Что вы знаете о _сервлетных фильтрах_?](servlets.md#Что-вы-знаете-о-сервлетных-фильтрах)\n+ [Зачем в сервлетах используются различные _listener_?](servlets.md#Зачем-в-сервлетах-используются-различные-listener)\n+ [Когда стоит использовать фильтры сервлетов, а когда слушателей?](servlets.md#Когда-стоит-использовать-фильтры-сервлетов-а-когда-слушателей)\n+ [Как реализовать запуск сервлета одновременно с запуском приложения?](servlets.md#Как-реализовать-запуск-сервлета-одновременно-с-запуском-приложения)\n+ [Как обработать в приложении исключения, выброшенные другим сервлетом?](servlets.md#Как-обработать-в-приложении-исключения-выброшенные-другим-сервлетом)\n+ [Что представляет собой `ServletConfig`?](servlets.md#Что-представляет-собой-servletconfig)\n+ [Что представляет собой `ServletContext`?](servlets.md#Что-представляет-собой-servletcontext)\n+ [В чем отличия `ServletContext` и `ServletConfig`?](servlets.md#В-чем-отличия-servletcontext-и-servletconfig)\n+ [Для чего нужен интерфейс `ServletResponse`?](servlets.md#Для-чего-нужен-интерфейс-servletresponse)\n+ [Для чего нужен интерфейс `ServletRequest`?](servlets.md#Для-чего-нужен-интерфейс-servletrequest)\n+ [Что такое `Request Dispatcher`?](servlets.md#Что-такое-request-dispatcher)\n+ [Как из одного сервлета вызвать другой сервлет?](servlets.md#Как-из-одного-сервлета-вызвать-другой-сервлет)\n+ [Чем отличается `sendRedirect()` от `forward()`?](servlets.md#Чем-отличается-sendredirect-от-forward)\n+ [Для чего используются атрибуты сервлетов и как происходит работа с ними?](servlets.md#Для-чего-используются-атрибуты-сервлетов-и-как-происходит-работа-с-ними)\n+ [Каким образом можно допустить в сервлете deadlock?](servlets.md#Каким-образом-можно-допустить-в-сервлете-deadlock)\n+ [Как получить реальное расположение сервлета на сервере?](servlets.md#Как-получить-реальное-расположение-сервлета-на-сервере)\n+ [Как получить информацию о сервере из сервлета?](servlets.md#Как-получить-информацию-о-сервере-из-сервлета)\n+ [Как получить IP адрес клиента на сервере?](servlets.md#Как-получить-ip-адрес-клиента-на-сервере)\n+ [Какие классы-обертки для сервлетов вы знаете?](servlets.md#Какие-классы-обертки-для-сервлетов-вы-знаете)\n+ [В чем отличия `GenericServlet` и `HttpServlet`?](servlets.md#В-чем-отличия-genericservlet-и-httpservlet)\n+ [Почему `HttpServlet` класс объявлен как абстрактный?](servlets.md#Почему-httpservlet-класс-объявлен-как-абстрактный)\n+ [Какие основные методы присутствуют в классе `HttpServlet`?](servlets.md#Какие-основные-методы-присутствуют-в-классе-httpservlet)\n+ [Стоит ли волноваться о многопоточной безопасности работая с сервлетами?](servlets.md#Стоит-ли-волноваться-о-многопоточной-безопасности-работая-с-сервлетами)\n+ [Какой метод HTTP не является неизменяемым?](servlets.md#Какой-метод-http-не-является-неизменяемым)\n+ [Какие есть методы отправки данных с клиента на сервер?](servlets.md#Какие-есть-методы-отправки-данных-с-клиента-на-сервер)\n+ [В чем разница между методами `GET` и `POST`?](servlets.md#В-чем-разница-между-методами-get-и-post)\n+ [В чем разница между `PrintWriter` и `ServletOutputStream`?](servlets.md#В-чем-разница-между-printwriter-и-servletoutputstream)\n+ [Можно ли одновременно использовать в сервлете `PrintWriter` и `ServletOutputStream`?](servlets.md#Можно-ли-одновременно-использовать-в-сервлете-printwriter-и-servletoutputstream)\n+ [Расскажите об интерфейсе `SingleThreadModel`.](servlets.md#Расскажите-об-интерфейсе-singlethreadmodel)\n+ [Что означает _URL encoding_? Как это осуществить в Java?](servlets.md#Что-означает-url-encoding-Как-это-осуществить-в-java)\n+ [Какие различные методы управления сессией в сервлетах вы знаете?](servlets.md#Какие-различные-методы-управления-сессией-в-сервлетах-вы-знаете)\n+ [Что такое _cookies_?](servlets.md#Что-такое-cookies)\n+ [Какие методы для работы с cookies предусмотрены в сервлетах?](servlets.md#Какие-методы-для-работы-с-cookies-предусмотрены-в-сервлетах)\n+ [Что такое _URL Rewriting_?](servlets.md#Что-такое-url-rewriting)\n+ [Зачем нужны и чем отличаются методы `encodeURL()` и `encodeRedirectURL()`?](servlets.md#Зачем-нужны-и-чем-отличаются-методы-encodeurl-и-encoderedirecturl)\n+ [Что такое _«сессия»_?](servlets.md#Что-такое-сессия)\n+ [Как уведомить объект в сессии, что сессия недействительна или закончилась?](servlets.md#Как-уведомить-объект-в-сессии-что-сессия-недействительна-или-закончилась)\n+ [Какой существует эффективный способ удостоверится, что все сервлеты доступны только для пользователя с верной сессией?](servlets.md#Какой-существует-эффективный-способ-удостоверится-что-все-сервлеты-доступны-только-для-пользователя-с-верной-сессией)\n+ [Как мы можем обеспечить _transport layer security_ для нашего веб приложения?](servlets.md#Как-мы-можем-обеспечить-transport-layer-security-для-нашего-веб-приложения)\n+ [Как организовать подключение к базе данных, обеспечить журналирование в сервлете?](servlets.md#Как-организовать-подключение-к-базе-данных-обеспечить-журналирование-в-сервлете)\n+ [Какие основные особенности появились в спецификации _Servlet 3_?](servlets.md#Какие-основные-особенности-появились-в-спецификации-servlet-3)\n+ [Какие способы аутентификации доступны сервлету?](servlets.md#Какие-способы-аутентификации-доступны-сервлету)\n+ [Что такое _Java Server Pages (JSP)_?](servlets.md#Что-такое-java-server-pages-jsp)\n+ [Зачем нужен JSP?](servlets.md#Зачем-нужен-jsp)\n+ [Опишите, как обрабатываются JSP страницы, начиная от запроса к серверу, заканчивая ответом пользователю.](servlets.md#Опишите-как-обрабатываются-jsp-страницы-начиная-от-запроса-к-серверу-заканчивая-ответом-пользователю)\n+ [Расскажите об этапах (фазах) жизненного цикла JSP.](servlets.md#Расскажите-об-этапах-фазах-жизненного-цикла-jsp)\n+ [Расскажите о методах жизненного цикла JSP.](servlets.md#Расскажите-о-методах-жизненного-цикла-jsp)\n+ [Какие методы жизненного цикла JSP могут быть переопределены?](servlets.md#Какие-методы-жизненного-цикла-jsp-могут-быть-переопределены)\n+ [Как можно предотвратить прямой доступ к JSP странице из браузера?](servlets.md#Как-можно-предотвратить-прямой-доступ-к-jsp-странице-из-браузера)\n+ [Какая разница между _динамическим_ и _статическим_ содержимым JSP?](servlets.md#Какая-разница-между-динамическим-и-статическим-содержимым-jsp)\n+ [Как закомментировать код в JSP?](servlets.md#Как-закомментировать-код-в-jsp)\n+ [Какие существуют основные типы тегов JSP?](servlets.md#Какие-существуют-основные-типы-тегов-jsp)\n+ [Что вы знаете о действиях JSP (_Action tag_ и _JSP Action Elements_).](servlets.md#Что-вы-знаете-о-действиях-jsp-action-tag-и-jsp-action-elements)\n+ [Взаимодействие _JSP - сервлет - JSP_.](servlets.md#Взаимодействие-jsp---сервлет---jsp)\n+ [Какие области видимости переменных существуют в JSP?](servlets.md#Какие-области-видимости-переменных-существуют-в-jsp)\n+ [Какие неявные, внутренние объекты и методы есть на JSP странице?](servlets.md#Какие-неявные-внутренние-объекты-и-методы-есть-на-jsp-странице)\n+ [Какие неявные объекты не доступны в обычной JSP странице?](servlets.md#Какие-неявные-объекты-не-доступны-в-обычной-jsp-странице)\n+ [Что вы знаете о `PageContext` и какие преимущества его использования?](servlets.md#Что-вы-знаете-о-pagecontext-и-какие-преимущества-его-использования)\n+ [Как сконфигурировать параметры инициализации для JSP?](servlets.md#Как-сконфигурировать-параметры-инициализации-для-jsp)\n+ [Почему не рекомендуется использовать скриплеты (скриптовые элементы) в JSP?](servlets.md#Почему-не-рекомендуется-использовать-скриплеты-скриптовые-элементы-в-jsp)\n+ [Можно ли определить класс внутри JSP страницы?](servlets.md#Можно-ли-определить-класс-внутри-jsp-страницы)\n+ [Что вы знаете о Языке выражений JSP (JSP Expression Language – EL)?](servlets.md#Что-вы-знаете-о-Языке-выражений-jsp-jsp-expression-language--el)\n+ [Какие типы EL операторов вы знаете?](servlets.md#Какие-типы-el-операторов-вы-знаете)\n+ [Назовите неявные, внутренние объекты JSP EL и их отличия от объектов JSP.](servlets.md#Назовите-неявные-внутренние-объекты-jsp-el-и-их-отличия-от-объектов-jsp)\n+ [Как отключить возможность использования EL в JSP?](servlets.md#Как-отключить-возможность-использования-el-в-jsp)\n+ [Как узнать тип HTTP метода используя JSP EL?](servlets.md#Как-узнать-тип-http-метода-используя-jsp-el)\n+ [Что такое _JSTL (JSP Standard tag library)_?](servlets.md#Что-такое-jstl-jsp-standard-tag-library)\n+ [Из каких групп тегов состоит библиотека _JSTL_?](servlets.md#Из-каких-групп-тегов-состоит-библиотека-jstl)\n+ [Какая разница между `<c:set>` и `<jsp:useBean>`?](servlets.md#Какая-разница-между-cset-и-jspusebean)\n+ [Чем отличается `<c:import>` от `<jsp:include>` и директивы `<%@include %>`?](servlets.md#Чем-отличается-cimport-от-jspinclude-и-директивы-include-)\n+ [Как можно расширить функциональность JSP?](servlets.md#Как-можно-расширить-функциональность-jsp)\n+ [Что вы знаете о написании пользовательских JSP тегов?](servlets.md#Что-вы-знаете-о-написании-пользовательских-jsp-тегов)\n+ [Приведите пример использования собственных тегов.](servlets.md#Приведите-пример-использования-собственных-тегов)\n+ [Как сделать перенос строки в HTML средствами JSP?](servlets.md#Как-сделать-перенос-строки-в-html-средствами-jsp)\n+ [Почему не нужно конфигурировать стандартные JSP теги в `web.xml`?](servlets.md#Почему-не-нужно-конфигурировать-стандартные-jsp-теги-в-webxml)\n+ [Как можно обработать ошибки JSP страниц?](servlets.md#Как-можно-обработать-ошибки-jsp-страниц)\n+ [Как происходит обработка ошибок с помощью JSTL?](servlets.md#Как-происходит-обработка-ошибок-с-помощью-jstl)\n+ [Как конфигурируется JSP в дескрипторе развертывания.](servlets.md#Как-конфигурируется-jsp-в-дескрипторе-развертывания)\n+ [Можно ли использовать Javascript на JSP странице?](servlets.md#Можно-ли-использовать-javascript-на-jsp-странице)\n+ [Всегда ли создается объект сессии на JSP странице, можно ли отключить его создание?](servlets.md#Всегда-ли-создается-объект-сессии-на-jsp-странице-можно-ли-отключить-его-создание)\n+ [Какая разница между `JSPWriter` и сервлетным `PrintWriter`?](servlets.md#Какая-разница-между-jspwriter-и-сервлетным-printwriter)\n+ [Опишите общие практические принципы работы с JSP.](servlets.md#Опишите-общие-практические-принципы-работы-с-jsp)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Базы данных\n+ [Что такое _«база данных»_?](db.md#Что-такое-база-данных)\n+ [Что такое _«система управления базами данных»_?](db.md#Что-такое-система-управления-базами-данных)\n+ [Что такое _«реляционная модель данных»_?](db.md#Что-такое-реляционная-модель-данных)\n+ [Дайте определение терминам _«простой»_, _«составной» (composite)_, _«потенциальный» (candidate)_ и _«альтернативный» (alternate)_ ключ.](db.md#Дайте-определение-терминам-простой-составной-composite-потенциальный-candidate-и-альтернативный-alternate-ключ)\n+ [Что такое _«первичный ключ» (primary key)_? Каковы критерии его выбора?](db.md#Что-такое-первичный-ключ-primary-key-Каковы-критерии-его-выбора)\n+ [Что такое _«внешний ключ» (foreign key)_?](db.md#Что-такое-внешний-ключ-foreign-key)\n+ [Что такое _«нормализация»_?](db.md#Что-такое-нормализация)\n+ [Какие существуют нормальные формы?](db.md#Какие-существуют-нормальные-формы)\n+ [Что такое _«денормализация»_? Для чего она применяется?](db.md#Что-такое-денормализация-Для-чего-она-применяется)\n+ [Какие существуют типы связей в базе данных? Приведите примеры.](db.md#Какие-существуют-типы-связей-в-базе-данных-Приведите-примеры)\n+ [Что такое _«индексы»_? Для чего их используют? В чём заключаются их преимущества и недостатки?](db.md#Что-такое-индексы-Для-чего-их-используют-В-чём-заключаются-их-преимущества-и-недостатки)\n+ [Какие типы индексов существуют?](#Какие-типы-индексов-существуют)\n+ [В чем отличие между кластерными и некластерными индексами?](db.md#В-чем-отличие-между-кластерными-и-некластерными-индексами)\n+ [Имеет ли смысл индексировать данные, имеющие небольшое количество возможных значений?](db.md#Имеет-ли-смысл-индексировать-данные-имеющие-небольшое-количество-возможных-значений)\n+ [Когда полное сканирование набора данных выгоднее доступа по индексу?](db.md#Когда-полное-сканирование-набора-данных-выгоднее-доступа-по-индексу)\n+ [Что такое _«транзакция»_?](db.md#Что-такое-транзакция)\n+ [Назовите основные свойства транзакции.](db.md#Назовите-основные-свойства-транзакции)\n+ [Какие существуют уровни изолированности транзакций?](db.md#Какие-существуют-уровни-изолированности-транзакций)\n+ [Какие проблемы могут возникать при параллельном доступе с использованием транзакций?](db.md#Какие-проблемы-могут-возникать-при-параллельном-доступе-с-использованием-транзакций)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## SQL\n+ [Что такое _«SQL»_?](sql.md#Что-такое-sql)\n+ [Какие существуют операторы SQL?](sql.md#Какие-существуют-операторы-sql)\n+ [Что означает `NULL` в SQL?](sql.md#Что-означает-null-в-sql)\n+ [Что такое _«временная таблица»_? Для чего она используется?](sql.md#Что-такое-временная-таблица-Для-чего-она-используется)\n+ [Что такое _«представление» (view)_ и для чего оно применяется?](sql.md#Что-такое-представление-view-и-для-чего-оно-применяется)\n+ [Каков общий синтаксис оператора `SELECT`?](sql.md#Каков-общий-синтаксис-оператора-select)\n+ [Что такое `JOIN`?](sql.md#Что-такое-join)\n+ [Какие существуют типы `JOIN`?](sql.md#Какие-существуют-типы-join)\n+ [Что лучше использовать `JOIN` или подзапросы?](sql.md#Что-лучше-использовать-join-или-подзапросы)\n+ [Для чего используется оператор `HAVING`?](sql.md#Для-чего-используется-оператор-having)\n+ [В чем различие между операторами `HAVING` и `WHERE`?](sql.md#В-чем-различие-между-операторами-having-и-where)\n+ [Для чего используется оператор `ORDER BY`?](sql.md#Для-чего-используется-оператор-order-by)\n+ [Для чего используется оператор `GROUP BY`?](sql.md#Для-чего-используется-оператор-group-by)\n+ [Как `GROUP BY` обрабатывает значение `NULL`?](sql.md#Как-group-by-обрабатывает-значение-null)\n+ [В чем разница между операторами `GROUP BY` и `DISTINCT`?](sql.md#В-чем-разница-между-операторами-group-by-и-distinct)\n+ [Перечислите основные агрегатные функции.](sql.md#Перечислите-основные-агрегатные-функции)\n+ [В чем разница между `COUNT(*)` и `COUNT({column})`?](sql.md#В-чем-разница-между-count-и-countcolumn)\n+ [Что делает оператор `EXISTS`?](sql.md#Что-делает-оператор-exists)\n+ [Для чего используются операторы `IN`, `BETWEEN`, `LIKE`?](sql.md#Для-чего-используются-операторы-in-between-like)\n+ [Для чего применяется ключевое слово `UNION`?](sql.md#Для-чего-применяется-ключевое-слово-union)\n+ [Какие ограничения на целостность данных существуют в SQL?](sql.md#Какие-ограничения-на-целостность-данных-существуют-в-sql)\n+ [Какие отличия между ограничениями `PRIMARY` и `UNIQUE`?](sql.md#Какие-отличия-между-ограничениями-primary-и-unique)\n+ [Может ли значение в столбце, на который наложено ограничение `FOREIGN KEY`, равняться `NULL`?](sql.md#Может-ли-значение-в-столбце-на-который-наложено-ограничение-foreign-key-равняться-null)\n+ [Как создать индекс?](sql.md#Как-создать-индекс)\n+ [Что делает оператор `MERGE`?](sql.md#Что-делает-оператор-merge)\n+ [В чем отличие между операторами `DELETE` и `TRUNCATE`?](sql.md#В-чем-отличие-между-операторами-delete-и-truncate)\n+ [Что такое _«хранимая процедура»_?](sql.md#Что-такое-хранимая-процедура)\n+ [Что такое _«триггер»_?](sql.md#Что-такое-триггер)\n+ [Что такое _«курсор»_?](sql.md#Что-такое-курсор)\n+ [Опишите разницу типов данных `DATETIME` и `TIMESTAMP`.](sql.md#Опишите-разницу-типов-данных-datetime-и-timestamp)\n+ [Для каких числовых типов недопустимо использовать операции сложения/вычитания?](sql.md#Для-каких-числовых-типов-недопустимо-использовать-операции-сложениявычитания)\n+ [Какое назначение у операторов `PIVOT` и `UNPIVOT` в Transact-SQL?](sql.md#Какое-назначение-у-операторов-pivot-и-unpivot-в-transact-sql)\n+ [Расскажите об основных функциях ранжирования в Transact-SQL.](sql.md#Расскажите-об-основных-функциях-ранжирования-в-transact-sql)\n+ [Для чего используются операторы `INTERSECT`, `EXCEPT` в Transact-SQL?](sql.md#Для-чего-используются-операторы-intersect-except-в-transact-sql)\n+ [Напишите запрос...](sql.md#Напишите-запрос)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## JDBC\n+ [Что такое _JDBC_?](jdbc.md#Что-такое-jdbc)\n+ [В чем заключаются преимущества использования JDBC?](jdbc.md#В-чем-заключаются-преимущества-использования-jdbc)\n+ [Что из себя представляет JDBC URL?](jdbc.md#Что-из-себя-представляет-jdbc-url)\n+ [Из каких частей стоит JDBC?](jdbc.md#Из-каких-частей-стоит-jdbc)\n+ [Перечислите основные типы данных используемые в JDBC. Как они связаны с типами Java?](jdbc.md#Перечислите-основные-классы-и-интерфейсы-jdbc)\n+ [Опишите основные этапы работы с базой данных с использованием JDBC.](jdbc.md#Опишите-основные-этапы-работы-с-базой-данных-при-использовании-jdbc)\n+ [Как зарегистрировать драйвер JDBC?](jdbc.md#Как-зарегистрировать-драйвер-jdbc)\n+ [Как установить соединение с базой данных?](jdbc.md#Как-установить-соединение-с-базой-данных)\n+ [Какие уровни изоляции транзакций поддерживаются в JDBC?](jdbc.md#Какие-уровни-изоляции-транзакций-поддерживаются-в-jdbc)\n+ [При помощи чего формируются запросы к базе данных?](jdbc.md#При-помощи-чего-формируются-запросы-к-базе-данных)\n+ [Чем отличается Statement от PreparedStatement?](jdbc.md#Чем-отличается-statement-от-preparedstatement)\n+ [Как осуществляется запрос к базе данных и обработка результатов?](jdbc.md#Как-осуществляется-запрос-к-базе-данных-и-обработка-результатов)\n+ [Как вызвать хранимую процедуру?](jdbc.md#Как-вызвать-хранимую-процедуру)\n+ [Как закрыть соединение с базой данных?](jdbc.md#Как-закрыть-соединение-с-базой-данных)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Тестирование\n+ [Что такое _«модульное тестирование»_?](test.md#Что-такое-модульное-тестирование)\n+ [Что такое _«интеграционное тестирование»_?](test.md#Что-такое-интеграционное-тестирование)\n+ [Чем интеграционное тестирование отличается от модульного?](test.md#Чем-интеграционное-тестирование-отличается-от-модульного)\n+ [Какие существуют виды тестовых объектов?](test.md#Какие-существуют-виды-тестовых-объектов)\n+ [Чем _stub_ отличается от _mock_?](test.md#Чем-stub-отличается-от-mock)\n+ [Что такое _«фикстуры»_?](test.md#Что-такое-фикстуры)\n+ [Какие аннотации фикстур существуют в JUnit?](test.md#Какие-аннотации-фикстур-существуют-в-junit)\n+ [Для чего в JUnit используется аннотация `@Ignore`?](test.md#Для-чего-в-junit-используется-аннотация-ignore)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Журналирование\n+ [Какие существуют типы логов?](log.md#Какие-существуют-типы-логов)  \n+ [Из каких частей состоит система журналирования log4j?](log.md#Из-каких-частей-состоит-система-журналирования-log4j)\n+ [Что такое _Logger_ в log4j?](log.md#Что-такое-logger-в-log4j)\n+ [Что такое _Appender_ в log4j?](log.md#Что-такое-appender-в-log4j)\n+ [Что такое _Layout_ в log4j?](log.md#Что-такое-layout-в-log4j)\n+ [Перечислите уровни журналирования в log4j? Назовите порядок их приоритетности.](log.md#Перечислите-уровни-журналирования-в-log4j-Назовите-порядок-их-приоритетности)\n+ [Какие существуют способы конфигурирования log4j?](log.md#Какие-существуют-способы-конфигурирования-log4j)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## UML\n+ [Что такое _UML_?](uml.md#Что-такое-uml)\n+ [Что такое _«диаграмма»_, _«нотация»_ и _«метамодель»_ в UML?](uml.md#Что-такое-диаграмма-нотация-и-метамодель-в-uml)\n+ [Какие существуют типы диаграмм?](uml.md#Какие-существуют-типы-диаграмм)\n+ [Какие виды отношений существуют в структурной диаграмме классов?](uml.md#Какие-виды-отношений-существуют-в-структурной-диаграмме-классов)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## XML\n+ [Что такое _XML_?](xml.md#Что-такое-xml)\n+ [Что такое _DTD_?](xml.md#Что-такое-dtd)\n+ [Чем _well-formed XML_ отличается от _valid XML_?](xml.md#Чем-well-formed-xml-отличается-от-valid-xml)\n+ [Что такое «_пространство имен_» в XML?](xml.md#Что-такое-пространство-имен-в-xml)\n+ [Что такое XSD? В чём его преимущества перед XML DTD?](xml.md#Что-такое-xsd-В-чём-его-преимущества-перед-xml-dtd)\n+ [Какие типы существуют в XSD?](xml.md#Какие-типы-существуют-в-xsd)\n+ [Какие вы знаете методы чтения XML? Опишите сильные и слабые стороны каждого метода.](xml.md#Какие-вы-знаете-методы-чтения-xml-Опишите-сильные-и-слабые-стороны-каждого-метода)\n+ [Когда следует использовать _DOM_, а когда _SAX_, _StAX_ анализаторы?](xml.md#Когда-следует-использовать-dom-а-когда-sax-stax-анализаторы)? \n+ [Какие вы знаете способы записи XML?](xml.md#Какие-вы-знаете-способы-записи-xml)\n+ [Что такое _JAXP_?](xml.md#Что-такое-jaxp)\n+ [Что такое _XSLT_?](xml.md#Что-такое-xslt)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Шаблоны проектирования\n+ [Что такое _«шаблон проектирования»_?](patterns.md#Что-такое-шаблон-проектирования)\n+ [Назовите основные характеристики шаблонов.](patterns.md#Назовите-основные-характеристики-шаблонов)\n+ [Типы шаблонов проектирования.](patterns.md#Типы-шаблонов-проектирования)\n+ [Приведите примеры основных шаблонов проектирования.](patterns.md#Приведите-примеры-основных-шаблонов-проектирования)\n+ [Приведите примеры порождающих шаблонов проектирования.](patterns.md#Приведите-примеры-порождающих-шаблонов-проектирования)\n+ [Приведите примеры структурных шаблонов проектирования.](patterns.md#Приведите-примеры-структурных-шаблонов-проектирования)\n+ [Приведите примеры поведенческих шаблонов проектирования.](patterns.md#Приведите-примеры-поведенческих-шаблонов-проектирования)\n+ [Что такое _«антипаттерн»_? Какие антипаттерны вы знаете?](patterns.md#Что-такое-антипаттерн-Какие-антипаттерны-вы-знаете)\n+ [Что такое _Dependency Injection_?](patterns.md#Что-такое-dependency-injection)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Основы HTML\n+ [Что такое _«HTML»_?](html.md#Что-такое-html)\n+ [Что такое _«XHTML»_?](html.md#Что-такое-xhtml)\n+ [Что такое `DOCTYPE` и зачем он нужен?](html.md#Что-такое-doctype-и-зачем-он-нужен)\n+ [Для чего предназначен тег `<head>`?](html.md#Для-чего-предназначен-тег-head)\n+ [Чем отличается `<div>` от `<span>`?](html.md#Чем-отличается-div-от-span)\n+ [Как обозначаются комментарии в HTML?](html.md#Как-обозначаются-комментарии-в-html)\n+ [Каким образом задаётся адрес документа, на который следует перейти?](html.md#Каким-образом-задаётся-адрес-документа-на-который-следует-перейти)\n+ [Как сделать ссылку на адрес электронной почты?](html.md#Как-сделать-ссылку-на-адрес-электронной-почты)\n+ [Для чего предназначен тег `<em>`?](html.md#Для-чего-предназначен-тег-em)\n+ [Для чего предназначены теги `<ol>`, `<ul>`, `<li>`?](html.md#Для-чего-предназначены-теги-ol-ul-li)\n+ [Для чего предназначены теги `<dl>`, `<dt>`, `<dd>`?](html.md#Для-чего-предназначены-теги-dl-dt-dd)\n+ [Для чего предназначены теги `<tr>`, `<th>`, `<td>`?](html.md#Для-чего-предназначены-теги-tr-th-td)\n+ [Обязательно ли писать атрибут `alt` в теге `<img>`?](html.md#Обязательно-ли-писать-атрибут-alt-в-теге-img)\n+ [В каком регистре лучше писать HTML-код?](html.md#В-каком-регистре-лучше-писать-html-код)\n+ [Что такое «мнемоника (entity)»?](html.md#Что-такое-мнемоника-entity)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Основы CSS\n+ [Что такое _«CSS»_?](css.md#Что-такое-css)\n+ [Как в CSS обозначаются комментарии?](css.md#Как-в-css-обозначаются-комментарии)\n+ [Что такое _«селектор»_?](css.md#Что-такое-селектор)\n+ [Перечислите основные виды селекторов.](css.md#Перечислите-основные-виды-селекторов)\n+ [Что такое псевдокласс?](css.md#Что-такое-псевдокласс)\n+ [Какие существуют селекторы аттрибутов?](css.md#Какие-существуют-селекторы-аттрибутов)\n+ [В чем разница между `#my` и `.my`?](css.md#В-чем-разница-между-my-и-my)\n+ [В чем разница между `margin` и `padding`?](css.md#В-чем-разница-между-margin-и-padding)\n+ [В чем заключается разница между значениями `0` и `auto` в свойстве `margin`?](css.md#В-чем-заключается-разница-между-значениями-0-и-auto-в-свойстве-margin)\n+ [Какое свойство задает цвет фона?](css.md#Какое-свойство-задает-цвет-фона)\n+ [Как убрать подчеркивание для всех ссылок на странице?](css.md#Как-убрать-подчеркивание-для-всех-ссылок-на-странице)\n+ [Для чего используется свойство `clear`?](css.md#Для-чего-используется-свойство-clear)\n+ [Как сделать жирным текст во всех элементах `<p>`?](css.md#Как-сделать-жирным-текст-во-всех-элементах-p)\n+ [Как задать красный цвет для всех элементов, имеющих класс `red`?](css.md#Как-задать-красный-цвет-для-всех-элементов-имеющих-класс-red)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Основы WEB\n+ [Что такое _WWW_?](web.md#Что-такое-www)\n+ [Что такое _W3C_?](web.md#Что-такое-w3c)\n+ [Какие существуют уровни модели _OSI_?](web.md#Какие-существуют-уровни-модели-osi)\n+ [Что такое _TCP/IP_?](web.md#Что-такое-tcpip)\n+ [Что такое _UDP_?](web.md#Что-такое-udp)\n+ [Чем отличаются _TCP_ и _UDP_?](web.md#Чем-отличаются-tcp-и-udp)\n+ [Что такое протокол передачи данных? Какие протоколы вы знаете?](web.md#Что-такое-протокол-передачи-данных-Какие-протоколы-вы-знаете)\n+ [Что такое _HTTP_ и _HTTPS_? Чем они отличаются?](web.md#Что-такое-http-и-https-Чем-они-отличаются)\n+ [Что такое _FTP_?](web.md#Что-такое-ftp)\n+ [Чем отличаются методы _GET_ и _POST_?](web.md#Чем-отличаются-методы-get-и-post)\n+ [Что такое _MIME тип_?](web.md#Что-такое-mime-тип)\n+ [Что такое _Web server_?](web.md#Что-такое-web-server)\n+ [Что такое _Web application_?](web.md#Что-такое-web-application)\n+ [Что такое _Application server_?](web.md#Что-такое-application-server)\n+ [Чем отличаются _Web server_ и _Application server_?](web.md#Чем-отличаются-web-server-и-application-server)\n+ [Что такое _AJAX_? Как принципиально устроена эта технология?](web.md#Что-такое-ajax-Как-принципиально-устроена-эта-технология)\n+ [Что такое _WebSocket_?](web.md#Что-такое-websocket)\n+ [Что такое _JSON_?](web.md#Что-такое-json)\n+ [Что такое _JSON схема_?](web.md#Что-такое-json-схема)\n+ [Что такое _cookies_?](web.md#Что-такое-cookies)\n+ [Что такое _«сессия»_?](web.md#Что-такое-сессия)\n+ [Что такое _«авторизация»_ и _«аутентификация»_? Чем они отличаются?](web.md#Что-такое-авторизация-и-аутентификация-Чем-они-отличаются)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Apache Kafka\n\n* [Что такое Apache Kafka?](kafka.md#что-такое-apache-kafka)\n* [Основные компоненты Kafka](kafka.md#основные-компоненты-kafka)\n\n**Архитектура компонентов**\n\n* Topic\n  * [Архитектура топика](kafka.md#архитектура-топика)\n  * [Настройки топика Kafka](kafka.md#настройки-топика-kafka)\n* Broker\n  * [Архитектура брокера](kafka.md#архитектура-брокера)\n  * [Настройки брокера Kafka](kafka.md#настройки-брокера-kafka)\n* Producer\n  * [Архитектура продюсера](kafka.md#архитектура-продюсера)\n  * [Настройки продюсера](kafka.md#настройки-продюсера)\n  * [Пример конфигурации Kafka Producer](kafka.md#пример-конфигурации-kafka-producer)\n* Consumer\n  * [Архитектура консюмера](kafka.md#архитектура-консюмера)\n  * [Настройки консюмера](kafka.md#настройки-консюмера)\n  * [Пример конфигурации Kafka Consumer](kafka.md#пример-конфигурации-kafka-consumer)\n\n**Kafka API**\n\n* [Основные API Kafka](kafka.md#основные-api-kafka)\n* [Какова роль Producer API?](kafka.md#какова-роль-producer-api)\n* [Какова роль Consumer API?](kafka.md#какова-роль-consumer-api)\n* [Какова роль Connector API?](kafka.md#какова-роль-connector-api)\n* [Какова роль Streams API?](kafka.md#какова-роль-streams-api)\n* [Какова роль Transactions API?](kafka.md#какова-роль-transactions-api)\n* [Какова роль Quota API?](kafka.md#какова-роль-quota-api)\n* [Какова роль AdminClient API?](kafka.md#какова-роль-AdminClient-api)\n\n**Kafka Consumer**\n\n* [Для чего нужен координатор группы?](kafka.md#для-чего-нужен-координатор-группы)\n* [Для чего нужен Consumer heartbeat thread?](kafka.md#для-чего-нужен-consumer-heartbeat-thread)\n* [Как Kafka обрабатывает сообщения?](kafka.md#как-kafka-обрабатывает-сообщения)\n* [Как Kafka обрабатывает задержку консюмера?](kafka.md#как-kafka-обрабатывает-задержку-консюмера)\n* [Для чего нужны методы subscribe() и poll()?](kafka.md#для-чего-нужны-методы-subscribe-и-poll)\n* [Для чего нужен метод position()?](kafka.md#для-чего-нужен-метод-position)\n* [Для чего нужны методы commitSync() и commitAsync()?](kafka.md#для-чего-нужны-методы-commitsync-и-commitasync)\n\n**Другие вопросы**\n\n* [Для чего нужен идемпотентный продюсер?](kafka.md#для-чего-нужен-идемпотентный-продюсер)\n* [Для чего нужен интерфейс Partitioner?](kafka.md#для-чего-нужен-интерфейс-partitioner)\n* [Для чего нужен Broker log cleaner thread?](kafka.md#для-чего-нужен-broker-log-cleaner-thread)\n* [Для чего нужен Kafka Mirror Maker?](kafka.md#для-чего-нужен-kafka-mirror-maker)\n* [Для чего нужна Schema Registry?](kafka.md#для-чего-нужна-schema-registry)\n* [Для чего нужен Streams DSL?](kafka.md#для-чего-нужен-streams-dsl)\n* [Как Kafka обеспечивает версионирование сообщений?](kafka.md#как-kafka-обеспечивает-версионирование-сообщений)\n* [Как потребители получают сообщения от брокера?](kafka.md#как-потребители-получают-сообщения-от-брокера)\n\n**Сравнение с другими компонентами и системами**\n\n* [В чем разница между Kafka Consumer и Kafka Stream?](kafka.md#в-чем-разница-между-kafka-consumer-и-kafka-stream)\n* [В чем разница между Kafka Streams и Apache Flink?](kafka.md#в-чем-разница-между-kafka-streams-и-apache-flink)\n* [В чем разница между Kafka и Flume?](kafka.md#в-чем-разница-между-kafka-и-flume)\n* [В чем разница между Kafka и RabbitMQ?](kafka.md#в-чем-разница-между-kafka-и-rabbitmq)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Дополнительные материалы\n+ [4 толковых канала на Youtube про технические собеседования](https://habr.com/ru/post/454264/)\n+ [A list of fancy questions I've been asked during the interviews I had](https://github.com/d1mnewz/interviews)\n+ [Job interview in English: как готовиться и что отвечать](https://dou.ua/lenta/articles/interview-in-english/)\n+ [Senior Engineer в поисках работы. О задачах на технических собеседованиях и теоретических вопросах](https://habr.com/ru/post/442442/)\n+ [What to ask an interviewer during a tech interview](https://hackernoon.com/what-to-ask-an-interviewer-during-a-tech-interview-865a293e548c)\n+ [Spring Boot Interview Questions](https://www.baeldung.com/spring-boot-interview-questions)\n+ [Top Spring Framework Interview Questions](https://www.baeldung.com/spring-interview-questions)\n+ [Spring Interview Questions](https://www.interviewbit.com/spring-interview-questions/)\n+ [Hibernate Interview Questions](https://www.adaface.com/blog/hibernate-interview-questions/)\n\n[к оглавлению](#Вопросы-для-собеседования-на-java-developer)\n\n## Источники\n+ [Вопросы на собеседование Junior Java Developer](https://jsehelper.blogspot.ru)\n"
        },
        {
          "name": "book",
          "type": "tree",
          "content": null
        },
        {
          "name": "con4md.jar",
          "type": "blob",
          "size": 576.833984375,
          "content": null
        },
        {
          "name": "concurrency.md",
          "type": "blob",
          "size": 134.4384765625,
          "content": "[Вопросы для собеседования](README.md)\n\n# Многопоточность\n+ [Расскажите о модели памяти Java?](#Расскажите-о-модели-памяти-java)\n+ [Что такое «потокобезопасность»?](#Что-такое-потокобезопасность)\n+ [В чём разница между _«конкуренцией»_ и _«параллелизмом»_?](#В-чём-разница-между-конкуренцией-и-параллелизмом)\n+ [Что такое _«кооперативная многозадачность»_? Какой тип многозадачности использует Java? Чем обусловлен этот выбор?](#Что-такое-кооперативная-многозадачность-Какой-тип-многозадачности-использует-java-Чем-обусловлен-этот-выбор)\n+ [Что такое _ordering_, _as-if-serial semantics_, _sequential consistency_, _visibility_, _atomicity_, _happens-before_, _mutual exclusion_, _safe publication_?](#Что-такое-ordering-as-if-serial-semantics-sequential-consistency-visibility-atomicity-happens-before-mutual-exclusion-safe-publication)\n+ [Чем отличается процесс от потока?](#Чем-отличается-процесс-от-потока)\n+ [Что такое _«зелёные потоки»_ и есть ли они в Java?](#Что-такое-зелёные-потоки-и-есть-ли-они-в-java)\n+ [Каким образом можно создать поток?](#Каким-образом-можно-создать-поток)\n+ [Чем различаются `Thread` и `Runnable`?](#Чем-различаются-thread-и-runnable)\n+ [В чём заключается разница между методами `start()` и `run()`?](#В-чём-заключается-разница-между-методами-start-и-run)\n+ [Как принудительно запустить поток?](#Как-принудительно-запустить-поток)\n+ [Что такое _«монитор»_ в Java?](#Что-такое-монитор-в-java)\n+ [Дайте определение понятию «синхронизация».](#Дайте-определение-понятию-синхронизация)\n+ [Какие существуют способы синхронизации в Java?](#Какие-существуют-способы-синхронизации-в-java)\n+ [В каких состояниях может находиться поток?](#В-каких-состояниях-может-находиться-поток)\n+ [Можно ли создавать новые экземпляры класса, пока выполняется `static synchronized` метод?](#Можно-ли-создавать-новые-экземпляры-класса-пока-выполняется-static-synchronized-метод)\n+ [Зачем может быть нужен `private` мьютекс?](#Зачем-может-быть-нужен-private-мьютекс)\n+ [Как работают методы `wait()` и `notify()`/`notifyAll()`?](#Как-работают-методы-wait-и-notifynotifyall)\n+ [В чем разница между `notify()` и `notifyAll()`?](#В-чем-разница-между-notify-и-notifyall)\n+ [Почему методы `wait()` и `notify()` вызываются только в синхронизированном блоке?](#Почему-методы-wait-и-notify-вызываются-только-в-синхронизированном-блоке)\n+ [Чем отличается работа метода `wait()` с параметром и без параметра?](#Чем-отличается-работа-метода-wait-с-параметром-и-без-параметра)\n+ [Чем отличаются методы `Thread.sleep()` и `Thread.yield()`?](#Чем-отличаются-методы-threadsleep-и-threadyield)\n+ [Как работает метод `Thread.join()`?](#Как-работает-метод-threadjoin)\n+ [Что такое _deadlock_?](#Что-такое-deadlock)\n+ [Что такое _livelock_?](#Что-такое-livelock)\n+ [Как проверить, удерживает ли поток монитор определённого ресурса?](#Как-проверить-удерживает-ли-поток-монитор-определённого-ресурса)\n+ [На каком объекте происходит синхронизация при вызове `static synchronized` метода?](#На-каком-объекте-происходит-синхронизация-при-вызове-static-synchronized-метода)\n+ [Для чего используется ключевое слово `volatile`, `synchronized`, `transient`, `native`?](#Для-чего-используется-ключевое-слово-volatile-synchronized-transient-native)\n+ [В чём различия между `volatile` и _Atomic_ переменными?](#В-чём-различия-между-volatile-и-atomic-переменными)\n+ [ В чём заключаются различия между `java.util.concurrent.Atomic*.compareAndSwap()` и `java.util.concurrent.Atomic*.weakCompareAndSwap()`.](#-В-чём-заключаются-различия-между-javautilconcurrentatomiccompareandswap-и-javautilconcurrentatomicweakcompareandswap)\n+ [Что значит _«приоритет потока»_?](#Что-значит-приоритет-потока)\n+ [Что такое _«потоки-демоны»_?](#Что-такое-потоки-демоны)\n+ [Можно ли сделать основной поток программы демоном?](#Можно-ли-сделать-основной-поток-программы-демоном)\n+ [Что значит _«усыпить»_ поток?](#Что-значит-усыпить-поток)\n+ [Чем отличаются два интерфейса `Runnable` и `Callable`?](#Чем-отличаются-два-интерфейса-runnable-и-callable)\n+ [Что такое `FutureTask`?](#Что-такое-futuretask)\n+ [В чем заключаются различия между `CyclicBarrier` и `CountDownLatch`?](#В-чем-заключаются-различия-между-cyclicbarrier-и-countdownlatch)\n+ [Что такое _race condition_?](#Что-такое-race-condition)\n+ [Существует ли способ решения проблемы _race condition_?](#Существует-ли-способ-решения-проблемы-race-condition)\n+ [Как остановить поток?](#Как-остановить-поток)\n+ [Почему не рекомендуется использовать метод `Thread.stop()`?](#Почему-не-рекомендуется-использовать-метод-threadstop)\n+ [Что происходит, когда в потоке выбрасывается исключение?](#Что-происходит-когда-в-потоке-выбрасывается-исключение)\n+ [В чем разница между `interrupted()` и `isInterrupted()`?](#В-чем-разница-между-interrupted-и-isinterrupted)\n+ [Что такое _«пул потоков»_?](#Что-такое-пул-потоков)\n+ [Какого размера должен быть пул потоков?](#Какого-размера-должен-быть-пул-потоков)\n+ [Что будет, если очередь пула потоков уже заполнена, но подаётся новая задача?](#Что-будет-если-очередь-пула-потоков-уже-заполнена-но-подаётся-новая-задача)\n+ [В чём заключается различие между методами `submit()` и `execute()` у пула потоков?](#В-чём-заключается-различие-между-методами-submit-и-execute-у-пула-потоков)\n+ [В чем заключаются различия между cтеком (stack) и кучей (heap) с точки зрения многопоточности?](#В-чем-заключаются-различия-между-cтеком-stack-и-кучей-heap-с-точки-зрения-многопоточности)\n+ [Как поделиться данными между двумя потоками?](#Как-поделиться-данными-между-двумя-потоками)\n+ [Какой параметр запуска JVM используется для контроля размера стека потока?](#Какой-параметр-запуска-jvm-используется-для-контроля-размера-стека-потока)\n+ [Как получить дамп потока?](#Как-получить-дамп-потока)\n+ [Что такое _ThreadLocal-переменная_?](#Что-такое-threadlocal-переменная)\n+ [Назовите различия между `synchronized` и `ReentrantLock`?](#Назовите-различия-между-synchronized-и-reentrantlock)\n+ [Что такое `ReadWriteLock`?](#Что-такое-readwritelock)\n+ [Что такое _«блокирующий метод»_?](#Что-такое-блокирующий-метод)\n+ [Что такое _«фреймворк Fork/Join»_?](#Что-такое-фреймворк-forkjoin)\n+ [Что такое `Semaphore`?](#Что-такое-semaphore)\n+ [Что такое _double checked locking Singleton_?](#Что-такое-double-checked-locking-singleton)\n+ [Как создать потокобезопасный Singleton?](#Как-создать-потокобезопасный-singleton)\n+ [Чем полезны неизменяемые объекты?](#Чем-полезны-неизменяемые-объекты)\n+ [Что такое _busy spin_?](#Что-такое-busy-spin)\n+ [Перечислите принципы, которым вы следуете в многопоточном программировании?](#Перечислите-принципы-которым-вы-следуете-в-многопоточном-программировании)\n+ [Какое из следующих утверждений о потоках неверно?](#Какое-из-следующих-утверждений-о-потоках-неверно)\n+ [Даны 3 потока Т1, Т2 и Т3? Как реализовать выполнение в последовательности Т1, Т2, Т3?](#Даны-3-потока-Т1-Т2-и-Т3-Как-реализовать-выполнение-в-последовательности-Т1-Т2-Т3)\n+ [Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`).](#Напишите-минимальный-неблокирующий-стек-всего-два-метода--push-и-pop)\n+ [Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`) с использованием `Semaphore`.](#Напишите-минимальный-неблокирующий-стек-всего-два-метода--push-и-pop-с-использованием-semaphore)\n+ [Напишите минимальный неблокирующий ArrayList (всего четыре метода — `add()`, `get()`, `remove()`, `size()`).](#Напишите-минимальный-неблокирующий-arraylist-всего-четыре-метода--add-get-remove-size)\n+ [Напишите потокобезопасную реализацию класса с неблокирующим методом `BigInteger next()`, который возвращает элементы последовательности: `[1, 2, 4, 8, 16, ...]`.](#Напишите-потокобезопасную-реализацию-класса-с-неблокирующим-методом-biginteger-next-который-возвращает-элементы-последовательности-1-2-4-8-16-)\n+ [Напишите простейший многопоточный ограниченный буфер с использованием `synchronized`.](#Напишите-простейший-многопоточный-ограниченный-буфер-с-использованием-synchronized)\n+ [Напишите простейший многопоточный ограниченный буфер с использованием `ReentrantLock`.](#Напишите-простейший-многопоточный-ограниченный-буфер-с-использованием-reentrantlock)\n\n## Расскажите о модели памяти Java?\n__Модель памяти Java (Java Memory Model, JMM)__ описывает поведение потоков в среде исполнения Java. Это часть семантики языка Java, набор правил, описывающий выполнение многопоточных программ и правил, по которым потоки могут взаимодействовать друг с другом посредством основной памяти.\n\nФормально модель памяти определяет набор действий межпоточного взаимодействия (эти действия включают в себя, в частности, чтение и запись переменной, захват и освобождений монитора, чтение и запись volatile переменной, запуск нового потока), а также модель памяти определяет отношение между этими действиями -_happens-before_ - абстракции обозначающей, что если операция _X_ связана отношением happens-before с операцией _Y_, то весь код следуемый за операцией _Y_, выполняемый в одном потоке, видит все изменения, сделанные другим потоком, до операции _X_.\n\nСуществует несколько основных правил для отношения happens-before:\n\n+ В рамках одного потока любая операция happens-before любой операцией, следующей за ней в исходном коде;\n+ Освобождение монитора (unlock) happens-before захват того же монитора (lock);\n+ Выход из `synchronized` блока/метода happens-before вход в `synchronized` блок/метод на том же мониторе;\n+ Запись `volatile` поля happens-before чтение того же самого `volatile` поля;\n+ Завершение метода `run()` экземпляра класса `Thread` happens-before выход из метода `join()` или возвращение `false` методом `isAlive()` экземпляром того же потока;\n+ Вызов метода `start()` экземпляра класса `Thread` happens-before начало метода `run()` экземпляра того же потока;\n+ Завершение конструктора happens-before начало метода `finalize()` этого класса;\n+ Вызов метода `interrupt()` на потоке happens-before обнаружению потоком факта, что данный метод был вызван либо путем выбрасывания исключения `InterruptedException`, либо с помощью методов `isInterrupted()` или `interrupted()`.\n+ Связь happens-before транзитивна, т.е. если _X_ happens-before _Y_, а _Y_ happens-before _Z_, то _X_ happens-before _Z_.\n+ Освобождение/захват монитора и запись/чтение в `volatile` переменную связаны отношением happens-before, только если операции проводятся над одним и тем же экземпляром объекта.\n+ В отношении happens-before участвуют только два потока, о поведении остальных потоков ничего сказать нельзя, пока в каждом из них не наступит отношение happens-before с другим потоком.\n\nМожно выделить несколько основных областей, имеющих отношение к модели памяти:\n\n_Видимость (visibility)_. Один поток может в какой-то момент временно сохранить значение некоторых полей не в основную память, а в регистры или локальный кэш процессора, таким образом второй поток, выполняемый на другом процессоре, читая из основной памяти, может не увидеть последних изменений поля. И наоборот, если поток на протяжении какого-то времени работает с регистрами и локальными кэшами, читая данные оттуда, он может сразу не увидеть изменений, сделанных другим потоком в основную память.\n\nК вопросу видимости имеют отношение следующие ключевые слов языка Java: `synchronized`, `volatile`, `final`. \n\nС точки зрения Java все переменные (за исключением локальных переменных, объявленных внутри метода) хранятся в главной памяти, которая доступна всем потокам, кроме этого, каждый поток имеет локальную—рабочую—память, где он хранит копии переменных, с которыми он работает, и при выполнении программы поток работает только с этими копиями. Надо отметить, что это описание не требование к реализации, а всего лишь модель, которая объясняет поведение программы, так, в качестве локальной памяти не обязательно выступает кэш память, это могут быть регистры процессора или потоки могут вообще не иметь локальной памяти.\n\nПри входе в `synchronized` метод или блок поток обновляет содержимое локальной памяти, а при выходе из `synchronized` метода или блока поток записывает изменения, сделанные в локальной памяти, в главную. Такое поведение `synchronized` методов и блоков следует из правил для отношения «происходит раньше»: так как все операции с памятью происходят раньше освобождения монитора и освобождение монитора происходит раньше захвата монитора, то все операции с памятью, которые были сделаны потоком до выхода из `synchronized` блока должны быть видны любому потоку, который входит в `synchronized` блок для того же самого монитора. Очень важно, что это правило работает только в том случае, если потоки синхронизируются, используя один и тот же монитор! \n\nЧто касается `volatile` переменных, то запись таких переменных производится в основную память, минуя локальную. и чтение `volatile` переменной производится также из основной памяти, то есть значение переменной не может сохраняться в регистрах или локальной памяти потока и операция чтения этой переменной гарантированно вернёт последнее записанное в неё значение.\n\nТакже модель памяти определяет дополнительную семантику ключевого слова `final`, имеющую отношение к видимости: после того как объект был корректно создан, любой поток может видеть значения его `final` полей без дополнительной синхронизации. «Корректно создан» означает, что ссылка на создающийся объект не должна использоваться до тех пор, пока не завершился конструктор объекта. Наличие такой семантики для ключевого слова `final` позволяет создание неизменяемых (immutable) объектов, содержащих только `final` поля, такие объекты могут свободно передаваться между потоками без обеспечения синхронизации при передаче.\n\nЕсть одна проблема, связанная с `final` полями: реализация разрешает менять значения таких полей после создания объекта (это может быть сделано, например, с использованием механизма reflection). Если значение `final` поля—константа, чьё значение известно на момент компиляции, изменения такого поля могут не иметь эффекта, так-как обращения к этой переменной могли быть заменены компилятором на константу. Также спецификация разрешает другие оптимизации, связанные с `final` полями, например, операции чтения `final` переменной могут быть переупорядочены с операциями, которые потенциально могут изменить такую переменную. Так что рекомендуется изменять `final` поля объекта только внутри конструктора, в противном случае поведение не специфицировано.\n\n_Reordering (переупорядочивание)_. Для увеличения производительности процессор/компилятор могут переставлять местами некоторые инструкции/операции. Вернее, с точки зрения потока, наблюдающего за выполнением операций в другом потоке, операции могут быть выполнены не в том порядке, в котором они идут в исходном коде. Тот же эффект может наблюдаться, когда один поток кладет результаты первой операции в регистр или локальный кэш, а результат второй операции попадает непосредственно в основную память. Тогда второй поток, обращаясь к основной памяти может сначала увидеть результат второй операции, и только потом первой, когда все регистры или кэши синхронизируются с основной памятью. Еще одна причина reordering, может заключаться в том, что процессор может решить поменять порядок выполнения операций, если, например, сочтет что такая последовательность выполнится быстрее.\n\nВопрос reordering также регулируется набором правил для отношения «происходит раньше» и у этих правил есть следствие, касающееся порядка операций, используемое на практике: операции чтения и записи `volatile` переменных не могут быть переупорядочены с операциями чтения и записи других `volatile` и не-`volatile` переменных. Это следствие делает возможным использование `volatile` переменной как флага, сигнализирующем об окончании какого-либо действия. В остальном правила, касающиеся порядка выполнения операций, гарантируют упорядоченность операций для конкретного набора случаев (таких как, например, захват и освобождение монитора), во всех остальных случаях оставляя компилятору и процессору полную свободу для оптимизаций.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое «потокобезопасность»?\nПотокобезопасность – свойство объекта или кода, которое гарантирует, что при исполнении или использовании несколькими потоками, код будет вести себя, как предполагается. Например потокобезопасный счётчик не пропустит ни один счёт, даже если один и тот же экземпляр этого счётчика будет использоваться несколькими потоками.\n\n[к оглавлению](#Многопоточность)\n\n## В чём разница между _«конкуренцией»_ и _«параллелизмом»_?\nКонкуренция — это способ одновременного решения множества задач.\n\nПризнаки:\n\n+ Наличие нескольких потоков управления (например, _Thread_ в Java, _корутина_ в Kotlin), если поток управления один, то конкурентного выполнения быть не может\n+ Недетерминированный результат выполнения. Результат зависит от случайных событий, реализации и того, как была проведена синхронизация. Даже если каждый поток полностью детерминированный, итоговый результат будет недетерминированным\n\nПараллелизм — это способ выполнения разных частей одной задачи.\n\nПризнаки:\n\n+ Необязательно имеет несколько потоков управления\n+ Может приводить к детерминированному результату, так, например, результат умножения каждого элемента массива на число, не изменится, если умножать его по частям параллельно.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«кооперативная многозадачность»_? Какой тип многозадачности использует Java? Чем обусловлен этот выбор?\n\n__Кооперативная многозадачность__ - это способ деления процессорного времени между потоками, при котором каждый поток обязан отдавать управление следующему добровольно.\n\nПреимущества такого подхода - простота реализации, меньшие накладные расходы на переключение контекста.\n\nНедостатки - если один поток завис или ведет себя некорректно, то зависает целиком вся система и другие потоки никогда не получат управление.\n\nJava использует __вытесняющую многозадачность__, при которой решение о переключении между потоками процесса принимает операционная система.\n\nВ отличие от кооперативной многозадачности управление операционной системе передаётся вне зависимости от состояния работающих приложений, благодаря чему, отдельные зависшие потоки процесса, как правило, не «подвешивают» всю систему целиком. За счёт регулярного переключения между задачами также улучшается отзывчивость приложения и повышается оперативность освобождения ресурсов, которые больше не используются.\n\nВ реализации вытесняющая многозадачность отличается от кооперативной, в частности, тем, что требует обработки системного прерывания от аппаратного таймера.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _ordering_, _as-if-serial semantics_, _sequential consistency_, _visibility_, _atomicity_, _happens-before_, _mutual exclusion_, _safe publication_?\n__ordering__ механизм, который определяет, когда один поток может увидеть _out-of-order_ (неверный) порядок исполнения инструкций другого потока. CPU для повышения производительности может переупорядочивать процессорные инструкции и выполнять их в произвольном порядке  до тех пор пока для потока внутри не будет видно никаких отличий. Гарантия, предоставляемая этим механизмом, называется __as-if-serial semantics__.\n\n__sequential consistency__ - то же что и _as-if-serial semantics_, гарантия того, что в рамках одного потока побочные эффекты от всех операций будут такие, как будто все операции выполняются последовательно.\n\n__visibility__  определяет, когда действия в одном потоке становятся видны из другого потока.\n\n__happens-before__ - логическое ограничение на порядок выполнения инструкций программы. Если указывается, что запись в переменную и последующее ее чтение связаны через эту зависимость, то как бы при выполнении не переупорядочивались инструкции, в момент чтения все связанные с процессом записи результаты уже зафиксированы и видны.\n\n__atomicity__ — атомарность операций. Атомарная операция выглядит единой и неделимой командой процессора, которая может быть или уже выполненной или ещё невыполненной.\n\n__mutual exclusion__ (взаимоисключающая блокировка, семафор с одним состоянием) - механизм, гарантирующий потоку исключительный доступ к ресурсу. Используется для предотвращения одновременного доступа к общему ресурсу. В каждый момент времени таким ресурсом может владеть только один поток. Простейший пример: `synchronized(obj) { … }`.\n\n__safe publication__? - показ объектов другим потокам из текущего, не нарушая ограничений _visibility_. Способы такой публикации в Java:\n\n+ `static{}` инициализатор;\n+ `volatile` переменные;\n+ `atomic` переменные;\n+ сохранение в разделяемой переменной, корректно защищенной с использованием `synchronized()`, синхронизаторов или других конструкций, создающих _read/write memory barrier_;\n+ `final` переменные в разделяемом объекте, который был корректно проинициализирован.\n\n[к оглавлению](#Многопоточность)\n\n## Чем отличается процесс от потока?\n__Процесс__ — экземпляр программы во время выполнения, независимый объект, которому выделены системные ресурсы (например, процессорное время и память). Каждый процесс выполняется в отдельном адресном пространстве: один процесс не может получить доступ к переменным и структурам данных другого. Если процесс хочет получить доступ к чужим ресурсам, необходимо использовать межпроцессное взаимодействие. Это могут быть конвейеры, файлы, каналы связи между компьютерами и многое другое.\n\nДля каждого процесса ОС создает так называемое «виртуальное адресное пространство», к которому процесс имеет прямой доступ. Это пространство принадлежит процессу, содержит только его данные и находится в полном его распоряжении. Операционная система же отвечает за то, как виртуальное пространство процесса проецируется на физическую память.\n\n__Поток__(thread) — определенный способ выполнения процесса, определяющий последовательность исполнения кода в процессе. Потоки всегда создаются в контексте какого-либо процесса, и вся их жизнь проходит только в его границах.\nПотоки могут исполнять один и тот же код и манипулировать одними и теми же данными, а также совместно использовать описатели объектов ядра, поскольку таблица описателей создается не в отдельных потоках, а в процессах.\nТак как потоки расходуют существенно меньше ресурсов, чем процессы, в процессе выполнения работы выгоднее создавать дополнительные потоки и избегать создания новых процессов.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«зелёные потоки»_ и есть ли они в Java?\n__Зелёные (легковесные) потоки__(green threads) - потоки эмулируемые виртуальной машиной или средой исполнения. Создание зелёного потока не подразумевает под собой создание реального потока ОС.\n\nВиртуальная машина Java берёт на себя заботу о переключении между разными green threads, а сама машина работает как один поток ОС. Это даёт несколько преимуществ. Потоки ОС относительно дороги в большинстве POSIX-систем. Кроме того, переключение между native threads гораздо медленнее, чем между green threads.\n\nЭто всё означает, что в некоторых ситуациях green threads гораздо выгоднее, чем native threads. Система может поддерживать гораздо большее количество green threads, чем потоков OС. Например, гораздо практичнее запускать новый green thread для нового HTTP-соединения к веб-серверу, вместо создания нового native thread.\n\nОднако есть и недостатки. Самый большой заключается в том, что вы не можете исполнять два потока одновременно. Поскольку существует только один native thread, только он и вызывается планировщиком ОС. Даже если у вас несколько процессоров и несколько green threads, только один процессор может вызывать green thread. И всё потому, что с точки зрения планировщика заданий ОС всё это выглядит одним потоком.\n\nНачиная с версии 1.2 Java поддерживает native threads, и с тех пор они используются по умолчанию.\n\n[к оглавлению](#Многопоточность)\n\n## Каким образом можно создать поток?\n+ Создать потомка класса `Thread` и переопределить его метод `run()`;\n+ Создать объект класса `Thread`, передав ему в конструкторе экземпляр класса, реализующего интерфейс `Runnable`. Эти интерфейс содержит метод `run()`, который будет выполняться в новом потоке. Поток закончит выполнение, когда завершится его метод `run()`.\n+ Вызвать метод `submit()` у экземпляра класса реализующего интерфейс `ExecutorService`, передав ему в качестве параметра экземпляр класса реализующего интерфейс `Runnable` или `Callable` (содержит метод `call()`, в котором описывается логика выполнения).\n\n[к оглавлению](#Многопоточность)\n\n## Чем различаются `Thread` и `Runnable`?\n`Thread` - это класс, некоторая надстройка над физическим потоком.\n\n`Runnable` - это интерфейс, представляющий абстракцию над выполняемой задачей.\n\nПомимо того, что `Runnable` помогает разрешить проблему множественного наследования, несомненный плюс от его использования состоит в том, что он позволяет логически отделить логику выполнения задачи от непосредственного управления потоком.\n\n[к оглавлению](#Многопоточность)\n\n## В чём заключается разница между методами `start()` и `run()`?\nНесмотря на то, что `start()` вызывает метод `run()` внутри себя, это не то же самое, что просто вызов `run()`. Если `run()` вызывается как обычный метод, то он вызывается в том же потоке и никакой новый поток не запускается, как это происходит, в случае, когда вы вызываете метод `start()`.\n\n[к оглавлению](#Многопоточность)\n\n## Как принудительно запустить поток?\nНикак. В Java не существует абсолютно никакого способа принудительного запуска потока. Это контролируется JVM и Java не предоставляет никакого API для управления этим процессом.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«монитор»_ в Java?\n__Монитор__, мьютекс (mutex) – это средство обеспечения контроля за доступом к ресурсу. У монитора может быть максимум один владелец в каждый текущий момент времени. Следовательно, если кто-то использует ресурс и захватил монитор для обеспечения единоличного доступа, то другой, желающий использовать тот же ресурс, должен подождать освобождения монитора, захватить его и только потом начать использовать ресурс.\n\nУдобно представлять монитор как id захватившего его объекта. Если этот id равен 0 – ресурс свободен. Если не 0 – ресурс занят. Можно встать в очередь и ждать его освобождения.\n\nВ Java у каждого экземпляра объекта есть монитор, который контролируется непосредственно виртуальной машиной. Используется он так: любой нестатический `synchronized`-метод при своем вызове прежде всего пытается захватить монитор того объекта, у которого он вызван (на который он может сослаться как на `this`). Если это удалось – метод исполняется. Если нет – поток останавливается и ждет, пока монитор будет отпущен.\n\n[к оглавлению](#Многопоточность)\n\n## Дайте определение понятию «синхронизация».\nСинхронизация - это процесс, который позволяет выполнять потоки параллельно.\n\nВ Java все объекты имеют одну блокировку, благодаря которой только один поток одновременно может получить доступ к критическому коду в объекте. Такая синхронизация помогает предотвратить повреждение состояния объекта. Если поток получил блокировку, ни один другой поток не может войти в синхронизированный код, пока блокировка не будет снята. Когда поток, владеющий блокировкой, выходит из синхронизированного кода, блокировка снимается. Теперь другой поток может получить блокировку объекта и выполнить синхронизированный код. Если поток пытается получить блокировку объекта, когда другой поток владеет блокировкой, поток переходит в состояние Блокировки до тех пор, пока блокировка не снимется.\n\n[к оглавлению](#Многопоточность)\n\n## Какие существуют способы синхронизации в Java?\n+ __Системная синхронизация с использованием `wait()`/`notify()`__. Поток, который ждет выполнения каких-либо условий, вызывает у этого объекта метод `wait()`, предварительно захватив его монитор. На этом его работа приостанавливается. Другой поток может вызвать на этом же самом объекте метод `notify()` (опять же, предварительно захватив монитор объекта), в результате чего, ждущий на объекте поток «просыпается» и продолжает свое выполнение. В обоих случаях монитор надо захватывать в явном виде, через `synchronized`-блок, потому как методы `wait()`/`notify()` не синхронизированы!\n\n+ __Системная синхронизация с использованием `join()`__. Метод `join()`, вызванный у экземпляра класса `Thread`, позволяет текущему потоку остановиться до того момента, как поток, связанный с этим экземпляром, закончит работу.\n\n+ __Использование классов из пакета `java.util.concurrent`__, который предоставляет набор классов для организации межпоточного взаимодействия. Примеры таких классов - `Lock`, `Semaphore` и пр.. Концепция данного подхода заключается в использовании атомарных операций и переменных.\n\n[к оглавлению](#Многопоточность)\n\n## В каких состояниях может находиться поток?\nПотоки могут находиться в одном из следующих состояний:\n\n+ __Новый (New)__. После создания экземпляра потока, он находится в состоянии Новый до тех пор, пока не вызван метод `start()`. В этом состоянии поток не считается живым.\n+ __Работоспособный (Runnable)__. Поток переходит в состояние Работоспособный, когда вызывается метод `start()`. Поток может перейти в это состояние также из состояния Работающий или из состояния Блокирован. Когда поток находится в этом состоянии, он считается живым.\n+ __Работающий (Running)__. Поток переходит из состояния Работоспособный в состояние Работающий, когда Планировщик потоков выбирает его как работающий в данный момент.\n+ __Живой, но не работоспособный (Alive, but not runnable)__. Поток может быть живым, но не работоспособным по нескольким причинам:\n    + __Ожидание (Waiting)__. Поток переходит в состояние Ожидания, вызывая метод `wait()`. Вызов `notify()` или `notifyAll()` может перевести поток из состояния Ожидания в состояние Работоспособный. \n    + __Сон (Sleeping)__. Метод `sleep()` переводит поток в состояние Сна на заданный промежуток времени в миллисекундах.\n    + __Блокировка (Blocked)__. Поток может перейти в это состояние, в ожидании ресурса, такого как ввод/вывод или из-за блокировки другого объекта. В этом случае поток переходит в состояние Работоспособный, когда ресурс становится доступен.\n    + __Мёртвый (Dead)__. Поток считается мёртвым, когда его метод `run()` полностью выполнен. Мёртвый поток не может перейти ни в какое другое состояние, даже если для него вызван метод `start()`.\n\n[к оглавлению](#Многопоточность)\n\n## Можно ли создавать новые экземпляры класса, пока выполняется `static synchronized` метод?\nДа, можно создавать новые экземпляры класса, так как статические поля не принадлежат к экземплярам класса.\n\n[к оглавлению](#Многопоточность)\n\n## Зачем может быть нужен `private` мьютекс?\nОбъект для синхронизации делается `private`, чтобы сторонний код не мог на него синхронизироваться и случайно получить взаимную блокировку.\n\n[к оглавлению](#Многопоточность)\n\n## Как работают методы `wait()` и `notify()`/`notifyAll()`?\nЭти методы определены у класса `Object` и предназначены для взаимодействия потоков между собой при межпоточной синхронизации.\n\n+ `wait()`: освобождает монитор и переводит вызывающий поток в состояние ожидания до тех пор, пока другой поток не вызовет метод `notify()`/`notifyAll()`;\n+ `notify()`: продолжает работу потока, у которого ранее был вызван метод `wait()`;\n+ `notifyAll()`: возобновляет работу всех потоков, у которых ранее был вызван метод `wait()`.\n\nКогда вызван метод `wait()`, поток освобождает блокировку на объекте и переходит из состояния Работающий (Running) в состояние Ожидания (Waiting). Метод `notify()` подаёт сигнал одному из потоков, ожидающих на объекте, чтобы перейти в состояние Работоспособный (Runnable). При этом невозможно определить, какой из ожидающих потоков должен стать работоспособным. Метод `notifyAll()` заставляет все ожидающие потоки для объекта вернуться в состояние Работоспособный (Runnable). Если ни один поток не находится в ожидании на методе `wait()`, то при вызове `notify()` или `notifyAll()` ничего не происходит.\n\nПоток может вызвать методы `wait()` или `notify()` для определённого объекта, только если он в данный момент имеет блокировку на этот объект. `wait()`, `notify()` и `notifyAll()` должны вызываться только из синхронизированного кода.\n\n[к оглавлению](#Многопоточность)\n\n## В чем разница между `notify()` и `notifyAll()`? \nДело в том, что «висеть» на методе `wait()` одного монитора могут сразу несколько потоков. При вызове `notify()` только один из них выходит из `wait()` и пытается захватить монитор, а затем продолжает работу со следующего после `wait()` оператора. Какой из них выйдет - заранее неизвестно. А при вызове `notifyAll()`, все висящие на `wait()` потоки выходят из `wait()`, и все они пытаются захватить монитор. Понятно, что в любой момент времени монитор может быть захвачен только одним потоком, а остальные ждут своей очереди. Порядок очереди определяется планировщиком потоков Java.\n\n[к оглавлению](#Многопоточность)\n\n## Почему методы `wait()` и `notify()` вызываются только в синхронизированном блоке?\nМонитор надо захватывать в явном виде (через `synchronized`-блок), потому что методы `wait()` и `notify()` не синхронизированы.\n\n[к оглавлению](#Многопоточность)\n\n## Чем отличается работа метода `wait()` с параметром и без параметра?\n`wait()`\n\n+ __без параметров__ освобождает монитор и переводит вызывающий поток в состояние ожидания до тех пор, пока другой поток не вызовет метод `notify()`/`notifyAll()`, \n+ __с параметрами__ заставит поток ожидать заданное количество времени или вызова `notify()`/`notifyAll()`.\n\n[к оглавлению](#Многопоточность)\n\n## Чем отличаются методы `Thread.sleep()` и `Thread.yield()`?\nМетод `yield()` служит причиной того, что поток переходит из состояния работающий (running) в состояние работоспособный (runnable), давая возможность другим потокам активизироваться. Но следующий выбранный для запуска поток может и не быть другим.\n\nМетод `sleep()` вызывает засыпание текущего потока на заданное время, состояние изменяется с работающий (running) на ожидающий (waiting).\n\n[к оглавлению](#Многопоточность)\n\n## Как работает метод `Thread.join()`?\nКогда поток вызывает `join()` для другого потока, текущий работающий поток будет ждать, пока другой поток, к которому он присоединяется, не будет завершён:\n\n```java\nvoid join()        \nvoid join(long millis) \nvoid join(long millis, int nanos) \n```\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _deadlock_?\n__Взаимная блокировка (deadlock)__ - явление, при котором все потоки находятся в режиме ожидания. Происходит, когда достигаются состояния:\n\n1. взаимного исключения: по крайней мере один ресурс занят в режиме неделимости и, следовательно, только один поток может использовать ресурс в любой данный момент времени.\n2. удержания и ожидания: поток удерживает как минимум один ресурс и запрашивает дополнительные ресурсов, которые удерживаются другими потоками.\n3. отсутствия предочистки: операционная система не переназначивает ресурсы: если они уже заняты, они должны отдаваться удерживающим потокам сразу же.\n4. цикличного ожидания: поток ждёт освобождения ресурса, другим потоком, который в свою очередь ждёт освобождения ресурса заблокированного первым потоком.\n \nПростейший способ избежать взаимной блокировки – не допускать цикличного ожидания. Этого можно достичь, получая мониторы разделяемых ресурсов в определённом порядке и освобождая их в обратном порядке.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _livelock_?\n_livelock_ – тип взаимной блокировки, при котором несколько потоков выполняют бесполезную работу, попадая в зацикленность при попытке получения каких-либо ресурсов. При этом их состояния постоянно изменяются в зависимости друг от друга. Фактической ошибки не возникает, но КПД системы падает до 0. Часто возникает в результате попыток предотвращения deadlock.\n\n> Реальный пример livelock, – когда два человека встречаются в узком коридоре и каждый, пытаясь быть вежливым, отходит в сторону, и так они бесконечно двигаются из стороны в сторону, абсолютно не продвигаясь в нужном им направлении.\n\n[к оглавлению](#Многопоточность)\n\n## Как проверить, удерживает ли поток монитор определённого ресурса?\nМетод `Thread.holdsLock(lock)` возвращает `true`, когда текущий поток удерживает монитор у определённого объекта.\n\n[к оглавлению](#Многопоточность)\n\n## На каком объекте происходит синхронизация при вызове `static synchronized` метода?\nУ синхронизированного статического метода нет доступа к `this`, но есть доступ к объекту класса `Class`, он присутствует в единственном экземпляре и именно он выступает в качестве монитора для синхронизации статических методов. Таким образом, следующая конструкция:\n\n```java\npublic class SomeClass {\n\n    public static synchronized void someMethod() {\n        //code\n    }\n}\n```\n\nэквивалентна такой:\n\n```java\npublic class SomeClass {\n\n    public static void someMethod(){\n        synchronized(SomeClass.class){\n            //code\n        }\n    }\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n## Для чего используется ключевое слово `volatile`, `synchronized`, `transient`, `native`?\n__`volatile`__ - этот модификатор вынуждает потоки отключить оптимизацию доступа и использовать единственный экземпляр переменной. Если переменная примитивного типа – этого будет достаточно для обеспечения потокобезопасности. Если же переменная является ссылкой на объект – синхронизировано будет исключительно значение этой ссылки. Все же данные, содержащиеся в объекте, синхронизированы не будут!\n\n__`synchronized`__ - это зарезервированное слово позволяет добиваться синхронизации в помеченных им методах или блоках кода.\n\nКлючевые слова `transient` и `native` к многопоточности никакого отношения не имеют, первое используется для указания полей класса, которые не нужно сериализовать, а второе - сигнализирует о том, что метод реализован в платформо-зависимом коде.\n\n[к оглавлению](#Многопоточность)\n\n## В чём различия между `volatile` и _Atomic_ переменными?\n`volatile` принуждает использовать единственный экземпляр переменной, но не гарантирует атомарность. Например, операция `count++` не станет атомарной просто потому, что `count` объявлена `volatile`. C другой стороны `class AtomicInteger` предоставляет атомарный метод для выполнения таких комплексных операций атомарно, например `getAndIncrement()` – атомарная замена оператора инкремента, его можно использовать, чтобы атомарно увеличить текущее значение на один. Похожим образом сконструированы атомарные версии и для других типов данных.\n\n[к оглавлению](#Многопоточность)\n\n##  В чём заключаются различия между `java.util.concurrent.Atomic*.compareAndSwap()` и `java.util.concurrent.Atomic*.weakCompareAndSwap()`.\n+ `weakCompareAndSwap()` не создает _memory barrier_ и не дает гарантии _happens-before_;\n+ `weakCompareAndSwap()` сильно зависит от кэша/CPU, и может возвращать `false` без видимых причин;\n+ `weakCompareAndSwap()`, более легкая, но поддерживаемая далеко не всеми архитектурами и не всегда эффективная операция.\n\n[к оглавлению](#Многопоточность)\n\n## Что значит _«приоритет потока»_?\nПриоритеты потоков используются планировщиком потоков для принятия решений о том, когда какому из потоков будет разрешено работать. Теоретически высокоприоритетные потоки получают больше времени процессора, чем низкоприоритетные. Практически объем времени процессора, который получает поток, часто зависит от нескольких факторов помимо его приоритета.\n\nЧтобы установить приоритет потока, используется метод класса `Thread`: `final void setPriority(int level)`. Значение `level` изменяется в пределах от `Thread.MIN_PRIORITY = 1` до `Thread.MAX_PRIORITY = 10`. Приоритет по умолчанию - `Thread.NORM_PRlORITY = 5`.\n\nПолучить текущее значение приоритета потока можно вызвав метод: `final int getPriority()` у экземпляра класса `Thread`.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«потоки-демоны»_?\nПотоки-демоны работают в фоновом режиме вместе с программой, но не являются неотъемлемой частью программы. Если какой-либо процесс может выполняться на фоне работы основных потоков выполнения и его деятельность заключается в обслуживании основных потоков приложения, то такой процесс может быть запущен как поток-демон с помощью метода `setDaemon(boolean value)`, вызванного у потока до его запуска. Метод `boolean isDaemon()` позволяет определить, является ли указанный поток демоном или нет. Базовое свойство потоков-демонов заключается в возможности основного потока приложения завершить выполнение потока-демона (в отличие от обычных потоков) с окончанием кода метода `main()`, не обращая внимания на то, что поток-демон еще работает.\n\n[к оглавлению](#Многопоточность)\n\n## Можно ли сделать основной поток программы демоном?\nНет. Потоки-демоны позволяют описывать фоновые процессы, которые нужны только для обслуживания основных потоков выполнения и не могут существовать без них.\n\n[к оглавлению](#Многопоточность)\n\n## Что значит _«усыпить»_ поток?\nЭто значит приостановить его на определенный промежуток времени, вызвав в ходе его выполнения статический метод `Thread.sleep()` передав в качестве параметра необходимое количество времени в  миллисекундах. До истечения этого времени поток может быть выведен из состояния ожидания вызовом `interrupt()` с выбрасыванием `InterruptedException`.\n\n[к оглавлению](#Многопоточность)\n\n## Чем отличаются два интерфейса `Runnable` и `Callable`?\n+ Интерфейс `Runnable` появился в Java 1.0, а интерфейс `Callable` был введен в Java 5.0 в составе библиотеки `java.util.concurrent`;\n+ Классы, реализующие интерфейс `Runnable` для выполнения задачи должны реализовывать метод `run()`. Классы, реализующие интерфейс `Callable` - метод `call()`;\n+ Метод `Runnable.run()` не возвращает никакого значения, `Callable.call()` возвращает объект `Future`, который может содержать результат вычислений;\n+ Метод `run()` не может выбрасывать проверяемые исключения, в то время как метод `call()` может.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое `FutureTask`?\n`FutureTask` представляет собой отменяемое асинхронное вычисление в параллельном Java приложении. Этот класс предоставляет базовую реализацию `Future`, с методами для запуска и остановки вычисления, методами для запроса состояния вычисления и извлечения результатов. Результат может быть получен только когда вычисление завершено, метод получения будет заблокирован, если вычисление ещё не завершено. Объекты `FutureTask` могут быть использованы для обёртки объектов `Callable` и `Runnable`. Так как `FutureTask` реализует `Runnable`, его можно передать в `Executor` на выполнение.\n\n[к оглавлению](#Многопоточность)\n\n## В чем заключаются различия между `CyclicBarrier` и `CountDownLatch`?\n`CountDownLatch` (замок с обратным отсчетом) предоставляет возможность любому количеству потоков в блоке кода ожидать до тех пор, пока не завершится определенное количество операций, выполняющихся в других потоках, перед тем как они будут «отпущены», чтобы продолжить свою деятельность. В конструктор `CountDownLatch(int count)` обязательно передается количество операций, которое должно быть выполнено, чтобы замок «отпустил» заблокированные потоки.\n\n> Примером `CountDownLatch` из жизни может служить сбор экскурсионной группы: пока не наберется определенное количество человек, экскурсия не начнется.\n\n`CyclicBarrier` реализует шаблон синхронизации «Барьер». Циклический барьер является точкой синхронизации, в которой указанное количество параллельных потоков встречается и блокируется. Как только все потоки прибыли, выполняется опционное действие (или не выполняется, если барьер был инициализирован без него), и, после того, как оно выполнено, барьер ломается и ожидающие потоки «освобождаются». В конструкторы барьера `CyclicBarrier(int parties)` и `CyclicBarrier(int parties, Runnable barrierAction)` обязательно передается количество сторон, которые должны «встретиться», и, опционально, действие, которое должно произойти, когда стороны встретились, но перед тем когда они будут «отпущены». \n\n> `CyclicBarrier` является альтернативой метода `join()`, который «собирает» потоки только после того, как они выполнились.\n\n`CyclicBarrier` похож на `CountDownLatch`, но главное различие между ними в том, что использовать «замок» можно лишь единожды - после того, как его счётчик достигнет нуля, а «барьер» можно использовать неоднократно, даже после того, как он «сломается».\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _race condition_?\n__Состояние гонки__ (race condition) - ошибка проектирования многопоточной системы или приложения, при которой эта работа напрямую зависит от того, в каком порядке выполняются потоки. Состояние гонки возникает, когда поток, который должен исполнится в начале, проиграл гонку и первым исполняется другой поток: поведение кода изменяется, из-за чего возникают недетерменированные ошибки.\n\n[к оглавлению](#Многопоточность)\n\n## Существует ли способ решения проблемы _race condition_?\nРаспространённые способы решения:\n\n+ __Использование локальной копии__ — копирование разделяемой переменной в локальную переменную потока. Этот способ работает только тогда, когда переменная одна и копирование производится атомарно (за одну машинную команду), использование `volatile`.\n+ __Синхронизация__ - операции над разделяемым ресурсом происходят в синхронизированном блоке (при использовании ключевого слова `synchronized`).\n+ __Комбинирование методов__ - вышеперечисленные способы можно комбинировать, копируя «опасные» переменные в синхронизированном блоке. С одной стороны, это снимает ограничение на атомарность, с другой — позволяет избавиться от слишком больших синхронизированных блоков.\n\nОчевидных способов выявления и исправления состояний гонки не существует. Лучший способ избавиться от гонок — правильное проектирование многозадачной системы.\n\n[к оглавлению](#Многопоточность)\n\n## Как остановить поток?\nНа данный момент в Java принят уведомительный порядок остановки потока (хотя JDK 1.0 и имеет несколько управляющих выполнением потока методов, например `stop()`, `suspend()` и `resume()` - в следующих версиях JDK все они были помечены как `deprecated` из-за потенциальных угроз взаимной блокировки).\n\nДля корректной остановки потока можно использовать метод класса `Thread` - `interrupt()`. Этот метод выставляет некоторый внутренний флаг-статус прерывания. В дальнейшем состояние этого флага можно проверить с помощью метода `isInterrupted()` или `Thread.interrupted()` (для текущего потока). Метод `interrupt()` также способен вывести поток из состояния ожидания или спячки. Т.е. если у потока были вызваны методы `sleep()` или `wait()` – текущее состояние прервется и будет выброшено исключение `InterruptedException`. Флаг в этом случае не выставляется.\n\nСхема действия при этом получается следующей:\n\n+ Реализовать поток. \n+ В потоке периодически проводить проверку статуса прерывания через вызов `isInterrupted()`.\n+ Если состояние флага изменилось или было выброшено исключение во время ожидания/спячки, следовательно поток пытаются остановить извне. \n+ Принять решение – продолжить работу (если по каким-то причинам остановиться невозможно) или освободить заблокированные потоком ресурсы и закончить выполнение.\n\nВозможная проблема, которая присутствует в этом подходе – блокировки на потоковом вводе-выводе. Если поток заблокирован на чтении данных - вызов `interrupt()` из этого состояния его не выведет. Решения тут различаются в зависимости от типа источника данных. Если чтение идет из файла – долговременная блокировка крайне маловероятна и тогда можно просто дождаться выхода из метода `read()`. Если же чтение каким-то образом связано с сетью – стоит использовать неблокирующий ввод-вывод из Java NIO.\n\nВторой вариант реализации метода остановки (а также и приостановки) – сделать собственный аналог `interrupt()`. Т.е. объявить в классе потока флаги – на остановку и/или приостановку и выставлять их путем вызова заранее определённых методов извне. Методика действия при этом остаётся прежней – проверять установку флагов и принимать решения при их изменении. Недостатки такого подхода. Во-первых, потоки в состоянии ожидания таким способом не «оживить». Во-вторых, выставление флага одним потоком совсем не означает, что второй поток тут же его увидит. Для увеличения производительности виртуальная машина использует кеш данных потока, в результате чего обновление переменной у второго потока может произойти через неопределенный промежуток времени (хотя допустимым решением будет объявить переменную-флаг как `volatile`).\n\n[к оглавлению](#Многопоточность)\n\n## Почему не рекомендуется использовать метод `Thread.stop()`?\nПри принудительной остановке (приостановке) потока, `stop()` прерывает поток в недетерменированном месте выполнения, в результате становится совершенно непонятно, что делать с принадлежащими ему ресурсами. Поток может открыть сетевое соединение - что в таком случае делать с данными, которые еще не вычитаны? Где гарантия, что после дальнейшего запуска потока (в случае приостановки) он сможет их дочитать? Если поток блокировал разделяемый ресурс, то как снять эту блокировку и не переведёт ли принудительное снятие к нарушению консистентности системы? То же самое можно расширить и на случай соединения с базой данных: если поток остановят посередине транзакции, то кто ее будет закрывать? Кто и как будет разблокировать ресурсы?\n\n[к оглавлению](#Многопоточность)\n\n## Что происходит, когда в потоке выбрасывается исключение?\n+ Если исключение не поймано – поток «умирает» (переходит в состяние мёртв (dead)). \n+ Если установлен обработчик непойманных исключений, то он возьмёт управление на себя. `Thread.UncaughtExceptionHandler` – интерфейс, определённый как вложенный интерфейс для других обработчиков, вызываемых, когда поток внезапно останавливается из-за непойманного исключения. В случае, если поток собирается остановиться из-за непойманного исключения, JVM проверяет его на наличие `UncaughtExceptionHandler`, используя `Thread.getUncaughtExceptionHandler()`, и если такой обработчик найдет, то вызовет у него метод `uncaughtException()`, передав этот поток и исключение в виде аргументов.\n\n[к оглавлению](#Многопоточность)\n\n## В чем разница между `interrupted()` и `isInterrupted()`?\nМеханизм прерывания работы потока в Java реализован с использованием внутреннего флага, известного как статус прерывания. Прерывание потока вызовом `Thread.interrupt()` устанавливает этот флаг. Методы `Thread.interrupted()` и `isInterrupted()` позволяют проверить, является ли поток прерванным. \n\nКогда прерванный поток проверяет статус прерывания, вызывая статический метод `Thread.interrupted()`, статус прерывания сбрасывается. \n\nНестатический метод `isInterrupted()` используется одним потоком для проверки статуса прерывания у другого потока, не изменяя флаг прерывания.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«пул потоков»_?\nСоздание потока является затратной по времени и ресурсам операцией. Количество потоков, которое может быть запущено в рамках одного процесса также ограниченно. Чтобы избежать этих проблем и в целом управлять множеством потоков более эффективно в Java был реализован механизм пула потоков (thread pool), который создаётся во время запуска приложения и в дальнейшем потоки для обработки запросов берутся и переиспользуются уже из него. Таким образом, появляется возможность не терять потоки, сбалансировать приложение по количеству потоков и частоте их создания.\n\nНачиная с Java 1.5 Java API предоставляет фреймворк `Executor`, который позволяет создавать различные типы пула потоков:\n\n+ `Executor` - упрощенный интерфейс пула, содержит один метод для передачи задачи на выполнение;\n+ `ExecutorService` - расширенный интерфейс пула, с возможностью завершения всех потоков;\n+ `AbstractExecutorService` - базовый класс пула, реализующий интерфейс `ExecutorService`;\n+ `Executors` - фабрика объектов связанных с пулом потоков, в том числе позволяет создать основные типы пулов;\n+ `ThreadPoolExecutor` - пул потоков с гибкой настройкой, может служить базовым классом для нестандартных пулов;\n+ `ForkJoinPool` - пул для выполнения задач типа `ForkJoinTask`;\n+ ... и другие.\n\nМетоды `Executors` для создания пулов:\n\n+ `newCachedThreadPool()` - если есть свободный поток, то задача выполняется в нем, иначе добавляется новый поток в пул. Потоки не используемые больше минуты завершаются и удалются и кэша. Размер пула неограничен. Предназначен для выполнения множество небольших асинхронных задач;\n+ `newCachedThreadPool(ThreadFactory threadFactory)` - аналогично предыдущему, но с собственной фабрикой потоков;\n+ `newFixedThreadPool(int nThreads)` - создает пул на указанное число потоков. Если новые задачи добавлены, когда все потоки активны, то они будут сохранены в очереди для выполнения позже. Если один из потоков завершился из-за ошибки, на его место будет запущен другой поток. Потоки живут до тех пор, пока пул не будет закрыт явно методом `shutdown()`.\n+ `newFixedThreadPool(int nThreads, ThreadFactory threadFactory)` - аналогично предыдущему, но с собственной фабрикой потоков;\n+ `newSingleThreadScheduledExecutor()` - однопотоковый пул с возможностью выполнять задачу через указанное время или выполнять периодически. Если поток был завершен из-за каких-либо ошибок, то для выполнения следующей задачи будет создан новый поток.\n+ `newSingleThreadScheduledExecutor(ThreadFactory threadFactory)` - аналогично предыдущему, но с собственной фабрикой потоков;\n+ `newScheduledThreadPool(int corePoolSize)` - пул для выполнения задач через указанное время или переодически;\n+ `newScheduledThreadPool(int corePoolSize, ThreadFactory threadFactory)` - аналогично предыдущему, но с собственной фабрикой потоков;\n+ `unconfigurableExecutorService(ExecutorService executor)` - обертка на пул, запрещающая изменять его конфигурацию;\n\n[к оглавлению](#Многопоточность)\n\n## Какого размера должен быть пул потоков?\nНастраивая размер пула потоков, важно избежать двух ошибок: слишком мало потоков (очередь на выполнение будет расти, потребляя много памяти) или слишком много потоков (замедление работы всей систему из-за частых переключений контекста). \n\nОптимальный размер пула потоков зависит от количества доступных процессоров и природы задач в рабочей очереди. На N-процессорной системе для рабочей очереди, которая будет выполнять исключительно задачи с ограничением по скорости вычислений, можно достигнуть максимального использования CPU с пулом потоков, в котором содержится N или N+1 поток.\nДля задач, которые могут ждать осуществления I/O (ввода - вывода) - например, задачи, считывающей HTTP-запрос из сокета – может понадобиться увеличение размера пула свыше количества доступных процессоров, потому, что не все потоки будут работать все время. Используя профилирование, можно оценить отношение времени ожидания (`WT`) ко времени обработки (`ST`) для типичного запроса. Если назвать это соотношение `WT/ST`, то для N-процессорной системе понадобится примерно `N*(1 + WT/ST)` потоков для полной загруженности процессоров.\n\nИспользование процессора – не единственный фактор, важный при настройке размера пула потоков. По мере возрастания пула потоков, можно столкнуться с ограничениями планировщика, доступной памяти, или других системных ресурсов, таких, как количество сокетов, дескрипторы открытого файла, или каналы связи базы данных.\n\n[к оглавлению](#Многопоточность)\n\n## Что будет, если очередь пула потоков уже заполнена, но подаётся новая задача?\nЕсли очередь пула потоков заполнилась, то поданная задача будет «отклонена». Например - метод `submit()` у `ThreadPoolExecutor` выкидывает `RejectedExecutionException`, после которого вызывается `RejectedExecutionHandler`.\n\n[к оглавлению](#Многопоточность)\n\n## В чём заключается различие между методами `submit()` и `execute()` у пула потоков?\nОба метода являются способами подачи задачи в пул потоков, но между ними есть небольшая разница. \n\n`execute(Runnable command)` определён в интерфейсе `Executor` и выполняет поданную задачу и ничего не возвращает.\n\n`submit()` – перегруженный метод, определённый в интерфейсе `ExecutorService`. Способен принимать задачи типов `Runnable` и `Callable` и возвращать объект `Future`, который можно использовать для контроля и управления процессом выполнения, получения его результата.\n\n[к оглавлению](#Многопоточность)\n\n## В чем заключаются различия между cтеком (stack) и кучей (heap) с точки зрения многопоточности?\n__Cтек__ – участок памяти, тесно связанный с потоками. У каждого потока есть свой стек, которые хранит локальные переменные, параметры методов и стек вызовов. Переменная, хранящаяся в стеке одного потока, не видна для другого.\n\n__Куча__ – общий участок памяти, который делится между всеми потоками. Объекты, неважно локальные или любого другого уровня, создаются в куче. Для улучшения производительности, поток обычно кэширует значения из кучи в свой стек, в этом случае для того, чтобы указать потоку, что переменную следует читать из кучи используется ключевое слово `volatile`.\n\n[к оглавлению](#Многопоточность)\n\n## Как поделиться данными между двумя потоками?\nДанными между потоками возможно делиться, используя общий объект или параллельные структуры данных, например `BlockingQueue`.\nКласс синхронизатор `Exchanger` предназначен для обмена данными между потоками. Он параметризуется типом данных, которыми потоки должны обмениваться.\nОбмен данными производится с помощью единственного метода этого класса exchange(). Для работы нужно передать в конструкторы thread-ов экземпляр класса Exchanger и обращаться к нему в методе run(). Этот метод блокирует поток до того момента, пока другой поток не передаст в Exchanger свои данные.\n\n[к оглавлению](#Многопоточность)\n\n## Какой параметр запуска JVM используется для контроля размера стека потока?\n`-Xss`\n\n[к оглавлению](#Многопоточность)\n\n## Как получить дамп потока?\nСреды исполнения Java на основе HotSpot генерируют только дамп в формате HPROF. В распоряжении разработчика имеется несколько интерактивных методов генерации дампов и один метод генерации дампов на основе событий.\n\nИнтерактивные методы:\n\n+ Использование <kbd>Ctrl+Break</kbd>: если для исполняющегося приложения установлена опция командной строки `-XX:+HeapDumpOnCtrlBreak`, то дамп формата HPROF генерируется вместе с дампом потока при наступлении события `Ctrl+Break` или `SIGQUIT` (обычно генерируется с помощью _kill -3_), которое инициируется посредством консоли. Эта опция может быть недоступна в некоторых версиях. В этом случае можно попытаться использовать следующую опцию:\n`-Xrunhprof:format=b,file=heapdump.hprof`\n+ Использование инструмента _jmap_: утилита _jmap_, поставляемая в составе каталога `/bin/` комплекта JDK, позволяет запрашивать дамп HPROF из исполняющегося процесса.\n+ Использование операционной системы: Для создания файла ядра можно воспользоваться неразрушающей командой _gcore_ или разрушающими командами _kill -6_ или _kill -11_. Затем извлечь дамп кучи из файла ядра с помощью утилиты _jmap_.\n+ Использование инструмента _JConsole_. Операция `dumpHeap` предоставляется в _JConsole_ как MBean-компонент `HotSpotDiagnostic`. Эта операция запрашивает генерацию дампа в формате HPROF.\n\nМетод на основе событий:\n\n+ Событие `OutOfMemoryError`: Если для исполняющегося приложения установлена опция командной строки `-XX:+HeapDumpOnOutOfMemoryError`, то при возникновении ошибки `OutOfMemoryError` генерируется дамп формата HPROF. Это идеальный метод для «production» систем, поскольку он практически обязателен для диагностирования проблем памяти и не сопровождается постоянными накладными расходами с точки зрения производительности. В старых выпусках сред исполнения Java на базе HotSpot для этого события не устанавливается предельное количество дампов кучи в пересчете на одну JVM; в более новых выпусках допускается не более одного дампа кучи для этого события на каждый запуск JVM.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _ThreadLocal-переменная_?\n`ThreadLocal` - класс, позволяющий имея одну переменную, иметь различное её значение для каждого из потоков.\n\nУ каждого потока - т.е. экземпляра класса `Thread` - есть ассоциированная с ним таблица _ThreadLocal-переменных_. Ключами таблицы являются cсылки на объекты класса `ThreadLocal`, а значениями - ссылки на объекты, «захваченные» ThreadLocal-переменными, т.е. ThreadLocal-переменные отличаются от обычных переменных тем, что у каждого потока свой собственный, индивидуально инициализируемый экземпляр переменной. Доступ к значению можно получить через методы `get()` или `set()`.\n\nНапример, если мы объявим ThreadLocal-переменную: `ThreadLocal<Object> locals = new ThreadLocal<Object>();`. А затем, в потоке, сделаем `locals.set(myObject)`, то ключом таблицы будет ссылка на объект `locals`, а значением - ссылка на объект `myObject`. При этом для другого потока существует возможность «положить» внутрь `locals` другое значение.\n\nСледует обратить внимание, что `ThreadLocal` изолирует именно ссылки на объекты, а не сами объекты. Если изолированные внутри потоков ссылки ведут на один и тот же объект, то возможны коллизии.\n\nТак же важно отметить, что т.к. ThreadLocal-переменные изолированы в потоках, то инициализация такой переменной должна происходить в том же потоке, в котором она будет использоваться. Ошибкой является инициализация такой переменной (вызов метода `set()`) в главном потоке приложения, потому как в данном случае значение, переданное в методе `set()`, будет «захвачено» для главного потока, и при вызове метода `get()` в целевом потоке будет возвращен `null`.\n\n[к оглавлению](#Многопоточность)\n\n## Назовите различия между `synchronized` и `ReentrantLock`?\nВ Java 5 появился интерфейс `Lock` предоставляющий возможности более эффективного и тонкого контроля блокировки ресурсов. `ReentrantLock` – распространённая реализация `Lock`, которая предоставляет `Lock` с таким же базовым поведением и семантикой, как у `synchronized`, но расширенными возможностями, такими как опрос о блокировании (lock polling), ожидание блокирования заданной длительности и прерываемое ожидание блокировки. Кроме того, он предлагает гораздо более высокую эффективность функционирования в условиях жесткой _состязательности_.\n\nЧто понимается под блокировкой с повторным входом (reentrant)? Просто то, что есть подсчет сбора данных, связанный с блокировкой, и если поток, который удерживает блокировку, снова ее получает, данные отражают увеличение, и тогда для реального разблокирования нужно два раза снять блокировку. Это аналогично семантике synchronized; если поток входит в синхронный блок, защищенный монитором, который уже принадлежит потоку, потоку будет разрешено дальнейшее функционирование, и блокировка не будет снята, когда поток выйдет из второго (или последующего) блока synchronized, она будет снята только когда он выйдет из первого блока synchronized, в который он вошел под защитой монитора.\n\n```java\nLock lock = new ReentrantLock();\n\nlock.lock();\ntry { \n  // update object state\n}\nfinally {\n  lock.unlock(); \n}\n```\n\n+ Реализация `ReentrantLock` гораздо более масштабируема в условиях состязательности, чем реализация `synchronized`. Это значит, что когда много потоков соперничают за право получения блокировки, общая пропускная способность обычно лучше у `ReentrantLock`, чем у `synchronized`. JVM требуется меньше времени на установление очередности потоков и больше времени на непосредственно выполнение.\n+ У `ReentrantLock` (как и у других реализаций `Lock`) блокировка должна обязательно сниматься в `finally` блоке (иначе, если бы защищенный код выбросил исключение, блокировка не была бы снята). Используя синхронизацию, JVM гарантирует, что блокировка автоматически снимаются.\n\nРезюмируя, можно сказать, что когда состязания за блокировку нет либо оно очень мало, то `synchronized` возможно будет быстрее. Если присутствует заметное состязание за доступ к ресурсу, то скорее всего `ReentrantLock` даст некое преимущество.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое `ReadWriteLock`?\n`ReadWriteLock` – это интерфейс расширяющий базовый интерфейс `Lock`. Используется для улучшения производительности в многопоточном процессе и оперирует парой связанных блокировок (одна - для операций чтения, другая - для записи). Блокировка чтения может удерживаться одновременно несколькими читающими потоками, до тех пор, пока не появится записывающий. Блокировка записи является эксклюзивной. \n\nСуществует реализующий интерфейс `ReadWriteLock` класс `ReentrantReadWriteLock`, который поддерживает до 65535 блокировок записи и до стольки же блокировок чтения.\n\n```java\nReadWriteLock rwLock = new ReentrantReadWriteLock();\nLock rLock = rwLock.readLock();\nLock wLock = rwLock.writeLock();\n\nwLock.lock();\ntry {\n    // exclusive write\n} finally {\n    wLock.unlock();\n}\n        \nrLock.lock();\ntry {\n    // shared reading\n} finally {\n    rLock.unlock();\n}        \n```\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«блокирующий метод»_?\n__Блокирующий метод__ – метод, который блокируется, до тех пор, пока задание не выполнится, например метод `accept()` у `ServerSocket` блокируется в ожидании подключения клиента. Здесь блокирование означает, что контроль не вернётся к вызывающему методу до тех пор, пока не выполнится задание. Так же существуют асинхронные или неблокирующиеся методы, которые могут завершится до выполнения задачи.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _«фреймворк Fork/Join»_?\nФреймворк Fork/Join, представленный в JDK 7, - это набор классов и интерфейсов позволяющих использовать преимущества многопроцессорной архитектуры современных компьютеров. Он разработан для выполнения задач, которые можно рекурсивно разбить на маленькие подзадачи, которые можно решать параллельно.\n\n+ Этап Fork: большая задача разделяется на несколько меньших подзадач, которые в свою очередь также разбиваются на меньшие. И так до тех пор, пока задача не становится тривиальной и решаемой последовательным способом.\n+ Этап Join: далее (опционально) идёт процесс «свёртки» - решения подзадач некоторым образом объединяются пока не получится решение всей задачи. \n\nРешение всех подзадач (в т.ч. и само разбиение на подзадачи) происходит параллельно. \n\n> Для решения некоторых задач этап Join не требуется. Например, для параллельного QuickSort — массив рекурсивно делится на всё меньшие и меньшие диапазоны, пока не вырождается в тривиальный случай из 1 элемента. Хотя в некотором смысле Join будет необходим и тут, т.к. всё равно остаётся необходимость дождаться пока не закончится выполнение всех подзадач.\n\nЕщё одно замечательное преимущество этого фреймворка заключается в том, что он использует work-stealing алгоритм: потоки, которые завершили выполнение собственных подзадач, могут «украсть» подзадачи у других потоков, которые всё ещё заняты.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое `Semaphore`?\nSemaphore – это новый тип синхронизатора: семафор со счётчиком, реализующий шаблон синхронизации Семафор. Доступ управляется с помощью счётчика: изначальное значение счётчика задаётся в конструкторе при создании синхронизатора, когда поток заходит в заданный блок кода, то значение счётчика уменьшается на единицу, когда поток его покидает, то увеличивается. Если значение счётчика равно нулю, то текущий поток блокируется, пока кто-нибудь не выйдет из защищаемого блока. Semaphore используется для защиты дорогих ресурсов, которые доступны в ограниченном количестве, например подключение к базе данных в пуле.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _double checked locking Singleton_?\n__double checked locking Singleton__ - это один из способов создания потокобезопасного класса реализующего шаблон Одиночка. Данный метод пытается оптимизировать производительность, блокируясь только случае, когда экземпляр одиночки создаётся впервые.\n\n```java\nclass DoubleCheckedLockingSingleton {\n    private static volatile DoubleCheckedLockingSingleton instance;\n\n    static DoubleCheckedLockingSingleton getInstance() {\n        DoubleCheckedLockingSingleton current = instance;\n        if (current == null) {\n            synchronized (DoubleCheckedLockingSingleton.class) {\n                current = instance;\n\n                if (current == null) {\n                    instance = current = new DoubleCheckedLockingSingleton();\n                }\n            }\n        }\n        return current;\n    }\n}\n```\n\nСледует заметить, что требование `volatile` обязательно. Проблема Double Checked Lock заключается в модели памяти Java, точнее в порядке создания объектов, когда возможна ситуация, при которой другой поток может получить и начать использовать (на основании условия, что указатель не нулевой) не полностью сконструированный объект. Хотя эта проблема была частично решена в JDK 1.5, однако рекомендация использовать `volatile` для Double Cheсked Lock остаётся в силе.\n\n[к оглавлению](#Многопоточность)\n\n## Как создать потокобезопасный Singleton?\n+ __Static field__\n\n```java\npublic class Singleton {\n\tpublic static final Singleton INSTANCE = new Singleton();\n}\n```\n\n+ __Enum__\n\n```java\npublic enum Singleton {\n\tINSTANCE;\n}\n```\n\n+ __Synchronized Accessor__\n\n```java\npublic class Singleton {\n\tprivate static Singleton instance;\n\t\n\tpublic static synchronized Singleton getInstance() {\n\t\tif (instance == null) {\n\t\t\tinstance = new Singleton();\n\t\t}\n\t\treturn instance;\n\t}\n}\n```\n\n+ __Double Checked Locking & `volatile`__\n\n```java\npublic class Singleton {\n        private static volatile Singleton instance;\n\t\n        public static Singleton getInstance() {\n\t\tSingleton localInstance = instance;\n\t\tif (localInstance == null) {\n\t\t\tsynchronized (Singleton.class) {\n\t\t\t\tlocalInstance = instance;\n\t\t\t\tif (localInstance == null) {\n\t\t\t\t\tinstance = localInstance = new Singleton();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn localInstance;\n\t}\n}\n```\n\n+ __On Demand Holder Idiom__\n\n```java\npublic class Singleton {\n\t\t\n\tpublic static class SingletonHolder {\n\t\tpublic static final Singleton HOLDER_INSTANCE = new Singleton();\n\t}\n\t\t\n\tpublic static Singleton getInstance() {\n\t\treturn SingletonHolder.HOLDER_INSTANCE;\n\t}\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n## Чем полезны неизменяемые объекты?\nНеизменяемость (immutability) помогает облегчить написание многопоточного кода. Неизменяемый объект может быть использован без какой-либо синхронизации. К сожалению, в Java нет аннотации `@Immutable`, которая делает объект неизменяемым, для этого разработчикам нужно самим создавать класс с необходимыми характеристиками. Для этого необходимо следовать некоторым общим принципам: инициализация всех полей только в конструкторе, отсутствие методов `setX()` вносящих изменения в поля класса, отсутствие утечек ссылки, организация отдельного хранилища копий изменяемых объектов и т.д.\n\n[к оглавлению](#Многопоточность)\n\n## Что такое _busy spin_?\n__busy spin__ – это техника, которую программисты используют, чтобы заставить поток ожидать при определённом условии. В отличие от традиционных методов `wait()`, `sleep()` или `yield()`, которые подразумевают уступку процессорного времени, этот метод вместо уступки выполняет пустой цикл. Это необходимо, для того, чтобы сохранить кэш процессора, т.к. в многоядерных системах, существует вероятность, что приостановленный поток продолжит своё выполнение уже на другом ядре, а это повлечет за собой перестройку состояния процессорного кэша, которая является достаточно затратной процедурой.\n\n[к оглавлению](#Многопоточность)\n\n## Перечислите принципы, которым вы следуете в многопоточном программировании?\nПри написании многопоточных программ следует придерживаться определённых правил, которые помогают обеспечить достойную производительность приложения в сочетании с удобной отладкой и простотой дальнейшей поддержки кода.\n\n+ Всегда давайте значимые имена своим потокам. Процесс отладки, нахождения ошибок или отслеживание исключения в многопоточном коде – довольно сложная задача. `OrderProcessor`, `QuoteProcessor` или `TradeProcessor` намного информативнее, чем `Thread1`, `Thread2` и `Thread3`. Имя должно отражать задачу, выполняемую данным потоком.\n+ Избегайте блокировок или старайтесь уменьшить масштабы синхронизации. Блокировка затратна, а переключение контекста ещё более ресурсоёмко. Пытайтесь избегать синхронизации и блокировки насколько это возможно, и организуйте критическую секцию в минимально необходимом объёме. Поэтому синхронизированный блок всегда предпочительней синхронизированного метода, дополнительно наделяя возможностью абсолютного контроля над масштабом блокировки.\n+ Обрабатывайте прерывание потока с особой тщательностью. Нет ничего хуже оставшегося заблокированным ресурса или системы в неконстистентном, по причине неподтверждённой транзакции, состоянии.\n+ Помните об обработке исключений. Выброшенные `InterruptedException` должны быть адекватно обработаны, а не просто подавлены. Так же не стоит пренебрегать `Thread.UncaughtExceptionHandler`. При использовании пула потоков необходимо помнить, что он зачастую просто «проглатывает» исключения. Так, если вы отправили на выполнение `Runnable` нужно обязательно поместить код выполнения задачи внутрь блока `try-catch`. Если в очередь пула помещается `Callable`, необходимо удостоверится, что результат выполнения всегда изымается помощью блокирующего `get()`, чтобы в случае возникновения существовала возможность заново выбросить произошедшее исключение.\n+ Между синхронизаторами и `wait()` и `notify()` следует выбирать синхронизаторы. Во-первых, синхронизаторы, типа `CountDownLatch`, `Semaphore`, `CyclicBarrier` или `Exchanger` упрощают написание кода. Очень сложно реализовывать комплексный управляющий поток, используя `wait()` и `notify()`. Во-вторых, эти классы написаны и поддерживаются настоящими мастерами своего дела и есть шанс, что в последующих версиях JDK они будут оптимизированы изнутри или заменены более производительной внешней реализацией.\n+ Почти всегда использование Concurrent сollection выгоднее использования Synchronized сollection, т.к. первые более современны (используют все доступные на момент их написания новшества языка) и масштабируемы, чем их синхронизированые аналоги.\n\n[к оглавлению](#Многопоточность)\n\n## Какое из следующих утверждений о потоках неверно?\n1. Если метод `start()` вызывается дважды для одного и того же объекта `Thread`, во время выполнения генерируется исключение.\n2. Порядок, в котором запускались потоки, может не совпадать с порядком их фактического выполнения.\n3. Если метод `run()` вызывается напрямую для объекта `Thread`, во время выполнения генерируется исключение.\n4. Если метод `sleep()` вызывается для потока, во время выполнения синхронизированного кода, блокировка не снимается.\n\nПравильный ответ: 3. Если метод `run()` вызывается напрямую для объекта `Thread`, во время выполнения исключение не генерируется. Однако, код, написанный в методе `run()` будет выполняться текущим, а не новым потоком. Таким образом, правильный способ запустить поток – это вызов метода `start()`, который приводит к выполнению метода `run()` новым потоком. \n\nВызов метода `start()` дважды для одного и того же объекта `Thread` приведёт к генерированию исключения `IllegalThreadStateException` во время выполнения, следовательно, утверждение 1 верно. Утверждение 2 верно, так как порядок, в котором выполняются потоки, определяется Планировщиком потоков, независимо от того, какой поток запущен первым. Утверждение 4 верно, так как поток не освободит блокировки, которые он держит, когда он переходит в состояние Ожидания.\n\n[к оглавлению](#Многопоточность)\n\n## Даны 3 потока Т1, Т2 и Т3? Как реализовать выполнение в последовательности Т1, Т2, Т3?\nТакой последовательности выполнения можно достичь многими способами, например просто воспользоваться методом `join()`, чтобы запустить поток в момент, когда другой уже закончит своё выполнение. Для реализации заданной последовательности, нужно запустить последний поток первым, и затем вызывать метод `join()` в обратном порядке, то есть Т3 вызывает `Т2.join`, а Т2 вызывает `Т1.join`, таким образом Т1 закончит выполнение первым, а Т3 последним.\n\n[к оглавлению](#Многопоточность)\n\n## Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`).\n```java\nclass NonBlockingStack<T> {\n    private final AtomicReference<Element> head = new AtomicReference<>(null);\n\n    NonBlockingStack<T> push(final T value) {\n        final Element current = new Element();\n        current.value = value;\n        Element recent;\n        do {\n            recent = head.get();\n            current.previous = recent;\n        } while (!head.compareAndSet(recent, current));\n        return this;\n    }\n\n    T pop() {\n        Element result;\n        Element previous;\n        do {\n            result = head.get();\n            if (result == null) {\n                return null;\n            }\n            previous = result.previous;\n        } while (!head.compareAndSet(result, previous));\n        return result.value;\n    }\n\n    private class Element {\n        private T value;\n        private Element previous;\n    }\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n## Напишите минимальный неблокирующий стек (всего два метода — `push()` и `pop()`) с использованием `Semaphore`.\n```java\nclass SemaphoreStack<T> {\n    private final Semaphore semaphore = new Semaphore(1);\n    private Node<T> head = null;\n\n    SemaphoreStack<T> push(T value) {\n        semaphore.acquireUninterruptibly();\n        try {\n            head = new Node<>(value, head);\n        } finally {\n            semaphore.release();\n        }\n\n        return this;\n    }\n\n    T pop() {\n        semaphore.acquireUninterruptibly();\n        try {\n            Node<T> current = head;\n            if (current != null) {\n                head = head.next;\n                return current.value;\n            }\n            return null;\n        } finally {\n            semaphore.release();\n        }\n    }\n\n    private static class Node<E> {\n        private final E value;\n        private final Node<E> next;\n\n        private Node(E value, Node<E> next) {\n            this.value = value;\n            this.next = next;\n        }\n    }\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n## Напишите минимальный неблокирующий ArrayList (всего четыре метода — `add()`, `get()`, `remove()`, `size()`).\n```java\nclass NonBlockingArrayList<T> {\n    private volatile Object[] content = new Object[0];\n\n    NonBlockingArrayList<T> add(T item) {\n        return add(content.length, item);\n    }\n\n    NonBlockingArrayList<T> add(int index, T item) {\n        if (index < 0) {\n            throw new IllegalArgumentException();\n        }\n        boolean needsModification = index > content.length - 1;\n        if (!needsModification) {\n            if (item == null) {\n                needsModification = content[index] != null;\n            } else {\n                needsModification = !item.equals(content[index]);\n            }\n        }\n        if (needsModification) {\n            final Object[] renewed = Arrays.copyOf(content, Math.max(content.length, index + 1));\n            renewed[index] = item;\n            content = renewed;\n        }\n        return this;\n    }\n\n    NonBlockingArrayList<T> remove(int index) {\n        if (index < 0 || index >= content.length) {\n            throw new IllegalArgumentException();\n        }\n        int size = content.length - 1;\n        final Object[] renewed = new Object[size];\n        System.arraycopy(content, 0, renewed, 0, index);\n        if (index + 1 < size) {\n            System.arraycopy(content, index + 1, renewed, index, size - index);\n        }\n        content = renewed;\n        return this;\n    }\n\n    T get(int index) {\n        return (T) content[index];\n    }\n\n    int size() {\n        return content.length;\n    }\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n## Напишите потокобезопасную реализацию класса с неблокирующим методом `BigInteger next()`, который возвращает элементы последовательности: `[1, 2, 4, 8, 16, ...]`.\n```java\nclass PowerOfTwo {\n    private AtomicReference<BigInteger> current = new AtomicReference<>(null);\n    \n    BigInteger next() {\n        BigInteger recent, next;\n        do {\n            recent = current.get();\n            next = (recent == null) ? BigInteger.valueOf(1) : recent.shiftLeft(1);\n        } while (!current.compareAndSet(recent, next));\n        return next;\n    }\n}\n```\n[к оглавлению](#Многопоточность)\n\n## Напишите простейший многопоточный ограниченный буфер с использованием `synchronized`.\n```java\nclass QueueSynchronized<T> {\n    private volatile int size = 0;\n    private final Object[] content;\n    private final int capacity;\n\n    private int out;\n    private int in;\n\n    private final Object isEmpty = new Object();\n    private final Object isFull = new Object();\n\n    QueueSynchronized(final int capacity) {\n        this.capacity = capacity;\n        content = new Object[this.capacity];\n        out = 0;\n        in = 0;\n        size = 0;\n    }\n\n    private int cycleInc(int index) {\n        return (++index == capacity)\n                ? 0\n                : index;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T get() throws InterruptedException {\n        if (size == 0) {\n            synchronized (isEmpty) {\n                while (size < 1) {\n                    isEmpty.wait();\n                }\n            }\n        }\n        try {\n            synchronized (this) {\n                final Object value = content[out];\n                content[out] = null;\n                if (size > 1) {\n                    out = cycleInc(out);\n                } \n                size--;\n                return (T) value;\n            }\n        } finally {\n            synchronized (isFull) {\n                isFull.notify();\n            }\n        }\n    }\n\n    QueueSynchronized<T> put(T value) throws InterruptedException {\n        if (size == capacity) {\n            synchronized (isFull) {\n                while (size == capacity) {\n                    isFull.wait();\n                }\n            }\n        }\n        synchronized (this) {\n            if (size == 0) {\n                content[in] = value;\n            } else {\n                in = cycleInc(in);\n                content[in] = value;\n            }\n            size++;\n        }\n        synchronized (isEmpty) {\n            isEmpty.notify();\n        }\n        return this;\n    }\n}\n```\n[к оглавлению](#Многопоточность)\n\n## Напишите простейший многопоточный ограниченный буфер с использованием `ReentrantLock`.\n```java\nclass QueueReentrantLock<T> {\n\n    private volatile int size = 0;\n    private final Object[] content;\n    private final int capacity;\n\n    private int out;\n    private int in;\n\n    private final ReentrantLock lock = new ReentrantLock();\n    private final Condition isEmpty = lock.newCondition();\n    private final Condition isFull = lock.newCondition();\n\n    QueueReentrantLock(int capacity) {\n        try {\n            lock.lock();\n            this.capacity = capacity;\n            content = new Object[capacity];\n            out = 0;\n            in = 0;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    private int cycleInc(int index) {\n        return (++index == capacity)\n                ? 0\n                : index;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    T get() throws InterruptedException {\n        try {\n            lock.lockInterruptibly();\n            if (size == 0) {\n                while (size < 1) {\n                    isEmpty.await();\n                }\n            }\n            final Object value = content[out];\n            content[out] = null;\n            if (size > 1) {\n                out = cycleInc(out);\n            }\n            size--;\n            isFull.signal();\n            return (T) value;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    QueueReentrantLock<T> put(T value) throws InterruptedException {\n        try {\n            lock.lockInterruptibly();\n            if (size == capacity) {\n                while (size == capacity) {\n                    isFull.await();\n                }\n            }\n            if (size == 0) {\n                content[in] = value;\n            } else {\n                in = cycleInc(in);\n                content[in] = value;\n            }\n            size++;\n            isEmpty.signal();\n        } finally {\n            lock.unlock();\n        }\n        return this;\n    }\n}\n```\n\n[к оглавлению](#Многопоточность)\n\n# Источники\n+ [Хабрахабр - Многопоточность в Java](https://habrahabr.ru/post/164487/)\n+ [IBM DeveloperWorks - Выполнение задач в многопоточном режиме](https://www.ibm.com/developerworks/ru/library/l-java_universe_multithreading_tasks/)\n+ [Записки трезвого практика](http://www.skipy.ru/technics/synchronization.html)\n+ [IBM DeveloperWorks - SCJP](https://www.ibm.com/developerworks/ru/edu/j-scjp/section8.html)\n+ [JavaRush](http://info.javarush.ru/KapChook/2015/02/15/Перевод-Топ-50-интервью-вопросов-по-нитям-Часть-1-.html)\n+ [Хабрахабр - Справочник по синхронизаторам `java.util.concurrent.*`](https://habrahabr.ru/post/277669/)\n+ [Блог сурового челябинского программиста](http://samolisov.blogspot.ru/2011/04/threadlocal.html)\n+ [IBM DeveloperWorks - Более гибкая, масштабируемая блокировка в JDK 5.0](http://www.ibm.com/developerworks/ru/library/j-jtp10264/)\n+ [Хабрахабр - Правильный Singleton в Java](https://habrahabr.ru/post/129494/)\n+ [duct-tape-architect.ru](http://www.duct-tape-architect.ru/?p=294#3__171_187___Java_HotSpot_JVM6)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "core.md",
          "type": "blob",
          "size": 171.3779296875,
          "content": "[Вопросы для собеседования](README.md)\n\n# Java Core\n+ [Чем различаются JRE, JVM и JDK?](#Чем-различаются-jre-jvm-и-jdk)\n+ [Какие существуют модификаторы доступа?](#Какие-существуют-модификаторы-доступа)\n+ [О чем говорит ключевое слово `final`?](#О-чем-говорит-ключевое-слово-final)\n+ [Какими значениями инициализируются переменные по умолчанию?](#Какими-значениями-инициализируются-переменные-по-умолчанию)\n+ [Что вы знаете о функции `main()`?](#Что-вы-знаете-о-функции-main)\n+ [Какие логические операции и операторы вы знаете?](#Какие-логические-операции-и-операторы-вы-знаете)\n+ [Что такое тернарный оператор выбора?](#Что-такое-тернарный-оператор-выбора)\n+ [Какие побитовые операции вы знаете?](#Какие-побитовые-операции-вы-знаете)\n+ [Где и для чего используется модификатор `abstract`?](#Где-и-для-чего-используется-модификатор-abstract)\n+ [Дайте определение понятию _«интерфейс»_. Какие модификаторы по умолчанию имеют поля и методы интерфейсов?](#Дайте-определение-понятию-интерфейс-Какие-модификаторы-по-умолчанию-имеют-поля-и-методы-интерфейсов)\n+ [Чем абстрактный класс отличается от интерфейса? В каких случаях следует использовать абстрактный класс, а в каких интерфейс?](#Чем-абстрактный-класс-отличается-от-интерфейса-В-каких-случаях-следует-использовать-абстрактный-класс-а-в-каких-интерфейс)\n+ [Почему в некоторых интерфейсах вообще не определяют методов?](#Почему-в-некоторых-интерфейсах-вообще-не-определяют-методов)\n+ [Почему нельзя объявить метод интерфейса с модификатором `final`?](#Почему-нельзя-объявить-метод-интерфейса-с-модификатором-final)\n+ [Что имеет более высокий уровень абстракции - _класс_, _абстрактный класс_ или _интерфейс_?](#Что-имеет-более-высокий-уровень-абстракции---класс-абстрактный-класс-или-интерфейс)\n+ [Может ли объект получить доступ к члену класса, объявленному как `private`? Если да, то каким образом?](#Может-ли-объект-получить-доступ-к-члену-класса-объявленному-как-private-Если-да-то-каким-образом)\n+ [Каков порядок вызова конструкторов и блоков инициализации с учётом иерархии классов?](#Каков-порядок-вызова-конструкторов-и-блоков-инициализации-с-учётом-иерархии-классов)\n+ [Зачем нужны и какие бывают блоки инициализации?](#Зачем-нужны-и-какие-бывают-блоки-инициализации)\n+ [К каким конструкциям Java применим модификатор `static`?](#К-каким-конструкциям-java-применим-модификатор-static)\n+ [Для чего в Java используются статические блоки инициализации?](#Для-чего-в-java-используются-статические-блоки-инициализации)\n+ [Что произойдёт, если в блоке инициализации возникнет исключительная ситуация?](#Что-произойдёт-если-в-блоке-инициализации-возникнет-исключительная-ситуация)\n+ [Какое исключение выбрасывается при возникновении ошибки в блоке инициализации класса?](#Какое-исключение-выбрасывается-при-возникновении-ошибки-в-блоке-инициализации-класса)\n+ [Может ли статический метод быть переопределён или перегружен?](#Может-ли-статический-метод-быть-переопределён-или-перегружен)\n+ [Могут ли нестатические методы перегрузить статические?](#Могут-ли-нестатические-методы-перегрузить-статические)\n+ [Можно ли сузить уровень доступа/тип возвращаемого значения при переопределении метода?](#Можно-ли-сузить-уровень-доступатип-возвращаемого-значения-при-переопределении-метода)\n+ [Возможно ли при переопределении метода изменить: модификатор доступа, возвращаемый тип, тип аргумента или их количество, имена аргументов или их порядок; убирать, добавлять, изменять порядок следования элементов секции `throws`?](#Возможно-ли-при-переопределении-метода-изменить-модификатор-доступа-возвращаемый-тип-тип-аргумента-или-их-количество-имена-аргументов-или-их-порядок-убирать-добавлять-изменять-порядок-следования-элементов-секции-throws)\n+ [Как получить доступ к переопределенным методам родительского класса?](#Как-получить-доступ-к-переопределенным-методам-родительского-класса)\n+ [Можно ли объявить метод абстрактным и статическим одновременно?](#Можно-ли-объявить-метод-абстрактным-и-статическим-одновременно)\n+ [В чем разница между членом экземпляра класса и статическим членом класса?](#В-чем-разница-между-членом-экземпляра-класса-и-статическим-членом-класса)\n+ [Где разрешена инициализация статических/нестатических полей?](#Где-разрешена-инициализация-статическихнестатических-полей)\n+ [Какие типы классов бывают в java?](#Какие-типы-классов-бывают-в-java)\n+ [Расскажите про вложенные классы. В каких случаях они применяются?](#Расскажите-про-вложенные-классы-В-каких-случаях-они-применяются)\n+ [Что такое _«статический класс»_?](#Что-такое-статический-класс)\n+ [Какие существуют особенности использования вложенных классов: статических и внутренних? В чем заключается разница между ними?](#Какие-существуют-особенности-использования-вложенных-классов-статических-и-внутренних-В-чем-заключается-разница-между-ними)\n+ [Что такое _«локальный класс»_? Каковы его особенности?](#Что-такое-локальный-класс-Каковы-его-особенности)\n+ [Что такое _«анонимные классы»_? Где они применяются?](#Что-такое-анонимные-классы-Где-они-применяются)\n+ [Каким образом из вложенного класса получить доступ к полю внешнего класса?](#Каким-образом-из-вложенного-класса-получить-доступ-к-полю-внешнего-класса)\n+ [Для чего используется оператор `assert`?](#Для-чего-используется-оператор-assert)\n+ [Что такое _Heap_ и _Stack_ память в Java? Какая разница между ними?](#Что-такое-heap-и-stack-память-в-java-Какая-разница-между-ними)\n+ [Верно ли утверждение, что примитивные типы данных всегда хранятся в стеке, а экземпляры ссылочных типов данных в куче?](#Верно-ли-утверждение-что-примитивные-типы-данных-всегда-хранятся-в-стеке-а-экземпляры-ссылочных-типов-данных-в-куче)\n+ [Каким образом передаются переменные в методы, по значению или по ссылке?](#Каким-образом-передаются-переменные-в-методы-по-значению-или-по-ссылке)\n+ [Для чего нужен сборщик мусора?](#Для-чего-нужен-сборщик-мусора)\n+ [Как работает сборщик мусора?](#Как-работает-сборщик-мусора)\n+ [Какие разновидности сборщиков мусора реализованы в виртуальной машине HotSpot?](#Какие-разновидности-сборщиков-мусора-реализованы-в-виртуальной-машине-hotspot)\n+ [Опишите алгоритм работы какого-нибудь сборщика мусора, реализованного в виртуальной машине HotSpot.](#Опишите-алгоритм-работы-какого-нибудь-сборщика-мусора-реализованного-в-виртуальной-машине-hotspot)\n+ [Что такое «пул строк»?](#Что-такое-пул-строк)\n+ [Что такое `finalize()`? Зачем он нужен?](#Что-такое-finalize-Зачем-он-нужен)\n+ [Что произойдет со сборщиком мусора, если выполнение метода `finalize()` требует ощутимо много времени, или в процессе выполнения будет выброшено исключение?](#Что-произойдет-со-сборщиком-мусора-если-выполнение-метода-finalize-требует-ощутимо-много-времени-или-в-процессе-выполнения-будет-выброшено-исключение)\n+ [Чем отличаются `final`, `finally` и `finalize()`?](#Чем-отличаются-final-finally-и-finalize)\n+ [Расскажите про приведение типов. Что такое понижение и повышение типа?](#Расскажите-про-приведение-типов-Что-такое-понижение-и-повышение-типа)\n+ [Когда в приложении может быть выброшено исключение `ClassCastException`?](#Когда-в-приложении-может-быть-выброшено-исключение-classcastexception)\n+ [Что такое литералы?](#Что-такое-литералы)\n+ [Что такое _autoboxing («автоупаковка»)_ в Java и каковы правила упаковки примитивных типов в классы-обертки?](#Что-такое-autoboxing-автоупаковка-в-java-и-каковы-правила-упаковки-примитивных-типов-в-классы-обертки)\n+ [Какие есть особенности класса `String`?](#Какие-есть-особенности-класса-string)\n+ [Почему `String` неизменяемый и финализированный класс?](#Почему-string-неизменяемый-и-финализированный-класс)\n+ [Почему `char[]` предпочтительнее `String` для хранения пароля?](#Почему-char-предпочтительнее-string-для-хранения-пароля)\n+ [Почему строка является популярным ключом в `HashMap` в Java?](#Почему-строка-является-популярным-ключом-в-hashmap-в-java)\n+ [Что делает метод `intern()` в классе `String`?.](#Что-делает-метод-intern-в-классе-string)\n+ [Можно ли использовать строки в конструкции `switch`?](#Можно-ли-использовать-строки-в-конструкции-switch)\n+ [Какая основная разница между `String`, `StringBuffer`, `StringBuilder`?](#Какая-основная-разница-между-string-stringbuffer-stringbuilder)\n+ [Что такое класс `Object`? Какие в нем есть методы?](#Что-такое-класс-object-Какие-в-нем-есть-методы)\n+ [Дайте определение понятию «конструктор».](#Дайте-определение-понятию-конструктор)\n+ [Что такое _«конструктор по умолчанию»_?](#Что-такое-конструктор-по-умолчанию)\n+ [Чем отличаются конструктор по-умолчанию, конструктор копирования и конструктор с параметрами?](#Чем-отличаются-конструктор-по-умолчанию-конструктор-копирования-и-конструктор-с-параметрами)\n+ [Где и как вы можете использовать приватный конструктор?](#Где-и-как-вы-можете-использовать-приватный-конструктор)\n+ [Расскажите про классы-загрузчики и про динамическую загрузку классов.](#Расскажите-про-классы-загрузчики-и-про-динамическую-загрузку-классов)\n+ [Что такое _Reflection_?](#Что-такое-reflection)\n+ [Зачем нужен `equals()`. Чем он отличается от операции `==`?](#Зачем-нужен-equals-Чем-он-отличается-от-операции-)\n+ [Если вы хотите переопределить `equals()`, какие условия должны выполняться?](#Если-вы-хотите-переопределить-equals-какие-условия-должны-выполняться)\n+ [Какими свойствами обладает порождаемое `equals()` отношение эквивалентности?](#Какими-свойствами-обладает-порождаемое-equals-отношение-эквивалентности)\n+ [Правила переопределения метода `Object.equals()`.](#Правила-переопределения-метода-objectequals)\n+ [Какая связь между `hashCode()` и `equals()`?](#Какая-связь-между-hashcode-и-equals)\n+ [Если `equals()` переопределен, есть ли какие-либо другие методы, которые следует переопределить?](#Если-equals-переопределен-есть-ли-какие-либо-другие-методы-которые-следует-переопределить)\n+ [Что будет, если переопределить `equals()` не переопределяя `hashCode()`? Какие могут возникнуть проблемы?](#Что-будет-если-переопределить-equals-не-переопределяя-hashcode-Какие-могут-возникнуть-проблемы)\n+ [Каким образом реализованы методы `hashCode()` и `equals()` в классе `Object`?](#Каким-образом-реализованы-методы-hashcode-и-equals-в-классе-object)\n+ [Для чего нужен метод `hashCode()`?](#Для-чего-нужен-метод-hashcode)\n+ [Каковы правила переопределения метода `Object.hashCode()`?](#Каковы-правила-переопределения-метода-objecthashcode)\n+ [Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете `hashCode()`?](#Есть-ли-какие-либо-рекомендации-о-том-какие-поля-следует-использовать-при-подсчете-hashcode)\n+ [Могут ли у разных объектов быть одинаковые `hashCode()`?](#Могут-ли-у-разных-объектов-быть-одинаковые-hashcode)\n+ [Если у класса `Point{int x, y;}` реализовать метод `equals(Object that) {(return this.x == that.x && this.y == that.y)}`, но сделать хэш код в виде `int hashCode() {return x;}`, то будут ли корректно такие точки помещаться и извлекаться из `HashSet`?](#Если-у-класса-pointint-x-y-реализовать-метод-equalsobject-that-return-thisx--thatx--thisy--thaty-но-сделать-хэш-код-в-виде-int-hashcode-return-x-то-будут-ли-корректно-такие-точки-помещаться-и-извлекаться-из-hashset)\n+ [Могут ли у разных объектов `(ref0 != ref1)` быть `ref0.equals(ref1) == true`?](#Могут-ли-у-разных-объектов-ref0--ref1-быть-ref0equalsref1--true)\n+ [Могут ли у разных ссылок на один объект `(ref0 == ref1)` быть `ref0.equals(ref1) == false`?](#Могут-ли-у-разных-ссылок-на-один-объект-ref0--ref1-быть-ref0equalsref1--false)\n+ [Можно ли так реализовать метод `equals(Object that) {return this.hashCode() == that.hashCode()}`?](#Можно-ли-так-реализовать-метод-equalsobject-that-return-thishashcode--thathashcode)\n+ [В `equals()` требуется проверять, что аргумент `equals(Object that)` такого же типа что и сам объект. В чем разница между `this.getClass() == that.getClass()` и `that instanceof MyClass`?](#В-equals-требуется-проверять-что-аргумент-equalsobject-that-такого-же-типа-что-и-сам-объект-В-чем-разница-между-thisgetclass--thatgetclass-и-that-instanceof-myclass)\n+ [Можно ли реализовать метод `equals()` класса `MyClass` вот так: `class MyClass {public boolean equals(MyClass that) {return this == that;}}`?](#Можно-ли-реализовать-метод-equals-класса-myclass-вот-так-class-myclass-public-boolean-equalsmyclass-that-return-this--that)\n+ [Есть класс `Point{int x, y;}`. Почему хэш код в виде `31 * x + y` предпочтительнее чем `x + y`?](#Есть-класс-pointint-x-y-Почему-хэш-код-в-виде-31--x--y-предпочтительнее-чем-x--y)\n+ [Расскажите про клонирование объектов.](#Расскажите-про-клонирование-объектов)\n+ [В чем отличие между _поверхностным_ и _глубоким_ клонированием?](#В-чем-отличие-между-поверхностным-и-глубоким-клонированием)\n+ [Какой способ клонирования предпочтительней?](#Какой-способ-клонирования-предпочтительней)\n+ [Почему метод `clone()` объявлен в классе `Object`, а не в интерфейсе `Cloneable`?](#Почему-метод-clone-объявлен-в-классе-object-а-не-в-интерфейсе-cloneable)\n+ [Опишите иерархию исключений.](#Опишите-иерархию-исключений)\n+ [Какие виды исключений в Java вы знаете, чем они отличаются?](#Какие-виды-исключений-в-java-вы-знаете-чем-они-отличаются)\n+ [Что такое _checked_ и _unchecked exception_?](#Что-такое-checked-и-unchecked-exception)\n+ [Какой оператор позволяет принудительно выбросить исключение?](#Какой-оператор-позволяет-принудительно-выбросить-исключение)\n+ [О чем говорит ключевое слово `throws`?](#О-чем-говорит-ключевое-слово-throws)\n+ [Как написать собственное («пользовательское») исключение?](#Как-написать-собственное-пользовательское-исключение)\n+ [Какие существуют _unchecked exception_?](#Какие-существуют-unchecked-exception)\n+ [Что представляет из себя ошибки класса `Error`?](#Что-представляет-из-себя-ошибки-класса-error)\n+ [Что вы знаете о `OutOfMemoryError`?](#Что-вы-знаете-о-outofmemoryerror)\n+ [Опишите работу блока _try-catch-finally_.](#Опишите-работу-блока-try-catch-finally)\n+ [Что такое механизм _try-with-resources_?](#Что-такое-механизм-try-with-resources)\n+ [Возможно ли использование блока _try-finally_ (без `catch`)?](#Возможно-ли-использование-блока-try-finally-без-catch)\n+ [Может ли один блок `catch` отлавливать сразу несколько исключений?](#Может-ли-один-блок-catch-отлавливать-сразу-несколько-исключений)\n+ [Всегда ли исполняется блок `finally`?](#Всегда-ли-исполняется-блок-finally)\n+ [Существуют ли ситуации, когда блок `finally` не будет выполнен?](#Существуют-ли-ситуации-когда-блок-finally-не-будет-выполнен)\n+ [Может ли метод _main()_ выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?](#Может-ли-метод-main-выбросить-исключение-во-вне-и-если-да-то-где-будет-происходить-обработка-данного-исключения)\n+ [Предположим, есть метод, который может выбросить `IOException` и `FileNotFoundException` в какой последовательности должны идти блоки `catch`? Сколько блоков `catch` будет выполнено?](#Предположим-есть-метод-который-может-выбросить-ioexception-и-filenotfoundexception-в-какой-последовательности-должны-идти-блоки-catch-Сколько-блоков-catch-будет-выполнено)\n+ [Что такое _generics_?](#Что-такое-generics)\n+ [Что такое _«интернационализация»_, _«локализация»_?](#Что-такое-интернационализация-локализация)\n\n## Чем различаются JRE, JVM и JDK?\n__JVM__, Java Virtual Machine (Виртуальная машина Java) — основная часть среды времени исполнения Java (JRE). Виртуальная машина Java исполняет байт-код Java, предварительно созданный из исходного текста Java-программы компилятором Java. JVM может также использоваться для выполнения программ, написанных на других языках программирования.\n\n__JRE__, Java Runtime Environment (Среда времени выполнения Java) - минимально-необходимая реализация виртуальной машины для исполнения Java-приложений. Состоит из JVM и стандартного набора библиотек классов Java.\n\n__JDK__, Java Development Kit (Комплект разработки на Java) - JRE и набор инструментов разработчика приложений на языке Java, включающий в себя компилятор Java, стандартные библиотеки классов Java, примеры, документацию, различные утилиты.\n\nКоротко: __JDK__ - среда для разработки программ на Java, включающая в себя __JRE__ - среду для обеспечения запуска Java программ, которая в свою очередь содержит __JVM__ - интерпретатор кода Java программ.\n\n[к оглавлению](#java-core)\n\n## Какие существуют модификаторы доступа?\n__private__ (приватный): члены класса доступны только внутри класса. Для обозначения используется служебное слово `private`.\n\n__default__, package-private, package level (доступ на уровне пакета): видимость класса/членов класса только внутри пакета. Является модификатором доступа по умолчанию - специальное \nобозначение не требуется.\n\n__protected__ (защищённый): члены класса доступны внутри пакета и в наследниках. Для обозначения используется служебное слово `protected`.\n\n__public__ (публичный): класс/члены класса доступны всем. Для обозначения используется служебное слово `public`.\n\nПоследовательность модификаторов по возрастанию уровня закрытости: public, protected, default, private.\n\nВо время наследования возможно изменения модификаторов доступа в сторону большей видимости (для поддержания соответствия _принципу подстановки Барбары Лисков_).\n\n[к оглавлению](#java-core)\n\n## О чем говорит ключевое слово `final`?\nМодификатор `final` может применяться к переменным, параметрам методов, полям и методам класса или самим классам.\n\n+ Класс не может иметь наследников;\n+ Метод не может быть переопределен в классах наследниках;\n+ Поле не может изменить свое значение после инициализации;\n+ Параметры методов не могут изменять своё значение внутри метода;\n+ Локальные переменные не могут быть изменены после присвоения им значения.\n\n[к оглавлению](#java-core)\n\n## Какими значениями инициализируются переменные по умолчанию?\n+ `byte` — `(byte)0`;\n+ `short` — `(short)0`;\n+ `int` — `0`;\n+ `long` — `0L`;\n+ `floatg` — `0f`;\n+ `double` — `0d`;\n+ `char` — `\\u0000`;\n+ `boolean` — `false`;\n+ Объекты (в том числе `String`) — `null`.\n\n[к оглавлению](#java-core)\n\n## Что вы знаете о функции `main()`?\n\nМетод `main()` — точка входа в программу. В приложении может быть несколько таких методов. Если метод отсутствует, то компиляция возможна, но при запуске будет получена ошибка _\\`Error: Main method not found\\`_.\n\n```java \npublic static void main(String[] args) {}\n```\n\n[к оглавлению](#java-core)\n\n## Какие логические операции и операторы вы знаете?\n+ `&`: Логическое _AND_ (И);\n+ `&&`: Сокращённое _AND_;\n+ `|`: Логическое _OR_ (ИЛИ);\n+ `||`: Сокращённое _OR_;\n+ `^`: Логическое _XOR_ (исключающее _OR_ (ИЛИ));\n+ `!`: Логическое унарное _NOT_ (НЕ);\n+ `&=`: _AND_ с присваиванием;\n+ `|=`: _OR_ с присваиванием;\n+ `^=`: _XOR_ с присваиванием;\n+ `==`: Равно;\n+ `!=`: Не равно;\n+ `?:`: Тернарный (троичный) условный оператор.\n\n[к оглавлению](#java-core)\n\n## Что такое тернарный оператор выбора?\nТернарный условный оператор `?:` - оператор, которым можно заменить некоторые конструкции операторов `if-then-else`.\n\nВыражение записывается в следующей форме:\n>условие ? выражение1 : выражение2\n\nЕсли `условие` выполняется, то вычисляется `выражение1` и его результат становится результатом выполнения всего оператора. Если же `условие` равно `false`, то вычисляется `выражение2` и его значение становится результатом работы оператора. Оба операнда `выражение1` и `выражение2` должны возвращать значение одинакового (или совместимого) типа.\n\n[к оглавлению](#java-core)\n\n## Какие побитовые операции вы знаете?\n+ `~`: Побитовый унарный оператор NOT;\n+ `&`: Побитовый AND;\n+ `&=`: Побитовый AND с присваиванием;\n+ `|`: Побитовый OR;\n+ `|=`: Побитовый OR с присваиванием;\n+ `^`: Побитовый исключающее XOR;\n+ `^=`: Побитовый исключающее XOR с присваиванием;\n+ `>>`: Сдвиг вправо (деление на 2 в степени сдвига);\n+ `>>=`: Сдвиг вправо с присваиванием;\n+ `>>>`: Сдвиг вправо без учёта знака;\n+ `>>>=`: Сдвиг вправо без учёта знака с присваиванием;\n+ `<<`: Сдвиг влево (умножение на 2 в степени сдвига);\n+ `<<=`: Сдвиг влево с присваиванием.\n\n[к оглавлению](#java-core)\n\n## Где и для чего используется модификатор `abstract`?\nКласс, помеченный модификатором `abstract`, называется абстрактным классом. Такие классы могут выступать только предками для других классов. Создавать экземпляры самого абстрактного класса не разрешается. При этом наследниками абстрактного класса могут быть как другие абстрактные классы, так и классы, допускающие создание объектов.\n\nМетод, помеченный ключевым словом `abstract` - абстрактный метод, т.е. метод, который не имеет реализации. Если в классе присутствует хотя бы один абстрактный метод, то весь класс должен быть объявлен абстрактным.\n\nИспользование абстрактных классов и методов позволяет описать некий шаблон объекта, который должен быть реализован в других классах. В них же самих описывается лишь некое общее для всех потомков поведение.\n\n[к оглавлению](#java-core)\n\n## Дайте определение понятию _«интерфейс»_. Какие модификаторы по умолчанию имеют поля и методы интерфейсов?\nКлючевое слово `interface` используется для создания полностью абстрактных классов. Основное предназначение интерфейса - определять каким образом мы можем использовать класс, который его реализует. Создатель интерфейса определяет имена методов, списки аргументов и типы возвращаемых значений, но не реализует их поведение. Все методы неявно объявляются как `public`.\n\nНачиная с Java 8 в интерфейсах разрешается размещать реализацию методов по умолчанию `default` и статических `static` методов.\n\nИнтерфейс также может содержать и поля. В этом случае они автоматически являются публичными `public`, статическими `static` и неизменяемыми `final`.\n\n[к оглавлению](#java-core)\n\n## Чем абстрактный класс отличается от интерфейса? В каких случаях следует использовать абстрактный класс, а в каких интерфейс?\n+ В Java класс может одновременно реализовать несколько интерфейсов, но наследоваться только от одного класса.\n+ Абстрактные классы используются только тогда, когда присутствует тип отношений «is a» (является). Интерфейсы могут реализоваться классами, которые не связаны друг с другом.\n+ Абстрактный класс - средство, позволяющее избежать написания повторяющегося кода, инструмент для частичной реализации поведения. Интерфейс - это средство выражения семантики класса, контракт, описывающий возможности. Все методы интерфейса неявно объявляются как `public abstract` или (начиная с Java 8) `default` - методами с реализацией по-умолчанию, а поля - `public static final`.\n+ Интерфейсы позволяют создавать структуры типов без иерархии.\n+ Наследуясь от абстрактного, класс «растворяет» собственную индивидуальность. Реализуя интерфейс, он расширяет собственную функциональность.\n\nАбстрактные классы содержат частичную реализацию, которая дополняется или расширяется в подклассах. При этом все подклассы схожи между собой в части реализации, унаследованной от абстрактного класса, и отличаются лишь в части собственной реализации абстрактных методов родителя. Поэтому абстрактные классы применяются в случае построения иерархии однотипных, очень похожих друг на друга классов. В этом случае наследование от абстрактного класса, реализующего поведение объекта по умолчанию может быть полезно, так как позволяет избежать написания повторяющегося кода. Во всех остальных случаях лучше использовать интерфейсы.\n\n[к оглавлению](#java-core)\n\n## Почему в некоторых интерфейсах вообще не определяют методов?\nЭто так называемые _маркерные интерфейсы_. Они просто указывают что класс относится к определенному типу. Примером может послужить интерфейс `Clonable`, который указывает на то, что класс поддерживает механизм клонирования.\n\n[к оглавлению](#java-core)\n\n## Почему нельзя объявить метод интерфейса с модификатором `final`?\nВ случае интерфейсов указание модификатора `final` бессмысленно, т.к. все методы интерфейсов неявно объявляются как абстрактные, т.е. их невозможно выполнить, не реализовав где-то еще, а этого нельзя будет сделать, если у метода идентификатор `final`.\n\n[к оглавлению](#java-core)\n\n## Что имеет более высокий уровень абстракции - _класс_, _абстрактный класс_ или _интерфейс_?\nИнтерфейс.\n\n[к оглавлению](#java-core)\n\n## Может ли объект получить доступ к члену класса, объявленному как `private`? Если да, то каким образом?\n+ Внутри класса доступ к приватной переменной открыт без ограничений;\n+ Вложенный класс имеет полный доступ ко всем (в том числе и приватным) членам содержащего его класса;\n+ Доступ к приватным переменным извне может быть организован через отличные от приватных методов, которые предоставлены разработчиком класса. Например: `getX()` и `setX()`.\n+ Через механизм рефлексии (Reflection API):\n\n```java\nclass Victim { \n    private int field = 42;\n}\n//...\nVictim victim = new Victim(); \nField field = Victim.class.getDeclaredField(\"field\"); \nfield.setAccessible(true); \nint fieldValue = (int) field.get(victim);\n//...\n```\n\n[к оглавлению](#java-core)\n\n## Каков порядок вызова конструкторов и блоков инициализации с учётом иерархии классов?\nСначала вызываются все статические блоки в очередности от первого статического блока корневого предка и выше по цепочке иерархии до статических блоков самого класса. \n\nЗатем вызываются нестатические блоки инициализации корневого предка, конструктор корневого предка и так далее вплоть до нестатических блоков и конструктора самого класса.\n\n>Parent static block(s) → Child static block(s) → Grandchild static block(s)\n>\n> → Parent non-static block(s) → Parent constructor →\n>\n> → Child non-static block(s) → Child constructor →\n>\n> → Grandchild non-static block(s) → Grandchild constructor\n\nПример 1:\n\n```java\npublic class MainClass {\n\n    public static void main(String args[]) {\n        System.out.println(TestClass.v);\n        new TestClass().a();\n    }\n\n}\n```\n\n```java\npublic class TestClass {\n\n    public static String v = \"Some val\";\n\n    {\n        System.out.println(\"!!! Non-static initializer\");\n    }\n\n    static {\n        System.out.println(\"!!! Static initializer\");\n    }\n\n    public void a() {\n        System.out.println(\"!!! a() called\");\n    }\n\n}\n```\n\nРезультат выполнения:\n\n```\n!!! Static initializer\nSome val\n!!! Non-static initializer\n!!! a() called\n```\n\nПример 2:\n\n```java\npublic class MainClass {\n\n    public static void main(String args[]) {        \n        new TestClass().a();\n    }\n\n}\n```\n\n```java\npublic class TestClass {\n\n    public static String v = \"Some val\";\n\n    {\n        System.out.println(\"!!! Non-static initializer\");\n    }\n\n    static {\n        System.out.println(\"!!! Static initializer\");\n    }\n\n    public void a() {\n        System.out.println(\"!!! a() called\");\n    }\n\n}\n```\n\nРезультат выполнения:\n\n```\n!!! Static initializer\n!!! Non-static initializer\n!!! a() called\n```\n\n[к оглавлению](#java-core)\n\n## Зачем нужны и какие бывают блоки инициализации?\nБлоки инициализации представляют собой код, заключенный в фигурные скобки и размещаемый внутри класса вне объявления методов или конструкторов. \n\n+ Существуют статические и нестатические блоки инициализации.\n+ Блок инициализации выполняется перед инициализацией класса загрузчиком классов или созданием объекта класса с помощью конструктора. \n+ Несколько блоков инициализации выполняются в порядке следования в коде класса. \n+ Блок инициализации способен генерировать исключения, если их объявления перечислены в `throws` всех конструкторов класса.\n+ Блок инициализации возможно создать и в анонимном классе.\n\n[к оглавлению](#java-core)\n\n## К каким конструкциям Java применим модификатор `static`?\n+ полям;\n+ методам;\n+ вложенным классам;\n+ блокам инициализации;\n+ членам секции `import`.\n\n[к оглавлению](#java-core)\n\n## Для чего в Java используются статические блоки инициализации?\nСтатические блоки инициализация используются для выполнения кода, который должен выполняться один раз при инициализации класса загрузчиком классов, в момент, предшествующий созданию объектов этого класса при помощи конструктора. Такой блок (в отличие от нестатических, принадлежащих конкретном объекту класса) принадлежит только самому классу (объекту метакласса `Class`).\n\n[к оглавлению](#java-core)\n\n## Что произойдёт, если в блоке инициализации возникнет исключительная ситуация?\nДля нестатических блоков инициализации, если выбрасывание исключения прописано явным образом требуется, чтобы объявления этих исключений были перечислены в `throws` всех конструкторов класса. Иначе будет ошибка компиляции. Для статического блока выбрасывание исключения в явном виде, приводит к ошибке компиляции.\n\nВ остальных случаях, взаимодействие с исключениями будет проходить так же, как и в любом другом месте. Класс не будет инициализирован, если ошибка происходит в статическом блоке и объект класса не будет создан, если ошибка возникает в нестатическом блоке.\n\n[к оглавлению](#java-core)\n\n## Какое исключение выбрасывается при возникновении ошибки в блоке инициализации класса?\nЕсли возникшее исключение - наследник `RuntimeException`:\n\n+ для статических блоков инициализации будет выброшено `java.lang.ExceptionInInitializerError`;\n+ для нестатических будет проброшено исключение-источник.\n\nЕсли возникшее исключение - наследник `Error`, то в обоих случаях будет выброшено `java.lang.Error`. Исключение: `java.lang.ThreadDeath` - смерть потока. В этом случае никакое исключение выброшено не будет.\n\n[к оглавлению](#java-core)\n\n## Может ли статический метод быть переопределён или перегружен?\nПерегружен - да. Всё работает точно так же, как и с обычными методами - 2 статических метода могут иметь одинаковое имя, если количество их параметров или типов различается. \n\nПереопределён - нет. Выбор вызываемого статического метода происходит при раннем связывании (на этапе компиляции, а не выполнения) и выполняться всегда будет родительский метод, хотя синтаксически переопределение статического метода - это вполне корректная языковая конструкция.\n\nВ целом, к статическим полям и методам рекомендуется обращаться через имя класса, а не объект.\n\n[к оглавлению](#java-core)\n\n## Могут ли нестатические методы перегрузить статические?\nДа. В итоге получится два разных метода. Статический будет принадлежать классу и будет доступен через его имя, а нестатический будет принадлежать конкретному объекту и доступен через вызов метода этого объекта.\n\n[к оглавлению](#java-core)\n\n## Можно ли сузить уровень доступа/тип возвращаемого значения при переопределении метода?\n\n+ При переопределении метода нельзя сузить модификатор доступа к методу (например с public в MainClass до private в Class extends MainClass). \n+ Изменить тип возвращаемого значения при переопределении метода нельзя, будет ошибка attempting to use incompatible return type. \n+ Можно сузить возвращаемое значение, если они совместимы. \n\nНапример:\n\n```java\npublic class Animal {\n\n    public Animal eat() {\n        System.out.println(\"animal eat\");\n        return null;\n    }\n    \n    public Long calc() {\n        return null;\n    }\n\n}\npublic class Dog extends Animal {\n\n    public Dog eat() {\n        return new Dog();\n    }\n/*attempting to use incompatible return type\n    public Integer calc() {\n        return null;\n    }\n*/\n}\n```\n\n## Возможно ли при переопределении метода изменить: модификатор доступа, возвращаемый тип, тип аргумента или их количество, имена аргументов или их порядок; убирать, добавлять, изменять порядок следования элементов секции `throws`?\nПри переопределении метода сужать модификатор доступа не разрешается, т.к. это приведёт к нарушению принципа подстановки Барбары Лисков. Расширение уровня доступа возможно.\n\nМожно изменять все, что не мешает компилятору понять какой метод родительского класса имеется в виду:\n\n+ Изменять тип возвращаемого значения при переопределении метода разрешено только в сторону сужения типа (вместо родительского класса - наследника).\n+ При изменении типа, количества, порядка следования аргументов вместо переопределения будет происходить _overloading_ (перегрузка) метода.\n+ Секцию `throws` метода можно не указывать, но стоит помнить, что она остаётся действительной, если уже определена у метода родительского класса. Так же, возможно добавлять новые исключения, являющиеся наследниками от уже объявленных или исключения `RuntimeException`. Порядок следования таких элементов при переопределении значения не имеет.\n\n[к оглавлению](#java-core)\n\n## Как получить доступ к переопределенным методам родительского класса?\nС помощью ключевого слова `super` мы можем обратиться к любому члену родительского класса - методу или полю, если они не определены с модификатором `private`.\n\n```java\nsuper.method();\n```\n\n[к оглавлению](#java-core)\n\n## Можно ли объявить метод абстрактным и статическим одновременно?\nНет. В таком случае компилятор выдаст ошибку: _\"Illegal combination of modifiers: ‘abstract’ and ‘static’\"_. Модификатор `abstract` говорит, что метод будет реализован в другом классе, а `static` наоборот указывает, что этот метод будет доступен по имени класса.\n\n[к оглавлению](#java-core)\n\n## В чем разница между членом экземпляра класса и статическим членом класса?\nМодификатор `static` говорит о том, что данный метод или поле принадлежат самому классу и доступ к ним возможен даже без создания экземпляра класса. Поля, помеченные `static` инициализируются при инициализации класса. На методы, объявленные как `static`, накладывается ряд ограничений:\n\n+ Они могут вызывать только другие статические методы.\n+ Они должны осуществлять доступ только к статическим переменным.\n+ Они не могут ссылаться на члены типа `this` или `super`.\n\nВ отличии от статических, поля экземпляра класса принадлежат конкретному объекту и могут иметь разные значения для каждого. Вызов метода экземпляра возможен только после предварительного создания объекта класса.\n\nПример:\n```java\npublic class MainClass {\n\n\tpublic static void main(String args[]) {\n\t\tSystem.out.println(TestClass.v);\n\t\tnew TestClass().a();\n\t\tSystem.out.println(TestClass.v);\n\t}\n\n}\n```\n\n```java\npublic class TestClass {\n\n\tpublic static String v = \"Initial val\";\n\n\t{\n\t\tSystem.out.println(\"!!! Non-static initializer\");\n\t\tv = \"Val from non-static\";\n\t}\n\n\tstatic {\n\t\tSystem.out.println(\"!!! Static initializer\");\n\t\tv = \"Some val\";\n\t}\n\n\tpublic void a() {\n\t\tSystem.out.println(\"!!! a() called\");\n\t}\n\n}\n```\n\nРезультат:\n\n```\n!!! Static initializer\nSome val\n!!! Non-static initializer\n!!! a() called\nVal from non-static\n\n```\n\n[к оглавлению](#java-core)\n\n## Где разрешена инициализация статических/нестатических полей?\n+ Статические поля можно инициализировать при объявлении, в статическом или нестатическом блоке инициализации. \n+ Нестатические поля можно инициализировать при объявлении, в нестатическом блоке инициализации или в конструкторе.\n\n[к оглавлению](#java-core)\n\n## Какие типы классов бывают в java?\n+ _Top level class_ (Обычный класс):\n    + _Abstract class_ (Абстрактный класс);\n    + _Final class_ (Финализированный класс).\n+ _Interfaces_ (Интерфейс).\n+ _Enum_ (Перечисление).\n+ _Nested class_ (Вложенный класс):\n    + _Static nested class_ (Статический вложенный класс);\n    + _Member inner class_ (Простой внутренний класс);\n    + _Local inner class_ (Локальный класс);\n    + _Anonymous inner class_ (Анонимный класс).\n\n[к оглавлению](#java-core)\n\n## Расскажите про вложенные классы. В каких случаях они применяются?\nКласс называется вложенным (_Nested class_), если он определен внутри другого класса. Вложенный класс должен создаваться только для того, чтобы обслуживать обрамляющий его класс. Если вложенный класс оказывается полезен в каком-либо ином контексте, он должен стать классом верхнего уровня. Вложенные классы имеют доступ ко всем (в том числе приватным) полям и методам внешнего класса, но не наоборот. Из-за этого разрешения использование вложенных классов приводит к некоторому нарушению инкапсуляции.\n\nСуществуют четыре категории вложенных классов: \n+ _Static nested class_ (Статический вложенный класс);\n+ _Member inner class_ (Простой внутренний класс);\n+ _Local inner class_ (Локальный класс);\n+ _Anonymous inner class_ (Анонимный класс).\n\nТакие категории классов, за исключением первого, также называют внутренними (_Inner class_). Внутренние классы ассоциируются не с внешним классом, а с экземпляром внешнего.\n\nКаждая из категорий имеет рекомендации по своему применению. Если вложенный класс должен быть виден за пределами одного метода или он слишком длинный для того, чтобы его можно было удобно разместить в границах одного метода и если каждому экземпляру такого класса необходима ссылка на включающий его экземпляр, то используется нестатический внутренний класс. В случае, если ссылка на обрамляющий класс не требуется - лучше сделать такой класс статическим. Если класс необходим только внутри какого-то метода и требуется создавать экземпляры этого класса только в этом методе, то используется локальный класс. А, если к тому же применение класса сводится к использованию лишь в одном месте и уже существует тип, характеризующий этот класс, то рекомендуется делать его анонимным классом.\n\n[к оглавлению](#java-core)\n\n## Что такое _«статический класс»_?\nЭто вложенный класс, объявленный с использованием ключевого слова `static`. К классам верхнего уровня модификатор `static` неприменим.\n\n[к оглавлению](#java-core)\n\n## Какие существуют особенности использования вложенных классов: статических и внутренних? В чем заключается разница между ними?\n\n+ Вложенные классы могут обращаться ко всем членам обрамляющего класса, в том числе и приватным. \n+ Для создания объекта статического вложенного класса объект внешнего класса не требуется.\n+ Из объекта статического вложенного класса нельзя обращаться к не статическим членам обрамляющего класса напрямую, а только через ссылку на экземпляр внешнего класса.\n+ Обычные вложенные классы не могут содержать статических методов, блоков инициализации и классов. Статические вложенные классы - могут.\n+ В объекте обычного вложенного класса хранится ссылка на объект внешнего класса. Внутри статической такой ссылки нет. Доступ к экземпляру обрамляющего класса осуществляется через указание `.this` после его имени. Например: `Outer.this`.\n\n[к оглавлению](#java-core)\n\n## Что такое _«локальный класс»_? Каковы его особенности?\n__Local inner class__ (Локальный класс) - это вложенный класс, который может быть декларирован в любом блоке, в котором разрешается декларировать переменные. Как и простые внутренние классы (_Member inner class_) локальные классы имеют имена и могут использоваться многократно. Как и анонимные классы, они имеют окружающий их экземпляр только тогда, когда применяются в нестатическом контексте.\n\nЛокальные классы имеют следующие особенности:\n\n+ Видны только в пределах блока, в котором объявлены;\n+ Не могут быть объявлены как `private`/`public`/`protected` или `static`;\n+ Не могут иметь внутри себя статических объявлений методов и классов, но могут иметь финальные статические поля, проинициализированные константой;\n+ Имеют доступ к полям и методам обрамляющего класса;\n+ Могут обращаться к локальным переменным и параметрам метода, если они объявлены с модификатором `final`.\n\n[к оглавлению](#java-core)\n\n## Что такое _«анонимные классы»_? Где они применяются?\nЭто вложенный локальный класс без имени, который разрешено декларировать в любом месте обрамляющего класса, разрешающем размещение выражений. Создание экземпляра анонимного класса происходит одновременно с его объявлением. В зависимости от местоположения анонимный класс ведет себя как статический либо как нестатический вложенный класс - в нестатическом контексте появляется окружающий его экземпляр.\n\nАнонимные классы имеют несколько ограничений:\n\n+ Их использование разрешено только в одном месте программы - месте его создания;\n+ Применение возможно только в том случае, если после порождения экземпляра нет необходимости на него ссылаться;\n+ Реализует лишь методы своего интерфейса или суперкласса, т.е. не может объявлять каких-либо новых методов, так как для доступа к ним нет поименованного типа.\n\nАнонимные классы обычно применяются для: \n\n+ создания объекта функции (_function object_), например, реализация интерфейса `Comparator`;\n+ создания объекта процесса (_process object_), такого как экземпляры классов `Thread`, `Runnable` и подобных;\n+ в статическом методе генерации;\n+ инициализации открытого статического поля `final`, которое соответствует сложному перечислению типов, когда для каждого экземпляра в перечислении требуется отдельный подкласс.\n\n[к оглавлению](#java-core)\n\n## Каким образом из вложенного класса получить доступ к полю внешнего класса?\nСтатический вложенный класс имеет прямой доступ только к статическим полям обрамляющего класса. \n\nПростой внутренний класс, может обратиться к любому полю внешнего класса напрямую. В случае, если у вложенного класса уже существует поле с таким же литералом, то обращаться к такому полю следует через ссылку на его экземпляр. Например: `Outer.this.field`.\n\n[к оглавлению](#java-core)\n\n## Для чего используется оператор `assert`?\n__Assert__ (Утверждение) — это специальная конструкция, позволяющая проверять предположения о значениях произвольных данных в произвольном месте программы. Утверждение может автоматически сигнализировать об обнаружении некорректных данных, что обычно приводит к аварийному завершению программы с указанием места обнаружения некорректных данных.\n\nУтверждения существенно упрощают локализацию ошибок в коде. Даже проверка результатов выполнения очевидного кода может оказаться полезной при последующем рефакторинге, после которого код может стать не настолько очевидным и в него может закрасться ошибка. \n\nОбычно утверждения оставляют включенными во время разработки и тестирования программ, но отключают в релиз-версиях программ.\n\nТ.к. утверждения могут быть удалены на этапе компиляции либо во время исполнения программы, они не должны менять поведение программы. Если в результате удаления утверждения поведение программы может измениться, то это явный признак неправильного использования _assert_. Таким образом, внутри _assert_ нельзя вызывать методы, изменяющие состояние программы, либо внешнего окружения программы. \n\nВ Java проверка утверждений реализована с помощью оператора `assert`, который имеет форму:\n\n`assert [Выражение типа boolean];` или `assert [Выражение типа boolean] : [Выражение любого типа, кроме void];`\n\nВо время выполнения программы в том случае, если поверка утверждений включена, вычисляется значение булевского выражения, и если его результат `false`, то генерируется исключение `java.lang.AssertionError`. В случае использования второй формы оператора `assert` выражение после двоеточия задаёт детальное сообщение о произошедшей ошибке (вычисленное выражение будет преобразовано в строку и передано конструктору `AssertionError`).\n\n[к оглавлению](#java-core)\n\n## Что такое _Heap_ и _Stack_ память в Java? Какая разница между ними?\n__Heap (куча)__ используется Java Runtime для выделения памяти под объекты и классы. Создание нового объекта также происходит в куче. Это же является областью работы сборщика мусора. Любой объект, созданный в куче, имеет глобальный доступ и на него могут ссылаться из любой части приложения.\n\n__Stack (стек)__ это область хранения данных также находящееся в общей оперативной памяти (_RAM_). Всякий раз, когда вызывается метод, в памяти стека создается новый блок, который содержит примитивы и ссылки на другие объекты в методе. Как только метод заканчивает работу, блок также перестает использоваться, тем самым предоставляя доступ для следующего метода.\nРазмер стековой памяти намного меньше объема памяти в куче. Стек в Java работает по схеме _LIFO_ (Последний-зашел-Первый-вышел)\n\nРазличия между _Heap_ и _Stack_ памятью:\n+ Куча используется всеми частями приложения, в то время как стек используется только одним потоком исполнения программы.\n+ Всякий раз, когда создается объект, он всегда хранится в куче, а в памяти стека содержится лишь ссылка на него. Память стека содержит только локальные переменные примитивных типов и ссылки на объекты в куче.\n+ Объекты в куче доступны с любой точки программы, в то время как стековая память не может быть доступна для других потоков.\n+ Стековая память существует лишь какое-то время работы программы, а память в куче живет с самого начала до конца работы программы.\n+ Если память стека полностью занята, то Java Runtime бросает исключение `java.lang.StackOverflowError`. Если заполнена память кучи, то бросается исключение `java.lang.OutOfMemoryError: Java Heap Space`.\n+ Размер памяти стека намного меньше памяти в куче. \n+ Из-за простоты распределения памяти, стековая память работает намного быстрее кучи.\n\nДля определения начального и максимального размера памяти в куче используются `-Xms` и `-Xmx` опции JVM. Для стека определить размер памяти можно с помощью опции `-Xss`.\n\n[к оглавлению](#java-core)\n\n## Верно ли утверждение, что примитивные типы данных всегда хранятся в стеке, а экземпляры ссылочных типов данных в куче?\nНе совсем. Примитивное поле экземпляра класса хранится не в стеке, а в куче. Любой объект (всё, что явно или неявно создаётся при помощи оператора `new`) хранится в куче.\n\n[к оглавлению](#java-core)\n\n## Каким образом передаются переменные в методы, по значению или по ссылке?\nВ Java параметры всегда передаются только по значению, что определяется как «скопировать значение и передать копию». С примитивами это будет копия содержимого. Со ссылками - тоже копия содержимого, т.е. копия ссылки. При этом внутренние члены ссылочных типов через такую копию изменить возможно, а вот саму ссылку, указывающую на экземпляр - нет.\n\n[к оглавлению](#java-core)\n\n## Для чего нужен сборщик мусора?\nСборщик мусора (Garbage Collector) должен делать всего две вещи:\n\n+ Находить мусор - неиспользуемые объекты. (Объект считается неиспользуемым, если ни одна из сущностей в коде, выполняемом в данный момент, не содержит ссылок на него, либо цепочка ссылок, которая могла бы связать объект с некоторой сущностью приложения, обрывается);\n+ Освобождать память от мусора.\n\nСуществует два подхода к обнаружению мусора:\n\n+ _Reference counting_;\n+ _Tracing_\n\n__Reference counting__ (подсчёт ссылок). Суть этого подхода состоит в том, что каждый объект имеет счетчик. Счетчик хранит информацию о том, сколько ссылок указывает на объект. Когда ссылка уничтожается, счетчик уменьшается. Если значение счетчика равно нулю, - объект можно считать мусором. Главным минусом такого подхода является сложность обеспечения точности счетчика. Также при таком подходе сложно выявлять циклические зависимости (когда два объекта указывают друг на друга, но ни один живой объект на них не ссылается), что приводит к утечкам памяти.\n\nГлавная идея подхода __Tracing__ (трассировка) состоит в утверждении, что живыми могут считаться только те объекты, до которых мы можем добраться из корневых точек (_GC Root_) и те объекты, которые доступны с живого объекта. Всё остальное - мусор.\n\nСуществует 4 типа корневых точки:\n\n+ Локальные переменные и параметры методов;\n+ Потоки;\n+ Статические переменные;\n+ Ссылки из JNI.\n\nСамое простое java приложение будет иметь корневые точки:\n\n+ Локальные переменные внутри `main()` метода и параметры `main()` метода;\n+ Поток который выполняет `main()`;\n+ Статические переменные класса, внутри которого находится `main()` метод.\n\nТаким образом, если мы представим все объекты и ссылки между ними как дерево, то нам нужно будет пройти с корневых узлов (точек) по всем рёбрам. При этом узлы, до которых мы сможем добраться - не мусор, все остальные - мусор. При таком подходе циклические зависимости легко выявляются. HotSpot VM использует именно такой подход.\n\n---\nДля очистки памяти от мусора существуют два основных метода:\n\n+ _Copying collectors_\n+ _Mark-and-sweep_\n\nПри __copying collectors__ подходе память делится на две части «from-space» и «to-space», при этом сам принцип работы такой:\n\n+ Объекты создаются в «from-space»;\n+ Когда «from-space» заполняется, приложение приостанавливается;\n+ Запускается сборщик мусора. Находятся живые объекты в «from-space» и копируются в «to-space»;\n+ Когда все объекты скопированы «from-space» полностью очищается;\n+ «to-space» и «from-space» меняются местами.\n\nГлавный плюс такого подхода в том, что объекты плотно забивают память. Минусы подхода:\n\n1. Приложение должно быть остановлено на время, необходимое для полного прохождения цикла сборки мусора;\n2. В худшем случае (когда все объекты живые) «form-space» и «to-space» будут обязаны быть одинакового размера.\n\nАлгоритм работы __mark-and-sweep__ можно описать так:\n\n+ Объекты создаются в памяти;\n+ В момент, когда нужно запустить сборщик мусора приложение приостанавливается;\n+ Сборщик проходится по дереву объектов, помечая живые объекты;\n+ Сборщик проходится по всей памяти, находя все не отмеченные куски памяти и сохраняя их в «free list»;\n+ Когда новые объекты начинают создаваться они создаются в памяти доступной во «free list».\n\nМинусы этого способа:\n\n1. Приложение не работает пока происходит сборка мусора;\n2. Время остановки напрямую зависит от размеров памяти и количества объектов;\n3. Если не использовать «compacting» память будет использоваться не эффективно.\n\nСборщики мусора HotSpot VM используют комбинированный подход __Generational Garbage Collection__, который позволяет использовать разные алгоритмы для разных этапов сборки мусора. Этот подход опирается на том, что:\n\n+ большинство создаваемых объектов быстро становятся мусором;\n+ существует мало связей между объектами, которые были созданы в прошлом и только что созданными объектами.\n\n[к оглавлению](#java-core)\n\n## Как работает сборщик мусора?\nМеханизм сборки мусора - это процесс освобождения места в куче, для возможности добавления новых объектов.\n\nОбъекты создаются посредством оператора `new`, тем самым присваивая объекту ссылку. Для окончания работы с объектом достаточно просто перестать на него ссылаться, например, присвоив переменной ссылку на другой объект или значение `null`; прекратить выполнение метода, чтобы его локальные переменные завершили свое существование естественным образом. Объекты, ссылки на которые отсутствуют, принято называть мусором (_garbage_), который будет удален.\n\nВиртуальная машина Java, применяя механизм сборки мусора, гарантирует, что любой объект, обладающий ссылками, остается в памяти — все объекты, которые недостижимы из исполняемого кода, ввиду отсутствия ссылок на них, удаляются с высвобождением отведенной для них памяти. Точнее говоря, объект не попадает в сферу действия процесса сборки мусора, если он достижим посредством цепочки ссылок, начиная с корневой (_GC Root_) ссылки, т.е. ссылки, непосредственно существующей в выполняемом коде.\n\nПамять освобождается сборщиком мусора по его собственному «усмотрению». Программа может успешно завершить работу, не исчерпав ресурсов свободной памяти или даже не приблизившись к этой черте и поэтому ей так и не потребуются «услуги» сборщика мусора.\n\nМусор собирается системой автоматически, без вмешательства пользователя или программиста, но это не значит, что этот процесс не требует внимания вовсе. Необходимость создания и удаления большого количества объектов существенным образом сказывается на производительности приложений и, если быстродействие программы является важным фактором, следует тщательно обдумывать решения, связанные с созданием объектов, — это, в свою очередь, уменьшит и объем мусора, подлежащего утилизации.\n\n[к оглавлению](#java-core)\n\n## Какие разновидности сборщиков мусора реализованы в виртуальной машине HotSpot?\nJava HotSpot VM предоставляет разработчикам на выбор четыре различных сборщика мусора:\n\n+ __Serial (последовательный)__ — самый простой вариант для приложений с небольшим объемом данных и не требовательных к задержкам. На данный момент используется сравнительно редко, но на слабых компьютерах может быть выбран виртуальной машиной в качестве сборщика по умолчанию. Использование Serial GC включается опцией `-XX:+UseSerialGC`.\n+ __Parallel (параллельный)__ — наследует подходы к сборке от последовательного сборщика, но добавляет параллелизм в некоторые операции, а также возможности по автоматической подстройке под требуемые параметры производительности. Параллельный сборщик включается опцией `-XX:+UseParallelGC`.\n+ __Concurrent Mark Sweep (CMS)__ — нацелен на снижение максимальных задержек путем выполнения части работ по сборке мусора параллельно с основными потоками приложения. Подходит для работы с относительно большими объемами данных в памяти. Использование CMS GC включается опцией `-XX:+UseConcMarkSweepGC`.\n+ __Garbage-First (G1)__ — создан для замены CMS, особенно в серверных приложениях, работающих на многопроцессорных серверах и оперирующих большими объемами данных. _G1_ включается опцией Java `-XX:+UseG1GC`.\n\n[к оглавлению](#java-core)\n\n## Опишите алгоритм работы какого-нибудь сборщика мусора, реализованного в виртуальной машине HotSpot.\n__Serial Garbage Collector (Последовательный сборщик мусора)__ был одним из первых сборщиков мусора в HotSpot VM. Во время работы этого сборщика приложения приостанавливается и продолжает работать только после прекращения сборки мусора. \n\nПамять приложения делится на три пространства:\n\n+ _Young generation_. Объекты создаются именно в этом участке памяти.\n+ _Old generation_. В этот участок памяти перемещаются объекты, которые переживают «minor garbage collection».\n+ _Permanent generation_. Тут хранятся метаданные об объектах, _Class data sharing (CDS)_, _пул строк (String pool)_. Permanent область делится на две: только для чтения и для чтения-записи. Очевидно, что в этом случае область только для чтения не чистится сборщиком мусора никогда.\n\nОбласть памяти Young generation состоит из трёх областей: _Eden_ и двух меньших по размеру _Survivor spaces_ - _To space_ и _From space_. Большинство объектов создаются в области Eden, за исключением очень больших объектов, которые не могут быть размещены в ней и поэтому сразу размещаются в Old generation. В Survivor spaces перемещаются объекты, которые пережили по крайней мере одну сборку мусора, но ещё не достигли порога «старости» (_tenuring threshold_), чтобы быть перемещенными в Old generation.\n\nКогда Young generation заполняется, то в этой области запускается процесс лёгкой сборки (_minor collection_), в отличие от процесса сборки, проводимого над всей кучей (_full collection_). Он происходит следующим образом: в начале работы одно из Survivor spaces - To space, является пустым, а другое - From space, содержит объекты, пережившие предыдущие сборки. Сборщик мусора ищет живые объекты в Eden и копирует их в To space, а затем копирует туда же и живые «молодые» (то есть не пережившие еще заданное число сборок мусора) объекты из From space. Старые объекты из From space перемещаются в Old generation. После лёгкой сборки From space и To space меняются ролями, область Eden становится пустой, а число объектов в Old generation увеличивается.\n\nЕсли в процессе копирования живых объектов To space переполняется, то оставшиеся живые объекты из Eden и From space, которым не хватило места в To space, будут перемещены в Old generation, независимо от того, сколько сборок мусора они пережили.\n\nПоскольку при использовании этого алгоритма сборщик мусора просто копирует все живые объекты из одной области памяти в другую, то такой сборщик мусора называется _copying_ (копирующий). Очевидно, что для работы копирующего сборщика мусора у приложения всегда должна быть свободная область памяти, в которую будут копироваться живые объекты, и такой алгоритм может применяться для областей памяти сравнительно небольших по отношению к общему размеру памяти приложения. Young generation как раз удовлетворяет этому условию (по умолчанию на машинах клиентского типа эта область занимает около 10% кучи (значение может варьироваться в зависимости от платформы)).\n\nОднако, для сборки мусора в Old generation, занимающем большую часть всей памяти, используется другой алгоритм.\n\nВ Old generation сборка мусора происходит с использованием алгоритма _mark-sweep-compact_, который состоит из трёх фаз. В фазе _Mark_ (пометка) сборщик мусора помечает все живые объекты, затем, в фазе _Sweep_ (очистка) все не помеченные объекты удаляются, а в фазе _Сompact_ (уплотнение) все живые объекты перемещаются в начало Old generation, в результате чего свободная память после очистки представляет собой непрерывную область. Фаза уплотнения выполняется для того, чтобы избежать фрагментации и упростить процесс выделения памяти в Old generation.\n\nКогда свободная память представляет собой непрерывную область, то для выделения памяти под создаваемый объект можно использовать очень быстрый (около десятка машинных инструкций) алгоритм _bump-the-pointer_: адрес начала свободной памяти хранится в специальном указателе, и когда поступает запрос на создание нового объекта, код проверяет, что для нового объекта достаточно места, и, если это так, то просто увеличивает указатель на размер объекта.\n\nПоследовательный сборщик мусора отлично подходит для большинства приложений, использующих до 200 мегабайт кучи, работающих на машинах клиентского типа и не предъявляющих жёстких требований к величине пауз, затрачиваемых на сборку мусора. В то же время модель «stop-the-world» может вызвать длительные паузы в работе приложения при использовании больших объёмов памяти. Кроме того, последовательный алгоритм работы не позволяет оптимально использовать вычислительные ресурсы компьютера, и последовательный сборщик мусора может стать узким местом при работе приложения на многопроцессорных машинах.\n\n[к оглавлению](#java-core)\n\n## Что такое «пул строк»?\n__Пул строк__ – это набор строк, хранящийся в _Heap_.\n\n+ Пул строк возможен благодаря неизменяемости строк в Java и реализации идеи интернирования строк;\n+ Пул строк помогает экономить память, но по этой же причине создание строки занимает больше времени;\n+ Когда для создания строки используются `\"`, то сначала ищется строка в пуле с таким же значением, если находится, то просто возвращается ссылка, иначе создается новая строка в пуле, а затем возвращается ссылка на неё;\n+ При использовании оператора `new` создаётся новый объект `String`. Затем при помощи метода `intern()` эту строку можно поместить в пул или же получить из пула ссылку на другой объект `String` с таким же значением;\n+ Пул строк является примером паттерна _«Приспособленец» (Flyweight)_.\n\n[к оглавлению](#java-core)\n\n## Что такое `finalize()`? Зачем он нужен?\nЧерез вызов метода `finalize()` (который наследуется от Java.lang.Object) JVM реализуется функциональность аналогичная функциональности деструкторов в С++, используемых для очистки памяти перед возвращением управления операционной системе. Данный метод вызывается при уничтожении объекта сборщиком мусора (_garbage collector_) и переопределяя `finalize()` можно запрограммировать действия необходимые для корректного удаления экземпляра класса - например, закрытие сетевых соединений, соединений с базой данных, снятие блокировок на файлы и т.д. \n\nПосле выполнения этого метода объект должен быть повторно собран сборщиком мусора (и это считается серьезной проблемой метода `finalize()` т.к. он мешает сборщику мусора освобождать память). Вызов этого метода не гарантируется, т.к. приложение может быть завершено до того, как будет запущена сборка мусора.\n\nОбъект не обязательно будет доступен для сборки сразу же - метод `finalize()` может сохранить куда-нибудь ссылку на объект. Подобная ситуация называется «возрождением» объекта и считается антипаттерном. Главная проблема такого трюка - в том, что «возродить» объект можно только 1 раз.\n\nПример:\n```java\npublic class MainClass {\n\n\tpublic static void main(String args[]) {\n\t\tTestClass a = new TestClass();\n\t\ta.a();\n\t\ta = null;\n\t\ta = new TestClass();\n\t\ta.a();\n\t\tSystem.out.println(\"!!! done\");\n\t}\n}\n```\n```java\n\npublic class TestClass {\n\n\tpublic void a() {\n\t\tSystem.out.println(\"!!! a() called\");\n\t}\n\n\t@Override\n\tprotected void finalize() throws Throwable {\n\t\tSystem.out.println(\"!!! finalize() called\");\n\t\tsuper.finalize();\n\t}\n}\n```\nТак как в данном случае сборщик мусора может и не быть вызван (в силу простоты приложения), то результат выполнения программы с большой вероятностью будет следующий:\n```\n!!! a() called\n!!! a() called\n!!! done\n```\nТеперь несколько усложним программу, добавив принудительный вызов Garbage Collector:\n```java\npublic class MainClass {\n\n\tpublic static void main(String args[]) {\n\t\tTestClass a = new TestClass();\n\t\ta.a();\n\t\ta = null;\n\t\tSystem.gc(); // Принудительно зовём сборщик мусора\n\t\ta = new TestClass();\n\t\ta.a();\n\t\tSystem.out.println(\"!!! done\");\n\t}\n\n}\n```\nКак и было сказано ранее, Garbage Collector может в разное время отработать, поэтому результат выполнения может разниться от запуска к запуску:\nВариант а:\n```\n!!! a() called\n!!! a() called\n!!! done\n!!! finalize() called\n```\nВариант б:\n```\n!!! a() called\n!!! a() called\n!!! finalize() called\n!!! done\n```\n\n\n[к оглавлению](#java-core)\n\n## Что произойдет со сборщиком мусора, если выполнение метода `finalize()` требует ощутимо много времени, или в процессе выполнения будет выброшено исключение?\nНепосредственно вызов `finalize()` происходит в отдельном потоке _Finalizer_ (`java.lang.ref.Finalizer.FinalizerThread`), который создаётся при запуске виртуальной машины (в статической секции при загрузке класса `Finalizer`). Методы `finalize()` вызываются последовательно в том порядке, в котором были добавлены в список сборщиком мусора. Соответственно, если какой-то `finalize()` зависнет, он подвесит поток _Finalizer_, но не сборщик мусора. Это в частности означает, что объекты, не имеющие метода `finalize()`, будут исправно удаляться, а вот имеющие будут добавляться в очередь, пока поток _Finalizer_ не освободится, не завершится приложение или не кончится память. \n\nТо же самое применимо и выброшенным в процессе `finalize()` исключениям: метод `runFinalizer()` у потока _Finalizer_ игнорирует все исключения выброшенные в момент выполнения `finalize()`. Таким образом возникновение исключительной ситуации никак не скажется на работоспособности сборщика мусора.\n\n[к оглавлению](#java-core)\n\n## Чем отличаются `final`, `finally` и `finalize()`?\nМодификатор `final`:\n\n+ Класс не может иметь наследников;\n+ Метод не может быть переопределен в классах наследниках;\n+ Поле не может изменить свое значение после инициализации;\n+ Локальные переменные не могут быть изменены после присвоения им значения;\n+ Параметры методов не могут изменять своё значение внутри метода.\n\nОператор `finally` гарантирует, что определенный в нём участок кода будет выполнен независимо от того, какие исключения были возбуждены и перехвачены в блоке `try-catch`.\n\nМетод `finalize()` вызывается перед тем как сборщик мусора будет проводить удаление объекта.\n\nПример:\n```java\n\npublic class MainClass {\n\n\tpublic static void main(String args[]) {\n\t\tTestClass a = new TestClass();\n\t\tSystem.out.println(\"result of a.a() is \" + a.a());\n\t\ta = null;\n\t\tSystem.gc(); // Принудительно зовём сборщик мусора\n\t\ta = new TestClass();\n\t\tSystem.out.println(\"result of a.a() is \" + a.a());\n\t\tSystem.out.println(\"!!! done\");\n\t}\n\n}\n```\n\n```java\npublic class TestClass {\n\n\tpublic int a() {\n\t\ttry {\n\t\t\tSystem.out.println(\"!!! a() called\");\n\t\t\tthrow new Exception(\"\");\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"!!! Exception in a()\");\n\t\t\treturn 2;\n\t\t} finally {\n\t\t\tSystem.out.println(\"!!! finally in a() \");\n\t\t}\n\t}\n\n\t@Override\n\tprotected void finalize() throws Throwable {\n\t\tSystem.out.println(\"!!! finalize() called\");\n\t\tsuper.finalize();\n\t}\n}\n```\n\nРезультат выполнения:\n\n```\n!!! a() called\n!!! Exception in a()\n!!! finally in a() \nresult of a.a() is 2\n!!! a() called\n!!! Exception in a()\n!!! finally in a() \n!!! finalize() called\nresult of a.a() is 2\n!!! done\n```\n\n[к оглавлению](#java-core)\n\n## Расскажите про приведение типов. Что такое понижение и повышение типа?\nJava является строго типизированным языком программирования, а это означает, то что каждое выражение и каждая переменная имеет строго определенный тип уже на момент компиляции. Однако определен механизм _приведения типов (casting)_ - способ преобразования значения переменной одного типа в значение другого типа. \n\nВ Java существуют несколько разновидностей приведения:\n\n+ __Тождественное (identity)__. Преобразование выражения любого типа к точно такому же типу всегда допустимо и происходит автоматически.\n+ __Расширение (повышение, upcasting) примитивного типа (widening primitive)__. Означает, что осуществляется переход от менее емкого типа к более ёмкому. Например, от типа `byte` (длина 1 байт) к типу `int` (длина 4 байта). Такие преобразование безопасны в том смысле, что новый тип всегда гарантировано вмещает в себя все данные, которые хранились в старом типе и таким образом не происходит потери данных. Этот тип приведения всегда допустим и происходит автоматически.\n+ __Сужение (понижение, downcasting) примитивного типа (narrowing primitive)__. Означает, что переход осуществляется от более емкого типа к менее емкому. При таком преобразовании есть риск потерять данные. Например, если число типа `int` было больше `127`, то при приведении его к `byte` значения битов старше восьмого будут потеряны. В Java такое преобразование должно совершаться явным образом, при этом все старшие биты, не умещающиеся в новом типе, просто отбрасываются - никакого округления или других действий для получения более корректного результата не производится.\n+ __Расширение объектного типа (widening reference)__. Означает неявное восходящее приведение типов или переход от более конкретного типа к менее конкретному, т.е. переход от потомка к предку. Разрешено всегда и происходит автоматически.\n+ __Сужение объектного типа (narrowing reference)__. Означает нисходящее приведение, то есть приведение от предка к потомку (подтипу). Возможно только если исходная переменная является подтипом приводимого типа. При несоответствии типов в момент выполнения выбрасывается исключение `ClassCastException`. Требует явного указания типа.\n+ __Преобразование к строке (to String)__. Любой тип может быть приведен к строке, т.е. к экземпляру класса `String`.\n+ __Запрещенные преобразования (forbidden)__. Не все приведения между произвольными типами допустимы. Например, к запрещенным преобразованиям относятся приведения от любого ссылочного типа к примитивному и наоборот (кроме преобразования к строке). Кроме того, невозможно привести друг к другу классы, находящиеся на разных ветвях дерева наследования и т.п.\n\nПри приведении ссылочных типов с самим объектом ничего не происходит, - меняется лишь тип ссылки, через которую происходит обращение к объекту.\n\nДля проверки возможности приведения нужно воспользоваться оператором `instanceof`:\n\n```java\nParent parent = new Child();\nif (parent instanceof Child) {\n    Child child = (Child) parent;\n}\n```\n\n[к оглавлению](#java-core)\n\n## Когда в приложении может быть выброшено исключение `ClassCastException`?\n`ClassCastException` (потомок `RuntimeException`) - исключение, которое будет выброшено при ошибке приведения типа.\n\n[к оглавлению](#java-core)\n\n## Что такое литералы?\n__Литералы__ — это явно заданные значения в коде программы — константы определенного типа, которые находятся в коде в момент запуска.\n```java\nclass Test {\n   int a = 0b1101010110;\n   public static void main(String[] args) {\n       System.out.println(\"Hello world!\");       \n   }\n}\n```\nВ этом классе “Hello world!” — литерал.\n\nПеременная `a` - тоже литерал.\n\nЛитералы бывают разных типов, которые определяются их назначением и способом написания. \n\n[к оглавлению](#java-core)\n\n## Что такое _autoboxing («автоупаковка»)_ в Java и каковы правила упаковки примитивных типов в классы-обертки?\n__Автоупаковка__ - это механизм неявной инициализации объектов классов-оберток (`Byte`, `Short`, `Integer`, `Long`, `Float`, `Double`, `Character`, `Boolean`) значениями соответствующих им исходных примитивных типов (`byte`, `short`, `int`...), без явного использования конструктора класса. \n\n+ Автоупаковка происходит при прямом присваивании примитива классу-обертке (с помощью оператора `=`), либо при передаче примитива в параметры метода (типа класса-обертки). \n\n+ Автоупаковке в классы-обертки могут быть подвергнуты как переменные примитивных типов, так и константы времени компиляции (литералы и `final`-примитивы). При этом литералы должны быть синтаксически корректными для инициализации переменной исходного примитивного типа.\n\n+ Автоупаковка переменных примитивных типов требует точного соответствия типа исходного примитива типу класса-обертки. Например, попытка упаковать переменную типа `byte` в `Short`, без предварительного явного приведения `byte` в `short` вызовет ошибку компиляции.\n\n+ Автоупаковка констант примитивных типов допускает более широкие границы соответствия. В этом случае компилятор способен предварительно осуществлять неявное расширение/сужение типа примитивов:\n    1) неявное расширение/сужение исходного типа примитива до типа примитива, соответствующего классу-обертке (для преобразования `int` в `Byte`, сначала компилятор самостоятельно неявно сужает `int` к `byte`)\n    2) автоупаковку примитива в соответствующий класс-обертку. Однако, в этом случае существуют два дополнительных ограничения:\n        a) присвоение примитива обертке может производится только оператором `=` (нельзя передать такой примитив в параметры метода без явного приведения типов)\n        b) тип левого операнда не должен быть старше чем `Character`, тип правого не должен старше, чем `int`: допустимо расширение/сужение `byte` в/из `short`, `byte` в/из `char`, `short` в/из `char` и только сужение `byte` из `int`, `short` из `int`, `char` из `int`. Все остальные варианты требуют явного приведения типов).\n\nДополнительной особенностью целочисленных классов-оберток, созданных автоупаковкой констант в диапазоне `-128 ... +127` является то, что они кэшируются JVM. Поэтому такие обертки с одинаковыми значениями будут являться ссылками на один объект.\n\n[к оглавлению](#java-core)\n\n## Какие есть особенности класса `String`?\n+ Это неизменяемый (immutable) и финализированный тип данных;\n+ Строки-литералы, интернированные объекты класса `String` JVM хранит в пуле строк;\n+ Объект класса `String` можно получить, используя двойные кавычки;\n+ Можно использовать оператор `+` для конкатенации строк;\n+ Начиная с Java 7 строки можно использовать в конструкции `switch`.\n\n[к оглавлению](#java-core)\n\n## Почему `String` неизменяемый и финализированный класс?\nЕсть несколько преимуществ в неизменности строк:\n\n+ Пул строк возможен только потому, что строка неизменяемая, таким образом виртуальная машина сохраняет больше свободного места в _Heap_, поскольку разные строковые переменные указывают на одну и ту же переменную в пуле. Если бы строка была изменяемой, то интернирование строк не было бы возможным, потому что изменение значения одной переменной отразилось бы также и на остальных переменных, ссылающихся на эту строку.\n+ Если строка будет изменяемой, тогда это станет серьезной угрозой безопасности приложения. Например, имя пользователя базы данных и пароль передаются строкой для получения соединения с базой данных и в программировании сокетов реквизиты хоста и порта передаются строкой. Так как строка неизменяемая, её значение не может быть изменено, в противном случае злоумышленник может изменить значение ссылки и вызвать проблемы в безопасности приложения.\n+ Неизменяемость позволяет избежать синхронизации: строки безопасны для многопоточности и один экземпляр строки может быть совместно использован различными потоками.\n+ Строки используются _classloader_ и неизменность обеспечивает правильность загрузки класса.\n+ Поскольку строка неизменяемая, её `hashCode()` кэшируется в момент создания и нет необходимости рассчитывать его снова. Это делает строку отличным кандидатом для ключа в `HashMap` т.к. его обработка происходит быстрее.\n\n[к оглавлению](#java-core)\n\n## Почему `char[]` предпочтительнее `String` для хранения пароля?\nС момента создания строка остаётся в пуле, до тех пор, пока не будет удалена сборщиком мусора. Поэтому, даже после окончания использования пароля, он некоторое время продолжает оставаться доступным в памяти и способа избежать этого не существует. Это представляет определённый риск для безопасности, поскольку кто-либо, имеющий доступ к памяти сможет найти пароль в виде текста.\nВ случае использования массива символов для хранения пароля имеется возможность очистить его сразу по окончанию работы с паролем, позволяя избежать риска безопасности, свойственного строке.\n\n[к оглавлению](#java-core)\n\n## Почему строка является популярным ключом в `HashMap` в Java?\nПоскольку строки неизменяемы, их хэш код вычисляется и кэшируется в момент создания, не требуя повторного пересчета при дальнейшем использовании. Поэтому в качестве ключа `HashMap` они будут обрабатываться быстрее.\n\n[к оглавлению](#java-core)\n\n## Что делает метод `intern()` в классе `String`?.\nМетод `intern()` используется для сохранения строки в пуле строк или получения ссылки, если такая строка уже находится в пуле.\n\n[к оглавлению](#java-core)\n\n## Можно ли использовать строки в конструкции `switch`?\nДа, начиная с Java 7 в операторе `switch` можно использовать строки, ранние версии Java не поддерживают этого. При этом:\n\n+ участвующие строки чувствительны к регистру;\n+ используется метод `equals()` для сравнения полученного значения со значениями `case`, поэтому во избежание `NullPointerException` стоит предусмотреть проверку на `null`.\n+ согласно документации, Java 7 для строк в `switch`, компилятор Java формирует более эффективный байткод для строк в конструкции `switch`, чем для сцепленных условий `if`-`else`.\n\n[к оглавлению](#java-core)\n\n## Какая основная разница между `String`, `StringBuffer`, `StringBuilder`?\nКласс `String` является неизменяемым (_immutable_) - модифицировать объект такого класса нельзя, можно лишь заменить его созданием нового экземпляра.\n\nКласс `StringBuffer` изменяемый - использовать `StringBuffer` следует тогда, когда необходимо часто модифицировать содержимое. \n\nКласс `StringBuilder` был добавлен в Java 5 и он во всем идентичен классу `StringBuffer` за исключением того, что он не синхронизирован и поэтому его методы выполняются значительно быстрей.\n\n[к оглавлению](#java-core)\n\n\n## Что такое класс `Object`? Какие в нем есть методы?\n`Object` это базовый класс для всех остальных объектов в Java. Любой класс наследуется от `Object` и, соответственно, наследуют его методы:\n\n`public boolean equals(Object obj)` – служит для сравнения объектов по значению;\n\n`int hashCode()` – возвращает hash код для объекта;\n\n`String toString()` – возвращает строковое представление объекта;\n\n`Class getClass()` – возвращает класс объекта во время выполнения;\n\n`protected Object clone()` – создает и возвращает копию объекта;\n\n`void notify()` – возобновляет поток, ожидающий монитор;\n\n`void notifyAll()` – возобновляет все потоки, ожидающие монитор;\n\n`void wait()` – остановка вызвавшего метод потока до момента пока другой поток не вызовет метод `notify()` или `notifyAll()` для этого объекта;\n\n`void wait(long timeout)` – остановка вызвавшего метод потока на определённое время или пока другой поток не вызовет метод `notify()` или `notifyAll()` для этого объекта;\n\n`void wait(long timeout, int nanos)` – остановка вызвавшего метод потока на определённое время или пока другой поток не вызовет метод `notify()` или `notifyAll()` для этого объекта;\n\n`protected void finalize()` – может вызываться сборщиком мусора в момент удаления объекта при сборке мусора.\n\n[к оглавлению](#java-core)\n\n## Дайте определение понятию «конструктор».\n__Конструктор__ — это специальный метод, у которого отсутствует возвращаемый тип и который имеет то же имя, что и класс, в котором он используется. Конструктор вызывается при создании нового объекта класса и определяет действия необходимые для его инициализации.\n\n[к оглавлению](#java-core)\n\n## Что такое _«конструктор по умолчанию»_?\nЕсли у какого-либо класса не определить конструктор, то компилятор сгенерирует конструктор без аргументов - так называемый __«конструктор по умолчанию»__.\n\n```java\npublic ClassName() {}\n```\n\nЕсли у класса уже определен какой-либо конструктор, то конструктор по умолчанию создан не будет и, если он необходим, его нужно описывать явно.\n\n[к оглавлению](#java-core)\n\n## Чем отличаются конструктор по-умолчанию, конструктор копирования и конструктор с параметрами?\n\nУ конструктора по умолчанию отсутствуют какие-либо аргументы. Конструктор копирования принимает в качестве аргумента уже существующий объект класса для последующего создания его клона. Конструктор с параметрами имеет в своей сигнатуре аргументы (обычно необходимые для инициализации полей класса).\n\n[к оглавлению](#java-core)\n\n## Где и как вы можете использовать приватный конструктор?\nПриватный (помеченный ключевым словом `private`, скрытый) конструктор может использоваться публичным статическим методом генерации объектов данного класса. Также доступ к нему разрешён вложенным классам и может использоваться для их нужд.\n\n[к оглавлению](#java-core)\n\n## Расскажите про классы-загрузчики и про динамическую загрузку классов.\nОснова работы с классами в Java — классы-загрузчики, обычные Java-объекты, предоставляющие интерфейс для поиска и создания объекта класса по его имени во время работы приложения.\n\nВ начале работы программы создается 3 основных загрузчика классов:\n\n+ __базовый загрузчик (bootstrap/primordial)__. Загружает основные системные и внутренние классы JDK (_Core API_ - пакеты `java.*` (`rt.jar` и `i18n.jar`) . Важно заметить, что базовый загрузчик является _«Изначальным»_ или _«Корневым»_ и частью JVM, вследствие чего его нельзя создать внутри кода программы.\n+ __загрузчик расширений (extention)__. Загружает различные пакеты расширений, которые располагаются в директории `<JAVA_HOME>/lib/ext` или другой директории, описанной в системном параметре `java.ext.dirs`. Это позволяет обновлять и добавлять новые расширения без необходимости модифицировать настройки используемых приложений. Загрузчик расширений реализован классом `sun.misc.Launcher$ExtClassLoader`. \n+ __системный загрузчик (system/application)__. Загружает классы, пути к которым указаны в переменной окружения `CLASSPATH` или пути, которые указаны в командной строке запуска JVM после ключей `-classpath` или `-cp`. Системный загрузчик реализован классом `sun.misc.Launcher$AppClassLoader`.\n\nЗагрузчики классов являются иерархическими: каждый из них (кроме базового) имеет родительский загрузчик и в большинстве случаев, перед тем как попробовать загрузить класс самостоятельно, он посылает вначале запрос родительскому загрузчику загрузить указанный класс. Такое делегирование позволяет загружать классы тем загрузчиком, который находится ближе всего к базовому в иерархии делегирования. Как следствие поиск классов будет происходить в источниках в порядке их доверия: сначала в библиотеке _Core API_, потом в папке расширений, потом в локальных файлах `CLASSPATH`. \n\nПроцесс загрузки класса состоит из трех частей:\n\n+ _Loading_ – на этой фазе происходит поиск и физическая загрузка файла класса в определенном источнике (в зависимости от загрузчика). Этот процесс определяет базовое представление класса в памяти. На этом этапе такие понятия как «методы», «поля» и т.д. пока не известны.\n+ _Linking_ – процесс, который может быть разбит на 3 части:\n    + _Bytecode verification_ – проверка байт-кода на соответствие требованиям, определенным в спецификации JVM.\n    + _Class preparation_ – создание и инициализация необходимых структур, используемых для представления полей, методов, реализованных интерфейсов и т.п., определенных в загружаемом классе.\n    + _Resolving_ – загрузка набора классов, на которые ссылается загружаемый класс.\n+ _Initialization_ – вызов статических блоков инициализации и присваивание полям класса значений по умолчанию.\n\nДинамическая загрузка классов в Java имеет ряд особенностей:\n\n+ _отложенная (lazy) загрузка и связывание классов_. Загрузка классов производится только при необходимости, что позволяет экономить ресурсы и распределять нагрузку.\n+ _проверка корректности загружаемого кода (type safeness)_. Все действия связанные с контролем использования типов производятся только во время загрузки класса, позволяя избежать дополнительной нагрузки во время выполнения кода.\n+ _программируемая загрузка_. Пользовательский загрузчик полностью контролирует процесс получения запрошенного класса — самому ли искать байт-код и создавать класс или делегировать создание другому загрузчику. Дополнительно существует возможность выставлять различные атрибуты безопасности для загружаемых классов, позволяя таким образом работать с кодом из ненадежных источников.\n+ _множественные пространства имен_. Каждый загрузчик имеет своё пространство имён для создаваемых классов. Соответственно, классы, загруженные двумя различными загрузчиками на основе общего байт-кода, в системе будут различаться.\n\nСуществует несколько способов инициировать загрузку требуемого класса:\n\n+ явный: вызов `ClassLoader.loadClass()` или `Class.forName()` (по умолчанию используется загрузчик, создавший текущий класс, но есть возможность и явного указания загрузчика);\n+ неявный: когда для дальнейшей работы приложения требуется ранее не использованный класс, JVM инициирует его загрузку.\n\n[к оглавлению](#java-core)\n\n## Что такое _Reflection_?\n__Рефлексия (Reflection)__ - это механизм получения данных о программе во время её выполнения (runtime). В Java _Reflection_ осуществляется с помощью _Java Reflection API_, состоящего из классов пакетов `java.lang` и `java.lang.reflect`.\n\nВозможности Java Reflection API: \n\n+ Определение класса объекта;\n+ Получение информации о модификаторах класса, полях, методах, конструкторах и суперклассах;\n+ Определение интерфейсов, реализуемых классом;\n+ Создание экземпляра класса;\n+ Получение и установка значений полей объекта;\n+ Вызов методов объекта;\n+ Создание нового массива.\n\n[к оглавлению](#java-core)\n\n## Зачем нужен `equals()`. Чем он отличается от операции `==`?\nМетод `equals()` - определяет отношение эквивалентности объектов.\n\nПри сравнении объектов с помощью `==` сравнение происходит лишь между ссылками. При сравнении по переопределённому разработчиком `equals()` - по внутреннему состоянию объектов.\n\n[к оглавлению](#java-core)\n\n## Если вы хотите переопределить `equals()`, какие условия должны выполняться?\n## Какими свойствами обладает порождаемое `equals()` отношение эквивалентности?\n+ _Рефлексивность_: для любой ссылки на значение `x`, `x.equals(x)` вернет `true`;\n+ _Симметричность_: для любых ссылок на значения `x` и `y`, `x.equals(y)` должно вернуть `true`, тогда и только тогда, когда `y.equals(x)` возвращает `true`.\n+ _Транзитивность_: для любых ссылок на значения `x`, `y` и `z`, если `x.equals(y)` и `y.equals(z)` возвращают `true`, тогда и `x.equals(z)` вернёт `true`;\n+ _Непротиворечивость_: для любых ссылок на значения `х` и `у`, если несколько раз вызвать `х.equals(y)`, постоянно будет возвращаться значение `true` либо постоянно будет возвращаться значение `false` при условии, что никакая информация, используемая при сравнении объектов, не поменялась.\n\nДля любой ненулевой ссылки на значение `х` выражение `х.equals(null)` должно возвращать `false`.\n\n[к оглавлению](#java-core)\n\n## Правила переопределения метода `Object.equals()`.\n1. Использование оператора `==` для проверки, является ли аргумент ссылкой на указанный объект. Если является, возвращается `true`. Если сравниваемый объект `== null`, должно вернуться `false`.\n2. Использование вызова метода `getClass()` для проверки, имеет ли аргумент правильный тип. Если не имеет, возвращается `false`.\n3. Приведение аргумента к правильному типу. Поскольку эта операция следует за проверкой `instanceof` она гарантированно будет выполнена.\n4. Обход всех значимых полей класса и проверка того, что значение поля в текущем объекте и значение того же поля в проверяемом на эквивалентность аргументе соответствуют друг другу. Если проверки для всех полей прошли успешно, возвращается результат `true`, в противном случае - `false`.\n\nПо окончанию переопределения метода `equals()` следует проверить: является ли порождаемое отношение эквивалентности рефлексивным, симметричным, транзитивным и непротиворечивым? Если ответ отрицательный, метод подлежит соответствующей правке.\n\n[к оглавлению](#java-core)\n\n## Какая связь между `hashCode()` и `equals()`?\n## Если `equals()` переопределен, есть ли какие-либо другие методы, которые следует переопределить?\nРавные объекты должны возвращать одинаковые хэш коды. При переопределении `equals()` нужно обязательно переопределять и метод `hashCode()`.\n\n[к оглавлению](#java-core)\n\n## Что будет, если переопределить `equals()` не переопределяя `hashCode()`? Какие могут возникнуть проблемы?\nКлассы и методы, которые используют правила этого контракта могут работать некорректно. Так для `HashMap` это может привести к тому, что пара «ключ-значение», которая была в неё помещена при использовании нового экземпляра ключа не будет в ней найдена.\n\n[к оглавлению](#java-core)\n\n## Каким образом реализованы методы `hashCode()` и `equals()` в классе `Object`?\nРеализация метода `Object.equals()` сводится к проверке на равенство двух ссылок:\n\n```java\npublic boolean equals(Object obj) {\n  return (this == obj);\n}\n```\n\nРеализация метода `Object.hashCode()` описана как `native`, т.е. определенной не с помощью Java кода и в общем случае зависит от реализации JVM:\n\n```java \npublic native int hashCode();\n```\n\nВ HotSpot JVM хэш код по умолчанию вычисляется с помощью алгоритма генерации простых чисел - Xorshift.\n\n[к оглавлению](#java-core)\n\n## Для чего нужен метод `hashCode()`?\nМетод `hashCode()` необходим для вычисления хэш кода переданного в качестве входного параметра объекта. В Java это целое число, в более широком смысле - битовая строка фиксированной длины, полученная из массива произвольной длины. Этот метод реализован таким образом, что для одного и того же входного объекта, хэш код всегда будет одинаковым. Следует понимать, что в Java множество возможных хэш кодов ограничено типом `int`, а множество объектов ничем не ограничено. Из-за этого, вполне возможна ситуация, что хэш коды разных объектов могут совпасть:\n\n+ если хэш коды разные, то и объекты гарантированно разные;\n+ если хэш коды равны, то объекты не обязательно равны(могут быть разные).\n\n[к оглавлению](#java-core)\n\n## Каковы правила переопределения метода `Object.hashCode()`?\n## Есть ли какие-либо рекомендации о том, какие поля следует использовать при подсчете `hashCode()`?\nОбщий совет: выбирать поля, которые с большой долью вероятности будут различаться. Для этого необходимо использовать уникальные, лучше всего примитивные поля, например, такие как `id`, `uuid`. При этом нужно следовать правилу, если поля задействованы при вычислении `hashCode()`, то они должны быть задействованы и при выполнении `equals()`.\n\n[к оглавлению](#java-core)\n\n## Могут ли у разных объектов быть одинаковые `hashCode()`?\nДа, могут. Метод `hashCode()` не гарантирует уникальность возвращаемого значения. Ситуация, когда у разных объектов одинаковые хэш коды называется _коллизией_. Вероятность возникновения коллизии зависит от используемого алгоритма генерации хэш кода.\n\n[к оглавлению](#java-core)\n\n## Если у класса `Point{int x, y;}` реализовать метод `equals(Object that) {(return this.x == that.x && this.y == that.y)}`, но сделать хэш код в виде `int hashCode() {return x;}`, то будут ли корректно такие точки помещаться и извлекаться из `HashSet`?\n`HashSet` использует `HashMap` для хранения элементов. При добавлении элемента в `HashMap` вычисляется хэш код, по которому определяется позиция в массиве, куда будет вставлен новый элемент. У всех экземпляров класса `Point` хэш код будет одинаковым для всех объектов с одинаковым `x`, что приведёт к вырождению хэш таблицы в список. \n\nПри возникновении коллизии в `HashMap` осуществляется проверка на наличие элемента в списке: `e.hash == hash && ((k = e.key) == key || key.equals(k))`. Если элемент найден, то его значение перезаписывается. В нашем случае для разных объектов метод `equals()` будет возвращать `false`. Соответственно новый элемент будет успешно добавлен в `HashSet`. Извлечение элемента также будет осуществляться успешно. Но производительность такого кода будет невысокой и преимущества хэш таблиц использоваться не будут.\n\n[к оглавлению](#java-core)\n\n## Могут ли у разных объектов `(ref0 != ref1)` быть `ref0.equals(ref1) == true`?\nДа, могут. Для этого в классе этих объектов должен быть переопределен метод `equals()`.\n\nЕсли используется метод `Object.equals()`, то для двух ссылок `x` и `y` метод вернет `true` тогда и только тогда, когда обе ссылки указывают на один и тот же объект (т.е. `x == y` возвращает `true`).\n\n[к оглавлению](#java-core)\n\n## Могут ли у разных ссылок на один объект `(ref0 == ref1)` быть `ref0.equals(ref1) == false`?\nВ общем случае - могут, если метод `equals()` реализован некорректно и не выполняет свойство рефлексивности: для любых ненулевых ссылок `x` метод `x.equals(x)` должен возвращать `true`.\n\n[к оглавлению](#java-core)\n\n## Можно ли так реализовать метод `equals(Object that) {return this.hashCode() == that.hashCode()}`?\nСтрого говоря нельзя, поскольку метод `hashCode()` не гарантирует уникальность значения для каждого объекта. Однако для сравнения экземпляров класса `Object` такой код допустим, т.к. метод `hashCode()` в классе `Object` возвращает уникальные значения для разных объектов (его вычисление основано на использовании алгоритма генерации случайных чисел).\n\n[к оглавлению](#java-core)\n\n## В `equals()` требуется проверять, что аргумент `equals(Object that)` такого же типа что и сам объект. В чем разница между `this.getClass() == that.getClass()` и `that instanceof MyClass`?\nОператор `instanceof` сравнивает объект и указанный тип. Его можно использовать для проверки является ли данный объект экземпляром некоторого класса, либо экземпляром его дочернего класса, либо экземпляром класса, который реализует указанный интерфейс.\n\n`this.getClass() == that.getClass()` проверяет два класса на идентичность, поэтому для корректной реализации контракта метода `equals()` необходимо использовать точное сравнение с помощью метода `getClass()`.\n\n[к оглавлению](#java-core)\n\n## Можно ли реализовать метод `equals()` класса `MyClass` вот так: `class MyClass {public boolean equals(MyClass that) {return this == that;}}`?\nРеализовать можно, но данный метод не переопределяет метод `equals()` класса `Object`, а перегружает его.\n\n[к оглавлению](#java-core)\n\n## Есть класс `Point{int x, y;}`. Почему хэш код в виде `31 * x + y` предпочтительнее чем `x + y`?\nМножитель создает зависимость значения хэш кода от очередности обработки полей, что в итоге порождает лучшую хэш функцию.\n\n[к оглавлению](#java-core)\n\n## Расскажите про клонирование объектов.\nИспользование оператора присваивания не создает нового объекта, а лишь копирует ссылку на объект. Таким образом, две ссылки указывают на одну и ту же область памяти, на один и тот же объект. Для создания нового объекта с таким же состоянием используется клонирование объекта. \n\nКласс `Object` содержит `protected` метод `clone()`, осуществляющий побитовое копирование объекта производного класса. Однако сначала необходимо переопределить метод `clone()` как `public` для обеспечения возможности его вызова. В переопределенном методе следует вызвать базовую версию метода `super.clone()`, которая и выполняет собственно клонирование. \n\nЧтобы окончательно сделать объект клонируемым, класс должен реализовать интерфейс `Cloneable`. Интерфейс `Cloneable` не содержит методов относится к маркерным интерфейсам, а его реализация гарантирует, что метод `clone()` класса `Object` возвратит точную копию вызвавшего его объекта с воспроизведением значений всех его полей. В противном случае метод генерирует исключение `CloneNotSupportedException`. Следует отметить, что при использовании этого механизма объект создается без вызова конструктора.\n\nЭто решение эффективно только в случае, если поля клонируемого объекта представляют собой значения базовых типов и их обёрток или неизменяемых (immutable) объектных типов. Если же поле клонируемого типа является изменяемым ссылочным типом, то для корректного клонирования требуется другой подход. Причина заключается в том, что при создании копии поля оригинал и копия представляют собой ссылку на один и тот же объект. В этой ситуации следует также клонировать и сам объект поля класса.\n\nТакое клонирование возможно только в случае, если тип атрибута класса также реализует интерфейс `Cloneable` и переопределяет метод `clone()`. Так как, если это будет иначе вызов метода невозможен из-за его недоступности. Отсюда следует, что если класс имеет суперкласс, то для реализации механизма клонирования текущего класса-потомка необходимо наличие корректной реализации такого механизма в суперклассе. При этом следует отказаться от использования объявлений `final` для полей объектных типов по причине невозможности изменения их значений при реализации клонирования.\n\nПомимо встроенного механизма клонирования в Java для клонирования объекта можно использовать:\n\n+ __Специализированный конструктор копирования__ - в классе описывается конструктор, который принимает объект этого же класса и инициализирует поля создаваемого объекта значениями полей переданного.\n+ __Фабричный метод__ - (Factory method), который представляет собой статический метод, возвращающий экземпляр своего класса.\n+ __Механизм сериализации__ - сохранение и последующее восстановление объекта в/из потока байтов.\n\n[к оглавлению](#java-core)\n\n## В чем отличие между _поверхностным_ и _глубоким_ клонированием?\n__Поверхностное копирование__ копирует настолько малую часть информации об объекте, насколько это возможно. По умолчанию, клонирование в Java является поверхностным, т.е. класс `Object` не знает о структуре класса, которого он копирует. Клонирование такого типа осуществляется JVM по следующим правилам: \n\n+ Если класс имеет только члены примитивных типов, то будет создана совершенно новая копия объекта и возвращена ссылка на этот объект.\n+ Если класс помимо членов примитивных типов содержит члены ссылочных типов, то тогда копируются ссылки на объекты этих классов. Следовательно, оба объекта будут иметь одинаковые ссылки.\n\n__Глубокое копирование__ дублирует абсолютно всю информацию объекта:\n+ Нет необходимости копировать отдельно примитивные данные;\n+ Все члены ссылочного типа в оригинальном классе должны поддерживать клонирование. Для каждого такого члена при переопределении метода `clone()` должен вызываться `super.clone()`;\n+ Если какой-либо член класса не поддерживает клонирование, то в методе клонирования необходимо создать новый экземпляр этого класса и скопировать каждый его член со всеми атрибутами в новый объект класса, по одному.\n\n[к оглавлению](#java-core)\n\n## Какой способ клонирования предпочтительней?\nНаиболее безопасным и, следовательно, предпочтительным способом клонирования является использование специализированного конструктора копирования: \n\n+ Отсутствие ошибок наследования (не нужно беспокоиться, что у наследников появятся новые поля, которые не будут склонированы через метод `clone()`);\n+ Поля для клонирования указываются явно;\n+ Возможность клонировать даже `final` поля.\n\n[к оглавлению](#java-core)\n\n## Почему метод `clone()` объявлен в классе `Object`, а не в интерфейсе `Cloneable`?\nМетод `clone()` объявлен в классе `Object` с указанием модификатора `native`, чтобы обеспечить доступ к стандартному механизму поверхностного копирования объектов. Одновременно он объявлен и как `protected`, чтобы нельзя было вызвать этот метод у не переопределивших его объектов. Непосредственно интерфейс `Cloneable` является маркерным (не содержит объявлений методов) и нужен только для обозначения самого факта, что данный объект готов к тому, чтобы быть клонированным. Вызов переопределённого метода `clone()` у не `Cloneable` объекта вызовет выбрасывание `CloneNotSupportedException`.\n\n[к оглавлению](#java-core)\n\n## Опишите иерархию исключений.\nИсключения делятся на несколько классов, но все они имеют общего предка — класс `Throwable`, потомками которого являются классы `Exception` и `Error`.\n\n__Ошибки (Errors)__ представляют собой более серьёзные проблемы, которые, согласно спецификации Java, не следует обрабатывать в собственной программе, поскольку они связаны с проблемами уровня JVM. Например, исключения такого рода возникают, если закончилась память доступная виртуальной машине.\n\n__Исключения (Exceptions)__ являются результатом проблем в программе, которые в принципе решаемы, предсказуемы и последствия которых возможно устранить внутри программы. Например, произошло деление целого числа на ноль.\n\n[к оглавлению](#java-core)\n\n## Какие виды исключений в Java вы знаете, чем они отличаются?\n## Что такое _checked_ и _unchecked exception_?\nВ Java все исключения делятся на два типа:\n\n+ __checked (контролируемые/проверяемые исключения)__ должны обрабатываться блоком `catch` или описываться в заголовке метода (например, `throws IOException`). Наличие такого обработчика/модификатора в заголовке метода проверяется на этапе компиляции;\n+ __unchecked (неконтролируемые/непроверяемые исключения)__, к которым относятся ошибки `Error` (например, `OutOfMemoryError`), обрабатывать которые не рекомендуется и исключения времени выполнения, представленные классом `RuntimeException` и его наследниками (например, `NullPointerException`), которые могут не обрабатываться блоком `catch` и не быть описанными в заголовке метода.\n\n[к оглавлению](#java-core)\n\n## Какой оператор позволяет принудительно выбросить исключение?\nЭто оператор `throw`:\n\n```java\nthrow new Exception();\n```\n\n[к оглавлению](#java-core)\n\n## О чем говорит ключевое слово `throws`?\nМодификатор `throws` прописывается в заголовке метода и указывает на то, что метод потенциально может выбросить исключение с указанным типом.\n\n[к оглавлению](#java-core)\n\n## Как написать собственное («пользовательское») исключение?\nНеобходимо унаследоваться от базового класса требуемого типа исключений (например, от `Exception` или `RuntimeException`).\n\n```java\nclass CustomException extends Exception {\n    public CustomException() {\n        super();\n    }\n\n    public CustomException(final String string) {\n        super(string + \" is invalid\");\n    }\n\n    public CustomException(final Throwable cause) {\n        super(cause);\n    }\n}\n```\n\n[к оглавлению](#java-core)\n\n## Какие существуют _unchecked exception_?\nНаиболее часто встречающиеся: `ArithmeticException`, `ClassCastException`, `ConcurrentModificationException`, `IllegalArgumentException`, `IllegalStateException`, `IndexOutOfBoundsException`, `NoSuchElementException`, `NullPointerException`, `UnsupportedOperationException`.\n\n[к оглавлению](#java-core)\n\n## Что представляет из себя ошибки класса `Error`?\nОшибки класса `Error` представляют собой наиболее серьёзные проблемы уровня JVM. Например, исключения такого рода возникают, если закончилась память доступная виртуальной машине. Обрабатывать такие ошибки не запрещается, но делать этого не рекомендуется.\n\n[к оглавлению](#java-core)\n\n## Что вы знаете о `OutOfMemoryError`?\n`OutOfMemoryError` выбрасывается, когда виртуальная машина Java не может создать (разместить) объект из-за нехватки памяти, а сборщик мусора не может высвободить достаточное её количество.\n\nОбласть памяти, занимаемая java процессом, состоит из нескольких частей. Тип `OutOfMemoryError` зависит от того, в какой из них не хватило места:\n\n+ `java.lang.OutOfMemoryError: Java heap space`: Не хватает места в куче, а именно, в области памяти в которую помещаются объекты, создаваемые в приложении программно. Обычно проблема кроется в утечке памяти. Размер задается параметрами `-Xms` и `-Xmx`.\n+ `java.lang.OutOfMemoryError: PermGen space`: (до версии Java 8) Данная ошибка возникает при нехватке места в _Permanent_ области, размер которой задается параметрами `-XX:PermSize` и `-XX:MaxPermSize`.\n+ `java.lang.OutOfMemoryError: GC overhead limit exceeded`: Данная ошибка может возникнуть как при переполнении первой, так и второй областей. Связана она с тем, что памяти осталось мало и сборщик мусора постоянно работает, пытаясь высвободить немного места. Данную ошибку можно отключить с помощью параметра `-XX:-UseGCOverheadLimit`.\n+ `java.lang.OutOfMemoryError: unable to create new native thread`: Выбрасывается, когда нет возможности создавать новые потоки.\n\n[к оглавлению](#java-core)\n\n## Опишите работу блока _try-catch-finally_.\n`try` — данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.\n`catch` — ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений в случае их возникновения.\n`finally` — ключевое слово для отметки начала блока кода, который является дополнительным. Этот блок помещается после последнего блока `catch`. Управление передаётся в блок `finally` в любом случае, было выброшено исключение или нет.\n\nОбщий вид конструкции для обработки исключительной ситуации выглядит следующим образом:\n\n```java\ntry { \n    //код, который потенциально может привести к исключительной ситуации \n} \ncatch(SomeException e ) { //в скобках указывается класс конкретной ожидаемой ошибки  \n    //код обработки исключительной ситуации\n} \nfinally {\n    //необязательный блок, код которого выполняется в любом случае\n}\n```\n\n[к оглавлению](#java-core)\n\n## Что такое механизм _try-with-resources_?\nДанная конструкция, которая появилась в Java 7, позволяет использовать блок _try-catch_ не заботясь о закрытии ресурсов, используемых в данном сегменте кода.\nРесурсы объявляются в скобках сразу после `try`, а компилятор уже сам неявно создаёт секцию `finally`, в которой и происходит освобождение занятых в блоке ресурсов. Под ресурсами подразумеваются сущности, реализующие интерфейс `java.lang.Autocloseable`. \n\nОбщий вид конструкции:\n\n```java\ntry(/*объявление ресурсов*/) {\n    //...\n} catch(Exception ex) {\n    //...\n} finally {\n    //...\n}\n```\n\nСтоит заметить, что блоки `catch` и явный `finally` выполняются уже после того, как закрываются ресурсы в неявном `finally`.\n\n[к оглавлению](#java-core)\n\n## Возможно ли использование блока _try-finally_ (без `catch`)?\nТакая запись допустима, но смысла в такой записи не так много, всё же лучше иметь блок `catch`, в котором будет обрабатываться необходимое исключение.\n\n[к оглавлению](#java-core)\n\n## Может ли один блок `catch` отлавливать сразу несколько исключений?\nВ Java 7 стала доступна новая языковая конструкция, с помощью которой можно перехватывать несколько исключений одним блоком `catch`:\n\n```java\ntry {  \n    //...\n} catch(IOException | SQLException ex) {\n    //...\n}\n```\n\n[к оглавлению](#java-core)\n\n## Всегда ли исполняется блок `finally`?\nКод в блоке `finally` будет выполнен всегда, независимо от того, выброшено исключение или нет.\n\n[к оглавлению](#java-core)\n\n## Существуют ли ситуации, когда блок `finally` не будет выполнен?\nНапример, когда JVM «умирает» - в такой ситуации `finally` недостижим и не будет выполнен, так как происходит принудительный системный выход из программы:\n\n```java\ntry { \n    System.exit(0); \n} catch(Exception e) { \n    e.printStackTrace(); \n} finally { }\n```\n\n[к оглавлению](#java-core)\n\n## Может ли метод _main()_ выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?\nМожет и оно будет передано в виртуальную машину Java (JVM).\n\n[к оглавлению](#java-core)\n\n## Предположим, есть метод, который может выбросить `IOException` и `FileNotFoundException` в какой последовательности должны идти блоки `catch`? Сколько блоков `catch` будет выполнено?\nОбщее правило: обрабатывать исключения нужно от «младшего» к старшему. Т.е. нельзя поставить в первый блок `catch(Exception ex) {}`, иначе все дальнейшие блоки `catch()` уже ничего не смогут обработать, т.к. любое исключение будет соответствовать обработчику `catch(Exception ex)`.\n\nТаким образом, исходя из факта, что `FileNotFoundException extends IOException` сначала нужно обработать `FileNotFoundException`, а затем уже `IOException`:\n\n```java\nvoid method() {\n    try {\n        //...\n    } catch (FileNotFoundException ex) {\n        //...\n    } catch (IOException ex) {\n        //...\n    }\n}\n```\n\n[к оглавлению](#java-core)    \n\n## Что такое _generics_?\n__Generics__ - это технический термин, обозначающий набор свойств языка позволяющих определять и использовать обобщенные типы и методы. Обобщенные типы или методы отличаются от обычных тем, что имеют типизированные параметры.\n\nПримером использования обобщенных типов может служить _Java Collection Framework_. Так, класс `LinkedList<E>` - типичный обобщенный тип. Он содержит параметр `E`, который представляет тип элементов, которые будут храниться в коллекции. Создание объектов обобщенных типов происходит посредством замены параметризированных типов реальными типами данных. Вместо того, чтобы просто использовать `LinkedList`, ничего не говоря о типе элемента в списке, предлагается использовать точное указание типа `LinkedList<String>`, `LinkedList<Integer>` и т.п.\n\n[к оглавлению](#java-core)\n\n## Что такое _«интернационализация»_, _«локализация»_?\n__Интернационализация (internationalization)__ - способ создания приложений, при котором их можно легко адаптировать для разных аудиторий, говорящих на разных языках.\n\n__Локализация (localization)__ -  адаптация интерфейса приложения под несколько языков. Добавление нового языка может внести определенные сложности в локализацию интерфейса.\n\n[к оглавлению](#java-core)\n\n# Источники\n+ [Quizful](http://www.quizful.net/interview/java/)\n+ [JavaStudy.ru](http://javastudy.ru/interview/java-oop2/)\n+ [ggenikus.github.io](https://ggenikus.github.io/blog/2014/05/04/gc/)\n+ [Санкт-Петербургская группа тестирования JVM](https://blogs.oracle.com/vmrobot/entry/основы_сборки_мусора_в_hotspot)\n+ [Объектно-ориентированное программирование](http://oop-java.blogspot.ru/2006/02/blog-post_21.html)\n+ [JavaRush](http://info.javarush.ru/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "css.md",
          "type": "blob",
          "size": 10.1484375,
          "content": "[Вопросы для собеседования](README.md)\n\n# Основы CSS\n+ [Что такое _«CSS»_?](#Что-такое-css)\n+ [Как в CSS обозначаются комментарии?](#Как-в-css-обозначаются-комментарии)\n+ [Что такое _«селектор»_?](#Что-такое-селектор)\n+ [Перечислите основные виды селекторов.](#Перечислите-основные-виды-селекторов)\n+ [Что такое псевдокласс?](#Что-такое-псевдокласс)\n+ [Какие существуют селекторы аттрибутов?](#Какие-существуют-селекторы-аттрибутов)\n+ [В чем разница между `#my` и `.my`?](#В-чем-разница-между-my-и-my)\n+ [В чем разница между `margin` и `padding`?](#В-чем-разница-между-margin-и-padding)\n+ [В чем заключается разница между значениями `0` и `auto` в свойстве `margin`?](#В-чем-заключается-разница-между-значениями-0-и-auto-в-свойстве-margin)\n+ [Какое свойство задает цвет фона?](#Какое-свойство-задает-цвет-фона)\n+ [Как убрать подчеркивание для всех ссылок на странице?](#Как-убрать-подчеркивание-для-всех-ссылок-на-странице)\n+ [Для чего используется свойство `clear`?](#Для-чего-используется-свойство-clear)\n+ [Как сделать жирным текст во всех элементах `<p>`?](#Как-сделать-жирным-текст-во-всех-элементах-p)\n+ [Как задать красный цвет для всех элементов, имеющих класс `red`?](#Как-задать-красный-цвет-для-всех-элементов-имеющих-класс-red)\n\n## Что такое _«CSS»_?\n__CSS, Cascading Style Sheets (каскадные таблицы стилей)__ - формальный язык описания внешнего вида документа, написанного с использованием языка разметки, который применяется к элементам web-страницы для управления их видом и положением.\n\nОсновной целью разработки CSS являлось разделение описания логической структуры web-страницы, которое производится с помощью HTML или других языков разметки от описания внешнего вида этой web-страницы, которое производится с помощью CSS. \n\n[к оглавлению](#Основы-css)\n\n## Как в CSS обозначаются комментарии?\nЧтобы пометить, что текст является комментарием, применяют конструкцию `/* ... */`\n\n[к оглавлению](#Основы-css)\n\n## Что такое _«селектор»_?\n__Селектор__ – это правило, на основании которого осуществляется выбор элементов в HTML документе для того, чтобы применить к ним определённые стили.\n\n```css\np {\ntext-align: center;\nfont-size: 20px;\n}\n/* p – это селектор, text-align и font-size – это свойства, а center и 20px – значения. */\n```\n\n[к оглавлению](#Основы-css)\n\n## Перечислите основные виды селекторов.\n\n+ __селектор `*`__ - выбор всех элементов;\n+ __селектор элемента__ - выбор всех элементов в HTML документе, имеющих указанный тег (например: `div`);\n+ __селектор класса__ - выбор всех элементов в HTML документе, имеющих указанный класс (например: `.center`);\n+ __селектор идентификатора__ - выбор элемента в HTML документе, имеющего указанный идентификатор (например: `#footer`);\n+ __селекторы псевдоклассов__ - выбор всех элементов в HTML документе, имеющих указанный псевдокласс (например: `p:first-of-type`);\n+ __селекторы атрибутов__ - выбор элементов в зависимости от указанного атрибута элемента или его значения (например: `[href*=\"youtube\"]`).\n\n[к оглавлению](#Основы-css)\n\n## Что такое псевдокласс?\nПсевдокласс определяет динамическое состояние элементов, которое изменяется из-за действий пользователя, или же соответствует текущему положению в дереве документа. В отличие от настоящего класса, в явном виде псеводкласс в HTML не указывается, а в CSS указывается через `:` непосредственно после селектора.\n\nНаиболее известные псевдоклассы:\n\n+ `:link` применяется к непосещенным ссылкам;\n+ `:visited` применяется к посещенным ссылкам;\n+ `:hover` применяется, когда курсор мыши находится в пределах элемента, но не активирует его;\n+ `:active` применяется при активации элемента;\n+ `:focus` применяется к элементу при получении им фокуса;\n+ `:first-child` применяется к первому дочернему элементу селектора, который расположен в дереве элементов документа.\n\n```css\na.snowman:link {\n    color: blue;\n}\na.snowman:visited {\n    color: purple;\n}\na.snowman:active {\n    color: red;\n}\na.snowman:hover {\n    text-decoration: none;\n    color: blue;\n    background-color: yellow;\n}\n```\n\n[к оглавлению](#Основы-css)\n\n## Какие существуют селекторы аттрибутов?\n+ __`[атрибут]`__ - все элементы, имеющие указанный `атрибут`;\n+ __`[атрибут=значение]`__ - все элементы, имеющие `атрибут`, значение которого равно `\"значение\"`;\n+ __`[атрибут^=занчение]`__ - все элементы, имеющие `атрибут`, значение которого начинается с `значение`; \n+ __`[атрибут|=значение]`__ - все элементы, имеющие `атрибут`, значение которого равно `значение` или начинается с `значение` следующим образом `значение-*` (`значение` с обязательным дефисом, после которого идёт остальное содержимое значения);\n+ __`[атрибут$=значение]`__ - все элементы, имеющие `атрибут`, значение которого заканчивается на `значение`;\n+ __`[атрибут*=значение]`__ - все элементы, имеющие `атрибут`, значение которого содержит подстроку `значение`;\n+ __`[атрибут~=значение]`__ - все элементы, имеющие `атрибут`, значение которого содержит `значение` как одно из значений через пробел.\n\n[к оглавлению](#Основы-css)\n\n## В чем разница между `#my` и `.my`?\n`#my` — селектор идентификатора, а `.my` — селектор класса.\n\n[к оглавлению](#Основы-css)\n\n## В чем разница между `margin` и `padding`?\n`margin` — внешний отступ, а `padding` — внутренний отступ.\n\n[к оглавлению](#Основы-css)\n\n## В чем заключается разница между значениями `0` и `auto` в свойстве `margin`?\nВ вертикальных полях — `auto` всегда означает `0`. В горизонтальных полях — `auto` означает `0` только тогда, когда свойство `width` также `auto`.\n\n[к оглавлению](#Основы-css)\n\n## Какое свойство задает цвет фона?\nЦвет фона задает свойство `background-color`.\n\n[к оглавлению](#Основы-css)\n\n## Как убрать подчеркивание для всех ссылок на странице?\n```css\na {\n    text-decoration: none;\n}\n```\n\n[к оглавлению](#Основы-css)\n\n## Для чего используется свойство `clear`?\n`clear` устанавливает, с какой стороны элемента запрещено его обтекание другими элементами.\n\n[к оглавлению](#Основы-css)\n\n## Как сделать жирным текст во всех элементах `<p>`?\n```css\np {\n    font-weight: bold;\n}\n```\n\n[к оглавлению](#Основы-css)\n\n## Как задать красный цвет для всех элементов, имеющих класс `red`?\n```css\n.red {\n    color: red;\n}\n```\n\n[к оглавлению](#Основы-css)\n\n# Источники\n+ [myway-blog.ru](http://myway-blog.ru/interview-frontend-web-programmer/)\n+ [htmlbook.ru](http://stepbystep.htmlbook.ru/?id=43)\n+ [itchief.ru](https://itchief.ru/lessons/html-and-css/css-selectors)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "db.md",
          "type": "blob",
          "size": 42.0068359375,
          "content": "[Вопросы для собеседования](README.md)\n\n# Базы данных\n+ [Что такое _«база данных»_?](#Что-такое-база-данных)\n+ [Что такое _«система управления базами данных»_?](#Что-такое-система-управления-базами-данных)\n+ [Что такое _«реляционная модель данных»_?](#Что-такое-реляционная-модель-данных)\n+ [Дайте определение терминам _«простой»_, _«составной» (composite)_, _«потенциальный» (candidate)_ и _«альтернативный» (alternate)_ ключ.](#Дайте-определение-терминам-простой-составной-composite-потенциальный-candidate-и-альтернативный-alternate-ключ)\n+ [Что такое _«первичный ключ» (primary key)_? Каковы критерии его выбора?](#Что-такое-первичный-ключ-primary-key-Каковы-критерии-его-выбора)\n+ [Что такое _«внешний ключ» (foreign key)_?](#Что-такое-внешний-ключ-foreign-key)\n+ [Что такое _«нормализация»_?](#Что-такое-нормализация)\n+ [Какие существуют нормальные формы?](#Какие-существуют-нормальные-формы)\n+ [Что такое _«денормализация»_? Для чего она применяется?](#Что-такое-денормализация-Для-чего-она-применяется)\n+ [Какие существуют типы связей в базе данных? Приведите примеры.](#Какие-существуют-типы-связей-в-базе-данных-Приведите-примеры)\n+ [Что такое _«индексы»_? Для чего их используют? В чём заключаются их преимущества и недостатки?](#Что-такое-индексы-Для-чего-их-используют-В-чём-заключаются-их-преимущества-и-недостатки)\n+ [Какие типы индексов существуют?](#Какие-типы-индексов-существуют)\n+ [В чем отличие между кластерными и некластерными индексами?](#В-чем-отличие-между-кластерными-и-некластерными-индексами)\n+ [Имеет ли смысл индексировать данные, имеющие небольшое количество возможных значений?](#Имеет-ли-смысл-индексировать-данные-имеющие-небольшое-количество-возможных-значений)\n+ [Когда полное сканирование набора данных выгоднее доступа по индексу?](#Когда-полное-сканирование-набора-данных-выгоднее-доступа-по-индексу)\n+ [Что такое _«транзакция»_?](#Что-такое-транзакция)\n+ [Назовите основные свойства транзакции.](#Назовите-основные-свойства-транзакции)\n+ [Какие существуют уровни изолированности транзакций?](#Какие-существуют-уровни-изолированности-транзакций)\n+ [Какие проблемы могут возникать при параллельном доступе с использованием транзакций?](#Какие-проблемы-могут-возникать-при-параллельном-доступе-с-использованием-транзакций)\n\n## Что такое _«база данных»_?\n__База данных__ — организованный и адаптированный для обработки вычислительной системой набор информации.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«система управления базами данных»_?\n__Система управления базами данных (СУБД)__ - набор средств общего или специального назначения, обеспечивающий создание, доступ к материалам и управление базой данных.\n\nОсновные функции СУБД:\n\n+ управление данными\n+ журнализация изменений данных\n+ резервное копирование и восстановление данных;\n+ поддержка языка определения данных и манипулирования ими.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«реляционная модель данных»_?\n__Реляционная модель данных__ — это логическая модель данных и прикладная теория построения реляционных баз данных.\n\nРеляционная модель данных включает в себя следующие компоненты:\n\n+ _Структурный аспект_ — данные представляют собой набор отношений.\n+ _Аспект целостности_ — отношения отвечают определенным условиям целостности: уровня домена (типа данных), уровня отношения и уровня базы данных.\n+ _Аспект обработки (манипулирования)_ — поддержка операторов манипулирования отношениями (реляционная алгебра, реляционное исчисление).\n+ _Нормальная форма_ - свойство отношения в реляционной модели данных, характеризующее его с точки зрения избыточности и определённое как совокупность требований, которым должно удовлетворять отношение.\n\n[к оглавлению](#Базы-данных)\n\n## Дайте определение терминам _«простой»_, _«составной» (composite)_, _«потенциальный» (candidate)_ и _«альтернативный» (alternate)_ ключ.\n__Простой ключ__ состоит из одного атрибута (поля). __Составной__ - из двух и более.\n\n__Потенциальный ключ__ - простой или составной ключ, который уникально идентифицирует каждую запись набора данных. При этом потенциальный ключ должен обладать критерием неизбыточности: при удалении любого из полей набор полей перестает уникально идентифицировать запись.\n\nИз множества всех потенциальных ключей набора данных выбирают первичный ключ, все остальные ключи называют __альтернативными__.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«первичный ключ» (primary key)_? Каковы критерии его выбора?\n__Первичный ключ (primary key)__ в реляционной модели данных один из _потенциальных ключей_ отношения, выбранный в качестве основного ключа (ключа по умолчанию).\n\nЕсли в отношении имеется единственный потенциальный ключ, он является и первичным ключом. Если потенциальных ключей несколько, один из них выбирается в качестве первичного, а другие называют _«альтернативными»_.\n\nВ качестве первичного обычно выбирается тот из потенциальных ключей, который наиболее удобен. Поэтому в качестве первичного ключа, как правило, выбирают тот, который имеет наименьший размер (физического хранения) и/или включает наименьшее количество атрибутов. Другой критерий выбора первичного ключа — сохранение его уникальности со временем. Поэтому в качестве первичного ключа стараются выбирать такой потенциальный ключ, который с наибольшей вероятностью никогда не утратит уникальность.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«внешний ключ» (foreign key)_?\n__Внешний ключ (foreign key)__ — подмножество атрибутов некоторого отношения A, значения которых должны совпадать со значениями некоторого потенциального ключа некоторого отношения B.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«нормализация»_?\n_Нормализация_ - это процесс преобразования отношений базы данных к виду, отвечающему нормальным формам (пошаговый, обратимый процесс замены исходной схемы другой схемой, в которой наборы данных имеют более простую и логичную структуру).\n\nНормализация предназначена для приведения структуры базы данных к виду, обеспечивающему минимальную логическую избыточность, и не имеет целью уменьшение или увеличение производительности работы или же уменьшение или увеличение физического объёма базы данных. Конечной целью нормализации является уменьшение потенциальной противоречивости хранимой в базе данных информации.\n\n[к оглавлению](#Базы-данных)\n\n## Какие существуют нормальные формы?\n__Первая нормальная форма (1NF)__ - Отношение находится в 1NF, если значения всех его атрибутов атомарны (неделимы). \n\n__Вторая нормальная форма (2NF)__ - Отношение находится в 2NF, если оно находится в 1NF, и при этом все неключевые атрибуты зависят только от ключа целиком, а не от какой-то его части.\n\n__Третья нормальная форма (3NF)__ - Отношение находится в 3NF, если оно находится в 2NF и все неключевые атрибуты не зависят друг от друга.\n\n__Четвёртая нормальная форма (4NF)__ - Отношение находится в 4NF , если оно находится в 3NF и если в нем не содержатся независимые группы атрибутов, между которыми существует отношение «многие-ко-многим».\n\n__Пятая нормальная форма (5NF)__ - Отношение находится в 5NF, когда каждая нетривиальная зависимость соединения в ней определяется потенциальным ключом (ключами) этого отношения.\n\n__Шестая нормальная форма (6NF)__ - Отношение находится в 6NF, когда она удовлетворяет всем нетривиальным зависимостям соединения, т.е. когда она неприводима, то есть не может быть подвергнута дальнейшей декомпозиции без потерь. Каждая переменная отношения, которая находится в 6NF, также находится и в 5NF. Введена как обобщение пятой нормальной формы для хронологической базы данных.\n\n__Нормальная форма Бойса-Кодда, усиленная 3 нормальная форма (BCNF)__ - Отношение находится в BCNF, когда каждая её нетривиальная и неприводимая слева функциональная зависимость имеет в качестве своего детерминанта некоторый потенциальный ключ.\n\n__Доменно-ключевая нормальная форма (DKNF)__ -  Отношение находится в DKNF, когда каждое наложенное на неё ограничение является логическим следствием ограничений доменов и ограничений ключей, наложенных на данное отношение.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«денормализация»_? Для чего она применяется?\n__Денормализация базы данных__ — это процесс осознанного приведения базы данных к виду, в котором она не будет соответствовать правилам нормализации. Обычно это необходимо для повышения производительности и скорости извлечения данных, за счет увеличения избыточности данных.\n\n[к оглавлению](#Базы-данных)\n\n## Какие существуют типы связей в базе данных? Приведите примеры.\n+ __Один к одному__ - любому значению атрибута А соответствует только одно значение атрибута В, и наоборот.\n\n>Каждый университет гарантированно имеет 1-го ректора: _1 университет → 1 ректор_.\n\n+ __Один ко многим__ - любому значению атрибута А соответствует 0, 1 или несколько значений атрибута В.\n\n>В каждом университете есть несколько факультетов: _1 университет → много факультетов_.\n\n+ __Многие ко многим__ - любому значению атрибута А соответствует 0, 1 или несколько значений атрибута В, и любому значению атрибута В соответствует 0, 1 или несколько значение атрибута А.\n\n>1 профессор может преподавать на нескольких факультетах, в то же время на 1-ом факультете может преподавать несколько профессоров: _Несколько профессоров ↔ Несколько факультетов_.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«индексы»_? Для чего их используют? В чём заключаются их преимущества и недостатки?\n__Индекс (index)__ — объект базы данных, создаваемый с целью повышения производительности выборки данных. \n\nНаборы данных могут иметь большое количество записей, которые хранятся в произвольном порядке, и их поиск по заданному критерию путём последовательного просмотра набора данных запись за записью может занимать много времени. Индекс формируется из значений одного или нескольких полей и указателей на соответствующие записи набора данных, - таким образом, достигается значительный прирост скорости выборки из этих данных.\n\nПреимущества\n\n+ ускорение поиска и сортировки по определенному полю или набору полей.\n+ обеспечение уникальности данных.\n\nНедостатки \n\n+ требование дополнительного места на диске и в оперативной памяти и чем больше/длиннее ключ, тем больше размер индекса.\n+ замедление операций вставки, обновления и удаления записей, поскольку при этом приходится обновлять сами индексы.\n\nИндексы предпочтительней для:\n\n+ Поля-счетчика, чтобы в том числе избежать и повторения значений в этом поле;\n+ Поля, по которому проводится сортировка данных;\n+ Полей, по которым часто проводится соединение наборов данных. Поскольку в этом случае данные располагаются в порядке возрастания индекса и соединение происходит значительно быстрее;\n+ Поля, которое объявлено первичным ключом (primary key);\n+ Поля, в котором данные выбираются из некоторого диапазона. В этом случае как только будет найдена первая запись с нужным значением, все последующие значения будут расположены рядом.\n \nИспользование индексов нецелесообразно для:\n\n+ Полей, которые редко используются в запросах;\n+ Полей, которые содержат всего два или три значения, например: _мужской_,  _женский пол_ или значения _«да»_, _«нет»_.\n\n[к оглавлению](#Базы-данных)\n\n## Какие типы индексов существуют?\n\n__По порядку сортировки__\n+ _упорядоченные_ — индексы, в которых элементы упорядочены;\n+ _возрастающие_;\n+ _убывающие_;\n+ _неупорядоченные_ — индексы, в которых элементы неупорядочены.\n\n__По источнику данных__\n+ _индексы по представлению (view)_;\n+ _индексы по выражениям_.\n\n__По воздействию на источник данных__\n+ _кластерный индекс_ - при определении в наборе данных физическое расположение данных перестраивается в соответствии со структурой индекса. Логическая структура набора данных в этом случае представляет собой скорее словарь, чем индекс. Данные в словаре физически упорядочены, например по алфавиту. Кластерные индексы могут дать существенное увеличение производительности поиска данных даже по сравнению с обычными индексами. Увеличение производительности особенно заметно при работе с последовательными данными.\n+ _некластерный индекс_ — наиболее типичные представители семейства индексов. В отличие от кластерных, они не перестраивают физическую структуру набора данных, а лишь организуют ссылки на соответствующие записи. Для идентификации нужной записи в наборе данных некластерный индекс организует специальные указатели, включающие в себя: информацию об идентификационном номере файла, в котором хранится запись; идентификационный номер страницы соответствующих данных; номер искомой записи на соответствующей странице; содержимое столбца.\n\n__По структуре__\n+ _B*-деревья_;\n+ _B+-деревья_;\n+ _B-деревья_;\n+ _Хэши_.\n\n__По количественному составу__\n+ _простой индекс (индекс с одним ключом)_ — строится по одному полю;\n+ _составной (многоключевой, композитный) индекс_ — строится по нескольким полям при этом важен порядок их следования;\n+ _индекс с включенными столбцами_ — некластеризованный индекс, дополнительно содержащий кроме ключевых столбцов еще и неключевые;\n+ _главный индекс (индекс по первичному ключу)_ — это тот индексный ключ, под управлением которого в данный момент находится набор данных. Набор данных не может быть отсортирован по нескольким индексным ключам одновременно. Хотя, если один и тот же набор данных открыт одновременно в нескольких рабочих областях, то у каждой копии набора данных может быть назначен свой главный индекс.\n\n__По характеристике содержимого__\n+ _уникальный индекс_ состоит из множества уникальных значений поля;\n+ _плотный индекс_ (NoSQL) — индекс, при котором, каждом документе в индексируемой коллекции соответствует запись в индексе, даже если в документе нет индексируемого поля.\n+ _разреженный индекс_ (NoSQL) — тот, в котором представлены только те документы, для которых индексируемый ключ имеет какое-то определённое значение (существует).\n+ _пространственный индекс_ — оптимизирован для описания географического местоположения. Представляет из себя многоключевой индекс состоящий из широты и долготы.\n+ _составной пространственный индекс_ — индекс, включающий в себя кроме широты и долготы ещё какие-либо мета-данные (например теги). Но географические координаты должны стоять на первом месте.\n+ _полнотекстовый (инвертированный) индекс_ — словарь, в котором перечислены все слова и указано, в каких местах они встречаются. При наличии такого индекса достаточно осуществить поиск нужных слов в нём и тогда сразу же будет получен список документов, в которых они встречаются.\n+ _хэш-индекс_ предполагает хранение не самих значений, а их хэшей, благодаря чему уменьшается размер (а, соответственно, и увеличивается скорость их обработки) индексов из больших полей. Таким образом, при запросах с использованием хэш-индексов, сравниваться будут не искомое со значения поля, а хэш от искомого значения с хэшами полей.\nИз-за нелинейнойсти хэш-функций данный индекс нельзя сортировать по значению, что приводит к невозможности использования в сравнениях больше/меньше и «is null». Кроме того, так как хэши не уникальны, то для совпадающих хэшей применяются методы разрешения коллизий.\n+ _битовый индекс (bitmap index)_ — метод битовых индексов заключается в создании отдельных битовых карт (последовательностей 0 и 1) для каждого возможного значения столбца, где каждому биту соответствует запись с индексируемым значением, а его значение равное 1 означает, что запись, соответствующая позиции бита содержит индексируемое значение для данного столбца или свойства.\n+ _обратный индекс (reverse index)_ — B-tree индекс, но с реверсированным ключом, используемый в основном для монотонно возрастающих значений (например, автоинкрементный идентификатор) в OLTP системах с целью снятия конкуренции за последний листовой блок индекса, т.к. благодаря переворачиванию значения две соседние записи индекса попадают в разные блоки индекса. Он не может использоваться для диапазонного поиска.\n+ _функциональный индекс, индекс по вычисляемому полю (function-based index)_ — индекс, ключи которого хранят результат пользовательских функций. Функциональные индексы часто строятся для полей, значения которых проходят предварительную обработку перед сравнением в команде SQL. Например, при сравнении строковых данных без учета регистра символов часто используется функция UPPER. Кроме того, функциональный индекс может помочь реализовать любой другой отсутствующий тип индексов данной СУБД.\n+ _первичный индекс_ — уникальный индекс по полю первичного ключа.\n+ _вторичный индекс_ — индекс по другим полям (кроме поля первичного ключа).\n+ _XML-индекс_ — вырезанное материализованное представление больших двоичных XML-объектов (BLOB) в столбце с типом данных xml.\n\n__По механизму обновления__\n+ _полностью перестраиваемый_ — при добавлении элемента заново перестраивается весь индекс.\n+ _пополняемый (балансируемый)_ — при добавлении элементов индекс перестраивается частично (например, одна из ветви) и периодически балансируется.\n\n__По покрытию индексируемого содержимого__\n+ _полностью покрывающий (полный) индекс_ — покрывает всё содержимое индексируемого объекта.\n+ _частичный индекс (partial index)_ — это индекс, построенный на части набора данных, удовлетворяющей определенному условию самого индекса. Данный индекс создан для уменьшения размера индекса.\n+ _инкрементный (delta) индекс_ — индексируется малая часть данных(дельта), как правило, по истечении определённого времени. Используется при интенсивной записи. Например, полный индекс перестраивается раз в сутки, а дельта-индекс строится каждый час. По сути это частичный индекс по временной метке.\n+ _индекс реального времени (real-time index)_ — особый вид инкрементного индекса, характеризующийся высокой скоростью построения. Предназначен для часто меняющихся данных.\n\n__Индексы в кластерных системах__\n+ _глобальный индекс_ — индекс по всему содержимому всех сегментов БД (shard).\n+ _сегментный индекс_ — глобальный индекс по полю-сегментируемому ключу (shard key). Используется для быстрого определения сегмента, на котором хранятся данные в процессе маршрутизации запроса в кластере БД.\n+ _локальный индекс_ —  индекс по содержимому только одного сегмента БД.\n\n[к оглавлению](#Базы-данных)\n\n## В чем отличие между кластерными и некластерными индексами?\nНекластерные индексы - данные физически расположены в произвольном порядке, но логически упорядочены согласно индексу. Такой тип индексов подходит для часто изменяемого набора данных.\n\nПри кластерном индексировании данные физически упорядочены, что серьезно повышает скорость выборок данных (но только в случае последовательного доступа к данным). Для одного набора данных может быть создан только один кластерный индекс.\n\n[к оглавлению](#Базы-данных)\n\n## Имеет ли смысл индексировать данные, имеющие небольшое количество возможных значений?\nПримерное правило, которым можно руководствоваться при создании индекса - если объем информации (в байтах) НЕ удовлетворяющей условию выборки меньше, чем размер индекса (в байтах) по данному условию выборки, то в общем случае оптимизация приведет к замедлению выборки.\n\n[к оглавлению](#Базы-данных)\n\n## Когда полное сканирование набора данных выгоднее доступа по индексу?\nПолное сканирование производится многоблочным чтением. Сканирование по индексу - одноблочным. Также, при доступе по индексу сначала идет сканирование самого индекса, а затем чтение блоков из набора данных. Число блоков, которые надо при этом прочитать из набора зависит от фактора кластеризации. Если суммарная стоимость всех необходимых одноблочных чтений больше стоимости полного сканирования многоблочным чтением, то полное сканирование выгоднее, и оно выбирается оптимизатором.\n\nТаким образом, полное сканирование выбирается при слабой селективности предикатов запроса и/или слабой кластеризации данных, либо в случае очень маленьких наборов данных.\n\n[к оглавлению](#Базы-данных)\n\n## Что такое _«транзакция»_?\n__Транзакция__ - это воздействие на базу данных, переводящее её из одного целостного состояния в другое и выражаемое в изменении данных, хранящихся в базе данных.\n\n[к оглавлению](#Базы-данных)\n\n## Назовите основные свойства транзакции.\n__Атомарность (atomicity)__ гарантирует, что никакая транзакция не будет зафиксирована в системе частично. Будут либо выполнены все её подоперации, либо не выполнено ни одной. \n\n__Согласованность (consistency)__. Транзакция, достигающая своего нормального завершения и, тем самым, фиксирующая свои результаты, сохраняет согласованность базы данных.\n\n__Изолированность (isolation)__. Во время выполнения транзакции параллельные транзакции не должны оказывать влияние на её результат.\n\n__Долговечность (durability)__. Независимо от проблем на нижних уровнях (к примеру, обесточивание системы или сбои в оборудовании) изменения, сделанные успешно завершённой транзакцией, должны остаться сохранёнными после возвращения системы в работу.\n\n[к оглавлению](#Базы-данных)\n\n## Какие существуют уровни изолированности транзакций?\nВ порядке увеличения изолированности транзакций и, соответственно, надёжности работы с данными:\n\n+ __Чтение неподтверждённых данных (грязное чтение) (read uncommitted, dirty read)__ — чтение незафиксированных изменений как своей транзакции, так и параллельных транзакций. Нет гарантии, что данные, изменённые другими транзакциями, не будут в любой момент изменены в результате их отката, поэтому такое чтение является потенциальным источником ошибок. Невозможны потерянные изменения, возможны неповторяемое чтение и фантомы.\n+ __Чтение подтверждённых данных (read committed)__ — чтение всех изменений своей транзакции и зафиксированных изменений параллельных транзакций. Потерянные изменения и грязное чтение не допускается, возможны неповторяемое чтение и фантомы.\n+ __Повторяемость чтения (repeatable read, snapshot)__ — чтение всех изменений своей транзакции, любые изменения, внесённые параллельными транзакциями после начала своей, недоступны. Потерянные изменения, грязное и неповторяемое чтение невозможны, возможны фантомы.\n+ __Упорядочиваемость (serializable)__ — результат параллельного выполнения сериализуемой транзакции с другими транзакциями должен быть логически эквивалентен результату их какого-либо последовательного выполнения. Проблемы синхронизации не возникают.\n\n[к оглавлению](#Базы-данных)\n\n## Какие проблемы могут возникать при параллельном доступе с использованием транзакций?\nПри параллельном выполнении транзакций возможны следующие проблемы:\n\n+ __Потерянное обновление (lost update)__ — при одновременном изменении одного блока данных разными транзакциями одно из изменений теряется;\n+ __«Грязное» чтение (dirty read)__ — чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится);\n+ __Неповторяющееся чтение (non-repeatable read)__ — при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными;\n+ __Фантомное чтение (phantom reads)__ — одна транзакция в ходе своего выполнения несколько раз выбирает множество записей по одним и тем же критериям. Другая транзакция в интервалах между этими выборками добавляет или удаляет записи или изменяет столбцы некоторых записей, используемых в критериях выборки первой транзакции, и успешно заканчивается. В результате получится, что одни и те же выборки в первой транзакции дают разные множества записей. \nПредположим, имеется две транзакции, открытые различными приложениями, в которых выполнены следующие SQL-операторы:\n\n| Транзакция 1 |\tТранзакция 2 |\n|--------------|--------------|\n| | SELECT SUM(f2) FROM tbl1; |\n| INSERT INTO tbl1 (f1,f2) VALUES (15,20);\t| |\n| COMMIT;\t| |\n| | SELECT SUM(f2) FROM tbl1;|\n\nВ транзакции 2 выполняется SQL-оператор, использующий все значения поля f2. Затем в транзакции 1 выполняется вставка новой строки, приводящая к тому, что повторное выполнение SQL-оператора в транзакции 2 выдаст другой результат. Такая ситуация называется чтением фантома (фантомным чтением). От неповторяющегося чтения оно отличается тем, что результат повторного обращения к данным изменился не из-за изменения/удаления самих этих данных, а из-за появления новых (фантомных) данных.\n\n[к оглавлению](#Базы-данных)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/)\n+ [tokarchuk.ru](http://tokarchuk.ru/2012/08/indexes-classification/)\n+ [Quizful](http://www.quizful.net/interview/sql/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "done.png",
          "type": "blob",
          "size": 1.09375,
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "html.md",
          "type": "blob",
          "size": 15.640625,
          "content": "[Вопросы для собеседования](README.md)\n\n# Основы HTML\n+ [Что такое _«HTML»_?](#Что-такое-html)\n+ [Что такое _«XHTML»_?](#Что-такое-xhtml)\n+ [Что такое `DOCTYPE` и зачем он нужен?](#Что-такое-doctype-и-зачем-он-нужен)\n+ [Для чего предназначен тег `<head>`?](#Для-чего-предназначен-тег-head)\n+ [Чем отличается `<div>` от `<span>`?](#Чем-отличается-div-от-span)\n+ [Как обозначаются комментарии в HTML?](#Как-обозначаются-комментарии-в-html)\n+ [Каким образом задаётся адрес документа, на который следует перейти?](#Каким-образом-задаётся-адрес-документа-на-который-следует-перейти)\n+ [Как сделать ссылку на адрес электронной почты?](#Как-сделать-ссылку-на-адрес-электронной-почты)\n+ [Для чего предназначен тег `<em>`?](#Для-чего-предназначен-тег-em)\n+ [Для чего предназначены теги `<ol>`, `<ul>`, `<li>`?](#Для-чего-предназначены-теги-ol-ul-li)\n+ [Для чего предназначены теги `<dl>`, `<dt>`, `<dd>`?](#Для-чего-предназначены-теги-dl-dt-dd)\n+ [Для чего предназначены теги `<tr>`, `<th>`, `<td>`?](#Для-чего-предназначены-теги-tr-th-td)\n+ [Обязательно ли писать атрибут `alt` в теге `<img>`?](#Обязательно-ли-писать-атрибут-alt-в-теге-img)\n+ [В каком регистре лучше писать HTML-код?](#В-каком-регистре-лучше-писать-html-код)\n+ [Что такое «мнемоника (entity)»?](#Что-такое-мнемоника-entity)\n\n## Что такое _«HTML»_?\n__HTML__, HyperText Markup Language («язык гипертекстовой разметки») — стандартизированный язык разметки документов в WWW. На данный момент актуальна 5 версия этого языка - HTML5.\n\n[к оглавлению](#Основы-html)\n\n## Что такое _«XHTML»_?\n__XHTML__, eXtensible HyperText Markup Language («расширяемый язык гипертекстовой разметки») - более строгий вариант HTML, следующий всем ограничениям XML и, фактически являющийся приложением языка XML к области разметки гипертекста.\n\n[к оглавлению](#Основы-html)\n\n## Что такое `DOCTYPE` и зачем он нужен?\nЭлемент `<!DOCTYPE>` предназначен для указания типа текущего документа. Это необходимо, чтобы браузер понимал, согласно какому стандарту, необходимо интерпретировать данную web-страницу.\n\nСуществует несколько видов `<!DOCTYPE>`, различающихся версией языка, на который они ориентированы:\n\n__HTML 4.01__\n\n+ `<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n\"http://www.w3.org/TR/html4/strict.dtd\">`: строгий синтаксис HTML;\n\n+ `<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"http://www.w3.org/TR/html4/loose.dtd\">`: переходный синтаксис HTML;\n\n+ `<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"\n\"http://www.w3.org/TR/html4/frameset.dtd\">`: HTML с фреймами.\n\n__HTML 5__\n\n+ `<!DOCTYPE html>`: для всех документов.\n\n__XHTML 1.0__\n\n+ `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">`: строгий синтаксис XHTML;\n\n+ `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">`: переходный синтаксис XHTML;\n\n+ `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">`: XHTML с фреймами.\n\n__XHTML 1.1__\n\n+ `<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"\n\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">`: для всех документов.\n\n[к оглавлению](#Основы-html)\n\n## Для чего предназначен тег `<head>`?\nТег `<head>` предназначен для хранения других элементов, цель которых — помочь браузеру в работе с данными. Также внутри этого контейнера находятся _метатеги_, которые используются для хранения информации предназначенной для браузеров и поисковых систем. Например, механизмы поисковых систем обращаются к метатегам для получения описания сайта, ключевых слов и других данных.\n\nСодержимое тега `<head>` не отображается напрямую на web-странице, за исключением тега `<title>` устанавливающего заголовок окна.\n\nВнутри контейнера `<head>` допускается размещать следующие элементы: `<base>`, `<basefont>`, `<bgsound>`, `<link>`, `<meta>`, `<script>`, `<style>`, `<title>`.\n\nСинтаксис:\n\n```html\n<head>\n  ... \n</head>\n```\n\nСпецифические атрибуты:\n\n+ `profile`: указывает адрес профиля метаданных.\n\n[к оглавлению](#Основы-html)\n\n## Чем отличается `<div>` от `<span>`?\n`<div>` - блочный, а `<span>` - строчный элементы. Поэтому `<div>` формирует блок из того, что в нем располагается с новой строки, а `<span>` не переносит элементы, размещая их в строку. Так же стоит отметь, что согласно рекомендациям w3c линейный тег не может включать в себя блочные теги, поэтому `<div>` обычно используется для разметки блоков, а `<span>` - отрывков текста.\n\n[к оглавлению](#Основы-html)\n\n## Как обозначаются комментарии в HTML?\nКомментарий в HTML-коде задаётся так: `<!-- комментарий -->`\n\nКомментарии можно использовать в любом месте страницы, кроме тега `<title>` — внутри него они не работают. Внутри тега `<style>` HTML-комментарии тоже не работают, так как в CSS код комментируется другим способом.\n\n[к оглавлению](#Основы-html)\n\n## Каким образом задаётся адрес документа, на который следует перейти?\nДля создания ссылок на другие документы используется тег `<a>`. В зависимости от присутствия атрибутов `name` или `href` тег `<a>` устанавливает ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри web-страницы.\n\nСинтаксис:\n\n+ `<a href=\"URL\">...</a>`\n+ `<a name=\"идентификатор\">...</a>`\n\nСпецифические атрибуты:\n\n+ `accesskey`: активация ссылки с помощью комбинации клавиш;\n+ `coords`: устанавливает координаты активной области;\n+ `download`: предлагает скачать указанный по ссылке файл;\n+ `href`: задает адрес документа, на который следует перейти. Адрес ссылки может быть абсолютным и относительным. Абсолютные адреса работают везде и всюду независимо от имени сайта или веб-страницы, где прописана ссылка. Относительные ссылки, как следует из их названия, построены относительно текущего документа или корня сайта;\n+ `hreflang`: идентифицирует язык текста по ссылке;\n+ `name`: устанавливает имя якоря внутри документа;\n+ `rel`: отношения между ссылаемым и текущим документами;\n+ `rev`: отношения между текущим и ссылаемым документами;\n+ `shape`: задает форму активной области ссылки для изображений;\n+ `tabindex`: определяет последовательность перехода между ссылками при нажатии на кнопку <kbd>Tab</kbd>;\n+ `target`: имя окна или фрейма, куда браузер будет загружать документ;\n+ `title`: добавляет всплывающую подсказку к тексту ссылки;\n+ `type`: указывает MIME-тип документа, на который ведёт ссылка.\n\n[к оглавлению](#Основы-html)\n\n## Как сделать ссылку на адрес электронной почты?\nСоздание ссылки на адрес электронной почты делается почти также, как и ссылка на web-страницу. Только вместо URL указывается `mailto:\"адрес электронной почты\"`\n\n```html\n<a href=\"mailto:user@address.net\">Напиши мне!</a>\n```\n\n[к оглавлению](#Основы-html)\n\n## Для чего предназначен тег `<em>`?\nТег `<em>` предназначен для акцентирования текста. Браузеры отображают такой текст курсивным начертанием.\n\n```html\n<em>Текст</em>\n```\n\n[к оглавлению](#Основы-html)\n\n\n## Для чего предназначены теги `<ol>`, `<ul>`, `<li>`?\nТеги `<ol>`, `<ul>` и `<li>` предназначены для оформления списков.\n\n+ `<ol>`: нумерованный список, т.е. каждый элемент списка начинается с числа или буквы и увеличивается по нарастающей.\n+ `<ul>`: маркированный список, каждый элемент которого начинается с небольшого символа — маркера.\n+ `<li>`: отдельный элемент списка. Внешний тег `<ul>` или `<ol>` устанавливает тип списка — маркированный или нумерованный.\n\n```html\n<ol>Нумерованый список\n    <li>первый</li>\n    <li>второй</li>\n    <li>третий</li>\n</ol>\n\n<ul>Маркированный список\n    <li>первый</li>\n    <li>второй</li>\n    <li>третий</li>\n</ul>\n```\n\n[к оглавлению](#Основы-html)\n\n\n## Для чего предназначены теги `<dl>`, `<dt>`, `<dd>`?\nТеги `<dl>`, `<dt>`, `<dd>` предназначены для создания списка определений. \n\nКаждый такой список начинается с контейнера `<dl>`, куда входит тег `<dt>` создающий термин и тег `<dd>` задающий определение этого термина. Закрывающий тег `</dd>` не обязателен, поскольку следующий тег сообщает о завершении предыдущего элемента. Тем не менее, хорошим стилем является закрывать все теги.\n\n```html\n<dl>Список определений\n    <dt>Термин</dt>\n    <dd>Определение</dd>\n</dl>\n```\n\n[к оглавлению](#Основы-html)\n\n## Для чего предназначены теги `<tr>`, `<th>`, `<td>`?\n\n`<tr>`: служит контейнером для создания строки таблицы. Каждая ячейка в пределах такой строки может задаваться с помощью тега `<th>` или `<td>`.\n`<th>`: предназначен для создания одной ячейки заголовка таблицы.\n`<td>`: предназначен для создания одной ячейки таблицы.\n\n```html\n<table>\n    <tr>\n        <th>Заголовок</td>\n    </tr>\n    <tr>\n        <td>Строка</td>\n    </tr>\n</table>\n```\n\n[к оглавлению](#Основы-html)\n\n## Обязательно ли писать атрибут `alt` в теге `<img>`?\nДа, писать его обязательно. \n\nАтрибут `alt` устанавливает альтернативный текст для изображений. Такой текст позволяет получить текстовую информацию о рисунке при отключенной в браузере загрузке изображений. Поскольку загрузка изображений происходит после получения браузером информации о нем, то замещающий рисунок текст появляется раньше. А уже по мере загрузки текст будет сменяться изображением.\n\n```html\n<img src=\"forest.jpg\" alt=\"Лес\">\n```\n\n[к оглавлению](#Основы-html)\n\n## В каком регистре лучше писать HTML-код?\nВесь HTML-код рекомендуется писать в нижнем регистре: это относится к названиям элементов, названиям атрибутов, значениям атрибутов (кроме текста/`CDATA`), селекторам, свойствам и их значениям (кроме текста).\n\nНе рекомендуется\n```html\n<A HREF=\"/\">Домой</A>\n```\n\nРекомендуется\n```html\n<img src=\"forest.jpg\" alt=\"Лес\">\n```\n\n[к оглавлению](#Основы-html)\n\n## Что такое «мнемоника (entity)»?\n__Мнемоника (entity)__ - это конструкция из символа `&` и буквенного (или цифрового кода) после нее, предназначенная для замещения символов, которые запрещены для использования в HTML в «явном виде».\n\n>&num; имеет мнемонику `&num;`\n\n[к оглавлению](#Основы-html)\n\n# Источники\n+ [htmlbook](http://htmlbook.ru/html/)\n+ [Хабрахабр](https://habrahabr.ru/post/143452/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "io.md",
          "type": "blob",
          "size": 37.259765625,
          "content": "[Вопросы для собеседования](README.md)\n\n# Потоки ввода/вывода в Java\n+ [В чём заключается разница между IO и NIO?](#В-чём-заключается-разница-между-io-и-nio)\n+ [Какие особенности NIO вы знаете?](#Какие-особенности-nio-вы-знаете)\n+ [Что такое _«каналы»_?](#Что-такое-каналы)\n+ [Какие существуют виды потоков ввода/вывода?](#Какие-существуют-виды-потоков-вводавывода)\n+ [Назовите основные классы потоков ввода/вывода.](#Назовите-основные-классы-потоков-вводавывода)\n+ [В каких пакетах расположены классы потоков ввода/вывода?](#В-каких-пакетах-расположены-классы-потоков-вводавывода)\n+ [Какие подклассы класса `InputStream` вы знаете, для чего они предназначены?](#Какие-подклассы-класса-inputstream-вы-знаете-для-чего-они-предназначены)\n+ [Для чего используется `PushbackInputStream`?](#Для-чего-используется-pushbackinputstream)\n+ [Для чего используется `SequenceInputStream`?](#Для-чего-используется-sequenceinputstream)\n+ [Какой класс позволяет читать данные из входного байтового потока в формате примитивных типов данных?](#Какой-класс-позволяет-читать-данные-из-входного-байтового-потока-в-формате-примитивных-типов-данных)\n+ [Какие подклассы класса `OutputStream` вы знаете, для чего они предназначены?](#Какие-подклассы-класса-outputstream-вы-знаете-для-чего-они-предназначены)\n+ [Какие подклассы класса `Reader` вы знаете, для чего они предназначены?](#Какие-подклассы-класса-reader-вы-знаете-для-чего-они-предназначены)\n+ [Какие подклассы класса `Writer` вы знаете, для чего они предназначены?](#Какие-подклассы-класса-writer-вы-знаете-для-чего-они-предназначены)\n+ [В чем отличие класса `PrintWriter` от `PrintStream`?](#В-чем-отличие-класса-printwriter-от-printstream)\n+ [Чем отличаются и что общего у `InputStream`, `OutputStream`, `Reader`, `Writer`?](#Чем-отличаются-и-что-общего-у-inputstream-outputstream-reader-writer)\n+ [Какие классы позволяют преобразовать байтовые потоки в символьные и обратно?](#Какие-классы-позволяют-преобразовать-байтовые-потоки-в-символьные-и-обратно)\n+ [Какие классы позволяют ускорить чтение/запись за счет использования буфера?](#Какие-классы-позволяют-ускорить-чтениезапись-за-счет-использования-буфера)\n+ [Какой класс предназначен для работы с элементами файловой системы?](#Какой-класс-предназначен-для-работы-с-элементами-файловой-системы)\n+ [Какие методы класса `File` вы знаете?](#Какие-методы-класса-file-вы-знаете)\n+ [Что вы знаете об интерфейсе `FileFilter`?](#Что-вы-знаете-об-интерфейсе-filefilter)\n+ [Как выбрать все элементы определенного каталога по критерию (например, с определенным расширением)?](#Как-выбрать-все-элементы-определенного-каталога-по-критерию-например-с-определенным-расширением)\n+ [Что вы знаете о `RandomAccessFile`?](#Что-вы-знаете-о-randomaccessfile)\n+ [Какие режимы доступа к файлу есть у `RandomAccessFile`?](#Какие-режимы-доступа-к-файлу-есть-у-randomaccessfile)\n+ [Какие классы поддерживают чтение и запись потоков в компрессированном формате?](#Какие-классы-поддерживают-чтение-и-запись-потоков-в-компрессированном-формате)\n+ [Существует ли возможность перенаправить потоки стандартного ввода/вывода?](#Существует-ли-возможность-перенаправить-потоки-стандартного-вводавывода)\n+ [Какой символ является разделителем при указании пути в файловой системе?](#Какой-символ-является-разделителем-при-указании-пути-в-файловой-системе)\n+ [Что такое _«абсолютный путь»_ и _«относительный путь»_?](#Что-такое-абсолютный-путь-и-относительный-путь)\n+ [Что такое _«символьная ссылка»_?](#Что-такое-символьная-ссылка)\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## В чём заключается разница между IO и NIO?\n+ Java IO (input-output) является потокоориентированным, а Java NIO (new/non-blocking io) – буфер-ориентированным. Потокоориентированный ввод/вывод подразумевает чтение/запись из потока/в поток одного или нескольких байт в единицу времени поочередно. Данная информация нигде не кэшируются. Таким образом, невозможно произвольно двигаться по потоку данных вперед или назад. В Java NIO данные сначала считываются в буфер, что дает больше гибкости при обработке данных.\n+ Потоки ввода/вывода в Java IO являются блокирующими. Это значит, что когда в потоке выполнения вызывается `read()` или `write()` метод любого класса из пакета `java.io.*`, происходит блокировка до тех пор, пока данные не будут считаны или записаны. Поток выполнения в данный момент не может делать ничего другого. Неблокирующий режим Java NIO позволяет запрашивать считанные данные из канала (channel) и получать только то, что доступно на данный момент, или вообще ничего, если доступных данных пока нет. Вместо того, чтобы оставаться заблокированным пока данные не станут доступными для считывания, поток выполнения может заняться чем-то другим. Тоже самое справедливо и для неблокирующего вывода. Поток выполнения может запросить запись в канал некоторых данных, но не дожидаться при этом пока они не будут полностью записаны.\n+ В Java NIO имеются селекторы, которые позволяют одному потоку выполнения мониторить несколько каналов ввода. Т.е. существует возможность зарегистрировать несколько каналов с селектором, а потом использовать один поток выполнения для обслуживания каналов, имеющих доступные для обработки данные, или для выбора каналов, готовых для записи.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие особенности NIO вы знаете?\n+ __Каналы и селекторы__: NIO поддерживает различные типы каналов. Канал является абстракцией объектов более низкого уровня файловой системы (например, отображенные в памяти файлы и блокировки файлов), что позволяет передавать данные с более высокой скоростью. Каналы не блокируются и поэтому Java предоставляет еще такие инструменты, как селектор, который позволяет выбрать готовый канал для передачи данных, и сокет, который является инструментом для блокировки.\n+ __Буферы__: имеет буферизация для всех классов-обёрток примитивов (кроме Boolean). Появился абстрактный класс Buffer, который предоставляет такие операции, как clear, flip, mark и т.д. Его подклассы предоставляют методы для получения и установки данных.\n+ __Кодировки__: появились кодеры и декодеры для отображения байт и символов Unicode.\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Что такое _«каналы»_?\nКаналы (channels) – это логические (не физические) порталы, абстракции объектов более низкого уровня файловой системы (например, отображенные в памяти файлы и блокировки файлов), через которые осуществляется ввод/вывод данных, а буферы являются источниками или приёмниками этих переданных данных. При организации вывода, данные, которые необходимо отправить, помещаются в буфер, который затем передается в канал. При вводе, данные из канала помещаются в заранее предоставленный буфер.\n\nКаналы напоминают трубопроводы, по которым эффективно транспортируются данные между буферами байтов и сущностями по ту сторону каналов. Каналы – это шлюзы, которые позволяют получить доступ к сервисам ввода/вывода операционной системы с минимальными накладными расходами, а буферы – внутренние конечные точки этих шлюзов, используемые для передачи и приема данных.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие существуют виды потоков ввода/вывода?\n## Назовите основные классы потоков ввода/вывода.\nРазделяют два вида потоков ввода/вывода: \n\n+ __байтовые__ - `java.io.InputStream`, `java.io.OutputStream`;\n+ __символьные__ - `java.io.Reader`, `java.io.Writer`.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## В каких пакетах расположены классы потоков ввода/вывода?\n`java.io`, `java.nio`. Для работы с потоками компрессированных данных используются классы из пакета `java.util.zip`\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие подклассы класса `InputStream` вы знаете, для чего они предназначены?\n+ `InputStream` - абстрактный класс, описывающий поток ввода;\n+ `BufferedInputStream` - буферизованный входной поток;\n+ `ByteArrayInputStream` позволяет использовать буфер в памяти (массив байтов) в качестве источника данных для входного потока;\n+ `DataInputStream` - входной поток для байтовых данных, включающий методы для чтения стандартных типов данных Java;\n+ `FileInputStream` - входной поток для чтения информации из файла;\n+ `FilterInputStream` - абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства;\n+ `ObjectInputStream` - входной поток для объектов;\n+ `StringBufferInputStream` превращает строку (`String`) во входной поток данных `InputStream`;\n+ `PipedInputStream` реализует понятие входного канала;\n+ `PushbackInputStream` - разновидность буферизации, обеспечивающая чтение байта с последующим его возвратом в поток, позволяет «заглянуть» во входной поток и увидеть, что оттуда поступит в следующий момент, не извлекая информации.\n+ `SequenceInputStream` используется для слияния двух или более потоков `InputStream` в единый.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Для чего используется `PushbackInputStream`?\nРазновидность буферизации, обеспечивающая чтение байта с последующим его возвратом в поток. Класс `PushbackInputStream` представляет механизм «заглянуть» во входной поток и увидеть, что оттуда поступит в следующий момент, не извлекая информации.\n\nУ класса есть дополнительный метод unread().\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Для чего используется `SequenceInputStream`?\nКласс `SequenceInputStream` позволяет сливать вместе несколько экземпляров класса `InputStream`. Конструктор принимает в качестве аргумента либо пару объектов класса `InputStream`, либо интерфейс `Enumeration`.\n\nВо время работы класс выполняет запросы на чтение из первого объекта класса `InputStream` и до конца, а затем переключается на второй. При использовании интерфейса работа продолжится по всем объектам класса `InputStream`. По достижении конца, связанный с ним поток закрывается. Закрытие потока, созданного объектом класса `SequenceInputStream`, приводит к закрытию всех открытых потоков.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какой класс позволяет читать данные из входного байтового потока в формате примитивных типов данных?\nКласс `DataInputStream` представляет поток ввода и предназначен для записи данных примитивных типов, таких, как `int`, `double` и т.д. Для каждого примитивного типа определен свой метод для считывания:\n\n+ `boolean readBoolean()`: считывает из потока булевое однобайтовое значение\n+ `byte readByte()`: считывает из потока 1 байт\n+ `char readChar()`: считывает из потока значение `char`\n+ `double readDouble()`: считывает из потока 8-байтовое значение `double`\n+ `float readFloat()`: считывает из потока 4-байтовое значение `float`\n+ `int readInt()`: считывает из потока целочисленное значение `int`\n+ `long readLong()`: считывает из потока значение `long`\n+ `short readShort()`: считывает значение `short`\n+ `String readUTF()`: считывает из потока строку в кодировке UTF-8\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие подклассы класса `OutputStream` вы знаете, для чего они предназначены?\n+ `OutputStream` - это абстрактный класс, определяющий потоковый байтовый вывод;\n+ `BufferedOutputStream` - буферизированный выходной поток;\n+ `ByteArrayOutputStream` - все данные, посылаемые в этот поток, размещаются в предварительно созданном буфере;\n+ `DataOutputStream` - выходной поток байт, включающий методы для записи стандартных типов данных Java;\n+ `FileOutputStream` - запись данных в файл на физическом носителе;\n+ `FilterOutputStream` - абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства;\n+ `PrintStream` - выходной поток, включающий методы `print()` и `println()`;\n+ `ObjectOutputStream` - выходной поток для записи объектов;\n+ `PipedOutputStream` реализует понятие выходного канала.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие подклассы класса `Reader` вы знаете, для чего они предназначены?\n+ `Reader` - абстрактный класс, описывающий символьный ввод;\n+ `BufferedReader` - буферизованный входной символьный поток;\n+ `CharArrayReader` - входной поток, который читает из символьного массива;\n+ `FileReader` - входной поток, читающий файл;\n+ `FilterReader` - абстрактный класс, предоставляющий интерфейс для классов-надстроек;\n+ `InputStreamReader`- входной поток, транслирующий байты в символы;\n+ `LineNumberReader` - входной поток, подсчитывающий строки;\n+ `PipedReader` - входной канал;\n+ `PushbackReader` - входной поток, позволяющий возвращать символы обратно в поток;\n+ `StringReader` - входной поток, читающий из строки.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие подклассы класса `Writer` вы знаете, для чего они предназначены?\n+ `Writer` - абстрактный класс, описывающий символьный вывод;\n+ `BufferedWriter` - буферизованный выходной символьный поток;\n+ `CharArrayWriter` - выходной поток, который пишет в символьный массив;\n+ `FileWriter` - выходной поток, пишущий в файл;\n+ `FilterWriter` - абстрактный класс, предоставляющий интерфейс для классов-надстроек;\n+ `OutputStreamWriter` - выходной поток, транслирующий байты в символы;\n+ `PipedWriter` - выходной канал;\n+ `PrintWriter` - выходной поток символов, включающий методы `print()` и `println()`;\n+ `StringWriter` - выходной поток, пишущий в строку;\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## В чем отличие класса `PrintWriter` от `PrintStream`?\nПрежде всего, в классе `PrintWriter` применен усовершенствованный способ работы с символами Unicode и другой механизм буферизации вывода: в классе PrintStream буфер вывода сбрасывался всякий раз, когда вызывался метод `print()` или `println()`, а при использовании класса `PrintWriter` существует возможность отказаться от автоматического сброса буферов, выполняя его явным образом при помощи метода `flush()`.\n\nКроме того, методы класса `PrintWriter` никогда не создают исключений. Для проверки ошибок необходимо явно вызвать метод `checkError()`.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Чем отличаются и что общего у `InputStream`, `OutputStream`, `Reader`, `Writer`?\n+ `InputStream` и его наследники - совокупность для получения байтовых данных из различных источников;\n+ `OutputStream` и его наследники - набор классов, определяющих потоковый байтовый вывод;\n+ `Reader` и его наследники определяют потоковый ввод символов Unicode;\n+ `Writer` и его наследники определяют потоковый вывод символов Unicode.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие классы позволяют преобразовать байтовые потоки в символьные и обратно?\n+ `OutputStreamWriter` — «мост» между классом `OutputStream` и классом `Writer`. Символы, записанные в поток, преобразовываются в байты.\n+ `InputStreamReader` — аналог для чтения. При помощи методов класса `Reader` читаются байты из потока `InputStream` и далее преобразуются в символы.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие классы позволяют ускорить чтение/запись за счет использования буфера?\n+ `BufferedInputStream(InputStream in)`/`BufferedInputStream(InputStream in, int size)`,\n+ `BufferedOutputStream(OutputStream out)`/`BufferedOutputStream(OutputStream out, int size)`,\n+ `BufferedReader(Reader r)`/`BufferedReader(Reader in, int sz)`,\n+ `BufferedWriter(Writer out)`/`BufferedWriter(Writer out, int sz)`\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какой класс предназначен для работы с элементами файловой системы?\n`File` работает непосредственно с файлами и каталогами. Данный класс позволяет создавать новые элементы и получать информацию существующих: размер, права доступа, время и дату создания, путь к родительскому каталогу.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие методы класса `File` вы знаете?\nНаиболее используемые методы класса `File`:\n\n+ `boolean createNewFile()`: делает попытку создать новый файл;\n+ `boolean delete()`: делает попытку удалить каталог или файл;\n+ `boolean mkdir()`: делает попытку создать новый каталог;\n+ `boolean renameTo(File dest)`: делает попытку переименовать файл или каталог;\n+ `boolean exists()`: проверяет, существует ли файл или каталог;\n+ `String getAbsolutePath()`: возвращает абсолютный путь для пути, переданного в конструктор объекта;\n+ `String getName()`: возвращает краткое имя файла или каталога;\n+ `String getParent()`: возвращает имя родительского каталога;\n+ `boolean isDirectory()`: возвращает значение `true`, если по указанному пути располагается каталог;\n+ `boolean isFile()`: возвращает значение `true`, если по указанному пути находится файл;\n+ `boolean isHidden()`: возвращает значение `true`, если каталог или файл являются скрытыми;\n+ `long length()`: возвращает размер файла в байтах;\n+ `long lastModified()`: возвращает время последнего изменения файла или каталога;\n+ `String[] list()`: возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге;\n+ `File[] listFiles()`: возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Что вы знаете об интерфейсе `FileFilter`?\nИнтерфейс `FileFilter` применяется для проверки, попадает ли объект `File` под некоторое условие. Этот интерфейс содержит единственный метод `boolean accept(File pathName)`. Этот метод необходимо переопределить и реализовать. Например:\n\n```java\npublic boolean accept(final File file) {\n    return file.isExists() && file.isDirectory();\n}\n```\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Как выбрать все элементы определенного каталога по критерию (например, с определенным расширением)?\nМетод `File.listFiles()` возвращает массив объектов `File`, содержащихся в каталоге. Метод может принимать в качестве параметра объект класса, реализующего `FileFilter`. Это позволяет включить в список только те элементы, для которых метод `accept` возвращает `true` (критерием может быть длина имени файла или его расширение).\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Что вы знаете о `RandomAccessFile`?\nКласс `java.io.RandomAccessFile` обеспечивает чтение и запись данных в произвольном месте файла. Он не является частью иерархии `InputStream` или `OutputStream`. Это полностью отдельный класс, имеющий свои собственные (в большинстве своем _native_) методы. Объяснением этого может быть то, что `RandomAccessFile` имеет во многом отличающееся поведение по сравнению с остальными классами ввода/вывода так как позволяет, в пределах файла, перемещаться вперед и назад.\n\n`RandomAccessFile` имеет такие специфические методы как:\n\n+ `getFilePointer()` для определения текущего местоположения в файле;\n+ `seek()` для перемещения на новую позицию в файле;\n+ `length()` для выяснения размера файла;\n+ `setLength()` для установки размера файла;\n+ `skipBytes()` для того, чтобы попытаться пропустить определённое число байт;\n+ `getChannel()` для работы с уникальным файловым каналом, ассоциированным с заданным файлом;\n+ методы для выполнения обычного и форматированного вывода из файла (`read()`, `readInt()`, `readLine()`, `readUTF()` и т.п.);\n+ методы для обычной или форматированной записи в файл с прямым доступом (`write()`, `writeBoolean()`, `writeByte()` и т.п.).\n\nТак же следует отметить, что конструкторы `RandomAccessFile` требуют второй аргумент, указывающий необходимый режим доступа к файлу - только чтение (`\"r\"`), чтение и запись (`\"rw\"`) или иную их разновидность.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие режимы доступа к файлу есть у `RandomAccessFile`?\n+ `\"r\"` открывает файл только для чтения. Запуск любых методов записи данных приведет к выбросу исключения `IOException`.\n+ `\"rw\"` открывает файл для чтения и записи. Если файл еще не создан, то осуществляется попытка создать его.\n+ `\"rws\"` открывает файл для чтения и записи подобно `\"rw\"`, но требует от системы при каждом изменении содержимого файла или метаданных синхронно записывать эти изменения на физический носитель.\n+ `\"rwd\"` открывает файл для чтения и записи подобно `\"rws\"`, но требует от системы синхронно записывать изменения на физический носитель только при каждом изменении содержимого файла. Если изменяются метаданные, синхронная запись не требуется.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какие классы поддерживают чтение и запись потоков в компрессированном формате?\n+ `DeflaterOutputStream` - компрессия данных в формате deflate.\n+ `Deflater` - компрессия данных в формат ZLIB\n+ `ZipOutputStream` - потомок `DeflaterOutputStream` для компрессии данных в формат Zip.\n+ `GZIPOutputStream` - потомок `DeflaterOutputStream` для компрессии данных в формат GZIP.\n+ `InflaterInputStream` - декомпрессия данных в формате deflate.\n+ `Inflater` - декомпрессия данных в формате ZLIB\n+ `ZipInputStream` - потомок `InflaterInputStream` для декомпрессии данных в формате Zip.\n+ `GZIPInputStream` - потомок `InflaterInputStream` для декомпрессии данных в формате GZIP.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Существует ли возможность перенаправить потоки стандартного ввода/вывода?\nКласс `System` позволяет вам перенаправлять стандартный ввод, вывод и поток вывода ошибок, используя простой вызов статического метода:\n\n+ `setIn(InputStream)` - для ввода;\n+ `setOut(PrintStream)` - для вывода;\n+ `setErr(PrintStream)` - для вывода ошибок.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Какой символ является разделителем при указании пути в файловой системе?\nДля различных операционных систем символ разделителя различается. Для Windows это `\\`, для Linux - `/`. \n\nВ Java получить разделитель для текущей операционной системы можно через обращение к статическому полю `File.separator`.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Что такое _«абсолютный путь»_ и _«относительный путь»_?\n__Абсолютный (полный) путь__ — это путь, который указывает на одно и то же место в файловой системе, вне зависимости от текущей рабочей директории или других обстоятельств. Полный путь всегда начинается с корневого каталога. \n\n__Относительный путь__ представляет собой путь по отношению к текущему рабочему каталогу пользователя или активного приложения.\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n## Что такое _«символьная ссылка»_?\n__Символьная (символическая) ссылка__ (также «симлинк», Symbolic link) — специальный файл в файловой системе, в котором, вместо пользовательских данных, содержится путь к файлу, который должен быть открыт при попытке обратиться к данной ссылке (файлу). Целью ссылки может быть любой объект: например, другая ссылка, файл, каталог или даже несуществующий файл (в последнем случае, при попытке открыть его, должно выдаваться сообщение об отсутствии файла).\n\nСимвольные ссылки используются для более удобной организации структуры файлов на компьютере, так как:\n\n+ позволяют для одного файла или каталога иметь несколько имён и различных атрибутов;\n+ свободны от некоторых ограничений, присущих жёстким ссылкам (последние действуют только в пределах одной файловой системы (одного раздела) и не могут ссылаться на каталоги).\n\n[к оглавлению](#Потоки-вводавывода-в-java)\n\n# Источники\n+ [Quizful](http://www.quizful.net/post/java-nio-tutorial)\n+ [Хабрахабр](https://habrahabr.ru/post/235585/)\n+ [Освой программирование играючи](http://developer.alexanderklimov.ru/android/java/io.php)\n+ [Metanit](http://metanit.com/java/tutorial/6.1.php)\n+ [javastudy.ru](http://javastudy.ru/interview/input-output/)\n+ [Bruce Eckel «Thinking in Java»](http://iais.kemsu.ru/odocs/java/Chapter11.html)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "java8.md",
          "type": "blob",
          "size": 69.2646484375,
          "content": "[Вопросы для собеседования](README.md)\n\n# Java 8\n+ [Какие нововведения, появились в Java 8 и JDK 8?](#Какие-нововведения-появились-в-java-8-и-jdk-8)\n+ [Что такое _«лямбда»_? Какова структура и особенности использования лямбда-выражения?](#Что-такое-лямбда-Какова-структура-и-особенности-использования-лямбда-выражения)\n+ [К каким переменным есть доступ у лямбда-выражений?](#К-каким-переменным-есть-доступ-у-лямбда-выражений)\n+ [Как отсортировать список строк с помощью лямбда-выражения?](#Как-отсортировать-список-строк-с-помощью-лямбда-выражения)\n+ [Что такое «ссылка на метод»?](#Что-такое-ссылка-на-метод)\n+ [Какие виды ссылок на методы вы знаете?](#Какие-виды-ссылок-на-методы-вы-знаете)\n+ [Объясните выражение `System.out::println`.](#Объясните-выражение-systemoutprintln)\n+ [Что такое «функциональные интерфейсы»?](#Что-такое-функциональные-интерфейсы)\n+ [Для чего нужны функциональные интерфейсы `Function<T,R>`, `DoubleFunction<R>`, `IntFunction<R>` и `LongFunction<R>`?](#Для-чего-нужны-функциональные-интерфейсы-functiontr-doublefunctionr-intfunctionr-и-longfunctionr)\n+ [Для чего нужны функциональные интерфейсы `UnaryOperator<T>`, `DoubleUnaryOperator`, `IntUnaryOperator` и `LongUnaryOperator`?](#Для-чего-нужны-функциональные-интерфейсы-unaryoperatort-doubleunaryoperator-intunaryoperator-и-longunaryoperator)\n+ [Для чего нужны функциональные интерфейсы `BinaryOperator<T>`, `DoubleBinaryOperator`, `IntBinaryOperator` и `LongBinaryOperator`?](#Для-чего-нужны-функциональные-интерфейсы-binaryoperatort-doublebinaryoperator-intbinaryoperator-и-longbinaryoperator)\n+ [Для чего нужны функциональные интерфейсы `Predicate<T>`, `DoublePredicate`, `IntPredicate` и `LongPredicate`?](#Для-чего-нужны-функциональные-интерфейсы-predicatet-doublepredicate-intpredicate-и-longpredicate)\n+ [Для чего нужны функциональные интерфейсы `Consumer<T>`, `DoubleConsumer`, `IntConsumer` и `LongConsumer`?](#Для-чего-нужны-функциональные-интерфейсы-consumert-doubleconsumer-intconsumer-и-longconsumer)\n+ [Для чего нужны функциональные интерфейсы `Supplier<T>`,  `BooleanSupplier`, `DoubleSupplier`, `IntSupplier` и `LongSupplier`?](#Для-чего-нужны-функциональные-интерфейсы-suppliert--booleansupplier-doublesupplier-intsupplier-и-longsupplier)\n+ [Для чего нужен функциональный интерфейс `BiConsumer<T,U>`?](#Для-чего-нужен-функциональный-интерфейс-biconsumertu)\n+ [Для чего нужен функциональный интерфейс `BiFunction<T,U,R>`?](#Для-чего-нужен-функциональный-интерфейс-bifunctiontur)\n+ [Для чего нужен функциональный интерфейс `BiPredicate<T,U>`?](#Для-чего-нужен-функциональный-интерфейс-bipredicatetu)\n+ [Для чего нужны функциональные интерфейсы вида `_To_Function`?](#Для-чего-нужны-функциональные-интерфейсы-вида-tofunction)\n+ [Для чего нужны функциональные интерфейсы `ToDoubleBiFunction<T,U>`, `ToIntBiFunction<T,U>` и `ToLongBiFunction<T,U>`?](#Для-чего-нужны-функциональные-интерфейсы-todoublebifunctiontu-tointbifunctiontu-и-tolongbifunctiontu)\n+ [Для чего нужны функциональные интерфейсы `ToDoubleFunction<T>`, `ToIntFunction<T>` и `ToLongFunction<T>`?](#Для-чего-нужны-функциональные-интерфейсы-todoublefunctiont-tointfunctiont-и-tolongfunctiont)\n+ [Для чего нужны функциональные интерфейсы `ObjDoubleConsumer<T>`, `ObjIntConsumer<T>` и `ObjLongConsumer<T>`?](#Для-чего-нужны-функциональные-интерфейсы-objdoubleconsumert-objintconsumert-и-objlongconsumert)\n+ [Что такое `StringJoiner`?](#Что-такое-stringjoiner)\n+ [Что такое `default` методы интрефейса?](#Что-такое-default-методы-интрефейса)\n+ [Как вызывать `default` метод интерфейса в реализующем этот интерфейс классе?](#Как-вызывать-default-метод-интерфейса-в-реализующем-этот-интерфейс-классе)\n+ [Что такое `static` метод интерфейса?](#Что-такое-static-метод-интерфейса)\n+ [Как вызывать `static` метод интерфейса?](#Как-вызывать-static-метод-интерфейса)\n+ [Что такое `Optional`?](#Что-такое-optional)\n+ [Что такое `Stream`?](#Что-такое-stream)\n+ [Какие существуют способы создания стрима?](#Какие-существуют-способы-создания-стрима)\n+ [В чем разница между `Collection` и `Stream`?](#В-чем-разница-между-collection-и-stream)\n+ [Для чего нужен метод `collect()` в стримах?](#Для-чего-нужен-метод-collect-в-стримах)\n+ [Для чего в стримах применяются методы `forEach()` и `forEachOrdered()`?](#Для-чего-в-стримах-применяются-методы-foreach-и-foreachordered)\n+ [Для чего в стримах предназначены методы `map()` и `mapToInt()`, `mapToDouble()`, `mapToLong()`?](#Для-чего-в-стримах-предназначены-методы-map-и-maptoint-maptodouble-maptolong)\n+ [Какова цель метода `filter()` в стримах?](#Какова-цель-метода-filter-в-стримах)\n+ [Для чего в стримах предназначен метод `limit()`?](#Для-чего-в-стримах-предназначен-метод-limit)\n+ [Для чего в стримах предназначен метод `sorted()`?](#Для-чего-в-стримах-предназначен-метод-sorted)\n+ [Для чего в стримах предназначены методы `flatMap()`, `flatMapToInt()`, `flatMapToDouble()`, `flatMapToLong()`?](#Для-чего-в-стримах-предназначены-методы-flatmap-flatmaptoint-flatmaptodouble-flatmaptolong)\n+ [Расскажите о параллельной обработке в Java 8.](#Расскажите-о-параллельной-обработке-в-java-8)\n+ [Какие конечные методы работы со стримами вы знаете?](#Какие-конечные-методы-работы-со-стримами-вы-знаете)\n+ [Какие промежуточные методы работы со стримами вы знаете?](#Какие-промежуточные-методы-работы-со-стримами-вы-знаете)\n+ [Как вывести на экран 10 случайных чисел, используя `forEach()`?](#Как-вывести-на-экран-10-случайных-чисел-используя-foreach)\n+ [Как можно вывести на экран уникальные квадраты чисел используя метод `map()`?](#Как-можно-вывести-на-экран-уникальные-квадраты-чисел-используя-метод-map)\n+ [Как вывести на экран количество пустых строк с помощью метода `filter()`?](#Как-вывести-на-экран-количество-пустых-строк-с-помощью-метода-filter)\n+ [Как вывести на экран 10 случайных чисел в порядке возрастания?](#Как-вывести-на-экран-10-случайных-чисел-в-порядке-возрастания)\n+ [Как найти максимальное число в наборе?](#Как-найти-максимальное-число-в-наборе)\n+ [Как найти минимальное число в наборе?](#Как-найти-минимальное-число-в-наборе)\n+ [Как получить сумму всех чисел в наборе?](#Как-получить-сумму-всех-чисел-в-наборе)\n+ [Как получить среднее значение всех чисел?](#Как-получить-среднее-значение-всех-чисел)\n+ [Какие дополнительные методы для работы с ассоциативными массивами (maps) появились в Java 8?](#Какие-дополнительные-методы-для-работы-с-ассоциативными-массивами-maps-появились-в-java-8)\n+ [Что такое `LocalDateTime`?](#Что-такое-localdatetime)\n+ [Что такое `ZonedDateTime`?](#Что-такое-zoneddatetime)\n+ [Как получить текущую дату с использованием Date Time API из Java 8?](#Как-получить-текущую-дату-с-использованием-date-time-api-из-java-8)\n+ [Как добавить 1 неделю, 1 месяц, 1 год, 10 лет к текущей дате с использованием Date Time API?](#Как-добавить-1-неделю-1-месяц-1-год-10-лет-к-текущей-дате-с-использованием-date-time-api)\n+ [Как получить следующий вторник используя Date Time API?](#Как-получить-следующий-вторник-используя-date-time-api)\n+ [Как получить вторую субботу текущего месяца используя Date Time API?](#Как-получить-вторую-субботу-текущего-месяца-используя-date-time-api)\n+ [Как получить текущее время с точностью до миллисекунд используя Date Time API?](#Как-получить-текущее-время-с-точностью-до-миллисекунд-используя-date-time-api)\n+ [Как получить текущее время по местному времени с точностью до миллисекунд используя Date Time API?](#Как-получить-текущее-время-по-местному-времени-с-точностью-до-миллисекунд-используя-date-time-api)\n+ [Как определить повторяемую аннотацию?](#Как-определить-повторяемую-аннотацию)\n+ [Что такое `Nashorn`?](#Что-такое-nashorn)\n+ [Что такое `jjs`?](#Что-такое-jjs)\n+ [Какой класс появился в Java 8 для кодирования/декодирования данных?](#Какой-класс-появился-в-java-8-для-кодированиядекодирования-данных)\n+ [Как создать Base64 кодировщик и декодировщик?](#Как-создать-base64-кодировщик-и-декодировщик)\n\n## Какие нововведения, появились в Java 8 и JDK 8?\n+ Методы интерфейсов по умолчанию;\n+ Лямбда-выражения;\n+ Функциональные интерфейсы;\n+ Ссылки на методы и конструкторы;\n+ Повторяемые аннотации;\n+ Аннотации на типы данных;\n+ Рефлексия для параметров методов;\n+ _Stream API_ для работы с коллекциями;\n+ Параллельная сортировка массивов;\n+ Новое API для работы с датами и временем;\n+ Новый движок JavaScript _Nashorn_;\n+ Добавлено несколько новых классов для потокобезопасной работы;\n+ Добавлен новый API для `Calendar` и `Locale`;\n+ Добавлена поддержка _Unicode 6.2.0_;\n+ Добавлен стандартный класс для работы с _Base64_;\n+ Добавлена поддержка беззнаковой арифметики;\n+ Улучшена производительность конструктора `java.lang.String(byte[], *)` и метода `java.lang.String.getBytes()`;\n+ Новая реализация `AccessController.doPrivileged`, позволяющая устанавливать подмножество привилегий без необходимости проверки всех остальных уровней доступа;\n+ _Password-based_ алгоритмы стали более устойчивыми;\n+ Добавлена поддержка _SSL/TLS Server Name Indication (NSI)_ в _JSSE Server_;\n+ Улучшено хранилище ключей (KeyStore);\n+ Добавлен алгоритм _SHA-224_;\n+ Удален мост _JDBC - ODBC_;\n+ Удален _PermGen_, изменен способ хранения мета-данных классов;\n+ Возможность создания профилей для платформы Java SE, которые включают в себя не всю платформу целиком, а некоторую ее часть;\n+ Инструментарий\n    + Добавлена утилита `jjs` для использования _JavaScript Nashorn_;\n    + Команда `java` может запускать _JavaFX_ приложения;\n    + Добавлена утилита `jdeps` для анализа _.class_-файлов.\n\n[к оглавлению](#java-8)\n\n## Что такое _«лямбда»_? Какова структура и особенности использования лямбда-выражения?\n__Лямбда__ представляет собой набор инструкций, которые можно выделить в отдельную переменную и затем многократно вызвать в различных местах программы.\n\nОснову лямбда-выражения составляет _лямбда-оператор_, который представляет стрелку `->`. Этот оператор разделяет лямбда-выражение на две части: левая часть содержит список параметров выражения, а правая, собственно, представляет тело лямбда-выражения, где выполняются все действия.\n\nЛямбда-выражение не выполняется само по себе, а образует реализацию метода, определенного в функциональном интерфейсе. При этом важно, что функциональный интерфейс должен содержать только один единственный метод без реализации.\n\n```java\ninterface Operationable {\n    int calculate(int x, int y);\n}\n\npublic static void main(String[] args) {\n    Operationable operation = (x, y) -> x + y;     \n    int result = operation.calculate(10, 20);\n    System.out.println(result); //30\n}\n```\n\nПо факту лямбда-выражения являются в некотором роде сокращенной формой внутренних анонимных классов, которые ранее применялись в Java.\n\n+ _Отложенное выполнение (deferred execution) лямбда-выражения_- определяется один раз в одном месте программы, вызываются при необходимости, любое количество раз и в произвольном месте программы.\n\n+ _Параметры лямбда-выражения_ должны соответствовать по типу параметрам метода функционального интерфейса:\n\n```java\noperation = (int x, int y) -> x + y;\n//При написании самого лямбда-выражения тип параметров разрешается не указывать:\n(x, y) -> x + y;\n//Если метод не принимает никаких параметров, то пишутся пустые скобки, например,\n() -> 30 + 20;\n//Если метод принимает только один параметр, то скобки можно опустить:\nn -> n * n;\n```\n\n+ _Конечные лямбда-выражения_ не обязаны возвращать какое-либо значение.\n\n```java\ninterface Printable {\n    void print(String s);\n}\n \npublic static void main(String[] args) {\n    Printable printer = s -> System.out.println(s);\n    printer.print(\"Hello, world\");\n}\n```\n\n+ _Блочные лямбда-выражения_ обрамляются фигурными скобками. В блочных лямбда-выражениях можно использовать внутренние вложенные блоки, циклы, конструкции `if`, `switch`, создавать переменные и т.д. Если блочное лямбда-выражение должно возвращать значение, то явным образом применяется оператор `return`:\n\n```java\nOperationable operation = (int x, int y) -> {       \n    if (y == 0) {\n        return 0;\n    }\n    else {\n        return x / y;\n    }\n};\n```\n\n+ _Передача лямбда-выражения в качестве параметра метода_:\n\n```java\ninterface Condition {\n    boolean isAppropriate(int n);\n}\n\nprivate static int sum(int[] numbers, Condition condition) {\n    int result = 0;\n    for (int i : numbers) {\n        if (condition.isAppropriate(i)) {\n            result += i;\n        }\n    }\n    return result;\n}\n\npublic static void main(String[] args) {\n    System.out.println(sum(new int[] {0, 1, 0, 3, 0, 5, 0, 7, 0, 9}, (n) -> n != 0));\n} \n```\n\n[к оглавлению](#java-8)\n\n## К каким переменным есть доступ у лямбда-выражений?\nДоступ к переменным внешней области действия из лямбда-выражения очень схож к доступу из анонимных объектов. Можно ссылаться на:\n\n+ неизменяемые (_effectively final_ - не обязательно помеченные как `final`) локальные переменные;\n+ поля класса;\n+ статические переменные.\n\nК методам по умолчанию реализуемого функционального интерфейса обращаться внутри лямбда-выражения запрещено.\n\n[к оглавлению](#java-8)\n\n## Как отсортировать список строк с помощью лямбда-выражения?\n```java\npublic static List<String> sort(List<String> list){\n    Collections.sort(list, (a, b) -> a.compareTo(b));\n    return list;\n}\n```\n\n[к оглавлению](#java-8)\n\n## Что такое «ссылка на метод»?\nЕсли существующий в классе метод уже делает все, что необходимо, то можно воспользоваться механизмом __method reference (ссылка на метод)__ для непосредственной передачи этого метода. Такая ссылка передается в виде:\n\n+ `имя_класса::имя_статического_метода` для статического метода;\n+ `объект_класса::имя_метода` для метода экземпляра;\n+ `название_класса::new` для конструктора.\n\nРезультат будет в точности таким же, как в случае определения лямбда-выражения, которое вызывает этот метод.\n\n```java\nprivate interface Measurable {\n    public int length(String string);\n}\n\npublic static void main(String[] args) {\n    Measurable a = String::length;\n    System.out.println(a.length(\"abc\"));\n}\n```\n\nСсылки на методы потенциально более эффективны, чем использование лямбда-выражений. Кроме того, они предоставляют компилятору более качественную информацию о типе и при возможности выбора между использованием ссылки на существующий метод и использованием лямбда-выражения, следует всегда предпочитать использование ссылки на метод.\n\n[к оглавлению](#java-8)\n\n## Какие виды ссылок на методы вы знаете?\n+ на статический метод;\n+ на метод экземпляра;\n+ на конструкторе.\n\n[к оглавлению](#java-8)\n\n## Объясните выражение `System.out::println`.\nДанное выражение иллюстрирует механизм _instance method reference_: передачи ссылки на метод `println()` статического поля `out` класса `System`.\n\n[к оглавлению](#java-8)\n\n## Что такое «функциональные интерфейсы»?\n__Функциональный интерфейс__ - это интерфейс, который определяет только один абстрактный метод. \n\nЧтобы точно определить интерфейс как функциональный, добавлена аннотация `@FunctionalInterface`, работающая по принципу `@Override`. Она обозначит замысел и не даст определить второй абстрактный метод в интерфейсе.\n\nИнтерфейс может включать сколько угодно `default` методов и при этом оставаться функциональным, потому что `default` методы - не абстрактные.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `Function<T,R>`, `DoubleFunction<R>`, `IntFunction<R>` и `LongFunction<R>`?\n__`Function<T, R>`__ - интерфейс, с помощью которого реализуется функция, получающая на вход экземпляр класса `T` и возвращающая на выходе экземпляр класса `R`.\n\nМетоды по умолчанию могут использоваться для построения цепочек вызовов (`compose`, `andThen`).\n\n```java\nFunction<String, Integer> toInteger = Integer::valueOf;\nFunction<String, String> backToString = toInteger.andThen(String::valueOf);\nbackToString.apply(\"123\");     // \"123\"\n```\n\n+ `DoubleFunction<R>` - функция, получающая на вход `Double` и возвращающая на выходе экземпляр класса `R`;\n+ `IntFunction<R>` - функция, получающая на вход `Integer` и возвращающая на выходе экземпляр класса `R`;\n+ `LongFunction<R>` - функция, получающая на вход `Long` и возвращающая на выходе экземпляр класса `R`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `UnaryOperator<T>`, `DoubleUnaryOperator`, `IntUnaryOperator` и `LongUnaryOperator`?\n__`UnaryOperator<T>` (унарный оператор)__ принимает в качестве параметра объект типа `T`, выполняет над ними операции и возвращает результат операций в виде объекта типа `T`:\n\n```java\nUnaryOperator<Integer> operator = x -> x * x;\nSystem.out.println(operator.apply(5)); // 25\n```\n\n+ `DoubleUnaryOperator` - унарный оператор, получающий на вход `Double`;\n+ `IntUnaryOperator` - унарный оператор, получающий на вход `Integer`;\n+ `LongUnaryOperator` - унарный оператор, получающий на вход `Long`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `BinaryOperator<T>`, `DoubleBinaryOperator`, `IntBinaryOperator` и `LongBinaryOperator`?\n__`BinaryOperator<T>` (бинарный оператор)__ - интерфейс, с помощью которого реализуется функция, получающая на вход два экземпляра класса `T` и возвращающая на выходе экземпляр класса `T`.\n```java\nBinaryOperator<Integer> operator = (a, b) -> a + b;\nSystem.out.println(operator.apply(1, 2)); // 3\n```\n\n+ `DoubleBinaryOperator` - бинарный оператор, получающий на вход `Double`;\n+ `IntBinaryOperator` - бинарный оператор, получающий на вход `Integer`;\n+ `LongBinaryOperator` - бинарный оператор, получающий на вход `Long`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `Predicate<T>`, `DoublePredicate`, `IntPredicate` и `LongPredicate`?\n__`Predicate<T>` (предикат)__ - интерфейс, с помощью которого реализуется функция, получающая на вход экземпляр класса `T` и возвращающая на выходе значение типа `boolean`. \n\nИнтерфейс содержит различные методы по умолчанию, позволяющие строить сложные условия (`and`, `or`, `negate`).\n\n```java\nPredicate<String> predicate = (s) -> s.length() > 0;\npredicate.test(\"foo\"); // true\npredicate.negate().test(\"foo\"); // false\n```\n\n+ `DoublePredicate` - предикат, получающий на вход `Double`;\n+ `IntPredicate` - предикат, получающий на вход `Integer`;\n+ `LongPredicate` - предикат, получающий на вход `Long`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `Consumer<T>`, `DoubleConsumer`, `IntConsumer` и `LongConsumer`?\n__`Consumer<T>` (потребитель)__ - интерфейс, с помощью которого реализуется функция, которая получает на вход экземпляр класса `T`, производит с ним некоторое действие и ничего не возвращает.\n\n```java\nConsumer<String> hello = (name) -> System.out.println(\"Hello, \" + name);\nhello.accept(\"world\");\n```\n\n+ `DoubleConsumer` - потребитель, получающий на вход `Double`;\n+ `IntConsumer` - потребитель, получающий на вход `Integer`;\n+ `LongConsumer` - потребитель, получающий на вход `Long`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `Supplier<T>`,  `BooleanSupplier`, `DoubleSupplier`, `IntSupplier` и `LongSupplier`?\n__`Supplier<T>` (поставщик)__ - интерфейс, с помощью которого реализуется функция, ничего не принимающая на вход, но возвращающая на выход результат класса `T`;\n\n```java\nSupplier<LocalDateTime> now = LocalDateTime::now;\nnow.get();\n```\n\n+ `DoubleSupplier` - поставщик, возвращающий `Double`;\n+ `IntSupplier` - поставщик, возвращающий `Integer`;\n+ `LongSupplier` - поставщик, возвращающий `Long`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужен функциональный интерфейс `BiConsumer<T,U>`?\n__`BiConsumer<T,U>`__ представляет собой операцию, которая принимает два аргумента классов `T` и `U` производит с ними некоторое действие и ничего не возвращает.\n\n[к оглавлению](#java-8)\n\n## Для чего нужен функциональный интерфейс `BiFunction<T,U,R>`?\n__`BiFunction<T,U,R>`__ представляет собой операцию, которая принимает два аргумента классов `T` и `U` и возвращающая результат класса `R`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужен функциональный интерфейс `BiPredicate<T,U>`?\n__`BiPredicate<T,U>`__ представляет собой операцию, которая принимает два аргумента классов `T` и `U` и возвращающая результат типа `boolean`. \n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы вида `_To_Function`?\n+ `DoubleToIntFunction` - операция, принимающая аргумент класса `Double` и возвращающая результат типа `Integer`;\n+ `DoubleToLongFunction` - операция, принимающая аргумент класса `Double` и возвращающая результат типа `Long`;\n+ `IntToDoubleFunction` - операция, принимающая аргумент класса `Integer` и возвращающая результат типа `Double`; \n+ `IntToLongFunction` - операция, принимающая аргумент класса `Integer` и возвращающая результат типа `Long`;\n+ `LongToDoubleFunction` - операция, принимающая аргумент класса `Long` и возвращающая результат типа `Double`;\n+ `LongToIntFunction` - операция, принимающая аргумент класса `Long` и возвращающая результат типа `Integer`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `ToDoubleBiFunction<T,U>`, `ToIntBiFunction<T,U>` и `ToLongBiFunction<T,U>`?\n+ `ToDoubleBiFunction<T,U>` - операция принимающая два аргумента классов `T` и `U` и возвращающая результат типа `Double`;\n+ `ToLongBiFunction<T,U>` - операция принимающая два аргумента классов `T` и `U` и возвращающая результат типа `Long`;\n+ `ToIntBiFunction<T,U>`  - операция принимающая два аргумента классов `T` и `U` и возвращающая результат типа `Integer`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `ToDoubleFunction<T>`, `ToIntFunction<T>` и `ToLongFunction<T>`?\n+ `ToDoubleFunction<T>` - операция, принимающая аргумент класса `T` и возвращающая результат типа `Double`;\n+ `ToLongFunction<T>` - операция, принимающая аргумент класса `T` и возвращающая результат типа `Long`;\n+ `ToIntFunction<T>` - операция, принимающая аргумент класса `T` и возвращающая результат типа `Integer`.\n\n[к оглавлению](#java-8)\n\n## Для чего нужны функциональные интерфейсы `ObjDoubleConsumer<T>`, `ObjIntConsumer<T>` и `ObjLongConsumer<T>`?\n+ `ObjDoubleConsumer<T>` - операция, которая принимает два аргумента классов `T` и `Double`, производит с ними некоторое действие и ничего не возвращает;\n+ `ObjLongConsumer<T>` - операция, которая принимает два аргумента классов `T` и `Long`, производит с ними некоторое действие и ничего не возвращает;\n+ `ObjIntConsumer<T>` - операция, которая принимает два аргумента классов `T` и `Integer`, производит с ними некоторое действие и ничего не возвращает.\n\n[к оглавлению](#java-8)\n\n## Что такое `StringJoiner`?\nКласс `StringJoiner` используется, чтобы создать последовательность строк, разделенных разделителем с возможностью присоединить к полученной строке префикс и суффикс:\n\n```java\nStringJoiner joiner = new StringJoiner(\".\", \"prefix-\", \"-suffix\");\nfor (String s : \"Hello the brave world\".split(\" \")) {\n    joiner.add(s);\n}\nSystem.out.println(joiner); //prefix-Hello.the.brave.world-suffix\n```\n\n[к оглавлению](#java-8)\n\n## Что такое `default` методы интрефейса?\nJava 8 позволяет добавлять неабстрактные реализации методов в интерфейс, используя ключевое слово `default`:\n\n```java\ninterface Example {\n    int process(int a);\n    default void show() {\n        System.out.println(\"default show()\");\n    }\n}\n```\n\n+ Если класс реализует интерфейс, он может, но не обязан, реализовать методы по-умолчанию, уже реализованные в интерфейсе. Класс наследует реализацию по умолчанию.\n+ Если некий класс реализует несколько интерфейсов, которые имеют одинаковый метод по умолчанию, то класс должен реализовать метод с совпадающей сигнатурой самостоятельно. Ситуация аналогична, если один интерфейс имеет метод по умолчанию, а в другом этот же метод является абстрактным - никакой реализации по умолчанию классом не наследуется.\n+ Метод по умолчанию не может переопределить метод класса `java.lang.Object`.\n+ Помогают реализовывать интерфейсы без страха нарушить работу других классов.\n+ Позволяют избежать создания служебных классов, так как все необходимые методы могут быть представлены в самих интерфейсах.\n+ Дают свободу классам выбрать метод, который нужно переопределить.\n+ Одной из основных причин внедрения методов по умолчанию является возможность коллекций в Java 8 использовать лямбда-выражения.\n\n[к оглавлению](#java-8)\n\n## Как вызывать `default` метод интерфейса в реализующем этот интерфейс классе?\nИспользуя ключевое слово `super` вместе с именем интерфейса:\n\n```java\ninterface Paper {\n    default void show() {\n        System.out.println(\"default show()\");\n    }\n}\n\nclass Licence implements Paper {\n    public void show() {\n        Paper.super.show();\n    }\n}\n```\n\n[к оглавлению](#java-8)\n\n## Что такое `static` метод интерфейса?\nСтатические методы интерфейса похожи на методы по умолчанию, за исключением того, что для них отсутствует возможность переопределения в классах, реализующих интерфейс.\n\n+ Статические методы в интерфейсе являются частью интерфейса без возможности переопределить их для объектов класса реализации;\n+ Методы класса `java.lang.Object` нельзя переопределить как статические;\n+ Статические методы в интерфейсе используются для обеспечения вспомогательных методов, например, проверки на null, сортировки коллекций и т.д.\n\n[к оглавлению](#java-8)\n\n## Как вызывать `static` метод интерфейса?\nИспользуя имя интерфейса:\n\n```java\ninterface Paper {\n    static void show() {\n        System.out.println(\"static show()\");\n    }\n}\n\nclass Licence {\n    public void showPaper() {\n        Paper.show();\n    }\n}\n```\n\n[к оглавлению](#java-8)\n\n## Что такое `Optional`?\nОпциональное значение `Optional` — это контейнер для объекта, который может содержать или не содержать значение `null`. Такая обёртка является удобным средством предотвращения `NullPointerException`, т.к.\nимеет некоторые функции высшего порядка, избавляющие от добавления повторяющихся `if null/notNull` проверок:\n\n```java\nOptional<String> optional = Optional.of(\"hello\");\n\noptional.isPresent(); // true\noptional.ifPresent(s -> System.out.println(s.length())); // 5\noptional.get(); // \"hello\"\noptional.orElse(\"ops...\"); // \"hello\"\n```\n\n[к оглавлению](#java-8)\n\n## Что такое `Stream`?\nИнтерфейс `java.util.Stream` представляет собой последовательность элементов, над которой можно производить различные операции.\n\nОперации над стримами бывают или _промежуточными (intermediate)_ или _конечными (terminal)_. Конечные операции возвращают результат определенного типа, а промежуточные операции возвращают тот же стрим. Таким образом вы можете строить цепочки из несколько операций над одним и тем же стримом. \n\nУ стрима может быть сколько угодно вызовов промежуточных операций и последним вызов конечной операции. При этом все промежуточные операции выполняются лениво и пока не будет вызвана конечная операция никаких действий на самом деле не происходит (похоже на создание объекта `Thread` или `Runnable`, без вызова `start()`).\n\nСтримы создаются на основе каких-либо источников, например классов из `java.util.Collection`. \n\nАссоциативные массивы (maps), например, `HashMap`, не поддерживаются.\n\nОперации над стримами могут выполняться как последовательно, так и параллельно.\n\nПотоки не могут быть использованы повторно. Как только была вызвана какая-нибудь конечная операция, поток закрывается.\n\nКроме универсальных объектных существуют особые виды стримов для работы с примитивными типами данных `int`, `long` и `double`: `IntStream`, `LongStream` и `DoubleStream`. Эти примитивные стримы работают так же, как и обычные объектные, но со следующими отличиями: \n\n+ используют специализированные лямбда-выражения, например, `IntFunction` или `IntPredicate` вместо `Function` и `Predicate`; \n+ поддерживают дополнительные конечные операции `sum()`, `average()`, `mapToObj()`.\n\n[к оглавлению](#java-8)\n\n## Какие существуют способы создания стрима?\n1. Из коллекции:\n```java \nStream<String> fromCollection = Arrays.asList(\"x\", \"y\", \"z\").stream();\n```\n2. Из набора значений:\n```java \nStream<String> fromValues = Stream.of(\"x\", \"y\", \"z\");\n```\n3. Из массива:\n```java \nStream<String> fromArray = Arrays.stream(new String[]{\"x\", \"y\", \"z\"});\n```\n4. Из файла (каждая строка в файле будет отдельным элементом в стриме):\n```java \nStream<String> fromFile = Files.lines(Paths.get(\"input.txt\"));\n```\n5. Из строки:\n```java \nIntStream fromString = \"0123456789\".chars();\n```\n6. С помощью `Stream.builder()`:\n```java \nStream<String> fromBuilder = Stream.builder().add(\"z\").add(\"y\").add(\"z\").build();\n```\n7. С помощью `Stream.iterate()` (бесконечный):\n```java \nStream<Integer> fromIterate = Stream.iterate(1, n -> n + 1);\n```\n8. С помощью `Stream.generate()` (бесконечный):\n```java \nStream<String> fromGenerate = Stream.generate(() -> \"0\");\n```\n\n[к оглавлению](#java-8)\n\n## В чем разница между `Collection` и `Stream`?\nКоллекции позволяют работать с элементами по-отдельности, тогда как стримы так делать не позволяют, но вместо этого предоставляют возможность выполнять функции над данными как над одним целым.\n\nТакже стоит отметить важность самой концепции сущностей: `Collection` - это прежде всего воплощение _Структуры Данных_. Например, `Set` не просто хранит в себе элементы, он реализует идею множества с уникальными элементами,\nтогда как `Stream`, это прежде всего абстракция необходимая для реализации _конвейера вычислений_, собственно, поэтому, результатом работы конвейера являются те или иные _Структуры Данных_ или же результаты проверок/поиска и т.п. \n\n[к оглавлению](#java-8)\n\n## Для чего нужен метод `collect()` в стримах?\nМетод `collect()` является конечной операцией, которая используется для представления результата в виде коллекции или какой-либо другой структуры данных.\n\n`collect()` принимает на вход `Collector<Тип_источника, Тип_аккумулятора, Тип_результата>`, который содержит четыре этапа: _supplier_ - инициализация аккумулятора, _accumulator_ - обработка каждого элемента, _combiner_ - соединение двух аккумуляторов при параллельном выполнении, _[finisher]_ - необязательный метод последней обработки аккумулятора. В Java 8 в классе `Collectors` реализовано несколько распространённых коллекторов:\n\n+ `toList()`, `toCollection()`, `toSet()` - представляют стрим в виде списка, коллекции или множества;\n+ `toConcurrentMap()`, `toMap()` - позволяют преобразовать стрим в `Map`;\n+ `averagingInt()`, `averagingDouble()`, `averagingLong()` - возвращают среднее значение;\n+ `summingInt()`, `summingDouble()`, `summingLong()` - возвращает сумму;\n+ `summarizingInt()`, `summarizingDouble()`, `summarizingLong()` - возвращают `SummaryStatistics` с разными агрегатными значениями;\n+ `partitioningBy()` - разделяет коллекцию на две части по соответствию условию и возвращает их как `Map<Boolean, List>`;\n+ `groupingBy()` - разделяет коллекцию на несколько частей и возвращает `Map<N, List<T>>`;\n+ `mapping()` - дополнительные преобразования значений для сложных `Collector`-ов.\n\nТак же существует возможность создания собственного коллектора через `Collector.of()`:\n\n```java\nCollector<String, List<String>, List<String>> toList = Collector.of(\n    ArrayList::new,\n    List::add,\n    (l1, l2) -> { l1.addAll(l2); return l1; }\n);\n```\n\n[к оглавлению](#java-8)\n\n## Для чего в стримах применяются методы `forEach()` и `forEachOrdered()`?\n+ `forEach()` применяет функцию к каждому объекту стрима, порядок при параллельном выполнении не гарантируется;\n+ `forEachOrdered()` применяет функцию к каждому объекту стрима с сохранением порядка элементов.\n\n[к оглавлению](#java-8)\n\n## Для чего в стримах предназначены методы `map()` и `mapToInt()`, `mapToDouble()`, `mapToLong()`?\nМетод `map()` является промежуточной операцией, которая заданным образом преобразует каждый элемент стрима.\n\n`mapToInt()`, `mapToDouble()`, `mapToLong()` - аналоги `map()`, возвращающие соответствующий числовой стрим (то есть стрим из числовых примитивов):\n\n```java\nStream\n    .of(\"12\", \"22\", \"4\", \"444\", \"123\")\n    .mapToInt(Integer::parseInt)\n    .toArray(); //[12, 22, 4, 444, 123]\n```\n[к оглавлению](#java-8)\n\n## Какова цель метода `filter()` в стримах?\nМетод `filter()` является промежуточной операцией принимающей предикат, который фильтрует все элементы, возвращая только те, что соответствуют условию.\n\n[к оглавлению](#java-8)\n\n## Для чего в стримах предназначен метод `limit()`?\nМетод `limit()` является промежуточной операцией, которая позволяет ограничить выборку определенным количеством первых элементов.\n\n[к оглавлению](#java-8)\n\n## Для чего в стримах предназначен метод `sorted()`?\nМетод `sorted()` является промежуточной операцией, которая позволяет сортировать значения либо в натуральном порядке, либо задавая `Comparator`.\n\nПорядок элементов в исходной коллекции остается нетронутым - `sorted()` всего лишь создает его отсортированное представление.\n\n[к оглавлению](#java-8)\n\n## Для чего в стримах предназначены методы `flatMap()`, `flatMapToInt()`, `flatMapToDouble()`, `flatMapToLong()`?\nМетод `flatMap()` похож на map, но может создавать из одного элемента несколько. Таким образом, каждый объект будет преобразован в ноль, один или несколько других объектов, поддерживаемых потоком.  Наиболее очевидный способ применения этой операции — преобразование элементов контейнера при помощи функций, которые возвращают контейнеры.\n\n```java\nStream\n    .of(\"H e l l o\", \"w o r l d !\")\n    .flatMap((p) -> Arrays.stream(p.split(\" \")))\n    .toArray(String[]::new);//[\"H\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n```\n\n`flatMapToInt()`, `flatMapToDouble()`, `flatMapToLong()` - это аналоги `flatMap()`, возвращающие соответствующий числовой стрим.\n\n[к оглавлению](#java-8)\n\n## Расскажите о параллельной обработке в Java 8.\nСтримы могут быть последовательными и параллельными. Операции над последовательными стримами выполняются в одном потоке процессора, над параллельными — используя несколько потоков процессора. Параллельные стримы используют общий `ForkJoinPool` доступный через статический `ForkJoinPool.commonPool()` метод. При этом, если окружение не является многоядерным, то поток будет выполняться как последовательный. Фактически применение параллельных стримов сводится к тому, что данные в стримах будут разделены на части, каждая часть обрабатывается на отдельном ядре процессора, и в конце эти части соединяются, и над ними выполняются конечные операции.\n\nДля создания параллельного потока из коллекции можно также использовать метод `parallelStream()` интерфейса `Collection`. \n\nЧтобы сделать обычный последовательный стрим параллельным, надо вызвать у объекта `Stream` метод `parallel()`. Метод `isParallel()` позволяет узнать является ли стрим параллельным. \n\nС помощью, методов `parallel()` и `sequential()` можно определять какие операции могут быть параллельными, а какие только последовательными. Так же из любого последовательного стрима можно сделать параллельный и наоборот: \n\n```java\ncollection\n.stream()\n.peek(...) // операция последовательна\n.parallel()\n.map(...) // операция может выполняться параллельно,\n.sequential()\n.reduce(...) // операция снова последовательна \n```\n\nКак правило, элементы передаются в стрим в том же порядке, в котором они определены в источнике данных. При работе с параллельными стримами система сохраняет порядок следования элементов. Исключение составляет метод `forEach()`, который может выводить элементы в произвольном порядке. И чтобы сохранить порядок следования, необходимо применять метод `forEachOrdered()`.\n\nКритерии, которые могут повлиять на производительность в параллельных стримах:\n\n+ Размер данных - чем больше данных, тем сложнее сначала разделять данные, а потом их соединять.\n+ Количество ядер процессора. Теоретически, чем больше ядер в компьютере, тем быстрее программа будет работать. Если на машине одно ядро, нет смысла применять параллельные потоки.\n+ Чем проще структура данных, с которой работает поток, тем быстрее будут происходить операции. Например, данные из `ArrayList` легко использовать, так как структура данной коллекции предполагает последовательность несвязанных данных. А вот коллекция типа `LinkedList` - не лучший вариант, так как в последовательном списке все элементы связаны с предыдущими/последующими. И такие данные трудно распараллелить.\n+ Над данными примитивных типов операции будут производиться быстрее, чем над объектами классов.\n+ Крайне не рекомендуется использовать параллельные стримы для скольких-нибудь долгих операций (например, сетевых соединений), так как все параллельные стримы работают c одним ForkJoinPool, то такие долгие операции могут остановить работу всех параллельных стримов в JVM из-за отсутствия доступных потоков в пуле, т.е. параллельные стримы стоит использовать лишь для коротких операций, где счет идет на миллисекунды, но не для тех где счет может идти на секунды и минуты;\n+ Сохранение порядка в параллельных стримах увеличивает издержки при выполнении и если порядок не важен, то имеется возможность отключить его сохранение и тем самым увеличить производительность, использовав промежуточную операцию `unordered()`:\n\n```java\ncollection.parallelStream()\n    .sorted()\n    .unordered()\n    .collect(Collectors.toList());\n```\n\n[к оглавлению](#java-8)\n\n## Какие конечные методы работы со стримами вы знаете?\n+ `findFirst()` возвращает первый элемент;\n+ `findAny()` возвращает любой подходящий элемент;\n+ `collect()` представление результатов в виде коллекций и других структур данных;\n+ `count()` возвращает количество элементов;\n+ `anyMatch()` возвращает `true`, если условие выполняется хотя бы для одного элемента;\n+ `noneMatch()` возвращает `true`, если условие не выполняется ни для одного элемента;\n+ `allMatch()` возвращает `true`, если условие выполняется для всех элементов;\n+ `min()` возвращает минимальный элемент, используя в качестве условия `Comparator`;\n+ `max()` возвращает максимальный элемент, используя в качестве условия `Comparator`;\n+ `forEach()` применяет функцию к каждому объекту (порядок при параллельном выполнении не гарантируется);\n+ `forEachOrdered()` применяет функцию к каждому объекту с сохранением порядка элементов;\n+ `toArray()` возвращает массив значений;\n+ `reduce()`позволяет выполнять агрегатные функции и возвращать один результат.\n\nДля числовых стримов дополнительно доступны:\n\n+ `sum()` возвращает сумму всех чисел;\n+ `average()` возвращает среднее арифметическое всех чисел.\n\n[к оглавлению](#java-8)\n\n## Какие промежуточные методы работы со стримами вы знаете?\n+ `filter()` отфильтровывает записи, возвращая только записи, соответствующие условию;\n+ `skip()` позволяет пропустить определённое количество элементов в начале;\n+ `distinct()` возвращает стрим без дубликатов (для метода `equals()`);\n+ `map()` преобразует каждый элемент;\n+ `peek()` возвращает тот же стрим, применяя к каждому элементу функцию;\n+ `limit()` позволяет ограничить выборку определенным количеством первых элементов;\n+ `sorted()` позволяет сортировать значения либо в натуральном порядке, либо задавая `Comparator`;\n+ `mapToInt()`, `mapToDouble()`, `mapToLong()` - аналоги `map()` возвращающие стрим числовых примитивов;\n+ `flatMap()`, `flatMapToInt()`, `flatMapToDouble()`, `flatMapToLong()` - похожи на `map()`, но могут создавать из одного элемента несколько.\n\nДля числовых стримов дополнительно доступен метод `mapToObj()`, который преобразует числовой стрим обратно в объектный.\n\n[к оглавлению](#java-8)\n\n## Как вывести на экран 10 случайных чисел, используя `forEach()`?\n```java\n(new Random())\n    .ints()\n    .limit(10)\n    .forEach(System.out::println);\n```\n\n[к оглавлению](#java-8)\n\n## Как можно вывести на экран уникальные квадраты чисел используя метод `map()`?\n```java\nStream\n    .of(1, 2, 3, 2, 1)\n    .map(s -> s * s)\n    .distinct()\n    .forEach(System.out::println);\n```\n\n[к оглавлению](#java-8)\n\n## Как вывести на экран количество пустых строк с помощью метода `filter()`?\n```java\nSystem.out.println(\n    Stream\n        .of(\"Hello\", \"\", \", \", \"world\", \"!\")\n        .filter(String::isEmpty)\n        .count());\n```\n\n[к оглавлению](#java-8)\n\n## Как вывести на экран 10 случайных чисел в порядке возрастания?\n```java\n(new Random())\n    .ints()\n    .limit(10)\n    .sorted()\n    .forEach(System.out::println);\n```\n\n[к оглавлению](#java-8)\n\n## Как найти максимальное число в наборе?\n```java\nStream\n    .of(5, 3, 4, 55, 2)\n    .mapToInt(a -> a)\n    .max()\n    .getAsInt(); //55\n```\n\n[к оглавлению](#java-8)\n\n## Как найти минимальное число в наборе?\n```java\nStream\n    .of(5, 3, 4, 55, 2)\n    .mapToInt(a -> a)\n    .min()\n    .getAsInt(); //2\n```\n[к оглавлению](#java-8)\n\n## Как получить сумму всех чисел в наборе?\n```java\nStream\n    .of(5, 3, 4, 55, 2)\n    .mapToInt()\n    .sum(); //69\n```\n[к оглавлению](#java-8)\n\n## Как получить среднее значение всех чисел?\n```java\nStream\n    .of(5, 3, 4, 55, 2)\n    .mapToInt(a -> a)\n    .average()\n    .getAsDouble(); //13.8\n```\n[к оглавлению](#java-8)\n\n## Какие дополнительные методы для работы с ассоциативными массивами (maps) появились в Java 8?\n+ `putIfAbsent()` добавляет пару «ключ-значение», только если ключ отсутствовал:\n\n`map.putIfAbsent(\"a\", \"Aa\");`\n\n+ `forEach()` принимает функцию, которая производит операцию над каждым элементом:\n\n`map.forEach((k, v) -> System.out.println(v));`\n\n+ `compute()` создаёт или обновляет текущее значение на полученное в результате вычисления (возможно использовать ключ и текущее значение):\n\n`map.compute(\"a\", (k, v) -> String.valueOf(k).concat(v)); //[\"a\", \"aAa\"]`\n\n+ `computeIfPresent()` если ключ существует, обновляет текущее значение на полученное в результате вычисления (возможно использовать ключ и текущее значение):\n\n`map.computeIfPresent(\"a\", (k, v) -> k.concat(v));`\n\n+ `computeIfAbsent()` если ключ отсутствует, создаёт его со значением, которое вычисляется (возможно использовать ключ):\n\n`map.computeIfAbsent(\"a\", k -> \"A\".concat(k)); //[\"a\",\"Aa\"]`\n\n+ `getOrDefault()` в случае отсутствия ключа, возвращает переданное значение по-умолчанию:\n\n`map.getOrDefault(\"a\", \"not found\");`\n\n+ `merge()` принимает ключ, значение и функцию, которая объединяет передаваемое и текущее значения. Если под заданным ключем значение отсутствует, то записывает туда передаваемое значение. \n\n`map.merge(\"a\", \"z\", (value, newValue) -> value.concat(newValue)); //[\"a\",\"Aaz\"]`\n\n[к оглавлению](#java-8)\n\n## Что такое `LocalDateTime`?\n`LocalDateTime` объединяет вместе `LocaleDate` и `LocalTime`, содержит дату и время в календарной системе ISO-8601 без привязки к часовому поясу. Время хранится с точностью до наносекунды. Содержит множество удобных методов, таких как plusMinutes, plusHours, isAfter, toSecondOfDay и т.д.\n\n[к оглавлению](#java-8)\n\n## Что такое `ZonedDateTime`?\n`java.time.ZonedDateTime` — аналог `java.util.Calendar`, класс с самым полным объемом информации о временном контексте в календарной системе ISO-8601. Включает временную зону, поэтому все операции с временными сдвигами этот класс проводит с её учётом.\n\n[к оглавлению](#java-8)\n\n## Как получить текущую дату с использованием Date Time API из Java 8?\n```java\nLocalDate.now();\n```\n\n[к оглавлению](#java-8)\n\n## Как добавить 1 неделю, 1 месяц, 1 год, 10 лет к текущей дате с использованием Date Time API?\n```java\nLocalDate.now().plusWeeks(1);\nLocalDate.now().plusMonths(1);\nLocalDate.now().plusYears(1);\nLocalDate.now().plus(1, ChronoUnit.DECADES);\n```\n\n[к оглавлению](#java-8)\n\n## Как получить следующий вторник используя Date Time API?\n```java\nLocalDate.now().with(TemporalAdjusters.next(DayOfWeek.TUESDAY));\n```\n\n[к оглавлению](#java-8)\n\n## Как получить вторую субботу текущего месяца используя Date Time API?\n```java\nLocalDate\n    .of(LocalDate.now().getYear(), LocalDate.now().getMonth(), 1)\n    .with(TemporalAdjusters.nextOrSame(DayOfWeek.SATURDAY))\n    .with(TemporalAdjusters.next(DayOfWeek.SATURDAY));\n```\n\n[к оглавлению](#java-8)\n\n## Как получить текущее время с точностью до миллисекунд используя Date Time API?\n```java\nnew Date().toInstant();\n```\n\n[к оглавлению](#java-8)\n\n## Как получить текущее время по местному времени с точностью до миллисекунд используя Date Time API?\n```java\nLocalDateTime.ofInstant(new Date().toInstant(), ZoneId.systemDefault());\n```\n\n[к оглавлению](#java-8)\n\n## Как определить повторяемую аннотацию?\nЧтобы определить повторяемую аннотацию, необходимо создать аннотацию-контейнер для списка повторяемых аннотаций и обозначить повторяемую мета-аннотацией `@Repeatable`:\n\n```java\n@interface Schedulers\n{\n    Scheduler[] value();\n}\n\n@Repeatable(Schedulers.class)\n@interface Scheduler\n{\n    String birthday() default \"Jan 8 1935\";\n}\n```\n\n[к оглавлению](#java-8)\n\n## Что такое `Nashorn`?\n__Nashorn__ - это движок JavaScript, разрабатываемый на Java компанией Oracle. Призван дать возможность встраивать код JavaScript в приложения Java. В сравнении с _Rhino_, который поддерживается Mozilla Foundation, Nashorn обеспечивает от 2 до 10 раз более высокую производительность, так как он компилирует код и передает байт-код виртуальной машине Java непосредственно в памяти. Nashorn умеет компилировать код JavaScript и генерировать классы Java, которые загружаются специальным загрузчиком. Так же возможен вызов кода Java прямо из JavaScript.\n\n[к оглавлению](#java-8)\n\n## Что такое `jjs`?\n`jjs` это утилита командной строки, которая позволяет исполнять программы на языке JavaScript прямо в консоли.\n\n[к оглавлению](#java-8)\n\n## Какой класс появился в Java 8 для кодирования/декодирования данных?\n`Base64` - потокобезопасный класс, который реализует кодировщик и декодировщик данных, используя схему кодирования base64 согласно _RFC 4648_ и _RFC 2045_.\n\nBase64 содержит 6 основных методов:\n\n`getEncoder()`/`getDecoder()` - возвращает кодировщик/декодировщик base64, соответствующий стандарту _RFC 4648_;\n`getUrlEncoder()`/`getUrlDecoder()` - возвращает URL-safe кодировщик/декодировщик base64, соответствующий стандарту _RFC 4648_;\n`getMimeEncoder()`/`getMimeDecoder()` - возвращает MIME кодировщик/декодировщик, соответствующий стандарту _RFC 2045_.\n\n[к оглавлению](#java-8)\n\n## Как создать Base64 кодировщик и декодировщик?\n```java\n// Encode\nString b64 = Base64.getEncoder().encodeToString(\"input\".getBytes(\"utf-8\")); //aW5wdXQ==\n// Decode\nnew String(Base64.getDecoder().decode(\"aW5wdXQ==\"), \"utf-8\"); //input\n```\n\n[к оглавлению](#java-8)\n\n# Источники\n+ [Хабрахабр - Новое в Java 8](https://habrahabr.ru/post/216431/)\n+ [Хабрахабр - Шпаргалка Java программиста 4. Java Stream API](https://habrahabr.ru/company/luxoft/blog/270383/)\n+ [METANIT.COM](http://metanit.com/java/tutorial/9.1.php)\n+ [javadevblog.com](http://javadevblog.com/interfejsy-v-java-8-staticheskie-metody-metody-po-umolchaniyu-funktsional-ny-e-interfejsy.html)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "jcf.md",
          "type": "blob",
          "size": 99.767578125,
          "content": "[Вопросы для собеседования](README.md)\n\n# Java Collections Framework\n+ [Что такое _«коллекция»_?](#Что-такое-коллекция)\n+ [Назовите основные интерфейсы JCF и их реализации.](#Назовите-основные-интерфейсы-jcf-и-их-реализации)\n+ [Расположите в виде иерархии следующие интерфейсы: `List`, `Set`, `Map`, `SortedSet`, `SortedMap`, `Collection`, `Iterable`, `Iterator`, `NavigableSet`, `NavigableMap`.](#Расположите-в-виде-иерархии-следующие-интерфейсы-list-set-map-sortedset-sortedmap-collection-iterable-iterator-navigableset-navigablemap)\n+ [Почему `Map` — это не `Collection`, в то время как `List` и `Set` являются `Collection`?](#Почему-map--это-не-collection-в-то-время-как-list-и-set-являются-collection)\n+ [В чем разница между классами `java.util.Collection` и `java.util.Collections`?](#В-чем-разница-между-классами-javautilcollection-и-javautilcollections)\n+ [Что такое «fail-fast поведение»?](#Что-такое-fail-fast-поведение)\n+ [Какая разница между fail-fast и fail-safe?](#Какая-разница-между-fail-fast-и-fail-safe)\n+ [Приведите примеры итераторов, реализующих поведение fail-safe](#Приведите-примеры-итераторов-реализующих-поведение-fail-safe)\n+ [Чем различаются `Enumeration` и `Iterator`.](#Чем-различаются-enumeration-и-iterator)\n+ [Как между собой связаны `Iterable` и `Iterator`?](#Как-между-собой-связаны-iterable-и-iterator)\n+ [Как между собой связаны `Iterable`, `Iterator` и «for-each»?](#Как-между-собой-связаны-iterable-iterator-и-for-each)\n+ [Сравните `Iterator` и `ListIterator`.](#Сравните-iterator-и-listiterator)\n+ [Что произойдет при вызове `Iterator.next()` без предварительного вызова `Iterator.hasNext()`?](#Что-произойдет-при-вызове-iteratornext-без-предварительного-вызова-iteratorhasnext)\n+ [Сколько элементов будет пропущено, если `Iterator.next()` будет вызван после 10-ти вызовов `Iterator.hasNext()`?](#Сколько-элементов-будет-пропущено-если-iteratornext-будет-вызван-после-10-ти-вызовов-iteratorhasnext)\n+ [Как поведёт себя коллекция, если вызвать `iterator.remove()`?](#Как-поведёт-себя-коллекция-если-вызвать-iteratorremove)\n+ [Как поведёт себя уже инстанциированный итератор для `collection`, если вызвать `collection.remove()`?](#Как-поведёт-себя-уже-инстанциированный-итератор-для-collection-если-вызвать-collectionremove)\n+ [Как избежать `ConcurrentModificationException` во время перебора коллекции?](#Как-избежать-concurrentmodificationexception-во-время-перебора-коллекции)\n+ [Какая коллекция реализует дисциплину обслуживания FIFO?](#Какая-коллекция-реализует-дисциплину-обслуживания-fifo)\n+ [Какая коллекция реализует дисциплину обслуживания FILO?](#Какая-коллекция-реализует-дисциплину-обслуживания-filo)\n+ [Чем отличается `ArrayList` от `Vector`?](#Чем-отличается-arraylist-от-vector)\n+ [Зачем добавили `ArrayList`, если уже был `Vector`?](#Зачем-добавили-arraylist-если-уже-был-vector)\n+ [Чем отличается `ArrayList` от `LinkedList`? В каких случаях лучше использовать первый, а в каких второй?](#Чем-отличается-arraylist-от-linkedlist-В-каких-случаях-лучше-использовать-первый-а-в-каких-второй)\n+ [Что работает быстрее `ArrayList` или `LinkedList`?](#Что-работает-быстрее-arraylist-или-linkedlist)\n+ [Какое худшее время работы метода `contains()` для элемента, который есть в `LinkedList`?](#Какое-худшее-время-работы-метода-contains-для-элемента-который-есть-в-linkedlist)\n+ [Какое худшее время работы метода `contains()` для элемента, который есть в `ArrayList`?](#Какое-худшее-время-работы-метода-contains-для-элемента-который-есть-в-arraylist)\n+ [Какое худшее время работы метода `add()` для `LinkedList`?](#Какое-худшее-время-работы-метода-add-для-linkedlist)\n+ [Какое худшее время работы метода `add()` для `ArrayList`?](#Какое-худшее-время-работы-метода-add-для-arraylist)\n+ [Необходимо добавить 1 млн. элементов, какую структуру вы используете?](#Необходимо-добавить-1-млн-элементов-какую-структуру-вы-используете)\n+ [Как происходит удаление элементов из `ArrayList`? Как меняется в этом случае размер `ArrayList`?](#Как-происходит-удаление-элементов-из-arraylist-Как-меняется-в-этом-случае-размер-arraylist)\n+ [Предложите эффективный алгоритм удаления нескольких рядом стоящих элементов из середины списка, реализуемого `ArrayList`.](#Предложите-эффективный-алгоритм-удаления-нескольких-рядом-стоящих-элементов-из-середины-списка-реализуемого-arraylist)\n+ [Сколько необходимо дополнительной памяти при вызове `ArrayList.add()`?](#Сколько-необходимо-дополнительной-памяти-при-вызове-arraylistadd)\n+ [Сколько выделяется дополнительно памяти при вызове `LinkedList.add()`?](#Сколько-выделяется-дополнительно-памяти-при-вызове-linkedlistadd)\n+ [Оцените количество памяти на хранение одного примитива типа `byte` в `LinkedList`?](#Оцените-количество-памяти-на-хранение-одного-примитива-типа-byte-в-linkedlist)\n+ [Оцените количество памяти на хранение одного примитива типа `byte` в `ArrayList`?](#Оцените-количество-памяти-на-хранение-одного-примитива-типа-byte-в-arraylist)\n+ [Для `ArrayList` или для `LinkedList` операция добавления элемента в середину (`list.add(list.size()/2, newElement)`) медленнее?](#Для-arraylist-или-для-linkedlist-операция-добавления-элемента-в-середину-listaddlistsize2-newelement-медленнее)\n+ [В реализации класса `ArrayList` есть следующие поля: `Object[] elementData`, `int size`. Объясните, зачем хранить отдельно `size`, если всегда можно взять `elementData.length`?](#В-реализации-класса-arraylist-есть-следующие-поля-object-elementdata-int-size-Объясните-зачем-хранить-отдельно-size-если-всегда-можно-взять-elementdatalength)\n+ [Сравните интерфейсы `Queue` и `Deque`.](#Сравните-интерфейсы-queue-и-deque)\n+ [Кто кого расширяет: `Queue` расширяет `Deque`, или `Deque` расширяет `Queue`?](#Кто-кого-расширяет-queue-расширяет-deque-или-deque-расширяет-queue)\n+ [Почему `LinkedList` реализует и `List`, и `Deque`?](#Почему-linkedlist-реализует-и-list-и-deque)\n+ [`LinkedList` — это односвязный, двусвязный или четырехсвязный список?](#linkedlist--это-односвязный-двусвязный-или-четырехсвязный-список)\n+ [Как перебрать элементы `LinkedList` в обратном порядке, не используя медленный `get(index)`?](#Как-перебрать-элементы-linkedlist-в-обратном-порядке-не-используя-медленный-getindex)\n+ [Что позволяет сделать `PriorityQueue`?](#Что-позволяет-сделать-priorityqueue)\n+ [`Stack` считается «устаревшим». Чем его рекомендуют заменять? Почему?](#stack-считается-устаревшим-Чем-его-рекомендуют-заменять-Почему)\n+ [Зачем нужен `HashMap`, если есть `Hashtable`?](#Зачем-нужен-hashmap-если-есть-hashtable)\n+ [В чем разница между `HashMap` и `IdentityHashMap`? Для чего нужна `IdentityHashMap`?](#В-чем-разница-между-hashmap-и-identityhashmap-Для-чего-нужна-identityhashmap)\n+ [В чем разница между `HashMap` и `WeakHashMap`? Для чего используется `WeakHashMap`?](#В-чем-разница-между-hashmap-и-weakhashmap-Для-чего-используется-weakhashmap)\n+ [В `WeakHashMap` используются WeakReferences. А почему бы не создать `SoftHashMap` на SoftReferences?](#В-weakhashmap-используются-weakreferences-А-почему-бы-не-создать-softhashmap-на-softreferences)\n+ [В `WeakHashMap` используются WeakReferences. А почему бы не создать `PhantomHashMap` на PhantomReferences?](#В-weakhashmap-используются-weakreferences-А-почему-бы-не-создать-phantomhashmap-на-phantomreferences)\n+ [`LinkedHashMap` - что в нем от `LinkedList`, а что от `HashMap`?](#linkedhashmap---что-в-нем-от-linkedlist-а-что-от-hashmap)\n+ [В чем проявляется «сортированность» `SortedMap`, кроме того, что `toString()` выводит все элементы по порядку?](#В-чем-проявляется-сортированность-sortedmap-кроме-того-что-tostring-выводит-все-элементы-по-порядку)\n+ [Как устроен `HashMap`?](#Как-устроен-hashmap)\n+ [Согласно Кнуту и Кормену существует две основных реализации хэш-таблицы: на основе открытой адресации и на основе метода цепочек. Как реализована `HashMap`? Почему, по вашему мнению, была выбрана именно эта реализация? В чем плюсы и минусы каждого подхода?](#Согласно-Кнуту-и-Кормену-существует-две-основных-реализации-хэш-таблицы-на-основе-открытой-адресации-и-на-основе-метода-цепочек-Как-реализована-hashmap-Почему-по-вашему-мнению-была-выбрана-именно-эта-реализация-В-чем-плюсы-и-минусы-каждого-подхода)\n+ [Как работает `HashMap` при попытке сохранить в него два элемента по ключам с одинаковым `hashCode()`, но для которых `equals() == false`?](#Как-работает-hashmap-при-попытке-сохранить-в-него-два-элемента-по-ключам-с-одинаковым-hashcode-но-для-которых-equals--false)\n+ [Какое начальное количество корзин в `HashMap`?](#Какое-начальное-количество-корзин-в-hashmap)\n+ [Какова оценка временной сложности операций над элементами из `HashMap`? Гарантирует ли `HashMap` указанную сложность выборки элемента?](#Какова-оценка-временной-сложности-операций-над-элементами-из-hashmap-Гарантирует-ли-hashmap-указанную-сложность-выборки-элемента)\n+ [Возможна ли ситуация, когда `HashMap` выродится в список даже с ключами имеющими разные `hashCode()`?](#Возможна-ли-ситуация-когда-hashmap-выродится-в-список-даже-с-ключами-имеющими-разные-hashcode)\n+ [В каком случае может быть потерян элемент в `HashMap`?](#В-каком-случае-может-быть-потерян-элемент-в-hashmap)\n+ [Почему нельзя использовать `byte[]` в качестве ключа в `HashMap`?](#Почему-нельзя-использовать-byte-в-качестве-ключа-в-hashmap)\n+ [Какова роль `equals()` и `hashCode()` в `HashMap`?](#Какова-роль-equals-и-hashcode-в-hashmap)\n+ [Каково максимальное число значений `hashCode()`?](#Каково-максимальное-число-значений-hashcode)\n+ [Какое худшее время работы метода get(key) для ключа, которого нет в `HashMap`?](#Какое-худшее-время-работы-метода-getkey-для-ключа-которого-нет-в-hashmap)\n+ [Какое худшее время работы метода get(key) для ключа, который есть в `HashMap`?](#Какое-худшее-время-работы-метода-getkey-для-ключа-который-есть-в-hashmap)\n+ [Почему несмотря на то, что ключ в `HashMap` не обязан реализовывать интерфейс `Comparable`, двусвязный список всегда удается преобразовать в красно-черное-дерево?](#Почему-несмотря-на-то-что-ключ-в-HashMap-не-обязан-реализовывать-интерфейс-Comparable-двусвязный-список-всегда-удается-преобразовать-в-красно-черное-дерево)\n+ [Сколько переходов происходит в момент вызова `HashMap.get(key)` по ключу, который есть в таблице?](#Сколько-переходов-происходит-в-момент-вызова-hashmapgetkey-по-ключу-который-есть-в-таблице)\n+ [Сколько создается новых объектов, когда вы добавляете новый элемент в `HashMap`?](#Сколько-создается-новых-объектов-когда-вы-добавляете-новый-элемент-в-hashmap)\n+ [Как и когда происходит увеличение количества корзин в `HashMap`?](#Как-и-когда-происходит-увеличение-количества-корзин-в-hashmap)\n+ [Объясните смысл параметров в конструкторе `HashMap(int initialCapacity, float loadFactor)`.](#Объясните-смысл-параметров-в-конструкторе-hashmapint-initialcapacity-float-loadfactor)\n+ [Будет ли работать `HashMap`, если все добавляемые ключи будут иметь одинаковый `hashCode()`?](#Будет-ли-работать-hashmap-если-все-добавляемые-ключи-будут-иметь-одинаковый-hashcode)\n+ [Как перебрать все ключи `Map`?](#Как-перебрать-все-ключи-map)\n+ [Как перебрать все значения `Map`?](#Как-перебрать-все-значения-map)\n+ [Как перебрать все пары «ключ-значение» в `Map`?](#Как-перебрать-все-пары-ключ-значение-в-map)\n+ [В чем отличия `TreeSet` и `HashSet`?](#В-чем-отличия-treeset-и-hashset)\n+ [Что будет, если добавлять элементы в `TreeSet` по возрастанию?](#Что-будет-если-добавлять-элементы-в-treeset-по-возрастанию)\n+ [Чем `LinkedHashSet` отличается от `HashSet`?](#Чем-linkedhashset-отличается-от-hashset)\n+ [Для `Enum` есть специальный класс `java.util.EnumSet`. Зачем? Чем авторов не устраивал `HashSet` или `TreeSet`?](#Для-enum-есть-специальный-класс-javautilenumset-Зачем-Чем-авторов-не-устраивал-hashset-или-treeset)\n+ [Какие существуют способы перебирать элементы списка?](#Какие-существуют-способы-перебирать-элементы-списка)\n+ [Каким образом можно получить синхронизированные объекты стандартных коллекций?](#Каким-образом-можно-получить-синхронизированные-объекты-стандартных-коллекций)\n+ [Как получить коллекцию только для чтения?](#Как-получить-коллекцию-только-для-чтения)\n+ [Напишите однопоточную программу, которая заставляет коллекцию выбросить `ConcurrentModificationException`.](#Напишите-однопоточную-программу-которая-заставляет-коллекцию-выбросить-concurrentmodificationexception)\n+ [Приведите пример, когда какая-либо коллекция выбрасывает `UnsupportedOperationException`.](#Приведите-пример-когда-какая-либо-коллекция-выбрасывает-unsupportedoperationexception)\n+ [Реализуйте симметрическую разность двух коллекций используя методы `Collection` (`addAll(...)`, `removeAll(...)`, `retainAll(...)`).](#Реализуйте-симметрическую-разность-двух-коллекций-используя-методы-collection-addall-removeall-retainall)\n+ [Как, используя LinkedHashMap, сделать кэш c «invalidation policy»?](#Как-используя-linkedhashmap-сделать-кэш-c-invalidation-policy)\n+ [Как одной строчкой скопировать элементы любой `collection` в массив?](#Как-одной-строчкой-скопировать-элементы-любой-collection-в-массив)\n+ [Как одним вызовом из `List` получить `List` со всеми элементами, кроме первых и последних 3-х?](#Как-одним-вызовом-из-list-получить-list-со-всеми-элементами-кроме-первых-и-последних-3-х)\n+ [Как одной строчкой преобразовать `HashSet` в `ArrayList`?](#Как-одной-строчкой-преобразовать-hashset-в-arraylist)\n+ [Как одной строчкой преобразовать `ArrayList` в `HashSet`?](#Как-одной-строчкой-преобразовать-arraylist-в-hashset)\n+ [Сделайте `HashSet` из ключей `HashMap`.](#Сделайте-hashset-из-ключей-hashmap)\n+ [Сделайте `HashMap` из `HashSet<Map.Entry<K, V>>`.](#Сделайте-hashmap-из-hashsetmapentryk-v)\n\n## Что такое _«коллекция»_?\n_«Коллекция»_ - это структура данных, набор каких-либо объектов. Данными (объектами в наборе) могут быть числа, строки, объекты пользовательских классов и т.п.\n\n[к оглавлению](#java-collections-framework)\n\n## Назовите основные интерфейсы JCF и их реализации.\nНа вершине иерархии в Java Collection Framework располагаются 2 интерфейса: `Collection` и `Map`. Эти интерфейсы разделяют все коллекции, входящие во фреймворк на две части по типу хранения данных: простые последовательные наборы элементов и наборы пар «ключ — значение» соответственно.\n\nИнтерфейс `Collection` расширяют интерфейсы:\n\n+ `List` (список) представляет собой коллекцию, в которой допустимы дублирующие значения. Реализации:\n    + `ArrayList` - инкапсулирует в себе обычный массив, длина которого автоматически увеличивается при добавлении новых элементов. Элементы такой коллекции пронумерованы, начиная от нуля, к ним можно обратиться по индексу.\n    + `LinkedList` (двунаправленный связный список) - состоит из узлов, каждый из которых содержит как собственно данные, так и две ссылки на следующий и предыдущий узел.\n    + `Vector` — реализация динамического массива объектов, методы которой синхронизированы.\n    + `Stack` — реализация стека LIFO (last-in-first-out).\n+ `Set` (сет) описывает неупорядоченную коллекцию, не содержащую повторяющихся элементов. Реализации:\n    + `HashSet` - использует HashMap для хранения данных. В качестве ключа используется добавляемый элемент, в качестве значения - заглушка Object. Из-за особенностей реализации порядок элементов не гарантируется при добавлении.\n    + `LinkedHashSet` — гарантирует, что порядок элементов при обходе коллекции будет идентичен порядку добавления элементов.\n    + `TreeSet` — предоставляет возможность управлять порядком элементов в коллекции при помощи объекта `Comparator`, либо сохраняет элементы с использованием «natural ordering».\n+ `Queue` (очередь) предназначена для хранения элементов с предопределённым способом вставки и извлечения FIFO (first-in-first-out):\n    + `PriorityQueue` — предоставляет возможность управлять порядком элементов в коллекции при помощи объекта `Comparator`, либо сохраняет элементы с использованием «natural ordering».\n    + `ArrayDeque` — реализация интерфейса `Deque`, который расширяет интерфейс `Queue` методами, позволяющими реализовать конструкцию вида LIFO (last-in-first-out). \n\nИнтерфейс `Map` реализован классами:\n\n+ `Hashtable` — хэш-таблица, методы которой синхронизированы. Не позволяет использовать `null` в качестве значения или ключа и не является упорядоченной.\n+ `HashMap` — хэш-таблица. Позволяет использовать `null` в качестве значения или ключа и не является упорядоченной.\n+ `LinkedHashMap` — упорядоченная реализация хэш-таблицы.\n+ `TreeMap` — реализация, основанная на красно-чёрных деревьях. Является упорядоченной и предоставляет возможность управлять порядком элементов в коллекции при помощи объекта `Comparator`, либо сохраняет элементы с использованием «natural ordering».\n+ `WeakHashMap` — реализация хэш-таблицы, которая организована с использованием _weak references_ для ключей (сборщик мусора автоматически удалит элемент из коллекции при следующей сборке мусора, если на ключ этого элемента нет жёстких ссылок).\n\n[к оглавлению](#java-collections-framework)\n\n## Расположите в виде иерархии следующие интерфейсы: `List`, `Set`, `Map`, `SortedSet`, `SortedMap`, `Collection`, `Iterable`, `Iterator`, `NavigableSet`, `NavigableMap`.\n+ `Iterable`\n    + `Collection`\n        + `List`\n        + `Set`\n            + `SortedSet`\n                + `NavigableSet`\n+ `Map`\n    + `SortedMap` \n        + `NavigableMap`\n+ `Iterator`\n\n[к оглавлению](#java-collections-framework)\n\n## Почему `Map` — это не `Collection`, в то время как `List` и `Set` являются `Collection`?\n`Collection` представляет собой совокупность некоторых элементов. `Map` - это совокупность пар «ключ-значение».\n\n[к оглавлению](#java-collections-framework)\n\n## В чем разница между классами `java.util.Collection` и `java.util.Collections`?\n`java.util.Collections` - набор статических методов для работы с коллекциями.\n\n`java.util.Collection` - один из основных интерфейсов Java Collections Framework.\n\n[к оглавлению](#java-collections-framework)\n\n## Что такое «fail-fast поведение»?\n__fail-fast поведение__ означает, что при возникновении ошибки или состояния, которое может привести к ошибке, система немедленно прекращает дальнейшую работу и уведомляет об этом. Использование fail-fast подхода позволяет избежать недетерминированного поведения программы в течение времени.\n\nВ Java Collections API некоторые итераторы ведут себя как fail-fast и выбрасывают `ConcurrentModificationException`, если после его создания была произведена модификация коллекции, т.е. добавлен или удален элемент напрямую из коллекции, а не используя методы итератора. \n\nРеализация такого поведения осуществляется за счет подсчета количества модификаций коллекции (modification count):\n\n+ при изменении коллекции счетчик модификаций так же изменяется;\n+ при создании итератора ему передается текущее значение счетчика;\n+ при каждом обращении к итератору сохраненное значение счетчика сравнивается с текущим, и, если они не совпадают, возникает исключение.\n\n[к оглавлению](#java-collections-framework)\n\n## Какая разница между fail-fast и fail-safe?\nВ противоположность fail-fast, итераторы fail-safe не вызывают никаких исключений при изменении структуры, потому что они работают с клоном коллекции вместо оригинала.\n\n[к оглавлению](#java-collections-framework)\n\n## Приведите примеры итераторов, реализующих поведение fail-safe\nИтератор коллекции `CopyOnWriteArrayList` и итератор представления `keySet` коллекции `ConcurrentHashMap` являются примерами итераторов fail-safe.\n\n[к оглавлению](#java-collections-framework)\n\n## Чем различаются `Enumeration` и `Iterator`.\nХотя оба интерфейса и предназначены для обхода коллекций между ними имеются существенные различия:\n\n+ с помощью `Enumeration` нельзя добавлять/удалять элементы;\n+ в `Iterator` исправлены имена методов для повышения читаемости кода (`Enumeration.hasMoreElements()` соответствует `Iterator.hasNext()`, `Enumeration.nextElement()` соответствует `Iterator.next()` и т.д);\n+ `Enumeration` присутствуют в устаревших классах, таких как `Vector`/`Stack`, тогда как `Iterator` есть во всех современных классах-коллекциях. \n\n[к оглавлению](#java-collections-framework)\n\n## Как между собой связаны `Iterable` и `Iterator`?\nИнтерфейс `Iterable` имеет только один метод - `iterator()`, который возвращает `Iterator`.\n\n[к оглавлению](#java-collections-framework)\n\n## Как между собой связаны `Iterable`, `Iterator` и «for-each»?\nКлассы, реализующие интерфейс `Iterable`, могут применяться в конструкции `for-each`, которая использует `Iterator`.\n\n[к оглавлению](#java-collections-framework)\n\n## Сравните `Iterator` и `ListIterator`.\n+ `ListIterator` расширяет интерфейс `Iterator`\n+ `ListIterator` может быть использован только для перебора элементов коллекции `List`;\n+ `Iterator` позволяет перебирать элементы только в одном направлении, при помощи метода `next()`. Тогда как `ListIterator` позволяет перебирать список в обоих направлениях, при помощи методов `next()` и `previous()`;\n+ `ListIterator` не указывает на конкретный элемент: его текущая позиция располагается между элементами, которые возвращают методы `previous()` и `next()`.\n+ При помощи `ListIterator` вы можете модифицировать список, добавляя/удаляя элементы с помощью методов `add()` и `remove()`. `Iterator` не поддерживает данного функционала.\n\n[к оглавлению](#java-collections-framework)\n\n## Что произойдет при вызове `Iterator.next()` без предварительного вызова `Iterator.hasNext()`?\nЕсли итератор указывает на последний элемент коллекции, то возникнет исключение `NoSuchElementException`, иначе будет возвращен следующий элемент.\n\n[к оглавлению](#java-collections-framework)\n\n## Сколько элементов будет пропущено, если `Iterator.next()` будет вызван после 10-ти вызовов `Iterator.hasNext()`?\nНисколько - `hasNext()` осуществляет только проверку наличия следующего элемента.\n\n[к оглавлению](#java-collections-framework)\n\n## Как поведёт себя коллекция, если вызвать `iterator.remove()`?\nЕсли вызову `iterator.remove()` предшествовал вызов `iterator.next()`, то `iterator.remove()` удалит элемент коллекции, на который указывает итератор, в противном случае будет выброшено `IllegalStateException()`.\n\n[к оглавлению](#java-collections-framework)\n\n## Как поведёт себя уже инстанциированный итератор для `collection`, если вызвать `collection.remove()`?\nПри следующем вызове методов итератора будет выброшено `ConcurrentModificationException`.\n\n[к оглавлению](#java-collections-framework)\n\n## Как избежать `ConcurrentModificationException` во время перебора коллекции?\n+ Попробовать подобрать или реализовать самостоятельно другой итератор, работающий по принципу fail-safe.\n+ Использовать `ConcurrentHashMap` и `CopyOnWriteArrayList`.\n+ Преобразовать список в массив и перебирать массив.\n+ Блокировать изменения списка на время перебора с помощью блока `synchronized`.\n\nОтрицательная сторона последних двух вариантов - ухудшение производительности.\n\n[к оглавлению](#java-collections-framework)\n\n## Какая коллекция реализует дисциплину обслуживания FIFO?\nFIFO, First-In-First-Out («первым пришел-первым ушел») - по этому принципу построена коллекция `Queue`.\n\n[к оглавлению](#java-collections-framework)\n\n## Какая коллекция реализует дисциплину обслуживания FILO?\nFILO, First-In-Last-Out («первым пришел, последним ушел») - по этому принципу построена коллекция `Stack`.\n\n[к оглавлению](#java-collections-framework)\n\n## Чем отличается `ArrayList` от `Vector`?\n## Зачем добавили `ArrayList`, если уже был `Vector`?\n+ Методы класса `Vector` синхронизированы, а `ArrayList` - нет;\n+ По умолчанию, `Vector` удваивает свой размер, когда заканчивается выделенная под элементы память. `ArrayList` же увеличивает свой размер только на половину.\n\n`Vector` это устаревший класс и его использование не рекомендовано.\n\n[к оглавлению](#java-collections-framework)\n\n## Чем отличается `ArrayList` от `LinkedList`? В каких случаях лучше использовать первый, а в каких второй?\n`ArrayList` это список, реализованный на основе массива, а `LinkedList` — это классический двусвязный список, основанный на объектах с ссылками между ними.\n\n`ArrayList`:\n\n+ доступ к произвольному элементу по индексу за _константное_ время _O(1)_;\n+ доступ к элементам по значению за _линейное_ время _O(N)_;\n+ вставка в конец в среднем производится за _константное_ время _O(1)_;\n+ удаление произвольного элемента из списка занимает значительное время т.к. при этом все элементы, находящиеся «правее» смещаются на одну ячейку влево (реальный размер массива (capacity) не изменяется);\n+ вставка элемента в произвольное место списка занимает значительное время т.к. при этом все элементы, находящиеся «правее» смещаются на одну ячейку вправо;\n+ минимум накладных расходов при хранении.\n\n`LinkedList`:\n\n+ на получение элемента по индексу или значению потребуется _линейное_ время _O(N)_;\n+ но доступ к первому и последнему элементу списка всегда осуществляется за _константное_ время _O(1)_ — ссылки постоянно хранятся на первый и последний элемент;\n+ на добавление и удаление в начало или конец списка потребуется _константное_ _O(1)_;\n+ вставка или удаление в/из произвольного место _константное_ _O(1)_;\n+ но поиск позиции вставки и удаления за _линейное_ время _O(N)_;\n+ требует больше памяти для хранения такого же количества элементов, потому что кроме самого элемента хранятся еще указатели на следующий и предыдущий элементы списка.\n\nВ целом, `LinkedList` в абсолютных величинах проигрывает `ArrayList` и по потребляемой памяти, и по скорости выполнения операций. `LinkedList` предпочтительно применять, когда нужны частые операции вставки/удаления или в случаях, когда необходимо гарантированное время добавления элемента в список.\n\n[к оглавлению](#java-collections-framework)\n\n## Что работает быстрее `ArrayList` или `LinkedList`?\nСмотря какие действия будут выполняться над структурой. \n\nсм. [Чем отличается `ArrayList` от `LinkedList`](#Чем-отличается-arraylist-от-linkedlist-В-каких-случаях-лучше-использовать-первый-а-в-каких-второй)\n\n[к оглавлению](#java-collections-framework)\n\n## Какое худшее время работы метода `contains()` для элемента, который есть в `LinkedList`?\n_O(N)_. Время поиска элемента линейно пропорционально количеству элементов в списке.\n\n[к оглавлению](#java-collections-framework)\n\n## Какое худшее время работы метода `contains()` для элемента, который есть в `ArrayList`?\n_O(N)_. Время поиска элемента линейно пропорционально количеству элементов с списке.\n\n[к оглавлению](#java-collections-framework)\n\n## Какое худшее время работы метода `add()` для `LinkedList`?\n_O(N)_. Добавление в начало/конец списка осуществляется за время _O(1)_.\n\n[к оглавлению](#java-collections-framework)\n\n## Какое худшее время работы метода `add()` для `ArrayList`?\n_O(N)_. Вставка элемента в конец списка осуществляется за время _O(1)_, но если вместимость массива недостаточна, то происходит создание нового массива с увеличенным размером и копирование всех элементов из старого массива в новый.\n\n[к оглавлению](#java-collections-framework)\n\n## Необходимо добавить 1 млн. элементов, какую структуру вы используете?\nОднозначный ответ можно дать только исходя из информации о том в какую часть списка происходит добавление элементов, что потом будет происходить с элементами списка, существуют ли какие-то ограничения по памяти или скорости выполнения.\n\nсм. [Чем отличается `ArrayList` от `LinkedList`](#Чем-отличается-arraylist-от-linkedlist-В-каких-случаях-лучше-использовать-первый-а-в-каких-второй)\n\n[к оглавлению](#java-collections-framework)\n\n## Как происходит удаление элементов из `ArrayList`? Как меняется в этом случае размер `ArrayList`?\n\nПри удалении произвольного элемента из списка, все элементы, находящиеся «правее» смещаются на одну ячейку влево и реальный размер массива (его емкость, capacity) не изменяется никак. Механизм автоматического «расширения» массива существует, а вот автоматического «сжатия» нет, можно только явно выполнить «сжатие» командой `trimToSize()`.\n\n[к оглавлению](#java-collections-framework)\n\n## Предложите эффективный алгоритм удаления нескольких рядом стоящих элементов из середины списка, реализуемого `ArrayList`.\nДопустим нужно удалить `n` элементов с позиции `m` в списке. Вместо выполнения удаления одного элемента `n` раз (каждый раз смещая на 1 позицию элементы, стоящие «правее» в списке), нужно выполнить смещение всех элементов, стоящих «правее» `n + m` позиции на `n` элементов «левее» к началу списка. Таким образом, вместо выполнения `n` итераций перемещения элементов списка, все выполняется за 1 проход. Но если говорить об общей эффективности - то самый быстрый способ будет с использованием `System.arraycopy()`, и получить к нему доступ можно через метод - `subList(int fromIndex, int toIndex)`\n\nПример:\n\n```java\nimport java.io.*;\nimport java.util.ArrayList;\n\npublic class Main {\n    //позиция, с которой удаляем\n    private static int m = 0;\n    //количество удаляемых элементов\n    private static int n = 0;\n    //количество элементов в списке\n    private static final int size = 1000000;\n    //основной список (для удаления вызовом remove() и его копия для удаления путём перезаписи)\n    private static ArrayList<Integer> initList, copyList;\n    \n    public static void main(String[] args){\n        \n        initList = new ArrayList<>(size);\n        for (int i = 0; i < size; i++) {\n            initList.add(i);\n        }\n        System.out.println(\"Список из 1.000.000 элементов заполнен\");\n        \n        copyList = new ArrayList<>(initList);\n        System.out.println(\"Создана копия списка\\n\");\n        \n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        try{\n            System.out.print(\"С какой позиции удаляем? > \");\n            m = Integer.parseInt(br.readLine());\n            System.out.print(\"Сколько удаляем? > \");\n            n = Integer.parseInt(br.readLine());\n        } catch(IOException e){\n            System.err.println(e.toString());\n        }\n        System.out.println(\"\\nВыполняем удаление вызовом remove()...\");\n        long start = System.currentTimeMillis();\n        \n        for (int i = m - 1; i < m + n - 1; i++) {\n            initList.remove(i);\n        }\n        \n        long finish = System.currentTimeMillis() - start;\n        System.out.println(\"Время удаления с помощью вызова remove(): \" + finish);\n        System.out.println(\"Размер исходного списка после удаления: \" + initList.size());\n        \n        System.out.println(\"\\nВыполняем удаление путем перезаписи...\\n\");\n        start = System.currentTimeMillis();\n        \n        removeEfficiently();\n        \n        finish = System.currentTimeMillis() - start;\n        System.out.println(\"Время удаления путём смещения: \" + finish);\n        System.out.println(\"Размер копии списка:\" + copyList.size());\n\n        System.out.println(\"\\nВыполняем удаление через SubList...\\n\");\n        start = System.currentTimeMillis();\n\n        initList.subList(m - 1, m + n).clear();\n\n        finish = System.currentTimeMillis() - start;\n        System.out.println(\"Время удаления через саблист: \" + finish);\n        System.out.println(\"Размер копии списка:\" + copyList.size());\n    }\n    \n    private static void removeEfficiently(){\n        /* если необходимо удалить все элементы, начиная с указанного,\n         * то удаляем элементы с конца до m\n         */\n        if (m + n >= size){\n            int i = size - 1;\n            while (i != m - 1){\n                copyList.remove(i);\n                i--;\n            }\n        } else{\n            //переменная k необходима для отсчёта сдвига начиная от места вставка m\n            for (int i  = m + n, k = 0; i < size; i++, k++) {\n               copyList.set(m + k, copyList.get(i));\n            }\n            \n            /* удаляем ненужные элементы в конце списка\n             * удаляется всегда последний элемент, так как время этого действия\n             * фиксировано и не зависит от размера списка\n             */\n            int i = size - 1;\n            while (i != size - n - 1){\n                copyList.remove(i);\n                i--;\n            }\n            //сокращаем длину списка путём удаления пустых ячеек\n            copyList.trimToSize();\n        }\n    }\n}\n```\n\nРезультат выполнения:\n```\nrun:\nСписок из 1.000.000 элементов заполнен\nСоздана копия списка\n\nС какой позиции удаляем? > 600000\nСколько удаляем? > 20000\n\nВыполняем удаление вызовом remove()...\nВремя удаления с помощью вызова remove(): 928\nРазмер исходного списка после удаления: 980000\n\nВыполняем удаление путем перезаписи...\n\nВремя удаления путём смещения: 17\nРазмер копии списка:980000\n\nВыполняем удаление через SubList...\n\nВремя удаления через саблист: 1\nРазмер копии списка:980000\nСБОРКА УСПЕШНО ЗАВЕРШЕНА (общее время: 33 секунды)\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Сколько необходимо дополнительной памяти при вызове `ArrayList.add()`?\nЕсли в массиве достаточно места для размещения нового элемента, то дополнительной памяти не требуется. Иначе происходит создание нового массива размером в 1,5 раза превышающим существующий (это верно для JDK выше 1.7, в более ранних версиях размер увеличения иной).\n\n[к оглавлению](#java-collections-framework)\n\n## Сколько выделяется дополнительно памяти при вызове `LinkedList.add()`?\nСоздается один новый экземпляр вложенного класса `Node`.\n\n[к оглавлению](#java-collections-framework)\n\n## Оцените количество памяти на хранение одного примитива типа `byte` в `LinkedList`?\nКаждый элемент `LinkedList` хранит ссылку на предыдущий элемент, следующий элемент и ссылку на данные.\n\n```java\nprivate static class Node<E> {\n        E item;\n        Node<E> next;\n        Node<E> prev;\n//...\n}\n```\n\nДля 32-битных систем каждая ссылка занимает 32 бита (4 байта). Сам объект (заголовок) вложенного класса `Node` занимает 8 байт. 4 + 4 + 4 + 8 = 20 байт, а т.к. размер каждого объекта в Java кратен 8, соответственно получаем 24 байта. Примитив типа `byte` занимает 1 байт памяти, но в JCF примитивы упаковываются: объект типа `Byte` занимает в памяти 16 байт (8 байт на заголовок объекта, 1 байт на поле типа `byte` и 7 байт для кратности 8). Также напомню, что значения от -128 до 127 кэшируются и для них новые объекты каждый раз не создаются. Таким образом, в x32 JVM 24 байта тратятся на хранение одного элемента в списке и 16 байт - на хранение упакованного объекта типа `Byte`. Итого 40 байт.\n\nДля 64-битной JVM каждая ссылка занимает 64 бита (8 байт), размер заголовка каждого объекта составляет 16 байт (два машинных слова). Вычисления аналогичны: 8 + 8 + 8 + 16 = 40байт и 24 байта. Итого 64 байта.\n\n[к оглавлению](#java-collections-framework)\n\n## Оцените количество памяти на хранение одного примитива типа `byte` в `ArrayList`?\n`ArrayList` основан на массиве, для примитивных типов данных осуществляется автоматическая упаковка значения, поэтому 16 байт тратится на хранение упакованного объекта и 4 байта (8 для x64) - на хранение ссылки на этот объект в самой структуре данных. Таким образом, в x32 JVM 4 байта используются на хранение одного элемента и 16 байт - на хранение упакованного объекта типа `Byte`. Для x64 - 8 байт и 24 байта соответственно.\n\n[к оглавлению](#java-collections-framework)\n\n## Для `ArrayList` или для `LinkedList` операция добавления элемента в середину (`list.add(list.size()/2, newElement)`) медленнее?\nДля `ArrayList`:\n\n+ проверка массива на вместимость. Если вместимости недостаточно, то увеличение размера массива и копирование всех элементов в новый массив (_O(N)_);\n+ копирование всех элементов, расположенных правее от позиции вставки, на одну позицию вправо (_O(N)_);\n+ вставка элемента (_O(1)_).\n\nДля `LinkedList`:\n\n+ поиск позиции вставки (_O(N)_);\n+ вставка элемента (_O(1)_).\n\nВ худшем случае вставка в середину списка эффективнее для `LinkedList`. В остальных - скорее всего, для `ArrayList`, поскольку копирование элементов осуществляется за счет вызова быстрого системного метода `System.arraycopy()`.\n\n[к оглавлению](#java-collections-framework)\n\n## В реализации класса `ArrayList` есть следующие поля: `Object[] elementData`, `int size`. Объясните, зачем хранить отдельно `size`, если всегда можно взять `elementData.length`?\nРазмер массива `elementData` представляет собой вместимость (capacity) `ArrayList`, которая всегда больше переменной `size` - реального количества хранимых элементов. При необходимости вместимость автоматически возрастает.\n\n[к оглавлению](#java-collections-framework)\n\n## Сравните интерфейсы `Queue` и `Deque`.\n## Кто кого расширяет: `Queue` расширяет `Deque`, или `Deque` расширяет `Queue`?\n`Queue` - это очередь, которая обычно (но необязательно) строится по принципу FIFO (First-In-First-Out) - соответственно извлечение элемента осуществляется с начала очереди, вставка элемента - в конец очереди. Хотя этот принцип нарушает, к примеру, `PriorityQueue`, использующая «natural ordering» или переданный `Comparator` при вставке нового элемента.\n\n`Deque` (Double Ended Queue) расширяет `Queue` и согласно документации, это линейная коллекция, поддерживающая вставку/извлечение элементов с обоих концов. Помимо этого, реализации интерфейса `Deque` могут строится по принципу FIFO, либо LIFO.\n\nРеализации и `Deque`, и `Queue` обычно не переопределяют методы `equals()` и `hashCode()`, вместо этого используются унаследованные методы класса Object, основанные на сравнении ссылок.\n\n[к оглавлению](#java-collections-framework)\n\n## Почему `LinkedList` реализует и `List`, и `Deque`?\n`LinkedList` позволяет добавлять элементы в начало и конец списка за константное время, что хорошо согласуется с поведением интерфейса `Deque`.\n\n[к оглавлению](#java-collections-framework)\n\n## `LinkedList` — это односвязный, двусвязный или четырехсвязный список?\n`Двусвязный`: каждый элемент `LinkedList` хранит ссылку на предыдущий и следующий элементы.\n\n[к оглавлению](#java-collections-framework)\n\n## Как перебрать элементы `LinkedList` в обратном порядке, не используя медленный `get(index)`?\nДля этого в `LinkedList` есть обратный итератор, который можно получить вызва метод `descendingIterator()`.\n\n[к оглавлению](#java-collections-framework)\n\n## Что позволяет сделать `PriorityQueue`?\nОсобенностью `PriorityQueue` является возможность управления порядком элементов. По-умолчанию, элементы сортируются с использованием «natural ordering», но это поведение может быть переопределено при помощи объекта `Comparator`, который задаётся при создании очереди. Данная коллекция не поддерживает null в качестве элементов.\n\nИспользуя `PriorityQueue`, можно, например, реализовать алгоритм Дейкстры для поиска кратчайшего пути от одной вершины графа к другой. Либо для хранения объектов согласно определённого свойства.\n\n[к оглавлению](#java-collections-framework)\n\n## `Stack` считается «устаревшим». Чем его рекомендуют заменять? Почему?\n`Stack` был добавлен в Java 1.0 как реализация стека LIFO (last-in-first-out) и является расширением коллекции `Vector`, хотя это несколько нарушает понятие стека (например, класс `Vector` предоставляет возможность обращаться к любому элементу по индексу). Является частично синхронизированной коллекцией (кроме метода добавления `push()`) с вытекающими отсюда последствиями в виде негативного воздействия на производительность. После добавления в Java 1.6 интерфейса `Deque`, рекомендуется использовать реализации именно этого интерфейса, например, `ArrayDeque`.\n\n[к оглавлению](#java-collections-framework)\n\n## Зачем нужен `HashMap`, если есть `Hashtable`?\n+ Методы класса `Hashtable` синхронизированы, что приводит к снижению производительности, а `HashMap` - нет;\n+ `HashTable` не может содержать элементы `null`, тогда как `HashMap` может содержать один ключ `null` и любое количество значений `null`;\n+ Iterator у `HashMap`, в отличие от Enumeration у `HashTable`, работает по принципу «fail-fast» (выдает исключение при любой несогласованности данных).\n\n`Hashtable` это устаревший класс и его использование не рекомендовано.\n\n[к оглавлению](#java-collections-framework)\n\n## В чем разница между `HashMap` и `IdentityHashMap`? Для чего нужна `IdentityHashMap`?\n`IdentityHashMap` - это структура данных, так же реализующая интерфейс `Map` и использующая при сравнении ключей (значений) сравнение ссылок, а не вызов метода `equals()`. Другими словами, в `IdentityHashMap` два ключа `k1` и `k2` будут считаться равными, если они указывают на один объект, т.е. выполняется условие `k1` == `k2`.\n\n`IdentityHashMap` не использует метод `hashCode()`, вместо которого применяется метод `System.identityHashCode()`, по этой причине `IdentityHashMap` по сравнению с `HashMap` имеет более высокую производительность, особенно если последний хранит объекты с дорогостоящими методами `equals()` и `hashCode()`.\n\nОдним из основных требований к использованию `HashMap` является неизменяемость ключа, а, т.к. `IdentityHashMap` не использует методы  `equals()` и `hashCode()`, то это правило на него не распространяется.\n\n`IdentityHashMap` может применяться для реализации сериализации/клонирования. При выполнении подобных алгоритмов программе необходимо обслуживать хэш-таблицу со всеми ссылками на объекты, которые уже были обработаны. Такая структура не должна рассматривать уникальные объекты как равные, даже если метод `equals()` возвращает `true`.\n\nПример кода:\n```java\nimport java.util.HashMap;\nimport java.util.IdentityHashMap;\nimport java.util.Map;\n\npublic class Q2 {\n\n    public static void main(String[] args) {\n        Q2 q = new Q2();\n        q.testHashMapAndIdentityHashMap();\n    }\n\n    private void testHashMapAndIdentityHashMap() {\n        CreditCard visa = new CreditCard(\"VISA\", \"04/12/2019\");\n\n        Map<CreditCard, String> cardToExpiry = new HashMap<>();\n        Map<CreditCard, String> cardToExpiryIdenity = new IdentityHashMap<>();\n\n        System.out.println(\"adding to HM\");\n        // inserting objects to HashMap\n        cardToExpiry.put(visa, visa.getExpiryDate());\n\n        // inserting objects to IdentityHashMap\n        cardToExpiryIdenity.put(visa, visa.getExpiryDate());\n        System.out.println(\"adding to IHM\");\n\n        System.out.println(\"before modifying keys\");\n        String result = cardToExpiry.get(visa) != null ? \"Yes\" : \"No\";\n        System.out.println(\"Does VISA card exists in HashMap? \" + result);\n\n        result = cardToExpiryIdenity.get(visa) != null ? \"Yes\" : \"No\";\n        System.out.println(\"Does VISA card exists in IdenityHashMap? \" + result);\n\n        // modifying value object\n        visa.setExpiryDate(\"02/11/2030\");\n\n        System.out.println(\"after modifying keys\");\n        result = cardToExpiry.get(visa) != null ? \"Yes\" : \"No\";\n        System.out.println(\"Does VISA card exists in HashMap? \" + result);\n\n        result = cardToExpiryIdenity.get(visa) != null ? \"Yes\" : \"No\";\n        System.out.println(\"Does VISA card exists in IdenityHashMap? \" + result);\n\n        System.out.println(\"cardToExpiry.containsKey\");\n        System.out.println(cardToExpiry.containsKey(visa));\n        System.out.println(\"cardToExpiryIdenity.containsKey\");\n        System.out.println(cardToExpiryIdenity.containsKey(visa));\n    }\n\n}\n\nclass CreditCard {\n    private String issuer;\n    private String expiryDate;\n\n    public CreditCard(String issuer, String expiryDate) {\n        this.issuer = issuer;\n        this.expiryDate = expiryDate;\n    }\n\n    public String getIssuer() {\n        return issuer;\n    }\n\n    public String getExpiryDate() {\n        return expiryDate;\n    }\n\n    public void setExpiryDate(String expiry) {\n        this.expiryDate = expiry;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((expiryDate == null) ? 0 : expiryDate.hashCode());\n        result = prime * result + ((issuer == null) ? 0 : issuer.hashCode());\n        System.out.println(\"hashCode = \" + result);\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        System.out.println(\"equals !!! \");\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        CreditCard other = (CreditCard) obj;\n        if (expiryDate == null) {\n            if (other.expiryDate != null)\n                return false;\n        } else if (!expiryDate.equals(other.expiryDate))\n            return false;\n        if (issuer == null) {\n            if (other.issuer != null)\n                return false;\n        } else if (!issuer.equals(other.issuer))\n            return false;\n        return true;\n    }\n\n}\n```\n\nРезультат выполнения кода:\n```\nadding to HM\nhashCode = 1285631513\nadding to IHM\nbefore modifying keys\nhashCode = 1285631513\nDoes VISA card exists in HashMap? Yes\nDoes VISA card exists in IdenityHashMap? Yes\nafter modifying keys\nhashCode = 791156485\nDoes VISA card exists in HashMap? No\nDoes VISA card exists in IdenityHashMap? Yes\ncardToExpiry.containsKey\nhashCode = 791156485\nfalse\ncardToExpiryIdenity.containsKey\ntrue\n```\n\n[к оглавлению](#java-collections-framework)\n\n## В чем разница между `HashMap` и `WeakHashMap`? Для чего используется `WeakHashMap`?\nВ Java существует 4 типа ссылок: _сильные (strong reference)_, _мягкие (SoftReference)_, _слабые (WeakReference)_ и _фантомные (PhantomReference)_. Особенности каждого типа ссылок связаны с работой Garbage Collector. Если объект можно достичь только с помощью цепочки WeakReference (то есть на него отсутствуют сильные и мягкие ссылки), то данный объект будет помечен на удаление.\n\n`WeakHashMap` - это структура данных, реализующая интерфейс `Map` и основанная на использовании WeakReference для хранения ключей. Таким образом, пара «ключ-значение» будет удалена из `WeakHashMap`, если на объект-ключ более не имеется сильных ссылок.\n\nВ качестве примера использования такой структуры данных можно привести следующую ситуацию: допустим имеются объекты, которые необходимо расширить дополнительной информацией, при этом изменение класса этих объектов нежелательно либо невозможно. В этом случае добавляем каждый объект в `WeakHashMap` в качестве ключа, а в качестве значения - нужную информацию. Таким образом, пока на объект имеется сильная ссылка (либо мягкая), можно проверять хэш-таблицу и извлекать информацию. Как только объект будет удален, то WeakReference для этого ключа будет помещен в ReferenceQueue и затем соответствующая запись для этой слабой ссылки будет удалена из `WeakHashMap`.\n\n[к оглавлению](#java-collections-framework)\n\n## В `WeakHashMap` используются WeakReferences. А почему бы не создать `SoftHashMap` на SoftReferences?\n`SoftHashMap` представлена в сторонних библиотеках, например, в `Apache Commons`.\n\n[к оглавлению](#java-collections-framework)\n\n## В `WeakHashMap` используются WeakReferences. А почему бы не создать `PhantomHashMap` на PhantomReferences?\nPhantomReference при вызове метода `get()` возвращает всегда `null`, поэтому тяжело представить назначение такой структуры данных.\n\n[к оглавлению](#java-collections-framework)\n\n## `LinkedHashMap` - что в нем от `LinkedList`, а что от `HashMap`?\nРеализация `LinkedHashMap` отличается от `HashMap` поддержкой двухсвязанного списка, определяющего порядок итерации по элементам структуры данных. По умолчанию элементы списка упорядочены согласно их порядку добавления в `LinkedHashMap` (insertion-order). Однако порядок итерации можно изменить, установив параметр конструктора `accessOrder` в значение `true`. В этом случае доступ осуществляется по порядку последнего обращения к элементу (access-order). Это означает, что при вызове методов `get()` или `put()` элемент, к которому обращаемся, перемещается в конец списка.\n\nПри добавлении элемента, который уже присутствует в `LinkedHashMap` (т.е. с одинаковым ключом), порядок итерации по элементам не изменяется.\n\n[к оглавлению](#java-collections-framework)\n\n## В чем проявляется «сортированность» `SortedMap`, кроме того, что `toString()` выводит все элементы по порядку?\nТак же оно проявляется при итерации по коллекции.\n\n[к оглавлению](#java-collections-framework)\n\n## Как устроен `HashMap`?\n`HashMap` состоит из «корзин» (bucket). С технической точки зрения «корзины» — это элементы массива, которые хранят ссылки на списки элементов. При добавлении новой пары «ключ-значение», вычисляет хэш-код ключа, на основании которого вычисляется номер корзины (номер ячейки массива), в которую попадет новый элемент. Если корзина пустая, то в нее сохраняется ссылка на вновь добавляемый элемент, если же там уже есть элемент, то происходит последовательный переход по ссылкам между элементами в цепочке, в поисках последнего элемента, от которого и ставится ссылка на вновь добавленный элемент. Если в списке был найден элемент с таким же ключом, то он заменяется.\n\n[к оглавлению](#java-collections-framework)\n\n## Согласно Кнуту и Кормену существует две основных реализации хэш-таблицы: на основе открытой адресации и на основе метода цепочек. Как реализована `HashMap`? Почему, по вашему мнению, была выбрана именно эта реализация? В чем плюсы и минусы каждого подхода?\n`HashMap` реализован с использованием метода цепочек, т.е. каждой ячейке массива (корзине) соответствует свой связный список и при возникновении коллизии осуществляется добавление нового элемента в этот список.\n\nДля метода цепочек коэффициент заполнения может быть больше 1 и с увеличением числа элементов производительность убывает линейно. Такие таблицы удобно использовать, если заранее неизвестно количество хранимых элементов, либо их может быть достаточно много, что приводит к большим значениям коэффициента заполнения.\n\nСреди методов открытой адресации различают:\n\n+ линейное пробирование;\n+ квадратичное пробирование;\n+ двойное хэширование.\n\nНедостатки структур с методом открытой адресации:\n\n+ Количество элементов в хэш-таблице не может превышать размера массива. По мере увеличения числа элементов и повышения коэффициента заполнения производительность структуры резко падает, поэтому необходимо проводить перехэширование.\n+ Сложно организовать удаление элемента.\n+ Первые два метода открытой адресации приводят к проблеме первичной и вторичной группировок.\n\nПреимущества хэш-таблицы с открытой адресацией: \n\n+ отсутствие затрат на создание и хранение объектов списка; \n+ простота организации сериализации/десериализации объекта.\n\n[к оглавлению](#java-collections-framework)\n\n## Как работает `HashMap` при попытке сохранить в него два элемента по ключам с одинаковым `hashCode()`, но для которых `equals() == false`?\nПо значению `hashCode()` вычисляется индекс ячейки массива, в список которой этот элемент будет добавлен. Перед добавлением осуществляется проверка на наличие элементов в этой ячейке. Если элементы с таким `hashCode()` уже присутствует, но их `equals()` методы не равны, то элемент будет добавлен в конец списка.\n\n[к оглавлению](#java-collections-framework)\n\n## Какое начальное количество корзин в `HashMap`?\nВ конструкторе по умолчанию - 16, используя конструкторы с параметрами можно задавать произвольное начальное количество корзин.\n\n[к оглавлению](#java-collections-framework)\n\n## Какова оценка временной сложности операций над элементами из `HashMap`? Гарантирует ли `HashMap` указанную сложность выборки элемента?\nВ общем случае операции добавления, поиска и удаления элементов занимают константное время. \n\nДанная сложность не гарантируется, т.к. если хэш-функция распределяет элементы по корзинам равномерно, временная сложность станет не хуже [_Логарифмического времени_ ](https://ru.wikipedia.org/wiki/%D0%92%D1%80%D0%B5%D0%BC%D0%B5%D0%BD%D0%BD%D0%B0%D1%8F_%D1%81%D0%BB%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D1%8C_%D0%B0%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC%D0%B0#%D0%9B%D0%BE%D0%B3%D0%B0%D1%80%D0%B8%D1%84%D0%BC%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%BE%D0%B5_%D0%B2%D1%80%D0%B5%D0%BC%D1%8F) O(log(N)), а в случае, когда хэш-функция постоянно возвращает одно и то же значение, `HashMap` превратится в связный список со сложностью О(n).\n\nПример кода двоичного поиска:\n```java\npublic class Q {\n    public static void main(String[] args) {\n        Q q = new Q();\n        q.binSearch();\n    }\n\n    private void binSearch() {\n        int[] inpArr = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n        Integer result = binSearchF(inpArr, 1, 0, inpArr.length - 1);\n        System.out.println(\"-----------------------\");\n        result = binSearchF(inpArr, 2, 0, inpArr.length - 1);\n        System.out.println(\"Found at position \" + result);\n    }\n\n    private Integer binSearchF(int[] inpArr, int searchValue, int low, int high) {\n        Integer index = null;\n        while (low <= high) {\n            System.out.println(\"New iteration, low = \" + low + \", high = \" + high);\n            int mid = (low + high) / 2;\n            System.out.println(\"trying mid = \" + mid + \" inpArr[mid] = \" + inpArr[mid]);\n            if (inpArr[mid] < searchValue) {\n                low = mid + 1;\n                System.out.println(\"inpArr[mid] (\" + inpArr[mid] + \") < searchValue(\" + searchValue + \"), mid = \" + mid\n                        + \", setting low = \" + low);\n            } else if (inpArr[mid] > searchValue) {\n                high = mid - 1;\n                System.out.println(\"inpArr[mid] (\" + inpArr[mid] + \") > searchValue(\" + searchValue + \"), mid = \" + mid\n                        + \", setting high = \" + high);\n            } else if (inpArr[mid] == searchValue) {\n                index = mid;\n                System.out.println(\"found at index \" + mid);\n                break;\n            }\n        }\n        return index;\n    }\n}\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Возможна ли ситуация, когда `HashMap` выродится в список даже с ключами имеющими разные `hashCode()`?\nЭто возможно в случае, если метод, определяющий номер корзины будет возвращать одинаковые значения.\n\n[к оглавлению](#java-collections-framework)\n\n## В каком случае может быть потерян элемент в `HashMap`?\nДопустим, в качестве ключа используется не примитив, а объект с несколькими полями. После добавления элемента в `HashMap` у объекта, который выступает в качестве ключа, изменяют одно поле, которое участвует в вычислении хэш-кода. В результате при попытке найти данный элемент по исходному ключу, будет происходить обращение к правильной корзине, а вот `equals` уже не найдет указанный ключ в списке элементов. Тем не менее, даже если `equals` реализован таким образом, что изменение данного поля объекта не влияет на результат, то после увеличения размера корзин и пересчета хэш-кодов элементов, указанный элемент, с измененным значением поля, с большой долей вероятности попадет в совершенно другую корзину и тогда уже потеряется совсем.\n\n[к оглавлению](#java-collections-framework)\n\n## Почему нельзя использовать `byte[]` в качестве ключа в `HashMap`?\nХэш-код массива не зависит от хранимых в нем элементов, а присваивается при создании массива (метод вычисления хэш-кода массива не переопределен и вычисляется по стандартному `Object.hashCode()` на основе алгоритма генерации простых чисел). Так же у массивов не переопределен `equals` и выполняется сравнение указателей. Это приводит к тому, что обратиться к сохраненному с ключом-массивом элементу не получится при использовании другого массива такого же размера и с такими же элементами, доступ можно осуществить лишь в одном случае — при использовании той же самой ссылки на массив, что использовалась для сохранения элемента.\n\n[к оглавлению](#java-collections-framework)\n\n## Какова роль `equals()` и `hashCode()` в `HashMap`?\n`hashCode` позволяет определить корзину для поиска элемента, а `equals` используется для сравнения ключей элементов в списке корзины и искомого ключа.\n\n[к оглавлению](#java-collections-framework)\n\n## Каково максимальное число значений `hashCode()`?\nЧисло значений следует из сигнатуры `int hashCode()` и равно диапазону типа `int` — __2<sup>32</sup>__.\n\n[к оглавлению](#java-collections-framework)\n\n## Какое худшее время работы метода get(key) для ключа, которого нет в `HashMap`?\n## Какое худшее время работы метода get(key) для ключа, который есть в `HashMap`?\n___O(N)___. Худший случай - это поиск ключа в `HashMap`, вырожденного в список по причине совпадения ключей по `hashCode()` и для выяснения хранится ли элемент с определённым ключом может потребоваться перебор всего списка.\n\nНо начиная с Java 8, после определенного числа элементов в списке, связный список преобразовывается в красно-черное дерево и сложность выборки, даже в случае плохой хеш-функции, не хуже _логарифмической_ _O(log(N))_\n\n[к оглавлению](#java-collections-framework)\n\n## Почему несмотря на то, что ключ в `HashMap` не обязан реализовывать интерфейс `Comparable`, двусвязный список всегда удается преобразовать в красно-черное дерево? \nКрасно-черное дерево - это самобалансирующееся бинарное дерево поиска. Это означает, что для его построения нужно уметь сравнивать элементы между собой. \n\nВ Java обычно сравнение объектов происходит с помощью метода `compareTo()`, который определен в интерфейсе `Comparable`. На первый взгляд кажется логичным, если бы после Java 8 у ключа в `HashMap` появилось дополнительное требование - реализовывать `Comparable`.\n\nЧтобы избежать этого, используется следующий алгоритм при сравнении ключей:\n1. Сначала делается попытка сравнить хэши ключей\n2. Если хэши равны и оба ключа реализуют `Comparable`, то для сравнения вызывается метод `compareTo()`\n3. Если ключи не реализуют `Comparable`, то сравнение происходит с помощью метода `tieBreakOrder()`, в котором\n    + сначала будет совершена попытка сравнить ключи через названия их классов (`getClass().getName()`)\n    + если ключи являются экземплярами одного класса, то сравниваться будут результаты метода `System.identityHashCode()`\n\n[к оглавлению](#java-collections-framework)\n\n## Сколько переходов происходит в момент вызова `HashMap.get(key)` по ключу, который есть в таблице?\n+ ключ равен `null`: __1__ - выполняется единственный метод `getForNullKey()`.\n+ любой ключ отличный от `null`: __4__ - вычисление хэш-кода ключа; определение номера корзины; поиск значения; возврат значения.\n\n[к оглавлению](#java-collections-framework)\n\n## Сколько создается новых объектов, когда вы добавляете новый элемент в `HashMap`?\n__Один__ новый объект статического вложенного класса `Entry<K,V>`.\n\n[к оглавлению](#java-collections-framework)\n\n## Как и когда происходит увеличение количества корзин в `HashMap`?\nПомимо `capacity` у `HashMap` есть еще поле `loadFactor`, на основании которого, вычисляется предельное количество занятых корзин `capacity * loadFactor`. По умолчанию `loadFactor = 0.75`. По достижению предельного значения, число корзин увеличивается в 2 раза и для всех хранимых элементов вычисляется новое «местоположение» с учетом нового числа корзин.\n\n[к оглавлению](#java-collections-framework)\n\n## Объясните смысл параметров в конструкторе `HashMap(int initialCapacity, float loadFactor)`.\n+ `initialCapacity` - исходный размер `HashMap`, количество корзин в хэш-таблице в момент её создания.\n+ `loadFactor` - коэффициент заполнения `HashMap`, при превышении которого происходит увеличение количества корзин и автоматическое перехэширование. Равен отношению числа уже хранимых элементов в таблице к её размеру. \n\n[к оглавлению](#java-collections-framework)\n\n## Будет ли работать `HashMap`, если все добавляемые ключи будут иметь одинаковый `hashCode()`?\nДа, будет, но в этом случае `HashMap` вырождается в связный список и теряет свои преимущества.\n\n## Как перебрать все ключи `Map`?\nИспользовать метод `keySet()`, который возвращает множество `Set<K>` ключей.\n\n[к оглавлению](#java-collections-framework)\n\n## Как перебрать все значения `Map`?\nИспользовать метод `values()`, который возвращает коллекцию `Collection<V>` значений.\n\n[к оглавлению](#java-collections-framework)\n\n## Как перебрать все пары «ключ-значение» в `Map`?\nИспользовать метод `entrySet()`, который возвращает множество `Set<Map.Entry<K, V>` пар «ключ-значение».\n\n[к оглавлению](#java-collections-framework)\n\n## В чем отличия `TreeSet` и `HashSet`?\n`TreeSet` обеспечивает упорядоченно хранение элементов в виде красно-черного дерева. Сложность выполнения основных операций не хуже _O(log(N))_ (_Логарифмическое время_). \n\n`HashSet` использует для хранения элементов такой же подход, что и `HashMap`, за тем отличием, что в `HashSet` в качестве ключа и значения выступает сам `элемент`, кроме того, `HashSet` не поддерживает упорядоченное хранение элементов и обеспечивает временную сложность выполнения операций аналогично `HashMap`.\n\n[к оглавлению](#java-collections-framework)\n\n## Что будет, если добавлять элементы в `TreeSet` по возрастанию?\nВ основе `TreeSet` лежит красно-черное дерево, которое умеет само себя балансировать. В итоге, `TreeSet` все равно в каком порядке вы добавляете в него элементы, преимущества этой структуры данных будут сохраняться.\n\n[к оглавлению](#java-collections-framework)\n\n## Чем `LinkedHashSet` отличается от `HashSet`?\n`LinkedHashSet` отличается от `HashSet` только тем, что в его основе лежит `LinkedHashMap` вместо `HashMap`. Благодаря этому порядок элементов при обходе коллекции является идентичным порядку добавления элементов (insertion-order). При добавлении элемента, который уже присутствует в `LinkedHashSet` (т.е. с одинаковым ключом), порядок обхода элементов не изменяется.\n\n[к оглавлению](#java-collections-framework)\n\n## Для `Enum` есть специальный класс `java.util.EnumSet`. Зачем? Чем авторов не устраивал `HashSet` или `TreeSet`?\n`EnumSet` - это реализация интерфейса `Set` для использования с перечислениями (`Enum`). В структуре данных хранятся объекты только одного типа `Enum`, указываемого при создании. Для хранения значений `EnumSet` использует массив битов (_bit vector_), - это позволяет получить высокую компактность и эффективность. Проход по `EnumSet` осуществляется согласно порядку объявления элементов перечисления. \n\nВсе основные операции выполняются за _O(1)_ и обычно (но негарантированно) быстрей аналогов из `HashSet`, а пакетные операции (_bulk operations_), такие как `containsAll()` и `retainAll()` выполняются даже гораздо быстрей. \n\nПомимо всего `EnumSet` предоставляет множество статических методов инициализации для упрощенного и удобного создания экземпляров.\n\n[к оглавлению](#java-collections-framework)\n\n## Какие существуют способы перебирать элементы списка?\n+ Цикл с итератором\n\n```java\nIterator<String> iterator = list.iterator();\nwhile (iterator.hasNext()) {\n    //iterator.next();\n}\n```\n\n+ Цикл `for`\n\n```java\nfor (int i = 0; i < list.size(); i++) {\n    //list.get(i);\n}\n```\n\n+ Цикл `while`\n\n```java\nint i = 0;\nwhile (i < list.size()) {\n    //list.get(i);\n    i++;\n}\n```\n\n+ «for-each»\n\n```java\nfor (String element : list) {\n    //element;\n}\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Каким образом можно получить синхронизированные объекты стандартных коллекций?\nС помощью статических методов `synchronizedMap()` и `synchronizedList()` класса `Collections`. Данные методы возвращают синхронизированный декоратор переданной коллекции. При этом все равно в случае обхода по коллекции требуется ручная синхронизация. \n\n```java\n  Map m = Collections.synchronizedMap(new HashMap());\n  List l = Collections.synchronizedList(new ArrayList());\n```\n\nНачиная с Java 6 JCF был расширен специальными коллекциями, поддерживающими многопоточный доступ, такими как `CopyOnWriteArrayList` и `ConcurrentHashMap`.\n\n[к оглавлению](#java-collections-framework)\n\n## Как получить коллекцию только для чтения?\nПри помощи:\n\n+ `Collections.unmodifiableList(list)`;\n+ `Collections.unmodifiableSet(set)`;\n+ `Collections.unmodifiableMap(map)`.\n\nЭти методы принимают коллекцию в качестве параметра, и возвращают коллекцию только для чтения с теми же элементами внутри.\n\n[к оглавлению](#java-collections-framework)\n\n## Напишите однопоточную программу, которая заставляет коллекцию выбросить `ConcurrentModificationException`.\n```java\npublic static void main(String[] args) {\n    List<Integer> list = new ArrayList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n\n    for (Integer integer : list) {\n        list.remove(1);\n    }\n}\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Приведите пример, когда какая-либо коллекция выбрасывает `UnsupportedOperationException`.\n```java\npublic static void main(String[] args) {\n    List<Integer> list = Collections.emptyList();\n    list.add(0);\n}\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Реализуйте симметрическую разность двух коллекций используя методы `Collection` (`addAll(...)`, `removeAll(...)`, `retainAll(...)`).\nСимметрическая разность двух коллекций - это множество элементов, одновременно не принадлежащих обоим исходным коллекциям.\n\n```java\n<T> Collection<T> symmetricDifference(Collection<T> a, Collection<T> b) {    \n    // Объединяем коллекции.\n    Collection<T> result = new ArrayList<>(a);\n    result.addAll(b);\n    \n    // Получаем пересечение коллекций.\n    Collection<T> intersection = new ArrayList<>(a);\n    intersection.retainAll(b);\n    \n    // Удаляем элементы, расположенные в обоих коллекциях.\n    result.removeAll(intersection);\n\n    return result;\n}\n```\n[к оглавлению](#java-collections-framework)\n\n## Как, используя LinkedHashMap, сделать кэш c «invalidation policy»?\nНеобходимо использовать _LRU-алгоритм (Least Recently Used algorithm)_ и `LinkedHashMap` с access-order. В этом случае при обращении к элементу он будет перемещаться в конец списка, а наименее используемые элементы будут постепенно группироваться в начале списка. Так же в стандартной реализации `LinkedHashMap` есть метод `removeEldestEntries()`, который возвращает `true`, если текущий объект `LinkedHashMap` должен удалить наименее используемый элемент из коллекции при использовании методов `put()` и `putAll()`.\n\n```java\npublic class LRUCache<K, V> extends LinkedHashMap<K, V> {\n    private static final int MAX_ENTRIES = 10;\n\n    public LRUCache(int initialCapacity) {\n        super(initialCapacity, 0.85f, true);\n    }\n\n    @Override\n    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n        return size() > MAX_ENTRIES;\n    }\n}\n```\n\nСтоит заметить, что `LinkedHashMap` не позволяет полностью реализовать LRU-алгоритм, поскольку при вставке уже имеющегося в коллекции элемента порядок итерации по элементам не меняется.\n\n[к оглавлению](#java-collections-framework)\n\n## Как одной строчкой скопировать элементы любой `collection` в массив?\n```java\nObject[] array = collection.toArray();\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Как одним вызовом из `List` получить `List` со всеми элементами, кроме первых и последних 3-х?\n```java\nList<Integer> subList = list.subList(3, list.size() - 3);\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Как одной строчкой преобразовать `HashSet` в `ArrayList`?\n```java\nArrayList<Integer> list = new ArrayList<>(new HashSet<>());\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Как одной строчкой преобразовать `ArrayList` в `HashSet`?\n```java\nHashSet<Integer> set = new HashSet<>(new ArrayList<>());\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Сделайте `HashSet` из ключей `HashMap`.\n```java\nHashSet<Object> set = new HashSet<>(map.keySet());\n```\n\n[к оглавлению](#java-collections-framework)\n\n## Сделайте `HashMap` из `HashSet<Map.Entry<K, V>>`.\n```java\nHashMap<K, V> map = new HashMap<>(set.size());\nfor (Map.Entry<K, V> entry : set) {\n    map.put(entry.getKey(), entry.getValue());\n}\n```\n\n[к оглавлению](#java-collections-framework)\n\n# Источник\n+ [parshinpn.pro](http://www.parshinpn.pro/content/voprosy-i-otvety-na-sobesedovanii-po-teme-java-collection-framework-chast-1)\n+ [Хабрахабр](https://habrahabr.ru/post/162017/)\n+ [Quizful](http://www.quizful.net/interview/java)\n+ [JavaRush](http://info.javarush.ru/)\n+ [Хабрахабр:Справочник по Java Collections Framework](https://habrahabr.ru/post/237043/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "jdbc.md",
          "type": "blob",
          "size": 24.490234375,
          "content": "[Вопросы для собеседования](README.md)\n\n# JDBC\n+ [Что такое _JDBC_?](#Что-такое-jdbc)\n+ [В чем заключаются преимущества использования JDBC?](#В-чем-заключаются-преимущества-использования-jdbc)\n+ [Что из себя представляет JDBC URL?](#Что-из-себя-представляет-jdbc-url)\n+ [Из каких частей стоит JDBC?](#Из-каких-частей-стоит-jdbc)\n+ [Перечислите-основные-классы-и-интерфейсы-jdbc](#Перечислите-основные-классы-и-интерфейсы-jdbc)\n+ [Опишите основные этапы работы с базой данных с использованием JDBC.](#Опишите-основные-этапы-работы-с-базой-данных-при-использовании-jdbc)\n+ [Перечислите основные типы данных используемые в JDBC. Как они связаны с типами Java?](#Перечислите-основные-типы-данных-используемые-в-JDBC.-Как-они-связаны-с-типами-Java)\n+ [Как зарегистрировать драйвер JDBC?](#Как-зарегистрировать-драйвер-jdbc)\n+ [Как установить соединение с базой данных?](#Как-установить-соединение-с-базой-данных)\n+ [Какие уровни изоляции транзакций поддерживаются в JDBC?](#Какие-уровни-изоляции-транзакций-поддерживаются-в-jdbc)\n+ [При помощи чего формируются запросы к базе данных?](#При-помощи-чего-формируются-запросы-к-базе-данных)\n+ [Чем отличается Statement от PreparedStatement?](#Чем-отличается-statement-от-preparedstatement)\n+ [Как осуществляется запрос к базе данных и обработка результатов?](#Как-осуществляется-запрос-к-базе-данных-и-обработка-результатов)\n+ [Как вызвать хранимую процедуру?](#Как-вызвать-хранимую-процедуру)\n+ [Как закрыть соединение с базой данных?](#Как-закрыть-соединение-с-базой-данных)\n\n## Что такое _JDBC_?\n__JDBC, Java DataBase Connectivity (соединение с базами данных на Java)__ — промышленный стандарт взаимодействия Java-приложений с различными СУБД. Реализован в виде пакета `java.sql`, входящего в состав Java SE.\n\nJDBC основан на концепции драйверов, которые позволяют получать соединение с базой данных по специально описанному URL. При загрузке драйвер регистрирует себя в системе и в дальнейшем автоматически вызывается, когда программа требует URL, содержащий протокол, за который этот драйвер отвечает.\n\n[к оглавлению](#jdbc)\n\n## В чем заключаются преимущества использования JDBC?\nПреимуществами JDBC считают:\n\n+ Лёгкость разработки: разработчик может не знать специфики базы данных, с которой работает;\n+ Код практически не меняется, если компания переходит на другую базу данных (количество изменений зависит исключительно от различий между диалектами SQL);\n+ Не нужно дополнительно устанавливать клиентскую программу;\n+ К любой базе данных можно подсоединиться через легко описываемый URL.\n\n[к оглавлению](#jdbc)\n\n## Что из себя представляет JDBC URL?\n__JDBC URL__ состоит из:\n\n+ `<protocol>:` (протокола) - всегда `jdbc:`.\n+ `<subprotocol>:` (подпротокола) - это имя драйвера или имя механизма соединения с базой данных. Подпротокол может поддерживаться одним или несколькими драйверами. Лежащий на поверхности пример подпротокола - это \"odbc\", отведенный для URL, обозначающих имя источника данных ODBC. В случае необходимости использовать сервис имен (т.е. имя базы данных в JDBC URL не будет действительным именем базы данных), то подпротоколом может выступать сервис имен.\n+ `<subname>` (подимени) - это идентификатор базы данных. Значение подимени может менятся в зависимости от подпротокола, и может также иметь под-подимя с синтаксисом, определяемым разработчиком драйвера. Назначение подимени - это предоставление всей информации, необходимой для поиска базы данных. Например, если база данных находится в Интернет, то в состав подимени JDBC URL должен быть включен сетевой адрес, подчиняющийся следующим соглашениям: `//<hostname>:<port>/<subsubname`.\n\nПример JDBC URL для подключения к MySQL базе данных «Test» расположенной по адресу localhost и ожидающей соединений по порту 3306: `jdbc:mysql://localhost:3306/Test`\n\n[к оглавлению](#jdbc)\n\n## Из каких частей стоит JDBC?\nJDBC состоит из двух частей:\n\n+ __JDBC API__, который содержит набор классов и интерфейсов, определяющих доступ к базам данных. Эти классы и методы объявлены в двух пакетах - `java.sql` и `javax.sql`;\n+ __JDBC-драйвер__, компонент, специфичный для каждой базы данных. \n\nJDBC превращает вызовы уровня API в «родные» команды того или иного сервера баз данных.\n\n[к оглавлению](#jdbc)\n\n## Перечислите основные классы и интерфейсы JDBC.\n+ `java.sql.DriverManager` - позволяет загрузить и зарегистрировать необходимый JDBC-драйвер, а затем получить соединение с базой данных.\n\n+ `javax.sql.DataSource` - решает те же задачи, что и _DriverManager_, но более удобным и универсальным образом. Существуют также `javax.sql.ConnectionPoolDataSource` и `javax.sq1.XADataSource` задача которых - обеспечение поддержки пула соединений.\n\n+ `java.sql.Connection`  - обеспечивает формирование запросов к источнику данных и управление транзакциями. Также предусмотрены интерфейсы `javax.sql.PooledConnection` и `javax.sql.XAConnection`.\n\n+ `java.sql.Statement` , `java.sql.PreparedStatement` и `java.sql.CallableStatement`  - эти интерфейсы позволяют отправить запрос к источнику данных.\n\n+ `java.sql.ResultSet`  - объявляет методы, которые позволяют перемещаться по набору данных и считывать значения отдельных полей в текущей записи.\n\n+ `java.sql.ResultSetMetaData`  - позволяет получить информацию о структуре набора данных.\n\n+ `java.sql.DatabaseMetaData` - позволяет получить информацию о структуре источника данных.\n\n[к оглавлению](#jdbc)\n\n## Перечислите основные типы данных используемые в JDBC. Как они связаны с типами Java?\n\n| JDBC Type | Java Object Type |\n|---------------:|---------------------------|\n| __CHAR__ | `String` |\n| __VARCHAR__ | `String` |\n| __LONGVARCHAR__ | `String` |\n| __NUMERIC__ | `java.math.BigDecimal` |\n| __DECIMAL__ | `java.math.BigDecimal` |\n| __BIT__ | `Boolean` |\n| __TINYINT__ | `Integer` |\n| __SMALLINT__ | `Integer` |\n| __INTEGER__ | `Integer` |\n| __BIGINT__ | `Long` |\n| __REAL__ | `Float` |\n| __FLOAT__ | `Double` |\n| __DOUBLE__ | `Double` |\n| __BINARY__ | `byte[]` |\n| __VARBINARY__ | `byte[]` |\n| __LONGVARBINARY__ | `byte[]` |\n| __DATE__ | `java.sql.Date` |\n| __TIME__ | `java.sql.Time` |\n| __TIMESTAMP__ | `java.sql.Timestamp` |\n| __CLOB__ | `Clob` |\n| __BLOB__ | `Blob` |\n| __ARRAY__ | `Array` |\n| __STRUCT__ | `Struct`|\n| __REF__ | `Ref` |\n| __DISTINCT__ | сопоставление базового типа |\n| __JAVA_OBJECT__ | базовый класс Java |\n\n[к оглавлению](#jdbc)\n\n## Опишите основные этапы работы с базой данных при использовании JDBC.\n+ Регистрация драйверов;\n+ Установление соединения с базой данных;\n+ Создание запроса(ов) к базе данных;\n+ Выполнение запроса(ов) к базе данных;\n+ Обработка результата(ов);\n+ Закрытие соединения с базой данных.\n\n[к оглавлению](#jdbc)\n\n## Как зарегистрировать драйвер JDBC?\nРегистрацию драйвера можно осуществить несколькими способами:\n\n+ `java.sql.DriverManager.registerDriver(%объект класса драйвера%)`.  \n\n+ `Class.forName(«полное имя класса драйвера»).newInstance()`.\n\n+ `Class.forName(«полное имя класса драйвера»)`;\n\n[к оглавлению](#jdbc)\n\n## Как установить соединение с базой данных?\nДля установки соединения с базой данных используется статический вызов `java.sql.DriverManager.getConnection(...)` .\n\n\nВ качестве параметра может передаваться:\n\n+ URL базы данных\n```java\nstatic Connection getConnection(String url)\n```\n\n+ URL базы данных и набор свойств для инициализации\n```java\nstatic Connection getConnection(String url, Properties info)\n```\n\n+ URL базы данных, имя пользователя и пароль\n```java\nstatic Connection getConnection(String url, String user, String password)\n```\n \nВ результате вызова будет установлено соединение с базой данных и создан объект класса `java.sql.Connection` - своеобразная «сессия», внутри контекста которой и будет происходить дальнейшая работа с базой данных.\n\n[к оглавлению](#jdbc)\n\n## Какие уровни изоляции транзакций поддерживаются в JDBC?\n__Уровень изолированности транзакций__ — значение, определяющее уровень, при котором в транзакции допускаются несогласованные данные, то есть степень изолированности одной транзакции от другой. Более высокий уровень изолированности повышает точность данных, но при этом может снижаться количество параллельно выполняемых транзакций. С другой стороны, более низкий уровень изолированности позволяет выполнять больше параллельных транзакций, но снижает точность данных.\n\nВо время использования транзакций, для обеспечения целостности данных, СУБД использует блокировки, чтобы заблокировать доступ других обращений к данным, участвующим в транзакции. Такие блокировки необходимы, чтобы предотвратить:\n\n+ _«грязное» чтение (dirty read)_ — чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится);\n\n+ _неповторяющееся чтение (non-repeatable read)_ — при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными;\n\n+ _фантомное чтение (phantom reads)_ — ситуация, когда при повторном чтении в рамках одной транзакции одна и та же выборка дает разные множества строк.\n\nУровни изоляции транзакций определены в виде констант интерфейса `java.sql.Connection`:\n\n+ `TRANSACTION_NONE` – драйвер не поддерживает транзакции;\n\n+ `TRANSACTION_READ_UNCOMMITTED` – позволяет транзакциям видеть несохраненные изменения данных: разрешает грязное, непроверяющееся и фантомное чтения;\n\n+ `TRANSACTION_READ_COMMITTED` – любое изменение, сделанное в транзакции, не видно вне неё, пока она не сохранена: предотвращает грязное чтение, но разрешает непроверяющееся и фантомное;\n\n+ `TRANSACTION_REPEATABLE_READ` – запрещает грязное и непроверяющееся, фантомное чтение разрешено;\n\n+ `TRANSACTION_SERIALIZABLE` – грязное, непроверяющееся и фантомное чтения запрещены.\n\n> __NB!__ Сервер базы данных может не поддерживать все уровни изоляции. Интерфейс `java.sql.DatabaseMetaData` предоставляет информацию об уровнях изолированности транзакций, которые поддерживаются данной СУБД.\n\nУровень изоляции транзакции используемый СУБД можно задать с помощью метода `setTransactionIsolation()` объекта `java.sql.Connection`. Получить информацию о применяемом уровне изоляции поможет метод `getTransactionIsolation()`.\n\n[к оглавлению](#jdbc)\n\n## При помощи чего формируются запросы к базе данных?\n\nДля выполнения запросов к базе данных в Java используются три интерфейса:\n\n+ `java.sql.Statement` - для операторов SQL без параметров;\n+ `java.sql.PreparedStatement` - для операторов SQL с параметрами и часто выполняемых операторов;\n+ `java.sql.CallableStatement` -  для исполнения хранимых в базе процедур.\n\nОбъекты-носители интерфейсов создаются при помощи методов объекта `java.sql.Connection`:\n\n+ `java.sql.createStatement()` возвращает объект _Statement_;\n+ `java.sql.prepareStatement()` возвращает объект _PreparedStatement_;\n+ `java.sql.prepareCall()` возвращает объект _CallableStatement_;\n\n[к оглавлению](#jdbc)\n\n## Чем отличается Statement от PreparedStatement?\n+ __Statement__: используется для простых случаев запроса без параметров.\n+ __PreparedStatement__: предварительно компилирует запрос, который может содержать входные параметры и выполняться несколько раз с разным набором этих параметров.\n\nПеред выполнением СУБД разбирает каждый запрос, оптимизирует его и создает «план» (query plan) его выполнения. Если один и тот же запрос выполняется несколько раз, то СУБД в состоянии кэшировать план его выполнения и не производить этапов разборки и оптимизации повторно. Благодаря этому запрос выполняется быстрее.\n\nСуммируя: _PreparedStatement_ выгодно отличается от _Statement_ тем, что при повторном использовании с одним или несколькими наборами параметров позволяет получить преимущества заранее прекомпилированного и кэшированного запроса, помогая при этом избежать SQL Injection.\n\n[к оглавлению](#jdbc)\n\n## Как осуществляется запрос к базе данных и обработка результатов?\nВыполнение запросов осуществляется при помощи вызова методов объекта, реализующего интерфейс `java.sql.Statement`:\n\n+ __`executeQuery()`__ -  для запросов, результатом которых является один набор значений, например запросов `SELECT`. Результатом выполнения является объект класса `java.sql.ResultSet`;\n \n+ __`executeUpdate()`__ - для выполнения операторов `INSERT`, `UPDATE` или `DELETE`, а также для операторов _DDL (Data Definition Language)_. Метод возвращает целое число, показывающее, сколько записей было модифицировано;\n\n+ __`execute()`__ – исполняет SQL-команды, которые могут возвращать различные результаты. Например, может использоваться для операции `CREATE TABLE`. Возвращает `true`, если первый результат содержит _ResultSet_ и `false`, если первый результат - это количество модифицированных записей или результат отсутствует. Чтобы получить первый результат необходимо вызвать метод `getResultSet()` или `getUpdateCount()`. Остальные результаты доступны через вызов `getMoreResults()`, который при необходимости может быть произведён многократно.\n\nОбъект с интерфейсом `java.sql.ResultSet` хранит в себе результат запроса к базе данных - некий набор данных, внутри которого есть курсор, указывающий на один из элементов набора данных - текущую запись.\n\nИспользуя курсор можно перемещаться по набору данных при помощи метода `next()`.\n\n> __NB!__ Сразу после получения набора данных его курсор находится перед первой записью и чтобы сделать её текущей необходимо вызвать метод `next()`.\n\nСодержание полей текущей записи доступно через вызовы методов `getInt()`, `getFloat()`, `getString()`, `getDate()` и им подобных.\n\n[к оглавлению](#jdbc)\n\n## Как вызвать хранимую процедуру?\n__Хранимые процедуры__ – это именованный набор операторов SQL хранящийся на сервере. Такую процедуру можно вызвать из Java-класса с помощью вызова методов объекта реализующего интерфейс `java.sql.Statement`.\n\nВыбор объекта зависит от характеристик хранимой процедуры:\n\n+ без параметров → `Statement`\n+ с входными параметрами → `PreparedStatement`\n+ с входными и выходными параметрами → `CallableStatement`\n\n> Если неизвестно, как была определена хранимая процедура, для получения информации о хранимой процедуре (например, имен и типов параметров) можно использовать методы `java.sql.DatabaseMetaData` позволяющие получить информацию о структуре источника данных.\n\nПример вызова хранимой процедуры с входными и выходными параметрами:\n\n```java\npublic vois runStoredProcedure(final Connection connection) throws Exception {\n    // описываем хранимую процедуру\n    String procedure = \"{ call procedureExample(?, ?, ?) }\";\n    \n    // подготавливаем запрос\n    CallableStatement cs = connection.prepareCall(procedure);\n    \n    // устанавливаем входные параметры\n    cs.setString(1, \"abcd\");\n    cs.setBoolean(2, true);\n    cs.setInt(3, 10);\n    \n    // описываем выходные параметры\n    cs.registerOutParameter(1, java.sql.Types.VARCHAR);\n    cs.registerOutParameter(2, java.sql.Types.INTEGER);\n    \n    // запускаем выполнение хранимой процедуры\n    cs.execute();\n    \n    // получаем результаты\n    String parameter1 = cs.getString(1);\n    int parameter2 = cs.getInt(2);\n    \n    // заканчиваем работу с запросом\n    cs.close();\n}\n```\n\n[к оглавлению](#jdbc)\n\n## Как закрыть соединение с базой данных?\nСоединение с базой данной закрывается вызовом метода `close()` у соответствующего объекта `java.sql.Connection` или посредством использования механизма try-with-resources при создании такого объекта, появившегося в Java 7.\n\n> __NB!__ Предварительно необходимо закрыть все запросы созданные этим соединением.\n\n[к оглавлению](#jdbc)\n\n# Источники\n+ [Википедия - JDBC](https://ru.wikipedia.org/wiki/Java_Database_Connectivity)\n+ [IBM developerWorks®](http://www.ibm.com/developerworks/ru/library/dm-1209storedprocedures/)\n+ [Документация к пакету java.sql](https://docs.oracle.com/javase/7/docs/api/java/sql/package-summary.html)\n+ [Википедия - Уровень изолированности транзакции](https://ru.wikipedia.org/wiki/Уровень_изолированности_транзакций)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "jvm.md",
          "type": "blob",
          "size": 27.2255859375,
          "content": "## JVM\n+ [За что отвечает JVM](jvm.md#За-что-отвечает-JVM)\n+ [Classloader](jvm.md#Classloader)\n+ [Области данных времени выполнения](jvm.md#Области-данных-времени-выполнения)\n+ [Frames](jvm.md#Frames)\n+ [Execution Engine](jvm.md#Execution-Engine)\n+ [Полезные ссылки](jvm.md#Полезные-ссылки)\n\n## За что отвечает _JVM_:\n\n+ Загрузка, проверка и исполнение байт кода;\n+ Предоставление среды выполнения для выполнения байт-кода;\n+ Управление памятью и очисткой мусора (Garbage collection);\n\nВиртуальная машина Java (Java Virtual Machine) - это механизм, предоставляющий среду выполнения для управления Java-кодом или приложениями.\nВиртуальная машина является независимой оболочкой исполнения кода, благодаря которой возможен её запуск на любой ОС,\nбез влияния ОС на выполняемую программу. \n\nJVM работает с 2мя типами данных:  примитивные типы (**primitive types**) и ссылочные типы (**reference types**).\n\n**Примитивы**\n\nJVM работает с примитивными значениями (целыми числами и числами с плавающей точкой). По сути, JVM - это 32-битная машина. \nТипы `long` и `double`, которые являются 64-битными, поддерживаются изначально, но занимают две единицы памяти в `frame's local` \nили стеке операндов, поскольку каждая единица составляет 32 бита.\nТипы `boolean`, `byte`, `short` и `char` имеют расширенный знак (кроме `char` с нулевым расширением) и работают как 32-разрядные целые числа, так же, как и типы `int`.\nМеньшие типы имеют только несколько специфических для типа инструкций для загрузки, хранения и преобразования типов.\n`boolean` значение работает как 8-битное `byte` значения, где 0 представляет значение **false**, а 1 - значение **true**.\n\n**Типы ссылок и значения**\n\nСуществует три типа ссылочных типов: типы классов, типы массивов и типы интерфейсов.\nИх значения являются ссылками на динамически создаваемые экземпляры классов, массивы или экземпляры классов, \nкоторые реализуют интерфейсы соответственно.\n\n[к оглавлению](#jvm)\n\n## Classloader\n\nЗагрузчик классов является частью JRE, которая динамически загружает Java классы в JVM. \nОбычно классы загружаются только по запросу. Система исполнения в Java не должна знать о файлах и файловых системах\nблагодаря загрузчику классов. **Делегирование является важной концепцией**, которую выполняет загрузчик. Загрузчик классов \nотвечает за поиск библиотек, чтение их содержимого и загрузку классов, содержащихся в библиотеках. \nЭта **загрузка** обычно выполняется **«по требованию»**, поскольку она не происходит до тех пор, пока программа не вызовет класс.\n**Класс с именем может быть загружен только один раз данным загрузчиком классов.**\n\nПри запуске JVM, используются три загрузчика классов:\n* Bootstrap class loader (Загрузчик класса Bootstrap)\n* Extensions class loader (Загрузчик класса расширений)\n* System class loader (Системный загрузчик классов)\n\n**Загрузчик класса Bootstrap** загружает основные библиотеки Java, расположенные в папке `<JAVA_HOME>/jre/lib`. \nЭтот загрузчик является частью ядра JVM, написан на нативном коде.\n\n**Загрузчик класса расширений** загружает код в каталоги расширений \n(`<JAVA_HOME>/jre/lib/ext`, или любой другой каталог, указанный системным свойством `java.ext.dirs`).\n\n**Системный загрузчик** загружает код, найденный в `java.class.path`, который сопоставляется с переменной среды `CLASSPATH`.\nЭто реализуется классом `sun.misc.Launcher$AppClassLoader`.\n\nЗагрузчик классов выполняет три основных действия в строгом порядке: \n* Загрузка: находит и импортирует двоичные данные для типа. \n* Связывание: выполняет проверку, подготовку и (необязательно) разрешение. \n    - Проверка: обеспечивает правильность импортируемого типа. \n    - Подготовка: выделяет память для переменных класса и инициализация памяти значениями по умолчанию. \n    - Разрешение: преобразует символические ссылки из типа в прямые ссылки. \n* Инициализация: вызывает код Java, который инициализирует переменные класса их правильными начальными значениями.\n\n**Пользовательский загрузчик классов**\n\nЗагрузчик классов написан на Java. Поэтому возможно создать свой собственный загрузчик классов, не понимая тонких деталей JVM.\nУ каждого загрузчика классов Java есть родительский загрузчик классов, определенный при создании экземпляра нового \nзагрузчика классов или в качестве системного загрузчика классов по умолчанию для виртуальной машины.\n\nЧто делает возможным следующее:\n* загружать или выгружать классы во время выполнения (например, динамически загружать библиотеки во время выполнения, даже из ресурса HTTP).\nЭто важная особенность для:\n    - реализация скриптовых языков;\n    - использование bean builders;\n    - добавить пользовательское расширение;\n    - позволяя нескольким пространствам имен общаться. Например, это одна из основ протоколов CORBA / RMI;\n* изменить способ загрузки байт-кода (например, можно использовать зашифрованный байт-код класса Java);\n* модифицировать загруженный байт-код (например, для переплетения аспектов во время загрузки при использовании аспектно-ориентированного программирования);\n\n[к оглавлению](#jvm)\n\n## Области данных времени выполнения\n\nRun-Time Data Areas. JVM выделяет множество областей данных во время выполнения, которые используются во время выполнения программы. Некоторые участки данных\nсозданы JVM во время старта и уничтожаются во время её выключения. Другие создаются для каждого потока и уничтожаются, когда поток уничтожается.\n\n**The pc Register (PCR)**\n\nВиртуальная машина Java может поддерживать много потоков исполнения одновременно. Каждый поток виртуальной машины Java имеет свой собственный регистр PC (program counter).\nВ любой момент каждый поток виртуальной машины Java выполняет код одного метода, а именно текущий метод для этого потока.\nЕсли этот метод не является native, регистр pc содержит адрес инструкции виртуальной машины Java, выполняемой в настоящее время.\n\nКоротко говоря: для одного потока, существует один PCR, который создается при запуске потока. PCR хранит адрес выполняемой сейчас инструкции JVM.\n\n**Java Virtual Machine Stacks**\n\nКаждый поток в JVM имеет собственный стек, созданный одновременно с потоком.  Стек в JVM хранит frames. \nCтеки в JVM могут иметь фиксированный размер или динамически расширяться и сжиматься в соответствии с требованиями вычислений.\n\n**Heap**\n\nJVM имеет heap (кучу), которая используется всеми потоками виртуальной машины Java. \nКуча - это область данных времени выполнения, из которой выделяется память для всех экземпляров и массивов классов.\nКуча создается при запуске виртуальной машины. Хранилище для объектов восстанавливается автоматической системой \nуправления данными (известной как сборщик мусора); объекты никогда не освобождаются явно. \nJVM не предполагает какого-либо конкретного типа системы автоматического управления хранением данных, \nи метод управления может быть выбран в соответствии с системными требованиями разработчика. \nКуча может иметь фиксированный размер или может быть расширена в соответствии с требованиями вычислений и может быть сокращена, \nесли большая куча становится ненужной. Память для кучи не должна быть смежной.\n\n**Method Area**\n\nJVM имеет область методов, которая является общей для всех потоков. Она хранит структуры для каждого класса, такие как пул констант, данные полей и методов, \nа также код для методов и конструкторов, включая специальные методы, используемые при инициализации классов и экземпляров, и инициализации интерфейса.\nХотя область метода является логически частью кучи, простые реализации могут не обрабатываться сборщиком мусора. Область метода может иметь \nфиксированный размер или может быть расширена в соответствии с требованиями вычислений и может быть сокращена, если большая область метода становится ненужной.\n\n**Run-Time Constant Pool**\n\n A run-time constant pool существует для каждого класса или интерфейса в рантайме и представленно constant_pool таблицей в *.class файле.\n Он содержит несколько видов констант: от числовых литералов, известных во время компиляции, до ссылок на методы и поля, \n которые должны быть разрешены во время выполнения.  Сам run-time constant pool выполняет функцию,\n аналогичную функции таблицы символов для обычного языка программирования, хотя он содержит более широкий диапазон данных, чем типичная таблица символов.\n Каждый run-time constant pool отделён от JVM's method area. JVM создаёт run-time constant pool вместе с созданием class или interface.\n \n**Native Method Stacks**\n\nРеализация виртуальной машины Java может использовать обычные стеки, обычно называемые «стеки Си», для поддержки native methods (методов, написанных на языке, отличном от языка программирования Java).\n\n[к оглавлению](#jvm)\n\n## Frames\n\nFrame используется для хранения данных и частичных результатов, а также для выполнения динамического связывания, возврата значений для методов и отправки исключений.\nНовый frame создается каждый раз, когда вызывается метод. Frame уничтожается, когда завершается вызов метода, \nявляется ли это завершение нормальным или резким (он генерирует неперехваченное исключение). Frames выделяются из стека потока, создающего frame. \nКаждый frame имеет свой собственный массив локальных переменных, свой собственный стек операндов и ссылку на пул констант во время выполнения класса текущего метода.\nРазмеры массива локальных переменных и стека операндов определяются во время компиляции и предоставляются вместе с кодом для метода, связанного с фреймом.\nТаким образом, размер структуры данных, frame-а зависит только от реализации виртуальной машины Java, и память для этих структур может быть выделена одновременно при вызове метода.\n\nТолько один frame активен в любой точке данного потока управления - метода выполнения, и это frame называется текущим, а его метод известен как текущий метод.\nКласс, в котором определен текущий метод, является текущим классом. Операции над локальными переменными и стеком операндов обычно выполняются со ссылкой на текущий frame.\n\nFrame перестает быть текущим, если его метод вызывает другой метод или если его метод завершается. Когда метод вызывается, новый frame создается и становится текущим, \nкогда управление переходит к новому методу. При возврате метода текущий frame передает результат вызова метода, если таковой имеется, в предыдущий frame. \nТекущий frame затем отбрасывается, так как предыдущий frame становится текущим. Обратите внимание, что frame, созданный потоком, \nявляется локальным для этого потока и на него не может ссылаться ни один другой поток.\n\n**Локальные переменные**\n\nКаждый frame содержит массив переменных, известных как его локальные переменные. Длина массива локальных переменных frame определяется во время компиляции \nи предоставляется в двоичном представлении класса или интерфейса вместе с кодом для метода, связанного с frame-ом.\nЕдиничная локальная переменная может хранить значение типа: boolean, byte, char, short, int, float, reference, or returnAddress. \nПара локальных переменных может хранить значение типов: long или double.\n\nЛокальные переменные адресуются путем индексации. Индекс первой локальной переменной равен нулю.\n\nЗначение типа long или типа double занимает две последовательные локальные переменные.\n\nJVM использует локальные переменные для передачи параметров при вызове метода. При вызове метода класса все параметры передаются в последовательных локальных переменных, \nначиная с локальной переменной 0. При вызове метода экземпляра локальная переменная 0 всегда используется для передачи ссылки на объект,\nдля которого вызывается метод экземпляра (this в Java). Любые параметры впоследствии передаются в последовательных локальных переменных, начиная с локальной переменной 1.\n \n**Стеки операндов (Operand Stacks)**\n\nКаждый frame содержит стек «последний вошел - первый вышел» (LIFO), известный как стек операндов. Максимальная глубина стека операндов frame-a\nопределяется во время компиляции и предоставляется вместе с кодом для метода, связанного с frame-ом.\n\nСтек операнда пуст при создании frame-a, который его содержит. JVM предоставляет инструкции для загрузки констант \nили значений из локальных переменных или полей в стек операндов. Другие инструкции JVM берут операнды из стека операндов, \nоперируют с ними и помещают результат обратно в стек операндов. Стек операндов также используется для подготовки параметров \nдля передачи в методы и для получения результатов метода.\n\nДля примера, инструкция **iadd**  суммирует два int-вых значения. От стека операндов требуется, чтобы два int-вых значения были наверху стека.\nЗначения удаляются из стека, операция **pop**. Суммируются и их сумма помещается в стек операндов.\n\n**Динамическое связывание (Dynamic Linking)**\n\nКаждый frame содержит ссылку на  run-time constant pool для типа текущего метода для поддержки динамического связывания кода метода.\nДоступ к вызываемым методам и переменным осуществляется через символические ссылки из class файла.\nДинамическое связывание преобразует эти символьные ссылки на методы в конкретные ссылки на методы, загружая классы по мере необходимости \nдля разрешения пока еще не определенных символов, и преобразует обращения к переменным в соответствующие смещения в структурах хранения, \nсвязанных с расположением этих переменных во время выполнения.\n\nПозднее связывание методов и переменных вносит изменения в другие классы, которые метод использует с меньшей вероятностью нарушить этот код.\n\n**Нормальное завершение вызова метода**\n\nВызов метода завершается нормально, если этот вызов не вызывает исключение, либо непосредственно из JVM, либо в результате выполнения явного оператора throw. \nЕсли вызов текущего метода завершается нормально, то значение может быть возвращено вызывающему методу. \nЭто происходит, когда вызванный метод выполняет одну из инструкций возврата, выбор которых должен соответствовать типу возвращаемого значения (если оно есть).\n\nТекущий frame используется в этом случае для восстановления состояния инициатора, включая его локальные переменные и стек операндов, \nс соответствующим образом увеличенным программным счетчиком инициатора, чтобы пропустить инструкцию вызова метода. \nЗатем выполнение обычно продолжается в frame вызывающего метода с возвращенным значением (если оно есть), помещаемым в стек операндов этого frame.\n\n**Резкое завершение вызова метода**\n\nВызов метода завершается преждевременно, если при выполнении инструкции JVM в методе выдает исключение, и это исключение не обрабатывается в методе.\nВыполнение команды **throw** также приводит к явному выбрасыванию исключения, и, если исключение не перехватывается текущим методом, \nприводит к неожиданному завершению вызова метода. Вызов метода, который завершается внезапно, никогда не возвращает значение своему вызывающему.\n\n[к оглавлению](#jvm)\n\n## Execution Engine\n\nБайт-код, назначенный **run-time data areas**, будет выполнен **execution engine**. Механизм выполнения считывает байт-код и выполняет его по частям.\n\n**Interpreter**\n\nИнтерпретатор интерпретирует байт-код быстро, но выполняется медленно. Недостаток интерпретатора заключается в том, что, когда один метод вызывается несколько раз, каждый раз требуется новая интерпретация.\n\n**JIT Compiler**\n\nJIT-компилятор устраняет недостатки интерпретатора. Механизм выполнения будет использовать помощь интерпретатора при преобразовании байт-кода, \nно когда он находит повторный код, он использует JIT-компилятор, который компилирует весь байт-код и изменяет его на собственный код. \nЭтот нативный код будет использоваться непосредственно для повторных вызовов методов, которые улучшают производительность системы.\n\n+ Генератор промежуточного кода (Intermediate Code Generator). Производит промежуточный код.\n+ Code Optimizer. Отвечает за оптимизацию промежуточного кода, сгенерированного выше.\n+ Генератор целевого кода (Target Code Generator). Отвечает за генерацию машинного кода или родной код.\n+ Профилировщик (Profiler). Специальный компонент, отвечающий за поиск горячих точек, то есть, вызывается ли метод несколько раз или нет.\n\n**Garbage Collector**\n\n[к оглавлению](#jvm)\n\n## Полезные ссылки:\n- https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html\n- https://www.developer.com/java/data/understanding-the-jvm-architecture.html\n- https://dzone.com/articles/understanding-jvm-internals\n\n[к оглавлению](#jvm)\n"
        },
        {
          "name": "kafka.md",
          "type": "blob",
          "size": 95.763671875,
          "content": "[Вопросы для собеседования](README.md)\n\n# Apache Kafka\n* [Что такое Apache Kafka?](#что-такое-apache-kafka)\n* [Основные компоненты Kafka](#основные-компоненты-kafka)\n\n**Архитектура компонентов**\n\n* Topic\n  * [Архитектура топика](#архитектура-топика)\n  * [Настройки топика Kafka](#настройки-топика-kafka)\n* Broker\n  * [Архитектура брокера](#архитектура-брокера)\n  * [Настройки брокера Kafka](#настройки-брокера-kafka)\n* Producer\n  * [Архитектура продюсера](#архитектура-продюсера)\n  * [Настройки продюсера](#настройки-продюсера)\n  * [Пример конфигурации Kafka Producer](#пример-конфигурации-kafka-producer)\n* Consumer\n  * [Архитектура консюмера](#архитектура-консюмера)\n  * [Настройки консюмера](#настройки-консюмера)\n  * [Пример конфигурации Kafka Consumer](#пример-конфигурации-kafka-consumer)\n\n**Kafka API**\n\n* [Основные API Kafka](#основные-api-kafka)\n* [Какова роль Producer API?](#какова-роль-producer-api)\n* [Какова роль Consumer API?](#какова-роль-consumer-api)\n* [Какова роль Connector API?](#какова-роль-connector-api)\n* [Какова роль Streams API?](#какова-роль-streams-api)\n* [Какова роль Transactions API?](#какова-роль-transactions-api)\n* [Какова роль Quota API?](#какова-роль-quota-api)\n* [Какова роль AdminClient API?](#какова-роль-AdminClient-api)\n\n**Kafka Consumer**\n\n* [Для чего нужен координатор группы?](#для-чего-нужен-координатор-группы)\n* [Для чего нужен Consumer heartbeat thread?](#для-чего-нужен-consumer-heartbeat-thread)\n* [Как Kafka обрабатывает сообщения?](#как-kafka-обрабатывает-сообщения)\n* [Как Kafka обрабатывает задержку консюмера?](#как-kafka-обрабатывает-задержку-консюмера)\n* [Для чего нужны методы subscribe() и poll()?](#для-чего-нужны-методы-subscribe-и-poll)\n* [Для чего нужен метод position()?](#для-чего-нужен-метод-position)\n* [Для чего нужны методы commitSync() и commitAsync()?](#для-чего-нужны-методы-commitsync-и-commitasync)\n\n**Другие вопросы**\n\n* [Для чего нужен идемпотентный продюсер?](#для-чего-нужен-идемпотентный-продюсер)\n* [Для чего нужен интерфейс Partitioner?](#для-чего-нужен-интерфейс-partitioner)\n* [Для чего нужен Broker log cleaner thread?](#для-чего-нужен-broker-log-cleaner-thread)\n* [Для чего нужен Kafka Mirror Maker?](#для-чего-нужен-kafka-mirror-maker)\n* [Для чего нужна Schema Registry?](#для-чего-нужна-schema-registry)\n* [Для чего нужен Streams DSL?](#для-чего-нужен-streams-dsl)\n* [Как Kafka обеспечивает версионирование сообщений?](#как-kafka-обеспечивает-версионирование-сообщений)\n* [Как потребители получают сообщения от брокера?](#как-потребители-получают-сообщения-от-брокера)\n\n**Сравнение с другими компонентами и системами**\n\n* [В чем разница между Kafka Consumer и Kafka Stream?](#в-чем-разница-между-kafka-consumer-и-kafka-stream)\n* [В чем разница между Kafka Streams и Apache Flink?](#в-чем-разница-между-kafka-streams-и-apache-flink)\n* [В чем разница между Kafka и Flume?](#в-чем-разница-между-kafka-и-flume)\n* [В чем разница между Kafka и RabbitMQ?](#в-чем-разница-между-kafka-и-rabbitmq)\n\n\n## Что такое Apache Kafka?\n\nЭто распределённая система с открытым исходным кодом, разработанная для высокоскоростной передачи больших объёмов данных \nс минимальной задержкой.\n\n### Преимущества\n\n* Персистентность данных\n* Высокая производительность\n* Независимость пайплайнов обработки\n* Возможность просмотреть историю записей заново\n* Гибкость в использовании\n\n### Когда использовать\n\n* λ-архитектура или k-архитектура\n* Стриминг больших данных\n* Много клиентов (producer и consumer)\n* Требуется кратное масштабирование\n\n### Чего в Kafka нет из коробки\n\n* Это не брокер сообщений\n* Отложенные сообщения\n* DLQ\n* AMQP / MQTT\n* TTL на сообщение\n* Очереди с приоритетами\n\n[к оглавлению](#apache-kafka)\n\n## Основные компоненты Kafka\n\n* **Producer (Производитель)** — приложение, которое публикует сообщения в топики Kafka\n* **Consumer (Потребитель)** — приложение, которое подписывается на топики и читает сообщения\n* **Broker (Брокер)** — сервер Kafka, который принимает, хранит и распределяет сообщения. В кластере Kafka может быть несколько брокеров\n* **Topic (Топик)** — логическое разделение, по которому организуются данные. Производители отправляют сообщения в топики, а потребители читают из них\n* **Partition (Раздел)** — каждый топик разделён на партиции для параллельной обработки. Сообщения в партициях упорядочены\n* **Zookeeper** — сервис, используемый Kafka для управления состоянием кластера и координации брокеров. \nОднако в новых версиях Kafka отказывается от Zookeeper в пользу собственного механизма метаданных KRaft (Kafka Raft). \nЭто новая внутренняя архитектура метаданных Kafka, которая устраняет зависимость от Zookeeper. Она основана на Raft-консенсусе, \nпозволяя Kafka брокерам самостоятельно управлять метаданными и координировать взаимодействие между собой.\n\n[к оглавлению](#apache-kafka)\n\n## Архитектура топика\n\n* **Топик разбит на партиции** — сообщения в топике распределяются по партициям для более эффективной параллельной обработки и хранения\n* **Партиции хранятся на диске** — Kafka сохраняет данные на диск, что позволяет долговременно хранить сообщения\n* **Партиции делятся на сегменты** — сегмент представляет собой обычный файл на диске, сегменты делятся на пассивные и активный.\n  Запись происходит в активный сегмент\n* **Данные удаляются либо по времени, либо по размеру**. Удаление происходит посегментно, с самого старого сегмента\n  * **retention.bytes** - по максимальному размеру\n  * **retention.ms** - по времени\n* **Сообщение можно быстро найти по его Offset** — каждому сообщению в партиции присваивается уникальный смещающий индекс (offset), по которому можно легко найти сообщение\n\n[к оглавлению](#apache-kafka)\n\n## Настройки топика Kafka\n\n### Репликация\n\n* `replication.factor`\n  * **Описание**: Количество реплик для каждой партиции топика\n  * **Пример**: `replication.factor=3`\n* `min.insync.replicas`\n  * **Описание**: Минимальное количество синхронизированных реплик\n  * **Пример**: `min.insync.replicas=2`\n\n### Хранение данных\n\n* `retention.ms`\n  * **Описание**: Время хранения сообщений в топике в миллисекундах\n  * **Пример**: `retention.ms=604800000` (7 дней)\n* `retention.bytes`\n  * **Описание**: Максимальный объём данных в топике, после чего старые сообщения удаляются\n  * **Пример**: `retention.bytes=10737418240` (10 GB)\n* `segment.bytes`\n  * **Описание**: Размер сегмента логов топика\n  * **Пример**: `segment.bytes=1073741824` (1 GB)\n\n### Политики очистки\n\n* `cleanup.policy`\n  * **Описание**: Как Kafka обрабатывает старые сообщения\n  * **Значения**: `delete`, `compact`\n  * **Пример**: `cleanup.policy=delete`\n\n### Партиции\n\n* `num.partitions`\n  * **Описание**: Количество партиций в топике\n  * **Пример**: `num.partitions=3`\n\n[к оглавлению](#apache-kafka)\n\n## Архитектура брокера\n\n* **У каждой партиции свой лидер** — в Kafka для каждой партиции в топике назначается лидер-брокер, который отвечает\n  за запись и чтение данных\n* **Сообщения пишутся в лидера** — производители отправляют сообщения напрямую в брокер-лидер партиции\n* **Данные реплицируются между брокерами** — для обеспечения отказоустойчивости Kafka реплицирует данные партиций на\n  другие брокеры, которые становятся репликами\n* **Автоматический фейловер лидера** — в случае сбоя брокера-лидера Kafka автоматически назначает новый лидер из числа\n  реплик, обеспечивая бесшовную работу системы\n\n[к оглавлению](#apache-kafka)\n\n## Настройки брокера Kafka\n\n### Репликация и консистентность\n\n* `min.insync.replicas`\n  * **Описание**: Минимальное количество синхронизированных реплик для подтверждения записи\n  * **Пример**: `min.insync.replicas=2`\n* `unclean.leader.election.enable`\n  * **Описание**: Разрешает выбор лидера из неактуальных реплик, если нет синхронизированных реплик\n  * **Пример**: `unclean.leader.election.enable=false`\n\n### Логирование и хранение данных\n\n* `log.dirs`\n  * **Описание**: Директория на диске, где хранятся логи партиций\n  * **Пример**: `log.dirs=/var/lib/kafka/logs`\n* `log.retention.hours`\n  * **Описание**: Максимальное время хранения данных в логах\n  * **Пример**: `log.retention.hours=168` (7 дней)\n* `log.segment.bytes`\n  * **Описание**: Максимальный размер сегмента лога, после чего создаётся новый\n  * **Пример**: `log.segment.bytes=1073741824` (1 GB)\n\n### Производительность и задержки\n\n* `num.network.threads`\n  * **Описание**: Количество потоков для обработки сетевых запросов\n  * **Пример**: `num.network.threads=3`\n* `num.io.threads`\n  * **Описание**: Количество потоков для ввода-вывода\n  * **Пример**: `num.io.threads=8`\n* `socket.send.buffer.bytes`\n  * **Описание**: Размер буфера для отправки данных по сети\n  * **Пример**: `socket.send.buffer.bytes=102400`\n\n### Управление сообщениями\n\n* `message.max.bytes`\n  * **Описание**: Максимальный размер сообщения, которое брокер может принять\n  * **Пример**: `message.max.bytes=1048576` (1 MB)\n* `replica.fetch.max.bytes`\n  * **Описание**: Максимальный размер данных для запроса реплики\n  * **Пример**: `replica.fetch.max.bytes=1048576` (1 MB)\n\n### Безопасность\n\n* `ssl.keystore.location`\n  * **Описание**: Путь к хранилищу ключей SSL\n  * **Пример**: `ssl.keystore.location=/var/private/ssl/kafka.keystore.jks`\n* `ssl.truststore.location`\n  * **Описание**: Путь к хранилищу доверенных сертификатов\n  * **Пример**: `ssl.truststore.location=/var/private/ssl/kafka.truststore.jks`\n\n[к оглавлению](#apache-kafka)\n\n## Архитектура продюсера\n\n* **Создание сообщения (Record)**: Продюсер формирует сообщение, содержащее ключ (необязательный), значение и метаданные,\n  такие как время отправки. Сообщение отправляется в топик (Topic), который состоит из одной или нескольких партиций\n* **Выбор партиции**: Если ключ сообщения указан, Kafka использует его для хеширования и определения, в какую партицию\n  записать сообщение (сообщения с одинаковым ключом попадают в одну и ту же партицию). Если ключа нет, Kafka распределяет\n  сообщения по партициям с помощью round-robin или по другим правилам\n* **Отправка сообщений в буфер (Batching)**: Для повышения производительности продюсер Kafka не отправляет каждое сообщение\n  по отдельности, а группирует несколько сообщений в пакеты (batching), прежде чем отправить их брокеру. Это снижает\n  сетевые задержки и нагрузку на брокера\n* **Сжатие (Compression)**: Для уменьшения объёма передаваемых данных продюсер может сжимать сообщения с использованием\n  таких алгоритмов, как GZIP, Snappy или LZ4. Сжатие снижает нагрузку на сеть и хранение, но добавляет небольшие накладные\n  расходы на процессор\n* **Асинхронная отправка**: Продюсер отправляет пакеты сообщений асинхронно. Это означает, что сообщения записываются в\n  буфер памяти и отправляются брокеру, не ожидая завершения предыдущих операций. Это повышает пропускную способность\n* **Подтверждения (Acknowledgments)**: Kafka позволяет настраивать уровень подтверждений от брокеров\n* **Ретрай и идемпотентность**: Если отправка сообщения не удалась, продюсер может повторить попытку отправки (ретрай).\n  Также можно включить идемпотентный режим продюсера, что предотвращает повторную отправку одного и того же сообщения в\n  случае сбоя, обеспечивая отправку уникального сообщения один раз\n* **Error handling**: Продюсер обрабатывает ошибки при отправке сообщений. В зависимости от настроек продюсер может\n  попытаться переотправить сообщение или сообщить о проблеме через callback\n\n### Резюме\n\n* Продюсер выбирает партицию для сообщения\n* Продюсер выбирает уровень гарантии доставки\n* В продюсере можно тюнить производительность\n\n[к оглавлению](#apache-kafka)\n\n## Настройки продюсера\n\n### Bootstrap-серверы (`bootstrap.servers`)\n\n* **Описание**: Указывает адреса брокеров Kafka, к которым продюсер должен подключаться для отправки сообщений\n* **Пример**: `bootstrap.servers: localhost:9092,localhost:9093`\n* **Зачем это нужно**: Kafka продюсер использует эти брокеры для получения метаданных о кластере (например, информация о топиках и партициях). Эти брокеры служат точками входа в кластер Kafka.\n\n### Сериализация ключа и значения\n\nПродюсер должен преобразовывать (сериализовать) данные в байтовый формат перед отправкой в Kafka\n\n* **Ключевая настройка для сериализации ключа:**\n  * `key.serializer`\n  * Пример: `key.serializer: org.apache.kafka.common.serialization.StringSerializer`\n* **Ключевая настройка для сериализации значения:**\n  * `value.serializer`\n  * Пример: `value.serializer: org.apache.kafka.common.serialization.StringSerializer`\n\n**Варианты сериализаторов:**\n* `StringSerializer` для строк\n* `ByteArraySerializer` для массива байтов\n* `LongSerializer` для чисел\n* Также можно реализовать свои собственные сериализаторы\n\n### Отправка сообщений в буфер\n\nПродюсер Kafka отправляет сообщения асинхронно, и для этого используется буферизация сообщений\n\n* **batch.size**: Размер одного пакета (batch), который продюсер отправляет брокеру\n  * **Описание**: Определяет количество байтов сообщений, которые могут быть буферизованы в одном пакете перед отправкой брокеру\n  * **Пример**: `\"batch.size\": 16384` (16 KB)\n  * **Зачем это нужно**: Большие пакеты могут повысить производительность, но могут увеличить задержки\n* **linger.ms**: Максимальное время ожидания перед отправкой пакета\n  * **Описание**: Продюсер может немного подождать, пока буфер накопит сообщения, чтобы отправить больше данных за один раз\n  * **Пример**: `linger.ms: 5` (время ожидания 5 мс)\n  * **Зачем это нужно**: Позволяет продюсеру собирать больше сообщений в пакете перед отправкой, что может улучшить эффективность использования сети\n* **buffer.memory**: Размер выделенной памяти для буферизации сообщений\n  * **Описание**: Общий объем памяти, который продюсер может использовать для хранения сообщений, ожидающих отправки\n  * **Пример**: `buffer.memory: 33554432` (32 MB)\n  * **Зачем это нужно**: Если буфер заполняется, продюсер приостанавливает отправку сообщений, пока буфер не освободится\n\n### Сжатие сообщений\n\nПродюсер может сжимать сообщения для уменьшения объема передаваемых данных\n\n* **compression.type**\n  * **Описание**: Указывает тип сжатия для сообщений\n  * **Пример**: `compression.type: gzip` (варианты: none, gzip, snappy, lz4, zstd)\n  * **Зачем это нужно**: Сжатие уменьшает объем данных, передаваемых по сети, что может снизить нагрузку на сеть и хранилище,\n    особенно при больших объемах сообщений. Однако это может потребовать дополнительных ресурсов на сжатие/разжатие\n\n### Распределение сообщений по партициям (партицирование)\n\n* **partitioner.class**\n  * **Описание**: определяет логику, по которой продюсер выбирает партицию для каждого сообщения\n  * **Примеры**:\n    * **если настройка не задана**, по умолчанию используется `DefaultPartitioner` , который может распределять сообщения по партициям\n      равномерно или на основе ключа сообщения\n    * `partitioner.class: o.a.k.clients.producer.RoundRobinPartitioner` использует метод Round Robin для распределения сообщений\n    * `partitioner.class: o.a.k.clients.producer.UniformStickyPartitioner` равномерно отправляет сообщения, привязываясь\n      к партиции на короткий промежуток времени, чтобы уменьшить нагрузку на брокеры\n\n### Подтверждения (acks)\n\nНастройка определяет, как много брокеров должны подтвердить получение сообщения перед тем, как продюсер будет считать его\nуспешно отправленным\n\n* **acks**\n  * **Описание**: Определяет количество подтверждений от брокеров\n  * **Значения**:\n    * `0`: Продюсер не ждёт подтверждений (самая быстрая отправка, но высокий риск потери сообщений)\n    * `1`: Продюсер ждёт подтверждения от лидера партиции\n    * `all` (или `-1`): Продюсер ждёт подтверждений от всех реплик (наибольшая надежность, но увеличенные задержки)\n  * **Пример**: `acks: all`\n  * **Зачем это нужно**: Позволяет выбрать баланс между скоростью и надежностью отправки данных.\n\n### Дополнительные важные настройки\n\n* **Количество повторных попыток (retries):**\n  * **Описание**: Определяет, сколько раз продюсер должен попытаться отправить сообщение при неудаче\n  * **Пример**: `retries: 3`\n  * **Зачем это нужно**: Если произошёл временный сбой, продюсер может попытаться повторить отправку сообщений, что\n    увеличивает шанс доставки\n* **Идемпотентность продюсера (enable.idempotence):**\n  * **Описание**: Включение идемпотентного режима, что предотвращает дублирование сообщений при сбоях\n  * **Пример**: `enable.idempotence: true`\n  * **Зачем это нужно**: Гарантирует, что каждое сообщение будет доставлено ровно один раз\n* **Максимальный размер сообщения (max.request.size):**\n  * **Описание**: Максимальный размер сообщения, которое продюсер может отправить брокеру\n  * **Пример**: `max.request.size: 1048576` (1 MB)\n  * **Зачем это нужно**: Ограничивает размер сообщений, которые могут быть отправлены, чтобы избежать перегрузки сети и брокеров.\n* **Таймаут ожидания подтверждений (request.timeout.ms):**\n  * **Описание**: Максимальное время ожидания подтверждения от брокера\n  * **Пример**: `request.timeout.ms: 30000` (30 секунд)\n  * **Зачем это нужно**: Помогает избежать бесконечного ожидания ответа от брокера в случае его сбоя\n\n[к оглавлению](#apache-kafka)\n\n## Пример конфигурации Kafka Producer\n\n```java\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport java.util.Properties;\n\npublic class KafkaStringArrayProducer {\n    \n    public static void main(String[] args) {\n        // Настройки Kafka Producer\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n        // Создание Kafka Producer\n        KafkaProducer<String, String[]> producer = new KafkaProducer<>(props);\n\n        String key = \"user123\";\n        String[] value = {\"message1\", \"message2\", \"message3\"};\n\n        // Создание записи и добавление заголовков\n        ProducerRecord<String, String> record = new ProducerRecord<>(\"my_topic\", key, value);\n        record.headers().add(\"traceId\", \"someTraceId\");\n\n        // Отправка сообщения в Kafka\n        producer.send(record, (metadata, exception) -> {\n            if (exception != null) {\n                System.out.println(\"Ошибка при отправке сообщения: \" + exception.getMessage());\n            } else {\n                System.out.println(\"Сообщение отправлено в топик \" + metadata.topic() + \" с партицией \" + metadata.partition());\n            }\n        });\n\n        producer.close();\n    }\n}\n```\n\n```properties\nacks=all\nretries=3\ncompression.type=gzip\n```\n\n### С использованием Spring Kafka\n\n```java\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.config.ConcurrentMessageListenerContainer;\nimport org.springframework.kafka.listener.MessageListenerContainer;\nimport org.springframework.kafka.producer.Producer;\nimport org.springframework.kafka.producer.ProducerRecord;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@EnableKafka\n@Configuration\npublic class KafkaProducerConfig {\n    \n    @Autowired\n    private KafkaProperties kafkaProperties;\n\n    @Bean\n    public Map<String, Object> producerConfigs() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getServer());\n        props.put(ProducerConfig.CLIENT_ID_CONFIG, kafkaProperties.getProducerId());\n        props.put(\n                ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, \n                \"com.example.configuration.kafka.KafkaProducerLoggingInterceptor\"\n        );\n        \n        if (\"SASL_SSL\".equals(kafkaProperties.getSecurityProtocol())) {\n            props.put(\"ssl.truststore.location\", kafkaProperties.getSslTrustStoreLocation());\n            props.put(\"ssl.truststore.password\", kafkaProperties.getSslTrustStorePassword());\n            props.put(\"ssl.truststore.type\", kafkaProperties.getSslTrustStoreType());\n            props.put(\"ssl.keystore.type\", kafkaProperties.getSslKeyStoreType());\n          \n            props.put(\"sasl.mechanism\", kafkaProperties.getSaslMechanism());\n            props.put(\"security.protocol\", kafkaProperties.getSecurityProtocol());\n            props.put(\"sasl.jaas.config\", kafkaProperties.getJaasConfigCompiled());\n        }\n        \n        return props;\n    }\n  \n    @Bean\n    public ProducerFactory<String, String> producerFactory() {\n        var stringSerializerKey = new StringSerializer();\n        stringSerializerKey.configure(Map.of(\"key.serializer.encoding\", \"UTF-8\"), true);\n        stringSerializerKey.configure(Map.of(\"serializer.encoding\", \"UTF-8\"), true);\n    \n        var stringSerializerValue = new StringSerializer();\n        stringSerializerValue.configure(Map.of(\"value.serializer.encoding\", \"UTF-8\"), false);\n        stringSerializerValue.configure(Map.of(\"serializer.encoding\", \"UTF-8\"), false);\n    \n        return new DefaultKafkaProducerFactory<>(producerConfigs(), stringSerializerKey, stringSerializerValue);\n    }\n  \n    @Bean\n    public KafkaTemplate<String, String> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n}\n```\n\n```java\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class KafkaProducerService {\n    \n    private final KafkaTemplate<String, String> kafkaTemplate;\n\n    public KafkaProducerService(KafkaTemplate<String, String> kafkaTemplate) {\n        this.kafkaTemplate = kafkaTemplate;\n    }\n\n    public void sendMessage(String message, String key, String topic) {\n      try {\n        log.info(\"Sending message {}\", data);\n        kafkaTemplate.send(topic, key, message);\n        log.info(\"Successfully send message {}\", data);\n      } catch (Exception ex) {\n        log.error(\"Failed send message to {} topic by key {}\", key, topic);\n        throw ex;\n      }\n    }\n}\n```\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/kafka\")\npublic class KafkaController {\n\n    @Autowired\n    private KafkaProducerService kafkaProducerService;\n\n    @PostMapping(\"/send\")\n    public String sendMessage(@RequestParam String message, @RequestParam String key, @RequestParam String topic) {\n        kafkaProducerService.sendMessage(message, key, topic);\n        return \"Message sent to Kafka!\";\n    }\n}\n```\n\n### С использованием Spring Cloud Stream\n\n```yaml\nspring:\n  cloud:\n    stream:\n      bindings:\n        output:\n          destination: my_topic\n      kafka:\n        binder:\n          brokers: localhost:9092\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.messaging.Source;\nimport org.springframework.integration.support.MessageBuilder;\nimport org.springframework.messaging.Message;\nimport org.springframework.stereotype.Service;\n\n@Service\n@EnableBinding(Source.class) // Подключение к каналу сообщений\npublic class KafkaStreamProducer {\n\n    private final Source source;\n\n    public KafkaStreamProducer(Source source) {\n        this.source = source;\n    }\n\n    public void sendMessage(String message) {\n        Message<String> msg = MessageBuilder.withPayload(message).build();\n        source.output().send(msg); // Отправка сообщения в Kafka\n    }\n}\n```\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/kafka-stream\")\npublic class KafkaStreamController {\n\n    @Autowired\n    private KafkaStreamProducer kafkaStreamProducer;\n\n    @PostMapping(\"/send\")\n    public String sendMessage(@RequestParam String message) {\n        kafkaStreamProducer.sendMessage(message);\n        return \"Message sent to Kafka via Spring Cloud Stream!\";\n    }\n}\n```\n\n[к оглавлению](#apache-kafka)\n\n## Архитектура консюмера\n\nПотребители используют **Kafka Consumer API** для взаимодействия с брокерами Kafka. Они получают сообщения и обрабатывают\nих согласно своей логике. Потребители могут быть объединены в группы **Consumer Groups**.\n\n### Резюме\n\n* \"Smart\" консюмер\n* Консюмер опрашивает кафку\n* Консюмер отвечает за гарантию обработки\n* Автоматические фейловер в консюмер-группе\n* Независимая обработка разными консюмер-группе\n\n### Компоненты\n\n#### Consumer Group\n\nKafka использует концепцию Consumer Groups, что позволяет нескольким потребителям работать вместе, чтобы параллельно\nобрабатывать данные из топиков. Каждый потребитель в группе обрабатывает только часть данных из топика, обеспечивая масштабируемость и балансировку нагрузки.\n\n* Все сообщения из одного Kafka Topic делятся между всеми потребителями в группе\n* Если в группе несколько потребителей, Kafka гарантирует, что каждая партиция топика будет обрабатываться только одним потребителем\n* В случае если один из потребителей выходит из строя, его партиции автоматически перераспределяются между оставшимися активными потребителями\n\n#### Offset (Смещение)\n\nПотребитель отслеживает offset каждой партиции, чтобы понимать, с какого сообщения продолжать чтение. Смещение — это\nуникальный идентификатор каждого сообщения в партиции.\n\nПотребители могут хранить offset в Kafka или вне её (например, в базе данных или файловой системе). Если потребитель\nотключается, он может возобновить обработку с того места, где остановился, прочитав сохранённый offset.\n\n####  Poll (Опрос)\n\nПотребители используют метод poll() для опроса Kafka на наличие новых сообщений. Это асинхронный процесс, и Kafka будет\nотправлять потребителю доступные сообщения по мере их поступления.\n\n* Потребитель может указывать тайм-аут, после которого метод poll() вернёт пустой результат, если сообщений нет.\n* Потребитель должен обрабатывать сообщения, а затем снова опрашивать Kafka для получения новых данных.\n\n### Процесс работы\n\n1. **Инициализация**: Потребитель подключается к Kafka-брокерам и присоединяется к consumer group. Он получает информацию о партиции топика, который будет читать.\n2. **Подписка на топик**: Потребитель подписывается на определённые топики с помощью метода `subscribe()`.\n3. **Опрос**: Потребитель вызывает метод `poll()` для получения новых сообщений. Если в очереди есть сообщения, они передаются потребителю для обработки.\n4. **Обработка сообщений**: Потребитель обрабатывает сообщения, извлекая полезную информацию из каждого.\n5. **Подтверждение обработки**: После обработки сообщения потребитель подтверждает обработку с помощью `commit()`.\n   Это обновляет **offset**, позволяя потребителю продолжить чтение с места, на котором остановился.\n6. **Обработка ошибок**: В случае ошибки потребитель может решить, как повторить обработку сообщения\n   (например, с использованием механизма повторных попыток).\n7. **Завершение работы**: Когда потребитель завершает обработку, он выходит из consumer group и может закрыть соединение с Kafka.\n\n[к оглавлению](#apache-kafka)\n\n## Настройки консюмера\n\n* **bootstrap.servers** — список брокеров, к которым будет подключаться потребитель\n* **group.id** — идентификатор группы потребителей\n* **auto.offset.reset** — настройка поведения при отсутствии offset (`earliest` для чтения с самого начала или `latest` для чтения с конца)\n* **enable.auto.commit** — указывает, должен ли потребитель автоматически коммитить offset. Если `false`, потребитель должен делать это вручную\n* **auto.commit.interval.ms** — определяет интервал времени между автоматическими коммитами offset сообщений, если включена автоматическая фиксация\n* **max.poll.records** — максимальное количество сообщений, которые потребитель будет получать за один вызов `poll()`\n* **session.timeout.ms** — максимальное время без общения с Kafka перед тем, как потребитель считается недоступным\n* **client.rack** — используется для указания серверной стойки или дата-центра. Это особенно важно в случае, если у вас\n  есть распределённая инфраструктура Kafka с несколькими стойками или дата-центрами, где сообщения могут быть реплицированы\n  между разными физическими местоположениями (например, несколькими дата-центрами).\n\n### Что такое Rack в контексте Kafka?\n\n**Rack** — это метка, которая идентифицирует физическое местоположение брокеров Kafka. В Kafka можно задать rack для каждого брокера\nс помощью параметра `broker.rack`, чтобы управлять репликацией данных, предпочтительно размещая реплики на разных физических машинах или в разных дата-центрах.\n\n**Преимущества использования client.rack**\n\n* **Снижение задержек**: Kafka будет предпочитать, чтобы данные попадали в тот же rack, где находится клиент, что уменьшает время отклика\n* **Повышенная отказоустойчивость**: С правильной настройкой client.rack и broker.rack можно улучшить отказоустойчивость\n  за счет размещения реплик в разных физически удаленных местах\n* **Лучшее использование ресурсов**: Правильное распределение нагрузки по rack помогает избежать перегрузки одного физического местоположения\n\n[к оглавлению](#apache-kafka)\n\n## Пример конфигурации Kafka Consumer\n\n```java\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Collections;\n\npublic class KafkaConsumerExample {\n\n    public static void main(String[] args) {\n        String bootstrapServers = \"localhost:9092\";\n        String groupId = \"my-consumer-group\";\n        String topic = \"my-topic\";\n\n        // Настройки Consumer\n        Map<String, Object> consumerConfigs = new HashMap<>();\n        consumerConfigs.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        consumerConfigs.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        consumerConfigs.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        consumerConfigs.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        consumerConfigs.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n\n        // Создание Consumer\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(consumerConfigs);\n\n        // Подписка на тему\n        consumer.subscribe(Collections.singletonList(topic));\n\n        try {\n            // Чтение сообщений из Kafka\n            while (true) {\n                var records = consumer.poll(Duration.ofSeconds(1));\n                records.forEach(record -> System.out.println(\"Received message: \" + record.value()));\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n**At least once**\n\nЧтобы гарантировать обработку сообщений хотя бы один раз, нужно коммитить после обработки.\n\n```java\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Collections;\n\npublic class KafkaConsumerAtLeastOnce {\n\n  public static void main(String[] args) {\n    try {\n      // Чтение сообщений\n      while (true) {\n        var records = consumer.poll(Duration.ofSeconds(1));  // Ожидание 1 секунду для получения сообщений\n        process(records);\n        consumer.commitAsync(); // Commit после обработки\n      }\n    } finally {\n      consumer.close();  // Закрытие consumer\n    }\n  }\n}\n```\n\n**At most once**\n\nЧтобы гарантировать обработку сообщений не более одного раза, нужно коммитить до обработки или включить авто-подтверждение смещений\n`enable.auto.commit=true`.\n\n```java\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\n\nimport java.time.Duration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Collections;\n\npublic class KafkaConsumerAtLeastOnce {\n\n  public static void main(String[] args) {\n    try {\n      // Чтение сообщений\n      while (true) {\n        var records = consumer.poll(Duration.ofSeconds(1));  // Ожидание 1 секунду для получения сообщений\n        consumer.commitAsync(); // Commit перед обработкой\n        process(records);\n      }\n    } finally {\n      consumer.close();  // Закрытие consumer\n    }\n  }\n}\n```\n\n### С использованием Spring Kafka\n\n```java\n@EnableKafka\n@Configuration\npublic class KafkaConsumerConfig {\n\n    @Autowired\n    private KafkaProperties kafkaProperties;\n\n    @Bean\n    public ConsumerFactory<String, String> consumerFactory() {\n        return new DefaultKafkaConsumerFactory<>(consumerConfigs());\n    }\n\n    @Bean\n    public Map<String, Object> consumerConfigs() {\n        Map<String, Object> configs = new HashMap<>();\n        configs.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaProperties.getServer());\n        configs.put(ConsumerConfig.GROUP_ID_CONFIG, kafkaProperties.getConsumerGroupId());\n        configs.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        configs.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        return configs;\n    }\n\n    @Bean\n    public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> kafkaListenerContainerFactory() {\n        ConcurrentMessageListenerContainerFactory<String, String> factory = new ConcurrentMessageListenerContainerFactory<>();\n        factory.setConsumerFactory(consumerFactory());\n        return factory;\n    }\n}\n```\n\n```java\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class KafkaConsumer {\n\n    @KafkaListener(topics = \"my_topic\", groupId = \"group_id\")\n    public void listen(@Payload String message,\n                       @Header(\"traceId\") String traceId,\n                       @Header(\"correlationId\") String correlationId) {\n        System.out.println(\"Received message: \" + message);\n        System.out.println(\"Trace ID: \" + traceId);\n        System.out.println(\"Correlation ID: \" + correlationId);\n    }\n}\n```\n\n**At least once**\n\n```yaml\nspring:\n  kafka:\n    consumer:\n      enable-auto-commit: false  # Отключение авто-commit\n      auto-offset-reset: earliest  # Начинать чтение с самого начала (если нет смещения)\n      group-id: my-consumer-group\n      max-poll-records: 500  # Максимальное количество сообщений для обработки за один раз\n    listener:\n      ack-mode: manual  # Ручное подтверждение\n```\n\n```java\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.kafka.listener.MessageListener;\nimport org.springframework.kafka.listener.MessageListenerContainer;\nimport org.springframework.kafka.listener.config.DefaultMessageListenerContainer;\nimport org.springframework.kafka.core.ConsumerFactory;\nimport org.springframework.kafka.listener.ConcurrentMessageListenerContainer;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.listener.MessageListener;\nimport org.springframework.kafka.listener.MessageListenerContainer;\n\n@EnableKafka\npublic class AtLeastOnceConsumer {\n\n    @KafkaListener(topics = \"my-topic\", groupId = \"my-consumer-group\")\n    public void listen(String message, Acknowledgment acknowledgment) {\n        System.out.println(\"Received message: \" + message);\n        // Обработка сообщения\n        // Подтверждение смещения вручную после успешной обработки\n        acknowledgment.acknowledge();\n    }\n}\n```\n\n**At most once**\n\n```yaml\nspring:\n  kafka:\n    consumer:\n      enable-auto-commit: true  # Включение авто-commit\n      group-id: my-consumer-group\n      auto-offset-reset: earliest  # Начинать чтение с самого начала\n      max-poll-records: 100  # Максимальное количество сообщений для обработки за один раз\n```\n\n```java\nimport org.springframework.kafka.annotation.KafkaListener;\n\npublic class AtMostOnceConsumer {\n\n    @KafkaListener(topics = \"my-topic\", groupId = \"my-consumer-group\")\n    public void listen(String message) {\n        System.out.println(\"Received message: \" + message);\n        // Обработка сообщения...\n        // Смещение будет автоматически зафиксировано после получения сообщения\n    }\n}\n```\n\n### С использованием Spring Cloud Stream\n\n```yaml\nspring:\n  cloud:\n    stream:\n      bindings:\n        input:\n          destination: my-topic\n          group: my-consumer-group\n          content-type: application/json\n      kafka:\n        binder:\n          brokers: localhost:9092\n          auto-create-topics: false\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.messaging.handler.annotation.Payload;\nimport org.springframework.stereotype.Service;\n\n@Service\n@EnableBinding(KafkaProcessor.class)  // Указывает на интерфейс, с которым связывается этот сервис\npublic class KafkaConsumerService {\n\n    // Метод будет слушать сообщения из указанного канала\n    @StreamListener(\"input\")\n    public void handle(@Payload String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n}\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.Input;\nimport org.springframework.messaging.SubscribableChannel;\n\npublic interface KafkaProcessor {\n\n    @Input(\"input\")  // Имя канала, которое мы используем в application.yml\n    SubscribableChannel input();\n}\n```\n\n**At least once**\n\n```yaml\nspring:\n  cloud:\n    stream:\n      bindings:\n        input:\n          destination: my-topic\n          group: my-consumer-group\n          content-type: application/json\n          consumer:\n            ackMode: manual  # Ручное подтверждение\n            maxAttempts: 3  # Максимальное количество попыток\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\n@EnableBinding(Sink.class)  // Sink - это интерфейс, предоставляющий Binding для входных сообщений\npublic class AtLeastOnceConsumer {\n\n    @StreamListener(Sink.INPUT)\n    public void handleMessage(Message<String> message, @Header(name = \"kafka_offset\") String offset) {\n        // Обработка сообщения\n        System.out.println(\"Received message: \" + message.getPayload());\n        // После успешной обработки подтверждаем сообщение\n        // Spring Cloud Stream автоматически подтвердит сообщение после завершения метода\n        // благодаря ackMode=manual и настроенному acknowledgment\n    }\n}\n```\n\n**At most once**\n\n```yaml\nspring:\n  cloud:\n    stream:\n      bindings:\n        input:\n          destination: my-topic\n          group: my-consumer-group\n          content-type: application/json\n          consumer:\n            ackMode: batch  # Автоматическое подтверждение после пакета сообщений\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.messaging.Message;\nimport org.springframework.stereotype.Component;\n\n@Component\n@EnableBinding(Sink.class)\npublic class AtMostOnceConsumer {\n\n    @StreamListener(Sink.INPUT)\n    public void handleMessage(Message<String> message) {\n        // Обработка сообщения\n        System.out.println(\"Received message: \" + message.getPayload());\n        // Смещение будет автоматически зафиксировано после получения сообщения\n    }\n}\n```\n\n**Mostly Once**\n\nЭто гибридный режим, который стремится быть чем-то средним между At least once и At most once. Он предполагает, что сообщения\nбудут доставлены обычно один раз, но иногда, в случае сбоев, может быть обработано больше одного раза. Для реализации\nтакого режима в Spring Cloud Stream потребуется дополнительная логика, например, фильтрация дублированных сообщений или\nиспользование уникальных идентификаторов сообщений.\n\nВ рамках Spring Cloud Stream, можно обработать Mostly Once с использованием уникальных идентификаторов сообщений или\nкеширования состояния, чтобы отфильтровать повторно обработанные сообщения.\n\n```yaml\nspring:\n  cloud:\n    stream:\n      bindings:\n        input:\n          destination: my-topic\n          group: my-consumer-group\n          content-type: application/json\n          consumer:\n            ackMode: manual  # Ручное подтверждение\n            maxAttempts: 3  # Максимальное количество попыток\n```\n\n```java\nimport org.springframework.cloud.stream.annotation.EnableBinding;\nimport org.springframework.cloud.stream.annotation.StreamListener;\nimport org.springframework.messaging.Message;\nimport org.springframework.messaging.handler.annotation.Header;\nimport org.springframework.messaging.simp.SimpMessagingTemplate;\nimport org.springframework.stereotype.Component;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Component\n@EnableBinding(Sink.class)\npublic class MostlyOnceConsumer {\n\n    private Set<String> processedMessageIds = new HashSet<>();\n\n    @StreamListener(Sink.INPUT)\n    public void handleMessage(Message<String> message, @Header(\"messageId\") String messageId) {\n        if (processedMessageIds.contains(messageId)) {\n            System.out.println(\"Duplicate message: \" + messageId);\n            return;  // Пропускаем дублированное сообщение\n        }\n        // Обработка сообщения\n        System.out.println(\"Received message: \" + message.getPayload());\n        // Добавляем идентификатор в обработанные\n        processedMessageIds.add(messageId);\n        // После успешной обработки подтверждаем сообщение вручную\n        // Spring Cloud Stream подтвердит сообщение после выполнения метода\n    }\n}\n```\n\n[к оглавлению](#apache-kafka)\n\n## Основные API Kafka\n\n* Producer API\n* Consumer API\n* Streams API\n* Connector API\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Producer API?\n\nИспользуется для публикации потока сообщений в топики Kafka. Он управляет партицированием сообщений, сжатием и балансировкой \nнагрузки между несколькими брокерами. Продюсер также отвечает за повторные неудачные попытки публикации и может быть \nнастроен на различные уровни гарантий доставки.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Consumer API?\n\nОбеспечивает механизм для потребления сообщений топиков. Оно позволяет приложениям и микросервисам читать данные, \nпоступающие в Kafka, и обрабатывать их для дальнейшего использования, будь то хранение, анализ или реактивная обработка.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Connector API?\n\nConnector API в Apache Kafka является частью Kafka Connect, которая представляет собой инфраструктуру для интеграции\nвнешних систем с Kafka. Connector API играет ключевую роль в упрощении процесса подключения различных источников данных\nи систем-приемников к Kafka, предоставляя возможность автоматического перемещения данных между ними.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Streams API?\n\nЭто компонент Apache Kafka, предназначенный для создания приложений и микросервисов, которые обрабатывают потоки данных \nв реальном времени. Его основная роль заключается в том, чтобы позволить разработчикам легко обрабатывать и анализировать \nданные, поступающие в виде непрерывных потоков из топиков. Kafka Streams API предоставляет высокоуровневый интерфейс для \nвыполнения таких операций, как фильтрация, агрегация, объединение данных и вычисление оконных функций.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Transactions API?\n\nKafka Transactions API позволяет выполнять атомарные обновления для нескольких топиков. Он включает exactly-once\nгарантию для приложений, которые читают данные из одного топика и пишут в другой. Это особенно полезно для приложений потоковой \nобработки, которым необходимо гарантировать, что каждое входное событие влияет на выходные данные ровно один раз, даже в случае сбоев.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль Quota API?\n\nQuota API позволяет настраивать квоты для каждого клиента для ограничения скорости создания или потребления данных, чтобы \nодин клиент не потреблял слишком много ресурсов брокера. Это помогает обеспечить справедливое распределение ресурсов и \nпредотвратить сценарии отказа в обслуживании.\n\n[к оглавлению](#apache-kafka)\n\n## Какова роль AdminClient API?\n\nAdminClient API предоставляет операции для управления топиками, брокерами, конфигурацией и другими объектами Kafka. \nЕго можно использовать для создания, удаления и описания топиков, управления списками ACL, получения информации о кластере и\nпрограммного выполнения других административных задач.\n\n[к оглавлению](#apache-kafka)\n\n## Kafka Consumer\n\n## Для чего нужен координатор группы?\n\nКоординатор группы отвечает за управление группами потребителей. Он управляет членством в группах потребителей, назначает\nпартиции потребителям внутри группы и управляет фиксацией смещения. Когда потребитель присоединяется к группе или покидает ее,\nкоординатор группы запускает перебалансировку для переназначения партиций среди оставшихся потребителей.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен Consumer heartbeat thread?\n\nConsumer Heartbeat Thread отвечает за отправку периодических сигналов брокеру Kafka (в частности, координатору группы).\nЭти сигналы указывают на то, что потребитель жив и все еще является частью группы потребителей. Если потребитель не отправляет\nданные сигналы в течение настроенного периода, он считается неживым, и координатор группы инициирует перебалансировку\nдля переназначения его партиций другим потребителям в группе.\n\n[к оглавлению](#apache-kafka)\n\n## Как Kafka обрабатывает сообщения?\n\nKafka поддерживает два основных способа обработки сообщений:\n* **Queue**: каждое сообщение обрабатывается одним потребителем в группе потребителей. Это достигается за счет наличия\n  в группе нескольких потребителей, каждый из которых считывает данные из отдельных партиций.\n* **Publish-Subscribe**: все сообщения обрабатываются всеми потребителями. Это достигается за счет того, что каждый\n  потребитель находится в своей собственной группе потребителей, что позволяет всем потребителям читать все сообщения.\n\n[к оглавлению](#apache-kafka)\n\n## Как Kafka обрабатывает задержку консюмера?\n\nЗадержка (лаг) консюмера в Kafka относится к разнице между оффсетом последнего созданного сообщения и оффсетом последнего\nполученного сообщения. Kafka предоставляет инструменты и API для мониторинга задержек консюмеров такие, как инструмент\nкомандной строки Kafka Consumer Groups и API AdminClient. Высокая задержка консюмеров может указывать на проблемы с\nпроизводительностью или недостаточную пропускную способность консюмеров. Kafka не обрабатывает задержки автоматически,\nно предоставляет информацию, необходимую приложениям для принятия решений о масштабировании или оптимизации производительности.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужны методы subscribe() и poll()?\n\nМетод subscribe() используется для подписки на один или несколько топиков. Фактически он не извлекает никаких данных.\nМетод poll(), с другой стороны, используется для извлечения данных из топиков. Он возвращает записи, которые были опубликованы\nс момента последнего запроса топиков и партиций. Метод poll() обычно вызывается в цикле для непрерывного получения данных.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен метод position()?\n\nМетод position() возвращает смещение следующей записи, которая будет извлечена для данной партиции. Это полезно для\nотслеживания хода получения данных и может использоваться в сочетании с методом committed(), чтобы определить насколько\nсильно потребитель отстал от своего последнего комита оффсета. Эта информация может быть ценной для мониторинга и\nуправления показателями потребителей.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужны методы commitSync() и commitAsync()?\n\nЭти методы используются для фиксации смещений:\n* **commitSync()**: синхронно фиксирует последнее смещение, возвращенное poll(). Он будет повторять попытку до тех пор,\n  пока не завершится успешно или не столкнется с непроверяемой ошибкой.\n* **commitAsync()**: асинхронно фиксирует смещения. Он не повторяет попытку при сбое, что делает его более быстрым,\n  но менее надежным, чем commitSync(). Выбор между этими методами зависит от баланса между производительностью и надежностью,\n  требуемого приложением.\n\n[к оглавлению](#apache-kafka)\n\n## Другие вопросы\n\n## Для чего нужен идемпотентный продюсер?\n\nИдемпотентный продюсер гарантирует exactly-once гарантию доставки, предотвращая дублирование записей в Kafka в случае \nповторных попыток отправки сообщений. Это важно для поддержания целостности данных и правильности их обработки в системе, \nособенно в распределенных системах, где могут возникать ошибки связи или сбои.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен интерфейс Partitioner?\n\nИнтерфейс Partitioner в Producer API определяет в какую партицию топика будет отправлено сообщение. Partitioner по-умолчанию\nиспользует хэш ключа (если он присутствует) для выбора партиции, гарантируя, что сообщения с одним и тем же ключом всегда\nотправляются в одну и ту же партицию. Могут быть реализованы пользовательские Partitioner для управления распределением\nсообщений по партициям на основе определенной бизнес-логики или характеристик данных.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен Broker log cleaner thread?\n\nПоток очистки журнала в Kafka отвечает за выполнение сжатия журнала. Сжатие журнала - это механизм, при котором Kafka \nудаляет избыточные записи, сохраняя только последнее значение для каждого ключа. Это полезно в тех случаях, когда требуется \nтолько последнее обновление для данного ключа, например, для обслуживания changelog или состояния БД. Программа очистки журналов \nпериодически запускается для сжатия соответствующих партиций.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен Kafka Mirror Maker?\n\nЭто инструмент, позволяющий реплицировать данные между кластерами Kafka, потенциально находящихся в разных дата-центрах.\nОн работает, потребляя данные из одного кластера и передавая в другой. Можно использовать для создания резервной копии данных, \nобъединения данных из нескольких дата-центров в единое хранилище или для переноса данных между кластерами.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужна Schema Registry?\n\nKafka Schema Registry предоставляет RESTful интерфейс для хранения и извлечения схем Avro. Schema Registry используется\nсовместно с Kafka для обеспечения совместимости схем данных между производителями и потребителями. Это особенно полезно\nпри разработке моделей данных с течением времени, сохраняя обратную и прямую совместимость.\n\n[к оглавлению](#apache-kafka)\n\n## Для чего нужен Streams DSL?\n\nKafka Streams DSL предоставляет высокоуровневый API для операций потоковой обработки. Он позволяет разработчикам описывать \nсложную логику обработки, такую как фильтрация, преобразование, агрегирование и объединение потоков данных. DSL абстрагирует \nмногие низкоуровневые детали потоковой обработки, упрощая создание и обслуживание приложений потоковой обработки.\n\n[к оглавлению](#apache-kafka)\n\n## Как Kafka обеспечивает версионирование сообщений?\n\nСама по себе Kafka не обеспечивает версионирование сообщений напрямую, но предоставляет механизмы, позволяющие реализовывать \nуправление версиями. Одним из распространенных подходов является включение поля версии в схему сообщения. Для более сложных задач \nуправления версиями используются реестры схем (например, Confluent Schema Registry), которые могут управлять изменением схемы и совместимостью.\n\n[к оглавлению](#apache-kafka)\n\n## Как потребители получают сообщения от брокера?\n\nKafka использует pull-модель для извлечения сообщений. Потребители запрашивают сообщения у брокеров, а не брокеры \nотправляют сообщения потребителям. Это позволяет потребителям контролировать скорость, с которой они получают сообщения. \nПотребители отправляют запросы на получение данных от брокера, указывая топик, партицию и начальное смещение для каждой партиции. \nБрокер отвечает сообщениями с объемом до указанного максимального предела в байтах.\n\n[к оглавлению](#apache-kafka)\n\n## В чем разница между Kafka Streams и Apache Flink?\n\nKafka Streams и Apache Flink — это два мощных инструмента для обработки потоков данных в режиме реального времени, но\nони различаются по архитектуре, возможностям и сценариям применения.\n\n### Сравнение Kafka Streams и Apache Flink\n\n| **Критерий**           | **Kafka Streams**                           | **Apache Flink**                        |\n|------------------------|---------------------------------------------|-----------------------------------------|\n| **Архитектура**         | Встроенная библиотека, работающая внутри приложения. Зависит от Kafka. | Независимая распределенная система потоковой обработки данных с возможностью интеграции с различными источниками и приемниками данных. |\n| **Обработка данных**    | Обрабатывает потоки событий непосредственно из Kafka. Подходит для обработки событий и транзакционных данных с минимальной задержкой. | Поддерживает как потоковую (streaming), так и пакетную (batch) обработку данных. Специализируется на сложной обработке событий с гибкими возможностями управления состоянием. |\n| **Зависимость от Kafka**| Построена исключительно вокруг Kafka. Требует Kafka для получения и отправки данных. | Работает с широким спектром источников данных (Kafka, HDFS, базы данных и т. д.). Kafka — лишь один из многих источников. |\n| **Установка**          | Легко интегрируется в существующее Java/Scala-приложение как библиотека. Не требует развертывания кластеров. | Требует отдельного кластера для выполнения, что подходит для высокопроизводительных распределенных систем. |\n| **Управление состоянием** | Встроенное состояние с использованием RocksDB, также поддержка репликации состояния. | Имеет развитую систему управления состоянием, поддерживает сложные функции восстановления состояния и обработки данных. |\n| **Гарантия доставки**   | Поддерживает \"at-least-once\" и \"exactly-once\" семантику, когда Kafka настроена соответствующим образом. | Имеет гибкие гарантии доставки: поддержка \"exactly-once\", \"at-least-once\" и \"at-most-once\". |\n| **Масштабируемость**    | Масштабируется автоматически вместе с Kafka-партициями. Каждая инстанция потребителя Kafka обрабатывает свою партицию. | Поддерживает масштабирование на уровне задач (task), с более гибкой моделью масштабирования и управления ресурсами. |\n| **Обработка событий**   | Подходит для обработки событий с низкой задержкой и транзакционными требованиями. | Специализируется на сложной обработке событий, таких как windowing, агрегирование и работа с изменяющимся состоянием. Поддерживает сложные аналитические операции. |\n| **Инструменты и API**   | Легковесная библиотека с простыми API для работы с потоками данных. Основные операции — фильтрация, маппинг, объединение потоков, windowing. | Продвинутая система с богатыми API для сложных вычислений, поддерживающая потоковую и пакетную обработку, обработку событий и контроль сложных бизнес-процессов. |\n| **Требования к ресурсам**| Менее ресурсоемка, так как не требует отдельного кластера. Работает в рамках JVM-приложения. | Требует более высоких вычислительных ресурсов, так как выполняется на отдельном кластере и поддерживает высокую степень параллелизма. |\n\n### Когда выбрать Kafka Streams\n- Если вы уже используете Kafka и вам нужна легковесная библиотека для обработки данных непосредственно внутри вашего приложения.\n- Для сценариев с низкой задержкой, где данные приходят из Kafka и должны быть быстро обработаны с минимальными накладными расходами.\n- Если вам нужно встроить обработку потоков данных в существующую Java/Scala программу без необходимости развертывания отдельных кластеров.\n\n### Когда выбрать Apache Flink\n- Если вы работаете с потоковой и пакетной обработкой данных, где источники и приемники могут быть не только Kafka, но и другие системы (например, HDFS, базы данных).\n- Для сложных задач обработки событий, требующих управления состоянием, временных окон, аналитики и восстановления после сбоев.\n- Если ваш проект требует высокой производительности, гибкости, точных гарантий доставки и распределенной обработки в кластере.\n\n### Заключение\n- **Kafka Streams** — это идеальный выбор, если ваша инфраструктура уже основана на Kafka, и вам нужна быстрая и легковесная обработка потоков данных.\n- **Apache Flink** — это мощный инструмент для сложных аналитических задач, потоковой обработки данных в режиме реального\n  времени с поддержкой сложных схем обработки, который предоставляет больше возможностей для работы с разнообразными источниками данных.\n\n[к оглавлению](#apache-kafka)\n\n## В чем разница между Kafka Consumer и Kafka Stream?\n\n**Kafka Consumer** - это клиент, который читает данные из топика и производит некоторую обработку. Обычно используется для\nпростых сценариев получения данных. **Kafka Stream**, с другой стороны, более подвинутый клиент, который может потреблять,\nобрабатывать и класть данные обратно в Kafka. Он предоставляет DSL для сложных операций потоковой обработки, таких как\nфильтрация, преобразование, агрегирование и объединение потоков.\n\n[к оглавлению](#apache-kafka)\n\n## В чем разница между Kafka и Flume?\n\n**Apache Kafka** и **Apache Flume** — это два популярных инструмента для обработки и передачи данных, однако они имеют \nразные цели и архитектуры. Вот основные различия между ними:\n\n### 1. **Назначение и использование**\n- **Kafka**: Это распределенная платформа для потоковой передачи данных, которая обеспечивает высокую пропускную способность \nи низкую задержку для обработки больших объемов данных. Kafka используется для создания стриминговых приложений и обработки \nданных в реальном времени. Она может быть использована для передачи логов, событий, метрик и других данных, требующих \nвысокой доступности и масштабируемости.\n- **Flume**: Это распределенная система для сбора, агрегации и передачи логов и событий. Flume обычно используется для \nдоставки логов с серверов в HDFS, HBase или другие системы хранения данных. Его основное предназначение — это сбор данных \nиз различных источников (например, лог-файлов) и передача их в системы хранения или аналитики.\n\n### 2. **Архитектура**\n- **Kafka**: В Kafka данные отправляются в топики и партиции, которые могут быть независимо прочитаны несколькими потребителями. \nKafka ориентирована на высокую пропускную способность и масштабируемость. Это решает задачу обработки потоковых данных и \nсобытий в реальном времени.\n- **Flume**: Flume состоит из **источников (sources)**, **каналов (channels)** и **приемников (sinks)**. Источник получает \nданные, канал их буферизует, а приемник отправляет их в конечную систему. Flume использует систему \"event-based\" и часто \nприменяется для сбора логов.\n\n### 3. **Хранение данных**\n- **Kafka**: Kafka сохраняет сообщения на диске в течение длительного времени (по умолчанию — до 7 дней) в топиках. \nПотребители могут читать данные в любой момент времени, и Kafka поддерживает концепцию **сохранения и ретрансляции данных**.\n- **Flume**: Flume не имеет встроенного механизма долговременного хранения. Он просто передает данные в назначенные места \nхранения (например, HDFS). Данные в Flume не сохраняются долго, и если система хранения не доступна, они теряются.\n\n### 4. **Производительность**\n- **Kafka**: Kafka предназначен для работы с высокими объемами данных. Он поддерживает масштабируемость как по производителям, \nтак и по потребителям, и может обрабатывать миллионы сообщений в секунду с минимальной задержкой.\n- **Flume**: Flume может быть менее масштабируемым по сравнению с Kafka и больше ориентирован на сбор логов и событий \nс различных источников. Хотя Flume тоже может обрабатывать большие объемы данных, он не предназначен для работы с \nтакими большими потоками, как Kafka.\n\n### 5. **Использование и кейсы**\n- **Kafka**: Используется для стриминга данных, аналитики в реальном времени, интеграции различных систем, работы с \nбольшими данными и построения событийных приложений.\n- **Flume**: Используется для сбора, агрегации и передачи логов и событий в системы хранения, такие как HDFS, HBase, \nили внешние системы. Это идеальный выбор для организации потоков логирования и мониторинга.\n\n### 6. **Поддержка и интеграция**\n- **Kafka**: Kafka поддерживает широкий спектр интеграций и может быть использован с различными системами для построения \nраспределенных приложений и аналитических решений.\n- **Flume**: Flume ориентирован на интеграцию с Hadoop-экосистемой, и основное его использование — это интеграция с HDFS, \nHBase и другими хранилищами данных в этой экосистеме.\n\n### 7. **Потребительская модель**\n- **Kafka**: Kafka поддерживает много потребителей, которые могут читать из одного и того же топика независимо, а также \nвозможность **повторного прочтения данных**.\n- **Flume**: Flume имеет фиксированную схему доставки данных и не поддерживает такую гибкость, как Kafka в части потребителей и обработки.\n\n### 8. **Гарантии доставки**\n- **Kafka**: Kafka поддерживает **гарантии доставки** с различными уровнями подтверждения (acknowledgment), а также может \nобеспечивать **доставку сообщений точно один раз** (exactly-once semantics).\n- **Flume**: Flume обеспечивает базовые гарантии доставки, но они менее строгие, чем у Kafka, и больше ориентированы на \nустойчивость к сбоям, а не на гарантированную доставку.\n\n[к оглавлению](#apache-kafka)\n\n## В чем разница между Kafka и RabbitMQ?\n\n**RabbitMQ** и **Apache Kafka** — это две популярные системы обмена сообщениями, каждая из которых имеет свои особенности \nи используется для разных типов приложений. Вот основные различия между ними:\n\n### 1. **Архитектура**\n- **RabbitMQ** использует **очереди сообщений**. Сообщения отправляются в очередь, и один потребитель извлекает сообщение \nиз очереди для обработки.\n- **Apache Kafka** использует **топики и партиции**. Сообщения отправляются в топики, которые могут быть разделены на \nпартиции, и несколько потребителей могут читать эти сообщения в любом порядке. Kafka ориентирован на большие потоки данных и масштабируемость.\n\n### 2. **Модель доставки сообщений**\n- **RabbitMQ**: Сообщения передаются в очереди, и каждый потребитель получает одно сообщение. Сообщения могут быть \nподтверждены (acknowledged) или отклонены (rejected). RabbitMQ гарантирует, что сообщение будет доставлено хотя бы одному потребителю.\n- **Kafka**: Сообщения сохраняются в топиках на длительный срок, и потребители могут читать их в любом порядке. Kafka \nгарантирует доставку сообщений всем потребителям, если они подписаны на топик, и может позволить многократное чтение старых сообщений.\n\n### 3. **Гарантии доставки**\n- **RabbitMQ**: Предоставляет подтверждения доставки и может повторно отправить сообщение, если потребитель не подтвердил \nего получение. Можно настроить разные уровни надежности (например, за счет использования подтверждений или транзакций).\n- **Kafka**: Сообщения сохраняются на диске, что позволяет потребителям считывать их в любое время. Kafka гарантирует \nдоставку сообщений при определенной конфигурации репликации и сохранения.\n\n### 4. **Производительность и масштабируемость**\n- **RabbitMQ**: Лучше подходит для небольших и средних систем, где требуется высокая надежность и гарантированная доставка. \nОн поддерживает **горизонтальное масштабирование**, но требует дополнительных усилий для настройки и управления.\n- **Kafka**: Отличается высокой **производительностью** и возможностью обработки больших объемов данных. Kafka легко \nмасштабируется за счет **партиционирования** и репликации данных.\n\n### 5. **Потребительская модель**\n- **RabbitMQ**: Один потребитель получает одно сообщение. Если потребитель не успевает обработать сообщение, оно может быть повторно отправлено.\n- **Kafka**: Потребители могут читать сообщения независимо друг от друга. Kafka сохраняет все сообщения в топиках, \nи потребители могут читать их в любое время. Kafka также поддерживает концепцию **групп потребителей**, где каждый \nпотребитель группы обрабатывает разные партиции.\n\n### 6. **Использование и кейсы**\n- **RabbitMQ**: Идеален для обработки запросов и ответов, распределенных приложений, микросервисов с гарантией доставки, \nбизнес-процессов с очередями задач.\n- **Kafka**: Используется для обработки потоков данных, интеграции с большими данными, записи журналов, мониторинга, \nобработки событий в реальном времени и сохранения больших объемов данных для последующего анализа.\n\n### 7. **Производители и потребители**\n- **RabbitMQ**: Один производитель отправляет сообщения в очередь, и несколько потребителей могут обрабатывать эти сообщения.\n- **Kafka**: Множество производителей могут отправлять сообщения в топики, и несколько потребителей могут читать их \nодновременно, поддерживая масштабируемость.\n\n### 8. **Сообщения и хранение**\n- **RabbitMQ**: Сообщения удаляются из очереди после их обработки потребителем. Хранение сообщений обычно краткосрочное.\n- **Kafka**: Сообщения сохраняются на диске в топиках до тех пор, пока не истечет срок хранения (по конфигурации). \nЭто позволяет повторно читать данные.\n\n[к оглавлению](#apache-kafka)\n"
        },
        {
          "name": "log.md",
          "type": "blob",
          "size": 9.7001953125,
          "content": "[Вопросы для собеседования](README.md)\n\n# Журналирование\n+ [Какие существуют типы логов?](#Какие-существуют-типы-логов)  \n+ [Из каких частей состоит система журналирования log4j?](#Из-каких-частей-состоит-система-журналирования-log4j)\n+ [Что такое _Logger_ в log4j?](#Что-такое-logger-в-log4j)\n+ [Что такое _Appender_ в log4j?](#Что-такое-appender-в-log4j)\n+ [Что такое _Layout_ в log4j?](#Что-такое-layout-в-log4j)\n+ [Перечислите уровни журналирования в log4j? Назовите порядок их приоритетности.](#Перечислите-уровни-журналирования-в-log4j-Назовите-порядок-их-приоритетности)\n+ [Какие существуют способы конфигурирования log4j?](#Какие-существуют-способы-конфигурирования-log4j)\n\n## Какие существуют типы логов?\n+ системы (System);\n+ безопасности (Security);\n+ приложения (Application, Buisness).\n\n> Пользователь входит в приложение, проверяется пароль. Это действие относится к безопасности (Security). Дальше он запускает какой-нибудь модуль. Это событие уровня приложения (Application). Модуль при старте обращается к другому модулю за какими-то дополнительными данными, производит какие-либо еще вызовы – это уже системные действия (System).\n\n[к оглавлению](#Журналирование)\n\n## Из каких частей состоит система журналирования log4j?\nСистема журналирования состоит из трёх основных частей:\n\n+ управляющей журналированием - __logger__;\n+ добавляющей в журнал - __appender__;\n+ определяющей формат добавления - __layout__.\n\n[к оглавлению](#Журналирование)\n\n## Что такое _Logger_ в log4j?\n__Logger__ представляет собой объект класса `org.apache.log4j.Logger`, который используется как управляющий интерфейс для журналирования сообщений с возможностью задавать уровень детализации. Именно logger проверяет нужно ли обрабатывать сообщение и если журналирование необходимо, то сообщение передаётся в appender, если нет - система завершает обработку данного сообщения.\n\n[к оглавлению](#Журналирование)\n\n## Что такое _Appender_ в log4j?\n__Appender__ - это именованный объект журнала событий, реализующий интерфейс `org.apache.log4j.Appender` и добавляющий события в журнал. Appender вызывает разные вспомогательные инструменты - компоновщик, фильтр, обработчик ошибок (если они определены и необходимы). В ходе этой работы окончательно устанавливается необходимость записи сообщения, сообщению придаются окончательные содержание и форма.\n\nВ log4j журнал может представлять:\n\n+ консоль;\n+ файл;\n+ сокет;\n+ объект класса реализующего `java.io.Writer` или `java.io.OutputStream`;\n+ JDBC хранилище;\n+ тему (topic) JMS;\n+ NT Event Log;\n+ SMTP;\n+ Syslog;\n+ Telnet.\n\nНаиболее часто используемые log4j appender-ы:\n\n+ `org.apache.log4j.ConsoleAppender` - вывод в консоль;\n+ `org.apache.log4j.FileAppender` - добавление в файл;\n+ `org.apache.log4j.DailyRollingFileAppender` - добавление в файл с обновлением файла через заданный промежуток времени;\n+ `org.apache.log4j.RollingFileAppender` - добавление в файл с обновлением файла по достижению определенного размера;\n+ `org.apache.log4j.varia.ExternallyRolledFileAppender` - расширение _RollingFileAppender_ обновляющее файл по команде принятой с заданного порта;\n+ `org.apache.log4j.net.SMTPAppender` - сообщение по SMTP;\n+ `org.apache.log4j.AsyncAppender` - позволяет, используя отдельный поток, организовать асинхронную работу, когда сообщения фиксируются лишь при достижении определенного уровня заполненности промежуточного буфера.\n+ `org.apache.log4j.nt.NTEventLogAppender` - добавление в NT Event Log;\n+ `org.apache.log4j.net.SyslogAppender` - добавление в Syslog;\n+ `org.apache.log4j.jdbc.JDBCAppender` - запись в хранилище JDBC;\n+ `org.apache.log4j.lf5.LF5Appender` - сообщение передаётся в специальный GUI интерфейс LogFactor5\n+ `org.apache.log4j.net.SocketAppender` - трансляция сообщения по указанному адресу и порту;\n+ `org.apache.log4j.net.SocketHubAppender` - рассылка сообщения сразу нескольким удалённым серверам, соединённым по заданному порту;\n+ `org.apache.log4j.net.TelnetAppender` - отсылка сообщения по протоколу Telenet;\n+ `org.apache.log4j.net.JMSAppender` - добавление сообщения в JMS.\n\n[к оглавлению](#Журналирование)\n\n## Что такое _Layout_ в log4j?\n__Layout__ - наследник класса `org.apache.log4j.Layout` предоставляющий возможность форматирования сообщения перед добавлением в журнал.\n\nВ log4j существуют следующие типы layout-ов:\n\n+ `org.apache.log4j.SimpleLayout` - на выходе получается строка содержащая лишь уровень вывода и сообщение;\n+ `org.apache.log4j.HTMLLayout` - форматирует сообщение в виде элемента HTML-таблицы;\n+ `org.apache.log4j.xml.XMLLayout` - компонует сообщение в виде XML формате;\n+ `org.apache.log4j.TTCCLayout` - на выходе сообщение дополняется информацией о времени, потоке, имени логгера и вложенном диагностическом контексте;\n+ `org.apache.log4j.PatternLayout` / `org.apache.log4j.EnhancedPatternLayout` - настройка форматирования сообщения при помощи шаблона заданного пользователем.\n\n[к оглавлению](#Журналирование)\n\n## Перечислите уровни журналирования в log4j? Назовите порядок их приоритетности.\n+ __OFF__ - отсутствие журналирования;\n+ __FATAL__ - фатальная ошибка;\n+ __ERROR__ - ошибка;\n+ __WARN__ - предупреждение;\n+ __INFO__ - информация;\n+ __DEBUG__ - детальная информация для отладки;\n+ __TRACE__ – трассировка всех сообщений.\n\nМежду уровнями логирования установлен следующий порядок приоритетов:\n\n`ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF`\n\n[к оглавлению](#Журналирование)\n\n## Какие существуют способы конфигурирования log4j?\nДля того, чтобы log4j начал работать нужно предоставить ему конфигурацию. Это можно сделать несколькими путями:\n\n+ Создать конфигурацию программно, т.е. получить logger, определить уровень журналирования, прикрепить appender и задать способ форматирования.\n+ Указать файл или URL как аргумент при запуске java-машины `-Dlog4j.configuration=путь/к/файлу/конфигурации`, а затем прочитать его в программе при помощи `PropertyConfigurator.configure(...)`/ `DOMConfigurator.configure(...)` для формата `.properties` или `XML` соответственно.\n+ Загрузить конфигурацию из файла в формате `XML` или `.properties`: log4j ищет файл конфигурации в classpath. Сначала ищется файл `log4j.xml` и, если таковой не найден, -  файл `log4j.properties`.\n\n[к оглавлению](#Журналирование)\n\n# Источники\n+ [Quizful](http://www.quizful.net/)\n+ [Skipy](http://skipy.ru/useful/logging.html#log4j_concepts_logger)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "mcon.bat",
          "type": "blob",
          "size": 0.037109375,
          "content": "@java -jar con4md.jar --marker=\"##\" %*"
        },
        {
          "name": "mcon.sh",
          "type": "blob",
          "size": 0.037109375,
          "content": "java -jar con4md.jar --marker=\"##\" $@\n"
        },
        {
          "name": "oop.md",
          "type": "blob",
          "size": 42.05078125,
          "content": "[Вопросы для собеседования](README.md)\n\n# ООП\n+ [Что такое _ООП_?](#Что-такое-ООП)\n+ [Назовите основные принципы _ООП_.](#Назовите-основные-принципы-ООП)\n+ [Что такое _«инкапсуляция»_?](#Что-такое-инкапсуляция)\n+ [Что такое _«наследование»_?](#Что-такое-наследование)\n+ [Что такое _«полиморфизм»_?](#Что-такое-полиморфизм)\n+ [Что такое _«абстракция»_?](#Что-такое-абстракция)\n+ [Что представляет собой _«обмен сообщениями»_?](#Что-представляет-собой-обмен-сообщениями)\n+ [Расскажите про основные понятия ООП: _«класс»_, _«объект»_, _«интерфейс»_.](#Расскажите-про-основные-понятия-ООП-класс-объект-интерфейс)\n+ [В чем заключаются преимущества и недостатки объектно-ориентированного подхода в программировании?](#В-чем-заключаются-преимущества-и-недостатки-объектно-ориентированного-подхода-в-программировании)\n+ [Что подразумевают в плане принципов ООП выражения _«является»_ и _«имеет»_?](#Что-подразумевают-в-плане-принципов-ООП-выражения-является-и-имеет)\n+ [В чем разница между _композицией_ и _агрегацией_?](#В-чем-разница-между-композицией-и-агрегацией)\n+ [Что такое _статическое_ и _динамическое связывание_?](#Что-такое-статическое-и-динамическое-связывание)\n\n## Что такое _ООП_?\n__Объектно-ориентированное программирование (ООП)__ — методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. \n\n+ объектно-ориентированное программирование использует в качестве основных логических конструктивных элементов объекты, а не алгоритмы;\n+ каждый объект является экземпляром определенного класса \n+ классы образуют иерархии. \n\nПрограмма считается объектно-ориентированной, только если выполнены все три указанных требования. В частности, программирование, не использующее наследование, называется не объектно-ориентированным, а программированием с помощью абстрактных типов данных.\n\nСогласно парадигме ООП программа состоит из объектов, обменивающихся сообщениями. Объекты могут обладать состоянием, единственный способ изменить состояние объекта - послать ему сообщение, в ответ на которое, объект может изменить собственное состояние. \n\n[к оглавлению](#ООП)\n\n## Назовите основные принципы _ООП_.\n+ _Инкапсуляция_ - сокрытие реализации.\n+ _Наследование_ - создание новой сущности на базе уже существующей.\n+ _Полиморфизм_ - возможность иметь разные формы для одной и той же сущности.\n+ _Абстракция_ - набор общих характеристик.\n+ _Посылка сообщений_ - форма связи, взаимодействия между сущностями.\n+ _Переиспользование_- все что перечислено выше работает на повторное использование кода.\n\nЭто единственно верный порядок парадигм ООП, так как каждая последующая использует предыдущие.\n\n[к оглавлению](#ООП)\n\n## Что такое _«инкапсуляция»_?\n__Инкапсуляция__ – это свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе и скрыть детали реализации от пользователя, открыв только то, что необходимо при последующем использовании.\n\nЦель инкапсуляции — уйти от зависимости внешнего интерфейса класса (то, что могут использовать другие классы) от реализации. Чтобы малейшее изменение в классе не влекло за собой изменение внешнего поведения класса.\n\n>Представим на минутку, что мы оказались в конце позапрошлого века, когда Генри Форд ещё не придумал конвейер, а первые попытки создать автомобиль сталкивались с критикой властей по поводу того, что эти коптящие монстры загрязняют воздух и пугают лошадей. Представим, что для управления первым паровым автомобилем необходимо было знать, как устроен паровой котёл, постоянно подбрасывать уголь, следить за температурой, уровнем воды. При этом для поворота колёс использовать два рычага, каждый из которых поворачивает одно колесо в отдельности. Думаю, можно согласиться с тем, что вождение автомобиля того времени было весьма неудобным и трудным занятием.\n\n>Теперь вернёмся в сегодняшний день к современным чудесам автопрома с коробкой-автоматом. На самом деле, по сути, ничего не изменилось. Бензонасос всё так же поставляет бензин в двигатель, дифференциалы обеспечивают поворот колёс на различающиеся углы, коленвал превращает поступательное движение поршня во вращательное движение колёс. Прогресс в другом. Сейчас все эти действия скрыты от пользователя и позволяют ему крутить руль и нажимать на педаль газа, не задумываясь, что в это время происходит с инжектором, дроссельной заслонкой и распредвалом. Именно сокрытие внутренних процессов, происходящих в автомобиле, позволяет эффективно его использовать даже тем, кто не является профессионалом-автомехаником с двадцатилетним стажем. Это сокрытие в ООП носит название инкапсуляции.\n\nПример:\n```java\npublic class AbstractPhone {\n\n    private int year;\n    private String company;\n    public AbstractPhone (int year, String company) {\n        this.year = year;\n        this.company = company;\n    }\n    private void openConnection(){\n        //findComutator\n        //openNewConnection...\n    }\n    public void call() {\n        openConnection();\n        System.out.println(\"Вызываю номер\");\n    }\n\n    public void ring() {\n        System.out.println(\"Дзынь-дзынь\");\n    }\n\n}\n```\nМодификатор private делает доступными поля и методы класса только внутри данного класса. Это означает, что получить доступ к private полям из вне невозможно, как и нет возможности вызвать private методы.\n\nСокрытие доступа к методу openConnection, оставляет нам также возможность к свободному изменению внутренней реализации этого метода, так как этот метод гарантированно не используется другими объектами и не нарушит их работу.\n\nДля работы с нашим объектом мы оставляем открытыми методы call и ring с помощью модификатора public. Предоставление открытых методов для работы с объектом также является частью механизма инкапсуляции, так как если полностью закрыть доступ к объекту – он станет бесполезным.\n\n[к оглавлению](#ООП)\n\n## Что такое _«наследование»_?\n__Наследование__ – это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью.\n\nКласс, от которого производится наследование, называется _предком_, _базовым_ или _родительским_. Новый класс – _потомком_, _наследником_ или _производным_ классом.\n\n>Представим себя, на минуту, инженерами автомобильного завода. Нашей задачей является разработка современного автомобиля. У нас уже есть предыдущая модель, которая отлично зарекомендовала себя в течение многолетнего использования. Всё бы хорошо, но времена и технологии меняются, а наш современный завод должен стремиться повышать удобство и комфорт выпускаемой продукции и соответствовать современным стандартам.\n\n>Нам необходимо выпустить целый модельный ряд автомобилей: седан, универсал и малолитражный хэтч-бэк. Очевидно, что мы не собираемся проектировать новый автомобиль с нуля, а, взяв за основу предыдущее поколение, внесём ряд конструктивных изменений. Например, добавим гидроусилитель руля и уменьшим зазоры между крыльями и крышкой капота, поставим противотуманные фонари. Кроме того, в каждой модели будет изменена форма кузова.\n\n>Очевидно, что все три модификации будут иметь большинство свойств прежней модели (старый добрый двигатель 1970 года, непробиваемая ходовая часть, зарекомендовавшая себя отличным образом на отечественных дорогах, коробку передач и т.д.). При этом каждая из моделей будет реализовать некоторую новую функциональность или конструктивную особенность. В данном случае, мы имеем дело с наследованием.\n\nПример:\nРассмотрим пример создания класса смартфон с помощью наследования. Все беспроводные телефоны работают от аккумуляторных батарей, которые имеют определенный ресурс работы в часах. Поэтому добавим это свойство в класс беспроводных телефонов:\n```java\npublic abstract class WirelessPhone extends AbstractPhone {\n\n    private int hour;\n\n    public WirelessPhone(int year, int hour) {\n        super(year);\n        this.hour = hour;\n    }\n}\n```\nСотовые телефоны наследуют свойства беспроводного телефона, мы также добавили в этот класс реализацию методов call и ring:\n```java\npublic class CellPhone extends WirelessPhone {\n    public CellPhone(int year, int hour) {\n        super(year, hour);\n    }\n\n    @Override\n    public void call(int outputNumber) {\n        System.out.println(\"Вызываю номер \" + outputNumber);\n    }\n\n    @Override\n    public void ring(int inputNumber) {\n        System.out.println(\"Вам звонит абонент \" + inputNumber);\n    }\n}\n```\nИ, наконец, класс смартфон, который в отличие от классических сотовых телефонов имеет полноценную операционную систему. В смартфон можно добавлять новые программы, поддерживаемые данной операционной системой, расширяя, таким образом, его функциональность. С помощью кода класс можно описать так:\n```java\npublic class Smartphone extends CellPhone {\n\n    private String operationSystem;\n\n    public Smartphone(int year, int hour, String operationSystem) {\n        super(year, hour);\n        this.operationSystem = operationSystem;\n    }\n    \n    public void install(String program){\n        System.out.println(\"Устанавливаю \" + program + \"для\" + operationSystem);\n    }\n\n}\n```\nКак видите, для описания класса Smartphone мы создали совсем немного нового кода, но получили новый класс с новой функциональностью. Использование этого принципа ООП java позволяет значительно уменьшить объем кода, а значит, и облегчить работу программисту.\n\n[к оглавлению](#ООП)\n\n## Что такое _«полиморфизм»_?\n__Полиморфизм__ – это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.\n\nПреимуществом полиморфизма является то, что он помогает снижать сложность программ, разрешая использование одного и того же интерфейса для задания единого набора действий. Выбор же конкретного действия, в зависимости от ситуации, возлагается на компилятор языка программирования. Отсюда следует ключевая особенность полиморфизма - использование объекта производного класса, вместо объекта базового (потомки могут изменять родительское поведение, даже если обращение к ним будет производиться по ссылке родительского типа).\n\n>Любое обучение вождению не имело бы смысла, если бы человек, научившийся водить, скажем, ВАЗ 2106 не мог потом водить ВАЗ 2110 или BMW X3. С другой стороны, трудно представить человека, который смог бы нормально управлять автомобилем, в котором педаль газа находится левее педали тормоза, а вместо руля – джойстик. \n\n>Всё дело в том, что основные элементы управления автомобиля имеют одну и ту же конструкцию, и принцип действия. Водитель точно знает, что для того, чтобы повернуть налево, он должен повернуть руль, независимо от того, есть там гидроусилитель или нет. \nЕсли человеку надо доехать с работы до дома, то он сядет за руль автомобиля и будет выполнять одни и те же действия, независимо от того, какой именно тип автомобиля он использует. По сути, можно сказать, что все автомобили имеют один и тот же интерфейс, а водитель, абстрагируясь от сущности автомобиля, работает именно с этим интерфейсом. Если водителю предстоит ехать по немецкому автобану, он, вероятно выберет быстрый автомобиль с низкой посадкой, а если предстоит возвращаться из отдалённого маральника в Горном Алтае после дождя, скорее всего, будет выбран УАЗ с армейскими мостами. Но, независимо от того, каким образом будет реализовываться движение и внутреннее функционирование машины, интерфейс останется прежним.\n\n_Полиморфная переменная_, это переменная, которая может принимать значения разных типов, а _полиморфная функция_, это функция, у которой хотя бы один аргумент является полиморфной переменной.\nВыделяют два вида полиморфных функций:\n\n+ _ad hoc_, функция ведет себя по разному для разных типов аргументов (например, функция `draw()` — рисует по разному фигуры разных типов);\n+ _параметрический_, функция ведет себя одинаково для аргументов разных типов (например, функция `add()` — одинаково кладет в контейнер элементы разных типов).\n\nПринцип в ООП, когда программа может использовать объекты с одинаковым интерфейсом без информации о внутреннем устройстве объекта, называется полиморфизмом. \n\nПример:\n\nДавайте представим, что нам в программе нужно описать пользователя, который может пользоваться любыми моделями телефона, чтобы позвонить другому пользователю. Вот как можно это сделать:\n\n```java\npublic class User {\n    private String name;\n\n    public User(String name) {\n        this.name = name;\n    }\n\n    public void callAnotherUser(int number, AbstractPhone phone) {\n// вот он полиморфизм - использование в коде абстактного типа AbstractPhone phone!\n        phone.call(number);\n    }\n}\n```\n\nТеперь опишем различные модели телефонов. Одна из первых моделей телефонов:\n```java\npublic class ThomasEdisonPhone extends AbstractPhone {\n\n    public ThomasEdisonPhone(int year) {\n        super(year);\n    }\n\n    @Override\n    public void call(int outputNumber) {\n        System.out.println(\"Вращайте ручку\");\n        System.out.println(\"Сообщите номер абонента, сэр\");\n    }\n\n    @Override\n    public void ring(int inputNumber) {\n        System.out.println(\"Телефон звонит\");\n    }\n}\n```\n\nОбычный стационарный телефон:\n\n```java\npublic class Phone extends AbstractPhone {\n\n    public Phone(int year) {\n        super(year);\n    }\n\n    @Override\n    public void call(int outputNumber) {\n        System.out.println(\"Вызываю номер\" + outputNumber);\n    }\n\n    @Override\n    public void ring(int inputNumber) {\n        System.out.println(\"Телефон звонит\");\n    }\n}\n```\n\nИ, наконец, крутой видеотелефон:\n\n```java\npublic class VideoPhone extends AbstractPhone {\n\n    public VideoPhone(int year) {\n        super(year);\n    }\n\n    @Override\n    public void call(int outputNumber) {\n        System.out.println(\"Подключаю видеоканал для абонента \" + outputNumber);\n    }\n\n    @Override\n    public void ring(int inputNumber) {\n        System.out.println(\"У вас входящий видеовызов...\" + inputNumber);\n    }\n}\n```\n\nСоздадим объекты в методе main() и протестируем метод callAnotherUser:\n\n```java\nAbstractPhone firstPhone = new ThomasEdisonPhone(1879);\nAbstractPhone phone = new Phone(1984);\nAbstractPhone videoPhone=new VideoPhone(2018);\nUser user = new User(\"Андрей\");\nuser.callAnotherUser(224466,firstPhone);\n// Вращайте ручку\n//Сообщите номер абонента, сэр\nuser.callAnotherUser(224466,phone);\n//Вызываю номер 224466\nuser.callAnotherUser(224466,videoPhone);\n//Подключаю видеоканал для абонента 224466\n```\n\nИспользуя вызов одного и того же метода объекта user, мы получили различные результаты. Выбор конкретной реализации метода call внутри метода callAnotherUser производился динамически на основании конкретного типа вызывающего его объекта в процессе выполнения программы. В этом и заключается основное преимущество полиморфизма – выбор реализации в процессе выполнения программы.\n\nВ примерах классов телефонов, приведенных выше, мы использовали переопределение методов – прием, при котором изменяется реализация метода, определенная в базовом классе, без изменения сигнатуры метода. По сути, это является заменой метода, и именно новый метод, определенный в подклассе, вызывается при выполнении программы. \n\nОбычно, при переопределении метода, используется аннотация @Override, которая подсказывает компилятору о необходимости проверить сигнатуры переопределяемого и переопределяющего методов.\n\n[к оглавлению](#ООП)\n\n## Что такое _«абстракция»_?\n_Абстрагирование_ – это способ выделить набор общих характеристик объекта, исключая из рассмотрения частные и незначимые. Соответственно, __абстракция__ – это набор всех таких характеристик.\n\n>Представьте, что водитель едет в автомобиле по оживлённому участку движения. Понятно, что в этот момент он не будет задумываться о химическом составе краски автомобиля, особенностях взаимодействия шестерёнок в коробке передач или влияния формы кузова на скорость (разве что, автомобиль стоит в глухой пробке и водителю абсолютно нечем заняться). Однако, руль, педали, указатель поворота он будет использовать регулярно.\n\nПример:\n```java\n// Abstract class\nabstract class Animal {\n    // Abstract method (does not have a body)\n    public abstract void animalSound();\n\n    // Regular method\n    public void sleep() {\n        System.out.println(\"Zzz\");\n    }\n}\n\n// Subclass (inherit from Animal)\nclass Pig extends Animal {\n    public void animalSound() {\n        // The body of animalSound() is provided here\n        System.out.println(\"The pig says: wee wee\");\n    }\n}\n\nclass MyMainClass {\n    public static void main(String[] args) {\n        Pig myPig = new Pig(); // Create a Pig object\n        myPig.animalSound();\n        myPig.sleep();\n    }\n}\n```\n\n[к оглавлению](#ООП)\n\n## Что представляет собой _«обмен сообщениями»_?\nОбъекты взаимодействуют, посылая и получая сообщения. Сообщение — это запрос на выполнение действия, дополненный набором аргументов, которые могут понадобиться при выполнении действия. В ООП посылка сообщения (вызов метода) — это единственный путь передать управление объекту. Если объект должен «отвечать» на это сообщение, то у него должна иметься соответствующий данному сообщению метод. Так же объекты, используя свои методы, могут и сами посылать сообщения другим объектам. Обмен сообщениями реализуется с помощью динамических вызовов, что приводит к чрезвычайно позднему связыванию (extreme late binding).\n\n>Пусть требуется создать физическую модель, описывающую сталкивающиеся шары разных размеров. Традиционный подход к решению этой задачи примерно таков: определяется набор данных, описывающих каждый шар (например, его координаты, массу и ускорение); каждому шару присваивается уникальный идентификатор (например, организуется массив, значение индекса которого соответствует номеру шара), который позволит отличать каждый из шаров от всех других. Наконец, пишется подпрограмма с названием, скажем, `bounce`; эта процедура должна на основе номера шара и его начальных параметров соответствующим образом изменять данные, описывающие шар. В отличие от традиционного подхода объектно-ориентированная версия программы моделирует каждый из шаров посредством объекта. При этом объект, соответствующий конкретному шару, содержит не только его параметры, но и весь код, описывающий поведение шара при различных взаимодействиях. Так, каждый шар будет иметь собственный метод `bounce()`. Вместо того, чтобы вызывать подпрограмму `bounce` с аргументом, определяющим, скажем, шар №3, необходимо будет передать объекту «шар №3» сообщение, предписывающее ему выполнить столкновение.\n\n[к оглавлению](#ООП)\n\n## Расскажите про основные понятия ООП: _«класс»_, _«объект»_, _«интерфейс»_.\n__Класс__ – это способ описания сущности, определяющий состояние и поведение, зависящее от этого состояния, а также правила для взаимодействия с данной сущностью (контракт). \n\nС точки зрения программирования класс можно рассматривать как набор данных (полей, атрибутов, членов класса) и функций для работы с ними (методов).\n\nС точки зрения структуры программы, класс является сложным типом данных.\n\n__Объект (экземпляр)__ – это отдельный представитель класса, имеющий конкретное состояние и поведение, полностью определяемое классом. Каждый объект имеет конкретные значения атрибутов и методы, работающие с этими значениями на основе правил, заданных в классе.\n\n__Интерфейс__ – это набор методов класса, доступных для использования. Интерфейсом класса будет являться набор всех его публичных методов в совокупности с набором публичных атрибутов. По сути, интерфейс специфицирует класс, чётко определяя все возможные действия над ним. \n\n[к оглавлению](#ООП)\n\n## В чем заключаются преимущества и недостатки объектно-ориентированного подхода в программировании?\nПреимущества:\n\n+ Объектная модель вполне естественна, поскольку в первую очередь ориентирована на человеческое восприятие мира, а не на компьютерную реализацию.\n+ Классы позволяют проводить конструирование из полезных компонентов, обладающих простыми инструментами, что позволяет абстрагироваться от деталей реализации.\n+ Данные и операции над ними образуют определенную сущность, и они не разносятся по всей программе, как нередко бывает в случае процедурного программирования, а описываются вместе. Локализация кода и данных улучшает наглядность и удобство сопровождения программного обеспечения.\n+ Инкапсуляция позволяет привнести свойство модульности, что облегчает распараллеливание выполнения задачи между несколькими исполнителями и обновление версий отдельных компонентов.\n+ Возможность создавать расширяемые системы.\n+ Использование полиморфизма оказывается полезным при:\n    + Обработке разнородных структур данных. Программы могут работать, не различая вида объектов, что существенно упрощает код. Новые виды могут быть добавлены в любой момент.\n    + Изменении поведения во время исполнения. На этапе исполнения один объект может быть заменен другим, что позволяет легко, без изменения кода, адаптировать алгоритм в зависимости от того, какой используется объект.\n    + Реализации работы с наследниками. Алгоритмы можно обобщить настолько, что они уже смогут работать более чем с одним видом объектов.\n    + Возможности описать независимые от приложения части предметной области в виде набора универсальных классов, или фреймворка, который в дальнейшем будет расширен за счет добавления частей, специфичных для конкретного приложения.\n+ Повторное использование кода:\n    + Сокращается время на разработку, которое может быть отдано другим задачам.\n    + Компоненты многоразового использования обычно содержат гораздо меньше ошибок, чем вновь разработанные, ведь они уже не раз подвергались проверке.\n    + Когда некий компонент используется сразу несколькими клиентами, улучшения, вносимые в его код, одновременно оказывают положительное влияние и на множество работающих с ним программ.\n    + Если программа опирается на стандартные компоненты, ее структура и пользовательский интерфейс становятся более унифицированными, что облегчает ее понимание и упрощает использование.\n\nНедостатки:\n\n+ В сложных иерархиях классов поля и методы обычно наследуются с разных уровней. И не всегда легко определить, какие поля и методы фактически относятся к данному классу.\n+ Код для обработки сообщения иногда «размазан» по многим методам (иначе говоря, обработка сообщения требует не одного, а многих методов, которые могут быть описаны в разных классах).\n+ Документирование классов - задача более трудная, чем это было в случае процедур и модулей. Поскольку любой метод может быть переопределен, в документации должно говориться не только о том, что делает данный метод, но и о том, в каком контексте он вызывается.\n+ Неэффективность и неэкономное распределения памяти на этапе выполнения (по причине издержек на динамическое связывание и проверки типов на этапе выполнения).\n+ Излишняя универсальность. Часто содержится больше методов, чем это реально необходимо текущей программе. А поскольку лишние методы не могут быть удалены, они становятся мертвым грузом.\n\n[к оглавлению](#ООП)\n\n## Что подразумевают в плане принципов ООП выражения _«является»_ и _«имеет»_?\n__«является»__ подразумевает наследование.\n__«имеет»__ подразумевает ассоциацию (агрегацию или композицию).\n\n[к оглавлению](#ООП)\n\n## В чем разница между _композицией_ и _агрегацией_?\nАссоциация обозначает связь между объектами. Композиция и агрегация — частные случаи ассоциации «часть-целое».\n\nАгрегация предполагает, что объекты связаны взаимоотношением «part-of» (часть). Композиция более строгий вариант агрегации. Дополнительно к требованию «part-of» накладывается условие, что экземпляр «части» может входить только в одно целое (или никуда не входить), в то время как в случае агрегации экземпляр «части» может входить в несколько целых.\n\n>Например, книга состоит из страниц, и мы не можем вырвать страницу из книги и вложить в другую книгу. Страницы четко привязаны к конкретной книге, поэтому это композиция.\nВ тоже время мы можем взять и перенести книгу из одной библиотеки в другую - это уже агрегация.\n\n[к оглавлению](#ООП)\n\n## Что такое _статическое_ и _динамическое связывание_?\nПрисоединение вызова метода к телу метода называется связыванием. Если связывание проводится компилятором (компоновщиком) перед запуском программы, то оно называется _статическим_ или _ранним связыванием (early binding)_.\n\nВ свою очередь, _позднее связывание (late binding)_ это связывание, проводимое непосредственно во время выполнения программы, в зависимости от типа объекта. Позднее связывание также называют _динамическим (dynamic)_ или _связыванием на стадии выполнения (runtime binding)_. В языках, реализующих позднее связывание, должен существовать механизм определения фактического типа объекта во время работы программы, для вызова подходящего метода. Иначе говоря, компилятор не знает тип объекта, но механизм вызова методов определяет его и вызывает соответствующее тело метода. Механизм позднего связывания зависит от конкретного языка, но нетрудно предположить, что для его реализации в объекты должна включаться какая-то дополнительная информация.\n\nДля всех методов Java используется механизм позднего (динамического) связывания, если только метод не был объявлен как `final`, `static` или `private` (приватные методы являются `final` по умолчанию).\n\n[к оглавлению](#ООП)\n\n# Источники\n+ [DevColibri](https://devcolibri.com/%d1%87%d1%82%d0%be-%d1%82%d0%b0%d0%ba%d0%be%d0%b5-%d0%be%d0%be%d0%bf-%d0%b8-%d1%81-%d1%87%d0%b5%d0%bc-%d0%b5%d0%b3%d0%be-%d0%b5%d0%b4%d1%8f%d1%82/)\n+ [Хабрахабр](https://habrahabr.ru/post/87119/)\n+ [Википедия](https://ru.wikipedia.org/wiki/Объектно-ориентированное_программирование)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "patterns.md",
          "type": "blob",
          "size": 21.650390625,
          "content": "[Вопросы для собеседования](README.md)\n\n# Шаблоны проектирования\n+ [Что такое _«шаблон проектирования»_?](#Что-такое-шаблон-проектирования)\n+ [Назовите основные характеристики шаблонов.](#Назовите-основные-характеристики-шаблонов)\n+ [Типы шаблонов проектирования.](#Типы-шаблонов-проектирования)\n+ [Приведите примеры основных шаблонов проектирования.](#Приведите-примеры-основных-шаблонов-проектирования)\n+ [Приведите примеры порождающих шаблонов проектирования.](#Приведите-примеры-порождающих-шаблонов-проектирования)\n+ [Приведите примеры структурных шаблонов проектирования.](#Приведите-примеры-структурных-шаблонов-проектирования)\n+ [Приведите примеры поведенческих шаблонов проектирования.](#Приведите-примеры-поведенческих-шаблонов-проектирования)\n+ [Что такое _«антипаттерн»_? Какие антипаттерны вы знаете?](#Что-такое-антипаттерн-Какие-антипаттерны-вы-знаете)\n+ [Что такое _Dependency Injection_?](#Что-такое-dependency-injection)\n\n## Что такое _«шаблон проектирования»_?\n__Шаблон (паттерн) проектирования (design pattern)__ — это проверенное и готовое к использованию решение. Это не класс и не библиотека, которую можно подключить к проекту, это нечто большее - он не зависит от языка программирования, не является законченным образцом, который может быть прямо преобразован в код и может быть реализован по-разному в разных языках программирования.\n\nПлюсы использования шаблонов:\n+ снижение сложности разработки за счёт готовых абстракций для решения целого класса проблем.\n+ облегчение коммуникации между разработчиками, позволяя ссылаться на известные шаблоны.\n+ унификация деталей решений: модулей и элементов проекта.\n+ возможность отыскав удачное решение, пользоваться им снова и снова.\n+ помощь в выборе выбрать наиболее подходящего варианта проектирования.\n\nМинусы:\n+ слепое следование некоторому выбранному шаблону может привести к усложнению программы.\n+ желание попробовать некоторый шаблон в деле без особых на то оснований.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Назовите основные характеристики шаблонов.\n+ __Имя__ - все шаблоны имеют уникальное имя, служащее для их идентификации;\n+ __Назначение__\tназначение данного шаблона;\n+ __Задача__ - задача, которую шаблон позволяет решить;\n+ __Способ решения__ - способ, предлагаемый в шаблоне для решения задачи в том контексте, где этот шаблон был найден;\n+ __Участники__\t- сущности, принимающие участие в решении задачи;\n+ __Следствия__\t- последствия от использования шаблона как результат действий, выполняемых в шаблоне;\n+ __Реализация__ - возможный вариант реализации шаблона.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Типы шаблонов проектирования.\n+ Основные (Fundamental) - основные строительные блоки других шаблонов. Большинство других шаблонов использует эти шаблоны в той или иной форме.\n+ Порождающие шаблоны (Creational) — шаблоны проектирования, которые абстрагируют процесс создание экземпляра. Они позволяют сделать систему независимой от способа создания, композиции и представления объектов. Шаблон, порождающий классы, использует наследование, чтобы изменять созданный объект, а шаблон, порождающий объекты, делегирует создание объектов другому объекту.\n+ Структурные шаблоны (Structural) определяют различные сложные структуры, которые изменяют интерфейс уже существующих объектов или его реализацию, позволяя облегчить разработку и оптимизировать программу.\n+ Поведенческие шаблоны (Behavioral) определяют взаимодействие между объектами, увеличивая таким образом его гибкость.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Приведите примеры основных шаблонов проектирования.\n+ __Делегирование (Delegation pattern)__ - Сущность внешне выражает некоторое поведение, но в реальности передаёт ответственность за выполнение этого поведения связанному объекту.\n+ __Функциональный дизайн (Functional design)__ - Гарантирует, что каждая сущность имеет только одну обязанность и исполняет её с минимумом побочных эффектов на другие.\n+ __Неизменяемый интерфейс (Immutable interface)__ - Создание неизменяемого объекта.\n+ __Интерфейс (Interface)__ - Общий метод структурирования сущностей, облегчающий их понимание. \n+ __Интерфейс-маркер (Marker interface)__ - В качестве атрибута (как пометки объектной сущности) применяется наличие или отсутствие реализации интерфейса-маркера. В современных языках программирования вместо этого применяются атрибуты или аннотации.\n+ __Контейнер свойств (Property container)__ - Позволяет добавлять дополнительные свойства сущности в контейнер внутри себя, вместо расширения новыми свойствами.\n+ __Канал событий (Event channel)__ - Создаёт централизованный канал для событий. Использует сущность-представитель для подписки и сущность-представитель для публикации события в канале. Представитель существует отдельно от реального издателя или подписчика. Подписчик может получать опубликованные события от более чем одной сущности, даже если он зарегистрирован только на одном канале.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Приведите примеры порождающих шаблонов проектирования.\n+ __Абстрактная фабрика (Abstract factory)__ - Класс, который представляет собой интерфейс для создания других классов.\n+ __Строитель (Builder)__ - Класс, который представляет собой интерфейс для создания сложного объекта.\n+ __Фабричный метод (Factory method)__ - Делегирует создание объектов наследникам родительского класса. Это позволяет использовать в коде программы не специфические классы, а манипулировать абстрактными объектами на более высоком уровне.\n+ __Прототип (Prototype)__ - Определяет интерфейс создания объекта через клонирование другого объекта вместо создания через конструктор.\n+ __Одиночка (Singleton)__ - Класс, который может иметь только один экземпляр.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Приведите примеры структурных шаблонов проектирования.\n+ __Адаптер (Adapter)__ - Объект, обеспечивающий взаимодействие двух других объектов, один из которых использует, а другой предоставляет несовместимый с первым интерфейс. \n+ __Мост (Bridge)__ - Структура, позволяющая изменять интерфейс обращения и интерфейс реализации класса независимо. \n+ __Компоновщик (Composite)__ - Объект, который объединяет в себе объекты, подобные ему самому. \n+ __Декоратор (Decorator)__ - Класс, расширяющий функциональность другого класса без использования наследования. \n+ __Фасад (Facade)__ - Объект, который абстрагирует работу с несколькими классами, объединяя их в единое целое. \n+ __Приспособленец (Flyweight)__ - Это объект, представляющий себя как уникальный экземпляр в разных местах программы, но по факту не являющийся таковым. \n+ __Заместитель (Proxy)__ - Объект, который является посредником между двумя другими объектами, и который реализует/ограничивает доступ к объекту, к которому обращаются через него.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Приведите примеры поведенческих шаблонов проектирования.\n+ __Цепочка обязанностей (Chain of responsibility)__ - Предназначен для организации в системе уровней ответственности.\n+ __Команда (Command)__ - Представляет действие. Объект команды заключает в себе само действие и его параметры.\n+ __Интерпретатор (Interpreter)__ - Решает часто встречающуюся, но подверженную изменениям, задачу.\n+ __Итератор (Iterator)__ - Представляет собой объект, позволяющий получить последовательный доступ к элементам объекта-агрегата без использования описаний каждого + __из объектов, входящих в состав агрегации.\n+ __Посредник (Mediator)__ - Обеспечивает взаимодействие множества объектов, формируя при этом слабую связанность и избавляя объекты от необходимости явно ссылаться друг на друга.\n+ __Хранитель (Memento)__ - Позволяет, не нарушая инкапсуляцию зафиксировать и сохранить внутренние состояния объекта так, чтобы позднее восстановить его в этих состояниях.\n+ __Наблюдатель (Observer)__ - Определяет зависимость типа «один ко многим» между объектами таким образом, что при изменении состояния одного объекта все зависящие от него оповещаются об этом событии.\n+ __Состояние (State)__ - Используется в тех случаях, когда во время выполнения программы объект должен менять своё поведение в зависимости от своего состояния.\n+ __Стратегия (Strategy)__ - Предназначен для определения семейства алгоритмов, инкапсуляции каждого из них и обеспечения их взаимозаменяемости.\n+ __Шаблонный метод (Template method)__ - Определяет основу алгоритма и позволяет наследникам переопределять некоторые шаги алгоритма, не изменяя его структуру в целом.\n+ __Посетитель (Visitor)__ - Описывает операцию, которая выполняется над объектами других классов. При изменении класса Visitor нет необходимости изменять обслуживаемые классы.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Что такое _«антипаттерн»_? Какие антипаттерны вы знаете?\n__Антипаттерн (anti-pattern)__ — это распространённый подход к решению класса часто встречающихся проблем, являющийся неэффективным, рискованным или непродуктивным.\n\n__Poltergeists (полтергейсты)__ - это классы с ограниченной ответственностью и ролью в системе, чьё единственное предназначение — передавать информацию в другие классы. Их эффективный жизненный цикл непродолжителен. Полтергейсты нарушают стройность архитектуры программного обеспечения, создавая избыточные (лишние) абстракции, они чрезмерно запутанны, сложны для понимания и трудны в сопровождении. Обычно такие классы задумываются как классы-контроллеры, которые существуют только для вызова методов других классов, зачастую в предопределенной последовательности.\n\nПризнаки появления и последствия антипаттерна\n+ Избыточные межклассовые связи.\n+ Временные ассоциации.\n+ Классы без состояния (содержащие только методы и константы).\n+ Временные объекты и классы (с непродолжительным временем жизни).\n+ Классы с единственным методом, который предназначен только для создания или вызова других классов посредством временной ассоциации.\n+ Классы с именами методов в стиле «управления», такие как startProcess.\n\nТипичные причины\n+ Отсутствие объектно-ориентированной архитектуры (архитектор не понимает объектно-ориентированной парадигмы).\n+ Неправильный выбор пути решения задачи.\n+ Предположения об архитектуре приложения на этапе анализа требований (до объектно-ориентированного анализа) могут также вести к проблемам на подобии этого антипаттерна.\n\n__Внесенная сложность (Introduced complexity)__: Необязательная сложность дизайна. Вместо одного простого класса выстраивается целая иерархия интерфейсов и классов. Типичный пример «Интерфейс - Абстрактный класс - Единственный класс реализующий интерфейс на основе абстрактного».\n\n__Инверсия абстракции (Abstraction inversion)__: Сокрытие части функциональности от внешнего использования, в надежде на то, что никто не будет его использовать.\n\n__Неопределённая точка зрения (Ambiguous viewpoint)__: Представление модели без спецификации её точки рассмотрения.\n\n__Большой комок грязи (Big ball of mud)__: Система с нераспознаваемой структурой.\n\n__Божественный объект (God object)__: Концентрация слишком большого количества функций в одной части системы (классе).\n\n__Затычка на ввод данных (Input kludge)__: Забывчивость в спецификации и выполнении поддержки возможного неверного ввода.\n\n__Раздувание интерфейса (Interface bloat)__: Разработка интерфейса очень мощным и очень сложным для реализации.\n\n__Волшебная кнопка (Magic pushbutton)__: Выполнение результатов действий пользователя в виде неподходящего (недостаточно абстрактного) интерфейса. Например, написание прикладной логики в обработчиках нажатий на кнопку.\n\n__Перестыковка (Re-Coupling)__: Процесс внедрения ненужной зависимости.\n\n__Дымоход (Stovepipe System)__: Редко поддерживаемая сборка плохо связанных компонентов.\n\n__Состояние гонки (Race hazard)__: непредвидение возможности наступления событий в порядке, отличном от ожидаемого.\n\n__Членовредительство (Mutilation)__: Излишнее «затачивание» объекта под определенную очень узкую задачу таким образом, что он не способен будет работать с никакими иными, пусть и очень схожими задачами.\n\n__Сохранение или смерть (Save or die)__: Сохранение изменений лишь при завершении приложения.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n## Что такое _Dependency Injection_?\n__Dependency Injection (внедрение зависимости)__ - это набор паттернов и принципов разработки програмного обеспечения, которые позволяют писать слабосвязный код. В полном соответствии с принципом единой обязанности объект отдаёт заботу о построении требуемых ему зависимостей внешнему, специально предназначенному для этого общему механизму.\n\n[к оглавлению](#Шаблоны-проектирования)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/Шаблон_проектирования)\n+ [Javenue](http://www.javenue.info/post/56)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "reactive.md",
          "type": "blob",
          "size": 42.9951171875,
          "content": "[Вопросы для собеседования](README.md)\n\n# Реактивное программирование\n* [Что такое реактивное программирование и чем оно отличается от процедурного программирования?](#что-такое-реактивное-программирование-и-чем-оно-отличается-от-процедурного-программирования)\n* [Объясните концепцию потоков данных в реактивном программировании](#объясните-концепцию-потоков-данных-в-реактивном-программировании)\n* [Что такое паттерн Observer и как он лежит в основе реактивного программирования?](#что-такое-паттерн-observer-и-как-он-лежит-в-основе-реактивного-программирования)\n* [Опишите роль Observable и Observer в реактивном программировании](#опишите-роль-observable-и-observer-в-реактивном-программировании)\n* [Что такое backpressure в контексте реактивного программирования?](#что-такое-backpressure-в-контексте-реактивного-программирования)\n* [Объясните разницу между Hot и Cold Observable](#объясните-разницу-между-hot-и-cold-observable)\n* [Какова роль Подписки в реактивном программировании?](#какова-роль-подписки-в-реактивном-программировании)\n* [Как отписаться от потока для предотвращения утечки памяти?](#как-отписаться-от-потока-для-предотвращения-утечки-памяти)\n* [Какие есть операторы в Project Reactor и для чего они используются?](#какие-есть-операторы-в-project-reactor-и-для-чего-они-используются)\n\n## Что такое реактивное программирование и чем оно отличается от процедурного программирования?\n\n### Основные принципы\n\n**Процедурное программирование** - это подход, при котором программа состоит из последовательности инструкций, выполняемых одна за другой.\nВ процедурном программировании акцент делается на определении функций и процедур, которые выполняют определенные задачи.\nЭтот подход хорошо подходит для решения задач, требующих четкого алгоритма действий.\n\n**Реактивное программирование**, с другой стороны, фокусируется на обработке потоков данных и событий.\nВ реактивном программировании программа реагирует на изменения в данных или событиях, происходящих в реальном времени.\nРеактивное программирование позволяет создавать более гибкие и эффективные системы, способные адаптироваться к изменениям \nв данных и событиях без необходимости явного управления асинхронными задачами.\n\nПроцедурное программирование представляет данные в виде единственного значения, хранящегося в переменной.\nРеактивное программирование представляет собой непрерывный поток данных, на который могут подписаться несколько наблюдателей.\n\n[к оглавлению](#реактивное-программирование)\n\n## Объясните концепцию потоков данных в реактивном программировании\n\nКонцепция потоков данных в реактивном программировании заключается в представлении данных как непрерывно изменяющегося потока, \nкоторый автоматически распространяется через систему. Это отличается от традиционного императивного программирования, где данные \nобычно обрабатываются как отдельные элементы и изменения должны явно инициироваться кодом.\n\nВ реактивном программировании данные представлены как поток событий, каждое из которых может содержать новое значение или изменение состояния. \nСистема автоматически реагирует на эти изменения, обновляя свое состояние соответствующим образом. Это позволяет создавать \nприложения, которые эффективно обрабатывают большие объемы данных и быстро реагируют на изменения, происходящие в реальном времени.\n\nПримером может служить система управления данными, которая автоматически обновляет пользовательский интерфейс при изменении данных в базе. \nВ таком случае, пользовательский интерфейс будет автоматически обновляться каждый раз, когда происходит изменение данных, \nбез необходимости явного запроса на обновление со стороны пользователя.\n\nРеактивное программирование основано на шаблоне Наблюдатель (Observer)\n\n### Ключевые компоненты\n* **Наблюдаемый (Observable)** представляет источник данных. При изменении его состояния (или при создании новых данных) изменения передаются наблюдателям\n* **Наблюдатель (Observer)** подписывается на Observable и получает уведомления о любых изменениях состояния или новых данных\n* **Подписка (Subscription)** устанавливает взаимосвязь между наблюдаемым и наблюдателем. Подписка может быть \"один к одному\" или \"один ко многим\"\n* **Операторы (Operators)** часто называемые функциями преобразования, они позволяют изменять или адаптировать данные из наблюдаемого объекта до того, как они попадут к наблюдателю\n* **Планировщики (Schedulers)** помогают управлять временем и порядком выполнения операций в таких сценариях, как фоновая работа и обновления пользовательского интерфейса\n* **Subjects** совмещают роли объекта наблюдения и наблюдателя. Это могут быть как источники данных, так и потребители данных\n\n### Процесс передачи данных\n* **Эмиссия (Emission)** - данные создаются в наблюдаемом объекте и отправляются его наблюдателям\n* **Фильтрация (Filtering)** - операторы могут просматривать входящие данные, пересылая только те, которые соответствуют определенным критериям\n* **Трансформация (Transformation)** - данные изменяются — например, путем их мапинга перед передачей наблюдателю\n* **Нотификация (Notification)** - информирование наблюдателей при поступлении новых данных\n\n### Основные характеристики потоков\n* **Непрерывность (Continuous)** - поток данных сохраняется, что позволяет осуществлять взаимодействие в режиме реального времени\n* **Асинхронность (Asynchronous)** - не гарантируется, что события будут происходить в определенном порядке, что позволяет выполнять неблокирующие операции\n* **Однонаправленность (One-directional)** - данные передаются от Observable к его подписчикам, обеспечивая однонаправленный поток\n\n### Типы потоков по количеству подписчиков\n* **Unicast Streams** - у каждого наблюдателя есть эксклюзивное подключение к наблюдаемому источнику\n* **Broadcast Streams** - позволяет нескольким наблюдателям подписаться на один объект наблюдения. Каждый наблюдатель \nполучает полный набор данных, что может быть проблематично, если речь идет о конфиденциальности данных\n\n### Типы потоков по поведению\n* **Hot Observable** - эти последовательности передают данные независимо от присутствия наблюдателя. \nЕсли подписывается новый наблюдатель, он начинает получать данные с точки подписки\n* **Cold Observable** - здесь передача данных начинается только после подписки. Любой новый наблюдатель получит данные с самого начала\n\n### Backpressure\nДанный механизм регулируют скорость, с которой данные публикуются в поток. Это необходимо, чтобы справиться с потенциальным \nпереполнением или узкими местами из-за различий в скоростях обработки данных.\n\nНапример, в RxJava интерфейсы `Observable` и `Flowable` отличаются тем, что последний включает поддержку backpressure. \nС `Flowable` можно использовать настраиваемую стратегию backpressure, чтобы контролировать скорость публикации Observable относительно скорости потребления Subscriber\n\n### Практическое применение\nБудь то обработка асинхронных вызовов API или управление вводом данных пользователем, потоки данных обеспечивают надежную \nи гибкую основу для многих повседневных задач программирования.\n\nМожно использовать ряд операторов, таких как `map`, `filter`, `debounce`, и `throttle`, для преобразования данных \nи манипулирования ими, исходя из конкретных требований.\n\nШирокое внедрение реактивных библиотек, таких как RxJava для Android или RxJS для Web, подчеркивает \nполезность потоков данных в современной разработке программного обеспечения.\n\n[к оглавлению](#реактивное-программирование)\n\n## Что такое паттерн Observer и как он лежит в основе реактивного программирования?\n\nПаттерн Observer, также известный как Publish/Subscribe или Event Listener, является поведенческим шаблоном проектирования, \nкоторый позволяет объектам следить за изменениями в других объектах и реагировать на них. Это один из самых популярных и \nполезных шаблонов, который упрощает код и повышает его гибкость. В основе реактивного программирования лежит идея о том, \nчто система должна реагировать на изменения внешних источников данных или событий. Паттерн Observer идеально подходит для \nреализации этой концепции, поскольку он позволяет объектам автоматически получать уведомления об изменениях в других объектах \nи соответствующим образом обновлять свое состояние.\n\nПример использования паттерна Observer в веб-разработке может включать систему уведомлений для пользователей. Когда новая \nстатья добавляется на сайт, все подписчики должны быть уведомлены об этом. В этом случае, класс Subject будет отвечать \nза управление подписчиками и их уведомление об изменениях, а класс Observer будет представлять собой простого наблюдателя, \nкоторый выводит сообщение о новой статье при получении уведомления, таким образом обеспечивается **слабую связность (loose coupling)**.\n\nПрименение паттерна Observer в веб-разработке может быть полезно для обработки событий пользовательского интерфейса, \nреализации системы уведомлений для пользователей, отслеживания изменений состояния приложения и реагирования на них. \nОднако важно помнить, что чрезмерное использование паттерна может привести к усложнению кода и затруднить отладку.\n\n### Ключевые компоненты\n* **Subject** - источник данных или событий. Наблюдатели подписываются на Subject для получения уведомлений об изменениях\n* **Observer** - наблюдатель получает уведомления, когда состояние Subject изменяется\n\nВ реактивной конфигурации Subject отвечает за публикацию изменений, а Observers подписываются на эти изменения. \nЭто исключает явное обращение к источникам данных и подчеркивает **модель потока данных (datastream model)**.\n\n### Пример кода паттерна Observer\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\ninterface Observer {\n    void update();\n}\n\nclass Subject {\n    private List<Observer> observers = new ArrayList<>();\n    private int state;\n\n    public int getState() {\n        return state;\n    }\n\n    public void setState(int state) {\n        this.state = state;\n        notifyAllObservers();\n    }\n\n    public void attach(Observer observer) {\n        observers.add(observer);\n    }\n\n    public void notifyAllObservers() {\n        for (Observer observer : observers) {\n            observer.update();\n        }\n    }\n}\n\nclass ConcreteObserver implements Observer {\n    private String name;\n    private Subject subject;\n\n    public ConcreteObserver(String name, Subject subject) {\n        this.name = name;\n        this.subject = subject;\n    }\n\n    @Override\n    public void update() {\n        System.out.println(\"Observer \" * name * \" updated. New state: \" * subject.getState());\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        ConcreteObserver observer1 = new ConcreteObserver(\"One\", subject);\n        ConcreteObserver observer2 = new ConcreteObserver(\"Two\", subject);\n\n        subject.attach(observer1);\n        subject.attach(observer2);\n\n        subject.setState(5);\n    }\n}\n```\nВ данном примере Subject ведет список подписавшихся Observers и уведомляет их при изменении его состояния.\n\n[к оглавлению](#реактивное-программирование)\n\n## Опишите роль Observable и Observer в реактивном программировании\n\n**Наблюдатели** являются потребителями данных, в то время как **наблюдаемые** являются источником или производителем данных.\n\n### Ключевые концепции\n* **Наблюдаемый (Observable)** - передает данные или сигналы, которые могут быть любых типов, включая пользовательские события\n* **Наблюдатель (Observer)** - получает уведомление, когда Observable отправляет данные\n* **Подписка (Subscription)** - связующее звено между объектом наблюдения и наблюдателем\n* **Операторы (Operators)** - позволяют преобразовывать, фильтровать, комбинировать или обрабатывать поток данных, \nпубликуемый наблюдаемым объектом, до того, как он достигнет наблюдателя\n\n### Пример кода: Observable и Observer\n\n### Java 9*\n\n**Определить Subscriber**\n\n```java\nimport java.util.concurrent.Flow;\n\npublic class SimpleSubscriber implements Flow.Subscriber<String> {\n    private Flow.Subscription subscription;\n\n    @Override\n    public void onSubscribe(Flow.Subscription subscription) {\n        this.subscription = subscription;\n        subscription.request(1); // Запрашиваем первый элемент\n    }\n\n    @Override\n    public void onNext(String item) {\n        System.out.println(\"Received: \" * item);\n        subscription.request(1); // Запрашиваем следующий элемент\n    }\n\n    @Override\n    public void onError(Throwable throwable) {\n        System.err.println(\"Error: \" * throwable.getMessage());\n    }\n\n    @Override\n    public void onComplete() {\n        System.out.println(\"All items received\");\n    }\n}\n```\n\n**Определить Publisher**\n\n```java\nimport java.util.concurrent.Flow;\nimport java.util.concurrent.SubmissionPublisher;\nimport java.util.concurrent.TimeUnit;\n\npublic class SimplePublisher {\n\n    public static void main(String[] args) throws InterruptedException {\n        // Создаем издателя\n        SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n\n        // Создаем подписчика\n        SimpleSubscriber subscriber = new SimpleSubscriber();\n\n        // Регистрируем подписчика в издателе\n        publisher.subscribe(subscriber);\n\n        // Публикуем элементы\n        System.out.println(\"Publishing data items...\");\n        String[] items = {\"item1\", \"item2\", \"item3\"};\n        for (String item : items) {\n            publisher.submit(item);\n            TimeUnit.SECONDS.sleep(1);\n        }\n\n        // Закрываем издателя\n        publisher.close();\n\n        // Ждем некоторое время, чтобы подписчик обработал все элементы\n        TimeUnit.SECONDS.sleep(3);\n    }\n}\n```\n\n### Project Reactor\n\n```java\nimport reactor.core.publisher.Flux;\n\npublic class ReactorExample {\n\n    public static void main(String[] args) {\n        // Создаем Flux для публикации данных\n        Flux<String> flux = Flux.just(\"Hello\", \"World\", \"From\", \"Reactor\");\n\n        // Подписываемся на Flux и выводим каждый элемент\n        flux.subscribe(\n            item -> System.out.println(\"Received: \" * item),\n            error -> System.err.println(\"Error: \" * error),\n            () -> System.out.println(\"All items received\")\n        );\n    }\n}\n```\n\n[к оглавлению](#реактивное-программирование)\n\n## Что такое backpressure в контексте реактивного программирования?\n\n**Backpressure** - это концепция в реактивном программировании, которая имеет дело с ситуацией, когда производитель (или издатель) \nгенерирует данные быстрее, чем потребитель (или подписчик) может их обработать. Управление backpressure позволяет системе \nоставаться отзывчивой и не перегружаться.\n\n### Ключевые концепции backpressure\n\n* **Producer (Publisher)** - компонент, который производит данные\n* **Consumer (Subscriber)** - компонент, который потребляет данные\n* **Flow Control** - механизм, который гарантирует, что производитель не перегрузит потребителя слишком большим объемом данных\n\n### Почему важно backpressure?\n\nВ реактивной системе, если потребитель не выдерживает скорость, с которой производитель производит данные, это может привести к следующим проблемам:\n* **Переполнение памяти (Memory Overflow)** - необработанные элементы могут накапливаться в памяти, что приводит к ошибкам нехватки памяти\n* **Увеличение задержки (Latency Increase)** - система может перестать отвечать по мере роста очереди необработанных элементов\n* **Исчерпание ресурсов (Resource Exhaustion)** - системные ресурсы (процессор, память) могут быть исчерпаны, что приводит к снижению производительности или сбоям\n\n### Стратегии управления backpressure в Project Reactor\n\n* **Буферизация (Buffering)** - входящие элементы хранятся в буфере до тех пор, пока потребитель не сможет их обработать\n  * **onBackpressureBuffer(100)**\n\n```java\nimport reactor.core.publisher.Flux;\nimport reactor.core.scheduler.Schedulers;\n\npublic class BackpressureExample {\n\n    public static void main(String[] args) {\n        Flux<Integer> flux = Flux.range(1, 1000)\n                .onBackpressureBuffer(100); // Устанавливаем стратегию backpressure\n        \n        flux.publishOn(Schedulers.boundedElastic())\n            .subscribe(\n                item -> {\n                    try {\n                        Thread.sleep(10); // Имитируем медленного потребителя\n                        System.out.println(\"Received: \" * item);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                },\n                error -> System.err.println(\"Error: \" * error),\n                () -> System.out.println(\"All items received\")\n            );\n    }\n}\n```\n\n* **Отбрасывание (Dropping)** - отбрасывает элементы, если потребитель не может их обработать\n  * **onBackpressureDrop()**\n* **Новейшие элементы (Latest)** - сохраняет только последние элементы, удаляя предыдущие\n  * **onBackpressureLatest()**\n* **Ошибка (Error)** - сигнализирует об ошибке, когда backpressure не может быть обработано\n  * **onBackpressureError()**\n* **Контроль скорости запроса (Control Request Rate)**: явно контролирует скорость, с которой потребитель запрашивает элементы у производителя\n  * **request(n)** - метод в реализации Subscriber для управления потоком\n\n```java\nimport reactor.core.publisher.BaseSubscriber;\nimport reactor.core.publisher.Flux;\n\npublic class ControlledRequestExample {\n\n    public static void main(String[] args) {\n        Flux<Integer> flux = Flux.range(1, 1000);\n\n        flux.subscribe(new BaseSubscriber<Integer>() {\n            @Override\n            private void hookOnSubscribe(Subscription subscription) {\n                request(1); // Запрашиваем один элемент при подписке\n            }\n\n            @Override\n            private void hookOnNext(Integer value) {\n                try {\n                    Thread.sleep(10); // Эмитируем медленный процесс\n                    System.out.println(\"Received: \" * value);\n                    request(1); // Запрашиваем следующий элемент после обработки текущего\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            @Override\n            private void hookOnComplete() {\n                System.out.println(\"All items received\");\n            }\n\n            @Override\n            private void hookOnError(Throwable throwable) {\n                System.err.println(\"Error: \" * throwable.getMessage());\n            }\n        });\n    }\n}\n```\n\n[к оглавлению](#реактивное-программирование)\n\n## Объясните разницу между Hot и Cold Observable\n\nВ реактивном программировании термины hot и cold observable (или издатели в контексте Project Reactor) описывают, как они \nсоздают потоки данных и обрабатывают их. Основное различие между ними заключается в том, как они обрабатывают подписки \nи когда начинают выдавать элементы.\n\n### Cold Observables\n\nНачинают выдавать элементы только тогда, когда подписчик подписывается на них. Каждый подписчик получает всю последовательность \nэлементов с самого начала. Это означает, что каждый раз, когда подписывается новый подписчик, Observable воспроизводит всю последовательность элементов.\n\n#### Характеристики\n\n* **Ленивое исполнение (Lazy Evaluation)** - данные не производятся, пока не будет хотя бы одного подписчика\n* **Множественные подписки (Multiple Subscriptions)** - каждый подписчик получает полную последовательность элементов независимо от других подписчиков\n* **Воспроизводимость (Reproducibility)** - каждый подписчик видит одну и ту же последовательность элементов с самого начала, что делает поток воспроизводимым\n\n#### Пример\n\n```java\nimport reactor.core.publisher.Flux;\n\npublic class ColdObservableExample {\n\n  public static void main(String[] args) {\n    Flux<String> coldFlux = Flux.just(\"A\", \"B\", \"C\", \"D\")\n            .doOnSubscribe(subscription -> System.out.println(\"Subscribed to Cold Observable\"));\n\n    // First subscription\n    coldFlux.subscribe(item -> System.out.println(\"Subscriber 1: \" * item));\n\n    // Second subscription\n    coldFlux.subscribe(item -> System.out.println(\"Subscriber 2: \" * item));\n  }\n}\n```\n\n### Hot Observables\n\nНачинают выдавать элементы независимо от наличия подписчиков. Подписчики получают только те элементы, которые были отправлены \nпосле их подписки. Это означает, что если подписчик подпишется с опозданием, он пропустит элементы, которые были отправлены до подписки.\n\n#### Характеристики\n\n* **Жадное исполнение (Eager Evaluation)** - публикация элементов происходит сразу после создания, даже если подписчиков нет\n* **Общий поток данных (Shared Data Stream)** - все подписчики используют один и тот же источник данных и получают элементы, отправленные после подписки\n* **Невоспроизводимость (Non-Reproducibility)** - подписчики могут видеть разные части последовательности в зависимости от того, когда они подписались\n\n#### Пример\n\n```java\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.ConnectableFlux;\n\nimport java.time.Duration;\n\npublic class HotObservableExample {\n\n    public static void main(String[] args) throws InterruptedException {\n        ConnectableFlux<String> hotFlux = Flux.just(\"A\", \"B\", \"C\", \"D\")\n                                              .delayElements(Duration.ofMillis(500))\n                                              .publish();\n\n        // Запускаем публикацию элементов\n        hotFlux.connect();\n\n        // Первая подписка (начинает получать данные немедленно)\n        hotFlux.subscribe(item -> System.out.println(\"Subscriber 1: \" * item));\n        Thread.sleep(750); // Ждем отправку элементов\n\n        // Вторая подписка (пропускает первый элемент)\n        hotFlux.subscribe(item -> System.out.println(\"Subscriber 2: \" * item));\n\n        // Останавливаем работу основного потока, чтобы увидеть выходные данные\n        Thread.sleep(2000);\n    }\n}\n\n```\n\n### Ключевые отличия\n\n| Критерий       | Hot Observables                                        | Cold Observables                                                                          |\n|----------------|--------------------------------------------------------|-------------------------------------------------------------------------------------------|\n| Обмен данными  | Один поток для всех подписчиков                        | У каждого подписчика свой независимый поток                                               | \n| Время подписки | Получает данные в зависимости от времени подписки      | Получает все данные, даже если подпишется позже                                           |\n| Жизненный цикл | Работает независимо от подписок                        | Запускает генерацию данных только, когда есть подписка                                    |\n| Асинхронность  | Может генерировать и передавать данные без подписчиков | Передача данных начинается после подписки, что часто приводит к синхронной передаче       |\n\n### Практическое применение\n\nCold Observables полезны для:\n* Данные, которые необходимо воспроизвести для каждого подписчика, такие как чтение из файла, выполнение HTTP-запроса или \nгенерация новой случайной последовательности.\n* Сценарии, в которых последовательность элементов должна быть согласованной и воспроизводимой для каждого подписчика.\n\nHot Observables полезны для:\n* Данные, которые создаются непрерывно и которыми необходимо делиться между несколькими подписчиками, такие как события \nмыши, обновления цен на акции или данные датчиков.\n* Сценарии, в которых подписчики должны получать только текущие и будущие события, а не прошлые.\n\n[к оглавлению](#реактивное-программирование)\n\n## Какова роль Подписки в реактивном программировании?\n\nПодписка абстрагирует от того, как данные получаются или генерируются\n\n### Основные функции\n`Subscription` обычно предлагает два основных метода:\n* **Request** - информирует источник данных о количестве элементов, которые потребитель готов получить\n* **Cancel** - останавливает поток данных, освобождая любые ресурсы, такие как обработчики файлов или сетевые подключения\n\n### Общая концепция\n`Subscription` - интерфейс, действующий как соглашение между источником данных и потребителем данных. Он обеспечивает \nпередачу данных с учетом управления потоком, backpressure и ресурсами.\n\n### Управление backpressure\nРеализации интерфейса `Publisher` в реактивных потоках оценивают готовность подписчика обрабатывать входящие данные \nс учетом текущего состояния потока данных. Этот механизм, известный как backpressure, направлен на предотвращение перегрузки \nпутем указания источнику данных соответствующим образом адаптировать скорость передачи данных.\n\n`request` - метод интерфейса `Subscription` является основным каналом, по которому подписчик сообщает источнику данных \nо своей текущей возможности принимать данные, тем самым регулируя backpressure.\n\n### Управление ресурсами\nДля определенных источников данных, таких как файлы, потоки ввода-вывода или базы данных, могут потребоваться определенные \nресурсы. Интерфейс `Subscription` предоставляет средства для освобождения этих ресурсов, когда передача данных больше не требуется.\n\nПосле вызова метода `cancel` источник данных может предпринять соответствующие действия, такие как закрытие файла или \nпрекращение сетевого взаимодействия.\n\n[к оглавлению](#реактивное-программирование)\n\n## Как отписаться от потока для предотвращения утечки памяти?\n\n* Использовать `Disposable`: получить Disposable из подписки и вызвать метод `dispose`, чтобы отменить ее\n* Использовать `BaseSubscriber`: наследоваться от класса BaseSubscriber и вызвать потом метод `dispose`\n* Использовать операторы при создании потока:\n  * `take`: автоматически отменит подписку после получения некоторого количества элементов\n  * `timeout`: автоматически отменяет подписку, если в течение указанного срока не будет отправлено никаких элементов.\n\nBest Practice: стоит настраивать отмену подписки, связывая ее с жизненным циклом какого-либо компонента \n\n[к оглавлению](#реактивное-программирование)\n\n## Какие есть операторы в Project Reactor и для чего они используются?\n\nОператоры в реактивном программировании служат для создания, преобразования, фильтрации или объединения различных потоков данных.\n\n### Операторы создания\n* `just`: создает Flux/Mono, который публикует указанные элементы\n* `fromArray`: создает поток, который генерирует элементы из массива\n* `fromIterable`: создает Flux, который генерирует элементы из итерируемого объекта\n* `fromStream`: создает Flux из stream Java\n* `fromCallable`: создает Mono из Callable\n* `fromRunnable`: создает Mono из Runnable\n* `fromSupplier`: создает Mono от Supplier\n* `range`: создает FLux, который выдает диапазон целых чисел\n* `interval`: создает Flux, который выдает long значения через регулярные промежутки времени\n* `empty`: создает пустой Flux/Mono, который завершается немедленно\n* `error`: создает Flux/Mono, который немедленно сигнализирует об ошибке\n* `never`: создает Flux/Mono, который не создает какой-либо элемент и не завершается\n* `defer`: создает новый Flux/Mono для каждой подписки\n\n### Операторы трансформации\n* `map`: преобразует объекты, публикуемые Flux/Mono.\n* `flatMap`: преобразует каждый элемент в поток, а затем соединяет их в один поток\n* `concatMap`: как flatMap, но поддерживает порядок публикуемых элементов\n* `switchMap`: когда он получает данные от нового потока, то сразу отписывается от предыдущего и подписывается на новый\n* `scan`: Накапливайте состояние каждого элемента.\n* `buffer`: собирает элементы в как список внутри Flux\n* `window`: публикует коллекцию элементов как Flux (окно фиксированного размера) внутри Flux\n* `groupBy`: группирует элементы по ключу\n\n### Операторы фильтрации\n* `filter`: пропускает только те элементы, которые удовлетворяют условию\n* `distinct`: пропускает только уникальные элементы\n* `take`: ограничивает количество элементов, публикуемых потоком\n* `takeWhile`: публикует элементы, пока условие истинно\n* `takeUntil`: публикует элементы, пока условие не станет истинно\n* `skip`: пропускает определенное количество элементов в начале потока\n* `skipWhile`: пропускает элементы, пока условие истинно\n* `skipUntil`: пропускает элементы, пока условие не станет истинно\n\n### Операторы объединения\n* `merge`: объединяет потоки в один параллельно, сохраняя порядок элементов (активная подписка)\n* `concat`: объединяет потоки последовательно, ожидая завершения первого потока, затем второго и так далее (отложенная подписка)\n* `zip`: объединяет элементы из нескольких потоков в пары\n* `combineLatest`: объединяет указанным способом последние значения из нескольких потоков\n* `startWith`: добавляет в начало потока к исходным элементам новые элемент(ы)\n"
        },
        {
          "name": "serialization.md",
          "type": "blob",
          "size": 16.232421875,
          "content": "[Вопросы для собеседования](README.md)\n\n# Сериализация\n+ [Что такое _«сериализация»_?](#Что-такое-сериализация)\n+ [Опишите процесс сериализации/десериализации с использованием `Serializable`.](#Опишите-процесс-сериализациидесериализации-с-использованием-serializable)\n+ [Как изменить стандартное поведение сериализации/десериализации?](#Как-изменить-стандартное-поведение-сериализациидесериализации)\n+ [Как исключить поля из сериализации?](#Как-исключить-поля-из-сериализации)\n+ [Что обозначает ключевое слово `transient`?](#Что-обозначает-ключевое-слово-transient)\n+ [Какое влияние оказывают на сериализуемость модификаторы полей `static` и `final`](#Какое-влияние-оказывают-на-сериализуемость-модификаторы-полей-static-и-final)\n+ [Как не допустить сериализацию?](#Как-не-допустить-сериализацию)\n+ [Как создать собственный протокол сериализации?](#Как-создать-собственный-протокол-сериализации)\n+ [Какая роль поля `serialVersionUID` в сериализации?](#Какая-роль-поля-serialversionuid-в-сериализации)\n+ [Когда стоит изменять значение поля `serialVersionUID`?](#Когда-стоит-изменять-значение-поля-serialversionuid)\n+ [В чем проблема сериализации Singleton?](#В-чем-проблема-сериализации-singleton)\n+ [Какие существуют способы контроля за значениями десериализованного объекта](#Какие-существуют-способы-контроля-за-значениями-десериализованного-объекта)\n\n## Что такое _«сериализация»_?\n__Сериализация (Serialization)__ - процесс преобразования структуры данных в линейную последовательность байтов для дальнейшей передачи или сохранения. Сериализованные объекты можно затем восстановить (десериализовать).\n\nВ Java, согласно спецификации Java Object Serialization существует два стандартных способа сериализации: стандартная сериализация, через использование интерфейса `java.io.Serializable` и «расширенная» сериализация - `java.io.Externalizable`.\n\nСериализация позволяет в определенных пределах изменять класс. Вот наиболее важные изменения, с которыми спецификация Java Object Serialization может справляться автоматически:\n\n+ добавление в класс новых полей;\n+ изменение полей из статических в нестатические;\n+ изменение полей из транзитных в нетранзитные.\n\nОбратные изменения (из нестатических полей в статические и из нетранзитных в транзитные) или удаление полей требуют определенной дополнительной обработки в зависимости от того, какая степень обратной совместимости необходима.\n\n[к оглавлению](#Сериализация)\n\n## Опишите процесс сериализации/десериализации с использованием `Serializable`.\nПри использовании Serializable применяется алгоритм сериализации, который с помощью рефлексии (Reflection API) выполняет:\n\n+ запись в поток метаданных о классе, ассоциированном с объектом (имя класса, идентификатор `SerialVersionUID`, идентификаторы полей класса);\n+ рекурсивную запись в поток описания суперклассов до класса `java.lang.Object` (не включительно);\n+ запись примитивных значений полей сериализуемого экземпляра, начиная с полей самого верхнего суперкласса;\n+ рекурсивную запись объектов, которые являются полями сериализуемого объекта.\n\nПри этом ранее сериализованные объекты повторно не сериализуются, что позволяет алгоритму корректно работать с циклическими ссылками.\n\nДля выполнения десериализации под объект выделяется память, после чего его поля заполняются значениями из потока. Конструктор объекта при этом не вызывается. Однако при десериализации будет вызван конструктор без параметров родительского несериализуемого класса, а его отсутствие повлечёт ошибку десериализации.\n\n[к оглавлению](#Сериализация)\n\n## Как изменить стандартное поведение сериализации/десериализации?\n+ Реализовать интерфейс `java.io.Externalizable`, который позволяет применение пользовательской логики сериализации. Способ сериализации и десериализации описывается в методах `writeExternal()` и `readExternal()`. Во время десериализации вызывается конструктор без параметров, а потом уже на созданном объекте вызывается метод `readExternal`.\n+ Если у сериализуемого объекта реализован один из следующих методов, то механизм сериализации будет использовать его, а не метод по умолчанию :\n    + `writeObject()` - запись объекта в поток;\n    + `readObject()` - чтение объекта из потока;\n    + `writeReplace()` - позволяет заменить себя экземпляром другого класса перед записью;\n    + `readResolve()` - позволяет заменить на себя другой объект после чтения.\n\n[к оглавлению](#Сериализация)\n\n## Как исключить поля из сериализации?\nДля управления сериализацией при определении полей можно использовать ключевое слово `transient`, таким образом исключив поля из общего процесса сериализации.\n\n[к оглавлению](#Сериализация)\n\n## Что обозначает ключевое слово `transient`?\nПоля класса, помеченные модификатором `transient`, не сериализуются.\n\nОбычно в таких полях хранится промежуточное состояние объекта, которое, к примеру, проще вычислить. Другой пример такого поля - ссылка на экземпляр объекта, который не требует сериализации или не может быть сериализован.\n\n[к оглавлению](#Сериализация)\n\n## Какое влияние оказывают на сериализуемость модификаторы полей `static` и `final`\nПри стандартной сериализации поля, имеющие модификатор static, не сериализуются. Соответственно, после десериализации это поле значения не меняет. При использовании реализации `Externalizable` сериализовать и десериализовать статическое поле можно, но не рекомендуется этого делать, т.к. это может сопровождаться трудноуловимыми ошибками.\n\nПоля с модификатором `final` сериализуются как и обычные. За одним исключением – их невозможно десериализовать при использовании `Externalizable`, поскольку `final` поля должны быть инициализированы в конструкторе, а после этого в `readExternal()` изменить значение этого поля будет невозможно. Соответственно, если необходимо сериализовать объект с `final` полем необходимо использовать только стандартную сериализацию.\n\n[к оглавлению](#Сериализация)\n\n## Как не допустить сериализацию?\nЧтобы не допустить автоматическую сериализацию можно переопределить `private` методы для создания исключительной ситуации `NotSerializableException`.\n\n```java\nprivate void writeObject(ObjectOutputStream out) throws IOException {\n    throw new NotSerializableException();\n}\n\nprivate void readObject(ObjectInputStream in) throws IOException {\n    throw new NotSerializableException();\n}\n```\n\nЛюбая попытка записать или прочитать этот объект теперь приведет к возникновению исключительной ситуации.\n\n[к оглавлению](#Сериализация)\n\n## Как создать собственный протокол сериализации?\nДля создания собственного протокола сериализации достаточно реализовать интерфейс `Externalizable`, который содержит два метода:\n\n```java\npublic void writeExternal(ObjectOutput out) throws IOException;\npublic void readExternal(ObjectInput in) throws IOException, ClassNotFoundException;\n```\n\n[к оглавлению](#Сериализация)\n\n## Какая роль поля `serialVersionUID` в сериализации?\n`serialVersionUID` используется для указания версии сериализованных данных. \n\nКогда мы не объявляем `serialVersionUID` в нашем классе явно, среда выполнения Java делает это за нас, но этот процесс чувствителен ко многим метаданным класса включая количество полей, тип полей, модификаторы доступа полей, интерфейсов, которые реализованы в классе и пр. \n\nРекомендуется явно объявлять `serialVersionUID` т.к. при добавлении, удалении атрибутов класса динамически сгенерированное значение может измениться и в момент выполнения будет выброшено исключение `InvalidClassException`.\n\n```java\nprivate static final long serialVersionUID = 20161013L;\n```\n[к оглавлению](#Сериализация)\n\n## Когда стоит изменять значение поля `serialVersionUID`?\n`serialVersionUID` нужно изменять при внесении в класс несовместимых изменений, например при удалении какого-либо его атрибута.\n\n[к оглавлению](#Сериализация)\n\n## В чем проблема сериализации Singleton?\nПроблема в том что после десериализации мы получим другой объект. Таким образом, сериализация дает возможность создать Singleton еще раз, что недопустимо. Существует два способа избежать этого:\n\n+ явный запрет сериализации.\n+ определение метода с сигнатурой `(default/public/private/protected/) Object readResolve() throws ObjectStreamException`, назначением которого станет возврат замещающего объекта вместо объекта, на котором он вызван.\n\n[к оглавлению](#Сериализация)\n\n## Какие существуют способы контроля за значениями десериализованного объекта\nЕсли есть необходимость выполнения контроля за значениями десериализованного объекта, то можно использовать интерфейс `ObjectInputValidation` с переопределением метода `validateObject()`.\n\n```java\n// Если вызвать метод validateObject() после десериализации объекта, то будет вызвано исключение InvalidObjectException при значении возраста за пределами 39...60.\npublic class Person implements java.io.Serializable,\n                               java.io.ObjectInputValidation {\n    ...\n    @Override\n    public void validateObject() throws InvalidObjectException {\n        if ((age < 39) || (age > 60))\n            throw new InvalidObjectException(\"Invalid age\");\n    }\n}\n```\n\nТак же существуют способы подписывания и шифрования, позволяющие убедиться, что данные не были изменены:\n\n+ с помощью описания логики в `writeObject()` и `readObject()`.\n\n+ поместить в оберточный класс `javax.crypto.SealedObject` и/или `java.security.SignedObject`. Данные классы являются сериализуемыми, поэтому при оборачивании объекта в `SealedObject` создается подобие «подарочной упаковки» вокруг исходного объекта. Для шифрования необходимо создать симметричный ключ, управление которым должно осуществляться отдельно. Аналогично, для проверки данных можно использовать класс `SignedObject`, для работы с которым также нужен симметричный ключ, управляемый отдельно.\n\n[к оглавлению](#Сериализация)\n\n# Источники\n+ [IBM developerWorks](https://www.ibm.com/developerworks/ru/library/j-5things1/)\n+ [Java-online.ru](http://java-online.ru/blog-serialization.xhtml)\n+ [Изучите секреты Java Serialization API](http://ccfit.nsu.ru/~deviv/courses/oop/java_ser_rus.html)\n+ [JavaRush](http://bit.ly/1xwRA2D)\n+ [Записки трезвого практика](http://www.skipy.ru/technics/serialization.html)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "servlets.md",
          "type": "blob",
          "size": 137.1943359375,
          "content": "[Вопросы для собеседования](README.md)\n\n# Servlets, JSP, JSTL\n+ [Что такое _«сервлет»_?](#Что-такое-сервлет)\n+ [В чем заключаются преимущества технологии сервлетов над CGI (Common Gateway Interface)?](#В-чем-заключаются-преимущества-технологии-сервлетов-над-cgi-common-gateway-interface)\n+ [Какова структура веб-проекта?](#Какова-структура-веб-проекта)\n+ [Что такое _«контейнер сервлетов»_?](#Что-такое-контейнер-сервлетов)\n+ [Зачем нужны сервера приложений, если есть контейнеры сервлетов?](#Зачем-нужны-сервера-приложений-если-есть-контейнеры-сервлетов)\n+ [Как контейнер сервлетов управляет жизненным циклом сервлета, когда и какие методы вызываются?](#Как-контейнер-сервлетов-управляет-жизненным-циклом-сервлета-когда-и-какие-методы-вызываются)\n+ [Что такое _«дескриптор развертывания»_?](#Что-такое-дескриптор-развертывания)\n+ [Какие действия необходимо проделать при создании сервлетов?](#Какие-действия-необходимо-проделать-при-создании-сервлетов)\n+ [В каком случае требуется переопределять метод `service()`?](#В-каком-случае-требуется-переопределять-метод-service)\n+ [Есть ли смысл определять для сервлета конструктор? Каким образом лучше инициализировать данные?](#Есть-ли-смысл-определять-для-сервлета-конструктор-Каким-образом-лучше-инициализировать-данные)\n+ [Почему необходимо переопределить только `init()` метод без аргументов?](#Почему-необходимо-переопределить-только-init-метод-без-аргументов)\n+ [Какие наиболее распространенные задачи выполняются в контейнере сервлетов?](#Какие-наиболее-распространенные-задачи-выполняются-в-контейнере-сервлетов)\n+ [Что вы знаете о _сервлетных фильтрах_?](#Что-вы-знаете-о-сервлетных-фильтрах)\n+ [Зачем в сервлетах используются различные _listener_?](#Зачем-в-сервлетах-используются-различные-listener)\n+ [Когда стоит использовать фильтры сервлетов, а когда слушателей?](#Когда-стоит-использовать-фильтры-сервлетов-а-когда-слушателей)\n+ [Как реализовать запуск сервлета одновременно с запуском приложения?](#Как-реализовать-запуск-сервлета-одновременно-с-запуском-приложения)\n+ [Как обработать в приложении исключения, выброшенные другим сервлетом?](#Как-обработать-в-приложении-исключения-выброшенные-другим-сервлетом)\n+ [Что представляет собой `ServletConfig`?](#Что-представляет-собой-servletconfig)\n+ [Что представляет собой `ServletContext`?](#Что-представляет-собой-servletcontext)\n+ [В чем отличия `ServletContext` и `ServletConfig`?](#В-чем-отличия-servletcontext-и-servletconfig)\n+ [Для чего нужен интерфейс `ServletResponse`?](#Для-чего-нужен-интерфейс-servletresponse)\n+ [Для чего нужен интерфейс `ServletRequest`?](#Для-чего-нужен-интерфейс-servletrequest)\n+ [Что такое `Request Dispatcher`?](#Что-такое-request-dispatcher)\n+ [Как из одного сервлета вызвать другой сервлет?](#Как-из-одного-сервлета-вызвать-другой-сервлет)\n+ [Чем отличается `sendRedirect()` от `forward()`?](#Чем-отличается-sendredirect-от-forward)\n+ [Для чего используются атрибуты сервлетов и как происходит работа с ними?](#Для-чего-используются-атрибуты-сервлетов-и-как-происходит-работа-с-ними)\n+ [Каким образом можно допустить в сервлете deadlock?](#Каким-образом-можно-допустить-в-сервлете-deadlock)\n+ [Как получить реальное расположение сервлета на сервере?](#Как-получить-реальное-расположение-сервлета-на-сервере)\n+ [Как получить информацию о сервере из сервлета?](#Как-получить-информацию-о-сервере-из-сервлета)\n+ [Как получить IP адрес клиента на сервере?](#Как-получить-ip-адрес-клиента-на-сервере)\n+ [Какие классы-обертки для сервлетов вы знаете?](#Какие-классы-обертки-для-сервлетов-вы-знаете)\n+ [В чем отличия `GenericServlet` и `HttpServlet`?](#В-чем-отличия-genericservlet-и-httpservlet)\n+ [Почему `HttpServlet` класс объявлен как абстрактный?](#Почему-httpservlet-класс-объявлен-как-абстрактный)\n+ [Какие основные методы присутствуют в классе `HttpServlet`?](#Какие-основные-методы-присутствуют-в-классе-httpservlet)\n+ [Стоит ли волноваться о многопоточной безопасности работая с сервлетами?](#Стоит-ли-волноваться-о-многопоточной-безопасности-работая-с-сервлетами)\n+ [Какой метод HTTP не является неизменяемым?](#Какой-метод-http-не-является-неизменяемым)\n+ [Какие есть методы отправки данных с клиента на сервер?](#Какие-есть-методы-отправки-данных-с-клиента-на-сервер)\n+ [В чем разница между методами `GET` и `POST`?](#В-чем-разница-между-методами-get-и-post)\n+ [В чем разница между `PrintWriter` и `ServletOutputStream`?](#В-чем-разница-между-printwriter-и-servletoutputstream)\n+ [Можно ли одновременно использовать в сервлете `PrintWriter` и `ServletOutputStream`?](#Можно-ли-одновременно-использовать-в-сервлете-printwriter-и-servletoutputstream)\n+ [Расскажите об интерфейсе `SingleThreadModel`.](#Расскажите-об-интерфейсе-singlethreadmodel)\n+ [Что означает _URL encoding_? Как это осуществить в Java?](#Что-означает-url-encoding-Как-это-осуществить-в-java)\n+ [Какие различные методы управления сессией в сервлетах вы знаете?](#Какие-различные-методы-управления-сессией-в-сервлетах-вы-знаете)\n+ [Что такое _cookies_?](#Что-такое-cookies)\n+ [Какие методы для работы с cookies предусмотрены в сервлетах?](#Какие-методы-для-работы-с-cookies-предусмотрены-в-сервлетах)\n+ [Что такое _URL Rewriting_?](#Что-такое-url-rewriting)\n+ [Зачем нужны и чем отличаются методы `encodeURL()` и `encodeRedirectURL()`?](#Зачем-нужны-и-чем-отличаются-методы-encodeurl-и-encoderedirecturl)\n+ [Что такое _«сессия»_?](#Что-такое-сессия)\n+ [Как уведомить объект в сессии, что сессия недействительна или закончилась?](#Как-уведомить-объект-в-сессии-что-сессия-недействительна-или-закончилась)\n+ [Какой существует эффективный способ удостоверится, что все сервлеты доступны только для пользователя с верной сессией?](#Какой-существует-эффективный-способ-удостоверится-что-все-сервлеты-доступны-только-для-пользователя-с-верной-сессией)\n+ [Как мы можем обеспечить _transport layer security_ для нашего веб приложения?](#Как-мы-можем-обеспечить-transport-layer-security-для-нашего-веб-приложения)\n+ [Как организовать подключение к базе данных, обеспечить журналирование в сервлете?](#Как-организовать-подключение-к-базе-данных-обеспечить-журналирование-в-сервлете)\n+ [Какие основные особенности появились в спецификации _Servlet 3_?](#Какие-основные-особенности-появились-в-спецификации-servlet-3)\n+ [Какие способы аутентификации доступны сервлету?](#Какие-способы-аутентификации-доступны-сервлету)\n+ [Что такое _Java Server Pages (JSP)_?](#Что-такое-java-server-pages-jsp)\n+ [Зачем нужен JSP?](#Зачем-нужен-jsp)\n+ [Опишите, как обрабатываются JSP страницы, начиная от запроса к серверу, заканчивая ответом пользователю.](#Опишите-как-обрабатываются-jsp-страницы-начиная-от-запроса-к-серверу-заканчивая-ответом-пользователю)\n+ [Расскажите об этапах (фазах) жизненного цикла JSP.](#Расскажите-об-этапах-фазах-жизненного-цикла-jsp)\n+ [Расскажите о методах жизненного цикла JSP.](#Расскажите-о-методах-жизненного-цикла-jsp)\n+ [Какие методы жизненного цикла JSP могут быть переопределены?](#Какие-методы-жизненного-цикла-jsp-могут-быть-переопределены)\n+ [Как можно предотвратить прямой доступ к JSP странице из браузера?](#Как-можно-предотвратить-прямой-доступ-к-jsp-странице-из-браузера)\n+ [Какая разница между _динамическим_ и _статическим_ содержимым JSP?](#Какая-разница-между-динамическим-и-статическим-содержимым-jsp)\n+ [Как закомментировать код в JSP?](#Как-закомментировать-код-в-jsp)\n+ [Какие существуют основные типы тегов JSP?](#Какие-существуют-основные-типы-тегов-jsp)\n+ [Что вы знаете о действиях JSP (_Action tag_ и _JSP Action Elements_).](#Что-вы-знаете-о-действиях-jsp-action-tag-и-jsp-action-elements)\n+ [Взаимодействие _JSP - сервлет - JSP_.](#Взаимодействие-jsp---сервлет---jsp)\n+ [Какие области видимости переменных существуют в JSP?](#Какие-области-видимости-переменных-существуют-в-jsp)\n+ [Какие неявные, внутренние объекты и методы есть на JSP странице?](#Какие-неявные-внутренние-объекты-и-методы-есть-на-jsp-странице)\n+ [Какие неявные объекты не доступны в обычной JSP странице?](#Какие-неявные-объекты-не-доступны-в-обычной-jsp-странице)\n+ [Что вы знаете о `PageContext` и какие преимущества его использования?](#Что-вы-знаете-о-pagecontext-и-какие-преимущества-его-использования)\n+ [Как сконфигурировать параметры инициализации для JSP?](#Как-сконфигурировать-параметры-инициализации-для-jsp)\n+ [Почему не рекомендуется использовать скриплеты (скриптовые элементы) в JSP?](#Почему-не-рекомендуется-использовать-скриплеты-скриптовые-элементы-в-jsp)\n+ [Можно ли определить класс внутри JSP страницы?](#Можно-ли-определить-класс-внутри-jsp-страницы)\n+ [Что вы знаете о Языке выражений JSP (JSP Expression Language – EL)?](#Что-вы-знаете-о-Языке-выражений-jsp-jsp-expression-language--el)\n+ [Какие типы EL операторов вы знаете?](#Какие-типы-el-операторов-вы-знаете)\n+ [Назовите неявные, внутренние объекты JSP EL и их отличия от объектов JSP.](#Назовите-неявные-внутренние-объекты-jsp-el-и-их-отличия-от-объектов-jsp)\n+ [Как отключить возможность использования EL в JSP?](#Как-отключить-возможность-использования-el-в-jsp)\n+ [Как узнать тип HTTP метода используя JSP EL?](#Как-узнать-тип-http-метода-используя-jsp-el)\n+ [Что такое _JSTL (JSP Standard tag library)_?](#Что-такое-jstl-jsp-standard-tag-library)\n+ [Из каких групп тегов состоит библиотека _JSTL_?](#Из-каких-групп-тегов-состоит-библиотека-jstl)\n+ [Какая разница между `<c:set>` и `<jsp:useBean>`?](#Какая-разница-между-cset-и-jspusebean)\n+ [Чем отличается `<c:import>` от `<jsp:include>` и директивы `<%@include %>`?](#Чем-отличается-cimport-от-jspinclude-и-директивы-include-)\n+ [Как можно расширить функциональность JSP?](#Как-можно-расширить-функциональность-jsp)\n+ [Что вы знаете о написании пользовательских JSP тегов?](#Что-вы-знаете-о-написании-пользовательских-jsp-тегов)\n+ [Приведите пример использования собственных тегов.](#Приведите-пример-использования-собственных-тегов)\n+ [Как сделать перенос строки в HTML средствами JSP?](#Как-сделать-перенос-строки-в-html-средствами-jsp)\n+ [Почему не нужно конфигурировать стандартные JSP теги в `web.xml`?](#Почему-не-нужно-конфигурировать-стандартные-jsp-теги-в-webxml)\n+ [Как можно обработать ошибки JSP страниц?](#Как-можно-обработать-ошибки-jsp-страниц)\n+ [Как происходит обработка ошибок с помощью JSTL?](#Как-происходит-обработка-ошибок-с-помощью-jstl)\n+ [Как конфигурируется JSP в дескрипторе развертывания.](#Как-конфигурируется-jsp-в-дескрипторе-развертывания)\n+ [Можно ли использовать Javascript на JSP странице?](#Можно-ли-использовать-javascript-на-jsp-странице)\n+ [Всегда ли создается объект сессии на JSP странице, можно ли отключить его создание?](#Всегда-ли-создается-объект-сессии-на-jsp-странице-можно-ли-отключить-его-создание)\n+ [Какая разница между `JSPWriter` и сервлетным `PrintWriter`?](#Какая-разница-между-jspwriter-и-сервлетным-printwriter)\n+ [Опишите общие практические принципы работы с JSP.](#Опишите-общие-практические-принципы-работы-с-jsp)\n\n## Что такое _«сервлет»_?\n__Сервлет__ является интерфейсом, реализация которого расширяет функциональные возможности сервера. Сервлет взаимодействует с клиентами посредством принципа запрос-ответ. Хотя сервлеты могут обслуживать любые запросы, они обычно используются для расширения веб-серверов.\n\nБольшинство необходимых для создания сервлетов классов и интерфейсов содержатся в пакетах `javax.servlet` и `javax.servlet.http`.\n\nОсновные методы сервлета:\n\n+ `public void init(ServletConfig config) throws ServletException` запускается сразу после загрузки сервлета в память;\n+ `public ServletConfig getServletConfig()` возвращает ссылку на объект, который предоставляет доступ к информации о конфигурации сервлета;\n+ `public String getServletInfo()` возвращает строку, содержащую информацию о сервлете, например: автор и версия сервлета;\n+ `public void service(ServletRequest request, ServletResponse response) throws ServletException, java.io.IOException` вызывается для обработки каждого запроса;\n+ `public void destroy()` выполняется перед выгрузкой сервлета из памяти.\n\nТекущая спецификация - Servlet 3.1 описана в JSR-340 и принята в 2013 году.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## В чем заключаются преимущества технологии сервлетов над CGI (Common Gateway Interface)?\n+ Сервлеты предоставляют лучшую производительность обработки запросов и более эффективное использование памяти за счет использования преимущество многопоточности (на каждый запрос создается новая нить, что быстрее выделения памяти под новый объект для каждого запроса, как это происходит в CGI).\n+ Сервлеты, как платформа и система являются независимыми. Таким образом веб-приложение, написанное с использованием сервлетов может быть запущена в любом контейнере сервлетов, реализующим этот стандарт и в любой операционной системе.\n+ Использование сервлетов повышает надежность программы, т.к. контейнер сервлетов самостоятельно заботится о жизненном цикле сервлетов (а значит и за утечками памяти), безопасности и сборщике мусора.\n+ Сервлеты относительно легки в изучении и поддержке, таким образом разработчику необходимо заботиться только о бизнес-логике приложения, а не внутренней реализации веб-технологий.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какова структура веб-проекта?\n`src/main/java` Исходники приложения/библиотеки\n\n`src/main/resources` Ресурсные файлы приложения/библиотеки\n\n`src/main/filters` Файлы сервлетных фильтров\n\n`src/main/webapp` Исходники веб-приложения\n\n`src/test/java` Исходники тестов\n\n`src/test/resources` Ресурсные файлы тестов\n\n`src/test/filters` Тесты сервлетных фильтров\n\n`src/it` Интеграционные тесты\n\n`src/assembly` Описание сборки\n\n`src/site` Сайт\n\n`LICENSE.txt` Лицензия проекта\n\n`NOTICE.txt` Замечания и определения библиотек зависимостей.\n\n`README.txt` Описание проекта\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _«контейнер сервлетов»_?\n__Контейнер сервлетов__ — программа, представляющая собой сервер, который занимается системной поддержкой сервлетов и обеспечивает их жизненный цикл в соответствии с правилами, определёнными в спецификациях. Может работать как полноценный самостоятельный веб-сервер, быть поставщиком страниц для другого веб-сервера, или интегрироваться в Java EE сервер приложений.\n\nКонтейнер сервлетов обеспечивает обмен данными между сервлетом и клиентами, берёт на себя выполнение таких функций, как создание программной среды для функционирующего сервлета, идентификацию и авторизацию клиентов, организацию сессии для каждого из них.\n\nНаиболее известные реализации контейнеров сервлетов:\n\n+ Apache Tomcat\n+ Jetty\n+ JBoss\n+ WildFly\n+ GlassFish\n+ IBM WebSphere\n+ Oracle Weblogic\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Зачем нужны сервера приложений, если есть контейнеры сервлетов?\n+ __Пулы соединений с БД__ \n    + Возможность периодического тестирования доступности СУБД и обновления соединения в случае восстановления после сбоев\n    + Замена прав доступа при подключении\n    + Балансировка нагрузки между несколькими СУБД, определение доступность или недоступность того или иного узла\n    + Защита пула соединений от некорректного кода в приложении, которое по недосмотру не возвращает соединения, просто отбирая его после какого-то таймаута.\n+ __JMS__ \n    + Доступность сервера очередей сообщений \"из-коробки\". \n    + Возможность кластеризации очередей, т.е. доступность построения распределенных очередей, расположенных сразу на нескольких серверах, что существенно увеличивает масштабируемость и доступность приложения \n    + Возможность миграции очередей - в случае падения одного из серверов, его очереди автоматически перемещаются на другой, сохраняя необработанные сообщения. \n    + В некоторых серверах приложений поддерживается _Unit-of-Order_ - гарантированный порядок обработки сообщений, удовлетворяющих некоторым критериям.\n+ __JTA__ Встроенная поддержка распределенных транзакций для обеспечения согласованности данных в разные СУБД или очереди. \n+ __Безопасность__ \n    + Наличие множества провайдеров безопасности и аутентификации: \n        + во встроенном или внешнем _LDAP-сервере_\n        + в базе данных\n        + в различных _Internet-directory_ (специализированных приложениях для управления правами доступа)\n    + Доступность _Single-Sign-On_ (возможности разделения пользовательской сессии между приложениями) посредством _Security Assertion Markup Language (SAML) 1/2_ или _Simple and Protected Negotiate (SPNEGO)_ и _Kerberos_: один из серверов выступает в роли базы для хранения пользователей, все другие сервера при аутентификации пользователя обращаются к этой базе.\n    + Возможность авторизации посредством протокола _eXtensible Access Control Markup Language (XACML)_, позволяющего описывать довольно сложные политики (например, приложение доступно пользователю только в рабочее время). \n    + Кластеризация всего вышеперечисленного\n+ __Масштабируемость и высокая доступность__ Для контейнера сервлетов обычно так же возможно настроить кластеризацию, но она будет довольно примитивной, так как в случае его использования имеются следующие ограничения: \n    + Сложность передачи пользовательской сессии из одного _центра обработки данных (ЦоД)_ в другой через Интернет \n    + Отсутствие возможности эффективно настроить репликации сессий на большом (состоящем из 40-50 экземпляров серверов) кластере\n    + Невозможность обеспечения миграции экземпляров приложения на другой сервер\n    + Недоступность механизмов автоматического мониторинга и реакции на ошибки\n+ __Управляемость__ \n    + Присутствие единого центра управления, т.н. _AdminServer_ и аналога _NodeManager_’а, обеспечивающего\n        + Возможность одновременного запуска нескольких экземпляров сервера\n        + Просмотр состояния запущенных экземпляров сервера, обработчиков той или иной очереди, на том или ином сервере, количества соединений с той или иной БД\n+ __Административный канал и развертывание в промышленном режиме__ Некоторые сервера приложений позволяют включить так называемый \"административный канал\" - отдельный порт, запросы по которому имеют приоритет.\n    + Просмотр состояния (выполняющихся транзакций, потоков, очередей) в случае недоступности (\"зависания\") сервера\n    + Обновление приложений \"на-лету\", без простоя: \n        + добавление на сервер новой версии приложения в \"закрытом\" режиме, пока пользователи продолжают работать со предыдущей\n        + тестирование корректности развертывания новой версии\n        + \"скрытый\" перевод на использование новой версии всех пользователей\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как контейнер сервлетов управляет жизненным циклом сервлета, когда и какие методы вызываются?\nКонтейнер сервлетов управляет четырьмя фазами жизненного цикла сервлета:\n\n+ Загрузка класса сервлета — когда контейнер получает запрос для сервлета, то происходит загрузка класса сервлета в память и вызов его конструктора без параметров.\n+ Инициализация класса сервлета — после того как класс загружен контейнер инициализирует объект `ServletConfig` для этого сервлета и внедряет его через `init()` метод. Это и есть место где сервлет класс преобразуется из обычного класса в сервлет.\n+ Обработка запросов — после инициализации сервлет готов к обработке запросов. Для каждого запроса клиента сервлет контейнер порождает новый поток и вызывает метод `service()` путем передачи ссылки на объекты ответа и запроса.\n+ Удаление - когда контейнер останавливается или останавливается приложение, то контейнер сервлетов уничтожает классы сервлетов путем вызова `destroy()` метода.\n\nТаким образом, сервлет создаётся при первом обращении к нему и живёт на протяжении всего времени работы приложения (в отличии от объектов классов, которые уничтожаются сборщиком мусора после того, как они уже не используются) и весь жизненный цикл сервлета можно описать как последовательность вызова методов:\n\n+ `public void init(ServletConfig config)` – используется контейнером для инициализации сервлета. Вызывается один раз за время жизни сервлета.\n+ `public void service(ServletRequest request, ServletResponse response)` – вызывается для каждого запроса. Метод не может быть вызван раньше выполнения `init()` метода.\n+ `public void destroy()` – вызывается для уничтожения сервлета (один раз за время жизни сервлета).\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _«дескриптор развертывания»_?\nДескриптор развертывания — это конфигурационный файл артефакта, который будет развернут в контейнере сервлетов. В спецификации Java Platform, Enterprise Edition дескриптор развертывания описывает то, как компонент, модуль или приложение (такое, как веб-приложение или приложение предприятия) должно быть развернуто.\n\nЭтот конфигурационный файл указывает параметры развертывания для модуля или приложения с определенными настройками, параметры безопасности и описывает конкретные требования к конфигурации. Для синтаксиса файлов дескриптора развертывания используется язык XML.\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\"\n    version=\"2.4\">\n\n    <display-name>Display name.</display-name>\n    <description>Description text.</description>\n\n    <servlet>\n        <servlet-name>ExampleServlet</servlet-name>\n        <servlet-class>xyz.company.ExampleServlet</servlet-class>\n        <load-on-startup>1</load-on-startup>\n        <init-param>\n            <param-name>configuration</param-name>\n            <param-value>default</param-value>\n        </init-param>       \n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>ExampleServlet</servlet-name>\n        <url-pattern>/example</url-pattern>\n    </servlet-mapping>\n\n    <servlet>\n        <servlet-name>ExampleJSP</servlet-name>\n        <jsp-file>/sample/Example.jsp</jsp-file>\n    </servlet>\n\n    <context-param>\n        <param-name>myParam</param-name>\n        <param-value>the value</param-value>\n    </context-param>\n</web-app>\n```\n\nДля веб-приложений дескриптор развертывания должен называться `web.xml` и находиться в директории `WEB-INF`, в корне веб-приложения. Этот файл является стандартным дескриптором развертывания, определенным в спецификации. Также есть и другие типы дескрипторов, такие, как файл дескриптора развертывания `sun-web.xml`, содержащий специфичные для _Sun GlassFish Enterprise Server_ данные для развертывания именно для этого сервера приложений или файл `application.xml` в директории `META-INF` для приложений _J2EE_.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие действия необходимо проделать при создании сервлетов?\nЧтобы создать сервлет `ExampleServlet`, необходимо описать его в дескрипторе развёртывания:\n\n```xml\n<servlet-mapping>\n    <servlet-name>ExampleServlet</servlet-name>\n    <url-pattern>/example</url-pattern>\n</servlet-mapping>\n<servlet>\n    <servlet-name>ExampleServlet</servlet-name>\n    <servlet-class>xyz.company.ExampleServlet</servlet-class>\n    <init-param>\n        <param-name>config</param-name>\n        <param-value>default</param-value>\n    </init-param>       \n</servlet>\n```\n\nЗатем создать класс `xyz.company.ExampleServlet` путём наследования от `HttpServlet` и реализовать логику его работы в методе `service()` или методах `doGet()`/`doPost()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## В каком случае требуется переопределять метод `service()`?\nМетод `service()` переопределяется, когда необходимо, чтобы сервлет обрабатывал все запросы (и `GET`, и `POST`) в одном методе.\n\nКогда контейнер сервлетов получает запрос клиента, то происходит вызов метода `service()`, который в зависимости от поступившего запроса вызывает или метод `doGet()` или метод `doPost()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Есть ли смысл определять для сервлета конструктор? Каким образом лучше инициализировать данные?\nБольшого смысла определять для сервлета конструктор нет, т.к. инициализировать данные лучше не в конструкторе, а переопределив метод `init()`, в котором имеется возможность доступа к параметрам инициализации сервлета через использование объекта `ServletConfig`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Почему необходимо переопределить только `init()` метод без аргументов?\nМетод `init()` переопределяется, если необходимо инициализировать какие-то данные до того как сервлет начнет обрабатывать запросы. \n\nПри переопределении метода `init(ServletConfig config)`, первым должен быть вызван метод `super(config)`, который обеспечит вызов метода `init(ServletConfig config)` суперкласса. `GenericServlet` предоставляет другой метод `init()` без параметров, который будет вызываться в конце метода `init(ServletConfig config)`.\n\nНеобходимо использовать переопределенный метод `init()` без параметров для инициализации данных во избежание каких-либо проблем, например ошибку, когда вызов `super()` не указан в переопределенном `init(ServletConfig config)`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие наиболее распространенные задачи выполняются в контейнере сервлетов?\n+ Поддержка обмена данными. Контейнер сервлетов предоставляет легкий способ обмена данными между веб клиентом (браузером) и сервлетом. Благодаря контейнеру нет необходимости создавать слушателя сокета на сервере для отслеживания запросов от клиента, а также разбирать запрос и генерировать ответ. Все эти важные и комплексные задачи решаются с помощью контейнера и разработчик может сосредоточиться на бизнес логике приложения.\n+ Управление жизненным циклом сервлетов и ресурсов. Начиная от загрузки сервлета в память, инициализации, внедрения методов и заканчивая уничтожением сервлета. Контейнер так же предоставляет дополнительные утилиты, например JNDI, для управления пулом ресурсов.\n+ Поддержка многопоточности. Контейнер самостоятельно создает новую нить для каждого запроса и предоставляет ей запрос и ответ для обработки. Таким образом сервлет не инициализируется заново для каждого запроса и тем самым сохраняет память и уменьшает время до обработки запроса.\n+ Поддержка JSP. JSP классы не похожи на стандартные классы джавы, но контейнер сервлетов преобразует каждую JSP в сервлет и далее управляется контейнером как обычным сервлетом.\n+ Различные задачи. Контейнер сервлетов управляет пулом ресурсов, памятью приложения, сборщиком мусора. Предоставляются возможности настройки безопасности и многое другое.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что вы знаете о _сервлетных фильтрах_?\n__Сервлетный фильтр__ - это Java-код, пригодный для повторного использования и позволяющий преобразовать содержание HTTP-запросов, HTTP-ответов и информацию, содержащуюся в заголовках HTML. Сервлетный фильтр занимается предварительной обработкой запроса, прежде чем тот попадает в сервлет, и/или последующей обработкой ответа, исходящего из сервлета.\n\nСервлетные фильтры могут:\n\n+ перехватывать инициацию сервлета прежде, чем сервлет будет инициирован;\n+ определить содержание запроса прежде, чем сервлет будет инициирован;\n+ модифицировать заголовки и данные запроса, в которые упаковывается поступающий запрос;\n+ модифицировать заголовки и данные ответа, в которые упаковывается получаемый ответ;\n+ перехватывать инициацию сервлета после обращения к сервлету.\n\nСервлетный фильтр может быть конфигурирован так, что он будет работать с одним сервлетом или группой сервлетов. Основой для формирования фильтров служит интерфейс `javax.servlet.Filter`, который реализует три метода:\n\n+ `void init(FilterConfig config) throws ServletException`;\n+ `void destroy()`;\n+ `void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException`;\n\nМетод `init()` вызывается прежде, чем фильтр начинает работать,и настраивает конфигурационный объект фильтра. Метод `doFilter()` выполняет непосредственно работу фильтра. Таким образом, сервер вызывает `init()` один раз, чтобы запустить фильтр в работу, а затем вызывает `doFilter()` столько раз, сколько запросов будет сделано непосредственно к данному фильтру. После того, как фильтр заканчивает свою работу, вызывается метод `destroy()`.\n\nИнтерфейс `FilterConfig` содержит метод для получения имени фильтра, его параметров инициации и контекста активного в данный момент сервлета. С помощью своего метода `doFilter()` каждый фильтр получает текущий запрос `request` и ответ `response`, а также `FilterChain`, содержащий список фильтров, предназначенных для обработки. В `doFilter()` фильтр может делать с запросом и ответом всё, что ему захочется - собирать данные или упаковывать объекты для придания им нового поведения. Затем фильтр вызывает `chain.doFilter()`, чтобы передать управление следующему фильтру. После возвращения этого вызова фильтр может по окончании работы своего метода `doFilter()` выполнить дополнительную работу над полученным ответом. К примеру, сохранить регистрационную информацию об этом ответе.\n\nПосле того, как класс-фильтр откомпилирован, его необходимо установить в контейнер и _«приписать» (map)_ к одному или нескольким сервлетам. Объявление и подключение фильтра отмечается в дескрипторе развёртывания `web.xml` внутри элементов `<filter>` и `<filter-mapping>`. Для подключение фильтра к сервлету необходимо использовать вложенные элементы `<filter-name>` и `<servlet-name>`.\n\n> Объявление класс-фильтра `FilterConnect` с именем `FilterName`:\n\n```xml\n  <filter>\n        <filter-name>FilterName</filter-name>\n        <filter-class>FilterConnect</filter-class>\n        <init-param>\n                <!--- фильтр имеет параметр инициализации `active`, которому присваивается значение `true`. -->\n                <param-name>active</param-name>\n                <param-value>true</param-true>\n        </init-param>\n  </filter>\n```\n\n> Подключение фильтра `FilterName` к сервлету `ServletName`:\n\n```xml\n  <filter-mapping>\n        <filter-name>FilterName</filter-name>\n        <servlet-name>ServletName</servlet-name>\n  </filter-mapping>\n```\n\nДля связи фильтра со страницами HTML или группой сервлетов необходимо использовать тег `<url-pattern>`:\n\n> Подключение фильтра `FilterName` ко всем вызовам .html страниц\n\n```xml\n  <filter-mapping>\n          <filter-name>FilterName</filter-name>\n          <url-pattern>*.html</url-pattern>\n  </filter-mapping>\n```\n\nПорядок, в котором контейнер строит цепочку фильтров для запроса определяется следующими правилами:\n\n+ цепочка, определяемая `<url-pattern>`, выстраивается в том порядке, в котором встречаются соответствующие описания фильтров в `web.xml`;\n+ последовательность сервлетов, определенных с помощью `<servlet-name>`, также выполняется в той последовательности, в какой эти элементы встречаются в дескрипторе развёртывания `web.xml`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Зачем в сервлетах используются различные _listener_?\n__Listener (слушатель)__ работает как триггер, выполняя определённые действия при наступлении какого-либо события в жизненном цикле сервлета.\n\nСлушатели, разделённые по области видимости (scope):\n\n+ _Request_:\n    + `ServletRequestListener` используется для того, чтобы поймать момент создания и уничтожения запроса;\n    + `ServletRequestAttributeListener` используется для прослушивания событий, происходящих с атрибутами запроса.\n+ _Context_:\n    + `ServletContextListener` позволяет поймать момент, когда контекст инициализируется либо уничтожается;\n    + `ServletContextAttributeListener` используется для прослушивании событий, происходящих с атрибутами в контексте.\n+ _Session_:\n    + `HttpSessionListener` позволяет поймать момент создания и уничтожения сессии;\n    + `HttpSessionAttributeListener` используется при прослушивании событий происходящих с атрибутами в сессии;\n    + `HttpSessionActivationListener` используется в случае, если происходит миграция сессии между различными JVM в распределённых приложениях;\n    + `HttpSessionBindingListener` так же используется для прослушивания событий, происходящих с атрибутами в сессии. Разница между `HttpSessionAttributeListener` и `HttpSessionBindingListener` слушателями: первый декларируется в `web.xml`; экземпляр класса создается контейнером автоматически в единственном числе и применяется ко всем сессиям; второй: экземпляр класса должен быть создан и закреплён за определённой сессией «вручную», количество экземпляров также регулируется самостоятельно.\n\nПодключение слушателей:\n\n```xml\n<web-app>\n    ...\n    <listener>\n        <listener-class>xyz.company.ExampleListener</listener-class>\n    </listener>\n    ...\n</web-app>\n```\n\n`HttpSessionBindingListener` подключается в качестве атрибута непосредственно в сессию, т.е., чтобы его подключить необходимо:\n\n+ создать экземпляр класса, реализующего этот интерфейс;\n+ положить созданный экземпляр в сессию при помощи `setAttribute(String, Object)`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Когда стоит использовать фильтры сервлетов, а когда слушателей?\nСледует использовать фильтры, если необходимо обрабатывать входящие или исходящие данные (например: для аутентификации, преобразования формата, компрессии, шифрования и т.д.), в случае, когда необходимо реагировать на события - лучше применять слушателей.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как реализовать запуск сервлета одновременно с запуском приложения?\nКонтейнер сервлетов обычно загружает сервлет по первому запросу клиента.\n\nЕсли необходимо загрузить сервлет прямо на старте приложения (например если загрузка сервлета происходит длительное время) следует использовать элемент `<load-on-startup>` в дескрипторе или аннотацию `@loadOnStartup` в коде сервлета, что будет указывать на необходимость загрузки сервлета при запуске.\n\nЕсли целочисленное значение этого параметра отрицательно, то сервлет будет загружен при запросе клиента. В противном случае - загрузится на старте приложения, при этом, чем число меньше, тем раньше в очереди на загрузку он окажется.\n\n```xml\n<servlet>\n    <servlet-name>ExampleServlet</servlet-name>\n    <servlet-class>xyz.company.ExampleServlet</servlet-class>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как обработать в приложении исключения, выброшенные другим сервлетом?\nКогда приложение выбрасывет исключение контейнер сервлетов обрабатывает его и создаёт ответ в формате HTML. Это аналогично тому, что происходит при кодах ошибок вроде 404, 403 и т.д.\n\nВ дополнении к этому существует возможность написания собственных сервлетов для обработки исключений и ошибок с указанием их в дескрипторе развертывания:\n\n```xml\n<error-page>\n    <error-code>404</error-code>\n    <location>/AppExceptionHandler</location>\n</error-page>\n\n<error-page>\n    <exception-type>javax.servlet.ServletException</exception-type>\n    <location>/AppExceptionHandler</location>\n</error-page>\n```\n\nОсновная задача таких сервлетов - обработать ошибку/исключение и сформировать понятный ответ пользователю. Например, предоставить ссылку на главную страницу или же описание ошибки.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что представляет собой `ServletConfig`?\nИнтерфейс `javax.servlet.ServletConfig` используется для передачи сервлету конфигурационной информации. Каждый сервлет имеет свой собственный экземпляр объекта `ServletConfig`, создаваемый контейнером сервлетов.\n\nДля установки параметров конфигурации используются параметры `init-param` в `web.xml`:\n\n```xml\n<servlet>\n    <servlet-name>ExampleServlet</servlet-name>\n    <servlet-class>xyz.company.ExampleServlet</servlet-class>\n    <init-param>\n        <param-name>exampleParameter</param-name>\n        <param-value>parameterValue</param-value>\n    </init-param>\n</servlet>\n```\n\nили аннотации `@WebInitParam`:\n\n```java\n@WebServlet(\n    urlPatterns = \"/example\",\n    initParams = {\n        @WebInitParam(name = \"exampleParameter\", value = \"parameterValue\")\n    }\n)\npublic class ExampleServlet extends HttpServlet {\n    //...\n}\n```\n\nДля получения `ServletConfig` сервлета используется метод `getServletConfig()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что представляет собой `ServletContext`?\nУникальный (в рамках веб-приложения) объект `ServletContext` реализует интерфейс `javax.servlet.ServletContext` и предоставляет сервлетам доступ к параметрам этого веб-приложения.  Для предоставления доступа используется элемент `<context-param>` в `web.xml`:\n\n```xml\n<web-app>\n    ...\n    <context-param>\n        <param-name>exampleParameter</param-name>\n        <param-value>parameterValue</param-value>\n    </context-param>\n    ...\n</web-app>\n```\n\nОбъект `ServletContext` можно получить с помощью метода `getServletContext()` у интерфейса `ServletConfig`. Контейнеры сервлетов так же могут предоставлять контекстные объекты, уникальные для группы сервлетов. Каждая из групп будет связана со своим набором URL-путей хоста. В спецификации Servlet 3 `ServletContext` был расширен и теперь предоставляет возможности программного добавления слушателей и фильтров в приложение. Так же у этого интерфейса имеется множество полезных методов таких как \t`getServerInfo()`, `getMimeType()`, `getResourceAsStream()` и т.д.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n\n## В чем отличия `ServletContext` и `ServletConfig`?\n+ `ServletConfig` уникален для сервлета, а `ServletContext` - для приложения;\n+ `ServletConfig` используется для предоставления параметров инициализации конкретному сервлету, а `ServletContext` для предоставления параметров инициализации для всех сервлетов приложения;\n+ для `ServletConfig` возможности модифицировать атрибуты отсутствуют, атрибуты в объекте `ServletContext` можно изменять.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Для чего нужен интерфейс `ServletResponse`?\nИнтерфейс `ServletResponse` используется для отправки данных клиенту. Все методы данного инструмента служат именно этой цели:\n\n+ `String getCharacterEncoding()` - возвращает MIME тип кодировки (к примеру - UTF8), в которой будет выдаваться информация;\n+ `void setLocale(Locale locale)`/`Locale getLocale()` - указывают на язык используемый в документе;\n+ `ServletOutputStream getOutputStream()`/`PrintWriter getWriter()` - возвращают потоки вывода данных;\n+ `void setContentLength(int len)` - устанавливает значение поля HTTP заголовка _Content-Length_;\n+ `void setContentType(String type)` - устанавливает значение поля HTTP заголовка _Content-Type_.\n+ `void reset()` - позволяет сбросить HTTP заголовок к значениям по-умолчанию, если он ещё не был отправлен\n+ и др.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Для чего нужен интерфейс `ServletRequest`?\nИнтерфейс `ServletRequest` используется для получения параметров соединения, запроса, а также заголовков, входящего потока данных и т.д.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое `Request Dispatcher`?\nИнтерфейс `RequestDispatcher` используется для передачи запроса другому ресурсу, при этом существует возможность добавления данных, полученных из этого ресурса к собственному ответу сервлета. Так же этот интерфейс используется для внутренней коммуникации между сервлетами в одном контексте.\n\nВ интерфейсе объявлено два метода:\n\n+ `void forward(ServletRequest var1, ServletResponse var2)` — передает запрос из сервлета к другому ресурсу (сервлету, JSP или HTML файлу) на сервере.\n+ `void include(ServletRequest var1, ServletResponse var2)` — включает контент ресурса (сервлет, JSP или HTML страница) в ответ.\n\nДоступ к интерфейсу можно получить с помощью метода интерфейса `ServletContext` - `RequestDispatcher getRequestDispatcher(String path)`, где путь начинающийся с `/`, интерпретируется относительно текущего корневого пути контекста.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как из одного сервлета вызвать другой сервлет?\nДля вызова сервлета из того же приложения необходимо использовать механизм внутренней коммуникации сервлетов (_inter-servlet communication mechanisms_) через вызовы методов `RequestDispatcher`: \n\n+ `forward()` - передаёт выполнение запроса в другой сервлет;\n+ `include()` - предоставляет возможность включить результат работы другого сервлета в возвращаемый ответ.\n\nЕсли необходимо вызывать сервлет принадлежащий другому приложению, то использовать `RequestDispatcher` уже не получится, т.к. он определен только для текущего приложения. Для подобных целей необходимо использовать метод `ServletResponse` - `sendRedirect()` которому предоставляется полный URL другого сервлета. Для передачи данных между сервлетами можно использовать `cookies`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Чем отличается `sendRedirect()` от `forward()`?\n__`forward()`__:\n\n+ Выполняется на стороне сервера;\n+ Запрос перенаправляется на другой ресурс в пределах того же сервера;\n+ Не зависит от протокола клиентского запроса, так как обеспечивается контейнером сервлетов;\n+ Нельзя применять для внедрения сервлета в другой контекст;\n+ Клиент не знает о фактически обрабатываемом ресурсе и URL в строке остается прежним;\n+ Выполняется быстрее метода `sendRedirect()`;\n+ Определён в интерфейсе `RequestDispatcher`.\n\n__`sendRedirect()`__:\n\n+ Выполняется на стороне клиента;\n+ Клиенту возвращается ответ `302 (redirect)` и запрос перенаправляется на другой сервер;\n+ Может использоваться только с клиентами HTTP;\n+ Разрешается применять для внедрения сервлета в другой контекст;\n+ URL адрес изменяется на адрес нового ресурса;\n+ Медленнее `forward()` т.к. требует создания нового запроса;\n+ Определён в интерфейсе `HttpServletResponse`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Для чего используются атрибуты сервлетов и как происходит работа с ними?\nАтрибуты сервлетов используются для внутренней коммуникации сервлетов.\n\nВ веб-приложении существует возможность работы с атрибутами используя методы `setAttribute()`, `getAttribute()`, `removeAttribute()`, `getAttributeNames()`, которые предоставлены интерфейсами `ServletRequest`, `HttpSession` и `ServletContext` (для областей видимости _request_, _session_, _context_ соответственно).\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Каким образом можно допустить в сервлете deadlock?\nМожно получить блокировку, например, допустив циклические вызовы метода `doPost()` в методе `doGet()` и метода `doGet()` в методе `doPost()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как получить реальное расположение сервлета на сервере?\nРеальный путь к расположению сервлета на сервере можно получить из объекта `ServletContext`: \n\n`getServletContext().getRealPath(request.getServletPath())`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как получить информацию о сервере из сервлета?\nИнформацию о сервере можно получить из объекта `ServletContext`: \n\n`getServletContext().getServerInfo()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как получить IP адрес клиента на сервере?\nIP адрес клиента можно получить вызвав `request.getRemoteAddr()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие классы-обертки для сервлетов вы знаете?\nСобственные обработчики `ServletRequest` и `ServletResponse` можно реализовать, добавив новые или переопределив существующие методы у классов-обёрток `ServletRequestWrapper` (`HttpServletRequestWrapper`) и `ServletResponseWrapper` (`HttpServletRequestWrapper`).\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## В чем отличия `GenericServlet` и `HttpServlet`?\nАбстрактный класс `GenericServlet` — независимая от используемого протокола реализация интерфейса `Servlet`, а абстрактный класс `HttpServlet` в свою очередь расширяет `GenericServlet` для протокола HTTP..\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Почему `HttpServlet` класс объявлен как абстрактный?\nКласс `HTTPServlet` предоставляет лишь общую реализацию сервлета для HTTP протокола. Реализация ключевых методов `doGet()` и `doPost()`, содержащих основную бизнес-логику перекладывается на разработчика и по умолчанию возвращает `HTTP 405 Method Not Implemented error`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие основные методы присутствуют в классе `HttpServlet`?\n+ `doGet()` - для обработки HTTP запросов `GET`;\n+ `doPost()` - для обработки HTTP запросов `POST`;\n+ `doPut()` - для обработки HTTP запросов `PUT`;\n+ `doDelete()` - для обработки HTTP запросов `DELETE`;\n+ `doHead()` - для обработки HTTP запросов `HEAD`;\n+ `doOptions()` - для обработки HTTP запросов `OPTIONS`;\n+ `doTrace()` - для обработки HTTP запросов `TRACE`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Стоит ли волноваться о многопоточной безопасности работая с сервлетами?\nМетоды `init()` и `destroy()` вызываются один раз за жизненный цикл сервлета — поэтому по поводу них беспокоиться не стоит. \n\nМетоды `doGet()`, `doPost()`, `service()` вызываются на каждый запрос клиента и т.к. сервлеты используют многопоточность, то здесь задумываться о потокобезопасной работе обязательно. При этом правила использования многопоточности остаются теми же: локальные переменные этих методов будут созданы отдельно для каждого потока, а при использовании глобальных разделяемых ресурсов необходимо использовать синхронизацию или другие приёмы многопоточного программирования.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какой метод HTTP не является неизменяемым?\nHTTP метод называется неизменяемым, если он на один и тот же запрос всегда возвращает одинаковый результат. HTTP методы `GET`, `PUT`, `DELETE`, `HEAD` и `OPTIONS` являются неизменяемыми, поэтому необходимо реализовывать приложение так, чтобы эти методы возвращали одинаковый результат постоянно. К изменяемым методам относится метод `POST`, который и используется для реализации чего-либо, что изменяется при каждом запросе.\n\nК примеру, для доступа к статической HTML странице используется метод `GET`, т.к. он всегда возвращает одинаковый результат. При необходимости сохранять какую-либо информацию, например в базе данных, нужно использовать `POST` метод.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие есть методы отправки данных с клиента на сервер?\n+ `GET` - используется для запроса содержимого указанного ресурса, изображения или гипертекстового документа. Вместе с запросом могут передаваться дополнительные параметры как часть URI, значения могут выбираться из полей формы или передаваться непосредственно через URL. При этом запросы кэшируются и имеют ограничения на размер. Этот метод является основным методом взаимодействия браузера клиента и веб-сервера. \n+ `POST` - используется для передачи пользовательских данных в содержимом HTTP-запроса на сервер. Пользовательские данные упакованы в тело запроса согласно полю заголовка Content-Type и/или включены в URI запроса. При использовании метода POST под URI подразумевается ресурс, который будет обрабатывать запрос. \n\n[к оглавлению](#servlets-jsp-jstl)\n\n## В чем разница между методами `GET` и `POST`?\n+ `GET` передает данные серверу используя URL, тогда как `POST` передает данные, используя тело HTTP запроса. Длина URL ограничена 1024 символами, это и будет верхним ограничением для данных, которые можно отослать через `GET`. `POST` может отправлять гораздо большие объемы данных. Лимит устанавливается web-server и составляет обычно около 2 Mb.\n+ Передача данных методом `POST` более безопасна, чем методом `GET`, так как секретные данные (например пароль) не отображаются напрямую в web-клиенте пользователя, в отличии от URL, который виден почти всегда. Иногда это преимущество превращается в недостаток - вы не сможете послать данные за кого-то другого.\n+ `GET`метод является неизменяемым, тогда как `POST` — изменяемый.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## В чем разница между `PrintWriter` и `ServletOutputStream`?\n`PrintWriter` — класс для работы с символьным потоком, экземпляр которого можно получить через метод `ServletResponse` `getWriter()`;\n\n`ServletOutputStream` — класс для работы байтовым потоком. Для получения его экземпляра используется метод `ServletResponse` `getOutputStream()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Можно ли одновременно использовать в сервлете `PrintWriter` и `ServletOutputStream`?\nТак сделать не получится, т.к. при попытке одновременного вызова `getWriter()` и `getOutputStream()` будет выброшено исключение `java.lang.IllegalStateException` с сообщением, что уже был вызван другой метод.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Расскажите об интерфейсе `SingleThreadModel`.\nИнтерфейс `SingleThreadModel` является маркерным - в нем не объявлен ни один метод, однако, если сервлет реализует этот интерфейс, то метод `service()` этого сервлета гарантированно не будет одновременно выполняться в двух потоках. Контейнер сервлетов либо синхронизирует обращения к единственному экземпляру, либо обеспечивает поддержку пула экземпляров и перенаправление запроса свободному сервлету.\nДругими словами, контейнер гарантирует отсутствие конфликтов при одновременном обращении к переменным или методам экземпляра сервлета. Однако существуют также и другие разделяемые ресурсы, которые даже при использовании этого интерфейса, остаются всё так же доступны обработчикам запросов в других потоках. Т.о. пользы от использования этого интерфейса немного и в спецификации Servlet 2.4 он был объявлен `deprecated`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что означает _URL encoding_? Как это осуществить в Java?\n__URL Encoding__ — процесс преобразования данных в форму CGI (Common Gateway Interface), не содержащую пробелов и нестандартных символов, которые заменяются в процессе кодирования на специальные escape-символы. В Java для кодирования строки используется метод `java.net.URLEncoder.encode(String str, String unicode)`. Обратная операция декодирования возможна через использование метода `java.net.URLDecoder.decode(String str, String unicode)`. \n\n> `Hello мир!` преобразовывается в `Hello%20%D0%BC%D0%B8%D1%80!`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие различные методы управления сессией в сервлетах вы знаете?\nПри посещении клиентом Web-ресурса и выполнении вариантов запросов, контекстная информация о клиенте не хранится. В протоколе HTTP нет возможностей для сохранения и изменения информации о предыдущих посещениях клиента. Сеанс (сессия) – соединение между клиентом и сервером, устанавливаемое на определенное время, за которое клиент может отправить на сервер сколько угодно запросов. Сеанс устанавливается непосредственно между клиентом и Web-сервером. Каждый клиент устанавливает с сервером свой собственный сеанс. Сеансы используются для обеспечения хранения данных во время нескольких запросов Web-страницы или на обработку информации, введенной в пользовательскую форму в результате нескольких HTTP-соединений (например, клиент совершает несколько покупок в интернет-магазине; студент отвечает на несколько тестов в системе дистанционного обучения).\n\nСуществует несколько способов обеспечения уникального идентификатора сессии:\n\n+ __User Authentication__ – Предоставление учетных данных самим пользователем в момент аутентификации. Переданная таким образом информация в дальнейшем используется для поддержания сеанса. Это метод не будет работать, если пользователь вошёл в систему одновременно из нескольких мест.\n+ __HTML Hidden Field__ – Присвоение уникального значения скрытому полю HTML страницы, в момент когда пользователь начинает сеанс. Этот метод не может быть использован со ссылками, потому что нуждается в подтверждении формы со скрытым полем каждый раз во время формирования запроса. Кроме того, это не безопасно, т.к. существует возможность простой подмены такого идентификатора.\n+ __URL Rewriting__ – Добавление идентификатора сеанса как параметра URL. Достаточно утомительная операция, потому что требует постоянного отслеживания этого идентификатора при каждом запросе или ответе.\n+ __Cookies__ – Использование небольших фрагментов данных, отправленных web-сервером и хранимых на устройстве пользователя. Данный метод не будет работать, если клиент отключает использование cookies.\n+ __Session Management API__ – Использование специального API для отслеживания сеанса, построенный на основе и на методах, описанных выше и который решает частные проблемы перечисленных способов:\n    + Чаще всего недостаточно просто отслеживать сессию, необходимо ещё и сохранять какие-либо дополнительные данные о ней, которые могут потребоваться при обработке последующих запросов. Осуществление такого поведения требует много дополнительных усилий.\n    + Все вышеперечисленные методы не являются универсальными: для каждого из них можно подобрать конкретный сценарий, при котором они не будут работать.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _cookies_?\n__Сookies («куки»)__ — небольшой фрагмент данных, отправленный web-сервером и хранимый на устройстве пользователя. Всякий раз при попытке открыть страницу сайта, web-клиент пересылает соответствующие этому сайту cookies web-серверу в составе HTTP-запроса. Применяется для сохранения данных на стороне пользователя и на практике обычно используется для:\n\n+ аутентификации пользователя;\n+ хранения персональных предпочтений и настроек пользователя;\n+ отслеживания состояния сеанса доступа пользователя;\n+ ведения разнообразной статистики.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие методы для работы с cookies предусмотрены в сервлетах?\nServlet API предоставляет поддержку cookies через класс `javax.servlet.http.Cookie`:\n\n+ Для получения массива cookies из запроса необходимо воспользоваться методом `HttpServletRequest.getCookies()`. Методов для добавления cookies в `HttpServletRequest` не предусмотрено.\n+ Для добавления cookie в ответ используется `HttpServletResponse.addCookie(Cookie c)`. Метода получения cookies в `HttpServletResponse` отсутствует.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _URL Rewriting_?\n__URL Rewriting__ - специальная перезапись (перекодирование) оригинального URL. Данный механизм может использоваться для управления сессией в сервлетах, когда _cookies_ отключены.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Зачем нужны и чем отличаются методы `encodeURL()` и `encodeRedirectURL()`?\n`HttpServletResponse.encodeURL()` предоставляет способ преобразования URL в HTML гиперссылку с преобразованием спецсимволов и пробелов, а так же добавления _session id_ к URL. Такое поведение аналогично `java.net.URLEncoder.encode()`, но с добавлением дополнительного параметра `jsessionid` в конец URL.\n\nМетод `HttpServletResponse.encodeRedirectURL()` преобразует URL для последующего использования в методе `sendRedirect()`. \n\nТаким образом для HTML гиперссылок при _URL rewriting_ необходимо использовать `encodeURL()`, а для URL при перенаправлении - `encodeRedirectUrl()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _«сессия»_?\n__Сессия__  - это сеанс связи между клиентом и сервером, устанавливаемый на определенное время. Сеанс устанавливается непосредственно между клиентом и веб-сервером в момент получения первого запроса к веб-приложению. Каждый клиент устанавливает с сервером свой собственный сеанс, который сохраняется до окончания работы с приложением.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как уведомить объект в сессии, что сессия недействительна или закончилась?\nЧтобы быть уверенным в том, что объект будет оповещён о прекращении сессии, нужно реализовать интерфейс `javax.servlet.http.HttpSessionBindingListener`. Два метода этого интерфейса: `valueBound()` и `valueUnbound()` используются при добавлении объекта в качестве атрибута к сессии и при уничтожении сессии соответственно.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какой существует эффективный способ удостоверится, что все сервлеты доступны только для пользователя с верной сессией?\nСервлет фильтры используются для перехвата всех запросов между контейнером сервлетов и сервлетом. Поэтому логично использовать соответствующий фильтр для проверки необходимой информации (например валидности сессии) в запросе.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как мы можем обеспечить _transport layer security_ для нашего веб приложения?\nДля обеспечения _transport layer security_ необходимо настроить поддержку SSL сервлет контейнера. Как это сделать зависит от конкретной реализации сервлет-контейнера.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как организовать подключение к базе данных, обеспечить журналирование в сервлете?\nПри работе с большим количеством подключений к базе данных рекомендуется инициализировать их в _servlet context listener_, а также установить в качестве атрибута контекста для возможности использования другими сервлетами. \n\nЖурналирование подключается к сервлету стандартным для логгера способом (например для _log4j_ это может быть property-файл или XML-конфигурация) , а далее эта информация используется при настройке соответствующего _context listener_.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие основные особенности появились в спецификации _Servlet 3_?\n+ __Servlet Annotations__. До Servlet 3 вся конфигурация содержалась в `web.xml`, что приводило к ошибкам и неудобству при работе с большим количестве сервлетов. Примеры аннотаций: `@WebServlet`, `@WebInitParam`, `@WebFilter`, `@WebListener`.\n+ __Web Fragments__. Одностраничное веб приложение может содержать множество модулей: все модули прописываются в `fragment.xml` в папке `META-INF\\`. Это позволяет разделять веб приложение на отдельные модули, собранные как .jar-файлы в отдельной `lib\\` директории.\n+ __Динамическое добавление веб компонентов__. Появилась возможность программно добавлять фильтры и слушатели, используя `ServletContext` объект. Для этого применяются методы `addServlet()`, `addFilter()`, `addListener()`. Используя это нововведение стало доступным построение динамической системы, в которой необходимый объект будет создан и вызван только по необходимости.\n+ __Асинхронное выполнение__. Поддержка асинхронной обработки позволяет передать выполнение запроса в другой поток без удержания всего сервера занятым.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие способы аутентификации доступны сервлету?\nСпецификация сервлетов определяет четыре типа проверки подлинности:\n\n+ __HTTP Basic Authentication__ - `BASIC`. При доступе к закрытым ресурсам появится окно, которое попросит ввести данные для аутентификации.\n+ __Form Based Login__ - `FORM`. Используется собственная html форма:\n+ __HTTP Digest Authentication__ - `DIGEST`. Цифровая аутентификация с шифрованием.\n+ __HTTPS Authentication__ - `CLIENT-CERT`. Аутентификация с помощью клиентского сертификата.\n\n```xml\n<login-config>\n    <auth-method>FORM</auth-method>\n    <form-login-config>\n        <form-login-page>/login.html</form-login-page>\n        <form-error-page>/error.html</form-error-page>\n    </form-login-config>\n</login-config>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _Java Server Pages (JSP)_?\n__JSP (JavaServer Pages)__ — платформонезависимая переносимая и легко расширяемая технология разработки веб-приложений, позволяющая веб-разработчикам создавать содержимое, которое имеет как статические, так и динамические компоненты. Страница JSP содержит текст двух типов: статические исходные данные, которые могут быть оформлены в одном из текстовых форматов HTML, SVG, WML, или XML, и _JSP-элементы_, которые конструируют динамическое содержимое. Кроме этого могут использоваться _библиотеки JSP-тегов_, а также _EL (Expression Language)_, для внедрения Java-кода в статичное содержимое JSP-страниц.\n\nКод JSP-страницы транслируется в Java-код сервлета с помощью компилятора JSP-страниц _Jasper_, и затем компилируется в байт-код JVM. \n\nJSP-страницы загружаются на сервере и управляются Java EE Web Application. Обычно такие страницы упакованы в файловые архивы .war и .ear.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Зачем нужен JSP?\nJSP расширяет технологию сервлетов обеспечивая возможность создания динамических страницы с HTML подобным синтаксисом.\n\nХотя создание представлений поддерживается и в сервлетах, но большая часть любой веб-страницы является статической, поэтому код сервлета в таком случае получается чересчур перегруженным, замусоренным и поэтому при его написании легко допустить ошибку. \n\nЕще одним преимуществом JSP является горячее развертывание - возможность заменить одну страницу на другую непосредственно в контейнере без необходимости перекомпилировать весь проект или перезапускать сервер.\n\nОднако рекомендуется избегать написания серьёзной бизнес-логики в JSP и использовать страницу только в качестве представления.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Опишите, как обрабатываются JSP страницы, начиная от запроса к серверу, заканчивая ответом пользователю.\nКогда пользователь переходит по ссылке на страницу `page.jsp`, он отправляет http-запрос на сервер `GET /page.jsp`. Затем, на основе этого запроса и текста самой страницы, сервер генерирует java-класс, компилирует его и выполняет полученный сервлет, формирующий ответ пользователю в виде представления этой страницы, который сервер и перенаправляет обратно пользователю.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Расскажите об этапах (фазах) жизненного цикла JSP.\nЕсли посмотреть код внутри созданной JSP страницы, то он будет выглядеть как HTML и не будет похож на java класс. Конвертацией JSP страниц в HTML код занимается контейнер, который также создает и сервлет для использования в веб приложении. \n\nЖизненный цикл JSP состоит из нескольких фаз, которыми руководит JSP контейнер:\n\n+ __Translation__ – проверка и парсинг кода JSP страницы для создания кода сервлета. \n+ __Compilation__ – компиляция исходного кода сервлета.\n+ __Class Loading__ – загрузка скомпилированного класса в память.\n+ __Instantiation__ – внедрение конструктора без параметра загруженного класса для инициализации в памяти.\n+ __Initialization__ – вызов `init()` метода объекта JSP класса и инициализация конфигурации сервлета с первоначальными параметрами, которые указаны в дескрипторе развертывания (`web.xml`). После этой фазы JSP способен обрабатывать запросы клиентов. Обычно эти фазы происходят после первого запроса клиента (т.е. ленивая загрузка), но можно настроить загрузку и инициализацию JSP на старте приложения по аналогии с сервлетами.\n+ __Request Processing__ – длительный жизненный цикл обработки запросов клиента JSP страницей. Обработка является многопоточной и аналогична сервлетам — для каждого запроса создается новый поток, объекты `ServletRequest` и `ServletResponse`, происходит выполнение сервис методов.\n+ __Destroy__ – последняя фаза жизненного цикла JSP, на которой её класс удаляется из памяти. Обычно это происходит при выключении сервера или выгрузке приложения.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Расскажите о методах жизненного цикла JSP.\nКонтейнер сервлетов (например, Tomcat, GlassFish) создает из JSP-страницы класс сервлета, наследующего свойства интерфейса `javax.servlet.jsp.HttpJspBase` и включающего следующие методы:\n\n+ `jspInit()` — метод объявлен в JSP странице и реализуется с помощью контейнера. Этот метод вызывается один раз в жизненном цикле JSP для того, чтобы инициализировать конфигурационные параметры указанные в дескрипторе развертывания. Этот метод можно переопределить с помощью определения элемента _JSP scripting_ и указания необходимых параметров для инициализации;\n+ `_jspService()` — метод переопределяется контейнером автоматически и соответствует непосредственно коду JSP, описанному на странице. Этот метод определен в интерфейсе `HttpJspPage`, его имя начинается с нижнего подчеркивания и он отличается от других методов жизненного цикла тем, что его невозможно переопределить;\n+ `jspDestroy()` — метод вызывается контейнером для удаления объекта из памяти (на последней фазе жизненного цикла JSP - Destroy). Метод вызывается только один раз и доступен для переопределения, предоставляя возможность освободить ресурсы, которые были созданы в `jspInit()`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие методы жизненного цикла JSP могут быть переопределены?\nВозможно переопределить лишь `jspInit()` и `jspDestroy()` методы.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как можно предотвратить прямой доступ к JSP странице из браузера?\nПрямой доступ к директории `/WEB-INF/` из веб-приложения отсутствует. Поэтому JSP-страницы можно расположить внутри этой папки и тем самым запретить доступ к странице из браузера. Однако, по аналогии с описанием сервлетов, будет необходимо настроить дескриптор развертывания:\n\n```xml\n<servlet>\n    <servlet-name>Example</servlet-name>\n    <jsp-file>/WEB-INF/example.jsp</jsp-file>\n    <init-param>\n        <param-name>exampleParameter</param-name>\n        <param-value>parameterValue</param-value>\n    </init-param>\n</servlet>\n    \n<servlet-mapping>\n    <servlet-name>Example</servlet-name>\n    <url-pattern>/example.jsp</url-pattern>\n</servlet-mapping>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какая разница между _динамическим_ и _статическим_ содержимым JSP?\nСтатическое содержимое JSP (HTML, код JavaScript, изображения и т.д.) не изменяется в процессе работы веб приложения. \n\nДинамические ресурсы созданы для того, чтобы отображать свое содержимое в зависимости от пользовательских действий. Обычно они представлены в виде выражений EL (Expression Language), библиотек JSP-тегов и пр.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как закомментировать код в JSP?\n+ `<!—- HTML комментарий; отображается на странице JSP —->` такие комментарии будут видны клиенту при просмотре кода страницы.\n+ `<%—- JSP комментарий; не отображается на странице JSP —-%>` такие комментарии описываются в созданном сервлете и не посылаются клиенту. Для любых комментариев по коду или отладочной информации необходимо использовать именно такой тип комментариев.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие существуют основные типы тегов JSP?\n+ _Выражение JSP_: `<%= expression %>` - выражение, которое будет обработано с перенаправлением результата на вывод;\n+ _Скриплет JSP_: `<% code %>` - код, добавляемый в метод `service()`.\n+ _Объявление JSP_: `<%! code %>` - код, добавляемый в тело класса сервлета вне метода `service()`.\n+ _Директива JSP page_: `<%@ page att=\"value\" %>` - директивы для контейнера сервлетов с информацией о параметрах.\n+ _Директива JSP include_: `<%@ include file=\"url\" %>` - файл в локальной системе, подключаемый при трансляции JSP в сервлет.\n+ _Комментарий JSP_: `<%-- comment --%>` - комментарий; игнорируется при трансляции JSP страницы в сервлет.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что вы знаете о действиях JSP (_Action tag_ и _JSP Action Elements_).\n__Action tag__ и __JSP Action Elements__ предоставляют методы работы с Java Beans, подключения ресурсов, проброса запросов и создания динамических XML элементов. Такие элементы всегда начинаются с записи `jsp:` и используются непосредственно внутри страницы JSP без необходимости подключения сторонних библиотек или дополнительных настроек.\n\nНаиболее часто используемыми JSP Action Elements являются:\n\n+ `jsp:include`: `<jsp:include page=\"относительный URL\" flush=\"true\"/>` - подключить файл при запросе страницы. Если необходимо, чтобы файл подключался в процессе трансляции страницы, то используется директива `page` совместно с атрибутом `include`;\n+ `jsp:useBean`: `<jsp:useBean att=значение*/>` или `<jsp:useBean att=значение*>...</jsp:useBean>` - найти или создать Java bean;\n+ `jsp:setProperty`: `<jsp:setProperty att=значение*/>` - установить свойства Java bean, или явно, или указанием на соответствующее значение, передаваемое при запросе;\n+ `jsp:forward`: `<jsp:forward page=\"относительный URL\"/>` - передать запрос другой странице;\n+ `jsp:plugin`: `<jsp:plugin attribute=\"значение\"*>...</jsp:plugin>` - сгенерировать (в зависимости от типа браузера) тэги `OBJECT` или `EMBED` для апплета, использующего технологию Java Plugin.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Взаимодействие _JSP - сервлет - JSP_.\n_«JSP - сервлет - JSP»_ архитектура построения приложений носит название _MVC (Model/View/Controller)_:\n\n+ _Model_ - классы данных и бизнес-логики;\n\n+ _View_ - страницы JSP;\n\n+ _Controller_ - сервлеты.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие области видимости переменных существуют в JSP?\nОбласть видимости объектов определяется тем контекстом, в который помещается данный объект. В зависимости от той или иной области действия так же определяется время существования объекта. \n\nВ JSP предусмотрены следующие области действия переменных (объектов):\n\n+ `request` область действия запроса - объект будет доступен на текущей JSP странице, странице пересылки (при использовании `jsp:forward`) или на включаемой странице (при использовании `jsp:include`);\n+ `session` область действия сессии - объект будет помещен в сеанс пользователя, будет доступен на всех JSP страницах и будет существовать пока существует сессия пользователя, или он не будет из нее принудительно удален.\n+ `application` область действия приложения - объект будет доступен для всех пользователей на всех JSP страницах и будет существовать на протяжении всей работы приложения или пока не будет удален принудительно и контекста приложения.\n+ `page` область действия страницы - объект будет доступен только на той странице, где он определен. На включаемых (`jsp:include`) и переадресуемых (`jsp:forward`) страницах данный объект уже не будет доступен.\n\nТаким образом, чтобы объект был доступен всем JSP страницам, необходимо указать область видимости `application` или `session`, в зависимости от того требуется ли доступ к объекту всем пользователям или только текущему.\n\nДля указания требуемой области действия при определении объекта на JSP странице используется атрибут scope тега `jsp:useBean`:\n\n```\n<jsp:useBean id=\"myBean\" class=\"ru.javacore.MyBean\" scope=\"session\"/>\n```\n\nЕсли не указывать атрибут `scope`, то по умолчанию задается область видимости страницы `page`\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие неявные, внутренние объекты и методы есть на JSP странице?\n__JSP implicit objects (неявные объекты)__ создаются контейнером при конвертации JSP страницы в код сервлета для помощи разработчикам. Эти объекты можно использовать напрямую в скриптлетах для передачи информации в сервис методы, однако мы не можем использовать неявные объекты в JSP Declaration, т.к. такой код пойдет на уровень класса.\n\nСуществует 9 видов неявных объектов, которые можно использовать прямо на JSP странице. Семь из них объявлены как локальные переменные в начале `_jspService()` метода, а два оставшихся могут быть использованы как аргументы метода `_jspService()`.\n\n+ `out Object` : \n\n```\n<strong>Current Time is</strong>: <% out.print(new Date()); %><br>\n```\n\n+ `request Object` : \n\n```\n<strong>Request User-Agent</strong>: <%=request.getHeader(\"User-Agent\") %><br>\n```\n\n+ `response Object` : \n\n```\n<strong>Response</strong>: <%response.addCookie(new Cookie(\"Test\",\"Value\")); %>\n```\n\n+ `config Object` : \n\n```\n<strong>User init param value</strong>: <%=config.getInitParameter(\"User\") %><br>\n```\n\n+ `application Object` : \n\n```\n<strong>User context param value</strong>: <%=application.getInitParameter(\"User\") %><br>\n``` \n\n+ `session Object` : \n\n```\n<strong>User Session ID</strong>: <%=session.getId() %><br>\n```\n\n+ `pageContext Object` :\n\n```\n<% pageContext.setAttribute(\"Test\", \"Test Value\"); %> \n<strong>PageContext attribute</strong>: {Name=\"Test\",Value=\"<%=pageContext.getAttribute(\"Test\") %>\"}<br>\n```\n\n+ `page Object` : \n\n```\n<strong>Generated Servlet Name</strong>: <%=page.getClass().getName() %>\n```\n\n+ `exception Object` : \n\n``` \n<strong>Exception occured</strong>: <%=exception %><br>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие неявные объекты не доступны в обычной JSP странице?\nНеявный объект исключений JSP недоступен в обычных JSP страницах и используется на страницах ошибок JSP (_errorpage_) только для того, чтобы перехватить исключение, выброшенное JSP страницей и далее предоставить какую-либо полезную информацию клиенту.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что вы знаете о `PageContext` и какие преимущества его использования?\nНеявный объект JSP - экземпляр класса `javax.servlet.jsp.PageContext` предоставляет доступ ко всем пространствам имён, ассоциированным с JSP-страницей, а также к различным её атрибутам.\nОстальные неявные объекты добавляются к `pageContext` автоматически.\n\nКласс `PageContext` это абстрактный класс, а его экземпляр можно получить через вызов метода `JspFactory.getPageContext()`, и освободить через вызов метода `JspFactory.releasePageContext()`.\n\n`PageContext` обладает следующим набором особенностей и возможностей:\n\n+ единый API для обслуживания пространств имён различных областей видимости;\n+ несколько удобных API для доступа к различным `public`-объектам;\n+ механизм получения `JspWriter` для вывода;\n+ механизм обслуживания использования сессии страницей;\n+ механизм экспонирования («показа») атрибутов директивы `page` среде скриптинга;\n+ механизмы направления или включения текущего запроса в другие компоненты приложения;\n+ механизм обработки процессов исключений на страницах ошибок _errorpage_;\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как сконфигурировать параметры инициализации для JSP?\nПараметры инициализации для JSP задаются в `web.xml` файле аналогично сервлетам - элементами `servlet` и `servlet-mapping`. Единственным отличием будет указание местонахождения JSP страницы:\n\n```xml\n<servlet>\n    <servlet-name>Example</servlet-name>\n    <jsp-file>/WEB-INF/example.jsp</jsp-file>\n    <init-param>\n        <param-name>exampleParameter</param-name>\n        <param-value>parameterValue</param-value>\n    </init-param>\n</servlet>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Почему не рекомендуется использовать скриплеты (скриптовые элементы) в JSP?\nJSP страницы используются в основном  для целей отображения представления (_view_), а вся бизнес-логика (_controller_) и модель (_model_) должны быть реализованы в сервлетах или классах-моделях. Обязанность JSP страницы - создание HTML ответа из переданных через атрибуты параметров. Большая часть JSP содержит HTML код, а для того, чтобы помочь верстальщикам понять JSP код страницы предоставляется функционал элементов _action_, _JSP EL_, _JSP Standart Tag Library_. Именно их и необходимо использовать вместо скриптлетов для создания моста между (JSP)HTML и (JSP)Java частями.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Можно ли определить класс внутри JSP страницы?\nОпределить класс внутри JSP страницы можно, но это считается плохой практикой:\n\n```java\n<%!\nprivate static class ExampleOne {\n  //...\n}\n%>\n\n<%\nprivate class ExampleTwo {\n  //...\n}\n%>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что вы знаете о Языке выражений JSP (JSP Expression Language – EL)?\n__JSP Expression Language (EL)__ — скриптовый язык выражений, который позволяет получить доступ к Java компонентам (JavaBeans) из JSP. Начиная с JSP 2.0 используется внутри JSP тегов для отделения Java кода от JSP для обеспечения лёгкого доступа к Java компонентам, уменьшая при этом количество кода Java в JSP-страницах, или даже полностью исключая его.\n\nРазвитие EL происходило с целью сделать его более простым для дизайнеров, которые имеют минимальные познания в языке программирования Java. До появления языка выражений, JSP имел несколько специальных тегов таких как скриптлеты (англ.), выражения и т. п. которые позволяли записывать Java код непосредственно на странице. С использованием языка выражений веб-дизайнер должен знать только то, как организовать вызов соответствующих java-методов.\n\nЯзык выражений JSP 2.0 включает:\n\n+ Создание и изменение переменных.\n+ Управление потоком выполнения программы: ветвление, выполнение различных типов итераций и т.д.\n+ Упрощенное обращение к встроенным JSP-объектам.\n+ Возможность создавать собственные функции.\n\nЯзык выражений используется внутри конструкции `${ ... }`. Подобная конструкция может размещаться либо отдельно, либо в правой части выражения установки атрибута тега.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какие типы EL операторов вы знаете?\nОператоры в EL поддерживают наиболее часто используемые манипуляции данными.\n\nТипы операторов:\n\n+ Стандартные операторы отношения: `==` (или `eq`), `!=` (или `neq`), `<` (или `lt`), `>` (или `gt`), `<=` (или `le`), `>=` (или `ge`).\n+ Арифметические операторы: `+`, `–`, `*`, `/` (или `div`), `%` (или `mod`).\n+ Логические операторы: `&&` (или `and`), `||` (или `or`), `!` (или `not`).\n+ Оператор `empty` – используется для проверки переменной на `null`, или «пустое значение», который зависит от типа проверяемого объекта. Например, нулевая длина для строки или нулевой размер для коллекции.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Назовите неявные, внутренние объекты JSP EL и их отличия от объектов JSP.\nЯзык выражений JSP предоставляет множество неявных объектов, которые можно использовать для получения атрибутов в различных областях видимости (scopes) и для значений параметров. Важно отметить, что они отличаются от неявных объектов JSP и содержат атрибуты в заданной области видимости. Наиболее часто использующийся implicit object в JSP EL и JSP page — это объект pageContext. Ниже представлена таблица неявных объектов JSP EL.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как отключить возможность использования EL в JSP?\nДля игнорирования выполнения языка выражений на странице существует два способа:\n\n+ использовать директиву `<%@ page isELIgnored = «true» %>`,\n+ настроить `web.xml` (лучше подходит для отключения EL сразу на нескольких страницах):\n\n```xml\n<jsp-config>\n    <jsp-property-group>\n        <url-pattern>*.jsp</url-pattern>\n        <el-ignored>true</el-ignored>\n    </jsp-property-group>\n</jsp-config>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как узнать тип HTTP метода используя JSP EL?\n`${pageContext.request.method}`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Что такое _JSTL (JSP Standard tag library)_?\n__JavaServer Pages Standard Tag Library, JSTL, Стандартная библиотека тегов JSP__ — расширение спецификации JSP (конечный результат _JSR 52_), добавляющее библиотеку JSP тегов для общих нужд, таких как разбор XML данных, условная обработка, создание циклов и поддержка интернационализации.\n\nJSTL является альтернативой такому виду встроенной в JSP логики, как _скриплеты_ (прямые вставки Java кода). Использование стандартизованного множества тегов предпочтительнее, поскольку получаемый код легче поддерживать и проще отделять бизнес-логику от логики отображения.\n\nДля использования JSTL тегов необходимо:\n\n+ подключить зависимости, например в `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>jstl</groupId>\n    <artifactId>jstl</artifactId>\n    <version>1.2</version>\n</dependency>\n<dependency>\n    <groupId>taglibs</groupId>\n    <artifactId>standard</artifactId>\n    <version>1.1.2</version>\n</dependency>\n```\n\n+ указать пространство имен основных тегов JSTL через указание на JSP странице код:\n\n```\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/sql\" prefix=\"sql\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/xml\" prefix=\"x\" %>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Из каких групп тегов состоит библиотека _JSTL_?\nГруппы тегов JSTL согласно их функциональности:\n\n+ _Core Tags_ предоставляют возможности итерации, обработки исключений, URL, _forward_, _redirect response_ и т.д.\n+ _Formatting Tags_ и _Localization Tags_ предоставляют возможности по форматированию чисел, дат и поддержки _i18n_ локализации и _resource bundles_.\n+ _SQL Tags_ – поддержка работы с базами данных.\n+ _XML Tags_ используются для работы с XML документами: парсинга, преобразования данных, выполнения выражений _XPath_ и т.д..\n+ _JSTL Functions Tags_ предоставляет набор функций, которые позволяют выполнять различные операции со строками и т.п. Например, по конкатенации или разбиению строк.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какая разница между `<c:set>` и `<jsp:useBean>`?\nОба тега создают и помещают экземпляры в заданную область видимости, но `<jsp:useBean>` только создаёт экземпляр конкретного типа, а `<c:set>`, создав экземпляр, позволяет дополнительно извлекать значение, например, из параметров запроса, сессии и т. д. \n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Чем отличается `<c:import>` от `<jsp:include>` и директивы `<%@include %>`?\nПо сравнению с action-тегом `<jsp:include>` и директивой `<%@include %>` тег `<c:import>` обеспечивает более совершенное включение динамических ресурсов, т.к. получает доступ к источнику, чтение информации из которого происходит непосредственно без буферизации и контент включается в исходную JSP построчно.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как можно расширить функциональность JSP?\n## Что вы знаете о написании пользовательских JSP тегов?\n## Приведите пример использования собственных тегов.\nJSP можно расширить с помощью создания собственных тегов с необходимой функциональностью, которые можно добавить в библиотеку тегов на страницу JSP указав необходимое пространство имен. \n\n> /WEB-INF/exampleTag.tld\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<taglib version=\"2.1\" xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_1.xsd\">\n    <tlib-version>1.0</tlib-version>\n    <short-name>example</short-name>\n    <uri>/WEB-INF/exampleTag</uri>\n    <tag>\n        <name>exampleTag</name>\n        <tag-class>xyz.company.ExampleTag</tag-class>\n        <body-content>empty</body-content>\n        <info>The example tag displays Hello World!</info>\n    </tag>\n</taglib>\n```\n\n> xyz.company.ExampleServlet.java\n\n```java\npackage xyz.company;\n\nimport java.io.IOException;\n\nimport javax.servlet.jsp.JspException;\nimport javax.servlet.jsp.tagext.TagSupport;\n\npublic class ExampleTag extends TagSupport{\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public int doStartTag() throws JspException {\n        try {\n            pageContext.getOut().print(\"Hello World!\");\n        } catch(IOException ioException) {\n            throw new JspException(\"Error: \" + ioException.getMessage());\n        }       \n        return SKIP_BODY;\n    }\n}\n```\n\n> exampleTag.jsp\n\n```\n<%@ taglib uri=\"/WEB-INF/exampleTag.tld\" prefix=\"example\"%>\n<%@ page session=\"false\" pageEncoding=\"UTF-8\"%>\n<html>\n<head>\n<title>Example Tag</title>\n</head>\n<body>\n    <h1>Example Tag</h1>\n    <p><example:exampleTage /><p>\n</body>\n</html>\n```\n\nТакже в пользовательских тегах существует возможность задать входные параметры. Например, существует необходимость отформатировать каким-либо стилем очень длинное число. Для этого можно использовать собственный тег по типу:\n\n`<mytags:formatNumber number=\"123456.789\" format=\"#,## #.00\"/>`\n\nИспользуя входные параметры, число должно быть преобразовано на JSP странице в таком виде `123,456.79` согласно шаблону. Т.к. JSTL не предоставляет такой функциональности, необходимо создать пользовательский тег для получения необходимого результата.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как сделать перенос строки в HTML средствами JSP?\nДля переноса строки можно использовать тег `c:out` и атрибут `escapeXml`, который отключает обработку HTML элементов. В этом случае браузер получит следующий код в виде строки и обработает элемент `<br>` как требуется:\n\n`<c:out value=\"<br> creates a new line in HTML\" escapeXml=\"true\"></c:out>`\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Почему не нужно конфигурировать стандартные JSP теги в `web.xml`?\nСтандартные теги JSP не конфигурируются в `web.xml`, потому что tld файлы уже находятся внутри каталога `/META-INF/` в jar файлах JSTL. \n\nКогда контейнер загружает веб-приложение и находит tld файлы в в jar файле в директории `/META-INF/`, то он автоматически настраивает их для непосредственного использования на JSP страницах. Остается только задать пространство имен на JSP странице.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как можно обработать ошибки JSP страниц?\nДля обработки исключений выброшенных на JSP странице достаточно лишь задать страницу ошибки JSP и при её создании установить значение _page directive attribute_ `isErrorPage` в значение `true`. Таким образом будет предоставлен доступ к неявным объектам исключений в JSP и появится возможность передавать собственные, более информативные сообщения об ошибках клиенту. При этом настройка дескриптора развертывания выглядит так:\n\n```xml\n<error-page>\n     <error-code>404</error-code>\n     <location>/error.jsp</location>\n</error-page>\n  \n<error-page>\n     <exception-type>java.lang.Throwable</exception-type>\n     <location>/error.jsp</location>\n</error-page>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как происходит обработка ошибок с помощью JSTL?\nДля перехвата и обработки исключений в служебных методах класса служат JSTL Core Tags `c:catch` и `c:if`. \n\n> Тег `c:catch` перехватывает исключение и обертывает его в переменную `exception`, доступную для обработки в теге `c:if`:\n```\n<c:catch var =\"exception\">\n   <% int x = 42/0;%>\n</c:catch>  \n<c:if test = \"${exception ne null}\">\n   <p>Exception is : ${exception} <br />\n   Exception Message: ${exception.message}</p>\n</c:if>\n```\n\nОбратите внимание что используется язык выражений JSP EL в теге `c:if`.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Как конфигурируется JSP в дескрипторе развертывания.\nДля настройки различных параметров JSP страниц используется элемент `jsp-config`, который отвечает за:\n\n+ управление элементами скриптлетов на странице;\n+ управления выполнением в языке выражений;\n+ определение шаблона URL для encoding;\n+ определение размера буфера, который используется для объектов на странице;\n+ обозначение групп ресурсов, соответствующих шаблону URL, которые должны быть обработаны как XML документ.\n\n```xml\n<jsp-config>\n    <taglib>\n        <taglib-uri>http://company.xyz/jsp/tlds/customtags</taglib-uri>\n        <taglib-location>/WEB-INF/exampleTag.tld</taglib-location>\n    </taglib>\n</jsp-config>\n```\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Можно ли использовать Javascript на JSP странице?\nДа, это возможно. Несмотря на то, что JSP это серверная технология, на выходе она всё равно создает `HTML` страницу, на которую можно добавлять Javascript и CSS.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Всегда ли создается объект сессии на JSP странице, можно ли отключить его создание?\nJsp-страница, по умолчанию, всегда создает сессию. Используя директиву `page` с атрибутом `session` можно изменить это поведение:\n\n`<%@ page session =\"false\" %>`\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Какая разница между `JSPWriter` и сервлетным `PrintWriter`?\n`PrintWriter` является объектом отвечающим за запись содержания ответа на запрос. `JspWriter` использует объект `PrintWriter` для буферизации. Когда буфер заполняется или сбрасывается, `JspWriter` использует объект `PrintWriter` для записи содержания в ответ.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n## Опишите общие практические принципы работы с JSP.\nХорошей практикой работы с технологией JSP является соблюдение следующих правил:\n\n+ Следует избегать использования элементов скриптлетов на странице. Если элементы _action_, _JSTL_, _JSP EL_ не удовлетворяют потребностям, то желательно написать собственный тег.\n+ Рекомендуется использовать разные виды комментариев: так JSP комментарии необходимы для уровня кода и отладки, т.к. они не будут показаны клиенту.\n+ Не стоит размещать какой-либо бизнес логики внутри JSP страницы. Страницы должны использоваться только для создания ответов клиенту.\n+ Для повышения производительности лучше отключать создание сессии на странице, когда это не требуется.\n+ Директивы `taglib`, `page` в начале JSP страницы улучшают читабельность кода.\n+ Следует правильно использовать директиву `include` и элемент `jsp:include action`. Первая используется для статических ресурсов, а второй для динамических ресурсов времени выполнения.\n+ Обработку исключений нужно производить с помощью страниц ошибок. Это помогает избегать запуска специальных служебных методов и может повысить производительность.\n+ Использующиеся CSS и JavaScript должны быть разнесены в разные файлы и подключаться в начале страницы.\n+ В большинстве случаев JSTL должно хватать для всех нужд. Если это не так, то в начале следует проанализировать логику своего приложения, и попробовать перенести выполнения кода в сервлет, а далее с помощью установки атрибутов использовать на JSP странице только результат.\n\n[к оглавлению](#servlets-jsp-jstl)\n\n# Источники\n+ [javastudy.ru](http://javastudy.ru/interview/jee-servlet-api-questions/)\n+ [java2ee.ru](http://www.java2ee.ru/servlets/)\n+ [Java-online](http://java-online.ru/jsp-questions.xhtml)\n+ [Codenet](http://www.codenet.ru/webmast/java/jsp.php)\n+ [JavaTalks Articles](https://articles.javatalks.ru/articles/24)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "sql.md",
          "type": "blob",
          "size": 40.7080078125,
          "content": "[Вопросы для собеседования](README.md)\n\n# SQL\n+ [Что такое _«SQL»_?](#Что-такое-sql)\n+ [Какие существуют операторы SQL?](#Какие-существуют-операторы-sql)\n+ [Что означает `NULL` в SQL?](#Что-означает-null-в-sql)\n+ [Что такое _«временная таблица»_? Для чего она используется?](#Что-такое-временная-таблица-Для-чего-она-используется)\n+ [Что такое _«представление» (view)_ и для чего оно применяется?](#Что-такое-представление-view-и-для-чего-оно-применяется)\n+ [Каков общий синтаксис оператора `SELECT`?](#Каков-общий-синтаксис-оператора-select)\n+ [Что такое `JOIN`?](#Что-такое-join)\n+ [Какие существуют типы `JOIN`?](#Какие-существуют-типы-join)\n+ [Что лучше использовать `JOIN` или подзапросы?](#Что-лучше-использовать-join-или-подзапросы)\n+ [Для чего используется оператор `HAVING`?](#Для-чего-используется-оператор-having)\n+ [В чем различие между операторами `HAVING` и `WHERE`?](#В-чем-различие-между-операторами-having-и-where)\n+ [Для чего используется оператор `ORDER BY`?](#Для-чего-используется-оператор-order-by)\n+ [Для чего используется оператор `GROUP BY`?](#Для-чего-используется-оператор-group-by)\n+ [Как `GROUP BY` обрабатывает значение `NULL`?](#Как-group-by-обрабатывает-значение-null)\n+ [В чем разница между операторами `GROUP BY` и `DISTINCT`?](#В-чем-разница-между-операторами-group-by-и-distinct)\n+ [Перечислите основные агрегатные функции.](#Перечислите-основные-агрегатные-функции)\n+ [В чем разница между `COUNT(*)` и `COUNT({column})`?](#В-чем-разница-между-count-и-countcolumn)\n+ [Что делает оператор `EXISTS`?](#Что-делает-оператор-exists)\n+ [Для чего используются операторы `IN`, `BETWEEN`, `LIKE`?](#Для-чего-используются-операторы-in-between-like)\n+ [Для чего применяется ключевое слово `UNION`?](#Для-чего-применяется-ключевое-слово-union)\n+ [Какие ограничения на целостность данных существуют в SQL?](#Какие-ограничения-на-целостность-данных-существуют-в-sql)\n+ [Какие отличия между ограничениями `PRIMARY` и `UNIQUE`?](#Какие-отличия-между-ограничениями-primary-и-unique)\n+ [Может ли значение в столбце, на который наложено ограничение `FOREIGN KEY`, равняться `NULL`?](#Может-ли-значение-в-столбце-на-который-наложено-ограничение-foreign-key-равняться-null)\n+ [Как создать индекс?](#Как-создать-индекс)\n+ [Что делает оператор `MERGE`?](#Что-делает-оператор-merge)\n+ [В чем отличие между операторами `DELETE` и `TRUNCATE`?](#В-чем-отличие-между-операторами-delete-и-truncate)\n+ [Что такое _«хранимая процедура»_?](#Что-такое-хранимая-процедура)\n+ [Что такое _«триггер»_?](#Что-такое-триггер)\n+ [Что такое _«курсор»_?](#Что-такое-курсор)\n+ [Опишите разницу типов данных `DATETIME` и `TIMESTAMP`.](#Опишите-разницу-типов-данных-datetime-и-timestamp)\n+ [Для каких числовых типов недопустимо использовать операции сложения/вычитания?](#Для-каких-числовых-типов-недопустимо-использовать-операции-сложениявычитания)\n+ [Какое назначение у операторов `PIVOT` и `UNPIVOT` в Transact-SQL?](#Какое-назначение-у-операторов-pivot-и-unpivot-в-transact-sql)\n+ [Расскажите об основных функциях ранжирования в Transact-SQL.](#Расскажите-об-основных-функциях-ранжирования-в-transact-sql)\n+ [Для чего используются операторы `INTERSECT`, `EXCEPT` в Transact-SQL?](#Для-чего-используются-операторы-intersect-except-в-transact-sql)\n+ [Напишите запрос...](#Напишите-запрос)\n\n## Что такое _«SQL»_?\nSQL, Structured query language («язык структурированных запросов») — формальный непроцедурный язык программирования, применяемый для создания, модификации и управления данными в произвольной реляционной базе данных, управляемой соответствующей системой управления базами данных (СУБД).\n\n[к оглавлению](#sql)\n\n## Какие существуют операторы SQL?\n__операторы определения данных (Data Definition Language, DDL)__:\n\n+ `CREATE` создает объект БД (базу, таблицу, представление, пользователя и т. д.),\n+ `ALTER` изменяет объект,\n+ `DROP` удаляет объект;\n\n__операторы манипуляции данными (Data Manipulation Language, DML)__:\n\n+ `SELECT` выбирает данные, удовлетворяющие заданным условиям,\n+ `INSERT` добавляет новые данные,\n+ `UPDATE` изменяет существующие данные,\n+ `DELETE` удаляет данные;\n\n__операторы определения доступа к данным (Data Control Language, DCL)__:\n\n+ `GRANT` предоставляет пользователю (группе) разрешения на определенные операции с объектом,\n+ `REVOKE` отзывает ранее выданные разрешения,\n+ `DENY` задает запрет, имеющий приоритет над разрешением;\n\n__операторы управления транзакциями (Transaction Control Language, TCL)__:\n\n+ `COMMIT` применяет транзакцию,\n+ `ROLLBACK` откатывает все изменения, сделанные в контексте текущей транзакции,\n+ `SAVEPOINT` разбивает транзакцию на более мелкие.\n\n[к оглавлению](#sql)\n\n## Что означает `NULL` в SQL?\n`NULL` - специальное значение (псевдозначение), которое может быть записано в поле таблицы базы данных. NULL соответствует понятию «пустое поле», то есть «поле, не содержащее никакого значения».\n\n`NULL` означает отсутствие, неизвестность информации. Значение `NULL` не является значением в полном смысле слова: по определению оно означает отсутствие значения и не принадлежит ни одному типу данных. Поэтому `NULL` не равно ни логическому значению `FALSE`, ни _пустой строке_, ни `0`. При сравнении `NULL` с любым значением будет получен результат `NULL`, а не `FALSE` и не `0`. Более того, `NULL` не равно `NULL`!\n\n[к оглавлению](#sql)\n\n## Что такое _«временная таблица»_? Для чего она используется?\n__Временная таблица__ - это объект базы данных, который хранится и управляется системой базы данных на временной основе. Они могут быть локальными или глобальными. Используется для сохранения результатов вызова хранимой процедуры, уменьшение числа строк при соединениях, агрегирование данных из различных источников или как замена курсоров и параметризованных представлений.\n\n[к оглавлению](#sql)\n\n## Что такое _«представление» (view)_ и для чего оно применяется?\n__Представление__, View - виртуальная таблица, представляющая данные одной или более таблиц альтернативным образом.\n\nВ действительности представление – всего лишь результат выполнения оператора `SELECT`, который хранится в структуре памяти, напоминающей SQL таблицу. Они работают в запросах и операторах DML точно также как и основные таблицы, но не содержат никаких собственных данных. Представления значительно расширяют возможности управления данными. Это способ дать публичный доступ к некоторой (но не всей) информации в таблице.\n\n[к оглавлению](#sql)\n\n## Каков общий синтаксис оператора `SELECT`?\n`SELECT` - оператор DML SQL, возвращающий набор данных (выборку) из базы данных, удовлетворяющих заданному условию. Имеет следующую структуру:\n\n```sql\nSELECT \n       [DISTINCT | DISTINCTROW | ALL]\n       select_expression,...\n   FROM table_references\n     [WHERE where_definition]\n     [GROUP BY {unsigned_integer | column | formula}]\n     [HAVING where_definition]\n     [ORDER BY {unsigned_integer | column | formula} [ASC | DESC], ...]\n```\n\n[к оглавлению](#sql)\n\n## Что такое `JOIN`?\n__JOIN__ - оператор языка SQL, который является реализацией операции соединения реляционной алгебры. Предназначен для обеспечения выборки данных из двух таблиц и включения этих данных в один результирующий набор. \n\nОсобенностями операции соединения являются следующее:\n\n+ в схему таблицы-результата входят столбцы обеих исходных таблиц (таблиц-операндов), то есть схема результата является «сцеплением» схем операндов;\n+ каждая строка таблицы-результата является «сцеплением» строки из одной таблицы-операнда со строкой второй таблицы-операнда;\n+ при необходимости соединения не двух, а нескольких таблиц, операция соединения применяется несколько раз (последовательно).\n\n```sql\nSELECT\n  field_name [,... n]\nFROM\n  Table1\n  {INNER | {LEFT | RIGHT | FULL} OUTER | CROSS } JOIN\n  Table2\n    {ON <condition> | USING (field_name [,... n])}\n```\n\n[к оглавлению](#sql)\n\n## Какие существуют типы `JOIN`?\n__(INNER) JOIN__\nРезультатом объединения таблиц являются записи, общие для левой и правой таблиц. Порядок таблиц для оператора не важен, поскольку оператор является симметричным.\n\n__LEFT (OUTER) JOIN__\nПроизводит выбор всех записей первой таблицы и соответствующих им записей второй таблицы. Если записи во второй таблице не найдены, то вместо них подставляется пустой результат (`NULL`). Порядок таблиц для оператора важен, поскольку оператор не является симметричным.\n\n__RIGHT (OUTER) JOIN__\n`LEFT JOIN` с операндами, расставленными в обратном порядке. Порядок таблиц для оператора важен, поскольку оператор не является симметричным.\n\n__FULL (OUTER) JOIN__\nРезультатом объединения таблиц являются все записи, которые присутствуют в таблицах. Порядок таблиц для оператора не важен, поскольку оператор является симметричным.\n\n__CROSS JOIN (декартово произведение)__\nПри выборе каждая строка одной таблицы объединяется с каждой строкой второй таблицы, давая тем самым все возможные сочетания строк двух таблиц. Порядок таблиц для оператора не важен, поскольку оператор является симметричным.\n\n[к оглавлению](#sql)\n\n## Что лучше использовать `JOIN` или подзапросы?\nОбычно лучше использовать `JOIN`, поскольку в большинстве случаев он более понятен и лучше оптимизируется СУБД (но 100% этого гарантировать нельзя). Так же `JOIN` имеет заметное преимущество над подзапросами в случае, когда список выбора `SELECT` содержит столбцы более чем из одной таблицы.\n\nПодзапросы лучше использовать в случаях, когда нужно вычислять агрегатные значения и использовать их для сравнений во внешних запросах.\n\n[к оглавлению](#sql)\n\n## Для чего используется оператор `HAVING`?\n`HAVING` используется для фильтрации результата `GROUP BY` по заданным логическим условиям.\n\n[к оглавлению](#sql)\n\n## В чем различие между операторами `HAVING` и `WHERE`?\nОсновное отличие 'WHERE' от 'HAVING' заключается в том, что 'WHERE' сначала выбирает строки, а затем группирует их и вычисляет агрегатные функции (таким образом, она отбирает строки для вычисления агрегатов), тогда как 'HAVING' отбирает строки групп после группировки и вычисления агрегатных функций. Как следствие, предложение 'WHERE' не должно содержать агрегатных функций; не имеет смысла использовать агрегатные функции для определения строк для вычисления агрегатных функций. Предложение 'HAVING', напротив, всегда содержит агрегатные функции. (Строго говоря, вы можете написать предложение 'HAVING', не используя агрегаты, но это редко бывает полезно. То же самое условие может работать более эффективно на стадии 'WHERE'.)\n\n[к оглавлению](#sql)\n\n## Для чего используется оператор `ORDER BY`?\n__ORDER BY__ упорядочивает вывод запроса согласно значениям в том или ином количестве выбранных столбцов. Многочисленные столбцы упорядочиваются один внутри другого. Возможно определять возрастание `ASC` или убывание `DESC` для каждого столбца. По умолчанию установлено - возрастание.\n\n[к оглавлению](#sql)\n\n## Для чего используется оператор `GROUP BY`?\n`GROUP BY` используется для агрегации записей результата по заданным признакам-атрибутам.\n\n[к оглавлению](#sql)\n\n## Как `GROUP BY` обрабатывает значение `NULL`?\nПри использовании `GROUP BY` все значения `NULL` считаются равными.\n\n[к оглавлению](#sql)\n\n## В чем разница между операторами `GROUP BY` и `DISTINCT`?\n`DISTINCT` указывает, что для вычислений используются только уникальные значения столбца. `NULL` считается как отдельное значение. \n`GROUP BY` создает отдельную группу для всех возможных значений (включая значение `NULL`). \n\nЕсли нужно удалить только дубликаты лучше использовать `DISTINCT`, `GROUP BY` лучше использовать для определения групп записей, к которым могут применяться агрегатные функции.\n\n[к оглавлению](#sql)\n\n## Перечислите основные агрегатные функции.\n__Агрегатных функции__ - функции, которые берут группы значений и сводят их к одиночному значению. \n\nSQL предоставляет несколько агрегатных функций:\n\n`COUNT` - производит подсчет записей, удовлетворяющих условию запроса;\n`SUM` - вычисляет арифметическую сумму всех значений колонки;\n`AVG` - вычисляет среднее арифметическое всех значений;\n`MAX` - определяет наибольшее из всех выбранных значений;\n`MIN` - определяет наименьшее из всех выбранных значений.\n\n[к оглавлению](#sql)\n\n## В чем разница между `COUNT(*)` и `COUNT({column})`?\n`COUNT (*)` подсчитывает количество записей в таблице, не игнорируя значение NULL, поскольку эта функция оперирует записями, а не столбцами.\n\n`COUNT ({column})` подсчитывает количество значений в `{column}`. При подсчете количества значений столбца эта форма функции `COUNT` не принимает во внимание значение `NULL`.\n\n[к оглавлению](#sql)\n\n## Что делает оператор `EXISTS`?\n`EXISTS` берет подзапрос, как аргумент, и оценивает его как `TRUE`, если подзапрос возвращает какие-либо записи и `FALSE`, если нет.\n\n[к оглавлению](#sql)\n\n## Для чего используются операторы `IN`, `BETWEEN`, `LIKE`?\n`IN` - определяет набор значений.\n\n```sql \nSELECT * FROM Persons WHERE name IN ('Ivan','Petr','Pavel');\n```\n\n`BETWEEN` определяет диапазон значений. В отличие от `IN`, `BETWEEN` чувствителен к порядку, и первое значение в предложении должно быть первым по алфавитному или числовому порядку.\n\n```sql \nSELECT * FROM Persons WHERE age BETWEEN 20 AND 25;\n```\n\n`LIKE` применим только к полям типа `CHAR` или `VARCHAR`, с которыми он используется чтобы находить подстроки. В качестве условия используются _символы шаблонизации (wildkards_) - специальные символы, которые могут соответствовать чему-нибудь: \n\n+ `_` замещает любой одиночный символ. Например, `'b_t'` будет соответствовать словам `'bat'` или `'bit'`, но не будет соответствовать `'brat'`. \n\n+ `%` замещает последовательность любого числа символов. Например `'%p%t'` будет соответствовать словам `'put'`, `'posit'`, или `'opt'`, но не `'spite'`.\n\n```sql \nSELECT * FROM UNIVERSITY WHERE NAME LIKE '%o';\n```\n\n[к оглавлению](#sql)\n\n## Для чего применяется ключевое слово `UNION`?\nВ языке SQL ключевое слово `UNION` применяется для объединения результатов двух SQL-запросов в единую таблицу, состоящую из схожих записей. Оба запроса должны возвращать одинаковое число столбцов и совместимые типы данных в соответствующих столбцах. Необходимо отметить, что `UNION` сам по себе не гарантирует порядок записей. Записи из второго запроса могут оказаться в начале, в конце или вообще перемешаться с записями из первого запроса. В случаях, когда требуется определенный порядок, необходимо использовать `ORDER BY`.\n\n[к оглавлению](#sql)\n\n## Какие ограничения на целостность данных существуют в SQL?\n`PRIMARY KEY` - набор полей (1 или более), значения которых образуют уникальную комбинацию и используются для однозначной идентификации записи в таблице. Для таблицы может быть создано только одно такое ограничение. Данное ограничение используется для обеспечения целостности сущности, которая описана таблицей.\n\n`CHECK` используется для ограничения множества значений, которые могут быть помещены в данный столбец. Это ограничение используется для обеспечения целостности предметной области, которую описывают таблицы в базе.\n\n`UNIQUE` обеспечивает отсутствие дубликатов в столбце или наборе столбцов.\n\n`FOREIGN KEY` защищает от действий, которые могут нарушить связи между таблицами. `FOREIGN KEY` в одной таблице указывает на `PRIMARY KEY` в другой. Поэтому данное ограничение нацелено на то, чтобы не было записей `FOREIGN KEY`, которым не отвечают записи `PRIMARY KEY`.\n\n[к оглавлению](#sql)\n\n## Какие отличия между ограничениями `PRIMARY` и `UNIQUE`?\nПо умолчанию ограничение `PRIMARY` создает кластерный индекс на столбце, а `UNIQUE` - некластерный. Другим отличием является то, что `PRIMARY` не разрешает `NULL` записей, в то время как `UNIQUE` разрешает одну (а в некоторых СУБД несколько) `NULL` запись.\n\n[к оглавлению](#sql)\n\n## Может ли значение в столбце, на который наложено ограничение `FOREIGN KEY`, равняться `NULL`?\nМожет, если на данный столбец не наложено ограничение `NOT NULL`. \n\n[к оглавлению](#sql)\n\n## Как создать индекс? \nИндекс можно создать либо с помощью выражения `CREATE INDEX`: \n```sql\nCREATE INDEX index_name ON table_name (column_name)\n```\n\nлибо указав ограничение целостности в виде уникального `UNIQUE` или первичного `PRIMARY` ключа в операторе создания таблицы `CREATE TABLE`.\n\n[к оглавлению](#sql)\n\n## Что делает оператор `MERGE`?\n`MERGE` позволяет осуществить слияние данных одной таблицы с данными другой таблицы. При слиянии таблиц проверяется условие, и если оно истинно, то выполняется `UPDATE`, а если нет - `INSERT`. При этом изменять поля таблицы в секции `UPDATE`, по которым идет связывание двух таблиц, нельзя.\n\n[к оглавлению](#sql)\n\n## В чем отличие между операторами `DELETE` и `TRUNCATE`?\n`DELETE` - оператор DML, удаляет записи из таблицы, которые удовлетворяют критерию `WHERE` при этом задействуются триггеры, ограничения и т.д.\n\n`TRUNCATE` - DDL оператор (удаляет таблицу и создает ее заново. Причем если на эту таблицу есть ссылки `FOREGIN KEY` или таблица используется в репликации, то пересоздать такую таблицу не получится).\n\n[к оглавлению](#sql)\n\n## Что такое _«хранимая процедура»_?\n__Хранимая процедура__ — объект базы данных, представляющий собой набор SQL-инструкций, который хранится на сервере. Хранимые процедуры очень похожи на обыкновенные процедуры языков высокого уровня, у них могут быть входные и выходные параметры и локальные переменные, в них могут производиться числовые вычисления и операции над символьными данными, результаты которых могут присваиваться переменным и параметрам. В хранимых процедурах могут выполняться стандартные операции с базами данных (как DDL, так и DML). Кроме того, в хранимых процедурах возможны циклы и ветвления, то есть в них могут использоваться инструкции управления процессом исполнения.\n\nХранимые процедуры позволяют повысить производительность, расширяют возможности программирования и поддерживают функции безопасности данных. В большинстве СУБД при первом запуске хранимой процедуры она компилируется (выполняется синтаксический анализ и генерируется план доступа к данным) и в дальнейшем её обработка осуществляется быстрее.\n\n[к оглавлению](#sql)\n\n## Что такое _«триггер»_?\n__Триггер (trigger)__ — это хранимая процедура особого типа, которую пользователь не вызывает непосредственно, а исполнение которой обусловлено действием по модификации данных: добавлением, удалением или изменением данных в заданной таблице реляционной базы данных. Триггеры применяются для обеспечения целостности данных и реализации сложной бизнес-логики. Триггер запускается сервером автоматически и все производимые им модификации данных рассматриваются как выполняемые в транзакции, в которой выполнено действие, вызвавшее срабатывание триггера. Соответственно, в случае обнаружения ошибки или нарушения целостности данных может произойти откат этой транзакции.\n\nМомент запуска триггера определяется с помощью ключевых слов `BEFORE` (триггер запускается до выполнения связанного с ним события) или `AFTER` (после события). В случае, если триггер вызывается до события, он может внести изменения в модифицируемую событием запись. Кроме того, триггеры могут быть привязаны не к таблице, а к представлению (VIEW). В этом случае с их помощью реализуется механизм «обновляемого представления». В этом случае ключевые слова `BEFORE` и `AFTER` влияют лишь на последовательность вызова триггеров, так как собственно событие (удаление, вставка или обновление) не происходит.\n\n[к оглавлению](#sql)\n\n## Что такое _«курсор»_?\n__Курсор__ — это объект базы данных, который позволяет приложениям работать с записями «по-одной», а не сразу с множеством, как это делается в обычных SQL командах.\n\nПорядок работы с курсором такой:\n\n+ Определить курсор (`DECLARE`)\n+ Открыть курсор (`OPEN`)\n+ Получить запись из курсора (`FETCH`)\n+ Обработать запись...\n+ Закрыть курсор (`CLOSE`)\n+ Удалить ссылку курсора (`DEALLOCATE`). Когда удаляется последняя ссылка курсора, SQL освобождает структуры данных, составляющие курсор.\n\n[к оглавлению](#sql)\n\n## Опишите разницу типов данных `DATETIME` и `TIMESTAMP`.\n`DATETIME` предназначен для хранения целого числа: `YYYYMMDDHHMMSS`. И это время не зависит от временной зоны, настроенной на сервере.\nРазмер: 8 байт\n\n`TIMESTAMP` хранит значение равное количеству секунд, прошедших с полуночи 1 января 1970 года по усреднённому времени Гринвича. При получении из базы отображается с учётом часового пояса. Размер: 4 байта\n\n[к оглавлению](#sql)\n\n## Для каких числовых типов недопустимо использовать операции сложения/вычитания?\nВ качестве операндов операций сложения и вычитания нельзя использовать числовой тип `BIT`.\n\n[к оглавлению](#sql)\n\n## Какое назначение у операторов `PIVOT` и `UNPIVOT` в Transact-SQL?\n`PIVOT` и `UNPIVOT` являются нестандартными реляционными операторами, которые поддерживаются Transact-SQL. \n\nОператор `PIVOT` разворачивает возвращающее табличное значение выражение, преобразуя уникальные значения одного столбца выражения в несколько выходных столбцов, а также, в случае необходимости, объединяет оставшиеся повторяющиеся значения столбца и отображает их в выходных данных. Оператор `UNPIVOT` производит действия, обратные `PIVOT`, преобразуя столбцы возвращающего табличное значение выражения в значения столбца.\n\n[к оглавлению](#sql)\n\n## Расскажите об основных функциях ранжирования в Transact-SQL.\nРанжирующие функции - это функции, которые возвращают значение для каждой записи группы в результирующем наборе данных. На практике они могут быть использованы, например, для простой нумерации списка, составления рейтинга или постраничной навигации.\n\nК примеру, у нас имеется набор данных следующего вида:\n\n![ ](images/SQL/image.png)\n\n`ROW_NUMBER` – функция нумерации в Transact-SQL, которая возвращает просто номер записи.\n\nНапример, запрос \n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       ROW_NUMBER() OVER(ORDER BY Marks) RowNumber\nFROM ExamResult;\n```\nВернёт набор данных следующего вида:\n\n![ ](images/SQL/row_number-sql-rank-function.png)\n\nА запрос вида\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       ROW_NUMBER() OVER(ORDER BY Marks desc) RowNumber\nFROM ExamResult;\n```\n\nВернёт набор\n\n![ ](images/SQL/row_number-example.png)\n\n\n`RANK` возвращает ранг каждой записи. В данном случае, в отличие от `ROW_NUMBER`, идет уже анализ значений и в случае нахождения одинаковых возвращает одинаковый ранг с пропуском следующего.\n\nНапример:\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       RANK() OVER(PARTITION BY Studentname ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY Studentname, \n         Rank;\n```\n\nРезультат:\n\n![ ](images/SQL/ranksql-rank-function.png)\n\nЕщё пример:\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       RANK() OVER(ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY Rank;\n```\n\nРезультат:\n\n![ ](images/SQL/output-of-rank-function-for-similar-values.png)\n\n\n`DENSE_RANK` так же возвращает ранг каждой записи, но в отличие от `RANK` в случае нахождения одинаковых значений возвращает ранг без пропуска следующего.\n\nНапример:\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       DENSE_RANK() OVER(ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY Rank;\n```\n\nРезультат:\n\n![ ](images/SQL/dense_ranksql-rank-function.png)\n\nЕщё пример:\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       DENSE_RANK() OVER(PARTITION BY Subject ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY Studentname, \n         Rank;\n```\n\nРезультат:\n\n![ ](images/SQL/output-of-dense_rank-function.png)\n\nНу, и на последок, продемонстрируем разницу между `DENSE_RANK` и `RANK`:\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       RANK() OVER(PARTITION BY StudentName ORDER BY Marks ) Rank\nFROM ExamResult\nORDER BY Studentname, \n         Rank;\n```\n\n\n```sql\nSELECT Studentname, \n       Subject, \n       Marks, \n       DENSE_RANK() OVER(PARTITION BY StudentName ORDER BY Marks ) Rank\nFROM ExamResult\nORDER BY Studentname, \n         Rank;\n```\n\n![ ](images/SQL/difference-between-rank-and-dense_rank.png)\n\n![ ](images/SQL/difference-between-rank-and-dense_rank-functio.png)\n\n\n`NTILE` – функция Transact-SQL, которая делит результирующий набор на группы по определенному столбцу. \n\nНапример:\n\n```sql\nSELECT *, \n       NTILE(2) OVER(\n       ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY rank;\n```\n\nРезультат:\n\n![ ](images/SQL/ntilen-sql-rank-function.png)\n\nПример 2:\n\n```sql\nSELECT *, \n       NTILE(3) OVER(\n       ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY rank;\n```\n\nРезультат:\n\n![ ](images/SQL/ntilen-function-with-partition.png)\n\nПример 3:\n\n```sql\nSELECT *, \n       NTILE(2) OVER(PARTITION  BY subject ORDER BY Marks DESC) Rank\nFROM ExamResult\nORDER BY subject, rank;\n```\n\nРезультат:\n\n![ ](images/SQL/output-of-ntilen-function-with-partition.png)\n\n[к оглавлению](#sql)\n\n## Для чего используются операторы `INTERSECT`, `EXCEPT` в Transact-SQL?\nОператор `EXCEPT` возвращает уникальные записи из левого входного запроса, которые не выводятся правым входным запросом.\n\nОператор `INTERSECT` возвращает уникальные записи, выводимые левым и правым входными запросами.\n\n[к оглавлению](#sql)\n\n## Напишите запрос...\n```sql\nCREATE TABLE table ( \n  id BIGINT(20) NOT NULL AUTO_INCREMENT, \n  created TIMESTAMP NOT NULL DEFAULT 0,\n  PRIMARY KEY (id) \n);\n```\n\nТребуется написать запрос, который вернет максимальное значение `id` и значение `created` для этого `id`:\n\n```sql\nSELECT id, created FROM table where id = (SELECT MAX(id) FROM table);\n```\n\n---\n\n```sql\nCREATE TABLE track_downloads ( \n  download_id BIGINT(20) NOT NULL AUTO_INCREMENT, \n  track_id INT NOT NULL, \n  user_id BIGINT(20) NOT NULL, \n  download_time TIMESTAMP NOT NULL DEFAULT 0, \n  PRIMARY KEY (download_id) \n);\n```\n\nНапишите SQL-запрос, возвращающий все пары `(download_count, user_count)`, удовлетворяющие следующему условию: `user_count` — общее ненулевое число пользователей, сделавших ровно `download_count` скачиваний `19 ноября 2010 года`:\n\n```sql\nSELECT DISTINCT download_count, COUNT(*) AS user_count \nFROM ( \n    SELECT COUNT(*) AS download_count  \n    FROM track_downloads WHERE download_time=\"2010-11-19\" \n    GROUP BY user_id)  \nAS download_count\nGROUP BY download_count; \n```\n\n[к оглавлению](#sql)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/SQL)\n+ [Quizful](http://www.quizful.net/interview/sql)\n\n[Вопросы для собеседования](README.md)\n\n"
        },
        {
          "name": "test.md",
          "type": "blob",
          "size": 10.794921875,
          "content": "[Вопросы для собеседования](README.md)\n\n# Тестирование\n+ [Что такое _«модульное тестирование»_?](#Что-такое-модульное-тестирование)\n+ [Что такое _«интеграционное тестирование»_?](#Что-такое-интеграционное-тестирование)\n+ [Чем интеграционное тестирование отличается от модульного?](#Чем-интеграционное-тестирование-отличается-от-модульного)\n+ [Какие существуют виды тестовых объектов?](#Какие-существуют-виды-тестовых-объектов)\n+ [Чем _stub_ отличается от _mock_?](#Чем-stub-отличается-от-mock)\n+ [Что такое _«фикстуры»_?](#Что-такое-фикстуры)\n+ [Какие аннотации фикстур существуют в JUnit?](#Какие-аннотации-фикстур-существуют-в-junit)\n+ [Для чего в JUnit используется аннотация `@Ignore`?](#Для-чего-в-junit-используется-аннотация-ignore)\n\n## Что такое _«модульное тестирование»_?\n__Модульное/компонентное тестирование (unit testing)__ - процесс в программировании, позволяющий проверить на корректность отдельные модули исходного кода программы. Идея состоит в том, чтобы писать тесты для каждой нетривиальной функции или метода. Это позволяет достаточно быстро проверить, не привело ли очередное изменение кода к регрессии, то есть к появлению ошибок в уже оттестированных местах программы, а также облегчает обнаружение и устранение таких ошибок.\n\nМодульные тесты можно условно поделить на две группы: \n\n+ _тесты состояния (state based)_, проверяющие что вызываемый метод объекта отработал корректно, проверяя состояние тестируемого объекта после вызова метода.\n\n+ _тесты взаимодействия (interaction tests)_, в которых тестируемый объект производит манипуляции с другими объектами. Применяются, когда требуется удостовериться, что тестируемый объект корректно взаимодействует с другими объектами.\n\n[к оглавлению](#Тестирование)\n\n## Что такое _«интеграционное тестирование»_?\n__Интеграционное тестирование (integration testing)__ — это тестирование, проверяющие работоспособность двух или более модулей системы в совокупности — то есть нескольких объектов как единого блока. В тестах взаимодействия же тестируется конкретный, определенный объект и то, как именно он взаимодействует с внешними зависимостями.\n\n[к оглавлению](#Тестирование)\n\n## Чем интеграционное тестирование отличается от модульного?\nС технологической точки зрения интеграционное тестирование является количественным развитием модульного, поскольку так же, как и модульное тестирование, оперирует интерфейсами модулей и подсистем и требует создания тестового окружения, включая заглушки на месте отсутствующих модулей. Основная разница между модульным и интеграционным тестированием состоит в целях, то есть в типах обнаруживаемых дефектов, которые, в свою очередь, определяют стратегию выбора входных данных и методов анализа.\n\n> Допустим, есть класс, который при определенных условиях взаимодействует с web-сервисом через зависимый объект. И нам надо проверить, что определенный метод зависимого объекта действительно вызывается. Если в качестве зависимого класса передать:\n\n> + реальный класс, работающий с web-сервисом, то это будет интеграционное тестирование.\n\n> + заглушку, то это будет тестирование состояния.\n\n> + шпиона, а в конце теста проверить, что определенный метод зависимого объекта действительно был вызван, то это будет тест взаимодействия.\n\n[к оглавлению](#Тестирование)\n\n## Какие существуют виды тестовых объектов?\n__пустышка (dummy)__ - объект, который обычно передается в тестируемый класс в качестве параметра, но не имеет поведения: с ним ничего не происходит и никакие его методы не вызываются.\n\n> Примером dummy-объектов являются new object(), null, «Ignored String» и т.д.\n\n__фальшивка (fake object)__ применяется в основном для ускорения запуска ресурсоёмких тестов и является заменой тяжеловесного внешнего зависимого объекта его легковесной реализацией. \n\n> Основные примеры — эмулятор базы данных (fake database) или фальшивый web-сервис.\n\n__заглушка (test stub)__ используется для получения данных из внешней зависимости, подменяя её. При этом заглушка игнорирует все данные, поступающие из тестируемого объекта, возвращая заранее определённый результат.\n\n> Тестируемый объект использует чтение из конфигурационного файла? Тогда передаем ему заглушку `ConfigFileStub` возвращающую тестовые строки конфигурации без обращения к файловой системе.\n\n__шпион (test spy)__ - разновидность заглушки, которая умеет протоколировать сделанные к ней обращения из тестируемой системы, чтобы проверить их правильность в конце теста. При этом фиксируется количество, состав и содержание параметров вызовов.\n\n> Если существует необходимость проверки, что определённый метод тестируемого класса вызывался ровно 1 раз, то шпион - именно то, что нам нужно. \n\n__фикция (mock object)__ похож на _шпиона_, но обладает расширенной функциональностью, заранее заданными поведением и реакцией на вызовы.\n\n[к оглавлению](#Тестирование)\n\n## Чем _stub_ отличается от _mock_?\n_stub_ используется как заглушка сервисов, методов, классов и т.д. с заранее запрограммированным ответом на вызовы.\n\n_mock_ использует подмену результатов вызова, проверяет сам факт взаимодействия, протоколирует и контролирует его.\n\n[к оглавлению](#Тестирование)\n\n## Что такое _«фикстуры»_?\n__Фикстуры (fixtures)__ - состояние среды тестирования, которое требуется для успешного выполнения теста. Основная задача фикстур заключается в подготовке тестового окружения с заранее фиксированным/известным состоянием, чтобы гарантировать повторяемость процесса тестирования.\n\n[к оглавлению](#Тестирование)\n\n## Какие аннотации фикстур существуют в JUnit?\n\n+ `@BeforeClass` - определяет код, который должен единожды выполниться перед запуском набора тестовых методов.\n+ `@AfterClass` - код, выполняемый один раз после исполнения набора тестовых методов.\n+ `@Before` - определяет код, который должен выполняться каждый раз перед запуском любого тестового метода.\n+ `@After` - код, выполняемый каждый раз после исполнения любого тестового метода.\n\n[к оглавлению](#Тестирование)\n\n## Для чего в JUnit используется аннотация `@Ignore`?\n`@Ignore` указывает JUnit на необходимость пропустить данный тестовый метод.\n\n[к оглавлению](#Тестирование)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/Тестирование_программного_обеспечения)\n+ [Хабрахабр](https://habrahabr.ru/post/116372/)\n+ [Интуит](http://www.intuit.ru/department/se/testing/5/2.html)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "uml.md",
          "type": "blob",
          "size": 17.0009765625,
          "content": "[Вопросы для собеседования](README.md)\n\n# UML\n+ [Что такое _UML_?](#Что-такое-uml)\n+ [Что такое _«диаграмма»_, _«нотация»_ и _«метамодель»_ в UML?](#Что-такое-диаграмма-нотация-и-метамодель-в-uml)\n+ [Какие существуют типы диаграмм?](#Какие-существуют-типы-диаграмм)\n+ [Какие виды отношений существуют в структурной диаграмме классов?](#Какие-виды-отношений-существуют-в-структурной-диаграмме-классов)\n\n## Что такое _UML_?\n__UML__ – это унифицированный графический язык моделирования для описания, визуализации, проектирования и документирования объектно-ориентированных систем. UML призван поддерживать процесс моделирования на основе объектно-ориентированного подхода, организовывать взаимосвязь концептуальных и программных понятий, отражать проблемы масштабирования сложных систем.\n\nОтличительной особенностью UML является то, что словарь этого языка образуют графические элементы. Каждому графическому символу соответствует конкретная семантика, поэтому модель, созданная одним человеком, может однозначно быть понята другим человеком или программным средством, интерпретирующим UML. Отсюда, в частности, следует, что модель системы, представленная на UML, может автоматически быть переведена на объектно-ориентированный язык программирования, то есть, при наличии хорошего инструментального средства визуального моделирования, поддерживающего UML, построив модель, мы получим и заготовку программного кода, соответствующего этой модели.\n\n[к оглавлению](#uml)\n\n## Что такое _«диаграмма»_, _«нотация»_ и _«метамодель»_ в UML?\n__Диаграмма__ - графическое представление совокупности элементов модели в форме связного графа, вершинам и ребрам (дугам) которого приписывается определенная семантика\n\n__Нотация__ – совокупность символов и правила их применения, используются для представления понятий и связей между ними. \nНотация диаграммы определяет способ представления, ассоциации, множественности. Причем эти понятия должны быть точно определены.\n\n__Метамодель__ – диаграмма, определяющая нотацию. \nМетамодель помогает понять, что такое хорошо организованная, т.е. синтаксически правильная, модель.\n\n[к оглавлению](#uml)\n\n## Какие существуют типы диаграмм?\n## Структурные диаграммы:\n__классов (Class diagram)__ описывает структуру системы, демонстрирующая классы системы, их атрибуты, методы и зависимости между классами.\n\n__объектов (Object diagram)__ демонстрирует полный или частичный снимок моделируемой системы в заданный момент времени. На диаграмме объектов отображаются экземпляры классов (объекты) системы с указанием текущих значений их атрибутов и связей между объектами.\n\n__компонентов (Component diagram)__ показывает разбиение программной системы на структурные компоненты и связи (зависимости) между компонентами.\n\n+ __развёртывания/размещения (Deployment diagram)__ служит для моделирования работающих узлов и артефактов, развёрнутых на них.\n\n+ __пакетов (Package diagram)__ используется для организации элементов в группы по какому-либо признаку с целью упрощения структуры и организации работы с моделью системы.\n\n+ __профилей (Profile diagram)__ действует на уровне метамодели и показывает стереотип класса или пакета.\n\n+ __композитной/составной структуры (Composite structure diagram)__ демонстрирует внутреннюю структуру класса и, по возможности, взаимодействие элементов (частей) его внутренней структуры.\n\n    + __кооперации (Collaboration diagram)__ показывает роли и взаимодействие классов в рамках кооперации.\n        \n## Диаграммы поведения:\n__деятельности (Activity diagram)__ показывает разложение некоторой деятельности на её составные части. Под деятельностью понимается спецификация исполняемого поведения в виде координированного последовательного и параллельного выполнения подчинённых элементов — вложенных видов деятельности и отдельных действий, соединённых между собой потоками, которые идут от выходов одного узла к входам другого. Диаграммы деятельности используются при моделировании бизнес-процессов, технологических процессов, последовательных и параллельных вычислений.\n\n__состояний/автомата/конечного автомата (State Machine diagram)__ представляет конечный автомат с простыми состояниями, переходами и композитными состояниями. Конечный автомат (State machine) — спецификация последовательности состояний, через которые проходит объект или взаимодействие в ответ на события своей жизни, а также ответные действия объекта на эти события. Конечный автомат прикреплён к исходному элементу (классу, кооперации или методу) и служит для определения поведения его экземпляров.\n\n__вариантов использования/прецедентов (Use case diagram)__ отражает отношения существующие между актёрами и вариантами использования. Основная задача — представлять собой единое средство, дающее возможность заказчику, конечному пользователю и разработчику совместно обсуждать функциональность и поведение системы.\n\n__взаимодействия (Interaction diagram)__:\n\n+ __коммуникации (Communication diagram)__ изображает взаимодействия между частями композитной структуры или ролями кооперации при этом явно указываются отношения между элементами (объектами), а время как отдельное измерение не используется (применяются порядковые номера вызовов).\n\n+ __последовательности (Sequence diagram)__ показывает взаимодействия объектов, упорядоченные по времени их проявления.\n\n+ __обзора взаимодействия (Interaction overview diagram)__ — разновидность диаграммы деятельности, включающая фрагменты диаграммы последовательности и конструкции потока управления.\n\n+ __синхронизации (Timing diagram)__ — альтернативное представление диаграммы последовательности, явным образом показывающее изменения состояния на линии жизни с заданной шкалой времени. Может быть полезна в приложениях реального времени.\n\n[к оглавлению](#uml)\n\n## Какие виды отношений существуют в структурной диаграмме классов?\n## Взаимосвязи классов\n__Обобщение (Generalization)__ показывает, что один из двух связанных классов (подтип) является частной формой другого (супертипа), который называется обобщением первого. На практике это означает, что любой экземпляр подтипа является также экземпляром супертипа. Обобщение также известно как _наследование_, _«is a» взаимосвязь_ или _отношение «является»_.\n\n> «Табурет» является подтипом «Мебели».\n\n__Реализация (Implementation)__ — отношение между двумя элементами модели, в котором один элемент (клиент) реализует поведение, заданное другим (поставщиком). Реализация — отношение целое-часть. Поставщик, как правило является абстрактным классом или классом-интерфейсом.\n\n> «Кровать» реализует поведение «Мебели для сна»\n\n## Взаимосвязи объектов классов\n__Зависимость (Dependency)__ обозначает такое отношение между классами, что изменение спецификации класса-поставщика может повлиять на работу зависимого класса, но не наоборот.\n\n> «Расписание занятий» имеет зависимость от «Списка предметов». При изменении списка предметов расписание занятий будет вынуждено изменится. Однако изменение расписания занятий никак не влияет на список предметов. \n\n__Ассоциация (Association)__ показывает, что объекты одной сущности (класса) связаны с объектами другой сущности таким образом, что можно перемещаться от объектов одного класса к другому. Является общим случаем композиции и агрегации. \n\n> «Студент» и «Университет» имеют ассоциацию т.к. студент может учиться в университете и этой ассоциации можно присвоить имя «учится в».\n\n__Агрегация (Aggregation)__ — это разновидность ассоциации в отношении между целым и его частями. Как тип ассоциации агрегация может быть именованной. Одно отношение агрегации не может включать более двух классов (контейнер и содержимое). Агрегация встречается, когда один класс является коллекцией или контейнером других. Причём по умолчанию, агрегацией называют агрегацию по ссылке, то есть, когда время существования содержащихся классов не зависит от времени существования содержащего их класса. Если контейнер будет уничтожен, то его содержимое — нет.\n\n> «Студент» не является неотъемлемой частью «Группы», но в то же время, группа состоит из студентов, поэтому следует использовать агрегацию.\n\n__Композиция (Composition)__ — более строгий вариант агрегации. Известна также как агрегация по значению. Композиция имеет жёсткую зависимость времени существования экземпляров класса контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено. \n\n> «Факультет» является частью «Университета» и факультет без университета существовать не может, следовательно здесь подходит композиция.\n\n## #Общие взаимосвязи\n__Зависимость__ — это слабая форма отношения использования, при котором изменение в спецификации одного влечёт за собой изменение другого, причём обратное не обязательно. Возникает, когда объект выступает, например, в форме параметра или локальной переменной. Существует несколько именованных вариантов. Зависимость может быть между экземплярами, классами или экземпляром и классом.\n    \n__Уточнение отношений__ имеет отношение к уровню детализации. Один пакет уточняет другой, если в нём содержатся те же самые элементы, но в более подробном представлении. \n\n__Мощность/кратность/мультипликатор отношения__ означает число связей между каждым экземпляром класса (объектом) в начале линии с экземпляром класса в её конце. Различают следующие типичные случаи:\n\n| нотация | объяснение | пример |\n|:----------:|:--------------------------:|:---------------------------------------------:|\n| 0..1 | Ноль или один экземпляр | кошка имеет или не имеет хозяина |\n| 1 | Обязательно один экземпляр | у кошки одна мать |\n| 0..* или * | Ноль или более экземпляров | у кошки могут быть, а может и не быть котят |\n|  1..* | Один или более экземпляров | у кошки есть хотя бы одно место, где она спит |\n\n[к оглавлению](#uml)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/UML)\n+ [Информикус](http://www.informicus.ru/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "web.md",
          "type": "blob",
          "size": 36.494140625,
          "content": "[Вопросы для собеседования](README.md)\n\n# Основы Web\n+ [Что такое _WWW_?](#Что-такое-www)\n+ [Что такое _W3C_?](#Что-такое-w3c)\n+ [Какие существуют уровни модели _OSI_?](#Какие-существуют-уровни-модели-osi)\n+ [Что такое _TCP/IP_?](#Что-такое-tcpip)\n+ [Что такое _UDP_?](#Что-такое-udp)\n+ [Чем отличаются _TCP_ и _UDP_?](#Чем-отличаются-tcp-и-udp)\n+ [Что такое протокол передачи данных? Какие протоколы вы знаете?](#Что-такое-протокол-передачи-данных-Какие-протоколы-вы-знаете)\n+ [Что такое _HTTP_ и _HTTPS_? Чем они отличаются?](#Что-такое-http-и-https-Чем-они-отличаются)\n+ [Что такое _FTP_?](#Что-такое-ftp)\n+ [Чем отличаются методы _GET_ и _POST_?](#Чем-отличаются-методы-get-и-post)\n+ [Что такое _MIME тип_?](#Что-такое-mime-тип)\n+ [Что такое _Web server_?](#Что-такое-web-server)\n+ [Что такое _Web application_?](#Что-такое-web-application)\n+ [Что такое _Application server_?](#Что-такое-application-server)\n+ [Чем отличаются _Web server_ и _Application server_?](#Чем-отличаются-web-server-и-application-server)\n+ [Что такое _AJAX_? Как принципиально устроена эта технология?](#Что-такое-ajax-Как-принципиально-устроена-эта-технология)\n+ [Что такое _WebSocket_?](#Что-такое-websocket)\n+ [Что такое _JSON_?](#Что-такое-json)\n+ [Что такое _JSON схема_?](#Что-такое-json-схема)\n+ [Что такое _cookies_?](#Что-такое-cookies)\n+ [Что такое _«сессия»_?](#Что-такое-сессия)\n+ [Что такое _«авторизация»_ и _«аутентификация»_? Чем они отличаются?](#Что-такое-авторизация-и-аутентификация-Чем-они-отличаются)\n\n## Что такое _WWW_?\n__WWW, World Wide Web (Всемирная паутина)__ — распределённая система, предоставляющая доступ к связанным между собой документам, расположенным на различных компьютерах, подключённых к Интернету. Для обозначения этого термина также используют слово _web_.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _W3C_?\n__W3C, World Wide Web Consortium (Консорциум Всемирной паутины)__ — организация, разрабатывающая и внедряющая технологические стандарты для WWW. \n\nW3C разрабатывает для Интернета единые принципы и стандарты, называемые _«рекомендациями» (W3C Recommendations)_, которые затем внедряются производителями программ и оборудования. Таким образом достигается совместимость между программными продуктами и аппаратурой различных компаний.\n\n[к оглавлению](#Основы-web)\n\n## Какие существуют уровни модели _OSI_?\n| # |                  Уровень (layer)                 |               Тип данных (PDU)            |                          Функции                         |          Примеры           |\n|--:|--------------------------------------------------|:-----------------------------------------:|----------------------------------------------------------|:--------------------------:|\n| 7 | Прикладной (application)                         |                      -                    | Доступ к сетевым службам                                 | HTTP, FTP                  |\n| 6 | Представительский (представления) (presentation) |                      -                    | Представление и шифрование данных                        | ASCII, JPEG                |\n| 5 | Сеансовый (session)                              |                      -                    | Управление сеансом связи                                 | RPC, PAP                   |\n| 4 | Транспортный (transport)                         | Сегменты(segment) / Дейтаграммы(datagram) | Прямая связь между конечными пунктами и надежность       | TCP, UDP                   |\n| 3 | Сетевой (network)                                |              Пакеты (packet)              | Определение маршрута и логическая адресация              | IP, AppleTalk              |\n| 2 | Канальный (data link)                            |         Биты (bit) / Кадры (frame)        | Физическая адресация                                     | Ethernet, IEEE 802.2, L2TP |\n| 1 | Физический (physical)                            |                  Биты (bit)               | Работа со средой передачи, сигналами и двоичными данными | USB, витая пара            |\n\n[к оглавлению](#Основы-web)\n\n## Что такое _TCP/IP_?\n__TCP/IP__ - это два основных сетевых протокола Internet. Часто это название используют и для обозначения сетей, работающих на их основе.\n\n__IP (Internet Protocol)__ - маршрутизируемый протокол, отвечающий за IP-адресацию, маршрутизацию, фрагментацию и восстановление пакетов. В его задачу входит продвижение пакета между сетями – от одного маршрутизатора до другого и тех пор, пока пакет не попадет в сеть назначения. В отличие от протоколов прикладного и транспортного уровней, протокол IP разворачивается не только на хостах, но и на всех шлюзах (маршрутизаторах). Этот протокол работает без установления соединения и без гарантированной доставки.\n\nВ настоящее время используются следующие две версии протокола IP:\n\n+ _IPv6_ — IP-адрес имеет разрядность 128 бит и записывается в виде восьми 16-битных полей, с использованием шестнадцатеричной системы счисления и с возможностью сокращения двух и более последовательных нулевых полей до `::`, например: `2001:db8:42::1337:cafe`\n+ _IPv4_ — IP-адрес имеет разрядность 32 бита и записывается в виде четырех десятичных чисел в диапазоне 0 … 255 через точку, например: `192.0.2.34`.\n\n__TCP (Transfer Control Protocol)__ - протокол, обеспечивающий надежную, требующую логического соединения связь между двумя компьютерами. Отвечает за установление соединения, упорядочивание посылаемых пакетов и восстановление пакетов, потерянных в процессе передачи.\n\nСтек протоколов _TCP/IP_ включает в себя четыре уровня:\n\n1. _канальный уровень (link layer)_ - например Ethernet, IEEE 802.11 Wireless Ethernet, физическая среда и принципы кодирования информации\n2. _сетевой уровень (Internet layer)_ - например IP\n3. _транспортный уровень (transport layer)_ - например TCP, UDP\n4. _прикладной уровень (application layer)_ - например HTTP, FTP, DNS\n\nTCP-соединение двух узлов начинается с _handshake (рукопожатия)_:\n\n+ Узел _A_ посылает узлу _B_ специальный пакет `SYN` — приглашение к соединению\n+ _B_ отвечает пакетом `SYN-ACK` — согласием об установлении соединения\n+ _A_ посылает пакет `ACK` — подтверждение, что согласие получено\n\nПосле этого _TCP соединение_ считается установленным и приложения, работающие в этих узлах, могут посылать друг другу пакеты с данными.\n\nВ заголовке _TCP/IP_ пакета указывается:\n\n+ IP-адрес отправителя\n+ IP-адрес получателя\n+ Номер порта\n\n[к оглавлению](#Основы-web)\n\n## Что такое _UDP_?\n__UDP, User Datagram Protocol (Протокол пользовательских датаграмм)__ — протокол, который обеспечивает доставку без требований соединения с удаленным модулем UDP и обязательного подтверждения получения. \n\nК заголовку IP-пакета UDP добавляет всего четыре поля по 2 байта каждое:\n\n1. _поле порта источника (source port)_\n2. _поле порта пункта назначения (destination port)_\n3. _поле длины (length)_\n4. _поле контрольной суммы (checksum)_\n\nПоля «порт источника» и «контрольная сумма» не являются обязательными для использования в IPv4. В IPv6 необязательно только поле «порт отправителя».\n\nUDP используется _DNS_, _SNMP_, _DHCP_ и другими приложениями.\n\n[к оглавлению](#Основы-web)\n\n## Чем отличаются _TCP_ и _UDP_?\n__TCP__ — ориентированный на соединение протокол, что означает необходимость «рукопожатия» для установки соединения между двумя хостами. Как только соединение установлено, пользователи могут отправлять данные в обоих направлениях.\n\n+ _Надёжность_ — TCP управляет подтверждением, повторной передачей и тайм-аутом сообщений. Производятся многочисленные попытки доставить сообщение. Если оно потеряется на пути, сервер вновь запросит потерянную часть. В TCP нет ни пропавших данных, ни (в случае многочисленных тайм-аутов) разорванных соединений.\n+ _Упорядоченность_ — если два сообщения последовательно отправлены, первое сообщение достигнет приложения-получателя первым. Если участки данных приходят в неверном порядке, TCP отправляет неупорядоченные данные в буфер до тех пор, пока все данные не могут быть упорядочены и переданы приложению.\n+ _Тяжеловесность_ — TCP необходимо три пакета для установки соединения перед тем, как отправить данные. TCP следит за надёжностью и перегрузками.\n+ _Потоковость_ — данные читаются как поток байтов, не передается никаких особых обозначений для границ сообщения или сегментов.\n\n__UDP__ — более простой, основанный на сообщениях протокол без установления соединения. Протоколы такого типа не устанавливают выделенного соединения между двумя хостами. Связь достигается путём передачи информации в одном направлении от источника к получателю без проверки готовности или состояния получателя.\n\n+ _Ненадёжность_ — когда сообщение посылается, неизвестно, достигнет ли оно своего назначения — оно может потеряться по пути. Нет таких понятий как подтверждение, повторная передача, тайм-аут.\n+ _Неупорядоченность_ — если два сообщения отправлены одному получателю, то порядок их достижения цели не может быть предугадан.\n+ _Легковесность_ — никакого упорядочивания сообщений, никакого отслеживания соединений и т. д. Это лишь транспортный уровень.\n+ _Датаграммы_ — пакеты посылаются по отдельности и проверяются на целостность только если они прибыли. Пакеты имеют определенные границы, которые соблюдаются после получения, то есть операция чтения на получателе выдаст сообщение таким, каким оно было изначально послано.\n+ _Отсутствие контроля перегрузок_ — для приложений с большой пропускной способностью существует шанс вызвать коллапс перегрузок, если только они не реализуют меры контроля на прикладном уровне.\n\n[к оглавлению](#Основы-web)\n\n## Что такое протокол передачи данных? Какие протоколы вы знаете?\n__Протокол передачи данных__ — набор соглашений интерфейса логического уровня, которые определяют обмен данными между различными программами. Эти соглашения задают единообразный способ передачи сообщений и обработки ошибок при взаимодействии программного обеспечения разнесённой в пространстве аппаратуры, соединённой тем или иным интерфейсом.\n\nНаиболее известные протоколы передачи данных:\n\n+ HTTP (Hyper Text Transfer Protocol)\n+ FTP (File Transfer Protocol)\n+ POP3 (Post Office Protocol)\n+ SMTP (Simple Mail Transfer Protocol)\n+ TELNET (TErminaL NETwork)\n\n[к оглавлению](#Основы-web)\n\n## Что такое _HTTP_ и _HTTPS_? Чем они отличаются?\n__HTTP, HyperText Transfer Protocol (Протокол передачи гипертекста)__ — протокол прикладного уровня передачи данных. \n\nОсновой HTTP является технология «клиент-сервер»:\n\n+ _Потребители (клиенты)_, которые инициируют соединение и посылают запрос;\n+ _Поставщики (серверы)_, которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом.\n\nДля идентификации ресурсов HTTP использует глобальные URI. \n\nHTTP не сохраняет своего состояния. Это означает отсутствие сохранения промежуточного состояния между парами «запрос-ответ».\n\nСтруктура протокола:\n\n1. _Стартовая строка (starting line)_ — определяет тип сообщения;\n2. _Заголовки (headers)_ — характеризуют тело сообщения, параметры передачи и прочие сведения;\n3. _Тело сообщения (message body)_ — непосредственно данные сообщения. Обязательно должно отделяться от заголовков пустой строкой.\n\nЗаголовки и тело сообщения могут отсутствовать, но стартовая строка является обязательным элементом, так как указывает на тип запроса/ответа.\n\n__HTTPS, HyperText Transfer Protocol Secure__ — расширение протокола HTTP, поддерживающее шифрование. Данные, передаваемые по протоколу HTTPS, «упаковываются» в криптографический протокол SSL или TLS, что обеспечивает защиту от атак, основанных на прослушивании сетевого соединения (при условии, что будут использоваться шифрующие средства и сертификат сервера проверен и ему доверяют).\n\n__Различия _HTTP_ и _HTTPS___:\n\n+ HTTPS является расширением HTTP.\n\n+ HTTP использует не зашифрованное соединение. Соединение по HTTPS поддерживает шифрование.\n\n+ Работа по HTTP быстрей и менее ресурсоёмко, т.к. шифрование HTTPS требует дополнительных затрат.\n\n+ Порты по умолчанию: в случае HTTP это TCP-порт `80`, для HTTPS - TCP-порт `443`.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _FTP_?\n__FTP, File Transfer Protocol (Протокол передачи файлов)__ — протокол передачи файлов между компьютерами в сети TCP. С его помощью можно подключаться к FTP-серверам, просматривать содержимое их каталогов и загружать файлы с сервера или на сервер. Протокол построен на архитектуре «клиент-сервер» и использует разные сетевые соединения для передачи команд и данных между клиентом и сервером. \n\nПо умолчанию использует TCP-порт `21`.\n\n[к оглавлению](#Основы-web)\n\n## Чем отличаются методы _GET_ и _POST_?\n__GET__ передает данные серверу, используя URL, тогда как __POST__ передает данные, используя тело HTTP запроса. Длина URL ограничена 1024 символами, это и будет верхним ограничением для данных, которые можно отослать через GET. POST может отправлять гораздо большие объемы данных. Лимит устанавливается web-server и составляет обычно около 2 Mb.\n\nПередача данных методом POST более безопасна, чем методом GET, так как секретные данные (например пароль) не отображаются напрямую в web-клиенте пользователя, в отличии от URL, который виден почти всегда. Иногда это преимущество превращается в недостаток - вы не сможете послать данные за кого-то другого.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _MIME тип_?\n__MIME, Multipurpose Internet Mail Extension (Многоцелевые расширения Интернет-почты)__ — спецификация для передачи по сети файлов различного типа: изображений, музыки, текстов, видео, архивов и др. В HTML указание MIME-типа используется при  передаче данных форм и вставки на страницу различных объектов.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _Web server_?\n__Web server (Веб-сервер)__ — сервер, принимающий HTTP-запросы от клиентов и выдающий им HTTP-ответы. Так называют как программное обеспечение, выполняющее функции web-сервера, так и непосредственно компьютер, на котором это программное обеспечение работает. \n\nWeb-серверы могут иметь различные дополнительные функции, например:\n\n+ автоматизация работы web-страниц;\n+ ведение журнала обращений пользователей к ресурсам;\n+ аутентификация и авторизация пользователей;\n+ поддержка динамически генерируемых страниц;\n+ поддержка HTTPS для защищённых соединений с клиентами.\n\nНаиболее известные web-серверы:\n\n+ Apache\n+ Microsoft IIS\n+ nginx\n\n[к оглавлению](#Основы-web)\n\n## Что такое _Web application_?\n__Web application (Веб-приложение)__ - клиент-серверное приложение, в котором клиентом выступает браузер, а сервером — web-сервер. Логика web application распределена между сервером и клиентом, хранение данных осуществляется, преимущественно, на сервере, а обмен информацией происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому web application является кроссплатформенным сервисом.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _Application server_?\n__Application Server (Сервер приложений)__ — программа, представляющая собой сервер, который занимается системной поддержкой приложений и обеспечивает их жизненный цикл в соответствии с правилами, определёнными в спецификациях. Может работать как полноценный самостоятельный web-сервер или быть поставщиком страниц для другого web-сервера. Обеспечивает обмен данными между приложениями и клиентами, берёт на себя выполнение таких функций, как создание программной среды для функционирующего приложения, идентификацию и авторизацию клиентов, организацию сессии для каждого из них.\n\nНаиболее известные серверы приложений Java:\n\n+ Apache Tomcat\n+ Jetty\n+ JBoss\n+ GlassFish\n+ IBM WebSphere\n+ Oracle Weblogic\n\n[к оглавлению](#Основы-web)\n\n## Чем отличаются _Web server_ и _Application server_?\nПонятие web server относится скорее к способу передачи данных (конкретно, по протоколу HTTP), в то время как понятие Application server относится к способу выполнения этих самых приложений (конкретно, удаленная обработка запросов клиентов при помощи каких-то программ, размещенных на сервере). Эти понятия нельзя ставить в один ряд. Они обозначают разные признаки программы. Какие-то программы удовлетворяют только одному признаку, какие-то - нескольким сразу.\n\nApache Tomcat умеет выполнять приложения? Да, значит он является application server. Apache Tomcat умеет отдавать данные по HTTP? - Да. Следовательно он является web server.\n\nВозьмите какую-нибудь базу данных, в которой на хранимых процедурах описана сложная логика и можно в ответ на SQL-запросы отправлять даже sms. Такую базу данных можно назвать application server, но web server - уже нет, потому что все это не работает с клиентом по HTTP протоколу.\n\nВозьмите чистый Apache, в котором не включены никакие модули для поддержки языков программирования. Он умеет отдавать только статичные файлы и картинки по протоколу HTTP. Это web server, но не application server. Включите модуль для поддержки PHP и разместите там программу на PHP, которая делает запросы к базе данных и динамически формирует страницы. Теперь Apache стал и application server.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _AJAX_? Как принципиально устроена эта технология?\n__AJAX, Asynchronous Javascript and XML (Асинхронный Javascript и XML)__ — подход к построению интерактивных пользовательских интерфейсов web-приложений, заключающийся в «фоновом» обмене данными браузера и web-сервера. В результате, при обновлении данных web-страница не перезагружается полностью и web-приложения становятся быстрее и удобнее.\n\nПри использовании AJAX:\n\n1. Пользователь заходит на web-страницу и взаимодействует с каким-нибудь её элементом.\n2. Скрипт на языке JavaScript определяет, какая информация необходима для обновления страницы.\n3. Браузер отправляет соответствующий запрос на web-сервер.\n4. Web-сервер возвращает только ту часть документа, на которую пришёл запрос.\n5. Скрипт вносит изменения с учётом полученной информации (без полной перезагрузки страницы).\n\nAJAX базируется на двух основных принципах:\n\n1. использование технологии динамического обращения к серверу «на лету» (без перезагрузки страницы полностью) через динамическое создание:\n    + _дочерних фреймов_;\n    + _тега `<script>`_;\n    + _тега `<img>`_.\n2. использование _DHTML_ для динамического изменения содержания страницы;\n\nAJAX не является самостоятельной технологией, это концепция использования нескольких смежных технологий:\n\n+ _(X)HTML_, _CSS_ для подачи и стилизации информации;\n+ _DOM-модель_, операции над которой производятся Javascript на стороне клиента, для обеспечения динамического отображения и взаимодействия с информацией;\n+ _XMLHttpRequest_ или другой транспорт (_IFrame_, _SCRIPT-тег_, _..._) для асинхронного обмена данными с web-сервером;\n+ _JSON_ или любой другой подходящий формат (_форматированный HTML_, _текст_, _XML_, _..._) для обмена данными.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _WebSocket_?\n__WebSocket__ — протокол полнодуплексной связи поверх TCP-соединения, предназначенный для обмена сообщениями между браузером и web-сервером в режиме реального времени.\n\nПротокол _WebSocket_ определяет две URI схемы\n\n+ `ws:` - нешифрованное соединение\n+ `wss:` - шифрованное соединение\n\n[к оглавлению](#Основы-web)\n\n## Что такое _JSON_?\n__JSON, JavaScript Object Notation__ — текстовый формат обмена данными, основанный на JavaScript.\n\nJSON представляет собой (в закодированном виде) одну из двух структур:\n\n+ _Набор пар «ключ:значение»_;\n+ _Упорядоченный набор значений_.\n\nКлючом может быть только строка (регистрозависимая: имена с буквами в разных регистрах считаются разными).\n\nВ качестве значений могут быть использованы:\n\n+ _Объект_ — неупорядоченное множество пар «ключ:значение», заключённое в фигурные скобки `{ }`. Ключ описывается строкой, между ним и значением стоит символ `:`. Пары ключ-значение отделяются друг от друга запятыми;\n+ _Массив (одномерный)_ — упорядоченное множество значений. Массив заключается в квадратные скобки `[ ]`. Значения разделяются запятыми.\n+ _Число_;\n+ _Литералы_ `true`, `false` и `null`;\n+ _Строка_ — упорядоченное множество из нуля или более символов Unicode, заключенное в кавычки `\" \"`. Символы могут быть указаны с использованием escape-последовательностей, начинающихся с обратной косой черты `\\`, или записаны шестнадцатеричным кодом в кодировке UTF-8 в виде `\\uFFFF`.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _JSON схема_?\n__JSON Schema__ — один из языков описания структуры JSON-документа, используя синтаксис JSON.\n\nЭто самоописательный язык: при его использовании для обработки данных и описания их допустимости могут использоваться одни и те же инструменты сериализации/десериализации.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _cookies_?\n__Сookies («куки»)__ — небольшой фрагмент данных, отправленный web-сервером и хранимый на устройстве пользователя. Всякий раз при попытке открыть страницу сайта, web-клиент пересылает соответствующие этому сайту cookies web-серверу в составе HTTP-запроса. Применяется для сохранения данных на стороне пользователя и на практике обычно используется для:\n\n+ аутентификации пользователя;\n+ хранения персональных предпочтений и настроек пользователя;\n+ отслеживания состояния сеанса доступа пользователя;\n+ ведения разнообразной статистики.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _«сессия»_?\n__Сессия__ – промежуток времени между первым и последним запросами, которые пользователь отправляет со своего устройства на сервер сайта. Завершается сессия в случае, если со стороны пользователя не поступало запросов в течение определенного промежутка времени или же при обрыве связи.\n\n[к оглавлению](#Основы-web)\n\n## Что такое _«авторизация»_ и _«аутентификация»_? Чем они отличаются?\n__Аутентификация__ - это проверка соответствия субъекта и того, за кого он пытается себя выдать, с помощью некой уникальной информации (отпечатки пальцев, цвет радужки, голос и тд.), в простейшем случае - с помощью имени входа и пароля.\n\n__Авторизация__ - это проверка и определение полномочий на выполнение некоторых действий (например, чтение файла) в соответствии с ранее выполненной аутентификацией.\n\nОчевидно, что это разные понятия, но при этом без первого не может быть второго и наоборот. То есть имея разрешение на работу, вы не сможете оказаться на рабочем месте без предъявления пропуска, равно как и нет смысла в демонстрации пропуска, если вы не планируете работать. Именно тот факт, что одного не бывает без другого, и вызывает у людей заблуждение, что это одно и то же.\n\n[к оглавлению](#Основы-web)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/)\n\n[Вопросы для собеседования](README.md)\n"
        },
        {
          "name": "xml.md",
          "type": "blob",
          "size": 18.4501953125,
          "content": "[Вопросы для собеседования](README.md)\n\n# XML\n+ [Что такое _XML_?](#Что-такое-xml)\n+ [Что такое _DTD_?](#Что-такое-dtd)\n+ [Чем _well-formed XML_ отличается от _valid XML_?](#Чем-well-formed-xml-отличается-от-valid-xml)\n+ [Что такое «_пространство имен_» в XML?](#Что-такое-пространство-имен-в-xml)\n+ [Что такое XSD? В чём его преимущества перед XML DTD?](#Что-такое-xsd-В-чём-его-преимущества-перед-xml-dtd)\n+ [Какие типы существуют в XSD?](#Какие-типы-существуют-в-xsd)\n+ [Какие вы знаете методы чтения XML? Опишите сильные и слабые стороны каждого метода.](#Какие-вы-знаете-методы-чтения-xml-Опишите-сильные-и-слабые-стороны-каждого-метода)\n+ [Когда следует использовать _DOM_, а когда _SAX_, _StAX_ анализаторы?](#Когда-следует-использовать-dom-а-когда-sax-stax-анализаторы)? \n+ [Какие вы знаете способы записи XML?](#Какие-вы-знаете-способы-записи-xml)\n+ [Что такое _JAXP_?](#Что-такое-jaxp)\n+ [Что такое _XSLT_?](#Что-такое-xslt)\n\n## Что такое _XML_?\n__XML, eXtensible Markup Language (расширяемый язык разметки)__ - язык с простым формальным синтаксисом, хорошо приспособленный для создания и обработки документов программами и одновременно удобный для чтения и создания документов человеком. \n\nXML расширяем, он не фиксирует разметку, используемую в документах, и разработчик волен создавать разметку в соответствии с потребностями конкретной области, будучи ограниченным лишь синтаксическими правилами языка.\n\n[к оглавлению](#xml)\n\n## Что такое _DTD_?\n__DTD, Document Type Definition (определение типа документа)__ — это заранее определённый свод правил, задающий связи между элементами и атрибутами. \n\n> Например, DTD для HTML гласит, что тэг `DIV` должен быть внутри тэга `BODY` и может встречаться многократно, `TITLE` — в `HEAD` и всего один раз, а `SCRIPT` – и там, и там сколь угодно раз.\n\nDTD обычно описывается непосредственно в документе в виде строки-формулировки, начинающейся с `<!DOCTYPE ... >` или отдельном файле.\n\n[к оглавлению](#xml)\n\n## Чем _well-formed XML_ отличается от _valid XML_?\nВ зависимости от уровня соответствия стандартам документ может быть «well-formed» («правильно построенный»), либо «valid» («действительный»). \n\nОсновные признаки _well-formed XML_ следуют из формального описания стандарта:\n\n+ Документ имеет ровно один корневой элемент, в котором лежат все остальные. То есть, `<document>...</document><appendix>...</appendix>` - это не XML-документ.\n+ Все открытые теги обязаны быть закрыты. HTML, например, допускает не закрывать многие теги (`<p>`, `<body>`, `<li>`, `<td>` и многие другие). В XML так делать нельзя.\n+ Для одиночных тегов (типа `<br>`) , чтобы отличать их от открывающих, предусмотрена специальная запись: `<br/>`. Но можно написать и полностью `<br></br>`.\n+ Имена тегов регистрозависимые. Если вы открываете тег `<SiteDescription>`, то его надо закрывать именно таким же, `</sitedescription>` не допускается.\n+ Теги не могут нарушать вложенность. Вот такого не должно быть: `<em><b>...</em></b>`.\n+ Все атрибуты тегов обязаны быть заключены в двойные кавычки (`\"`).\n+ Есть три символа - `<`, `>` и `&`, которые обязаны быть экранированы везде с помощью `&lt;`, `&gt;` и `&amp;`. Внутри атрибутов надо экранировать еще и двойную кавычку с помощью `&quot;`.\n+ Все символы в документе обязаны соответствовать заявленной кодировке.\n\nДокумент является _valid_, если он сформирован с соблюдением всех синтаксических правил корректности конкретного XML, т.е. соответствует _DTD_.\n\n__*well-formed XML* - корректен синтаксически (может быть разобран парсером), а _valid XML_ - корректен как синтаксически так и семантически (удовлетворяет правилам заранее описанных словаря и грамматики (DTD)).__\n\n[к оглавлению](#xml)\n\n## Что такое «_пространство имен_» в XML?\n__Пространство имён XML (XML namespace)__ - это идентифицируемая с помощью ссылки URI коллекция имен, используемых в XML документах для обозначения типов элементов и именования атрибутов. Пространство имен XML отличается от тех «пространств имен», которые обычно используются в компьютерных дисциплинах, тем, что в варианте для XML оно имеет внутреннюю структуру, и, с математической точки зрения, набором не является.\n\n> Пространства имён объявляются с помощью XML атрибута `xmlns`, значением которого должен быть _URI_ и префикса, однозначно идентифицирующего пространство имён каждого элемента.\n\nВсе имена элементов в пределах пространства имён должны быть уникальны.\n\nВ общем случае пространство имён XML не требует, чтобы был определён его словарь.\n\nXML-документ может содержать имена элементов и атрибутов из нескольких словарей XML. В каждом словаре задано своё пространство имён — так разрешается проблема неоднозначности имён элементов и атрибутов.\n\n[к оглавлению](#xml)\n\n## Что такое XSD? В чём его преимущества перед XML DTD?\n__XSD, XML Schema Definition, XML Schema (XML схема)__ — язык описания структуры XML-документа. В частности, XML Schema описывает:\n\n+ _словарь_ - имена элементов и атрибутов;\n+ _модель содержания_ - взаимосвязи между элементами и атрибутами, а также их \n+ _структуру_ документа;\n+ используемые _типы данных_.\n\n__Преимущества XSD перед DTD__ заключаются в следующем:\n\n+ DTD, в отличии от XSD, не является XML и имеет свой собственный синтаксис. В связи с этим могут возникать разнообразные проблемы с кодировкой и верификацией XML-документов. \n\n+ При использовании XSD XML-парсер может проверить не только правильность синтаксиса XML документа, но также его структуру, модель содержания и типы данных. В XML DTD существует лишь один тип данных – строка и если, например, в числовом поле будет текст, то документ всё же сможет пройти верификацию, так как XML DTD не сможет проверить тип данных.\n\n+ Нельзя поставить в соответствие одному XML документу больше одного DTD. А следовательно, и верифицировать документ можно лишь одним DTD описанием. XSD расширяем, и позволяет подключать несколько словарей для описания типовых задач.\n\n+ XSD обладает встроенными средствами документирования, позволяющими создавать самодостаточные документы, не требующие дополнительного описания.\n\n[к оглавлению](#xml)\n\n## Какие типы существуют в XSD?\n__Простой тип__ - это определение типа для значения, которое может использоваться в качестве содержимого элемента или атрибута. Этот тип данных не может содержать элементы или иметь атрибуты.\n\n```xsd\n<xsd:element name='price' type='xsd:decimal'/>\n...\n<price>45.50</price>\n```\n\n__Сложный тип__ - это определение типа для элементов, которые могут содержать атрибуты и другие элементы.\n\n```xsd\n<xsd:element name='price'>\n    <xsd:complexType base='xsd:decimal'>\n        <xsd:attribute name='currency' type='xsd:string'/>\n    </xsd:complexType>\n</xsd:element>\n...\n<price currency='US'>45.50</price>\n```\n[к оглавлению](#xml)\n\n## Какие вы знаете методы чтения XML? Опишите сильные и слабые стороны каждого метода.\n__DOM (Document Object Model)__ - _объектный_ - считывает XML, воссоздавая его в памяти в виде объектной структуры при этом XML документ представляется в виде набора тегов – узлов. Каждый узел может иметь неограниченное количество дочерних узлов. Каждый дочерний тоже может содержать несколько уровней потомков или не содержать их вовсе. Таким образом в итоге получается некое дерево.\n\n> ➖ Низкая скорость работы. \n\n> ➖ Расходует много памяти.\n\n> ➕ Прост в программировании.\n\n> ➕ Если в XML много объектов с перекрёстными ссылками друг на друга, достаточно дважды пройтись по документу: первый раз создать объекты без ссылок и заполнить словарь «название-объект», второй раз — восстановить ссылки.\n\n> ➕ При ошибке в XML в памяти остаётся полусозданная структура XML, которая будет автоматически уничтожена.\n\n> ➕ Пригоден как для чтения так и для записи.\n\n__SAX (Simple API for XML)__ _событийный_ - читает XML документ, реагируя на появляющиеся события (открывающий или закрывающий тег, строку, атрибут) вызовом предоставляемых приложением обработчиков событий. При этом, в отличии от DOM, не сохраняет документ в памяти.\n\n> ➕ Высокая скорость работы \n\n> ➕ Расходует мало памяти.\n\n> ➗ Довольно сложен в программировании.\n\n> ➖ Если в XML много объектов с перекрёстными ссылками друг на друга, надо организовать временное хранение строковых ссылок, чтобы потом, когда документ будет считан, преобразовать в указатели.\n\n> ➖ При ошибке в XML в памяти остаётся полусозданная структура предметной отрасли; программист должен своими руками корректно уничтожить её.\n\n> ➖ Пригоден только для чтения.\n\n__StAX (Stream API for XML)__ _потоковый_ - состоящий из двух наборов API для обработки XML, которые обеспечивают разные уровни абстракции. API с использованием курсора позволяет приложениям работать с XML как с потоком лексем (или событий); приложение может проверить статус анализатора и получить информацию о последней проанализированной лексеме, а затем перейти к следующей. Второй, высокоуровневый API, использующий итераторы событий, позволяет приложению обрабатывать XML как серию объектов событий, каждый из которых взаимодействует с фрагментом XML-структуры приложения. Всё, что требуется от приложения - это определить тип синтаксически разобранного события, отнести его к соответствующему конкретному типу и использовать соответствующие методы для получения информации, относящейся к событию.\n\n> ➗ Сохраняет преимущества, которые есть в SAX по сравнению с DOM.\n\n> ➕ Не основан на обратных вызовах обработчиков, приложению не придется обслуживать эмулированное состояние анализатора, как это происходит при использовании SAX.\n\n> ➖ Пригоден только для чтения.\n\n[к оглавлению](#xml)\n\n## Когда следует использовать _DOM_, а когда _SAX_, _StAX_ анализаторы?\n\nDOM - естественный выбор, когда объектом предметной области является сам XML: когда нужно знать и иметь возможность изменять структуру документа, а также в случае многократного использования информации из документа.\n\nДля быстрого одноразового чтения оптимальным является использование SAX или StAX.\n\n[к оглавлению](#xml)\n\n## Какие вы знаете способы записи XML?\n\n__Прямая запись__ - пишет XML тег за тегом, атрибут за атрибутом.\n\n> ➕ Высокая скорость работы.\n\n> ➕ Экономия памяти: при использовании не создаётся промежуточных объектов.\n\n> ➖ Пригоден только для записи.\n\n__Запись DOM (Document Object Model)__ - создаёт полную структуру XML и только потом записывает её.\n\n> ➖ Низкая скорость работы.\n\n> ➖ Не оптимальный расход памяти.\n\n> ➕ Пригоден как для записи, так и для чтения.\n\n[к оглавлению](#xml)\n\n## Что такое _JAXP_?\n__JAXP, The Java API for XML Processing (Java API для обработки XML)__ — набор API, упрощающих обработку XML данных в программах написанных на Java. Содержит реализации  DOM, SAX и StAX парсеров, поддерживает XSLT и возможность работать с DTD.\n\n[к оглавлению](#xml)\n\n## Что такое _XSLT_?\n__XSLT, eXtensible Stylesheet Language Transformations__ — язык преобразования XML-документов. \n\nXSLT создавался для применения в _XSL (eXtensible Stylesheet Language)_ - языке стилей для XML. Во время XSL-преобразования XSLT-процессор считывает XML-документ и таблицу(ы) стилей XSLT. На основе инструкций, которые процессор находит в таблице(ах) стилей XSLT, он вырабатывает новый XML-документ или его фрагмент.\n\n[к оглавлению](#xml)\n\n# Источники\n+ [Википедия](https://ru.wikipedia.org/wiki/XML)\n+ [CIT Forum](http://citforum.ru/internet/xnamsps/index.shtml#ns-decl)\n+ [Quizful](http://www.quizful.net/interview/java/xml-and-parsers)\n\n[Вопросы для собеседования](README.md)\n"
        }
      ]
    }
  ]
}