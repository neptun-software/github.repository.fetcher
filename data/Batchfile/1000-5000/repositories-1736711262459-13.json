{
  "metadata": {
    "timestamp": 1736711262459,
    "page": 13,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "vim/vim-win32-installer",
      "stars": 2226,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.bat text=auto eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "*.rej\n*.orig\n*.swp\n*~\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.06640625,
          "content": "[submodule \"vim\"]\n\tpath = vim\n\turl = https://github.com/vim/vim.git\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.9794921875,
          "content": "[![Build status](https://ci.appveyor.com/api/projects/status/0x8kevh62dkdt7mu?svg=true)](https://ci.appveyor.com/project/chrisbra/vim-win32-installer)\n[![GitHub All Releases](https://img.shields.io/github/downloads/vim/vim-win32-installer/total)](https://github.com/vim/vim-win32-installer/releases)\n[![Latest GitHub Release](https://img.shields.io/github/v/release/vim/vim-win32-installer)](https://github.com/vim/vim-win32-installer/releases/latest)\n\n\n# Vim Installer and Archives (Win32 and Win64)\n\nThis is a project for building Nightly and Stable Vim Windows build snapshots\nautomatically ([more information](https://vim.fandom.com/wiki/Where_to_download_Vim)).\n\n[Download](https://github.com/vim/vim-win32-installer/releases/latest) and execute the\nmost recent `gvim_x.y.pppp_x86.exe` file to install Vim (where `x.y` is the\nrelease version and `pppp` is the patch number). The exe files contain the\n(32bit) installer while the .zip files contain an archive of the 32bit (`_x86`)\nor 64bit versions (`_x64`). To install it, extract the archive and update your\nPATH variable. The installer will do that automatically and provide some\nadditional extensions (e.g. Edit with Vim menu).\nThe `gvim...pdb.zip` file only contains the corresponding pdb files for debugging the binaries.\n\nIf you need a dynamic interface to Perl, Python2, Python3, Ruby, <del>TCL,</del> Lua or\nRacket/MzScheme, make sure you also install the following. Vim will work\nwithout it, but some Plugin might need this additional dependency. (e.g.\n[Gundo](https://github.com/sjl/gundo.vim) needs a working Python2 installation,\n[Command-T](https://github.com/wincent/command-t) needs a working Ruby\ninstallation and [Neocomplete](https://github.com/Shougo/neocomplete.vim) needs\na working Lua installation). This means, those interpreters have to be\ninstalled in addition to Vim. Without it Vim won't be able to use that feature!\nYou can find those interperters here:\n\n* [Strawberry Perl](http://strawberryperl.com/) 5.32\n* <del>[ActiveTcl](http://www.activestate.com/activetcl/downloads) 8.6.6</del> (currently disabled)\n* [LuaBinaries](http://luabinaries.sourceforge.net/download.html) 5.4\n* [Python](https://www.python.org/downloads/) 2.7\n* [Python 3](https://www.python.org/downloads/) 3.8 or later\n* [Racket](https://download.racket-lang.org/) 8.7 (BC)\n* [RubyInstaller](http://rubyinstaller.org/downloads/) 3.2\n\nMake sure that you install the same architecture (32bit/64bit) for those\nlibraries that matches your Vim installation.\n\nFor Python 3, Vim is compiled against Python 3.12 using [Stable ABI](https://docs.python.org/3.12/c-api/stable.html), and this allows you to use Python 3.8 or any later version. See also `:help python3-stable-abi`.\n\nAdditionally the binaries include the new terminal feature for Vim and\ntherefore contain the winpty.dll (32bit or 64bit) and the winpty-agent.exe from\nthe [winpty repository](https://github.com/rprichard/winpty). This feature is\ncurrently considered experimental. Read the help at [:h\nterminal.txt](http://vimhelp.appspot.com/terminal.txt.html) for more\ninformation.\n\nFor supporting better encryption, it comes with the libsodium.dll from the\n[libsodium repository](https://github.com/jedisct1/libsodium/releases/1.0.19-RELEASE)\nSee the help at [:h 'cryptmethod'](https://vimhelp.org/options.txt.html#%27cryptmethod%27)\nfor more details.\n\nNote: The zip archive might be considered unsecure in Windows, causing Windows\nto display a dialog box \"These files might be harmful to your computer...\". If\nyou want to disable this warning, you need to \"unblock\" the zip file. Do that\nin the properties dialog of the zip file, first tab General and look for the\nsecurity section and click on \"Unblock\". However using a signed release might\nprevent that behaviour in Windows eventually (see also next paragraph).\n\nSee: [Vim Repository](https://github.com/vim/vim) for the Vim source.\n\n## Custom Patches\nNote: If you want to test some patches, place them in the patch directory with\nthe extension `.patch`. They will be applied before building Vim and the binary\nwill then be tested against the test suite.\n\n## Signed Builds\nCreating a signed binary and installer still requires manual effort, therefore\nnot every release will be signed. They will be provided on a best effort basis\noccasionaly. If there haven't been any signed\nreleases for a long time, feel free to request a new one by creating an\n[issue](https://github.com/vim/vim-win32-installer/issues) here.\n\nThanks to [SignPath.io](https://signpath.io?utm_source=foundation&utm_medium=github&utm_campaign=vim) for providing a free code signing service and to the [SignPath Foundation](https://signpath.org?utm_source=foundation&utm_medium=github&utm_campaign=vim) for a free code signing certificate to sign the builds.\n\n## Winget \nThe nightly builds will be automatically uploaded and submitted to the [winget\nrepository](https://github.com/microsoft/winget-pkgs/). So you can use the\n[winget](https://docs.microsoft.com/en-us/windows/package-manager/winget/)\ncommand line tool to update your vim installation and do not have to download\nand install new releases manually.\n\nThis is only done for the unsigned builds, because the signed builds currently\nstill require some manual steps to complete.\n\nThere will be 2 different types of Releases submitted to the winget Repository:\n\n### 1) `vim.vim.nightly` Releases\nEvery build will be uploaded to the winget package repository as\n`vim.vim.nightly` (nightly) build. You need to search for `vim.vim.nightly`.\n\n### 2) `vim.vim` (stable) Releases\nIn addition, approximately every 100 releases, a new stable release will be\nuploaded to the winget repository using the 'vim.vim' identifier. This should\nhappen approximately every month.\n\n\n# License & Copyright\n\nMost work was done by Ken Takata (@k-takata) and Christian Brabandt (@chrisbra).\n\nThe Vim license applies (see [:h\nlicense](http://vimhelp.appspot.com/uganda.txt.html#license)) to all the build\nscripts in this repository. Note, that Vim is included as a submodule and comes\nwith its own license (although is also released under the Vim license).\n"
        },
        {
          "name": "appveyor.bat",
          "type": "blob",
          "size": 16.3232421875,
          "content": "@echo off\n:: Batch file for building/testing Vim on AppVeyor\n\nsetlocal ENABLEDELAYEDEXPANSION\n\ncd %APPVEYOR_BUILD_FOLDER%\n\nif not defined APPVEYOR_REPO_TAG_NAME (\n\tfor /F %%I in ('git describe --tags --abbrev^=0') do set \"TAG_NAME=%%I\"\n) else (\n\tset \"TAG_NAME=%APPVEYOR_REPO_TAG_NAME%\"\n)\n:: Strip the first \"v\" from the tag name.\nset \"VER_NUM=%TAG_NAME:~1%\"\n:: Split the version into each component.\nfor /F \"delims=.-+ tokens=1-3\" %%I in (\"%VER_NUM%\") do (\n\tset \"MAJOR=%%I\"\n\tset \"MINOR=%%J\"\n\tset \"PATCHLEVEL=%%K\"\n)\n\nif /I \"%ARCH%\"==\"x64\" (\n\tset \"BIT=64\"\n) else (\n\tset \"BIT=32\"\n)\nset \"DEPENDENCIES=%APPVEYOR_BUILD_FOLDER%\\dependencies\"\n\n:: ----------------------------------------------------------------------\n:: Download URLs, local dirs and versions\n:: Lua\nset \"LUA_VER=54\"\nset \"LUA_RELEASE=5.4.2\"\nset \"LUA_URL=https://downloads.sourceforge.net/luabinaries/lua-%LUA_RELEASE%_Win%BIT%_dllw6_lib.zip\"\nset \"LUA_DIR=%DEPENDENCIES%\\Lua\"\n:: Perl\nset \"PERL_VER=532\"\nset \"PERL_RELEASE=5.32.1.1\"\nset \"PERL_URL=https://strawberryperl.com/download/%PERL_RELEASE%/strawberry-perl-%PERL_RELEASE%-%BIT%bit-portable.zip\"\nset \"PERL_DIR=%DEPENDENCIES%\\Strawberry\\perl\"\n:: Python2\nset \"PYTHON_VER=27\"\nset \"PYTHON_32_DIR=C:\\python%PYTHON_VER%\"\nset \"PYTHON_64_DIR=C:\\python%PYTHON_VER%-x64\"\nset \"PYTHON_DIR=!PYTHON_%BIT%_DIR!\"\n:: Python3\nset \"PYTHON3_VER=312\"\nset \"PYTHON3_RELEASE=3.12.0\"\nset \"PYTHON3_32_URL=https://www.python.org/ftp/python/%PYTHON3_RELEASE%/python-%PYTHON3_RELEASE%.exe\"\nset \"PYTHON3_64_URL=https://www.python.org/ftp/python/%PYTHON3_RELEASE%/python-%PYTHON3_RELEASE%-amd64.exe\"\nset \"PYTHON3_URL=!PYTHON3_%BIT%_URL!\"\nset \"PYTHON3_32_DIR=C:\\python%PYTHON3_VER%\"\nset \"PYTHON3_64_DIR=C:\\python%PYTHON3_VER%-x64\"\nset \"PYTHON3_DIR=!PYTHON3_%BIT%_DIR!\"\n:: Racket\nset \"RACKET_VER=3m_dcgt6o\"\nset \"RACKET_RELEASE=8.7\"\nset \"RACKET32_URL=https://users.cs.utah.edu/plt/installers/%RACKET_RELEASE%/racket-minimal-%RACKET_RELEASE%-i386-win32-bc.tgz\"\nset \"RACKET64_URL=https://users.cs.utah.edu/plt/installers/%RACKET_RELEASE%/racket-minimal-%RACKET_RELEASE%-x86_64-win32-bc.tgz\"\nset \"RACKET_URL=!RACKET%BIT%_URL!\"\nset \"RACKET_DIR=%DEPENDENCIES%\\racket\"\nset \"MZSCHEME_VER=%RACKET_VER%\"\n:: Ruby\nset \"RUBY_VER=32\"\nset \"RUBY_API_VER_LONG=3.2.0\"\nset \"RUBY_BRANCH=ruby_3_2\"\nset \"RUBY_RELEASE=3.2.2-1\"\nset \"RUBY_SRC_URL=https://github.com/ruby/ruby/archive/%RUBY_BRANCH%.zip\"\nset \"RUBY_URL=https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-%RUBY_RELEASE%/rubyinstaller-%RUBY_RELEASE%-%ARCH%.7z\"\nset \"RUBY32_DIR=%DEPENDENCIES%\\Ruby%RUBY_VER%\"\nset \"RUBY64_DIR=%DEPENDENCIES%\\Ruby%RUBY_VER%-x64\"\nset \"RUBY_DIR=!RUBY%BIT%_DIR!\"\n:: Tcl\nset \"TCL_VER_LONG=8.6\"\nset \"TCL_VER=%TCL_VER_LONG:.=%\"\nset \"TCL32_URL=http://dl.activestate.com/org/vim-win32/Tcl-8.6.6/latest/artifact/ActiveTcl-8.6.6.8607-MSWin32-x86-403667.exe\"\nset \"TCL64_URL=http://dl.activestate.com/org/vim-win32/Tcl-8.6.6/latest/artifact/ActiveTcl-8.6.6.8606-MSWin32-x64-401995.exe\"\nset \"TCL_URL=!TCL%BIT%_URL!\"\nset \"TCL_DIR=%DEPENDENCIES%\\Tcl\"\nset \"TCL_DLL=tcl%TCL_VER%t.dll\"\nset \"TCL_LIBRARY=%TCL_DIR%\\lib\\tcl%TCL_VER_LONG%\"\n:: Gettext\nset \"GETTEXT32_URL=https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.22.5a-v1.17-r3/gettext0.22.5a-iconv1.17-shared-32.zip\"\nset \"GETTEXT64_URL=https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.22.5a-v1.17-r3/gettext0.22.5a-iconv1.17-shared-64.zip\"\n:: winpty\nset \"WINPTY_URL=https://github.com/rprichard/winpty/releases/download/0.4.3/winpty-0.4.3-msvc2015.zip\"\n:: UPX\n::set \"UPX_URL=https://github.com/upx/upx/releases/download/v3.94/upx394w.zip\"\n:: ShellExecAsUser\nset \"SHELLEXECASUSER_URL=https://nsis.sourceforge.io/mediawiki/images/1/1d/ShellExecAsUserUnicodeUpdate.zip\"\n:: Libsodium\nset \"LIBSODIUM_URL=https://github.com/jedisct1/libsodium/releases/download/1.0.19-RELEASE/libsodium-1.0.19-msvc.zip\"\nset \"SODIUM_DIR=%DEPENDENCIES%\\libsodium\"\n\n:: Cygwin\nset \"CYGWIN_URL=https://cygwin.com/setup-x86_64.exe\"\nset \"CYGWIN_DIR=c:\\cygwin64\"\n:: ----------------------------------------------------------------------\n\n:: Update PATH\npath %PYTHON_DIR%;%PYTHON3_DIR%;%PERL_DIR%\\bin;%path%;%LUA_DIR%;%RUBY_DIR%\\bin;%RUBY_DIR%\\bin\\ruby_builtin_dlls;%RACKET_DIR%;%RACKET_DIR%\\lib\n\nif /I \"%1\"==\"\" (\n\tset \"target=build\"\n) else (\n\tset \"target=%1\"\n)\n\ngoto %target%_%ARCH%\necho Unknown build target.\nexit 1\n\n\n:install_x86\n:install_x64\n:: ----------------------------------------------------------------------\necho TAG_NAME: %TAG_NAME%\n@echo on\n\n:: Get Vim source code\ngit submodule update --init --depth 20\ngit submodule update --remote\n\n:: Apply experimental patches\npushd vim\nfor %%I in (..\\patch\\*.patch) do git apply -v %%I\npopd\n\nif not exist downloads mkdir downloads\nif not exist dependencies mkdir dependencies\n\n:: Update cygwin and add dependencies\nif not exist %CYGWIN_DIR% mkdir %CYGWIN_DIR%\ncall :downloadfile %CYGWIN_URL% %CYGWIN_DIR%\\setup-x86_64.exe\n%CYGWIN_DIR%\\setup-x86_64.exe -qnNdO -P jq,make,gettext-devel\n:: Initialise the new bash profile, just in case it is a new install.\n%CYGWIN_DIR%\\bin\\bash -lc true > nul\n\n:: Lua\ncall :downloadfile %LUA_URL% downloads\\lua.zip\n7z.exe x -y downloads\\lua.zip -o%LUA_DIR% > nul || exit 1\n\n:: Perl\ncall :downloadfile %PERL_URL% downloads\\perl.zip\n:: Extract only the \"perl\" folder.\n7z.exe x -y downloads\\perl.zip perl -o%PERL_DIR%\\.. > nul || exit 1\n\n:: Tcl\ngoto skiptcl\n\ncall :downloadfile %TCL_URL% downloads\\tcl.exe\nmkdir %DEPENDENCIES%\\ActiveTclTemp\nstart /wait downloads\\tcl.exe /extract:%DEPENDENCIES%\\ActiveTclTemp /exenoui /exenoupdates /quiet /norestart\nfor /D %%I in (%DEPENDENCIES%\\ActiveTclTemp\\*) do move %%I %TCL_DIR%\ncopy %TCL_DIR%\\bin\\%TCL_DLL% vim\\src\\\n\n:skiptcl\n\n:: Python 3\ncall :downloadfile %PYTHON3_URL% downloads\\python3.exe\ncmd.exe /c start /wait downloads\\python3.exe /quiet TargetDir=%PYTHON3_DIR%  Include_pip=0 Include_tcltk=0 Include_test=0 Include_tools=0 AssociateFiles=0 Shortcuts=0 Include_doc=0 Include_launcher=0 InstallLauncherAllUsers=0\n\n:: Ruby\n:: Download RubyInstaller binary\ncall :downloadfile %RUBY_URL% downloads\\ruby.7z\n7z.exe x -y downloads\\ruby.7z -o%DEPENDENCIES%\\ > nul || exit 1\nmove %DEPENDENCIES%\\rubyinstaller-%RUBY_RELEASE%-%ARCH% %RUBY_DIR% > nul || exit 1\n:: RubyInstaller is built by MinGW, so we cannot use header files from it.\n:: Download the source files and generate config.h for MSVC.\n@rem git clone https://github.com/ruby/ruby.git -b %RUBY_BRANCH% --depth 1 -q ../ruby\ncall :downloadfile %RUBY_SRC_URL% downloads\\ruby_src.zip\n:: Extract the files only we needed to reduce the building time.\n:: We need to use `^^` to escape `!` because we enable delayed expansion.\n7z.exe x -y downloads\\ruby_src.zip */bin */include */enc/Makefile.in */win32 */common.mk -ir^^!version.h -xr^^!README.* -xr^^!*/win32/*.c -xr^^!*/win32/*.h -o.. > nul || exit 1\nmove ..\\ruby-%RUBY_BRANCH% ..\\ruby > nul || exit 1\npushd ..\\ruby\ncall win32\\configure.bat\n@echo on\nnmake.exe .config.h.time || exit 1\nxcopy /s .ext\\include %RUBY_DIR%\\include\\ruby-%RUBY_API_VER_LONG%\npopd\n\n:: Racket\ncall :downloadfile %RACKET_URL% downloads\\racket.tgz\n7z.exe x -tgzip -so downloads/racket.tgz | 7z.exe x -y -aoa -si -ttar -o%DEPENDENCIES%\ntype NUL > %RACKET_DIR%\\include\\bc_suffix.h\n\n:: Install libintl.dll and iconv.dll\ncall :downloadfile %GETTEXT32_URL% downloads\\gettext32.zip\n7z.exe e -y downloads\\gettext32.zip -o%DEPENDENCIES%\\gettext32 > nul || exit 1\ncall :downloadfile %GETTEXT64_URL% downloads\\gettext64.zip\n7z.exe e -y downloads\\gettext64.zip -o%DEPENDENCIES%\\gettext64 > nul || exit 1\n\n:: Install winpty\ncall :downloadfile %WINPTY_URL% downloads\\winpty.zip\n7z.exe x -y downloads\\winpty.zip -o%DEPENDENCIES%\\winpty > nul || exit 1\nif /I \"%ARCH%\"==\"x64\" (\n\tcopy /Y %DEPENDENCIES%\\winpty\\x64_xp\\bin\\winpty.dll        vim\\src\\winpty64.dll\n\tcopy /Y %DEPENDENCIES%\\winpty\\x64_xp\\bin\\winpty-agent.exe  vim\\src\\\n) else (\n\tcopy /Y %DEPENDENCIES%\\winpty\\ia32_xp\\bin\\winpty.dll       vim\\src\\winpty32.dll\n\tcopy /Y %DEPENDENCIES%\\winpty\\ia32_xp\\bin\\winpty-agent.exe vim\\src\\\n)\n\n:: Install UPX\n::\n:: This is disabled, because UPX is known to be flagged as\n:: supsicious by AV vendors\n::\n::call :downloadfile %UPX_URL% downloads\\upx.zip\n::7z.exe e -y downloads\\upx.zip *\\upx.exe -ovim\\nsis > nul || exit 1\n\n:: Install ShellExecAsUser\ncall :downloadfile %SHELLEXECASUSER_URL% downloads\\shellexecasuser.zip\n7z.exe x -y downloads\\shellexecasuser.zip -o%DEPENDENCIES%\\shellexecasuser > nul || exit 1\ncopy /Y %DEPENDENCIES%\\shellexecasuser\\unicode\\ShellExecAsUser.dll \"%ProgramFiles(x86)%\\NSIS\\Plugins\\x86-unicode\"\n\n:: Install Libsodium\ncall :downloadfile %LIBSODIUM_URL% downloads\\libsodium.zip\n7z.exe x -y downloads\\libsodium.zip -o%DEPENDENCIES%\\ > nul || exit 1\nif /I \"%ARCH%\"==\"x64\" (\n\tcopy /Y %DEPENDENCIES%\\libsodium\\x64\\Release\\v143\\dynamic\\libsodium.dll        vim\\src\\libsodium.dll\n) else (\n\tcopy /Y %DEPENDENCIES%\\libsodium\\Win32\\Release\\v143\\dynamic\\libsodium.dll      vim\\src\\libsodium.dll\n)\n\n:: Show PATH for debugging\npath\n\n:: Install additional packages for Racket\nraco pkg install -i --auto r5rs-lib\n\n@echo off\ngoto :eof\n\n\n:build_x86\n:build_x64\n:: ----------------------------------------------------------------------\n@echo on\ncd vim\\src\n\n@rem Now it's not necessary.  When Vim is compiled, the current patch number\n@rem is automatically inserted.\n:: Replace VIM_VERSION_PATCHLEVEL in version.h with the actual patchlevel\n@rem %CYGWIN_DIR%\\bin\\bash -lc \"cd $(cygpath '%APPVEYOR_BUILD_FOLDER%')/vim/src && ../../scripts/patchlevel.sh\"\n@rem call ..\\..\\scripts\\patchlevel.cmd\n@rem type version.h\n\n:: Build GUI/CUI version\nnmake.exe -f Make_mvc.mak ^\n\tGUI=yes OLE=yes DIRECTX=yes VIMDLL=yes ^\n\tFEATURES=HUGE IME=yes ICONV=yes DEBUG=no ^\n\tDYNAMIC_PERL=yes PERL=%PERL_DIR% ^\n\tDYNAMIC_PYTHON=yes PYTHON=%PYTHON_DIR% ^\n\tDYNAMIC_PYTHON3=yes PYTHON3=%PYTHON3_DIR% DYNAMIC_PYTHON3_STABLE_ABI=yes ^\n\tDYNAMIC_LUA=yes LUA=%LUA_DIR% ^\n\tDYNAMIC_RUBY=yes RUBY=%RUBY_DIR% RUBY_MSVCRT_NAME=msvcrt ^\n\tDYNAMIC_MZSCHEME=yes MZSCHEME_VER=%RACKET_VER% \"MZSCHEME=%RACKET_DIR%\" ^\n\tTERMINAL=yes SODIUM=%SODIUM_DIR% ^\n\t|| exit 1\n:: Build translations\npushd po\n@rem nmake.exe -f Make_mvc.mak GETTEXT_PATH=%CYGWIN_DIR%\\bin VIMRUNTIME=..\\..\\runtime install-all || exit 1\nnmake.exe -f Make_mvc.mak \"GETTEXT_PATH=%DEPENDENCIES%\\gettext%BIT%\" \"VIMRUNTIME=..\\..\\runtime\" install-all || exit 1\npopd\n\n:check_executable\n:: ----------------------------------------------------------------------\nstart /wait .\\gvim.exe -silent -register\nstart /wait .\\gvim.exe -u NONE -c \"redir @a | ver | 0put a | wq!\" ver.txt\ntype ver.txt\n.\\vim.exe --version\n:: Print interface versions\nstart /wait .\\gvim.exe -u NONE -S ..\\..\\if_ver.vim -c quit\ntype if_ver.txt\n@echo off\ngoto :eof\n\n\n:package_x86\n:package_x64\n:: ----------------------------------------------------------------------\n@echo on\ncd vim\\src\n\n:: Check if we need to copy libgcc_s_sjlj-1.dll.\n%CYGWIN_DIR%\\bin\\bash -lc \"objdump -p $(cygpath '%DEPENDENCIES%\\gettext32')/libintl-8.dll | grep -q 'libgcc_s_sjlj-1\\.dll'\"\nif ERRORLEVEL 1 (\n\tset INCLUDE_LIBGCC=0\n) else (\n\tset INCLUDE_LIBGCC=1\n)\n\nmkdir GvimExt64\nmkdir GvimExt32\n:: Build both 64- and 32-bit versions of gvimext.dll for the installer\nstart /wait cmd /c \"%VCVARSALL% x64 && cd GvimExt && nmake.exe -f Make_mvc.mak CPU=AMD64 clean all > ..\\gvimext.log\"\ntype gvimext.log\ncopy GvimExt\\gvimext.dll   GvimExt\\gvimext64.dll\nmove GvimExt\\gvimext.dll   GvimExt64\\gvimext.dll\ncopy /Y GvimExt\\README.txt GvimExt64\\\ncopy /Y GvimExt\\*.inf      GvimExt64\\\ncopy /Y GvimExt\\*.reg      GvimExt64\\\nstart /wait cmd /c \"%VCVARSALL% x86 && cd GvimExt && nmake.exe -f Make_mvc.mak CPU=i386 clean all > ..\\gvimext.log\"\ntype gvimext.log\ncopy GvimExt\\gvimext.dll   GvimExt32\\gvimext.dll\ncopy /Y GvimExt\\README.txt GvimExt32\\\ncopy /Y GvimExt\\*.inf      GvimExt32\\\ncopy /Y GvimExt\\*.reg      GvimExt32\\\n\n:: Create zip packages\n7z.exe a -mx=9 ..\\..\\gvim_%VER_NUM%_%ARCH%_pdb.zip *.pdb\ncopy /Y ..\\README.txt ..\\runtime\ncopy /Y ..\\README.???.txt ..\\runtime\ncopy /Y ..\\uninstall.txt ..\\runtime\ncopy /Y ..\\vimtutor.bat ..\\runtime\ncopy /Y *.exe ..\\runtime\\\nif exist vim%BIT%.dll copy /Y vim%BIT%.dll ..\\runtime\\\ncopy /Y libsodium.dll ..\\runtime\\\ncopy /Y libsodium.dll ..\\..\\\ncopy /Y xxd\\*.exe ..\\runtime\ncopy /Y tee\\*.exe ..\\runtime\nmkdir ..\\runtime\\GvimExt64\nmkdir ..\\runtime\\GvimExt32\ncopy /Y GvimExt64\\*.*                    ..\\runtime\\GvimExt64\\\ncopy /Y %DEPENDENCIES%\\gettext64\\libiconv-2.dll      ..\\runtime\\GvimExt64\\\ncopy /Y %DEPENDENCIES%\\gettext64\\libintl-8.dll       ..\\runtime\\GvimExt64\\\ncopy /Y GvimExt32\\*.*                    ..\\runtime\\GvimExt32\\\ncopy /Y %DEPENDENCIES%\\gettext32\\libiconv-2.dll      ..\\runtime\\GvimExt32\\\ncopy /Y %DEPENDENCIES%\\gettext32\\libintl-8.dll       ..\\runtime\\GvimExt32\\\nif \"%INCLUDE_LIBGCC%\"==\"1\" (\n\tcopy /Y %DEPENDENCIES%\\gettext32\\libgcc_s_sjlj-1.dll ..\\runtime\\GvimExt32\\\n)\ncopy /Y ..\\..\\diff.exe ..\\runtime\\\ncopy /Y %DEPENDENCIES%\\gettext%BIT%\\libiconv-2.dll   ..\\runtime\\\ncopy /Y %DEPENDENCIES%\\gettext%BIT%\\libintl-8.dll    ..\\runtime\\\nif \"%INCLUDE_LIBGCC%-%BIT%\"==\"1-32\" (\n\tcopy /Y %DEPENDENCIES%\\gettext32\\libgcc_s_sjlj-1.dll ..\\runtime\\\n)\ncopy /Y winpty* ..\\runtime\\\ncopy /Y winpty* ..\\..\\\nset \"dir=vim%MAJOR%%MINOR%\"\nmkdir ..\\vim\\%dir%\nxcopy ..\\runtime ..\\vim\\%dir% /Y /E /V /I /H /R /Q /EXCLUDE:..\\..\\exclist.txt\n:: need to escape the ! because of delayedexpansion being active\n7z.exe a -mx=9 ..\\..\\gvim_%VER_NUM%_%ARCH%.zip ..\\vim\n\n:: Create installer\n@rem %CYGWIN_DIR%\\bin\\bash -lc \"cd $(cygpath '%APPVEYOR_BUILD_FOLDER%')/vim/runtime/doc && touch ../../src/auto/config.mk && make uganda.nsis.txt\"\npushd ..\\runtime\\doc\nnmake.exe -f Make_mvc.mak uganda.nsis.txt || exit 1\npopd\n\ncopy gvim.exe gvim_ole.exe\ncopy vim.exe vimw32.exe\ncopy tee\\tee.exe teew32.exe\ncopy xxd\\xxd.exe xxdw32.exe\ncopy install.exe installw32.exe\ncopy uninstall.exe uninstallw32.exe\npushd ..\\nsis\n\n:: Disable UPX\n@rem Disabled by default. To enable /DHAVE_UPX=1 on makensis.exe\n@rem sed -i '/^\\(!define HAVE_UPX\\)/d' gvim.nsi\n\n7z.exe x -y icons.zip > nul\nif /I \"%ARCH%\"==\"x64\" (\n\tset WIN64=1\n) else (\n\tset WIN64=0\n)\n\"%ProgramFiles(x86)%\\NSIS\\makensis.exe\" /INPUTCHARSET UTF8 /DVIMRT=..\\runtime /DGETTEXT=%DEPENDENCIES% /DWIN64=%WIN64% /DINCLUDE_LIBGCC=%INCLUDE_LIBGCC% /DPATCHLEVEL=%PATCHLEVEL% gvim.nsi \"/XOutFile ..\\..\\gvim_%VER_NUM%_%ARCH%.exe\"\npopd\n\n:: Create zipfile for signing with signpath.io\n:: This will create a single zip file that should be uploaded to signpath\n:: signpath can then sign each artifact inside the zip file\n:: (the Vim zip archive as well as the installer)\necho Creating Signpath Zip Archive\ncd %APPVEYOR_BUILD_FOLDER%\n7z.exe a -mx=1 unsigned-gvim_%VER_NUM%_%ARCH%.zip gvim_%VER_NUM%_%ARCH%.zip gvim*.exe\n\n@echo off\ngoto :eof\n\n\n:test_x86\n:test_x64\n:: ----------------------------------------------------------------------\n@echo on\nset \"PLTCOLLECTS=%RACKET_DIR%\\collects\"\nset \"PLTCONFIGDIR=%RACKET_DIR%\\etc\"\ncd vim\\src\\testdir\nnmake.exe -f Make_mvc.mak \"VIMPROG=..\\gvim.exe\" || exit 1\nnmake.exe -f Make_mvc.mak clean\nnmake.exe -f Make_mvc.mak \"VIMPROG=..\\vim.exe\" || exit 1\n\n@echo off\ngoto :eof\n\n\n:onsuccess_x64\ngoto :eof\n:onsuccess_x86\n:: ----------------------------------------------------------------------\n:: Turn off the draft status of the release when x86 is successfully finished.\n\nif not defined APPVEYOR_REPO_TAG_NAME goto :eof\n\ncall :get_release_id\n\n:: Turn off the draft status.\ncurl -X PATCH -H \"Authorization: token %auth_token%\" -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/%APPVEYOR_REPO_NAME%/releases/%REL_ID%\" -d \"{\\\"draft\\\": false}\"\ngoto :eof\n\n\n:onfailure_x64\ngoto :eof\n:onfailure_x86\n:: ----------------------------------------------------------------------\n:: Delete the release when x86 is failed.\n\nif not defined APPVEYOR_REPO_TAG_NAME goto :eof\n\ncall :get_release_id\n\n:: Delete the release.\ncurl -X DELETE -H \"Authorization: token %auth_token%\" -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/%APPVEYOR_REPO_NAME%/releases/%REL_ID%\"\ngoto :eof\n\n\n:get_release_id\n:: ----------------------------------------------------------------------\n:: Get the ID of the release. Set the result to %REL_ID%.\npath %PATH%;%CYGWIN_DIR%\\bin\n\ncurl -H \"Authorization: token %auth_token%\" -H \"Accept: application/vnd.github.v3+json\" \"https://api.github.com/repos/%APPVEYOR_REPO_NAME%/releases\" > releases.json\ntype releases.json | jq \".[] | {name, id} | select(.name == \\\"%TAG_NAME%\\\") | {id}[]\" > release_id.txt\ntype release_id.txt\nfor /F \"delims=\" %%I in (release_id.txt) do set \"REL_ID=%%I\"\ngoto :eof\n\n\n:downloadfile\n:: ----------------------------------------------------------------------\n:: call :downloadfile <URL> <localfile>\nif not exist %2 (\n\tcurl -f -L %1 -o %2\n)\nif ERRORLEVEL 1 (\n\trem Retry once.\n\tcurl -f -L %1 -o %2 || exit 1\n)\n@goto :eof\n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 6.951171875,
          "content": "version: \"{build}\"\n\nimage: Visual Studio 2022\n\nenvironment:\n  auth_token:\n    secure: Ren8cbJnovyLFJO+91+ZeMvHFuiN/gwss7avDjif0TdhD1rK5FdbH0DqegU87a5t\n\n  matrix:\n    - ARCH: x64\n    - ARCH: x86\n\nmatrix:\n  fast_finish: true\n\n# Shallow clone cannot be used when using git-submodule\nshallow_clone: false\n\nbuild:\n  verbosity: minimal\n\nbefore_build:\n  - >\n    if \"%APPVEYOR_REPO_TAG%/%APPVEYOR_REPO_BRANCH%\"==\"false/master\"\n    if not defined APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH\n    appveyor.exe exit\n  - 'ver'\n  - 'set \"VSWHERE=%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe\"'\n  - >\n    for /f \"usebackq delims=\" %%i\n    in (`\"%VSWHERE%\" -products * -latest -property installationPath`)\n    do (set VCVARSALL=\"%%i\\VC\\Auxiliary\\Build\\vcvarsall.bat\")\n  - 'call %VCVARSALL% %ARCH%'\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" install'\n\nbuild_script:\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" build'\n\nafter_build:\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" package'\n\ntest_script:\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" test'\n\nartifacts:\n  - path: gvim_*_x86.zip\n    name: gvim_x86\n  - path: gvim_*_x86_pdb.zip\n    name: gvim_x86_pdb\n  - path: gvim_*_x64.zip\n    name: gvim_x64\n  - path: gvim_*_x64_pdb.zip\n    name: gvim_x64_pdb\n  - path: gvim_*_x86.exe\n    name: gvim_x86_installer\n  - path: gvim_*_x64.exe\n    name: gvim_x64_installer\n  - path: unsigned*.zip\n    name: vim_zip_for_signing\n\nbefore_deploy:\n  - for /f \"delims=\" %%i in (gitlog.txt) do set GITLOG=%%i\n  # Remove the first 'v' from the tag name.\n  - set VIMVER=%APPVEYOR_REPO_TAG_NAME:~1%\n  - set URL=https://github.com/%APPVEYOR_REPO_NAME%/releases/download\n\ndeploy:\n  - provider: Webhook\n    url: https://app.signpath.io/API/v1/47c0047c-0c1d-42b2-a16c-4ea6907dc813/Integrations/AppVeyor?SigningPolicyId=297bf19e-ccf4-4c01-b6e6-c327ee23792d\n    # not needed by Signpath\n    # on_build_success: true\n    # on_build_failure: false\n    # on_build_status_changed: false\n    # artifact: /unsigned*.zip/\n    # method: POST\n    authorization:\n      secure: eX3iWU3dQqDdg8UHR7Br6tqtvlFlhXihHcV0y/oR2YhSj6XZ2Pl/KVLiczUBCc39WWG/Aa5AXafWxaHQC/s40g==\n\n    # Deploy only on tags\n    on:\n      APPVEYOR_REPO_TAG: true\n\n  - provider: GitHub\n    description: |\n      [![$(APPVEYOR_REPO_TAG_NAME)](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/total.svg)](https://github.com/$(APPVEYOR_REPO_NAME)/releases/tag/$(APPVEYOR_REPO_TAG_NAME))\n      Nightly Vim Windows build snapshots ([more information](https://vim.fandom.com/wiki/Where_to_download_Vim)).\n\n      **If you do not know what to use, use the 32bit installer (use the signed one, if available).**\n\n      Signed releases will occasionally be provided on a best effort approach.\n      ### Changes:\n\n      $(GITLOG)\n\n      <!--\n      _This release includes signed files_\n      -->\n      ### Files:\n      <!--  commented out, because will only be enabled once the signed files are uploaded manually.\n      #### :lock: Signed Files:\n      * [![gvim_$(VIMVER)_x86_signed.exe](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_signed.exe.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_signed.exe)\n        Signed 32-bit installer (*If you don't know what to use, use this one*)\n      * [![gvim_$(VIMVER)_x64_signed.exe](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_signed.exe.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_signed.exe)\n        Signed 64-bit installer\n      * [![gvim_$(VIMVER)_x86_signed.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_signed.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_signed.zip)\n        Signed 32-bit zip archive\n      * [![gvim_$(VIMVER)_x64_signed.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_signed.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_signed.zip)\n        Signed 64-bit zip archive\n      -->\n      #### :unlock: Unsigned Files:\n      * [![gvim_$(VIMVER)_x86.exe](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86.exe.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86.exe)\n        32-bit installer (*If you don't know what to use, use this one*)\n      * [![gvim_$(VIMVER)_x64.exe](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64.exe.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64.exe)\n        64-bit installer\n      * [![gvim_$(VIMVER)_x86.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86.zip)\n        32-bit zip archive\n      * [![gvim_$(VIMVER)_x64.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64.zip)\n        64-bit zip archive\n      * [![gvim_$(VIMVER)_x86_pdb.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_pdb.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x86_pdb.zip)\n        pdb files for debugging the corresponding 32-bit executable\n      * [![gvim_$(VIMVER)_x64_pdb.zip](https://img.shields.io/github/downloads/$(APPVEYOR_REPO_NAME)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_pdb.zip.svg?label=downloads&logo=vim)]($(URL)/$(APPVEYOR_REPO_TAG_NAME)/gvim_$(VIMVER)_x64_pdb.zip)\n        pdb files for debugging the corresponding 64-bit executable\n\n      <details>\n      <summary>Interface Information</summary>\n\n      * [Strawberry Perl](http://strawberryperl.com/) 5.32\n      <!-- * [ActiveTcl](http://www.activestate.com/activetcl/downloads) 8.6.6 -->\n      * [LuaBinaries](http://luabinaries.sourceforge.net/download.html) 5.4\n      * [Python](https://www.python.org/downloads/) 2.7\n      * [Python3](https://www.python.org/downloads/) 3.8 or later\n      * [Racket](https://download.racket-lang.org/) 8.7 (BC)\n      * [RubyInstaller](http://rubyinstaller.org/downloads/) 3.2\n      * [libsodium](https://download.libsodium.org/libsodium/) 1.0.19\n      </details>\n\n      See the [README](https://github.com/vim/vim-win32-installer/blob/master/README.md) for detail.\n    auth_token: $(auth_token)\n    artifact: /^gvim_.*/\n    draft: true\n    prerelease: false\n\n    # Deploy only on tags\n    on:\n      APPVEYOR_REPO_TAG: true\n\n      # Cache is being disabled to allow signpath to sign the results\n\n      #cache:\n      #  - downloads -> appveyor.bat\n\non_success:\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" onsuccess'\n\non_failure:\n  - '\"%APPVEYOR_BUILD_FOLDER%\\appveyor.bat\" onfailure'\n\n# vim: ts=2 sw=2 et\n"
        },
        {
          "name": "diff.exe",
          "type": "blob",
          "size": 66.5,
          "content": null
        },
        {
          "name": "exclist.txt",
          "type": "blob",
          "size": 0.5859375,
          "content": ".info\n.desktop\nMakefile\ndoc\\doctags.c\ndoc\\doctags.vim\ndoc\\evim-\ndoc\\evim.1\ndoc\\evim.man\ndoc\\Make_all.mak\ndoc\\Make_mvc.mak\ndoc\\makehtml.awk\ndoc\\maketags.awk\ndoc\\vim-\ndoc\\vim.1\ndoc\\vim.man\ndoc\\vim2html.pl\ndoc\\vimdiff-\ndoc\\vimdiff.1\ndoc\\vimdiff.man\ndoc\\vimtutor-\ndoc\\vimtutor.1\ndoc\\vimtutor.man\ndoc\\xxd-\ndoc\\xxd.1\ndoc\\xxd.man\nsyntax\\testdir\nsyntax\\generator\nprint\\\nhi16-action-make.png\nhi22-action-make.png\nvim16x16.gif\nvim16x16.png\nvim16x16.xpm\nvim32x32.gif\nvim32x32.png\nvim32x32.xpm\nvim48x48.gif\nvim48x48.png\nvim48x48.xpm\nvimlogo.cdr\nvimlogo.eps\nvimlogo.gif\nvimlogo.pdf\nvimlogo.svg\nvimlogo.xpm\nicons\\\n"
        },
        {
          "name": "gitlog.txt",
          "type": "blob",
          "size": 1.1044921875,
          "content": "* [tests: Load screendump files with \"git vimdumps\"](https://github.com/vim/vim/commit/5eaacef18eb6fc99617c008cf436d304aa4328d0)\\n* [9.1.1006](https://github.com/vim/vim/commit/9eff3ee81839d67999491d293879ada134df2d3e): PmenuMatch completion highlight can be combined\\n* [9.1.1005](https://github.com/vim/vim/commit/9fddb8ae770be3e16545dd4c2f4cfaad8f62cb40): completion text is highlighted even with no pattern found\\n* [9.1.1004](https://github.com/vim/vim/commit/ebb08d591314af4262de5599d2041458d547e3ef): tests: a few termdebug tests are flaky\\n* [9.1.1003](https://github.com/vim/vim/commit/c9a1e257f1630a0866447e53a564f7ff96a80ead): \\[security\\]: heap-buffer-overflow with visual mode\\n* [runtime(doc): add package-\\<name> helptags for included packages](https://github.com/vim/vim/commit/9598a6369bce32d3da831e8968caf4625985ac3c)\\n* [9.1.1002](https://github.com/vim/vim/commit/c10342da449155b874ddc4b4a5beb92159ee96b7): Vim9: unknown func error with interface declaring func var\\n* [runtime(filetype): don't detect string interpolation as angular](https://github.com/vim/vim/commit/668e9f24037fc7c362ffdf5fc1d5c5b1a8b0e855)\n"
        },
        {
          "name": "if_ver.vim",
          "type": "blob",
          "size": 0.5302734375,
          "content": "\" Print all interface versions and write the result into if_ver.txt.\n\nredir! > if_ver.txt\necho \"*** Interface versions ***\"\necho \"\\nLua:\"\nlua print(_VERSION)\n\" echo \"\\nLuaJIT:\"\n\" lua print(jit.version)\necho \"\\nMzScheme:\"\nmzscheme (display (version))\necho \"\\nPerl:\"\nperl print $^V\necho \"\\nPython 2:\"\npython import sys; print sys.version\necho \"\\nPython 3:\"\npython3 import sys; print(sys.version)\necho \"\\nRuby:\"\nruby print RUBY_VERSION\necho \"\\nTcl:\"\ntcl puts [info patchlevel]\necho \"\\n\"\necho \"\\n $VIMRUNTIME\"\necho $VIMRUNTIME\necho \"\\n\"\nredir END\n"
        },
        {
          "name": "patch",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "vim",
          "type": "commit",
          "content": null
        }
      ]
    }
  ]
}