{
  "metadata": {
    "timestamp": 1736711258959,
    "page": 4,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "DiligentGraphics/DiligentEngine",
      "stars": 3686,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".clang-format",
          "type": "blob",
          "size": 9.796875,
          "content": "---\n# https://clang.llvm.org/docs/ClangFormatStyleOptions.html\n\nLanguage:        Cpp\n# BasedOnStyle:  Microsoft\n\n# The extra indent or outdent of access modifiers, e.g. public:.\nAccessModifierOffset: -4\n# class\n# {\n# public:\n#\n\n\n# If true, horizontally aligns arguments after an open bracket.\n# This applies to round brackets (parentheses), angle brackets and square brackets.\nAlignAfterOpenBracket: Align\n# Align:\n# someLongFunction(argument1,\n#                  argument2);\n\n\n# If true, aligns consecutive C/C++ preprocessor macros.\nAlignConsecutiveMacros: true\n# true:\n# #define SHORT_NAME       42\n# #define LONGER_NAME      0x007f\n# #define EVEN_LONGER_NAME (2)\n# #define foo(x)           (x * x)\n# #define bar(y, z)        (y + z)\n\n\n# If true, aligns consecutive assignments.\nAlignConsecutiveAssignments: true\n# true:\n# int aaaa = 12;\n# int b    = 23;\n# int ccc  = 23;\n\n\n# If true, aligns consecutive declarations.\nAlignConsecutiveDeclarations: true\n# true:\n# int         aaaa = 12;\n# float       b = 23;\n# std::string ccc = 23;\n\n\nAlignEscapedNewlines: Left\n# Left:\n# #define A   \\\n#   int aaaa; \\\n#   int b;    \\\n#   int dddddddddd;\n\n\n# If true, horizontally align operands of binary and ternary expressions.\nAlignOperands:   false\n\n\n# If true, aligns trailing comments.\nAlignTrailingComments: true\n# true:\n# int a;     // My comment a\n# int b = 2; // comment  b\n\n\n# If a function call or braced initializer list doesn't fit on a line,\n# allow putting all arguments onto the next line, even if BinPackArguments is false.\nAllowAllArgumentsOnNextLine: true\n# true:\n# callFunction(a,\n#              b,\n#              c,\n#              d);\n\n\n# If a constructor definition with a member initializer list doesn't fit on a single line,\n# allow putting all member initializers onto the next line, if 'ConstructorInitializerAllOnOneLineOrOnePerLine'\n# is true. Note that this parameter has no effect if 'ConstructorInitializerAllOnOneLineOrOnePerLine' is false.\nAllowAllConstructorInitializersOnNextLine: true\n# true:\n# MyClass::MyClass() :\n#     member0(0), member1(2) {}\n\n\n# If the function declaration doesn't fit on a line, allow putting all parameters\n# of a function declaration onto the next line even if BinPackParameters is false.\nAllowAllParametersOfDeclarationOnNextLine: false\n#false:\n#void myFunction(int a,\n#                int b,\n#                int c);\n\n\nAllowShortBlocksOnASingleLine: Always\n# Always:\n# while (true) {}\n# while (true) {continue;}\n\n\nAllowShortCaseLabelsOnASingleLine: true\n# true:\n# switch (a)\n# {  \n#     case 1: x = 1; break;  \n\n\nAllowShortFunctionsOnASingleLine: All\nAllowShortLambdasOnASingleLine: Inline\nAllowShortIfStatementsOnASingleLine: Always\nAllowShortLoopsOnASingleLine: true\n\n# The function definition return type breaking style to use.\n# This option is deprecated and is retained for backwards compatibility.\nAlwaysBreakAfterDefinitionReturnType: None\n\nAlwaysBreakAfterReturnType: None\nAlwaysBreakBeforeMultilineStrings: false\nAlwaysBreakTemplateDeclarations: No\n\n# If false, a function call's arguments will either be all on the same line or will have one line each.\nBinPackArguments: true\n# false:\n# void f() {\n#   f(aaaaaaaaaaaaaaaaaaaa,\n#     aaaaaaaaaaaaaaaaaaaa,\n#     aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa);\n# }\n\n\n# If false, a function declaration's or function definition's parameters will\n# either all be on the same line or will have one line each.\nBinPackParameters: false\n# false:\n# void f(int aaaaaaaaaaaaaaaaaaaa,\n#        int aaaaaaaaaaaaaaaaaaaa,\n#        int aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa) {}\n\n\n# Cuatom: Configure each individual brace in BraceWrapping.\nBreakBeforeBraces: Custom\n\nBraceWrapping:\n  AfterCaseLabel: true\n  # true:\n  # case 1\n  # {\n  #     bar();\n  #     break;\n  # }\n\n\n  AfterClass: true\n  # true:\n  # class A\n  # {\n\n\n  # Only wrap braces after a multi-line control statement.\n  AfterControlStatement: Always\n  # MultiLine:\n  # if (foo && bar)\n  # {\n  #     quux();\n  # }\n  # while (foo || bar)\n  # {}    \n\n\n  AfterEnum: true\n  # true:\n  # enum X : int\n  # {\n  #     B\n  # };\n\n\n  AfterFunction: true\n  # void foo()\n  # {\n  #     bar();\n  #     bar2();\n  # }\n\n\n  AfterNamespace: true\n  # true:\n  # namespace\n  # {\n  # int foo();\n\n\n  # Wrap ObjC definitions (interfaces, implementations...). @autoreleasepool and @synchronized\n  # blocks are wrapped according to AfterControlStatement flag.\n  AfterObjCDeclaration: true\n\n\n  AfterStruct: true\n  # true:\n  # struct foo\n  # {\n  #     int x;\n  # };\n\n\n  AfterUnion: true\n  # true:\n  # union foo\n  # {\n  #     int x;\n  # }\n\n\n  AfterExternBlock: true\n  # true:\n  # extern \"C\"\n  # {\n  #     int foo();\n  # }\n\n\n  BeforeCatch: true\n  # true:\n  # }\n  # catch ()\n  \n\n  BeforeElse: true\n  # true:\n  # }\n  # else\n\n\n  # Indent the wrapped braces themselves.\n  IndentBraces: false\n\n  # If false, empty function body can be put on a single line\n  SplitEmptyFunction: false\n\n  # If false, empty record (e.g. class, struct or union) body can be put on a single line.\n  SplitEmptyRecord: false\n\n  #  If false, empty namespace body can be put on a single line.\n  SplitEmptyNamespace: false\n\n# The way to wrap binary operators.\nBreakBeforeBinaryOperators: None\n\n\nBreakBeforeInheritanceComma: false\n\nBreakInheritanceList: AfterColon\n# AfterColon:\n# class Foo :\n#     Base1,\n#     Base2\n# {};\n\n\n# If true, ternary operators will be placed after line breaks.\nBreakBeforeTernaryOperators: false\n# false:\n# veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongDescription ?\n#     firstValue :\n#     SecondValueVeryVeryVeryVeryLong;\n\nBreakConstructorInitializersBeforeComma: false\n\nBreakConstructorInitializers: AfterColon\n# Constructor() :\n#     initializer1(),\n#     initializer2()\n\nBreakAfterJavaFieldAnnotations: false\n\n# Allow breaking string literals when formatting.\nBreakStringLiterals: false\n\n# A column limit of 0 means that there is no column limit. In this case, clang-format will\n# respect the input's line breaking decisions within statements unless they contradict other rules.\nColumnLimit: 0\n\n# A regular expression that describes comments with special meaning, which should not be split into lines or otherwise changed.\nCommentPragmas:  '^ IWYU pragma:'\n\n# If true, consecutive namespace declarations will be on the same line.\nCompactNamespaces: false\n# false:\n# namespace Foo\n# {\n# namespace Bar\n# {\n# }\n# }\n\n# If the constructor initializers don't fit on a line, put each initializer on its own line.\nConstructorInitializerAllOnOneLineOrOnePerLine: true\n\nConstructorInitializerIndentWidth: 4\nContinuationIndentWidth: 4\n\n# If true, format braced lists as best suited for C++11 braced lists.\nCpp11BracedListStyle: true\nDerivePointerAlignment: false\nDisableFormat:   false\nExperimentalAutoDetectBinPacking: false\n# If true, clang-format adds missing namespace end comments and fixes invalid existing ones.\nFixNamespaceComments: true\n\n# A vector of macros that should be interpreted as foreach loops instead of as function calls.\nForEachMacros:\n  - foreach\n  - Q_FOREACH\n  - BOOST_FOREACH\n\nIncludeBlocks:   Preserve\nIncludeCategories:\n  - Regex:           '^\"(llvm|llvm-c|clang|clang-c)/'\n    Priority:        2\n    SortPriority:    0\n  - Regex:           '^(<|\"(gtest|gmock|isl|json)/)'\n    Priority:        3\n    SortPriority:    0\n  - Regex:           '.*'\n    Priority:        1\n    SortPriority:    0\nIncludeIsMainRegex: '(Test)?$'\n\n# Indent case labels one level from the switch statement.\nIndentCaseLabels: true\n#   true:\n#   switch(foo)\n#   {\n#       case bar:\n\nIndentGotoLabels: true\n\n# The preprocessor directive indenting style to use.\nIndentPPDirectives: AfterHash\n# #if FOO\n# #  if BAR\n# #    include <foo>\n# #  endif\n# #endif\n\n\nIndentWidth:     4\nIndentWrappedFunctionNames: false\nJavaScriptQuotes: Leave\nJavaScriptWrapImports: true\n\n# If true, the empty line at the start of blocks is kept.\nKeepEmptyLinesAtTheStartOfBlocks: true\nMacroBlockBegin: ''\nMacroBlockEnd:   ''\n\n# The maximum number of consecutive empty lines to keep.\nMaxEmptyLinesToKeep: 10000\n\n# The indentation used for namespaces.\nNamespaceIndentation: None\n\nObjCBinPackProtocolList: Auto\nObjCBlockIndentWidth: 4\nObjCSpaceAfterProperty: false\nObjCSpaceBeforeProtocolList: true\nPenaltyBreakAssignment: 2\nPenaltyBreakBeforeFirstCallParameter: 19\nPenaltyBreakComment: 300\nPenaltyBreakFirstLessLess: 120\nPenaltyBreakString: 1000\nPenaltyBreakTemplateDeclaration: 10\nPenaltyExcessCharacter: 1000000\nPenaltyReturnTypeOnItsOwnLine: 1000\n\nPointerAlignment: Left\n# left:\n# int* a;\n# int& b;\n\n# If true, clang-format will attempt to re-flow comments.\nReflowComments:  false\n\nSortIncludes:    false\nSortUsingDeclarations: false\nSpaceAfterCStyleCast: false\n# false:\n# (int)i;\n\n\nSpaceAfterLogicalNot: false\n# false:\n# !bar();\n\nSpaceAfterTemplateKeyword: true\n# true:\n# template <typename>\n\n\nSpaceBeforeAssignmentOperators: true\n# true:\n# int a =\n\n# If true, a space will be inserted before a C++11 braced list used to\n# initialize an object (after the preceding identifier or type).\nSpaceBeforeCpp11BracedList: false\n# false:\n# vector<int>{1, 2, 3};\n\n\nSpaceBeforeCtorInitializerColon: true\n# true:\n# Foo::Foo() : a(a) {}\n\n\nSpaceBeforeInheritanceColon: true\n# true:\n# class Foo : Bar {}  \n\n\n# Put a space before opening parentheses only after control statement keywords (for/if/while...)\nSpaceBeforeParens: ControlStatements\n# ControlStatements:\n# void f() {\n#   if (true) {\n#     f();\n#   }\n# }\n\n\nSpaceBeforeRangeBasedForLoopColon: true\n# true:\n# for (auto v : values) {}\n\n\nSpaceInEmptyBlock: false\n# false:\n# void f() {}\n\n\nSpaceInEmptyParentheses: false\n# false:\n# f();\n\nSpacesBeforeTrailingComments: 1\n\nSpacesInAngles:  false\n# false:\n# static_cast<int>(arg);\n\n\nSpacesInContainerLiterals: false\n# false:\n# var arr = [1, 2, 3];\n\n\nSpacesInCStyleCastParentheses: false\n# false:\n# x = (int32)y\n\n\nSpacesInParentheses: false\n# false:\n# t f(Deleted &) & = delete;\n\nSpacesInSquareBrackets: false\n# false:\n# int a[5];\n\n\nStandard:        Latest\n\nStatementMacros:\n  - Q_UNUSED\n  - QT_REQUIRE_VERSION\nTabWidth:        4\nUseTab:          Never\n...\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.013671875,
          "content": "build\nout\n.vs\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.427734375,
          "content": "[submodule \"DiligentCore\"]\n\tpath = DiligentCore\n\turl = https://github.com/DiligentGraphics/DiligentCore.git\n[submodule \"DiligentTools\"]\n\tpath = DiligentTools\n\turl = https://github.com/DiligentGraphics/DiligentTools.git\n[submodule \"DiligentSamples\"]\n\tpath = DiligentSamples\n\turl = https://github.com/DiligentGraphics/DiligentSamples.git\n[submodule \"DiligentFX\"]\n\tpath = DiligentFX\n\turl = https://github.com/DiligentGraphics/DiligentFX.git\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 1.986328125,
          "content": "cmake_minimum_required (VERSION 3.6)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\n# Generate XCode schema files\nset(CMAKE_XCODE_GENERATE_SCHEME TRUE)\n# Make malloc write 0xAA to newly allocated memory and 0x55 to deallocated memory\nset(CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE YES)\n# Place guard pages on each side of large (4096 bytes or more) buffers\nset(CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES YES)\n\nproject(DiligentEngine)\n\noption(DILIGENT_BUILD_TOOLS \"Build DiligentTools module\" ON)\noption(DILIGENT_BUILD_FX \"Build DiligentFX module\" ON)\noption(DILIGENT_BUILD_SAMPLES \"Build DiligentSamples module\" ON)\n\nadd_subdirectory(DiligentCore)\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/DiligentCorePro\")\n    add_subdirectory(DiligentCorePro)\nendif()\n\nif(${DILIGENT_BUILD_TOOLS})\n    add_subdirectory(DiligentTools)\nelse()\n    if(${DILIGENT_BUILD_FX})\n        message(\"Disabling DiligentFX module as it requires DiligentTools module to be enabled\")\n        set(DILIGENT_BUILD_FX OFF CACHE BOOL \"Build DiligentFX module\" FORCE)\n    endif()\n\n    if (${DILIGENT_BUILD_SAMPLES})\n        message(\"Disabling DiligentSamples module as it requires DiligentTools module to be enabled\")\n        set(DILIGENT_BUILD_SAMPLES OFF CACHE BOOL \"Build DiligentSamples module\" FORCE)\n    endif()\n\n    if (${DILIGENT_BUILD_UNITY_PLUGIN})\n        message(\"Disabling unity plugin as it requires DiligentTools module to be enabled\")\n        set(DILIGENT_BUILD_UNITY_PLUGIN OFF CACHE BOOL \"Build Unity plugin\" FORCE)\n    endif()\nendif()\n\nif(${DILIGENT_BUILD_FX})\n    add_subdirectory(DiligentFX)\nendif()\n\nif(${DILIGENT_BUILD_SAMPLES})\n    add_subdirectory(DiligentSamples)\nendif()\n\nif(TARGET GLTFViewer)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT GLTFViewer)\nelseif(TARGET Asteroids)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT Asteroids)\nelseif(TARGET Atmosphere)\n    set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT Atmosphere)\nendif()\n\nif(EXISTS \"${CMAKE_CURRENT_SOURCE_DIR}/DiligentCommunity\")\n    add_subdirectory(DiligentCommunity)\nendif()\n"
        },
        {
          "name": "DiligentCore",
          "type": "commit",
          "content": null
        },
        {
          "name": "DiligentFX",
          "type": "commit",
          "content": null
        },
        {
          "name": "DiligentSamples",
          "type": "commit",
          "content": null
        },
        {
          "name": "DiligentTools",
          "type": "commit",
          "content": null
        },
        {
          "name": "License.txt",
          "type": "blob",
          "size": 9.9345703125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n"
        },
        {
          "name": "Media",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 73.4140625,
          "content": "# Diligent Engine <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/diligentgraphics-logo.png\" height=64 align=\"right\" valign=\"middle\">\n**A Modern Cross-Platform Low-Level 3D Graphics Library and Rendering Framework**\n[![Tweet](https://img.shields.io/twitter/url/http/shields.io.svg?style=social)](https://twitter.com/intent/tweet?text=An%20easy-to-use%20cross-platform%20graphics%20library%20that%20takes%20full%20advantage%20of%20%23Direct3D12%20and%20%23VulkanAPI&url=https://github.com/DiligentGraphics/DiligentEngine)\n\n[Diligent Engine](http://diligentgraphics.com/diligent-engine/) is a lightweight cross-platform graphics\nAPI abstraction library and rendering framework. It is designed to take full advantage of Direct3D12, Vulkan,\nMetal and WebGPU, while supporting older platforms via Direct3D11, OpenGL, OpenGLES and WebGL. Diligent Engine\nexposes common front-end  API and uses HLSL as universal shading language on all platforms and rendering back-ends. \nPlatform-specific shader representations (GLSL, MSL, DX bytecode or SPIRV) can be used with corresponding back-ends.\nThe engine is intended to be used as graphics subsystem in a game engine or any other 3D application. \nIt is distributed under [Apache 2.0 license](License.txt) and is free to use.\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](License.txt)\n[![Chat on Discord](https://img.shields.io/discord/730091778081947680?logo=discord)](https://discord.gg/t7HGBK7)\n[![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/DiligentGraphics/DiligentEngine?svg=true)](https://ci.appveyor.com/project/DiligentGraphics/diligentengine)\n\n## Supported Platforms and Low-Level Graphics APIs\n\n| Platform                                                                                                                                     | D3D11              | D3D12              |  OpenGL/GLES       | Vulkan                          | Metal                           | WebGPU                          |  Build Status                    |\n| -------------------------------------------------------------------------------------------------------------------------------------------- | ------------------ |------------------- | ------------------ | ------------------------------- | ------------------------------- | ------------------------------- | -------------------------------- |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/windows-logo.png\" width=24 valign=\"middle\"> Windows             | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark: | :heavy_check_mark:              | -                               | :heavy_check_mark: <sup>3</sup> |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-windows.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-windows.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/uwindows-logo.png\" width=24 valign=\"middle\"> Universal Windows  | :heavy_check_mark: | :heavy_check_mark: | -                  | -                               | -                               | -                               |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-windows.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-windows.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/linux-logo.png\" width=24 valign=\"middle\"> Linux                 | -                  | -                  | :heavy_check_mark: | :heavy_check_mark:              | -                               | :heavy_check_mark: <sup>3</sup> |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-linux.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-linux.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/android-logo.png\" width=24 valign=\"middle\"> Android             | -                  | -                  | :heavy_check_mark: | :heavy_check_mark:              | -                               | -                               |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-android.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-android.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/macos-logo.png\" width=24 valign=\"middle\"> MacOS                 | -                  | -                  | :heavy_check_mark: | :heavy_check_mark: <sup>1</sup> | :heavy_check_mark: <sup>2</sup> | :heavy_check_mark: <sup>3</sup> |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/apple-logo.png\" width=24 valign=\"middle\"> iOS                   | -                  | -                  | :heavy_check_mark: | :heavy_check_mark: <sup>1</sup> | :heavy_check_mark: <sup>2</sup> | -                               |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/tvos-logo.png\" width=24 valign=\"middle\"> tvOS                   | -                  | -                  | -                  | :heavy_check_mark: <sup>1</sup> | :heavy_check_mark: <sup>2</sup> | -                               |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-apple.yml?query=branch%3Amaster) |\n| <img src=\"https://github.com/DiligentGraphics/DiligentCore/blob/master/media/emscripten-logo.png\" width=24 valign=\"middle\"> Emscripten       | -                  | -                  | :heavy_check_mark: | -                               | -                               | :heavy_check_mark:              |  [![Build Status](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-emscripten.yml/badge.svg?branch=master)](https://github.com/DiligentGraphics/DiligentEngine/actions/workflows/build-emscripten.yml?query=branch%3Amaster) |\n\n\n<sup>1</sup> Vulkan API is not natively supported on MacOS, iOS and tvOS platforms and requires a Vulkan portability implementation such as [MoltenVK](https://github.com/KhronosGroup/MoltenVK)\nor [gfx-portability](https://github.com/gfx-rs/portability).\n\n<sup>2</sup> Available under commercial license - please contact us for details.\n\n<sup>3</sup> Requires a native implementation of WebGPU, [Dawn](https://dawn.googlesource.com/dawn) is recommended.\n\n## Features\n\n* Cross-platform\n  * Exact same client code for all supported platforms and rendering backends\n    * No `#if defined(_WIN32)` ... `#elif defined(LINUX)` ... `#elif defined(ANDROID)` ...\n    * No `#if defined(D3D11)` ... `#elif defined(D3D12)` ... `#elif defined(OPENGL)` ...\n  * Exact same HLSL shaders (VS, PS, GS, HS, DS, CS) run on all platforms and all back-ends \n* High performance\n* Modular design\n  * Components are clearly separated logically and physically and can be used as needed\n  * Only take what you need for your project\n* Clear and concise API\n  * C/C++/C#\n  * Object-based\n  * Stateless\n* Key graphics features:\n  * [Automatic shader resource binding](http://diligentgraphics.com/2016/03/23/resource-binding-model-in-diligent-engine-2-0/) designed to leverage next-generation graphics APIs\n  * Multithreaded command buffer generation\n  * Multithreaded resource creation\n  * [Automatic or explicit control over resource state transitions](http://diligentgraphics.com/2018/12/09/resource-state-management/)\n  * Descriptor and memory management\n  * Shader resource reflection\n  * Async compute and multiple command queues\n  * Ray-tracing, mesh shaders, tile shaders, bindless resources, variable rate shading, sparse resources,\n    wave operations, and other state-of-the-art capabilities\n* JSON-based render state description language and state packaging tool\n* Extensive validation and error reporting\n* Modern c++ features to make the code fast and reliable\n* Consistent high quality is ensured by continuous integration\n  * Automated builds and unit testing\n  * Source code formatting validation\n  * Static analysis\n\n\nMinimum supported low-level API versions:\n* OpenGL 4.1\n* OpenGLES 3.0\n* WebGL 2.0\n* Direct3D11.1\n* Direct3D12 with SDK version 10.0.17763.0\n* Vulkan 1.0\n* Metal 1.0\n\n\n## High-level Rendering components\n\n* [Screen-Space Reflections](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceReflection)\n* [Screen-Space Ambient Occlusion](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceAmbientOcclusion)\n* [Depth of Field](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/DepthOfField)\n* [Bloom](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/Bloom)\n* [Temporal Anti-Aliasing](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/TemporalAntiAliasing)\n* [Atmospheric light scattering post-effect](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/EpipolarLightScattering)\n* [Tone mapping utilities](https://github.com/DiligentGraphics/DiligentFX/tree/master/Shaders/PostProcess/ToneMapping/public)\n* [PBR renderer](https://github.com/DiligentGraphics/DiligentFX/tree/master/PBR)\n* [Hydrogent](https://github.com/DiligentGraphics/DiligentFX/tree/master/Hydrogent), an implementation of the Hydra rendering API in Diligent Engine.\n* [Shadows](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows)\n* [Integration with Dear Imgui](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/ImguiDemo)\n  [and Nuklear](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/NuklearDemo)\n\n\n# Table of Contents\n\n- [Cloning the Repository](#cloning)\n  - [Repository Structure](#repository_structure)\n- [Build and Run Instructions](#build_and_run)\n  - [Win32](#build_and_run_win32)\n  - [Universal Windows Platform](#build_and_run_uwp)\n  - [Linux](#build_and_run_linux)\n  - [Android](#build_and_run_android)\n  - [MacOS](#build_and_run_macos)\n  - [iOS](#build_and_run_ios)\n  - [Emscripten](#build_and_run_emscripten)\n  - [Integrating Diligent Engine with Existing Build System](#build_and_run_integration)\n  - [Build Options](#build_option)\n  - [Customizing Build](#build_and_run_customizing)\n- [Getting started with the API](#getting_started)\n- [Render State Notation](#render_state_notation)\n- [Tutorials](#tutorials)\n- [Samples](#samples)\n- [High-Level Rendering Components](#high_level_components)\n- [Products Using Diligent Engine](#products-using-diligent-engine)\n- [License](#license)\n- [Contributing](#contributing)\n- [References](#references)\n- [Release History](#release_history)\n\n<a name=\"cloning\"></a>\n# Cloning the Repository\n\nThis is the master repository that contains four [submodules](https://git-scm.com/book/en/v2/Git-Tools-Submodules). To get the repository and all submodules, use the following command:\n\n```\ngit clone --recursive https://github.com/DiligentGraphics/DiligentEngine.git\n```\n\nWhen updating existing repository, don't forget to update all submodules:\n\n```\ngit pull\ngit submodule update --recursive\n```\n\nIt is also a good idea to re-run CMake and perform clean rebuild after getting the latest version.\n\n<a name=\"repository_structure\"></a>\n## Repository Structure\n\nMaster repository includes the following submodules:\n\n* [Core](https://github.com/DiligentGraphics/DiligentCore) submodule implements \n  [Direct3D11](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineD3D11), \n  [Direct3D12](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineD3D12),\n  [OpenGL/GLES](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineOpenGL), and\n  [Vulkan](https://github.com/DiligentGraphics/DiligentCore/tree/master/Graphics/GraphicsEngineVulkan) back-ends.\n  The module is self-contained and can be built by its own.\n* [Tools](https://github.com/DiligentGraphics/DiligentTools) submodule contains \n  [texture loading library](https://github.com/DiligentGraphics/DiligentTools/tree/master/TextureLoader),\n  [asset loading library](https://github.com/DiligentGraphics/DiligentTools/blob/master/AssetLoader),\n  [dear imgui implementation](https://github.com/DiligentGraphics/DiligentTools/blob/master/Imgui),\n  [native application implementation](https://github.com/DiligentGraphics/DiligentTools/blob/master/NativeApp),\n  [Diligent render state notation parser](https://github.com/DiligentGraphics/DiligentTools/tree/master/RenderStateNotation) and\n  [offline render state packaging tool](https://github.com/DiligentGraphics/DiligentTools/tree/master/RenderStatePackager).\n* [DiligentFX](https://github.com/DiligentGraphics/DiligentFX) is a high-level rendering framework that implements\n  various rendering components. The module depends on Core and Tools modules.\n* [Samples](https://github.com/DiligentGraphics/DiligentSamples) submodule contains tutorials and sample applications \n  intended to demonstrate the usage of the Diligent Engine API. The module depends on Core, Tools and DiligentFX modules.\n\n<a name=\"build_and_run\"></a>\n# Build and Run Instructions\n\nDiligent Engine uses [CMake](https://cmake.org/) as a cross-platform build tool. \nTo start using cmake, download the [latest release](https://cmake.org/download/) (3.20 or later is required).\nAnother build prerequisite is [Python interpreter](https://www.python.org/downloads/) (3.0 or later is required).\nIf after following the instructions below you have build/run issues, please take a look at [troubleshooting](Troubleshooting.md).\n\n<a name=\"build_and_run_win32\"></a>\n## Win32\n\nBuild prerequisites:\n\n* Windows SDK 10.0.17763.0 or later (10.0.19041.0 is required for mesh shaders)\n* C++ build tools\n* Visual C++ ATL Support\n\n.NET support requires .NET SDK 6.0 or later.\n\nUse either CMake GUI or command line tool to generate build files. For example, to generate \n[Visual Studio 2022](https://visualstudio.microsoft.com/) 64-bit solution and project files in *build/Win64* folder, \nnavigate to the engine's root folder and run the following command:\n\n```\ncmake -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n```\n\nYou can generate Win32 solution that targets Win8.1 SDK using the following command:\n\n```\ncmake -D CMAKE_SYSTEM_VERSION=8.1 -S . -B ./build/Win64_8.1 -G \"Visual Studio 17 2022\" -A x64\n```\n\nIf you use MinGW, you can generate the make files using the command below (note however that the functionality\nwill be limited and that MinGW is not a recommended way to build the engine):\n\n```\ncmake -S . -B ./build/MinGW -D CMAKE_BUILD_TYPE=Release -G \"MinGW Makefiles\"\n```\n\n:warning: In current implementation, full path to cmake build folder **must not contain white spaces**.\n\nTo enable Vulkan validation layers, you will need to download the [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/) and add environment\nvariable `VK_LAYER_PATH` that contains the path to the *Bin* directory in VulkanSDK installation folder.\n\nOpen *DiligentEngine.sln* file in *build/Win64* folder, select configuration and build the engine. Set the desired project\nas startup project (by default, GLTF Viewer will be selected) and run it. \n\nBy default, sample and tutorial applications will show rendering backend selection dialog box. Use the following command line options to force\nD3D11, D3D12, OpenGL, or Vulkan mode: **--mode d3d11**, **--mode d3d12**, **--mode gl**, or **--mode vk**. If you want to run an application\noutside of Visual Studio environment, the application's assets folder must be set as working directory. (For Visual Studio, this \nis automatically configured by CMake). Alternatively, you can navigate to the build target or install folder and run the executable from there.\n\n\n<a name=\"build_and_run_uwp\"></a>\n## Universal Windows Platform\n\nTo generate build files for Universal Windows platform, you need to define the following two cmake variables:\n\n* `CMAKE_SYSTEM_NAME=WindowsStore`\n* `CMAKE_SYSTEM_VERSION=< Windows Version >`\n\nFor example, to generate Visual Studio 2022 64-bit solution and project files in *build/UWP64* folder, run the following command\nfrom the engine's root folder:\n\n```\ncmake -D CMAKE_SYSTEM_NAME=WindowsStore -D CMAKE_SYSTEM_VERSION=10.0 -S . -B ./build/UWP64 -G \"Visual Studio 17 2022\" -A x64\n```\n\nSet the desired project as startup project (by default, GLTF Viewer will be selected) and run it. \n\nBy default, applications will run in D3D12 mode. You can select D3D11 or D3D12 using the following command line options:\n**--mode d3d11**, **--mode d3d12**.\n\nNote: it is possible to generate solution that targets Windows 8.1 by defining CMAKE_SYSTEM_VERSION=8.1 cmake variable, but it will fail\nto build as it will use Visual Studio 2013 (v120) toolset that lacks proper c++14 support.\n\n\n<a name=\"build_and_run_linux\"></a>\n## Linux\n\nYour Linux environment needs to be set up for c++ development. If it already is, make sure your c++ tools are up to date\nas Diligent Engine uses modern c++ features (clang 10 or later is recommended).\n\n:warning: gcc 9 and above seemingly produces invalid binary code with O2 and O3 optimization levels. To avoid crashes,\noptimization level is downgraded to O1 in release configurations. It is recommended to use clang or gcc 7 or 8.\n\nYou may need to install the following packages:\n\n1. gcc, clang, make and other essential c/c++ tools:\n\n```\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get install build-essential\n```\n\n2. cmake\n\n```\nsudo apt-get install cmake\n```\n\n3. Other required packages:\n\n```\nsudo apt-get install libx11-dev\nsudo apt-get install mesa-common-dev\nsudo apt-get install mesa-utils\nsudo apt-get install libgl-dev\nsudo apt-get install python3-distutils\nsudo apt-get install libgl1-mesa-dev\nsudo apt-get install libxrandr-dev\nsudo apt-get install libxinerama-dev\nsudo apt-get install libxcursor-dev\nsudo apt-get install libxi-dev\n```\n\nTo configure Vulkan you will also need to:\n\n* Install latest Vulkan drivers and libraries for your GPU\n* Install [Vulkan SDK](https://www.lunarg.com/vulkan-sdk/)\n  * To make sure that you system is properly configured you can try to build and run samples from the SDK\n\nTo generate make files for debug configuration, run the following CMake command from the engine's root folder:\n\n```\ncmake -S . -B ./build -G \"Unix Makefiles\" -DCMAKE_BUILD_TYPE=\"Debug\"\n```\n\nTo build the engine, run the following command:\n\n```\ncmake --build ./build\n```\n\nOn Ubuntu 23 and newer, it may crash if you don't have libtinfo5 installed, you'll need to [add it](https://askubuntu.com/questions/1491254/installing-cuda-on-ubuntu-23-10-libt5info-not-installable).\n \n\nThe engine's root folder contains [Visual Studio Code](https://code.visualstudio.com/) settings files that configure\nthe IDE to build the engine. You can run applications directly from the IDE. To run an application from the command line,\nthe app's assets folder must be current directory.\n\n\n<a name=\"build_and_run_android\"></a>\n## Android\n\nPlease make sure that your machine is set up for Android development. Download \n[Android Studio](https://developer.android.com/studio/index.html),\n[install and configure the NDK and CMake](https://developer.android.com/studio/projects/install-ndk)\nand other required tools. NDK r24 or later is required. If you are not using CMake version bundled with Android Studio, make sure\nyour build files are [properly configured](https://developer.android.com/studio/projects/add-native-code.html#use_a_custom_cmake_version).\nTo verify that your environment is properly set up, try building the\n[teapots sample](https://github.com/googlesamples/android-ndk/tree/master/teapots) as well as\n[Vulkan Android tutorials](https://github.com/googlesamples/android-vulkan-tutorials).\n\nOpen *DiligentSamples/Android* folder with Android Studio to build and run tutorials and samples on Android.\n\nBy default, applications will run in Vulkan mode. To run them in Vulkan mode, add the following launch flags:\n`--es mode gles` (in Android Studio, go to Run->Edit Configurations menu)\n\n<a name=\"build_and_run_macos\"></a>\n## MacOS\n\nPrerequisites:\n\n* Xcode 14 or later\n* Vulkan SDK 1.3.290.0 or later to enable Vulkan\n\nAfter you clone the repo, run the following command from the engine's root folder to generate Xcode project:\n\n```\ncmake -S . -B ./build/MacOS -G \"Xcode\"\n```\n\nThe project will be located in `build/MacOS` folder.\n\nNote that if CMake fails to find the compiler, you may need to run the following command:\n\n```\nsudo xcode-select --reset\n```\n\n### Configuring Vulkan Build Environment\n\nBy default there is no Vulkan implementation on MacOS. Diligent Engine loads Vulkan dynamically\nand can use a Vulkan Portability implementation such as [MoltenVK](https://github.com/KhronosGroup/MoltenVK)\nor [gfx-portability](https://github.com/gfx-rs/portability). Install [VulkanSDK](https://vulkan.lunarg.com/sdk/home#mac)\nand make sure that your system is properly configured as described\n[here](https://vulkan.lunarg.com/doc/view/latest/mac/getting_started.html#user-content-sdk-system-paths).\nIn particular, you may need to define the following environment variables (assuming that Vulkan SDK is installed at\n`/Users/MyName/VulkanSDK/1.3.290.0` and you want to use MoltenVK):\n\n```\nexport VULKAN_SDK=/Users/MyName/VulkanSDK/1.3.290.0/macOS\nexport PATH=$VULKAN_SDK/bin:$PATH\nexport DYLD_LIBRARY_PATH=$VULKAN_SDK/lib:$DYLD_LIBRARY_PATH\nexport VK_ADD_LAYER_PATH=$VULKAN_SDK/share/vulkan/explicit_layer.d\nexport VK_ICD_FILENAMES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json\nexport VK_DRIVER_FILES=$VULKAN_SDK/share/vulkan/icd.d/MoltenVK_icd.json\n```\n\nNote that environment variables set in the shell are not seen by the applications launched from Launchpad\nor other desktop GUI. Thus to make sure that an application finds Vulkan libraries, it needs to be started from \nthe command line. Due to the same reason, the xcode project file should also be opened from the shell using \n`open` command. With Xcode versions 7 and later, this behavior may need to be enabled first using the\nfollowing command:\n\n```\ndefaults write com.apple.dt.Xcode UseSanitizedBuildSystemEnvironment -bool NO\n```\n\nPlease refer to [this page](https://vulkan.lunarg.com/doc/sdk/latest/mac/getting_started.html) for more details.\n\n:warning: `DYLD_LIBRARY_PATH` and `LD_LIBRARY_PATH` environment variables are ignored on MacOS unless\nSystem Integrity Protection is disabled (which generally is not recommended). In order for executables to find the\nVulkan library, it must be in rpath. If `VULKAN_SDK` environment variable is set and points to correct location, Diligent\nEngine will configure the rpath for all applications automatically.\n\nLatest tested Vulkan SDK version: 1.3.290.0.\n\n:warning: There are known issues with later versions of the SDK, so it is recommended to use the latest tested version.\n\n<a name=\"build_and_run_ios\"></a>\n## iOS\n\nPrerequisites:\n\n* Xcode 14 or later\n* Vulkan SDK 1.3.290.0 or later to enable Vulkan\n\nRun the command below from the engine's root folder to generate Xcode project configured for\n[iOS build](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html#cross-compiling-for-ios-tvos-or-watchos):\n\n```cmake\ncmake -S . -B ./build/iOS -DCMAKE_SYSTEM_NAME=iOS -G \"Xcode\"\n```\n\nIf needed, you can provide iOS deployment target (13.0 or later is required) as well as other parameters, e.g.:\n\n```cmake\ncmake -S . -B ./build/iOS -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 -G \"Xcode\"\n```\n\n:warning: To build for iPhone simulator, use the `iphonesimulator` system root. You may also use the\n`CMAKE_OSX_ARCHITECTURES` variable to specify target architecture, for example:\n\n```cmake\ncmake -S . -B ./build/iOSSim -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=arm64 -G \"Xcode\"\n```\n\nOpen Xcode project file in `build/IOS` folder and build the engine. To run the applications on an iOS device,\nyou will need to set appropriate development team in the project settings.\n\n### Configuring Vulkan Build Environment\n\nTo enable Vulkan on iOS, download and install the [VulkanSDK](https://vulkan.lunarg.com/sdk/home#mac). There is no Vulkan loader\non iOS, and Diligent Engine links directly with MoltenVK XCFramework (see\n[MoltenVk install guide](https://github.com/KhronosGroup/MoltenVK/blob/master/Docs/MoltenVK_Runtime_UserGuide.md#install-moltenvk-as-a-universal-xcframework))\nthat implements Vulkan on Metal. To enable Vulkan in Diligent Engine on iOS, specify the path to Vulkan SDK \nwhen running CMake, for example (assuming that Vulkan SDK is installed at `/Users/MyName/VulkanSDK/1.3.290.0`):\n\n```cmake\ncmake -DCMAKE_SYSTEM_NAME=iOS -DVULKAN_SDK=/Users/MyName/VulkanSDK/1.3.290.0 -S . -B ./build/iOS -G \"Xcode\"\n```\n\nBy default, the engine links with MoltenVK XCFramework located in Vulkan SDK. If this is not desired or an application wants\nto use a specific library, it can provide the full path to the library via `MOLTENVK_LIBRARY` CMake variable.\n\nRefer to [MoltenVK user guide](https://github.com/KhronosGroup/MoltenVK/blob/master/Docs/MoltenVK_Runtime_UserGuide.md#install)\nfor more information about MoltenVK installation and usage.\n\nLatest tested Vulkan SDK version: 1.3.290.0.\n\n:warning: There are known issues with later versions of the SDK, so it is recommended to use the latest tested version.\n\n<a name=\"build_and_run_emscripten\"></a>\n## Emscripten\nBuild prerequisites:\n\n* Emscripten SDK 3.1.65\n* Ninja 1.10.2\n\nTo activate PATH and other environment variables in the current terminal\n````bash\nsource ${PATH_TO_EMSDK}/emsdk/emsdk_env.sh\n````\n:warning: On Windows, run `${PATH_TO_EMSDK}/emsdk/emsdk_env.bat` instead of `source ${PATH_TO_EMSDK}/emsdk/emsdk_env.sh`\n\n\nTo generate project, run the following CMake command from the engine's root folder:\n\n```cmake\nemcmake cmake -S . -B ./build/Emscripten -G \"Ninja\"\n```\n\nTo build the engine, run the following command:\n\n```cmake\ncmake --build ./build/Emscripten\n```\n\nTo test emscripten applications, run a basic web server\n\n```bash\ncd ./build/Emscripten\npython https_server.py\n```\n\nOpen a browser and navigate to `http://localhost`\n\nFor example, the Hello Triangle tutorial will be available at \n\n```\nhttp://localhost/DiligentSamples/Tutorials/Tutorial01_HelloTriangle/Tutorial01_HelloTriangle.html\n```\n\nTo access the server from another computer on the local network, use the HTTPS server.\nTo enable this, first install the `cryptography` module. You can do so by running the following command:\n\n```bash\npip install cryptography\n```\n\nTo start the HTTPS server, use the following command:\n\n```bash\npython https_server.py --mode=https\n```\n\nUse the HTTPS protocol to open the pages. For example:\n\n```\nhttps://localhost/DiligentSamples/Tutorials/Tutorial01_HelloTriangle/Tutorial01_HelloTriangle.html\n```\n\nWhen using the HTTPS server, unlike with the HTTP server, you may encounter the following error\nwhen loading the page: `net::ERR_CERT_AUTHORITY_INVALID`.\n\nThere are two ways to resolve this issue:\n1. Click the `Advanced` button and then select `Proceed to localhost (unsafe)`.\n2. Alternatively, start the terminal as administrator and run the following command:\n\n```bash\npython https_server.py --mode=https --register\n```\n\nWe use the default ports for HTTP/HTTPS protocols, `80` and `443` respectively. \nIf you already have a server running on those ports, you may specify a different port number using the `--port`\nargument and include the corresponding port number in the URL after the IP address. For example:\n\n```\nhttp://localhost:${YOUR_PORT}/DiligentSamples/Tutorials/Tutorial01_HelloTriangle/Tutorial01_HelloTriangle.html\n```\n\n<a name=\"build_and_run_integration\"></a>\n## Integrating Diligent Engine with Existing Build System\n\nDiligent has modular structure, so for your project you can only use those \nsubmodules that implement the required functionality.\nThe diagram below shows the dependencies between modules.\n\n```\n  Core\n   |\n   +------>Tools----------.\n   |        |             |\n   |        V             |\n   +------->FX---------.  |\n   |                   |  |\n   |                   V  V\n   '----------------->Samples\n```\n\nDon't forget to recursively initialize submodules if you are adding Diligent repos\nas submodules to your project.\n\n### Your Project Uses Cmake\n\nIf your project uses CMake, adding Diligent Engine requires just few lines of code. \nSuppose that the directory structure looks like this:\n\n```\n|\n+-DiligentCore\n+-HelloDiligent.cpp\n```\n\nThen the following steps need to be done:\n* Call `add_subdirectory(DiligentCore)`\n* Add dependencies on the targets implementing required rendering backends\n\nBelow is an example of a CMake file:\n\n```cmake\ncmake_minimum_required (VERSION 3.6)\n\nproject(HelloDiligent CXX)\n\nadd_subdirectory(DiligentCore)\n\nadd_executable(HelloDiligent WIN32 HelloDiligent.cpp)\ntarget_compile_options(HelloDiligent PRIVATE -DUNICODE)\n\ntarget_link_libraries(HelloDiligent\nPRIVATE\n    Diligent-GraphicsEngineD3D11-shared\n    Diligent-GraphicsEngineOpenGL-shared\n    Diligent-GraphicsEngineD3D12-shared\n    Diligent-GraphicsEngineVk-shared\n)\ncopy_required_dlls(HelloDiligent)\n```\n\n`copy_required_dlls()` is a convenience function that copies shared libraries next to\nthe executable so that the system can find and load them. \nPlease also take a look at getting started tutorials for \n[Windows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial00_HelloWin32) and \n[Linux](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial00_HelloLinux).\n\n#### Static vs Dynamic Linking\n\nOn most platforms, core engine libraries are built in both static and dynamic versions\n(for example, `Diligent-GraphicsEngineD3D12-static` and `Diligent-GraphicsEngineD3D12-shared`).\nYou can choose which version to link with by changing the target name in `target_link_libraries()` CMake command.\nWhen linking with dynamic libraries, the `ENGINE_DLL` macro will be defined, and the libraries will need to be loaded\nat runtime. For example, for Direct3D12 backend:\n\n```cpp\n#if ENGINE_DLL\n// Load the dll and import GetEngineFactoryD3D12() function\nauto GetEngineFactoryD3D12 = LoadGraphicsEngineD3D12();\n#endif\nauto* pFactoryD3D12 = GetEngineFactoryD3D12();\n```\n\nWhen using static linking, the `ENGINE_DLL` macro will not be defined, and the `GetEngineFactoryD3D12` function will be\nstatically linked with the executable.\n\n[SampleApp.cpp](https://github.com/DiligentGraphics/DiligentSamples/blob/master/SampleBase/src/SampleApp.cpp) file provides\nan example of how to initialize the engine on different platforms using static or dynamic linking.\n\n#### Using FetchContent\n\nYou can use [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) to download Diligent Engine modules.\nThe only caveat is that you need to specify the source directory for each module to be the same as the module name,\nso that header files can be found. Below is an example of a CMake file that uses FetchContent:\n\n```cmake\ncmake_minimum_required (VERSION 3.6)\n\nproject(HelloDiligent CXX)\n\ninclude(FetchContent)\nFetchContent_Declare(\n    DiligentCore\n    GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentCore.git\n    SOURCE_DIR _deps/DiligentCore\n)\nFetchContent_Declare(\n    DiligentTools\n    GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentTools.git\n    SOURCE_DIR _deps/DiligentTools\n)\nFetchContent_Declare(\n    DiligentFX\n    GIT_REPOSITORY https://github.com/DiligentGraphics/DiligentFX.git\n    SOURCE_DIR _deps/DiligentFX\n)\nFetchContent_MakeAvailable(DiligentCore DiligentTools DiligentFX)\n\nadd_executable(HelloDiligent WIN32 HelloDiligent.cpp)\ntarget_include_directories(HelloDiligent\nPRIVATE\n    ${diligentcore_SOURCE_DIR}\n    ${diligenttools_SOURCE_DIR}\n    ${diligentfx_SOURCE_DIR}\n)\n\ntarget_compile_definitions(HelloDiligent PRIVATE UNICODE)\n\ntarget_link_libraries(HelloDiligent\nPRIVATE\n    Diligent-BuildSettings\n    Diligent-GraphicsEngineD3D11-shared\n    Diligent-GraphicsEngineD3D12-shared\n    Diligent-GraphicsEngineOpenGL-shared\n    Diligent-GraphicsEngineVk-shared\n    DiligentFX\n)\ncopy_required_dlls(HelloDiligent)\n```\n\n### Your Project Does Not Use Cmake\n\nIf your project doesn't use CMake, it is recommended to build libraries with CMake and add them to your build system.\nYou can download the latest build artifacts from [GitHub](https://github.com/DiligentGraphics/DiligentCore/actions?query=branch%3Amaster).\n\nGlobal CMake installation directory is controlled by\n[CMAKE_INTALL_PREFIX](https://cmake.org/cmake/help/latest/variable/CMAKE_INSTALL_PREFIX.html) variable. \nNote that it defaults to `/usr/local` on UNIX and `c:/Program Files/${PROJECT_NAME}` on Windows, which may not\nbe what you want. Use `-D CMAKE_INSTALL_PREFIX=install` to use local `install` folder instead:\n\n```\ncmake -S . -B ./build/Win64 -D CMAKE_INSTALL_PREFIX=install -G \"Visual Studio 17 2022\" -A x64\n```\n\nTo install libraries and header files, run the following CMake command from the build folder:\n\n```cmake\ncmake --build . --target install\n```\n\nDiligentCore installation directory will contain everything required to integrate the engine:\n\n* *include* subdirectory will contain all required header files. Add this directory to your include search directories.\n* *lib* subdirectory will contain static libraries.\n* *bin* subdirectory will contain dynamic libraries.\n\nAn easier way is to link with dynamic libraries. When linking statically, you will need to list DiligentCore as well \nas all third-party libraries used by the engine. Besides that, you will also need to specify platform-specific system libraries. \nFor example, for Windows platform, the list of libraries your project will need to link against may look like this:\n\n```\nDiligentCore.lib glslang.lib HLSL.lib OGLCompiler.lib OSDependent.lib spirv-cross-core.lib SPIRV.lib SPIRV-Tools-opt.lib SPIRV-Tools.lib glew-static.lib GenericCodeGen.lib MachineIndependent.lib dxgi.lib d3d11.lib d3d12.lib d3dcompiler.lib opengl32.lib\n```\n\nDiligent Engine headers require one of the following platform macros to be defined as `1`:\n`PLATFORM_WIN32`, `PLATFORM_UNIVERSAL_WINDOWS`, `PLATFORM_ANDROID`, `PLATFORM_LINUX`, `PLATFORM_MACOS`, `PLATFORM_IOS`.\n\nYou can control which components of the engine you want to install using the following CMake options:\n`DILIGENT_INSTALL_CORE`, `DILIGENT_INSTALL_FX`, `DILIGENT_INSTALL_SAMPLES`, and `DILIGENT_INSTALL_TOOLS`.\n\nAnother way to integrate the engine is to generate build files (such as Visual Studio projects) and add them to your\nbuild system. Build customization described below can help tweak the settings for your specific needs.\n\n\n<a name=\"build_option\"></a>\n## Build Options\n\nAvailable CMake options are summarized in the table below:\n\n| Option                                  |Default value |     Description                                              |\n|-----------------------------------------|--------------|--------------------------------------------------------------|\n| `DILIGENT_NO_DIRECT3D11`                |     No       | Do not build Direct3D11 backend                              |\n| `DILIGENT_NO_DIRECT3D12`                |     No       | Do not build Direct3D12 backend                              |\n| `DILIGENT_NO_OPENGL`                    |     No       | Do not build OpenGL backend                                  |\n| `DILIGENT_NO_VULKAN`                    |     No       | Do not build Vulkan backend                                  |\n| `DILIGENT_NO_METAL`                     |     No       | Do not build Metal backend                                   |\n| `DILIGENT_NO_WEBGPU`                    |     No       | Do not build WebGPU backend                                  |\n| `DILIGENT_NO_ARCHIVER`                  |     No       | Do not build Archiver                                        |\n| `DILIGENT_NO_RENDER_STATE_PACKAGER`     |     No       | Do not build Render State Packager tool                      |\n| `DILIGENT_ENABLE_DRACO`                 |     No       | Enable Draco compression support in GLTF loader              |\n| `DILIGENT_USE_RAPIDJSON`                |     No       | Use rapidjson parser in GLTF loader                          |\n| `DILIGENT_BUILD_TOOLS`                  |     Yes      | Build Tools module                                           |\n| `DILIGENT_BUILD_FX`                     |     Yes      | Build FX module                                              |\n| `DILIGENT_BUILD_SAMPLES`                |     Yes      | Build Samples module                                         |\n| `DILIGENT_BUILD_SAMPLE_BASE_ONLY`       |     No       | Build only SampleBase project and no other samples/tutorials |\n| `DILIGENT_BUILD_TESTS`                  |     No       | Build Unit Tests                                             |\n| `DILIGENT_NO_GLSLANG`                   |     No       | Do not build GLSLang and SPRIV-Tools                         |\n| `DILIGENT_NO_HLSL`                      |     No       | Disable HLSL support in non-Direct3D backends                |\n| `DILIGENT_NO_FORMAT_VALIDATION`         |     Yes      | Disable source code formatting validation                    |\n| `DILIGENT_LOAD_PIX_EVENT_RUNTIME`       |     No       | Enable PIX event support                                     |\n| `DILIGENT_NVAPI_PATH`                   |              | Path to NVAPI SDK                                            |\n| `DILIGENT_INSTALL_CORE`                 |     Yes      | Install core module                                          |\n| `DILIGENT_INSTALL_TOOLS`                |     Yes      | Install tools module                                         |\n| `DILIGENT_INSTALL_FX`                   |     Yes      | Install FX module                                            |\n| `DILIGENT_INSTALL_SAMPLES`              |     Yes      | Install Samples module                                       |\n| `DILIGENT_INSTALL_PDB`                  |     No       | Install program debug database                               |\n| `DILIGENT_DEAR_IMGUI_PATH`              |              | Optional path to a user-provided dear imgui project          |\n| `DILIGENT_ARGS_DIR`                     |              | Optional path to a user-provided args project                |\n| `DILIGENT_NUKLEAR_DIR`                  |              | Optional path to a user-provided nuklear project             |\n| `DILIGENT_MSVC_COMPILE_OPTIONS`         |              | Additional MSVC compile options for all configurations       |\n| `DILIGENT_MSVC_DEBUG_COMPILE_OPTIONS`   |              | Additional MSVC compile options for debug configuration      |\n| `DILIGENT_MSVC_RELEASE_COMPILE_OPTIONS` |/GL /arch:AVX2| Additional MSVC compile options for release configurations   |\n| `DILIGENT_CLANG_COMPILE_OPTIONS`        |              | Additional Clang compile options for all configurations      |\n| `DILIGENT_CLANG_DEBUG_COMPILE_OPTIONS`  |              | Additional Clang compile options for debug configuration     |\n| `DILIGENT_CLANG_RELEASE_COMPILE_OPTIONS`|    -mavx2    | Additional Clang compile options for release configurations  |\n| `DILIGENT_USD_PATH`                     |              | Path to USD installation folder                              |\n\nBy default, all back-ends available on the current platform are built. To disable specific back-ends,\nuse the following options: `DILIGENT_NO_DIRECT3D11`, `DILIGENT_NO_DIRECT3D12`, `DILIGENT_NO_OPENGL`,\n`DILIGENT_NO_VULKAN`, `DILIGENT_NO_METAL`, `DILIGENT_NO_WEBGPU`. WebGPU backend is enabled by default when building\nfor the Web. To enable it on other platforms, use `DILIGENT_NO_WEBGPU=OFF`.\nThe options can be set through cmake UI or from the command line as in the example below:\n\n```\ncmake -D DILIGENT_NO_DIRECT3D11=TRUE -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n```\n\nAdditionally, individual engine components can be enabled or disabled using the following options:\n`DILIGENT_BUILD_TOOLS`, `DILIGENT_BUILD_FX`, `DILIGENT_BUILD_SAMPLES`.\nIf you only want to build `SampleBase` project, you can use `DILIGENT_BUILD_SAMPLE_BASE_ONLY` option.\n\nBy default Vulkan back-end is linked with glslang that enables compiling HLSL and GLSL shaders to SPIRV at run time.\nIf run-time compilation is not required, glslang can be disabled with `DILIGENT_NO_GLSLANG` cmake option. \nAdditionally, HLSL support in non-Direct3D backends can be disabled with `DILIGENT_NO_HLSL` option.\nEnabling the options significantly reduces the size of Vulkan and OpenGL back-end binaries, which may be\nespecially important for mobile applications.\n\nDiligent Engine uses [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to ensure consistent\nformatting throughout the code base. The validation can be disabled using `DILIGENT_NO_FORMAT_VALIDATION`\nCMake option. Note that any pull request will fail if formatting issues are found.\n\nDiligent Engine uses extensive validation that is always enabled in Debug build. Some of the checks may be\nenabled in release configurations by setting `DILIGENT_DEVELOPMENT` CMake option.\n\nTo enable PIX events support, set `DILIGENT_LOAD_PIX_EVENT_RUNTIME` CMake flag.\n\nTo enable some advanced features on NVidia GPUs (such as native multi draw indirect support in Direct3D11),\ndownload [NVAPI](https://developer.nvidia.com/nvapi) and set the `DILIGENT_NVAPI_PATH` CMake variable. \n\nDiligent Engine uses multiple third-party libraries. If an application's CMake file defines any of\nthose libraries, Diligent will use existing targets. The application will need to make sure that\nbuild settings are compatible with Diligent.\n\n<a name=\"build_and_run_customizing\"></a>\n## Customizing Build\n\nDiligent Engine allows clients to customize build settings by providing configuration script file that defines the following optional \n[cmake functions](https://cmake.org/cmake/help/latest/command/function.html):\n\n* `custom_configure_build()` - defines global build properties such as build configurations, c/c++ compile flags, link flags etc.\n* `custom_pre_configure_target()` - defines custom settings for every target in the build and is called before the engine's\n                                    build system starts configuring the target.\n* `custom_post_configure_target()` - called after the engine's build system has configured the target to let the client\n                                     override properties set by the engine.\n\nThe path to the configuration script should be provided through `BUILD_CONFIGURATION_FILE` variable when running \ncmake and must be relative to the cmake root folder, for example:\n\n```\ncmake -D BUILD_CONFIGURATION_FILE=BuildConfig.cmake -S . -B ./build/Win64 -G \"Visual Studio 17 2022\" -A x64\n```\n\n### Customizing global build settings with custom_configure_build() function\n\nIf defined, `custom_configure_build()` function is called before any build target is added. By default,\ncmake defines the following four configurations: Debug, Release, RelWithDebInfo, MinSizeRel. If you want, \nyou can define your own build configurations by setting `CMAKE_CONFIGURATION_TYPES` variable. For instance,\nif you want to have only two configuration: Debug and ReleaseMT, add the following line to the `custom_configure_build()`\nfunction:\n\n```cmake\nset(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING \"Configuration types: Debug, ReleaseMT\" FORCE)\n```\n\nThe build system needs to know the list of debug and release (optimized) configurations, so the following\ntwo variables must also be set when `CMAKE_CONFIGURATION_TYPES` variable is defined:\n\n```cmake\nset(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL \"\" FORCE)\nset(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL \"\" FORCE)\n```\n\nNote that due to cmake specifics, configuration names listed in `DEBUG_CONFIGURATIONS` and `RELEASE_CONFIGURATIONS`\n**must be capitalized**.\n\nIf you define any configuration other than four standard cmake ones, you also need to set the following variables, for every\nnew configuration:\n\n* `CMAKE_C_FLAGS_<Config>` - c compile flags\n* `CMAKE_CXX_FLAGS_<Config>` - c++ compile flags\n* `CMAKE_EXE_LINKER_FLAGS_<Config>` - executable link flags\n* `CMAKE_SHARED_LINKER_FLAGS_<Config>` - shared library link flags\n\nFor instance:\n\n```cmake\nset(CMAKE_C_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE)\nset(CMAKE_CXX_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE)\nset(CMAKE_EXE_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE)\nset(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE)\n```\n\nBelow is an example of custom_configure_build() function:\n\n```cmake\nfunction(custom_configure_build)\n    if(CMAKE_CONFIGURATION_TYPES)\n        # Debug configurations\n        set(DEBUG_CONFIGURATIONS DEBUG CACHE INTERNAL \"\" FORCE)\n        # Release (optimized) configurations\n        set(RELEASE_CONFIGURATIONS RELEASEMT CACHE INTERNAL \"\" FORCE)\n        # CMAKE_CONFIGURATION_TYPES variable defines build configurations generated by cmake\n        set(CMAKE_CONFIGURATION_TYPES Debug ReleaseMT CACHE STRING \"Configuration types: Debug, ReleaseMT\" FORCE)\n\n        set(CMAKE_CXX_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE)\n        set(CMAKE_C_FLAGS_RELEASEMT \"/MT\" CACHE INTERNAL \"\" FORCE)\n        set(CMAKE_EXE_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE)\n        set(CMAKE_SHARED_LINKER_FLAGS_RELEASEMT \"/OPT:REF\" CACHE INTERNAL \"\" FORCE)\n    endif()\nendfunction()\n```\n\n\n### Customizing individual target build settings with custom_pre_configure_target() and custom_post_configure_target() functions\n\nIf defined, `custom_pre_configure_target()` is called for every target created by the build system and\nallows configuring target-specific properties.\n\nBy default, the build system sets some target properties. If `custom_pre_configure_target()` sets all required properties,\nit can tell the build system that no further processing is required by setting `TARGET_CONFIGURATION_COMPLETE`\n[parent scope](https://cmake.org/cmake/help/latest/command/set.html#set-normal-variable) variable to `TRUE`:\n\n```cmake\nset(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE)\n```\n\nThe following is an example of `custom_pre_configure_target()` function:\n\n```cmake\nfunction(custom_pre_configure_target TARGET)\n    set_target_properties(${TARGET} PROPERTIES\n        STATIC_LIBRARY_FLAGS_RELEASEMT /LTCG\n    )\n    set(TARGET_CONFIGURATION_COMPLETE TRUE PARENT_SCOPE)   \nendfunction()\n```\n\nIf the client only needs to override some settings, it may define `custom_post_configure_target()` function that is called\nafter the engine has completed configuring the target, for example:\n\n```cmake\nfunction(custom_post_configure_target TARGET)\n    set_target_properties(${TARGET} PROPERTIES\n        CXX_STANDARD 17\n    )\nendfunction()\n```\n\n\n<a name=\"getting_started\"></a>\n# Getting started with the API\n\nPlease refer to [this page](https://github.com/DiligentGraphics/DiligentCore#api-basics). Also, tutorials and samples listed below is a good place to start.\n\n\n<a name=\"render_state_notation\"></a>\n# Render State Notation\n\nDiligent Render State Notation is a JSON-based language that describes shaders, pipeline states,\nresource signatures and other objects in a convenient form, e.g.:\n\n```json\n{\n    \"Shaders\": [\n        {\n            \"Desc\": {\n                \"Name\": \"My Vertex shader\",\n                \"ShaderType\": \"VERTEX\"\n            },\n            \"SourceLanguage\": \"HLSL\",\n            \"FilePath\": \"cube.vsh\"\n        },\n        {\n            \"Desc\": {\n                \"Name\": \"My Pixel shader\",\n                \"ShaderType\": \"PIXEL\"\n            },\n            \"SourceLanguage\": \"HLSL\",\n            \"FilePath\": \"cube.psh\",\n        }\n    ],\n    \"Pipeleines\": [\n        {\n            \"GraphicsPipeline\": {\n                \"DepthStencilDesc\": {\n                    \"DepthEnable\": true\n                },\n                \"RTVFormats\": {\n                    \"0\": \"RGBA8_UNORM_SRGB\"\n                },\n                \"RasterizerDesc\": {\n                    \"CullMode\": \"FRONT\"\n                },\n                \"BlendDesc\": {\n                    \"RenderTargets\": {\n                        \"0\": {\n                            \"BlendEnable\": true\n                        }\n                    }\n                }\n            },\n            \"PSODesc\": {\n                \"Name\": \"My Pipeline State\",\n                \"PipelineType\": \"GRAPHICS\"\n            },\n            \"pVS\": \"My Vertex shader\",\n            \"pPS\": \"My Pixel shader\"\n        }\n    ]\n}\n```\n\nJSON files can be [parsed dynamically at run time](https://github.com/DiligentGraphics/DiligentTools/tree/master/RenderStateNotation/interface).\nAlternatively, an application can use the [packager tool](https://github.com/DiligentGraphics/DiligentTools/tree/master/RenderStatePackager) to preprocess pipeline\ndescriptions (compile shaders for target platforms, define internal resource layouts, etc.) into a binary archive optimized for run-time loading performance.\n\n\n<a name=\"tutorials\"></a>\n# [Tutorials](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials)\n\n| Tutorial   | Screenshot  | Description          |\n|------------|-------------|----------------------|\n| [01 - Hello Triangle](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial01_HelloTriangle) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial01_HelloTriangle/Tutorial01_HelloTriangle.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial01_HelloTriangle/Screenshot.png) | This tutorial shows how to render simple triangle using Diligent Engine API. |\n| [02 - Cube](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial02_Cube) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial02_Cube/Tutorial02_Cube.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial02_Cube/Animation_Small.gif) | This tutorial demonstrates how to render an actual 3D object, a cube. It shows how to load shaders from files, create and use vertex, index and uniform buffers. |\n| [03 - Texturing](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial03_Texturing/Tutorial03_Texturing.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing/Animation_Small.gif) | This tutorial demonstrates how to apply a texture to a 3D object. It shows how to load a texture from file, create shader resource binding object and how to sample a texture in the shader. |\n| [03 - Texturing-C](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial03_Texturing-C) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing/Animation_Small.gif) | This tutorial is identical to Tutorial03, but is implemented using C API. |\n| [03 - Texturing-DotNet](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial03_Texturing-DotNet) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial03_Texturing/Animation_Small.gif) | This tutorial demonstrates how to use the Diligent Engine API in .NET applications. |\n| [04 - Instancing](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial04_Instancing) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial04_Instancing/Tutorial04_Instancing.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial04_Instancing/Animation_Small.gif) | This tutorial demonstrates how to use instancing to render multiple copies of one object using unique transformation matrix for every copy. |\n| [05 - Texture Array](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial05_TextureArray) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial05_TextureArray/Tutorial05_TextureArray.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial05_TextureArray/Animation_Small.gif) | This tutorial demonstrates how to combine instancing with texture arrays to use unique texture for every instance. |\n| [06 - Multithreading](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial06_Multithreading) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial06_Multithreading/Tutorial06_Multithreading.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial06_Multithreading/Animation_Small.gif) | This tutorial shows how to generate command lists in parallel from multiple threads. |\n| [07 - Geometry Shader](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial07_GeometryShader) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial07_GeometryShader/Animation_Small.gif) | This tutorial shows how to use geometry shader to render smooth wireframe. |\n| [08 - Tessellation](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial08_Tessellation) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial08_Tessellation/Animation_Small.gif) | This tutorial shows how to use hardware tessellation to implement simple adaptive terrain rendering algorithm. |\n| [09 - Quads](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial09_Quads) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial09_Quads/Tutorial09_Quads.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial09_Quads/Animation_Small.gif) | This tutorial shows how to render multiple 2D quads, frequently switching textures and blend modes. |\n| [10 - Data Streaming](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial10_DataStreaming) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial10_DataStreaming/Tutorial10_DataStreaming.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial10_DataStreaming/Animation_Small.gif) | This tutorial shows dynamic buffer mapping strategy using `MAP_FLAG_DISCARD` and `MAP_FLAG_DO_NOT_SYNCHRONIZE` flags to efficiently stream varying amounts of data to GPU. |\n| [11 - Resource Updates](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial11_ResourceUpdates) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial11_ResourceUpdates/Tutorial11_ResourceUpdates.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial11_ResourceUpdates/Animation_Small.gif) | This tutorial demonstrates different ways to update buffers and textures in Diligent Engine and explains important internal details and performance implications related to each method. |\n| [12 - Render Target](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial12_RenderTarget) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial12_RenderTarget/Tutorial12_RenderTarget.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial12_RenderTarget/Animation_Small.gif) | This tutorial demonstrates how to render a 3d cube into an offscreen render target and do a simple post-processing effect. |\n| [13 - Shadow Map](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial13_ShadowMap) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial13_ShadowMap/Tutorial13_ShadowMap.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial13_ShadowMap/Animation_Small.gif) | This tutorial demonstrates how to render basic shadows using a shadow map. |\n| [14 - Compute Shader](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial14_ComputeShader) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial14_ComputeShader/Tutorial14_ComputeShader.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial14_ComputeShader/Animation_Small.gif) | This tutorial shows how to implement a simple particle simulation system using compute shaders. |\n| [15 - Multiple Windows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial15_MultipleWindows) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial15_MultipleWindows/Screenshot.png) | This tutorial demonstrates how to use Diligent Engine to render to multiple windows. |\n| [16 - Bindless Resources](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial16_BindlessResources) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial16_BindlessResources/Tutorial16_BindlessResources.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial16_BindlessResources/Animation_Small.gif) | This tutorial shows how to implement bindless resources, a technique that leverages dynamic shader resource indexing feature enabled by the next-gen APIs to significantly improve rendering performance. |\n| [17 - MSAA](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial17_MSAA)  <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial17_MSAA/Tutorial17_MSAA.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial17_MSAA/Animation_Small.gif) | This tutorial demonstrates how to use multisample anti-aliasing (MSAA) to make geometrical edges look smoother and more temporarily stable. |\n| [18 - Queries](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial18_Queries) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial18_Queries/Tutorial18_Queries.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial18_Queries/Animation_Small.gif) | This tutorial demonstrates how to use queries to retrieve various information about the GPU operation, such as the number of primitives rendered, command processing duration, etc. |\n| [19 - Render Passes](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial19_RenderPasses) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial19_RenderPasses/Tutorial19_RenderPasses.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial19_RenderPasses/Animation_Small.gif) | This tutorial demonstrates how to use the render passes API to implement simple deferred shading. |\n| [20 - Mesh Shader](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial20_MeshShader) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial20_MeshShader/Animation_Small.gif) | This tutorial demonstrates how to use amplification and mesh shaders, the new programmable stages, to implement view frustum culling and object LOD calculation on the GPU. |\n| [21 - Ray Tracing](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial21_RayTracing) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial21_RayTracing/Animation_Small.gif) | This tutorial demonstrates the basics of using ray tracing API in Diligent Engine. |\n| [22 - Hybrid Rendering](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial22_HybridRendering) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial22_HybridRendering/Animation_Small.gif) | This tutorial demonstrates how to implement a simple hybrid renderer that combines rasterization with ray tracing. |\n| [23 - Command Queues](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial23_CommandQueues) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial23_CommandQueues/Animation_Small.gif) | This tutorial demonstrates how to use multiple command queues to perform rendering in parallel with copy and compute operations. |\n| [24 - Variable Rate Shading](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial24_VRS) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial24_VRS/Animation_Small.gif) | This tutorial demonstrates how to use variable rate shading to reduce the pixel shading load. |\n| [25 - Render State Packager](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial25_StatePackager) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial25_StatePackager/Screenshot.jpg) | This tutorial shows how to create and archive pipeline states with the render state packager off-line tool on the example of a simple path tracer. |\n| [26 - Render State Cache](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial26_StateCache) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial26_StateCache/Tutorial26_StateCache.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial26_StateCache/Screenshot.jpg) | This tutorial expands the path tracing technique implemented in previous tutorial and demonstrates how to use the render state cache to save pipeline states created at run time and load them when the application starts. |\n| [27 - Post-Processing](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial27_PostProcessing) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial27_PostProcessing/Tutorial27_PostProcessing.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial27_PostProcessing/Screenshot.jpg) | This tutorial demonstrates how to use post-processing effects from the DiligentFX module. |\n| [28 - OpenXR](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial28_HelloOpenXR) |    | This tutorial demonstrates how to use Diligent Engine with OpenXR API to render a simple scene in a VR headset. |\n| [29 - OIT](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial29_OIT) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Tutorial29_OIT/Tutorial29_OIT.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Tutorials/Tutorial29_OIT/Animation_Small.gif) | This tutorial demonstrates how to implement order-independent transparency (OIT) methods to render transparent objects without sorting. |\n\n<a name=\"samples\"></a>\n# [Samples](https://github.com/DiligentGraphics/DiligentSamples)\n\n| Sample     | Screenshot  | Description          |\n|------------|-------------|----------------------|\n| [Atmosphere Sample](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Atmosphere) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Atmosphere/Atmosphere.html) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/Atmosphere/Animation_Small.gif) | This sample demonstrates how to integrate [Epipolar Light Scattering](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/EpipolarLightScattering) post-processing effect into an application to render physically-based atmosphere. |\n| [GLFW Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/GLFWDemo) | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/GLFWDemo/Animation_Small.gif) | This maze mini-game demonstrates how to use GLFW to create window and handle keyboard and mouse input. |\n| [GLTF Viewer](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/GLTFViewer) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/GLTFViewer/GLTFViewer.html) | <img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PBR/screenshots/flight_helmet.jpg\" width=240> | This sample demonstrates how to use the [Asset Loader](https://github.com/DiligentGraphics/DiligentTools/tree/master/AssetLoader) and [PBR Renderer](https://github.com/DiligentGraphics/DiligentFX/tree/master/PBR) to load and render GLTF models. |\n| [USD Viewer](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/USDViewer) | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/USDViewer/Screenshot.jpg\" width=240> | This sample demonstrates how to render USD files using [Hydrogent](https://github.com/DiligentGraphics/DiligentFX/tree/master/Hydrogent), an implementation of the Hydra rendering API in Diligent Engine. |\n| [Shadows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Shadows) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/Shadows/Shadows.html) | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/Shadows/Screenshot.jpg\" width=240> | This sample demonstrates how to use the [Shadowing component](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows) to render high-quality shadows. |\n| [Dear ImGui Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/ImguiDemo) <br /><br /> [:arrow_forward: Run](https://diligentgraphics.github.io/wasm-modules/ImguiDemo/ImguiDemo.html) | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/ImguiDemo/Screenshot.png\" width=240> | This sample demonstrates the integration of the engine with [dear imgui](https://github.com/ocornut/imgui) UI library. |\n| [Nuklear Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/NuklearDemo)  | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/NuklearDemo/Screenshot.png\" width=240> | This sample demonstrates the integration of the engine with [nuklear](https://github.com/vurtun/nuklear) UI library. |\n| [Hello AR](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Android/HelloAR) | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Android/HelloAR/Screenshot.png\" width=240> | This sample demonstrates how to use Diligent Engine in a basic Android AR application. |\n| [Asteroids](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Asteroids) |  <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/Asteroids/Screenshot.png\" width=240> | This sampple is a performance benchmark that renders 50,000 unique textured asteroids and allows comparing performance of different rendering modes. |\n| [Unity Integration Demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/UnityPlugin) | <img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/UnityPlugin/GhostCubePlugin/Screenshot.png\" width=240> | This project demonstrates integration of Diligent Engine with Unity. |\n\n\n<a name=\"high_level_components\"></a>\n# High-Level Rendering Components\n\nHigh-level rendering functionality is implemented by [DiligentFX module](https://github.com/DiligentGraphics/DiligentFX).\nThe following components are now available:\n\n<a name=\"gltf_loader_and_renderer\"></a>\n* [GLTF2.0 Loader](https://github.com/DiligentGraphics/DiligentTools/tree/master/AssetLoader)\n  and [Physically-based renderer with image-based lighting](https://github.com/DiligentGraphics/DiligentFX/tree/master/PBR).\n  \n|||\n|-----------------|-----------------|\n| ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/PBR/screenshots/damaged_helmet.jpg) | ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/PBR/screenshots/flight_helmet.jpg) |\n| ![](https://github.com/DiligentGraphics/DiligentFX/blob/master/PBR/screenshots/mr_spheres.jpg)     | ![](https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/GLTFViewer/screenshots/cesium_man_large.gif)  |\n\n\n* [Hydrogent](https://github.com/DiligentGraphics/DiligentFX/tree/master/Hydrogent), an implementation of the Hydra rendering API in Diligent Engine.\n<img src=\"https://github.com/DiligentGraphics/DiligentSamples/blob/master/Samples/USDViewer/Screenshot.jpg\" width=400>\n\n* [Shadows](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/Components/media/Powerplant-Shadows.jpg\" width=400>\n\n### Post-processing effects\n\n* [Screen-Space Reflections](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceReflection)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PostProcess/ScreenSpaceReflection/media/ssr-logo.jpg\" width=400>\n\n* [Screen-Space Ambient Occlusion](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceAmbientOcclusion)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PostProcess/ScreenSpaceAmbientOcclusion/media/ssao-kitchen.jpg\" width=400>\n\n* [Depth of Field](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/DepthOfField)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PostProcess/DepthOfField/media/depth_of_field.jpg\" width=400>\n\n* [Bloom](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/Bloom)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PostProcess/Bloom/media/bloom.jpg\" width=400>\n\n* [Epipolar light scattering](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/EpipolarLightScattering)\n<img src=\"https://github.com/DiligentGraphics/DiligentFX/blob/master/PostProcess/EpipolarLightScattering/media/LightScattering.png\" width=400>\n\n* [Temporal Anti-Aliasing](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/TemporalAntiAliasing)\n\n* [Tone mapping shader utilities](https://github.com/DiligentGraphics/DiligentFX/tree/master/Shaders/PostProcess/ToneMapping/public)\n\n\n<a name=\"products\"></a>\n# Products using Diligent Engine\n\nWe would appreciate it if you could send us a link in case your product uses Diligent Engine.\n\n* Large-scale terrain visualization system for pilot training simulators by [Elbit Systems](https://elbitsystems.com/)\n  <img src=\"https://github.com/DiligentGraphics/DiligentEngine/blob/master/Media/DiligentTerrain.jpg\" width=600>\n\n* [LumenRT](https://www.bentley.com/software/bentley-lumenrt/): A Visualization and Reality Modeling Software by [Bentley Systems](https://www.bentley.com/)\n\n* [Godus](https://apps.apple.com/gb/app/godus/id815181808): An award-winning sandbox game by [22cans](http://22cans.com/)  \n  <img src=\"http://22cans.com/wp-content/uploads/2016/11/godus_header1-01.jpg\" width=600>\n\n* [Vrmac Graphics](https://github.com/Const-me/Vrmac): A cross-platform graphics library for .NET  \n  <img src=\"https://github.com/Const-me/Vrmac/blob/master/screenshots/Linux/TigerFullHD-1.png\" width=600>\n\n\n<a name=\"disclaimer\"></a>\n## Disclaimer\n\nDiligent Engine is an open project that may be freely used by everyone. We started it to empower the community\nand help people achieve their goals. Sadly enough, not everyone's goals are worthy. Please don't associate us with\nsuspicious projects you may find on the Web that appear to be using Diligent Engine. We neither can possibly track\nall such uses nor can we really do anything about them because our permissive license does not give us a lot of leverage. \n\n\n<a name=\"license\"></a>\n# License\n\nSee [Apache 2.0 license](License.txt).\n\nEach module has some third-party dependencies, each of which may have independent licensing:\n\n* [Core module](https://github.com/DiligentGraphics/DiligentCore#license)\n* [Tools module](https://github.com/DiligentGraphics/DiligentTools#license)\n* [Samples module](https://github.com/DiligentGraphics/DiligentSamples#license)\n\n<a name=\"contributing\"></a>\n# Contributing\n\nTo contribute your code, submit a [Pull Request](https://github.com/DiligentGraphics/DiligentEngine/pulls) \nto this repository. **Diligent Engine** is licensed under the [Apache 2.0 license](License.txt) that guarantees \nthat content in the **DiligentEngine** repository is free of Intellectual Property encumbrances.\nIn submitting any content to this repository,\n[you license that content under the same terms](https://docs.github.com/en/free-pro-team@latest/github/site-policy/github-terms-of-service#6-contributions-under-repository-license),\nand you agree that the content is free of any Intellectual Property claims and you have the right to license it under those terms. \n\nDiligent Engine uses [clang-format](https://clang.llvm.org/docs/ClangFormat.html) to ensure\nconsistent source code style throughout the code base. The format is validated by CI\nfor each commit and pull request, and the build will fail if any code formatting issue is found. Please refer\nto [this page](https://github.com/DiligentGraphics/DiligentCore/blob/master/doc/code_formatting.md) for instructions\non how to set up clang-format and automatic code formatting.\n\n<a name=\"references\"></a>\n# References\n\n[Coding Guidelines](https://github.com/DiligentGraphics/DiligentCore/blob/master/doc/CodingGuidelines.md)\n\n[Performance Best Practices](https://github.com/DiligentGraphics/DiligentCore/blob/master/doc/PerformanceGuide.md)\n\n[Code Formatting](https://github.com/DiligentGraphics/DiligentCore/blob/master/doc/code_formatting.md)\n\n\n<a name=\"release_history\"></a>\n# Release History\n\nSee [Release History](ReleaseHistory.md)\n\n------------------------------\n\n[diligentgraphics.com](http://diligentgraphics.com)\n\n[![Diligent Engine on Twitter](https://github.com/DiligentGraphics/DiligentCore/blob/master/media/twitter.png)](https://twitter.com/diligentengine)\n[![Diligent Engine on Facebook](https://github.com/DiligentGraphics/DiligentCore/blob/master/media/facebook.png)](https://www.facebook.com/DiligentGraphics/)\n"
        },
        {
          "name": "ReleaseHistory.md",
          "type": "blob",
          "size": 37.8251953125,
          "content": "## v2.5.6\n\n### API Changes\n\n* Implemented WebGPU backend\n  * Added `EngineWebGPUCreateInfo`\n  * Added `IEngineFactoryWebGPU` interface\n  * Added `RENDER_DEVICE_TYPE_WEBGPU`, `SHADER_SOURCE_LANGUAGE_WGSL`, `SHADER_VARIABLE_FLAG_UNFILTERABLE_FLOAT_TEXTURE_WEBGPU`,\n   `SHADER_VARIABLE_FLAG_NON_FILTERING_SAMPLER_WEBGPU` enum values\n  * Added `WEB_GPU_BINDING_TYPE` enum, `WebGPUResourceAttribs` struct, and\n    `WebGPUResourceAttribs WebGPUAttribs` member to `PipelineResourceDesc` struct\n  * Added WebGPU-specific interfaces (`IRenderDeviceWebGPU`, `IDeviceContextWebGPU`, etc.) \n* Enabled asynchronous shdare and pipeline state compilation (API255001)\n  * Added `AsyncShaderCompilation` render device feature\n  * Added `pAsyncShaderCompilationThreadPool` and `NumAsyncShaderCompilerThreads` members to `EngineCreateInfo` struct\n  * Added `SHADER_COMPILE_FLAG_ASYNCHRONOUS` and `PSO_CREATE_FLAG_ASYNCHRONOUS` flags\n  * Added `SHADER_STATUS` and `PIPELINE_STATE_STATUS` enums\n  * Added `IShader::GetStatus` and `IPipelineState::GetStatus` methods\n\n### Samples and Tutorials\n\nAdded [samples and tutorials web page](https://diligentgraphics.github.io/)\n\n\n## v2.5.5\n\n### API Changes\n\n* Added `MultiDraw` and `MultiDrawIndexed` commands (API254006)\n* Added `SerializationDeviceGLInfo` struct (API254005)\n  * The `ValidateShaders` member allows disabling time-consuming shader compilation\n* Replaced `AnisotropicFilteringSupported` member of `SamplerProperties` struct with `MaxAnisotropy` (API254004)\n* Added `TextureSubresourceViews` device feature (API254003)\n* Added device context rendering statistics (API254002)\n  * Added `DeviceContextStats` struct\n  * Added `IDeviceContext::ClearStats` and `IDeviceContext::GetStats` methods\n* `IDeviceContext::TransitionShaderResources`: removed unused `pPipelineState` parameter (API254001)\n\n### Samples and Tutorials\n\n* Added [Tutorial27 - Post Processing](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial27_PostProcessing)\n* Added [USD Viewer](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/USDViewer)\n\n### FX\n\n* Added Post Processing effects:\n  * [Screen-Space Reflections](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceReflection)\n  * [Screen-Space Ambient Occlusion](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/ScreenSpaceAmbientOcclusion)\n  * [Depth of Field](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/DepthOfField)\n  * [Bloom](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/Bloom)\n  * [Temporal Anti-Aliasing](https://github.com/DiligentGraphics/DiligentFX/tree/master/PostProcess/TemporalAntiAliasing)\n* Added [Hydrogent](https://github.com/DiligentGraphics/DiligentFX/tree/master/Hydrogent), an implementation of the Hydra rendering API in Diligent Engine.\n* PBR Material Improvements:\n  * Clear-Coat\n  * Sheen (aka fuzz)\n  * Iridescence (aka thin layer)\n  * Anisotropy\n\n\n## v2.5.4\n\n### API Changes\n\n* Use thread group count X/Y/Z for mesh draw commands (API253012)\n* Added `ShaderMacroArray` struct (API253011)\n  * The `Macros` member of `ShaderCreateInfo` struct is now of type `ShaderMacroArray`\n* Replaced `ResourceMappingDesc` with `ResourceMappingCreateInfo` (API253010)\n  * Use `ResourceMappingCreateInfo::NumEntries` to define the number of entries instead of the trailing null entry\n* Removed `ShaderCreateInfo::ppConversionStream` (API253009)\n* Removed `ppCompilerOutput` member of the `ShaderCreateInfo` struct and added it as parameter to the `IRenderDevice::CreateShader` method (API253008)\n* Added `IPipelineStateGL::GetGLProgramHandle` and `IShaderGL::GetGLShaderHandle` methods (API253007)\n* Enabled read-only depth-stencil buffers (API253006)\n  * Added `TEXTURE_VIEW_READ_ONLY_DEPTH_STENCIL` view type\n  * Added `UseReadOnlyDSV` member to `GraphicsPipelineDesc` struct\n* Added `PSO_CACHE_FLAGS` enum and `PipelineStateCacheDesc::Flags` member (API253005)\n* Archiver and render state cache: added content version (API253004)\n* Added `RenderDeviceShaderVersionInfo` struct and `RenderDeviceInfo::MaxShaderVersion` member (API253003)\n* Added texture component swizzle (API253002)\n  * Added `TEXTURE_COMPONENT_SWIZZLE` enum and `TextureComponentMapping` struct\n  * Added `Swizzle` member to `TextureViewDesc` struct\n  * Added `TextureComponentSwizzle` member to `DeviceFeatures` struct\n* Added shader constant buffer reflection API (API253001)\n  * Added `SHADER_CODE_BASIC_TYPE` and `SHADER_CODE_VARIABLE_CLASS` enums\n  * Added `ShaderCodeVariableDesc` and `ShaderCodeBufferDesc` structs\n  * Added `IShader::GetConstantBufferDesc` method\n\n### Samples and Tutorials\n\n* Added [Tutorial03 - Texturing for DotNet](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial03_Texturing-DotNet)\n\n\n## v2.5.3\n\n### API Changes\n\n* Added `RENDER_STATE_CACHE_LOG_LEVEL` enum, replaced `EnableLogging` member of `RenderStateCacheCreateInfo` struct with `LoggingLevel` (API252009)\n* Added `IPipelineResourceSignature::CopyStaticResources` and `IPipelineState::CopyStaticResources` methods (API252008)\n* Added render state cache (`IRenderStateCache` interface and related data types) (API252007)\n* Moved `UseCombinedTextureSamplers` and `CombinedSamplerSuffix` members from `ShaderCreateInfo` to `ShaderDesc` (API252006)\n* Added `IntanceLayerCount` and `ppInstanceLayerNames` members to EngineVkCreateInfo struct (API252005)\n* Added `IgnoreDebugMessageCount` and `ppIgnoreDebugMessageNames` to `EngineVkCreateInfo` struct (API252004)\n* Refactored archiver API (removed `IDeviceObjectArchive` and `IArchive`; enabled dearchiver\n  to load multiple archives to allow storing signatures and pipelines separately) (API252003)\n* Added `SET_SHADER_RESOURCES_FLAGS` enum and `Flags` parameter to `IShaderResourceVariable::Set`\n  and `IShaderResourceVariable::SetArray` methods (API252002)\n* Added primitive topologies with adjacency (API252001)\n\n### Samples and Tutorials\n\n* Added [Tutorial25 - Render State Packager](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial25_StatePackager)\n* Added [Tutorial26 - Render State Cache](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial26_StateCache)\n\n\n## v2.5.2\n\n### API Changes\n\n* Added `SamplerDesc::UnnormalizedCoords` parameter (API Version 250014)\n* Added device object serialization/deserialization (API Version 250013)\n* Added pipeline state cache (API Version 250012)\n\n\n## v2.5.1\n\n### API Changes\n\n* Enabled emscripten platform\n* Added subsampled render targets for VRS (API Version 250011)\n* Added sparse resources (API Version 250010)\n* Updated API to use 64bit offsets for GPU memory (API Version 250009)\n* Reworked draw indirect command attributes (moved buffers into the attribs structs), removed DrawMeshIndirectCount (API Version 250008)\n* Enabled indirect multidraw commands (API Version 250007)\n* Enabled variable rate shading (API Version 250006)\n* Added 'TransferQueueTimestampQueries' feature (API Version 250005)\n* Added 'RESOURCE_STATE_COMMON' state; added `STATE_TRANSITION_FLAGS` enum and replaced\n  `StateTransitionDesc::UpdateResourceState` with `STATE_TRANSITION_FLAGS Flags` (API Version 250004)\n* Added `ComputeShaderProperties` struct (API Version 250003)\n* Added `IShaderResourceBinding::CheckResources` method and `SHADER_RESOURCE_VARIABLE_TYPE_FLAGS` enum (API Version 250002)\n* Removed `IShaderResourceVariable::IsBound` with `IShaderResourceVariable::Get` (API Version 250001)\n\n### Samples and Tutorials\n\n* Added [Tutorial23 - Command Queues](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial23_CommandQueues)\n* Added [Tutorial24 - Variable rate shading](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial24_VRS)\n\n\n## v2.5\n\n### API Changes\n\n* Removed `RayTracing2` device feature and added `RAY_TRACING_CAP_FLAGS` enum (API Version 240099)\n* Added tile shaders (API Version 240098)\n  * Added `PIPELINE_TYPE_TILE` and `SHADER_TYPE_TILE` enum values\n  * Added `TileShaders` device feature\n  * Added `TilePipelineDesc`, `TilePipelineStateCreateInfo` and `DispatchTileAttribs` structs\n  * Added `IRenderDevice::CreateTilePipelineState`, `IPipelineState::GetTilePipelineDesc`,\n    `IDeviceContext::DispatchTile` and `IDeviceContext::GetTileSize` methods\n* Removed `GetNextFenceValue`, `GetCompletedFenceValue`, and `IsFenceSignaled` methods from `IRenderDeviceD3D12` and `IRenderDeviceVk` interfaces\n  as they are now in `ICommandQueue` interface (API Version 240097)\n* Added `ICommandQueue` interface, `IDeviceContext::LockCommandQueue` and `IDeviceContext::UnlockCommandQueue` methods,\n  removed fence query methods from `IRenderDeviceVk`, `IRenderDeviceD3D12`, and `IRenderDeviceMtl` (API Version 240096)\n* Added multiple immediate device contexts and refactored adapter queries (API Version 240095)\n  * `CommandQueueMask` member of `TextureDesc`, `BufferDesc`, `PipelineStateDesc`, `TopLevelASDesc`,\n    and `BottomLevelASDesc`, was renamed to `ImmediateContextMask`\n  * Added `pContext` member to `TextureData` and `BufferData` structs to indicate which context to\n    use for initialization.\n  * Removed `GetDeviceCaps` and `GetDeviceProperties` `IDeviceContext` methods and added\n   `GetDeviceInfo` and `GetAdapterInfo` methods; added `RenderDeviceInfo` struct.\n  * Renamed `SamplerCaps` to `SamplerProperties, `TextureCaps` to `TextureProperties`; added `BufferProperties`,\n    `RayTracingProperties`, and `MeshShaderProperties` structs\n  * Removed `DeviceLimits` struct\n  * Removed `DeviceCaps` struct and moved its members to `GraphicsAdapterInfo` and `RenderDeviceInfo` structs\n  * Added `NativeFence` to `DeviceFeatures`\n  * Added `CommandQueueInfo` struct\n  * Added `COMMAND_QUEUE_TYPE` and `QUEUE_PRIORITY` enums\n  * Renamed `ShaderVersion` struct to `Version`\n  * Reworked `GraphicsAdapterInfo` struct\n  * Added `ImmediateContextCreateInfo` struct and `pImmediateContextInfo`, `NumImmediateContexts` members to `EngineCreateInfo` struct\n  * Added `AdapterId` and `GraphicsAPIVersion` members to `EngineCreateInfo` struct\n  * Removed `DIRECT3D_FEATURE_LEVEL` enum\n  * Added `FENCE_TYPE` enum\n  * Renamed `IFence::Reset` to `IFence::Signal`; added `IFence::Wait` method\n  * Added `IEngineFactory::EnumerateAdapters` method\n  * Added `DeviceContextDesc` struct and `IDeviceContext::GetDesc` method\n  * Added `IDeviceContext::Begin` method, renamed `IDeviceContext::SignalFence` to `IDeviceContext::EnqueueSignal`\n* Added debug annotations `IDeviceContext::BeginDebugGroup`, `IDeviceContext::EndDebugGroup`,\n `IDeviceContext::InsertDebugLabel` (API Version 240095)\n* Added `DefaultVariableMergeStages` member to `PipelineResourceLayoutDesc` struct (API240094)\n* Added `IShaderResourceVariable::SetBufferRange` and `IShaderResourceVariable::SetBufferOffset` methods,\n  added `DeviceLimits` struct (API240093)\n* Updated API to allow explicitly flushing/invlidating mapped buffer memory range :\n  added `MEMORY_PROPERTIES` enum, `IBuffer::GetMemoryProperties()`, `IBuffer::FlushMappedRange()`,\n  and `IBuffer::InvalidateMappedRange()` methods (API240092)\n* Added `IDeviceContext::SetUserData()` and `IDeviceContext::GetUserData()` methods (API240091)\n* Added `SHADER_VARIABLE_FLAGS` enum and `SHADER_VARIABLE_FLAGS Flags` member to ShaderResourceVariableDesc struct (API240090)\n* Reworked validation options (API240089)\n  * Added `VALIDATION_FLAGS` and `D3D12_VALIDATION_FLAGS` enums; renamed `D3D11_DEBUG_FLAGS` to `D3D11_VALIDATION_FLAGS`\n  * Added `VALIDATION_FLAGS ValidationFlags` and `bool EnableValidation` to `EngineCreateInfo`\n  * Added `D3D12_VALIDATION_FLAGS D3D12ValidationFlags` to `EngineD3D12CreateInfo`; removed `EnableDebugLayer`, `EnableGPUBasedValidation`,\n    `BreakOnError`, `BreakOnCorruption`\n  * Added `VALIDATION_LEVEL` enum and `SetValidationLevel()` create info structs' helper functions\n  * Removed `EngineGLCreateInfo::CreateDebugContext` member (it is replaced with `EnableValidation`)\n* Added `MtlThreadGroupSizeX`, `MtlThreadGroupSizeY`, and `MtlThreadGroupSizeZ` members to\n  `DispatchComputeAttribs` and `DispatchComputeIndirectAttribs` structs (API Version 240088)\n* Added InstanceDataStepRate device feature (API Version 240087)\n* Added WaveOp device feature (API Version 240086)\n* Added UpdateSBT command (API Version 240085)\n* Removed `EngineD3D12CreateInfo::NumCommandsToFlushCmdList` and `EngineVkCreateInfo::NumCommandsToFlushCmdBuffer` as flushing\n  the context based on the number of commands is unreasonable (API Version 240084)\n* Added pipeline resource signatures, enabled inline ray tracing, added indirect draw mesh command (API Version 240083)\n* Replaced `IDeviceContext::ExecuteCommandList()` with `IDeviceContext::ExecuteCommandLists()` method that takes\n  an array of command lists instead of one (API Version 240082)\n* Added `IDeviceObject::SetUserData()` and `IDeviceObject::GetUserData()` methods (API Version 240081)\n\n### Samples and Tutorials\n\n* Added [Tutorial22 - Hybrid Rendering](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial22_HybridRendering)\n\n\n## v2.4.g\n\n### API Changes\n\n* Enabled ray tracing (API Version 240080)\n* Added `IDeviceContext::GetFrameNumber` method (API Version 240079)\n* Added `ShaderResourceQueries` device feature and `EngineGLCreateInfo::ForceNonSeparablePrograms` parameter (API Version 240078)\n\n* Renamed `USAGE_STATIC` to `USAGE_IMMUTABLE` (API Version 240077)\n\n* Renamed static samplers into immutable samplers (API Version 240076)\n  * Renamed `StaticSamplerDesc` -> `ImmutableSamplerDesc`\n  * Renamed `PipelineResourceLayoutDesc::NumStaticSamplers` -> `PipelineResourceLayoutDesc::NumImmutableSamplers`\n  * Renamed `PipelineResourceLayoutDesc::StaticSamplers` -> `PipelineResourceLayoutDesc::ImmutableSamplers`\n\n* Refactored pipeline state creation (API Version 240075)\n  * Replaced `PipelineStateCreateInfo` with `GraphicsPipelineStateCreateInfo` and `ComputePipelineStateCreateInfo`\n  * Replaced `IRenderDevice::CreatePipelineState` with `IRenderDevice::CreateGraphicsPipelineState` and `IRenderDevice::CreateComputePipelineState`\n  * `pVS`, `pGS`, `pHS`, `pDS`, `pPS`, `pAS`, `pMS` were moved from `GraphicsPipelineDesc` to `GraphicsPipelineStateCreateInfo`\n  * `GraphicsPipelineDesc GraphicsPipeline`  was moved from `PipelineStateDesc` to `GraphicsPipelineStateCreateInfo`\n  * `pCS` is now a member of `ComputePipelineStateCreateInfo`, `ComputePipelineDesc` was removed\n  * Added `IPipelineState::GetGraphicsPipelineDesc` method\n  \n  Old API for graphics pipeline initialization:\n  ```cpp\n  PipelineStateCreateInfo PSOCreateInfo;\n  PipelineStateDesc&      PSODesc = PSOCreateInfo.PSODesc;\n\n  PSODesc.GraphicsPipeline.pVS = pVS;\n  PSODesc.GraphicsPipeline.pPS = pVS;\n  // ...\n  Device->CreatePipelineState(PSOCreateInfo, &pPSO);\n  ```\n\n  New API for graphics pipeline initialization:\n  ```cpp\n  GraphicsPipelineStateCreateInfo PSOCreateInfo;\n  // ...\n  PSOCreateInfo.pVS = pVS;\n  PSOCreateInfo.pPS = pVS;\n  Device->CreateGraphicsPipelineState(PSOCreateInfo, &pPSO);\n  ```\n\n  Old API for compute pipeline initialization:\n  ```cpp\n  PipelineStateCreateInfo PSOCreateInfo;\n  PipelineStateDesc&      PSODesc = PSOCreateInfo.PSODesc;\n\n  PSODesc.ComputePipeline.pCS = pCS;\n  // ...\n  Device->CreatePipelineState(PSOCreateInfo, &pPSO);\n  ```\n\n    New API for compute pipeline initialization:\n  ```cpp\n  ComputePipelineStateCreateInfo PSOCreateInfo;\n\n  PSOCreateInfo.pCS = pCS;\n  Device->CreateComputePipelineState(PSOCreateInfo, &pPSO);\n  ```\n\n* Added `ShaderInt8`, `ResourceBuffer8BitAccess`, and `UniformBuffer8BitAccess` device features. (API Version 240074)\n* Added `ShaderFloat16`, `ResourceBuffer16BitAccess`, `UniformBuffer16BitAccess`, and `ShaderInputOutput16` device features. (API Version 240073)\n\n\n### Samples and Tutorials\n\n* Added [Tutorial21 - Ray Tracing](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial21_RayTracing)\n\n\n## v2.4.f\n\n### API Changes\n\n* Added `UnifiedMemoryCPUAccess` member to `GraphicsAdapterInfo` struct (API Version 240072)\n   * An application should check allowed unified memory access types before creating unified buffers\n* Added GPU vendor and memory size detection (API Version 240071)\n   * Added `ADAPTER_VENDOR` enum\n   * Added `GraphicsAdapterInfo` struct\n   * Added `GraphicsAdapterInfo AdapterInfo` member to `DeviceCaps` struct\n   * Removed `ADAPTER_TYPE AdaterType` from `DeviceCaps` struct \n* Reworked texture format properties (API Version 240070)\n   * Added `RESOURCE_DIMENSION_SUPPORT` enum\n   * Reworked `TextureFormatInfoExt` struct\n* Added option to disable/enable device features during initialization (API Version 240069)\n   * Added `DEVICE_FEATURE_STATE` enum\n   * Changed the types of members of `DeviceFeatures` struct from bool to `DEVICE_FEATURE_STATE`\n   * Added `DeviceFeatures Features` member to `EngineCreateInfo` struct\n* Enabled mesh shaders (API Version 240068)\n   * Added `PIPELINE_TYPE` enum\n   * Replaced `IsComputePipline` member of `PipelineStateDesc` struct with `PIPELINE_TYPE PipelineType`\n   * Added new mesh shader types\n   * Added mesh shader draw commands\n* Added `QUERY_TYPE_DURATION` query type (API Version 240067)\n* Added `USAGE_UNIFIED` usage type (API Version 240066)\n* Added render passes (API Version 240065)\n* Added `CREATE_SHADER_SOURCE_INPUT_STREAM_FLAGS` enum and `IShaderSourceInputStreamFactory::CreateInputStream2` method (API Version 240064)\n* Added `ISwapChain::SetMaximumFrameLatency` function (API Version 240061)\n* Added `EngineGLCreateInfo::CreateDebugContext` member (API Version 240060)\n* Added `SHADER_SOURCE_LANGUAGE_GLSL_VERBATIM` value (API Version 240059).\n* Added `GLBindTarget` parameter to `IRenderDeviceGL::CreateTextureFromGLHandle` method (API Version 240058).\n\n### Samples and Tutorials\n\n* Added [HelloAR Android sample](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Android/HelloAR)\n* Added [Tutorial19 - Render Passes](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial19_RenderPasses)\n* Added [Tutorial20 - Mesh Shader](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial20_MeshShader)\n\n\n## v2.4.e\n\n### General\n\n* Enabled Vulkan on Android\n* Added C Interface (API Version 240052)\n\n### API Changes\n\n* Added `PreTransform` parameter to swap chain description (API Version 240057).\n* Added `PipelineStateCreateInfo` struct that is now taken by `IRenderDevice::CreatePipelineState` instead of\n  `PipelineStateDesc` struct. Added `PSO_CREATE_FLAGS` enum (API Version 240056).\n\n  Old API:\n  ```cpp\n  PipelineStateDesc PSODesc;\n  // ...\n  pRenderDevice->CreatePipelineState(PSODesc, &pPSO);\n  ```\n\n  New API:\n  ```cpp\n  PipelineStateCreateInfo PSOCreateInfo;\n  PipelineStateDesc&      PSODesc = PSOCreateInfo.PSODesc;\n  // ...\n  pRenderDevice->CreatePipelineState(PSOCreateInfo, &pPSO);\n  ```\n\n* Added `PRIMITIVE_TOPOLOGY_LINE_STRIP` topology (API Version 240055)\n* Updated swap chain creation functions to use `NativeWindow` (API Version 240054)\n* Added `NativeWindow` wrapper and replaced `pNativeWndHandle` and `pDisplay` members with it in `EngineGLCreateInfo` (API Version 240053)\n\n\n## v2.4.d\n\n### API Changes\n\n* Added Queries (API Version 240051)\n* Added `AdapterType` member to `DeviceCaps` struct (API Version 240048)\n* Added `IDeviceContextGL::SetSwapChain` and `IRenderDeviceGL::CreateDummyTexture` methods (API Version 240047)\n* Removed `IDeviceContext::SetSwapChain` method (API Version 240046)\n* Renamed `MAP_FLAG_DO_NOT_SYNCHRONIZE` flag to `MAP_FLAG_NO_OVERWRITE` (API Version 240045)\n* Added `GetVkInstance` and `GetVkPhysicalDevice` methods to `IRenderDeviceVk` interface (API Version 240044)\n* Added `HLSLSemantic` member to `LayoutElement` struct (API Version 240042)\n* Added `ResolveTextureSubresource` device context command, removed `SamplesCount` member of the\n  `SwapChainDesc` (API Version 240041)\n* Added `APIVersion` member to `EngineCreateInfo` struct (API Version 240040)\n* Added `IDeviceObject::GetUniqueID` method (API Version 240039)\n* Added `IDeviceContextD3D12::LockCommandQueue`, `IDeviceContextD3D12::UnlockCommandQueue`,\n  `IDeviceContextVk::LockCommandQueue`, and `IDeviceContextVk::UnlockCommandQueue` methods (API Version 240038)\n* Added `EnableGPUBasedValidation` member to `EngineD3D12CreateInfo` struct (API Version 240037)\n* Added `DRAW_FLAG_RESOURCE_BUFFERS_INTACT` flag (API Version 240036)\n* Added `HLSLVersion`, `GLSLVersion` and `GLESSLVersion` to `ShaderCreateInfo` struct (API Version 240035)\n* Renamed `EngineD3D11DebugFlags` to `D3D11_DEBUG_FLAGS` (API Version 240034)\n* Split up `Draw` command into `Draw`, `DrawIndexed`, `DrawIndirect` and `DrawIndexedIndirect`.\n  Split up `DispatchCompute` command into `DispatchCompute` and `DispatchComputeInidrect` (API Version 240033).\n* Enabled bindless resources\n* Removed `SHADER_PROFILE` enum (API Version 240032)\n* Added `DIRECT3D_FEATURE_LEVEL` and `DIRECT3D_FEATURE_LEVEL MinimumFeatureLevel` member to \n  `EngineD3D11CreateInfo` and `EngineD3D12CreateInfo` structs (API Version 240032)\n* Updated `IEngineFactoryD3D11::EnumerateHardwareAdapters`, `IEngineFactoryD3D11::EnumerateDisplayModes`,\n  `IEngineFactoryD3D12::EnumerateHardwareAdapters`, `IEngineFactoryD3D12::EnumerateDisplayModes` \n  to take minimum feature level. (API Version 240032)\n* Added `bBindlessSupported` member to `DeviceCaps` struct. (API Version 240032)\n\n### General\n\n* Enabled automated unit testing, format validation and static code analysis\n* Added [Tutorial16 - Bindless Resources](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial16_BindlessResources)\n* Added [Tutorial17 - MSAA](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial17_MSAA)\n* Added [Tutorial18 - Queries](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial18_Queries)\n* Removed RenderScript and Lua\n\n## v2.4.c\n\n### General\n\n* Enabled Vulkan on iOS\n* Replaced AntTweakBar UI library with dear imgui\n* Added [GLTF2.0 loader](https://github.com/DiligentGraphics/DiligentTools/tree/master/AssetLoader)\n  and [PBR renderer](https://github.com/DiligentGraphics/DiligentFX/tree/master/GLTF_PBR_Renderer)\n* Added [GLTF Viewer](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/GLTFViewer)\n* Added [Shadowing Component](https://github.com/DiligentGraphics/DiligentFX/tree/master/Components#shadows)\n  and [Shadows Sample](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/Shadows)\n* Added [Dear Imgui demo](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Samples/ImguiDemo)\n* Added [Tutorial13 - Shadow Map](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial13_ShadowMap)\n* Added [Tutorial14 - Compute Shader](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial14_ComputeShader)\n* Added [Tutorial15 - Multiple Windows](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial15_MultipleWindows)\n* Removed AntTweakBar sample\n\n### API changes\n\n* Moved `NumDeferredContexts` parameter from factory functions `IEngineFactoryD3D11::CreateDeviceAndContextsD3D11`,\n  `IEngineFactoryD3D12::CreateDeviceAndContextsD3D12` and `IEngineFactoryVk::CreateDeviceAndContextsVk` to\n  `EngineCreateInfo` struct.\n* Renamed `USAGE_CPU_ACCESSIBLE` -> `USAGE_STAGING`\n* Added `SWAP_CHAIN_USAGE_FLAGS` enum\n* Replaced overloaded `IPipelineState::GetStaticShaderVariable()` with `IPipelineState::GetStaticVariableByName()` and `IPipelineState::GetStaticVariableByIndex()`\n* Replaced overloaded `IShaderResourceBinding::GetVariable()` with `IShaderResourceBinding::GetVariableByName()` and `IShaderResourceBinding::GetVariableByIndex()`\n* Made `IShaderSourceInputStreamFactory` derived from `IObject`;\n  added `IEngineFactory::CreateDefaultShaderSourceStreamFactory()` method;\n  added `IRenderDevice::GetEngineFactory()` method (API Version 240021)\n* Added `DRAW_FLAG_VERIFY_DRAW_ATTRIBS`, `DRAW_FLAG_VERIFY_RENDER_TARGETS`, and `DRAW_FLAG_VERIFY_ALL` flags (API Version 240022)\n* `TEXTURE_VIEW_FLAGS` enum and `Flags` member to `TextureViewDesc` structure (API Version 240023)\n* Added `IShaderResourceVariable::IsBound()` method (API Version 240024)\n* Added `Diligent-` prefix to project names to avoid name conflicts.\n* Added `IDeviceContextD3D12::GetD3D12CommandList` method\n* Added `IDeviceContext::WaitForFence()` method (API Version 240027)\n* Added `IDeviceContext::WaitForIdle()` method (API Version 240028)\n* Added `IRenderDevice::IdleGPU()` method (API Version 240029)\n* Added `EngineD3D12CreateInfo::EnableDebugLayer` member (API Version 240030)\n* Added `EngineD3D12CreateInfo::BreakOnError` and `EngineD3D12CreateInfo::BreakOnCorruption` members (API Version 240031)\n\n\n## v2.4.b\n\n### General\n\n* Added cmake options to disable specific back-ends and glslang\n* Improved engine support of GLES3.0 devices\n* Added new module - [DiligentFX](https://github.com/DiligentGraphics/DiligentFX), a high-level rendering framework\n  * Reworked light scattering post-processing effect to be ready-to-use component\n\n### API changes\n\n* Updated `IRenderDevice::CreateTexture()` and `IRenderDevice::CreateBuffer()` to take pointer\n  to initialization data rather than references.\n* Added `LayoutElement::AutoOffset` and `LayoutElement::AutoOffset` values to use instead of 0 when\n  automatically computing input layout elements offset and strides.\n* Renamed factory interfaces and headers:\n  * `IRenderDeviceFactoryD3D11` -> `IEngineFactoryD3D11`, RenderDeviceFactoryD3D11.h -> EngineFactoryD3D11.h\n  * `IRenderDeviceFactoryD3D12` -> `IEngineFactoryD3D12`, RenderDeviceFactoryD3D12.h -> EngineFactoryD3D12.h\n  * `IRenderDeviceFactoryOpenGL` -> `IEngineFactoryOpenGL`, RenderDeviceFactoryOpenGL.h -> EngineFactoryOpenGL.h\n  * `IRenderDeviceFactoryVk` -> `IEngineFactoryVk`, RenderDeviceFactoryVk.h -> EngineFactoryVk.h\n  * `IRenderDeviceFactoryMtl` -> `IEngineFactoryMtl`, RenderDeviceFactoryMtl.h -> EngineFactoryMtl.h\n* Renamed `IShaderVariable` -> `IShaderResourceVariable`\n* Renamed `SHADER_VARIABLE_TYPE` -> `SHADER_RESOURCE_VARIABLE_TYPE`\n* Renamed `ShaderVariableDesc` -> `ShaderResourceVariableDesc`\n* Added `SHADER_RESOURCE_TYPE` enum\n* Moved shader variable type and static sampler definition from shader creation to PSO creation stage:\n  * Removed `IShader::GetVariable`, `IShader::GetVariableCount`, and `IShader::BindResources` methods\n  * Added `IPipelineState::BindStaticResoruces`, `IPipelineState::GetStaticVariableCount`,\n    and `IPipelineState::GetStaticShaderVariable` methods\n  * Added `PipelineResourceLayoutDesc` structure and `ResourceLayout` member to `PipelineStateDesc`\n* Added `ShaderResourceDesc` structure\n* Added `IShader::GetResourceCount` and `IShader::GetResource` methods\n* Replaced `IShaderVariable::GetArraySize` and `IShaderVariable::GetName` methods with `IShaderResourceVariable::GetResourceDesc` method\n* Added `HLSLShaderResourceDesc` structure as well as `IShaderResourceVariableD3D` and `IShaderResourceVariableD3D` interfaces \n  to query HLSL-specific shader resource description (shader register)\n\nWith the new API, shader initialization and pipeline state creation changed as shown below.\n\nOld API:\n\n```cpp\nRefCntAutoPtr<IShader> pVS;\n{\n    CreationAttribs.Desc.ShaderType = SHADER_TYPE_VERTEX;\n    CreationAttribs.EntryPoint = \"main\";\n    CreationAttribs.Desc.Name  = \"Cube VS\";\n    CreationAttribs.FilePath   = \"cube.vsh\";\n    pDevice->CreateShader(CreationAttribs, &pVS);\n    pVS->GetShaderVariable(\"Constants\")->Set(m_VSConstants);\n}\nRefCntAutoPtr<IShader> pPS;\n{\n    CreationAttribs.Desc.ShaderType = SHADER_TYPE_PIXEL;\n    CreationAttribs.EntryPoint = \"main\";\n    CreationAttribs.Desc.Name  = \"Cube PS\";\n    CreationAttribs.FilePath   = \"cube.psh\";\n    ShaderVariableDesc Vars[] = \n    {\n        {\"g_Texture\", SHADER_VARIABLE_TYPE_MUTABLE}\n    };\n    CreationAttribs.Desc.VariableDesc = Vars;\n    CreationAttribs.Desc.NumVariables = _countof(Vars);\n\n    SamplerDesc SamLinearClampDesc( FILTER_TYPE_LINEAR, FILTER_TYPE_LINEAR, FILTER_TYPE_LINEAR, \n                                    TEXTURE_ADDRESS_CLAMP, TEXTURE_ADDRESS_CLAMP, TEXTURE_ADDRESS_CLAMP);\n    StaticSamplerDesc StaticSamplers[] = \n    {\n        {\"g_Texture\", SamLinearClampDesc}\n    };\n    CreationAttribs.Desc.StaticSamplers = StaticSamplers;\n    CreationAttribs.Desc.NumStaticSamplers = _countof(StaticSamplers);\n\n    pDevice->CreateShader(CreationAttribs, &pPS);\n}\n// ...\npDevice->CreatePipelineState(PSODesc, &m_pPSO);\n```\n\nNew API:\n\n```cpp\nRefCntAutoPtr<IShader> pVS;\n{\n    ShaderCI.Desc.ShaderType = SHADER_TYPE_VERTEX;\n    ShaderCI.EntryPoint      = \"main\";\n    ShaderCI.Desc.Name       = \"Cube VS\";\n    ShaderCI.FilePath        = \"cube.vsh\";\n    pDevice->CreateShader(ShaderCI, &pVS);\n}\nRefCntAutoPtr<IShader> pVS;\n{\n    ShaderCI.Desc.ShaderType = SHADER_TYPE_VERTEX;\n    ShaderCI.EntryPoint      = \"main\";\n    ShaderCI.Desc.Name       = \"Cube VS\";\n    ShaderCI.FilePath        = \"cube.vsh\";\n    pDevice->CreateShader(ShaderCI, &pVS);\n}\n// ...\nShaderResourceVariableDesc Vars[] = \n{\n    {SHADER_TYPE_PIXEL, \"g_Texture\", SHADER_RESOURCE_VARIABLE_TYPE_MUTABLE}\n};\nPSODesc.ResourceLayout.Variables    = Vars;\nPSODesc.ResourceLayout.NumVariables = _countof(Vars);\n\n// Define static sampler for g_Texture. Static samplers should be used whenever possible\nSamplerDesc SamLinearClampDesc( FILTER_TYPE_LINEAR, FILTER_TYPE_LINEAR, FILTER_TYPE_LINEAR, \n                                TEXTURE_ADDRESS_CLAMP, TEXTURE_ADDRESS_CLAMP, TEXTURE_ADDRESS_CLAMP);\nStaticSamplerDesc StaticSamplers[] = \n{\n    {SHADER_TYPE_PIXEL, \"g_Texture\", SamLinearClampDesc}\n};\nPSODesc.ResourceLayout.StaticSamplers    = StaticSamplers;\nPSODesc.ResourceLayout.NumStaticSamplers = _countof(StaticSamplers);\n\npDevice->CreatePipelineState(PSODesc, &m_pPSO);\nm_pPSO->GetStaticShaderVariable(SHADER_TYPE_VERTEX, \"Constants\")->Set(m_VSConstants);\n```\n\n### Samples and Tutorials\n\n* Added [Tutorial12 - Render target](https://github.com/DiligentGraphics/DiligentSamples/tree/master/Tutorials/Tutorial12_RenderTarget)\n  (credits to @dolphineye for contribution)\n\n## v2.4.a\n\n* Enabled MinGW build\n* Enabled Vulkan on MacOS\n* Implemented split barriers (https://github.com/DiligentGraphics/DiligentCore/issues/43)\n  * Added `STATE_TRANSITION_TYPE` enum and `STATE_TRANSITION_TYPE TransitionType` member to `StateTransitionDesc` structure\n* Added Metal backend stub\n* Samples:\n  * Added rendering backend selection dialog on Win32 and Mac\n\n## v2.4\n\nCore:\n\n* Implemented explicit resource state transitions\n* API Changes\n  * Added `RESOURCE_STATE` enum that defines the resource state\n  * Added `RESOURCE_STATE_TRANSITION_MODE` enum that controls resource state transition mode\n  * Added `DRAW_FLAGS` enum that controls state validation performed by Draw command\n  * Added `Flags` member to `DrawAttribs` structure (values from `DRAW_FLAGS`)\n  * Added `IndirectAttribsBufferStateTransitionMode` member to `DrawAttribs` and `DispatchComputeAttribs` structures (values from `RESOURCE_STATE_TRANSITION_MODE`)\n  * Added `StateTransitionDesc` structure that describes resource state transition barrier\n  * Added `IDeviceContext::TransitionResourceStates(Uint32 BarrierCount, StateTransitionDesc* pResourceBarriers)` method\n  * Added `IBuffer::SetState()`, `IBuffer::GetState()`, `ITexture::SetState()`, `ITexture::GetState()` methods\n  * Added `IShaderResourceBinding::InitializeStaticResources()` to explicitly initialize static resources and\n    avoid problems in multi-threaded environments\n  * Added `InitStaticResources` parameter to `IPipelineState::CreateShaderResourceBinding()` method to allow\n    immediate initialization of static resources in a SRB\n  * Removed default SRB object\n  * Renamed/moved `IBuffer::UpdateData()` to `IDeviceContext::UpdateBuffer()`\n  * Renamed/moved `IBuffer::CopyData()` to `IDeviceContext::CopyBuffer()`\n  * Renamed/moved `IBuffer::Map()` to `IDeviceContext::MapBuffer()`\n  * Renamed/moved `IBuffer::Unmap()` to `IDeviceContext::UnmapBuffer()`\n    * Removed MapFlags parameter\n  * Renamed/moved `ITexture::UpdateData()` to `IDeviceContext::UpdateTexture()`\n  * Renamed/moved `ITexture::CopyData()` to `IDeviceContext::CopyTexture()`\n  * Renamed/moved `ITexture::Map()` to `IDeviceContext::MapTextureSubresource()`\n  * Renamed/moved `ITexture::Unmap()` to `IDeviceContext::UnmapTextureSubresource()`\n  * Moved `ITextureView::GenerateMips()` to `IDeviceContext::GenerateMips()`\n  * Added state transition mode parameters to `IDeviceContext::UpdateBuffer()`, `IDeviceContext::UpdateTexture()`,\n    `IDeviceContext::CopyBuffer()`, `IDeviceContext::CopyTexture()`, `IDeviceContext::SetVertexBuffers()`, \n    `IDeviceContext::SetIndexBuffers()`, `IDeviceContext::ClearRenderTargets()`, and `IDeviceContext::ClearDepthStencil()` methods\n  * Replaced `COMMIT_SHADER_RESOURCES_FLAGS` enum with `RESOURCE_STATE_TRANSITION_MODE`\n  * Added `ITextureD3D12::GetD3D12ResourceState()`, `IBufferD3D12::GetD3D12ResourceState()`,\n    `IBufferVk::GetAccessFlags()`, and `ITextureVk::GetLayout()` methods\n  * Added `CopyTextureAttribs` structure that combines all parameters of `IDeviceContext::CopyTexture()` method\n\n## v2.3.b\n\n* Core\n  * Enabled Vulkan backend on Linux\n  * API Changes\n    * Implemented separate texture samplers: \n      * Added `UseCombinedTextureSamplers` and `CombinedSamplerSuffix` members to `ShaderCreationAttribs` structure\n      * When separate samplers are used (`UseCombinedTextureSamplers == false`), samplers are set in the same way as other shader variables\n        via shader or SRB objects\n    * Removed `BIND_SHADER_RESOURCES_RESET_BINDINGS` flag, renamed `BIND_SHADER_RESOURCES_KEEP_EXISTING` to `BIND_SHADER_RESOURCES_KEEP_EXISTING`.\n      Added `BIND_SHADER_RESOURCES_UPDATE_STATIC`, `BIND_SHADER_RESOURCES_UPDATE_MUTABLE`, `BIND_SHADER_RESOURCES_UPDATE_DYNAMIC`, and\n      `BIND_SHADER_RESOURCES_UPDATE_ALL` flags\n  * Using glslang to compile HLSL to SPIRV in Vulkan backend instead of relying on HLSL->GLSL converter\n\n\n## v2.3.a\n\n* Core\n  * Added `IFence` interface and `IDeviceContext::SignalFence()` method to enable CPU-GPU synchronization\n  * Added `BUFFER_MODE_RAW` mode allowing raw buffer views in D3D11/D3D12.\n  * Moved `Format` member from `BufferDesc` to `BufferViewDesc`\n  * Removed `IsIndirect` member from `DrawAttrbis` as setting `pIndirectDrawAttribs` to a non-null buffer already indicates indirect rendering\n\n* Samples:\n  * Added Tutorial 10 - Data Streaming\n  * Added Tutorial 11 - Resource Updates\n\n## v2.3\n\n* Core:\n  * **Implemented Vulkan backend**\n  * Implemented hardware adapter & display mode enumeration in D3D11 and D3D12 modes\n  * Implemented initialization in fullscreen mode as well as toggling between fullscreen and windowed modes in run time\n  * Added sync interval parameter to ISwapChain::Present()\n  * API Changes\n    * Added `NumViewports` member to `GraphicsPipelineDesc` struct\n    * Removed `PRIMITIVE_TOPOLOGY_TYPE` type\n    * Replaced `PRIMITIVE_TOPOLOGY_TYPE GraphicsPipelineDesc::PrimitiveTopologyType` \n      with `PRIMITIVE_TOPOLOGY GraphicsPipelineDesc::PrimitiveTopology`\n    * Removed `DrawAttribs::Topology`\n    * Removed `pStrides` parameter from `IDeviceContext::SetVertexBuffers()`. Strides are now defined\n      through vertex layout.\n* API Changes:\n  * Math library functions `SetNearFarClipPlanes()`, `GetNearFarPlaneFromProjMatrix()`, `Projection()`,\n    `OrthoOffCenter()`, and `Ortho()` take `bIsGL` flag instead of `bIsDirectX`\n  * Vertex buffer strides are now defined by the pipeline state as part of the input layout description (`LayoutElement::Stride`)\n  * Added `COMMIT_SHADER_RESOURCES_FLAG_VERIFY_STATES` flag\n  * Added `NumViewports` member to `GraphicsPipelineDesc` structure\n* Samples:\n  * Added fullscreen mode selection dialog box\n  * Implemented fullscreen mode toggle on UWP with shift + enter\n  * Implemented fullscreen window toggle on Win32 with alt + enter\n  * Added Tutorial 09 - Quads\n* Fixed the following issues:\n  * [Add option to redirect diligent error messages](https://github.com/DiligentGraphics/DiligentEngine/issues/9)\n  * [Add ability to run in exclusive fullscreen/vsync mode](https://github.com/DiligentGraphics/DiligentEngine/issues/10)\n\n## v2.2.a\n\n* Enabled Win32 build targeting Windows 8.1 SDK\n* Enabled build customization through custom build config file\n* Implemented PSO compatibility\n* Fixed the following issues: \n  * [Messy #include structure?](https://github.com/DiligentGraphics/DiligentEngine/issues/3) \n  * [Move GetEngineFactoryXXXType and LoadGraphicsEngineXXX to Diligent namespace](https://github.com/DiligentGraphics/DiligentEngine/issues/5)\n  * [Customizable build scripts](https://github.com/DiligentGraphics/DiligentEngine/issues/6)\n  * [Win32FileSystem related functions should use wchar_t (UTF-16)](https://github.com/DiligentGraphics/DiligentEngine/issues/7)\n\n## v2.2\n\n* Added MacOS  and iOS support\n\n## v2.1.b\n\n* Removed legacy Visual Studio solution and project files\n* Added API reference\n* Added tutorials 1-8\n\n## v2.1.a\n\n* Refactored build system to use CMake and Gradle for Android\n* Added support for Linux platform\n\n## v2.1\n\n### New Features\n\n#### Core\n\n* Interoperability with native API\n  * Accessing internal objects and handles\n  * Creating diligent engine buffers/textures from native resources\n  * Attaching to existing D3D11/D3D12 device or GL context\n  * Resource state and command queue synchronization for D3D12\n* Integraion with Unity\n* Geometry shader support\n* Tessellation support\n* Performance optimizations\n\n#### HLSL->GLSL converter\n* Support for structured buffers\n* HLSL->GLSL conversion is now a two-stage process:\n  * Creating conversion stream\n  * Creating GLSL source from the stream\n* Geometry shader support\n* Tessellation control and tessellation evaluation shader support\n* Support for non-void shader functions\n* Allowing structs as input parameters for shader functions\n\n\n## v2.0 (alpha)\n\nAlpha release of Diligent Engine 2.0. The engine has been updated to take advantages of Direct3D12:\n\n* Pipeline State Object encompasses all coarse-grain state objects like Depth-Stencil State, Blend State, Rasterizer State, shader states etc.\n* New shader resource binding model implemented to leverage Direct3D12\n\n* OpenGL and Direct3D11 backends\n* Alpha release is only available on Windows platform\n* Direct3D11 backend is very thoroughly optimized and has very low overhead compared to native D3D11 implementation\n* Direct3D12 implementation is preliminary and not yet optimized\n\n### v1.0.0\n\nInitial release"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "Troubleshooting.md",
          "type": "blob",
          "size": 2.0986328125,
          "content": "### Build fails\n  \n* Make sure your code is up-to-date. When updating existing repository, don't forget to update all submodules:\n\n```\ngit pull\ngit submodule update --recursive\n```\n\n* Try to [get clean version](https://github.com/DiligentGraphics/DiligentEngine#cloning-the-repository)\n\n* Make sure your build environment is up-to-date and properly configured:\n  * When building with Visual Studio, make sure you use Windows SDK 10.0.17763.0 or later,\n    have C++ build tools and Visual C++ ATL Support installed.\n  * When building for UWP, make sure you have UWP build tools.\n  * When building for Android, make sure all your tools are up to date, you have\n    [NDK and CMake installed](https://developer.android.com/studio/projects/install-ndk).\n    If you are not using CMake version bundled with Android Studio, make sure your build files are\n    [properly configured](https://developer.android.com/studio/projects/add-native-code.html#use_a_custom_cmake_version).\n  * When using gcc, make sure the compiler version is at least 7.4.\n  * gcc 9, 10 and 11 seemingly produce invalid code in release configurations that causes crash on startup.\n    Use gcc 7 or 8 or clang.\n  * Make sure you build the project with c++14 features enabled.\n\n* When including Diligent headers, make sure that exactly one of `PLATFORM_WIN32`,\n  `PLATFORM_UNIVERSAL_WINDOWS`, `PLATFORM_ANDROID`, `PLATFORM_LINUX`, `PLATFORM_MACOS`, and\n  `PLATFORM_IOS` macros is defined as `1`.\n\n* When building on Windows, generating Visual Studio project files is the recommended way.\n  Other IDEs such as Visual Studio Code or CLion may need extra configuration to properly set up\n  the build environment.\n\n* If on Windows you get long path error, try cloning the project to a folder with shorter name\n  such as `c:/git/DiligentEngine`.\n\n* If on MacOS CMake fails to find the compiler, run the following command:\n  ```cmake\n  sudo xcode-select --reset\n  ```  \n\n### Projects don't run\n\n* When running from the command line, make sure that the project's `assets` folder is set as working directory\n* Try using different backends: use `-mode d3d11` or `-mode gl` command line options \n"
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.013671875,
          "content": "version: '2.5.{build}'\n\n# branches to build\nbranches:\n  # whitelist\n  only:\n    - master\n\nimage:\n- Visual Studio 2019\n\nenvironment: \n  matrix:\n    # Win32/x64/Debug\n    - platform: x64\n      configuration: Debug\n      cmake_args: -D DILIGENT_BUILD_CORE_TESTS=TRUE -D DILIGENT_BUILD_TOOLS_TESTS=TRUE\n      platform_name: Windows\n\n    # Win32/x64/RelWithDebInfo\n    - platform: x64\n      configuration: RelWithDebInfo\n      cmake_args:\n      platform_name: Windows\n\n# clone directory\nclone_folder: c:\\projects\\diligentengine\n\ninstall:\n  # clone submodules\n  - git submodule update --init --recursive\n  - ps: DiligentCore\\BuildTools\\Scripts\\appveyor\\install.ps1\n \nbefore_build:\n  - 'cd %APPVEYOR_BUILD_FOLDER%\\DiligentCore\\BuildTools\\FormatValidation'\n  - validate_format_win.bat\n  - 'cd %APPVEYOR_BUILD_FOLDER%\\DiligentTools\\BuildTools\\FormatValidation'\n  - validate_format_win.bat\n  - 'cd %APPVEYOR_BUILD_FOLDER%\\DiligentFX\\BuildTools\\FormatValidation'\n  - validate_format_win.bat\n  - 'cd %APPVEYOR_BUILD_FOLDER%\\DiligentSamples\\BuildTools\\FormatValidation'\n  - validate_format_win.bat\n  - 'cd %APPVEYOR_BUILD_FOLDER%'\n  - echo %PLATFORM%\n  - echo.%cmake_args%\n  - cmake %cmake_args% -S . -B ./build -D DILIGENT_MSVC_COMPILE_OPTIONS=\"/WX\" -D DILIGENT_MSVC_RELEASE_COMPILE_OPTIONS=\"/arch:AVX2\" -G \"Visual Studio 16 2019\" -A %PLATFORM%\n  - nuget restore C:\\projects\\diligentengine\\build\\DiligentEngine.sln\n\nbuild:\n  project: '%APPVEYOR_BUILD_FOLDER%\\build\\DiligentEngine.sln'\n  verbosity: minimal\n  parallel: true\n\ntest_script:\n  - 'if \"%configuration%\"==\"Debug\" (%APPVEYOR_BUILD_FOLDER%\\DiligentCore\\BuildTools\\Scripts\\appveyor\\run_tests.bat %APPVEYOR_BUILD_FOLDER%\\build\\DiligentCore %APPVEYOR_BUILD_FOLDER%\\DiligentCore\\Tests\\DiligentCoreTest\\assets %APPVEYOR_BUILD_FOLDER%\\DiligentCore\\Tests\\DiligentCoreAPITest\\assets)'\n  - 'cd %APPVEYOR_BUILD_FOLDER%\\DiligentTools\\Tests\\DiligentToolsTest\\assets'\n  - 'if \"%configuration%\"==\"Debug\" (%APPVEYOR_BUILD_FOLDER%\\DiligentTools\\BuildTools\\Scripts\\appveyor\\run_tests.bat %APPVEYOR_BUILD_FOLDER%\\build\\DiligentTools)'\n"
        }
      ]
    }
  ]
}