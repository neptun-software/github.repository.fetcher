{
  "metadata": {
    "timestamp": 1736557263639,
    "page": 136,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "bregman-arie/devops-exercises",
      "stars": 67300,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.07,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n.hypothesis/\n.pytest_cache/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# pyenv\n.python-version\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n*.pyc\n\n#Jetbrain's ides.\n.idea"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.15,
          "content": "language: \"python\"\npython:\n    - \"3.8\"\ninstall:\n    - pip install flake8\nscript:\n    - flake8 --max-line-length=100 .\n    - python tests/syntax_lint.py\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7,
          "content": "## How to contribute\n\nUse pull requests to contribute to the project.\n\nStick to the following format:\n\n\\<details>\n<summary>[Question]</summary><br><b>\n\n[Answer]\n\\</b></details>\n\n* If you added several questions and you would like to know how many questions are there you can use the script \"count_questions.sh\" in scripts directory.\n\n## What to avoid\n\n* Avoid adding installation questions. Those are the worst type of questions...\n* Don't copy questions and answers from other sources. They probably worked hard for adding them.\n* If you add new images, make sure they are free and can be used.\n\n## Before submitting the pull request\n\nYou can test your changes locally with the script `run_ci.sh` in scripts directory.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 15.59,
          "content": "THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR \"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS PROHIBITED.\n\nBY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. TO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A CONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND CONDITIONS.\n\n1. Definitions\n\"Adaptation\" means a work based upon the Work, or upon the Work and other pre-existing works, such as a translation, adaptation, derivative work, arrangement of music or other alterations of a literary or artistic work, or phonogram or performance and includes cinematographic adaptations or any other form in which the Work may be recast, transformed, or adapted including in any form recognizably derived from the original, except that a work that constitutes a Collection will not be considered an Adaptation for the purpose of this License. For the avoidance of doubt, where the Work is a musical work, performance or phonogram, the synchronization of the Work in timed-relation with a moving image (\"syncing\") will be considered an Adaptation for the purpose of this License.\n\"Collection\" means a collection of literary or artistic works, such as encyclopedias and anthologies, or performances, phonograms or broadcasts, or other works or subject matter other than works listed in Section 1(f) below, which, by reason of the selection and arrangement of their contents, constitute intellectual creations, in which the Work is included in its entirety in unmodified form along with one or more other contributions, each constituting separate and independent works in themselves, which together are assembled into a collective whole. A work that constitutes a Collection will not be considered an Adaptation (as defined above) for the purposes of this License.\n\"Distribute\" means to make available to the public the original and copies of the Work through sale or other transfer of ownership.\n\"Licensor\" means the individual, individuals, entity or entities that offer(s) the Work under the terms of this License.\n\"Original Author\" means, in the case of a literary or artistic work, the individual, individuals, entity or entities who created the Work or if no individual or entity can be identified, the publisher; and in addition (i) in the case of a performance the actors, singers, musicians, dancers, and other persons who act, sing, deliver, declaim, play in, interpret or otherwise perform literary or artistic works or expressions of folklore; (ii) in the case of a phonogram the producer being the person or legal entity who first fixes the sounds of a performance or other sounds; and, (iii) in the case of broadcasts, the organization that transmits the broadcast.\n\"Work\" means the literary and/or artistic work offered under the terms of this License including without limitation any production in the literary, scientific and artistic domain, whatever may be the mode or form of its expression including digital form, such as a book, pamphlet and other writing; a lecture, address, sermon or other work of the same nature; a dramatic or dramatico-musical work; a choreographic work or entertainment in dumb show; a musical composition with or without words; a cinematographic work to which are assimilated works expressed by a process analogous to cinematography; a work of drawing, painting, architecture, sculpture, engraving or lithography; a photographic work to which are assimilated works expressed by a process analogous to photography; a work of applied art; an illustration, map, plan, sketch or three-dimensional work relative to geography, topography, architecture or science; a performance; a broadcast; a phonogram; a compilation of data to the extent it is protected as a copyrightable work; or a work performed by a variety or circus performer to the extent it is not otherwise considered a literary or artistic work.\n\"You\" means an individual or entity exercising rights under this License who has not previously violated the terms of this License with respect to the Work, or who has received express permission from the Licensor to exercise rights under this License despite a previous violation.\n\"Publicly Perform\" means to perform public recitations of the Work and to communicate to the public those public recitations, by any means or process, including by wire or wireless means or public digital performances; to make available to the public Works in such a way that members of the public may access these Works from a place and at a place individually chosen by them; to perform the Work to the public by any means or process and the communication to the public of the performances of the Work, including by public digital performance; to broadcast and rebroadcast the Work by any means including signs, sounds or images.\n\"Reproduce\" means to make copies of the Work by any means including without limitation by sound or visual recordings and the right of fixation and reproducing fixations of the Work, including storage of a protected performance or phonogram in digital form or other electronic medium.\n\n2. Fair Dealing Rights. \nNothing in this License is intended to reduce, limit, or restrict any uses free from copyright or rights arising from limitations or exceptions that are provided for in connection with the copyright protection under copyright law or other applicable laws.\n\n3. License Grant. \nSubject to the terms and conditions of this License, Licensor hereby grants You a worldwide, royalty-free, non-exclusive, perpetual (for the duration of the applicable copyright) license to exercise the rights in the Work as stated below:\n\nto Reproduce the Work, to incorporate the Work into one or more Collections, and to Reproduce the Work as incorporated in the Collections; and,\nto Distribute and Publicly Perform the Work including as incorporated in Collections.\nThe above rights may be exercised in all media and formats whether now known or hereafter devised. The above rights include the right to make such modifications as are technically necessary to exercise the rights in other media and formats, but otherwise you have no rights to make Adaptations. Subject to 8(f), all rights not expressly granted by Licensor are hereby reserved, including but not limited to the rights set forth in Section 4(d).\n\n4. Restrictions. \nThe license granted in Section 3 above is expressly made subject to and limited by the following restrictions:\n\nYou may Distribute or Publicly Perform the Work only under the terms of this License. You must include a copy of, or the Uniform Resource Identifier (URI) for, this License with every copy of the Work You Distribute or Publicly Perform. You may not offer or impose any terms on the Work that restrict the terms of this License or the ability of the recipient of the Work to exercise the rights granted to that recipient under the terms of the License. You may not sublicense the Work. You must keep intact all notices that refer to this License and to the disclaimer of warranties with every copy of the Work You Distribute or Publicly Perform. When You Distribute or Publicly Perform the Work, You may not impose any effective technological measures on the Work that restrict the ability of a recipient of the Work from You to exercise the rights granted to that recipient under the terms of the License. This Section 4(a) applies to the Work as incorporated in a Collection, but this does not require the Collection apart from the Work itself to be made subject to the terms of this License. If You create a Collection, upon notice from any Licensor You must, to the extent practicable, remove from the Collection any credit as required by Section 4(c), as requested.\nYou may not exercise any of the rights granted to You in Section 3 above in any manner that is primarily intended for or directed toward commercial advantage or private monetary compensation. The exchange of the Work for other copyrighted works by means of digital file-sharing or otherwise shall not be considered to be intended for or directed toward commercial advantage or private monetary compensation, provided there is no payment of any monetary compensation in connection with the exchange of copyrighted works.\nIf You Distribute, or Publicly Perform the Work or Collections, You must, unless a request has been made pursuant to Section 4(a), keep intact all copyright notices for the Work and provide, reasonable to the medium or means You are utilizing: (i) the name of the Original Author (or pseudonym, if applicable) if supplied, and/or if the Original Author and/or Licensor designate another party or parties (e.g., a sponsor institute, publishing entity, journal) for attribution (\"Attribution Parties\") in Licensor's copyright notice, terms of service or by other reasonable means, the name of such party or parties; (ii) the title of the Work if supplied; (iii) to the extent reasonably practicable, the URI, if any, that Licensor specifies to be associated with the Work, unless such URI does not refer to the copyright notice or licensing information for the Work. The credit required by this Section 4(c) may be implemented in any reasonable manner; provided, however, that in the case of a Collection, at a minimum such credit will appear, if a credit for all contributing authors of Collection appears, then as part of these credits and in a manner at least as prominent as the credits for the other contributing authors. For the avoidance of doubt, You may only use the credit required by this Section for the purpose of attribution in the manner set out above and, by exercising Your rights under this License, You may not implicitly or explicitly assert or imply any connection with, sponsorship or endorsement by the Original Author, Licensor and/or Attribution Parties, as appropriate, of You or Your use of the Work, without the separate, express prior written permission of the Original Author, Licensor and/or Attribution Parties.\nFor the avoidance of doubt:\n\nNon-waivable Compulsory License Schemes. In those jurisdictions in which the right to collect royalties through any statutory or compulsory licensing scheme cannot be waived, the Licensor reserves the exclusive right to collect such royalties for any exercise by You of the rights granted under this License;\nWaivable Compulsory License Schemes. In those jurisdictions in which the right to collect royalties through any statutory or compulsory licensing scheme can be waived, the Licensor reserves the exclusive right to collect such royalties for any exercise by You of the rights granted under this License if Your exercise of such rights is for a purpose or use which is otherwise than noncommercial as permitted under Section 4(b) and otherwise waives the right to collect royalties through any statutory or compulsory licensing scheme; and,\nVoluntary License Schemes. The Licensor reserves the right to collect royalties, whether individually or, in the event that the Licensor is a member of a collecting society that administers voluntary licensing schemes, via that society, from any exercise by You of the rights granted under this License that is for a purpose or use which is otherwise than noncommercial as permitted under Section 4(b).\nExcept as otherwise agreed in writing by the Licensor or as may be otherwise permitted by applicable law, if You Reproduce, Distribute or Publicly Perform the Work either by itself or as part of any Collections, You must not distort, mutilate, modify or take other derogatory action in relation to the Work which would be prejudicial to the Original Author's honor or reputation.\n\n5. Representations, Warranties and Disclaimer\nUNLESS OTHERWISE MUTUALLY AGREED BY THE PARTIES IN WRITING, LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.\n\n6. Limitation on Liability. \nEXCEPT TO THE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n7. Termination\nThis License and the rights granted hereunder will terminate automatically upon any breach by You of the terms of this License. Individuals or entities who have received Collections from You under this License, however, will not have their licenses terminated provided such individuals or entities remain in full compliance with those licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any termination of this License.\nSubject to the above terms and conditions, the license granted here is perpetual (for the duration of the applicable copyright in the Work). Notwithstanding the above, Licensor reserves the right to release the Work under different license terms or to stop distributing the Work at any time; provided, however that any such election will not serve to withdraw this License (or any other license that has been, or is required to be, granted under the terms of this License), and this License will continue in full force and effect unless terminated as stated above.\n\n8. Miscellaneous\nEach time You Distribute or Publicly Perform the Work or a Collection, the Licensor offers to the recipient a license to the Work on the same terms and conditions as the license granted to You under this License.\nIf any provision of this License is invalid or unenforceable under applicable law, it shall not affect the validity or enforceability of the remainder of the terms of this License, and without further action by the parties to this agreement, such provision shall be reformed to the minimum extent necessary to make such provision valid and enforceable.\nNo term or provision of this License shall be deemed waived and no breach consented to unless such waiver or consent shall be in writing and signed by the party to be charged with such waiver or consent.\nThis License constitutes the entire agreement between the parties with respect to the Work licensed here. There are no understandings, agreements or representations with respect to the Work not specified here. Licensor shall not be bound by any additional provisions that may appear in any communication from You. This License may not be modified without the mutual written agreement of the Licensor and You.\nThe rights granted under, and the subject matter referenced, in this License were drafted utilizing the terminology of the Berne Convention for the Protection of Literary and Artistic Works (as amended on September 28, 1979), the Rome Convention of 1961, the WIPO Copyright Treaty of 1996, the WIPO Performances and Phonograms Treaty of 1996 and the Universal Copyright Convention (as revised on July 24, 1971). These rights and subject matter take effect in the relevant jurisdiction in which the License terms are sought to be enforced according to the corresponding provisions of the implementation of those treaty provisions in the applicable national law. If the standard suite of rights granted under applicable copyright law includes additional rights not granted under this License, such additional rights are deemed to be included in the License; this License is not intended to restrict the license of any rights under applicable law.\n"
        },
        {
          "name": "README-zh_CN.md",
          "type": "blob",
          "size": 115.4,
          "content": "<p align=\"center\"><img src=\"images/devops_exercises.png\"/></p>\n\n:information_source: &nbsp;此存储库包含有关各种技术主题的问题和练习，有时与 DevOps 和 SRE 相关\n\n:bar_chart: &nbsp;当前有 **2624** 个问题\n\n:warning: &nbsp;您可以使用这些来准备面试，但大多数问题和练习并不代表实际的面试。请阅读[常见问题](faq.md)了解更多详情\n\n:page_facing_up: &nbsp;不同的面试官专注于不同的事情。 有些人将重点放在你的简历上，而另一些人可能将重点放在方案问题或特定的技术问题上。 在这个仓库，我尽力覆盖各种类型的 DevOps 问题，供你练习和测试你的知识\n\n:pencil: &nbsp;你可以通过提交拉取请求来添加更多练习:) 在[此处](CONTRIBUTING.md)阅读贡献指南\n\n****\n\n<!-- ALL-TOPICS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<center>\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"topics/devops/README.md\"><img src=\"images/devops.png\" width=\"75px;\" height=\"75px;\" alt=\"DevOps\" /><br /><b>DevOps</b></a></td>\n    <td align=\"center\"><a href=\"topics/git/README.md\"><img src=\"images/git.png\" width=\"75px;\" height=\"75px;\" alt=\"Git\"/><br /><b>Git</b></a></td>\n    <td align=\"center\"><a href=\"#network\"><img src=\"images/network.png\" width=\"75px;\" height=\"75px;\" alt=\"Network\"/><br /><b>Network</b></a></td>\n    <td align=\"center\"><a href=\"#hardware\"><img src=\"images/hardware.png\" width=\"75px;\" height=\"75px;\" alt=\"Hardware\"/><br /><b>Hardware</b></a></td>\n    <td align=\"center\"><a href=\"topics/kubernetes/README.md\"><img src=\"images/kubernetes.png\" width=\"75px;\" height=\"75px;\" alt=\"kubernetes\"/><br /><b>Kubernetes</b></a></td>\n  </tr>\n\n  <tr>\n    <td align=\"center\"><a href=\"topics/software_development/README.md\"><img src=\"images/programming.png\" width=\"75px;\" height=\"75px;\" alt=\"programming\"/><br /><b>Software Development</b></a></td>\n    <td align=\"center\"><a href=\"https://github.com/bregman-arie/python-exercises\"><img src=\"images/python.png\" width=\"75px;\" height=\"75px;\" alt=\"Python\"/><br /><b>Python</b></a></td>\n    <td align=\"center\"><a href=\"https://github.com/bregman-arie/go-exercises\"><img src=\"images/Go.png\" width=\"75px;\" height=\"75px;\" alt=\"go\"/><br /><b>Go</b></a></td>\n    <td align=\"center\"><a href=\"topics/perl/README.md\"><img src=\"images/perl.png\" width=\"75px;\" height=\"75px;\" alt=\"perl\"/><br /><b>Perl</b></a></td>\n    <td align=\"center\"><a href=\"#regex\"><img src=\"images/regex.png\" width=\"75px;\" height=\"75px;\" alt=\"RegEx\"/><br /><b>Regex</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/cloud/README.md\"><img src=\"images/cloud.png\" width=\"75px;\" height=\"75px;\" alt=\"Cloud\"/><br /><b>Cloud</b></a></td>\n      <td align=\"center\"><a href=\"topics/aws/README.md\"><img src=\"images/aws.png\" width=\"100px;\" height=\"75px;\" alt=\"aws\"/><br /><b>AWS</b></a></td>\n      <td align=\"center\"><a href=\"topics/azure/README.md\"><img src=\"images/azure.png\" width=\"75px;\" height=\"75px;\" alt=\"azure\"/><br /><b>Azure</b></a></td>\n      <td align=\"center\"><a href=\"topics/gcp/README.md\"><img src=\"images/googlecloud.png\" width=\"70px;\" height=\"70px;\" alt=\"Google Cloud Platform\"/><br /><b>Google Cloud Platform</b></a></td>\n      <td align=\"center\"><a href=\"#openstack/README.md\"><img src=\"images/openstack.png\" width=\"75px;\" height=\"75px;\" alt=\"openstack\"/><br /><b>OpenStack</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"#operating-system\"><img src=\"images/os.png\" width=\"75px;\" height=\"75px;\" alt=\"Operating System\"/><br /><b>Operating System</b></a></td>\n      <td align=\"center\"><a href=\"topics/linux/README.md\"><img src=\"images/logos/linux.png\" width=\"75px;\" height=\"75px;\" alt=\"Linux\"/><br /><b>Linux</b></a></td>\n      <td align=\"center\"><a href=\"#virtualization\"><img src=\"images/virtualization.png\" width=\"75px;\" height=\"75px;\" alt=\"Virtualization\"/><br /><b>Virtualization</b></a></td>\n      <td align=\"center\"><a href=\"topics/dns/README.md\"><img src=\"images/dns.png\" width=\"75px;\" height=\"75px;\" alt=\"DNS\"/><br /><b>DNS</b></a></td>\n      <td align=\"center\"><a href=\"topics/shell/README.md\"><img src=\"images/bash.png\" width=\"75px;\" height=\"75px;\" alt=\"Bash\"/><br /><b>Shell Scripting</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/databases/README.md\"><img src=\"images/databases.png\" width=\"75px;\" height=\"75px;\" alt=\"Databases\"/><br /><b>Databases</b></a></td>\n      <td align=\"center\"><a href=\"#sql\"><img src=\"images/sql.png\" width=\"75px;\" height=\"75px;\" alt=\"sql\"/><br /><b>SQL</b></a></td>\n      <td align=\"center\"><a href=\"#mongo\"><img src=\"images/mongo.png\" width=\"75px;\" height=\"75px;\" alt=\"Mongo\"/><br /><b>Mongo</b></a></td>\n      <td align=\"center\"><a href=\"#testing\"><img src=\"images/testing.png\" width=\"75px;\" height=\"75px;\" alt=\"Testing\"/><br /><b>Testing</b></a></td>\n      <td align=\"center\"><a href=\"#big-data\"><img src=\"images/big-data.png\" width=\"75px;\" height=\"75px;\" alt=\"Big Data\"/><br /><b>Big Data</b></a></td>\n\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/cicd/README.md\"><img src=\"images/cicd.png\" width=\"75px;\" height=\"75px;\" alt=\"cicd\"/><br /><b>CI/CD</b></a></td>\n      <td align=\"center\"><a href=\"#certificates\"><img src=\"images/certificates.png\" width=\"75px;\" height=\"75px;\" alt=\"Certificates\"/><br /><b>Certificates</b></a></td>\n      <td align=\"center\"><a href=\"topics/containers/README.md\"><img src=\"images/containers.png\" width=\"75px;\" height=\"75px;\" alt=\"Containers\"/><br /><b>Containers</b></a></td>\n      <td align=\"center\"><a href=\"topics/openshift/README.md\"><img src=\"images/openshift.png\" width=\"75px;\" height=\"75px;\" alt=\"OpenShift\"/><br /><b>OpenShift</b></a></td>\n      <td align=\"center\"><a href=\"#storage\"><img src=\"images/storage.png\" width=\"75px;\" height=\"75px;\" alt=\"Storage\"/><br /><b>Storage</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/terraform/README.md\"><img src=\"images/terraform.png\" width=\"75px;\" height=\"75px;\" alt=\"Terraform\"/><br /><b>Terraform</b></a></td>\n      <td align=\"center\"><a href=\"#puppet\"><img src=\"images/puppet.png\" width=\"75px;\" height=\"75px;\" alt=\"puppet\"/><br /><b>Puppet</b></a></td>\n      <td align=\"center\"><a href=\"#distributed\"><img src=\"images/distributed.png\" width=\"75px;\" height=\"75px;\" alt=\"Distributed\"/><br /><b>Distributed</b></a></td>\n      <td align=\"center\"><a href=\"#questions-you-ask\"><img src=\"images/you.png\" width=\"75px;\" height=\"75px;\" alt=\"you\"/><br /><b>Questions you can ask</b></a></td>\n      <td align=\"center\"><a href=\"topics/ansible/README.md\"><img src=\"images/ansible.png\" width=\"75px;\" height=\"75px;\" alt=\"ansible\"/><br /><b>Ansible</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/observability/README.md\"><img src=\"images/observability.png\" width=\"75px;\" height=\"75px;\" alt=\"observability\"/><br /><b>Observability</b></a></td>\n      <td align=\"center\"><a href=\"#prometheus\"><img src=\"images/prometheus.png\" width=\"75px;\" height=\"75px;\" alt=\"Prometheus\"/><br /><b>Prometheus</b></a></td>\n      <td align=\"center\"><a href=\"topics/circleci/README.md\"><img src=\"images/logos/circleci.png\" width=\"70px;\" height=\"70px;\" alt=\"Circle CI\"/><br /><b>Circle CI</b></a></td>\n      <td align=\"center\"><a href=\"topics/datadog/README.md\"><img src=\"images/logos/datadog.png\" width=\"80px;\" height=\"80px;\" alt=\"DataDog\"/><br /><b></b></a></td>\n      <td align=\"center\"><a href=\"topics/grafana/README.md\"><img src=\"images/logos/grafana.png\" width=\"80px;\" height=\"80px;\" alt=\"Grafana\"/><br /><b>Grafana</b></a></td>\n  </tr>\n\n  <tr>\n    <td align=\"center\"><a href=\"topics/argo/README.md\"><img src=\"images/logos/argo.png\" width=\"80px;\" height=\"80px;\" alt=\"Argo\"/><br /><b>Argo</b></a></td>\n    <td align=\"center\"><a href=\"topics/soft_skills/README.md\"><img src=\"images/HR.png\" width=\"75px;\" height=\"75px;\" alt=\"HR\"/><br /><b>Soft Skills</b></a></td>\n    <td align=\"center\"><a href=\"topics/security/README.md\"><img src=\"images/security.png\" width=\"75px;\" height=\"75px;\" alt=\"security\"/><br /><b>Security</b></a></td>\n    <td align=\"center\"><a href=\"#system-design\"><img src=\"images/design.png\" width=\"75px;\" height=\"75px;\" alt=\"Design\"/><br /><b>System Design</b></a></td>\n   </tr>\n\n   <tr>\n    <td align=\"center\"><a href=\"topics/chaos_engineering/README.md\"><img src=\"images/logos/chaos_engineering.png\" width=\"75px;\" height=\"75px;\" alt=\"Chaos Engineering\"/><br /><b>Chaos Engineering</b></a></td>\n    <td align=\"center\"><a href=\"#Misc\"><img src=\"images/general.png\" width=\"75px;\" height=\"75px;\" alt=\"Misc\"/><br /><b>Misc</b></a></td>\n    <td align=\"center\"><a href=\"#elastic\"><img src=\"images/elastic.png\" width=\"75px;\" height=\"75px;\" alt=\"Elastic\"/><br /><b>Elastic</b></a></td>\n    <td align=\"center\"><a href=\"topics/kafka/README.md\"><img src=\"images/logos/kafka.png\" width=\"85px;\" height=\"80px;\" alt=\"Kafka\"/><br /><b>Kafka</b></a></td>\n   </tr>\n\n</table>\n</center>\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-TOPICS-LIST:END -->\n\n## 网络\n\n<details>\n<summary>一般来说，你需要什么才能进行交流？</summary><br><b>\n\n  - 一种共同的语言（供两端理解）\n  - 与你想要沟通的人交流的方法\n  - 一个连接（以便通信内容能够到达接收者）\n\n</b></details>\n\n<details>\n<summary>什么是 TCP/IP？</summary><br><b>\n\n一组协议，定义了两个或多个设备如何相互通信。\n\n了解更多关于TCP/IP, 阅读 [这里](http://www.penguintutor.com/linux/basic-network-reference)\n\n</b></details>\n\n<details>\n<summary>什么是以太网？</summary><br><b>\n\n以太网简单地指的是当今最常见的局域网（LAN）类型。与跨越较大地理区域的广域网（WAN）相对，LAN是一个连接在小范围内的计算机网络，比如你的办公室、大学校园或者家庭。\n\n</b></details>\n\n<details>\n<summary>什么是 MAC 地址？它有什么用途？</summary><br><b>\n\nMAC地址是用于识别网络上各个设备的唯一标识号码或代码。\n\n通过以太网发送的数据包始终来自一个 MAC 地址并发送到一个 MAC 地址。如果网络适配器接收到一个数据包，它会将该数据包的目标 MAC 地址与适配器自身的 MAC 地址进行比较。\n\n</b></details>\n\n<details>\n<summary>这个 MAC 地址是在什么时候使用的？: ff:ff:ff:ff:ff:ff</summary><br><b>\n\n当设备向广播 MAC 地址（FF:FF:FF:FF:FF:FF）发送数据包时，它会传递给本地网络上的所有站点。以太网广播用于在数据链路层通过 ARP 解析 IP 地址到 MAC 地址。\n</b></details>\n\n<details>\n<summary>什么是 IP 地址？</summary><br><b>\n\n互联网协议地址（IP 地址）是分配给连接到使用互联网协议进行通信的计算机网络上的每个设备的数字标签。IP地址具有两个主要功能：主机或网络接口识别和位置寻址。\n</b></details>\n\n<details>\n<summary>解释子网掩码并举例说明</summary><br><b>\n\n子网掩码是一个32位的数字，用于屏蔽 IP 地址并将 IP 地址分为网络地址和主机地址。子网掩码通过将网络位设置为全部\"1\"，将主机位设置为全部\"0\"来生成。在给定的网络中，总可用主机地址中始终保留两个用于特定目的，并且不能分配给任何主机。这些是第一个地址，被保留作为网络地址（也称为网络 ID），以及最后一个用于网络广播的地址。\n\n[例子](https://github.com/philemonnwanne/projects/tree/main/exercises/exe-09)\n\n</b></details>\n\n<details>\n<summary>私有 IP 地址是什么？在哪些场景/系统设计中应该使用它？</summary><br><b>\n私有IP地址被分配给同一网络中的主机，以便彼此通信。正如“私有”这个名字所暗示的那样，拥有私有IP地址的设备无法被来自任何外部网络的设备访问到。例如，如果我住在一个宿舍，并且我希望我的室友们加入我托管的游戏服务器，我会要求他们通过我的服务器的私有IP地址加入，因为该网络是局域网。\n</b></details>\n\n<details>\n<summary>什么是公共 IP 地址？在哪些场景/系统设计中，应该使用它？</summary><br><b>\n公共IP地址是面向公众的 IP 地址。如果你正在托管一个游戏服务器，希望你的朋友加入，你会给他们提供你的公共IP地址，以便他们的计算机能够识别和定位到你的网络和服务器，从而进行连接。在与与您连接到同一网络的朋友玩耍时，并不需要使用面向公众的IP地址，在这种情况下，您将使用私有IP地址。为了使某人能够连接到内部位置的服务器上，您需要设置端口转发来告诉路由器允许来自公共域名和网络之间的流量通信。\n</b></details>\n\n<details>\n<summary>解释 OSI 模型。有哪几层？每层负责什么？</summary><br><b>\n\n- 应用程序：用户端（ HTTP 在此）。\n- 演示：建立应用层实体之间的上下文（加密在这里）。\n- 会话：建立、管理和终止连接。\n- 传输：将可变长度的数据序列从源主机传输到目标主机（ TCP 和 UDP 在此）。\n- 网络：将数据报从一个网络传输到另一个网络（ IP 在此）。\n- 数据链路：提供两个直接连接的节点之间的链接（MAC在此）。\n- 物理特性：数据连接的电气和物理规格（位数在此）。\n\n您可以在 [penguintutor.com](http://www.penguintutor.com/linux/basic-network-reference) 阅读有关OSI模型的更多信息。\n</b></details>\n\n<details>\n<summary>对于以下每个确定其属于哪个 OSI 层：\n\n  * 错误更正\n  * 数据包路由\n  * 电缆和电信号\n  * MAC 地址\n  * IP 地址\n  * 终止连接\n  * 3 次握手</summary><br><b>\n  * 错误纠正 - 数据链路\n  * 数据包路由 - 网络\n  * 电缆和电信号 - 物理\n  * MAC 地址 - 数据链路\n  * IP 地址 - 网络\n  * 终止连接 - 会话\n  * 3次握手 - 传输\n</b></details>\n\n<details>\n<summary>你熟悉哪些交付计划？</summary><br><b>\n\n单播：一对一的通信，其中有一个发送者和一个接收者。\n\n广播：向网络中的所有人发送消息。地址 ff:ff:ff:ff:ff:ff 用于广播。\n           使用广播的两个常见协议是 ARP 和 DHCP。\n\n多播：向一组订阅者发送消息。它可以是一对多或多对多的。\n</b></details>\n\n<details>\n<summary>什么是 CSMA/CD？它在现代以太网网络中使用吗？</summary><br><b>\n\nCSMA/CD 代表载波侦听多路访问冲突检测。\n其主要目标是管理对共享介质/总线的访问，每次只有一个主机可以传输。\n\nCSMA/CD 算法：\n\n1. 在发送帧之前，它会检查是否有另一个主机正在传输帧。\n2. 如果没有人在传输，它就开始传输帧。\n3. 如果两个主机同时传输，就会发生碰撞。\n4. 两个主机都停止发送帧，并向所有人发送一个“干扰信号”，通知大家发生了碰撞。\n5. 他们正在等待一个随机的时间再次发送它。\n6. 一旦每个主机等待了随机时间，它们会再次尝试发送帧，从而重新开始循环。\n</b></details>\n\n<details>\n<summary>描述以下网络设备及其之间的区别：\n\n  * 路由器\n  * 交换机\n  * 集线器</summary><br><b>\n\n路由器、交换机和集线器都是用于连接局域网（LAN）中的设备的网络设备。然而，每个设备的操作方式不同，并且具有其特定的使用情况。以下是对每个设备及其之间区别的简要描述：\n\n1. 路由器：一种网络设备，用于连接多个网络段。它在OSI模型的网络层（第3层）上运行，并使用路由协议来指导网络之间的数据传输。路由器使用IP地址来识别设备并将数据包定向到正确的目标位置。\n2. 交换机：一种网络设备，用于连接局域网上的多个设备。它在OSI模型的数据链路层（第二层）工作，并使用MAC地址来识别设备并将数据包定向到正确的目标。交换机可以使同一网络上的设备更高效地相互通信，并且可以防止多个设备同时发送数据时可能发生的数据碰撞。\n3. 集线器：一种网络设备，通过单根电缆连接多个设备，并用于在不分割网络的情况下连接多个设备。然而，与交换机不同的是，它在OSI模型的物理层（第1层）上运行，并且只是将数据包广播到所有连接到它的设备，无论该设备是否为预期接收者。这意味着可能会发生数据碰撞，并且网络效率可能因此受到影响。由于交换机更高效并提供更好的网络性能，所以现代网络设置通常不使用集线器。\n</b></details>\n\n<details>\n<summary>什么是“冲突域”？</summary><br><b>\n冲突域是一个网络段，在这个网络段中，设备可能会因为试图同时传输数据而相互干扰。当两个设备同时传输数据时，可能会发生碰撞，导致数据丢失或损坏。在冲突域中，所有设备共享同样的带宽，并且任何设备都有可能干扰其他设备的数据传输。\n</b></details>\n\n<details>\n<summary>什么是“广播域”？</summary><br><b>\n广播域是一个网络段，其中所有设备可以通过发送广播消息相互通信。广播消息是一条发送给网络中所有设备而不是特定设备的消息。在广播域中，所有设备都可以接收和处理广播消息，无论该消息是否针对它们。\n</b></details>\n\n<details>\n<summary>连接到一个交换机的三台计算机。有多少个冲突域？有多少个广播域？</summary><br><b>\n\n三个冲突域和一个广播域\n</b></details>\n\n<details>\n<summary>路由器是如何工作的？</summary><br><b>\n\n路由器是一种物理或虚拟设备，用于在两个或多个分组交换的计算机网络之间传递信息。路由器检查给定数据包的目标互联网协议地址（IP地址），计算它到达目的地的最佳路径，然后相应地转发它。\n\n</b></details>\n\n<details>\n<summary>什么是NAT？</summary><br><b>\n\n网络地址转换（NAT）是一个过程，其中一个或多个本地IP地址被翻译成一个或多个全局IP地址，反之亦然，以便为本地主机提供互联网访问。\n\n</b></details>\n\n<details>\n<summary>什么是代理？它是如何工作的？我们为什么需要它？</summary><br><b>\n\n代理服务器充当您和互联网之间的网关。它是一个中介服务器，将最终用户与他们浏览的网站分离开来。\n\n如果您使用代理服务器，互联网流量将通过代理服务器传输到您请求的地址。然后，该请求再次通过相同的代理服务器返回（有一些例外情况），然后代理服务器将从网站接收到的数据转发给您。\n\n代理服务器根据您的使用情况、需求或公司政策提供不同级别的功能、安全性和隐私保护。\n</b></details>\n\n<details>\n<summary>TCP 是什么？它如何工作？三次握手是什么？</summary><br><b>\n\nTCP 三次握手，又称为三向握手，在 TCP/IP 网络中用于建立服务器和客户端之间的连接的过程。\n\n三次握手主要用于创建 TCP 套接字连接。它在以下情况下起作用：\n\n- 一个客户节点通过IP网络向同一网络或外部网络上的服务器发送SYN数据包。该数据包的目标是询问/推断服务器是否对新连接开放。\n- 目标服务器必须具有可以接受和发起新连接的开放端口。当服务器从客户节点收到SYN数据包时，它会响应并返回确认收据 - ACK 数据包或 SYN/ACK 数据包。\n- 客户端节点接收到来自服务器的 SYN/ACK，并用一个 ACK数据包作出响应。\n</b></details>\n\n<details>\n<summary>什么是往返延迟或往返时间？</summary><br><b>\n\n摘自 [维基百科](https://en.wikipedia.org/wiki/Round-trip_delay)：\"发送信号所需的时间加上收到信号确认所需的时间\"。\n\n附加问题：局域网的 RTT 是多少？\n</b></details>\n\n<details>\n<summary>SSL 握手是如何进行的？</summary><br><b>\nSSL 握手是在客户端和服务器之间建立安全连接的过程。\n\n1. 客户端向服务器发送一个Client Hello消息，其中包括客户端的SSL/TLS协议版本、客户端支持的加密算法列表和一个随机值。\n2. 服务器响应一个Server Hello消息，其中包括服务器的SSL/TLS协议版本、一个随机值和会话ID。\n3. 服务器发送一个证书消息，其中包含了服务器的证书。\n4. 服务器发送 Server Hello Done 信息，表示服务器已完成服务器 Hello 阶段的信息发送。\n5. 客户发送包含客户公钥的客户密钥交换信息。\n6. 客户端发送 \"更改密码规格 \"报文，通知服务器客户端即将发送使用新密码规格加密的报文。\n7. 客户端发送一个加密的握手消息，其中包含使用服务器的公钥加密的预主密钥。\n8. 服务器发送 \"更改密码规格 \"信息，通知客户端服务器即将发送使用新密码规格加密的信息。\n9. 服务器发送加密握手信息，其中包含用客户机公钥加密的预主密钥。\n10. 客户端和服务器现在可以交换应用数据。\n</b></details>\n\n<details>\n<summary>TCP 和 UDP 有什么区别？</summary><br><b>\n\nTCP 在客户端和服务器之间建立连接，以保证数据包的顺序，而 UDP 不在客户端和服务器之间建立连接，也不处理数据包顺序。这使得 UDP 比 TCP 更轻便，是流媒体等服务的理想选择。\n\n[Penguintutor.com](http://www.penguintutor.com/linux/basic-network-reference) 提供了很好的解释。\n</b></details>\n\n<details>\n<summary>您熟悉哪些 TCP/IP 协议？</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释“默认网关”</summary><br><b>\n\n默认网关是一个接入点或 IP 路由器，联网计算机利用它将信息发送到另一个网络或互联网上的计算机。\n</b></details>\n\n<details>\n<summary>什么是 ARP？它是如何工作的？</summary><br><b>\n\nARP 是地址解析协议（Address Resolution Protocol）的缩写。当您尝试 ping 本地网络上的一个 IP 地址（如 192.168.1.1）时，您的系统必须将 IP 地址 192.168.1.1 转换为 MAC 地址。这就需要使用 ARP 来解析该地址，ARP 也因此而得名。\n\n系统会保存一个 ARP 查找表，其中存储了哪些 IP 地址与哪些 MAC 地址相关联的信息。当试图向某个 IP 地址发送数据包时，系统会首先查询该表，看是否已经知道该 MAC 地址。如果有缓存值，则不使用 ARP。\n</b></details>\n\n<details>\n<summary>什么是 TTL？它有助于防止什么？</summary><br><b>\n\n- TTL（生存时间）是IP（Internet Protocol，互联网协议）数据包中的一个值，它决定了在被丢弃之前数据包可以经过多少跳或路由器。每次通过路由器转发数据包时，TTL值会减少一。当TTL值达到零时，数据包将被丢弃，并向发送方发送ICMP（Internet Control Message Protocol，互联网控制消息协议）消息以指示该数据包已过期。\n- TTL 用于防止数据包在网络中无限循环，否则会造成拥塞并降低网络性能。\n- 它还有助于防止数据包陷入路由环路，即数据包在同一组路由器之间不断往返而永远无法到达目的地。\n- 此外，TTL 还可用于帮助检测和防止 IP 欺骗攻击，在这种攻击中，攻击者试图通过使用虚假或伪造的 IP 地址来冒充网络上的其他设备。通过限制数据包的跳数，TTL 可以帮助防止数据包被路由到不合法的目的地。\n</b></details>\n\n<details>\n<summary>什么是 DHCP？它是如何工作的？</summary><br><b>\n\n它代表动态主机配置协议，为主机分配 IP 地址、子网掩码和网关。它是这样工作的：\n\n* 主机在进入网络时广播一条寻找 DHCP 服务器的信息（DHCP DISCOVER）。\n* DHCP 服务器会以数据包的形式发回要约信息，其中包含租用时间、子网掩码、IP 地址等信息（DHCP OFFER）。\n* 根据接受的提议，客户端会发送回复广播，让所有 DHCP 服务器都知道（DHCP 请求）。\n* 服务器发送确认（DHCP ACK）\n\n更多信息 [此处](https://linuxjourney.com/lesson/dhcp-overview)\n</b></details>\n\n<details>\n<summary>同一个网络中可以有两个 DHCP 服务器吗？它是如何工作的？</summary><br><b>\n\n可以在同一网络上安装两个 DHCP 服务器，但不建议这样做，而且必须仔细配置，以防止冲突和配置问题。\n- 在同一网络上配置两个 DHCP 服务器时，两个服务器都有可能为同一设备分配 IP 地址和其他网络配置设置，从而导致冲突和连接问题。此外，如果 DHCP 服务器配置了不同的网络设置或选项，网络上的设备可能会收到冲突或不一致的配置设置。\n- 不过，在某些情况下，可能有必要在同一网络中设置两个 DHCP 服务器，例如在大型网络中，一个 DHCP 服务器可能无法处理所有请求。在这种情况下，可以将 DHCP 服务器配置为不同的 IP 地址范围或不同的子网，这样它们就不会相互干扰。\n</b></details>\n\n<details>\n<summary>什么是 SSL 隧道？它是如何工作的？</summary><br><b>\n\n- SSL（安全套接字层）隧道是一种技术，用于在互联网等不安全网络上的两个端点之间建立安全的加密连接。SSL 隧道是通过将流量封装在 SSL 连接中创建的，SSL 连接可提供保密性、完整性和身份验证。\n\n下面介绍 SSL 隧道的工作原理：\n\n1. 客户端启动与服务器的 SSL 连接，其中包括建立 SSL 会话的握手过程。\n2. SSL 会话建立后，客户端和服务器会协商加密参数，如加密算法和密钥长度，然后交换数字证书，以验证彼此的身份。\n3. 客户端随后通过 SSL 隧道将流量发送到服务器，服务器解密流量并将其转发到目标位置。\n4. 服务器通过 SSL 隧道将流量发送回客户端，客户端对流量进行解密并将其转发给应用程序。\n</b></details>\n\n<details>\n<summary>什么是套接字？在哪里可以看到系统中的套接字列表？</summary><br><b>\n\n- 套接字是一种软件端点，可使进程之间通过网络进行双向通信。套接字为网络通信提供了一个标准化接口，允许应用程序在网络上发送和接收数据。查看 Linux 系统上打开的套接字列表：\n***netstat -an***\n- 该命令显示所有打开套接字的列表，以及它们的协议、本地地址、外来地址和状态。\n</b></details>\n\n<details>\n<summary>什么是 IPv6？如果我们有 IPv4，为什么还要考虑使用它？</summary><br><b>\n\n- IPv6（互联网协议版本 6）是互联网协议（IP）的最新版本，用于识别网络上的设备并与之通信。IPv6 地址是 128 位地址，用十六进制表示，如 2001:0db8:85a3:0000:0000:8a2e:0370:7334。\n\n我们应该考虑使用 IPv6 而不是 IPv4 有几个原因：\n\n1. 地址空间：IPv4 的地址空间有限，在世界上许多地方已经耗尽。IPv6 提供了更大的地址空间，可提供数万亿个唯一的 IP 地址。\n2. 安全性：IPv6 包含对 IPsec 的内置支持，为网络流量提供端到端加密和身份验证。\n3. 性能：IPv6 包括一些有助于提高网络性能的功能，例如组播路由，它允许将一个数据包同时发送到多个目的地。\n4. 简化网络配置：IPv6 包含可简化网络配置的功能，例如无状态自动配置，它允许设备自动配置自己的 IPv6 地址，而无需 DHCP 服务器。\n5. 更好的移动性支持：IPv6 包含可改进移动性支持的功能，如移动 IPv6，它允许设备在不同网络之间移动时保持其 IPv6 地址。\n</b></details>\n\n<details>\n<summary>什么是 VLAN？</summary><br><b>\n\n- VLAN（虚拟局域网）是一种逻辑网络，它将物理网络上的一组设备组合在一起，而不管它们的物理位置如何。创建 VLAN 的方法是配置网络交换机，为连接到交换机上特定端口或端口组的设备发送的帧分配特定的 VLAN ID。\n</b></details>\n\n<details>\n<summary>什么是 MTU？</summary><br><b>\n\t\nMTU 是最大传输单元（Maximum Transmission Unit）的缩写。它是指单个事务中可发送的最大 PDU（协议数据单元）的大小。\n</b></details>\n\n<details>\n<summary>如果发送的数据包大于 MTU，会发生什么情况？</summary><br><b>\n\t\n在 IPv4 协议中，路由器可以对 PDU 进行分片，然后通过事务发送所有已分片的 PDU。\n\t\n使用 IPv6 协议时，它会向用户计算机发出错误信息。\n</b></details>\n\n<details>\n<summary>真还是假？Ping 使用 UDP 是因为它不在乎连接是否可靠</summary><br><b>\n\n错。Ping 实际上使用的是 ICMP（互联网控制报文协议），这是一种用于发送与网络通信有关的诊断信息和控制信息的网络协议。\n</b></details>\n\n<details>\n<summary>什么是 SDN？</summary><br><b>\n\n- SDN 是软件定义网络（Software-Defined Networking）的缩写。它是一种网络管理方法，强调网络控制的集中化，使管理员能够通过软件抽象来管理网络行为。\n- 在传统网络中，路由器、交换机和防火墙等网络设备需要使用专用软件或命令行界面进行单独配置和管理。相比之下，SDN 将网络控制平面与数据平面分开，允许管理员通过集中式软件控制器管理网络行为。\n</b></details>\n\n<details>\n<summary>什么是 ICMP？它有什么用途？</summary><br><b>\n\n- ICMP 是 Internet Control Message Protocol 的缩写。它是 IP 网络中用于诊断和控制的协议。它是互联网协议套件的一部分，在网络层运行。\n\nICMP消息被用于各种目的，包括：\n1. 错误报告：ICMP消息用于报告网络中发生的错误，例如无法将数据包传递到其目的地。\n2. Ping：ICMP 用于发送 ping 信息，该信息用于测试主机或网络是否可连接，并测量数据包的往返时间。\n3. 路径 MTU 发现：ICMP 用于发现路径的最大传输单元（MTU），即无需分片即可传输的最大数据包大小。\n4. 跟踪路由跟踪路由实用程序使用 ICMP 跟踪数据包通过网络的路径。\n5. 路由器发现ICMP 用于发现网络中的路由器。\n</b></details>\n\n<details>\n<summary>什么是 NAT？它是如何工作的？</summary><br><b>\n\nNAT 是网络地址转换的缩写。它是一种在传输信息前将多个本地专用地址映射到一个公共地址的方法。希望多个设备使用一个 IP 地址的组织和大多数家用路由器一样，都会使用 NAT。\n例如，你电脑的私有 IP 可能是 192.168.1.100，但你的路由器会将流量映射到它的公共 IP（如 1.1.1.1）。互联网上的任何设备都会看到来自公共 IP（1.1.1.1）而不是私人 IP（192.168.1.100）的流量。\n</b></details>\n\n<details>\n<summary>下列协议中使用的端口号分别是？\n\n  * SSH\n  * SMTP\n  * HTTP\n  * DNS\n  * HTTPS\n  * FTP\n  * SFTP\n</summary><br><b>\n\n  * SSH - 22\n  * SMTP - 25\n  * HTTP - 80\n  * DNS - 53\n  * HTTPS - 443\n  * FTP - 21\n  * SFTP - 22\n</b></details>\n\n<details>\n<summary>哪些因素会影响网络性能？</summary><br><b>\n\n有几个因素会影响网络性能，包括：\n\n1. 带宽：网络连接的可用带宽会极大地影响其性能。带宽有限的网络可能会出现数据传输速率慢、延迟高和响应速度差等问题。\n2. 延迟：延迟是指数据从网络中的一个点传输到另一个点时发生的延迟。高延迟会导致网络性能缓慢，尤其是视频会议和在线游戏等实时应用。\n3. 网络拥塞：当太多设备同时使用网络时，就会出现网络拥塞，导致数据传输速率缓慢和网络性能低下。\n4. 数据包丢失：当数据包在传输过程中丢失时，就会出现丢包现象。这会导致网络速度变慢，整体网络性能降低。\n5. 网络拓扑：网络的物理布局，包括交换机、路由器和其他网络设备的位置，都会影响网络性能。\n6. 网络协议：不同的网络协议具有不同的性能特征，会影响网络性能。例如，TCP 是一种可靠的协议，可以保证数据的传输，但也会因错误检查和重传所需的开销而导致性能降低。\n7. 网络安全：防火墙和加密等安全措施会影响网络性能，尤其是在需要大量处理能力或引入额外延迟的情况下。\n8. 距离：网络设备之间的物理距离会影响网络性能，尤其是无线网络，信号强度和干扰会影响连接性和数据传输速率。\n</b></details>\n\n<details>\n<summary>什么是 APIPA？</summary><br><b>\n\nAPIPA 是分配给设备的一组 IP 地址\n当主 DHCP 服务器无法访问时分配给设备的 IP 地址\n\n</b></details>\n\n<details>\n<summary>APIPA 使用哪个 IP 范围？</summary><br><b>\n\nAPIPA 使用的 IP 范围是169.254.0.1 - 169.254.255.254.\n\n</b></details>\n\n#### 控制平面和数据平面\n\n<details>\n<summary>\"控制平面\"是指什么？</summary><br><b>\n\n控制平面是网络的一部分，它决定如何将数据包路由和转发到不同的位置。\n</b></details>\n\n<details>\n<summary>数据平面 \"指的是什么？</summary><br><b>\n\n数据平面是网络中实际转发数据/数据包的部分。\n</b></details>\n\n<details>\n<summary>管理平面 \"指的是什么？</summary><br><b>\n\n它指的是监测和管理功能。\n</b></details>\n\n<details>\n<summary>创建路由表属于哪个平面（数据、控制......）？</summary><br><b>\n\n控制平面。\n</b></details>\n\n<details>\n<summary>解释生成树协议（STP）。</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是链路聚合？为什么要使用？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是非对称路由？如何处理？</summary><br><b>\n</b></details>\n\n<details>\n<summary>您熟悉哪些覆盖（隧道）协议？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 GRE？它是如何运作的？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 VXLAN？它是如何工作的？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 SNAT？</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 OSPF。</summary><br><b>\n\n\nOSPF（开放式最短路径优先）是一种路由协议，可在各种类型的路由器上实施。一般来说，大多数现代路由器都支持 OSPF，包括思科、瞻博网络和华为等供应商的路由器。该协议设计用于基于 IP 的网络，包括 IPv4 和 IPv6。此外，它采用分层网络设计，将路由器分组为区域，每个区域都有自己的拓扑图和路由表。这种设计有助于减少路由器之间需要交换的路由信息量，提高网络的可扩展性。\n\nOSPF 4 路由器类型有\n  * Internal Router\n  * Area Border Routers\n  * Autonomous Systems Boundary Routers\n  * Backbone Routers\n\n  了解有关 OSPF 路由器类型的更多信息： https://www.educba.com/ospf-router-types\n</b></details>\n\n<details>\n<summary>什么是延迟？</summary><br><b>\n\t\n延迟是指信息从信息源到达目的地所需的时间。\n</b></details>\n\n<details>\n<summary>什么是带宽？</summary><br><b>\n\t\n带宽是通信信道的容量，用于衡量后者在特定时间段内可处理的数据量。带宽越大，意味着处理的流量越多，数据传输量也就越大。\n</b></details>\n\n<details>\n<summary>什么是吞吐量？</summary><br><b>\n\t\n吞吐量是指在一定时间内通过任何传输通道传输的实际数据量。\n</b></details>\n\n<details>\n<summary>在进行搜索查询时，延迟和吞吐量哪个更重要？如何确保我们对全球基础设施进行管理？\n</summary><br><b>\n\n延迟。要获得良好的延迟，搜索查询应转发到最近的数据中心。\n</b></details>\n\n<details>\n<summary>上传视频时，延迟和吞吐量哪个更重要？如何确保这一点？</summary><br><b>\n\n吞吐量。为获得良好的吞吐量，上传数据流应被路由到未充分利用的链路。\n</b></details>\n\n<details>\n<summary>转发请求时还需要考虑哪些因素（除了延迟和吞吐量）？</summary><br><b>\n\n* 保持缓存更新（这意味着请求可能不会被转发到最近的数据中心）\n</b></details>\n\n<details>\n<summary>解释 Spine & Leaf</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是网络拥塞？什么原因会导致网络拥塞？</summary><br><b>\n\n当网络上需要传输的数据过多，而网络容量不足以满足需求时，就会出现网络拥塞。 </br>\n这会导致延迟和数据包丢失增加。原因可能是多方面的，如网络使用率高、文件传输量大、恶意软件、硬件问题或网络设计问题。</br>\n为防止网络拥塞，必须监控网络使用情况，并实施策略来限制或管理需求。\n</b></details>\n\n<details>\n<summary>关于 UDP 数据包格式，您能告诉我什么？TCP 数据包格式如何？有何不同？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是指数后退算法？在哪里使用？</summary><br><b>\n</b></details>\n\n<details>\n<summary>使用汉明码，以下数据字 100111010001101 的码字是什么？</summary><br><b>\n\n00110011110100011101\n</b></details>\n\n<details>\n<summary>举例说明应用层中的协议</summary><br><b>\n\n* 超文本传输协议（HTTP）--用于互联网上的网页\n* 简单邮件传输协议（SMTP）--用于电子邮件传输\n* 电信网络（TELNET）--终端模拟，允许客户端访问 telnet 服务器\n* 文件传输协议（FTP）--便于在任何两台机器之间传输文件\n* 域名系统 (DNS) - 域名转换\n* 动态主机配置协议（DHCP）--为主机分配 IP 地址、子网掩码和网关\n* 简单网络管理协议（SNMP）--收集网络设备数据\n</b></details>\n\n<details>\n<summary>举例说明网络层中的协议</summary><br><b>\n\n* 互联网协议 (IP) - 协助将数据包从一台机器路由到另一台机器\n* 互联网控制消息协议（ICMP）--让人知道发生了什么，如错误信息和调试信息\n</b></details>\n\n<details>\n<summary>什么是 HSTS？</summary><br><b>\nHTTP 严格传输安全（HTTP Strict Transport Security）是一种网络服务器指令，它通过在开始时发送并返回给浏览器的响应标头，告知用户代理和网络浏览器如何处理其连接。这将强制通过 HTTPS 加密连接，忽略任何脚本通过 HTTP 加载该域中任何资源的调用。\n\n阅读更多 [此处](https://www.globalsign.com/en/blog/what-is-hsts-and-how-do-i-use-it#:~:text=HTTP%20Strict%20Transport%20Security%20(HSTS,and%20back%20to%20the%20browser.)\n</b></details>\n\n#### 网络 - 其他\n\n<details>\n<summary>什么是互联网？它和万维网一样吗？</summary><br><b>\n\n互联网是一个由网络组成的网络，在全球范围内传输大量数据。<br>\n万维网是一个运行在数百万服务器上的应用程序，它位于互联网之上，可通过所谓的网络浏览器访问\n</b></details>\n\n<details>\n<summary>什么是ISP?</summary><br><b>\n\nISP（互联网服务提供商）是当地的互联网公司。\n</b></details>\n\n\n## DevOps\n\n<a name=\"devops-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是 DevOps? DevOps 帮助我们完成什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>DevOps 的反模式是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是持续集成?</summary><br><b>\n\n开发人员经常将代码集成到共享仓库中的一种开发实践。 它的范围可以从每天或每周进行几次更改，到大规模在一个小时内进行几次更改。\n\n验证每段代码（更改/补丁），以使更改可以安全地合并。 如今，使用自动构建来确保代码可以集成的测试更改是一种常见的做法。 它可以是一个运行在不同级别（单元，功能等）的多个测试的构建，也可以是所有或某些必须通过以将更改合并到存储库中的多个单独的构建。\n</b></details>\n\n<details>\n<summary>什么是持续部署?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是持续交付?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你认为CI / CD的最佳做法是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你将用于以下哪些系统和/或工具？：\n\n\n  * CI/CD\n  * 基础架构\n  * 配置管理\n  * 监控 & 报警\n  * 日志\n  * 代码审查\n  * 代码覆盖率\n  * 测试集</summary><br><b>\n  * CI/CD - Jenkins, Circle CI, Travis\n  * 基础架构 - Terraform, CloudFormation\n  * 配置管理 - Ansible, Puppet, Chef\n  * 监控 & 报警 - Prometheus, Nagios\n  * 日志 - Logstash, Graylog, Fluentd\n  * 代码审查 - Gerrit, Review Board\n  * 代码覆盖率 - Cobertura, Clover, JaCoCo\n  * 测试集 - Robot, Serenity, Gauge\n</b></details>\n\n<details>\n<summary>你在选择工具/技术时是怎么考虑的?</summary><br><b>\n\n你可以使用以下一项或全部：\n   * 成熟与尖端\n   * 社区规模\n   * 体系结构方面-代理与无代理，主控与无主控等\n</b></details>\n\n<details>\n<summary>解释可变基础架构与不变基础架构</summary><br><b>\n\n在可变的基础架构原则中，更改将应用到现有基础架构之上并随着时间的推移而变化\n基础架构建立了变化的历史。 Ansible，Puppet和Chef这些工具\n遵循可变的基础架构原则。\n\n在不变的基础架构原则中，每项更改实际上都是新的基础架构。 所以改变\n到服务器将导致新服务器而不是更新服务器。 Terraform是\n遵循不变的基础架构原则的一个例子。\n</b></details>\n\n<details>\n<summary>你熟悉什么方式来交付软件?</summary><br><b>\n  * 存档 - 将你所有的应用文件收集到一个存档中（例如tar），并将其交付给用户。\n  * 打包 - 取决于操作系统，你可以使用OS软件包格式（例如，在RHEL / Fefodra中为RPM）来交付软件，并使用标准打包程序命令来安装，卸载和更新它\n  * 映像 - VM或容器映像，其中包已包含在其中，以便成功运行。\n</b></details>\n\n<details>\n<summary>什么是缓存? 缓存是怎么工作的? 为什么缓存很重要?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下无状态和有状态</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是HTTP及其工作方式?</summary><br><b>\n</b></details>\n\n<details>\n<summary>描述一下设置某些类型的Web服务器的工作流程 (Apache, IIS, Tomact, ...)</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下监控. 它是什么? 为什么监控是重要的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉那些监控方法?</summary><br><b>\n</b></details>\n\n<a name=\"devops-advanced\"></a>\n#### 高级\n\n<details>\n<summary>告诉我你是如何执行CI / CD资源的计划容量 (如服务器, 存储, 等等.)</summary><br><b>\n</b></details>\n\n<details>\n<summary>你将如何为依赖于其他多个应用程序的应用程序构建/实现CD?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何衡量CI / CD的质量？ 有那些你正在使用的指标吗？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是配置漂移？ 它引起什么问题？</summary><br><b>\n\n当配置和软件完全相同的服务器环境中的某个服务器上发生配置漂移\n或服务器正在应用其他服务器无法获得的更新或配置，并且随着时间的推移，这些服务器将变为\n略有不同。\n\n这种情形可能会导致难以识别和重现的错误。\n</b></details>\n\n<details>\n<summary>怎样处理配置漂移?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你是否有跨项目变更测试的经验？ (又名交叉依赖)</summary><br><b>\n\n注意：交叉依赖是指你对单独的项目进行了两个或多个更改，并且你希望在相互构建中对其进行测试，而不是分别测试每个更改。\n</b></details>\n\n<details>\n<summary>在哪种情况下，你希望使用SQL?</summary><br><b>\n  * 同类数据，预计不会发生变化\n  * ACID合规性很重要\n</b></details>\n\n\n## Jenkins\n\n<a name=\"jenkins-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是 Jenkins? 你用它来做什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>相比其他的竞争者 jenkins 有什么优势? 你能把jenkins 和下面的系统做一个比较吗?:\n\n  * Travis\n  * Bamboo\n  * Teamcity\n  * CircleCI</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下:\n\n  * Job\n  * Build\n  * Plugin\n  * Slave\n  * Executor</summary><br><b>\n</b></details>\n\n<details>\n<summary> 你在 Jenkins 用过什么插件?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下 CI/CD 你在 Jenkins 是怎么实现他们的 </summary><br><b>\n</b></details>\n\n<details>\n<summary>有什么类型的工作？ 你使用了哪些类型，为什么？</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何向用户报告构建结果？ 你熟悉什么那些方式？</summary><br><b>\n</b></details>\n\n<details>\n<summary>每次有更改提交，你都需要运行单元测试。 详细描述管道的环境以及每个阶段将执行的操作</summary><br><b>\n</b></details>\n\n<details>\n<summary>怎样保护 Jenkins?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能描述一些 Jenkins 最佳实践吗?</summary><br><b>\n</b></details>\n\n<a name=\"jenkins-advanced\"></a>\n#### 高级\n\n<details>\n<summary>如何为一个特定的构建获取多个从属?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你的组织中有四个团队。 如何优先考虑每个团队的建设？ 例如，x团队的工作将始终在y团队之前运行</summary><br><b>\n</b></details>\n\n<details>\n<summary>你有部署 Jenkins 插件的经验吗? 你能描述一下吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如果你要管理许多工作，你可能使用Jenkins UI。 你如何每周/每月管理数百个作业的创建和删除？</summary><br><b>\n</b></details>\n\n<details>\n<summary>Jenkins 有那些限制?</summary><br><b>\n\n  * 测试交叉依赖关系（来自多个项目的变更）\n  * 从任何阶段开始构建（尽管cloudbees实现了称为检查点的东西）\n</b></details>\n\n<details>\n<summary>你是如何实施从某个阶段而不是从最开始构建的选项？</summary><br><b>\n</b></details>\n\n<details>\n<summary>你曾经写过 Jenkins 脚本吗? 如果有，有哪些? 分别是怎么样工作的？</summary><br><b>\n</b></details>\n\n## Cloud \n\n<a name=\"cloud-beginner\"></a>\n#### 初级\n\n<details>\n<summary>云计算的优势是什么？ 至少列出3个优势</summary><br><b>\n</b></details>\n\n<details>\n<summary>他们分别是那种类型的云计算?</summary><br><b>\n\nIAAS\nPAAS\nSAAS\n</b></details>\n\n<details>\n<summary>解释一下以下云计算部署：\n\n  * Public\n  * Hybrid\n  * Private</summary><br><b>\n</b></details>\n\n\n## AWS\n\n<a name=\"aws-beginner\"></a>\n#### 初级\n\n##### 全局基础设施\n\n<details>\n<summary>解释以下\n\n  * 可用区\n  * 区域\n  * 边缘位置</summary><br><b>\n</b>\n<b>\nAWS区域是遍布全球不同地理位置的数据中心，每个区域彼此完全独立。\n在每个区域内，有多个隔离的位置，称为可用区。 多个可用区可确保其中之一发生故障时具有高可用性。\n\n边缘位置基本上是内容传递网络，它缓存数据并确保较低的延迟和更快地传递给任何位置的用户。 他们位于世界主要城市。\n</b>\n</details>\n\n##### S3\n \n<details>\n<summary>解释一下什么是S3，以及它用来干嘛</summary><br>\n<b>\nS3代表3 S（Simple Storage Service）。\nS3是一种对象存储服务，它是快速，可伸缩和持久的。 S3使客户能够上传，下载或存储最大5 TB的文件或对象。 同时每个文件的最大大小为5 GB（如果大小超过5 GB，则分段上传）。\n</b>\n</details>\n\n<details>\n<summary>什么是存储桶?</summary><br><b>\nS3存储桶是一种资源，类似于文件系统中的文件夹，并且允许存储由数据及其元数据组成的对象。\n</b></details>\n\n<details>\n<summary>对还是错? 存储桶必须全局唯一</summary><br><b>\nTrue\n</b></details>\n\n<details>\n<summary>S3 中 包含哪些对象 ?\n  * 另一种问法: 在对象上下文中解释键，值，版本ID和元数据</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下数据一致性</summary><br><b>\n</b></details>\n\n<details>\n<summary>你可以在s3上托管动态网站吗？ 静态网站呢?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你在S3上下文中采取了哪些安全措施?</summary><br><b>\n</b></details>\n\n##### CloudFront\n\n<details>\n<summary>解释一下什么是CloudFront及其用途</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下\n  * 域\n  * 边缘位置\n  * 分布</summary><br><b>\n</b></details>\n\n<details>\n<summary>CDN用户可以使用哪些交付方式?</summary><br><b>\n</b></details>\n\n<details>\n<summary>对还是错? 在TTL的生命周期内缓存对象</summary><br><b>\n</b></details>\n\n\n##### EC2\n\n<details>\n<summary>你创建了哪种类型的实例?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何为给定的EC2实例增加RAM?</summary><br><b>\n\n停止实例，使其实例类型与所需的RAM匹配，然后启动实例。\n</b></details>\n\n<details>\n<summary>什么是 AMI?</summary><br><b>\n</b></details>\n\n<details>\n<summary>EC2实例有多少个存储选项?</summary><br><b>\n</b></details>\n\n<details>\n<summary>EC2实例停止或终止时会发生什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是安全组?</summary><br><b>\n</b></details>\n\n\n<details>\n<summary>如何将实例迁移到另一个可用性区域?</summary><br><b>\n</b></details>\n\n\n<details>\n<summary>什么是安全组?</summary><br><b>\n</b></details>\n\n\n<details>\n<summary>什么是竞价型实例?</summary><br><b>\n</b></details>\n  \n\n## 网络\n\n<a name=\"network-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是以太网?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是一个 MAC 地址? 它用来干嘛?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么时候这个 MAC 地址会被用来使用?: ff:ff:ff:ff:ff:ff</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是一个 IP 地址? 什么是子网?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下 OSI 模型. 有那些层? 每层负责什么?</summary><br><b>\n\n\n应用层：用户端（HTTP在这一层）\n表示层：在应用程序层实体之间建立上下文（加密在这一层）\n会话层：建立，管理和终止连接\n传输层：将可变长度的数据序列从源传输到目标主机（TCP和UDP在这一层）\n网络层：将数据报从一个网络传输到另一个网络（IP 层在这里）\n数据链接层：提供两个直接连接的节点之间的链接（MAC在这一层）\n物理层：数据连接的电气和物理规格（比特在这一一层）\n</b></details>\n\n<details>\n<summary>你熟悉哪些传送方案?</summary><br><b>\n单位广播：一对一通信，其中有一个发送方和一个接收方。\n\n广播：向网络中的所有人发送消息。 地址ff：ff：ff：ff：ff：ff：ff用于广播。\n            使用广播的两个常见协议是ARP和DHCP。\n\n组播：向一组订户发送消息。 它可以是一对多或多对多。\n</b></details>\n\n<details>\n<summary>什么是 CSMA/CD? 在现代以太网中有使用吗?</summary><br><b>\n\nCSMA / CD代表载波侦听多路访问/冲突检测。\n它的主要重点是管理对共享媒体/总线的访问，在该共享媒体/总线上，在给定的时间点只能传输一个主机。\n\nCSMA / CD算法：\n\n1. 在发送帧之前，它会检查其他主机是否已经在发送帧。\n2. 如果没有人发送，它将开始发送帧。\n3. 如果两个主机同时传输，则发生冲突。\n4. 双方主机均停止发送帧，并向每个人发送“干扰信号”，通知每个人发生冲突\n5. 他们正在等待随机时间，然后再次发送\n6. 一旦每个主机等待一段随机时间，他们就会尝试再次发送帧\n</b></details>\n\n<details>\n<summary>描述以下网络设备及其之间的区别：\n\n  * 路由器\n  * 交换机\n  * 集线器</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 NAT?</summary><br><b>\n</b></details>\n\n<details>\n<summary>TCP 和 UDP 两者之间有那些区别?</summary><br><b>\n</b></details>\n\n<details>\n<summary>TCP 是怎样工作的? 什么是 3 次握手?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 ARP? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 TTL?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是DHCP? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是SSL 隧道? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是套接字? 在哪里可以看到系统中的套接字列表?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是IPv6? 如果我们拥有IPv4，为什么要考虑使用它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是VLAN?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是MTU?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是SDN?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是ICMP? 它有什么用途?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是NAT? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<a name=\"network-advanced\"></a>\n#### 高级\n\n<details>\n<summary>解释一下生成树协议 (STP)</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是链路聚合? 为什么使用它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是非对称路由? 怎样处理它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些叠加（隧道）协议?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是GRE? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是VXLAN? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是SNAT?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下 OSPF</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下 Spine & Leaf</summary><br><b>\n</b></details>\n\n<details>\n<summary>使用海明码, 100111010001101 会编码成什么码?</summary><br><b>\n\n00110011110100011101\n</b></details>\n\n## Linux\n\n<a name=\"linux-beginner\"></a>\n#### 初级\n\n<details>\n<summary>你有那些 Linux 经验? 当你可以在多个操作系统上设置应用程序时，你希望在哪个操作系统上进行设置以及为什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下每个命令的作用，并举例说明如何使用它\n\n  * ls\n  * rm \n  * rmdir (你能使用 <code>rm</code>完成同样的结果吗?)\n  * grep\n  * wc\n  * curl\n  * touch\n  * man\n  * nslookup or dig\n  * df</summary><br><b>\n</b></details>\n\n<details>\n<summary>运行命令 <code>df</code> 你会得到 \"找不到命令\". 可能出现什么问题以及如何修复它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何确保服务将在你选择的操作系统上启动?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何定期安排任务?</summary><br><b>\n\n你能使用命令 <code>cron</code> 和 <code>at</code>.\n对于cron，使用以下格式安排任务：\n\n<minute> <hour> <day of month> <month> <day of week> <command to execute>\n\n任务存储在cron文件中。\n</b></details>\n\n<details>\n<summary>你过去是否安排了任务？ 什么样的任务？</summary><br><b>\n\n通常，你将安排批处理作业。\n\n</b></details>\n\n##### 权限\n\n<details>\n<summary>怎样改变一个文件的权限?</summary><br><b>\n\n使用 `chmod` 命令.\n\n</b></details>\n\n<details>\n<summary>下面的权限意味着什么?:\n\n  * 777\n  * 644\n  * 750</summary><br><b>\n\n777 - 所有人有读和写和可执行权限（意味着你很懒）\n644 - 拥有者有读和写的权限、其他人只有读权限\n750 - 拥有者有所有权限, 组成员可以读和执行权限、其他人没有权限\n</b></details>\n\n<details>\n<summary>解释一下什么是setgid, setuid 和 sticky bit</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何在不向其提供登录系统功能的情况下将新用户添加到系统?</summary><br><b>\n\n  * adduser user_name --shell=/bin/false --no-create-home\n\n</b></details>\n\n<details>\n<summary>在使用systemd的系统上，如何显示日志?</summary>\n\n  * journalctl\n\n</b></details>\n\n##### 调试\n\n<details>\n<summary>你正在使用什么进行故障排除和调试 <b>网络</b> 问题?</summary><br><b>\n\n<code>dstat -t</code> 非常适合辨别网络和磁盘问题。\n<code>netstat -tnlaup</code> 可用于查看哪些进程在哪些端口上运行。\n<code>lsof -i -P</code> 可以用于与netstat相同的目的。\n<code>ngrep -d any metafilter</code> 用于将正则表达式与数据包的载荷相匹配。\n<code>tcpdump</code> 用于捕获数据包\n<code>wireshark</code> 与tcpdump相同的概念，但带有GUI（可选）。\n</b></details>\n\n<details>\n<summary>你正在使用什么进行故障排除和调试 <b>磁盘 & 文件系统</b> 问题?</summary><br><b>\n\n<code>dstat -t</code> 非常适合辨别网络和磁盘问题。\n<code>opensnoop</code> 可以用来查看正在系统上打开哪些文件（实时）。\n</b></details>\n\n<details>\n<summary>你正在使用什么进行故障排除和调试 <b>进程</b> 问题?</summary><br><b>\n\n<code>strace</code> 非常适合了解你的程序的功能。 它打印你的程序执行的每个系统调用。\n</b></details>\n\n<details>\n<summary>你正在使用什么来调试CPU相关问题?</summary><br><b>\n\n<code>top</code> 显示每个进程消耗多少CPU占比\n<code>perf</code> 是采样分析器的理想选择，通常来说，找出哪些CPU周期被“浪费”了\n<code>flamegraphs</code> 非常适合CPU消耗可视化（http://www.brendangregg.com/flamegraphs.html）\n</b></details>\n\n<details>\n<summary>你收到一个电话，说“我的系统运行缓慢” - 你将如何处理?</summary><br><b>\n\n1. 使用<code>top</code>检查是否有任何资源消耗你的CPU或RAM。\n2. 运行<code>dstat -t</code>来检查它是否与磁盘或网络有关。\n3. 使用<code>iostat</code>检查 I/O 统计信息\n</b></details>\n\n<details>\n<summary>什么是Linux内核模块以及如何加载新模块?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是KVM?</summary><br><b>\n</b></details>\n\n<details>\n<summary>SSH和SSL之间的区别是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>SSH端口转发是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释重定向</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是通配符？ 你能举一个使用它们的例子吗？</summary><br><b>\n</b></details>\n\n<details>\n<summary>我们在以下每个命令中使用grep做什么？\n\n  * <code>grep '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' some_file</code>\n  * <code>grep -E \"error|failure\" some_file</code>\n  * <code>grep '[0-9]$' some_file</code>\n</summary><br><b>\n\n1. 一个 IP 地址\n2. 单词 \"error\" 或 \"failure\"\n3. 以数字结尾的行\n</b></details>\n\n<details>\n<summary>告诉我你了解所有有关Linux启动过程的知识</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是退出码? 你熟悉那些退出码?</summary><br><b>\n\n退出码（或返回码）表示子进程返回其父进程的码。\n\n0是退出码，表示成功，而大于1的码表示错误。\n每个数字都有不同的含义，具体取决于应用程序的开发方式。\n\n我认为这是一篇可以了解更多的好博客：https://shapeshed.com/unix-exit-codes\n</b></details>\n\n<details>\n<summary>软链接和硬链接之间的区别是什么?</summary><br><b>\n\n硬链接是使用相同inode的相同文件。\n软链接是使用不同inode的另一个文件的快捷方式。\n\n可以在不同的文件系统之间创建软链接，而硬链接只能在同一文件系统内创建。\n</b></details>\n\n<details>\n<summary>什么是交换分区? 它用来做什么的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你试图创建一个新文件，但显示“文件系统已满”。 你使用df检查是否有可用空间，你看到还有20％的空间。 可能是什么问题?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你对LVM有什么了解?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下关于LVM:\n\n  * PV\n  * VG\n  * LV</summary><br><b>\n</b></details>\n\n<details>\n<summary>RAID用于什么用途？ 你能否解释RAID 0、1、5和10之间的区别？</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是懒卸载?</summary><br><b>\n</b></details>\n\n<details>\n<summary>修复以下命令：\n\n  * sed \"s/1/2/g' /tmp/myFile\n  * find . -iname \\*.yaml -exec sed -i \"s/1/2/g\" {} ;</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下每个路径中存储的内容以及是否有一些独特之处</summary><br><b>\n\n  * /tmp\n  * /var/log\n  * /bin\n  * /proc\n  * /usr/local\n</b></details>\n\n<details>\n<summary>你能在 /etc/services 找到什么 </summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 chroot?</summary><br><b>\n</b></details>\n\n##### 进程\n\n<details>\n<summary>如何在后台运行进程以及为什么要优先运行?</summary><br><b>\n\n你可以通过在命令末尾指定＆来实现。至于为什么，因为一些命令/过程会占用大量的时间来完成执行或永远运行\n</b></details>\n\n<details>\n<summary>你如何查找特定进程占用的内存量?</summary><br><b>\n</b></details>\n\n<details>\n<summary>运行“ kill”时使用什么信号 <process id>'?</summary><br><b>\n\n默认信号为SIGTERM（15）。 该信号可以优雅地终止进程，这意味着它可以保存当前状态配置。\n</b></details>\n\n<details>\n<summary>你熟悉哪些信号?</summary><br><b>\n\nSIGTERM - 终止进程的默认信号\nSIGHUP - 常用用法是重新加载配置\nSIGKILL - 不能捕获或忽略的信号\n\n运行 `kill -l` 查看所有可用的信号\n</b></details>\n\n<details>\n<summary>什么是 trap?</summary><br><b>\n</b></details>\n\n<details>\n<summary>当你按下Ctrl + C会发生什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是守护程序?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Linux中进程的可能状态是什么?</summary><br><b>\n\nRunning（运行态）\nWaiting (等待态))\nStopped（暂停态）\nTerminated（终止态）\nZombie（假死态）\n</b></details>\n\n<details>\n<summary>什么是僵尸进程? 你是如何避免的?</summary>\n</b></details>\n\n<details>\n<summary>什么是初始进程?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何更改进程的优先级？ 你为什么想这么做?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能解释一下网络进程/连接如何建立以及如何终止?</summary><br></b>\n</b></details>\n\n<details>\n<summary>什么是系统调用？ 你熟悉哪些系统调用?</summary><br><b>\n</b></details>\n\n<details>\n<summary><code>strace</code> 做什么的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>查找所有以“ .yml”结尾的文件，并替换每个文件中的2分之一的数字</summary><br><b>\n\nind /some_dir -iname \\*.yml -print0 | xargs -0 -r sed -i \"s/1/2/g\"\n</b></details>\n\n<details>\n<summary>如何查看系统有多少可用内存？ 如何检查每个进程的内存消耗?</summary><br><b>\n\n你可以使用命令<code>top</code> 和 <code>free</code>\n</b></details>\n\n<details>\n<summary>你如何将一个50行的文件拆分为两个25行的文件?</summary><br><b>\n\n你可以使用 <code>split</code> 命令就像这样<code>split -l 25 some_file</code>\n</b></details>\n\n<details>\n<summary>什么是文件描述符? 你熟悉那些文件描述符?</summary><br><b>\nKerberos\n文件描述符，也称为文件处理程序，是一个唯一的编号，用于标识操作系统中的打开文件。\n\n在 Linux (和 Unix) 前三个描述符是:\n  * 0 - 输入的默认数据流\n  * 1 - 输出的默认数据流\n  * 2 - 与错误相关的输出的默认数据流\n\n这有一篇好的文章关于这个主题的: https://www.computerhope.com/jargon/f/file-descriptor.htm\n</b></details>\n\n<details>\n<summary>什么是 inode?</summary><br><b>\n\nLinux中的每个文件（和目录）都有一个索引节点，即与文件相关的存储元数据信息的数据结构\n，例如文件的大小，所有者，权限等。\n</b></details>\n\n<details>\n<summary>如何列出活动的网络连接?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是NTP? 它是用来干什么的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是SELiunx?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是Kerberos?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是nftables?</summary><br><b>\n</b></details>\n\n<details>\n<summary>firewalld守护程序负责什么?</summary><br><b>\n</b></details>\n\n##### Network\n\n<details>\n<summary>什么是网络名称空间? 它用来干什么的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何将Linux服务器变成路由器?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是路由表? 你是怎样查看它的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是数据包嗅探器？ 你过去曾经使用过吗？ 如果是，你使用了哪些数据包嗅探器以及用于什么目的？</summary><br><b>\n</b></details>\n\n##### DNS\n\n<details>\n<summary>文件 <code>/etc/resolv.conf</code> 用来做什么的? 它包含那些内容?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 \"A record\"?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是 PTR 记录?</summary><br><b>\n\nA记录将域名指向IP地址，而PTR记录则相反，并将IP地址解析为域名。\n</b></details>\n\n<details>\n<summary>什么是 MX 记录?</summary><br><b>\n</b></details>\n\n<details>\n<summary>DNS是使用TCP还是UDP?</summary><br><b>\n</b></details>\n\n##### Packaging\n\n<details>\n<summary>你有打包经验吗? 你能解释一下它是怎么工作的</summary><br><b>\n</b></details>\n\n<details>\n<summary>RPM: 解释特定格式（应包括什么内容）</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何列出包内容?</summary><br><b>\n</b></details>\n\n<a name=\"linux-advanced\"></a>\n#### 高级\n\n<details>\n<summary>当你执行 <code>ls</code>发生了什么? 提供一个详细的答案</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能描述流程的创建方式吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>以下块做什么?:\n\n```\nopen(\"/my/file\") = 5\nread(5, \"file content\")\n```\n</summary><br><b>\n\n系统调用正在读 <code>/my/file</code>文件 以及 5 是文件描述符数字.\n</b></details>\n\n<details>\n<summary>进程和线程的区别是什么?</summary><br><b>\n</b></details>\n\n##### Network\n\n<details>\n<summary>当你运行 <code>ip a</code> 你看到一个设备叫做 'lo'. 它是什么以及为什么我们需要它?</summary><br><b>\n</b></details>\n\n<details>\n<summary><code>traceroute</code> 命令做什么的? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是网络绑定? 你熟悉什么类型?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何链接两个单独的网络名称空间，以便你可以从另一个命名空间ping一个命名空间上的接口?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是cgroup？ 在什么情况下你会使用它们？</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何创建一定大小的文件?</summary><br><b>\n\n这有一些方式去做:\n  \n  * dd if=/dev/urandom of=new_file.txt bs=2MB count=1\n  * truncate -s 2M new_file.txt\n  * fallocate -l 2097152 new_file.txt\n</b></details>\n\n<details>\n<summary>以下系统调用之间有什么区别?: exec(), fork(), vfork() and clone()?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释流程描述符和任务结构</summary><br><b>\n</b></details>\n\n<details>\n<summary>线程和进程之间有什么区别?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释内核线程</summary><br><b>\n</b></details>\n\n<details>\n<summary>使用套接字系统调用时会发生什么?</summary><br><b>\n\n这有一篇好的文章关于这个主题的: https://ops.tips/blog/how-linux-creates-sockets\n</b></details>\n\n\n## Ansible\n\n<a name=\"ansible-beginner\"></a>\n#### 初级\n\n<details>\n<summary>在Ansible中描述以下每个组件，包括它们之间的关系：\n\n  * Task\n  * Module\n  * Play\n  * Playbook\n  * Role</summary><br><b>\n\n任务 – 调用特定的Ansible模块\n模块 – Ansible在你自己的主机或远程主机上执行的实际代码单元。 模块按类别（数据库，文件，网络等）编制索引，也称为任务插件。\n\nPlay – 在给定主机上执行的一个或多个任务\n\nPlaybook – 一个或多个Play。 每个Play可以在相同或不同的主机上执行\n\n角色 – Ansible角色使你可以基于某些功能/服务对资源进行分组，以便可以轻松地重用它们。 在角色中，你具有变量，默认值，文件，模板，处理程序，任务和元数据的目录。 然后，你只需在剧本中指定角色即可使用该角色。\n</b></details>\n\n<details>\n<summary>你熟悉哪些Ansible最佳做法? 至少列出 3 条</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是清单文件以及如何定义一个?</summary><br><b>\n\n清单文件定义了在其上执行Ansible任务的主机和/或主机组。\n\n一个清单文件的例子\n\n192.168.1.2\n192.168.1.3\n192.168.1.4\n\n[web_servers]\n190.40.2.20\n190.40.2.21\n190.40.2.22\n</b></details>\n\n<details>\n<summary>什么是动态清单文件? 什么时候使用?</summary><br><br>\n\n动态清单文件可跟踪来自一个或多个来源（例如云提供商和CMDB系统）的主机。\n\n应该使用当使用外部源时，尤其是在环境中的主机正在自动启动和关闭，而无需跟踪这些源中的所有更改。\n</b></details>\n\n<details>\n<summary>你只想在特定的次要操作系统上运行Ansible Play，你将如何实现?</summary><br><b>\n</b></details>\n\n<details>\n<summary>写任务创建目录 ‘/tmp/new_directory’</summary><br><b>\n\n```\n- name: Create a new directory\n  file:\n      path: \"/tmp/new_directory\"\n      state: directory\n```\n</b></details>\n\n<details>\n<summary>接下来的Play会有什么结果?</summary><br><b>\n\n```\n---\n- name: Print information about my host\n  hosts: localhost\n  gather_facts: 'no'\n\n  tasks:\n      - name: Print hostname\n        debug:\n            msg: \"It's me, {{ ansible_hostname }}\"\n```\n\n提供完成的代码后，请始终进行彻底检查。 如果你的回答是“这将失败”，那么你是对的。 我们正在使用一个事实（ansible_hostname），\n这是我们正在运行的主机上收集到的信息。 但是在这种情况下，我们禁用了事实收集（gather_facts：no），因此该变量将是未定义的，这将导致失败。\n</b></details>\n\n<details>\n<summary>如果系统上存在文件 \"/tmp/mario\"，则编写 playbook 以在所有主机上安装 \"zlib\" 和 \"vim\" .</summary><br><b>\n\n```\n---\n- hosts: all\n  vars:\n      mario_file: /tmp/mario\n      package_list:\n          - 'zlib'\n          - 'vim'\n  tasks:\n      - name: Check for mario file\n        stat:\n            path: \"{{ mario_file }}\"\n        register: mario_f\n\n      - name: Install zlib and vim if mario file exists\n        become: \"yes\"\n        package:\n            name: \"{{ item }}\"\n            state: present\n        with_items: \"{{ package_list }}\"\n        when: mario_f.stat.exists\n```\n\n</b></details>\n\n<details>\n<summary>编写一个 playbook ，将文件 \"/tmp/system_info\" 部署到除控制器组之外的所有主机上，并具有以下内容：</summary><br><b>\n\n  ```\n  我是 <HOSTNAME> 我的操作系统是 <OS>\n  ```\n\n  替换 <HOSTNAME> 和  <OS> 以及正在运行的特定主机的实际数据 The playbook 部署system_info文件\n\n```\n---\n- name: Deploy /tmp/system_info file\n  hosts: all:!controllers\n  tasks:\n      - name: Deploy /tmp/system_info\n        template:\n            src: system_info.j2 \n            dest: /tmp/system_info\n```\n\nThe content of the system_info.j2 template\n\n```\n# {{ ansible_managed }}\nI'm {{ ansible_hostname }} and my operating system is {{ ansible_distribution }}\n```\n\n</b></details>\n\n<details>\n<summary>变量 \"whoami\" 在以下位置定义：\n\n  * 角色默认设置 -> whoami: mario\n  * 额外的变量（使用 -e 传递给Ansible CLI的变量）-> whoami: toad\n  * 托管事实 -> whoami: luigi\n  * 广告资源变量（与哪种类型无关）-> whoami: browser\n\n根据可变优先级，将使用哪个？\n</summary><br><b>\n\n正确的答案是 ‘toad’。\n\n变量优先级是关于变量在不同位置设置时如何相互覆盖的。 如果你到目前为止还没有体验过，我相信你会在某个时候确定的，这使它成为一个有用的话题。\n\n在我们的问题上下文中，顺序将是额外的var（始终覆盖任何其他变量）-> 主机事实 -> 库存变量 -> 角色默认值（最弱）。\n\n完整的列表可以在上面的链接中找到。 另外，请注意Ansible 1.x和2.x之间存在显着差异。\n</b></details>\n\n<details>\n<summary>对于以下每个语句，确定对还是错:\n\n  * 模块是任务的集合\n  * 最好使用shell或命令而不是特定的模块\n  * 主机事实会覆盖 play 变量\n  * 角色可能包括以下内容：var，meta 和 handler\n  * 通过从外部来源提取信息来生成动态清单\n  * 最佳做法是使用2个空格而不是4个缩进\n  * 用来触发处理程序的“通知”\n  * \"hosts：all：！controllers\"表示 \"仅在控制器组主机上运行\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是ansible-pull?  与ansible-playbook相比有何不同?</summary><br><b>\n</b></details>\n\n\n<a name=\"ansible-advanced\"></a>\n#### 高级\n\n<details>\n<summary>什么是过滤器？ 你有写过滤器的经验吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>编写过滤器来转化字符串大写</summary><br><b>\n\n<code>\ndef cap(self, string):\n    return string.capitalize()\n</code>\n</b></details>\n\n<details>\n<summary>你如何测试基于Ansible的项目?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是回调插件？ 使用回调插件可以实现什么？</summary><br><b>\n</b></details>\n\n\n## Terraform\n\n<a name=\"terraform-beginner\"></a>\n#### 初级\n\n<details>\n<summary>你能解释一下什么是Terraform? 它是怎么工作的?</summary><br><b>\n\n读 [这里](https://www.terraform.io/intro/index.html#what-is-terraform-)\n</b></details>\n\n<details>\n<summary>什么使基础架构代码受益?</summary><br><b>\n\n- 供应，修改和删除基础架构的全自动过程\n- 基础结构的版本控制，可让你快速回滚到以前的版本\n- 通过自动化测试和代码审查来验证基础架构的质量和稳定性\n- 减少基础架构任务的重复性\n</b></details>\n\n<details>\n<summary>为什么选择Terraform，而不选择其他技术？ （例如，Ansible，Puppet，CloufFormation)</summary><br><b>\n\n常见的错误答案是说 Ansible 和 Puppet 是配置管理工具而 Terraform 是置备工具。 尽管从技术上讲是正确的，但这并不意味着 Ansible 和 Puppet 不能\n用于配置基础结构。 另外，这根本没有解释为什么应该在 CloudFormation上 使用 Terraform。\n\nTerraform与其他工具相比的优势：\n\n  * 它遵循不变的基础架构方法，该方法具有避免配置随时间变化的优势\n  * Ansible和Puppet具有更多的过程性（你提到了每个步骤要执行的操作），而Terraform是声明性的，因为你描述的是总体所需的状态，而不是每个资源或任务的状态。 你可以举一个在每个工具中从1台服务器转到2台服务器的示例。 在terrform中，你指定2，在Ansible和puppet中，你仅需配置1个其他服务器，因此你需要明确确保仅配置另一台服务器。\n</b></details>\n\n<details>\n<summary>解释什么是\"Terraform configuration\"</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下每个:\n\n  * Provider\n  * Resource\n  * Provisioner\n  </summary>\n</b></details>\n\n<details>\n<summary><code>terraform.tfstate</code> 文件用来做什么?</summary><br><b> \n\n它跟踪创建的资源的ID，以便Terraform知道它正在管理什么。\n</b></details>\n\n<details>\n<summary>解释以下命令的作用:\n\n  * <code>terraform init</code>\n  * <code>terraform plan</code>\n  * <code>terraform validate</code>\n  * <code>terraform apply</code>\n</summary><br><b>\n\n<code>terraform init</code> 扫描你的代码以查明你正在使用哪些提供程序并下载它们。\n<code>terraform plan</code> 可以让你在实际执行操作之前先查看terraform即将执行的操作。\n<code>terraform apply</code> 将提供指定的.tf文件资源。\n</b></details>\n\n<details>\n<summary>如何记下一个由外部源或者通过 <code>terraform apply</code>改变的变量?</summary><br><b>\n\n你用这种方式: <code>variable “my_var” {}</code>\n</b></details>\n\n<details>\n<summary>举例说明几种Terraform最佳实践</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下隐式和显式依赖项在Terraform中如何工作</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是<code>local-exec</code> and <code>remote-exec</code> in the context of provisioners?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是\"tainted 资源\"?</summary><br><b>\n\n这是成功创建的资源，但在配置期间失败。 Terraform将失败，并将该资源标记为“tainted”。\n</b></details>\n\n<details>\n<summary><code>terraform taint</code> 做了什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Terraform支持哪些类型的变量?</summary><br><b>\n\nStrimg\nInteger\nMap\nList\n</b></details>\n\n<details>\n<summary>什么是输出变量以及 <code>terraform output</code> 做了什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 Modules</summary>\n</b></details>\n\n<details>\n<summary>什么是 Terraform Registry?</summary><br><b>\n</b></details>\n\n<a name=\"terraform-advanced\"></a>\n#### 高级\n\n<details>\n<summary>解释 \"Remote State\". 什么时候使用它以及如何使用它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 \"State Locking\"</summary><br><b>\n</b></details>\n\n## Docker\n\n<a name=\"docker-beginner\"></a>\n\n#### 初级\n\n<details>\n<summary>什么是Docker? 你用它做什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>容器与VM有何不同?</summary><br><b>\n\n容器和虚拟机之间的主要区别是容器使你可以虚拟化\n操作系统上有多个工作负载，而对于VM，则将硬件虚拟化为\n在多台计算机上运行各自的操作系统。\n</b></details>\n\n<details>\n<summary>在哪种情况下，你将使用容器，而在哪种情况下，则更喜欢使用虚拟机?</summary><br><b>\n\n在以下情况下，你应该选择虚拟机：\n   * 你需要运行一个需要操作系统所有资源和功能的应用程序\n   * 你需要完全隔离和安全\n\n在以下情况下，你应该选择容器：\n   * 你需要快速启动的轻量级解决方案\n   * 运行单个应用程序的多个版本或实例\n</b></details>\n\n<details>\n<summary>解释一下 Docker 架构</summary><br><b>\n</b></details>\n\n<details>\n<summary>详细描述一下当运行`docker run hello-world`时背后发生了什么?</summary><br><b>\n\nDocker CLI 将你的请求传递给Docker守护程序。\nDocker 守护程序从 Docker Hub 下载映像\nDocker 守护程序使用下载的映像创建一个新容器\nDocker 守护程序将输出从容器重定向到 Docker CLI，后者将其重定向到标准输出\n</b></details>\n\n<details>\n<summary>你怎样运行容器?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉那些与容器相关的最佳实践?</summary><br><b>\n</b></details>\n\n<details>\n<summary>`docker commit` 干什么的? 什么时候需要使用它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何将数据从一个容器转移到另一个容器?</summary><br><b>\n</b></details>\n\n<details>\n<summary>容器存在时容器的数据会发生什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下每个命令的作用\n\n* docker run\n* docker rm\n* docker ps\n* docker build\n* docker commit</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何删除未运行的旧容器?</summary><br><b>\n</b></details>\n\n##### Dockerfile\n\n<details>\n<summary>什么是 Dockerfile</summary><br><b>\n</b></details>\n\n<details>\n<summary>Dockerfile中 ADD 和 COPY 之间的区别是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Dockerfile中 CMD 和 RUN 之间的区别是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下什么是 Docker compose 以及它用来做什么</summary><br><b>\n</b></details>\n\n<details>\n<summary>Docker compose，Docker swarm 和 Kubernetes 有什么区别?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 Docker interlock</summary><br><b>\n</b></details>\n\n<details>\n<summary>Docker Hub 和 Docker Cloud 之间的区别是什么?</summary><br><b>\n\nDocker Hub是一个本地 Docker 注册表服务，可让你运行 pull 和 push 命令以从 Docker Hub 安装和部署 Docker映像。\n\nDocker Cloud构建在Docker Hub之上，因此Docker Cloud提供了\n与Docker Hub相比，你拥有更多的可选/功能。 一个例子是\n群管理，这意味着你可以在Docker Cloud中创建新的群。\n</b></details>\n\n<details>\n<summary>存储 Docker 镜像的位置在哪里?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下镜像层</summary><br><b>\n</b></details>\n\n<a name=\"docker-advanced\"></a>\n#### 高级\n\n<details>\n<summary>你如何在Docker中管理持久性存储?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何从容器内部连接到容器运行所在的主机的本地主机? </summary><br><b>\n</b></details>\n\n<details>\n<summary>如何将文件从Docker容器复制到主机，反之亦然?</summary><br><b>\n</b></details>\n\n## Kubernetes\n\n<a name=\"kubernetes-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是Kubernetes?</summary><br><b>\n</b></details>\n\n<details>\n<summary>为什么Docker还不够？ 为什么我们需要Kubernetes?</summary><br><b>\n</b></details>\n\n<details>\n<summary>描述一下 Kuberenets 的架构</summary><br><b>\n</b></details>\n\n<details>\n<summary>你是怎样监控你的 Kuberenets?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是kubectl? 你如何使用它?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是kubconfig? 你用它来做什么?</summary><br><b>\n</b></details>\n\n##### Users\n\n<details>\n<summary>你如何创建用户？ 用户信息的存储位置?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你知道如何不使用 adduser/useradd 命令创建新用户吗?</summary><br><b>\n</b></details>\n\n## Coding\n\n<a name=\"coding-beginner\"></a>\n#### 初级\n\n<details>\n<summary>你更喜欢将哪种编程语言用于与DevOps相关的任务？ 为什么要专门这个?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是面向对象编程? 它为什么如此重要?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下递归</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下什么是设计模式，并详细描述其中的三个</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 big O 符号</summary><br><b>\n</b></details>\n\n##### Strings\n\n<details>\n<summary>用你想要的任何语言，编写一个函数来确定给定的字符串是否是回文串</summary><br><b>\n</b></details>\n\n<a name=\"coding-advanced\"></a>\n#### 高级\n\n<details>\n<summary>给定3种设计模式。 你知道如何以你选择的任何语言实现（提供示例）这些设计模式?</summary><br><b>\n</b></details>\n\n## Python\n\n<a name=\"python-beginner\"></a>\n#### 初级\n\n<details>\n<summary>Python编程语言的一些特点是什么?</summary><br><b>\n\n```\n1. 这是一种由 Guido Van Rosum 于1991年创建的高级通用编程语言。\n2. 语言被解释为CPython（用C语言编写）最常用/维护的实现。\n3. 它是强类型的。 类型系统是鸭子类型和渐进式的。\n4. Python注重可读性，并使用空格/缩进代替括号{}\n5. python 包管理器称为PIP“ pip install packages”，具有超过200.000可用的软件包。\n6. Python 附带安装了pip和一个大的标准库，为程序员提供了许多预置的解决方案。\n7. 在python中，“一切”都是一个对象。\n\n还有许多其他特性，但这是每个python程序员都应该知道的主要特性。\n\n```\n</b></details>\n\n<details>\n<summary>Python支持哪些数据类型，哪些是可变的？ 如何显示某个数据类型是可变的?</summary><br><b>\n\n可变数据类型是:\n\n    List\n    Dictionary\n    Set\n    \n不可变数据类型是:\n\n    Numbers (int, float, ...)\n    String\n    Bool\n    Tuple\n    Frozenset\n\n通常，你可以使用函数hash（）来检查对象的可变性，如果它是可哈希的，则是不可变的，尽管由于用户定义的对象可能是可变的且可哈希的，所以它并不总是按预期工作\n</b></details>\n\n<details>\n<summary>什么是PEP8? 举例说明3种风格指南</summary><br><b>\n\nPEP8是Python的编码约定和样式指南的列表\n\n5 种样式指南:\n\n1. 将所有行限制为最多79个字符。\n2. 用两个空行包围顶级函数和类定义。\n3. 制作一个元素的元组时使用逗号\n4. 使用空格（而不是制表符）进行缩进\n5. 每个缩进级别使用4个空格\n</b></details>\n\n<details>\n<summary>解释一下继承以及如何在Python中使用它</summary><br><b>\n\n```\n根据定义，继承是一种机制，其中一个对象充当另一个对象的基础，并保留其所有对象属性。\n\n因此，如果B类继承自A类，那么A类的每个特征也将在B类中提供。A类将是“基类”，B类将是“派生类”。\n当你有几个共享相同功能的类时，这很方便。\n\n基本语法:\n\nclass Base: pass\n\nclass Derived(Base): pass\n\nA more forged example:\n\nclass Animal:\n    def __init__(self):\n        print(\"and I'm alive!\")\n\n    def eat(self, food):\n        print(\"ñom ñom ñom\", food)\n\nclass Human(Animal):\n    def __init__(self, name):\n        print('My name is ', name)\n        super().__init__()\n\n    def write_poem(self):\n        print('Foo bar bar foo foo bar!')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        print('My name is', name)\n        super().__init__()\n\n    def bark(self):\n        print('woof woof')\n\n\nmichael = Human('Michael')\nmichael.eat('Spam')\nmichael.write_poem()\n\nbruno = Dog('Bruno')\nbruno.eat('bone')\nbruno.bark()\n\n>>> My name is  Michael\n>>> and I'm alive!\n>>> ñom ñom ñom Spam\n>>> Foo bar bar foo foo bar!\n>>> My name is Bruno\n>>> and I'm alive!\n>>> ñom ñom ñom bone\n>>> woof woof\n\n调用super（）会调用Base方法，因此，调用super().__init__() 就是调用 Animal__init__。\n\n有一个称为 MetaClasses 的更高级的python功能，可帮助程序员直接控制类的创建。\n\n```\n\n</b></details>\n\n<details>\n<summary> 什么是一个错误? 什么是一个异常? 你熟悉哪些异常类型?</summary><br><b>\n\n```\n\n＃ 请注意，你通常不需要了解编译过程，而只需知道一切都来自哪里\n＃ 并给出完整的答案表明你真正知道你在说什么。\n\n通常，每个编译过程都有两个步骤。\n    - 分析\n    - 产生代码.\n    \n    Analysis can be broken into:\n        1. 词法分析   (标记源代码)\n        2. 语法分析 (如果语法正确，请检查标记是否合法，tldr)\n           \n               for i in 'foo'\n                          ^\n             SyntaxError: invalid syntax\n        \n        We missed ':'\n        \n        \n        3. 语义分析  (上下文分析，合法语法仍然会触发错误，你是否尝试过除以0，哈希可变对象或使用未声明的函数?)\n          \n                 1/0\n                ZeroDivisionError: division by zero\n        \n    这三个分析步骤负责错误处理。\n    \n    第二步将负责错误，主要是语法错误，这是最常见的错误。\n    第三步将负责异常。\n    \n    如我们所见，异常是语义错误，有许多内置的异常：\n\n        ImportError\n        ValueError\n        KeyError\n        FileNotFoundError\n        IndentationError\n        IndexError\n        ...\n    \n    你还可以具有用户定义的异常，这些异常必须直接或间接地从Exception类继承。\n\n    常见例子:\n        \n    class DividedBy2Error(Exception):\n        def __init__(self, message):\n            self.message = message\n    \n    \n    def division(dividend,divisor):\n        if divisor == 2:\n            raise DividedBy2Error('I dont want you to divide by 2!')\n        return dividend / divisor\n    \n    division(100, 2)\n    \n    >>> __main__.DividedBy2Error: I dont want you to divide by 2!\n\n```\n\n\n</b></details>\n\n<details>\n<summary>解释 异常处理以及如何在Python中使用它</summary><br><b>\n</b></details>\n\n<details>\n<summary>编写一个可以恢复字符串的程序（例如，pizza -> azzip）</summary><br><b>\n\n```\n最简单的是 str[::-1] 但不是效率最高的.\n\n\"经典\" 方式:\n\nfoo = ''\n\nfor char in 'pizza':\n    foo = char + foo\n\n>> 'azzip'   \n\n```\n\n</b></details>\n\n<details>\n<summary>编写一个函数以返回一个或多个数字的和。 用户将决定要使用多少个数字</summary><br><b>\n\n首先，你询问用户要使用的数字量。 使用while循环，每个循环将amount_of_numbers减1，直到amount_of_numbers变为0。 在while循环中，你想询问用户一个数字，该数字将在每次循环运行时添加一个变量。\n\n```\ndef return_sum():\n\tamount_of_numbers = int(input(\"How many numbers? \"))\n\ttotal_sum = 0\n\twhile amount_of_numbers != 0:\n\t\tnum = int(input(\"Input a number. \"))\n\t\ttotal_sum += num\n\t\tamount_of_numbers -= 1\n\treturn total_sum\n\n```\n</b></details>\n\n<details>\n<summary>如何将两个排序列表合并为一个排序列表?</summary><br><b>\n</b></details>\n\n<details>\n<summary> _ 在 Python 中用于什么?</summary><br><b>\n\n1. i18n中的翻译查询\n2. 将最后执行的表达式或语句的结果保存在交互式解释器中。\n3. 作为通用“可丢弃”变量名。 例如：x，y，_ = get_data（）（使用了x和y，但是由于我们不关心第三个变量，因此我们将其“扔掉了”）。\n</b></details>\n\n##### Algorithms Implementation\n\n<details>\n<summary>你可以在Python中实现“二分法搜索”吗?</summary><br><b>\n</b></details>\n\n##### Files\n\n<details>\n<summary>如何写文件?</summary><br><b>\n\n```\nwith open('file.txt', 'w') as file:\n    file.write(\"My insightful comment\")\n```\n</b></details>\n\n<details>\n<summary>如何反转文件?</summary><br><b>\n</b></details>\n\n#### Regex\n\n<details>\n<summary>如何在Python中执行与正则表达式相关的操作？ （匹配模式，替代字符串等）</summary><br><b>\n\n使用 re 模式\n</b></details>\n\n<details>\n<summary>如何用 \"blue\" 替换字符串 \"green\"?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何找到一个变量中的所有IP地址？ 如何在文件中找到它们?</summary><br><b>\n</b></details>\n\n<details>\n<summary>按每个嵌套列表的第二项对列表列表进行排序</summary><br><b>\n\n```\nli = [[1, 4], [2, 1], [3, 9], [4, 2], [4, 5]]\n\nsorted(x, key=lambda l: l[1])\n```\n</b></details>\n\n<details>\n<summary>你可以编写一个函数来打印给定目录中的所有文件吗？ 包括子目录</summary><br><b>\n</b></details>\n\n<details>\n<summary>你有下面的列表: <code>[{'name': 'Mario', 'food': ['mushrooms', 'goombas']}, {'name': 'Luigi', 'food': ['mushrooms', 'turtles']}]</code>\n  获取所有的食物类型，最后输出: {'mushrooms', 'goombas', 'turtles'}</summary><br><b>\n\n```\nbrothers_menu =  \\\n[{'name': 'Mario', 'food': ['mushrooms', 'goombas']}, {'name': 'Luigi', 'food': ['mushrooms', 'turtles']}]\n\n# \"经典\" 方式\ndef get_food(brothers_menu) -> set:\n    temp = []\n\n    for brother in brothers_menu:\n        for food in brother['food']:\n            temp.append(food)\n\n    return set(temp)\n\n# 一直先行方式 (Using list comprehension)\nset([food for bro in x for food in bro['food']])\n```\n\n</b></details>\n\n<details>\n<summary>什么是List 加强？ 它比典型的循环更好吗？ 为什么？ 你能示范如何使用它吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>怎样反转 string?</summary><br><b>\n\n最简短的方式是: <code>my_string[::-1]</code> 但是这不是效率最高的. <br>\n经典方式是:\n```\ndef reverse_string(string):\n    temp = \"\"\n    for char in string:\n        temp =  char + temp\n    return temp\n```\n</b></details>\n\n<details>\n<summary>如何按值对字典排序?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何按键对字典排序?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释数据序列化以及如何使用Python执行</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何在Python中处理参数解析?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释什么是GIL</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是迭代器? 为什么使用迭代器?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下方法的类型以及如何使用它们:\n\n  * Static method\n  * Class method\n  * instance method</summary><br><b>\n</b></details>\n\n<details>\n<summary>怎样反转 list?</summary><br><b>\n</b></details>\n\n<details>\n<summary>空的 <code>return</code> 返回什么?</summary><br><b>\n</b></details>\n\n##### Time Complexity\n\n<details>\n<summary>描述操作的时间复杂度<code>access</code>, <code>search</code> <code>insert</code> and <code>remove</code> 下面的数据结构:</summary><br><b>\n\n  * Stack\n  * Queue\n  * Linked List\n  * Binary Search Tree\n</b></details>\n\n<details>\n<summary>以下算法的最好，最差和平均情况的复杂度是什么?:\n\n  * Quicksort\n  * Mergesort\n  * Bucket Sort\n  * Radix Sort\n  </summary>\n</b></details>\n\n<a name=\"python-advanced\"></a>\n#### 高级\n\n<details>\n<summary>解释什么是装饰器</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能展示如何编写和使用装饰器吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>编写脚本来确定给定端口上是否可以访问给定主机</summary><br><b>\n</b></details>\n\n<details>\n<summary>这个查询熟悉数据类吗？ 你能解释一下他们是干什么用的吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下上下文管理</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下缓冲协议</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下描述符</summary><br><b>\n</b></details>\n\n<details>\n<summary>你有抓取网络（爬虫）的经验吗？ 你能描述一下你用过什么以及用什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你可以在Python中实现链接链表吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你已经创建了一个网页，用户可以在其中上传文档。 但是，根据文档大小，读取上传文件的功能会运行很长时间，并且用户必须等待读取操作完成才能继续使用该网站。 你怎么能解决这个问题?</summary><br><b>\n</b></details>\n\n## Prometheus\n\n<a name=\"prometheus-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是Prometheus? Prometheus的主要特点是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>描述 Prometheus 架构和组件</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能否将 Prometheus 与其他解决方案（例如InfluxDB）进行比较?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是an Alert?</summary><br><b>\n</b></details>\n\n<details>\n<summary>描述以下Prometheus组件:\n\n  * Prometheus server\n  * Push Gateway\n  * Alert Manager</summary><br><b>\n\n负责抓取存储数据的Prometheus服务器推送网关用于短期作业警报管理负责警报 ;）\n</b></details>\n\n<details>\n<summary>什么是一个实例? 什么是一个作业?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Prometheus支持哪些核心指标类型?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是一个 exporter? 它用来做什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些Prometheus最佳做法？ 至少命名三个</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何在给定时间内获得总请求?</summary><br><b>\n</b></details>\n\n<a name=\"prometheus-advanced\"></a>\n#### 高级\n\n<details>\n<summary>你如何加入两个指标?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何编写返回标签值的查询?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何将cpu_user_seconds转换为cpu使用率（百分比）?</summary><br><b>\n</b></details>\n\n## Git\n\n<a name=\"git-beginner\"></a>\n#### 初级\n\n<details>\n<summary><code>git pull</code> 和 <code>git fetch</code>的区别是什么?</summary><br><b>\n\n简单来说, git pull = git fetch + git merge\n\n当你运行git pull时，它会从远程或中央获取所有更改\n存储库，并将其附加到本地存储库中的相应分支。\n\ngit fetch从远程存储库获取所有更改，将更改存储在\n本地存储库中的单独分支\n</b></details>\n\n<details>\n<summary>解释以下: <code>git 目录</code>, <code>工作目录</code> 和 <code>暂存区</code></summary><br><b>\n\nGit目录是Git存储项目的元数据和对象数据库的地方。 这是Git最重要的部分，当你从另一台计算机克隆存储库时，它就是复制的。\n\n工作目录是项目一个版本的单个签出。 这些文件将从Git目录中的压缩数据库中拉出，并放置在磁盘上供你使用或修改。\n\n暂存区是一个简单文件，通常包含在你的Git目录中，用于存储有关下一次提交的内容的信息。 有时称为索引，但将其称为暂存区已成为标准。\n\n答案来自 [git-scm.com](https://git-scm.com/book/en/v1/Getting-Started-Git-Basics#_the_three_states)\n</b></details>\n\n<details>\n<summary>怎么解决 git merge 冲突?</summary><br><b>\n\n<p>\n首先，打开有冲突的文件，然后确定有什么冲突。\n接下来，根据你的公司或团队接受的是什么，你可以与自己的\n同事解决冲突或自行解决\n解决冲突后，使用 git add <file_name> 添加文件。\n最后，运行`git rebase --continue`。\n</p>\n</b></details>\n\n<details>\n<summary><code>git reset</code> 和 <code>git revert</code>区别是什么?</summary><br><b>\n\n<p>\n\n`git revert` 创建一个新的提交，撤消上一次提交的更改。\n\n`git reset` 根据使用情况，可以修改索引或更改分支头当前指向的提交。\n</p>\n</b></details>\n\n<details>\n<summary>你想将提交移至顶部。 你将如何实现?</summary><br><b>\n\n使用 <code>git rebase></code> 命令\n</b></details>\n\n<details>\n<summary>那种情形你会使用 <code>git rebase</code>?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些合并策略?</summary><br><b>\n\n提及两个或三个就足够了，最好提到“递归”作为默认值。\n\nrecursive\nresolve\nours\ntheirs\n\n这篇文章解释是最好的: https://git-scm.com/docs/merge-strategies\n</b></details>\n\n<details>\n<summary>在提交更改之前，如何查看已完成的更改?</summary><br><b>\n\n<code>git diff</code>\n</b></details>\n\n<details>\n<summary>如何将特定文件还原为先前的提交?</summary><br><b>\n\n```\ngit checkout HEAD~1 -- /path/of/the/file\n```\n</b></details>\n\n\n<a name=\"git-advanced\"></a>\n#### 高级\n\n<details>\n<summary>解释 Git octopus merge</summary><br><b>\n\n也许不错，它是：\n\n  * 对于合并多个分支的情况（以及此类用例的默认情况）非常有用\n  * 主要用于将主题分支捆绑在一起\n\n有一篇文章关于 Octopus merge: http://www.freblogg.com/2016/12/git-octopus-merge.html\n</b></details>\n\n## Go\n\n<a name=\"go-beginner\"></a>\n#### 初级\n\n<details>\n<summary>Go编程语言有哪些特点?</summary><br><b>\n\n  * 强类型和静态类型 - 变量的类型不能随时间更改，必须在编译时进行定义\n  * 简单\n  * 快速编译时间\n  * 内置并发\n  * 垃圾回收\n  * 平台无关\n  * 编译为独立的二进制文件 - 你运行应用程序所需的所有内容都将被编译为一个二进制文件。 对于运行时的版本管理非常有用。\n\nGo 而且有一个很好的社区.\n</b></details>\n\n<details>\n<summary><code>var x int = 2</code> 和 <code>x := 2</code>区别是什么?</summary><br><b>\n\n结果相同，变量值为2。\n\nwith <code>var x int = 2</code> we are setting the variable type to integer while with <code>x := 2</code> we are letting Go figure out by itself the type.\n</b></details>\n\n<details>\n<summary>对还是错? 在Go中，我们可以重新声明变量，并且一旦声明就必须使用它.</summary>\n\n错. 我们不能重新声明变量，必须使用声明的变量。\n</b></details>\n\n<details>\n<summary>你使用了哪些Go库?</summary><br><b>\n\n应该根据你的使用情况回答此问题，一些示例是：\n  * fmt - formatted I/O\n</b></details>\n\n<details>\n<summary>下面代码块有什么问题? 怎么解决?\n\n```go\nfunc main() {\n    var x float32 = 13.5\n    var y int\n    y = x\n}\n```\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>下面的代码块尝试将整数101转换为字符串，但相反，我们得到“ e”。 这是为什么？ 怎么解决?\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var x int = 101\n    var y string\n    y = string(x)\n    fmt.Println(y)\n}\n```\n</summary><br><b>\n\n它看起来在101处设置了什么unicode值，并将其用于将整数转换为字符串。\n如果要获取“ 101”，则应使用“ strconv” 软件包，然后替换 <code>y = string(x)</code> with <code>y = strconv.Itoa(x)</code>\n</b></details>\n\n<details>\n<summary>以下代码块什么是错的?:\n\n```\npackage main\n\nfunc main() {\n    var x = 2\n    var y = 3\n    const someConst = x + y\n}\n```\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>以下代码块的输出是什么？:\n\n```go   \npackage main\n\nimport \"fmt\"\n\nconst (\n\tx = iota\n\ty = iota\n)\nconst z = iota\n\nfunc main() {\n\tfmt.Printf(\"%v\\n\", x)\n\tfmt.Printf(\"%v\\n\", y)\n\tfmt.Printf(\"%v\\n\", z)\n}\n```\n</summary><br><b>\n</b></details>\n\n<details>\n<summary> _ 在 Go 中的用途是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>以下代码块的输出是什么？:\n\n```go\npackage main\n\nimport \"fmt\"\n\nconst (\n\t_ = iota + 3\n\tx\n)\n\nfunc main() {\n\tfmt.Printf(\"%v\\n\", x)\n}\n```\n</summary><br><b>\n</b></details>\n\n## Mongo\n\n<a name=\"mongo-beginner\"></a>\n#### 初级\n\n<details>\n<summary>MongoDB有什么优势？ 换句话说，为什么选择 MongoDB 而不选择 NoSQL 的其他实现?</summary><br><b>\n</b></details>\n\n<details>\n<summary>SQL和NoSQL之间的区别是什么?</summary><br><b>\n\n主要区别在于SQL数据库是结构化的（数据以带有行和列的表格-像是Excel电子表格表格），而NoSQL是\n非结构化的，并且数据存储会根据NoSQL DB的设置方式而有所不同，例如\n作为键值对，面向文档等\n</b></details>\n\n<details>\n<summary>在哪种情况下，这个查询希望使用 NoSQL/Mongo 而不是SQL?</summary><br><b>\n\n  * 经常变化的异构数据\n  * 数据一致性和完整性不是重中之重\n  * 最好，如果数据库需要快速扩展\n</b></details>\n\n<details>\n<summary>什么是一个文档? 什么是一个集合?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是一个聚合?</summary><br><b>\n</b></details>\n\n<details>\n<summary>那个更好? 嵌入文档还是引用?</summary><br><b>\n</b></details>\n\n##### Queries\n\n<details>\n<summary>解释这个查询: <code>db.books.find({\"name\": /abc/})</code></summary><br><b>\n</b></details>\n\n<details>\n<summary>解释这个查询: <code>db.books.find().sort({x:1})</code></summary><br><b>\n</b></details>\n\n## OpenShift\n\n<a name=\"openshift-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是OpenShift? 你用过吗？ 如果有，是怎样使用的？</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能解释一下 OpenShift 和 Kubernetes 之间的区别吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>定义 Pods 以及解释什么是有状态的 pods</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些类型的构建策略?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释标签是什么以及它们的用途</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释什么是注释以及它们与标签的区别</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释什么是Downward API</summary><br><b>\n</b></details>\n\n## Shell 脚本\n\n<a name=\"shell-scripting-beginner\"></a>\n#### 初级\n\n<details>\n<summary>告诉我你使用Shell脚本的经验</summary><br><b>\n</b></details>\n\n<details>\n<summary>脚本中的这一行是什么意思?: <code>#!/bin/bash</code></summary><br><b>\n</b></details>\n\n<details>\n<summary>你倾向于在编写的每个脚本中包含什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>对还是错?: 当某个命令行失败时，默认情况下，该脚本将退出并且不会继续运行</summary><br><b>\n\n取决于所使用的语言和设置，例如在Bash中，默认情况下，脚本将继续运行。\n</b></details>\n\n<details>\n<summary>今天，我们拥有Ansible之类的工具和技术。 为什么还会有人使用Shell脚本?</summary><br><b>\n</b></details>\n\n<details>\n<summary>说出下面每个命令的结果是什么：\n\n  * <code>echo $0</code>\n  * <code>echo $?</code>\n  * <code>echo $$</code>\n  * <code>echo $@</code>\n  * <code>echo $#</code></summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何调试Shell脚本?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何在Shell脚本中从用户获得输入?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下条件语句以及如何使用它们</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是循环? 你熟悉哪些类型的循环?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释 <code>continue</code> 和 <code>break</code>. 你什么时候使用它们?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何将命令的输出存储在变量中?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何检查可变长度?</summary><br><b>\n</b></details>\n\n<details>\n<summary>单引号和双引号之间的区别是什么?</summary><br><b>\n</b></details>\n\n<a name=\"shell-scripting-advanced\"></a>\n#### 高级\n\n<details>\n<summary>解释以下代码:\n\n<code>:(){ :|:& };:</code>\n\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能举一些Bash最佳实践的例子吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是三元运算符？ 你如何在bash中使用它?</summary><br><b>\n\n使用 if/else 的一种简短方法。 一个例子:\n\n[[ $a = 1 ]] && b=\"yes, equal\" || b=\"nope\"\n</b></details>\n\n## SQL\n\n<a name=\"sql-beginner\"></a>\n#### 初级\n\n<details>\n<summary>SQL 代表什么?</summary><br><b>\n\nStructured Query Language（结构化查询语言）\n\n</b></details>\n\n<details>\n<summary>SQL 和 NoSQL 有那些不同</summary><br><b>\n\n主要区别在于SQL数据库是结构化的（数据以\n带有行和列的表格-像是Excel电子表格表格），而NoSQL是\n非结构化的，并且数据存储会根据NoSQL DB的设置方式而有所不同，例如\n作为键值对，面向文档等\n</b></details>\n\n<details>\n<summary>数据库符合ACID的含义是什么?</summary><br>\n\nACID代表原子性，一致性，隔离性，耐久性。为了符合ACID，数据库必须满足四个标准中的每个标准\n\n**原子性** - 数据库发生更改时，它整体上应该成功或失败。\n\n例如，如果你要更新表，则更新应完全执行。如果仅部分执行，则\n更新被视为整体失败，并且不会通过-数据库将恢复为原始状态\n更新发生之前的状态。还应该提到的是，原子性确保每个\n事务以其自身的独立“单元”完成 - 如果任何部分失败，则整个语句都会失败。\n\n**一致性** - 对数据库所做的任何更改都应将其从一种有效状态转变为另一种有效状态。\n\n例如，如果你对数据库进行了更改，则不应破坏它。通过检查和约束来保持一致性\n在数据库中预定义。例如，如果你尝试将列的值从字符串更改为int\n应该是数据类型字符串，一致的数据库将不允许该事务通过，并且该操作将\n不执行\n\n**隔离** - 确保数据库不会被“更新中”-因为多个事务正在运行\n同时，它仍应保持数据库处于与按顺序运行事务相同的状态。\n\n例如，假设有20个人同时对数据库进行了更改。在\n当你执行查询时，已完成20项更改中的15项，但仍有5项正在进行中。你应该\n仅看到已完成的15个更改 - 随着更改的进行，你将看不到数据库的更新中。\n\n**耐用性** - 更改一旦提交，无论发生什么情况都将保持提交状态\n（电源故障，系统崩溃等）。这意味着所有已完成的交易\n必须记录在非挥发性内存中。\n\n请注意，SQL本质上符合ACID。某些NoSQL DB可能符合ACID，具体取决于\n它们的工作方式，但是根据一般经验，NoSQL DB不被视为符合ACID\n</details>\n\n<details>\n<summary>什么时候最好使用SQL/NoSQL？</summary><br><b>\n\nSQL - 当数据完整性至关重要时，最适合使用。 由于符合ACID，SQL通常由许多业务实现特别是金融领域。\n\nNoSQL - 非常适合你需要快速扩展的情况。 请记住NoSQL是为Web应用程序设计的\n，如果你需要快速将相同信息散布到多台服务器，它将会很好的用\n此外，由于 NoSQL 不遵守具有列和行结构的严格表\n关系数据库所要求的，你可以将不同的数据类型存储在一起。\n</b></details>\n\n<details>\n<summary>什么是笛卡尔积?</summary><br>\n\n笛卡尔积是指第一个表中的所有行都与第二个表中的所有行连接在一起时的结果\n表。 这可以通过不定义要联接的键来隐式完成，也可以通过以下方式显式地完成：\n在两个表上调用CROSS JOIN，如下所示：\n\nSelect * from customers **CROSS JOIN** orders;\n\n请注意，笛卡尔积也可能是一件坏事 - 执行联接时\n在两个都没有唯一键的表上，这可能会导致返回信息\n是不正确的。\n</details>\n\n##### SQL Specific Questions\n\n对于这些问题，我们将使用下面显示的“客户和订单”表：\n\n**Customers**\n\nCustomer_ID | Customer_Name | Items_in_cart | Cash_spent_to_Date\n------------ | ------------- | ------------- | -------------\n100204 | John Smith | 0 | 20.00\n100205 | Jane Smith | 3 | 40.00\n100206 | Bobby Frank | 1 | 100.20\n\n**ORDERS**\n\nCustomer_ID | Order_ID | Item | Price | Date_sold\n------------ | ------------- | ------------- | ------------- | -------------\n100206 | A123 | Rubber Ducky | 2.20 | 2019-09-18\n100206 | A123 | Bubble Bath | 8.00 | 2019-09-18\n100206 | Q987 | 80-Pack TP | 90.00 | 2019-09-20\n100205 | Z001 | Cat Food - Tuna Fish | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Chicken | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Beef | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Kitty quesadilla | 10.00 | 2019-08-05\n100204 | X202 | Coffee | 20.00 | 2019-04-29\n\n<details>\n<summary>我如何从该表中选择所有字段?</summary><br><b>\n\nSelect * <br>\nFrom Customers;\n</b></details>\n\n<details>\n<summary>约翰的购物车中有几件？</summary><br><b>\n\nSelect Items_in_cart <br>\nFrom Customers <br>\nWhere Customer_Name = \"John Smith\";\n</b></details>\n\n<details>\n<summary>所有客户花费的所有现金的总和是多少?</summary><br><b>\n\nSelect SUM(Cash_spent_to_Date) as SUM_CASH <br>\nFrom Customers;\n</b></details>\n\n<details>\n<summary>在购物车有商品的有多少人?</summary><br><b>\n\nSelect count(1) as Number_of_People_w_items <br>\nFrom Customers <br>\nwhere Items_in_cart > 0;\n</b></details>\n\n<details>\n<summary>你如何将客户表加入订单表?</summary><br><b>\n\n你可以加入他们的唯一键。 在这种情况下，唯一键为中的Customer_ID\n客户表和订单表\n</b></details>\n\n<details>\n<summary>你如何显示哪些客户订购了哪些物品?</summary><br><b>\n\nSelect c.Customer_Name, o.Item <br>\nFrom Customers c <br>\nLeft Join Orders o <br>\n  On c.Customer_ID = o.Customer_ID;\n\n</b></details>\n\n<a name=\"sql-advanced\"></a>\n#### 高级\n\n<details>\n<summary>使用with语句，你将如何显示谁订购了猫粮以及花费的总金额?</summary><br><b>\n\nwith cat_food as ( <br>\nSelect Customer_ID, SUM(Price) as TOTAL_PRICE <br>\nFrom Orders <br>\nWhere Item like \"%Cat Food%\" <br>\nGroup by Customer_ID <br>\n) <br>\nSelect Customer_name, TOTAL_PRICE <br>\nFrom Customers c <br>\nInner JOIN cat_food f <br>\n  ON c.Customer_ID = f.Customer_ID <br>\nwhere c.Customer_ID in (Select Customer_ID from cat_food);\n\n尽管这是一个简单的声明，但“ with”子句在\n在连接到另一个表之前，需要在一个表上运行一个复杂的查询。 用语句很好，\n因为你在运行查询时会创建一个伪临时文件，而不是创建一个新表。\n\n目前尚无法获得所有猫粮的总和，因此我们使用了with语句来创建\n伪表检索每个客户花费的价格总和，然后正常加入该表。\n\n</b></details>\n\n## Azure\n\n<a name=\"azure-beginner\"></a>\n#### 初级\n\n<details>\n<summary>解释一下可用性集和可用性区域</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是Azure资源管理器？ 你可以描述ARM模板的格式吗？</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下Azure托管磁盘</summary><br><b>\n</b></details>\n\n## GCP\n\n<a name=\"gcp-beginner\"></a>\n#### 初级\n\n<details>\n<summary>GCP的主要组件和服务是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些GCP管理工具?</summary><br><b>\n</b></details>\n\n<details>\n<summary>告诉我对GCP联网了解多少</summary><br><b>\n</b></details>\n\n## OpenStack\n\n<a name=\"openstack-beginner\"></a>\n#### 初级\n\n<details>\n<summary>告诉我你使用OpenStack的经验。 你认为OpenStack的优缺点是什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉OpenStack的哪些组件/项目?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你能告诉我以下每个组件/项目负责什么吗?:\n\n  * Nova\n  * Neutron\n  * Cinder\n  * Glance\n  * Keystone</summary><br><b>\n</b></details>\n\n<details>\n<summary>详细描述如何使用可以从云外部访问的IP来启动实例</summary><br><b>\n</b></details>\n\n<details>\n<summary>你收到客户打来的电话，说：“我可以ping我的实例，但不能连接（ssh）它”。 可能是什么问题？</summary><br><b>\n</b></details>\n\n<details>\n<summary>OpenStack支持哪些类型的网络？</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何调试OpenStack存储问题？ （工具，日志等）</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何调试OpenStack计算问题？ （工具，日志等）</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉 TripleO吗? 它有那些优点?</summary><br><b>\n</b></details>\n\n##### 网络\n\n<details>\n<summary>什么是供应商网络?</summary><br><b>\n</b></details>\n\n<details>\n<summary>L2和L3中存在哪些组件和服务?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是ML2 plug-in? 解释一下它的架构</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是L2 代理? 它是怎么工作的以及它主要负责什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是L3 代理? 它是怎么工作的以及它主要负责什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释元数据代理是怎么工作的以及它主要负责什么</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何调试OpenStack网络问题？ （工具，日志等）</summary><br><b>\n</b></details>\n\n<a name=\"openstack-advanced\"></a>\n#### 中级\n\n##### 网络\n\n<details>\n<summary>解释 BGP 动态路由</summary>\n</b></details>\n\n## 安全\n\n<a name=\"security-beginner\"></a>\n#### 初级\n\n<details>\n<summary>你能描述一下DevSecOps的核心原理吗?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些DevOps安全最佳实践?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你熟悉哪些安全技术?</summary><br><b>\n</b></details>\n\n<details>\n<summary>如何在不同的工具和平台中管理密码?</summary><br><b>\n</b></details>\n\n<details>\n<summary>你如何识别和管理漏洞?</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是权限限制?</summary><br><b>\n</b></details>\n\n## Puppet\n\n<a name=\"puppet-beginner\"></a>\n#### 初级\n\n<details>\n<summary>什么是Puppet? 它是怎么工作的?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下 Puppet 结构</summary><br><b>\n</b></details>\n\n<details>\n<summary>你可以将Puppet与其他配置管理工具进行比较吗？ 你为什么选择使用Puppet？</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释以下:\n\n  * Module\n  * Manifest\n  * Node</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下Facter</summary><br><b>\n</b></details>\n\n<details>\n<summary>什么是MCollective?</summary><br><b>\n</b></details>\n\n<a name=\"puppet-advanced\"></a>\n#### 中级\n\n<details>\n<summary>你有编写模块的经验吗？ 你创建了哪个模块以及用于什么?</summary><br><b>\n</b></details>\n\n<details>\n<summary>解释一下什么是Hiera</summary><br><b>\n</b></details>\n\n## 场景\n\n方案是没有口头回答的问题，需要你满足以下条件之一：\n\n* 设置环境\n* 编写脚本\n* 设计和/或开发基础设施项目\n\n这些问题通常作为应聘者的一项家庭任务作为候选，可以将多个主题结合在一起。\n在下面，你可以找到一些场景问题：\n\n* [Elasticsearch & Kibana on AWS](scenarios/elk_kibana_aws.md)\n* [Ansible, Minikube and Docker](scenarios/ansible_minikube_docker.md)\n* [Cloud Slack bot](scenarios/cloud_slack_bot.md)\n* [Writing Jenkins Scripts](scenarios/jenkins_scripts.md)\n* [Writing Jenkins Pipelines](scenarios/jenkins_pipelines.md)\n\n<!-- {% endraw %} -->"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 174.97,
          "content": "<p align=\"center\"><img src=\"images/devops_exercises.png\"/></p>\n\n:information_source: &nbsp;This repo contains questions and exercises on various technical topics, sometimes related to DevOps and SRE\n\n:bar_chart: &nbsp;There are currently **2624** exercises and questions\n\n:warning: &nbsp;You can use these for preparing for an interview but most of the questions and exercises don't represent an actual interview. Please read [FAQ page](faq.md) for more details\n\n:stop_sign: &nbsp;If you are interested in pursuing a career as DevOps engineer, learning some of the concepts mentioned here would be useful, but you should know it's not about learning all the topics and technologies mentioned in this repository\n\n:pencil: &nbsp;You can add more exercises by submitting pull requests :) Read about contribution guidelines [here](CONTRIBUTING.md)\n\n****\n\n<!-- ALL-TOPICS-LIST:START -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<center>\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"topics/devops/README.md\"><img src=\"images/devops.png\" width=\"75px;\" height=\"75px;\" alt=\"DevOps\" /><br /><b>DevOps</b></a></td>\n    <td align=\"center\"><a href=\"topics/git/README.md\"><img src=\"images/git.png\" width=\"75px;\" height=\"75px;\" alt=\"Git\"/><br /><b>Git</b></a></td>\n    <td align=\"center\"><a href=\"#network\"><img src=\"images/network.png\" width=\"75px;\" height=\"75px;\" alt=\"Network\"/><br /><b>Network</b></a></td>\n    <td align=\"center\"><a href=\"#hardware\"><img src=\"images/hardware.png\" width=\"75px;\" height=\"75px;\" alt=\"Hardware\"/><br /><b>Hardware</b></a></td>\n    <td align=\"center\"><a href=\"topics/kubernetes/README.md\"><img src=\"images/kubernetes.png\" width=\"75px;\" height=\"75px;\" alt=\"kubernetes\"/><br /><b>Kubernetes</b></a></td>\n  </tr>\n\n  <tr>\n    <td align=\"center\"><a href=\"topics/software_development/README.md\"><img src=\"images/programming.png\" width=\"75px;\" height=\"75px;\" alt=\"programming\"/><br /><b>Software Development</b></a></td>\n    <td align=\"center\"><a href=\"https://github.com/bregman-arie/python-exercises\"><img src=\"images/python.png\" width=\"75px;\" height=\"75px;\" alt=\"Python\"/><br /><b>Python</b></a></td>\n    <td align=\"center\"><a href=\"https://github.com/bregman-arie/go-exercises\"><img src=\"images/Go.png\" width=\"75px;\" height=\"75px;\" alt=\"go\"/><br /><b>Go</b></a></td>\n    <td align=\"center\"><a href=\"topics/perl/README.md\"><img src=\"images/perl.png\" width=\"75px;\" height=\"75px;\" alt=\"perl\"/><br /><b>Perl</b></a></td>\n    <td align=\"center\"><a href=\"#regex\"><img src=\"images/regex.png\" width=\"75px;\" height=\"75px;\" alt=\"RegEx\"/><br /><b>Regex</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/cloud/README.md\"><img src=\"images/cloud.png\" width=\"75px;\" height=\"75px;\" alt=\"Cloud\"/><br /><b>Cloud</b></a></td>\n      <td align=\"center\"><a href=\"topics/aws/README.md\"><img src=\"images/aws.png\" width=\"100px;\" height=\"75px;\" alt=\"aws\"/><br /><b>AWS</b></a></td>\n      <td align=\"center\"><a href=\"topics/azure/README.md\"><img src=\"images/azure.png\" width=\"75px;\" height=\"75px;\" alt=\"azure\"/><br /><b>Azure</b></a></td>\n      <td align=\"center\"><a href=\"topics/gcp/README.md\"><img src=\"images/googlecloud.png\" width=\"70px;\" height=\"70px;\" alt=\"Google Cloud Platform\"/><br /><b>Google Cloud Platform</b></a></td>\n      <td align=\"center\"><a href=\"#openstack/README.md\"><img src=\"images/openstack.png\" width=\"75px;\" height=\"75px;\" alt=\"openstack\"/><br /><b>OpenStack</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"#operating-system\"><img src=\"images/os.png\" width=\"75px;\" height=\"75px;\" alt=\"Operating System\"/><br /><b>Operating System</b></a></td>\n      <td align=\"center\"><a href=\"topics/linux/README.md\"><img src=\"images/logos/linux.png\" width=\"75px;\" height=\"75px;\" alt=\"Linux\"/><br /><b>Linux</b></a></td>\n      <td align=\"center\"><a href=\"#virtualization\"><img src=\"images/virtualization.png\" width=\"75px;\" height=\"75px;\" alt=\"Virtualization\"/><br /><b>Virtualization</b></a></td>\n      <td align=\"center\"><a href=\"topics/dns/README.md\"><img src=\"images/dns.png\" width=\"75px;\" height=\"75px;\" alt=\"DNS\"/><br /><b>DNS</b></a></td>\n      <td align=\"center\"><a href=\"topics/shell/README.md\"><img src=\"images/bash.png\" width=\"75px;\" height=\"75px;\" alt=\"Bash\"/><br /><b>Shell Scripting</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/databases/README.md\"><img src=\"images/databases.png\" width=\"75px;\" height=\"75px;\" alt=\"Databases\"/><br /><b>Databases</b></a></td>\n      <td align=\"center\"><a href=\"#sql\"><img src=\"images/sql.png\" width=\"75px;\" height=\"75px;\" alt=\"sql\"/><br /><b>SQL</b></a></td>\n      <td align=\"center\"><a href=\"#mongo\"><img src=\"images/mongo.png\" width=\"75px;\" height=\"75px;\" alt=\"Mongo\"/><br /><b>Mongo</b></a></td>\n      <td align=\"center\"><a href=\"#testing\"><img src=\"images/testing.png\" width=\"75px;\" height=\"75px;\" alt=\"Testing\"/><br /><b>Testing</b></a></td>\n      <td align=\"center\"><a href=\"#big-data\"><img src=\"images/big-data.png\" width=\"75px;\" height=\"75px;\" alt=\"Big Data\"/><br /><b>Big Data</b></a></td>\n\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/cicd/README.md\"><img src=\"images/cicd.png\" width=\"75px;\" height=\"75px;\" alt=\"cicd\"/><br /><b>CI/CD</b></a></td>\n      <td align=\"center\"><a href=\"#certificates\"><img src=\"images/certificates.png\" width=\"75px;\" height=\"75px;\" alt=\"Certificates\"/><br /><b>Certificates</b></a></td>\n      <td align=\"center\"><a href=\"topics/containers/README.md\"><img src=\"images/containers.png\" width=\"75px;\" height=\"75px;\" alt=\"Containers\"/><br /><b>Containers</b></a></td>\n      <td align=\"center\"><a href=\"topics/openshift/README.md\"><img src=\"images/openshift.png\" width=\"75px;\" height=\"75px;\" alt=\"OpenShift\"/><br /><b>OpenShift</b></a></td>\n      <td align=\"center\"><a href=\"#storage\"><img src=\"images/storage.png\" width=\"75px;\" height=\"75px;\" alt=\"Storage\"/><br /><b>Storage</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/terraform/README.md\"><img src=\"images/terraform.png\" width=\"75px;\" height=\"75px;\" alt=\"Terraform\"/><br /><b>Terraform</b></a></td>\n      <td align=\"center\"><a href=\"#puppet\"><img src=\"images/puppet.png\" width=\"75px;\" height=\"75px;\" alt=\"puppet\"/><br /><b>Puppet</b></a></td>\n      <td align=\"center\"><a href=\"#distributed\"><img src=\"images/distributed.png\" width=\"75px;\" height=\"75px;\" alt=\"Distributed\"/><br /><b>Distributed</b></a></td>\n      <td align=\"center\"><a href=\"#questions-you-ask\"><img src=\"images/you.png\" width=\"75px;\" height=\"75px;\" alt=\"you\"/><br /><b>Questions you can ask</b></a></td>\n      <td align=\"center\"><a href=\"topics/ansible/README.md\"><img src=\"images/ansible.png\" width=\"75px;\" height=\"75px;\" alt=\"ansible\"/><br /><b>Ansible</b></a></td>\n  </tr>\n\n  <tr>\n      <td align=\"center\"><a href=\"topics/observability/README.md\"><img src=\"images/observability.png\" width=\"75px;\" height=\"75px;\" alt=\"observability\"/><br /><b>Observability</b></a></td>\n      <td align=\"center\"><a href=\"#prometheus\"><img src=\"images/prometheus.png\" width=\"75px;\" height=\"75px;\" alt=\"Prometheus\"/><br /><b>Prometheus</b></a></td>\n      <td align=\"center\"><a href=\"topics/circleci/README.md\"><img src=\"images/logos/circleci.png\" width=\"70px;\" height=\"70px;\" alt=\"Circle CI\"/><br /><b>Circle CI</b></a></td>\n      <td align=\"center\"><a href=\"topics/datadog/README.md\"><img src=\"images/logos/datadog.png\" width=\"80px;\" height=\"80px;\" alt=\"DataDog\"/><br /><b></b></a></td>\n      <td align=\"center\"><a href=\"topics/grafana/README.md\"><img src=\"images/logos/grafana.png\" width=\"80px;\" height=\"80px;\" alt=\"Grafana\"/><br /><b>Grafana</b></a></td>\n  </tr>\n\n  <tr>\n    <td align=\"center\"><a href=\"topics/argo/README.md\"><img src=\"images/logos/argo.png\" width=\"80px;\" height=\"80px;\" alt=\"Argo\"/><br /><b>Argo</b></a></td>\n    <td align=\"center\"><a href=\"topics/soft_skills/README.md\"><img src=\"images/HR.png\" width=\"75px;\" height=\"75px;\" alt=\"HR\"/><br /><b>Soft Skills</b></a></td>\n    <td align=\"center\"><a href=\"topics/security/README.md\"><img src=\"images/security.png\" width=\"75px;\" height=\"75px;\" alt=\"security\"/><br /><b>Security</b></a></td>\n    <td align=\"center\"><a href=\"#system-design\"><img src=\"images/design.png\" width=\"75px;\" height=\"75px;\" alt=\"Design\"/><br /><b>System Design</b></a></td>\n   </tr>\n\n   <tr>\n    <td align=\"center\"><a href=\"topics/chaos_engineering/README.md\"><img src=\"images/logos/chaos_engineering.png\" width=\"75px;\" height=\"75px;\" alt=\"Chaos Engineering\"/><br /><b>Chaos Engineering</b></a></td>\n    <td align=\"center\"><a href=\"#Misc\"><img src=\"images/general.png\" width=\"75px;\" height=\"75px;\" alt=\"Misc\"/><br /><b>Misc</b></a></td>\n    <td align=\"center\"><a href=\"#elastic\"><img src=\"images/elastic.png\" width=\"75px;\" height=\"75px;\" alt=\"Elastic\"/><br /><b>Elastic</b></a></td>\n    <td align=\"center\"><a href=\"topics/kafka/README.md\"><img src=\"images/logos/kafka.png\" width=\"85px;\" height=\"80px;\" alt=\"Kafka\"/><br /><b>Kafka</b></a></td>\n    <td align=\"center\"><a href=\"topics/node/node_questions_basic.md\"><img src=\"images/nodejs.png\" width=\"85px;\" height=\"80px;\" alt=\"NodeJs\"/><br /><b>NodeJs</b></a></td>\n   </tr>\n   \n</table>\n</center>\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-TOPICS-LIST:END -->\n\n## Network\n\n<details>\n<summary>In general, what do you need in order to communicate?</summary><br><b>\n\n  - A common language (for the two ends to understand)\n  - A way to address who you want to communicate with\n  - A Connection (so the content of the communication can reach the recipients)\n\n</b></details>\n\n<details>\n<summary>What is TCP/IP?</summary><br><b>\n\nA set of protocols that define how two or more devices can communicate with each other.\n\nTo learn more about TCP/IP, read [here](http://www.penguintutor.com/linux/basic-network-reference)\n\n</b></details>\n\n<details>\n<summary>What is Ethernet?</summary><br><b>\n\nEthernet simply refers to the most common type of Local Area Network (LAN) used today. A LAN—in contrast to a WAN (Wide Area Network), which spans a larger geographical area—is a connected network of computers in a small area, like your office, college campus, or even home.\n\n</b></details>\n\n<details>\n<summary>What is a MAC address? What is it used for?</summary><br><b>\n\nA MAC address is a unique identification number or code used to identify individual devices on the network.\n\nPackets that are sent on the ethernet are always coming from a MAC address and sent to a MAC address. If a network adapter is receiving a packet, it is comparing the packet’s destination MAC address to the adapter’s own MAC address.\n\n</b></details>\n\n<details>\n<summary>When is this MAC address used?: ff:ff:ff:ff:ff:ff</summary><br><b>\n\nWhen a device sends a packet to the broadcast MAC address (FF:FF:FF:FF:FF:FF​), it is delivered to all stations on the local network. Ethernet broadcasts are used to resolve IP addresses to MAC addresses (by ARP) at the data link layer.\n</b></details>\n\n<details>\n<summary>What is an IP address?</summary><br><b>\n\nAn Internet Protocol address (IP address) is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication.An IP address serves two main functions: host or network interface identification and location addressing.\n</b></details>\n\n<details>\n<summary>Explain the subnet mask and give an example</summary><br><b>\n\nA Subnet mask is a 32-bit number that masks an IP address and divides the IP addresses into network addresses and host addresses. Subnet Mask is made by setting network bits to all \"1\"s and setting host bits to all \"0\"s. Within a given network, out of the total usable host addresses, two are always reserved for specific purposes and cannot be allocated to any host. These are the first address, which is reserved as a network address (a.k.a network ID), and the last address used for network broadcast.\n\n[Example](https://github.com/philemonnwanne/projects/tree/main/exercises/exe-09)\n\n</b></details>\n\n<details>\n<summary>What is a private IP address? In which scenarios/system designs, one should use it?</summary><br><b>\nPrivate IP addresses are assigned to the hosts in the same network to communicate with one another. As the name \"private\" suggests, the devices having the private IP addresses assigned can't be reached by the devices from any external network. For example, if I am living in a hostel and I want my hostel mates to join the game server I have hosted, I will ask them to join via my server's private IP address, since the network is local to the hostel.\n</b></details>\n\n<details>\n<summary>What is a public IP address? In which scenarios/system designs, one should use it?</summary><br><b>\nA public IP address is a public-facing IP address. In the event that you were hosting a game server that you want your friends to join, you will give your friends your public IP address to allow their computers to identify and locate your network and server in order for the connection to take place. One time that you would not need to use a public-facing IP address is in the event that you were playing with friends who were connected to the same network as you, in that case, you would use a private IP address. In order for someone to be able to connect to your server that is located internally, you will have to set up a port forward to tell your router to allow traffic from the public domain into your network and vice versa.\n</b></details>\n\n<details>\n<summary>Explain the OSI model. What layers there are? What each layer is responsible for?</summary><br><b>\n\n- Application: user end (HTTP is here)\n- Presentation: establishes context between application-layer entities (Encryption is here)\n- Session: establishes, manages, and terminates the connections\n- Transport: transfers variable-length data sequences from a source to a destination host (TCP & UDP are here)\n- Network: transfers datagrams from one network to another (IP is here)\n- Data link: provides a link between two directly connected nodes (MAC is here)\n- Physical: the electrical and physical spec of the data connection (Bits are here)\n\nYou can read more about the OSI model in [penguintutor.com](http://www.penguintutor.com/linux/basic-network-reference)\n</b></details>\n\n<details>\n<summary>For each of the following determines to which OSI layer it belongs:\n\n  * Error correction\n  * Packets routing\n  * Cables and electrical signals\n  * MAC address\n  * IP address\n  * Terminate connections\n  * 3 way handshake</summary><br><b>\n  * Error correction - Data link\n  * Packets routing - Network\n  * Cables and electrical signals - Physical\n  * MAC address - Data link\n  * IP address - Network\n  * Terminate connections - Session\n  * 3-way handshake - Transport\n</b></details>\n\n<details>\n<summary>What delivery schemes are you familiar with?</summary><br><b>\n\nUnicast: One-to-one communication where there is one sender and one receiver.\n\nBroadcast: Sending a message to everyone in the network. The address ff:ff:ff:ff:ff:ff is used for broadcasting.\n           Two common protocols which use broadcast are ARP and DHCP.\n\nMulticast: Sending a message to a group of subscribers. It can be one-to-many or many-to-many.\n</b></details>\n\n<details>\n<summary>What is CSMA/CD? Is it used in modern ethernet networks?</summary><br><b>\n\nCSMA/CD stands for Carrier Sense Multiple Access / Collision Detection.\nIts primary focus is to manage access to a shared medium/bus where only one host can transmit at a given point in time.\n\nCSMA/CD algorithm:\n\n1. Before sending a frame, it checks whether another host is already transmitting a frame.\n2. If no one is transmitting, it starts transmitting the frame.\n3. If two hosts transmit at the same time, we have a collision.\n4. Both hosts stop sending the frame and they send everyone a 'jam signal' notifying everyone that a collision occurred\n5. They are waiting for a random time before sending it again\n6. Once each host waited for a random time, they try to send the frame again and so the cycle starts again\n</b></details>\n\n<details>\n<summary>Describe the following network devices and the difference between them:\n\n  * router\n  * switch\n  * hub</summary><br><b>\n\nA router, switch, and hub are all network devices used to connect devices in a local area network (LAN). However, each device operates differently and has its specific use cases. Here is a brief description of each device and the differences between them:\n\n1. Router: a network device that connects multiple network segments together. It operates at the network layer (Layer 3) of the OSI model and uses routing protocols to direct data between networks. Routers use IP addresses to identify devices and route data packets to the correct destination.\n2. Switch: a network device that connects multiple devices on a LAN. It operates at the data link layer (Layer 2) of the OSI model and uses MAC addresses to identify devices and direct data packets to the correct destination. Switches allow devices on the same network to communicate with each other more efficiently and can prevent data collisions that can occur when multiple devices send data simultaneously.\n3. Hub: a network device that connects multiple devices through a single cable and is used to connect multiple devices without segmenting a network. However, unlike a switch, it operates at the physical layer (Layer 1) of the OSI model and simply broadcasts data packets to all devices connected to it, regardless of whether the device is the intended recipient or not. This means that data collisions can occur, and the network's efficiency can suffer as a result. Hubs are generally not used in modern network setups, as switches are more efficient and provide better network performance.\n</b></details>\n\n<details>\n<summary>What is a \"Collision Domain\"?</summary><br><b>\nA collision domain is a network segment in which devices can potentially interfere with each other by attempting to transmit data at the same time. When two devices transmit data at the same time, it can cause a collision, resulting in lost or corrupted data. In a collision domain, all devices share the same bandwidth, and any device can potentially interfere with the transmission of data by other devices.\n</b></details>\n\n<details>\n<summary>What is a \"Broadcast Domain\"?</summary><br><b>\nA broadcast domain is a network segment in which all devices can communicate with each other by sending broadcast messages. A broadcast message is a message that is sent to all devices in a network rather than a specific device. In a broadcast domain, all devices can receive and process broadcast messages, regardless of whether the message was intended for them or not.\n</b></details>\n\n<details>\n<summary>three computers connected to a switch. How many collision domains are there? How many broadcast domains?</summary><br><b>\n\nThree collision domains and one broadcast domain\n</b></details>\n\n<details>\n<summary>How does a router work?</summary><br><b>\n\nA router is a physical or virtual appliance that passes information between two or more packet-switched computer networks. A router inspects a given data packet's destination Internet Protocol address (IP address), calculates the best way for it to reach its destination, and then forwards it accordingly.\n\n</b></details>\n\n<details>\n<summary>What is NAT?</summary><br><b>\n\n Network Address Translation (NAT) is a process in which one or more local IP addresses are translated into one or more Global IP address and vice versa in order to provide Internet access to the local hosts.\n\n</b></details>\n\n<details>\n<summary>What is a proxy? How does it work? What do we need it for?</summary><br><b>\n\nA proxy server acts as a gateway between you and the internet. It’s an intermediary server separating end users from the websites they browse.\n\nIf you’re using a proxy server, internet traffic flows through the proxy server on its way to the address you requested. The request then comes back through that same proxy server (there are exceptions to this rule), and then the proxy server forwards the data received from the website to you.\n\nProxy servers provide varying levels of functionality, security, and privacy depending on your use case, needs, or company policy.\n</b></details>\n\n<details>\n<summary>What is TCP? How does it work? What is the 3-way handshake?</summary><br><b>\n\nTCP 3-way handshake or three-way handshake is a process that is used in a TCP/IP network to make a connection between server and client.\n\nA three-way handshake is primarily used to create a TCP socket connection. It works when:\n\n- A client node sends an SYN data packet over an IP network to a server on the same or an external network. The objective of this packet is to ask/infer if the server is open for new connections.\n- The target server must have open ports that can accept and initiate new connections. When the server receives the SYN packet from the client node, it responds and returns a confirmation receipt – the ACK packet or SYN/ACK packet.\n- The client node receives the SYN/ACK from the server and responds with an ACK packet.\n</b></details>\n\n<details>\n<summary>What is round-trip delay or round-trip time?</summary><br><b>\n\nFrom [wikipedia](https://en.wikipedia.org/wiki/Round-trip_delay): \"the length of time it takes for a signal to be sent plus the length of time it takes for an acknowledgment of that signal to be received\"\n\nBonus question: what is the RTT of LAN?\n</b></details>\n\n<details>\n<summary>How does an SSL handshake work?</summary><br><b>\nSSL handshake is a process that establishes a secure connection between a client and a server.\n\n1. The client sends a Client Hello message to the server, which includes the client's version of the SSL/TLS protocol, a list of the cryptographic algorithms supported by the client, and a random value.\n2. The server responds with a Server Hello message, which includes the server's version of the SSL/TLS protocol, a random value, and a session ID.\n3. The server sends a Certificate message, which contains the server's certificate.\n4. The server sends a Server Hello Done message, which indicates that the server is done sending messages for the Server Hello phase.\n5. The client sends a Client Key Exchange message, which contains the client's public key.\n6. The client sends a Change Cipher Spec message, which notifies the server that the client is about to send a message encrypted with the new cipher spec.\n7. The client sends an Encrypted Handshake Message, which contains the pre-master secret encrypted with the server's public key.\n8. The server sends a Change Cipher Spec message, which notifies the client that the server is about to send a message encrypted with the new cipher spec.\n9. The server sends an Encrypted Handshake Message, which contains the pre-master secret encrypted with the client's public key.\n10. The client and server can now exchange application data.\n</b></details>\n\n<details>\n<summary>What is the difference between TCP and UDP?</summary><br><b>\n\nTCP establishes a connection between the client and the server to guarantee the order of the packages, on the other hand, UDP does not establish a connection between the client and server and doesn't handle package orders. This makes UDP more lightweight than TCP and a perfect candidate for services like streaming.\n\n[Penguintutor.com](http://www.penguintutor.com/linux/basic-network-reference) provides a good explanation.\n</b></details>\n\n<details>\n<summary>What TCP/IP protocols are you familiar with?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain the \"default gateway\"</summary><br><b>\n\nA default gateway serves as an access point or IP router that a networked computer uses to send information to a computer in another network or the internet.\n</b></details>\n\n<details>\n<summary>What is ARP? How does it work?</summary><br><b>\n\nARP stands for Address Resolution Protocol. When you try to ping an IP address on your local network, say 192.168.1.1, your system has to turn the IP address 192.168.1.1 into a MAC address. This involves using ARP to resolve the address, hence its name.\n\nSystems keep an ARP look-up table where they store information about what IP addresses are associated with what MAC addresses. When trying to send a packet to an IP address, the system will first consult this table to see if it already knows the MAC address. If there is a value cached, ARP is not used.\n</b></details>\n\n<details>\n<summary>What is TTL? What does it help to prevent?</summary><br><b>\n\n- TTL (Time to Live) is a value in an IP (Internet Protocol) packet that determines how many hops or routers a packet can travel before it is discarded. Each time a packet is forwarded by a router, the TTL value is decreased by one. When the TTL value reaches zero, the packet is dropped, and an ICMP (Internet Control Message Protocol) message is sent back to the sender indicating that the packet has expired.\n- TTL is used to prevent packets from circulating indefinitely in the network, which can cause congestion and degrade network performance.\n- It also helps to prevent packets from being trapped in routing loops, where packets continuously travel between the same set of routers without ever reaching their destination.\n- In addition, TTL can be used to help detect and prevent IP spoofing attacks, where an attacker attempts to impersonate another device on the network by using a false or fake IP address. By limiting the number of hops that a packet can travel, TTL can help prevent packets from being routed to destinations that are not legitimate.\n</b></details>\n\n<details>\n<summary>What is DHCP? How does it work?</summary><br><b>\n\nIt stands for Dynamic Host Configuration Protocol and allocates IP addresses, subnet masks, and gateways to hosts. This is how it works:\n\n* A host upon entering a network broadcasts a message in search of a DHCP server (DHCP DISCOVER)\n* An offer message is sent back by the DHCP server as a packet containing lease time, subnet mask, IP addresses, etc (DHCP OFFER)\n* Depending on which offer is accepted, the client sends back a reply broadcast letting all DHCP servers know (DHCP REQUEST)\n* The server sends an acknowledgment (DHCP ACK)\n\nRead more [here](https://linuxjourney.com/lesson/dhcp-overview)\n</b></details>\n\n<details>\n<summary>Can you have two DHCP servers on the same network? How does it work?</summary><br><b>\n\nIt is possible to have two DHCP servers on the same network, however, it is not recommended, and it is important to configure them carefully to prevent conflicts and configuration problems.\n- When two DHCP servers are configured on the same network, there is a risk that both servers will assign IP addresses and other network configuration settings to the same device, which can cause conflicts and connectivity issues. Additionally, if the DHCP servers are configured with different network settings or options, devices on the network may receive conflicting or inconsistent configuration settings.\n- However, in some cases, it may be necessary to have two DHCP servers on the same network, such as in large networks where one DHCP server may not be able to handle all the requests. In such cases, DHCP servers can be configured to serve different IP address ranges or different subnets, so they do not interfere with each other.\n</b></details>\n\n<details>\n<summary>What is SSL tunneling? How does it work?</summary><br><b>\n\n- SSL (Secure Sockets Layer) tunneling is a technique used to establish a secure, encrypted connection between two endpoints over an insecure network, such as the Internet. The SSL tunnel is created by encapsulating the traffic within an SSL connection, which provides confidentiality, integrity, and authentication.\n\nHere's how SSL tunneling works:\n\n1. A client initiates an SSL connection to a server, which involves a handshake process to establish the SSL session.\n2. Once the SSL session is established, the client and server negotiate encryption parameters, such as the encryption algorithm and key length, then exchange digital certificates to authenticate each other.\n3. The client then sends traffic through the SSL tunnel to the server, which decrypts the traffic and forwards it to its destination.\n4. The server sends traffic back through the SSL tunnel to the client, which decrypts the traffic and forwards it to the application.\n</b></details>\n\n<details>\n<summary>What is a socket? Where can you see the list of sockets in your system?</summary><br><b>\n\n- A socket is a software endpoint that enables two-way communication between processes over a network. Sockets provide a standardized interface for network communication, allowing applications to send and receive data across a network. To view the list of open sockets on a Linux system: \n***netstat -an***\n- This command displays a list of all open sockets, along with their protocol, local address, foreign address, and state.\n</b></details>\n\n<details>\n<summary>What is IPv6? Why should we consider using it if we have IPv4?</summary><br><b>\n\n- IPv6 (Internet Protocol version 6) is the latest version of the Internet Protocol (IP), which is used to identify and communicate with devices on a network. IPv6 addresses are 128-bit addresses and are expressed in hexadecimal notation, such as 2001:0db8:85a3:0000:0000:8a2e:0370:7334.\n\nThere are several reasons why we should consider using IPv6 over IPv4:\n\n1. Address space: IPv4 has a limited address space, which has been exhausted in many parts of the world. IPv6 provides a much larger address space, allowing for trillions of unique IP addresses.\n2. Security: IPv6 includes built-in support for IPsec, which provides end-to-end encryption and authentication for network traffic.\n3. Performance: IPv6 includes features that can help to improve network performance, such as multicast routing, which allows a single packet to be sent to multiple destinations simultaneously.\n4. Simplified network configuration: IPv6 includes features that can simplify network configuration, such as stateless autoconfiguration, which allows devices to automatically configure their own IPv6 addresses without the need for a DHCP server.\n5. Better mobility support: IPv6 includes features that can improve mobility support, such as Mobile IPv6, which allows devices to maintain their IPv6 addresses as they move between different networks.\n</b></details>\n\n<details>\n<summary>What is VLAN?</summary><br><b>\n\n- A VLAN (Virtual Local Area Network) is a logical network that groups together a set of devices on a physical network, regardless of their physical location. VLANs are created by configuring network switches to assign a specific VLAN ID to frames sent by devices connected to a specific port or group of ports on the switch.\n</b></details>\n\n<details>\n<summary>What is MTU?</summary><br><b>\n\t\nMTU stands for Maximum Transmission Unit. It's the size of the largest PDU (protocol Data Unit) that can be sent in a single transaction.\n</b></details>\n\n<details>\n<summary>What happens if you send a packet that is bigger than the MTU?</summary><br><b>\n\t\nWith the IPv4 protocol, the router can fragment the PDU and then send all the fragmented PDU through the transaction.\n\t\nWith IPv6 protocol, it issues an error to the user's computer.\n</b></details>\n\n<details>\n<summary>True or False? Ping is using UDP because it doesn't care about reliable connection</summary><br><b>\n\nFalse. Ping is actually using ICMP (Internet Control Message Protocol) which is a network protocol used to send diagnostic messages and control messages related to network communication.\n</b></details>\n\n<details>\n<summary>What is SDN?</summary><br><b>\n\n- SDN stands for Software-Defined Networking. It is an approach to network management that emphasizes the centralization of network control, enabling administrators to manage network behavior through a software abstraction.\n- In a traditional network, network devices such as routers, switches, and firewalls are configured and managed individually, using specialized software or command-line interfaces. In contrast, SDN separates the network control plane from the data plane, allowing administrators to manage network behavior through a centralized software controller.\n</b></details>\n\n<details>\n<summary>What is ICMP? What is it used for?</summary><br><b>\n\n- ICMP stands for Internet Control Message Protocol. It is a protocol used for diagnostic and control purposes in IP networks. It is a part of the Internet Protocol suite, operating at the network layer.\n\nICMP messages are used for a variety of purposes, including:\n1. Error reporting: ICMP messages are used to report errors that occur in the network, such as a packet that could not be delivered to its destination.\n2. Ping: ICMP is used to send ping messages, which are used to test whether a host or network is reachable and to measure the round-trip time for packets.\n3. Path MTU discovery: ICMP is used to discover the Maximum Transmission Unit (MTU) of a path, which is the largest packet size that can be transmitted without fragmentation.\n4. Traceroute: ICMP is used by the traceroute utility to trace the path that packets take through the network.\n5. Router discovery: ICMP is used to discover the routers in a network.\n</b></details>\n\n<details>\n<summary>What is NAT? How does it work?</summary><br><b>\n\nNAT stands for Network Address Translation. It’s a way to map multiple local private addresses to a public one before transferring the information. Organizations that want multiple devices to employ a single IP address use NAT, as do most home routers.\nFor example, your computer's private IP could be 192.168.1.100, but your router maps the traffic to its public IP (e.g. 1.1.1.1). Any device on the internet would see the traffic coming from your public IP (1.1.1.1) instead of your private IP (192.168.1.100).\n</b></details>\n\n<details>\n<summary>Which port number is used in each of the following protocols?:\n\n  * SSH\n  * SMTP\n  * HTTP\n  * DNS\n  * HTTPS\n  * FTP\n  * SFTP\n</summary><br><b>\n\n  * SSH - 22\n  * SMTP - 25\n  * HTTP - 80\n  * DNS - 53\n  * HTTPS - 443\n  * FTP - 21\n  * SFTP - 22\n</b></details>\n\n<details>\n<summary>Which factors affect network performance?</summary><br><b>\n\nSeveral factors can affect network performance, including:\n\n1. Bandwidth: The available bandwidth of a network connection can significantly impact its performance. Networks with limited bandwidth can experience slow data transfer rates, high latency, and poor responsiveness.\n2. Latency: Latency refers to the delay that occurs when data is transmitted from one point in a network to another. High latency can result in slow network performance, especially for real-time applications like video conferencing and online gaming.\n3. Network congestion: When too many devices are using a network at the same time, network congestion can occur, leading to slow data transfer rates and poor network performance.\n4. Packet loss: Packet loss occurs when packets of data are dropped during transmission. This can result in slower network speeds and lower overall network performance.\n5. Network topology: The physical layout of a network, including the placement of switches, routers, and other network devices, can impact network performance.\n6. Network protocol: Different network protocols have different performance characteristics, which can impact network performance. For example, TCP is a reliable protocol that can guarantee the delivery of data, but it can also result in slower performance due to the overhead required for error checking and retransmission.\n7. Network security: Security measures such as firewalls and encryption can impact network performance, especially if they require significant processing power or introduce additional latency.\n8. Distance: The physical distance between devices on a network can impact network performance, especially for wireless networks where signal strength and interference can affect connectivity and data transfer rates.\n</b></details>\n\n<details>\n<summary>What is APIPA?</summary><br><b>\n\nAPIPA is a set of IP addresses that devices are allocated\nwhen the main DHCP server is not reachable\n\n</b></details>\n\n<details>\n<summary>What IP range does APIPA use?</summary><br><b>\n\nAPIPA uses the IP range: 169.254.0.1 - 169.254.255.254.\n\n</b></details>\n\n#### Control Plane and Data Plane\n\n<details>\n<summary>What does \"control plane\" refer to?</summary><br><b>\n\nThe control plane is a part of the network that decides how to route and forward packets to a different location.\n</b></details>\n\n<details>\n<summary>What does \"data plane\" refer to?</summary><br><b>\n\nThe data plane is a part of the network that actually forwards the data/packets.\n</b></details>\n\n<details>\n<summary>What does \"management plane\" refer to?</summary><br><b>\n\nIt refers to monitoring and management functions.\n</b></details>\n\n<details>\n<summary>To which plane (data, control, ...) does creating routing tables belong to?</summary><br><b>\n\nControl Plane.\n</b></details>\n\n<details>\n<summary>Explain Spanning Tree Protocol (STP).</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is link aggregation? Why is it used?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is Asymmetric Routing? How to deal with it?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What overlay (tunnel) protocols are you familiar with?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is GRE? How does it work?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is VXLAN? How does it work?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is SNAT?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain OSPF.</summary><br><b>\n\n\nOSPF (Open Shortest Path First) is a routing protocol that can be implemented on various types of routers. In general, OSPF is supported on most modern routers, including those from vendors such as Cisco, Juniper, and Huawei. The protocol is designed to work with IP-based networks, including both IPv4 and IPv6. Also, it uses a hierarchical network design, where routers are grouped into areas, with each area having its own topology map and routing table. This design helps to reduce the amount of routing information that needs to be exchanged between routers and improve network scalability.\n\nThe OSPF 4 Types of routers are:\n  * Internal Router\n  * Area Border Routers\n  * Autonomous Systems Boundary Routers\n  * Backbone Routers\n\n  Learn more about OSPF router types: https://www.educba.com/ospf-router-types/\n</b></details>\n\n<details>\n<summary>What is latency?</summary><br><b>\n\t\nLatency is the time taken for information to reach its destination from the source.\n</b></details>\n\n<details>\n<summary>What is bandwidth?</summary><br><b>\n\t\nBandwidth is the capacity of a communication channel to measure how much data the latter can handle over a specific time period. More bandwidth would imply more traffic handling and thus more data transfer.\n</b></details>\n\n<details>\n<summary>What is throughput?</summary><br><b>\n\t\nThroughput refers to the measurement of the real amount of data transferred over a certain period of time across any transmission channel.\n</b></details>\n\n<details>\n<summary>When performing a search query, what is more important, latency or throughput? And how to ensure that we manage global infrastructure?\n</summary><br><b>\n\nLatency. To have good latency, a search query should be forwarded to the closest data center.\n</b></details>\n\n<details>\n<summary>When uploading a video, what is more important, latency or throughput? And how to assure that?</summary><br><b>\n\nThroughput. To have good throughput, the upload stream should be routed to an underutilized link.\n</b></details>\n\n<details>\n<summary>What other considerations (except latency and throughput) are there when forwarding requests?</summary><br><b>\n\n* Keep caches updated (which means the request could be forwarded not to the closest data center)\n</b></details>\n\n<details>\n<summary>Explain Spine & Leaf</summary><br><b>\n\"Spine & Leaf\" is a networking topology commonly used in data center environments to connect multiple switches and manage network traffic efficiently. It is also known as \"spine-leaf\" architecture or \"leaf-spine\" topology. This design provides high bandwidth, low latency, and scalability, making it ideal for modern data centers handling large volumes of data and traffic.\n\nWithin a Spine & Leaf network there are two main tipology of switches:\n\n* Spine Switches: Spine switches are high-performance switches arranged in a spine layer. These switches act as the core of the network and are typically interconnected with each leaf switch. Each spine switch is connected to all the leaf switches in the data center.\n* Leaf Switches: Leaf switches are connected to end devices like servers, storage arrays, and other networking equipment. Each leaf switch is connected to every spine switch in the data center. This creates a non-blocking, full-mesh connectivity between leaf and spine switches, ensuring any leaf switch can communicate with any other leaf switch with maximum throughput.\n\nThe Spine & Leaf architecture has become increasingly popular in data centers due to its ability to handle the demands of modern cloud computing, virtualization, and big data applications, providing a scalable, high-performance, and reliable network infrastructure\n</b></details>\n\n<details>\n<summary>What is Network Congestion? What can cause it?</summary><br><b>\n\nNetwork congestion occurs when there is too much data to transmit on a network and it doesn't have enough capacity to handle the demand. </br>\nThis can lead to increased latency and packet loss. The causes can be multiple, such as high network usage, large file transfers, malware, hardware issues, or network design problems. </br>\nTo prevent network congestion, it's important to monitor your network usage and implement strategies to limit or manage the demand.\n</b></details>\n\n<details>\n<summary>What can you tell me about the UDP packet format? What about the TCP packet format? How is it different?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the exponential backoff algorithm? Where is it used?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Using Hamming code, what would be the code word for the following data word 100111010001101?</summary><br><b>\n\n00110011110100011101\n</b></details>\n\n<details>\n<summary>Give examples of protocols found in the application layer</summary><br><b>\n\n* Hypertext Transfer Protocol (HTTP) - used for the webpages on the internet\n* Simple Mail Transfer Protocol (SMTP) - email transmission\n* Telecommunications Network - (TELNET) - terminal emulation to allow a client access to a telnet server\n* File Transfer Protocol (FTP) - facilitates the transfer of files between any two machines\n* Domain Name System (DNS) - domain name translation\n* Dynamic Host Configuration Protocol (DHCP) - allocates IP addresses, subnet masks, and gateways to hosts\n* Simple Network Management Protocol (SNMP) - gathers data on devices on the network\n</b></details>\n\n<details>\n<summary>Give examples of protocols found in the Network Layer</summary><br><b>\n\n* Internet Protocol (IP) - assists in routing packets from one machine to another\n* Internet Control Message Protocol (ICMP) - lets one know what is going such as error messages and debugging information\n</b></details>\n\n<details>\n<summary>What is HSTS?</summary><br><b>\nHTTP Strict Transport Security is a web server directive that informs user agents and web browsers how to handle its connection through a response header sent at the very beginning and back to the browser. This forces connections over HTTPS encryption, disregarding any script's call to load any resource in that domain over HTTP.\n\nRead more [here](https://www.globalsign.com/en/blog/what-is-hsts-and-how-do-i-use-it#:~:text=HTTP%20Strict%20Transport%20Security%20(HSTS,and%20back%20to%20the%20browser.)\n</b></details>\n\n#### Network - Misc\n\n<details>\n<summary>What is the Internet? Is it the same as the World Wide Web?</summary><br><b>\n\nThe internet refers to a network of networks, transferring huge amounts of data around the globe.<br>\nThe World Wide Web is an application running on millions of servers, on top of the internet, accessed through what is known as the web browser\n</b></details>\n\n<details>\n<summary>What is the ISP?</summary><br><b>\n\nISP (Internet Service Provider) is the local internet company provider.\n</b></details>\n\n## Operating System\n\n### Operating System Exercises\n\n|Name|Topic|Objective & Instructions|Solution|Comments|\n|--------|--------|------|----|----|\n|Fork 101|Fork|[Link](topics/os/fork_101.md)|[Link](topics/os/solutions/fork_101_solution.md)\n|Fork 102|Fork|[Link](topics/os/fork_102.md)|[Link](topics/os/solutions/fork_102_solution.md)\n\n### Operating System - Self Assessment\n\n<details>\n<summary>What is an operating system?</summary><br><b>\n\nFrom the book \"Operating Systems: Three Easy Pieces\":\n\n\"responsible for making it easy to run programs (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that\".\n</b></details>\n\n#### Operating System - Process\n\n<details>\n<summary>Can you explain what is a process?</summary><br><b>\n\nA process is a running program. A program is one or more instructions and the program (or process) is executed by the operating system.\n</b></details>\n\n<details>\n<summary>If you had to design an API for processes in an operating system, what would this API look like?</summary><br><b>\n\nIt would support the following:\n\n* Create - allow to create new processes\n* Delete - allow to remove/destroy processes\n* State - allow to check the state of the process, whether it's running, stopped, waiting, etc.\n* Stop - allow to stop a running process\n</b></details>\n\n<details>\n<summary>How a process is created?</summary><br><b>\n\n* The OS is reading program's code and any additional relevant data\n* Program's code is loaded into the memory or more specifically, into the address space of the process.\n* Memory is allocated for program's stack (aka run-time stack). The stack also initialized by the OS with data like argv, argc and parameters to main()\n* Memory is allocated for program's heap which is required for dynamically allocated data like the data structures linked lists and hash tables\n* I/O initialization tasks are performed, like in Unix/Linux based systems, where each process has 3 file descriptors (input, output and error)\n* OS is running the program, starting from main()\n</b></details>\n\n<details>\n<summary>True or False? The loading of the program into the memory is done eagerly (all at once)</summary><br><b>\n\nFalse. It was true in the past but today's operating systems perform lazy loading, which means only the relevant pieces required for the process to run are loaded first.\n</b></details>\n\n<details>\n<summary>What are different states of a process?</summary><br><b>\n\n* Running - it's executing instructions\n* Ready - it's ready to run, but for different reasons it's on hold\n* Blocked - it's waiting for some operation to complete, for example I/O disk request\n</b></details>\n\n<details>\n<summary>What are some reasons for a process to become blocked?</summary><br><b>\n\n  - I/O operations (e.g. Reading from a disk)\n  - Waiting for a packet from a network\n</b></details>\n\n<details>\n<summary>What is Inter Process Communication (IPC)?</summary><br><b>\n\nInter-process communication (IPC) refers to the mechanisms provided by an operating system that allow processes to manage shared data.\n</b></details>\n\n<details>\n<summary>What is \"time sharing\"?</summary><br><b>\n\nEven when using a system with one physical CPU, it's possible to allow multiple users to work on it and run programs. This is possible with time sharing, where computing resources are shared in a way it seems to the user, the system has multiple CPUs, but in fact it's simply one CPU shared by applying multiprogramming and multi-tasking.\n</b></details>\n\n<details>\n<summary>What is \"space sharing\"?</summary><br><b>\n\nSomewhat the opposite of time sharing. While in time sharing a resource is used for a while by one entity and then the same resource can be used by another resource, in space sharing the space is shared by multiple entities but in a way where it's not being transferred between them.<br>\nIt's used by one entity, until this entity decides to get rid of it. Take for example storage. In storage, a file is yours, until you decide to delete it.\n</b></details>\n\n<details>\n<summary>What component determines which process runs at a given moment in time?</summary><br><b>\n\nCPU scheduler\n</b></details>\n\n#### Operating System - Memory\n\n<details>\n<summary>What is \"virtual memory\" and what purpose does serve?</summary><br><b>\n\nVirtual memory combines your computer's RAM with temporary space on your hard disk. When RAM runs low, virtual memory helps to move data from RAM to a space called a paging file. Moving data to paging file can free up the RAM, so your computer can complete its work. In general, the more RAM your computer has, the faster the programs run.\nhttps://www.minitool.com/lib/virtual-memory.html\n</b></details>\n\n<details>\n<summary>What is demand paging?</summary><br><b>\n\nDemand paging is a memory management technique where pages are loaded into physical memory only when accessed by a process. It optimizes memory usage by loading pages on demand, reducing startup latency and space overhead. However, it introduces some latency when accessing pages for the first time. Overall, it’s a cost-effective approach for managing memory resources in operating systems. \n</b></details>\n\n<details>\n<summary>What is copy-on-write?</summary><br><b>\nCopy-on-write (COW) is a resource management concept, with the goal to reduce unnecessary copying of information. It is a concept, which is implemented for instance within the POSIX fork syscall, which creates a duplicate process of the calling process.\n\nThe idea:\n1. If resources are shared between 2 or more entities (for example shared memory segments between 2 processes), the resources don't need to be copied for every entity, but rather every entity has a READ operation access permission on the shared resource. (the shared segments are marked as read-only) \n(Think of every entity having a pointer to the location of the shared resource, which can be dereferenced to read its value)\n2. If one entity would perform a WRITE operation on a shared resource, a problem would arise, since the resource also would be permanently changed for ALL other entities sharing it.\n(Think of a process modifying some variables on the stack, or allocatingy some data dynamically on the heap, these changes to the shared resource would also apply for ALL other processes, this is definitely an undesirable behaviour)\n3. As a solution only, if a WRITE operation is about to be performed on a shared resource, this resource gets COPIED first and then the changes are applied.\n</b></details>\n\n<details>\n<summary>What is a kernel, and what does it do?</summary><br><b>\n\nThe kernel is part of the operating system and is responsible for tasks like:\n\n  * Allocating memory\n  * Schedule processes\n  * Control CPU\n</b></details>\n\n<details>\n<summary>True or False? Some pieces of the code in the kernel are loaded into protected areas of the memory so applications can't overwrite them.</summary><br><b>\n\nTrue\n</b></details>\n\n<details>\n<summary>What is POSIX?</summary><br><b>\n\nPOSIX (Portable Operating System Interface) is a set of standards that define the interface between a Unix-like operating system and application programs.\n</b></details>\n\n<details>\n<summary>Explain what is Semaphore and what its role in operating systems.</summary><br><b>\n\nA semaphore is a synchronization primitive used in operating systems and concurrent programming to control access to shared resources. It's a variable or abstract data type that acts as a counter or a signaling mechanism for managing access to resources by multiple processes or threads.\n</b></details>\n\n<details>\n<summary>What is cache? What is buffer?</summary><br><b>\n\nCache: Cache is usually used when processes are reading and writing to the disk to make the process faster, by making similar data used by different programs easily accessible.\nBuffer: Reserved place in RAM, which is used to hold data for temporary purposes.\n</b></details>\n\n## Virtualization\n\n<details>\n<summary>What is Virtualization?</summary><br><b>\n\nVirtualization uses software to create an abstraction layer over computer hardware, that allows the hardware elements of a single computer - processors, memory, storage and more - to be divided into multiple virtual computers, commonly called virtual machines (VMs).\n</b></details>\n\n<details>\n<summary>What is a hypervisor?</summary><br><b>\n\nRed Hat: \"A hypervisor is software that creates and runs virtual machines (VMs). A hypervisor, sometimes called a virtual machine monitor (VMM), isolates the hypervisor operating system and resources from the virtual machines and enables the creation and management of those VMs.\"\n\nRead more [here](https://www.redhat.com/en/topics/virtualization/what-is-a-hypervisor)\n</b></details>\n\n<details>\n<summary>What types of hypervisors are there?</summary><br><b>\n\nHosted hypervisors and bare-metal hypervisors.\n</b></details>\n\n<details>\n<summary>What are the advantages and disadvantges of bare-metal hypervisor over a hosted hypervisor?</summary><br><b>\n\nDue to having its own drivers and a direct access to hardware components, a baremetal hypervisor will often have better performances along with stability and scalability.\n\nOn the other hand, there will probably be some limitation regarding loading (any) drivers so a hosted hypervisor will usually benefit from having a better hardware compatibility.\n</b></details>\n\n<details>\n<summary>What types of virtualization are there?</summary><br><b>\n\nOperating system virtualization\nNetwork functions virtualization\nDesktop virtualization\n</b></details>\n\n<details>\n<summary>Is containerization is a type of Virtualization?</summary><br><b>\n\nYes, it's a operating-system-level virtualization, where the kernel is shared and allows to use multiple isolated user-spaces instances.\n</b></details>\n\n<details>\n<summary>How the introduction of virtual machines changed the industry and the way applications were deployed?</summary><br><b>\n\nThe introduction of virtual machines allowed companies to deploy multiple business applications on the same hardware, while each application is separated from each other in secured way, where each is running on its own separate operating system.\n</b></details>\n\n#### Virtual Machines\n\n<details>\n<summary>Do we need virtual machines in the age of containers? Are they still relevant?</summary><br><b>\n\nYes, virtual machines are still relevant even in the age of containers. While containers provide a lightweight and portable alternative to virtual machines, they do have certain limitations. Virtual machines still matter because they offer isolation and security, can run different operating systems, and are good for legacy apps. Containers limitations for example are sharing the host kernel.\n</b></details>\n\n## Prometheus\n\n<details>\n<summary>What is Prometheus? What are some of Prometheus's main features?</summary><br><b>\n\nPrometheus is a popular open-source systems monitoring and alerting toolkit, originally developed at SoundCloud. It is designed to collect and store time-series data, and to allow for querying and analysis of that data using a powerful query language called PromQL. Prometheus is frequently used to monitor cloud-native applications, microservices, and other modern infrastructure.\n\nSome of the main features of Prometheus include:\n\n    1. Data model: Prometheus uses a flexible data model that allows users to organize and label their time-series data in a way that makes sense for their particular use case. Labels are used to identify different dimensions of the data, such as the source of the data or the environment in which it was collected.\n\n    2. Pull-based architecture: Prometheus uses a pull-based model to collect data from targets, meaning that the Prometheus server actively queries its targets for metrics data at regular intervals. This architecture is more scalable and reliable than a push-based model, which would require every target to push data to the server.\n\n    3. Time-series database: Prometheus stores all of its data in a time-series database, which allows users to perform queries over time ranges and to aggregate and analyze their data in various ways. The database is optimized for write-heavy workloads, and can handle a high volume of data with low latency.\n\n    4. Alerting: Prometheus includes a powerful alerting system that allows users to define rules based on their metrics data and to send alerts when certain conditions are met. Alerts can be sent via email, chat, or other channels, and can be customized to include specific details about the problem.\n\n    5. Visualization: Prometheus has a built-in graphing and visualization tool, called PromDash, which allows users to create custom dashboards to monitor their systems and applications. PromDash supports a variety of graph types and visualization options, and can be customized using CSS and JavaScript.\n\nOverall, Prometheus is a powerful and flexible tool for monitoring and analyzing systems and applications, and is widely used in the industry for cloud-native monitoring and observability.\n\n</b></details>\n\n<details>\n<summary>In what scenarios it might be better to NOT use Prometheus?</summary><br><b>\n\nFrom Prometheus documentation: \"if you need 100% accuracy, such as for per-request billing\".\n</b></details>\n\n<details>\n<summary>Describe Prometheus architecture and components</summary><br><b>\n\nThe Prometheus architecture consists of four major components:\n\n    1. Prometheus Server: The Prometheus server is responsible for collecting and storing metrics data. It has a simple built-in storage layer that allows it to store time-series data in a time-ordered database.\n\n    2. Client Libraries: Prometheus provides a range of client libraries that enable applications to expose their metrics data in a format that can be ingested by the Prometheus server. These libraries are available for a range of programming languages, including Java, Python, and Go.\n\n    3. Exporters: Exporters are software components that expose existing metrics from third-party systems and make them available for ingestion by the Prometheus server. Prometheus provides exporters for a range of popular technologies, including MySQL, PostgreSQL, and Apache.\n\n    4. Alertmanager: The Alertmanager component is responsible for processing alerts generated by the Prometheus server. It can handle alerts from multiple sources and provides a range of features for deduplicating, grouping, and routing alerts to appropriate channels.\n\nOverall, the Prometheus architecture is designed to be highly scalable and resilient. The server and client libraries can be deployed in a distributed fashion to support monitoring across large-scale, highly dynamic environments\n</b></details>\n\n<details>\n<summary>Can you compare Prometheus to other solutions like InfluxDB for example?</summary><br><b>\n\nCompared to other monitoring solutions, such as InfluxDB, Prometheus is known for its high performance and scalability. It can handle large volumes of data and can easily be integrated with other tools in the monitoring ecosystem. InfluxDB, on the other hand, is known for its ease of use and simplicity. It has a user-friendly interface and provides easy-to-use APIs for collecting and querying data.\n\nAnother popular solution, Nagios, is a more traditional monitoring system that relies on a push-based model for collecting data. Nagios has been around for a long time and is known for its stability and reliability. However, compared to Prometheus, Nagios lacks some of the more advanced features, such as multi-dimensional data model and powerful query language.\n\nOverall, the choice of a monitoring solution depends on the specific needs and requirements of the organization. While Prometheus is a great choice for large-scale monitoring and alerting, InfluxDB may be a better fit for smaller environments that require ease of use and simplicity. Nagios remains a solid choice for organizations that prioritize stability and reliability over advanced features.\n</b></details>\n\n<details>\n<summary>What is an Alert?</summary><br><b>\nIn Prometheus, an alert is a notification triggered when a specific condition or threshold is met. Alerts can be configured to trigger when certain metrics cross a certain threshold or when specific events occur. Once an alert is triggered, it can be routed to various channels, such as email, pager, or chat, to notify relevant teams or individuals to take appropriate action. Alerts are a critical component of any monitoring system, as they allow teams to proactively detect and respond to issues before they impact users or cause system downtime.\n</b></details>\n\n<details>\n<summary>What is an Instance? What is a Job?</summary><br><b>\n\nIn Prometheus, an instance refers to a single target that is being monitored. For example, a single server or service. A job is a set of instances that perform the same function, such as a set of web servers serving the same application. Jobs allow you to define and manage a group of targets together.\n\nIn essence, an instance is an individual target that Prometheus collects metrics from, while a job is a collection of similar instances that can be managed as a group.\n</b></details>\n\n<details>\n<summary>What core metrics types Prometheus supports?</summary><br><b>\nPrometheus supports several types of metrics, including:\n\n    1. Counter: A monotonically increasing value used for tracking counts of events or samples. Examples include the number of requests processed or the total number of errors encountered.\n\n    2. Gauge: A value that can go up or down, such as CPU usage or memory usage. Unlike counters, gauge values can be arbitrary, meaning they can go up and down based on changes in the system being monitored.\n\n    3. Histogram: A set of observations or events that are divided into buckets based on their value. Histograms help in analyzing the distribution of a metric, such as request latencies or response sizes.\n\n    4. Summary: A summary is similar to a histogram, but instead of buckets, it provides a set of quantiles for the observed values. Summaries are useful for monitoring the distribution of request latencies or response sizes over time.\n\nPrometheus also supports various functions and operators for aggregating and manipulating metrics, such as sum, max, min, and rate. These features make it a powerful tool for monitoring and alerting on system metrics.\n</b></details>\n\n<details>\n<summary>What is an exporter? What is it used for?</summary><br><b>\nThe exporter serves as a bridge between the third-party system or application and Prometheus, making it possible for Prometheus to monitor and collect data from that system or application.\n\nThe exporter acts as a server, listening on a specific network port for requests from Prometheus to scrape metrics. It collects metrics from the third-party system or application and transforms them into a format that can be understood by Prometheus. The exporter then exposes these metrics to Prometheus via an HTTP endpoint, making them available for collection and analysis.\n\nExporters are commonly used to monitor various types of infrastructure components such as databases, web servers, and storage systems. For example, there are exporters available for monitoring popular databases such as MySQL and PostgreSQL, as well as web servers like Apache and Nginx.\n\nOverall, exporters are a critical component of the Prometheus ecosystem, allowing for the monitoring of a wide range of systems and applications, and providing a high degree of flexibility and extensibility to the platform.\n</b></details>\n\n<details>\n<summary>Which Prometheus best practices?</summary><br><b>\nHere are three of them:\n\n    1. Label carefully: Careful and consistent labeling of metrics is crucial for effective querying and alerting. Labels should be clear, concise, and include all relevant information about the metric.\n\n    2. Keep metrics simple: The metrics exposed by exporters should be simple and focus on a single aspect of the system being monitored. This helps avoid confusion and ensures that the metrics are easily understandable by all members of the team.\n\n    3. Use alerting sparingly: While alerting is a powerful feature of Prometheus, it should be used sparingly and only for the most critical issues. Setting up too many alerts can lead to alert fatigue and result in important alerts being ignored. It is recommended to set up only the most important alerts and adjust the thresholds over time based on the actual frequency of alerts.\n</b></details>\n\n<details>\n<summary>How to get total requests in a given period of time?</summary><br><b>\nTo get the total requests in a given period of time using Prometheus, you can use the *sum* function along with the *rate* function. Here is an example query that will give you the total number of requests in the last hour:\n\n```\nsum(rate(http_requests_total[1h]))\n```\nIn this query, *http_requests_total* is the name of the metric that tracks the total number of HTTP requests, and the *rate* function calculates the per-second rate of requests over the last hour. The *sum* function then adds up all of the requests to give you the total number of requests in the last hour.\n\nYou can adjust the time range by changing the duration in the *rate* function. For example, if you wanted to get the total number of requests in the last day, you could change the function to *rate(http_requests_total[1d])*.\n</b></details>\n\n<details>\n<summary>What HA in Prometheus means?</summary><br><b>\n\nHA stands for High Availability. This means that the system is designed to be highly reliable and always available, even in the face of failures or other issues. In practice, this typically involves setting up multiple instances of Prometheus and ensuring that they are all synchronized and able to work together seamlessly. This can be achieved through a variety of techniques, such as load balancing, replication, and failover mechanisms. By implementing HA in Prometheus, users can ensure that their monitoring data is always available and up-to-date, even in the face of hardware or software failures, network issues, or other problems that might otherwise cause downtime or data loss.\n</b></details>\n\n<details>\n<summary>How do you join two metrics?</summary><br><b>\nIn Prometheus, joining two metrics can be achieved using the *join()* function. The *join()* function combines two or more time series based on their label values. It takes two mandatory arguments: *on* and *table*. The on argument specifies the labels to join *on* and the *table* argument specifies the time series to join.\n\nHere's an example of how to join two metrics using the *join()* function:\n\n```\nsum_series(\n  join(\n    on(service, instance) request_count_total,\n    on(service, instance) error_count_total,\n  )\n)\n```\nIn this example, the *join()* function combines the *request_count_total* and *error_count_total* time series based on their *service* and *instance* label values. The *sum_series()* function then calculates the sum of the resulting time series\n</b></details>\n\n<details>\n<summary>How to write a query that returns the value of a label?</summary><br><b>\nTo write a query that returns the value of a label in Prometheus, you can use the *label_values* function. The *label_values* function takes two arguments: the name of the label and the name of the metric.\n\nFor example, if you have a metric called *http_requests_total* with a label called *method*, and you want to return all the values of the *method* label, you can use the following query:\n\n```\nlabel_values(http_requests_total, method)\n```\n\nThis will return a list of all the values for the *method* label in the *http_requests_total* metric. You can then use this list in further queries or to filter your data.\n</b></details>\n\n<details>\n<summary>How do you convert cpu_user_seconds to cpu usage in percentage?</summary><br><b>\nTo convert *cpu_user_seconds* to CPU usage in percentage, you need to divide it by the total elapsed time and the number of CPU cores, and then multiply by 100. The formula is as follows:\n\n```\n100 * sum(rate(process_cpu_user_seconds_total{job=\"<job-name>\"}[<time-period>])) by (instance) / (<time-period> * <num-cpu-cores>)\n```\n\nHere, *<job-name>* is the name of the job you want to query, *<time-period>* is the time range you want to query (e.g. *5m*, *1h*), and *<num-cpu-cores>* is the number of CPU cores on the machine you are querying.\n\nFor example, to get the CPU usage in percentage for the last 5 minutes for a job named *my-job* running on a machine with 4 CPU cores, you can use the following query:\n\n```\n100 * sum(rate(process_cpu_user_seconds_total{job=\"my-job\"}[5m])) by (instance) / (5m * 4)\n```\n</b></details>\n\n## Go\n\n<details>\n<summary>What are some characteristics of the Go programming language?</summary><br><b>\n\n  * Strong and static typing - the type of the variables can't be changed over time and they have to be defined at compile time\n  * Simplicity\n  * Fast compile times\n  * Built-in concurrency\n  * Garbage collected\n  * Platform independent\n  * Compile to standalone binary - anything you need to run your app will be compiled into one binary. Very useful for version management in run-time.\n\nGo also has good community.\n</b></details>\n\n<details>\n<summary>What is the difference between <code>var x int = 2</code> and <code>x := 2</code>?</summary><br><b>\n\nThe result is the same, a variable with the value 2.\n\nWith <code>var x int = 2</code> we are setting the variable type to integer while with <code>x := 2</code> we are letting Go figure out by itself the type.\n</b></details>\n\n<details>\n<summary>True or False? In Go we can redeclare variables and once declared we must use it.</summary>\n\nFalse. We can't redeclare variables but yes, we must used declared variables.\n</b></details>\n\n<details>\n<summary>What libraries of Go have you used?</summary><br><b>\n\nThis should be answered based on your usage but some examples are:\n\n  * fmt - formatted I/O\n</b></details>\n\n<details>\n<summary>What is the problem with the following block of code? How to fix it?\n\n```\nfunc main() {\n    var x float32 = 13.5\n    var y int\n    y = x\n}\n```\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>The following block of code tries to convert the integer 101 to a string but instead we get \"e\". Why is that? How to fix it?\n\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var x int = 101\n    var y string\n    y = string(x)\n    fmt.Println(y)\n}\n```\n</summary><br><b>\n\nIt looks what unicode value is set at 101 and uses it for converting the integer to a string.\nIf you want to get \"101\" you should use the package \"strconv\" and replace <code>y = string(x)</code> with <code>y = strconv.Itoa(x)</code>\n</b></details>\n\n<details>\n<summary>What is wrong with the following code?:\n\n```\npackage main\n\nfunc main() {\n    var x = 2\n    var y = 3\n    const someConst = x + y\n}\n```\n</summary><br><b>\n\nConstants in Go can only be declared using constant expressions.\nBut `x`, `y` and their sum is variable.\n<br>\n<code>const initializer x + y is not a constant</code>\n</b></details>\n\n<details>\n<summary>What will be the output of the following block of code?:\n\n```go\npackage main\n\nimport \"fmt\"\n\nconst (\n\tx = iota\n\ty = iota\n)\nconst z = iota\n\nfunc main() {\n\tfmt.Printf(\"%v\\n\", x)\n\tfmt.Printf(\"%v\\n\", y)\n\tfmt.Printf(\"%v\\n\", z)\n}\n```\n</summary><br><b>\n\nGo's iota identifier is used in const declarations to simplify definitions of incrementing numbers. Because it can be used in expressions, it provides a generality beyond that of simple enumerations.\n<br>\n`x` and `y` in the first iota group, `z` in the second.\n<br>\n[Iota page in Go Wiki](https://github.com/golang/go/wiki/Iota)\n</b></details>\n\n<details>\n<summary>What _ is used for in Go?</summary><br><b>\n\nIt avoids having to declare all the variables for the returns values.\nIt is called the [blank identifier](https://golang.org/doc/effective_go.html#blank).\n<br>\n[answer in SO](https://stackoverflow.com/questions/27764421/what-is-underscore-comma-in-a-go-declaration#answer-27764432)\n</b></details>\n\n<details>\n<summary>What will be the output of the following block of code?:\n\n```go\npackage main\n\nimport \"fmt\"\n\nconst (\n\t_ = iota + 3\n\tx\n)\n\nfunc main() {\n\tfmt.Printf(\"%v\\n\", x)\n}\n```\n</summary><br><b>\n\nSince the first iota is declared with the value `3` (` + 3`), the next one has the value `4`\n</b></details>\n\n<details>\n<summary>What will be the output of the following block of code?:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar wg sync.WaitGroup\n\n\twg.Add(1)\n\tgo func() {\n\t\ttime.Sleep(time.Second * 2)\n\t\tfmt.Println(\"1\")\n\t\twg.Done()\n\t}()\n\n\tgo func() {\n\t\tfmt.Println(\"2\")\n\t}()\n\n\twg.Wait()\n\tfmt.Println(\"3\")\n}\n```\n</summary><br><b>\n\nOutput: 2 1 3\n\n[Aritcle about sync/waitgroup](https://tutorialedge.net/golang/go-waitgroup-tutorial/)\n\n[Golang package sync](https://golang.org/pkg/sync/)\n</b></details>\n\n<details>\n<summary>What will be the output of the following block of code?:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc mod1(a []int) {\n\tfor i := range a {\n\t\ta[i] = 5\n\t}\n\n\tfmt.Println(\"1:\", a)\n}\n\nfunc mod2(a []int) {\n\ta = append(a, 125) // !\n\n\tfor i := range a {\n\t\ta[i] = 5\n\t}\n\n\tfmt.Println(\"2:\", a)\n}\n\nfunc main() {\n\ts1 := []int{1, 2, 3, 4}\n\tmod1(s1)\n\tfmt.Println(\"1:\", s1)\n\n\ts2 := []int{1, 2, 3, 4}\n\tmod2(s2)\n\tfmt.Println(\"2:\", s2)\n}\n```\n</summary><br><b>\n\nOutput: <code><br>\n1 [5 5 5 5]<br>\n1 [5 5 5 5]<br>\n2 [5 5 5 5 5]<br>\n2 [1 2 3 4]<br>\n</code>\n\nIn `mod1` a is link, and when we're using `a[i]`, we're changing `s1` value to.\nBut in `mod2`, `append` creates new slice, and we're changing only `a` value, not `s2`.\n\n[Aritcle about arrays](https://golangbot.com/arrays-and-slices/),\n[Blog post about `append`](https://blog.golang.org/slices)\n</b></details>\n\n<details>\n<summary>What will be the output of the following block of code?:\n\n```go\npackage main\n\nimport (\n\t\"container/heap\"\n\t\"fmt\"\n)\n\n// An IntHeap is a min-heap of ints.\ntype IntHeap []int\n\nfunc (h IntHeap) Len() int           { return len(h) }\nfunc (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }\nfunc (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }\n\nfunc (h *IntHeap) Push(x interface{}) {\n\t// Push and Pop use pointer receivers because they modify the slice's length,\n\t// not just its contents.\n\t*h = append(*h, x.(int))\n}\n\nfunc (h *IntHeap) Pop() interface{} {\n\told := *h\n\tn := len(old)\n\tx := old[n-1]\n\t*h = old[0 : n-1]\n\treturn x\n}\n\nfunc main() {\n\th := &IntHeap{4, 8, 3, 6}\n\theap.Init(h)\n\theap.Push(h, 7)\n\n  fmt.Println((*h)[0])\n}\n```\n</summary><br><b>\n\nOutput: 3\n\n[Golang container/heap package](https://golang.org/pkg/container/heap/)\n</b></details>\n\n## Mongo\n\n<details>\n<summary>What are the advantages of MongoDB? Or in other words, why choosing MongoDB and not other implementation of NoSQL?</summary><br><b>\n\nMongoDB advantages are as following:\n- Schemaless\n- Easy to scale-out\n- No complex joins\n- Structure of a single object is clear\n\n</b></details>\n\n<details>\n<summary>What is the difference between SQL and NoSQL?</summary><br><b>\n\nThe main difference is that SQL databases are structured (data is stored in the form of\ntables with rows and columns - like an excel spreadsheet table) while NoSQL is\nunstructured, and the data storage can vary depending on how the NoSQL DB is set up, such\nas key-value pair, document-oriented, etc.\n</b></details>\n\n<details>\n<summary>In what scenarios would you prefer to use NoSQL/Mongo over SQL?</summary><br><b>\n\n  * Heterogeneous data which changes often\n  * Data consistency and integrity is not top priority\n  * Best if the database needs to scale rapidly\n</b></details>\n\n<details>\n<summary>What is a document? What is a collection?</summary><br><b>\n\n  * A document is a record in MongoDB, which is stored in BSON (Binary JSON) format and is the basic unit of data in MongoDB.\n  * A collection is a group of related documents stored in a single database in MongoDB.\n</b></details>\n\n<details>\n<summary>What is an aggregator?</summary><br><b>\n\n  * An aggregator is a framework in MongoDB that performs operations on a set of data to return a single computed result.\n</b></details>\n\n<details>\n<summary>What is better? Embedded documents or referenced?</summary><br><b>\n\n  * There is no definitive answer to which is better, it depends on the specific use case and requirements. Some explanations : Embedded documents provide atomic updates, while referenced documents allow for better normalization.\n</b></details>\n\n<details>\n<summary>Have you performed data retrieval optimizations in Mongo? If not, can you think about ways to optimize a slow data retrieval?</summary><br><b>\n\n  * Some ways to optimize data retrieval in MongoDB are: indexing, proper schema design, query optimization and database load balancing.\n</b></details>\n\n##### Queries\n\n<details>\n<summary>Explain this query: <code>db.books.find({\"name\": /abc/})</code></summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain this query: <code>db.books.find().sort({x:1})</code></summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the difference between find() and find_one()?</code></summary><br><b>\n\t\n  * `find()` returns all documents that match the query conditions.\n  * find_one() returns only one document that matches the query conditions (or null if no match is found).\n</b></details>\n\n<details>\n<summary>How can you export data from Mongo DB?</code></summary><br><b>\n\n* mongoexport\n* programming languages\n</b></details>\n\n## SQL\n\n### SQL Exercises\n\n|Name|Topic|Objective & Instructions|Solution|Comments|\n|--------|--------|------|----|----|\n| Functions vs. Comparisons | Query Improvements | [Exercise](topics/sql/improve_query.md) | [Solution](topics/sql/solutions/improve_query.md)\n\n### SQL Self Assessment\n\n<details>\n<summary>What is SQL?</summary><br><b>\n\nSQL (Structured Query Language) is a standard language for relational databases (like MySQL, MariaDB, ...).<br>\nIt's used for reading, updating, removing and creating data in a relational database.\n</b></details>\n\n<details>\n<summary>How is SQL Different from NoSQL</summary><br><b>\n\nThe main difference is that SQL databases are structured (data is stored in the form of\ntables with rows and columns - like an excel spreadsheet table) while NoSQL is\nunstructured, and the data storage can vary depending on how the NoSQL DB is set up, such\nas key-value pair, document-oriented, etc.\n</b></details>\n\n<details>\n<summary>When is it best to use SQL? NoSQL?</summary><br><b>\n\nSQL - Best used when data integrity is crucial. SQL is typically implemented with many\nbusinesses and areas within the finance field due to it's ACID compliance.\n\nNoSQL - Great if you need to scale things quickly. NoSQL was designed with web applications\nin mind, so it works great if you need to quickly spread the same information around to\nmultiple servers\n\nAdditionally, since NoSQL does not adhere to the strict table with columns and rows structure\nthat Relational Databases require, you can store different data types together.\n</b></details>\n\n##### Practical SQL - Basics\n\nFor these questions, we will be using the Customers and Orders tables shown below:\n\n**Customers**\n\nCustomer_ID | Customer_Name | Items_in_cart | Cash_spent_to_Date\n------------ | ------------- | ------------- | -------------\n100204 | John Smith | 0 | 20.00\n100205 | Jane Smith | 3 | 40.00\n100206 | Bobby Frank | 1 | 100.20\n\n**ORDERS**\n\nCustomer_ID | Order_ID | Item | Price | Date_sold\n------------ | ------------- | ------------- | ------------- | -------------\n100206 | A123 | Rubber Ducky | 2.20 | 2019-09-18\n100206 | A123 | Bubble Bath | 8.00 | 2019-09-18\n100206 | Q987 | 80-Pack TP | 90.00 | 2019-09-20\n100205 | Z001 | Cat Food - Tuna Fish | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Chicken | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Beef | 10.00 | 2019-08-05\n100205 | Z001 | Cat Food - Kitty quesadilla | 10.00 | 2019-08-05\n100204 | X202 | Coffee | 20.00 | 2019-04-29\n\n<details>\n<summary>How would I select all fields from this table?</summary><br><b>\n\nSelect * <br>\nFrom Customers;\n</b></details>\n\n<details>\n<summary>How many items are in John's cart?</summary><br><b>\n\nSelect Items_in_cart <br>\nFrom Customers <br>\nWhere Customer_Name = \"John Smith\";\n</b></details>\n\n<details>\n<summary>What is the sum of all the cash spent across all customers?</summary><br><b>\n\nSelect SUM(Cash_spent_to_Date) as SUM_CASH <br>\nFrom Customers;\n</b></details>\n\n<details>\n<summary>How many people have items in their cart?</summary><br><b>\n\nSelect count(1) as Number_of_People_w_items <br>\nFrom Customers <br>\nwhere Items_in_cart > 0;\n</b></details>\n\n<details>\n<summary>How would you join the customer table to the order table?</summary><br><b>\n\nYou would join them on the unique key. In this case, the unique key is Customer_ID in\nboth the Customers table and Orders table\n</b></details>\n\n<details>\n<summary>How would you show which customer ordered which items?</summary><br><b>\n\nSelect c.Customer_Name, o.Item <br>\nFrom Customers c <br>\nLeft Join Orders o <br>\n  On c.Customer_ID = o.Customer_ID;\n\n</b></details>\n\n<details>\n<summary>Using a with statement, how would you show who ordered cat food, and the total amount of money spent?</summary><br><b>\n\nwith cat_food as ( <br>\nSelect Customer_ID, SUM(Price) as TOTAL_PRICE <br>\nFrom Orders <br>\nWhere Item like \"%Cat Food%\" <br>\nGroup by Customer_ID <br>\n) <br>\nSelect Customer_name, TOTAL_PRICE <br>\nFrom Customers c <br>\nInner JOIN cat_food f <br>\n  ON c.Customer_ID = f.Customer_ID <br>\nwhere c.Customer_ID in (Select Customer_ID from cat_food);\n\nAlthough this was a simple statement, the \"with\" clause really shines when\na complex query needs to be run on a table before joining to another. With statements are nice,\nbecause you create a pseudo temp when running your query, instead of creating a whole new table.\n\nThe Sum of all the purchases of cat food weren't readily available, so we used a with statement to create\nthe pseudo table to retrieve the sum of the prices spent by each customer, then join the table normally.\n</b></details>\n\n<details>\n<summary>Which of the following queries would you use?\n\n```\nSELECT count(*)                             SELECT count(*)\nFROM shawarma_purchases                     FROM shawarma_purchases\nWHERE                               vs.     WHERE\n  YEAR(purchased_at) == '2017'              purchased_at >= '2017-01-01' AND\n                                            purchased_at <= '2017-31-12'\n```\n</summary><br><b>\n\n```\nSELECT count(*)\nFROM shawarma_purchases\nWHERE\n  purchased_at >= '2017-01-01' AND\n  purchased_at <= '2017-31-12'\n```\n\nWhen you use a function (`YEAR(purchased_at)`) it has to scan the whole database as opposed to using indexes and basically the column as it is, in its natural state.\n</b></details>\n\n## OpenStack\n\n<details>\n<summary>What components/projects of OpenStack are you familiar with?</summary><br><b>\nI’m most familiar with several core OpenStack components:\n\n- Nova for compute resource provisioning, including VM lifecycle management.\n- Neutron for networking, focusing on creating and managing networks, subnets, and routers.\n- Cinder for block storage, used to attach and manage storage volumes.\n- Keystone for identity services, handling authentication and authorization.\n\nI’ve implemented these in past projects, configuring them for scalability and security to support multi-tenant environments.\n \n</b></details>\n\n<details>\n<summary>Can you tell me what each of the following services/projects is responsible for?:\n\n  - Nova\n  - Neutron\n  - Cinder\n  - Glance\n  - Keystone</summary><br><b>\n\n  * Nova - Manage virtual instances\n  * Neutron - Manage networking by providing Network as a service (NaaS)\n  * Cinder - Block Storage\n  * Glance - Manage images for virtual machines and containers (search, get and register)\n  * Keystone - Authentication service across the cloud\n</b></details>\n\n<details>\n<summary>Identify the service/project used for each of the following:\n\n  * Copy or snapshot instances\n  * GUI for viewing and modifying resources\n  * Block Storage\n  * Manage virtual instances\n</summary><br><b>\n\n  * Glance - Images Service. Also used for copying or snapshot instances\n  * Horizon - GUI for viewing and modifying resources\n  * Cinder - Block Storage\n  * Nova - Manage virtual instances\n</b></details>\n\n<details>\n<summary>What is a tenant/project?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Determine true or false:\n\n  * OpenStack is free to use\n  * The service responsible for networking is Glance\n  * The purpose of tenant/project is to share resources between different projects and users of OpenStack</summary><br><b>\n</b></details>\n\n<details>\n<summary>Describe in detail how you bring up an instance with a floating IP</summary><br><b>\n</b></details>\n\n<details>\n<summary>You get a call from a customer saying: \"I can ping my instance but can't connect (ssh) it\". What might be the problem?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What types of networks OpenStack supports?</summary><br><b>\n</b></details>\n\n<details>\n<summary>How do you debug OpenStack storage issues? (tools, logs, ...)</summary><br><b>\n</b></details>\n\n<details>\n<summary>How do you debug OpenStack compute issues? (tools, logs, ...)</summary><br><b>\n</b></details>\n\n#### OpenStack Deployment & TripleO\n\n<details>\n<summary>Have you deployed OpenStack in the past? If yes, can you describe how you did it?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Are you familiar with TripleO? How is it different from Devstack or Packstack?</summary><br><b>\n\nYou can read about TripleO right [here](https://docs.openstack.org/tripleo-docs/latest)\n</b></details>\n\n#### OpenStack Compute\n\n<details>\n<summary>Can you describe Nova in detail?</summary><br><b>\n\n  * Used to provision and manage virtual instances\n  * It supports Multi-Tenancy in different levels - logging, end-user control, auditing, etc.\n  * Highly scalable\n  * Authentication can be done using internal system or LDAP\n  * Supports multiple types of block storage\n  * Tries to be hardware and hypervisor agnostice\n</b></details>\n\n<details>\n<summary>What do you know about Nova architecture and components?</summary><br><b>\n\n  * nova-api - the server which serves metadata and compute APIs\n  * the different Nova components communicate by using a queue (Rabbitmq usually) and a database\n  * a request for creating an instance is inspected by nova-scheduler which determines where the instance will be created and running\n  * nova-compute is the component responsible for communicating with the hypervisor for creating the instance and manage its lifecycle\n</b></details>\n\n#### OpenStack Networking (Neutron)\n\n<details>\n<summary>Explain Neutron in detail</summary><br><b>\n\n  * One of the core component of OpenStack and a standalone project\n  * Neutron focused on delivering networking as a service\n  * With Neutron, users can set up networks in the cloud and configure and manage a variety of network services\n  * Neutron interacts with:\n      * Keystone - authorize API calls\n      * Nova - nova communicates with neutron to plug NICs into a network\n      * Horizon - supports networking entities in the dashboard and also provides topology view which includes networking details\n</b></details>\n\n<details>\n<summary>Explain each of the following components:\n\n  - neutron-dhcp-agent\n  - neutron-l3-agent\n  - neutron-metering-agent\n  - neutron-*-agtent\n  - neutron-server</summary><br><b>\n\n\n  * neutron-l3-agent - L3/NAT forwarding (provides external network access for VMs for example)\n  * neutron-dhcp-agent - DHCP services\n  * neutron-metering-agent - L3 traffic metering\n  * neutron-*-agtent - manages local vSwitch configuration on each compute (based on chosen plugin)\n  * neutron-server - exposes networking API and passes requests to other plugins if required\n</b></details>\n\n<details>\n<summary>Explain these network types:\n\n  - Management Network\n  - Guest Network\n  - API Network\n  - External Network</summary><br><b>\n\n  * Management Network - used for internal communication between OpenStack components. Any IP address in this network is accessible only within the datacetner\n  * Guest Network - used for communication between instances/VMs\n  * API Network - used for services API communication. Any IP address in this network is publicly accessible\n  * External Network - used for public communication. Any IP address in this network is accessible by anyone on the internet\n</b></details>\n\n<details>\n<summary>In which order should you remove the following entities:\n\n  * Network\n  * Port\n  * Router\n  * Subnet</summary><br><b>\n\n  - Port\n  - Subnet\n  - Router\n  - Network\n\nThere are many reasons for that. One for example: you can't remove router if there are active ports assigned to it.\n</b></details>\n\n<details>\n<summary>What is a provider network?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What components and services exist for L2 and L3?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the ML2 plug-in? Explain its architecture</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the L2 agent? How does it works and what is it responsible for?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the L3 agent? How does it works and what is it responsible for?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain what the Metadata agent is responsible for</summary><br><b>\n</b></details>\n\n<details>\n<summary>What networking entities Neutron supports?</summary><br><b>\n</b></details>\n\n<details>\n<summary>How do you debug OpenStack networking issues? (tools, logs, ...)</summary><br><b>\n</b></details>\n\n#### OpenStack - Glance\n\n<details>\n<summary>Explain Glance in detail</summary><br><b>\n\n  * Glance is the OpenStack image service\n  * It handles requests related to instances disks and images\n  * Glance also used for creating snapshots for quick instances backups\n  * Users can use Glance to create new images or upload existing ones\n</b></details>\n\n<details>\n<summary>Describe Glance architecture</summary><br><b>\n\n  * glance-api - responsible for handling image API calls such as retrieval and storage. It consists of two APIs: 1. registry-api - responsible for internal requests 2. user API - can be accessed publicly\n  * glance-registry - responsible for handling image metadata requests (e.g. size, type, etc). This component is private which means it's not available publicly\n  * metadata definition service - API for custom metadata\n  * database - for storing images metadata\n  * image repository - for storing images. This can be a filesystem, swift object storage, HTTP, etc.\n</b></details>\n\n#### OpenStack - Swift\n\n<details>\n<summary>Explain Swift in detail</summary><br><b>\n\n  * Swift is Object Store service and is an highly available, distributed and consistent store designed for storing a lot of data\n  * Swift is distributing data across multiple servers while writing it to multiple disks\n  * One can choose to add additional servers to scale the cluster. All while swift maintaining integrity of the information and data replications.\n</b></details>\n\n<details>\n<summary>Can users store by default an object of 100GB in size?</summary><br><b>\n\nNot by default. Object Storage API limits the maximum to 5GB per object but it can be adjusted.\n</b></details>\n\n<details>\n<summary>Explain the following in regards to Swift:\n\n  * Container\n  * Account\n  * Object\n</summary><br><b>\n\n  - Container - Defines a namespace for objects.\n  - Account - Defines a namespace for containers\n  - Object - Data content (e.g. image, document, ...)\n</b></details>\n\n<details>\n<summary>True or False? there can be two objects with the same name in the same container but not in two different containers</summary><br><b>\n\nFalse. Two objects can have the same name if they are in different containers.\n</b></details>\n\n#### OpenStack - Cinder\n\n<details>\n<summary>Explain Cinder in detail</summary><br><b>\n\n  * Cinder is OpenStack Block Storage service\n  * It basically provides used with storage resources they can consume with other services such as Nova\n  * One of the most used implementations of storage supported by Cinder is LVM\n  * From user perspective this is transparent which means the user doesn't know where, behind the scenes, the storage is located or what type of storage is used\n</b></details>\n\n<details>\n<summary>Describe Cinder's components</summary><br><b>\n\n  * cinder-api - receives API requests\n  * cinder-volume - manages attached block devices\n  * cinder-scheduler - responsible for storing volumes\n</b></details>\n\n#### OpenStack - Keystone\n\n<details>\n<summary>Can you describe the following concepts in regards to Keystone?\n\n  - Role\n  - Tenant/Project\n  - Service\n  - Endpoint\n  - Token\n</summary><br><b>\n\n  - Role - A list of rights and privileges determining what a user or a project can perform\n  - Tenant/Project - Logical representation of a group of resources isolated from other groups of resources. It can be an account, organization, ...\n  - Service - An endpoint which the user can use for accessing different resources\n  - Endpoint - a network address which can be used to access a certain OpenStack service\n  - Token - Used for access resources while describing which resources can be accessed by using a scope\n</b></details>\n\n<details>\n<summary>What are the properties of a service? In other words, how a service is identified?</summary><br><b>\n\nUsing:\n  - Name\n  - ID number\n  - Type\n  - Description\n</b></details>\n\n<details>\n<summary>Explain the following:\n  - PublicURL\n  - InternalURL\n  - AdminURL</summary><br><b>\n\n  - PublicURL - Publicly accessible through public internet\n  - InternalURL - Used for communication between services\n  - AdminURL - Used for administrative management\n</b></details>\n\n<details>\n<summary>What is a service catalog?</summary><br><b>\n\nA list of services and their endpoints\n</b></details>\n\n#### OpenStack Advanced - Services\n\n<details>\n<summary>Describe each of the following services\n\n  * Swift\n  * Sahara\n  * Ironic\n  * Trove\n  * Aodh\n  * Ceilometer\n</summary><br><b>\n\n  * Swift - highly available, distributed, eventually consistent object/blob store\n  * Sahara - Manage Hadoop Clusters\n  * Ironic - Bare Metal Provisioning\n  * Trove - Database as a service that runs on OpenStack\n  * Aodh - Alarms Service\n  * Ceilometer - Track and monitor usage\n</b></details>\n\n<details>\n<summary>Identify the service/project used for each of the following:\n\n  * Database as a service which runs on OpenStack\n  * Bare Metal Provisioning\n  * Track and monitor usage\n  * Alarms Service\n  * Manage Hadoop Clusters\n  * highly available, distributed, eventually consistent object/blob store\n</summary><br><b>\n\n  * Database as a service which runs on OpenStack - Trove\n  * Bare Metal Provisioning - Ironic\n  * Track and monitor usage - Ceilometer\n  * Alarms Service - Aodh\n  * Manage Hadoop Clusters\n  * Manage Hadoop Clusters - Sahara\n  * highly available, distributed, eventually consistent object/blob store - Swift\n</b></details>\n\n#### OpenStack Advanced - Keystone\n\n<details>\n<summary>Can you describe Keystone service in detail?</summary><br><b>\n\n  * You can't have OpenStack deployed without Keystone\n  * It Provides identity, policy and token services\n    * The authentication provided is for both users and services\n    * The authorization supported is token-based and user-based.\n  * There is a policy defined based on RBAC stored in a JSON file and each line in that file defines the level of access to apply\n</b></details>\n\n<details>\n<summary>Describe Keystone architecture</summary><br><b>\n\n  * There is a service API and admin API through which Keystone gets requests\n  * Keystone has four backends:\n    * Token Backend - Temporary Tokens for users and services\n    * Policy Backend - Rules management and authorization\n    * Identity Backend - users and groups (either standalone DB, LDAP, ...)\n    * Catalog Backend - Endpoints\n  * It has pluggable environment where you can integrate with:\n    * LDAP\n    * KVS (Key Value Store)\n    * SQL\n    * PAM\n    * Memcached\n</b></details>\n\n<details>\n<summary>Describe the Keystone authentication process</summary><br><b>\n\n  * Keystone gets a call/request and checks whether it's from an authorized user, using username, password and authURL\n  * Once confirmed, Keystone provides a token.\n  * A token contains a list of user's projects so there is no to authenticate every time and a token can submitted instead\n</b></details>\n\n#### OpenStack Advanced - Compute (Nova)\n\n<details>\n<summary>What each of the following does?:\n\n  * nova-api\n  * nova-compuate\n  * nova-conductor\n  * nova-cert\n  * nova-consoleauth\n  * nova-scheduler\n</summary><br><b>\n\n  * nova-api - responsible for managing requests/calls\n  * nova-compute - responsible for managing instance lifecycle\n  * nova-conductor - Mediates between nova-compute and the database so nova-compute doesn't access it directly\n</b></details>\n\n<details>\n<summary>What types of Nova proxies are you familiar with?</summary><br><b>\n\n  * Nova-novncproxy - Access through VNC connections\n  * Nova-spicehtml5proxy - Access through SPICE\n  * Nova-xvpvncproxy - Access through a VNC connection\n</b></details>\n\n#### OpenStack Advanced - Networking (Neutron)\n\n<details>\n<summary>Explain BGP dynamic routing</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the role of network namespaces in OpenStack?</summary><br><b>\n</b></details>\n\n#### OpenStack Advanced - Horizon\n\n<details>\n<summary>Can you describe Horizon in detail?</summary><br><b>\n\n  * Django-based project focusing on providing an OpenStack dashboard and the ability to create additional customized dashboards\n  * You can use it to access the different OpenStack services resources - instances, images, networks, ...\n    * By accessing the dashboard, users can use it to list, create, remove and modify the different resources\n  * It's also highly customizable and you can modify or add to it based on your needs\n</b></details>\n\n<details>\n<summary>What can you tell about Horizon architecture?</summary><br><b>\n\n  * API is backward compatible\n  * There are three type of dashboards: user, system and settings\n  * It provides core support for all OpenStack core projects such as Neutron, Nova, etc. (out of the box, no need to install extra packages or plugins)\n  * Anyone can extend the dashboards and add new components\n  * Horizon provides templates and core classes from which one can build its own dashboard\n</b></details>\n\n## Puppet\n\n<details>\n<summary>What is Puppet? How does it works?</summary><br><b> \n\n  * Puppet is a configuration management tool ensuring that all systems are configured to a desired and predictable state.\n</b></details>\n<details>\n<summary>Explain Puppet architecture</summary><br><b>\n\n  * Puppet has a primary-secondary node architecture. The clients are distributed across the network and communicate with the primary-secondary environment where Puppet modules are present. The client agent sends a certificate with its ID to the server; the server then signs that certificate and sends it back to the client. This authentication allows for secure and verifiable communication between the client and the master. \n</b></details>\n\n<details>\n<summary>Can you compare Puppet to other configuration management tools? Why did you chose to use Puppet?</summary><br><b>\n\n  * Puppet is often compared to other configuration management tools like Chef, Ansible, SaltStack, and cfengine. The choice to use Puppet often depends on an organization's needs, such as ease of use, scalability, and community support.\n</b></details>\n\n<details>\n<summary>Explain the following:\n\n  * Module\n  * Manifest\n  * Node\n</summary><br><b>\n  \n  * Modules - are a collection of manifests, templates, and files\n  * Manifests - are the actual codes for configuring the clients\n  * Node - allows you to assign specific configurations to specific nodes\n</b></details>\n\n<details>\n<summary>Explain Facter</summary><br><b>\n\n  * Facter is a standalone tool in Puppet that collects information about a system and its configuration, such as the operating system, IP addresses, memory, and network interfaces. This information can be used in Puppet manifests to make decisions about how resources should be managed, and to customize the behavior of Puppet based on the characteristics of the system. Facter is integrated into Puppet, and its facts can be used within Puppet manifests to make decisions about resource management.\n</b></details>\n\n<details>\n<summary>What is MCollective?</summary><br><b>\n\n  * MCollective is a middleware system that integrates with Puppet to provide orchestration, remote execution, and parallel job execution capabilities.\n</b></details>\n\n<details>\n<summary>Do you have experience with writing modules? Which module have you created and for what?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain what is Hiera</summary><br><b>\n\n  * Hiera is a hierarchical data store in Puppet that is used to separate data from code, allowing data to be more easily separated, managed, and reused.\n</b></details>\n\n## Elastic\n\n<details>\n<summary>What is the Elastic Stack?</summary><br><b>\n\nThe Elastic Stack consists of:\n\n  * Elasticsearch\n  * Kibana\n  * Logstash\n  * Beats\n  * Elastic Hadoop\n  * APM Server\n\nElasticsearch, Logstash and Kibana are also known as the ELK stack.\n</b></details>\n\n<details>\n<summary>Explain what is Elasticsearch</summary><br><b>\n\nFrom the official [docs](https://www.elastic.co/guide/en/elasticsearch/reference/current/documents-indices.html):\n\n\"Elasticsearch is a distributed document store. Instead of storing information as rows of columnar data, Elasticsearch stores complex data structures that have been serialized as JSON documents\"\n</b></details>\n\n<details>\n<summary>What is Logstash?</summary><br><b>\n\t\nFrom the [blog](https://logit.io/blog/post/the-top-50-elk-stack-and-elasticsearch-interview-questions):\n\n\"Logstash is a powerful, flexible pipeline that collects, enriches and transports data. It works as an extract, transform & load (ETL) tool for collecting log messages.\"\n</b></details>\n\n<details>\n<summary>Explain what beats are</summary><br><b>\n\nBeats are lightweight data shippers. These data shippers installed on the client where the data resides.\nExamples of beats: Filebeat, Metricbeat, Auditbeat. There are much more.<br>\n</b></details>\n\n<details>\n<summary>What is Kibana?</summary><br><b>\n\nFrom the official docs:\n\n\"Kibana is an open source analytics and visualization platform designed to work with Elasticsearch. You use Kibana to search, view, and interact with data stored in Elasticsearch indices. You can easily perform advanced data analysis and visualize your data in a variety of charts, tables, and maps.\"\n</b></details>\n\n<details>\n<summary>Describe what happens from the moment an app logged some information until it's displayed to the user in a dashboard when the Elastic stack is used</summary><br><b>\n\nThe process may vary based on the chosen architecture and the processing you may want to apply to the logs. One possible workflow is:\n\n1. The data logged by the application is picked by filebeat and sent to logstash\n2. Logstash process the log based on the defined filters. Once done, the output is sent to Elasticsearch\n2. Elasticsearch stores the document it got and the document is indexed for quick future access\n4. The user creates visualizations in Kibana which based on the indexed data\n5. The user creates a dashboard which composed out of the visualization created in the previous step\n</b></details>\n\n##### Elasticsearch\n\n<details>\n<summary>What is a data node?</summary><br><b>\n\nThis is where data is stored and also where different processing takes place (e.g. when you search for a data).\n</b></details>\n\n<details>\n<summary>What is a master node?</summary><br><b>\n\nPart of a master node responsibilities:\n  * Track the status of all the nodes in the cluster\n  * Verify replicas are working and the data is available from every data node.\n  * No hot nodes (no data node that works much harder than other nodes)\n\nWhile there can be multiple master nodes in reality only of them is the elected master node.\n</b></details>\n\n<details>\n<summary>What is an ingest node?</summary><br><b>\n\nA node which responsible for processing the data according to ingest pipeline. In case you don't need to use \nlogstash then this node can receive data from beats and process it, similarly to how it can be processed \nin Logstash.\n</b></details>\n\n<details>\n<summary>What is Coordinating only node?</summary><br><b>\n\nFrom the official docs:\n\nCoordinating only nodes can benefit large clusters by offloading the coordinating node role from data and master-eligible nodes. They join the cluster and receive the full cluster state, like every other node, and they use the cluster state to route requests directly to the appropriate place(s).\n\n</b></details>\n\n<details>\n<summary>How data is stored in Elasticsearch?</summary><br><b>\n\n* Data is stored in an index\n* The index is spread across the cluster using shards\n</b></details>\n\n<details>\n<summary>What is an Index?</summary><br><b>\n\nIndex in Elasticsearch is in most cases compared to a whole database from the SQL/NoSQL world.<br>\nYou can choose to have one index to hold all the data of your app or have multiple indices where each index holds different type of your app (e.g. index for each service your app is running).\n\nThe official docs also offer a great explanation (in general, it's really good documentation, as every project should have):\n\n\"An index can be thought of as an optimized collection of documents and each document is a collection of fields, which are the key-value pairs that contain your data\"\n</b></details>\n\n<details>\n<summary>Explain Shards</summary><br><b>\n\nAn index is split into shards and documents are hashed to a particular shard. Each shard may be on a different node in a cluster and each one of the shards is a self contained index.<br>\nThis allows Elasticsearch to scale to an entire cluster of servers.\n</b></details>\n\n<details>\n<summary>What is an Inverted Index?</summary><br><b>\n\nFrom the official docs:\n\n\"An inverted index lists every unique word that appears in any document and identifies all of the documents each word occurs in.\"\n</b></details>\n\n<details>\n<summary>What is a Document?</summary><br><b>\n\nContinuing with the comparison to SQL/NoSQL a Document in Elasticsearch is a row in table in the case of SQL or a document in a collection in the case of NoSQL.\nAs in NoSQL a document is a JSON object which holds data on a unit in your app. What is this unit depends on the your app. If your app related to book then each document describes a book. If you are app is about shirts then each document is a shirt.\n</b></details>\n\n<details>\n<summary>You check the health of your elasticsearch cluster and it's red. What does it mean? What can cause the status to be yellow instead of green?</summary><br><b>\n\nRed means some data is unavailable in your cluster. Some shards of your indices are unassigned. \nThere are some other states for the cluster.\nYellow means that you have unassigned shards in the cluster. You can be in this state if you have single node and your indices have replicas.\nGreen means that all shards in the cluster are assigned to nodes and your cluster is healthy. \n</b></details>\n\n<details>\n<summary>True or False? Elasticsearch indexes all data in every field and each indexed field has the same data structure for unified and quick query ability</summary><br><b>\n\nFalse.\nFrom the official docs:\n\n\"Each indexed field has a dedicated, optimized data structure. For example, text fields are stored in inverted indices, and numeric and geo fields are stored in BKD trees.\"\n</b></details>\n\n<details>\n<summary>What reserved fields a document has?</summary><br><b>\n\n  * _index\n  * _id\n  * _type\n</b></details>\n\n<details>\n<summary>Explain Mapping</summary><br><b>\n</b></details>\n\n<details>\n<summary>What are the advantages of defining your own mapping? (or: when would you use your own mapping?)</summary><br><b>\n\n* You can optimize fields for partial matching\n* You can define custom formats of known fields (e.g. date)\n* You can perform language-specific analysis\n</b></details>\n\n<details>\n<summary>Explain Replicas</summary><br><b>\n\nIn a network/cloud environment where failures can be expected any time, it is very useful and highly recommended to have a failover mechanism in case a shard/node somehow goes offline or disappears for whatever reason.\nTo this end, Elasticsearch allows you to make one or more copies of your index’s shards into what are called replica shards, or replicas for short.\n</b></details>\n\n<details>\n<summary>Can you explain Term Frequency & Document Frequency?</summary><br><b>\n\nTerm Frequency is how often a term appears in a given document and Document Frequency is how often a term appears in all documents. They both are used for determining the relevance of a term by calculating Term Frequency / Document Frequency.\n</b></details>\n\n<details>\n<summary>You check \"Current Phase\" under \"Index lifecycle management\" and you see it's set to \"hot\". What does it mean?</summary><br><b>\n\n\"The index is actively being written to\".\nMore about the phases [here](https://www.elastic.co/guide/en/elasticsearch/reference/7.6/ilm-policy-definition.html)\n</b></details>\n\n<details>\n<summary>What this command does? <code>curl -X PUT \"localhost:9200/customer/_doc/1?pretty\" -H 'Content-Type: application/json' -d'{ \"name\": \"John Doe\" }'</code></summary><br><b>\n\nIt creates customer index if it doesn't exists and adds a new document with the field name which is set to \"John Dow\". Also, if it's the first document it will get the ID 1.\n</b></details>\n\n<details>\n<summary>What will happen if you run the previous command twice? What about running it 100 times?</code></summary><br><b>\n\n1. If name value was different then it would update \"name\" to the new value\n2. In any case, it bumps version field by one\n</b></details>\n\n<details>\n<summary>What is the Bulk API? What would you use it for?</code></summary><br><b>\n\nBulk API is used when you need to index multiple documents. For high number of documents it would be significantly faster to use rather than individual requests since there are less network roundtrips.\n</b></details>\n\n##### Query DSL\n\n<details>\n<summary>Explain Elasticsearch query syntax (Booleans, Fields, Ranges)</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain what is Relevance Score</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain Query Context and Filter Context</summary><br><b>\n\nFrom the official docs:\n\n\"In the query context, a query clause answers the question “How well does this document match this query clause?” Besides deciding whether or not the document matches, the query clause also calculates a relevance score in the _score meta-field.\"\n\n\"In a filter context, a query clause answers the question “Does this document match this query clause?” The answer is a simple Yes or No — no scores are calculated. Filter context is mostly used for filtering structured data\"\n</b></details>\n\n<details>\n<summary>Describe how would an architecture of production environment with large amounts of data would be different from a small-scale environment</summary><br><b>\n\nThere are several possible answers for this question. One of them is as follows:\n\nA small-scale architecture of elastic will consist of the elastic stack as it is. This means we will have beats, logstash, elastcsearch and kibana.<br>\nA production environment with large amounts of data can include some kind of buffering component (e.g. Reddis or RabbitMQ) and also security component such as Nginx.\n</b></details>\n\n##### Logstash\n\n<details>\n<summary>What are Logstash plugins? What plugins types are there?</summary><br><b>\n\n  * Input Plugins - how to collect data from different sources\n  * Filter Plugins - processing data\n  * Output Plugins - push data to different outputs/services/platforms\n</b></details>\n\n<details>\n<summary>What is grok?</summary><br><b>\n\nA logstash plugin which modifies information in one format and immerse it in another.\n</b></details>\n\n<details>\n<summary>How grok works?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What grok patterns are you familiar with?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is `_grokparsefailure?`</summary><br><b>\n</b></details>\n\n<details>\n<summary>How do you test or debug grok patterns?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What are Logstash Codecs? What codecs are there?</summary><br><b>\n</b></details>\n\n##### Kibana\n\n<details>\n<summary>What can you find under \"Discover\" in Kibana?</summary><br><b>\n\nThe raw data as it is stored in the index. You can search and filter it.\n</b></details>\n\n<details>\n<summary>You see in Kibana, after clicking on Discover, \"561 hits\". What does it mean?</summary><br><b>\n\nTotal number of documents matching the search results. If not query used then simply the total number of documents.\n</b></details>\n\n<details>\n<summary>What can you find under \"Visualize\"?</summary><br><b>\n\n\"Visualize\" is where you can create visual representations for your data (pie charts, graphs, ...)\n</b></details>\n\n<details>\n<summary>What visualization types are supported/included in Kibana?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What visualization type would you use for statistical outliers</summary><br><b>\n</b></details>\n\n<details>\n<summary>Describe in detail how do you create a dashboard in Kibana</summary><br><b>\n</b></details>\n\n#### Filebeat\n\n<details>\n<summary>What is Filebeat?</summary><br><b>\n\nFilebeat is used to monitor the logging directories inside of VMs or mounted as a sidecar if exporting logs from containers, and then forward these logs onward for further processing, usually to logstash.\n</b></details>\n\n<details>\n<summary>If one is using ELK, is it a must to also use filebeat? In what scenarios it's useful to use filebeat?</summary><br><b>\n\nFilebeat is a typical component of the ELK stack, since it was developed by Elastic to work with the other products (Logstash and Kibana). It's possible to send logs directly to logstash, though this often requires coding changes for the application. Particularly for legacy applications with little test coverage, it might be a better option to use filebeat, since you don't need to make any changes to the application code.\n</b></details>\n\n<details>\n<summary>What is a harvester?</summary><br><b>\n\nRead [here](https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html#harvester)\n</b></details>\n\n<details>\n<summary>True or False? a single harvester harvest multiple files, according to the limits set in filebeat.yml</summary><br><b>\n\nFalse. One harvester harvests one file.\n</b></details>\n\n<details>\n<summary>What are filebeat modules?</summary><br><b>\n\nThese are pre-configured modules for specific types of logging locations (eg, Traefik, Fargate, HAProxy) to make it easy to configure forwarding logs using filebeat. They have different configurations based on where you're collecting logs from.\n</b></details>\n\n#### Elastic Stack\n\n<details>\n<summary>How do you secure an Elastic Stack?</summary><br><b>\n\nYou can generate certificates with the provided elastic utils and change configuration to enable security using certificates model.\n</b></details>\n\n## Distributed\n\n<details>\n<summary>Explain Distributed Computing (or Distributed System)</summary><br><b>\n\nAccording to Martin Kleppmann:\n\n\"Many processes running on many machines...only message-passing via an unreliable network with variable delays, and the system may suffer from partial failures, unreliable clocks, and process pauses.\"\n\nAnother definition: \"Systems that are physically separated, but logically connected\"\n</b></details>\n\n<details>\n<summary>What can cause a system to fail?</summary><br><b>\n\n* Network\n* CPU\n* Memory\n* Disk\n</b></details>\n\n<details>\n<summary>Do you know what is \"CAP theorem\"? (aka as Brewer's theorem)</summary><br><b>\n\nAccording to the CAP theorem, it's not possible for a distributed data store to provide more than two of the following at the same time:\n\n* Availability: Every request receives a response (it doesn't has to be the most recent data)\n* Consistency: Every request receives a response with the latest/most recent data\n* Partition tolerance: Even if some the data is lost/dropped, the system keeps running\n</b></details>\n\n<details>\n<summary>What are the problems with the following design? How to improve it?<br>\n<img src=\"images/distributed/distributed_design_standby.png\" width=\"500x;\" height=\"350px;\"/>\n</summary><br><b>\n1. The transition can take time. In other words, noticeable downtime.\n2. Standby server is a waste of resources - if first application server is running then the standby does nothing\n</b></details>\n\n<details>\n<summary>What are the problems with the following design? How to improve it?<br>\n<img src=\"images/distributed/distributed_design_lb.png\" width=\"700x;\" height=\"350px;\"/>\n</summary><br><b>\nIssues:\nIf load balancer dies , we lose the ability to communicate with the application.\n\nWays to improve:\n* Add another load balancer\n* Use DNS A record for both load balancers\n* Use message queue\n</b></details>\n\n<details>\n<summary>What is \"Shared-Nothing\" architecture?</summary><br><b>\n\nIt's an architecture in which data is and retrieved from a single, non-shared, source usually exclusively connected to one node as opposed to architectures where the request can get to one of many nodes and the data will be retrieved from one shared location (storage, memory, ...).\n</b></details>\n\n<details>\n<summary>Explain the Sidecar Pattern (Or sidecar proxy)</summary><br><b>\n</b></details>\n\n## Misc\n\n|Name|Topic|Objective & Instructions|Solution|Comments|\n|--------|--------|------|----|----|\n| Highly Available \"Hello World\" | [Exercise](topics/devops/ha_hello_world.md) | [Solution](topics/devops/solutions/ha_hello_world.md)\n\n<details>\n<summary>What happens when you type in a URL in an address bar in a browser?</summary><br><b>\n\n1. The browser searches for the record of the domain name IP address in the DNS in the following order:\n  * Browser cache\n  * Operating system cache\n  * The DNS server configured on the user's system (can be ISP DNS, public DNS, ...)\n2. If it couldn't find a DNS record locally, a full DNS resolution is started.\n3. It connects to the server using the TCP protocol\n4. The browser sends an HTTP request to the server\n5. The server sends an HTTP response back to the browser\n6. The browser renders the response (e.g. HTML)\n7. The browser then sends subsequent requests as needed to the server to get the embedded links, javascript, images in the HTML and then steps 3 to 5 are repeated.\n\nTODO: add more details!\n</b></details>\n\n#### API\n\n<details>\n<summary>Explain what is an API</summary><br><b>\n\nI like this definition from [blog.christianposta.com](https://blog.christianposta.com/microservices/api-gateways-are-going-through-an-identity-crisis):\n\n\"An explicitly and purposefully defined interface designed to be invoked over a network that enables software developers to get programmatic access to data and functionality within an organization in a controlled and comfortable way.\"\n</b></details>\n\n<details>\n<summary>What is an API specification?</summary><br><b>\n\nFrom [swagger.io](https://swagger.io/resources/articles/difference-between-api-documentation-specification):\n\n\"An API specification provides a broad understanding of how an API behaves and how the API links with other APIs. It explains how the API functions and the results to expect when using the API\"\n</b></details>\n\n<details>\n<summary>True or False? API Definition is the same as API Specification</summary><br><b>\n\nFalse. From [swagger.io](https://swagger.io/resources/articles/difference-between-api-documentation-specification):\n\n\"An API definition is similar to an API specification in that it provides an understanding of how an API is organized and how the API functions. But the API definition is aimed at machine consumption instead of human consumption of APIs.\"\n</b></details>\n\n<details>\n<summary>What is an API gateway?</summary><br><b>\n\nAn API gateway is like the gatekeeper that controls how different parts talk to each other and how information is exchanged between them.\n\nThe API gateway provides a single point of entry for all clients, and it can perform several tasks, including routing requests to the appropriate backend service, load balancing, security and authentication, rate limiting, caching, and monitoring.\n\nBy using an API gateway, organizations can simplify the management of their APIs, ensure consistent security and governance, and improve the performance and scalability of their backend services. They are also commonly used in microservices architectures, where there are many small, independent services that need to be accessed by different clients.\n</b></details>\n\n<details>\n<summary>What are the advantages of using/implementing an API gateway?</summary><br><b>\n\nAdvantages:\n\n  - Simplifies API management: Provides a single entry point for all requests, which simplifies the management and monitoring of multiple APIs.\n  - Improves security: Able to implement security features like authentication, authorization, and encryption to protect the backend services from unauthorized access.\n  - Enhances scalability: Can handle traffic spikes and distribute requests to backend services in a way that maximizes resource utilization and improves overall system performance.\n  - Enables service composition: Can combine different backend services into a single API, providing more granular control over the services that clients can access.\n  - Facilitates integration with external systems:  Can be used to expose internal services to external partners or customers, making it easier to integrate with external systems and enabling new business models.\n\n</b></details>\n\n<details>\n<summary>What is a Payload in API?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is Automation? How it's related or different from Orchestration?</summary><br><b>\n\nAutomation is the act of automating tasks to reduce human intervention or interaction in regards to IT technology and systems.<br>\nWhile automation focuses on a task level, Orchestration is the process of automating processes and/or workflows which consists of multiple tasks that usually across multiple systems.\n</b></details>\n\n<details>\n<summary>Tell me about interesting bugs you've found and also fixed</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is a Debugger and how it works?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What services an application might have?</summary><br><b>\n\n  * Authorization\n  * Logging\n  * Authentication\n  * Ordering\n  * Front-end\n  * Back-end\n  ...\n</b></details>\n\n<details>\n<summary>What is Metadata?</summary><br><b>\n\nData about data. Basically, it describes the type of information that an underlying data will hold.\n</b></details>\n\n<details>\n<summary>You can use one of the following formats: JSON, YAML, XML. Which one would you use? Why?</summary><br><b>\n\nI can't answer this for you :)\n</b></details>\n\n<details>\n<summary>What's KPI?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What's OKR?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What's DSL (Domain Specific Language)?</summary><br><b>\n\nDomain Specific Language (DSLs) are used to create a customised language that represents the domain such that domain experts can easily interpret it.\n</b></details>\n\n<details>\n<summary>What's the difference between KPI and OKR?</summary><br><b>\n</b></details>\n\n#### YAML\n\n<details>\n<summary>What is YAML?</summary><br><b>\n\nData serialization language used by many technologies today like Kubernetes, Ansible, etc.\n</b></details>\n\n<details>\n<summary>True or False? Any valid JSON file is also a valid YAML file</summary><br><b>\n\nTrue. Because YAML is superset of JSON.\n</b></details>\n\n<details>\n<summary>What is the format of the following data?\n\n```\n{\n    applications: [\n        {\n            name: \"my_app\",\n            language: \"python\",\n            version: 20.17\n        }\n    ]\n}\n```\n</summary><br><b>\nJSON\n</b></details>\n\n<details>\n<summary>What is the format of the following data?\n\n```\napplications:\n  - app: \"my_app\"\n    language: \"python\"\n    version: 20.17\n```\n</summary><br><b>\nYAML\n</b></details>\n\n<details>\n<summary>How to write a multi-line string with YAML? What use cases is it good for?</summary><br><b>\n\n```\nsomeMultiLineString: |\n  look mama\n  I can write a multi-line string\n  I love YAML\n```\n\nIt's good for use cases like writing a shell script where each line of the script is a different command.\n</b></details>\n\n<details>\n<summary>What is the difference between <code>someMultiLineString: |</code> to <code>someMultiLineString: ></code>?</summary><br><b>\n\nusing `>` will make the multi-line string to fold into a single line\n\n```\nsomeMultiLineString: >\n  This is actually\n  a single line\n  do not let appearances fool you\n```\n</b></details>\n\n<details>\n<summary>What are placeholders in YAML?</summary><br><b>\n\nThey allow you reference values instead of directly writing them and it is used like this:\n\n```\nusername: {{ my.user_name }}\n```\n</b></details>\n\n<details>\n<summary>How can you define multiple YAML components in one file?</summary><br><b>\n\nUsing this: `---`\nFor Examples:\n\n```\ndocument_number: 1\n---\ndocument_number: 2\n```\n</b></details>\n\n#### Firmware\n\n<details>\n<summary>Explain what is a firmware</summary><br><b>\n\n[Wikipedia](https://en.wikipedia.org/wiki/Firmware): \"In computing, firmware is a specific class of computer software that provides the low-level control for a device's specific hardware. Firmware, such as the BIOS of a personal computer, may contain basic functions of a device, and may provide hardware abstraction services to higher-level software such as operating systems.\"\n</b></details>\n\n## Cassandra\n\n<details>\n<summary>When running a cassandra cluster, how often do you need to run nodetool repair in order to keep the cluster consistent?\n\n  * Within the columnFamily GC-grace Once a week\n  * Less than the compacted partition minimum bytes\n  * Depended on the compaction strategy\n</summary><br><b>\n</b></details>\n\n## HTTP\n\n<details>\n<summary>What is HTTP?</summary><br><b>\n\n[Avinetworks](https://avinetworks.com/glossary/layer-7/): HTTP stands for Hypertext Transfer Protocol. HTTP uses TCP port 80 to enable internet communication. It is part of the Application Layer (L7) in OSI Model. \n</b></details>\n\n<details>\n<summary>Describe HTTP request lifecycle</summary><br><b>\n\n* Resolve host by request to DNS resolver\n* Client SYN\n* Server SYN+ACK\n* Client SYN\n* HTTP request\n* HTTP response\n</b></details>\n\n<details>\n<summary>True or False? HTTP is stateful</summary><br><b>\n\nFalse. It doesn't maintain state for incoming request.\n</b></details>\n\n<details>\n<summary>How HTTP request looks like?</summary><br><b>\n\nIt consists of:\n\n * Request line - request type\n * Headers - content info like length, encoding, etc.\n * Body (not always included)\n</b></details>\n\n<details>\n<summary>What HTTP method types are there?</summary><br><b>\n\n* GET\n* POST\n* HEAD\n* PUT\n* DELETE\n* CONNECT\n* OPTIONS\n* TRACE\n</b></details>\n\n<details>\n<summary>What HTTP response codes are there?</summary><br><b>\n\n* 1xx - informational\n* 2xx - Success\n* 3xx - Redirect\n* 4xx - Error, client fault\n* 5xx - Error, server fault\n</b></details>\n\n<details>\n<summary>What is HTTPS?</summary><br><b>\n\n\nHTTPS is a secure version of the HTTP protocol used to transfer data between a web browser and a web server. It encrypts the communication using SSL/TLS encryption to ensure that the data is private and secure.\n\nLearn more: https://www.cloudflare.com/learning/ssl/why-is-http-not-secure/\n</b></details>\n\n<details>\n<summary>Explain HTTP Cookies</summary><br><b>\n\nHTTP is stateless. To share state, we can use Cookies.\n\nTODO: explain what is actually a Cookie\n</b></details>\n\n<details>\n<summary>What is HTTP Pipelining?</summary><br><b>\n</b></details>\n\n<details>\n<summary>You get \"504 Gateway Timeout\" error from an HTTP server. What does it mean?</summary><br><b>\n\nThe server didn't receive a response from another server it communicates with in a timely manner.\n</b></details>\n\n<details>\n<summary>What is a proxy?</summary><br><b>\n\nA proxy is a server that acts as a middleman between a client device and a destination server. It can help improve privacy, security, and performance by hiding the client's IP address, filtering content, and caching frequently accessed data. \n  - Proxies can be used for load balancing, distributing traffic across multiple servers to help prevent server overload and improve website or application performance. They can also be used for data analysis, as they can log requests and traffic, providing useful insights into user behavior and preferences.\n</b></details>\n\n<details>\n<summary>What is a reverse proxy?</summary><br><b>\n\nA reverse proxy is a type of proxy server that sits between a client and a server, but it is used to manage traffic going in the opposite direction of a traditional forward proxy. In a forward proxy, the client sends requests to the proxy server, which then forwards them to the destination server. However, in a reverse proxy, the client sends requests to the destination server, but the requests are intercepted by the reverse proxy before they reach the server. \n  - They're commonly used to improve web server performance, provide high availability and fault tolerance, and enhance security by preventing direct access to the back-end server. They are often used in large-scale web applications and high-traffic websites to manage and distribute requests to multiple servers, resulting in improved scalability and reliability.\n</b></details>\n\n<details>\n<summary>When you publish a project, you usually publish it with a license. What types of licenses are you familiar with and which one do you prefer to use?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain what is \"X-Forwarded-For\"</summary><br><b>\n\n[Wikipedia](https://en.wikipedia.org/wiki/X-Forwarded-For): \"The X-Forwarded-For (XFF) HTTP header field is a common method for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or load balancer.\"\n</b></details>\n\n#### Load Balancers\n\n<details>\n<summary>What is a load balancer?</summary><br><b>\n\nA load balancer accepts (or denies) incoming network traffic from a client, and based on some criteria (application related, network, etc.) it distributes those communications out to servers (at least one).\n</b></details>\n\n<details>\n<summary>Why to used a load balancer?</summary><br><b>\n\n* Scalability - using a load balancer, you can possibly add more servers in the backend to handle more requests/traffic from the clients, as opposed to using one server.\n* Redundancy - if one server in the backend dies, the load balancer will keep forwarding the traffic/requests to the second server so users won't even notice one of the servers in the backend is down.\n</b></details>\n\n<details>\n<summary>What load balancer techniques/algorithms are you familiar with?</summary><br><b>\n\n  * Round Robin\n  * Weighted Round Robin\n  * Least Connection\n  * Weighted Least Connection\n  * Resource Based\n  * Fixed Weighting\n  * Weighted Response Time\n  * Source IP Hash\n  * URL Hash\n</b></details>\n\n<details>\n<summary>What are the drawbacks of round robin algorithm in load balancing?</summary><br><b>\n\n  * A simple round robin algorithm knows nothing about the load and the spec of each server it forwards the requests to. It is possible, that multiple heavy workloads requests will get to the same server while other servers will got only lightweight requests which will result in one server doing most of the work, maybe even crashing at some point because it unable to handle all the heavy workloads requests by its own.\n  * Each request from the client creates a whole new session. This might be a problem for certain scenarios where you would like to perform multiple operations where the server has to know about the result of operation so basically, being sort of aware of the history it has with the client. In round robin, first request might hit server X, while second request might hit server Y and ask to continue processing the data that was processed on server X already.\n</b></details>\n\n<details>\n<summary>What is an Application Load Balancer?</summary><br><b>\n</b></details>\n\n<details>\n<summary>In which scenarios would you use ALB?</summary><br><b>\n</b></details>\n\n<details>\n<summary>At what layers a load balancer can operate?</summary><br><b>\n\nL4 and L7\n</b></details>\n\n<details>\n<summary>Can you perform load balancing without using a dedicated load balancer instance?</summary><br><b>\n\nYes, you can use DNS for performing load balancing.\n</b></details>\n\n<details>\n<summary>What is DNS load balancing? What its advantages? When would you use it?</summary><br><b>\n</b></details>\n\n#### Load Balancers - Sticky Sessions\n\n<details>\n<summary>What are sticky sessions? What are their pros and cons?</summary><br><b>\n\nRecommended read:\n  * [Red Hat Article](https://access.redhat.com/solutions/900933)\n\nCons:\n  * Can cause uneven load on instance (since requests routed to the same instances)\nPros:\n  * Ensures in-proc sessions are not lost when a new request is created\n</b></details>\n\n<details>\n<summary>Name one use case for using sticky sessions</summary><br><b>\n\nYou would like to make sure the user doesn't lose the current session data.\n</b></details>\n\n<details>\n<summary>What sticky sessions use for enabling the \"stickiness\"?</summary><br><b>\n\nCookies. There are application based cookies and duration based cookies.\n</b></details>\n\n<details>\n<summary>Explain application-based cookies</summary><br><b>\n\n* Generated by the application and/or the load balancer\n* Usually allows to include custom data\n</b></details>\n\n<details>\n<summary>Explain duration-based cookies</summary><br><b>\n\n* Generated by the load balancer\n* Session is not sticky anymore once the duration elapsed\n</b></details>\n\n#### Load Balancers - Load Balancing Algorithms\n\n<details>\n<summary>Explain each of the following load balancing techniques\n\n  * Round Robin\n  * Weighted Round Robin\n  * Least Connection\n  * Weighted Least Connection\n  * Resource Based\n  * Fixed Weighting\n  * Weighted Response Time\n  * Source IP Hash\n  * URL Hash\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain use case for connection draining?</summary><br><b>\nTo ensure that a Classic Load Balancer stops sending requests to instances that are de-registering or unhealthy, while keeping the existing connections open, use connection draining. This enables the load balancer to complete in-flight requests made to instances that are de-registering or unhealthy.\n\nThe maximum timeout value can be set between 1 and 3,600 seconds on both GCP and AWS.\n\n</b></details>\n\n#### Licenses\n\n<details>\n<summary>Are you familiar with \"Creative Commons\"? What do you know about it?</summary><br><b>\n\nThe Creative Commons license is a set of copyright licenses that allow creators to share their work with the public while retaining some control over how it can be used. The license was developed as a response to the restrictive standards of traditional copyright laws, which limited access of creative works. Its creators to choose the terms under which their works can be shared, distributed, and used by others. They're six main types of Creative Commons licenses, each with different levels of restrictions and permissions, the six licenses are:\n\n  * Attribution (CC BY): Allows others to distribute, remix, and build upon the work, even commercially, as long as they credit the original creator.\n  * Attribution-ShareAlike (CC BY-SA): Allows others to remix and build upon the work, even commercially, as long as they credit the original creator and release any new creations under the same license.\n  * Attribution-NoDerivs (CC BY-ND): Allows others to distribute the work, even commercially, but they cannot remix or change it in any way and must credit the original creator.\n  * Attribution-NonCommercial (CC BY-NC): Allows others to remix and build upon the work, but they cannot use it commercially and must credit the original creator.\n  * Attribution-NonCommercial-ShareAlike (CC BY-NC-SA): Allows others to remix and build upon the work, but they cannot use it commercially, must credit the original creator, and must release any new creations under the same license.\n  * Attribution-NonCommercial-NoDerivs (CC BY-NC-ND): Allows others to download and share the work, but they cannot use it commercially, remix or change it in any way, and must credit the original creator.\n\nSimply stated, the Creative Commons licenses are a way for creators to share their work with the public while retaining some control over how it can be used. The licenses promote creativity, innovation, and collaboration, while also respecting the rights of creators while still encouraging the responsible use of creative works.\n\nMore information: https://creativecommons.org/licenses/\n</b></details>\n\n<details>\n<summary>Explain the differences between copyleft and permissive licenses</summary><br><b>\n\nIn Copyleft, any derivative work must use the same licensing while in permissive licensing there are no such condition. GPL-3 is an example of copyleft license while BSD is an example of permissive license.\n</b></details>\n\n#### Random\n\n<details>\n<summary>How a search engine works?</summary><br><b>\n</b></details>\n\n<details>\n<summary>How auto completion works?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is faster than RAM?</summary><br><b>\n\nCPU cache.\n[Source](https://www.enterprisestorageforum.com/hardware/cache-memory/)\n</b></details>\n\n<details>\n<summary>What is a memory leak?</summary><br><b>\n\nA memory leak is a programming error that occurs when a program fails to release memory that is no longer needed, causing the program to consume increasing amounts of memory over time.\n\nThe leaks can lead to a variety of problems, including system crashes, performance degradation, and instability. Usually occurring after failed maintenance on older systems and compatibility with new components over time.\n</b></details>\n\n<details>\n<summary>What is your favorite protocol?</summary><br><b>\n\nSSH\nHTTP\nDHCP\nDNS\n...\n</b></details>\n\n<details>\n<summary>What is Cache API?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the C10K problem? Is it relevant today?</summary><br><b>\n\nhttps://idiallo.com/blog/c10k-2016\n</b></details>\n\n## Storage\n\n<details>\n<summary>What types of storage are there?</summary><br><b>\n\n  * File\n  * Block\n  * Object\n</b></details>\n\n<details>\n<summary>Explain Object Storage</summary><br><b>\n\n- Data is divided to self-contained objects\n- Objects can contain metadata\n</b></details>\n\n<details>\n<summary>What are the pros and cons of object storage?</summary><br><b>\n\nPros:\n  - Usually with object storage, you pay for what you use as opposed to other storage types where you pay for the storage space you allocate\n  - Scalable storage: Object storage mostly based on a model where what you use, is what you get and you can add storage as need\nCons:\n  - Usually performs slower than other types of storage\n  - No granular modification: to change an object, you have re-create it\n</b></details>\n\n<details>\n<summary>What are some use cases for using object storage?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain File Storage</summary><br><b>\n\n- File Storage used for storing data in files, in a hierarchical structure\n- Some of the devices for file storage: hard drive, flash drive, cloud-based file storage\n- Files usually organized in directories\n</b></details>\n\n<details>\n<summary>What are the pros and cons of File Storage?</summary><br><b>\n\nPros:\n- Users have full control of their own files and can run variety of operations on the files: delete, read, write and move.\n- Security mechanism allows for users to have a better control at things such as file locking\n</b></details>\n\n<details>\n<summary>What are some examples of file storage?</summary><br><b>\n\nLocal filesystem\nDropbox\nGoogle Drive\n</b></details>\n\n<details>\n<summary>What types of storage devices are there?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain IOPS</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain storage throughput</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is a filesystem?</summary><br><b>\n\nA file system is a way for computers and other electronic devices to organize and store data files. It provides a structure that helps to organize data into files and directories, making it easier to find and manage information. A file system is crucial for providing a way to store and manage data in an organized manner.\n\nCommonly used filed systems:\n  Windows:\n  * NTFS\n  * exFAT\n\n  Mac OS:\n  * HFS+\n  *APFS\n\n</b></details>\n\n<details>\n<summary>Explain Dark Data</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain MBR</summary><br><b>\n</b></details>\n\n<a name=\"questions-you-ask\"></a>\n## Questions you CAN ask\n\nA list of questions you as a candidate can ask the interviewer during or after the interview.\nThese are only a suggestion, use them carefully. Not every interviewer will be able to answer these (or happy to) which should be perhaps a red flag warning for your regarding working in such place but that's really up to you.\n\n<details>\n<summary>What do you like about working here?</summary><br><b>\n</b></details>\n\n<details>\n<summary>How does the company promote personal growth?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the current level of technical debt you are dealing with?</summary><br><b>\n\nBe careful when asking this question - all companies, regardless of size, have some level of tech debt.\nPhrase the question in the light that all companies have the deal with this, but you want to see the current\npain points they are dealing with <br>\n\nThis is a great way to figure how managers deal with unplanned work, and how good they are at\nsetting expectations with projects.\n</b></details>\n\n<details>\n<summary>Why I should NOT join you? (or 'what you don't like about working here?')</summary><br><b>\n</b></details>\n\n<details>\n<summary>What was your favorite project you've worked on?</summary><br><b>\n\nThis can give you insights in some of the cool projects a company is working on, and if\nyou would enjoy working on projects like these. This is also a good way to see if\nthe managers are allowing employees to learn and grow with projects outside of the\nnormal work you'd do.\n</b></details>\n\n<details>\n<summary>If you could change one thing about your day to day, what would it be?</summary><br><b>\n\nSimilar to the tech debt question, this helps you identify any pain points with the company.\nAdditionally, it can be a great way to show how you'd be an asset to the team.<br>\n\nFor Example, if they mention they have problem X, and you've solved that in the past,\nyou can show how you'd be able to mitigate that problem.\n</b></details>\n\n<details>\n<summary>Let's say that we agree and you hire me to this position, after X months, what do you expect that I have achieved?</summary><br><b>\n\nNot only this will tell you what is expected from you, it will also provide big hint on the type of work you are going to do in the first months of your job.\n</b></details>\n\n## Testing\n\n<details>\n<summary>Explain white-box testing</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain black-box testing</summary><br><b>\n</b></details>\n\n<details>\n<summary>What are unit tests?</summary><br><b>\n\nUnit test are a software testing technique that involves systimatically breaking down a system and testing each individual part of the assembly. These tests are automated and can be run repeatedly to allow developers to catch edge case scenarios or bugs quickly while developing.\n\nThe main objective of unit tests are to verify each function is producing proper outputs given a set of inputs.\n</b></details>\n\n<details>\n<summary>What types of tests would you run to test a web application?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain test harness?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is A/B testing?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is network simulation and how do you perform it?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What types of performances tests are you familiar with?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain the following types of tests:\n\n  * Load Testing\n  * Stress Testing\n  * Capacity Testing\n  * Volume Testing\n  * Endurance Testing\n</summary><br><b>\n</b></details>\n\n## Regex\n\nGiven a text file, perform the following exercises\n\n#### Extract\n\n<details>\n<summary>Extract all the numbers</summary><br><b>\n\n  - \"\\d+\"\n</b></details>\n\n<details>\n<summary>Extract the first word of each line</summary><br><b>\n\n  - \"^\\w+\"\nBonus: extract the last word of each line\n\n  - \"\\w+(?=\\W*$)\" (in most cases, depends on line formatting)\n</b></details>\n\n<details>\n<summary>Extract all the IP addresses</summary><br><b>\n\n  - \"\\b(?:\\d{1,3}\\ .){3}\\d{1,3}\\b\" IPV4:(This format looks for 1 to 3 digit sequence 3 times)\n</b></details>\n\n<details>\n<summary>Extract dates in the format of yyyy-mm-dd or yyyy-dd-mm</summary><br><b>\n</b></details>\n\n<details>\n<summary>Extract email addresses</summary><br><b>\n\n  - \"\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\ .[A-Za-z]{2,}\\b\"\n</b></details>\n\n#### Replace\n\n<details>\n<summary>Replace tabs with four spaces</summary><br><b>\n</b></details>\n\n<details>\n<summary>Replace 'red' with 'green'</summary><br><b>\n</b></details>\n\n## System Design\n\n<details>\n<summary>Explain what a \"single point of failure\" is. </summary><br><b>\nA \"single point of failure\", in a system or organization, if it were to fail would cause the entire system to fail or significantly disrupt it's operation. In other words, it is a vulnerability where there\nis no backup in place to compensate for the failure.\n</b></details>\n\n<details>\n<summary>What is CDN?</summary><br><b>\n\nCDN (Content Delivery Network) responsible for distributing content geographically. Part of it, is what is known as edge locations, aka cache proxies, that allows users to get their content quickly due to cache features and geographical distribution.\n</b></details>\n\n<details>\n<summary>Explain Multi-CDN</summary><br><b>\n\nIn single CDN, the whole content is originated from content delivery network.<br>\nIn multi-CDN, content is distributed across multiple different CDNs, each might be on a completely different provider/cloud.\n</b></details>\n\n<details>\n<summary>What are the benefits of Multi-CDN over a single CDN?</summary><br><b>\n\n* Resiliency: Relying on one CDN means no redundancy. With multiple CDNs you don't need to worry about your CDN being down\n* Flexibility in Costs: Using one CDN enforces you to specific rates of that CDN. With multiple CDNs you can take into consideration using less expensive CDNs to deliver the content.\n* Performance: With Multi-CDN there is bigger potential in choosing better locations which more close to the client asking the content\n* Scale: With multiple CDNs, you can scale services to support more extreme conditions\n</b></details>\n\n<details>\n<summary>Explain \"3-Tier Architecture\" (including pros and cons)</summary><br><b>\nA \"3-Tier Architecture\" is a pattern used in software development for designing and structuring applications. It divides the application into 3 interconnected layers: Presentation, Business logic and Data storage.  \nPROS: \n* Scalability\n* Security\n* Reusability\nCONS:\n* Complexity\n* Performance overhead\n* Cost and development time\n</b></details>\n\n<details>\n<summary>Explain Mono-repo vs. Multi-repo.What are the cons and pros of each approach?</summary><br><b>\nIn a Mono-repo, all the code for an organization is stored in a single,centralized repository.\nPROS (Mono-repo):\n* Unified tooling\n* Code Sharing\nCONS (Mono-repo):\n* Increased complexity\n* Slower cloning\n\nIn a Multi-repo setup, each component is stored in it's own separate repository. Each repository has it's own version control history.\nPROS (Multi-repo):\n* Simpler to manage\n* Different teams and developers can work on different parts of the project independently, making parallel development easier.\nCONS (Multi-repo):\n* Code duplication\n* Integration challenges\n</b></details>\n\n<details>\n<summary>What are the drawbacks of monolithic architecture?</summary><br><b>\n\n* Not suitable for frequent code changes and the ability to deploy new features\n* Not designed for today's infrastructure (like public clouds)\n* Scaling a team to work monolithic architecture is more challenging\n* If a single component in this architecture fails, then the entire application fails.\n</b></details>\n\n<details>\n<summary>What are the advantages of microservices architecture over a monolithic architecture?</summary><br><b>\n\n* Each of the services individually fail without escalating into an application-wide outage.\n* Each service can be developed and maintained by a separate team and this team can choose its own tools and coding language\n</b></details>\n\n<details>\n<summary>What's a service mesh?</summary><br><b>\nIt is a layer that facilitates communication management and control between microservices in a containerized application. It handles tasks such as load balancing, encryption, and monitoring.\n</b></details>\n\n<details>\n<summary>Explain \"Loose Coupling\"</summary><br><b>\nIn \"Loose Coupling\", components of a system communicate with each other with a little understanding of each other's internal workings. This improves scalability and ease of modification in complex systems.\n</b></details>\n\n<details>\n<summary>What is a message queue? When is it used?</summary><br><b>\nIt is a communication mechanism used in distributed systems to enable asynchronous communication between different components. It is generally used when the systems use a microservices approach.\n</b></details>\n\n#### Scalability\n\n<details>\n<summary>Explain Scalability</summary><br><b>\n\nThe ability easily grow in size and capacity based on demand and usage.\n</b></details>\n\n<details>\n<summary>Explain Elasticity</summary><br><b>\n\nThe ability to grow but also to reduce based on what is required\n</b></details>\n\n<details>\n<summary>Explain Disaster Recovery</summary><br><b>\n\n\nDisaster recovery is the process of restoring critical business systems and data after a disruptive event. The goal is to minimize the impact and resume normal business activities quickly. This involves creating a plan, testing it, backing up critical data, and storing it in safe locations. In case of a disaster, the plan is then executed, backups are restored, and systems are hopefully brought back online. The recovery process may take hours or days depending on the damages of infrastructure. This makes business planning important, as a well-designed and tested disaster recovery plan can minimize the impact of a disaster and keep operations going.\n</b></details>\n\n<details>\n<summary>Explain Fault Tolerance and High Availability</summary><br><b>\n\nFault Tolerance - The ability to self-heal and return to normal capacity. Also the ability to withstand a failure and remain functional.\n\nHigh Availability - Being able to access a resource (in some use cases, using different platforms)\n</b></details>\n\n<details>\n<summary>What is the difference between high availability and Disaster Recovery?</summary><br><b>\n\n[wintellect.com](https://www.wintellect.com/high-availability-vs-disaster-recovery): \"High availability, simply put, is eliminating single points of failure and disaster recovery is the process of getting a system back to an operational state when a system is rendered inoperative. In essence, disaster recovery picks up when high availability fails, so HA first.\"\n</b></details>\n\n<details>\n<summary>Explain Vertical Scaling</summary><br><b>\n\nVertical Scaling is the process of adding resources to increase power of existing servers. For example, adding more CPUs, adding more RAM, etc.\n</b></details>\n\n<details>\n<summary>What are the disadvantages of Vertical Scaling?</summary><br><b>\n\nWith vertical scaling alone, the component still remains a single point of failure.\nIn addition, it has hardware limit where if you don't have more resources, you might not be able to scale vertically.\n</b></details>\n\n<details>\n<summary>Which type of cloud services usually support vertical scaling?</summary><br><b>\n\nDatabases, cache. It's common mostly for non-distributed systems.\n</b></details>\n\n<details>\n<summary>Explain Horizontal Scaling</summary><br><b>\n\nHorizontal Scaling is the process of adding more resources that will be able handle requests as one unit\n</b></details>\n\n<details>\n<summary>What is the disadvantage of Horizontal Scaling? What is often required in order to perform Horizontal Scaling?</summary><br><b>\n\nA load balancer. You can add more resources, but if you would like them to be part of the process, you have to serve them the requests/responses.\nAlso, data inconsistency is a concern with horizontal scaling.\n</b></details>\n\n<details>\n<summary>Explain in which use cases will you use vertical scaling and in which use cases you will use horizontal scaling</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain Resiliency and what ways are there to make a system more resilient</summary><br><b>\n</b></details>\n\n<details>\n<summary>Explain \"Consistent Hashing\"</summary><br><b>\n</b></details>\n\n<details>\n<summary>How would you update each of the services in the following drawing without having app (foo.com) downtime?<br>\n<img src=\"images/design/cdn-no-downtime.png\" width=\"300x;\" height=\"400px;\"/>\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is the problem with the following architecture and how would you fix it?<br>\n<img src=\"images/design/producers_consumers_issue.png\" width=\"400x;\" height=\"300px;\"/>\n</summary><br><b>\n\nThe load on the producers or consumers may be high which will then cause them to hang or crash.<br>\nInstead of working in \"push mode\", the consumers can pull tasks only when they are ready to handle them. It can be fixed by using a streaming platform like Kafka, Kinesis, etc. This platform will make sure to handle the high load/traffic and pass tasks/messages to consumers only when the ready to get them.\n\n<img src=\"images/design/producers_consumers_fix.png\" width=\"300x;\" height=\"200px;\"/>\n</b></details>\n\n<details>\n<summary>Users report that there is huge spike in process time when adding little bit more data to process as an input. What might be the problem?<br>\n<img src=\"images/design/input-process-output.png\" width=\"300x;\" height=\"200px;\"/>\n</summary><br><b>\n</b></details>\n\n<details>\n<summary>How would you scale the architecture from the previous question to hundreds of users?</summary><br><b>\n</b></details>\n\n#### Cache\n\n<details>\n<summary>What is \"cache\"? In which cases would you use it?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is \"distributed cache\"?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is a \"cache replacement policy\"?</summary><br><b>\n\nTake a look [here](https://en.wikipedia.org/wiki/Cache_replacement_policies)\n</b></details>\n\n<details>\n<summary>Which cache replacement policies are you familiar with?</summary><br><b>\n\nYou can find a list [here](https://en.wikipedia.org/wiki/Cache_replacement_policies)\n</b></details>\n\n<details>\n<summary>Explain the following cache policies:\n\n  * FIFO\n  * LIFO\n  * LRU</summary><br><b>\n\nRead about it [here](https://en.wikipedia.org/wiki/Cache_replacement_policies)\n</b></details>\n\n<details>\n<summary>Why not writing everything to cache instead of a database/datastore?</summary><br><b>\nCaching and databases serve different purposes and are optimized for different use cases.\n\nCaching is used to speed up read operations by storing frequently accessed data in memory or on a fast storage medium. By keeping data close to the application, caching reduces the latency and overhead of accessing data from a slower, more distant storage system such as a database or disk.\n\nOn the other hand, databases are optimized for storing and managing persistent data. Databases are designed to handle concurrent read and write operations, enforce consistency and integrity constraints, and provide features such as indexing and querying.\n</b></details>\n\n#### Migrations\n\n<details>\n<summary>How you prepare for a migration? (or plan a migration)</summary><br><b>\n\nYou can mention:\n\nroll-back & roll-forward\ncut over\ndress rehearsals\nDNS redirection\n</b></details>\n\n<details>\n<summary>Explain \"Branch by Abstraction\" technique</summary><br><b>\n</b></details>\n\n#### Design a system\n\n<details>\n<summary>Can you design a video streaming website?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Can you design a photo upload website?</summary><br><b>\n</b></details>\n\n<details>\n<summary>How would you build a URL shortener?</summary><br><b>\n</b></details>\n\n#### More System Design Questions\n\nAdditional exercises can be found in [system-design-notebook repository](https://github.com/bregman-arie/system-design-notebook).\n\n<p align=\"center\"><a href=\"https://github.com/bregman-arie/system-design-notebook\"><img src=\"images/system_design_notebook.png\"/></a></p>\n\n## Hardware\n\n<details>\n<summary>What is a CPU?</summary><br><b>\n\nA central processing unit (CPU) performs basic arithmetic, logic, controlling, and input/output (I/O) operations specified by the instructions in the program. This contrasts with external components such as main memory and I/O circuitry, and specialized processors such as graphics processing units (GPUs).\n</b></details>\n\n<details>\n<summary>What is RAM?</summary><br><b>\n\nRAM (Random Access Memory) is the hardware in a computing device where the operating system (OS), application programs and data in current use are kept so they can be quickly reached by the device's processor. RAM is the main memory in a computer. It is much faster to read from and write to than other kinds of storage, such as a hard disk drive (HDD), solid-state drive (SSD) or optical drive.\n</b></details>\n\n<details>\n<summary>What is a GPU?</summary><br><b>\nA GPU, or Graphics Processing Unit, is a specialized electronic circuit designed to expedite image and video processing for display on a computer screen.\n\n</b></details>\n\n<details>\n<summary>What is an embedded system?</summary><br><b>\n\nAn embedded system is a computer system - a combination of a computer processor, computer memory, and input/output peripheral devices—that has a dedicated function within a larger mechanical or electronic system. It is embedded as part of a complete device often including electrical or electronic hardware and mechanical parts. \n</b></details>\n\n<details>\n<summary>Can you give an example of an embedded system?</summary><br><b>\n\nA common example of an embedded system is a microwave oven's digital control panel, which is managed by a microcontroller.\n\nWhen committed to a certain goal, Raspberry Pi can serve as an embedded system.\n\n</b></details>\n\n<details>\n<summary>What types of storage are there?</summary><br><b>\n\nThere are several types of storage, including hard disk drives (HDDs), solid-state drives (SSDs), and optical drives (CD/DVD/Blu-ray). Other types of storage include USB flash drives, memory cards, and network-attached storage (NAS).\n</b></details>\n\n<details>\n<summary>What are some considerations DevOps teams should keep in mind when selecting hardware for their job?</summary><br>\n\nChoosing the right DevOps hardware is essential for ensuring streamlined CI/CD pipelines, timely feedback loops, and consistent service availability. Here's a distilled guide on what DevOps teams should consider:\n\n1. **Understanding Workloads**:\n    - **CPU**: Consider the need for multi-core or high-frequency CPUs based on your tasks.\n    - **RAM**: Enough memory is vital for activities like large-scale coding or intensive automation.\n    - **Storage**: Evaluate storage speed and capacity. SSDs might be preferable for swift operations.\n\n2. **Expandability**:\n    - **Horizontal Growth**: Check if you can boost capacity by adding more devices.\n    - **Vertical Growth**: Determine if upgrades (like RAM, CPU) to individual machines are feasible.\n\n3. **Connectivity Considerations**:\n    - **Data Transfer**: Ensure high-speed network connections for activities like code retrieval and data transfers.\n    - **Speed**: Aim for low-latency networks, particularly important for distributed tasks.\n    - **Backup Routes**: Think about having backup network routes to avoid downtimes.\n\n4. **Consistent Uptime**:\n    - Plan for hardware backups like RAID configurations, backup power sources, or alternate network connections to ensure continuous service.\n\n5. **System Compatibility**:\n    - Make sure your hardware aligns with your software, operating system, and intended platforms.\n\n6. **Power Efficiency**:\n    - Hardware that uses energy efficiently can reduce costs in long-term, especially in large setups.\n\n7. **Safety Measures**:\n    - Explore hardware-level security features, such as TPM, to enhance protection.\n\n8. **Overseeing & Control**:\n    - Tools like ILOM can be beneficial for remote handling.\n    - Make sure the hardware can be seamlessly monitored for health and performance.\n\n9. **Budgeting**:\n    - Consider both initial expenses and long-term costs when budgeting.\n\n10. **Support & Community**:\n    - Choose hardware from reputable vendors known for reliable support.\n    - Check for available drivers, updates, and community discussions around the hardware.\n\n11. **Planning Ahead**:\n    - Opt for hardware that can cater to both present and upcoming requirements.\n\n12. **Operational Environment**:\n    - **Temperature Control**: Ensure cooling systems to manage heat from high-performance units.\n    - **Space Management**: Assess hardware size considering available rack space.\n    - **Reliable Power**: Factor in consistent and backup power sources.\n\n13. **Cloud Coordination**:\n    - If you're leaning towards a hybrid cloud setup, focus on how local hardware will mesh with cloud resources.\n\n14. **Life Span of Hardware**:\n    - Be aware of the hardware's expected duration and when you might need replacements or upgrades.\n\n15. **Optimized for Virtualization**:\n    - If utilizing virtual machines or containers, ensure the hardware is compatible and optimized for such workloads.\n\n16. **Adaptability**:\n    - Modular hardware allows individual component replacements, offering more flexibility.\n\n17. **Avoiding Single Vendor Dependency**:\n    - Try to prevent reliance on a single vendor unless there are clear advantages.\n\n18. **Eco-Friendly Choices**:\n    - Prioritize sustainably produced hardware that's energy-efficient and environmentally responsible.\n\nIn essence, DevOps teams should choose hardware that is compatible with their tasks, versatile, gives good performance, and stays within their budget. Furthermore, long-term considerations such as maintenance, potential upgrades, and compatibility with impending technological shifts must be prioritized.\n\n</details>\n\n<details>\n<summary>What is the role of hardware in disaster recovery planning and implementation?</summary><br>\n\nHardware is critical in disaster recovery (DR) solutions. While the broader scope of DR includes things like standard procedures, norms, and human roles, it's the hardware that keeps business processes running smoothly. Here's an outline of how hardware works with DR:\n\n1. **Storing Data and Ensuring Its Duplication**:\n    - **Backup Equipment**: Devices like tape storage, backup servers, and external HDDs keep essential data stored safely at a different location.\n    - **Disk Arrays**: Systems such as RAID offer a safety net. If one disk crashes, the others compensate.\n\n2. **Alternate Systems for Recovery**:\n    - **Backup Servers**: These step in when the main servers falter, maintaining service flow.\n    - **Traffic Distributors**: Devices like load balancers share traffic across servers. If a server crashes, they reroute users to operational ones.\n\n3. **Alternate Operation Hubs**:\n    - **Ready-to-use Centers**: Locations equipped and primed to take charge immediately when the main center fails.\n    - **Basic Facilities**: Locations with necessary equipment but lacking recent data, taking longer to activate.\n    - **Semi-prepped Facilities**: Locations somewhat prepared with select systems and data, taking a moderate duration to activate.\n\n4. **Power Backup Mechanisms**:\n    - **Instant Power Backup**: Devices like UPS offer power during brief outages, ensuring no abrupt shutdowns.\n    - **Long-term Power Solutions**: Generators keep vital systems operational during extended power losses.\n\n5. **Networking Equipment**:\n    - **Backup Internet Connections**: Having alternatives ensures connectivity even if one provider faces issues.\n    - **Secure Connection Tools**: Devices ensuring safe remote access, especially crucial during DR situations.\n\n6. **On-site Physical Setup**:\n    - **Organized Housing**: Structures like racks to neatly store and manage hardware.\n    - **Emergency Temperature Control**: Backup cooling mechanisms to counter server overheating in HVAC malfunctions.\n\n7. **Alternate Communication Channels**:\n    - **Orbit-based Phones**: Handy when regular communication methods falter.\n    - **Direct Communication Devices**: Devices like radios useful when primary systems are down.\n\n8. **Protection Mechanisms**:\n    - **Electronic Barriers & Alert Systems**: Devices like firewalls and intrusion detection keep DR systems safeguarded.\n    - **Physical Entry Control**: Systems controlling entry and monitoring, ensuring only cleared personnel have access.\n\n9. **Uniformity and Compatibility in Hardware**:\n    - It's simpler to manage and replace equipment in emergencies if hardware configurations are consistent and compatible.\n\n10. **Equipment for Trials and Upkeep**:\n    - DR drills might use specific equipment to ensure the primary systems remain unaffected. This verifies the equipment's readiness and capacity to manage real crises.\n\nIn summary, while software and human interventions are important in disaster recovery operations, it is the hardware that provides the underlying support. It is critical for efficient disaster recovery plans to keep this hardware resilient, duplicated, and routinely assessed.\n\n</details>\n\n<details>\n<summary>What is a RAID?</summary><br>\n<b>\nRAID is an acronym that stands for \"Redundant Array of Independent Disks.\" It is a technique that combines numerous hard drives into a single device known as an array in order to improve performance, expand storage capacity, and/or offer redundancy to prevent data loss. RAID levels (for example, RAID 0, RAID 1, and RAID 5) provide varied benefits in terms of performance, redundancy, and storage efficiency.\n\n</b></details>\n\n<details>\n<summary>What is a microcontroller?</summary><br>\n<b>\nA microcontroller is a small integrated circuit that controls certain tasks in an embedded system. It typically includes a CPU, memory, and input/output peripherals.\n\n</b></details>\n\n<details>\n<summary>What is a Network Interface Controller or NIC?</summary><br><b>\nA Network Interface Controller (NIC) is a piece of hardware that connects a computer to a network and allows it to communicate with other devices.\n\n</b></details>\n\n<details>\n<summary>What is a DMA?</summary><br><b>\n\nDirect memory access (DMA) is a feature of computer systems that allows certain hardware subsystems to access main system memory independently of the central processing unit (CPU).DMA enables devices to share and receive data from the main memory in a computer. It does this while still allowing the CPU to perform other tasks.\n</b></details>\n\n<details>\n<summary>What is a Real-Time Operating Systems?</summary><br><b>\n\nA real-time operating system (RTOS) is an operating system (OS) for real-time computing applications that processes data and events that have critically defined time constraints. An RTOS is distinct from a time-sharing operating system, such as Unix, which manages the sharing of system resources with a scheduler, data buffers, or fixed task prioritization in a multitasking or multiprogramming environment. Processing time requirements need to be fully understood and bound rather than just kept as a minimum. All processing must occur within the defined constraints. Real-time operating systems are event-driven and preemptive, meaning the OS can monitor the relevant priority of competing tasks, and make changes to the task priority. Event-driven systems switch between tasks based on their priorities, while time-sharing systems switch the task based on clock interrupts.\n</b></details>\n\n<details>\n<summary>List of interrupt types</summary><br><b>\n\nThere are six classes of interrupts possible:\n* External\n* Machine check\n* I/O\n* Program\n* Restart\n* Supervisor call (SVC)\n</b></details>\n\n## Big Data\n\n<details>\n<summary>Explain what is exactly Big Data</summary><br><b>\n\nAs defined by Doug Laney:\n\n* Volume: Extremely large volumes of data\n* Velocity: Real time, batch, streams of data\n* Variety: Various forms of data, structured, semi-structured and unstructured\n* Veracity or Variability: Inconsistent, sometimes inaccurate, varying data\n</b></details>\n\n<details>\n<summary>What is DataOps? How is it related to DevOps?</summary><br><b>\n\n DataOps seeks to reduce the end-to-end cycle time of data analytics, from the origin of ideas to the literal creation of charts, graphs and models that create value. \n DataOps combines Agile development, DevOps and statistical process controls and applies them to data analytics.\n</b></details>\n\n<details>\n<summary>What is Data Architecture?</summary><br><b>\n\nAn answer from [talend.com](https://www.talend.com/resources/what-is-data-architecture):\n\n\"Data architecture is the process of standardizing how organizations collect, store, transform, distribute, and use data. The goal is to deliver relevant data to people who need it, when they need it, and help them make sense of it.\"\n</b></details>\n\n<details>\n<summary>Explain the different formats of data</summary><br><b>\n\n* Structured - data that has defined format and length (e.g. numbers, words)\n* Semi-structured - Doesn't conform to a specific format but is self-describing (e.g. XML, SWIFT)\n* Unstructured - does not follow a specific format (e.g. images, test messages)\n</b></details>\n\n<details>\n<summary>What is a Data Warehouse?</summary><br><b>\n\n[Wikipedia's explanation on Data Warehouse](https://en.wikipedia.org/wiki/Data_warehouse)\n[Amazon's explanation on Data Warehouse](https://aws.amazon.com/data-warehouse)\n</b></details>\n\n<details>\n<summary>What is Data Lake?</summary><br><b>\n\n[Data Lake - Wikipedia](https://en.wikipedia.org/wiki/Data_lake)\n</b></details>\n\n<details>\n<summary>Can you explain the difference between a data lake and a data warehouse?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is \"Data Versioning\"? What models of \"Data Versioning\" are there?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is ETL?</summary><br><b>\n</b></details>\n\n#### Apache Hadoop\n\n<details>\n<summary>Explain what is Hadoop</summary><br><b>\n\n[Apache Hadoop - Wikipedia](https://en.wikipedia.org/wiki/Apache_Hadoop)\n</b></details>\n\n<details>\n<summary>Explain Hadoop YARN</summary><br><b>\n\nResponsible for managing the compute resources in clusters and scheduling users' applications\n</b></details>\n\n<details>\n<summary>Explain Hadoop MapReduce</summary><br><b>\n\nA programming model for large-scale data processing\n</b></details>\n\n<details>\n<summary>Explain Hadoop Distributed File Systems (HDFS)</summary><br><b>\n\n* Distributed file system providing high aggregate bandwidth across the cluster.\n* For a user it looks like a regular file system structure but behind the scenes it's distributed across multiple machines in a cluster\n* Typical file size is TB and it can scale and supports millions of files\n* It's fault tolerant which means it provides automatic recovery from faults\n* It's best suited for running long batch operations rather than live analysis\n</b></details>\n\n<details>\n<summary>What do you know about HDFS architecture?</summary><br><b>\n\n[HDFS Architecture](http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-hdfs/HdfsDesign.html)\n\n* Master-slave architecture\n* Namenode - master, Datanodes - slaves\n* Files split into blocks\n* Blocks stored on datanodes\n* Namenode controls all metadata\n</b></details>\n\n## Ceph\n\n<details>\n<summary>Explain what is Ceph</summary><br><b>\nCeph is an Open-Source Distributed Storage System designed to provide excellent performance, reliability, and scalability. It's often used in cloud computing environments and Data Centers.\n</b></details>\n\n<details>\n<summary>True or False? Ceph favor consistency and correctness over performances</summary><br><b>\nTrue\n</b></details>\n\n<details>\n<summary>Which services or types of storage Ceph supports?</summary><br><b>\n\n* Object (RGW)\n* Block (RBD)\n* File (CephFS)\n</b></details>\n\n<details>\n<summary>What is RADOS?</summary><br><b>\n\n* Reliable Autonomic Distributed Object Storage\n* Provides low-level data object storage service\n* Strong Consistency\n* Simplifies design and implementation of higher layers (block, file, object)\n</b></details>\n\n<details>\n<summary>Describe RADOS software components</summary><br><b>\n\n* Monitor\n  * Central authority for authentication, data placement, policy\n  * Coordination point for all other cluster components\n  * Protect critical cluster state with Paxos\n* Manager\n  * Aggregates real-time metrics (throughput, disk usage, etc.)\n  * Host for pluggable management functions\n  * 1 active, 1+ standby per cluster\n* OSD (Object Storage Daemon)\n  * Stores data on an HDD or SSD\n  * Services client IO requests\n</b></details>\n\n<details>\n<summary>What is the workflow of retrieving data from Ceph?</summary><br><b>\nThe work flow is as follows:\n\n1. The client sends a request to the ceph cluster to retrieve data:\n> **Client could be any of the following**\n>> * Ceph Block Device\n>> * Ceph Object Gateway\n>> * Any third party ceph client\n\n\n2. The client retrieves the latest cluster map from the Ceph Monitor\n3. The client uses the CRUSH algorithm to map the object to a placement group. The placement group is then assigned to a OSD.\n4. Once the placement group and the OSD Daemon are determined, the client can retrieve the data from the appropriate OSD\n\n\n</b></details>\n\n<details>\n<summary>What is the workflow of writing data to Ceph?</summary><br><b>\nThe work flow is as follows:\n\n1. The client sends a request to the ceph cluster to retrieve data\n2. The client retrieves the latest cluster map from the Ceph Monitor\n3. The client uses the CRUSH algorithm to map the object to a placement group. The placement group is then assigned to a Ceph OSD Daemon dynamically.\n4. The client sends the data to the primary OSD of the determined placement group. If the data is stored in an erasure-coded pool, the primary OSD is responsible for encoding the object into data chunks and coding chunks, and distributing them to the other OSDs. \n\n</b></details>\n\n<details>\n<summary>What are \"Placement Groups\"?</summary><br><b>\n</b></details>\n\n<details>\n<summary>Describe in the detail the following: Objects -> Pool -> Placement Groups -> OSDs</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is OMAP?</summary><br><b>\n</b></details>\n\n<details>\n<summary>What is a metadata server? How it works?</summary><br><b>\n</b></details>\n\n## Packer\n\n<details>\n<summary>What is Packer? What is it used for?</summary><br><b>\n\nIn general, Packer automates machine images creation.\nIt allows you to focus on configuration prior to deployment while making the images. This allows you start the instances much faster in most cases.\n</b></details>\n\n<details>\n<summary>Packer follows a \"configuration->deployment\" model or \"deployment->configuration\"?</summary><br><b>\n\nA configuration->deployment which has some advantages like:\n\n1. Deployment Speed - you configure once prior to deployment instead of configuring every time you deploy. This allows you to start instances/services much quicker.\n2. More immutable infrastructure - with configuration->deployment it's not likely to have very different deployments since most of the configuration is done prior to the deployment. Issues like dependencies errors are handled/discovered prior to deployment in this model.\n</b></details>\n\n## Release\n\n<details>\n<summary>Explain Semantic Versioning</summary><br><b>\n\n[This](https://semver.org/) page explains it perfectly:\n\n```\nGiven a version number MAJOR.MINOR.PATCH, increment the:\n\nMAJOR version when you make incompatible API changes\nMINOR version when you add functionality in a backwards compatible manner\nPATCH version when you make backwards compatible bug fixes\nAdditional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\n```\n</b></details>\n\n## Certificates\n\nIf you are looking for a way to prepare for a certain exam this is the section for you. Here you'll find a list of certificates, each references to a separate file with focused questions that will help you to prepare to the exam. Good luck :)\n\n#### AWS\n\n* [Cloud Practitioner](certificates/aws-cloud-practitioner.md) (Latest update: 2020)\n* [Solutions Architect Associate](certificates/aws-solutions-architect-associate.md) (Latest update: 2021)\n* [Cloud SysOps Administration Associate](certificates/aws-cloud-sysops-associate.md) (Latest update: Oct 2022)\n\n\n#### Azure\n\n* [AZ-900](certificates/azure-fundamentals-az-900.md) (Latest update: 2021)\n\n#### Kubernetes\n\n* [Certified Kubernetes Administrator (CKA)](topics/kubernetes/CKA.md) (Latest update: 2022)\n\n## Additional DevOps and SRE Projects\n\n<p align=\"center\"><a href=\"https://github.com/bregman-arie/sre-checklist\"><img width=\"500px\" src=\"images/sre_checklist.png\"/></a></p>\n\n<p align=\"center\"><a href=\"https://github.com/bregman-arie/howtheydevops\"><img src=\"images/how_they_devops.png\"/></a></p>\n<p align=\"center\"><a href=\"https://github.com/bregman-arie/devops-resources\"><img src=\"images/devops_resources.png\"/></a></p>\n<p align=\"center\"><a href=\"https://github.com/bregman-arie/infraverse\"><img src=\"images/infraverse.png\"/></a></p>\n\n## Credits\n\nThanks to all of our amazing [contributors](https://github.com/bregman-arie/devops-exercises/graphs/contributors) who make it easy for everyone to learn new things :)\n\nLogos credits can be found [here](credits.md)\n\n## License\n\n[![License: CC BY-NC-ND 3.0](https://img.shields.io/badge/License-CC%20BY--NC--ND%203.0-lightgrey.svg)](https://creativecommons.org/licenses/by-nc-nd/3.0/)\n"
        },
        {
          "name": "certificates",
          "type": "tree",
          "content": null
        },
        {
          "name": "coding",
          "type": "tree",
          "content": null
        },
        {
          "name": "credits.md",
          "type": "blob",
          "size": 2.05,
          "content": "## Credits\n\nJenkins logo created by <a href='https://twitter.com/ks_nenasheva'>Ksenia Nenasheva</a> and published through <a href=\"https://jenkins.io\">jenkins.io</a> is licensed under <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">cc by-sa 3.0</a><br>\nGit Logo by <a href=\"https://twitter.com/jasonlong\">Jason Long</a> is licensed under the <a href=\"https://creativecommons.org/licenses/by/3.0/\">Creative Commons Attribution 3.0 Unported License</a><br>\nTerraform logo created by <a href=\"https://www.hashicorp.com\">Hashicorp®</a><br>\nDocker logo created by <a href=\"https://www.docker.com\">Docker®</a><br>\nThe Python logo is a trademark of the Python Software Foundation®<br>\nPuppet logo created by <a href=\"https://puppet.com\">Puppet®</a><br>\nBash logo created by Prospect One<br>\nOpenStack logo created by and a trademark of The <a href=\"https://www.openstack.org\">OpenStack Foundation®</a><br>\nLinux, Kubernetes and Prometheus logos are trademarks of The Linux Foundation®<br>\nMongo logo is a trademark of <a href=\"http://www.mongodb.com\">Mongo®</a><br>\nDistributed logo by <a href=\"https://www.iconfinder.com/Flatart\">Flatart</a><br>\nChallenge icon by Elizabeth Arostegui in Technology Mix\n\"Question you ask\" (man raising hand) and \"Database\" icons by [Webalys](https://www.iconfinder.com/webalys)\nTesting logo by [Flatart](https://www.iconfinder.com/Flatart)<br>\nGoogle Cloud Plataform Logo created by <a href=\"https://about.google/\">Google®</a><br>\nVirtualBox Logo created by <a href=\"http://www.iconarchive.com/artist/dakirby309.html\">dAKirby309</a>, under the <a href=\"https://creativecommons.org/licenses/by-nc/4.0/\">Creative Commons Attribution-Noncommercial 4.0 License</a>.\nCertificates logo by <a href=\"https://www.iconfinder.com/Flatart\">Flatart</a><br>\nStorage icon by <a href=\"https://www.iconfinder.com/iconic_hub\">Dinosoftlab</a><br>\nCI/CD icon made made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\nChaos Engineering logo made by Arie Bregman\n"
        },
        {
          "name": "exercises",
          "type": "tree",
          "content": null
        },
        {
          "name": "faq.md",
          "type": "blob",
          "size": 6.55,
          "content": "## FAQ\n\nMost frequently asked questions.\n\n### What is the purpose of repository?\n\nLearning, of course.\n\n### My goal is to prepare for a DevOps interviews. Should I use this repository?\n\nOverall, this repository should help you learn some concepts but, don't assume at any point that your interview will include similar questions to those that included in this repository.\nRegarding interviews, I've added a couple of suggestions [here](prepare_for_interview.md)<br>\n\n### Will you stop at some point adding questions and exercises?\n\nAll good things come to an end...\n\n### How do I become a better DevOps Engineer?\n\nThat's a great question.<br>\nI don't have a definitive answer for this question, I'm exploring it myself from time to time. What I believe helps is to:\n\n  * Practice - Practicing DevOps practically should be the primary way to become a DevOps engineer in my opinion\n  * Read - blogs, books, ... anything that can enrich your knowledge about DevOps or related DevOps topics\n  * Participate - there are great DevOps communities. I personally like [Reddit DevOps community](https://www.reddit.com/r/devops). Visiting there, I learn quite a lot on different topics.\n  * Share - This is one of the reasons I created this project. Primary goal was to help others but a secondary goal quickly became to learn more. By asking questions, you actually learn better a certain topic. Try it out, take a certain subject and try to come up with questions you would ask someone to test his/her skills about that topic.\n\n### Why most of the questions don't have answers?\n\n1. Because we need more contributors\n2. Because often asking questions is easier than answering them\n\n### Where can I find answers to some of the questions in this repository?\n\n1. Search for them using search engines, documentation pages, ... this is part of being a DevOps engineer\n2. Use the communities: many people will be happy to help and answer your questions\n3. Ask us. If you want, you can contact me or start a discussion on this project.\n\n### Where the questions and answers are coming from?\n\nWell, everywhere! - past experience, colleagues, contributors, ... but please note we do not allow copying interview questions from interview questions sites to here. There are people who worked hard on adding those to their sites and we respect that.<br>\nAs an evidence, we did deny pull requests with copied content from other sites.\n\n### What are the top DevOps skills required for being a DevOps Engineer?\n\nIt's a hard question and the reason is that if you'll ask 20 different people, you'll probably get at least 10 different answers but here is what I believe is common today:\n\n* OS - DevOps require you good understanding of operating system concepts. The level required is mainly depends on the company although in my opinion it should be the same level. You should understand how the operating system works, how to troubleshoot and debug issues, etc.\n* Programming is part of DevOps. The level again depends on the company. Some will require you to know basic level of scripting while others deep understanding of common algorithms, data structure, design patterns etc.\n* Cloud and Containers - while not 100% must in all companies/positions, this skill is on the rise every year and many (if not most) of the positions/companies require this skill. This specifically means: AWS/Azure/GCP, Docker/Podman, Kubernetes, ...\n* CI/CD - Be able to to answer questions like \"Why do we need CI/CD?\" and \"What ways and models are there to perform CI/CD?\". Eventually, practice assembling such processes and workflow, using whatever tools you feel comfortable with.\n\n### I feel like there are some questions that shouldn't be included in this project\n\nIs that a question? :)<br>\nIf you don't like some of the questions or think that some questions should be removed you can open an issue or submit a PR and we can discuss it there. We don't have rules against deleting questions (for now :P)\n\n### Can I copy the questions from here to my site?\n\nYou can (although I have no idea why would you want to), but:\n\n* Not without attribution. Many people worked hard on adding these questions and they deserve a proper credit for their work\n* Not if you plan to make money out of it. Directly or indirectly (e.g. ADS) as this is a free content and we would like it to stay this way :)\n\nSame goes for copying questions from different sources to this repository. We saw it happened already with a couple of pull requests and we rejected them. We will not merge pull requests with copied questions and answers from other sources.\n\n### Can I add questions and/or answers to this project?\n\nI'll simply imagine you didn't ask that on an open source project... :)\n\n### Why can't I add installation questions?\n\nIn general, I prefer questions added to this repository will have certain educational value for the user. Either regarding a certain concept or even a very general question, but one that will make the user research on a certain topic and will make him eventually more familiar with some of its core concepts.<br>\nI know that this is not the case for every question in this repo as of today (e.g. questions about specific commands) but this is definitely something to aspire for.\n\nI see little to none value in what is known as \"Installation Questions\". Let's say I ask you \"how to install Jenkins?\". Should I conclude from your answer that you are familiar with what is Jenkins and/or how it works? In other words, is there a value in knowing how to install Jenkins? In my opinion, no.\n\n### Where can I practice coding?\n\nPersonally, I really like the following sites\n\n* [HackerRank](https://www.hackerrank.com)\n* [LeetCode](https://leetcode.com)\n* [Exercism](https://exercism.io)\n\n### How to learn more DevOps?\n\nI listed some roadmaps in [devops-resources](https://github.com/bregman-arie/devops-resources)\n\n### Why some questions repeat themselves?\n\nIf you see two identical questions, that's a bug.<br>\nIf you see two similar questions, that's a feature :D (= it's intentional)\n\nFor example:\n\n1. What is horizontal scaling?\n2. The act of adding additional instances to the pool to handle scaling is called ________ scaling\n\nYou are right, both ask about horizontal scaling but it's done from a different angle in every question and in addition, I do believe repetition helps you to learn something in a way where you are not fixed on the way it's asked, rather you understand the concept itself.\n\n### Are you open for making big changes in the repository?\n\nAbsolutely. Don't be afraid to raise ideas and start discussions.<br>\nI'll be more than happy to discuss any change you think we should make to improve the learning experience\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "prepare_for_interview.md",
          "type": "blob",
          "size": 11.35,
          "content": "## How to prepare for DevOps/SRE/Production Engineer interviews?\n \nNote: the following is opinionated.\n \n### Skills you should have\n \n#### Linux\n \nEvery DevOps Engineer should have a deep understanding of at least one operating system and if you have the option to choose then I would say it should definitely be Linux as I believe it's a requirement of at least 90% of the DevOps jobs postings out there. In addition, Linux is almost integral part of any sub-area or domain in DevOps like Cloud, Containers, etc.\n \nUsually, the followup question is \"How extensive should my knowledge be?\" Out of all the DevOps skills, I would say this, along with coding, should be your strongest skills. Be familiar with OS processes, debugging tools, filesystem, networking, ... know your operating system, understand how it works, how to troubleshoot issues, etc.\n\nNot long ago, I've created a list of Linux resources right [here](https://dev.to/abregman/collection-of-linux-resources-3nhk). There are some good sites there that you can use for learning more about Linux.\n \n#### Programming\n \nMy personal belief is that any DevOps engineer should know programming, at least to some degree. Having this skill you can automate manual processes, improve some of the open source tools you are using today or build new tools & projects to provide a solution to existing problems. Knowing how to code = a lot of power.\n\nWhen it comes to interviews you'll notice that the level of knowledge very much depends on the company or position you are interviewing for. Some will require you just to be able to write simple scripts while others will deep dive into complex algorithms and data structures.\n\nThe best way to practice this skill is by doing some actual coding - scripts, online challenges, CLI tools, web applications, ... just code :)\n\nAlso, the following is probably clear to most people but let's still clarify it: when given the chance to choose any language for answering coding tasks/questions, choose the one you have experience with! Some candidates prefer to choose the language they think the company is using and this is a huge mistake since giving the right answer is always better than a wrong answer, no matter which language you have used :)\n \nI recommend the following sites for practicing coding:\n                                                 \n* [HackerRank](https://www.hackerrank.com)\n* [LeetCode](https://leetcode.com)               \n* [Exercism](https://exercism.io)\n \nStarting your own project is also a good idea. More on that later on.\n\n#### Architecture and Design\n  \nThis is also an important aspect of DevOps. You should be able to describe how to design different systems, workflows, and architectures. Also, the scale is an important aspect of that. A design which might work for a dozen of hosts or X amount of data, will not necessarily work well with bigger scale.\n \nSome ideas for you to explore: \n                               \n* How to design and implement a CI pipeline (or pipelines) for verifying PRs, run multiple different types of tests, package the project and deploy it somewhere\n* How to design and implement secured ELK architecture which will get logs from 10,000 apps and will display the data eventually to the user\n* Microservices designs are also quite popular these days\n\nIn general, you should be able to describe some designs, projects, architectures, ... you performed.\n\n#### Tooling\n\nSome interviews will focus on specific tools or technologies. Which tools? this is mainly based on a combination of what you mentioned in your C.V & those that are mentioned in the job posting and used in the company. Here are some questions I believe anyone should know to answer regarding the tools he/she is familiar with:\n                               \n* What the tool does? What it allows us to achieve that we couldn't do without it?                            \n* What its advantages over other tools in the same area, with the same purpose? Why you specifically using it?\n* How it works?\n* How to use it?\n* Best practices you apply/use when using it\n                               \nLet's deep dive into practical preparation steps\n                               \n### Scenarios || Challenges || Tasks              \n                               \nThis is a very common way to interview today for DevOps roles. The candidate is given a task which represents a common task of DevOps Engineers or a piece of common knowledge and the candidate has several hours or days to accomplish the task.<br>\n                               \nThis is a great way to prepare for interviews and I recommend to try it out before actually interviewing. How? Take requirements from job posts and convert them into scenarios. Let's see an example:\n                               \n\"Knowledge in CI/CD\" -> Scenario: create a CI/CD pipeline for a project.\n                               \nAt this point, some people ask: \"but what project?\" and the answer is: what about GitHub? it has only 9125912851285192 projects...and a free way to set up CI to any of them (also a great way to learn how to collaborate with others :) )\n                               \nLet's convert another scenario:\n\n\"Experience with provisioning servers\" -> Scenario: provision a server (to make it more interesting: create a web server).\n\nAnd the last example:                                                                                                                                                        \n\"Experience with scripting\" -> Scenario: write a script. Don't waste too much time thinking \"what script should I write?\". Simply automate something you are doing manually or even implement your own version of common small utils.\n  \n### Start your own DevOps project\n  \nStarting a DevOps project is a good idea because:\n  \n* It will make you practice coding\n* It will be something you can add to your resume and talk about with the interviewer\n* Depends on size and complexity, it can teach you something about design in general\n* Depends on adoption, it can teach you about managing Open Source projects\n  \nSame here, don't overthink what your project should be about. Just go and build something :)\n  \n### Sample interview questions\n  \nMake a sample list of interview questions on various topics/areas like technical, company, role, ... and try to answer them.\nSee if you can manage to answer them in a fluent, detailed way.\n  \nBetter yet, ask a good friend/colleague to challenge you with some questions. Your self-awareness might be an obstacle in objective self-review of your knowledge :)\n  \n### Networking\n  \nFor those who attend technical meetups and conferences, it can be a great opportunity to chat with people from other companies on their interviewing process. But don't start with it, it can be quite awkward. Say at least hello first... (:\n  \nDoing so can give you a lot of information on what to expect from an interview at some companies or how to better prepare.\n  \n### Know your resume\n  \nIt may sound trivial but the idea here is simple: be ready to answer any question regarding any line you included in your resume.\nSometimes candidates surprised when they are asked on a skill or line which seems to be not related to the position but the simple truth is: if you mentioned something on your resume, it's only fair to ask you about it.\n\n### Know the company\n\nBe familiar with the company you are interviewing at. Some ideas:\n\n  * What the company does?\n  * What products it has?\n  * Why its products are unique (or better than other products)? This can also be a good question for you to ask\n\n### Books\n\nFrom my experience, this is not done by many candidates but it's one of the best ways to deep dive into topics like operating system, virtualization, scale, distributed systems, etc.    \n\nIn most cases, you will do fine without reading books but for the AAA interviews (hardest level) you'll want to read some books and overall if you inspire to be better DevOps Engineer, books (also articles, blog posts) is a great way develop yourself :)\n\n### Consider starting in non-DevOps position\n\nWhile not a preparation step, you should know that landing DevOps as a first position can be challenging. No, it's not impossible but still, since DevOps covers many different practices, tools, ... it can be quite challenging and also overwhelming for someone to try and achieve it as a first position.<br>\nA possible path to becoming a DevOps engineer is to start with actually a different (but related) position and switch from there after 1-2 years or more.\n\nSome ideas:\n\n* System Administrator - This is perfect because every DevOps Engineer should have a solid understanding of the OS and sysadmins know their OS :)\n* Software Developer/Engineer - A DevOps should have coding skills and this position will provide more than the required knowledge in most cases\n* QA Engineer - This is a more tricky one because IMHO there are less overlapping areas/skills with DevOps Engineer. Sure, DevOps engineers should have some knowledge about testing but usually, it seems their solid skills/background is mainly composed out of system internals and coding skills.\n                                                                           \n### What to expect from a DevOps interview?                                \n                                                                           \nDevOps interviews can be very different. Some will include design questions, some will focus on coding, others will include short technical questions and you might even have an interview where the interviewer only goes over your resume and discussing your past experience.\n                                                                           \nThere are a couple of things you can do about it so it will be a less overwhelming experience:\n                                                                           \n1. You can and probably should ask the HR (in some cases even the team lead) how the interview process looks like. Some will be kind enough to even tell you how to prepare.\n2. Usually, the job posting gives more than a hint on where the focus will be and what you should focus on in your preparations so read it carefully.\n3. There are plenty of sites that have notes or a summary of the interview process in different companies, especially big enterprises.\n                                                                           \n### Don't forget to be an interviewer as well                              \n                                                                           \nSome people tend to look at interviews as a one-way road of \"Determining whether a candidate is qualified\" but in reality, a candidate should also determine whether\nthe company he/she is interviewing at, is the right place for him/her.            \n                                                                                                                 \n* Do I care about team size? More specifically, do I care about being a one-man show or being part of a bigger team?\n* Do I care about work-life balance?                                       \n* Do I care about personal growth and how it's practically done?           \n* Do I care about knowing what are my responsibilities as part of the role?                                                                                                  \nIf you do, you should also play the interviewer role :)\n\n### One Last Thing                                \n                                                  \n[Good luck](https://youtu.be/AFUrG1-BAt4?t=59) :)\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "topics",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}