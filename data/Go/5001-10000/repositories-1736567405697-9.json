{
  "metadata": {
    "timestamp": 1736567405697,
    "page": 9,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-vgo/robotgo",
      "stars": 9813,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.4423828125,
          "content": "# Object files\n.DS_Store\n.vscode\n.idea\n\nrobot_test.png\n# Examples\nexamples/screen/screen\nexamples/screen/saveCapture.png\n#\nexamples/bitmap/test.png\nexamples/bitmap/test2.png\nexamples/bitmap/test.tif\nexamples/bitmap/test31.tif\nexamples/bitmap/tocbitmap.png\nexamples/bitmap/teststr.png\ntest/test.png\n\n# Debug files\n*.dSYM/\n*.su\ndebug\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.o\n*.ko\n*.obj\n*.elf\n\n# Precompiled Headers\n*.gch\n*.pch\n\n#\ncdeps/hook\nevent/hook\nvendor\n\n# Libraries\n*.lib\n# !cdeps/win32/libpng.lib\n# !cdeps/win32/zlib.lib\n# !cdeps/win64/libpng.lib\n# !cdeps/win64/zlib.lib\n# ##\n*.a\n!cdeps/mac/libpng.a\n!cdeps/mac/amd/libpng.a\n!cdeps/mac/m1/libpng.a\n# \n!cdeps/win32/libpng.a\n!cdeps/win64/libpng.a\n!cdeps/win/amd/win32/libpng.a\n!cdeps/win/amd/win64/libpng.a\n!cdeps/win/arm/libpng.a\n#\n*.la\n*.lo\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n*.i*86\n*.x86_64\n*.hex\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n .glide/\n\n#\nexamples/bitmap/test_IMG.png\nexamples/bitmap/imgToBitmap/test_01.png\nexamples/bitmap/imgToBitmap/test_002.jpeg\nexamples/bitmap/imgToBitmap/test_003.jpeg\nexamples/bitmap/imgToBitmap/test_1.png\nexamples/bitmap/imgToBitmap/test_2.jpeg\nexamples/bitmap/imgToBitmap/test.png\nexamples/bitmap/imgToBitmap/test_7.jpeg\nrobot_img.png\nexamples/bitmap/bitmapTobytes/out.jpg\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.0595703125,
          "content": "language: go\n\nos:\n  - linux\n  - osx\n\ngo:\n  # - 1.7.x\n  # - 1.8.x\n  # - 1.9.x\n  # - 1.10.x\n  # - 1.11.x\n  # - 1.12.x\n  # - 1.13.x\n  # - 1.14.x\n  # - 1.15.x\n  # - 1.16.x\n  # - 1.17.x\n  # - 1.18.x\n  - 1.19.x\n  # - tip\n\naddons:\n  apt:\n    packages:\n      - libx11-dev xorg-dev\n      - libxtst-dev libpng++-dev\n      - xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev\n      #  - libusb-dev\n      - libxkbcommon-dev\n      - xsel\n      - xclip\n      #\n      - xvfb\n# script:\n#  - sudo apt update\n#  - sudo apt install libx11-dev\n#  - sudo apt install xorg-dev\n#  - sudo apt install libxtst-dev libpng++-dev\n#  # Event:\n#  - sudo apt install xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev\n#  - sudo apt install libxkbcommon-dev\n#  # Clipboard:\n#  - sudo apt install xsel\n#  - sudo apt install xclip\n#  - go test -v .\n\nbefore_install:\n  - export PATH=$PATH:$HOME/gopath/bin\n  - go get -v -t -d ./...\n\nscript:\n  - if [ \"${TRAVIS_OS_NAME}\" = \"linux\" ]; then xvfb-run go test -v ./...; fi\n  - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then go test -v ./...; fi\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.306640625,
          "content": "# Contribution Guidelines\n\n## Introduction\n\nThis document explains how to contribute changes to the Robotgo project. It assumes you have followed the README.md and [API Document](https://github.com/go-vgo/robotgo/blob/master/docs/doc.md). <!--Sensitive security-related issues should be reported to [security@Robotgo.io](mailto:security@Robotgo.io.)-->\n\n## Bug reports\n\nPlease search the issues on the issue tracker with a variety of keywords to ensure your bug is not already reported.\n\nIf unique, [open an issue](https://github.com/go-vgo/robotgo/issues/new) and answer the questions so we can understand and reproduce the problematic behavior.\n\nThe burden is on you to convince us that it is actually a bug in Robotgo. This is easiest to do when you write clear, concise instructions so we can reproduce the behavior (even if it seems obvious). The more detailed and specific you are, the faster we will be able to help you. Check out [How to Report Bugs Effectively](http://www.chiark.greenend.org.uk/~sgtatham/bugs.html).\n\nPlease be kind, remember that Robotgo comes at no cost to you, and you're getting free help.\n\n## Discuss your design\n\nThe project welcomes submissions but please let everyone know what you're working on if you want to change or add something to the Robotgo repositories.\n\nBefore starting to write something new for the Robotgo project, please [file an issue](https://github.com/go-vgo/robotgo/issues/new). Significant changes must go through the [change proposal process](https://github.com/go-vgo/proposals) before they can be accepted.\n\nThis process gives everyone a chance to validate the design, helps prevent duplication of effort, and ensures that the idea fits inside the goals for the project and tools. It also checks that the design is sound before code is written; the code review tool is not the place for high-level discussions.\n\n## Testing redux\n\nBefore sending code out for review, run all the tests for the whole tree to make sure the changes don't break other usage and keep the compatibility on upgrade. You must be test on Mac, Windows, Linux and other. You should install the CLI for Circle CI, as we are using the server for continuous testing.\n\n## Code review\n\nIn addition to the owner, Changes to Robotgo must be reviewed before they are accepted, no matter who makes the change even if it is a maintainer. We use GitHub's pull request workflow to do that and we also use [LGTM](http://lgtm.co) to ensure every PR is reviewed by vz or least 2 maintainers.\n\n\n## Sign your work\n\nThe sign-off is a simple line at the end of the explanation for the patch. Your signature certifies that you wrote the patch or otherwise have the right to pass it on as an open-source patch. \n\n## Maintainers\n\nTo make sure every PR is checked, we got team maintainers. A maintainer should be a contributor of Robotgo and contributed at least 4 accepted PRs. \n\n## Owners\n\nSince Robotgo is a pure community organization without any company support, Copyright 2016 The go-vgo Project Developers.\n\n\n## Versions\n\nRobotgo has the `master` branch as a tip branch and has version branches such as `v0.30.0`. `v0.40.0` is a release branch and we will tag `v0.40.0` for binary download. If `v0.40.0` has bugs, we will accept pull requests on the `v0.40.0` branch and publish a `v0.40.1` tag, after bringing the bug fix also to the master branch.\n\nSince the `master` branch is a tip version, if you wish to use Robotgo in production, please download the latest release tag version. All the branches will be protected via GitHub, all the PRs to every branch must be reviewed by two maintainers and must pass the automatic tests.\n\n## Copyright\n\nCode that you contribute should use the standard copyright header:\n\n```\n// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n```\n\nFiles in the repository contain copyright from the year they are added to the year they are last changed. If the copyright author is changed, just paste the header below the old one.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.634765625,
          "content": "# Robotgo\n\n<!--<img align=\"right\" src=\"https://raw.githubusercontent.com/go-vgo/robotgo/master/logo.jpg\">-->\n<!--[![Build Status](https://travis-ci.org/go-vgo/robotgo.svg)](https://travis-ci.org/go-vgo/robotgo)\n[![codecov](https://codecov.io/gh/go-vgo/robotgo/branch/master/graph/badge.svg)](https://codecov.io/gh/go-vgo/robotgo)-->\n<!--<a href=\"https://circleci.com/gh/go-vgo/robotgo/tree/dev\"><img src=\"https://img.shields.io/circleci/project/go-vgo/robotgo/dev.svg\" alt=\"Build Status\"></a>-->\n\n[![Build Status](https://github.com/go-vgo/robotgo/workflows/Go/badge.svg)](https://github.com/go-vgo/robotgo/commits/master)\n[![CircleCI Status](https://circleci.com/gh/go-vgo/robotgo.svg?style=shield)](https://circleci.com/gh/go-vgo/robotgo)\n[![Build Status](https://travis-ci.org/go-vgo/robotgo.svg)](https://travis-ci.org/go-vgo/robotgo)\n![Appveyor](https://ci.appveyor.com/api/projects/status/github/go-vgo/robotgo?branch=master&svg=true)\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-vgo/robotgo)](https://goreportcard.com/report/github.com/go-vgo/robotgo)\n[![GoDoc](https://pkg.go.dev/badge/github.com/go-vgo/robotgo?status.svg)](https://pkg.go.dev/github.com/go-vgo/robotgo?tab=doc)\n[![GitHub release](https://img.shields.io/github/release/go-vgo/robotgo.svg)](https://github.com/go-vgo/robotgo/releases/latest)\n[![Join the chat at https://gitter.im/go-vgo/robotgo](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/go-vgo/robotgo?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n<!-- [![Release](https://github-release-version.herokuapp.com/github/go-vgo/robotgo/release.svg?style=flat)](https://github.com/go-vgo/robotgo/releases/latest) -->\n<!-- <a href=\"https://github.com/go-vgo/robotgo/releases\"><img src=\"https://img.shields.io/badge/%20version%20-%206.0.0%20-blue.svg?style=flat-square\" alt=\"Releases\"></a> -->\n\n> Golang Desktop Automation. Control the mouse, keyboard, read the screen, process, Window Handle, image and bitmap and global event listener.\n\nRobotGo supports Mac, Windows, and Linux(X11); and robotgo supports arm64 and x86-amd64.\n\n## Contents\n\n- [Docs](#docs)\n- [Binding](#binding)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Update](#update)\n- [Examples](#examples)\n- [Type Conversion and keys](https://github.com/go-vgo/robotgo/blob/master/docs/keys.md)\n- [Cross-Compiling](https://github.com/go-vgo/robotgo/blob/master/docs/install.md#crosscompiling)\n- [Authors](#authors)\n- [Plans](#plans)\n- [Donate](#donate)\n- [Contributors](#contributors)\n- [License](#license)\n\n## Docs\n\n- [GoDoc](https://godoc.org/github.com/go-vgo/robotgo) <br>\n- [API Docs](https://github.com/go-vgo/robotgo/blob/master/docs/doc.md) (Deprecated, no updated)\n\n## Binding:\n\n[ADB](https://github.com/vcaesar/adb), packaging android adb API.\n\n[Robotn](https://github.com/vcaesar/robotn), binding JavaScript and other, support more language.\n\n## Requirements:\n\nNow, Please make sure `Golang, GCC` is installed correctly before installing RobotGo.\n\n### ALL:\n\n```\nGolang\n\nGCC\n```\n\n#### For MacOS:\n\nXcode Command Line Tools (And Privacy setting: [#277](https://github.com/go-vgo/robotgo/issues/277))\n\n```\nxcode-select --install\n```\n\n#### For Windows:\n\n[MinGW-w64](https://sourceforge.net/projects/mingw-w64/files) (Use recommended) or others Mingw [llvm-mingw](https://github.com/mstorsjo/llvm-mingw);\n\nDownload the Mingw, then set system environment variables `C:\\mingw64\\bin` to the Path.\n[Set environment variables to run GCC from command line](https://www.youtube.com/results?search_query=Set+environment+variables+to+run+GCC+from+command+line).\n\n`Or the other GCC` (But you should compile the \"libpng\" with yourself when use the [bitmap](https://github.com/vcaesar/bitmap).)\n\n#### For everything else:\n\n```\nGCC\n\nX11 with the XTest extension (the Xtst library)\n\n\"Clipboard\": xsel xclip\n\n\n\"Bitmap\": libpng (Just used by the \"bitmap\".)\n\n\"Event-Gohook\": xcb, xkb, libxkbcommon (Just used by the \"hook\".)\n\n```\n\n##### Ubuntu:\n\n```yml\n# gcc\nsudo apt install gcc libc6-dev\n\n# x11\nsudo apt install libx11-dev xorg-dev libxtst-dev\n\n# Clipboard\nsudo apt install xsel xclip\n\n#\n# Bitmap\nsudo apt install libpng++-dev\n\n# GoHook\nsudo apt install xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev\n\n```\n\n##### Fedora:\n\n```yml\n# x11\nsudo dnf install libXtst-devel\n\n# Clipboard\nsudo dnf install xsel xclip\n\n#\n# Bitmap\nsudo dnf install libpng-devel\n\n# GoHook\nsudo dnf install libxkbcommon-devel libxkbcommon-x11-devel xorg-x11-xkb-utils-devel\n\n```\n\n## Installation:\n\nWith Go module support (Go 1.11+), just import:\n\n```go\nimport \"github.com/go-vgo/robotgo\"\n```\n\nOtherwise, to install the robotgo package, run the command:\n\n```\ngo get github.com/go-vgo/robotgo\n```\n\npng.h: No such file or directory? Please see [issues/47](https://github.com/go-vgo/robotgo/issues/47).\n\n## Update:\n\n```\ngo get -u github.com/go-vgo/robotgo\n```\n\nNote go1.10.x C file compilation cache problem, [golang #24355](https://github.com/golang/go/issues/24355).\n`go mod vendor` problem, [golang #26366](https://github.com/golang/go/issues/26366).\n\n## [Examples:](https://github.com/go-vgo/robotgo/blob/master/examples)\n\n#### [Mouse](https://github.com/go-vgo/robotgo/blob/master/examples/mouse/main.go)\n\n```Go\npackage main\n\nimport (\n  \"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  robotgo.MouseSleep = 100\n\n  robotgo.ScrollDir(10, \"up\")\n  robotgo.ScrollDir(20, \"right\")\n\n  robotgo.Scroll(0, -10)\n  robotgo.Scroll(100, 0)\n\n  robotgo.MilliSleep(100)\n  robotgo.ScrollSmooth(-10, 6)\n  // robotgo.ScrollRelative(10, -100)\n\n  robotgo.Move(10, 20)\n  robotgo.MoveRelative(0, -10)\n  robotgo.DragSmooth(10, 10)\n\n  robotgo.Click(\"wheelRight\")\n  robotgo.Click(\"left\", true)\n  robotgo.MoveSmooth(100, 200, 1.0, 10.0)\n\n  robotgo.Toggle(\"left\")\n  robotgo.Toggle(\"left\", \"up\")\n}\n```\n\n#### [Keyboard](https://github.com/go-vgo/robotgo/blob/master/examples/key/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  robotgo.TypeStr(\"Hello World\")\n  robotgo.TypeStr(\"だんしゃり\", 0, 1)\n  // robotgo.TypeStr(\"テストする\")\n\n  robotgo.TypeStr(\"Hi, Seattle space needle, Golden gate bridge, One world trade center.\")\n  robotgo.TypeStr(\"Hi galaxy, hi stars, hi MT.Rainier, hi sea. こんにちは世界.\")\n  robotgo.Sleep(1)\n\n  // ustr := uint32(robotgo.CharCodeAt(\"Test\", 0))\n  // robotgo.UnicodeType(ustr)\n\n  robotgo.KeySleep = 100\n  robotgo.KeyTap(\"enter\")\n  // robotgo.TypeStr(\"en\")\n  robotgo.KeyTap(\"i\", \"alt\", \"cmd\")\n\n  arr := []string{\"alt\", \"cmd\"}\n  robotgo.KeyTap(\"i\", arr)\n\n  robotgo.MilliSleep(100)\n  robotgo.KeyToggle(\"a\")\n  robotgo.KeyToggle(\"a\", \"up\")\n\n  robotgo.WriteAll(\"Test\")\n  text, err := robotgo.ReadAll()\n  if err == nil {\n    fmt.Println(text)\n  }\n}\n```\n\n#### [Screen](https://github.com/go-vgo/robotgo/blob/master/examples/screen/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n  \"strconv\"\n\n  \"github.com/go-vgo/robotgo\"\n  \"github.com/vcaesar/imgo\"\n)\n\nfunc main() {\n  x, y := robotgo.Location()\n  fmt.Println(\"pos: \", x, y)\n\n  color := robotgo.GetPixelColor(100, 200)\n  fmt.Println(\"color---- \", color)\n\n  sx, sy := robotgo.GetScreenSize()\n  fmt.Println(\"get screen size: \", sx, sy)\n\n  bit := robotgo.CaptureScreen(10, 10, 30, 30)\n  defer robotgo.FreeBitmap(bit)\n\n  img := robotgo.ToImage(bit)\n  imgo.Save(\"test.png\", img)\n\n  num := robotgo.DisplaysNum()\n  for i := 0; i < num; i++ {\n    robotgo.DisplayID = i\n    img1, _ := robotgo.CaptureImg()\n    path1 := \"save_\" + strconv.Itoa(i)\n    robotgo.Save(img1, path1+\".png\")\n    robotgo.SaveJpeg(img1, path1+\".jpeg\", 50)\n\n    img2, _ := robotgo.CaptureImg(10, 10, 20, 20)\n    robotgo.Save(img2, \"test_\"+strconv.Itoa(i)+\".png\")\n\n    x, y, w, h := robotgo.GetDisplayBounds(i)\n    img3, err := robotgo.CaptureImg(x, y, w, h)\n    fmt.Println(\"Capture error: \", err)\n    robotgo.Save(img3, path1+\"_1.png\")\n  }\n}\n```\n\n#### [Bitmap](https://github.com/vcaesar/bitmap/blob/main/examples/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/go-vgo/robotgo\"\n  \"github.com/vcaesar/bitmap\"\n)\n\nfunc main() {\n  bit := robotgo.CaptureScreen(10, 20, 30, 40)\n  // use `defer robotgo.FreeBitmap(bit)` to free the bitmap\n  defer robotgo.FreeBitmap(bit)\n\n  fmt.Println(\"bitmap...\", bit)\n  img := robotgo.ToImage(bit)\n  // robotgo.SavePng(img, \"test_1.png\")\n  robotgo.Save(img, \"test_1.png\")\n\n  bit2 := robotgo.ToCBitmap(robotgo.ImgToBitmap(img))\n  fx, fy := bitmap.Find(bit2)\n  fmt.Println(\"FindBitmap------ \", fx, fy)\n  robotgo.Move(fx, fy)\n\n  arr := bitmap.FindAll(bit2)\n  fmt.Println(\"Find all bitmap: \", arr)\n\n  fx, fy = bitmap.Find(bit)\n  fmt.Println(\"FindBitmap------ \", fx, fy)\n\n  bitmap.Save(bit, \"test.png\")\n}\n```\n\n#### [OpenCV](https://github.com/vcaesar/gcv)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n  \"math/rand\"\n\n  \"github.com/go-vgo/robotgo\"\n  \"github.com/vcaesar/gcv\"\n  \"github.com/vcaesar/bitmap\"\n)\n\nfunc main() {\n  opencv()\n}\n\nfunc opencv() {\n  name := \"test.png\"\n  name1 := \"test_001.png\"\n  robotgo.SaveCapture(name1, 10, 10, 30, 30)\n  robotgo.SaveCapture(name)\n\n  fmt.Print(\"gcv find image: \")\n  fmt.Println(gcv.FindImgFile(name1, name))\n  fmt.Println(gcv.FindAllImgFile(name1, name))\n\n  bit := bitmap.Open(name1)\n  defer robotgo.FreeBitmap(bit)\n  fmt.Print(\"find bitmap: \")\n  fmt.Println(bitmap.Find(bit))\n\n  // bit0 := robotgo.CaptureScreen()\n  // img := robotgo.ToImage(bit0)\n  // bit1 := robotgo.CaptureScreen(10, 10, 30, 30)\n  // img1 := robotgo.ToImage(bit1)\n  // defer robotgo.FreeBitmapArr(bit0, bit1)\n  img, _ := robotgo.CaptureImg()\n  img1, _ := robotgo.CaptureImg(10, 10, 30, 30)\n\n  fmt.Print(\"gcv find image: \")\n  fmt.Println(gcv.FindImg(img1, img))\n  fmt.Println()\n\n  res := gcv.FindAllImg(img1, img)\n  fmt.Println(res[0].TopLeft.Y, res[0].Rects.TopLeft.X, res)\n  x, y := res[0].TopLeft.X, res[0].TopLeft.Y\n  robotgo.Move(x, y-rand.Intn(5))\n  robotgo.MilliSleep(100)\n  robotgo.Click()\n\n  res = gcv.FindAll(img1, img) // use find template and sift\n  fmt.Println(\"find all: \", res)\n  res1 := gcv.Find(img1, img)\n  fmt.Println(\"find: \", res1)\n\n  img2, _, _ := robotgo.DecodeImg(\"test_001.png\")\n  x, y = gcv.FindX(img2, img)\n  fmt.Println(x, y)\n}\n```\n\n#### [Event](https://github.com/robotn/gohook/blob/master/examples/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  // \"github.com/go-vgo/robotgo\"\n  hook \"github.com/robotn/gohook\"\n)\n\nfunc main() {\n  add()\n  low()\n  event()\n}\n\nfunc add() {\n  fmt.Println(\"--- Please press ctrl + shift + q to stop hook ---\")\n  hook.Register(hook.KeyDown, []string{\"q\", \"ctrl\", \"shift\"}, func(e hook.Event) {\n    fmt.Println(\"ctrl-shift-q\")\n    hook.End()\n  })\n\n  fmt.Println(\"--- Please press w---\")\n  hook.Register(hook.KeyDown, []string{\"w\"}, func(e hook.Event) {\n    fmt.Println(\"w\")\n  })\n\n  s := hook.Start()\n  <-hook.Process(s)\n}\n\nfunc low() {\n\tevChan := hook.Start()\n\tdefer hook.End()\n\n\tfor ev := range evChan {\n\t\tfmt.Println(\"hook: \", ev)\n\t}\n}\n\nfunc event() {\n  ok := hook.AddEvents(\"q\", \"ctrl\", \"shift\")\n  if ok {\n    fmt.Println(\"add events...\")\n  }\n\n  keve := hook.AddEvent(\"k\")\n  if keve {\n    fmt.Println(\"you press... \", \"k\")\n  }\n\n  mleft := hook.AddEvent(\"mleft\")\n  if mleft {\n    fmt.Println(\"you press... \", \"mouse left button\")\n  }\n}\n```\n\n#### [Window](https://github.com/go-vgo/robotgo/blob/master/examples/window/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  fpid, err := robotgo.FindIds(\"Google\")\n  if err == nil {\n    fmt.Println(\"pids... \", fpid)\n\n    if len(fpid) > 0 {\n      robotgo.TypeStr(\"Hi galaxy!\", fpid[0])\n      robotgo.KeyTap(\"a\", fpid[0], \"cmd\")\n\n      robotgo.KeyToggle(\"a\", fpid[0])\n      robotgo.KeyToggle(\"a\", fpid[0], \"up\")\n\n      robotgo.ActivePid(fpid[0])\n\n      robotgo.Kill(fpid[0])\n    }\n  }\n\n  robotgo.ActiveName(\"chrome\")\n\n  isExist, err := robotgo.PidExists(100)\n  if err == nil && isExist {\n    fmt.Println(\"pid exists is\", isExist)\n\n    robotgo.Kill(100)\n  }\n\n  abool := robotgo.Alert(\"test\", \"robotgo\")\n  if abool {\n \t  fmt.Println(\"ok@@@ \", \"ok\")\n  }\n\n  title := robotgo.GetTitle()\n  fmt.Println(\"title@@@ \", title)\n}\n```\n\n## Authors\n\n- [The author is vz](https://github.com/vcaesar)\n- [Maintainers](https://github.com/orgs/go-vgo/people)\n- [Contributors](https://github.com/go-vgo/robotgo/graphs/contributors)\n\n## Plans\n\n- Refactor some C code to Go (such as x11, windows)\n- Better multiscreen support\n- Wayland support\n- Update Window Handle\n- Try to support Android and IOS\n\n## Contributors\n\n- See [contributors page](https://github.com/go-vgo/robotgo/graphs/contributors) for full list of contributors.\n- See [Contribution Guidelines](https://github.com/go-vgo/robotgo/blob/master/CONTRIBUTING.md).\n\n## License\n\nRobotgo is primarily distributed under the terms of \"both the MIT license and the Apache License (Version 2.0)\", with portions covered by various BSD-like licenses.\n\nSee [LICENSE-APACHE](http://www.apache.org/licenses/LICENSE-2.0), [LICENSE-MIT](https://github.com/go-vgo/robotgo/blob/master/LICENSE).\n"
        },
        {
          "name": "README_zh.md",
          "type": "blob",
          "size": 11.1103515625,
          "content": "# Robotgo\n\n## !!! Warning: this page not updated !!!\n\n[![Build Status](https://github.com/go-vgo/robotgo/workflows/Go/badge.svg)](https://github.com/go-vgo/robotgo/commits/master)\n[![CircleCI Status](https://circleci.com/gh/go-vgo/robotgo.svg?style=shield)](https://circleci.com/gh/go-vgo/robotgo)\n[![Build Status](https://travis-ci.org/go-vgo/robotgo.svg)](https://travis-ci.org/go-vgo/robotgo)\n![Appveyor](https://ci.appveyor.com/api/projects/status/github/go-vgo/robotgo?branch=master&svg=true)\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-vgo/robotgo)](https://goreportcard.com/report/github.com/go-vgo/robotgo)\n[![GoDoc](https://godoc.org/github.com/go-vgo/robotgo?status.svg)](https://godoc.org/github.com/go-vgo/robotgo)\n[![GitHub release](https://img.shields.io/github/release/go-vgo/robotgo.svg)](https://github.com/go-vgo/robotgo/releases/latest)\n[![Join the chat at https://gitter.im/go-vgo/robotgo](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/go-vgo/robotgo?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n> Golang 跨平台自动化系统，控制键盘、鼠标、位图、图像、读取屏幕，进程、窗口句柄以及全局事件监听\n\nRobotGo 支持 Mac, Windows, and Linux(X11).\n\n<br>\n\n提 Issues 请到 [Github](https://github.com/go-vgo/robotgo), 便于统一管理和即时更新; `REDAME_zh.md 已废弃, 不再更新`\n\n## Contents\n- [Docs](#docs)\n- [Binding](#binding)\n- [Requirements](#requirements)\n- [Installation](#installation)\n- [Update](#update)\n- [Examples](#examples)\n- [Cross-Compiling](#crosscompiling)\n- [Authors](#authors)\n- [Plans](#plans)\n- [Donate](#donate)\n- [Contributors](#contributors)\n- [License](#license)\n\n## Docs\n- [GoDoc](https://godoc.org/github.com/go-vgo/robotgo) <br>\n\n<!-- - [中文文档](https://github.com/go-vgo/robotgo/blob/master/docs/doc_zh.md) (弃用)\n- [English Docs](https://github.com/go-vgo/robotgo/blob/master/docs/doc.md) (弃用) -->\n\n## Binding:\n\n[Robotn](https://github.com/vcaesar/robotn), binding JavaScript and other, support more language.\n\n## Requirements:\n环境要求:\n\n在安装 RobotGo 之前, 请确保 `Golang、GCC` 被正确安装\n\n### ALL:\n```\nGolang\n\nGCC\n```\n\n#### For Mac OS X:\n\nXcode Command Line Tools  (And Privacy setting: [#277](https://github.com/go-vgo/robotgo/issues/277) )\n\n```\nxcode-select --install\n```\n\n#### For Windows:\n\n[MinGW-w64](https://sourceforge.net/projects/mingw-w64/files) (推荐使用) \n\n```\nOr the other GCC (But you should compile the \"libpng\" with yourself. \nOr you can removed the bitmap.go.)\n```\n\n#### For everything else (Linux 等其他系统):\n\n```\nGCC, \nlibpng(bitmap)\n\nX11 with the XTest extension (also known as the Xtst library)\n\n事件:\n\nxcb, xkb, libxkbcommon\n\nClipboard:  \n\nxsel xclip\n```\n\n##### Ubuntu:\n\n```yml\nsudo apt install gcc libc6-dev\n\nsudo apt install libx11-dev xorg-dev libxtst-dev libpng++-dev\n\nsudo apt install xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev\n\nsudo apt install xsel xclip\n\n```\n\n##### Fedora:\n\n```yml\nsudo dnf install libXtst-devel libxkbcommon-devel libxkbcommon-x11-devel xorg-x11-xkb-utils-devel\n\nsudo dnf install libpng-devel\n\nsudo dnf install xsel xclip\n```\n\n## Installation:\nWith Go module support (Go 1.11+), just import:\n\n```go\nimport \"github.com/go-vgo/robotgo\"\n```\n\nOtherwise, to install the robotgo package, run the command:\n\n```\ngo get github.com/go-vgo/robotgo\n```\n\npng.h: No such file or directory? Please see [issues/47](https://github.com/go-vgo/robotgo/issues/47).\n\n## Update:\n```\ngo get -u github.com/go-vgo/robotgo\n```\n\n注意 go1.10.x C 文件编译缓存问题, [golang #24355](https://github.com/golang/go/issues/24355).\n`go mod vendor` problem, [golang #26366](https://github.com/golang/go/issues/26366).\n\n\n## [Examples:](https://github.com/go-vgo/robotgo/blob/master/examples)\n\n#### [鼠标](https://github.com/go-vgo/robotgo/blob/master/examples/mouse/main.go)\n\n```Go\npackage main\n\nimport (\n\t\"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  // robotgo.ScrollMouse(10, \"up\")\n  robotgo.Scroll(0, -10)\n  robotgo.Scroll(100, 0)\n  robotgo.MilliSleep(100)\n  // robotgo.ScrollRelative(10, -100)\n  robotgo.ScrollSmooth(-10, 6)\n\n  robotgo.MouseSleep = 100\n  robotgo.Move(10, 20)\n  robotgo.MoveRelative(0, -10)\n  robotgo.Drag(10, 10)\n\n  robotgo.Click(\"left\", true)\n  robotgo.MoveSmooth(100, 200, 1.0, 10.0)\n\n  robotgo.Toggle(\"left\")\n  robotgo.Toggle(\"left\", \"up\")\n}\n```\n\n#### [键盘](https://github.com/go-vgo/robotgo/blob/master/examples/key/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  robotgo.TypeStr(\"Hello World. Winter is coming!\")\n  robotgo.TypeStr(\"だんしゃり\", 1.0)\n  // robotgo.TypeStr(\"テストする\")\n\n  robotgo.TypeStr(\"Hi galaxy. こんにちは世界.\")\n  robotgo.Sleep(1)\n\n  // ustr := uint32(robotgo.CharCodeAt(\"テストする\", 0))\n  // robotgo.UnicodeType(ustr)\n\n  robotgo.KeySleep = 100\n  robotgo.KeyTap(\"enter\")\n  // robotgo.TypeStr(\"en\")\n  robotgo.KeyTap(\"i\", \"alt\", \"command\")\n\n  arr := []string{\"alt\", \"command\"}\n  robotgo.KeyTap(\"i\", arr)\n\n  robotgo.MilliSleep(100)\n  robotgo.KeyToggle(\"a\")\n  robotgo.KeyToggle(\"a\", \"up\")\n\n  robotgo.WriteAll(\"テストする\")\n  text, err := robotgo.ReadAll()\n  if err == nil {\n    fmt.Println(text)\n  }\n}\n```\n\n#### [屏幕](https://github.com/go-vgo/robotgo/blob/master/examples/screen/main.go)\n\n```Go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-vgo/robotgo\"\n  \"github.com/vcaesar/imgo\"\n)\n\nfunc main() {\n  x, y := robotgo.GetMousePos()\n  fmt.Println(\"pos: \", x, y)\n\n  color := robotgo.GetPixelColor(100, 200)\n  fmt.Println(\"color----\", color)\n\n  sx, sy := robotgo.GetScreenSize()\n  fmt.Println(\"get screen size: \", sx, sy)\n\n  bit := robotgo.CaptureScreen(10, 10, 30, 30)\n  defer robotgo.FreeBitmap(bit)\n  robotgo.SaveBitmap(bit, \"test_1.png\")\n\n  img := robotgo.ToImage(bit)\n  imgo.Save(\"test.png\", img)\n}\n```\n\n#### [位图](https://github.com/go-vgo/robotgo/blob/master/examples/bitmap/main.go)\n\n```Go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  bitmap := robotgo.CaptureScreen(10, 20, 30, 40)\n  // use `defer robotgo.FreeBitmap(bit)` to free the bitmap\n  defer robotgo.FreeBitmap(bitmap)\n \n  fmt.Println(\"bitmap...\", bitmap)\n  img := robotgo.ToImage(bitmap)\n  robotgo.SavePng(img, \"test_1.png\")\n\n  bit2 := robotgo.ToCBitmap(robotgo.ImgToBitmap(img))\n  fx, fy := robotgo.FindBitmap(bit2)\n  fmt.Println(\"FindBitmap------ \", fx, fy)\n  robotgo.Move(fx, fy)\n\n  arr := robotgo.FindAllBitmap(bit2)\n  fmt.Println(\"Find all bitmap: \", arr)\n  robotgo.SaveBitmap(bitmap, \"test.png\")\n\n  fx, fy = robotgo.FindBitmap(bitmap)\n  fmt.Println(\"FindBitmap------\", fx, fy)\n\n  robotgo.SaveBitmap(bitmap, \"test.png\")\n}\n```\n\n#### [OpenCV](https://github.com/vcaesar/gcv)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n  \"math/rand\"\n\n  \"github.com/go-vgo/robotgo\"\n  \"github.com/vcaesar/gcv\"\n)\n\nfunc main() {\n  opencv()\n}\n\nfunc opencv() {\n  name := \"test.png\"\n  name1 := \"test_001.png\"\n  robotgo.SaveCapture(name1, 10, 10, 30, 30)\n  robotgo.SaveCapture(name)\n\n  fmt.Print(\"gcv find image: \")\n  fmt.Println(gcv.FindImgFile(name1, name))\n  fmt.Println(gcv.FindAllImgFile(name1, name))\n\n  bit := robotgo.OpenBitmap(name1)\n  defer robotgo.FindBitmap(bit)\n  fmt.Print(\"find bitmap: \")\n  fmt.Println(robotgo.FindBitmap(bit))\n\n  // bit0 := robotgo.CaptureScreen()\n  // img := robotgo.ToImage(bit0)\n  // bit1 := robotgo.CaptureScreen(10, 10, 30, 30)\n  // img1 := robotgo.ToImage(bit1)\n  // defer robotgo.FreeBitmapArr(bit0, bit1)\n  img := robotgo.CaptureImg()\n  img1 := robotgo.CaptureImg(10, 10, 30, 30)\n\n  fmt.Print(\"gcv find image: \")\n  fmt.Println(gcv.FindImg(img1, img))\n  fmt.Println()\n\n  res := gcv.FindAllImg(img1, img)\n  fmt.Println(res[0].TopLeft.Y, res[0].Rects.TopLeft.X, res)\n  x, y := res[0].TopLeft.X, res[0].TopLeft.Y\n  robotgo.Move(x, y-rand.Intn(5))\n  robotgo.MilliSleep(100)\n  robotgo.Click()\n\n  res = gcv.FindAll(img1, img) // use find template and sift\n  fmt.Println(\"find all: \", res)\n  res1 := gcv.Find(img1, img)\n  fmt.Println(\"find: \", res1)\n\n  img2, _, _ := robotgo.DecodeImg(\"test_001.png\")\n  x, y = gcv.FindX(img2, img)\n  fmt.Println(x, y)\n}\n```\n\n#### [事件](https://github.com/go-vgo/robotgo/blob/master/examples/gohook/main.go)\n\n```Go\npackage main\n\nimport (\n  \"fmt\"\n\n  \"github.com/go-vgo/robotgo\"\n  hook \"github.com/robotn/gohook\"\n)\n\nfunc main() {\n  add()\n  low()\n  event()\n}\n\nfunc add() {\n  fmt.Println(\"--- Please press ctrl + shift + q to stop hook ---\")\n  robotgo.EventHook(hook.KeyDown, []string{\"q\", \"ctrl\", \"shift\"}, func(e hook.Event) {\n    fmt.Println(\"ctrl-shift-q\")\n    robotgo.EventEnd()\n  })\n\n  fmt.Println(\"--- Please press w---\")\n  robotgo.EventHook(hook.KeyDown, []string{\"w\"}, func(e hook.Event) {\n    fmt.Println(\"w\")\n  })\n\n  s := robotgo.EventStart()\n  <-robotgo.EventProcess(s)\n}\n\nfunc low() {\n\tevChan := hook.Start()\n\tdefer hook.End()\n\n\tfor ev := range evChan {\n\t\tfmt.Println(\"hook: \", ev)\n\t}\n}\n\nfunc event() {\n  ok := robotgo.AddEvents(\"q\", \"ctrl\", \"shift\")\n  if ok {\n    fmt.Println(\"add events...\")\n  }\n\n  keve := robotgo.AddEvent(\"k\")\n  if keve {\n    fmt.Println(\"you press... \", \"k\")\n  }\n\n  mleft := robotgo.AddEvent(\"mleft\")\n  if mleft {\n    fmt.Println(\"you press... \", \"mouse left button\")\n  }\n}\n```\n\n#### [窗口句柄](https://github.com/go-vgo/robotgo/blob/master/examples/window/main.go)\n\n```Go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-vgo/robotgo\"\n)\n\nfunc main() {\n  fpid, err := robotgo.FindIds(\"Google\")\n  if err == nil {\n    fmt.Println(\"pids...\", fpid)\n\n    if len(fpid) > 0 {\n      robotgo.ActivePID(fpid[0])\n\n      robotgo.Kill(fpid[0])\n    }\n  }\n\n  robotgo.ActiveName(\"chrome\")\n\n  isExist, err := robotgo.PidExists(100)\n  if err == nil && isExist {\n    fmt.Println(\"pid exists is\", isExist)\n\n    robotgo.Kill(100)\n  }\n\n  abool := robotgo.Alert(\"test\", \"robotgo\")\n  if abool {\n    fmt.Println(\"ok@@@ \", \"ok\")\n  }\n\n  title := robotgo.GetTitle()\n  fmt.Println(\"title@@@ \", title)\n}\n```\n\n## CrossCompiling\n\n##### Windows64 to windows32\n```Go\nSET CGO_ENABLED=1\nSET GOARCH=386\ngo build main.go\n```\n\n#### Other to windows\n\nInstall Requirements (Ubuntu):\n```bash\nsudo apt install gcc-multilib\nsudo apt install gcc-mingw-w64\nsudo apt install libz-mingw-w64-dev\n```\n\nBuild the binary:\n\n```Go\nGOOS=windows GOARCH=amd64 CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ go build -x ./\n```\n\n```\n// CC=mingw-w64\\x86_64-7.2.0-win32-seh-rt_v5-rev1\\mingw64\\bin\\gcc.exe\n// CXX=mingw-w64\\x86_64-7.2.0-win32-seh-rt_v5-rev1\\mingw64\\bin\\g++.exe\n```\n\n## Authors\n* [The author is vz](https://github.com/vcaesar)\n* [Maintainers](https://github.com/orgs/go-vgo/people)\n* [Contributors](https://github.com/go-vgo/robotgo/graphs/contributors)\n\n## Plans\n- 更新 Find an image on screen, read pixels from an image\n- 更新 Window Handle\n- 尝试支持 Android, 也许支持 IOS\n\n## Contributors\n\n- See [contributors page](https://github.com/go-vgo/robotgo/graphs/contributors) for full list of contributors.\n- See [Contribution Guidelines](https://github.com/go-vgo/robotgo/blob/master/CONTRIBUTING.md).\n\n## License\n\nRobotgo is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0), with portions covered by various BSD-like licenses.\n\nSee [LICENSE-APACHE](http://www.apache.org/licenses/LICENSE-2.0), [LICENSE-MIT](https://github.com/go-vgo/robotgo/blob/master/LICENSE)."
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 2.0087890625,
          "content": "# version format\nversion: \"{build}\"\n\n# Operating system (build VM template)\n# os: Windows Server 2012 R2\nos: Visual Studio 2017\n\n# Platform.\n# platform:\n#   - x64\n#   - x86\n\nclone_folder: c:\\gopath\\src\\github.com\\go-vgo\\robotgo\n\n# Environment variables\nenvironment:\n  global:\n    GOPATH: C:\\gopath\n    CC: gcc.exe\n  matrix:\n    - GOARCH: amd64\n      # GOVERSION: 1.9.3\n      GETH_ARCH: amd64\n      MSYS2_ARCH: x86_64\n      MSYS2_BITS: 64\n      MSYSTEM: MINGW64\n      PATH: C:\\msys64\\mingw64\\bin\\;C:\\Program Files (x86)\\NSIS\\;%PATH%\n    - GOARCH: 386\n      # GOVERSION: 1.9.3\n      GETH_ARCH: 386\n      MSYS2_ARCH: i686\n      MSYS2_BITS: 32\n      MSYSTEM: MINGW32\n      PATH: C:\\msys64\\mingw32\\bin\\;C:\\Program Files (x86)\\NSIS\\;%PATH%\n  # - COMPILER: MINGW_W64\n  #   ARCHITECTURE: x64\n  GOVERSION: 1.23.0\n  # GOPATH: c:\\gopath\n\n# scripts that run after cloning repository\n# install:\n#   - set PATH=%GOPATH%\\bin;c:\\go\\bin;%PATH%\n#   - go version\n#   - go env\n#   - gcc --version\n# - python --version\n\ninstall:\n  - set PATH=%GOPATH%\\bin;c:\\go\\bin;%PATH%\n  - git submodule update --init\n  - rmdir C:\\go /s /q\n  - appveyor DownloadFile https://storage.googleapis.com/golang/go%GOVERSION%.windows-%GETH_ARCH%.zip\n  - 7z x go%GOVERSION%.windows-%GETH_ARCH%.zip -y -oC:\\ > NUL\n  - go version\n  - go env\n  - gcc --version\n\n# To run your custom scripts instead of automatic MSBuild\nbuild_script:\n  # We need to disable firewall - https://github.com/appveyor/ci/issues/1579#issuecomment-309830648\n  - ps: Disable-NetFirewallRule -DisplayName 'File and Printer Sharing (SMB-Out)'\n  - cd c:\\gopath\\src\\github.com\\go-vgo\\robotgo\n  - git branch\n  - go get -t ./...\n\n# To run your custom scripts instead of automatic tests\ntest_script:\n  # Unit tests\n  - ps: Add-AppveyorTest \"Unit Tests\" -Outcome Running\n  - go test -v github.com/go-vgo/robotgo/...\n  - ps: Update-AppveyorTest \"Unit Tests\" -Outcome Passed\n\n# notifications:\n#   - provider: Email\n#     to:\n#       - .io\n#     on_build_failure: true\n#     on_build_status_changed: true\n# to disable deployment\ndeploy: off\n"
        },
        {
          "name": "base",
          "type": "tree",
          "content": null
        },
        {
          "name": "clipboard",
          "type": "tree",
          "content": null
        },
        {
          "name": "cv",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 2.1025390625,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\n/*\nKeys are supported:\n\t\"A-Z a-z 0-9\"\n\n\t\"backspace\"\n\t\"delete\"\n\t\"enter\"\n\t\"tab\"\n\t\"esc\"\n\t\"escape\"\n\t\"up\"\t\tUp arrow key\n\t\"down\"\t\tDown arrow key\n\t\"right\"\t\tRight arrow key\n\t\"left\"\t\tLeft arrow key\n\t\"home\"\n\t\"end\"\n\t\"pageup\"\n\t\"pagedown\"\n\n\t\"f1\"\n\t\"f2\"\n\t\"f3\"\n\t\"f4\"\n\t\"f5\"\n\t\"f6\"\n\t\"f7\"\n\t\"f8\"\n\t\"f9\"\n\t\"f10\"\n\t\"f11\"\n\t\"f12\"\n\t\"f13\"\n\t\"f14\"\n\t\"f15\"\n\t\"f16\"\n\t\"f17\"\n\t\"f18\"\n\t\"f19\"\n\t\"f20\"\n\t\"f21\"\n\t\"f22\"\n\t\"f23\"\n\t\"f24\"\n\n\t\"cmd\"\t\tthis is the \"win\" key for windows\n\t\"lcmd\"\t\tleft command\n\t\"rcmd\"\t\tright command\n\t// \"command\"\n\t\"alt\"\n\t\"lalt\"\t\tleft alt\n\t\"ralt\"\t\tright alt\n\t\"ctrl\"\n\t\"lctrl\"\t\tleft ctrl\n\t\"rctrl\"\t\tright ctrl\n\t\"control\"\n\t\"shift\"\n\t\"lshift\"\tleft shift\n\t\"rshift\"\tright shift\n\t// \"right_shift\"\n\t\"capslock\"\n\t\"space\"\n\t\"print\"\n\t\"printscreen\"      // No Mac support\n\t\"insert\"\n\t\"menu\"\t\t\t\tWindows only\n\n\t\"audio_mute\"\t\tMute the volume\n\t\"audio_vol_down\"\tLower the volume\n\t\"audio_vol_up\"\t\tIncrease the volume\n\t\"audio_play\"\n\t\"audio_stop\"\n\t\"audio_pause\"\n\t\"audio_prev\"\t\tPrevious Track\n\t\"audio_next\"\t\tNext Track\n\t\"audio_rewind\"      Linux only\n\t\"audio_forward\"     Linux only\n\t\"audio_repeat\"      Linux only\n\t\"audio_random\"      Linux only\n\n\n\t\"num0\"\n\t\"num1\"\n\t\"num2\"\n\t\"num3\"\n\t\"num4\"\n\t\"num5\"\n\t\"num6\"\n\t\"num7\"\n\t\"num8\"\n\t\"num9\"\n\t\"num_lock\"\n\n\t\"num.\"\n\t\"num+\"\n\t\"num-\"\n\t\"num*\"\n\t\"num/\"\n\t\"num_clear\"\n\t\"num_enter\"\n\t\"num_equal\"\n\n\t\"lights_mon_up\"\t\t Turn up monitor brightness\t\t\t\t\tNo Windows support\n\t\"lights_mon_down\"\t Turn down monitor brightness\t\t\t\tNo Windows support\n\t\"lights_kbd_toggle\"\t Toggle keyboard backlight on/off\t\t\tNo Windows support\n\t\"lights_kbd_up\"\t\t Turn up keyboard backlight brightness\t\tNo Windows support\n\t\"lights_kbd_down\"\t Turn down keyboard backlight brightness\tNo Windows support\n*/\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "event",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.4267578125,
          "content": "module github.com/go-vgo/robotgo\n\ngo 1.22.0\n\ntoolchain go1.23.2\n\nrequire (\n\tgithub.com/otiai10/gosseract/v2 v2.4.1\n\t// github.com/robotn/gohook v0.31.3\n\tgithub.com/robotn/xgb v0.10.0\n\tgithub.com/robotn/xgbutil v0.10.0\n\tgithub.com/tailscale/win v0.0.0-20240926211701-28f7e73c7afb\n\tgithub.com/vcaesar/gops v0.40.0\n\tgithub.com/vcaesar/imgo v0.40.2\n\tgithub.com/vcaesar/keycode v0.10.1\n\tgithub.com/vcaesar/tt v0.20.1\n)\n\nrequire (\n\tgithub.com/dblohm7/wingoes v0.0.0-20240820181039-f2b84150679e // indirect\n\tgithub.com/ebitengine/purego v0.8.0 // indirect\n\tgithub.com/gen2brain/shm v0.1.1 // indirect\n\tgithub.com/go-ole/go-ole v1.3.0 // indirect\n\tgithub.com/godbus/dbus/v5 v5.1.0 // indirect\n\tgithub.com/jezek/xgb v1.1.1 // indirect\n\tgithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191\n\tgithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683 // indirect\n\tgithub.com/lxn/win v0.0.0-20210218163916-a377121e959e // indirect\n\tgithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 // indirect\n\tgithub.com/shirou/gopsutil/v4 v4.24.9 // indirect\n\tgithub.com/tklauser/go-sysconf v0.3.14 // indirect\n\tgithub.com/tklauser/numcpus v0.9.0 // indirect\n\tgithub.com/yusufpapurcu/wmi v1.2.4 // indirect\n\tgolang.org/x/exp v0.0.0-20241004190924-225e2abe05e6 // indirect\n\tgolang.org/x/image v0.21.0 // indirect\n\tgolang.org/x/sys v0.26.0 // indirect\n)\n\n// replace golang.org/x/sys => github.com/golang/sys v0.0.0-20190109145017-48ac38b7c8cb\n\n// go 1.13\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.68359375,
          "content": "github.com/BurntSushi/freetype-go v0.0.0-20160129220410-b763ddbfe298/go.mod h1:D+QujdIlUNfa0igpNMk6UIvlb6C252URs4yupRUV4lQ=\ngithub.com/BurntSushi/graphics-go v0.0.0-20160129215708-b43f31a4a966/go.mod h1:Mid70uvE93zn9wgF92A/r5ixgnvX8Lh68fxp9KQBaI0=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dblohm7/wingoes v0.0.0-20240820181039-f2b84150679e h1:L+XrFvD0vBIBm+Wf9sFN6aU395t7JROoai0qXZraA4U=\ngithub.com/dblohm7/wingoes v0.0.0-20240820181039-f2b84150679e/go.mod h1:SUxUaAK/0UG5lYyZR1L1nC4AaYYvSSYTWQSH3FPcxKU=\ngithub.com/ebitengine/purego v0.8.0 h1:JbqvnEzRvPpxhCJzJJ2y0RbiZ8nyjccVUrSM3q+GvvE=\ngithub.com/ebitengine/purego v0.8.0/go.mod h1:iIjxzd6CiRiOG0UyXP+V1+jWqUXVjPKLAI0mRfJZTmQ=\ngithub.com/gen2brain/shm v0.1.1 h1:1cTVA5qcsUFixnDHl14TmRoxgfWEEZlTezpUj1vm5uQ=\ngithub.com/gen2brain/shm v0.1.1/go.mod h1:UgIcVtvmOu+aCJpqJX7GOtiN7X2ct+TKLg4RTxwPIUA=\ngithub.com/go-ole/go-ole v1.2.6/go.mod h1:pprOEPIfldk/42T2oK7lQ4v4JSDwmV0As9GaiUsvbm0=\ngithub.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=\ngithub.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=\ngithub.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=\ngithub.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/jezek/xgb v1.1.1 h1:bE/r8ZZtSv7l9gk6nU0mYx51aXrvnyb44892TwSaqS4=\ngithub.com/jezek/xgb v1.1.1/go.mod h1:nrhwO0FX/enq75I7Y7G8iN1ubpSGZEiA3v9e9GyRFlk=\ngithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191 h1:5UHVWNX1qrIbNw7OpKbxe5bHkhHRk3xRKztMjERuCsU=\ngithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191/go.mod h1:Pmpz2BLf55auQZ67u3rvyI2vAQvNetkK/4zYUmpauZQ=\ngithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683 h1:7UMa6KCCMjZEMDtTVdcGu0B1GmmC7QJKiCCjyTAWQy0=\ngithub.com/lufia/plan9stats v0.0.0-20240909124753-873cd0166683/go.mod h1:ilwx/Dta8jXAgpFYFvSWEMwxmbWXyiUHkd5FwyKhb5k=\ngithub.com/lxn/win v0.0.0-20210218163916-a377121e959e h1:H+t6A/QJMbhCSEH5rAuRxh+CtW96g0Or0Fxa9IKr4uc=\ngithub.com/lxn/win v0.0.0-20210218163916-a377121e959e/go.mod h1:KxxjdtRkfNoYDCUP5ryK7XJJNTnpC8atvtmTheChOtk=\ngithub.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646 h1:zYyBkD/k9seD2A7fsi6Oo2LfFZAehjjQMERAvZLEDnQ=\ngithub.com/nfnt/resize v0.0.0-20180221191011-83c6a9932646/go.mod h1:jpp1/29i3P1S/RLdc7JQKbRpFeM1dOBd8T9ki5s+AY8=\ngithub.com/otiai10/gosseract/v2 v2.4.1 h1:G8AyBpXEeSlcq8TI85LH/pM5SXk8Djy2GEXisgyblRw=\ngithub.com/otiai10/gosseract/v2 v2.4.1/go.mod h1:1gNWP4Hgr2o7yqWfs6r5bZxAatjOIdqWxJLWsTsembk=\ngithub.com/otiai10/mint v1.6.3 h1:87qsV/aw1F5as1eH1zS/yqHY85ANKVMgkDrf9rcxbQs=\ngithub.com/otiai10/mint v1.6.3/go.mod h1:MJm72SBthJjz8qhefc4z1PYEieWmy8Bku7CjcAqyUSM=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55 h1:o4JXh1EVt9k/+g42oCprj/FisM4qX9L3sZB3upGN2ZU=\ngithub.com/power-devops/perfstat v0.0.0-20240221224432-82ca36839d55/go.mod h1:OmDBASR4679mdNQnz2pUhc2G8CO2JrUAVFDRBDP/hJE=\ngithub.com/robotn/xgb v0.0.0-20190912153532-2cb92d044934/go.mod h1:SxQhJskUJ4rleVU44YvnrdvxQr0tKy5SRSigBrCgyyQ=\ngithub.com/robotn/xgb v0.10.0 h1:O3kFbIwtwZ3pgLbp1h5slCQ4OpY8BdwugJLrUe6GPIM=\ngithub.com/robotn/xgb v0.10.0/go.mod h1:SxQhJskUJ4rleVU44YvnrdvxQr0tKy5SRSigBrCgyyQ=\ngithub.com/robotn/xgbutil v0.10.0 h1:gvf7mGQqCWQ68aHRtCxgdewRk+/KAJui6l3MJQQRCKw=\ngithub.com/robotn/xgbutil v0.10.0/go.mod h1:svkDXUDQjUiWzLrA0OZgHc4lbOts3C+uRfP6/yjwYnU=\ngithub.com/shirou/gopsutil/v4 v4.24.9 h1:KIV+/HaHD5ka5f570RZq+2SaeFsb/pq+fp2DGNWYoOI=\ngithub.com/shirou/gopsutil/v4 v4.24.9/go.mod h1:3fkaHNeYsUFCGZ8+9vZVWtbyM1k2eRnlL+bWO8Bxa/Q=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tailscale/win v0.0.0-20240926211701-28f7e73c7afb h1:5C+a9Lxq5GYIxsAF8JsMOlZ90+bOFSUQJ8J6XVk4vUM=\ngithub.com/tailscale/win v0.0.0-20240926211701-28f7e73c7afb/go.mod h1:aMd4yDHLjbOuYP6fMxj1d9ACDQlSWwYztcpybGHCQc8=\ngithub.com/tc-hib/winres v0.2.1 h1:YDE0FiP0VmtRaDn7+aaChp1KiF4owBiJa5l964l5ujA=\ngithub.com/tc-hib/winres v0.2.1/go.mod h1:C/JaNhH3KBvhNKVbvdlDWkbMDO9H4fKKDaN7/07SSuk=\ngithub.com/tklauser/go-sysconf v0.3.14 h1:g5vzr9iPFFz24v2KZXs/pvpvh8/V9Fw6vQK5ZZb78yU=\ngithub.com/tklauser/go-sysconf v0.3.14/go.mod h1:1ym4lWMLUOhuBOPGtRcJm7tEGX4SCYNEEEtghGG/8uY=\ngithub.com/tklauser/numcpus v0.9.0 h1:lmyCHtANi8aRUgkckBgoDk1nHCux3n2cgkJLXdQGPDo=\ngithub.com/tklauser/numcpus v0.9.0/go.mod h1:SN6Nq1O3VychhC1npsWostA+oW+VOQTxZrS604NSRyI=\ngithub.com/vcaesar/gops v0.40.0 h1:I+1RCGiV+LkZJUYNzAd373xs0uM2UyeFdZBmow8HfCM=\ngithub.com/vcaesar/gops v0.40.0/go.mod h1:3u/USW7JovqUK6i13VOD3qWfvXXd2TIIKE4PYIv4TOM=\ngithub.com/vcaesar/imgo v0.40.2 h1:5GWScRLdBCMtO1v2I1bs+ZmDLZFINxYSMZ+mtUw5qPM=\ngithub.com/vcaesar/imgo v0.40.2/go.mod h1:MVCl+FxHI2gTgmiHoi0n5xNCbYcfv9SVtdEOUC92+eo=\ngithub.com/vcaesar/keycode v0.10.1 h1:0DesGmMAPWpYTCYddOFiCMKCDKgNnwiQa2QXindVUHw=\ngithub.com/vcaesar/keycode v0.10.1/go.mod h1:JNlY7xbKsh+LAGfY2j4M3znVrGEm5W1R8s/Uv6BJcfQ=\ngithub.com/vcaesar/tt v0.20.1 h1:D/jUeeVCNbq3ad8M7hhtB3J9x5RZ6I1n1eZ0BJp7M+4=\ngithub.com/vcaesar/tt v0.20.1/go.mod h1:cH2+AwGAJm19Wa6xvEa+0r+sXDJBT0QgNQey6mwqLeU=\ngithub.com/yusufpapurcu/wmi v1.2.4 h1:zFUKzehAFReQwLys1b/iSMl+JQGSCSjtVqQn9bBrPo0=\ngithub.com/yusufpapurcu/wmi v1.2.4/go.mod h1:SBZ9tNy3G9/m5Oi98Zks0QjeHVDvuK0qfxQmPyzfmi0=\ngolang.org/x/exp v0.0.0-20241004190924-225e2abe05e6 h1:1wqE9dj9NpSm04INVsJhhEUzhuDVjbcyKH91sVyPATw=\ngolang.org/x/exp v0.0.0-20241004190924-225e2abe05e6/go.mod h1:NQtJDoLvd6faHhE7m4T/1IY708gDefGGjR/iUW8yQQ8=\ngolang.org/x/image v0.21.0 h1:c5qV36ajHpdj4Qi0GnE0jUc/yuo33OLFaa0d+crTD5s=\ngolang.org/x/image v0.21.0/go.mod h1:vUbsLavqK/W303ZroQQVKQ+Af3Yl6Uz1Ppu5J/cLz78=\ngolang.org/x/sys v0.0.0-20190916202348-b4ddaad3f8a3/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201018230417-eeed37f84f13/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201204225414-ed752295db88/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=\ngolang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "img.go",
          "type": "blob",
          "size": 4.248046875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\nimport (\n\t\"image\"\n\t\"os/exec\"\n\t\"unsafe\"\n\n\t\"github.com/vcaesar/imgo\"\n)\n\n// DecodeImg decode the image to image.Image and return\nfunc DecodeImg(path string) (image.Image, string, error) {\n\treturn imgo.DecodeFile(path)\n}\n\n// OpenImg open the image return []byte\nfunc OpenImg(path string) ([]byte, error) {\n\treturn imgo.ImgToBytes(path)\n}\n\n// Read read the file return image.Image\nfunc Read(path string) (image.Image, error) {\n\treturn imgo.Read(path)\n}\n\n// Save create a image file with the image.Image\nfunc Save(img image.Image, path string, quality ...int) error {\n\treturn imgo.Save(path, img, quality...)\n}\n\n// SaveImg save the image by []byte\nfunc SaveImg(b []byte, path string) error {\n\treturn imgo.SaveByte(path, b)\n}\n\n// SavePng save the image by image.Image\nfunc SavePng(img image.Image, path string) error {\n\treturn imgo.SaveToPNG(path, img)\n}\n\n// SaveJpeg save the image by image.Image\nfunc SaveJpeg(img image.Image, path string, quality ...int) error {\n\treturn imgo.SaveToJpeg(path, img, quality...)\n}\n\n// ToByteImg convert image.Image to []byte\nfunc ToByteImg(img image.Image, fm ...string) []byte {\n\treturn imgo.ToByte(img, fm...)\n}\n\n// ToStringImg convert image.Image to string\nfunc ToStringImg(img image.Image, fm ...string) string {\n\treturn string(ToByteImg(img, fm...))\n}\n\n// StrToImg convert base64 string to image.Image\nfunc StrToImg(data string) (image.Image, error) {\n\treturn imgo.StrToImg(data)\n}\n\n// ByteToImg convert []byte to image.Image\nfunc ByteToImg(b []byte) (image.Image, error) {\n\treturn imgo.ByteToImg(b)\n}\n\n// ImgSize get the file image size\nfunc ImgSize(path string) (int, int, error) {\n\treturn imgo.GetSize(path)\n}\n\n// Width return the image.Image width\nfunc Width(img image.Image) int {\n\treturn img.Bounds().Max.X\n}\n\n// Height return the image.Image height\nfunc Height(img image.Image) int {\n\treturn img.Bounds().Max.Y\n}\n\n// RGBAToBitmap convert the standard image.RGBA to Bitmap\nfunc RGBAToBitmap(r1 *image.RGBA) (bit Bitmap) {\n\tbit.Width = r1.Bounds().Size().X\n\tbit.Height = r1.Bounds().Size().Y\n\tbit.Bytewidth = r1.Stride\n\n\tsrc := ToUint8p(r1.Pix)\n\tbit.ImgBuf = src\n\n\tbit.BitsPixel = 32\n\tbit.BytesPerPixel = 32 / 8\n\n\treturn\n}\n\n// ImgToBitmap convert the standard image.Image to Bitmap\nfunc ImgToBitmap(m image.Image) (bit Bitmap) {\n\tbit.Width = m.Bounds().Size().X\n\tbit.Height = m.Bounds().Size().Y\n\n\tpix, stride, _ := imgo.EncodeImg(m)\n\tbit.Bytewidth = stride\n\n\tsrc := ToUint8p(pix)\n\tbit.ImgBuf = src\n\t//\n\tbit.BitsPixel = 32\n\tbit.BytesPerPixel = 32 / 8\n\treturn\n}\n\n// ToUint8p convert the []uint8 to uint8 pointer\nfunc ToUint8p(dst []uint8) *uint8 {\n\tsrc := make([]uint8, len(dst)+10)\n\tfor i := 0; i <= len(dst)-4; i += 4 {\n\t\tsrc[i+3] = dst[i+3]\n\t\tsrc[i] = dst[i+2]\n\t\tsrc[i+1] = dst[i+1]\n\t\tsrc[i+2] = dst[i]\n\t}\n\n\tptr := unsafe.Pointer(&src[0])\n\treturn (*uint8)(ptr)\n}\n\n// ToRGBAGo convert Bitmap to standard image.RGBA\nfunc ToRGBAGo(bmp1 Bitmap) *image.RGBA {\n\timg1 := image.NewRGBA(image.Rect(0, 0, bmp1.Width, bmp1.Height))\n\timg1.Pix = make([]uint8, bmp1.Bytewidth*bmp1.Height)\n\n\tcopyToVUint8A(img1.Pix, bmp1.ImgBuf)\n\timg1.Stride = bmp1.Bytewidth\n\treturn img1\n}\n\nfunc val(p *uint8, n int) uint8 {\n\taddr := uintptr(unsafe.Pointer(p))\n\taddr += uintptr(n)\n\tp1 := (*uint8)(unsafe.Pointer(addr))\n\treturn *p1\n}\n\nfunc copyToVUint8A(dst []uint8, src *uint8) {\n\tfor i := 0; i <= len(dst)-4; i += 4 {\n\t\tdst[i] = val(src, i+2)\n\t\tdst[i+1] = val(src, i+1)\n\t\tdst[i+2] = val(src, i)\n\t\tdst[i+3] = val(src, i+3)\n\t}\n}\n\n// GetText get the image text by tesseract ocr\n//\n// robotgo.GetText(imgPath, lang string)\nfunc GetText(imgPath string, args ...string) (string, error) {\n\tvar lang = \"eng\"\n\n\tif len(args) > 0 {\n\t\tlang = args[0]\n\t\tif lang == \"zh\" {\n\t\t\tlang = \"chi_sim\"\n\t\t}\n\t}\n\n\tbody, err := exec.Command(\"tesseract\", imgPath,\n\t\t\"stdout\", \"-l\", lang).Output()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(body), nil\n}\n"
        },
        {
          "name": "key.go",
          "type": "blob",
          "size": 15.4072265625,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\n/*\n// #include \"key/keycode.h\"\n#include \"key/keypress_c.h\"\n*/\nimport \"C\"\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"reflect\"\n\t\"runtime\"\n\t\"strconv\"\n\t\"strings\"\n\t\"unicode\"\n\t\"unsafe\"\n\n\t\"github.com/go-vgo/robotgo/clipboard\"\n)\n\n// Defining a bunch of constants.\nconst (\n\t// KeyA define key \"a\"\n\tKeyA = \"a\"\n\tKeyB = \"b\"\n\tKeyC = \"c\"\n\tKeyD = \"d\"\n\tKeyE = \"e\"\n\tKeyF = \"f\"\n\tKeyG = \"g\"\n\tKeyH = \"h\"\n\tKeyI = \"i\"\n\tKeyJ = \"j\"\n\tKeyK = \"k\"\n\tKeyL = \"l\"\n\tKeyM = \"m\"\n\tKeyN = \"n\"\n\tKeyO = \"o\"\n\tKeyP = \"p\"\n\tKeyQ = \"q\"\n\tKeyR = \"r\"\n\tKeyS = \"s\"\n\tKeyT = \"t\"\n\tKeyU = \"u\"\n\tKeyV = \"v\"\n\tKeyW = \"w\"\n\tKeyX = \"x\"\n\tKeyY = \"y\"\n\tKeyZ = \"z\"\n\t//\n\tCapA = \"A\"\n\tCapB = \"B\"\n\tCapC = \"C\"\n\tCapD = \"D\"\n\tCapE = \"E\"\n\tCapF = \"F\"\n\tCapG = \"G\"\n\tCapH = \"H\"\n\tCapI = \"I\"\n\tCapJ = \"J\"\n\tCapK = \"K\"\n\tCapL = \"L\"\n\tCapM = \"M\"\n\tCapN = \"N\"\n\tCapO = \"O\"\n\tCapP = \"P\"\n\tCapQ = \"Q\"\n\tCapR = \"R\"\n\tCapS = \"S\"\n\tCapT = \"T\"\n\tCapU = \"U\"\n\tCapV = \"V\"\n\tCapW = \"W\"\n\tCapX = \"X\"\n\tCapY = \"Y\"\n\tCapZ = \"Z\"\n\t//\n\tKey0 = \"0\"\n\tKey1 = \"1\"\n\tKey2 = \"2\"\n\tKey3 = \"3\"\n\tKey4 = \"4\"\n\tKey5 = \"5\"\n\tKey6 = \"6\"\n\tKey7 = \"7\"\n\tKey8 = \"8\"\n\tKey9 = \"9\"\n\n\t// Backspace backspace key string\n\tBackspace = \"backspace\"\n\tDelete    = \"delete\"\n\tEnter     = \"enter\"\n\tTab       = \"tab\"\n\tEsc       = \"esc\"\n\tEscape    = \"escape\"\n\tUp        = \"up\"    // Up arrow key\n\tDown      = \"down\"  // Down arrow key\n\tRight     = \"right\" // Right arrow key\n\tLeft      = \"left\"  // Left arrow key\n\tHome      = \"home\"\n\tEnd       = \"end\"\n\tPageup    = \"pageup\"\n\tPagedown  = \"pagedown\"\n\n\tF1  = \"f1\"\n\tF2  = \"f2\"\n\tF3  = \"f3\"\n\tF4  = \"f4\"\n\tF5  = \"f5\"\n\tF6  = \"f6\"\n\tF7  = \"f7\"\n\tF8  = \"f8\"\n\tF9  = \"f9\"\n\tF10 = \"f10\"\n\tF11 = \"f11\"\n\tF12 = \"f12\"\n\tF13 = \"f13\"\n\tF14 = \"f14\"\n\tF15 = \"f15\"\n\tF16 = \"f16\"\n\tF17 = \"f17\"\n\tF18 = \"f18\"\n\tF19 = \"f19\"\n\tF20 = \"f20\"\n\tF21 = \"f21\"\n\tF22 = \"f22\"\n\tF23 = \"f23\"\n\tF24 = \"f24\"\n\n\tCmd  = \"cmd\"  // is the \"win\" key for windows\n\tLcmd = \"lcmd\" // left command\n\tRcmd = \"rcmd\" // right command\n\t// \"command\"\n\tAlt     = \"alt\"\n\tLalt    = \"lalt\" // left alt\n\tRalt    = \"ralt\" // right alt\n\tCtrl    = \"ctrl\"\n\tLctrl   = \"lctrl\" // left ctrl\n\tRctrl   = \"rctrl\" // right ctrl\n\tControl = \"control\"\n\tShift   = \"shift\"\n\tLshift  = \"lshift\" // left shift\n\tRshift  = \"rshift\" // right shift\n\t// \"right_shift\"\n\tCapslock    = \"capslock\"\n\tSpace       = \"space\"\n\tPrint       = \"print\"\n\tPrintscreen = \"printscreen\" // No Mac support\n\tInsert      = \"insert\"\n\tMenu        = \"menu\" // Windows only\n\n\tAudioMute    = \"audio_mute\"     // Mute the volume\n\tAudioVolDown = \"audio_vol_down\" // Lower the volume\n\tAudioVolUp   = \"audio_vol_up\"   // Increase the volume\n\tAudioPlay    = \"audio_play\"\n\tAudioStop    = \"audio_stop\"\n\tAudioPause   = \"audio_pause\"\n\tAudioPrev    = \"audio_prev\"    // Previous Track\n\tAudioNext    = \"audio_next\"    // Next Track\n\tAudioRewind  = \"audio_rewind\"  // Linux only\n\tAudioForward = \"audio_forward\" // Linux only\n\tAudioRepeat  = \"audio_repeat\"  //  Linux only\n\tAudioRandom  = \"audio_random\"  //  Linux only\n\n\tNum0    = \"num0\" // numpad 0\n\tNum1    = \"num1\"\n\tNum2    = \"num2\"\n\tNum3    = \"num3\"\n\tNum4    = \"num4\"\n\tNum5    = \"num5\"\n\tNum6    = \"num6\"\n\tNum7    = \"num7\"\n\tNum8    = \"num8\"\n\tNum9    = \"num9\"\n\tNumLock = \"num_lock\"\n\n\tNumDecimal = \"num.\"\n\tNumPlus    = \"num+\"\n\tNumMinus   = \"num-\"\n\tNumMul     = \"num*\"\n\tNumDiv     = \"num/\"\n\tNumClear   = \"num_clear\"\n\tNumEnter   = \"num_enter\"\n\tNumEqual   = \"num_equal\"\n\n\tLightsMonUp     = \"lights_mon_up\"     // Turn up monitor brightness\t\t\tNo Windows support\n\tLightsMonDown   = \"lights_mon_down\"   // Turn down monitor brightness\t\tNo Windows support\n\tLightsKbdToggle = \"lights_kbd_toggle\" // Toggle keyboard backlight on/off\t\tNo Windows support\n\tLightsKbdUp     = \"lights_kbd_up\"     // Turn up keyboard backlight brightness\tNo Windows support\n\tLightsKbdDown   = \"lights_kbd_down\"\n)\n\n// keyNames define a map of key names to MMKeyCode\nvar keyNames = map[string]C.MMKeyCode{\n\t\"backspace\": C.K_BACKSPACE,\n\t\"delete\":    C.K_DELETE,\n\t\"enter\":     C.K_RETURN,\n\t\"tab\":       C.K_TAB,\n\t\"esc\":       C.K_ESCAPE,\n\t\"escape\":    C.K_ESCAPE,\n\t\"up\":        C.K_UP,\n\t\"down\":      C.K_DOWN,\n\t\"right\":     C.K_RIGHT,\n\t\"left\":      C.K_LEFT,\n\t\"home\":      C.K_HOME,\n\t\"end\":       C.K_END,\n\t\"pageup\":    C.K_PAGEUP,\n\t\"pagedown\":  C.K_PAGEDOWN,\n\t//\n\t\"f1\":  C.K_F1,\n\t\"f2\":  C.K_F2,\n\t\"f3\":  C.K_F3,\n\t\"f4\":  C.K_F4,\n\t\"f5\":  C.K_F5,\n\t\"f6\":  C.K_F6,\n\t\"f7\":  C.K_F7,\n\t\"f8\":  C.K_F8,\n\t\"f9\":  C.K_F9,\n\t\"f10\": C.K_F10,\n\t\"f11\": C.K_F11,\n\t\"f12\": C.K_F12,\n\t\"f13\": C.K_F13,\n\t\"f14\": C.K_F14,\n\t\"f15\": C.K_F15,\n\t\"f16\": C.K_F16,\n\t\"f17\": C.K_F17,\n\t\"f18\": C.K_F18,\n\t\"f19\": C.K_F19,\n\t\"f20\": C.K_F20,\n\t\"f21\": C.K_F21,\n\t\"f22\": C.K_F22,\n\t\"f23\": C.K_F23,\n\t\"f24\": C.K_F24,\n\t//\n\t\"cmd\":         C.K_META,\n\t\"lcmd\":        C.K_LMETA,\n\t\"rcmd\":        C.K_RMETA,\n\t\"command\":     C.K_META,\n\t\"alt\":         C.K_ALT,\n\t\"lalt\":        C.K_LALT,\n\t\"ralt\":        C.K_RALT,\n\t\"ctrl\":        C.K_CONTROL,\n\t\"lctrl\":       C.K_LCONTROL,\n\t\"rctrl\":       C.K_RCONTROL,\n\t\"control\":     C.K_CONTROL,\n\t\"shift\":       C.K_SHIFT,\n\t\"lshift\":      C.K_LSHIFT,\n\t\"rshift\":      C.K_RSHIFT,\n\t\"right_shift\": C.K_RSHIFT,\n\t\"capslock\":    C.K_CAPSLOCK,\n\t\"space\":       C.K_SPACE,\n\t\"print\":       C.K_PRINTSCREEN,\n\t\"printscreen\": C.K_PRINTSCREEN,\n\t\"insert\":      C.K_INSERT,\n\t\"menu\":        C.K_MENU,\n\n\t\"audio_mute\":     C.K_AUDIO_VOLUME_MUTE,\n\t\"audio_vol_down\": C.K_AUDIO_VOLUME_DOWN,\n\t\"audio_vol_up\":   C.K_AUDIO_VOLUME_UP,\n\t\"audio_play\":     C.K_AUDIO_PLAY,\n\t\"audio_stop\":     C.K_AUDIO_STOP,\n\t\"audio_pause\":    C.K_AUDIO_PAUSE,\n\t\"audio_prev\":     C.K_AUDIO_PREV,\n\t\"audio_next\":     C.K_AUDIO_NEXT,\n\t\"audio_rewind\":   C.K_AUDIO_REWIND,\n\t\"audio_forward\":  C.K_AUDIO_FORWARD,\n\t\"audio_repeat\":   C.K_AUDIO_REPEAT,\n\t\"audio_random\":   C.K_AUDIO_RANDOM,\n\n\t\"num0\":     C.K_NUMPAD_0,\n\t\"num1\":     C.K_NUMPAD_1,\n\t\"num2\":     C.K_NUMPAD_2,\n\t\"num3\":     C.K_NUMPAD_3,\n\t\"num4\":     C.K_NUMPAD_4,\n\t\"num5\":     C.K_NUMPAD_5,\n\t\"num6\":     C.K_NUMPAD_6,\n\t\"num7\":     C.K_NUMPAD_7,\n\t\"num8\":     C.K_NUMPAD_8,\n\t\"num9\":     C.K_NUMPAD_9,\n\t\"num_lock\": C.K_NUMPAD_LOCK,\n\n\t// todo: removed\n\t\"numpad_0\":    C.K_NUMPAD_0,\n\t\"numpad_1\":    C.K_NUMPAD_1,\n\t\"numpad_2\":    C.K_NUMPAD_2,\n\t\"numpad_3\":    C.K_NUMPAD_3,\n\t\"numpad_4\":    C.K_NUMPAD_4,\n\t\"numpad_5\":    C.K_NUMPAD_5,\n\t\"numpad_6\":    C.K_NUMPAD_6,\n\t\"numpad_7\":    C.K_NUMPAD_7,\n\t\"numpad_8\":    C.K_NUMPAD_8,\n\t\"numpad_9\":    C.K_NUMPAD_9,\n\t\"numpad_lock\": C.K_NUMPAD_LOCK,\n\n\t\"num.\":      C.K_NUMPAD_DECIMAL,\n\t\"num+\":      C.K_NUMPAD_PLUS,\n\t\"num-\":      C.K_NUMPAD_MINUS,\n\t\"num*\":      C.K_NUMPAD_MUL,\n\t\"num/\":      C.K_NUMPAD_DIV,\n\t\"num_clear\": C.K_NUMPAD_CLEAR,\n\t\"num_enter\": C.K_NUMPAD_ENTER,\n\t\"num_equal\": C.K_NUMPAD_EQUAL,\n\n\t\"lights_mon_up\":     C.K_LIGHTS_MON_UP,\n\t\"lights_mon_down\":   C.K_LIGHTS_MON_DOWN,\n\t\"lights_kbd_toggle\": C.K_LIGHTS_KBD_TOGGLE,\n\t\"lights_kbd_up\":     C.K_LIGHTS_KBD_UP,\n\t\"lights_kbd_down\":   C.K_LIGHTS_KBD_DOWN,\n\n\t// { NULL:              C.K_NOT_A_KEY }\n}\n\n// CmdCtrl If the operating system is macOS, return the key string \"cmd\",\n// otherwise return the key string \"ctrl\nfunc CmdCtrl() string {\n\tif runtime.GOOS == \"darwin\" {\n\t\treturn \"cmd\"\n\t}\n\treturn \"ctrl\"\n}\n\n// It sends a key press and release to the active application\nfunc tapKeyCode(code C.MMKeyCode, flags C.MMKeyFlags, pid C.uintptr) {\n\tC.toggleKeyCode(code, true, flags, pid)\n\tMilliSleep(3)\n\tC.toggleKeyCode(code, false, flags, pid)\n}\n\nvar keyErr = errors.New(\"Invalid key flag specified.\")\n\nfunc checkKeyCodes(k string) (key C.MMKeyCode, err error) {\n\tif k == \"\" {\n\t\treturn\n\t}\n\n\tif len(k) == 1 {\n\t\tval1 := C.CString(k)\n\t\tdefer C.free(unsafe.Pointer(val1))\n\n\t\tkey = C.keyCodeForChar(*val1)\n\t\tif key == C.K_NOT_A_KEY {\n\t\t\terr = keyErr\n\t\t\treturn\n\t\t}\n\t\treturn\n\t}\n\n\tif v, ok := keyNames[k]; ok {\n\t\tkey = v\n\t\tif key == C.K_NOT_A_KEY {\n\t\t\terr = keyErr\n\t\t\treturn\n\t\t}\n\t}\n\treturn\n}\n\nfunc checkKeyFlags(f string) (flags C.MMKeyFlags) {\n\tm := map[string]C.MMKeyFlags{\n\t\t\"alt\":    C.MOD_ALT,\n\t\t\"ralt\":   C.MOD_ALT,\n\t\t\"lalt\":   C.MOD_ALT,\n\t\t\"cmd\":    C.MOD_META,\n\t\t\"rcmd\":   C.MOD_META,\n\t\t\"lcmd\":   C.MOD_META,\n\t\t\"ctrl\":   C.MOD_CONTROL,\n\t\t\"rctrl\":  C.MOD_CONTROL,\n\t\t\"lctrl\":  C.MOD_CONTROL,\n\t\t\"shift\":  C.MOD_SHIFT,\n\t\t\"rshift\": C.MOD_SHIFT,\n\t\t\"lshift\": C.MOD_SHIFT,\n\t\t\"none\":   C.MOD_NONE,\n\t}\n\n\tif v, ok := m[f]; ok {\n\t\treturn v\n\t}\n\treturn\n}\n\nfunc getFlagsFromValue(value []string) (flags C.MMKeyFlags) {\n\tif len(value) <= 0 {\n\t\treturn\n\t}\n\n\tfor i := 0; i < len(value); i++ {\n\t\tvar f C.MMKeyFlags = C.MOD_NONE\n\n\t\tf = checkKeyFlags(value[i])\n\t\tflags = (C.MMKeyFlags)(flags | f)\n\t}\n\n\treturn\n}\n\nfunc keyTaps(k string, keyArr []string, pid int) error {\n\tflags := getFlagsFromValue(keyArr)\n\tkey, err := checkKeyCodes(k)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\ttapKeyCode(key, flags, C.uintptr(pid))\n\tMilliSleep(KeySleep)\n\treturn nil\n}\n\nfunc keyToggles(k string, keyArr []string, pid int, args ...interface{}) error {\n\tif len(keyArr) <= 0 {\n\t\tkeyArr = append(keyArr, \"down\")\n\t}\n\n\tdown := true\n\tif keyArr[0] == \"up\" {\n\t\tdown = false\n\t}\n\n\tif keyArr[0] == \"up\" || keyArr[0] == \"down\" {\n\t\tkeyArr = keyArr[1:]\n\t}\n\tflags := getFlagsFromValue(keyArr)\n\n\tkey, err := checkKeyCodes(k)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tC.toggleKeyCode(key, C.bool(down), flags, C.uintptr(pid))\n\tif len(args) > 0 {\n\t\tMilliSleep(KeySleep)\n\t}\n\treturn nil\n}\n\n/*\n __  ___  ___________    ____ .______     ______        ___      .______       _______\n|  |/  / |   ____\\   \\  /   / |   _  \\   /  __  \\      /   \\     |   _  \\     |       \\\n|  '  /  |  |__   \\   \\/   /  |  |_)  | |  |  |  |    /  ^  \\    |  |_)  |    |  .--.  |\n|    <   |   __|   \\_    _/   |   _  <  |  |  |  |   /  /_\\  \\   |      /     |  |  |  |\n|  .  \\  |  |____    |  |     |  |_)  | |  `--'  |  /  _____  \\  |  |\\  \\----.|  '--'  |\n|__|\\__\\ |_______|   |__|     |______/   \\______/  /__/     \\__\\ | _| `._____||_______/\n\n*/\n\n// ToInterfaces convert []string to []interface{}\nfunc ToInterfaces(fields []string) []interface{} {\n\tres := make([]interface{}, 0, len(fields))\n\tfor _, s := range fields {\n\t\tres = append(res, s)\n\t}\n\treturn res\n}\n\n// ToStrings convert []interface{} to []string\nfunc ToStrings(fields []interface{}) []string {\n\tres := make([]string, 0, len(fields))\n\tfor _, s := range fields {\n\t\tres = append(res, s.(string))\n\t}\n\treturn res\n}\n\n// toErr it converts a C string to a Go error\nfunc toErr(str *C.char) error {\n\tgstr := C.GoString(str)\n\tif gstr == \"\" {\n\t\treturn nil\n\t}\n\treturn errors.New(gstr)\n}\n\n// KeyTap taps the keyboard code;\n//\n// See keys supported:\n//\n//\thttps://github.com/go-vgo/robotgo/blob/master/docs/keys.md#keys\n//\n// Examples:\n//\n//\trobotgo.KeySleep = 100 // 100 millisecond\n//\trobotgo.KeyTap(\"a\")\n//\trobotgo.KeyTap(\"i\", \"alt\", \"command\")\n//\n//\tarr := []string{\"alt\", \"command\"}\n//\trobotgo.KeyTap(\"i\", arr)\n//\n//\trobotgo.KeyTap(\"k\", pid int)\nfunc KeyTap(key string, args ...interface{}) error {\n\tvar keyArr []string\n\n\tif len(key) > 0 && unicode.IsUpper([]rune(key)[0]) {\n\t\targs = append(args, \"shift\")\n\t}\n\n\tkey = strings.ToLower(key)\n\tif _, ok := Special[key]; ok {\n\t\tkey = Special[key]\n\t\tif len(args) <= 0 {\n\t\t\targs = append(args, \"shift\")\n\t\t}\n\t}\n\n\tpid := 0\n\tif len(args) > 0 {\n\t\tif reflect.TypeOf(args[0]) == reflect.TypeOf(keyArr) {\n\t\t\tkeyArr = args[0].([]string)\n\t\t} else {\n\t\t\tif reflect.TypeOf(args[0]) == reflect.TypeOf(pid) {\n\t\t\t\tpid = args[0].(int)\n\t\t\t\tkeyArr = ToStrings(args[1:])\n\t\t\t} else {\n\t\t\t\tkeyArr = ToStrings(args)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn keyTaps(key, keyArr, pid)\n}\n\n// KeyToggle toggles the keyboard, if there not have args default is \"down\"\n//\n// See keys:\n//\n//\thttps://github.com/go-vgo/robotgo/blob/master/docs/keys.md#keys\n//\n// Examples:\n//\n//\trobotgo.KeyToggle(\"a\")\n//\trobotgo.KeyToggle(\"a\", \"up\")\n//\n//\trobotgo.KeyToggle(\"a\", \"up\", \"alt\", \"cmd\")\n//\trobotgo.KeyToggle(\"k\", pid int)\nfunc KeyToggle(key string, args ...interface{}) error {\n\n\tif len(key) > 0 && unicode.IsUpper([]rune(key)[0]) {\n\t\targs = append(args, \"shift\")\n\t}\n\n\tkey = strings.ToLower(key)\n\tif _, ok := Special[key]; ok {\n\t\tkey = Special[key]\n\t\tif len(args) <= 1 {\n\t\t\targs = append(args, \"shift\")\n\t\t}\n\t}\n\n\tpid := 0\n\tvar keyArr []string\n\tif len(args) > 0 && reflect.TypeOf(args[0]) == reflect.TypeOf(pid) {\n\t\tpid = args[0].(int)\n\t\tkeyArr = ToStrings(args[1:])\n\t} else {\n\t\tkeyArr = ToStrings(args)\n\t}\n\n\treturn keyToggles(key, keyArr, pid)\n}\n\n// KeyPress press key string\nfunc KeyPress(key string, args ...interface{}) error {\n\terr := KeyDown(key, args...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tMilliSleep(1 + rand.Intn(3))\n\treturn KeyUp(key, args...)\n}\n\n// KeyDown press down a key\nfunc KeyDown(key string, args ...interface{}) error {\n\treturn KeyToggle(key, args...)\n}\n\n// KeyUp press up a key\nfunc KeyUp(key string, args ...interface{}) error {\n\tarr := []interface{}{\"up\"}\n\tarr = append(arr, args...)\n\treturn KeyToggle(key, arr...)\n}\n\n// ReadAll read string from clipboard\nfunc ReadAll() (string, error) {\n\treturn clipboard.ReadAll()\n}\n\n// WriteAll write string to clipboard\nfunc WriteAll(text string) error {\n\treturn clipboard.WriteAll(text)\n}\n\n// CharCodeAt char code at utf-8\nfunc CharCodeAt(s string, n int) rune {\n\ti := 0\n\tfor _, r := range s {\n\t\tif i == n {\n\t\t\treturn r\n\t\t}\n\t\ti++\n\t}\n\n\treturn 0\n}\n\n// UnicodeType tap the uint32 unicode\nfunc UnicodeType(str uint32, args ...int) {\n\tcstr := C.uint(str)\n\tpid := 0\n\tif len(args) > 0 {\n\t\tpid = args[0]\n\t}\n\n\tisPid := 0\n\tif len(args) > 1 {\n\t\tisPid = args[1]\n\t}\n\n\tC.unicodeType(cstr, C.uintptr(pid), C.int8_t(isPid))\n}\n\n// ToUC trans string to unicode []string\nfunc ToUC(text string) []string {\n\tvar uc []string\n\n\tfor _, r := range text {\n\t\ttextQ := strconv.QuoteToASCII(string(r))\n\t\ttextUnQ := textQ[1 : len(textQ)-1]\n\n\t\tst := strings.Replace(textUnQ, \"\\\\u\", \"U\", -1)\n\t\tif st == \"\\\\\\\\\" {\n\t\t\tst = \"\\\\\"\n\t\t}\n\t\tif st == `\\\"` {\n\t\t\tst = `\"`\n\t\t}\n\t\tuc = append(uc, st)\n\t}\n\n\treturn uc\n}\n\nfunc inputUTF(str string) {\n\tcstr := C.CString(str)\n\tC.input_utf(cstr)\n\n\tC.free(unsafe.Pointer(cstr))\n}\n\n// TypeStr send a string (supported UTF-8)\n//\n// robotgo.TypeStr(string: \"The string to send\", int: pid, \"milli_sleep time\", \"x11 option\")\n//\n// Examples:\n//\n//\trobotgo.TypeStr(\"abc@123, Hi galaxy, こんにちは\")\n//\trobotgo.TypeStr(\"To be or not to be, this is questions.\", pid int)\nfunc TypeStr(str string, args ...int) {\n\tvar tm, tm1 = 0, 7\n\n\tif len(args) > 1 {\n\t\ttm = args[1]\n\t}\n\tif len(args) > 2 {\n\t\ttm1 = args[2]\n\t}\n\tpid := 0\n\tif len(args) > 0 {\n\t\tpid = args[0]\n\t}\n\n\tif runtime.GOOS == \"linux\" {\n\t\tstrUc := ToUC(str)\n\t\tfor i := 0; i < len(strUc); i++ {\n\t\t\tru := []rune(strUc[i])\n\t\t\tif len(ru) <= 1 {\n\t\t\t\tustr := uint32(CharCodeAt(strUc[i], 0))\n\t\t\t\tUnicodeType(ustr, pid)\n\t\t\t} else {\n\t\t\t\tinputUTF(strUc[i])\n\t\t\t\tMilliSleep(tm1)\n\t\t\t}\n\n\t\t\tMilliSleep(tm)\n\t\t}\n\t\treturn\n\t}\n\n\tfor i := 0; i < len([]rune(str)); i++ {\n\t\tustr := uint32(CharCodeAt(str, i))\n\t\tUnicodeType(ustr, pid)\n\t\t// if len(args) > 0 {\n\t\tMilliSleep(tm)\n\t\t// }\n\t}\n\tMilliSleep(KeySleep)\n}\n\n// PasteStr paste a string (support UTF-8),\n// write the string to clipboard and tap `cmd + v`\nfunc PasteStr(str string) error {\n\terr := clipboard.WriteAll(str)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif runtime.GOOS == \"darwin\" {\n\t\treturn KeyTap(\"v\", \"command\")\n\t}\n\n\treturn KeyTap(\"v\", \"control\")\n}\n\n// TypeStrDelay type string with delayed\n// And you can use robotgo.KeySleep = 100 to delayed not this function\nfunc TypeStrDelay(str string, delay int) {\n\tTypeStr(str)\n\tMilliSleep(delay)\n}\n\n// SetDelay sets the key and mouse delay\n// robotgo.SetDelay(100) option the robotgo.KeySleep and robotgo.MouseSleep = d\nfunc SetDelay(d ...int) {\n\tv := 10\n\tif len(d) > 0 {\n\t\tv = d[0]\n\t}\n\n\tKeySleep = v\n\tMouseSleep = v\n}\n"
        },
        {
          "name": "key",
          "type": "tree",
          "content": null
        },
        {
          "name": "keycode.go",
          "type": "blob",
          "size": 0.97265625,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\nimport (\n\t\"github.com/vcaesar/keycode\"\n)\n\ntype uMap map[string]uint16\n\n// MouseMap robotgo hook mouse's code map\nvar MouseMap = keycode.MouseMap\n\nconst (\n\t// Mleft mouse left button\n\tMleft      = \"left\"\n\tMright     = \"right\"\n\tCenter     = \"center\"\n\tWheelDown  = \"wheelDown\"\n\tWheelUp    = \"wheelUp\"\n\tWheelLeft  = \"wheelLeft\"\n\tWheelRight = \"wheelRight\"\n)\n\n// Keycode robotgo hook key's code map\nvar Keycode = keycode.Keycode\n\n// Special is the special key map\nvar Special = keycode.Special\n"
        },
        {
          "name": "mouse",
          "type": "tree",
          "content": null
        },
        {
          "name": "ps.go",
          "type": "blob",
          "size": 1.71875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\nimport ps \"github.com/vcaesar/gops\"\n\n// Nps process struct\ntype Nps struct {\n\tPid  int\n\tName string\n}\n\n// Pids get the all process id\nfunc Pids() ([]int, error) {\n\treturn ps.Pids()\n}\n\n// PidExists determine whether the process exists\nfunc PidExists(pid int) (bool, error) {\n\treturn ps.PidExists(pid)\n}\n\n// Process get the all process struct\nfunc Process() ([]Nps, error) {\n\tvar npsArr []Nps\n\tnps, err := ps.Process()\n\tfor i := 0; i < len(nps); i++ {\n\t\tnp := Nps{\n\t\t\tnps[i].Pid,\n\t\t\tnps[i].Name,\n\t\t}\n\n\t\tnpsArr = append(npsArr, np)\n\t}\n\n\treturn npsArr, err\n}\n\n// FindName find the process name by the process id\nfunc FindName(pid int) (string, error) {\n\treturn ps.FindName(pid)\n}\n\n// FindNames find the all process name\nfunc FindNames() ([]string, error) {\n\treturn ps.FindNames()\n}\n\n// FindIds finds the all processes named with a subset\n// of \"name\" (case insensitive),\n// return matched IDs.\nfunc FindIds(name string) ([]int, error) {\n\treturn ps.FindIds(name)\n}\n\n// FindPath find the process path by the process pid\nfunc FindPath(pid int) (string, error) {\n\treturn ps.FindPath(pid)\n}\n\n// Run run a cmd shell\nfunc Run(path string) ([]byte, error) {\n\treturn ps.Run(path)\n}\n\n// Kill kill the process by PID\nfunc Kill(pid int) error {\n\treturn ps.Kill(pid)\n}\n"
        },
        {
          "name": "robot_info_test.go",
          "type": "blob",
          "size": 1.328125,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo_test\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"runtime\"\n\t\"testing\"\n\n\t\"github.com/go-vgo/robotgo\"\n\t\"github.com/vcaesar/tt\"\n)\n\nfunc TestGetVer(t *testing.T) {\n\tfmt.Println(\"go version: \", runtime.Version())\n\tver := robotgo.GetVersion()\n\n\ttt.Expect(t, robotgo.Version, ver)\n}\n\nfunc TestGetScreenSize(t *testing.T) {\n\tx, y := robotgo.GetScreenSize()\n\tlog.Println(\"Get screen size: \", x, y)\n\n\trect := robotgo.GetScreenRect()\n\tfmt.Println(\"Get screen rect: \", rect)\n\n\tx, y = robotgo.Location()\n\tfmt.Println(\"Get location: \", x, y)\n}\n\nfunc TestGetSysScale(t *testing.T) {\n\ts := robotgo.SysScale()\n\tlog.Println(\"SysScale: \", s)\n\n\tf := robotgo.ScaleF()\n\tlog.Println(\"scale: \", f)\n}\n\nfunc TestGetTitle(t *testing.T) {\n\t// just exercise the function, it used to crash with a segfault + \"Maximum\n\t// number of clients reached\"\n\tfor i := 0; i < 128; i++ {\n\t\trobotgo.GetTitle()\n\t}\n}\n"
        },
        {
          "name": "robotgo.go",
          "type": "blob",
          "size": 22.7626953125,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n/*\nPackage robotgo Go native cross-platform system automation.\n\nPlease make sure Golang, GCC is installed correctly before installing RobotGo;\n\nSee Requirements:\n\n\thttps://github.com/go-vgo/robotgo#requirements\n\nInstallation:\n\nWith Go module support (Go 1.11+), just import:\n\n\timport \"github.com/go-vgo/robotgo\"\n\nOtherwise, to install the robotgo package, run the command:\n\n\tgo get -u github.com/go-vgo/robotgo\n*/\npackage robotgo\n\n/*\n#cgo darwin CFLAGS: -x objective-c -Wno-deprecated-declarations\n#cgo darwin LDFLAGS: -framework Cocoa -framework OpenGL -framework IOKit\n#cgo darwin LDFLAGS: -framework Carbon -framework CoreFoundation\n//\n#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > MAC_OS_VERSION_14_4\n#cgo darwin LDFLAGS: -framework ScreenCaptureKit\n#endif\n\n#cgo linux CFLAGS: -I/usr/src\n#cgo linux LDFLAGS: -L/usr/src -lm -lX11 -lXtst\n\n#cgo windows LDFLAGS: -lgdi32 -luser32\n//\n#include \"screen/goScreen.h\"\n#include \"mouse/mouse_c.h\"\n#include \"window/goWindow.h\"\n*/\nimport \"C\"\n\nimport (\n\t\"errors\"\n\t\"image\"\n\t\"runtime\"\n\t\"time\"\n\t\"unsafe\"\n\n\t\"github.com/vcaesar/tt\"\n)\n\nconst (\n\t// Version get the robotgo version\n\tVersion = \"v1.00.0.1189, MT. Baker!\"\n)\n\n// GetVersion get the robotgo version\nfunc GetVersion() string {\n\treturn Version\n}\n\nvar (\n\t// MouseSleep set the mouse default millisecond sleep time\n\tMouseSleep = 0\n\t// KeySleep set the key default millisecond sleep time\n\tKeySleep = 0\n\n\t// DisplayID set the screen display id\n\tDisplayID = -1\n\n\t// NotPid used the hwnd not pid in windows\n\tNotPid bool\n\t// Scale option the os screen scale\n\tScale bool\n)\n\ntype (\n\t// Map a map[string]interface{}\n\tMap map[string]interface{}\n\t// CHex define CHex as c rgb Hex type (C.MMRGBHex)\n\tCHex C.MMRGBHex\n\t// CBitmap define CBitmap as C.MMBitmapRef type\n\tCBitmap C.MMBitmapRef\n\t// Handle define window Handle as C.MData type\n\tHandle C.MData\n)\n\n// Bitmap define the go Bitmap struct\n//\n// The common type conversion of bitmap:\n//\n//\thttps://github.com/go-vgo/robotgo/blob/master/docs/keys.md#type-conversion\ntype Bitmap struct {\n\tImgBuf        *uint8\n\tWidth, Height int\n\n\tBytewidth     int\n\tBitsPixel     uint8\n\tBytesPerPixel uint8\n}\n\n// Point is point struct\ntype Point struct {\n\tX int\n\tY int\n}\n\n// Size is size structure\ntype Size struct {\n\tW, H int\n}\n\n// Rect is rect structure\ntype Rect struct {\n\tPoint\n\tSize\n}\n\n// Try handler(err)\nfunc Try(fun func(), handler func(interface{})) {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\thandler(err)\n\t\t}\n\t}()\n\tfun()\n}\n\n// MilliSleep sleep tm milli second\nfunc MilliSleep(tm int) {\n\ttime.Sleep(time.Duration(tm) * time.Millisecond)\n}\n\n// Sleep time.Sleep tm second\nfunc Sleep(tm int) {\n\ttime.Sleep(time.Duration(tm) * time.Second)\n}\n\n// Deprecated: use the MilliSleep(),\n//\n// MicroSleep time C.microsleep(tm)\nfunc MicroSleep(tm float64) {\n\tC.microsleep(C.double(tm))\n}\n\n// GoString trans C.char to string\nfunc GoString(char *C.char) string {\n\treturn C.GoString(char)\n}\n\n/*\n      _______.  ______ .______       _______  _______ .__   __.\n    /       | /      ||   _  \\     |   ____||   ____||  \\ |  |\n   |   (----`|  ,----'|  |_)  |    |  |__   |  |__   |   \\|  |\n    \\   \\    |  |     |      /     |   __|  |   __|  |  . `  |\n.----)   |   |  `----.|  |\\  \\----.|  |____ |  |____ |  |\\   |\n|_______/     \\______|| _| `._____||_______||_______||__| \\__|\n*/\n\n// ToMMRGBHex trans CHex to C.MMRGBHex\nfunc ToMMRGBHex(hex CHex) C.MMRGBHex {\n\treturn C.MMRGBHex(hex)\n}\n\n// UintToHex trans uint32 to robotgo.CHex\nfunc UintToHex(u uint32) CHex {\n\thex := U32ToHex(C.uint32_t(u))\n\treturn CHex(hex)\n}\n\n// U32ToHex trans C.uint32_t to C.MMRGBHex\nfunc U32ToHex(hex C.uint32_t) C.MMRGBHex {\n\treturn C.MMRGBHex(hex)\n}\n\n// U8ToHex trans *C.uint8_t to C.MMRGBHex\nfunc U8ToHex(hex *C.uint8_t) C.MMRGBHex {\n\treturn C.MMRGBHex(*hex)\n}\n\n// PadHex trans C.MMRGBHex to string\nfunc PadHex(hex C.MMRGBHex) string {\n\tcolor := C.pad_hex(hex)\n\tgcolor := C.GoString(color)\n\tC.free(unsafe.Pointer(color))\n\n\treturn gcolor\n}\n\n// PadHexs trans CHex to string\nfunc PadHexs(hex CHex) string {\n\treturn PadHex(C.MMRGBHex(hex))\n}\n\n// HexToRgb trans hex to rgb\nfunc HexToRgb(hex uint32) *C.uint8_t {\n\treturn C.color_hex_to_rgb(C.uint32_t(hex))\n}\n\n// RgbToHex trans rgb to hex\nfunc RgbToHex(r, g, b uint8) C.uint32_t {\n\treturn C.color_rgb_to_hex(C.uint8_t(r), C.uint8_t(g), C.uint8_t(b))\n}\n\n// GetPxColor get the pixel color return C.MMRGBHex\nfunc GetPxColor(x, y int, displayId ...int) C.MMRGBHex {\n\tcx := C.int32_t(x)\n\tcy := C.int32_t(y)\n\n\tdisplay := displayIdx(displayId...)\n\tcolor := C.get_px_color(cx, cy, C.int32_t(display))\n\treturn color\n}\n\n// GetPixelColor get the pixel color return string\nfunc GetPixelColor(x, y int, displayId ...int) string {\n\treturn PadHex(GetPxColor(x, y, displayId...))\n}\n\n// GetLocationColor get the location pos's color\nfunc GetLocationColor(displayId ...int) string {\n\tx, y := Location()\n\treturn GetPixelColor(x, y, displayId...)\n}\n\n// IsMain is main display\nfunc IsMain(displayId int) bool {\n\treturn displayId == GetMainId()\n}\n\nfunc displayIdx(id ...int) int {\n\tdisplay := -1\n\tif DisplayID != -1 {\n\t\tdisplay = DisplayID\n\t}\n\tif len(id) > 0 {\n\t\tdisplay = id[0]\n\t}\n\n\treturn display\n}\n\nfunc getNumDisplays() int {\n\treturn int(C.get_num_displays())\n}\n\n// GetHWNDByPid get the hwnd by pid\nfunc GetHWNDByPid(pid int) int {\n\treturn int(C.get_hwnd_by_pid(C.uintptr(pid)))\n}\n\n// SysScale get the sys scale\nfunc SysScale(displayId ...int) float64 {\n\tdisplay := displayIdx(displayId...)\n\ts := C.sys_scale(C.int32_t(display))\n\treturn float64(s)\n}\n\n// Scaled get the screen scaled return scale size\nfunc Scaled(x int, displayId ...int) int {\n\tf := ScaleF(displayId...)\n\treturn Scaled0(x, f)\n}\n\n// Scaled0 return int(x * f)\nfunc Scaled0(x int, f float64) int {\n\treturn int(float64(x) * f)\n}\n\n// Scaled1 return int(x / f)\nfunc Scaled1(x int, f float64) int {\n\treturn int(float64(x) / f)\n}\n\n// GetScreenSize get the screen size\nfunc GetScreenSize() (int, int) {\n\tsize := C.getMainDisplaySize()\n\treturn int(size.w), int(size.h)\n}\n\n// GetScreenRect get the screen rect (x, y, w, h)\nfunc GetScreenRect(displayId ...int) Rect {\n\tdisplay := -1\n\tif len(displayId) > 0 {\n\t\tdisplay = displayId[0]\n\t}\n\n\trect := C.getScreenRect(C.int32_t(display))\n\tx, y, w, h := int(rect.origin.x), int(rect.origin.y),\n\t\tint(rect.size.w), int(rect.size.h)\n\n\tif runtime.GOOS == \"windows\" {\n\t\t// f := ScaleF(displayId...)\n\t\tf := ScaleF()\n\t\tx, y, w, h = Scaled0(x, f), Scaled0(y, f), Scaled0(w, f), Scaled0(h, f)\n\t}\n\treturn Rect{\n\t\tPoint{X: x, Y: y},\n\t\tSize{W: w, H: h},\n\t}\n}\n\n// GetScaleSize get the screen scale size\nfunc GetScaleSize(displayId ...int) (int, int) {\n\tx, y := GetScreenSize()\n\tf := ScaleF(displayId...)\n\treturn int(float64(x) * f), int(float64(y) * f)\n}\n\n// CaptureScreen capture the screen return bitmap(c struct),\n// use `defer robotgo.FreeBitmap(bitmap)` to free the bitmap\n//\n// robotgo.CaptureScreen(x, y, w, h int)\nfunc CaptureScreen(args ...int) CBitmap {\n\tvar x, y, w, h C.int32_t\n\tdisplayId := -1\n\tif DisplayID != -1 {\n\t\tdisplayId = DisplayID\n\t}\n\n\tif len(args) > 4 {\n\t\tdisplayId = args[4]\n\t}\n\n\tif len(args) > 3 {\n\t\tx = C.int32_t(args[0])\n\t\ty = C.int32_t(args[1])\n\t\tw = C.int32_t(args[2])\n\t\th = C.int32_t(args[3])\n\t} else {\n\t\t// Get the main screen rect.\n\t\trect := GetScreenRect(displayId)\n\t\tif runtime.GOOS == \"windows\" {\n\t\t\tx = C.int32_t(rect.X)\n\t\t\ty = C.int32_t(rect.Y)\n\t\t}\n\n\t\tw = C.int32_t(rect.W)\n\t\th = C.int32_t(rect.H)\n\t}\n\n\tisPid := 0\n\tif NotPid || len(args) > 5 {\n\t\tisPid = 1\n\t}\n\n\tbit := C.capture_screen(x, y, w, h, C.int32_t(displayId), C.int8_t(isPid))\n\treturn CBitmap(bit)\n}\n\n// CaptureGo capture the screen and return bitmap(go struct)\nfunc CaptureGo(args ...int) Bitmap {\n\tbit := CaptureScreen(args...)\n\tdefer FreeBitmap(bit)\n\n\treturn ToBitmap(bit)\n}\n\n// CaptureImg capture the screen and return image.Image, error\nfunc CaptureImg(args ...int) (image.Image, error) {\n\tbit := CaptureScreen(args...)\n\tif bit == nil {\n\t\treturn nil, errors.New(\"Capture image not found.\")\n\t}\n\tdefer FreeBitmap(bit)\n\n\treturn ToImage(bit), nil\n}\n\n// FreeBitmap free and dealloc the C bitmap\nfunc FreeBitmap(bitmap CBitmap) {\n\t// C.destroyMMBitmap(bitmap)\n\tC.bitmap_dealloc(C.MMBitmapRef(bitmap))\n}\n\n// FreeBitmapArr free and dealloc the C bitmap array\nfunc FreeBitmapArr(bit ...CBitmap) {\n\tfor i := 0; i < len(bit); i++ {\n\t\tFreeBitmap(bit[i])\n\t}\n}\n\n// ToMMBitmapRef trans CBitmap to C.MMBitmapRef\nfunc ToMMBitmapRef(bit CBitmap) C.MMBitmapRef {\n\treturn C.MMBitmapRef(bit)\n}\n\n// ToBitmap trans C.MMBitmapRef to Bitmap\nfunc ToBitmap(bit CBitmap) Bitmap {\n\tbitmap := Bitmap{\n\t\tImgBuf:        (*uint8)(bit.imageBuffer),\n\t\tWidth:         int(bit.width),\n\t\tHeight:        int(bit.height),\n\t\tBytewidth:     int(bit.bytewidth),\n\t\tBitsPixel:     uint8(bit.bitsPerPixel),\n\t\tBytesPerPixel: uint8(bit.bytesPerPixel),\n\t}\n\n\treturn bitmap\n}\n\n// ToCBitmap trans Bitmap to C.MMBitmapRef\nfunc ToCBitmap(bit Bitmap) CBitmap {\n\tcbitmap := C.createMMBitmap_c(\n\t\t(*C.uint8_t)(bit.ImgBuf),\n\t\tC.int32_t(bit.Width),\n\t\tC.int32_t(bit.Height),\n\t\tC.int32_t(bit.Bytewidth),\n\t\tC.uint8_t(bit.BitsPixel),\n\t\tC.uint8_t(bit.BytesPerPixel),\n\t)\n\n\treturn CBitmap(cbitmap)\n}\n\n// ToImage convert C.MMBitmapRef to standard image.Image\nfunc ToImage(bit CBitmap) image.Image {\n\treturn ToRGBA(bit)\n}\n\n// ToRGBA convert C.MMBitmapRef to standard image.RGBA\nfunc ToRGBA(bit CBitmap) *image.RGBA {\n\tbmp1 := ToBitmap(bit)\n\treturn ToRGBAGo(bmp1)\n}\n\n// ImgToCBitmap trans image.Image to CBitmap\nfunc ImgToCBitmap(img image.Image) CBitmap {\n\treturn ToCBitmap(ImgToBitmap(img))\n}\n\n// ByteToCBitmap trans []byte to CBitmap\nfunc ByteToCBitmap(by []byte) CBitmap {\n\timg, _ := ByteToImg(by)\n\treturn ImgToCBitmap(img)\n}\n\n// SetXDisplayName set XDisplay name (Linux)\nfunc SetXDisplayName(name string) error {\n\tcname := C.CString(name)\n\tstr := C.set_XDisplay_name(cname)\n\tC.free(unsafe.Pointer(cname))\n\n\treturn toErr(str)\n}\n\n// GetXDisplayName get XDisplay name (Linux)\nfunc GetXDisplayName() string {\n\tname := C.get_XDisplay_name()\n\tgname := C.GoString(name)\n\tC.free(unsafe.Pointer(name))\n\n\treturn gname\n}\n\n// CloseMainDisplay close the main X11 display\nfunc CloseMainDisplay() {\n\tC.close_main_display()\n}\n\n// Deprecated: use the ScaledF(),\n//\n// ScaleX get the primary display horizontal DPI scale factor, drop\nfunc ScaleX() int {\n\treturn int(C.scaleX())\n}\n\n/*\n.___  ___.   ______    __    __       _______. _______\n|   \\/   |  /  __  \\  |  |  |  |     /       ||   ____|\n|  \\  /  | |  |  |  | |  |  |  |    |   (----`|  |__\n|  |\\/|  | |  |  |  | |  |  |  |     \\   \\    |   __|\n|  |  |  | |  `--'  | |  `--'  | .----)   |   |  |____\n|__|  |__|  \\______/   \\______/  |_______/    |_______|\n\n*/\n\n// CheckMouse check the mouse button\nfunc CheckMouse(btn string) C.MMMouseButton {\n\t// button = args[0].(C.MMMouseButton)\n\tm1 := map[string]C.MMMouseButton{\n\t\t\"left\":       C.LEFT_BUTTON,\n\t\t\"center\":     C.CENTER_BUTTON,\n\t\t\"right\":      C.RIGHT_BUTTON,\n\t\t\"wheelDown\":  C.WheelDown,\n\t\t\"wheelUp\":    C.WheelUp,\n\t\t\"wheelLeft\":  C.WheelLeft,\n\t\t\"wheelRight\": C.WheelRight,\n\t}\n\tif v, ok := m1[btn]; ok {\n\t\treturn v\n\t}\n\n\treturn C.LEFT_BUTTON\n}\n\n// MoveScale calculate the os scale factor x, y\nfunc MoveScale(x, y int, displayId ...int) (int, int) {\n\tif Scale && runtime.GOOS == \"windows\" {\n\t\tf := ScaleF()\n\t\tx, y = Scaled1(x, f), Scaled1(y, f)\n\t}\n\n\treturn x, y\n}\n\n// Move move the mouse to (x, y)\n//\n// Examples:\n//\n//\trobotgo.MouseSleep = 100  // 100 millisecond\n//\trobotgo.Move(10, 10)\nfunc Move(x, y int, displayId ...int) {\n\tx, y = MoveScale(x, y, displayId...)\n\n\tcx := C.int32_t(x)\n\tcy := C.int32_t(y)\n\tC.moveMouse(C.MMPointInt32Make(cx, cy))\n\n\tMilliSleep(MouseSleep)\n}\n\n// Deprecated: use the DragSmooth(),\n//\n// Drag drag the mouse to (x, y),\n// It's not valid now, use the DragSmooth()\nfunc Drag(x, y int, args ...string) {\n\tx, y = MoveScale(x, y)\n\n\tvar button C.MMMouseButton = C.LEFT_BUTTON\n\tcx := C.int32_t(x)\n\tcy := C.int32_t(y)\n\n\tif len(args) > 0 {\n\t\tbutton = CheckMouse(args[0])\n\t}\n\n\tC.dragMouse(C.MMPointInt32Make(cx, cy), button)\n\tMilliSleep(MouseSleep)\n}\n\n// DragSmooth drag the mouse like smooth to (x, y)\n//\n// Examples:\n//\n//\trobotgo.DragSmooth(10, 10)\nfunc DragSmooth(x, y int, args ...interface{}) {\n\tToggle(\"left\")\n\tMilliSleep(50)\n\tMoveSmooth(x, y, args...)\n\tToggle(\"left\", \"up\")\n}\n\n// MoveSmooth move the mouse smooth,\n// moves mouse to x, y human like, with the mouse button up.\n//\n// robotgo.MoveSmooth(x, y int, low, high float64, mouseDelay int)\n//\n// Examples:\n//\n//\trobotgo.MoveSmooth(10, 10)\n//\trobotgo.MoveSmooth(10, 10, 1.0, 2.0)\nfunc MoveSmooth(x, y int, args ...interface{}) bool {\n\t// if runtime.GOOS == \"windows\" {\n\t// \tf := ScaleF()\n\t// \tx, y = Scaled0(x, f), Scaled0(y, f)\n\t// }\n\tx, y = MoveScale(x, y)\n\n\tcx := C.int32_t(x)\n\tcy := C.int32_t(y)\n\n\tvar (\n\t\tmouseDelay = 1\n\t\tlow        C.double\n\t\thigh       C.double\n\t)\n\n\tif len(args) > 2 {\n\t\tmouseDelay = args[2].(int)\n\t}\n\n\tif len(args) > 1 {\n\t\tlow = C.double(args[0].(float64))\n\t\thigh = C.double(args[1].(float64))\n\t} else {\n\t\tlow = 1.0\n\t\thigh = 3.0\n\t}\n\n\tcbool := C.smoothlyMoveMouse(C.MMPointInt32Make(cx, cy), low, high)\n\tMilliSleep(MouseSleep + mouseDelay)\n\n\treturn bool(cbool)\n}\n\n// MoveArgs get the mouse relative args\nfunc MoveArgs(x, y int) (int, int) {\n\tmx, my := Location()\n\tmx = mx + x\n\tmy = my + y\n\n\treturn mx, my\n}\n\n// MoveRelative move mouse with relative\nfunc MoveRelative(x, y int) {\n\tMove(MoveArgs(x, y))\n}\n\n// MoveSmoothRelative move mouse smooth with relative\nfunc MoveSmoothRelative(x, y int, args ...interface{}) {\n\tmx, my := MoveArgs(x, y)\n\tMoveSmooth(mx, my, args...)\n}\n\n// Location get the mouse location position return x, y\nfunc Location() (int, int) {\n\tpos := C.location()\n\tx := int(pos.x)\n\ty := int(pos.y)\n\n\tif runtime.GOOS == \"windows\" {\n\t\tf := ScaleF()\n\t\tx, y = Scaled0(x, f), Scaled0(y, f)\n\t}\n\n\treturn x, y\n}\n\n// Click click the mouse button\n//\n// robotgo.Click(button string, double bool)\n//\n// Examples:\n//\n//\trobotgo.Click() // default is left button\n//\trobotgo.Click(\"right\")\n//\trobotgo.Click(\"wheelLeft\")\nfunc Click(args ...interface{}) {\n\tvar (\n\t\tbutton C.MMMouseButton = C.LEFT_BUTTON\n\t\tdouble bool\n\t)\n\n\tif len(args) > 0 {\n\t\tbutton = CheckMouse(args[0].(string))\n\t}\n\n\tif len(args) > 1 {\n\t\tdouble = args[1].(bool)\n\t}\n\n\tif !double {\n\t\tC.clickMouse(button)\n\t} else {\n\t\tC.doubleClick(button)\n\t}\n\n\tMilliSleep(MouseSleep)\n}\n\n// MoveClick move and click the mouse\n//\n// robotgo.MoveClick(x, y int, button string, double bool)\n//\n// Examples:\n//\n//\trobotgo.MouseSleep = 100\n//\trobotgo.MoveClick(10, 10)\nfunc MoveClick(x, y int, args ...interface{}) {\n\tMove(x, y)\n\tMilliSleep(50)\n\tClick(args...)\n}\n\n// MovesClick move smooth and click the mouse\n//\n// use the `robotgo.MouseSleep = 100`\nfunc MovesClick(x, y int, args ...interface{}) {\n\tMoveSmooth(x, y)\n\tMilliSleep(50)\n\tClick(args...)\n}\n\n// Toggle toggle the mouse, support button:\n//\n//\t\t\"left\", \"center\", \"right\",\n//\t \"wheelDown\", \"wheelUp\", \"wheelLeft\", \"wheelRight\"\n//\n// Examples:\n//\n//\trobotgo.Toggle(\"left\") // default is down\n//\trobotgo.Toggle(\"left\", \"up\")\nfunc Toggle(key ...interface{}) error {\n\tvar button C.MMMouseButton = C.LEFT_BUTTON\n\tif len(key) > 0 {\n\t\tbutton = CheckMouse(key[0].(string))\n\t}\n\n\tdown := true\n\tif len(key) > 1 && key[1].(string) == \"up\" {\n\t\tdown = false\n\t}\n\tC.toggleMouse(C.bool(down), button)\n\tif len(key) > 2 {\n\t\tMilliSleep(MouseSleep)\n\t}\n\n\treturn nil\n}\n\n// MouseDown send mouse down event\nfunc MouseDown(key ...interface{}) error {\n\treturn Toggle(key...)\n}\n\n// MouseUp send mouse up event\nfunc MouseUp(key ...interface{}) error {\n\tif len(key) <= 0 {\n\t\tkey = append(key, \"left\")\n\t}\n\treturn Toggle(append(key, \"up\")...)\n}\n\n// Scroll scroll the mouse to (x, y)\n//\n// robotgo.Scroll(x, y, msDelay int)\n//\n// Examples:\n//\n//\trobotgo.Scroll(10, 10)\nfunc Scroll(x, y int, args ...int) {\n\tvar msDelay = 10\n\tif len(args) > 0 {\n\t\tmsDelay = args[0]\n\t}\n\n\tcx := C.int(x)\n\tcy := C.int(y)\n\n\tC.scrollMouseXY(cx, cy)\n\tMilliSleep(MouseSleep + msDelay)\n}\n\n// ScrollDir scroll the mouse with direction to (x, \"up\")\n// supported: \"up\", \"down\", \"left\", \"right\"\n//\n// Examples:\n//\n//\trobotgo.ScrollDir(10, \"down\")\n//\trobotgo.ScrollDir(10, \"up\")\nfunc ScrollDir(x int, direction ...interface{}) {\n\td := \"down\"\n\tif len(direction) > 0 {\n\t\td = direction[0].(string)\n\t}\n\n\tif d == \"down\" {\n\t\tScroll(0, -x)\n\t}\n\tif d == \"up\" {\n\t\tScroll(0, x)\n\t}\n\n\tif d == \"left\" {\n\t\tScroll(x, 0)\n\t}\n\tif d == \"right\" {\n\t\tScroll(-x, 0)\n\t}\n\t// MilliSleep(MouseSleep)\n}\n\n// ScrollSmooth scroll the mouse smooth,\n// default scroll 5 times and sleep 100 millisecond\n//\n// robotgo.ScrollSmooth(toy, num, sleep, tox)\n//\n// Examples:\n//\n//\trobotgo.ScrollSmooth(-10)\n//\trobotgo.ScrollSmooth(-10, 6, 200, -10)\nfunc ScrollSmooth(to int, args ...int) {\n\ti := 0\n\tnum := 5\n\tif len(args) > 0 {\n\t\tnum = args[0]\n\t}\n\ttm := 100\n\tif len(args) > 1 {\n\t\ttm = args[1]\n\t}\n\ttox := 0\n\tif len(args) > 2 {\n\t\ttox = args[2]\n\t}\n\n\tfor {\n\t\tScroll(tox, to)\n\t\tMilliSleep(tm)\n\t\ti++\n\t\tif i == num {\n\t\t\tbreak\n\t\t}\n\t}\n\tMilliSleep(MouseSleep)\n}\n\n// ScrollRelative scroll mouse with relative\n//\n// Examples:\n//\n//\trobotgo.ScrollRelative(10, 10)\nfunc ScrollRelative(x, y int, args ...int) {\n\tmx, my := MoveArgs(x, y)\n\tScroll(mx, my, args...)\n}\n\n/*\n____    __    ____  __  .__   __.  _______   ______   ____    __    ____\n\\   \\  /  \\  /   / |  | |  \\ |  | |       \\ /  __  \\  \\   \\  /  \\  /   /\n \\   \\/    \\/   /  |  | |   \\|  | |  .--.  |  |  |  |  \\   \\/    \\/   /\n  \\            /   |  | |  . `  | |  |  |  |  |  |  |   \\            /\n   \\    /\\    /    |  | |  |\\   | |  '--'  |  `--'  |    \\    /\\    /\n    \\__/  \\__/     |__| |__| \\__| |_______/ \\______/      \\__/  \\__/\n\n*/\n\nfunc alertArgs(args ...string) (string, string) {\n\tvar (\n\t\tdefaultBtn = \"Ok\"\n\t\tcancelBtn  = \"Cancel\"\n\t)\n\n\tif len(args) > 0 {\n\t\tdefaultBtn = args[0]\n\t}\n\n\tif len(args) > 1 {\n\t\tcancelBtn = args[1]\n\t}\n\n\treturn defaultBtn, cancelBtn\n}\n\nfunc showAlert(title, msg string, args ...string) bool {\n\tdefaultBtn, cancelBtn := alertArgs(args...)\n\n\tcTitle := C.CString(title)\n\tcMsg := C.CString(msg)\n\tdefaultButton := C.CString(defaultBtn)\n\tcancelButton := C.CString(cancelBtn)\n\n\tcbool := C.showAlert(cTitle, cMsg, defaultButton, cancelButton)\n\tibool := int(cbool)\n\n\tC.free(unsafe.Pointer(cTitle))\n\tC.free(unsafe.Pointer(cMsg))\n\tC.free(unsafe.Pointer(defaultButton))\n\tC.free(unsafe.Pointer(cancelButton))\n\n\treturn ibool == 0\n}\n\n// IsValid valid the window\nfunc IsValid() bool {\n\tabool := C.is_valid()\n\tgbool := bool(abool)\n\treturn gbool\n}\n\n// SetActive set the window active\nfunc SetActive(win Handle) {\n\tSetActiveC(C.MData(win))\n}\n\n// SetActiveC set the window active\nfunc SetActiveC(win C.MData) {\n\tC.set_active(win)\n}\n\n// GetActive get the active window\nfunc GetActive() Handle {\n\treturn Handle(GetActiveC())\n}\n\n// GetActiveC get the active window\nfunc GetActiveC() C.MData {\n\tmdata := C.get_active()\n\t// fmt.Println(\"active----\", mdata)\n\treturn mdata\n}\n\n// MinWindow set the window min\nfunc MinWindow(pid int, args ...interface{}) {\n\tvar (\n\t\tstate = true\n\t\tisPid int\n\t)\n\n\tif len(args) > 0 {\n\t\tstate = args[0].(bool)\n\t}\n\tif len(args) > 1 || NotPid {\n\t\tisPid = 1\n\t}\n\n\tC.min_window(C.uintptr(pid), C.bool(state), C.int8_t(isPid))\n}\n\n// MaxWindow set the window max\nfunc MaxWindow(pid int, args ...interface{}) {\n\tvar (\n\t\tstate = true\n\t\tisPid int\n\t)\n\n\tif len(args) > 0 {\n\t\tstate = args[0].(bool)\n\t}\n\tif len(args) > 1 || NotPid {\n\t\tisPid = 1\n\t}\n\n\tC.max_window(C.uintptr(pid), C.bool(state), C.int8_t(isPid))\n}\n\n// CloseWindow close the window\nfunc CloseWindow(args ...int) {\n\tif len(args) <= 0 {\n\t\tC.close_main_window()\n\t\treturn\n\t}\n\n\tvar pid, isPid int\n\tif len(args) > 0 {\n\t\tpid = args[0]\n\t}\n\tif len(args) > 1 || NotPid {\n\t\tisPid = 1\n\t}\n\n\tC.close_window_by_PId(C.uintptr(pid), C.int8_t(isPid))\n}\n\n// SetHandle set the window handle\nfunc SetHandle(hwnd int) {\n\tchwnd := C.uintptr(hwnd)\n\tC.setHandle(chwnd)\n}\n\n// SetHandlePid set the window handle by pid\nfunc SetHandlePid(pid int, args ...int) {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\n\tC.set_handle_pid_mData(C.uintptr(pid), C.int8_t(isPid))\n}\n\n// GetHandById get handle mdata by id\nfunc GetHandById(id int, args ...int) Handle {\n\tisPid := 1\n\tif len(args) > 0 {\n\t\tisPid = args[0]\n\t}\n\treturn GetHandByPid(id, isPid)\n}\n\n// GetHandByPid get handle mdata by pid\nfunc GetHandByPid(pid int, args ...int) Handle {\n\treturn Handle(GetHandByPidC(pid, args...))\n}\n\n// Deprecated: use the GetHandByPid(),\n//\n// GetHandPid get handle mdata by pid\nfunc GetHandPid(pid int, args ...int) Handle {\n\treturn GetHandByPid(pid, args...)\n}\n\n// GetHandByPidC get handle mdata by pid\nfunc GetHandByPidC(pid int, args ...int) C.MData {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\n\treturn C.set_handle_pid(C.uintptr(pid), C.int8_t(isPid))\n}\n\n// GetHandle get the window handle\nfunc GetHandle() int {\n\thwnd := C.get_handle()\n\tghwnd := int(hwnd)\n\t// fmt.Println(\"gethwnd---\", ghwnd)\n\treturn ghwnd\n}\n\n// Deprecated: use the GetHandle(),\n//\n// # GetBHandle get the window handle, Wno-deprecated\n//\n// This function will be removed in version v1.0.0\nfunc GetBHandle() int {\n\ttt.Drop(\"GetBHandle\", \"GetHandle\")\n\thwnd := C.b_get_handle()\n\tghwnd := int(hwnd)\n\t//fmt.Println(\"gethwnd---\", ghwnd)\n\treturn ghwnd\n}\n\nfunc cgetTitle(pid, isPid int) string {\n\ttitle := C.get_title_by_pid(C.uintptr(pid), C.int8_t(isPid))\n\tgtitle := C.GoString(title)\n\n\treturn gtitle\n}\n\n// GetTitle get the window title return string\n//\n// Examples:\n//\n//\tfmt.Println(robotgo.GetTitle())\n//\n//\tids, _ := robotgo.FindIds()\n//\trobotgo.GetTitle(ids[0])\nfunc GetTitle(args ...int) string {\n\tif len(args) <= 0 {\n\t\ttitle := C.get_main_title()\n\t\tgtitle := C.GoString(title)\n\t\treturn gtitle\n\t}\n\n\tif len(args) > 1 {\n\t\treturn internalGetTitle(args[0], args[1])\n\t}\n\n\treturn internalGetTitle(args[0])\n}\n\n// GetPid get the process id return int32\nfunc GetPid() int {\n\tpid := C.get_PID()\n\treturn int(pid)\n}\n\n// internalGetBounds get the window bounds\nfunc internalGetBounds(pid, isPid int) (int, int, int, int) {\n\tbounds := C.get_bounds(C.uintptr(pid), C.int8_t(isPid))\n\treturn int(bounds.X), int(bounds.Y), int(bounds.W), int(bounds.H)\n}\n\n// internalGetClient get the window client bounds\nfunc internalGetClient(pid, isPid int) (int, int, int, int) {\n\tbounds := C.get_client(C.uintptr(pid), C.int8_t(isPid))\n\treturn int(bounds.X), int(bounds.Y), int(bounds.W), int(bounds.H)\n}\n\n// Is64Bit determine whether the sys is 64bit\nfunc Is64Bit() bool {\n\tb := C.Is64Bit()\n\treturn bool(b)\n}\n\nfunc internalActive(pid, isPid int) {\n\tC.active_PID(C.uintptr(pid), C.int8_t(isPid))\n}\n\n// ActivePid active the window by Pid,\n// If args[0] > 0 on the Windows platform via a window handle to active\n// func ActivePid(pid int32, args ...int) {\n// \tvar isPid int\n// \tif len(args) > 0 {\n// \t\tisPid = args[0]\n// \t}\n\n// \tC.active_PID(C.uintptr(pid), C.uintptr(isPid))\n// }\n\n// ActiveName active the window by name\n//\n// Examples:\n//\n//\trobotgo.ActiveName(\"chrome\")\nfunc ActiveName(name string) error {\n\tpids, err := FindIds(name)\n\tif err == nil && len(pids) > 0 {\n\t\treturn ActivePid(pids[0])\n\t}\n\n\treturn err\n}\n"
        },
        {
          "name": "robotgo_adb.go",
          "type": "blob",
          "size": 0.015625,
          "content": "package robotgo\n"
        },
        {
          "name": "robotgo_android.go",
          "type": "blob",
          "size": 0.015625,
          "content": "package robotgo\n"
        },
        {
          "name": "robotgo_fn_v1.go",
          "type": "blob",
          "size": 1.8251953125,
          "content": "package robotgo\n\nimport \"github.com/vcaesar/tt\"\n\n// Deprecated: use the Move(),\n//\n// MoveMouse move the mouse\nfunc MoveMouse(x, y int) {\n\tMove(x, y)\n}\n\n// Deprecated: use the DragSmooth(),\n//\n// DragMouse drag the mouse to (x, y),\n// It's same with the DragSmooth() now\nfunc DragMouse(x, y int, args ...interface{}) {\n\tToggle(\"left\")\n\tMilliSleep(50)\n\t// Drag(x, y, args...)\n\tMoveSmooth(x, y, args...)\n\tToggle(\"left\", \"up\")\n}\n\n// Deprecated: use the MoveSmooth(),\n//\n// MoveMouseSmooth move the mouse smooth,\n// moves mouse to x, y human like, with the mouse button up.\nfunc MoveMouseSmooth(x, y int, args ...interface{}) bool {\n\treturn MoveSmooth(x, y, args...)\n}\n\n// Deprecated: use the function Location()\n//\n// GetMousePos get the mouse's position return x, y\nfunc GetMousePos() (int, int) {\n\treturn Location()\n}\n\n// Deprecated: use the Click(),\n//\n// # MouseClick click the mouse\n//\n// robotgo.MouseClick(button string, double bool)\nfunc MouseClick(args ...interface{}) {\n\tClick(args...)\n}\n\n// Deprecated: use the TypeStr(),\n//\n// # TypeStringDelayed type string delayed, Wno-deprecated\n//\n// This function will be removed in version v1.0.0\nfunc TypeStringDelayed(str string, delay int) {\n\ttt.Drop(\"TypeStringDelayed\", \"TypeStrDelay\")\n\tTypeStrDelay(str, delay)\n}\n\n// Deprecated: use the ScaledF(),\n//\n// Scale1 get the screen scale (only windows old), drop\nfunc Scale1() int {\n\tdpi := map[int]int{\n\t\t0: 100,\n\t\t// DPI Scaling Level\n\t\t96:  100,\n\t\t120: 125,\n\t\t144: 150,\n\t\t168: 175,\n\t\t192: 200,\n\t\t216: 225,\n\t\t// Custom DPI\n\t\t240: 250,\n\t\t288: 300,\n\t\t384: 400,\n\t\t480: 500,\n\t}\n\n\tx := ScaleX()\n\treturn dpi[x]\n}\n\n// Deprecated: use the ScaledF(),\n//\n// Scale0 return ScaleX() / 0.96, drop\nfunc Scale0() int {\n\treturn int(float64(ScaleX()) / 0.96)\n}\n\n// Deprecated: use the ScaledF(),\n//\n// Mul mul the scale, drop\nfunc Mul(x int) int {\n\ts := Scale1()\n\treturn x * s / 100\n}\n"
        },
        {
          "name": "robotgo_mac.go",
          "type": "blob",
          "size": 0.6796875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build darwin\n// +build darwin\n\npackage robotgo\n\n/*\n#include <CoreGraphics/CoreGraphics.h>\n*/\nimport \"C\"\n\n// GetMainId get the main display id\nfunc GetMainId() int {\n\treturn int(C.CGMainDisplayID())\n}\n"
        },
        {
          "name": "robotgo_mac_unix.go",
          "type": "blob",
          "size": 0.67578125,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build !windows\n// +build !windows\n\npackage robotgo\n\n// ScaleF get the system scale val\nfunc ScaleF(displayId ...int) float64 {\n\tf := SysScale(displayId...)\n\tif f == 0.0 {\n\t\tf = 1.0\n\t}\n\treturn f\n}\n"
        },
        {
          "name": "robotgo_mac_win.go",
          "type": "blob",
          "size": 1.8623046875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build darwin || windows\n// +build darwin windows\n\npackage robotgo\n\n// GetBounds get the window bounds\nfunc GetBounds(pid int, args ...int) (int, int, int, int) {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\n\treturn internalGetBounds(pid, isPid)\n}\n\n// GetClient get the window client bounds\nfunc GetClient(pid int, args ...int) (int, int, int, int) {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\n\treturn internalGetClient(pid, isPid)\n}\n\n// internalGetTitle get the window title\nfunc internalGetTitle(pid int, args ...int) string {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\tgtitle := cgetTitle(pid, isPid)\n\n\treturn gtitle\n}\n\n// ActivePid active the window by PID,\n//\n// If args[0] > 0 on the Windows platform via a window handle to active\n//\n// Examples:\n//\n//\tids, _ := robotgo.FindIds()\n//\trobotgo.ActivePid(ids[0])\nfunc ActivePid(pid int, args ...int) error {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t}\n\n\tinternalActive(pid, isPid)\n\treturn nil\n}\n\n// DisplaysNum get the count of displays\nfunc DisplaysNum() int {\n\treturn getNumDisplays()\n}\n\n// Alert show a alert window\n// Displays alert with the attributes.\n// If cancel button is not given, only the default button is displayed\n//\n// Examples:\n//\n//\trobotgo.Alert(\"hi\", \"window\", \"ok\", \"cancel\")\nfunc Alert(title, msg string, args ...string) bool {\n\treturn showAlert(title, msg, args...)\n}\n"
        },
        {
          "name": "robotgo_ocr.go",
          "type": "blob",
          "size": 0.90625,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build ocr\n// +build ocr\n\npackage robotgo\n\nimport (\n\t\"github.com/otiai10/gosseract\"\n)\n\n// GetText get the image text by tesseract ocr\nfunc GetText(imgPath string, args ...string) (string, error) {\n\tvar lang = \"eng\"\n\n\tif len(args) > 0 {\n\t\tlang = args[0]\n\t\tif lang == \"zh\" {\n\t\t\tlang = \"chi_sim\"\n\t\t}\n\t}\n\n\tclient := gosseract.NewClient()\n\tdefer client.Close()\n\n\tclient.SetImage(imgPath)\n\tclient.SetLanguage(lang)\n\treturn client.Text()\n}\n"
        },
        {
          "name": "robotgo_test.go",
          "type": "blob",
          "size": 4.0498046875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build darwin || windows\n// +build darwin windows\n\npackage robotgo\n\nimport (\n\t\"testing\"\n\n\t\"github.com/vcaesar/tt\"\n)\n\nfunc TestColor(t *testing.T) {\n\ts := GetPixelColor(10, 10)\n\ttt.IsType(t, \"string\", s)\n\ttt.NotEmpty(t, s)\n\n\tc := GetPxColor(10, 10)\n\ts1 := PadHex(c)\n\ttt.Equal(t, s, s1)\n}\n\nfunc TestSize(t *testing.T) {\n\tx, y := GetScreenSize()\n\ttt.NotZero(t, x)\n\ttt.NotZero(t, y)\n\n\tx, y = GetScaleSize()\n\ttt.NotZero(t, x)\n\ttt.NotZero(t, y)\n}\n\nfunc TestMoveMouse(t *testing.T) {\n\tMove(20, 20)\n\tMilliSleep(50)\n\tx, y := Location()\n\n\ttt.Equal(t, 20, x)\n\ttt.Equal(t, 20, y)\n}\n\nfunc TestMoveMouseSmooth(t *testing.T) {\n\tb := MoveSmooth(100, 100)\n\tMilliSleep(50)\n\tx, y := Location()\n\n\ttt.True(t, b)\n\ttt.Equal(t, 100, x)\n\ttt.Equal(t, 100, y)\n}\n\nfunc TestDragMouse(t *testing.T) {\n\tDragSmooth(500, 500)\n\tMilliSleep(50)\n\tx, y := Location()\n\n\ttt.Equal(t, 500, x)\n\ttt.Equal(t, 500, y)\n}\n\nfunc TestScrollMouse(t *testing.T) {\n\tScrollDir(120, \"up\")\n\tScrollDir(100, \"right\")\n\n\tScroll(0, 120)\n\tMilliSleep(100)\n\n\tScroll(210, 210)\n\tMilliSleep(10)\n}\n\nfunc TestMoveRelative(t *testing.T) {\n\tMove(200, 200)\n\tMilliSleep(50)\n\n\tMoveRelative(10, -10)\n\tMilliSleep(50)\n\n\tx, y := Location()\n\ttt.Equal(t, 210, x)\n\ttt.Equal(t, 190, y)\n}\n\nfunc TestMoveSmoothRelative(t *testing.T) {\n\tMove(200, 200)\n\tMilliSleep(50)\n\n\tMoveSmoothRelative(10, -10)\n\tMilliSleep(50)\n\n\tx, y := Location()\n\ttt.Equal(t, 210, x)\n\ttt.Equal(t, 190, y)\n}\n\nfunc TestMouseToggle(t *testing.T) {\n\te := Toggle(\"right\")\n\ttt.Nil(t, e)\n\n\te = Toggle(\"right\", \"up\")\n\ttt.Nil(t, e)\n\n\te = MouseDown(\"left\")\n\ttt.Nil(t, e)\n\n\te = MouseUp(\"left\")\n\ttt.Nil(t, e)\n}\n\nfunc TestKey(t *testing.T) {\n\te := KeyTap(\"v\", \"cmd\")\n\ttt.Nil(t, e)\n\n\te = KeyTap(\"enter\")\n\ttt.Nil(t, e)\n\n\te = KeyToggle(\"v\", \"up\")\n\ttt.Nil(t, e)\n\n\te = KeyDown(\"a\")\n\ttt.Nil(t, e)\n\te = KeyUp(\"a\")\n\ttt.Nil(t, e)\n\n\te = KeyPress(\"b\")\n\ttt.Nil(t, e)\n}\n\nfunc TestClip(t *testing.T) {\n\terr := WriteAll(\"s\")\n\ttt.Nil(t, err)\n\n\ts, e := ReadAll()\n\ttt.Equal(t, \"s\", s)\n\ttt.Nil(t, e)\n}\n\nfunc TestTypeStr(t *testing.T) {\n\tc := CharCodeAt(\"s\", 0)\n\ttt.Equal(t, 115, c)\n\n\te := PasteStr(\"s\")\n\ttt.Nil(t, e)\n\n\ts1 := \"abc\\\\\\\\cd/s@世界\"\n\tuc := ToUC(s1)\n\ttt.Equal(t, \"[a b c \\\\ \\\\ c d / s @ U4e16 U754c]\", uc)\n}\n\nfunc TestKeyCode(t *testing.T) {\n\tm := MouseMap[\"left\"]\n\ttt.Equal(t, 1, m)\n\n\tk := Keycode[\"1\"]\n\ttt.Equal(t, 2, k)\n\n\ts := Special[\"+\"]\n\ttt.Equal(t, \"=\", s)\n\n\ttt.Equal(t, \"0\", Key0)\n\ttt.Equal(t, \"a\", KeyA)\n}\n\nfunc TestImage(t *testing.T) {\n\tbit := CaptureScreen()\n\tdefer FreeBitmap(bit)\n\ttt.NotNil(t, bit)\n\n\timg := ToImage(bit)\n\terr := SavePng(img, \"robot_test.png\")\n\ttt.Nil(t, err)\n\n\timg1, err := CaptureImg(10, 10, 20, 20)\n\ttt.Nil(t, err)\n\te := Save(img1, \"robot_img.jpeg\", 50)\n\ttt.Nil(t, e)\n\n\ttt.Equal(t, 20, Width(img1))\n\ttt.Equal(t, 20, Height(img1))\n\n\tbit1 := ImgToBitmap(img1)\n\ttt.Equal(t, bit1.Width, Width(img1))\n\ttt.Equal(t, bit1.Height, Height(img1))\n}\n\nfunc TestPs(t *testing.T) {\n\tid, err := Pids()\n\ttt.Not(t, \"[]\", id)\n\ttt.IsType(t, \"[]int\", id)\n\ttt.Nil(t, err)\n\n\tps, e := Process()\n\ttt.Not(t, \"[]\", ps)\n\ttt.IsType(t, \"[]robotgo.Nps\", ps)\n\ttt.Nil(t, e)\n\n\tb, e := PidExists(id[0])\n\ttt.Bool(t, b)\n\ttt.Nil(t, e)\n\n\tn, e := FindName(id[0])\n\ttt.NotEmpty(t, n)\n\ttt.Nil(t, e)\n\n\tn1, e := FindNames()\n\ttt.Not(t, \"[]\", n1)\n\ttt.IsType(t, \"[]string\", n1)\n\ttt.Nil(t, e)\n\n\tid, err = FindIds(n1[0])\n\ttt.Not(t, \"[]\", id)\n\ttt.IsType(t, \"[]int\", id)\n\ttt.Nil(t, err)\n\n\tif len(id) > 0 {\n\t\te := KeyTap(\"v\", id[0], \"cmd\")\n\t\ttt.Nil(t, e)\n\t}\n\n\t// n, e = FindPath(id[0])\n\t// tt.NotEmpty(t, n)\n\t// tt.Nil(t, e)\n}\n\n// func TestAlert(t *testing.T) {\n// \tgo func() {\n// \t\tMilliSleep(200)\n// \t\tKeyTap(\"enter\")\n// \t\tlog.Println(\"tap...\")\n// \t}()\n\n// \ti := Alert(\"t\", \"msg\")\n//\ttt.True(t, i)\n// }\n"
        },
        {
          "name": "robotgo_win.go",
          "type": "blob",
          "size": 2.6337890625,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build windows\n// +build windows\n\npackage robotgo\n\nimport (\n\t\"syscall\"\n\t\"unsafe\"\n\n\t// \"github.com/lxn/win\"\n\t\"github.com/tailscale/win\"\n)\n\n// FindWindow find window hwnd by name\nfunc FindWindow(name string) win.HWND {\n\thwnd := win.FindWindow(nil, syscall.StringToUTF16Ptr(name))\n\treturn hwnd\n}\n\n// GetHWND get foreground window hwnd\nfunc GetHWND() win.HWND {\n\thwnd := win.GetForegroundWindow()\n\treturn hwnd\n}\n\n// SendInput send n input event\nfunc SendInput(nInputs uint32, pInputs unsafe.Pointer, cbSize int32) uint32 {\n\treturn win.SendInput(nInputs, pInputs, cbSize)\n}\n\n// SendMsg send a message with hwnd\nfunc SendMsg(hwnd win.HWND, msg uint32, wParam, lParam uintptr) uintptr {\n\treturn win.SendMessage(hwnd, msg, wParam, lParam)\n}\n\n// SetActiveWindow set window active with hwnd\nfunc SetActiveWindow(hwnd win.HWND) win.HWND {\n\treturn win.SetActiveWindow(hwnd)\n}\n\n// SetFocus set window focus with hwnd\nfunc SetFocus(hwnd win.HWND) win.HWND {\n\treturn win.SetFocus(hwnd)\n}\n\n// SetForeg set the window into the foreground by hwnd\nfunc SetForeg(hwnd win.HWND) bool {\n\treturn win.SetForegroundWindow(hwnd)\n}\n\n// GetMain get the main display hwnd\nfunc GetMain() win.HWND {\n\treturn win.GetActiveWindow()\n}\n\n// GetMainId get the main display id\nfunc GetMainId() int {\n\treturn int(GetMain())\n}\n\n// ScaleF get the system scale value\n// if \"displayId == -2\" this function will get the desktop scale value\nfunc ScaleF(displayId ...int) (f float64) {\n\tif len(displayId) > 0 && displayId[0] != -1 {\n\t\tif displayId[0] >= 0 {\n\t\t\tdpi := GetDPI(win.HWND(displayId[0]))\n\t\t\tf = float64(dpi) / 96.0\n\t\t}\n\n\t\tif displayId[0] == -2 {\n\t\t\tf = float64(GetDPI(GetDesktopWindow())) / 96.0\n\t\t}\n\t} else {\n\t\tf = float64(GetMainDPI()) / 96.0\n\t}\n\n\tif f == 0.0 {\n\t\tf = 1.0\n\t}\n\treturn f\n}\n\n// GetDesktopWindow get the desktop window hwnd id\nfunc GetDesktopWindow() win.HWND {\n\treturn win.GetDesktopWindow()\n}\n\n// GetMainDPI get the display dpi\nfunc GetMainDPI() int {\n\treturn int(GetDPI(GetHWND()))\n}\n\n// GetDPI get the window dpi\nfunc GetDPI(hwnd win.HWND) uint32 {\n\treturn win.GetDpiForWindow(hwnd)\n}\n\n// GetSysDPI get the system metrics dpi\nfunc GetSysDPI(idx int32, dpi uint32) int32 {\n\treturn win.GetSystemMetricsForDpi(idx, dpi)\n}\n"
        },
        {
          "name": "robotgo_x11.go",
          "type": "blob",
          "size": 4.8232421875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\n//go:build !darwin && !windows\n// +build !darwin,!windows\n\npackage robotgo\n\nimport (\n\t\"errors\"\n\t\"log\"\n\n\t\"github.com/robotn/xgb\"\n\t\"github.com/robotn/xgb/xinerama\"\n\t\"github.com/robotn/xgb/xproto\"\n\t\"github.com/robotn/xgbutil\"\n\t\"github.com/robotn/xgbutil/ewmh\"\n)\n\nvar xu *xgbutil.XUtil\n\n// GetBounds get the window bounds\nfunc GetBounds(pid int, args ...int) (int, int, int, int) {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t\treturn internalGetBounds(pid, isPid)\n\t}\n\n\txid, err := GetXid(xu, pid)\n\tif err != nil {\n\t\tlog.Println(\"Get Xid from Pid errors is: \", err)\n\t\treturn 0, 0, 0, 0\n\t}\n\n\treturn internalGetBounds(int(xid), isPid)\n}\n\n// GetClient get the window client bounds\nfunc GetClient(pid int, args ...int) (int, int, int, int) {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t\treturn internalGetClient(pid, isPid)\n\t}\n\n\txid, err := GetXid(xu, pid)\n\tif err != nil {\n\t\tlog.Println(\"Get Xid from Pid errors is: \", err)\n\t\treturn 0, 0, 0, 0\n\t}\n\n\treturn internalGetClient(int(xid), isPid)\n}\n\n// internalGetTitle get the window title\nfunc internalGetTitle(pid int, args ...int) string {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t\treturn cgetTitle(pid, isPid)\n\t}\n\n\txid, err := GetXid(xu, pid)\n\tif err != nil {\n\t\tlog.Println(\"Get Xid from Pid errors is: \", err)\n\t\treturn \"\"\n\t}\n\n\treturn cgetTitle(int(xid), isPid)\n}\n\n// ActivePidC active the window by Pid,\n// If args[0] > 0 on the unix platform via a xid to active\nfunc ActivePidC(pid int, args ...int) error {\n\tvar isPid int\n\tif len(args) > 0 || NotPid {\n\t\tisPid = 1\n\t\tinternalActive(pid, isPid)\n\t\treturn nil\n\t}\n\n\txid, err := GetXid(xu, pid)\n\tif err != nil {\n\t\tlog.Println(\"Get Xid from Pid errors is: \", err)\n\t\treturn err\n\t}\n\n\tinternalActive(int(xid), isPid)\n\treturn nil\n}\n\n// ActivePid active the window by Pid,\n//\n// If args[0] > 0 on the Windows platform via a window handle to active,\n// If args[0] > 0 on the unix platform via a xid to active\nfunc ActivePid(pid int, args ...int) error {\n\tif xu == nil {\n\t\tvar err error\n\t\txu, err = xgbutil.NewConn()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\tif len(args) > 0 {\n\t\terr := ewmh.ActiveWindowReq(xu, xproto.Window(pid))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn nil\n\t}\n\n\t// get the xid from pid\n\txid, err := GetXidFromPid(xu, pid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = ewmh.ActiveWindowReq(xu, xid)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// GetXid get the xid return window and error\nfunc GetXid(xu *xgbutil.XUtil, pid int) (xproto.Window, error) {\n\tif xu == nil {\n\t\tvar err error\n\t\txu, err = xgbutil.NewConn()\n\t\tif err != nil {\n\t\t\t// log.Println(\"xgbutil.NewConn errors is: \", err)\n\t\t\treturn 0, err\n\t\t}\n\t}\n\n\txid, err := GetXidFromPid(xu, pid)\n\treturn xid, err\n}\n\n// GetXidFromPid get the xid from pid\nfunc GetXidFromPid(xu *xgbutil.XUtil, pid int) (xproto.Window, error) {\n\twindows, err := ewmh.ClientListGet(xu)\n\tif err != nil {\n\t\treturn 0, err\n\t}\n\n\tfor _, window := range windows {\n\t\twmPid, err := ewmh.WmPidGet(xu, window)\n\t\tif err != nil {\n\t\t\treturn 0, err\n\t\t}\n\n\t\tif uint(pid) == wmPid {\n\t\t\treturn window, nil\n\t\t}\n\t}\n\n\treturn 0, errors.New(\"failed to find a window with a matching pid.\")\n}\n\n// DisplaysNum get the count of displays\nfunc DisplaysNum() int {\n\tc, err := xgb.NewConn()\n\tif err != nil {\n\t\treturn 0\n\t}\n\tdefer c.Close()\n\n\terr = xinerama.Init(c)\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treply, err := xinerama.QueryScreens(c).Reply()\n\tif err != nil {\n\t\treturn 0\n\t}\n\n\treturn int(reply.Number)\n}\n\n// GetMainId get the main display id\nfunc GetMainId() int {\n\tconn, err := xgb.NewConn()\n\tif err != nil {\n\t\treturn -1\n\t}\n\n\tsetup := xproto.Setup(conn)\n\tdefaultScreen := setup.DefaultScreen(conn)\n\tid := -1\n\tfor i, screen := range setup.Roots {\n\t\tif defaultScreen.Root == screen.Root {\n\t\t\tid = i\n\t\t\tbreak\n\t\t}\n\t}\n\treturn id\n}\n\n// Alert show a alert window\n// Displays alert with the attributes.\n// If cancel button is not given, only the default button is displayed\n//\n// Examples:\n//\n//\trobotgo.Alert(\"hi\", \"window\", \"ok\", \"cancel\")\nfunc Alert(title, msg string, args ...string) bool {\n\tdefaultBtn, cancelBtn := alertArgs(args...)\n\tc := `xmessage -center ` + msg +\n\t\t` -title ` + title + ` -buttons ` + defaultBtn + \":0,\"\n\tif cancelBtn != \"\" {\n\t\tc += cancelBtn + \":1\"\n\t}\n\tc += ` -default ` + defaultBtn\n\tc += ` -geometry 400x200`\n\n\tout, err := Run(c)\n\tif err != nil {\n\t\t// fmt.Println(\"Alert: \", err, \". \", string(out))\n\t\treturn false\n\t}\n\n\tif string(out) == \"1\" {\n\t\treturn false\n\t}\n\treturn true\n}\n"
        },
        {
          "name": "screen.go",
          "type": "blob",
          "size": 1.498046875,
          "content": "// Copyright 2016 The go-vgo Project Developers. See the COPYRIGHT\n// file at the top-level directory of this distribution and at\n// https://github.com/go-vgo/robotgo/blob/master/LICENSE\n//\n// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n// option. This file may not be copied, modified, or distributed\n// except according to those terms.\n\npackage robotgo\n\nimport (\n\t\"image\"\n\n\t\"github.com/kbinani/screenshot\"\n)\n\n// GetDisplayBounds gets the display screen bounds\nfunc GetDisplayBounds(i int) (x, y, w, h int) {\n\tbs := screenshot.GetDisplayBounds(i)\n\treturn bs.Min.X, bs.Min.Y, bs.Dx(), bs.Dy()\n}\n\n// GetDisplayRect gets the display rect\nfunc GetDisplayRect(i int) Rect {\n\tx, y, w, h := GetDisplayBounds(i)\n\treturn Rect{\n\t\tPoint{X: x, Y: y},\n\t\tSize{W: w, H: h}}\n}\n\n// Capture capture the screenshot, use the CaptureImg default\nfunc Capture(args ...int) (*image.RGBA, error) {\n\tdisplayId := 0\n\tif DisplayID != -1 {\n\t\tdisplayId = DisplayID\n\t}\n\n\tif len(args) > 4 {\n\t\tdisplayId = args[4]\n\t}\n\n\tvar x, y, w, h int\n\tif len(args) > 3 {\n\t\tx, y, w, h = args[0], args[1], args[2], args[3]\n\t} else {\n\t\tx, y, w, h = GetDisplayBounds(displayId)\n\t}\n\n\treturn screenshot.Capture(x, y, w, h)\n}\n\n// SaveCapture capture screen and save the screenshot to image\nfunc SaveCapture(path string, args ...int) error {\n\timg, err := CaptureImg(args...)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn Save(img, path)\n}\n"
        },
        {
          "name": "screen",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "wayland_n.go",
          "type": "blob",
          "size": 0.0361328125,
          "content": "// +bulid linux,next\npackage robotgo\n"
        },
        {
          "name": "window",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows_n.go",
          "type": "blob",
          "size": 0.0380859375,
          "content": "// +bulid windows,next\npackage robotgo\n"
        }
      ]
    }
  ]
}