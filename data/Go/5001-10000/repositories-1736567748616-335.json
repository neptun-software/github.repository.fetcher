{
  "metadata": {
    "timestamp": 1736567748616,
    "page": 335,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goss-org/goss",
      "stars": 5652,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.27734375,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n# top-most EditorConfig file\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\nindent_size = 4\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3623046875,
          "content": "*.swp\n/main\n*.bak\n/goss\n/release\n/integration-tests/goss/goss\n/integration-tests/**/*-generated*\n/vendor/\n/integration-tests/**/goss-linux-386\n/integration-tests/**/goss-linux-amd64\n\n# Random stuff for my local testing/development that I don't want checked in\ntmp/\n/goss.yaml\n\n/.idea\n\n/c.out\n/c.out.tmp\n\n# Documentation\n## Virtualenv\n/.venv\n## MkDocs rendered site\n/site\n"
        },
        {
          "name": ".golangci.yaml",
          "type": "blob",
          "size": 0.3544921875,
          "content": "linters:\n  # Disable all linters.\n  # Default: false\n  disable-all: true\n  # Enable specific linter\n  # https://golangci-lint.run/usage/linters/#enabled-by-default\n  enable:\n    # default linter\n    # - errcheck # there are to many failures at the moment\n    - gosimple\n    - govet\n    - ineffassign\n    - staticcheck\n    - unused\n    # custom linter\n    - gofmt\n"
        },
        {
          "name": ".markdownlint.yaml",
          "type": "blob",
          "size": 1.171875,
          "content": "---\n# Enable all rules\ndefault: true\n\n# Enforce asterisk for unordered lists\n# See: https://github.com/DavidAnson/markdownlint/blob/main/doc/md004.md\nMD004:\n  style: asterisk\n\n# Set list indent level to 4 which Python-Markdown requires\n# See:\n#  - https://github.com/DavidAnson/markdownlint/blob/main/doc/md007.md\n#  - https://python-markdown.github.io/#differences\nMD007:\n  indent: 4\n\n# Tune `line-length`\n# See: https://github.com/DavidAnson/markdownlint/blob/main/doc/md013.md\nMD013:\n  line_length: 120\n  tables: false\n  code_blocks: false\n\n# Disable `blanks-around-list` (to stay close from GitHub-flavored markdown)\n# See:\n#  - https://github.com/DavidAnson/markdownlint/blob/main/doc/md032.md\n#  - https://python-markdown.github.io/#differences\nMD032: false\n\n# Disable `no-space-in-code`\n# Generate lots of false positive with admonitions and code blocks\nMD038: false\n\n# Disable `code-blocks-style`\n# Use fenced code blocks everywhere but raise false positives with admonitions\nMD046: false\n\n# Disable `link-fragments`\n# Only works for github-rendered markdown (which does not have the same rules as MkDocs)\n# See: https://github.com/DavidAnson/markdownlint/blob/main/doc/md051.md\nMD051: false\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.427734375,
          "content": "# Read the Docs configuration file for MkDocs projects\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-22.04\n  tools:\n    python: \"3.12\"\n\nmkdocs:\n  configuration: mkdocs.yml\n\n# Optionally declare the Python requirements required to build your docs\npython:\n  install:\n  - requirements: docs/requirements.txt\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 2.0244140625,
          "content": "---\nlanguage: go\n\ngo:\n  - 1.23.x\n\nos:\n  - osx\n  - linux\n  - windows\n\ndist: focal\nosx_image: xcode12.2\n\nservices:\n  - docker\n\n# don't build any branch other than master (and prs) when git pushed\nbranches:\n  only:\n    - master\n    - /^v\\d+\\.\\d+(\\.\\d+)?(-\\S*)?$/\n\n\nbefore_install:\n  - if [[ \"${TRAVIS_OS_NAME}\" == \"windows\" ]]; then choco install make; fi\n  # bash from macOS is too old to have readarray. Install newer version.\n  - if [[ \"${TRAVIS_OS_NAME}\" == \"osx\" ]]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install bash; fi\n\nscript:\n  - ./ci/build.sh\n\n# deploy:\n#   provider: releases\n#   api_key:\n#     secure: ijNltjw/mIHIOx8vLZ6asUun3SbY7D+XZbs5NX8vcIv0jvOiwaaT1hqny7SQBHfGZzqHsYUSS/GYAYJdBqKFFfGmTZsl90hFT6D0RGdz9C71UVxNFX4wQ5KQ/WVvdMT2SrLymGvu9TvoU0VG8OWqWVdxSlUPf6qOTGAagrzg+Tbsbb6czeiG67mlBBL23XSlfMG1p45UxzvI41SZj2R3ElUb0hym1CrFaoC36PBGrb0x41TXzvd8J7cu6xDzgczYhnYQQZpS6f2YcqNV1z0f+P67EQqQiDWIIcK2jE/YG+RgM8cbpLMiMec8CDiwNCsejBA5EbVMlGJlODvBXT5NmMBeugueqfSHEfkl5qZTQG4AOAT7UsqbnM7r0NqzmaE5Lj90igvJK6rNsH1ZRe79WfSsTtuzlkkouHGvyoz0M8gnMSzpbbwoyIy+UT0hhPMoZvIpXfr43en5WkbkPKfop0p4Vjc8NGg0iD45q1JAvIVTtz/WvWTknM1P8e3u+TiDTaZkcJJmFaBqgaeLoWktOGfi54p9nhgQnSyBYt4PyvhWDQs7QFmX0BdKlqJCESvUOJTe1t6zJJsV7Gn/3sGCN7JUEwbnXTsCoMjjFFUvQdm0Ur7t7/2xU3kO+dyfqcdM/5SYFeppQcjHI0ckhI51mIoBTsJsGvaVwKKL1I4cyBU=\n#   file:\n#     - release/goss-darwin-amd64\n#     - release/goss-darwin-amd64.sha256\n#     - release/goss-darwin-arm64\n#     - release/goss-darwin-arm64.sha256\n#     - release/goss-linux-amd64\n#     - release/goss-linux-amd64.sha256\n#     - release/goss-linux-386\n#     - release/goss-linux-386.sha256\n#     - release/goss-linux-arm\n#     - release/goss-linux-arm.sha256\n#     - release/goss-linux-arm64\n#     - release/goss-linux-arm64.sha256\n#     - release/goss-linux-s390x\n#     - release/goss-linux-s390x.sha256\n#     - release/goss-windows-amd64.exe\n#     - release/goss-windows-amd64.exe.sha256\n#     - extras/dgoss/dgoss\n#     - extras/dgoss/dgoss.sha256\n#   skip_cleanup: true\n#   on:\n#     repo: goss-org/goss\n#     tags: true\n#     condition: $TRAVIS_OS_NAME = linux\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.62109375,
          "content": "---\nextends: default\n\nignore:\n  # uses go templates (these are invalid yaml files)\n  - integration-tests/goss/goss-service.yaml\n  - integration-tests/goss/goss-shared.yaml\n  - docs/goss.yaml\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1  # required for schema.yaml\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 1  # required for schema.yaml\n  comments-indentation: disable\n  indentation:\n    spaces: consistent\n    indent-sequences: consistent\n  line-length: disable\n  document-start: disable\n  truthy:\n    allowed-values:\n      - \"on\"  # required for github workflows\n      - \"false\"\n      - \"true\"\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.36328125,
          "content": "ARG GO_VERSION=1.22\n\nFROM docker.io/golang:${GO_VERSION}-alpine AS base\n\nARG GOSS_VERSION=v0.0.0\nWORKDIR /build\n\nRUN --mount=target=. \\\n    CGO_ENABLED=0 go build \\\n    -ldflags \"-X github.com/goss-org/goss/util.Version=${GOSS_VERSION} -s -w\" \\\n    -o \"/release/goss\" \\\n    ./cmd/goss\n\nFROM alpine:3.19\n\nCOPY --from=base /release/* /usr/bin/\n\nRUN mkdir /goss\nVOLUME /goss\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0791015625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2015 Ahmed Elsabbahy\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.8525390625,
          "content": "export GO15VENDOREXPERIMENT=1\n\nexe = github.com/goss-org/goss/cmd/goss\npkgs = $(shell ./novendor.sh)\ncmd = goss\nGO111MODULE=on\nGO_FILES = $(shell git ls-files -- '*.go' ':!:*vendor*_test.go')\nVENV := $(shell echo $${VIRTUAL_ENV-.venv})\nPYTHON := $(VENV)/bin/python\nDOCS_DEPS := $(VENV)/.docs.dependencies\n\n.PHONY: all build install test release bench fmt lint vet test-int-all gen centos7 wheezy trusty alpine3 arch test-int32 centos7-32 wheezy-32 trusty-32 alpine3-32 arch-32\n\nall: test-short-all test-int-all dgoss-sha256 dcgoss-sha256 kgoss-sha256\n\ntest-short-all: fmt lint vet test\n\ninstall: release/goss-linux-amd64\n\t$(info INFO: Starting build $@)\n\tcp release/$(cmd)-linux-amd64 $(GOPATH)/bin/goss\n\ntest:\n\t$(info INFO: Starting build $@)\n\t./ci/go-test.sh\n\ncov:\n\tgo test -coverpkg=./... -coverprofile=c.out ./...\n\t# go tool cover -func ./c.out\n\nfuncov:\n\tgo test -coverpkg=./... -coverprofile=c.out ./...\n\tgo tool cover -func ./c.out\n\nhtmlcov:\n\tgo test -v -coverpkg=./... -coverprofile=c.out ./...\n\tgo tool cover -html ./c.out\n\nlint:\n\t$(info INFO: Starting build $@)\n\tgo install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.59\n\tgolangci-lint run --timeout 5m $(pkgs) || true\n\nvet:\n\t$(info INFO: Starting build $@)\n\tgo vet $(pkgs) || true\n\nfmt:\n\t$(info INFO: Starting build $@)\n\t./ci/go-fmt.sh\n\nbench:\n\t$(info INFO: Starting build $@)\n\tgo test -bench=.\n\ntest-int-validate-%: release/goss-%\n\t$(info INFO: Starting build $@)\n\t./integration-tests/run-validate-tests.sh $*\n\ntest-int-serve-%: release/goss-%\n\t$(info INFO: Starting build $@)\n\t./integration-tests/run-serve-tests.sh $*\n\nrelease/goss-%: $(GO_FILES)\n\t./release-build.sh $*\n\nrelease:\n\t$(MAKE) clean\n\t$(MAKE) build\n\nbuild: release/goss-darwin-amd64 release/goss-darwin-arm64 release/goss-linux-386 release/goss-linux-amd64 release/goss-linux-arm release/goss-linux-arm64 release/goss-linux-s390x release/goss-windows-amd64\n\ngen:\n\t$(info INFO: Starting build $@)\n\tgo generate -tags genny $(pkgs)\n\nclean:\n\t$(info INFO: Starting build $@)\n\trm -rf ./release\n\trm -rf ./site\n\trm -rf ${VENV}\n\nbuild-images:\n\t$(info INFO: Starting build $@)\n\tdevelopment/build_images.sh\n\npush-images:\n\t$(info INFO: Starting build $@)\n\tdevelopment/push_images.sh\n\n# Update the matcher test golden files\nupdate-matcher-tests:\n\tgo test -v -run '^TestMatchers' . -update\n\ntest-darwin-all: test-short-all test-int-darwin-all\n# linux _does_ have the docker-style testing, but does _not_ currently have the same style integration tests darwin+windows do, _because_ of the docker-style testing.\ntest-linux-all: test-short-all test-int-64 test-int-32\ntest-windows-all: test-short-all test-int-windows-all\n\ntest-int-64: rockylinux9 wheezy trusty alpine3 arch test-int-serve-linux-amd64\ntest-int-32: rockylinux9-32 wheezy-32 trusty-32 alpine3-32 arch-32\ntest-int-darwin-all: test-int-validate-darwin-amd64 test-int-serve-darwin-amd64\ntest-int-windows-all: test-int-validate-windows-amd64 test-int-serve-windows-amd64\ntest-int-all: test-int-32 test-int-64\n\ncentos7-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh centos7 386\n.PHONY: rockylinux9-32\nrockylinux9-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh rockylinux9 386\nwheezy-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh wheezy 386\ntrusty-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh trusty 386\nalpine3-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh alpine3 386\narch-32: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh arch 386\ncentos7: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh centos7 amd64\n.PHONY: rockylinux9\nrockylinux9: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh rockylinux9 amd64\nwheezy: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh wheezy amd64\ntrusty: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh trusty amd64\nalpine3: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh alpine3 amd64\narch: build\n\t$(info INFO: Starting build $@)\n\tcd integration-tests/ && ./test.sh arch amd64\n\ndgoss-sha256:\n\tcd extras/dgoss/ && sha256sum dgoss > dgoss.sha256\n\ndcgoss-sha256:\n\tcd extras/dcgoss/ && sha256sum dcgoss > dcgoss.sha256\n\nkgoss-sha256:\n\tcd extras/kgoss/ && sha256sum kgoss > kgoss.sha256\n\n.PHONY: lint-yaml\nlint-yaml:\n\t$(info INFO: Starting $@)\n\tyamllint -c .yamllint .\n\n$(PYTHON):\n\t$(info Creating virtualenv in $(VENV))\n\t@python -m venv $(VENV)\n\n$(DOCS_DEPS): $(PYTHON) docs/requirements.txt\n\t$(info Installing dependencies)\n\t@pip install --upgrade pip\n\t@pip install --requirement docs/requirements.txt\n\t@touch $(DOCS_DEPS)\n\ndocs/setup: $(DOCS_DEPS)\n\ndocs/serve: docs/setup\n\t$(info Running documentation live development server)\n\t@mkdocs serve --strict\n\n.PHONY: docs\ndocs: docs/setup\n\t$(info Building documentation)\n\t@mkdocs build --strict\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.7724609375,
          "content": "# Goss - Quick and Easy server validation\n\n[![Build Status](https://travis-ci.org/goss-org/goss.svg?branch=master)](https://travis-ci.org/goss-org/goss)\n[![Github All Releases](https://img.shields.io/github/downloads/goss-org/goss/total.svg?maxAge=604800)](https://github.com/goss-org/goss/releases)\n[![Documentation Status](https://readthedocs.org/projects/goss/badge/)](https://goss.rocks/)\n**\n[![Blog](https://img.shields.io/badge/follow-blog-brightgreen.svg)](https://medium.com/@aelsabbahy)\n\n<!-- --8<-- [start:intro] -->\n\n## Goss in 45 seconds\n\n<!-- markdownlint-disable line-length no-inline-html-->\n<a href=\"https://asciinema.org/a/4suhr8p42qcn6r7crfzt6cc3e?autoplay=1\" target=\"_blank\"><img src=\"https://cloud.githubusercontent.com/assets/6783261/17330426/ce7ad066-5894-11e6-84ea-29fd4207af58.gif\" alt=\"asciicast\"></a>\n<!-- markdownlint-enable line-length no-inline-html -->\n\n**Note:** For testing containers see the [dgoss](https://github.com/goss-org/goss/tree/master/extras/dgoss) wrapper.\nAlso, user submitted wrapper scripts for Kubernetes [kgoss](https://github.com/goss-org/goss/tree/master/extras/kgoss)\nand Docker Compose [dcgoss](https://github.com/goss-org/goss/tree/master/extras/dcgoss).\n\n**Note:** For some Docker/Kubernetes healthcheck, health endpoint, and\ncontainer ordering examples, see my blog post\n[here][kubernetes-simplified-health-checks].\n\n## Introduction\n\n### What is Goss?\n\nGoss is a YAML based [serverspec](http://serverspec.org/) alternative tool for validating a server's configuration.\nIt eases the process of writing tests by allowing the user to generate tests from the current system state.\nOnce the test suite is written they can be executed, waited-on, or served as a health endpoint.\n\n### Why use Goss?\n\n* Goss is EASY! - [Goss in 45 seconds](#goss-in-45-seconds)\n* Goss is FAST! - small-medium test suites are near instantaneous, see [benchmarks](https://github.com/goss-org/goss/wiki/Benchmarks)\n* Goss is SMALL! - <10MB single self-contained binary\n\n## Installation\n\n**Note:** For macOS and Windows, see: [platform-feature-parity].\n\nThis will install goss and [dgoss](https://github.com/goss-org/goss/tree/master/extras/dgoss).\n\n**Note:** Using `curl | sh` is not recommended for production systems, use manual installation below.\n\n```bash\n# Install latest version to /usr/local/bin\ncurl -fsSL https://goss.rocks/install | sh\n\n# Install v0.4.8 version to ~/bin\ncurl -fsSL https://goss.rocks/install | GOSS_VER=v0.4.8 GOSS_DST=~/bin sh\n```\n\n<!-- --8<-- [end:intro] -->\n<!-- --8<-- [start:install] -->\n\n### Manual installation\n\n#### Latest\n\n```bash\ncurl -L https://github.com/goss-org/goss/releases/latest/download/goss-linux-amd64 -o /usr/local/bin/goss\nchmod +rx /usr/local/bin/goss\n\ncurl -L https://github.com/goss-org/goss/releases/latest/download/dgoss -o /usr/local/bin/dgoss\n# Alternatively, using the latest master\n# curl -L https://raw.githubusercontent.com/goss-org/goss/master/extras/dgoss/dgoss -o /usr/local/bin/dgoss\nchmod +rx /usr/local/bin/dgoss\n```\n\n#### Specific Version\n\n```bash\n# See https://github.com/goss-org/goss/releases for release versions\nVERSION=v0.4.8\ncurl -L \"https://github.com/goss-org/goss/releases/download/${VERSION}/goss-linux-amd64\" -o /usr/local/bin/goss\nchmod +rx /usr/local/bin/goss\n\n# (optional) dgoss docker wrapper (use 'master' for latest version)\nVERSION=v0.4.8\ncurl -L \"https://github.com/goss-org/goss/releases/download/${VERSION}/dgoss\" -o /usr/local/bin/dgoss\nchmod +rx /usr/local/bin/dgoss\n```\n\n### Build it yourself\n\n```bash\nmake build\n```\n\n<!-- --8<-- [end:install] -->\n\n## Full Documentation\n\n[Full Documentation](https://goss.readthedocs.io/en/stable/)\n\n## Using the container image\n\n[Using the Goss container image](https://goss.readthedocs.io/en/stable/container_image/)\n\n## Quick start\n\n<!-- --8<-- [start:quickstart] -->\n\n### Writing a simple sshd test\n\nAn initial set of tests can be derived from the system state by using the [add](https://goss.rocks/cli/#add)\nor [autoadd](https://goss.rocks/cli/#autoadd) commands.\n\nLet's write a simple sshd test using autoadd.\n\n```txt\n# Running it as root will allow it to also detect ports\n$ sudo goss autoadd sshd\n```\n\nGenerated `goss.yaml`:\n\n```yaml\nport:\n  tcp:22:\n    listening: true\n    ip:\n    - 0.0.0.0\n  tcp6:22:\n    listening: true\n    ip:\n    - '::'\nservice:\n  sshd:\n    enabled: true\n    running: true\nuser:\n  sshd:\n    exists: true\n    uid: 74\n    gid: 74\n    groups:\n    - sshd\n    home: /var/empty/sshd\n    shell: /sbin/nologin\ngroup:\n  sshd:\n    exists: true\n    gid: 74\nprocess:\n  sshd:\n    running: true\n```\n\nNow that we have a test suite, we can:\n\n* Run it once\n\n```console\n$ goss validate\n...............\n\nTotal Duration: 0.021s # <- yeah, it's that fast..\nCount: 15, Failed: 0\n```\n\n* Edit it to use [templates](https://goss.rocks/gossfile/#templates), and run with a vars file\n\n```console\ngoss --vars vars.yaml validate\n```\n\n* keep running it until the system enters a valid state or we timeout\n\n```console\ngoss validate --retry-timeout 30s --sleep 1s\n```\n\n* serve the tests as a health endpoint\n\n```console\n$ goss serve &\n$ curl localhost:8080/healthz\n\n# JSON endpoint\n$ goss serve --format json &\n$ curl localhost:8080/healthz\n\n# rspecish response via content negotiation\n$ goss serve --format json &\n$ curl -H \"Accept: application/vnd.goss-rspecish\" localhost:8080/healthz\n```\n\n### Manually editing Goss files\n\nGoss files can be manually edited to improve readability and expressiveness of tests.\n\nA [Json draft 7 schema](https://github.com/json-schema-org/json-schema-spec/blob/draft-07/schema.json) available\nat <https://goss.rocks/schema.yaml> makes it easier to edit simple goss.yaml files in IDEs,\nproviding usual coding assistance such as inline documentation, completion and static analysis.\nSee #793 for screenshots.\n\nFor example, to configure the Json schema in JetBrains intellij IDEA,\nfollow [documented instructions](https://www.jetbrains.com/help/idea/json.html#ws_json_schema_add_custom),\nwith arguments such as:\n* `schema url=https://goss.rocks/schema.yaml`\n* `schema version=Json schema version 7`\n* `file path pattern=*/goss.yaml`\n\nIn addition, Goss files can also be further manually edited (without yet full json support) to use:\n\n* [Patterns](https://goss.rocks/gossfile/#patterns)\n* [Advanced Matchers](https://goss.rocks/gossfile/#advanced-matchers)\n* [Templates](https://goss.rocks/gossfile/#templates)\n* `title` and `meta` (arbitrary data) attributes are persisted when adding other resources with `goss add`\n\nSome examples:\n\n```yaml+jinja\nuser:\n  sshd:\n    title: UID must be between 50-100, GID doesn't matter. home is flexible\n    meta:\n      desc: Ensure sshd is enabled and running since it's needed for system management\n      sev: 5\n    exists: true\n    uid:\n      # Validate that UID is between 50 and 100\n      and:\n        gt: 50\n        lt: 100\n    home:\n      # Home can be any of the following\n      or:\n      - /var/empty/sshd\n      - /var/run/sshd\n\npackage:\n  kernel:\n    installed: true\n    versions:\n      # Must have 3 kernels and none of them can be 4.4.0\n      and:\n      - have-len: 3\n      - not:\n          contain-element: 4.4.0\n\n  # Loaded from --vars YAML/JSON file\n  {{.Vars.package}}:\n    installed: true\n\n{{if eq .Env.OS \"centos\"}}\n  # This test is only when $OS environment variable is set to \"centos\"\n  libselinux:\n    installed: true\n{{end}}\n```\n\nGoss.yaml files with templates can still be validated through the Json schema after being rendered\nusing the `goss render` command. See example below\n\n```console\n$ cd docs\n$ goss --vars ./vars.yaml render > rendered_goss.yaml\n# proceed with json schema validation of rendered_goss.yaml in your favorite IDE\n# or in one of the Json schema validator listed in https://json-schema.org/implementations.html\n# The following example is for a Linux AMD64 host\n$ curl -LO https://github.com/neilpa/yajsv/releases/download/v1.4.1/yajsv.linux.amd64\n$ chmod a+x yajsv.linux.amd64\n$ sudo mv yajsv.linux.amd64 /usr/sbin/yajsv\n\n$ yajsv -s goss-json-schema.yaml rendered_goss.yaml\n\nrendered_goss.yaml: fail: process.chrome: skip is required\nrendered_goss.yaml: fail: service.sshd: skip is required\n1 of 1 failed validation\nrendered_goss.yaml: fail: process.chrome: skip is required\nrendered_goss.yaml: fail: service.sshd: skip is required\n```\n\nFull list of available Json schema validators can be found in <https://json-schema.org/implementations.html#validator-command%20line>\n\n<!-- --8<-- [end:quickstart] -->\n<!-- --8<-- [start:about] -->\n\n## Supported resources\n\n* package - add new package\n* file - add new file\n* addr - add new remote address:port - ex: google.com:80\n* port - add new listening [protocol]:port - ex: 80 or udp:123\n* service - add new service\n* user - add new user\n* group - add new group\n* command - add new command\n* dns - add new dns\n* process - add new process name\n* kernel-param - add new kernel-param\n* mount - add new mount\n* interface - add new network interface\n* http - add new network http url with proxy support\n* goss - add new goss file, it will be imported from this one\n* matching - test for matches in supplied content\n\n## Supported output formats\n\n* rspecish - **(default)** Similar to rspec output\n* documentation - Verbose test results\n* json - JSON, detailed test result\n* tap - TAP style\n* junit - JUnit style\n* nagios - Nagios/Sensu compatible output /w exit code 2 for failures.\n* prometheus - Prometheus compatible output.\n* silent - No output. Avoids exposing system information (e.g. when serving tests as a healthcheck endpoint).\n\n## Community Contributions\n\n<!-- markdownlint-disable line-length -->\n* [goss-ansible](https://github.com/indusbox/goss-ansible) - Ansible module for Goss.\n* [degoss](https://github.com/naftulikay/ansible-role-degoss) - Ansible role for installing, running, and removing Goss in a single go.\n* [ansible-goss-install](https://github.com/marcinpraczko/ansible-goss-install) - Ansible role for installing Goss (option for install as user or root)\n* [kitchen-goss](https://github.com/ahelal/kitchen-goss) - A test-kitchen verifier plugin for Goss.\n* [goss-fpm-files](https://github.com/deanwilson/unixdaemon-fpm-cookery-recipes) - Might be useful for building goss system packages.\n* [packer-provisioner-goss](https://github.com/YaleUniversity/packer-provisioner-goss) - A packer plugin to run Goss as a provision step.\n* [gossboss](https://github.com/mdb/gossboss) - Collect and view aggregated Goss test results from multiple remote Goss servers.\n<!-- markdownlint-enable line-length -->\n\n## Limitations\n\n`goss` works well on Linux, but support on Windows & macOS is alpha. See [platform-feature-parity].\n\nThe following tests have limitations.\n\nPackage:\n\n* rpm\n* deb\n* Alpine apk\n* pacman\n\nService:\n\n* systemd\n* sysV init\n* OpenRC init\n* Upstart\n\n[kubernetes-simplified-health-checks]: https://medium.com/@aelsabbahy/docker-1-12-kubernetes-simplified-health-checks-and-container-ordering-with-goss-fa8debbe676c\n[platform-feature-parity]: https://goss.rocks/platforms\n\n<!-- --8<-- [end:about] -->\n"
        },
        {
          "name": "add.go",
          "type": "blob",
          "size": 5.4560546875,
          "content": "package goss\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/goss-org/goss/resource\"\n\t\"github.com/goss-org/goss/system\"\n\t\"github.com/goss-org/goss/util\"\n)\n\n// AddResources is a simple wrapper to add multiple resources\nfunc AddResources(fileName, resourceName string, keys []string, c *util.Config) error {\n\tvar err error\n\terr = setLogLevel(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\toutStoreFormat, err = getStoreFormatFromFileName(fileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar gossConfig GossConfig\n\tif _, err := os.Stat(fileName); err == nil {\n\t\tgossConfig, err = ReadJSON(fileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tgossConfig = *NewGossConfig()\n\t}\n\n\tsys := system.New(c.PackageManager)\n\n\tfor _, key := range keys {\n\t\tif err := AddResource(fileName, gossConfig, resourceName, key, *c, sys); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn WriteJSON(fileName, gossConfig)\n}\n\n// AddResource adds a single resource to fileName\nfunc AddResource(fileName string, gossConfig GossConfig, resourceName, key string, config util.Config, sys *system.System) error {\n\tvar err error\n\tvar res resource.ResourceRead\n\n\t// Need to figure out a good way to refactor this\n\tswitch resourceName {\n\tcase resource.AddResourceName:\n\t\tres, err = gossConfig.Addrs.AppendSysResource(key, sys, config)\n\tcase resource.CommandResourceName:\n\t\tres, err = gossConfig.Commands.AppendSysResource(key, sys, config)\n\tcase resource.DNSResourceName:\n\t\tres, err = gossConfig.DNS.AppendSysResource(key, sys, config)\n\tcase resource.FileResourceName:\n\t\tres, err = gossConfig.Files.AppendSysResource(key, sys, config)\n\tcase resource.GroupResourceName:\n\t\tres, err = gossConfig.Groups.AppendSysResource(key, sys, config)\n\tcase resource.PackageResourceName:\n\t\tres, err = gossConfig.Packages.AppendSysResource(key, sys, config)\n\tcase resource.PortResourceName:\n\t\tres, err = gossConfig.Ports.AppendSysResource(key, sys, config)\n\tcase resource.ProcessResourceName:\n\t\tres, err = gossConfig.Processes.AppendSysResource(key, sys, config)\n\tcase resource.ServiceResourceName:\n\t\tres, err = gossConfig.Services.AppendSysResource(key, sys, config)\n\tcase resource.UserResourceName:\n\t\tres, err = gossConfig.Users.AppendSysResource(key, sys, config)\n\tcase resource.GossFileResourceName:\n\t\tres, err = gossConfig.Gossfiles.AppendSysResource(key, sys, config)\n\tcase resource.KernelParamResourceName:\n\t\tres, err = gossConfig.KernelParams.AppendSysResource(key, sys, config)\n\tcase resource.MountResourceName:\n\t\tres, err = gossConfig.Mounts.AppendSysResource(key, sys, config)\n\tcase resource.InterfaceResourceName:\n\t\tres, err = gossConfig.Interfaces.AppendSysResource(key, sys, config)\n\tcase resource.HTTPResourceName:\n\t\tres, err = gossConfig.HTTPs.AppendSysResource(key, sys, config)\n\tdefault:\n\t\terr = fmt.Errorf(\"undefined resource name: %s\", resourceName)\n\t}\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tresourcePrint(fileName, res, config.AnnounceToCLI)\n\n\treturn nil\n}\n\n// AutoAddResources is a simple wrapper to add multiple resources\nfunc AutoAddResources(fileName string, keys []string, c *util.Config) error {\n\tvar err error\n\toutStoreFormat, err = getStoreFormatFromFileName(fileName)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tvar gossConfig GossConfig\n\tif _, err = os.Stat(fileName); err == nil {\n\t\tgossConfig, err = ReadJSON(fileName)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t} else {\n\t\tgossConfig = *NewGossConfig()\n\t}\n\n\tsys := system.New(c.PackageManager)\n\n\tfor _, key := range keys {\n\t\tif err := AutoAddResource(fileName, gossConfig, key, c, sys); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn WriteJSON(fileName, gossConfig)\n}\n\n// AutoAddResource adds a single resource to fileName with automatic detection of the type of resource\nfunc AutoAddResource(fileName string, gossConfig GossConfig, key string, c *util.Config, sys *system.System) error {\n\t// file\n\tif strings.Contains(key, \"/\") {\n\t\tres, _, ok, err := gossConfig.Files.AppendSysResourceIfExists(key, sys)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif ok {\n\t\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t\t}\n\t}\n\n\t// group\n\tif res, _, ok, err := gossConfig.Groups.AppendSysResourceIfExists(key, sys); err != nil {\n\t\treturn err\n\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t}\n\n\t// package\n\tif res, _, ok, err := gossConfig.Packages.AppendSysResourceIfExists(key, sys); err != nil {\n\n\t\treturn err\n\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t}\n\n\t// port\n\tif res, _, ok, err := gossConfig.Ports.AppendSysResourceIfExists(key, sys); err != nil {\n\t\treturn err\n\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t}\n\n\t// process\n\tif res, sysres, ok, err := gossConfig.Processes.AppendSysResourceIfExists(key, sys); err != nil {\n\t\treturn err\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t\tports := system.GetPorts(true)\n\t\tpids, _ := sysres.Pids()\n\t\tfor _, pid := range pids {\n\t\t\tpidS := strconv.Itoa(pid)\n\t\t\tfor port, entries := range ports {\n\t\t\t\tfor _, entry := range entries {\n\t\t\t\t\tif entry.Pid == pidS {\n\t\t\t\t\t\t// port\n\t\t\t\t\t\tif res, _, ok, err := gossConfig.Ports.AppendSysResourceIfExists(port, sys); err != nil {\n\t\t\t\t\t\t\treturn err\n\t\t\t\t\t\t} else if ok {\n\t\t\t\t\t\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Service\n\tif res, _, ok, err := gossConfig.Services.AppendSysResourceIfExists(key, sys); err != nil {\n\t\treturn err\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t}\n\n\t// user\n\tif res, _, ok, err := gossConfig.Users.AppendSysResourceIfExists(key, sys); err != nil {\n\t\treturn err\n\t} else if ok {\n\t\tresourcePrint(fileName, res, c.AnnounceToCLI)\n\t}\n\n\treturn nil\n}\n"
        },
        {
          "name": "ci",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "development",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.29296875,
          "content": "module github.com/goss-org/goss\n\ngo 1.22\n\nrequire (\n\tgithub.com/Masterminds/sprig/v3 v3.3.0\n\tgithub.com/achanda/go-sysctl v0.0.0-20160222034550-6be7678c45d2\n\tgithub.com/blang/semver/v4 v4.0.0\n\tgithub.com/cheekybits/genny v1.0.0\n\tgithub.com/fatih/color v1.17.0\n\tgithub.com/goss-org/GOnetstat v0.0.0-20230101144325-22be0bd9e64d\n\tgithub.com/goss-org/go-ps v0.0.0-20230609005227-7b318e6a56e5\n\tgithub.com/hashicorp/logutils v1.0.0\n\tgithub.com/miekg/dns v1.1.61\n\tgithub.com/moby/sys/mountinfo v0.7.1\n\tgithub.com/oleiade/reflections v1.0.1\n\tgithub.com/onsi/gomega v1.33.1\n\tgithub.com/patrickmn/go-cache v2.1.0+incompatible\n\tgithub.com/pmezard/go-difflib v1.0.0\n\tgithub.com/prometheus/client_golang v1.19.1\n\tgithub.com/prometheus/common v0.55.0\n\tgithub.com/samber/lo v1.46.0\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/tidwall/gjson v1.17.1\n\tgithub.com/urfave/cli v1.22.14\n\tgopkg.in/yaml.v3 v3.0.1\n\tgotest.tools/v3 v3.5.1\n)\n\nrequire (\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Masterminds/goutils v1.1.1 // indirect\n\tgithub.com/Masterminds/semver/v3 v3.3.0 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.3 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/huandu/xstrings v1.5.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mitchellh/copystructure v1.2.0 // indirect\n\tgithub.com/mitchellh/reflectwalk v1.0.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/shopspring/decimal v1.4.0 // indirect\n\tgithub.com/spf13/cast v1.7.0 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgolang.org/x/crypto v0.26.0 // indirect\n\tgolang.org/x/mod v0.19.0 // indirect\n\tgolang.org/x/net v0.27.0 // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgolang.org/x/sys v0.23.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n\tgolang.org/x/tools v0.23.0 // indirect\n\tgoogle.golang.org/protobuf v1.34.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 12.087890625,
          "content": "dario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/BurntSushi/toml v1.3.2/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/Masterminds/goutils v1.1.1 h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=\ngithub.com/Masterminds/goutils v1.1.1/go.mod h1:8cTjp+g8YejhMuvIA5y2vz3BpJxksy863GQaJW2MFNU=\ngithub.com/Masterminds/semver/v3 v3.3.0 h1:B8LGeaivUe71a5qox1ICM/JLl0NqZSW5CHyL+hmvYS0=\ngithub.com/Masterminds/semver/v3 v3.3.0/go.mod h1:4V+yj/TJE1HU9XfppCwVMZq3I84lprf4nC11bSS5beM=\ngithub.com/Masterminds/sprig/v3 v3.3.0 h1:mQh0Yrg1XPo6vjYXgtf5OtijNAKJRNcTdOOGZe3tPhs=\ngithub.com/Masterminds/sprig/v3 v3.3.0/go.mod h1:Zy1iXRYNqNLUolqCpL4uhk6SHUMAOSCzdgBfDb35Lz0=\ngithub.com/achanda/go-sysctl v0.0.0-20160222034550-6be7678c45d2 h1:NYoPVh1XuUB5VBWLXRKoqzQhl4bajIxh+XuURbJ0uwc=\ngithub.com/achanda/go-sysctl v0.0.0-20160222034550-6be7678c45d2/go.mod h1:DCNKSpXhum14Y258jSbRmJvcesbzEdBPincz7yJUx3k=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cheekybits/genny v1.0.0 h1:uGGa4nei+j20rOSeDeP5Of12XVm7TGUd4dJA9RDitfE=\ngithub.com/cheekybits/genny v1.0.0/go.mod h1:+tQajlRqAUrPI7DOSpB0XAqZYtQakVtB7wXkRAgjxjQ=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.3 h1:qMCsGGgs+MAzDFyp9LpAe1Lqy/fY/qCovCm0qnXZOBM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.3/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/fatih/color v1.17.0 h1:GlRw1BRJxkpqUCBKzKOw098ed57fEsKeNjpTe3cSjK4=\ngithub.com/fatih/color v1.17.0/go.mod h1:YZ7TlrGPkiz6ku9fK3TLD/pl3CpsiFyu8N92HLgmosI=\ngithub.com/frankban/quicktest v1.14.6 h1:7Xjx+VpznH+oBnejlPUj8oUpdxnVs4f8XU8WnHkI4W8=\ngithub.com/frankban/quicktest v1.14.6/go.mod h1:4ptaffx2x8+WTWXmUCuVU6aPUX1/Mz7zb5vbUoiM6w0=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20240424215950-a892ee059fd6 h1:k7nVchz72niMH6YLQNvHSdIE7iqsQxK1P41mySCvssg=\ngithub.com/google/pprof v0.0.0-20240424215950-a892ee059fd6/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/goss-org/GOnetstat v0.0.0-20230101144325-22be0bd9e64d h1:50mlZKtg8BUvBtFs0ioVpSgMMwcKaJefg/2pZ+lQf98=\ngithub.com/goss-org/GOnetstat v0.0.0-20230101144325-22be0bd9e64d/go.mod h1:MBdRlloGIbpQVDuH5Gxg3hjqwZBCZsmFqbYPaeR6r0M=\ngithub.com/goss-org/go-ps v0.0.0-20230609005227-7b318e6a56e5 h1:NW0Jo4leMIrQxNOyOkBu4yBnygI37m0Ey0EUUgvzr+8=\ngithub.com/goss-org/go-ps v0.0.0-20230609005227-7b318e6a56e5/go.mod h1:FYj70SLmogHdTTDGnIVaaK0iczROlsxmoMCwfAUuIE8=\ngithub.com/hashicorp/logutils v1.0.0 h1:dLEQVugN8vlakKOUE3ihGLTZJRB4j+M2cdTm/ORI65Y=\ngithub.com/hashicorp/logutils v1.0.0/go.mod h1:QIAnNjmIWmVIIkWDTG1z5v++HQmx9WQRO+LraFDTW64=\ngithub.com/huandu/xstrings v1.5.0 h1:2ag3IFq9ZDANvthTwTiqSSZLjDc+BedvHPAp5tJy2TI=\ngithub.com/huandu/xstrings v1.5.0/go.mod h1:y5/lhBue+AyNmUVz9RLU9xbLR0o4KIIExikq4ovT0aE=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/miekg/dns v1.1.61 h1:nLxbwF3XxhwVSm8g9Dghm9MHPaUZuqhPiGL+675ZmEs=\ngithub.com/miekg/dns v1.1.61/go.mod h1:mnAarhS3nWaW+NVP2wTkYVIZyHNJ098SJZUki3eykwQ=\ngithub.com/mitchellh/copystructure v1.2.0 h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=\ngithub.com/mitchellh/copystructure v1.2.0/go.mod h1:qLl+cE2AmVv+CoeAwDPye/v+N2HKCj9FbZEVFJRxO9s=\ngithub.com/mitchellh/reflectwalk v1.0.2 h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=\ngithub.com/mitchellh/reflectwalk v1.0.2/go.mod h1:mSTlrgnPZtwu0c4WaC2kGObEpuNDbx0jmZXqmk4esnw=\ngithub.com/moby/sys/mountinfo v0.7.1 h1:/tTvQaSJRr2FshkhXiIpux6fQ2Zvc4j7tAhMTStAG2g=\ngithub.com/moby/sys/mountinfo v0.7.1/go.mod h1:IJb6JQeOklcdMU9F5xQ8ZALD+CUr5VlGpwtX+VE0rpI=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/oleiade/reflections v1.0.1 h1:D1XO3LVEYroYskEsoSiGItp9RUxG6jWnCVvrqH0HHQM=\ngithub.com/oleiade/reflections v1.0.1/go.mod h1:rdFxbxq4QXVZWj0F+e9jqjDkc7dbp97vkRixKo2JR60=\ngithub.com/onsi/ginkgo/v2 v2.17.2 h1:7eMhcy3GimbsA3hEnVKdw/PQM9XN9krpKVXsZdph0/g=\ngithub.com/onsi/ginkgo/v2 v2.17.2/go.mod h1:nP2DPOQoNsQmsVyv5rDA8JkXQoCs6goXIvr/PRJ1eCc=\ngithub.com/onsi/gomega v1.33.1 h1:dsYjIxxSR755MDmKVsaFQTE22ChNBcuuTWgkUDSubOk=\ngithub.com/onsi/gomega v1.33.1/go.mod h1:U4R44UsT+9eLIaYRB2a5qajjtQYn0hauxvRm16AVYg0=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible h1:HRMgzkcYKYpi3C8ajMPV8OFXaaRUnok+kx1WdO15EQc=\ngithub.com/patrickmn/go-cache v2.1.0+incompatible/go.mod h1:3Qf8kWWT7OJRJbdiICTKqZju1ZixQ/KpMGzzAfe6+WQ=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.19.1 h1:wZWJDwK+NameRJuPGDhlnFgx8e8HN3XHQeLaYJFJBOE=\ngithub.com/prometheus/client_golang v1.19.1/go.mod h1:mP78NwGzrVks5S2H6ab8+ZZGJLZUq1hoULYBAYBw1Ho=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/samber/lo v1.46.0 h1:w8G+oaCPgz1PoCJztqymCFaKwXt+5cCXn51uPxExFfQ=\ngithub.com/samber/lo v1.46.0/go.mod h1:RmDH9Ct32Qy3gduHQuKJ3gW1fMHAnE/fAzQuf6He5cU=\ngithub.com/shopspring/decimal v1.4.0 h1:bxl37RwXBklmTi0C79JfXCEBD1cqqHt0bbgBAGFp81k=\ngithub.com/shopspring/decimal v1.4.0/go.mod h1:gawqmDU56v4yIKSwfBSFip1HdCCXN8/+DMd9qYNcwME=\ngithub.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=\ngithub.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tidwall/gjson v1.17.1 h1:wlYEnwqAHgzmhNUFfw7Xalt2JzQvsMx2Se4PcoFCT/U=\ngithub.com/tidwall/gjson v1.17.1/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/urfave/cli v1.22.14 h1:ebbhrRiGK2i4naQJr+1Xj92HXZCrK7MsyTS/ob3HnAk=\ngithub.com/urfave/cli v1.22.14/go.mod h1:X0eDS6pD6Exaclxm99NJ3FiCDRED7vIHpx2mDOHLvkA=\ngolang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=\ngolang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=\ngolang.org/x/mod v0.19.0 h1:fEdghXQSo20giMthA7cd28ZC+jts4amQ3YMXiP5oMQ8=\ngolang.org/x/mod v0.19.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.27.0 h1:5K3Njcw06/l2y9vpGCSdcxWOYHOUk3dVNGDXN+FvAys=\ngolang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.23.0 h1:YfKFowiIMvtgl1UERQoTPPToxltDeZfbj4H7dVUCwmM=\ngolang.org/x/sys v0.23.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.23.0 h1:SGsXPZ+2l4JsgaCKkx+FQ9YZ5XEtA1GZYuoDjenLjvg=\ngolang.org/x/tools v0.23.0/go.mod h1:pnu6ufv6vQkll6szChhK3C3L/ruaIv5eBeztNG8wtsI=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.5.1 h1:EENdUnS3pdur5nybKYIh2Vfgc8IUNBjxDPSjtiJcOzU=\ngotest.tools/v3 v3.5.1/go.mod h1:isy3WKz7GK6uNw/sbHzfKBLvlvXwUyV06n6brMxxopU=\n"
        },
        {
          "name": "goss_config.go",
          "type": "blob",
          "size": 4.7109375,
          "content": "package goss\n\nimport (\n\t\"log\"\n\t\"reflect\"\n\n\t\"github.com/goss-org/goss/resource\"\n)\n\ntype GossConfig struct {\n\tFiles        resource.FileMap        `json:\"file,omitempty\" yaml:\"file,omitempty\"`\n\tPackages     resource.PackageMap     `json:\"package,omitempty\" yaml:\"package,omitempty\"`\n\tAddrs        resource.AddrMap        `json:\"addr,omitempty\" yaml:\"addr,omitempty\"`\n\tPorts        resource.PortMap        `json:\"port,omitempty\" yaml:\"port,omitempty\"`\n\tServices     resource.ServiceMap     `json:\"service,omitempty\" yaml:\"service,omitempty\"`\n\tUsers        resource.UserMap        `json:\"user,omitempty\" yaml:\"user,omitempty\"`\n\tGroups       resource.GroupMap       `json:\"group,omitempty\" yaml:\"group,omitempty\"`\n\tCommands     resource.CommandMap     `json:\"command,omitempty\" yaml:\"command,omitempty\"`\n\tDNS          resource.DNSMap         `json:\"dns,omitempty\" yaml:\"dns,omitempty\"`\n\tProcesses    resource.ProcessMap     `json:\"process,omitempty\" yaml:\"process,omitempty\"`\n\tGossfiles    resource.GossfileMap    `json:\"gossfile,omitempty\" yaml:\"gossfile,omitempty\"`\n\tKernelParams resource.KernelParamMap `json:\"kernel-param,omitempty\" yaml:\"kernel-param,omitempty\"`\n\tMounts       resource.MountMap       `json:\"mount,omitempty\" yaml:\"mount,omitempty\"`\n\tInterfaces   resource.InterfaceMap   `json:\"interface,omitempty\" yaml:\"interface,omitempty\"`\n\tHTTPs        resource.HTTPMap        `json:\"http,omitempty\" yaml:\"http,omitempty\"`\n\tMatchings    resource.MatchingMap    `json:\"matching,omitempty\" yaml:\"matching,omitempty\"`\n}\n\nfunc NewGossConfig() *GossConfig {\n\treturn &GossConfig{\n\t\tFiles:        make(resource.FileMap),\n\t\tPackages:     make(resource.PackageMap),\n\t\tAddrs:        make(resource.AddrMap),\n\t\tPorts:        make(resource.PortMap),\n\t\tServices:     make(resource.ServiceMap),\n\t\tUsers:        make(resource.UserMap),\n\t\tGroups:       make(resource.GroupMap),\n\t\tCommands:     make(resource.CommandMap),\n\t\tDNS:          make(resource.DNSMap),\n\t\tProcesses:    make(resource.ProcessMap),\n\t\tGossfiles:    make(resource.GossfileMap),\n\t\tKernelParams: make(resource.KernelParamMap),\n\t\tMounts:       make(resource.MountMap),\n\t\tInterfaces:   make(resource.InterfaceMap),\n\t\tHTTPs:        make(resource.HTTPMap),\n\t\tMatchings:    make(resource.MatchingMap),\n\t}\n}\n\n// Merge consumes all the resources in g2 into c, duplicate resources\n// will be overwritten with the ones in g2\nfunc (c *GossConfig) Merge(g2 GossConfig) {\n\tfor k, v := range g2.Files {\n\t\tmergeType(c.Files, \"file\", k, v)\n\t}\n\n\tfor k, v := range g2.Packages {\n\t\tmergeType(c.Packages, \"package\", k, v)\n\t}\n\n\tfor k, v := range g2.Addrs {\n\t\tmergeType(c.Addrs, \"addr\", k, v)\n\t}\n\n\tfor k, v := range g2.Ports {\n\t\tmergeType(c.Ports, \"port\", k, v)\n\t}\n\n\tfor k, v := range g2.Services {\n\t\tmergeType(c.Services, \"service\", k, v)\n\t}\n\n\tfor k, v := range g2.Users {\n\t\tmergeType(c.Users, \"user\", k, v)\n\t}\n\n\tfor k, v := range g2.Groups {\n\t\tmergeType(c.Groups, \"group\", k, v)\n\t}\n\n\tfor k, v := range g2.Commands {\n\t\tmergeType(c.Commands, \"command\", k, v)\n\t}\n\n\tfor k, v := range g2.DNS {\n\t\tmergeType(c.DNS, \"dns\", k, v)\n\t}\n\n\tfor k, v := range g2.Processes {\n\t\tmergeType(c.Processes, \"process\", k, v)\n\t}\n\n\tfor k, v := range g2.KernelParams {\n\t\tmergeType(c.KernelParams, \"kernel-param\", k, v)\n\t}\n\n\tfor k, v := range g2.Mounts {\n\t\tmergeType(c.Mounts, \"mount\", k, v)\n\t}\n\n\tfor k, v := range g2.Interfaces {\n\t\tmergeType(c.Interfaces, \"interface\", k, v)\n\t}\n\n\tfor k, v := range g2.HTTPs {\n\t\tmergeType(c.HTTPs, \"http\", k, v)\n\t}\n\n\tfor k, v := range g2.Matchings {\n\t\tmergeType(c.Matchings, \"matching\", k, v)\n\t}\n}\n\nfunc mergeType[V any](m map[string]V, t, k string, v V) {\n\tif _, ok := m[k]; ok {\n\t\tlog.Printf(\"[WARN] Duplicate key detected: '%s: %s'. The value from a later-loaded goss file has overwritten the previous value.\", t, k)\n\t}\n\tm[k] = v\n}\n\nfunc (c *GossConfig) Resources() []resource.Resource {\n\tvar tests []resource.Resource\n\n\tgm := genericConcatMaps(c.Commands,\n\t\tc.HTTPs,\n\t\tc.Addrs,\n\t\tc.DNS,\n\t\tc.Packages,\n\t\tc.Services,\n\t\tc.Files,\n\t\tc.Processes,\n\t\tc.Users,\n\t\tc.Groups,\n\t\tc.Ports,\n\t\tc.KernelParams,\n\t\tc.Mounts,\n\t\tc.Interfaces,\n\t\tc.Matchings,\n\t)\n\n\tfor _, m := range gm {\n\t\tfor _, t := range m {\n\t\t\t// FIXME: Can this be moved to a safer compile-time check?\n\t\t\ttests = append(tests, t.(resource.Resource))\n\t\t}\n\t}\n\n\treturn tests\n}\n\nfunc genericConcatMaps(maps ...any) (ret []map[string]any) {\n\tfor _, slice := range maps {\n\t\tim := interfaceMap(slice)\n\t\tret = append(ret, im)\n\t}\n\treturn ret\n}\n\nfunc interfaceMap(slice any) map[string]any {\n\tm := reflect.ValueOf(slice)\n\tif m.Kind() != reflect.Map {\n\t\tpanic(\"InterfaceSlice() given a non-slice type\")\n\t}\n\n\tret := make(map[string]any)\n\n\tfor _, k := range m.MapKeys() {\n\t\tret[k.Interface().(string)] = m.MapIndex(k).Interface()\n\t}\n\n\treturn ret\n}\n\nfunc mergeGoss(g1, g2 GossConfig) GossConfig {\n\tg1.Gossfiles = nil\n\n\tg1.Merge(g2)\n\n\treturn g1\n}\n"
        },
        {
          "name": "goss_test.go",
          "type": "blob",
          "size": 3.40625,
          "content": "package goss\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/goss-org/goss/outputs\"\n\t\"github.com/goss-org/goss/resource\"\n\t\"github.com/goss-org/goss/util\"\n)\n\nfunc checkErr(t *testing.T, err error, format string, a ...any) {\n\tt.Helper()\n\tif err == nil {\n\t\treturn\n\t}\n\n\tt.Fatalf(format+\": \"+err.Error(), a...)\n}\n\nfunc TestConfigMerge(t *testing.T) {\n\tvar g1json = `file:\n  /etc/passwd:\n    exists: true\n    mode: \"0644\"\n    size: 1722\n    owner: root\n    group: root\n    filetype: file\n    contains: []`\n\n\tvar g2json = `service:\n  sshd:\n    enabled: true\n    running: true\n`\n\n\tg1, err := ReadJSONData([]byte(g1json), true)\n\tcheckErr(t, err, \"reading g1 failed\")\n\t_, ok := g1.Services[\"sshd\"]\n\tif ok {\n\t\tt.Fatalf(\"did not expect sshd service\")\n\t}\n\n\tg2, err := ReadJSONData([]byte(g2json), true)\n\tcheckErr(t, err, \"reading g1 failed\")\n\n\tg1.Merge(g2)\n\t_, ok = g1.Files[\"/etc/passwd\"]\n\tif !ok {\n\t\tt.Fatalf(\"expected passwd file, got none\")\n\t}\n\t_, ok = g1.Services[\"sshd\"]\n\tif !ok {\n\t\tt.Fatalf(\"expected sshd service, got none\")\n\t}\n}\n\nfunc TestUseAsPackage(t *testing.T) {\n\toutput := &bytes.Buffer{}\n\n\t// temp spec file\n\tfh, err := os.CreateTemp(\"\", \"*.yaml\")\n\tcheckErr(t, err, \"temp file failed\")\n\tfh.Close()\n\n\t// new config that doesnt spam output etc\n\tcfg, err := util.NewConfig(util.WithFormatOptions(\"pretty\"), util.WithResultWriter(output), util.WithSpecFile(fh.Name()))\n\tcheckErr(t, err, \"new config failed\")\n\n\t// adds the os tmp dir to the goss spec file\n\terr = AddResources(fh.Name(), \"File\", []string{os.TempDir()}, cfg)\n\tcheckErr(t, err, \"could not add resource %q\", os.TempDir())\n\n\t// validate and sanity check, compare structured vs direct results etc\n\tresults, err := ValidateResults(cfg)\n\tcheckErr(t, err, \"check failed\")\n\n\tfound := 0\n\tpassed := 0\n\tfor rg := range results {\n\t\tfor _, r := range rg {\n\t\t\tfound++\n\n\t\t\tif r.Result == resource.SUCCESS {\n\t\t\t\tpassed++\n\t\t\t}\n\t\t}\n\t}\n\n\tcode, err := Validate(cfg)\n\tcheckErr(t, err, \"check failed\")\n\tif code != 0 {\n\t\tt.Fatalf(\"check failed, expected 0 got %d\", code)\n\t}\n\n\tres := &outputs.StructuredOutput{}\n\terr = json.Unmarshal(output.Bytes(), res)\n\tcheckErr(t, err, \"unmarshal failed\")\n\n\tif res.Summary.Failed != 0 {\n\t\tt.Fatalf(\"expected 0 failed, got %d\", res.Summary.Failed)\n\t}\n\n\tif len(res.Results) != found {\n\t\tt.Fatalf(\"expected %d results for %d\", found, len(res.Results))\n\t}\n\n\tokcount := 0\n\tfor _, r := range res.Results {\n\t\tif r.Result == resource.SUCCESS {\n\t\t\tokcount++\n\t\t}\n\t}\n\n\tif okcount != passed {\n\t\tt.Fatalf(\"expected %d passed but got %d\", passed, okcount)\n\t}\n}\n\nfunc TestSkipResourcesByType(t *testing.T) {\n\toutput := &bytes.Buffer{}\n\n\t// temp spec file\n\tfh, err := os.CreateTemp(\"\", \"*.yaml\")\n\tcheckErr(t, err, \"temp file failed\")\n\tfh.Close()\n\n\t// new config that doesnt spam output etc\n\tcfg, err := util.NewConfig(util.WithFormatOptions(\"pretty\"), util.WithResultWriter(output), util.WithSpecFile(fh.Name()), util.WithDisabledResourceTypes(\"file\"))\n\tcheckErr(t, err, \"new config failed\")\n\n\t// adds the os tmp dir to the goss spec file\n\terr = AddResources(fh.Name(), \"File\", []string{os.TempDir()}, cfg)\n\tcheckErr(t, err, \"could not add resource %q\", os.TempDir())\n\n\t// validate and sanity check, compare structured vs direct results etc\n\tresults, err := ValidateResults(cfg)\n\tcheckErr(t, err, \"check failed\")\n\n\tskipped := 0\n\tfor rg := range results {\n\t\tfor _, r := range rg {\n\t\t\tif r.Skipped {\n\t\t\t\tskipped++\n\t\t\t}\n\t\t}\n\t}\n\n\tif skipped != 5 {\n\t\tt.Fatalf(\"Expected to skip 5 tests, skipped %d\", skipped)\n\t}\n}\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 1.3994140625,
          "content": "#!/bin/sh\n\n{\nset -e\n\nLATEST_URL=\"https://github.com/goss-org/goss/releases/latest\"\nLATEST_EFFECTIVE=$(curl -s -L -o /dev/null ${LATEST_URL} -w '%{url_effective}')\nLATEST=${LATEST_EFFECTIVE##*/}\n\nDGOSS_VER=$GOSS_VER\n\nif [ -z \"$GOSS_VER\" ]; then\n    GOSS_VER=${GOSS_VER:-$LATEST}\n    DGOSS_VER='master'\nfi\nif [ -z \"$GOSS_VER\" ]; then\n    echo \"ERROR: Could not automatically detect latest version, set GOSS_VER env var and re-run\"\n    exit 1\nfi\nGOSS_DST=${GOSS_DST:-/usr/local/bin}\nINSTALL_LOC=\"${GOSS_DST%/}/goss\"\nDGOSS_INSTALL_LOC=\"${GOSS_DST%/}/dgoss\"\ntouch \"$INSTALL_LOC\" || { echo \"ERROR: Cannot write to $GOSS_DST set GOSS_DST elsewhere or use sudo\"; exit 1; }\n\narch=\"\"\nif [ \"$(uname -m)\" = \"x86_64\" ]; then\n    arch=\"amd64\"\nelif [ \"$(uname -m)\" = \"aarch32\" ]; then\n    arch=\"arm\"\nelif [ \"$(uname -m)\" = \"aarch64\" ] || [ \"$(uname -m)\" = \"arm64\" ]; then\n    arch=\"arm64\"\nelse\n    arch=\"386\"\nfi\n\nurl=\"https://github.com/goss-org/goss/releases/download/$GOSS_VER/goss-linux-$arch\"\n\necho \"Downloading $url\"\ncurl -L \"$url\" -o \"$INSTALL_LOC\"\nchmod +rx \"$INSTALL_LOC\"\necho \"Goss $GOSS_VER has been installed to $INSTALL_LOC\"\necho \"goss --version\"\n\"$INSTALL_LOC\" --version\n\ndgoss_url=\"https://raw.githubusercontent.com/goss-org/goss/$DGOSS_VER/extras/dgoss/dgoss\"\necho \"Downloading $dgoss_url\"\ncurl -L \"$dgoss_url\" -o \"$DGOSS_INSTALL_LOC\"\nchmod +rx \"$DGOSS_INSTALL_LOC\"\necho \"dgoss $DGOSS_VER has been installed to $DGOSS_INSTALL_LOC\"\n}\n"
        },
        {
          "name": "integration-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "logs.go",
          "type": "blob",
          "size": 0.927734375,
          "content": "package goss\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/goss-org/goss/util\"\n\t\"github.com/hashicorp/logutils\"\n)\n\nfunc setLogLevel(c *util.Config) error {\n\tfilter := &logutils.LevelFilter{\n\t\tLevels:   []logutils.LogLevel{\"TRACE\", \"DEBUG\", \"INFO\", \"WARN\", \"ERROR\"},\n\t\tMinLevel: logutils.LogLevel(\"INFO\"),\n\t\tWriter:   os.Stderr,\n\t}\n\tlog.SetFlags(0) // Turn off standard timestamp flags\n\tlog.SetOutput(&timestampedWriter{filter})\n\tfor _, lvl := range filter.Levels {\n\t\tcLvl := strings.ToUpper(c.LogLevel)\n\t\tif string(lvl) == cLvl {\n\t\t\tfilter.MinLevel = lvl\n\t\t\tlog.Printf(\"[DEBUG] Setting log level to %v\", cLvl)\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"Unsupported log level: %s\", c.LogLevel)\n}\n\ntype timestampedWriter struct {\n\twrappedWriter io.Writer\n}\n\nfunc (t *timestampedWriter) Write(b []byte) (int, error) {\n\ttimestamp := time.Now().UTC().Format(time.RFC3339)\n\treturn fmt.Fprintf(t.wrappedWriter, \"%s %s\", timestamp, b)\n}\n"
        },
        {
          "name": "matcher_test.go",
          "type": "blob",
          "size": 1.91015625,
          "content": "//go:build linux\n\npackage goss\n\nimport (\n\t\"bytes\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/goss-org/goss/util\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nvar (\n\t// This will generate the \"golden files\" prior to running the tests.\n\t// helpful when the output is changed and a user doesn't want to update every single expectation file by hand\n\tupdate = flag.Bool(\"update\", false, \"update the golden files of this test\")\n)\n\nfunc TestMain(m *testing.M) {\n\tflag.Parse()\n\tos.Exit(m.Run())\n}\n\nfunc TestMatchers(t *testing.T) {\n\tfiles, err := filepath.Glob(filepath.Join(\"testdata\", \"out_matching_*\"))\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tfor _, outFile := range files {\n\t\toutFile := outFile\n\t\tparts := strings.Split(outFile, \".\")\n\t\tspecName := fmt.Sprintf(\"%s.yaml\", strings.TrimPrefix(parts[0], \"testdata/out_\"))\n\t\tspecFile := filepath.Join(\"testdata\", specName)\n\t\toutFormat := parts[2]\n\t\twantCode, err := strconv.Atoi(parts[1])\n\t\tif err != nil {\n\t\t\tt.Fatal(err)\n\t\t}\n\t\ttn := outFile\n\t\tt.Run(tn, func(t *testing.T) {\n\t\t\toutput := &bytes.Buffer{}\n\n\t\t\tcfg, err := util.NewConfig(\n\t\t\t\tutil.WithOutputFormat(outFormat),\n\t\t\t\tutil.WithResultWriter(output),\n\t\t\t\tutil.WithSpecFile(specFile),\n\t\t\t\tutil.WithFormatOptions(\"sort\", \"pretty\"),\n\t\t\t)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\texitCode, err := Validate(cfg)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\tactualOut := output.String()\n\t\t\tactualOut = sanitizeOutput(actualOut)\n\n\t\t\tif *update {\n\t\t\t\tos.WriteFile(outFile, []byte(actualOut), 0644)\n\t\t\t}\n\t\t\twantOutB, err := os.ReadFile(outFile)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatal(err)\n\t\t\t}\n\t\t\twantOut := string(wantOutB)\n\t\t\tif actualOut != wantOut {\n\t\t\t\tassert.Equal(t, wantOut, actualOut)\n\t\t\t}\n\t\t\tif exitCode != wantCode {\n\t\t\t\tassert.Equal(t, wantCode, exitCode)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc sanitizeOutput(s string) string {\n\t// Remove duration time\n\tre := regexp.MustCompile(`\\d\\.\\d\\d\\ds`)\n\treturn re.ReplaceAllString(s, \"\")\n}\n"
        },
        {
          "name": "matchers",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 2.2939453125,
          "content": "site_name: Goss\nsite_description: Goss is a YAML based serverspec alternative tool for validating a server’s configuration.\nsite_author: Goss team\nsite_url: https://goss.readthedocs.io/\nrepo_url: https://github.com/goss-org/goss\nrepo_name: goss-org/goss\nedit_uri: edit/master/docs/\n\n\ntheme:\n  name: material\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      primary: black\n      accent: amber\n      toggle:\n        icon: material/weather-sunny\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      primary: black\n      accent: indigo\n      toggle:\n        icon: material/weather-night\n        name: Switch to light mode\n  features:\n    - content.action.edit\n    - content.code.copy\n    - navigation.footer\n    - navigation.instant\n    - navigation.instant.progress\n    - navigation.top\n    - navigation.tracking\n    - search.highlight\n    - search.share\n    - search.suggest\n    - toc.follow\n\n\nextra_css:\n  - style.css\n\nplugins:\n  - search\n  - awesome-pages\n  - macros:\n      render_by_default: false\n  - exclude:\n      glob:\n        - requirements.txt\n\nmarkdown_extensions:\n  - abbr\n  - admonition\n  - attr_list\n  - def_list\n  - md_in_html\n  - mdx_breakless_lists\n  - tables\n  - pymdownx.details\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.magiclink:\n      repo_url_shortener: true\n      social_url_shortener: true\n      repo_url_shorthand: true\n      social_url_shorthand: true\n      user: goss-org\n      repo: goss\n  - pymdownx.snippets:\n      base_path:\n        - .\n        - docs/snippets\n      check_paths: true\n  - pymdownx.superfences\n\ncopyright: Copyright &copy; 2015 - 2024 Ahmed Elsabbahy\n\nextra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/goss-org/goss\n    - icon: simple/travisci\n      link: https://travis-ci.org/goss-org/goss\n    - icon: fontawesome/brands/medium\n      link: https://medium.com/@aelsabbahy\n\nwatch:\n  - README.md\n  - LICENSE\n  - .github/CONTRIBUTING.md\n  - extras/dcgoss/README.md\n  - extras/dgoss/README.md\n  - extras/kgoss/README.md\n"
        },
        {
          "name": "novendor.sh",
          "type": "blob",
          "size": 0.4267578125,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\n\n# Bash replacement for glide novendor command\n# Returns all directories which include go files\n\nDIRS=$(ls -ld */ . | awk {'print $9'} | grep -v vendor)\n\nfor DIR in ${DIRS}; do\n    GOFILES=$(git ls-files ${DIR} | grep \".*\\.go$\") || true\n\n    if [[ ${DIR} == \".\"  ]]; then\n        echo \".\"\n        continue\n    fi\n\n    if [[ ${GOFILES} != \"\" ]]; then\n        echo \"./\"${DIR}\"...\"\n    fi\ndone\n\nexit 0\n"
        },
        {
          "name": "outputs",
          "type": "tree",
          "content": null
        },
        {
          "name": "release-build.sh",
          "type": "blob",
          "size": 0.9697265625,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\n\nplatform_spec=\"${1:?\"Must supply name of release binary to build e.g. goss-linux-amd64\"}\"\nversion_stamp=\"${TRAVIS_TAG:-\"0.0.0\"}\"\n\n# Split platform_spec into platform/arch segments\nIFS='- ' read -r -a segments <<< \"${platform_spec}\"\n\nos=\"${segments[0]}\"\narch=\"${segments[1]}\"\nif [[ \"${segments[0]}\" == \"alpha\" ]]; then\n  os=\"${segments[1]}\"\n  arch=\"${segments[2]}\"\nfi\n\noutput_dir=\"release/\"\noutput_fname=\"goss-${platform_spec}\"\nif [[ \"${os}\" == \"windows\" ]]; then\n  output_fname=\"${output_fname}.exe\"\nfi\noutput=\"${output_dir}/${output_fname}\"\n\nGOOS=\"${os}\" GOARCH=\"${arch}\" CGO_ENABLED=0 go build \\\n  -ldflags \"-X github.com/goss-org/goss/util.Version=${version_stamp} -s -w\" \\\n  -o \"${output}\" \\\n  github.com/goss-org/goss/cmd/goss\n\nchmod +x \"${output}\"\n\nfunction __sha256sum {\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    shasum -a 256 \"$1\"\n  else\n    sha256sum \"$1\"\n  fi\n}\n\n(cd \"$output_dir\" && __sha256sum \"${output_fname}\" > \"${output_fname}.sha256\")\n"
        },
        {
          "name": "resource",
          "type": "tree",
          "content": null
        },
        {
          "name": "serve.go",
          "type": "blob",
          "size": 4.9462890625,
          "content": "package goss\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/goss-org/goss/outputs\"\n\t\"github.com/goss-org/goss/resource\"\n\t\"github.com/goss-org/goss/system\"\n\t\"github.com/goss-org/goss/util\"\n\t\"github.com/patrickmn/go-cache\"\n\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nfunc Serve(c *util.Config) error {\n\terr := setLogLevel(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\tendpoint := c.Endpoint\n\thealth, err := newHealthHandler(c)\n\tif err != nil {\n\t\treturn err\n\t}\n\thttp.Handle(endpoint, health)\n\thttp.Handle(\"/metrics\", promhttp.Handler())\n\tlog.Printf(\"[INFO] Starting to listen on: %s\", c.ListenAddress)\n\treturn http.ListenAndServe(c.ListenAddress, nil)\n}\n\nfunc newHealthHandler(c *util.Config) (*healthHandler, error) {\n\tcolor.NoColor = true\n\tcache := cache.New(c.Cache, 30*time.Second)\n\n\tcfg, err := getGossConfig(c.Vars, c.VarsInline, c.Spec)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\toutput, err := getOutputer(c.NoColor, c.OutputFormat)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\thealth := &healthHandler{\n\t\tc:             c,\n\t\tgossConfig:    *cfg,\n\t\tsys:           system.New(c.PackageManager),\n\t\toutputer:      output,\n\t\tcache:         cache,\n\t\tgossMu:        &sync.Mutex{},\n\t\tmaxConcurrent: c.MaxConcurrent,\n\t}\n\treturn health, nil\n}\n\ntype res struct {\n\tbody       bytes.Buffer\n\tstatusCode int\n}\ntype healthHandler struct {\n\tc             *util.Config\n\tgossConfig    GossConfig\n\tsys           *system.System\n\toutputer      outputs.Outputer\n\tcache         *cache.Cache\n\tgossMu        *sync.Mutex\n\tmaxConcurrent int\n}\n\nfunc (h healthHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\toutputFormat, outputer, err := h.negotiateResponseContentType(r)\n\tif err != nil {\n\t\tlog.Printf(\"[DEBUG] Warn: Using process-level output-format. %s\", err)\n\t\toutputFormat = h.c.OutputFormat\n\t\toutputer = h.outputer\n\t}\n\tnegotiatedContentType := h.responseContentType(outputFormat)\n\n\tlog.Printf(\"[TRACE] %v: requesting health probe\", r.RemoteAddr)\n\tresp := h.processAndEnsureCached(negotiatedContentType, outputer)\n\tw.Header().Set(http.CanonicalHeaderKey(\"Content-Type\"), negotiatedContentType) //nolint:gosimple\n\tw.WriteHeader(resp.statusCode)\n\tlogBody := \"\"\n\tif resp.statusCode != http.StatusOK {\n\t\tlogBody = \" - \" + resp.body.String()\n\t}\n\tresp.body.WriteTo(w)\n\tlog.Printf(\"[DEBUG] %v: status %d%s\", r.RemoteAddr, resp.statusCode, logBody)\n}\n\nfunc (h healthHandler) processAndEnsureCached(negotiatedContentType string, outputer outputs.Outputer) res {\n\tvar tra [][]resource.TestResult\n\tcacheKey := \"res\"\n\ttmp, found := h.cache.Get(cacheKey)\n\tif found {\n\t\tlog.Printf(\"[TRACE] Returning cached[%s].\", cacheKey)\n\t\ttra = tmp.([][]resource.TestResult)\n\t} else {\n\t\tlog.Printf(\"Stale cache[%s], running tests\", cacheKey)\n\t\th.sys = system.New(h.c.PackageManager)\n\t\ttra = h.validate()\n\t\th.cache.SetDefault(cacheKey, tra)\n\t}\n\ttrc := testResultArrayToChan(tra)\n\treturn h.output(trc, outputer)\n}\n\nfunc (h healthHandler) output(trc <-chan []resource.TestResult, outputer outputs.Outputer) res {\n\tvar b bytes.Buffer\n\toutputConfig := util.OutputConfig{\n\t\tFormatOptions: h.c.FormatOptions,\n\t}\n\texitCode := outputer.Output(&b, trc, outputConfig)\n\tresp := res{\n\t\tbody: b,\n\t}\n\tif exitCode == 0 {\n\t\tresp.statusCode = http.StatusOK\n\t} else {\n\t\tresp.statusCode = http.StatusServiceUnavailable\n\t}\n\treturn resp\n}\nfunc (h healthHandler) validate() [][]resource.TestResult {\n\th.sys = system.New(h.c.PackageManager)\n\tres := make([][]resource.TestResult, 0)\n\ttr := validate(h.sys, h.gossConfig, h.c.DisabledResourceTypes, h.maxConcurrent)\n\tfor i := range tr {\n\t\tres = append(res, i)\n\t}\n\treturn res\n}\n\nfunc testResultArrayToChan(tra [][]resource.TestResult) <-chan []resource.TestResult {\n\tc := make(chan []resource.TestResult)\n\tgo func(c chan []resource.TestResult) {\n\t\tdefer close(c)\n\n\t\tfor _, i := range tra {\n\t\t\tc <- i\n\t\t}\n\t}(c)\n\n\treturn c\n}\n\nconst (\n\t// https://en.wikipedia.org/wiki/Media_type\n\tmediaTypePrefix = \"application/vnd.goss-\"\n)\n\nfunc (h healthHandler) negotiateResponseContentType(r *http.Request) (string, outputs.Outputer, error) {\n\tacceptHeader := r.Header[http.CanonicalHeaderKey(\"Accept\")]\n\tvar outputer outputs.Outputer\n\toutputName := \"\"\n\tfor _, acceptCandidate := range acceptHeader {\n\t\tacceptCandidate = strings.TrimSpace(acceptCandidate)\n\t\tif strings.HasPrefix(acceptCandidate, mediaTypePrefix) {\n\t\t\toutputName = strings.TrimPrefix(acceptCandidate, mediaTypePrefix)\n\t\t} else if strings.EqualFold(\"application/json\", acceptCandidate) || strings.EqualFold(\"text/json\", acceptCandidate) {\n\t\t\toutputName = \"json\"\n\t\t} else {\n\t\t\toutputName = \"\"\n\t\t}\n\t\tvar err error\n\t\toutputer, err = outputs.GetOutputer(outputName)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t}\n\tif outputer == nil {\n\t\treturn \"\", nil, fmt.Errorf(\"Accept header on request missing or invalid. Accept header: %v\", acceptHeader)\n\t}\n\n\treturn outputName, outputer, nil\n}\n\nfunc (h healthHandler) responseContentType(outputName string) string {\n\tif outputName == \"json\" {\n\t\treturn \"application/json\"\n\t}\n\treturn fmt.Sprintf(\"%s%s\", mediaTypePrefix, outputName)\n}\n"
        },
        {
          "name": "serve_test.go",
          "type": "blob",
          "size": 8.6708984375,
          "content": "package goss\n\nimport (\n\t\"bytes\"\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"path/filepath\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/goss-org/goss/util\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestServeWithNoContentNegotiation(t *testing.T) {\n\tt.Parallel()\n\ttests := map[string]struct {\n\t\toutputFormat        string\n\t\tspecFile            string\n\t\texpectedHTTPStatus  int\n\t\texpectedContentType string\n\t}{\n\t\t\"passing-json\": {\n\t\t\toutputFormat:        \"json\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t\t\"failing-json\": {\n\t\t\toutputFormat:        \"json\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"failing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusServiceUnavailable,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t\t\"failing-default-output\": {\n\t\t\toutputFormat:        \"rspecish\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"failing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusServiceUnavailable,\n\t\t\texpectedContentType: \"\",\n\t\t},\n\t}\n\tfor testName := range tests {\n\t\ttc := tests[testName]\n\t\tt.Run(testName, func(t *testing.T) {\n\t\t\tvar logOutput bytes.Buffer\n\t\t\tlog.SetOutput(&logOutput)\n\n\t\t\tconfig, err := util.NewConfig(\n\t\t\t\tutil.WithSpecFile(tc.specFile),\n\t\t\t\tutil.WithOutputFormat(tc.outputFormat),\n\t\t\t)\n\t\t\trequire.NoError(t, err)\n\n\t\t\thh, err := newHealthHandler(config)\n\t\t\trequire.NoError(t, err)\n\n\t\t\treq := makeRequest(t, config, nil)\n\t\t\trr := httptest.NewRecorder()\n\n\t\t\thandler := http.HandlerFunc(hh.ServeHTTP)\n\n\t\t\thandler.ServeHTTP(rr, req)\n\n\t\t\tt.Logf(\"testName %q log output:\\n%s\", testName, logOutput.String())\n\t\t\tassert.Equal(t, tc.expectedHTTPStatus, rr.Code)\n\t\t\tif tc.expectedContentType != \"\" {\n\t\t\t\tassert.Equal(t, tc.expectedContentType, rr.Result().Header.Get(\"Content-Type\"))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestServeNegotiatingContent(t *testing.T) {\n\tt.Parallel()\n\ttests := map[string]struct {\n\t\tacceptHeader        []string\n\t\toutputFormat        string\n\t\tspecFile            string\n\t\texpectedHTTPStatus  int\n\t\texpectedContentType string\n\t}{\n\t\t\"accept {blank} returns process-level format-option\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/vnd.goss-structured\",\n\t\t},\n\t\t\"accept application/json\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"application/json\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t\t\"accept text/json translates to application/json\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"text/json\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t\t\"when accept is application/vnd.goss-json, return more widely known application/json\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"application/vnd.goss-json\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t\t\"accept header contains vendor-specific output format different from process-level\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"application/vnd.goss-rspecish\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/vnd.goss-rspecish\",\n\t\t},\n\t\t\"accept header contains nonsense\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"application/vnd.goss-nonexistent\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/vnd.goss-structured\",\n\t\t},\n\t\t\"accept header contains nonsense then valid\": {\n\t\t\tacceptHeader: []string{\n\t\t\t\t\"application/vnd.goss-nonexistent\",\n\t\t\t\t\"application/json\",\n\t\t\t},\n\t\t\toutputFormat:        \"structured\",\n\t\t\tspecFile:            filepath.Join(\"testdata\", \"passing.goss.yaml\"),\n\t\t\texpectedHTTPStatus:  http.StatusOK,\n\t\t\texpectedContentType: \"application/json\",\n\t\t},\n\t}\n\tfor testName := range tests {\n\t\ttc := tests[testName]\n\t\tt.Run(testName, func(t *testing.T) {\n\t\t\tvar logOutput bytes.Buffer\n\t\t\tlog.SetOutput(&logOutput)\n\n\t\t\tconfig, err := util.NewConfig(\n\t\t\t\tutil.WithSpecFile(tc.specFile),\n\t\t\t\tutil.WithOutputFormat(tc.outputFormat),\n\t\t\t)\n\t\t\trequire.NoError(t, err)\n\n\t\t\thh, err := newHealthHandler(config)\n\t\t\trequire.NoError(t, err)\n\n\t\t\treq := makeRequest(t, config, map[string][]string{\n\t\t\t\t\"accept\": tc.acceptHeader,\n\t\t\t})\n\t\t\trr := httptest.NewRecorder()\n\n\t\t\thandler := http.HandlerFunc(hh.ServeHTTP)\n\n\t\t\thandler.ServeHTTP(rr, req)\n\n\t\t\tt.Logf(\"testName %q log output:\\n%s\", testName, logOutput.String())\n\t\t\tassert.Equal(t, tc.expectedHTTPStatus, rr.Code)\n\t\t\tif tc.expectedContentType != \"\" {\n\t\t\t\tassert.Equal(t, tc.expectedContentType, rr.Result().Header.Get(\"Content-Type\"))\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestServeCacheWithNoContentNegotiation(t *testing.T) {\n\tvar logOutput bytes.Buffer\n\tlog.SetOutput(&logOutput)\n\tconst cache = time.Duration(time.Millisecond * 100)\n\tconfig, err := util.NewConfig(\n\t\tutil.WithSpecFile(filepath.Join(\"testdata\", \"passing.goss.yaml\")),\n\t\tutil.WithCache(cache),\n\t)\n\trequire.NoError(t, err)\n\n\thh, err := newHealthHandler(config)\n\trequire.NoError(t, err)\n\n\treq := makeRequest(t, config, nil)\n\trr := httptest.NewRecorder()\n\n\thandler := http.HandlerFunc(hh.ServeHTTP)\n\n\tt.Run(\"fresh cache\", func(t *testing.T) {\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.Contains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n\n\tt.Run(\"immediately re-request, cache should be warm\", func(t *testing.T) {\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.NotContains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n\n\tt.Run(\"allow cache to expire, cache should be cold\", func(t *testing.T) {\n\t\ttime.Sleep(cache + 5*time.Millisecond)\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.Contains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n}\n\nfunc TestServeCacheNegotiatingContent(t *testing.T) {\n\tvar logOutput bytes.Buffer\n\tlog.SetOutput(&logOutput)\n\tconst cache = time.Duration(time.Millisecond * 100)\n\tconfig, err := util.NewConfig(\n\t\tutil.WithSpecFile(filepath.Join(\"testdata\", \"passing.goss.yaml\")),\n\t\tutil.WithCache(cache),\n\t\tutil.WithOutputFormat(\"structured\"),\n\t)\n\trequire.NoError(t, err)\n\n\thh, err := newHealthHandler(config)\n\trequire.NoError(t, err)\n\n\trr := httptest.NewRecorder()\n\n\thandler := http.HandlerFunc(hh.ServeHTTP)\n\n\tt.Run(\"fresh cache\", func(t *testing.T) {\n\t\treq := makeRequest(t, config, map[string][]string{\n\t\t\t\"accept\": {\"application/json\"},\n\t\t})\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.Contains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n\n\tt.Run(\"immediately re-request, cache should be warm\", func(t *testing.T) {\n\t\treq := makeRequest(t, config, map[string][]string{\n\t\t\t\"accept\": {\"application/json\"},\n\t\t})\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.NotContains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n\n\tt.Run(\"immediately re-request but different accept header, cache should be warm\", func(t *testing.T) {\n\t\treq := makeRequest(t, config, map[string][]string{\n\t\t\t\"accept\": {\"application/vnd.goss-rspecish\"},\n\t\t})\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.NotContains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n\n\tt.Run(\"allow cache to expire, cache should be cold\", func(t *testing.T) {\n\t\ttime.Sleep(cache + 5*time.Millisecond)\n\t\treq := makeRequest(t, config, map[string][]string{\n\t\t\t\"accept\": {\"application/json\"},\n\t\t})\n\t\thandler.ServeHTTP(rr, req)\n\n\t\tassert.Equal(t, http.StatusOK, rr.Result().StatusCode)\n\t\tassert.Contains(t, logOutput.String(), \"Stale cache\")\n\t\tt.Log(logOutput.String())\n\t\tlogOutput.Reset()\n\t})\n}\n\nfunc makeRequest(t *testing.T, config *util.Config, headers map[string][]string) *http.Request {\n\treq, err := http.NewRequest(\"GET\", config.Endpoint, nil)\n\trequire.NoError(t, err)\n\tfor header, vals := range headers {\n\t\tfor _, v := range vals {\n\t\t\treq.Header.Add(header, v)\n\t\t}\n\t}\n\treturn req\n}\n"
        },
        {
          "name": "store.go",
          "type": "blob",
          "size": 6.923828125,
          "content": "package goss\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"reflect\"\n\t\"sort\"\n\t\"strings\"\n\n\t\"gopkg.in/yaml.v3\"\n\n\t\"github.com/goss-org/goss/resource\"\n\t\"github.com/goss-org/goss/util\"\n)\n\nconst (\n\tUNSET = iota\n\tJSON\n\tYAML\n)\n\nvar outStoreFormat = UNSET\nvar currentTemplateFilter TemplateFilter\nvar debug = false\n\nfunc getStoreFormatFromFileName(f string) (int, error) {\n\text := filepath.Ext(f)\n\tswitch ext {\n\tcase \".json\":\n\t\treturn JSON, nil\n\tcase \".yaml\", \".yml\":\n\t\treturn YAML, nil\n\tdefault:\n\t\treturn 0, fmt.Errorf(\"unknown file extension: %v\", ext)\n\t}\n}\n\nfunc getStoreFormatFromData(data []byte) (int, error) {\n\tvar v any\n\tif err := unmarshalJSON(data, &v); err == nil {\n\t\treturn JSON, nil\n\t}\n\tif err := unmarshalYAML(data, &v); err == nil {\n\t\treturn YAML, nil\n\t}\n\n\treturn 0, fmt.Errorf(\"unable to determine format from content\")\n}\n\n// ReadJSON Reads json file returning GossConfig\nfunc ReadJSON(filePath string) (GossConfig, error) {\n\tfile, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\treturn GossConfig{}, fmt.Errorf(\"file error: %v\", err)\n\t}\n\n\treturn ReadJSONData(file, false)\n}\n\ntype TmplVars struct {\n\tVars map[string]any\n}\n\nfunc (t *TmplVars) Env() map[string]string {\n\tenv := make(map[string]string)\n\tfor _, i := range os.Environ() {\n\t\tsep := strings.Index(i, \"=\")\n\t\tenv[i[0:sep]] = i[sep+1:]\n\t}\n\treturn env\n}\n\nfunc loadVars(varsFile string, varsInline string) (map[string]any, error) {\n\tvars, err := varsFromFile(varsFile)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"loading vars file '%s'\\n%w\", varsFile, err)\n\t}\n\n\tvarsExtra, err := varsFromString(varsInline)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"loading inline vars\\n%w\", err)\n\t}\n\n\tfor k, v := range varsExtra {\n\t\tvars[k] = v\n\t}\n\n\treturn vars, nil\n}\n\nfunc varsFromFile(varsFile string) (map[string]any, error) {\n\tvars := make(map[string]any)\n\tif varsFile == \"\" {\n\t\treturn vars, nil\n\t}\n\tdata, err := os.ReadFile(varsFile)\n\tif err != nil {\n\t\treturn vars, err\n\t}\n\tformat, err := getStoreFormatFromData(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tif err := unmarshal(data, &vars, format); err != nil {\n\t\treturn vars, err\n\t}\n\treturn vars, nil\n}\n\nfunc varsFromString(varsString string) (map[string]any, error) {\n\tvars := make(map[string]any)\n\tif varsString == \"\" {\n\t\treturn vars, nil\n\t}\n\tdata := []byte(varsString)\n\tformat, err := getStoreFormatFromData(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := unmarshal(data, &vars, format); err != nil {\n\t\treturn vars, err\n\t}\n\treturn vars, nil\n}\n\n// ReadJSONData Reads json byte array returning GossConfig\nfunc ReadJSONData(data []byte, detectFormat bool) (GossConfig, error) {\n\tvar err error\n\tif currentTemplateFilter != nil {\n\t\tdata, err = currentTemplateFilter(data)\n\t\tif err != nil {\n\t\t\treturn GossConfig{}, err\n\t\t}\n\t\tif debug {\n\t\t\tfmt.Println(\"DEBUG: file after text/template render\")\n\t\t\tfmt.Println(string(data))\n\t\t}\n\t}\n\n\tformat := outStoreFormat\n\tif detectFormat {\n\t\tformat, err = getStoreFormatFromData(data)\n\t\tif err != nil {\n\t\t\treturn GossConfig{}, err\n\t\t}\n\t}\n\n\tgossConfig := NewGossConfig()\n\t// Horrible, but will do for now\n\tif err := unmarshal(data, gossConfig, format); err != nil {\n\t\treturn *gossConfig, err\n\t}\n\n\treturn *gossConfig, nil\n}\n\n// RenderJSON reads json file recursively returning string\nfunc RenderJSON(c *util.Config) (string, error) {\n\tvar err error\n\tdebug = c.Debug\n\tcurrentTemplateFilter, err = NewTemplateFilter(c.Vars, c.VarsInline)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\toutStoreFormat, err = getStoreFormatFromFileName(c.Spec)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tj, err := ReadJSON(c.Spec)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tgossConfig, err := mergeJSONData(j, 0, filepath.Dir(c.Spec))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tb, err := marshal(gossConfig)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"rendering failed: %v\", err)\n\t}\n\n\treturn string(b), nil\n}\n\nfunc mergeJSONData(gossConfig GossConfig, depth int, path string) (GossConfig, error) {\n\tdepth++\n\tif depth >= 50 {\n\t\treturn GossConfig{}, fmt.Errorf(\"max depth of 50 reached, possibly due to dependency loop in goss file\")\n\t}\n\t// Our return gossConfig\n\tret := *NewGossConfig()\n\tret = mergeGoss(ret, gossConfig)\n\n\t// Sort the gossfiles to ensure consistent ordering\n\tvar keys []string\n\tfor k := range gossConfig.Gossfiles {\n\t\tkeys = append(keys, k)\n\t}\n\tsort.Strings(keys)\n\n\t// Merge gossfiles in sorted order\n\tfor _, k := range keys {\n\t\tg := gossConfig.Gossfiles[k]\n\t\tvar fpath string\n\t\tif strings.HasPrefix(g.GetGossfile(), \"/\") {\n\t\t\tfpath = g.GetGossfile()\n\t\t} else {\n\t\t\tfpath = filepath.Join(path, g.GetGossfile())\n\t\t}\n\t\tif g.GetSkip() {\n\t\t\t// Do not process gossfiles with the skip attribute\n\t\t\tcontinue\n\t\t}\n\t\tmatches, err := filepath.Glob(fpath)\n\t\tif err != nil {\n\t\t\treturn ret, fmt.Errorf(\"error in expanding glob pattern: %q\", err)\n\t\t}\n\t\tif matches == nil {\n\t\t\treturn ret, fmt.Errorf(\"no matched files were found: %q\", fpath)\n\t\t}\n\t\tfor _, match := range matches {\n\t\t\tfdir := filepath.Dir(match)\n\t\t\tj, err := ReadJSON(match)\n\t\t\tif err != nil {\n\t\t\t\treturn GossConfig{}, fmt.Errorf(\"could not read json data in %s: %s\", match, err)\n\t\t\t}\n\t\t\tj, err = mergeJSONData(j, depth, fdir)\n\t\t\tif err != nil {\n\t\t\t\treturn ret, fmt.Errorf(\"could not write json data: %s\", err)\n\t\t\t}\n\t\t\tret = mergeGoss(ret, j)\n\t\t}\n\t}\n\treturn ret, nil\n}\n\nfunc WriteJSON(filePath string, gossConfig GossConfig) error {\n\tjsonData, err := marshal(gossConfig)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to write %s: %s\", filePath, err)\n\t}\n\n\t// check if the auto added json data is empty before writing to file.\n\temptyConfig := *NewGossConfig()\n\temptyData, err := marshal(emptyConfig)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to write %s: %s\", filePath, err)\n\t}\n\n\tif string(emptyData) == string(jsonData) {\n\t\tlog.Printf(\"Can't write empty configuration file. Please check resource name(s).\")\n\t\treturn nil\n\t}\n\n\tif err := os.WriteFile(filePath, jsonData, 0644); err != nil {\n\t\treturn fmt.Errorf(\"failed to write %s: %s\", filePath, err)\n\t}\n\n\treturn nil\n}\n\nfunc resourcePrint(fileName string, res resource.ResourceRead, announce bool) {\n\tresMap := map[string]resource.ResourceRead{res.ID(): res}\n\n\toj, _ := marshal(resMap)\n\ttyp := reflect.TypeOf(res)\n\ttyps := strings.Split(typ.String(), \".\")[1]\n\n\tif announce {\n\t\tfmt.Printf(\"Adding %s to '%s':\\n\\n%s\\n\\n\", typs, fileName, string(oj))\n\t}\n}\n\nfunc marshal(gossConfig any) ([]byte, error) {\n\tswitch outStoreFormat {\n\tcase JSON:\n\t\treturn marshalJSON(gossConfig)\n\tcase YAML:\n\t\treturn marshalYAML(gossConfig)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"StoreFormat unset\")\n\t}\n}\n\nfunc unmarshal(data []byte, v any, storeFormat int) error {\n\tswitch storeFormat {\n\tcase JSON:\n\t\treturn unmarshalJSON(data, v)\n\tcase YAML:\n\t\treturn unmarshalYAML(data, v)\n\tdefault:\n\t\treturn fmt.Errorf(\"StoreFormat unset\")\n\t}\n}\n\nfunc marshalJSON(gossConfig any) ([]byte, error) {\n\treturn json.MarshalIndent(gossConfig, \"\", \"    \")\n}\n\nfunc unmarshalJSON(data []byte, v any) error {\n\treturn json.Unmarshal(data, v)\n}\n\nfunc marshalYAML(gossConfig any) ([]byte, error) {\n\treturn yaml.Marshal(gossConfig)\n}\n\nfunc unmarshalYAML(data []byte, v any) error {\n\treturn yaml.Unmarshal(data, v)\n}\n"
        },
        {
          "name": "store_test.go",
          "type": "blob",
          "size": 3.8662109375,
          "content": "package goss\n\nimport (\n\t\"log\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc Test_varsFromString(t *testing.T) {\n\ttests := []struct {\n\t\tname    string\n\t\targ     string\n\t\twant    map[string]any\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname:    \"empty_string\",\n\t\t\targ:     ``,\n\t\t\twant:    map[string]any{},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname:    \"empty_JSON\",\n\t\t\targ:     `{}`,\n\t\t\twant:    map[string]any{},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"JSON_simple\",\n\t\t\targ:  `{\"a\": \"a\", \"b\": 1}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"a\": \"a\",\n\t\t\t\t\"b\": float64(1),\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"YAML_simple\",\n\t\t\targ:  `{a: a, b: 1}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"a\": \"a\",\n\t\t\t\t\"b\": 1,\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"JSON_float\",\n\t\t\targ:  `{\"f\": 1.23}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"f\": 1.23,\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"YAML_float\",\n\t\t\targ:  `{f: 1.23}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"f\": 1.23,\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"JSON_list\",\n\t\t\targ:  `{\"l\": [\"l1\", \"l2\", 3]}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"l\": []any{\n\t\t\t\t\t\"l1\",\n\t\t\t\t\t\"l2\",\n\t\t\t\t\tfloat64(3),\n\t\t\t\t},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"YAML_list\",\n\t\t\targ:  `{l: [l1, l2, 3]}`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"l\": []any{\n\t\t\t\t\t\"l1\",\n\t\t\t\t\t\"l2\",\n\t\t\t\t\t3,\n\t\t\t\t},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"JSON_object\",\n\t\t\targ:  `{\"o\": {\"oa\": \"a\", \"oo\": { \"oo1\": 1 } } }`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"o\": map[string]any{\n\t\t\t\t\t\"oa\": \"a\",\n\t\t\t\t\t\"oo\": map[string]any{\n\t\t\t\t\t\t\"oo1\": float64(1),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"YAML_object\",\n\t\t\targ:  `{o: {oa: a, oo: { oo1: 1 } } }`,\n\t\t\twant: map[string]any{\n\t\t\t\t\"o\": map[string]any{\n\t\t\t\t\t\"oa\": \"a\",\n\t\t\t\t\t\"oo\": map[string]any{\n\t\t\t\t\t\t\"oo1\": 1,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := varsFromString(tt.arg)\n\n\t\t\tassert.Equal(t, tt.want, got, \"map contents\")\n\t\t\tassert.Equal(t, tt.wantErr, err != nil, \"has error\")\n\t\t})\n\t}\n}\n\nfunc Test_loadVars(t *testing.T) {\n\tfileEmpty, fileEmptyClose := fileMaker(``)\n\tdefer fileEmptyClose()\n\n\tfileNil, fileNilClose := fileMaker(``)\n\tdefer fileNilClose()\n\n\tfileSimple, fileSimpleClose := fileMaker(`{a: a}`)\n\tdefer fileSimpleClose()\n\n\ttype args struct {\n\t\tvarsFile   string\n\t\tvarsInline string\n\t}\n\ttests := []struct {\n\t\tname    string\n\t\targs    args\n\t\twant    map[string]any\n\t\twantErr bool\n\t}{\n\t\t{\n\t\t\tname: \"both_empty\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileEmpty,\n\t\t\t\tvarsInline: `{}`,\n\t\t\t},\n\t\t\twant:    map[string]any{},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"both_nil\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileNil,\n\t\t\t\tvarsInline: `{}`,\n\t\t\t},\n\t\t\twant:    map[string]any{},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"file_empty\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileEmpty,\n\t\t\t\tvarsInline: `{b: b}`,\n\t\t\t},\n\t\t\twant: map[string]any{\n\t\t\t\t\"b\": \"b\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"inline_empty\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileSimple,\n\t\t\t\tvarsInline: `{}`,\n\t\t\t},\n\t\t\twant: map[string]any{\n\t\t\t\t\"a\": \"a\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"no_overwrite\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileSimple,\n\t\t\t\tvarsInline: `{b: b}`,\n\t\t\t},\n\t\t\twant: map[string]any{\n\t\t\t\t\"a\": \"a\",\n\t\t\t\t\"b\": \"b\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t\t{\n\t\t\tname: \"overwrite\",\n\t\t\targs: args{\n\t\t\t\tvarsFile:   fileSimple,\n\t\t\t\tvarsInline: `{a: c, b: b}`,\n\t\t\t},\n\t\t\twant: map[string]any{\n\t\t\t\t\"a\": \"c\",\n\t\t\t\t\"b\": \"b\",\n\t\t\t},\n\t\t\twantErr: false,\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tgot, err := loadVars(tt.args.varsFile, tt.args.varsInline)\n\n\t\t\tassert.Equal(t, tt.want, got, \"map contents\")\n\t\t\tassert.Equal(t, tt.wantErr, err != nil, \"has error\")\n\t\t})\n\t}\n}\n\nfunc fileMaker(content string) (string, func()) {\n\tbytes := []byte(content)\n\n\tf, err := os.CreateTemp(\"\", \"*\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t_, err = f.Write(bytes)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn f.Name(), func() {\n\t\tif err := f.Close(); err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "template.go",
          "type": "blob",
          "size": 2.611328125,
          "content": "package goss\n\nimport (\n\t\"bytes\"\n\t\"fmt\"\n\t\"os\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"text/template\"\n\n\t\"github.com/Masterminds/sprig/v3\"\n)\n\n// TemplateFilter is the type of the Goss Template Filter which include custom variables and functions.\ntype TemplateFilter func([]byte) ([]byte, error)\n\n// NewTemplateFilter creates a new Template Filter based in the file and inline variables.\nfunc NewTemplateFilter(varsFile string, varsInline string) (func([]byte) ([]byte, error), error) {\n\tvars, err := loadVars(varsFile, varsInline)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed while loading vars file %q: %v\", varsFile, err)\n\t}\n\n\ttVars := &TmplVars{Vars: vars}\n\n\tf := func(data []byte) ([]byte, error) {\n\t\tt := template.New(\"test\").Funcs(sprig.TxtFuncMap()).Funcs(funcMap)\n\n\t\ttmpl, err := t.Parse(string(data))\n\t\tif err != nil {\n\t\t\treturn []byte{}, err\n\t\t}\n\n\t\ttmpl.Option(\"missingkey=error\")\n\t\tvar doc bytes.Buffer\n\n\t\terr = tmpl.Execute(&doc, tVars)\n\t\tif err != nil {\n\t\t\treturn []byte{}, err\n\t\t}\n\n\t\treturn doc.Bytes(), nil\n\t}\n\n\treturn f, nil\n}\n\nfunc mkSlice(args ...any) []any {\n\treturn args\n}\n\nfunc readFile(f string) (string, error) {\n\tb, err := os.ReadFile(f)\n\tif err != nil {\n\t\treturn \"\", err\n\n\t}\n\treturn strings.TrimSpace(string(b)), nil\n}\n\nfunc getEnv(key string, def ...string) string {\n\tval := os.Getenv(key)\n\tif val == \"\" && len(def) > 0 {\n\t\treturn def[0]\n\t}\n\n\treturn os.Getenv(key)\n}\n\nfunc regexMatch(re, s string) (bool, error) {\n\tcompiled, err := regexp.Compile(re)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\treturn compiled.MatchString(s), nil\n}\n\n// return named parenthesized subexpresions, if received, or stringfied (Sprig \"get\" need strings) keys like array\nfunc findStringSubmatch(pattern, input string) map[string]interface{} {\n\tre := regexp.MustCompile(pattern)\n\tels := re.FindStringSubmatch(input)\n\n\telsMap := make(map[string]interface{})\n\telsMapNamed := make(map[string]interface{})\n\n\t// create always elsMaps but returns elsMapNamed if exists named parenthesized subexps\n\tfor i := 0; i < len(els); i++ {\n\t\t// convert i to string according returned (https://github.com/goss-org/goss/pull/895#issuecomment-2075716706)\n\t\telsMap[strconv.Itoa(i)] = els[i]\n\n\t\tif re.SubexpNames()[i] != \"\" {\n\t\t\telsMapNamed[re.SubexpNames()[i]] = els[i]\n\t\t}\n\t}\n\n\t// returns elsMapNamed if exists named parenthesized subexps\n\tif len(elsMapNamed) > 0 {\n\t\treturn elsMapNamed\n\t}\n\treturn elsMap\n}\n\nvar funcMap = template.FuncMap{\n\t\"mkSlice\":            mkSlice,\n\t\"readFile\":           readFile,\n\t\"getEnv\":             getEnv,\n\t\"regexMatch\":         regexMatch,\n\t\"toUpper\":            strings.ToUpper,\n\t\"toLower\":            strings.ToLower,\n\t\"findStringSubmatch\": findStringSubmatch,\n}\n"
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "validate.go",
          "type": "blob",
          "size": 4.4658203125,
          "content": "package goss\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/fatih/color\"\n\t\"github.com/onsi/gomega/format\"\n\n\t\"github.com/goss-org/goss/outputs\"\n\t\"github.com/goss-org/goss/resource\"\n\t\"github.com/goss-org/goss/system\"\n\t\"github.com/goss-org/goss/util\"\n)\n\nfunc getGossConfig(vars string, varsInline string, specFile string) (cfg *GossConfig, err error) {\n\t// handle stdin\n\tvar fh *os.File\n\tvar path, source string\n\tvar gossConfig GossConfig\n\n\tcurrentTemplateFilter, err = NewTemplateFilter(vars, varsInline)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif specFile == \"-\" {\n\t\tsource = \"STDIN\"\n\t\tfh = os.Stdin\n\t\tdata, err := io.ReadAll(fh)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\toutStoreFormat, err = getStoreFormatFromData(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tgossConfig, err = ReadJSONData(data, true)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t} else {\n\t\tsource = specFile\n\t\tpath = filepath.Dir(specFile)\n\t\toutStoreFormat, err = getStoreFormatFromFileName(specFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tgossConfig, err = ReadJSON(specFile)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tgossConfig, err = mergeJSONData(gossConfig, 0, path)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(gossConfig.Resources()) == 0 {\n\t\treturn nil, fmt.Errorf(\"found 0 tests, source: %v\", source)\n\t}\n\n\treturn &gossConfig, nil\n}\n\nfunc getOutputer(c *bool, format string) (outputs.Outputer, error) {\n\tif c != nil && *c {\n\t\tcolor.NoColor = true\n\t}\n\tif c != nil && !*c {\n\t\tcolor.NoColor = false\n\t}\n\n\treturn outputs.GetOutputer(format)\n}\n\n// ValidateResults performs validation and provides programmatic access to validation results\n// no retries or outputs are supported\nfunc ValidateResults(c *util.Config) (results <-chan []resource.TestResult, err error) {\n\tgossConfig, err := getGossConfig(c.Vars, c.VarsInline, c.Spec)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsys := system.New(c.PackageManager)\n\n\treturn validate(sys, *gossConfig, c.DisabledResourceTypes, c.MaxConcurrent), nil\n}\n\n// Validate performs validation, writes formatted output to stdout by default\n// and supports retries and more, this is the full featured Validate used\n// by the typical CLI invocation and will produce output to StdOut.  Use\n// ValidateResults for programmatic access\nfunc Validate(c *util.Config) (code int, err error) {\n\terr = setLogLevel(c)\n\tif err != nil {\n\t\treturn 1, err\n\t}\n\tgossConfig, err := getGossConfig(c.Vars, c.VarsInline, c.Spec)\n\tif err != nil {\n\t\treturn 78, err\n\t}\n\treturn ValidateConfig(c, gossConfig)\n}\n\nfunc ValidateConfig(c *util.Config, gossConfig *GossConfig) (code int, err error) {\n\t// Needed for contains-elements\n\t// Maybe we don't use this and use custom\n\t// contain_element_matcher is needed because it's single entry to avoid\n\t// transform message\n\tformat.UseStringerRepresentation = true\n\toutputConfig := util.OutputConfig{\n\t\tFormatOptions: c.FormatOptions,\n\t}\n\n\tsys := system.New(c.PackageManager)\n\toutputer, err := getOutputer(c.NoColor, c.OutputFormat)\n\tif err != nil {\n\t\treturn 1, err\n\t}\n\n\tvar ofh io.Writer\n\tofh = os.Stdout\n\tif c.OutputWriter != nil {\n\t\tofh = c.OutputWriter\n\t}\n\n\tsleep := c.Sleep\n\tretryTimeout := c.RetryTimeout\n\ti := 1\n\tstartTime := time.Now()\n\tfor {\n\t\tout := validate(sys, *gossConfig, c.DisabledResourceTypes, c.MaxConcurrent)\n\t\texitCode := outputer.Output(ofh, out, outputConfig)\n\t\tif retryTimeout == 0 || exitCode == 0 {\n\t\t\treturn exitCode, nil\n\t\t}\n\t\telapsed := time.Since(startTime)\n\t\tif elapsed+sleep > retryTimeout {\n\t\t\treturn 3, fmt.Errorf(\"timeout of %s reached before tests entered a passing state\", retryTimeout)\n\t\t}\n\t\tcolor.Red(\"Retrying in %s (elapsed/timeout time: %.3fs/%s)\\n\\n\\n\", sleep, elapsed.Seconds(), retryTimeout)\n\t\t// Reset cache\n\t\tsys = system.New(c.PackageManager)\n\t\ttime.Sleep(sleep)\n\t\ti++\n\t\tfmt.Printf(\"Attempt #%d:\\n\", i)\n\t}\n}\n\nfunc validate(sys *system.System, gossConfig GossConfig, skipList []string, maxConcurrent int) <-chan []resource.TestResult {\n\tout := make(chan []resource.TestResult)\n\tin := make(chan resource.Resource)\n\n\tgo func() {\n\t\tfor _, t := range gossConfig.Resources() {\n\t\t\tif util.IsValueInList(t.TypeName(), skipList) || util.IsValueInList(t.TypeKey(), skipList) {\n\t\t\t\tt.SetSkip()\n\t\t\t}\n\n\t\t\tin <- t\n\t\t}\n\t\tclose(in)\n\t}()\n\n\tworkerCount := runtime.NumCPU() * 5\n\tif workerCount > maxConcurrent {\n\t\tworkerCount = maxConcurrent\n\t}\n\tvar wg sync.WaitGroup\n\tfor i := 0; i < workerCount; i++ {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tfor f := range in {\n\t\t\t\tout <- f.Validate(sys)\n\t\t\t}\n\t\t}()\n\t}\n\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(out)\n\t}()\n\n\treturn out\n}\n"
        }
      ]
    }
  ]
}