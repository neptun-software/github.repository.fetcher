{
  "metadata": {
    "timestamp": 1736567773011,
    "page": 356,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "prometheus/client_golang",
      "stars": 5486,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bingo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.517578125,
          "content": "# Examples\nexamples/simple/simple\nexamples/random/random\nexamples/gocollector/gocollector\n\n# Typical backup/temporary files of editors\n*~\n*#\n\n# Never include any accidentally created vendor dirs.\n# This is a library!\nvendor/\n\n# The remainder of this file is taken from\n# https://github.com/github/gitignore/blob/main/Go.gitignore\n\n# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, built with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n.idea\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 2.1650390625,
          "content": "---\nrun:\n  timeout: 5m\n  skip-files:\n    # Skip autogenerated files.\n    - ^.*\\.(pb|y)\\.go$\n    - dagger/dagger.gen.go\n  skip-dirs:\n    - dagger/internal\n\n\noutput:\n  sort-results: true\n\nlinters:\n  enable:\n    - depguard\n    - durationcheck\n    - errorlint\n    - exportloopref\n    - gofmt\n    - gofumpt\n    - goimports\n    - gosimple\n    - ineffassign\n    - misspell\n    - nolintlint\n    - perfsprint\n    - predeclared\n    - revive\n    - staticcheck\n    - unconvert\n    - unused\n    - usestdlibvars\n    - wastedassign\n\nissues:\n  max-same-issues: 0\n  exclude-rules:\n    - path: _test.go\n      linters:\n        - errcheck\n        - govet\n        - structcheck\n\nlinters-settings:\n  depguard:\n    rules:\n      main:\n        deny:\n        #- pkg: \"sync/atomic\"\n        #  desc: \"Use go.uber.org/atomic instead of sync/atomic\"\n        - pkg: \"github.com/stretchr/testify/assert\"\n          desc: \"Use github.com/stretchr/testify/require instead of github.com/stretchr/testify/assert\"\n        - pkg: \"github.com/go-kit/kit/log\"\n          desc: \"Use github.com/go-kit/log instead of github.com/go-kit/kit/log\"\n        - pkg: \"io/ioutil\"\n          desc: \"Use corresponding 'os' or 'io' functions instead.\"\n        #- pkg: \"regexp\"\n        #  desc: \"Use github.com/grafana/regexp instead of regexp\"\n  errcheck:\n    exclude-functions:\n      # The following 2 methods always return nil as the error\n      - (*github.com/cespare/xxhash/v2.Digest).Write\n      - (*github.com/cespare/xxhash/v2.Digest).WriteString\n      - (*bufio.Writer).WriteRune\n  goimports:\n    local-prefixes: github.com/prometheus/client_golang\n  gofumpt:\n    extra-rules: true\n  perfsprint:\n    # Optimizes even if it requires an int or uint type cast.\n    int-conversion: true\n    # Optimizes into `err.Error()` even if it is only equivalent for non-nil errors.\n    err-error: true\n    # Optimizes `fmt.Errorf`.\n    errorf: true\n    # Optimizes `fmt.Sprintf` with only one argument.\n    sprintf1: true\n    # Optimizes into strings concatenation.\n    strconcat: true\n  revive:\n    rules:\n      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unused-parameter\n      - name: unused-parameter\n        severity: warning\n        disabled: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 24.9638671875,
          "content": "## Unreleased\n\n## 1.20.5 / 2024-10-15\n\n* [BUGFIX] testutil: Reverted #1424; functions using compareMetricFamilies are (again) only failing if filtered metricNames are in the expected input.\n\n## 1.20.4 / 2024-09-07\n\n* [BUGFIX] histograms: Fix possible data race when appending exemplars vs metrics gather. #1623\n\n## 1.20.3 / 2024-09-05\n\n* [BUGFIX] histograms: Fix possible data race when appending exemplars. #1608\n\n## 1.20.2 / 2024-08-23\n\n* [BUGFIX] promhttp: Unset Content-Encoding header when data is uncompressed. #1596\n\n## 1.20.1 / 2024-08-20\n\n* [BUGFIX] process-collector: Fixed unregistered descriptor error when using process collector with `PedanticRegistry` on linux machines. #1587\n\n## 1.20.0 / 2024-08-14\n\n* [CHANGE] :warning: go-collector: Remove `go_memstat_lookups_total` metric which was always 0; Go runtime stopped sharing pointer lookup statistics. #1577\n* [FEATURE] :warning: go-collector: Add 3 default metrics: `go_gc_gogc_percent`, `go_gc_gomemlimit_bytes` and `go_sched_gomaxprocs_threads` as those are recommended by the Go team. #1559\n* [FEATURE] go-collector: Add more information to all metrics' HELP e.g. the exact `runtime/metrics` sourcing each metric (if relevant). #1568 #1578\n* [FEATURE] testutil: Add CollectAndFormat method. #1503\n* [FEATURE] histograms: Add support for exemplars in native histograms. #1471\n* [FEATURE] promhttp: Add experimental support for `zstd` on scrape, controlled by the request `Accept-Encoding` header. #1496\n* [FEATURE] api/v1: Add `WithLimit` parameter to all API methods that supports it. #1544\n* [FEATURE] prometheus: Add support for created timestamps in constant histograms and constant summaries. #1537\n* [FEATURE] process-collector: Add network usage metrics: `process_network_receive_bytes_total` and `process_network_transmit_bytes_total`. #1555\n* [FEATURE] promlint: Add duplicated metric lint rule. #1472\n* [BUGFIX] promlint: Relax metric type in name linter rule. #1455\n* [BUGFIX] promhttp: Make sure server instrumentation wrapping supports new and future extra responseWriter methods. #1480\n* [BUGFIX] **breaking** testutil: Functions using compareMetricFamilies are now failing if filtered metricNames are not in the input. #1424 (reverted in 1.20.5)\n\n## 1.19.0 / 2024-02-27\n\nThe module `prometheus/common v0.48.0` introduced an incompatibility when used together with client_golang (See https://github.com/prometheus/client_golang/pull/1448 for more details). If your project uses client_golang and you want to use `prometheus/common v0.48.0` or higher, please update client_golang to v1.19.0.\n\n* [CHANGE] Minimum required go version is now 1.20 (we also test client_golang against new 1.22 version). #1445 #1449\n* [FEATURE] collectors: Add version collector. #1422 #1427\n\n## 1.18.0 / 2023-12-22\n\n* [FEATURE] promlint: Allow creation of custom metric validations. #1311\n* [FEATURE] Go programs using client_golang can be built in wasip1 OS. #1350\n* [BUGFIX] histograms: Add timer to reset ASAP after bucket limiting has happened. #1367\n* [BUGFIX] testutil: Fix comparison of metrics with empty Help strings. #1378\n* [ENHANCEMENT] Improved performance of `MetricVec.WithLabelValues(...)`. #1360\n\n## 1.17.0 / 2023-09-27\n\n* [CHANGE] Minimum required go version is now 1.19 (we also test client_golang against new 1.21 version). #1325\n* [FEATURE] Add support for Created Timestamps in Counters, Summaries and Historams. #1313\n* [ENHANCEMENT] Enable detection of a native histogram without observations. #1314\n\n## 1.16.0 / 2023-06-15\n\n* [BUGFIX] api: Switch to POST for LabelNames, Series, and QueryExemplars. #1252\n* [BUGFIX] api: Fix undefined execution order in return statements. #1260\n* [BUGFIX] native histograms: Fix bug in bucket key calculation. #1279\n* [ENHANCEMENT] Reduce constrainLabels allocations for all metrics. #1272\n* [ENHANCEMENT] promhttp: Add process start time header for scrape efficiency. #1278\n* [ENHANCEMENT] promlint: Improve metricUnits runtime. #1286\n\n## 1.15.1 / 2023-05-3\n\n* [BUGFIX] Fixed promhttp.Instrument* handlers wrongly trying to attach exemplar to unsupported metrics (e.g. summary), \\\ncausing panics. #1253\n\n## 1.15.0 / 2023-04-13\n\n* [BUGFIX] Fix issue with atomic variables on ppc64le. #1171\n* [BUGFIX] Support for multiple samples within same metric. #1181\n* [BUGFIX] Bump golang.org/x/text to v0.3.8 to mitigate CVE-2022-32149. #1187\n* [ENHANCEMENT] Add exemplars and middleware examples. #1173\n* [ENHANCEMENT] Add more context to \"duplicate label names\" error to enable debugging. #1177\n* [ENHANCEMENT] Add constrained labels and constrained variant for all MetricVecs. #1151\n* [ENHANCEMENT] Moved away from deprecated github.com/golang/protobuf package. #1183\n* [ENHANCEMENT] Add possibility to dynamically get label values for http instrumentation. #1066\n* [ENHANCEMENT] Add ability to Pusher to add custom headers. #1218\n* [ENHANCEMENT] api: Extend and improve efficiency of json-iterator usage. #1225\n* [ENHANCEMENT] Added (official) support for go 1.20. #1234\n* [ENHANCEMENT] timer: Added support for exemplars. #1233\n* [ENHANCEMENT] Filter expected metrics as well in CollectAndCompare. #1143\n* [ENHANCEMENT] :warning: Only set start/end if time is not Zero. This breaks compatibility in experimental api package. If you strictly depend on empty time.Time as actual value, the behavior is now changed. #1238\n\n## 1.14.0 / 2022-11-08\n\n* [FEATURE] Add Support for Native Histograms. #1150\n* [CHANGE] Extend `prometheus.Registry` to implement `prometheus.Collector` interface. #1103\n\n## 1.13.1 / 2022-11-01\n\n* [BUGFIX] Fix race condition with Exemplar in Counter. #1146\n* [BUGFIX] Fix `CumulativeCount` value of `+Inf` bucket created from exemplar. #1148\n* [BUGFIX] Fix double-counting bug in `promhttp.InstrumentRoundTripperCounter`. #1118\n\n## 1.13.0 / 2022-08-05\n\n* [CHANGE] Minimum required Go version is now 1.17 (we also test client_golang against new 1.19 version).\n* [ENHANCEMENT] Added `prometheus.TransactionalGatherer` interface for `promhttp.Handler` use which allows using low allocation update techniques for custom collectors. #989\n* [ENHANCEMENT] Added exemplar support to `prometheus.NewConstHistogram`. See [`ExampleNewConstHistogram_WithExemplar`](prometheus/examples_test.go#L602) example on how to use it. #986\n* [ENHANCEMENT] `prometheus/push.Pusher` has now context aware methods that pass context to HTTP request. #1028\n* [ENHANCEMENT] `prometheus/push.Pusher` has now `Error` method that retrieve last error. #1075\n* [ENHANCEMENT] `testutil.GatherAndCompare` provides now readable diff on failed comparisons. #998\n* [ENHANCEMENT] Query API now supports timeouts. #1014\n* [ENHANCEMENT] New `MetricVec` method `DeletePartialMatch(labels Labels)` for deleting all metrics that match provided labels. #1013\n* [ENHANCEMENT] `api.Config` now accepts passing custom `*http.Client`. #1025\n* [BUGFIX] Raise exemplar labels limit from 64 to 128 bytes as specified in OpenMetrics spec. #1091\n* [BUGFIX] Allow adding exemplar to +Inf bucket to const histograms. #1094\n* [ENHANCEMENT] Most `promhttp.Instrument*` middlewares now supports adding exemplars to metrics. This allows hooking those to your tracing middleware that retrieves trace ID and put it in exemplar if present. #1055\n* [ENHANCEMENT] Added `testutil.ScrapeAndCompare` method. #1043\n* [BUGFIX] Fixed `GopherJS` build support. #897\n* [ENHANCEMENT] :warning: Added way to specify what `runtime/metrics`  `collectors.NewGoCollector` should use. See [`ExampleGoCollector_WithAdvancedGoMetrics`](prometheus/collectors/go_collector_latest_test.go#L263). #1102\n\n## 1.12.2 / 2022-05-13\n\n* [CHANGE] Added `collectors.WithGoCollections` that allows to choose what collection of Go runtime metrics user wants: Equivalent of [`MemStats` structure](https://pkg.go.dev/runtime#MemStats) configured using `GoRuntimeMemStatsCollection`, new based on dedicated [runtime/metrics](https://pkg.go.dev/runtime/metrics) metrics represented by `GoRuntimeMetricsCollection` option, or both by specifying `GoRuntimeMemStatsCollection | GoRuntimeMetricsCollection` flag. #1031\n* [CHANGE] :warning: Change in `collectors.NewGoCollector` metrics: Reverting addition of new ~80 runtime metrics by default. You can enable this back with `GoRuntimeMetricsCollection` option or `GoRuntimeMemStatsCollection | GoRuntimeMetricsCollection` for smooth transition.\n* [BUGFIX] Fixed the bug that causes generated histogram metric names to end with `_total`. ⚠️ This changes 3 metric names in the new Go collector that was reverted from default in this release.\n  * `go_gc_heap_allocs_by_size_bytes_total` -> `go_gc_heap_allocs_by_size_bytes`,\n  * `go_gc_heap_frees_by_size_bytes_total` -> `go_gc_heap_allocs_by_size_bytes`\n  * `go_gc_pauses_seconds_total` -> `go_gc_pauses_seconds`.\n* [CHANCE] Removed `-Inf` buckets from new Go Collector histograms.\n\n## 1.12.1 / 2022-01-29\n\n* [BUGFIX] Make the Go 1.17 collector concurrency-safe #969\n  * Use simpler locking in the Go 1.17 collector #975\n* [BUGFIX] Reduce granularity of histogram buckets for Go 1.17 collector #974\n* [ENHANCEMENT] API client: make HTTP reads more efficient #976\n\n## 1.12.0 / 2022-01-19\n\n* [CHANGE] example/random: Move flags and metrics into main() #935\n* [FEATURE] API client: Support wal replay status api #944\n* [FEATURE] Use the runtime/metrics package for the Go collector for 1.17+ #955\n* [ENHANCEMENT] API client: Update /api/v1/status/tsdb to include headStats #925\n* [ENHANCEMENT] promhttp: Check validity of method and code label values #962\n\n## 1.11.0 / 2021-06-07\n\n* [CHANGE] Add new collectors package. #862\n* [CHANGE] `prometheus.NewExpvarCollector` is deprecated, use `collectors.NewExpvarCollector` instead. #862\n* [CHANGE] `prometheus.NewGoCollector` is deprecated, use `collectors.NewGoCollector` instead. #862\n* [CHANGE] `prometheus.NewBuildInfoCollector` is deprecated, use `collectors.NewBuildInfoCollector` instead. #862\n* [FEATURE] Add new collector for database/sql#DBStats. #866\n* [FEATURE] API client: Add exemplars API support. #861\n* [ENHANCEMENT] API client: Add newer fields to Rules API. #855\n* [ENHANCEMENT] API client: Add missing fields to Targets API. #856\n\n## 1.10.0 / 2021-03-18\n\n* [CHANGE] Minimum required Go version is now 1.13.\n* [CHANGE] API client: Add matchers to `LabelNames` and `LabesValues`. #828\n* [FEATURE] API client: Add buildinfo call. #841\n* [BUGFIX] Fix build on riscv64. #833\n\n## 1.9.0 / 2020-12-17\n\n* [FEATURE] `NewPidFileFn` helper to create process collectors for processes whose PID is read from a file. #804\n* [BUGFIX] promhttp: Prevent endless loop in `InstrumentHandler...` middlewares with invalid metric or label names. #823\n\n## 1.8.0 / 2020-10-15\n\n* [CHANGE] API client: Use `time.Time` rather than `string` for timestamps in `RuntimeinfoResult`. #777\n* [FEATURE] Export `MetricVec` to facilitate implementation of vectors of custom `Metric` types. #803\n* [FEATURE] API client: Support `/status/tsdb` endpoint. #773\n* [ENHANCEMENT] API client: Enable GET fallback on status code 501. #802\n* [ENHANCEMENT] Remove `Metric` references after reslicing to free up more memory. #784\n\n## 1.7.1 / 2020-06-23\n\n* [BUGFIX] API client: Actually propagate start/end parameters of `LabelNames` and `LabelValues`. #771\n\n## 1.7.0 / 2020-06-17\n\n* [CHANGE] API client: Add start/end parameters to `LabelNames` and `LabelValues`. #767\n* [FEATURE] testutil: Add `GatherAndCount` and enable filtering in `CollectAndCount` #753\n* [FEATURE] API client: Add support for `status` and `runtimeinfo` endpoints. #755\n* [ENHANCEMENT] Wrapping `nil` with a `WrapRegistererWith...` function creates a no-op `Registerer`.  #764\n* [ENHANCEMENT] promlint: Allow Kelvin as a base unit for cases like color temperature. #761\n* [BUGFIX] push: Properly handle empty job and label values. #752\n\n## 1.6.0 / 2020-04-28\n\n* [FEATURE] testutil: Add lint checks for metrics, including a sub-package `promlint` to expose the linter engine for external usage. #739 #743\n* [ENHANCEMENT] API client: Improve error messages. #731\n* [BUGFIX] process collector: Fix `process_resident_memory_bytes` on 32bit MS Windows. #734\n\n## 1.5.1 / 2020-03-14\n\n* [BUGFIX] promhttp: Remove another superfluous `WriteHeader` call. #726\n\n## 1.5.0 / 2020-03-03\n\n* [FEATURE] promauto: Add a factory to allow automatic registration with a local registry. #713\n* [FEATURE] promauto: Add `NewUntypedFunc`. #713\n* [FEATURE] API client: Support new metadata endpoint. #718\n\n## 1.4.1 / 2020-02-07\n\n* [BUGFIX] Fix timestamp of exemplars in `CounterVec`. #710\n\n## 1.4.0 / 2020-01-27\n\n* [CHANGE] Go collector: Improve doc string for `go_gc_duration_seconds`. #702\n* [FEATURE] Support a subset of OpenMetrics, including exemplars. Needs opt-in via `promhttp.HandlerOpts`. **EXPERIMENTAL** #706\n* [FEATURE] Add `testutil.CollectAndCount`. #703\n\n## 1.3.0 / 2019-12-21\n\n* [FEATURE] Support tags in Graphite bridge. #668\n* [BUGFIX] API client: Actually return Prometheus warnings. #699\n\n## 1.2.1 / 2019-10-17\n\n* [BUGFIX] Fix regression in the implementation of `Registerer.Unregister`. #663\n\n## 1.2.0 / 2019-10-15\n\n* [FEATURE] Support pushing to Pushgateway v0.10+. #652\n* [ENHANCEMENT] Improve hashing to make a spurious `AlreadyRegisteredError` less likely to occur. #657\n* [ENHANCEMENT] API client: Add godoc examples. #630\n* [BUGFIX] promhttp: Correctly call WriteHeader in HTTP middleware. #634\n\n## 1.1.0 / 2019-08-01\n\n* [CHANGE] API client: Format time as UTC rather than RFC3339Nano. #617\n* [CHANGE] API client: Add warnings to `LabelValues` and `LabelNames` calls. #609\n* [FEATURE] Push: Support base64 encoding in grouping key. #624\n* [FEATURE] Push: Add Delete method to Pusher. #613\n\n## 1.0.0 / 2019-06-15\n\n_This release removes all previously deprecated features, resulting in the breaking changes listed below. As this is v1.0.0, semantic versioning applies from now on, with the exception of the API client and parts marked explicitly as experimental._\n\n* [CHANGE] Remove objectives from the default `Summary`. (Objectives have to be set explicitly in the `SummaryOpts`.) #600\n* [CHANGE] Remove all HTTP related feature in the `prometheus` package. (Use the `promhttp` package instead.)  #600\n* [CHANGE] Remove `push.FromGatherer`, `push.AddFromGatherer`, `push.Collectors`. (Use `push.New` instead.) #600\n* [CHANGE] API client: Pass warnings through on non-error responses. #599\n* [CHANGE] API client: Add warnings to `Series` call. #603\n* [FEATURE] Make process collector work on Microsoft Windows. **EXPERIMENTAL** #596\n* [FEATURE] API client: Add `/labels` call. #604\n* [BUGFIX] Make `AlreadyRegisteredError` usable for wrapped registries. #607\n\n## 0.9.4 / 2019-06-07\n\n* [CHANGE] API client: Switch to alert values as strings. #585\n* [FEATURE] Add a collector for Go module build information. #595\n* [FEATURE] promhttp: Add an counter for internal errors during HTTP exposition. #594\n* [FEATURE] API client: Support target metadata API. #590\n* [FEATURE] API client: Support storage warnings. #562\n* [ENHANCEMENT] API client: Improve performance handling JSON. #570\n* [BUGFIX] Reduce test flakiness. #573\n\n## 0.9.3 / 2019-05-16\n\n* [CHANGE] Required Go version is now 1.9+. #561\n* [FEATURE] API client: Add POST with get fallback for Query/QueryRange. #557\n* [FEATURE] API client: Add alerts endpoint. #552\n* [FEATURE] API client: Add rules endpoint. #508\n* [FEATURE] push: Add option to pick metrics format. #540\n* [ENHANCEMENT] Limit time the Go collector may take to collect memstats,\n  returning results from the previous collection in case of a timeout. #568\n* [ENHANCEMENT] Pusher now requires only a thin interface instead of a full\n  `http.Client`, facilitating mocking and custom HTTP client implementation.\n  #559\n* [ENHANCEMENT] Memory usage improvement for histograms and summaries without\n  objectives. #536\n* [ENHANCEMENT] Summaries without objectives are now lock-free. #521\n* [BUGFIX] promhttp: `InstrumentRoundTripperTrace` now takes into account a pre-set context. #582\n* [BUGFIX] `TestCounterAddLarge` now works on all platforms. #567\n* [BUGFIX] Fix `promhttp` examples. #535 #544\n* [BUGFIX] API client: Wait for done before writing to shared response\n  body. #532\n* [BUGFIX] API client: Deal with discovered labels properly. #529\n\n## 0.9.2 / 2018-12-06\n\n* [FEATURE] Support for Go modules. #501\n* [FEATURE] `Timer.ObserveDuration` returns observed duration. #509\n* [ENHANCEMENT] Improved doc comments and error messages. #504\n* [BUGFIX] Fix race condition during metrics gathering. #512\n* [BUGFIX] Fix testutil metric comparison for Histograms and empty labels. #494\n  #498\n\n## 0.9.1 / 2018-11-03\n\n* [FEATURE] Add `WriteToTextfile` function to facilitate the creation of\n  *.prom files for the textfile collector of the node exporter. #489\n* [ENHANCEMENT] More descriptive error messages for inconsistent label\n  cardinality. #487\n* [ENHANCEMENT] Exposition: Use a GZIP encoder pool to avoid allocations in\n  high-frequency scrape scenarios. #366\n* [ENHANCEMENT] Exposition: Streaming serving of metrics data while encoding.\n  #482\n* [ENHANCEMENT] API client: Add a way to return the body of a 5xx response.\n  #479\n\n## 0.9.0 / 2018-10-15\n\n* [CHANGE] Go1.6 is no longer supported.\n* [CHANGE] More refinements of the `Registry` consistency checks: Duplicated\n  labels are now detected, but inconsistent label dimensions are now allowed.\n  Collisions with the “magic” metric and label names in Summaries and\n  Histograms are detected now. #108 #417 #471\n* [CHANGE] Changed `ProcessCollector` constructor. #219\n* [CHANGE] Changed Go counter `go_memstats_heap_released_bytes_total` to gauge\n  `go_memstats_heap_released_bytes`. #229\n* [CHANGE] Unexported `LabelPairSorter`. #453\n* [CHANGE] Removed the `Untyped` metric from direct instrumentation. #340\n* [CHANGE] Unexported `MetricVec`. #319\n* [CHANGE] Removed deprecated `Set` method from `Counter` #247\n* [CHANGE] Removed deprecated `RegisterOrGet` and `MustRegisterOrGet`. #247\n* [CHANGE] API client: Introduced versioned packages.\n* [FEATURE] A `Registerer` can be wrapped with prefixes and labels. #357\n* [FEATURE] “Describe by collect” helper function. #239\n* [FEATURE] Added package `testutil`. #58\n* [FEATURE] Timestamp can be explicitly set for const metrics. #187\n* [FEATURE] “Unchecked” collectors are possible now without cheating. #47\n* [FEATURE] Pushing to the Pushgateway reworked in package `push` to support\n  many new features. (The old functions are still usable but deprecated.) #372\n  #341\n* [FEATURE] Configurable connection limit for scrapes. #179\n* [FEATURE] New HTTP middlewares to instrument `http.Handler` and\n  `http.RoundTripper`. The old middlewares and the pre-instrumented `/metrics`\n  handler are (strongly) deprecated. #316 #57 #101 #224\n* [FEATURE] “Currying” for metric vectors. #320\n* [FEATURE] A `Summary` can be created without quantiles. #118\n* [FEATURE] Added a `Timer` helper type. #231\n* [FEATURE] Added a Graphite bridge. #197\n* [FEATURE] Help strings are now optional. #460\n* [FEATURE] Added `process_virtual_memory_max_bytes` metric. #438 #440\n* [FEATURE] Added `go_gc_cpu_fraction` and `go_threads` metrics. #281 #277\n* [FEATURE] Added `promauto` package with auto-registering metrics. #385 #393\n* [FEATURE] Add `SetToCurrentTime` method to `Gauge`. #259\n* [FEATURE] API client: Add AlertManager, Status, and Target methods. #402\n* [FEATURE] API client: Add admin methods. #398\n* [FEATURE] API client: Support series API. #361\n* [FEATURE] API client: Support querying label values.\n* [ENHANCEMENT] Smarter creation of goroutines during scraping. Solves memory\n  usage spikes in certain situations. #369\n* [ENHANCEMENT] Counters are now faster if dealing with integers only. #367\n* [ENHANCEMENT] Improved label validation. #274 #335\n* [BUGFIX] Creating a const metric with an invalid `Desc` returns an error. #460\n* [BUGFIX] Histogram observations don't race any longer with exposition. #275\n* [BUGFIX] Fixed goroutine leaks. #236 #472\n* [BUGFIX] Fixed an error message for exponential histogram buckets. #467\n* [BUGFIX] Fixed data race writing to the metric map. #401\n* [BUGFIX] API client: Decode JSON on a 4xx response but do not on 204\n  responses. #476 #414\n\n## 0.8.0 / 2016-08-17\n\n* [CHANGE] Registry is doing more consistency checks. This might break\n  existing setups that used to export inconsistent metrics.\n* [CHANGE] Pushing to Pushgateway moved to package `push` and changed to allow\n  arbitrary grouping.\n* [CHANGE] Removed `SelfCollector`.\n* [CHANGE] Removed `PanicOnCollectError` and `EnableCollectChecks` methods.\n* [CHANGE] Moved packages to the prometheus/common repo: `text`, `model`,\n  `extraction`.\n* [CHANGE] Deprecated a number of functions.\n* [FEATURE] Allow custom registries. Added `Registerer` and `Gatherer`\n  interfaces.\n* [FEATURE] Separated HTTP exposition, allowing custom HTTP handlers (package\n  `promhttp`) and enabling the creation of other exposition mechanisms.\n* [FEATURE] `MustRegister` is variadic now, allowing registration of many\n  collectors in one call.\n* [FEATURE] Added HTTP API v1 package.\n* [ENHANCEMENT] Numerous documentation improvements.\n* [ENHANCEMENT] Improved metric sorting.\n* [ENHANCEMENT] Inlined fnv64a hashing for improved performance.\n* [ENHANCEMENT] Several test improvements.\n* [BUGFIX] Handle collisions in MetricVec.\n\n## 0.7.0 / 2015-07-27\n\n* [CHANGE] Rename ExporterLabelPrefix to ExportedLabelPrefix.\n* [BUGFIX] Closed gaps in metric consistency check.\n* [BUGFIX] Validate LabelName/LabelSet on JSON unmarshaling.\n* [ENHANCEMENT] Document the possibility to create \"empty\" metrics in\n  a metric vector.\n* [ENHANCEMENT] Fix and clarify various doc comments and the README.md.\n* [ENHANCEMENT] (Kind of) solve \"The Proxy Problem\" of http.InstrumentHandler.\n* [ENHANCEMENT] Change responseWriterDelegator.written to int64.\n\n## 0.6.0 / 2015-06-01\n\n* [CHANGE] Rename process_goroutines to go_goroutines.\n* [ENHANCEMENT] Validate label names during YAML decoding.\n* [ENHANCEMENT] Add LabelName regular expression.\n* [BUGFIX] Ensure alignment of struct members for 32-bit systems.\n\n## 0.5.0 / 2015-05-06\n\n* [BUGFIX] Removed a weakness in the fingerprinting aka signature code.\n  This makes fingerprinting slower and more allocation-heavy, but the\n  weakness was too severe to be tolerated.\n* [CHANGE] As a result of the above, Metric.Fingerprint is now returning\n  a different fingerprint. To keep the same fingerprint, the new method\n  Metric.FastFingerprint was introduced, which will be used by the\n  Prometheus server for storage purposes (implying that a collision\n  detection has to be added, too).\n* [ENHANCEMENT] The Metric.Equal and Metric.Before do not depend on\n  fingerprinting anymore, removing the possibility of an undetected\n  fingerprint collision.\n* [FEATURE] The Go collector in the exposition library includes garbage\n  collection stats.\n* [FEATURE] The exposition library allows to create constant \"throw-away\"\n  summaries and histograms.\n* [CHANGE] A number of new reserved labels and prefixes.\n\n## 0.4.0 / 2015-04-08\n\n* [CHANGE] Return NaN when Summaries have no observations yet.\n* [BUGFIX] Properly handle Summary decay upon Write().\n* [BUGFIX] Fix the documentation link to the consumption library.\n* [FEATURE] Allow the metric family injection hook to merge with existing\n  metric families.\n* [ENHANCEMENT] Removed cgo dependency and conditional compilation of procfs.\n* [MAINTENANCE] Adjusted to changes in matttproud/golang_protobuf_extensions.\n\n## 0.3.2 / 2015-03-11\n\n* [BUGFIX] Fixed the receiver type of COWMetric.Set(). This method is\n  only used by the Prometheus server internally.\n* [CLEANUP] Added licenses of vendored code left out by godep.\n\n## 0.3.1 / 2015-03-04\n\n* [ENHANCEMENT] Switched fingerprinting functions from own free list to\n  sync.Pool.\n* [CHANGE] Makefile uses Go 1.4.2 now (only relevant for examples and tests).\n\n## 0.3.0 / 2015-03-03\n\n* [CHANGE] Changed the fingerprinting for metrics. THIS WILL INVALIDATE ALL\n  PERSISTED FINGERPRINTS. IF YOU COMPILE THE PROMETHEUS SERVER WITH THIS\n  VERSION, YOU HAVE TO WIPE THE PREVIOUSLY CREATED STORAGE.\n* [CHANGE] LabelValuesToSignature removed. (Nobody had used it, and it was\n  arguably broken.)\n* [CHANGE] Vendored dependencies. Those are only used by the Makefile. If\n  client_golang is used as a library, the vendoring will stay out of your way.\n* [BUGFIX] Remove a weakness in the fingerprinting for metrics. (This made\n  the fingerprinting change above necessary.)\n* [FEATURE] Added new fingerprinting functions SignatureForLabels and\n  SignatureWithoutLabels to be used by the Prometheus server. These functions\n  require fewer allocations than the ones currently used by the server.\n\n## 0.2.0 / 2015-02-23\n\n* [FEATURE] Introduce new Histagram metric type.\n* [CHANGE] Ignore process collector errors for now (better error handling\n  pending).\n* [CHANGE] Use clear error interface for process pidFn.\n* [BUGFIX] Fix Go download links for several archs and OSes.\n* [ENHANCEMENT] Massively improve Gauge and Counter performance.\n* [ENHANCEMENT] Catch illegal label names for summaries in histograms.\n* [ENHANCEMENT] Reduce allocations during fingerprinting.\n* [ENHANCEMENT] Remove cgo dependency. procfs package will only be included if\n  both cgo is available and the build is for an OS with procfs.\n* [CLEANUP] Clean up code style issues.\n* [CLEANUP] Mark slow test as such and exclude them from travis.\n* [CLEANUP] Update protobuf library package name.\n* [CLEANUP] Updated vendoring of beorn7/perks.\n\n## 0.1.0 / 2015-02-02\n\n* [CLEANUP] Introduced semantic versioning and changelog. From now on,\n  changes will be reported in this file.\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 0.1484375,
          "content": "# Prometheus Community Code of Conduct\n\nPrometheus follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.0478515625,
          "content": "# Contributing\n\nThank you for contributing to our project! Here are the steps and guidelines to follow when creating a pull request (PR).\n\nPrometheus uses GitHub to manage reviews of pull requests.\n\n* If you have a trivial fix or improvement, go ahead and create a pull request,\n  addressing (with `@...`) the maintainer of this repository (see\n  [MAINTAINERS.md](MAINTAINERS.md)) in the description of the pull request.\n\n* If you plan to do something more involved, first discuss your ideas\n  on our [mailing list](https://groups.google.com/forum/?fromgroups#!forum/prometheus-developers).\n  This will avoid unnecessary work and surely give you and us a good deal\n  of inspiration.\n\n* Relevant coding style guidelines are the [Go Code Review\n  Comments](https://code.google.com/p/go-wiki/wiki/CodeReviewComments)\n  and the _Formatting and style_ section of Peter Bourgon's [Go: Best\n  Practices for Production\n  Environments](http://peter.bourgon.org/go-in-production/#formatting-and-style).\n\n* Be sure to sign off on the [DCO](https://github.com/probot/dco#how-it-works)\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.3818359375,
          "content": "# This Dockerfile builds an image for a client_golang example.\n#\n# Use as (from the root for the client_golang repository):\n#    docker build -f Dockerfile -t prometheus/golang-example .\n\n# Run as\n#    docker run -P prometheus/golang-example /random\n# or\n#    docker run -P prometheus/golang-example /simple\n\n# Test as\n#    curl $ip:$port/metrics\n\n# Builder image, where we build the example.\nFROM golang:1 AS builder\nWORKDIR /go/src/github.com/prometheus/client_golang\nCOPY . .\nWORKDIR /go/src/github.com/prometheus/client_golang/prometheus\nRUN go get -d\nWORKDIR /go/src/github.com/prometheus/client_golang/examples/random\nRUN CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w'\nWORKDIR /go/src/github.com/prometheus/client_golang/examples/simple\nRUN CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w'\nWORKDIR /go/src/github.com/prometheus/client_golang/examples/gocollector\nRUN CGO_ENABLED=0 GOOS=linux go build -a -tags netgo -ldflags '-w'\n\n# Final image.\nFROM quay.io/prometheus/busybox:latest\nLABEL maintainer=\"The Prometheus Authors <prometheus-developers@googlegroups.com>\"\nCOPY --from=builder /go/src/github.com/prometheus/client_golang/examples/random \\\n    /go/src/github.com/prometheus/client_golang/examples/simple \\\n    /go/src/github.com/prometheus/client_golang/examples/gocollector ./\nEXPOSE 8080\nCMD [\"echo\", \"Please run an example. Either /random, /simple or /gocollector\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "MAINTAINERS.md",
          "type": "blob",
          "size": 0.2060546875,
          "content": "* Arianna Vespri <arianna.vespri@proton.me> @vesari\n* Arthur Silva Sens <arthursens2005@gmail.com> @ArthurSens\n* Bartłomiej Płotka <bwplotka@gmail.com> @bwplotka\n* Kemal Akkoyun <kakkoyun@gmail.com> @kakkoyun\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.67578125,
          "content": "# Copyright 2018 The Prometheus Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\ninclude .bingo/Variables.mk\ninclude Makefile.common\n\n.PHONY: test\ntest: deps common-test\n\n.PHONY: test-short\ntest-short: deps common-test-short\n\n# Overriding Makefile.common check_license target to add\n# dagger paths\n.PHONY: common-check_license\ncommon-check_license:\n\t@echo \">> checking license header\"\n\t@licRes=$$(for file in $$(find . -type f -iname '*.go' ! -path './vendor/*' ! -path './dagger/internal/*') ; do \\\n               awk 'NR<=3' $$file | grep -Eq \"(Copyright|generated|GENERATED)\" || echo $$file; \\\n       done); \\\n       if [ -n \"$${licRes}\" ]; then \\\n               echo \"license header checking failed:\"; echo \"$${licRes}\"; \\\n               exit 1; \\\n       fi\n\n.PHONY: generate-go-collector-test-files\nfile := supported_go_versions.txt\nVERSIONS := $(shell cat ${file})\ngenerate-go-collector-test-files:\n\tfor GO_VERSION in $(VERSIONS); do \\\n\t\tdocker run \\\n\t\t\t--platform linux/amd64 \\\n\t\t\t--rm -v $(PWD):/workspace \\\n\t\t\t-w /workspace \\\n\t\t\tgolang:$$GO_VERSION \\\n\t\t\tbash ./generate-go-collector.bash; \\\n\tdone; \\\n\tgo mod tidy\n\n.PHONY: fmt\nfmt: common-format\n\t$(GOIMPORTS) -local github.com/prometheus/client_golang -w .\n"
        },
        {
          "name": "Makefile.common",
          "type": "blob",
          "size": 9.1123046875,
          "content": "# Copyright 2018 The Prometheus Authors\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\n# A common Makefile that includes rules to be reused in different prometheus projects.\n# !!! Open PRs only against the prometheus/prometheus/Makefile.common repository!\n\n# Example usage :\n# Create the main Makefile in the root project directory.\n# include Makefile.common\n# customTarget:\n# \t@echo \">> Running customTarget\"\n#\n\n# Ensure GOBIN is not set during build so that promu is installed to the correct path\nunexport GOBIN\n\nGO           ?= go\nGOFMT        ?= $(GO)fmt\nFIRST_GOPATH := $(firstword $(subst :, ,$(shell $(GO) env GOPATH)))\nGOOPTS       ?=\nGOHOSTOS     ?= $(shell $(GO) env GOHOSTOS)\nGOHOSTARCH   ?= $(shell $(GO) env GOHOSTARCH)\n\nGO_VERSION        ?= $(shell $(GO) version)\nGO_VERSION_NUMBER ?= $(word 3, $(GO_VERSION))\nPRE_GO_111        ?= $(shell echo $(GO_VERSION_NUMBER) | grep -E 'go1\\.(10|[0-9])\\.')\n\nPROMU        := $(FIRST_GOPATH)/bin/promu\npkgs          = ./...\n\nifeq (arm, $(GOHOSTARCH))\n\tGOHOSTARM ?= $(shell GOARM= $(GO) env GOARM)\n\tGO_BUILD_PLATFORM ?= $(GOHOSTOS)-$(GOHOSTARCH)v$(GOHOSTARM)\nelse\n\tGO_BUILD_PLATFORM ?= $(GOHOSTOS)-$(GOHOSTARCH)\nendif\n\nGOTEST := $(GO) test\nGOTEST_DIR :=\nifneq ($(CIRCLE_JOB),)\nifneq ($(shell command -v gotestsum 2> /dev/null),)\n\tGOTEST_DIR := test-results\n\tGOTEST := gotestsum --junitfile $(GOTEST_DIR)/unit-tests.xml --\nendif\nendif\n\nPROMU_VERSION ?= 0.17.0\nPROMU_URL     := https://github.com/prometheus/promu/releases/download/v$(PROMU_VERSION)/promu-$(PROMU_VERSION).$(GO_BUILD_PLATFORM).tar.gz\n\nSKIP_GOLANGCI_LINT :=\nGOLANGCI_LINT :=\nGOLANGCI_LINT_OPTS ?=\nGOLANGCI_LINT_VERSION ?= v1.62.0\n# golangci-lint only supports linux, darwin and windows platforms on i386/amd64/arm64.\n# windows isn't included here because of the path separator being different.\nifeq ($(GOHOSTOS),$(filter $(GOHOSTOS),linux darwin))\n\tifeq ($(GOHOSTARCH),$(filter $(GOHOSTARCH),amd64 i386 arm64))\n\t\t# If we're in CI and there is an Actions file, that means the linter\n\t\t# is being run in Actions, so we don't need to run it here.\n\t\tifneq (,$(SKIP_GOLANGCI_LINT))\n\t\t\tGOLANGCI_LINT :=\n\t\telse ifeq (,$(CIRCLE_JOB))\n\t\t\tGOLANGCI_LINT := $(FIRST_GOPATH)/bin/golangci-lint\n\t\telse ifeq (,$(wildcard .github/workflows/golangci-lint.yml))\n\t\t\tGOLANGCI_LINT := $(FIRST_GOPATH)/bin/golangci-lint\n\t\tendif\n\tendif\nendif\n\nPREFIX                  ?= $(shell pwd)\nBIN_DIR                 ?= $(shell pwd)\nDOCKER_IMAGE_TAG        ?= $(subst /,-,$(shell git rev-parse --abbrev-ref HEAD))\nDOCKERFILE_PATH         ?= ./Dockerfile\nDOCKERBUILD_CONTEXT     ?= ./\nDOCKER_REPO             ?= prom\n\nDOCKER_ARCHS            ?= amd64\n\nBUILD_DOCKER_ARCHS = $(addprefix common-docker-,$(DOCKER_ARCHS))\nPUBLISH_DOCKER_ARCHS = $(addprefix common-docker-publish-,$(DOCKER_ARCHS))\nTAG_DOCKER_ARCHS = $(addprefix common-docker-tag-latest-,$(DOCKER_ARCHS))\n\nSANITIZED_DOCKER_IMAGE_TAG := $(subst +,-,$(DOCKER_IMAGE_TAG))\n\nifeq ($(GOHOSTARCH),amd64)\n        ifeq ($(GOHOSTOS),$(filter $(GOHOSTOS),linux freebsd darwin windows))\n                # Only supported on amd64\n                test-flags := -race\n        endif\nendif\n\n# This rule is used to forward a target like \"build\" to \"common-build\".  This\n# allows a new \"build\" target to be defined in a Makefile which includes this\n# one and override \"common-build\" without override warnings.\n%: common-% ;\n\n.PHONY: common-all\ncommon-all: precheck style check_license lint yamllint unused build test\n\n.PHONY: common-style\ncommon-style:\n\t@echo \">> checking code style\"\n\t@fmtRes=$$($(GOFMT) -d $$(find . -path ./vendor -prune -o -name '*.go' -print)); \\\n\tif [ -n \"$${fmtRes}\" ]; then \\\n\t\techo \"gofmt checking failed!\"; echo \"$${fmtRes}\"; echo; \\\n\t\techo \"Please ensure you are using $$($(GO) version) for formatting code.\"; \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: common-check_license\ncommon-check_license:\n\t@echo \">> checking license header\"\n\t@licRes=$$(for file in $$(find . -type f -iname '*.go' ! -path './vendor/*') ; do \\\n               awk 'NR<=3' $$file | grep -Eq \"(Copyright|generated|GENERATED)\" || echo $$file; \\\n       done); \\\n       if [ -n \"$${licRes}\" ]; then \\\n               echo \"license header checking failed:\"; echo \"$${licRes}\"; \\\n               exit 1; \\\n       fi\n\n.PHONY: common-deps\ncommon-deps:\n\t@echo \">> getting dependencies\"\n\t$(GO) mod download\n\n.PHONY: update-go-deps\nupdate-go-deps:\n\t@echo \">> updating Go dependencies\"\n\t@for m in $$($(GO) list -mod=readonly -m -f '{{ if and (not .Indirect) (not .Main)}}{{.Path}}{{end}}' all); do \\\n\t\t$(GO) get -d $$m; \\\n\tdone\n\t$(GO) mod tidy\n\n.PHONY: common-test-short\ncommon-test-short: $(GOTEST_DIR)\n\t@echo \">> running short tests\"\n\t$(GOTEST) -short $(GOOPTS) $(pkgs)\n\n.PHONY: common-test\ncommon-test: $(GOTEST_DIR)\n\t@echo \">> running all tests\"\n\t$(GOTEST) $(test-flags) $(GOOPTS) $(pkgs)\n\n$(GOTEST_DIR):\n\t@mkdir -p $@\n\n.PHONY: common-format\ncommon-format:\n\t@echo \">> formatting code\"\n\t$(GO) fmt $(pkgs)\n\n.PHONY: common-vet\ncommon-vet:\n\t@echo \">> vetting code\"\n\t$(GO) vet $(GOOPTS) $(pkgs)\n\n.PHONY: common-lint\ncommon-lint: $(GOLANGCI_LINT)\nifdef GOLANGCI_LINT\n\t@echo \">> running golangci-lint\"\n\t$(GOLANGCI_LINT) run $(GOLANGCI_LINT_OPTS) $(pkgs)\nendif\n\n.PHONY: common-lint-fix\ncommon-lint-fix: $(GOLANGCI_LINT)\nifdef GOLANGCI_LINT\n\t@echo \">> running golangci-lint fix\"\n\t$(GOLANGCI_LINT) run --fix $(GOLANGCI_LINT_OPTS) $(pkgs)\nendif\n\n.PHONY: common-yamllint\ncommon-yamllint:\n\t@echo \">> running yamllint on all YAML files in the repository\"\nifeq (, $(shell command -v yamllint 2> /dev/null))\n\t@echo \"yamllint not installed so skipping\"\nelse\n\tyamllint .\nendif\n\n# For backward-compatibility.\n.PHONY: common-staticcheck\ncommon-staticcheck: lint\n\n.PHONY: common-unused\ncommon-unused:\n\t@echo \">> running check for unused/missing packages in go.mod\"\n\t$(GO) mod tidy\n\t@git diff --exit-code -- go.sum go.mod\n\n.PHONY: common-build\ncommon-build: promu\n\t@echo \">> building binaries\"\n\t$(PROMU) build --prefix $(PREFIX) $(PROMU_BINARIES)\n\n.PHONY: common-tarball\ncommon-tarball: promu\n\t@echo \">> building release tarball\"\n\t$(PROMU) tarball --prefix $(PREFIX) $(BIN_DIR)\n\n.PHONY: common-docker-repo-name\ncommon-docker-repo-name:\n\t@echo \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)\"\n\n.PHONY: common-docker $(BUILD_DOCKER_ARCHS)\ncommon-docker: $(BUILD_DOCKER_ARCHS)\n$(BUILD_DOCKER_ARCHS): common-docker-%:\n\tdocker build -t \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \\\n\t\t-f $(DOCKERFILE_PATH) \\\n\t\t--build-arg ARCH=\"$*\" \\\n\t\t--build-arg OS=\"linux\" \\\n\t\t$(DOCKERBUILD_CONTEXT)\n\n.PHONY: common-docker-publish $(PUBLISH_DOCKER_ARCHS)\ncommon-docker-publish: $(PUBLISH_DOCKER_ARCHS)\n$(PUBLISH_DOCKER_ARCHS): common-docker-publish-%:\n\tdocker push \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\"\n\nDOCKER_MAJOR_VERSION_TAG = $(firstword $(subst ., ,$(shell cat VERSION)))\n.PHONY: common-docker-tag-latest $(TAG_DOCKER_ARCHS)\ncommon-docker-tag-latest: $(TAG_DOCKER_ARCHS)\n$(TAG_DOCKER_ARCHS): common-docker-tag-latest-%:\n\tdocker tag \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:latest\"\n\tdocker tag \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:$(SANITIZED_DOCKER_IMAGE_TAG)\" \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$*:v$(DOCKER_MAJOR_VERSION_TAG)\"\n\n.PHONY: common-docker-manifest\ncommon-docker-manifest:\n\tDOCKER_CLI_EXPERIMENTAL=enabled docker manifest create -a \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME):$(SANITIZED_DOCKER_IMAGE_TAG)\" $(foreach ARCH,$(DOCKER_ARCHS),$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME)-linux-$(ARCH):$(SANITIZED_DOCKER_IMAGE_TAG))\n\tDOCKER_CLI_EXPERIMENTAL=enabled docker manifest push \"$(DOCKER_REPO)/$(DOCKER_IMAGE_NAME):$(SANITIZED_DOCKER_IMAGE_TAG)\"\n\n.PHONY: promu\npromu: $(PROMU)\n\n$(PROMU):\n\t$(eval PROMU_TMP := $(shell mktemp -d))\n\tcurl -s -L $(PROMU_URL) | tar -xvzf - -C $(PROMU_TMP)\n\tmkdir -p $(FIRST_GOPATH)/bin\n\tcp $(PROMU_TMP)/promu-$(PROMU_VERSION).$(GO_BUILD_PLATFORM)/promu $(FIRST_GOPATH)/bin/promu\n\trm -r $(PROMU_TMP)\n\n.PHONY: proto\nproto:\n\t@echo \">> generating code from proto files\"\n\t@./scripts/genproto.sh\n\nifdef GOLANGCI_LINT\n$(GOLANGCI_LINT):\n\tmkdir -p $(FIRST_GOPATH)/bin\n\tcurl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/$(GOLANGCI_LINT_VERSION)/install.sh \\\n\t\t| sed -e '/install -d/d' \\\n\t\t| sh -s -- -b $(FIRST_GOPATH)/bin $(GOLANGCI_LINT_VERSION)\nendif\n\n.PHONY: precheck\nprecheck::\n\ndefine PRECHECK_COMMAND_template =\nprecheck:: $(1)_precheck\n\nPRECHECK_COMMAND_$(1) ?= $(1) $$(strip $$(PRECHECK_OPTIONS_$(1)))\n.PHONY: $(1)_precheck\n$(1)_precheck:\n\t@if ! $$(PRECHECK_COMMAND_$(1)) 1>/dev/null 2>&1; then \\\n\t\techo \"Execution of '$$(PRECHECK_COMMAND_$(1))' command failed. Is $(1) installed?\"; \\\n\t\texit 1; \\\n\tfi\nendef\n\ngovulncheck: install-govulncheck\n\tgovulncheck ./...\n\ninstall-govulncheck:\n\tcommand -v govulncheck > /dev/null || go install golang.org/x/vuln/cmd/govulncheck@latest\n"
        },
        {
          "name": "NOTICE",
          "type": "blob",
          "size": 0.6162109375,
          "content": "Prometheus instrumentation library for Go applications\nCopyright 2012-2015 The Prometheus Authors\n\nThis product includes software developed at\nSoundCloud Ltd. (http://soundcloud.com/).\n\n\nThe following components are included in this product:\n\nperks - a fork of https://github.com/bmizerany/perks\nhttps://github.com/beorn7/perks\nCopyright 2013-2015 Blake Mizerany, Björn Rabenstein\nSee https://github.com/beorn7/perks/blob/master/README.md for license details.\n\nGo support for Protocol Buffers - Google's data interchange format\nhttp://github.com/golang/protobuf/\nCopyright 2010 The Go Authors\nSee source code for license details.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0712890625,
          "content": "# Prometheus Go client library\n\n[![CI](https://github.com/prometheus/client_golang/actions/workflows/go.yml/badge.svg)](https://github.com/prometheus/client_golang/actions/workflows/ci.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/prometheus/client_golang)](https://goreportcard.com/report/github.com/prometheus/client_golang)\n[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang.svg)](https://pkg.go.dev/github.com/prometheus/client_golang)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/prometheus/client_golang/badge)](https://securityscorecards.dev/viewer/?uri=github.com/prometheus/client_golang)\n[![Slack](https://img.shields.io/badge/join%20slack-%23prometheus--client_golang-brightgreen.svg)](https://slack.cncf.io/)\n\nThis is the [Go](http://golang.org) client library for\n[Prometheus](http://prometheus.io). It has two separate parts, one for\ninstrumenting application code, and one for creating clients that talk to the\nPrometheus HTTP API.\n\n**This library requires Go1.21 or later.**\n> The library mandates the use of Go1.21 or subsequent versions. While it has demonstrated functionality with versions as old as Go 1.17, our commitment remains to offer support and rectifications for only the most recent three major releases.\n\n## Important note about releases and stability\n\nThis repository generally follows [Semantic\nVersioning](https://semver.org/). However, the API client in\n`prometheus/client_golang/api/…` is still considered experimental. Breaking\nchanges of the API client will _not_ trigger a new major release. The same is\ntrue for selected other new features explicitly marked as **EXPERIMENTAL** in\nCHANGELOG.md.\n\nFeatures that require breaking changes in the stable parts of the repository\nare being batched up and tracked in the [v2\nmilestone](https://github.com/prometheus/client_golang/milestone/2), but plans for further development of v2 at the moment.\n\n> NOTE: The initial v2 attempt is in a [separate branch](https://github.com/prometheus/client_golang/tree/dev-v2). We also started\nexperimenting on a new `prometheus.V2.*` APIs in [the 1.x's V2 struct](https://github.com/prometheus/client_golang/blob/main/prometheus/vnext.go#L23). Help wanted!\n\n## Instrumenting applications\n\n[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang/prometheus.svg)](https://pkg.go.dev/github.com/prometheus/client_golang/prometheus)\n\nThe\n[`prometheus` directory](https://github.com/prometheus/client_golang/tree/main/prometheus)\ncontains the instrumentation library. See the\n[guide](https://prometheus.io/docs/guides/go-application/) on the Prometheus\nwebsite to learn more about instrumenting applications.\n\nThe\n[`examples` directory](https://github.com/prometheus/client_golang/tree/main/examples)\ncontains simple examples of instrumented code.\n\n## Client for the Prometheus HTTP API\n\n[![Go Reference](https://pkg.go.dev/badge/github.com/prometheus/client_golang/api.svg)](https://pkg.go.dev/github.com/prometheus/client_golang/api)\n\nThe\n[`api/prometheus` directory](https://github.com/prometheus/client_golang/tree/main/api/prometheus)\ncontains the client for the\n[Prometheus HTTP API](http://prometheus.io/docs/querying/api/). It allows you\nto write Go applications that query time series data from a Prometheus\nserver. It is still in alpha stage.\n\n## Where is `model`, `extraction`, and `text`?\n\nThe `model` packages has been moved to\n[`prometheus/common/model`](https://github.com/prometheus/common/tree/main/model).\n\nThe `extraction` and `text` packages are now contained in\n[`prometheus/common/expfmt`](https://github.com/prometheus/common/tree/main/expfmt).\n\n## Contributing and community\n\nSee the [contributing guidelines](CONTRIBUTING.md) and the\n[Community section](http://prometheus.io/community/) of the homepage.\n\n`client_golang` community is also present on the CNCF Slack `#prometheus-client_golang`.\n\n### For Maintainers: Release Process\n\nTo cut a minor version:\n\n1. Create a new branch `release-<major>.<minor>` on top of the `main` commit you want to cut the version from and push it.\n2. Create a new branch on top of the release branch, e.g. `<yourname>/cut-<major>.<minor>.<patch>`,\n3. Change the `VERSION` file.\n4. Update `CHANGELOG` (only user-impacting changes to mention).\n5. Create PR, and get it reviewed.\n6. Once merged, create a release with the `release-<major>.<minor>` tag on GitHub with the `<version>` title.\n7. Announce on the prometheus-announce mailing list, slack and Twitter.\n8. Merge the release branch back to the `main` using the \"merge without squashing\" approach (!).\n\n> NOTE: In case of merge conflicts, you can checkout the release branch in a new branch, e.g. `<yourname>/resolve-conflicts`, fix the merge problems there, and then do a PR into main from the new branch. In that way, you still get all the commits in the release branch back into `main`, but leave the release branch alone.\n\nTo cut the patch version:\n\n1. Create a branch on top of the release branch you want to use.\n2. Cherry-pick the fixes from the `main` branch (or add new commits) to fix critical bugs for that patch release.\n3. Follow steps 3-8 as above.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.16796875,
          "content": "# Reporting a security issue\n\nThe Prometheus security policy, including how to report vulnerabilities, can be\nfound here:\n\n<https://prometheus.io/docs/operating/security/>\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "1.20.5\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "dagger.json",
          "type": "blob",
          "size": 0.287109375,
          "content": "{\n  \"name\": \"client_golang\",\n  \"sdk\": \"go\",\n  \"includes\": [\n    \"dagger\"\n  ],\n  \"dependencies\": [\n    {\n      \"name\": \"golang\",\n      \"source\": \"github.com/kpenfound/dagger-modules/golang@fd1a6e75721454d8ee3bcb0bd1a94d6bb4be1737\"\n    }\n  ],\n  \"source\": \"dagger\",\n  \"engineVersion\": \"v0.12.5\"\n}\n"
        },
        {
          "name": "dagger",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate-go-collector.bash",
          "type": "blob",
          "size": 0.2509765625,
          "content": "#!/bin/env bash\n\nset -e\n\ngo get github.com/hashicorp/go-version@v1.6.0\ngo run prometheus/gen_go_collector_metrics_set.go\nmv -f go_collector_metrics_* prometheus\ngo run prometheus/collectors/gen_go_collector_set.go\nmv -f go_collector_* prometheus/collectors\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.03515625,
          "content": "module github.com/prometheus/client_golang\n\ngo 1.21\n\nrequire (\n\tgithub.com/beorn7/perks v1.0.1\n\tgithub.com/cespare/xxhash/v2 v2.3.0\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/kylelemons/godebug v1.1.0\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/prometheus/common v0.61.0\n\tgithub.com/prometheus/procfs v0.15.1\n\tgolang.org/x/sys v0.28.0\n\tgoogle.golang.org/protobuf v1.36.1\n)\n\nrequire (\n\tgithub.com/jpillora/backoff v1.0.0 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f // indirect\n\tgolang.org/x/net v0.32.0 // indirect\n\tgolang.org/x/oauth2 v0.24.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n\nexclude github.com/prometheus/client_golang v1.12.1\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.6943359375,
          "content": "github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/jpillora/backoff v1.0.0 h1:uvFg412JmmHBHw7iwprIxkPMI+sGQ4kzOWsMeHnm2EA=\ngithub.com/jpillora/backoff v1.0.0/go.mod h1:J/6gKK9jxlEcS3zixgDgUAsiuZ7yrSoa/FX5e0EB2j4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f h1:KUppIJq7/+SVif2QVs3tOP0zanoHgBEVAwHxUSIzRqU=\ngithub.com/mwitkow/go-conntrack v0.0.0-20190716064945-2f068394615f/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngolang.org/x/net v0.32.0 h1:ZqPmj8Kzc+Y6e0+skZsuACbx+wzMgo5MQsJh9Qd6aYI=\ngolang.org/x/net v0.32.0/go.mod h1:CwU0IoeOlnQQWJ6ioyFrfRuomB8GKF6KbYXZVyeXNfs=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngoogle.golang.org/protobuf v1.36.1 h1:yBPeRvTftaleIgM3PZ/WBIZ7XM/eEYAaEyCwvyjq/gk=\ngoogle.golang.org/protobuf v1.36.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "prometheus",
          "type": "tree",
          "content": null
        },
        {
          "name": "supported_go_versions.txt",
          "type": "blob",
          "size": 0.0146484375,
          "content": "1.23\n1.22\n1.21\n"
        },
        {
          "name": "tutorials",
          "type": "tree",
          "content": null
        },
        {
          "name": "update-go-version.bash",
          "type": "blob",
          "size": 0.7822265625,
          "content": "#!/bin/env bash\n\nset -e\n\nget_latest_versions() {\n  curl -s https://go.dev/VERSION?m=text | sed -E -n 's/go([0-9]+\\.[0-9]+|\\.[0-9]+).*/\\1/p'\n}\n\ncurrent_version=$(cat supported_go_versions.txt | head -n 1)\nlatest_version=$(get_latest_versions)\n\n# Check for new version of Go, and generate go collector test files\n# Add new Go version to supported_go_versions.txt, and remove the oldest version\nif [[ ! $current_version =~ $latest_version ]]; then\n  echo \"New Go version available: $latest_version\"\n  echo \"Updating supported_go_versions.txt and generating Go Collector test files\"\n  sed -i \"1i $latest_version\" supported_go_versions.txt\n  sed -i '$d' supported_go_versions.txt\n  make generate-go-collector-test-files\nelse\n  echo \"No new Go version detected. Current Go version is: $current_version\"\nfi\n\n"
        }
      ]
    }
  ]
}