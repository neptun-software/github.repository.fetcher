{
  "metadata": {
    "timestamp": 1736567593038,
    "page": 177,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "traefik/yaegi",
      "stars": 7232,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.111328125,
          "content": ".*.swo\n.*.swp\n*.dot\n*.out\n.idea/\n/yaegi\ninternal/cmd/extract/extract\nexample/inception/inception\n_test/tmp/\n/dist\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 3.2919921875,
          "content": "run:\n  timeout: 10m\n  skip-files: []\n\nlinters-settings:\n  govet:\n    shadow: false\n  gocyclo:\n    min-complexity: 12\n  maligned:\n    suggest-new: true\n  goconst:\n    min-len: 3\n    min-occurrences: 3\n  funlen:\n    lines: -1\n    statements: 50\n  misspell:\n    locale: US\n  depguard:\n    rules:\n      main:\n        files:\n          - $all\n        allow:\n          - $gostd\n          - github.com/traefik/yaegi\n  tagalign:\n    align: false\n    order:\n      - xml\n      - json\n      - yaml\n      - yml\n      - toml\n      - mapstructure\n      - url\n  godox:\n    keywords:\n      - FIXME\n  gocritic:\n    enabled-tags:\n      - diagnostic\n      - style\n      - performance\n    disabled-checks:\n      - paramTypeCombine # already handle by gofumpt.extra-rules\n      - whyNoLint # already handle by nonolint\n      - unnamedResult\n      - hugeParam\n      - sloppyReassign\n      - rangeValCopy\n      - octalLiteral\n      - ptrToRefParam\n      - appendAssign\n      - ruleguard\n      - httpNoBody\n      - exposedSyncMutex\n      - importShadow # TODO should be fixed\n      - commentedOutCode # TODO should be fixed\n  revive:\n    rules:\n      - name: struct-tag\n      - name: blank-imports\n      - name: context-as-argument\n      - name: context-keys-type\n      - name: dot-imports\n      - name: error-return\n      - name: error-strings\n      - name: error-naming\n      - name: exported\n        disabled: true\n      - name: if-return\n      - name: increment-decrement\n      - name: var-naming\n      - name: var-declaration\n      - name: package-comments\n        disabled: true\n      - name: range\n      - name: receiver-naming\n      - name: time-naming\n      - name: unexported-return\n      - name: indent-error-flow\n      - name: errorf\n      - name: empty-block\n      - name: superfluous-else\n      - name: unused-parameter\n        disabled: true\n      - name: unreachable-code\n      - name: redefines-builtin-id\n\nlinters:\n  enable-all: true\n  disable:\n    - lll\n    - gosec\n    - dupl\n    - prealloc\n    - gocyclo\n    - cyclop\n    - gochecknoinits\n    - gochecknoglobals\n    - wsl\n    - nlreturn\n    - godox\n    - funlen\n    - gocognit\n    - stylecheck\n    - mnd\n    - testpackage\n    - paralleltest\n    - tparallel\n    - err113\n    - wrapcheck\n    - nestif\n    - exhaustive\n    - exhaustruct\n    - forbidigo\n    - forcetypeassert\n    - varnamelen\n    - nonamedreturns\n    - nilnil\n    - maintidx\n    - dupword # false positives\n    - errorlint   # TODO: enable after fixes\n    - errcheck    # TODO: enable after fixes\n    - revive      # TODO: enable after fixes\n    - fatcontext  # TODO: enable after fixes\n    - gocritic    # TODO: enable after fixes\n    - predeclared # TODO: enable after fixes\n    - recvcheck   # TODO: enable after fixes\n\nissues:\n  exclude-use-default: false\n  max-issues-per-linter: 0\n  max-same-issues: 0\n  exclude:\n    - 'fmt.Sprintf can be replaced with string'\n  exclude-rules:\n    - path: .+_test\\.go\n      linters:\n        - goconst\n    - path: .+_test\\.go\n      text: 'var-declaration:'\n    - path: interp/interp.go\n      text: '`in` can be `io.Reader`'\n    - path: interp/interp.go\n      text: '`out` can be `io.Writer`'\n    - path: interp/interp.go\n      text: '`Panic` should conform to the `XxxError` format'\n    - path: interp/interp_eval_test.go\n      linters:\n        - thelper\n    - path: interp/debugger.go\n      linters:\n        - containedctx\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.181640625,
          "content": "project_name: yaegi\n\nbuilds:\n  - id: yaegi\n    binary: yaegi\n    main: ./cmd/yaegi/\n\n    goos:\n      - darwin\n      - linux\n#      - windows\n      - freebsd\n      - openbsd\n      - solaris\n    goarch:\n      - amd64\n      - 386\n      - arm\n      - arm64\n    goarm:\n      - 7\n      - 6\n      - 5\n\n    ignore:\n      - goos: darwin\n        goarch: 386\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^doc:'\n      - '^chore:'\n      - '^test:'\n      - '^tests:'\n\narchives:\n  - id: archive\n    name_template: '{{ .ProjectName }}_v{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'\n    format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - LICENSE\n\nbrews:\n  - repository:\n      owner: traefik\n      name: homebrew-tap\n    commit_author:\n      name: traefiker\n      email: 30906710+traefiker@users.noreply.github.com\n    folder: Formula\n    homepage: https://github.com/traefik/yaegi\n    description: |\n      Yaegi is Another Elegant Go Interpreter.\n      It powers executable Go scripts and plugins, in embedded interpreters\n      or interactive shells, on top of the Go runtime.\n    test: |\n      system \"#{bin}/yaegi version\"\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.1416015625,
          "content": "# Contributing\n\nYaegi is an open source project, and your feedback and contributions\nare needed and always welcome.\n\n[Issues] and [Pull Requests] are opened at https://github.com/traefik/yaegi.\n\nNon trivial changes should be discussed with the project maintainers by\nopening a [Feature Request] clearly explaining rationale, background\nand possible implementation ideas. Feel free to provide code in such\ndiscussions.\n\nOnce the proposal is approved, a Pull Request can be opened. If you want\nto provide early visibility to reviewers, create a [Draft Pull Request].\n\nWe will also require you to sign the [Traefik Contributor License Agreement]\nafter you submit your first pull request to this project. The link to sign the\nagreement will be presented to you in the web interface of the pull request.\n\n[Issues]: https://github.com/traefik/yaegi/issues\n[Pull Requests]: https://github.com/traefik/yaegi/issues\n[Feature Request]: https://github.com/traefik/yaegi/issues/new?template=feature_request.md\n[Draft Pull Request]: https://github.blog/2019-02-14-introducing-draft-pull-requests/\n[Traefik Labs Contributor License Agreement]: https://cla-assistant.io/traefik/yaegi\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1123046875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2019 Containous SAS\n   Copyright 2020 Traefik Labs SAS\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.3046875,
          "content": "# Static linting of source files. See .golangci.toml for options\ncheck:\n\tgolangci-lint run\n\n# Generate stdlib/syscall/syscall_GOOS_GOARCH.go for all platforms\ngen_all_syscall: internal/cmd/extract/extract\n\t@for v in $$(go tool dist list); do \\\n\t\techo syscall_$${v%/*}_$${v#*/}.go; \\\n\t\tGOOS=$${v%/*} GOARCH=$${v#*/} go generate ./stdlib/syscall ./stdlib/unrestricted; \\\n\tdone\n\ninternal/cmd/extract/extract:\n\trm -f internal/cmd/extract/extract\n\tgo generate ./internal/cmd/extract\n\ngenerate: gen_all_syscall\n\tgo generate\n\ninstall:\n\tGOFLAGS=-ldflags=-X=main.version=$$(git describe --tags) go install ./...\n\ntests:\n\tgo test -v ./...\n\tgo test -race ./interp\n\n# https://github.com/goreleaser/godownloader\ninstall.sh: .goreleaser.yml\n\tgodownloader --repo=traefik/yaegi -o install.sh .goreleaser.yml\n\ngeneric_list = cmp/cmp.go slices/slices.go slices/sort.go slices/zsortanyfunc.go maps/maps.go \\\n\t\t\t   sync/oncefunc.go sync/atomic/type.go\n\n# get_generic_src imports stdlib files containing generic symbols definitions\nget_generic_src:\n\teval \"`go env`\"; echo $$GOROOT; gov=$${GOVERSION#*.}; gov=$${gov%.*}; \\\n\tfor f in ${generic_list}; do \\\n\t\tnf=stdlib/generic/go1_$${gov}_`echo $$f | tr / _`.txt; echo \"nf: $$nf\"; \\\n\t\tcat \"$$GOROOT/src/$$f\" > \"$$nf\"; \\\n\tdone\n\n.PHONY: check gen_all_syscall internal/cmd/extract/extract get_generic_src install\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.2724609375,
          "content": "<p align=\"center\">\n<img width=\"400\" src=\"doc/images/yaegi.png\" alt=\"Yaegi\" title=\"Yaegi\" />\n</p>\n\n[![release](https://img.shields.io/github/tag-date/traefik/yaegi.svg?label=alpha)](https://github.com/traefik/yaegi/releases)\n[![Build Status](https://github.com/traefik/yaegi/actions/workflows/main.yml/badge.svg)](https://github.com/traefik/yaegi/actions/workflows/main.yml)\n[![GoDoc](https://godoc.org/github.com/traefik/yaegi?status.svg)](https://pkg.go.dev/mod/github.com/traefik/yaegi)\n\nYaegi is Another Elegant Go Interpreter.\nIt powers executable Go scripts and plugins, in embedded interpreters or interactive shells, on top of the Go runtime.\n\n## Features\n\n* Complete support of [Go specification][specs]\n* Written in pure Go, using only the standard library\n* Simple interpreter API: `New()`, `Eval()`, `Use()`\n* Works everywhere Go works\n* All Go & runtime resources accessible from script (with control)\n* Security: `unsafe` and `syscall` packages neither used nor exported by default\n* Support the latest 2 major releases of Go (Go 1.21 and Go 1.22)\n\n## Install\n\n### Go package\n\n```go\nimport \"github.com/traefik/yaegi/interp\"\n```\n\n### Command-line executable\n\n```bash\ngo install github.com/traefik/yaegi/cmd/yaegi@latest\n```\n\nNote that you can use [rlwrap](https://github.com/hanslub42/rlwrap) (install with your favorite package manager),\nand alias the `yaegi` command in `alias yaegi='rlwrap yaegi'` in your `~/.bashrc`, to have history and command line edition.\n\n### CI Integration\n\n```bash\ncurl -sfL https://raw.githubusercontent.com/traefik/yaegi/master/install.sh | bash -s -- -b $GOPATH/bin v0.9.0\n```\n\n## Usage\n\n### As an embedded interpreter\n\nCreate an interpreter with `New()`, run Go code with `Eval()`:\n\n```go\npackage main\n\nimport (\n\t\"github.com/traefik/yaegi/interp\"\n\t\"github.com/traefik/yaegi/stdlib\"\n)\n\nfunc main() {\n\ti := interp.New(interp.Options{})\n\n\ti.Use(stdlib.Symbols)\n\n\t_, err := i.Eval(`import \"fmt\"`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_, err = i.Eval(`fmt.Println(\"Hello Yaegi\")`)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n[Go Playground](https://play.golang.org/p/2n-EpZbMYI9)\n\n### As a dynamic extension framework\n\nThe following program is compiled ahead of time, except `bar()` which is interpreted, with the following steps:\n\n1. use of `i.Eval(src)` to evaluate the script in the context of interpreter\n2. use of `v, err := i.Eval(\"foo.Bar\")` to get the symbol from the interpreter context,  as a `reflect.Value`\n3. application of `Interface()` method and type assertion to convert `v` into `bar`, as if it was compiled\n\n```go\npackage main\n\nimport \"github.com/traefik/yaegi/interp\"\n\nconst src = `package foo\nfunc Bar(s string) string { return s + \"-Foo\" }`\n\nfunc main() {\n\ti := interp.New(interp.Options{})\n\n\t_, err := i.Eval(src)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tv, err := i.Eval(\"foo.Bar\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tbar := v.Interface().(func(string) string)\n\n\tr := bar(\"Kung\")\n\tprintln(r)\n}\n```\n\n[Go Playground](https://play.golang.org/p/WvwH4JqrU-p)\n\n### As a command-line interpreter\n\nThe Yaegi command can run an interactive Read-Eval-Print-Loop:\n\n```console\n$ yaegi\n> 1 + 2\n3\n> import \"fmt\"\n> fmt.Println(\"Hello World\")\nHello World\n>\n```\n\nNote that in interactive mode, all stdlib package are pre-imported,\nyou can use them directly:\n\n```console\n$ yaegi\n> reflect.TypeOf(time.Date)\n: func(int, time.Month, int, int, int, int, int, *time.Location) time.Time\n>\n```\n\nOr interpret Go packages, directories or files, including itself:\n\n```console\n$ yaegi -syscall -unsafe -unrestricted github.com/traefik/yaegi/cmd/yaegi\n>\n```\n\nOr for Go scripting in the shebang line:\n\n```console\n$ cat /tmp/test\n#!/usr/bin/env yaegi\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"test\")\n}\n$ ls -la /tmp/test\n-rwxr-xr-x 1 dow184 dow184 93 Jan  6 13:38 /tmp/test\n$ /tmp/test\ntest\n```\n\n## Documentation\n\nDocumentation about Yaegi commands and libraries can be found at usual [godoc.org][docs].\n\nKey documentation of the internal design: https://marc.vertes.org/yaegi-internals/  Also see [interp/trace.go](interp/trace.go) for helpful printing commands to see what is happening under the hood during compilation.\n\n## Limitations\n\nBeside the known [bugs] which are supposed to be fixed in the short term, there are some limitations not planned to be addressed soon:\n\n- Assembly files (`.s`) are not supported.\n- Calling C code is not supported (no virtual \"C\" package).\n- Directives about the compiler, the linker, or embedding files are not supported.\n- Interfaces to be used from the pre-compiled code can not be added dynamically, as it is required to pre-compile interface wrappers.\n- Representation of types by `reflect` and printing values using %T may give different results between compiled mode and interpreted mode.\n- Interpreting computation intensive code is likely to remain significantly slower than in compiled mode.\n\nGo modules are not supported yet. Until that, it is necessary to install the source into `$GOPATH/src/github.com/traefik/yaegi` to pass all the tests.\n\n## Contributing\n\n[Contributing guide](CONTRIBUTING.md).\n\n## License\n\n[Apache 2.0][License].\n\n[specs]: https://golang.org/ref/spec\n[docs]: https://pkg.go.dev/github.com/traefik/yaegi\n[license]: https://github.com/traefik/yaegi/blob/master/LICENSE\n[github]: https://github.com/traefik/yaegi\n[bugs]: https://github.com/traefik/yaegi/issues?q=is%3Aissue+is%3Aopen+label%3Abug\n"
        },
        {
          "name": "_test",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "extract",
          "type": "tree",
          "content": null
        },
        {
          "name": "generate.go",
          "type": "blob",
          "size": 0.369140625,
          "content": "// Package yaegi provides a Go interpreter.\npackage yaegi\n\n//go:generate go generate github.com/traefik/yaegi/internal/cmd/extract\n//go:generate go generate github.com/traefik/yaegi/interp\n//go:generate go generate github.com/traefik/yaegi/stdlib\n//go:generate go generate github.com/traefik/yaegi/stdlib/syscall\n//go:generate go generate github.com/traefik/yaegi/stdlib/unsafe\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.0400390625,
          "content": "module github.com/traefik/yaegi\n\ngo 1.21\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 9.974609375,
          "content": "#!/bin/sh\nset -e\n# Code generated by godownloader on 2020-09-27T12:53:27Z. DO NOT EDIT.\n#\n\nusage() {\n  this=$1\n  cat <<EOF\n$this: download go binaries for traefik/yaegi\n\nUsage: $this [-b] bindir [-d] [tag]\n  -b sets bindir or installation directory, Defaults to ./bin\n  -d turns on debug logging\n   [tag] is a tag from\n   https://github.com/traefik/yaegi/releases\n   If tag is missing, then the latest will be used.\n\n Generated by godownloader\n  https://github.com/goreleaser/godownloader\n\nEOF\n  exit 2\n}\n\nparse_args() {\n  #BINDIR is ./bin unless set be ENV\n  # over-ridden by flag below\n\n  BINDIR=${BINDIR:-./bin}\n  while getopts \"b:dh?x\" arg; do\n    case \"$arg\" in\n      b) BINDIR=\"$OPTARG\" ;;\n      d) log_set_priority 10 ;;\n      h | \\?) usage \"$0\" ;;\n      x) set -x ;;\n    esac\n  done\n  shift $((OPTIND - 1))\n  TAG=$1\n}\n# this function wraps all the destructive operations\n# if a curl|bash cuts off the end of the script due to\n# network, either nothing will happen or will syntax error\n# out preventing half-done work\nexecute() {\n  tmpdir=$(mktemp -d)\n  log_debug \"downloading files into ${tmpdir}\"\n  http_download \"${tmpdir}/${TARBALL}\" \"${TARBALL_URL}\"\n  http_download \"${tmpdir}/${CHECKSUM}\" \"${CHECKSUM_URL}\"\n  hash_sha256_verify \"${tmpdir}/${TARBALL}\" \"${tmpdir}/${CHECKSUM}\"\n  srcdir=\"${tmpdir}\"\n  (cd \"${tmpdir}\" && untar \"${TARBALL}\")\n  test ! -d \"${BINDIR}\" && install -d \"${BINDIR}\"\n  for binexe in $BINARIES; do\n    if [ \"$OS\" = \"windows\" ]; then\n      binexe=\"${binexe}.exe\"\n    fi\n    install \"${srcdir}/${binexe}\" \"${BINDIR}/\"\n    log_info \"installed ${BINDIR}/${binexe}\"\n  done\n  rm -rf \"${tmpdir}\"\n}\nget_binaries() {\n  case \"$PLATFORM\" in\n    darwin/amd64) BINARIES=\"yaegi\" ;;\n    darwin/arm64) BINARIES=\"yaegi\" ;;\n    darwin/armv5) BINARIES=\"yaegi\" ;;\n    darwin/armv6) BINARIES=\"yaegi\" ;;\n    darwin/armv7) BINARIES=\"yaegi\" ;;\n    freebsd/386) BINARIES=\"yaegi\" ;;\n    freebsd/amd64) BINARIES=\"yaegi\" ;;\n    freebsd/arm64) BINARIES=\"yaegi\" ;;\n    freebsd/armv5) BINARIES=\"yaegi\" ;;\n    freebsd/armv6) BINARIES=\"yaegi\" ;;\n    freebsd/armv7) BINARIES=\"yaegi\" ;;\n    linux/386) BINARIES=\"yaegi\" ;;\n    linux/amd64) BINARIES=\"yaegi\" ;;\n    linux/arm64) BINARIES=\"yaegi\" ;;\n    linux/armv5) BINARIES=\"yaegi\" ;;\n    linux/armv6) BINARIES=\"yaegi\" ;;\n    linux/armv7) BINARIES=\"yaegi\" ;;\n    openbsd/386) BINARIES=\"yaegi\" ;;\n    openbsd/amd64) BINARIES=\"yaegi\" ;;\n    openbsd/arm64) BINARIES=\"yaegi\" ;;\n    openbsd/armv5) BINARIES=\"yaegi\" ;;\n    openbsd/armv6) BINARIES=\"yaegi\" ;;\n    openbsd/armv7) BINARIES=\"yaegi\" ;;\n    solaris/386) BINARIES=\"yaegi\" ;;\n    solaris/amd64) BINARIES=\"yaegi\" ;;\n    solaris/arm64) BINARIES=\"yaegi\" ;;\n    solaris/armv5) BINARIES=\"yaegi\" ;;\n    solaris/armv6) BINARIES=\"yaegi\" ;;\n    solaris/armv7) BINARIES=\"yaegi\" ;;\n    *)\n      log_crit \"platform $PLATFORM is not supported.  Make sure this script is up-to-date and file request at https://github.com/${PREFIX}/issues/new\"\n      exit 1\n      ;;\n  esac\n}\ntag_to_version() {\n  if [ -z \"${TAG}\" ]; then\n    log_info \"checking GitHub for latest tag\"\n  else\n    log_info \"checking GitHub for tag '${TAG}'\"\n  fi\n  REALTAG=$(github_release \"$OWNER/$REPO\" \"${TAG}\") && true\n  if test -z \"$REALTAG\"; then\n    log_crit \"unable to find '${TAG}' - use 'latest' or see https://github.com/${PREFIX}/releases for details\"\n    exit 1\n  fi\n  # if version starts with 'v', remove it\n  TAG=\"$REALTAG\"\n  VERSION=${TAG#v}\n}\nadjust_format() {\n  # change format (tar.gz or zip) based on OS\n  case ${OS} in\n    windows) FORMAT=zip ;;\n  esac\n  true\n}\nadjust_os() {\n  # adjust archive name based on OS\n  true\n}\nadjust_arch() {\n  # adjust archive name based on ARCH\n  true\n}\n\ncat /dev/null <<EOF\n------------------------------------------------------------------------\nhttps://github.com/client9/shlib - portable posix shell functions\nPublic domain - http://unlicense.org\nhttps://github.com/client9/shlib/blob/master/LICENSE.md\nbut credit (and pull requests) appreciated.\n------------------------------------------------------------------------\nEOF\nis_command() {\n  command -v \"$1\" >/dev/null\n}\nechoerr() {\n  echo \"$@\" 1>&2\n}\nlog_prefix() {\n  echo \"$0\"\n}\n_logp=6\nlog_set_priority() {\n  _logp=\"$1\"\n}\nlog_priority() {\n  if test -z \"$1\"; then\n    echo \"$_logp\"\n    return\n  fi\n  [ \"$1\" -le \"$_logp\" ]\n}\nlog_tag() {\n  case $1 in\n    0) echo \"emerg\" ;;\n    1) echo \"alert\" ;;\n    2) echo \"crit\" ;;\n    3) echo \"err\" ;;\n    4) echo \"warning\" ;;\n    5) echo \"notice\" ;;\n    6) echo \"info\" ;;\n    7) echo \"debug\" ;;\n    *) echo \"$1\" ;;\n  esac\n}\nlog_debug() {\n  log_priority 7 || return 0\n  echoerr \"$(log_prefix)\" \"$(log_tag 7)\" \"$@\"\n}\nlog_info() {\n  log_priority 6 || return 0\n  echoerr \"$(log_prefix)\" \"$(log_tag 6)\" \"$@\"\n}\nlog_err() {\n  log_priority 3 || return 0\n  echoerr \"$(log_prefix)\" \"$(log_tag 3)\" \"$@\"\n}\nlog_crit() {\n  log_priority 2 || return 0\n  echoerr \"$(log_prefix)\" \"$(log_tag 2)\" \"$@\"\n}\nuname_os() {\n  os=$(uname -s | tr '[:upper:]' '[:lower:]')\n  case \"$os\" in\n    cygwin_nt*) os=\"windows\" ;;\n    mingw*) os=\"windows\" ;;\n    msys_nt*) os=\"windows\" ;;\n  esac\n  echo \"$os\"\n}\nuname_arch() {\n  arch=$(uname -m)\n  case $arch in\n    x86_64) arch=\"amd64\" ;;\n    x86) arch=\"386\" ;;\n    i686) arch=\"386\" ;;\n    i386) arch=\"386\" ;;\n    aarch64) arch=\"arm64\" ;;\n    armv5*) arch=\"armv5\" ;;\n    armv6*) arch=\"armv6\" ;;\n    armv7*) arch=\"armv7\" ;;\n  esac\n  echo ${arch}\n}\nuname_os_check() {\n  os=$(uname_os)\n  case \"$os\" in\n    darwin) return 0 ;;\n    dragonfly) return 0 ;;\n    freebsd) return 0 ;;\n    linux) return 0 ;;\n    android) return 0 ;;\n    nacl) return 0 ;;\n    netbsd) return 0 ;;\n    openbsd) return 0 ;;\n    plan9) return 0 ;;\n    solaris) return 0 ;;\n    windows) return 0 ;;\n  esac\n  log_crit \"uname_os_check '$(uname -s)' got converted to '$os' which is not a GOOS value. Please file bug at https://github.com/client9/shlib\"\n  return 1\n}\nuname_arch_check() {\n  arch=$(uname_arch)\n  case \"$arch\" in\n    386) return 0 ;;\n    amd64) return 0 ;;\n    arm64) return 0 ;;\n    armv5) return 0 ;;\n    armv6) return 0 ;;\n    armv7) return 0 ;;\n    ppc64) return 0 ;;\n    ppc64le) return 0 ;;\n    mips) return 0 ;;\n    mipsle) return 0 ;;\n    mips64) return 0 ;;\n    mips64le) return 0 ;;\n    s390x) return 0 ;;\n    amd64p32) return 0 ;;\n  esac\n  log_crit \"uname_arch_check '$(uname -m)' got converted to '$arch' which is not a GOARCH value.  Please file bug report at https://github.com/client9/shlib\"\n  return 1\n}\nuntar() {\n  tarball=$1\n  case \"${tarball}\" in\n    *.tar.gz | *.tgz) tar --no-same-owner -xzf \"${tarball}\" ;;\n    *.tar) tar --no-same-owner -xf \"${tarball}\" ;;\n    *.zip) unzip \"${tarball}\" ;;\n    *)\n      log_err \"untar unknown archive format for ${tarball}\"\n      return 1\n      ;;\n  esac\n}\nhttp_download_curl() {\n  local_file=$1\n  source_url=$2\n  header=$3\n  if [ -z \"$header\" ]; then\n    code=$(curl -w '%{http_code}' -sL -o \"$local_file\" \"$source_url\")\n  else\n    code=$(curl -w '%{http_code}' -sL -H \"$header\" -o \"$local_file\" \"$source_url\")\n  fi\n  if [ \"$code\" != \"200\" ]; then\n    log_debug \"http_download_curl received HTTP status $code\"\n    return 1\n  fi\n  return 0\n}\nhttp_download_wget() {\n  local_file=$1\n  source_url=$2\n  header=$3\n  if [ -z \"$header\" ]; then\n    wget -q -O \"$local_file\" \"$source_url\"\n  else\n    wget -q --header \"$header\" -O \"$local_file\" \"$source_url\"\n  fi\n}\nhttp_download() {\n  log_debug \"http_download $2\"\n  if is_command curl; then\n    http_download_curl \"$@\"\n    return\n  elif is_command wget; then\n    http_download_wget \"$@\"\n    return\n  fi\n  log_crit \"http_download unable to find wget or curl\"\n  return 1\n}\nhttp_copy() {\n  tmp=$(mktemp)\n  http_download \"${tmp}\" \"$1\" \"$2\" || return 1\n  body=$(cat \"$tmp\")\n  rm -f \"${tmp}\"\n  echo \"$body\"\n}\ngithub_release() {\n  owner_repo=$1\n  version=$2\n  test -z \"$version\" && version=\"latest\"\n  giturl=\"https://github.com/${owner_repo}/releases/${version}\"\n  json=$(http_copy \"$giturl\" \"Accept:application/json\")\n  test -z \"$json\" && return 1\n  version=$(echo \"$json\" | tr -s '\\n' ' ' | sed 's/.*\"tag_name\":\"//' | sed 's/\".*//')\n  test -z \"$version\" && return 1\n  echo \"$version\"\n}\nhash_sha256() {\n  TARGET=${1:-/dev/stdin}\n  if is_command gsha256sum; then\n    hash=$(gsha256sum \"$TARGET\") || return 1\n    echo \"$hash\" | cut -d ' ' -f 1\n  elif is_command sha256sum; then\n    hash=$(sha256sum \"$TARGET\") || return 1\n    echo \"$hash\" | cut -d ' ' -f 1\n  elif is_command shasum; then\n    hash=$(shasum -a 256 \"$TARGET\" 2>/dev/null) || return 1\n    echo \"$hash\" | cut -d ' ' -f 1\n  elif is_command openssl; then\n    hash=$(openssl -dst openssl dgst -sha256 \"$TARGET\") || return 1\n    echo \"$hash\" | cut -d ' ' -f a\n  else\n    log_crit \"hash_sha256 unable to find command to compute sha-256 hash\"\n    return 1\n  fi\n}\nhash_sha256_verify() {\n  TARGET=$1\n  checksums=$2\n  if [ -z \"$checksums\" ]; then\n    log_err \"hash_sha256_verify checksum file not specified in arg2\"\n    return 1\n  fi\n  BASENAME=${TARGET##*/}\n  want=$(grep \"${BASENAME}\" \"${checksums}\" 2>/dev/null | tr '\\t' ' ' | cut -d ' ' -f 1)\n  if [ -z \"$want\" ]; then\n    log_err \"hash_sha256_verify unable to find checksum for '${TARGET}' in '${checksums}'\"\n    return 1\n  fi\n  got=$(hash_sha256 \"$TARGET\")\n  if [ \"$want\" != \"$got\" ]; then\n    log_err \"hash_sha256_verify checksum for '$TARGET' did not verify ${want} vs $got\"\n    return 1\n  fi\n}\ncat /dev/null <<EOF\n------------------------------------------------------------------------\nEnd of functions from https://github.com/client9/shlib\n------------------------------------------------------------------------\nEOF\n\nPROJECT_NAME=\"yaegi\"\nOWNER=traefik\nREPO=\"yaegi\"\nBINARY=yaegi\nFORMAT=tar.gz\nOS=$(uname_os)\nARCH=$(uname_arch)\nPREFIX=\"$OWNER/$REPO\"\n\n# use in logging routines\nlog_prefix() {\n\techo \"$PREFIX\"\n}\nPLATFORM=\"${OS}/${ARCH}\"\nGITHUB_DOWNLOAD=https://github.com/${OWNER}/${REPO}/releases/download\n\nuname_os_check \"$OS\"\nuname_arch_check \"$ARCH\"\n\nparse_args \"$@\"\n\nget_binaries\n\ntag_to_version\n\nadjust_format\n\nadjust_os\n\nadjust_arch\n\nlog_info \"found version: ${VERSION} for ${TAG}/${OS}/${ARCH}\"\n\nNAME=${PROJECT_NAME}_v${VERSION}_${OS}_${ARCH}\nTARBALL=${NAME}.${FORMAT}\nTARBALL_URL=${GITHUB_DOWNLOAD}/${TAG}/${TARBALL}\nCHECKSUM=${PROJECT_NAME}_${VERSION}_checksums.txt\nCHECKSUM_URL=${GITHUB_DOWNLOAD}/${TAG}/${CHECKSUM}\n\n\nexecute\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "interp",
          "type": "tree",
          "content": null
        },
        {
          "name": "stdlib",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}