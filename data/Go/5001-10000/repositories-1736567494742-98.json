{
  "metadata": {
    "timestamp": 1736567494742,
    "page": 98,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "smartystreets/goconvey",
      "stars": 8292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.046875,
          "content": "web/client/resources/js/lib/* linguist-vendored\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.076171875,
          "content": ".DS_Store\nThumbs.db\nexamples/output.json\nweb/client/reports/\n/.idea\n/goconvey\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.2109375,
          "content": "arch:\n  - amd64\n  - ppc64le\n\nlanguage: go\n\ngo:\n  - 1.13.x\n  - 1.14.x\n  - 1.15.x\n  - 1.16.x\n  - master\n\ninstall:\n  - go get -t ./...\n\nbefore_script: ./check_third_party.sh\nscript: go test -short -v ./...\n\nsudo: false\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.322265625,
          "content": "# Subject: GoConvey maintainers wanted\n\nWe'd like to open the project up to additional maintainers who want to move the project forward in a meaningful way.\n\nWe've spent significant time at SmartyStreets building GoConvey and it has perfectly met (and exceeded) all of our initial design specifications. We've used it to great effect. Being so well-matched to our development workflows at SmartyStreets, we haven't had a need to hack on it lately. This had been frustrating to many in the community who have ideas for the project and would like to see new features released (and some old bugs fixed). The release of Go 1.5 and the new vendoring experiment has been a source of confusion and hassle for those who have already upgraded and find that GoConvey needs to be brought up to speed.\n\nGoConvey is a popular 2-pronged, open-source github project (1,600+ stargazers, 100+ forks):\n\n- A package you import in your test code that allows you to write BDD-style tests.\n- An executable that runs a local web server which displays auto-updating test results in a web browser.\n\n----\n\n- https://github.com/smartystreets/goconvey\n- https://github.com/smartystreets/goconvey/wiki\n\n_I should mention that the [assertions package](https://github.com/smartystreets/assertions) imported by the convey package is used by other projects at SmartyStreets and so we will be continuing to maintain that project internally._\n\nWe hope to hear from you soon. Thanks!\n\n---\n\n# Contributing\n\nIn general, the code posted to the [SmartyStreets github organization](https://github.com/smartystreets) is created to solve specific problems at SmartyStreets that are ancillary to our core products in the address verification industry and may or may not be useful to other organizations or developers. Our reason for posting said code isn't necessarily to solicit feedback or contributions from the community but more as a showcase of some of the approaches to solving problems we have adopted.\n\nHaving stated that, we do consider issues raised by other githubbers as well as contributions submitted via pull requests. When submitting such a pull request, please follow these guidelines:\n\n- _Look before you leap:_ If the changes you plan to make are significant, it's in everyone's best interest for you to discuss them with a SmartyStreets team member prior to opening a pull request.\n- _License and ownership:_ If modifying the `LICENSE.md` file, limit your changes to fixing typographical mistakes. Do NOT modify the actual terms in the license or the copyright by **SmartyStreets, LLC**. Code submitted to SmartyStreets projects becomes property of SmartyStreets and must be compatible with the associated license.\n- _Testing:_ If the code you are submitting resides in packages/modules covered by automated tests, be sure to add passing tests that cover your changes and assert expected behavior and state. Submit the additional test cases as part of your change set.\n- _Style:_ Match your approach to **naming** and **formatting** with the surrounding code. Basically, the code you submit shouldn't stand out.\n  - \"Naming\" refers to such constructs as variables, methods, functions, classes, structs, interfaces, packages, modules, directories, files, etc...\n  - \"Formatting\" refers to such constructs as whitespace, horizontal line length, vertical function length, vertical file length, indentation, curly braces, etc...\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.255859375,
          "content": "MIT License\n\nCopyright (c) 2022 Smarty\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nNOTE: Various optional and subordinate components carry their own licensing\nrequirements and restrictions.  Use of those components is subject to the terms\nand conditions outlined the respective license of each component.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.9873046875,
          "content": "# SMARTY DISCLAIMER: Subject to the terms of the associated license agreement, this software is freely available for your use. This software is FREE, AS IN PUPPIES, and is a gift. Enjoy your new responsibility. This means that while we may consider enhancement requests, we may or may not choose to entertain requests at our sole and absolute discretion.\n\nGoConvey is awesome Go testing\n==============================\n\n[![Build Status](https://app.travis-ci.com/smartystreets/goconvey.svg?branch=master)](https://app.travis-ci.com/smartystreets/goconvey)\n[![GoDoc](https://godoc.org/github.com/smartystreets/goconvey?status.svg)](http://godoc.org/github.com/smartystreets/goconvey)\n\n\nWelcome to GoConvey, a yummy Go testing tool for gophers. Works with `go test`. Use it in the terminal or browser according to your viewing pleasure.\n\nGoConvey supports the current versions of Go (see the official Go\n[release policy](https://golang.org/doc/devel/release#policy)). Currently\nthis means Go 1.16 and Go 1.17 are supported.\n\n**Features:**\n\n- Directly integrates with `go test`\n- Fully-automatic web UI (works with native Go tests, too)\n- Huge suite of regression tests\n- Shows test coverage\n- Readable, colorized console output (understandable by any manager, IT or not)\n- Test code generator\n- Desktop notifications (optional)\n- Immediately open problem lines in [Sublime Text](http://www.sublimetext.com) ([some assembly required](https://github.com/asuth/subl-handler))\n\n\nYou can ask questions about how to use GoConvey on [StackOverflow](http://stackoverflow.com/questions/ask?tags=goconvey,go&title=GoConvey%3A%20). Use the tags `go` and `goconvey`.\n\n**Menu:**\n\n- [Installation](#installation)\n- [Quick start](#quick-start)\n- [Documentation](#documentation)\n- [Screenshots](#screenshots)\n- [Contributors](#contributors)\n\n\n\n\nInstallation\n------------\n\n\t$ go install github.com/smartystreets/goconvey\n\n[Quick start](https://github.com/smartystreets/goconvey/wiki#get-going-in-25-seconds)\n-----------\n\nMake a test, for example:\n\n```go\npackage package_name\n\nimport (\n    \"testing\"\n    . \"github.com/smartystreets/goconvey/convey\"\n)\n\nfunc TestSpec(t *testing.T) {\n\n\t// Only pass t into top-level Convey calls\n\tConvey(\"Given some integer with a starting value\", t, func() {\n\t\tx := 1\n\n\t\tConvey(\"When the integer is incremented\", func() {\n\t\t\tx++\n\n\t\t\tConvey(\"The value should be greater by one\", func() {\n\t\t\t\tSo(x, ShouldEqual, 2)\n\t\t\t})\n\t\t})\n\t})\n}\n```\n\n\n#### [In the browser](https://github.com/smartystreets/goconvey/wiki/Web-UI)\n\nStart up the GoConvey web server at your project's path:\n\n\t$ $GOPATH/bin/goconvey\n\nThen watch the test results display in your browser at:\n\n\thttp://localhost:8080\n\n\nIf the browser doesn't open automatically, please click [http://localhost:8080](http://localhost:8080) to open manually.\n\nThere you have it.\n![](http://d79i1fxsrar4t.cloudfront.net/goconvey.co/gc-1-dark.png)\nAs long as GoConvey is running, test results will automatically update in your browser window.\n\n![](http://d79i1fxsrar4t.cloudfront.net/goconvey.co/gc-5-dark.png)\nThe design is responsive, so you can squish the browser real tight if you need to put it beside your code.\n\n\nThe [web UI](https://github.com/smartystreets/goconvey/wiki/Web-UI) supports traditional Go tests, so use it even if you're not using GoConvey tests.\n\n\n\n#### [In the terminal](https://github.com/smartystreets/goconvey/wiki/Execution)\n\nJust do what you do best:\n\n    $ go test\n\nOr if you want the output to include the story:\n\n    $ go test -v\n\n\n[Documentation](https://github.com/smartystreets/goconvey/wiki)\n-----------\n\nCheck out the\n\n- [GoConvey wiki](https://github.com/smartystreets/goconvey/wiki),\n- [![GoDoc](https://godoc.org/github.com/smartystreets/goconvey?status.png)](http://godoc.org/github.com/smartystreets/goconvey)\n- and the *_test.go files scattered throughout this project.\n\nContributors\n----------------------\n\nGoConvey is brought to you by [SmartyStreets](https://github.com/smartystreets) and [several contributors](https://github.com/smartystreets/goconvey/graphs/contributors) (Thanks!).\n"
        },
        {
          "name": "check_third_party.sh",
          "type": "blob",
          "size": 0.28515625,
          "content": "#!/usr/bin/env bash\n\ncd \"$(dirname $(realpath $0))\"\n\nbash ./web/client/resources/js/lib/update.sh\n\nif ! (git diff-files --quiet web/client/resources/js/lib); then\n  echo \"Third party libraries don't match their .url files.\"\n  echo \"Re-run ./web/client/resources/js/lib/update.sh\"\n  exit 1\nfi\n"
        },
        {
          "name": "convey",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.26953125,
          "content": "module github.com/smartystreets/goconvey\n\ngo 1.21.7\n\nrequire (\n\tgithub.com/jtolds/gls v4.20.0+incompatible\n\tgithub.com/smarty/assertions v1.15.1\n\tgolang.org/x/tools v0.18.0\n)\n\nrequire (\n\tgithub.com/gopherjs/gopherjs v1.17.2 // indirect\n\tgolang.org/x/mod v0.15.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.982421875,
          "content": "github.com/gopherjs/gopherjs v1.17.2 h1:fQnZVsXk8uxXIStYb0N4bGk7jeyTalG/wsZjQ25dO0g=\ngithub.com/gopherjs/gopherjs v1.17.2/go.mod h1:pRRIvn/QzFLrKfvEz3qUuEhtE/zLCWfreZ6J5gM2i+k=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/smarty/assertions v1.15.1 h1:812oFiXI+G55vxsFf+8bIZ1ux30qtkdqzKbEFwyX3Tk=\ngithub.com/smarty/assertions v1.15.1/go.mod h1:yABtdzeQs6l1brC900WlRNwj6ZR55d7B+E8C6HtKdec=\ngolang.org/x/mod v0.15.0 h1:SernR4v+D55NyBH2QiEQrlBAnj1ECL6AGrA5+dPaMY8=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sync v0.6.0 h1:5BMeUDZ7vkXGfEr1x9B4bRcTH4lpkTkpdh0T/J+qjbQ=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/tools v0.18.0 h1:k8NLag8AGHnn+PHbl7g43CtqZAwG60vZkLqgyZgIHgQ=\ngolang.org/x/tools v0.18.0/go.mod h1:GL7B4CwcLLeo59yx/9UWWuNOW1n3VZ4f5axWfML7Lcg=\n"
        },
        {
          "name": "goconvey.go",
          "type": "blob",
          "size": 9.80859375,
          "content": "// This executable provides an HTTP server that watches for file system changes\n// to .go files within the working directory (and all nested go packages).\n// Navigating to the configured host and port in a web browser will display the\n// latest results of running `go test` in each go package.\npackage main\n\nimport (\n\t\"context\"\n\t\"embed\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/fs\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"os/signal\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"runtime/debug\"\n\t\"strings\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"golang.org/x/tools/go/packages\"\n\n\t\"github.com/smartystreets/goconvey/web/server/api\"\n\t\"github.com/smartystreets/goconvey/web/server/contract\"\n\t\"github.com/smartystreets/goconvey/web/server/executor\"\n\t\"github.com/smartystreets/goconvey/web/server/messaging\"\n\t\"github.com/smartystreets/goconvey/web/server/parser\"\n\t\"github.com/smartystreets/goconvey/web/server/system\"\n\t\"github.com/smartystreets/goconvey/web/server/watch\"\n)\n\nfunc init() {\n\tflag.IntVar(&port, \"port\", 8080, \"The port at which to serve http.\")\n\tflag.StringVar(&host, \"host\", \"127.0.0.1\", \"The host at which to serve http.\")\n\tflag.DurationVar(&nap, \"poll\", quarterSecond, \"The interval to wait between polling the file system for changes.\")\n\tflag.IntVar(&parallelPackages, \"packages\", 10, \"The number of packages to test in parallel. Higher == faster but more costly in terms of computing.\")\n\tflag.StringVar(&gobin, \"gobin\", \"go\", \"The path to the 'go' binary (default: search on the PATH).\")\n\tflag.BoolVar(&cover, \"cover\", true, \"Enable package-level coverage statistics.\")\n\tflag.IntVar(&depth, \"depth\", -1, \"The directory scanning depth. If -1, scan infinitely deep directory structures. 0: scan working directory. 1+: Scan into nested directories, limited to value.\")\n\tflag.StringVar(&timeout, \"timeout\", \"0\", \"The test execution timeout if none is specified in the *.goconvey file (default is '0', which is the same as not providing this option).\")\n\tflag.StringVar(&watchedSuffixes, \"watchedSuffixes\", \".go\", \"A comma separated list of file suffixes to watch for modifications.\")\n\tflag.StringVar(&excludedDirs, \"excludedDirs\", \"vendor,node_modules\", \"A comma separated list of directories that will be excluded from being watched.\")\n\tflag.StringVar(&workDir, \"workDir\", \"\", \"set goconvey working directory (default current directory).\")\n\tflag.BoolVar(&autoLaunchBrowser, \"launchBrowser\", true, \"toggle auto launching of browser.\")\n\tflag.BoolVar(&leakTemp, \"leakTemp\", false, \"leak temp dir with coverage reports.\")\n\n\tlog.SetOutput(os.Stdout)\n\tlog.SetFlags(log.LstdFlags | log.Lshortfile)\n}\n\nfunc main() {\n\tflag.Parse()\n\n\tprintHeader()\n\n\ttmpDir, err := ioutil.TempDir(\"\", \"*.goconvey\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treports := filepath.Join(tmpDir, \"coverage_out\")\n\tif err := os.Mkdir(reports, 0700); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif leakTemp {\n\t\tlog.Printf(\"leaking temporary directory %q\\n\", tmpDir)\n\t} else {\n\t\tdefer func() {\n\t\t\tif err := os.RemoveAll(tmpDir); err != nil {\n\t\t\t\tlog.Printf(\"failed to clean temporary directory %q: %s\\n\", tmpDir, err)\n\t\t\t}\n\t\t}()\n\t}\n\n\tdone := make(chan os.Signal)\n\tsignal.Notify(done, os.Interrupt, syscall.SIGTERM, syscall.SIGINT)\n\n\tworking := getWorkDir()\n\tshell := system.NewShell(gobin, reports, cover, timeout)\n\n\twatcherInput := make(chan messaging.WatcherCommand)\n\twatcherOutput := make(chan messaging.Folders)\n\texcludedDirItems := strings.Split(excludedDirs, `,`)\n\twatcher := watch.NewWatcher(working, depth, nap, watcherInput, watcherOutput, watchedSuffixes, excludedDirItems)\n\n\tparser := parser.NewParser(parser.ParsePackageResults)\n\ttester := executor.NewConcurrentTester(shell)\n\ttester.SetBatchSize(parallelPackages)\n\n\tlongpollChan := make(chan chan string)\n\texecutor := executor.NewExecutor(tester, parser, longpollChan)\n\tserver := api.NewHTTPServer(working, watcherInput, executor, longpollChan)\n\tlistener := createListener()\n\tgo runTestOnUpdates(watcherOutput, executor, server)\n\tgo watcher.Listen()\n\tif autoLaunchBrowser {\n\t\tgo launchBrowser(listener.Addr().String())\n\t}\n\tsrv := serveHTTP(reports, server, listener)\n\n\t<-done\n\tlog.Println(\"shutting down\")\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err := srv.Shutdown(ctx); err != nil {\n\t\tlog.Printf(\"failed to shutdown: %s\\n\", err)\n\t}\n}\n\nfunc printHeader() {\n\tlog.Println(\"GoConvey server: \")\n\tserverVersion := \"<unknown>\"\n\tif binfo, ok := debug.ReadBuildInfo(); ok {\n\t\tserverVersion = binfo.Main.Version\n\t}\n\tlog.Println(\"  version:\", serverVersion)\n\tlog.Println(\"  host:\", host)\n\tlog.Println(\"  port:\", port)\n\tlog.Println(\"  poll:\", nap)\n\tlog.Println(\"  cover:\", cover)\n\tlog.Println()\n}\n\nfunc browserCmd() (string, bool) {\n\tbrowser := map[string]string{\n\t\t\"darwin\":  \"open\",\n\t\t\"linux\":   \"xdg-open\",\n\t\t\"windows\": \"start\",\n\t}\n\tcmd, ok := browser[runtime.GOOS]\n\treturn cmd, ok\n}\n\nfunc launchBrowser(addr string) {\n\tbrowser, ok := browserCmd()\n\tif !ok {\n\t\tlog.Printf(\"Skipped launching browser for this OS: %s\", runtime.GOOS)\n\t\treturn\n\t}\n\n\tlog.Printf(\"Launching browser on %s\", addr)\n\turl := fmt.Sprintf(\"http://%s\", addr)\n\tcmd := exec.Command(browser, url)\n\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tlog.Println(string(output))\n}\n\nfunc runTestOnUpdates(queue chan messaging.Folders, executor contract.Executor, server contract.Server) {\n\tfor update := range queue {\n\t\tlog.Println(\"Received request from watcher to execute tests...\")\n\t\tpackages := extractPackages(update)\n\t\toutput := executor.ExecuteTests(packages)\n\t\troot := extractRoot(update, packages)\n\t\tserver.ReceiveUpdate(root, output)\n\t}\n}\n\nfunc extractPackages(folderList messaging.Folders) []*contract.Package {\n\tpackageList := []*contract.Package{}\n\tfor _, folder := range folderList {\n\t\tif isInsideTestdata(folder) {\n\t\t\tcontinue\n\t\t}\n\t\thasImportCycle := testFilesImportTheirOwnPackage(folder.Path)\n\t\tpackageName := resolvePackageName(folder.Path)\n\t\tpackageList = append(\n\t\t\tpackageList,\n\t\t\tcontract.NewPackage(folder, packageName, hasImportCycle),\n\t\t)\n\t}\n\treturn packageList\n}\n\n// For packages that operate on Go source code files, such as Go tooling, it is\n// important to have a location that will not be considered part of package\n// source to store those files. The official Go tooling selected the testdata\n// folder for this purpose, so we need to ignore folders inside testdata.\nfunc isInsideTestdata(folder *messaging.Folder) bool {\n\trelativePath, err := filepath.Rel(folder.Root, folder.Path)\n\tif err != nil {\n\t\t// There should never be a folder that's not inside the root, but if\n\t\t// there is, we can presumably count it as outside a testdata folder as\n\t\t// well\n\t\treturn false\n\t}\n\n\tfor _, directory := range strings.Split(filepath.ToSlash(relativePath), \"/\") {\n\t\tif directory == \"testdata\" {\n\t\t\treturn true\n\t\t}\n\t}\n\n\treturn false\n}\n\nfunc extractRoot(folderList messaging.Folders, packageList []*contract.Package) string {\n\tpath := packageList[0].Path\n\tfolder := folderList[path]\n\treturn folder.Root\n}\n\nfunc createListener() net.Listener {\n\tl, err := net.Listen(\"tcp\", fmt.Sprintf(\"%s:%d\", host, port))\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\tif l == nil {\n\t\tos.Exit(1)\n\t}\n\treturn l\n}\n\n//go:embed web/client\nvar static embed.FS\n\nfunc serveHTTP(reports string, server contract.Server, listener net.Listener) *http.Server {\n\twebclient, err := fs.Sub(static, \"web/client\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\thttp.Handle(\"/\", http.FileServer(http.FS(webclient)))\n\n\thttp.HandleFunc(\"/watch\", server.Watch)\n\thttp.HandleFunc(\"/ignore\", server.Ignore)\n\thttp.HandleFunc(\"/reinstate\", server.Reinstate)\n\thttp.HandleFunc(\"/latest\", server.Results)\n\thttp.HandleFunc(\"/execute\", server.Execute)\n\thttp.HandleFunc(\"/status\", server.Status)\n\thttp.HandleFunc(\"/status/poll\", server.LongPollStatus)\n\thttp.HandleFunc(\"/pause\", server.TogglePause)\n\n\thttp.Handle(\"/reports/\", http.StripPrefix(\"/reports/\", http.FileServer(http.Dir(reports))))\n\n\tlog.Printf(\"Serving HTTP at: http://%s\\n\", listener.Addr())\n\tret := &http.Server{}\n\tgo func() {\n\t\terr := ret.Serve(listener)\n\t\tif err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}()\n\treturn ret\n}\n\nfunc exists(path string) (bool, error) {\n\t_, err := os.Stat(path)\n\tif err == nil {\n\t\treturn true, nil\n\t}\n\tif os.IsNotExist(err) {\n\t\treturn false, nil\n\t}\n\treturn false, err\n}\n\nfunc getWorkDir() string {\n\tworking := \"\"\n\tvar err error\n\tif workDir != \"\" {\n\t\tworking = workDir\n\t} else {\n\t\tworking, err = os.Getwd()\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t}\n\tresult, err := exists(working)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif !result {\n\t\tlog.Fatalf(\"Path:%s does not exists\", working)\n\t}\n\treturn working\n}\n\nvar (\n\tport              int\n\thost              string\n\tgobin             string\n\tnap               time.Duration\n\tparallelPackages  int\n\tcover             bool\n\tdepth             int\n\ttimeout           string\n\twatchedSuffixes   string\n\texcludedDirs      string\n\tautoLaunchBrowser bool\n\tleakTemp          bool\n\n\tquarterSecond = time.Millisecond * 250\n\tworkDir       string\n)\n\nconst (\n\tseparator = string(filepath.Separator)\n\tendGoPath = separator + \"src\" + separator\n)\n\n// This method exists because of a bug in the go cover tool that\n// causes an infinite loop when you try to run `go test -cover`\n// on a package that has an import cycle defined in one of it's\n// test files. Yuck.\nfunc testFilesImportTheirOwnPackage(packagePath string) bool {\n\tmeta, err := packages.Load(\n\t\t&packages.Config{\n\t\t\tMode:  packages.NeedName | packages.NeedImports,\n\t\t\tTests: true,\n\t\t},\n\t\tpackagePath,\n\t)\n\tif err != nil {\n\t\treturn false\n\t}\n\n\ttestPackageID := fmt.Sprintf(\"%s [%s.test]\", meta[0], meta[0])\n\n\tfor _, testPackage := range meta[1:] {\n\t\tif testPackage.ID != testPackageID {\n\t\t\tcontinue\n\t\t}\n\n\t\tfor dependency := range testPackage.Imports {\n\t\t\tif dependency == meta[0].PkgPath {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\treturn false\n}\n\nfunc resolvePackageName(path string) string {\n\tpkg, err := packages.Load(\n\t\t&packages.Config{\n\t\t\tMode: packages.NeedName,\n\t\t},\n\t\tpath,\n\t)\n\tif err == nil {\n\t\treturn pkg[0].PkgPath\n\t}\n\n\tnameArr := strings.Split(path, endGoPath)\n\treturn nameArr[len(nameArr)-1]\n}\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}