{
  "metadata": {
    "timestamp": 1736567467477,
    "page": 73,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "99designs/aws-vault",
      "stars": 8580,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "/aws-vault\n/aws-vault-*\n/SHA256SUMS\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.416015625,
          "content": "linters:\n  enable:\n    - bodyclose\n    - contextcheck\n    - depguard\n    - durationcheck\n    - dupl\n    - errchkjson\n    - errname\n    - exhaustive\n    - exportloopref\n    - gofmt\n    - goimports\n    - makezero\n    - misspell\n    - nakedret\n    - nilerr\n    - nilnil\n    - noctx\n    - prealloc\n    - revive\n    # - rowserrcheck\n    - thelper\n    - tparallel\n    - unconvert\n    - unparam\n    # - wastedassign\n    - whitespace\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 99designs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.9228515625,
          "content": "VERSION=$(shell git describe --tags --candidates=1 --dirty)\nBUILD_FLAGS=-ldflags=\"-X main.Version=$(VERSION)\" -trimpath\nCERT_ID ?= Developer ID Application: 99designs Inc (NRM9HVJ62Z)\nSRC=$(shell find . -name '*.go') go.mod\nINSTALL_DIR ?= ~/bin\n.PHONY: binaries clean release install\n\nifeq ($(shell uname), Darwin)\naws-vault: $(SRC)\n\tgo build -ldflags=\"-X main.Version=$(VERSION)\" -o $@ .\n\tcodesign --options runtime --timestamp --sign \"$(CERT_ID)\" $@\nelse\naws-vault: $(SRC)\n\tgo build -ldflags=\"-X main.Version=$(VERSION)\" -o $@ .\nendif\n\ninstall: aws-vault\n\tmkdir -p $(INSTALL_DIR)\n\trm -f $(INSTALL_DIR)/aws-vault\n\tcp -a ./aws-vault $(INSTALL_DIR)/aws-vault\n\nbinaries: aws-vault-linux-amd64 aws-vault-linux-arm64 aws-vault-linux-ppc64le aws-vault-linux-arm7 aws-vault-darwin-amd64 aws-vault-darwin-arm64 aws-vault-windows-386.exe aws-vault-windows-arm64.exe aws-vault-freebsd-amd64\ndmgs: aws-vault-darwin-amd64.dmg aws-vault-darwin-arm64.dmg\n\nclean:\n\trm -f ./aws-vault ./aws-vault-*-* ./SHA256SUMS\n\nrelease: binaries dmgs SHA256SUMS\n\n\t@echo \"\\nTo create a new release run:\\n\\n    gh release create --title $(VERSION) $(VERSION) \\\n\taws-vault-darwin-amd64.dmg \\\n\taws-vault-darwin-arm64.dmg \\\n\taws-vault-freebsd-amd64 \\\n\taws-vault-linux-amd64 \\\n\taws-vault-linux-arm64 \\\n\taws-vault-linux-arm7 \\\n\taws-vault-linux-ppc64le \\\n\taws-vault-windows-386.exe \\\n\taws-vault-windows-arm64.exe \\\n\tSHA256SUMS\\n\"\n\n\t@echo \"\\nTo update homebrew-cask run:\\n\\n    brew bump-cask-pr --version $(shell echo $(VERSION) | sed 's/v\\(.*\\)/\\1/') aws-vault\\n\"\n\naws-vault-darwin-amd64: $(SRC)\n\tGOOS=darwin GOARCH=amd64 CGO_ENABLED=1 SDKROOT=$(shell xcrun --sdk macosx --show-sdk-path) go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-darwin-arm64: $(SRC)\n\tGOOS=darwin GOARCH=arm64 CGO_ENABLED=1 SDKROOT=$(shell xcrun --sdk macosx --show-sdk-path) go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-freebsd-amd64: $(SRC)\n\tGOOS=freebsd GOARCH=amd64 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-linux-amd64: $(SRC)\n\tGOOS=linux GOARCH=amd64 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-linux-arm64: $(SRC)\n\tGOOS=linux GOARCH=arm64 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-linux-ppc64le: $(SRC)\n\tGOOS=linux GOARCH=ppc64le go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-linux-arm7: $(SRC)\n\tGOOS=linux GOARCH=arm GOARM=7 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-windows-386.exe: $(SRC)\n\tGOOS=windows GOARCH=386 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-windows-arm64.exe: $(SRC)\n\tGOOS=windows GOARCH=arm64 go build $(BUILD_FLAGS) -o $@ .\n\naws-vault-darwin-amd64.dmg: aws-vault-darwin-amd64\n\t./bin/create-dmg aws-vault-darwin-amd64 $@\n\naws-vault-darwin-arm64.dmg: aws-vault-darwin-arm64\n\t./bin/create-dmg aws-vault-darwin-arm64 $@\n\nSHA256SUMS: binaries dmgs\n\tshasum -a 256 \\\n\t  aws-vault-darwin-amd64.dmg \\\n\t  aws-vault-darwin-arm64.dmg \\\n\t  aws-vault-freebsd-amd64 \\\n\t  aws-vault-linux-amd64 \\\n\t  aws-vault-linux-arm64 \\\n\t  aws-vault-linux-arm7 \\\n\t  aws-vault-linux-ppc64le \\\n\t  aws-vault-windows-386.exe \\\n\t  aws-vault-windows-arm64.exe \\\n\t    > $@\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4423828125,
          "content": "# AWS Vault\n\n[![Downloads](https://img.shields.io/github/downloads/99designs/aws-vault/total.svg)](https://github.com/99designs/aws-vault/releases)\n[![Continuous Integration](https://github.com/99designs/aws-vault/workflows/Continuous%20Integration/badge.svg)](https://github.com/99designs/aws-vault/actions)\n\nAWS Vault is a tool to securely store and access AWS credentials in a development environment.\n\nAWS Vault stores IAM credentials in your operating system's secure keystore and then generates temporary credentials from those to expose to your shell and applications. It's designed to be complementary to the AWS CLI tools, and is aware of your [profiles and configuration in `~/.aws/config`](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files).\n\nCheck out the [announcement blog post](https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/) for more details.\n\n## Installing\n\nYou can install AWS Vault:\n- by downloading the [latest release](https://github.com/99designs/aws-vault/releases/latest)\n- on macOS with [Homebrew Cask](https://formulae.brew.sh/cask/aws-vault): `brew install --cask aws-vault`\n- on macOS with [MacPorts](https://ports.macports.org/port/aws-vault/summary): `port install aws-vault`\n- on Windows with [Chocolatey](https://chocolatey.org/packages/aws-vault): `choco install aws-vault`\n- on Windows with [Scoop](https://scoop.sh/): `scoop install aws-vault`\n- on Linux with [Homebrew on Linux](https://formulae.brew.sh/formula/aws-vault): `brew install aws-vault`\n- on [Arch Linux](https://www.archlinux.org/packages/community/x86_64/aws-vault/): `pacman -S aws-vault`\n- on [Gentoo Linux](https://github.com/gentoo/guru/tree/master/app-admin/aws-vault): `emerge --ask app-admin/aws-vault` ([enable Guru first](https://wiki.gentoo.org/wiki/Project:GURU/Information_for_End_Users))\n- on [FreeBSD](https://www.freshports.org/security/aws-vault/): `pkg install aws-vault`\n- on [OpenSUSE](https://software.opensuse.org/package/aws-vault): enable devel:languages:go repo then `zypper install aws-vault`\n- with [Nix](https://search.nixos.org/packages?show=aws-vault&query=aws-vault): `nix-env -i aws-vault`\n- with [asdf-vm](https://github.com/karancode/asdf-aws-vault): `asdf plugin-add aws-vault https://github.com/karancode/asdf-aws-vault.git && asdf install aws-vault <version>`\n\n## Documentation\n\nConfig, usage, tips and tricks are available in the [USAGE.md](./USAGE.md) file.\n\n## Vaulting Backends\n\nThe supported vaulting backends are:\n\n* [macOS Keychain](https://support.apple.com/en-au/guide/keychain-access/welcome/mac)\n* [Windows Credential Manager](https://support.microsoft.com/en-au/help/4026814/windows-accessing-credential-manager)\n* Secret Service ([Gnome Keyring](https://wiki.gnome.org/Projects/GnomeKeyring), [KWallet](https://kde.org/applications/system/org.kde.kwalletmanager5))\n* [KWallet](https://kde.org/applications/system/org.kde.kwalletmanager5)\n* [Pass](https://www.passwordstore.org/)\n* Encrypted file\n\nUse the `--backend` flag or `AWS_VAULT_BACKEND` environment variable to specify.\n\n## Quick start\n\n```shell\n# Store AWS credentials for the \"jonsmith\" profile\n$ aws-vault add jonsmith\nEnter Access Key Id: ABDCDEFDASDASF\nEnter Secret Key: %%%\n\n# Execute a command (using temporary credentials)\n$ aws-vault exec jonsmith -- aws s3 ls\nbucket_1\nbucket_2\n\n# open a browser window and login to the AWS Console\n$ aws-vault login jonsmith\n\n# List credentials\n$ aws-vault list\nProfile                  Credentials              Sessions\n=======                  ===========              ========\njonsmith                 jonsmith                 -\n\n# Start a subshell with temporary credentials\n$ aws-vault exec jonsmith\nStarting subshell /bin/zsh, use `exit` to exit the subshell\n$ aws s3 ls\nbucket_1\nbucket_2\n```\n\n## How it works\n\n`aws-vault` uses Amazon's STS service to generate [temporary credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html) via the `GetSessionToken` or `AssumeRole` API calls. These expire in a short period of time, so the risk of leaking credentials is reduced.\n\nAWS Vault then exposes the temporary credentials to the sub-process in one of two ways\n\n1. **Environment variables** are written to the sub-process. Notice in the below example how the AWS credentials get written out\n   ```shell\n   $ aws-vault exec jonsmith -- env | grep AWS\n   AWS_VAULT=jonsmith\n   AWS_DEFAULT_REGION=us-east-1\n   AWS_REGION=us-east-1\n   AWS_ACCESS_KEY_ID=%%%\n   AWS_SECRET_ACCESS_KEY=%%%\n   AWS_SESSION_TOKEN=%%%\n   AWS_CREDENTIAL_EXPIRATION=2020-04-16T11:16:27Z\n   ```\n2. **Local metadata server** is started. This approach has the advantage that anything that uses Amazon's SDKs will automatically refresh credentials as needed, so session times can be as short as possible.\n   ```shell\n   $ aws-vault exec --server jonsmith -- env | grep AWS\n   AWS_VAULT=jonsmith\n   AWS_DEFAULT_REGION=us-east-1\n   AWS_REGION=us-east-1\n   AWS_CONTAINER_CREDENTIALS_FULL_URI=%%%\n   AWS_CONTAINER_AUTHORIZATION_TOKEN=%%%\n   ```\n\nThe default is to use environment variables, but you can opt-in to the local instance metadata server with the `--server` flag on the `exec` command.\n\n## Roles and MFA\n\n[Best-practice](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#delegate-using-roles) is to [create Roles to delegate permissions](https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html). For security, you should also require that users provide a one-time key generated from a multi-factor authentication (MFA) device.\n\nFirst you'll need to create the users and roles in IAM, as well as [setup an MFA device](https://docs.aws.amazon.com/IAM/latest/UserGuide/GenerateMFAConfigAccount.html). You can then [set up IAM roles to enforce MFA](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html#cli-configure-role-mfa).\n\nHere's an example configuration using roles and MFA:\n\n```ini\n[default]\nregion = us-east-1\n\n[profile jonsmith]\nmfa_serial = arn:aws:iam::111111111111:mfa/jonsmith\n\n[profile foo-readonly]\nsource_profile = jonsmith\nrole_arn = arn:aws:iam::22222222222:role/ReadOnly\n\n[profile foo-admin]\nsource_profile = jonsmith\nrole_arn = arn:aws:iam::22222222222:role/Administrator\nmfa_serial = arn:aws:iam::111111111111:mfa/jonsmith\n\n[profile bar-role1]\nsource_profile = jonsmith\nrole_arn = arn:aws:iam::333333333333:role/Role1\nmfa_serial = arn:aws:iam::111111111111:mfa/jonsmith\n\n[profile bar-role2]\nsource_profile = bar-role1\nrole_arn = arn:aws:iam::333333333333:role/Role2\nmfa_serial = arn:aws:iam::111111111111:mfa/jonsmith\n```\n\nHere's what you can expect from aws-vault\n\n| Command                                  | Credentials                 | Cached        | MFA |\n|------------------------------------------|-----------------------------|---------------|-----|\n| `aws-vault exec jonsmith --no-session`   | Long-term credentials       | No            | No  |\n| `aws-vault exec jonsmith`                | session-token               | session-token | Yes |\n| `aws-vault exec foo-readonly`            | role                        | No            | No  |\n| `aws-vault exec foo-admin`               | session-token + role        | session-token | Yes |\n| `aws-vault exec foo-admin --duration=2h` | role                        | role          | Yes |\n| `aws-vault exec bar-role2`               | session-token + role + role | session-token | Yes |\n| `aws-vault exec bar-role2 --no-session`  | role + role                 | role          | Yes |\n\n## Development\n\nThe [macOS release builds](https://github.com/99designs/aws-vault/releases) are code-signed to avoid extra prompts in Keychain. You can verify this with:\n```shell\n$ codesign --verify --verbose $(which aws-vault)\n```\n\nIf you are developing or compiling the aws-vault binary yourself, you can [generate a self-signed certificate](https://support.apple.com/en-au/guide/keychain-access/kyca8916/mac) by accessing Keychain Access > Certificate Assistant > Create Certificate -> Certificate Type: Code Signing. You can then sign your binary with:\n```shell\n$ go build .\n$ codesign --sign <Name of certificate created above> ./aws-vault\n```\n\n## References and Inspiration\n\n * https://github.com/pda/aws-keychain\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html\n * https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html#create-iam-users\n * https://github.com/makethunder/awsudo\n * https://github.com/AdRoll/hologram\n * https://github.com/realestate-com-au/credulous\n * https://github.com/dump247/aws-mock-metadata\n * https://boto.readthedocs.org/en/latest/boto_config_tut.html\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 35.8837890625,
          "content": "# Usage\n\n- [Usage](#usage)\n  - [Getting Help](#getting-help)\n  - [Typical use-cases for aws-vault](#typical-use-cases-for-aws-vault)\n    - [Use-case 1: aws-vault is the executor and provides the environment](#use-case-1-aws-vault-is-the-executor-and-provides-the-environment)\n    - [Use-case 2: aws-vault is a \"master credentials vault\" for AWS SDK](#use-case-2-aws-vault-is-a-master-credentials-vault-for-aws-sdk)\n    - [Use-case 3: aws-vault is a \"MFA session cache\" for AWS SDK](#use-case-3-aws-vault-is-a-mfa-session-cache-for-aws-sdk)\n    - [Use-case 4: aws-vault caches alternative credential sources](#use-case-4-aws-vault-caches-alternative-credential-sources)\n  - [Config](#config)\n    - [AWS config file](#aws-config-file)\n      - [`include_profile`](#include_profile)\n      - [`session_tags` and `transitive_session_tags`](#session_tags-and-transitive_session_tags)\n      - [`source_identity`](#source_identity)\n      - [`mfa_process`](#mfa_process)\n    - [Environment variables](#environment-variables)\n  - [Backends](#backends)\n    - [Keychain](#keychain)\n  - [Managing credentials](#managing-credentials)\n    - [Using multiple profiles](#using-multiple-profiles)\n    - [Listing profiles and credentials](#listing-profiles-and-credentials)\n    - [Removing credentials](#removing-credentials)\n    - [Rotating credentials](#rotating-credentials)\n  - [Managing Sessions](#managing-sessions)\n    - [Executing a command](#executing-a-command)\n    - [Logging into AWS console](#logging-into-aws-console)\n    - [Removing stored sessions](#removing-stored-sessions)\n    - [Using --no-session](#using---no-session)\n    - [Session duration](#session-duration)\n    - [Using `--server`](#using---server)\n      - [`--ec2-server`](#--ec2-server)\n      - [`--ecs-server`](#--ecs-server)\n    - [Temporary credentials limitations with STS, IAM](#temporary-credentials-limitations-with-sts-iam)\n  - [MFA](#mfa)\n    - [Gotchas with MFA config](#gotchas-with-mfa-config)\n  - [Single Sign On (SSO)](#single-sign-on-sso)\n  - [Assuming roles with web identities](#assuming-roles-with-web-identities)\n  - [Using `credential_process`](#using-credential_process)\n    - [Invoking `aws-vault` via `credential_process`](#invoking-aws-vault-via-credential_process)\n    - [Invoking `credential_process` via `aws-vault`](#invoking-credential_process-via-aws-vault)\n  - [Using a Yubikey](#using-a-yubikey)\n    - [Prerequisites](#prerequisites)\n    - [Setup](#setup)\n    - [Usage](#usage-1)\n  - [Shell completion](#shell-completion)\n  - [Desktop apps](#desktop-apps)\n  - [Docker](#docker)\n\n\n## Getting Help\n\nContext-sensitive help is available for every command in `aws-vault`.\n\n```shell\n# Show general help about aws-vault\n$ aws-vault --help\n\n# Show longer help about all options in aws-vault\n$ aws-vault --help-long\n\n# Show the most detailed information about the exec command\n$ aws-vault exec --help\n```\n\n## Typical use-cases for aws-vault\n\nThere are a few different ways aws-vault can be used\n\n### Use-case 1: aws-vault is the executor and provides the environment\n\nUse aws-vault exclusively as a command executor, where aws-vault provides the environment and runs a command.\n\n```ini\n; master creds added with 'aws-vault add my_profile_master'\n[profile my_profile_master]\n\n[profile my_profile_role]\nsource_profile=my_profile_master\nrole_arn=xxx\n```\n\n```bash\naws-vault exec my_profile_master ./my-command   # success, uses sts session generated by aws-vault\naws-vault exec my_profile_role ./my-command     # success, uses role creds generated by aws-vault\n\nAWS_PROFILE=my_profile_master ./my-command      # Not expected to be functional\nAWS_PROFILE=my_profile_role ./my-command        # Not expected to be functional\n```\n\nIn this scenario, the profile name and aws config is used exclusively by aws-vault, which provides the environment for the command to run in.\n\nThis is a very unix-y and 12-factor approach. It's the original and the primary use-case of aws-vault - it's why `aws-vault exec` exists.\n\n\n### Use-case 2: aws-vault is a \"master credentials vault\" for AWS SDK\n\naws-vault can be used in `credential_process` in the AWS config to provide master creds. This is more in-line with the AWS SDK way of approaching the problem via `credential_process` and `AWS_PROFILE`\n\n```ini\n; master creds added with 'aws-vault add my_profile_master'\n[profile my_profile_master]\ncredential_process = aws-vault export --format=json --no-session my_profile_master\n\n[profile my_profile_role]\nsource_profile=my_profile_master\nrole_arn=xxx\n```\n\n```bash\naws-vault exec my_profile_master ./my-command   # success (uses master creds)\naws-vault exec my_profile_role ./my-command     # success (aws-vault role)\n\nAWS_PROFILE=my_profile_master ./my-command      # success (uses credential_process to get aws-vault master creds)\nAWS_PROFILE=my_profile_role ./my-command       # success (SDK role)\n```\n\n### Use-case 3: aws-vault is a \"MFA session cache\" for AWS SDK\n\nVery similar to Use-case 2, aws-vault can be used to cache STS MFA credentials between profiles. This means you are not forced to re-authenticate with MFA every time you switch profiles\n\n```ini\n; master creds added with 'aws-vault add my_profile_master'\n[profile my_profile_master]\nmfa_serial=mmm\ncredential_process = aws-vault export --format=json my_profile_master\n\n[profile my_profile_role]\nsource_profile=my_profile_master\nmfa_serial=mmm\nrole_arn=xxx1\n\n[profile my_profile_role2]\nsource_profile=my_profile_master\nmfa_serial=mmm\nrole_arn=xxx2\n```\n\n```bash\naws-vault exec my_profile_master ./my-command   # success (STS session)\naws-vault exec my_profile_role ./my-command     # success (role)\n\nAWS_PROFILE=my_profile_master ./my-command      # success (uses credential_process to get aws-vault session)\nAWS_PROFILE=my_profile_role ./my-command        # success (uses aws-vault session + SDK role)\n```\n\n\n### Use-case 4: aws-vault caches alternative credential sources\n\naws-vault caches credentials from alternative credential sources like `sso_start_url`, `web_identity_token_process`, `credential_process`\n\n```ini\n[profile my_profile_using_sso]\nsso_start_url = https://mycompany.awsapps.com/start\n\n[profile my_profile_using_process]\ncredential_process = my-custom-creds-cmd\n```\n\n```bash\naws-vault exec my_profile_using_sso ./my-command       # success, uses aws-vault caching\naws-vault exec my_profile_using_process ./my-command   # success, uses aws-vault caching\n\nAWS_PROFILE=my_profile_using_sso ./my-command          # success, no caching\nAWS_PROFILE=my_profile_using_process ./my-command      # success, no caching\n```\n\n\n## Config\n\n### AWS config file\n\naws-vault uses your `~/.aws/config` to load AWS config. This should work identically to the config specified by the [aws-cli docs](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html).\n\n#### `include_profile`\n\n(Note: aws-vault v5 calls this `parent_profile`)\n\nAWS Vault also recognises an extra config variable, `include_profile`, which is not recognised by the aws-cli. This variable allows a profile to load configuration horizontally from another profile.\n\nThis is a flexible mechanism for more complex configurations.\n\nFor example you can use it in \"mixin\" style where you import a common fragment. In this example, the `root`, `order-dev` and `order-staging-admin` profiles include the `region`, `mfa_serial` and `source_profile` configuration from `common`.\n\n```ini\n; The \"common\" profile here operates as a \"config fragment\" rather than a profile\n[profile common]\nregion=eu-west-1\nmfa_serial=arn:aws:iam::123456789:mfa/johnsmith\nsource_profile = root\n\n[profile root]\ninclude_profile = common\n\n[profile order-dev]\ninclude_profile = common\nrole_arn=arn:aws:iam::123456789:role/developers\n\n[profile order-staging-admin]\ninclude_profile = common\nrole_arn=arn:aws:iam::123456789:role/administrators\n```\n\nOr you could use it in \"parent\" style where you conflate the fragment with the profile. In this example the `order-dev` and `order-staging-admin` profiles include the `region`, `mfa_serial` and `source_profile` configuration from `root`, while also using the credentials stored against the `root` profile as the source credentials `source_profile = root`\n```ini\n; The \"root\" profile here operates as a profile, a config fragment as well as a source_profile\n[profile root]\nregion=eu-west-1\nmfa_serial=arn:aws:iam::123456789:mfa/johnsmith\nsource_profile = root\n\n[profile order-dev]\ninclude_profile = root\nrole_arn=arn:aws:iam::123456789:role/developers\n\n[profile order-staging-admin]\ninclude_profile = root\nrole_arn=arn:aws:iam::123456789:role/administrators\n```\n\n#### `session_tags` and `transitive_session_tags`\n\nIt is possible to set [session tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html) when `AssumeRole` is used. Two custom config variables could be defined for that: `session_tags` and `transitive_session_tags`. The former defines a comma separated key=value list of tags and the latter is a comma separated list of tags that should be persisted during role chaining:\n\n```ini\n[profile root]\nregion=eu-west-1\n\n[profile order-dev]\nsource_profile = root\nrole_arn=arn:aws:iam::123456789:role/developers\nsession_tags = key1=value1,key2=value2,key3=value3\ntransitive_session_tags = key1,key2\n```\n\n#### `source_identity`\n\nIt is possible to set [source identity](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html) when `AssumeRole` is used. Custom config variable `source_identity` allows you to set the value.\n\n```ini\n[profile root]\nregion=eu-west-1\n\n[profile order-dev]\nsource_profile = root\nrole_arn=arn:aws:iam::123456789:role/developers\nsource_identity=your_user_name\n```\n\n#### `mfa_process`\nIf you have a method to generate an MFA token, you can use it with `aws-vault` by specifying the `mfa_process` option in a profile of your `~/.aws/config` file. The value of `mfa_process` should be a command that will output the MFA token to stdout.\n\nFor example, to use `pass` to retrieve an MFA token from a password store entry, you could use the following:\n\n```ini\n[profile foo]\nmfa_serial=arn:aws:iam::123456789:mfa/johnsmith\nmfa_process=pass otp my_aws_mfa\n```\n\nOr another example using 1Password\n\n```ini\n[profile foo]\nmfa_serial=arn:aws:iam::123456789:mfa/johnsmith\nmfa_process=op item get my_aws_mfa --otp\n```\n\nWARNING: Use of this option runs against security best practices. It is recommended that you use a dedicated MFA device.\n\n### Environment variables\n\nTo configure the default flag values of `aws-vault` and its subcommands:\n* `AWS_VAULT_BACKEND`: Secret backend to use (see the flag `--backend`)\n* `AWS_VAULT_KEYCHAIN_NAME`: Name of macOS keychain to use (see the flag `--keychain`)\n* `AWS_VAULT_PROMPT`: Prompt driver to use (see the flag `--prompt`)\n* `AWS_VAULT_PASS_PASSWORD_STORE_DIR`: Pass password store directory (see the flag `--pass-dir`)\n* `AWS_VAULT_PASS_CMD`: Name of the pass executable (see the flag `--pass-cmd`)\n* `AWS_VAULT_PASS_PREFIX`: Prefix to prepend to the item path stored in pass (see the flag `--pass-prefix`)\n* `AWS_VAULT_FILE_DIR`: Directory for the \"file\" password store (see the flag `--file-dir`)\n* `AWS_VAULT_FILE_PASSPHRASE`: Password for the \"file\" password store\n* `AWS_CONFIG_FILE`: The location of the AWS config file\n\nTo override the AWS config file (used in the `exec`, `login` and `rotate` subcommands):\n* `AWS_REGION`: The AWS region\n* `AWS_DEFAULT_REGION`: The AWS region, applied only if `AWS_REGION` isn't set\n* `AWS_STS_REGIONAL_ENDPOINTS`: STS endpoint resolution logic, must be \"regional\" or \"legacy\"\n* `AWS_MFA_SERIAL`: The identification number of the MFA device to use\n* `AWS_ROLE_ARN`: Specifies the ARN of an IAM role in the active profile\n* `AWS_ROLE_SESSION_NAME`: Specifies the name to attach to the role session in the active profile\n\nTo override session durations (used in `exec` and `login`):\n* `AWS_SESSION_TOKEN_TTL`: Expiration time for the `GetSessionToken` credentials. Defaults to 1h\n* `AWS_CHAINED_SESSION_TOKEN_TTL`: Expiration time for the `GetSessionToken` credentials when chaining profiles. Defaults to 8h\n* `AWS_ASSUME_ROLE_TTL`: Expiration time for the `AssumeRole` credentials. Defaults to 1h\n* `AWS_FEDERATION_TOKEN_TTL`: Expiration time for the `GetFederationToken` credentials. Defaults to 1h\n* `AWS_MIN_TTL`: The minimum expiration time allowed for a credential. Defaults to 5m\n\nNote that the session durations above expect a unit after the number (e.g. 12h or 43200s).\n\nTo override or set session tagging (used in `exec`):\n* `AWS_SESSION_TAGS`: Comma separated key-value list of tags passed with the `AssumeRole` call, overrides `session_tags` profile config variable\n* `AWS_TRANSITIVE_TAGS`: Comma separated list of transitive tags passed with the `AssumeRole` call, overrides `transitive_session_tags` profile config variable\n\nTo override or set the source identity (used in `exec` and `login`):\n* `AWS_SOURCE_IDENTITY`: Specifies the source identity for assumed role sessions\n\n## Backends\n\nYou can choose among different pluggable secret storage backends. You can set the backend using the `--backend` flag or the `AWS_VAULT_BACKEND` environment variable. Run `aws-vault --help` to see what your `--backend` flag supports.\n\n### Keychain\n\nIf you're looking to configure the amount of time between having to enter your Keychain password for each usage of a particular profile, you can do so through Keychain:\n\n1. Open \"Keychain Access\"\n2. Open the aws-vault keychain. If you do not have \"aws-vault\" in the sidebar of the Keychain app, then you can do \"File -> Add Keychain\" and select the `aws-vault.keychain-db`. This is typically created in `Users/{USER}/Library/Keychains`.\n3. Right click on aws-vault keychain, and select \"Change Settings for Keychain 'aws-vault\"\n4. Update \"Lock after X minutes of inactivity\" to your desired value.\n5. Hit save.\n\n![keychain-image](https://imgur.com/ARkr5Ba.png)\n\n\n## Managing credentials\n\n### Using multiple profiles\n\nIn addition to using IAM roles to assume temporary privileges as described in [README.md](./USAGE.md), aws-vault can also be used with multiple profiles directly. This allows you to use multiple separate AWS accounts that have no relation to one another, such as work and home.\n\n```shell\n# Store AWS credentials for the \"home\" profile\n$ aws-vault add home\nEnter Access Key Id: ABDCDEFDASDASF\nEnter Secret Key: %\n\n# Execute a command using temporary credentials\n$ aws-vault exec home -- aws s3 ls\nbucket_1\nbucket_2\n\n# store credentials for the \"work\" profile\n$ aws-vault add work\nEnter Access Key Id: ABDCDEFDASDASF\nEnter Secret Key: %\n\n# Execute a command using temporary credentials\n$ aws-vault exec work -- aws s3 ls\nanother_bucket\n```\n\nHere is an example `~/.aws/config` file, to help show the configuration. It defines two AWS accounts: \"home\" and \"work\", both of which use MFA. The work account provides two roles, allowing the user to become either profile.\n\n```ini\n[default]\nregion = us-east-1\n\n[profile home]\nmfa_serial = arn:aws:iam::111111111111:mfa/home-account\n\n[profile work]\nmfa_serial = arn:aws:iam::111111111111:mfa/work-account\nrole_arn = arn:aws:iam::111111111111:role/ReadOnly\n\n[profile work-admin]\nrole_arn = arn:aws:iam::111111111111:role/Administrator\nsource_profile = work\n```\n\n### Listing profiles and credentials\n\nYou can use the `aws-vault list` command to list out the defined profiles, and any session associated with them.\n\n```shell\n$ aws-vault list\nProfile                  Credentials              Sessions\n=======                  ===========              ========\nhome                     home\nwork                     work                     1525456570\nwork-read-only           work\nwork-admin               work\n```\n\n### Removing credentials\n\nThe `aws-vault remove` command can be used to remove credentials. It works similarly to the `aws-vault add` command.\n\n```shell\n# Remove AWS credentials for the \"work\" profile\n$ aws-vault remove work\nDelete credentials for profile \"work\"? (y|N) y\nDeleted credentials.\n```\n\n### Rotating credentials\n\nRegularly rotating your access keys is a critical part of credential management. You can do this with the `aws-vault rotate <profile>` command as often as you like. [Restrictions on IAM access](#temporary-credentials-limitations-with-sts-iam) using `GetSessionToken` means you will need to have [configured MFA](#mfa) or use the `--no-session` flag.\n\nThe minimal IAM policy required to rotate your own credentials is:\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"iam:CreateAccessKey\",\n                \"iam:DeleteAccessKey\",\n                \"iam:GetUser\"\n            ],\n            \"Resource\": [\n                \"arn:aws:iam::*:user/${aws:username}\"\n            ]\n        }\n    ]\n}\n```\n\n\n## Managing Sessions\n\n### Executing a command\n\nRunning `aws-vault exec` will run a command with AWS credentials.\n\nWhen using exec, you may find it useful to use the builtin `--` feature in bash, zsh and other POSIX shells. For example\n```shell\naws-vault exec myprofile -- aws s3 ls\n```\nUsing `--` signifies the end of the `aws-vault` options, and allows the shell autocomplete to kick in and offer autocompletions for the proceeding command.\n\nIf you use `exec` without specifying a command, AWS Vault will create a new interactive subshell. Note that when creating an interactive subshell, bash, zsh and other POSIX shells will execute the `~/.bashrc` or `~/.zshrc` file. If you have local variables, functions or aliases (for example your `PS1` prompt), ensure that they are defined in the rc file so they get executed when the subshell begins.\n\n### Logging into AWS console\n\nYou can use the `aws-vault login` command to open a browser window and login to AWS Console for a given account:\n```shell\n$ aws-vault login work\n```\n\nIf you have credentials already available in your environment, aws-vault will use these credentials to sign you in to the AWS console.\n\n```shell\n$ export AWS_ACCESS_KEY_ID=%%%\n$ export AWS_SECRET_ACCESS_KEY=%%%\n$ export AWS_SESSION_TOKEN=%%%\n$ aws-vault login\n```\n\n### Removing stored sessions\n\nIf you want to remove sessions managed by `aws-vault` before they expire, you can do this with `aws-vault clear` command.\n\nYou can also specify a profile to remove sessions for this profile only.\n```shell\naws-vault clear [profile]\n```\n\n### Using --no-session\n\nAWS Vault will typically create temporary credentials using a combination of `GetSessionToken` and `AssumeRole`, depending on the config. The `GetSessionToken` call is made with MFA if available, and the resulting session is cached in the backend vault and can be used to assume roles from different profiles without further MFA prompts.\n\nIf you wish to skip the `GetSessionToken` call, you can use the `--no-session` flag.\n\nHowever, consider that if you use `--no-session` with a profile using IAM credentials and NO `role_arn`, then your IAM credentials will be directly exposed to the terminal/application you are running. This is the opposite of what you are normally trying to achieve by using AWS Vault. You can easily witness that by doing\n```shell\naws-vault exec <iam_user_profile> -- env | grep AWS\n```\nYou'll see an `AWS_ACCESS_KEY_ID` of the form `ASIAxxxxxx` which is a temporary one. Doing\n```shell\naws-vault exec <iam_user_profile> --no-session -- env | grep AWS\n```\nYou'll see your IAM user `AWS_ACCESS_KEY_ID` of the form `AKIAxxxxx` directly exposed, as well as the corresponding `AWS_SECRET_KEY_ID`.\n\n\n### Session duration\n\nIf you try to [assume a role](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html) from a temporary session or another role, AWS considers that as [role chaining](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-role-chaining) and limits your ability to assume the target role to 1h. Trying to use a duration longer than 1h may result in an error:\n```\naws-vault: error: Failed to get credentials for default: ValidationError: The requested DurationSeconds exceeds the MaxSessionDuration set for this role.\n        status code: 400, request id: aa58fa50-4a5e-11e9-9566-293ea5c350ee\n```\n\nFor that reason, AWS Vault will not use `GetSessionToken` if `--duration` or the role's `duration_seconds` is longer than 1h.\n\n### Using `--server`\n\nThere may be scenarios where you'd like to assume a role for a long length of time, or perhaps when using a tool where using temporary sessions on demand is preferable. For example, when using a tool like [Terraform](https://www.terraform.io/), you need to have AWS credentials available to the application for the entire duration of the infrastructure change.\n\nAWS Vault can run a background server to imitate the metadata endpoint that you would have on an EC2 or ECS instance. When your application uses the AWS SDK to locate credentials, it will automatically connect to this server that will issue a new set of temporary credentials (using the same profile as the one the server was started with). This server will continue to generate temporary credentials any time the application requests it.\n\n#### `--ec2-server`\n\nThis approach has the major security drawback that while this `aws-vault` server runs, any application wanting to connect to AWS will be able to do so, using the profile the server was started with. Thanks to `aws-vault`, the credentials are not exposed, but the ability to use them to connect to AWS is!\n\nTo use `--ec2-server`, AWS Vault needs root/administrator privileges in order to bind to the privileged port. AWS Vault runs a minimal proxy as the root user, proxying through to the real aws-vault instance.\n\n#### `--ecs-server`\n\nThe ECS Credential provider binds to a random, ephemeral port and requires an authorization token, which offers the following advantages over the EC2 Metadata provider:\n 1. Does not require root/administrator privileges\n 2. Allows multiple providers simultaneously for discrete processes\n 3. Mitigates the security issues that accompany the EC2 Metadata Service because the address is not well-known and the authorization token is only exposed to the subprocess via environment variables\n\nHowever, this will only work with the AWS SDKs [that support `AWS_CONTAINER_CREDENTIALS_FULL_URI`](https://docs.aws.amazon.com/sdkref/latest/guide/feature-container-credentials.html). The C++ and PHP SDKs do not currently support it.\n\nThe ECS server also responds to requests on `/role-arn/YOUR_ROLE_ARN` with the role credentials, making it usable with  `AWS_CONTAINER_CREDENTIALS_RELATIVE_URI` when combined with a reverse proxy (see the Docker section below).\n\n### Temporary credentials limitations with STS, IAM\n\nWhen using temporary credentials you are restricted from using some STS and IAM APIs (see [here](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html#stsapi_comparison)). The restriction is enforced with `InvalidClientTokenId` error response.\n\n```shell\n$ aws-vault exec <iam_user_profile> -- aws iam get-user\nAn error occurred (InvalidClientTokenId) when calling the GetUser operation: The security token included in the request is invalid\n```\n\nFor restricted IAM operation you can add MFA to the IAM User and update your ~/.aws/config file with [MFA configuration](#mfa). Alternately you may avoid the temporary session entirely by using `--no-session`.\n\n\n## MFA\n\nTo enable MFA for a profile, specify the `mfa_serial` in `~/.aws/config`. You can retrieve the MFA's serial (ARN) in the web console, under IAM > Users > `<User>` > Security Configuration. If you have an account with an MFA associated, but you don't provide the ARN, you are unable to call IAM services, even if you have the correct permissions to do so.\n\nAWS Vault will attempt to re-use a `GetSessionToken` between profiles that share a common `mfa_serial`. In the following example, aws-vault will cache and re-use sessions between role1 and role2. This means you don't have to continually enter MFA codes if the MFA method is the same.\n\n```ini\n[profile tom]\nmfa_serial = arn:aws:iam::111111111111:mfa/tom\n\n[profile role1]\nsource_profile = tom\nrole_arn = arn:aws:iam::22222222222:role/role1\nmfa_serial = arn:aws:iam::111111111111:mfa/tom\n\n[profile role2]\nsource_profile = tom\nrole_arn = arn:aws:iam::33333333333:role/role2\nmfa_serial = arn:aws:iam::111111111111:mfa/tom\n```\n\nBe sure to specify the `mfa_serial` for the source profile (in the above example `tom`) so that aws-vault can match the common `mfa_serial`.\n\nYou can also set the `mfa_serial` with the environment variable `AWS_MFA_SERIAL`.\n\n### Gotchas with MFA config\n\naws-vault v4 would inherit the `mfa_serial` from the `source_profile`. While this was intuitive for some, it made certain configurations difficult to express and is different behaviour to the aws-cli.\n\naws-vault v5 corrected this problem. The `mfa_serial` must be specified for _each_ profile, the same way the aws-cli interprets the configuration. If you wish to avoid specifying the `mfa_serial` for each profile, consider using the `mfa_serial` in the `[default]` section, the `AWS_MFA_SERIAL` environment variable, or [`include_profile`](#include_profile). For example:\n\n```ini\n[profile jon]\nmfa_serial = arn:aws:iam::111111111111:mfa/jon\nsource_profile=jon\n\n[profile role1]\nrole_arn = arn:aws:iam::22222222222:role/role1\ninclude_profile = jon\n\n[profile role2]\nrole_arn = arn:aws:iam::33333333333:role/role2\ninclude_profile = jon\n```\n\n## Single Sign On (SSO)\n\n_AWS IAM Identity Center provides single sign on, and was previously known as AWS SSO._\n\nIf your organization uses [AWS IAM Identity Center](https://aws.amazon.com/iam/identity-center/) for single sign on, AWS Vault provides a method for using the credential information defined by [`aws sso`](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html) from v2 of the AWS CLI. The configuration options are as follows:\n* `sso_session` Name of the `[sso-session]` section in the same file with the common options, or:\n* `sso_start_url` The URL that points to the organization's AWS IAM Identity Center user portal.\n* `sso_region` The AWS Region that contains the AWS IAM Identity Center user portal host. This is separate from, and can be a different region than the default CLI region parameter.\n* `sso_account_id` The AWS account ID that contains the IAM role that you want to use with this profile.\n* `sso_role_name` The name of the Identity Center Permission Group that defines the user's permissions when using this profile.\n\nHere is an example configuration using AWS IAM Identity Center for single sign on.\n\n```ini\n[profile Administrator-123456789012]\nsso_start_url=https://aws-sso-portal.awsapps.com/start\nsso_region=eu-west-1\nsso_account_id=123456789012\nsso_role_name=Administrator\n```\n\n## Assuming roles with web identities\n\nAWS supports assuming roles using [web identity federation and OpenID Connect](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html#cli-configure-role-oidc), including login using Amazon, Google, Facebook or any other OpenID Connect server. The configuration options are as follows:\n* `web_identity_token_file` A file that contains an OpenID Connect identity token. The token is loaded and passed as the `WebIdentityToken` argument of the `AssumeRoleWithWebIdentity` operation.\n* `web_identity_token_process` A command that executes to generate an OpenID Connect identity token. The token written to the command's standard out is passed as the `WebIdentityToken` argument of the `AssumeRoleWithWebIdentity` operation. This is a custom option supported only by `aws-vault`.\n\nAn example configuration using a static token:\n\n```ini\n[profile role1]\nrole_arn = arn:aws:iam::22222222222:role/role1\nweb_identity_token_file = /path/to/token.txt\n```\n\nAn example using a token generated by an external command:\n\n```ini\n[profile role2]\nrole_arn = arn:aws:iam::33333333333:role/role2\nweb_identity_token_process = oidccli raw\n```\n\n## Using `credential_process`\n\nThe [AWS CLI config](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#sourcing-credentials-from-external-processes) supports sourcing credentials directly from an external process, using `credential_process`.\n\n### Invoking `aws-vault` via `credential_process`\n\n```ini\n[profile home]\ncredential_process = aws-vault export --format=json home\n```\n\nIf `mfa_serial` is set, please define the prompt driver (for example `osascript` for macOS), else the prompt will not show up.\n\n```ini\n[profile work]\nmfa_serial = arn:aws:iam::123456789012:mfa/jonsmith\ncredential_process = aws-vault --prompt=osascript export --format=json work\n```\n\nNote that `credential_process` is designed for retrieving master credentials, while aws-vault outputs STS credentials by default. If a role is present, the AWS CLI/SDK uses the master credentials from the `credential_process` to generate STS credentials itself. So depending on your use-case, it might make sense for aws-vault to output master credentials by using a profile without a role and the `--no-session` argument. For example:\n\n```ini\n[profile jon]\ncredential_process = aws-vault export --no-session --format=json jon\n\n[profile work]\nmfa_serial = arn:aws:iam::123456789012:mfa/jonsmith\nrole_arn = arn:aws:iam::33333333333:role/role2\nsource_profile = jon\n```\n\nIf you're using `credential_process` in your config to invoke `aws-vault exec` you should not use `aws-vault exec` on the command line to execute commands directly - the AWS SDK executes `aws-vault` for you.\n\n### Invoking `credential_process` via `aws-vault`\n\nWhen executing a profile via `aws-vault exec` that has `credential_process` set, `aws-vault` will execute the specified command to obtain a credential.  This will allow `aws-vault` to cache credentials obtained via `credential_process`.\n\n## Using a Yubikey\n\nYubikeys can be used with AWS Vault via Yubikey's OATH-TOTP support. TOTP is necessary because FIDO-U2F is unsupported on the AWS CLI and SDKs; even though it's supported on the AWS Console.\n\n### Prerequisites\n 1. [A Yubikey that supports OATH-TOTP](https://support.yubico.com/support/solutions/articles/15000006419-using-your-yubikey-with-authenticator-codes)\n 2. `ykman`, the [YubiKey Manager CLI](https://github.com/Yubico/yubikey-manager) tool.\n\nYou can verify these prerequisites by running `ykman info` and checking `OATH` is enabled.\n\n### Setup\n 1. Log into the AWS web console with your IAM user credentials, and navigate to  _My Security Credentials_\n 2. Under _Multi-factor authentication (MFA)_, click `Manage MFA device` and add a Virtual MFA device\n 3. Instead of showing the QR code, click on `Show secret key` and copy the key.\n 4. On a command line, run:\n    ```shell\n    ykman oath accounts add -t arn:aws:iam::${ACCOUNT_ID}:mfa/${MFA_DEVICE_NAME}\n    ```\n    replacing `${ACCOUNT_ID}` with your AWS account ID and `${MFA_DEVICE_NAME}` with the name you gave to the MFA device. It will prompt you for a base32 text and you can input the key from step 3. Notice the above command uses `-t` which requires you to touch your YubiKey to generate authentication codes.\n 5. Now you have to enter two consecutive MFA codes into the AWS website to assign your key to your AWS login. Just run `ykman oath accounts code arn:aws:iam::${ACCOUNT_ID}:mfa/${MFA_DEVICE_NAME}` to get an authentication code. The codes are re-generated every 30 seconds, so you have to run this command twice with about 30 seconds in between to get two distinct codes. Enter the two codes in the AWS form and click `Assign MFA`.\n\nA script can be found at [contrib/scripts/aws-iam-create-yubikey-mfa.sh](contrib/scripts/aws-iam-create-yubikey-mfa.sh) to automate the process. Note that this script requires your `$MFA_DEVICE_NAME` to be your IAM username as the `aws iam enable-mfa-device` command in the CLI does not yet offer specifying the name. When only one MFA device was allowed per IAM user, the `$MFA_DEVICE_NAME` would always be your IAM username.\n\nIn case of TOTP being out of sync (AWS API doesn't accept MFA codes), a yubikey resync script can be found at [contrib/scripts/aws-iam-resync-yubikey-mfa.sh](contrib/scripts/aws-iam-resync-yubikey-mfa.sh) to resync the yubikey with AWS. As above, this script requires your `$MFA_DEVICE_NAME` to be your IAM username.\n\nNote that each `[profile <name>]` in your `~/.aws/config` only supports one `mfa_serial` entry. If you wish to use multiple Yubikeys, or mix and match MFA devices, you'll need to add a profile for each method.\n\n### Usage\nUsing the `ykman` prompt driver, aws-vault will execute `ykman` to generate tokens for any profile in your `.aws/config` using an `mfa_device`.\n```shell\naws-vault exec --prompt ykman ${AWS_VAULT_PROFILE_USING_MFA} -- aws s3 ls\n```\n\nAn alternative to manually supplying the prompt driver as a CLI argument to `aws-vault` is setting the [`mfa_process`](#mfa_process) parameter in your `.aws/config` for the profiles that should use a YubiKey to generate tokens. Example:\n\n(Note: Remember to swap out the name of the OATH account used in `mfa_process` below with the name you gave it during [YubiKey setup](#setup))\n\n```ini\n[profile jon]\nmfa_serial = arn:aws:iam::123456789012:mfa/jonsmith\nmfa_process = ykman oath accounts code --single arn:aws:iam::123456789012:mfa/jonsmith\n```\n\nFurther config:\n - `AWS_VAULT_PROMPT=ykman`: to avoid specifying `--prompt` each time\n - `YKMAN_OATH_CREDENTIAL_NAME`: to use an alternative ykman credential\n - `AWS_VAULT_YKMAN_VERSION`: to set the major version of the ykman cli being used. Defaults to \"4\"\n - `YKMAN_OATH_DEVICE_SERIAL`: to set the device serial of a specific Yubikey if you have multiple Yubikeys plugged into your computer.\n\n## Shell completion\n\nYou can generate shell completions for\n - bash: `eval \"$(curl -fs https://raw.githubusercontent.com/99designs/aws-vault/master/contrib/completions/bash/aws-vault.bash)\"`\n - zsh: `eval \"$(curl -fs https://raw.githubusercontent.com/99designs/aws-vault/master/contrib/completions/zsh/aws-vault.zsh)\"`\n - fish: `eval \"$(curl -fs https://raw.githubusercontent.com/99designs/aws-vault/master/contrib/completions/fish/aws-vault.fish)\"`\n\nFind the completion scripts at [contrib/completions](contrib/completions).\n\n\n## Desktop apps\n\nYou can use desktop apps with temporary credentials from AWS Vault too! For example on macOS run\n```shell\naws-vault exec --server jonsmith -- open -W -a Lens\n```\n* `--server`: starts the background server so that temporary credentials get refreshed automatically\n* `open -W -a Lens`: run the applications, waiting for it to exit\n\n## Docker\n\nIt's possible for Docker containers to retrieve credentials from aws-vault running on the host.\n\n![Screen Shot 2022-03-03 at 12 16 15 pm](https://user-images.githubusercontent.com/980499/156477380-423f4eb9-f10e-4568-afa8-7fa525a1f3a3.png)\n\nThe ECS server responds to requests on `/role-arn/YOUR_ROLE_ARN` with the role credentials, making it usable with the `AWS_CONTAINER_CREDENTIALS_FULL_URI` or `AWS_CONTAINER_CREDENTIALS_RELATIVE_URI` environment\nvariables. These environment variables are used by the AWS SDKs as part of the [default credential provider chain](https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/credentials.html#credentials-default).\n\nIn particular, this is designed to allow aws-vault to run on your local host while docker images access role credentials dynamically. This is achieved via a reverse-proxy container (started with `aws-vault exec --ecs-server --lazy PROFILE -- docker-compose up ...`) using the default ECS IP address `169.254.170.2`. Docker containers no longer need AWS keys at all - instead they can  specify the role they want to assume with `AWS_CONTAINER_CREDENTIALS_RELATIVE_URI`.\n\nThis use-case is similar to the goal of [amazon-ecs-local-container-endpoints](https://github.com/awslabs/amazon-ecs-local-container-endpoints/blob/mainline/docs/features.md#vend-credentials-to-containers), however the difference here is that the long-lived AWS credentials are getting sourced from your keychain via aws-vault.\n\nTo test it out:\n1. Add a base role to your `~/.aws/config` (replacing with valid values)\n   ```ini\n   [profile base-role]\n   source_profile=myprofile\n   role_arn=arn:aws:iam::222222222222:role/aws-vault-test\n   mfa_serial=arn:aws:iam::222222222222:mfa/<your.aws.username>\n   ```\n2. Start a reverse proxy:\n   ```shell\n   $ cd contrib/_aws-vault-proxy\n   $ aws-vault --debug exec --server --lazy base-role -- docker compose up --build aws-vault-proxy\n   ```\n3. In a new terminal, assume a new role\n   ```shell\n   $ export AWS_CONTAINER_CREDENTIALS_RELATIVE_URI=/role-arn/arn:aws:iam::222222222222:role/another-role-that-can-be-assumed-by-base-role\n   $ docker-compose run testapp\n   testapp $ aws sts get-caller-identity\n   ```\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.6279296875,
          "content": "module github.com/99designs/aws-vault/v7\n\ngo 1.20\n\nrequire (\n\tgithub.com/99designs/keyring v1.2.2\n\tgithub.com/alecthomas/kingpin/v2 v2.3.2\n\tgithub.com/aws/aws-sdk-go-v2 v1.17.7\n\tgithub.com/aws/aws-sdk-go-v2/config v1.18.19\n\tgithub.com/aws/aws-sdk-go-v2/credentials v1.13.18\n\tgithub.com/aws/aws-sdk-go-v2/service/iam v1.19.8\n\tgithub.com/aws/aws-sdk-go-v2/service/sso v1.12.6\n\tgithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6\n\tgithub.com/aws/aws-sdk-go-v2/service/sts v1.18.7\n\tgithub.com/google/go-cmp v0.5.9\n\tgithub.com/mattn/go-isatty v0.0.18\n\tgithub.com/mattn/go-tty v0.0.4\n\tgithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966\n\tgolang.org/x/term v0.6.0\n\tgopkg.in/ini.v1 v1.67.0\n)\n\nrequire (\n\tgithub.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 // indirect\n\tgithub.com/alecthomas/units v0.0.0-20211218093645-b94a6e3cc137 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.32 // indirect\n\tgithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25 // indirect\n\tgithub.com/aws/smithy-go v1.13.5 // indirect\n\tgithub.com/danieljoos/wincred v1.1.2 // indirect\n\tgithub.com/dvsekhvalnov/jose2go v1.5.0 // indirect\n\tgithub.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 // indirect\n\tgithub.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c // indirect\n\tgithub.com/mtibben/percent v0.2.1 // indirect\n\tgithub.com/xhit/go-str2duration/v2 v2.1.0 // indirect\n\tgolang.org/x/sys v0.6.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 8.6220703125,
          "content": "github.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4 h1:/vQbFIOMbk2FiG/kXiLl8BRyzTWDw7gX/Hz7Dd5eDMs=\ngithub.com/99designs/go-keychain v0.0.0-20191008050251-8e49817e8af4/go.mod h1:hN7oaIRCjzsZ2dE+yG5k+rsdt3qcwykqK6HVGcKwsw4=\ngithub.com/99designs/keyring v1.2.2 h1:pZd3neh/EmUzWONb35LxQfvuY7kiSXAq3HQd97+XBn0=\ngithub.com/99designs/keyring v1.2.2/go.mod h1:wes/FrByc8j7lFOAGLGSNEg8f/PaI3cgTBqhFkHUrPk=\ngithub.com/alecthomas/kingpin/v2 v2.3.2 h1:H0aULhgmSzN8xQ3nX1uxtdlTHYoPLu5AhHxWrKI6ocU=\ngithub.com/alecthomas/kingpin/v2 v2.3.2/go.mod h1:0gyi0zQnjuFk8xrkNKamJoyUo382HRL7ATRpFZCw6tE=\ngithub.com/alecthomas/units v0.0.0-20211218093645-b94a6e3cc137 h1:s6gZFSlWYmbqAuRjVTiNNhvNRfY2Wxp9nhfyel4rklc=\ngithub.com/alecthomas/units v0.0.0-20211218093645-b94a6e3cc137/go.mod h1:OMCwj8VM1Kc9e19TLln2VL61YJF0x1XFtfdL4JdbSyE=\ngithub.com/aws/aws-sdk-go-v2 v1.17.7 h1:CLSjnhJSTSogvqUGhIC6LqFKATMRexcxLZ0i/Nzk9Eg=\ngithub.com/aws/aws-sdk-go-v2 v1.17.7/go.mod h1:uzbQtefpm44goOPmdKyAlXSNcwlRgF3ePWVW6EtJvvw=\ngithub.com/aws/aws-sdk-go-v2/config v1.18.19 h1:AqFK6zFNtq4i1EYu+eC7lcKHYnZagMn6SW171la0bGw=\ngithub.com/aws/aws-sdk-go-v2/config v1.18.19/go.mod h1:XvTmGMY8d52ougvakOv1RpiTLPz9dlG/OQHsKU/cMmY=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.13.18 h1:EQMdtHwz0ILTW1hoP+EwuWhwCG1hD6l3+RWFQABET4c=\ngithub.com/aws/aws-sdk-go-v2/credentials v1.13.18/go.mod h1:vnwlwjIe+3XJPBYKu1et30ZPABG3VaXJYr8ryohpIyM=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1 h1:gt57MN3liKiyGopcqgNzJb2+d9MJaKT/q1OksHNXVE4=\ngithub.com/aws/aws-sdk-go-v2/feature/ec2/imds v1.13.1/go.mod h1:lfUx8puBRdM5lVVMQlwt2v+ofiG/X6Ms+dy0UkG/kXw=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31 h1:sJLYcS+eZn5EeNINGHSCRAwUJMFVqklwkH36Vbyai7M=\ngithub.com/aws/aws-sdk-go-v2/internal/configsources v1.1.31/go.mod h1:QT0BqUvX1Bh2ABdTGnjqEjvjzrCfIniM9Sc8zn9Yndo=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25 h1:1mnRASEKnkqsntcxHaysxwgVoUUp5dkiB+l3llKnqyg=\ngithub.com/aws/aws-sdk-go-v2/internal/endpoints/v2 v2.4.25/go.mod h1:zBHOPwhBc3FlQjQJE/D3IfPWiWaQmT06Vq9aNukDo0k=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.32 h1:p5luUImdIqywn6JpQsW3tq5GNOxKmOnEpybzPx+d1lk=\ngithub.com/aws/aws-sdk-go-v2/internal/ini v1.3.32/go.mod h1:XGhIBZDEgfqmFIugclZ6FU7v75nHhBDtzuB4xB/tEi4=\ngithub.com/aws/aws-sdk-go-v2/service/iam v1.19.8 h1:kQsBeGgm68kT0xc90spgC5qEOQGH74V2bFqgBgG21Bo=\ngithub.com/aws/aws-sdk-go-v2/service/iam v1.19.8/go.mod h1:lf/oAjt//UvPsmnOgPT61F+q4K6U0q4zDd1s1yx2NZs=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25 h1:5LHn8JQ0qvjD9L9JhMtylnkcw7j05GDZqM9Oin6hpr0=\ngithub.com/aws/aws-sdk-go-v2/service/internal/presigned-url v1.9.25/go.mod h1:/95IA+0lMnzW6XzqYJRpjjsAbKEORVeO0anQqjd2CNU=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.12.6 h1:5V7DWLBd7wTELVz5bPpwzYy/sikk0gsgZfj40X+l5OI=\ngithub.com/aws/aws-sdk-go-v2/service/sso v1.12.6/go.mod h1:Y1VOmit/Fn6Tz1uFAeCO6Q7M2fmfXSCLeL5INVYsLuY=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6 h1:B8cauxOH1W1v7rd8RdI/MWnoR4Ze0wIHWrb90qczxj4=\ngithub.com/aws/aws-sdk-go-v2/service/ssooidc v1.14.6/go.mod h1:Lh/bc9XUf8CfOY6Jp5aIkQtN+j1mc+nExc+KXj9jx2s=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.18.7 h1:bWNgNdRko2x6gqa0blfATqAZKZokPIeM1vfmQt2pnvM=\ngithub.com/aws/aws-sdk-go-v2/service/sts v1.18.7/go.mod h1:JuTnSoeePXmMVe9G8NcjjwgOKEfZ4cOjMuT2IBT/2eI=\ngithub.com/aws/smithy-go v1.13.5 h1:hgz0X/DX0dGqTYpGALqXJoRKRj5oQ7150i5FdTePzO8=\ngithub.com/aws/smithy-go v1.13.5/go.mod h1:Tg+OJXh4MB2R/uN61Ko2f6hTZwB/ZYGOtib8J3gBHzA=\ngithub.com/danieljoos/wincred v1.1.2 h1:QLdCxFs1/Yl4zduvBdcHB8goaYk9RARS2SgLLRuAyr0=\ngithub.com/danieljoos/wincred v1.1.2/go.mod h1:GijpziifJoIBfYh+S7BbkdUTU4LfM+QnGqR5Vl2tAx0=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/dvsekhvalnov/jose2go v1.5.0 h1:3j8ya4Z4kMCwT5nXIKFSV84YS+HdqSSO0VsTQxaLAeM=\ngithub.com/dvsekhvalnov/jose2go v1.5.0/go.mod h1:QsHjhyTlD/lAVqn/NSbVZmSCGeDehTB/mPZadG+mhXU=\ngithub.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2 h1:ZpnhV/YsD2/4cESfV5+Hoeu/iUR3ruzNvZ+yQfO03a0=\ngithub.com/godbus/dbus v0.0.0-20190726142602-4481cbc300e2/go.mod h1:bBOAhwG1umN6/6ZUMtDFBMQR8jRg9O75tm9K00oMsK4=\ngithub.com/google/go-cmp v0.5.8/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c h1:6rhixN/i8ZofjG1Y75iExal34USq5p+wiN1tpie8IrU=\ngithub.com/gsterjov/go-libsecret v0.0.0-20161001094733-a6f4afe4910c/go.mod h1:NMPJylDgVpX0MLRlPy15sqSwOFv/U1GZ2m21JhFfek0=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mattn/go-colorable v0.1.4/go.mod h1:U0ppj6V5qS13XJ6of8GYAs25YV2eR4EVcfRqFIhoBtE=\ngithub.com/mattn/go-isatty v0.0.8/go.mod h1:Iq45c/XA43vh69/j3iqttzPXn0bhXyGjM0Hdxcsrc5s=\ngithub.com/mattn/go-isatty v0.0.10/go.mod h1:qgIWMr58cqv1PHHyhnkY9lrL7etaEgOFcMEpPG5Rm84=\ngithub.com/mattn/go-isatty v0.0.18 h1:DOKFKCQ7FNG2L1rbrmstDN4QVRdS89Nkh85u68Uwp98=\ngithub.com/mattn/go-isatty v0.0.18/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-tty v0.0.4 h1:NVikla9X8MN0SQAqCYzpGyXv0jY7MNl3HOWD2dkle7E=\ngithub.com/mattn/go-tty v0.0.4/go.mod h1:u5GGXBtZU6RQoKV8gY5W6UhMudbR5vXnUe7j3pxse28=\ngithub.com/mtibben/percent v0.2.1 h1:5gssi8Nqo8QU/r2pynCm+hBQHpkB/uNK7BJCFogWdzs=\ngithub.com/mtibben/percent v0.2.1/go.mod h1:KG9uO+SZkUp+VkRHsCdYQV3XSZrrSpR3O9ibNBTZrns=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966 h1:JIAuq3EEf9cgbU6AtGPK4CTG3Zf6CKMNqf0MHTggAUA=\ngithub.com/skratchdot/open-golang v0.0.0-20200116055534-eef842397966/go.mod h1:sUM3LWHvSMaG192sy56D9F7CNvL7jUJVXoqM1QKLnog=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.3.0 h1:NGXK3lHquSN08v5vWalVI/L8XU9hdzE/G6xsrze47As=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.2 h1:+h33VjcLVPDHtOdpUCuF+7gSuG3yGIftsP1YvFihtJ8=\ngithub.com/xhit/go-str2duration/v2 v2.1.0 h1:lxklc02Drh6ynqX+DdPyp5pCKLUQpRT8bp8Ydu2Bstc=\ngithub.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=\ngolang.org/x/sys v0.0.0-20190222072716-a9d3bda3a223/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191008105621-543471e840be/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210819135213-f52c844e1c1c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.6.0 h1:clScbb1cHjoCkyRbWwBEUZ5H/tIFu5TAXIqaZD0Gcjw=\ngolang.org/x/term v0.6.0/go.mod h1:m6U89DPEgQRMq3DNkDClhWw02AUbt2daBVO4cn4Hv9U=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b h1:QRR6H1YWRnHb4Y/HeNFCTJLFVxaq6wH4YuVdsUOr75U=\ngopkg.in/check.v1 v1.0.0-20200902074654-038fdea0a05b/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\n"
        },
        {
          "name": "iso8601",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.703125,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/99designs/aws-vault/v7/cli\"\n\t\"github.com/alecthomas/kingpin/v2\"\n)\n\n// Version is provided at compile time\nvar Version = \"dev\"\n\nfunc main() {\n\tapp := kingpin.New(\"aws-vault\", \"A vault for securely storing and accessing AWS credentials in development environments.\")\n\tapp.Version(Version)\n\n\ta := cli.ConfigureGlobals(app)\n\tcli.ConfigureAddCommand(app, a)\n\tcli.ConfigureRemoveCommand(app, a)\n\tcli.ConfigureListCommand(app, a)\n\tcli.ConfigureRotateCommand(app, a)\n\tcli.ConfigureExecCommand(app, a)\n\tcli.ConfigureExportCommand(app, a)\n\tcli.ConfigureClearCommand(app, a)\n\tcli.ConfigureLoginCommand(app, a)\n\tcli.ConfigureProxyCommand(app)\n\n\tkingpin.MustParse(app.Parse(os.Args[1:]))\n}\n"
        },
        {
          "name": "prompt",
          "type": "tree",
          "content": null
        },
        {
          "name": "server",
          "type": "tree",
          "content": null
        },
        {
          "name": "vault",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}