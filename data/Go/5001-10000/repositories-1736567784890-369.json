{
  "metadata": {
    "timestamp": 1736567784890,
    "page": 369,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "chai2010/go-ast-book",
      "stars": 5398,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0244140625,
          "content": "*.c linguist-language=Go\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.025390625,
          "content": "/_book\n/book\n\n*.out*\n_zz*\n"
        },
        {
          "name": ".nojekyll",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.673828125,
          "content": "# Copyright 2019 <chaishushan{AT}gmail.com>. All rights reserved.\n# Use of this source code is governed by a BSD-style\n# license that can be found in the LICENSE file.\n\n#\n# waBook: Mini Markdown Book\n# https://github.com/wa-lang/wabook\n#\n\ndefault:\n\twabook serve\n\nbuild:\n\t-rm book\n\twabook build\n\t-rm book/.gitignore\n\t-rm -rf book/.git\n\ndeploy:\n\t-@make clean\n\twabook build\n\t-rm book/.gitignore\n\t-rm -rf book/.git\n\t-rm -rf book/examples\n\n\tcd book && git init\n\tcd book && git add .\n\tcd book && git commit -m \"first commit\"\n\tcd book && git branch -M gh-pages\n\tcd book && git remote add origin git@github.com:chai2010/go-ast-book.git\n\tcd book && git push -f origin gh-pages\n\nclean:\n\t-rm -rf book\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.9599609375,
          "content": "# 《Go语言定制指南》（原名：Go语法树入门）\n\n- *凹语言(专为 WebAssembly 设计): https://github.com/wa-lang/wa*\n- *WaBook(Go语言实现的MD电子书构建工具): https://github.com/wa-lang/wabook*\n\n----\n\nGo语法树是Go语言源文件的另一种语义等价的表现形式。而Go语言自带的`go fmt`和`go doc`等命令都是在Go语法树的基础之上分析工具。因此将Go语言程序作为输入数据，让我们语法树这个维度重新审视Go语言程序，我们将得到创建Go语言本身的技术。Go语法树由标准库的`go/ast`包定义，它是在`go/token`包定义的词法基础之上抽象的语法树结构。本书简单介绍语法树相关包的使用。如果想从头实现一个玩具Go语言可以参考[《从头实现µGo语言》](https://github.com/chai2010/ugo-compiler-book)。\n\n![](cover.jpg)\n\n- 作者：柴树杉，Github [@chai2010](https://github.com/chai2010)，Twitter [@chaishushan](https://twitter.com/chaishushan)\n- 作者：史斌，Github [@benshi001](https://github.com/benshi001)\n- 作者：丁尔男，Github [@3dgen](https://github.com/3dgen)\n- 主页：https://github.com/chai2010/go-ast-book\n- 阅读：https://chai2010.cn/go-ast-book\n\n\n## 购买链接：\n\n- 京东：https://item.jd.com/13698866.html\n- 当当：https://product.dangdang.com/29388202.html\n- 异步：https://www.epubit.com/bookDetails?id=UBc86f749c1eb7\n\n如果你喜欢本书，欢迎到豆瓣评论：\n\n- https://book.douban.com/subject/35852237\n\n# waBook 构建(纯Go语言实现)\n\n增加了基于 Github 的 [留言功能](https://giscus.app) 构建:\n\n- https://github.com/wa-lang/waBook\n\n然后执行 `wabook serve` 本地打开服务，或者 `wabook build` 构建。\n\n# 微信公众号\n\n![](weixin-guanggu-coder.jpeg)\n\n\n# 版权\n\n版权 [柴树杉](https://github.com/chai2010)、[史斌](https://github.com/benshi001)和[丁尔男](https://github.com/3dgen)，保留相关权力。此内容仅针对Github平台用户免费在线阅读。\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 0.7890625,
          "content": "# 目录\n\n[Go语言定制指南](index.md)\n[前言](preface.md)\n\n* [第1章 记号](ch1/readme.md)\n* [第2章 基础面值](ch2/readme.md)\n* [第3章 基础表达式](ch3/readme.md)\n* [第4章 代码结构](ch4/readme.md)\n* [第5章 通用声明](ch5/readme.md)\n* [第6章 函数声明](ch6/readme.md)\n* [第7章 复合类型](ch7/readme.md)\n* [第8章 复合面值](ch8/readme.md)\n* [第9章 复合表达式](ch9/readme.md)\n* [第10章 语句块和语句](ch10/readme.md)\n* [第11章 类型检查](ch11/readme.md)\n* [第12章 语义信息](ch12/readme.md)\n* [第13章 SSA形式](ch13/readme.md)\n* [第14章 凹语言](ch14/readme.md)\n* [第15章 LLVM简介](ch15/readme.md)\n* [第16章 LLVM实例](ch16/readme.md)\n\n[附录A goyacc](appendix/a-goyacc/readme.md)\n[附录B ANTLR4](appendix/b-antlr4/readme.md)\n"
        },
        {
          "name": "appendix",
          "type": "tree",
          "content": null
        },
        {
          "name": "book.ini",
          "type": "blob",
          "size": 1.0927734375,
          "content": "# https://giscus.app\n\n[book]\ntitle = \"Go语言定制指南\"\nauthors = [\"柴树杉\", \"史斌\", \"丁尔男\"]\ndescription = \"从Go语法树开始定制自己的语言\"\nlanguage = \"zh\"\nmultilingual = false\nsrc = \".\"\n\n[build]\nbuild-dir = \"book\"\n\n[custom]\ncontent_header = \"<ul dir=\\\"auto\\\"><li><em>凹语言(Go实现, 面向WASM设计): <a href=\\\"https://github.com/wa-lang/wa\\\">https://github.com/wa-lang/wa</a></em></li><li><em>WaBook(Go语言实现的MD电子书构建工具): <a href=\\\"https://github.com/wa-lang/wabook\\\">https://github.com/wa-lang/wabook</a></em></li></ul><hr>\"\ncontent_footer = \"\"\npage_footer = \"<span>© 2019-2022 | <a href=\\\"https://github.com/chai2010/go-ast-book\\\">柴树杉、史斌、丁尔男</a> 保留所有权利</span>\"\n\n[giscus]\nenaled = true\ndata_repo = \"chai2010/go-ast-book\"\ndata_repo_id = \"MDEwOlJlcG9zaXRvcnkxNjAyNzI5NDg=\"\ndata_category = \"General\"\ndata_category_id = \"DIC_kwDOCY2SNM4CQUHb\"\n\n[output.html]\ngit-repository-url = \"https://github.com/chai2010/go-ast-book\"\nedit-url-template = \"https://github.com/chai2010/go-ast-book/edit/master/{path}\"\ngit-repository-icon = \"fa-github\"\n"
        },
        {
          "name": "ch1",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch10",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch11",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch12",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch13",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch14",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch15",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch16",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch2",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch3",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch4",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch5",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch6",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch7",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch8",
          "type": "tree",
          "content": null
        },
        {
          "name": "ch9",
          "type": "tree",
          "content": null
        },
        {
          "name": "cover.jpg",
          "type": "blob",
          "size": 43.4072265625,
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "index.md",
          "type": "blob",
          "size": 1.833984375,
          "content": "# 《Go语言定制指南》（原名：Go语法树入门）\n\nGo语法树是Go语言源文件的另一种语义等价的表现形式。而Go语言自带的`go fmt`和`go doc`等命令都是在Go语法树的基础之上分析工具。因此将Go语言程序作为输入数据，让我们语法树这个维度重新审视Go语言程序，我们将得到创建Go语言本身的技术。Go语法树由标准库的`go/ast`包定义，它是在`go/token`包定义的词法基础之上抽象的语法树结构。本书简单介绍语法树相关包的使用。如果想从头实现一个玩具Go语言可以参考[《从头实现µGo语言》](https://github.com/chai2010/ugo-compiler-book)。\n\n---\n\n![](cover.jpg)\n\n- 作者：柴树杉，Github [@chai2010](https://github.com/chai2010)，Twitter [@chaishushan](https://twitter.com/chaishushan)\n- 作者：史斌，Github [@benshi001](https://github.com/benshi001)\n- 作者：丁尔男，Github [@3dgen](https://github.com/3dgen)\n- 主页：[https://github.com/chai2010/go-ast-book](https://github.com/chai2010/go-ast-book)\n- 阅读：[https://chai2010.cn/go-ast-book](https://chai2010.cn/go-ast-book)\n\n## 购买链接：\n\n- 京东：[https://item.jd.com/13698866.html](https://item.jd.com/13698866.html)\n- 当当：[https://product.dangdang.com/29388202.html](https://product.dangdang.com/29388202.html)\n- 异步：[https://www.epubit.com/bookDetails?id=UBc86f749c1eb7](https://www.epubit.com/bookDetails?id=UBc86f749c1eb7)\n\n如果你喜欢本书，欢迎到豆瓣评论：\n\n- [https://book.douban.com/subject/35852237](https://book.douban.com/subject/35852237)\n\n# 微信公众号\n\n![](weixin-guanggu-coder.jpeg)\n\n# 版权\n\n版权 [柴树杉](https://github.com/chai2010)、[史斌](https://github.com/benshi001)和[丁尔男](https://github.com/3dgen)，保留相关权力。此内容仅针对Github平台用户免费在线阅读。\n"
        },
        {
          "name": "preface.md",
          "type": "blob",
          "size": 5.9267578125,
          "content": "# 序言1 - Ian Lance Taylor\n\n因为出版社版权限制不方便全部公开新增内容，完整内容请参考 [实体书](https://www.epubit.com/bookDetails?id=UBc86f749c1eb7)。\n\n---\n\n# 序言2 - 许式伟\n\n因为出版社版权限制不方便全部公开新增内容，完整内容请参考 [实体书](https://www.epubit.com/bookDetails?id=UBc86f749c1eb7)。\n\n---\n\n# 序言3 - 作者\n\n在武侠小说中，天下武功出少林，少林寺的七十二绝技名扬天下。但是真正能学会并能够掌握七十二绝技的屈指可数，主要原因是学习周期太长。以七十二绝技中的一指禅为例，据说五代时期的法慧禅师以三十六年时间掌握的学习速度排名第一，其次是南宋的灵兴禅师花了三十九年时光排名第二，而韦爵爷的澄观师侄以四十二年而练成一指禅名列第三。如果一个绝技真的需要几十或上百年的时间才能掌握，那只能说明这个绝技没有实用价值，或者是学习的人没有掌握科学的学习方法。\n\n其实少林寺的七十二绝技是有科学高效的学习方法的，这个方法由《天龙八部》中的鸠摩智发明并实践。鸠摩智国师经过科学研究发现少林寺的七十二绝技招式虽然厉害，但是其内部的驱动引擎性能极其底下（预热就需要几十年时间），而稍微强一点的易筋经引擎又涉及知识产权问题不对外开放授权，因此如何为七十二绝技定制一个合适的内功驱动引擎就成了一个关键问题。经过不懈努力，鸠摩智大师终于发现可以将逍遥派的小无相功作为驱动七十二绝技的内功引擎，从而开辟了一条武学弯道超车的新捷径。\n\n在软件开发领域同样存在几个圣地：数据库、操作系统和编译器。其中编译器的开发技术更是被称为屠龙之技，号称龙书的《编译原理》的封面就是一个骑士在和巨龙搏斗的画面。编译器开发的相关理论就类似于少林寺内功心法，虽然理论强大但是学习的效率极其低下。而作为编译器界面的编程语言就类似于少林寺的七十二绝技的招式，普通码农如果想以常规传统的方式从头发明或实现一整套实用的编程语言难于登天。自己从头实现编程语言不仅仅要涉及诸多编译方面的理论，还需要通过大量的编码工作解决各种细节问题。作为自制编程语言爱好者而言，我们的目的不是为了单纯掌握龙书的理论，而是希望有一个自己可控的编程语言，因此我们同样需要寻找一个自制编程语言的捷径。\n\nGo语言作为一个将自身的编译器内置到标准库的主流通用编译型编程语言，其语法树相关包的设计与实现堪称是编程艺术和编译理论相结合的典范，是Unix之父等老一辈软件工程师毕生的艺术结晶。同时Go语言的语法比较简单（只有25个关键字），非常适合作为自制编程语言的基础参考语言。开源社区已经从Go语言语法树诞生了诸多扩展语言：比如GopherJS项目将Go语言带入了前端开发领域；TinyGo则是将Go语言带入了单片机等微系统的开发领域；国内的七牛公司更是针对数据科学领域定制了Go+语言。这些基于Go定制语言的一个共通之处都是基于Go语法树进行再加工处理。因此如果能熟练掌握Go语法树的使用，就能跨过繁杂的词法分析、语法分析程序，直接使用龙书中的高深理论，进入语言特性定制领域。这将极大的降低自定义语言的门槛。\n\n为了真正开启自制编程语言的历程，同时让Go语法树能够真正落地产生生产力，本书的最后一章引入了我们定制的凹语言（凹读音“Wa”）。凹语言的定制过程类似自己组装一台电脑，在语言能够独立工作前并不自己创造新的核心模块，而是基于已有的软件模块进行改造和拼装，但是最终得到的依然是自主可控的语言。在语言可以初步工作之后，可以再进一步根据需求优化局部细节或者对语言的语法做局部性的重新设计，这样实现语言的每个阶段的难度都不会很大。我们的目标不是为了仅仅制造一个玩具语言，凹语言的语法树解析和语义分析都是工业级的，如果后端再接入LLVM就很容易将其改造为实用性的语言。\n\n随着千禧年之后计算机在中国普及，我们国家的程序员已经在追赶并紧跟着世界前沿技术的发展。但是作为最古老的编程语言和编译相关技术，国内相关的图书资料还停留在讲述几十年前的理论或者是讲述如何构建一些缺乏实用价值的玩具语言阶段，理论和实践严重脱节。与经典著作编译龙书相比，龙书深刻地讲解了编译技术用到的理论知识；而本书立足于实战与理论的结合，教授读者利用现成的工具，快速搭建一个可以实用的编程语言。我们希望本书可以为我国编译器和编程语言的自主化提供力所能及的帮助。\n\n最后，我们希望各位读者能够定制出自己的编程语言，并使用定制的语言快乐地编程。\n\n---\n\n# 致谢\n\n感谢 [Ian Lance Taylor](https://www.airs.com/ian/) 本书写推荐序，他是Go语言第4位参与者，为社区做出了巨大贡献，靠一己之力完成了gccgo。感谢许式伟为本书写推荐序，许大是七牛公司的创始人和CEO，也是大中华区首席Go语言布道者。感谢Go语言之父和每一个为Go语言提交过补丁的朋友。感谢fango的第一本以Go语言为主题的网络小说《胡文Go.ogle》和第一本中文Go语言图书《Go语言·云动力》，是你的分享让带起了大家学习Go语言的热情。感谢GopherChina创始人谢孟军多年来的支持，感谢国内对社区作出贡献的每一个Go语言小伙伴，你们的奉献让社区更加壮大。最后感谢本书的编辑杨海铃老师，没有您本书就不可能出版。谢谢大家！\n\n"
        },
        {
          "name": "style.css",
          "type": "blob",
          "size": 1.2412109375,
          "content": "@media only screen and (max-width:1079px) {\n    .sidetoc {\n        display: none;\n    }\n}\n\n@media only screen and (min-width:1080px) {\n    main {\n        position: relative;\n        padding-right: 170px;\n    }\n    .sidetoc {\n        margin-left: auto;\n        margin-right: auto;\n        /*left: calc(100% + (var(--content-max-width))/4 - 180px);*/\n        left: calc(100% - 200px);\n        position: absolute;\n    }\n    .pagetoc {\n        position: fixed;\n        width: 200px;\n        height: calc(100vh - var(--menu-bar-height) - 0.67em * 4);\n        overflow: auto;\n        z-index: 1000;\n    }\n    .pagetoc a {\n        border-left: 1px solid var(--sidebar-bg);\n        color: var(--fg) !important;\n        display: block;\n        padding-bottom: 5px;\n        padding-top: 5px;\n        padding-left: 10px;\n        text-align: left;\n        text-decoration: none;\n        font-size: 1.2rem;\n    }\n    .pagetoc a:hover,\n    .pagetoc a.active {\n        background: var(--sidebar-bg);\n        color: var(--sidebar-fg) !important;\n    }\n    .pagetoc .active {\n        background: var(--sidebar-bg);\n        color: var(--sidebar-fg);\n    }\n}\n\n.page-footer {\n    margin-top: 50px;\n    border-top: 1px solid #ccc;\n    overflow: hidden;\n    padding: 10px 0;\n    color: gray;\n}"
        },
        {
          "name": "weixin-guanggu-coder.jpeg",
          "type": "blob",
          "size": 26.9697265625,
          "content": null
        }
      ]
    }
  ]
}