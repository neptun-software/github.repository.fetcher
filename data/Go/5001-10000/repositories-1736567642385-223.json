{
  "metadata": {
    "timestamp": 1736567642385,
    "page": 223,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "oapi-codegen/oapi-codegen",
      "stars": 6525,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1689453125,
          "content": "root = true\n\n[Makefile]\nindent_size = 8\nindent_style = tab\n\n[{go.mod,go.sum,*.go}]\nindent_size = 4\nindent_style = tab\n\n[{*.yml,*.yaml}]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": "*.gen.go linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.029296875,
          "content": ".idea\n.DS_Store\n.vscode/\nbin/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.4580078125,
          "content": "## Contributing\n\nIf you're interested in contributing to `oapi-codegen`, the first thing we have to say is thank you! We'd like to extend our gratitude to anyone who takes the time to improve this project.\n\n`oapi-codegen` is being actively maintained, however the two people who do so are very busy, and can only set aside time for this project every once in a while, so our release cadence is slow and conservative.\n\n> [!NOTE]\n> We're actively considering what needs to change to make `oapi-codegen` more sustainable, and hope that we can share soon some options.\n\nThis guide is a starting point, and we'll absolutely improve it on an ongoing basis. We've managed to go ~4 years without a substantial guide like this - sometimes to the detriment of contributors - and would love to keep improving this guide, and the project, for the best of the community.\n\n### When may we not change things?\n\nGenerating code which others depend on, which is based on something as complex as OpenAPI is fraught with many edge cases, and we prefer to leave things as they are if there is a reasonable workaround.\n\nWe'll try to avoid adding too much noise into generated code, or introduce breaking changes (as per SemVer). See also \"Backwards compatibility\" in the README.\n\n### Raising a bug\n\nIf you believe you have encountered a bug, please raise an issue.\n\n> [!TIP]\n> Please follow the [minimal reproductions](#minimal-reproductions) documentation to improve our ability to support triaging\n\nThis may get converted into a feature request if we don't deem it a bug, but a missing feature.\n\n### Asking a question\n\nWe'd prefer that questions about \"how do I use (this feature)?\" or \"what do the community think about ...?\" get asked using [GitHub Discussions](https://github.com/oapi-codegen/oapi-codegen/discussions) which allow the community to answer them more easily.\n\n### Making changes that tweak generated code\n\nIf you are making changes to the codebase that affects the code that gets generated, you will need to make sure that you have regenerated any generated test cases in the codebase using `make generate`.\n\nThese generated test cases and examples provide a means to not only validate the functionality, but as they are checked in to source code, allow us to see if there are any subtle issues or breaking changes.\n\n> [!NOTE]\n> Significant changes to generated code are unlikely to be merged, especially in cases where there would be a breaking change that all consumers would have to respond to i.e. renaming a function or changing the function signature.\n>\n> However, if we can make this an opt-in feature (using the `output-options` configuration object) then that would be our preference.\n\n### Feature enhancements\n\nIt's great that you would like to improve `oapi-codegen` and add new futures.\n\nWe would prefer there be an issue raised for a feature request first, especially if it may be a duplicate of existing requests. However, sometimes that isn't possible - or takes longer than the code changes required - so it can be excused.\n\nFeatures that amend the way existing codegen works should - ideally - be behind an opt-in feature flag using the `output-options` configuration object.\n\n### Minimal reproductions\n\n> [!TIP]\n> The minimal reproductions for bugs may get taken into the codebase (licensed under `Apache-2.0`) as a test-case for future regression testing\n>\n> However, this can only be done if you license the code under `Apache-2.0` itself - if you are comfortable doing so, please do.\n\nWhen raising a bug report, or asking a question about functionality, it's super helpful if you can share:\n\n- The version of `oapi-codegen` you're using\n  - You _may_ get asked to update to a later - or latest - version, to see if the issue persists\n- The YAML configuration file you're using\n- The OpenAPI spec you're using\n  - However, we would prefer it only be the _absolute minimum_ specification, to limit the noise while trying to debug the issue, and to reduce information exposure from internal API development\n- What problem you're seeing\n- What the expected behaviour is\n- What version of Go you're using\n\n> [!CAUTION]\n> When sharing a minimal reproduction, please be aware of sharing any internal information about the APIs you're developing, or any sensitive Intellectual Property.\n\n### Before you raise a PR\n\n> [!NOTE]\n> Please raise PRs from a branch that isn't the `master` or `main` branch on your repo. This generally means that as maintainers, we can't push changes to the branch directly.\n\nBefore you send the PR, please run the following commands locally:\n\n```sh\nmake tidy\nmake test\nmake generate\nmake lint\n```\n\nIt is important to use the `make` tasks due to the way we're (ab)using the Go module system to split the project into multiple modules to reduce our dependency bloat in the main module.\n\nThese are also run in GitHub Actions, across a number of Go releases.\n\nIt's recommended to raise a draft PR first, so you can get feedback on the PR from GitHub, and review your own changes, before getting the attention of a maintainer.\n\n### \"Should I @-mention the maintainers on an issue\"\n\nPlease try to avoid pinging the maintainers in an issue, Pull Request, or discussion.\n\n> [!NOTE]\n> We're actively considering what needs to change to make `oapi-codegen` more sustainable, and hope that we can share soon some options.\n\nThe project is run on a volunteer basis, and as such, tagging us on issues - especially if you've just raised them - is largely unhelpful. We monitor the issues and work to triage them as best we can with the time we have allocated for it.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.119140625,
          "content": "GOBASE=$(shell pwd)\nGOBIN=$(GOBASE)/bin\n\nhelp:\n\t@echo \"This is a helper makefile for oapi-codegen\"\n\t@echo \"Targets:\"\n\t@echo \"    generate:    regenerate all generated files\"\n\t@echo \"    test:        run all tests\"\n\t@echo \"    tidy         tidy go mod\"\n\t@echo \"    lint         lint the project\"\n\n$(GOBIN)/golangci-lint:\n\tcurl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(GOBIN) v1.62.2\n\n.PHONY: tools\ntools: $(GOBIN)/golangci-lint\n\nlint: tools\n\t# run the root module explicitly, to prevent recursive calls by re-invoking `make ...` top-level\n\t$(GOBIN)/golangci-lint run ./...\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && env GOBIN=$(GOBIN) make lint'\n\nlint-ci: tools\n\t# for the root module, explicitly run the step, to prevent recursive calls\n\t$(GOBIN)/golangci-lint run ./... --out-format=colored-line-number --timeout=5m\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && env GOBIN=$(GOBIN) make lint-ci'\n\ngenerate:\n\t# for the root module, explicitly run the step, to prevent recursive calls\n\tgo generate ./...\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && make generate'\n\ntest:\n\t# for the root module, explicitly run the step, to prevent recursive calls\n\tgo test -cover ./...\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && make test'\n\ntidy:\n\t# for the root module, explicitly run the step, to prevent recursive calls\n\tgo mod tidy\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && make tidy'\n\ntidy-ci:\n\t# for the root module, explicitly run the step, to prevent recursive calls\n\ttidied -verbose\n\t# then, for all child modules, use a module-managed `Makefile`\n\tgit ls-files '**/*go.mod' -z | xargs -0 -I{} bash -xc 'cd $$(dirname {}) && make tidy-ci'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 106.396484375,
          "content": "# `oapi-codegen`\n\n[![OpenSSF Best Practices](https://www.bestpractices.dev/projects/9450/badge)](https://www.bestpractices.dev/projects/9450)\n\n`oapi-codegen` is a command-line tool and library to convert OpenAPI specifications to Go code, be it [server-side implementations](#generating-server-side-boilerplate), [API clients](#generating-api-clients), or simply [HTTP models](#generating-api-models).\n\nUsing `oapi-codegen` allows you to reduce the boilerplate required to create or integrate with services based on [OpenAPI 3.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md), and instead focus on writing your business logic, and working on the real value-add for your organisation.\n\nWith `oapi-codegen`, there are a few [Key Design Decisions](#key-design-decisions) we've made, including:\n\n- idiomatic Go, where possible\n- fairly simple generated code, erring on the side of duplicate code over nicely refactored code\n- supporting as much of OpenAPI 3.x as is possible, alongside Go's type system\n\n`oapi-codegen` is one part of a wider ecosystem, which can be found described in further detail in the [oapi-codegen organisation on GitHub](https://github.com/oapi-codegen).\n\n⚠️ This README may be for the latest development version, which may contain unreleased changes. Please ensure you're looking at the README for the latest release version.\n\n## Action Required: The repository for this project has changed\n\nAs announced in [May 2024](https://github.com/oapi-codegen/oapi-codegen/discussions/1605),\nwe have moved the project from the deepmap organization to our own organization, and you will need to update your\nimport paths to pull updates past this point. You need to do a recursive search/replace from\n`github.com/deepmap/oapi-codegen/v2` to `github.com/oapi-codegen/oapi-codegen/v2`.\n\n> [!IMPORTANT]\n> `oapi-codegen` moved to its new home with the version tag `v2.3.0`.\n\nIf you are using `v2.2.0` or below, please install like so:\n\n```sh\n# for the binary install\ngo install github.com/deepmap/oapi-codegen/v2/cmd/oapi-codegen@v2.2.0\n```\n\nIf you are using `v2.3.0` or above, please install like so, using the new module import path:\n\n```sh\n# for the binary install\ngo install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest\n```\n\n## Install\n\nIt is recommended to follow [the `tools.go` pattern](https://www.jvt.me/posts/2022/06/15/go-tools-dependency-management/) for managing the dependency of `oapi-codegen` alongside your core application.\n\nThis would give you a `tools/tools.go`:\n\n```go\n//go:build tools\n// +build tools\n\npackage main\n\nimport (\n\t_ \"github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen\"\n)\n```\n\nThen, each invocation of `oapi-codegen` would be used like so:\n\n```go\n//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen --config=config.yaml ../../api.yaml\n```\n\nAlternatively, you can install it as a binary with:\n\n```sh\n$ go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest\n$ oapi-codegen -version\n```\n\nWhich then means you can invoke it like so:\n\n```go\n//go:generate oapi-codegen --config=config.yaml ../../api.yaml\n```\n\nNote that you can also [move your `tools.go` into its own sub-module](https://www.jvt.me/posts/2024/09/30/go-tools-module/) to reduce the impact on your top-level `go.mod`.\n\n### Pinning to commits\n\nWhile the project does not ([yet](https://github.com/oapi-codegen/oapi-codegen/issues/1519)) have a defined release cadence, there may be cases where you want to pull in yet-unreleased changes to your codebase.\n\nTherefore, you may want to pin your dependency on `oapi-codegen` to a given commit hash, rather than a tag.\n\nThis is **officially recommended** for consumers of `oapi-codegen`, who want features/bug fixes that haven't yet been released.\n\nWe aim to keep the default branch ready-to-release so you should be able to safely pin.\n\nTo do so, you can run:\n\n```sh\n# pin to the latest version on the default branch\n$ go get github.com/oapi-codegen/oapi-codegen/v2@main\n# alternatively, to a commit hash i.e. https://github.com/oapi-codegen/oapi-codegen/commit/71e916c59688a6379b5774dfe5904ec222b9a537\n$ go get github.com/oapi-codegen/oapi-codegen/v2@71e916c59688a6379b5774dfe5904ec222b9a537\n```\n\nThis will then make a change such as:\n\n```diff\ndiff --git go.mod go.mod\nindex 44f29a4..436a780 100644\n--- go.mod\n+++ go.mod\n@@ -2,21 +2,20 @@\n-require github.com/oapi-codegen/oapi-codegen/v2 v2.1.0\n+require github.com/oapi-codegen/oapi-codegen/v2 v2.1.1-0.20240331212514-80f0b978ef16\n```\n\n## Usage\n\n`oapi-codegen` is largely configured using a YAML configuration file, to simplify the number of flags that users need to remember, and to make reading the `go:generate` command less daunting.\n\nFor full details of what is supported, it's worth checking out [the GoDoc for `codegen.Configuration`](https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#Configuration).\n\nWe also have [a JSON Schema](configuration-schema.json) that can be used by IDEs/editors with the Language Server Protocol (LSP) to perform intelligent suggestions, i.e.:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: api\n# ...\n```\n\n### Backwards compatibility\n\nAlthough we strive to retain backwards compatibility - as a project that's using a stable API per SemVer - there are sometimes opportunities we must take to fix a bug that could cause a breaking change for [people relying upon the behaviour](https://xkcd.com/1172/).\n\nIn this case, we will expose a [compatibility option](https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#CompatibilityOptions) to restore old behaviour.\n\n## Features\n\nAt a high level, `oapi-codegen` supports:\n\n- Generating server-side boilerplate for [a number of servers](#supported-servers) ([docs](#generating-server-side-boilerplate))\n- Generating client API boilerplate ([docs](#generating-api-clients))\n- Generating the types ([docs](#generating-api-models))\n- Splitting large OpenAPI specs across multiple packages([docs](#import-mapping))\n  - This is also known as \"Import Mapping\" or \"external references\" across our documentation / discussion in GitHub issues\n\n## What does it look like?\n\nBelow we can see a trimmed down example taken from the OpenAPI Petstore [example](examples/petstore-expanded/stdhttp/api/petstore.gen.go):\n\n```go\n// generated code\n\ntype ServerInterface interface {\n\t// ...\n\t// Returns all pets\n\t// (GET /pets)\n\tFindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)\n\t// ...\n}\n\n// FindPets operation middleware\nfunc (siw *ServerInterfaceWrapper) FindPets(w http.ResponseWriter, r *http.Request) {\n\n\tvar err error\n\n\t// Parameter object where we will unmarshal all parameters from the context\n\tvar params FindPetsParams\n\n\t// ------------- Optional query parameter \"tags\" -------------\n\n\terr = runtime.BindQueryParameter(\"form\", true, false, \"tags\", r.URL.Query(), &params.Tags)\n\tif err != nil {\n\t\tsiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: \"tags\", Err: err})\n\t\treturn\n\t}\n\n\t// ------------- Optional query parameter \"limit\" -------------\n\n\terr = runtime.BindQueryParameter(\"form\", true, false, \"limit\", r.URL.Query(), &params.Limit)\n\tif err != nil {\n\t\tsiw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: \"limit\", Err: err})\n\t\treturn\n\t}\n\n\thandler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tsiw.Handler.FindPets(w, r, params)\n\t}))\n\n\tfor _, middleware := range siw.HandlerMiddlewares {\n\t\thandler = middleware(handler)\n\t}\n\n\thandler.ServeHTTP(w, r)\n}\n\n// HandlerWithOptions creates http.Handler with additional options\nfunc HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {\n\tm := options.BaseRouter\n\n\tif m == nil {\n\t\tm = http.NewServeMux()\n\t}\n\tif options.ErrorHandlerFunc == nil {\n\t\toptions.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {\n\t\t\thttp.Error(w, err.Error(), http.StatusBadRequest)\n\t\t}\n\t}\n\n\twrapper := ServerInterfaceWrapper{\n\t\tHandler:            si,\n\t\tHandlerMiddlewares: options.Middlewares,\n\t\tErrorHandlerFunc:   options.ErrorHandlerFunc,\n\t}\n\n\tm.HandleFunc(\"GET \"+options.BaseURL+\"/pets\", wrapper.FindPets)\n\n\treturn m\n}\n```\n\nThen, in your own code, you implement the underlying logic for the `FindPets` implementation:\n\n```go\ntype PetStore struct {\n\tPets   map[int64]Pet\n\tNextId int64\n\tLock   sync.Mutex\n}\n\n// Make sure we conform to ServerInterface\n\nvar _ ServerInterface = (*PetStore)(nil)\n\nfunc NewPetStore() *PetStore {\n\treturn &PetStore{\n\t\tPets:   make(map[int64]Pet),\n\t\tNextId: 1000,\n\t}\n}\n\n// FindPets implements all the handlers in the ServerInterface\nfunc (p *PetStore) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {\n\tp.Lock.Lock()\n\tdefer p.Lock.Unlock()\n\n\tvar result []Pet\n\n\tfor _, pet := range p.Pets {\n\t\tif params.Tags != nil {\n\t\t\t// If we have tags,  filter pets by tag\n\t\t\tfor _, t := range *params.Tags {\n\t\t\t\tif pet.Tag != nil && (*pet.Tag == t) {\n\t\t\t\t\tresult = append(result, pet)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Add all pets if we're not filtering\n\t\t\tresult = append(result, pet)\n\t\t}\n\n\t\tif params.Limit != nil {\n\t\t\tl := int(*params.Limit)\n\t\t\tif len(result) >= l {\n\t\t\t\t// We're at the limit\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\t_ = json.NewEncoder(w).Encode(result)\n}\n```\n\nAs we can see, `oapi-codegen` simplifies some of the boilerplate by taking parameters out of the request and instead allows us to focus on the implementation.\n\nYou'll note that there's still a bit more marshaling of request/response data, which is further reduced by using the [Strict server](#strict-server) functionality.\n\n<a name=\"what-does-it-look-like-strict\"></a>\nWhen using the strict server, you'll have the following generated code:\n\n```go\n// StrictServerInterface represents all server handlers.\ntype StrictServerInterface interface {\n\t// ...\n\t// Returns all pets\n\t// (GET /pets)\n\tFindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)\n\t// ...\n}\n\nfunc NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {\n\treturn &strictHandler{ssi: ssi, middlewares: middlewares, options: options}\n}\n\n// FindPets operation middleware\nfunc (sh *strictHandler) FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams) {\n\tvar request FindPetsRequestObject\n\n\trequest.Params = params\n\n\thandler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {\n\t\treturn sh.ssi.FindPets(ctx, request.(FindPetsRequestObject))\n\t}\n\tfor _, middleware := range sh.middlewares {\n\t\thandler = middleware(handler, \"FindPets\")\n\t}\n\n\tresponse, err := handler(r.Context(), w, r, request)\n\n\tif err != nil {\n\t\tsh.options.ResponseErrorHandlerFunc(w, r, err)\n\t} else if validResponse, ok := response.(FindPetsResponseObject); ok {\n\t\tif err := validResponse.VisitFindPetsResponse(w); err != nil {\n\t\t\tsh.options.ResponseErrorHandlerFunc(w, r, err)\n\t\t}\n\t} else if response != nil {\n\t\tsh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf(\"unexpected response type: %T\", response))\n\t}\n}\n```\n\nThen, in your own code, you implement the underlying logic for the `FindPets` implementation:\n\n```go\n// Make sure we conform to StrictServerInterface\n\nvar _ StrictServerInterface = (*PetStore)(nil)\n\nfunc NewPetStore() *PetStore {\n\treturn &PetStore{\n\t\tPets:   make(map[int64]Pet),\n\t\tNextId: 1000,\n\t}\n}\n\n// FindPets implements all the handlers in the ServerInterface\nfunc (p *PetStore) FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error) {\n\tp.Lock.Lock()\n\tdefer p.Lock.Unlock()\n\n\tvar result []Pet\n\n\tfor _, pet := range p.Pets {\n\t\tif request.Params.Tags != nil {\n\t\t\t// If we have tags,  filter pets by tag\n\t\t\tfor _, t := range *request.Params.Tags {\n\t\t\t\tif pet.Tag != nil && (*pet.Tag == t) {\n\t\t\t\t\tresult = append(result, pet)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Add all pets if we're not filtering\n\t\t\tresult = append(result, pet)\n\t\t}\n\n\t\tif request.Params.Limit != nil {\n\t\t\tl := int(*request.Params.Limit)\n\t\t\tif len(result) >= l {\n\t\t\t\t// We're at the limit\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\treturn FindPets200JSONResponse(result), nil\n}\n```\n\nWe can see that this provides the best means to focus on the implementation of the business logic within the endpoint, rather than (un)marshalling types to and from JSON, or wrangling cookies or headers.\n\n## Key design decisions\n\n- Produce an interface that can be satisfied by your implementation, with reduced boilerplate\n- Bulk processing and parsing of OpenAPI document in Go\n- Resulting output is using Go's `text/template`s, which are user-overridable\n- Attempts to produce Idiomatic Go\n- Single-file output\n- Support multiple OpenAPI files by having a package-per-OpenAPI file\n- Support of OpenAPI 3.0\n  - OpenAPI 3.1 support is [awaiting upstream support](https://github.com/oapi-codegen/oapi-codegen/issues/373)\n  - Note that this does not include OpenAPI 2.0 (aka Swagger)\n- Extract parameters from requests, to reduce work required by your implementation\n- Implicit `additionalProperties` are ignored by default ([more details](#additional-properties-additionalproperties))\n- Prune unused types by default\n\n## Generating server-side boilerplate\n\n`oapi-codegen` shines by making it fairly straightforward (note that this is a purposeful choice of wording here - we want to avoid words like \"easy\") to generate the server-side boilerplate for a backend API.\n\nBelow you can find the supported servers, and more information about how to implement a server using them.\n\nTo provide you a fully Test Driven Development style test harness to confirm you are following the specification, you could use a tool such as [openapi.tanna.dev/go/validator](https://openapi.tanna.dev/go/validator/), or craft your own.\n\n### Supported Servers\n\nRight now, we support the following servers, and are supportive of adding new servers, too!\n\n<table>\n\n<tr>\n<th>\nServer\n</th>\n<th>\n<code>generate</code> flag to enable code generation\n</th>\n<th>\nExample usage\n</th>\n</tr>\n\n<tr>\n<td>\n\n[Chi](https://github.com/go-chi/chi)\n\n</td>\n<td>\n<code>chi-server</code>\n</td>\n<td>\n\n\nFor a Chi server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  chi-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Chi docs](#impl-chi).\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[Echo](https://github.com/labstack/echo)\n\n</td>\n<td>\n<code>echo-server</code>\n</td>\n<td>\n\nFor an Echo server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  echo-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Echo docs](#impl-echo).\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[Fiber](https://github.com/gofiber/fiber)\n\n</td>\n<td>\n<code>fiber-server</code>\n</td>\n\n<td>\n\nFor a Fiber server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  fiber-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Fiber docs](#impl-fiber).\n\n</td>\n</tr>\n\n\n<tr>\n<td>\n\n[Gin](https://github.com/gin-gonic/gin)\n\n</td>\n<td>\n<code>gin-server</code>\n</td>\n<td>\n\nFor a Gin server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  gin-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Gin docs](#impl-gin).\n\n</td>\n\n</tr>\n\n<tr>\n<td>\n\n[gorilla/mux](https://github.com/gorilla/mux)\n\n</td>\n<td>\n<code>gorilla-server</code>\n</td>\n\n<td>\n\nFor a gorilla/mux server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  gorilla-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the gorilla/mux docs](#impl-gorillamux).\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[Iris](https://github.com/kataras/iris)\n\n</td>\n<td>\n<code>iris-server</code>\n</td>\n\n<td>\n\nFor a Iris server, you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  iris-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Iris docs](#impl-iris).\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[1.22+ `net/http`](https://pkg.go.dev/net/http)\n\n</td>\n<td>\n<code>std-http-server</code>\n</td>\n\n<td>\n\nTo use purely `net/http` (for Go 1.22+), you will want a configuration file such as:\n\n```yaml\n# yaml-language-server: ...\npackage: api\ngenerate:\n  std-http-server: true\n  models: true\noutput: gen.go\n```\n\nTo implement this, check out [the Go 1.22+ `net/http` docs](#impl-stdhttp).\n\n</td>\n</tr>\n\n</table>\n\n### Go 1.22+ `net/http`\n<a name=\"impl-stdhttp\"></a>\n\nAs of Go 1.22, enhancements have been made to the routing of the `net/http` package in the standard library, which makes it a great starting point for implementing a server with, before needing to reach for another router or a full framework.\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(w http.ResponseWriter, r *http.Request)\n}\n\nfunc HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {\n\treturn HandlerWithOptions(si, StdHTTPServerOptions{\n\t\tBaseRouter: m,\n\t})\n}\n\n// HandlerWithOptions creates http.Handler with additional options\nfunc HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {\n\tm := options.BaseRouter\n\n\t// ... omitted for brevity\n\n\tm.HandleFunc(\"GET \"+options.BaseURL+\"/ping\", wrapper.GetPing)\n\n\treturn m\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/stdhttp/api/impl.go):\n\n```go\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(w http.ResponseWriter, r *http.Request) {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\t_ = json.NewEncoder(w).Encode(resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/stdhttp/api\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\tr := http.NewServeMux()\n\n\t// get an `http.Handler` that we can use\n\th := api.HandlerFromMux(server, r)\n\n\ts := &http.Server{\n\t\tHandler: h,\n\t\tAddr:    \"0.0.0.0:8080\",\n\t}\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(s.ListenAndServe())\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n> [!NOTE]\n> If you feel like you've done everything right, but are still receiving `404 page not found` errors, make sure that you've got the `go` directive in your `go.mod` updated to:\n\n```go.mod\ngo 1.22\n```\n\n</details>\n\n### Chi\n<a name=\"impl-chi\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(w http.ResponseWriter, r *http.Request)\n}\n\n// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.\nfunc HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {\n\treturn HandlerWithOptions(si, ChiServerOptions{\n\t\tBaseRouter: r,\n\t})\n}\n\n// HandlerWithOptions creates http.Handler with additional options\nfunc HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {\n\tr := options.BaseRouter\n\n\t// ...\n\n\tr.Group(func(r chi.Router) {\n\t\tr.Get(options.BaseURL+\"/ping\", wrapper.GetPing)\n\t})\n\n\treturn r\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/chi/api/impl.go):\n\n```go\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(w http.ResponseWriter, r *http.Request) {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\t_ = json.NewEncoder(w).Encode(resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/chi/api\"\n\t\"github.com/go-chi/chi/v5\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\tr := chi.NewMux()\n\n\t// get an `http.Handler` that we can use\n\th := api.HandlerFromMux(server, r)\n\n\ts := &http.Server{\n\t\tHandler: h,\n\t\tAddr:    \"0.0.0.0:8080\",\n\t}\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(s.ListenAndServe())\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### gorilla/mux\n<a name=\"impl-gorillamux\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(w http.ResponseWriter, r *http.Request)\n}\n\n// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.\nfunc HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {\n\treturn HandlerWithOptions(si, GorillaServerOptions{\n\t\tBaseRouter: r,\n\t})\n}\n\n// HandlerWithOptions creates http.Handler with additional options\nfunc HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {\n\tr := options.BaseRouter\n\n\t// ...\n\n\tr.HandleFunc(options.BaseURL+\"/ping\", wrapper.GetPing).Methods(\"GET\")\n\n\treturn r\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/gorillamux/api/impl.go):\n\n```go\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(w http.ResponseWriter, r *http.Request) {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\t_ = json.NewEncoder(w).Encode(resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/gorillamux/api\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\tr := mux.NewRouter()\n\n\t// get an `http.Handler` that we can use\n\th := api.HandlerFromMux(server, r)\n\n\ts := &http.Server{\n\t\tHandler: h,\n\t\tAddr:    \"0.0.0.0:8080\",\n\t}\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(s.ListenAndServe())\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### Echo server\n<a name=\"impl-echo\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(ctx echo.Context) error\n}\n\n// This is a simple interface which specifies echo.Route addition functions which\n// are present on both echo.Echo and echo.Group, since we want to allow using\n// either of them for path registration\ntype EchoRouter interface {\n\t// ...\n\tGET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route\n\t// ...\n}\n\n// RegisterHandlers adds each server route to the EchoRouter.\nfunc RegisterHandlers(router EchoRouter, si ServerInterface) {\n\tRegisterHandlersWithBaseURL(router, si, \"\")\n}\n\n// Registers handlers, and prepends BaseURL to the paths, so that the paths\n// can be served under a prefix.\nfunc RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {\n\t// ...\n\n\trouter.GET(baseURL+\"/ping\", wrapper.GetPing)\n\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/echo/api/impl.go):\n\n```go\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(ctx echo.Context) error {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\treturn ctx.JSON(http.StatusOK, resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/echo/api\"\n\t\"github.com/labstack/echo/v4\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\te := echo.New()\n\n\tapi.RegisterHandlers(e, server)\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(e.Start(\"0.0.0.0:8080\"))\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### Fiber server\n<a name=\"impl-fiber\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(c *fiber.Ctx) error\n}\n\n// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.\nfunc RegisterHandlers(router fiber.Router, si ServerInterface) {\n\tRegisterHandlersWithOptions(router, si, FiberServerOptions{})\n}\n\n// RegisterHandlersWithOptions creates http.Handler with additional options\nfunc RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {\n\t// ...\n\n\trouter.Get(options.BaseURL+\"/ping\", wrapper.GetPing)\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/fiber/api/impl.go):\n\n```go\nimport (\n\t\"net/http\"\n\n\t\"github.com/gofiber/fiber/v2\"\n)\n\n// ensure that we've conformed to the `ServerInterface` with a compile-time check\nvar _ ServerInterface = (*Server)(nil)\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(ctx *fiber.Ctx) error {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\treturn ctx.\n\t\tStatus(http.StatusOK).\n\t\tJSON(resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/fiber/api\"\n\t\"github.com/gofiber/fiber/v2\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\tapp := fiber.New()\n\n\tapi.RegisterHandlers(app, server)\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(app.Listen(\"0.0.0.0:8080\"))\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### Gin server\n<a name=\"impl-gin\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(c *gin.Context)\n}\n\n// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.\nfunc RegisterHandlers(router gin.IRouter, si ServerInterface) {\n\tRegisterHandlersWithOptions(router, si, GinServerOptions{})\n}\n\n// RegisterHandlersWithOptions creates http.Handler with additional options\nfunc RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {\n\t// ...\n\n\trouter.GET(options.BaseURL+\"/ping\", wrapper.GetPing)\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/gorillamux/api/impl.go):\n\n```go\nimport (\n\t\"net/http\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(ctx *gin.Context) {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\tctx.JSON(http.StatusOK, resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/gin/api\"\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\tr := gin.Default()\n\n\tapi.RegisterHandlers(r, server)\n\n\t// And we serve HTTP until the world ends.\n\n\ts := &http.Server{\n\t\tHandler: r,\n\t\tAddr:    \"0.0.0.0:8080\",\n\t}\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(s.ListenAndServe())\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### Iris server\n<a name=\"impl-iris\"></a>\n\nFor instance, let's take this straightforward specification:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Minimal ping API server\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\ncomponents:\n  schemas:\n    # base types\n    Pong:\n      type: object\n      required:\n        - ping\n      properties:\n        ping:\n          type: string\n          example: pong\n```\n\nThis then generates code such as:\n\n```go\n// Pong defines model for Pong.\ntype Pong struct {\n\tPing string `json:\"ping\"`\n}\n\n// ServerInterface represents all server handlers.\ntype ServerInterface interface {\n\n\t// (GET /ping)\n\tGetPing(ctx iris.Context)\n}\n\n// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.\nfunc RegisterHandlers(router *iris.Application, si ServerInterface) {\n\tRegisterHandlersWithOptions(router, si, IrisServerOptions{})\n}\n\n// RegisterHandlersWithOptions creates http.Handler with additional options\nfunc RegisterHandlersWithOptions(router *iris.Application, si ServerInterface, options IrisServerOptions) {\n\t// ...\n\n\trouter.Get(options.BaseURL+\"/ping\", wrapper.GetPing)\n\n\trouter.Build()\n}\n```\n\nTo implement this HTTP server, we need to write the following code in our [`api/impl.go`](examples/minimal-server/gorillamux/api/impl.go):\n\n```go\nimport (\n\t\"net/http\"\n\n\t\"github.com/kataras/iris/v12\"\n)\n\n// optional code omitted\n\ntype Server struct{}\n\nfunc NewServer() Server {\n\treturn Server{}\n}\n\n// (GET /ping)\nfunc (Server) GetPing(ctx iris.Context) {\n\tresp := Pong{\n\t\tPing: \"pong\",\n\t}\n\n\tctx.StatusCode(http.StatusOK)\n\t_ = ctx.JSON(resp)\n}\n```\n\nNow we've got our implementation, we can then write the following code to wire it up and get a running server:\n\n```go\nimport (\n\t\"log\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/minimal-server/iris/api\"\n\t\"github.com/kataras/iris/v12\"\n)\n\nfunc main() {\n\t// create a type that satisfies the `api.ServerInterface`, which contains an implementation of every operation from the generated code\n\tserver := api.NewServer()\n\n\ti := iris.Default()\n\n\tapi.RegisterHandlers(i, server)\n\n\t// And we serve HTTP until the world ends.\n\tlog.Fatal(i.Listen(\"0.0.0.0:8080\"))\n}\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n### Strict server\n\n`oapi-codegen` also supports generating a server that is much more strict with the contract that the implementer requires, and takes inspiration from server-side code generation for RPC servers.\n\nThis takes the boilerplate reduction from the non-strict servers and adds additional boilerplate reduction, allowing you to make the following changes to your function signatures:\n\n```diff\n-FindPets(w http.ResponseWriter, r *http.Request, params FindPetsParams)\n+FindPets(ctx context.Context, request FindPetsRequestObject) (FindPetsResponseObject, error)\n```\n\nThis is the highest level of strictness that `oapi-codegen` supports right now, and it's a good idea to start with this if you want the most guardrails to simplify developing your APIs.\n\nThe strict server has support for:\n\n- multiple request/response media types and status codes on a given operation\n- first-class support for `multipart/form-data` and `application/x-www-form-urlencoded` requests\n- returning an [HTTP 500 Internal Server Error](https://http.cat/500), when an `error` is returned from a function\n- automagic (un)marshalling of request/responses, and setting `content-type` and HTTP status codes on responses\n- binding request values to a struct, a `multipart.Reader` or providing a `io.Reader`\n\nYou can see a little more detail of the generated code in the [\"What does it look like\"](#what-does-it-look-like-strict) section.\n\n> [!NOTE]\n> To configure the strict server generation, you must specify another server to be generated. For instance:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: api\ngenerate:\n  # NOTE another server must be added!\n  chi-server: true\n  strict-server: true\noutput: server.gen.go\n```\n\n> [!NOTE]\n> This doesn't include [validation of incoming requests](#requestresponse-validation-middleware).\n\n## Generating API clients\n\nAs well as generating the server-side boilerplate, `oapi-codegen` can also generate API clients.\n\nThis aims to be an API client that can be used to interact with the methods of the API, and is perfectly suited for production usage.\n\nHowever, if you were looking for a slightly more SDK-style approach, or a mix of generated tests and/or documentation, this API client may not be for you, and you may want to look at alternate tooling.\n\nFor instance, given an `api.yaml`:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Generate models\npaths:\n  /client:\n    get:\n      operationId: getClient\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ClientType\"\n    put:\n      operationId: updateClient\n      responses:\n        400:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                required:\n                - code\ncomponents:\n  schemas:\n    ClientType:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    # NOTE that this is not generated by default because it's not referenced. If you want it, you need to use the following YAML configuration:\n    #\n    # output-options:\n    #   skip-prune: true\n    Unreferenced:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n```\n\nAnd a `cfg.yaml`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: client\noutput: client.gen.go\ngenerate:\n  models: true\n  client: true\n```\n\nAnd a `generate.go`:\n\n```go\npackage client\n\n//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg.yaml api.yaml\n```\n\nThis would then generate:\n\n```go\npackage client\n\n// ...\n\n// ClientType defines model for ClientType.\ntype ClientType struct {\n\tName string `json:\"name\"`\n}\n\n// ...\n\n// Client which conforms to the OpenAPI3 specification for this service.\ntype Client struct {\n\t// The endpoint of the server conforming to this interface, with scheme,\n\t// https://api.deepmap.com for example. This can contain a path relative\n\t// to the server, such as https://api.deepmap.com/dev-test, and all the\n\t// paths in the swagger spec will be appended to the server.\n\tServer string\n\n\t// Doer for performing requests, typically a *http.Client with any\n\t// customized settings, such as certificate chains.\n\tClient HttpRequestDoer\n\n\t// A list of callbacks for modifying requests which are generated before sending over\n\t// the network.\n\tRequestEditors []RequestEditorFn\n}\n\n// ...\n\n// The interface specification for the client above.\ntype ClientInterface interface {\n\t// GetClient request\n\tGetClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)\n\n\t// UpdateClient request\n\tUpdateClient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)\n}\n\n// ...\n\n// ClientWithResponsesInterface is the interface specification for the client with responses above.\ntype ClientWithResponsesInterface interface {\n\t// GetClientWithResponse request\n\tGetClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClientResponse, error)\n\n\t// UpdateClientWithResponse request\n\tUpdateClientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UpdateClientResponse, error)\n}\n\ntype GetClientResponse struct {\n\tBody         []byte\n\tHTTPResponse *http.Response\n\tJSON200      *ClientType\n}\n\n// ...\n```\n\nWith this generated client, it is then possible to construct and utilise the client, for instance:\n\n```go\npackage client_test\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/examples/client\"\n)\n\nfunc TestClient_canCall() {\n\t// custom HTTP client\n\thc := http.Client{}\n\n\t// with a raw http.Response\n\t{\n\t\tc, err := client.NewClient(\"http://localhost:1234\", client.WithHTTPClient(&hc))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tresp, err := c.GetClient(context.TODO())\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif resp.StatusCode != http.StatusOK {\n\t\t\tlog.Fatalf(\"Expected HTTP 200 but received %d\", resp.StatusCode)\n\t\t}\n\t}\n\n\t// or to get a struct with the parsed response body\n\t{\n\t\tc, err := client.NewClientWithResponses(\"http://localhost:1234\", client.WithHTTPClient(&hc))\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tresp, err := c.GetClientWithResponse(context.TODO())\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tif resp.StatusCode() != http.StatusOK {\n\t\t\tlog.Fatalf(\"Expected HTTP 200 but received %d\", resp.StatusCode())\n\t\t}\n\n\t\tfmt.Printf(\"resp.JSON200: %v\\n\", resp.JSON200)\n\t}\n\n}\n```\n\n## Generating API models\n\nIf you're looking to only generate the models for interacting with a remote service, for instance if you need to hand-roll the API client for whatever reason, you can do this as-is.\n\n> [!TIP]\n> Try to define as much as possible within the `#/components/schemas` object, as `oapi-codegen` will generate all the types here.\n>\n> Although we can generate some types based on inline definitions in i.e. a path's response type, it isn't always possible to do this, or if it is generated, can be a little awkward to work with as it may be defined as an anonymous struct.\n\nFor instance, given an `api.yaml`:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Generate models\npaths:\n  /client:\n    get:\n      operationId: getClient\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                # NOTE that Client is generated here, because it's within #/components/schemas\n                $ref: \"#/components/schemas/Client\"\n    put:\n      operationId: updateClient\n      responses:\n        400:\n          content:\n            application/json:\n              # NOTE that this anonymous object is /not/ generated because it's an anonymous, but would be generated if using `generate: client`\n              # See https://github.com/oapi-codegen/oapi-codegen/issues/1512\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                required:\n                - code\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    # NOTE that this is not generated by default because it's not referenced. If you want it, you need to use the following YAML configuration:\n    #\n    # output-options:\n    #   skip-prune: true\n    Unreferenced:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n```\n\nAnd a `cfg.yaml`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: onlymodels\noutput: only-models.gen.go\ngenerate:\n  models: true\n```\n\nAnd a `generate.go`:\n\n```go\npackage onlymodels\n\n//go:generate go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg.yaml api.yaml\n```\n\nThis would then generate:\n\n```go\npackage onlymodels\n\n// Client defines model for Client.\ntype Client struct {\n\tName string `json:\"name\"`\n}\n```\n\nIf you wish to also generate the `Unreferenced` type, you would need the following `cfg.yaml`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: onlymodels\noutput: only-models.gen.go\ngenerate:\n  models: true\noutput-options:\n  # NOTE that this is only required for the `Unreferenced` type\n  skip-prune: true\n```\n\nFor a complete example see [`examples/only-models`](examples/only-models).\n\n## Splitting large OpenAPI specs across multiple packages (aka \"Import Mapping\" or \"external references\")\n<a name=import-mapping></a>\n\nWhen you've got a large OpenAPI specification, you may find it useful to split the contents of the spec across multiple files, using external references, such as:\n\n```yaml\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n```\n\nThis is supported by `oapi-codegen`, through the ability to perform \"Import Mapping\".\n\nFor instance, let's say that we have a large API, which has a user-facing API and an admin API, both of which use a common set of API models.\n\nIn this case, we may have an Admin API that looks like:\n\n```yaml\n# admin/api.yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Admin API\n  description: The admin-only portion of the API, which has its own separate OpenAPI spec\ntags:\n  - name: admin\n    description: Admin API endpoints\n  - name: user\n    description: API endpoint that pertains to user data\npaths:\n  /admin/user/{id}:\n    get:\n      tags:\n        - admin\n        - user\n      summary: Get a user's details\n      operationId: getUserById\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '../common/api.yaml#/components/schemas/User'\n```\n\nThis references the common spec:\n\n```yaml\n# common/api.yaml\ncomponents:\n  schemas:\n    User:\n      type: object\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n      required:\n        - name\n```\n\nSo how do we get `oapi-codegen` to generate our code?\n\n### Using a single package with multiple OpenAPI specs\n\n<a name=import-mapping-self></a>\n\n> [!TIP]\n> Since `oapi-codegen` v2.4.0, it is now possible to split large OpenAPI specifications into the same Go package, using the \"self\" mapping (denoted by a `-`) when using Import Mapping.\n>\n> This is an improvement on the previous model, which would require splitting files across multiple packages.\n\n> [!NOTE]\n> You still need to have multiple `go generate`s, and any other configuration files.\n\nTo get `oapi-codegen`'s single-package support working, we need multiple calls to `oapi-codegen`, one call per OpenAPI spec file:\n\n```sh\n$ go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg-api.yaml ../admin/api.yaml\n$ go run github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen -config cfg-user.yaml ../common/api.yaml\n```\n\nThis therefore means that we need multiple configuration files, such as `cfg-api.yaml`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: samepackage\noutput: server.gen.go\ngenerate:\n  models: true\n  chi-server: true\n  strict-server: true\noutput-options:\n  # to make sure that all types are generated\n  skip-prune: true\nimport-mapping:\n  user.yaml: \"-\"\n```\n\nAnd then our `cfg-user.yaml`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: samepackage\noutput: user.gen.go\ngenerate:\n  models: true\noutput-options:\n  # to make sure that all types are generated\n  skip-prune: true\n```\n\nFrom here, `oapi-codegen` will generate multiple Go files, all within the same package, which can be used to break down your large OpenAPI specifications, and generate only the subsets of code needed for each part of the spec.\n\nCheck out [the import-mapping/samepackage example](examples/import-mapping/samepackage) for the full code.\n\n### Using multiple packages, with one OpenAPI spec per package\n\nTo get `oapi-codegen`'s multi-package support working, we need to set up our directory structure:\n\n```\n├── admin\n│   ├── cfg.yaml\n│   └── generate.go\n└── common\n    ├── cfg.yaml\n    └── generate.go\n```\n\nWe could start with our configuration file for our admin API spec:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\n# admin/cfg.yaml\npackage: admin\noutput: server.gen.go\ngenerate:\n  models: true\n  chi-server: true\noutput-options:\n  # to make sure that all types are generated\n  skip-prune: true\n# NOTE that this won't work, as it's missing `import-mapping`\n```\n\nIf we were to run `oapi-codegen`, this will fail with the following error\n\n```\nerror generating code: error creating operation definitions: error generating response definitions: error generating request body definition: error turning reference (../common/api.yaml#/components/schemas/User) into a Go type: unrecognized external reference '../common/api.yaml'; please provide the known import for this reference using option --import-mapping\n```\n\nThis is because `oapi-codegen` requires the `import-mapping`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: admin\noutput: server.gen.go\ngenerate:\n  models: true\n  chi-server: true\noutput-options:\n  # to make sure that all types are generated\n  skip-prune: true\nimport-mapping:\n  # for a given file/URL that is $ref'd, point `oapi-codegen` to the Go package that this spec is generated into, to perform Go package imports\n  ../common/api.yaml: github.com/oapi-codegen/oapi-codegen/v2/examples/import-mapping/common\n```\n\nThis will then generate the following code:\n\n```go\npackage admin\n\nimport (\n\t// ...\n\texternalRef0 \"github.com/oapi-codegen/oapi-codegen/v2/examples/import-mapping/common\"\n)\n\n// User defines model for User.\ntype User = externalRef0.User\n```\n\nIf you don't want to do this, an alternate option is to [use a single package, with multiple OpenAPI spec files for that given package](#import-mapping-self) or to [bundle your multiple OpenAPI files](https://www.jvt.me/posts/2022/02/10/bundle-openapi/) into a single spec.\n\nCheck out [the import-mapping/multiplepackages example](examples/import-mapping/multiplepackages/) for the full code.\n\n## Modifying the input OpenAPI Specification\n\nPrior to `oapi-codegen` v2.4.0, users wishing to override specific configuration, for instance taking advantage of extensions such as `x-go-type`  would need to modify the OpenAPI specification they are using.\n\nIn a lot of cases, this OpenAPI specification would be produced by a different team to the consumers (or even a different company) and so asking them to make changes like this were unreasonable.\n\nThis would lead to the API consumers needing to vendor the specification from the producer (which is [our recommendation anyway](#https-paths)) and then make any number of local changes to the specification to make it generate code that looks reasonable.\n\nHowever, in the case that a consumer would update their specification, they would likely end up with a number of merge conflicts.\n\nNow, as of `oapi-codegen` v2.4.0, it is now possible to make changes to the input OpenAPI specification _without needing to modify it directly_.\n\nThis takes advantage of the [OpenAPI Overlay specification](https://github.com/OAI/Overlay-Specification), which is a stable specification.\n\n> [!CAUTION]\n> Beware! Here (may) be dragons.\n>\n> The Overlay specification requires the use of JSON Path, which some users may find difficult to write and/or maintain.\n>\n> We still heavily recommend using Overlay functionality, but would like users to be aware of this.\n>\n> There is a [proposed modification to the specification](https://github.com/OAI/Overlay-Specification/pull/32) which would relax the need for JSON Path as the targeting mechanism.\n\nFor instance, let's say that we have the following OpenAPI specification, which provides insight into an internal endpoint that we should not be generating any code for (denoted by `x-internal`):\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: \"Example to indicate how to use the OpenAPI Overlay specification (https://github.com/OAI/Overlay-Specification)\"\npaths:\n  /ping:\n    get:\n      responses:\n        '200':\n          description: pet response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pong'\n    delete:\n      x-internal: true\n      responses:\n        '202':\n          content: {}\n```\n\nIf we were to run `oapi-codegen` with out-of-the-box functionality, this would then lead to the DELETE endpoint being generated, which we don't want.\n\nInstead, we can define the following `overlay.yaml`:\n\n\n```yaml\noverlay: 1.0.0\ninfo:\n  title: Overlay\n  version: 0.0.0\nactions:\n- target: \"$\"\n  description: Perform a structural overlay, which can be more readable, as it's clear what the shape of the document is\n  update:\n    info:\n      x-overlay-applied: structured-overlay\n    paths:\n      /ping:\n        get:\n          responses:\n            '200':\n              description: Perform a ping request\n- target: $.paths.*[?(@.x-internal)]\n  description: Remove internal endpoints (noted by x-internal)\n  remove: true\n- target: $.paths.*.*[?(@.x-internal)]\n  description: Remove internal endpoints (noted by x-internal)\n  remove: true\n```\n\nAnd our configuration file for `oapi-codegen`:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\npackage: api\noutput: ping.gen.go\ngenerate:\n  models: true\n  gorilla-server: true\n  embedded-spec: true\noutput-options:\n  overlay:\n    path: overlay.yaml\n```\n\nThis then completely removes the DELETE endpoint _before_ we even start to parse the specification in `oapi-codegen`, so it's as if your specification was provided without that endpoint.\n\nAdditionally, we can override other pieces of metadata, such as the description for operations.\n\nCheck out [the overlay example](examples/overlay/) for the full code, and some more complex examples.\n\n## Generating Nullable types\n\nIt's possible that you want to be able to determine whether a field isn't sent, is sent as `null` or has a value.\n\nFor instance, if you had the following OpenAPI property:\n\n```yaml\nS:\n  type: object\n  properties:\n    Field:\n      type: string\n      nullable: true\n    required: []\n```\n\nThe default behaviour in `oapi-codegen` is to generate:\n\n```go\ntype S struct {\n\tField *string `json:\"field,omitempty\"`\n}\n```\n\nHowever, you lose the ability to understand the three cases, as there's no way to distinguish two of the types from each other:\n\n- is this field not sent? (Can be checked with `S.Field == nil`)\n- is this field `null`? (Can be checked with `S.Field == nil`)\n- does this field have a value? (`S.Field != nil && *S.Field == \"123\"`)\n\nAs of `oapi-codegen` [v2.1.0](https://github.com/oapi-codegen/oapi-codegen/releases/tag/v2.1.0) it is now possible to represent this with the `nullable.Nullable` type from [our new library, oapi-codegen/nullable](https://github.com/oapi-codegen/nullable).\n\nIf you configure your generator's Output Options to opt-in to this behaviour, as so:\n\n```yaml\noutput-options:\n  nullable-type: true\n```\n\nYou will now receive the following output:\n\n```go\ntype S struct {\n    // note that there's no pointer here, just `omitempty`\n    Field nullable.Nullable[string] `json:\"field,omitempty\"`\n}\n```\n\n## OpenAPI extensions\n\nAs well as the core OpenAPI support, we also support the following OpenAPI extensions, as denoted by the [OpenAPI Specification Extensions](https://spec.openapis.org/oas/v3.0.3#specification-extensions).\n\n<table>\n\n<tr>\n<th>\nExtension\n</th>\n<th>\nDescription\n</th>\n<th>\nExample usage\n</th>\n</tr>\n\n<tr>\n<td>\n\n`x-go-type` <br>\n`x-go-type-import`\n\n</td>\n<td>\nOverride the generated type definition (and optionally, add an import from another package)\n</td>\n<td>\n<details>\n\nUsing the `x-go-type` (and optionally, `x-go-type-import` when you need to import another package) allows overriding the type that `oapi-codegen` determined the generated type should be.\n\nWe can see this at play with the following schemas:\n\n```yaml\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          # this is a bit of a contrived example, as you could instead use\n          # `format: uuid` but it explains how you'd do this when there may be\n          # a clash, for instance if you already had a `uuid` package that was\n          # being imported, or ...\n          x-go-type: googleuuid.UUID\n          x-go-type-import:\n            path: github.com/google/uuid\n            name: googleuuid\n        id:\n          type: number\n          # ... this is also a bit of a contrived example, as you could use\n          # `type: integer` but in the case that you know better than what\n          # oapi-codegen is generating, like so:\n          x-go-type: int64\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId   *int64          `json:\"id,omitempty\"`\n\tName googleuuid.UUID `json:\"name\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xgotype/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-go-type-skip-optional-pointer`\n\n</td>\n<td>\nDo not add a pointer type for optional fields in structs\n</td>\n<td>\n<details>\n\nBy default, `oapi-codegen` will generate a pointer for optional fields.\n\nUsing the `x-go-type-skip-optional-pointer` extension allows omitting that pointer.\n\nWe can see this at play with the following schemas:\n\n```yaml\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n          x-go-type-skip-optional-pointer: true\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId   float32 `json:\"id,omitempty\"`\n\tName string  `json:\"name\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xgotypeskipoptionalpointer/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-go-name`\n\n</td>\n<td>\nOverride the generated name of a field or a type\n</td>\n<td>\n<details>\n\nBy default, `oapi-codegen` will attempt to generate the name of fields and types in as best a way it can.\n\nHowever, sometimes, the name doesn't quite fit what your codebase standards are, or the intent of the field, so you can override it with `x-go-name`.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-go-name\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      # can be used on a type\n      x-go-name: ClientRenamedByExtension\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n          # or on a field\n          x-go-name: AccountIdentifier\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientRenamedByExtension defines model for ClientWithExtension.\ntype ClientRenamedByExtension struct {\n\tAccountIdentifier *float32 `json:\"id,omitempty\"`\n\tName              string   `json:\"name\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xgoname/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-go-type-name`\n\n</td>\n<td>\nOverride the generated name of a type\n</td>\n<td>\n<details>\n\n> [!NOTE]\n> Notice that this is subtly different to the `x-go-name`, which also applies to _fields_ within `struct`s.\n\nBy default, `oapi-codegen` will attempt to generate the name of types in as best a way it can.\n\nHowever, sometimes, the name doesn't quite fit what your codebase standards are, or the intent of the field, so you can override it with `x-go-name`.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-go-type-name\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      x-go-type-name: ClientRenamedByExtension\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n          # NOTE attempting a `x-go-type-name` here is a no-op, as we're not producing a _type_ only a _field_\n          x-go-type-name: ThisWillNotBeUsed\n```\n\nFrom here, we now get two different models and a type alias:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension = ClientRenamedByExtension\n\n// ClientRenamedByExtension defines model for .\ntype ClientRenamedByExtension struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xgotypename/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-omitempty`\n\n</td>\n<td>\nForce the presence of the JSON tag `omitempty` on a field\n</td>\n<td>\n<details>\n\nIn a case that you may want to add the JSON struct tag `omitempty` to types that don't have one generated by default - for instance a required field - you can use the `x-omitempty` extension.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-omitempty\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          # for some reason, you may want this behaviour, even though it's a required field\n          x-omitempty: true\n        id:\n          type: number\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name,omitempty\"`\n}\n```\n\nNotice that the `ComplexField` is still generated in full, but the type will then be ignored with JSON marshalling.\n\nYou can see this in more detail in [the example code](examples/extensions/xgojsonignore/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-go-json-ignore`\n\n</td>\n<td>\nWhen (un)marshaling JSON, ignore field(s)\n</td>\n<td>\n<details>\n\nBy default, `oapi-codegen` will generate `json:\"...\"` struct tags for all fields in a struct, so JSON (un)marshaling works.\n\nHowever, sometimes, you want to omit fields, which can be done with the `x-go-json-ignore` extension.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-go-json-ignore\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        complexField:\n          type: object\n          properties:\n            name:\n              type: string\n            accountName:\n              type: string\n          # ...\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        complexField:\n          type: object\n          properties:\n            name:\n              type: string\n            accountName:\n              type: string\n          # ...\n          x-go-json-ignore: true\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tComplexField *struct {\n\t\tAccountName *string `json:\"accountName,omitempty\"`\n\t\tName        *string `json:\"name,omitempty\"`\n\t} `json:\"complexField,omitempty\"`\n\tName string `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tComplexField *struct {\n\t\tAccountName *string `json:\"accountName,omitempty\"`\n\t\tName        *string `json:\"name,omitempty\"`\n\t} `json:\"-\"`\n\tName string `json:\"name\"`\n}\n```\n\nNotice that the `ComplexField` is still generated in full, but the type will then be ignored with JSON marshalling.\n\nYou can see this in more detail in [the example code](examples/extensions/xgojsonignore/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-oapi-codegen-extra-tags`\n\n</td>\n<td>\nGenerate arbitrary struct tags to fields\n</td>\n<td>\n<details>\n\nIf you're making use of a field's struct tags to i.e. apply validation, decide whether something should be logged, etc, you can use `x-oapi-codegen-extra-tags` to set additional tags for your generated types.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-oapi-codegen-extra-tags\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n        - id\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n        - id\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n          x-oapi-codegen-extra-tags:\n            validate: \"required,min=1,max=256\"\n            safe-to-log: \"true\"\n            gorm: primarykey\n```\n\nFrom here, we now get two different models:\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   float32 `json:\"id\"`\n\tName string  `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId   float32 `gorm:\"primarykey\" json:\"id\" safe-to-log:\"true\" validate:\"required,min=1,max=256\"`\n\tName string  `json:\"name\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xoapicodegenextratags/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-enum-varnames` / `x-enumNames`\n\n</td>\n<td>\nOverride generated variable names for enum constants\n</td>\n<td>\n<details>\n\nWhen consuming an enum value from an external system, the name may not produce a nice variable name. Using the `x-enum-varnames` extension allows overriding the name of the generated variable names.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-enumNames and x-enum-varnames\ncomponents:\n  schemas:\n    ClientType:\n      type: string\n      enum:\n        - ACT\n        - EXP\n    ClientTypeWithNamesExtension:\n      type: string\n      enum:\n        - ACT\n        - EXP\n      x-enumNames:\n        - Active\n        - Expired\n    ClientTypeWithVarNamesExtension:\n      type: string\n      enum:\n        - ACT\n        - EXP\n      x-enum-varnames:\n        - Active\n        - Expired\n```\n\nFrom here, we now get two different forms of the same enum definition.\n\n```go\n// Defines values for ClientType.\nconst (\n\tACT ClientType = \"ACT\"\n\tEXP ClientType = \"EXP\"\n)\n\n// ClientType defines model for ClientType.\ntype ClientType string\n\n// Defines values for ClientTypeWithExtension.\nconst (\n\tActive  ClientTypeWithExtension = \"ACT\"\n\tExpired ClientTypeWithExtension = \"EXP\"\n)\n\n// ClientTypeWithExtension defines model for ClientTypeWithExtension.\ntype ClientTypeWithExtension string\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xenumvarnames/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-deprecated-reason`\n\n</td>\n<td>\nAdd a GoDoc deprecation warning to a type\n</td>\n<td>\n<details>\n\nWhen an OpenAPI type is deprecated, a deprecation warning can be added in the GoDoc using `x-deprecated-reason`.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-deprecated-reason\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n          deprecated: true\n          x-deprecated-reason: Don't use because reasons\n        id:\n          type: number\n          # NOTE that this doesn't generate, as no `deprecated: true` is set\n          x-deprecated-reason: NOTE you shouldn't see this, as you've not deprecated this field\n```\n\nFrom here, we now get two different forms of the same enum definition.\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tId   *float32 `json:\"id,omitempty\"`\n\tName string   `json:\"name\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId *float32 `json:\"id,omitempty\"`\n\t// Deprecated: Don't use because reasons\n\tName string `json:\"name\"`\n}\n```\n\nNotice that because we've not set `deprecated: true` to the `name` field, it doesn't generate a deprecation warning.\n\nYou can see this in more detail in [the example code](examples/extensions/xdeprecatedreason/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-order`\n\n</td>\n<td>\nExplicitly order struct fields\n</td>\n<td>\n<details>\n\nWhether you like certain fields being ordered before others, or you want to perform more efficient packing of your structs, the `x-order` extension is here for you.\n\nNote that `x-order` is 1-indexed - `x-order: 0` is not a valid value.\n\nWhen an OpenAPI type is deprecated, a deprecation warning can be added in the GoDoc using `x-deprecated-reason`.\n\nWe can see this at play with the following schemas:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-order\ncomponents:\n  schemas:\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        a_name:\n          type: string\n        id:\n          type: number\n    ClientWithExtension:\n      type: object\n      required:\n        - name\n      properties:\n        a_name:\n          type: string\n          x-order: 2\n        id:\n          type: number\n          x-order: 1\n```\n\nFrom here, we now get two different forms of the same type definition.\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tAName *string  `json:\"a_name,omitempty\"`\n\tId    *float32 `json:\"id,omitempty\"`\n}\n\n// ClientWithExtension defines model for ClientWithExtension.\ntype ClientWithExtension struct {\n\tId    *float32 `json:\"id,omitempty\"`\n\tAName *string  `json:\"a_name,omitempty\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xorder/).\n\n</details>\n</td>\n</tr>\n\n<tr>\n<td>\n\n`x-oapi-codegen-only-honour-go-name`\n\n</td>\n<td>\nOnly honour the `x-go-name` when generating field names\n</td>\n<td>\n<details>\n\n> [!WARNING]\n> Using this option may lead to cases where `oapi-codegen`'s rewriting of field names to prevent clashes with other types, or to prevent including characters that may not be valid Go field names.\n\nIn some cases, you may not want use the inbuilt options for converting an OpenAPI field name to a Go field name, such as the `name-normalizer: \"ToCamelCaseWithInitialisms\"`, and instead trust the name that you've defined for the type better.\n\nIn this case, you can use `x-oapi-codegen-only-honour-go-name` to enforce this, alongside specifying the `allow-unexported-struct-field-names` compatibility option.\n\nThis allows you to take a spec such as:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: x-oapi-codegen-only-honour-go-name\ncomponents:\n  schemas:\n    TypeWithUnexportedField:\n      description: A struct will be output where one of the fields is not exported\n      properties:\n        name:\n          type: string\n        id:\n          type: string\n          # NOTE that there is an explicit usage of a lowercase character\n          x-go-name: accountIdentifier\n          x-oapi-codegen-extra-tags:\n            json: \"-\"\n          x-oapi-codegen-only-honour-go-name: true\n```\n\nAnd we'll generate:\n\n```go\n// TypeWithUnexportedField A struct will be output where one of the fields is not exported\ntype TypeWithUnexportedField struct {\n\taccountIdentifier *string `json:\"-\"`\n\tName              *string `json:\"name,omitempty\"`\n}\n```\n\nYou can see this in more detail in [the example code](examples/extensions/xoapicodegenonlyhonourgoname).\n\n</details>\n</td>\n</tr>\n\n</table>\n\n## Request/response validation middleware\n\nThe generated code that `oapi-codegen` produces has some validation for some incoming data, such as checking for required headers, and when using the [strict server](#strict-server) you get some more validation around the correct usage of the response types.\n\nHowever, this leaves a lot of validation that needs to be done, which can be tedious to hand-write this logic, especially for large or complex OpenAPI specifications.\n\nTo simplify this, we use a middleware, which provides the request validation. The middleware you want to use depends on the server you're using:\n\n<table>\n\n<tr>\n<th>\nServer\n</th>\n<th>\nMiddleware library\n</th>\n</tr>\n\n<tr>\n<td>\n\n[Chi](https://github.com/go-chi/chi)\n\n</td>\n<td>\n\n[nethttp-middleware](https://github.com/oapi-codegen/nethttp-middleware)\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[Echo](https://github.com/labstack/echo)\n\n</td>\n<td>\n\n[echo-middleware](https://github.com/oapi-codegen/echo-middleware)\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[Fiber](https://github.com/gofiber/fiber)\n\n</td>\n<td>\n\n[fiber-middleware](https://github.com/oapi-codegen/fiber-middleware)\n\n</td>\n\n</tr>\n\n\n<tr>\n<td>\n\n[Gin](https://github.com/gin-gonic/gin)\n\n</td>\n<td>\n\n[gin-middleware](https://github.com/oapi-codegen/gin-middleware)\n\n</td>\n</tr>\n\n<tr>\n<td>\n\n[gorilla/mux](https://github.com/gorilla/mux)\n\n</td>\n<td>\n\n[nethttp-middleware](https://github.com/oapi-codegen/nethttp-middleware)\n\n</td>\n\n</tr>\n\n<tr>\n<td>\n\n[Iris](https://github.com/kataras/iris)\n\n</td>\n<td>\n\n[iris-middleware](https://github.com/oapi-codegen/iris-middleware)\n\n</td>\n\n</tr>\n\n<tr>\n<td>\n\n[1.22+ `net/http`](https://pkg.go.dev/net/http)\n\n</td>\n<td>\n\n[nethttp-middleware](https://github.com/oapi-codegen/nethttp-middleware)\n\n</td>\n\n</tr>\n\n</table>\n\n> [!NOTE]\n> It is [not currently possible](https://github.com/oapi-codegen/oapi-codegen/issues/1038) to validate the HTTP response with a middleware.\n\n> [!NOTE]\n> We're also [exploring](https://github.com/oapi-codegen/exp/issues/1) the use of [libopenapi-validator](https://github.com/pb33f/libopenapi-validator/) for request/response validation middleware\n\n## Implementing security\n\nIf you're using a specification with [Security Schemes](https://spec.openapis.org/oas/v3.0.3#security-scheme-object) and [Security Requirements](https://spec.openapis.org/oas/v3.0.3#security-requirement-object), you'll want to authenticate and authorize requests.\n\n### On the server\n\n> [!NOTE]\n> Out-of-the-box, the server-side code generated by `oapi-codegen` does not provide security validation.\n>\n> To perform authentication, you will need to use the [validation middleware](#request-response-validation-middleware).\n>\n> In the future, we plan to [implement server-side validation in the generated code](https://github.com/oapi-codegen/oapi-codegen/issues/1524)\n\nTo see how this can work, check out the [authenticated API example](examples/authenticated-api/echo).\n\n### On the client\n\nWith a generated client, you'll want to use the client's generated `WithRequestEditorFn` function to pass in a given request editor `RequestEditorFn`.\n\nFor instance:\n\n```go\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider\"\n)\n\nfunc main() {\n\tbasicAuth, err := securityprovider.NewSecurityProviderBasicAuth(\"my_user\", \"my_pass\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tclient, err := NewClient(\"https://....\", WithRequestEditorFn(basicAuth.Intercept))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tresp, err := client.GetClient(context.TODO())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Printf(\"resp.StatusCode: %v\\n\", resp.StatusCode)\n}\n```\n\nNotice that we're using a pre-built provider from the [`pkg/securityprovider` package](https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/securityprovider), which has some inbuilt support for other types of authentication, too.\n\n## Custom code generation\n\nIt is possible to extend the inbuilt code generation from `oapi-codegen` using Go's `text/template`s.\n\nYou can specify, through your configuration file, the `output-options.user-templates` setting to override the inbuilt templates and use a user-defined template.\n\n> [!NOTE]\n> Filenames given to the `user-templates` configuration must **exactly** match the filename that `oapi-codegen` is looking for\n\n### Local paths\n\nWithin your configuration file, you can specify relative or absolute paths to a file to reference for the template, such as:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\n# ...\noutput-options:\n  user-templates:\n    client-with-responses.tmpl: ./custom-template.tmpl\n    additional-properties.tmpl: /tmp/foo.bar\n    typedef.tmpl: no-prefix.tmpl\n```\n\n> [!WARN]\n> We do not interpolate `~` or `$HOME` (or other environment variables) in paths given\n\n### HTTPS paths\n\nIt is also possible to use HTTPS URLs.\n\n> [!WARNING]\n> Although possible, this does lead to `oapi-codegen` executions not necessarily being reproducible. It's recommended to vendor (copy) the OpenAPI spec into your codebase and reference it locally\n>\n> See [this blog post](https://www.jvt.me/posts/2024/04/27/github-actions-update-file/) for an example of how to use GitHub Actions to manage the updates of files across repos\n>\n> This will be disabled by default (but possible to turn back on via configuration) [in the future](https://github.com/oapi-codegen/oapi-codegen/issues/1564)\n\nTo use it, you can use the following configuration:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\n# ...\noutput-options:\n  user-templates:\n    # The following are referencing a version of the default client-with-responses.tmpl file, but loaded in through GitHub's raw.githubusercontent.com. The general form to use raw.githubusercontent.com is as follows https://raw.githubusercontent.com/<username>/<project>/<commitish>/path/to/template/template.tmpl\n\n    # Alternatively using raw.githubusercontent.com with a hash\n    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/ad5eada4f3ccc28a88477cef62ea21c17fc8aa01/pkg/codegen/templates/client-with-responses.tmpl\n    # Alternatively using raw.githubusercontent.com with a tag\n    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/v2.1.0/pkg/codegen/templates/client-with-responses.tmpl\n    # Alternatively using raw.githubusercontent.com with a branch\n    client-with-responses.tmpl: https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/master/pkg/codegen/templates/client-with-responses.tmpl\n```\n\n> [!WARNING]\n> If using URLs that pull locations from a Git repo, such as `raw.githubusercontent.com`, it is strongly encouraged to use a tag or a raw commit hash instead of a branch like `main`. Tracking a branch can lead to unexpected API drift, and loss of the ability to reproduce a build.\n\n### Inline template\n\nIt's also possible to set the templates inline in the configuration file:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\n# ...\noutput-options:\n  user-templates:\n    # NOTE the use of the `|` (pipe symbol) here to denote that this is a\n    # multi-line statement that should preserve newlines. More reading:\n    # https://stackoverflow.com/a/18708156/2257038 and\n    # https://stackoverflow.com/a/15365296/2257038\n    client-with-responses.tmpl: |\n        // ClientWithResponses builds on ClientInterface to offer response payloads\n        type ClientWithResponses struct {\n            ClientInterface\n        }\n        ...\n```\n\n### Using the Go package\n\nAlternatively, you are able to use the underlying code generation as a package, which [will be documented in the future](https://github.com/oapi-codegen/oapi-codegen/issues/1487).\n\n## Additional Properties (`additionalProperties`)\n\n[OpenAPI Schemas](https://spec.openapis.org/oas/v3.0.3.html#schema-object) implicitly accept `additionalProperties`, meaning that any fields provided, but not explicitly defined via properties on the schema are accepted as input, and propagated. When unspecified, OpenAPI defines that the `additionalProperties` field is assumed to be `true`.\n\nFor simplicity, and to remove a fair bit of duplication and boilerplate, `oapi-codegen` decides to ignore the implicit `additionalProperties: true`, and instead requires you to specify the `additionalProperties` key to generate the boilerplate.\n\n> [!NOTE]\n> In the future [this will be possible](https://github.com/oapi-codegen/oapi-codegen/issues/1514) to disable this functionality, and honour the implicit `additionalProperties: true`\n\nBelow you can see some examples of how `additionalProperties` affects the generated code.\n\n### Implicit `additionalProperties: true` / no `additionalProperties` set\n\n```yaml\ncomponents:\n  schemas:\n    Thing:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n      # implicit additionalProperties: true\n```\n\nWill generate:\n\n```go\n// Thing defines model for Thing.\ntype Thing struct {\n\tId int `json:\"id\"`\n}\n\n// with no generated boilerplate nor the `AdditionalProperties` field\n```\n\n### Explicit `additionalProperties: true`\n\n```yaml\ncomponents:\n  schemas:\n    Thing:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n      # explicit true\n      additionalProperties: true\n```\n\nWill generate:\n\n```go\n// Thing defines model for Thing.\ntype Thing struct {\n\tId                   int                    `json:\"id\"`\n\tAdditionalProperties map[string]interface{} `json:\"-\"`\n}\n\n// with generated boilerplate below\n```\n\n<details>\n\n<summary>Boilerplate</summary>\n\n```go\n\n// Getter for additional properties for Thing. Returns the specified\n// element and whether it was found\nfunc (a Thing) Get(fieldName string) (value interface{}, found bool) {\n\tif a.AdditionalProperties != nil {\n\t\tvalue, found = a.AdditionalProperties[fieldName]\n\t}\n\treturn\n}\n\n// Setter for additional properties for Thing\nfunc (a *Thing) Set(fieldName string, value interface{}) {\n\tif a.AdditionalProperties == nil {\n\t\ta.AdditionalProperties = make(map[string]interface{})\n\t}\n\ta.AdditionalProperties[fieldName] = value\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a *Thing) UnmarshalJSON(b []byte) error {\n\tobject := make(map[string]json.RawMessage)\n\terr := json.Unmarshal(b, &object)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif raw, found := object[\"id\"]; found {\n\t\terr = json.Unmarshal(raw, &a.Id)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error reading 'id': %w\", err)\n\t\t}\n\t\tdelete(object, \"id\")\n\t}\n\n\tif len(object) != 0 {\n\t\ta.AdditionalProperties = make(map[string]interface{})\n\t\tfor fieldName, fieldBuf := range object {\n\t\t\tvar fieldVal interface{}\n\t\t\terr := json.Unmarshal(fieldBuf, &fieldVal)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error unmarshaling field %s: %w\", fieldName, err)\n\t\t\t}\n\t\t\ta.AdditionalProperties[fieldName] = fieldVal\n\t\t}\n\t}\n\treturn nil\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a Thing) MarshalJSON() ([]byte, error) {\n\tvar err error\n\tobject := make(map[string]json.RawMessage)\n\n\tobject[\"id\"], err = json.Marshal(a.Id)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error marshaling 'id': %w\", err)\n\t}\n\n\tfor fieldName, field := range a.AdditionalProperties {\n\t\tobject[fieldName], err = json.Marshal(field)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error marshaling '%s': %w\", fieldName, err)\n\t\t}\n\t}\n\treturn json.Marshal(object)\n}\n```\n\n</details>\n\n\n### `additionalProperties` as `integer`s\n\n```yaml\ncomponents:\n  schemas:\n    Thing:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n      # simple type\n      additionalProperties:\n        type: integer\n```\n\nWill generate:\n\n```go\n// Thing defines model for Thing.\ntype Thing struct {\n\tId                   int            `json:\"id\"`\n\tAdditionalProperties map[string]int `json:\"-\"`\n}\n\n// with generated boilerplate below\n```\n\n<details>\n\n<summary>Boilerplate</summary>\n\n```go\n// Getter for additional properties for Thing. Returns the specified\n// element and whether it was found\nfunc (a Thing) Get(fieldName string) (value int, found bool) {\n\tif a.AdditionalProperties != nil {\n\t\tvalue, found = a.AdditionalProperties[fieldName]\n\t}\n\treturn\n}\n\n// Setter for additional properties for Thing\nfunc (a *Thing) Set(fieldName string, value int) {\n\tif a.AdditionalProperties == nil {\n\t\ta.AdditionalProperties = make(map[string]int)\n\t}\n\ta.AdditionalProperties[fieldName] = value\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a *Thing) UnmarshalJSON(b []byte) error {\n\tobject := make(map[string]json.RawMessage)\n\terr := json.Unmarshal(b, &object)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif raw, found := object[\"id\"]; found {\n\t\terr = json.Unmarshal(raw, &a.Id)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error reading 'id': %w\", err)\n\t\t}\n\t\tdelete(object, \"id\")\n\t}\n\n\tif len(object) != 0 {\n\t\ta.AdditionalProperties = make(map[string]int)\n\t\tfor fieldName, fieldBuf := range object {\n\t\t\tvar fieldVal int\n\t\t\terr := json.Unmarshal(fieldBuf, &fieldVal)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error unmarshaling field %s: %w\", fieldName, err)\n\t\t\t}\n\t\t\ta.AdditionalProperties[fieldName] = fieldVal\n\t\t}\n\t}\n\treturn nil\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a Thing) MarshalJSON() ([]byte, error) {\n\tvar err error\n\tobject := make(map[string]json.RawMessage)\n\n\tobject[\"id\"], err = json.Marshal(a.Id)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error marshaling 'id': %w\", err)\n\t}\n\n\tfor fieldName, field := range a.AdditionalProperties {\n\t\tobject[fieldName], err = json.Marshal(field)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error marshaling '%s': %w\", fieldName, err)\n\t\t}\n\t}\n\treturn json.Marshal(object)\n}\n```\n\n</details>\n\n### `additionalProperties` with an object\n\n```yaml\ncomponents:\n  schemas:\n    Thing:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n      # object\n      additionalProperties:\n        type: object\n        properties:\n          foo:\n            type: string\n```\n\nWill generate:\n\n```go\n// Thing defines model for Thing.\ntype Thing struct {\n\tId                   int `json:\"id\"`\n\tAdditionalProperties map[string]struct {\n\t\tFoo *string `json:\"foo,omitempty\"`\n\t} `json:\"-\"`\n}\n\n// with generated boilerplate below\n```\n\n<details>\n\n<summary>Boilerplate</summary>\n\n```go\n// Getter for additional properties for Thing. Returns the specified\n// element and whether it was found\nfunc (a Thing) Get(fieldName string) (value struct {\n\tFoo *string `json:\"foo,omitempty\"`\n}, found bool) {\n\tif a.AdditionalProperties != nil {\n\t\tvalue, found = a.AdditionalProperties[fieldName]\n\t}\n\treturn\n}\n\n// Setter for additional properties for Thing\nfunc (a *Thing) Set(fieldName string, value struct {\n\tFoo *string `json:\"foo,omitempty\"`\n}) {\n\tif a.AdditionalProperties == nil {\n\t\ta.AdditionalProperties = make(map[string]struct {\n\t\t\tFoo *string `json:\"foo,omitempty\"`\n\t\t})\n\t}\n\ta.AdditionalProperties[fieldName] = value\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a *Thing) UnmarshalJSON(b []byte) error {\n\tobject := make(map[string]json.RawMessage)\n\terr := json.Unmarshal(b, &object)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif raw, found := object[\"id\"]; found {\n\t\terr = json.Unmarshal(raw, &a.Id)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error reading 'id': %w\", err)\n\t\t}\n\t\tdelete(object, \"id\")\n\t}\n\n\tif len(object) != 0 {\n\t\ta.AdditionalProperties = make(map[string]struct {\n\t\t\tFoo *string `json:\"foo,omitempty\"`\n\t\t})\n\t\tfor fieldName, fieldBuf := range object {\n\t\t\tvar fieldVal struct {\n\t\t\t\tFoo *string `json:\"foo,omitempty\"`\n\t\t\t}\n\t\t\terr := json.Unmarshal(fieldBuf, &fieldVal)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error unmarshaling field %s: %w\", fieldName, err)\n\t\t\t}\n\t\t\ta.AdditionalProperties[fieldName] = fieldVal\n\t\t}\n\t}\n\treturn nil\n}\n\n// Override default JSON handling for Thing to handle AdditionalProperties\nfunc (a Thing) MarshalJSON() ([]byte, error) {\n\tvar err error\n\tobject := make(map[string]json.RawMessage)\n\n\tobject[\"id\"], err = json.Marshal(a.Id)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"error marshaling 'id': %w\", err)\n\t}\n\n\tfor fieldName, field := range a.AdditionalProperties {\n\t\tobject[fieldName], err = json.Marshal(field)\n\t\tif err != nil {\n\t\t\treturn nil, fmt.Errorf(\"error marshaling '%s': %w\", fieldName, err)\n\t\t}\n\t}\n\treturn json.Marshal(object)\n}\n```\n\n</details>\n\n## Changing the names of generated types\n\nAs of `oapi-codegen` v2.2.0, it is now possible to use the `output-options` configuration's `name-normalizer` to define the logic for how to convert an OpenAPI name (i.e. an Operation ID or a Schema name) and construct a Go type name.\n\n<details>\n\n<summary>Example, using default configuration</summary>\n\nBy default, `oapi-codegen` will perform camel-case conversion, so for a spec such as:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Example code for the `name-normalizer` output option\npaths:\n  /api/pets/{petId}:\n    get:\n      summary: Get pet given identifier.\n      operationId: getHttpPet\n      parameters:\n      - name: petId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: valid pet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - uuid\n        - name\n      properties:\n        uuid:\n          type: string\n          description: The pet uuid.\n        name:\n          type: string\n          description: The name of the pet.\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Error code\n        message:\n          type: string\n          description: Error message\n    OneOf2things:\n      description: \"Notice that the `things` is not capitalised\"\n      oneOf:\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: integer\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: string\n              format: uuid\n```\n\nThis will produce:\n\n```go\n// OneOf2things Notice that the `things` is not capitalised\ntype OneOf2things struct {\n\tunion json.RawMessage\n}\n\n// Pet defines model for Pet.\ntype Pet struct {\n\t// Name The name of the pet.\n\tName string `json:\"name\"`\n\n\t// Uuid The pet uuid.\n\tUuid string `json:\"uuid\"`\n}\n\n// The interface specification for the client above.\ntype ClientInterface interface {\n\t// GetHttpPet request\n\tGetHttpPet(ctx context.Context, petId string, reqEditors ...RequestEditorFn) (*http.Response, error)\n}\n```\n\n</details>\n\n<details>\n\n<summary>Example, using <code>ToCamelCaseWithInitialisms</code></summary>\n\nBy default, `oapi-codegen` will perform camel-case conversion, so for a spec such as:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Example code for the `name-normalizer` output option\npaths:\n  /api/pets/{petId}:\n    get:\n      summary: Get pet given identifier.\n      operationId: getHttpPet\n      parameters:\n      - name: petId\n        in: path\n        required: true\n        schema:\n          type: string\n      responses:\n        '200':\n          description: valid pet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - uuid\n        - name\n      properties:\n        uuid:\n          type: string\n          description: The pet uuid.\n        name:\n          type: string\n          description: The name of the pet.\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          description: Error code\n        message:\n          type: string\n          description: Error message\n    OneOf2things:\n      description: \"Notice that the `things` is not capitalised\"\n      oneOf:\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: integer\n        - type: object\n          required:\n            - id\n          properties:\n            id:\n              type: string\n              format: uuid\n```\n\nThis will produce:\n\n```go\n// OneOf2things Notice that the `things` is not capitalised\ntype OneOf2things struct {\n\tunion json.RawMessage\n}\n\n// Pet defines model for Pet.\ntype Pet struct {\n\t// Name The name of the pet.\n\tName string `json:\"name\"`\n\n\t// UUID The pet uuid.\n\tUUID string `json:\"uuid\"`\n}\n\n// The interface specification for the client above.\ntype ClientInterface interface {\n\t// GetHTTPPet request\n\tGetHTTPPet(ctx context.Context, petID string, reqEditors ...RequestEditorFn) (*http.Response, error)\n}\n```\n\n</details>\n\n\nFor more details of what the resulting code looks like, check out [the test cases](internal/test/outputoptions/name-normalizer/).\n\n## Examples\n\nThe [examples directory](examples) contains some additional cases which are useful examples for how to use `oapi-codegen`, including how you'd take the Petstore API and implement it with `oapi-codegen`.\n\nYou could also find some cases of how the project can be used by checking out our [internal test cases](internal/test) which are real-world usages that make up our regression tests.\n\n### Blog posts\n\nWe love reading posts by the community about how to use the project.\n\nHere are a few we've found around the Web:\n\n- [Building a Go RESTful API with design-first OpenAPI contracts](https://www.jvt.me/posts/2022/07/12/go-openapi-server/)\n- [A Practical Guide to Using oapi-codegen in Golang API Development with the Fiber Framework](https://medium.com/@fikihalan/a-practical-guide-to-using-oapi-codegen-in-golang-api-development-with-the-fiber-framework-bce2a59380ae)\n- [Generating Go server code from OpenAPI 3 definitions](https://ldej.nl/post/generating-go-from-openapi-3/)\n- [Go Client Code Generation from Swagger and OpenAPI](https://medium.com/@kyodo-tech/go-client-code-generation-from-swagger-and-openapi-a0576831836c)\n- [Go oapi-codegen + request validation](https://blog.commitsmart.com/go-oapi-codegen-request-validation-285398b37dc8)\n- [Streamlining Go + Chi Development: Generating Code from an OpenAPI Spec](https://i4o.dev/blog/oapi-codegen-with-chi-router)\n\nGot one to add? Please raise a PR!\n\n## Frequently Asked Questions (FAQs)\n\n### How does `oapi-codegen` handle `anyOf`, `allOf` and `oneOf`?\n\n`oapi-codegen` supports `anyOf`, `allOf` and `oneOf` for generated code.\n\nFor instance, through the following OpenAPI spec:\n\n```yaml\nopenapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Using complex schemas\n  description: An example of `anyOf`, `allOf` and `oneOf`\ncomponents:\n  schemas:\n    # base types\n    Client:\n      type: object\n      required:\n        - name\n      properties:\n        name:\n          type: string\n    Identity:\n      type: object\n      required:\n        - issuer\n      properties:\n        issuer:\n          type: string\n\n    # allOf performs a union of all types defined\n    ClientWithId:\n      allOf:\n        - $ref: '#/components/schemas/Client'\n        - properties:\n            id:\n              type: integer\n          required:\n            - id\n\n    # allOf performs a union of all types defined, but if there's a duplicate field defined, it'll be overwritten by the last schema\n    # https://github.com/oapi-codegen/oapi-codegen/issues/1569\n    IdentityWithDuplicateField:\n      allOf:\n        # `issuer` will be ignored\n        - $ref: '#/components/schemas/Identity'\n        # `issuer` will be ignored\n        - properties:\n            issuer:\n              type: integer\n        # `issuer` will take precedence\n        - properties:\n            issuer:\n              type: object\n              properties:\n                name:\n                  type: string\n              required:\n                - name\n\n    # anyOf results in a type that has an `AsClient`/`MergeClient`/`FromClient` and an `AsIdentity`/`MergeIdentity`/`FromIdentity` method so you can choose which of them you want to retrieve\n    ClientAndMaybeIdentity:\n      anyOf:\n        - $ref: '#/components/schemas/Client'\n        - $ref: '#/components/schemas/Identity'\n\n    # oneOf results in a type that has an `AsClient`/`MergeClient`/`FromClient` and an `AsIdentity`/`MergeIdentity`/`FromIdentity` method so you can choose which of them you want to retrieve\n    ClientOrIdentity:\n      oneOf:\n        - $ref: '#/components/schemas/Client'\n        - $ref: '#/components/schemas/Identity'\n```\n\nThis results in the following types:\n\n<details>\n\n<summary>Base types</summary>\n\n```go\n// Client defines model for Client.\ntype Client struct {\n\tName string `json:\"name\"`\n}\n\n// Identity defines model for Identity.\ntype Identity struct {\n\tIssuer string `json:\"issuer\"`\n}\n```\n\n</details>\n\n<details>\n\n<summary><code>allOf</code></summary>\n\n```go\n// ClientWithId defines model for ClientWithId.\ntype ClientWithId struct {\n\tId   int    `json:\"id\"`\n\tName string `json:\"name\"`\n}\n\n// IdentityWithDuplicateField defines model for IdentityWithDuplicateField.\ntype IdentityWithDuplicateField struct {\n\tIssuer struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"issuer\"`\n}\n```\n\n</details>\n\n<details>\n\n<summary><code>anyOf</code></summary>\n\n```go\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/oapi-codegen/runtime\"\n)\n\n// ClientAndMaybeIdentity defines model for ClientAndMaybeIdentity.\ntype ClientAndMaybeIdentity struct {\n\tunion json.RawMessage\n}\n\n// AsClient returns the union data inside the ClientAndMaybeIdentity as a Client\nfunc (t ClientAndMaybeIdentity) AsClient() (Client, error) {\n\tvar body Client\n\terr := json.Unmarshal(t.union, &body)\n\treturn body, err\n}\n\n// FromClient overwrites any union data inside the ClientAndMaybeIdentity as the provided Client\nfunc (t *ClientAndMaybeIdentity) FromClient(v Client) error {\n\tb, err := json.Marshal(v)\n\tt.union = b\n\treturn err\n}\n\n// MergeClient performs a merge with any union data inside the ClientAndMaybeIdentity, using the provided Client\nfunc (t *ClientAndMaybeIdentity) MergeClient(v Client) error {\n\tb, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmerged, err := runtime.JSONMerge(t.union, b)\n\tt.union = merged\n\treturn err\n}\n\n// AsIdentity returns the union data inside the ClientAndMaybeIdentity as a Identity\nfunc (t ClientAndMaybeIdentity) AsIdentity() (Identity, error) {\n\tvar body Identity\n\terr := json.Unmarshal(t.union, &body)\n\treturn body, err\n}\n\n// FromIdentity overwrites any union data inside the ClientAndMaybeIdentity as the provided Identity\nfunc (t *ClientAndMaybeIdentity) FromIdentity(v Identity) error {\n\tb, err := json.Marshal(v)\n\tt.union = b\n\treturn err\n}\n\n// MergeIdentity performs a merge with any union data inside the ClientAndMaybeIdentity, using the provided Identity\nfunc (t *ClientAndMaybeIdentity) MergeIdentity(v Identity) error {\n\tb, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmerged, err := runtime.JSONMerge(t.union, b)\n\tt.union = merged\n\treturn err\n}\n\nfunc (t ClientAndMaybeIdentity) MarshalJSON() ([]byte, error) {\n\tb, err := t.union.MarshalJSON()\n\treturn b, err\n}\n\nfunc (t *ClientAndMaybeIdentity) UnmarshalJSON(b []byte) error {\n\terr := t.union.UnmarshalJSON(b)\n\treturn err\n}\n\n\n```\n\n</details>\n\n<details>\n\n<summary><code>oneOf</code></summary>\n\n```go\n// AsClient returns the union data inside the ClientOrIdentity as a Client\nfunc (t ClientOrIdentity) AsClient() (Client, error) {\n\tvar body Client\n\terr := json.Unmarshal(t.union, &body)\n\treturn body, err\n}\n\n// FromClient overwrites any union data inside the ClientOrIdentity as the provided Client\nfunc (t *ClientOrIdentity) FromClient(v Client) error {\n\tb, err := json.Marshal(v)\n\tt.union = b\n\treturn err\n}\n\n// MergeClient performs a merge with any union data inside the ClientOrIdentity, using the provided Client\nfunc (t *ClientOrIdentity) MergeClient(v Client) error {\n\tb, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmerged, err := runtime.JSONMerge(t.union, b)\n\tt.union = merged\n\treturn err\n}\n\n// AsIdentity returns the union data inside the ClientOrIdentity as a Identity\nfunc (t ClientOrIdentity) AsIdentity() (Identity, error) {\n\tvar body Identity\n\terr := json.Unmarshal(t.union, &body)\n\treturn body, err\n}\n\n// FromIdentity overwrites any union data inside the ClientOrIdentity as the provided Identity\nfunc (t *ClientOrIdentity) FromIdentity(v Identity) error {\n\tb, err := json.Marshal(v)\n\tt.union = b\n\treturn err\n}\n\n// MergeIdentity performs a merge with any union data inside the ClientOrIdentity, using the provided Identity\nfunc (t *ClientOrIdentity) MergeIdentity(v Identity) error {\n\tb, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tmerged, err := runtime.JSONMerge(t.union, b)\n\tt.union = merged\n\treturn err\n}\n\nfunc (t ClientOrIdentity) MarshalJSON() ([]byte, error) {\n\tb, err := t.union.MarshalJSON()\n\treturn b, err\n}\n\nfunc (t *ClientOrIdentity) UnmarshalJSON(b []byte) error {\n\terr := t.union.UnmarshalJSON(b)\n\treturn err\n}\n```\n\n</details>\n\nFor more info, check out [the example code](examples/anyof-allof-oneof/).\n\n### How can I ignore parts of the spec I don't care about?\n\nBy default, `oapi-codegen` will generate everything from the specification.\n\nIf you'd like to reduce what's generated, you can use one of a few options in [the configuration file](#usage) to tune the generation of the resulting output:\n\n```yaml\n# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json\noutput-options:\n  include-tags: []\n  exclude-tags: []\n  include-operation-ids: []\n  exclude-operation-ids: []\n  exclude-schemas: []\n```\n\nCheck [the docs](https://pkg.go.dev/github.com/oapi-codegen/oapi-codegen/v2/pkg/codegen#OutputOptions) for more details of usage.\n\n### Should I commit the generated code?\n\nWe recommend doing so, yes, for the following reasons:\n\n- It means it's easier to view the impact of a change - be it due to an upgrade of `oapi-codegen`, or a change to your spec - and has helped catch (possibly) breaking changes in the past more easily\n- It then allows your codebase to be consumed as a library, as all the files are committed\n\nThis means you'll need to have your CI/CD pipeline validate that generated files are all up-to-date, but that's a fairly straightforward piece of work.\n\n### Should I lint the generated code?\n\nWe really ask that you don't. Although it intends to be idiomatic Go code, it's not expected to pass all the various linting rules that your project may apply.\n\n> [!NOTE]\n> We will, on occasion, improve the generated code to fix some linting warnings, such as those from `go vet`, but this should not be an expected change.\n\n### I've just updated my version of `kin-openapi`, and now I can't build my code 😠\n\nThe [kin-openapi](https://github.com/getkin/kin-openapi) project - which we 💜 for providing a great library and set of tooling for interacting with OpenAPI - is a pre-v1 release, which means that they're within their rights to push breaking changes.\n\nThis may lead to breakage in your consuming code, and if so, sorry that's happened!\n\nWe'll be aware of the issue, and will work to update both the core `oapi-codegen` and the middlewares accordingly.\n\n## Contributors\n\nWe're very appreciative of [the many contributors over the years](https://github.com/oapi-codegen/oapi-codegen/graphs/contributors) and the ongoing use of the project 💜\n\n<a href=\"https://github.com/oapi-codegen/oapi-codegen/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=oapi-codegen/oapi-codegen\" />\n</a>\n\n## Sponsors\n\nFor the most part, `oapi-codegen` is maintained in two busy peoples' free time. As noted in [Creating a more sustainable model for `oapi-codegen` in the future](https://github.com/oapi-codegen/oapi-codegen/discussions/1606), we're looking to make this a more sustainable project in the future.\n\nPlease consider sponsoring us through GitHub Sponsors either [on the organisation](https://github.com/sponsors/oapi-codegen/) or [directly for Jamie](https://github.com/sponsors/jamietanna/), which helps work towards us being able to maintain the project long term.\n\nSee [this blog post from Tidelift](https://blog.tidelift.com/paying-maintainers-the-howto) for more details on how to talk to your company about sponsoring maintainers of (Open Source) projects you depend on.\n\nWe are currently sponsored for 4 hours of work a month by Elastic:\n\n<p align=\"center\">\n\t<a href=\"https://elastic.co?utm_source=oapi-codegen+repo&utm_medium=github+sponsorship\">\n\t\t<picture>\n\t\t  <source media=\"(prefers-color-scheme: light)\" srcset=\".github/sponsors/elastic-light.svg\">\n\t\t  <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/sponsors/elastic-dark.svg\">\n\t\t  <img alt=\"Elastic logo\" src=\".github/sponsors/elastic-dark.svg\" height=\"100px\">\n\t\t</picture>\n\t</a>\n</p>\n\nIn addition, we are also generously sponsored by the following folks, each of whom provide sponsorship for 1 hour of work a month:\n\n<p align=\"center\">\n\t<a href=\"https://www.devzero.io/lp/dev-environment?utm_campaign=github&utm_source=oapi-codegen%20repo&utm_medium=github%20sponsorship\">\n\t\t<picture>\n\t\t  <source media=\"(prefers-color-scheme: light)\" srcset=\".github/sponsors/devzero-light.svg\">\n\t\t  <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/sponsors/devzero-dark.svg\">\n\t\t  <img alt=\"DevZero logo\" src=\".github/sponsors/devzero-dark.svg\" height=\"100px\">\n\t\t</picture>\n\t</a>\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://speakeasy.com?utm_source=oapi-codegen+repo&utm_medium=github+sponsorship\">\n\t\t<picture>\n\t\t  <source media=\"(prefers-color-scheme: light)\" srcset=\".github/sponsors/speakeasy-light.svg\">\n\t\t  <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/sponsors/speakeasy-dark.svg\">\n\t\t  <img alt=\"Speakeasy logo\" src=\".github/sponsors/speakeasy-dark.svg\" height=\"100px\">\n\t\t</picture>\n\t</a>\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://cybozu.co.jp/?utm_source=oapi-codegen+repo&utm_medium=github+sponsorship\">\n\t\t<img alt=\"Cybozu logo\" src=\".github/sponsors/cybozu.svg\" height=\"100px\">\n\t</a>\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://livepeer.org/?utm_source=oapi-codegen+repo&utm_medium=github+sponsorship\">\n\t\t<picture>\n\t\t  <source media=\"(prefers-color-scheme: light)\" srcset=\".github/sponsors/livepeer-light.svg\">\n\t\t  <source media=\"(prefers-color-scheme: dark)\" srcset=\".github/sponsors/livepeer-dark.svg\">\n\t\t  <img alt=\"Livepeer logo\" src=\".github/sponsors/livepeer-dark.svg\" height=\"50px\">\n\t\t</picture>\n\t</a>\n</p>\n\n(Note that the order of appearance the order in which sponsorship was received)\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "configuration-schema.json",
          "type": "blob",
          "size": 11.9931640625,
          "content": "{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"description\": \"Configuration files for oapi-codegen\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"package\": {\n      \"type\": \"string\",\n      \"description\": \"Go package name to generate the code under\"\n    },\n    \"generate\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"description\": \"Generate specifies which supported output formats to generate\",\n      \"properties\": {\n        \"iris-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"IrisServer specifies whether to generate iris server boilerplate\"\n        },\n        \"chi-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"ChiServer specifies whether to generate chi server boilerplate\"\n        },\n        \"fiber-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"FiberServer specifies whether to generate fiber server boilerplate\"\n        },\n        \"echo-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"EchoServer specifies whether to generate echo server boilerplate\"\n        },\n        \"gin-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"GinServer specifies whether to generate gin server boilerplate\"\n        },\n        \"gorilla-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"GorillaServer specifies whether to generate Gorilla server boilerplate\"\n        },\n        \"std-http-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"StdHTTPServer specifies whether to generate stdlib http server boilerplate\"\n        },\n        \"strict-server\": {\n          \"type\": \"boolean\",\n          \"description\": \"Strict specifies whether to generate strict server wrapper\"\n        },\n        \"client\": {\n          \"type\": \"boolean\",\n          \"description\": \"Client specifies whether to generate client boilerplate\"\n        },\n        \"models\": {\n          \"type\": \"boolean\",\n          \"description\": \"Models specifies whether to generate type definitions\"\n        },\n        \"embedded-spec\": {\n          \"type\": \"boolean\",\n          \"description\": \"EmbeddedSpec indicates whether to embed the swagger spec in the generated code\"\n        }\n      }\n    },\n    \"compatibility\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"description\": \"\",\n      \"properties\": {\n        \"old-merge-schemas\": {\n          \"type\": \"boolean\",\n          \"description\": \"In the past, we merged schemas for `allOf` by inlining each schema within the schema list. This approach, though, is incorrect because `allOf` merges at the schema definition level, not at the resulting model level. So, new behavior merges OpenAPI specs but generates different code than we have in the past. Set OldMergeSchemas to true for the old behavior. Please see https://github.com/oapi-codegen/oapi-codegen/issues/531\"\n        },\n        \"old-enum-conflicts\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enum values can generate conflicting typenames, so we've updated the code for enum generation to avoid these conflicts, but it will result in some enum types being renamed in existing code. Set OldEnumConflicts to true to revert to old behavior. Please see: Please see https://github.com/oapi-codegen/oapi-codegen/issues/549\"\n        },\n        \"old-aliasing\": {\n          \"type\": \"boolean\",\n          \"description\": \"It was a mistake to generate a go type definition for every $ref in the OpenAPI schema. New behavior uses type aliases where possible, but this can generate code which breaks existing builds. Set OldAliasing to true for old behavior. Please see https://github.com/oapi-codegen/oapi-codegen/issues/549\"\n        },\n        \"disable-flatten-additional-properties\": {\n          \"type\": \"boolean\",\n          \"description\": \"When an object contains no members, and only an additionalProperties specification, it is flattened to a map\"\n        },\n        \"disable-required-readonly-as-pointer\": {\n          \"type\": \"boolean\",\n          \"description\": \"When an object property is both required and readOnly the go model is generated as a pointer. Set DisableRequiredReadOnlyAsPointer to true to mark them as non pointer. Please see https://github.com/oapi-codegen/oapi-codegen/issues/604\"\n        },\n        \"always-prefix-enum-values\": {\n          \"type\": \"boolean\",\n          \"description\": \"When set to true, always prefix enum values with their type name instead of only when typenames would be conflicting.\"\n        },\n        \"apply-chi-middleware-first-to-last\": {\n          \"type\": \"boolean\",\n          \"description\": \"Our generated code for Chi has historically inverted the order in which Chi middleware is applied such that the last invoked middleware ends up executing first in the Chi chain This resolves the behavior such that middlewares are chained in the order they are invoked. Please see https://github.com/oapi-codegen/oapi-codegen/issues/786\"\n        },\n        \"apply-gorilla-middleware-first-to-last\": {\n          \"type\": \"boolean\",\n          \"description\": \"Our generated code for gorilla/mux has historically inverted the order in which gorilla/mux middleware is applied such that the last invoked middleware ends up executing first in the middlewares chain This resolves the behavior such that middlewares are chained in the order they are invoked. Please see https://github.com/oapi-codegen/oapi-codegen/issues/841\"\n        },\n        \"circular-reference-limit\": {\n          \"type\": \"integer\",\n          \"description\": \"DEPRECATED: No longer used.\\nCircularReferenceLimit allows controlling the limit for circular reference checking. In some OpenAPI specifications, we have a higher number of circular references than is allowed out-of-the-box, but can be tuned to allow traversing them.\"\n        },\n        \"allow-unexported-struct-field-names\": {\n          \"type\": \"boolean\",\n          \"description\": \"AllowUnexportedStructFieldNames makes it possible to output structs that have fields that are unexported.\\nThis is expected to be used in conjunction with an extension such as `x-go-name` to override the output name, and `x-oapi-codegen-extra-tags` to not produce JSON tags for `encoding/json`.\\nNOTE that this can be confusing to users of your OpenAPI specification, who may see a field present and therefore be expecting to see it in the response, without understanding the nuance of how `oapi-codegen` generates the code.\"\n        }\n      }\n    },\n    \"output-options\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"description\": \"OutputOptions are used to modify the output code in some way\",\n      \"properties\": {\n        \"skip-fmt\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to skip go imports on the generated code\"\n        },\n        \"skip-prune\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to skip pruning unused components on the generated code\"\n        },\n        \"include-tags\": {\n          \"type\": \"array\",\n          \"description\": \"Only include operations that have one of these tags. Ignored when empty.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"exclude-tags\": {\n          \"type\": \"array\",\n          \"description\": \"Exclude operations that have one of these tags. Ignored when empty.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"include-operation-ids\": {\n          \"type\": \"array\",\n          \"description\": \"Only include operations that have one of these operation-ids. Ignored when empty.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"exclude-operation-ids\": {\n          \"type\": \"array\",\n          \"description\": \"Exclude operations that have one of these operation-ids. Ignored when empty.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"user-templates\": {\n          \"type\": \"object\",\n          \"description\": \"Override built-in templates from user-provided files\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"exclude-schemas\": {\n          \"type\": \"array\",\n          \"description\": \"Exclude from generation schemas with given names. Ignored when empty.\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"response-type-suffix\": {\n          \"type\": \"string\",\n          \"description\": \"The suffix used for responses types\"\n        },\n        \"client-type-name\": {\n          \"type\": \"string\",\n          \"description\": \"Override the default generated client type with the value\"\n        },\n        \"initialism-overrides\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to use the initialism overrides\"\n        },\n        \"additional-initialisms\": {\n          \"type\": \"array\",\n          \"description\": \"AdditionalInitialisms defines additional initialisms to be used by the code generator. Has no effect unless the `name-normalizer` is set to `ToCamelCaseWithInitialisms`\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"nullable-type\": {\n          \"type\": \"boolean\",\n          \"description\": \"Whether to generate nullable type for nullable fields\"\n        },\n        \"disable-type-aliases-for-type\": {\n          \"type\": \"array\",\n          \"description\": \"DisableTypeAliasesForType allows defining which OpenAPI `type`s will explicitly not use type aliases\",\n          \"items\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"array\"\n            ]\n          }\n        },\n        \"name-normalizer\": {\n          \"type\": \"string\",\n          \"description\": \"NameNormalizer is the method used to normalize Go names and types, for instance converting the text `MyApi` to `MyAPI`. Corresponds with the constants defined for `codegen.NameNormalizerFunction`\",\n          \"default\": \"ToCamelCase\",\n          \"enum\": [\n            \"ToCamelCase\",\n            \"ToCamelCaseWithDigits\",\n            \"ToCamelCaseWithInitialisms\"\n          ]\n        },\n        \"overlay\": {\n          \"type\": \"object\",\n          \"description\": \"Overlay defines configuration for the OpenAPI Overlay (https://github.com/OAI/Overlay-Specification) to manipulate the OpenAPI specification before generation. This allows modifying the specification without needing to apply changes directly to it, making it easier to keep it up-to-date.\",\n          \"properties\": {\n            \"path\": {\n              \"description\": \"The path to the Overlay file\",\n              \"type\": \"string\"\n            },\n            \"strict\": {\n              \"type\": \"boolean\",\n              \"description\": \"Strict defines whether the Overlay should be applied in a strict way, highlighting any actions that will not take any effect. This can, however, lead to more work when testing new actions in an Overlay, so can be turned off with this setting.\",\n              \"default\": true\n            }\n          },\n          \"required\": [\n            \"path\"\n          ]\n        },\n        \"yaml-tags\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable the generation of YAML tags for struct fields\"\n        },\n        \"client-response-bytes-function\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable the generation of a `Bytes()` method on response objects for `ClientWithResponses`\"\n        }\n      }\n    },\n    \"import-mapping\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {\n        \"type\": \"string\",\n        \"description\": \"ImportMapping specifies the golang package path for each external reference. A value of `-` will indicate that the current package will be used\"\n      }\n    },\n    \"additional-imports\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"properties\": {\n          \"alias\": {\n            \"type\": \"string\"\n          },\n          \"package\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"package\"\n        ]\n      },\n      \"description\": \"AdditionalImports defines any additional Go imports to add to the generated code\"\n    },\n    \"output\": {\n      \"type\": \"string\",\n      \"description\": \"The filename to output\"\n    }\n  },\n  \"required\": [\n    \"package\",\n    \"output\"\n  ]\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.005859375,
          "content": "module github.com/oapi-codegen/oapi-codegen/v2\n\ngo 1.21.0\n\nrequire (\n\tgithub.com/getkin/kin-openapi v0.128.0\n\tgithub.com/speakeasy-api/openapi-overlay v0.9.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgolang.org/x/text v0.20.0\n\tgolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d\n\tgopkg.in/yaml.v2 v2.4.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dprotaso/go-yit v0.0.0-20220510233725-9ba8df137936 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/invopop/yaml v0.3.1 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 // indirect\n\tgithub.com/perimeterx/marshmallow v1.1.5 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/ugorji/go/codec v1.2.11 // indirect\n\tgithub.com/vmware-labs/yaml-jsonpath v0.3.2 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 15.4609375,
          "content": "github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dprotaso/go-yit v0.0.0-20191028211022-135eb7262960/go.mod h1:9HQzr9D/0PGwMEbC3d5AB7oi67+h4TsQqItC1GVYG58=\ngithub.com/dprotaso/go-yit v0.0.0-20220510233725-9ba8df137936 h1:PRxIJD8XjimM5aTknUK9w6DHLDox2r2M3DI4i2pnd3w=\ngithub.com/dprotaso/go-yit v0.0.0-20220510233725-9ba8df137936/go.mod h1:ttYvX5qlB+mlV1okblJqcSMtR4c52UKxDiX9GRBS8+Q=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.4.9 h1:hsms1Qyu0jgnwNXIxa+/V/PDsU6CfLf6CNO8H7IWoS4=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/getkin/kin-openapi v0.128.0 h1:jqq3D9vC9pPq1dGcOCv7yOp1DaEe7c/T1vzcLbITSp4=\ngithub.com/getkin/kin-openapi v0.128.0/go.mod h1:OZrfXzUfGrNbsKj+xmFBx6E5c6yH3At/tAKSc2UszXM=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-task/slim-sprig v0.0.0-20210107165309-348f09dbbbc0/go.mod h1:fyg7847qk6SyHyPtNmDHnmrv/HOrqktSC+C9fM+CJOE=\ngithub.com/go-test/deep v1.0.8 h1:TDsG77qcSprGbC6vTN8OuXp5g+J+b5Pcguhf7Zt61VM=\ngithub.com/go-test/deep v1.0.8/go.mod h1:5C2ZWiW0ErCdrYzpqxLbTX7MG14M9iiw8DgHncVwcsE=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.2/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20210407192527-94a9f03dee38/go.mod h1:kpwsk12EmLew5upagYY7GY0pfYCcupk39gWOCRROcvE=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/ianlancetaylor/demangle v0.0.0-20200824232613-28f6c0f3b639/go.mod h1:aSSvb/t6k1mPoxDqO4vJh6VOCGPwU4O0C2/Eqndh1Sc=\ngithub.com/invopop/yaml v0.3.1 h1:f0+ZpmhfBSS4MhG+4HYseMdJhoeeopbSKbq5Rpeelso=\ngithub.com/invopop/yaml v0.3.1/go.mod h1:PMOp3nn4/12yEZUFfmOuNHJsZToEEOwoWsT+D81KkeA=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826 h1:RWengNIwukTxcDr9M+97sNutRR1RKhG96O6jWumTTnw=\ngithub.com/mohae/deepcopy v0.0.0-20170929034955-c48cc78d4826/go.mod h1:TaXosZuwdSHYgviHp1DAtfrULt5eUgsSMsZf+YrPgl8=\ngithub.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=\ngithub.com/nxadm/tail v1.4.8 h1:nPr65rt6Y5JFSKQO7qToXr7pePgD6Gwiw05lkbyAQTE=\ngithub.com/nxadm/tail v1.4.8/go.mod h1:+ncqLTQzXmGhMZNUePPaPqPvBxHAIsmXswZKocGu+AU=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.10.2/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.12.1/go.mod h1:zj2OWP4+oCPe1qIXoGWkgMRwljMUYCdkwsT2108oapk=\ngithub.com/onsi/ginkgo v1.16.4 h1:29JGrr5oVBm5ulCWet69zQkzWipVXIol6ygQUe/EzNc=\ngithub.com/onsi/ginkgo v1.16.4/go.mod h1:dX+/inL/fNMqNlz0e9LfyB9TswhZpCVdJM/Z6Vvnwo0=\ngithub.com/onsi/ginkgo/v2 v2.1.3/go.mod h1:vw5CSIxN1JObi/U8gcbwft7ZxR2dgaR70JSE3/PpL4c=\ngithub.com/onsi/gomega v1.7.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.7.1/go.mod h1:XdKZgCCFLUoM/7CFJVPcG8C1xQ1AJ0vpAezJrB7JYyY=\ngithub.com/onsi/gomega v1.10.1/go.mod h1:iN09h71vgCQne3DLsj+A5owkum+a2tYe+TOCB1ybHNo=\ngithub.com/onsi/gomega v1.17.0/go.mod h1:HnhC7FXeEQY45zxNK3PPoIUhzk/80Xly9PcubAlGdZY=\ngithub.com/onsi/gomega v1.19.0/go.mod h1:LY+I3pBVzYsTBU1AnDwOSxaYi9WoWiqgwooUqq9yPro=\ngithub.com/onsi/gomega v1.27.6 h1:ENqfyGeS5AX/rlXDd/ETokDz93u0YufY1Pgxuy/PvWE=\ngithub.com/onsi/gomega v1.27.6/go.mod h1:PIQNjfQwkP3aQAH7lf7j87O/5FiNr+ZR8+ipb+qQlhg=\ngithub.com/perimeterx/marshmallow v1.1.5 h1:a2LALqQ1BlHM8PZblsDdidgv1mWi1DgC2UmX50IvK2s=\ngithub.com/perimeterx/marshmallow v1.1.5/go.mod h1:dsXbUu8CRzfYP5a87xpp0xq9S3u0Vchtcl8we9tYaXw=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\ngithub.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/speakeasy-api/openapi-overlay v0.9.0 h1:Wrz6NO02cNlLzx1fB093lBlYxSI54VRhy1aSutx0PQg=\ngithub.com/speakeasy-api/openapi-overlay v0.9.0/go.mod h1:f5FloQrHA7MsxYg9djzMD5h6dxrHjVVByWKh7an8TRc=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/ugorji/go/codec v1.2.11 h1:BMaWp1Bb6fHwEtbplGBGJ498wD+LKlNSl25MjdZY4dU=\ngithub.com/ugorji/go/codec v1.2.11/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngithub.com/vmware-labs/yaml-jsonpath v0.3.2 h1:/5QKeCBGdsInyDCyVNLbXyilb61MXGi9NP674f9Hobk=\ngithub.com/vmware-labs/yaml-jsonpath v0.3.2/go.mod h1:U6whw1z03QyqgWdgXxvVnQ90zN1BWz5V+51Ewf8k+rQ=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200520004742-59133d7f0dd7/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210428140749-89ef3d95e781/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\ngolang.org/x/net v0.0.0-20220225172249-27dd8689420f/go.mod h1:CfG3xpIq0wQ8r1q4Su4UZFWDARRcnwPjda9FqA0JpMk=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.9.0 h1:fEo0HyrW1GIgZdpbhCRO0PkJajUS5H9IFUztCgEo2jQ=\ngolang.org/x/sync v0.9.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190904154756-749cb33beabd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191120155948-bd437916bb0e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191204072324-ce4227a45e2e/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210112080510-489259a85091/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211216021012-1d35b9e2eb4e/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.20.0 h1:gK/Kv2otX8gz+wn7Rmb3vT96ZwuoxnQlY+HlJVj7Qug=\ngolang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20201224043029-2b0845dc783e/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d h1:vU5i/LfpvrRCpgM/VPfJLg5KjxD3E+hfT1SH+d9zLwg=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20191026110619-0b21df46bc1d/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.1220703125,
          "content": "{\n\t\"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n\t\"extends\": [\n\t\t\"local>oapi-codegen/renovate-config\"\n\t]\n}\n"
        }
      ]
    }
  ]
}