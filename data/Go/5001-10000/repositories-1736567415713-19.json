{
  "metadata": {
    "timestamp": 1736567415713,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cloudflare/cloudflared",
      "stars": 9636,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".docker-images",
          "type": "blob",
          "size": 0.2548828125,
          "content": "images:\n  - name: cloudflared\n    dockerfile: Dockerfile.$ARCH\n    context: .\n    version_file: versions\n    registries:\n    - name: docker.io/cloudflare\n      user: env:DOCKER_USER\n      password: env:DOCKER_PASSWORD\n    architectures:\n    - amd64\n    - arm64\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.244140625,
          "content": "/tmp\n/bin\n.idea\n.build\n.vscode\n\\#*\\#\ncscope.*\n/cloudflared\n/cloudflared.pkg\n/cloudflared.exe\n/cloudflared.msi\n/cloudflared-x86-64*\n/cloudflared.1\n/packaging\n.DS_Store\n*-session.log\nssh_server_tests/.env\n/.cover\nbuilt_artifacts/\ncomponent-tests/.venv\n"
        },
        {
          "name": ".mac_resources",
          "type": "tree",
          "content": null
        },
        {
          "name": ".teamcity",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGES.md",
          "type": "blob",
          "size": 17.568359375,
          "content": "## 2024.12.2\n### New Features\n- This release introduces the ability to collect troubleshooting information from one instance of cloudflared running on the local machine. The command can be executed as `cloudflared tunnel diag`.\n\n## 2024.12.1\n### Notices\n- The use of the `--metrics` is still honoured meaning that if this flag is set the metrics server will try to bind it, however, this version includes a change that makes the metrics server bind to a port with a semi-deterministic approach. If the metrics flag is not present the server will bind to the first available port of the range 20241 to 20245. In case of all ports being unavailable then the fallback is to bind to a random port.\n\n## 2024.10.0\n### Bug Fixes\n- We fixed a bug related to `--grace-period`. Tunnels that use QUIC as transport weren't abiding by this waiting period before forcefully closing the connections to the edge. From now on, both QUIC and HTTP2 tunnels will wait for either the grace period to end (defaults to 30 seconds) or until the last in-flight request is handled. Users that wish to maintain the previous behavior should set `--grace-period` to 0 if `--protocol` is set to `quic`. This will force `cloudflared` to shutdown as soon as either SIGTERM or SIGINT is received.\n\n## 2024.2.1\n### Notices\n- Starting from this version, tunnel diagnostics will be enabled by default. This will allow the engineering team to remotely get diagnostics from cloudflared during debug activities. Users still have the capability to opt-out of this feature by defining `--management-diagnostics=false` (or env `TUNNEL_MANAGEMENT_DIAGNOSTICS`).\n\n## 2023.9.0\n### Notices\n- The `warp-routing` `enabled: boolean` flag is no longer supported in the configuration file. Warp Routing traffic (eg TCP, UDP, ICMP) traffic is proxied to cloudflared if routes to the target tunnel are configured. This change does not affect remotely managed tunnels, but for locally managed tunnels, users that might be relying on this feature flag to block traffic should instead guarantee that tunnel has no Private Routes configured for the tunnel.\n## 2023.7.0\n### New Features\n- You can now enable additional diagnostics over the management.argotunnel.com service for your active cloudflared connectors via a new runtime flag `--management-diagnostics` (or env `TUNNEL_MANAGEMENT_DIAGNOSTICS`). This feature is provided as opt-in and requires the flag to enable. Endpoints such as /metrics provides your prometheus metrics endpoint another mechanism to be reached. Additionally /debug/pprof/(goroutine|heap) are also introduced to allow for remotely retrieving active pprof information from a running cloudflared connector.\n\n## 2023.4.1\n### New Features\n- You can now stream your logs from your remote cloudflared to your local terminal with `cloudflared tail <TUNNEL-ID>`. This new feature requires the remote cloudflared to be version 2023.4.1 or higher.\n\n## 2023.3.2\n### Notices\n- Due to the nature of QuickTunnels (https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/do-more-with-tunnels/trycloudflare/) and its intended usage for testing and experiment of Cloudflare Tunnels, starting from 2023.3.2, QuickTunnels only make a single connection to the edge. If users want to use Tunnels in a production environment, they should move to Named Tunnels instead. (https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/tunnel-guide/remote/#set-up-a-tunnel-remotely-dashboard-setup)\n\n## 2023.3.1\n### Breaking Change\n- Running a tunnel without ingress rules defined in configuration file nor from the CLI flags will no longer provide a default ingress rule to localhost:8080 and instead will return HTTP response code 503 for all incoming HTTP requests.\n\n### Security Fixes\n- Windows 32 bit machines MSI now defaults to Program Files to install cloudflared. (See CVE-2023-1314). The cloudflared client itself is unaffected. This just changes how the installer works on 32 bit windows machines.\n\n### Bug Fixes\n- Fixed a bug that would cause running tunnel on Bastion mode and without ingress rules to crash.\n\n## 2023.2.2\n### Notices\n- Legacy tunnels were officially deprecated on December 1, 2022. Starting with this version, cloudflared no longer supports connecting legacy tunnels.\n- h2mux tunnel connection protocol is no longer supported. Any tunnels still configured to use this protocol will alert and use http2 tunnel protocol instead. We recommend using quic protocol for all tunnels going forward.\n\n## 2023.2.1\n### Bug fixes\n- Fixed a bug in TCP connection proxy that could result in the connection being closed before all data was written.\n- cloudflared now correctly aborts body write if connection to origin service fails after response headers were sent already.\n- Fixed a bug introduced in the previous release where debug endpoints were removed.\n\n## 2022.12.0\n### Improvements\n- cloudflared now attempts to try other edge addresses before falling back to a lower protocol.\n- cloudflared tunnel no longer spins up a quick tunnel. The call has to be explicit and provide a --url flag.\n- cloudflared will now randomly pick the first or second region to connect to instead of always connecting to region2 first.\n\n## 2022.9.0\n### New Features\n- cloudflared now rejects ingress rules with invalid http status codes for http_status.\n\n## 2022.8.1\n### New Features\n- cloudflared now remembers if it connected to a certain protocol successfully. If it did, it does not fall back to a lower\n  protocol on connection failures.\n\n## 2022.7.1\n### New Features\n- It is now possible to connect cloudflared tunnel to Cloudflare Global Network with IPv6. See `cloudflared tunnel --help` and look for `edge-ip-version` for more information. For now, the default behavior is to still connect with IPv4 only.\n\n### Bug Fixes\n- Several bug fixes related with QUIC transport (used between cloudflared tunnel and Cloudflare Global Network). Updating to this version is highly recommended.\n\n## 2022.4.0\n### Bug Fixes\n- `cloudflared tunnel run` no longer logs the Tunnel token or JSON credentials in clear text as those are the secret\nthat allows to run the Tunnel.\n\n## 2022.3.4\n### New Features\n- It is now possible to retrieve the credentials that allow to run a Tunnel in case you forgot/lost them. This is\nachievable with: `cloudflared tunnel token --cred-file /path/to/file.json TUNNEL`. This new feature only works for\nTunnels created with cloudflared version 2022.3.0 or more recent.\n\n### Bug Fixes\n- `cloudflared service install` now starts the underlying agent service on Linux operating system (similarly to the\nbehaviour in Windows and MacOS).\n\n## 2022.3.3\n### Bug Fixes\n- `cloudflared service install` now starts the underlying agent service on Windows operating system (similarly to the\nbehaviour in MacOS).\n\n## 2022.3.1\n### Bug Fixes\n- Various fixes to the reliability of `quic` protocol, including an edge case that could lead to cloudflared crashing.\n\n## 2022.3.0\n### New Features\n- It is now possible to configure Ingress Rules to point to an origin served by unix socket with either HTTP or HTTPS.\nIf the origin starts with `unix:/` then we assume HTTP (existing behavior). Otherwise, the origin can start with\n`unix+tls:/` for HTTPS.\n\n## 2022.2.1\n### New Features\n- This project now has a new LICENSE that is more compliant with open source purposes.\n\n### Bug Fixes\n- Various fixes to the reliability of `quic` protocol.\n\n## 2022.1.3\n### New Features\n- New `cloudflared tunnel vnet` commands to allow for private routing to be virtualized. This means that the same CIDR\ncan now be used to point to two different Tunnels with `cloudflared tunnel route ip` command. More information will be\nmade available on blog.cloudflare.com and developers.cloudflare.com/cloudflare-one once the feature is globally available.\n\n### Bug Fixes\n- Correctly handle proxying UDP datagrams with no payload.\n- Bug fix for origins that use Server-Sent Events (SSE).\n\n## 2022.1.0\n### Improvements\n- If a specific `protocol` property is defined (e.g. for `quic`), cloudflared no longer falls back to an older protocol\n(such as `http2`) in face of connectivity errors. This is important because some features are only supported in a specific\nprotocol (e.g. UDP proxying only works for `quic`). Hence, if a user chooses a protocol, cloudflared now adheres to it\nno matter what.\n\n### Bug Fixes\n- Stopping cloudflared running with `quic` protocol now respects graceful shutdown.\n\n## 2021.12.2\n### Bug Fixes\n- Fix logging when `quic` transport is used and UDP traffic is proxied.\n- FIPS compliant cloudflared binaries will now be released as separate artifacts. Recall that these are only for linux\nand amd64.\n\n## 2021.12.1\n### Bug Fixes\n - Fixes Github issue #530 where cloudflared 2021.12.0 could not reach origins that were HTTPS and using certain encryption\nmethods forbidden by FIPS compliance (such as Let's Encrypt certificates). To address this fix we have temporarily reverted\nFIPS compliance from amd64 linux binaries that was recently introduced (or fixed actually as it was never working before).\n\n## 2021.12.0\n### New Features\n- Cloudflared binary released for amd64 linux is now FIPS compliant.\n\n### Improvements\n- Logging about connectivity to Cloudflare edge now only yields `ERR` level logging if there are no connections to\nCloudflare edge that are active. Otherwise it logs `WARN` level.\n \n### Bug Fixes\n- Fixes Github issue #501.\n\n## 2021.11.0\n### Improvements\n- Fallback from `protocol:quic` to `protocol:http2` immediately if UDP connectivity isn't available. This could be because of a firewall or \negress rule.\n\n## 2021.10.4\n### Improvements\n- Collect quic transport metrics on RTT, packets and bytes transferred.\n\n### Bug Fixes\n- Fix race condition that was writing to the connection after the http2 handler returns.\n\n## 2021.9.2\n\n### New features\n- `cloudflared` can now run with `quic` as the underlying tunnel transport protocol. To try it, change or add \"protocol: quic\" to your config.yml file or\nrun cloudflared with the `--protocol quic` flag. e.g:\n    `cloudflared tunnel --protocol quic run <tunnel-name>`\n\n### Bug Fixes\n- Fixed some generic transport bugs in `quic` mode. It's advised to upgrade to at least this version (2021.9.2) when running `cloudflared`\nwith `quic` protocol.\n- `cloudflared` docker images will now show version.\n\n\n## 2021.8.4\n### Improvements\n- Temporary tunnels (those hosted on trycloudflare.com that do not require a Cloudflare login) now run as Named Tunnels\nunderneath. We recall that these tunnels should not be relied upon for production usage as they come with no guarantee\nof uptime. Previous cloudflared versions will soon be unable to run legacy temporary tunnels and will require an update\n(to this version or more recent).\n\n## 2021.8.2\n### Improvements\n- Because Equinox os shutting down, all cloudflared releases are now present [here](https://github.com/cloudflare/cloudflared/releases).\n[Equinox](https://dl.equinox.io/cloudflare/cloudflared/stable) will no longer receive updates. \n\n## 2021.8.0\n### Bug fixes\n- Prevents tunnel from accidentally running when only proxy-dns should run. \n\n### Improvements\n- If auto protocol transport lookup fails, we now default to a transport instead of not connecting.\n\n## 2021.6.0\n### Bug Fixes\n- Fixes a http2 transport (the new default for Named Tunnels) to work with unix socket origins.\n\n\n## 2021.5.10\n### Bug Fixes\n- Fixes a memory leak in h2mux transport that connects cloudflared to Cloudflare edge.\n\n\n## 2021.5.9\n### New Features\n- Uses new Worker based login helper service to facilitate token exchange in cloudflared flows.\n\n### Bug Fixes\n- Fixes Centos-7 builds.\n\n## 2021.5.8\n### New Features\n- When creating a DNS record to point a hostname at a tunnel, you can now use --overwrite-dns to overwrite any existing\n  DNS records with that hostname. This works both when using the CLI to provision DNS, as well as when starting an adhoc\n  named tunnel, e.g.:\n  - `cloudflared tunnel route dns --overwrite-dns foo-tunnel foo.example.com`\n  - `cloudflared tunnel --overwrite-dns --name foo-tunnel --hostname foo.example.com`\n\n## 2021.5.7\n### New Features\n- Named Tunnels will automatically select the protocol to connect to Cloudflare's edge network.\n\n## 2021.5.0\n\n### New Features\n- It is now possible to run the same tunnel using more than one `cloudflared` instance. This is a server-side change and\n  is compatible with any client version that uses Named Tunnels.\n\n  To get started, visit our [developer documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/run-tunnel/deploy-cloudflared-replicas).\n- `cloudflared tunnel ingress validate` will now warn about unused keys in your config file. This is helpful for\n  detecting typos in your config.\n- If `cloudflared` detects it is running inside a Linux container, it will limit itself to use only the number of CPUs\n  the pod has been granted, instead of trying to use every CPU available.\n\n## 2021.4.0\n\n### Bug Fixes\n\n- Fixed proxying of websocket requests to avoid possibility of losing initial frames that were sent in the same TCP\n  packet as response headers [#345](https://github.com/cloudflare/cloudflared/issues/345).\n- `proxy-dns` option now works in conjunction with running a named tunnel [#346](https://github.com/cloudflare/cloudflared/issues/346).\n\n## 2021.3.6\n\n### Bug Fixes\n\n- Reverted 2021.3.5 improvement to use HTTP/2 in a best-effort manner between cloudflared and origin services because\n  it was found to break in some cases.\n\n## 2021.3.5\n\n### Improvements\n\n - HTTP/2 transport is now always chosen if origin server supports it and the service url scheme is HTTPS.\n   This was previously done in a best attempt manner.\n\n### Bug Fixes\n\n - The MacOS binaries were not successfully released in 2021.3.3 and 2021.3.4. This release is aimed at addressing that.\n\n## 2021.3.3\n\n### Improvements\n\n- Tunnel create command, as well as, running ad-hoc tunnels using `cloudflared tunnel -name NAME`, will not overwrite\n  existing files when writing tunnel credentials.\n\n### Bug Fixes\n\n- Tunnel create and delete commands no longer use path to credentials from the configuration file.\n  If you need ot place tunnel credentials file at a specific location, you must use `--credentials-file` flag.\n- Access ssh-gen creates properly named keys for SSH short lived certs.\n\n\n## 2021.3.2\n\n### New Features\n\n- It is now possible to obtain more detailed information about the cloudflared connectors to Cloudflare Edge via\n  `cloudflared tunnel info <name/uuid>`. It is possible to sort the output as well as output in different formats,\n  such as: `cloudflared tunnel info --sort-by version --invert-sort --output json <name/uuid>`.\n  You can obtain more information via `cloudflared tunnel info --help`.\n\n### Bug Fixes\n\n- Don't look for configuration file in default paths when `--config FILE` flag is present after `tunnel` subcommand.\n- cloudflared access token command now functions correctly with the new token-per-app change from 2021.3.0.\n\n\n## 2021.3.0\n\n### New Features\n\n- [Cloudflare One Routing](https://developers.cloudflare.com/cloudflare-one/tutorials/warp-to-tunnel) specific commands\n  now show up in the `cloudflared tunnel route --help` output.\n- There is a new ingress type that allows cloudflared to proxy SOCKS5 as a bastion. You can use it with an ingress\n  rule by adding `service: socks-proxy`. Traffic is routed to any destination specified by the SOCKS5 packet but only\n  if allowed by a rule. In the following example we allow proxying to a certain CIDR but explicitly forbid one address\n  within it:\n```\ningress:\n  - hostname: socks.example.com\n    service: socks-proxy\n    originRequest:\n      ipRules:\n        - prefix: 192.168.1.8/32\n          allow: false\n        - prefix: 192.168.1.0/24\n          ports: [80, 443]\n          allow: true\n```\n\n\n### Improvements\n\n- Nested commands, such as `cloudflared tunnel run`, now consider CLI arguments even if they appear earlier on the\n  command. For instance, `cloudflared --config config.yaml tunnel run` will now behave the same as\n  `cloudflared tunnel --config config.yaml run`\n- Warnings are now shown in the output logs whenever cloudflared is running without the most recent version and\n  `no-autoupdate` is `true`.\n- Access tokens are now stored per Access App instead of per request path. This decreases the number of times that the\n  user is required to authenticate with an Access policy redundantly.\n\n### Bug Fixes\n\n- GitHub [PR #317](https://github.com/cloudflare/cloudflared/issues/317) was broken in 2021.2.5 and is now fixed again.\n\n## 2021.2.5\n\n### New Features\n\n- We introduce [Cloudflare One Routing](https://developers.cloudflare.com/cloudflare-one/tutorials/warp-to-tunnel) in\n  beta mode. Cloudflare customer can now connect users and private networks with RFC 1918 IP addresses via the\n  Cloudflare edge network. Users running Cloudflare WARP client in the same organization can connect to the services\n  made available by Argo Tunnel IP routes. Please share your feedback in the GitHub issue tracker.\n\n## 2021.2.4\n\n### Bug Fixes\n\n- Reverts the Improvement released in 2021.2.3 for CLI arguments as it introduced a regression where cloudflared failed\n  to read URLs in configuration files.\n- cloudflared now logs the reason for failed connections if the error is recoverable.\n\n## 2021.2.3\n\n### Backward Incompatible Changes\n\n- Removes db-connect. The Cloudflare Workers product will continue to support db-connect implementations with versions\n  of cloudflared that predate this release and include support for db-connect.\n\n### New Features\n\n- Introduces support for proxy configurations with websockets in arbitrary TCP connections (#318).\n\n### Improvements\n\n- (reverted) Nested command line argument handling.\n\n### Bug Fixes\n\n- The maximum number of upstream connections is now limited by default which should fix reported issues of cloudflared\n  exhausting CPU usage when faced with connectivity issues.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.0302734375,
          "content": "# use a builder image for building cloudflare\nARG TARGET_GOOS\nARG TARGET_GOARCH\nFROM golang:1.22.5 as builder\nENV GO111MODULE=on \\\n  CGO_ENABLED=0 \\\n  TARGET_GOOS=${TARGET_GOOS} \\\n  TARGET_GOARCH=${TARGET_GOARCH} \\\n  # the CONTAINER_BUILD envvar is used set github.com/cloudflare/cloudflared/metrics.Runtime=virtual\n  # which changes how cloudflared binds the metrics server\n  CONTAINER_BUILD=1\n\n\nWORKDIR /go/src/github.com/cloudflare/cloudflared/\n\n# copy our sources into the builder image\nCOPY . .\n\nRUN .teamcity/install-cloudflare-go.sh\n\n# compile cloudflared\nRUN PATH=\"/tmp/go/bin:$PATH\" make cloudflared\n\n# use a distroless base image with glibc\nFROM gcr.io/distroless/base-debian11:nonroot\n\nLABEL org.opencontainers.image.source=\"https://github.com/cloudflare/cloudflared\"\n\n# copy our compiled binary\nCOPY --from=builder --chown=nonroot /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/\n\n# run as non-privileged user\nUSER nonroot\n\n# command / entrypoint of container\nENTRYPOINT [\"cloudflared\", \"--no-autoupdate\"]\nCMD [\"version\"]\n"
        },
        {
          "name": "Dockerfile.amd64",
          "type": "blob",
          "size": 0.9560546875,
          "content": "# use a builder image for building cloudflare\nFROM golang:1.22.5 as builder\nENV GO111MODULE=on \\\n  CGO_ENABLED=0 \\\n  # the CONTAINER_BUILD envvar is used set github.com/cloudflare/cloudflared/metrics.Runtime=virtual\n  # which changes how cloudflared binds the metrics server\n  CONTAINER_BUILD=1 \n\nWORKDIR /go/src/github.com/cloudflare/cloudflared/\n\n# copy our sources into the builder image\nCOPY . .\n\nRUN .teamcity/install-cloudflare-go.sh\n\n# compile cloudflared\nRUN GOOS=linux GOARCH=amd64 PATH=\"/tmp/go/bin:$PATH\" make cloudflared\n\n# use a distroless base image with glibc\nFROM gcr.io/distroless/base-debian11:nonroot\n\nLABEL org.opencontainers.image.source=\"https://github.com/cloudflare/cloudflared\"\n\n# copy our compiled binary\nCOPY --from=builder --chown=nonroot /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/\n\n# run as non-privileged user\nUSER nonroot\n\n# command / entrypoint of container\nENTRYPOINT [\"cloudflared\", \"--no-autoupdate\"]\nCMD [\"version\"]\n"
        },
        {
          "name": "Dockerfile.arm64",
          "type": "blob",
          "size": 0.9609375,
          "content": "# use a builder image for building cloudflare\nFROM golang:1.22.5 as builder\nENV GO111MODULE=on \\\n  CGO_ENABLED=0 \\\n  # the CONTAINER_BUILD envvar is used set github.com/cloudflare/cloudflared/metrics.Runtime=virtual\n  # which changes how cloudflared binds the metrics server\n  CONTAINER_BUILD=1\n\nWORKDIR /go/src/github.com/cloudflare/cloudflared/\n\n# copy our sources into the builder image\nCOPY . .\n\nRUN .teamcity/install-cloudflare-go.sh\n\n# compile cloudflared\nRUN GOOS=linux GOARCH=arm64 PATH=\"/tmp/go/bin:$PATH\" make cloudflared\n\n# use a distroless base image with glibc\nFROM gcr.io/distroless/base-debian11:nonroot-arm64\n\nLABEL org.opencontainers.image.source=\"https://github.com/cloudflare/cloudflared\"\n\n# copy our compiled binary\nCOPY --from=builder --chown=nonroot /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/\n\n# run as non-privileged user\nUSER nonroot\n\n# command / entrypoint of container\nENTRYPOINT [\"cloudflared\", \"--no-autoupdate\"]\nCMD [\"version\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.9189453125,
          "content": "# The targets cannot be run in parallel\n.NOTPARALLEL:\n\nVERSION       := $(shell git describe --tags --always --match \"[0-9][0-9][0-9][0-9].*.*\")\nMSI_VERSION   := $(shell git tag -l --sort=v:refname | grep \"w\" | tail -1 | cut -c2-)\n#MSI_VERSION expects the format of the tag to be: (wX.X.X). Starts with the w character to not break cfsetup.\n#e.g. w3.0.1 or w4.2.10. It trims off the w character when creating the MSI.\n\nifeq ($(ORIGINAL_NAME), true)\n\t# Used for builds that want FIPS compilation but want the artifacts generated to still have the original name.\n\tBINARY_NAME := cloudflared\nelse ifeq ($(FIPS), true)\n\t# Used for FIPS compliant builds that do not match the case above.\n\tBINARY_NAME := cloudflared-fips\nelse\n\t# Used for all other (non-FIPS) builds.\n\tBINARY_NAME := cloudflared\nendif\n\nifeq ($(NIGHTLY), true)\n\tDEB_PACKAGE_NAME := $(BINARY_NAME)-nightly\n\tNIGHTLY_FLAGS := --conflicts cloudflared --replaces cloudflared\nelse\n\tDEB_PACKAGE_NAME := $(BINARY_NAME)\nendif\n\nDATE          := $(shell date -u '+%Y-%m-%d-%H%M UTC')\nVERSION_FLAGS := -X \"main.Version=$(VERSION)\" -X \"main.BuildTime=$(DATE)\"\nifdef PACKAGE_MANAGER\n\tVERSION_FLAGS := $(VERSION_FLAGS) -X \"github.com/cloudflare/cloudflared/cmd/cloudflared/updater.BuiltForPackageManager=$(PACKAGE_MANAGER)\"\nendif\n\nifdef CONTAINER_BUILD \n\tVERSION_FLAGS := $(VERSION_FLAGS) -X \"github.com/cloudflare/cloudflared/metrics.Runtime=virtual\"\nendif\n\nLINK_FLAGS :=\nifeq ($(FIPS), true)\n\tLINK_FLAGS := -linkmode=external -extldflags=-static $(LINK_FLAGS)\n\t# Prevent linking with libc regardless of CGO enabled or not.\n\tGO_BUILD_TAGS := $(GO_BUILD_TAGS) osusergo netgo fips\n\tVERSION_FLAGS := $(VERSION_FLAGS) -X \"main.BuildType=FIPS\"\nendif\n\nLDFLAGS := -ldflags='$(VERSION_FLAGS) $(LINK_FLAGS)'\nifneq ($(GO_BUILD_TAGS),)\n\tGO_BUILD_TAGS := -tags \"$(GO_BUILD_TAGS)\"\nendif\n\nifeq ($(debug), 1)\n\tGO_BUILD_TAGS += -gcflags=\"all=-N -l\"\nendif\n\nIMPORT_PATH    := github.com/cloudflare/cloudflared\nPACKAGE_DIR    := $(CURDIR)/packaging\nPREFIX         := /usr\nINSTALL_BINDIR := $(PREFIX)/bin/\nINSTALL_MANDIR := $(PREFIX)/share/man/man1/\nCF_GO_PATH     := /tmp/go\nPATH           := $(CF_GO_PATH)/bin:$(PATH)\n\nLOCAL_ARCH ?= $(shell uname -m)\nifneq ($(GOARCH),)\n    TARGET_ARCH ?= $(GOARCH)\nelse ifeq ($(LOCAL_ARCH),x86_64)\n    TARGET_ARCH ?= amd64\nelse ifeq ($(LOCAL_ARCH),amd64)\n    TARGET_ARCH ?= amd64\nelse ifeq ($(LOCAL_ARCH),i686)\n    TARGET_ARCH ?= amd64\nelse ifeq ($(shell echo $(LOCAL_ARCH) | head -c 5),armv8)\n    TARGET_ARCH ?= arm64\nelse ifeq ($(LOCAL_ARCH),aarch64)\n    TARGET_ARCH ?= arm64\nelse ifeq ($(LOCAL_ARCH),arm64)\n    TARGET_ARCH ?= arm64\nelse ifeq ($(shell echo $(LOCAL_ARCH) | head -c 4),armv)\n    TARGET_ARCH ?= arm\nelse ifeq ($(LOCAL_ARCH),s390x)\n    TARGET_ARCH ?= s390x\nelse\n    $(error This system's architecture $(LOCAL_ARCH) isn't supported)\nendif\n\nLOCAL_OS ?= $(shell go env GOOS)\nifeq ($(LOCAL_OS),linux)\n    TARGET_OS ?= linux\nelse ifeq ($(LOCAL_OS),darwin)\n    TARGET_OS ?= darwin\nelse ifeq ($(LOCAL_OS),windows)\n    TARGET_OS ?= windows\nelse ifeq ($(LOCAL_OS),freebsd)\n    TARGET_OS ?= freebsd\nelse ifeq ($(LOCAL_OS),openbsd)\n    TARGET_OS ?= openbsd\nelse\n    $(error This system's OS $(LOCAL_OS) isn't supported)\nendif\n\nifeq ($(TARGET_OS), windows)\n\tEXECUTABLE_PATH=./$(BINARY_NAME).exe\nelse\n\tEXECUTABLE_PATH=./$(BINARY_NAME)\nendif\n\nifeq ($(FLAVOR), centos-7)\n\tTARGET_PUBLIC_REPO ?= el7\nelse\n\tTARGET_PUBLIC_REPO ?= $(FLAVOR)\nendif\n\nifneq ($(TARGET_ARM), )\n\tARM_COMMAND := GOARM=$(TARGET_ARM)\nendif\n\nifeq ($(TARGET_ARM), 7) \n\tPACKAGE_ARCH := armhf\nelse\n\tPACKAGE_ARCH := $(TARGET_ARCH)\nendif\n\n#for FIPS compliance, FPM defaults to MD5.\nRPM_DIGEST := --rpm-digest sha256\n\n.PHONY: all\nall: cloudflared test\n\n.PHONY: clean\nclean:\n\tgo clean\n\n.PHONY: cloudflared\ncloudflared:\nifeq ($(FIPS), true)\n\t$(info Building cloudflared with go-fips)\n\tcp -f fips/fips.go.linux-amd64 cmd/cloudflared/fips.go\nendif\n\tGOOS=$(TARGET_OS) GOARCH=$(TARGET_ARCH) $(ARM_COMMAND) go build -mod=vendor $(GO_BUILD_TAGS) $(LDFLAGS) $(IMPORT_PATH)/cmd/cloudflared\nifeq ($(FIPS), true)\n\trm -f cmd/cloudflared/fips.go\n\t./check-fips.sh cloudflared\nendif\n\n.PHONY: container\ncontainer:\n\tdocker build --build-arg=TARGET_ARCH=$(TARGET_ARCH) --build-arg=TARGET_OS=$(TARGET_OS) -t cloudflare/cloudflared-$(TARGET_OS)-$(TARGET_ARCH):\"$(VERSION)\" .\n\n.PHONY: generate-docker-version\ngenerate-docker-version:\n\techo latest $(VERSION) > versions\n\n\n.PHONY: test\ntest: vet\nifndef CI\n\tgo test -v -mod=vendor -race $(LDFLAGS) ./...\nelse\n\t@mkdir -p .cover\n\tgo test -v -mod=vendor -race $(LDFLAGS) -coverprofile=\".cover/c.out\" ./...\nendif\n\n.PHONY: cover\ncover:\n\t@echo \"\"\n\t@echo \"=====> Total test coverage: <=====\"\n\t@echo \"\"\n\t# Print the overall coverage here for quick access.\n\t$Q go tool cover -func \".cover/c.out\" | grep \"total:\" | awk '{print $$3}'\n\t# Generate the HTML report that can be viewed from the browser in CI.\n\t$Q go tool cover -html \".cover/c.out\" -o .cover/all.html\n\n.PHONY: fuzz\nfuzz:\n\t@go test -fuzz=FuzzIPDecoder -fuzztime=600s ./packet\n\t@go test -fuzz=FuzzICMPDecoder -fuzztime=600s ./packet\n\t@go test -fuzz=FuzzSessionWrite -fuzztime=600s ./quic/v3\n\t@go test -fuzz=FuzzSessionServe -fuzztime=600s ./quic/v3\n\t@go test -fuzz=FuzzRegistrationDatagram -fuzztime=600s ./quic/v3\n\t@go test -fuzz=FuzzPayloadDatagram -fuzztime=600s ./quic/v3\n\t@go test -fuzz=FuzzRegistrationResponseDatagram -fuzztime=600s ./quic/v3\n\t@go test -fuzz=FuzzNewIdentity -fuzztime=600s ./tracing\n\t@go test -fuzz=FuzzNewAccessValidator -fuzztime=600s ./validation\n\n.PHONY: install-go\ninstall-go:\n\trm -rf ${CF_GO_PATH}\n\t./.teamcity/install-cloudflare-go.sh\n\n.PHONY: cleanup-go\ncleanup-go:\n\trm -rf ${CF_GO_PATH}\n\ncloudflared.1: cloudflared_man_template\n\tsed -e 's/\\$${VERSION}/$(VERSION)/; s/\\$${DATE}/$(DATE)/' cloudflared_man_template > cloudflared.1\n\ninstall: install-go cloudflared cloudflared.1 cleanup-go\n\tmkdir -p $(DESTDIR)$(INSTALL_BINDIR) $(DESTDIR)$(INSTALL_MANDIR)\n\tinstall -m755 cloudflared $(DESTDIR)$(INSTALL_BINDIR)/cloudflared\n\tinstall -m644 cloudflared.1 $(DESTDIR)$(INSTALL_MANDIR)/cloudflared.1\n\n# When we build packages, the package name will be FIPS-aware.\n# But we keep the binary installed by it to be named \"cloudflared\" regardless.\ndefine build_package\n\tmkdir -p $(PACKAGE_DIR)\n\tcp cloudflared $(PACKAGE_DIR)/cloudflared\n\tcp cloudflared.1 $(PACKAGE_DIR)/cloudflared.1\n\tfpm -C $(PACKAGE_DIR) -s dir -t $(1) \\\n\t\t--description 'Cloudflare Tunnel daemon' \\\n\t\t--vendor 'Cloudflare' \\\n\t\t--license 'Apache License Version 2.0' \\\n\t\t--url 'https://github.com/cloudflare/cloudflared' \\\n\t\t-m 'Cloudflare <support@cloudflare.com>' \\\n\t    -a $(PACKAGE_ARCH) -v $(VERSION) -n $(DEB_PACKAGE_NAME) $(RPM_DIGEST) $(NIGHTLY_FLAGS) --after-install postinst.sh --after-remove postrm.sh \\\n\t\tcloudflared=$(INSTALL_BINDIR) cloudflared.1=$(INSTALL_MANDIR)\nendef\n\n.PHONY: cloudflared-deb\ncloudflared-deb: cloudflared cloudflared.1\n\t$(call build_package,deb)\n\n.PHONY: cloudflared-rpm\ncloudflared-rpm: cloudflared cloudflared.1\n\t$(call build_package,rpm)\n\n.PHONY: cloudflared-pkg\ncloudflared-pkg: cloudflared cloudflared.1\n\t$(call build_package,osxpkg)\n\n.PHONY: cloudflared-msi\ncloudflared-msi:\n\twixl --define Version=$(VERSION) --define Path=$(EXECUTABLE_PATH) --output cloudflared-$(VERSION)-$(TARGET_ARCH).msi cloudflared.wxs\n\n.PHONY: github-release-dryrun\ngithub-release-dryrun:\n\tpython3 github_release.py --path $(PWD)/built_artifacts --release-version $(VERSION) --dry-run\n\n.PHONY: github-release\ngithub-release:\n\tpython3 github_release.py --path $(PWD)/built_artifacts --release-version $(VERSION)\n\tpython3 github_message.py --release-version $(VERSION)\n\n.PHONY: r2-linux-release\nr2-linux-release:\n\tpython3 ./release_pkgs.py\n\n.PHONY: capnp\ncapnp:\n\twhich capnp  # https://capnproto.org/install.html\n\twhich capnpc-go  # go install zombiezen.com/go/capnproto2/capnpc-go@latest\n\tcapnp compile -ogo tunnelrpc/proto/tunnelrpc.capnp tunnelrpc/proto/quic_metadata_protocol.capnp\n\n.PHONY: vet\nvet:\n\tgo vet -mod=vendor github.com/cloudflare/cloudflared/...\n\n.PHONY: fmt\nfmt:\n\tgoimports -l -w -local github.com/cloudflare/cloudflared $$(go list -mod=vendor -f '{{.Dir}}' -a ./... | fgrep -v tunnelrpc/proto)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6396484375,
          "content": "# Cloudflare Tunnel client\n\nContains the command-line client for Cloudflare Tunnel, a tunneling daemon that proxies traffic from the Cloudflare network to your origins.\nThis daemon sits between Cloudflare network and your origin (e.g. a webserver). Cloudflare attracts client requests and sends them to you\nvia this daemon, without requiring you to poke holes on your firewall --- your origin can remain as closed as possible.\nExtensive documentation can be found in the [Cloudflare Tunnel section](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps) of the Cloudflare Docs.\nAll usages related with proxying to your origins are available under `cloudflared tunnel help`.\n\nYou can also use `cloudflared` to access Tunnel origins (that are protected with `cloudflared tunnel`) for TCP traffic\nat Layer 4 (i.e., not HTTP/websocket), which is relevant for use cases such as SSH, RDP, etc.\nSuch usages are available under `cloudflared access help`.\n\nYou can instead use [WARP client](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/private-networks)\nto access private origins behind Tunnels for Layer 4 traffic without requiring `cloudflared access` commands on the client side.\n\n\n## Before you get started\n\nBefore you use Cloudflare Tunnel, you'll need to complete a few steps in the Cloudflare dashboard: you need to add a\nwebsite to your Cloudflare account. Note that today it is possible to use Tunnel without a website (e.g. for private\nrouting), but for legacy reasons this requirement is still necessary:\n1. [Add a website to Cloudflare](https://support.cloudflare.com/hc/en-us/articles/201720164-Creating-a-Cloudflare-account-and-adding-a-website)\n2. [Change your domain nameservers to Cloudflare](https://support.cloudflare.com/hc/en-us/articles/205195708)\n\n\n## Installing `cloudflared`\n\nDownloads are available as standalone binaries, a Docker image, and Debian, RPM, and Homebrew packages. You can also find releases [here](https://github.com/cloudflare/cloudflared/releases) on the `cloudflared` GitHub repository.\n\n* You can [install on macOS](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation#macos) via Homebrew or by downloading the [latest Darwin amd64 release](https://github.com/cloudflare/cloudflared/releases)\n* Binaries, Debian, and RPM packages for Linux [can be found here](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation#linux)\n* A Docker image of `cloudflared` is [available on DockerHub](https://hub.docker.com/r/cloudflare/cloudflared)\n* You can install on Windows machines with the [steps here](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/install-and-setup/installation#windows)\n* To build from source, first you need to download the go toolchain by running `./.teamcity/install-cloudflare-go.sh` and follow the output. Then you can run `make cloudflared`\n\nUser documentation for Cloudflare Tunnel can be found at https://developers.cloudflare.com/cloudflare-one/connections/connect-apps\n\n\n## Creating Tunnels and routing traffic\n\nOnce installed, you can authenticate `cloudflared` into your Cloudflare account and begin creating Tunnels to serve traffic to your origins.\n\n* Create a Tunnel with [these instructions](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/create-tunnel)\n* Route traffic to that Tunnel:\n  * Via public [DNS records in Cloudflare](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/routing-to-tunnel/dns)\n  * Or via a public hostname guided by a [Cloudflare Load Balancer](https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/routing-to-tunnel/lb)\n  * Or from [WARP client private traffic](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/private-net/)\n\n\n## TryCloudflare\n\nWant to test Cloudflare Tunnel before adding a website to Cloudflare? You can do so with TryCloudflare using the documentation [available here](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/do-more-with-tunnels/trycloudflare/).\n\n## Deprecated versions\n\nCloudflare currently supports versions of cloudflared that are **within one year** of the most recent release. Breaking changes unrelated to feature availability may be introduced that will impact versions released more than one year ago. You can read more about upgrading cloudflared in our [developer documentation](https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/downloads/#updating-cloudflared).\n\nFor example, as of January 2023 Cloudflare will support cloudflared version 2023.1.1 to cloudflared 2022.1.1.\n"
        },
        {
          "name": "RELEASE_NOTES",
          "type": "blob",
          "size": 100.8544921875,
          "content": "2025.1.0\n- 2025-01-06 TUN-8842: Add Ubuntu Noble and 'any' debian distributions to release script\n- 2025-01-06 TUN-8807: Add support_datagram_v3 to remote feature rollout\n- 2024-12-20 TUN-8829: add CONTAINER_BUILD to dockerfiles\n\n2024.12.2\n- 2024-12-19 TUN-8822: Prevent concurrent usage of ICMPDecoder\n- 2024-12-18 TUN-8818: update changes document to reflect newly added diag subcommand\n- 2024-12-17 TUN-8817: Increase close session channel by one since there are two writers\n- 2024-12-13 TUN-8797: update CHANGES.md with note about semi-deterministic approach used to bind metrics server\n- 2024-12-13 TUN-8724: Add CLI command for diagnostic procedure\n- 2024-12-11 TUN-8786: calculate cli flags once for the diagnostic procedure\n- 2024-12-11 TUN-8792: Make diag/system endpoint always return a JSON\n- 2024-12-10 TUN-8783: fix log collectors for the diagnostic procedure\n- 2024-12-10 TUN-8785: include the icmp sources in the diag's tunnel state\n- 2024-12-10 TUN-8784: Set JSON encoder options to print formatted JSON when writing diag files\n\n2024.12.1\n- 2024-12-10 TUN-8795: update createrepo to createrepo_c to fix the release_pkgs.py script\n\n2024.12.0\n- 2024-12-09 TUN-8640: Add ICMP support for datagram V3\n- 2024-12-09 TUN-8789: make python package installation consistent\n- 2024-12-06 TUN-8781: Add Trixie, drop Buster. Default to Bookworm\n- 2024-12-05 TUN-8775: Make sure the session Close can only be called once\n- 2024-12-04 TUN-8725: implement diagnostic procedure\n- 2024-12-04 TUN-8767: include raw output from network collector in diagnostic zipfile\n- 2024-12-04 TUN-8770: add cli configuration and tunnel configuration to diagnostic zipfile\n- 2024-12-04 TUN-8768: add job report to diagnostic zipfile\n- 2024-12-03 TUN-8726: implement compression routine to be used in diagnostic procedure\n- 2024-12-03 TUN-8732: implement port selection algorithm\n- 2024-12-03 TUN-8762: fix argument order when invoking tracert and modify network info output parsing.\n- 2024-12-03 TUN-8769: fix k8s log collector arguments\n- 2024-12-03 TUN-8727: extend client to include function to get cli configuration and tunnel configuration\n- 2024-11-29 TUN-8729: implement network collection for diagnostic procedure\n- 2024-11-29 TUN-8727: implement metrics, runtime, system, and tunnelstate in diagnostic http client\n- 2024-11-27 TUN-8733: add log collection for docker\n- 2024-11-27 TUN-8734: add log collection for kubernetes\n- 2024-11-27 TUN-8640: Refactor ICMPRouter to support new ICMPResponders\n- 2024-11-26 TUN-8735: add managed/local log collection\n- 2024-11-25 TUN-8728: implement diag/tunnel endpoint\n- 2024-11-25 TUN-8730: implement diag/configuration\n- 2024-11-22 TUN-8737: update metrics server port selection\n- 2024-11-22 TUN-8731: Implement diag/system endpoint\n- 2024-11-21 TUN-8748: Migrated datagram V3 flows to use migrated context\n\n2024.11.1\n- 2024-11-18 Add cloudflared tunnel ready command\n- 2024-11-14 Make metrics a requirement for tunnel ready command\n- 2024-11-12 TUN-8701:  Simplify flow registration logs for datagram v3\n- 2024-11-11 add: new go-fuzz targets\n- 2024-11-07 TUN-8701: Add metrics and adjust logs for datagram v3\n- 2024-11-06 TUN-8709: Add session migration for datagram v3\n- 2024-11-04 Fixed 404 in README.md to TryCloudflare\n- 2024-09-24 Update semgrep.yml\n\n2024.11.0\n- 2024-11-05 VULN-66059: remove ssh server tests\n- 2024-11-04 TUN-8700: Add datagram v3 muxer\n- 2024-11-04 TUN-8646: Allow experimental feature support for datagram v3\n- 2024-11-04 TUN-8641: Expose methods to simplify V3 Datagram parsing on the edge\n- 2024-10-31 TUN-8708: Bump python min version to 3.10\n- 2024-10-31 TUN-8667: Add datagram v3 session manager\n- 2024-10-25 TUN-8692: remove dashes from session id\n- 2024-10-24 TUN-8694: Rework release script\n- 2024-10-24 TUN-8661: Refactor connection methods to support future different datagram muxing methods\n- 2024-07-22 TUN-8553: Bump go to 1.22.5 and go-boring 1.22.5-1\n\n2024.10.1\n- 2024-10-23 TUN-8694: Fix github release script\n- 2024-10-21 Revert \"TUN-8592: Use metadata from the edge to determine if request body is empty for QUIC transport\"\n- 2024-10-18 TUN-8688: Correct UDP bind for IPv6 edge connectivity on macOS\n- 2024-10-17 TUN-8685: Bump coredns dependency\n- 2024-10-16 TUN-8638: Add datagram v3 serializers and deserializers\n- 2024-10-15 chore: Remove h2mux code\n- 2024-10-11 TUN-8631: Abort release on version mismatch\n\n2024.10.0\n- 2024-10-01 TUN-8646: Add datagram v3 support feature flag\n- 2024-09-30 TUN-8621: Fix cloudflared version in change notes to account for release date\n- 2024-09-19 Adding semgrep yaml file\n- 2024-09-12 TUN-8632: Delay checking auto-update by the provided frequency\n- 2024-09-11 TUN-8630: Check checksum of downloaded binary to compare to current for auto-updating\n- 2024-09-09 TUN-8629: Cloudflared update on Windows requires running it twice to update\n- 2024-09-06 PPIP-2310: Update quick tunnel disclaimer\n- 2024-08-30 TUN-8621: Prevent QUIC connection from closing before grace period after unregistering\n- 2024-08-09 TUN-8592: Use metadata from the edge to determine if request body is empty for QUIC transport\n- 2024-06-26 TUN-8484: Print response when QuickTunnel can't be unmarshalled\n\n2024.9.1\n- 2024-09-10 Revert Release 2024.9.0\n\n2024.9.0\n- 2024-09-10 TUN-8621: Fix cloudflared version in change notes.\n- 2024-09-06 PPIP-2310: Update quick tunnel disclaimer\n- 2024-08-30 TUN-8621: Prevent QUIC connection from closing before grace period after unregistering\n- 2024-08-09 TUN-8592: Use metadata from the edge to determine if request body is empty for QUIC transport\n- 2024-06-26 TUN-8484: Print response when QuickTunnel can't be unmarshalled\n\n2024.8.3\n- 2024-08-15 TUN-8591 login command without extra text\n- 2024-03-25 remove code that will not be executed\n- 2024-03-25 remove code that will not be executed\n\n2024.8.2\n- 2024-08-05 TUN-8583: change final directory of artifacts\n- 2024-08-05 TUN-8585: Avoid creating GH client when dry-run is true\n\n2024.7.3\n- 2024-07-31 TUN-8546: Fix final artifacts paths\n\n2024.7.2\n- 2024-07-17 TUN-8546: rework MacOS build script\n\n2024.7.1\n- 2024-07-16 TUN-8543: use -p flag to create intermediate directories\n\n2024.7.0\n- 2024-07-05 TUN-8520: add macos arm64 build\n- 2024-07-05 TUN-8523: refactor makefile and cfsetup\n- 2024-07-02 TUN-8504: Use pre-installed python version instead of downloading it on Windows builds\n- 2024-06-26 TUN-8489: Add default noop logger for capnprpc\n- 2024-06-25 TUN-8487: Add user-agent for quick-tunnel requests\n- 2023-12-12 TUN-8057: cloudflared uses new PQ curve ID\n\n2024.6.1\n- 2024-06-12 TUN-8461: Don't log Failed to send session payload if the error is EOF\n- 2024-06-07 TUN-8456: Update quic-go to 0.45 and collect mtu and congestion control metrics\n- 2024-06-06 TUN-8452: Add flag to control QUIC stream-level flow control limit\n- 2024-06-06 TUN-8451: Log QUIC flow control frames and transport parameters received\n- 2024-06-05 TUN-8449: Add flag to control QUIC connection-level flow control limit and increase default to 30MB\n\n2024.6.0\n- 2024-05-30 TUN-8441: Correct UDP total sessions metric to a counter and add new ICMP metrics\n- 2024-05-28 TUN-8422: Add metrics for capnp method calls\n- 2024-05-24 TUN-8424: Refactor capnp registration server\n- 2024-05-23 TUN-8427: Fix BackoffHandler's internally shared clock structure\n- 2024-05-21 TUN-8425: Remove ICMP binding for quick tunnels\n- 2024-05-20 TUN-8423: Deprecate older legacy tunnel capnp interfaces\n- 2024-05-15 TUN-8419: Add capnp safe transport\n- 2024-05-13 TUN-8415: Refactor capnp rpc into a single module\n\n2024.5.0\n- 2024-05-07 TUN-8407: Upgrade go to version 1.22.2\n\n2024.4.1\n- 2024-04-22 TUN-8380: Add sleep before requesting quick tunnel as temporary fix for component tests\n- 2024-04-19 TUN-8374: Close UDP socket if registration fails\n- 2024-04-18 TUN-8371: Bump quic-go to v0.42.0\n- 2024-04-03 TUN-8333: Bump go-jose dependency to v4\n- 2024-04-02 TUN-8331: Add unit testing for AccessJWTValidator middleware\n\n2024.4.0\n- 2024-04-02 feat: provide short version (#1206)\n- 2024-04-02 Format code\n- 2024-01-18 feat: auto tls sni\n- 2023-12-24 fix checkInPingGroup bugs\n- 2023-12-15 Add environment variables for TCP tunnel hostname / destination / URL.\n\n2024.3.0\n- 2024-03-14 TUN-8281: Run cloudflared query list tunnels/routes endpoint in a paginated way\n- 2024-03-13 TUN-8297: Improve write timeout logging on safe_stream.go\n- 2024-03-07 TUN-8290: Remove `|| true` from postrm.sh\n- 2024-03-05 TUN-8275: Skip write timeout log on \"no network activity\"\n- 2024-01-23 Update postrm.sh to fix incomplete uninstall\n- 2024-01-05 fix typo in errcheck for response parsing logic in CreateTunnel routine\n- 2023-12-23 Update linux_service.go\n- 2023-12-07 ci: bump actions/checkout to v4\n- 2023-12-07 ci/check: bump actions/setup-go to v5\n- 2023-04-28 check.yaml: bump actions/setup-go to v4\n\n2024.2.1\n- 2024-02-20 TUN-8242: Update Changes.md file with new remote diagnostics behaviour\n- 2024-02-19 TUN-8238: Fix type mismatch introduced by fast-forward\n- 2024-02-16 TUN-8243: Collect metrics on the number of QUIC frames sent/received\n- 2024-02-15 TUN-8238: Refactor proxy logging\n- 2024-02-14 TUN-8242: Enable remote diagnostics by default\n- 2024-02-12 TUN-8236: Add write timeout to quic and tcp connections\n- 2024-02-09 TUN-8224: Fix safety of TCP stream logging, separate connect and ack log messages\n\n2024.2.0\n- 2024-02-07 TUN-8224: Count and collect metrics on stream connect successes/errors\n\n2024.1.5\n- 2024-01-22 TUN-8176: Support ARM platforms that don't have an FPU or have it enabled in kernel\n- 2024-01-15 TUN-8158: Bring back commit e6537418859afcac29e56a39daa08bcabc09e048 and fixes infinite loop on linux when the socket is closed\n\n2024.1.4\n- 2024-01-19 Revert \"TUN-8158: Add logging to confirm when ICMP reply is returned to the edge\"\n\n2024.1.3\n- 2024-01-15 TUN-8161: Fix broken ARM build for armv6\n- 2024-01-15 TUN-8158: Add logging to confirm when ICMP reply is returned to the edge\n\n2024.1.2\n- 2024-01-11 TUN-8147: Disable ECN usage due to bugs in detecting if supported\n- 2024-01-11 TUN-8146: Fix export path for install-go command\n- 2024-01-11 TUN-8146: Fix Makefile targets should not be run in parallel and install-go script was missing shebang\n- 2024-01-10 TUN-8140: Remove homebrew scripts\n\n2024.1.1\n- 2024-01-10 TUN-8134: Revert installed prefix to /usr\n- 2024-01-09 TUN-8130: Fix path to install go for mac build\n- 2024-01-09 TUN-8129: Use the same build command between branch and release builds\n- 2024-01-09 TUN-8130: Install go tool chain in /tmp on build agents\n- 2024-01-09 TUN-8134: Install cloudflare go as part of make install\n- 2024-01-08 TUN-8118: Disable FIPS module to build with go-boring without CGO_ENABLED\n\n2024.1.0\n- 2024-01-01 TUN-7934: Update quic-go to a version that queues datagrams for better throughput and drops large datagram\n- 2023-12-20 TUN-8072: Need to set GOCACHE in mac go installation script\n- 2023-12-17 TUN-8072: Add script to download cloudflare go for Mac build agents\n- 2023-12-15 Fix nil pointer dereference segfault when passing \"null\" config json to cloudflared tunnel ingress validate (#1070)\n- 2023-12-15 configuration.go: fix developerPortal link (#960)\n- 2023-12-14 tunnelrpc/pogs: fix dropped test errors (#1106)\n- 2023-12-14 cmd/cloudflared/updater: fix dropped error (#1055)\n- 2023-12-14 use os.Executable to discover the path to cloudflared (#1040)\n- 2023-12-14 Remove extraneous `period` from Path Environment Variable (#1009)\n- 2023-12-14 Use CLI context when running tunnel (#597)\n- 2023-12-14 TUN-8066: Define scripts to build on Windows agents\n- 2023-12-11 TUN-8052: Update go to 1.21.5\n- 2023-12-07 TUN-7970: Default to enable post quantum encryption for quic transport\n- 2023-12-04 TUN-8006: Update quic-go to latest upstream\n- 2023-11-15 VULN-44842 Add a flag that allows users to not send the Access JWT to stdout\n- 2023-11-13 TUN-7965: Remove legacy incident status page check\n- 2023-11-13 AUTH-5682 Org token flow in Access logins should pass CF_AppSession cookie\n\n2023.10.0\n- 2023-10-06 TUN-7864: Document cloudflared versions support\n- 2023-10-03 CUSTESC-33731: Make rule match test report rule in 0-index base\n- 2023-09-22 TUN-7824: Fix usage of systemctl status to detect which services are installed\n- 2023-09-20 TUN-7813: Improve tunnel delete command to use cascade delete\n- 2023-09-20 TUN-7787: cloudflared only list ip routes targeted for cfd_tunnel\n- 2023-09-15 TUN-7787: Refactor cloudflared to use new route endpoints based on route IDs\n- 2023-09-08 TUN-7776: Remove warp-routing flag from cloudflared\n- 2023-09-05 TUN-7756: Clarify that QUIC is mandatory to support ICMP proxying\n\n2023.8.2\n- 2023-08-25 TUN-7700: Implement feature selector to determine if connections will prefer post quantum cryptography\n- 2023-08-22 TUN-7707: Use X25519Kyber768Draft00 curve when post-quantum feature is enabled\n\n2023.8.1\n- 2023-08-23 TUN-7718: Update R2 Token to no longer encode secret\n\n2023.8.0\n- 2023-07-26 TUN-7584: Bump go 1.20.6\n\n2023.7.3\n- 2023-07-25 TUN-7628: Correct Host parsing for Access\n- 2023-07-24 TUN-7624: Fix flaky TestBackoffGracePeriod test in cloudflared\n\n2023.7.2\n- 2023-07-19 TUN-7599: Onboard cloudflared to Software Dashboard\n- 2023-07-19 TUN-7587: Remove junos builds\n- 2023-07-18 TUN-7597: Add flag to disable auto-update services to be installed\n- 2023-07-17 TUN-7594: Add nightly arm64 cloudflared internal deb publishes\n- 2023-07-14 TUN-7586: Upgrade go-jose/go-jose/v3 and core-os/go-oidc/v3\n- 2023-07-14 TUN-7589: Remove legacy golang.org/x/crypto/ssh/terminal package usage\n- 2023-07-14 TUN-7590: Remove usages of ioutil\n- 2023-07-14 TUN-7585: Remove h2mux compression\n- 2023-07-14 TUN-7588: Update package coreos/go-systemd\n\n2023.7.1\n- 2023-07-13 TUN-7582: Correct changelog wording for --management-diagnostics\n- 2023-07-12 TUN-7575: Add option to disable PTMU discovery over QUIC\n\n2023.7.0\n- 2023-07-06 TUN-7558: Flush on Writes for StreamBasedOriginProxy\n- 2023-07-05 TUN-7553: Add flag to enable management diagnostic services\n- 2023-07-05 TUN-7564: Support cf-trace-id for cloudflared access\n- 2023-07-05 TUN-7477: Decrement UDP sessions on shutdown\n- 2023-07-03 TUN-7545: Add support for full bidirectionally streaming with close signal propagation\n- 2023-06-30 TUN-7549: Add metrics route to management service\n- 2023-06-30 TUN-7551: Complete removal of raven-go to sentry-go\n- 2023-06-30 TUN-7550: Add pprof endpoint to management service\n- 2023-06-29 TUN-7543: Add --debug-stream flag to cloudflared access ssh\n- 2023-06-26 TUN-6011: Remove docker networks from ICMP Proxy test\n- 2023-06-20 AUTH-5328 Pass cloudflared_token_check param when running cloudflared access login\n\n2023.6.1\n- 2023-06-19 TUN-7480: Added a timeout for unregisterUDP.\n- 2023-06-16 TUN-7477: Add UDP/TCP session metrics\n- 2023-06-14 TUN-7468: Increase the limit of incoming streams\n\n2023.6.0\n- 2023-06-15 TUN-7471: Fixes cloudflared not closing the quic stream on unregister UDP session\n- 2023-06-09 TUN-7463: Add default ingress rule if no ingress rules are provided when updating the configuration\n- 2023-05-31 TUN-7447: Add a cover build to report code coverage\n\n2023.5.1\n- 2023-05-16 TUN-7424: Add CORS headers to host_details responses\n- 2023-05-11 TUN-7421: Add *.cloudflare.com to permitted Origins for management WebSocket requests\n- 2023-05-05 TUN-7404: Default configuration version set to -1\n- 2023-05-05 TUN-7227: Migrate to devincarr/quic-go\n\n2023.5.0\n- 2023-04-27 TUN-7398: Add support for quic safe stream to set deadline\n- 2023-04-26 TUN-7394: Retry StartFirstTunnel on quic.ApplicationErrors\n- 2023-04-26 TUN-7392: Ignore release checksum upload if asset already uploaded\n- 2023-04-25 TUN-7392: Ignore duplicate artifact uploads for github release\n- 2023-04-25 TUN-7393: Add json output for cloudflared tail\n- 2023-04-24 TUN-7390: Remove Debian stretch builds\n\n2023.4.2\n- 2023-04-24 TUN-7133: Add sampling support for streaming logs\n- 2023-04-21 TUN-7141: Add component tests for streaming logs\n- 2023-04-21 TUN-7373: Streaming logs override for same actor\n- 2023-04-20 TUN-7383: Bump requirements.txt\n- 2023-04-19 TUN-7361: Add a label to override hostname\n- 2023-04-19 TUN-7378: Remove RPC debug logs\n- 2023-04-18 TUN-7360: Add Get Host Details handler in management service\n- 2023-04-17 AUTH-3122 Verify that Access tokens are still valid in curl command\n- 2023-04-17 TUN-7129: Categorize TCP logs for streaming logs\n- 2023-04-17 TUN-7130: Categorize UDP logs for streaming logs\n- 2023-04-10 AUTH-4887 Add aud parameter to token transfer url\n\n2023.4.1\n- 2023-04-13 TUN-7368: Report destination address for TCP requests in logs\n- 2023-04-12 TUN-7134: Acquire token for cloudflared tail\n- 2023-04-12 TUN-7131: Add cloudflared log event to connection messages and enable streaming logs\n- 2023-04-11 TUN-7132 TUN-7136: Add filter support for streaming logs\n- 2023-04-06 TUN-7354: Don't warn for empty ingress rules when using --token\n- 2023-04-06 TUN-7128: Categorize logs from public hostname locations\n- 2023-04-06 TUN-7351: Add streaming logs session ping and timeout\n- 2023-04-06 TUN-7335: Fix cloudflared update not working in windows\n\n2023.4.0\n- 2023-04-07 TUN-7356: Bump golang.org/x/net package to 0.7.0\n- 2023-04-07 TUN-7357: Bump to go 1.19.6\n- 2023-04-06 TUN-7127: Disconnect logger level requirement for management\n- 2023-04-05 TUN-7332: Remove legacy tunnel force flag\n- 2023-04-05 TUN-7135: Add cloudflared tail\n- 2023-04-04 Add suport for OpenBSD (#916)\n- 2023-04-04 Fix typo (#918)\n- 2023-04-04 TUN-7125: Add management streaming logs WebSocket protocol\n- 2023-03-30 TUN-9999: Remove classic tunnel component tests\n- 2023-03-30 TUN-7126: Add Management logger io.Writer\n- 2023-03-29 TUN-7324: Add http.Hijacker to connection.ResponseWriter\n- 2023-03-29 TUN-7333: Default features checkable at runtime across all packages\n- 2023-03-21 TUN-7124: Add intercept ingress rule for management requests\n\n2023.3.1\n- 2023-03-13 TUN-7271: Return 503 status code when no ingress rules configured\n- 2023-03-10 TUN-7272: Fix cloudflared returning non supported status service which breaks configuration migration\n- 2023-03-09 TUN-7259: Add warning for missing ingress rules\n- 2023-03-09 TUN-7268: Default to Program Files as location for win32\n- 2023-03-07 TUN-7252: Remove h2mux connection\n- 2023-03-07 TUN-7253: Adopt http.ResponseWriter for connection.ResponseWriter\n- 2023-03-06 TUN-7245: Add bastion flag to origin service check\n- 2023-03-06 EDGESTORE-108: Remove deprecated s3v2 signature\n- 2023-03-02 TUN-7226: Fixed a missed rename\n\n2023.3.0\n- 2023-03-01 GH-352: Add Tunnel CLI option \"edge-bind-address\" (#870)\n- 2023-03-01 Fixed WIX template to allow MSI upgrades (#838)\n- 2023-02-28 TUN-7213: Decode Base64 encoded key before writing it\n- 2023-02-28 check.yaml: update actions to v3 (#876)\n- 2023-02-27 TUN-7213: Debug homebrew-cloudflare  build\n- 2023-02-15 RTG-2476 Add qtls override for Go 1.20\n\n2023.2.2\n- 2023-02-22 TUN-7197: Add connIndex tag to debug messages of incoming requests\n- 2023-02-08 TUN-7167: Respect protocol overrides with --token\n- 2023-02-06 TUN-7065: Remove classic tunnel creation\n- 2023-02-06 TUN-6938: Force h2mux protocol to http2 for named tunnels\n- 2023-02-06 TUN-6938: Provide QUIC as first in protocol list\n- 2023-02-03 TUN-7158: Correct TCP tracing propagation\n- 2023-02-01 TUN-7151: Update changes file with latest release notices\n\n2023.2.1\n- 2023-02-01 TUN-7065: Revert Ingress Rule check for named tunnel configurations\n- 2023-02-01 Revert \"TUN-7065: Revert Ingress Rule check for named tunnel configurations\"\n- 2023-02-01 Revert \"TUN-7065: Remove classic tunnel creation\"\n2023.1.0\n- 2023-01-10 TUN-7064: RPM digests are now sha256 instead of md5sum\n- 2023-01-04 RTG-2418 Update qtls\n- 2022-12-24 TUN-7057: Remove dependency github.com/gorilla/mux\n- 2022-12-24 TUN-6724: Migrate to sentry-go from raven-go\n\n2022.12.1\n- 2022-12-20 TUN-7021: Fix proxy-dns not starting when cloudflared tunnel is run\n- 2022-12-15 TUN-7010: Changelog for release 2022.12.0\n\n2022.12.0\n- 2022-12-14 TUN-6999: cloudflared should attempt other edge addresses before falling back on protocol\n- 2022-12-13 TUN-7004: Dont show local config dirs for remotely configured tuns\n- 2022-12-12 TUN-7003: Tempoarily disable erroneous notarize-app\n- 2022-12-12 TUN-7003: Add back a missing fi\n- 2022-12-07 TUN-7000: Reduce metric cardinality of closedConnections metric by removing error as tag\n- 2022-12-07 TUN-6994: Improve logging config file not found\n- 2022-12-07 TUN-7002: Randomise first region selection\n- 2022-12-07 TUN-6995: Disable quick-tunnels spin up by default\n- 2022-12-05 TUN-6984: Add bash set x to improve visibility during builds\n- 2022-12-05 TUN-6984: [CI] Ignore security import errors for code_sigining\n- 2022-12-05 TUN-6984: [CI] Don't fail on unset.\n- 2022-11-30 TUN-6984: Set euo pipefile for homebrew builds\n\n2022.11.1\n- 2022-11-29 TUN-6981: We should close UDP socket if failed to connecto to edge\n- 2022-11-25 CUSTESC-23757: Fix a bug where a wildcard ingress rule would match an host without starting with a dot\n- 2022-11-24 TUN-6970: Print newline when printing tunnel token\n- 2022-11-22 TUN-6963: Refactor Metrics service setup\n2022.11.0\n- 2022-11-16 Revert \"TUN-6935: Cloudflared should use APIToken instead of serviceKey\"\n- 2022-11-16 TUN-6929: Use same protocol for other connections as first one\n- 2022-11-14 TUN-6941: Reduce log level to debug when failing to proxy ICMP reply\n- 2022-11-14 TUN-6935: Cloudflared should use APIToken instead of serviceKey\n- 2022-11-14 TUN-6935: Cloudflared should use APIToken instead of serviceKey\n- 2022-11-11 TUN-6937: Bump golang.org/x/* packages to new release tags\n- 2022-11-10 ZTC-234: macOS tests\n- 2022-11-09 TUN-6927: Refactor validate access configuration to allow empty audTags only\n- 2022-11-08 ZTC-234: Replace ICMP funnels when ingress connection changes\n- 2022-11-04 TUN-6917: Bump go to 1.19.3\n- 2022-11-02 Issue #574: Better ssh config for short-lived cert (#763)\n- 2022-10-28 TUN-6898: Fix bug handling IPv6 based ingresses with missing port\n- 2022-10-28 TUN-6898: Refactor addPortIfMissing\n2022.10.3\n- 2022-10-24 TUN-6871: Add default feature to cloudflared to support EOF on QUIC connections\n- 2022-10-19 TUN-6876: Fix flaky TestTraceICMPRouterEcho by taking account request span can return before reply\n- 2022-10-18 TUN-6867: Clear spans right after they are serialized to avoid returning duplicate spans\n2022.10.2\n- 2022-10-18 TUN-6869: Fix Makefile complaining about missing GO packages\n- 2022-10-18 TUN-6864: Don't reuse port in quic unit tests\n- 2022-10-18 TUN-6868: Return left padded tracing ID when tracing identity is converted to string\n\n2022.10.1\n- 2022-10-16 TUN-6861: Trace ICMP on Windows\n- 2022-10-15 TUN-6860: Send access configuration keys to the edge\n- 2022-10-14 TUN-6858: Trace ICMP reply\n- 2022-10-13 TUN-6855: Add DatagramV2Type for IP packet with trace and tracing spans\n- 2022-10-13 TUN-6856: Refactor to lay foundation for tracing ICMP\n- 2022-10-13 TUN-6604: Trace icmp echo request on Linux and Darwin\n- 2022-10-12 Fix log message (#591)\n- 2022-10-12 TUN-6853: Reuse source port when connecting to the edge for quic connections\n- 2022-10-11 TUN-6829: Allow user of datagramsession to control logging level of errors\n- 2022-10-10 RTG-2276 Update qtls and go mod tidy\n- 2022-10-05 Add post-quantum flag to quick tunnel\n- 2022-10-05 TUN-6823: Update github release message to pull from KV\n- 2022-10-04 TUN-6825: Fix cloudflared:version images require arch hyphens\n- 2022-10-03 TUN-6806: Add ingress rule number to log when filtering due to middlware handler\n- 2022-08-17 Label correct container\n- 2022-08-16 Fix typo in help text for `cloudflared tunnel route lb`\n- 2022-07-18 drop usage of cat when sed is invoked to generate the manpage\n- 2021-03-15 update-build-readme\n- 2021-03-15 fix link\n\n2022.10.0\n- 2022-09-30 TUN-6755: Remove unused publish functions\n- 2022-09-30 TUN-6813: Only proxy ICMP packets when warp-routing is enabled\n- 2022-09-29 TUN-6811: Ping group range should be parsed as int32\n- 2022-09-29 TUN-6812: Drop IP packets if ICMP proxy is not initialized\n- 2022-09-28 TUN-6716: Document limitation of Windows ICMP proxy\n- 2022-09-28 TUN-6810: Add component test for post-quantum\n- 2022-09-27 TUN-6715: Provide suggestion to add cloudflared to ping_group_range if it failed to open ICMP socket\n- 2022-09-22 TUN-6792: Fix brew core release by not auditing the formula\n- 2022-09-22 TUN-6774: Validate OriginRequest.Access to add Ingress.Middleware\n- 2022-09-22 TUN-6775: Add middleware.Handler verification to ProxyHTTP\n- 2022-09-22 TUN-6791: Calculate ICMPv6 checksum\n- 2022-09-22 TUN-6801: Add punycode alternatives for ingress rules\n- 2022-09-21 TUN-6772: Add a JWT Validator as an ingress verifier\n- 2022-09-21 TUN-6772: Add a JWT Validator as an ingress verifier\n- 2022-09-21 TUN-6774: Validate OriginRequest.Access to add Ingress.Middleware\n- 2022-09-21 TUN-6772: Add a JWT Validator as an ingress verifier\n- 2022-09-20 TUN-6741: ICMP proxy tries to listen on specific IPv4 & IPv6 when possible\n2022.9.1\n- 2022-09-20 TUN-6777: Fix race condition in TestFunnelIdleTimeout\n- 2022-09-20 TUN-6595: Enable datagramv2 and icmp proxy by default\n- 2022-09-20 TUN-6773: Add access based configuration to ingress.OriginRequestConfig\n- 2022-09-19 TUN-6778: Cleanup logs about ICMP\n- 2022-09-19 TUN-6779: cloudflared should also use the root CAs from system pool to validate edge certificate\n- 2022-09-19 TUN-6780: Add support for certReload to also include support for client certificates\n- 2022-09-16 TUN-6767: Build ICMP proxy for Windows only when CGO is enabled\n- 2022-09-15 TUN-6590: Use Windows Teamcity agent to build binary\n- 2022-09-13 TUN-6592: Decrement TTL and return ICMP time exceed if it's 0\n- 2022-09-09 TUN-6749: Fix icmp_generic build\n- 2022-09-09 TUN-6744: On posix platforms, assign unique echo ID per (src, dst, echo ID)\n- 2022-09-08 TUN-6743: Support ICMPv6 echo on Windows\n- 2022-09-08 TUN-6689: Utilize new RegisterUDPSession to begin tracing\n- 2022-09-07 TUN-6688: Update RegisterUdpSession capnproto to include trace context\n- 2022-09-06 TUN-6740: Detect no UDP packets allowed and fallback from QUIC in that case\n- 2022-09-06 TUN-6654: Support ICMPv6 on Linux and Darwin\n- 2022-09-02 TUN-6696: Refactor flow into funnel and close idle funnels\n- 2022-09-02 TUN-6718: Bump go and go-boring 1.18.6\n- 2022-08-29 TUN-6531: Implement ICMP proxy for Windows using IcmpSendEcho\n- 2022-08-24 RTG-1339 Support post-quantum hybrid key exchange\n\n2022.9.0\n- 2022-09-05 TUN-6737: Fix datagramV2Type should be declared in its own block so it starts at 0\n- 2022-09-01 TUN-6725: Fix testProxySSEAllData\n- 2022-09-01 TUN-6726: Fix maxDatagramPayloadSize for Windows QUIC datagrams\n- 2022-09-01 TUN-6729: Fix flaky TestClosePreviousProxies\n- 2022-09-01 TUN-6728: Verify http status code ingress rule\n- 2022-08-25 TUN-6695: Implement ICMP proxy for linux\n\n2022.8.4\n- 2022-08-31 TUN-6717: Update Github action to run with Go 1.19\n- 2022-08-31 TUN-6720: Remove forcibly closing connection during reconnect signal\n- 2022-08-29 Release 2022.8.3\n\n2022.8.3\n- 2022-08-26 TUN-6708: Fix replace flow logic\n- 2022-08-25 TUN-6705: Tunnel should retry connections forever\n- 2022-08-25 TUN-6704: Honor protocol flag when edge discovery is unreachable\n- 2022-08-25 TUN-6699: Add metric for packet too big dropped\n- 2022-08-24 TUN-6691: Properly error check for net.ErrClosed\n- 2022-08-22 TUN-6679: Allow client side of quic request to close body\n- 2022-08-22 TUN-6586: Change ICMP proxy to only build for Darwin and use echo ID to track flows\n- 2022-08-18 TUN-6530: Implement ICMPv4 proxy\n- 2022-08-17 TUN-6666: Define packet package\n- 2022-08-17 TUN-6667: DatagramMuxerV2 provides a method to receive RawPacket\n- 2022-08-16 TUN-6657: Ask for Tunnel ID and Configuration on Bug Report\n- 2022-08-16 TUN-6676: Add suport for trailers in http2 connections\n- 2022-08-11 TUN-6575: Consume cf-trace-id from incoming http2 TCP requests\n\n2022.8.2\n- 2022-08-16 TUN-6656: Docker for arm64 should not be deployed in an amd64 container\n\n2022.8.1\n- 2022-08-15 TUN-6617: Updated CHANGES.md for protocol stickiness\n- 2022-08-12 EDGEPLAT-3918: bump go and go-boring to 1.18.5\n- 2022-08-12 TUN-6652: Publish dockerfile for both amd64 and arm64\n- 2022-08-11 TUN-6617: Dont fallback to http2 if QUIC conn was successful.\n- 2022-08-11 TUN-6617: Dont fallback to http2 if QUIC conn was successful.\n- 2022-08-11 Revert \"TUN-6617: Dont fallback to http2 if QUIC conn was successful.\"\n- 2022-08-11 TUN-6617: Dont fallback to http2 if QUIC conn was successful.\n- 2022-08-01 TUN-6584: Define QUIC datagram v2 format to support proxying IP packets\n\n2022.8.0\n- 2022-08-10 TUN-6637: Upgrade quic-go\n- 2022-08-10 TUN-6646: Add support to SafeStreamCloser to close only write side of stream\n- 2022-08-09 TUN-6642: Fix unexpected close of quic stream triggered by upstream origin close\n- 2022-08-09 TUN-6639: Validate cyclic ingress configuration\n- 2022-08-08 TUN-6637: Upgrade go version and quic-go\n- 2022-08-08 TUN-6639: Validate cyclic ingress configuration\n- 2022-08-04 EDGEPLAT-3918: build cloudflared for Bookworm\n- 2022-08-02 Revert \"TUN-6576: Consume cf-trace-id from incoming TCP requests to create root span\"\n- 2022-07-27 TUN-6601: Update gopkg.in/yaml.v3 references in modules\n- 2022-07-26 TUN-6576: Consume cf-trace-id from incoming TCP requests to create root span\n- 2022-07-26 TUN-6576: Consume cf-trace-id from incoming TCP requests to create root span\n- 2022-07-25 TUN-6598: Remove auto assignees on github issues\n- 2022-07-20 TUN-6583: Remove legacy --ui flag\n- 2022-07-20 cURL supports stdin and uses os pipes directly without copying\n- 2022-07-07 TUN-6517: Use QUIC stream context while proxying HTTP requests and TCP connections\n2022.7.1\n- 2022-07-06 TUN-6503: Fix transport fallback from QUIC in face of dial error \"no network activity\"\n\n2022.7.0\n- 2022-07-05 TUN-6499: Remove log that is per datagram\n- 2022-06-24 TUN-6460: Rename metric label location to edge_location\n- 2022-06-24 TUN-6459: Add cloudflared user-agent to access calls\n- 2022-06-17 TUN-6427: Differentiate between upstream request closed/canceled and failed origin requests\n- 2022-06-17 TUN-6388: Fix first tunnel connection not retrying\n- 2022-06-13 TUN-6384: Correct duplicate connection error to fetch new IP first\n- 2022-06-13 TUN-6373: Add edge-ip-version to remotely pushed configuration\n- 2022-06-07 TUN-6010: Add component tests for --edge-ip-version\n- 2022-05-20 TUN-6007: Implement new edge discovery algorithm\n- 2022-02-18 Ensure service install directories are created before writing file\n\n2022.6.3\n- 2022-06-20 TUN-6362: Add armhf support to cloudflare packaging\n\n2022.6.2\n- 2022-06-13 TUN-6381: Write error data on QUIC stream when we fail to talk to the origin; separate logging for protocol errors vs. origin errors.\n- 2022-06-17 TUN-6414: Remove go-sumtype from cloudflared build process\n- 2022-06-01 Add Http2Origin option to force HTTP/2 origin connections\n- 2022-06-02 fix ingress rules unit test\n- 2022-06-09 Update remaining OriginRequestConfig functions for Http2Origins\n- 2022-05-31 Add image source label to docker container.\n- 2022-05-10 Warp Private Network link updated\n\n2022.6.1\n- 2022-06-14 TUN-6395: Fix writing RPM repo data\n\n2022.6.0\n- 2022-06-14 Revert \"TUN-6010: Add component tests for --edge-ip-version\"\n- 2022-06-14 Revert \"TUN-6373: Add edge-ip-version to remotely pushed configuration\"\n- 2022-06-14 Revert \"TUN-6384: Correct duplicate connection error to fetch new IP first\"\n- 2022-06-14 Revert \"TUN-6007: Implement new edge discovery algorithm\"\n- 2022-06-13 TUN-6385: Don't share err between acceptStream loop and per-stream goroutines\n- 2022-06-13 TUN-6384: Correct duplicate connection error to fetch new IP first\n- 2022-06-13 TUN-6373: Add edge-ip-version to remotely pushed configuration\n- 2022-06-13 TUN-6380: Enforce connect and keep-alive timeouts for TCP connections in both WARP routing and websocket based TCP proxy.\n- 2022-06-11 Update issue templates\n- 2022-06-11 Amendment to previous PR\n- 2022-06-09 TUN-6347: Add TCP stream logs with FlowID\n- 2022-06-08 TUN-6361: Add cloudflared arm builds to pkging as well\n- 2022-06-07 TUN-6357: Add connector id to ready check endpoint\n- 2022-06-07 TUN-6010: Add component tests for --edge-ip-version\n- 2022-06-06 TUN-6191: Update quic-go to v0.27.1 and with custom patch to allow keep alive period to be configurable\n- 2022-06-03 TUN-6343: Fix QUIC->HTTP2 fallback\n- 2022-06-02 TUN-6339: Add config for IPv6 support\n- 2022-06-02 TUN-6341: Fix default config value for edge-ip-version\n- 2022-06-01 TUN-6323: Add Xenial and Trusty for Ubuntu pkging\n- 2022-05-31 TUN-6210: Add cloudflared.repo to make it easy for yum installs\n- 2022-05-30 TUN-6293: Update yaml v3 to latest hotfix\n- 2022-05-20 TUN-6007: Implement new edge discovery algorithm\n2022.5.3\n- 2022-05-30 TUN-6308: Add debug logs to see if packets are sent/received from edge\n- 2022-05-30 TUN-6301: Allow to update logger used by UDP session manager\n\n2022.5.2\n- 2022-05-23 TUN-6270: Import gpg keys from environment variables\n- 2022-05-24 TUN-6209: Improve feedback process if release_pkgs to deb and rpm fail\n- 2022-05-24 TUN-6280: Don't wrap qlog connection tracer for gatethering QUIC metrics since we're not writing qlog files.\n- 2022-05-25 TUN-6209: Sign RPM packages\n- 2022-05-25 TUN-6285: Upload pkg assets to repos when cloudflared is released.\n- 2022-05-24 TUN-6282: Upgrade golang to 1.17.10, go-boring to 1.17.9\n- 2022-05-26 TUN-6292: Debug builds for cloudflared\n- 2022-05-28 TUN-6304: Fixed some file permission issues\n- 2022-05-11 TUN-6197: Publish to brew core should not try to open the browser\n- 2022-05-12 TUN-5943: Add RPM support\n- 2022-05-18 TUN-6248: Fix panic in cloudflared during tracing when origin doesn't provide header map\n- 2022-05-18 TUN-6250: Add upstream response status code to tracing span attributes\n\n2022.5.1\n- 2022-05-06 TUN-6146: Release_pkgs is now a generic command line script\n- 2022-05-06 TUN-6185: Fix tcpOverWSOriginService not using original scheme for String representation\n- 2022-05-05 TUN-6175: Simply debian packaging by structural upload\n- 2022-05-05 TUN-5945: Added support for Ubuntu releases\n- 2022-05-04 TUN-6054: Create and upload deb packages to R2\n- 2022-05-03 TUN-6161: Set git user/email for brew core release\n- 2022-05-03 TUN-6166: Fix mocked QUIC transport for UDP proxy manager to return expected error\n- 2022-04-27 TUN-6016: Push local managed tunnels configuration to the edge\n2022.5.0\n- 2022-05-02 TUN-6158: Update golang.org/x/crypto\n- 2022-04-20 VULN-8383 Bump yaml.v2 to yaml.v3\n- 2022-04-21 TUN-6123: For a given connection with edge, close all datagram sessions through this connection when it's closed\n- 2022-04-20 TUN-6015: Add RPC method for pushing local config\n- 2022-04-21 TUN-6130: Fix vendoring due to case sensitive typo in package\n- 2022-04-27 TUN-6142: Add tunnel details support to RPC\n- 2022-04-28 TUN-6014: Add remote config flag as default feature\n- 2022-04-12 TUN-6000: Another fix for publishing to brew core\n- 2022-04-11 TUN-5990: Add otlp span export to response header\n- 2022-04-19 TUN-6070: First connection retries other edge IPs if the error is quic timeout(likely due to firewall blocking UDP)\n- 2022-04-11 TUN-6030: Add ttfb span for origin http request\n\n2022.4.1\n- 2022-04-11 TUN-6035: Reduce buffer size when proxying data\n- 2022-04-11 TUN-6038: Reduce buffer size used for proxying data\n- 2022-04-11 TUN-6043: Allow UI-managed Tunnels to fallback from QUIC but warn about that\n- 2022-04-07 TUN-6000 add version argument to bump-formula-pr\n- 2022-04-06 TUN-5989: Add in-memory otlp exporter\n\n2022.4.0\n- 2022-04-01 TUN-5973: Add backoff for non-recoverable errors as well\n- 2022-04-05 TUN-5992: Use QUIC protocol for remotely managed tunnels when protocol is unspecified\n- 2022-04-06 Update Makefile\n- 2022-04-06 TUN-5995: Update prometheus to 1.12.1 to avoid vulnerabilities\n- 2022-04-07 TUN-5995: Force prometheus v1.12.1 usage\n- 2022-04-07 TUN-4130: cloudflared docker images now have a latest tag\n- 2022-03-30 TUN-5842: Fix flaky TestConcurrentUpdateAndRead by making sure resources are released\n- 2022-03-30 carrier: fix dropped errors\n- 2022-03-25 TUN-5959: tidy go.mod\n- 2022-03-25 TUN-5958: Fix release to homebrew core\n- 2022-03-28 TUN-5960: Do not log the tunnel token or json credentials\n- 2022-03-28 TUN-5956: Add timeout to session manager APIs\n\n2022.3.4\n- 2022-03-22 TUN-5918: Clean up text in cloudflared tunnel --help\n- 2022-03-22 TUN-5895 run brew bump-formula-pr on release\n- 2022-03-22 TUN-5915: New cloudflared command to allow to retrieve the token credentials for a Tunnel\n- 2022-03-24 TUN-5933: Better messaging to help user when installing service if it is already installed\n- 2022-03-25 TUN-5954: Start cloudflared service in Linux too similarly to other OSs\n- 2022-03-14 TUN-5869: Add configuration endpoint in metrics server\n\n2022.3.3\n- 2022-03-17 TUN-5893: Start windows service on install, stop on uninstall. Previously user had to manually start the service after running 'cloudflared tunnel install' and stop the service before running uninstall command.\n- 2022-03-17 Revert \"CC-796: Remove dependency on unsupported version of go-oidc\"\n- 2022-03-18 TUN-5881: Clarify success (or lack thereof) of (un)installing cloudflared service\n- 2022-03-18 CC-796: Remove dependency on unsupported version of go-oidc\n- 2022-03-18 TUN-5907: Change notes for 2022.3.3\n\n2022.3.2\n- 2022-03-10 TUN-5833: Create constant for allow-remote-config\n- 2022-03-15 TUN-5867: Return error if service was already installed\n- 2022-03-16 TUN-5833: Send feature `allow_remote_config` if Tunnel is run with --token\n- 2022-03-08 TUN-5849: Remove configuration debug log\n- 2022-03-08 TUN-5850: Update CHANGES.md with latest releases\n- 2022-03-08 TUN-5851: Update all references to point to Apache License 2.0\n- 2022-03-07 TUN-5853 Add \"install\" make target and build package manager info into executable\n- 2022-03-08 TUN-5801: Add custom wrapper for OriginConfig for JSON serde\n- 2022-03-09 TUN-5703: Add prometheus metric for current configuration version\n- 2022-02-05 CC-796: Remove dependency on unsupported version of go-oidc\n\n2022.3.1\n- 2022-03-04 TUN-5837: Log panic recovery in http2 logic with debug level log\n- 2022-03-04  TUN-5696: HTTP/2 Configuration Update\n- 2022-03-04 TUN-5836: Avoid websocket#Stream function from crashing cloudflared with unexpected memory access\n- 2022-03-05 TUN-5836: QUIC transport no longer sets body to nil in any condition\n\n2022.3.0\n- 2022-03-02 TUN-5680: Adapt component tests for new service install based on token\n- 2022-02-21 TUN-5682: Remove name field from credentials\n- 2022-02-21 TUN-5681: Add support for running tunnel using Token\n- 2022-02-28 TUN-5824: Update updater no-update-in-shell link\n- 2022-02-28 TUN-5823: Warn about legacy flags that are ignored when ingress rules are used\n- 2022-02-28 TUN-5737: Support https protocol over unix socket origin\n- 2022-02-23 TUN-5679: Add support for service install using Tunnel Token\n\n2022.2.2\n- 2022-02-22 TUN-5754: Allow ingress validate to take plaintext option\n- 2022-02-17 TUN-5678: Cloudflared uses typed tunnel API\n\n2022.2.1\n- 2022-02-10 TUN-5184: Handle errors in bidrectional streaming (websocket#Stream) gracefully when 1 side has ended\n- 2022-02-14 Update issue templates\n- 2022-02-14 Update issue templates\n- 2022-02-11 TUN-5768: Update cloudflared license file\n- 2022-02-11 TUN-5698: Make ingress rules and warp routing dynamically configurable\n- 2022-02-14 TUN-5678: Adapt cloudflared to use new typed APIs\n- 2022-02-17 Revert \"TUN-5678: Adapt cloudflared to use new typed APIs\"\n- 2022-02-11 TUN-5697: Listen for UpdateConfiguration RPC in quic transport\n- 2022-02-04 TUN-5744: Add a test to make sure cloudflared uses scheme defined in ingress rule, not X-Forwarded-Proto header\n- 2022-02-07 TUN-5749: Refactor cloudflared to pave way for reconfigurable ingress - Split origin into supervisor and proxy packages - Create configManager to handle dynamic config\n- 2021-10-19 TUN-5184: Make sure outstanding websocket write is finished, and no more writes after shutdown\n\n2022.2.0\n- 2022-02-02 TUN-4947: Use http when talking to Unix sockets origins\n- 2022-02-02 TUN-5695: Define RPC method to update configuration\n- 2022-01-27 TUN-5621: Correctly manage QUIC stream closing\n- 2022-01-28 TUN-5702: Allow to deserialize config from JSON\n\n2022.1.3\n- 2022-01-21 TUN-5477: Unhide vnet commands\n- 2022-01-24 TUN-5669: Change network command to vnet\n- 2022-01-25 TUN-5675: Remove github.com/dgrijalva/jwt-go dependency by upgrading coredns version\n- 2022-01-27 TUN-5719: Re-attempt connection to edge with QUIC despite network error when there is no fallback\n- 2022-01-28 TUN-5724: Fix SSE streaming by guaranteeing we write everything we read\n- 2022-01-17 TUN-5547: Bump golang x/net package to fix http2 transport bugs\n- 2022-01-19 TUN-5659: Proxy UDP with zero-byte payload\n- 2021-10-22 Add X-Forwarded-Host for http proxy\n\n2022.1.2\n- 2022-01-13 TUN-5650: Fix pynacl version to 1.4.0 and pygithub version to 1.55 so release doesn't break unexpectedly\n\n2022.1.1\n- 2022-01-10 TUN-5631: Build everything with go 1.17.5\n- 2022-01-06 TUN-5623: Configure quic max datagram frame size to 1350 bytes for none Windows platforms\n\n2022.1.0\n- 2022-01-03 TUN-5612: Add support for specifying TLS min/max version\n- 2022-01-03 TUN-5612: Make tls min/max version public visible\n- 2022-01-03 TUN-5551: Internally published debian artifacts are now named just cloudflared even though they are FIPS compliant\n- 2022-01-04 TUN-5600: Close QUIC transports as soon as possible while respecting graceful shutdown\n- 2022-01-05 TUN-5616: Never fallback transport if user chooses it on purpose\n- 2022-01-05 TUN-5204: Unregister QUIC transports on disconnect\n- 2022-01-04 TUN-5600: Add coverage to component tests for various transports\n\n2021.12.4\n- 2021-12-27 TUN-5482: Refactor tunnelstore client related packages for more coherent package\n- 2021-12-27 TUN-5551: Change internally published debian package to be FIPS compliant\n- 2021-12-27 TUN-5551: Show whether the binary was built for FIPS compliance\n\n2021.12.3\n- 2021-12-22 TUN-5584: Changes for release 2021.12.2\n- 2021-12-22 TUN-5590: QUIC datagram max user payload is 1217 bytes\n- 2021-12-22 TUN-5593: Read full packet from UDP connection, even if it exceeds MTU of the transport. When packet length is greater than the MTU of the transport, we will silently drop packets (for now).\n- 2021-12-23 TUN-5597: Log session ID when session is terminated by edge\n\n2021.12.2\n- 2021-12-20 TUN-5571: Remove redundant session manager log, it's already logged in origin/tunnel.ServeQUIC\n- 2021-12-20 TUN-5570: Only log RPC server events at error level to reduce noise\n- 2021-12-14 TUN-5494: Send a RPC with terminate reason to edge if the session is closed locally\n- 2021-11-09 TUN-5551: Reintroduce FIPS compliance for linux amd64 now as separate binaries\n\n2021.12.1\n- 2021-12-16 TUN-5549: Revert \"TUN-5277: Ensure cloudflared binary is FIPS compliant on linux amd64\"\n\n2021.12.0\n- 2021-12-13 TUN-5530: Get current time from ticker\n- 2021-12-15 TUN-5544: Update CHANGES.md for next release\n- 2021-12-07 TUN-5519: Adjust URL for virtual_networks endpoint to match what we will publish\n- 2021-12-02 TUN-5488: Close session after it's idle for a period defined by registerUdpSession RPC\n- 2021-12-09 TUN-5504: Fix upload of packages to public repo\n- 2021-11-30 TUN-5481: Create abstraction for Origin UDP Connection\n- 2021-11-30 TUN-5422: Define RPC to unregister session\n- 2021-11-26 TUN-5361: Commands for managing virtual networks\n- 2021-11-29 TUN-5362: Adjust route ip commands to be aware of virtual networks\n- 2021-11-23 TUN-5301: Separate datagram multiplex and session management logic from quic connection logic\n- 2021-11-10 TUN-5405: Update net package to v0.0.0-20211109214657-ef0fda0de508\n- 2021-11-10 TUN-5408: Update quic package to v0.24.0\n- 2021-11-12 Fix typos\n- 2021-11-13 Fix for Issue #501: Unexpected User-agent insertion when tunneling http request\n- 2021-11-16 TUN-5129: Remove `-dev` suffix when computing version and Git has uncommitted changes\n- 2021-11-18 TUN-5441: Fix message about available protocols\n- 2021-11-12 TUN-5300: Define RPC to register UDP sessions\n- 2021-11-14 TUN-5299: Send/receive QUIC datagram from edge and proxy to origin as UDP\n- 2021-11-04 TUN-5387: Updated CHANGES.md for 2021.11.0\n- 2021-11-08 TUN-5368: Log connection issues with LogLevel that depends on tunnel state\n- 2021-11-09 TUN-5397: Log cloudflared output when it fails to connect tunnel\n- 2021-11-09 TUN-5277: Ensure cloudflared binary is FIPS compliant on linux amd64\n- 2021-11-08 TUN-5393: Content-length is no longer a control header for non-h2mux transports\n\n2021.11.0\n- 2021-11-03 TUN-5285: Fallback to HTTP2 immediately if connection times out with no network activity\n- 2021-09-29 Add flag to 'tunnel create' subcommand to specify a base64-encoded secret\n\n2021.10.5\n- 2021-10-25 Update change log for release 2021.10.4\n- 2021-10-25 Revert \"TUN-5184: Make sure outstanding websocket write is finished, and no more writes after shutdown\"\n\n2021.10.4\n- 2021-10-21 TUN-5287: Fix misuse of wait group in TestQUICServer that caused the test to exit immediately\n- 2021-10-21 TUN-5286: Upgrade crypto/ssh package to fix CVE-2020-29652\n- 2021-10-18 TUN-5262: Allow to configure max fetch size for listing queries\n- 2021-10-19 TUN-5262: Improvements to `max-fetch-size` that allow to deal with large number of tunnels in account\n- 2021-10-15 TUN-5261: Collect QUIC metrics about RTT, packets and bytes transfered and log events at tracing level\n- 2021-10-19 TUN-5184: Make sure outstanding websocket write is finished, and no more writes after shutdown\n\n2021.10.3\n- 2021-10-14 TUN-5255: Fix potential panic if Cloudflare API fails to respond to GetTunnel(id) during delete command\n- 2021-10-14 TUN-5257: Fix more cfsetup targets that were broken by recent package changes\n\n2021.10.2\n- 2021-10-11 TUN-5138: Switch to QUIC on auto protocol based on threshold\n- 2021-10-14 TUN-5250: Add missing packages for cfsetup to succeed in github release pkgs target\n\n2021.10.1\n- 2021-10-12 TUN-5246: Use protocol: quic for Quick tunnels if one is not already set\n- 2021-10-13 TUN-5249: Revert \"TUN-5138: Switch to QUIC on auto protocol based on threshold\"\n\n2021.10.0\n- 2021-10-11 TUN-5138: Switch to QUIC on auto protocol based on threshold\n- 2021-10-07 TUN-5195: Do not set empty body if not applicable\n- 2021-10-08 UN-5213: Increase MaxStreams value for QUIC transport\n- 2021-09-28 TUN-5169: Release 2021.9.2 CHANGES.md\n- 2021-09-28 TUN-5164: Update README and clean up references to Argo Tunnel (using Cloudflare Tunnel instead)\n\n2021.9.2\n- 2021-09-21 TUN-5129: Use go 1.17 and copy .git folder to docker build to compute version\n- 2021-09-21 TUN-5128: Enforce maximum grace period\n- 2021-09-22 TUN-5141: Make sure websocket pinger returns before streaming returns\n- 2021-09-24 TUN-5142: Add asynchronous servecontrolstream for QUIC\n- 2021-09-24 TUN-5142: defer close rpcconn inside unregister instead of ServeControlStream\n- 2021-09-27 TUN-5160: Set request.ContentLength when this value is in request header\n\n2021.9.1\n- 2021-09-21 TUN-5118: Quic connection now detects duplicate connections similar to http2\n- 2021-09-15 Fix TryCloudflare link\n\n2021.9.0\n- 2021-09-02 Fix broken TryCloudflare link\n- 2021-09-03 Add support for taking named tunnel credentials from an environment variable\n- 2021-08-30 TUN-5012: Use patched go-sumtype\n- 2021-08-31 TUN-5011: Use the region parameter in fallback SRV lookup\n- 2021-08-31 TUN-5029: Do not strip cf- prefixed headers\n- 2021-08-29 TUN-5009: Updated github action to use go 1.17.x for checks\n- 2021-08-28 TUN-5010: --region should be a string flag\n- 2021-08-10 Allow building on arm64 platforms\n- 2021-06-09 Update README.md\n- 2021-05-31 🖌️ Allow providing TokenID and TokenSecret as env vars when calling cloudflared access\n- 2021-05-31 🎨 Prefix env var parameters with TUNNEL\n\n2021.8.7\n- 2021-08-28 Revert \"TUN-4926: Implement --region configuration option\"\n\n2021.8.6\n- 2021-08-27 TUN-5000: De-flake logging to dir component test in Windows by increasing to buffer to cope with more logging\n- 2021-08-27 TUN-5003: Fix cfsetup for non-FIPS golang version\n\n2021.8.5\n- 2021-08-27 TUN-4961: Update quic-go to latest\n- 2021-08-27 Release 2021.8.4\n\n2021.8.4\n- 2021-08-26 TUN-4974: Fix regression where we were debug logging by accident\n- 2021-08-26 TUN-4970: Only default to http2 for warp-routing if protocol is h2mux\n- 2021-08-26 TUN-4981: Improve readability of prepareTunnelConfig method\n- 2021-08-26 TUN-4926: Implement --region configuration option\n- 2021-07-09 TUN-4821: Make quick tunnels the default in cloudflared\n\n2021.8.3\n- 2021-08-23 TUN-4889: Add back appendtagheaders function\n- 2021-08-21 TUN-4940: Fix cloudflared not picking up correct NextProtos for quic\n- 2021-08-21 TUN-4613: Add a no-op protocol version slot\n- 2021-08-13 TUN-4922: Downgrade quic-go library to 0.20.0\n- 2021-08-17 TUN-4866: Add Control Stream for QUIC\n- 2021-08-17 TUN-4927: Parameterize region in edge discovery code\n- 2021-08-06 TUN-4602: Added UDP resolves to Edge discovery\n\n2021.8.2\n- 2021-08-03 TUN-4597: Added HTTPProxy for QUIC\n- 2021-08-04 TUN-4795: Remove Equinox releases\n- 2021-08-09 TUN-4911: Append Environment variable to Path instead of overwriting it\n\n2021.8.1\n- 2021-08-02 TUN-4855: Added CHANGES.md for release 2021.8.0\n- 2021-08-03 TUN-4597: Add a QUIC server skeleton\n- 2021-08-03 TUN-4873: Disable unix domain socket test for windows unit tests\n- 2021-08-04 TUN-4875: Added amd64-linux builds back to releases\n\n2021.8.0\n- 2021-07-30 TUN-4847: Allow to list tunnels by prefix name or exclusion prefix name\n- 2021-07-30 TUN-4772: Release built executables with packages\n- 2021-07-30 TUN-4851: Component tests to smoke test that Proxy DNS and Tunnel are only run when expected\n- 2021-07-28 TUN-4811: Publish quick tunnels' hostname in /metrics under `userHostname` for backwards-compatibility\n- 2021-07-29 TUN-4832: Prevent tunnel from running accidentally when only proxy-dns should run\n- 2021-07-28 TUN-4819: Tolerate protocol TXT record lookup failing\n\n2021.7.4\n- 2021-07-28 TUN-4814: Revert \"TUN-4699: Make quick tunnels the default in cloudflared\"\n- 2021-07-28 TUN-4812: Disable CGO for cloudflared builds\n\n2021.7.3\n- 2021-07-27 TUN-4799: Build deb, msi and rpm packages with fips\n\n2021.7.2\n- 2021-07-27 Fixed a syntax error with python logging.\n\n2021.7.1\n- 2021-07-21 TUN-4755: Add a windows msi release option to Make\n- 2021-07-22 TUN-4761: Added a build-all-packages target to cfsetup\n- 2021-07-26 TUN-4771: Upload deb, rpm and msi packages to github\n- 2021-07-14 TUN-4714: Name nightly package cloudflared-nightly to avoid apt conflict\n- 2021-07-16 TUN-4701: Split Proxy into ProxyHTTP and ProxyTCP\n- 2021-07-08 TUN-4596: Add QUIC application protocol for QUIC stream handshake\n- 2021-07-09 TUN-4699: Make quick tunnels the default in cloudflared\n\n2021.7.0\n- 2021-07-01 TUN-4626: Proxy non-stream based origin websockets with http Roundtrip.\n- 2021-07-01 TUN-4655: ingress.StreamBasedProxy.EstablishConnection takes dest input\n- 2021-07-09 TUN-4698: Add cloudflared metrics endpoint to serve quick tunnel hostname\n- 2021-06-21 TUN-4521: Modify cloudflared to use zoneless-tunnels-worker for free tunnels\n- 2021-04-05 AUTH-3475: Updated GetAppInfo error message\n\n2021.6.0\n- 2021-06-21 TUN-4571: Changelog for 2021.6.0\n- 2021-06-18 TUN-4571: Fix proxying to unix sockets when using HTTP2 transport to Cloudflare Edge\n- 2021-06-07 TUN-4502: Make `cloudflared tunnel route` subcommands described consistently\n- 2021-06-08 TUN-4504: Fix component tests in windows\n- 2021-05-27 TUN-4461: Log resulting DNS hostname if one is received from Cloudflare API\n\n2021.5.10\n- 2021-05-25 TUN-4456: Replaced instances of Tick() with Ticker() in h2mux paths\n\n2021.5.9\n- 2021-05-20 TUN-4426: Fix centos builds\n- 2021-05-20 Update changelog\n- 2021-04-30 AUTH-3426: Point to new transfer service URL and eliminate PUT /ok\n\n2021.5.8\n- 2021-05-14 TUN-4419: Improve error message when cloudflared cannot reach origin\n- 2021-05-19 TUN-4425: --overwrite-dns flag for in adhoc and route dns cmds\n\n2021.5.7\n- 2021-05-17 Fix typo in Changes.md\n- 2021-05-17 TUN-4421: Named Tunnels will automatically select the protocol to connect to Cloudflare's edge network\n\n2021.5.6\n- 2021-05-14 TUN-4418: Downgrade to Go 1.16.3\n\n2021.5.5\n\n\n2021.5.4\n- Fix release pipeline\n\n2021.5.1\n- 2021-05-10 TUN-4342: Fix false positive warning about unused hostname property\n- 2021-05-10 Release 2021.5.0\n\n2021.5.0\n- 2021-05-10 TUN-4384: Silence log from automaxprocs\n- 2021-05-10 AUTH-3537: AUDs in JWTs are now always arrays\n- 2021-05-10 Update changelog for 2021.5.0\n- 2021-05-03 TUN-4343: Fix broken build by setting debug field correctly\n- 2021-05-06 TUN-4356: Set AUTOMAXPROCS to the CPU limit when running in a Linux container\n- 2021-05-06 TUN-4357: Bump Go to 1.16\n- 2021-05-06 TUN-4359: Warn about unused keys in 'tunnel ingress validate'\n- 2021-04-30 debug: log host / path\n- 2021-04-20 AUTH-3513: Checks header for app info in case response is a 403/401 from the edge\n- 2021-04-29 TUN-4000: Release notes for cloudflared replica model\n- 2021-04-09 TUN-2853: rename STDIN-CONTROL env var to STDIN_CONTROL\n- 2021-04-09 TUN-4206: Better error message when user is only using one ingress rule\n\n2021.4.0\n- 2021-04-05 TUN-4178: Fix component test for running as a service in MacOS to not assume a named tunnel\n- 2021-04-05 TUN-4177: Running with proxy-dns should not prevent running Named Tunnels\n- 2021-04-02 TUN-4168: Transparently proxy websocket connections using stdlib HTTP client instead of gorilla/websocket; move websocket client code into carrier package since it's only used by access subcommands now (#345).\n- 2021-04-07 Publish change log for 2021.4.0\n\n2021.3.6\n- 2021-03-30 TUN-4150: Only show the connector table in 'tunnel info' if there are connectors. Don't show rows with zero connections.\n- 2021-03-31 TUN-4153: Revert best-effort HTTP2 usage when talking to origins\n- 2021-03-26 TUN-4141: Better error messages for tunnel info subcommand.\n- 2021-03-29 TUN-4146: Unhide and document grace-period\n- 2021-03-25 TUN-3863: Consolidate header handling logic in the connection package; move headers definitions from h2mux to packages that manage them; cleanup header conversions\n\n2021.3.5\n- 2021-03-26 TUN-3896: http-service and tunnelstore client use http2 transport.\n- 2021-03-25 TUN-4125: Change component tests to run in CI with its own dedicated resources\n- 2021-03-26 Publish change log for 2021.3.5\n\n2021.3.4\n\n\n2021.3.3\n- 2021-03-23 TUN-4111: Warn the user if both properties \"tunnel\" and \"hostname\" are used\n- 2021-03-23 TUN-4082: Test logging when running as a service\n- 2021-03-23 TUN-4112: Skip testing graceful shutdown with SIGINT on Windows\n- 2021-03-23 TUN-4116: Ingore credentials-file setting in configuration file during tunnel create and delete opeations.\n- 2021-03-23 TUN-4118: Don't overwrite existing file with tunnel credentials. For ad-hoc tunnels, this means tunnel won't start if there's a file in the way.\n- 2021-03-24 TUN-4123: Don't capture output in reconnect componet test\n- 2021-03-23 TUN-4067: Reformat code for consistent import order, grouping, and fix formatting. Added goimports target to the Makefile to make this easier in the future.\n- 2021-03-24 AUTH-3455: Generate short-lived ssh cert per hostname\n- 2021-03-25 Update changelog 2021.3.3\n\n2021.3.2\n- 2021-03-23 TUN-4042: Capture cloudflared output to debug component tests\n- 2021-03-23 Publish changelog for 2021.3.2\n- 2021-03-16 TUN-4089: Address flakiness in component tests for termination\n- 2021-03-16 TUN-4060: Fix Go Vet warnings (new with go 1.16) where t.Fatalf is called from a test goroutine\n- 2021-03-16 TUN-4091: Use flaky decorator to rerun reconnect component tests when they fail\n- 2021-03-12 TUN-4081: Update log severities to use Zerolog's levels\n- 2021-03-16 TUN-4094: Don't read configuration file for access commands\n- 2021-03-15 TUN-3993: New `cloudflared tunnel info` to obtain details about the active connectors for a tunnel\n- 2021-03-17 TUN-3715: Apply input source to the correct context\n- 2021-03-17 AUTH-3394: Ensure scheme on token command\n- 2021-03-18 TUN-4096: Reduce tunnel not connected assertion backoff to address flaky termination tests\n- 2021-03-19 TUN-3998: Allow to cleanup the connections of a tunnel limited to a single client\n- 2021-02-04 TUN-3715: Only read config file once, right before invoking the command\n\n2021.3.1\n- 2021-03-11 TUN-4051: Add component-tests to test graceful shutdown\n- 2021-03-12 TUN-4052: Add component tests to assert service mode behavior\n\n2021.3.0\n- 2021-03-10 TUN-4075: Dedup test should not compare order of list\n- 2021-03-10 Revert \"AUTH-3394: Creates a token per app instead of per path\"\n- 2021-03-11 TUN-4066: Remove unnecessary chmod during package publish to CF_PKG_HOSTS\n- 2021-03-11 TUN-4066: Set permissions in build agent before 'scp'-ing to machine hosting package repo\n- 2021-03-11 TUN-4050: Add component tests to assert reconnect behavior\n- 2021-03-10 AUTH-3394: Creates a token per app instead of per path - with fix for free tunnels\n- 2021-03-15 Publish change log for 2021.3.0\n- 2021-03-01 Issue #285 - Makefile does not detect TARGET_ARCH correctly on FreeBSD  (#325)\n- 2021-03-01 TUN-3988: Log why it cannot check if origin cert exists\n- 2021-03-02 TUN-3995: Optional --features flag for tunnel run.\n- 2021-03-02 TUN-3994: Log client_id when running a named tunnel\n- 2021-03-04 TUN-4026: Fix regression where HTTP2 edge transport was no longer propagating control plane errors\n- 2021-03-05 TUN-4055: Skeleton for component tests\n- 2021-03-08 TUN-4047: Add cfsetup target to run component test\n- 2021-03-08 TUN-4016: Delegate decision to update for Worker service\n- 2021-03-02 TUN-3905: Cannot run go mod vendor in cloudflared due to fips\n- 2021-03-08 TUN-4063: Cleanup dependencies between packages.\n- 2021-03-09 Allow partial reads from a GorillaConn; add SetDeadline (from net.Conn) (#330)\n- 2021-03-09 TUN-4069: Fix regression on support for websocket over proxy\n- 2021-03-02 AUTH-3394: Creates a token per app instead of per path\n- 2021-03-01 TUN-4017: Add support for using cloudflared as a full socks proxy.\n- 2021-03-08 TUN-4062: Read component tests config from yaml file\n- 2021-03-08 TUN-4049: Add component tests to assert logging behavior when running from terminal\n- 2021-02-23 TUN-3963: Repoint urfave/cli/v2 library at patched branch at github.com/ipostelnik/cli/v2@fixed which correctly handles reading flags declared at multiple levels of subcommands.\n- 2021-02-25 TUN-3970: Route ip show has alias route ip list\n- 2021-02-26 TUN-3978: Unhide teamnet commands and improve their help\n- 2021-02-26 TUN-3983: Renew CA certs in cloudflared\n- 2021-02-28 TUN-3989: Check in with Updater service in more situations and convey messages to user\n- 2021-02-11 TUN-3819: Remove client-side check that deleted tunnels have no connections\n\n2021.2.5\n- 2021-02-23 Publish change notes for 2021.2.5\n- 2021-02-11 TUN-3838: ResponseWriter no longer reads and origin error tests\n- 2021-02-10 TUN-3895: Tests for socks stream handler\n- 2021-02-19 TUN-3939: Add logging that shows that Warp-routing is enabled\n- 2021-02-02 TUN-3817: Adds tests for websocket based streaming regression\n- 2021-02-04 TUN-3799: extended the Stream interface to take a logger and added debug logs for io.Copy errors\n- 2021-02-03 TUN-3855: Add ability to override target of 'access ssh' command to a different host for testing\n- 2021-02-04 TUN-3853: Respond with ws headers from the origin service rather than generating our own\n- 2021-02-08 TUN-3889: Move host header override logic to httpService\n- 2021-02-05 TUN-3868: Refactor singleTCPService and bridgeService to tcpOverWSService and rawTCPService\n- 2021-01-21 TUN-3753: Select http2 protocol when warp routing is enabled\n- 2021-01-26 TUN-3809: Allow routes ip show to output as JSON or YAML\n- 2021-01-11 TUN-3615: added support to  proxy tcp streams\n- 2021-01-17 TUN-3725: Warp-routing is independent of ingress\n- 2021-01-15 TUN-3764: Actively flush data for TCP streams\n- 2020-12-09 TUN-3617: Separate service from client, and implement different client for http vs. tcp origins\n\n2021.2.4\n- 2021-02-22 TUN-3948: Log error when retrying connection\n- 2021-02-23 TUN-3964: Revert \"TUN-3922: Repoint urfave/cli/v2 library at patched branch at github.com/ipostelnik/cli/v2@fixed which correctly handles reading flags declared at multiple levels of subcommands.\"\n- 2021-02-23 Publish release notes for 2021.2.4\n\n2021.2.3\n- 2021-02-23 Publish release notes for 2021.2.3\n- 2021-02-10 TUN-3902: Add jitter to backoffhandler\n- 2021-02-11 TUN-3913: Help gives wrong exit code for autoupdate\n- 2021-02-12 Add max upstream connections dns-proxy option (#290)\n- 2021-02-16 TUN-3924: Removed db-connect command. Added a placeholder handler for this command that informs users that command is no longer supported.\n- 2021-02-12 TUN-3922: Repoint urfave/cli/v2 library at patched branch at github.com/ipostelnik/cli/v2@fixed which correctly handles reading flags declared at multiple levels of subcommands.\n- 2021-02-19 Added support for proxy (#318)\n- 2021-02-19 TUN-3945: Fix runApp signature for generic service\n- 2021-02-09 Update README.md\n- 2021-02-09 Update the TryCloudflare link\n\n2021.2.2\n- 2021-02-04 TUN-3864: Users can choose where credentials file is written after creating a tunnel\n- 2021-02-04 TUN-3869: Improve reliability of graceful shutdown.\n- 2021-02-07 TUN-3878: Do not supply -tags when none are specified\n- 2021-02-04 TUN-3635: Send event when unregistering tunnel for gracful shutdown so /ready endpoint reports down status befoe connections finish handling pending requests.\n- 2021-02-08 TUN-3890: Code coverage for cloudflared in CI\n- 2021-02-09 AUTH-3375 exchangeOrgToken deleted cookie fix\n- 2020-11-18 Update error message to use login command\n\n2021.2.1\n- 2021-02-04 TUN-3858: Do not suffix cloudflared version with -fips\n\n2021.2.0\n- 2021-02-01 TUN-3837: Remove automation_email from cloudflared status page test\n- 2021-02-03 TUN-3848: Use transport logger for h2mux\n- 2021-02-03 TUN-3854: cloudflared tunnel list flags to sort output\n- 2021-01-21 TUN-3195: Don't colorize console logs when stderr is not a terminal\n- 2021-01-20 Fixed connection error handling by removing duplicated errors, standardizing on non-pointer error types\n- 2021-01-20 TUN-3118: Changed graceful shutdown to immediately unregister tunnel from the edge, keep the connection open until the edge drops it or grace period expires\n- 2021-01-25 TUN-3165: Add reference to Argo Tunnel documentation in the help output\n- 2021-01-25 TUN-3806: Use a .dockerignore\n- 2021-01-21 TUN-3795: Use RFC-3339 style date format for logs, produce timestamp in UTC\n- 2021-01-26 TUN-3795: Removed errant test\n- 2021-01-25 TUN-3792: Handle graceful shutdown correctly when running as a windows service. Only expose one shutdown channel globally, which now triggers the graceful shutdown sequence across all modes. Removed separate handling of zero-duration grace period, instead it's checked only when we need to wait for exit.\n- 2021-01-27 TUN-3811: Better error reporting on http2 connection termination. Registration errors from control loop are now propagated out of the connection server code. Unified error handling between h2mux and http2 connections so we log and retry errors the same way, regardless of underlying transport.\n- 2021-01-28 TUN-3830: Use Go 1.15.7\n- 2021-01-28 TUN-3826: Use go-fips when building cloudflared for linux/amd64\n- 2021-01-19 TUN-3777: Fix /ready endpoint for classic tunnels\n- 2021-01-19 TUN-3773: Add back pprof endpoints\n\n2021.1.5\n- 2021-01-15 TUN-3594: Log ingress response at debug level\n- 2021-01-15 TUN-3765: Fix doubly nested log output by `logfile` option\n- 2021-01-16 TUN-3767: Tolerate logging errors\n- 2021-01-17 TUN-3768: Reuse file loggers\n- 2021-01-14 TUN-3738: Refactor observer to avoid potential of blocking on tunnel notifications\n- 2021-01-15 TUN-3766: Print flags defined at all levels of command hierarchy, not just locally defined flags for a command. This fixes output of overriden settings for  subcommand.\n\n2021.1.4\n- 2021-01-14 TUN-3759: Single file logging output should always append\n\n2021.1.3\n- 2021-01-14 TUN-3756: File logging output must consider the directory\n- 2021-01-14 TUN-3757: Fix legacy Uint flags that are incorrectly handled by ufarve library\n\n2021.1.2\n- 2021-01-13 TUN-3747: Fix logging in Windows\n\n2021.1.1\n- 2021-01-13 TUN-3744: Fix compilation error in windows service\n\n2021.1.0\n- 2021-01-11 TUN-3670: Update Teamnet API gateway prefixes\n- 2021-01-13 TUN-3738: Consume UI events even when UI is disabled\n- 2021-01-06 TUN-3722: Teamnet API paths include /network\n- 2021-01-05 TUN-3688: Subcommand for users to check which route an IP proxies through\n- 2021-01-08 TUN-3691: Edit Teamnet help text\n- 2020-12-30 TUN-3706: Quit if any origin service fails to start\n- 2020-12-31 TUN-3708: Better info message about system root certpool on Windows\n- 2020-12-21 TUN-3669: Teamnet commands to add/show Teamnet routes.\n- 2020-12-29 TUN-3689: Delete routes via cloudflared CLI\n- 2020-12-28 TUN-3471: Add structured log context to logs\n- 2020-12-15 TUN-3650: Remove unused awsuploader package\n- 2020-12-03 Update to add deprecated version note (#271)\n- 2020-12-02 TUN-3472: Set up rolling logger with zerolog and lumberjack\n- 2020-12-08 TUN-3607: Set up single-file logger with zerolog\n- 2020-12-03 Update to add deprecated version note (#271)\n- 2020-11-25 TUN-3470: Replace in-house logger calls with zerolog\n\n2020.12.0\n- 2020-12-04 TUN-3599: improved delete if credentials isnt found.\n- 2020-12-04 TUN-3612: Upgrade to Go 1.15.6\n- 2020-11-30 TUN-3593: /ready endpoint for k8s readiness. Move tunnel events out of UI package, into connection package.\n- 2020-11-27 TUN-3594: Log response status at debug level\n\n2020.11.11\n- 2020-11-20 TUN-3578: cloudflared tunnel route dns should allow wildcard subdomains\n- 2020-11-21 EDGEPLAT-2958 remove deb-compression, defaulting to gzip\n- 2020-11-23 TUN-3581: Tunnels can be run by name using only --credentials-file, no origin cert necessary.\n- 2020-11-15 TUN-3561: Unified logger configuration\n- 2020-11-08 AUTH-3221: Saves org token to disk and uses it to refresh the app token\n\n2020.11.10\n- 2020-11-20 TUN-3562: Fix panic when using bastion mode ingress rule\n- 2020-11-20 EDGEPLAT-2958 build cloudflared for Bullseye\n\n2020.11.9\n- 2020-11-18 TUN-3557: Detect SSE if content-type starts with text/event-stream\n- 2020-11-18 TUN-3559: Share response meta header with other packages\n- 2020-11-18 DEVTOOLS-7936: Remove redundant chgrp from publish\n- 2020-11-18 TUN-3558: cloudflared allows empty config files\n- 2020-11-18 TUN-3544: Upgrade to Go 1.15.5\n\n2020.11.8\n- 2020-11-17 TUN-3555: Single origin service should default to localhost:8080\n\n2020.11.7\n- 2020-11-13 TUN-3514: Stop setting --is-autoupdated flag after autoupdate because it can break named tunnel running in k8s\n- 2020-11-15 TUN-3548, TUN-3547: Bastion mode can be specified as a service, doesn't require URL.\n- 2020-11-16 TUN-3549: Use a separate handler for each websocket proxy\n\n2020.11.6\n- 2020-11-14 TUN-3546: Fix panic in tlsconfig.LoadOriginCA\n\n2020.11.5\n- 2020-11-12 TUN-3540: Better copy in ingress rules error messages\n- 2020-11-12 DEVTOOLS-7936: Set permissions on public packages\n- 2020-11-13 TUN-3543: ProxyAddress not using default in single-origin mode\n\n2020.11.4\n- 2020-11-11 TUN-3534: Specific error message when credentials file is a .pem not .json\n- 2020-11-02 TUN-3500: Integrate replace h2mux by http2 work with multiple origin support\n- 2020-11-09 TUN-3514: Transport logger write to UI when UI is enabled\n- 2020-10-30 TUN-3490: Make sure OriginClient implementation doesn't write after Proxy return\n- 2020-10-20 TUN-3403: Unit test for origin/proxy to test serving HTTP and Websocket\n- 2020-10-23 TUN-3480: Support SSE with http2 connection, and add SSE handler to hello-world server\n- 2020-10-27 TUN-3489: Add unit tests to cover proxy logic in connection package of cloudflared\n- 2020-10-16 TUN-3467: Serialize cf-cloudflared-response-meta during package initialization using jsoniter\n- 2020-10-14 TUN-3456: New protocol option auto to automatically select between http2 and h2mux\n- 2020-10-14 TUN-3458: Upgrade to http2 when available, fallback to h2mux when we reach max retries\n- 2020-10-08 TUN-3449: Use flag to select transport protocol implementation\n- 2020-10-08 TUN-3462: Refactor cloudflared to separate origin from connection\n- 2020-09-21 TUN-3406: Proxy websocket requests over Go http2\n- 2020-09-25 TUN-3420: Establish control plane and send RPC over control plane\n- 2020-09-11 TUN-3400: Use Go HTTP2 library as transport to connect with the edge\n\n2020.11.3\n- 2020-11-11 TUN-3533: Set config for single origin ingress\n\n2020.11.2\n\n\n2020.11.1\n- 2020-11-10 TUN-3527: More specific error for invalid YAML/JSON\n- 2020-11-06 Update README.md (#256)\n\n2020.11.0\n- 2020-11-04 TUN-3484: OriginService that responds with configured HTTP status\n- 2020-11-05 TUN-3505: Response body for status code origin returns EOF on Read\n- 2020-11-04 TUN-3503: Matching ingress rule should not take port into account\n- 2020-11-05 TUN-3506: OriginService needs to set request host and scheme for websocket requests\n- 2020-11-09 TUN-3516: Better error message when parsing invalid YAML config\n- 2020-11-09 TUN-3522: ingress validate checks that the config file exists\n- 2020-11-09 TUN-3524: Don't ignore errors from app-level action handler (#248)\n- 2020-11-09 TUN-3461: Show all origin services in the UI\n- 2020-10-30 TUN-3494: Proceed to create tunnel if at least one edge address can be resolved\n- 2020-10-30 TUN-3492: Refactor OriginService, shrink its interface\n- 2020-10-22 TUN-3478: Increase download timeout to 60s\n- 2020-10-15 TUN-2640: Users can configure per-origin config. Unify single-rule CLI flow with multi-rule config file code.\n\n2020.10.2\n- 2020-10-21 Release 2020.10.1\n- 2020-10-21 AUTH-3185 fixed indention error\n- 2020-10-19 TUN-3459: Make service install on linux use named tunnels\n\n2020.10.1\n- 2020-10-20 Split out typed config from legacy command-line switches; refactor ingress commands and fix tests\n- 2020-10-20 Move raw ingress rules to config package\n- 2020-10-21 TUN-3476: Fix conversion to string and int slice\n- 2020-10-12 TUN-3441:  Multiple-origin routing via ingress rules\n- 2020-10-15 TUN-3464: Newtype to wrap []ingress.Rule\n- 2020-10-15 TUN-3465: Use Go 1.15.3\n- 2020-10-15 TUN-3463: Let users run a named tunnel via config file setting\n- 2020-10-19 TUN-3475: Unify config file handling with typed config for new fields\n- 2020-10-19 TUN-3459: Make service install on linux use named tunnels\n- 2020-10-06 AUTH-3148 fixed cloudflared copy and match all the files in the checksum upload\n- 2020-10-06 TUN-3436, TUN-3437: Parse ingress from YAML, ensure last rule catches everything\n- 2020-10-06 TUN-3446: Use go 1.15.2 and add a step to build cloudflared in the dev Dockerfile\n- 2020-10-07 TUN-3439: 'tunnel validate' command to check ingress rules\n- 2020-10-07 TUN-3440: 'tunnel rule' command to test ingress rules\n- 2020-10-08 TUN-3451: Cloudflared tunnel ingress command\n- 2020-10-09 TUN-3452: Fix loading of flags from config file for tunnel run subcommand. This change also cleans up building of tunnel subcommand list, hides deprecated subcommands and improves help.\n- 2020-10-08 TUN-3438: move ingress into own package, read into TunnelConfig\n\n2020.10.0\n- 2020-10-02 AUTH-2993 cleaned up worker service tests\n- 2020-10-02 TUN-3443: Decode as v4api response on non-200 status\n- 2020-09-24 TRAFFIC-448: allow the user to specify the proxy address and port to bind to, falling back to 127.0.0.1 and random port if not specified\n- 2020-09-28 TUN-3427: Define a struct that only implements RegistrationServer in tunnelpogs\n- 2020-09-29 TUN-3430: Copy flags to configure proxy to run subcommand, print relevant tunnel flags in help\n- 2020-08-12 AUTH-2993 added workers updater logic\n\n2020.9.3\n- 2020-09-22 TRAFFIC-448: build cloudflare for junos and publish to s3\n- 2020-09-22 TUN-3410: Request the v1 Tunnelstore API\n- 2020-09-23 Release 2020.9.2\n- 2020-09-17 updater service exit code should be 11\n- 2020-09-18 AUTH-3109 upload the checksum to workers kv on github releases\n\n2020.9.2\n- 2020-09-22 TRAFFIC-448: build cloudflare for junos and publish to s3\n- 2020-09-22 TUN-3410: Request the v1 Tunnelstore API\n- 2020-09-17 AUTH-3103 CI build fixes\n- 2020-09-18 AUTH-3110-use-cfsetup-precache\n- 2020-09-17 TUN-3295: Show route command results\n- 2020-09-16 TUN-3291: cloudflared tunnel run -h explains how to use flags from parent command\n- 2020-09-18 AUTH-3109 upload the checksum to workers kv on github releases\n- 2020-09-17 updater service exit code should be 11\n- 2020-09-01 TUN-3216: UI improvements\n- 2020-08-25 Rebased and passed TunnelEventChan to LogServerInfo in new ReconnectTunnel function\n- 2020-08-25 TUN-3321: Add box around logs on UI\n- 2020-08-26 TUN-3328: Filter out free tunnel has started log from UI\n- 2020-08-27 TUN-3333: Add text to UI explaining how to exit\n- 2020-08-27 TUN-3335: Dynamically set connection table size for UI\n- 2020-08-10 TUN-3238: Update UI when connection re-connects\n- 2020-08-17 TUN-3261: Display connections on UI for free classic tunnels\n- 2020-07-24 TUN-3201: Create base cloudflared UI structure\n- 2020-07-29 TUN-3200: Add connection information to UI\n- 2020-07-24 TUN-3255: Update UI to display URL instead of hostname\n- 2020-07-29 TUN-3198: Handle errors while running tunnel UI\n\n2020.9.1\n- 2020-09-14 TUN-3395: Unhide named tunnel subcommands, tweak help\n- 2020-09-15 TUN-3395: Improve help for list command\n- 2020-09-14 TUN-3294: Perform basic validation on arguments of route command; remove default pool name which wasn't valid\n- 2020-09-15 TUN-3395: Improve help for list command\n- 2020-09-16 Use Go 1.15.2\n\n2020.9.0\n- 2020-09-11 TUN-3293: Try to use error information from the body of a failed tunnelstore reresponse if available\n- 2020-09-04 AUTH-2653 renabled signing\n- 2020-09-04 TUN-3377: Tunnel route should check dns/lb before checking tunnel ID\n- 2020-09-04 AUTH-2653 changed to proper file extension\n- 2020-09-04 AUTH-2653 handle duplicate key import errors\n- 2020-09-04 TUN-3345: tunnel run accepts name of tunnel as argument\n- 2020-09-08 AUTH-2653 disble error pipe to see what is failing\n- 2020-09-08 AUTH-2653 search for the certificate and not the identity\n- 2020-09-09 TUN-3284: Use cloudflared/<version> as user agent of tunnelstore client\n- 2020-09-09 TUN-3375: Upgrade x/text and gorilla websocket deps\n- 2020-09-09 TUN-3375: Upgrade coredns and prometheus dependencies\n- 2020-09-09 AUTH-2653 add notarization to mac build\n- 2020-09-08 TUN-3292: Mention cleanup in tunnel run help.\n- 2020-08-20 AUTH-2016 fixed variable fail\n- 2020-08-12 TUN-3352 extra debug logging for websockets\n\n2020.8.2\n- 2020-08-20 AUTH-3021 fixed the git version call by using the older flag\n- 2020-08-18 TUN-3268: Each connection has its own event digest to reconnect\n\n2020.8.1\n- 2020-08-14 AUTH-2975 don't check /etc on windows\n- 2020-08-14 AUTH-2977 log file protection\n- 2020-08-18 TUN-3286: Use either ID or name in Named Tunnel subcommands.\n- 2020-08-18 AUTH-2712 fixed the mac build script\n- 2020-08-19 AUTH-2653 disabling signing until we can get the keys\n- 2020-08-05 TUN-3233: List tunnels support filtering by deleted, name, existed at and id\n- 2020-08-05 TUN-3237: By default, don't show connections that are pending reconnect\n- 2020-08-06 TUN-3242: Build with go 1.14\n- 2020-08-07 TUN-3243: Refactor tunnel subcommands to allow commands to compose better\n- 2020-08-07 AUTH-2864 - add macos build to github release\n- 2020-07-31 AUTH-2857 update homebrew script to use new url\n- 2020-07-30 TUN-3213: Create, route and run named tunnels in one command\n- 2020-07-07 AUTH-2712 added MSI build for a windows agent\n\n2020.8.0\n- 2020-07-30 TUN-3220: tunnel route reports created route\n- 2020-07-31 TUN-3221: ConnectionOptions tracks numPreviousAttempts.\n- 2020-07-20 TUN-3190: Initialize logger using command line flags in tunnels subcommands\n- 2020-07-21 TUN-3192: Use zone ID in tunnelstore request path; improve debug logging\n- 2020-07-23 TUN-3194: Don't render log output when level is not enabled\n- 2020-07-22 AUTH-2016 adds sha256 hashes to releases\n- 2020-07-27 Removes centos 6 build\n- 2020-07-27 TUN-3209: Add benchmark for header serialization\n- 2020-07-24 TUN-3209: improve performance and reduce allocations during user header serialization from h1 to h2\n- 2020-07-26 TUN-3208: Add benchmark for large response write\n- 2020-07-27 TUN-3208: Reduce copies and allocations on h2mux write path. Pre-allocate 16KB write buffer on the first write if possible. Use explicit byte array for chunks on write thread to avoid copying through intermediate buffer due to io.CopyN.\n- 2020-07-28 AUTH-2714: Adds arm64 cloudflared build\n- 2020-07-29 AUTH-2927 run message update after all github builds are done\n- 2020-07-17 AUTH-2902 redirect with just the root host on curl commands\n\n2020.7.4\n- 2020-07-20 Build cloudflared for arm64 on native agents\n- 2020-07-10 TUN-3048: Handle error when user tries to delete active tunnel\n- 2020-07-14 AUTH-2890: adds error handler to cli actions\n- 2020-07-06 TUN-3156: Add route subcommand under tunnel\n\n2020.7.3\n- 2020-07-13 Change scp command to use file glob that matches both cloudflared rpms and debs\n\n2020.7.2\n- 2020-07-02 AUTH-2644: Change install location and add man page\n- 2020-07-02 TUN-3131: Allow user to specify tunnel credentials path, and remove it in tunnel delete command\n- 2020-07-03 TUN-3008: Implement cloudflared tunnel cleanup command\n- 2020-07-02 TUN-3150: cloudflared tunnel list's table should use intelligent column width\n- 2020-07-07 TUN-3169: Move on to the next address when edge returns duplicate connection. There's no point in trying to connect to the same address since it will be hashed to the same metal. Improve logging of errors from serve tunnel loop, hide useless context cancelled error.\n- 2020-07-08 beautify package meta information generated by fpm (#218)\n- 2020-07-06 AUTH-2871: fix rpm builds\n- 2020-07-08 AUTH-2858: Set file to disable autoupdate\n- 2020-07-09 AUTH-2872: Adds centos-6 build\n\n2020.7.1\n- 2020-07-02 DEVTOOLS-7321: Push GitHub homebrew updates to master\n- 2020-07-06 TUN-3161: Upgrade golang.org/x/ deps\n- 2020-06-30 AUTH-2854: Create cloudflared RPMs\n- 2020-06-26 AUTH-2850 log config file path\n\n2020.7.0\n- 2020-06-30 TUN-3140: Add timestamps to terminal log entries\n- 2020-06-30 AUTH-2860: Fix builds\n- 2020-06-25 TUN-3007: Implement named tunnel connection registration and unregistration.\n\n2020.6.6\n- 2020-06-23 AUTH-2685: Adds script to create release\n- 2020-06-25 AUTH-2652: Update cloudflare repo\n- 2020-06-26 AUTH-2718: Add target for publishing deb to pkg.cloudflare repo\n- 2020-06-26 AUTH-2849 all log output to stderr\n- 2020-06-17 TUN-3106: Pass NamedTunnel config to StartServer\n- 2020-06-18 TUN-3107: UnregisterConnection shouldn't wrap nil error as RPC error\n- 2020-06-17 AUTH-2652: Adds .docker-images to push images to docker hub\n- 2020-06-18 AUTH-2712 mac package build script and better config file handling when started as a service\n\n2020.6.5\n- 2020-06-16 DEVTOOLS-7321: Don't skip macOS builds based on tag\n- 2020-06-16 fix for a flaky test\n- 2020-06-16 AUTH-2815 flag check was wrong. stupid oversight\n- 2020-06-16 TUN-3101: Tunnel list command should only show non-deleted, by default\n- 2020-06-16 TUN-3066: Command line action for tunnel run\n- 2020-06-16 TUN-3100 make updater report the right text\n\n2020.6.4\n- 2020-06-11 TUN-3085: Pass connection authentication information using TunnelAuth struct\n- 2020-06-15 TUN-3084: Generate and store tunnel_secret value during tunnel creation\n- 2020-06-16 AUTH-2815 add the log file to support the config.yaml file\n- 2020-06-02 TUN-3015: Add a new cap'n'proto RPC interface for connection registration as well as matching client and server implementations. The old interface extends the new one for backward compatibility.\n\n2020.6.3\n- 2020-06-15 DEVTOOLS-7321: Add openssh-client pkg for missing ssh-keyscan\n- 2020-06-15 AUTH-2813 adds back a single file support a cloudflared log file\n\n2020.6.2\n- 2020-06-11 AUTH-2648 updated usage text\n- 2020-06-11 AUTH-2763 don't redirect from curl command\n- 2020-06-12 TUN-3090: Upgrade crypto dep\n- 2020-06-11 TUN-3038: Add connections to tunnel list table\n- 2020-06-12 AUTH-2810 added warn for backwards compatibility sake\n\n2020.6.1\n- 2020-06-09 AUTH-2796 fixed windows build\n\n2020.6.0\n- 2020-06-05 AUTH-2645 protect against user mistaken flag input\n- 2020-06-05 AUTH-2687 don't copy config unnecessarily\n- 2020-06-05 AUTH-2169 make access login page more generic\n- 2020-06-05 AUTH-2729 added log file and level to cmd flags to match config file settings\n- 2020-06-08 AUTH-2785 service token flag fix and logger fix\n- 2020-05-20 AUTH-2682: Create buster build\n- 2020-05-21 TUN-2928, TUN-2929, TUN-2930: Add tunnel subcommands to interact with tunnel store service\n- 2020-05-29 Adding support for multi-architecture images and binaries (#184)\n- 2020-05-29 TUN-3019: Remove declarative tunnel entry code\n- 2020-05-29 TUN-3020: Remove declarative tunnel related RPC code\n- 2020-05-13 AUTH-2505 added aliases\n- 2020-05-14 AUTH-2529 added deprecation text to db-connect command\n- 2020-05-18 AUTH-2686: Added error handling to tunnel subcommand\n- 2020-05-04 AUTH-2369: RDP Bastion prototype\n- 2020-04-29 AUTH-2596 added new logger package and replaced logrus\n- 2020-04-25 DEVTOOLS-7321: Use SSH key from env for pushing to GitHub\n- 2020-04-25 DEVTOOLS-7321: Push to a test branch instead of to master\n- 2020-03-30 DEVTOOLS-7321: Add scripts for macOS builds and homebrew uploads\n\n2020.5.1\n- 2020-05-07 TUN-2860: Enable quick reconnect feature by default\n- 2020-05-07 AUTH-2564: error handling and minor fixes\n- 2020-05-01 AUTH-2588 add DoH to service mode\n\n2020.5.0\n- 2020-05-01 TUN-2943: Copy certutil from edge into cloudflared\n- 2020-05-05 TUN-2955: Fix connection and goroutine leaks when tunnel conection is terminated on error. Only unregister tunnels that had connected successfully. Close edge connection used to unregister the tunnel. Use buffered channels for error channels where receiver may quit early on context cancellation.\n- 2020-04-30 TUN-2940: Added delay parameter to stdin reconnect command.\n- 2020-04-27 TUN-2921: Rework address selection logic to avoid corner cases\n- 2020-04-28 TUN-2872: Exit with non-0 status code when the binary is updated so launchd will restart the service\n- 2020-04-13 AUTH-2587 add config watcher and reload logic for access client forwarder\n\n2020.4.0\n- 2020-04-10 TUN-2881: Parameterize response meta information header name in the generating function\n- 2020-04-11 TUN-2894: ResponseMetaHeader should be public\n- 2020-04-09 TUN-2880: Return metadata about source of the response from cloudflared\n- 2020-04-04 ARES-899: Fixes DoH client as system resolver. Fixes #91\n- 2020-03-31 AUTH-2394 added socks5 proxy\n- 2020-02-24 AUTH-2235 GetTokenIfExists now parses JWT payload for json expiry field to detect if the cached access token is expired\n\n2020.3.2\n- 2020-03-31 TUN-2854: Quick Reconnects should be an optional supported feature\n- 2020-03-30 TUN-2850: Tunnel stripping Cloudflare headers\n\n2020.3.1\n- 2020-03-27 TUN-2846: Trigger debug reconnects from stdin commands, not SIGUSR1\n\n2020.3.0\n- 2020-03-23 AUTH-2394 fixed header for websockets. Added TCP alias\n- 2020-03-10 TUN-2797: Fix panic in SetConnDigest by making mutexes values.\n- 2020-03-13 TUN-2807: cloudflared hello-world shouldn't assume it's my first tunnel\n- 2020-03-13 TUN-2756: Set connection digest after reconnect.\n- 2020-03-16 TUN-2812: Tunnel proxies and RPCs can share an edge address\n- 2020-03-18 TUN-2816: cloudflared metrics server should be more discoverable\n- 2020-03-19 TUN-2820: Serialized headers for Websockets\n- 2020-03-19 TUN-2819: cloudflared should close its connections when a signal is sent\n- 2020-03-19 TUN-2823: Bugfix. cloudflared would hang forever if error occurred.\n- 2020-03-10 TUN-2796: Implement HTTP2 CONTINUATION headers correctly\n- 2020-03-02 TUN-2779: update sample HTML pages\n- 2020-03-04 TUN-2785: Use reconnect token by default\n- 2020-03-05 TUN-2754: Add ConnDigest to cloudflared and its RPCs\n- 2020-03-06 TUN-2755: ReconnectTunnel RPC now transmits ConnectionDigest\n- 2020-03-06 TUN-2761: Use the new header management functions in cloudflared\n- 2020-03-06 TUN-2788: cloudflared should store one ConnDigest per HA connection\n- 2020-02-26 TUN-2767: Test for large headers\n- 2020-02-28 do not terminate tunnel if origin is not reachable on start-up (#177)\n- 2020-02-28 TUN-2776: Add header serialization feature in cloudflared\n- 2020-02-21 TUN-2748: Insecure randomness vulnerability in github.com/miekg/dns\n\n2020.2.1\n- 2020-02-20 TUN-2745: Rename existing header management functions\n- 2020-02-21 TUN-2746: Add the new header management functions\n- 2020-02-25 perf(cloudflared): reuse memory from buffer pool to get better throughput (#161)\n- 2020-02-25 Tweak HTTP host header. Fixes #107 (#168)\n- 2020-02-25 TUN-2765: Add list of features to tunnelrpc\n- 2020-02-19 TUN-2725: Specify in code that --edge is for internal testing only\n- 2020-02-19 TUN-2703: Muxer.Serve terminates when its context is Done\n- 2020-02-09 TUN-2717: Function to serialize/deserialize HTTP headers\n- 2020-02-05 TUN-2714: New edge discovery. Connections try to reconnect to the same edge IP.\n\n2020.2.0\n- 2020-01-30 TUN-2651: Fix panic in h2mux reader when a stream error is encountered\n- 2020-01-27 TUN-2645: Revert \"TUN-2645: Turn on reconnect tokens\"\n- 2020-01-28 TUN-2693: Metrics for ReconnectTunnel\n- 2020-01-28 TUN-2696: Add unknown registerRPCName\n- 2020-01-28 TUN-2699: Metrics for Authenticate RPCs\n- 2020-01-28 TUN-2690: cloudflared reconnect uses wrong context\n- 2020-01-29 TUN-2707: Inconsistent cardinality in tunnel error metrics\n- 2020-01-13 TUN-2645: Turn on reconnect tokens\n- 2019-12-23 TUN-2646: Make --edge flag work again for local development\n\n2019.12.0\n- 2019-12-11 TUN-2631: only notify that activeStreamMap is closed if ignoreNewStreams=true\n- 2019-12-17 bug(cloudflared): Set the MaxIdleConnsPerHost of http.Transport to proxy-keepalive-connections (#155)\n- 2019-12-17 refactor(docker): optimize Dockerfile (#126)\n- 2019-12-19 Fix timer scheduling for systemd update service (#159)\n- 2019-12-13 TUN-2637: Manage edge IPs in a region-aware manner\n- 2019-12-03 bug(cloudflared): nil pointer deference on h2DictWriter Close() (#154)\n- 2019-12-03 TUN-2608: h2mux.Muxer.Shutdown always returns a non-nil channel\n- 2019-12-04 TUN-2555: origin/supervisor.go calls Authenticate\n- 2019-12-06 TUN-2554: cloudflared calls ReconnectTunnel\n- 2019-11-20 TUN-2575: Constructors + simpler conversions for AuthOutcome\n- 2019-11-22 Fix Docker build failure (#149)\n- 2019-11-21 TUN-2573: Refactor TunnelRegistration into PermanentRegistrationError, RetryableRegistrationError and SuccessfulTunnelRegistration\n- 2019-11-22 TUN-2582: EventDigest field in tunnelrpc\n- 2019-11-22 Fix \"happy eyeballs\" not being disabled since Golang 1.12 upgrade * The Dialer.DualStack setting is now ignored and deprecated; RFC 6555 Fast Fallback (\"Happy Eyeballs\") is now enabled by default. To disable, set Dialer.FallbackDelay to a negative value.\n- 2019-11-25 TUN-2591: ReconnectTunnel now sends EventDigest\n- 2019-11-21 TUN-2606: add DialEdge helpers\n- 2019-11-21 TUN-2607: add RPC stream helpers\n\n2019.11.3\n- 2019-11-20 TUN-2562: Update Cloudflare Origin CA RSA root\n\n2019.11.2\n- 2019-11-18 TUN-2567: AuthOutcome can be turned back into AuthResponse\n- 2019-11-18 TUN-2563: Exposes config_version metrics\n\n2019.11.1\n- 2019-11-12 Add db-connect, a SQL over HTTPS server\n- 2019-11-12 TUN-2053: Add a /healthcheck endpoint to the metrics server\n- 2019-11-13 TUN-2178: public API to create new h2mux.MuxedStreamRequest\n- 2019-11-13 TUN-2490: respect original representation of HTTP request path\n- 2019-11-18 TUN-2547: TunnelRPC definitions for Authenticate flow\n- 2019-11-18 TUN-2551: TunnelRPC definitions for ReconnectTunnel flow\n- 2019-11-05 TUN-2506: Expose active streams metrics\n\n2019.11.0\n- 2019-11-04 TUN-2502: Switch to go modules\n- 2019-11-04 TUN-2500: Don't send client registration errors to Sentry\n- 2019-11-04 TUN-2489: Delete stream from activestreammap when read and write are both closed\n- 2019-11-05 TUN-2505: Terminate stream on receipt of RST_STREAM; MuxedStream.CloseWrite() should terminate the MuxedStream.Write() loop\n- 2019-10-30 TUN-2451: Log inavlid path\n- 2019-10-22 TUN-2425: Enable cloudflared to serve multiple Hello World servers by having each of them create its own ServeMux\n- 2019-10-22 AUTH-2173: Prepends access login url with scheme if one doesnt exist\n- 2019-10-23 TUN-2460: Configure according to the ClientConfig recevied from a successful Connect\n- 2019-10-23 AUTH-2177: Reads and writes error streams\n\n2019.10.4\n- 2019-10-21 TUN-2450: Remove Brew publishing formula\n\n2019.10.3\n- 2019-10-18 Fix #129: Excessive memory usage streaming large files (#142)\n\n2019.10.2\n- 2019-10-17 AUTH-2167: Adds CLI option for host key directory\n\n2019.10.1\n- 2019-10-17 Adds variable to fix windows build\n\n2019.10.0\n- 2019-10-11 AUTH-2105: Dont require --destination arg\n- 2019-10-14 TUN-2344: log more details: http2.Framer.ErrorDetail() if available, connectionID\n- 2019-10-16 AUTH-2159: Moves shutdownC close into error handling AUTH-2161: Lowers size of preamble length AUTH-2160: Fixes url parsing logic\n- 2019-10-16 AUTH-2135: Adds support for IPv6 and tests\n- 2019-10-02 AUTH-2105: Adds support for local forwarding. Refactor auditlogger creation. AUTH-2088: Adds dynamic destination routing\n- 2019-10-09 AUTH-2114: Uses short lived cert auth for outgoing client connection\n- 2019-09-30 AUTH-2089: Revise ssh server to function as a proxy\n\n2019.9.2\n- 2019-09-26 TUN-2355: Roll back TUN-2276\n\n2019.9.1\n- 2019-09-23 TUN-2334: remove tlsConfig.ServerName special case\n- 2019-09-23 AUTH-2077: Quotes open browser command in windows\n- 2019-09-11 AUTH-2050: Adds time.sleep to temporarily avoid hitting tunnel muxer dealock issue\n- 2019-09-10 AUTH-2056: Writes stderr to its own stream for non-pty connections\n- 2019-09-16 TUN-2307: Capnp is the only serialization format used in tunnelpogs\n- 2019-09-18 TUN-2315: Replace Scope with IntentLabel\n- 2019-09-17 TUN-2309: Split ConnectResult into ConnectError and ConnectSuccess, each implementing its own capnp serialization logic\n- 2019-09-18 AUTH-2052: Adds tests for SSH server\n- 2019-09-18 AUTH-2067: Log commands correctly\n- 2019-09-19 AUTH-2055: Verifies token at edge on access login\n- 2019-09-04 TUN-2201: change SRV records used by cloudflared\n- 2019-09-06 TUN-2280: Revert \"TUN-2260: add name/group to CapnpConnectParameters, remove Scope\"\n- 2019-09-03 AUTH-1943 hooked up uploader to logger, added timestamp to session logs, add tests\n- 2019-09-04 AUTH-2036: Refactor user retrieval, shutdown after ssh server stops, add custom version string\n- 2019-09-06 AUTH-1942 added event log to ssh server\n- 2019-09-04 AUTH-2037: Adds support for ssh port forwarding\n- 2019-09-05 TUN-2276: Path encoding broken\n\n2019.9.0\n- 2019-09-05 TUN-2279: Revert path encoding fix\n- 2019-08-30 AUTH-2021 - check error for failing tests\n- 2019-08-29 AUTH-2030: Support both authorized_key and short lived cert authentication simultaniously without specifiying at start time\n- 2019-08-29 AUTH-2026: Adds support for non-pty sessions and inline command exec\n- 2019-08-26 AUTH-1943: Adds session logging\n- 2019-08-26 TUN-2162: Decomplect OpenStream to allow finer-grained timeouts\n- 2019-08-29 TUN-2260: add name/group to CapnpConnectParameters, remove Scope\n\n2019.8.4\n- 2019-08-30 Fix #111: Add support for specifying a specific HTTP Host: header on the origin. (#114)\n- 2019-08-22 TUN-2165: Add ClientConfig to tunnelrpc.ConnectResult\n- 2019-08-20 AUTH-2014: Checks users login shell\n- 2019-08-26 TUN-2243: Revert \"STOR-519: Add db-connect, a SQL over HTTPS server\"\n- 2019-08-27 TUN-2244: Add NO_AUTOUPDATE env var\n- 2019-08-22 AUTH-2018: Adds support for authorized keys and short lived certs\n- 2019-08-28 AUTH-2022: Adds ssh timeout configuration\n- 2019-08-28 TUN-1968: Gracefully diff StreamHandler.UpdateConfig\n- 2019-08-26 AUTH-2021 - s3 bucket uploading for SSH logs\n- 2019-08-19 AUTH-2004: Adds static host key support\n- 2019-07-18 AUTH-1941: Adds initial SSH server implementation\n\n2019.8.3\n- 2019-08-20 STOR-519: Add db-connect, a SQL over HTTPS server\n- 2019-08-20 Release 2019.8.2\n- 2019-08-20 Revert \"AUTH-1941: Adds initial SSH server implementation\"\n- 2019-08-11 TUN-2163: Add GrapQLType method to Scope interface\n- 2019-08-06 TUN-2152: Requests with a query in the URL are erroneously escaped\n- 2019-07-18 AUTH-1941: Adds initial SSH server implementation\n\n2019.8.1\n- 2019-08-05 TUN-2111: Implement custom serialization logic for FallibleConfig and OriginConfig\n- 2019-08-06 Revert \"TUN-1736: Missing headers when passing an invalid path\"\n\n2019.8.0\n- 2019-07-11 TUN-1956: Go 1.12 update\n- 2019-07-24 TUN-1736: Missing headers when passing an invalid path\n- 2019-07-30 TUN-2117: read group/system-name from CLI, send it to edge\n- 2019-08-02 TUN-2125: Add PostgresType() to Scope\n- 2019-08-05 TUN-2147: Implemented ScopeUnmarshaler\n- 2019-07-31 TUN-2110: Implement custom deserialization logic for OriginConfig\n- 2019-07-31 AUTH-1972: Deletes token lock file if backoff retry attempts exceeded and intercepts signals until lock is released\n\n2019.7.0\n- 2019-05-28 TUN-1913: Define OriginService for each type of origin\n- 2019-04-29 Build a docker container\n- 2019-06-12 TUN-1952: Group ClientConfig fields by the component that uses the config, and return the part of the config that failed to be applied\n- 2019-06-05 TUN-1893: Proxy requests to the origin based on tunnel hostname\n- 2019-06-17 TUN-1961: Create EdgeConnectionManager to maintain outbound connections to the edge\n- 2019-06-18 TUN-1885: Reconfigure cloudflared on receiving new ClientConfig\n- 2019-06-19 TUN-1976: Pass tunnel hostname through header\n- 2019-06-20 TUN-1982: Load custom origin CA when OriginCAPool is specified\n- 2019-06-26 TUN-2005: Upgrade logrus\n- 2019-06-20 TUN-1981: Write response header & body on proxy error to notify eyeballs of failure category\n- 2019-06-20 TUN-1977: Validate OriginConfig has valid URL, and use scheme to determine if a HTTPOriginService is expecting HTTP or Unix\n- 2019-06-13 DoH: change the media type to application/dns-message\n- 2019-06-26 AUTH-1736: Better handling of token revocation\n\n2019.6.0\n- 2019-05-17 TUN-1828: Update declarative tunnel config struct\n- 2019-05-29 Handle exit code on err\n- 2019-05-29 AUTH-1802: Fixed ssh-config templating\n- 2019-05-30 TUN-1914: Conflate HTTP and Unix OriginConfig, and add TLS config to WebSocketOriginConfig\n- 2019-06-03 AUTH-1811: ssh-gen config fixes\n\n2019.5.0\n- 2019-04-25 TUN-1781: ServeStream should return early on error\n- 2019-04-30 TUN-1786: Remove low-level Windows service logging\n- 2019-05-03 TUN-1807: Send cloudflared version in Connect RPC\n- 2019-01-23 AUTH-1557: Short Lived Certs\n- 2019-05-13 TUN-1847: Log a distinct message when OpenStream fails while waiting for response headers\n- 2019-05-13 AUTH-1706: fixes and testing\n- 2019-05-22 TUN-1880: Save debug and warn level log to logfile\n- 2019-05-22 AUTH-1781: fixed race condition for short lived certs, doc required config\n\n2019.4.1\n- 2019-03-18 TUN-1626: Create new supervisor to establish connection with origintunneld\n- 2019-04-04 TUN-1619: Add flag to test declarative tunnels.\n- 2019-04-05 TUN-1577: decompose carrier.StartServer to make TestStartServer less flappy\n- 2019-03-29 TUN-1606: Define CloudflaredConfig RPC structure, interface for cloudflared's RPC server\n- 2019-04-02 TUN-1682: Add context to OpenStream to prevent it from blocking indefinitely.\n- 2019-04-16 TUN-1732: cloudflared metrics should track userHostnames\n- 2019-04-17 TUN-1734: Pin packages at exact versions\n- 2019-04-18 TUN-1669: Update license message in help text. Also fix test\n\n2019.4.0\n- 2019-03-28 TUN-1648: ConnectionID is now a UUID\n- 2019-04-01 TUN-1673: Conflate Hello and Connect RPCs\n\n2019.3.2\n- 2019-03-22 TUN-1637: Free tunnels shouldn't require cert.pem\n- 2019-03-18 TUN-1604: Define Connect RPC call\n\n2019.3.1\n- 2019-03-09 Add rdp as a supported protocol in URL validation (#76)\n- 2019-03-15 TUN-1613: improved cloudflared RegisterTunnel fail metrics\n- 2019-03-17 TUN-1615: revert miekg/dns to last known working revision\n\n2019.3.0\n- 2018-12-28 make http transport aware of proxy from envvar\n- 2019-02-28 TUN-1559: fix nil dereference in TunnelConfig.CloseConnOnce\n- 2019-03-04 TUN-1451: Make non-interactive, non-service execution possible on Windows\n- 2019-03-04 TUN-1562: Refactor connectedSignal to be safe to close multiple times\n- 2019-02-27 TUN-1550: Add validation timeout for non-responsive origins\n- 2019-03-06 AUTH-1531: Named flags for ssh service tokens\n- 2019-02-14 Support unix sockets.\n- 2019-03-08 TUN-1389: Non-scalar flags in a cloudflared config.yml don't get logged\n- 2019-03-07 TUN-1522: If we can't get SRV from default resolver, get them from 1.1.1.1 DoT\n\n2019.2.1\n- 2019-02-14 TUN-1381:  should tell you if you're on the latest version rather than just exiting silently\n- 2019-02-15 TUN-1467: build with Go 1.11\n- 2019-02-15 AUTH-1519: Added logging\n- 2019-02-19 TUN-1525: cloudflared metrics for registration success/fail\n- 2019-02-19 TUN-1510: Wrap the close() in sync.Once.Do\n\n2019.2.0\n- 2019-01-24 AUTH-1462: better curl arg parsing\n- 2019-02-01 TUN-1456: Only make one UUID\n- 2019-01-30 cloudflared/linux_service: Add missing /etc/init.d shebang\n- 2019-02-07 AUTH-1511: Add custom headers for ssh command\n- 2019-02-01 AUTH-1503: Added RDP support\n- 2019-02-01 AUTH-1403: Print the paths in the ssh-config instructions\n\n2019.1.0\n- 2018-12-10 TUN-1231: Horizontal overflow wrapping on the Hello page\n- 2018-12-17 TUN-1140: Show usage if invoked with no args or config\n- 2018-11-06 TUN-632 Filter out common network exceptions from going to Sentry on StartServer\n- 2019-01-07 TUN-1138: Install cloudflared service directory with 755 permissions\n- 2019-01-07 TUN-1265: Silent exit when failing to parse config\n- 2019-01-10 TUN-1350: Enhance error messages with cloudflarestatus.com link, if relevant\n- 2019-01-16 TUN-1358: Close readyList after Muxer.Serve() has stopped running\n- 2019-01-24 AUTH-1423: move from stdout to stderr\n- 2019-01-24 AUTH-1404: reauth if the token is about to expire within 15 minutes\n- 2019-01-24 AUTH-1459: improved ssh streaming error message\n- 2019-01-24 AUTH-1211: print all the versions\n- 2019-01-24 AUTH-1337: fix url path\n- 2019-01-28 TUN-1418: Rename ProtocolLogger to TransportLogger, and use TransportLogger to log RPC events.\n- 2019-01-28 TUN-1419: Identify request/response headers/content length with ray ID\n\n2018.12.1\n- 2018-12-11 TUN-1270: cloudflared panic (HA metrics missing label)\n\n2018.12.0\n- 2018-11-15 TUN-1196: Allow TLS config client CA and root CA to be constructed from multiple certificates\n- 2018-11-20 TUN-1209: TLS Config Certificates and GetCertificate can both be set\n- 2018-11-26 TUN-1212: Expose tunnel_id in metrics\n- 2018-11-30 TUN-1204: remove 'cloudflared hello' command\n- 2018-12-04 Fix license URL typo\n- 2018-12-07 TUN-1250: ValidateHTTPService shouldn't follow 302s\n\n2018.11.0\n- 2018-10-31 AUTH-1282: Fixed an issue where we were receiving as opposed sending on the channel.\n- 2018-11-06 TUN-1179: Fix log message in cmd/cloudflared/transfer.Run\n- 2018-11-13 AUTH-1308: get jwt even when you are already logged in\n- 2018-11-12 TUN-1190: check URL parse error when starting SSH proxy server\n- 2018-11-15 AUTH-1320: Fixed request issue and unhide the ssh command\n\n2018.10.5\n- 2018-10-18 TUN-968: Flow control for large requests/responses\n- 2018-10-26 TUN-1158: Windows: use process arguments rather than trivial service arguments\n- 2018-10-20 #30: Fix the Content-Length header for HTTP2->HTTP1\n- 2018-10-29 TUN-1160: pass Host header during origin url validation\n\n2018.10.4\n- 2018-09-21 AUTH-1070: added SSH/protocol forwarding\n- 2018-10-19 AUTH-1235: fixed packaging of deb dev file\n- 2018-10-19 TUN-1097: Host missing from WebSocket request\n- 2018-10-19 AUTH-1188: UX Review and Changes for CLI SSH Access\n\n2018.10.3\n- 2018-10-08 TUN-1099: Bring back changes in 2018.10.1\n- 2018-10-08 TUN-1098: removed deprecation error\n- 2018-10-08 TUN-1101: False negatives in Cloudflared error reporting\n\n2018.10.2\n- 2018-10-06 TUN-1093: Revert cloudflared to 2018.8.0\n\n2018.10.1\n- 2018-10-03 TUN-1012: Normalize config filename for Linux services\n- 2018-10-05 TUN-1081: cloudflared now generates UUIDs\n- 2018-10-05 TUN-1083: fixed incorrect help menu\n- 2018-10-05 TUN-1086: fixed config option\n\n2018.10.0\n- 2018-08-15 AUTH-910, AUTH-1049, AUTH-1068, AUTH-1056: Generate and store Access tokens with E2EE option, curl/cmd wrapper\n- 2018-09-11 TUN-890: To support free tunnels, hostname can now be \"\"\n- 2018-09-12 TUN-810: Cloudflared should open dash/argotunnel not dash/warp\n- 2018-09-12 TUN-985: Don't display tunnel ID if it's empty string\n- 2018-09-11 TUN-881: Display trial zone URL upon successful registration\n- 2018-09-11 TUN-868: HTTP/HTTPS mismatch should have a better error message\n- 2018-09-19 TUN-1028: Unhide cloudflared compression flag\n- 2018-09-20 AUTH-1139: refactored cloudflared help menu\n- 2018-09-20 TUN-1035: New text for cloudflared tunnel --help\n- 2018-09-18 AUTH-1136: addressing beta feedback\n- 2018-09-26 AUTH-1165: hide access command\n- 2018-09-26 TUN-1046: Document that delta compression is a beta feature\n- 2018-09-28 TUN-1056: Lint error broke build\n- 2018-09-27 TUN-1052: Origintunneld can send back an Origincert to Cloudflared\n- 2018-09-28 TUN-1052: Changing type of OriginCert to :Data\n- 2018-10-01 TUN-1062: Makefile target for regenerating Capn Proto definitions\n- 2018-10-02 TUN-1064: Revert OriginCert capnp changes in Cloudflared. Reverts commits a1ee2342e97 and 8c756c45785.\n- 2018-10-03 TUN-1076: Pin capnproto2 to version 2.17.1\n- 2018-10-03 AUTH-1199: unhide access command, added beta label\n\n2018.8.0\n- 2018-05-01 Initial commit\n- 2018-05-03 TUN-595: Add License/Readme files to cloudflared\n- 2018-05-01 TUN-528: Move cloudflared into a separate repo\n- 2018-07-24 TUN-813: Clean up cloudflared dependencies\n- 2018-07-25 TUN-814: Handle error in CreateTLSListener before closing listener\n- 2018-07-24 TUN-804: create Makefile recipe to build cloudflared and run tests\n- 2018-07-26 TUN-817: Increase the log time precision\n- 2018-07-30 TUN-828: Added Connection: keep-alive header\n- 2018-07-30 TUN-829: prefer p256 curve\n- 2018-07-31 TUN-834: Enable tracing on cloudflared\n- 2018-08-07 TUN-820: Fix caddyfile gitignore\n- 2018-07-25 TUN-804: create make recipe for building deb package\n- 2018-08-07 TUN-861: Disable cloudflared tracing by default; preserve the latest tracefile\n- 2018-08-07 TUN-857: Pull the brotli-go dependency from Github\n- 2018-08-14 TUN-897: Bring back missing Brotli files\n- 2018-07-26 TUN-804: create makefile recipe to release cloudflared using equinox\n- 2018-08-15 TUN-901: makefile target for homebrew release\n- 2018-07-30 TUN-801: Rapid SQL Proxy\n- 2018-08-27 TUN-833: Don't log system root certificate loading failure on Windows\n\n"
        },
        {
          "name": "build-packages-fips.sh",
          "type": "blob",
          "size": 0.833984375,
          "content": "#!/bin/bash\nVERSION=$(git describe --tags --always --match \"[0-9][0-9][0-9][0-9].*.*\")\necho $VERSION\n\n# This controls the directory the built artifacts go into\nexport ARTIFACT_DIR=artifacts/\nmkdir -p $ARTIFACT_DIR\n\narch=(\"amd64\")\nexport TARGET_ARCH=$arch\nexport TARGET_OS=linux\nexport FIPS=true\n# For BoringCrypto to link, we need CGO enabled. Otherwise compilation fails.\nexport CGO_ENABLED=1\n\nmake cloudflared-deb\nmv cloudflared-fips\\_$VERSION\\_$arch.deb $ARTIFACT_DIR/cloudflared-fips-linux-$arch.deb\n\n# rpm packages invert the - and _ and use x86_64 instead of amd64.\nRPMVERSION=$(echo $VERSION|sed -r 's/-/_/g')\nRPMARCH=\"x86_64\"\nmake cloudflared-rpm\nmv cloudflared-fips-$RPMVERSION-1.$RPMARCH.rpm $ARTIFACT_DIR/cloudflared-fips-linux-$RPMARCH.rpm\n\n# finally move the linux binary as well.\nmv ./cloudflared $ARTIFACT_DIR/cloudflared-fips-linux-$arch\n"
        },
        {
          "name": "build-packages.sh",
          "type": "blob",
          "size": 1.3408203125,
          "content": "#!/bin/bash\nVERSION=$(git describe --tags --always --match \"[0-9][0-9][0-9][0-9].*.*\")\necho $VERSION\n\n# Disable FIPS module in go-boring\nexport GOEXPERIMENT=noboringcrypto\nexport CGO_ENABLED=0\n\n# This controls the directory the built artifacts go into\nexport ARTIFACT_DIR=artifacts/\nmkdir -p $ARTIFACT_DIR\n\nlinuxArchs=(\"386\" \"amd64\" \"arm\" \"armhf\" \"arm64\")\nexport TARGET_OS=linux\nfor arch in ${linuxArchs[@]}; do\n    unset TARGET_ARM\n    export TARGET_ARCH=$arch\n\n    ## Support for arm platforms without hardware FPU enabled\n    if [[ $arch == arm ]] ; then\n        export TARGET_ARCH=arm\n        export TARGET_ARM=5\n    fi\n    \n    ## Support for armhf builds \n    if [[ $arch == armhf ]] ; then\n        export TARGET_ARCH=arm\n        export TARGET_ARM=7 \n    fi\n    \n    make cloudflared-deb\n    mv cloudflared\\_$VERSION\\_$arch.deb $ARTIFACT_DIR/cloudflared-linux-$arch.deb\n\n    # rpm packages invert the - and _ and use x86_64 instead of amd64.\n    RPMVERSION=$(echo $VERSION|sed -r 's/-/_/g')\n    RPMARCH=$arch\n    if [ $arch == \"amd64\" ];then\n        RPMARCH=\"x86_64\"\n    fi\n    if [ $arch == \"arm64\" ]; then\n        RPMARCH=\"aarch64\"\n    fi\n    make cloudflared-rpm\n    mv cloudflared-$RPMVERSION-1.$RPMARCH.rpm $ARTIFACT_DIR/cloudflared-linux-$RPMARCH.rpm\n\n    # finally move the linux binary as well.\n    mv ./cloudflared $ARTIFACT_DIR/cloudflared-linux-$arch\ndone\n"
        },
        {
          "name": "carrier",
          "type": "tree",
          "content": null
        },
        {
          "name": "catalog-info.yaml",
          "type": "blob",
          "size": 0.5,
          "content": "apiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: cloudflared\n  description: Client for Cloudflare Tunnels\n  annotations:\n    backstage.io/source-location: url:https://bitbucket.cfdata.org/projects/TUN/repos/cloudflared/browse\n    cloudflare.com/software-excellence-opt-in: \"true\"\n    cloudflare.com/jira-project-key: \"TUN\"\n    cloudflare.com/jira-project-component: \"Cloudflare Tunnel\"\n  tags:\n    - internal\nspec:\n  type: \"service\"\n  lifecycle: \"Active\"\n  owner: \"teams/tunnel-teams-routing\"\n"
        },
        {
          "name": "cfapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfio",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfsetup.yaml",
          "type": "blob",
          "size": 6.8984375,
          "content": "pinned_go: &pinned_go go-boring=1.22.5-1\n\nbuild_dir: &build_dir /cfsetup_build\ndefault-flavor: bookworm\n\nbullseye: &bullseye\n  build-linux:\n    build_dir: *build_dir\n    builddeps: &build_deps\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n      - rpm\n      - libffi-dev\n    pre-cache: &build_pre_cache\n      - export GOCACHE=/cfsetup_build/.cache/go-build\n      - go install golang.org/x/tools/cmd/goimports@latest\n    post-cache:\n      # Build binary for component test\n      - GOOS=linux GOARCH=amd64 make cloudflared\n  build-linux-fips:\n    build_dir: *build_dir\n    builddeps: *build_deps\n    pre-cache: *build_pre_cache\n    post-cache:\n      - export FIPS=true\n      # Build binary for component test\n      - GOOS=linux GOARCH=amd64 make cloudflared\n  cover:\n    build_dir: *build_dir\n    builddeps: *build_deps\n    pre-cache: *build_pre_cache\n    post-cache:\n      - make cover\n  # except FIPS and macos\n  build-linux-release:\n    build_dir: *build_dir\n    builddeps: &build_deps_release\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n      - rpm\n      - libffi-dev\n      - python3-dev\n      - python3-pip\n      - python3-setuptools\n      - wget\n      - python3-venv\n    post-cache:\n      - python3 -m venv env\n      - . /cfsetup_build/env/bin/activate\n      - pip install pynacl==1.4.0 pygithub==1.55 boto3==1.22.9 python-gnupg==0.4.9\n      # build all packages (except macos and FIPS) and move them to /cfsetup/built_artifacts\n      - ./build-packages.sh\n  # handle FIPS separately so that we built with gofips compiler\n  build-linux-fips-release:\n    build_dir: *build_dir\n    builddeps: *build_deps_release\n    post-cache:\n      # same logic as above, but for FIPS packages only\n      - ./build-packages-fips.sh\n  generate-versions-file:\n    build_dir: *build_dir\n    builddeps:\n      - *pinned_go\n      - build-essential\n    post-cache:\n      - make generate-docker-version\n  build-deb:\n    build_dir: *build_dir\n    builddeps: &build_deb_deps\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=amd64\n      - make cloudflared-deb\n  build-fips-internal-deb:\n    build_dir: *build_dir\n    builddeps: &build_fips_deb_deps\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=amd64\n      - export FIPS=true\n      - export ORIGINAL_NAME=true\n      - make cloudflared-deb\n  build-internal-deb-nightly-amd64:\n    build_dir: *build_dir\n    builddeps: *build_fips_deb_deps\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=amd64\n      - export NIGHTLY=true\n      - export FIPS=true\n      - export ORIGINAL_NAME=true\n      - make cloudflared-deb\n  build-internal-deb-nightly-arm64:\n    build_dir: *build_dir\n    builddeps: *build_fips_deb_deps\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=arm64\n      - export NIGHTLY=true\n      # - export FIPS=true # TUN-7595\n      - export ORIGINAL_NAME=true\n      - make cloudflared-deb\n  build-deb-arm64:\n    build_dir: *build_dir\n    builddeps: *build_deb_deps\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=arm64\n      - make cloudflared-deb\n  package-windows:\n    build_dir: *build_dir\n    builddeps:\n      - *pinned_go\n      - build-essential\n      - python3-dev\n      - libffi-dev\n      - python3-setuptools\n      - python3-pip\n      - wget\n      # libmsi and libgcab are libraries the wixl binary depends on.\n      - libmsi-dev\n      - libgcab-dev\n      - python3-venv\n    pre-cache:\n      - wget https://github.com/sudarshan-reddy/msitools/releases/download/v0.101b/wixl -P /usr/local/bin\n      - chmod a+x /usr/local/bin/wixl\n    post-cache:\n      - python3 -m venv env\n      - . env/bin/activate\n      - pip install pynacl==1.4.0 pygithub==1.55\n      - .teamcity/package-windows.sh\n  test:\n    build_dir: *build_dir\n    builddeps: &build_deps_tests\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n      - rpm\n      - libffi-dev\n      - gotest-to-teamcity\n    pre-cache: *build_pre_cache\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=amd64\n      - export PATH=\"$HOME/go/bin:$PATH\"\n      - ./fmt-check.sh\n      - make test | gotest-to-teamcity\n  test-fips:\n    build_dir: *build_dir\n    builddeps: *build_deps_tests\n    pre-cache: *build_pre_cache\n    post-cache:\n      - export GOOS=linux\n      - export GOARCH=amd64\n      - export FIPS=true\n      - export PATH=\"$HOME/go/bin:$PATH\"\n      - ./fmt-check.sh\n      - make test | gotest-to-teamcity\n  component-test:\n    build_dir: *build_dir\n    builddeps: &build_deps_component_test\n      - *pinned_go\n      - python3\n      - python3-pip\n      - python3-setuptools\n      # procps installs the ps command which is needed in test_sysv_service\n      # because the init script uses ps pid to determine if the agent is\n      # running\n      - procps\n      - python3-venv\n    pre-cache-copy-paths:\n      - component-tests/requirements.txt\n    post-cache: &component_test_post_cache\n      - python3 -m venv env\n      - . env/bin/activate\n      - pip install --upgrade -r component-tests/requirements.txt\n      # Creates and routes a Named Tunnel for this build. Also constructs\n      # config file from env vars.\n      - python3 component-tests/setup.py --type create\n      - pytest component-tests -o log_cli=true --log-cli-level=INFO\n      # The Named Tunnel is deleted and its route unprovisioned here.\n      - python3 component-tests/setup.py --type cleanup\n  component-test-fips:\n    build_dir: *build_dir\n    builddeps: *build_deps_component_test\n    pre-cache-copy-paths:\n      - component-tests/requirements.txt\n    post-cache: *component_test_post_cache\n  github-release-dryrun:\n    build_dir: *build_dir\n    builddeps:\n      - *pinned_go\n      - build-essential\n      - python3-dev\n      - libffi-dev\n      - python3-setuptools\n      - python3-pip\n      - python3-venv\n    post-cache:\n      - python3 -m venv env\n      - . env/bin/activate\n      - pip install pynacl==1.4.0 pygithub==1.55\n      - make github-release-dryrun\n  github-release:\n    build_dir: *build_dir\n    builddeps:\n      - *pinned_go\n      - build-essential\n      - python3-dev\n      - libffi-dev\n      - python3-setuptools\n      - python3-pip\n      - python3-venv\n    post-cache:\n      - python3 -m venv env\n      - . env/bin/activate\n      - pip install pynacl==1.4.0 pygithub==1.55\n      - make github-release\n  r2-linux-release:\n    build_dir: *build_dir\n    builddeps:\n      - *pinned_go\n      - build-essential\n      - fakeroot\n      - rubygem-fpm\n      - rpm\n      - wget\n      - python3-dev\n      - libffi-dev\n      - python3-setuptools\n      - python3-pip\n      - reprepro\n      - createrepo-c\n      - python3-venv\n    post-cache:\n      - python3 -m venv env\n      - . env/bin/activate\n      - pip install pynacl==1.4.0 pygithub==1.55 boto3==1.22.9 python-gnupg==0.4.9\n      - make r2-linux-release\n\nbookworm: *bullseye\ntrixie: *bullseye\n"
        },
        {
          "name": "check-fips.sh",
          "type": "blob",
          "size": 0.51171875,
          "content": "# Pass the path to the executable to check for FIPS compliance\nexe=$1\n\nif [ \"$(go tool nm \"${exe}\" | grep -c '_Cfunc__goboringcrypto_')\" -eq 0 ]; then\n    # Asserts that executable is using FIPS-compliant boringcrypto\n    echo \"${exe}: missing goboring symbols\" >&2\n    exit 1\nfi\nif [ \"$(go tool nm \"${exe}\" | grep -c 'crypto/internal/boring/sig.FIPSOnly')\" -eq 0 ]; then\n    # Asserts that executable is using FIPS-only schemes\n    echo \"${exe}: missing fipsonly symbols\" >&2\n    exit 1\nfi\n\necho \"${exe} is FIPS-compliant\"\n"
        },
        {
          "name": "cloudflared.wxs",
          "type": "blob",
          "size": 2.4736328125,
          "content": "<?xml version=\"1.0\"?>\n\n<?if $(var.Platform)=\"x64\" ?>\n    <?define Program_Files=\"ProgramFiles64Folder\"?>\n<?else ?>\n    <?define Program_Files=\"ProgramFilesFolder\"?>\n<?endif ?>\n<?ifndef var.Version?>\n    <?error Undefined Version variable?>\n<?endif ?>\n<?ifndef var.Path?>\n    <?error Undefined Path variable?>\n<?endif ?>\n\n<Wix xmlns=\"http://schemas.microsoft.com/wix/2006/wi\">\n    <Product Id=\"*\"\n        UpgradeCode=\"23f90fdd-9328-47ea-ab52-5380855a4b12\"\n        Name=\"cloudflared\"\n        Version=\"$(var.Version)\"\n        Manufacturer=\"cloudflare\"\n        Language=\"1033\">\n\n        <Package InstallerVersion=\"200\" Compressed=\"yes\" Comments=\"Windows Installer Package\" InstallScope=\"perMachine\" />\n\n        <Media Id=\"1\" Cabinet=\"product.cab\" EmbedCab=\"yes\" />\n\n        <MajorUpgrade DowngradeErrorMessage=\"A later version of [ProductName] is already installed. Setup will now exit.\" />\n\n        <Upgrade Id=\"23f90fdd-9328-47ea-ab52-5380855a4b12\">\n            <UpgradeVersion Minimum=\"$(var.Version)\" OnlyDetect=\"yes\" Property=\"NEWERVERSIONDETECTED\" />\n            <UpgradeVersion Minimum=\"2020.8.0\" Maximum=\"$(var.Version)\" IncludeMinimum=\"yes\" IncludeMaximum=\"no\"\n                Property=\"OLDERVERSIONBEINGUPGRADED\" />\n        </Upgrade>\n        <Condition Message=\"A newer version of this software is already installed.\">NOT NEWERVERSIONDETECTED</Condition>\n\n        <Directory Id=\"TARGETDIR\" Name=\"SourceDir\">\n            <!--This specifies where the cloudflared.exe is moved to in the windows Operation System-->\n            <Directory Id=\"$(var.Program_Files)\">\n                <Directory Id=\"INSTALLDIR\" Name=\"cloudflared\">\n                    <Component Id=\"ApplicationFiles\" Guid=\"35e5e858-9372-4449-bf73-1cd6f7267128\">\n                        <File Id=\"ApplicationFile0\" Source=\"$(var.Path)\" />\n                    </Component>\n                </Directory>\n            </Directory>\n            <Component Id=\"ENVS\" Guid=\"6bb74449-d10d-4f4a-933e-6fc9fa006eae\">\n                <!--Set the cloudflared bin location to the Path Environment Variable-->\n                <Environment Id=\"ENV0\"\n                    Name=\"PATH\"\n                    Value=\"[INSTALLDIR]\"\n                    Permanent=\"no\"\n                    Part=\"last\"\n                    Action=\"create\"\n                    System=\"yes\" />\n            </Component>\n        </Directory>\n\n\n        <Feature Id='Complete' Level='1'>\n            <ComponentRef Id=\"ENVS\" />\n            <ComponentRef Id='ApplicationFiles' />\n        </Feature>\n\n    </Product>\n</Wix>\n"
        },
        {
          "name": "cloudflared_man_template",
          "type": "blob",
          "size": 0.404296875,
          "content": ".\\\" Manpage for cloudflared.\n.TH man 1 ${DATE} \"${VERSION}\" \"cloudflared man page\"\n.SH NAME\ncloudflared \\- creates a connection to the cloudflare edge network\n.SH DESCRIPTION\ncloudflared creates a persistent connection between a local service and the Cloudflare network. Once the daemon is running and the Tunnel has been configured, the local service can be locked down to only allow connections from Cloudflare.\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "component-tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "connection",
          "type": "tree",
          "content": null
        },
        {
          "name": "credentials",
          "type": "tree",
          "content": null
        },
        {
          "name": "datagramsession",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev.Dockerfile",
          "type": "blob",
          "size": 0.32421875,
          "content": "FROM golang:1.22.5 as builder\nENV GO111MODULE=on \\\n    CGO_ENABLED=0\nWORKDIR /go/src/github.com/cloudflare/cloudflared/\nRUN apt-get update\nCOPY . .\nRUN .teamcity/install-cloudflare-go.sh\n# compile cloudflared\nRUN PATH=\"/tmp/go/bin:$PATH\" make cloudflared\nRUN cp /go/src/github.com/cloudflare/cloudflared/cloudflared /usr/local/bin/\n"
        },
        {
          "name": "diagnostic",
          "type": "tree",
          "content": null
        },
        {
          "name": "edgediscovery",
          "type": "tree",
          "content": null
        },
        {
          "name": "features",
          "type": "tree",
          "content": null
        },
        {
          "name": "fips",
          "type": "tree",
          "content": null
        },
        {
          "name": "fmt-check.sh",
          "type": "blob",
          "size": 0.34765625,
          "content": "#!/bin/bash\n\nset -e -o pipefail\n\nOUTPUT=$(goimports -l -d -local github.com/cloudflare/cloudflared $(go list -mod=vendor -f '{{.Dir}}' -a ./... | fgrep -v tunnelrpc))\n\nif [ -n \"$OUTPUT\" ] ; then\n  PAGER=$(which colordiff || echo cat)\n  echo\n  echo \"Code formatting issues found, use 'make fmt' to correct them\"\n  echo\n  echo \"$OUTPUT\" | $PAGER\n  exit 1\nfi\n"
        },
        {
          "name": "github_message.py",
          "type": "blob",
          "size": 5.19140625,
          "content": "#!/usr/bin/python3\n\"\"\"\nCreate Github Releases Notes with binary checksums from Workers KV\n\"\"\"\n\nimport argparse\nimport logging\nimport os\nimport requests\n\nfrom github import Github, UnknownObjectException\n\nFORMAT = \"%(levelname)s - %(asctime)s: %(message)s\"\nlogging.basicConfig(format=FORMAT, level=logging.INFO)\n\nCLOUDFLARED_REPO = os.environ.get(\"GITHUB_REPO\", \"cloudflare/cloudflared\")\nGITHUB_CONFLICT_CODE = \"already_exists\"\nBASE_KV_URL = 'https://api.cloudflare.com/client/v4/accounts/'\n\n\ndef kv_get_keys(prefix, account, namespace, api_token):\n    \"\"\" get the KV keys for a given prefix \"\"\"\n    response = requests.get(\n        BASE_KV_URL + account + \"/storage/kv/namespaces/\" +\n        namespace + \"/keys\" + \"?prefix=\" + prefix,\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + api_token,\n        },\n    )\n    if response.status_code != 200:\n        jsonResponse = response.json()\n        errors = jsonResponse[\"errors\"]\n        if len(errors) > 0:\n            raise Exception(\"failed to get checksums: {0}\", errors[0])\n    return response.json()[\"result\"]\n\n\ndef kv_get_value(key, account, namespace, api_token):\n    \"\"\" get the KV value for a provided key \"\"\"\n    response = requests.get(\n        BASE_KV_URL + account + \"/storage/kv/namespaces/\" + namespace + \"/values/\" + key,\n        headers={\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": \"Bearer \" + api_token,\n        },\n    )\n    if response.status_code != 200:\n        jsonResponse = response.json()\n        errors = jsonResponse[\"errors\"]\n        if len(errors) > 0:\n            raise Exception(\"failed to get checksums: {0}\", errors[0])\n    return response.text\n\n\ndef update_or_add_message(msg, name, sha):\n    \"\"\" \n    updates or builds the github version message for each new asset's sha256. \n    Searches the existing message string to update or create. \n    \"\"\"\n    new_text = '{0}: {1}\\n'.format(name, sha)\n    start = msg.find(name)\n    if (start != -1):\n        end = msg.find(\"\\n\", start)\n        if (end != -1):\n            return msg.replace(msg[start:end+1], new_text)\n    back = msg.rfind(\"```\")\n    if (back != -1):\n        return '{0}{1}```'.format(msg[:back], new_text)\n    return '{0} \\n### SHA256 Checksums:\\n```\\n{1}```'.format(msg, new_text)\n\n\ndef get_release(repo, version):\n    \"\"\" Get a Github Release matching the version tag. \"\"\"\n    try:\n        release = repo.get_release(version)\n        logging.info(\"Release %s found\", version)\n        return release\n    except UnknownObjectException:\n        logging.info(\"Release %s not found\", version)\n\n\ndef parse_args():\n    \"\"\" Parse and validate args \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Updates a Github Release with checksums from KV\"\n    )\n    parser.add_argument(\n        \"--api-key\", default=os.environ.get(\"API_KEY\"), help=\"Github API key\"\n    )\n    parser.add_argument(\n        \"--kv-namespace-id\", default=os.environ.get(\"KV_NAMESPACE\"), help=\"workers KV namespace id\"\n    )\n    parser.add_argument(\n        \"--kv-account-id\", default=os.environ.get(\"KV_ACCOUNT\"), help=\"workers KV account id\"\n    )\n    parser.add_argument(\n        \"--kv-api-token\", default=os.environ.get(\"KV_API_TOKEN\"), help=\"workers KV API Token\"\n    )\n    parser.add_argument(\n        \"--release-version\",\n        metavar=\"version\",\n        default=os.environ.get(\"VERSION\"),\n        help=\"Release version\",\n    )\n    parser.add_argument(\n        \"--dry-run\", action=\"store_true\", help=\"Do not modify the release message\"\n    )\n\n    args = parser.parse_args()\n    is_valid = True\n    if not args.release_version:\n        logging.error(\"Missing release version\")\n        is_valid = False\n\n    if not args.api_key:\n        logging.error(\"Missing API key\")\n        is_valid = False\n\n    if not args.kv_namespace_id:\n        logging.error(\"Missing KV namespace id\")\n        is_valid = False\n\n    if not args.kv_account_id:\n        logging.error(\"Missing KV account id\")\n        is_valid = False\n\n    if not args.kv_api_token:\n        logging.error(\"Missing KV API token\")\n        is_valid = False\n\n    if is_valid:\n        return args\n\n    parser.print_usage()\n    exit(1)\n\n\ndef main():\n    \"\"\" Attempts to update the Github Release message with the github asset's checksums \"\"\"\n    try:\n        args = parse_args()\n        client = Github(args.api_key)\n        repo = client.get_repo(CLOUDFLARED_REPO)\n        release = get_release(repo, args.release_version)\n\n        msg = \"\"\n\n        prefix = f\"update_{args.release_version}_\"\n        keys = kv_get_keys(prefix, args.kv_account_id,\n                           args.kv_namespace_id, args.kv_api_token)\n        for key in [k[\"name\"] for k in keys]:\n            checksum = kv_get_value(\n                key, args.kv_account_id, args.kv_namespace_id, args.kv_api_token)\n            binary_name = key[len(prefix):]\n            msg = update_or_add_message(msg, binary_name, checksum)\n\n        if args.dry_run:\n            logging.info(\"Skipping release message update because of dry-run\")\n            logging.info(f\"Github message:\\n{msg}\")\n            return\n\n        # update the release body text\n        release.update_release(args.release_version, msg)\n\n    except Exception as e:\n        logging.exception(e)\n        exit(1)\n\n\nmain()\n"
        },
        {
          "name": "github_release.py",
          "type": "blob",
          "size": 10.4169921875,
          "content": "#!/usr/bin/python3\n\"\"\"\nCreates Github Releases and uploads assets\n\"\"\"\n\nimport argparse\nimport logging\nimport os\nimport shutil\nimport hashlib\nimport requests\nimport tarfile\nfrom os import listdir\nfrom os.path import isfile, join, splitext\nimport re\nimport subprocess\n\nfrom github import Github, GithubException, UnknownObjectException\n\nFORMAT = \"%(levelname)s - %(asctime)s: %(message)s\"\nlogging.basicConfig(format=FORMAT, level=logging.INFO)\n\nCLOUDFLARED_REPO = os.environ.get(\"GITHUB_REPO\", \"cloudflare/cloudflared\")\nGITHUB_CONFLICT_CODE = \"already_exists\"\nBASE_KV_URL = 'https://api.cloudflare.com/client/v4/accounts/'\nUPDATER_PREFIX = 'update'\n\ndef get_sha256(filename):\n    \"\"\" get the sha256 of a file \"\"\"\n    sha256_hash = hashlib.sha256()\n    with open(filename,\"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096),b\"\"):\n            sha256_hash.update(byte_block)\n        return sha256_hash.hexdigest()\n\ndef send_hash(pkg_hash, name, version, account, namespace, api_token):\n    \"\"\" send the checksum of a file to workers kv \"\"\"\n    key = '{0}_{1}_{2}'.format(UPDATER_PREFIX, version, name)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + api_token,\n    }\n    response = requests.put(\n            BASE_KV_URL + account + \"/storage/kv/namespaces/\" + namespace + \"/values/\" + key,\n            headers=headers,\n            data=pkg_hash\n    )\n\n    if response.status_code != 200:\n        jsonResponse = response.json()\n        errors = jsonResponse[\"errors\"]\n        if len(errors) > 0:\n            raise Exception(\"failed to upload checksum: {0}\", errors[0])\n\n\n\ndef assert_tag_exists(repo, version):\n    \"\"\" Raise exception if repo does not contain a tag matching version \"\"\"\n    tags = repo.get_tags()\n    if not tags or tags[0].name != version:\n        raise Exception(\"Tag {} not found\".format(version))\n\n\ndef get_or_create_release(repo, version, dry_run=False):\n    \"\"\"\n    Get a Github Release matching the version tag or create a new one.\n    If a conflict occurs on creation, attempt to fetch the Release on last time\n    \"\"\"\n    try:\n        release = repo.get_release(version)\n        logging.info(\"Release %s found\", version)\n        return release\n    except UnknownObjectException:\n        logging.info(\"Release %s not found\", version)\n\n    # We don't want to create a new release tag if one doesn't already exist\n    assert_tag_exists(repo, version)\n\n    if dry_run:\n        logging.info(\"Skipping Release creation because of dry-run\")\n        return\n\n    try:\n        logging.info(\"Creating release %s\", version)\n        return repo.create_git_release(version, version, \"\")\n    except GithubException as e:\n        errors = e.data.get(\"errors\", [])\n        if e.status == 422 and any(\n            [err.get(\"code\") == GITHUB_CONFLICT_CODE for err in errors]\n        ):\n            logging.warning(\n                \"Conflict: Release was likely just made by a different build: %s\",\n                e.data,\n            )\n            return repo.get_release(version)\n        raise e\n\n\ndef parse_args():\n    \"\"\" Parse and validate args \"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Creates Github Releases and uploads assets.\"\n    )\n    parser.add_argument(\n        \"--api-key\", default=os.environ.get(\"API_KEY\"), help=\"Github API key\"\n    )\n    parser.add_argument(\n        \"--release-version\",\n        metavar=\"version\",\n        default=os.environ.get(\"VERSION\"),\n        help=\"Release version\",\n    )\n    parser.add_argument(\n        \"--path\", default=os.environ.get(\"ASSET_PATH\"), help=\"Asset path\"\n    )\n    parser.add_argument(\n        \"--name\", default=os.environ.get(\"ASSET_NAME\"), help=\"Asset Name\"\n    )\n    parser.add_argument(\n        \"--namespace-id\", default=os.environ.get(\"KV_NAMESPACE\"), help=\"workersKV namespace id\"\n    )\n    parser.add_argument(\n        \"--kv-account-id\", default=os.environ.get(\"KV_ACCOUNT\"), help=\"workersKV account id\"\n    )\n    parser.add_argument(\n        \"--kv-api-token\", default=os.environ.get(\"KV_API_TOKEN\"), help=\"workersKV API Token\"\n    )\n    parser.add_argument(\n        \"--dry-run\", action=\"store_true\", help=\"Do not create release or upload asset\"\n    )\n\n    args = parser.parse_args()\n    is_valid = True\n    if not args.release_version:\n        logging.error(\"Missing release version\")\n        is_valid = False\n\n    if not args.path:\n        logging.error(\"Missing asset path\")\n        is_valid = False\n\n    if not args.name and not os.path.isdir(args.path):\n        logging.error(\"Missing asset name\")\n        is_valid = False\n\n    if not args.api_key:\n        logging.error(\"Missing API key\")\n        is_valid = False\n    \n    if not args.namespace_id:\n        logging.error(\"Missing KV namespace id\")\n        is_valid = False\n\n    if not args.kv_account_id:\n        logging.error(\"Missing KV account id\")\n        is_valid = False\n\n    if not args.kv_api_token:\n        logging.error(\"Missing KV API token\")\n        is_valid = False\n\n    if is_valid:\n        return args\n\n    parser.print_usage()\n    exit(1)\n\ndef upload_asset(release, filepath, filename, release_version, kv_account_id, namespace_id, kv_api_token):\n    logging.info(\"Uploading asset: %s\", filename)\n    assets = release.get_assets()\n    uploaded = False\n    for asset in assets:\n        if asset.name == filename:\n            uploaded = True\n            break\n    \n    if uploaded:\n        logging.info(\"asset already uploaded, skipping upload\")\n        return\n    \n    release.upload_asset(filepath, name=filename)\n\n    # check and extract if the file is a tar and gzipped file (as is the case with the macos builds)\n    binary_path = filepath\n    if binary_path.endswith(\"tgz\"):\n        try:\n            shutil.rmtree('cfd')\n        except OSError:\n            pass\n        zipfile = tarfile.open(binary_path, \"r:gz\")\n        zipfile.extractall('cfd') # specify which folder to extract to\n        zipfile.close()\n\n        binary_path = os.path.join(os.getcwd(), 'cfd', 'cloudflared')\n\n    # send the sha256 (the checksum) to workers kv\n    logging.info(\"Uploading sha256 checksum for: %s\", filename)\n    pkg_hash = get_sha256(binary_path)\n    send_hash(pkg_hash, filename, release_version, kv_account_id, namespace_id, kv_api_token)\n\ndef move_asset(filepath, filename):\n    # create the artifacts directory if it doesn't exist\n    artifact_path = os.path.join(os.getcwd(), 'artifacts')\n    if not os.path.isdir(artifact_path):\n        os.mkdir(artifact_path)\n\n    # copy the binary to the path\n    copy_path = os.path.join(artifact_path, filename)\n    try:\n        shutil.copy(filepath, copy_path)\n    except shutil.SameFileError:\n        pass # the macOS release copy fails with being the same file (already in the artifacts directory)\n\ndef get_binary_version(binary_path):\n    \"\"\"\n    Sample output from go version -m <binary>:\n    ...\n    build\t-compiler=gc\n\tbuild\t-ldflags=\"-X \\\"main.Version=2024.8.3-6-gec072691\\\" -X \\\"main.BuildTime=2024-09-10-1027 UTC\\\" \"\n\tbuild\tCGO_ENABLED=1\n    ...\n\n    This function parses the above output to retrieve the following substring 2024.8.3-6-gec072691.\n    To do this a start and end indexes are computed and the a slice is extracted from the output using them.\n    \"\"\"\n    needle = \"main.Version=\"\n    cmd = ['go','version', '-m', binary_path]\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    output, _ = process.communicate()\n    version_info = output.decode()\n\n    # Find start of needle\n    needle_index = version_info.find(needle)\n    # Find backward slash relative to the beggining of the needle\n    relative_end_index = version_info[needle_index:].find(\"\\\\\")\n    # Calculate needle position plus needle length to find version beggining\n    start_index = needle_index + len(needle)\n    # Calculate needle position plus relative position of the backward slash\n    end_index = needle_index + relative_end_index\n    return version_info[start_index:end_index]\n\ndef assert_asset_version(binary_path, release_version):\n    \"\"\"\n    Asserts that the artifacts have the correct release_version.\n    The artifacts that are checked must not have an extension expecting .exe and .tgz.\n    In the occurrence of any other extension the function exits early.\n    \"\"\"\n    try:\n        shutil.rmtree('tmp')\n    except OSError:\n        pass\n    _, ext = os.path.splitext(binary_path)\n    if ext == '.exe' or ext == '':\n        binary_version = get_binary_version(binary_path)\n    elif ext == '.tgz':\n        tar = tarfile.open(binary_path, \"r:gz\")\n        tar.extractall(\"tmp\")\n        tar.close()\n        binary_path = os.path.join(os.getcwd(), 'tmp', 'cloudflared')\n        binary_version = get_binary_version(binary_path)\n    else:\n        return\n\n    if binary_version != release_version:\n        logging.error(f\"Version mismatch {binary_path}, binary_version {binary_version} release_version {release_version}\")\n        exit(1)\n\n\ndef main():\n    \"\"\" Attempts to upload Asset to Github Release. Creates Release if it doesn't exist \"\"\"\n    try:\n        args = parse_args()\n\n        if args.dry_run:\n            if os.path.isdir(args.path):\n                onlyfiles = [f for f in listdir(args.path) if isfile(join(args.path, f))]\n                for filename in onlyfiles:\n                    binary_path = os.path.join(args.path, filename)\n                    logging.info(\"binary: \" + binary_path)\n                    assert_asset_version(binary_path, args.release_version)\n            elif os.path.isfile(args.path):\n                logging.info(\"binary: \" + binary_path)\n            else:\n                logging.error(\"dryrun failed\")\n            return\n        else:\n            client = Github(args.api_key)\n            repo = client.get_repo(CLOUDFLARED_REPO)\n\n            if os.path.isdir(args.path):\n                onlyfiles = [f for f in listdir(args.path) if isfile(join(args.path, f))]\n                for filename in onlyfiles:\n                    binary_path = os.path.join(args.path, filename)\n                    assert_asset_version(binary_path, args.release_version)\n                release = get_or_create_release(repo, args.release_version, args.dry_run)\n                for filename in onlyfiles:\n                    binary_path = os.path.join(args.path, filename)\n                    upload_asset(release, binary_path, filename, args.release_version, args.kv_account_id, args.namespace_id,\n                    args.kv_api_token)\n                    move_asset(binary_path, filename)\n            else:\n                raise Exception(\"the argument path must be a directory\")\n\n    except Exception as e:\n        logging.exception(e)\n        exit(1)\n\nmain()\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 4.380859375,
          "content": "module github.com/cloudflare/cloudflared\n\ngo 1.22\n\nrequire (\n\tgithub.com/coredns/coredns v1.11.3\n\tgithub.com/coreos/go-oidc/v3 v3.10.0\n\tgithub.com/coreos/go-systemd/v22 v22.5.0\n\tgithub.com/facebookgo/grace v0.0.0-20180706040059-75cf19382434\n\tgithub.com/fortytw2/leaktest v1.3.0\n\tgithub.com/fsnotify/fsnotify v1.4.9\n\tgithub.com/getsentry/sentry-go v0.16.0\n\tgithub.com/go-chi/chi/v5 v5.0.8\n\tgithub.com/go-chi/cors v1.2.1\n\tgithub.com/go-jose/go-jose/v4 v4.0.1\n\tgithub.com/gobwas/ws v1.2.1\n\tgithub.com/google/gopacket v1.1.19\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/gorilla/websocket v1.4.2\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/mattn/go-colorable v0.1.13\n\tgithub.com/miekg/dns v1.1.58\n\tgithub.com/mitchellh/go-homedir v1.1.0\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/prometheus/client_golang v1.19.1\n\tgithub.com/prometheus/client_model v0.6.0\n\tgithub.com/quic-go/quic-go v0.45.0\n\tgithub.com/rs/zerolog v1.20.0\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/urfave/cli/v2 v2.3.0\n\tgo.opentelemetry.io/contrib/propagators v0.22.0\n\tgo.opentelemetry.io/otel v1.26.0\n\tgo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.26.0\n\tgo.opentelemetry.io/otel/sdk v1.26.0\n\tgo.opentelemetry.io/otel/trace v1.26.0\n\tgo.opentelemetry.io/proto/otlp v1.2.0\n\tgo.uber.org/automaxprocs v1.4.0\n\tgolang.org/x/crypto v0.23.0\n\tgolang.org/x/net v0.25.0\n\tgolang.org/x/sync v0.7.0\n\tgolang.org/x/sys v0.20.0\n\tgolang.org/x/term v0.20.0\n\tgoogle.golang.org/protobuf v1.34.1\n\tgopkg.in/natefinch/lumberjack.v2 v2.0.0\n\tgopkg.in/yaml.v3 v3.0.1\n\tnhooyr.io/websocket v1.8.7\n\tzombiezen.com/go/capnproto2 v2.18.0+incompatible\n)\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.2.0 // indirect\n\tgithub.com/apparentlymart/go-cidr v1.1.0 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.2.0 // indirect\n\tgithub.com/coredns/caddy v1.1.1 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc // indirect\n\tgithub.com/facebookgo/ensure v0.0.0-20160127193407-b4ab57deab51 // indirect\n\tgithub.com/facebookgo/freeport v0.0.0-20150612182905-d4adf43b75b9 // indirect\n\tgithub.com/facebookgo/stack v0.0.0-20160209184415-751773369052 // indirect\n\tgithub.com/facebookgo/subset v0.0.0-20150612182917-8dac2c3c4870 // indirect\n\tgithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568 // indirect\n\tgithub.com/go-logr/logr v1.4.1 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 // indirect\n\tgithub.com/gobwas/httphead v0.1.0 // indirect\n\tgithub.com/gobwas/pool v0.2.1 // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/pprof v0.0.0-20230817174616-7a8ec2ada47b // indirect\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.19.1 // indirect\n\tgithub.com/grpc-ecosystem/grpc-opentracing v0.0.0-20180507213350-8e809c8a8645 // indirect\n\tgithub.com/klauspost/compress v1.15.11 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/kylelemons/godebug v1.1.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.16 // indirect\n\tgithub.com/matttproud/golang_protobuf_extensions v1.0.4 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.13.0 // indirect\n\tgithub.com/opentracing/opentracing-go v1.2.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/common v0.53.0 // indirect\n\tgithub.com/prometheus/procfs v0.12.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.26.0 // indirect\n\tgo.uber.org/mock v0.4.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 // indirect\n\tgolang.org/x/mod v0.17.0 // indirect\n\tgolang.org/x/oauth2 v0.18.0 // indirect\n\tgolang.org/x/text v0.15.0 // indirect\n\tgolang.org/x/tools v0.21.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240311132316-a219d84964c2 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237 // indirect\n\tgoogle.golang.org/grpc v1.63.2 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n)\n\nreplace github.com/urfave/cli/v2 => github.com/ipostelnik/cli/v2 v2.3.1-0.20210324024421-b6ea8234fe3d\n\n// Avoid 'CVE-2022-21698'\nreplace github.com/prometheus/golang_client => github.com/prometheus/golang_client v1.12.1\n\nreplace gopkg.in/yaml.v3 => gopkg.in/yaml.v3 v3.0.1\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 28.1474609375,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/BurntSushi/toml v1.2.0 h1:Rt8g24XnyGTyglgET/PRUNlrUeu9F5L+7FilkXfZgs0=\ngithub.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/apparentlymart/go-cidr v1.1.0 h1:2mAhrMoF+nhXqxTzSZMUzDHkLjmIHC+Zzn4tdgBZjnU=\ngithub.com/apparentlymart/go-cidr v1.1.0/go.mod h1:EBcsNrHc3zQeuaeCeCtQruQm+n9/YjEn/vI25Lg7Gwc=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.2.0 h1:DC2CZ1Ep5Y4k3ZQ899DldepgrayRUGE6BBZ/cd9Cj44=\ngithub.com/cespare/xxhash/v2 v2.2.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/coredns/caddy v1.1.1 h1:2eYKZT7i6yxIfGP3qLJoJ7HAsDJqYB+X68g4NYjSrE0=\ngithub.com/coredns/caddy v1.1.1/go.mod h1:A6ntJQlAWuQfFlsd9hvigKbo2WS0VUs2l1e2F+BawD4=\ngithub.com/coredns/coredns v1.11.3 h1:8RjnpZc42db5th84/QJKH2i137ecJdzZK1HJwhetSPk=\ngithub.com/coredns/coredns v1.11.3/go.mod h1:lqFkDsHjEUdY7LJ75Nib3lwqJGip6ewWOqNIf8OavIQ=\ngithub.com/coreos/go-oidc/v3 v3.10.0 h1:tDnXHnLyiTVyT/2zLDGj09pFPkhND8Gl8lnTRhoEaJU=\ngithub.com/coreos/go-oidc/v3 v3.10.0/go.mod h1:5j11xcw0D3+SGxn6Z/WFADsgcWVMyNAlSQupk0KK3ac=\ngithub.com/coreos/go-systemd v0.0.0-20190321100706-95778dfbb74e/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0 h1:EoUDS0afbrsXAZ9YQ9jdu/mZ2sXgT1/2yyNng4PGlyM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/facebookgo/ensure v0.0.0-20160127193407-b4ab57deab51 h1:0JZ+dUmQeA8IIVUMzysrX4/AKuQwWhV2dYQuPZdvdSQ=\ngithub.com/facebookgo/ensure v0.0.0-20160127193407-b4ab57deab51/go.mod h1:Yg+htXGokKKdzcwhuNDwVvN+uBxDGXJ7G/VN1d8fa64=\ngithub.com/facebookgo/freeport v0.0.0-20150612182905-d4adf43b75b9 h1:wWke/RUCl7VRjQhwPlR/v0glZXNYzBHdNUzf/Am2Nmg=\ngithub.com/facebookgo/freeport v0.0.0-20150612182905-d4adf43b75b9/go.mod h1:uPmAp6Sws4L7+Q/OokbWDAK1ibXYhB3PXFP1kol5hPg=\ngithub.com/facebookgo/grace v0.0.0-20180706040059-75cf19382434 h1:mOp33BLbcbJ8fvTAmZacbBiOASfxN+MLcLxymZCIrGE=\ngithub.com/facebookgo/grace v0.0.0-20180706040059-75cf19382434/go.mod h1:KigFdumBXUPSwzLDbeuzyt0elrL7+CP7TKuhrhT4bcU=\ngithub.com/facebookgo/stack v0.0.0-20160209184415-751773369052 h1:JWuenKqqX8nojtoVVWjGfOF9635RETekkoH6Cc9SX0A=\ngithub.com/facebookgo/stack v0.0.0-20160209184415-751773369052/go.mod h1:UbMTZqLaRiH3MsBH8va0n7s1pQYcu3uTb8G4tygF4Zg=\ngithub.com/facebookgo/subset v0.0.0-20150612182917-8dac2c3c4870 h1:E2s37DuLxFhQDg5gKsWoLBOB0n+ZW8s599zru8FJ2/Y=\ngithub.com/facebookgo/subset v0.0.0-20150612182917-8dac2c3c4870/go.mod h1:5tD+neXqOorC30/tWg0LCSkrqj/AR6gu8yY8/fpw1q0=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568 h1:BHsljHzVlRcyQhjrss6TZTdY2VfCqZPbv5k3iBFa2ZQ=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=\ngithub.com/fortytw2/leaktest v1.3.0 h1:u8491cBMTQ8ft8aeV+adlcytMZylmA5nnwwkRZjI8vw=\ngithub.com/fortytw2/leaktest v1.3.0/go.mod h1:jDsjWgpAGjm2CA7WthBh/CdZYEPF31XHquHwclZch5g=\ngithub.com/fsnotify/fsnotify v1.4.9 h1:hsms1Qyu0jgnwNXIxa+/V/PDsU6CfLf6CNO8H7IWoS4=\ngithub.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=\ngithub.com/getsentry/sentry-go v0.16.0 h1:owk+S+5XcgJLlGR/3+3s6N4d+uKwqYvh/eS0AIMjPWo=\ngithub.com/getsentry/sentry-go v0.16.0/go.mod h1:ZXCloQLj0pG7mja5NK6NPf2V4A88YJ4pNlc2mOHwh6Y=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.6.3/go.mod h1:75u5sXoLsGZoRN5Sgbi1eraJ4GU3++wFwWzhwvtwp4M=\ngithub.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=\ngithub.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=\ngithub.com/go-chi/chi/v5 v5.0.8 h1:lD+NLqFcAi1ovnVZpsnObHGW4xb4J8lNmoYVfECH1Y0=\ngithub.com/go-chi/chi/v5 v5.0.8/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=\ngithub.com/go-chi/cors v1.2.1 h1:xEC8UT3Rlp2QuWNEr4Fs/c2EAGVKBwy/1vHx3bppil4=\ngithub.com/go-chi/cors v1.2.1/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=\ngithub.com/go-errors/errors v1.4.2 h1:J6MZopCL4uSllY1OfXM374weqZFFItUbrImctkmUxIA=\ngithub.com/go-errors/errors v1.4.2/go.mod h1:sIVyrIiJhuEF+Pj9Ebtd6P/rEYROXFi3BopGUQ5a5Og=\ngithub.com/go-jose/go-jose/v4 v4.0.1 h1:QVEPDE3OluqXBQZDcnNvQrInro2h0e4eqNbnZSWqS6U=\ngithub.com/go-jose/go-jose/v4 v4.0.1/go.mod h1:WVf9LFMHh/QVrmqrOfqun0C45tMe3RoiKJMPvgWwLfY=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.1 h1:pKouT5E8xu9zeFC39JXRDukb6JFQPXM5p5I91188VAQ=\ngithub.com/go-logr/logr v1.4.1/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/locales v0.13.0/go.mod h1:taPMhCMXrRLJO55olJkUXHZBHCxTMfnGwq/HNwmWNS8=\ngithub.com/go-playground/locales v0.14.0 h1:u50s323jtVGugKlcYeyzC0etD1HifMjqmJqb8WugfUU=\ngithub.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=\ngithub.com/go-playground/universal-translator v0.17.0/go.mod h1:UkSxE5sNxxRwHyU+Scu5vgOQjsIJAF8j9muTVoKLVtA=\ngithub.com/go-playground/universal-translator v0.18.0 h1:82dyy6p4OuJq4/CByFNOn/jYrnRPArHwAcmLoJZxyho=\ngithub.com/go-playground/universal-translator v0.18.0/go.mod h1:UvRDBj+xPUEGrFYl+lu/H90nyDXpg0fqeB/AQUGNTVA=\ngithub.com/go-playground/validator/v10 v10.2.0/go.mod h1:uOYAAleCW8F/7oMFd6aG0GOhaH6EGOAJShg8Id5JGkI=\ngithub.com/go-playground/validator/v10 v10.11.1 h1:prmOlTVv+YjZjmRmNSF3VmspqJIxJWXmqUsHwfTRRkQ=\ngithub.com/go-playground/validator/v10 v10.11.1/go.mod h1:i+3WkQ1FvaUjjxh1kSvIA4dMGDBiPU55YFDl0WbKdWU=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572 h1:tfuBGBXKqDEevZMzYi5KSi8KkcZtzBcTgAUUtapy0OI=\ngithub.com/go-task/slim-sprig v0.0.0-20230315185526-52ccab3ef572/go.mod h1:9Pwr4B2jHnOSGXyyzV8ROjYa2ojvAY6HCGYYfMoC3Ls=\ngithub.com/gobwas/httphead v0.0.0-20180130184737-2c6c146eadee/go.mod h1:L0fX3K22YWvt/FAX9NnzrNzcI4wNYi9Yku4O0LKYflo=\ngithub.com/gobwas/httphead v0.1.0 h1:exrUm0f4YX0L7EBwZHuCF4GDp8aJfVeBrlLQrs6NqWU=\ngithub.com/gobwas/httphead v0.1.0/go.mod h1:O/RXo79gxV8G+RqlR/otEwx4Q36zl9rqC5u12GKvMCM=\ngithub.com/gobwas/pool v0.2.0/go.mod h1:q8bcK0KcYlCgd9e7WYLm9LpyS+YeLd8JVDW6WezmKEw=\ngithub.com/gobwas/pool v0.2.1 h1:xfeeEhW7pwmX8nuLVlqbzVc7udMDrwetjEv+TZIz1og=\ngithub.com/gobwas/pool v0.2.1/go.mod h1:q8bcK0KcYlCgd9e7WYLm9LpyS+YeLd8JVDW6WezmKEw=\ngithub.com/gobwas/ws v1.0.2/go.mod h1:szmBTxLgaFppYjEmNtny/v3w89xOydFnnZMcgRRu/EM=\ngithub.com/gobwas/ws v1.2.1 h1:F2aeBZrm2NDsc7vbovKrWSogd4wvfAxg0FQ89/iqOTk=\ngithub.com/gobwas/ws v1.2.1/go.mod h1:hRKAFb8wOxFROYNsT1bqfWnhX+b5MFeJM9r2ZSwg/KY=\ngithub.com/goccy/go-json v0.9.11 h1:/pAaQDLHEoCq/5FFmSKBswWmK6H0e8g4159Kc/X/nqk=\ngithub.com/goccy/go-json v0.9.11/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=\ngithub.com/golang/protobuf v1.3.5/go.mod h1:6O5/vntMXwX2lRkT1hjjk0nAC1IDOTvTlVgjlRvqsdk=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gopacket v1.1.19 h1:ves8RnFZPGiFnTS0uPQStjwru6uO6h+nlr9j6fL7kF8=\ngithub.com/google/gopacket v1.1.19/go.mod h1:iJ8V8n6KS+z2U1A8pUwu8bW5SyEMkXJB8Yo/Vo+TKTo=\ngithub.com/google/pprof v0.0.0-20230817174616-7a8ec2ada47b h1:h9U78+dx9a4BKdQkBBos92HalKpaGKHrp+3Uo6yTodo=\ngithub.com/google/pprof v0.0.0-20230817174616-7a8ec2ada47b/go.mod h1:czg5+yv1E0ZGTi6S6vVK1mke0fV+FaUhNGcd6VRS9Ik=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/websocket v1.4.1/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gorilla/websocket v1.4.2 h1:+/TMaTYc4QFitKJxsQ7Yye35DkWvkdLcvGKqM+x0Ufc=\ngithub.com/gorilla/websocket v1.4.2/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.19.1 h1:/c3QmbOGMGTOumP2iT/rCwB7b0QDGLKzqOmktBjT+Is=\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.19.1/go.mod h1:5SN9VR2LTsRFsrEC6FHgRbTWrTHu6tqPeKxEQv15giM=\ngithub.com/grpc-ecosystem/grpc-opentracing v0.0.0-20180507213350-8e809c8a8645 h1:MJG/KsmcqMwFAkh8mTnAwhyKoB+sTAnY4CACC110tbU=\ngithub.com/grpc-ecosystem/grpc-opentracing v0.0.0-20180507213350-8e809c8a8645/go.mod h1:6iZfnjpejD4L/4DwD7NryNaJyCQdzwWwH2MWhCA90Kw=\ngithub.com/ipostelnik/cli/v2 v2.3.1-0.20210324024421-b6ea8234fe3d h1:PRDnysJ9dF1vUMmEzBu6aHQeUluSQy4eWH3RsSSy/vI=\ngithub.com/ipostelnik/cli/v2 v2.3.1-0.20210324024421-b6ea8234fe3d/go.mod h1:LJmUH05zAU44vOAcrfzZQKsZbVcdbOG8rtL3/XcUArI=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/klauspost/compress v1.10.3/go.mod h1:aoV0uJVorq1K+umq18yTdKaF57EivdYsUV+/s2qKfXs=\ngithub.com/klauspost/compress v1.15.11 h1:Lcadnb3RKGin4FYM/orgq0qde+nc15E5Cbqg4B9Sx9c=\ngithub.com/klauspost/compress v1.15.11/go.mod h1:QPwzmACJjUTFsnSHH934V6woptycfrDDJnH7hvFVbGM=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/leodido/go-urn v1.2.0/go.mod h1:+8+nEpDfqqsY+g338gtMEUOtuK+4dEMhiQEgxpxOKII=\ngithub.com/leodido/go-urn v1.2.1 h1:BqpAaACuzVSgi/VLzGZIobT2z4v53pjosyNd9Yv6n/w=\ngithub.com/leodido/go-urn v1.2.1/go.mod h1:zt4jvISO2HfUBqxjfIshjdMTYS56ZS/qv49ictyFfxY=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.16 h1:bq3VjFmv/sOjHtdEhmkEV4x1AJtvUvOJ2PFAZ5+peKQ=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.4 h1:mmDVorXM7PCGKw94cs5zkfA9PSy5pEvNWRP0ET0TIVo=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.4/go.mod h1:BSXmuO+STAnVfrANrmjBb36TMTDstsz7MSK+HVaYKv4=\ngithub.com/miekg/dns v1.1.58 h1:ca2Hdkz+cDg/7eNF6V56jjzuZ4aCAE+DbVkILdQWG/4=\ngithub.com/miekg/dns v1.1.58/go.mod h1:Ypv+3b/KadlvW9vJfXOTf300O4UqaHFzFCuHz+rPkBY=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/onsi/ginkgo/v2 v2.13.0 h1:0jY9lJquiL8fcf3M4LAXN5aMlS/b2BV86HFFPCPMgE4=\ngithub.com/onsi/ginkgo/v2 v2.13.0/go.mod h1:TE309ZR8s5FsKKpuB1YAQYBzCaAfUgatB/xlT/ETL/o=\ngithub.com/onsi/gomega v1.27.10 h1:naR28SdDFlqrG6kScpT8VWpu1xWY5nJRCF3XaYyBjhI=\ngithub.com/onsi/gomega v1.27.10/go.mod h1:RsS8tutOdbdgzbPtzzATp12yT7kM5I5aElG3evPbQ0M=\ngithub.com/opentracing/opentracing-go v1.2.0 h1:uEJPy/1a5RIPAJ0Ov+OIO8OxWu77jEv+1B0VhjKrZUs=\ngithub.com/opentracing/opentracing-go v1.2.0/go.mod h1:GxEUsuufX4nBwe+T+Wl9TAgYrxe9dPLANfrWvHYVTgc=\ngithub.com/pelletier/go-toml/v2 v2.0.5 h1:ipoSadvV8oGUjnUbMub59IDPPwfxF694nG/jwbMiyQg=\ngithub.com/pelletier/go-toml/v2 v2.0.5/go.mod h1:OMHamSCAODeSsVrwwvcJOaoN0LIUIaFVNZzmWyNfXas=\ngithub.com/philhofer/fwd v1.1.2 h1:bnDivRJ1EWPjUIRXV5KfORO897HTbpFAQddBdE8t7Gw=\ngithub.com/philhofer/fwd v1.1.2/go.mod h1:qkPdfjR2SIEbspLqpe1tO4n5yICnr2DY7mqEx2tUTP0=\ngithub.com/pingcap/errors v0.11.4 h1:lFuQV/oaUMGcD2tqt+01ROSmJs75VG1ToEOkZIZ4nE4=\ngithub.com/pingcap/errors v0.11.4/go.mod h1:Oi8TUi2kEtXXLMJk9l1cGmz20kV3TaQ0usTwv5KuLY8=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v1.19.1 h1:wZWJDwK+NameRJuPGDhlnFgx8e8HN3XHQeLaYJFJBOE=\ngithub.com/prometheus/client_golang v1.19.1/go.mod h1:mP78NwGzrVks5S2H6ab8+ZZGJLZUq1hoULYBAYBw1Ho=\ngithub.com/prometheus/client_model v0.6.0 h1:k1v3CzpSRUTrKMppY35TLwPvxHqBu0bYgxZzqGIgaos=\ngithub.com/prometheus/client_model v0.6.0/go.mod h1:NTQHnmxFpouOD0DpvP4XujX3CdOAGQPoaGhyTchlyt8=\ngithub.com/prometheus/common v0.53.0 h1:U2pL9w9nmJwJDa4qqLQ3ZaePJ6ZTwt7cMD3AG3+aLCE=\ngithub.com/prometheus/common v0.53.0/go.mod h1:BrxBKv3FWBIGXw89Mg1AeBq7FSyRzXWI3l3e7W3RN5U=\ngithub.com/prometheus/procfs v0.12.0 h1:jluTpSng7V9hY0O2R9DzzJHYb2xULk9VTR1V1R/k6Bo=\ngithub.com/prometheus/procfs v0.12.0/go.mod h1:pcuDEFsWDnvcgNzo4EEweacyhjeA9Zk3cnaOZAZEfOo=\ngithub.com/quic-go/quic-go v0.45.0 h1:OHmkQGM37luZITyTSu6ff03HP/2IrwDX1ZFiNEhSFUE=\ngithub.com/quic-go/quic-go v0.45.0/go.mod h1:1dLehS7TIR64+vxGR70GDcatWTOtMX2PUtnKsjbTurI=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/rs/xid v1.2.1/go.mod h1:+uKXf+4Djp6Md1KODXJxgGQPKngRmWyn10oCKFzNHOQ=\ngithub.com/rs/zerolog v1.20.0 h1:38k9hgtUBdxFwE34yS8rTHmHBa4eN16E4DJlv177LNs=\ngithub.com/rs/zerolog v1.20.0/go.mod h1:IzD0RJ65iWH0w97OQQebJEvTZYvsCUm9WVLWBQrJRjo=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tinylib/msgp v1.1.8 h1:FCXC1xanKO4I8plpHGH2P7koL/RzZs12l/+r7vakfm0=\ngithub.com/tinylib/msgp v1.1.8/go.mod h1:qkpG+2ldGg4xRFmx+jfTvZPxfGFhi64BcnL9vkCm/Tw=\ngithub.com/ugorji/go v1.1.7 h1:/68gy2h+1mWMrwZFeD1kQialdSzAb432dtpeJ42ovdo=\ngithub.com/ugorji/go v1.1.7/go.mod h1:kZn38zHttfInRq0xu/PH0az30d+z6vm202qpg1oXVMw=\ngithub.com/ugorji/go/codec v1.1.7/go.mod h1:Ax+UKWsSmolVDwsd+7N3ZtXu+yMGCf907BLYF3GoBXY=\ngithub.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=\ngithub.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.opentelemetry.io/contrib/propagators v0.22.0 h1:KGdv58M2//veiYLIhb31mofaI2LgkIPXXAZVeYVyfd8=\ngo.opentelemetry.io/contrib/propagators v0.22.0/go.mod h1:xGOuXr6lLIF9BXipA4pm6UuOSI0M98U6tsI3khbOiwU=\ngo.opentelemetry.io/otel v1.0.0-RC2/go.mod h1:w1thVQ7qbAy8MHb0IFj8a5Q2QU0l2ksf8u/CN8m3NOM=\ngo.opentelemetry.io/otel v1.26.0 h1:LQwgL5s/1W7YiiRwxf03QGnWLb2HW4pLiAhaA5cZXBs=\ngo.opentelemetry.io/otel v1.26.0/go.mod h1:UmLkJHUAidDval2EICqBMbnAd0/m2vmpf/dAM+fvFs4=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.26.0 h1:1u/AyyOqAWzy+SkPxDpahCNZParHV8Vid1RnI2clyDE=\ngo.opentelemetry.io/otel/exporters/otlp/otlptrace v1.26.0/go.mod h1:z46paqbJ9l7c9fIPCXTqTGwhQZ5XoTIsfeFYWboizjs=\ngo.opentelemetry.io/otel/metric v1.26.0 h1:7S39CLuY5Jgg9CrnA9HHiEjGMF/X2VHvoXGgSllRz30=\ngo.opentelemetry.io/otel/metric v1.26.0/go.mod h1:SY+rHOI4cEawI9a7N1A4nIg/nTQXe1ccCNWYOJUrpX4=\ngo.opentelemetry.io/otel/sdk v1.26.0 h1:Y7bumHf5tAiDlRYFmGqetNcLaVUZmh4iYfmGxtmz7F8=\ngo.opentelemetry.io/otel/sdk v1.26.0/go.mod h1:0p8MXpqLeJ0pzcszQQN4F0S5FVjBLgypeGSngLsmirs=\ngo.opentelemetry.io/otel/trace v1.0.0-RC2/go.mod h1:JPQ+z6nNw9mqEGT8o3eoPTdnNI+Aj5JcxEsVGREIAy4=\ngo.opentelemetry.io/otel/trace v1.26.0 h1:1ieeAUb4y0TE26jUFrCIXKpTuVK7uJGN9/Z/2LP5sQA=\ngo.opentelemetry.io/otel/trace v1.26.0/go.mod h1:4iDxvGDQuUkHve82hJJ8UqrwswHYsZuWCBllGV2U2y0=\ngo.opentelemetry.io/proto/otlp v1.2.0 h1:pVeZGk7nXDC9O2hncA6nHldxEjm6LByfA2aN8IOkz94=\ngo.opentelemetry.io/proto/otlp v1.2.0/go.mod h1:gGpR8txAl5M03pDhMC79G6SdqNV26naRm/KDsgaHD8A=\ngo.uber.org/automaxprocs v1.4.0 h1:CpDZl6aOlLhReez+8S3eEotD7Jx0Os++lemPlMULQP0=\ngo.uber.org/automaxprocs v1.4.0/go.mod h1:/mTEdr7LvHhs0v7mjdxDreTz1OG5zdZGqgOnhWiR/+Q=\ngo.uber.org/mock v0.4.0 h1:VcM4ZOtdbR4f6VXfiOpwpVJDL6lCReaZ6mw31wqh7KU=\ngo.uber.org/mock v0.4.0/go.mod h1:a6FSlNadKUHUa9IP5Vyt1zh4fC7uAwxMutEAscFbkZc=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.23.0 h1:dIJU/v2J8Mdglj/8rJ6UUOM3Zc9zLZxVZwwxMooUSAI=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842 h1:vr/HnozRka3pE4EsMEg1lgkXJkTFJCVUX+S/ZT6wYzM=\ngolang.org/x/exp v0.0.0-20240506185415-9bf2ced13842/go.mod h1:XtvwrStGgqGPLc4cjQfWqZHG1YFdYs6swckp8vpsjnc=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.17.0 h1:zY54UmvipHiNd+pm+m0x9KhZ9hl1/7QNMyxXbc6ICqA=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.25.0 h1:d/OCCoBEUq33pjydKrGQhw7IlUPI2Oylr+8qLx49kac=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/oauth2 v0.18.0 h1:09qnuIAgzdx1XplqJvW6CQqMCtGZykZWcXzPMPUusvI=\ngolang.org/x/oauth2 v0.18.0/go.mod h1:Wf7knwG0MPoWIMMBgFlEaSUDaKskp0dCfrlJRJXbBi8=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191005200804-aed5e4c7ecf9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.20.0 h1:Od9JTbYCk261bKm4M/mw7AklTlFYIa0bIp9BgSm1S8Y=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.20.0 h1:VnkxpohqXaOBYJtBmEppKUG6mXpi+4O6purfc2+sMhw=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.2/go.mod h1:bEr9sfX3Q8Zfm5fL9x+3itogRgK3+ptLWKqgva+5dAk=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.15.0 h1:h1V/4gjBv8v9cjcR6+AR5+/cIYK5N/WAgiv4xlsEtAk=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/time v0.0.0-20191024005414-555d28b269f0/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190828213141-aed303cbaa74/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.21.0 h1:qc0xYgIbsSDt9EyWz05J5wfa7LOVW0YTLOXrqdLAWIw=\ngolang.org/x/tools v0.21.0/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240311132316-a219d84964c2 h1:rIo7ocm2roD9DcFIX67Ym8icoGCKSARAiPljFhh5suQ=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240311132316-a219d84964c2/go.mod h1:O1cOfN1Cy6QEYr7VxtjOyP5AdAuR0aJ/MYZaaof623Y=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237 h1:NnYq6UN9ReLM9/Y01KWNOWyI5xQ9kbIms5GGJVwS/Yc=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240318140521-94a12d6c2237/go.mod h1:WtryC6hu0hhx87FDGxWCDptyssuo68sk10vYjF+T9fY=\ngoogle.golang.org/grpc v1.63.2 h1:MUeiw1B2maTVZthpU5xvASfTh3LDbxHd6IJ6QQVU+xM=\ngoogle.golang.org/grpc v1.63.2/go.mod h1:WAX/8DgncnokcFUldAxq7GeB5DXHDbMF+lLvDomNkRA=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.34.1 h1:9ddQBjfCyZPOHPUiPxpYESBLc+T8P3E+Vo4IbKZgFWg=\ngoogle.golang.org/protobuf v1.34.1/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0 h1:1Lc07Kr7qY4U2YPouBjpCLxpiyxIVoxqXgkXLknAOE8=\ngopkg.in/natefinch/lumberjack.v2 v2.0.0/go.mod h1:l0ndWWf7gzL7RNwBG7wST/UCcT4T24xpD6X8LsfU/+k=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.3/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nnhooyr.io/websocket v1.8.7 h1:usjR2uOr/zjjkVMy0lW+PPohFok7PCow5sDjLgX4P4g=\nnhooyr.io/websocket v1.8.7/go.mod h1:B70DZP8IakI65RVQ51MsWP/8jndNma26DVA/nFSCgW0=\nzombiezen.com/go/capnproto2 v2.18.0+incompatible h1:mwfXZniffG5mXokQGHUJWGnqIBggoPfT/CEwon9Yess=\nzombiezen.com/go/capnproto2 v2.18.0+incompatible/go.mod h1:XO5Pr2SbXgqZwn0m0Ru54QBqpOf4K5AYBO+8LAOBQEQ=\n"
        },
        {
          "name": "hello",
          "type": "tree",
          "content": null
        },
        {
          "name": "ingress",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "ipaccess",
          "type": "tree",
          "content": null
        },
        {
          "name": "logger",
          "type": "tree",
          "content": null
        },
        {
          "name": "management",
          "type": "tree",
          "content": null
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "orchestration",
          "type": "tree",
          "content": null
        },
        {
          "name": "overwatch",
          "type": "tree",
          "content": null
        },
        {
          "name": "packet",
          "type": "tree",
          "content": null
        },
        {
          "name": "postinst.sh",
          "type": "blob",
          "size": 0.1767578125,
          "content": "#!/bin/bash\nset -eu\nln -s /usr/bin/cloudflared /usr/local/bin/cloudflared\nmkdir -p /usr/local/etc/cloudflared/\ntouch /usr/local/etc/cloudflared/.installedFromPackageManager || true\n"
        },
        {
          "name": "postrm.sh",
          "type": "blob",
          "size": 0.1123046875,
          "content": "#!/bin/bash\nset -eu\nrm -f /usr/local/bin/cloudflared\nrm -f /usr/local/etc/cloudflared/.installedFromPackageManager\n"
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "quic",
          "type": "tree",
          "content": null
        },
        {
          "name": "release_pkgs.py",
          "type": "blob",
          "size": 14.30859375,
          "content": "\"\"\"\n    This is a utility for creating deb and rpm packages, signing them \n    and uploading them to a storage and adding metadata to workers KV.\n\n    It has two over-arching responsiblities:\n    1. Create deb and yum repositories from .deb and .rpm files. \n       This is also responsible for signing the packages and generally preparing \n       them to be in an uploadable state.\n    2. Upload these packages to a storage in a format that apt and yum expect.\n\"\"\"\nimport argparse\nimport base64\nimport logging\nimport os\nimport shutil\nfrom pathlib import Path\nfrom subprocess import Popen, PIPE\n\nimport boto3\nimport gnupg\nfrom botocore.client import Config\nfrom botocore.exceptions import ClientError\n\n# The front facing R2 URL to access assets from.\nR2_ASSET_URL = 'https://demo-r2-worker.cloudflare-tunnel.workers.dev/'\n\n\nclass PkgUploader:\n    def __init__(self, account_id, bucket_name, client_id, client_secret):\n        self.account_id = account_id\n        self.bucket_name = bucket_name\n        self.client_id = client_id\n        self.client_secret = client_secret\n\n    def upload_pkg_to_r2(self, filename, upload_file_path):\n        endpoint_url = f\"https://{self.account_id}.r2.cloudflarestorage.com\"\n\n        config = Config(\n            region_name='auto',\n            s3={\n                \"addressing_style\": \"path\",\n            }\n        )\n\n        r2 = boto3.client(\n            \"s3\",\n            endpoint_url=endpoint_url,\n            aws_access_key_id=self.client_id,\n            aws_secret_access_key=self.client_secret,\n            config=config,\n        )\n\n        print(f\"uploading asset: {filename} to {upload_file_path} in bucket{self.bucket_name}...\")\n        try:\n            r2.upload_file(filename, self.bucket_name, upload_file_path)\n        except ClientError as e:\n            raise e\n\n\nclass PkgCreator:\n    \"\"\"\n        The distribution conf is what dictates to reprepro, the debian packaging building\n        and signing tool we use, what distros to support, what GPG key to use for signing\n        and what to call the debian binary etc. This function creates it \"./conf/distributions\".\n\n        origin - name of your package (String)\n        label - label of your package (could be same as the name) (String)\n        release - release you want this to be distributed for (List of Strings)\n        components - could be a channel like main/stable/beta\n        archs - Architecture (List of Strings)\n        description - (String)\n        gpg_key_id - gpg key id of what you want to use to sign the packages.(String) \n    \"\"\"\n\n    def create_distribution_conf(self,\n                                 file_path,\n                                 origin,\n                                 label,\n                                 releases,\n                                 archs,\n                                 components,\n                                 description,\n                                 gpg_key_id):\n        with open(file_path, \"w+\") as distributions_file:\n            for release in releases:\n                distributions_file.write(f\"Origin: {origin}\\n\")\n                distributions_file.write(f\"Label: {label}\\n\")\n                distributions_file.write(f\"Codename: {release}\\n\")\n                archs_list = \" \".join(archs)\n                distributions_file.write(f\"Architectures: {archs_list}\\n\")\n                distributions_file.write(f\"Components: {components}\\n\")\n                distributions_file.write(f\"Description: {description} - {release}\\n\")\n                distributions_file.write(f\"SignWith: {gpg_key_id}\\n\")\n                distributions_file.write(\"\\n\")\n        return distributions_file\n\n    \"\"\"\n        Uses the reprepro tool to generate packages, sign them and create the InRelease as specified\n        by the distribution_conf file. \n\n        This function creates three folders db, pool and dist. \n        db and pool contain information and metadata about builds. We can ignore these.\n        dist: contains all the pkgs and signed releases that are necessary for an apt download.\n    \"\"\"\n\n    def create_deb_pkgs(self, release, deb_file):\n        print(f\"creating deb pkgs: {release} : {deb_file}\")\n        p = Popen([\"reprepro\", \"includedeb\", release, deb_file], stdout=PIPE, stderr=PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n            print(f\"create deb_pkgs result => {out}, {err}\")\n            raise\n\n    def create_rpm_pkgs(self, artifacts_path, gpg_key_name):\n        self._setup_rpm_pkg_directories(artifacts_path, gpg_key_name)\n        p = Popen([\"createrepo_c\", \"./rpm\"], stdout=PIPE, stderr=PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n            print(f\"create rpm_pkgs result => {out}, {err}\")\n            raise\n\n        self._sign_repomd()\n\n    \"\"\"\n        creates a <binary>.repo file with details like so\n        [cloudflared-stable]\n        name=cloudflared-stable\n        baseurl=https://pkg.cloudflare.com/cloudflared/rpm\n        enabled=1\n        type=rpm\n        gpgcheck=1\n        gpgkey=https://pkg.cloudflare.com/cloudflare-main.gpg\n    \"\"\"\n\n    def create_repo_file(self, file_path, binary_name, baseurl, gpgkey_url):\n        with open(os.path.join(file_path, binary_name + '.repo'), \"w+\") as repo_file:\n            repo_file.write(f\"[{binary_name}-stable]\")\n            repo_file.write(f\"{binary_name}-stable\")\n            repo_file.write(f\"baseurl={baseurl}/rpm\")\n            repo_file.write(\"enabled=1\")\n            repo_file.write(\"type=rpm\")\n            repo_file.write(\"gpgcheck=1\")\n            repo_file.write(f\"gpgkey={gpgkey_url}\")\n\n    def _sign_rpms(self, file_path):\n        p = Popen([\"rpm\", \"--define\", f\"_gpg_name {gpg_key_name}\", \"--addsign\", file_path], stdout=PIPE, stderr=PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n            print(f\"rpm sign result result => {out}, {err}\")\n            raise\n\n    def _sign_repomd(self):\n        p = Popen([\"gpg\", \"--batch\", \"--detach-sign\", \"--armor\", \"./rpm/repodata/repomd.xml\"], stdout=PIPE, stderr=PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n            print(f\"sign repomd result => {out}, {err}\")\n            raise\n\n    \"\"\"\n        sets up and signs the RPM directories in the following format:\n        - rpm \n           - aarch64\n           - x86_64\n           - 386\n\n        this assumes the assets are in the format <prefix>-<aarch64/x86_64/386>.rpm\n    \"\"\"\n\n    def _setup_rpm_pkg_directories(self, artifacts_path, gpg_key_name, archs=[\"aarch64\", \"x86_64\", \"386\"]):\n        for arch in archs:\n            for root, _, files in os.walk(artifacts_path):\n                for file in files:\n                    if file.endswith(f\"{arch}.rpm\"):\n                        new_dir = f\"./rpm/{arch}\"\n                        os.makedirs(new_dir, exist_ok=True)\n                        old_path = os.path.join(root, file)\n                        new_path = os.path.join(new_dir, file)\n                        shutil.copyfile(old_path, new_path)\n                        self._sign_rpms(new_path)\n\n    \"\"\"\n        imports gpg keys into the system so reprepro and createrepo can use it to sign packages.\n        it returns the GPG ID after a successful import\n    \"\"\"\n\n    def import_gpg_keys(self, private_key, public_key):\n        gpg = gnupg.GPG()\n        private_key = base64.b64decode(private_key)\n        gpg.import_keys(private_key)\n        public_key = base64.b64decode(public_key)\n        gpg.import_keys(public_key)\n        data = gpg.list_keys(secret=True)\n        return (data[0][\"fingerprint\"], data[0][\"uids\"][0])\n\n    \"\"\"\n        basically rpm --import <key_file>\n        This enables us to sign rpms.\n    \"\"\"\n\n    def import_rpm_key(self, public_key):\n        file_name = \"pb.key\"\n        with open(file_name, \"wb\") as f:\n            public_key = base64.b64decode(public_key)\n            f.write(public_key)\n\n        p = Popen([\"rpm\", \"--import\", file_name], stdout=PIPE, stderr=PIPE)\n        out, err = p.communicate()\n        if p.returncode != 0:\n            print(f\"create rpm import result => {out}, {err}\")\n            raise\n\n\n\"\"\"\n    Walks through a directory and uploads it's assets to R2.\n    directory : root directory to walk through (String).\n    release: release string. If this value is none, a specific release path will not be created \n              and the release will be uploaded to the default path. \n    binary: name of the binary to upload\n\"\"\"\n\n\ndef upload_from_directories(pkg_uploader, directory, release, binary):\n    for root, _, files in os.walk(directory):\n        for file in files:\n            upload_file_name = os.path.join(binary, root, file)\n            if release:\n                upload_file_name = os.path.join(release, upload_file_name)\n            filename = os.path.join(root, file)\n            try:\n                pkg_uploader.upload_pkg_to_r2(filename, upload_file_name)\n            except ClientError as e:\n                logging.error(e)\n                return\n\n\n\"\"\" \n    1. looks into a built_artifacts folder for cloudflared debs\n    2. creates Packages.gz, InRelease (signed) files\n    3. uploads them to Cloudflare R2 \n\n    pkg_creator, pkg_uploader: are instantiations of the two classes above.\n\n    gpg_key_id: is an id indicating the key the package should be signed with. The public key of this id will be \n    uploaded to R2 so it can be presented to apt downloaders.\n\n    release_version: is the cloudflared release version. Only provide this if you want a permanent backup.\n\"\"\"\n\n\ndef create_deb_packaging(pkg_creator, pkg_uploader, releases, gpg_key_id, binary_name, archs, package_component,\n                         release_version):\n    # set configuration for package creation.\n    print(f\"initialising configuration for {binary_name} , {archs}\")\n    Path(\"./conf\").mkdir(parents=True, exist_ok=True)\n    pkg_creator.create_distribution_conf(\n        \"./conf/distributions\",\n        binary_name,\n        binary_name,\n        releases,\n        archs,\n        package_component,\n        f\"apt repository for {binary_name}\",\n        gpg_key_id)\n\n    # create deb pkgs\n    for release in releases:\n        for arch in archs:\n            print(f\"creating deb pkgs for {release} and {arch}...\")\n            pkg_creator.create_deb_pkgs(release, f\"./built_artifacts/cloudflared-linux-{arch}.deb\")\n\n    print(\"uploading latest to r2...\")\n    upload_from_directories(pkg_uploader, \"dists\", None, binary_name)\n    upload_from_directories(pkg_uploader, \"pool\", None, binary_name)\n\n    if release_version:\n        print(f\"uploading versioned release {release_version} to r2...\")\n        upload_from_directories(pkg_uploader, \"dists\", release_version, binary_name)\n        upload_from_directories(pkg_uploader, \"pool\", release_version, binary_name)\n\n\ndef create_rpm_packaging(\n        pkg_creator,\n        pkg_uploader,\n        artifacts_path,\n        release_version,\n        binary_name,\n        gpg_key_name,\n        base_url,\n        gpg_key_url,\n):\n    print(f\"creating rpm pkgs...\")\n    pkg_creator.create_rpm_pkgs(artifacts_path, gpg_key_name)\n    pkg_creator.create_repo_file(artifacts_path, binary_name, base_url, gpg_key_url)\n\n    print(\"uploading latest to r2...\")\n    upload_from_directories(pkg_uploader, \"rpm\", None, binary_name)\n\n    if release_version:\n        print(f\"uploading versioned release {release_version} to r2...\")\n        upload_from_directories(pkg_uploader, \"rpm\", release_version, binary_name)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(\n        description=\"Creates linux releases and uploads them in a packaged format\"\n    )\n\n    parser.add_argument(\n        \"--bucket\", default=os.environ.get(\"R2_BUCKET\"), help=\"R2 Bucket name\"\n    )\n    parser.add_argument(\n        \"--id\", default=os.environ.get(\"R2_CLIENT_ID\"), help=\"R2 Client ID\"\n    )\n    parser.add_argument(\n        \"--secret\", default=os.environ.get(\"R2_CLIENT_SECRET\"), help=\"R2 Client Secret\"\n    )\n    parser.add_argument(\n        \"--account\", default=os.environ.get(\"R2_ACCOUNT_ID\"), help=\"R2 Account Tag\"\n    )\n    parser.add_argument(\n        \"--release-tag\", default=os.environ.get(\"RELEASE_VERSION\"), help=\"Release version you want your pkgs to be\\\n            prefixed with. Leave empty if you don't want tagged release versions backed up to R2.\"\n    )\n\n    parser.add_argument(\n        \"--binary\", default=os.environ.get(\"BINARY_NAME\"), help=\"The name of the binary the packages are for\"\n    )\n\n    parser.add_argument(\n        \"--gpg-private-key\", default=os.environ.get(\"LINUX_SIGNING_PRIVATE_KEY\"), help=\"GPG private key to sign the\\\n            packages\"\n    )\n\n    parser.add_argument(\n        \"--gpg-public-key\", default=os.environ.get(\"LINUX_SIGNING_PUBLIC_KEY\"), help=\"GPG public key used for\\\n            signing packages\"\n    )\n\n    parser.add_argument(\n        \"--gpg-public-key-url\", default=os.environ.get(\"GPG_PUBLIC_KEY_URL\"), help=\"GPG public key url that\\\n            downloaders can use to verify signing\"\n    )\n\n    parser.add_argument(\n        \"--pkg-upload-url\", default=os.environ.get(\"PKG_URL\"), help=\"URL to be used by downloaders\"\n    )\n\n    parser.add_argument(\n        \"--deb-based-releases\", default=[\"any\", \"bookworm\", \"bullseye\", \"buster\", \"noble\", \"jammy\", \"impish\", \"focal\", \"bionic\",\n                                         \"xenial\", \"trusty\"],\n        help=\"list of debian based releases that need to be packaged for\"\n    )\n\n    parser.add_argument(\n        \"--archs\", default=[\"amd64\", \"386\", \"arm64\", \"arm\", \"armhf\"], help=\"list of architectures we want to package for. Note that\\\n            it is the caller's responsiblity to ensure that these debs are already present in a directory. This script\\\n            will not build binaries or create their debs.\"\n    )\n    args = parser.parse_args()\n\n    return args\n\n\nif __name__ == \"__main__\":\n    try:\n        args = parse_args()\n    except Exception as e:\n        logging.exception(e)\n        exit(1)\n\n    pkg_creator = PkgCreator()\n    (gpg_key_id, gpg_key_name) = pkg_creator.import_gpg_keys(args.gpg_private_key, args.gpg_public_key)\n    pkg_creator.import_rpm_key(args.gpg_public_key)\n\n    pkg_uploader = PkgUploader(args.account, args.bucket, args.id, args.secret)\n    print(f\"signing with gpg_key: {gpg_key_id}\")\n    create_deb_packaging(pkg_creator, pkg_uploader, args.deb_based_releases, gpg_key_id, args.binary, args.archs,\n                         \"main\", args.release_tag)\n\n    create_rpm_packaging(\n        pkg_creator,\n        pkg_uploader,\n        \"./built_artifacts\",\n        args.release_tag,\n        args.binary,\n        gpg_key_name,\n        args.gpg_public_key_url,\n        args.pkg_upload_url,\n    )\n"
        },
        {
          "name": "retry",
          "type": "tree",
          "content": null
        },
        {
          "name": "signal",
          "type": "tree",
          "content": null
        },
        {
          "name": "socks",
          "type": "tree",
          "content": null
        },
        {
          "name": "sshgen",
          "type": "tree",
          "content": null
        },
        {
          "name": "stream",
          "type": "tree",
          "content": null
        },
        {
          "name": "supervisor",
          "type": "tree",
          "content": null
        },
        {
          "name": "tlsconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "token",
          "type": "tree",
          "content": null
        },
        {
          "name": "tracing",
          "type": "tree",
          "content": null
        },
        {
          "name": "tunneldns",
          "type": "tree",
          "content": null
        },
        {
          "name": "tunnelrpc",
          "type": "tree",
          "content": null
        },
        {
          "name": "tunnelstate",
          "type": "tree",
          "content": null
        },
        {
          "name": "validation",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "watcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "websocket",
          "type": "tree",
          "content": null
        },
        {
          "name": "wix.json",
          "type": "blob",
          "size": 1.15234375,
          "content": "{\n  \"product\": \"cloudflared\",\n  \"company\": \"cloudflare\",\n  \"license\": \"LICENSE\",\n  \"upgrade-code\": \"23f90fdd-9328-47ea-ab52-5380855a4b12\",\n  \"files\": {\n    \"guid\": \"35e5e858-9372-4449-bf73-1cd6f7267128\",\n    \"items\": [\n      \"cloudflared.exe\"\n    ]\n  },\n  \"env\": {\n    \"guid\": \"6bb74449-d10d-4f4a-933e-6fc9fa006eae\",\n    \"vars\": [\n        {\n          \"name\": \"CFDPATH\",\n          \"value\": \"[INSTALLDIR].\",\n          \"permanent\": \"no\",\n          \"system\": \"yes\",\n          \"action\": \"set\",\n          \"part\": \"all\"\n        }\n    ]\n  },\n  \"shortcuts\": {},\n  \"choco\": {\n    \"description\": \"cloudflared connects your machine or user identity to Cloudflare's global network.\",\n    \"project-url\": \"https://github.com/cloudflare/cloudflared\",\n    \"license-url\": \"https://github.com/cloudflare/cloudflared/blob/master/LICENSE\"\n  },\n  \"hooks\": [\n    {\n      \"command\": \"sc.exe create Cloudflared binPath=\\\"[INSTALLDIR]cloudflared.exe\\\" type=share start=auto DisplayName=\\\"Cloudflared\\\"\",\n      \"when\": \"install\"\n    },\n    {\n      \"command\": \"sc.exe start Cloudflared\",\n      \"when\": \"install\"\n    },\n    {\n      \"command\": \"sc.exe delete Cloudflared\",\n      \"when\": \"uninstall\"\n    }\n  ]\n}"
        }
      ]
    }
  ]
}