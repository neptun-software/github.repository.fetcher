{
  "metadata": {
    "timestamp": 1736567710763,
    "page": 295,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-flutter-desktop/go-flutter",
      "stars": 5885,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0322265625,
          "content": "example/* linguist-vendored=true\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.435546875,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n.DS_Store\n.dart_tool/\n\n.packages\n.pub/\n\nbuild/\n\n.flutter-plugins\n\n# Examples generated files\nexample/simpleDemo/simpleDemo\nexample/stocks/stocks\n\n# sometimes when flutter crashes it creates log files\n*.log\n\n# other crashes report:\ncore.*\n\n.vscode\n.idea\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4794921875,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2019, Pierre Champion\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.048828125,
          "content": "<img src=\"./mascot.png\" width=\"170\" align=\"right\">\n\n# go-flutter - A package that brings Flutter to the desktop\n\n[![Awesome Flutter](https://img.shields.io/badge/Awesome-Flutter-blue.svg?longCache=true&style=flat)](https://github.com/Solido/awesome-flutter)\n[![Documentation](https://godoc.org/github.com/go-flutter-desktop/go-flutter?status.svg)](http://godoc.org/github.com/go-flutter-desktop/go-flutter)\n[![Go Report Card](https://goreportcard.com/badge/github.com/go-flutter-desktop/go-flutter)](https://goreportcard.com/report/github.com/go-flutter-desktop/go-flutter)\n[![Join the chat at https://gitter.im/go-flutter-desktop/go-flutter](https://badges.gitter.im/go-flutter-desktop/go-flutter.svg)](https://gitter.im/go-flutter-desktop/go-flutter?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n## Purpose\n\n[Flutter](http://flutter.io/) allows you to build beautiful native apps on iOS and Android from a single codebase.\n\nThis [unofficial](https://github.com/go-flutter-desktop/go-flutter/issues/191#issuecomment-511384007) project brings Flutter to the desktop through the power of [Go](http://golang.org/) and [GLFW](https://github.com/go-gl/glfw).\n\nThe flutter engine itself doesn't know how to deal with desktop platforms _(eg handling mouse/keyboard input)_. Instead, it exposes an abstraction layer for whatever platform to implement. This project implements the [Flutter's Embedding API](https://github.com/flutter/flutter/wiki/Custom-Flutter-Engine-Embedders) using a single code base that runs on Windows, macOS, and Linux. For rendering, [**GLFW**](https://github.com/go-gl/glfw) fits the job because it provides the right abstractions over the OpenGL's Buffer/Mouse/Keyboard for each platform.\n\nThe choice of [Golang](https://github.com/golang/go) comes from the fact that it has the same tooling on every platform. Plus Golang is a great language because it keeps everything simple and readable, which makes it easy to build cross-platform plugins.\n\n<p align=\"center\">\n  <img src=\"./stocks.jpg\" width=\"650\" align=\"center\" alt=\"Screenshot of the Stocks demo app on macOS\">\n</p>\n\n## Getting started\n\nThe best way to get started is to install [hover](https://github.com/go-flutter-desktop/hover), the official go-flutter tool to set up, build and run Flutter apps on the desktop, including hot-reload.\n\nRead the [hover tutorial](https://github.com/go-flutter-desktop/hover) to run your app on the desktop, or start with [one of our example apps](https://github.com/go-flutter-desktop/examples).\n\nIf you want more in-depth information about go-flutter, read the [wiki](https://github.com/go-flutter-desktop/go-flutter/wiki).\n\n## Supported features\n\n- Linux :penguin:\n- MacOS :apple:\n- Windows :checkered_flag:\n- [**Hot Reload**](https://github.com/go-flutter-desktop/go-flutter/issues/129#issuecomment-513590141)\n- Plugin system\n  - BinaryMessageCodec, BinaryMessageChannel\n  - StandardMessageCodec, JSONMessageCodec\n  - StandardMethodCodec, **MethodChannel**\n- Plugin detection for [supported plugins](https://github.com/go-flutter-desktop/go-flutter/wiki/Create-a-hover-compatible-plugin)\n- Importable as Go library into custom projects\n- UTF-8 Text input\n- Clipboard copy & paste\n- Window title and icon\n- Standard keyboard shortcuts\n  - <kbd>ctrl-c</kbd>  <kbd>ctrl-v</kbd>  <kbd>ctrl-x</kbd>  <kbd>ctrl-a</kbd>\n  - <kbd>Home</kbd>  <kbd>End</kbd>  <kbd>shift-Home</kbd>  <kbd>shift-End</kbd>\n  - <kbd>Left</kbd>  <kbd>ctrl-Left</kbd>  <kbd>ctrl-shift-Left</kbd>\n  - <kbd>Right</kbd>  <kbd>ctrl-Right</kbd>  <kbd>ctrl-shift-Right</kbd>\n  - <kbd>Backspace</kbd>  <kbd>ctrl-Backspace</kbd> <kbd>Delete</kbd>\n- Mouse-over/hovering\n- Mouse-buttons\n- RawKeyboard events\n- Distribution format (windows-msi, mac-dmg, linux-appimage, and more)\n- Cross-compiling using docker :whale:\n\nAre you missing a feature? [Open an issue!](https://github.com/go-flutter-desktop/go-flutter/issues/new)\n\n## Examples\n\nA separate repository contains example Flutter apps that also run on the desktop. Go to [github.com/go-flutter-desktop/examples](https://github.com/go-flutter-desktop/examples) to give them a try.\n\n## Plugins\n\nSome popular plugins are already implemented over at [github.com/go-flutter-desktop/plugins](https://github.com/go-flutter-desktop/plugins).\nIf you have implemented a plugin that you would like to share, feel free to open a PR on the plugins repository!\n\nFor a detailed tutorial on how to create a plugin, read the [wiki](https://github.com/go-flutter-desktop/go-flutter/wiki/Implement-a-plugin).\n\n## Version compatibility\n\n### Flutter version\n\nFlutter itself is a relatively young project. Its framework and engine are updated often. The go-flutter project tries to stay compatible with the [beta channel](https://github.com/flutter/flutter/wiki/Flutter-build-release-channels) of Flutter.\n\n### Go version\n\nUpdating Go is simple and Go [seldomly has backwards-incompatible changes](https://golang.org/doc/go1compat). This project remains compatible with the [latest Go stable release](https://golang.org/dl/).\n\n### GLFW version\n\nThis project uses go-gl/glfw for GLFW v3.3.\n\n## License\n\n[BSD 3-Clause License](LICENSE)\n"
        },
        {
          "name": "accessibility.go",
          "type": "blob",
          "size": 0.5654296875,
          "content": "package flutter\n\nimport \"github.com/go-flutter-desktop/go-flutter/plugin\"\n\ntype accessibilityPlugin struct{}\n\n// hardcoded because there is no swappable renderer interface.\nvar defaultAccessibilityPlugin = &accessibilityPlugin{}\n\nfunc (p *accessibilityPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tchannel := plugin.NewBasicMessageChannel(messenger, \"flutter/accessibility\", plugin.StandardMessageCodec{})\n\t// Ignored: go-flutter doesn't support accessibility events\n\tchannel.HandleFunc(func(_ interface{}) (interface{}, error) { return nil, nil })\n\treturn nil\n}\n"
        },
        {
          "name": "application.go",
          "type": "blob",
          "size": 12.2197265625,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"runtime/debug\"\n\t\"time\"\n\t\"unsafe\"\n\n\t\"github.com/Xuanwo/go-locale\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n\t\"github.com/pkg/errors\"\n\t\"golang.org/x/text/language\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/embedder\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/debounce\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/opengl\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/tasker\"\n)\n\n// Run executes a flutter application with the provided options.\n// given limitations this method must be called by the main function directly.\n//\n// Run(opt) is short for NewApplication(opt).Run()\nfunc Run(opt ...Option) (err error) {\n\treturn NewApplication(opt...).Run()\n}\n\n// Application provides the flutter engine in a user friendly matter.\ntype Application struct {\n\tconfig         config\n\tengine         *embedder.FlutterEngine\n\twindow         *glfw.Window\n\tresourceWindow *glfw.Window\n}\n\n// NewApplication creates a new application with provided options.\nfunc NewApplication(opt ...Option) *Application {\n\tapp := &Application{\n\t\tconfig: newApplicationConfig(),\n\t}\n\n\t// The platformPlugin, textinputPlugin, etc. are currently hardcoded as we\n\t// have a hard link with GLFW. The plugins must be singleton and are\n\t// accessed directly from the flutter package to wire up with glfw. If\n\t// there's going to be a renderer interface, it's init would replace this\n\t// configuration.\n\topt = append(opt, AddPlugin(defaultNavigationPlugin))\n\topt = append(opt, AddPlugin(defaultPlatformPlugin))\n\topt = append(opt, AddPlugin(defaultTextinputPlugin))\n\topt = append(opt, AddPlugin(defaultLifecyclePlugin))\n\topt = append(opt, AddPlugin(defaultKeyeventsPlugin))\n\topt = append(opt, AddPlugin(defaultAccessibilityPlugin))\n\topt = append(opt, AddPlugin(defaultIsolatePlugin))\n\topt = append(opt, AddPlugin(defaultMousecursorPlugin))\n\topt = append(opt, AddPlugin(defaultRestorationPlugin))\n\n\t// apply all configs\n\tfor _, o := range opt {\n\t\to(&app.config)\n\t}\n\n\treturn app\n}\n\nfunc postEmptyEvent() {\n\tdefer func() {\n\t\tp := recover()\n\t\tif p != nil {\n\t\t\tfmt.Printf(\"go-flutter: recovered from panic 'glfw.PostEmptyEvent()': %v\\n\", p)\n\t\t\tdebug.PrintStack()\n\t\t}\n\t}()\n\tglfw.PostEmptyEvent()\n}\n\n// createResourceWindow creates an invisible GLFW window that shares the 'view'\n// window's resource context. This window is used to upload resources in the\n// background. Must be call after the 'view' window is created.\n//\n// Though optional, it is recommended that all embedders set this callback as\n// it will lead to better performance in texture handling.\nfunc createResourceWindow(window *glfw.Window) (*glfw.Window, error) {\n\topengl.GLFWWindowHint()\n\tglfw.WindowHint(glfw.Decorated, glfw.False)\n\tglfw.WindowHint(glfw.Visible, glfw.False)\n\tif runtime.GOOS == \"linux\" {\n\t\t// Skia expects an EGL context on linux (libglvnd)\n\t\tglfw.WindowHint(glfw.ContextCreationAPI, glfw.EGLContextAPI)\n\t}\n\tresourceWindow, err := glfw.CreateWindow(1, 1, \"\", nil, window)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"error creating the resource window\")\n\t}\n\tglfw.DefaultWindowHints()\n\treturn resourceWindow, nil\n}\n\n// Run starts the application and waits for it to finish.\nfunc (a *Application) Run() error {\n\truntime.LockOSThread()\n\n\terr := glfw.Init()\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"glfw init\")\n\t}\n\tdefer glfw.Terminate()\n\n\tvar monitor *glfw.Monitor\n\tswitch a.config.windowMode {\n\tcase WindowModeDefault:\n\t\t// nothing\n\tcase WindowModeMaximize:\n\t\tglfw.WindowHint(glfw.Maximized, glfw.True)\n\tcase WindowModeBorderlessMaximize:\n\t\tglfw.WindowHint(glfw.Maximized, glfw.True)\n\t\tglfw.WindowHint(glfw.Decorated, glfw.False)\n\tcase WindowModeBorderless:\n\t\tglfw.WindowHint(glfw.Decorated, glfw.False)\n\tcase WindowModeBorderlessFullscreen:\n\t\tmonitor = glfw.GetPrimaryMonitor()\n\t\tmode := monitor.GetVideoMode()\n\t\ta.config.windowInitialDimensions.width = mode.Width\n\t\ta.config.windowInitialDimensions.height = mode.Height\n\t\tglfw.WindowHint(glfw.RedBits, mode.RedBits)\n\t\tglfw.WindowHint(glfw.GreenBits, mode.GreenBits)\n\t\tglfw.WindowHint(glfw.BlueBits, mode.BlueBits)\n\t\tglfw.WindowHint(glfw.RefreshRate, mode.RefreshRate)\n\tdefault:\n\t\treturn errors.Errorf(\"invalid window mode %T\", a.config.windowMode)\n\t}\n\n\topengl.GLFWWindowHint()\n\n\t{\n\t\t// TODO(drakirus): Delete this when https://github.com/go-gl/glfw/issues/272 is resolved.\n\t\t// Post an empty event from the main thread before it can happen in a non-main thread,\n\t\t// to work around https://github.com/glfw/glfw/issues/1649.\n\t\tpostEmptyEvent()\n\t}\n\n\tif a.config.windowInitialLocation.xpos != 0 {\n\t\t// To create the window at a specific position, make it initially invisible\n\t\t// using the Visible window hint, set its position and then show it.\n\t\tglfw.WindowHint(glfw.Visible, glfw.False)\n\t}\n\n\tglfw.WindowHint(glfw.ScaleToMonitor, glfw.True)\n\tif a.config.windowAlwaysOnTop {\n\t\tglfw.WindowHint(glfw.Floating, glfw.True)\n\t}\n\tif a.config.windowTransparent {\n\t\tglfw.WindowHint(glfw.TransparentFramebuffer, glfw.True)\n\t}\n\n\tif runtime.GOOS == \"linux\" {\n\t\t// Skia expects an EGL context on linux (libglvnd)\n\t\tglfw.WindowHint(glfw.ContextCreationAPI, glfw.EGLContextAPI)\n\t}\n\n\ta.window, err = glfw.CreateWindow(a.config.windowInitialDimensions.width, a.config.windowInitialDimensions.height, \"Loading..\", monitor, nil)\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"creating glfw window\")\n\t}\n\tdefer a.window.Destroy()\n\tglfw.DefaultWindowHints()\n\n\tif a.config.windowInitialLocation.xpos != 0 {\n\t\ta.window.SetPos(a.config.windowInitialLocation.xpos, a.config.windowInitialLocation.ypos)\n\t\ta.window.Show()\n\t}\n\n\ta.resourceWindow, err = createResourceWindow(a.window)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: WARNING %v\\n\", err)\n\t} else {\n\t\tdefer a.resourceWindow.Destroy()\n\t}\n\n\tif a.config.windowIconProvider != nil {\n\t\timages, err := a.config.windowIconProvider()\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"getting images from icon provider\")\n\t\t}\n\t\ta.window.SetIcon(images)\n\t}\n\n\ta.window.SetTitle(ProjectName)\n\n\tif a.config.windowDimensionLimits.minWidth != 0 {\n\t\ta.window.SetSizeLimits(\n\t\t\ta.config.windowDimensionLimits.minWidth,\n\t\t\ta.config.windowDimensionLimits.minHeight,\n\t\t\ta.config.windowDimensionLimits.maxWidth,\n\t\t\ta.config.windowDimensionLimits.maxHeight,\n\t\t)\n\t}\n\n\t// Create a empty FlutterEngine.\n\ta.engine = embedder.NewFlutterEngine()\n\n\t// Set configuration values to engine.\n\ta.engine.AssetsPath = a.config.flutterAssetsPath\n\ta.engine.IcuDataPath = a.config.icuDataPath\n\ta.engine.ElfSnapshotPath = a.config.elfSnapshotpath\n\n\t// Create a messenger and init plugins\n\tmessenger := newMessenger(a.engine)\n\t// Attach PlatformMessage callback function onto the engine\n\ta.engine.PlatfromMessage = messenger.handlePlatformMessage\n\n\t// Create a TextureRegistry\n\ttexturer := newTextureRegistry(a.engine, a.window)\n\t// Attach TextureRegistry callback function onto the engine\n\ta.engine.GLExternalTextureFrameCallback = texturer.handleExternalTexture\n\n\t// Create a new eventloop\n\teventLoop := newEventLoop(\n\t\tpostEmptyEvent,   // Wakeup GLFW\n\t\ta.engine.RunTask, // Flush tasks\n\t)\n\t// Attach TaskRunner callback functions onto the engine\n\ta.engine.TaskRunnerRunOnCurrentThread = eventLoop.RunOnCurrentThread\n\ta.engine.TaskRunnerPostTask = eventLoop.PostTask\n\n\t// Attach GL callback functions onto the engine\n\ta.engine.GLMakeCurrent = func() bool {\n\t\ta.window.MakeContextCurrent()\n\t\treturn true\n\t}\n\ta.engine.GLClearCurrent = func() bool {\n\t\tglfw.DetachCurrentContext()\n\t\treturn true\n\t}\n\ta.engine.GLPresent = func() bool {\n\t\ta.window.SwapBuffers()\n\t\treturn true\n\t}\n\ta.engine.GLFboCallback = func() int32 {\n\t\treturn 0\n\t}\n\ta.engine.GLMakeResourceCurrent = func() bool {\n\t\tif a.resourceWindow == nil {\n\t\t\treturn false\n\t\t}\n\t\ta.resourceWindow.MakeContextCurrent()\n\t\treturn true\n\t}\n\ta.engine.GLProcResolver = func(procName string) unsafe.Pointer {\n\t\treturn glfw.GetProcAddress(procName)\n\t}\n\n\t// Set the glfw window user pointer to point to the FlutterEngine so that\n\t// callback functions may obtain the FlutterEngine from the glfw window\n\t// user pointer.\n\tflutterEnginePointer := uintptr(unsafe.Pointer(a.engine))\n\tdefer func() {\n\t\truntime.KeepAlive(flutterEnginePointer)\n\t}()\n\ta.window.SetUserPointer(unsafe.Pointer(&flutterEnginePointer))\n\n\t// Start the engine\n\terr = a.engine.Run(unsafe.Pointer(&flutterEnginePointer), a.config.vmArguments)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tlanguageTag, err := locale.Detect()\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to detect locale code: %v\\n\", err)\n\t\tlanguageTag = language.English\n\t}\n\tbase, _ := languageTag.Base()\n\tregion, _ := languageTag.Region()\n\tscriptCode, _ := languageTag.Script()\n\terr = a.engine.UpdateSystemLocale(base.String(), region.String(), scriptCode.String())\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: %v\\n\", err)\n\t}\n\n\t// Register plugins\n\tfor _, p := range a.config.plugins {\n\t\terr = p.InitPlugin(messenger)\n\t\tif err != nil {\n\t\t\treturn errors.Wrap(err, \"failed to initialize plugin \"+fmt.Sprintf(\"%T\", p))\n\t\t}\n\n\t\t// Extra init call for plugins that satisfy the PluginGLFW interface.\n\t\tif glfwPlugin, ok := p.(PluginGLFW); ok {\n\t\t\terr = glfwPlugin.InitPluginGLFW(a.window)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"failed to initialize glfw plugin\"+fmt.Sprintf(\"%T\", p))\n\t\t\t}\n\t\t}\n\n\t\t// Extra init call for plugins that satisfy the PluginTexture interface.\n\t\tif texturePlugin, ok := p.(PluginTexture); ok {\n\t\t\terr = texturePlugin.InitPluginTexture(texturer)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrap(err, \"failed to initialize texture plugin\"+fmt.Sprintf(\"%T\", p))\n\t\t\t}\n\t\t}\n\t}\n\n\t// Change the flutter initial route\n\tinitialRoute := os.Getenv(\"GOFLUTTER_ROUTE\")\n\tif initialRoute != \"\" {\n\t\tdefaultPlatformPlugin.addFrameworkReadyCallback(func() {\n\t\t\tdefaultNavigationPlugin.\n\t\t\t\tchannel.InvokeMethod(\"pushRoute\", initialRoute)\n\t\t})\n\t}\n\n\t// Setup a new windowManager to handle windows pixel ratio's and pointer\n\t// devices.\n\twindowManager := newWindowManager(a.config.forcePixelRatio)\n\t// force first refresh\n\twindowManager.glfwRefreshCallback(a.window)\n\t// Attach glfw window callbacks for refresh and position changes\n\ta.window.SetRefreshCallback(windowManager.glfwRefreshCallback)\n\t// Debounce the position callback.\n\t// This avoid making too much flutter redraw and potentially redundant\n\t// network calls.\n\tglfwDebouceTasker := tasker.New()\n\tdebounced := debounce.New(50 * time.Millisecond)\n\t// SetPosCallback is called when the window is moved, this directly calls\n\t// glfwRefreshCallback in order to redraw and avoid transparent scene.\n\ta.window.SetPosCallback(func(window *glfw.Window, xpos int, ypos int) {\n\t\tdebounced(func() {\n\t\t\tglfwDebouceTasker.Do(func() {\n\t\t\t\twindowManager.glfwRefreshCallback(window)\n\t\t\t})\n\t\t})\n\t})\n\ta.window.SetContentScaleCallback(func(window *glfw.Window, x float32, y float32) {\n\t\twindowManager.glfwRefreshCallback(window)\n\t})\n\n\t// Attach glfw window callbacks for text input\n\tdefaultTextinputPlugin.backOnEscape = a.config.backOnEscape\n\ta.window.SetKeyCallback(\n\t\tfunc(window *glfw.Window, key glfw.Key, scancode int, action glfw.Action, mods glfw.ModifierKey) {\n\t\t\tdefaultTextinputPlugin.glfwKeyCallback(window, key, scancode, action, mods)\n\t\t\tdefaultKeyeventsPlugin.sendKeyEvent(window, key, scancode, action, mods)\n\t\t})\n\ta.window.SetCharCallback(defaultTextinputPlugin.glfwCharCallback)\n\n\t// Attach glfw window callback for iconification\n\ta.window.SetIconifyCallback(defaultLifecyclePlugin.glfwIconifyCallback)\n\n\t// Attach glfw window callbacks for mouse input\n\ta.window.SetCursorEnterCallback(windowManager.glfwCursorEnterCallback)\n\ta.window.SetCursorPosCallback(windowManager.glfwCursorPosCallback)\n\ta.window.SetMouseButtonCallback(windowManager.glfwMouseButtonCallback)\n\ta.window.SetScrollCallback(\n\t\tfunc(window *glfw.Window, xoff float64, yoff float64) {\n\t\t\twindowManager.glfwScrollCallback(window, xoff, yoff, a.config.scrollAmount)\n\t\t})\n\n\t// Shutdown the engine if we return from this function (on purpose or panic)\n\tdefer a.engine.Shutdown()\n\n\t// Handle events until the window indicates we should stop. An event may tell the window to stop, in which case\n\t// we'll exit on next iteration.\n\tfor !a.window.ShouldClose() {\n\t\teventLoop.WaitForEvents(func(duration float64) {\n\t\t\tglfw.WaitEventsTimeout(duration)\n\t\t})\n\n\t\t// Execute tasks that MUST be run in the engine thread (!blocks rendering!)\n\t\tglfwDebouceTasker.ExecuteTasks()\n\t\tmessenger.engineTasker.ExecuteTasks()\n\t\ttexturer.engineTasker.ExecuteTasks()\n\t}\n\n\tfmt.Println(\"go-flutter: closing application\")\n\n\treturn nil\n}\n\n// TODO: app.Start(), app.Wait()?\n"
        },
        {
          "name": "build-constant.go",
          "type": "blob",
          "size": 0.7578125,
          "content": "package flutter\n\n// Compile configuration constants persistent across all flutter.Application.\n// The values of config(option.go) can change between flutter.Run calls, those\n// values contains informations that needs to be access globally, without\n// requiring an flutter.Application.\n//\n// Values overwritten by hover during the 'Compiling 'go-flutter' and\n// plugins' phase.\nvar (\n\t// ProjectVersion contains the version of the build\n\tProjectVersion = \"unknown\"\n\t// ProjectVersion contains the version of the go-flutter been used\n\tPlatformVersion = \"unknown\"\n\t// ProjectName contains the application name\n\tProjectName = \"unknown\"\n\t// ProjectOrganizationName contains the package org name, (Can by set upon flutter create (--org flag))\n\tProjectOrganizationName = \"unknown\"\n)\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 0.208984375,
          "content": "// Package flutter combines the embedder API with GLFW and plugins. Flutter and\n// Go on the desktop.\n//\n// go-flutter is in active development. API's must be considered beta and may\n// be changed.\npackage flutter\n"
        },
        {
          "name": "embedder",
          "type": "tree",
          "content": null
        },
        {
          "name": "event-loop.go",
          "type": "blob",
          "size": 4.1689453125,
          "content": "package flutter\n\nimport (\n\t\"container/heap\"\n\t\"fmt\"\n\t\"math\"\n\t\"time\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/embedder\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/currentthread\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/priorityqueue\"\n)\n\n// EventLoop is a event loop for the main thread that allows for delayed task\n// execution.\ntype EventLoop struct {\n\t// store the task (event) by their priorities\n\tpriorityqueue *priorityqueue.PriorityQueue\n\t// called when a task has been received, used to Wakeup the rendering event loop\n\tpostEmptyEvent func()\n\n\tonExpiredTask func(*embedder.FlutterTask) error\n\n\t// timeout for non-Rendering events that needs to be processed in a polling manner\n\tplatformMessageRefreshRate time.Duration\n\n\t// identifier for the current thread\n\tmainThreadID currentthread.ThreadID\n}\n\nfunc newEventLoop(postEmptyEvent func(), onExpiredTask func(*embedder.FlutterTask) error) *EventLoop {\n\tpq := priorityqueue.NewPriorityQueue()\n\theap.Init(pq)\n\treturn &EventLoop{\n\t\tpriorityqueue:  pq,\n\t\tpostEmptyEvent: postEmptyEvent,\n\t\tonExpiredTask:  onExpiredTask,\n\t\tmainThreadID:   currentthread.ID(),\n\n\t\t// 25 Millisecond is arbitrary value, not too high (adds too much delay to\n\t\t// platform messages) and not too low (heavy CPU consumption).\n\t\t// This value isn't related to FPS, as rendering events are process in a\n\t\t// waiting manner.\n\t\t// Platform message are fetched from the engine every time the rendering\n\t\t// event loop process rendering event (e.g.: moving the cursor on the\n\t\t// window), when no rendering event occur (e.g., window minimized) platform\n\t\t// message are fetch every 25ms.\n\t\tplatformMessageRefreshRate: time.Duration(25) * time.Millisecond,\n\t}\n}\n\n// RunOnCurrentThread return true if tasks posted on the\n// calling thread will be run on that same thread.\nfunc (t *EventLoop) RunOnCurrentThread() bool {\n\treturn currentthread.Equal(currentthread.ID(), t.mainThreadID)\n}\n\n// PostTask posts a Flutter engine tasks to the event loop for delayed execution.\n// PostTask must ALWAYS be called on the same goroutine/thread as `newEventLoop`\nfunc (t *EventLoop) PostTask(task embedder.FlutterTask, targetTimeNanos uint64) {\n\n\ttaskDuration := time.Duration(targetTimeNanos) * time.Nanosecond\n\tengineDuration := time.Duration(embedder.FlutterEngineGetCurrentTime())\n\n\tt.priorityqueue.Lock()\n\titem := &priorityqueue.Item{\n\t\tValue:    task,\n\t\tFireTime: time.Now().Add(taskDuration - engineDuration),\n\t}\n\theap.Push(t.priorityqueue, item)\n\tt.priorityqueue.Unlock()\n\n\tt.postEmptyEvent()\n}\n\n// WaitForEvents waits for an any Rendering or pending Flutter Engine events\n// and returns when either is encountered.\n// Expired engine events are processed\nfunc (t *EventLoop) WaitForEvents(rendererWaitEvents func(float64)) {\n\tnow := time.Now()\n\n\texpiredTasks := make([]*priorityqueue.Item, 0)\n\tvar top *priorityqueue.Item\n\n\tt.priorityqueue.Lock()\n\tfor t.priorityqueue.Len() > 0 {\n\n\t\t// Remove the item from the delayed tasks queue.\n\t\ttop = heap.Pop(t.priorityqueue).(*priorityqueue.Item)\n\n\t\t// If this task (and all tasks after this) has not yet expired, there is\n\t\t// nothing more to do. Quit iterating.\n\t\tif top.FireTime.After(now) {\n\t\t\theap.Push(t.priorityqueue, top) // push the item back into the queue\n\t\t\tbreak\n\t\t}\n\n\t\t// Make a record of the expired task. Do NOT service the task here\n\t\t// because we are still holding onto the task queue mutex. We don't want\n\t\t// other threads to block on posting tasks onto this thread till we are\n\t\t// done processing expired tasks.\n\t\texpiredTasks = append(expiredTasks, top)\n\n\t}\n\thasTask := t.priorityqueue.Len() != 0\n\tt.priorityqueue.Unlock()\n\n\t// Fire expired tasks.\n\tfor _, item := range expiredTasks {\n\t\ttask := item.Value\n\t\tif err := t.onExpiredTask(&task); err != nil {\n\t\t\tfmt.Printf(\"go-flutter: couldn't process task %v: %v\\n\", task, err)\n\t\t}\n\t}\n\n\t// Sleep till the next task needs to be processed. If a new task comes\n\t// along, the rendererWaitEvents will be resolved early because PostTask\n\t// posts an empty event.\n\tif !hasTask {\n\t\trendererWaitEvents(t.platformMessageRefreshRate.Seconds())\n\t} else {\n\t\tif top.FireTime.After(now) {\n\t\t\tdurationWait := math.Min(top.FireTime.Sub(now).Seconds(), t.platformMessageRefreshRate.Seconds())\n\t\t\trendererWaitEvents(durationWait)\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "glfw.go",
          "type": "blob",
          "size": 9.984375,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"unsafe\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/embedder\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n)\n\n// dpPerInch defines the amount of display pixels per inch as defined for Flutter.\nconst dpPerInch = 160.0\n\n// TODO (GeertJohan): better name for this, confusing with 'actual' window\n// managers. Renderer interface? implemented by this type for glfw? type\n// glfwRenderer or glfwManager? All the attaching to glfw.Window must be done\n// during manager init in that case. Cannot be done by Application.\ntype windowManager struct {\n\t// forcedPixelRatio forces the pixelRatio to given value, when value is not zero.\n\tforcedPixelRatio float64\n\n\t// current pointer state\n\tpointerPhase          embedder.PointerPhase\n\tpointerButton         embedder.PointerButtonMouse\n\tpointerCurrentlyAdded bool\n\n\t// caching of ppsc to avoid re-calculating every event\n\tpixelsPerScreenCoordinate float64\n}\n\nfunc newWindowManager(forcedPixelRatio float64) *windowManager {\n\treturn &windowManager{\n\t\tforcedPixelRatio:          forcedPixelRatio,\n\t\tpixelsPerScreenCoordinate: 1.0,\n\t\tpointerPhase:              embedder.PointerPhaseHover,\n\t}\n}\n\nfunc (m *windowManager) sendPointerEvent(window *glfw.Window, phase embedder.PointerPhase, x, y float64) {\n\t// synthesize an PointerPhaseAdd if the pointer isn't already added\n\tif !m.pointerCurrentlyAdded && phase != embedder.PointerPhaseAdd {\n\t\tm.sendPointerEvent(window, embedder.PointerPhaseAdd, x, y)\n\t}\n\n\t// Don't double-add the pointer\n\tif m.pointerCurrentlyAdded && phase == embedder.PointerPhaseAdd {\n\t\treturn\n\t}\n\n\tevent := embedder.PointerEvent{\n\t\tPhase:   phase,\n\t\tX:       x * m.pixelsPerScreenCoordinate,\n\t\tY:       y * m.pixelsPerScreenCoordinate,\n\t\tButtons: m.pointerButton,\n\t}\n\n\tflutterEnginePointer := *(*uintptr)(window.GetUserPointer())\n\tflutterEngine := (*embedder.FlutterEngine)(unsafe.Pointer(flutterEnginePointer))\n\n\t// Always send a pointer event with PhaseMove before an eventual PhaseRemove.\n\t// If x/y on the last move doesn't equal x/y on the PhaseRemove, the remove\n\t// is canceled in Flutter.\n\tif phase == embedder.PointerPhaseRemove {\n\t\tevent.Phase = embedder.PointerPhaseHover\n\t\tflutterEngine.SendPointerEvent(event)\n\t\tevent.Phase = embedder.PointerPhaseRemove\n\t}\n\n\tflutterEngine.SendPointerEvent(event)\n\n\tif phase == embedder.PointerPhaseAdd {\n\t\tm.pointerCurrentlyAdded = true\n\t} else if phase == embedder.PointerPhaseRemove {\n\t\tm.pointerCurrentlyAdded = false\n\t}\n}\n\nfunc (m *windowManager) sendPointerEventButton(window *glfw.Window, phase embedder.PointerPhase) {\n\tx, y := window.GetCursorPos()\n\tevent := embedder.PointerEvent{\n\t\tPhase:      phase,\n\t\tX:          x * m.pixelsPerScreenCoordinate,\n\t\tY:          y * m.pixelsPerScreenCoordinate,\n\t\tSignalKind: embedder.PointerSignalKindNone,\n\t\tButtons:    m.pointerButton,\n\t}\n\tflutterEnginePointer := *(*uintptr)(window.GetUserPointer())\n\tflutterEngine := (*embedder.FlutterEngine)(unsafe.Pointer(flutterEnginePointer))\n\tflutterEngine.SendPointerEvent(event)\n}\n\nfunc (m *windowManager) sendPointerEventScroll(window *glfw.Window, xDelta, yDelta float64) {\n\tx, y := window.GetCursorPos()\n\tevent := embedder.PointerEvent{\n\t\tPhase:        m.pointerPhase,\n\t\tX:            x * m.pixelsPerScreenCoordinate,\n\t\tY:            y * m.pixelsPerScreenCoordinate,\n\t\tSignalKind:   embedder.PointerSignalKindScroll,\n\t\tScrollDeltaX: xDelta,\n\t\tScrollDeltaY: yDelta,\n\t\tButtons:      m.pointerButton,\n\t}\n\n\tflutterEnginePointer := *(*uintptr)(window.GetUserPointer())\n\tflutterEngine := (*embedder.FlutterEngine)(unsafe.Pointer(flutterEnginePointer))\n\n\tflutterEngine.SendPointerEvent(event)\n}\n\nfunc (m *windowManager) glfwCursorEnterCallback(window *glfw.Window, entered bool) {\n\tx, y := window.GetCursorPos()\n\tif entered {\n\t\tm.sendPointerEvent(window, embedder.PointerPhaseAdd, x, y)\n\t\t// the mouse can enter the windows while having button pressed.\n\t\t// if so, don't overwrite the phase.\n\t\tif m.pointerButton == 0 {\n\t\t\tm.pointerPhase = embedder.PointerPhaseHover\n\t\t}\n\t} else {\n\t\t// if the mouse is still in 'phaseMove' outside the window (click-drag\n\t\t// outside). Don't remove the cursor.\n\t\tif m.pointerButton == 0 {\n\t\t\tm.sendPointerEvent(window, embedder.PointerPhaseRemove, x, y)\n\t\t}\n\t}\n}\n\nfunc (m *windowManager) glfwCursorPosCallback(window *glfw.Window, x, y float64) {\n\tm.sendPointerEvent(window, m.pointerPhase, x, y)\n}\n\nfunc (m *windowManager) handleButtonPhase(window *glfw.Window, action glfw.Action, buttons embedder.PointerButtonMouse) {\n\tif action == glfw.Press {\n\t\tm.pointerButton |= buttons\n\t\t// If only one button is pressed then each bits of buttons will be equals\n\t\t// to m.pointerButton.\n\t\tif m.pointerButton == buttons {\n\t\t\tm.sendPointerEventButton(window, embedder.PointerPhaseDown)\n\t\t} else {\n\t\t\t// if any other buttons are already pressed when a new button is pressed,\n\t\t\t// the engine is expecting a Move phase instead of a Down phase.\n\t\t\tm.sendPointerEventButton(window, embedder.PointerPhaseMove)\n\t\t}\n\t\tm.pointerPhase = embedder.PointerPhaseMove\n\t}\n\n\tif action == glfw.Release {\n\t\t// Always send a pointer event with PhaseMove before an eventual\n\t\t// PhaseUp. Even if the last button was released. If x/y on the last\n\t\t// move doesn't equal x/y on the PhaseUp, the click is canceled in\n\t\t// Flutter. On MacOS, the Release event always has y-1 of the last move\n\t\t// event. By sending a PhaseMove here (after the release) we avoid a\n\t\t// difference in x/y.\n\t\tm.sendPointerEventButton(window, embedder.PointerPhaseMove)\n\n\t\tm.pointerButton ^= buttons\n\t\t// If all button are released then m.pointerButton is cleared\n\t\tif m.pointerButton == 0 {\n\t\t\tm.sendPointerEventButton(window, embedder.PointerPhaseUp)\n\t\t\tm.pointerPhase = embedder.PointerPhaseHover\n\t\t} else {\n\t\t\t// if any other buttons are still pressed when one button is released\n\t\t\t// the engine is expecting a Move phase instead of a Up phase.\n\t\t\tm.sendPointerEventButton(window, embedder.PointerPhaseMove)\n\t\t}\n\t}\n}\n\nfunc (m *windowManager) glfwMouseButtonCallback(window *glfw.Window, key glfw.MouseButton, action glfw.Action, mods glfw.ModifierKey) {\n\tswitch key {\n\tcase glfw.MouseButtonLeft:\n\t\tm.handleButtonPhase(window, action, embedder.PointerButtonMousePrimary)\n\tcase glfw.MouseButtonRight:\n\t\tm.handleButtonPhase(window, action, embedder.PointerButtonMouseSecondary)\n\tcase glfw.MouseButtonMiddle:\n\t\tm.handleButtonPhase(window, action, embedder.PointerButtonMouseMiddle)\n\tdefault:\n\t\tm.handleButtonPhase(window, action, 1<<uint(key))\n\t}\n}\n\nfunc (m *windowManager) glfwScrollCallback(window *glfw.Window, xoff float64, yoff float64, scrollAmount float64) {\n\tscrollModifier := -scrollAmount\n\tm.sendPointerEventScroll(window, xoff*scrollModifier, yoff*scrollModifier)\n}\n\n// glfwRefreshCallback is called when the window needs a reresh, this\n// can occur when the window is resized, was covered by another window, etc.\n// When forcedPixelratio is zero, the forcedPixelratio communicated to the\n// Flutter embedder is calculated based on physical and logical screen\n// dimensions.\nfunc (m *windowManager) glfwRefreshCallback(window *glfw.Window) {\n\twidthPx, heightPx := window.GetFramebufferSize()\n\twidth, _ := window.GetSize()\n\tif width == 0 {\n\t\tfmt.Println(\"go-flutter: Cannot calculate pixelsPerScreenCoordinate for zero-width window.\")\n\t\treturn\n\t}\n\tm.pixelsPerScreenCoordinate = float64(widthPx) / float64(width)\n\n\tvar pixelRatio float64\n\tif m.forcedPixelRatio != 0 {\n\t\tpixelRatio = m.forcedPixelRatio\n\t} else {\n\t\tif runtime.GOOS == \"linux\" {\n\t\t\tpixelRatio = m.getPixelRatioLinux(window)\n\t\t} else {\n\t\t\tpixelRatio = m.getPixelRatioOther(window)\n\t\t}\n\t}\n\n\tevent := embedder.WindowMetricsEvent{\n\t\tWidth:      widthPx,\n\t\tHeight:     heightPx,\n\t\tPixelRatio: pixelRatio,\n\t}\n\n\tflutterEnginePointer := *(*uintptr)(window.GetUserPointer())\n\tflutterEngine := (*embedder.FlutterEngine)(unsafe.Pointer(flutterEnginePointer))\n\n\tflutterEngine.SendWindowMetricsEvent(event)\n}\n\n// getPixelRatioOther, getPixelRatioLinux isn't well working on other platform.\n// GLFW window.GetContentScale() works better:\n// https://github.com/go-flutter-desktop/go-flutter/pull/458\nfunc (m *windowManager) getPixelRatioOther(window *glfw.Window) float64 {\n\txscale, _ := window.GetContentScale()\n\treturn float64(xscale)\n}\n\n// getPixelRatioLinux returns the Flutter pixel_ratio is defined as DPI/dp\n// given framebuffer size and the current window information.\n// Same as defined in the official LINUX embedder:\n// https://github.com/flutter/engine/blob/master/shell/platform/glfw/flutter_glfw.cc\n// Fallback to getPixelRatioOther if error occur.\nfunc (m *windowManager) getPixelRatioLinux(window *glfw.Window) float64 {\n\twidthPx, heightPx := window.GetFramebufferSize()\n\n\tvar selectedMonitor *glfw.Monitor\n\twinX, winY := window.GetPos()\n\twinCenterX, winCenterY := winX+widthPx/2, winY+heightPx/2\n\n\tmonitors := glfw.GetMonitors()\n\tfor _, monitor := range monitors {\n\t\tmonX1, monY1 := monitor.GetPos()\n\t\tmonMode := monitor.GetVideoMode()\n\t\tif monMode == nil {\n\t\t\tcontinue\n\t\t}\n\t\tmonX2, monY2 := monX1+monMode.Width, monY1+monMode.Height\n\t\tif (monX1 <= winCenterX && winCenterX <= monX2) &&\n\t\t\t(monY1 <= winCenterY && winCenterY <= monY2) {\n\t\t\tselectedMonitor = monitor\n\t\t\tbreak\n\t\t}\n\t}\n\n\tif selectedMonitor == nil {\n\t\t// when no monitor was selected, try fallback to primary monitor\n\t\t// TODO: ? perhaps select monitor that is \"closest\" to the window ?\n\t\tselectedMonitor = glfw.GetPrimaryMonitor()\n\t}\n\tif selectedMonitor == nil {\n\t\treturn m.getPixelRatioOther(window)\n\t}\n\tselectedMonitorMode := selectedMonitor.GetVideoMode()\n\tif selectedMonitorMode == nil {\n\t\treturn m.getPixelRatioOther(window)\n\t}\n\tselectedMonitorWidthMM, _ := selectedMonitor.GetPhysicalSize()\n\tif selectedMonitorWidthMM == 0 {\n\t\treturn m.getPixelRatioOther(window)\n\t}\n\tmonitorScreenCoordinatesPerInch := float64(selectedMonitorMode.Width) / (float64(selectedMonitorWidthMM) / 25.4)\n\n\tdpi := m.pixelsPerScreenCoordinate * monitorScreenCoordinatesPerInch\n\tpixelRatio := dpi / dpPerInch\n\n\t// If the pixelRatio is lower than 1 use this pixelRatio factor to downscale the ContentScale\n\tif pixelRatio < 1.0 {\n\t\tpixelRatio *= m.getPixelRatioOther(window)\n\t}\n\t// If it is still lower than 1, fallback to a pixelRatio of 1.0\n\tif pixelRatio < 1.0 {\n\t\tpixelRatio = 1.0\n\t}\n\treturn pixelRatio\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.3486328125,
          "content": "module github.com/go-flutter-desktop/go-flutter\n\ngo 1.12\n\nrequire (\n\tgithub.com/Xuanwo/go-locale v1.1.0\n\tgithub.com/davecgh/go-spew v1.1.1\n\tgithub.com/go-gl/gl v0.0.0-20211210172815-726fda9656d6\n\tgithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20220806181222-55e207c401ad\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/stretchr/testify v1.8.1\n\tgolang.org/x/text v0.3.8\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.033203125,
          "content": "github.com/Xuanwo/go-locale v1.1.0 h1:51gUxhxl66oXAjI9uPGb2O0qwPECpriKQb2hl35mQkg=\ngithub.com/Xuanwo/go-locale v1.1.0/go.mod h1:UKrHoZB3FPIk9wIG2/tVSobnHgNnceGSH3Y8DY5cASs=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-gl/gl v0.0.0-20211210172815-726fda9656d6 h1:zDw5v7qm4yH7N8C8uWd+8Ii9rROdgWxQuGoJ9WDXxfk=\ngithub.com/go-gl/gl v0.0.0-20211210172815-726fda9656d6/go.mod h1:9YTyiznxEY1fVinfM7RvRcjRHbw2xLBJ3AAGIT0I4Nw=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20220806181222-55e207c401ad h1:kX51IjbsJPCvzV9jUoVQG9GEUqIq5hjfYzXTqQ52Rh8=\ngithub.com/go-gl/glfw/v3.3/glfw v0.0.0-20220806181222-55e207c401ad/go.mod h1:tQ2UAYgL5IevRw8kRxooKSPJfGvJ9fJQFa0TUsXzTg8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1 h1:EGx4pi6eqNxGaHF6qqu48+N2wcFQ5qg5FXgOdqsJ5d8=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/jtolds/gls v4.20.0+incompatible h1:xdiiI2gbIgH/gLH7ADydsJ1uDOEzR8yvV7C0MuV77Wo=\ngithub.com/jtolds/gls v4.20.0+incompatible/go.mod h1:QJZ7F/aHp+rZTRtaJ1ow/lLfFfVYBRgL+9YlvaHOwJU=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d h1:zE9ykElWQ6/NYmHa3jpm/yHnI4xSofP+UP6SpjHcSeM=\ngithub.com/smartystreets/assertions v0.0.0-20180927180507-b2de0cb4f26d/go.mod h1:OnSkiWE9lh6wB0YB77sQom3nweQdgAjqCqsofrRNTgc=\ngithub.com/smartystreets/goconvey v1.6.7 h1:I6tZjLXD2Q1kjvNbIzB1wvQBsXmKXiVrhpRE8ZjP5jY=\ngithub.com/smartystreets/goconvey v1.6.7/go.mod h1:syvi0/a8iFYH4r/RixwvyeAJjdLS9QV7WQ/tjFTllLA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211023085530-d6a326fbbf70/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8 h1:nAL+RVCQ9uMn3vJZbV+MRnydTJFPf8qqY42YiA6MrqY=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190328211700-ab21143f2384/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "isolate.go",
          "type": "blob",
          "size": 0.5224609375,
          "content": "package flutter\n\nimport \"github.com/go-flutter-desktop/go-flutter/plugin\"\n\ntype isolatePlugin struct{}\n\n// hard-coded because there is no swappable renderer interface.\nvar defaultIsolatePlugin = &isolatePlugin{}\n\nfunc (p *isolatePlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tchannel := plugin.NewBasicMessageChannel(messenger, \"flutter/isolate\", plugin.StringCodec{})\n\t// Ignored: go-flutter doesn't support isolate events\n\tchannel.HandleFunc(func(_ interface{}) (interface{}, error) { return nil, nil })\n\treturn nil\n}\n"
        },
        {
          "name": "key-events.go",
          "type": "blob",
          "size": 1.595703125,
          "content": "package flutter\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/internal/keyboard\"\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n)\n\nconst keyEventChannelName = \"flutter/keyevent\"\n\n// keyeventPlugin implements flutter.Plugin and handles method calls to\n// flutter/keyevent channel.\n// The sent keyevents are RawKeyEventDataLinux on linux and windows\n// The sent keyevents are RawKeyEventDataMacOs on darwin (needs a conversion layer)\ntype keyeventPlugin struct {\n\tchannel *plugin.BasicMessageChannel\n}\n\nvar defaultKeyeventsPlugin = &keyeventPlugin{}\n\nfunc (p *keyeventPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tp.channel = plugin.NewBasicMessageChannel(messenger, keyEventChannelName, keyEventJSONMessageCodec{})\n\treturn nil\n}\n\ntype keyEventJSONMessageCodec struct{}\n\n// EncodeMessage encodes a keyEventMessage to a slice of bytes.\nfunc (j keyEventJSONMessageCodec) EncodeMessage(message interface{}) (binaryMessage []byte, err error) {\n\treturn json.Marshal(message)\n}\n\n// send-only channel\nfunc (j keyEventJSONMessageCodec) DecodeMessage(binaryMessage []byte) (message interface{}, err error) {\n\treturn message, err\n}\n\nfunc (p *keyeventPlugin) sendKeyEvent(window *glfw.Window, key glfw.Key, scancode int, action glfw.Action, mods glfw.ModifierKey) {\n\tevent, err := keyboard.Normalize(key, scancode, mods, action)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to Normalize key event: %v\", err)\n\t\treturn\n\t}\n\n\terr = p.channel.Send(event)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: Failed to send raw_keyboard event %v: %v\\n\", event, err)\n\t}\n}\n"
        },
        {
          "name": "lifecycle.go",
          "type": "blob",
          "size": 0.9833984375,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n)\n\nconst lifecycleChannelName = \"flutter/lifecycle\"\n\n// lifecyclePlugin implements flutter.Plugin and handles method calls to the\n// flutter/lifecycle channel.\ntype lifecyclePlugin struct {\n\tchannel *plugin.BasicMessageChannel\n}\n\n// all hardcoded because theres not pluggable renderer system.\nvar defaultLifecyclePlugin = &lifecyclePlugin{}\n\nfunc (p *lifecyclePlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tp.channel = plugin.NewBasicMessageChannel(messenger, lifecycleChannelName, plugin.StringCodec{})\n\treturn nil\n}\n\nfunc (p *lifecyclePlugin) glfwIconifyCallback(w *glfw.Window, iconified bool) {\n\tvar state string\n\tswitch iconified {\n\tcase true:\n\t\tstate = \"AppLifecycleState.paused\"\n\tcase false:\n\t\tstate = \"AppLifecycleState.resumed\"\n\t}\n\terr := p.channel.Send(state)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: Failed to send lifecycle event %s: %v\\n\", state, err)\n\t}\n}\n"
        },
        {
          "name": "mascot.png",
          "type": "blob",
          "size": 92.0361328125,
          "content": null
        },
        {
          "name": "messenger.go",
          "type": "blob",
          "size": 4.0087890625,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"runtime\"\n\t\"sync\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/embedder\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/tasker\"\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n)\n\ntype messenger struct {\n\tengine *embedder.FlutterEngine\n\n\tchannels     map[string]plugin.ChannelHandlerFunc\n\tchannelsLock sync.RWMutex\n\n\t// engineTasker holds tasks which must be executed in the engine thread\n\tengineTasker *tasker.Tasker\n}\n\nvar _ plugin.BinaryMessenger = &messenger{}\n\nfunc newMessenger(engine *embedder.FlutterEngine) *messenger {\n\treturn &messenger{\n\t\tengine:       engine,\n\t\tchannels:     make(map[string]plugin.ChannelHandlerFunc),\n\t\tengineTasker: tasker.New(),\n\t}\n}\n\n// SendWithReply pushes a binary message on a channel to the Flutter side and\n// wait for a reply.\n// NOTE: If no value are returned by the flutter handler, the function will\n// wait forever. In case you don't want to wait for reply, use Send.\nfunc (m *messenger) SendWithReply(channel string, binaryMessage []byte) (binaryReply []byte, err error) {\n\treply := make(chan []byte)\n\tdefer close(reply)\n\tcallbackHandle := &embedder.DataCallback{\n\t\tHandle: func(binaryMessage []byte) {\n\t\t\treply <- binaryMessage\n\t\t},\n\t}\n\tdefer runtime.KeepAlive(callbackHandle)\n\tresponseHandle, err := m.engine.CreatePlatformMessageResponseHandle(callbackHandle)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer m.engine.ReleasePlatformMessageResponseHandle(responseHandle)\n\n\tmsg := &embedder.PlatformMessage{\n\t\tChannel:        channel,\n\t\tMessage:        binaryMessage,\n\t\tResponseHandle: responseHandle,\n\t}\n\n\tif m.engine.TaskRunnerRunOnCurrentThread() {\n\t\terr = m.engine.SendPlatformMessage(msg)\n\t} else {\n\t\treplyErr := make(chan error)\n\t\tdefer close(replyErr)\n\n\t\tpostEmptyEvent()\n\t\tgo m.engineTasker.Do(func() {\n\t\t\treplyErr <- m.engine.SendPlatformMessage(msg)\n\t\t})\n\t\terr = <-replyErr\n\t}\n\n\t// wait for a reply and return\n\treturn <-reply, nil\n}\n\n// Send pushes a binary message on a channel to the Flutter side without\n// expecting replies.\nfunc (m *messenger) Send(channel string, binaryMessage []byte) (err error) {\n\tmsg := &embedder.PlatformMessage{\n\t\tChannel: channel,\n\t\tMessage: binaryMessage,\n\t}\n\n\tif m.engine.TaskRunnerRunOnCurrentThread() {\n\t\terr = m.engine.SendPlatformMessage(msg)\n\t} else {\n\t\treplyErr := make(chan error)\n\t\tdefer close(replyErr)\n\n\t\tpostEmptyEvent()\n\t\tgo m.engineTasker.Do(func() {\n\t\t\treplyErr <- m.engine.SendPlatformMessage(msg)\n\t\t})\n\t\terr = <-replyErr\n\t}\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// SetChannelHandler satisfies plugin.BinaryMessenger\nfunc (m *messenger) SetChannelHandler(channel string, channelHandler plugin.ChannelHandlerFunc) {\n\tm.channelsLock.Lock()\n\tif channelHandler == nil {\n\t\tdelete(m.channels, channel)\n\t} else {\n\t\tm.channels[channel] = channelHandler\n\t}\n\tm.channelsLock.Unlock()\n}\n\nfunc (m *messenger) handlePlatformMessage(message *embedder.PlatformMessage) {\n\tm.channelsLock.RLock()\n\tchannelHander := m.channels[message.Channel]\n\tm.channelsLock.RUnlock()\n\n\tif channelHander == nil {\n\t\t// print a log, but continue on to send a nil reply when required\n\t\tfmt.Println(\"go-flutter: no handler found for channel \" + message.Channel)\n\t\treturn\n\t}\n\n\tvar err error\n\terr = channelHander(message.Message, responseSender{\n\t\tengine:       m.engine,\n\t\tmessage:      message,\n\t\tengineTasker: m.engineTasker,\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: handling message on channel \"+message.Channel+\" failed: %v\\n\", err)\n\t}\n}\n\ntype responseSender struct {\n\tengine       *embedder.FlutterEngine\n\tmessage      *embedder.PlatformMessage\n\tengineTasker *tasker.Tasker\n}\n\nfunc (r responseSender) Send(binaryReply []byte) {\n\tif !r.message.ExpectsResponse() {\n\t\treturn // quick path when no response should be sent\n\t}\n\n\t// TODO: detect multiple responses on the same message and spam the log\n\t// about it.\n\n\tpostEmptyEvent()\n\tgo r.engineTasker.Do(func() {\n\t\terr := r.engine.SendPlatformMessageResponse(r.message.ResponseHandle, binaryReply)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"go-flutter: failed sending response for message on channel '%s': %v\", r.message.Channel, err)\n\t\t}\n\t})\n}\n"
        },
        {
          "name": "mousecursor.go",
          "type": "blob",
          "size": 1.9716796875,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n)\n\nconst mousecursorChannelName = \"flutter/mousecursor\"\n\n// mousecursorPlugin implements flutter.Plugin and handles method calls to the\n// flutter/mousecursor channel.\ntype mousecursorPlugin struct {\n\twindow     *glfw.Window\n\tlastCursor *glfw.Cursor\n}\n\nvar defaultMousecursorPlugin = &mousecursorPlugin{}\n\nfunc (p *mousecursorPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tchannel := plugin.NewMethodChannel(messenger, mousecursorChannelName, plugin.StandardMethodCodec{})\n\tchannel.HandleFuncSync(\"activateSystemCursor\", p.handleActivateSystemCursor)\n\treturn nil\n}\nfunc (p *mousecursorPlugin) InitPluginGLFW(window *glfw.Window) error {\n\tp.window = window\n\treturn nil\n}\n\nfunc (p *mousecursorPlugin) handleActivateSystemCursor(arguments interface{}) (reply interface{}, err error) {\n\targs := arguments.(map[interface{}]interface{})\n\tvar cursor *glfw.Cursor\n\tif args[\"kind\"] == \"none\" {\n\t\tp.window.SetInputMode(glfw.CursorMode, glfw.CursorHidden)\n\t} else {\n\t\tp.window.SetInputMode(glfw.CursorMode, glfw.CursorNormal)\n\t}\n\tswitch kind := args[\"kind\"]; {\n\tcase kind == \"none\" || kind == \"basic\":\n\t\t// nil cursor resets to standard arrow cursor\n\tcase kind == \"forbidden\" || kind == \"grab\" || kind == \"grabbing\":\n\t\t// nil cursor resets to standard arrow cursor\n\t\t// go-gl GLFW currently (latest tagged v3.3 version) has no cursors for \"forbidden\", \"grab\" and \"grabbing\"\n\t\t// TODO: Wait for https://github.com/glfw/glfw/commit/7dbdd2e6a5f01d2a4b377a197618948617517b0e to appear in go-gl GLFW and implement the \"forbidden\" cursor\n\tcase kind == \"click\":\n\t\tcursor = glfw.CreateStandardCursor(glfw.HandCursor)\n\tcase kind == \"text\":\n\t\tcursor = glfw.CreateStandardCursor(glfw.IBeamCursor)\n\tdefault:\n\t\treturn nil, fmt.Errorf(\"cursor kind %s not implemented\", args[\"kind\"])\n\t}\n\tp.window.SetCursor(cursor)\n\tif p.lastCursor != nil {\n\t\tp.lastCursor.Destroy()\n\t}\n\tp.lastCursor = cursor\n\treturn nil, nil\n}\n"
        },
        {
          "name": "navigation.go",
          "type": "blob",
          "size": 1.0546875,
          "content": "package flutter\n\nimport (\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n)\n\nconst navigationChannelName = \"flutter/navigation\"\n\n// navigationPlugin implements flutter.Plugin and handles method calls to the\n// flutter/navigation channel.\ntype navigationPlugin struct {\n\tchannel *plugin.MethodChannel\n}\n\n// all hardcoded because theres not pluggable renderer system.\nvar defaultNavigationPlugin = &navigationPlugin{}\n\nfunc (p *navigationPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tp.channel = plugin.NewMethodChannel(messenger, navigationChannelName, plugin.JSONMethodCodec{})\n\n\t// Ignored: This information isn't properly formated to set the window.SetTitle\n\tp.channel.HandleFuncSync(\"routeUpdated\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\n\t// Currently ignored on platforms other than web\n\tp.channel.HandleFuncSync(\"selectSingleEntryHistory\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\tp.channel.HandleFuncSync(\"routeInformationUpdated\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\n\treturn nil\n}\n"
        },
        {
          "name": "option.go",
          "type": "blob",
          "size": 7.3017578125,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"image\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/internal/execpath\"\n)\n\ntype config struct {\n\tflutterAssetsPath string\n\ticuDataPath       string\n\telfSnapshotpath   string\n\tvmArguments       []string\n\n\twindowIconProvider      func() ([]image.Image, error)\n\twindowInitialDimensions windowDimensions\n\twindowInitialLocation   windowLocation\n\twindowDimensionLimits   windowDimensionLimits\n\twindowMode              windowMode\n\twindowAlwaysOnTop       bool\n\twindowTransparent       bool\n\n\tbackOnEscape bool\n\n\tforcePixelRatio float64\n\tscrollAmount    float64\n\n\tplugins []Plugin\n}\n\ntype windowDimensions struct {\n\twidth  int\n\theight int\n}\n\ntype windowLocation struct {\n\txpos int\n\typos int\n}\n\ntype windowDimensionLimits struct {\n\tminWidth  int\n\tminHeight int\n\tmaxWidth  int\n\tmaxHeight int\n}\n\n// newApplicationConfig define the default configuration values for a new\n// Application. These values may be changed at any time.\nfunc newApplicationConfig() config {\n\texecPath, err := execpath.ExecPath()\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to resolve path for executable: %v\", err)\n\t\tos.Exit(1)\n\t}\n\treturn config{\n\t\twindowInitialDimensions: windowDimensions{\n\t\t\twidth:  800,\n\t\t\theight: 600,\n\t\t},\n\t\twindowMode:        WindowModeDefault,\n\t\twindowAlwaysOnTop: false,\n\t\twindowTransparent: false,\n\t\tscrollAmount:      100.0,\n\n\t\tbackOnEscape: true,\n\n\t\t// Sane configuration values for the engine.\n\t\tflutterAssetsPath: filepath.Join(filepath.Dir(execPath), \"flutter_assets\"),\n\t\ticuDataPath:       filepath.Join(filepath.Dir(execPath), \"icudtl.dat\"),\n\t\t// only required for AOT app.\n\t\telfSnapshotpath: filepath.Join(filepath.Dir(execPath), \"libapp.so\"),\n\t}\n}\n\n// Option for Application\ntype Option func(*config)\n\n// ProjectAssetsPath specify the flutter assets directory.\nfunc ProjectAssetsPath(p string) Option {\n\t_, err := os.Stat(p)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to stat flutter assets path: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\treturn func(c *config) {\n\t\tc.flutterAssetsPath = p\n\t}\n}\n\n// ApplicationELFSnapshotPath specify the path to the ELF AOT snapshot.\n// only required by AOT.\nfunc ApplicationELFSnapshotPath(p string) Option {\n\t_, err := os.Stat(p)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to stat ELF snapshot path: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\treturn func(c *config) {\n\t\tc.elfSnapshotpath = p\n\t}\n}\n\n// ApplicationICUDataPath specify the path to the ICUData.\nfunc ApplicationICUDataPath(p string) Option {\n\t_, err := os.Stat(p)\n\tif err != nil {\n\t\tfmt.Printf(\"go-flutter: failed to stat icu data path: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\treturn func(c *config) {\n\t\tc.icuDataPath = p\n\t}\n}\n\n// OptionVMArguments specify the arguments to the Dart VM.\nfunc OptionVMArguments(a []string) Option {\n\treturn func(c *config) {\n\t\t// First should be argument is argv[0]\n\t\tc.vmArguments = append([]string{\"\"}, a...)\n\t}\n}\n\n// WindowInitialDimensions specify the startup's dimension of the window.\nfunc WindowInitialDimensions(width, height int) Option {\n\tif width < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for width, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\tif height < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for height, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\n\treturn func(c *config) {\n\t\tc.windowInitialDimensions.width = width\n\t\tc.windowInitialDimensions.height = height\n\t}\n}\n\n// WindowInitialLocation specify the startup's position of the window.\n// Location, in screen coordinates, of the upper-left corner of the client area\n// of the window.\nfunc WindowInitialLocation(xpos, ypos int) Option {\n\tif xpos < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for xpos location, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\tif ypos < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for ypos location, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\n\treturn func(c *config) {\n\t\tc.windowInitialLocation.xpos = xpos\n\t\tc.windowInitialLocation.ypos = ypos\n\t}\n}\n\n// WindowDimensionLimits specify the dimension limits of the window.\n// Does not work when the window is fullscreen or not resizable.\nfunc WindowDimensionLimits(minWidth, minHeight, maxWidth, maxHeight int) Option {\n\tif minWidth < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for minWidth, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\tif minHeight < 1 {\n\t\tfmt.Println(\"go-flutter: invalid initial value for minHeight, must be 1 or greater.\")\n\t\tos.Exit(1)\n\t}\n\tif maxWidth < minWidth {\n\t\tfmt.Println(\"go-flutter: invalid initial value for maxWidth, must be greater or equal to minWidth.\")\n\t\tos.Exit(1)\n\t}\n\tif maxHeight < minHeight {\n\t\tfmt.Println(\"go-flutter: invalid initial value for maxHeight, must be greater or equal to minHeight.\")\n\t\tos.Exit(1)\n\t}\n\n\treturn func(c *config) {\n\t\tc.windowDimensionLimits.minWidth = minWidth\n\t\tc.windowDimensionLimits.minHeight = minHeight\n\t\tc.windowDimensionLimits.maxWidth = maxWidth\n\t\tc.windowDimensionLimits.maxHeight = maxHeight\n\t}\n}\n\n// BackOnEscape controls the mapping of the escape key.\n//\n// If true, pops the current route when escape is pressed.\n// If false, escape is delivered to the application.\nfunc BackOnEscape(backOnEscape bool) Option {\n\treturn func(c *config) {\n\t\tc.backOnEscape = backOnEscape\n\t}\n}\n\n// WindowIcon sets an icon provider func, which is called during window\n// initialization. For tips on the kind of images to provide, see\n// https://godoc.org/github.com/go-gl/glfw/v3.3/glfw#Window.SetIcon\nfunc WindowIcon(iconProivder func() ([]image.Image, error)) Option {\n\treturn func(c *config) {\n\t\tc.windowIconProvider = iconProivder\n\t}\n}\n\n// ForcePixelRatio forces the the scale factor for the screen. By default,\n// go-flutter will calculate the correct pixel ratio for the user, based on\n// their monitor DPI. Setting this option is not advised.\nfunc ForcePixelRatio(ratio float64) Option {\n\treturn func(c *config) {\n\t\tc.forcePixelRatio = ratio\n\t}\n}\n\n// WindowTransparentBackground sets the init window background to be transparent\nfunc WindowTransparentBackground(enabled bool) Option {\n\treturn func(c *config) {\n\t\tc.windowTransparent = enabled\n\t}\n}\n\n// WindowAlwaysOnTop sets the application window to be always on top of other windows\nfunc WindowAlwaysOnTop(enabled bool) Option {\n\treturn func(c *config) {\n\t\tc.windowAlwaysOnTop = enabled\n\t}\n}\n\n// AddPlugin adds a plugin to the flutter application.\nfunc AddPlugin(p Plugin) Option {\n\treturn func(c *config) {\n\t\tc.plugins = append(c.plugins, p)\n\t}\n}\n\n// VirtualKeyboardShow sets an func called when the flutter framework want to\n// show the keyboard.\n// This Option is interesting for people wanting to display the on-screen\n// keyboard on TextField focus.\n// It's up to the flutter developer to implement (or not) this function with\n// the OS related call.\nfunc VirtualKeyboardShow(showCallback func()) Option {\n\treturn func(c *config) {\n\t\t// Reference the callback to the platform plugin (singleton) responsible\n\t\t// for textinput.\n\t\tdefaultTextinputPlugin.virtualKeyboardShow = showCallback\n\t}\n}\n\n// VirtualKeyboardHide sets an func called when the flutter framework want to\n// hide the keyboard.\nfunc VirtualKeyboardHide(hideCallback func()) Option {\n\treturn func(c *config) {\n\t\t// Reference the callback to the platform plugin (singleton) responsible\n\t\t// for textinput.\n\t\tdefaultTextinputPlugin.virtualKeyboardHide = hideCallback\n\t}\n}\n\n// ScrollAmount sets the number of pixels to scroll with the mouse wheel\nfunc ScrollAmount(amount float64) Option {\n\treturn func(c *config) {\n\t\tc.scrollAmount = amount\n\t}\n}\n"
        },
        {
          "name": "platform.go",
          "type": "blob",
          "size": 3.822265625,
          "content": "package flutter\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n\t\"github.com/pkg/errors\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n)\n\n// platformPlugin implements flutter.Plugin and handles method calls to the\n// flutter/platform channel.\ntype platformPlugin struct {\n\tpopBehavior popBehavior\n\n\tmessenger plugin.BinaryMessenger\n\twindow    *glfw.Window\n\n\t// flutterInitialized is used as callbacks to know when the flutter framework\n\t// is running and ready to process upstream plugin calls.\n\t// (It usually takes ~10 rendering frame).\n\t// flutterInitialized is trigger when the plugin \"flutter/platform\" received\n\t// a message from \"SystemChrome.setApplicationSwitcherDescription\".\n\tflutterInitialized []func()\n}\n\n// hardcoded because there is no swappable renderer interface.\nvar defaultPlatformPlugin = &platformPlugin{\n\tpopBehavior: PopBehaviorNone,\n}\n\nvar _ PluginGLFW = &platformPlugin{} // compile-time type check\n\nfunc (p *platformPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tp.messenger = messenger\n\tchannel := plugin.NewMethodChannel(p.messenger, \"flutter/platform\", plugin.JSONMethodCodec{})\n\n\tchannel.HandleFuncSync(\"Clipboard.setData\", p.handleClipboardSetData)\n\tchannel.HandleFuncSync(\"Clipboard.getData\", p.handleClipboardGetData)\n\tchannel.HandleFuncSync(\"Clipboard.hasStrings\", p.handleClipboardHasString)\n\n\tchannel.HandleFuncSync(\"SystemNavigator.pop\", p.handleSystemNavigatorPop)\n\tchannel.HandleFunc(\"SystemChrome.setApplicationSwitcherDescription\", p.handleWindowSetTitle)\n\n\t// Ignored: Desktop's don't have system overlays\n\tchannel.HandleFuncSync(\"SystemChrome.setSystemUIOverlayStyle\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: Desktop's don't have haptic feedback\n\tchannel.HandleFuncSync(\"HapticFeedback.vibrate\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: Desktop's don't play sound on every clicks\n\tchannel.HandleFuncSync(\"SystemSound.play\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\n\treturn nil\n}\n\nfunc (p *platformPlugin) InitPluginGLFW(window *glfw.Window) (err error) {\n\tp.window = window\n\treturn nil\n}\n\nfunc (p *platformPlugin) handleClipboardSetData(arguments interface{}) (reply interface{}, err error) {\n\tnewClipboard := struct {\n\t\tText string `json:\"text\"`\n\t}{}\n\terr = json.Unmarshal(arguments.(json.RawMessage), &newClipboard)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode json arguments for handleClipboardSetData\")\n\t}\n\tp.window.SetClipboardString(newClipboard.Text)\n\treturn nil, nil\n}\n\nfunc (p *platformPlugin) handleClipboardGetData(arguments interface{}) (reply interface{}, err error) {\n\trequestedMime := \"\"\n\terr = json.Unmarshal(arguments.(json.RawMessage), &requestedMime)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode json arguments for handleClipboardGetData\")\n\t}\n\tif requestedMime != \"text/plain\" {\n\t\treturn nil, errors.New(\"obtaining mime type \" + requestedMime + \" from clipboard is not yet supported in go-flutter\")\n\t}\n\n\tvar clipText string\n\tclipText = p.window.GetClipboardString()\n\n\treply = struct {\n\t\tText string `json:\"text\"`\n\t}{\n\t\tText: clipText,\n\t}\n\treturn reply, nil\n}\n\nfunc (p *platformPlugin) handleClipboardHasString(arguments interface{}) (reply interface{}, err error) {\n\tvar clipText string\n\tclipText = p.window.GetClipboardString()\n\n\treply = struct {\n\t\tValue bool `json:\"value\"`\n\t}{\n\t\tValue: len(clipText) > 0,\n\t}\n\treturn reply, nil\n}\n\nfunc (p *platformPlugin) handleWindowSetTitle(arguments interface{}) (reply interface{}, err error) {\n\t// triggers flutter framework initialized callbacks\n\tfor _, f := range p.flutterInitialized {\n\t\tf()\n\t}\n\n\treturn nil, nil\n}\n\n// addFrameworkReadyCallback adds a callback which if trigger when the flutter\n// framework is ready.\nfunc (p *platformPlugin) addFrameworkReadyCallback(f func()) {\n\tp.flutterInitialized = append(p.flutterInitialized, f)\n}\n"
        },
        {
          "name": "plugin.go",
          "type": "blob",
          "size": 2.3056640625,
          "content": "package flutter\n\nimport (\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n)\n\n// TODO: move type Plugin into package plugin?\n\n// Plugin defines the interface that each plugin must implement.\n// When InitPlugin is called, the plugin may execute setup operations.\n// The BinaryMessenger is passed to allow the plugin to register channels.\n// A plugin may optionally implement PluginGLFW.\ntype Plugin interface {\n\t// InitPlugin is called during the startup of the flutter application. The\n\t// plugin is responsible for setting up channels using the BinaryMessenger.\n\t// If an error is returned it is printend the application is stopped.\n\tInitPlugin(messenger plugin.BinaryMessenger) error\n}\n\n// PluginGLFW defines the interface for plugins that are GLFW-aware. Plugins may\n// implement this interface to receive access to the *glfw.Window. Note that\n// plugins must still implement the Plugin interface. The call to InitPluginGLFW\n// is made after the call to InitPlugin.\n//\n// PluginGLFW is separated because not all plugins need to know about glfw,\n// Adding glfw.Window to the InitPlugin call would add glfw as dependency to\n// every plugin implementation. Also, this helps in a scenarion where glfw is\n// moved into a separate renderer/glfw package.\n//\n// The PluginGLFW interface is not stable and may change at any time.\ntype PluginGLFW interface {\n\t// Any type inmplementing PluginGLFW must also implement Plugin.\n\tPlugin\n\t// InitPluginGLFW is called after the call to InitPlugin. When an error is\n\t// returned it is printend the application is stopped.\n\tInitPluginGLFW(window *glfw.Window) error\n}\n\n// PluginTexture defines the interface for plugins that needs to create and\n// manage backend textures. Plugins may implement this interface to receive\n// access to the TextureRegistry. Note that plugins must still implement the\n// Plugin interface. The call to PluginTexture is made after the call to\n// PluginGLFW.\n//\n// PluginTexture is separated because not all plugins need to send raw pixel to\n// the Flutter scene.\ntype PluginTexture interface {\n\t// Any type inmplementing PluginTexture must also implement Plugin.\n\tPlugin\n\t// InitPluginTexture is called after the call to InitPlugin. When an error is\n\t// returned it is printend the application is stopped.\n\tInitPluginTexture(registry *TextureRegistry) error\n}\n"
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "pop.go",
          "type": "blob",
          "size": 1.609375,
          "content": "package flutter\n\nimport (\n\t\"github.com/pkg/errors\"\n)\n\n// popBehavior defines how an application should handle the navigation pop\n// event from the flutter side.\ntype popBehavior int\n\nconst (\n\t// PopBehaviorNone means the system navigation pop event is ignored.\n\tPopBehaviorNone popBehavior = iota\n\t// PopBehaviorHide hides the application window on a system navigation pop\n\t// event.\n\tPopBehaviorHide\n\t// PopBehaviorIconify minimizes/iconifies the application window on a system\n\t// navigation pop event.\n\tPopBehaviorIconify\n\t// PopBehaviorClose closes the application on a system navigation pop event.\n\tPopBehaviorClose\n)\n\n// PopBehavior sets the PopBehavior on the application\nfunc PopBehavior(p popBehavior) Option {\n\treturn func(c *config) {\n\t\t// TODO: this is a workarround because there is no renderer interface\n\t\t// yet. We rely on a platform plugin singleton to handle events from the\n\t\t// flutter side. Should go via Application and renderer abstraction\n\t\t// layer.\n\t\t//\n\t\t// Downside of this workarround is that it will configure the pop\n\t\t// behavior for all Application's within the same Go process.\n\t\tdefaultPlatformPlugin.popBehavior = p\n\t}\n}\n\nfunc (p *platformPlugin) handleSystemNavigatorPop(arguments interface{}) (reply interface{}, err error) {\n\tswitch p.popBehavior {\n\tcase PopBehaviorNone:\n\t\treturn nil, nil\n\tcase PopBehaviorHide:\n\t\tp.window.Hide()\n\t\treturn nil, nil\n\tcase PopBehaviorIconify:\n\t\tp.window.Iconify()\n\t\treturn nil, nil\n\tcase PopBehaviorClose:\n\t\tp.window.SetShouldClose(true)\n\t\treturn nil, nil\n\tdefault:\n\t\treturn nil, errors.Errorf(\"unknown pop behavior %T not implemented by platform handler\", p.popBehavior)\n\t}\n}\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.0400390625,
          "content": "{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n"
        },
        {
          "name": "restoration.go",
          "type": "blob",
          "size": 0.6220703125,
          "content": "package flutter\n\nimport (\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n)\n\ntype restorationPlugin struct{}\n\n// all hardcoded because theres not pluggable renderer system.\nvar defaultRestorationPlugin = &restorationPlugin{}\n\nvar _ Plugin = &restorationPlugin{} // compile-time type check\n\nfunc (p *restorationPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tchannel := plugin.NewMethodChannel(messenger, \"flutter/restoration\", plugin.StandardMethodCodec{})\n\t// Ignored: desktop doesn't need application \"restoration\"\n\tchannel.HandleFunc(\"get\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\treturn nil\n}\n"
        },
        {
          "name": "stocks.jpg",
          "type": "blob",
          "size": 78.0390625,
          "content": null
        },
        {
          "name": "text-input.go",
          "type": "blob",
          "size": 9.201171875,
          "content": "package flutter\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"sort\"\n\t\"unicode\"\n\t\"unicode/utf16\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/internal/keyboard\"\n\t\"github.com/go-flutter-desktop/go-flutter/plugin\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n\t\"github.com/pkg/errors\"\n)\n\nconst textinputChannelName = \"flutter/textinput\"\n\n// textinputPlugin implements flutter.Plugin and handles method calls to the\n// flutter/textinput channel.\ntype textinputPlugin struct {\n\tchannel *plugin.MethodChannel\n\n\tclientID   float64\n\tclientConf argSetClientConf\n\ted         argsEditingState\n\n\tbackOnEscape bool\n\n\tvirtualKeyboardShow func()\n\tvirtualKeyboardHide func()\n}\n\n// argSetClientConf is used to define the config of the TextInput. Options used:\n//   The type of information for which to optimize the text input control.\n//   An action the user has requested the text input control to perform.\n//   Configures how the platform keyboard will select an uppercase or lowercase keyboard.\ntype argSetClientConf struct {\n\tInputType struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"inputType\"`\n\tInputAction        string `json:\"inputAction\"`\n\tTextCapitalization string `json:\"textCapitalization\"`\n}\n\n// argsEditingState is used to hold the current TextInput state.\ntype argsEditingState struct {\n\tText              string `json:\"text\"`\n\tutf16Text         []uint16\n\tSelectionBase     int    `json:\"selectionBase\"`\n\tSelectionExtent   int    `json:\"selectionExtent\"`\n\tSelectionAffinity string `json:\"selectionAffinity\"`\n}\n\n// all hardcoded because theres not pluggable renderer system.\nvar defaultTextinputPlugin = &textinputPlugin{}\n\nfunc (p *textinputPlugin) InitPlugin(messenger plugin.BinaryMessenger) error {\n\tp.channel = plugin.NewMethodChannel(messenger, textinputChannelName, plugin.JSONMethodCodec{})\n\tp.channel.HandleFuncSync(\"TextInput.setClient\", p.handleSetClient)\n\tp.channel.HandleFuncSync(\"TextInput.clearClient\", p.handleClearClient)\n\tp.channel.HandleFuncSync(\"TextInput.setEditingState\", p.handleSetEditingState)\n\tp.channel.HandleFunc(\"TextInput.show\", func(_ interface{}) (interface{}, error) {\n\t\tif p.virtualKeyboardShow != nil {\n\t\t\tp.virtualKeyboardShow()\n\t\t}\n\t\treturn nil, nil\n\t})\n\tp.channel.HandleFunc(\"TextInput.hide\", func(_ interface{}) (interface{}, error) {\n\t\tif p.virtualKeyboardHide != nil {\n\t\t\tp.virtualKeyboardHide()\n\t\t}\n\t\treturn nil, nil\n\t})\n\t// Ignored: This information is used by the flutter Web Engine\n\tp.channel.HandleFuncSync(\"TextInput.setStyle\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: Used on MacOS to position accent selection menu\n\tp.channel.HandleFuncSync(\"TextInput.setCaretRect\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: GLFW dosn't support setting the input method of the current cursor location #426\n\tp.channel.HandleFuncSync(\"TextInput.setEditableSizeAndTransform\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: GLFW dosn't support setting the input method of the current cursor location #426\n\tp.channel.HandleFuncSync(\"TextInput.setMarkedTextRect\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\t// Ignored: This information is used by flutter on Android, iOS and web\n\tp.channel.HandleFuncSync(\"TextInput.requestAutofill\", func(_ interface{}) (interface{}, error) { return nil, nil })\n\n\treturn nil\n}\n\nfunc (p *textinputPlugin) handleSetClient(arguments interface{}) (reply interface{}, err error) {\n\targs := []json.RawMessage{}\n\terr = json.Unmarshal(arguments.(json.RawMessage), &args)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode json arguments for handleSetClient\")\n\t}\n\n\tif len(args) < 2 {\n\t\treturn nil, errors.New(\"failed to read client args for handleSetClient\")\n\t}\n\n\terr = json.Unmarshal(args[0], &p.clientID)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode clientID for handleSetClient\")\n\t}\n\n\terr = json.Unmarshal(args[1], &p.clientConf)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode clientConf for handleSetClient\")\n\t}\n\n\treturn nil, nil\n}\n\nfunc (p *textinputPlugin) handleClearClient(arguments interface{}) (reply interface{}, err error) {\n\tp.clientID = 0\n\treturn nil, nil\n}\n\nfunc (p *textinputPlugin) handleSetEditingState(arguments interface{}) (reply interface{}, err error) {\n\tif p.clientID == 0 {\n\t\treturn nil, errors.New(\"cannot set editing state when no client is selected\")\n\t}\n\n\terr = json.Unmarshal(arguments.(json.RawMessage), &p.ed)\n\tif err != nil {\n\t\treturn nil, errors.Wrap(err, \"failed to decode json arguments for handleSetEditingState\")\n\t}\n\n\tp.ed.utf16Text = utf16.Encode([]rune(p.ed.Text))\n\tutf16TextLen := len(p.ed.utf16Text)\n\n\t// sometimes flutter sends invalid cursor position\n\tif p.ed.SelectionBase < 0 ||\n\t\tp.ed.SelectionExtent < 0 ||\n\t\tp.ed.SelectionBase > utf16TextLen ||\n\t\tp.ed.SelectionExtent > utf16TextLen {\n\t\t// set sane default\n\t\tp.ed.SelectionBase = 0\n\t\tp.ed.SelectionExtent = 0\n\t\t// request a new EditingState if text is present in the TextInput\n\t\tif p.ed.Text != \"\" {\n\t\t\terr := p.channel.InvokeMethod(\"TextInputClient.requestExistingInputState\", nil)\n\t\t\treturn nil, err\n\t\t}\n\t\treturn nil, nil\n\t}\n\n\treturn nil, nil\n}\n\nfunc (p *textinputPlugin) glfwCharCallback(w *glfw.Window, char rune) {\n\tif p.clientID == 0 {\n\t\treturn\n\t}\n\t// Opinionated: If a flutter dev uses TextCapitalization.characters\n\t//              in a TextField, that means she/he wants to receive\n\t//              uppercase characters.\n\t// TODO(Drakirus): Handle language-specific case mappings such as Turkish.\n\tif p.clientConf.TextCapitalization == \"TextCapitalization.characters\" {\n\t\tchar = unicode.ToUpper(char)\n\t}\n\tp.addText(char)\n}\n\nfunc (p *textinputPlugin) glfwKeyCallback(window *glfw.Window, key glfw.Key, scancode int, action glfw.Action, mods glfw.ModifierKey) {\n\tif p.backOnEscape && key == glfw.KeyEscape && action == glfw.Press {\n\t\terr := defaultNavigationPlugin.channel.InvokeMethod(\"popRoute\", nil)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"go-flutter: failed to pop route after escape key press: %v\\n\", err)\n\t\t}\n\t\treturn\n\t}\n\n\tif (action == glfw.Repeat || action == glfw.Press) && p.clientID != 0 {\n\n\t\t// Enter\n\t\tif key == glfw.KeyEnter || key == glfw.KeyKPEnter {\n\t\t\tif keyboard.DetectTextInputDoneMod(mods) {\n\t\t\t\t// Indicates that they are done typing in the TextInput\n\t\t\t\tp.performAction(\"TextInputAction.done\")\n\t\t\t\treturn\n\t\t\t} else if p.clientConf.InputType.Name == \"TextInputType.multiline\" {\n\t\t\t\tp.addText('\\n')\n\t\t\t}\n\t\t\t// this action is described by argSetClientConf.\n\t\t\tp.performAction(p.clientConf.InputAction)\n\t\t}\n\t\t// Mapping to some text navigation shortcut that are already implemented in\n\t\t// the flutter framework.\n\t\t// Home\n\t\tif key == glfw.KeyHome {\n\t\t\tdefaultKeyeventsPlugin.sendKeyEvent(window, glfw.KeyLeft, glfw.GetKeyScancode(glfw.KeyLeft), glfw.Press, mods|glfw.ModAlt)\n\t\t\tdefaultKeyeventsPlugin.sendKeyEvent(window, glfw.KeyLeft, glfw.GetKeyScancode(glfw.KeyLeft), glfw.Release, mods|glfw.ModAlt)\n\t\t}\n\t\t// End\n\t\tif key == glfw.KeyEnd {\n\t\t\tdefaultKeyeventsPlugin.sendKeyEvent(window, glfw.KeyRight, glfw.GetKeyScancode(glfw.KeyRight), glfw.Press, mods|glfw.ModAlt)\n\t\t\tdefaultKeyeventsPlugin.sendKeyEvent(window, glfw.KeyRight, glfw.GetKeyScancode(glfw.KeyRight), glfw.Release, mods|glfw.ModAlt)\n\t\t}\n\n\t}\n}\n\nfunc (p *textinputPlugin) addText(text rune) {\n\tp.removeSelectedText()\n\tutf16text := utf16.Encode([]rune{text})\n\tutf16TextLen := len(p.ed.utf16Text) + len(utf16text)\n\tnewText := make([]uint16, 0, utf16TextLen)\n\tnewText = append(newText, p.ed.utf16Text[:p.ed.SelectionBase]...)\n\tnewText = append(newText, utf16text...)\n\tnewText = append(newText, p.ed.utf16Text[p.ed.SelectionBase:]...)\n\tp.ed.utf16Text = newText\n\n\tp.ed.SelectionBase++\n\tp.ed.SelectionExtent = p.ed.SelectionBase\n\tp.updateEditingState()\n}\n\n// UpupdateEditingState updates the TextInput with the current state by invoking\n// TextInputClient.updateEditingState in the flutter framework\nfunc (p *textinputPlugin) updateEditingState() {\n\tp.ed.Text = string(utf16.Decode(p.ed.utf16Text))\n\targuments := []interface{}{\n\t\tp.clientID,\n\t\tp.ed,\n\t}\n\tp.channel.InvokeMethod(\"TextInputClient.updateEditingState\", arguments)\n}\n\n// performAction invokes the TextInputClient performAction method in the flutter\n// framework\nfunc (p *textinputPlugin) performAction(action string) {\n\tp.channel.InvokeMethod(\"TextInputClient.performAction\", []interface{}{\n\t\tp.clientID,\n\t\taction,\n\t})\n}\n\n// performClientAction invokes the TextInputClient performAction of the\n// TextInputAction. The action is described by argSetClientConf.\nfunc (p *textinputPlugin) performTextInputAction() {\n\tp.performAction(p.clientConf.InputAction)\n}\n\n// removeSelectedText do nothing if no text is selected return true if the\n// state needs to updated\nfunc (p *textinputPlugin) removeSelectedText() bool {\n\tselectionIndexStart, selectionIndexEnd := p.getSelectedText()\n\tif selectionIndexStart != selectionIndexEnd {\n\t\tp.ed.utf16Text = append(p.ed.utf16Text[:selectionIndexStart], p.ed.utf16Text[selectionIndexEnd:]...)\n\t\tp.ed.SelectionBase = selectionIndexStart\n\t\tp.ed.SelectionExtent = selectionIndexStart\n\t\treturn true\n\t}\n\treturn false\n\n}\n\n// getSelectedText return a tuple containing: (left index of the selection, right index of the\n// selection, the content of the selection)\nfunc (p *textinputPlugin) getSelectedText() (int, int) {\n\tselectionIndex := []int{p.ed.SelectionBase, p.ed.SelectionExtent}\n\tsort.Ints(selectionIndex)\n\treturn selectionIndex[0],\n\t\tselectionIndex[1]\n}\n"
        },
        {
          "name": "texture-registry.go",
          "type": "blob",
          "size": 4.0224609375,
          "content": "package flutter\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\n\t\"github.com/go-flutter-desktop/go-flutter/embedder\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/opengl\"\n\t\"github.com/go-flutter-desktop/go-flutter/internal/tasker\"\n\t\"github.com/go-gl/glfw/v3.3/glfw\"\n\t\"github.com/pkg/errors\"\n)\n\n// once is used for the lazy initialization of go-gl/gl.\n// The initialization occur on the first requested texture's frame.\nvar once sync.Once\n\n// TextureRegistry is a registry entry for a managed Texture.\ntype TextureRegistry struct {\n\twindow       *glfw.Window\n\tengine       *embedder.FlutterEngine\n\tchannels     map[int64]*externalTextureHanlder\n\tchannelsLock sync.RWMutex\n\n\t// engineTasker holds tasks which must be executed in the engine thread\n\tengineTasker *tasker.Tasker\n\n\ttexture      int64\n\ttexturesLock sync.Mutex\n}\n\ntype externalTextureHanlder struct {\n\t// handle is called when flutter needs the PixelBuffer\n\thandle ExternalTextureHanlderFunc\n\t// gl texture to refer to for this handler\n\ttexture uint32\n}\n\nfunc newTextureRegistry(engine *embedder.FlutterEngine, window *glfw.Window) *TextureRegistry {\n\treturn &TextureRegistry{\n\t\twindow:       window,\n\t\tengine:       engine,\n\t\tchannels:     make(map[int64]*externalTextureHanlder),\n\t\tengineTasker: tasker.New(),\n\t}\n}\n\n// init must happen in engine thread\nfunc (t *TextureRegistry) init() error {\n\tt.window.MakeContextCurrent()\n\t// Important! Call open.Init only under the presence of an active OpenGL context,\n\t// i.e., after MakeContextCurrent.\n\tif err := opengl.Init(); err != nil {\n\t\treturn errors.Wrap(err, \"TextureRegistry gl init failed\")\n\t}\n\treturn nil\n}\n\n// NewTexture creates a new Texture\nfunc (t *TextureRegistry) NewTexture() Texture {\n\tt.texturesLock.Lock()\n\tdefer t.texturesLock.Unlock()\n\tt.texture++\n\treturn Texture{ID: t.texture, registry: t}\n}\n\n// ExternalTextureHanlderFunc describes the function that handles external\n// Texture on a given ID.\ntype ExternalTextureHanlderFunc func(width int, height int) (bool, *PixelBuffer)\n\n// PixelBuffer is an in-memory (RGBA) image.\ntype PixelBuffer struct {\n\t// Pix holds the image's pixels, in R, G, B, A order.\n\tPix []uint8\n\t// Width and Height of the image's bounds\n\tWidth, Height int\n}\n\n// setTextureHandler registers a handler to be invoked when the Flutter\n// application want to get a PixelBuffer to draw into the scene.\n//\n// Registration overwrites any previous registration for the same textureID\n// name. Use nil as handler to deregister.\nfunc (t *TextureRegistry) setTextureHandler(textureID int64, handler ExternalTextureHanlderFunc) {\n\tt.channelsLock.Lock()\n\tif handler == nil {\n\t\ttexture := t.channels[textureID]\n\t\tif texture != nil {\n\t\t\tt.engineTasker.Do(func() {\n\t\t\t\t// Must run on the main tread\n\t\t\t\topengl.DeleteTextures(1, &texture.texture)\n\t\t\t})\n\t\t}\n\t\tdelete(t.channels, textureID)\n\t} else {\n\t\tt.channels[textureID] = &externalTextureHanlder{\n\t\t\thandle: handler,\n\t\t}\n\t}\n\tt.channelsLock.Unlock()\n}\n\n// handleExternalTexture receive low level C calls to create and/or update the\n// content of a OpenGL TexImage2D.\n// Calls must happen on the engine thread, no need to use engineTasker as this\n// function is a callback directly managed by the engine.\nfunc (t *TextureRegistry) handleExternalTexture(textureID int64,\n\twidth int, height int) *embedder.FlutterOpenGLTexture {\n\n\tonce.Do(func() {\n\t\tt.init()\n\t})\n\n\tt.channelsLock.RLock()\n\tregistration, registrationExists := t.channels[textureID]\n\tt.channelsLock.RUnlock()\n\n\tif !registrationExists {\n\t\tfmt.Printf(\"go-flutter: no texture handler found for Texture ID: %v\\n\", textureID)\n\t\treturn nil\n\t}\n\tres, pixelBuffer := registration.handle(width, height)\n\tif !res || pixelBuffer == nil {\n\t\treturn nil\n\t}\n\n\tif len(pixelBuffer.Pix) == 0 {\n\t\treturn nil\n\t}\n\n\tt.window.MakeContextCurrent()\n\n\tif registration.texture == 0 {\n\t\topengl.CreateTexture(&registration.texture)\n\t}\n\n\topengl.BindTexture(registration.texture)\n\n\topengl.TexImage2D(\n\t\tint32(pixelBuffer.Width),\n\t\tint32(pixelBuffer.Height),\n\t\topengl.Ptr(pixelBuffer.Pix),\n\t)\n\n\treturn &embedder.FlutterOpenGLTexture{\n\t\tTarget: opengl.TEXTURE2D,\n\t\tName:   registration.texture,\n\t\tFormat: opengl.RGBA8,\n\t}\n\n}\n"
        },
        {
          "name": "texture.go",
          "type": "blob",
          "size": 1.21875,
          "content": "package flutter\n\nimport (\n\t\"github.com/pkg/errors\"\n)\n\n// Texture is an identifier for texture declaration\ntype Texture struct {\n\tID       int64\n\tregistry *TextureRegistry\n}\n\n// Register registers a textureID with his associated handler\nfunc (t *Texture) Register(handler ExternalTextureHanlderFunc) error {\n\tt.registry.setTextureHandler(t.ID, handler)\n\terr := t.registry.engine.RegisterExternalTexture(t.ID)\n\tif err != nil {\n\t\tt.registry.setTextureHandler(t.ID, nil)\n\t\treturn errors.Errorf(\"'go-flutter' couldn't register texture with id: '%v': %v\", t.ID, err)\n\t}\n\treturn nil\n}\n\n// FrameAvailable mark a texture buffer is ready to be draw in the flutter scene\nfunc (t *Texture) FrameAvailable() error {\n\terr := t.registry.engine.MarkExternalTextureFrameAvailable(t.ID)\n\tif err != nil {\n\t\treturn errors.Errorf(\"'go-flutter' couldn't mark frame available of texture with id: '%v': %v\", t.ID, err)\n\t}\n\treturn nil\n}\n\n// UnRegister unregisters a textureID with his associated handler\nfunc (t *Texture) UnRegister() error {\n\terr := t.registry.engine.UnregisterExternalTexture(t.ID)\n\tif err != nil {\n\t\treturn errors.Errorf(\"'go-flutter' couldn't unregisters texture with id: '%v': %v\", t.ID, err)\n\t}\n\tt.registry.setTextureHandler(t.ID, nil)\n\treturn nil\n}\n"
        },
        {
          "name": "window.go",
          "type": "blob",
          "size": 1.1767578125,
          "content": "package flutter\n\n// windowMode determines the kind of window mode to use for new windows.\ntype windowMode int\n\nconst (\n\t// WindowModeDefault is the default window mode. Windows are created with\n\t// borders and close/minimize buttons.\n\tWindowModeDefault windowMode = iota\n\t// WindowModeBorderless removes decorations such as borders and\n\t// close/minimize buttons from the window.\n\tWindowModeBorderless\n\t// WindowModeBorderlessFullscreen starts the application in borderless\n\t// fullscreen mode. Currently, only fullscreen on the primary monitor is\n\t// supported. This option overrides WindowInitialDimensions. Note that on\n\t// some systems a fullscreen window is very hard to close. Make sure your\n\t// Flutter application has a close button and use PopBehaviorIconify to\n\t// minimize or PopBehaviorClose to close the application.\n\tWindowModeBorderlessFullscreen\n\t// WindowModeMaximize starts the application maximized.\n\tWindowModeMaximize\n\t// WindowModeBorderlessMaximize starts the application in borderless\n\t// maximize mode.\n\tWindowModeBorderlessMaximize\n)\n\n// WindowMode sets the window mode on the application.\nfunc WindowMode(w windowMode) Option {\n\treturn func(c *config) {\n\t\tc.windowMode = w\n\t}\n}\n"
        }
      ]
    }
  ]
}