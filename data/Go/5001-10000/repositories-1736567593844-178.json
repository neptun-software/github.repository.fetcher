{
  "metadata": {
    "timestamp": 1736567593844,
    "page": 178,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "metallb/metallb",
      "stars": 7220,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": ".git\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1689453125,
          "content": "*.pyc\nbuild/\nwebsite/public\ndev-env/unittest/bin\n.envrc\njunit-report.xml\n\n# Hugo\n.hugo_build.lock\n\n# macOS\n.DS_Store\n\n# generated by helm chart-releaser\n.cr-*\n\n.idea/\n*.swp\n"
        },
        {
          "name": ".golangci.exclude",
          "type": "blob",
          "size": 0.0341796875,
          "content": "(github.com/go-kit/log.Logger).Log\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.8671875,
          "content": "run:\n  issues-exit-code: 2\nlinters:\n  enable:\n  - godot\n  - goimports\n  - gofmt\n  - ginkgolinter\n  - dogsled\n  - exportloopref\n  - gocritic\n  - misspell\n  - nolintlint\n  - stylecheck\n  - unconvert\n  - unparam\n  - whitespace\n  - revive\n  - unused\n  - wastedassign\nlinters-settings:\n  errcheck:\n    exclude: .golangci.exclude\n  godot:\n    scope: toplevel\n    capital: true\n    exclude:\n    - 'SPDX-License-Identifier.*'\n    - '\\+groupName.*'\n  misspell:\n    locale: US\n    ignore-words:\n      - neighbours\n      - neighbour\n  stylecheck:\n    dot-import-whitelist:\n    - github.com/onsi/ginkgo\n    - github.com/onsi/gomega\n  gocritic:\n    disabled-checks:\n      - captLocal\n      - exitAfterDefer\n  revive:\n    rules:\n    - name: receiver-naming\n      disabled: true\n    - name: dot-imports\n      disabled: true\nissues:\n  exclude-rules:\n    - path: 'api'\n      linters:\n        - stylecheck\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.451171875,
          "content": "# For more information on the syntax of the CODEOWNERS file, see:\n# https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners\n\n# The MetalLB maintainers team\n*   @fedepaol @oribon\n\n# Emeritus Maintainers\n#\n# The following people were previously members of the maintainers team, but are\n# not currently focused on the project.\n#\n# - danderson  # Creator of MetalLB\n# - daxmc99\n# - johananl\n# - rata\n# - russellb\n# - gclawes \n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.0947265625,
          "content": "# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at dave@natulte.net. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.4130859375,
          "content": "# How to Contribute\n\nSee the [contributing section of the\nwebsite](https://metallb.io/community) for information.\n\n## Certificate of Origin\n\nBy contributing to this project you agree to the Developer Certificate of\nOrigin (DCO). This document was created by the Linux Kernel community and is a\nsimple statement that you, as a contributor, have the legal right to make the\ncontribution. See the [DCO](DCO) file for details.\n"
        },
        {
          "name": "DCO",
          "type": "blob",
          "size": 1.3876953125,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.1142578125,
          "content": "# MetalLB\n\nMetalLB is a load-balancer implementation for bare\nmetal [Kubernetes](https://kubernetes.io) clusters, using standard\nrouting protocols.\n\n[![Project maturity: beta](https://img.shields.io/badge/maturity-beta-orange.svg)](https://metallb.io/concepts/maturity/) [![license](https://img.shields.io/github/license/metallb/metallb.svg?maxAge=2592000)](https://github.com/metallb/metallb/blob/main/LICENSE) [![CI](https://github.com/metallb/metallb/actions/workflows/ci.yaml/badge.svg)](https://github.com/metallb/metallb/actions/workflows/ci.yaml) [![Containers](https://img.shields.io/badge/containers-ready-green.svg)](https://hub.docker.com/u/metallb) [![Go report card](https://goreportcard.com/badge/github.com/metallb/metallb)](https://goreportcard.com/report/github.com/metallb/metallb)\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/5391/badge)](https://bestpractices.coreinfrastructure.org/projects/5391)\n\nCheck out [MetalLB's website](https://metallb.io) for more\ninformation.\n\n# WARNING\n\nAlthough the main branch has been relatively stable in the past, please be aware that it is the development branch.\n\nConsuming manifests from main may result in unstable / non backward compatible deployments. We strongly suggest consuming a stable branch, as\ndescribed in the [official docs](https://metallb.io/installation/).\n\n# Contributing\n\nWe welcome contributions in all forms. Please check out\nthe\n[hacking and contributing guide](https://metallb.io/community/#contributing)\nfor more information.\n\nParticipation in this project is subject to\na [code of conduct](https://metallb.io/community/code-of-conduct/).\n\nOne lightweight way you can contribute is\nto\n[tell us that you're using MetalLB](https://github.com/metallb/metallb/issues/5),\nwhich will give us warm fuzzy feelings :).\n\n# Reporting security issues\n\nYou can report security issues in the github issue tracker. If you\nprefer private disclosure, please email to all of the maintainers:\n\n- fpaoline@redhat.com\n- obraunsh@redhat.com\n\nWe aim for initial response to vulnerability reports within 48\nhours. The timeline for fixes depends on the complexity of the issue.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "commitlint.config.js",
          "type": "blob",
          "size": 0.44140625,
          "content": "module.exports = {\n    rules: {\n        // Ensure we have a blank line between the header and the body.\n       'body-leading-blank': [2, 'always'],\n       // Warn on lines longer than 72 chars. We usually don't want them for\n       // text, but links are fine if they exceed. So, just warn.\n       'body-max-line-length': [1, 'always', 72],\n       // Ensure the header line doesn't end with a period.\n       'header-full-stop': [2, 'never'],\n    },\n};\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configmaptocrs",
          "type": "tree",
          "content": null
        },
        {
          "name": "configsamples",
          "type": "tree",
          "content": null
        },
        {
          "name": "controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "ct.yaml",
          "type": "blob",
          "size": 0.1708984375,
          "content": "# See https://github.com/helm/chart-testing#configuration\nremote: origin\ntarget-branch: main\nvalidate-maintainers: false\ncheck-version-increment: false\nchart-dirs:\n  - charts\n"
        },
        {
          "name": "design",
          "type": "tree",
          "content": null
        },
        {
          "name": "dev-env",
          "type": "tree",
          "content": null
        },
        {
          "name": "e2etest",
          "type": "tree",
          "content": null
        },
        {
          "name": "frr-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 5.6015625,
          "content": "module go.universe.tf/metallb\n\ngo 1.22.0\n\ntoolchain go1.22.7\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc\n\tgithub.com/go-kit/log v0.2.1\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/hashicorp/memberlist v0.5.1\n\tgithub.com/mdlayher/arp v0.0.0-20220221190821-c37aaafac7f9\n\tgithub.com/mdlayher/ethernet v0.0.0-20220221185849-529eae5b6118\n\tgithub.com/mdlayher/ndp v0.0.0-20200602162440-17ab9e3e5567\n\tgithub.com/metallb/frr-k8s v0.0.16\n\tgithub.com/mikioh/ipaddr v0.0.0-20190404000644-d465c8ab6721\n\tgithub.com/onsi/ginkgo/v2 v2.22.0\n\tgithub.com/onsi/gomega v1.36.1\n\tgithub.com/open-policy-agent/cert-controller v0.10.2-0.20240531181455-2649f121ab97\n\tgithub.com/ory/dockertest/v3 v3.10.0\n\tgithub.com/prometheus/client_golang v1.19.1\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/sys v0.26.0\n\tk8s.io/api v0.31.4\n\tk8s.io/apiextensions-apiserver v0.31.1\n\tk8s.io/apimachinery v0.31.4\n\tk8s.io/client-go v0.31.4\n\tk8s.io/component-base v0.31.1\n\tk8s.io/klog v1.0.0\n\tk8s.io/utils v0.0.0-20240711033017-18e509b52bc8\n\tsigs.k8s.io/controller-runtime v0.19.3\n\tsigs.k8s.io/yaml v1.4.0\n)\n\nrequire (\n\tgithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.0 // indirect\n\tgithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 // indirect\n\tgithub.com/armon/go-metrics v0.3.9 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cenkalti/backoff/v4 v4.3.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/containerd/continuity v0.3.0 // indirect\n\tgithub.com/docker/cli v20.10.17+incompatible // indirect\n\tgithub.com/docker/docker v24.0.9+incompatible // indirect\n\tgithub.com/docker/go-connections v0.4.0 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/emicklei/go-restful/v3 v3.12.1 // indirect\n\tgithub.com/evanphx/json-patch v5.6.0+incompatible // indirect\n\tgithub.com/evanphx/json-patch/v5 v5.9.0 // indirect\n\tgithub.com/fxamacker/cbor/v2 v2.7.0 // indirect\n\tgithub.com/go-logfmt/logfmt v0.5.1 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/zapr v1.3.0 // indirect\n\tgithub.com/go-openapi/jsonpointer v0.21.0 // indirect\n\tgithub.com/go-openapi/jsonreference v0.21.0 // indirect\n\tgithub.com/go-openapi/swag v0.23.0 // indirect\n\tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/golang/protobuf v1.5.4 // indirect\n\tgithub.com/google/btree v1.0.1 // indirect\n\tgithub.com/google/gnostic-models v0.6.8 // indirect\n\tgithub.com/google/gofuzz v1.2.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db // indirect\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/hashicorp/errwrap v1.0.0 // indirect\n\tgithub.com/hashicorp/go-immutable-radix v1.3.1 // indirect\n\tgithub.com/hashicorp/go-msgpack/v2 v2.1.1 // indirect\n\tgithub.com/hashicorp/go-multierror v1.1.0 // indirect\n\tgithub.com/hashicorp/go-sockaddr v1.0.0 // indirect\n\tgithub.com/hashicorp/golang-lru v0.5.1 // indirect\n\tgithub.com/imdario/mergo v0.3.16 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/josharian/intern v1.0.0 // indirect\n\tgithub.com/josharian/native v1.0.0 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/mailru/easyjson v0.7.7 // indirect\n\tgithub.com/mdlayher/packet v1.0.0 // indirect\n\tgithub.com/mdlayher/socket v0.2.1 // indirect\n\tgithub.com/miekg/dns v1.1.43 // indirect\n\tgithub.com/mitchellh/mapstructure v1.4.2 // indirect\n\tgithub.com/moby/term v0.5.0 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/opencontainers/go-digest v1.0.0 // indirect\n\tgithub.com/opencontainers/image-spec v1.0.2 // indirect\n\tgithub.com/opencontainers/runc v1.1.14 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/common v0.55.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/spf13/cobra v1.8.1 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgithub.com/x448/float16 v0.8.4 // indirect\n\tgithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f // indirect\n\tgithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 // indirect\n\tgithub.com/xeipuuv/gojsonschema v1.2.0 // indirect\n\tgitlab.com/golang-commonmark/puny v0.0.0-20191124015043-9f83538fa04f // indirect\n\tgo.uber.org/atomic v1.11.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect\n\tgolang.org/x/mod v0.21.0 // indirect\n\tgolang.org/x/net v0.30.0 // indirect\n\tgolang.org/x/oauth2 v0.21.0 // indirect\n\tgolang.org/x/sync v0.8.0 // indirect\n\tgolang.org/x/term v0.25.0 // indirect\n\tgolang.org/x/text v0.19.0 // indirect\n\tgolang.org/x/time v0.5.0 // indirect\n\tgolang.org/x/tools v0.26.0 // indirect\n\tgomodules.xyz/jsonpatch/v2 v2.4.0 // indirect\n\tgoogle.golang.org/protobuf v1.35.1 // indirect\n\tgopkg.in/evanphx/json-patch.v4 v4.12.0 // indirect\n\tgopkg.in/inf.v0 v0.9.1 // indirect\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tk8s.io/klog/v2 v2.130.1 // indirect\n\tk8s.io/kube-openapi v0.0.0-20240521193020-835d969ad83a // indirect\n\tsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd // indirect\n\tsigs.k8s.io/structured-merge-diff/v4 v4.4.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 35.783203125,
          "content": "github.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1 h1:UQHMgLO+TxOElx5B5HZ4hJQsoJ/PvUvKRhJHDQXO8P8=\ngithub.com/Azure/go-ansiterm v0.0.0-20210617225240-d185dfc1b5a1/go.mod h1:xomTg63KZ2rFqZQzSB4Vz2SUXa1BpHTVz9L5PTmPC4E=\ngithub.com/DataDog/datadog-go v3.2.0+incompatible/go.mod h1:LButxg5PwREeZtORoXG3tL4fMGNddJ+vMq1mwgfaqoQ=\ngithub.com/Microsoft/go-winio v0.6.0 h1:slsWYD/zyx7lCXoZVlvQrj0hPTM1HI4+v1sIda2yDvg=\ngithub.com/Microsoft/go-winio v0.6.0/go.mod h1:cTAf44im0RAYeL23bpB+fzCyDH2MJiz2BO69KH/soAE=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5 h1:TngWCqHvy9oXAN6lEVMRuU21PR1EtLVZJmdB18Gu3Rw=\ngithub.com/Nvveen/Gotty v0.0.0-20120604004816-cd527374f1e5/go.mod h1:lmUJ/7eu/Q8D7ML55dXQrVaamCz2vxCfdQBasLZfHKk=\ngithub.com/alecthomas/template v0.0.0-20160405071501-a0175ee3bccc/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751/go.mod h1:LOuyumcjzFXgccqObfd/Ljyb9UuFJ6TxHnclSeseNhc=\ngithub.com/alecthomas/units v0.0.0-20151022065526-2efee857e7cf/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/alecthomas/units v0.0.0-20190717042225-c3de453c63f4/go.mod h1:ybxpYRFXyAe+OPACYpWeL0wqObRcbAqCMya13uyzqw0=\ngithub.com/armon/go-metrics v0.3.9 h1:O2sNqxBdvq8Eq5xmzljcYzAORli6RWCvEym4cJf9m18=\ngithub.com/armon/go-metrics v0.3.9/go.mod h1:4O98XIr/9W0sxpJ8UaYkvjk10Iff7SnFrb4QAOwNTFc=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.0/go.mod h1:KWe93zE9D1o94FZ5RNwFwVgaQK1VOXiVxmqh+CedLV8=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/cespare/xxhash/v2 v2.1.1/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/circonus-labs/circonus-gometrics v2.3.1+incompatible/go.mod h1:nmEj6Dob7S7YxXgwXpfOuvO54S+tGdZdw9fuRZt25Ag=\ngithub.com/circonus-labs/circonusllhist v0.1.3/go.mod h1:kMXHVDlOchFAehlya5ePtbp5jckzBHf4XRpQvBOLI+I=\ngithub.com/containerd/continuity v0.3.0 h1:nisirsYROK15TAMVukJOUyGJjz4BNQJBVsNvAXZJ/eg=\ngithub.com/containerd/continuity v0.3.0/go.mod h1:wJEAIwKOm/pBZuBd0JmeTvnLquTB1Ag8espWhkykbPM=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.18 h1:n56/Zwd5o6whRC5PMGretI4IdRLlmBXYNjScPaBgsbY=\ngithub.com/creack/pty v1.1.18/go.mod h1:MOBLtS5ELjhRRrroQr9kyvTxUAFNvYEK993ew/Vr4O4=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc h1:U9qPSI2PIWSS1VwoXQT9A3Wy9MM3WgvqSxFWenqJduM=\ngithub.com/davecgh/go-spew v1.1.2-0.20180830191138-d8f796af33cc/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/docker/cli v20.10.17+incompatible h1:eO2KS7ZFeov5UJeaDmIs1NFEDRf32PaqRpvoEkKBy5M=\ngithub.com/docker/cli v20.10.17+incompatible/go.mod h1:JLrzqnKDaYBop7H2jaqPtU4hHvMKP+vjCwu2uszcLI8=\ngithub.com/docker/docker v24.0.9+incompatible h1:HPGzNmwfLZWdxHqK9/II92pyi1EpYKsAqcl4G0Of9v0=\ngithub.com/docker/docker v24.0.9+incompatible/go.mod h1:eEKB0N0r5NX/I1kEveEz05bcu8tLC/8azJZsviup8Sk=\ngithub.com/docker/go-connections v0.4.0 h1:El9xVISelRB7BuFusrZozjnkIM5YnzCViNKohAFqRJQ=\ngithub.com/docker/go-connections v0.4.0/go.mod h1:Gbd7IOopHjR8Iph03tsViu4nIes5XhDvyHbTtUxmeec=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/emicklei/go-restful/v3 v3.12.1 h1:PJMDIM/ak7btuL8Ex0iYET9hxM3CI2sjZtzpL63nKAU=\ngithub.com/emicklei/go-restful/v3 v3.12.1/go.mod h1:6n3XBCmQQb25CM2LCACGz8ukIrRry+4bhvbpWn3mrbc=\ngithub.com/evanphx/json-patch v5.6.0+incompatible h1:jBYDEEiFBPxA0v50tFdvOzQQTCvpL6mnFh5mB2/l16U=\ngithub.com/evanphx/json-patch v5.6.0+incompatible/go.mod h1:50XU6AFN0ol/bzJsmQLiYLvXMP4fmwYFNcr97nuDLSk=\ngithub.com/evanphx/json-patch/v5 v5.9.0 h1:kcBlZQbplgElYIlo/n1hJbls2z/1awpXxpRi0/FOJfg=\ngithub.com/evanphx/json-patch/v5 v5.9.0/go.mod h1:VNkHZ/282BpEyt/tObQO8s5CMPmYYq14uClGH4abBuQ=\ngithub.com/fxamacker/cbor/v2 v2.7.0 h1:iM5WgngdRBanHcxugY4JySA0nk1wZorNOpTgCMedv5E=\ngithub.com/fxamacker/cbor/v2 v2.7.0/go.mod h1:pxXPTn3joSm21Gbwsv0w9OSA2y1HFR9qXEeXQVeNoDQ=\ngithub.com/go-kit/kit v0.8.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/kit v0.9.0/go.mod h1:xBxKIO96dXMWWy0MnWVtmwkA9/13aqxPnvrjFYMA2as=\ngithub.com/go-kit/log v0.2.1 h1:MRVx0/zhvdseW+Gza6N9rVzU/IVzaeE1SFI4raAhmBU=\ngithub.com/go-kit/log v0.2.1/go.mod h1:NwTd00d/i8cPZ3xOwwiv2PO5MOcx78fFErGNcVmBjv0=\ngithub.com/go-logfmt/logfmt v0.3.0/go.mod h1:Qt1PoO58o5twSAckw1HlFXLmHsOX5/0LbT9GBnD5lWE=\ngithub.com/go-logfmt/logfmt v0.4.0/go.mod h1:3RMwSq7FuexP4Kalkev3ejPJsZTpXXBr9+V4qmtdjCk=\ngithub.com/go-logfmt/logfmt v0.5.1 h1:otpy5pqBCBZ1ng9RQ0dPu4PN7ba75Y/aA+UpowDyNVA=\ngithub.com/go-logfmt/logfmt v0.5.1/go.mod h1:WYhtIu8zTZfxdn5+rREduYbwxfcBr/Vr6KEVveWlfTs=\ngithub.com/go-logr/logr v0.1.0/go.mod h1:ixOQHD9gLJUVQQ2ZOR7zLEifBX6tGkNJF4QyIY7sIas=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/zapr v1.3.0 h1:XGdV8XW8zdwFiwOA2Dryh1gj2KRQyOOoNmBy4EplIcQ=\ngithub.com/go-logr/zapr v1.3.0/go.mod h1:YKepepNBd1u/oyhd/yQmtjVXmm9uML4IXUgMOwR8/Gg=\ngithub.com/go-openapi/jsonpointer v0.21.0 h1:YgdVicSA9vH5RiHs9TZW5oyafXZFc6+2Vc1rr/O9oNQ=\ngithub.com/go-openapi/jsonpointer v0.21.0/go.mod h1:IUyH9l/+uyhIYQ/PXVA41Rexl+kOkAPDdXEYns6fzUY=\ngithub.com/go-openapi/jsonreference v0.21.0 h1:Rs+Y7hSXT83Jacb7kFyjn4ijOuVGSvOdF2+tg1TRrwQ=\ngithub.com/go-openapi/jsonreference v0.21.0/go.mod h1:LmZmgsrTkVg9LG4EaHeY8cBDslNPMo06cago5JNLkm4=\ngithub.com/go-openapi/swag v0.23.0 h1:vsEVJDUo2hPJ2tu0/Xc+4noaxyEffXNIs3cOULZ+GrE=\ngithub.com/go-openapi/swag v0.23.0/go.mod h1:esZ8ITTYEsH1V2trKHjAN8Ai7xHb8RV+YSZ577vPjgQ=\ngithub.com/go-sql-driver/mysql v1.6.0 h1:BCTh4TKNUYmOmMUcQ3IipzF5prigylS7XXjEkfCHuOE=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/go-stack/stack v1.8.0/go.mod h1:v0f6uXyyMGvRgIKkXu+yp6POWl0qKG85gN/melR3HDY=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/btree v1.0.1 h1:gK4Kx5IaGY9CD5sPJ36FHiBJ6ZXl0kilRiiCj+jdYp4=\ngithub.com/google/btree v1.0.1/go.mod h1:xXMiIv4Fb/0kKde4SpL7qlzvu5cMJDRkFDxJfI9uaxA=\ngithub.com/google/gnostic-models v0.6.8 h1:yo/ABAfM5IMRsS1VnXjTBvUb61tFIHozhlYvRgGre9I=\ngithub.com/google/gnostic-models v0.6.8/go.mod h1:5n7qKqH0f5wFt+aWF8CW6pZLLNOfYuF5OpfBSENuI8U=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.4.1/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.6/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.7/go.mod h1:n+brtR0CgQNWTVd5ZUFpTBC8YFBDLK/h/bpaJ8/DtOE=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/gofuzz v1.2.0 h1:xRy4A+RhZaiKjJ1bPfwQ8sedCA+YS2YcCHW6ec7JMi0=\ngithub.com/google/gofuzz v1.2.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db h1:097atOisP2aRj7vFgYQBbFN4U4JNXUNYpxael3UzMyo=\ngithub.com/google/pprof v0.0.0-20241029153458-d1b30febd7db/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/hashicorp/errwrap v1.0.0 h1:hLrqtEDnRye3+sgx6z4qVLNuviH3MR5aQ0ykNJa/UYA=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-cleanhttp v0.5.0/go.mod h1:JpRdi6/HCYpAwUzNwuwqhbovhLtngrth3wmdIIUrZ80=\ngithub.com/hashicorp/go-immutable-radix v1.0.0/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-immutable-radix v1.3.1 h1:DKHmCUm2hRBK510BaiZlwvpD40f8bJFeZnpfm2KLowc=\ngithub.com/hashicorp/go-immutable-radix v1.3.1/go.mod h1:0y9vanUI8NX6FsYoO3zeMjhV/C5i9g4Q3DwcSNZ4P60=\ngithub.com/hashicorp/go-msgpack/v2 v2.1.1 h1:xQEY9yB2wnHitoSzk/B9UjXWRQ67QKu5AOm8aFp8N3I=\ngithub.com/hashicorp/go-msgpack/v2 v2.1.1/go.mod h1:upybraOAblm4S7rx0+jeNy+CWWhzywQsSRV5033mMu4=\ngithub.com/hashicorp/go-multierror v1.1.0 h1:B9UzwGQJehnUY1yNrnwREHc3fGbC2xefo8g4TbElacI=\ngithub.com/hashicorp/go-multierror v1.1.0/go.mod h1:spPvp8C1qA32ftKqdAHm4hHTbPw+vmowP0z+KUhOZdA=\ngithub.com/hashicorp/go-retryablehttp v0.5.3/go.mod h1:9B5zBasrRhHXnJnui7y6sL7es7NDiJgTc6Er0maI1Xs=\ngithub.com/hashicorp/go-sockaddr v1.0.0 h1:GeH6tui99pF4NJgfnhp+L6+FfobzVW3Ah46sLo0ICXs=\ngithub.com/hashicorp/go-sockaddr v1.0.0/go.mod h1:7Xibr9yA9JjQq1JpNB2Vw7kxv8xerXegt+ozgdvDeDU=\ngithub.com/hashicorp/go-uuid v1.0.0 h1:RS8zrF7PhGwyNPOtxSClXXj9HA8feRnJzgnI1RJCSnM=\ngithub.com/hashicorp/go-uuid v1.0.0/go.mod h1:6SBZvOh/SIDV7/2o3Jml5SYk/TvGqwFJ/bN7x4byOro=\ngithub.com/hashicorp/golang-lru v0.5.0/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/golang-lru v0.5.1 h1:0hERBMJE1eitiLkihrMvRVBYAkpHzc/J3QdDN+dAcgU=\ngithub.com/hashicorp/golang-lru v0.5.1/go.mod h1:/m3WP610KZHVQ1SGc6re/UDhFvYD7pJ4Ao+sR/qLZy8=\ngithub.com/hashicorp/memberlist v0.5.1 h1:mk5dRuzeDNis2bi6LLoQIXfMH7JQvAzt3mQD0vNZZUo=\ngithub.com/hashicorp/memberlist v0.5.1/go.mod h1:zGDXV6AqbDTKTM6yxW0I4+JtFzZAJVoIPvss4hV8F24=\ngithub.com/imdario/mergo v0.3.16 h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=\ngithub.com/imdario/mergo v0.3.16/go.mod h1:WBLT9ZmE3lPoWsEzCh9LPo3TiwVN+ZKEjmz+hD27ysY=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/josharian/intern v1.0.0 h1:vlS4z54oSdjm0bgjRigI+G1HpF+tI+9rE5LLzOg8HmY=\ngithub.com/josharian/intern v1.0.0/go.mod h1:5DoeVV0s6jJacbCEi61lwdGj/aVlrQvzHFFd8Hwg//Y=\ngithub.com/josharian/native v1.0.0 h1:Ts/E8zCSEsG17dUqv7joXJFybuMLjQfWE04tsBODTxk=\ngithub.com/josharian/native v1.0.0/go.mod h1:7X/raswPFr05uY3HiLlYeyQntB6OO7E/d2Cu7qoaN2w=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/julienschmidt/httprouter v1.2.0/go.mod h1:SYymIcj16QtmaHHD7aYtjjsJG7VTCxuUUipMqKk8s4w=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/logfmt v0.0.0-20140226030751-b84e30acd515/go.mod h1:+0opPa2QZZtGFBFZlji/RkVcI2GknAs/DXo4wKdlNEc=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lib/pq v0.0.0-20180327071824-d34b9ff171c2 h1:hRGSmZu7j271trc9sneMrpOW7GN5ngLm8YUZIPzf394=\ngithub.com/lib/pq v0.0.0-20180327071824-d34b9ff171c2/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/mailru/easyjson v0.7.7 h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=\ngithub.com/mailru/easyjson v0.7.7/go.mod h1:xzfreul335JAWq5oZzymOObrkdz5UnU4kGfJJLY9Nlc=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/mdlayher/arp v0.0.0-20220221190821-c37aaafac7f9 h1:LxldC/UdEeJ+j3i/g5K2iPePYWXOcy6AAhCYs3VREKc=\ngithub.com/mdlayher/arp v0.0.0-20220221190821-c37aaafac7f9/go.mod h1:kfOoFJuHWp76v1RgZCb9/gVUc7XdY877S2uVYbNliGc=\ngithub.com/mdlayher/ethernet v0.0.0-20220221185849-529eae5b6118 h1:2oDp6OOhLxQ9JBoUuysVz9UZ9uI6oLUbvAZu0x8o+vE=\ngithub.com/mdlayher/ethernet v0.0.0-20220221185849-529eae5b6118/go.mod h1:ZFUnHIVchZ9lJoWoEGUg8Q3M4U8aNNWA3CVSUTkW4og=\ngithub.com/mdlayher/ndp v0.0.0-20200602162440-17ab9e3e5567 h1:x+xs91ZJ+lr0C6sedWeREvck4uGCt+AA1kKXwsHB6jI=\ngithub.com/mdlayher/ndp v0.0.0-20200602162440-17ab9e3e5567/go.mod h1:32w/5dDZWVSEOxyniAgKK4d7dHTuO6TCxWmUznQe3f8=\ngithub.com/mdlayher/packet v1.0.0 h1:InhZJbdShQYt6XV2GPj5XHxChzOfhJJOMbvnGAmOfQ8=\ngithub.com/mdlayher/packet v1.0.0/go.mod h1:eE7/ctqDhoiRhQ44ko5JZU2zxB88g+JH/6jmnjzPjOU=\ngithub.com/mdlayher/socket v0.2.1 h1:F2aaOwb53VsBE+ebRS9bLd7yPOfYUMC8lOODdCBDY6w=\ngithub.com/mdlayher/socket v0.2.1/go.mod h1:QLlNPkFR88mRUNQIzRBMfXxwKal8H7u1h3bL1CV+f0E=\ngithub.com/metallb/frr-k8s v0.0.16 h1:tlNIDW5wtBlKE7wUgXBs9GklyTCTFtdOGz8fvEl40vU=\ngithub.com/metallb/frr-k8s v0.0.16/go.mod h1:TjrGoAf+v00hYGlI8jUdyDxY5udMAOs2GWwrvLWnA4E=\ngithub.com/miekg/dns v1.1.43 h1:JKfpVSCB84vrAmHzyrsxB5NAr5kLoMXZArPSw7Qlgyg=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/mikioh/ipaddr v0.0.0-20190404000644-d465c8ab6721 h1:RlZweED6sbSArvlE924+mUcZuXKLBHA35U7LN621Bws=\ngithub.com/mikioh/ipaddr v0.0.0-20190404000644-d465c8ab6721/go.mod h1:Ickgr2WtCLZ2MDGd4Gr0geeCH5HybhRJbonOgQpvSxc=\ngithub.com/mitchellh/mapstructure v1.4.2 h1:6h7AQ0yhTcIsmFmnAwQls75jp2Gzs4iB8W7pjMO+rqo=\ngithub.com/mitchellh/mapstructure v1.4.2/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/moby/term v0.5.0 h1:xt8Q1nalod/v7BqbG21f8mQPqH+xAaC9C3N3wfWbVP0=\ngithub.com/moby/term v0.5.0/go.mod h1:8FzsFHVUBGZdbDsJw/ot+X+d5HLUbvklYLJ9uGfcI3Y=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v0.0.0-20180701023420-4b7aa43c6742/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/mwitkow/go-conntrack v0.0.0-20161129095857-cc309e4a2223/go.mod h1:qRWi+5nqEBWmkhHvq77mSJWrCKwh8bxhgT7d/eI7P4U=\ngithub.com/onsi/ginkgo/v2 v2.22.0 h1:Yed107/8DjTr0lKCNt7Dn8yQ6ybuDRQoMGrNFKzMfHg=\ngithub.com/onsi/ginkgo/v2 v2.22.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=\ngithub.com/onsi/gomega v1.36.1 h1:bJDPBO7ibjxcbHMgSCoo4Yj18UWbKDlLwX1x9sybDcw=\ngithub.com/onsi/gomega v1.36.1/go.mod h1:PvZbdDc8J6XJEpDK4HCuRBm8a6Fzp9/DmhC9C7yFlog=\ngithub.com/open-policy-agent/cert-controller v0.10.2-0.20240531181455-2649f121ab97 h1:otk1yQtHleQq5VIy5C+rAYnErOT/WrvDyplqPhYDqb8=\ngithub.com/open-policy-agent/cert-controller v0.10.2-0.20240531181455-2649f121ab97/go.mod h1:ZoyStAh4D97A4+k4BUj/Q/eyqyeIR4gl/NuVGAWUhvQ=\ngithub.com/open-policy-agent/frameworks/constraint v0.0.0-20230822235116-f0b62fe1e4c4 h1:5dum5SLEz+95JDLkMls7Z7IDPjvSq3UhJSFe4f5einQ=\ngithub.com/open-policy-agent/frameworks/constraint v0.0.0-20230822235116-f0b62fe1e4c4/go.mod h1:54/KzLMvA5ndBVpm7B1OjLeV0cUtTLTz2bZ2OtydLpU=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.0.2 h1:9yCKha/T5XdGtO0q9Q9a6T5NUCsTn/DrBg0D7ufOcFM=\ngithub.com/opencontainers/image-spec v1.0.2/go.mod h1:BtxoFyWECRxE4U/7sNtV5W15zMzWCbyJoFRP3s7yZA0=\ngithub.com/opencontainers/runc v1.1.14 h1:rgSuzbmgz5DUJjeSnw337TxDbRuqjs6iqQck/2weR6w=\ngithub.com/opencontainers/runc v1.1.14/go.mod h1:E4C2z+7BxR7GHXp0hAY53mek+x49X1LjPNeMTfRGvOA=\ngithub.com/ory/dockertest/v3 v3.10.0 h1:4K3z2VMe8Woe++invjaTB7VRyQXQy5UY+loujO4aNE4=\ngithub.com/ory/dockertest/v3 v3.10.0/go.mod h1:nr57ZbRWMqfsdGdFNLHz5jjNdDb7VVFnzAeW1n5N1Lg=\ngithub.com/pascaldekloe/goe v0.1.0 h1:cBOtyMzM9HTpWjXfbbunk26uA6nG3a8n06Wieeh0MwY=\ngithub.com/pascaldekloe/goe v0.1.0/go.mod h1:lzWF7FIEvWOWxwDKqyGYQf6ZUaNfKdP144TG7ZOy1lc=\ngithub.com/pkg/errors v0.8.0/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2 h1:Jamvg5psRIccs7FGNTlIRMkT8wgtp5eCXdBlqhYGL6U=\ngithub.com/pmezard/go-difflib v1.0.1-0.20181226105442-5d4384ee4fb2/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.9.1/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.0.0/go.mod h1:db9x61etRT2tGnBNRi70OPL5FsnadC4Ky3P0J6CfImo=\ngithub.com/prometheus/client_golang v1.4.0/go.mod h1:e9GMxYsXl05ICDXkRhurwBS4Q3OK1iX/F2sw+iXX5zU=\ngithub.com/prometheus/client_golang v1.19.1 h1:wZWJDwK+NameRJuPGDhlnFgx8e8HN3XHQeLaYJFJBOE=\ngithub.com/prometheus/client_golang v1.19.1/go.mod h1:mP78NwGzrVks5S2H6ab8+ZZGJLZUq1hoULYBAYBw1Ho=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.0.0-20190129233127-fd36f4220a90/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.2.0/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.4.1/go.mod h1:TNfzLD0ON7rHzMJeJkieUDPYmFC7Snx/y86RQel1bk4=\ngithub.com/prometheus/common v0.9.1/go.mod h1:yhUN8i9wzaXS3w1O07YhxHEBxD+W35wd8bs7vj7HSQ4=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.0.0-20181005140218-185b4288413d/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.0.2/go.mod h1:TjEm7ze935MbeOT/UhFTIMYKhuLP4wbCsTZCD3I8kEA=\ngithub.com/prometheus/procfs v0.0.8/go.mod h1:7Qr8sr6344vo1JqZ6HhLceV9o3AJ1Ff+GxbHq6oeK9A=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529 h1:nn5Wsu0esKSJiIVhscUtVbo7ada43DJhG55ua/hjS5I=\ngithub.com/sean-/seed v0.0.0-20170313163322-e2103e2c3529/go.mod h1:DxrIzT+xaE7yg65j358z/aeFdxmN0P9QXhEzd20vsDc=\ngithub.com/sirupsen/logrus v1.2.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=\ngithub.com/sirupsen/logrus v1.4.2/go.mod h1:tLMulIdttU9McNUspp0xgXVQah82FyeX6MwdIuYE2rE=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tv42/httpunix v0.0.0-20150427012821-b75d8614f926/go.mod h1:9ESjWnEqriFuLhtthL60Sar/7RFoluCcXsuvEwTV5KM=\ngithub.com/x448/float16 v0.8.4 h1:qLwI1I70+NjRFUR3zs1JPUCgaCXSh3SW62uAKT1mSBM=\ngithub.com/x448/float16 v0.8.4/go.mod h1:14CWIYCyZA/cWjXOioeEpHeN/83MdbZDRQHoFcYsOfg=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f h1:J9EGpcZtP0E/raorCMxlFGSTBrsSlaDGf3jU/qvAE2c=\ngithub.com/xeipuuv/gojsonpointer v0.0.0-20180127040702-4e3ac2762d5f/go.mod h1:N2zxlSyiKSe5eX1tZViRH5QA0qijqEDrYZiPEAiq3wU=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415 h1:EzJWgHovont7NscjpAxXsDA8S8BMYve8Y5+7cuRE7R0=\ngithub.com/xeipuuv/gojsonreference v0.0.0-20180127040603-bd5ef7bd5415/go.mod h1:GwrjFmJcFw6At/Gs6z4yjiIwzuJ1/+UwLxMQDVQXShQ=\ngithub.com/xeipuuv/gojsonschema v1.2.0 h1:LhYJRs+L4fBtjZUfuSZIKGeVu0QRy8e5Xi7D17UxZ74=\ngithub.com/xeipuuv/gojsonschema v1.2.0/go.mod h1:anYRn/JVcOK2ZgGU+IjEV4nwlhoK5sQluxsYJ78Id3Y=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngitlab.com/golang-commonmark/puny v0.0.0-20191124015043-9f83538fa04f h1:Wku8eEdeJqIOFHtrfkYUByc4bCaTeA6fL0UJgfEiFMI=\ngitlab.com/golang-commonmark/puny v0.0.0-20191124015043-9f83538fa04f/go.mod h1:Tiuhl+njh/JIg0uS/sOJVYi0x2HEa5rc1OAaVsb5tAs=\ngo.uber.org/atomic v1.11.0 h1:ZvwS0R+56ePWxUNi+Atn9dWONBPp/AUETXlHW0DxSjE=\ngo.uber.org/atomic v1.11.0/go.mod h1:LUxbIzbOniOlMKjJjyPfpl4v+PKK2cNJn91OQbhoJI0=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngolang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.21.0 h1:vvrHzRwRfVKSiLrG+d4FMl/Qi4ukBCE6kZlTUkDYRT0=\ngolang.org/x/mod v0.21.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20181114220301-adae6a3d119a/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190503192946-f4e77d36d62c/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190603091049-60506f45cf65/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=\ngolang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200602114024-627f9648deb9/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=\ngolang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=\ngolang.org/x/oauth2 v0.21.0 h1:tsimM75w1tF/uws5rbeHzIWxEqElMehnc+iW793zsZs=\ngolang.org/x/oauth2 v0.21.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20200317015054-43a5402ce75a/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181116152217-5ac8a444bdc5/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200122134326-e047566fdf82/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200602100848-8d3cce7afc34/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210616094352-59db8d763f22/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220209214540-3681064d5158/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=\ngolang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.25.0 h1:WtHI/ltw4NvSUig5KARz9h521QvRC8RmF/cuYqifU24=\ngolang.org/x/term v0.25.0/go.mod h1:RPyXicDX+6vLxogjjRxjgD2TKtmAO6NZBsBRfrOLu7M=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=\ngolang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.26.0 h1:v/60pFQmzmT9ExmjDv2gGIfi3OqfKoEP6I5+umXlbnQ=\ngolang.org/x/tools v0.26.0/go.mod h1:TPVVj70c7JJ3WCazhD8OdXcZg/og+b9+tH/KxylGwH0=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngomodules.xyz/jsonpatch/v2 v2.4.0 h1:Ci3iUJyx9UeRx7CeFN8ARgGbkESwJK+KB9lLcWxY/Zw=\ngomodules.xyz/jsonpatch/v2 v2.4.0/go.mod h1:AH3dM2RI6uoBZxn3LVrfvJ3E0/9dG4cSrbuBJT4moAY=\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/alecthomas/kingpin.v2 v2.2.6/go.mod h1:FMv+mEhP44yOT+4EoQTLFTRgOQ1FBLkstjWtayDeSgw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/evanphx/json-patch.v4 v4.12.0 h1:n6jtcsulIzXPJaxegRbvFNNrZDjbij7ny3gmSPG+6V4=\ngopkg.in/evanphx/json-patch.v4 v4.12.0/go.mod h1:p8EYWUEYMpynmqDbY58zCKCFZw8pRWMG4EsWvDvM72M=\ngopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.5/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.3.0 h1:MfDY1b1/0xN1CyMlQDac0ziEy9zJQd9CXBRRDHw2jJo=\ngotest.tools/v3 v3.3.0/go.mod h1:Mcr9QNxkg0uMvy/YElmo4SpXgJKWgQvYrT7Kw5RzJ1A=\nk8s.io/api v0.31.4 h1:I2QNzitPVsPeLQvexMEsj945QumYraqv9m74isPDKhM=\nk8s.io/api v0.31.4/go.mod h1:d+7vgXLvmcdT1BCo79VEgJxHHryww3V5np2OYTr6jdw=\nk8s.io/apiextensions-apiserver v0.31.1 h1:L+hwULvXx+nvTYX/MKM3kKMZyei+UiSXQWciX/N6E40=\nk8s.io/apiextensions-apiserver v0.31.1/go.mod h1:tWMPR3sgW+jsl2xm9v7lAyRF1rYEK71i9G5dRtkknoQ=\nk8s.io/apimachinery v0.31.4 h1:8xjE2C4CzhYVm9DGf60yohpNUh5AEBnPxCryPBECmlM=\nk8s.io/apimachinery v0.31.4/go.mod h1:rsPdaZJfTfLsNJSQzNHQvYoTmxhoOEofxtOsF3rtsMo=\nk8s.io/client-go v0.31.4 h1:t4QEXt4jgHIkKKlx06+W3+1JOwAFU/2OPiOo7H92eRQ=\nk8s.io/client-go v0.31.4/go.mod h1:kvuMro4sFYIa8sulL5Gi5GFqUPvfH2O/dXuKstbaaeg=\nk8s.io/component-base v0.31.1 h1:UpOepcrX3rQ3ab5NB6g5iP0tvsgJWzxTyAo20sgYSy8=\nk8s.io/component-base v0.31.1/go.mod h1:WGeaw7t/kTsqpVTaCoVEtillbqAhF2/JgvO0LDOMa0w=\nk8s.io/klog v1.0.0 h1:Pt+yjF5aB1xDSVbau4VsWe+dQNzA0qv1LlXdC2dF6Q8=\nk8s.io/klog v1.0.0/go.mod h1:4Bi6QPql/J/LkTDqv7R/cd3hPo4k2DG6Ptcz060Ez5I=\nk8s.io/klog/v2 v2.130.1 h1:n9Xl7H1Xvksem4KFG4PYbdQCQxqc/tTUyrgXaOhHSzk=\nk8s.io/klog/v2 v2.130.1/go.mod h1:3Jpz1GvMt720eyJH1ckRHK1EDfpxISzJ7I9OYgaDtPE=\nk8s.io/kube-aggregator v0.30.1 h1:ymR2BsxDacTKwzKTuNhGZttuk009c+oZbSeD+IPX5q4=\nk8s.io/kube-aggregator v0.30.1/go.mod h1:SFbqWsM6ea8dHd3mPLsZFzJHbjBOS5ykIgJh4znZ5iQ=\nk8s.io/kube-openapi v0.0.0-20240521193020-835d969ad83a h1:zD1uj3Jf+mD4zmA7W+goE5TxDkI7OGJjBNBzq5fJtLA=\nk8s.io/kube-openapi v0.0.0-20240521193020-835d969ad83a/go.mod h1:UxDHUPsUwTOOxSU+oXURfFBcAS6JwiRXTYqYwfuGowc=\nk8s.io/utils v0.0.0-20240711033017-18e509b52bc8 h1:pUdcCO1Lk/tbT5ztQWOBi5HBgbBP1J8+AsQnQCKsi8A=\nk8s.io/utils v0.0.0-20240711033017-18e509b52bc8/go.mod h1:OLgZIPagt7ERELqWJFomSt595RzquPNLL48iOWgYOg0=\nsigs.k8s.io/controller-runtime v0.19.3 h1:XO2GvC9OPftRst6xWCpTgBZO04S2cbp0Qqkj8bX1sPw=\nsigs.k8s.io/controller-runtime v0.19.3/go.mod h1:j4j87DqtsThvwTv5/Tc5NFRyyF/RF0ip4+62tbTSIUM=\nsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd h1:EDPBXCAspyGV4jQlpZSudPeMmr1bNJefnuqLsRAsHZo=\nsigs.k8s.io/json v0.0.0-20221116044647-bc3834ca7abd/go.mod h1:B8JuhiUyNFVKdsE8h686QcCxMaH6HrOAZj4vswFpcB0=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.1 h1:150L+0vs/8DA78h1u02ooW1/fFq/Lwr+sGiqlzvrtq4=\nsigs.k8s.io/structured-merge-diff/v4 v4.4.1/go.mod h1:N8hJocpFajUSSeSJ9bOZ77VzejKZaXsTtZo4/u7Io08=\nsigs.k8s.io/yaml v1.4.0 h1:Mk1wCc2gy/F0THH0TAp1QYyJNzRm2KCLy3o5ASXVI5E=\nsigs.k8s.io/yaml v1.4.0/go.mod h1:Ejl7/uTz7PSA4eKMyQCUTnhZYNmLIl+5c2lQPGR2BPY=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "netlify.toml",
          "type": "blob",
          "size": 0.2216796875,
          "content": "[build]\n  base = \"website\"\n  publish = \"public\"\n  command = \"hugo\"\n\n[build.environment]\n  HUGO_VERSION = \"0.124.1\"\n\n[[redirects]]\n  from = \"https://metallb.universe.tf\"\n  to = \"https://metallb.io\"\n  status = 301\n  force = true\n"
        },
        {
          "name": "speaker",
          "type": "tree",
          "content": null
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 53.6328125,
          "content": "import ipaddress\nimport os\nimport re\nimport shutil\nimport sys\nimport tempfile\nimport time\nfrom functools import cache\nfrom typing import Optional\n\nimport semver\nimport yaml\nimport jinja2\n\ntry:\n    from urllib.request import urlopen\nexcept ImportError:\n    from urllib2 import urlopen\n\nfrom invoke import run, task\nfrom invoke.exceptions import Exit, UnexpectedExit\n\nLICENSE_PATH = os.path.join(\"dev-env\", \"deepcopy_header.txt\")\n\nall_binaries = set([\"controller\", \"speaker\", \"configmaptocrs\"])\nall_architectures = set([\"amd64\", \"arm\", \"arm64\", \"ppc64le\", \"s390x\"])\ndefault_network = \"kind\"\nextra_network = \"network2\"\ncontroller_gen_version = \"v0.16.3\"\nbuild_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"build\")\nkubectl_path = os.path.join(build_path, \"kubectl\")\nkind_path = os.path.join(build_path, \"kind\")\nginkgo_path = os.path.join(build_path, \"bin\", \"ginkgo\")\ncontroller_gen_path = os.path.join(build_path, \"bin\", \"controller-gen\")\nkubectl_version = \"v1.31.0\"\nkind_version = \"v0.24.0\"\n\n\ndef _check_architectures(architectures):\n    out = set()\n    for arch in architectures:\n        if arch == \"all\":\n            out |= all_architectures\n        elif arch not in all_architectures:\n            print(\"unknown architecture {}\".format(arch))\n            print(\n                \"Supported architectures: {}\".format(\n                    \", \".join(sorted(all_architectures))\n                )\n            )\n            sys.exit(1)\n        else:\n            out.add(arch)\n    if not out:\n        out.add(\"amd64\")\n    return list(sorted(out))\n\n\ndef _check_binaries(binaries):\n    out = set()\n    for binary in binaries:\n        if binary == \"all\":\n            out |= all_binaries\n        elif binary not in all_binaries:\n            print(\"Unknown binary {}\".format(binary))\n            print(\"Known binaries: {}\".format(\", \".join(sorted(all_binaries))))\n            sys.exit(1)\n        else:\n            out.add(binary)\n    if not out:\n        out.add(\"controller\")\n        out.add(\"speaker\")\n        out.add(\"configmaptocrs\")\n    return list(sorted(out))\n\n\ndef _docker_build_cmd():\n    cmd = os.getenv(\"DOCKER_BUILD_CMD\")\n    if cmd:\n        out = cmd\n    else:\n        out = run(\n            \"docker buildx version >/dev/null\"\n            \"&& echo 'docker buildx build --load' \"\n            \"|| echo 'docker build'\",\n            hide=True,\n        ).stdout.strip()\n    return out\n\n\ndef run_with_retry(cmd, tries=6, delay=2):\n    mtries, mdelay = tries, delay\n    while mtries > 1:\n        rv = run(cmd, warn=\"True\").exited\n        if rv == 0:\n            return\n        print(\"Sleeping for {}s\".format(mdelay))\n        time.sleep(mdelay)\n        mtries -= 1\n        mdelay *= 2  # exponential backoff\n    run(cmd)\n\n\n# Returns true if docker is a symbolic link to podman.\ndef _is_podman():\n    return \"podman\" in os.path.realpath(shutil.which(\"docker\"))\n\n\ndef _is_network_exist(network):\n    try:\n        run(\"docker network inspect {network}\".format(network=network))\n    except:\n        print(\"docker bridge {} doesn't exist\".format(network))\n        return False\n    return True\n\n\n# Get the list of subnets for the nework.\ndef _get_network_subnets(network):\n    if _is_podman():\n        cmd = (\n            \"podman network inspect {network} \".format(network=network)\n            + '-f \"{{ range .Subnets }}{{.Subnet}} {{end}}\"'\n        )\n    else:\n        cmd = (\n            \"docker network inspect {network} \".format(network=network)\n            + '-f \"{{ range .IPAM.Config}}{{.Subnet}} {{end}}\"'\n        )\n    return run(cmd, echo=True).stdout.strip().split(\" \")\n\n\n# Get the list of allocated IPv4 and IPv6 addresses for the kind network.\ndef _get_subnets_allocated_ips():\n    v4_ips = []\n    v6_ips = []\n\n    if _is_podman():\n        cmd = 'podman ps -f network=kind --format \"{{.ID}}\"'\n        containers = run(cmd, echo=True).stdout.strip().split(\"\\n\")\n        # for each container, get the IP address and add it to the list of\n        # allocated IPs\n        for c in containers:\n            cmd = (\n                \"podman inspect {container} --format '\"\n                \"{{{{.NetworkSettings.Networks.kind.IPAddress}}}} \"\n                \"{{{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}}}'\"\n            ).format(container=c)\n            v4, v6 = run(cmd, echo=True).stdout.strip().split(\" \")\n            v4_ips.append(v4)\n            v6_ips.append(v6)\n    else:\n        v4_ips = (\n            run(\n                \"docker network inspect kind -f \"\n                '\"{{range .Containers}}{{.IPv4Address}} {{end}}\"',\n                echo=True,\n            )\n            .stdout.strip()\n            .split(\" \")\n        )\n        v6_ips = (\n            run(\n                \"docker network inspect kind -f \"\n                '\"{{range .Containers}}{{.IPv6Address}} {{end}}\"',\n                echo=True,\n            )\n            .stdout.strip()\n            .split(\" \")\n        )\n\n    return sorted(v4_ips), sorted(v6_ips)\n\n\ndef _add_nic_to_nodes(cluster_name):\n    nodes = (\n        run(\"kind get nodes --name {name}\".format(name=cluster_name))\n        .stdout.strip()\n        .split(\"\\n\")\n    )\n    if not _is_network_exist(extra_network):\n        run(\n            \"docker network create --ipv6 --subnet {ipv6_subnet} -d bridge {bridge_name}\".format(\n                bridge_name=extra_network, ipv6_subnet=\"fc00:f853:ccd:e791::/64\"\n            )\n        )\n    for node in nodes:\n        run(\n            \"docker network connect {bridge_name} {node}\".format(\n                bridge_name=extra_network, node=node\n            )\n        )\n\n\n# Get the nics of kind cluster node\ndef _get_node_nics(node):\n    default_nic = run(\n        'docker exec -i {container} ip r | grep default | cut -d \" \" -f 5'.format(\n            container=node\n        )\n    ).stdout.strip()\n    if not _is_network_exist(extra_network):\n        return default_nic\n    extra_subnets = _get_network_subnets(extra_network)\n    if is_ipv4(extra_subnets[0]):\n        extra_nic = run(\n            'docker exec -i {container} ip r | grep {dst} | cut -d \" \" -f 3'.format(\n                container=node, dst=extra_subnets[0]\n            )\n        ).stdout.strip()\n    else:\n        extra_nic = run(\n            'docker exec -i {container} ip -6 r | grep {dst} | cut -d \" \" -f 3'.format(\n                container=node, dst=extra_subnets[0]\n            )\n        ).stdout.strip()\n    return default_nic + \",\" + extra_nic\n\n\ndef _get_local_nics():\n    nics = []\n    for net in [default_network, extra_network]:\n        if not _is_network_exist(net):\n            continue\n        subnets = _get_network_subnets(net)\n        if is_ipv4(subnets[0]):\n            nic = run(\n                'ip r | grep {dst} | cut -d \" \" -f 3'.format(dst=subnets[0])\n            ).stdout.strip()\n        else:\n            nic = run(\n                'ip -6 r | grep {dst} | cut -d \" \" -f 3'.format(dst=subnets[0])\n            ).stdout.strip()\n        nics.append(nic)\n    return \",\".join(nics)\n\n\n@task(\n    iterable=[\"binaries\", \"architectures\"],\n    help={\n        \"binaries\": \"binaries to build. One or more of {}, or 'all'\".format(\n            \", \".join(sorted(all_binaries))\n        ),\n        \"architectures\": \"architectures to build. One or more of {}, or 'all'\".format(\n            \", \".join(sorted(all_architectures))\n        ),\n        \"registry\": \"Docker registry under which to tag the images. Default 'quay.io'.\",\n        \"repo\": \"Docker repository under which to tag the images. Default 'metallb'.\",\n        \"tag\": \"Docker image tag prefix to use. Actual tag will be <tag>-<arch>. Default 'dev'.\",\n    },\n)\ndef build(ctx, binaries, architectures, registry=\"quay.io\", repo=\"metallb\", tag=\"dev\"):\n    \"\"\"Build MetalLB docker images.\"\"\"\n    binaries = _check_binaries(binaries)\n    architectures = _check_architectures(architectures)\n    docker_build_cmd = _docker_build_cmd()\n\n    commit = run(\"git describe --dirty --always\", hide=True).stdout.strip()\n    branch = run(\"git rev-parse --abbrev-ref HEAD\", hide=True).stdout.strip()\n\n    for arch in architectures:\n\n        for bin in binaries:\n            try:\n                if _is_podman():\n                    command = \"podman\"\n                else:\n                    command = \"docker\"\n                run(\n                    \"{command} image rm {registry}/{repo}/{bin}:{tag}-{arch}\".format(\n                        command=command,\n                        registry=registry,\n                        repo=repo,\n                        bin=bin,\n                        tag=tag,\n                        arch=arch,\n                    )\n                )\n            except:\n                pass\n            run(\n                \"{docker_build_cmd} \"\n                \"--platform linux/{arch} \"\n                \"-t {registry}/{repo}/{bin}:{tag}-{arch} \"\n                \"-f {bin}/Dockerfile \"\n                '--build-arg GIT_BRANCH=\"{branch}\" '\n                '--build-arg GIT_COMMIT=\"{commit}\" '\n                \".\".format(\n                    docker_build_cmd=docker_build_cmd,\n                    registry=registry,\n                    repo=repo,\n                    bin=bin,\n                    tag=tag,\n                    arch=arch,\n                    commit=commit,\n                    branch=branch,\n                ),\n                echo=True,\n            )\n\n\n@task(\n    iterable=[\"binaries\", \"architectures\"],\n    help={\n        \"binaries\": \"binaries to build. One or more of {}, or 'all'\".format(\n            \", \".join(sorted(all_binaries))\n        ),\n        \"architectures\": \"architectures to build. One or more of {}, or 'all'\".format(\n            \", \".join(sorted(all_architectures))\n        ),\n        \"registry\": \"Docker registry under which to tag the images. Default 'quay.io'.\",\n        \"repo\": \"Docker repository under which to tag the images. Default 'metallb'.\",\n        \"tag\": \"Docker image tag prefix to use. Actual tag will be <tag>-<arch>. Default 'dev'.\",\n    },\n)\ndef push(ctx, binaries, architectures, registry=\"quay.io\", repo=\"metallb\", tag=\"dev\"):\n    \"\"\"Build and push docker images to registry.\"\"\"\n    binaries = _check_binaries(binaries)\n    architectures = _check_architectures(architectures)\n\n    for arch in architectures:\n        for bin in binaries:\n            build(\n                ctx,\n                binaries=[bin],\n                architectures=[arch],\n                registry=registry,\n                repo=repo,\n                tag=tag,\n            )\n            run(\n                \"docker push {registry}/{repo}/{bin}:{tag}-{arch}\".format(\n                    registry=registry, repo=repo, bin=bin, arch=arch, tag=tag\n                ),\n                echo=True,\n            )\n\n\n@task(\n    iterable=[\"binaries\"],\n    help={\n        \"binaries\": \"binaries to build. One or more of {}, or 'all'\".format(\n            \", \".join(sorted(all_binaries))\n        ),\n        \"registry\": \"Docker registry under which to tag the images. Default 'quay.io'.\",\n        \"repo\": \"Docker repository under which to tag the images. Default 'metallb'.\",\n        \"tag\": \"Docker image tag prefix to use. Actual tag will be <tag>-<arch>. Default 'dev'.\",\n    },\n)\ndef push_multiarch(ctx, binaries, registry=\"quay.io\", repo=\"metallb\", tag=\"dev\"):\n    \"\"\"Build and push multi-architecture docker images to registry.\"\"\"\n    binaries = _check_binaries(binaries)\n    architectures = _check_architectures([\"all\"])\n    push(\n        ctx,\n        binaries=binaries,\n        architectures=architectures,\n        registry=registry,\n        repo=repo,\n        tag=tag,\n    )\n\n    platforms = \",\".join(\"linux/{}\".format(arch) for arch in architectures)\n    for bin in binaries:\n        run(\n            \"manifest-tool push from-args \"\n            \"--platforms {platforms} \"\n            \"--template {registry}/{repo}/{bin}:{tag}-ARCH \"\n            \"--target {registry}/{repo}/{bin}:{tag}\".format(\n                platforms=platforms, registry=registry, repo=repo, bin=bin, tag=tag\n            ),\n            echo=True,\n        )\n\n\ndef validate_kind_version():\n    \"\"\"Validate minimum required version of kind.\"\"\"\n    # If kind is not installed, this first command will raise an UnexpectedExit\n    # exception, and inv will exit at this point making it clear running \"kind\"\n    # failed.\n    min_version = \"0.9.0\"\n\n    try:\n        raw = run(\"kind version\", echo=True)\n    except Exception as e:\n        raise Exit(message=\"Could not determine kind version (is kind installed?)\")\n\n    actual_version = re.search(r\"v(\\d*\\.\\d*\\.\\d*)\", raw.stdout).group(1)\n    delta = semver.compare(actual_version, min_version)\n\n    if delta < 0:\n        raise Exit(message=\"kind version >= {} required\".format(min_version))\n\n\ndef generate_manifest(\n    ctx,\n    crd_options=\"crd:crdVersions=v1\",\n    bgp_type=\"native\",\n    output=None,\n    with_prometheus=False,\n):\n    fetch_kubectl()\n    fetch_controller_gen()\n    res = run(\n        '{}/bin/controller-gen {} rbac:roleName=manager-role webhook paths=\"./api/...\" output:crd:artifacts:config=config/crd/bases'.format(\n            build_path, crd_options\n        ),\n        echo=True,\n    )\n    if not res.ok:\n        raise Exit(message=\"Failed to generate manifests\")\n\n    if output:\n        layer = bgp_type\n        if with_prometheus:\n            layer = \"prometheus-\" + layer\n        res = run(\"{} kustomize config/{} > {}\".format(kubectl_path, layer, output))\n        if not res.ok:\n            raise Exit(message=\"Failed to kustomize manifests\")\n\n\n@task(\n    help={\n        \"architecture\": \"CPU architecture of the local machine. Default 'amd64'.\",\n        \"name\": \"name of the kind cluster to use.\",\n        \"protocol\": \"Pre-configure MetalLB with the specified protocol. \"\n        \"Unconfigured by default. Supported: 'bgp','layer2'\",\n        \"node_img\": \"Optional node image to use for the kind cluster (e.g. kindest/node:v1.18.19).\"\n        \"The node image drives the kubernetes version used in kind.\",\n        \"ip_family\": \"Optional ipfamily of the cluster.\"\n        \"Default: ipv4, supported families are 'ipv6' and 'dual'.\",\n        \"bgp_type\": \"Type of BGP implementation to use.\"\n        \"Supported: 'frr' (default), 'native', 'frr-k8s', 'frr-k8s-external'\",\n        \"frr_volume_dir\": \"FRR router config directory to be mounted inside frr container. \"\n        \"Default: ./dev-env/bgp/frr-volume\",\n        \"log_level\": \"Log level for the controller and the speaker.\"\n        \"Default: info, Supported: 'all', 'debug', 'info', 'warn', 'error' or 'none'\",\n        \"helm_install\": \"Optional install MetalLB via helm chart instead of manifests.\"\n        \"Default: False.\",\n        \"build_images\": \"Optional build the images.\" \"Default: True.\",\n        \"with_prometheus\": \"Deploys the prometheus kubernetes stack\" \"Default: False.\",\n        \"with_api_audit\": \"Enables audit on the apiserver\" \"Default: False.\",\n    }\n)\ndef dev_env(\n    ctx,\n    architecture=\"amd64\",\n    name=\"kind\",\n    protocol=None,\n    frr_volume_dir=\"\",\n    node_img=None,\n    ip_family=\"ipv4\",\n    bgp_type=\"frr\",\n    log_level=\"info\",\n    helm_install=False,\n    build_images=True,\n    with_prometheus=False,\n    with_api_audit=False,\n):\n    \"\"\"Build and run MetalLB in a local Kind cluster.\n\n    If the cluster specified by --name (default \"kind\") doesn't exist,\n    it is created. Then, build MetalLB docker images from the\n    checkout, push them into kind, and deploy MetalLB through manifests\n    or helm to run those images.\n    The optional node_img parameter will be used to determine the version of the cluster.\n    \"\"\"\n\n    fetch_kubectl()\n    fetch_kind()\n    validate_kind_version()\n\n    clusters = run(\"kind get clusters\", hide=True).stdout.strip().splitlines()\n    mk_cluster = name not in clusters\n    if mk_cluster:\n        config = {\n            \"apiVersion\": \"kind.x-k8s.io/v1alpha4\",\n            \"kind\": \"Cluster\",\n            \"nodes\": [\n                {\"role\": \"control-plane\"},\n                {\"role\": \"worker\"},\n                {\"role\": \"worker\"},\n            ],\n        }\n\n        if with_api_audit:\n            config[\"nodes\"][0][\"kubeadmConfigPatches\"] = [\n                r\"\"\"kind: ClusterConfiguration\napiServer:\n  # enable auditing flags on the API server\n  extraArgs:\n    audit-log-path: /var/log/kubernetes/kube-apiserver-audit.log\n    audit-policy-file: /etc/kubernetes/policies/audit-policy.yaml\n    # mount new files / directories on the control plane\n  extraVolumes:\n    - name: audit-policies\n      hostPath: /etc/kubernetes/policies\n      mountPath: /etc/kubernetes/policies\n      readOnly: true\n      pathType: \"DirectoryOrCreate\"\n    - name: \"audit-logs\"\n      hostPath: \"/var/log/kubernetes\"\n      mountPath: \"/var/log/kubernetes\"\n      readOnly: false\n      pathType: DirectoryOrCreate\"\"\"\n            ]\n            config[\"nodes\"][0][\"extraMounts\"] = [\n                {\n                    \"hostPath\": \"./dev-env/audit-policy.yaml\",\n                    \"containerPath\": \"/etc/kubernetes/policies/audit-policy.yaml\",\n                    \"readOnly\": True,\n                }\n            ]\n\n        networking_config = {}\n        if ip_family != \"ipv4\":\n            networking_config[\"ipFamily\"] = ip_family\n\n        if len(networking_config) > 0:\n            config[\"networking\"] = networking_config\n\n        extra_options = \"\"\n        if node_img != None:\n            extra_options = \"--image={}\".format(node_img)\n        config = yaml.dump(config).encode(\"utf-8\")\n\n        with tempfile.NamedTemporaryFile() as tmp:\n            tmp.write(config)\n            tmp.flush()\n            run(\n                \"{} create cluster --name={} --config={} {}\".format(\n                    kind_path, name, tmp.name, extra_options\n                ),\n                pty=True,\n                echo=True,\n            )\n        _add_nic_to_nodes(name)\n\n    binaries = [\"controller\", \"speaker\"]\n    if build_images:\n        build(ctx, binaries, architectures=[architecture])\n    run(\n        \"{} load docker-image --name={} quay.io/metallb/controller:dev-{}\".format(\n            kind_path, name, architecture\n        ),\n        echo=True,\n    )\n    run(\n        \"{} load docker-image --name={} quay.io/metallb/speaker:dev-{}\".format(\n            kind_path, name, architecture\n        ),\n        echo=True,\n    )\n\n    if with_prometheus:\n        print(\"Deploying prometheus\")\n        deployprometheus(ctx)\n\n    frr_k8s_ns = \"frr-k8s-system\"\n    if bgp_type == \"frr-k8s-external\":\n        run(\n            \"{} apply -f https://raw.githubusercontent.com/metallb/frr-k8s/v0.0.16/config/all-in-one/frr-k8s.yaml\".format(\n                kubectl_path\n            ),\n            echo=True,\n        )\n        time.sleep(2)\n        run(\n            \"{} -n {} wait --for=condition=Ready --all pods --timeout 300s\".format(\n                kubectl_path, frr_k8s_ns\n            ),\n            echo=True,\n        )\n\n    if helm_install:\n        run(\"{} apply -f config/native/ns.yaml\".format(kubectl_path), echo=True)\n        prometheus_values = \"\"\n        if with_prometheus:\n            prometheus_values = (\n                \"--set prometheus.serviceMonitor.enabled=true \"\n                \"--set prometheus.secureMetricsPort=9120 \"\n                \"--set speaker.frr.secureMetricsPort=9121 \"\n                \"--set prometheus.serviceAccount=prometheus-k8s \"\n                \"--set prometheus.namespace=monitoring \"\n            )\n        frr_values = \"\"\n\n        if bgp_type == \"frr\":\n            frr_values = \"--set speaker.frr.enabled=true \"\n        if bgp_type == \"frr-k8s\":\n            frr_values = \"--set frrk8s.enabled=true --set speaker.frr.enabled=false --set frr-k8s.prometheus.serviceMonitor.enabled=false \"\n            if with_prometheus:\n                frr_values = (\n                    \"--set frrk8s.enabled=true --set speaker.frr.enabled=false --set frr-k8s.prometheus.serviceMonitor.enabled=true \"\n                    \"--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[0].sourceLabels=\\\\{__name__\\\\} \"\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[0].regex=\"frrk8s_bgp_(.*)\" '\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[0].targetLabel=\"__name__\" '\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[0].replacement=\"metallb_bgp_\\\\$1\" '\n                    \"--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[1].sourceLabels=\\\\{__name__\\\\} \"\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[1].regex=\"frrk8s_bfd_(.*)\" '\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[1].targetLabel=\"__name__\" '\n                    '--set frr-k8s.prometheus.serviceMonitor.metricRelabelings[1].replacement=\"metallb_bfd_\\\\$1\" '\n                )\n\n        if bgp_type == \"frr-k8s-external\":\n            frr_values = \"--set frrk8s.external=true --set frrk8s.namespace={} --set speaker.frr.enabled=false --set frr-k8s.prometheus.serviceMonitor.enabled=false \".format(\n                frr_k8s_ns\n            )\n\n        run(\n            \"helm install metallb charts/metallb/ --set controller.image.tag=dev-{} \"\n            \"--set speaker.image.tag=dev-{} --set speaker.logLevel=debug \"\n            \"--set controller.logLevel=debug {} {}  --namespace metallb-system\".format(\n                architecture, architecture, prometheus_values, frr_values\n            ),\n            echo=True,\n        )\n    else:\n        run(\"{} delete po -n metallb-system --all\".format(kubectl_path), echo=True)\n\n        with tempfile.TemporaryDirectory() as tmpdir:\n            manifest_file = tmpdir + \"/metallb.yaml\"\n\n            generate_manifest(\n                ctx,\n                bgp_type=bgp_type,\n                output=manifest_file,\n                with_prometheus=with_prometheus,\n            )\n\n            # open file and replace the images with the newely built MetalLB docker images\n            with open(manifest_file) as f:\n                manifest = f.read()\n            for image in binaries:\n                manifest = re.sub(\n                    \"image: quay.io/metallb/{}:.*\".format(image),\n                    \"image: quay.io/metallb/{}:dev-{}\".format(image, architecture),\n                    manifest,\n                )\n                manifest = re.sub(\n                    \"--log-level=info\", \"--log-level={}\".format(log_level), manifest\n                )\n            manifest.replace(\"--log-level=info\", \"--log-level=debug\")\n\n            with open(manifest_file, \"w\") as f:\n                f.write(manifest)\n                f.flush()\n\n            run(\"{} apply -f {}\".format(kubectl_path, manifest_file), echo=True)\n\n    # Kind puts the remove exclusions annotation on the master node while\n    # the e2e tests expect master to be serviceable, so we remove the annotations\n    remove_lb_exclusion_from_nodes(ctx)\n\n    if protocol == \"bgp\":\n        print(\"Configuring MetalLB with a BGP test environment\")\n        bgp_dev_env(ip_family, frr_volume_dir)\n    elif protocol == \"layer2\":\n        print(\"Configuring MetalLB with a layer 2 test environment\")\n        layer2_dev_env()\n    else:\n        print(\"Leaving MetalLB unconfigured\")\n\n\n# Configure MetalLB in the dev-env for layer2 testing.\n# Identify the unused network address range from kind network and used it in configmap.\ndef layer2_dev_env():\n    fetch_kubectl()\n    dev_env_dir = os.getcwd() + \"/dev-env/layer2\"\n    with open(\"%s/config.yaml.tmpl\" % dev_env_dir, \"r\") as f:\n        layer2_config = \"# THIS FILE IS AUTOGENERATED\\n\" + f.read()\n    layer2_config = layer2_config.replace(\"SERVICE_V4_RANGE\", get_available_ips(4))\n    layer2_config = layer2_config.replace(\"SERVICE_V6_RANGE\", get_available_ips(6))\n    with open(\"%s/config.yaml\" % dev_env_dir, \"w\") as f:\n        f.write(layer2_config)\n    run(\n        \"{} wait --for=condition=Available deploy/controller -n metallb-system\".format(\n            kubectl_path\n        )\n    )\n    # Apply the MetalLB ConfigMap\n    run(\"{} apply -f {}/config.yaml\".format(kubectl_path, dev_env_dir))\n\n\n# Configure MetalLB in the dev-env for BGP testing. Start an frr based BGP\n# router in a container and configure MetalLB to peer with it.\n# See dev-env/bgp/README.md for some more information.\ndef bgp_dev_env(ip_family, frr_volume_dir):\n    fetch_kubectl()\n    dev_env_dir = os.getcwd() + \"/dev-env/bgp\"\n    if frr_volume_dir == \"\":\n        frr_volume_dir = run(\"mktemp -d\").stdout.strip() + \"/frr-volume\"\n\n    nodes = run(\"{} get nodes -o name\".format(kubectl_path), echo=True)\n    nodes = nodes.stdout.strip().split()\n    if len(nodes) != 3:\n        raise Exit(message=\"Expected 3 nodes, got %d\" % len(node_ips))\n\n    # Create a new directory that will be used as the config volume for frr.\n    try:\n        os.mkdir(frr_volume_dir)\n    except FileExistsError:\n        pass\n    except Exception as e:\n        raise Exit(message=\"Failed to create frr-volume directory: %s\" % str(e))\n\n    # These config files are static, so we copy them straight in.\n    copy_files = (\"zebra.conf\", \"daemons\", \"vtysh.conf\")\n    for f in copy_files:\n        shutil.copyfile(\"%s/frr/%s\" % (dev_env_dir, f), \"%s/%s\" % (frr_volume_dir, f))\n\n    # TODO -- The IP address handling will need updates to add support for IPv6\n    # We need the IPs for each Node in the cluster to place them in the BGP\n    # router configuration file (bgpd.conf). Each Node will peer with this\n    # router.\n    node_ips = run(\n        \"{} get nodes -o jsonpath='{{.items[*].status.addresses\"\n        '[?(@.type==\"InternalIP\")].address}}{{\"\\\\n\"}}\\''.format(kubectl_path),\n        echo=True,\n    )\n    node_ips = node_ips.stdout.strip().split()\n\n    node_ips_v4 = [ip for ip in node_ips if is_ipv4(ip)]\n    node_ips_v6 = [ip for ip in node_ips if not is_ipv4(ip)]\n    if ip_family == \"dual\":\n        ip_families = [\"ipv4\", \"ipv6\"]\n    else:\n        ip_families = [ip_family]\n\n    # bgpd.conf is created from a template so that we can include the current\n    # Node IPs.\n    with open(\"%s/frr/bgpd.conf.j2\" % dev_env_dir, \"r\") as f:\n        bgpd_config = (\n            jinja2.Environment()\n            .from_string(f.read())\n            .render(\n                ip_families=ip_families,\n                node_ips=node_ips,\n                node_ip_by_family={\"ipv4\": node_ips_v4, \"ipv6\": node_ips_v6},\n            )\n        )\n    with open(\"%s/bgpd.conf\" % frr_volume_dir, \"w\") as f:\n        f.write(bgpd_config)\n\n    # Run a BGP router in a container for all of the speakers to peer with.\n    run(\n        \"for frr in $(docker ps -a -f name=frr --format {{.Names}}) ; do \"\n        \"    docker rm -f $frr ; \"\n        \"done\",\n        echo=True,\n    )\n    run(\n        \"docker run -d --privileged --network kind --rm --ulimit core=-1 --name frr --volume %s:/etc/frr \"\n        \"quay.io/frrouting/frr:9.1.0\" % frr_volume_dir,\n        echo=True,\n    )\n\n    if ip_family == \"ipv4\":\n        peer_addresses = [\n            run(\n                'docker inspect -f \"{{ '\n                'range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\" frr',\n                echo=True,\n            ).stdout.strip()\n        ]\n\n    elif ip_family == \"ipv6\":\n        peer_addresses = [\n            run(\n                'docker inspect -f \"{{ '\n                'range .NetworkSettings.Networks}}{{.GlobalIPv6Address}}{{end}}\" frr',\n                echo=True,\n            ).stdout.strip()\n        ]\n\n    elif ip_family == \"dual\":\n        peer_addresses = (\n            run(\n                'docker inspect -f \"{{ '\n                'range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}\" frr',\n                echo=True,\n            )\n            .stdout.strip()\n            .split(\",\")\n        )\n\n    else:\n        raise Exit(message=\"Unsupported ip address family %s\" % ip_family)\n\n    with open(\"%s/config.yaml.j2\" % dev_env_dir, \"r\") as f:\n        mlb_config = (\n            jinja2.Environment()\n            .from_string(f.read())\n            .render(peer_addresses=peer_addresses)\n        )\n    with open(\"%s/config.yaml\" % dev_env_dir, \"w\") as f:\n        f.write(mlb_config)\n    # Apply the MetalLB ConfigMap\n    run_with_retry(\"{} apply -f {}/config.yaml\".format(kubectl_path, dev_env_dir))\n\n\ndef get_available_ips(ip_family=None):\n    if ip_family is None or (ip_family != 4 and ip_family != 6):\n        raise Exit(message=\"Please provide network version: 4 or 6.\")\n\n    v4, v6 = _get_subnets_allocated_ips()\n    for i in _get_network_subnets(default_network):\n        network = ipaddress.ip_network(i)\n        if network.version == ip_family:\n            used_list = v4 if ip_family == 4 else v6\n            last_used = ipaddress.ip_interface(used_list[-1])\n\n            # try to get 10 IP addresses after the last assigned node address in the kind network subnet,\n            # plus we give room to thr frr single hop containers.\n            # if failed, just quit (recreate kind cluster might solve the situation)\n            service_ip_range_start = last_used + 5\n            service_ip_range_end = last_used + 15\n            if service_ip_range_start not in network:\n                raise Exit(\n                    message=\"network range %s is not in %s\"\n                    % (service_ip_range_start, network)\n                )\n            if service_ip_range_end not in network:\n                raise Exit(\n                    message=\"network range %s is not in %s\"\n                    % (service_ip_range_end, network)\n                )\n            return \"%s-%s\" % (service_ip_range_start.ip, service_ip_range_end.ip)\n\n\n@task(\n    help={\n        \"name\": \"name of the kind cluster to delete.\",\n        \"frr_volume_dir\": \"FRR router config directory to be cleaned up. \"\n        \"Default: ./dev-env/bgp/frr-volume\",\n    }\n)\ndef dev_env_cleanup(ctx, name=\"kind\", frr_volume_dir=\"\"):\n    \"\"\"Remove traces of the dev env.\"\"\"\n    validate_kind_version()\n    fetch_kind()\n\n    clusters = (\n        run(\"{} get clusters\".format(kind_path), hide=True).stdout.strip().splitlines()\n    )\n    if name in clusters:\n        run(\"{} delete cluster --name={}\".format(kind_path, name), hide=True)\n\n    run(\n        \"for frr in $(docker ps -a -f name=frr --format {{.Names}}) ; do \"\n        \"    docker rm -f $frr ; \"\n        \"done\",\n        hide=True,\n    )\n\n    run(\n        \"for frr in $(docker ps -a -f name=vrf --format {{.Names}}) ; do \"\n        \"    docker rm -f $frr ; \"\n        \"done\",\n        hide=True,\n    )\n\n    # cleanup bgp configs\n    dev_env_dir = os.getcwd() + \"/dev-env/bgp\"\n    if frr_volume_dir == \"\":\n        frr_volume_dir = dev_env_dir + \"/frr-volume\"\n\n    # sudo because past docker runs will have changed ownership of this dir\n    run('sudo rm -rf \"%s\"' % frr_volume_dir)\n    run('rm -f \"%s\"/config.yaml' % dev_env_dir)\n\n    # cleanup layer2 configs\n    dev_env_dir = os.getcwd() + \"/dev-env/layer2\"\n    run('rm -f \"%s\"/config.yaml' % dev_env_dir)\n\n    # cleanup extra bridge\n    run(\"docker network rm {bridge_name}\".format(bridge_name=extra_network), warn=True)\n    run(\"docker network rm vrf-net\", warn=True)\n\n\n@task(\n    help={\n        \"version\": \"version of MetalLB to release.\",\n        \"skip-release-notes\": \"make the release even if there are no release notes.\",\n    }\n)\ndef release(ctx, version, skip_release_notes=False):\n    \"\"\"Tag a new release.\"\"\"\n    status = run(\"git status --porcelain\", hide=True).stdout.strip()\n    if status != \"\":\n        raise Exit(message=\"git checkout not clean, cannot release\")\n\n    sem_version = semver.parse_version_info(version)\n    is_patch_release = sem_version.patch != 0\n\n    # Check that we have release notes for the desired version.\n    run(\"git checkout main\", echo=True)\n    if not skip_release_notes:\n        with open(\"website/content/release-notes/_index.md\") as release_notes:\n            if \"## Version {}\".format(sem_version) not in release_notes.read():\n                raise Exit(message=\"no release notes for v{}\".format(sem_version))\n\n    # Move HEAD to the correct release branch - either a new one, or\n    # an existing one.\n    if is_patch_release:\n        run(\n            \"git checkout v{}.{}\".format(sem_version.major, sem_version.minor),\n            echo=True,\n        )\n    else:\n        run(\n            \"git checkout -b v{}.{}\".format(sem_version.major, sem_version.minor),\n            echo=True,\n        )\n\n    # Copy over release notes from main.\n    if not skip_release_notes:\n        run(\"git checkout main -- website/content/release-notes/_index.md\", echo=True)\n\n    # Update links on the website to point to files at the version\n    # we're creating.\n    if is_patch_release:\n        previous_version = \"v{}.{}.{}\".format(\n            sem_version.major, sem_version.minor, sem_version.patch - 1\n        )\n    else:\n        previous_version = \"main\"\n    bumprelease(ctx, version, previous_version)\n\n    run(\n        \"git commit -a -m 'Automated update for release v{}'\".format(sem_version),\n        echo=True,\n    )\n    run(\n        \"git tag v{} -m 'See the release notes for details:\\n\\nhttps://metallb.universe.tf/release-notes/#version-{}-{}-{}'\".format(\n            sem_version, sem_version.major, sem_version.minor, sem_version.patch\n        ),\n        echo=True,\n    )\n    run(\"git checkout main\", echo=True)\n\n\n@task(\n    help={\n        \"version\": \"version of MetalLB to release.\",\n        \"previous_version\": \"version of the previous release.\",\n    }\n)\ndef bumprelease(ctx, version, previous_version):\n    version = semver.parse_version_info(version)\n\n    def _replace(pattern):\n        oldpat = pattern.format(previous_version)\n        newpat = pattern.format(\"v{}\").format(version)\n        run(\n            \"perl -pi -e 's#{}#{}#g' website/content/*.md website/content/*/*.md\".format(\n                oldpat, newpat\n            ),\n            echo=True,\n        )\n\n    _replace(\"/metallb/metallb/{}\")\n    _replace(\"/metallb/metallb/tree/{}\")\n    _replace(\"/metallb/metallb/blob/{}\")\n\n    # Update the version listed on the website sidebar\n    run(\n        \"perl -pi -e 's/MetalLB .*/MetalLB v{}/g' website/content/_header.md\".format(\n            version\n        ),\n        echo=True,\n    )\n\n    # Update the manifests with the new version\n    run(\n        \"perl -pi -e 's,image: quay.io/metallb/speaker:.*,image: quay.io/metallb/speaker:v{},g' config/controllers/speaker.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        \"perl -pi -e 's,image: quay.io/metallb/speaker:.*,image: quay.io/metallb/speaker:v{},g' config/frr/speaker-patch.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        \"perl -pi -e 's,image: quay.io/metallb/controller:.*,image: quay.io/metallb/controller:v{},g' config/controllers/controller.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n\n    # Update the versions in the helm chart (version and appVersion are always the same)\n    # helm chart versions follow Semantic Versioning, and thus exclude the leading 'v'\n    # we change the version of the crd dependency only, ignoring the frr-k8s version that comes from main\n    run(\n        r\"sed -i '/condition: crds.enabled/{{N;s/version:.*/version: {}/;}}' charts/metallb/Chart.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        r\"sed -i '/MetalLB chart version/{{N;s/version:.*/version: {}/;}}' charts/metallb/Chart.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        r\"sed -i 's/^appVersion: .*/appVersion: v{}/g' charts/metallb/Chart.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        r\"sed -i 's/^version: .*/version: {}/g' charts/metallb/charts/crds/Chart.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        r\"sed -i 's/^appVersion: .*/appVersion: v{}/g' charts/metallb/charts/crds/Chart.yaml\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\n        r\"sed -i 's/^Current chart version is: .*/Current chart version is: `{}`/g' charts/metallb/README.md\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\"helm dependency update charts/metallb\", echo=True)\n\n    # Generate the manifests with the new version of the images\n    generatemanifests(ctx)\n\n    # Update the version in kustomize instructions\n    #\n    # TODO: Check if kustomize instructions really need the version in the\n    # website or if there is a simpler way. For now, though, we just replace the\n    # only page that mentions the version on release.\n    run(\n        r\"sed -i 's/github.com\\/metallb\\/metallb\\/config\\/native?ref=.*$/github.com\\/metallb\\/metallb\\/config\\/native?ref=v{}/g' website/content/installation/_index.md\".format(\n            version\n        )\n    )\n    run(\n        r\"sed -i 's/github.com\\/metallb\\/metallb\\/config\\/frr?ref=.*$/github.com\\/metallb\\/metallb\\/config\\/frr?ref=v{}/g' website/content/installation/_index.md\".format(\n            version\n        )\n    )\n\n    # Update the version embedded in the binary\n    run(\n        r\"perl -pi -e 's/version\\s+=.*/version = \\\"{}\\\"/g' internal/version/version.go\".format(\n            version\n        ),\n        echo=True,\n    )\n    run(\"gofmt -w internal/version/version.go\", echo=True)\n\n    res = run('grep \":main\" config/manifests/*.yaml', warn=True).stdout\n    if res:\n        raise Exit(message=\"ERROR: Found image still referring to the main tag\")\n\n\n@task\ndef test(ctx):\n    \"\"\"Run unit tests.\"\"\"\n    envtest_asset_dir = os.getcwd() + \"/dev-env/unittest\"\n    k8s_version = \"1.27.1\"\n    run(\n        \"{}/setup-envtest.sh {}\".format(envtest_asset_dir, envtest_asset_dir), echo=True\n    )\n    kubebuilder_assets = run(\n        \"{}/bin/setup-envtest use {} --bin-dir {}/bin -p path\".format(\n            envtest_asset_dir, k8s_version, envtest_asset_dir\n        )\n    ).stdout.strip()\n    run(\n        \"KUBEBUILDER_ASSETS={} go test -short ./...\".format(kubebuilder_assets),\n        echo=True,\n    )\n    run(\n        \"KUBEBUILDER_ASSETS={} go test -short -race ./...\".format(kubebuilder_assets),\n        echo=True,\n    )\n\n\n@task\ndef linttasks(ctx):\n    \"\"\"Formats tasks.py with \"black\" linter.\"\"\"\n    run(\"black tasks.py\")\n\n\n@task\ndef checkpatch(ctx):\n    # Generate a diff of all changes on this branch from origin/main\n    # and look for any added lines with 2 spaces after a period.\n    try:\n        lines = run(\n            \"git diff $(diff -u <(git rev-list --first-parent HEAD) \"\n            \" <(git rev-list --first-parent origin/main) \"\n            \" | sed -ne 's/^ //p' | head -1)..HEAD | \"\n            r\" grep '+.*\\.\\  '\"\n        )\n\n        if len(lines.stdout.strip()) > 0:\n            raise Exit(\n                message=\"ERROR: Found changed lines with 2 spaces \" \"after a period.\"\n            )\n    except UnexpectedExit:\n        # Will exit non-zero if no double-space-after-period lines are found.\n        pass\n\n\n@task(\n    help={\n        \"env\": \"Specify in which environment to run the linter . Default 'container'. Supported: 'container','host'\"\n    }\n)\ndef lint(ctx, env=\"container\"):\n    \"\"\"Run linter.\n\n    By default, this will run a golangci-lint docker image against the code.\n    However, in some environments (such as the MetalLB CI), it may be more\n    convenient to install the golangci-lint binaries on the host. This can be\n    achieved by running `inv lint --env host`.\n    \"\"\"\n    version = \"1.59.1\"\n    golangci_cmd = \"golangci-lint run --timeout 10m0s ./...\"\n\n    if env == \"container\":\n        run(\n            \"docker run --rm -v $(git rev-parse --show-toplevel):/app -w /app golangci/golangci-lint:v{} {}\".format(\n                version, golangci_cmd\n            ),\n            echo=True,\n        )\n    elif env == \"host\":\n        run(\n            \"curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v{}\".format(\n                version\n            )\n        )\n        run(golangci_cmd)\n    else:\n        raise Exit(message=\"Unsupported linter environment: {}\".format(env))\n\n\n@task(\n    help={\n        \"env\": \"Specify in which environment to run helmdocs . Default 'container'. Supported: 'container','host'\"\n    }\n)\ndef helmdocs(ctx, env=\"container\"):\n    \"\"\"Run helm-docs.\n\n    By default, this will run a helm-docs docker image against the code.\n    However, in some environments (such as the MetalLB CI), it may be more\n    convenient to install the helm-docs binaries on the host. This can be\n    achieved by running `inv helmdocs --env host`.\n    \"\"\"\n    version = \"1.10.0\"\n    cmd = \"helm-docs\"\n\n    if env == \"container\":\n        run(\n            \"docker run --rm -v $(git rev-parse --show-toplevel):/app -w /app jnorwood/helm-docs:v{} {}\".format(\n                version, cmd\n            ),\n            echo=True,\n        )\n    elif env == \"host\":\n        run(cmd)\n    else:\n        raise Exit(message=\"Unsupported helm-docs environment: {}\".format(env))\n\n\n@task(\n    help={\n        \"name\": \"name of the kind cluster to test (only kind uses).\",\n        \"export\": \"where to export kind logs.\",\n        \"kubeconfig\": \"kubeconfig location. By default, use the kubeconfig from kind.\",\n        \"system_namespaces\": \"comma separated list of Kubernetes system namespaces\",\n        \"service_pod_port\": \"port number that service pods open.\",\n        \"skip_docker\": \"don't use docker command in BGP testing.\",\n        \"focus\": \"the list of arguments to pass into as -focus\",\n        \"skip\": \"the list of arguments to pass into as -skip\",\n        \"ipv4_service_range\": \"a range of IPv4 addresses for MetalLB to use when running in layer2 mode.\",\n        \"ipv6_service_range\": \"a range of IPv6 addresses for MetalLB to use when running in layer2 mode.\",\n        \"prometheus_namespace\": \"the namespace prometheus is deployed to, to validate metrics against prometheus.\",\n        \"node_nics\": \"a list of node's interfaces separated by comma, default is kind\",\n        \"local_nics\": \"a list of bridges related node's interfaces separated by comma, default is kind\",\n        \"external_containers\": \"a comma separated list of external containers names to use for the test. (valid parameters are: ibgp-single-hop / ibgp-multi-hop / ebgp-single-hop / ebgp-multi-hop)\",\n        \"with_vrf\": \"tells if we want to run the tests against containers reacheable via linux VRFs\",\n        \"bgp_mode\": \"tells what bgp mode the cluster is using. valid values are native, frr, frr-k8s.\",\n        \"external_frr_image\": \"overrides the image used for the external frr containers used in tests\",\n        \"ginkgo_params\": \"additional ginkgo params to run the e2e tests with\",\n        \"junit_report\": \"export JUnit reports xml to file, default junit-report.xml\",\n        \"host_bgp_mode\": \"tells whether to run the host container in ebgp or ibgp mode\",\n    }\n)\ndef e2etest(\n    ctx,\n    name=\"kind\",\n    export=None,\n    kubeconfig=None,\n    system_namespaces=\"kube-system,metallb-system\",\n    service_pod_port=80,\n    skip_docker=False,\n    focus=\"\",\n    skip=\"\",\n    ipv4_service_range=None,\n    ipv6_service_range=None,\n    prometheus_namespace=\"\",\n    node_nics=\"kind\",\n    local_nics=\"kind\",\n    external_containers=\"\",\n    bgp_mode=\"\",\n    with_vrf=False,\n    external_frr_image=\"\",\n    ginkgo_params=\"\",\n    junit_report=\"junit-report.xml\",\n    host_bgp_mode=\"ibgp\",\n    frr_k8s_namespace=\"\",\n):\n    \"\"\"Run E2E tests against development cluster.\"\"\"\n    fetch_kubectl()\n    fetch_kind()\n    fetch_ginkgo()\n\n    if skip_docker:\n        opt_skip_docker = \"--skip-docker\"\n    else:\n        opt_skip_docker = \"\"\n\n    ginkgo_skip = \"\"\n    if skip:\n        ginkgo_skip = '--skip=\"' + skip + '\"'\n\n    ginkgo_focus = \"\"\n    if focus:\n        ginkgo_focus = '--focus=\"' + focus + '\"'\n\n    if kubeconfig is None:\n        validate_kind_version()\n        clusters = (\n            run(\"{} get clusters\".format(kind_path), hide=True)\n            .stdout.strip()\n            .splitlines()\n        )\n        if name in clusters:\n            kubeconfig_file = tempfile.NamedTemporaryFile()\n            kubeconfig = kubeconfig_file.name\n            run(\n                \"{} export kubeconfig --name={} --kubeconfig={}\".format(\n                    kind_path, name, kubeconfig\n                ),\n                pty=True,\n                echo=True,\n            )\n        else:\n            raise Exit(message=\"Unable to find cluster named: {}\".format(name))\n    else:\n        os.environ[\"KUBECONFIG\"] = kubeconfig\n\n    namespaces = system_namespaces.replace(\" \", \"\").split(\",\")\n    for ns in namespaces:\n        run(\n            \"{} -n {} wait --for=condition=Ready --all pods --timeout 300s\".format(\n                kubectl_path, ns\n            ),\n            hide=True,\n        )\n\n    if node_nics == \"kind\":\n        nodes = (\n            run(\n                \"{} get nodes -o jsonpath={{.items[*].metadata.name}}\".format(\n                    kubectl_path\n                ),\n                hide=True,\n            )\n            .stdout.strip()\n            .split()\n        )\n        node_nics = _get_node_nics(nodes[0])\n\n    if local_nics == \"kind\":\n        local_nics = _get_local_nics()\n\n    if ipv4_service_range is None:\n        ipv4_service_range = get_available_ips(4)\n\n    if ipv6_service_range is None:\n        ipv6_service_range = get_available_ips(6)\n\n    if export != None:\n        report_path = export\n    else:\n        report_path = \"/tmp/metallbreport{}\".format(time.time())\n\n    if prometheus_namespace != \"\":\n        prometheus_namespace = \"--prometheus-namespace=\" + prometheus_namespace\n\n    print(\"Writing reports to {}\".format(report_path))\n    os.makedirs(report_path, exist_ok=True)\n\n    if external_containers != \"\":\n        external_containers = \"--external-containers=\" + (external_containers)\n\n    if external_frr_image != \"\":\n        external_frr_image = \"--frr-image=\" + (external_frr_image)\n    testrun = run(\n        \"cd `git rev-parse --show-toplevel`/e2etest &&\"\n        \"KUBECONFIG={} {} {} --junit-report={} --timeout=3h {} {} -- --kubeconfig={} --service-pod-port={} -ipv4-service-range={} -ipv6-service-range={} {} --report-path {} {} -node-nics {} -local-nics {} {} -bgp-mode={} -with-vrf={} {} --host-bgp-mode={} --kubectl={} --frr-k8s-namespace={}\".format(\n            kubeconfig,\n            ginkgo_path,\n            ginkgo_params,\n            junit_report,\n            ginkgo_focus,\n            ginkgo_skip,\n            kubeconfig,\n            service_pod_port,\n            ipv4_service_range,\n            ipv6_service_range,\n            opt_skip_docker,\n            report_path,\n            prometheus_namespace,\n            node_nics,\n            local_nics,\n            external_containers,\n            bgp_mode,\n            with_vrf,\n            external_frr_image,\n            host_bgp_mode,\n            kubectl_path,\n            frr_k8s_namespace,\n        ),\n        warn=True,\n        echo=True,\n    )\n\n    if export != None:\n        run(\"{} export logs {}\".format(kind_path, export), warn=True)\n\n    if testrun.failed:\n        raise Exit(message=\"E2E tests failed\", code=testrun.return_code)\n\n\n@task\ndef remove_lb_exclusion_from_nodes(ctx):\n    fetch_kubectl()\n    nodes = (\n        run(\n            \"{} get nodes -o jsonpath={{.items[*].metadata.name}}\".format(kubectl_path),\n            hide=True,\n        )\n        .stdout.strip()\n        .split()\n    )\n    for node in nodes:\n        run(\n            \"{} label nodes {} node.kubernetes.io/exclude-from-external-load-balancers-\".format(\n                kubectl_path, node\n            ),\n            hide=True,\n        )\n\n    for iter in range(1, 11):\n        res = run(\n            \"{} get nodes -l node.kubernetes.io/exclude-from-external-load-balancers -o jsonpath={{.items}}\".format(\n                kubectl_path\n            ),\n            hide=True,\n        ).stdout\n        if res == \"[]\":\n            return\n        time.sleep(1)\n    raise Exception(\"not able to remove lb exclusions\", res)\n\n\n@task\ndef bumplicense(ctx):\n    \"\"\"Bumps the license header on all go files that have it missing\"\"\"\n\n    res = run(\"find . -name '*.go' | grep -v dev-env\")\n    for file in res.stdout.splitlines():\n        res = run(\"grep -q License {}\".format(file), warn=True)\n        if not res.ok:\n            run(r\"sed -i '1s/^/\\/\\/ SPDX-License-Identifier:Apache-2.0\\n\\n/' \" + file)\n\n\n@task\ndef verifylicense(ctx):\n    \"\"\"Verifies all files have the corresponding license\"\"\"\n    res = run(\"find . -name '*.go' | grep -v dev-env\", hide=\"out\")\n    no_license = False\n    for file in res.stdout.splitlines():\n        res = run(\"grep -q License {}\".format(file), warn=True)\n        if not res.ok:\n            no_license = True\n            print(\"{} is missing license\".format(file))\n    if no_license:\n        raise Exit(\n            message=\"#### Files with no license found.\\n#### Please run \"\n            \"inv bumplicense\"\n            \" to add the license header\"\n        )\n\n\n@task\ndef gomodtidy(ctx):\n    \"\"\"Runs go mod tidy\"\"\"\n    res = run(\"go mod tidy\", hide=\"out\")\n    if not res.ok:\n        raise Exit(message=\"go mod tidy failed\")\n\n\n@task\ndef generatemanifests(ctx):\n    \"\"\"Re-generates the all-in-one manifests under config/manifests\"\"\"\n    generate_manifest(ctx, bgp_type=\"frr\", output=\"config/manifests/metallb-frr.yaml\")\n    generate_manifest(\n        ctx, bgp_type=\"native\", output=\"config/manifests/metallb-native.yaml\"\n    )\n    generate_manifest(\n        ctx,\n        bgp_type=\"frr\",\n        with_prometheus=True,\n        output=\"config/manifests/metallb-frr-prometheus.yaml\",\n    )\n    generate_manifest(\n        ctx,\n        bgp_type=\"native\",\n        with_prometheus=True,\n        output=\"config/manifests/metallb-native-prometheus.yaml\",\n    )\n    generate_manifest(\n        ctx, bgp_type=\"frr-k8s\", output=\"config/manifests/metallb-frr-k8s.yaml\"\n    )\n    generate_manifest(\n        ctx,\n        bgp_type=\"frr-k8s\",\n        with_prometheus=True,\n        output=\"config/manifests/metallb-frr-k8s-prometheus.yaml\",\n    )\n\n    generate_deepcopy()\n\n    _align_helm_crds(\n        source=\"config/manifests/metallb-frr.yaml\",\n        output=\"charts/metallb/charts/crds/templates/crds.yaml\",\n    )\n\n\ndef generate_deepcopy():\n    fetch_controller_gen()\n    res = run(\n        f'{build_path}/bin/controller-gen object:headerFile=\"{LICENSE_PATH}\" paths=\"./api/...\"'\n    )\n    if not res.ok:\n        raise Exit(message=\"Failed to generate deepcopy functions\")\n\n\ndef _align_helm_crds(source, output):\n    run(\n        \"\"\"yq eval-all 'select(.kind == \"CustomResourceDefinition\")' {} > {}\"\"\".format(\n            source, output\n        )\n    )\n    run(\"sed -i 's/metallb-system/{{{{ .Release.Namespace }}}}/g' {}\".format(output))\n\n\n@task\ndef generateapidocs(ctx):\n    \"\"\"Generates the docs for the CRDs\"\"\"\n    run(\"go install github.com/elastic/crd-ref-docs@v0.0.12\")\n    run(\n        \"crd-ref-docs --source-path=./api --config=website/generatecrddoc/crdgen.yaml --templates-dir=website/generatecrddoc/template --renderer markdown --output-path=/tmp/generated_apidoc.md\"\n    )\n    run(\n        \"cat website/generatecrddoc/prefix.html /tmp/generated_apidoc.md > website/content/apis/_index.md\"\n    )\n\n\n@task(\n    help={\n        \"action\": \"The action to take to fix the uncommitted changes\",\n    }\n)\ndef checkchanges(ctx, action=\"check uncommitted files\"):\n    \"\"\"Verifies no uncommitted files are available\"\"\"\n    res = run(\"git status --porcelain\", hide=\"out\")\n    if res.stdout != \"\":\n        print(\"{} must be committed\".format(res))\n        raise Exit(\n            message=\"#### Uncommitted files found, you may need to {} ####\\n\".format(\n                action\n            )\n        )\n\n\n@task\ndef deployprometheus(ctx):\n    \"\"\"Deploys the prometheus operator under the namespace monitoring\"\"\"\n    fetch_kubectl()\n    run(\n        \"{} apply --server-side -f dev-env/kube-prometheus/manifests/setup\".format(\n            kubectl_path\n        )\n    )\n    run(\n        \"until {} get servicemonitors --all-namespaces ; do date; sleep 1; echo \"\n        \"; done\".format(kubectl_path)\n    )\n    run(\"{} apply -f dev-env/kube-prometheus/manifests/\".format(kubectl_path))\n    print(\"Waiting for prometheus pods to be running\")\n    run(\n        \"{} -n monitoring wait --for=condition=Ready --all pods --timeout 300s\".format(\n            kubectl_path\n        )\n    )\n\n\n@cache\ndef fetch_kubectl():\n    curl_command = \"curl -o {} -LO https://dl.k8s.io/release/{}/bin/$(go env GOOS)/$(go env GOARCH)/kubectl\".format(\n        kubectl_path, kubectl_version\n    )\n    get_version_command = f\"{kubectl_path} version --short\"\n    fetch_dependency(\n        kubectl_path,\n        kubectl_version,\n        curl_command,\n        get_version_command,\n        \"Client Version:\",\n    )\n\n\n@cache\ndef fetch_kind():\n    curl_command = \"curl -o {} -LO https://github.com/kubernetes-sigs/kind/releases/download/{}/kind-$(go env GOOS)-$(go env GOARCH)\".format(\n        kind_path, kind_version\n    )\n    get_version_command = f\"{kind_path} version\"\n    fetch_dependency(kind_path, kind_version, curl_command, get_version_command, \"kind\")\n\n\n@cache\ndef fetch_controller_gen():\n    fetch_command = (\n        f\"GOBIN={build_path}/bin/ GOPATH={build_path} go install sigs.k8s.io/controller-tools/cmd\"\n        f\"/controller-gen@{controller_gen_version}\"\n    )\n    get_version_command = f\"{controller_gen_path} --version\"\n    fetch_dependency(\n        controller_gen_path,\n        controller_gen_version,\n        fetch_command,\n        get_version_command,\n        \"Version:\",\n    )\n\n\n@cache\ndef fetch_ginkgo():\n    ginkgo_version = run(\n        \"go list -m -f '{{.Version}}' github.com/onsi/ginkgo/v2\",\n        warn=True,\n        hide=\"both\",\n    ).stdout\n\n    print(ginkgo_version)\n    fetch_command = (\n        f\"GOBIN={build_path}/bin/ GOPATH={build_path} go install github.com/onsi/ginkgo/v2/ginkgo@\"\n        + ginkgo_version\n    )\n    print(fetch_command)\n    print(ginkgo_path)\n    get_version_command = f\"{ginkgo_path} version\"\n    fetch_dependency(\n        ginkgo_path,\n        ginkgo_version,\n        fetch_command,\n        get_version_command,\n        \"Ginkgo Version \",\n    )\n\n\ndef fetch_dependency(\n    path: str,\n    version: str,\n    fetch_command: str,\n    get_version_command: str,\n    version_prefix_in_output: str,\n):\n    if not os.path.exists(build_path):\n        os.makedirs(build_path, mode=0o750)\n    if not os.path.exists(path):\n        run(fetch_command)\n        run(\"chmod +x {}\".format(path))\n        return\n    current_version = get_command_version(get_version_command, version_prefix_in_output)\n    if current_version == version:\n        return\n    run(fetch_command)\n    run(\"chmod +x {}\".format(path))\n\n\ndef get_command_version(get_version_command: str, version_prefix: str) -> Optional[str]:\n    version = run(get_version_command, warn=True, hide=\"both\").stdout\n    for line in version.splitlines():\n        if line.startswith(version_prefix):\n            if \":\" in line:\n                return line.split(\":\")[1].strip()\n            return line.split(\" \")[1].strip()\n\n\ndef is_ipv4(addr):\n    ip = ipaddress.ip_network(addr)\n    return ip.version == 4\n"
        },
        {
          "name": "troubleshooting",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}