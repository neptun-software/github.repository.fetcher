{
  "metadata": {
    "timestamp": 1736567542723,
    "page": 141,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "AlexxIT/go2rtc",
      "stars": 7743,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0966796875,
          "content": ".idea/\n.tmp/\n\ngo2rtc.yaml\ngo2rtc.json\n\ngo2rtc_linux*\ngo2rtc_mac*\ngo2rtc_win*\n\n0_test.go\n\n.DS_Store\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.66796875,
          "content": "# syntax=docker/dockerfile:labs\n\n# 0. Prepare images\nARG PYTHON_VERSION=\"3.11\"\nARG GO_VERSION=\"1.22\"\n\n\n# 1. Download ngrok binary (for support arm/v6)\nFROM alpine AS ngrok\nARG TARGETARCH\nARG TARGETOS\n\nADD https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-${TARGETOS}-${TARGETARCH}.tgz /\nRUN tar -xzf /ngrok-v3-stable-${TARGETOS}-${TARGETARCH}.tgz -C /bin\n\n\n# 2. Build go2rtc binary\nFROM --platform=$BUILDPLATFORM golang:${GO_VERSION}-alpine AS build\nARG TARGETPLATFORM\nARG TARGETOS\nARG TARGETARCH\n\nENV GOOS=${TARGETOS}\nENV GOARCH=${TARGETARCH}\n\nWORKDIR /build\n\nRUN apk add git\n\n# Cache dependencies\nCOPY go.mod go.sum ./\nRUN --mount=type=cache,target=/root/.cache/go-build go mod download\n\nCOPY . .\nRUN --mount=type=cache,target=/root/.cache/go-build CGO_ENABLED=0 go build -ldflags \"-s -w\" -trimpath\n\n\n# 3. Final image\nFROM python:${PYTHON_VERSION}-alpine AS base\n\n# Install ffmpeg, tini (for signal handling),\n# and other common tools for the echo source.\n# alsa-plugins-pulse for ALSA support (+0MB)\n# font-droid for FFmpeg drawtext filter (+2MB)\nRUN apk add --no-cache tini ffmpeg bash curl jq alsa-plugins-pulse font-droid\n\n# Hardware Acceleration for Intel CPU (+50MB)\nARG TARGETARCH\n\nRUN if [ \"${TARGETARCH}\" = \"amd64\" ]; then apk add --no-cache libva-intel-driver intel-media-driver; fi\n\n# Hardware: AMD and NVidia VAAPI (not sure about this)\n# RUN libva-glx mesa-va-gallium\n# Hardware: AMD and NVidia VDPAU (not sure about this)\n# RUN libva-vdpau-driver mesa-vdpau-gallium (+150MB total)\n\nCOPY --from=build /build/go2rtc /usr/local/bin/\nCOPY --from=ngrok /bin/ngrok /usr/local/bin/\n\nENTRYPOINT [\"/sbin/tini\", \"--\"]\nVOLUME /config\nWORKDIR /config\n\nCMD [\"go2rtc\", \"-config\", \"/config/go2rtc.yaml\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2022 Alexey Khit\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 69.9072265625,
          "content": "<h1 align=\"center\">\n\n  ![go2rtc](assets/logo.gif)\n  <br>\n  [![stars](https://img.shields.io/github/stars/AlexxIT/go2rtc?style=flat-square&logo=github)](https://github.com/AlexxIT/go2rtc/stargazers) \n  [![docker pulls](https://img.shields.io/docker/pulls/alexxit/go2rtc?style=flat-square&logo=docker&logoColor=white&label=pulls)](https://hub.docker.com/r/alexxit/go2rtc) \n  [![releases](https://img.shields.io/github/downloads/AlexxIT/go2rtc/total?color=blue&style=flat-square&logo=github)](https://github.com/AlexxIT/go2rtc/releases)\n  [![goreport](https://goreportcard.com/badge/github.com/AlexxIT/go2rtc)](https://goreportcard.com/report/github.com/AlexxIT/go2rtc)\n</h1>\n\nUltimate camera streaming application with support RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc.\n\n![](assets/go2rtc.png)\n\n- zero-dependency and zero-config [small app](#go2rtc-binary) for all OS (Windows, macOS, Linux, ARM)\n- zero-delay for many supported protocols (lowest possible streaming latency)\n- streaming from [RTSP](#source-rtsp), [RTMP](#source-rtmp), [DVRIP](#source-dvrip), [HTTP](#source-http) (FLV/MJPEG/JPEG/TS), [USB Cameras](#source-ffmpeg-device) and [other sources](#module-streams)\n- streaming from any sources, supported by [FFmpeg](#source-ffmpeg)\n- streaming to [RTSP](#module-rtsp), [WebRTC](#module-webrtc), [MSE/MP4](#module-mp4), [HomeKit](#module-homekit) [HLS](#module-hls) or [MJPEG](#module-mjpeg)\n- [publish](#publish-stream) any source to popular streaming services (YouTube, Telegram, etc.)\n- first project in the World with support streaming from [HomeKit Cameras](#source-homekit)\n- support H265 for WebRTC in browser (Safari only, [read more](https://github.com/AlexxIT/Blog/issues/5))\n- on the fly transcoding for unsupported codecs via [FFmpeg](#source-ffmpeg)\n- play audio files and live streams on some cameras with [speaker](#stream-to-camera)\n- multi-source 2-way [codecs negotiation](#codecs-negotiation)\n   - mixing tracks from different sources to single stream\n   - auto match client supported codecs\n   - [2-way audio](#two-way-audio) for some cameras\n- streaming from private networks via [ngrok](#module-ngrok)\n- can be [integrated to](#module-api) any smart home platform or be used as [standalone app](#go2rtc-binary)\n\n**Inspired by:**\n\n- series of streaming projects from [@deepch](https://github.com/deepch)\n- [webrtc](https://github.com/pion/webrtc) go library and whole [@pion](https://github.com/pion) team\n- [rtsp-simple-server](https://github.com/aler9/rtsp-simple-server) idea from [@aler9](https://github.com/aler9)\n- [GStreamer](https://gstreamer.freedesktop.org/) framework pipeline idea\n- [MediaSoup](https://mediasoup.org/) framework routing idea\n- HomeKit Accessory Protocol from [@brutella](https://github.com/brutella/hap)\n- creator of the project's logo [@v_novoseltsev](https://www.instagram.com/v_novoseltsev) \n\n---\n\n* [Fast start](#fast-start)\n  * [go2rtc: Binary](#go2rtc-binary)\n  * [go2rtc: Docker](#go2rtc-docker)\n  * [go2rtc: Home Assistant Add-on](#go2rtc-home-assistant-add-on)\n  * [go2rtc: Home Assistant Integration](#go2rtc-home-assistant-integration)\n  * [go2rtc: Dev version](#go2rtc-dev-version)\n* [Configuration](#configuration)\n  * [Module: Streams](#module-streams)\n    * [Two way audio](#two-way-audio)\n    * [Source: RTSP](#source-rtsp)\n    * [Source: RTMP](#source-rtmp)\n    * [Source: HTTP](#source-http)\n    * [Source: ONVIF](#source-onvif)\n    * [Source: FFmpeg](#source-ffmpeg)\n    * [Source: FFmpeg Device](#source-ffmpeg-device)\n    * [Source: Exec](#source-exec)\n    * [Source: Echo](#source-echo)\n    * [Source: Expr](#source-expr)\n    * [Source: HomeKit](#source-homekit)\n    * [Source: Bubble](#source-bubble)\n    * [Source: DVRIP](#source-dvrip)\n    * [Source: Tapo](#source-tapo)\n    * [Source: Kasa](#source-kasa)\n    * [Source: GoPro](#source-gopro)\n    * [Source: Ivideon](#source-ivideon)\n    * [Source: Hass](#source-hass)\n    * [Source: ISAPI](#source-isapi)\n    * [Source: Nest](#source-nest)\n    * [Source: Roborock](#source-roborock)\n    * [Source: WebRTC](#source-webrtc)\n    * [Source: WebTorrent](#source-webtorrent)\n    * [Incoming sources](#incoming-sources)\n    * [Stream to camera](#stream-to-camera)\n    * [Publish stream](#publish-stream)\n  * [Module: API](#module-api)\n  * [Module: RTSP](#module-rtsp)\n  * [Module: RTMP](#module-rtmp)\n  * [Module: WebRTC](#module-webrtc)\n  * [Module: HomeKit](#module-homekit)\n  * [Module: WebTorrent](#module-webtorrent)\n  * [Module: ngrok](#module-ngrok)\n  * [Module: Hass](#module-hass)\n  * [Module: MP4](#module-mp4)\n  * [Module: HLS](#module-hls)\n  * [Module: MJPEG](#module-mjpeg)\n  * [Module: Log](#module-log)\n* [Security](#security)\n* [Codecs filters](#codecs-filters)\n* [Codecs madness](#codecs-madness)\n* [Codecs negotiation](#codecs-negotiation)\n* [Projects using go2rtc](#projects-using-go2rtc)\n* [Camera experience](#cameras-experience)\n* [TIPS](#tips)\n* [FAQ](#faq)\n\n## Fast start\n\n1. Download [binary](#go2rtc-binary) or use [Docker](#go2rtc-docker) or Home Assistant [Add-on](#go2rtc-home-assistant-add-on) or [Integration](#go2rtc-home-assistant-integration)\n2. Open web interface: `http://localhost:1984/`\n\n**Optionally:**\n\n- add your [streams](#module-streams) to [config](#configuration) file\n- setup [external access](#module-webrtc) to webrtc\n\n**Developers:**\n\n- write your own [web interface](#module-api)\n- integrate [web api](#module-api) into your smart home platform\n\n### go2rtc: Binary\n\nDownload binary for your OS from [latest release](https://github.com/AlexxIT/go2rtc/releases/):\n\n- `go2rtc_win64.zip` - Windows 10+ 64-bit\n- `go2rtc_win32.zip` - Windows 7+ 32-bit\n- `go2rtc_win_arm64.zip` - Windows ARM 64-bit\n- `go2rtc_linux_amd64` - Linux 64-bit\n- `go2rtc_linux_i386` - Linux 32-bit\n- `go2rtc_linux_arm64` - Linux ARM 64-bit (ex. Raspberry 64-bit OS)\n- `go2rtc_linux_arm` - Linux ARM 32-bit (ex. Raspberry 32-bit OS)\n- `go2rtc_linux_armv6` - Linux ARMv6 (for old Raspberry 1 and Zero)\n- `go2rtc_linux_mipsel` - Linux MIPS (ex. [Xiaomi Gateway 3](https://github.com/AlexxIT/XiaomiGateway3), [Wyze cameras](https://github.com/gtxaspec/wz_mini_hacks))\n- `go2rtc_mac_amd64.zip` - macOS 10.13+ Intel 64-bit\n- `go2rtc_mac_arm64.zip` - macOS ARM 64-bit\n\nDon't forget to fix the rights `chmod +x go2rtc_xxx_xxx` on Linux and Mac.\n\n### go2rtc: Docker\n\nThe Docker container [`alexxit/go2rtc`](https://hub.docker.com/r/alexxit/go2rtc) supports multiple architectures including `amd64`, `386`, `arm64`, and `arm`. This container offers the same functionality as the [Home Assistant Add-on](#go2rtc-home-assistant-add-on) but is designed to operate independently of Home Assistant. It comes preinstalled with [FFmpeg](#source-ffmpeg), [ngrok](#module-ngrok), and [Python](#source-echo).\n\n### go2rtc: Home Assistant Add-on\n\n[![](https://my.home-assistant.io/badges/supervisor_addon.svg)](https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons)\n\n1. Install Add-On:\n    - Settings > Add-ons > Plus > Repositories > Add `https://github.com/AlexxIT/hassio-addons`\n    - go2rtc > Install > Start\n2. Setup [Integration](#module-hass)\n\n### go2rtc: Home Assistant Integration\n\n[WebRTC Camera](https://github.com/AlexxIT/WebRTC) custom component can be used on any [Home Assistant installation](https://www.home-assistant.io/installation/), including [HassWP](https://github.com/AlexxIT/HassWP) on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional.\n\n### go2rtc: Dev version\n\nLatest, but maybe unstable version:\n\n- Binary: [latest nightly release](https://nightly.link/AlexxIT/go2rtc/workflows/build/master)\n- Docker: `alexxit/go2rtc:master` or `alexxit/go2rtc:master-hardware` versions\n- Hass Add-on: `go2rtc master` or `go2rtc master hardware` versions\n\n## Configuration\n\n- by default go2rtc will search `go2rtc.yaml` in the current work directory\n- `api` server will start on default **1984 port** (TCP)\n- `rtsp` server will start on default **8554 port** (TCP)\n- `webrtc` will use port **8555** (TCP/UDP) for connections\n- `ffmpeg` will use default transcoding options\n\nConfiguration options and a complete list of settings can be found in [the wiki](https://github.com/AlexxIT/go2rtc/wiki/Configuration).\n\nAvailable modules:\n\n- [streams](#module-streams)\n- [api](#module-api) - HTTP API (important for WebRTC support)\n- [rtsp](#module-rtsp) - RTSP Server (important for FFmpeg support)\n- [webrtc](#module-webrtc) - WebRTC Server\n- [mp4](#module-mp4) - MSE, MP4 stream and MP4 snapshot Server\n- [hls](#module-hls) - HLS TS or fMP4 stream Server\n- [mjpeg](#module-mjpeg) - MJPEG Server\n- [ffmpeg](#source-ffmpeg) - FFmpeg integration\n- [ngrok](#module-ngrok) - ngrok integration (external access for private network)\n- [hass](#module-hass) - Home Assistant integration\n- [log](#module-log) - logs config\n\n### Module: Streams\n\n**go2rtc** support different stream source types. You can config one or multiple links of any type as stream source.\n\nAvailable source types:\n\n- [rtsp](#source-rtsp) - `RTSP` and `RTSPS` cameras with [two way audio](#two-way-audio) support\n- [rtmp](#source-rtmp) - `RTMP` streams\n- [http](#source-http) - `HTTP-FLV`, `MPEG-TS`, `JPEG` (snapshots), `MJPEG` streams\n- [onvif](#source-onvif) - get camera `RTSP` link and snapshot link using `ONVIF` protocol\n- [ffmpeg](#source-ffmpeg) - FFmpeg integration (`HLS`, `files` and many others)\n- [ffmpeg:device](#source-ffmpeg-device) - local USB Camera or Webcam\n- [exec](#source-exec) - get media from external app output\n- [echo](#source-echo) - get stream link from bash or python\n- [expr](#source-expr) - get stream link via built-in expression language\n- [homekit](#source-homekit) - streaming from HomeKit Camera\n- [bubble](#source-bubble) - streaming from ESeeCloud/dvr163 NVR\n- [dvrip](#source-dvrip) - streaming from DVR-IP NVR\n- [tapo](#source-tapo) - TP-Link Tapo cameras with [two way audio](#two-way-audio) support\n- [kasa](#source-tapo) - TP-Link Kasa cameras\n- [gopro](#source-gopro) - GoPro cameras\n- [ivideon](#source-ivideon) - public cameras from [Ivideon](https://tv.ivideon.com/) service\n- [hass](#source-hass) - Home Assistant integration\n- [isapi](#source-isapi) - two way audio for Hikvision (ISAPI) cameras\n- [roborock](#source-roborock) - Roborock vacuums with cameras\n- [webrtc](#source-webrtc) - WebRTC/WHEP sources\n- [webtorrent](#source-webtorrent) - WebTorrent source from another go2rtc\n\nRead more about [incoming sources](#incoming-sources)\n\n#### Two way audio\n\nSupported for sources:\n\n- [RTSP cameras](#source-rtsp) with [ONVIF Profile T](https://www.onvif.org/specs/stream/ONVIF-Streaming-Spec.pdf) (back channel connection)\n- [DVRIP](#source-dvrip) cameras\n- [TP-Link Tapo](#source-tapo) cameras\n- [Hikvision ISAPI](#source-isapi) cameras\n- [Roborock vacuums](#source-roborock) models with cameras\n- [Exec](#source-exec) audio on server\n- [Any Browser](#incoming-browser) as IP-camera\n\nTwo way audio can be used in browser with [WebRTC](#module-webrtc) technology. The browser will give access to the microphone only for HTTPS sites ([read more](https://stackoverflow.com/questions/52759992/how-to-access-camera-and-microphone-in-chrome-without-https)).\n\ngo2rtc also support [play audio](#stream-to-camera) files and live streams on this cameras.\n\n#### Source: RTSP\n\n```yaml\nstreams:\n  sonoff_camera: rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0\n  dahua_camera:\n    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif\n    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=1\n  amcrest_doorbell:\n    - rtsp://username:password@192.168.1.123:554/cam/realmonitor?channel=1&subtype=0#backchannel=0\n  unifi_camera: rtspx://192.168.1.123:7441/fD6ouM72bWoFijxK\n  glichy_camera: ffmpeg:rtsp://username:password@192.168.1.123/live/ch00_1 \n```\n\n**Recommendations**\n\n- **Amcrest Doorbell** users may want to disable two way audio, because with an active stream you won't have a call button working. You need to add `#backchannel=0` to the end of your RTSP link in YAML config file\n- **Dahua Doorbell** users may want to change backchannel [audio codec](https://github.com/AlexxIT/go2rtc/issues/52)\n- **Reolink** users may want NOT to use RTSP protocol at all, some camera models have a very awful unusable stream implementation\n- **Ubiquiti UniFi** users may want to disable HTTPS verification. Use `rtspx://` prefix instead of `rtsps://`. And don't use `?enableSrtp` [suffix](https://github.com/AlexxIT/go2rtc/issues/81)\n- **TP-Link Tapo** users may skip login and password, because go2rtc support login [without them](https://drmnsamoliu.github.io/video.html)\n- If your camera has two RTSP links - you can add both of them as sources. This is useful when streams has different codecs, as example AAC audio with main stream and PCMU/PCMA audio with second stream\n- If the stream from your camera is glitchy, try using [ffmpeg source](#source-ffmpeg). It will not add CPU load if you won't use transcoding\n- If the stream from your camera is very glitchy, try to use transcoding with [ffmpeg source](#source-ffmpeg)\n\n**Other options**\n\nFormat: `rtsp...#{param1}#{param2}#{param3}`\n\n- Add custom timeout `#timeout=30` (in seconds)\n- Ignore audio - `#media=video` or ignore video - `#media=audio` \n- Ignore two way audio API `#backchannel=0` - important for some glitchy cameras\n- Use WebSocket transport `#transport=ws...`\n\n**RTSP over WebSocket**\n\n```yaml\nstreams:\n  # WebSocket with authorization, RTSP - without\n  axis-rtsp-ws:  rtsp://192.168.1.123:4567/axis-media/media.amp?overview=0&camera=1&resolution=1280x720&videoframeskipmode=empty&Axis-Orig-Sw=true#transport=ws://user:pass@192.168.1.123:4567/rtsp-over-websocket\n  # WebSocket without authorization, RTSP - with\n  dahua-rtsp-ws: rtsp://user:pass@192.168.1.123/cam/realmonitor?channel=1&subtype=1&proto=Private3#transport=ws://192.168.1.123/rtspoverwebsocket\n```\n\n#### Source: RTMP\n\nYou can get stream from RTMP server, for example [Nginx with nginx-rtmp-module](https://github.com/arut/nginx-rtmp-module).\n\n```yaml\nstreams:\n  rtmp_stream: rtmp://192.168.1.123/live/camera1\n```\n\n#### Source: HTTP\n\nSupport Content-Type:\n\n- **HTTP-FLV** (`video/x-flv`) - same as RTMP, but over HTTP\n- **HTTP-JPEG** (`image/jpeg`) - camera snapshot link, can be converted by go2rtc to MJPEG stream\n- **HTTP-MJPEG** (`multipart/x`) - simple MJPEG stream over HTTP\n- **MPEG-TS** (`video/mpeg`) - legacy [streaming format](https://en.wikipedia.org/wiki/MPEG_transport_stream)\n\nSource also support HTTP and TCP streams with autodetection for different formats: **MJPEG**, **H.264/H.265 bitstream**, **MPEG-TS**.\n\n```yaml\nstreams:\n  # [HTTP-FLV] stream in video/x-flv format\n  http_flv: http://192.168.1.123:20880/api/camera/stream/780900131155/657617\n  \n  # [JPEG] snapshots from Dahua camera, will be converted to MJPEG stream\n  dahua_snap: http://admin:password@192.168.1.123/cgi-bin/snapshot.cgi?channel=1\n\n  # [MJPEG] stream will be proxied without modification\n  http_mjpeg: https://mjpeg.sanford.io/count.mjpeg\n\n  # [MJPEG or H.264/H.265 bitstream or MPEG-TS]\n  tcp_magic: tcp://192.168.1.123:12345\n\n  # Add custom header\n  custom_header: \"https://mjpeg.sanford.io/count.mjpeg#header=Authorization: Bearer XXX\"\n```\n\n**PS.** Dahua camera has bug: if you select MJPEG codec for RTSP second stream - snapshot won't work.\n\n#### Source: ONVIF\n\n*[New in v1.5.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0)*\n\nThe source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don't.\n\n**WebUI > Add** webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use docker, you must use \"network host\".\n\n```yaml\nstreams:\n  dahua1: onvif://admin:password@192.168.1.123\n  reolink1: onvif://admin:password@192.168.1.123:8000\n  tapo1: onvif://admin:password@192.168.1.123:2020\n```\n\n#### Source: FFmpeg\n\nYou can get any stream or file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream.\n\n- FFmpeg preistalled for **Docker** and **Hass Add-on** users\n- **Hass Add-on** users can target files from [/media](https://www.home-assistant.io/more-info/local-media/setup-media/) folder\n\nFormat: `ffmpeg:{input}#{param1}#{param2}#{param3}`. Examples:\n\n```yaml\nstreams:\n  # [FILE] all tracks will be copied without transcoding codecs\n  file1: ffmpeg:/media/BigBuckBunny.mp4\n\n  # [FILE] video will be transcoded to H264, audio will be skipped\n  file2: ffmpeg:/media/BigBuckBunny.mp4#video=h264\n\n  # [FILE] video will be copied, audio will be transcoded to pcmu\n  file3: ffmpeg:/media/BigBuckBunny.mp4#video=copy#audio=pcmu\n\n  # [HLS] video will be copied, audio will be skipped\n  hls: ffmpeg:https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8#video=copy\n\n  # [MJPEG] video will be transcoded to H264\n  mjpeg: ffmpeg:http://185.97.122.128/cgi-bin/faststream.jpg#video=h264\n\n  # [RTSP] video with rotation, should be transcoded, so select H264\n  rotate: ffmpeg:rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0#video=h264#rotate=90\n```\n\nAll trascoding formats has [built-in templates](https://github.com/AlexxIT/go2rtc/blob/master/internal/ffmpeg/ffmpeg.go): `h264`, `h265`, `opus`, `pcmu`, `pcmu/16000`, `pcmu/48000`, `pcma`, `pcma/16000`, `pcma/48000`, `aac`, `aac/16000`.\n\nBut you can override them via YAML config. You can also add your own formats to config and use them with source params.\n\n```yaml\nffmpeg:\n  bin: ffmpeg  # path to ffmpeg binary\n  h264: \"-codec:v libx264 -g:v 30 -preset:v superfast -tune:v zerolatency -profile:v main -level:v 4.1\"\n  mycodec: \"-any args that supported by ffmpeg...\"\n  myinput: \"-fflags nobuffer -flags low_delay -timeout 5000000 -i {input}\"\n  myraw: \"-ss 00:00:20\"\n```\n\n- You can use go2rtc stream name as ffmpeg input (ex. `ffmpeg:camera1#video=h264`)\n- You can use `video` and `audio` params multiple times (ex. `#video=copy#audio=copy#audio=pcmu`)\n- You can use `rotate` param with `90`, `180`, `270` or `-90` values, important with transcoding (ex. `#video=h264#rotate=90`)\n- You can use `width` and/or `height` params, important with transcoding (ex. `#video=h264#width=1280`)\n- You can use `drawtext` to add a timestamp (ex. `drawtext=x=2:y=2:fontsize=12:fontcolor=white:box=1:boxcolor=black`)\n  - This will greatly increase the CPU of the server, even with hardware acceleration\n- You can use `raw` param for any additional FFmpeg arguments (ex. `#raw=-vf transpose=1`)\n- You can use `input` param to override default input template (ex. `#input=rtsp/udp` will change RTSP transport from TCP to UDP+TCP)\n  - You can use raw input value (ex. `#input=-timeout 5000000 -i {input}`)\n  - You can add your own input templates\n\nRead more about [hardware acceleration](https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration).\n\n**PS.** It is recommended to check the available hardware in the WebUI add page.\n\n#### Source: FFmpeg Device\n\nYou can get video from any USB-camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration.\n\n- check available devices in Web interface\n- `video_size` and `framerate` must be supported by your camera!\n- for Linux supported only video for now\n- for macOS you can stream Facetime camera or whole Desktop!\n- for macOS important to set right framerate\n\nFormat: `ffmpeg:device?{input-params}#{param1}#{param2}#{param3}`\n\n```yaml\nstreams:\n  linux_usbcam:   ffmpeg:device?video=0&video_size=1280x720#video=h264\n  windows_webcam: ffmpeg:device?video=0#video=h264\n  macos_facetime: ffmpeg:device?video=0&audio=1&video_size=1280x720&framerate=30#video=h264#audio=pcma\n```\n\n**PS.** It is recommended to check the available devices in the WebUI add page.\n\n#### Source: Exec\n\nExec source can run any external application and expect data from it. Two transports are supported - **pipe** (*from [v1.5.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.5.0)*) and **RTSP**.\n\nIf you want to use **RTSP** transport - the command must contain the `{output}` argument in any place. On launch, it will be replaced by the local address of the RTSP server.\n\n**pipe** reads data from app stdout in different formats: **MJPEG**, **H.264/H.265 bitstream**, **MPEG-TS**. Also pipe can write data to app stdin in two formats: **PCMA** and **PCM/48000**.\n\nThe source can be used with:\n\n- [FFmpeg](https://ffmpeg.org/) - go2rtc ffmpeg source just a shortcut to exec source\n- [FFplay](https://ffmpeg.org/ffplay.html) - play audio on your server\n- [GStreamer](https://gstreamer.freedesktop.org/)\n- [Raspberry Pi Cameras](https://www.raspberrypi.com/documentation/computers/camera_software.html)\n- any your own software\n\nPipe commands support parameters (format: `exec:{command}#{param1}#{param2}`):\n\n- `killsignal` - signal which will be send to stop the process (numeric form)\n- `killtimeout` - time in seconds for forced termination with sigkill\n- `backchannel` - enable backchannel for two-way audio\n\n```yaml\nstreams:\n  stream: exec:ffmpeg -re -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {output}\n  picam_h264: exec:libcamera-vid -t 0 --inline -o -\n  picam_mjpeg: exec:libcamera-vid -t 0 --codec mjpeg -o -\n  pi5cam_h264: exec:libcamera-vid -t 0 --libav-format h264 -o -\n  canon: exec:gphoto2 --capture-movie --stdout#killsignal=2#killtimeout=5\n  play_pcma: exec:ffplay -fflags nobuffer -f alaw -ar 8000 -i -#backchannel=1\n  play_pcm48k: exec:ffplay -fflags nobuffer -f s16be -ar 48000 -i -#backchannel=1\n```\n\n#### Source: Echo\n\nSome sources may have a dynamic link. And you will need to get it using a bash or python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the [supported sources](#module-streams).\n\n**Docker** and **Hass Add-on** users has preinstalled `python3`, `curl`, `jq`.\n\nCheck examples in [wiki](https://github.com/AlexxIT/go2rtc/wiki/Source-Echo-examples).\n\n```yaml\nstreams:\n  apple_hls: echo:python3 hls.py https://developer.apple.com/streaming/examples/basic-stream-osx-ios5.html\n```\n\n#### Source: Expr\n\n*[New in v1.8.2](https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.2)*\n\nLike `echo` source, but uses the built-in [expr](https://github.com/antonmedv/expr) expression language ([read more](https://github.com/AlexxIT/go2rtc/blob/master/internal/expr/README.md)).\n\n#### Source: HomeKit\n\n**Important:**\n\n- You can use HomeKit Cameras **without Apple devices** (iPhone, iPad, etc.), it's just a yet another protocol\n- HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone (Apple Home) - you can't pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc - you can't pair it with iPhone\n- HomeKit device should be in same network with working [mDNS](https://en.wikipedia.org/wiki/Multicast_DNS) between device and go2rtc\n\ngo2rtc support import paired HomeKit devices from [Home Assistant](#source-hass). So you can use HomeKit camera with Hass and go2rtc simultaneously. If you using Hass, I recommend pairing devices with it, it will give you more options.\n\nYou can pair device with go2rtc on the HomeKit page. If you can't see your devices - reload the page. Also try reboot your HomeKit device (power off). If you still can't see it - you have a problems with mDNS.\n\nIf you see a device but it does not have a pair button - it is paired to some ecosystem (Apple Home, Home Assistant, HomeBridge etc). You need to delete device from that ecosystem, and it will be available for pairing. If you cannot unpair device, you will have to reset it.\n\n**Important:**\n\n- HomeKit audio uses very non-standard **AAC-ELD** codec with very non-standard params and specification violation\n- Audio can't be played in `VLC` and probably any other player\n- Audio should be transcoded for using with MSE, WebRTC, etc.\n\nRecommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP:\n\n```\nstreams:\n  aqara_g3:\n    - hass:Camera-Hub-G3-AB12\n    - ffmpeg:aqara_g3#audio=aac#audio=opus\n```\n\nRTSP link with \"normal\" audio for any player: `rtsp://192.168.1.123:8554/aqara_g3?video&audio=aac`\n\n**This source is in active development!** Tested only with [Aqara Camera Hub G3](https://www.aqara.com/eu/product/camera-hub-g3) (both EU and CN versions).\n\n#### Source: Bubble\n\n*[New in v1.6.1](https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1)*\n\nOther names: [ESeeCloud](http://www.eseecloud.com/), [dvr163](http://help.dvr163.com/).\n\n- you can skip `username`, `password`, `port`, `ch` and `stream` if they are default\n- setup separate streams for different channels and streams\n\n```yaml\nstreams:\n  camera1: bubble://username:password@192.168.1.123:34567/bubble/live?ch=0&stream=0\n```\n\n#### Source: DVRIP\n\n*[New in v1.2.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0)*\n\nOther names: DVR-IP, NetSurveillance, Sofia protocol (NETsurveillance ActiveX plugin XMeye SDK).\n\n- you can skip `username`, `password`, `port`, `channel` and `subtype` if they are default\n- setup separate streams for different channels\n- use `subtype=0` for Main stream, and `subtype=1` for Extra1 stream\n- only the TCP protocol is supported\n\n```yaml\nstreams:\n  only_stream: dvrip://username:password@192.168.1.123:34567?channel=0&subtype=0\n  only_tts: dvrip://username:password@192.168.1.123:34567?backchannel=1\n  two_way_audio:\n    - dvrip://username:password@192.168.1.123:34567?channel=0&subtype=0\n    - dvrip://username:password@192.168.1.123:34567?backchannel=1\n```\n\n#### Source: Tapo\n\n*[New in v1.2.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.2.0)*\n\n[TP-Link Tapo](https://www.tapo.com/) proprietary camera protocol with **two way audio** support.\n\n- stream quality is the same as [RTSP protocol](https://www.tapo.com/en/faq/34/)\n- use the **cloud password**, this is not the RTSP password! you do not need to add a login!\n- you can also use UPPERCASE MD5 hash from your cloud password with `admin` username\n- some new camera firmwares requires SHA256 instead of MD5\n\n```yaml\nstreams:\n  # cloud password without username\n  camera1: tapo://cloud-password@192.168.1.123\n  # admin username and UPPERCASE MD5 cloud-password hash\n  camera2: tapo://admin:UPPERCASE-MD5@192.168.1.123\n  # admin username and UPPERCASE SHA256 cloud-password hash\n  camera3: tapo://admin:UPPERCASE-SHA256@192.168.1.123\n```\n\n```bash\necho -n \"cloud password\" | md5 | awk '{print toupper($0)}'\necho -n \"cloud password\" | shasum -a 256 | awk '{print toupper($0)}'\n```\n\n#### Source: Kasa\n\n*[New in v1.7.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0)*\n\n[TP-Link Kasa](https://www.kasasmart.com/) non-standard protocol [more info](https://medium.com/@hu3vjeen/reverse-engineering-tp-link-kc100-bac4641bf1cd).\n\n- `username` - urlsafe email, `alex@gmail.com` -> `alex%40gmail.com`\n- `password` - base64password, `secret1` -> `c2VjcmV0MQ==`\n\n```yaml\nstreams:\n  kc401: kasa://username:password@192.168.1.123:19443/https/stream/mixed\n```\n\nTested: KD110, KC200, KC401, KC420WS, EC71.\n\n#### Source: GoPro\n\n*[New in v1.8.3](https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.3)*\n\nSupport streaming from [GoPro](https://gopro.com/) cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. [Read more](https://github.com/AlexxIT/go2rtc/tree/master/internal/gopro).\n\n#### Source: Ivideon\n\nSupport public cameras from service [Ivideon](https://tv.ivideon.com/).\n\n```yaml\nstreams:\n  quailcam: ivideon:100-tu5dkUPct39cTp9oNEN2B6/0\n```\n\n#### Source: Hass\n\nSupport import camera links from [Home Assistant](https://www.home-assistant.io/) config files:\n\n- [Generic Camera](https://www.home-assistant.io/integrations/generic/), setup via GUI\n- [HomeKit Camera](https://www.home-assistant.io/integrations/homekit_controller/)\n- [ONVIF](https://www.home-assistant.io/integrations/onvif/)\n- [Roborock](https://github.com/humbertogontijo/homeassistant-roborock) vacuums with camera\n\n```yaml\nhass:\n  config: \"/config\"  # skip this setting if you Hass Add-on user\n\nstreams:\n  generic_camera: hass:Camera1  # Settings > Integrations > Integration Name\n  aqara_g3: hass:Camera-Hub-G3-AB12\n```\n\n**WebRTC Cameras** (*from [v1.6.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0)*)\n\nAny cameras in WebRTC format are supported. But at the moment Home Assistant only supports some [Nest](https://www.home-assistant.io/integrations/nest/) cameras in this fomat.\n\n**Important.** The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available ram on your machine within seconds. It's recommended to use [Nest source](#source-nest) - it supports extending the stream.\n\n```yaml\nstreams:\n  # link to Home Assistant Supervised\n  hass-webrtc1: hass://supervisor?entity_id=camera.nest_doorbell\n  # link to external Hass with Long-Lived Access Tokens\n  hass-webrtc2: hass://192.168.1.123:8123?entity_id=camera.nest_doorbell&token=eyXYZ...\n```\n\n**RTSP Cameras**\n\nBy default, the Home Assistant API does not allow you to get dynamic RTSP link to a camera stream. So more cameras, like [Tuya](https://www.home-assistant.io/integrations/tuya/), and possibly others can also be imported by using [this method](https://github.com/felipecrs/hass-expose-camera-stream-source#importing-home-assistant-cameras-to-go2rtc-andor-frigate).\n\n#### Source: ISAPI\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nThis source type support only backchannel audio for Hikvision ISAPI protocol. So it should be used as second source in addition to the RTSP protocol.\n\n```yaml\nstreams:\n  hikvision1:\n    - rtsp://admin:password@192.168.1.123:554/Streaming/Channels/101\n    - isapi://admin:password@192.168.1.123:80/\n```\n\n#### Source: Nest\n\n*[New in v1.6.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.0)*\n\nCurrently only WebRTC cameras are supported.\n\nFor simplicity, it is recommended to connect the Nest/WebRTC camera to the [Home Assistant](#source-hass). But if you can somehow get the below parameters - Nest/WebRTC source will work without Hass.\n\n```yaml\nstreams:\n  nest-doorbell: nest:?client_id=***&client_secret=***&refresh_token=***&project_id=***&device_id=***\n```\n\n#### Source: Roborock\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nThis source type support Roborock vacuums with cameras. Known working models:\n\n- Roborock S6 MaxV - only video (the vacuum has no microphone)\n- Roborock S7 MaxV - video and two way audio\n- Roborock Qrevo MaxV - video and two way audio\n\nSource support load Roborock credentials from Home Assistant [custom integration](https://github.com/humbertogontijo/homeassistant-roborock) or the [core integration](https://www.home-assistant.io/integrations/roborock). Otherwise, you need to log in to your Roborock account (MiHome account is not supported). Go to: go2rtc WebUI > Add webpage. Copy `roborock://...` source for your vacuum and paste it to `go2rtc.yaml` config.\n\nIf you have graphic pin for your vacuum - add it as numeric pin (lines: 123, 456, 789) to the end of the roborock-link.\n\n#### Source: WebRTC\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nThis source type support four connection formats.\n\n**whep**\n\n[WebRTC/WHEP](https://datatracker.ietf.org/doc/draft-murillo-whep/) - is replaced by [WebRTC/WISH](https://datatracker.ietf.org/doc/charter-ietf-wish/02/) standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc.\n\n**go2rtc**\n\nThis format is only supported in go2rtc. Unlike WHEP it supports asynchronous WebRTC connection and two way audio.\n\n**openipc** (*from [v1.7.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0)*)\n\nSupport connection to [OpenIPC](https://openipc.org/) cameras.\n\n**wyze** (*from [v1.6.1](https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1)*)\n\nSupports connection to [Wyze](https://www.wyze.com/) cameras, using WebRTC protocol. You can use [docker-wyze-bridge](https://github.com/mrlt8/docker-wyze-bridge) project to get connection credentials.\n\n**kinesis** (*from [v1.6.1](https://github.com/AlexxIT/go2rtc/releases/tag/v1.6.1)*)\n\nSupports [Amazon Kinesis Video Streams](https://aws.amazon.com/kinesis/video-streams/), using WebRTC protocol. You need to specify signalling WebSocket URL with all credentials in query params, `client_id` and `ice_servers` list in [JSON format](https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer).\n\n```yaml\nstreams:\n  webrtc-whep:    webrtc:http://192.168.1.123:1984/api/webrtc?src=camera1\n  webrtc-go2rtc:  webrtc:ws://192.168.1.123:1984/api/ws?src=camera1\n  webrtc-openipc: webrtc:ws://192.168.1.123/webrtc_ws#format=openipc#ice_servers=[{\"urls\":\"stun:stun.kinesisvideo.eu-north-1.amazonaws.com:443\"}]\n  webrtc-wyze:    webrtc:http://192.168.1.123:5000/signaling/camera1?kvs#format=wyze\n  webrtc-kinesis: webrtc:wss://...amazonaws.com/?...#format=kinesis#client_id=...#ice_servers=[{...},{...}]\n```\n\n**PS.** For `kinesis` sources you can use [echo](#source-echo) to get connection params using `bash`/`python` or any other script language.\n\n#### Source: WebTorrent\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nThis source can get a stream from another go2rtc via [WebTorrent](#module-webtorrent) protocol.\n\n```yaml\nstreams:\n  webtorrent1: webtorrent:?share=huofssuxaty00izc&pwd=k3l2j9djeg8v8r7e\n```\n\n#### Incoming sources\n\nBy default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left.\n\n- Go2rtc also can accepts incoming sources in [RTSP](#module-rtsp), [RTMP](#module-rtmp), [HTTP](#source-http) and **WebRTC/WHIP** formats\n- Go2rtc won't stop such a source if it has no clients\n- You can push data only to existing stream (create stream with empty source in config)\n- You can push multiple incoming sources to same stream\n- You can push data to non empty stream, so it will have additional codecs inside\n\n**Examples**\n\n- RTSP with any codec\n  ```yaml\n  ffmpeg -re -i BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp rtsp://localhost:8554/camera1\n  ```\n- HTTP-MJPEG with MJPEG codec\n  ```yaml\n  ffmpeg -re -i BigBuckBunny.mp4 -c mjpeg -f mpjpeg http://localhost:1984/api/stream.mjpeg?dst=camera1\n  ```\n- HTTP-FLV with H264, AAC codecs\n  ```yaml\n  ffmpeg -re -i BigBuckBunny.mp4 -c copy -f flv http://localhost:1984/api/stream.flv?dst=camera1\n  ```\n- MPEG-TS with H264 codec\n  ```yaml\n  ffmpeg -re -i BigBuckBunny.mp4 -c copy -f mpegts http://localhost:1984/api/stream.ts?dst=camera1\n  ```\n\n#### Incoming: Browser\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nYou can turn the browser of any PC or mobile into an IP-camera with support video and two way audio. Or even broadcast your PC screen:\n\n1. Create empty stream in the `go2rtc.yaml`\n2. Go to go2rtc WebUI\n3. Open `links` page for you stream\n4. Select `camera+microphone` or `display+speaker` option\n5. Open `webrtc` local page (your go2rtc **should work over HTTPS!**) or `share link` via [WebTorrent](#module-webtorrent) technology (work over HTTPS by default)\n\n#### Incoming: WebRTC/WHIP\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nYou can use **OBS Studio** or any other broadcast software with [WHIP](https://www.ietf.org/archive/id/draft-ietf-wish-whip-01.html) protocol support. This standard has not yet been approved. But you can download OBS Studio [dev version](https://github.com/obsproject/obs-studio/actions/runs/3969201209):\n\n- Settings > Stream > Service: WHIP > http://192.168.1.123:1984/api/webrtc?dst=camera1\n\n#### Stream to camera\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\ngo2rtc support play audio files (ex. music or [TTS](https://www.home-assistant.io/integrations/#text-to-speech)) and live streams (ex. radio) on cameras with [two way audio](#two-way-audio) support (RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser).\n\nAPI example:\n\n```\nPOST http://localhost:1984/api/streams?dst=camera1&src=ffmpeg:http://example.com/song.mp3#audio=pcma#input=file\n```\n\n- you can stream: local files, web files, live streams or any format, supported by FFmpeg \n- you should use [ffmpeg source](#source-ffmpeg) for transcoding audio to codec, that your camera supports\n- you can check camera codecs on the go2rtc WebUI info page when the stream is active\n- some cameras support only low quality `PCMA/8000` codec (ex. [Tapo](#source-tapo))\n- it is recommended to choose higher quality formats if your camera supports them (ex. `PCMA/48000` for some Dahua cameras)\n- if you play files over http-link, you need to add `#input=file` params for transcoding, so file will be transcoded and played in real time\n- if you play live streams, you should skip `#input` param, because it is already in real time\n- you can stop active playback by calling the API with the empty `src` parameter\n- you will see one active producer and one active consumer in go2rtc WebUI info page during streaming\n\n### Publish stream\n\n*[New in v1.8.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0)*\n\nYou can publish any stream to streaming services (YouTube, Telegram, etc.) via RTMP/RTMPS. Important:\n\n- Supported codecs: H264 for video and AAC for audio\n- AAC audio is required for YouTube, videos without audio will not work\n- You don't need to enable [RTMP module](#module-rtmp) listening for this task\n\nYou can use API:\n\n```\nPOST http://localhost:1984/api/streams?src=camera1&dst=rtmps://...\n```\n\nOr config file:\n\n```yaml\npublish:\n  # publish stream \"video_audio_transcode\" to Telegram\n  video_audio_transcode:\n    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx\n  # publish stream \"audio_transcode\" to Telegram and YouTube\n  audio_transcode:\n    - rtmps://xxx-x.rtmp.t.me/s/xxxxxxxxxx:xxxxxxxxxxxxxxxxxxxxxx\n    - rtmp://xxx.rtmp.youtube.com/live2/xxxx-xxxx-xxxx-xxxx-xxxx\n\nstreams:\n  video_audio_transcode:\n    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=h264#hardware#audio=aac\n  audio_transcode:\n    - ffmpeg:rtsp://user:pass@192.168.1.123/stream1#video=copy#audio=aac\n```\n\n- **Telegram Desktop App** > Any public or private channel or group (where you admin) > Live stream > Start with... > Start streaming.\n- **YouTube** > Create > Go live > Stream latency: Ultra low-latency > Copy: Stream URL + Stream key.\n\n### Module: API\n\nThe HTTP API is the main part for interacting with the application. Default address: `http://localhost:1984/`.\n\n**Important!** go2rtc passes requests from localhost and from unix socket without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to API. If not properly configured, an attacker can gain access to your cameras and even your server.\n\n[API description](https://github.com/AlexxIT/go2rtc/tree/master/api).\n\n**Module config**\n\n- you can disable HTTP API with `listen: \"\"` and use, for example, only RTSP client/server protocol\n- you can enable HTTP API only on localhost with `listen: \"127.0.0.1:1984\"` setting\n- you can change API `base_path` and host go2rtc on your main app webserver suburl\n- all files from `static_dir` hosted on root path: `/`\n- you can use raw TLS cert/key content or path to files\n\n```yaml\napi:\n  listen: \":1984\"    # default \":1984\", HTTP API port (\"\" - disabled)\n  username: \"admin\"  # default \"\", Basic auth for WebUI\n  password: \"pass\"   # default \"\", Basic auth for WebUI\n  base_path: \"/rtc\"  # default \"\", API prefix for serve on suburl (/api => /rtc/api)\n  static_dir: \"www\"  # default \"\", folder for static files (custom web interface)\n  origin: \"*\"        # default \"\", allow CORS requests (only * supported)\n  tls_listen: \":443\" # default \"\", enable HTTPS server\n  tls_cert: |        # default \"\", PEM-encoded fullchain certificate for HTTPS\n    -----BEGIN CERTIFICATE-----\n    ...\n    -----END CERTIFICATE-----\n  tls_key: |         # default \"\", PEM-encoded private key for HTTPS\n    -----BEGIN PRIVATE KEY-----\n    ...\n    -----END PRIVATE KEY-----\n  unix_listen: \"/tmp/go2rtc.sock\"  # default \"\", unix socket listener for API\n```\n\n**PS:**\n\n- MJPEG over WebSocket plays better than native MJPEG because Chrome [bug](https://bugs.chromium.org/p/chromium/issues/detail?id=527446)\n- MP4 over WebSocket was created only for Apple iOS because it doesn't support MSE and native MP4\n\n### Module: RTSP\n\nYou can get any stream as RTSP-stream: `rtsp://192.168.1.123:8554/{stream_name}`\n\nYou can enable external password protection for your RTSP streams. Password protection always disabled for localhost calls (ex. FFmpeg or Hass on same server).\n\n```yaml\nrtsp:\n  listen: \":8554\"    # RTSP Server TCP port, default - 8554\n  username: \"admin\"  # optional, default - disabled\n  password: \"pass\"   # optional, default - disabled\n  default_query: \"video&audio\"  # optional, default codecs filters \n```\n\nBy default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the `default_query` setting:\n\n- `default_query: \"mp4\"` - MP4 compatible codecs (H264, H265, AAC)\n- `default_query: \"video=all&audio=all\"` - all tracks from all source (not all players can handle this)\n- `default_query: \"video=h264,h265\"` - only one video track (H264 or H265)\n- `default_query: \"video&audio=all\"` - only one first any video and all audio as separate tracks\n\nRead more about [codecs filters](#codecs-filters).\n\n### Module: RTMP\n\n*[New in v1.8.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.8.0)*\n\nYou can get any stream as RTMP-stream: `rtmp://192.168.1.123/{stream_name}`. Only H264/AAC codecs supported right now.\n\n[Incoming stream](#incoming-sources) in RTMP-format tested only with [OBS Studio](https://obsproject.com/) and Dahua camera. Different FFmpeg versions has differnt problems with this format. \n\n```yaml\nrtmp:\n  listen: \":1935\"  # by default - disabled!\n```\n\n### Module: WebRTC\n\nIn most cases [WebRTC](https://en.wikipedia.org/wiki/WebRTC) uses direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP.\nIt **can't pass** media data through your Nginx or Cloudflare or [Nabu Casa](https://www.nabucasa.com/) HTTP TCP connection!\nIt can automatically detects your external IP via public [STUN](https://en.wikipedia.org/wiki/STUN) server.\nIt can establish a external direct connection via [UDP hole punching](https://en.wikipedia.org/wiki/UDP_hole_punching) technology even if you not open your server to the World.\n\nBut about 10-20% of users may need to configure additional settings for external access if **mobile phone** or **go2rtc server** behing [Symmetric NAT](https://tomchen.github.io/symmetric-nat-test/).\n\n- by default, WebRTC uses both TCP and UDP on port 8555 for connections\n- you can use this port for external access\n- you can change the port in YAML config:\n\n```yaml\nwebrtc:\n  listen: \":8555\"  # address of your local server and port (TCP/UDP)\n```\n\n**Static public IP**\n\n- forward the port 8555 on your router (you can use same 8555 port or any other as external port)\n- add your external IP-address and external port to YAML config\n\n```yaml\nwebrtc:\n  candidates:\n    - 216.58.210.174:8555  # if you have static public IP-address\n```\n\n**Dynamic public IP**\n\n- forward the port 8555 on your router (you can use same 8555 port or any other as the external port)\n- add `stun` word and external port to YAML config\n  - go2rtc automatically detects your external address with STUN-server\n\n```yaml\nwebrtc:\n  candidates:\n    - stun:8555  # if you have dynamic public IP-address\n```\n\n**Private IP**\n\n- setup integration with [ngrok service](#module-ngrok)\n\n```yaml\nngrok:\n  command: ...\n```\n\n**Hard tech way 1. Own TCP-tunnel**\n\nIf you have personal [VPS](https://en.wikipedia.org/wiki/Virtual_private_server), you can create TCP-tunnel and setup in the same way as \"Static public IP\". But use your VPS IP-address in YAML config.\n\n**Hard tech way 2. Using TURN-server**\n\nIf you have personal [VPS](https://en.wikipedia.org/wiki/Virtual_private_server), you can install TURN server (e.g. [coturn](https://github.com/coturn/coturn), config [example](https://github.com/AlexxIT/WebRTC/wiki/Coturn-Example)).\n\n```yaml\nwebrtc:\n  ice_servers:\n    - urls: [stun:stun.l.google.com:19302]\n    - urls: [turn:123.123.123.123:3478]\n      username: your_user\n      credential: your_pass\n```\n\n### Module: HomeKit\n\n*[New in v1.7.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.7.0)*\n\nHomeKit module can work in two modes:\n\n- export any H264 camera to Apple HomeKit\n- transparent proxy any Apple HomeKit camera (Aqara, Eve, Eufy, etc.) back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera\n\n**Important**\n\n- HomeKit cameras supports only H264 video and OPUS audio\n\n**Minimal config**\n\n```yaml\nstreams:\n  dahua1: rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=0\nhomekit:\n  dahua1:  # same stream ID from streams list, default PIN - 19550224\n```\n\n**Full config**\n\n```yaml\nstreams:\n  dahua1:\n    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=0\n    - ffmpeg:dahua1#video=h264#hardware  # if your camera doesn't support H264, important for HomeKit\n    - ffmpeg:dahua1#audio=opus           # only OPUS audio supported by HomeKit\n\nhomekit:\n  dahua1:                   # same stream ID from streams list\n    pin: 12345678           # custom PIN, default: 19550224\n    name: Dahua camera      # custom camera name, default: generated from stream ID\n    device_id: dahua1       # custom ID, default: generated from stream ID\n    device_private: dahua1  # custom key, default: generated from stream ID\n```\n\n**Proxy HomeKit camera**\n\n- Video stream from HomeKit camera to Apple device (iPhone, AppleTV) will be transmitted directly\n- Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc\n\n```yaml\nstreams:\n  aqara1:\n    - homekit://...\n    - ffmpeg:aqara1#audio=aac#audio=opus  # optional audio transcoding\n\nhomekit:\n  aqara1:  # same stream ID from streams list\n```\n\n### Module: WebTorrent\n\n*[New in v1.3.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.3.0)*\n\nThis module support:\n\n- Share any local stream via [WebTorrent](https://webtorrent.io/) technology\n- Get any [incoming stream](#incoming-browser) from PC or mobile via [WebTorrent](https://webtorrent.io/) technology\n- Get any remote [go2rtc source](#source-webtorrent) via [WebTorrent](https://webtorrent.io/) technology\n\nSecurely and free. You do not need to open a public access to the go2rtc server. But in some cases (Symmetric NAT) you may need to set up external access to [WebRTC module](#module-webrtc).\n\nTo generate sharing link or incoming link - goto go2rtc WebUI (stream links page). This link is **temporary** and will stop working after go2rtc is restarted!\n\nYou can create permanent external links in go2rtc config:\n\n```yaml\nwebtorrent:\n  shares:\n    super-secret-share:  # share name, should be unique among all go2rtc users!\n      pwd: super-secret-password\n      src: rtsp-dahua1   # stream name from streams section\n```\n\nLink example: https://alexxit.github.io/go2rtc/#share=02SNtgjKXY&pwd=wznEQqznxW&media=video+audio\n\nTODO: article how it works...\n\n### Module: ngrok\n\nWith ngrok integration you can get external access to your streams in situations when you have Internet with private IP-address.\n\n- ngrok is pre-installed for **Docker** and **Hass Add-on** users\n- you may need external access for two different things:\n  - WebRTC stream, so you need tunnel WebRTC TCP port (ex. 8555)\n  - go2rtc web interface, so you need tunnel API HTTP port (ex. 1984)\n- ngrok support authorization for your web interface\n- ngrok automatically adds HTTPS to your web interface\n\nThe ngrok free subscription has the following limitations:\n\n- You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent (not a problem for webrtc stream)\n- You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan\n\ngo2rtc will automatically get your external TCP address (if you enable it in ngrok config) and use it with WebRTC connection (if you enable it in webrtc config).\n\nYou need to manually download the [ngrok agent app](https://ngrok.com/download) for your OS and register with the [ngrok service](https://ngrok.com/signup).\n\n**Tunnel for only WebRTC Stream**\n\nYou need to add your [ngrok authtoken](https://dashboard.ngrok.com/get-started/your-authtoken) and WebRTC TCP port to YAML:\n\n```yaml\nngrok:\n  command: ngrok tcp 8555 --authtoken eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw\n```\n\n**Tunnel for WebRTC and Web interface**\n\nYou need to create `ngrok.yaml` config file and add it to go2rtc config:\n\n```yaml\nngrok:\n  command: ngrok start --all --config ngrok.yaml\n```\n\nngrok config example:\n\n```yaml\nversion: \"2\"\nauthtoken: eW91IHNoYWxsIG5vdCBwYXNzCnlvdSBzaGFsbCBub3QgcGFzcw\ntunnels:\n  api:\n    addr: 1984  # use the same port as in go2rtc config\n    proto: http\n    basic_auth:\n      - admin:password  # you can set login/pass for your web interface\n  webrtc:\n    addr: 8555  # use the same port as in go2rtc config\n    proto: tcp\n```\n\nSee the [ngrok agent documentation](https://ngrok.com/docs/agent/config/) for more details on the ngrok configuration file.\n\n### Module: Hass\n\nThe best and easiest way to use go2rtc inside the Home Assistant is to install the custom integration [WebRTC Camera](#go2rtc-home-assistant-integration) and custom lovelace card.\n\nBut go2rtc is also compatible and can be used with [RTSPtoWebRTC](https://www.home-assistant.io/integrations/rtsp_to_webrtc/) built-in integration.\n\nYou have several options on how to add a camera to Home Assistant:\n\n1. Camera RTSP source => [Generic Camera](https://www.home-assistant.io/integrations/generic/)\n2. Camera [any source](#module-streams) => [go2rtc config](#configuration) => [Generic Camera](https://www.home-assistant.io/integrations/generic/)\n   - Install any [go2rtc](#fast-start)\n   - Add your stream to [go2rtc config](#configuration)\n   - Hass > Settings > Integrations > Add Integration > [ONVIF](https://my.home-assistant.io/redirect/config_flow_start/?domain=onvif) > Host: `127.0.0.1`, Port: `1984`\n   - Hass > Settings > Integrations > Add Integration > [Generic Camera](https://my.home-assistant.io/redirect/config_flow_start/?domain=generic) > Stream Source URL: `rtsp://127.0.0.1:8554/camera1` (change to your stream name, leave everything else as is)\n\nYou have several options on how to watch the stream from the cameras in Home Assistant:\n\n1. `Camera Entity` => `Picture Entity Card` => Technology `HLS`, codecs: `H264/H265/AAC`, poor latency.\n2. `Camera Entity` => [RTSPtoWebRTC](https://www.home-assistant.io/integrations/rtsp_to_webrtc/) => `Picture Entity Card` => Technology `WebRTC`, codecs: `H264/PCMU/PCMA/OPUS`, best latency.\n   - Install any [go2rtc](#fast-start)\n   - Hass > Settings > Integrations > Add Integration > [RTSPtoWebRTC](https://my.home-assistant.io/redirect/config_flow_start/?domain=rtsp_to_webrtc) > `http://127.0.0.1:1984/`\n   - RTSPtoWebRTC > Configure > STUN server: `stun.l.google.com:19302`\n   - Use Picture Entity or Picture Glance lovelace card\n3. `Camera Entity` or `Camera URL` => [WebRTC Camera](https://github.com/AlexxIT/WebRTC) => Technology: `WebRTC/MSE/MP4/MJPEG`, codecs: `H264/H265/AAC/PCMU/PCMA/OPUS`, best latency, best compatibility.\n   - Install and add [WebRTC Camera](https://github.com/AlexxIT/WebRTC) custom integration\n   - Use WebRTC Camera custom lovelace card\n\nYou can add camera `entity_id` to [go2rtc config](#configuration) if you need transcoding:\n\n```yaml\nstreams:\n  \"camera.hall\": ffmpeg:{input}#video=copy#audio=opus\n```\n\n**PS.** Default Home Assistant lovelace cards don't support 2-way audio. You can use 2-way audio from [Add-on Web UI](https://my.home-assistant.io/redirect/supervisor_addon/?addon=a889bffc_go2rtc&repository_url=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons). But you need use HTTPS to access the microphone. This is a browser restriction and cannot be avoided.\n\n**PS.** There is also another nice card with go2rtc support - [Frigate Lovelace Card](https://github.com/dermotduffy/frigate-hass-card).\n\n### Module: MP4\n\nProvides several features:\n\n1. MSE stream (fMP4 over WebSocket)\n2. Camera snapshots in MP4 format (single frame), can be sent to [Telegram](https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram)\n3. HTTP progressive streaming (MP4 file stream) - bad format for streaming because of high start delay. This format doesn't work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 it this case.\n\nAPI examples:\n\n- MP4 snapshot: `http://192.168.1.123:1984/api/frame.mp4?src=camera1` (H264, H265)\n- MP4 stream: `http://192.168.1.123:1984/api/stream.mp4?src=camera1` (H264, H265, AAC)\n- MP4 file: `http://192.168.1.123:1984/api/stream.mp4?src=camera1` (H264, H265*, AAC, OPUS, MP3, PCMA, PCMU, PCM)\n  - You can use `mp4`, `mp4=flac` and `mp4=all` param for codec filters\n  - You can use `duration` param in seconds (ex. `duration=15`)\n  - You can use `filename` param (ex. `filename=record.mp4`)\n  - You can use `rotate` param with `90`, `180` or `270` values\n  - You can use `scale` param with positive integer values (ex. `scale=4:3`)\n\nRead more about [codecs filters](#codecs-filters).\n\n**PS.** Rotate and scale params don't use transcoding and change video using metadata. \n\n### Module: HLS\n\n*[New in v1.1.0](https://github.com/AlexxIT/go2rtc/releases/tag/v1.1.0)*\n\n[HLS](https://en.wikipedia.org/wiki/HTTP_Live_Streaming) is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like [WebRTC](#module-webrtc), [MSE/MP4](#module-mp4).\n\nThe go2rtc implementation differs from the standards and may not work with all players.\n\nAPI examples:\n\n- HLS/TS stream: `http://192.168.1.123:1984/api/stream.m3u8?src=camera1` (H264)\n- HLS/fMP4 stream: `http://192.168.1.123:1984/api/stream.m3u8?src=camera1&mp4` (H264, H265, AAC)\n\nRead more about [codecs filters](#codecs-filters).\n\n### Module: MJPEG\n\n**Important.** For stream as MJPEG format, your source MUST contain the MJPEG codec. If your stream has a MJPEG codec - you can receive **MJPEG stream** or **JPEG snapshots** via API.\n\nYou can receive an MJPEG stream in several ways:\n\n- some cameras support MJPEG codec inside [RTSP stream](#source-rtsp) (ex. second stream for Dahua cameras)\n- some cameras has HTTP link with [MJPEG stream](#source-http)\n- some cameras has HTTP link with snapshots - go2rtc can convert them to [MJPEG stream](#source-http)\n- you can convert H264/H265 stream from your camera via [FFmpeg integraion](#source-ffmpeg)\n\nWith this example, your stream will have both H264 and MJPEG codecs:\n\n```yaml\nstreams:\n  camera1:\n    - rtsp://rtsp:12345678@192.168.1.123/av_stream/ch0\n    - ffmpeg:camera1#video=mjpeg\n```\n\nAPI examples:\n\n- MJPEG stream: `http://192.168.1.123:1984/api/stream.mjpeg?src=camera1`\n- JPEG snapshots: `http://192.168.1.123:1984/api/frame.jpeg?src=camera1`\n  - You can use `width`/`w` and/or `height`/`h` params \n  - You can use `rotate` param with `90`, `180`, `270` or `-90` values\n  - You can use `hardware`/`hw` param [read more](https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration)\n\n**PS.** This module also supports streaming to the server console (terminal) in the **animated ASCII art** format ([read more](https://github.com/AlexxIT/go2rtc/blob/master/internal/mjpeg/README.md)):\n\n[![](https://img.youtube.com/vi/sHj_3h_sX7M/mqdefault.jpg)](https://www.youtube.com/watch?v=sHj_3h_sX7M)\n\n### Module: Log\n\nYou can set different log levels for different modules.\n\n```yaml\nlog:\n  level: info  # default level\n  api: trace\n  exec: debug\n  ngrok: info\n  rtsp: warn\n  streams: error\n  webrtc: fatal\n```\n\n## Security\n\nBy default `go2rtc` starts the Web interface on port `1984` and RTSP on port `8554`, as well as use port `8555` for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on.\n\nThis is not a problem if you trust your local network as much as I do. But you can change this behaviour with a `go2rtc.yaml` config:\n\n```yaml\napi:\n  listen: \"127.0.0.1:1984\" # localhost\n\nrtsp:\n  listen: \"127.0.0.1:8554\" # localhost\n\nwebrtc:\n  listen: \":8555\" # external TCP/UDP port\n```\n\n- local access to RTSP is not a problem for [FFmpeg](#source-ffmpeg) integration, because it runs locally on your server\n- local access to API is not a problem for [Home Assistant Add-on](#go2rtc-home-assistant-add-on), because Hass runs locally on same server and Add-on Web UI protected with Hass authorization ([Ingress feature](https://www.home-assistant.io/blog/2019/04/15/hassio-ingress/))\n- external access to WebRTC TCP port is not a problem, because it used only for transmit encrypted media data\n  - anyway you need to open this port to your local network and to the Internet in order for WebRTC to work\n\nIf you need Web interface protection without Home Assistant Add-on - you need to use reverse proxy, like [Nginx](https://nginx.org/), [Caddy](https://caddyserver.com/), [ngrok](https://ngrok.com/), etc.\n\nPS. Additionally WebRTC will try to use the 8555 UDP port for transmit encrypted media. It works without problems on the local network. And sometimes also works for external access, even if you haven't opened this port on your router ([read more](https://en.wikipedia.org/wiki/UDP_hole_punching)). But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP.\n\n## Codecs filters\n\ngo2rtc can automatically detect which codecs your device supports for [WebRTC](#module-webrtc) and [MSE](#module-mp4) technologies.\n\nBut it cannot be done for [RTSP](#module-rtsp), [HTTP progressive streaming](#module-mp4), [HLS](#module-hls) technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the [FFmpeg transcoding](#source-ffmpeg).\n\nWithout filters:\n\n- RTSP will provide only the first video and only the first audio (any codec)\n- MP4 will include only compatible codecs (H264, H265, AAC)\n- HLS will output in the legacy TS format (H264 without audio)\n\nSome examples:\n\n- `rtsp://192.168.1.123:8554/camera1?mp4` - useful for recording as MP4 files (e.g. Hass or Frigate)\n- `rtsp://192.168.1.123:8554/camera1?video=h264,h265&audio=aac` - full version of the filter above\n- `rtsp://192.168.1.123:8554/camera1?video=h264&audio=aac&audio=opus` - H264 video codec and two separate audio tracks\n- `rtsp://192.168.1.123:8554/camera1?video&audio=all` - any video codec and all audio codecs as separate tracks\n- `http://192.168.1.123:1984/api/stream.m3u8?src=camera1&mp4` - HLS stream with MP4 compatible codecs (HLS/fMP4)\n- `http://192.168.1.123:1984/api/stream.m3u8?src=camera1&mp4=flac` - HLS stream with PCMA/PCMU/PCM audio support (HLS/fMP4), won't work on old devices\n- `http://192.168.1.123:1984/api/stream.mp4?src=camera1&mp4=flac` - MP4 file with PCMA/PCMU/PCM audio support, won't work on old devices (ex. iOS 12)\n- `http://192.168.1.123:1984/api/stream.mp4?src=camera1&mp4=all` - MP4 file with non standard audio codecs, won't work on some players\n\n## Codecs madness\n\n`AVC/H.264` video can be played almost anywhere. But `HEVC/H.265` has a lot of limitations in supporting with different devices and browsers. It's all about patents and money, you can't do anything about it.\n\n| Device                                                                   | WebRTC                                  | MSE                                     | HTTP*                                        | HLS                         |\n|--------------------------------------------------------------------------|-----------------------------------------|-----------------------------------------|----------------------------------------------|-----------------------------|\n| *latency*                                                                | best                                    | medium                                  | bad                                          | bad                         |\n| - Desktop Chrome 107+ <br/> - Desktop Edge <br/> - Android Chrome 107+   | H264 <br/> PCMU, PCMA <br/> OPUS        | H264, H265* <br/> AAC, FLAC* <br/> OPUS | H264, H265* <br/> AAC, FLAC* <br/> OPUS, MP3 | no                          |\n| Desktop Firefox                                                          | H264 <br/> PCMU, PCMA <br/> OPUS        | H264 <br/> AAC, FLAC* <br/> OPUS        | H264 <br/> AAC, FLAC* <br/> OPUS             | no                          |\n| - Desktop Safari 14+ <br/> - iPad Safari 14+ <br/> - iPhone Safari 17.1+ | H264, H265* <br/> PCMU, PCMA <br/> OPUS | H264, H265 <br/> AAC, FLAC*             | **no!**                                      | H264, H265 <br/> AAC, FLAC* |\n| iPhone Safari 14+                                                        | H264, H265* <br/> PCMU, PCMA <br/> OPUS | **no!**                                 | **no!**                                      | H264, H265 <br/> AAC, FLAC* |\n| macOS [Hass App][1]                                                      | no                                      | no                                      | no                                           | H264, H265 <br/> AAC, FLAC* |\n\n[1]: https://apps.apple.com/app/home-assistant/id1099568401\n\n`HTTP*` - HTTP Progressive Streaming, not related with [Progressive download](https://en.wikipedia.org/wiki/Progressive_download), because the file has no size and no end \n\n- Chrome H265: [read this](https://chromestatus.com/feature/5186511939567616) and [read this](https://github.com/StaZhu/enable-chromium-hevc-hardware-decoding)\n- Edge H265: [read this](https://www.reddit.com/r/MicrosoftEdge/comments/v9iw8k/enable_hevc_support_in_edge/)\n- Desktop Safari H265: Menu > Develop > Experimental > WebRTC H265\n- iOS Safari H265: Settings > Safari > Advanced > Experimental > WebRTC H265\n\n**Audio**\n\n- Go2rtc support [automatic repack](#built-in-transcoding) `PCMA/PCMU/PCM` codecs to `FLAC` for MSE/MP4/HLS so they will work almost anywhere\n- **WebRTC** audio codecs: `PCMU/8000`, `PCMA/8000`, `OPUS/48000/2`\n- `OPUS` and `MP3` inside **MP4** is part of the standard, but some players do not support them anyway (especially Apple)\n\n**Apple devices**\n\n- all Apple devices don't support HTTP progressive streaming\n- iPhones don't support MSE technology because it competes with the HTTP Live Streaming (HLS) technology, invented by Apple\n- HLS is the worst technology for **live** streaming, it still exists only because of iPhones\n\n**Codec names**\n\n- H264 = H.264 = AVC (Advanced Video Coding)\n- H265 = H.265 = HEVC (High Efficiency Video Coding)\n- PCMA = G.711 PCM (A-law) = PCM A-law (`alaw`)\n- PCMU = G.711 PCM (µ-law) = PCM mu-law (`mulaw`)\n- PCM = L16 = PCM signed 16-bit big-endian (`s16be`)\n- AAC = MPEG4-GENERIC\n- MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III\n\n## Built-in transcoding\n\nThere are no plans to embed complex transcoding algorithms inside go2rtc. [FFmpeg source](#source-ffmpeg) does a great job with this. Including [hardware acceleration](https://github.com/AlexxIT/go2rtc/wiki/Hardware-acceleration) support.\n\nBut go2rtc has some simple algorithms. They are turned on automatically, you do not need to set them up additionally.\n\n**PCM for MSE/MP4/HLS**\n\nGo2rtc can pack `PCMA`, `PCMU` and `PCM` codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime:\n\n```\nPCMA/PCMU => PCM => FLAC => MSE/MP4/HLS\n```\n\n**Resample PCMA/PCMU for WebRTC**\n\nBy default WebRTC support only `PCMA/8000` and `PCMU/8000`. But go2rtc can automatically resample PCMA and PCMU codec with with a different sample rate. Also go2rtc can transcode `PCM` codec to `PCMA/8000`, so WebRTC can play it:\n\n```\nPCM/xxx => PCMA/8000 => WebRTC\nPCMA/xxx => PCMA/8000 => WebRTC\nPCMU/xxx => PCMU/8000 => WebRTC\n```\n\n**Important**\n\n- FLAC codec not supported in a RTSP stream. If you using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio - you should setup transcoding to AAC codec.\n- PCMA and PCMU are VERY low quality codecs. Them support only 256! different sounds. Use them only when you have no other options.\n\n## Codecs negotiation\n\nFor example, you want to watch RTSP-stream from [Dahua IPC-K42](https://www.dahuasecurity.com/fr/products/All-Products/Network-Cameras/Wireless-Series/Wi-Fi-Series/4MP/IPC-K42) camera in your Chrome browser.\n\n- this camera support 2-way audio standard **ONVIF Profile T**\n- this camera support codecs **H264, H265** for send video, and you select `H264` in camera settings\n- this camera support codecs **AAC, PCMU, PCMA** for send audio (from mic), and you select `AAC/16000` in camera settings\n- this camera support codecs **AAC, PCMU, PCMA** for receive audio (to speaker), you don't need to select them\n- your browser support codecs **H264, VP8, VP9, AV1** for receive video, you don't need to select them\n- your browser support codecs **OPUS, PCMU, PCMA** for send and receive audio, you don't need to select them\n- you can't get camera audio directly, because its audio codecs doesn't match with your browser codecs\n  - so you decide to use transcoding via FFmpeg and add this setting to config YAML file\n  - you have chosen `OPUS/48000/2` codec, because it is higher quality than the `PCMU/8000` or `PCMA/8000`\n\nNow you have stream with two sources - **RTSP and FFmpeg**:\n\n```yaml\nstreams:\n  dahua:\n    - rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=0&unicast=true&proto=Onvif\n    - ffmpeg:rtsp://admin:password@192.168.1.123/cam/realmonitor?channel=1&subtype=0#audio=opus\n```\n\n**go2rtc** automatically match codecs for you browser and all your stream sources. This called **multi-source 2-way codecs negotiation**. And this is one of the main features of this app.\n\n![](assets/codecs.svg)\n\n**PS.** You can select `PCMU` or `PCMA` codec in camera setting and don't use transcoding at all. Or you can select `AAC` codec for main stream and `PCMU` codec for second stream and add both RTSP to YAML config, this also will work fine.\n\n## Projects using go2rtc\n\n- [Frigate 12+](https://frigate.video/) - open source NVR built around real-time AI object detection\n- [Frigate Lovelace Card](https://github.com/dermotduffy/frigate-hass-card) - custom card for Home Assistant\n- [OpenIPC](https://github.com/OpenIPC/firmware/tree/master/general/package/go2rtc) - Alternative IP Camera firmware from an open community\n- [wz_mini_hacks](https://github.com/gtxaspec/wz_mini_hacks) - Custom firmware for Wyze cameras\n- [EufyP2PStream](https://github.com/oischinger/eufyp2pstream) - A small project that provides a Video/Audio Stream from Eufy cameras that don't directly support RTSP\n- [ioBroker.euSec](https://github.com/bropat/ioBroker.eusec) - [ioBroker](https://www.iobroker.net/) adapter for control Eufy security devices\n- [MMM-go2rtc](https://github.com/Anonym-tsk/MMM-go2rtc) - MagicMirror² Module\n- [ring-mqtt](https://github.com/tsightler/ring-mqtt) - Ring devices to MQTT Bridge\n\n**Distributions**\n\n- [Alpine Linux](https://pkgs.alpinelinux.org/packages?name=go2rtc)\n- [Arch User Repository](https://linux-packages.com/aur/package/go2rtc)\n- [Gentoo](https://github.com/inode64/inode64-overlay/tree/main/media-video/go2rtc)\n- [NixOS](https://search.nixos.org/packages?query=go2rtc)\n- [Proxmox Helper Scripts](https://tteck.github.io/Proxmox/)\n- [QNAP](https://www.myqnap.org/product/go2rtc/)\n- [Synology NAS](https://synocommunity.com/package/go2rtc)\n- [Unraid](https://unraid.net/community/apps?q=go2rtc)\n\n## Cameras experience\n\n- [Dahua](https://www.dahuasecurity.com/) - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients\n- [EZVIZ](https://www.ezviz.com/) - awful RTSP protocol realisation, many bugs in SDP\n- [Hikvision](https://www.hikvision.com/) - a lot of proprietary streaming technologies\n- [Reolink](https://reolink.com/) - some models has awful unusable RTSP realisation and not best RTMP alternative (I recommend that you contact Reolink support for new firmware), few settings\n- [Sonoff](https://sonoff.tech/) - very low stream quality, no settings, not best protocol implementation\n- [TP-Link](https://www.tp-link.com/) - few streaming clients, packet loss?\n- Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks (usual has `/live/ch00_1` in RTSP URL) - awful but usable RTSP protocol realisation, low stream quality, few settings, packet loss?\n\n## TIPS\n\n**Using apps for low RTSP delay**\n\n- `ffplay -fflags nobuffer -flags low_delay \"rtsp://192.168.1.123:8554/camera1\"`\n- VLC > Preferences > Input / Codecs > Default Caching Level: Lowest Latency\n\n**Snapshots to Telegram**\n\n[read more](https://github.com/AlexxIT/go2rtc/wiki/Snapshot-to-Telegram)\n\n## FAQ\n\n**Q. What's the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC?**\n\n**go2rtc** is a new version of the server-side [WebRTC Camera](https://github.com/AlexxIT/WebRTC) integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant [RTSPtoWebRTC](https://www.home-assistant.io/integrations/rtsp_to_webrtc/) integration. So you [can use](#module-hass) default lovelace Picture Entity or Picture Glance.\n\n**Q. Should I use go2rtc addon or WebRTC Camera integration?**\n\n**go2rtc** is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time the Hass is rebooted - all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks.\n\nBasic users can use **WebRTC Camera** integration. Advanced users can use go2rtc addon or Frigate 12+ addon.\n\n**Q. Which RTSP link should I use inside Hass?**\n\nYou can use direct link to your cameras there (as you always do). **go2rtc** support zero-config feature. You may leave `streams` config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from **go2rtc**.\n\nAlso you can specify your streams in **go2rtc** [config file](#configuration) and use RTSP links to this addon. With additional features: multi-source [codecs negotiation](#codecs-negotiation) or FFmpeg [transcoding](#source-ffmpeg) for unsupported codecs. Or use them as source for Frigate. And your cameras will have one connection from **go2rtc**. And **go2rtc** will have multiple connection - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols.\n\nUse any config what you like.\n\n**Q. What about lovelace card with support 2-way audio?**\n\nAt this moment I am focused on improving stability and adding new features to **go2rtc**. Maybe someone could write such a card themselves. It's not difficult, I have [some sketches](https://github.com/AlexxIT/go2rtc/blob/master/www/webrtc.html).\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.6953125,
          "content": "module github.com/AlexxIT/go2rtc\n\ngo 1.20\n\nrequire (\n\tgithub.com/asticode/go-astits v1.13.0\n\tgithub.com/expr-lang/expr v1.16.9\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/miekg/dns v1.1.62\n\tgithub.com/pion/ice/v2 v2.3.37\n\tgithub.com/pion/interceptor v0.1.37\n\tgithub.com/pion/rtcp v1.2.15\n\tgithub.com/pion/rtp v1.8.10\n\tgithub.com/pion/sdp/v3 v3.0.9\n\tgithub.com/pion/srtp/v2 v2.0.20\n\tgithub.com/pion/stun v0.6.1\n\tgithub.com/pion/webrtc/v3 v3.3.5\n\tgithub.com/rs/zerolog v1.33.0\n\tgithub.com/sigurn/crc16 v0.0.0-20240131213347-83fcde1e29d1\n\tgithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/tadglines/go-pkgs v0.0.0-20210623144937-b983b20f54f9\n\tgolang.org/x/crypto v0.31.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/asticode/go-astikit v0.45.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/kr/pretty v0.3.1 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/pion/datachannel v1.5.10 // indirect\n\tgithub.com/pion/dtls/v2 v2.2.12 // indirect\n\tgithub.com/pion/logging v0.2.2 // indirect\n\tgithub.com/pion/mdns v0.0.12 // indirect\n\tgithub.com/pion/randutil v0.1.0 // indirect\n\tgithub.com/pion/sctp v1.8.35 // indirect\n\tgithub.com/pion/transport/v2 v2.2.10 // indirect\n\tgithub.com/pion/transport/v3 v3.0.7 // indirect\n\tgithub.com/pion/turn/v2 v2.1.6 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/wlynxg/anet v0.0.5 // indirect\n\tgolang.org/x/mod v0.20.0 // indirect\n\tgolang.org/x/net v0.33.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/tools v0.24.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 15.6923828125,
          "content": "github.com/asticode/go-astikit v0.30.0/go.mod h1:h4ly7idim1tNhaVkdVBeXQZEE3L0xblP7fCWbgwipF0=\ngithub.com/asticode/go-astikit v0.45.0 h1:08to/jrbod9tchF2bJ9moW+RTDK7DBUxLdIeSE7v7Sw=\ngithub.com/asticode/go-astikit v0.45.0/go.mod h1:h4ly7idim1tNhaVkdVBeXQZEE3L0xblP7fCWbgwipF0=\ngithub.com/asticode/go-astits v1.13.0 h1:XOgkaadfZODnyZRR5Y0/DWkA9vrkLLPLeeOvDwfKZ1c=\ngithub.com/asticode/go-astits v1.13.0/go.mod h1:QSHmknZ51pf6KJdHKZHJTLlMegIrhega3LPWz3ND/iI=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/expr-lang/expr v1.16.9 h1:WUAzmR0JNI9JCiF0/ewwHB1gmcGw5wW7nWt8gc6PpCI=\ngithub.com/expr-lang/expr v1.16.9/go.mod h1:8/vRC7+7HBzESEqt5kKpYXxrxkr31SaO8r40VO/1IT4=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/google/uuid v1.3.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/pion/datachannel v1.5.10 h1:ly0Q26K1i6ZkGf42W7D4hQYR90pZwzFOjTq5AuCKk4o=\ngithub.com/pion/datachannel v1.5.10/go.mod h1:p/jJfC9arb29W7WrxyKbepTU20CFgyx5oLo8Rs4Py/M=\ngithub.com/pion/dtls/v2 v2.2.7/go.mod h1:8WiMkebSHFD0T+dIU+UeBaoV7kDhOW5oDCzZ7WZ/F9s=\ngithub.com/pion/dtls/v2 v2.2.12 h1:KP7H5/c1EiVAAKUmXyCzPiQe5+bCJrpOeKg/L05dunk=\ngithub.com/pion/dtls/v2 v2.2.12/go.mod h1:d9SYc9fch0CqK90mRk1dC7AkzzpwJj6u2GU3u+9pqFE=\ngithub.com/pion/ice/v2 v2.3.37 h1:ObIdaNDu1rCo7hObhs34YSBcO7fjslJMZV0ux+uZWh0=\ngithub.com/pion/ice/v2 v2.3.37/go.mod h1:mBF7lnigdqgtB+YHkaY/Y6s6tsyRyo4u4rPGRuOjUBQ=\ngithub.com/pion/interceptor v0.1.37 h1:aRA8Zpab/wE7/c0O3fh1PqY0AJI3fCSEM5lRWJVorwI=\ngithub.com/pion/interceptor v0.1.37/go.mod h1:JzxbJ4umVTlZAf+/utHzNesY8tmRkM2lVmkS82TTj8Y=\ngithub.com/pion/logging v0.2.2 h1:M9+AIj/+pxNsDfAT64+MAVgJO0rsyLnoJKCqf//DoeY=\ngithub.com/pion/logging v0.2.2/go.mod h1:k0/tDVsRCX2Mb2ZEmTqNa7CWsQPc+YYCB7Q+5pahoms=\ngithub.com/pion/mdns v0.0.12 h1:CiMYlY+O0azojWDmxdNr7ADGrnZ+V6Ilfner+6mSVK8=\ngithub.com/pion/mdns v0.0.12/go.mod h1:VExJjv8to/6Wqm1FXK+Ii/Z9tsVk/F5sD/N70cnYFbk=\ngithub.com/pion/randutil v0.1.0 h1:CFG1UdESneORglEsnimhUjf33Rwjubwj6xfiOXBa3mA=\ngithub.com/pion/randutil v0.1.0/go.mod h1:XcJrSMMbbMRhASFVOlj/5hQial/Y8oH/HVo7TBZq+j8=\ngithub.com/pion/rtcp v1.2.12/go.mod h1:sn6qjxvnwyAkkPzPULIbVqSKI5Dv54Rv7VG0kNxh9L4=\ngithub.com/pion/rtcp v1.2.15 h1:LZQi2JbdipLOj4eBjK4wlVoQWfrZbh3Q6eHtWtJBZBo=\ngithub.com/pion/rtcp v1.2.15/go.mod h1:jlGuAjHMEXwMUHK78RgX0UmEJFV4zUKOFHR7OP+D3D0=\ngithub.com/pion/rtp v1.8.3/go.mod h1:pBGHaFt/yW7bf1jjWAoUjpSNoDnw98KTMg+jWWvziqU=\ngithub.com/pion/rtp v1.8.10 h1:puphjdbjPB+L+NFaVuZ5h6bt1g5q4kFIoI+r5q/g0CU=\ngithub.com/pion/rtp v1.8.10/go.mod h1:8uMBJj32Pa1wwx8Fuv/AsFhn8jsgw+3rUC2PfoBZ8p4=\ngithub.com/pion/sctp v1.8.35 h1:qwtKvNK1Wc5tHMIYgTDJhfZk7vATGVHhXbUDfHbYwzA=\ngithub.com/pion/sctp v1.8.35/go.mod h1:EcXP8zCYVTRy3W9xtOF7wJm1L1aXfKRQzaM33SjQlzg=\ngithub.com/pion/sdp/v3 v3.0.9 h1:pX++dCHoHUwq43kuwf3PyJfHlwIj4hXA7Vrifiq0IJY=\ngithub.com/pion/sdp/v3 v3.0.9/go.mod h1:B5xmvENq5IXJimIO4zfp6LAe1fD9N+kFv+V/1lOdz8M=\ngithub.com/pion/srtp/v2 v2.0.20 h1:HNNny4s+OUmG280ETrCdgFndp4ufx3/uy85EawYEhTk=\ngithub.com/pion/srtp/v2 v2.0.20/go.mod h1:0KJQjA99A6/a0DOVTu1PhDSw0CXF2jTkqOoMg3ODqdA=\ngithub.com/pion/stun v0.6.1 h1:8lp6YejULeHBF8NmV8e2787BogQhduZugh5PdhDyyN4=\ngithub.com/pion/stun v0.6.1/go.mod h1:/hO7APkX4hZKu/D0f2lHzNyvdkTGtIy3NDmLR7kSz/8=\ngithub.com/pion/transport/v2 v2.2.1/go.mod h1:cXXWavvCnFF6McHTft3DWS9iic2Mftcz1Aq29pGcU5g=\ngithub.com/pion/transport/v2 v2.2.3/go.mod h1:q2U/tf9FEfnSBGSW6w5Qp5PFWRLRj3NjLhCCgpRK4p0=\ngithub.com/pion/transport/v2 v2.2.4/go.mod h1:q2U/tf9FEfnSBGSW6w5Qp5PFWRLRj3NjLhCCgpRK4p0=\ngithub.com/pion/transport/v2 v2.2.10 h1:ucLBLE8nuxiHfvkFKnkDQRYWYfp8ejf4YBOPfaQpw6Q=\ngithub.com/pion/transport/v2 v2.2.10/go.mod h1:sq1kSLWs+cHW9E+2fJP95QudkzbK7wscs8yYgQToO5E=\ngithub.com/pion/transport/v3 v3.0.1/go.mod h1:UY7kiITrlMv7/IKgd5eTUcaahZx5oUN3l9SzK5f5xE0=\ngithub.com/pion/transport/v3 v3.0.7 h1:iRbMH05BzSNwhILHoBoAPxoB9xQgOaJk+591KC9P1o0=\ngithub.com/pion/transport/v3 v3.0.7/go.mod h1:YleKiTZ4vqNxVwh77Z0zytYi7rXHl7j6uPLGhhz9rwo=\ngithub.com/pion/turn/v2 v2.1.3/go.mod h1:huEpByKKHix2/b9kmTAM3YoX6MKP+/D//0ClgUYR2fY=\ngithub.com/pion/turn/v2 v2.1.6 h1:Xr2niVsiPTB0FPtt+yAWKFUkU1eotQbGgpTIld4x1Gc=\ngithub.com/pion/turn/v2 v2.1.6/go.mod h1:huEpByKKHix2/b9kmTAM3YoX6MKP+/D//0ClgUYR2fY=\ngithub.com/pion/webrtc/v3 v3.3.5 h1:ZsSzaMz/i9nblPdiAkZoP+E6Kmjw+jnyq3bEmU3EtRg=\ngithub.com/pion/webrtc/v3 v3.3.5/go.mod h1:liNa+E1iwyzyXqNUwvoMRNQ10x8h8FOeJKL8RkIbamE=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/profile v1.4.0/go.mod h1:NWz/XGvpEW1FyYQ7fCx4dqYBLlfTcE+A9FLAkNKqjFE=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=\ngithub.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=\ngithub.com/sigurn/crc16 v0.0.0-20240131213347-83fcde1e29d1 h1:NVK+OqnavpyFmUiKfUMHrpvbCi2VFoWTrcpI7aDaJ2I=\ngithub.com/sigurn/crc16 v0.0.0-20240131213347-83fcde1e29d1/go.mod h1:9/etS5gpQq9BJsJMWg1wpLbfuSnkm8dPF6FdW2JXVhA=\ngithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f h1:1R9KdKjCNSd7F8iGTxIpoID9prlYH8nuNYKt0XvweHA=\ngithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f/go.mod h1:vQhwQ4meQEDfahT5kd61wLAF5AAeh5ZPLVI4JJ/tYo8=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tadglines/go-pkgs v0.0.0-20210623144937-b983b20f54f9 h1:aeN+ghOV0b2VCmKKO3gqnDQ8mLbpABZgRR2FVYx4ouI=\ngithub.com/tadglines/go-pkgs v0.0.0-20210623144937-b983b20f54f9/go.mod h1:roo6cZ/uqpwKMuvPG0YmzI5+AmUiMWfjCBZpGXqbTxE=\ngithub.com/wlynxg/anet v0.0.3/go.mod h1:eay5PRQr7fIVAMbTbchTnO9gG65Hg/uYGdc7mguHxoA=\ngithub.com/wlynxg/anet v0.0.5 h1:J3VJGi1gvo0JwZ/P1/Yc/8p63SoW98B5dHkYDmpgvvU=\ngithub.com/wlynxg/anet v0.0.5/go.mod h1:eay5PRQr7fIVAMbTbchTnO9gG65Hg/uYGdc7mguHxoA=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.8.0/go.mod h1:mRqEX+O9/h5TFCrQhkgjo2yKi0yYA+9ecGkdQoHrywE=\ngolang.org/x/crypto v0.12.0/go.mod h1:NF0Gs7EO5K4qLn+Ylc+fih8BSTeIjAP05siRnAh98yw=\ngolang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.21.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.14.0/go.mod h1:PpSgVXXLK0OxS0F31C1/tv6XNguvCrnXIDrFMspZIUI=\ngolang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.9.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.16.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.11.0/go.mod h1:zC9APTIj3jG3FdV/Ons+XE1riIZXG4aZ4GTHiPZJPIU=\ngolang.org/x/term v0.16.0/go.mod h1:yn7UURbUtPyrVJPGPq404EukNFxcm/foM+bV/bfcDsY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.12.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=\ngolang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=\ngolang.org/x/tools v0.23.0 h1:SGsXPZ+2l4JsgaCKkx+FQ9YZ5XEtA1GZYuoDjenLjvg=\ngolang.org/x/tools v0.23.0/go.mod h1:pnu6ufv6vQkll6szChhK3C3L/ruaIv5eBeztNG8wtsI=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngolang.org/x/tools v0.25.0 h1:oFU9pkj/iJgs+0DT+VMHrx+oBKs/LJMV+Uvg78sl+fE=\ngolang.org/x/tools v0.25.0/go.mod h1:/vtpO8WL1N9cQC3FN5zPqb//fRXskFHbLKk4OW1Q7rg=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "hardware.Dockerfile",
          "type": "blob",
          "size": 2.076171875,
          "content": "# syntax=docker/dockerfile:labs\n\n# 0. Prepare images\n# only debian 13 (trixie) has latest ffmpeg\n# https://packages.debian.org/trixie/ffmpeg\nARG DEBIAN_VERSION=\"trixie-slim\"\nARG GO_VERSION=\"1.22-bookworm\"\nARG NGROK_VERSION=\"3\"\n\nFROM debian:${DEBIAN_VERSION} AS base\nFROM golang:${GO_VERSION} AS go\nFROM ngrok/ngrok:${NGROK_VERSION} AS ngrok\n\n\n# 1. Build go2rtc binary\nFROM --platform=$BUILDPLATFORM go AS build\nARG TARGETPLATFORM\nARG TARGETOS\nARG TARGETARCH\n\nENV GOOS=${TARGETOS}\nENV GOARCH=${TARGETARCH}\n\nWORKDIR /build\n\n# Cache dependencies\nCOPY go.mod go.sum ./\nRUN --mount=type=cache,target=/root/.cache/go-build go mod download\n\nCOPY . .\nRUN --mount=type=cache,target=/root/.cache/go-build CGO_ENABLED=0 go build -ldflags \"-s -w\" -trimpath\n\n\n# 2. Collect all files\nFROM scratch AS rootfs\n\nCOPY --link --from=build /build/go2rtc /usr/local/bin/\nCOPY --link --from=ngrok /bin/ngrok /usr/local/bin/\n\n# 3. Final image\nFROM base\n# Prepare apt for buildkit cache\nRUN rm -f /etc/apt/apt.conf.d/docker-clean \\\n  && echo 'Binary::apt::APT::Keep-Downloaded-Packages \"true\";' >/etc/apt/apt.conf.d/keep-cache\n# Install ffmpeg, bash (for run.sh), tini (for signal handling),\n# and other common tools for the echo source.\n# non-free for Intel QSV support (not used by go2rtc, just for tests)\n# mesa-va-drivers for AMD APU\n# libasound2-plugins for ALSA support\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    echo 'deb http://deb.debian.org/debian trixie non-free' > /etc/apt/sources.list.d/debian-non-free.list && \\\n    apt-get -y update && apt-get -y install tini ffmpeg \\\n        python3 curl jq \\\n        intel-media-va-driver-non-free \\\n        mesa-va-drivers \\\n        libasound2-plugins && \\\n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\nCOPY --link --from=rootfs / /\n\n\n\nENTRYPOINT [\"/usr/bin/tini\", \"--\"]\nVOLUME /config\nWORKDIR /config\n# https://github.com/NVIDIA/nvidia-docker/wiki/Installation-(Native-GPU-Support)\nENV NVIDIA_VISIBLE_DEVICES all\nENV NVIDIA_DRIVER_CAPABILITIES compute,video,utility\n\nCMD [\"go2rtc\", \"-config\", \"/config/go2rtc.yaml\"]\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 2.880859375,
          "content": "package main\n\nimport (\n\t\"github.com/AlexxIT/go2rtc/internal/api\"\n\t\"github.com/AlexxIT/go2rtc/internal/api/ws\"\n\t\"github.com/AlexxIT/go2rtc/internal/app\"\n\t\"github.com/AlexxIT/go2rtc/internal/bubble\"\n\t\"github.com/AlexxIT/go2rtc/internal/debug\"\n\t\"github.com/AlexxIT/go2rtc/internal/doorbird\"\n\t\"github.com/AlexxIT/go2rtc/internal/dvrip\"\n\t\"github.com/AlexxIT/go2rtc/internal/echo\"\n\t\"github.com/AlexxIT/go2rtc/internal/exec\"\n\t\"github.com/AlexxIT/go2rtc/internal/expr\"\n\t\"github.com/AlexxIT/go2rtc/internal/ffmpeg\"\n\t\"github.com/AlexxIT/go2rtc/internal/gopro\"\n\t\"github.com/AlexxIT/go2rtc/internal/hass\"\n\t\"github.com/AlexxIT/go2rtc/internal/hls\"\n\t\"github.com/AlexxIT/go2rtc/internal/homekit\"\n\t\"github.com/AlexxIT/go2rtc/internal/http\"\n\t\"github.com/AlexxIT/go2rtc/internal/isapi\"\n\t\"github.com/AlexxIT/go2rtc/internal/ivideon\"\n\t\"github.com/AlexxIT/go2rtc/internal/mjpeg\"\n\t\"github.com/AlexxIT/go2rtc/internal/mp4\"\n\t\"github.com/AlexxIT/go2rtc/internal/mpegts\"\n\t\"github.com/AlexxIT/go2rtc/internal/nest\"\n\t\"github.com/AlexxIT/go2rtc/internal/ngrok\"\n\t\"github.com/AlexxIT/go2rtc/internal/onvif\"\n\t\"github.com/AlexxIT/go2rtc/internal/roborock\"\n\t\"github.com/AlexxIT/go2rtc/internal/rtmp\"\n\t\"github.com/AlexxIT/go2rtc/internal/rtsp\"\n\t\"github.com/AlexxIT/go2rtc/internal/srtp\"\n\t\"github.com/AlexxIT/go2rtc/internal/streams\"\n\t\"github.com/AlexxIT/go2rtc/internal/tapo\"\n\t\"github.com/AlexxIT/go2rtc/internal/v4l2\"\n\t\"github.com/AlexxIT/go2rtc/internal/webrtc\"\n\t\"github.com/AlexxIT/go2rtc/internal/webtorrent\"\n\t\"github.com/AlexxIT/go2rtc/pkg/shell\"\n)\n\nfunc main() {\n\tapp.Version = \"1.9.8\"\n\n\t// 1. Core modules: app, api/ws, streams\n\n\tapp.Init() // init config and logs\n\n\tapi.Init() // init API before all others\n\tws.Init()  // init WS API endpoint\n\n\tstreams.Init() // streams module\n\n\t// 2. Main sources and servers\n\n\trtsp.Init()   // rtsp source, RTSP server\n\twebrtc.Init() // webrtc source, WebRTC server\n\n\t// 3. Main API\n\n\tmp4.Init()   // MP4 API\n\thls.Init()   // HLS API\n\tmjpeg.Init() // MJPEG API\n\n\t// 4. Other sources and servers\n\n\thass.Init()       // hass source, Hass API server\n\tonvif.Init()      // onvif source, ONVIF API server\n\twebtorrent.Init() // webtorrent source, WebTorrent module\n\n\t// 5. Other sources\n\n\trtmp.Init()     // rtmp source\n\texec.Init()     // exec source\n\tffmpeg.Init()   // ffmpeg source\n\techo.Init()     // echo source\n\tivideon.Init()  // ivideon source\n\thttp.Init()     // http/tcp source\n\tdvrip.Init()    // dvrip source\n\ttapo.Init()     // tapo source\n\tisapi.Init()    // isapi source\n\tmpegts.Init()   // mpegts passive source\n\troborock.Init() // roborock source\n\thomekit.Init()  // homekit source\n\tnest.Init()     // nest source\n\tbubble.Init()   // bubble source\n\texpr.Init()     // expr source\n\tgopro.Init()    // gopro source\n\tdoorbird.Init() // doorbird source\n\tv4l2.Init()     // v4l2 source\n\n\t// 6. Helper modules\n\n\tngrok.Init() // ngrok module\n\tsrtp.Init()  // SRTP server\n\tdebug.Init() // debug API\n\n\t// 7. Go\n\n\tshell.RunUntilSignal()\n}\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.6630859375,
          "content": "{\n  \"devDependencies\": {\n    \"eslint\": \"^8.44.0\",\n    \"eslint-plugin-html\": \"^7.1.0\"\n  },\n  \"eslintConfig\": {\n    \"env\": {\n      \"browser\": true,\n      \"es6\": true\n    },\n    \"parserOptions\": {\n      \"ecmaVersion\": 2017,\n      \"sourceType\": \"module\"\n    },\n    \"rules\": {\n      \"no-var\": \"error\",\n      \"no-undef\": \"error\",\n      \"no-unused-vars\": \"warn\",\n      \"prefer-const\": \"error\",\n      \"quotes\": [\n        \"error\",\n        \"single\"\n      ],\n      \"semi\": \"error\"\n    },\n    \"plugins\": [\n      \"html\"\n    ],\n    \"overrides\": [\n      {\n        \"files\": [\n          \"*.html\"\n        ],\n        \"parserOptions\": {\n          \"sourceType\": \"script\"\n        }\n      }\n    ]\n  }\n}"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "website",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}