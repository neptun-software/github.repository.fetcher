{
  "metadata": {
    "timestamp": 1736567548158,
    "page": 144,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Workiva/go-datastructures",
      "stars": 7721,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "*.out\n*.test\n.idea\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.423828125,
          "content": "FROM golang:1.16-alpine3.13 AS build-go\n\nARG GIT_SSH_KEY\nARG KNOWN_HOSTS_CONTENT\nWORKDIR /go/src/github.com/Workiva/go-datastructures/\nADD . /go/src/github.com/Workiva/go-datastructures/\n\nARG GOPATH=/go/\nENV PATH $GOPATH/bin:$PATH\nRUN echo \"Starting the script section\" && \\\n    go mod vendor && \\\n    echo \"script section completed\"\n\nARG BUILD_ARTIFACTS_DEPENDENCIES=/go/src/github.com/Workiva/go-datastructures/go.mod\n\nFROM scratch\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.71875,
          "content": "go-datastructures\n=================\n\nGo-datastructures is a collection of useful, performant, and threadsafe Go\ndatastructures.\n\n### NOTE: only tested with Go 1.3+.\n\n#### Augmented Tree\n\nInterval tree for collision in n-dimensional ranges.  Implemented via a\nred-black augmented tree.  Extra dimensions are handled in simultaneous\ninserts/queries to save space although this may result in suboptimal time\ncomplexity.  Intersection determined using bit arrays.  In a single dimension,\ninserts, deletes, and queries should be in O(log n) time.\n\n#### Bitarray\n\nBitarray used to detect existence without having to resort to hashing with\nhashmaps.  Requires entities have a uint64 unique identifier.  Two\nimplementations exist, regular and sparse.  Sparse saves a great deal of space\nbut insertions are O(log n).  There are some useful functions on the BitArray\ninterface to detect intersection between two bitarrays. This package also\nincludes bitmaps of length 32 and 64 that provide increased speed and O(1) for\nall operations by storing the bitmaps in unsigned integers rather than arrays.\n\n#### Futures\n\nA helpful tool to send a \"broadcast\" message to listeners.  Channels have the\nissue that once one listener takes a message from a channel the other listeners\naren't notified.  There were many cases when I wanted to notify many listeners\nof a single event and this package helps.\n\n#### Queue\n\nPackage contains both a normal and priority queue.  Both implementations never\nblock on send and grow as much as necessary.  Both also only return errors if\nyou attempt to push to a disposed queue and will not panic like sending a\nmessage on a closed channel.  The priority queue also allows you to place items\nin priority order inside the queue.  If you give a useful hint to the regular\nqueue, it is actually faster than a channel.  The priority queue is somewhat\nslow currently and targeted for an update to a Fibonacci heap.\n\nAlso included in the queue package is a MPMC threadsafe ring buffer. This is a\nblock full/empty queue, but will return a blocked thread if the queue is\ndisposed while a thread is blocked.  This can be used to synchronize goroutines\nand ensure goroutines quit so objects can be GC'd.  Threadsafety is achieved\nusing only CAS operations making this queue quite fast.  Benchmarks can be found\nin that package.\n\n#### Fibonacci Heap\n\nA standard Fibonacci heap providing the usual operations. Can be useful in executing Dijkstra or Prim's algorithms in the theoretically minimal time. Also useful as a general-purpose priority queue. The special thing about Fibonacci heaps versus other heap variants is the cheap decrease-key operation. This heap has a constant complexity for find minimum, insert and merge of two heaps, an amortized constant complexity for decrease key and O(log(n)) complexity for a deletion or dequeue minimum. In practice the constant factors are large, so Fibonacci heaps could be slower than Pairing heaps, depending on usage. Benchmarks - in the project subfolder. The heap has not been designed for thread-safety.\n\n#### Range Tree\n\nUseful to determine if n-dimensional points fall within an n-dimensional range.\nNot a typical range tree however, as we are actually using an n-dimensional\nsorted list of points as this proved to be simpler and faster than attempting a\ntraditional range tree while saving space on any dimension greater than one.\nInserts are typical BBST times at O(log n^d) where d is the number of\ndimensions.\n\n#### Set\nOur Set implementation is very simple, accepts items of type `interface{}` and\nincludes only a few methods. If your application requires a richer Set\nimplementation over lists of type `sort.Interface`, see\n[xtgo/set](https://github.com/xtgo/set) and\n[goware/set](https://github.com/goware/set).\n\n#### Threadsafe\nA package that is meant to contain some commonly used items but in a threadsafe\nway.  Example: there's a threadsafe error in there as I commonly found myself\nwanting to set an error in many threads at the same time (yes, I know, but\nchannels are slow).\n\n#### AVL Tree\n\nThis is an example of a branch copy immutable AVL BBST.  Any operation on a node\nmakes a copy of that node's branch.  Because of this, this tree is inherently\nthreadsafe although the writes will likely still need to be serialized.  This\nstructure is good if your use case is a large number of reads and infrequent\nwrites as reads will be highly available but writes somewhat slow due to the\ncopying.  This structure serves as a basis for a large number of functional data\nstructures.\n\n#### X-Fast Trie\n\nAn interesting design that treats integers as words and uses a trie structure to\nreduce time complexities by matching prefixes.  This structure is really fast\nfor finding values or making predecessor/successor types of queries, but also\nresults in greater than linear space consumption.  The exact time complexities\ncan be found in that package.\n\n#### Y-Fast Trie\n\nAn extension of the X-Fast trie in which an X-Fast trie is combined with some\nother ordered data structure to reduce space consumption and improve CRUD types\nof operations.  These secondary structures are often BSTs, but our implementation\nuses a simple ordered list as I believe this improves cache locality.  We also\nuse fixed size buckets to aid in parallelization of operations.  Exact time\ncomplexities are in that package.\n\n#### Fast integer hashmap\n\nA datastructure used for checking existence but without knowing the bounds of\nyour data.  If you have a limited small bounds, the bitarray package might be a\nbetter choice.  This implementation uses a fairly simple hashing algorithm\ncombined with linear probing and a flat datastructure to provide optimal\nperformance up to a few million integers (faster than the native Golang\nimplementation).  Beyond that, the native implementation is faster (I believe\nthey are using a large -ary B-tree).  In the future, this will be implemented\nwith a B-tree for scale.\n\n#### Skiplist\n\nAn ordered structure that provides amortized logarithmic operations but without\nthe complication of rotations that are required by BSTs.  In testing, however,\nthe performance of the skip list is often far worse than the guaranteed log n\ntime of a BBST.  Tall nodes tend to \"cast shadows\", especially when large\nbitsizes are required as the optimum maximum height for a node is often based on\nthis.  More detailed performance characteristics are provided in that package.\n\n#### Sort\n\nThe sort package implements a multithreaded bucket sort that can be up to 3x\nfaster than the native Golang sort package.  These buckets are then merged using\na symmetrical merge, similar to the stable sort in the Golang package.  However,\nour algorithm is modified so that two sorted lists can be merged by using\nsymmetrical decomposition.\n\n#### Numerics\n\nEarly work on some nonlinear optimization problems.  The initial implementation\nallows a simple use case with either linear or nonlinear constraints.  You can\nfind min/max or target an optimal value.  The package currently employs a\nprobabilistic global restart system in an attempt to avoid local critical points.\nMore details can be found in that package.\n\n#### B+ Tree\n\nInitial implementation of a B+ tree.  Delete method still needs added as well as\nsome performance optimization.  Specific performance characteristics can be\nfound in that package.  Despite the theoretical superiority of BSTs, the B-tree\noften has better all around performance due to cache locality.  The current\nimplementation is mutable, but the immutable AVL tree can be used to build an\nimmutable version.  Unfortunately, to make the B-tree generic we require an\ninterface and the most expensive operation in CPU profiling is the interface\nmethod which in turn calls into runtime.assertI2T.  We need generics.\n\n#### Immutable B Tree\nA btree based on two principles, immutability and concurrency. \nSomewhat slow for single value lookups and puts, it is very fast for bulk operations.\nA persister can be injected to make this index persistent.\n\n#### Ctrie\n\nA concurrent, lock-free hash array mapped trie with efficient non-blocking\nsnapshots. For lookups, Ctries have comparable performance to concurrent skip\nlists and concurrent hashmaps. One key advantage of Ctries is they are\ndynamically allocated. Memory consumption is always proportional to the number\nof keys in the Ctrie, while hashmaps typically have to grow and shrink. Lookups,\ninserts, and removes are O(logn).\n\nOne interesting advantage Ctries have over traditional concurrent data\nstructures is support for lock-free, linearizable, constant-time snapshots.\nMost concurrent data structures do not support snapshots, instead opting for\nlocks or requiring a quiescent state. This allows Ctries to have O(1) iterator\ncreation and clear operations and O(logn) size retrieval.\n\n#### Dtrie\n\nA persistent hash trie that dynamically expands or shrinks to provide efficient\nmemory allocation. Being persistent, the Dtrie is immutable and any modification\nyields a new version of the Dtrie rather than changing the original. Bitmapped\nnodes allow for O(log32(n)) get, remove, and update operations. Insertions are\nO(n) and iteration is O(1).\n\n#### Persistent List\n\nA persistent, immutable linked list. All write operations yield a new, updated\nstructure which preserve and reuse previous versions. This uses a very\nfunctional, cons-style of list manipulation. Insert, get, remove, and size\noperations are O(n) as you would expect.\n\n#### Simple Graph\n\nA mutable, non-persistent undirected graph where parallel edges and self-loops are \nnot permitted. Operations to add an edge as well as retrieve the total number of \nvertices/edges are O(1) while the operation to retrieve the vertices adjacent to a\ntarget is O(n). For more details see [wikipedia](https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Simple_graph)\n\n### Installation\n\n 1. Install Go 1.3 or higher.\n 2. Run `go get github.com/Workiva/go-datastructures/...`\n\n### Updating\n\nWhen new code is merged to master, you can use\n\n\tgo get -u github.com/Workiva/go-datastructures/...\n\nTo retrieve the latest version of go-datastructures.\n\n### Testing\n\nTo run all the unit tests use these commands:\n\n\tcd $GOPATH/src/github.com/Workiva/go-datastructures\n\tgo get -t -u ./...\n\tgo test ./...\n\nOnce you've done this once, you can simply use this command to run all unit tests:\n\n\tgo test ./...\n\n\n### Contributing\n\nRequirements to commit here:\n\n - Branch off master, PR back to master.\n - `gofmt`'d code.\n - Compliance with [these guidelines](https://code.google.com/p/go-wiki/wiki/CodeReviewComments)\n - Unit test coverage\n - [Good commit messages](http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html)\n\n\n### Maintainers\n - Alexander Campbell <[alexander.campbell@workiva.com](mailto:alexander.campbell@workiva.com)>\n - Dustin Hiatt <[dustin.hiatt@workiva.com](mailto:dustin.hiatt@workiva.com)>\n - Ryan Jackson <[ryan.jackson@workiva.com](mailto:ryan.jackson@workiva.com)>\n"
        },
        {
          "name": "augmentedtree",
          "type": "tree",
          "content": null
        },
        {
          "name": "aviary.yaml",
          "type": "blob",
          "size": 0.1552734375,
          "content": "version: 1\n\nexclude:\n  - tests?/\n\nraven_monitored_classes: null\n\nraven_monitored_files: null\n\nraven_monitored_functions: null\n\nraven_monitored_keywords: null\n\n"
        },
        {
          "name": "batcher",
          "type": "tree",
          "content": null
        },
        {
          "name": "bitarray",
          "type": "tree",
          "content": null
        },
        {
          "name": "btree",
          "type": "tree",
          "content": null
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "datastructures.go",
          "type": "blob",
          "size": 1.3955078125,
          "content": "/*\nPackage datastructures exists solely to aid consumers of the go-datastructures\nlibrary when using dependency managers.  Depman, for instance, will work\ncorrectly with any datastructure by simply importing this package instead of\neach subpackage individually.\n\nFor more information about the datastructures package, see the README at\n\n\thttp://github.com/Workiva/go-datastructures\n\n*/\npackage datastructures\n\nimport (\n\t_ \"github.com/Workiva/go-datastructures/augmentedtree\"\n\t_ \"github.com/Workiva/go-datastructures/bitarray\"\n\t_ \"github.com/Workiva/go-datastructures/btree/palm\"\n\t_ \"github.com/Workiva/go-datastructures/btree/plus\"\n\t_ \"github.com/Workiva/go-datastructures/fibheap\"\n\t_ \"github.com/Workiva/go-datastructures/futures\"\n\t_ \"github.com/Workiva/go-datastructures/hashmap/fastinteger\"\n\t_ \"github.com/Workiva/go-datastructures/numerics/optimization\"\n\t_ \"github.com/Workiva/go-datastructures/queue\"\n\t_ \"github.com/Workiva/go-datastructures/rangetree\"\n\t_ \"github.com/Workiva/go-datastructures/rangetree/skiplist\"\n\t_ \"github.com/Workiva/go-datastructures/set\"\n\t_ \"github.com/Workiva/go-datastructures/slice\"\n\t_ \"github.com/Workiva/go-datastructures/slice/skip\"\n\t_ \"github.com/Workiva/go-datastructures/sort\"\n\t_ \"github.com/Workiva/go-datastructures/threadsafe/err\"\n\t_ \"github.com/Workiva/go-datastructures/tree/avl\"\n\t_ \"github.com/Workiva/go-datastructures/trie/xfast\"\n\t_ \"github.com/Workiva/go-datastructures/trie/yfast\"\n)\n"
        },
        {
          "name": "documentation.md",
          "type": "blob",
          "size": 7.1044921875,
          "content": "# Introducing go-datastructures\n\nThe goal of the go-datastructures library is to port implementations of some common datastructures to Go or to improve on some existing datastructures.  These datastructures are designed to be re-used for anyone that needs them throughout the community. (and hopefully improved upon).\n\nGiven the commonality and popularity of these datastructures in other languages, it is hoped that by open sourcing this library we leverage a great deal of institutional knowledge to improve upon the Go-specific implementations.\n\n# Datastructures\n\n## Augmented Tree\n\nDesigned for determining intersections between ranges. For example, we can query the augmentedtree for any ranges that intersect with a cell, which can be represented as a range of size one (ie, Cell A1 can be represented as range A1:B2 where B2 is exclusive).  In this way, we can walk through the graph looking for exact or approximate intersections.\n\nThe current implementation exists in n-dimensions, but is quickest when an n-dimensional query can be reduced in its first dimension.  That is, queries only filtered in anything but the first dimension will be slowest.\n\nThe actual implementation is a top-down red-black binary search tree.\n\n### Future\n\nImplement a bottom-up version as well.\n\n## Bit Array\n\nAlso known as a bitmap, a bitarray is useful for comparing two sets of data that can be represented as an integer.  It's useful because bitwise operations can compare a number of these integers at once instead of independently.  For instance, the sets {1, 3, 5} and {3, 5, 7} can be intersected in a single clock cycle if these sets were represented in their associated bit array.  Included in this package is the ability to convert a bitarray back to integers.\n\nThere are two implementations of bit arrays in this package, one is dense and the other borrows concepts from linear algebra's compressed row sparse matrix to represent bitarrays in much smaller spaces.  Unfortunately, the sparse version has logarithmic insertions and existence checks but retains some speed advantages when checking for intersections.\n\nIncidentally, this is one of two things needed to build a native Go database.\n\n### Future\n\nImplement a dense but expandable bit array.  Optimize the current package to utilize larger amounts of mechanical sympathy.\n\n## Futures\n\nWe ran into some cases where we wanted to indicate to a goroutine that an operation had started in another goroutine and to pause go routines until the initial routine had completed.  You can do this with buffered channels, but it seems somewhat redundant to send the same result to a channel to ensure all waiting threads were alerted.  Futures operate similarly to how ndb futures work in GAE and might be thought of as a \"broadcast\" channel.\n\n## Queue\n\nPretty self-explanatory, this package includes both a queue and a priority queue.  Currently, waitgroups are used to orchestrate threads but with a proper constructor hint, this does end up being faster than channels when attempting to send data to a go routine.  The other advantage over a channel is that the queue will return an error if you attempt to put to a queue that has had Dispose called on it instead of panicking like what would happen if you attempted to send to a closed channel.  I believe this is closer to the Golang's stated design goals.\n\nSpeaking of Dispose, calling dispose on a queue will immediately return any waiting threads with an error.\n\n### Future\n\nWhen I get time, I'd like to implement a lockless ring buffer for further performance enhancements.\n\n## Range Tree\n\nThe range tree is a way to store n-dimensional points of data in a manner that permits logarithmic-complexity queries.  These points are usually represented as points on a Cartesian graph represented by integers.\n\nThere are two implementations of a range tree in this package, one that is mutable and one that is immutable.  The mutable version can be faster, but involves lock contention if the consumer needs to ensure threadsafety.  The immutable version is a copy-on-write range tree that is optimized by only copying portions of the rangetree on write and is best written to in batches.  Operations on the immutable version are slower, but it is safe to read and write from this version at the same time from different threads.\n\nAlthough rangetrees are often represented as BBSTs as described above, the n-dimensional nature of this rangetree actually made the design easier to implement as a sparse n-dimensional array.\n\n### Future\n\nUnite both implementations of the rangetree under the same interface.  The implementations (especially the immutable one) could use some futher performance optimizations.\n\n## Fibonacci Heap\n\nThe usual Fibonacci Heap with a floating-point priority key. Does a good job as a priority queue, especially for large n. Should be useful in writing an optimal solution for Dijkstra's and Prim's algorithms. (because of it's efficient decrease-key)\n\n### Future\n\nI'd like to add a value interface{} pointer that will be able to hold any user data attached to each node in the heap. Another thing would be writing a fast implementation of Dijkstra and Prim using this structure. And a third would be analysing thread-safety and coming up with a thread-safe variant.\n\n## Set\n\nNot much to say here.  This is an unordered set back by a Go map.  This particular version is threadsafe which does hinder performance a bit, although reads can happen simultaneously.  \n\n### Future\n\nI'd like to experiment with a ground-up implementation of a hash map using the standard library's hash/fnv hashing function, which is a non-cryptographic hash that's proven to be very fast.  I'd also like to experiment with a lockless hashmap.\n\n## Slice\n\nGolang's standard library \"sort\" includes a slice of ints that contain some sorting and searching functions.  This is like that standard library package but with Int64s, which requires a new package as Go doesn't want us to have generics.  I also added a method for inserting to the slice.\n\n## Threadsafe\n\nThis package just wraps some common interfaces with a lock to make them threadsafe.  Golang would tell us to forget about locks and use channels (even though channels themselves are just fancy abstractions around locks as evidenced in their source code) but I found some situations where I wanted to protect some memory that was accessible from multiple goroutines where channels would be ugly, slow, and unnecessary.  The only interface with an implemntation thusfar is error, which is useful if you need to indicate that an error was returned from logic running in any number of goroutines.\n\n# Going Forward\n\nThere is a PR into the datastructures repo that contains some pieces required for implementing a B+ tree.  With a B+ tree and bitmap, the pieces are in place to write a native Go database.  Going forward, I'd like to take these pieces, expand upon them, and implement a fast database in Go.  \n\nAs always, any optimizations or bug fixes in any of this code would be greatly appreciated and encouraged :).  These datastructures can and are the foundations of many programs and algorithms, even if they are abstracted away in different libraries which makes working with them a lot of fun and very informative.\n"
        },
        {
          "name": "fibheap",
          "type": "tree",
          "content": null
        },
        {
          "name": "futures",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.130859375,
          "content": "module github.com/Workiva/go-datastructures\n\ngo 1.15\n\nrequire (\n\tgithub.com/stretchr/testify v1.7.0\n\tgithub.com/tinylib/msgp v1.1.5\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.63671875,
          "content": "github.com/davecgh/go-spew v1.1.0 h1:ZDRjVQ15GmhC3fiQ8ni8+OwkZQO4DARzQgrnXU1Liz8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/philhofer/fwd v1.1.1 h1:GdGcTjf5RNAxwS4QLsiMzJYj5KEvPJD3Abr261yRQXQ=\ngithub.com/philhofer/fwd v1.1.1/go.mod h1:gk3iGcWd9+svBvR0sR+KPcfE+RNWozjowpeBVG3ZVNU=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0 h1:4G4v2dO3VZwixGIRoQ5Lfboy6nUhCyYzaqnIAPPhYs4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/tinylib/msgp v1.1.5 h1:2gXmtWueD2HefZHQe1QOy9HVzmFrLOVvsXwXBQ0ayy0=\ngithub.com/tinylib/msgp v1.1.5/go.mod h1:eQsjooMTnV42mHu917E26IogZ2930nFyBQdofk10Udg=\ngithub.com/ttacon/chalk v0.0.0-20160626202418-22c06c80ed31/go.mod h1:onvgF043R+lC5RZ8IT9rBXDaEDnpnw/Cl+HFiw+v/7Q=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20201022035929-9cf592e881e9/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c h1:dUUwHk2QECo/6vqA44rthZ8ie2QXMNeKRTHCNY2nXvo=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "graph",
          "type": "tree",
          "content": null
        },
        {
          "name": "hashmap",
          "type": "tree",
          "content": null
        },
        {
          "name": "list",
          "type": "tree",
          "content": null
        },
        {
          "name": "mock",
          "type": "tree",
          "content": null
        },
        {
          "name": "numerics",
          "type": "tree",
          "content": null
        },
        {
          "name": "queue",
          "type": "tree",
          "content": null
        },
        {
          "name": "rangetree",
          "type": "tree",
          "content": null
        },
        {
          "name": "rtree",
          "type": "tree",
          "content": null
        },
        {
          "name": "set",
          "type": "tree",
          "content": null
        },
        {
          "name": "slice",
          "type": "tree",
          "content": null
        },
        {
          "name": "sort",
          "type": "tree",
          "content": null
        },
        {
          "name": "threadsafe",
          "type": "tree",
          "content": null
        },
        {
          "name": "tree",
          "type": "tree",
          "content": null
        },
        {
          "name": "trie",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}