{
  "metadata": {
    "timestamp": 1736567447077,
    "page": 52,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "goplus/gop",
      "stars": 9016,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "*.expect text eol=lf\n*.golden text eol=lf\n\n*.gop text eol=lf\n*.go text eol=lf\n*.gox text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4736328125,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n*.txt\n*.cache\n.DS_Store\ntest.db\ngo.json\nx.mod\n\n# gop\n# gopfmt\n# goptestgo\n\n# Folders\n_obj\n_test\n_old\n_t\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\ncoverage.txt\n\n.gop/\ngop_autogen*.go\ngo.json\ngo.work*\nformat.result\n*.cache\n\n*.exe\n*.test\n*.prof\n\n.vscode\n.idea\n\ncmd/qfmt/qfmt\n\nbin/\ngo-num/\n_todo*.go\n\n.dist/\n"
        },
        {
          "name": ".goreleaser.yaml",
          "type": "blob",
          "size": 11.04296875,
          "content": "version: 2\n\ndist: .dist\n\nbefore:\n  hooks:\n    - go mod download\n\nbuilds:\n  - id: gop\n    main: ./cmd/gop\n    binary: bin/gop\n    ldflags:\n      - -X github.com/goplus/gop/env.buildVersion=v{{.Version}}\n      - -X github.com/goplus/gop/env.buildDate={{.Date}}\n    env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n\narchives:\n  - format: tar.gz\n    name_template: >-\n      {{.ProjectName}}{{.Version}}.{{.Os}}-{{.Arch}}\n      {{- if .Arm}}v{{.Arm}}{{end}}\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - LICENSE\n      - \"*.mod\"\n      - \"*.sum\"\n      - \"*.md\"\n      - \"**/*.go\"\n      - \"**/*.md\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - \"^docs:\"\n      - \"^test:\"\n\ndockers:\n  - goarch: \"386\"\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-386\n    use: buildx\n    build_flag_templates:\n      - --platform=linux/386\n      - --build-arg=USE_GORELEASER_ARTIFACTS=1\n      - --build-arg=GORELEASER_ARTIFACTS_TARBALL=./.dist/{{.ProjectName}}{{.Version}}.linux-386.tar.gz\n    extra_files:\n      - ./\n  - goarch: amd64\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-amd64\n    use: buildx\n    build_flag_templates:\n      - --platform=linux/amd64\n      - --build-arg=USE_GORELEASER_ARTIFACTS=1\n      - --build-arg=GORELEASER_ARTIFACTS_TARBALL=./.dist/{{.ProjectName}}{{.Version}}.linux-amd64.tar.gz\n    extra_files:\n      - ./\n  - goarch: arm64\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-arm64\n    use: buildx\n    build_flag_templates:\n      - --platform=linux/arm64\n      - --build-arg=USE_GORELEASER_ARTIFACTS=1\n      - --build-arg=GORELEASER_ARTIFACTS_TARBALL=./.dist/{{.ProjectName}}{{.Version}}.linux-arm64.tar.gz\n    extra_files:\n      - ./\n\ndocker_manifests:\n  - name_template: ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-386\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-amd64\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-arm64\n  - name_template: ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Major }}.{{ .Minor }}\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-386\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-amd64\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-arm64\n    skip_push: auto\n  - name_template: ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Major }}\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-386\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-amd64\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-arm64\n    skip_push: auto\n  - name_template: ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:latest\n    image_templates:\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-386\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-amd64\n      - ghcr.io/{{ envOrDefault \"GITHUB_REPOSITORY\" \"goplus/gop\" }}:{{ .Version }}-arm64\n    skip_push: auto\n\nwinget:\n  - name: goplus\n    homepage: \"https://goplus.org/\"\n    publisher: goplus\n    publisher_url: https://github.com/goplus/gop\n    publisher_support_url: \"https://github.com/goplus/gop/issues/new\"\n    package_identifier: goplus.gop\n    path: \"manifests/g/goplus/gop/{{.Version}}\"\n    tags:\n      - golang\n      - go\n      - gop\n      - goplus\n      - programming\n      - language\n      - compiler\n      - interpreter\n      - data science\n      - engineering\n      - education\n    short_description: The Go+ Programming Language\n    description: |\n      The Go+ programming language is designed for engineering, STEM education, and data science.\n      - For engineering: working in the simplest language that can be mastered by children.\n      - For STEM education: studying an engineering language that can be used for work in the future.\n      - For data science: communicating with engineers in the same language.\n    license: Apache-2.0\n    skip_upload: auto\n    release_notes: \"{{.Changelog}}\"\n    release_notes_url: \"https://github.com/{{ .Env.GITHUB_REPOSITORY_OWNER }}/gop/releases/tag/v{{.Version}}\"\n    dependencies:\n      - package_identifier: GoLang.Go\n        minimum_version: 1.18.0\n    repository:\n      owner: goplus\n      name: winget-pkgs\n      branch: \"{{.ProjectName}}-v{{.Version}}\"\n      git:\n        url: \"git@github.com:{{ .Env.GITHUB_REPOSITORY_OWNER }}/winget-pkgs.git\"\n        private_key: \"{{ .Env.WINGET_PKGS_PRIVATE_KEY }}\"\n      pull_request:\n        enabled: true\n        draft: true\n        base:\n          owner: microsoft\n          name: winget-pkgs\n          branch: master\n\nnfpms:\n  - package_name: gop\n    vendor: goplus\n    homepage: https://goplus.org/\n    maintainer: Li Jie <cpunion@gmail.com>\n    license: Apache-2.0\n    description: |\n      The Go+ programming language is designed for engineering, STEM education, and data science.\n      - For engineering: working in the simplest language that can be mastered by children.\n      - For STEM education: studying an engineering language that can be used for work in the future.\n      - For data science: communicating with engineers in the same language.\n    formats:\n      - \"deb\"\n      - \"rpm\"\n    overrides:\n      deb:\n        dependencies:\n          - \"golang-go (>= 1.18.0)\"\n      rpm:\n        dependencies:\n          - \"golang-bin >= 1.18.0\"\n    file_name_template: >-\n      {{ .ProjectName }}{{.Version}}.{{ .Os }}-{{ .Arch }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    bindir: /usr/lib/{{ .ProjectName }}\n    contents:\n      # source folder\n      - src: \"CODE_OF_CONDUCT.md\"\n        dst: \"/usr/lib/{{ .ProjectName }}/CODE_OF_CONDUCT.md\"\n      - src: \"Dockerfile\"\n        dst: \"/usr/lib/{{ .ProjectName }}/Dockerfile\"\n      - src: \"LICENSE\"\n        dst: \"/usr/lib/{{ .ProjectName }}/LICENSE\"\n      - src: \"Makefile\"\n        dst: \"/usr/lib/{{ .ProjectName }}/Makefile\"\n      - src: \"README.md\"\n        dst: \"/usr/lib/{{ .ProjectName }}/README.md\"\n      - src: \"_gendeps.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/_gendeps.go\"\n      - src: \"all.bash\"\n        dst: \"/usr/lib/{{ .ProjectName }}/all.bash\"\n      - src: \"all.bat\"\n        dst: \"/usr/lib/{{ .ProjectName }}/all.bat\"\n      - src: \"ast\"\n        dst: \"/usr/lib/{{ .ProjectName }}/ast\"\n      - src: \"build_install_run.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/build_install_run.go\"\n      - src: \"builtin\"\n        dst: \"/usr/lib/{{ .ProjectName }}/builtin\"\n      - src: \"cl\"\n        dst: \"/usr/lib/{{ .ProjectName }}/cl\"\n      - src: \"cmd\"\n        dst: \"/usr/lib/{{ .ProjectName }}/cmd\"\n      - src: \"doc\"\n        dst: \"/usr/lib/{{ .ProjectName }}/doc\"\n      - src: \"env\"\n        dst: \"/usr/lib/{{ .ProjectName }}/env\"\n      - src: \"format\"\n        dst: \"/usr/lib/{{ .ProjectName }}/format\"\n      - src: \"gengo.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/gengo.go\"\n      - src: \"go.mod\"\n        dst: \"/usr/lib/{{ .ProjectName }}/go.mod\"\n      - src: \"go.sum\"\n        dst: \"/usr/lib/{{ .ProjectName }}/go.sum\"\n      - src: \"imp.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/imp.go\"\n      - src: \"load.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/load.go\"\n      - src: \"make.bash\"\n        dst: \"/usr/lib/{{ .ProjectName }}/make.bash\"\n      - src: \"make.bat\"\n        dst: \"/usr/lib/{{ .ProjectName }}/make.bat\"\n      - src: \"outline.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/outline.go\"\n      - src: \"parser\"\n        dst: \"/usr/lib/{{ .ProjectName }}/parser\"\n      - src: \"printer\"\n        dst: \"/usr/lib/{{ .ProjectName }}/printer\"\n      - src: \"scanner\"\n        dst: \"/usr/lib/{{ .ProjectName }}/scanner\"\n      - src: \"test\"\n        dst: \"/usr/lib/{{ .ProjectName }}/test\"\n      - src: \"demo\"\n        dst: \"/usr/lib/{{ .ProjectName }}/demo\"\n      - src: \"tidy.go\"\n        dst: \"/usr/lib/{{ .ProjectName }}/tidy.go\"\n      - src: \"token\"\n        dst: \"/usr/lib/{{ .ProjectName }}/token\"\n      - src: \"x\"\n        dst: \"/usr/lib/{{ .ProjectName }}/x\"\n      # symlinks to binaries\n      - src: \"/usr/lib/{{ .ProjectName }}/bin/gop\"\n        dst: /usr/bin/gop\n        type: symlink\n\nsnapcrafts:\n  - id: gop\n    name: gop\n    title: The Go+ Programming Language\n    summary: The Go+ Programming Language\n    description: |\n      The Go+ programming language is designed for engineering, STEM education, and data science.\n      - For engineering: working in the simplest language that can be mastered by children.\n      - For STEM education: studying an engineering language that can be used for work in the future.\n      - For data science: communicating with engineers in the same language.\n    confinement: classic\n    license: Apache-2.0\n    name_template: >-\n      {{ .ProjectName }}{{.Version}}.{{ .Os }}-{{ .Arch }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    extra_files:\n      # source folder\n      - source: \"CODE_OF_CONDUCT.md\"\n        destination: \"CODE_OF_CONDUCT.md\"\n      - source: \"Dockerfile\"\n        destination: \"Dockerfile\"\n      - source: \"LICENSE\"\n        destination: \"LICENSE\"\n      - source: \"Makefile\"\n        destination: \"Makefile\"\n      - source: \"README.md\"\n        destination: \"README.md\"\n      - source: \"_gendeps.go\"\n        destination: \"_gendeps.go\"\n      - source: \"all.bash\"\n        destination: \"all.bash\"\n      - source: \"all.bat\"\n        destination: \"all.bat\"\n      - source: \"ast\"\n        destination: \"ast\"\n      - source: \"build_install_run.go\"\n        destination: \"build_install_run.go\"\n      - source: \"builtin\"\n        destination: \"builtin\"\n      - source: \"cl\"\n        destination: \"cl\"\n      - source: \"cmd\"\n        destination: \"cmd\"\n      - source: \"doc\"\n        destination: \"doc\"\n      - source: \"env\"\n        destination: \"env\"\n      - source: \"format\"\n        destination: \"format\"\n      - source: \"gengo.go\"\n        destination: \"gengo.go\"\n      - source: \"go.mod\"\n        destination: \"go.mod\"\n      - source: \"go.sum\"\n        destination: \"go.sum\"\n      - source: \"imp.go\"\n        destination: \"imp.go\"\n      - source: \"load.go\"\n        destination: \"load.go\"\n      - source: \"make.bash\"\n        destination: \"make.bash\"\n      - source: \"make.bat\"\n        destination: \"make.bat\"\n      - source: \"outline.go\"\n        destination: \"outline.go\"\n      - source: \"parser\"\n        destination: \"parser\"\n      - source: \"printer\"\n        destination: \"printer\"\n      - source: \"scanner\"\n        destination: \"scanner\"\n      - source: \"test\"\n        destination: \"test\"\n      - source: \"demo\"\n        destination: \"demo\"\n      - source: \"tidy.go\"\n        destination: \"tidy.go\"\n      - source: \"token\"\n        destination: \"token\"\n      - source: \"x\"\n        destination: \"x\"\n    apps:\n      gop:\n        command: \"gop\"\n        aliases: [\"gop\"]\n        environment:\n          GOPROOT: \"$SNAP\"\n\nchecksum:\n  name_template: \"{{ .ProjectName }}{{ .Version }}.checksums.txt\"\n\nrelease:\n  prerelease: auto\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.09765625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nconduct@goplus.org.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5986328125,
          "content": "ARG BASE_IMAGE=golang:1.22-bookworm\n\nFROM $BASE_IMAGE AS build\nARG USE_GORELEASER_ARTIFACTS=0\nARG GORELEASER_ARTIFACTS_TARBALL\nWORKDIR /usr/local/src/gop\nCOPY . .\nENV GOPROOT=/usr/local/gop\nRUN set -eux; \\\n\tmkdir $GOPROOT; \\\n\tif [ $USE_GORELEASER_ARTIFACTS -eq 1 ]; then \\\n\t\ttar -xzf \"${GORELEASER_ARTIFACTS_TARBALL}\" -C $GOPROOT; \\\n\telse \\\n\t\tgit ls-tree --full-tree --name-only -r HEAD | grep -vE \"^\\.\" | xargs -I {} cp --parents {} $GOPROOT/; \\\n\t\t./all.bash; \\\n\t\tmv bin $GOPROOT/; \\\n\tfi\n\nFROM $BASE_IMAGE\nENV GOPROOT=/usr/local/gop\nCOPY --from=build $GOPROOT/ $GOPROOT/\nENV PATH=$GOPROOT/bin:$PATH\nWORKDIR /gop\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0869140625,
          "content": "Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright (c) 2021 The GoPlus Authors (goplus.org). All rights reserved.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.6826171875,
          "content": "NAME := gop\nRELEASE_VERSION := `git describe --tags`\nBUILD_ROOT_DIR := build-dir\n\n.PHONY: clean all\nall: build\n\nclean:\n\trm -rf $(BUILD_ROOT_DIR)/*\n\trm -f bin/*\n\nbuild:\n\tgo run cmd/make.go -build\n\ndist:\n\t$(MAKE) clean\n\tmkdir -p bin/\n\tgo build -o $(BUILD_ROOT_DIR)/make cmd/make.go\n\t$(MAKE) build-all\n\nbuild-all: darwin-amd64.zip darwin-arm64.zip linux-386.zip linux-amd64.zip \\\n\tlinux-armv7.zip windows-386.zip windows-amd64.zip windows-armv7.zip windows-arm64.zip\n\nbuild-dist:\n\t@mkdir -p bin/\n\t@rm -rf bin/*\n\t$(BUILD_ROOT_DIR)/make -build\n\n%.zip: %\n\t@echo \"Building $(NAME)-$(RELEASE_VERSION)-$@\"\n\n\t@rm -f $(BUILD_ROOT_DIR)/$(NAME)-$(RELEASE_VERSION)-$@\n\tzip -r $(BUILD_ROOT_DIR)/$(NAME)-$(RELEASE_VERSION)-$@ . -x \".*\" -x \"*/.*\" -x \"$(BUILD_ROOT_DIR)/*\"\n\t@echo \"$(NAME)-$(RELEASE_VERSION)-$@ Done\"\n\ndarwin-amd64:\n\t$(MAKE) GOARCH=amd64 GOOS=darwin BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\ndarwin-arm64:\n\t$(MAKE) GOARCH=arm64 GOOS=darwin BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nlinux-386:\n\t$(MAKE) GOARCH=386 GOOS=linux BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nlinux-amd64:\n\t$(MAKE) GOARCH=amd64 GOOS=linux BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nlinux-armv7:\n\t$(MAKE) GOARCH=arm GOOS=linux GOARM=7 BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nwindows-386:\n\t$(MAKE) GOARCH=386 GOOS=windows EXE_SUFFIX=.exe BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nwindows-amd64:\n\t$(MAKE) GOARCH=amd64 GOOS=windows EXE_SUFFIX=.exe BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nwindows-armv7:\n\t$(MAKE) GOARCH=arm GOOS=windows EXE_SUFFIX=.exe GOARM=7 BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist\n\nwindows-arm64:\n\t$(MAKE) GOARCH=arm64 GOOS=windows EXE_SUFFIX=.exe BUILD_DIR=$(BUILD_ROOT_DIR)/$@/bin build-dist"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.6982421875,
          "content": "<div align=\"center\">\n<p></p>\n<p>\n    <img width=\"80\" src=\"https://goplus.org/favicon.svg\">\n</p>\n<h1>The Go+ Programming Language</h1>\n\n[goplus.org](https://goplus.org) | [Docs](doc/docs.md) | [Go+ vs. Go](doc/goplus-vs-go.md) | [Tutorials](https://tutorial.goplus.org/) | [Playground](https://play.goplus.org) | [iGo+ Playground](https://repl.goplus.org/) | [Contributing & compiler design](doc/contributing.md)\n\n</div>\n\n<div align=\"center\">\n<!--\n[![VSCode](https://img.shields.io/badge/vscode-Go+-teal.svg)](https://github.com/gopcode/vscode-goplus)\n[![Discord](https://img.shields.io/discord/983646982100897802?label=Discord&logo=discord&logoColor=white)](https://discord.gg/mYjWCJDcAr)\n[![Interpreter](https://img.shields.io/badge/interpreter-iGo+-seagreen.svg)](https://github.com/goplus/igop)\n-->\n\n[![Build Status](https://github.com/goplus/gop/actions/workflows/go.yml/badge.svg)](https://github.com/goplus/gop/actions/workflows/go.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/goplus/gop)](https://goreportcard.com/report/github.com/goplus/gop)\n[![Coverage Status](https://codecov.io/gh/goplus/gop/branch/main/graph/badge.svg)](https://codecov.io/gh/goplus/gop)\n[![GitHub release](https://img.shields.io/github/v/tag/goplus/gop.svg?label=release)](https://github.com/goplus/gop/releases)\n[![Discord](https://img.shields.io/badge/Discord-online-success.svg?logo=discord&logoColor=white)](https://discord.com/invite/mYjWCJDcAr)\n\n</div>\n\nOur vision is to **enable everyone to become a builder of the digital world**.\n\n#### Easy to learn\n\n* Simple and easy to understand\n* Smaller syntax set than Python in best practices\n\n#### Ready for large projects\n\n* Derived from Go and easy to build large projects from its good engineering foundation\n\nThe Go+ programming language is designed for engineering, STEM education, and data science.\n\n* **For engineering**: working in the simplest language that can be mastered by children.\n* **For STEM education**: studying an engineering language that can be used for work in the future.\n* **For data science**: communicating with engineers in the same language.\n\nFor more details, see [Quick Start](doc/docs.md).\n\n\n## Key Features of Go+\n\n* Approaching natural language expression and intuitive (see [How Go+ simplifies Go's expressions](#how-go-simplifies-gos-expressions)).\n* Smallest but Turing-complete syntax set in best practices (see [The Go+ Mini Specification](doc/spec-mini.md)).\n* Fully compatible with [Go](https://github.com/golang/go) and can mix Go/Go+ code in the same package (see [The Go+ Full Specification](doc/spec.md) and [Go/Go+ Hybrid Programming](doc/docs.md#gogo-hybrid-programming)).\n* Integrating with the C ecosystem including Python and providing limitless possibilities based on [LLGo](https://github.com/goplus/llgo) (see [Importing C/C++ and Python libraries](#importing-cc-and-python-libraries)).\n* Does not support DSL (Domain-Specific Languages), but supports SDF (Specific Domain Friendliness) (see [Go+ Classfiles](#go-classfiles)).\n\n\n## How Go+ simplifies Go's expressions\n\nDifferent from the function call style of most languages, Go+ recommends command style code:\n\n```coffee\nprintln \"Hello world\"\n```\n\nTo emphasize our preference for command style, we introduce `echo` as an alias for `println`:\n\n```coffee\necho \"Hello world\"\n```\n\nFor more discussion on coding style, see https://tutorial.goplus.org/hello-world.\n\nCode style is just the first step. We have made many efforts to make the code more intuitive and closer to natural language expression. These include:\n\n| Go code | Go+ code | Note |\n| ---- | ---- | ---- |\n| package main<br><br>import \"fmt\"<br><br>func main() {<br>&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(\"Hi\")<br>} | import \"fmt\"<br><br>fmt.Println(\"Hi\")<br> | Program structure: Go+ allows omitting `package main` and `func main` |\n| fmt.Println(\"Hi\") | echo(\"Hi\") | More builtin functions: It simplifies the expression of the most common tasks |\n| fmt.Println(\"Hi\") | echo \"Hi\" | Command-line style code: It reduces the number of parentheses in the code as much as possible, making it closer to natural language |\n| a := []int{1, 2, 3} | a := [1, 2, 3] | List literals |\n| a := map[string]int{<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Monday\": 1,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Tuesday\": 2,<br>} | a := {<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Monday\": 1,<br>&nbsp;&nbsp;&nbsp;&nbsp;\"Tuesday\": 2,<br>} | Mapping literals |\n| OnStart(func() {<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>}) | onStart => {<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>} | Lambda expressions |\n| type Rect struct {<br>&nbsp;&nbsp;&nbsp;&nbsp;Width&nbsp; float64<br>&nbsp;&nbsp;&nbsp;&nbsp;Height float64<br>}<br><br>func (this *Rect) Area() float64 { <br>&nbsp;&nbsp;&nbsp;&nbsp;return this.Width * this.Height<br>} | var (<br>&nbsp;&nbsp;&nbsp;&nbsp;Width&nbsp; float64<br>&nbsp;&nbsp;&nbsp;&nbsp;Height float64<br>)<br><br>func Area() float64 { <br>&nbsp;&nbsp;&nbsp;&nbsp;return Width * Height<br>} | [Go+ Classfiles](doc/classfile.md): We can express OOP with global variables and functions. |\n\nFor more details, see [The Go+ Mini Specification](doc/spec-mini.md).\n\n\n## Importing C/C++ and Python libraries\n\nGo+ can choose different Go compilers as its underlying support. Currently known supported Go compilers include:\n\n* [go](https://go.dev/) (The official Go compiler supported by Google)\n* [llgo](https://github.com/goplus/llgo) (The Go compiler supported by the Go+ team)\n* [tinygo](https://tinygo.org/) (A Go compiler for small places)\n\nCurrently, Go+ defaults to using [go](https://go.dev/) as its underlying support, but in the future, it will be [llgo](https://github.com/goplus/llgo).\n\nLLGo is a Go compiler based on [LLVM](https://llvm.org/) in order to better integrate Go with the C ecosystem including Python. It aims to expand the boundaries of Go/Go+, providing limitless possibilities such as:\n\n* Game development\n* AI and data science\n* WebAssembly\n* Embedded development\n* ...\n\nIf you wish to use [llgo](https://github.com/goplus/llgo), specify the `-llgo` flag when initializing a Go+ module:\n\n```sh\ngop mod init -llgo YourModulePath\n```\n\nThis will generate a `go.mod` file with the following contents (It may vary slightly depending on the versions of local Go+ and LLGo):\n\n```go\nmodule YourModulePath\n\ngo 1.21 // llgo 1.0\n\nrequire github.com/goplus/llgo v0.9.9\n```\n\nBased on LLGo, Go+ can import libraries written in C/C++ and Python.\n\nHere is an example (see [chello](demo/_llgo/chello/hello.gop)) of printing `Hello world` using C's `printf`:\n\n```go\nimport \"c\"\n\nc.printf c\"Hello world\\n\"\n```\n\nHere, `c\"Hello world\\n\"` is a syntax supported by Go+, representing a null-terminated C-style string.\n\nTo run this example, you can:\n\n```sh\ncd YourModulePath  # set work directory to your module\ngop mod tidy       # for generating go.sum file\ngop run .\n```\n\nAnd here is an example (see [pyhello](demo/_llgo/pyhello/hello.gop)) of printing `Hello world` using Python's `print`:\n\n```go\nimport \"py/std\"\n\nstd.print py\"Hello world\"\n```\n\nHere, `py\"Hello world\"` is a syntax supported by Go+, representing a Python string.\n\nHere are more examples of Go+ calling C/C++ and Python libraries:\n\n* [pytensor](demo/_llgo/pytensor/tensor.gop): a simple demo using [py/torch](https://pkg.go.dev/github.com/goplus/llgo/py/torch)\n* [tetris](demo/_llgo/tetris/tetris.gop): a tetris game based on [c/raylib](https://pkg.go.dev/github.com/goplus/llgo/c/raylib)\n* [sqlitedemo](demo/_llgo/sqlitedemo/sqlitedemo.gop): a demo using [c/sqlite](https://pkg.go.dev/github.com/goplus/llgo/c/sqlite)\n\nTo find out more about LLGo/Go+'s support for C/C++ and Python in detail, please refer to homepage of [llgo](https://github.com/goplus/llgo).\n\n\n## Go+ Classfiles\n\n```\nOne language can change the whole world.\nGo+ is a \"DSL\" for all domains.\n```\n\nRob Pike once said that if he could only introduce one feature to Go, he would choose `interface` instead of `goroutine`. `classfile` is as important to Go+ as `interface` is to Go.\n\nIn the design philosophy of Go+, we do not recommend `DSL` (Domain Specific Language). But `SDF` (Specific Domain Friendliness) is very important. The Go+ philosophy about `SDF` is:\n\n```\nDon't define a language for specific domain.\nAbstract domain knowledge for it.\n```\n\nGo+ introduces `classfile` to abstract domain knowledge.\n\n* [What's Classfile?](doc/classfile.md#whats-classfile)\n* [Dive into Go+ Classfiles](doc/classfile.md)\n\nSound a bit abstract? Let's see some Go+ classfiles.\n\n* Unit Test: [classfile: Unit Test](https://github.com/goplus/gop/blob/main/doc/classfile.md#classfile-unit-test)\n* DevOps: [gsh: Go+ DevOps Tools](https://github.com/qiniu/x/tree/main/gsh)\n* Web Programming: [yap: Yet Another HTTP Web Framework](https://github.com/goplus/yap)\n* Web Programming: [yaptest: HTTP Test Framework](https://github.com/goplus/yap/tree/main/ytest)\n* Web Programming: [ydb: Database Framework](https://github.com/goplus/yap/tree/main/ydb)\n* STEM Education: [spx: A Go+ 2D Game Engine](https://github.com/goplus/spx)\n\n\n### yap: Yet Another HTTP Web Framework\n\nThis classfile has the file suffix `.yap`.\n\nCreate a file named [get.yap](https://github.com/goplus/yap/blob/main/demo/classfile2_hello/get.yap) with the following content:\n\n```go\nhtml `<html><body>Hello, YAP!</body></html>`\n```\n\nExecute the following commands:\n\n```sh\ngop mod init hello\ngop get github.com/goplus/yap@latest\ngop mod tidy\ngop run .\n```\n\nA simplest web program is running now. At this time, if you visit http://localhost:8080, you will get:\n\n```\nHello, YAP!\n```\n\nYAP uses filenames to define routes. `get.yap`'s route is `get \"/\"` (GET homepage), and `get_p_#id.yap`'s route is `get \"/p/:id\"` (In fact, the filename can also be `get_p_:id.yap`, but it is not recommended because `:` is not allowed to exist in filenames under Windows).\n\nLet's create a file named [get_p_#id.yap](https://github.com/goplus/yap/blob/main/demo/classfile2_hello/get_p_%23id.yap) with the following content:\n\n```coffee\njson {\n\t\"id\": ${id},\n}\n```\n\nExecute `gop run .` and visit http://localhost:8080/p/123, you will get:\n\n```\n{\"id\": \"123\"}\n```\n\nSee [yap: Yet Another HTTP Web Framework](https://github.com/goplus/yap) for more details.\n\n\n### spx: A Go+ 2D Game Engine\n\n![Screen Shot1](https://github.com/goplus/spx/blob/main/tutorial/01-Weather/1.jpg) ![Screen Shot2](https://github.com/goplus/spx/blob/main/tutorial/01-Weather/2.jpg)\n\nThrough this example you can learn how to implement dialogues between multiple actors.\n\nHere are some codes in [Kai.spx](https://github.com/goplus/spx/blob/main/tutorial/01-Weather/Kai.spx):\n\n```coffee\nonStart => {\n\tsay \"Where do you come from?\", 2\n\tbroadcast \"1\"\n}\n\nonMsg \"2\", => {\n\tsay \"What's the climate like in your country?\", 3\n\tbroadcast \"3\"\n}\n```\n\nWe call `onStart` and `onMsg` to listen events. `onStart` is called when the program is started. And `onMsg` is called when someone calls `broadcast` to broadcast a message.\n\nWhen the program starts, Kai says `Where do you come from?`, and then broadcasts the message `1`. Who will recieve this message? Let's see codes in [Jaime.spx](https://github.com/goplus/spx/blob/main/tutorial/01-Weather/Jaime.spx):\n\n```coffee\nonMsg \"1\", => {\n\tsay \"I come from England.\", 2\n\tbroadcast \"2\"\n}\n```\n\nYes, Jaime recieves the message `1` and says `I come from England.`. Then he broadcasts the message `2`. Kai recieves it and says `What's the climate like in your country?`.\n\nThe following procedures are very similar. In this way you can implement dialogues between multiple actors.\n\nSee [spx: A Go+ 2D Game Engine](https://github.com/goplus/spx) for more details.\n\n\n### gsh: Go+ DevOps Tools\n\nYes, now you can write `shell script` in Go+. It supports all shell commands.\n\nLet's create a file named [example.gsh](https://github.com/qiniu/x/blob/main/gsh/demo/hello/example.gsh) and write the following code:\n\n```coffee\nmkdir \"testgsh\"\n```\n\nDon't need a `go.mod` file, just enter `gop run ./example.gsh` directly to run.\n\nSee [gsh: Go+ DevOps Tools](https://github.com/qiniu/x/tree/main/gsh) for more details.\n\n\n## How to install\n\nNote: Requires go1.19 or later\n\n### on Windows\n\n```sh\nwinget install goplus.gop\n```\n\n### on Debian/Ubuntu\n\n```sh\nsudo bash -c ' echo \"deb [trusted=yes] https://pkgs.goplus.org/apt/ /\" > /etc/apt/sources.list.d/goplus.list'\nsudo apt update\nsudo apt install gop\n```\n\n### on RedHat/CentOS/Fedora\n\n```sh\nsudo bash -c 'echo -e \"[goplus]\\nname=Go+ Repo\\nbaseurl=https://pkgs.goplus.org/yum/\\nenabled=1\\ngpgcheck=0\" > /etc/yum.repos.d/goplus.repo'\nsudo yum install gop\n```\n\n### on macOS/Linux (Homebrew)\n\nInstall via [brew](https://brew.sh/)\n\n```sh\n$ brew install goplus\n```\n\n### from source code\n\n```bash\ngit clone https://github.com/goplus/gop.git\ncd gop\n\n# On mac/linux run:\n./all.bash\n# On Windows run:\nall.bat\n```\n\n## Go+ Applications\n\n### 2D Games powered by Go+\n\n* [A Go+ 2D Game Engine for STEM education](https://github.com/goplus/spx)\n* [Aircraft War](https://github.com/goplus/AircraftWar)\n* [Flappy Bird](https://github.com/goplus/FlappyCalf)\n* [Maze Play](https://github.com/goplus/MazePlay)\n* [BetaGo](https://github.com/xushiwei/BetaGo)\n* [Gobang](https://github.com/xushiwei/Gobang)\n* [Dinosaur](https://github.com/xushiwei/Dinosaur)\n\n### Web Programming\n\n* [yap: Yet Another HTTP Web Framework](https://github.com/goplus/yap)\n* [yaptest: HTTP Test Framework](https://github.com/goplus/yap/tree/main/ytest)\n* [ydb: Database Framework](https://github.com/goplus/yap#ydb-database-framework)\n\n### DevOps Tools\n\n* [gsh: Go+ DevOps Tools](https://github.com/qiniu/x/tree/main/gsh)\n\n### Data Processing\n\n* [hdq: HTML DOM Query Language for Go+](https://github.com/goplus/hdq)\n\n\n## IDE Plugins\n\n* vscode: [Go/Go+ for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=goplus.gop)\n\n\n## Contributing\n\nThe Go+ project welcomes all contributors. We appreciate your help!\n\nFor more details, see [Contributing & compiler design](doc/contributing.md).\n\n\n## Give a Star! ⭐\n\nIf you like or are using Go+ to learn or start your projects, please give it a star. Thanks!\n"
        },
        {
          "name": "_gendeps.go",
          "type": "blob",
          "size": 2.337890625,
          "content": "/*\n * Copyright (c) 2022 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"fmt\"\n\t\"go/token\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/goplus/gop/parser\"\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/goplus/mod/modfetch\"\n\n\tastmod \"github.com/goplus/gop/ast/mod\"\n)\n\n// -----------------------------------------------------------------------------\n\nfunc GenDepMods(mod *gopmod.Module, dir string, recursively bool) (ret map[string]struct{}, err error) {\n\tmodBase := mod.Path()\n\tret = make(map[string]struct{})\n\tfor _, r := range mod.Opt.Import {\n\t\tret[r.ClassfileMod] = struct{}{}\n\t}\n\terr = HandleDeps(mod, dir, recursively, func(pkgPath string) {\n\t\tmodPath, _ := modfetch.Split(pkgPath, modBase)\n\t\tif modPath != \"\" && modPath != modBase {\n\t\t\tret[modPath] = struct{}{}\n\t\t}\n\t})\n\treturn\n}\n\nfunc HandleDeps(mod *gopmod.Module, dir string, recursively bool, h func(pkgPath string)) (err error) {\n\tg := depsGen{\n\t\tdeps: astmod.Deps{HandlePkg: h},\n\t\tmod:  mod,\n\t\tfset: token.NewFileSet(),\n\t}\n\tif recursively {\n\t\terr = filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {\n\t\t\tif err == nil && d.IsDir() {\n\t\t\t\tif strings.HasPrefix(d.Name(), \"_\") { // skip _\n\t\t\t\t\treturn filepath.SkipDir\n\t\t\t\t}\n\t\t\t\terr = g.gen(path)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn err\n\t\t})\n\t} else {\n\t\terr = g.gen(dir)\n\t}\n\treturn\n}\n\ntype depsGen struct {\n\tdeps astmod.Deps\n\tmod  *gopmod.Module\n\tfset *token.FileSet\n}\n\nfunc (p depsGen) gen(dir string) (err error) {\n\tpkgs, err := parser.ParseDirEx(p.fset, dir, parser.Config{\n\t\tClassKind: p.mod.ClassKind,\n\t\tMode:      parser.ImportsOnly,\n\t})\n\tif err != nil {\n\t\treturn\n\t}\n\n\tfor _, pkg := range pkgs {\n\t\tp.deps.Load(pkg, false)\n\t}\n\treturn\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "all.bash",
          "type": "blob",
          "size": 0.69140625,
          "content": "#! /usr/bin/env bash\n\n#\n# Copyright (c) 2021 The GoPlus Authors (goplus.org). All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nset -ex\n\ngo run cmd/make.go --install --regtest --autoproxy\n"
        },
        {
          "name": "all.bat",
          "type": "blob",
          "size": 0.0498046875,
          "content": "go run cmd/make.go --install --regtest --autoproxy\n"
        },
        {
          "name": "ast",
          "type": "tree",
          "content": null
        },
        {
          "name": "build_install_run.go",
          "type": "blob",
          "size": 6.8935546875,
          "content": "/*\n * Copyright (c) 2022 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/goplus/gop/x/gocmd\"\n\t\"github.com/qiniu/x/errors\"\n)\n\nfunc genFlags(flags []GenFlags) GenFlags {\n\tif flags != nil {\n\t\treturn flags[0]\n\t}\n\treturn 0\n}\n\n// -----------------------------------------------------------------------------\n\n// InstallDir installs a Go+ package directory.\nfunc InstallDir(dir string, conf *Config, install *gocmd.InstallConfig, flags ...GenFlags) (err error) {\n\t_, _, err = GenGoEx(dir, conf, false, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGo(dir, conf, false)`, -2, \"gop.GenGo\", dir, conf, false)\n\t}\n\treturn gocmd.Install(dir, install)\n}\n\n// InstallPkgPath installs a Go+ package.\nfunc InstallPkgPath(workDir, pkgPath string, conf *Config, install *gocmd.InstallConfig, flags ...GenFlags) (err error) {\n\tlocalDir, recursively, err := GenGoPkgPathEx(workDir, pkgPath, conf, true, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoPkgPath(workDir, pkgPath, conf, true)`, -2, \"gop.GenGoPkgPath\", workDir, pkgPath, conf, true)\n\t}\n\told := chdir(localDir)\n\tdefer os.Chdir(old)\n\treturn gocmd.Install(cwdParam(recursively), install)\n}\n\nfunc cwdParam(recursively bool) string {\n\tif recursively {\n\t\treturn \"./...\"\n\t}\n\treturn \".\"\n}\n\n// InstallFiles installs specified Go+ files.\nfunc InstallFiles(files []string, conf *Config, install *gocmd.InstallConfig) (err error) {\n\tfiles, err = GenGoFiles(\"\", files, conf)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoFiles(\"\", files, conf)`, -2, \"gop.GenGoFiles\", \"\", files, conf)\n\t}\n\treturn gocmd.InstallFiles(files, install)\n}\n\nfunc chdir(dir string) string {\n\told, err := os.Getwd()\n\tif err != nil {\n\t\tlog.Panicln(err)\n\t}\n\terr = os.Chdir(dir)\n\tif err != nil {\n\t\tlog.Panicln(err)\n\t}\n\treturn old\n}\n\n// -----------------------------------------------------------------------------\n\n// BuildDir builds a Go+ package directory.\nfunc BuildDir(dir string, conf *Config, build *gocmd.BuildConfig, flags ...GenFlags) (err error) {\n\t_, _, err = GenGoEx(dir, conf, false, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGo(dir, conf, false)`, -2, \"gop.GenGo\", dir, conf, false)\n\t}\n\treturn gocmd.Build(dir, build)\n}\n\n// BuildPkgPath builds a Go+ package.\nfunc BuildPkgPath(workDir, pkgPath string, conf *Config, build *gocmd.BuildConfig, flags ...GenFlags) (err error) {\n\tlocalDir, recursively, err := GenGoPkgPathEx(workDir, pkgPath, conf, false, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoPkgPath(workDir, pkgPath, conf, false)`, -2, \"gop.GenGoPkgPath\", workDir, pkgPath, conf, false)\n\t}\n\told, mod := chdirAndMod(localDir)\n\tdefer restoreDirAndMod(old, mod)\n\treturn gocmd.Build(cwdParam(recursively), build)\n}\n\n// BuildFiles builds specified Go+ files.\nfunc BuildFiles(files []string, conf *Config, build *gocmd.BuildConfig) (err error) {\n\tfiles, err = GenGoFiles(\"\", files, conf)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoFiles(\"\", files, conf)`, -2, \"gop.GenGoFiles\", \"\", files, conf)\n\t}\n\treturn gocmd.BuildFiles(files, build)\n}\n\nfunc chdirAndMod(dir string) (old string, mod os.FileMode) {\n\tmod = 0755\n\tif info, err := os.Stat(dir); err == nil {\n\t\tmod = info.Mode().Perm()\n\t}\n\tos.Chmod(dir, 0777)\n\told = chdir(dir)\n\treturn\n}\n\nfunc restoreDirAndMod(old string, mod os.FileMode) {\n\tos.Chmod(\".\", mod)\n\tos.Chdir(old)\n}\n\n// -----------------------------------------------------------------------------\n\n// If no go.mod and used Go+, use GOPROOT as buildDir.\nfunc getBuildDir(conf *Config) string {\n\tif conf != nil && conf.GopDeps != nil && *conf.GopDeps != 0 {\n\t\treturn conf.Gop.Root\n\t}\n\treturn \"\"\n}\n\n// RunDir runs an application from a Go+ package directory.\nfunc RunDir(dir string, args []string, conf *Config, run *gocmd.RunConfig, flags ...GenFlags) (err error) {\n\t_, _, err = GenGoEx(dir, conf, false, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGo(dir, conf, false)`, -2, \"gop.GenGo\", dir, conf, false)\n\t}\n\treturn gocmd.RunDir(getBuildDir(conf), dir, args, run)\n}\n\n// RunPkgPath runs an application from a Go+ package.\nfunc RunPkgPath(pkgPath string, args []string, chDir bool, conf *Config, run *gocmd.RunConfig, flags ...GenFlags) (err error) {\n\tlocalDir, recursively, err := GenGoPkgPathEx(\"\", pkgPath, conf, true, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoPkgPath(\"\", pkgPath, conf, true)`, -2, \"gop.GenGoPkgPath\", \"\", pkgPath, conf, true)\n\t}\n\tif recursively {\n\t\treturn errors.NewWith(errors.New(\"can't use ... pattern for `gop run` command\"), `recursively`, -1, \"\", recursively)\n\t}\n\tif chDir {\n\t\told := chdir(localDir)\n\t\tdefer os.Chdir(old)\n\t\tlocalDir = \".\"\n\t}\n\treturn gocmd.RunDir(\"\", localDir, args, run)\n}\n\n// RunFiles runs an application from specified Go+ files.\nfunc RunFiles(autogen string, files []string, args []string, conf *Config, run *gocmd.RunConfig) (err error) {\n\tfiles, err = GenGoFiles(autogen, files, conf)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoFiles(autogen, files, conf)`, -2, \"gop.GenGoFiles\", autogen, files, conf)\n\t}\n\treturn gocmd.RunFiles(getBuildDir(conf), files, args, run)\n}\n\n// -----------------------------------------------------------------------------\n\n// TestDir tests a Go+ package directory.\nfunc TestDir(dir string, conf *Config, test *gocmd.TestConfig, flags ...GenFlags) (err error) {\n\t_, _, err = GenGoEx(dir, conf, true, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGo(dir, conf, true)`, -2, \"gop.GenGo\", dir, conf, true)\n\t}\n\treturn gocmd.Test(dir, test)\n}\n\n// TestPkgPath tests a Go+ package.\nfunc TestPkgPath(workDir, pkgPath string, conf *Config, test *gocmd.TestConfig, flags ...GenFlags) (err error) {\n\tlocalDir, recursively, err := GenGoPkgPathEx(workDir, pkgPath, conf, false, genFlags(flags))\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoPkgPath(workDir, pkgPath, conf, false)`, -2, \"gop.GenGoPkgPath\", workDir, pkgPath, conf, false)\n\t}\n\told, mod := chdirAndMod(localDir)\n\tdefer restoreDirAndMod(old, mod)\n\treturn gocmd.Test(cwdParam(recursively), test)\n}\n\n// TestFiles tests specified Go+ files.\nfunc TestFiles(files []string, conf *Config, test *gocmd.TestConfig) (err error) {\n\tfiles, err = GenGoFiles(\"\", files, conf)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `GenGoFiles(\"\", files, conf)`, -2, \"gop.GenGoFiles\", \"\", files, conf)\n\t}\n\treturn gocmd.TestFiles(files, test)\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "builtin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cl",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "env",
          "type": "tree",
          "content": null
        },
        {
          "name": "format",
          "type": "tree",
          "content": null
        },
        {
          "name": "gengo.go",
          "type": "blob",
          "size": 8.9150390625,
          "content": "/*\n * Copyright (c) 2022 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path/filepath\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/goplus/mod/modcache\"\n\t\"github.com/goplus/mod/modfetch\"\n\t\"github.com/qiniu/x/errors\"\n)\n\nconst (\n\ttestingGoFile    = \"_test\"\n\tautoGenFile      = \"gop_autogen.go\"\n\tautoGenTestFile  = \"gop_autogen_test.go\"\n\tautoGen2TestFile = \"gop_autogen2_test.go\"\n)\n\ntype GenFlags int\n\nconst (\n\tGenFlagCheckOnly GenFlags = 1 << iota\n\tGenFlagSingleFile\n\tGenFlagPrintError\n\tGenFlagPrompt\n)\n\n// -----------------------------------------------------------------------------\n\n// GenGo generates gop_autogen.go for a Go+ package directory.\nfunc GenGo(dir string, conf *Config, genTestPkg bool) (string, bool, error) {\n\treturn GenGoEx(dir, conf, genTestPkg, 0)\n}\n\n// GenGoEx generates gop_autogen.go for a Go+ package directory.\nfunc GenGoEx(dir string, conf *Config, genTestPkg bool, flags GenFlags) (string, bool, error) {\n\trecursively := strings.HasSuffix(dir, \"/...\")\n\tif recursively {\n\t\tdir = dir[:len(dir)-4]\n\t}\n\treturn dir, recursively, genGoDir(dir, conf, genTestPkg, recursively, flags)\n}\n\nfunc genGoDir(dir string, conf *Config, genTestPkg, recursively bool, flags GenFlags) (err error) {\n\tif conf == nil {\n\t\tconf = new(Config)\n\t}\n\tif recursively {\n\t\tvar (\n\t\t\tlist errors.List\n\t\t\tfn   func(path string, d fs.DirEntry, err error) error\n\t\t)\n\t\tif flags&GenFlagSingleFile != 0 {\n\t\t\tfn = func(path string, d fs.DirEntry, err error) error {\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\treturn genGoEntry(&list, path, d, conf, flags)\n\t\t\t}\n\t\t} else {\n\t\t\tfn = func(path string, d fs.DirEntry, err error) error {\n\t\t\t\tif err == nil && d.IsDir() {\n\t\t\t\t\tif strings.HasPrefix(d.Name(), \"_\") || (path != dir && hasMod(path)) { // skip _\n\t\t\t\t\t\treturn filepath.SkipDir\n\t\t\t\t\t}\n\t\t\t\t\tif e := genGoIn(path, conf, genTestPkg, flags); e != nil && notIgnNotated(e, conf) {\n\t\t\t\t\t\tif flags&GenFlagPrintError != 0 {\n\t\t\t\t\t\t\tfmt.Fprintln(os.Stderr, e)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlist.Add(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\terr = filepath.WalkDir(dir, fn)\n\t\tif err != nil {\n\t\t\treturn errors.NewWith(err, `filepath.WalkDir(dir, fn)`, -2, \"filepath.WalkDir\", dir, fn)\n\t\t}\n\t\treturn list.ToError()\n\t}\n\tif flags&GenFlagSingleFile != 0 {\n\t\tvar list errors.List\n\t\tvar entries, e = os.ReadDir(dir)\n\t\tif e != nil {\n\t\t\treturn errors.NewWith(e, `os.ReadDir(dir)`, -2, \"os.ReadDir\", dir)\n\t\t}\n\t\tfor _, d := range entries {\n\t\t\tgenGoEntry(&list, filepath.Join(dir, d.Name()), d, conf, flags)\n\t\t}\n\t\treturn list.ToError()\n\t}\n\tif e := genGoIn(dir, conf, genTestPkg, flags); e != nil && notIgnNotated(e, conf) {\n\t\tif (flags & GenFlagPrintError) != 0 {\n\t\t\tfmt.Fprintln(os.Stderr, e)\n\t\t}\n\t\terr = e\n\t}\n\treturn\n}\n\nfunc hasMod(dir string) bool {\n\t_, err := os.Lstat(dir + \"/go.mod\")\n\treturn err == nil\n}\n\nfunc notIgnNotated(e error, conf *Config) bool {\n\treturn !(conf != nil && conf.IgnoreNotatedError && IgnoreNotated(e))\n}\n\nfunc genGoEntry(list *errors.List, path string, d fs.DirEntry, conf *Config, flags GenFlags) error {\n\tfname := d.Name()\n\tif strings.HasPrefix(fname, \"_\") { // skip _\n\t\tif d.IsDir() {\n\t\t\treturn filepath.SkipDir\n\t\t}\n\t} else if !d.IsDir() && strings.HasSuffix(fname, \".gop\") {\n\t\tif e := genGoSingleFile(path, conf, flags); e != nil && notIgnNotated(e, conf) {\n\t\t\tif flags&GenFlagPrintError != 0 {\n\t\t\t\tfmt.Fprintln(os.Stderr, e)\n\t\t\t}\n\t\t\tlist.Add(e)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc genGoSingleFile(file string, conf *Config, flags GenFlags) (err error) {\n\tdir, fname := filepath.Split(file)\n\tautogen := dir + strings.TrimSuffix(fname, \".gop\") + \"_autogen.go\"\n\tif (flags & GenFlagPrompt) != 0 {\n\t\tfmt.Fprintln(os.Stderr, \"GenGo\", file, \"...\")\n\t}\n\tout, err := LoadFiles(\".\", []string{file}, conf)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `LoadFiles(files, conf)`, -2, \"gop.LoadFiles\", file)\n\t}\n\tif flags&GenFlagCheckOnly != 0 {\n\t\treturn nil\n\t}\n\tif err := out.WriteFile(autogen); err != nil {\n\t\treturn errors.NewWith(err, `out.WriteFile(autogen)`, -2, \"(*gogen.Package).WriteFile\", out, autogen)\n\t}\n\treturn nil\n}\n\nfunc genGoIn(dir string, conf *Config, genTestPkg bool, flags GenFlags, gen ...*bool) (err error) {\n\tout, test, err := LoadDir(dir, conf, genTestPkg, (flags&GenFlagPrompt) != 0)\n\tif err != nil {\n\t\tif NotFound(err) { // no Go+ source files\n\t\t\treturn nil\n\t\t}\n\t\treturn errors.NewWith(err, `LoadDir(dir, conf, genTestPkg)`, -5, \"gop.LoadDir\", dir, conf, genTestPkg)\n\t}\n\tif flags&GenFlagCheckOnly != 0 {\n\t\treturn nil\n\t}\n\tos.MkdirAll(dir, 0755)\n\tfile := filepath.Join(dir, autoGenFile)\n\terr = out.WriteFile(file)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `out.WriteFile(file)`, -2, \"(*gogen.Package).WriteFile\", out, file)\n\t}\n\tif gen != nil { // say `gop_autogen.go generated`\n\t\t*gen[0] = true\n\t}\n\n\ttestFile := filepath.Join(dir, autoGenTestFile)\n\terr = out.WriteFile(testFile, testingGoFile)\n\tif err != nil && err != syscall.ENOENT {\n\t\treturn errors.NewWith(err, `out.WriteFile(testFile, testingGoFile)`, -2, \"(*gogen.Package).WriteFile\", out, testFile, testingGoFile)\n\t}\n\n\tif test != nil {\n\t\ttestFile = filepath.Join(dir, autoGen2TestFile)\n\t\terr = test.WriteFile(testFile, testingGoFile)\n\t\tif err != nil {\n\t\t\treturn errors.NewWith(err, `test.WriteFile(testFile, testingGoFile)`, -2, \"(*gogen.Package).WriteFile\", test, testFile, testingGoFile)\n\t\t}\n\t} else {\n\t\terr = nil\n\t}\n\treturn\n}\n\n// -----------------------------------------------------------------------------\n\nconst (\n\tmodWritable = 0755\n\tmodReadonly = 0555\n)\n\n// GenGoPkgPath generates gop_autogen.go for a Go+ package.\nfunc GenGoPkgPath(workDir, pkgPath string, conf *Config, allowExtern bool) (localDir string, recursively bool, err error) {\n\treturn GenGoPkgPathEx(workDir, pkgPath, conf, allowExtern, 0)\n}\n\nfunc remotePkgPath(pkgPath string, conf *Config, recursively bool, flags GenFlags) (localDir string, _recursively bool, err error) {\n\tremotePkgPathDo(pkgPath, func(dir, _ string) {\n\t\tos.Chmod(dir, modWritable)\n\t\tdefer os.Chmod(dir, modReadonly)\n\t\tlocalDir = dir\n\t\t_recursively = recursively\n\t\terr = genGoDir(dir, conf, false, recursively, flags)\n\t}, func(e error) {\n\t\terr = e\n\t})\n\treturn\n}\n\n// GenGoPkgPathEx generates gop_autogen.go for a Go+ package.\nfunc GenGoPkgPathEx(workDir, pkgPath string, conf *Config, allowExtern bool, flags GenFlags) (localDir string, recursively bool, err error) {\n\trecursively = strings.HasSuffix(pkgPath, \"/...\")\n\tif recursively {\n\t\tpkgPath = pkgPath[:len(pkgPath)-4]\n\t} else if allowExtern && strings.Contains(pkgPath, \"@\") {\n\t\treturn remotePkgPath(pkgPath, conf, false, flags)\n\t}\n\n\tmod, err := gopmod.Load(workDir)\n\tif NotFound(err) && allowExtern {\n\t\treturn remotePkgPath(pkgPath, conf, recursively, flags)\n\t} else if err != nil {\n\t\treturn\n\t}\n\n\tpkg, err := mod.Lookup(pkgPath)\n\tif err != nil {\n\t\treturn\n\t}\n\tlocalDir = pkg.Dir\n\tif pkg.Type == gopmod.PkgtExtern {\n\t\tos.Chmod(localDir, modWritable)\n\t\tdefer os.Chmod(localDir, modReadonly)\n\t}\n\terr = genGoDir(localDir, conf, false, recursively, flags)\n\treturn\n}\n\nfunc remotePkgPathDo(pkgPath string, doSth func(pkgDir, modDir string), onErr func(e error)) {\n\tmodVer, leftPart, err := modfetch.GetPkg(pkgPath, \"\")\n\tif err != nil {\n\t\tonErr(err)\n\t} else if dir, err := modcache.Path(modVer); err != nil {\n\t\tonErr(err)\n\t} else {\n\t\tdoSth(filepath.Join(dir, leftPart), dir)\n\t}\n}\n\n// -----------------------------------------------------------------------------\n\n// GenGoFiles generates gop_autogen.go for specified Go+ files.\nfunc GenGoFiles(autogen string, files []string, conf *Config) (outFiles []string, err error) {\n\tif conf == nil {\n\t\tconf = new(Config)\n\t}\n\tif autogen == \"\" {\n\t\tautogen = \"gop_autogen.go\"\n\t\tif len(files) == 1 {\n\t\t\tfile := files[0]\n\t\t\tsrcDir, fname := filepath.Split(file)\n\t\t\tif hasMultiFiles(srcDir, \".gop\") {\n\t\t\t\tautogen = filepath.Join(srcDir, \"gop_autogen_\"+fname+\".go\")\n\t\t\t}\n\t\t}\n\t}\n\tout, err := LoadFiles(\".\", files, conf)\n\tif err != nil {\n\t\terr = errors.NewWith(err, `LoadFiles(files, conf)`, -2, \"gop.LoadFiles\", files, conf)\n\t\treturn\n\t}\n\terr = out.WriteFile(autogen)\n\tif err != nil {\n\t\terr = errors.NewWith(err, `out.WriteFile(autogen)`, -2, \"(*gogen.Package).WriteFile\", out, autogen)\n\t}\n\toutFiles = []string{autogen}\n\treturn\n}\n\nfunc hasMultiFiles(srcDir string, ext string) bool {\n\tvar has bool\n\tif f, err := os.Open(srcDir); err == nil {\n\t\tdefer f.Close()\n\t\tfis, _ := f.ReadDir(-1)\n\t\tfor _, fi := range fis {\n\t\t\tif !fi.IsDir() && filepath.Ext(fi.Name()) == ext {\n\t\t\t\tif has {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t\thas = true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.3681640625,
          "content": "module github.com/goplus/gop\n\ngo 1.18\n\nrequire (\n\tgithub.com/fsnotify/fsnotify v1.8.0\n\tgithub.com/goplus/gogen v1.16.5-0.20250109123606-4aa868a225d7\n\tgithub.com/goplus/llgo v0.9.9\n\tgithub.com/goplus/mod v0.13.13\n\tgithub.com/qiniu/x v1.13.10\n\tgolang.org/x/tools v0.19.0\n)\n\nrequire (\n\tgolang.org/x/mod v0.20.0 // indirect\n\tgolang.org/x/sys v0.21.0 // indirect\n)\n\nretract v1.1.12\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.3916015625,
          "content": "github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/goplus/gogen v1.16.5-0.20250109123606-4aa868a225d7 h1:+w0mFMKgnWpNU9jEIbkVj5GfLXUKRFESSjtC26T12X8=\ngithub.com/goplus/gogen v1.16.5-0.20250109123606-4aa868a225d7/go.mod h1:6TQYbabXDF9LCdDkOOzHmfg1R4ENfXQ3XpHa9RhTSD8=\ngithub.com/goplus/llgo v0.9.9 h1:sCM8ehOtuAEY/NQbJ4xAMRZhxEdDgilouWZpoaLiYrM=\ngithub.com/goplus/llgo v0.9.9/go.mod h1:udcq+s6tGOdhJq7I8fXPTv4qT2j17/KrlvtcJrMZAoM=\ngithub.com/goplus/mod v0.13.13 h1:rvwXCCQciTz4NjB3GLAZ2cskw035B64F7KzRAyMYUCw=\ngithub.com/goplus/mod v0.13.13/go.mod h1:invR72Rz2+qpOOsXqxz830MX8/aR2GDR2EAow/WgfHI=\ngithub.com/qiniu/x v1.13.10 h1:J4Z3XugYzAq85SlyAfqlKVrbf05glMbAOh+QncsDQpE=\ngithub.com/qiniu/x v1.13.10/go.mod h1:INZ2TSWSJVWO/RuELQROERcslBwVgFG7MkTfEdaQz9E=\ngolang.org/x/mod v0.20.0 h1:utOm6MM3R3dnawAiJgn0y+xvuYRsm1RKM/4giyfDgV0=\ngolang.org/x/mod v0.20.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sys v0.21.0 h1:rF+pYz3DAGSQAxAu1CbC7catZg4ebC4UIeIhKxBZvws=\ngolang.org/x/sys v0.21.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/tools v0.19.0 h1:tfGCXNR1OsFG+sVdLAitlpjAvD/I6dHDKnYrpEZUHkw=\ngolang.org/x/tools v0.19.0/go.mod h1:qoJWxmGSIBmAeriMx19ogtrEPrGtDbPK634QFIcLAhc=\n"
        },
        {
          "name": "imp.go",
          "type": "blob",
          "size": 6.115234375,
          "content": "/*\n * Copyright (c) 2022 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"crypto/sha256\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"go/token\"\n\t\"go/types\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"strings\"\n\n\t\"github.com/goplus/gogen/packages\"\n\t\"github.com/goplus/gogen/packages/cache\"\n\t\"github.com/goplus/mod/env\"\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/goplus/mod/modfetch\"\n\t\"github.com/goplus/mod/modfile\"\n)\n\n// -----------------------------------------------------------------------------\n\n// Importer represents a Go+ importer.\ntype Importer struct {\n\timpFrom *packages.Importer\n\tmod     *gopmod.Module\n\tgop     *env.Gop\n\tfset    *token.FileSet\n\n\tFlags GenFlags // can change this for loading Go+ modules\n}\n\n// NewImporter creates a Go+ Importer.\nfunc NewImporter(mod *gopmod.Module, gop *env.Gop, fset *token.FileSet) *Importer {\n\tconst (\n\t\tdefaultFlags = GenFlagPrompt | GenFlagPrintError\n\t)\n\tif mod == nil || !mod.HasModfile() {\n\t\tif modGop, e := gopmod.LoadFrom(filepath.Join(gop.Root, \"go.mod\"), \"\"); e == nil {\n\t\t\tmodGop.ImportClasses()\n\t\t\tmod = modGop\n\t\t} else {\n\t\t\tmod = gopmod.Default\n\t\t}\n\t}\n\tdir := mod.Root()\n\timpFrom := packages.NewImporter(fset, dir)\n\tret := &Importer{mod: mod, gop: gop, impFrom: impFrom, fset: fset, Flags: defaultFlags}\n\timpFrom.SetCache(cache.New(ret.PkgHash))\n\treturn ret\n}\n\n// CacheFile returns file path of the cache.\nfunc (p *Importer) CacheFile() string {\n\tcacheDir, _ := os.UserCacheDir()\n\tcacheDir += \"/gop-build/\"\n\tos.MkdirAll(cacheDir, 0755)\n\n\tfname := \"\"\n\th := sha256.New()\n\tif root := p.mod.Root(); root != \"\" {\n\t\tio.WriteString(h, root)\n\t\tfname = filepath.Base(root)\n\t}\n\thash := base64.RawURLEncoding.EncodeToString(h.Sum(nil))\n\treturn cacheDir + hash + fname\n}\n\n// Cache returns the cache object.\nfunc (p *Importer) Cache() *cache.Impl {\n\treturn p.impFrom.Cache().(*cache.Impl)\n}\n\n// PkgHash calculates hash value for a package.\n// It is required by cache.New func.\nfunc (p *Importer) PkgHash(pkgPath string, self bool) string {\n\tif pkg, e := p.mod.Lookup(pkgPath); e == nil {\n\t\tswitch pkg.Type {\n\t\tcase gopmod.PkgtStandard:\n\t\t\treturn cache.HashSkip\n\t\tcase gopmod.PkgtExtern:\n\t\t\tif pkg.Real.Version != \"\" {\n\t\t\t\treturn pkg.Real.String()\n\t\t\t}\n\t\t\tfallthrough\n\t\tcase gopmod.PkgtModule:\n\t\t\treturn dirHash(p.mod, p.gop, pkg.Dir, self)\n\t\t}\n\t}\n\tif isPkgInMod(pkgPath, gopMod) {\n\t\treturn cache.HashSkip\n\t}\n\tlog.Println(\"PkgHash: unexpected package -\", pkgPath)\n\treturn cache.HashInvalid\n}\n\nconst (\n\tgopMod = \"github.com/goplus/gop\"\n)\n\n// Import imports a Go/Go+ package.\nfunc (p *Importer) Import(pkgPath string) (pkg *types.Package, err error) {\n\tif strings.HasPrefix(pkgPath, gopMod) {\n\t\tif suffix := pkgPath[len(gopMod):]; suffix == \"\" || suffix[0] == '/' {\n\t\t\tgopRoot := p.gop.Root\n\t\t\tif suffix == \"/cl/internal/gop-in-go/foo\" { // for test github.com/goplus/gop/cl\n\t\t\t\tif err = p.genGoExtern(gopRoot+suffix, false); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn p.impFrom.ImportFrom(pkgPath, gopRoot, 0)\n\t\t}\n\t}\n\tif isPkgInMod(pkgPath, \"github.com/qiniu/x\") {\n\t\treturn p.impFrom.ImportFrom(pkgPath, p.gop.Root, 0)\n\t}\n\tif mod := p.mod; mod.HasModfile() {\n\t\tret, e := mod.Lookup(pkgPath)\n\t\tif e != nil {\n\t\t\treturn nil, e\n\t\t}\n\t\tswitch ret.Type {\n\t\tcase gopmod.PkgtExtern:\n\t\t\tisExtern := ret.Real.Version != \"\"\n\t\t\tif isExtern {\n\t\t\t\tif _, err = modfetch.Get(ret.Real.String()); err != nil {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\tmodDir := ret.ModDir\n\t\t\tgoModfile := filepath.Join(modDir, \"go.mod\")\n\t\t\tif _, e := os.Lstat(goModfile); e != nil { // no go.mod\n\t\t\t\tos.Chmod(modDir, modWritable)\n\t\t\t\tdefer os.Chmod(modDir, modReadonly)\n\t\t\t\tos.WriteFile(goModfile, defaultGoMod(ret.ModPath), 0644)\n\t\t\t}\n\t\t\treturn p.impFrom.ImportFrom(pkgPath, ret.ModDir, 0)\n\t\tcase gopmod.PkgtModule, gopmod.PkgtLocal:\n\t\t\tif err = p.genGoExtern(ret.Dir, false); err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\tcase gopmod.PkgtStandard:\n\t\t\treturn p.impFrom.ImportFrom(pkgPath, p.gop.Root, 0)\n\t\t}\n\t}\n\treturn p.impFrom.Import(pkgPath)\n}\n\nfunc (p *Importer) genGoExtern(dir string, isExtern bool) (err error) {\n\tgenfile := filepath.Join(dir, autoGenFile)\n\tif _, err = os.Lstat(genfile); err != nil { // no gop_autogen.go\n\t\tif isExtern {\n\t\t\tos.Chmod(dir, modWritable)\n\t\t\tdefer os.Chmod(dir, modReadonly)\n\t\t}\n\t\tgen := false\n\t\terr = genGoIn(dir, &Config{Gop: p.gop, Importer: p, Fset: p.fset}, false, p.Flags, &gen)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t\tif gen {\n\t\t\tcmd := exec.Command(\"go\", \"mod\", \"tidy\")\n\t\t\tcmd.Stdout = os.Stdout\n\t\t\tcmd.Stderr = os.Stderr\n\t\t\tcmd.Dir = dir\n\t\t\terr = cmd.Run()\n\t\t}\n\t}\n\treturn\n}\n\nfunc isPkgInMod(pkgPath, modPath string) bool {\n\tif strings.HasPrefix(pkgPath, modPath) {\n\t\tsuffix := pkgPath[len(modPath):]\n\t\treturn suffix == \"\" || suffix[0] == '/'\n\t}\n\treturn false\n}\n\nfunc defaultGoMod(modPath string) []byte {\n\treturn []byte(`module ` + modPath + `\n\ngo 1.16\n`)\n}\n\nfunc dirHash(mod *gopmod.Module, gop *env.Gop, dir string, self bool) string {\n\th := sha256.New()\n\tif self {\n\t\tfmt.Fprintf(h, \"go\\t%s\\n\", runtime.Version())\n\t\tfmt.Fprintf(h, \"gop\\t%s\\n\", gop.Version)\n\t}\n\tif fis, err := os.ReadDir(dir); err == nil {\n\t\tfor _, fi := range fis {\n\t\t\tif fi.IsDir() {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfname := fi.Name()\n\t\t\tif strings.HasPrefix(fname, \"_\") || !canCl(mod, fname) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif v, e := fi.Info(); e == nil {\n\t\t\t\tfmt.Fprintf(h, \"file\\t%s\\t%x\\t%x\\n\", fname, v.Size(), v.ModTime().UnixNano())\n\t\t\t}\n\t\t}\n\t}\n\treturn base64.RawStdEncoding.EncodeToString(h.Sum(nil))\n}\n\nfunc canCl(mod *gopmod.Module, fname string) bool {\n\tswitch path.Ext(fname) {\n\tcase \".go\", \".gop\", \".gox\":\n\t\treturn true\n\tdefault:\n\t\text := modfile.ClassExt(fname)\n\t\treturn mod.IsClass(ext)\n\t}\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "load.go",
          "type": "blob",
          "size": 9.810546875,
          "content": "/*\n * Copyright (c) 2022 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n\n\t\"github.com/goplus/gogen\"\n\t\"github.com/goplus/gop/ast\"\n\t\"github.com/goplus/gop/cl\"\n\t\"github.com/goplus/gop/parser\"\n\t\"github.com/goplus/gop/token\"\n\t\"github.com/goplus/gop/x/gocmd\"\n\t\"github.com/goplus/gop/x/gopenv\"\n\t\"github.com/goplus/mod/env\"\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/qiniu/x/errors\"\n)\n\nvar (\n\tErrNotFound      = gopmod.ErrNotFound\n\tErrIgnoreNotated = errors.New(\"notated error ignored\")\n)\n\n// NotFound returns if cause err is ErrNotFound or not\nfunc NotFound(err error) bool {\n\treturn gopmod.IsNotFound(err)\n}\n\n// IgnoreNotated returns if cause err is ErrIgnoreNotated or not.\nfunc IgnoreNotated(err error) bool {\n\treturn errors.Err(err) == ErrIgnoreNotated\n}\n\n// ErrorPos returns where the error occurs.\nfunc ErrorPos(err error) token.Pos {\n\tswitch v := err.(type) {\n\tcase *gogen.CodeError:\n\t\treturn v.Pos\n\tcase *gogen.MatchError:\n\t\treturn v.Pos()\n\tcase *gogen.ImportError:\n\t\treturn v.Pos\n\t}\n\treturn token.NoPos\n}\n\nfunc ignNotatedErrs(err error, pkg *ast.Package, fset *token.FileSet) error {\n\tswitch v := err.(type) {\n\tcase errors.List:\n\t\tvar ret errors.List\n\t\tfor _, e := range v {\n\t\t\tif isNotatedErr(e, pkg, fset) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tret = append(ret, e)\n\t\t}\n\t\tif len(ret) == 0 {\n\t\t\treturn ErrIgnoreNotated\n\t\t}\n\t\treturn ret\n\tdefault:\n\t\tif isNotatedErr(err, pkg, fset) {\n\t\t\treturn ErrIgnoreNotated\n\t\t}\n\t\treturn err\n\t}\n}\n\nfunc isNotatedErr(err error, pkg *ast.Package, fset *token.FileSet) (notatedErr bool) {\n\tpos := ErrorPos(err)\n\tf := fset.File(pos)\n\tif f == nil {\n\t\treturn\n\t}\n\tgopf, ok := pkg.Files[f.Name()]\n\tif !ok {\n\t\treturn\n\t}\n\tlines := token.Lines(f)\n\ti := f.Line(pos) - 1 // base 0\n\tstart := lines[i]\n\tvar end int\n\tif i+1 < len(lines) {\n\t\tend = lines[i+1]\n\t} else {\n\t\tend = f.Size()\n\t}\n\ttext := string(gopf.Code[start:end])\n\tcommentOff := strings.Index(text, \"//\")\n\tif commentOff < 0 {\n\t\treturn\n\t}\n\treturn strings.Contains(text[commentOff+2:], \"compile error:\")\n}\n\n// -----------------------------------------------------------------------------\n\n// Config represents a configuration for loading Go+ packages.\ntype Config struct {\n\tGop      *env.Gop\n\tFset     *token.FileSet\n\tMod      *gopmod.Module\n\tImporter *Importer\n\n\tFilter func(fs.FileInfo) bool\n\n\t// If not nil, it is used for returning result of checks Go+ dependencies.\n\t// see https://pkg.go.dev/github.com/goplus/gogen#File.CheckGopDeps\n\tGopDeps *int\n\n\t// CacheFile specifies the file path of the cache.\n\tCacheFile string\n\n\tIgnoreNotatedError bool\n\tDontUpdateGoMod    bool\n}\n\n// ConfFlags represents configuration flags.\ntype ConfFlags int\n\nconst (\n\tConfFlagIgnoreNotatedError ConfFlags = 1 << iota\n\tConfFlagDontUpdateGoMod\n\tConfFlagNoTestFiles\n\tConfFlagNoCacheFile\n)\n\n// NewDefaultConf creates a dfault configuration for common cases.\nfunc NewDefaultConf(dir string, flags ConfFlags) (conf *Config, err error) {\n\tmod, err := LoadMod(dir)\n\tif err != nil {\n\t\treturn\n\t}\n\tgop := gopenv.Get()\n\tfset := token.NewFileSet()\n\timp := NewImporter(mod, gop, fset)\n\tconf = &Config{\n\t\tGop: gop, Fset: fset, Mod: mod, Importer: imp,\n\t\tIgnoreNotatedError: flags&ConfFlagIgnoreNotatedError != 0,\n\t\tDontUpdateGoMod:    flags&ConfFlagDontUpdateGoMod != 0,\n\t}\n\tif flags&ConfFlagNoCacheFile == 0 {\n\t\tconf.CacheFile = imp.CacheFile()\n\t\timp.Cache().Load(conf.CacheFile)\n\t}\n\tif flags&ConfFlagNoTestFiles != 0 {\n\t\tconf.Filter = FilterNoTestFiles\n\t}\n\treturn\n}\n\nfunc (conf *Config) NewGoCmdConf() *gocmd.Config {\n\tif cl := conf.Mod.Opt.Compiler; cl != nil {\n\t\tif os.Getenv(\"GOP_GOCMD\") == \"\" {\n\t\t\tos.Setenv(\"GOP_GOCMD\", cl.Name)\n\t\t}\n\t}\n\treturn &gocmd.Config{\n\t\tGop: conf.Gop,\n\t}\n}\n\n// UpdateCache updates the cache.\nfunc (conf *Config) UpdateCache(verbose ...bool) {\n\tif conf.CacheFile != \"\" {\n\t\tc := conf.Importer.Cache()\n\t\tc.Save(conf.CacheFile)\n\t\tif verbose != nil && verbose[0] {\n\t\t\tfmt.Println(\"Times of calling go list:\", c.ListTimes())\n\t\t}\n\t}\n}\n\n// LoadMod loads a Go+ module from a specified directory.\nfunc LoadMod(dir string) (mod *gopmod.Module, err error) {\n\tmod, err = gopmod.Load(dir)\n\tif err != nil && !gopmod.IsNotFound(err) {\n\t\terr = errors.NewWith(err, `gopmod.Load(dir, 0)`, -2, \"gopmod.Load\", dir, 0)\n\t\treturn\n\t}\n\tif mod == nil {\n\t\tmod = gopmod.Default\n\t}\n\terr = mod.ImportClasses()\n\tif err != nil {\n\t\terr = errors.NewWith(err, `mod.ImportClasses()`, -2, \"(*gopmod.Module).ImportClasses\", mod)\n\t}\n\treturn\n}\n\n// FilterNoTestFiles filters to skip all testing files.\nfunc FilterNoTestFiles(fi fs.FileInfo) bool {\n\tfname := fi.Name()\n\tsuffix := \"\"\n\tswitch path.Ext(fname) {\n\tcase \".gox\":\n\t\tsuffix = \"test.gox\"\n\tcase \".gop\":\n\t\tsuffix = \"_test.gop\"\n\tcase \".go\":\n\t\tsuffix = \"_test.go\"\n\tdefault:\n\t\treturn true\n\t}\n\treturn !strings.HasSuffix(fname, suffix)\n}\n\n// -----------------------------------------------------------------------------\n\n// LoadDir loads Go+ packages from a specified directory.\nfunc LoadDir(dir string, conf *Config, genTestPkg bool, promptGenGo ...bool) (out, test *gogen.Package, err error) {\n\tif conf == nil {\n\t\tconf = new(Config)\n\t}\n\n\tmod := conf.Mod\n\tif mod == nil {\n\t\tif mod, err = LoadMod(dir); err != nil {\n\t\t\terr = errors.NewWith(err, `LoadMod(dir)`, -2, \"gop.LoadMod\", dir)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfset := conf.Fset\n\tif fset == nil {\n\t\tfset = token.NewFileSet()\n\t}\n\tpkgs, err := parser.ParseDirEx(fset, dir, parser.Config{\n\t\tClassKind: mod.ClassKind,\n\t\tFilter:    conf.Filter,\n\t\tMode:      parser.ParseComments | parser.SaveAbsFile,\n\t})\n\tif err != nil {\n\t\treturn\n\t}\n\tif len(pkgs) == 0 {\n\t\treturn nil, nil, ErrNotFound\n\t}\n\n\tgop := conf.Gop\n\tif gop == nil {\n\t\tgop = gopenv.Get()\n\t}\n\timp := conf.Importer\n\tif imp == nil {\n\t\timp = NewImporter(mod, gop, fset)\n\t}\n\n\tvar pkgTest *ast.Package\n\tvar clConf = &cl.Config{\n\t\tFset:         fset,\n\t\tRelativeBase: relativeBaseOf(mod),\n\t\tImporter:     imp,\n\t\tLookupClass:  mod.LookupClass,\n\t}\n\n\tfor name, pkg := range pkgs {\n\t\tif strings.HasSuffix(name, \"_test\") {\n\t\t\tif pkgTest != nil {\n\t\t\t\treturn nil, nil, ErrMultiTestPackges\n\t\t\t}\n\t\t\tpkgTest = pkg\n\t\t\tcontinue\n\t\t}\n\t\tif out != nil {\n\t\t\treturn nil, nil, ErrMultiPackges\n\t\t}\n\t\tif len(pkg.Files) == 0 { // no Go+ source files\n\t\t\tcontinue\n\t\t}\n\t\tif promptGenGo != nil && promptGenGo[0] {\n\t\t\tfmt.Fprintln(os.Stderr, \"GenGo\", dir, \"...\")\n\t\t}\n\t\tout, err = cl.NewPackage(\"\", pkg, clConf)\n\t\tif err != nil {\n\t\t\tif conf.IgnoreNotatedError {\n\t\t\t\terr = ignNotatedErrs(err, pkg, fset)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\t}\n\tif out == nil {\n\t\treturn nil, nil, ErrNotFound\n\t}\n\tif genTestPkg && pkgTest != nil {\n\t\ttest, err = cl.NewPackage(\"\", pkgTest, clConf)\n\t}\n\tafterLoad(mod, gop, out, test, conf)\n\treturn\n}\n\nfunc afterLoad(mod *gopmod.Module, gop *env.Gop, out, test *gogen.Package, conf *Config) {\n\tif mod.Path() == gopMod { // nothing to do for Go+ itself\n\t\treturn\n\t}\n\tupdateMod := !conf.DontUpdateGoMod && mod.HasModfile()\n\tif updateMod || conf.GopDeps != nil {\n\t\tflags := checkGopDeps(out)\n\t\tif conf.GopDeps != nil { // for `gop run`\n\t\t\t*conf.GopDeps = flags\n\t\t}\n\t\tif updateMod {\n\t\t\tif test != nil {\n\t\t\t\tflags |= checkGopDeps(test)\n\t\t\t}\n\t\t\tif flags != 0 {\n\t\t\t\tmod.SaveWithGopMod(gop, flags)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc checkGopDeps(pkg *gogen.Package) (flags int) {\n\tpkg.ForEachFile(func(fname string, file *gogen.File) {\n\t\tflags |= file.CheckGopDeps(pkg)\n\t})\n\treturn\n}\n\nfunc relativeBaseOf(mod *gopmod.Module) string {\n\tif mod.HasModfile() {\n\t\treturn mod.Root()\n\t}\n\tdir, _ := os.Getwd()\n\treturn dir\n}\n\n// -----------------------------------------------------------------------------\n\n// LoadFiles loads a Go+ package from specified files.\nfunc LoadFiles(dir string, files []string, conf *Config) (out *gogen.Package, err error) {\n\tif conf == nil {\n\t\tconf = new(Config)\n\t}\n\n\tmod := conf.Mod\n\tif mod == nil {\n\t\tif mod, err = LoadMod(dir); err != nil {\n\t\t\terr = errors.NewWith(err, `LoadMod(dir)`, -2, \"gop.LoadMod\", dir)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfset := conf.Fset\n\tif fset == nil {\n\t\tfset = token.NewFileSet()\n\t}\n\tpkgs, err := parser.ParseEntries(fset, files, parser.Config{\n\t\tClassKind: mod.ClassKind,\n\t\tFilter:    conf.Filter,\n\t\tMode:      parser.ParseComments | parser.SaveAbsFile,\n\t})\n\tif err != nil {\n\t\terr = errors.NewWith(err, `parser.ParseFiles(fset, files, parser.ParseComments)`, -2, \"parser.ParseFiles\", fset, files, parser.ParseComments)\n\t\treturn\n\t}\n\tif len(pkgs) != 1 {\n\t\terr = errors.NewWith(ErrMultiPackges, `len(pkgs) != 1`, -1, \"!=\", len(pkgs), 1)\n\t\treturn\n\t}\n\tgop := conf.Gop\n\tif gop == nil {\n\t\tgop = gopenv.Get()\n\t}\n\tfor _, pkg := range pkgs {\n\t\timp := conf.Importer\n\t\tif imp == nil {\n\t\t\timp = NewImporter(mod, gop, fset)\n\t\t}\n\t\tclConf := &cl.Config{\n\t\t\tFset:         fset,\n\t\t\tRelativeBase: relativeBaseOf(mod),\n\t\t\tImporter:     imp,\n\t\t\tLookupClass:  mod.LookupClass,\n\t\t}\n\t\tout, err = cl.NewPackage(\"\", pkg, clConf)\n\t\tif err != nil {\n\t\t\tif conf.IgnoreNotatedError {\n\t\t\t\terr = ignNotatedErrs(err, pkg, fset)\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\tafterLoad(mod, gop, out, nil, conf)\n\treturn\n}\n\n// -----------------------------------------------------------------------------\n\nvar (\n\tErrMultiPackges     = errors.New(\"multiple packages\")\n\tErrMultiTestPackges = errors.New(\"multiple test packages\")\n)\n\n// -----------------------------------------------------------------------------\n\n// GetFileClassType get gop module file classType.\nfunc GetFileClassType(mod *gopmod.Module, file *ast.File, filename string) (classType string, isTest bool) {\n\treturn cl.GetFileClassType(file, filename, mod.LookupClass)\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "make.bash",
          "type": "blob",
          "size": 0.681640625,
          "content": "#! /usr/bin/env bash\n\n#\n# Copyright (c) 2021 The GoPlus Authors (goplus.org). All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nset -ex\n\ngo run cmd/make.go --install --autoproxy\n"
        },
        {
          "name": "make.bat",
          "type": "blob",
          "size": 0.0400390625,
          "content": "go run cmd/make.go --install --autoproxy\n"
        },
        {
          "name": "outline.go",
          "type": "blob",
          "size": 3.5810546875,
          "content": "/*\n * Copyright (c) 2023 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"fmt\"\n\t\"go/token\"\n\t\"io/fs\"\n\t\"os\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"strings\"\n\n\t\"github.com/goplus/gop/cl/outline\"\n\t\"github.com/goplus/gop/parser\"\n\t\"github.com/goplus/gop/x/gopenv\"\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/qiniu/x/errors\"\n)\n\n// -----------------------------------------------------------------------------\n\nfunc Outline(dir string, conf *Config) (out outline.Package, err error) {\n\tif dir, err = filepath.Abs(dir); err != nil {\n\t\treturn\n\t}\n\n\tif conf == nil {\n\t\tconf = new(Config)\n\t}\n\n\tmod := conf.Mod\n\tif mod == nil {\n\t\tif mod, err = LoadMod(dir); err != nil {\n\t\t\terr = errors.NewWith(err, `LoadMod(dir)`, -2, \"gop.LoadMod\", dir)\n\t\t\treturn\n\t\t}\n\t}\n\n\tfilterConf := conf.Filter\n\tfilter := func(fi fs.FileInfo) bool {\n\t\tif filterConf != nil && !filterConf(fi) {\n\t\t\treturn false\n\t\t}\n\t\tfname := fi.Name()\n\t\tif pos := strings.Index(fname, \".\"); pos > 0 {\n\t\t\tfname = fname[:pos]\n\t\t}\n\t\treturn !strings.HasSuffix(fname, \"_test\")\n\t}\n\tfset := conf.Fset\n\tif fset == nil {\n\t\tfset = token.NewFileSet()\n\t}\n\tpkgs, err := parser.ParseDirEx(fset, dir, parser.Config{\n\t\tClassKind: mod.ClassKind,\n\t\tFilter:    filter,\n\t\tMode:      parser.ParseComments,\n\t})\n\tif err != nil {\n\t\treturn\n\t}\n\tif len(pkgs) == 0 {\n\t\terr = ErrNotFound\n\t\treturn\n\t}\n\n\timp := conf.Importer\n\tif imp == nil {\n\t\tgop := conf.Gop\n\t\tif gop == nil {\n\t\t\tgop = gopenv.Get()\n\t\t}\n\t\timp = NewImporter(mod, gop, fset)\n\t}\n\n\tfor name, pkg := range pkgs {\n\t\tif out.Valid() {\n\t\t\terr = fmt.Errorf(\"%w: %s, %s\", ErrMultiPackges, name, out.Pkg().Name())\n\t\t\treturn\n\t\t}\n\t\tif len(pkg.Files)+len(pkg.GoFiles) == 0 { // no Go/Go+ source files\n\t\t\tbreak\n\t\t}\n\t\trelPart, _ := filepath.Rel(mod.Root(), dir)\n\t\tpkgPath := path.Join(mod.Path(), filepath.ToSlash(relPart))\n\t\tout, err = outline.NewPackage(pkgPath, pkg, &outline.Config{\n\t\t\tFset:        fset,\n\t\t\tImporter:    imp,\n\t\t\tLookupClass: mod.LookupClass,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\t}\n\tif !out.Valid() {\n\t\terr = ErrNotFound\n\t}\n\treturn\n}\n\n// -----------------------------------------------------------------------------\n\nfunc OutlinePkgPath(workDir, pkgPath string, conf *Config, allowExtern bool) (out outline.Package, err error) {\n\tmod := conf.Mod\n\tif mod == nil {\n\t\tif mod, err = LoadMod(workDir); err != nil {\n\t\t\terr = errors.NewWith(err, `LoadMod(dir)`, -2, \"gop.LoadMod\", workDir)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif NotFound(err) && allowExtern {\n\t\tremotePkgPathDo(pkgPath, func(pkgDir, modDir string) {\n\t\t\tmodFile := chmodModfile(modDir)\n\t\t\tdefer os.Chmod(modFile, modReadonly)\n\t\t\tout, err = Outline(pkgDir, conf)\n\t\t}, func(e error) {\n\t\t\terr = e\n\t\t})\n\t\treturn\n\t} else if err != nil {\n\t\treturn\n\t}\n\n\tpkg, err := mod.Lookup(pkgPath)\n\tif err != nil {\n\t\treturn\n\t}\n\tif pkg.Type == gopmod.PkgtExtern {\n\t\tmodFile := chmodModfile(pkg.ModDir)\n\t\tdefer os.Chmod(modFile, modReadonly)\n\t}\n\treturn Outline(pkg.Dir, conf)\n}\n\nfunc chmodModfile(modDir string) string {\n\tmodFile := modDir + \"/go.mod\"\n\tos.Chmod(modFile, modWritable)\n\treturn modFile\n}\n\n// -----------------------------------------------------------------------------\n"
        },
        {
          "name": "parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "printer",
          "type": "tree",
          "content": null
        },
        {
          "name": "scanner",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "tidy.go",
          "type": "blob",
          "size": 2.1474609375,
          "content": "/*\n * Copyright (c) 2021 The GoPlus Authors (goplus.org). All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage gop\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n\n\t\"github.com/goplus/mod/env\"\n\t\"github.com/goplus/mod/gopmod\"\n\t\"github.com/qiniu/x/errors\"\n)\n\nfunc Tidy(dir string, gop *env.Gop) (err error) {\n\tmodObj, err := gopmod.Load(dir)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `gopmod.Load(dir, mod.GopModOnly)`, -2, \"gopmod.Load\", dir)\n\t}\n\n\tmodRoot := modObj.Root()\n\t/*\n\t\tdepMods, err := GenDepMods(modObj, modRoot, true)\n\t\tif err != nil {\n\t\t\treturn errors.NewWith(err, `GenDepMods(modObj, modRoot, true)`, -2, \"gop.GenDepMods\", modObj, modRoot, true)\n\t\t}\n\n\t\told := modObj.DepMods()\n\t\tfor modPath := range old {\n\t\t\tif _, ok := depMods[modPath]; !ok { // removed\n\t\t\t\tmodObj.DropRequire(modPath)\n\t\t\t}\n\t\t}\n\t\tfor modPath := range depMods {\n\t\t\tif _, ok := old[modPath]; !ok { // added\n\t\t\t\tif newMod, e := modfetch.Get(modPath); e != nil {\n\t\t\t\t\treturn errors.NewWith(e, `modfetch.Get(modPath)`, -1, \"modfetch.Get\", modPath)\n\t\t\t\t} else {\n\t\t\t\t\tmodObj.AddRequire(newMod.Path, newMod.Version)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmodObj.Cleanup()\n\t\terr = modObj.Save()\n\t\tif err != nil {\n\t\t\treturn errors.NewWith(err, `modObj.Save()`, -2, \"(*gopmod.Module).Save\")\n\t\t}\n\t*/\n\tconf := &Config{Gop: gop}\n\terr = genGoDir(modRoot, conf, true, true, 0)\n\tif err != nil {\n\t\treturn errors.NewWith(err, `genGoDir(modRoot, conf, true, true)`, -2, \"gop.genGoDir\", modRoot, conf, true, true)\n\t}\n\n\tcmd := exec.Command(\"go\", \"mod\", \"tidy\")\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stderr\n\tcmd.Dir = modRoot\n\terr = cmd.Run()\n\tif err != nil {\n\t\terr = errors.NewWith(err, `cmd.Run()`, -2, \"(*exec.Cmd).Run\")\n\t}\n\treturn\n}\n"
        },
        {
          "name": "token",
          "type": "tree",
          "content": null
        },
        {
          "name": "x",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}