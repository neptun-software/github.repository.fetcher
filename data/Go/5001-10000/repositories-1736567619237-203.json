{
  "metadata": {
    "timestamp": 1736567619237,
    "page": 203,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "TwiN/gatus",
      "stars": 6853,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": ".examples\nDockerfile\n.github\n.idea\n.git\nweb/app\n*.db\ntestdata"
        },
        {
          "name": ".examples",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.017578125,
          "content": "* text=auto eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1376953125,
          "content": "# IDE\n*.iml\n.idea\n.vscode\n\n# OS\n.DS_Store\n\n# JS\nnode_modules\n\n# Go\n/vendor\n\n# Misc\n*.db\n*.db-shm\n*.db-wal\ngatus\nconfig/config.yml\nconfig.yaml"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.720703125,
          "content": "# Build the go application into a binary\nFROM golang:alpine as builder\nRUN apk --update add ca-certificates\nWORKDIR /app\nCOPY . ./\nRUN go mod tidy\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o gatus .\n\n# Run Tests inside docker image if you don't have a configured go environment\n#RUN apk update && apk add --virtual build-dependencies build-base gcc\n#RUN go test ./... -mod vendor\n\n# Run the binary on an empty container\nFROM scratch\nCOPY --from=builder /app/gatus .\nCOPY --from=builder /app/config.yaml ./config/config.yaml\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt\nENV GATUS_CONFIG_PATH=\"\"\nENV GATUS_LOG_LEVEL=\"INFO\"\nENV PORT=\"8080\"\nEXPOSE ${PORT}\nENTRYPOINT [\"/gatus\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.5576171875,
          "content": "BINARY=gatus\n\n.PHONY: install\ninstall:\n\tgo build -v -o $(BINARY) .\n\n.PHONY: run\nrun:\n\tGATUS_CONFIG_PATH=./config.yaml ./$(BINARY)\n\n.PHONY: clean\nclean:\n\trm $(BINARY)\n\n.PHONY: test\ntest:\n\tgo test ./... -cover\n\n\n##########\n# Docker #\n##########\n\ndocker-build:\n\tdocker build -t twinproduction/gatus:latest .\n\ndocker-run:\n\tdocker run -p 8080:8080 --name gatus twinproduction/gatus:latest\n\ndocker-build-and-run: docker-build docker-run\n\n\n#############\n# Front end #\n#############\n\nfrontend-build:\n\tnpm --prefix web/app run build\n\nfrontend-run:\n\tnpm --prefix web/app run serve\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 132.8515625,
          "content": "[![Gatus](.github/assets/logo-with-dark-text.png)](https://gatus.io)\n\n![test](https://github.com/TwiN/gatus/workflows/test/badge.svg?branch=master)\n[![Go Report Card](https://goreportcard.com/badge/github.com/TwiN/gatus?)](https://goreportcard.com/report/github.com/TwiN/gatus)\n[![codecov](https://codecov.io/gh/TwiN/gatus/branch/master/graph/badge.svg)](https://codecov.io/gh/TwiN/gatus)\n[![Go version](https://img.shields.io/github/go-mod/go-version/TwiN/gatus.svg)](https://github.com/TwiN/gatus)\n[![Docker pulls](https://img.shields.io/docker/pulls/twinproduction/gatus.svg)](https://cloud.docker.com/repository/docker/twinproduction/gatus)\n[![Follow TwiN](https://img.shields.io/github/followers/TwiN?label=Follow&style=social)](https://github.com/TwiN)\n\nGatus is a developer-oriented health dashboard that gives you the ability to monitor your services using HTTP, ICMP, TCP, and even DNS\nqueries as well as evaluate the result of said queries by using a list of conditions on values like the status code,\nthe response time, the certificate expiration, the body and many others. The icing on top is that each of these health\nchecks can be paired with alerting via Slack, Teams, PagerDuty, Discord, Twilio and many more.\n\nI personally deploy it in my Kubernetes cluster and let it monitor the status of my\ncore applications: https://status.twin.sh/\n\n_Looking for a managed solution? Check out [Gatus.io](https://gatus.io)._\n\n<details>\n  <summary><b>Quick start</b></summary>\n\n```console\ndocker run -p 8080:8080 --name gatus twinproduction/gatus:stable\n```\nYou can also use GitHub Container Registry if you prefer:\n```console\ndocker run -p 8080:8080 --name gatus ghcr.io/twin/gatus:stable\n```\nFor more details, see [Usage](#usage)\n</details>\n\n> ❤ Like this project? Please consider [sponsoring me](https://github.com/sponsors/TwiN).\n\n![Gatus dashboard](.github/assets/dashboard-dark.png)\n\nHave any feedback or questions? [Create a discussion](https://github.com/TwiN/gatus/discussions/new).\n\n\n## Table of Contents\n- [Table of Contents](#table-of-contents)\n- [Why Gatus?](#why-gatus)\n- [Features](#features)\n- [Usage](#usage)\n- [Configuration](#configuration)\n  - [Endpoints](#endpoints)\n  - [External Endpoints](#external-endpoints)\n  - [Conditions](#conditions)\n    - [Placeholders](#placeholders)\n    - [Functions](#functions)\n  - [Storage](#storage)\n  - [Client configuration](#client-configuration)\n  - [Alerting](#alerting)\n    - [Configuring AWS SES alerts](#configuring-aws-ses-alerts)\n    - [Configuring Discord alerts](#configuring-discord-alerts)\n    - [Configuring Email alerts](#configuring-email-alerts)\n    - [Configuring Gitea alerts](#configuring-gitea-alerts)\n    - [Configuring GitHub alerts](#configuring-github-alerts)\n    - [Configuring GitLab alerts](#configuring-gitlab-alerts)\n    - [Configuring Google Chat alerts](#configuring-google-chat-alerts)\n    - [Configuring Gotify alerts](#configuring-gotify-alerts)\n    - [Configuring JetBrains Space alerts](#configuring-jetbrains-space-alerts)\n    - [Configuring Matrix alerts](#configuring-matrix-alerts)\n    - [Configuring Mattermost alerts](#configuring-mattermost-alerts)\n    - [Configuring Messagebird alerts](#configuring-messagebird-alerts)\n    - [Configuring Ntfy alerts](#configuring-ntfy-alerts)\n    - [Configuring Opsgenie alerts](#configuring-opsgenie-alerts)\n    - [Configuring PagerDuty alerts](#configuring-pagerduty-alerts)\n    - [Configuring Pushover alerts](#configuring-pushover-alerts)\n    - [Configuring Slack alerts](#configuring-slack-alerts)\n    - [Configuring Teams alerts *(Deprecated)*](#configuring-teams-alerts-deprecated)\n    - [Configuring Teams Workflow alerts](#configuring-teams-workflow-alerts)\n    - [Configuring Telegram alerts](#configuring-telegram-alerts)\n    - [Configuring Twilio alerts](#configuring-twilio-alerts)\n    - [Configuring Zulip alerts](#configuring-zulip-alerts)\n    - [Configuring custom alerts](#configuring-custom-alerts)\n    - [Setting a default alert](#setting-a-default-alert)\n  - [Maintenance](#maintenance)\n  - [Security](#security)\n    - [Basic Authentication](#basic-authentication)\n    - [OIDC](#oidc)\n  - [TLS Encryption](#tls-encryption)\n  - [Metrics](#metrics)\n  - [Connectivity](#connectivity)\n  - [Remote instances (EXPERIMENTAL)](#remote-instances-experimental)\n- [Deployment](#deployment)\n  - [Docker](#docker)\n  - [Helm Chart](#helm-chart)\n  - [Terraform](#terraform)\n- [Running the tests](#running-the-tests)\n- [Using in Production](#using-in-production)\n- [FAQ](#faq)\n  - [Sending a GraphQL request](#sending-a-graphql-request)\n  - [Recommended interval](#recommended-interval)\n  - [Default timeouts](#default-timeouts)\n  - [Monitoring a TCP endpoint](#monitoring-a-tcp-endpoint)\n  - [Monitoring a UDP endpoint](#monitoring-a-udp-endpoint)\n  - [Monitoring a SCTP endpoint](#monitoring-a-sctp-endpoint)\n  - [Monitoring a WebSocket endpoint](#monitoring-a-websocket-endpoint)\n  - [Monitoring an endpoint using ICMP](#monitoring-an-endpoint-using-icmp)\n  - [Monitoring an endpoint using DNS queries](#monitoring-an-endpoint-using-dns-queries)\n  - [Monitoring an endpoint using SSH](#monitoring-an-endpoint-using-ssh)\n  - [Monitoring an endpoint using STARTTLS](#monitoring-an-endpoint-using-starttls)\n  - [Monitoring an endpoint using TLS](#monitoring-an-endpoint-using-tls)\n  - [Monitoring domain expiration](#monitoring-domain-expiration)\n  - [disable-monitoring-lock](#disable-monitoring-lock)\n  - [Reloading configuration on the fly](#reloading-configuration-on-the-fly)\n  - [Endpoint groups](#endpoint-groups)\n  - [Exposing Gatus on a custom path](#exposing-gatus-on-a-custom-path)\n  - [Exposing Gatus on a custom port](#exposing-gatus-on-a-custom-port)\n  - [Configuring a startup delay](#configuring-a-startup-delay)\n  - [Keeping your configuration small](#keeping-your-configuration-small)\n  - [Proxy client configuration](#proxy-client-configuration)\n  - [How to fix 431 Request Header Fields Too Large error](#how-to-fix-431-request-header-fields-too-large-error)\n  - [Badges](#badges)\n    - [Uptime](#uptime)\n    - [Health](#health)\n    - [Health (Shields.io)](#health-shieldsio)\n    - [Response time](#response-time)\n      - [How to change the color thresholds of the response time badge](#how-to-change-the-color-thresholds-of-the-response-time-badge)\n  - [API](#api)\n    - [Raw Data](#raw-data)\n  - [Installing as binary](#installing-as-binary)\n  - [High level design overview](#high-level-design-overview)\n\n\n## Why Gatus?\nBefore getting into the specifics, I want to address the most common question:\n> Why would I use Gatus when I can just use Prometheus’ Alertmanager, Cloudwatch or even Splunk?\n\nNeither of these can tell you that there’s a problem if there are no clients actively calling the endpoint.\nIn other words, it's because monitoring metrics mostly rely on existing traffic, which effectively means that unless\nyour clients are already experiencing a problem, you won't be notified.\n\nGatus, on the other hand, allows you to configure health checks for each of your features, which in turn allows it to\nmonitor these features and potentially alert you before any clients are impacted.\n\nA sign you may want to look into Gatus is by simply asking yourself whether you'd receive an alert if your load balancer\nwas to go down right now. Will any of your existing alerts be triggered? Your metrics won’t report an increase in errors\nif no traffic makes it to your applications. This puts you in a situation where your clients are the ones\nthat will notify you about the degradation of your services rather than you reassuring them that you're working on\nfixing the issue before they even know about it.\n\n\n## Features\nThe main features of Gatus are:\n\n- **Highly flexible health check conditions**: While checking the response status may be enough for some use cases, Gatus goes much further and allows you to add conditions on the response time, the response body and even the IP address.\n- **Ability to use Gatus for user acceptance tests**: Thanks to the point above, you can leverage this application to create automated user acceptance tests.\n- **Very easy to configure**: Not only is the configuration designed to be as readable as possible, it's also extremely easy to add a new service or a new endpoint to monitor.\n- **Alerting**: While having a pretty visual dashboard is useful to keep track of the state of your application(s), you probably don't want to stare at it all day. Thus, notifications via Slack, Mattermost, Messagebird, PagerDuty, Twilio, Google chat and Teams are supported out of the box with the ability to configure a custom alerting provider for any needs you might have, whether it be a different provider or a custom application that manages automated rollbacks.\n- **Metrics**\n- **Low resource consumption**: As with most Go applications, the resource footprint that this application requires is negligibly small.\n- **[Badges](#badges)**: ![Uptime 7d](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/7d/badge.svg) ![Response time 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/24h/badge.svg)\n- **Dark mode**\n\n![Gatus dashboard conditions](.github/assets/dashboard-conditions.png)\n\n\n## Usage\n\n<details>\n  <summary><b>Quick start</b></summary>\n\n```console\ndocker run -p 8080:8080 --name gatus twinproduction/gatus\n```\nYou can also use GitHub Container Registry if you prefer:\n```console\ndocker run -p 8080:8080 --name gatus ghcr.io/twin/gatus\n```\nIf you want to create your own configuration, see [Docker](#docker) for information on how to mount a configuration file.\n</details>\n\nHere's a simple example:\n```yaml\nendpoints:\n  - name: website                 # Name of your endpoint, can be anything\n    url: \"https://twin.sh/health\"\n    interval: 5m                  # Duration to wait between every status check (default: 60s)\n    conditions:\n      - \"[STATUS] == 200\"         # Status must be 200\n      - \"[BODY].status == UP\"     # The json path \"$.status\" must be equal to UP\n      - \"[RESPONSE_TIME] < 300\"   # Response time must be under 300ms\n\n  - name: make-sure-header-is-rendered\n    url: \"https://example.org/\"\n    interval: 60s\n    conditions:\n      - \"[STATUS] == 200\"                          # Status must be 200\n      - \"[BODY] == pat(*<h1>Example Domain</h1>*)\" # Body must contain the specified header\n```\n\nThis example would look similar to this:\n\n![Simple example](.github/assets/example.png)\n\nBy default, the configuration file is expected to be at `config/config.yaml`.\n\nYou can specify a custom path by setting the `GATUS_CONFIG_PATH` environment variable.\n\nIf `GATUS_CONFIG_PATH` points to a directory, all `*.yaml` and `*.yml` files inside said directory and its\nsubdirectories are merged like so:\n- All maps/objects are deep merged (i.e. you could define `alerting.slack` in one file and `alerting.pagerduty` in another file)\n- All slices/arrays are appended (i.e. you can define `endpoints` in multiple files and each endpoint will be added to the final list of endpoints)\n- Parameters with a primitive value (e.g. `metrics`, `alerting.slack.webhook-url`, etc.) may only be defined once to forcefully avoid any ambiguity\n    - To clarify, this also means that you could not define `alerting.slack.webhook-url` in two files with different values. All files are merged into one before they are processed. This is by design.\n\n> 💡 You can also use environment variables in the configuration file (e.g. `$DOMAIN`, `${DOMAIN}`)\n>\n> See [examples/docker-compose-postgres-storage/config/config.yaml](.examples/docker-compose-postgres-storage/config/config.yaml) for an example.\n\nIf you want to test it locally, see [Docker](#docker).\n\n\n## Configuration\n| Parameter                    | Description                                                                                                                          | Default                    |\n|:-----------------------------|:-------------------------------------------------------------------------------------------------------------------------------------|:---------------------------|\n| `metrics`                    | Whether to expose metrics at `/metrics`.                                                                                             | `false`                    |\n| `storage`                    | [Storage configuration](#storage).                                                                                                   | `{}`                       |\n| `alerting`                   | [Alerting configuration](#alerting).                                                                                                 | `{}`                       |\n| `endpoints`                  | [Endpoints configuration](#endpoints).                                                                                               | Required `[]`              |\n| `external-endpoints`         | [External Endpoints configuration](#external-endpoints).                                                                             | `[]`                       |\n| `security`                   | [Security configuration](#security).                                                                                                 | `{}`                       |\n| `disable-monitoring-lock`    | Whether to [disable the monitoring lock](#disable-monitoring-lock).                                                                  | `false`                    |\n| `skip-invalid-config-update` | Whether to ignore invalid configuration update. <br />See [Reloading configuration on the fly](#reloading-configuration-on-the-fly). | `false`                    |\n| `web`                        | Web configuration.                                                                                                                   | `{}`                       |\n| `web.address`                | Address to listen on.                                                                                                                | `0.0.0.0`                  |\n| `web.port`                   | Port to listen on.                                                                                                                   | `8080`                     |\n| `web.read-buffer-size`       | Buffer size for reading requests from a connection. Also limit for the maximum header size.                                          | `8192`                     |\n| `web.tls.certificate-file`   | Optional public certificate file for TLS in PEM format.                                                                              | ``                         |\n| `web.tls.private-key-file`   | Optional private key file for TLS in PEM format.                                                                                     | ``                         |\n| `ui`                         | UI configuration.                                                                                                                    | `{}`                       |\n| `ui.title`                   | [Title of the document](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title).                                            | `Health Dashboard ǀ Gatus` |\n| `ui.description`             | Meta description for the page.                                                                                                       | `Gatus is an advanced...`. |\n| `ui.header`                  | Header at the top of the dashboard.                                                                                                  | `Health Status`            |\n| `ui.logo`                    | URL to the logo to display.                                                                                                          | `\"\"`                       |\n| `ui.link`                    | Link to open when the logo is clicked.                                                                                               | `\"\"`                       |\n| `ui.buttons`                 | List of buttons to display below the header.                                                                                         | `[]`                       |\n| `ui.buttons[].name`          | Text to display on the button.                                                                                                       | Required `\"\"`              |\n| `ui.buttons[].link`          | Link to open when the button is clicked.                                                                                             | Required `\"\"`              |\n| `ui.custom-css`              | Custom CSS                                                                                                                           | `\"\"`                       |\n| `maintenance`                | [Maintenance configuration](#maintenance).                                                                                           | `{}`                       |\n\nIf you want more verbose logging, you may set the `GATUS_LOG_LEVEL` environment variable to `DEBUG`.\nConversely, if you want less verbose logging, you can set the aforementioned environment variable to `WARN`, `ERROR` or `FATAL`.\nThe default value for `GATUS_LOG_LEVEL` is `INFO`.\n\n### Endpoints\nEndpoints are URLs, applications, or services that you want to monitor. Each endpoint has a list of conditions that are\nevaluated on an interval that you define. If any condition fails, the endpoint is considered as unhealthy.\nYou can then configure alerts to be triggered when an endpoint is unhealthy once a certain threshold is reached.\n\n| Parameter                                       | Description                                                                                                                                 | Default                    |\n|:------------------------------------------------|:--------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------|\n| `endpoints`                                     | List of endpoints to monitor.                                                                                                               | Required `[]`              |\n| `endpoints[].enabled`                           | Whether to monitor the endpoint.                                                                                                            | `true`                     |\n| `endpoints[].name`                              | Name of the endpoint. Can be anything.                                                                                                      | Required `\"\"`              |\n| `endpoints[].group`                             | Group name. Used to group multiple endpoints together on the dashboard. <br />See [Endpoint groups](#endpoint-groups).                      | `\"\"`                       |\n| `endpoints[].url`                               | URL to send the request to.                                                                                                                 | Required `\"\"`              |\n| `endpoints[].method`                            | Request method.                                                                                                                             | `GET`                      |\n| `endpoints[].conditions`                        | Conditions used to determine the health of the endpoint. <br />See [Conditions](#conditions).                                               | `[]`                       |\n| `endpoints[].interval`                          | Duration to wait between every status check.                                                                                                | `60s`                      |\n| `endpoints[].graphql`                           | Whether to wrap the body in a query param (`{\"query\":\"$body\"}`).                                                                            | `false`                    |\n| `endpoints[].body`                              | Request body.                                                                                                                               | `\"\"`                       |\n| `endpoints[].headers`                           | Request headers.                                                                                                                            | `{}`                       |\n| `endpoints[].dns`                               | Configuration for an endpoint of type DNS. <br />See [Monitoring an endpoint using DNS queries](#monitoring-an-endpoint-using-dns-queries). | `\"\"`                       |\n| `endpoints[].dns.query-type`                    | Query type (e.g. MX).                                                                                                                       | `\"\"`                       |\n| `endpoints[].dns.query-name`                    | Query name (e.g. example.com).                                                                                                              | `\"\"`                       |\n| `endpoints[].ssh`                               | Configuration for an endpoint of type SSH. <br />See [Monitoring an endpoint using SSH](#monitoring-an-endpoint-using-ssh).                 | `\"\"`                       |\n| `endpoints[].ssh.username`                      | SSH username (e.g. example).                                                                                                                | Required `\"\"`              |\n| `endpoints[].ssh.password`                      | SSH password (e.g. password).                                                                                                               | Required `\"\"`              |\n| `endpoints[].alerts`                            | List of all alerts for a given endpoint. <br />See [Alerting](#alerting).                                                                   | `[]`                       |\n| `endpoints[].client`                            | [Client configuration](#client-configuration).                                                                                              | `{}`                       |\n| `endpoints[].ui`                                | UI configuration at the endpoint level.                                                                                                     | `{}`                       |\n| `endpoints[].ui.hide-conditions`                | Whether to hide conditions from the results. Note that this only hides conditions from results evaluated from the moment this was enabled.  | `false`                    |\n| `endpoints[].ui.hide-hostname`                  | Whether to hide the hostname in the result.                                                                                                 | `false`                    |\n| `endpoints[].ui.hide-url`                       | Whether to ensure the URL is not displayed in the results. Useful if the URL contains a token.                                              | `false`                    |\n| `endpoints[].ui.dont-resolve-failed-conditions` | Whether to resolve failed conditions for the UI.                                                                                            | `false`                    |\n| `endpoints[].ui.badge.response-time`            | List of response time thresholds. Each time a threshold is reached, the badge has a different color.                                        | `[50, 200, 300, 500, 750]` |\n\n\n### External Endpoints\nUnlike regular endpoints, external endpoints are not monitored by Gatus, but they are instead pushed programmatically.\nThis allows you to monitor anything you want, even when what you want to check lives in an environment that would not normally be accessible by Gatus.\n\nFor instance:\n- You can create your own agent that lives in a private network and pushes the status of your services to a publicly-exposed Gatus instance\n- You can monitor services that are not supported by Gatus\n- You can implement your own monitoring system while using Gatus as the dashboard\n\n| Parameter                      | Description                                                                                                            | Default       |\n|:-------------------------------|:-----------------------------------------------------------------------------------------------------------------------|:--------------|\n| `external-endpoints`           | List of endpoints to monitor.                                                                                          | `[]`          |\n| `external-endpoints[].enabled` | Whether to monitor the endpoint.                                                                                       | `true`        |\n| `external-endpoints[].name`    | Name of the endpoint. Can be anything.                                                                                 | Required `\"\"` |\n| `external-endpoints[].group`   | Group name. Used to group multiple endpoints together on the dashboard. <br />See [Endpoint groups](#endpoint-groups). | `\"\"`          |\n| `external-endpoints[].token`   | Bearer token required to push status to.                                                                               | Required `\"\"` |\n| `external-endpoints[].alerts`  | List of all alerts for a given endpoint. <br />See [Alerting](#alerting).                                              | `[]`          |\n\nExample:\n```yaml\nexternal-endpoints:\n  - name: ext-ep-test\n    group: core\n    token: \"potato\"\n    alerts:\n      - type: discord\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nTo push the status of an external endpoint, the request would have to look like this:\n```\nPOST /api/v1/endpoints/{key}/external?success={success}&error={error}\n```\nWhere:\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n  - Using the example configuration above, the key would be `core_ext-ep-test`.\n- `{success}` is a boolean (`true` or `false`) value indicating whether the health check was successful or not.\n- `{error}`: a string describing the reason for a failed health check. If {success} is false, this should contain the error message; if the check is successful, it can be omitted or left empty.\n\nYou must also pass the token as a `Bearer` token in the `Authorization` header.\n\n\n### Conditions\nHere are some examples of conditions you can use:\n\n| Condition                        | Description                                         | Passing values             | Failing values   |\n|:---------------------------------|:----------------------------------------------------|:---------------------------|------------------|\n| `[STATUS] == 200`                | Status must be equal to 200                         | 200                        | 201, 404, ...    |\n| `[STATUS] < 300`                 | Status must lower than 300                          | 200, 201, 299              | 301, 302, ...    |\n| `[STATUS] <= 299`                | Status must be less than or equal to 299            | 200, 201, 299              | 301, 302, ...    |\n| `[STATUS] > 400`                 | Status must be greater than 400                     | 401, 402, 403, 404         | 400, 200, ...    |\n| `[STATUS] == any(200, 429)`      | Status must be either 200 or 429                    | 200, 429                   | 201, 400, ...    |\n| `[CONNECTED] == true`            | Connection to host must've been successful          | true                       | false            |\n| `[RESPONSE_TIME] < 500`          | Response time must be below 500ms                   | 100ms, 200ms, 300ms        | 500ms, 501ms     |\n| `[IP] == 127.0.0.1`              | Target IP must be 127.0.0.1                         | 127.0.0.1                  | 0.0.0.0          |\n| `[BODY] == 1`                    | The body must be equal to 1                         | 1                          | `{}`, `2`, ...   |\n| `[BODY].user.name == john`       | JSONPath value of `$.user.name` is equal to `john`  | `{\"user\":{\"name\":\"john\"}}` |                  |\n| `[BODY].data[0].id == 1`         | JSONPath value of `$.data[0].id` is equal to 1      | `{\"data\":[{\"id\":1}]}`      |                  |\n| `[BODY].age == [BODY].id`        | JSONPath value of `$.age` is equal JSONPath `$.id`  | `{\"age\":1,\"id\":1}`         |                  |\n| `len([BODY].data) < 5`           | Array at JSONPath `$.data` has less than 5 elements | `{\"data\":[{\"id\":1}]}`      |                  |\n| `len([BODY].name) == 8`          | String at JSONPath `$.name` has a length of 8       | `{\"name\":\"john.doe\"}`      | `{\"name\":\"bob\"}` |\n| `has([BODY].errors) == false`    | JSONPath `$.errors` does not exist                  | `{\"name\":\"john.doe\"}`      | `{\"errors\":[]}`  |\n| `has([BODY].users) == true`      | JSONPath `$.users` exists                           | `{\"users\":[]}`             | `{}`             |\n| `[BODY].name == pat(john*)`      | String at JSONPath `$.name` matches pattern `john*` | `{\"name\":\"john.doe\"}`      | `{\"name\":\"bob\"}` |\n| `[BODY].id == any(1, 2)`         | Value at JSONPath `$.id` is equal to `1` or `2`     | 1, 2                       | 3, 4, 5          |\n| `[CERTIFICATE_EXPIRATION] > 48h` | Certificate expiration is more than 48h away        | 49h, 50h, 123h             | 1h, 24h, ...     |\n| `[DOMAIN_EXPIRATION] > 720h`     | The domain must expire in more than 720h            | 4000h                      | 1h, 24h, ...     |\n\n\n#### Placeholders\n| Placeholder                | Description                                                                               | Example of resolved value                    |\n|:---------------------------|:------------------------------------------------------------------------------------------|:---------------------------------------------|\n| `[STATUS]`                 | Resolves into the HTTP status of the request                                              | `404`                                        |\n| `[RESPONSE_TIME]`          | Resolves into the response time the request took, in ms                                   | `10`                                         |\n| `[IP]`                     | Resolves into the IP of the target host                                                   | `192.168.0.232`                              |\n| `[BODY]`                   | Resolves into the response body. Supports JSONPath.                                       | `{\"name\":\"john.doe\"}`                        |\n| `[CONNECTED]`              | Resolves into whether a connection could be established                                   | `true`                                       |\n| `[CERTIFICATE_EXPIRATION]` | Resolves into the duration before certificate expiration (valid units are \"s\", \"m\", \"h\".) | `24h`, `48h`, 0 (if not protocol with certs) |\n| `[DOMAIN_EXPIRATION]`      | Resolves into the duration before the domain expires (valid units are \"s\", \"m\", \"h\".)     | `24h`, `48h`, `1234h56m78s`                  |\n| `[DNS_RCODE]`              | Resolves into the DNS status of the response                                              | `NOERROR`                                    |\n\n\n#### Functions\n| Function | Description                                                                                                                                                                                                                         | Example                            |\n|:---------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:-----------------------------------|\n| `len`    | If the given path leads to an array, returns its length. Otherwise, the JSON at the given path is minified and converted to a string, and the resulting number of characters is returned. Works only with the `[BODY]` placeholder. | `len([BODY].username) > 8`         |\n| `has`    | Returns `true` or `false` based on whether a given path is valid. Works only with the `[BODY]` placeholder.                                                                                                                         | `has([BODY].errors) == false`      |\n| `pat`    | Specifies that the string passed as parameter should be evaluated as a pattern. Works only with `==` and `!=`.                                                                                                                      | `[IP] == pat(192.168.*)`           |\n| `any`    | Specifies that any one of the values passed as parameters is a valid value. Works only with `==` and `!=`.                                                                                                                          | `[BODY].ip == any(127.0.0.1, ::1)` |\n\n> 💡 Use `pat` only when you need to. `[STATUS] == pat(2*)` is a lot more expensive than `[STATUS] < 300`.\n\n\n### Storage\n| Parameter         | Description                                                                                                                                        | Default    |\n|:------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------|:-----------|\n| `storage`         | Storage configuration                                                                                                                              | `{}`       |\n| `storage.path`    | Path to persist the data in. Only supported for types `sqlite` and `postgres`.                                                                     | `\"\"`       |\n| `storage.type`    | Type of storage. Valid types: `memory`, `sqlite`, `postgres`.                                                                                      | `\"memory\"` |\n| `storage.caching` | Whether to use write-through caching. Improves loading time for large dashboards. <br />Only supported if `storage.type` is `sqlite` or `postgres` | `false`    |\n\nThe results for each endpoint health check as well as the data for uptime and the past events must be persisted\nso that they can be displayed on the dashboard. These parameters allow you to configure the storage in question.\n\n- If `storage.type` is `memory` (default):\n```yaml\n# Note that this is the default value, and you can omit the storage configuration altogether to achieve the same result.\n# Because the data is stored in memory, the data will not survive a restart.\nstorage:\n  type: memory\n```\n- If `storage.type` is `sqlite`, `storage.path` must not be blank:\n```yaml\nstorage:\n  type: sqlite\n  path: data.db\n```\nSee [examples/docker-compose-sqlite-storage](.examples/docker-compose-sqlite-storage) for an example.\n\n- If `storage.type` is `postgres`, `storage.path` must be the connection URL:\n```yaml\nstorage:\n  type: postgres\n  path: \"postgres://user:password@127.0.0.1:5432/gatus?sslmode=disable\"\n```\nSee [examples/docker-compose-postgres-storage](.examples/docker-compose-postgres-storage) for an example.\n\n\n### Client configuration\nIn order to support a wide range of environments, each monitored endpoint has a unique configuration for\nthe client used to send the request.\n\n| Parameter                              | Description                                                                 | Default         |\n|:---------------------------------------|:----------------------------------------------------------------------------|:----------------|\n| `client.insecure`                      | Whether to skip verifying the server's certificate chain and host name.     | `false`         |\n| `client.ignore-redirect`               | Whether to ignore redirects (true) or follow them (false, default).         | `false`         |\n| `client.timeout`                       | Duration before timing out.                                                 | `10s`           |\n| `client.dns-resolver`                  | Override the DNS resolver using the format `{proto}://{host}:{port}`.       | `\"\"`            |\n| `client.oauth2`                        | OAuth2 client configuration.                                                | `{}`            |\n| `client.oauth2.token-url`              | The token endpoint URL                                                      | required `\"\"`   |\n| `client.oauth2.client-id`              | The client id which should be used for the `Client credentials flow`        | required `\"\"`   |\n| `client.oauth2.client-secret`          | The client secret which should be used for the `Client credentials flow`    | required `\"\"`   |\n| `client.oauth2.scopes[]`               | A list of `scopes` which should be used for the `Client credentials flow`.  | required `[\"\"]` |\n| `client.proxy-url`                     | The URL of the proxy to use for the client                                  | `\"\"`            |\n| `client.identity-aware-proxy`          | Google Identity-Aware-Proxy client configuration.                           | `{}`            |\n| `client.identity-aware-proxy.audience` | The Identity-Aware-Proxy audience. (client-id of the IAP oauth2 credential) | required `\"\"`   |\n| `client.tls.certificate-file`          | Path to a client certificate (in PEM format) for mTLS configurations.       | `\"\"`            |\n| `client.tls.private-key-file`          | Path to a client private key (in PEM format) for mTLS configurations.       | `\"\"`            |\n| `client.tls.renegotiation`             | Type of renegotiation support to provide. (`never`, `freely`, `once`).      | `\"never\"`       |\n| `client.network`                       | The network to use for ICMP endpoint client (`ip`, `ip4` or `ip6`).         | `\"ip\"`          |\n\n\n> 📝 Some of these parameters are ignored based on the type of endpoint. For instance, there's no certificate involved\n> in ICMP requests (ping), therefore, setting `client.insecure` to `true` for an endpoint of that type will not do anything.\n\nThis default configuration is as follows:\n\n```yaml\nclient:\n  insecure: false\n  ignore-redirect: false\n  timeout: 10s\n```\n\nNote that this configuration is only available under `endpoints[]`, `alerting.mattermost` and `alerting.custom`.\n\nHere's an example with the client configuration under `endpoints[]`:\n\n```yaml\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    client:\n      insecure: false\n      ignore-redirect: false\n      timeout: 10s\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\nThis example shows how you can specify a custom DNS resolver:\n\n```yaml\nendpoints:\n  - name: with-custom-dns-resolver\n    url: \"https://your.health.api/health\"\n    client:\n      dns-resolver: \"tcp://8.8.8.8:53\"\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\nThis example shows how you can use the `client.oauth2` configuration to query a backend API with `Bearer token`:\n\n```yaml\nendpoints:\n  - name: with-custom-oauth2\n    url: \"https://your.health.api/health\"\n    client:\n      oauth2:\n        token-url: https://your-token-server/token\n        client-id: 00000000-0000-0000-0000-000000000000\n        client-secret: your-client-secret\n        scopes: ['https://your.health.api/.default']\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\nThis example shows how you can use the `client.identity-aware-proxy` configuration to query a backend API with `Bearer token` using Google Identity-Aware-Proxy:\n\n```yaml\nendpoints:\n  - name: with-custom-iap\n    url: \"https://my.iap.protected.app/health\"\n    client:\n      identity-aware-proxy:\n        audience: \"XXXXXXXX-XXXXXXXXXXXX.apps.googleusercontent.com\"\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\n> 📝 Note that Gatus will use the [gcloud default credentials](https://cloud.google.com/docs/authentication/application-default-credentials) within its environment to generate the token.\n\nThis example shows you how you can use the `client.tls` configuration to perform an mTLS query to a backend API:\n\n```yaml\nendpoints:\n  - name: website\n    url: \"https://your.mtls.protected.app/health\"\n    client:\n      tls:\n        certificate-file: /path/to/user_cert.pem\n        private-key-file: /path/to/user_key.pem\n        renegotiation: once\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\n> 📝 Note that if running in a container, you must volume mount the certificate and key into the container.\n\n### Alerting\nGatus supports multiple alerting providers, such as Slack and PagerDuty, and supports different alerts for each\nindividual endpoints with configurable descriptions and thresholds.\n\nAlerts are configured at the endpoint level like so:\n\n| Parameter                    | Description                                                                    | Default       |\n|:-----------------------------|:-------------------------------------------------------------------------------|:--------------|\n| `alerts`                     | List of all alerts for a given endpoint.                                       | `[]`          |\n| `alerts[].type`              | Type of alert. <br />See table below for all valid types.                      | Required `\"\"` |\n| `alerts[].enabled`           | Whether to enable the alert.                                                   | `true`        |\n| `alerts[].failure-threshold` | Number of failures in a row needed before triggering the alert.                | `3`           |\n| `alerts[].success-threshold` | Number of successes in a row before an ongoing incident is marked as resolved. | `2`           |\n| `alerts[].send-on-resolved`  | Whether to send a notification once a triggered alert is marked as resolved.   | `false`       |\n| `alerts[].description`       | Description of the alert. Will be included in the alert sent.                  | `\"\"`          |\n| `alerts[].provider-override` | Alerting provider configuration override for the given alert type              | `{}`          |\n\nHere's an example of what an alert configuration might look like at the endpoint level:\n```yaml\nendpoints:\n  - name: example\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nYou can also override global provider configuration by using `alerts[].provider-override`, like so:\n```yaml\nendpoints:\n  - name: example\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n        provider-override:\n          webhook-url: \"https://hooks.slack.com/services/**********/**********/**********\"\n```\n\n> 📝 If an alerting provider is not properly configured, all alerts configured with the provider's type will be\n> ignored.\n\n| Parameter                  | Description                                                                                                                             | Default |\n|:---------------------------|:----------------------------------------------------------------------------------------------------------------------------------------|:--------|\n| `alerting.awsses`          | Configuration for alerts of type `awsses`. <br />See [Configuring AWS SES alerts](#configuring-aws-ses-alerts).                         | `{}`    |\n| `alerting.custom`          | Configuration for custom actions on failure or alerts. <br />See [Configuring Custom alerts](#configuring-custom-alerts).               | `{}`    |\n| `alerting.discord`         | Configuration for alerts of type `discord`. <br />See [Configuring Discord alerts](#configuring-discord-alerts).                        | `{}`    |\n| `alerting.email`           | Configuration for alerts of type `email`. <br />See [Configuring Email alerts](#configuring-email-alerts).                              | `{}`    |\n| `alerting.gitea`           | Configuration for alerts of type `gitea`. <br />See [Configuring Gitea alerts](#configuring-gitea-alerts).                              | `{}`    |\n| `alerting.github`          | Configuration for alerts of type `github`. <br />See [Configuring GitHub alerts](#configuring-github-alerts).                           | `{}`    |\n| `alerting.gitlab`          | Configuration for alerts of type `gitlab`. <br />See [Configuring GitLab alerts](#configuring-gitlab-alerts).                           | `{}`    |\n| `alerting.googlechat`      | Configuration for alerts of type `googlechat`. <br />See [Configuring Google Chat alerts](#configuring-google-chat-alerts).             | `{}`    |\n| `alerting.gotify`          | Configuration for alerts of type `gotify`. <br />See [Configuring Gotify alerts](#configuring-gotify-alerts).                           | `{}`    |\n| `alerting.jetbrainsspace`  | Configuration for alerts of type `jetbrainsspace`. <br />See [Configuring JetBrains Space alerts](#configuring-jetbrains-space-alerts). | `{}`    |\n| `alerting.matrix`          | Configuration for alerts of type `matrix`. <br />See [Configuring Matrix alerts](#configuring-matrix-alerts).                           | `{}`    |\n| `alerting.mattermost`      | Configuration for alerts of type `mattermost`. <br />See [Configuring Mattermost alerts](#configuring-mattermost-alerts).               | `{}`    |\n| `alerting.messagebird`     | Configuration for alerts of type `messagebird`. <br />See [Configuring Messagebird alerts](#configuring-messagebird-alerts).            | `{}`    |\n| `alerting.ntfy`            | Configuration for alerts of type `ntfy`. <br />See [Configuring Ntfy alerts](#configuring-ntfy-alerts).                                 | `{}`    |\n| `alerting.opsgenie`        | Configuration for alerts of type `opsgenie`. <br />See [Configuring Opsgenie alerts](#configuring-opsgenie-alerts).                     | `{}`    |\n| `alerting.pagerduty`       | Configuration for alerts of type `pagerduty`. <br />See [Configuring PagerDuty alerts](#configuring-pagerduty-alerts).                  | `{}`    |\n| `alerting.pushover`        | Configuration for alerts of type `pushover`. <br />See [Configuring Pushover alerts](#configuring-pushover-alerts).                     | `{}`    |\n| `alerting.slack`           | Configuration for alerts of type `slack`. <br />See [Configuring Slack alerts](#configuring-slack-alerts).                              | `{}`    |\n| `alerting.teams`           | Configuration for alerts of type `teams`. *(Deprecated)* <br />See [Configuring Teams alerts](#configuring-teams-alerts-deprecated).    | `{}`    |\n| `alerting.teams-workflows` | Configuration for alerts of type `teams-workflows`. <br />See [Configuring Teams Workflow alerts](#configuring-teams-workflow-alerts).  | `{}`    |\n| `alerting.telegram`        | Configuration for alerts of type `telegram`. <br />See [Configuring Telegram alerts](#configuring-telegram-alerts).                     | `{}`    |\n| `alerting.twilio`          | Settings for alerts of type `twilio`. <br />See [Configuring Twilio alerts](#configuring-twilio-alerts).                                | `{}`    |\n| `alerting.zulip`           | Configuration for alerts of type `zulip`. <br />See [Configuring Zulip alerts](#configuring-zulip-alerts).                              | `{}`    |\n\n\n#### Configuring AWS SES alerts\n| Parameter                            | Description                                                                                | Default       |\n|:-------------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.aws-ses`                   | Settings for alerts of type `aws-ses`                                                      | `{}`          |\n| `alerting.aws-ses.access-key-id`     | AWS Access Key ID                                                                          | Optional `\"\"` |\n| `alerting.aws-ses.secret-access-key` | AWS Secret Access Key                                                                      | Optional `\"\"` |\n| `alerting.aws-ses.region`            | AWS Region                                                                                 | Required `\"\"` |\n| `alerting.aws-ses.from`              | The Email address to send the emails from (should be registered in SES)                    | Required `\"\"` |\n| `alerting.aws-ses.to`                | Comma separated list of email address to notify                                            | Required `\"\"` |\n| `alerting.aws-ses.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n\n```yaml\nalerting:\n  aws-ses:\n    access-key-id: \"...\"\n    secret-access-key: \"...\"\n    region: \"us-east-1\"\n    from: \"status@example.com\"\n    to: \"user@example.com\"\n\nendpoints:\n  - name: website\n    interval: 30s\n    url: \"https://twin.sh/health\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: aws-ses\n        failure-threshold: 5\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\n#### Configuring Discord alerts\n| Parameter                            | Description                                                                                | Default                             |\n|:-------------------------------------|:-------------------------------------------------------------------------------------------|:------------------------------------|\n| `alerting.discord`                   | Configuration for alerts of type `discord`                                                 | `{}`                                |\n| `alerting.discord.webhook-url`       | Discord Webhook URL                                                                        | Required `\"\"`                       |\n| `alerting.discord.title`             | Title of the notification                                                                  | `\":helmet_with_white_cross: Gatus\"` |\n| `alerting.discord.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                                 |\n| `alerting.discord.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`                                |\n| `alerting.discord.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`                                |\n| `alerting.discord.overrides[].*`     | See `alerting.discord.*` parameters                                                        | `{}`                                |\n\n```yaml\nalerting:\n  discord:\n    webhook-url: \"https://discord.com/api/webhooks/**********/**********\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: discord\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\n\n#### Configuring Email alerts\n| Parameter                          | Description                                                                                   | Default       |\n|:-----------------------------------|:----------------------------------------------------------------------------------------------|:--------------|\n| `alerting.email`                   | Configuration for alerts of type `email`                                                      | `{}`          |\n| `alerting.email.from`              | Email used to send the alert                                                                  | Required `\"\"` |\n| `alerting.email.username`          | Username of the SMTP server used to send the alert. If empty, uses `alerting.email.from`.     | `\"\"`          |\n| `alerting.email.password`          | Password of the SMTP server used to send the alert. If empty, no authentication is performed. | `\"\"`          |\n| `alerting.email.host`              | Host of the mail server (e.g. `smtp.gmail.com`)                                               | Required `\"\"` |\n| `alerting.email.port`              | Port the mail server is listening to (e.g. `587`)                                             | Required `0`  |\n| `alerting.email.to`                | Email(s) to send the alerts to                                                                | Required `\"\"` |\n| `alerting.email.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert)    | N/A           |\n| `alerting.email.client.insecure`   | Whether to skip TLS verification                                                              | `false`       |\n| `alerting.email.overrides`         | List of overrides that may be prioritized over the default configuration                      | `[]`          |\n| `alerting.email.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration           | `\"\"`          |\n| `alerting.email.overrides[].*`     | See `alerting.email.*` parameters                                                             | `{}`          |\n\n```yaml\nalerting:\n  email:\n    from: \"from@example.com\"\n    username: \"from@example.com\"\n    password: \"hunter2\"\n    host: \"mail.example.com\"\n    port: 587\n    to: \"recipient1@example.com,recipient2@example.com\"\n    client:\n      insecure: false\n    # You can also add group-specific to keys, which will\n    # override the to key above for the specified groups\n    overrides:\n      - group: \"core\"\n        to: \"recipient3@example.com,recipient4@example.com\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: email\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n\n  - name: back-end\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n    alerts:\n      - type: email\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\n> ⚠ Some mail servers are painfully slow.\n\n#### Configuring Gitea alerts\n\n| Parameter                       | Description                                                                                                | Default       |\n|:--------------------------------|:-----------------------------------------------------------------------------------------------------------|:--------------|\n| `alerting.gitea`                | Configuration for alerts of type `gitea`                                                                   | `{}`          |\n| `alerting.gitea.repository-url` | Gitea repository URL (e.g. `https://gitea.com/TwiN/example`)                                               | Required `\"\"` |\n| `alerting.gitea.token`          | Personal access token to use for authentication. <br />Must have at least RW on issues and RO on metadata. | Required `\"\"` |\n| `alerting.github.default-alert` | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert).                | N/A           |\n\nThe Gitea alerting provider creates an issue prefixed with `alert(gatus):` and suffixed with the endpoint's display\nname for each alert. If `send-on-resolved` is set to `true` on the endpoint alert, the issue will be automatically\nclosed when the alert is resolved.\n\n```yaml\nalerting:\n  gitea:\n    repository-url: \"https://gitea.com/TwiN/test\"\n    token: \"349d63f16......\"\n\nendpoints:\n  - name: example\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 75\"\n    alerts:\n      - type: gitea\n        failure-threshold: 2\n        success-threshold: 3\n        send-on-resolved: true\n        description: \"Everything's burning AAAAAHHHHHHHHHHHHHHH\"\n```\n\n![Gitea alert](.github/assets/gitea-alerts.png)\n\n#### Configuring GitHub alerts\n\n| Parameter                        | Description                                                                                                | Default       |\n|:---------------------------------|:-----------------------------------------------------------------------------------------------------------|:--------------|\n| `alerting.github`                | Configuration for alerts of type `github`                                                                  | `{}`          |\n| `alerting.github.repository-url` | GitHub repository URL (e.g. `https://github.com/TwiN/example`)                                             | Required `\"\"` |\n| `alerting.github.token`          | Personal access token to use for authentication. <br />Must have at least RW on issues and RO on metadata. | Required `\"\"` |\n| `alerting.github.default-alert`  | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert).                | N/A           |\n\nThe GitHub alerting provider creates an issue prefixed with `alert(gatus):` and suffixed with the endpoint's display\nname for each alert. If `send-on-resolved` is set to `true` on the endpoint alert, the issue will be automatically\nclosed when the alert is resolved.\n\n```yaml\nalerting:\n  github:\n    repository-url: \"https://github.com/TwiN/test\"\n    token: \"github_pat_12345...\"\n\nendpoints:\n  - name: example\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 75\"\n    alerts:\n      - type: github\n        failure-threshold: 2\n        success-threshold: 3\n        send-on-resolved: true\n        description: \"Everything's burning AAAAAHHHHHHHHHHHHHHH\"\n```\n\n![GitHub alert](.github/assets/github-alerts.png)\n\n#### Configuring GitLab alerts\n| Parameter                           | Description                                                                                                         | Default       |\n|:------------------------------------|:--------------------------------------------------------------------------------------------------------------------|:--------------|\n| `alerting.gitlab`                   | Configuration for alerts of type `gitlab`                                                                           | `{}`          |\n| `alerting.gitlab.webhook-url`       | GitLab alert webhook URL (e.g. `https://gitlab.com/yourusername/example/alerts/notify/gatus/xxxxxxxxxxxxxxxx.json`) | Required `\"\"` |\n| `alerting.gitlab.authorization-key` | GitLab alert authorization key.                                                                                     | Required `\"\"` |\n| `alerting.gitlab.severity`          | Override default severity (critical), can be one of `critical, high, medium, low, info, unknown`                    | `\"\"`          |\n| `alerting.gitlab.monitoring-tool`   | Override the monitoring tool name (gatus)                                                                           | `\"gatus\"`     |\n| `alerting.gitlab.environment-name`  | Set gitlab environment's name. Required to display alerts on a dashboard.                                           | `\"\"`          |\n| `alerting.gitlab.service`           | Override endpoint display name                                                                                      | `\"\"`          |\n| `alerting.gitlab.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert).                         | N/A           |\n\nThe GitLab alerting provider creates an alert prefixed with `alert(gatus):` and suffixed with the endpoint's display\nname for each alert. If `send-on-resolved` is set to `true` on the endpoint alert, the alert will be automatically\nclosed when the alert is resolved. See\nhttps://docs.gitlab.com/ee/operations/incident_management/integrations.html#configuration to configure the endpoint.\n\n```yaml\nalerting:\n  gitlab:\n    webhook-url: \"https://gitlab.com/hlidotbe/example/alerts/notify/gatus/xxxxxxxxxxxxxxxx.json\"\n    authorization-key: \"12345\"\n\nendpoints:\n  - name: example\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 75\"\n    alerts:\n      - type: gitlab\n        failure-threshold: 2\n        success-threshold: 3\n        send-on-resolved: true\n        description: \"Everything's burning AAAAAHHHHHHHHHHHHHHH\"\n```\n\n![GitLab alert](.github/assets/gitlab-alerts.png)\n\n\n#### Configuring Google Chat alerts\n| Parameter                               | Description                                                                                 | Default       |\n|:----------------------------------------|:--------------------------------------------------------------------------------------------|:--------------|\n| `alerting.googlechat`                   | Configuration for alerts of type `googlechat`                                               | `{}`          |\n| `alerting.googlechat.webhook-url`       | Google Chat Webhook URL                                                                     | Required `\"\"` |\n| `alerting.googlechat.client`            | Client configuration. <br />See [Client configuration](#client-configuration).              | `{}`          |\n| `alerting.googlechat.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert). | N/A           |\n| `alerting.googlechat.overrides`         | List of overrides that may be prioritized over the default configuration                    | `[]`          |\n| `alerting.googlechat.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration         | `\"\"`          |\n| `alerting.googlechat.overrides[].*`     | See `alerting.googlechat.*` parameters                                                      | `{}`          |\n\n```yaml\nalerting:\n  googlechat:\n    webhook-url: \"https://chat.googleapis.com/v1/spaces/*******/messages?key=**********&token=********\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: googlechat\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\n\n#### Configuring Gotify alerts\n| Parameter                                     | Description                                                                                 | Default               |\n|:----------------------------------------------|:--------------------------------------------------------------------------------------------|:----------------------|\n| `alerting.gotify`                             | Configuration for alerts of type `gotify`                                                   | `{}`                  |\n| `alerting.gotify.server-url`                  | Gotify server URL                                                                           | Required `\"\"`         |\n| `alerting.gotify.token`                       | Token that is used for authentication.                                                      | Required `\"\"`         |\n| `alerting.gotify.priority`                    | Priority of the alert according to Gotify standards.                                        | `5`                   |\n| `alerting.gotify.title`                       | Title of the notification                                                                   | `\"Gatus: <endpoint>\"` |\n| `alerting.gotify.default-alert`               | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert). | N/A                   |\n\n```yaml\nalerting:\n  gotify:\n    server-url: \"https://gotify.example\"\n    token: \"**************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: gotify\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Gotify notifications](.github/assets/gotify-alerts.png)\n\n\n#### Configuring JetBrains Space alerts\n| Parameter                                   | Description                                                                                | Default       |\n|:--------------------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.jetbrainsspace`                   | Configuration for alerts of type `jetbrainsspace`                                          | `{}`          |\n| `alerting.jetbrainsspace.project`           | JetBrains Space project name                                                               | Required `\"\"` |\n| `alerting.jetbrainsspace.channel-id`        | JetBrains Space Chat Channel ID                                                            | Required `\"\"` |\n| `alerting.jetbrainsspace.token`             | Token that is used for authentication.                                                     | Required `\"\"` |\n| `alerting.jetbrainsspace.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n| `alerting.jetbrainsspace.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`          |\n| `alerting.jetbrainsspace.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`          |\n| `alerting.jetbrainsspace.overrides[].*`     | See `alerting.jetbrainsspace.*` parameters                                                 | `{}`          |\n\n```yaml\nalerting:\n  jetbrainsspace:\n    project: myproject\n    channel-id: ABCDE12345\n    token: \"**************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: jetbrainsspace\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![JetBrains Space notifications](.github/assets/jetbrains-space-alerts.png)\n\n\n#### Configuring Matrix alerts\n| Parameter                                | Description                                                                                | Default                            |\n|:-----------------------------------------|:-------------------------------------------------------------------------------------------|:-----------------------------------|\n| `alerting.matrix`                        | Configuration for alerts of type `matrix`                                                  | `{}`                               |\n| `alerting.matrix.server-url`             | Homeserver URL                                                                             | `https://matrix-client.matrix.org` |\n| `alerting.matrix.access-token`           | Bot user access token (see https://webapps.stackexchange.com/q/131056)                     | Required `\"\"`                      |\n| `alerting.matrix.internal-room-id`       | Internal room ID of room to send alerts to (can be found in Room Settings > Advanced)      | Required `\"\"`                      |\n| `alerting.matrix.default-alert`          | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                                |\n\n```yaml\nalerting:\n  matrix:\n    server-url: \"https://matrix-client.matrix.org\"\n    access-token: \"123456\"\n    internal-room-id: \"!example:matrix.org\"\n\nendpoints:\n  - name: website\n    interval: 5m\n    url: \"https://twin.sh/health\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: matrix\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\n#### Configuring Mattermost alerts\n| Parameter                                     | Description                                                                                 | Default       |\n|:----------------------------------------------|:--------------------------------------------------------------------------------------------|:--------------|\n| `alerting.mattermost`                         | Configuration for alerts of type `mattermost`                                               | `{}`          |\n| `alerting.mattermost.webhook-url`             | Mattermost Webhook URL                                                                      | Required `\"\"` |\n| `alerting.mattermost.channel`                 | Mattermost channel name override (optional)                                                 | `\"\"`          |\n| `alerting.mattermost.client`                  | Client configuration. <br />See [Client configuration](#client-configuration).              | `{}`          |\n| `alerting.mattermost.default-alert`           | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert). | N/A           |\n| `alerting.mattermost.overrides`               | List of overrides that may be prioritized over the default configuration                    | `[]`          |\n| `alerting.mattermost.overrides[].group`       | Endpoint group for which the configuration will be overridden by this configuration         | `\"\"`          |\n| `alerting.mattermost.overrides[].*`           | See `alerting.mattermost.*` parameters                                                      | `{}`          |\n\n```yaml\nalerting:\n  mattermost:\n    webhook-url: \"http://**********/hooks/**********\"\n    client:\n      insecure: true\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: mattermost\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Mattermost notifications](.github/assets/mattermost-alerts.png)\n\n\n#### Configuring Messagebird alerts\n| Parameter                            | Description                                                                                | Default       |\n|:-------------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.messagebird`               | Configuration for alerts of type `messagebird`                                             | `{}`          |\n| `alerting.messagebird.access-key`    | Messagebird access key                                                                     | Required `\"\"` |\n| `alerting.messagebird.originator`    | The sender of the message                                                                  | Required `\"\"` |\n| `alerting.messagebird.recipients`    | The recipients of the message                                                              | Required `\"\"` |\n| `alerting.messagebird.default-alert` | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n\nExample of sending **SMS** text message alert using Messagebird:\n```yaml\nalerting:\n  messagebird:\n    access-key: \"...\"\n    originator: \"31619191918\"\n    recipients: \"31619191919,31619191920\"\n\nendpoints:\n  - name: website\n    interval: 5m\n    url: \"https://twin.sh/health\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: messagebird\n        failure-threshold: 3\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\n#### Configuring Ntfy alerts\n| Parameter                            | Description                                                                                                                                  | Default           |\n|:-------------------------------------|:---------------------------------------------------------------------------------------------------------------------------------------------|:------------------|\n| `alerting.ntfy`                      | Configuration for alerts of type `ntfy`                                                                                                      | `{}`              |\n| `alerting.ntfy.topic`                | Topic at which the alert will be sent                                                                                                        | Required `\"\"`     |\n| `alerting.ntfy.url`                  | The URL of the target server                                                                                                                 | `https://ntfy.sh` |\n| `alerting.ntfy.token`                | [Access token](https://docs.ntfy.sh/publish/#access-tokens) for restricted topics                                                            | `\"\"`              |\n| `alerting.ntfy.email`                | E-mail address for additional e-mail notifications                                                                                           | `\"\"`              |\n| `alerting.ntfy.click`                | Website opened when notification is clicked                                                                                                  | `\"\"`              |\n| `alerting.ntfy.priority`             | The priority of the alert                                                                                                                    | `3`               |\n| `alerting.ntfy.disable-firebase`     | Whether message push delivery via firebase should be disabled. [ntfy.sh defaults to enabled](https://docs.ntfy.sh/publish/#disable-firebase) | `false`           |\n| `alerting.ntfy.disable-cache`        | Whether server side message caching should be disabled. [ntfy.sh defaults to enabled](https://docs.ntfy.sh/publish/#message-caching)         | `false`           |\n| `alerting.ntfy.default-alert`        | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert)                                                   | N/A               |\n| `alerting.ntfy.overrides`            | List of overrides that may be prioritized over the default configuration                                                                     | `[]`              |\n| `alerting.ntfy.overrides[].group`    | Endpoint group for which the configuration will be overridden by this configuration                                                          | `\"\"`              |\n| `alerting.ntfy.overrides[].*`        | See `alerting.ntfy.*` parameters                                                                                                             | `{}`              |\n\n[ntfy](https://github.com/binwiederhier/ntfy) is an amazing project that allows you to subscribe to desktop\nand mobile notifications, making it an awesome addition to Gatus.\n\nExample:\n```yaml\nalerting:\n  ntfy:\n    topic: \"gatus-test-topic\"\n    priority: 2\n    token: faketoken\n    default-alert:\n      failure-threshold: 3\n      send-on-resolved: true\n    # You can also add group-specific to keys, which will\n    # override the to key above for the specified groups\n    overrides:\n      - group: \"other\"\n        topic: \"gatus-other-test-topic\"\n        priority: 4\n        click: \"https://example.com\"\n\nendpoints:\n  - name: website\n    interval: 5m\n    url: \"https://twin.sh/health\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: ntfy\n  - name: other example\n    group: other\n    interval: 30m\n    url: \"https://example.com\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n    alerts:\n      - type: ntfy\n        description: example\n```\n\n\n#### Configuring Opsgenie alerts\n| Parameter                         | Description                                                                                | Default              |\n|:----------------------------------|:-------------------------------------------------------------------------------------------|:---------------------|\n| `alerting.opsgenie`               | Configuration for alerts of type `opsgenie`                                                | `{}`                 |\n| `alerting.opsgenie.api-key`       | Opsgenie API Key                                                                           | Required `\"\"`        |\n| `alerting.opsgenie.priority`      | Priority level of the alert.                                                               | `P1`                 |\n| `alerting.opsgenie.source`        | Source field of the alert.                                                                 | `gatus`              |\n| `alerting.opsgenie.entity-prefix` | Entity field prefix.                                                                       | `gatus-`             |\n| `alerting.opsgenie.alias-prefix`  | Alias field prefix.                                                                        | `gatus-healthcheck-` |\n| `alerting.opsgenie.tags`          | Tags of alert.                                                                             | `[]`                 |\n| `alerting.opsgenie.default-alert` | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                  |\n\nOpsgenie provider will automatically open and close alerts.\n\n```yaml\nalerting:\n  opsgenie:\n    api-key: \"00000000-0000-0000-0000-000000000000\"\n```\n\n\n#### Configuring PagerDuty alerts\n| Parameter                              | Description                                                                                | Default |\n|:---------------------------------------|:-------------------------------------------------------------------------------------------|:--------|\n| `alerting.pagerduty`                   | Configuration for alerts of type `pagerduty`                                               | `{}`    |\n| `alerting.pagerduty.integration-key`   | PagerDuty Events API v2 integration key                                                    | `\"\"`    |\n| `alerting.pagerduty.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A     |\n| `alerting.pagerduty.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`    |\n| `alerting.pagerduty.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`    |\n| `alerting.pagerduty.overrides[].*`     | See `alerting.pagerduty.*` parameters                                                      | `{}`    |\n\nIt is highly recommended to set `endpoints[].alerts[].send-on-resolved` to `true` for alerts\nof type `pagerduty`, because unlike other alerts, the operation resulting from setting said\nparameter to `true` will not create another incident but mark the incident as resolved on\nPagerDuty instead.\n\nBehavior:\n- By default, `alerting.pagerduty.integration-key` is used as the integration key\n- If the endpoint being evaluated belongs to a group (`endpoints[].group`) matching the value of `alerting.pagerduty.overrides[].group`, the provider will use that override's integration key instead of `alerting.pagerduty.integration-key`'s\n\n```yaml\nalerting:\n  pagerduty:\n    integration-key: \"********************************\"\n    # You can also add group-specific integration keys, which will\n    # override the integration key above for the specified groups\n    overrides:\n      - group: \"core\"\n        integration-key: \"********************************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: pagerduty\n        failure-threshold: 3\n        success-threshold: 5\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n\n  - name: back-end\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n    alerts:\n      - type: pagerduty\n        failure-threshold: 3\n        success-threshold: 5\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\n#### Configuring Pushover alerts\n| Parameter                             | Description                                                                                     | Default                      |\n|:--------------------------------------|:------------------------------------------------------------------------------------------------|:-----------------------------|\n| `alerting.pushover`                   | Configuration for alerts of type `pushover`                                                     | `{}`                         |\n| `alerting.pushover.application-token` | Pushover application token                                                                      | `\"\"`                         |\n| `alerting.pushover.user-key`          | User or group key                                                                               | `\"\"`                         |\n| `alerting.pushover.title`             | Fixed title for all messages sent via Pushover                                                  | `\"Gatus: <endpoint>\"` |\n| `alerting.pushover.priority`          | Priority of all messages, ranging from -2 (very low) to 2 (emergency)                           | `0`                          |\n| `alerting.pushover.resolved-priority` | Override the priority of messages on resolved, ranging from -2 (very low) to 2 (emergency)      | `0`                          |\n| `alerting.pushover.sound`             | Sound of all messages<br />See [sounds](https://pushover.net/api#sounds) for all valid choices. | `\"\"`                         |\n| `alerting.pushover.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert)      | N/A                          |\n\n```yaml\nalerting:\n  pushover:\n    application-token: \"******************************\"\n    user-key: \"******************************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: pushover\n        failure-threshold: 3\n        success-threshold: 5\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\n#### Configuring Slack alerts\n| Parameter                          | Description                                                                                | Default       |\n|:-----------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.slack`                   | Configuration for alerts of type `slack`                                                   | `{}`          |\n| `alerting.slack.webhook-url`       | Slack Webhook URL                                                                          | Required `\"\"` |\n| `alerting.slack.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n| `alerting.slack.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`          |\n| `alerting.slack.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`          |\n| `alerting.slack.overrides[].*`     | See `alerting.slack.*` parameters                                                          | `{}`          |\n\n```yaml\nalerting:\n  slack:\n    webhook-url: \"https://hooks.slack.com/services/**********/**********/**********\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: slack\n        description: \"healthcheck failed 3 times in a row\"\n        send-on-resolved: true\n      - type: slack\n        failure-threshold: 5\n        description: \"healthcheck failed 5 times in a row\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Slack notifications](.github/assets/slack-alerts.png)\n\n\n#### Configuring Teams alerts *(Deprecated)*\n\n> [!CAUTION]\n> **Deprecated:** Office 365 Connectors within Microsoft Teams are being retired ([Source: Microsoft DevBlog](https://devblogs.microsoft.com/microsoft365dev/retirement-of-office-365-connectors-within-microsoft-teams/)).\n> Existing connectors will continue to work until December 2025. The new [Teams Workflow Alerts](#configuring-teams-workflow-alerts) should be used with Microsoft Workflows instead of this legacy configuration.\n\n| Parameter                          | Description                                                                                | Default             |\n|:-----------------------------------|:-------------------------------------------------------------------------------------------|:--------------------|\n| `alerting.teams`                   | Configuration for alerts of type `teams`                                                   | `{}`                |\n| `alerting.teams.webhook-url`       | Teams Webhook URL                                                                          | Required `\"\"`       |\n| `alerting.teams.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                 |\n| `alerting.teams.title`             | Title of the notification                                                                  | `\"&#x1F6A8; Gatus\"` |\n| `alerting.teams.client.insecure`   | Whether to skip TLS verification                                                           | `false`             |\n| `alerting.teams.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`                |\n| `alerting.teams.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`                |\n| `alerting.teams.overrides[].*`     | See `alerting.teams.*` parameters                                                          | `{}`                |\n\n```yaml\nalerting:\n  teams:\n    webhook-url: \"https://********.webhook.office.com/webhookb2/************\"\n    client:\n      insecure: false\n    # You can also add group-specific to keys, which will\n    # override the to key above for the specified groups\n    overrides:\n      - group: \"core\"\n        webhook-url: \"https://********.webhook.office.com/webhookb3/************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: teams\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n\n  - name: back-end\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n    alerts:\n      - type: teams\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Teams notifications](.github/assets/teams-alerts.png)\n\n#### Configuring Teams Workflow alerts\n\n> [!NOTE]\n> This alert is compatible with Workflows for Microsoft Teams. To setup the workflow and get the webhook URL, follow the [Microsoft Documentation](https://support.microsoft.com/en-us/office/create-incoming-webhooks-with-workflows-for-microsoft-teams-8ae491c7-0394-4861-ba59-055e33f75498).\n\n| Parameter                                    | Description                                                                                | Default            |\n|:---------------------------------------------|:-------------------------------------------------------------------------------------------|:-------------------|\n| `alerting.teams-workflows`                   | Configuration for alerts of type `teams`                                                   | `{}`               |\n| `alerting.teams-workflows.webhook-url`       | Teams Webhook URL                                                                          | Required `\"\"`      |\n| `alerting.teams-workflows.title`             | Title of the notification                                                                  | `\"&#x26D1; Gatus\"` |\n| `alerting.teams-workflows.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                |\n| `alerting.teams-workflows.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`               |\n| `alerting.teams-workflows.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`               |\n| `alerting.teams-workflows.overrides[].*`     | See `alerting.teams-workflows.*` parameters                                                | `{}`               |\n\n```yaml\nalerting:\n  teams-workflows:\n    webhook-url: \"https://********.webhook.office.com/webhookb2/************\"\n    # You can also add group-specific to keys, which will\n    # override the to key above for the specified groups\n    overrides:\n      - group: \"core\"\n        webhook-url: \"https://********.webhook.office.com/webhookb3/************\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: teams-workflows\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n\n  - name: back-end\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n    alerts:\n      - type: teams-workflows\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Teams Workflow notifications](.github/assets/teams-workflows-alerts.png)\n\n\n#### Configuring Telegram alerts\n| Parameter                             | Description                                                                                | Default                    |\n|:--------------------------------------|:-------------------------------------------------------------------------------------------|:---------------------------|\n| `alerting.telegram`                   | Configuration for alerts of type `telegram`                                                | `{}`                       |\n| `alerting.telegram.token`             | Telegram Bot Token                                                                         | Required `\"\"`              |\n| `alerting.telegram.id`                | Telegram User ID                                                                           | Required `\"\"`              |\n| `alerting.telegram.api-url`           | Telegram API URL                                                                           | `https://api.telegram.org` |\n| `alerting.telegram.client`            | Client configuration. <br />See [Client configuration](#client-configuration).             | `{}`                       |\n| `alerting.telegram.default-alert`     | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A                        |\n| `alerting.telegram.overrides`         | List of overrides that may be prioritized over the default configuration                   | `[]`                       |\n| `alerting.telegram.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration        | `\"\"`                       |\n| `alerting.telegram.overrides[].*`     | See `alerting.telegram.*` parameters                                                       | `{}`                       |\n\n```yaml\nalerting:\n  telegram:\n    token: \"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\"\n    id: \"0123456789\"\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n    alerts:\n      - type: telegram\n        send-on-resolved: true\n```\n\nHere's an example of what the notifications look like:\n\n![Telegram notifications](.github/assets/telegram-alerts.png)\n\n\n#### Configuring Twilio alerts\n| Parameter                       | Description                                                                                | Default       |\n|:--------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.twilio`               | Settings for alerts of type `twilio`                                                       | `{}`          |\n| `alerting.twilio.sid`           | Twilio account SID                                                                         | Required `\"\"` |\n| `alerting.twilio.token`         | Twilio auth token                                                                          | Required `\"\"` |\n| `alerting.twilio.from`          | Number to send Twilio alerts from                                                          | Required `\"\"` |\n| `alerting.twilio.to`            | Number to send twilio alerts to                                                            | Required `\"\"` |\n| `alerting.twilio.default-alert` | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n\n```yaml\nalerting:\n  twilio:\n    sid: \"...\"\n    token: \"...\"\n    from: \"+1-234-567-8901\"\n    to: \"+1-234-567-8901\"\n\nendpoints:\n  - name: website\n    interval: 30s\n    url: \"https://twin.sh/health\"\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: twilio\n        failure-threshold: 5\n        send-on-resolved: true\n        description: \"healthcheck failed\"\n```\n\n\nIf the `access-key-id` and `secret-access-key` are not defined Gatus will fall back to IAM authentication.\n\nMake sure you have the ability to use `ses:SendEmail`.\n\n#### Configuring Zulip alerts\n| Parameter                          | Description                                                                         | Default       |\n|:-----------------------------------|:------------------------------------------------------------------------------------|:--------------|\n| `alerting.zulip`                   | Configuration for alerts of type `discord`                                          | `{}`          |\n| `alerting.zulip.bot-email`         | Bot Email                                                                           | Required `\"\"` |\n| `alerting.zulip.bot-api-key`       | Bot API key                                                                         | Required `\"\"` |\n| `alerting.zulip.domain`            | Full organization domain (e.g.: yourZulipDomain.zulipchat.com)                      | Required `\"\"` |\n| `alerting.zulip.channel-id`        | The channel ID where Gatus will send the alerts                                     | Required `\"\"` |\n| `alerting.zulip.overrides`         | List of overrides that may be prioritized over the default configuration            | `[]`          |\n| `alerting.zulip.overrides[].group` | Endpoint group for which the configuration will be overridden by this configuration | `\"\"`          |\n| `alerting.zulip.overrides[].*`     | See `alerting.zulip.*` parameters                                                   | `{}`          |\n\n```yaml\nalerting:\n  zulip:\n    bot-email: gatus-bot@some.zulip.org\n    bot-api-key: \"********************************\"\n    domain: some.zulip.org\n    channel-id: 123456\n\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: zulip\n        description: \"healthcheck failed\"\n        send-on-resolved: true\n```\n\n\n#### Configuring custom alerts\n| Parameter                       | Description                                                                                | Default       |\n|:--------------------------------|:-------------------------------------------------------------------------------------------|:--------------|\n| `alerting.custom`               | Configuration for custom actions on failure or alerts                                      | `{}`          |\n| `alerting.custom.url`           | Custom alerting request url                                                                | Required `\"\"` |\n| `alerting.custom.method`        | Request method                                                                             | `GET`         |\n| `alerting.custom.body`          | Custom alerting request body.                                                              | `\"\"`          |\n| `alerting.custom.headers`       | Custom alerting request headers                                                            | `{}`          |\n| `alerting.custom.client`        | Client configuration. <br />See [Client configuration](#client-configuration).             | `{}`          |\n| `alerting.custom.default-alert` | Default alert configuration. <br />See [Setting a default alert](#setting-a-default-alert) | N/A           |\n\nWhile they're called alerts, you can use this feature to call anything.\n\nFor instance, you could automate rollbacks by having an application that keeps tracks of new deployments, and by\nleveraging Gatus, you could have Gatus call that application endpoint when an endpoint starts failing. Your application\nwould then check if the endpoint that started failing was part of the recently deployed application, and if it was,\nthen automatically roll it back.\n\nFurthermore, you may use the following placeholders in the body (`alerting.custom.body`) and in the url (`alerting.custom.url`):\n- `[ALERT_DESCRIPTION]` (resolved from `endpoints[].alerts[].description`)\n- `[ENDPOINT_NAME]` (resolved from `endpoints[].name`)\n- `[ENDPOINT_GROUP]` (resolved from `endpoints[].group`)\n- `[ENDPOINT_URL]` (resolved from `endpoints[].url`)\n- `[RESULT_ERRORS]` (resolved from the health evaluation of a given health check)\n\nIf you have an alert using the `custom` provider with `send-on-resolved` set to `true`, you can use the\n`[ALERT_TRIGGERED_OR_RESOLVED]` placeholder to differentiate the notifications.\nThe aforementioned placeholder will be replaced by `TRIGGERED` or `RESOLVED` accordingly, though it can be modified\n(details at the end of this section).\n\nFor all intents and purposes, we'll configure the custom alert with a Slack webhook, but you can call anything you want.\n```yaml\nalerting:\n  custom:\n    url: \"https://hooks.slack.com/services/**********/**********/**********\"\n    method: \"POST\"\n    body: |\n      {\n        \"text\": \"[ALERT_TRIGGERED_OR_RESOLVED]: [ENDPOINT_GROUP] - [ENDPOINT_NAME] - [ALERT_DESCRIPTION] - [RESULT_ERRORS]\"\n      }\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    interval: 30s\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 300\"\n    alerts:\n      - type: custom\n        failure-threshold: 10\n        success-threshold: 3\n        send-on-resolved: true\n        description: \"health check failed\"\n```\n\nNote that you can customize the resolved values for the `[ALERT_TRIGGERED_OR_RESOLVED]` placeholder like so:\n```yaml\nalerting:\n  custom:\n    placeholders:\n      ALERT_TRIGGERED_OR_RESOLVED:\n        TRIGGERED: \"partial_outage\"\n        RESOLVED: \"operational\"\n```\nAs a result, the `[ALERT_TRIGGERED_OR_RESOLVED]` in the body of first example of this section would be replaced by\n`partial_outage` when an alert is triggered and `operational` when an alert is resolved.\n\n\n#### Setting a default alert\n| Parameter                                    | Description                                                                   | Default |\n|:---------------------------------------------|:------------------------------------------------------------------------------|:--------|\n| `alerting.*.default-alert.enabled`           | Whether to enable the alert                                                   | N/A     |\n| `alerting.*.default-alert.failure-threshold` | Number of failures in a row needed before triggering the alert                | N/A     |\n| `alerting.*.default-alert.success-threshold` | Number of successes in a row before an ongoing incident is marked as resolved | N/A     |\n| `alerting.*.default-alert.send-on-resolved`  | Whether to send a notification once a triggered alert is marked as resolved   | N/A     |\n| `alerting.*.default-alert.description`       | Description of the alert. Will be included in the alert sent                  | N/A     |\n\n> ⚠ You must still specify the `type` of the alert in the endpoint configuration even if you set the default alert of a provider.\n\nWhile you can specify the alert configuration directly in the endpoint definition, it's tedious and may lead to a very\nlong configuration file.\n\nTo avoid such problem, you can use the `default-alert` parameter present in each provider configuration:\n```yaml\nalerting:\n  slack:\n    webhook-url: \"https://hooks.slack.com/services/**********/**********/**********\"\n    default-alert:\n      description: \"health check failed\"\n      send-on-resolved: true\n      failure-threshold: 5\n      success-threshold: 5\n```\n\nAs a result, your Gatus configuration looks a lot tidier:\n```yaml\nendpoints:\n  - name: example\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n\n  - name: other-example\n    url: \"https://example.com\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n```\n\nIt also allows you to do things like this:\n```yaml\nendpoints:\n  - name: example\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n        failure-threshold: 5\n      - type: slack\n        failure-threshold: 10\n      - type: slack\n        failure-threshold: 15\n```\n\nOf course, you can also mix alert types:\n```yaml\nalerting:\n  slack:\n    webhook-url: \"https://hooks.slack.com/services/**********/**********/**********\"\n    default-alert:\n      failure-threshold: 3\n  pagerduty:\n    integration-key: \"********************************\"\n    default-alert:\n      failure-threshold: 5\n\nendpoints:\n  - name: endpoint-1\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n      - type: pagerduty\n\n  - name: endpoint-2\n    url: \"https://example.org\"\n    conditions:\n      - \"[STATUS] == 200\"\n    alerts:\n      - type: slack\n      - type: pagerduty\n```\n\n\n### Maintenance\nIf you have maintenance windows, you may not want to be annoyed by alerts.\nTo do that, you'll have to use the maintenance configuration:\n\n| Parameter              | Description                                                                                                                                                                                | Default       |\n|:-----------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:--------------|\n| `maintenance.enabled`  | Whether the maintenance period is enabled                                                                                                                                                  | `true`        |\n| `maintenance.start`    | Time at which the maintenance window starts in `hh:mm` format (e.g. `23:00`)                                                                                                               | Required `\"\"` |\n| `maintenance.duration` | Duration of the maintenance window (e.g. `1h`, `30m`)                                                                                                                                      | Required `\"\"` |\n| `maintenance.timezone` | Timezone of the maintenance window format (e.g. `Europe/Amsterdam`).<br />See [List of tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for more info | `UTC`         |\n| `maintenance.every`    | Days on which the maintenance period applies (e.g. `[Monday, Thursday]`).<br />If left empty, the maintenance window applies every day                                                     | `[]`          |\n\nHere's an example:\n```yaml\nmaintenance:\n  start: 23:00\n  duration: 1h\n  timezone: \"Europe/Amsterdam\"\n  every: [Monday, Thursday]\n```\nNote that you can also specify each day on separate lines:\n```yaml\nmaintenance:\n  start: 23:00\n  duration: 1h\n  timezone: \"Europe/Amsterdam\"\n  every:\n    - Monday\n    - Thursday\n```\n\n\n### Security\n| Parameter        | Description                  | Default |\n|:-----------------|:-----------------------------|:--------|\n| `security`       | Security configuration       | `{}`    |\n| `security.basic` | HTTP Basic configuration     | `{}`    |\n| `security.oidc`  | OpenID Connect configuration | `{}`    |\n\n\n#### Basic Authentication\n| Parameter                               | Description                                                                        | Default       |\n|:----------------------------------------|:-----------------------------------------------------------------------------------|:--------------|\n| `security.basic`                        | HTTP Basic configuration                                                           | `{}`          |\n| `security.basic.username`               | Username for Basic authentication.                                                 | Required `\"\"` |\n| `security.basic.password-bcrypt-base64` | Password hashed with Bcrypt and then encoded with base64 for Basic authentication. | Required `\"\"` |\n\nThe example below will require that you authenticate with the username `john.doe` and the password `hunter2`:\n```yaml\nsecurity:\n  basic:\n    username: \"john.doe\"\n    password-bcrypt-base64: \"JDJhJDEwJHRiMnRFakxWazZLdXBzRERQazB1TE8vckRLY05Yb1hSdnoxWU0yQ1FaYXZRSW1McmladDYu\"\n```\n\n> ⚠ Make sure to carefully select the cost of the bcrypt hash. The higher the cost, the longer it takes to compute the hash,\n> and basic auth verifies the password against the hash on every request. As of 2023-01-06, I suggest a cost of 9.\n\n\n#### OIDC\n| Parameter                        | Description                                                    | Default       |\n|:---------------------------------|:---------------------------------------------------------------|:--------------|\n| `security.oidc`                  | OpenID Connect configuration                                   | `{}`          |\n| `security.oidc.issuer-url`       | Issuer URL                                                     | Required `\"\"` |\n| `security.oidc.redirect-url`     | Redirect URL. Must end with `/authorization-code/callback`     | Required `\"\"` |\n| `security.oidc.client-id`        | Client id                                                      | Required `\"\"` |\n| `security.oidc.client-secret`    | Client secret                                                  | Required `\"\"` |\n| `security.oidc.scopes`           | Scopes to request. The only scope you need is `openid`.        | Required `[]` |\n| `security.oidc.allowed-subjects` | List of subjects to allow. If empty, all subjects are allowed. | `[]`          |\n\n```yaml\nsecurity:\n  oidc:\n    issuer-url: \"https://example.okta.com\"\n    redirect-url: \"https://status.example.com/authorization-code/callback\"\n    client-id: \"123456789\"\n    client-secret: \"abcdefghijk\"\n    scopes: [\"openid\"]\n    # You may optionally specify a list of allowed subjects. If this is not specified, all subjects will be allowed.\n    #allowed-subjects: [\"johndoe@example.com\"]\n```\n\nConfused? Read [Securing Gatus with OIDC using Auth0](https://twin.sh/articles/56/securing-gatus-with-oidc-using-auth0).\n\n\n### TLS Encryption\nGatus supports basic encryption with TLS. To enable this, certificate files in PEM format have to be provided.\n\nThe example below shows an example configuration which makes gatus respond on port 4443 to HTTPS requests:\n```yaml\nweb:\n  port: 4443\n  tls:\n    certificate-file: \"certificate.crt\"\n    private-key-file: \"private.key\"\n```\n\n\n### Metrics\nTo enable metrics, you must set `metrics` to `true`. Doing so will expose Prometheus-friendly metrics at the `/metrics`\nendpoint on the same port your application is configured to run on (`web.port`).\n\n| Metric name                                  | Type    | Description                                                                | Labels                          | Relevant endpoint types |\n|:---------------------------------------------|:--------|:---------------------------------------------------------------------------|:--------------------------------|:------------------------|\n| gatus_results_total                          | counter | Number of results per endpoint                                             | key, group, name, type, success | All                     |\n| gatus_results_code_total                     | counter | Total number of results by code                                            | key, group, name, type, code    | DNS, HTTP               |\n| gatus_results_connected_total                | counter | Total number of results in which a connection was successfully established | key, group, name, type          | All                     |\n| gatus_results_duration_seconds               | gauge   | Duration of the request in seconds                                         | key, group, name, type          | All                     |\n| gatus_results_certificate_expiration_seconds | gauge   | Number of seconds until the certificate expires                            | key, group, name, type          | HTTP, STARTTLS          |\n\nSee [examples/docker-compose-grafana-prometheus](.examples/docker-compose-grafana-prometheus) for further documentation as well as an example.\n\n\n### Connectivity\n| Parameter                       | Description                                | Default       |\n|:--------------------------------|:-------------------------------------------|:--------------|\n| `connectivity`                  | Connectivity configuration                 | `{}`          |\n| `connectivity.checker`          | Connectivity checker configuration         | Required `{}` |\n| `connectivity.checker.target`   | Host to use for validating connectivity    | Required `\"\"` |\n| `connectivity.checker.interval` | Interval at which to validate connectivity | `1m`          |\n\nWhile Gatus is used to monitor other services, it is possible for Gatus itself to lose connectivity to the internet.\nIn order to prevent Gatus from reporting endpoints as unhealthy when Gatus itself is unhealthy, you may configure\nGatus to periodically check for internet connectivity.\n\nAll endpoint executions are skipped while the connectivity checker deems connectivity to be down.\n\n```yaml\nconnectivity:\n  checker:\n    target: 1.1.1.1:53\n    interval: 60s\n```\n\n\n### Remote instances (EXPERIMENTAL)\nThis feature allows you to retrieve endpoint statuses from a remote Gatus instance.\n\nThere are two main use cases for this:\n- You have multiple Gatus instances running on different machines, and you wish to visually expose the statuses through a single dashboard\n- You have one or more Gatus instances that are not publicly accessible (e.g. behind a firewall), and you wish to retrieve\n\nThis is an experimental feature. It may be removed or updated in a breaking manner at any time. Furthermore,\nthere are known issues with this feature. If you'd like to provide some feedback, please write a comment in [#64](https://github.com/TwiN/gatus/issues/64).\nUse at your own risk.\n\n| Parameter                          | Description                                  | Default       |\n|:-----------------------------------|:---------------------------------------------|:--------------|\n| `remote`                           | Remote configuration                         | `{}`          |\n| `remote.instances`                 | List of remote instances                     | Required `[]` |\n| `remote.instances.endpoint-prefix` | String to prefix all endpoint names with     | `\"\"`          |\n| `remote.instances.url`             | URL from which to retrieve endpoint statuses | Required `\"\"` |\n\n```yaml\nremote:\n  instances:\n    - endpoint-prefix: \"status.example.org-\"\n      url: \"https://status.example.org/api/v1/endpoints/statuses\"\n```\n\n\n## Deployment\nMany examples can be found in the [.examples](.examples) folder, but this section will focus on the most popular ways of deploying Gatus.\n\n\n### Docker\nTo run Gatus locally with Docker:\n```console\ndocker run -p 8080:8080 --name gatus twinproduction/gatus\n```\n\nOther than using one of the examples provided in the [.examples](.examples) folder, you can also try it out locally by\ncreating a configuration file, we'll call it `config.yaml` for this example, and running the following\ncommand:\n```console\ndocker run -p 8080:8080 --mount type=bind,source=\"$(pwd)\"/config.yaml,target=/config/config.yaml --name gatus twinproduction/gatus\n```\n\nIf you're on Windows, replace `\"$(pwd)\"` by the absolute path to your current directory, e.g.:\n```console\ndocker run -p 8080:8080 --mount type=bind,source=C:/Users/Chris/Desktop/config.yaml,target=/config/config.yaml --name gatus twinproduction/gatus\n```\n\nTo build the image locally:\n```console\ndocker build . -t twinproduction/gatus\n```\n\n\n### Helm Chart\n[Helm](https://helm.sh) must be installed to use the chart.\nPlease refer to Helm's [documentation](https://helm.sh/docs/) to get started.\n\nOnce Helm is set up properly, add the repository as follows:\n\n```console\nhelm repo add twin https://twin.github.io/helm-charts\nhelm repo update\nhelm install gatus twin/gatus\n```\n\nTo get more details, please check [chart's configuration](https://github.com/TwiN/helm-charts/blob/master/charts/gatus/README.md).\n\n\n### Terraform\nGatus can be deployed on Terraform by using the following module: [terraform-kubernetes-gatus](https://github.com/TwiN/terraform-kubernetes-gatus).\n\n\n## Running the tests\n```console\ngo test -v ./...\n```\n\n\n## Using in Production\nSee the [Deployment](#deployment) section.\n\n\n## FAQ\n### Sending a GraphQL request\nBy setting `endpoints[].graphql` to true, the body will automatically be wrapped by the standard GraphQL `query` parameter.\n\nFor instance, the following configuration:\n```yaml\nendpoints:\n  - name: filter-users-by-gender\n    url: http://localhost:8080/playground\n    method: POST\n    graphql: true\n    body: |\n      {\n        users(gender: \"female\") {\n          id\n          name\n          gender\n          avatar\n        }\n      }\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].data.users[0].gender == female\"\n```\n\nwill send a `POST` request to `http://localhost:8080/playground` with the following body:\n```json\n{\"query\":\"      {\\n        users(gender: \\\"female\\\") {\\n          id\\n          name\\n          gender\\n          avatar\\n        }\\n      }\"}\n```\n\n\n### Recommended interval\n> 📝 This does not apply if `disable-monitoring-lock` is set to `true`, as the monitoring lock is what\n> tells Gatus to only evaluate one endpoint at a time.\n\nTo ensure that Gatus provides reliable and accurate results (i.e. response time), Gatus only evaluates one endpoint at a time\nIn other words, even if you have multiple endpoints with the same interval, they will not execute at the same time.\n\nYou can test this yourself by running Gatus with several endpoints configured with a very short, unrealistic interval,\nsuch as 1ms. You'll notice that the response time does not fluctuate - that is because while endpoints are evaluated on\ndifferent goroutines, there's a global lock that prevents multiple endpoints from running at the same time.\n\nUnfortunately, there is a drawback. If you have a lot of endpoints, including some that are very slow or prone to timing out\n(the default timeout is 10s), then it means that for the entire duration of the request, no other endpoint can be evaluated.\n\nThe interval does not include the duration of the request itself, which means that if an endpoint has an interval of 30s\nand the request takes 2s to complete, the timestamp between two evaluations will be 32s, not 30s.\n\nWhile this does not prevent Gatus' from performing health checks on all other endpoints, it may cause Gatus to be unable\nto respect the configured interval, for instance:\n- Endpoint A has an interval of 5s, and times out after 10s to complete\n- Endpoint B has an interval of 5s, and takes 1ms to complete\n- Endpoint B will be unable to run every 5s, because endpoint A's health evaluation takes longer than its interval\n\nTo sum it up, while Gatus can handle any interval you throw at it, you're better off having slow requests with\nhigher interval.\n\nAs a rule of thumb, I personally set the interval for more complex health checks to `5m` (5 minutes) and\nsimple health checks used for alerting (PagerDuty/Twilio) to `30s`.\n\n\n### Default timeouts\n| Endpoint type | Timeout |\n|:--------------|:--------|\n| HTTP          | 10s     |\n| TCP           | 10s     |\n| ICMP          | 10s     |\n\nTo modify the timeout, see [Client configuration](#client-configuration).\n\n\n### Monitoring a TCP endpoint\nBy prefixing `endpoints[].url` with `tcp://`, you can monitor TCP endpoints at a very basic level:\n```yaml\nendpoints:\n  - name: redis\n    url: \"tcp://127.0.0.1:6379\"\n    interval: 30s\n    conditions:\n      - \"[CONNECTED] == true\"\n```\n\nPlaceholders `[STATUS]` and `[BODY]` as well as the fields `endpoints[].body`, `endpoints[].headers`,\n`endpoints[].method` and `endpoints[].graphql` are not supported for TCP endpoints.\n\nThis works for applications such as databases (Postgres, MySQL, etc.) and caches (Redis, Memcached, etc.).\n\n> 📝 `[CONNECTED] == true` does not guarantee that the endpoint itself is healthy - it only guarantees that there's\n> something at the given address listening to the given port, and that a connection to that address was successfully\n> established.\n\n\n### Monitoring a UDP endpoint\nBy prefixing `endpoints[].url` with `udp://`, you can monitor UDP endpoints at a very basic level:\n```yaml\nendpoints:\n  - name: example\n    url: \"udp://example.org:80\"\n    conditions:\n      - \"[CONNECTED] == true\"\n```\n\nPlaceholders `[STATUS]` and `[BODY]` as well as the fields `endpoints[].body`, `endpoints[].headers`,\n`endpoints[].method` and `endpoints[].graphql` are not supported for UDP endpoints.\n\nThis works for UDP based application.\n\n\n### Monitoring a SCTP endpoint\nBy prefixing `endpoints[].url` with `sctp://`, you can monitor Stream Control Transmission Protocol (SCTP) endpoints at a very basic level:\n```yaml\nendpoints:\n  - name: example\n    url: \"sctp://127.0.0.1:38412\"\n    conditions:\n      - \"[CONNECTED] == true\"\n```\n\nPlaceholders `[STATUS]` and `[BODY]` as well as the fields `endpoints[].body`, `endpoints[].headers`,\n`endpoints[].method` and `endpoints[].graphql` are not supported for SCTP endpoints.\n\nThis works for SCTP based application.\n\n\n### Monitoring a WebSocket endpoint\nBy prefixing `endpoints[].url` with `ws://` or `wss://`, you can monitor WebSocket endpoints at a very basic level:\n```yaml\nendpoints:\n  - name: example\n    url: \"wss://example.com/\"\n    body: \"status\"\n    conditions:\n      - \"[CONNECTED] == true\"\n      - \"[BODY].result >= 0\"\n```\n\nThe `[BODY]` placeholder contains the output of the query, and `[CONNECTED]`\nshows whether the connection was successfully established.\n\n\n### Monitoring an endpoint using ICMP\nBy prefixing `endpoints[].url` with `icmp://`, you can monitor endpoints at a very basic level using ICMP, or more\ncommonly known as \"ping\" or \"echo\":\n```yaml\nendpoints:\n  - name: ping-example\n    url: \"icmp://example.com\"\n    conditions:\n      - \"[CONNECTED] == true\"\n```\n\nOnly the placeholders `[CONNECTED]`, `[IP]` and `[RESPONSE_TIME]` are supported for endpoints of type ICMP.\nYou can specify a domain prefixed by `icmp://`, or an IP address prefixed by `icmp://`.\n\nIf you run Gatus on Linux, please read the Linux section on https://github.com/prometheus-community/pro-bing#linux\nif you encounter any problems.\n\n\n### Monitoring an endpoint using DNS queries\nDefining a `dns` configuration in an endpoint will automatically mark said endpoint as an endpoint of type DNS:\n```yaml\nendpoints:\n  - name: example-dns-query\n    url: \"8.8.8.8\" # Address of the DNS server to use\n    dns:\n      query-name: \"example.com\"\n      query-type: \"A\"\n    conditions:\n      - \"[BODY] == 93.184.215.14\"\n      - \"[DNS_RCODE] == NOERROR\"\n```\n\nThere are two placeholders that can be used in the conditions for endpoints of type DNS:\n- The placeholder `[BODY]` resolves to the output of the query. For instance, a query of type `A` would return an IPv4.\n- The placeholder `[DNS_RCODE]` resolves to the name associated to the response code returned by the query, such as\n`NOERROR`, `FORMERR`, `SERVFAIL`, `NXDOMAIN`, etc.\n\n\n### Monitoring an endpoint using SSH\nYou can monitor endpoints using SSH by prefixing `endpoints[].url` with `ssh://`:\n```yaml\nendpoints:\n  - name: ssh-example\n    url: \"ssh://example.com:22\" # port is optional. Default is 22.\n    ssh:\n      username: \"username\"\n      password: \"password\"\n    body: |\n      {\n        \"command\": \"uptime\"\n      }\n    interval: 1m\n    conditions:\n      - \"[CONNECTED] == true\"\n      - \"[STATUS] == 0\"\n```\n\nThe following placeholders are supported for endpoints of type SSH:\n- `[CONNECTED]` resolves to `true` if the SSH connection was successful, `false` otherwise\n- `[STATUS]` resolves the exit code of the command executed on the remote server (e.g. `0` for success)\n\n\n### Monitoring an endpoint using STARTTLS\nIf you have an email server that you want to ensure there are no problems with, monitoring it through STARTTLS\nwill serve as a good initial indicator:\n```yaml\nendpoints:\n  - name: starttls-smtp-example\n    url: \"starttls://smtp.gmail.com:587\"\n    interval: 30m\n    client:\n      timeout: 5s\n    conditions:\n      - \"[CONNECTED] == true\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n```\n\n\n### Monitoring an endpoint using TLS\nMonitoring endpoints using SSL/TLS encryption, such as LDAP over TLS, can help detect certificate expiration:\n```yaml\nendpoints:\n  - name: tls-ldaps-example\n    url: \"tls://ldap.example.com:636\"\n    interval: 30m\n    client:\n      timeout: 5s\n    conditions:\n      - \"[CONNECTED] == true\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n```\n\n\n### Monitoring domain expiration\nYou can monitor the expiration of a domain with all endpoint types except for DNS by using the `[DOMAIN_EXPIRATION]`\nplaceholder:\n```yaml\nendpoints:\n  - name: check-domain-and-certificate-expiration\n    url: \"https://example.org\"\n    interval: 1h\n    conditions:\n      - \"[DOMAIN_EXPIRATION] > 720h\"\n      - \"[CERTIFICATE_EXPIRATION] > 240h\"\n```\n\n> ⚠ The usage of the `[DOMAIN_EXPIRATION]` placeholder requires Gatus to send a request to the official IANA WHOIS service [through a library](https://github.com/TwiN/whois)\n> and in some cases, a secondary request to a TLD-specific WHOIS server (e.g. `whois.nic.sh`).\n> To prevent the WHOIS service from throttling your IP address if you send too many requests, Gatus will prevent you from\n> using the `[DOMAIN_EXPIRATION]` placeholder on an endpoint with an interval of less than `5m`.\n\n\n### disable-monitoring-lock\nSetting `disable-monitoring-lock` to `true` means that multiple endpoints could be monitored at the same time.\n\nWhile this behavior wouldn't generally be harmful, conditions using the `[RESPONSE_TIME]` placeholder could be impacted\nby the evaluation of multiple endpoints at the same time, therefore, the default value for this parameter is `false`.\n\nThere are three main reasons why you might want to disable the monitoring lock:\n- You're using Gatus for load testing (each endpoint are periodically evaluated on a different goroutine, so\ntechnically, if you create 100 endpoints with a 1 seconds interval, Gatus will send 100 requests per second)\n- You have a _lot_ of endpoints to monitor\n- You want to test multiple endpoints at very short intervals (< 5s)\n\n\n### Reloading configuration on the fly\nFor the sake of convenience, Gatus automatically reloads the configuration on the fly if the loaded configuration file\nis updated while Gatus is running.\n\nBy default, the application will exit if the updating configuration is invalid, but you can configure\nGatus to continue running if the configuration file is updated with an invalid configuration by\nsetting `skip-invalid-config-update` to `true`.\n\nKeep in mind that it is in your best interest to ensure the validity of the configuration file after each update you\napply to the configuration file while Gatus is running by looking at the log and making sure that you do not see the\nfollowing message:\n```\nThe configuration file was updated, but it is not valid. The old configuration will continue being used.\n```\nFailure to do so may result in Gatus being unable to start if the application is restarted for whatever reason.\n\nI recommend not setting `skip-invalid-config-update` to `true` to avoid a situation like this, but the choice is yours\nto make.\n\n**If you are not using a file storage**, updating the configuration while Gatus is running is effectively\nthe same as restarting the application.\n\n> 📝 Updates may not be detected if the config file is bound instead of the config folder. See [#151](https://github.com/TwiN/gatus/issues/151).\n\n\n### Endpoint groups\nEndpoint groups are used for grouping multiple endpoints together on the dashboard.\n\n```yaml\nendpoints:\n  - name: frontend\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: backend\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: monitoring\n    group: internal\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: nas\n    group: internal\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: random endpoint that is not part of a group\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\nThe configuration above will result in a dashboard that looks like this:\n\n![Gatus Endpoint Groups](.github/assets/endpoint-groups.png)\n\n\n### Exposing Gatus on a custom path\nCurrently, you can expose the Gatus UI using a fully qualified domain name (FQDN) such as `status.example.org`. However, it does not support path-based routing, which means you cannot expose it through a URL like `example.org/status/`.\n\nFor more information, see https://github.com/TwiN/gatus/issues/88.\n\n\n### Exposing Gatus on a custom port\nBy default, Gatus is exposed on port `8080`, but you may specify a different port by setting the `web.port` parameter:\n```yaml\nweb:\n  port: 8081\n```\n\nIf you're using a PaaS like Heroku that doesn't let you set a custom port and exposes it through an environment\nvariable instead, you can use that environment variable directly in the configuration file:\n```yaml\nweb:\n  port: ${PORT}\n```\n\n\n### Configuring a startup delay\nIf, for any reason, you need Gatus to wait for a given amount of time before monitoring the endpoints on application start, you can use the `GATUS_DELAY_START_SECONDS` environment variable to make Gatus sleep on startup.\n\n\n### Keeping your configuration small\nWhile not specific to Gatus, you can leverage YAML anchors to create a default configuration.\nIf you have a large configuration file, this should help you keep things clean.\n\n<details>\n  <summary>Example</summary>\n\n```yaml\ndefault-endpoint: &defaults\n  group: core\n  interval: 5m\n  client:\n    insecure: true\n    timeout: 30s\n  conditions:\n    - \"[STATUS] == 200\"\n\nendpoints:\n  - name: anchor-example-1\n    <<: *defaults               # This will merge the configuration under &defaults with this endpoint\n    url: \"https://example.org\"\n\n  - name: anchor-example-2\n    <<: *defaults\n    group: example              # This will override the group defined in &defaults\n    url: \"https://example.com\"\n\n  - name: anchor-example-3\n    <<: *defaults\n    url: \"https://twin.sh/health\"\n    conditions:                # This will override the conditions defined in &defaults\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n```\n</details>\n\n\n### Proxy client configuration\nYou can configure a proxy for the client to use by setting the `proxy-url` parameter in the client configuration.\n\n```yaml\nendpoints:\n  - name: website\n    url: \"https://twin.sh/health\"\n    client:\n      proxy-url: http://proxy.example.com:8080\n    conditions:\n      - \"[STATUS] == 200\"\n```\n\n\n### How to fix 431 Request Header Fields Too Large error\nDepending on where your environment is deployed and what kind of middleware or reverse proxy sits in front of Gatus,\nyou may run into this issue. This could be because the request headers are too large, e.g. big cookies.\n\nBy default, `web.read-buffer-size` is set to `8192`, but increasing this value like so will increase the read buffer size:\n```yaml\nweb:\n  read-buffer-size: 32768\n```\n\n\n### Badges\n#### Uptime\n![Uptime 1h](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/1h/badge.svg)\n![Uptime 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/24h/badge.svg)\n![Uptime 7d](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/7d/badge.svg)\n\nGatus can automatically generate an SVG badge for one of your monitored endpoints.\nThis allows you to put badges in your individual applications' README or even create your own status page if you\ndesire.\n\nThe path to generate a badge is the following:\n```\n/api/v1/endpoints/{key}/uptimes/{duration}/badge.svg\n```\nWhere:\n- `{duration}` is `30d` (alpha), `7d`, `24h` or `1h`\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n\nFor instance, if you want the uptime during the last 24 hours from the endpoint `frontend` in the group `core`,\nthe URL would look like this:\n```\nhttps://example.com/api/v1/endpoints/core_frontend/uptimes/7d/badge.svg\n```\nIf you want to display an endpoint that is not part of a group, you must leave the group value empty:\n```\nhttps://example.com/api/v1/endpoints/_frontend/uptimes/7d/badge.svg\n```\nExample:\n```\n![Uptime 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/uptimes/24h/badge.svg)\n```\nIf you'd like to see a visual example of each badge available, you can simply navigate to the endpoint's detail page.\n\n\n#### Health\n![Health](https://status.twin.sh/api/v1/endpoints/core_blog-external/health/badge.svg)\n\nThe path to generate a badge is the following:\n```\n/api/v1/endpoints/{key}/health/badge.svg\n```\nWhere:\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n\nFor instance, if you want the current status of the endpoint `frontend` in the group `core`,\nthe URL would look like this:\n```\nhttps://example.com/api/v1/endpoints/core_frontend/health/badge.svg\n```\n\n\n#### Health (Shields.io)\n![Health](https://img.shields.io/endpoint?url=https%3A%2F%2Fstatus.twin.sh%2Fapi%2Fv1%2Fendpoints%2Fcore_blog-external%2Fhealth%2Fbadge.shields)\n\nThe path to generate a badge is the following:\n```\n/api/v1/endpoints/{key}/health/badge.shields\n```\nWhere:\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n\nFor instance, if you want the current status of the endpoint `frontend` in the group `core`,\nthe URL would look like this:\n```\nhttps://example.com/api/v1/endpoints/core_frontend/health/badge.shields\n```\n\nSee more information about the Shields.io badge endpoint [here](https://shields.io/badges/endpoint-badge).\n\n\n#### Response time\n![Response time 1h](https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/1h/badge.svg)\n![Response time 24h](https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/24h/badge.svg)\n![Response time 7d](https://status.twin.sh/api/v1/endpoints/core_blog-external/response-times/7d/badge.svg)\n\nThe endpoint to generate a badge is the following:\n```\n/api/v1/endpoints/{key}/response-times/{duration}/badge.svg\n```\nWhere:\n- `{duration}` is `30d` (alpha), `7d`, `24h` or `1h`\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n\n\n##### How to change the color thresholds of the response time badge\nTo change the response time badges' threshold, a corresponding configuration can be added to an endpoint.\nThe values in the array correspond to the levels [Awesome, Great, Good, Passable, Bad]\nAll five values must be given in milliseconds (ms).\n\n```yaml\nendpoints:\n- name: nas\n  group: internal\n  url: \"https://example.org/\"\n  interval: 5m\n  conditions:\n    - \"[STATUS] == 200\"\n  ui:\n    badge:\n      response-time:\n        thresholds: [550, 850, 1350, 1650, 1750]\n```\n\n\n### API\nGatus provides a simple read-only API that can be queried in order to programmatically determine endpoint status and history.\n\nAll endpoints are available via a GET request to the following endpoint:\n```\n/api/v1/endpoints/statuses\n````\nExample: https://status.twin.sh/api/v1/endpoints/statuses\n\nSpecific endpoints can also be queried by using the following pattern:\n```\n/api/v1/endpoints/{group}_{endpoint}/statuses\n```\nExample: https://status.twin.sh/api/v1/endpoints/core_blog-home/statuses\n\nGzip compression will be used if the `Accept-Encoding` HTTP header contains `gzip`.\n\nThe API will return a JSON payload with the `Content-Type` response header set to `application/json`.\nNo such header is required to query the API.\n\n#### Raw Data\nGatus exposes the raw data for one of your monitored endpoints.\nThis allows you to track and aggregate data in your own applications for monitored endpoints. For instance if you want to track uptime for a period longer than 7 days.\n\n##### Uptime\nThe path to get raw uptime data for an endpoint is:\n```\n/api/v1/endpoints/{key}/uptimes/{duration}\n```\nWhere:\n- `{duration}` is `30d` (alpha), `7d`, `24h` or `1h`\n- `{key}` has the pattern `<GROUP_NAME>_<ENDPOINT_NAME>` in which both variables have ` `, `/`, `_`, `,` and `.` replaced by `-`.\n\nFor instance, if you want the raw uptime data for the last 24 hours from the endpoint `frontend` in the group `core`, the URL would look like this:\n```\nhttps://example.com/api/v1/endpoints/core_frontend/uptimes/24h\n```\n\n### Installing as binary\nYou can download Gatus as a binary using the following command:\n```\ngo install github.com/TwiN/gatus/v5@latest\n```\n\n\n### High level design overview\n![Gatus diagram](.github/assets/gatus-diagram.jpg)\n"
        },
        {
          "name": "alerting",
          "type": "tree",
          "content": null
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "config.yaml",
          "type": "blob",
          "size": 1.099609375,
          "content": "endpoints:\n  - name: front-end\n    group: core\n    url: \"https://twin.sh/health\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[BODY].status == UP\"\n      - \"[RESPONSE_TIME] < 150\"\n\n  - name: back-end\n    group: core\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n      - \"[CERTIFICATE_EXPIRATION] > 48h\"\n\n  - name: monitoring\n    group: internal\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: nas\n    group: internal\n    url: \"https://example.org/\"\n    interval: 5m\n    conditions:\n      - \"[STATUS] == 200\"\n\n  - name: example-dns-query\n    url: \"8.8.8.8\" # Address of the DNS server to use\n    interval: 5m\n    dns:\n      query-name: \"example.com\"\n      query-type: \"A\"\n    conditions:\n      - \"[BODY] == 93.184.215.14\"\n      - \"[DNS_RCODE] == NOERROR\"\n\n  - name: icmp-ping\n    url: \"icmp://example.org\"\n    interval: 1m\n    conditions:\n      - \"[CONNECTED] == true\"\n\n  - name: check-domain-expiration\n    url: \"https://example.org/\"\n    interval: 1h\n    conditions:\n      - \"[DOMAIN_EXPIRATION] > 720h\"\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "controller",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.814453125,
          "content": "module github.com/TwiN/gatus/v5\n\ngo 1.23.3\n\nrequire (\n\tcode.gitea.io/sdk/gitea v0.19.0\n\tgithub.com/TwiN/deepmerge v0.2.2\n\tgithub.com/TwiN/g8/v2 v2.0.0\n\tgithub.com/TwiN/gocache/v2 v2.2.2\n\tgithub.com/TwiN/health v1.6.0\n\tgithub.com/TwiN/logr v0.3.1\n\tgithub.com/TwiN/whois v1.1.9\n\tgithub.com/aws/aws-sdk-go v1.55.5\n\tgithub.com/coreos/go-oidc/v3 v3.11.0\n\tgithub.com/gofiber/fiber/v2 v2.52.5\n\tgithub.com/google/go-github/v48 v48.2.0\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/ishidawataru/sctp v0.0.0-20230406120618-7ff4192f6ff2\n\tgithub.com/lib/pq v1.10.9\n\tgithub.com/miekg/dns v1.1.62\n\tgithub.com/prometheus-community/pro-bing v0.4.0\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/valyala/fasthttp v1.58.0\n\tgithub.com/wcharczuk/go-chart/v2 v2.1.2\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/net v0.33.0\n\tgolang.org/x/oauth2 v0.24.0\n\tgoogle.golang.org/api v0.214.0\n\tgopkg.in/mail.v2 v2.3.1\n\tgopkg.in/yaml.v3 v3.0.1\n\tmodernc.org/sqlite v1.34.4\n)\n\nrequire (\n\tcloud.google.com/go/auth v0.13.0 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.6 // indirect\n\tcloud.google.com/go/compute/metadata v0.6.0 // indirect\n\tgithub.com/andybalholm/brotli v1.1.1 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/davidmz/go-pageant v1.0.2 // indirect\n\tgithub.com/dustin/go-humanize v1.0.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/go-fed/httpsig v1.1.0 // indirect\n\tgithub.com/go-jose/go-jose/v4 v4.0.2 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgithub.com/google/s2a-go v0.1.8 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.14.0 // indirect\n\tgithub.com/hashicorp/go-version v1.6.0 // indirect\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.7 // indirect\n\tgithub.com/jmespath/go-jmespath v0.4.0 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/kylelemons/godebug v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.15 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/ncruces/go-strftime v0.1.9 // indirect\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\n\tgithub.com/prometheus/common v0.55.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/rogpeppe/go-internal v1.11.0 // indirect\n\tgithub.com/valyala/bytebufferpool v1.0.0 // indirect\n\tgithub.com/valyala/tcplisten v1.0.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 // indirect\n\tgo.opentelemetry.io/otel v1.29.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.29.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.29.0 // indirect\n\tgolang.org/x/image v0.18.0 // indirect\n\tgolang.org/x/mod v0.18.0 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/tools v0.22.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576 // indirect\n\tgoogle.golang.org/grpc v1.67.1 // indirect\n\tgoogle.golang.org/protobuf v1.35.2 // indirect\n\tgopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc // indirect\n\tmodernc.org/gc/v3 v3.0.0-20240304020402-f0dba7c97c2b // indirect\n\tmodernc.org/libc v1.55.3 // indirect\n\tmodernc.org/mathutil v1.6.0 // indirect\n\tmodernc.org/memory v1.8.0 // indirect\n\tmodernc.org/strutil v1.2.0 // indirect\n\tmodernc.org/token v1.1.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 24.2890625,
          "content": "cloud.google.com/go/auth v0.13.0 h1:8Fu8TZy167JkW8Tj3q7dIkr2v4cndv41ouecJx0PAHs=\ncloud.google.com/go/auth v0.13.0/go.mod h1:COOjD9gwfKNKz+IIduatIhYJQIc0mG3H102r/EMxX6Q=\ncloud.google.com/go/auth/oauth2adapt v0.2.6 h1:V6a6XDu2lTwPZWOawrAa9HUK+DB2zfJyTuciBG5hFkU=\ncloud.google.com/go/auth/oauth2adapt v0.2.6/go.mod h1:AlmsELtlEBnaNTL7jCj8VQFLy6mbZv0s4Q7NGBeQ5E8=\ncloud.google.com/go/compute/metadata v0.6.0 h1:A6hENjEsCDtC1k8byVsgwvVcioamEHvZ4j01OwKxG9I=\ncloud.google.com/go/compute/metadata v0.6.0/go.mod h1:FjyFAW1MW0C203CEOMDTu3Dk1FlqW3Rga40jzHL4hfg=\ncode.gitea.io/sdk/gitea v0.19.0 h1:8I6s1s4RHgzxiPHhOQdgim1RWIRcr0LVMbHBjBFXq4Y=\ncode.gitea.io/sdk/gitea v0.19.0/go.mod h1:IG9xZJoltDNeDSW0qiF2Vqx5orMWa7OhVWrjvrd5NpI=\ngithub.com/TwiN/deepmerge v0.2.2 h1:FUG9QMIYg/j2aQyPPhA3XTFJwXSNHI/swaR4Lbyxwg4=\ngithub.com/TwiN/deepmerge v0.2.2/go.mod h1:4OHvjV3pPNJCJZBHswYAwk6rxiD8h8YZ+9cPo7nu4oI=\ngithub.com/TwiN/g8/v2 v2.0.0 h1:+hwIbRLMhDd2iwHzkZUPp2FkX7yTx8ddYOnS91HkDqQ=\ngithub.com/TwiN/g8/v2 v2.0.0/go.mod h1:4sVAF27q8T8ISggRa/Fb0drw7wpB22B6eWd+/+SGMqE=\ngithub.com/TwiN/gocache/v2 v2.2.2 h1:4HToPfDV8FSbaYO5kkbhLpEllUYse5rAf+hVU/mSsuI=\ngithub.com/TwiN/gocache/v2 v2.2.2/go.mod h1:WfIuwd7GR82/7EfQqEtmLFC3a2vqaKbs4Pe6neB7Gyc=\ngithub.com/TwiN/health v1.6.0 h1:L2ks575JhRgQqWWOfKjw9B0ec172hx7GdToqkYUycQM=\ngithub.com/TwiN/health v1.6.0/go.mod h1:Z6TszwQPMvtSiVx1QMidVRgvVr4KZGfiwqcD7/Z+3iw=\ngithub.com/TwiN/logr v0.3.1 h1:CfTKA83jUmsAoxqrr3p4JxEkqXOBnEE9/f35L5MODy4=\ngithub.com/TwiN/logr v0.3.1/go.mod h1:BZgZFYq6fQdU3KtR8qYato3zUEw53yQDaIuujHb55Jw=\ngithub.com/TwiN/whois v1.1.9 h1:m20+m1CXnrstie+tW2ZmAJkfcT9zgwpVRUFsKeMw+ng=\ngithub.com/TwiN/whois v1.1.9/go.mod h1:TjipCMpJRAJYKmtz/rXQBU6UGxMh6bk8SHazu7OMnQE=\ngithub.com/andybalholm/brotli v1.1.1 h1:PR2pgnyFznKEugtsUo0xLdDop5SKXd5Qf5ysW+7XdTA=\ngithub.com/andybalholm/brotli v1.1.1/go.mod h1:05ib4cKhjx3OQYUY22hTVd34Bc8upXjOLL2rKwwZBoA=\ngithub.com/aws/aws-sdk-go v1.55.5 h1:KKUZBfBoyqy5d3swXyiC7Q76ic40rYcbqH7qjh59kzU=\ngithub.com/aws/aws-sdk-go v1.55.5/go.mod h1:eRwEWoyTWFMVYVQzKMNHWP5/RV4xIUGMQfXQHfHkpNU=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/coreos/go-oidc/v3 v3.11.0 h1:Ia3MxdwpSw702YW0xgfmP1GVCMA9aEFWu12XUZ3/OtI=\ngithub.com/coreos/go-oidc/v3 v3.11.0/go.mod h1:gE3LgjOgFoHi9a4ce4/tJczr0Ai2/BoDhf0r5lltWI0=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davidmz/go-pageant v1.0.2 h1:bPblRCh5jGU+Uptpz6LgMZGD5hJoOt7otgT454WvHn0=\ngithub.com/davidmz/go-pageant v1.0.2/go.mod h1:P2EDDnMqIwG5Rrp05dTRITj9z2zpGcD9efWSkTNKLIE=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/go-fed/httpsig v1.1.0 h1:9M+hb0jkEICD8/cAiNqEB66R87tTINszBRTjwjQzWcI=\ngithub.com/go-fed/httpsig v1.1.0/go.mod h1:RCMrTZvN1bJYtofsG4rd5NaO5obxQ5xBkdiS7xsT7bM=\ngithub.com/go-jose/go-jose/v4 v4.0.2 h1:R3l3kkBds16bO7ZFAEEcofK0MkrAJt3jlJznWZG0nvk=\ngithub.com/go-jose/go-jose/v4 v4.0.2/go.mod h1:WVf9LFMHh/QVrmqrOfqun0C45tMe3RoiKJMPvgWwLfY=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/gofiber/fiber/v2 v2.52.5 h1:tWoP1MJQjGEe4GB5TUGOi7P2E0ZMMRx5ZTG4rT+yGMo=\ngithub.com/gofiber/fiber/v2 v2.52.5/go.mod h1:KEOE+cXMhXG0zHc9d8+E38hoX+ZN7bhOtgeF2oT6jrQ=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0 h1:DACJavvAHhabrF08vX0COfcOBJRhZ8lUbR+ZWIs0Y5g=\ngithub.com/golang/freetype v0.0.0-20170609003504-e2365dfdc4a0/go.mod h1:E/TSTwGwJL78qG/PmXZO1EjYhfJinVAhrmmHX6Z8B9k=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github/v48 v48.2.0 h1:68puzySE6WqUY9KWmpOsDEQfDZsso98rT6pZcz9HqcE=\ngithub.com/google/go-github/v48 v48.2.0/go.mod h1:dDlehKBDo850ZPvCTK0sEqTCVWcrGl2LcDiajkYi89Y=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngithub.com/google/pprof v0.0.0-20240409012703-83162a5b38cd h1:gbpYu9NMq8jhDVbvlGkMFWCjLFlqqEZjEmObmhUy6Vo=\ngithub.com/google/pprof v0.0.0-20240409012703-83162a5b38cd/go.mod h1:kf6iHlnVGwgKolg33glAes7Yg/8iWP8ukqeldJSO7jw=\ngithub.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=\ngithub.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=\ngithub.com/googleapis/gax-go/v2 v2.14.0 h1:f+jMrjBPl+DL9nI4IQzLUxMq7XrAqFYB7hBPqMNIe8o=\ngithub.com/googleapis/gax-go/v2 v2.14.0/go.mod h1:lhBCnjdLrWRaPvLWhmc8IS24m9mr07qSYnHncrgo+zk=\ngithub.com/hashicorp/go-version v1.6.0 h1:feTTfFNnjP967rlCxM/I9g701jU+RN74YKx2mOkIeek=\ngithub.com/hashicorp/go-version v1.6.0/go.mod h1:fltr4n8CU8Ke44wwGCBoEymUuxUHl09ZGVZPK5anwXA=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/ishidawataru/sctp v0.0.0-20230406120618-7ff4192f6ff2 h1:i2fYnDurfLlJH8AyyMOnkLHnHeP8Ff/DDpuZA/D3bPo=\ngithub.com/ishidawataru/sctp v0.0.0-20230406120618-7ff4192f6ff2/go.mod h1:co9pwDoBCm1kGxawmb4sPq0cSIOOWNPT4KnHotMP1Zg=\ngithub.com/jmespath/go-jmespath v0.4.0 h1:BEgLn5cpjn8UN1mAw4NjwDrS35OdebyEtFe+9YPoQUg=\ngithub.com/jmespath/go-jmespath v0.4.0/go.mod h1:T8mJZnbsbmF+m6zOOFylbeCJqk5+pHWvzYPziyZiYoo=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1 h1:shLQSRRSCCPj3f2gpwzGwWFoC7ycTf1rcQZHOlsJ6N8=\ngithub.com/jmespath/go-jmespath/internal/testify v1.5.1/go.mod h1:L3OGu8Wl2/fWfCI6z80xFu9LTZmf1ZRjMHUOPmWr69U=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lib/pq v1.10.9 h1:YXG7RB+JIjhP29X+OtkiDnYaXQwpS4JEWq7dtCCRUEw=\ngithub.com/lib/pq v1.10.9/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/ncruces/go-strftime v0.1.9 h1:bY0MQC28UADQmHmaF5dgpLmImcShSi2kHU9XLdhx/f4=\ngithub.com/ncruces/go-strftime v0.1.9/go.mod h1:Fwc5htZGVVkseilnfgOVb9mKy6w1naJmn9CehxcKcls=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus-community/pro-bing v0.4.0 h1:YMbv+i08gQz97OZZBwLyvmmQEEzyfyrrjEaAchdy3R4=\ngithub.com/prometheus-community/pro-bing v0.4.0/go.mod h1:b7wRYZtCcPmt4Sz319BykUU241rWLe1VFXyiyWK/dH4=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec h1:W09IVJc94icq4NjY3clb7Lk8O1qJ8BdBEF8z0ibU0rE=\ngithub.com/remyoudompheng/bigfft v0.0.0-20230129092748-24d4a6f8daec/go.mod h1:qqbHyh8v60DhA7CoWK5oRCqLrMHRGoxYCSS9EjAz6Eo=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/valyala/bytebufferpool v1.0.0 h1:GqA5TC/0021Y/b9FG4Oi9Mr3q7XYx6KllzawFIhcdPw=\ngithub.com/valyala/bytebufferpool v1.0.0/go.mod h1:6bBcMArwyJ5K/AmCkWv1jt77kVWyCJ6HpOuEn7z0Csc=\ngithub.com/valyala/fasthttp v1.58.0 h1:GGB2dWxSbEprU9j0iMJHgdKYJVDyjrOwF9RE59PbRuE=\ngithub.com/valyala/fasthttp v1.58.0/go.mod h1:SYXvHHaFp7QZHGKSHmoMipInhrI5StHrhDTYVEjK/Kw=\ngithub.com/valyala/tcplisten v1.0.0 h1:rBHj/Xf+E1tRGZyWIWwJDiRY0zc1Js+CV5DqwacVSA8=\ngithub.com/valyala/tcplisten v1.0.0/go.mod h1:T0xQ8SeCZGxckz9qRXTfG43PvQ/mcWh7FwZEA7Ioqkc=\ngithub.com/wcharczuk/go-chart/v2 v2.1.2 h1:Y17/oYNuXwZg6TFag06qe8sBajwwsuvPiJJXcUcLL6E=\ngithub.com/wcharczuk/go-chart/v2 v2.1.2/go.mod h1:Zi4hbaqlWpYajnXB2K22IUYVXRXaLfSGNNR7P4ukyyQ=\ngithub.com/xyproto/randomstring v1.0.5 h1:YtlWPoRdgMu3NZtP45drfy1GKoojuR7hmRcnhZqKjWU=\ngithub.com/xyproto/randomstring v1.0.5/go.mod h1:rgmS5DeNXLivK7YprL0pY+lTuhNQW3iGxZ18UQApw/E=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0 h1:TT4fX+nBOA/+LUkobKGW1ydGcn+G3vRw9+g5HwCphpk=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.54.0/go.mod h1:L7UH0GbB0p47T4Rri3uHjbpCFYrVrwc1I25QhNPiGK8=\ngo.opentelemetry.io/otel v1.29.0 h1:PdomN/Al4q/lN6iBJEN3AwPvUiHPMlt93c8bqTG5Llw=\ngo.opentelemetry.io/otel v1.29.0/go.mod h1:N/WtXPs1CNCUEx+Agz5uouwCba+i+bJGFicT8SR4NP8=\ngo.opentelemetry.io/otel/metric v1.29.0 h1:vPf/HFWTNkPu1aYeIsc98l4ktOQaL6LeSoeV2g+8YLc=\ngo.opentelemetry.io/otel/metric v1.29.0/go.mod h1:auu/QWieFVWx+DmQOUMgj0F8LHWdgalxXqvp7BII/W8=\ngo.opentelemetry.io/otel/trace v1.29.0 h1:J/8ZNK4XgR7a21DZUAsbF8pZ5Jcw1VhACmnYt39JTi4=\ngo.opentelemetry.io/otel/trace v1.29.0/go.mod h1:eHl3w0sp3paPkYstJOmAimxhiFXPg+MMTlEh3nsQgWQ=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210513164829-c07d793c2f9a/go.mod h1:P+XmwS30IXTQdn5tA2iutPOUgjI07+tq3H3K9MVA1s8=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=\ngolang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=\ngolang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/image v0.18.0 h1:jGzIakQa/ZXI1I0Fxvaa9W7yP25TqT6cHIHn+6CqvSQ=\ngolang.org/x/image v0.18.0/go.mod h1:4yyo5vMFQjVjUcVk4jEQcU9MGy/rulF5WvUILseCM2E=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/mod v0.18.0 h1:5+9lSbEzPSdWkH32vYPBwEpX8KwDbM52Ud9xBUvNlb0=\ngolang.org/x/mod v0.18.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=\ngolang.org/x/net v0.33.0 h1:74SYHlV8BIgHIFC/LrYkOGIwL19eTYXQ5wc6TBuO36I=\ngolang.org/x/net v0.33.0/go.mod h1:HXLR5J+9DxmrqMwG9qjGCxZ+zKXxBru04zlTvWlWuN4=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=\ngolang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.8.0 h1:9i3RxcPv3PZnitoVGMPDKZSq1xW1gK1Xy3ArNOGZfEg=\ngolang.org/x/time v0.8.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=\ngolang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=\ngolang.org/x/tools v0.22.0 h1:gqSGLZqv+AI9lIQzniJ0nZDRG5GBPsSi+DRNHWNz6yA=\ngolang.org/x/tools v0.22.0/go.mod h1:aCwcsjqvq7Yqt6TNyX7QMU2enbQ/Gt0bo6krSeEri+c=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.214.0 h1:h2Gkq07OYi6kusGOaT/9rnNljuXmqPnaig7WGPmKbwA=\ngoogle.golang.org/api v0.214.0/go.mod h1:bYPpLG8AyeMWwDU6NXoB00xC0DFkikVvd5MfwoxjLqE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576 h1:8ZmaLZE4XWrtU3MyClkYqqtl6Oegr3235h7jxsDyqCY=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241209162323-e6fa225c2576/go.mod h1:5uTbfoYQed2U9p3KIj2/Zzm02PYhndfdmML0qC3q3FU=\ngoogle.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=\ngoogle.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=\ngoogle.golang.org/protobuf v1.35.2 h1:8Ar7bF+apOIoThw1EdZl0p1oWvMqTHmpA2fRTyZO8io=\ngoogle.golang.org/protobuf v1.35.2/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc h1:2gGKlE2+asNV9m7xrywl36YYNnBG5ZQ0r/BOOxqPpmk=\ngopkg.in/alexcesaro/quotedprintable.v3 v3.0.0-20150716171945-2caba252f4dc/go.mod h1:m7x9LTH6d71AHyAX77c9yqWCCa3UKHcVEj9y7hAtKDk=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/mail.v2 v2.3.1 h1:WYFn/oANrAGP2C0dcV6/pbkPzv8yGzqTjPmTeO7qoXk=\ngopkg.in/mail.v2 v2.3.1/go.mod h1:htwXN1Qh09vZJ1NVKxQqHPBaCBbzKhp5GzuJEA4VJWw=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nmodernc.org/cc/v4 v4.21.4 h1:3Be/Rdo1fpr8GrQ7IVw9OHtplU4gWbb+wNgeoBMmGLQ=\nmodernc.org/cc/v4 v4.21.4/go.mod h1:HM7VJTZbUCR3rV8EYBi9wxnJ0ZBRiGE5OeGXNA0IsLQ=\nmodernc.org/ccgo/v4 v4.19.2 h1:lwQZgvboKD0jBwdaeVCTouxhxAyN6iawF3STraAal8Y=\nmodernc.org/ccgo/v4 v4.19.2/go.mod h1:ysS3mxiMV38XGRTTcgo0DQTeTmAO4oCmJl1nX9VFI3s=\nmodernc.org/fileutil v1.3.0 h1:gQ5SIzK3H9kdfai/5x41oQiKValumqNTDXMvKo62HvE=\nmodernc.org/fileutil v1.3.0/go.mod h1:XatxS8fZi3pS8/hKG2GH/ArUogfxjpEKs3Ku3aK4JyQ=\nmodernc.org/gc/v2 v2.4.1 h1:9cNzOqPyMJBvrUipmynX0ZohMhcxPtMccYgGOJdOiBw=\nmodernc.org/gc/v2 v2.4.1/go.mod h1:wzN5dK1AzVGoH6XOzc3YZ+ey/jPgYHLuVckd62P0GYU=\nmodernc.org/gc/v3 v3.0.0-20240304020402-f0dba7c97c2b h1:BnN1t+pb1cy61zbvSUV7SeI0PwosMhlAEi/vBY4qxp8=\nmodernc.org/gc/v3 v3.0.0-20240304020402-f0dba7c97c2b/go.mod h1:Qz0X07sNOR1jWYCrJMEnbW/X55x206Q7Vt4mz6/wHp4=\nmodernc.org/libc v1.55.3 h1:AzcW1mhlPNrRtjS5sS+eW2ISCgSOLLNyFzRh/V3Qj/U=\nmodernc.org/libc v1.55.3/go.mod h1:qFXepLhz+JjFThQ4kzwzOjA/y/artDeg+pcYnY+Q83w=\nmodernc.org/mathutil v1.6.0 h1:fRe9+AmYlaej+64JsEEhoWuAYBkOtQiMEU7n/XgfYi4=\nmodernc.org/mathutil v1.6.0/go.mod h1:Ui5Q9q1TR2gFm0AQRqQUaBWFLAhQpCwNcuhBOSedWPo=\nmodernc.org/memory v1.8.0 h1:IqGTL6eFMaDZZhEWwcREgeMXYwmW83LYW8cROZYkg+E=\nmodernc.org/memory v1.8.0/go.mod h1:XPZ936zp5OMKGWPqbD3JShgd/ZoQ7899TUuQqxY+peU=\nmodernc.org/opt v0.1.3 h1:3XOZf2yznlhC+ibLltsDGzABUGVx8J6pnFMS3E4dcq4=\nmodernc.org/opt v0.1.3/go.mod h1:WdSiB5evDcignE70guQKxYUl14mgWtbClRi5wmkkTX0=\nmodernc.org/sortutil v1.2.0 h1:jQiD3PfS2REGJNzNCMMaLSp/wdMNieTbKX920Cqdgqc=\nmodernc.org/sortutil v1.2.0/go.mod h1:TKU2s7kJMf1AE84OoiGppNHJwvB753OYfNl2WRb++Ss=\nmodernc.org/sqlite v1.34.4 h1:sjdARozcL5KJBvYQvLlZEmctRgW9xqIZc2ncN7PU0P8=\nmodernc.org/sqlite v1.34.4/go.mod h1:3QQFCG2SEMtc2nv+Wq4cQCH7Hjcg+p/RMlS1XK+zwbk=\nmodernc.org/strutil v1.2.0 h1:agBi9dp1I+eOnxXeiZawM8F4LawKv4NzGWSaLfyeNZA=\nmodernc.org/strutil v1.2.0/go.mod h1:/mdcBmfOibveCTBxUl5B5l6W+TTH1FXPLHZE6bTosX0=\nmodernc.org/token v1.1.0 h1:Xl7Ap9dKaEs5kLoOQeQmPWevfnk/DM5qcLcYlA8ys6Y=\nmodernc.org/token v1.1.0/go.mod h1:UGzOrNV1mAFSEB63lOFHIpNRUVMvYTc6yu1SMY/XTDM=\n"
        },
        {
          "name": "jsonpath",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 6.8779296875,
          "content": "package main\n\nimport (\n\t\"os\"\n\t\"os/signal\"\n\t\"strconv\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/TwiN/gatus/v5/config\"\n\t\"github.com/TwiN/gatus/v5/controller\"\n\t\"github.com/TwiN/gatus/v5/storage/store\"\n\t\"github.com/TwiN/gatus/v5/watchdog\"\n\t\"github.com/TwiN/logr\"\n)\n\nconst (\n\tGatusConfigPathEnvVar = \"GATUS_CONFIG_PATH\"\n\tGatusConfigFileEnvVar = \"GATUS_CONFIG_FILE\" // Deprecated in favor of GatusConfigPathEnvVar\n\tGatusLogLevelEnvVar   = \"GATUS_LOG_LEVEL\"\n)\n\nfunc main() {\n\tif delayInSeconds, _ := strconv.Atoi(os.Getenv(\"GATUS_DELAY_START_SECONDS\")); delayInSeconds > 0 {\n\t\tlogr.Infof(\"Delaying start by %d seconds\", delayInSeconds)\n\t\ttime.Sleep(time.Duration(delayInSeconds) * time.Second)\n\t}\n\tconfigureLogging()\n\tcfg, err := loadConfiguration()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tinitializeStorage(cfg)\n\tstart(cfg)\n\t// Wait for termination signal\n\tsignalChannel := make(chan os.Signal, 1)\n\tdone := make(chan bool, 1)\n\tsignal.Notify(signalChannel, os.Interrupt, syscall.SIGTERM)\n\tgo func() {\n\t\t<-signalChannel\n\t\tlogr.Info(\"Received termination signal, attempting to gracefully shut down\")\n\t\tstop(cfg)\n\t\tsave()\n\t\tdone <- true\n\t}()\n\t<-done\n\tlogr.Info(\"Shutting down\")\n}\n\nfunc start(cfg *config.Config) {\n\tgo controller.Handle(cfg)\n\twatchdog.Monitor(cfg)\n\tgo listenToConfigurationFileChanges(cfg)\n}\n\nfunc stop(cfg *config.Config) {\n\twatchdog.Shutdown(cfg)\n\tcontroller.Shutdown()\n}\n\nfunc save() {\n\tif err := store.Get().Save(); err != nil {\n\t\tlogr.Errorf(\"Failed to save storage provider: %s\", err.Error())\n\t}\n}\n\nfunc configureLogging() {\n\tlogLevelAsString := os.Getenv(GatusLogLevelEnvVar)\n\tif logLevel, err := logr.LevelFromString(logLevelAsString); err != nil {\n\t\tlogr.SetThreshold(logr.LevelInfo)\n\t\tif len(logLevelAsString) == 0 {\n\t\t\tlogr.Infof(\"[main.configureLogging] Defaulting log level to %s\", logr.LevelInfo)\n\t\t} else {\n\t\t\tlogr.Warnf(\"[main.configureLogging] Invalid log level '%s', defaulting to %s\", logLevelAsString, logr.LevelInfo)\n\t\t}\n\t} else {\n\t\tlogr.SetThreshold(logLevel)\n\t\tlogr.Infof(\"[main.configureLogging] Log Level is set to %s\", logr.GetThreshold())\n\t}\n}\n\nfunc loadConfiguration() (*config.Config, error) {\n\tconfigPath := os.Getenv(GatusConfigPathEnvVar)\n\t// Backwards compatibility\n\tif len(configPath) == 0 {\n\t\tif configPath = os.Getenv(GatusConfigFileEnvVar); len(configPath) > 0 {\n\t\t\tlogr.Warnf(\"WARNING: %s is deprecated. Please use %s instead.\", GatusConfigFileEnvVar, GatusConfigPathEnvVar)\n\t\t}\n\t}\n\treturn config.LoadConfiguration(configPath)\n}\n\n// initializeStorage initializes the storage provider\n//\n// Q: \"TwiN, why are you putting this here? Wouldn't it make more sense to have this in the config?!\"\n// A: Yes. Yes it would make more sense to have it in the config package. But I don't want to import\n// the massive SQL dependencies just because I want to import the config, so here we are.\nfunc initializeStorage(cfg *config.Config) {\n\terr := store.Initialize(cfg.Storage)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t// Remove all EndpointStatus that represent endpoints which no longer exist in the configuration\n\tvar keys []string\n\tfor _, ep := range cfg.Endpoints {\n\t\tkeys = append(keys, ep.Key())\n\t}\n\tfor _, ee := range cfg.ExternalEndpoints {\n\t\tkeys = append(keys, ee.Key())\n\t}\n\tnumberOfEndpointStatusesDeleted := store.Get().DeleteAllEndpointStatusesNotInKeys(keys)\n\tif numberOfEndpointStatusesDeleted > 0 {\n\t\tlogr.Infof(\"[main.initializeStorage] Deleted %d endpoint statuses because their matching endpoints no longer existed\", numberOfEndpointStatusesDeleted)\n\t}\n\t// Clean up the triggered alerts from the storage provider and load valid triggered endpoint alerts\n\tnumberOfPersistedTriggeredAlertsLoaded := 0\n\tfor _, ep := range cfg.Endpoints {\n\t\tvar checksums []string\n\t\tfor _, alert := range ep.Alerts {\n\t\t\tif alert.IsEnabled() {\n\t\t\t\tchecksums = append(checksums, alert.Checksum())\n\t\t\t}\n\t\t}\n\t\tnumberOfTriggeredAlertsDeleted := store.Get().DeleteAllTriggeredAlertsNotInChecksumsByEndpoint(ep, checksums)\n\t\tif numberOfTriggeredAlertsDeleted > 0 {\n\t\t\tlogr.Debugf(\"[main.initializeStorage] Deleted %d triggered alerts for endpoint with key=%s because their configurations have been changed or deleted\", numberOfTriggeredAlertsDeleted, ep.Key())\n\t\t}\n\t\tfor _, alert := range ep.Alerts {\n\t\t\texists, resolveKey, numberOfSuccessesInARow, err := store.Get().GetTriggeredEndpointAlert(ep, alert)\n\t\t\tif err != nil {\n\t\t\t\tlogr.Errorf(\"[main.initializeStorage] Failed to get triggered alert for endpoint with key=%s: %s\", ep.Key(), err.Error())\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif exists {\n\t\t\t\talert.Triggered, alert.ResolveKey = true, resolveKey\n\t\t\t\tep.NumberOfSuccessesInARow, ep.NumberOfFailuresInARow = numberOfSuccessesInARow, alert.FailureThreshold\n\t\t\t\tnumberOfPersistedTriggeredAlertsLoaded++\n\t\t\t}\n\t\t}\n\t}\n\tfor _, ee := range cfg.ExternalEndpoints {\n\t\tvar checksums []string\n\t\tfor _, alert := range ee.Alerts {\n\t\t\tif alert.IsEnabled() {\n\t\t\t\tchecksums = append(checksums, alert.Checksum())\n\t\t\t}\n\t\t}\n\t\tconvertedEndpoint := ee.ToEndpoint()\n\t\tnumberOfTriggeredAlertsDeleted := store.Get().DeleteAllTriggeredAlertsNotInChecksumsByEndpoint(convertedEndpoint, checksums)\n\t\tif numberOfTriggeredAlertsDeleted > 0 {\n\t\t\tlogr.Debugf(\"[main.initializeStorage] Deleted %d triggered alerts for endpoint with key=%s because their configurations have been changed or deleted\", numberOfTriggeredAlertsDeleted, ee.Key())\n\t\t}\n\t\tfor _, alert := range ee.Alerts {\n\t\t\texists, resolveKey, numberOfSuccessesInARow, err := store.Get().GetTriggeredEndpointAlert(convertedEndpoint, alert)\n\t\t\tif err != nil {\n\t\t\t\tlogr.Errorf(\"[main.initializeStorage] Failed to get triggered alert for endpoint with key=%s: %s\", ee.Key(), err.Error())\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif exists {\n\t\t\t\talert.Triggered, alert.ResolveKey = true, resolveKey\n\t\t\t\tee.NumberOfSuccessesInARow, ee.NumberOfFailuresInARow = numberOfSuccessesInARow, alert.FailureThreshold\n\t\t\t\tnumberOfPersistedTriggeredAlertsLoaded++\n\t\t\t}\n\t\t}\n\t}\n\tif numberOfPersistedTriggeredAlertsLoaded > 0 {\n\t\tlogr.Infof(\"[main.initializeStorage] Loaded %d persisted triggered alerts\", numberOfPersistedTriggeredAlertsLoaded)\n\t}\n}\n\nfunc listenToConfigurationFileChanges(cfg *config.Config) {\n\tfor {\n\t\ttime.Sleep(30 * time.Second)\n\t\tif cfg.HasLoadedConfigurationBeenModified() {\n\t\t\tlogr.Info(\"[main.listenToConfigurationFileChanges] Configuration file has been modified\")\n\t\t\tstop(cfg)\n\t\t\ttime.Sleep(time.Second) // Wait a bit to make sure everything is done.\n\t\t\tsave()\n\t\t\tupdatedConfig, err := loadConfiguration()\n\t\t\tif err != nil {\n\t\t\t\tif cfg.SkipInvalidConfigUpdate {\n\t\t\t\t\tlogr.Errorf(\"[main.listenToConfigurationFileChanges] Failed to load new configuration: %s\", err.Error())\n\t\t\t\t\tlogr.Error(\"[main.listenToConfigurationFileChanges] The configuration file was updated, but it is not valid. The old configuration will continue being used.\")\n\t\t\t\t\t// Update the last file modification time to avoid trying to process the same invalid configuration again\n\t\t\t\t\tcfg.UpdateLastFileModTime()\n\t\t\t\t\tcontinue\n\t\t\t\t} else {\n\t\t\t\t\tpanic(err)\n\t\t\t\t}\n\t\t\t}\n\t\t\tstore.Get().Close()\n\t\t\tinitializeStorage(updatedConfig)\n\t\t\tstart(updatedConfig)\n\t\t\treturn\n\t\t}\n\t}\n}\n"
        },
        {
          "name": "metrics",
          "type": "tree",
          "content": null
        },
        {
          "name": "pattern",
          "type": "tree",
          "content": null
        },
        {
          "name": "security",
          "type": "tree",
          "content": null
        },
        {
          "name": "storage",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "watchdog",
          "type": "tree",
          "content": null
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}