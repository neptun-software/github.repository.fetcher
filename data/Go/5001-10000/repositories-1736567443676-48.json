{
  "metadata": {
    "timestamp": 1736567443676,
    "page": 48,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "johnkerl/miller",
      "stars": 9096,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".all-contributorsrc",
          "type": "blob",
          "size": 10.240234375,
          "content": "{\n  \"projectName\": \"miller\",\n  \"projectOwner\": \"johnkerl\",\n  \"repoType\": \"github\",\n  \"repoHost\": \"https://github.com\",\n  \"files\": [\n    \"README.md\"\n  ],\n  \"imageSize\": 50,\n  \"commit\": true,\n  \"commitConvention\": \"none\",\n  \"contributors\": [\n    {\n      \"login\": \"aborruso\",\n      \"name\": \"Andrea Borruso\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/30607?v=4\",\n      \"profile\": \"https://github.com/aborruso\",\n      \"contributions\": [\n        \"ideas\",\n        \"design\"\n      ]\n    },\n    {\n      \"login\": \"sjackman\",\n      \"name\": \"Shaun Jackman\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/291551?v=4\",\n      \"profile\": \"https://sjackman.ca/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"ftrotter\",\n      \"name\": \"Fred Trotter\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/83133?v=4\",\n      \"profile\": \"http://www.fredtrotter.com/\",\n      \"contributions\": [\n        \"ideas\",\n        \"design\"\n      ]\n    },\n    {\n      \"login\": \"Komosa\",\n      \"name\": \"komosa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/10688154?v=4\",\n      \"profile\": \"https://github.com/Komosa\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"jungle-boogie\",\n      \"name\": \"jungle-boogie\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1111743?v=4\",\n      \"profile\": \"https://github.com/jungle-boogie\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"0-wiz-0\",\n      \"name\": \"Thomas Klausner\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2221844?v=4\",\n      \"profile\": \"https://github.com/0-wiz-0\",\n      \"contributions\": [\n        \"infra\"\n      ]\n    },\n    {\n      \"login\": \"skitt\",\n      \"name\": \"Stephen Kitt\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2128935?v=4\",\n      \"profile\": \"https://github.com/skitt\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"leahneukirchen\",\n      \"name\": \"Leah Neukirchen\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/139?v=4\",\n      \"profile\": \"http://leahneukirchen.org/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"lgbaldoni\",\n      \"name\": \"Luigi Baldoni\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1450716?v=4\",\n      \"profile\": \"https://github.com/lgbaldoni\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"yutannihilation\",\n      \"name\": \"Hiroaki Yutani\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1978793?v=4\",\n      \"profile\": \"https://yutani.rbind.io/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"dmd\",\n      \"name\": \"Daniel M. Drucker\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/41439?v=4\",\n      \"profile\": \"https://3e.org/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"NikosAlexandris\",\n      \"name\": \"Nikos Alexandris\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/7046639?v=4\",\n      \"profile\": \"https://github.com/NikosAlexandris\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"kundeng\",\n      \"name\": \"kundeng\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/89032?v=4\",\n      \"profile\": \"https://github.com/kundeng\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"singalen\",\n      \"name\": \"Victor Sergienko\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/151199?v=4\",\n      \"profile\": \"http://victorsergienko.com/\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"gromgit\",\n      \"name\": \"Adrian Ho\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/215702?v=4\",\n      \"profile\": \"https://github.com/gromgit\",\n      \"contributions\": [\n        \"design\"\n      ]\n    },\n    {\n      \"login\": \"Zachp\",\n      \"name\": \"zachp\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1316442?v=4\",\n      \"profile\": \"https://github.com/Zachp\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"davidselassie\",\n      \"name\": \"David Selassie\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/921669?v=4\",\n      \"profile\": \"https://dsel.net/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"joelparkerhenderson\",\n      \"name\": \"Joel Parker Henderson\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/27145?v=4\",\n      \"profile\": \"http://www.joelparkerhenderson.com/\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"divtiply\",\n      \"name\": \"Michel Ace\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/5359679?v=4\",\n      \"profile\": \"https://github.com/divtiply\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"Fuco1\",\n      \"name\": \"Matus Goljer\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2664959?v=4\",\n      \"profile\": \"http://fuco1.github.io/sitemap.html\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"terorie\",\n      \"name\": \"Richard Patel\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/21371810?v=4\",\n      \"profile\": \"https://github.com/terorie\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"kub1x\",\n      \"name\": \"Jakub Podlaha\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1833840?v=4\",\n      \"profile\": \"https://blog.kub1x.org/\",\n      \"contributions\": [\n        \"design\"\n      ]\n    },\n    {\n      \"login\": \"majkinetor\",\n      \"name\": \"Miodrag Milić\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/85767?v=4\",\n      \"profile\": \"https://goo.gl/ZGZynx\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"derekmahar\",\n      \"name\": \"Derek Mahar\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/6047?v=4\",\n      \"profile\": \"https://github.com/derekmahar\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"spmundi\",\n      \"name\": \"spmundi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/38196185?v=4\",\n      \"profile\": \"https://github.com/spmundi\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"koernepr\",\n      \"name\": \"Peter Körner\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/24551942?v=4\",\n      \"profile\": \"https://github.com/koernepr\",\n      \"contributions\": [\n        \"security\"\n      ]\n    },\n    {\n      \"login\": \"rubyFeedback\",\n      \"name\": \"rubyFeedback\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/46686565?v=4\",\n      \"profile\": \"https://github.com/rubyFeedback\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"rbolsius\",\n      \"name\": \"rbolsius\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2106964?v=4\",\n      \"profile\": \"https://github.com/rbolsius\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"awildturtok\",\n      \"name\": \"awildturtok\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1553491?v=4\",\n      \"profile\": \"https://github.com/awildturtok\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"agguser\",\n      \"name\": \"agguser\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1206106?v=4\",\n      \"profile\": \"https://github.com/agguser\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"jganong\",\n      \"name\": \"jganong\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2783890?v=4\",\n      \"profile\": \"https://github.com/jganong\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"trantor\",\n      \"name\": \"Fulvio Scapin\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/69568?v=4\",\n      \"profile\": \"https://www.linkedin.com/in/fulvio-scapin\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"torbiak\",\n      \"name\": \"Jordan Torbiak\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/109347?v=4\",\n      \"profile\": \"https://github.com/torbiak\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"Andy1978\",\n      \"name\": \"Andreas Weber\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/240064?v=4\",\n      \"profile\": \"https://github.com/Andy1978\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"vapniks\",\n      \"name\": \"vapniks\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/174330?v=4\",\n      \"profile\": \"https://github.com/vapniks\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"89z\",\n      \"name\": \"Zombo\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/73562167?v=4\",\n      \"profile\": \"https://github.com/89z\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"BEFH\",\n      \"name\": \"Brian Fulton-Howard\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/3386600?v=4\",\n      \"profile\": \"https://github.com/BEFH\",\n      \"contributions\": [\n        \"platform\"\n      ]\n    },\n    {\n      \"login\": \"ChCyrill\",\n      \"name\": \"ChCyrill\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/2165604?v=4\",\n      \"profile\": \"https://github.com/ChCyrill\",\n      \"contributions\": [\n        \"ideas\"\n      ]\n    },\n    {\n      \"login\": \"jauderho\",\n      \"name\": \"Jauder Ho\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/13562?v=4\",\n      \"profile\": \"https://github.com/jauderho\",\n      \"contributions\": [\n        \"code\"\n      ]\n    },\n    {\n      \"login\": \"psacawa\",\n      \"name\": \"Paweł Sacawa\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/21274063?v=4\",\n      \"profile\": \"https://github.com/psacawa\",\n      \"contributions\": [\n        \"bug\"\n      ]\n    },\n    {\n      \"login\": \"schragge\",\n      \"name\": \"schragge\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/4294278?v=4\",\n      \"profile\": \"https://github.com/schragge\",\n      \"contributions\": [\n        \"doc\"\n      ]\n    },\n    {\n      \"login\": \"Poshi\",\n      \"name\": \"Jordi\",\n      \"avatar_url\": \"https://avatars.githubusercontent.com/u/1780510?v=4\",\n      \"profile\": \"https://github.com/Poshi\",\n      \"contributions\": [\n        \"doc\",\n        \"ideas\"\n      ]\n    }\n  ],\n  \"contributorsPerLine\": 7,\n  \"skipCi\": true\n}\n"
        },
        {
          "name": ".codespellignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": "denom\ninTerm\ninout\niput\nnd\nnin\nnumer\nWit\nte\nwee\nRO\nfalsy\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.4111328125,
          "content": "# Autodetect text files and perform LF normalization\n\n.gitattributes text eol=lf\nsetup text eol=lf\n\nout binary\n\n*.txt text eol=lf\n*.html text eol=lf\n\n*.c text eol=lf\n*.h text eol=lf\n*.sh text eol=lf\n*.rb text eol=lf\n\n*.csv text eol=lf\n*.dat text eol=lf\n*.dkvp text eol=lf\n*.json text eol=lf\n*.nidx text eol=lf\n*.pprint text eol=lf\n*.tsv text eol=lf\n\n*.csv-crlf binary\n*.pprint-crlf binary\n*.dkvp-crlf binary\n*.bin binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.12890625,
          "content": "/mlr\n\n.sw?\n.*.sw?\ntags\n*~\npush2\ndata/.gitignore\n\nman/man1\n\ndata/big.*\ndata/nmc?.*\n\ndocs/src/polyglot-dkvp-io/__pycache__\ndocs/site/\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.8037109375,
          "content": "# .goreleaser.yml\nrelease:\n  github:\n    owner: johnkerl\n    name: miller\n\nsnapshot:\n  name_template: SNAPSHOT-{{ .Commit }}\n\n#gomod:\n#  proxy: true\n\nbefore:\n  hooks:\n    - go mod tidy\n\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n      - freebsd\n      - aix\n    goarch:\n      - 386\n      - amd64\n      - arm\n      - arm64\n      - s390x\n      - ppc64le\n      - ppc64\n      - riscv64\n    goarm:\n      - 6\n      - 7\n    ignore:\n      - goos: linux\n        goarch: ppc64\n      - goos: darwin\n        goarch: arm\n      - goos: darwin\n        goarch: ppc64le\n      - goos: darwin\n        goarch: s390x\n      - goos: windows\n        goarch: arm64\n      - goos: windows\n        goarch: arm\n      - goos: windows\n        goarch: ppc64le\n      - goos: windows\n        goarch: s390x\n      - goos: freebsd\n        goarch: arm\n      - goos: freebsd\n        goarch: s390x\n    dir: .\n    main: ./cmd/mlr\n    binary: mlr\n    flags:\n      - -trimpath\n    #ldflags:\n    #  - -s -w \n\narchives:\n  - format: tar.gz\n    wrap_in_directory: true\n    format_overrides:\n      - goos: windows\n        format: zip\n    name_template: '{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'\n    files:\n      - LICENSE.txt\n      - README.md\n\nnfpms:\n  -\n    id: miller-nfpms\n    package_name: miller\n    file_name_template: \"{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}\"\n    homepage: https://github.com/johnkerl/miller\n    maintainer: \"John Kerl <johnkerl@users.noreply.github.com>\"\n    description: Miller is like awk, sed, cut, join, and sort for data formats such as CSV, TSV, tabular JSON etc\n    license: BSD\n    formats:\n      - deb\n      - rpm\n\nchecksum:\n  algorithm: sha256\n  name_template: '{{ .ProjectName }}-{{ .Version }}-checksums.txt'\n"
        },
        {
          "name": ".readthedocs.yaml",
          "type": "blob",
          "size": 0.3759765625,
          "content": "# .readthedocs.yaml\n# Read the Docs configuration file\n# See https://docs.readthedocs.io/en/stable/config-file/v2.html for details\n\n# Required\nversion: 2\n\n# Set the version of Python and other tools you might need\nbuild:\n  os: ubuntu-20.04\n  tools:\n    python: \"3.8\"\n\npython:\n  install:\n    - requirements: docs/requirements.txt\n\nmkdocs:\n  configuration: docs/mkdocs.yml\n\nformats: all\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.341796875,
          "content": "map \\d :w<C-m>:!clear;echo Building ...; echo; make mlr<C-m>\nmap \\f :w<C-m>:!clear;echo Building ...; echo; make ut<C-m>\n\"map \\r :w<C-m>:!clear;echo Building ...; echo; make ut-scan ut-mlv<C-m>\nmap \\r :w<C-m>:!clear;echo Building ...; echo; make ut-lib<C-m>\nmap \\t :w<C-m>:!clear;go test github.com/johnkerl/miller/internal/pkg/transformers/...<C-m>\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.447265625,
          "content": "Copyright (c) 2015- John Kerl\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nThis software is provided by the copyright holders and contributors \"as is\" and\nany express or implied warranties, including, but not limited to, the implied\nwarranties of merchantability and fitness for a particular purpose are\ndisclaimed. In no event shall the copyright holder or contributors be liable\nfor any direct, indirect, incidental, special, exemplary, or consequential\ndamages (including, but not limited to, procurement of substitute goods or\nservices; loss of use, data, or profits; or business interruption) however\ncaused and on any theory of liability, whether in contract, strict liability,\nor tort (including negligence or otherwise) arising in any way out of the use\nof this software, even if advised of the possibility of such damage.\n\nI am providing code in this repository to you under an open-source license.\nBecause this is my personal repository, the license you receive to my code is\nfrom me and not from my employer.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.048828125,
          "content": "PREFIX=/usr/local\nINSTALLDIR=$(PREFIX)/bin\n\n# ================================================================\n# General-use targets\n\n# This must remain the first target in this file, which is what 'make' with no\n# arguments will run.\nbuild:\n\tgo build github.com/johnkerl/miller/v6/cmd/mlr\n\t@echo \"Build complete. The Miller executable is ./mlr (or .\\mlr.exe on Windows).\"\n\t@echo \"You can use 'make check' to run tests\".\n\nquiet:\n\t@go build github.com/johnkerl/miller/v6/cmd/mlr\n\n# For interactive use, 'mlr regtest' offers more options and transparency.\ncheck: unit-test regression-test\n\t@echo \"Tests complete. You can use 'make install' if you like, optionally preceded\"\n\t@echo \"by './configure --prefix=/your/install/path' if you wish to install to\"\n\t@echo \"somewhere other than /usr/local/bin -- the default prefix is /usr/local.\"\n\n# DESTDIR is for package installs; nominally blank when this is run interactively.\n# See also https://www.gnu.org/prep/standards/html_node/DESTDIR.html\ninstall: build\n\tmkdir -p $(DESTDIR)/$(INSTALLDIR)\n\tcp mlr $(DESTDIR)/$(INSTALLDIR)/\n\tmake -C man install\n\n# ================================================================\n# Dev targets\n\n# ----------------------------------------------------------------\n# Unit tests (small number)\nunit-test ut: build\n\tgo test github.com/johnkerl/miller/v6/pkg/...\n\nut-lib:build\n\tgo test github.com/johnkerl/miller/v6/pkg/lib...\nut-scan:build\n\tgo test github.com/johnkerl/miller/v6/pkg/scan/...\nut-mlv:build\n\tgo test github.com/johnkerl/miller/v6/pkg/mlrval/...\nut-bifs:build\n\tgo test github.com/johnkerl/miller/v6/pkg/bifs/...\nut-input:build\n\tgo test github.com/johnkerl/miller/v6/pkg/input/...\n\nbench:build\n\tgo test -run=nonesuch -bench=. github.com/johnkerl/miller/v6/pkg/...\nbench-mlv:build\n\tgo test -run=nonesuch -bench=. github.com/johnkerl/miller/v6/pkg/mlrval/...\nbench-input:build\n\tgo test -run=nonesuch -bench=. github.com/johnkerl/miller/v6/pkg/input/...\n\n# ----------------------------------------------------------------\n# Regression tests (large number)\n#\n# See ./regression_test.go for information on how to get more details\n# for debugging.  TL;DR is for CI jobs, we have 'go test -v'; for\n# interactive use, instead of 'go test -v' simply use 'mlr regtest\n# -vvv' or 'mlr regtest -s 20'. See also pkg/terminals/regtest.\nregression-test: build\n\tgo test -v regression_test.go\n\n# ----------------------------------------------------------------\n# Formatting\n# go fmt ./... finds experimental C files which we want to ignore.\nfmt format:\n\t-go fmt ./cmd/...\n\t-go fmt ./pkg/...\n\t-go fmt ./regression_test.go\n\n# ----------------------------------------------------------------\n# Static analysis\n\n# Needs first: go install honnef.co/go/tools/cmd/staticcheck@latest\n# See also: https://staticcheck.io\nstaticcheck:\n\tstaticcheck ./...\n\n# ----------------------------------------------------------------\n# For developers before pushing to GitHub.\n#\n# These steps are done in a particular order:\n# go:\n# * builds the mlr executable\n# man:\n# * creates manpage mlr.1 and manpage.txt using mlr from the $PATH\n# * copies the latter to docs/src\n# docs:\n# * turns *.md.in into *.md (live code samples), using mlr from the $PATH\n# * note the man/manpage.txt becomes some of the HTML content\n# * turns *.md into docs/site HTML and CSS files\ndev:\n\t-make fmt\n\tmake build\n\tmake check\n\tmake -C man build\n\tmake -C docs/src forcebuild\n\tmake -C docs\n\t@echo DONE\n\ndocs: build\n\tmake -C docs/src forcebuild\n\tmake -C docs\n\n# ----------------------------------------------------------------\n# Keystroke-savers\n\nsure: build check\n\nit: build check\nso: install\n\nmlr:\n\tgo build github.com/johnkerl/miller/v6/cmd/mlr\n\n# ----------------------------------------------------------------\n# Please see comments in ./create-release-tarball as well as\n# https://miller.readthedocs.io/en/latest/build/#creating-a-new-release-for-developers\nrelease_tarball: build check\n\t./create-release-tarball\n\n# ================================================================\n# Go does its own dependency management, outside of make.\n.PHONY: build mlr check unit_test regression_test bench fmt staticcheck dev docs\n"
        },
        {
          "name": "README-RPM.md",
          "type": "blob",
          "size": 1.640625,
          "content": "## Instructions to make Miller source/binary RPMs for the RPM-experienced\n\nGrab `miller.spec` and go to town.\n\n## Instructions to make Miller source/binary RPMs for the RPM-inexperienced\n\n### One-time setup\nChange `6.2.0` to desired version. Release-package example:\n\nhttps://github.com/johnkerl/miller/releases/download/v6.2.0/miller-6.2.0.tar.gz\n\n```\ncd\nmkdir ~/rpmbuild\nmkdir ~/rpmbuild/SPECS\nmkdir ~/rpmbuild/SOURCES\ncp /your/path/to/miller/clone/miller.spec ~/rpmbuild/SPECS\ncp /your/path/to/miller-6.2.0.tar.gz ~/rpmbuild/SOURCES\n\ncd ~/rpmbuild/SPECS\n```\n\nYou may need to do\n```\nsudo yum install rpmbuild\n```\n\n### Linting\nIf you have changed the `miller.spec` file:\n```\nrpmlint miller.spec\n```\nYou may need to do\n```\nsudo yum install rpmlint\n```\n\n### Build source-RPM only\n```\nrpmbuild -bs miller.spec\nWrote: /your/home/dir/rpmbuild/SRPMS/miller-6.2.0-1.el6.src.rpm\n```\n\n```\nrpm -qpl ../SRPMS/miller-6.2.0-1.el6.src.rpm\nmiller-6.2.0.tar.gz\nmiller.spec\n```\n\n```\nrpm -qpi ../SRPMS/miller-6.2.0-1.el6.src.rpm\nName        : mlr                          Relocations: (not relocatable)\nVersion     : 6.2.0                             Vendor: (none)\n...\n```\n\n### Build source and binary RPMs\n\n```\nrpmbuild -ba miller.spec\n```\n\n```\nrpm -qpl ../RPMS/x86_64//miller-6.2.0-1.el6.x86_64.rpm\n/usr/bin/mlr\n/usr/share/man/man1/mlr.1.gz\n```\n\n```\nsudo rpm -ivh ../RPMS/x86_64/miller-6.2.0-1.el6.x86_64.rpm \nPreparing...                ########################################### [100%]\n   1:mlr                    ########################################### [100%]\n```\n\n```\n/usr/bin/mlr --version\nMiller 6.2.0\n\nman -M /usr/share/man mlr\n```\nand check the version in the DESCRIPTION section.\n"
        },
        {
          "name": "README-dev.md",
          "type": "blob",
          "size": 21.60546875,
          "content": "# Quickstart for developers\n\n* `make`, `make check`, `make docs`, etc: see [Makefile](Makefile) in the repo base directory.\n* Software-testing methodology: see [./test/README.md](./test/README.md).\n* Source-code indexing: please see [https://sourcegraph.com/github.com/johnkerl/miller](https://sourcegraph.com/github.com/johnkerl/miller)\n* Godoc As of September 2021, `godoc` support is minimal: package-level synopses exist; most `func`/`const`/etc content lacks `godoc`-style comments.  To view doc material, you can:\n  * `go get golang.org/x/tools/cmd/godoc`\n  * `cd go`\n  * `godoc -http=:6060 -goroot .`\n  * Browse to `http://localhost:6060`\n  * Note: control-C and restart the server, then reload in the browser, to pick up edits to source files\n\n# Continuous integration\n\nThe Go implementation is auto-built using GitHub Actions: see [.github/workflows/go.yml](.github/workflows/go.yml). This works splendidly on Linux, MacOS, and Windows.\n\n# Benefits of porting to Go\n\n* The lack of a streaming (record-by-record) JSON reader in the C implementation ([issue 99](https://github.com/johnkerl/miller/issues/99)) is immediately solved in the Go implementation.\n* In the C implementation, arrays were not supported in the DSL; in the Go implementation they are.\n* Flattening nested map structures to output records was clumsy. Now, Miller will be a JSON-to-JSON processor, if your inputs and outputs are both JSON; JSON input and output will be idiomatic.\n* The quoted-DKVP feature from [issue 266](https://github.com/johnkerl/miller/issues/266) will be easily addressed.\n* String/number-formatting issues in [issue 211](https://github.com/johnkerl/miller/issues/211), [issue 178](https://github.com/johnkerl/miller/issues/178), [issue 151](https://github.com/johnkerl/miller/issues/151), and [issue 259](https://github.com/johnkerl/miller/issues/259) will be fixed during the Go port.\n* I think some DST/timezone issues such as [issue 359](https://github.com/johnkerl/miller/issues/359) will be easier to fix using the Go datetime library than using the C datetime library\n* The code will be easier to read and, I hope, easier for others to contribute to. What this means is it should be quicker and easier to add new features to Miller -- after the development-time cost of the port itself is paid, of course.\n\n# Why Go\n\n* As noted above, multiple Miller issues will benefit from stronger library support.\n* Channels/goroutines are an excellent for Miller's reader/mapper/mapper/mapper/writer record-stream architecture.\n* Since I did timing experiments in 2015, I found Go to be faster than it was then.\n* In terms of CPU-cycle-count, Go is a bit slower than C (it does more things, like bounds-checking arrays and so on) -- but by leveraging concurrency over a couple processors, I find that it's competitive in terms of wall-time.\n* Go is an up-and-coming language, with good reason -- it's mature, stable, with few of C's weaknesses and many of C's strengths.\n* The source code will be easier to read/maintain/write, by myself and others.\n\n# Efficiency of the Go port\n\nAs I wrote [here](https://johnkerl.org//miller-docs-by-release/1.0.0/performance.html) back in 2015 I couldn't get Rust or Go (or any other language I tried) to do some test-case processing as quickly as C, so I stuck with C.\n\nEither Go has improved since 2015, or I'm a better Go programmer than I used to be, or both -- but as of 2020 I can get Go-Miller to process data about as quickly as C-Miller.\n\nNote: in some sense Go-Miller is *less* efficient but in a way that doesn't significantly affect wall time. Namely, doing `mlr cat` on a million-record data file on my bargain-value MacBook Pro, the C version takes about 2.5 seconds and the Go version takes about 3 seconds. So in terms of wall time -- which is what we care most about, how long we have to wait -- it's about the same.\n\nA way to look a little deeper at resource usage is to run `htop`, while processing a 10x larger file, so it'll take 25 or 30 seconds rather than 2.5 or 3. This way we can look at the steady-state resource consumption. I found that the C version -- which is purely single-threaded -- is taking 100% CPU. And the Go version, which uses concurrency and channels and `MAXPROCS=4`, with reader/transformer/writer each on their own CPU, is taking about 240% CPU. So Go-Miller is taking up not just a little more CPU, but a lot more -- yet, it does more work in parallel, and finishes the job in about the same amount of time.\n\nEven commodity hardware has multiple CPUs these days -- and the Go code is *much* easier to read, extend, and improve than the C code -- so I'll call this a net win for Miller.\n\n# Developer information\n\n## Source-code goals\n\nDonald Knuth famously said: *Programs are meant to be read by humans and only incidentally for computers to execute.*\n\nDuring the coding of Miller, I've been guided by the following:\n\n* *Miller should be pleasant to read.*\n  * If you want to fix a bug, you should be able to quickly and confidently find out where and how.\n  * If you want to learn something about Go channels, or lexing/parsing in Go -- especially if you don't already know much about them -- the comments should help you learn what you want to.\n  * If you're the kind of person who reads other people's code for fun, well, the code should be fun, as well as readable.\n  * `README.md` files throughout the directory tree are intended to give you a sense of what is where, what to read first and what doesn't need reading right away, and so on -- so you spend a minimum of time being confused or frustrated.\n  * Names of files, variables, functions, etc. should be fully spelled out (e.g. `NewEvaluableLeafNode`), except for a small number of most-used names where a longer name would cause unnecessary line-wraps (e.g. `Mlrval` instead of `MillerValue` since this appears very very often).\n  * Code should not be too clever. This includes some reasonable amounts of code duplication from time to time, to keep things inline, rather than lasagna code.\n  * Things should be transparent.  For example, the `-v` in `mlr -n put -v '$y = 3 + 0.1 * $x'` shows you the abstract syntax tree derived from the DSL expression.\n  * Comments should be robust with respect to reasonably anticipated changes. For example, one package should cross-link to another in its comments, but I try to avoid mentioning specific filenames too much in the comments and README files since these may change over time. I make an exception for stable points such as [cmd/mlr/main.go](./cmd/mlr/main.go), [mlr.bnf](./pkg/parsing/mlr.bnf), [stream.go](./pkg/stream/stream.go), etc.\n* *Miller should be pleasant to write.*\n  * It should be quick to answer the question *Did I just break anything?* -- hence `mlr regtest` functionality.\n  * It should be quick to find out what to do next as you iteratively develop -- see for example [cst/README.md](./pkg/dsl/cst/README.md).\n* *The language should be an asset, not a liability.*\n  * One of the reasons I chose Go is that (personally anyway) I find it to be reasonably efficient, well-supported with standard libraries, straightforward, and fun.  I hope you enjoy it as much as I have.\n\n## Directory structure\n\nInformation here is for the benefit of anyone reading/using the Miller Go code. To use the Miller tool at the command line, you don't need to know any of this if you don't want to. :)\n\n## Directory-structure overview\n\nMiller is a multi-format record-stream processor, where a **record** is a\nsequence of key-value pairs. The basic **stream** operation is:\n\n* **read** records in some specified file format;\n* **transform** the input records to output records in some user-specified way, using a **chain** of **transformers** (also sometimes called **verbs**) -- sort, filter, cut, put, etc.;\n* **write** the records in some specified file format.\n\nSo, in broad overview, the key packages are:\n\n* [pkg/stream](./pkg/stream) -- connect input -> transforms -> output via Go channels\n* [pkg/input](./pkg/input) -- read input records\n* [pkg/transformers](./pkg/transformers) -- transform input records to output records\n* [pkg/output](./pkg/output) -- write output records\n* The rest are details to support this.\n\n## Directory-structure details\n\n### Dependencies\n\n* Miller dependencies are all in the Go standard library, except two:\n  * GOCC lexer/parser code-generator from [github.com/goccmack/gocc](https://github.com/goccmack/gocc):\n    * This package defines the grammar for Miller's domain-specific language (DSL) for the Miller `put` and `filter` verbs. And, GOCC is a joy to use. :)\n    * It is used on the terms of its open-source license.\n  * [golang.org/x/term](https://pkg.go.dev/golang.org/x/term):\n    * Just a one-line Miller callsite for is-a-terminal checking for the [Miller REPL](./pkg/terminals/repl/README.md).\n    * It is used on the terms of its open-source license.\n* See also [./go.mod](go.mod). Setup:\n  * `go get github.com/goccmack/gocc`\n  * `go get golang.org/x/term`\n\n### Miller per se\n\n* The main entry point is [cmd/mlr/main.go](./cmd/mlr/main.go); everything else in [pkg](./pkg).\n* [pkg/entrypoint](./pkg/entrypoint): All the usual contents of `main()` are here, for ease of testing.\n* [pkg/platform](./pkg/platform): Platform-dependent code, which as of early 2021 is the command-line parser. Handling single quotes and double quotes is different on Windows unless particular care is taken, which is what this package does.\n* [pkg/lib](./pkg/lib):\n  * Implementation of the [`Mlrval`](./pkg/types/mlrval.go) datatype which includes string/int/float/boolean/void/absent/error types. These are used for record values, as well as expression/variable values in the Miller `put`/`filter` DSL. See also below for more details.\n  * [`Mlrmap`](./pkg/types/mlrmap.go) is the sequence of key-value pairs which represents a Miller record. The key-lookup mechanism is optimized for Miller read/write usage patterns -- please see [mlrmap.go](./pkg/types/mlrmap.go) for more details.\n  * [`context`](./pkg/types/context.go) supports AWK-like variables such as `FILENAME`, `NF`, `NR`, and so on.\n* [pkg/cli](./pkg/cli) is the flag-parsing logic for supporting Miller's command-line interface. When you type something like `mlr --icsv --ojson put '$sum = $a + $b' then filter '$sum > 1000' myfile.csv`, it's the CLI parser which makes it possible for Miller to construct a CSV record-reader, a transformer-chain of `put` then `filter`, and a JSON record-writer.\n* [pkg/climain](./pkg/climain) contains a layer which invokes `pkg/cli`, which was split out to avoid a Go package-import cycle.\n* [pkg/stream](./pkg/stream) is as above -- it uses Go channels to pipe together file-reads, to record-reading/parsing, to a chain of record-transformers, to record-writing/formatting, to terminal standard output.\n* [pkg/input](./pkg/input) is as above -- one record-reader type per supported input file format, and a factory method.\n* [pkg/output](./pkg/output) is as above -- one record-writer type per supported output file format, and a factory method.\n* [pkg/transformers](./pkg/transformers) contains the abstract record-transformer interface datatype, as well as the Go-channel chaining mechanism for piping one transformer into the next. It also contains all the concrete record-transformers such as `cat`, `tac`, `sort`, `put`, and so on.\n* [pkg/parsing](./pkg/parsing) contains a single source file, `mlr.bnf`, which is the lexical/semantic grammar file for the Miller `put`/`filter` DSL using the GOCC framework. All subdirectories of `pkg/parsing/` are autogen code created by GOCC's processing of `mlr.bnf`. If you need to edit `mlr.bnf`, please use [tools/build-dsl](./tools/build-dsl) to autogenerate Go code from it (using the GOCC tool). (This takes several minutes to run.)\n* [pkg/dsl](./pkg/dsl) contains [`ast_types.go`](pkg/dsl/ast_types.go) which is the abstract syntax tree datatype shared between GOCC and Miller. I didn't use a `pkg/dsl/ast` naming convention, although that would have been nice, in order to avoid a Go package-dependency cycle.\n* [pkg/dsl/cst](./pkg/dsl/cst) is the concrete syntax tree, constructed from an AST produced by GOCC. The CST is what is actually executed on every input record when you do things like `$z = $x * 0.3 * $y`. Please see the [pkg/dsl/cst/README.md](./pkg/dsl/cst/README.md) for more information.\n\n## Nil-record conventions\n\nThrough out the code, records are passed by reference (as are most things, for\nthat matter, to reduce unnecessary data copies). In particular, records can be\nnil through the reader/transformer/writer sequence.\n\n* Record-readers produce an end-of-stream marker (within the `RecordAndContext` struct) to signify end of input stream.\n* Each transformer takes a record-pointer as input and produces a sequence of zero or more record-pointers.\n  * Many transformers, such as `cat`, `cut`, `rename`, etc. produce one output record per input record.\n  * The `filter` transformer produces one or zero output records per input record depending on whether the record passed the filter.\n  * The `nothing` transformer produces zero output records.\n  * The `sort` and `tac` transformers are *non-streaming* -- they produce zero output records per input record, and instead retain each input record in a list. Then, when the end-of-stream marker is received, they sort/reverse the records and emit them, then they emit the end-of-stream marker.\n  * Many transformers such as `stats1` and `count` also retain input records, then produce output once there is no more input to them.\n* An end-of-stream marker is passed to record-writers so that they may produce final output.\n  * Most writers produce their output one record at a time.\n  * The pretty-print writer produces no output until end of stream (or schema change), since it needs to compute the max width down each column.\n\n## Memory management\n\n* Go has garbage collection which immediately simplifies the coding compared to the C port.\n* Pointers are used freely for record-processing: record-readers allocate pointed records; pointed records are passed on Go channels from record-readers to record-transformers to record-writers.\n  * Any transformer which passes an input record through is fine -- be it unmodified as in `mlr cat` or modified as in `mlr cut`.\n  * If a transformer drops a record (`mlr filter` in false cases, for example, or `mlr nothing`) it will be GCed.\n  * One caveat is any transformer which produces multiples, e.g. `mlr repeat` -- this needs to explicitly copy records instead of producing multiple pointers to the same record.\n* Right-hand-sides of DSL expressions all pass around pointers to records and Mlrvals.\n  * Lvalue expressions return pointed `*types.Mlrmap` so they can be assigned to; rvalue expressions return non-pointed `types.Mlrval` but these are very shallow copies -- the int/string/etc types are copied but maps/arrays are passed by reference in the rvalue expression-evaluators.\n* Copy-on-write is done on map/array put -- for example, in the assignment phase of a DSL statement, where an rvalue is assigned to an lvalue.\n\n## More about mlrvals\n\n[`Mlrval`](./pkg/types/mlrval.go) is the datatype of record values, as well as expression/variable values in the Miller `put`/`filter` DSL. It includes string/int/float/boolean/void/absent/error types, not unlike PHP's `zval`.\n\n* Miller's `absent` type is like Javascript's `undefined` -- it's for times when there is no such key, as in a DSL expression `$out = $foo` when the input record is `$x=3,y=4` -- there is no `$foo` so `$foo` has `absent` type. Nothing is written to the `$out` field in this case. See also [here](https://miller.readthedocs.io/en/latest/reference-main-null-data) for more information.\n* Miller's `void` type is like Javascript's `null` -- it's for times when there is a key with no value, as in `$out = $x` when the input record is `$x=,$y=4`. This is an overlap with `string` type, since a void value looks like an empty string. I've gone back and forth on this (including when I was writing the C implementation) -- whether to retain `void` as a distinct type from empty-string, or not. I ended up keeping it as it made the `Mlrval` logic easier to understand.\n* Miller's `error` type is for things like doing type-uncoerced addition of strings. Data-dependent errors are intended to result in `(error)`-valued output, rather than crashing Miller. See also [here](https://miller.readthedocs.io/en/latest/reference-main-data-types) for more information.\n* Miller's number handling makes auto-overflow from int to float transparent, while preserving the possibility of 64-bit bitwise arithmetic.\n  * This is different from JavaScript, which has only double-precision floats and thus no support for 64-bit numbers (note however that there is now [`BigInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt)).\n  * This is also different from C and Go, wherein casts are necessary -- without which int arithmetic overflows.\n  * See also [here](https://miller.readthedocs.io/en/latest/reference-main-arithmetic) for the semantics of Miller arithmetic, which the [`Mlrval`](./pkg/types/mlrval.go) class implements.\n\n## Performance optimizations\n\nKey performance-related PRs for the Go port include:\n\n* [#424](https://github.com/johnkerl/miller/pull/424): In C, lots of little mallocs are fine. In Go, not so much. This is not the garbage-collection penalty -- it's the penalty of _allocating_ -- lots of `duffcopy` and `madvise` appearing in the flame graphs. The idea was to reduce data-copies in the DSL.\n* [#765](https://github.com/johnkerl/miller/pull/765): In C, prints to `stdout` are buffered a line at a time if the output is to the terminal, or a few KB at a time if not (i.e. file or pipe). Note the cost is how often the process does a `write` system call with associated overhead of context-switching into the kernel and back out. The C behavior is the right thing to do. In the Go port, very early on writes were all unbuffered -- several per record. Then buffering was soon switched to per-record, which was an improvement. But as of #765, the buffering is done at the library level, and it's done C-style -- much less frequently when output is not to a terminal.\n* [#774](https://github.com/johnkerl/miller/pull/774): For CSV-lite and DKVP, this avoids using regexes to split strings when `strings.Split` will do.\n* [#779](https://github.com/johnkerl/miller/pull/779): The basic idea of the Miller Go port was that the record-reader writes a record at a time over a channel to the first verb; the first verb writes records one at a time to the second verb, and so on; the last verb writes records one at a time to the record-writer. This is very simple, but for large files, the Go runtime scheduler overhead is too large -- data are chopped up into too many pieces. On #779 records are written 500 (or fewer) per batch, and all the channels from record-reader, to verbs, to record-writer are on record-batches. This lets Miller spend more time doing its job and less time yielding to the goroutine scheduler.\n* [#786](https://github.com/johnkerl/miller/pull/787): In the C version, all values were strings until operated on specifically (expliclitly) by a verb. In the Go port, initially, all values were type-inferred on read, with types retained throughout the processing chain. This was an incredibly elegant and empowering design decision -- central to the Go port, in fact -- but it came with the cost that _all_ fields were being scanned as float/int even if they weren't used in the processing chain. On #786, fields are left as raw strings with type \"pending\", only just-in-time inferred to string/int/float only when used within the processing chain.\n* [#787](https://github.com/johnkerl/miller/pull/787): This removed an unnecessary data copy in the `mlrval.String()` method. Originally this method had non-pointer receiver to conform with the `fmt.Stringer` interface. Hoewver, that's a false economy: `fmt.Println(someMlrval)` is a corner case, and stream processing is the primary concern. Implementing this as a pointer-receiver method was a performance improvement.\n* [#809](https://github.com/johnkerl/miller/pull/809): This reduced the number of passes through fields for just-in-time type-inference. For example, for `$y = $x + 1`, each record's `$x` field's raw string (if not already accessed in the processing chain) needs to be checked to see if it's int (like `123`), float (like `123.4` or `1.2e3`), or string (anything else). Previously, succinct calls to built-in Go library functions were used. That was easy to code, but made too many expensive calls that were avoidable by lighter peeking of strings. In particular, an is-octal regex was being invoked unnecessarily on every field type-infer operation.\n\nSee also [./README-profiling.md](./README-profiling.md) and [https://miller.readthedocs.io/en/latest/new-in-miller-6/#performance-benchmarks](https://miller.readthedocs.io/en/latest/new-in-miller-6/#performance-benchmarks).\n\nIn summary:\n\n* [#765](https://github.com/johnkerl/miller/pull/765), [#774](https://github.com/johnkerl/miller/pull/774), and [#787](https://github.com/johnkerl/miller/pull/787) were low-hanging fruit.\n* [#424](https://github.com/johnkerl/miller/pull/424) was a bit more involved, and reveals that memory allocation -- not just GC -- needs to be handled more mindfully in Go than in C.\n* [#779](https://github.com/johnkerl/miller/pull/779) was a bit more involved, and reveals that Go's elegant goroutine/channel processing model comes with the caveat that channelized data should not be organized in many, small pieces.\n* [#809](https://github.com/johnkerl/miller/pull/809) was also bit more involved, and reveals that library functions are convenient, but profiling and analysis can sometimes reveal an opportunity for an impact, custom solution.\n* [#786](https://github.com/johnkerl/miller/pull/786) was a massive refactor involving about 10KLOC -- in hindsight it would have been best to do this work at the start of the Go port, not at the end.\n"
        },
        {
          "name": "README-docs.md",
          "type": "blob",
          "size": 3.8017578125,
          "content": "# Miller docs\n\n## Why use Mkdocs\n\n* Connects to https://miller.readthedocs.io so people can get their docmods onto the web instead of the self-hosted https://johnkerl.org/miller/doc. Thanks to @pabloab for the great advice!\n* More standard look and feel -- lots of people use readthedocs for other things so this should feel familiar.\n* We get a Search feature for free.\n* Mkdocs vs Sphinx: these are similar tools, but I find that I more easily get better desktop+mobile formatting using Mkdocs.\n\n## Contributing\n\n* You need `pip install mkdocs` (or `pip3 install mkdocs`) as well as `pip install mkdocs-material`.\n* The docs include lots of live code examples which will be invoked using `mlr` which must be somewhere in your `$PATH`.\n* Clone https://github.com/johnkerl/miller and cd into `docs/` within your clone.\n* Overview of flow:\n  * `docs/src` has `*.md.in` files containing markdown as well as directives for auto-generating code samples.\n  * A `genmds` script reads `docs/src/*.md.in` and writes `docs/src/*.md`.\n  * The `mkdocs build` tools reads `docs/src/*.md` and writes HTML files in `docs/site`.\n  * Running `make` within the `docs` directory handles both of those steps.\n  * TL;DR just `make docs` from the Miller base directory\n* Quick-editing loop:\n  * In one terminal, cd to the `docs` directory and leave `mkdocs serve` running.\n  * In another terminal, cd to the `docs/src` subdirectory and edit `*.md.in`.\n  * Run `genmds` to re-create all the `*.md` files, or `genmds foo.md.in` to just re-create the `foo.md.in` file you just edited, or (simplest) just `make` within the `docs/src` subdirectory.\n  * In your browser, visit http://127.0.0.1:8000\n  * This doesn't write HTML in `docs/site`; HTML is served up directly in the browser -- this is nice for previewing interactive edits.\n* For-publish editing loop:\n  * cd to the `src` subdirectory of `docs` and edit `*.md.in`.\n  * `make -C ..`\n  * This does write HTML in `docs/site`.\n  * In your browser, visit `file:///your/path/to/miller/docs/site/index.html`\n  * Link-checking:\n    * `sudo pip3 install git+https://github.com/linkchecker/linkchecker.git`\n    * `cd site` and `linkchecker .`\n* Submitting:\n  * Do the for-publish editing steps -- in particular, `docs/src/*.md.in` and `docs/src/*.md` are both checked in to source control.\n    * TL;DR edit `docs/src/foo.md.in` and run `make docs`\n    * If you don't want to do `pip install mkdocs` then feel free to put up a PR which edits a `foo.md.in` as well as its `foo.md`.\n  * `git add` your modified files (`*.md.in` as well as `*.md), `git commit`, `git push`, and submit a PR at https://github.com/johnkerl/miller.\n\n## Notes\n\n* Miller documents use the Oxford comma: not _red, yellow and green_, but rather _red, yellow, and green_.\n* CSS:\n  * I used the Mkdocs \"material\" theme which I like a lot. I customized `docs/src/extra.css` for Miller coloring/branding.\n* Live code:\n  * I didn't find a way to include non-Python live-code examples within Mkdocs so I adapted the pre-Mkdocs Miller-doc strategy which is to have a generator script read a template file (here, `foo.md.in`), run the marked lines, and generate the output file (`foo.md`). This is `genmds`.\n  * Edit the `*.md.in` files, not `*.md` directly.\n  * Within the `*.md.in` files are lines like `GENMD_RUN_COMMAND`. These will be run, and their output included, by `genmds` which calls the `genmds` script for you.\n* readthedocs:\n  * https://readthedocs.org/\n  * https://readthedocs.org/projects/miller/\n  * https://readthedocs.org/projects/miller/builds/\n  * https://miller.readthedocs.io/en/latest/\n\n## readthedocs website\n\n* Published to https://miller.readthedocs.io/en/latest on each commit to `main` in this repo\n* https://readthedocs.org/projects/miller/\n* https://readthedocs.org/api/v2/webhook/miller/134065/\n* https://readthedocs.org/projects/miller/builds/\n* https://readthedocs.org/\n"
        },
        {
          "name": "README-go-port.md",
          "type": "blob",
          "size": 0.0400390625,
          "content": "Moved to [README-dev.md](README-dev.md).\n"
        },
        {
          "name": "README-profiling.md",
          "type": "blob",
          "size": 3.4013671875,
          "content": "# See also\n\n* [https://github.com/johnkerl/miller/blob/readme-profiling/README-dev.md#performance-optimizations](https://github.com/johnkerl/miller/blob/readme-profiling/README-dev.md#performance-optimizations)\n* [https://miller.readthedocs.io/en/latest/new-in-miller-6/#performance-benchmarks](https://miller.readthedocs.io/en/latest/new-in-miller-6/#performance-benchmarks).\n* `make bench` to run Go benchmarks for Miller\n\n# How to view profile data\n\nRun the profiler:\n\n```\nmlr --cpuprofile cpu.pprof --csv put -f scripts/chain-1.mlr ~/tmp/big.csv > /dev/null\n```\n\n(or whatever command-line flags for Miller).\n\nText mode:\n\n```\ngo tool pprof mlr cpu.pprof\ntop10\n```\n\nGraphical mode:\n\n```\ngo tool pprof -http=:8080 cpu.pprof\n```\n\nand let it pop open a browser window. Then navigate there -- I personally find _View_ -> _Flame Graph_ most useful:\n\n![flame-graph](./docs/src/profiling/flame1.png)\n\nNote that you can drill into subcomponents of the flame graph:\n\n![flame-graph](./docs/src/profiling/flame2.png)\n\n# Benchmark scripts\n\nScripts:\n\n* [./scripts/make-big-files](./scripts/make-big-files) -- Create million-record data files in various formats.\n* [./scripts/chain-cmps.sh](./scripts/chain-cmps.sh) -- Run a few processing scenarios on the million-record CSV file.\n  * [./scripts/chain-1.mlr](./scripts/chain-1.mlr) -- An example `mlr put` used by the previous script\n* [./scripts/time-big-files](./scripts/time-big-files) -- Runs `mlr cat` for million-record files of various file formats. Catting files isn't intrinsically interesting but it shows how input and output processing vary over file formats.\n  * [./scripts/time-big-file](./scripts/time-big-file) -- Helper script for the former.\n* [./scripts/chain-lengths.sh](./scripts/chain-lengths.sh) -- Run longer and longer chains of `scripts/chain1.mlr`, showing how Miller handles multicore and concurrency.\n* [./scripts/make-data-stream](./scripts/make-data-stream) -- Create an endless stream of data to be piped into Miller for steady-state load-testing: e.g. `scripts/make-data-stream | mlr ...` then look at `htop` in another window.\n\nNotes:\n\n* Any of the above can be run using the profiler. I find Flame Graph mode particularly informative for drill-down.\n* The above refer to `mlr5` and `~/tmp/miller/mlr` as well as `./mlr`. The idea is I have a copy of Miller 5.10.3 (the C implementation) saved off in my path as `mlr5`. Then I keep `~/tmp/miller` on recent HEAD. Then I have `.` on a dev branch. Comparing `mlr5` to `./mlr` shows relative performance of the C and Go implementations. Comparing `~/tmp/miller/mlr` to `./mlr` shows relative performance of whatever optimization I'm currently working on.\n* Several of the above scripts use [justtime](https://github.com/johnkerl/scripts/blob/main/fundam/justtime) to get one-line timing information.\n\n# How to vary compiler versions\n\n* [./scripts/compiler-versions-install](./scripts/compiler-versions-install)\n* [./scripts/compiler-versions-build](./scripts/compiler-versions-build)\n* [./scripts/compiler-versions-time](./scripts/compiler-versions-time)\n\n# How to control garbage collection\n\n```\n# Note 100 is the default\n# Raise the bar for GC threshold:\nGOGC=200  GODEBUG=gctrace=1 mlr -n put -q -f u/mand.mlr 1> /dev/null\n\n# Raise the bar higher for GC threshold:\nGOGC=1000 GODEBUG=gctrace=1 mlr -n put -q -f u/mand.mlr 1> /dev/null\n\n# Turn off GC entirely and see where time is spent:\nGOGC=off  GODEBUG=gctrace=1 mlr -n put -q -f u/mand.mlr 1> /dev/null\n```\n"
        },
        {
          "name": "README-versions.md",
          "type": "blob",
          "size": 0.1962890625,
          "content": "[https://repology.org/project/miller](https://repology.org/project/miller)\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/miller.svg)](https://repology.org/project/miller/versions)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 26.6142578125,
          "content": "# What is Miller?\n\n**Miller is like awk, sed, cut, join, and sort for data formats such as CSV, TSV, JSON, JSON Lines, and positionally-indexed.**\n\n# What can Miller do for me?\n\nWith Miller, you get to use named fields without needing to count positional\nindices, using familiar formats such as CSV, TSV, JSON, JSON Lines, and\npositionally-indexed.  Then, on the fly, you can add new fields which are\nfunctions of existing fields, drop fields, sort, aggregate statistically,\npretty-print, and more.\n\n![cover-art](./docs/src/coverart/cover-combined.png)\n\n* Miller operates on **key-value-pair data** while the familiar\nUnix tools operate on integer-indexed fields: if the natural data structure for\nthe latter is the array, then Miller's natural data structure is the\ninsertion-ordered hash map.\n\n* Miller handles a **variety of data formats**,\nincluding but not limited to the familiar **CSV**, **TSV**, and **JSON**/**JSON Lines**.\n(Miller can handle **positionally-indexed data** too!)\n\nIn the above image you can see how Miller embraces the common themes of\nkey-value-pair data in a variety of data formats.\n\n# Getting started\n\n* [Miller in 10 minutes](https://miller.readthedocs.io/en/latest/10min)\n* [A Guide To Command-Line Data Manipulation](https://www.smashingmagazine.com/2022/12/guide-command-line-data-manipulation-cli-miller)\n* [A quick tutorial on Miller](https://www.ict4g.net/adolfo/notes/data-analysis/miller-quick-tutorial.html)\n* [Tools to manipulate CSV files from the Command Line](https://www.ict4g.net/adolfo/notes/data-analysis/tools-to-manipulate-csv.html)\n* [www.togaware.com/linux/survivor/CSV_Files.html](https://www.togaware.com/linux/survivor/CSV_Files.html)\n* [MLR for CSV manipulation](https://guillim.github.io/terminal/2018/06/19/MLR-for-CSV-manipulation.html)\n* [Linux Magazine: Process structured text files with Miller](https://www.linux-magazine.com/Issues/2016/187/Miller)\n* [Miller: Command Line CSV File Processing](https://onepointzero.app/posts/miller-command-line-csv-file-processing/)\n* [Miller - A Swiss Army Chainsaw for CSV Data, Data Science and Data Munging](https://fuzzyblog.io/blog/data_science/2022/05/13/miller-a-swiss-army-chainsaw-for-csv-data-data-science-and-data-munging.html)\n* [Pandas Killer: mlr, the Scientist](https://xvzftube.xyz/posts/pandas_killers/#mlr%3A-the-scientist)\n\n# More documentation links\n\n* [**Full documentation**](https://miller.readthedocs.io/)\n* [Miller's license is two-clause BSD](https://github.com/johnkerl/miller/blob/main/LICENSE.txt)\n* [Notes about issue-labeling in the Github repo](https://github.com/johnkerl/miller/wiki/Issue-labeling)\n* [Active issues](https://github.com/johnkerl/miller/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc)\n\n# Installing\n\nThere's a good chance you can get Miller pre-built for your system:\n\n[![Ubuntu](https://img.shields.io/badge/distros-ubuntu-db4923.svg)](https://launchpad.net/ubuntu/+source/miller)\n[![Ubuntu 16.04 LTS](https://img.shields.io/badge/distros-ubuntu1604lts-db4923.svg)](https://launchpad.net/ubuntu/xenial/+package/miller)\n[![Fedora](https://img.shields.io/badge/distros-fedora-173b70.svg)](https://packages.fedoraproject.org/pkgs/miller/miller/)\n[![Debian](https://img.shields.io/badge/distros-debian-c70036.svg)](https://packages.debian.org/stable/miller)\n[![Gentoo](https://img.shields.io/badge/distros-gentoo-4e4371.svg)](https://packages.gentoo.org/packages/sys-apps/miller)\n\n[![Pro-Linux](https://img.shields.io/badge/distros-prolinux-3a679d.svg)](http://www.pro-linux.de/cgi-bin/DBApp/check.cgi?ShowApp..20427.100)\n[![Arch Linux](https://img.shields.io/badge/distros-archlinux-1792d0.svg)](https://aur.archlinux.org/packages/miller-git)\n\n[![NetBSD](https://img.shields.io/badge/distros-netbsd-f26711.svg)](http://pkgsrc.se/textproc/miller)\n[![FreeBSD](https://img.shields.io/badge/distros-freebsd-8c0707.svg)](https://www.freshports.org/textproc/miller/)\n\n[![Anaconda](https://img.shields.io/badge/distros-anaconda-63ad41.svg)](https://anaconda.org/conda-forge/miller/)\n[![Homebrew/MacOSX](https://img.shields.io/badge/distros-homebrew-ba832b.svg)](https://formulae.brew.sh/formula/miller)\n[![MacPorts/MacOSX](https://img.shields.io/badge/distros-macports-1376ec.svg)](https://www.macports.org/ports.php?by=name&substr=miller)\n[![Chocolatey](https://img.shields.io/badge/distros-chocolatey-red.svg)](https://chocolatey.org/packages/miller)\n[![WinGet](https://img.shields.io/badge/distros-winget-392f55.svg)](https://github.com/microsoft/winget-pkgs/tree/master/manifests/m/Miller/Miller)\n\n|OS|Installation command|\n|---|---|\n|Linux|`yum install miller`<br/> `apt-get install miller`|\n|Mac|`brew install miller`<br/>`port install miller`|\n|Windows|`choco install miller`<br/>`winget install Miller.Miller`|\n\nSee also [README-versions.md](./README-versions.md) for a full list of package versions. Note that long-term-support (LtS) releases will likely be on older versions.\n\nSee also [building from source](https://miller.readthedocs.io/en/latest/build.html).\n\n# Community\n\n[![GitHub stars](https://img.shields.io/github/stars/johnkerl/miller.svg?label=GitHub%20stars)](https://github.com/johnkerl/miller/stargazers)\n[![Homebrew downloads](https://badges.weareopensource.me:/homebrew/installs/dy/miller?label=Homebrew%20downloads)](https://formulae.brew.sh/formula/miller)\n[![Conda downloads](https://anaconda.org/conda-forge/miller/badges/downloads.svg?label=Conda%20downloads)](https://anaconda.org/conda-forge/miller)\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-41-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n* Discussion forum: https://github.com/johnkerl/miller/discussions\n* Feature requests / bug reports: https://github.com/johnkerl/miller/issues\n* How to contribute: [https://miller.readthedocs.io/en/latest/contributing/](https://miller.readthedocs.io/en/latest/contributing/)\n\n# Build status\n\n[![Multi-platform build status](https://github.com/johnkerl/miller/actions/workflows/go.yml/badge.svg)](https://github.com/johnkerl/miller/actions/workflows/go.yml)\n[![CodeQL status](https://github.com/johnkerl/miller/actions/workflows/codeql-analysis.yml/badge.svg)](https://github.com/johnkerl/miller/actions/workflows/codeql-analysis.yml)\n[![Codespell status](https://github.com/johnkerl/miller/actions/workflows/codespell.yml/badge.svg)](https://github.com/johnkerl/miller/actions/workflows/codespell.yml)\n<!--\n[![Release status](https://github.com/johnkerl/miller/actions/workflows/release.yml/badge.svg)](https://github.com/johnkerl/miller/actions/workflows/release.yml)\n-->\n\n# Building from source\n\n* First:\n  * `cd /where/you/want/to/put/the/source`\n  * `git clone https://github.com/johnkerl/miller`\n  * `cd miller`\n* With `make`:\n  * To build: `make`. This takes just a few seconds and produces the Miller executable, which is `./mlr` (or `.\\mlr.exe` on Windows).\n  * To run tests: `make check`.\n  * To install: `make install`. This installs the executable `/usr/local/bin/mlr` and manual page `/usr/local/share/man/man1/mlr.1` (so you can do `man mlr`).\n  * You can do `./configure --prefix=/some/install/path` before `make install` if you want to install somewhere other than `/usr/local`.\n* Without `make`:\n  * To build: `go build github.com/johnkerl/miller/v6/cmd/mlr`.\n  * To run tests: `go test github.com/johnkerl/miller/v6/pkg/...` and `mlr regtest`.\n  * To install: `go install github.com/johnkerl/miller/v6/cmd/mlr` will install to _GOPATH_`/bin/mlr`.\n* See also the doc page on [building from source](https://miller.readthedocs.io/en/latest/build).\n* For more developer information please see [README-dev.md](./README-dev.md).\n\n# For developers\n\n* [README-dev.md](README-dev.md)\n* [How to contribute](https://miller.readthedocs.io/en/latest/contributing/)\n\n# License\n\n[License: BSD2](https://github.com/johnkerl/miller/blob/main/LICENSE.txt)\n\n# Features\n\n* Miller is **multi-purpose**: it's useful for **data cleaning**,\n**data reduction**, **statistical reporting**, **devops**, **system\nadministration**, **log-file processing**, **format conversion**, and\n**database-query post-processing**.\n\n* You can use Miller to snarf and munge **log-file data**, including selecting\nout relevant substreams, then produce CSV format and load that into\nall-in-memory/data-frame utilities for further statistical and/or graphical\nprocessing.\n\n* Miller complements **data-analysis tools** such as **R**, **pandas**, etc.:\nyou can use Miller to **clean** and **prepare** your data. While you can do\n**basic statistics** entirely in Miller, its streaming-data feature and\nsingle-pass algorithms enable you to **reduce very large data sets**.\n\n* Miller complements SQL **databases**: you can slice, dice, and reformat data\non the client side on its way into or out of a database. You can also reap some\nof the benefits of databases for quick, setup-free one-off tasks when you just\nneed to query some data in disk files in a hurry.\n\n* Miller also goes beyond the classic Unix tools by stepping fully into our\nmodern, **no-SQL** world: its essential record-heterogeneity property allows\nMiller to operate on data where records with different schema (field names) are\ninterleaved.\n\n* Miller is **streaming**: most operations need only a single record in\nmemory at a time, rather than ingesting all input before producing any output.\nFor those operations which require deeper retention (`sort`, `tac`, `stats1`),\nMiller retains only as much data as needed. This means that whenever\nfunctionally possible, you can operate on files which are larger than your\nsystem&rsquo;s available RAM, and you can use Miller in **tail -f** contexts.\n\n* Miller is **pipe-friendly** and interoperates with the Unix toolkit.\n\n* Miller's I/O formats include **tabular pretty-printing**, **positionally\n  indexed** (Unix-toolkit style), CSV, TSV, JSON, JSON Lines, and others.\n\n* Miller does **conversion** between formats.\n\n* Miller's **processing is format-aware**: e.g. CSV `sort` and `tac` keep header lines first.\n\n* Miller has high-throughput **performance** on par with the Unix toolkit.\n\n* Miller is written in portable, modern Go, with **zero runtime dependencies**.\nYou can download or compile a single binary, `scp` it to a faraway machine,\nand expect it to work.\n\n# What people are saying about Miller\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Today I discovered Miller—it&#39;s like jq but for CSV: <a href=\"https://t.co/pn5Ni241KM\">https://t.co/pn5Ni241KM</a><br><br>Also, &quot;Miller complements data-analysis tools such as R, pandas, etc.: you can use Miller to clean and prepare your data.&quot; <a href=\"https://twitter.com/GreatBlueC?ref_src=twsrc%5Etfw\">@GreatBlueC</a> <a href=\"https://twitter.com/nfmcclure?ref_src=twsrc%5Etfw\">@nfmcclure</a></p>&mdash; Adrien Trouillaud (@adrienjt) <a href=\"https://twitter.com/adrienjt/status/1308963056592891904?ref_src=twsrc%5Etfw\">September 24, 2020</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Underappreciated swiss-army command-line chainsaw.<br><br>&quot;Miller is like awk, sed, cut, join, and sort for [...] CSV, TSV, and [...] JSON.&quot; <a href=\"https://t.co/TrQqSUK3KK\">https://t.co/TrQqSUK3KK</a></p>&mdash; Dirk Eddelbuettel (@eddelbuettel) <a href=\"https://twitter.com/eddelbuettel/status/836555980771061760?ref_src=twsrc%5Etfw\">February 28, 2017</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Miller looks like a great command line tool for working with CSV data. Sed, awk, cut, join all rolled into one: <a href=\"http://t.co/9BBb6VCZ6Y\">http://t.co/9BBb6VCZ6Y</a></p>&mdash; Mike Loukides (@mikeloukides) <a href=\"https://twitter.com/mikeloukides/status/632885317389950976?ref_src=twsrc%5Etfw\">August 16, 2015</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Miller is like sed, awk, cut, join, and sort for name-indexed data such as CSV: <a href=\"http://t.co/1zPbfg6B2W\">http://t.co/1zPbfg6B2W</a> - handy tool!</p>&mdash; Ilya Grigorik (@igrigorik) <a href=\"https://twitter.com/igrigorik/status/635134857283153920?ref_src=twsrc%5Etfw\">August 22, 2015</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Btw, I think Miller is the best CLI tool to deal with CSV. I used to use this when I need to preprocess too big CSVs to load into R (now we have vroom, so such cases might be rare, though...)<a href=\"https://t.co/kUjrSSGJoT\">https://t.co/kUjrSSGJoT</a></p>&mdash; Hiroaki Yutani (@yutannihilat_en) <a href=\"https://twitter.com/yutannihilat_en/status/1252392795676934144?ref_src=twsrc%5Etfw\">April 21, 2020</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Miller: a *format-aware* data munging tool By <a href=\"https://twitter.com/__jo_ker__?ref_src=twsrc%5Etfw\">@__jo_ker__</a> to overcome limitations with *line-aware* workshorses like awk, sed et al <a href=\"https://t.co/LCyPkhYvt9\">https://t.co/LCyPkhYvt9</a><br><br>The project website is a fantastic example of good software documentation!!</p>&mdash; Donny Daniel (@dnnydnl) <a href=\"https://twitter.com/dnnydnl/status/1038883999391932416?ref_src=twsrc%5Etfw\">September 9, 2018</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Holy holly data swiss army knife batman! How did no one suggest Miller <a href=\"https://t.co/JGQpmRAZLv\">https://t.co/JGQpmRAZLv</a> for solving database cleaning / ETL issues to me before <br><br>Congrats to <a href=\"https://twitter.com/__jo_ker__?ref_src=twsrc%5Etfw\">@__jo_ker__</a> for amazingly intuitive tool for critical data management tasks!<a href=\"https://twitter.com/hashtag/DataScienceandLaw?src=hash&amp;ref_src=twsrc%5Etfw\">#DataScienceandLaw</a> <a href=\"https://twitter.com/hashtag/ComputationalLaw?src=hash&amp;ref_src=twsrc%5Etfw\">#ComputationalLaw</a></p>&mdash; James Miller (@japanlawprof) <a href=\"https://twitter.com/japanlawprof/status/1006547451409518597?ref_src=twsrc%5Etfw\">June 12, 2018</a></blockquote>\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">🤯<a href=\"https://twitter.com/__jo_ker__?ref_src=twsrc%5Etfw\">@__jo_ker__</a>&#39;s Miller easily reads, transforms, + writes all sorts of tabular data. It&#39;s standalone, fast, and built for streaming data (operating on one line at a time, so you can work on files larger than memory).<br><br>And the docs are dream. I&#39;ve been reading them all morning! <a href=\"https://t.co/Be2pGPZK6t\">https://t.co/Be2pGPZK6t</a></p>&mdash; Benjamin Wolfe (he/him) (@BenjaminWolfe) <a href=\"https://twitter.com/BenjaminWolfe/status/1435966268499128324?ref_src=twsrc%5Etfw\">September 9, 2021</a></blockquote>\n\n## Contributors ✨\n\nThanks to all the fine people who help make Miller better ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/aborruso\"><img src=\"https://avatars.githubusercontent.com/u/30607?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Andrea Borruso</b></sub></a><br /><a href=\"#ideas-aborruso\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#design-aborruso\" title=\"Design\">🎨</a></td>\n    <td align=\"center\"><a href=\"https://sjackman.ca/\"><img src=\"https://avatars.githubusercontent.com/u/291551?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Shaun Jackman</b></sub></a><br /><a href=\"#ideas-sjackman\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://www.fredtrotter.com/\"><img src=\"https://avatars.githubusercontent.com/u/83133?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Fred Trotter</b></sub></a><br /><a href=\"#ideas-ftrotter\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#design-ftrotter\" title=\"Design\">🎨</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Komosa\"><img src=\"https://avatars.githubusercontent.com/u/10688154?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>komosa</b></sub></a><br /><a href=\"#ideas-Komosa\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jungle-boogie\"><img src=\"https://avatars.githubusercontent.com/u/1111743?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>jungle-boogie</b></sub></a><br /><a href=\"#ideas-jungle-boogie\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/0-wiz-0\"><img src=\"https://avatars.githubusercontent.com/u/2221844?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Thomas Klausner</b></sub></a><br /><a href=\"#infra-0-wiz-0\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skitt\"><img src=\"https://avatars.githubusercontent.com/u/2128935?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Stephen Kitt</b></sub></a><br /><a href=\"#platform-skitt\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"http://leahneukirchen.org/\"><img src=\"https://avatars.githubusercontent.com/u/139?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Leah Neukirchen</b></sub></a><br /><a href=\"#ideas-leahneukirchen\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/lgbaldoni\"><img src=\"https://avatars.githubusercontent.com/u/1450716?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Luigi Baldoni</b></sub></a><br /><a href=\"#platform-lgbaldoni\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://yutani.rbind.io/\"><img src=\"https://avatars.githubusercontent.com/u/1978793?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Hiroaki Yutani</b></sub></a><br /><a href=\"#ideas-yutannihilation\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://3e.org/\"><img src=\"https://avatars.githubusercontent.com/u/41439?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Daniel M. Drucker</b></sub></a><br /><a href=\"#ideas-dmd\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/NikosAlexandris\"><img src=\"https://avatars.githubusercontent.com/u/7046639?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Nikos Alexandris</b></sub></a><br /><a href=\"#ideas-NikosAlexandris\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/kundeng\"><img src=\"https://avatars.githubusercontent.com/u/89032?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>kundeng</b></sub></a><br /><a href=\"#platform-kundeng\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"http://victorsergienko.com/\"><img src=\"https://avatars.githubusercontent.com/u/151199?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Victor Sergienko</b></sub></a><br /><a href=\"#platform-singalen\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/gromgit\"><img src=\"https://avatars.githubusercontent.com/u/215702?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Adrian Ho</b></sub></a><br /><a href=\"#design-gromgit\" title=\"Design\">🎨</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Zachp\"><img src=\"https://avatars.githubusercontent.com/u/1316442?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>zachp</b></sub></a><br /><a href=\"#platform-Zachp\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://dsel.net/\"><img src=\"https://avatars.githubusercontent.com/u/921669?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>David Selassie</b></sub></a><br /><a href=\"#ideas-davidselassie\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://www.joelparkerhenderson.com/\"><img src=\"https://avatars.githubusercontent.com/u/27145?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Joel Parker Henderson</b></sub></a><br /><a href=\"#ideas-joelparkerhenderson\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/divtiply\"><img src=\"https://avatars.githubusercontent.com/u/5359679?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Michel Ace</b></sub></a><br /><a href=\"#ideas-divtiply\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"http://fuco1.github.io/sitemap.html\"><img src=\"https://avatars.githubusercontent.com/u/2664959?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Matus Goljer</b></sub></a><br /><a href=\"#ideas-Fuco1\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/terorie\"><img src=\"https://avatars.githubusercontent.com/u/21371810?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Richard Patel</b></sub></a><br /><a href=\"#platform-terorie\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://blog.kub1x.org/\"><img src=\"https://avatars.githubusercontent.com/u/1833840?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Jakub Podlaha</b></sub></a><br /><a href=\"#design-kub1x\" title=\"Design\">🎨</a></td>\n    <td align=\"center\"><a href=\"https://goo.gl/ZGZynx\"><img src=\"https://avatars.githubusercontent.com/u/85767?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Miodrag Milić</b></sub></a><br /><a href=\"#platform-majkinetor\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/derekmahar\"><img src=\"https://avatars.githubusercontent.com/u/6047?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Derek Mahar</b></sub></a><br /><a href=\"#ideas-derekmahar\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/spmundi\"><img src=\"https://avatars.githubusercontent.com/u/38196185?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>spmundi</b></sub></a><br /><a href=\"#ideas-spmundi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/koernepr\"><img src=\"https://avatars.githubusercontent.com/u/24551942?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Peter Körner</b></sub></a><br /><a href=\"#security-koernepr\" title=\"Security\">🛡️</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rubyFeedback\"><img src=\"https://avatars.githubusercontent.com/u/46686565?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>rubyFeedback</b></sub></a><br /><a href=\"#ideas-rubyFeedback\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rbolsius\"><img src=\"https://avatars.githubusercontent.com/u/2106964?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>rbolsius</b></sub></a><br /><a href=\"#platform-rbolsius\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/awildturtok\"><img src=\"https://avatars.githubusercontent.com/u/1553491?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>awildturtok</b></sub></a><br /><a href=\"#ideas-awildturtok\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/agguser\"><img src=\"https://avatars.githubusercontent.com/u/1206106?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>agguser</b></sub></a><br /><a href=\"#ideas-agguser\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jganong\"><img src=\"https://avatars.githubusercontent.com/u/2783890?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>jganong</b></sub></a><br /><a href=\"#ideas-jganong\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/fulvio-scapin\"><img src=\"https://avatars.githubusercontent.com/u/69568?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Fulvio Scapin</b></sub></a><br /><a href=\"#ideas-trantor\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/torbiak\"><img src=\"https://avatars.githubusercontent.com/u/109347?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Jordan Torbiak</b></sub></a><br /><a href=\"#ideas-torbiak\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Andy1978\"><img src=\"https://avatars.githubusercontent.com/u/240064?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Andreas Weber</b></sub></a><br /><a href=\"#ideas-Andy1978\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/vapniks\"><img src=\"https://avatars.githubusercontent.com/u/174330?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>vapniks</b></sub></a><br /><a href=\"#platform-vapniks\" title=\"Packaging/porting to new platform\">📦</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/89z\"><img src=\"https://avatars.githubusercontent.com/u/73562167?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Zombo</b></sub></a><br /><a href=\"#platform-89z\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BEFH\"><img src=\"https://avatars.githubusercontent.com/u/3386600?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Brian Fulton-Howard</b></sub></a><br /><a href=\"#platform-BEFH\" title=\"Packaging/porting to new platform\">📦</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ChCyrill\"><img src=\"https://avatars.githubusercontent.com/u/2165604?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>ChCyrill</b></sub></a><br /><a href=\"#ideas-ChCyrill\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jauderho\"><img src=\"https://avatars.githubusercontent.com/u/13562?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Jauder Ho</b></sub></a><br /><a href=\"https://github.com/johnkerl/miller/commits?author=jauderho\" title=\"Code\">💻</a></td>\n    <td align=\"center\"><a href=\"https://github.com/psacawa\"><img src=\"https://avatars.githubusercontent.com/u/21274063?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Paweł Sacawa</b></sub></a><br /><a href=\"https://github.com/johnkerl/miller/issues?q=author%3Apsacawa\" title=\"Bug reports\">🐛</a></td>\n    <td align=\"center\"><a href=\"https://github.com/schragge\"><img src=\"https://avatars.githubusercontent.com/u/4294278?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>schragge</b></sub></a><br /><a href=\"https://github.com/johnkerl/miller/commits?author=schragge\" title=\"Documentation\">📖</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Poshi\"><img src=\"https://avatars.githubusercontent.com/u/1780510?v=4?s=50\" width=\"50px;\" alt=\"\"/><br /><sub><b>Jordi</b></sub></a><br /><a href=\"https://github.com/johnkerl/miller/commits?author=Poshi\" title=\"Documentation\">📖</a> <a href=\"#ideas-Poshi\" title=\"Ideas, Planning, & Feedback\">🤔</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n<a href=\"https://github.com/johnkerl/miller/graphs/contributors\">\n  <img src=\"https://contributors-img.web.app/image?repo=johnkerl/miller\" />\n</a>\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind are welcome!\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 1.0458984375,
          "content": "#!/bin/bash\n\nset -euo pipefail\n\nusage() {\n  echo \"Usage: $0 [--prefix {prefix directory}], e.g. /usr/local\" 2>&1\n  echo \"    or $0 [--prefix={prefix directory}], e.g. /usr/local\" 2>&1\n  exit 1\n}\n\nprefix=\"/usr/local\"\n\nif [ $# -eq 0 ]; then\n  echo \"Using $prefix\"\nelif [ $# -gt 2 ]; then\n  usage\nelse\n  while [ $# -gt 0 ]; do\n    case \"$1\" in\n      -p=* | --prefix=*)\n        prefix=\"${1#*=}\"\n        ;;\n      -p | --prefix)\n        prefix=\"$2\"\n        shift\n        ;;\n      *)\n        printf \"Error: unknown option: $1\\n\"\n        usage\n    esac\n    shift\n  done\nfi\n\n# Test for read access, not write access, since people can ./configure, make,\n# and make check outside of sudo and then make install inside sudo.\nif [ ! -d \"$prefix\" ]; then\n  echo \"$0: could not find prefix directory \\\"$prefix\\\"\"\n  exit 1\nfi\n\next=\".prefix-backup\"\nsed 's@^PREFIX.*@PREFIX='$prefix'@' Makefile > Makefile.$ext\nmv Makefile.$ext Makefile\necho Updated Makefile\n\nsed 's@^PREFIX.*@PREFIX='$prefix'@' man/Makefile > man/Makefile.$ext\nmv man/Makefile.$ext man/Makefile\necho Updated man/Makefile\n\n"
        },
        {
          "name": "create-release-tarball",
          "type": "blob",
          "size": 2.9208984375,
          "content": "#!/bin/bash\n\n# ================================================================\n# This script creates a file like \"miller-6.0.0.tar.gz\".\n#\n# * The developer should run this script to create that .tar.gz file\n#\n# * Then attach it as an asset to a release created at\n#   https://github.com/johnkerl/miller/releases.\n#\n# * Then the 'Source' link in ./miller.spec should already be correct.\n#\n# * Normally this script wouldn't be run directly; rather, from the Makefile's\n#   'make release_tarball' which will first run 'make build' and 'make check'.\n#\n# Please also see\n# https://miller.readthedocs.io/en/latest/build/#creating-a-new-release-for-developers\n#\n# Note that GitHub makes a 'Source code (tar.gz)' which could be used in place\n# of the tarball which this script creates. However, this script makes some\n# effort to remove directories which are not necessary for the install, which\n# reduces tarball size.\n#\n# Testing:\n# * Run this script\n# * Move the miller-i.j.k.tar.gz file off somewhere else, like /tmp\n# * cd to the directory where you put the tarbll\n# * tar zxf miller-i.j.k.tar.gz\n# * cd miller-i.j.k\n# * ./configure --prefix /usr/local\n# * make build check\n# * make build check install # if you prefer\n# ================================================================\n\nset -euo pipefail\n\n# Make sure ./mlr exists so we can ask it for its version string.\nif [ ! -x \"./mlr\" ]; then\n  echo \"$0: ./mlr is not executable. Please check 'make build' first.\" 1>&2\n  exit 1\nfi\n\n# Find the Miller version string, such as \"6.0.0\".\nVERSION=$(./mlr --bare-version)\nif [ \"$VERSION\" == \"\" ] ; then\n  echo \"$0: could not obtain output from './mlr --bare-version'.\" 1>&2\n  exit 1\nfi\n\n# Try to find a version of tar which supports the --transform flag.\n# Linux tar does; MacOS default tar does not, but 'brew install gnu-tar' will\n# install gtar which does.\ntar=/usr/bin/tar\nif [ -x /usr/local/bin/gtar ]; then\n  tar=/usr/local/bin/gtar\nelif [ -x /opt/homebrew/bin/gtar ]; then\n  tar=/opt/homebrew/bin/gtar\nfi\nif [ ! -x \"$tar\" ]; then\n  echo \"$0: \"$tar\" is not executable. Please edit this script with the path.\" 1>&2\n  echo \"to a version of tar which supports the --transform flag.\" 1>&2\n  exit 1\nfi\n\n# Make sure the current directory is writeable, so we can (perhaps) create a\n# more informative error message than tar would.\nif [ ! -w . ]; then\n  echo \"$0: the current directory is not writeable; cannot create tarball.\" 1>&2\n  exit 1\nfi\nTGZ_NAME=miller-${VERSION}.tar.gz\n\n# Create the release tarball.\necho \"Writing $TGZ_NAME ...\"\n$tar \\\n  --transform 's,^./,miller-'$VERSION'/,'  \\\n  --exclude data \\\n  --exclude docs \\\n  --exclude experiments \\\n  --exclude todo.txt \\\n  --exclude perf \\\n  --exclude python \\\n  --exclude vim \\\n  -czf $TGZ_NAME \\\n  ./LICENSE.txt \\\n  ./README.md \\\n  ./README-RPM.md \\\n  ./configure \\\n  ./Makefile \\\n  ./create-release-tarball \\\n  ./go.mod \\\n  ./go.sum \\\n  ./cmd \\\n  ./pkg \\\n  ./regression_test.go \\\n  ./man \\\n  ./test \\\n  ./tools\n\necho \"Wrote   $TGZ_NAME\"\n"
        },
        {
          "name": "data",
          "type": "tree",
          "content": null
        },
        {
          "name": "delve.txt",
          "type": "blob",
          "size": 0.0986328125,
          "content": "dlv exec ./mlr -- --csv --from x.csv sub -a def ghi\nbreak main.main\n  # or wherever\nrestart\ncontinue\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.294921875,
          "content": "module github.com/johnkerl/miller/v6\n\n// The repo is 'miller' and the executable is 'mlr', going back many years and\n// predating the Go port.\n//\n// If we had ./mlr.go then 'go build github.com/johnkerl/miller' then the\n// executable would be 'miller' not 'mlr'.\n//\n// So we have cmd/mlr/main.go:\n// * go build   github.com/johnkerl/miller/v6/cmd/mlr\n// * go install github.com/johnkerl/miller/v6/cmd/mlr\n\n// go get github.com/johnkerl/lumin@v1.0.0\n// Local development:\n// replace github.com/johnkerl/lumin => /Users/kerl/git/johnkerl/lumin\n\ngo 1.21\n\nrequire (\n\tgithub.com/facette/natsort v0.0.0-20181210072756-2cd4dd1e2dcb\n\tgithub.com/johnkerl/lumin v1.0.0\n\tgithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/lestrrat-go/strftime v1.1.0\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/nine-lives-later/go-windows-terminal-sequences v1.0.4\n\tgithub.com/pkg/profile v1.7.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgolang.org/x/sys v0.29.0\n\tgolang.org/x/term v0.28.0\n\tgolang.org/x/text v0.21.0\n)\n\nrequire (\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/felixge/fgprof v0.9.3 // indirect\n\tgithub.com/google/pprof v0.0.0-20211214055906-6f57359322fd // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 4.6064453125,
          "content": "github.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/facette/natsort v0.0.0-20181210072756-2cd4dd1e2dcb h1:IT4JYU7k4ikYg1SCxNI1/Tieq/NFvh6dzLdgi7eu0tM=\ngithub.com/facette/natsort v0.0.0-20181210072756-2cd4dd1e2dcb/go.mod h1:bH6Xx7IW64qjjJq8M2u4dxNaBiDfKK+z/3eGDpXEQhc=\ngithub.com/felixge/fgprof v0.9.3 h1:VvyZxILNuCiUCSXtPtYmmtGvb65nqXh2QFWc0Wpf2/g=\ngithub.com/felixge/fgprof v0.9.3/go.mod h1:RdbpDgzqYVh/T9fPELJyV7EYJuHB55UTEULNun8eiPw=\ngithub.com/google/pprof v0.0.0-20211214055906-6f57359322fd h1:1FjCyPC+syAzJ5/2S8fqdZK1R22vvA0J7JZKcuOIQ7Y=\ngithub.com/google/pprof v0.0.0-20211214055906-6f57359322fd/go.mod h1:KgnwoLYCZ8IQu3XUZ8Nc/bM9CCZFOyjUNOSygVozoDg=\ngithub.com/ianlancetaylor/demangle v0.0.0-20210905161508-09a460cdf81d/go.mod h1:aYm2/VgdVmcIU8iMfdMvDMsRAQjcfZSKFby6HOFvi/w=\ngithub.com/johnkerl/lumin v1.0.0 h1:CV34cHZOJ92Y02RbQ0rd4gA0C06Qck9q8blOyaPoWpU=\ngithub.com/johnkerl/lumin v1.0.0/go.mod h1:eLf5AdQOaLvzZ2zVy4REr/DSeEwG+CZreHwNLICqv9E=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/lestrrat-go/envload v0.0.0-20180220234015-a3eb8ddeffcc h1:RKf14vYWi2ttpEmkA4aQ3j4u9dStX2t4M8UM6qqNsG8=\ngithub.com/lestrrat-go/envload v0.0.0-20180220234015-a3eb8ddeffcc/go.mod h1:kopuH9ugFRkIXf3YoqHKyrJ9YfUFsckUU9S7B+XP+is=\ngithub.com/lestrrat-go/strftime v1.1.0 h1:gMESpZy44/4pXLO/m+sL0yBd1W6LjgjrrD4a68Gapyg=\ngithub.com/lestrrat-go/strftime v1.1.0/go.mod h1:uzeIB52CeUJenCo1syghlugshMysrqUT51HlxphXVeI=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/nine-lives-later/go-windows-terminal-sequences v1.0.4 h1:NC4H8hewgaktBqMI5yzy6L/Vln5/H7BEziyxaE2fX3Y=\ngithub.com/nine-lives-later/go-windows-terminal-sequences v1.0.4/go.mod h1:eUQxpEiJy001RoaLXrNa5+QQLYiEgmEafwWuA3ppJSo=\ngithub.com/pkg/profile v1.7.0 h1:hnbDkaNWPCLMO9wGLdBFTIZvzDrDfBM2072E1S9gJkA=\ngithub.com/pkg/profile v1.7.0/go.mod h1:8Uer0jas47ZQMJ7VD+OHknK4YDY07LPUC6dEvqDjvNo=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "miller.spec",
          "type": "blob",
          "size": 3.8134765625,
          "content": "Summary: Name-indexed data processing tool\nName: miller\nVersion: 6.13.0\nRelease: 1%{?dist}\nLicense: BSD\nSource: https://github.com/johnkerl/miller/releases/download/%{version}/miller-%{version}.tar.gz\nURL: https://miller.readthedocs.io\n# gcc for cgo transitive dependency\nBuildRequires: golang\nBuildRequires: gcc\nBuildRequires: systemd-rpm-macros\n\n%description\nMiller (mlr) allows name-indexed data such as CSV and JSON files to be\nprocessed with functions equivalent to sed, awk, cut, join, sort etc. It can\nconvert between formats, preserves headers when sorting or reversing, and\nstreams data where possible so its memory requirements stay small. It works\nwell with pipes and can feed \"tail -f\".\n\n%prep\n%autosetup\n\n%build\nmake build\n\n%check\nmake check\n\n%install\nmake install\n\n%files\n%license LICENSE.txt\n%doc README.md\n%{_bindir}/mlr\n%{_mandir}/man1/mlr.1*\n\n%changelog\n* Sat Oct 5 2024 John Kerl <kerl.john.r@gmail.com> - 6.13.0-1\n- 6.13.0 release\n\n* Sat Mar 16 2024 John Kerl <kerl.john.r@gmail.com> - 6.12.0-1\n- 6.12.0 release\n\n* Tue Jan 23 2024 John Kerl <kerl.john.r@gmail.com> - 6.11.0-1\n- 6.11.0 release\n\n* Wed Dec 13 2023 John Kerl <kerl.john.r@gmail.com> - 6.10.0-1\n- 6.10.0 release\n\n* Thu Aug 31 2023 John Kerl <kerl.john.r@gmail.com> - 6.9.0-1\n- 6.9.0 release\n\n* Sun Jun 4 2023 John Kerl <kerl.john.r@gmail.com> - 6.8.0-1\n- 6.8.0 release\n\n* Wed Mar 1 2023 John Kerl <kerl.john.r@gmail.com> - 6.7.0-1\n- 6.7.0 release\n\n* Sun Jan 1 2023 John Kerl <kerl.john.r@gmail.com> - 6.6.0-1\n- 6.6.0 release\n\n* Sun Nov 27 2022 John Kerl <kerl.john.r@gmail.com> - 6.5.0-1\n- 6.5.0 release\n\n* Sat Aug 20 2022 John Kerl <kerl.john.r@gmail.com> - 6.4.0-1\n- 6.4.0 release\n\n* Thu Jul 7 2022 John Kerl <kerl.john.r@gmail.com> - 6.3.0-1\n- 6.3.0 release\n\n* Fri Mar 18 2022 John Kerl <kerl.john.r@gmail.com> - 6.2.0-1\n- 6.2.0 release\n\n* Mon Mar 7 2022 John Kerl <kerl.john.r@gmail.com> - 6.1.0-1\n- 6.1.0 release\n\n* Sun Jan 9 2022 John Kerl <kerl.john.r@gmail.com> - 6.0.0-1\n- 6.0.0 release\n\n* Tue Mar 23 2021 John Kerl <kerl.john.r@gmail.com> - 5.10.2-1\n- 5.10.2 release\n\n* Sun Mar 21 2021 John Kerl <kerl.john.r@gmail.com> - 5.10.1-1\n- 5.10.1 release\n\n* Sun Nov 29 2020 John Kerl <kerl.john.r@gmail.com> - 5.10.0-1\n- 5.10.0 release\n\n* Wed Sep 02 2020 John Kerl <kerl.john.r@gmail.com> - 5.9.1-1\n- 5.9.1 release\n\n* Wed Aug 19 2020 John Kerl <kerl.john.r@gmail.com> - 5.9.0-1\n- 5.9.0 release\n\n* Mon Aug 03 2020 John Kerl <kerl.john.r@gmail.com> - 5.8.0-1\n- 5.8.0 release\n\n* Mon Mar 16 2020 John Kerl <kerl.john.r@gmail.com> - 5.7.0-1\n- 5.7.0 release\n\n* Sat Sep 21 2019 John Kerl <kerl.john.r@gmail.com> - 5.6.2-1\n- 5.6.2 release\n\n* Mon Sep 16 2019 John Kerl <kerl.john.r@gmail.com> - 5.6.1-1\n- 5.6.1 release\n\n* Thu Sep 12 2019 John Kerl <kerl.john.r@gmail.com> - 5.6.0-1\n- 5.6.0 release\n\n* Sat Aug 31 2019 John Kerl <kerl.john.r@gmail.com> - 5.5.0-1\n- 5.5.0 release\n\n* Tue May 28 2019 Stephen Kitt <steve@sk2.org> - 5.4.0-1\n- Fix up for Fedora\n\n* Sun Oct 14 2018 John Kerl <kerl.john.r@gmail.com> - 5.4.0-1\n- 5.4.0 release\n\n* Sat Jan 06 2018 John Kerl <kerl.john.r@gmail.com> - 5.3.0-1\n- 5.3.0 release\n\n* Thu Jul 20 2017 John Kerl <kerl.john.r@gmail.com> - 5.2.2-1\n- 5.2.2 release\n\n* Mon Jun 19 2017 John Kerl <kerl.john.r@gmail.com> - 5.2.1-1\n- 5.2.1 release\n\n* Sun Jun 11 2017 John Kerl <kerl.john.r@gmail.com> - 5.2.0-1\n- 5.2.0 release\n\n* Thu Apr 13 2017 John Kerl <kerl.john.r@gmail.com> - 5.1.0-1\n- 5.1.0 release\n\n* Sat Mar 11 2017 John Kerl <kerl.john.r@gmail.com> - 5.0.1-1\n- 5.0.1 release\n\n* Mon Feb 27 2017 John Kerl <kerl.john.r@gmail.com> - 5.0.0-1\n- 5.0.0 release\n\n* Sun Aug 21 2016 John Kerl <kerl.john.r@gmail.com> - 4.5.0-1\n- 4.5.0 release\n\n* Mon Apr 04 2016 John Kerl <kerl.john.r@gmail.com> - 3.5.0-1\n- 3.5.0 release\n\n* Sun Feb 14 2016 John Kerl <kerl.john.r@gmail.com> - 3.4.0-1\n- 3.4.0 release\n\n* Sun Feb 07 2016 John Kerl <kerl.john.r@gmail.com> - 3.3.2-1\n- Initial spec-file submission for Miller\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "python",
          "type": "tree",
          "content": null
        },
        {
          "name": "regression_test.go",
          "type": "blob",
          "size": 2.3583984375,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/johnkerl/miller/v6/pkg/terminals/regtest\"\n)\n\n// TestRegression is a familiar entry point for regression testing.  Miller\n// regression tests are more flexibly invoked via 'mlr regtest'.  However here\n// is a standard location so people can get at them via 'go test'.  Please see\n// (as of this writing) pkg/terminals/regtest for the Miller regtest package.\nfunc TestRegression(t *testing.T) {\n\t// How much detail to show?  There are thousands of cases, organized into a\n\t// few hundred top-level directories under ./test/cases.\n\t//\n\t// Default behavior is to show PASS/FAIL for those top-level directories.\n\t// If (for whatever reason) lots of tests are systematically failing then\n\t// verbosityLevel = 3 for all cases is probably too much output to be\n\t// useful.\n\t//\n\t// Also note our regtest framework supports four verbosity levels, 'mlr\n\t// regtest' (0) through 'mlr regtest -vvv' (3), while 'go test' has only\n\t// 'go test' and 'go test -v'. Our regtest framework also has 'mlr regtest\n\t// -s 20' which means *re-run* up to 20 failing tests (after having failed\n\t// once with verbosityLevel = 0) as if those had been invoked with\n\t// verbosityLevel = 3.\n\t//\n\t// What we do is:\n\t// * go test:    like 'mlr regtest'\n\t// * go test -v: like 'mlr regtest -s 20'\n\t//\n\t// This is (I hope) sufficient flexibility for use in GitHub Actions\n\t// continuous-integration jobs. If more detail is needed then one may:\n\t//\n\t// * For CI debugging: simply edit the below parameters verbosityLevel\n\t//   and firstNFailsToShow and re-push to GitHub.\n\t// * For interactive debug: run 'mlr regtest -v', 'mlr regtest -vv', 'mlr\n\t//   regtest -vvv' instead of going through 'go test'.\n\tfirstNFailsToShow := 0\n\tif testing.Verbose() {\n\t\tfirstNFailsToShow = 20\n\t}\n\n\t// Let the tests find ./mlr\n\tcwd, err := os.Getwd()\n\tif err != nil {\n\t\tfmt.Fprintln(os.Stderr, \"mlr: could not find current working directory.\")\n\t\tos.Exit(1)\n\t}\n\tpath := os.Getenv(\"PATH\")\n\tos.Setenv(\"PATH\", cwd+\":\"+path)\n\n\t// With 'go test' invoked from the repo base directory, the cwd for this code will\n\t// be the tests/ subdirectory.\n\tcasePaths := []string{\"./test/cases\"} // use default\n\n\tregtester := regtest.NewRegTester(\n\t\t\"mlr\", // exeName\n\t\tfalse, // doPopulate\n\t\t0,     // verbosityLevel\n\t\tfalse, // plainMode\n\t\tfirstNFailsToShow,\n\t)\n\n\tok := regtester.Execute(casePaths)\n\tif !ok {\n\t\tt.Fatal()\n\t}\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "todo.txt",
          "type": "blob",
          "size": 16.509765625,
          "content": "===============================================================\n* 1050 mlr check w/ empty csv column name\n*  283 strmatch DSL function\n*  440 strict mode\n* 1128 bash/zsh autocompletions\n* 1025 emitv2\n* 1082 summary/type\n* 1105 too many open files\n\n* opt-in type-infers for inf, true, etc\n* 982 '.' ',' etc\n* extended field accessors for #763 and #948 (positional & json.nested)\n* awk-like exit\n* mrpl exits ...\n\n================================================================\nSTRICT MODE\n\n? re silent zero-pass for-loops on non-collections:\n\ni theme is handling of 'absent'\n\n? what about handling of 'error' ?\n\n* improve wording:\n  mlr: couldn't assign variable int function return value from value absent (absent)\n\n* need $?x and @?x in the grammar & CST\n\n* flags:\n  o mlr -z and mlr put -z\n  o note put has -w (warn) and -W (fatal)\n    - then strict mode includes -W?\n\n* tests:\n  mlr --csv --from $exv put -z 'x = 1'\n  mlr --csv --from $exv put -z 'var x = a'\n  mlr --csv --from $exv put -z 'var x = $nonesuch'\n  mlr --csv --from $exv put -z 'var x = $[\"asdf\"]'\n  mlr --csv --from $exv put -z 'var x = $[nonesuch]'\n  mlr --csv --from $exv put -z 'var x = $[[999]]'\n  mlr --csv --from $exv put -z 'var x = $[[[999]]]'\n  mlr --csv --from $exv put -z 'begin { var m = $* }'\n  mlr --csv --from $exv put -z 'var x = @nonesuch'\n  mlr --csv --from $exv put -z 'var x = @[\"nonesuch\"]'\n  mlr --csv --from $exv put -z 'func f(): int {}; $x = f()'\n  mlr --csv --from $exv put -z 'func f() {}; $x = f()'\n  mlr --csv --from $exv put -z 'func f() {return nonesuch}; $x = f()'\n  mlr --csv --from $exv put -z '$env = ENV[nonesuch]'\n  mlr --csv --from $exv put -z '$env = ENV[\"nonesuch\"]'\n\n----------------------------------------------------------------\nEXTENDED FIELD ACCESSORS\n\n* extract/simplify getter logic outside of full CST/runtime/etc\n* sketch out putter ...\n? what does 'cut -f a.b[3]' even mean?\n  o 'cut -xf a.b[3]' is easy enough ...\n  o field name '@graph' is an issue :(\n* maybe ......... not DSL per se but a separate \"parser\" here\n  o delimiters '[' ']' '.' '{' '}'\n  o $foo\n  o ${foo} -- in case the field name has a . in it or what have you\n  x $[\"foo\"] -- don't support this\n  o $foo.bar -- treat this like $foo[\"bar\"]\n  o $foo[\"bar\"] or foo[1] -- contents just a string or an integer (no expressions supported)\n  o $[[2]] -- contents just an integer (no expressions supported)\n  o $[[[3]]] -- contents just an integer (no expressions supported)\n  o note $foo.bar[[[2]]][[3]] needs to work\n    $foo[\"bar\"]={\"a\":1,\"b\":{\"x\":3},\"c\":4}\n    $foo[\"bar\"][[[2]]][[1]]  is  \"x\"\n  o parse as walk-through (with {...} special) until . [] [[]] [[[]]]\n    - example $foo.bar[[[2]]][[3]]\n      L1: $* -> foo\n      L2: -> map-index [\"bar\"]\n      L3: positional value 2\n      L4: positional name 3\n  o maybe ... eval as simply composition of classes\n    - level 1 mlrmap -> mlrval -- $foo or $[[2]] or $[[[3]]]\n    - level 2+ mlrval -> mlrval -- [], [[]], [[[]]], or .\n* code-comment why special classes & not just DSL\n  o inside [] [[]] [[[]]] are just int/string (maybe slices?); no expressions\n  o no $[...] with strings\n  o no need for runtime.State\n  o move POC from $cst to $mlrval -- ? or maybe its own package?\n* note that '.' is quite fine in CSV files etc -- also maybe in JSON ........\n  ? so, maybe only enable this with mlr -e? also maybe extended/non-extended at each & every verb -- ?!?\n  ? maybe if extended/non-extended is unspecified, default it to on for json/jsonl input & off otherwise -- ?\n* maybe also 'raise' and 'raise_array' verbs (need better names though)\n\n----------------------------------------------------------------\nTSV etc\n\n? also: some escapes perhaps for dkvp, xtab, pprint -- ?\n  o nidx is a particular pure-text, leave-as-is\n? try out nidx single-line w/ \\001, \\002 FS/PS & \\n or \\n\\n RS\n  o make/publicize a shorthand for this -- ?\n  o --words && --lines & --paragraphs -- ?\n\n----------------------------------------------------------------\nexample pages as feature catch-up:\n* example page for format/scan options\n  o format/unformat\n    x=unformat(1,2); x; string(x); is_error(x)\n  o strmatch\n  o =~\n* separate examples section from (new) FAQs section\n* mlr split -- needs an example page along with the tee DSL function\n  o narrative about in-memory, shard-out to workers, holdouts, sample/bootstrap, etc etc.\n  o ulimit note\n* new slwin/ewma example entry, with ccump and pgr\n  o slwin --prune (or somesuch) to only emit averages over full windows -- ?\n\n----------------------------------------------------------------\ninference:\n\n* inf/nan (unquoted) -> DSL\n  o webdocs as in #933 description\n* for data files: --symbol-true yes --symbol-false off --symbol-infinity inf --symbol-not-available N/A\n\n----------------------------------------------------------------\n! sysdate, sysdate_local; datediff ...\n\n----------------------------------------------------------------\n! strmatch https://github.com/johnkerl/miller/issues/77#issuecomment-538790927\n\n----------------------------------------------------------------\n* make a lag-by-n and lead-by-n\n\n----------------------------------------------------------------\n! rank\n\n----------------------------------------------------------------\n! CSV default unsparsify ... note this must trust the *first* record .......\n* CSV: acceptance somehow for \\\" in place of \"\"\n  o & more flex more generally\n\n----------------------------------------------------------------\n! quoted NIDX\n  - how with whitespace regex -- ?\n! quoted DKVP\n  - what about csvlite-style -- ? needs a --dkvplite ?\n! pprint emit on schema change, not all-at-end.\n\n* new columns-to-arrays and arrays-to-columns for stan format\n* transpose ...\n* DKVP/XTAB encodings/decodings for \\n etc; non-lite DKVP reader -- or nah? broken already for these cases\n* csvstat / pandas describe\n* r-strings/implicit-r/297: double-check end of reference-main-data-types.md.in\n* non-streaming DSL-enabled cut: https://github.com/johnkerl/miller/discussions/613\n\n* pv: 'mlr --prepipex pv --gzin tail -n 10 ~/tmp/zhuge.gz' needs --gzin & --prepipex both\n  o plus corresponding docwork\n* -W to mlr main also -- so it can be used with .mlrrc\n\n? json-triple-quote -- what can be done here?\n? dotted-syntax support in verbs?\n? full format-string parser for corner cases like \"X%08lldX\"\n? array and string slices on LHS of assignments\n? feature/shorthand for repl newline before prompt\n? meta: nr, nf, keys\n? BIFs as FCFs?\n? IP addresses and ranges as a datatype so one could do membership tests like \"if 10.10.10.10 in 10.0.0.0/8\".\n? push/pop/shift/unshift functions\n? IIFEs: 'func f = (func(){ return udf})()'\n? non-top-level func defs\n? support 'x[1][\"a\"]' etc notation in various verbs?\n? sort within nested data structures?\n? ast-parex separate mlr auxents entrypoint?\n? het ifmt-reading\n  - separate out InputFormat into per-file (or tbd) & have autodetect on file endings -- ?\n  - maybe a TBD reader -- ?\n  - InputFormat into Context\n  - TBD writer -- defer factory until first context?\n  - deeper refactor pulling format out of reader/writer options entirely -- ?\n? multiple-valued return/assign -- ?\n  ? array destructure at LHS for multi-retval assign (maps too?)\n? new file formats\n  o https://brandur.org/logfmt is simply DKVP w/ IFS = space (need dquot though)\n  o https://docs.fluentbit.io/manual/pipeline/parsers/ltsv is just DKVP with IFS tab and IPS colon\n? string/array slices on assignment LHS -- ?\n? zip -- but that is an archive case too not just an encoding case\n  ? miller support for archive-traversal; directory-traversal even w/o zip -- ?\n  ? as 6.1 follow-on work -- ?\n\n* mlr -k\n  o various test cases\n  o OLH re limitations\n  o check JSON-parser x 2 -- is there really a 'restart'?\n    - infinite-loop avoidance for sure\n\n================================================================\nUX\n\n? NF?\n\n! bnf fix for '[[' ']]' etc -- make it a nesting of singles. since otherwise no '[[3,4]]' literals :(\n! broadly rethink os.Exit, especially as affecting mlr repl\n\n* consider expanding '(error)' to have more useful error-text\n* sync-print option; or (yuck) another xprint variant; or ...; emph dump/eprint\n* strptime w/ ...00.Z -> error\n* short 'asserting' functions (absent/error); and/or strict or somesuch (DSL, or global ...)\n* header-only csv ... reminder ...\n* bash completion script https://github.com/johnkerl/miller/issues/77#issuecomment-308247402\n  https://iridakos.com/programming/2018/03/01/bash-programmable-completion-tutorial#:~:text=Bash%20completion%20is%20a%20functionality,key%20while%20typing%20a%20command.\n* tilde-expand for REPL load/open: if '~' is at the start of the string, run it though 'sh -c echo'\n  o or, simpler, just slice[1:] and prepend with os.Getenv(\"HOME\")\n\n? fmtnum(98, \"%3d%%\") -- ? workaround: fmtnum(98, \"%3d\") . \"%\"\n? main-level (verb-level?) flag for \",\" -> X in verbs -- in case commas in field names\n? trace-mode ?\n? $0 as raw-record string -- ? would make mlr grep simpler and more natural ...\n\n================================================================\nDOC\n\n* issue on gnu parallel -> link to scripting page\n\n* https://stackoverflow.com/questions/71011603/is-there-a-simple-way-to-convert-a-csv-with-0-indexed-paths-as-keys-to-json-with/71015190#71015190\n\n! slwin / unformat narrative:\n  o prototype in DSL\n  o mlr put -f / mlr -s\n  o and, if it's frequent then submit a feature request b/c other people probably also would like it! :)\n\n! link to SE table ...\n  https://github.com/johnkerl/miller/discussions/609#discussioncomment-1115715\n\n* put -f link in scrpting.html\n* no --load in .mlrrc b/c\n  https://github.com/johnkerl/miller/security/advisories/GHSA-mw2v-4q78-j2cw\n  (system() in begin{})\n  but suggest alias\n\n* surface readme-versions.md @ install & tell them how to get current\n  o in particular, older distros won't auto-update\n\n* how-to-contribute @ rmd\n* more clear miller docs == head\n\n* go version & why not generics (not all distros w/ newer go compilers)\n\n* document the fill-empty verb in\n  https://miller.readthedocs.io/en/latest/reference-main-null-data/#rules-for-null-handling\n\n* mlr R numpy/scipy/pandas ref.\n* ffmts page <-> R read.table read.csv ...\n* https://github.com/agarrharr/awesome-cli-apps#data-manipulation\n\n* \"Miller, if I understand correctly, was born for those who already frequented\n  the command line, awk, for users with at least average data skills. While for\n  me, a basic user, it made me discover how it gives the possibility of\n  analyzing and transforming data, even complex ones, with a very low learning\n  curve.\"\n\n* document cloudthings, e.g.\n  o go.yml\n  o codespell.yml\n    - codespell --check-filenames --skip *.csv,*.dkvp,*.txt,*.js,*.html,*.map,./tags,./test/cases --ignore-words-list denom,inTerm,inout,iput,nd,nin,numer,Wit,te,wee\n  o readthedocs triggers\n* doc\n  o wut h1 spacing before/after ...\n  o shell-commands: while-read example from issues\n  E reference-dsl-user-defined-functions: UDSes -> non-factorial example -- maybe some useful aggregator\n  o reference-main-arithmetic: ? test stats1/step -F flag\n  o reference-dsl-control-structures:\n    e while (NR < 10) will never terminate as NR is only incremented between\n      records -> and each expression is invoked once per record so once for NR=1,\n      once for NR=2, etc.\n  o C-style triple-for loops: loop to NR -> NO!!!\n  o Since uninitialized out-of-stream variables default to 0 for\n    addition/subtraction and 1 for multiplication when they appear on expression\n    right-hand sides (not quite as in awk, where they'd default to 0 either way)\n    <-> xlink to other page\n  r fzf-ish w/ head -n 4, --from, up-arrow & append verb, then cat -- find & update the existing section\n  ! https://github.com/johnkerl/miller/issues/653 -- stats1 w/ empties? check stats2\n    - needs UTs as well\n  o while-read example from issues\nw contact re https://jsonlines.org/on_the_web/\n* verslink old relnotes\n* single UT, hard to invoke w/ new full go.mod path\n  go test $(ls pkg/lib/*.go|grep -v test) pkg/lib/unbackslash_test.go\n  etc\n* file-formats: NIDX link to headerless CSV\n* window.mlr, window2.mlr -> doc somewhere\n* sec2gmt --millis/--micros/--nanos doc\n* sort-within-records --recursive doc\n* back-incompat:\n  mlr -n put $vflag '@x=1; dump > stdout, @x'\n  mlr -n put $vflag '@x=1; dump > stdout @x'\n* single cheatsheet page -- put out RFH?\n  https://twitter.com/icymi_py/status/1426622817785765898/photo/1\n* more about HTTP logs in miller -- doc and encapsulate:\n  mlr --icsv --implicit-csv-header --ifs space --oxtab --from elb-log put -q 'print $27'\n* hofs section on typedecls\n* write up how git status after test should show any missed extra-outs\n* docs nest simplers now that we have getoptish\n* zlib: n.b. brew install pigz, then pigz -z\n* doc shift/unshift as using [2:] and append\n* comment schema-change supported only in csvlite reader, not csv reader\n* consider -w/-W to stderr not stdout -- ?\n\n? grep out all error message from regtest outputs & doc them all & make sure index-searchable at readthedocs\n\n ===============================================================\nTESTING\n\n! pos/neg 0x/0b/0o UTs\n\n* RT ngrams.sh -v -o 1 one-word-list.txt\n* JIT UT:\n  o JSON I/O\n  o mlrval_cmp.go\n  o mv from-array/from-map w/ copy & mutate orig & check new -- & vice versa\n  o dash-O and octal infer\n  o populate each bifs/X_test.go for each bifs/X.go etc etc\n* xtab splitter UT; nidx too\n* hofs+typedecls RT cases\n* UT per se for lrec ops\n\n================================================================\nPERFORMANCE\n\n! profile sort\n\n* JSON perf -- try alternate packages to encoding/json\n* more perf?\n  - batchify source-quench -- experiment 1st\n  - further channelize (CSV-first focus) mlrval infer vs record-put ?\n  ? coalesce errchan & done-writing w/ Err to RAC, and close-chan *and* EOSMarker -- ?\n\n================================================================\nCODE-NEATENS / QUALITY\n\n* go-style assert.Equal(t, actual, expected) in place of R style expect_equal(expected, actual) in .../*_test.go\n\n! ast namings etc\n  ? make a simple NodeFromToken & have all interface{} be *ASTNode, not *token.Token\n! broad commenting pass / TODO\n\n* []Mlrval -> []*Mlrval ?\n* cmp for array & map\no JIT neatens\n  - carefully read all $mlv files\n  - check $types & $bifs as well\n  - proofread all mlrval_cmp.go dispo mxes\n  - update rmds x several\n* https://staticcheck.io/docs\n  o lots of nice little things to clean up -- no bugs per se, all stylistic i *think* ...\n* funcptr away the ifs/ifsregex check in record-readers\n* all case-files could use top-notes\n* godoc neatens at func/const/etc level\n* unset, unassign, remove -- too many different names. also assign/put ... maybe stick w/ 2?\n* check triple-dash at mlr fill-down-h ; check others\n* clean up unused exitCode arg in sort/put usage.\n  o also document pre/post conditions for flag and non-flag usages x all mappers\n* neaten mlr gap -g (default) print\n* typedecls w/ for-multi: C semantics 'k1: data k2: a:x v:1', sigh ...\n* fill-down make columns required. also, --all.\n* bitwise_and_dispositions et al should not have _absn for collections -- _erro instead\n* libify errors.New callsites for DSL/CST\n* record-readers are fully in-channel/loop; record-writers are multi with in-channel/loop being\n  done by ChannelWriter, which is very small. opportunity to refactor.\n* widen DSL coverage\n  o err-return for array/map get/put if incorrect types ... currently go-void ...\n    ! the DSL needs a full, written-down-and-published spell-out of error-eval semantics\n* double-check rand-seeding\n  o all rand invocations should go through the seeder for UT/other determinism\n* dev-note on why `int` not `int64` -- processor-arch & those who most need it get it\n\n? gzout, bz2out -- ? make sure this works through tee? bleah ...\n? golinter?\n? go exe 17MB b/c gocc -- gogll ?\n\n================================================================\nINFO\n\ni @all-contributors please add @person for ideas\ni @all-contributors please add @person for documentation\n\ni https://en.wikipedia.org/wiki/Delimiter#Delimiter_collision\n\ni https://framework.frictionlessdata.io/docs/tutorials/working-with-cli/\n\ni https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/\n\ni go tool nm -size mlr | sort -nrk 2\n\ni https://go.dev/play/p/hrB77U3d0S3?v=gotip\n\n* godoc notes:\n  o go get golang.org/x/tools/cmd/godoc\n  o dev mode:\n    godoc -http=:6060 -goroot .\n  o publish:\n    godoc -http=:6060 -goroot .\n    cd ~/tmp/bar\n    wget -p -k http://localhost:6060/pkg\n    mv localhost:6060 miller6\n    file:///Users/kerl/tmp/bar/miller6/pkg\n    maybe publish to ISP space\n\n* pkg graph:\n  go get github.com/kisielk/godepgraph\n  godepgraph miller | dot -Tpng -o ~/Desktop/mlrdeps.png\n  flamegraph etc double-check\n\n* more data formats:\n  https://indico.cern.ch/event/613842/contributions/2585787/attachments/1463230/2260889/pivarski-data-formats.pdf\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "vim",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}