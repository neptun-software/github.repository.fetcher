{
  "metadata": {
    "timestamp": 1736567742301,
    "page": 329,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "michenriksen/aquatone",
      "stars": 5689,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1103515625,
          "content": "aquatone\nvendor/\nbuild/\nscreenshots/\nheaders/\nhtml/\naquatone_report.html\naquatone_urls.txt\naquatone_session.json\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 5.4384765625,
          "content": "# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [1.7.0]\n\n### Added\n- New `session:start` and `session:end` events have been introduced in the event bus to allow agents to perform bootstrap\nand cleanup tasks if needed\n- A temporary user directory is now created for the Chrome/Chromium process and additional command line flags have been\nadded to increase compartmentalization\n\n### Changed\n- Production versions of Vue.js and Vue Router are now used in the HTML report for increased performance\n- List of user agents have been updated to current list of most common user agents\n\n## [1.7.0-beta.2]\n\n### Fixed\n- The pagination logic in the new HTML report would skip the page or cluster at index 0 as the `v-for` function on an integer value in Vue.js starts from 1 and not 0\n\n## [1.7.0-beta]\n\n### Added\n- Session data will now be written to output directory as `aquatone_session.json`\n- New `url_hostname_resolver` agent that resolves page's hostnames to IP addresses\n- New `url_page_title_extractor` that extracts HTML page titles from responsive pages\n- New command line flag `-template-path` to specify a custom template to use for the HTML report\n- New command line flag `-session` to load a previous Aquatone session file and generate a report on its data\n- Aquatone is now compiled for ARM64 in `build.sh`\n\n### Changed\n- Bigger refactoring of session and pages\n- **New [Vue.js](https://vuejs.org/) powered HTML report with lots of new cool stuff:**\n   - New look and feel\n   - Pages can now be viewed in different modes:\n      - **By Similarity**: Pages are displayed in clusters by their HTML structure similarity\n      - **By Hostname:** Pages are displayed in clusters by their hostname\n      - **Single Pages:** Pages are shown one-by-one with bigger screenshots and response headers (oldschool Aquatone style)\n   - **[Vis.js](http://visjs.org/) powered network graph view** to see relations between pages, IP addresses and technologies\n   - Page clusters are now rendered in a paginated carousel view instead of horizontally scrollable lanes\n   - Clusters and pages are paginated to improve performance on large reports\n   - Page titles are now shown for pages\n\n### Removed\n- `url_logger` agent (no longer needed)\n\n## [1.6.0]\n\n### Fixed\n- The Nmap/Masscan XML report parser did not ignore closed/filtered ports. It now only works on ports with state `open`.\n\n### Added\n- Support for processing of multiple URLs on the same host by appending hash of URL path and fragment to file names\n- Support for defining default output directory in `AQUATONE_OUT_PATH` environment variable\n\n## [1.5.0]\n\n### Added\n- Automatic SSL/TLS detection on non-standard ports\n- URL Screenshotter agent now takes extra steps to ensure that the browser process is killed after use\n- Version flag to output current version (woah!!!)\n\n### Changed\n- Packages and other dependencies have been updated to latest versions\n- User-Agent list has been updated to current most common agents\n- Wappalyzer technology fingerprints have been updated\n\n## [1.4.3]\n\n### Fixed\n- The Sub Resource Integrity attribute on the external CSS resource in the HTML report caused it to not load as the file had changed. Removed SRI on external CSS resource\n\n## [1.4.2]\n\n### Added\n- Responsive URLs are now written to `aquatone_urls.txt`. Thanks [eur0pa](https://github.com/eur0pa)!\n- A warning is printed when older versions of Chromium is detected which has known problems with screenshotting HTTPS URLs\n\n### Fixed\n- Aquatone had trouble processing a single or very few targets. A small delay has been added to give agents time to emit all their events\n\n## [1.4.1]\n\n### Changed\n- List of User-Agents have been updated with most recent list of common User-Agents\n\n### Fixed\n- Random User-Agent and other spoofing request headers were not set correctly when requesting URLs. Thanks to [eur0pa](https://github.com/eur0pa) for pointing it out!\n\n## [1.4.0]\n\n### Added\n- Passive fingerprinting of web technology in use on websites with Wappalyzer fingerprints\n- Detection of domain takeover vulnerabilities across 20 different services\n\n## [1.3.2]\n\nComplete rewrite and simplification of Aquatone. Now written in Go and focused on reporting and screenshotting.\n\n### Added\n- Extraction of hosts, IPs and URLs from arbitrary data piped to Aquatone\n- Parsing of Nmap/Masscan XML files\n- Clustering of websites with similar structure in HTML report\n\n### Removed\n- Domain discovery (`aquatone-discover`)\n- Domain takeover discovery (`aquatone-takeover`)\n\n[Unreleased]: https://github.com/michenriksen/aquatone/compare/v1.7.0...HEAD\n[1.7.0]: https://github.com/michenriksen/aquatone/compare/v1.7.0-beta.2...v1.7.0\n[1.7.0-beta.2]: https://github.com/michenriksen/aquatone/compare/v1.7.0-beta...v1.7.0-beta.2\n[1.7.0-beta]: https://github.com/michenriksen/aquatone/compare/v1.6.0...v1.7.0-beta\n[1.6.0]: https://github.com/michenriksen/aquatone/compare/v1.5.0...v1.6.0\n[1.5.0]: https://github.com/michenriksen/aquatone/compare/v1.4.3...v1.5.0\n[1.4.3]: https://github.com/michenriksen/aquatone/compare/v1.4.2...v1.4.3\n[1.4.2]: https://github.com/michenriksen/aquatone/compare/v1.4.1...v1.4.2\n[1.4.1]: https://github.com/michenriksen/aquatone/compare/v1.4.0...v1.4.1\n[1.4.0]: https://github.com/michenriksen/aquatone/compare/v1.3.2...v1.4.0\n[1.3.2]: https://github.com/michenriksen/aquatone/compare/v1.3.2\n"
        },
        {
          "name": "Gopkg.lock",
          "type": "blob",
          "size": 5.060546875,
          "content": "# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.\n\n\n[[projects]]\n  digest = \"1:573fa46f8d413d4bc3f7cc5e86b2c43cb21559f4fb0a19d9874d228e28fdc07c\"\n  name = \"github.com/PuerkitoBio/goquery\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"2d2796f41742ece03e8086188fa4db16a3a0b458\"\n  version = \"v1.5.0\"\n\n[[projects]]\n  digest = \"1:66b3310cf22cdc96c35ef84ede4f7b9b370971c4025f394c89a2638729653b11\"\n  name = \"github.com/andybalholm/cascadia\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"901648c87902174f774fac311d7f176f8647bdaa\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:e2a1ff1174d564ed4b75a62757f4a9081ed3b8c99ed17e47eb252b048b4ff018\"\n  name = \"github.com/asaskevich/EventBus\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"d46933a94f05c6657d7b923fcf5ac563ee37ec79\"\n\n[[projects]]\n  digest = \"1:865079840386857c809b72ce300be7580cb50d3d3129ce11bf9aa6ca2bc1934a\"\n  name = \"github.com/fatih/color\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"5b77d2a35fb0ede96d138fc9a99f5c9b6aef11b4\"\n  version = \"v1.7.0\"\n\n[[projects]]\n  digest = \"1:582b704bebaa06b48c29b0cec224a6058a09c86883aaddabde889cd1a5f73e1b\"\n  name = \"github.com/google/uuid\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"0cd6bf5da1e1c83f8b45653022c74f71af0538a4\"\n  version = \"v1.1.1\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:d06a6c979a16ebfb8969f6f188bb6b014d96ed56b8adbf3bf63a07ff5e0e7075\"\n  name = \"github.com/lair-framework/go-nmap\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"3b9bafddefee56a2884c49e2da6894bb1fe6d40c\"\n\n[[projects]]\n  digest = \"1:c658e84ad3916da105a761660dcaeb01e63416c8ec7bc62256a9b411a05fcd67\"\n  name = \"github.com/mattn/go-colorable\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"167de6bfdfba052fa6b2d3664c8f5272e23c9072\"\n  version = \"v0.0.9\"\n\n[[projects]]\n  digest = \"1:e150b5fafbd7607e2d638e4e5cf43aa4100124e5593385147b0a74e2733d8b0d\"\n  name = \"github.com/mattn/go-isatty\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"c2a7a6ca930a4cd0bc33a3f298eb71960732a3a7\"\n  version = \"v0.0.7\"\n\n[[projects]]\n  digest = \"1:7aefb397a53fc437c90f0fdb3e1419c751c5a3a165ced52325d5d797edf1aca6\"\n  name = \"github.com/moul/http2curl\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"9ac6cf4d929b2fa8fd2d2e6dec5bb0feb4f4911d\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  digest = \"1:0d72291ecb10a37e75f0484eb8e700b0cffbd2501f6e63b282028dcc7830d33c\"\n  name = \"github.com/mvdan/xurls\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"e52e821cbfe8fe163ff6f8628ab5869b11fc05af\"\n  version = \"v2.0.0\"\n\n[[projects]]\n  digest = \"1:d776f3e95774a8719f2e57fabbbb33103035fe072dcf6f1864f33abd17b753e5\"\n  name = \"github.com/parnurzeal/gorequest\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"a578a48e8d6ca8b01a3b18314c43c6716bb5f5a3\"\n  version = \"v0.2.15\"\n\n[[projects]]\n  digest = \"1:cf31692c14422fa27c83a05292eb5cbe0fb2775972e8f1f8446a71549bd8980b\"\n  name = \"github.com/pkg/errors\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"ba968bfe8b2f7e042a574c888954fccecfa385b4\"\n  version = \"v0.8.1\"\n\n[[projects]]\n  digest = \"1:0028cb19b2e4c3112225cd871870f2d9cf49b9b4276531f03438a88e94be86fe\"\n  name = \"github.com/pmezard/go-difflib\"\n  packages = [\"difflib\"]\n  pruneopts = \"UT\"\n  revision = \"792786c7400a136282c1664665ae0a8db921c6c2\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:bb90467981c5e812c4d1c78e498a1416b04cb5149dc5fa2200ab758c37488f6f\"\n  name = \"github.com/remeh/sizedwaitgroup\"\n  packages = [\".\"]\n  pruneopts = \"UT\"\n  revision = \"5e7302b12ccef91dce9fde2f5bda6d5c7ea5d2eb\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:88e27d7a91ad3aafb5184e55268c3cbf976ca8ba8b14259b01f80b05f93f0493\"\n  name = \"golang.org/x/net\"\n  packages = [\n    \"html\",\n    \"html/atom\",\n    \"idna\",\n    \"publicsuffix\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"4829fb13d2c62012c17688fa7f629f371014946d\"\n\n[[projects]]\n  branch = \"master\"\n  digest = \"1:157e5158a7f29d6633eed502880463aa43de3c36d451c7051591efd12f455ac8\"\n  name = \"golang.org/x/sys\"\n  packages = [\"unix\"]\n  pruneopts = \"UT\"\n  revision = \"a129542de9ae0895210abff9c95d67a1f33cb93d\"\n\n[[projects]]\n  digest = \"1:8d8faad6b12a3a4c819a3f9618cb6ee1fa1cfc33253abeeea8b55336721e3405\"\n  name = \"golang.org/x/text\"\n  packages = [\n    \"collate\",\n    \"collate/build\",\n    \"internal/colltab\",\n    \"internal/gen\",\n    \"internal/language\",\n    \"internal/language/compact\",\n    \"internal/tag\",\n    \"internal/triegen\",\n    \"internal/ucd\",\n    \"language\",\n    \"secure/bidirule\",\n    \"transform\",\n    \"unicode/bidi\",\n    \"unicode/cldr\",\n    \"unicode/norm\",\n    \"unicode/rangetable\",\n  ]\n  pruneopts = \"UT\"\n  revision = \"342b2e1fbaa52c93f31447ad2c6abc048c63e475\"\n  version = \"v0.3.2\"\n\n[solve-meta]\n  analyzer-name = \"dep\"\n  analyzer-version = 1\n  input-imports = [\n    \"github.com/PuerkitoBio/goquery\",\n    \"github.com/asaskevich/EventBus\",\n    \"github.com/fatih/color\",\n    \"github.com/google/uuid\",\n    \"github.com/lair-framework/go-nmap\",\n    \"github.com/mvdan/xurls\",\n    \"github.com/parnurzeal/gorequest\",\n    \"github.com/pmezard/go-difflib/difflib\",\n    \"github.com/remeh/sizedwaitgroup\",\n    \"golang.org/x/net/html\",\n  ]\n  solver-name = \"gps-cdcl\"\n  solver-version = 1\n"
        },
        {
          "name": "Gopkg.toml",
          "type": "blob",
          "size": 1.30078125,
          "content": "# Gopkg.toml example\n#\n# Refer to https://golang.github.io/dep/docs/Gopkg.toml.html\n# for detailed Gopkg.toml documentation.\n#\n# required = [\"github.com/user/thing/cmd/thing\"]\n# ignored = [\"github.com/user/project/pkgX\", \"bitbucket.org/user/project/pkgA/pkgY\"]\n#\n# [[constraint]]\n#   name = \"github.com/user/project\"\n#   version = \"1.0.0\"\n#\n# [[constraint]]\n#   name = \"github.com/user/project2\"\n#   branch = \"dev\"\n#   source = \"github.com/myfork/project2\"\n#\n# [[override]]\n#   name = \"github.com/x/y\"\n#   version = \"2.4.0\"\n#\n# [prune]\n#   non-go = false\n#   go-tests = true\n#   unused-packages = true\n\n\n[prune]\n  go-tests = true\n  unused-packages = true\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/remeh/sizedwaitgroup\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/asaskevich/EventBus\"\n\n[[constraint]]\n  name = \"github.com/fatih/color\"\n  version = \"1.7.0\"\n\n[[constraint]]\n  name = \"github.com/parnurzeal/gorequest\"\n  version = \"0.2.15\"\n\n[[constraint]]\n  name = \"github.com/mvdan/xurls\"\n  version = \"2.0.0\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"golang.org/x/net\"\n\n[[constraint]]\n  name = \"github.com/pmezard/go-difflib\"\n  version = \"1.0.0\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/lair-framework/go-nmap\"\n\n[[constraint]]\n  name = \"github.com/PuerkitoBio/goquery\"\n  version = \"1.4.1\"\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 Michael Henriksen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0146484375,
          "content": "# AQUATONE\n\nAquatone is a tool for visual inspection of websites across a large amount of hosts and is convenient for quickly gaining an overview of HTTP-based attack surface.\n\n## Installation\n\n1. Install [Google Chrome](https://www.google.com/chrome/) or [Chromium](https://www.chromium.org/getting-involved/download-chromium) browser -- **Note:** Google Chrome is currently giving unreliable results when running in *headless* mode, so it is recommended to install Chromium for the best results.\n2. Download the [latest release](https://github.com/michenriksen/aquatone/releases/latest) of Aquatone for your operating system.\n3. Uncompress the zip file and move the `aquatone` binary to your desired location. You probably want to move it to a location in your `$PATH` for easier use.\n\n### Compiling the source code\n\nIf you for some reason don't trust the pre-compiled binaries, you can also compile the code yourself. **You are on your own if you want to do this. I do not support compiling problems. Good luck with it!**\n\n## Usage\n\n### Command-line options:\n\n```\n  -chrome-path string\n    \tFull path to the Chrome/Chromium executable to use. By default, aquatone will search for Chrome or Chromium\n  -debug\n    \tPrint debugging information\n  -http-timeout int\n    \tTimeout in miliseconds for HTTP requests (default 3000)\n  -nmap\n    \tParse input as Nmap/Masscan XML\n  -out string\n    \tDirectory to write files to (default \".\")\n  -ports string\n    \tPorts to scan on hosts. Supported list aliases: small, medium, large, xlarge (default \"80,443,8000,8080,8443\")\n  -proxy string\n    \tProxy to use for HTTP requests\n  -resolution string\n    \tscreenshot resolution (default \"1440,900\")\n  -save-body\n    \tSave response bodies to files (default true)\n  -scan-timeout int\n    \tTimeout in miliseconds for port scans (default 100)\n  -screenshot-timeout int\n    \tTimeout in miliseconds for screenshots (default 30000)\n  -session string\n    \tLoad Aquatone session file and generate HTML report\n  -silent\n    \tSuppress all output except for errors\n  -template-path string\n    \tPath to HTML template to use for report\n  -threads int\n    \tNumber of concurrent threads (default number of logical CPUs)\n  -version\n    \tPrint current Aquatone version\n```\n\n### Giving Aquatone data\n\nAquatone is designed to be as easy to use as possible and to integrate with your existing toolset with no or minimal glue. Aquatone is started by piping output of a command into the tool. It doesn't really care how the piped data looks as URLs, domains, and IP addresses will be extracted with regular expression pattern matching. This means that you can pretty much give it output of any tool you use for host discovery.\n\nIPs, hostnames and domain names in the data will undergo scanning for ports that are typically used for web services and transformed to URLs with correct scheme.  If the data contains URLs, they are assumed to be alive and do not undergo port scanning.\n\n**Example:**\n\n    $ cat targets.txt | aquatone\n\n### Output\n\nWhen Aquatone is done processing the target hosts, it has created a bunch of files and folders in the current directory:\n\n - **aquatone_report.html**: An HTML report to open in a browser that displays all the collected screenshots and response headers clustered by similarity.\n - **aquatone_urls.txt**: A file containing all responsive URLs. Useful for feeding into other tools.\n - **aquatone_session.json**: A file containing statistics and page data. Useful for automation.\n - **headers/**: A folder with files containing raw response headers from processed targets\n - **html/**: A folder with files containing the raw response bodies from processed targets. If you are processing a large amount of hosts, and don't need this for further analysis, you can disable this with the `-save-body=false` flag to save some disk space.\n - **screenshots/**: A folder with PNG screenshots of the processed targets\n\nThe output can easily be zipped up and shared with others or archived.\n\n#### Changing the output destination\n\nIf you don't want Aquatone to create files in the current working directory, you can specify a different location with the `-out` flag:\n\n    $ cat hosts.txt | aquatone -out ~/aquatone/example.com\n\nIt is also possible to set a permanent default output destination by defining an environment variable:\n\n    export AQUATONE_OUT_PATH=\"~/aquatone\"\n\n\n### Specifying ports to scan\n\nBe default, Aquatone will scan target hosts with a small list of commonly used HTTP ports: 80, 443, 8000, 8080 and 8443. You can change this to your own list of ports with the `-ports` flag:\n\n    $ cat hosts.txt | aquatone -ports 80,443,3000,3001\n\nAquatone also supports aliases of built-in port lists to make it easier for you:\n\n - **small**: 80, 443\n - **medium**: 80, 443, 8000, 8080, 8443 (same as default)\n - **large**: 80, 81, 443, 591, 2082, 2087, 2095, 2096, 3000, 8000, 8001, 8008, 8080, 8083, 8443, 8834, 8888\n - **xlarge**: 80, 81, 300, 443, 591, 593, 832, 981, 1010, 1311, 2082, 2087, 2095, 2096, 2480, 3000, 3128, 3333, 4243, 4567, 4711, 4712, 4993, 5000, 5104, 5108, 5800, 6543, 7000, 7396, 7474, 8000, 8001, 8008, 8014, 8042, 8069, 8080, 8081, 8088, 8090, 8091, 8118, 8123, 8172, 8222, 8243, 8280, 8281, 8333, 8443, 8500, 8834, 8880, 8888, 8983, 9000, 9043, 9060, 9080, 9090, 9091, 9200, 9443, 9800, 9981, 12443, 16080, 18091, 18092, 20720, 28017\n\n**Example:**\n\n    $ cat hosts.txt | aquatone -ports large\n\n\n### Usage examples\n\nAquatone is designed to play nicely with all kinds of tools. Here's some examples:\n\n#### Amass DNS enumeration\n\n[Amass](https://github.com/OWASP/Amass) is currently my preferred tool for enumerating DNS. It uses a bunch of OSINT sources as well as active brute-forcing and clever permutations to quickly identify hundreds, if not thousands, of subdomains on a  domain:\n\n```bash\n$ amass -active -brute -o hosts.txt -d yahoo.com\nalerts.yahoo.com\nads.yahoo.com\nam.yahoo.com\n- - - SNIP - - -\nprd-vipui-01.infra.corp.gq1.yahoo.com\ncp103.mail.ir2.yahoo.com\nprd-vipui-01.infra.corp.bf1.yahoo.com\n$ cat hosts.txt | aquatone\n```\n\nThere are plenty of other DNS enumeration tools out there and Aquatone should work just as well with any other tool:\n\n- [Sublist3r](https://github.com/aboul3la/Sublist3r)\n- [Subfinder](https://github.com/subfinder/subfinder)\n- [Knock](https://github.com/guelfoweb/knock)\n- [Fierce](https://www.aldeid.com/wiki/Fierce)\n- [Gobuster](https://github.com/OJ/gobuster)\n\n#### Nmap or Masscan\n\nAquatone can make a report on hosts scanned with the [Nmap](https://nmap.org/) or [Masscan](https://github.com/robertdavidgraham/masscan) portscanner. Simply feed Aquatone the XML output and give it the `-nmap` flag to tell it to parse the input as Nmap/Masscan XML:\n\n    $ cat scan.xml | aquatone -nmap\n\n### Credits\n\n- Thanks to [EdOverflow](https://twitter.com/EdOverflow) for the [can-i-take-over-xyz](https://github.com/EdOverflow/can-i-take-over-xyz/) project which Aquatone's domain takeover capability is based on.\n- Thanks to [Elbert Alias](https://github.com/AliasIO) for the [Wappalyzer](https://github.com/AliasIO/Wappalyzer) project's technology fingerprints which Aquatone's technology fingerprinting capability is based on.\n"
        },
        {
          "name": "agents",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.427734375,
          "content": "#!/bin/bash\n\nBUILD_FOLDER=build\nVERSION=$(cat core/banner.go | grep Version | cut -d '\"' -f 2)\n\nbin_dep() {\n  BIN=$1\n  which $BIN > /dev/null || { echo \"[-] Dependency $BIN not found !\"; exit 1; }\n}\n\ncreate_exe_archive() {\n  bin_dep 'zip'\n\n  OUTPUT=$1\n\n  echo \"[*] Creating archive $OUTPUT ...\"\n  zip -j \"$OUTPUT\" aquatone.exe ../README.md ../LICENSE.txt > /dev/null\n  rm -rf aquatone aquatone.exe\n}\n\ncreate_archive() {\n  bin_dep 'zip'\n\n  OUTPUT=$1\n\n  echo \"[*] Creating archive $OUTPUT ...\"\n  zip -j \"$OUTPUT\" aquatone ../README.md ../LICENSE.txt > /dev/null\n  rm -rf aquatone aquatone.exe\n}\n\nbuild_linux_amd64() {\n  echo \"[*] Building linux/amd64 ...\"\n  GOOS=linux GOARCH=amd64 go build -o aquatone ..\n}\n\nbuild_linux_arm64() {\n  echo \"[*] Building linux/arm64 ...\"\n  GOOS=linux GOARCH=arm go build -o aquatone ..\n}\n\nbuild_macos_amd64() {\n  echo \"[*] Building darwin/amd64 ...\"\n  GOOS=darwin GOARCH=amd64 go build -o aquatone ..\n}\n\nbuild_windows_amd64() {\n  echo \"[*] Building windows/amd64 ...\"\n  GOOS=windows GOARCH=amd64 go build -o aquatone.exe ..\n}\n\nrm -rf $BUILD_FOLDER\nmkdir $BUILD_FOLDER\ncd $BUILD_FOLDER\n\nbuild_linux_amd64 && create_archive aquatone_linux_amd64_$VERSION.zip\nbuild_linux_arm64 && create_archive aquatone_linux_arm64_$VERSION.zip\nbuild_macos_amd64 && create_archive aquatone_macos_amd64_$VERSION.zip\nbuild_windows_amd64 && create_exe_archive aquatone_windows_amd64_$VERSION.zip\nshasum -a 256 * > checksums.txt\n\necho\necho\ndu -sh *\n\ncd --\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 7.2431640625,
          "content": "package main\n\nimport (\n\t\"bufio\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/url\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"github.com/michenriksen/aquatone/agents\"\n\t\"github.com/michenriksen/aquatone/core\"\n\t\"github.com/michenriksen/aquatone/parsers\"\n)\n\nvar (\n\tsess *core.Session\n\terr  error\n)\n\nfunc isURL(s string) bool {\n\tu, err := url.ParseRequestURI(s)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif u.Scheme == \"\" {\n\t\treturn false\n\t}\n\treturn true\n}\n\nfunc hasSupportedScheme(s string) bool {\n\tu, err := url.ParseRequestURI(s)\n\tif err != nil {\n\t\treturn false\n\t}\n\tif u.Scheme == \"http\" || u.Scheme == \"https\" {\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc main() {\n\tif sess, err = core.NewSession(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n\n\tif *sess.Options.Version {\n\t\tsess.Out.Info(\"%s v%s\", core.Name, core.Version)\n\t\tos.Exit(0)\n\t}\n\n\tfi, err := os.Stat(*sess.Options.OutDir)\n\n\tif os.IsNotExist(err) {\n\t\tsess.Out.Fatal(\"Output destination %s does not exist\\n\", *sess.Options.OutDir)\n\t\tos.Exit(1)\n\t}\n\n\tif !fi.IsDir() {\n\t\tsess.Out.Fatal(\"Output destination must be a directory\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tsess.Out.Important(\"%s v%s started at %s\\n\\n\", core.Name, core.Version, sess.Stats.StartedAt.Format(time.RFC3339))\n\n\tif *sess.Options.SessionPath != \"\" {\n\t\tjsonSession, err := ioutil.ReadFile(*sess.Options.SessionPath)\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Unable to read session file at %s: %s\\n\", *sess.Options.SessionPath, err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tvar parsedSession core.Session\n\t\tif err := json.Unmarshal(jsonSession, &parsedSession); err != nil {\n\t\t\tsess.Out.Fatal(\"Unable to parse session file at %s: %s\\n\", *sess.Options.SessionPath, err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tsess.Out.Important(\"Loaded Aquatone session at %s\\n\", *sess.Options.SessionPath)\n\t\tsess.Out.Important(\"Generating HTML report...\")\n\t\tvar template []byte\n\t\tif *sess.Options.TemplatePath != \"\" {\n\t\t\ttemplate, err = ioutil.ReadFile(*sess.Options.TemplatePath)\n\t\t} else {\n\t\t\ttemplate, err = sess.Asset(\"static/report_template.html\")\n\t\t}\n\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Can't read report template file\\n\")\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\treport := core.NewReport(&parsedSession, string(template))\n\t\tf, err := os.OpenFile(sess.GetFilePath(\"aquatone_report.html\"), os.O_RDWR|os.O_CREATE, 0644)\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Error during report generation: %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\terr = report.Render(f)\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Error during report generation: %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tsess.Out.Important(\" done\\n\\n\")\n\t\tsess.Out.Important(\"Wrote HTML report to: %s\\n\\n\", sess.GetFilePath(\"aquatone_report.html\"))\n\t\tos.Exit(0)\n\t}\n\n\tagents.NewTCPPortScanner().Register(sess)\n\tagents.NewURLPublisher().Register(sess)\n\tagents.NewURLRequester().Register(sess)\n\tagents.NewURLHostnameResolver().Register(sess)\n\tagents.NewURLPageTitleExtractor().Register(sess)\n\tagents.NewURLScreenshotter().Register(sess)\n\tagents.NewURLTechnologyFingerprinter().Register(sess)\n\tagents.NewURLTakeoverDetector().Register(sess)\n\n\treader := bufio.NewReader(os.Stdin)\n\tvar targets []string\n\n\tif *sess.Options.Nmap {\n\t\tparser := parsers.NewNmapParser()\n\t\ttargets, err = parser.Parse(reader)\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Unable to parse input as Nmap/Masscan XML: %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t} else {\n\t\tparser := parsers.NewRegexParser()\n\t\ttargets, err = parser.Parse(reader)\n\t\tif err != nil {\n\t\t\tsess.Out.Fatal(\"Unable to parse input.\\n\")\n\t\t\tos.Exit(1)\n\t\t}\n\t}\n\n\tif len(targets) == 0 {\n\t\tsess.Out.Fatal(\"No targets found in input.\\n\")\n\t\tos.Exit(1)\n\t}\n\n\tsess.Out.Important(\"Targets    : %d\\n\", len(targets))\n\tsess.Out.Important(\"Threads    : %d\\n\", *sess.Options.Threads)\n\tsess.Out.Important(\"Ports      : %s\\n\", strings.Trim(strings.Replace(fmt.Sprint(sess.Ports), \" \", \", \", -1), \"[]\"))\n\tsess.Out.Important(\"Output dir : %s\\n\\n\", *sess.Options.OutDir)\n\n\tsess.EventBus.Publish(core.SessionStart)\n\n\tfor _, target := range targets {\n\t\tif isURL(target) {\n\t\t\tif hasSupportedScheme(target) {\n\t\t\t\tsess.EventBus.Publish(core.URL, target)\n\t\t\t}\n\t\t} else {\n\t\t\tsess.EventBus.Publish(core.Host, target)\n\t\t}\n\t}\n\n\ttime.Sleep(1 * time.Second)\n\tsess.EventBus.WaitAsync()\n\tsess.WaitGroup.Wait()\n\n\tsess.EventBus.Publish(core.SessionEnd)\n\ttime.Sleep(1 * time.Second)\n\tsess.EventBus.WaitAsync()\n\tsess.WaitGroup.Wait()\n\n\tsess.Out.Important(\"Calculating page structures...\")\n\tf, _ := os.OpenFile(sess.GetFilePath(\"aquatone_urls.txt\"), os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)\n\tfor _, page := range sess.Pages {\n\t\tfilename := sess.GetFilePath(fmt.Sprintf(\"html/%s.html\", page.BaseFilename()))\n\t\tbody, err := os.Open(filename)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\tstructure, _ := core.GetPageStructure(body)\n\t\tpage.PageStructure = structure\n\t\tf.WriteString(page.URL + \"\\n\")\n\t}\n\tf.Close()\n\tsess.Out.Important(\" done\\n\")\n\n\tsess.Out.Important(\"Clustering similar pages...\")\n\tfor _, page := range sess.Pages {\n\t\tfoundCluster := false\n\t\tfor clusterUUID, cluster := range sess.PageSimilarityClusters {\n\t\t\taddToCluster := true\n\t\t\tfor _, pageURL := range cluster {\n\t\t\t\tpage2 := sess.GetPage(pageURL)\n\t\t\t\tif page2 != nil && core.GetSimilarity(page.PageStructure, page2.PageStructure) < 0.80 {\n\t\t\t\t\taddToCluster = false\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif addToCluster {\n\t\t\t\tfoundCluster = true\n\t\t\t\tsess.PageSimilarityClusters[clusterUUID] = append(sess.PageSimilarityClusters[clusterUUID], page.URL)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif !foundCluster {\n\t\t\tnewClusterUUID := uuid.New().String()\n\t\t\tsess.PageSimilarityClusters[newClusterUUID] = []string{page.URL}\n\t\t}\n\t}\n\tsess.Out.Important(\" done\\n\")\n\n\tsess.Out.Important(\"Generating HTML report...\")\n\tvar template []byte\n\tif *sess.Options.TemplatePath != \"\" {\n\t\ttemplate, err = ioutil.ReadFile(*sess.Options.TemplatePath)\n\t} else {\n\t\ttemplate, err = sess.Asset(\"static/report_template.html\")\n\t}\n\n\tif err != nil {\n\t\tsess.Out.Fatal(\"Can't read report template file\\n\")\n\t\tos.Exit(1)\n\t}\n\treport := core.NewReport(sess, string(template))\n\tf, err = os.OpenFile(sess.GetFilePath(\"aquatone_report.html\"), os.O_RDWR|os.O_CREATE, 0644)\n\tif err != nil {\n\t\tsess.Out.Fatal(\"Error during report generation: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\terr = report.Render(f)\n\tif err != nil {\n\t\tsess.Out.Fatal(\"Error during report generation: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n\tsess.Out.Important(\" done\\n\\n\")\n\n\tsess.End()\n\n\tsess.Out.Important(\"Writing session file...\")\n\terr = sess.SaveToFile(\"aquatone_session.json\")\n\tif err != nil {\n\t\tsess.Out.Error(\"Failed!\\n\")\n\t\tsess.Out.Debug(\"Error: %v\\n\", err)\n\t}\n\n\tsess.Out.Important(\"Time:\\n\")\n\tsess.Out.Info(\" - Started at  : %v\\n\", sess.Stats.StartedAt.Format(time.RFC3339))\n\tsess.Out.Info(\" - Finished at : %v\\n\", sess.Stats.FinishedAt.Format(time.RFC3339))\n\tsess.Out.Info(\" - Duration    : %v\\n\\n\", sess.Stats.Duration().Round(time.Second))\n\n\tsess.Out.Important(\"Requests:\\n\")\n\tsess.Out.Info(\" - Successful : %v\\n\", sess.Stats.RequestSuccessful)\n\tsess.Out.Info(\" - Failed     : %v\\n\\n\", sess.Stats.RequestFailed)\n\n\tsess.Out.Info(\" - 2xx : %v\\n\", sess.Stats.ResponseCode2xx)\n\tsess.Out.Info(\" - 3xx : %v\\n\", sess.Stats.ResponseCode3xx)\n\tsess.Out.Info(\" - 4xx : %v\\n\", sess.Stats.ResponseCode4xx)\n\tsess.Out.Info(\" - 5xx : %v\\n\\n\", sess.Stats.ResponseCode5xx)\n\n\tsess.Out.Important(\"Screenshots:\\n\")\n\tsess.Out.Info(\" - Successful : %v\\n\", sess.Stats.ScreenshotSuccessful)\n\tsess.Out.Info(\" - Failed     : %v\\n\\n\", sess.Stats.ScreenshotFailed)\n\n\tsess.Out.Important(\"Wrote HTML report to: %s\\n\\n\", sess.GetFilePath(\"aquatone_report.html\"))\n}\n"
        },
        {
          "name": "parsers",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.751953125,
          "content": "#!/bin/bash\n\nCURRENT_VERSION=$(cat core/banner.go | grep Version | cut -d '\"' -f 2)\nTO_UPDATE=(\n    core/banner.go\n)\n\nread -p \"[?] Did you remember to update CHANGELOG.md? \"\nread -p \"[?] Did you remember to update README.md with new features/changes? \"\n\necho -n \"[*] Current version is $CURRENT_VERSION. Enter new version: \"\nread NEW_VERSION\necho \"[*] Pushing and tagging version $NEW_VERSION in 5 seconds...\"\nsleep 5\n\nfor file in \"${TO_UPDATE[@]}\"\ndo\n  echo \"[*] Patching $file ...\"\n  sed -i\".bak\" \"s/$CURRENT_VERSION/$NEW_VERSION/g\" $file\n  rm core/banner.go.bak\n  git add $file\ndone\n\ngit commit -m \"Releasing v$NEW_VERSION\"\ngit push\n\ngit tag -a v$NEW_VERSION -m \"Release v$NEW_VERSION\"\ngit push origin v$NEW_VERSION\n\necho\necho \"[*] All done, v$NEW_VERSION released.\"\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}