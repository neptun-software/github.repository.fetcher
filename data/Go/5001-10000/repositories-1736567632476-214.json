{
  "metadata": {
    "timestamp": 1736567632476,
    "page": 214,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "StackExchange/blackbox",
      "stars": 6700,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.111328125,
          "content": "bin/** text eol=lf\ntools/** text eol=lf\nMakefile text eol=lf\nPortfile text eol=lf\nblackbox.plugin.zsh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6142578125,
          "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\ndevelop-eggs/\ndist/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n\n# Mr Developer\n.mr.developer.cfg\n.project\n.pydevproject\n\n# Rope\n.ropeproject\n\n# Django stuff:\n*.log\n*.pot\n\n# Sphinx documentation\ndocs/_build/\n\n# macOS\n.DS_Store\n\n# Blackbox\nbbintegration\n.*.swp\n/integrationTest/.blackbox\n\n# golang\n/vendor/\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.0458984375,
          "content": "Tom Limoncelli <tlimoncelli@stackexchange.com>\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.8857421875,
          "content": "Release v1.20220610\n\nNOTE: I don't have a lot of time to commit to this project.  I'd gladly accept help, especially\nwith improving the testing on various operating systems.\n\nMajor feature: macOS users rejoice!  Incompatibility with macOS Monterey 12.3 is fixed! (#347)\n\n* Add .gitattributes during repo initialization (#352)\n* Update zgen reference to zgenom (#350)\n* Improve test data generation (#348)\n* Fix 'chmod' for macOS Monterey 12.3 (#347)\n\n\nRelease v1.20200429\n\nNOTE: While there is now support for NetBSD and SunOS/SmartOS, the\nrelease process only tests on macOS and CentOS7 because that's all I\nhave access to.\n\n* Fix tools that break when \"..\" or \".\" are used in a path (#304)\n* Respect PREFIX variable for copy-install (#294)\n* Documentation: Add pkgsrc install instructions (#292)\n* Improve support for Windows (#291)\n* Clarify gpg version usage (#290)\n* Many documentation fixes\n* DOCUMENTATION: Promote 'getting started' to a section, enumerate steps (#283)\n* Commit changes to gitignore when deregistering (#282)\n* Add support for NetBSD and SunOS (SmartOS)\n* Defend against ShellShock\n\n\nRelease v1.20181219\n\n* New OS support: Add support for NetBSD and SunOS (SmartOS)\n* Testing: Improve confidence test.\n* .blackbox is now the default config directory for new repos. (#272)\n* Add blackbox_decrypt_file (#270)\n* Improved compatibility: change\"/bin/[x]\" to \"/usr/bin/env [x]\" (#265)\n* Add blackbox_less. (#263)\n* add nix method of install (#261)\n* Linked setting up of GPG key (#260)\n\n\nRelease v1.20180618\n\n* Restore `make manual-install` with warning. (#258)\n\nRelease v1.20180615\n\n* Standardize on .blackbox for config. Use keyrings/live for backwards compatibility.\n* Store keys in .blackbox directory (#218)\n* Suggest committing changes to pubring.gpg when running blackbox_removeadmin (#248)\n* Fix typo (#246)\n* Improve installation instructions (#244)\n* Fix replacing-expired-keys link in README (#241)\n* Fix problems when gpg2 is installed next to gpg (#237)\n* Many documentation corrections, updates, etc.\n* Exclude default keyring from import (#223)\n* .gitattributes not always updated (PR#146)\n* Fix bugs related to updating .gitattributes (PR#146)\n* Update readme with CircleCI link (#216)\n* Run the tests on a CI (#215)\n* Fixed Alpine compatibility (chmod) (#212)\n* direct repobase message to stderr (#204)\n* Improve Windows compatibility\n* NEW: .gitattributes Set Unix-only files to eol=lf\n* Silence 'not changed' output during keychain import (#200)\n* Improve FreeBSD compatibility\n* shred_file() outputs warning message to stderr. (#192)\n* Don't complain about GPG_AGENT_INFO if using newer gpg-agent (#189)\n* [FreeBSD] Fix use of chmod (#180)\n* Requiring a file to be entered to finish editing (#175)\n* Remove the key from the keyring when removing an admin (#173)\n* Add FreeBSD support (#172)\n* Add list admins commandline tool. (#170)\nignore backup files and secring.gpg in $BLACKBOXDATA (#169)\nAllow parallel shredding of files (#167)\n* Add/improve Mingw support\n* Make \"make confidence\" less fragile\n* And a lot, lot more.\n\nRelease v1.20170309\n\n* \"make test\" is an alias for \"make confidence\"\n* macOS: make_tempdir must create shorter paths\n* Fix \"make confidence\" for newer version of Git\n* README.md: Add info about our new mailing list\n\nRelease v1.20170611\n\n* confidence_test.sh verifies external tools exist\n* confidence_test.sh more reliable for non-UTF8 users\n* \"make test\" no longer prompts for passwords\n* blackbox works better when target directory lives in root (#194)\n* Add confidence_test.sh tests for admin operations\n* blackbox_list_admins fails (#193)\n* confidence_test.sh works better on FreeBSD\n* tools/confidence_test.sh: now works with gnupg-2.0 and gnupg-2.1\n* Blackbox now officially supports both gnupg-2.0 and gnupg-2.1\n* blackbox_shred_all_files: BUGFIX: Does not shred files with spaces\n* blackbox_removeadmin: disable gpg's confirmation\n* Sync mk_rpm_fpmdir from master\n\nRelease v1.20170127\n\n* Starting CHANGELOG.\n"
        },
        {
          "name": "DESIGN.md",
          "type": "blob",
          "size": 2.986328125,
          "content": "BlackBox Internals\n==================\n\nThe goal of the Go rewrite is to improve the usability and\nmaintainability of Blackbox, meanwhile make it easier to implement new \n\nThe system is built in distinct layers: view, controller, model.\n\nSuppose there is a subcommand \"`foo`\".  `blackbox.go` parses the\nuser's command line args and calls `cmdFoo()`, which is given\neverything it needs to do the operation.  For example, it is given the\nfilenames the user specified exactly; even if an empty list means \"all\nfiles\", at this layer the empty list is passed to the function.\n\n`cmdFoo()` contains the business logic of how the operation should be\ndone: usually iterating over filenames and calling verb(s) for each\none.  For example if an empty file list means \"all files\", this is the\nlayer that enumerates the files.\n\n`cmdFoo()` is implemented in the file `cmd_foo.go`.  The caller of\n`cmdFoo()` should provide all data it needs to get the job done.\n`cmdFoo()` doesn't refer to global flags, they are passed to the\nfunction as parameters.  Therefore the function has zero side-effects\n(except possibly logging) and can be called as library functions by\nother systems.  This is the external (binary) API which should be\nrelatively stable.\n\n`cmdFoo()` calls verbs that are in `bbutil/`.  Some of those verbs are\nactually interfaces. For example, any VCS-related verbs are actually a\nGo interface which might be implemented one of many ways (Git,\nSubversion, Mercurial), GPG-functions may be implemented by shelling\nout to `gpg.exe` or by using Go's gpg library.\n\nThey layers look like this:\n\n| View | `blackbox.go` | Parses User Commands, calls controller |\n| Controller | `cmd_*.go` | The business logic. Iterates and calls verbs |\n| Model | `pkg/bbutil` | Verbs |\n| Interfaces | `pkg/*` | Interfaces and their implementations |\n\nAt least that's the goal.  We'll see how well we can achieve this.\n\n\nVersion 2.0\n===========\n\nSoftware architecture.\n\nWe try to keep the command-line parsing separate from the business\nlogic and all plug-ins.  This keeps things clean and easy to refactor.\nIn fact layer 2 could be used as a stand-alone module for projects\nthat want to embed blackbox actions.\n\nLayer 1: The command itself\n\n  * cmd/blackbox/blackbox.go -- main() not much more\n  * cmd/blackbox/cli.go      -- Set up and call the ufave/cli flag parser\n  * cmd/blackbox/drive.go    -- Check # of arguments, conflicting flags, and then call the businss logic layer\n\nLayer 2: The business logic\n\n  * pkg/box/box.go      -- The interface to accessing .blackbox (admins, files, etc.)\n  * pkg/box/verbs.go    -- Verbs called by Layer 1. Just the verbs\n  * pkg/box/boxutils.go -- Functions needed by the verbs\n\nLayer 3: The plug-ins\n\n  * pkg/vcs/...      -- Plug-ins for Git, (Mercurial, Subversion, Perforce,) and None\n  * pkg/crypters/... -- Plug-ins for PGP access: GnuPG, (go-openpgp, others in the future)\n\nLayer 4: Support functions for use by Layer 3\n\n  * pkg/bbutil/filestats.go -- File manipulations\n  * pkg/bbutil/runbash.go   -- Safely run external Linux commands\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.06640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014-2021 Stack Exchange, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.3427734375,
          "content": "SHELL=/bin/sh\nPREFIX?=/usr/local\nPKGNAME=stack_blackbox\nBASEDIR?=$(HOME)\nOUTPUTDIR?=\"$(BASEDIR)/debbuild-${PKGNAME}\"\n\nall:\n\t@echo 'Menu:'\n\t@echo '  make update             Update any generated files'\n\t@echo '  make packages-rpm       Make RPM packages'\n\t@echo '  make packages-deb       Make DEB packages'\n\t@echo '  make symlinks-install   Make symlinks in ${PREFIX}/bin/'\n\t@echo '  make copy-install       Copy \"bin\" files to ${PREFIX}/bin/'\n\t@echo '  make copy-uninstall     Remove blackbox files from ${PREFIX}/bin/'\n\t@echo '  make test               Run tests'\n\ninstall:\n\t@echo 'To install, copy the files from bin to somewhere in your PATH.'\n\t@echo 'The README.md document gives more details.'\n\t@echo 'Or run \"make\" (with no options) for more info.'\n\n# The default package type is RPM.\npackages: packages-rpm\n\n#\n# RPM builds\n#\n\n# NOTE: mk_rpm_fpmdir.stack_blackbox.txt is the master list of files.  All\n# other packages should generate their list from it.\n\npackages-rpm:\n\tcd tools && PKGRELEASE=\"$${PKGRELEASE}\" PKGDESCRIPTION=\"Safely store secrets in git/hg/svn repos using GPG encryption\" ./mk_rpm_fpmdir stack_blackbox mk_rpm_fpmdir.stack_blackbox.txt\n\npackages-rpm-debug:\n\t@echo BUILD:\n\t@PKGRELEASE=99 make packages\n\t@echo ITEMS TO BE PACKAGED:\n\tfind $(BASEDIR)/rpmbuild-$(PKGNAME)/installroot -type f\n\t@echo ITEMS ACTUALLY IN PACKAGE:\n\t@rpm -qpl $$(cat $(BASEDIR)/rpmbuild-$(PKGNAME)/bin-packages.txt)\n\nlocal-rpm:\n\t@PKGRELEASE=1 make packages\n\t-@sudo rpm -e $(PKGNAME)\n\tsudo rpm -i $$(cat $(BASEDIR)/rpmbuild-$(PKGNAME)/bin-packages.txt)\n\nlock-rpm:\n\tsudo yum versionlock add $(PKGNAME)\n\nunlock-rpm:\n\tsudo yum versionlock clear\n\n#\n# Manual install\n#\nsymlinks-install:\n\t@echo \"Symlinking files from ./bin to ${PREFIX}/bin\"\n\t@cd bin && for f in `find . -type f -iname \"*\" ! -iname \"Makefile\"`; do ln -fs `pwd`/$$f $(PREFIX)/bin/$$f; done\n\t@echo 'Done.'\n\nmanual-install:\n\t@echo '***************************************************************'\n\t@echo '*                      DEPRECATED                             *'\n\t@echo '* `make manual-install` is now called `make symlinks-install` *'\n\t@echo '***************************************************************'\n\t$(MAKE) symlinks-install\n\ncopy-install:\n\t@echo \"Copying files from ./bin to ${PREFIX}/bin\"\n\t@cd bin && for f in `find . -type f -iname \"*\" ! -iname \"Makefile\"`; do cp `pwd`/$$f $(PREFIX)/bin/$$f; done\n\t@echo 'Done.'\n\ncopy-uninstall:\n\t@echo \"Removing blackbox files from ${PREFIX}/bin\"\n\t@cd bin && for f in `find . -type f -iname \"*\" ! -iname \"Makefile\"`; do rm $(PREFIX)/bin/$$f; done\n\t@echo 'Done.'\n\n#\n# DEB builds\n#\n\npackages-deb:\ttools/mk_deb_fpmdir.stack_blackbox.txt\n\tcd tools && OUTPUTDIR=$(OUTPUTDIR) PKGRELEASE=\"$${PKGRELEASE}\" PKGDESCRIPTION=\"Safely store secrets in git/hg/svn repos using GPG encryption\" ./mk_deb_fpmdir stack_blackbox mk_deb_fpmdir.stack_blackbox.txt\n\n# Make mk_deb_fpmdir.vcs_blackbox.txt from mk_rpm_fpmdir.stack_blackbox.txt:\ntools/mk_deb_fpmdir.stack_blackbox.txt: tools/mk_rpm_fpmdir.stack_blackbox.txt\n\tsed -e '/^#/d' -e 's@/usr/blackbox/bin/@/usr/bin/@g' -e '/profile.d-usrblackbox.sh/d' <tools/mk_rpm_fpmdir.stack_blackbox.txt >$@\n\npackages-deb-debug:\ttools/mk_deb_fpmdir.stack_blackbox.txt\n\t@echo BUILD:\n\t@PKGRELEASE=99 make packages-deb\n\t@echo ITEMS TO BE PACKAGED:\n\tfind ~/debbuild-$(PKGNAME)/installroot -type f\n\t@echo ITEMS ACTUALLY IN PACKAGE:\n\t@dpkg --contents $$(cat $(BASEDIR)/debbuild-$(PKGNAME)/bin-packages.txt)\n\nlocal-deb:\n\t@PKGRELEASE=1 make packages\n\t-@sudo dpkg -e $(PKGNAME)\n\tsudo dpkg -i $$(cat $(BASEDIR)/rpmbuild-$(PKGNAME)/bin-packages.txt)\n\n#\n# MacPorts builds\n#\n# To test:\n# rm -rf /tmp/foo ; mkdir -p /tmp/foo;make packages-macports DESTDIR=/tmp/foo;find /tmp/foo -ls\n\n# Make mk_macports.vcs_blackbox.txt from mk_rpm_fpmdir.stack_blackbox.txt:\ntools/mk_macports.vcs_blackbox.txt: tools/mk_rpm_fpmdir.stack_blackbox.txt\n\tsed  -e '/^#/d' -e 's@/usr/blackbox/bin/@bin/@g' -e '/profile.d-usrblackbox.sh/d' <tools/mk_rpm_fpmdir.stack_blackbox.txt >$@\n\n# MacPorts expects to run: make packages-macports DESTDIR=${destroot}\npackages-macports: tools/mk_macports.vcs_blackbox.txt\n\tmkdir -p $(DESTDIR)/bin\n\tcd tools && ./mk_macports mk_macports.vcs_blackbox.txt\n\n# stow is a pretty easy way to manage simple local installs on GNU systems\ninstall-stow:\n\tmkdir -p /usr/local/stow/blackbox/bin\n\tcp bin/* /usr/local/stow/blackbox/bin\n\trm /usr/local/stow/blackbox/bin/Makefile\n\tcd /usr/local/stow; stow -R blackbox\nuninstall-stow:\n\tcd /usr/local/stow; stow -D blackbox\n\trm -rf /usr/local/stow/blackbox\n\n# Add other package types here.\n\n#\n# Updates\n#\nupdate: tools/mk_deb_fpmdir.stack_blackbox.txt tools/mk_macports.vcs_blackbox.txt\n\nclean:\n\trm -f tools/mk_deb_fpmdir.stack_blackbox.txt tools/mk_macports.vcs_blackbox.txt\n\n#\n# System Test:\n#\ntest: confidence\nconfidence:\n\t@if [ -e ~/.gnupg ]; then echo ERROR: '~/.gnupg should not exist. If it does, bugs may polute your .gnupg configuration. If the code has no bugs everything will be fine. Do you feel lucky?'; false ; fi\n\t@if which >/dev/null gpg-agent ; then pkill gpg-agent ; rm -rf /tmp/tmp.* ; fi\n\t@export PATH=\"$(PWD)/bin:$(PREFIX)/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/opt/local/bin:/usr/local/MacGPG2/bin:/opt/homebrew/bin:$(PATH)\" ; tools/auto_system_test\n\t@if which >/dev/null gpg-agent ; then pkill gpg-agent ; fi\n\t@if [ -e ~/.gnupg ]; then echo ERROR: '~/.gnupg was created which means the scripts might be poluting GnuPG configuration.  Fix this bug.'; false ; fi\n"
        },
        {
          "name": "README-v2.md",
          "type": "blob",
          "size": 2.0205078125,
          "content": "BlackBox v2\n===========\n\nWARNING: v2 is still experimental.  It is in the same git repo as v1\nbecause the filenames do not overlap.  Please do not mix the two.  v1\nis in `bin`.  v2 is in `cmd/blackbox` and `binv2`.\n\nBlackbox is an open source tool that enables you to safe store sensitive information in\nGit (or other) repos by encrypting them with GPG.  Only the encrypted\nversion of the file is available.  You can be free to provide access\nto the repo, as but only people with the right GPG keys can access the\nencrypted data.\n\nThings you should **never** store in a repo without encryption:\n\n* TLS (SSL) certificates\n* Passwords\n* API keys\n* And more!\n\nProject Info:\n\n* [Overview](user-overview.md)\n* [Why is this important?](why-is-this-important.md)\n* [Support/Community](support.md)\n* [How BB encrypts](encryption.md)\n* [OS Compatibility](compatibility.md)\n* [Installation Instructions](installation.md)\n* [Alternatives](alternatives.md)\n\nUser Info:\n\n* [Enabling Blackbox on a Repo](enable-repo.md)\n* [Enroll a file](enable-repo.md)\n* [Full Command List](full-command-list.md)\n* [Add/Remove users](admin-ops.md)\n* [Add/Remove files](file-ops.md)\n* [Advanced techiques](advanced.md)\n* [Use with Role Accounts](role-accounts.md)\n* [Backwards Compatibility](backwards-compatibility.md)\n* [Replacing expired keys](expired-keys.md)\n* [Git Tips](git-tips.md)\n* [SubVersion Tips](subversion-tips.md)\n* [GnuPG tips](gnupg-tips.md)\n* [Use with Ansible](with-ansible.md)\n* [Use with Puppet](with-puppet.md)\n\nFor contributors:\n\n* [Developer Info](dev.md)\n* [Code overview](dev-code-overview.md)\n* [HOWTO: Add new OS support](dev-add-os-support.md)\n* [HOWTO: Add new VCS support](dev-add-vcs-support.md)\n\n\nA slide presentation about an older release [is on SlideShare](http://www.slideshare.net/TomLimoncelli/the-blackbox-project-sfae).\n\nJoin our mailing list: [https://groups.google.com/d/forum/blackbox-project](https://groups.google.com/d/forum/blackbox-project)\n\n\nLicense\n=======\n\nThis content is released under the MIT License.\nSee the [LICENSE.txt](LICENSE.txt) file.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 40.818359375,
          "content": "BlackBox [![CircleCI](https://circleci.com/gh/StackExchange/blackbox.svg?style=shield)](https://circleci.com/gh/StackExchange/workflows/blackbox) [![Build Status](https://github.com/StackExchange/blackbox/workflows/build/badge.svg)](https://github.com/StackExchange/blackbox/actions?query=workflow%3Abuild+branch%3Amaster)\n========\n\nSafely store secrets in a VCS repo (i.e. Git, Mercurial, Subversion or Perforce). These commands make it easy for you to Gnu Privacy Guard (GPG) encrypt specific files in a repo so they are \"encrypted at rest\" in your repository. However, the scripts make it easy to decrypt them when you need to view or edit them, and decrypt them for use in production. Originally written for Puppet, BlackBox now works with any Git or Mercurial repository.\n\n\nWARNING: The goal of this project is to be a simple wrapper around `gpg` so you and your coworkers don't have to remember its all those inscrutable and confusing flags.  It is *not* intended to be a sophisticated encryption system that solves all problems or supports a large numbers of files.  The ideal use-case is to keep secrets in a secure service such as Conjur, AWS KMS, Azure Key Vault or GCP KMS; then use Blackbox for safely storing the API keys needed to access that system. That way you are encrypting a single, tiny, file. Feature-requests for anything more will be rejected; do not expect or even request \"enterprise features\". If this disappoints you, please consider a competiting project such as https://www.agwa.name/projects/git-crypt\n\nA slide presentation (about an older release) [is on SlideShare](http://www.slideshare.net/TomLimoncelli/the-blackbox-project-sfae).\n\nJoin our mailing list: [https://groups.google.com/d/forum/blackbox-project](https://groups.google.com/d/forum/blackbox-project)\n\n## What blackbox is NOT:\n\n\nTable of Contents\n=================\n\n- [BlackBox](#blackbox)\n- [Table of Contents](#table-of-contents)\n- [Overview](#overview)\n- [Why is this important?](#why-is-this-important)\n- [Installation Instructions](#installation-instructions)\n- [Commands](#commands)\n- [Compatibility](#compatibility)\n- [How is the encryption done?](#how-is-the-encryption-done)\n- [What does this look like to the typical user?](#what-does-this-look-like-to-the-typical-user)\n- Configuration Management\n  - [How to use the secrets with Ansible?](#how-to-use-the-secrets-with-ansible)\n  - [How to use the secrets with Puppet?](#how-to-use-the-secrets-with-puppet)\n    - [Entire files](#entire-files)\n    - [Small strings](#small-strings)\n- File Management\n  - [How to enroll a new file into the system?](#how-to-enroll-a-new-file-into-the-system)\n  - [How to remove a file from the system?](#how-to-remove-a-file-from-the-system)\n- User Management\n  - [How to indoctrinate a new user into the system?](#how-to-indoctrinate-a-new-user-into-the-system)\n  - [How to remove a user from the system?](#how-to-remove-a-user-from-the-system)\n  - [Note to the Web Of Trust](#note-to-the-web-of-trust)\n- Repo Management\n  - [Enabling BlackBox For a Repo](#enabling-blackbox-for-a-repo)\n- [Set up automated users or &ldquo;role accounts&rdquo;](#set-up-automated-users-or-role-accounts)\n- [Replacing expired keys](#replacing-expired-keys)\n- [Some common errors](#some-common-errors)\n- [Using BlackBox on Windows](#using-blackbox-on-windows)\n- [Using BlackBox without a repo](#using-blackbox-without-a-repo)\n- [Some Subversion gotchas](#some-subversion-gotchas)\n- [Using Blackbox when gpg2 is installed next to gpg](#using-blackbox-when-gpg2-is-installed-next-to-gpg)\n- [How to submit bugs or ask questions?](#how-to-submit-bugs-or-ask-questions)\n- [Developer Info](#developer-info)\n- [Alternatives](#alternatives)\n- [License](#license)\n\nOverview\n========\n\nSuppose you have a VCS repository (i.e. a Git or Mercurial repo) and certain files contain secrets such as passwords or SSL private keys. Often people just store such files \"and hope that nobody finds them in the repo\". That's not safe.\n\nWith BlackBox, those files are stored encrypted using GPG. Access to the VCS repo without also having the right GPG keys makes it worthless to have the files. As long as you keep your GPG keys safe, you don't have to worry about storing your VCS repo on an untrusted server. Heck, even if you trust your server, now you don't have to trust the people that do backups of that server, or the people that handle the backup tapes!\n\nRather than one GPG passphrase for all the files, each person with access has their own GPG keys in the system. Any file can be decrypted by anyone with their GPG key. This way, if one person leaves the company, you don't have to communicate a new password to everyone with access. Simply disable the one key that should no longer have access. The process for doing this is as easy as running 2 commands (1 to disable their key, 1 to re-encrypt all files.)\n\nAutomated processes often need access to all the decrypted files. This is easy too. For example, suppose Git is being used for Puppet files. The master needs access to the decrypted version of all the files. Simply set up a GPG key for the Puppet master (or the role account that pushes new files to the Puppet master) and have that user run `blackbox_postdeploy` after any files are updated.\n\nGetting started\n---------------\n\n1. If you don't have a GPG key, set it up using instructions such as:\n[Set up GPG key](https://help.github.com/articles/generating-a-new-gpg-key/). \\\nNow you are ready to go.\n\n1. `cd` into a Git, Mercurial, Subversion or Perforce repository and run `blackbox_initialize`.\n\n1. If a file is to be encrypted, run `blackbox_register_new_file` and you are done.\n\n1. Add and remove keys with `blackbox_addadmin` and `blackbox_removeadmin`.\n\n1. To view and/or edit a file, run `blackbox_edit`;\nthis will decrypt the file and open with whatever is specified by\nyour $EDITOR environment variable. \\\nWhen you close the editor the\nfile will automatically be encrypted again and the temporary plaintext\nfile will be shredded. \\\nIf you need to leave the file decrypted while\nyou update you can use the`blackbox_edit_start` to decrypt the file\nand `blackbox_edit_end` when you want to \"put it back in the box.\"\n\nWhy is this important?\n======================\n\nOBVIOUSLY we don't want secret things like SSL private keys and passwords to be leaked.\n\nNOT SO OBVIOUSLY when we store \"secrets\" in a VCS repo like Git or Mercurial, suddenly we are less able to share our code with other people. Communication between subteams of an organization is hurt. You can't collaborate as well. Either you find yourself emailing individual files around (yuck!), making a special repo with just the files needed by your collaborators (yuck!!), or just deciding that collaboration isn't worth all that effort (yuck!!!).\n\nThe ability to be open and transparent about our code, with the exception of a few specific files, is key to the kind of collaboration that DevOps and modern IT practitioners need to do.\n\nInstallation Instructions\n=========================\n\n- *The hard way (manual)*: Copy all the files in \"bin\" to your \"bin\".\n- *The hard way (automatic)*: `make copy-install` will copy the bin files into $PREFIX/bin, default is /usr/local (uninstall with `make copy-uninstall`).\n- *The symlinks way*: `make symlinks-install` will make symlinks of the bin files into $PREFIX/bin, default is /usr/local (uninstall with `make copy-uninstall`) (useful when doing development)\n- *The MacPorts Way*: `sudo port install vcs_blackbox`\n- *The Homebrew Way*: `brew install blackbox`\n- *The RPM way*: Check out the repo and make an RPM via `make packages-rpm`; now you can distribute the RPM via local methods. (Requires [fpm](https://github.com/jordansissel/fpm).)\n- *The Debian/Ubuntu way*: Check out the repo and make a DEB via `make packages-deb`; now you can distribute the DEB via local methods. (Requires [fpm](https://github.com/jordansissel/fpm).)\n- *The Antigen Way*: Add `antigen bundle StackExchange/blackbox` to your .zshrc\n- *The Zgenom Way*: Add `zgenom load StackExchange/blackbox` to your .zshrc where you're loading your other plugins.\n- *The Nix Way*: `nix-shell -p blackbox`\n- *The Pkgsrc Way*: `pkgin in scm-blackbox`\n\nCommands\n========\n\n| Name:                               | Description:                                                            |\n|-------------------------------------|-------------------------------------------------------------------------|\n| `blackbox_edit <file>`              | Decrypt, run $EDITOR, re-encrypt a file                                 |\n| `blackbox_edit_start <file>`        | Decrypt a file so it can be updated                                     |\n| `blackbox_edit_end <file>`          | Encrypt a file after blackbox_edit_start was used                       |\n| `blackbox_cat <file>`               | Decrypt and view the contents of a file                                 |\n| `blackbox_view <file>`              | Like blackbox_cat but pipes to `less` or $PAGER                         |\n| `blackbox_diff`                     | Diff decrypted files against their original crypted version             |\n| `blackbox_initialize`               | Enable blackbox for a GIT or HG repo                                    |\n| `blackbox_register_new_file <file>` | Encrypt a file for the first time                                       |\n| `blackbox_deregister_file <file>`   | Remove a file from blackbox                                             |\n| `blackbox_list_files`               | List the files maintained by blackbox                                   |\n| `blackbox_list_admins`              | List admins currently authorized for blackbox                           |\n| `blackbox_decrypt_file <file>`      | Decrypt a file                                                          |\n| `blackbox_decrypt_all_files`        | Decrypt all managed files (INTERACTIVE)                                 |\n| `blackbox_postdeploy`               | Decrypt all managed files (batch)                                       |\n| `blackbox_addadmin <gpg-key>`       | Add someone to the list of people that can encrypt/decrypt secrets      |\n| `blackbox_removeadmin <gpg-key>`    | Remove someone from the list of people that can encrypt/decrypt secrets |\n| `blackbox_shred_all_files`          | Safely delete any decrypted files                                       |\n| `blackbox_update_all_files`         | Decrypt then re-encrypt all files. Useful after keys are changed        |\n| `blackbox_whatsnew <file>`          | show what has changed in the last commit for a given file               |\n\nCompatibility\n=============\n\nBlackBox automatically determines which VCS you are using and does the right thing. It has a plug-in architecture to make it easy to extend to work with other systems. It has been tested to work with many operating systems.\n\n- Version Control systems\n  - `git` -- The Git\n  - `hg` -- Mercurial\n  - `svn` -- SubVersion (Thanks, Ben Drasin!)\n  - `p4` -- Perforce\n  - none -- The files can be decrypted outside of a repo if the `.blackbox` directory is intact\n- Operating system\n  - CentOS / RedHat\n  - MacOS X\n  - Cygwin (Thanks, Ben Drasin!) **See Note Below**\n  - MinGW (git bash on windows) **See Note Below**\n  - NetBSD\n  - SmartOS\n\nTo add or fix support for a VCS system, look for code at the end of `bin/_blackbox_common.sh`\n\nTo add or fix support for a new operating system, look for the case statements in `bin/_blackbox_common.sh` and `bin/_stack_lib.sh` and maybe `tools/confidence_test.sh`\n\nUsing BlackBox on Windows\n=========================\n\nBlackBox can be used with Cygwin, MinGW or WSL2.\n\n### Protect the line endings\n\nBlackBox assumes that `blackbox-admins.txt` and `blackbox-files.txt` will have\nLF line endings. Windows users should be careful to configure Git or other systems\nto not convert or \"fix\" those files.\n\nIf you use Git, add the following lines to your `.gitattributes` file:\n\n    **/blackbox-admins.txt text eol=lf\n    **/blackbox-files.txt text eol=lf\n\nThe latest version of `blackbox_initialize` will create a `.gitattributes` file in the `$BLACKBOXDATA`\ndirectory (usually `.blackbox`) for you.\n\n### Cygwin\n\nCygwin support requires the following packages:\n\nNormal operation:\n\n- gnupg\n- git or mercurial or subversion or perforce (as appropriate)\n\nDevelopment (if you will be adding code and want to run the confidence test)\n\n- procps\n- make\n- git (the confidence test currently only tests git)\n\n### MinGW\n\nMinGW (comes with Git for Windows) support requires the following:\n\nNormal operation:\n\n- [Git for Windows](https://git-scm.com/) (not tested with Mercurial)\n  - Git Bash MINTTY returns a MinGW console.  So when you install make sure you pick `MINTTY` instead of windows console.  You'll be executing blackbox from the Git Bash prompt.\n  - You need at least version 2.8.1 of Git for Windows.\n- [GnuWin32](https://sourceforge.net/projects/getgnuwin32/files/) - needed for various tools not least of which is mktemp which is used by blackbox\n  - after downloading the install just provides you with some batch files.  Because of prior issues at sourceforge and to make sure you get the latest version of each package the batch files handle the brunt of the work of getting the correct packages and installing them for you.\n  - from a **windows command prompt** run `download.bat`  once it has completed run `install.bat` then add the path for those tools to your PATH (ex: `PATH=%PATH%;c:\\GnuWin32\\bin`)\n\nDevelopment:\n\n- unknown (if you develop Blackbox under MinGW, please let us know if any additional packages are required to run `make test`)\n\n### WSL2\n\nIf you get the following error in WSL2, you can try to setup your environment with the following instructions (Tested with Ubuntu 22.04 on WSL2):\n\n- Install [Gpg4win](https://www.gpg4win.org/) (Tested with version 4.1.0)\n- Import your private key in Gpg4win (you can use Kleopatra on your Windows host if you wish).\n- Edit the file `~/.gnupg/gpg-agent.conf` on WSL and add the following line: `pinentry-program \"/mnt/c/Program Files (x86)/GnuPG/bin/pinentry-basic.exe\"`\n- Restart gpg agent on your linux system: `gpg-connect-agent reloadagent /bye`\n\nHow is the encryption done?\n===========================\n\nGPG has many different ways to encrypt a file. BlackBox uses the mode that lets you specify a list of keys that can decrypt the message.\n\nIf you have 5 people (\"admins\") that should be able to access the secrets, each creates a GPG key and adds their public key to the keychain. The GPG command used to encrypt the file lists all 5 key names, and therefore any 1 key can decrypt the file.\n\nTo remove someone's access, remove that admin's key name (i.e. email address) from the list of admins and re-encrypt all the files. They can still read the .gpg file (assuming they have access to the repository) but they can't decrypt it any more.\n\n*What if they kept a copy of the old repo before you removed access?* Yes, they can decrypt old versions of the file. This is why when an admin leaves the team, you should change all your passwords, SSL certs, and so on. You should have been doing that before BlackBox, right?\n\n*Why don't you use symmetric keys?* In other words, why mess with all this GPG key stuff and instead why don't we just encrypt all the files with a single passphrase. Yes, GPG supports that, but then we are managing a shared password, which is fraught with problems. If someone \"leaves the team\" we would have to communicate to everyone a new password. Now we just have to remove their key. This scales better.\n\n*How do automated processes decrypt without asking for a password?* GPG requires a passphrase on a private key. However, it permits the creation of subkeys that have no passphrase. For automated processes, create a subkey that is only stored on the machine that needs to decrypt the files. For example, at Stack Exchange, when our Continuous Integration (CI) system pushes a code change to our Puppet masters, they run `blackbox_postdeploy` to decrypt all the files. The user that runs this code has a subkey that doesn't require a passphrase. Since we have many masters, each has its own key. And, yes, this means our Puppet Masters have to be very secure. However, they were already secure because, like, dude... if you can break into someone's puppet master you own their network.\n\n*If you use Puppet, why didn't you just use hiera-eyaml?* There are 4 reasons:\n\n1. This works with any Git or Mercurial repo, even if you aren't using Puppet.\n2. hiera-eyaml decrypts \"on demand\" which means your Puppet Master now uses a lot of CPU to decrypt keys every time it is contacted. It slows down your master, which, in my case, is already slow enough.\n3. This works with binary files, without having to ASCIIify them and paste them into a YAML file. Have you tried to do this with a cert that is 10K long and changes every few weeks? Ick.\n4. hiera-eyaml didn't exist when I wrote this.\n\nWhat does this look like to the typical user?\n=============================================\n\n- If you need to, start the GPG Agent: `eval $(gpg-agent --daemon)`\n- Decrypt the file so it is editable: `blackbox_edit_start FILENAME`\n- (You will need to enter your GPG passphrase.)\n- Edit FILENAME as you desire: `vim FILENAME`\n- Re-encrypt the file: `blackbox_edit_end FILENAME`\n- Commit the changes. `git commit -a` or `hg commit`\n\nWait... it can be even easier than that! Run `blackbox_edit FILENAME`, and it'll decrypt the file in a temp file and call `$EDITOR` on it, re-encrypting again after the editor is closed.\n\nHow to use the secrets with Ansible?\n===================================\n\nAnsible Vault provides functionality for encrypting both entire files and strings stored within files; however,\nkeeping track of the password(s) required for decryption is not handled by this module.\n\nInstead one must specify a password file when running the playbook.\n\nAnsible example for password file: `my_secret_password.txt.gpg`\n\n```\nansible-playbook --vault-password-file my_secret_password.txt site.yml\n```\n\nAlternatively, one can specify this in the `ANSIBLE_VAULT_PASSWORD_FILE` environment variable.\n\nHow to use the secrets with Puppet?\n===================================\n\n### Entire files:\n\nEntire files, such as SSL certs and private keys, are treated just like regular files. You decrypt them any time you push a new release to the puppet master.\n\nPuppet example for an encrypted file: `secret_file.key.gpg`\n\n```\nfile { '/etc/my_little_secret.key':\n    ensure  => 'file',\n    owner   => 'root',\n    group   => 'puppet',\n    mode    => '0760',\n    source  => \"puppet:///modules/${module_name}/secret_file.key\",\n}\n```\n\n### Small strings:\n\nSmall strings, such as passwords and API keys, are stored in a hiera yaml file, which you encrypt with `blackbox_register_new_file`. For example, we use a file called `blackbox.yaml`. You can access them using the hiera() function.\n\n*Setup:* Configure `hiera.yaml` by adding \"blackbox\" to the search hierarchy:\n\n```\n:hierarchy:\n  - ...\n  - blackbox\n  - ...\n```\n\nIn blackbox.yaml specify:\n\n```\n---\nmodule::test_password: \"my secret password\"\n```\n\nIn your Puppet Code, access the password as you would any hiera data:\n\n```\n$the_password = hiera('module::test_password', 'fail')\n\nfile {'/tmp/debug-blackbox.txt':\n    content => $the_password,\n    owner   => 'root',\n    group   => 'root',\n    mode    => '0600',\n}\n```\n\nThe variable `$the_password` will contain \"my secret password\" and can be used anywhere strings are used.\n\nHow to enroll a new file into the system?\n=========================================\n\n- If you need to, start the GPG Agent: `eval $(gpg-agent --daemon)`\n- Add the file to the system:\n\n```\nblackbox_register_new_file path/to/file.name.key\n```\n\nMultiple file names can be specified on the command line:\n\nExample 1: Register 2 files:\n\n```\nblackbox_register_new_file file1.txt file2.txt\n```\n\nExample 2: Register all the files in `$DIR`:\n\n```\nfind $DIR -type f -not -name '*.gpg' -print0 | xargs -0 blackbox_register_new_file\n```\n\nHow to remove a file from the system?\n=====================================\n\nThis happens quite rarely, but we've got it covered:\n\n```\nblackbox_deregister_file path/to/file.name.key\n```\n\nHow to indoctrinate a new user into the system?\n===============================================\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\n`.blackbox/blackbox-admins.txt` is a file that lists which users are able to decrypt files. (More pedantically, it is a list of the GnuPG key names that the file is encrypted for.)\n\nTo join the list of people that can edit the file requires three steps; You create a GPG key and add it to the key ring. Then, someone that already has access adds you to the system. Lastly, you should test your access.\n\n### Step 1: NEW USER creates a GPG key pair on a secure machine and adds to public keychain.\n\nIf you don't already have a GPG key, here's how to generate one:\n\n```\ngpg --gen-key\n```\n\nWARNING: New versions of GPG generate keys which are not understood by\nold versions of GPG.  If you generate a key with a new version of GPG,\nthis will cause problems for users of older versions of GPG.\nTherefore it is recommended that you either assure that everyone using\nBlackbox have the exact same version of GPG, or generate GPG keys\nusing a version of GPG as old as the oldest version of GPG used by\neveryone using Blackbox.\n\nPick defaults for encryption settings, 0 expiration. Pick a VERY GOOD passphrase. Store a backup of the private key someplace secure. For example, keep the backup copy on a USB drive that is locked in safe.  Or, at least put it on a secure machine with little or no internet access, full-disk-encryption, etc. Your employer probably has rules about how to store such things.\n\nFYI: If generating the key is slow, this is usually because the system\nisn't generating enough entropy.  Tip: Open another window on that\nmachine and run this command: `ls -R /`\n\nNow that you have a GPG key, add yourself as an admin:\n\n```\nblackbox_addadmin KEYNAME\n```\n\n...where \"KEYNAME\" is the email address listed in the gpg key you created previously. For example:\n\n```\nblackbox_addadmin tal@example.com\n```\n\nWhen the command completes successfully, instructions on how to commit these changes will be output. Run the command as given to commit the changes. It will look like this:\n\n```\ngit commit -m'NEW ADMIN: tal@example.com' .blackbox/pubring.gpg .blackbox/trustdb.gpg .blackbox/blackbox-admins.txt\n```\n\nThen push it to the repo:\n\n```\ngit push\n\nor\n\nht push\n\n(or whatever is appropriate)\n```\n\nNOTE: Creating a Role Account? If you are adding the pubring.gpg of a role account, you can specify the directory where the pubring.gpg file can be found as a 2nd parameter: `blackbox_addadmin puppetmaster@puppet-master-1.example.com /path/to/the/dir`\n\n### Step 2: EXISTING ADMIN adds new user to the system.\n\nAsk someone that already has access to re-encrypt the data files. This gives you access. They simply decrypt and re-encrypt the data without making any changes.\n\nPre-check: Verify the new keys look good.\n\n```\ngit pull    # Or whatever is required for your system\ngpg --homedir=.blackbox --list-keys\n```\n\nFor example, examine the key name (email address) to make sure it conforms to corporate standards.\n\nImport the keychain into your personal keychain and reencrypt:\n\n```\ngpg --import .blackbox/pubring.gpg\nblackbox_update_all_files\n```\n\nPush the re-encrypted files:\n\n```\ngit commit -a\ngit push\n\nor\n\nhg commit\nhg push\n```\n\n### Step 3: NEW USER tests.\n\nMake sure you can decrypt a file. (Suggestion: Keep a dummy file in VCS just for new people to practice on.)\n\nHow to remove a user from the system?\n=====================================\n\nSimply run `blackbox_removeadmin` with their keyname then re-encrypt:\n\nExample:\n\n```\nblackbox_removeadmin olduser@example.com\nblackbox_update_all_files\n```\n\nWhen the command completes, you will be given a reminder to check in the change and push it.\n\nNote that their keys will still be in the key ring, but they will go unused. If you'd like to clean up the keyring, use the normal GPG commands and check in the file.\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\n```\ngpg --homedir=.blackbox --list-keys\ngpg --homedir=.blackbox --delete-key olduser@example.com\ngit commit -m'Cleaned olduser@example.com from keyring'  .blackbox/*\n```\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\nThe key ring only has public keys. There are no secret keys to delete.\n\nRemember that this person did have access to all the secrets at one time. They could have made a copy. Therefore, to be completely secure, you should change all passwords, generate new SSL keys, and so on just like when anyone that had privileged access leaves an organization.\n\nNote to the Web Of Trust\n========================\n\nValidating the trustworthiness of keys is a task that can't be accomplished by Blackbox; this is a completely external topic that has to be dealt with manually (the same way as generating/managing your key is, for example) or by a dedicated mechanism (a company CA with corresponding workflows e.g.). Aside from the \"common\" benefits of a Web Of Trust (see [here](https://www.gnupg.org/gph/en/manual/x334.html) or [here](https://www.gnupg.org/gph/en/manual/x547.html) e.g.), it prevents several errors as well.\n\nHistorically Blackbox was using and enforcing a \"trust every key\" model but this has changed! Now the decision of whether and how to use the PGP/GPG trust models is left up to the user by configuration (or by the PGP/GPG defaults).  \nWhen updating Blackbox people might run into functional problems if they haven't yet dealt with the trustability of the keys they're using. It's the right time to do so and built up your Web Of Trust now!\n\nIf you have an external workflow in place that ensures the integrity of the keys Blackbox uses you might want to disable the PGP/GPG trust models and rely on this workflow.  \nThis can be achieved by declaring \"trust model always\", either by passing the command line parameter `--trust-model=always` to your PGP/GPG binary when using Blackbox (by defining an alias or using the environment variable (e.g. `GPG=\"gpg2 --trust-model=always\"`) or a combination of both) or by setting `trust-model always` in your `gpg.conf` (note that this disables the Web Of Trust everywhere, not just for Blackbox).\n\nWARNING: It is strongly disadvised to not use any key validation at all! This opens up various ways to bypass the confidentiality of your encrypted secrets!\n\nWhere is the configuration stored? .blackbox vs. keyrings/live\n==============================================================\n\nBlackbox stores its configuration data in the `.blackbox` subdirectory.  Older\nrepos use `keyrings/live`.  For backwards compatibility either will work.\n\nAll documentation refers to `.blackbox`.\n\nYou can convert an old repo by simply renaming the directory:\n\n```\nmv keyrings/live .blackbox\nrmdir keyrings\n```\n\nThere is no technical reason to convert old repos except that it is less\nconfusing to users.\n\nThis change was made in commit 60e782a0, release v1.20180615.\n\nThe details:\n\n- First Blackbox checks `$BLACKBOXDATA`. If this environment variable is set, this is the directory that will be used. If it lists a directory that does not exist, Blackbox will print an error and exit.\n- If `$BLACKBOXDATA` is not set: (which is the typical use case)\n  - Blackbox will first try `keyrings/live` and use it if it exists.\n  - Otherwise the default `.blackbox` will be used.  If `.blackbox` does not exist, Blackbox will print an error and exit.\n\n\nEnabling BlackBox For a Repo\n============================\n\nOverview:\n\nTo add \"blackbox\" to a git or mercurial repo, you'll need to do the following:\n\n1. Run the initialize script. This adds a few files to your repo in a directory called \".blackbox\".\n2. For the first user, create a GPG key and add it to the key ring.\n3. Encrypt the files you want to be \"secret\".\n4. For any automated user (one that must be able to decrypt without a passphrase), create a GPG key and create a subkey with an empty passphrase.\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\n### Run the initialize script.\n\nYou'll want to include blackbox's \"bin\" directory in your PATH:\n\n```\nexport PATH=$PATH:/the/path/to/blackbox/bin\nblackbox_initialize\n```\n\nIf you're using antigen, adding `antigen bundle StackExchange/blackbox` to your .zshrc will download this repository and add it to your $PATH.\n\n### For the first user, create a GPG key and add it to the key ring.\n\nFollow the instructions for \"[How to indoctrinate a new user into the system?](#how-to-indoctrinate-a-new-user-into-the-system)\". Only do Step 1.\n\nOnce that is done, is a good idea to test the system by making sure a file can be added to the system (see \"How to enroll a new file into the system?\"), and a different user can decrypt the file.\n\nMake a new file and register it:\n\n```\nrm -f foo.txt.gpg foo.txt\necho This is a test. >foo.txt\nblackbox_register_new_file foo.txt\n```\n\nDecrypt it:\n\n```\nblackbox_edit_start foo.txt.gpg\ncat foo.txt\necho This is the new file contents. >foo.txt\n```\n\nRe-encrypt it:\n\n```\nblackbox_edit_end foo.txt.gpg\nls -l foo.txt*\n```\n\nYou should only see `foo.txt.gpg` as `foo.txt` should be gone.\n\nThe next step is to commit `foo.txt.gpg` and make sure another user can check out, view, and change the contents of the file. That is left as an exercise for the reader. If you are feel like taking a risk, don't commit `foo.txt.gpg` and delete it instead.\n\nSet up automated users or \"role accounts\"\n=========================================\n\ni.e. This is how a Puppet Master can have access to the unencrypted data.\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\nAn automated user (a \"role account\") is one that that must be able to decrypt without a passphrase. In general you'll want to do this for the user that pulls the files from the repo to the master. This may be automated with Jenkins CI or other CI system.\n\nGPG keys have to have a passphrase. However, passphrases are optional on subkeys. Therefore, we will create a key with a passphrase then create a subkey without a passphrase. Since the subkey is very powerful, it should be created on a very secure machine.\n\nThere's another catch. The role account probably can't check files into Git/Mercurial. It probably only has read-only access to the repo. That's a good security policy. This means that the role account can't be used to upload the subkey public bits into the repo.\n\nTherefore, we will create the key/subkey on a secure machine as yourself. From there we can commit the public portions into the repo. Also from this account we will export the parts that the role account needs, copy them to where the role account can access them, and import them as the role account.\n\nProTip: If asked to generate entropy, consider running this on the same machine in another window: `sudo dd if=/dev/sda of=/dev/null`\n\nFor the rest of this doc, you'll need to make the following substitutions:\n\n- ROLEUSER: svc_deployacct or whatever your role account's name is.\n- NEWMASTER: the machine this role account exists on.\n- SECUREHOST: The machine you use to create the keys.\n\nNOTE: This should be more automated/scripted. Patches welcome.\n\nOn SECUREHOST, create the puppet master's keys:\n\n```\n$ mkdir /tmp/NEWMASTER\n$ cd /tmp/NEWMASTER\n$ gpg --homedir . --gen-key\nYour selection?\n   (1) RSA and RSA (default)\nWhat keysize do you want? (2048) DEFAULT\nKey is valid for? (0) DEFAULT\n\n# Real name: Puppet CI Deploy Account\n# Email address: svc_deployacct@hostname.domain.name\n```\n\nNOTE: Rather than a real email address, use the username@FQDN of the host the key will be used on. If you use this role account on many machines, each should have its own key. By using the FQDN of the host, you will be able to know which key is which. In this doc, we'll refer to username@FQDN as $KEYNAME\n\nSave the passphrase somewhere safe!\n\nCreate a sub-key that has no password:\n\n```\n$ gpg --homedir . --edit-key svc_deployacct\ngpg> addkey\n(enter passphrase)\n  Please select what kind of key you want:\n   (3) DSA (sign only)\n   (4) RSA (sign only)\n   (5) Elgamal (encrypt only)\n   (6) RSA (encrypt only)\nYour selection? 6\nWhat keysize do you want? (2048)\nKey is valid for? (0)\nCommand> key 2\n(the new subkey has a \"*\" next to it)\nCommand> passwd\n(enter the main key's passphrase)\n(enter an empty passphrase for the subkey... confirm you want to do this)\nCommand> save\n```\n\nNow securely export this directory to NEWMASTER:\n\n```\ngpg --homedir . --export -a svc_sadeploy >/tmp/NEWMASTER/pubkey.txt\ntar cvf /tmp/keys.tar .\nrsync -avP /tmp/keys.tar NEWMASTER:/tmp/.\n```\n\nOn NEWMASTER, receive the new GnuPG config:\n\n```\nsudo -u svc_deployacct bash\nmkdir -m 0700 -p ~/.gnupg\ncd ~/.gnupg && tar xpvf /tmp/keys.tar\n```\n\n<!---\nBack on SECUREHOST, import the pubkey into the repository.\n\n```\n$ cd .blackbox\n$ gpg --homedir . --import /tmp/NEWMASTER/pubkey.txt\n```\n-->\n\nBack on SECUREHOST, add the new email address to .blackbox/blackbox-admins.txt:\n\n```\ncd /path/to/the/repo\nblackbox_addadmin $KEYNAME /tmp/NEWMASTER\n```\n\nVerify that secring.gpg is a zero-length file. If it isn't, you have somehow added a private key to the keyring. Start over.\n\n```\ncd .blackbox\nls -l secring.gpg\n```\n\nCommit the recent changes:\n\n```\ncd .blackbox\ngit commit -m\"Adding key for KEYNAME\" pubring.gpg trustdb.gpg blackbox-admins.txt\n```\n\nRegenerate all encrypted files with the new key:\n\n```\nblackbox_update_all_files\ngit status\ngit commit -m\"updated encryption\" -a\ngit push\n```\n\nOn NEWMASTER, import the keys and decrypt the files:\n\n```\nsudo -u svc_sadeploy bash   # Become the role account.\ngpg --import /etc/puppet/.blackbox/pubring.gpg\nexport PATH=$PATH:/path/to/blackbox/bin\nblackbox_postdeploy\nsudo -u puppet cat /etc/puppet/hieradata/blackbox.yaml # or any encrypted file.\n```\n\nProTip: If you get \"gpg: decryption failed: No secret key\" then you forgot to re-encrypt blackbox.yaml with the new key.\n\nOn SECUREHOST, securely delete your files:\n\n```\ncd /tmp/NEWMASTER\n# On machines with the \"shred\" command:\nshred -u /tmp/keys.tar\nfind . -type f -print0 | xargs -0 shred -u\n# All else:\nrm -rf /tmp/NEWMASTER\n```\n\nAlso shred any other temporary files you may have made.\n\nReplacing expired keys\n======================\n\nIf someone's key has already expired, blackbox will stop\nencrypting.  You see this error:\n\n```\n$ blackbox_edit_end modified_file.txt\n--> Error: can't re-encrypt because a key has expired.\n```\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\nYou can also detect keys that are about to expire by issuing this command and manually reviewing the \"expired:\" dates:\n\n    gpg --homedir=.blackbox  --list-keys\n\nor... list UIDs that will expire within 1 month from today: (Warning: this also lists keys without an expiration date)\n\n    gpg --homedir=.blackbox --list-keys  --with-colons --fixed-list-mode  | grep ^uid | awk -F: '$6 < '$(( $(date +%s) + 2592000))\n\nHere's how to replace the key:\n\n- Step 1. Administrator removes expired user:\n\nWarning: This process will erase any unencrypted files that you were in the process of editing. Copy them elsewhere and restore the changes when done.\n\n```\nblackbox_removeadmin expired_user@example.com\n# This next command overwrites any changed unencrypted files. See warning above.\nblackbox_update_all_files\ngit commit -m \"Re-encrypt all files\"\ngpg --homedir=.blackbox --delete-key expired_user@example.com\ngit commit -m 'Cleaned expired_user@example.com from keyring'  .blackbox/*\ngit push\n```\n\n- Step 2. Expired user adds an updated key:\n\n```\ngit pull\nblackbox_addadmin updated_user@example.com\ngit commit -m'NEW ADMIN: updated_user@example.com .blackbox/pubring.gpg .blackbox/trustdb.gpg .blackbox/blackbox-admins.txt\ngit push\n```\n\n- Step 3. Administrator re-encrypts all files with the updated key of the expired user:\n\n```\ngit pull\ngpg --import .blackbox/pubring.gpg\nblackbox_update_all_files\ngit commit -m \"Re-encrypt all files\"\ngit push\n```\n\n- Step 4: Clean up:\n\nAny files that were temporarily copied in the first step so as to not be overwritten can now be copied back and re-encrypted with the `blackbox_edit_end` command.\n\n(Thanks to @chishaku for finding a solution to this problem!)\n\n### Configure git to show diffs in encrypted files\n\nIt's possible to tell Git to decrypt versions of the file before running them through `git diff` or `git log`. To achieve this do:\n\n- Add the following to `.gitattributes` at the top of the git repository:\n\n```\n*.gpg diff=blackbox\n```\n\n- Add the following to `.git/config`:\n\n```\n[diff \"blackbox\"]\n    textconv = gpg --use-agent -q --batch --decrypt\n````\n\nAnd now commands like `git log -p file.gpg` will show a nice log of the changes in the encrypted file.\n\nSome common errors\n==================\n\n`gpg: filename: skipped: No public key` -- Usually this means there is an item in `.blackbox/blackbox-admins.txt` that is not the name of the key. Either something invalid was inserted (like a filename instead of a username) or a user has left the organization and their key was removed from the keychain, but their name wasn't removed from the blackbox-admins.txt file.\n\n`gpg: decryption failed: No secret key` -- Usually means you forgot to re-encrypt the file with the new key.\n\n`Error: can't re-encrypt because a key has expired.` -- A user's key has expired and can't be used to encrypt any more. Follow the [Replace expired keys](#replace-expired-keys) tip.\n\nFYI: Your repo may use `keyrings/live` instead of `.blackbox`. See \"Where is the configuration stored?\"\n\nUsing Blackbox without a repo\n=============================\n\nIf the files are copied out of a repo they can still be decrypted and edited. Obviously edits, changes to keys, and such will be lost if they are made outside the repo. Also note that commands are most likely to only work if run from the base directory (i.e. the parent to the .blackbox directory).\n\nThe following commands have been tested outside a repo:\n\n- `blackbox_postdeploy`\n- `blackbox_edit_start`\n- `blackbox_edit_end`\n\nSome Subversion gotchas\n=======================\n\nThe current implementation will store the blackbox in `/keyrings` at the root of the entire repo.  This will create an issue between environments that have different roots (i.e. checking out `/` on development vs `/releases/foo` in production). To get around this, you can `export BLACKBOX_REPOBASE=/path/to/repo` and set a specific base for your repo.\n\nThis was originally written for git and supports a two-phase commit, in which `commit` is a local commit and \"push\" sends the change upstream to the version control server when something is registered or deregistered with the system.  The current implementation will immediately `commit` a file (to the upstream subversion server) when you execute a `blackbox_*` command.\n\nUsing Blackbox when gpg2 is installed next to gpg\n=================================================\n\nIn some situations, team members or automated roles need to install gpg\n2.x alongside the system gpg version 1.x to catch up with the team's gpg\nversion. On Ubuntu 16, you can ```apt-get install gnupg2``` which\ninstalls the binary gpg2. If you want to use this gpg2 binary, run every\nblackbox command with GPG=gpg2.\n\nFor example:\n\n```\nGPG=gpg2 blackbox_postdeploy\n```\n\nHow to submit bugs or ask questions?\n====================================\n\nWe welcome questions, bug reports and feedback!\n\nThe best place to start is to join the [blackbox-project mailing list](https://groups.google.com/d/forum/blackbox-project) and ask there.\n\nBugs are tracked here in Github. Please feel free to [report bugs](https://github.com/StackExchange/blackbox/issues) yourself.\n\nDeveloper Info\n==============\n\nCode submissions are gladly welcomed! The code is fairly easy to read.\n\nGet the code:\n\n```\ngit clone git@github.com:StackExchange/blackbox.git\n```\n\nTest your changes:\n\n```\nmake confidence\n```\n\nThis runs through a number of system tests. It creates a repo, encrypts files, decrypts files, and so on. You can run these tests to verify that the changes you made didn't break anything. You can also use these tests to verify that the system works with a new operating system.\n\nPlease submit tests with code changes:\n\nThe best way to change BlackBox is via Test Driven Development. First add a test to `tools/confidence.sh`. This test should fail, and demonstrate the need for the change you are about to make. Then fix the bug or add the feature you want. When you are done, `make confidence` should pass all tests. The PR you submit should include your code as well as the new test. This way the confidence tests accumulate as the system grows as we know future changes don't break old features.\n\nNote: The tests currently assume \"git\" and have been tested only on CentOS, Mac OS X, and Cygwin. Patches welcome!\n\nAlternatives\n============\n\nHere are other open source packages that do something similar to BlackBox. If you like them better than BlackBox, please use them.\n\n- [git-crypt](https://www.agwa.name/projects/git-crypt/)\n- [Pass](http://www.zx2c4.com/projects/password-store/)\n- [Transcrypt](https://github.com/elasticdog/transcrypt)\n- [Keyringer](https://keyringer.pw/)\n- [git-secret](https://github.com/sobolevn/git-secret)\n\ngit-crypt has the best git integration. Once set up it is nearly transparent to the users. However it only works with git.\n\n\nLicense\n=======\n\nThis content is released under the MIT License.\nSee the [LICENSE.txt](LICENSE.txt) file.\n"
        },
        {
          "name": "RELEASE_ENGINEERING.md",
          "type": "blob",
          "size": 4.6455078125,
          "content": "Table of Contents:\n==================\n\n-\t[Branches and Tags:](#branches-and-tags)\n-\t[Testing:](#testing)\n-\t[Build Tasks](#build-tasks)\n-\t[Stable Releases](#stable-releases)\n-\t[Production Releases](#production-releases)\n-\t[Updating MacPorts (automatic)](#updating-macports-automatic)\n-\t[Updating MacPorts (manual)](#updating-macports-manual)\n\nBranches and Tags:\n==================\n\nThere are 3 branches/tags:\n\n-\t**HEAD:** The cutting edge of development.\n-\t**tag stable:** Stable enough for use by most people.\n-\t**tag production:** Burned in long enough that we are confident it can be widely adopted.\n\nIf you are packaging BlackBox for distribution, you should track the *tag production*. You might also want to provide a separate package that tracks *tag stable:* for early adopters.\n\nTesting\n=======\n\nTips:\n\n* macOS: `brew install gpg pinentry`\n* FreeBSD: `pkg install gpg gmake`\n* CentOS7: `yum install gpg`\n\nTo run a suite of tests:\n\n```\ncd ~/src/github.com/StackExchange/blackbox\nmake test\n```\n\nFYI: For FreeBSD, use `gmake test`\n\n\nBuild Tasks\n===========\n\nStable Releases\n===============\n\nStep 0. Test the software\n\nRun this command to run the unit and system tests:\n\n```\nmake test\n```\n\nNOTE: The tests require pinentry-tty. On macOS with NIX this\ncan be installed via: `nix-env -i pinentry`\n\nMarking the software to be \"stable\":\n\nStep 1.  Update CHANGELOG.md\n\nUse \"git log\" to see what has changed and update CHANGELOG.md.\n\nFor a new release, add:\n\n```\n   echo Release v1.$(date +%Y%m%d)\n```\n\nCommit with:\n\n```\ngit commit -m'Update CHANGELOG.md' CHANGELOG.md\n```\n\nStep 2. Tag it.\n\n```\ngit pull\ngit tag -d stable\ngit push origin :stable\ngit tag stable\ngit push origin tag stable\n```\n\nStep 3. Mark your calendar 1 week from today to check to see if this should be promoted to production.\n\nProduction Releases\n===================\n\nIf no bugs have been reported a full week after a stable tag has been pushed, mark the release to be \"production\".\n\n```\ngit fetch\ngit checkout stable\ngit tag -d production\ngit push origin :production\ngit tag production\ngit push origin tag production\nR=\"v1.$(date +%Y%m%d)\"\ngit tag \"$R\"\ngit push origin tag \"$R\"\n```\n\nStep 4. Get credit!\n\nRecord the fact that you did this release in your weekly accomplishments file.\n\n\n\nUpdating MacPorts (automatic)\n=============================\n\nStep 1: Generate the Portfile\n\n```\ntools/macports_report_upgrade.sh  1.20150222\n```\n\nThis script will generate a file called `Portfile-vcs_blackbox.diff` and instructions on how to submit it as a update request.\n\nStep 2: Submit the update request.\n\nSubmit the diff file as a bug as instructed. The instructions should look like this:\n\n-\tPLEASE OPEN A TICKET WITH THIS INFORMATION: https://trac.macports.org/newticket\n-\tSummary: `vcs_blackbox @1.20150222 Update to latest upstream`\n-\tDescription: `New upstream of vcs_blackbox.\n\tgithub.setup and checksums updated.`\n-\tType: `update`\n-\tComponent: `ports`\n-\tPort: `vcs_blackbox`\n-\tKeywords: `maintainer haspatch`\n-\tAttach this file: `Portfile-vcs_blackbox.diff`\n\nStep 3: Watch for the update to happen.\n\n\nUpdating MacPorts (manual)\n==========================\n\nThis is the old, manual, procedure. If the automated procedure fails to work, these notes may or may not be helpful.\n\nThe ultimate result of the script should be the output of `diff -u Portfile.orig Portfile` which is sent as an attachment to MacPorts. The new `Portfile` should have these changes:\n\n1.\tThe `github.setup` line should have a new version number.\n2.\tThe `checksums` line(s) should have updated checksums.\n\nHow to generate the checksums?\n\nThe easiest way is to to make a Portfile with incorrect checksums, then run `sudo port -v checksum vcs_blackbox` to see what they should have been. Fix the file, and try again until the checksum command works.\n\nNext run `port lint vcs_blackbox` and make sure it has no errors.\n\nSome useful commands:\n\nChange repos in sources.conf:\n\n```\nsudo vi /opt/local/etc/macports/sources.conf\n  Add this line early in the file:\n  file:///var/tmp/ports\n```\n\nAdd a local repo:\n\n```\nfgrep >/dev/null -x 'file:///var/tmp/ports' /opt/local/etc/macports/sources.conf || sudo sed -i -e '1s@^@file:///var/tmp/ports\\'$'\\n@' /opt/local/etc/macports/sources.conf\n```\n\nRemove the local repo:\n\n```\nsudo sed -i -e '\\@^file:///var/tmp/ports@d' /opt/local/etc/macports/sources.conf\n```\n\nTest a Portfile:\n\n```\nsudo port uninstall vcs_blackbox\nsudo port clean --all vcs_blackbox\nrm -rf ~/.macports/opt/local/var/macports/sources/rsync.macports.org/release/tarballs/ports/security/vcs_blackbox/\nrm -rf /var/tmp/ports\nmkdir -p /var/tmp/ports/security/vcs_blackbox\ncp Portfile /var/tmp/ports/security/vcs_blackbox\ncd /var/tmp/ports && portindex\nsudo port -v checksum vcs_blackbox\nsudo port install vcs_blackbox\n```\n"
        },
        {
          "name": "SPECS",
          "type": "tree",
          "content": null
        },
        {
          "name": "Version2-Ideas.md",
          "type": "blob",
          "size": 7.091796875,
          "content": "# Ideas for BlackBox Version 2\n\nI'm writing this to solicit feedback and encourage discussion.\n\nHere are my thoughts on a \"version 2\" of BlackBox.  This is where\nI list ideas that would require major changes to the system. They\nmight break backwards compatibility, though usually not.\n\nBlackBox grew from a few simple shell scripts used at StackOverflow.com\nto a larger system used by dozens (hundreds?) of organizations. Not\nall the design decisions were \"forward looking\".\n\nThese are the things I'd like to change someday.\n\n[TOC]\n\n## Change the commmand names\n\nThere should be one program, with subcommands that have names that make more sense:\n\n* `blackbox admin add <key>`\n* `blackbox admin list`\n* `blackbox admin remove <key>`\n* `blackbox cat <filename> ...`\n* `blackbox decrypt <filename> ...`\n* `blackbox diff <filename> ...`\n* `blackbox edit <filename> ...`\n* `blackbox encrypt <filename> ...`\n* `blackbox file add <filename> ...`\n* `blackbox file list`\n* `blackbox file remove <filename> ...`\n* `blackbox info`\n* `blackbox init`\n* `blackbox reencrypt`\n* `blackbox shred --all|<filename> ...`\n* `blackbox status --all|<filename> ...`\n\nBackwards compatibility: The old scripts will be rewritten to use the new commands.\n\n## Change the \"keyrings\" directory\n\nThe name `keyrings` was unfortunate.  First, it should probably begin with a `.`.  Second, it stores more than just keyrings.  Lastly, I'm finding that in most cases we want many repos to refer to the same keyring, which is not supported very well.\n\nA better system would be:\n\n1. If `$BLACKBOX_CONFIG` is set, use that directory.\n2. If the repo base directory has a file called `.blackbox_external`, read that file as if you are reading `$BLACKBOX_CONFIG`\n3. If the repo base directory has a `keyrings` directory, use that.\n4. If the repo base directory has a `.blackbox` directory, use that.\n\nSome thoughts on `.blackbox_external`:\nI'm not sure what the format should be, but I want it to be simple and expandable.  It should support support `../../dir/name` and `/long/path`.  However some day we may want to include a Git URL and have the system automatically get the keychain from it. That means the format has to be something like directory:../dir/name so that later we can add git:the-url.\n\nNOTE: Maybe `.blackbox_external` should be `.blackbox/BLACKBOX_CONFIG`?\n\nBackwards compatibility: `keyrings` would be checked before `.blackbox`.\n\n## System Test\n\nThere needs to be a very complete system test.  The `make test` we\nhave now is great for something written in bash.\n\nIt should be easy to make tests. Perhaps a directory of files, each\nspecifying a test.  We could make a little language for writing tests.\n\n    # This test becomes the user \"alice\" and verifies that she\n    # can encrypt a file, and decrypt it, with full fidelity.\n    BECOME alice a\n    BASH echo \"foo contents\" >foo.txt\n    SHOULD_NOT_EXIST foo.txt.gpg\n    BASH blackbox encrypt foo.txt\n    SHOULD_NOT_EXIST foo.txt\n    SHOULD_EXIST foo.txt.gpg\n    BASH_WITH_PASSWORD a blackbox decrypt foo.txt\n    SHOULD_EXIST foo.txt.gpg\n    SHOULD_EXIST foo.txt\n    SHOULD_CONTAIN foo.txt \"foo contents\\n\"\n\n## Plug-in support\n\nThere should plug-ins support for:\n\nRepo type:\n\n* Git -- Using /usr/bin/git or git.exe\n* Subversion\n* Mercurial\n* None (repoless)\n* Autodetect\n\nEncryption software:\n\n* GnuPG -- using /usr/bin/gpg{,2} or gpg.exe\n* golang.org/x/crypto/openpgp\n\n## JSON or .txt\n\nThe files in .blackbox are mostly .txt files.  Instead we should\ndefine a .json format, and only read the .txt file is the .json file\ndoesn't exist.\n\n\n## Repo-less mode\n\nI can't imagine storing files that aren't in a repo. I just put everything in repos lately. I use it more than I use NFS.  That said, I have received feedback that people would like the ability to disable automatic committing of files.\n\nI prefer the file commits to be automatic because when they were manual, people often accidentally committed the plaintext file instead of the GPG file.  Fixing such mistakes is a PITA and, of yeah, a big security nightmare.\n\nThat said, I'm willing to have a \"repo-less\" mode.\n\nWhen this mode is triggered, no add/commit/ignore tasks are done.  The search for the keyrings directory still uses `$BLACKBOX_CONFIG` but if that is unset it looks for `.blackbox_config` in the current directory, then recursively `..` until we hit `/`.\n\nI think (but I'm not sure) this would benefit the entire system because it would force us to re-think what VCS actions are done when.\n\nI think (but I'm not sure) that a simple way to implement this would be to add an environment variable that overrides the automatic VCS detection. When set to \"none\", all VCS operations would basically become no-ops.  (This could be done by writing a plug-in that does nothing for all the `vcs_*` calls)\n\n\nBackwards compatibility: This would add a `none` VCS, not remove any existing functionality.\n\n\n## Is \"bash\" the right language?\n\n`bash` is fairly universal. It even exists on Windows.  However it is not the right language for large systems. Writing the acceptance tests is quite a bear.  Managing `.gitignore` files in bash is impossible and the current implementation fails in many cases.\n\n`python` is my second favorite language. It would make the code cleaner and more testable. However it is not installed everywhere.  I would also want to write it in Python3 (why start a new project in Python2?) but sadly Python3 is less common.  It is a chicken vs. egg situation.\n\n`go` is my favorite language. I could probably rewrite this in go in a weekend. However, now the code is compiled, not interpreted. Therefore we lose the ability to just `git clone` and have the tools you want.  Not everyone has a Go compiler installed on every machine.\n\nThe system is basically unusable on Windows without Cygwin or MINGW.  A rewrite in python or go would make it work better on Windows, which currently requires Cygwin or MinGW (which is a bigger investment than installing Python). On the other hand, maybe Ubuntu-on-Windows makes that a non-issue.\n\nAs long as the code is in `bash` the configuration files like `blackbox-files.txt` and `blackbox-admins.txt` have problems.  Filenames with carriage returns aren't supported.  If this was in Python/Go/etc. those files could be json or some format with decent quoting and we could handle funny file names better. On the other hand, maybe it is best that we don't support funny filenames... we shouldn't enable bad behavior.\n\nHow important is itto blackbox users that the system is written in `bash`?\n\n\n## Ditch the project and use git-crypt\n\nPeople tell me that git-crypt is better because, as a plug-in, automagically supports `git diff`, `git log` and `git blame`.\n\nHowever, I've never used it so I don't have any idea whether git-crypt is any better than blackbox.\n\nOf course, git-crypt doesn't work with SVN, HG, or any other VCS.  Is blackbox's strong point the fact that it support so many VCS systems?  To be honest, it originally only supported HG and GIT because I was at a company that used HG but then changed to GIT.  Supporting anything else was thanks to contributors. Heck, HG support hasn't even been tested recently (by me) since we've gone all git where I work.\n\nHow important is this to BlackBox users?\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "binv2",
          "type": "tree",
          "content": null
        },
        {
          "name": "blackbox.plugin.zsh",
          "type": "blob",
          "size": 1.3720703125,
          "content": "#!/usr/bin/env zsh\n# The MIT License (MIT)\n\n# Copyright (c) 2014 Stack Exchange, Inc.\n\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n\n# Make it easy to install with antigen and other frameworks that can cope\n# with antigen/oh-my-zsh bundles\n#\n# antigen bundle StackExchange/blackbox\n\n# Add our plugin's bin diretory to user's path\nPLUGIN_BIN=\"$(dirname $0)/bin\"\nexport PATH=\"${PATH}:${PLUGIN_BIN}\"\n"
        },
        {
          "name": "build",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.291015625,
          "content": "module github.com/StackExchange/blackbox/v2\n\ngo 1.14\n\nrequire (\n\tgithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883\n\tgithub.com/mattn/go-runewidth v0.0.9 // indirect\n\tgithub.com/olekukonko/tablewriter v0.0.4\n\tgithub.com/sergi/go-diff v1.2.0 // indirect\n\tgithub.com/urfave/cli/v2 v2.2.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.2880859375,
          "content": "github.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883 h1:bvNMNQO63//z+xNgfBlViaCIJKLlCJ6/fmUseuG0wVQ=\ngithub.com/andreyvit/diff v0.0.0-20170406064948-c7f18ee00883/go.mod h1:rCTlJbsFo29Kk6CurOXKm700vrz8f0KW0JNfpkRJY/8=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d h1:U+s90UTSYgptZMwQh2aRr3LuazLJIa+Pg3Kc1ylSYVY=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mattn/go-runewidth v0.0.7/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/olekukonko/tablewriter v0.0.4 h1:vHD/YYe1Wolo78koG299f7V/VAS08c6IpCLn+Ejf/w8=\ngithub.com/olekukonko/tablewriter v0.0.4/go.mod h1:zq6QwlOf5SlnkVbMSr5EoBv3636FWnp+qbPhuoO21uA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.0.1 h1:lPqVAte+HuHNfhJ/0LC98ESWRz8afy9tM/0RK8m9o+Q=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.2.0 h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=\ngithub.com/sergi/go-diff v1.2.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0 h1:PdmoCO6wvbs+7yrJyMORt4/BmY5IYyJwS/kOiWx8mHo=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.4.0 h1:2E4SXV/wtOkTonXsotYi4li6zVWxYlZuYNCXe9XRJyk=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/urfave/cli/v2 v2.2.0 h1:JTTnM6wKzdA0Jqodd966MVj4vWbbquZykeX1sKbe2C4=\ngithub.com/urfave/cli/v2 v2.2.0/go.mod h1:SE9GqnLQmjVa0iPEY0f1w3ygNIYcIJ0OKPMoW2caLfQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\n"
        },
        {
          "name": "integrationTest",
          "type": "tree",
          "content": null
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}