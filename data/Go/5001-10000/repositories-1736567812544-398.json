{
  "metadata": {
    "timestamp": 1736567812544,
    "page": 398,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ffhelicopter/Go42",
      "stars": 5137,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0390625,
          "content": "language: go\n\n\ngo:\n  - 1.10.x\n  - 1.11.x"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1240234375,
          "content": "\n[![travis](https://travis-ci.org/ffhelicopter/go42.svg?branch=master)](https://travis-ci.org/ffhelicopter/go42)\n[![Go Report Card](https://goreportcard.com/badge/github.com/ffhelicopter/go42)](https://goreportcard.com/report/github.com/ffhelicopter/go42)\n\n# [《Go语言四十二章经》](https://github.com/ffhelicopter/Go42/blob/master/SUMMARY.md \"《Go语言四十二章经》\")\n\n作者：ffhelicopter（李骁）  完稿时间：2018-04-15\n\n\n## 进阶阅读\n\n《Go语言四十二章经》开源电子书升级版《深入学习Go语言》，在当当，天猫，京东有售，感谢各位对此书的支持与关注!\n\n本书适合初次学习Go语言，以及对Go语言有初步了解的开发者，读者可通过本书努力在尽量短的时间内成长为一名合格的Go语言开发者。\n\n![go.png](https://bkimg.cdn.bcebos.com/pic/77c6a7efce1b9d16940ab8bcfddeb48f8d546419?x-bce-process=image/resize,m_lfit,w_268,limit_1/format,f_jpg)\n\n\n\n## 前言\n写《Go语言四十二章经》，纯粹是因为开发过程中碰到过的一些问题，踩到过的一些坑，感觉在Go语言学习使用过程中，有必要深刻理解这门语言的核心思维、清晰掌握语言的细节规范以及反复琢磨标准包代码设计模式，于是才有了这本书。\n\nGo语言以语法简单、门槛低、上手快著称。但入门后很多人发现要写出地道的、遵循 Go语言思维的代码却是不易。\n\n在刚开始学习中，我带着比较强的面向对象编程思维惯性来写代码。但后来发现，带着面向对象的思路来写Go 语言代码会很难继续写下去，或者说看了系统源代码或其他知名开源包源代码后，围绕着struct和interface来写代码会更高效，代码更美观。虽然有人认为，Go语言的strcut 和 interface 一起，配合方法，也可以理解为面向对象，这点我姑且认可，但开发中不要过意考虑这些。因为在Go 语言中，interface接口的使用将更为灵活，刻意追求面向对象，会导致你很难理解接口在Go 语言中的妙处。\n\n作为Go语言的爱好者，在阅读系统源代码或其他知名开源包源代码时，发现大牛对这门语言的了解之深入，代码实现之巧妙优美，所以我建议你有时间多多阅读这些代码。网上有说Go大神的标准是“能理解简洁和可组合性哲学”，的确Go语言追求代码简洁到极致，而组合思想可谓借助于struct和interface两者而成为Go的灵魂。\n\nfunction，method，interface，type等词语是程序员们接触比较多的关键字，但在Go语言中，你会发现，其有了更强大，更灵活的用法。当你彻底理解了Go语言相关基本概念，以及对其特点有深入的认知，当然这也这本书的目的，再假以时日多练习和实践，我相信你应该很快就能彻底掌握这门语言，成为一名出色的Gopher。\n\n这本书适合Go语言新手来细细阅读，对于有一定经验的开发人员，也可以根据自己的情况，选择一些章节来看。\n\n第一章到第二十六章主要讲Go语言的基础知识，其中第十七章的type，第十八章的struct，第十九章的interface，以及第二十章的方法，都是Go语言中非常非常重要的部分。\n\n而第二十一章的协程，第二十二章的通道以及第二十三章的同步与锁，这三章在并发处理中我们通常都需要用到，需要弄清楚他们的概念和彼此间联系。\n\n从第二十七章开始，到第三十八章，讲述了Go标准包中比较重要的几个包，可以仔细看源代码来学习大师们的编程风格。\n\n从第三十九章开始到结尾，主要讲述了比较常用的第三方包，但由于篇幅有限，也就不展开来讲述，有兴趣的朋友可直接到相关开源项目详细了解。\n\n最后，希望更多的人了解和使用Go语言，也希望阅读本书的朋友们多多交流。\n\n\n祝各位Gopher们工作开心，愉快编码！\n\n\n本书内容在github更新：https://github.com/ffhelicopter/Go42/blob/master/SUMMARY.md<br>\n\n\n#### [>>>开始阅读 第一章 Go安装与运行](https://github.com/ffhelicopter/Go42/blob/master/content/42_01_install.md)"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 10.8447265625,
          "content": "# [前言](README.md)\n# [第一章 Go安装与运行](content/42_01_install.md)\n## [1.1 Go 安装](content/42_01_install.md#11-go安装)\n## [1.2 Go 语言开发工具](content/42_01_install.md#12-go语言开发工具)\n\n# [第二章 数据类型](content/42_02_datatype.md)\n## [2.1 基本数据类型](content/42_02_datatype.md#21-基本数据类型)\n## [2.2 Unicode（UTF-8）](content/42_02_datatype.md#22-unicodeutf-8)\n## [2.3 复数](content/42_02_datatype.md#23-复数)\n\n# [第三章 变量](content/42_03_var.md)\n## [3.1 变量以及声明](content/42_03_var.md#31-变量以及声明)\n## [3.2 零值nil](content/42_03_var.md#32-零值nil)\n\n# [第四章 常量](content/42_04_const.md)\n## [4.1 常量以及iota](content/42_04_const.md#41-常量以及iota)\n\n# [第五章 作用域](content/42_05_scope.md)\n## [5.1 作用域](content/42_05_scope.md#51-作用域)\n\n# [第六章 约定和惯例](content/42_06_convention.md)\n## [6.1 可见性规则](content/42_06_convention.md#61-可见性规则)\n## [6.2 命名规范以及语法惯例](content/42_06_convention.md#62-命名规范以及语法惯例)\n## [6.3 注释](content/42_06_convention.md#63-注释)\n\n# [第七章 代码结构化](content/42_07_package.md)\n## [7.1 包的概念](content/42_07_package.md#71-包的概念)\n## [7.2 包的导入](content/42_07_package.md#72-包的导入)\n## [7.3 标准包](content/42_07_package.md#73-标准包)\n## [7.4 从GitHub安装包](content/42_07_package.md#74-从-github-安装包)\n## [7.5 导入外部安装包](content/42_07_package.md#75-导入外部安装包)\n## [7.6 包的初始化](content/42_07_package.md#76-包的初始化)\n\n# [第八章 Go项目开发与编译](content/42_08_project.md)\n## [8.1 项目结构](content/42_08_project.md#81-项目结构)\n## [8.2 使用godoc](content/42_08_project.md#82-使用-godoc)\n## [8.3 Go程序的编译](content/42_08_project.md#83-go程序的编译)\n\n# [第九章 运算符](content/42_09_operator.md)\n## [9.1 内置运算符](content/42_09_operator.md#91-内置运算符)\n## [9.2 运算符优先级](content/42_09_operator.md#92-运算符优先级)\n## [9.3 几个特殊运算符](content/42_09_operator.md#93-几个特殊运算符)\n\n# [第十章 string](content/42_10_string.md)\n## [10.1 字符串介绍](content/42_10_string.md#101-字符串介绍)\n## [10.2 字符串拼接](content/42_10_string.md#102-字符串拼接)\n## [10.3 有关string处理](content/42_10_string.md#103-有关string处理)\n\n# [第十一章 数组(Array)](content/42_11_array.md)\n## [11.1 数组(Array)](content/42_11_array.md#111-数组array)\n\n# [第十二章 切片(slice)](content/42_12_slice.md)\n## [12.1 切片(slice)](content/42_12_slice.md#121-切片slice)\n## [12.2 切片重组(reslice)](content/42_12_slice.md#122-切片重组reslice)\n## [12.3 陈旧的(Stale)Slices](content/42_12_slice.md#123-陈旧的切片stale-slices)\n\n# [第十三章 字典(Map)](content/42_13_map.md)\n## [13.1 字典(Map)](content/42_13_map.md#131-字典map)\n## [13.2 range语句中更新引用元素的值](content/42_13_map.md#132-range语句中的值)\n\n# [第十四章 流程控制](content/42_14_flow.md)\n## [14.1 switch 语句](content/42_14_flow.md#141-switch-语句)\n## [14.2 select控制](content/42_14_flow.md#142-select控制)\n## [14.3 for循环](content/42_14_flow.md#143-for循环)\n## [14.4 for-range 结构](content/42_14_flow.md#144-for-range-结构)\n\n# [第十五章 错误处理](content/42_15_errors.md)\n## [15.1 错误类型](content/42_15_errors.md#151-错误类型)\n## [15.2 panic](content/42_15_errors.md#152-panic)\n## [15.3 recover：从 panic 中恢复](content/42_15_errors.md#153-recover从-panic-中恢复)\n## [15.4 有关于defer](content/42_15_errors.md#154-有关于defer)\n\n# [第十六章 函数](content/42_16_function.md)\n## [16.1 函数分类](content/42_16_function.md#161-函数分类)\n## [16.2 函数调用](content/42_16_function.md#162-函数调用)\n## [16.3 内置函数](content/42_16_function.md#163-内置函数)\n## [16.4 递归与回调](content/42_16_function.md#164-递归与回调)\n## [16.5 匿名函数](content/42_16_function.md#165-匿名函数)\n## [16.6 闭包函数](content/42_16_function.md#166-闭包函数)\n## [16.7 变参函数](content/42_16_function.md#167-变参函数)\n\n# [第十七章 type关键字](content/42_17_type.md)\n## [17.1 type](content/42_17_type.md#171-type)\n\n# [第十八章 struct 结构体](content/42_18_struct.md)\n## [18.1 结构体(struct)](content/42_18_struct.md#181结构体struct)\n## [18.2 结构体特性](content/42_18_struct.md#182-结构体特性)\n## [18.3 匿名成员](content/42_18_struct.md#183-匿名成员)\n## [18.4 嵌入与聚合](content/42_18_struct.md#184-嵌入与聚合)\n## [18.5 命名冲突](content/42_18_struct.md#185-命名冲突)\n\n# [第十九章 接口](content/42_19_interface.md)\n## [19.1 接口是什么](content/42_19_interface.md#191-接口是什么)\n## [19.2 接口嵌套](content/42_19_interface.md#192-接口嵌套)\n## [19.3 类型断言](content/42_19_interface.md#193-类型断言)\n## [19.4 接口与动态类型](content/42_19_interface.md#194-接口与动态类型)\n## [19.5 接口的提取](content/42_19_interface.md#195-接口的提取)\n## [19.6 接口的继承](content/42_19_interface.md#196-接口的继承)\n\n# [第二十章 方法](content/42_20_method.md)\n## [20.1 方法的定义](content/42_20_method.md#201-方法的定义)\n## [20.2 函数和方法的区别](content/42_20_method.md#202-函数和方法的区别)\n## [20.3 指针或值方法](content/42_20_method.md#203-指针或值方法)\n## [20.4 内嵌类型的方法提升](content/42_20_method.md#204-内嵌类型的方法提升)\n\n# [第二十一章 协程(goroutine)](content/42_21_goroutine.md)\n## [21.1 并发](content/42_21_goroutine.md#211-并发)\n## [21.2 goroutine](content/42_21_goroutine.md#212-goroutine)\n\n# [第二十二章 通道(channel)](content/42_22_channel.md)\n## [22.1 通道(channel)](content/42_22_channel.md#221-通道channel)\n\n# [第二十三章 同步与锁](content/42_23_sync.md)\n## [23.1 同步锁](content/42_23_sync.md#231-同步锁)\n## [23.2 读写锁](content/42_23_sync.md#232-读写锁)\n## [23.3 sync.WaitGroup](content/42_23_sync.md#233-syncwaitgroup)\n## [23.4 sync.Once](content/42_23_sync.md#234-synconce)\n## [23.5 sync.Map](content/42_23_sync.md#235-syncmap)\n\n# [第二十四章 指针和内存](content/42_24_pointer.md)\n## [24.1 指针](content/42_24_pointer.md#241-指针)\n## [24.2 new() 和 make() 的区别](content/42_24_pointer.md#242-new-和-make-的区别)\n## [24.3 垃圾回收和 SetFinalizer](content/42_24_pointer.md#243-垃圾回收和-setfinalizer)\n\n# [第二十五章 面向对象](content/42_25_oo.md)\n## [25.1 Go 中的面向对象](content/42_25_oo.md#251-go-中的面向对象)\n## [25.2 多重继承](content/42_25_oo.md#252-多重继承)\n\n# [第二十六章 测试](content/42_26_testing.md)\n## [26.1 单元测试](content/42_26_testing.md#261-单元测试)\n## [26.2 基准测试](content/42_26_testing.md#262-基准测试)\n## [26.3 分析并优化 Go 程序](content/42_26_testing.md#263-分析并优化-go-程序)\n## [26.4 用 pprof 调试](content/42_26_testing.md#264-用-pprof-调试)\n\n# [第二十七章 反射(reflect)](content/42_27_reflect.md)\n## [27.1 反射(reflect)](content/42_27_reflect.md#271-反射reflect)\n## [27.2 反射结构体](content/42_27_reflect.md#272-反射结构体)\n\n# [第二十八章 unsafe包](content/42_28_unsafe.md)\n## [28.1 unsafe 包](content/42_28_unsafe.md#281-unsafe-包)\n## [28.2 指针运算](content/42_28_unsafe.md#282-指针运算)\n\n# [第二十九章 排序(sort)](content/42_29_sort.md)\n## [29.1 sort包介绍](content/42_29_sort.md#291-sort包介绍)\n## [29.2 自定义sort.Interface排序](content/42_29_sort.md#292-自定义sortinterface排序)\n## [29.3 sort.Slice](content/42_29_sort.md#293-sortslice)\n\n# [第三十章 os包](content/42_30_os.md)\n## [30.1 启动外部命令和程序](content/42_30_os.md#301-启动外部命令和程序)\n## [30.2 os/signal 信号处理](content/42_30_os.md#302-ossignal-信号处理)\n\n# [第三十一章 文件操作与I/O](content/42_31_io.md)\n## [31.1 文件系统](content/42_31_io.md#311-文件系统)\n## [31.2 I/O读写](content/42_31_io.md#312-io读写)\n## [31.3 ioutil包](content/42_31_io.md#313-ioutil包)\n## [31.4 bufio包](content/42_31_io.md#314-bufio包)\n\n# [第三十二章 fmt包与日志log包](content/42_32_fmt.md)\n## [32.1 fmt包格式化I/O](content/42_32_fmt.md#321-fmt包格式化io)\n## [32.2 格式化verb应用](content/42_32_fmt.md#322-格式化verb应用)\n## [32.3 日志log包](content/42_32_fmt.md#323-日志log包) \n\n# [第三十三章 Socket网络](content/42_33_socket.md)\n## [33.1 Socket基础知识](content/42_33_socket.md#331-socket基础知识)\n## [33.2 TCP 与 UDP](content/42_33_socket.md#332-tcp-与-udp)\n\n# [第三十四章 命令行flag包 ](content/42_34_flag.md)\n## [34.1 命令行](content/42_34_flag.md#341-命令行)\n## [34.2 flag包](content/42_34_flag.md#342-flag包)\n\n# [第三十五章 模板](content/42_35_template.md)\n## [35.1 text/template](content/42_35_template.md#351-texttemplate)\n## [35.2 html/template](content/42_35_template.md#352-htmltemplate)\n## [35.3 模板语法](content/42_35_template.md#353-模板语法)\n\n# [第三十六章 net/http包](content/42_36_http.md)\n## [36.1 Request](content/42_36_http.md#361-request)\n## [36.2 Response](content/42_36_http.md#362-response)\n## [36.3 client](content/42_36_http.md#363-client)\n## [36.4 server](content/42_36_http.md#364-http-server-服务端)\n## [36.5 自定义处理器（Custom Handlers）](content/42_36_http.md#365-自定义处理器custom-handlers)\n## [36.6 将函数作为处理器](content/42_36_http.md#366-将函数作为处理器)\n## [36.7 中间件Middleware](content/42_36_http.md#367-中间件middleware)\n## [36.8 静态站点](content/42_36_http.md#368-静态站点)\n\n# [第三十七章 context包](content/42_37_context.md)\n## [37.1 context包](content/42_37_context.md#371-context包)\n## [37.2 context应用](content/42_37_context.md#372-context应用)\n\n# [第三十八章 数据序列化](content/42_38_json.md)\n## [38.1 序列化与反序列化](content/42_38_json.md#381-序列化与反序列化)\n## [38.2 JSON数据格式](content/42_38_json.md#382-json数据格式)\n## [38.3 Protocol Buffer数据格式](content/42_38_json.md#383-protocol-buffer数据格式)\n\n# [第三十九章 MySQL数据库](content/42_39_mysql.md)\n## [39.1 database/sql包](content/42_39_mysql.md#391-databasesql包)\n## [39.2 MySQL数据库操作](content/42_39_mysql.md#392-mysql数据库操作)\n\n# [第四十章 LevelDB与BoltDB](content/42_40_kvdb.md)\n## [40.1 LevelDB](content/42_40_kvdb.md#401-leveldb)\n## [40.2 BoltDB](content/42_40_kvdb.md#402-boltdb)\n\n# [第四十一章 网络爬虫](content/42_41_crawler.md)\n## [41.1 Colly网络爬虫框架](content/42_41_crawler.md#411Colly网络爬虫框架)\n## [41.2 goquery HTML解析](content/42_41_crawler.md#412-goquery-html解析)\n\n# [第四十二章 WEB框架(Gin)](content/42_42_gin.md)\n## [42.1 有关于Gin](content/42_42_gin.md#421-有关于gin)\n## [42.2 Gin实际应用](content/42_42_gin.md#422-gin实际应用)"
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "source-code",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}