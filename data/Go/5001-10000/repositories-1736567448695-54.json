{
  "metadata": {
    "timestamp": 1736567448695,
    "page": 54,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "keybase/client",
      "stars": 8941,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.154296875,
          "content": "codecov:\n  allow_coverage_offsets: true\ncoverage:\n  status:\n    project:\n      default:\n        threshold: 90\n    patch:\n      default:\n        threshold: 90\n"
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.4755859375,
          "content": "# This file only affects the keybase/client builds.\n.circleci\n.codecov.yml\n.dockerignore\n.editorconfig\n.git\n.gitattributes\n.gitignore\n.pre-commit-config.yaml\n.prettierignore\n.prettierrc\nCODEOWNERS\nJenkinsfile\nLICENSE\nREADME.md\nbrowser\ndocker-compose.yml\ngit-hooks\nmedia\nosx\npackaging/linux/docker\n!packaging/linux/docker/standard/entrypoint.sh\n!packaging/linux/docker/slim/entrypoint.sh\n!packaging/linux/docker/gosu_key.asc\n!packaging/linux/docker/tini_key.asc\nprotocol\npvl-tools\nshared\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.41796875,
          "content": "root = true\n\n[*]\ntrim_trailing_whitespace = true\n\n[**.avdl]\nindent_style = space\nindent_size = 2\n\n[**.go]\nindent_style = tab\nindent_size = 4\n\n[**.iced]\nindent_style = space\nindent_size = 2\n\n[**.js]\nindent_style = space\nindent_size = 2\n\n[**.json]\nindent_style = space\nindent_size = 2\n\n[**.flow]\nindent_style = space\nindent_size = 2\n\n[**.html]\nindent_style = space\nindent_size = 2\n\n[**.pegjs]\nindent_style = space\nindent_size = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 1.4326171875,
          "content": "# Declare files that will always have CRLF line endings on checkout.\n*.sln text eol=crlf\n*.cmd text eol=crlf\n*.bat text eol=crlf\n*.tsx  linguist-language=JSX\n*.json linguist-language=JSON5\n*.snap                                             linguist-generated=true\nshared/actions/*-gen.tsx                           linguist-generated=true\nshared/flow-typed/*                                linguist-generated=true\nshared/constants/types/rpc*.tsx                    linguist-generated=true\nshared/common-adapters/icon.constants.tsx          linguist-generated=true\nshared/images/iconfont/kb-icomoon-project-app.json linguist-generated=true\nshared/images/iconfont/*.svg                       linguist-generated=true\nprotocol/js/rpc*.tsx                               linguist-generated=true\nprotocol/json/keybase1/*.json                      linguist-generated=true\nprotocol/json/chat1/*.json                         linguist-generated=true\nprotocol/json/stellar1/*.json                      linguist-generated=true\ngo/protocol/keybase1/*.go                          linguist-generated=true\ngo/protocol/chat1/*.go                             linguist-generated=true\ngo/protocol/stellar1/*.go                          linguist-generated=true\ngo/protocol/keybase1/extras.go                     linguist-generated=false\ngo/protocol/chat1/extras.go                        linguist-generated=false\ngo/protocol/stellar1/extras.go                     linguist-generated=false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.3623046875,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# OSX BS\n.DS_Store\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\ngo/keybase/keybase\ngo/mounter/keybase-mount-helper/keybase-mount-helper\ngo/revision\n\n*-fuzz.zip\n\n# Xcode\n./build\n# vscode\n.vscode\n# intellij\n.idea\n\nnpm-debug.log\nyarn-error.log\nshared/dist\nshared/coverage\nshared/node_modules\nshared/.static-storybook\nshared/fonts-for-web\nshared/constants/types/rpc*js*\nshared/report.*.json\npackaging/desktop/node_modules\npackaging/prerelease/node_modules\nvisdiff/node_modules\npvl-tools/node_modules\nshared/.tsOuts/.*\n# Storybook\nshared/.cache\nnode_modules\n.gradle\nrnmodules/react-native-drop-view/android/build\nrnmodules/react-native-kb/android/build\nrnmodules/react-native-kb/android/.cxx\n\nKeybase.app.dSYM.zip\n\n# shared/ios/fastlane # already checked in?\nshared/android/keybaselib/keybaselib-sources.jar\nshared/android/app/.idea/\nshared/android/captures\nshared/android/app/local.properties\n\nbrowser/node_modules\nbrowser/js/bundle.js\ngo/.go_package_deps*\n\n# Files used during the Docker build\n.docker\n\n# Files used during Vagrant smoketests\n.vagrant\n*cloudimg-console.log\n\n# CI artifact\ngo/keybase/keybase_production\ngo/keybase_freebsd\ngo/keybase_netbsd\ngo/keybase_openbsd\n\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.8994140625,
          "content": "repos:\n  - repo: local\n    hooks:\n      - id: rn-story-mode\n        name: rn-story-mode\n        entry: shared/ios/Keybase/git-hook\n        language: script\n        files: shared/ios/Keybase/Storybook.m\n      - id: eslint\n        name: eslint\n        entry: shared/node_modules/.bin/eslint\n        language: node\n        files: \\.(js|ts|tsx)$\n        args: ['--quiet', '--resolve-plugins-relative-to shared']\n      - id: prettier\n        name: prettier\n        entry: shared/node_modules/.bin/prettier --write\n        language: node\n        files: \\.(js|ts|tsx)$\n  - repo: https://github.com/keybase/pre-commit-golang.git\n    rev: 616cc0b14a680b0eb5132b26a1c6fa87682bd048\n    hooks:\n      - id: go-fmt\n      - id: go-vet\n        files: 'go/.*\\.go$'\n        exclude: 'go/buildtools/.*$'\n      - id: go-vet\n        name: 'go vet tuxbot'\n        files: 'packaging/linux/tuxbot/bot/docker-cleanup/.*\\.go$'\n      - id: go-lint\n"
        },
        {
          "name": ".prettierignore",
          "type": "blob",
          "size": 0.1806640625,
          "content": "shared/common-adapters/markdown/emoji-gen.tsx\nshared/common-adapters/icon.constants.tsx\nshared/markdown/parser.js\nshared/desktop/build/\nshared/coverage/\nshared/flow-typed/\nshared/libs/\n"
        },
        {
          "name": ".prettierrc",
          "type": "blob",
          "size": 0.623046875,
          "content": "{\n  \"arrowParens\": \"avoid\",\n  \"bracketSpacing\": false,\n  \"printWidth\": 110,\n  \"semi\": false,\n  \"singleQuote\": true,\n  \"tabWidth\": 2,\n  \"trailingComma\": \"es5\",\n  \"overrides\": [\n    {\n      \"files\": \"*-gen.js\",\n      \"options\": {\n        \"printWidth\": 500\n      }\n    },\n    {\n      \"files\": \"rpc-*gen*\",\n      \"options\": {\n        \"printWidth\": 99999\n      }\n    },\n    {\n      \"files\": \"*.json\",\n      \"options\": {\n        \"printWidth\": 100\n      }\n    },\n    {\n      \"files\": \"*.mm\",\n      \"options\": {\n        \"printWidth\": 200\n      }\n    },\n    {\n      \"files\": \"*.m\",\n      \"options\": {\n        \"printWidth\": 200\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": ".watchmanconfig",
          "type": "blob",
          "size": 0.0029296875,
          "content": "{}\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 0.0810546875,
          "content": "shared/*            @keybase/react-hackers\npackaging/linux/*   @keybase/linux-devs\n"
        },
        {
          "name": "Jenkinsfile",
          "type": "blob",
          "size": 29.162109375,
          "content": "#!groovy\n\nimport groovy.json.JsonSlurperClassic\n\nhelpers = fileLoader.fromGit('helpers', 'https://github.com/keybase/jenkins-helpers.git', 'master', null, 'linux')\n\ndef withKbweb(closure) {\n  try {\n    withEnv([\"COMPOSE_HTTP_TIMEOUT=120\"]) {\n      withCredentials([\n        string(credentialsId: 's3-secrets-access-key-id', variable: 'S3_SECRETS_ACCESS_KEY_ID'),\n        string(credentialsId: 's3-secrets-secret-access-key', variable: 'S3_SECRETS_SECRET_ACCESS_KEY'),\n      ]) {\n        // Coyne: I logged this next line to confirm it was coming through\n        // println \"Using S3 Secrets AccessKeyID with length = ${env.S3_SECRETS_ACCESS_KEY_ID.length()}\"\n        retry(5) {\n          sh \"docker-compose down\"\n          sh \"docker-compose up -d mysql.local\"\n        }\n        // Give MySQL a few seconds to start up.\n        sleep(10)\n        sh \"docker-compose up -d kbweb.local\"\n      }\n    }\n\n    closure()\n  } catch (ex) {\n    def kbwebName = helpers.containerName('docker-compose', 'kbweb')\n    println \"kbweb is running in ${kbwebName}\"\n\n    println \"Dockers:\"\n    sh \"docker ps -a\"\n    sh \"docker-compose stop\"\n    helpers.logContainer('docker-compose', 'mysql')\n    logKbwebServices(kbwebName)\n    throw ex\n  } finally {\n    sh \"docker-compose down\"\n  }\n}\n\ndef logKbwebServices(container) {\n  sh \"docker cp ${container}:/keybase/logs ./kbweb-logs\"\n  sh \"tar -C kbweb-logs -czvf kbweb-logs.tar.gz .\"\n  archive(\"kbweb-logs.tar.gz\")\n}\n\nhelpers.rootLinuxNode(env, {\n  helpers.slackOnError(\"client\", env, currentBuild)\n}, {}) {\n  properties([\n    [$class: \"BuildDiscarderProperty\",\n      strategy: [$class: \"LogRotator\",\n        numToKeepStr: \"30\",\n        daysToKeepStr: \"10\",\n        artifactNumToKeepStr: \"10\",\n      ]\n    ],\n    [$class: 'RebuildSettings',\n      autoRebuild: true,\n    ],\n    parameters([\n        string(\n            name: 'kbwebProjectName',\n            defaultValue: '',\n            description: 'The project name of the upstream kbweb build',\n        ),\n    ]),\n  ])\n\n  def kbwebProjectName = env.kbwebProjectName\n  def cause = helpers.getCauseString(currentBuild)\n  println \"Cause: ${cause}\"\n  println \"Pull Request ID: ${env.CHANGE_ID}\"\n\n  env.BASEDIR=pwd()\n  env.GOPATH=\"${env.BASEDIR}/go\"\n  def kbwebTag = cause == 'upstream' && kbwebProjectName != '' ? kbwebProjectName : 'master'\n  def images = [\n    docker.image(\"897413463132.dkr.ecr.us-east-1.amazonaws.com/glibc\"),\n    docker.image(\"897413463132.dkr.ecr.us-east-1.amazonaws.com/mysql:8.0.35-debian\"),\n    docker.image(\"897413463132.dkr.ecr.us-east-1.amazonaws.com/sqsd\"),\n    docker.image(\"897413463132.dkr.ecr.us-east-1.amazonaws.com/kbweb:${kbwebTag}\"),\n  ]\n  def kbfsfuseImage\n\n  def kbwebNodePrivateIP = httpRequest(\"http://169.254.169.254/latest/meta-data/local-ipv4\").content\n\n  println \"Running on host $kbwebNodePrivateIP\"\n  println \"Setting up build: ${env.BUILD_TAG}\"\n\n  ws(\"client\") {\n\n    stage(\"Setup\") {\n      parallel (\n        checkout: {\n          retry(3) {\n            checkout scm\n            sh 'echo -n $(git --no-pager show -s --format=\"%an\" HEAD) > .author_name'\n            sh 'echo -n $(git --no-pager show -s --format=\"%ae\" HEAD) > .author_email'\n            env.AUTHOR_NAME = readFile('.author_name')\n            env.AUTHOR_EMAIL = readFile('.author_email')\n            sh 'rm .author_name .author_email'\n            sh 'echo -n $(git rev-parse HEAD) > go/revision'\n            sh \"git add go/revision\"\n            env.GIT_COMMITTER_NAME = 'Jenkins'\n            env.GIT_COMMITTER_EMAIL = 'ci@keybase.io'\n            sh 'git commit --author=\"Jenkins <ci@keybase.io>\" -am \"revision file added\"'\n            env.COMMIT_HASH = readFile('go/revision')\n          }\n        },\n        pull_images: {\n          docker.withRegistry('https://897413463132.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-ecr-user') {\n            for (i in images) {\n              i.pull()\n              i.tag('latest')\n            }\n          }\n        },\n        remove_dockers: {\n          sh 'docker stop $(docker ps -q) || echo \"nothing to stop\"'\n          sh 'docker rm $(docker ps -aq) || echo \"nothing to remove\"'\n        },\n      )\n    }\n\n    def goChanges = helpers.getChangesForSubdir('go', env)\n    def hasGoChanges = goChanges.size() != 0\n    def hasJSChanges = helpers.hasChanges('shared', env)\n    def hasJenkinsfileChanges = helpers.getChanges(env.COMMIT_HASH, env.CHANGE_TARGET).findIndexOf{ name -> name =~ /Jenkinsfile/ } >= 0\n    def hasKBFSChanges = false\n    println \"Has go changes: \" + hasGoChanges\n    println \"Has JS changes: \" + hasJSChanges\n    println \"Has Jenkinsfile changes: \" + hasJenkinsfileChanges\n    def dependencyFiles = [:]\n\n    if (hasGoChanges && env.CHANGE_TARGET && !hasJenkinsfileChanges) {\n      dir(\"go\") {\n        sh \"make gen-deps\"\n        dependencyFiles = [\n          linux: sh(returnStdout: true, script: \"cat .go_package_deps_linux\"),\n          windows: sh(returnStdout: true, script: \"cat .go_package_deps_windows\"),\n        ]\n      }\n    }\n\n    stage(\"Test\") {\n      withKbweb() {\n        parallel (\n          failFast: true,\n          test_linux: {\n            def packagesToTest = [:]\n            if (hasGoChanges || hasJenkinsfileChanges) {\n              // Check protocol diffs\n              // Clean the index first\n              sh \"git add -A\"\n              // Generate protocols\n              dir ('protocol') {\n                sh \"yarn --frozen-lockfile\"\n                sh \"make clean\"\n                sh \"make\"\n              }\n              checkDiffs(['./go/', './protocol/'], 'Please run \\\\\"make\\\\\" inside the client/protocol directory.')\n              packagesToTest = getPackagesToTest(dependencyFiles, hasJenkinsfileChanges)\n              hasKBFSChanges = packagesToTest.keySet().findIndexOf { key -> key =~ /^github.com\\/keybase\\/client\\/go\\/kbfs/ } >= 0\n            } else {\n              // Ensure that the change target branch has been fetched,\n              // since Jenkins only does a sparse checkout by default.\n              fetchChangeTarget()\n            }\n            parallel (\n              failFast: true,\n              test_xcompilation: { withEnv([\n                \"PATH=${env.PATH}:${env.GOPATH}/bin\",\n              ]) {\n                if (env.BRANCH_NAME == \"master\" && cause != \"upstream\") {\n                  // We only cross compile when we're on a master build and we\n                  // weren't triggered by upstream. i.e. potentially breaking\n                  // changes.\n                  dir(\"go\") {\n                    def platforms = [\"freebsd\", \"netbsd\", \"openbsd\"]\n                    for (platform in platforms) {\n                        withEnv([\"GOOS=${platform}\"]) {\n                            println \"Testing compilation on ${platform}\"\n                              sh \"go build -tags production -o keybase_${platform} github.com/keybase/client/go/keybase\"\n                            println \"End testing compilation on ${platform}\"\n                        }\n                    }\n                  }\n                }\n              }},\n              test_linux_go: { withEnv([\n                \"PATH=${env.PATH}:${env.GOPATH}/bin\",\n                \"KEYBASE_SERVER_URI=http://${kbwebNodePrivateIP}:3000\",\n                \"KEYBASE_PUSH_SERVER_URI=fmprpc://${kbwebNodePrivateIP}:9911\",\n                \"GPG=/usr/bin/gpg.distrib\",\n              ]) {\n                if (hasGoChanges || hasJenkinsfileChanges) {\n                  // install the updater test binary\n                  dir('go') {\n                    sh \"go install github.com/keybase/client/go/updater/test\"\n                  }\n                  testGo(\"test_linux_go_\", packagesToTest, hasKBFSChanges)\n                }\n              }},\n              test_linux_js: { withEnv([\n                \"PATH=${env.HOME}/.node/bin:${env.PATH}\",\n                \"NODE_PATH=${env.HOME}/.node/lib/node_modules:${env.NODE_PATH}\",\n                \"NODE_OPTIONS=--max-old-space-size=4096\",\n              ]) {\n                dir(\"shared\") {\n                  stage(\"JS Tests\") {\n                    sh \"git config --global user.name 'Keybase Jenkins'\"\n                    sh \"git config --global user.email 'jenkins@keyba.se'\"\n                    sh \"./jenkins_test.sh js ${env.COMMIT_HASH} ${env.CHANGE_TARGET}\"\n                  }\n                }\n              }},\n              integrate: {\n                // Build the client docker first so we can immediately kick off KBFS\n                if ((hasGoChanges && hasKBFSChanges) || hasJenkinsfileChanges) {\n                  println \"We have KBFS changes, so we are building kbfs-server.\"\n                  dir('go') {\n                    sh \"go install -ldflags \\\"-s -w\\\" -buildmode=pie github.com/keybase/client/go/keybase\"\n                    sh \"cp ${env.GOPATH}/bin/keybase ./keybase/keybase\"\n                    docker.build(\"kbclient\")\n                    dir('kbfs') {\n                      sh \"go install -ldflags \\\"-s -w\\\" -buildmode=pie github.com/keybase/client/go/kbfs/kbfsfuse\"\n                      sh \"cp ${env.GOPATH}/bin/kbfsfuse ./kbfsfuse/kbfsfuse\"\n                      sh \"go install -ldflags \\\"-s -w\\\" -buildmode=pie github.com/keybase/client/go/kbfs/kbfsgit/git-remote-keybase\"\n                      sh \"cp ${env.GOPATH}/bin/git-remote-keybase ./kbfsgit/git-remote-keybase/git-remote-keybase\"\n                      withCredentials([string(credentialsId: 'kbfs-docker-cert-b64-new', variable: 'KBFS_DOCKER_CERT_B64')]) {\n                        def kbfsCert = sh(returnStdout: true, script: \"echo \\\"$KBFS_DOCKER_CERT_B64\\\" | sed 's/ //g' | base64 -d\")\n                        kbfsfuseImage = docker.build('897413463132.dkr.ecr.us-east-1.amazonaws.com/client', \"--build-arg KEYBASE_TEST_ROOT_CERT_PEM=\\\"$kbfsCert\\\" .\")\n                      }\n                      docker.withRegistry('https://897413463132.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-ecr-user') {\n                        kbfsfuseImage.push(env.BUILD_TAG)\n                      }\n                      if (env.BRANCH_NAME == \"master\" && cause != \"upstream\") {\n                        build([\n                          job: \"/kbfs-server/master\",\n                          parameters: [\n                            string(\n                              name: 'kbfsProjectName',\n                              value: env.BUILD_TAG,\n                            ),\n                            string(\n                              name: 'kbwebProjectName',\n                              value: kbwebTag,\n                            ),\n                          ]\n                        ])\n                      }\n                    }\n                  }\n                }\n              },\n            )\n          },\n          test_windows: {\n            if (hasGoChanges || hasJenkinsfileChanges) {\n              helpers.nodeWithCleanup('windows-ssh', {}, {}) {\n                def BASEDIR=\"${pwd()}\"\n                def GOPATH=\"${BASEDIR}\\\\go\"\n                withEnv([\n                  'GOROOT=C:\\\\Program Files\\\\go',\n                  \"GOPATH=${GOPATH}\",\n                  \"PATH=\\\"C:\\\\tools\\\\go\\\\bin\\\";\\\"C:\\\\Program Files (x86)\\\\GNU\\\\GnuPG\\\";\\\"C:\\\\Program Files\\\\nodejs\\\";\\\"C:\\\\tools\\\\python\\\";\\\"C:\\\\Program Files\\\\graphicsmagick-1.3.24-q8\\\";\\\"${GOPATH}\\\\bin\\\";${env.PATH}\",\n                  \"KEYBASE_SERVER_URI=http://${kbwebNodePrivateIP}:3000\",\n                  \"KEYBASE_PUSH_SERVER_URI=fmprpc://${kbwebNodePrivateIP}:9911\",\n                  \"TMP=C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Temp\",\n                  \"TEMP=C:\\\\Users\\\\Administrator\\\\AppData\\\\Local\\\\Temp\",\n                ]) {\n                ws(\"client\") {\n                  println \"Checkout Windows\"\n                  retry(3) {\n                    checkout scm\n                  }\n\n                  println \"Test Windows\"\n                  parallel (\n                    test_windows_go: {\n                      // install the updater test binary\n                      dir('go') {\n                        sh \"go install github.com/keybase/client/go/updater/test\"\n                      }\n                      testGo(\"test_windows_go_\", getPackagesToTest(dependencyFiles, hasJenkinsfileChanges), hasKBFSChanges)\n                    }\n                  )\n                }}\n              }\n            }\n          },\n        )\n      }\n    }\n\n    stage(\"Push\") {\n      if (env.BRANCH_NAME == \"master\" && cause != \"upstream\") {\n        docker.withRegistry('https://897413463132.dkr.ecr.us-east-1.amazonaws.com', 'ecr:us-east-1:aws-ecr-user') {\n          kbfsfuseImage.push('master')\n        }\n      } else {\n        println \"Not pushing docker\"\n      }\n    }\n  }\n}\n\ndef getTestDirsNix() {\n  def dirs = sh(\n    returnStdout: true,\n    script: \"go list ./... | grep -v 'bind'\"\n  ).trim()\n  println \"Running tests for dirs: \" + dirs\n  return dirs.tokenize()\n}\n\ndef getTestDirsWindows() {\n  def dirs = bat(returnStdout: true, script: \"@go list ./... | find /V \\\"/go/bind\\\"\").trim()\n  println \"Running tests for dirs: \" + dirs\n  return dirs.tokenize()\n}\n\ndef fetchChangeTarget() {\n  if (env.CHANGE_TARGET) {\n    // Load list of packages that changed.\n    sh \"git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10\"\n    sh \"git fetch origin ${env.CHANGE_TARGET}\"\n  }\n}\n\ndef getBaseCommitHash() {\n    return sh(returnStdout: true, script: \"git rev-parse origin/${env.CHANGE_TARGET}\").trim()\n}\n\ndef getDiffFileList() {\n    def BASE_COMMIT_HASH = getBaseCommitHash()\n    return sh(returnStdout: true, script: \"bash -c \\\"set -o pipefail; git merge-tree \\$(git merge-base ${BASE_COMMIT_HASH} HEAD) ${BASE_COMMIT_HASH} HEAD | grep '[0-9]\\\\+\\\\s[0-9a-f]\\\\{40\\\\}' | awk '{print \\\\\\$4}'\\\"\").trim()\n}\n\ndef getDiffGoDependencies() {\n    def BASE_COMMIT_HASH = getBaseCommitHash()\n    return sh(returnStdout: true,\n    script: \"\"\"\n      # only output the new and modified dependencies using version to compare\n      diff --unchanged-line-format= --old-line-format= --new-line-format='%L' <(\n          base_dir=\"\\$(mktemp -d)\" &&\n          # get the go.mod & go.sum from the base commit OR fail if they don't exist\n          git show ${BASE_COMMIT_HASH}:go/go.mod > \"\\$base_dir/go.mod\" &&\n          git show ${BASE_COMMIT_HASH}:go/go.sum > \"\\$base_dir/go.sum\" &&\n          cd \"\\$base_dir\" &&\n          # ignoring the current module github.com/keybase/client/go (where .Main=true) and list all dependencies and their versions\n          # if the dependency is forked (or replaced), print out forked version instead\n          go list -f '{{if not .Main}}{{ .Path }} {{if .Replace}}{{ .Replace.Version }}{{else}}{{ .Version }}{{end}}{{end}}' -m all | sort\n        ) <(\n          cd go &&\n          # ignoring the current module github.com/keybase/client/go (where .Main=true) and list all dependencies and their versions\n          # if the dependency is forked (or replaced), print out forked version instead\n          go list -f '{{if not .Main}}{{ .Path }} {{if .Replace}}{{ .Replace.Version }}{{else}}{{ .Version }}{{end}}{{end}}' -m all | sort\n        ) | cut -d' ' -f1 # trim the version number leaving just the module\n    \"\"\").trim().split()\n}\n\ndef getPackagesToTest(dependencyFiles, hasJenkinsfileChanges) {\n  def packagesToTest = [:]\n  dir('go') {\n    // The below has produce a garden variety of errors. Maybe we can re-enable\n    // it. At some point.\n    // if (env.CHANGE_TARGET && !hasJenkinsfileChanges) {\n    //  // The Jenkinsfile hasn't changed, so we try to run a minimal set of\n    //  // tests to capture the changes in this PR.\n    //  fetchChangeTarget()\n    //  def diffFileList = getDiffFileList()\n    //  def diffPackageList = sh(returnStdout: true, script: \"bash -c \\\"set -o pipefail; echo '${diffFileList}' | grep '^go\\\\/' | sed 's/^\\\\(.*\\\\)\\\\/[^\\\\/]*\\$/github.com\\\\/keybase\\\\/client\\\\/\\\\1/' | sort | uniq\\\"\").trim().split()\n    //  def diffPackagesAsString = diffPackageList.join(' ')\n    //  println \"Go packages changed:\\n${diffPackagesAsString}\"\n    //  def diffDependencies = getDiffGoDependencies()\n    //  def diffDependenciesAsString = diffDependencies.join(' ')\n    //  println \"Go dependencies changed:\\n${diffDependenciesAsString}\"\n\n    //  // Load list of dependencies and mark all dependent packages to test.\n    //  def goos = sh(returnStdout: true, script: \"go env GOOS\").trim()\n    //  def dependencyMap = new JsonSlurperClassic().parseText(dependencyFiles[goos])\n    //  diffPackageList.each { pkg ->\n    //    // pkg changed; we need to load it from dependencyMap to see\n    //    // which tests should be run.\n    //    dependencyMap[pkg].each { dep, _ ->\n    //      packagesToTest[dep] = 1\n    //    }\n    //  }\n    //  diffDependencies.each { pkg ->\n    //    // dependency changed; we need to load it from dependencyMap to see\n    //    // which tests should be run.\n    //    dependencyMap[pkg].each { dep, _ ->\n    //      packagesToTest[dep] = 1\n    //    }\n    //  }\n    //  return packagesToTest\n    //}\n    //println \"This is a branch build or the Jenkinsfile has changed, so we are running all tests.\"\n    diffPackageList = sh(returnStdout: true, script: 'go list ./...').trim().split()\n    // If we get here, just run all the tests in `diffPackageList`\n    diffPackageList.each { pkg ->\n      if (pkg != 'github.com/keybase/client/go/bind') {\n        packagesToTest[pkg] = 1\n      }\n    }\n  }\n  return packagesToTest\n}\n\ndef testGo(prefix, packagesToTest, hasKBFSChanges) {\n  dir('go') {\n  withEnv([\n    \"KEYBASE_LOG_SETUPTEST_FUNCS=1\",\n    \"KEYBASE_RUN_CI=1\",\n  ].plus(isUnix() ? [] : [\n    'CC=C:\\\\cygwin64\\\\bin\\\\x86_64-w64-mingw32-gcc.exe',\n    'CPATH=C:\\\\cygwin64\\\\usr\\\\x86_64-w64-mingw32\\\\sys-root\\\\mingw\\\\include;C:\\\\cygwin64\\\\usr\\\\x86_64-w64-mingw32\\\\sys-root\\\\mingw\\\\include\\\\ddk',\n  ])) {\n  parallel (\n    test_go_builds: {\n      testGoBuilds(prefix, packagesToTest, hasKBFSChanges)\n    },\n    test_go_test_suite: {\n      testGoTestSuite(prefix, packagesToTest)\n    },\n    failFast: true\n  )\n  }}\n}\n\ndef testGoBuilds(prefix, packagesToTest, hasKBFSChanges) {\n  if (prefix == \"test_linux_go_\") {\n    dir(\"keybase\") {\n      sh \"go build -o keybase_production -ldflags \\\"-s -w\\\" -buildmode=pie --tags=production\"\n    }\n    dir(\"fuzz\") {\n      sh \"go build -tags gofuzz ./...\"\n    }\n  } else if (prefix == \"test_windows_go_\") {\n    dir(\"keybase\") {\n      sh \"go build -o keybase_production -ldflags \\\"-s -w\\\" --tags=production\"\n    }\n  }\n\n  if (prefix == \"test_linux_go_\") {\n    // Only test golangci-lint on linux\n    println \"Installing golangci-lint\"\n    dir(\"buildtools\") {\n      retry(5) {\n        sh 'go install github.com/golangci/golangci-lint/cmd/golangci-lint'\n      }\n    }\n    //\n\n    // TODO re-enable for kbfs.\n    // if (hasKBFSChanges) {\n    //   println \"Running golangci-lint on KBFS\"\n    //   dir('kbfs') {\n    //     retry(5) {\n    //       timeout(activity: true, time: 720, unit: 'SECONDS') {\n    //         // Ignore the `dokan` directory since it contains lots of c code.\n    //         sh 'go list -f \"{{.Dir}}\" ./...  | fgrep -v dokan  | xargs realpath --relative-to=. | xargs golangci-lint run --deadline 10m0s'\n    //       }\n    //     }\n    //   }\n    // }\n\n    if (env.CHANGE_TARGET) {\n      println(\"Running golangci-lint on new code\")\n      fetchChangeTarget()\n      def BASE_COMMIT_HASH = getBaseCommitHash()\n      timeout(activity: true, time: 720, unit: 'SECONDS') {\n        // Ignore the `protocol` directory, autogeneration has some critques\n        sh \"go list -f '{{.Dir}}' ./...  | fgrep -v kbfs | fgrep -v protocol | xargs realpath --relative-to=. | xargs golangci-lint run --new-from-rev ${BASE_COMMIT_HASH} --deadline 10m0s\"\n      }\n    } else {\n      println(\"Running golangci-lint on all non-KBFS code\")\n      timeout(activity: true, time: 720, unit: 'SECONDS') {\n        sh \"make golangci-lint-nonkbfs\"\n      }\n    }\n\n    // Windows `gofmt` pukes on CRLF.\n    // Macos pukes on mockgen because ¯\\_(ツ)_/¯.\n    // So, only run on Linux.\n    println \"Running mockgen\"\n    dir(\"buildtools\") {\n      retry(5) {\n        sh 'go install github.com/golang/mock/mockgen'\n      }\n    }\n    dir('kbfs/data') {\n      retry(5) {\n        timeout(activity: true, time: 90, unit: 'SECONDS') {\n          sh '''\n            set -e -x\n            ./gen_mocks.sh\n            git diff --exit-code\n          '''\n        }\n      }\n    }\n    dir('kbfs/libkbfs') {\n      retry(5) {\n        timeout(activity: true, time: 90, unit: 'SECONDS') {\n          sh '''\n            set -e -x\n            ./gen_mocks.sh\n            git diff --exit-code\n          '''\n        }\n      }\n    }\n  }\n}\n\ndef testGoTestSuite(prefix, packagesToTest) {\n  def dirs = getTestDirsNix()\n  def goversion = sh(returnStdout: true, script: \"go version\").trim()\n  println \"Testing Go code on commit ${env.COMMIT_HASH} with ${goversion}. Merging to branch ${env.CHANGE_TARGET}.\"\n\n  // Make sure we don't accidentally pull in the testing package.\n  sh '! go list -f \\'{{ join .Deps \"\\\\n\" }}\\' github.com/keybase/client/go/keybase | grep testing'\n\n  println \"Building citogo\"\n  sh '(cd citogo && go install)'\n\n  def packageTestSet = packagesToTest.keySet()\n  println \"Go packages to test:\\n${packageTestSet.join('\\n')}\"\n\n  def tests = [:]\n  def testSpecMap = [\n    test_linux_go_: [\n      '*': [],\n      'github.com/keybase/client/go/chat': [\n        parallel: 1,\n      ],\n      'github.com/keybase/client/go/chat/attachments': [\n        parallel: 1,\n      ],\n      'github.com/keybase/client/go/kbfs/test': [\n        name: 'kbfs_test_fuse',\n        flags: '-tags fuse',\n        timeout: '15m',\n      ],\n      'github.com/keybase/client/go/kbfs/data': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/libfuse': [\n        // TODO re-enable\n        // flags: '',\n        // timeout: '5m',\n        // citogo_extra : '--pause 1s',\n        // no_citogo : '1'\n        disable: true,\n      ],\n      'github.com/keybase/client/go/kbfs/idutil': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfsblock': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfscodec': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfscrypto': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfsedits': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfsgit': [\n        flags: '-race',\n        timeout: '10m',\n        compileAlone: true,\n      ],\n      'github.com/keybase/client/go/kbfs/kbfsgit/git-remote-keybase': [\n        compileAlone: true,\n      ],\n      'github.com/keybase/client/go/kbfs/fsrpc': [\n        compileAlone: true,\n      ],\n      'github.com/keybase/client/go/kbfs/kbfshash': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfsmd': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbfssync': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/kbpagesconfig': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/ldbutils': [\n        flags: '-race',\n        timeout: '10m',\n      ],\n      'github.com/keybase/client/go/kbfs/libcontext': [\n        flags: '-race',\n        timeout: '10m',\n      ],\n      'github.com/keybase/client/go/kbfs/libfs': [\n        flags: '-race',\n        timeout: '10m',\n      ],\n      'github.com/keybase/client/go/kbfs/libgit': [\n        flags: '-race',\n        timeout: '10m',\n      ],\n      'github.com/keybase/client/go/kbfs/libhttpserver': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/libkey': [\n        flags: '-race',\n        timeout: '5m',\n      ],\n      'github.com/keybase/client/go/kbfs/libkbfs': [\n        flags: '-race',\n        timeout: '5m',\n        parallel: 1,\n      ],\n      'github.com/keybase/client/go/kbfs/libpages': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/libpages/config': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/search': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/simplefs': [\n        flags: '-race',\n        timeout: '2m',\n      ],\n      'github.com/keybase/client/go/kbfs/test': [\n        name: 'kbfs_test_race',\n        flags: '-race',\n        timeout: '12m',\n      ],\n      'github.com/keybase/client/go/kbfs/tlf': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/tlfhandle': [\n        flags: '-race',\n        timeout: '30s',\n      ],\n      'github.com/keybase/client/go/kbfs/dokan': [\n        disable: true,\n      ],\n      'github.com/keybase/client/go/teams': [\n        parallel: 1,\n      ],\n    ],\n    test_windows_go_: [\n      '*': [],\n      'github.com/keybase/client/go/systests': [\n        disable: true,\n      ],\n      'github.com/keybase/client/go/chat': [\n        disable: true,\n      ],\n      'github.com/keybase/client/go/teams': [\n        disable: true,\n      ],\n      'github.com/keybase/client/go/kbfs/libdokan': [\n        parallel: 1,\n      ],\n      'github.com/keybase/client/go/kbfs/dokan': [\n        compileAlone: true,\n      ],\n    ],\n  ]\n  def getOverallTimeout = { testSpec ->\n    def timeoutMatches = (testSpec.timeout =~ /(\\d+)([ms])/)\n    return [\n      time: 1 + (timeoutMatches[0][1] as Integer),\n      unit: timeoutMatches[0][2] == 's' ? 'SECONDS' : 'MINUTES',\n    ]\n  }\n  def defaultPackageTestSpec = { pkg ->\n    def dirPath = pkg.replaceAll('github.com/keybase/client/go/', '')\n    def testName = dirPath.replaceAll('/', '_')\n    return [\n      name: testName,\n      flags: '',\n      timeout: '30m',\n      dirPath: dirPath,\n      parallel: 4,\n      pkg: pkg,\n    ]\n  }\n  def getPackageTestSpec = { pkg ->\n    if (testSpecMap[prefix].containsKey(pkg)) {\n      if (testSpecMap[prefix][pkg]) {\n        def testSpec = testSpecMap[prefix][pkg]\n        if (testSpec['disable']) {\n          return false\n        }\n        return defaultPackageTestSpec(pkg) + testSpec\n      }\n      return defaultPackageTestSpec(pkg)\n    }\n    if (testSpecMap[prefix].containsKey('*')) {\n      return defaultPackageTestSpec(pkg)\n    }\n    return false\n  }\n\n  println \"Compiling ${packageTestSet.size()} test(s)\"\n  def packageTestCompileList = []\n  def packageTestRunList = []\n  packagesToTest.each { pkg, _ ->\n    def testSpec = getPackageTestSpec(pkg)\n    if (testSpec && !testSpec.disable) {\n      testSpec.testBinary = \"${testSpec.name}.test\"\n      packageTestCompileList.add([\n        closure: {\n          sh \"go test -vet=off -c ${testSpec.flags} -o ${testSpec.dirPath}/${testSpec.testBinary} ./${testSpec.dirPath}\"\n        },\n        alone: !!testSpec.compileAlone,\n      ])\n      packageTestRunList.add([\n        closure: { spec ->\n          dir(spec.dirPath) {\n            // Only run the test if a test binary should have been produced.\n            if (fileExists(spec.testBinary)) {\n              println \"Running tests for ${spec.dirPath}\"\n              def t = getOverallTimeout(spec)\n              timeout(activity: true, time: t.time, unit: t.unit) {\n                if (spec.no_citogo) {\n                  sh \"./${spec.testBinary} -test.timeout ${spec.timeout}\"\n                } else {\n                  sh \"citogo --flakes 3 --fails 3 --build-id ${env.BUILD_ID} --branch ${env.BRANCH_NAME} --prefix ${spec.dirPath} --s3bucket ci-fail-logs --report-lambda-function report-citogo --build-url ${env.BUILD_URL} --no-compile --test-binary ./${spec.testBinary} --timeout 150s -parallel=${spec.parallel} ${spec.citogo_extra ? spec.citogo_extra : ''}\"\n                }\n              }\n            }\n          }\n        }.curry(testSpec),\n        alone: !!testSpec.runAlone,\n      ])\n    }\n  }\n  executeInWorkers(3, true /* runFirstItemAlone */, packageTestCompileList)\n\n  helpers.waitForURLWithTimeout(prefix, env.KEYBASE_SERVER_URI, 600)\n  println \"Running ${packageTestSet.size()} test(s)\"\n  withCredentials([\n    string(credentialsId: 'citogo-flake-webhook', variable : 'CITOGO_FLAKE_WEBHOOK'),\n    string(credentialsId: 'citogo-aws-secret-access-key', variable : 'CITOGO_AWS_SECRET_ACCESS_KEY'),\n    string(credentialsId: 'citogo-aws-access-key-id', variable : 'CITOGO_AWS_ACCESS_KEY_ID'),\n    string(credentialsId: 'citogo-master-fail-webhook', variable : 'CITOGO_MASTER_FAIL_WEBHOOK'),\n  ]) {\n    executeInWorkers(4, false /* runFirstItemAlone */, packageTestRunList)\n  }\n}\n\ndef executeInWorkers(numWorkers, runFirstItemAlone, queue) {\n  def workers = [:]\n  def i = 0\n  for (n = 1; n <= numWorkers; n++) {\n    workers[\"worker_${n}\"] = {\n      def done = false\n      for (; !done;) {\n        def item\n        def alone\n\n        // Concurrency hack\n        def lockID = \"${env.BUILD_TAG}\"\n        lock(lockID) {\n          if (i < queue.size()) {\n            item = queue.getAt(i)\n            // Run first item on its own if requested\n            alone = item.alone || (runFirstItemAlone && i == 0)\n            if (alone) {\n              item.closure()\n            }\n            i++\n          } else {\n            done = true\n          }\n        }\n        if (done) {\n          break\n        }\n        if (!alone) {\n          item.closure()\n        }\n      }\n    }\n  }\n  workers.failFast = true\n  parallel(workers)\n}\n\ndef checkDiffs(dirs, addressMessage) {\n  def joinedDirs = dirs.join(\" \")\n  try {\n    sh \"git diff --patience --exit-code HEAD -- ${joinedDirs}\"\n  } catch (ex) {\n    sh \"\"\"\n        bash -c 'echo \"ERROR: \\\\\"git diff\\\\\" detected changes. Some files in the directories {${dirs.join(\", \")}} are stale. ${addressMessage}\" && (exit 1)'\n    \"\"\"\n  }\n}\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.4384765625,
          "content": "Copyright (c) 2015, Keybase\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of keybase nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.3154296875,
          "content": "## Keybase [![Build Status](https://travis-ci.com/keybase/client.svg?branch=master)](https://travis-ci.org/keybase/client) [![Build status](https://ci.appveyor.com/api/projects/status/90mxorxtj6vixnum/branch/master?svg=true)](https://ci.appveyor.com/project/keybase/client-x5qrt/branch/master)\n\nHi, and welcome to the Keybase client repo. All our client apps (macOS,\nWindows, Linux, iOS, and Android) are being actively developed in this\nrepository. Please, dig around.\n\n### Warnings\n\nWe'd love you to read our source code.\n\nBut - some of the things in this repo are explorations, and the app you build\nfrom source just _might not do what it says it's doing_. So, if you just want\nto install Keybase on your computer, you should **[monitor our releases](https://keybase.io/download)** for macOS, Linux, or Windows.\n\nIf you're interested in our Docker image releases, please check out **[the Docker README](packaging/linux/docker/README.md)**.\n\n![Sharing](https://keybase.io/images/github/repo_share.png?)\n\n### Code Layout\n\n- **go**: Core crypto libraries; the Keybase service; the command line client. [Learn More](go/README.md)\n- **shared/{android,ios}**: Android and iOS apps developed with [React Native](https://facebook.github.io/react-native/).\n- **shared/desktop**: Desktop application for macOS, Linux, and Windows, made with the [Electron](https://github.com/atom/electron) framework, sharing React code with react-native.\n- **packaging**: Scripts for releasing packages across the various platforms.\n- **protocol**: Defines the protocol for communication for clients to the Keybase services. Uses [Avro](http://avro.apache.org/docs/1.7.7/). [Learn More](protocol/README.md)\n- **media**: Icons, graphics, media for Keybase apps.\n- **osx**: The macOS Keybase.app, development parallel to an Electron-based application above. [Learn More](osx/README.md)\n\n### Problems?\n\nReport any issues with client software on this GitHub\n[issue tracker](https://github.com/keybase/client/issues).\nInternally, we track our progress using Jira, but all PRs come through GitHub\nfor your review!\n\nIf you're having problems with the command line `keybase` client, take a\nlook at [the troubleshooting doc](go/doc/troubleshooting.md).\n\nIf you're having problems with our Website, try the\n[keybase-issues](https://github.com/keybase/keybase-issues) issue tracker.\n\nWe check and update both frequently.\n\n### License\n\nMost code is released under the New BSD (3 Clause) License. If subdirectories\ninclude a different license, that license applies instead.\n\n### Development Guidelines\n\nWe check all git commits with pre-commit hooks generated via\n[pre-commit.com](http://pre-commit.com) pre-commit hooks.\nTo enable use of these pre-commit hooks:\n\n- [Install](http://pre-commit.com/#install) the `pre-commit` utility. For some common cases:\n  - `pip install pre-commit`\n  - `brew install pre-commit`\n- Remove any existing pre-commit hooks via `rm .git/hooks/pre-commit`\n- Configure via `pre-commit install`\n\nThen proceed as normal.\n\n#### External Contributors\n\nIf you forked this repository on GitHub and made a PR, then it'll show up as\nhaving failed Jenkins CI. We do not build external PRs because it's a security\nrisk to do so without a review first. If your PR is successfully reviewed by a\nmember of the Keybase team, then we will merge your commits to a branch on our\nprimary fork and build from there.\n\n### Cryptography Notice\n\nThis distribution includes cryptographic software. The country in which you\ncurrently reside may have restrictions on the import, possession, use, and/or\nre-export to another country, of encryption software. BEFORE using any\nencryption software, please check your country's laws, regulations and policies\nconcerning the import, possession, or use, and re-export of encryption\nsoftware, to see if this is permitted. See http://www.wassenaar.org/ for more\ninformation.\n\nThe U.S. Government Department of Commerce, Bureau of Industry and Security\n(BIS), has classified this software as Export Commodity Control Number (ECCN)\n5D002.C.1, which includes information security software using or performing\ncryptographic functions with asymmetric algorithms. The form and manner of this\ndistribution makes it eligible for export under the License Exception ENC\nTechnology Software Unrestricted (TSU) exception (see the BIS Export\nAdministration Regulations, Section 740.13) for both object code and source\ncode.\n"
        },
        {
          "name": "browser",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.8935546875,
          "content": "version: '3.7'\nservices:\n    mysql.local:\n        image: 897413463132.dkr.ecr.us-east-1.amazonaws.com/mysql:8.0.35-debian\n        restart: unless-stopped\n        environment:\n            - MYSQL_ROOT_PASSWORD=secret\n            - MYSQL_DATABASE=gregor\n        ports:\n            - \"3306\"\n        tmpfs: /var/lib/mysql\n        command: [\"--innodb_print_all_deadlocks=1\", \"--max_connections=1000\"]\n    sqsd.local:\n        image: 897413463132.dkr.ecr.us-east-1.amazonaws.com/sqsd\n        restart: unless-stopped\n        ports:\n            - \"9324\"\n    kbweb.local:\n        image: 897413463132.dkr.ecr.us-east-1.amazonaws.com/kbweb\n        ports:\n            - \"3000:3000\"\n            - \"9911:9911\"\n            - \"13009:13009\"\n            - \"13010:13010\"\n            - \"13037:13037\"\n            - \"13047:13047\"\n        depends_on:\n            - mysql.local\n            - sqsd.local\n        entrypoint: [\"run/startup_for_container.sh\"]\n        environment:\n            - KEYBASE_RUN_MODE=devel\n            - MYSQL_HOST=mysql.local\n            - GREGOR_BIND_ADDRESS=0.0.0.0:9911\n            - MYSQL_DSN=root:secret@tcp(mysql.local:3306)/keybase\n            - CHAT_MYSQL_DSN=root:secret@tcp(mysql.local:3306)/keybase\n            - CHAT_READER_MYSQL_DSN=root:secret@tcp(mysql.local:3306)/keybase\n            - INSECURE_TLS_MODE=1\n            - GREGOR_TLFAUTH_PRIVATE_SIGNING_KEY=e20589b8cd66d447aaee44b587305bd521f34f3085709b32b4e3bd479b20253e59ea153c88a8ea524d39e0ae58fa195749214b38a28fdb4229ba3390b2d33e86\n            - GREGOR_TLFAUTH_PUBLIC_SIGNING_KEY=012059ea153c88a8ea524d39e0ae58fa195749214b38a28fdb4229ba3390b2d33e860a\n            - CHAT_S3_BUCKET=test\n            - CHAT_S3_ACCESS_KEY=test\n            - CHAT_S3_SECRET_KEY=test\n            - S3_SECRETS_ACCESS_KEY_ID\n            - S3_SECRETS_SECRET_ACCESS_KEY\n        logging:\n            driver: json-file\n            options:\n                max-size: 50m\n                max-file: \"2\"\n"
        },
        {
          "name": "git-hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "go",
          "type": "tree",
          "content": null
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "osx",
          "type": "tree",
          "content": null
        },
        {
          "name": "packaging",
          "type": "tree",
          "content": null
        },
        {
          "name": "protocol",
          "type": "tree",
          "content": null
        },
        {
          "name": "pvl-tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "rnmodules",
          "type": "tree",
          "content": null
        },
        {
          "name": "shared",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}