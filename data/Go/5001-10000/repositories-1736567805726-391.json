{
  "metadata": {
    "timestamp": 1736567805726,
    "page": 391,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cue-lang/cue",
      "stars": 5217,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0791015625,
          "content": "# To prevent CRLF breakages on Windows for fragile files, like testdata.\n* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5517578125,
          "content": "# Add no patterns to .gitignore except for files generated by the build.\ncmd/cue/cue\n**/*.test\n/dist\n/.unity-bin\n**/__debug_bin*\n**/.DS_Store\n**/*.exe\n**/.debug\n\n# We use test module paths like mod.test or externalmod.test.\n# Don't exclude those as if they were test binaries.\n!**/*mod.test\n\n# Ignore generated credentials from google-github-actions/auth,\n# a GitHub Actions step used in CI for the tests in internal/_e2e.\n# Note that CI requires a clean git repo when it finishes,\n# so we don't want it to think the credentials file is untracked.\ngha-creds-*.json\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 31.9970703125,
          "content": "# Contribution Guide\n\nThere are many ways to contribute to CUE without writing code!\n\n* Ask or answer questions via GitHub discussions, Slack, and Discord\n* Raise issues such as bug reports or feature requests on GitHub\n* Contributing thoughts and use cases to proposals. CUE can be and is\n  being used in many varied different ways. Sharing experience reports helps\nto shape proposals and designs.\n* Create content: share blog posts, tutorials, videos, meetup talks, etc\n* Add your project to [Unity](https://cuelabs.dev/unity/) to help us test changes to CUE\n\n## Before contributing code\n\nAs with many open source projects, CUE uses the GitHub [issue\ntracker](https://github.com/cue-lang/cue/issues) to not only track bugs, but\nalso coordinate work on new features, bugs, designs and proposals.  Given the\ninherently distributed nature of open-source this coordination is important\nbecause it very often serves as the main form of communication between\ncontributors.\n\nYou can also exchange ideas or feedback with other contributors via the\n`#contributing` [Slack channel](https://cuelang.slack.com/archives/CMY132JKY),\nas well as the contributor office hours calls which we hold via the\n[community calendar](https://cuelang.org/s/community-calendar) once per week.\n\n### Check the issue tracker\n\nWhether you already know what contribution to make, or you are searching for an\nidea, the [issue tracker](https://cuelang.org/issues) is always the first place\nto go.  Issues are triaged to categorize them and manage the workflow.\n\nMost issues will be marked with one of the following workflow labels (links are\nto queries in the issue tracker):\n\n- [**Triage**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3ATriage):\n  Requires review by one of the core project maintainers.\n- [**NeedsInvestigation**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsInvestigation):\n  The issue is not fully understood and requires analysis to understand the root\ncause.\n- [**NeedsDecision**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsDecision):\n  the issue is relatively well understood, but the CUE team hasn't yet decided\nthe best way to address it.  It would be better to wait for a decision before\nwriting code.  If you are interested on working on an issue in this state, feel\nfree to \"ping\" maintainers in the issue's comments if some time has passed\nwithout a decision.\n- [**NeedsFix**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3ANeedsFix):\n  the issue is fully understood and code can be written to fix it.\n- [**help\n  wanted**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3A\"help+wanted\"):\nproject maintainers need input from someone who has experience or expertise to\nanswer or progress this issue.\n- [**good first\n  issue**](https://cuelang.org/issues?q=is%3Aissue+is%3Aopen+label%3A\"good+first+issue\"):\noften combined with `NeedsFix`, `good first issue` indicates an issue is very\nlikely a good candidate for someone\nlooking to make their first code contribution.\n\n\n### Open an issue for any new problem\n\nExcluding very trivial changes, all contributions should be connected to an\nexisting issue.  Feel free to open one and discuss your plans.  This process\ngives everyone a chance to validate the design, helps prevent duplication of\neffort, and ensures that the idea fits inside the goals for the language and\ntools.  It also checks that the design is sound before code is written; the code\nreview tool is not the place for high-level discussions.\n\nSensitive security-related issues should be reported to <a\nhref=\"mailto:security@cuelang.org\">security@cuelang.org</a>.\n\n## Becoming a code contributor\n\nThe code contribution process used by the CUE project is a little different from\nthat used by other open source projects.  We assume you have a basic\nunderstanding of [`git`](https://git-scm.com/) and [Go](https://golang.org)\n(1.22 or later).\n\nThe first thing to decide is whether you want to contribute a code change via\nGitHub or GerritHub. Both workflows are fully supported, and whilst GerritHub is\nused by the core project maintainers as the \"source of truth\", the GitHub Pull\nRequest workflow is 100% supported - contributors should feel entirely\ncomfortable contributing this way if they prefer.\n\nContributions via either workflow must be accompanied by a Developer Certificate\nof Origin.\n\n### Asserting a Developer Certificate of Origin\n\nContributions to the CUE project must be accompanied by a [Developer Certificate\nof Origin](https://developercertificate.org/), we are using version 1.1.\n\nAll commit messages must contain the `Signed-off-by` line with an email address\nthat matches the commit author. This line asserts the Developer Certificate of Origin.\n\nWhen committing, use the `--signoff` (or `-s`) flag:\n\n```console\n$ git commit -s\n```\n\nYou can also [set up a prepare-commit-msg git\nhook](#do-i-really-have-to-add-the--s-flag-to-each-commit) to not have to supply\nthe `-s` flag.\n\nThe explanations of the GitHub and GerritHub contribution workflows that follow\nassume all commits you create are signed-off in this way.\n\n\n## Preparing for GitHub Pull Request (PR) Contributions\n\nFirst-time contributors that are already familiar with the <a\nhref=\"https://guides.github.com/introduction/flow/\">GitHub flow</a> are\nencouraged to use the same process for CUE contributions.  Even though CUE\nmaintainers use GerritHub for code review, the GitHub PR workflow is 100%\nsupported.\n\nHere is a checklist of the steps to follow when contributing via GitHub PR\nworkflow:\n\n- **Step 0**: Review the guidelines on [Good Commit\n  Messages](#good-commit-messages), [The Review Process](#the-review-process)\nand [Miscellaneous Topics](#miscellaneous-topics)\n- **Step 1**: Create a GitHub account if you do not have one.\n- **Step 2**:\n  [Fork](https://docs.github.com/en/get-started/quickstart/fork-a-repo) the CUE\nproject, and clone your fork locally\n\n\nThat's it! You are now ready to send a change via GitHub, the subject of the\nnext section.\n\n\n\n## Sending a change via GitHub\n\nThe GitHub documentation around [working with\nforks](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/getting-started/about-collaborative-development-models)\nis extensive so we will not cover that ground here.\n\nBefore making any changes it's a good idea to verify that you have a stable\nbaseline by running the tests:\n\n```console\n$ go test ./...\n```\n\nThen make your planned changes and create a commit from the staged changes:\n\n```console\n# Edit files\n$ git add file1 file2\n$ git commit -s\n```\n\nNotice as we explained above, the `-s` flag asserts the Developer Certificate of\nOrigin by adding a `Signed-off-by` line to a commit. When writing a commit\nmessage, remember the guidelines on [good commit\nmessages](#good-commit-messages).\n\nYou’ve written and tested your code, but before sending code out for review, run\nall the tests from the root of the repository to ensure the changes don’t break\nother packages or programs:\n\n```console\n$ go test ./...\n```\n\nYour change is now ready! [Submit a\nPR](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request)\nin the usual way.\n\nOnce your PR is submitted, a maintainer will trigger continuous integration (CI)\nworkflows to run and [review your proposed\nchange](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request).\nThe results from CI and the review might indicate further changes are required,\nand this is where the CUE project differs from others:\n\n### Making changes to a PR\n\nSome projects accept and encourage multiple commits in a single PR. Either as a\nway of breaking down the change into smaller parts, or simply as a record of the\nvarious changes during the review process.\n\nThe CUE project follows the Gerrit model of a single commit being the unit of\nchange. Therefore, all PRs must only contain a single commit. But how does this\nwork if you need to make changes requested during the review process? Does this\nnot require you to create additional commits?\n\nThe easiest way to maintain a single commit is to amend an existing commit.\nRather misleadingly, this doesn't actually amend a commit, but instead creates a\nnew commit which is the result of combining the last commit and any new changes:\n\n```console\n# PR is submitted, feedback received. Time to make some changes!\n\n$ git add file1 file2   # stage the files we have added/removed/changed\n$ git commit --amend    # amend the last commit\n$ git push -f           # push the amended commit to your PR\n```\n\nThe `-f` flag is required to force push your branch to GitHub: this overrides a\nwarning from `git` telling you that GitHub knows nothing about the relationship\nbetween the original commit in your PR and the amended commit.\n\nWhat happens if you accidentally create an additional commit and now have two\ncommits on your branch? No worries, you can \"squash\" commits on a branch to\ncreate a single commit. See the GitHub documentation on [how to squash commits\nwith GitHub\nDesktop](https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/managing-commits/squashing-commits),\nor using the [`git` command\ninteractively](https://medium.com/@slamflipstrom/a-beginners-guide-to-squashing-commits-with-git-rebase-8185cf6e62ec).\n\n### PR approved!\n\nWith the review cycle complete, the CI checks green and your PR approved, it\nwill be imported into GerritHub and then submitted. Your PR will close\nautomatically as it is \"merged\" in GerritHub. Congratulations! You will have\nmade your first contribution to the CUE project.\n\n\n## Preparing for GerritHub [CL](https://google.github.io/eng-practices/#terminology) Contributions\n\nCUE maintainers use GerritHub for code review. It has a powerful review\ninterface with comments that are attributed to patchsets (versions of a change).\nOrienting changes around a single commit allows for \"stacked\" changes, and also\nencourages unrelated changes to be broken into separate CLs because the process\nof creating and linking CLs is so easy.\n\nFor those more comfortable with contributing via GitHub PRs, please continue to\ndo so: the CUE project supports both workflows so that people have a choice.\n\nFor those who would like to contribute via GerritHub, read on!\n\n### Overview\n\nThe first step in the GerritHub flow is registering as a CUE contributor and\nconfiguring your environment. Here is a checklist of the required steps to\nfollow:\n\n- **Step 0**: Review the guidelines on [Good Commit Messages](#good-commit-messages), [The Review Process](#the-review-process) and [Miscellaneous Topics](#miscellaneous-topics)\n- **Step 1**: Decide which email address you want to use for contributions.\n- **Step 2**: Set up a [GerritHub](http://gerrithub.io/) account.\n- **Step 3**: [Install `git-codereview`](#step-3-install-the-git-codereview-command)\n- **Step 4**: Clone the CUE repository locally.\n\n\nWe cover steps 1-4 in more detail below.\n\n### Step 1: Decide which email address you want to use for contributions\n\nA contribution to CUE is made through a specific e-mail address.  Make sure to\nuse the same account throughout the process and for all your subsequent\ncontributions.  You may need to decide whether to use a personal address or a\ncorporate address.  The choice will depend on who will own the copyright for the\ncode that you will be writing and submitting.  You might want to discuss this\ntopic with your employer before deciding which account to use.\n\nYou also need to make sure that your `git` tool is configured to create commits\nusing your chosen e-mail address.  You can either configure Git globally (as a\ndefault for all projects), or locally (for a single specific project).  You can\ncheck the current configuration with this command:\n\n```console\n$ git config --global user.email  # check current global config\n$ git config user.email           # check current local config\n```\n\nTo change the configured address:\n\n```console\n$ git config --global user.email name@example.com   # change global config\n$ git config user.email name@example.com            # change local config\n```\n\n### Step 2: Setup a GerritHub account\n\nIf you have not used GerritHub before, setting up an account is a simple\nprocess:\n\n- Visit [GerritHub](http://gerrithub.io/).\n- Click \"First Time Sign In\".\n- Click the green \"Sign In\" button, to sign in using your GitHub\n  credentials.\n- When prompted \"Which level of GitHub access do you need?\", choose\n  \"Default\" and then click \"Login.\"\n- Click \"Authorize gerritforge-ltd\" on the GitHub auth page.\n- Confirm account profile details and click \"Next.\"\n\nIf you want to use SSH for authentication *to GerritHub*, SSH keys can be\n[configured in your user\nprofile](https://review.gerrithub.io/settings/#SSHKeys).  If you choose to use\nSSH for authentication, you will not be able to use the `git-codereview`\ncommand that's suggested later in this document, as the command [doesn't\nsupport SSH-based git\norigins](https://github.com/golang/go/issues/9599#issuecomment-70538097).\n\nFor HTTP Credentials, [generate a password via your user\nprofile](https://review.gerrithub.io/settings/#HTTPCredentials). Then use an\nexisting HTTP authentication mechanism like `.netrc`, macOS KeyChain, or some\nother [credential helper](https://git-scm.com/docs/gitcredentials). If you have\nany troubles with this step, please [raise an\nissue](https://cuelang.org/issues/new).\n\n\n### Step 3: Install the `git-codereview` command\n\nChanges to CUE must be reviewed before they are accepted, no matter who makes\nthe change.  A custom `git` command called `git-codereview` simplifies sending\nchanges to Gerrit.\n\nInstall the `git-codereview` command by running,\n\n```console\n$ go install golang.org/x/review/git-codereview@master\n```\n\nMake sure `git-codereview` is installed in your shell `PATH`, so that the\n`git` command can find it.\nCheck that\n\n```console\n$ git codereview help\n```\n\nprints help text, not an error.\n\nOn Windows, when using git-bash you must make sure that `git-codereview.exe` is\nin your `git` exec-path.  Run `git --exec-path` to discover the right location\nthen create a symbolic link or just copy the executable from $GOPATH/bin to this\ndirectory.\n\n### Step 4: Clone the CUE repository locally\n\nVisit https://review.gerrithub.io/admin/repos/cue-lang/cue, then click \"SSH\" or\n\"HTTP\" depending on which authentication mechanism you configured in step 2.\nThen copy and run the corresponding \"Clone\" command. Make sure not to use\n\"ANONYMOUS HTTP\", as that will not work with `git-codereview` command. \n\n## Sending a change via GerritHub\n\nSending a change via GerritHub is quite different to the GitHub PR flow. At\nfirst the differences might be jarring, but with practice the workflow is\nincredibly intuitive and far more powerful when it comes to chains of \"stacked\"\nchanges.\n\n### Step 1: Ensure you have a stable baseline\n\nWith a working directory of your local clone of the CUE repository, run the tests:\n\n```console\n$ go test ./...\n```\n\n### Step 2: Prepare changes in a new branch\n\nEach CUE change must be made in a branch, created from the `master` branch.  You\ncan use the normal `git` commands to create a branch and stage changes:\n\n\n```console\n$ git checkout -b mybranch\n$ [edit files...]\n$ git add [files...]\n```\n\nTo commit changes, instead of `git commit -s`, use `git codereview change -s`.\n\n\n```console\n$ git codereview change -s\n(opens $EDITOR)\n```\n\nYou can edit the commit description in your favorite editor as usual.  The\n`git codereview change` command will automatically add a unique Change-Id\nline near the bottom.  That line is used by Gerrit to match successive uploads\nof the same change.  Do not edit or delete it.  A Change-Id looks like this:\n\n\n```\nChange-Id: I2fbdbffb3aab626c4b6f56348861b7909e3e8990\n```\n\nThe `git-codereview` command also checks that you've run `go fmt` over the\nsource code, and that the commit message follows the suggested format.\n\n\nIf you need to edit the files again, you can stage the new changes and re-run\n`git codereview change -s`: each subsequent run will amend the existing commit\nwhile preserving the Change-Id.\n\nMake sure that you always keep a single commit in each branch.  If you add more\ncommits by mistake, you can use `git rebase` to [squash them\ntogether](https://medium.com/@slamflipstrom/a-beginners-guide-to-squashing-commits-with-git-rebase-8185cf6e62ec)\ninto a single one.\n\n\n\n\n\n### Step 3: Test your changes\n\nYou've written and tested your code, but before sending code out for review, run\nall the tests for the whole tree to ensure the changes don't break other\npackages or programs:\n\n\n```console\n$ go test ./...\n```\n\n\n### Step 4: Send changes for review\n\nOnce the change is ready and tested over the whole tree, send it for review.\nThis is done with the `mail` sub-command which, despite its name, doesn't\ndirectly mail anything; it just sends the change to Gerrit:\n\n\n```console\n$ git codereview mail\n```\n\nGerrit assigns your change a number and URL, which `git codereview mail` will\nprint, something like:\n\n\n```\nremote: New Changes:\nremote:   https://review.gerrithub.io/99999 math: improved Sin, Cos and Tan precision for very large arguments\n```\n\nIf you get an error instead, see the [\"Troubleshooting mail\nerrors\"](#troubleshooting-gerrithub-mail-errors).\n\n\n### Step 5: Revise changes after a review\n\nCUE maintainers will review your code on Gerrit, and you will get notifications\nvia e-mail.  You can see the review on Gerrit and comment on them there.  You\ncan also reply [using\ne-mail](https://gerrit-review.googlesource.com/Documentation/intro-user.html#reply-by-email)\nif you prefer.\n\n\nIf you need to revise your change after the review, edit the files in the same\nbranch you previously created, add them to the Git staging area, and then amend\nthe commit with `git codereview change`:\n\n\n```console\n$ git codereview change  # amend current commit (without -s because we already signed-off, above)\n(open $EDITOR)\n$ git codereview mail    # send new changes to Gerrit\n```\n\nIf you don't need to change the commit description, just save and exit from the\neditor.  Remember not to touch the special `Change-Id` line.\n\n\nAgain, make sure that you always keep a single commit in each branch.  If you\nadd more commits by mistake, you can use `git rebase` to [squash them\ntogether](https://medium.com/@slamflipstrom/a-beginners-guide-to-squashing-commits-with-git-rebase-8185cf6e62ec)\ninto a single one.\n\n\n### CL approved!\n\nWith the review cycle complete, the CI checks green and your CL approved with\n`+2`, it will be submitted. Congratulations! You will have made your first\ncontribution to the CUE project.\n\n\n## Good commit messages\n\nCommit messages in CUE follow a specific set of conventions, which we discuss in\nthis section.\n\n\nHere is an example of a good one:\n\n\n```\ncue/ast/astutil: fix resolution bugs\n\nThis fixes several bugs and documentation bugs in\nidentifier resolution.\n\n1. Resolution in comprehensions would resolve identifiers\nto themselves.\n\n2. Label aliases now no longer bind to references outside\nthe scope of the field. The compiler would catch this invalid\nbind and report an error, but it is better not to bind in the\nfirst place.\n\n3. Remove some more mentions of Template labels.\n\n4. Documentation for comprehensions was incorrect\n(Scope and Node were reversed).\n\n5. Aliases X in `X=[string]: foo` should only be visible\nin foo.\n\nFixes #946\n```\n\n### First line\n\nThe first line of the change description is conventionally a short one-line\nsummary of the change, prefixed by the primary affected package\n(`cue/ast/astutil` in the example above).\n\n\nA rule of thumb is that it should be written so to complete the sentence \"This\nchange modifies CUE to \\_\\_\\_\\_.\" That means it does not start with a capital\nletter, is not a complete sentence, and actually summarizes the result of the\nchange.\n\n\nFollow the first line by a blank line.\n\n\n### Main content\n\nThe rest of the description elaborates and should provide context for the change\nand explain what it does.  Write in complete sentences with correct punctuation,\njust like for your comments in CUE.  Don't use HTML, Markdown, or any other\nmarkup language.\n\n\n\n### Referencing issues\n\nThe special notation `Fixes #12345` associates the change with issue 12345 in\nthe [CUE issue tracker](https://cuelang.org/issue/12345) When this change is\neventually applied, the issue tracker will automatically mark the issue as\nfixed.\n\n\nIf the change is a partial step towards the resolution of the issue, uses the\nnotation `Updates #12345`.  This will leave a comment in the issue linking back\nto the change in Gerrit, but it will not close the issue when the change is\napplied.\n\n\nAll issues are tracked in the main repository's issue tracker.\nIf you are sending a change against a subrepository, you must use the\nfully-qualified syntax supported by GitHub to make sure the change is linked to\nthe issue in the main repository, not the subrepository (eg. `Fixes cue-lang/cue#999`).\n\n\n\n## The review process\n\nThis section explains the review process in detail and how to approach reviews\nafter a change has been sent to either GerritHub or GitHub.\n\n\n\n### Common mistakes\n\nWhen a change is sent to Gerrit, it is usually triaged within a few days.  A\nmaintainer will have a look and provide some initial review that for first-time\ncontributors usually focuses on basic cosmetics and common mistakes.  These\ninclude things like:\n\n\n- Commit message not following the suggested format.\n- The lack of a linked GitHub issue.  The vast majority of changes require a\n  linked issue that describes the bug or the feature that the change fixes or\nimplements, and consensus should have been reached on the tracker before\nproceeding with it.  Gerrit reviews do not discuss the merit of the change, just\nits implementation.  Only trivial or cosmetic changes will be accepted without\nan associated issue.\n\n### Continuous Integration (CI) checks\n\nAfter an initial reading of your change, maintainers will trigger CI checks,\nthat run a full test suite and [Unity](https://cuelabs.dev/unity/)\nchecks.  Most CI tests complete in a few minutes, at which point a link will be\nposted in Gerrit where you can see the results, or if you are submitting a PR\nresults are presented as checks towards the bottom of the PR.\n\n\nIf any of the CI checks fail, follow the link and check the full logs.  Try to\nunderstand what broke, update your change to fix it, and upload again.\nMaintainers will trigger a new CI run to see if the problem was fixed.\n\n\n### Reviews\n\nThe CUE community values very thorough reviews.  Think of each review comment\nlike a ticket: you are expected to somehow \"close\" it by acting on it, either by\nimplementing the suggestion or convincing the reviewer otherwise.\n\n\nAfter you update the change, go through the review comments and make sure to\nreply to every one.  In GerritHub you can click the \"Done\" button to reply\nindicating that you've implemented the reviewer's suggestion and in GitHub you\ncan mark a comment as resolved; otherwise, click on \"Reply\" and explain why you\nhave not, or what you have done instead.\n\n\nIt is perfectly normal for changes to go through several round of reviews, with\none or more reviewers making new comments every time and then waiting for an\nupdated change before reviewing again.  This cycle happens even for experienced\ncontributors, so don't be discouraged by it.\n\n\n### Voting conventions in GerritHub\n\nAs they near a decision, reviewers will make a \"vote\" on your change.\nThe Gerrit voting system involves an integer in the range -2 to +2:\n\n\n- **+2** The change is approved for being merged.  Only CUE maintainers can cast\n  a +2 vote.\n- **+1** The change looks good, but either the reviewer is requesting minor\n  changes before approving it, or they are not a maintainer and cannot approve\nit, but would like to encourage an approval.\n- **-1** The change is not good the way it is but might be fixable.  A -1 vote\n  will always have a comment explaining why the change is unacceptable.\n- **-2** The change is blocked by a maintainer and cannot be approved.  Again,\n  there will be a comment explaining the decision.\n\n### Reviewed changed in GitHub\n\nWhen reviewing a PR, a reviewer will indicate the nature of their response:\n\n* **Comments** - general feedback without explicit approval.\n* **Approve** - feedback and approval for this PR to accepted and submitted in\n  GerritHub.\n* **Request changes** - feedback that must be addressed before this PR can\n  proceed.\n\n\n\n### Submitting an approved change\n\nAfter the code has been `+2`'ed in GerritHub or \"Approved\" in GitHub, an\napprover will apply it to the `master` branch using the Gerrit user interface.\nThis is called \"submitting the change\".\n\n\nThe two steps (approving and submitting) are separate because in some cases\nmaintainers may want to approve it but not to submit it right away (for\ninstance, the tree could be temporarily frozen).\n\n\nSubmitting a change checks it into the repository.  The change description will\ninclude a link to the code review, which will be updated with a link to the\nchange in the repository.  Since the method used to integrate the changes is\nGit's \"Cherry Pick\", the commit hashes in the repository will be changed by the\nsubmit operation.\n\n\nIf your change has been approved for a few days without being submitted, feel\nfree to write a comment in GerritHub or GitHub requesting submission.\n\n\n## Miscellaneous topics\n\nThis section collects a number of other comments that are outside the\nissue/edit/code review/submit process itself.\n\n\n\n### Copyright headers\n\nFiles in the CUE repository don't list author names, both to avoid clutter and\nto avoid having to keep the lists up to date.  Instead, your name will appear in\nthe [git change log](https://review.gerrithub.io/plugins/gitiles/cue-lang/cue/+log)\nand in [GitHub's contributor stats](https://github.com/cue-lang/cue/graphs/contributors)\nwhen using an email address linked to a GitHub account.\n\nNew files that you contribute should use the standard copyright header\nwith the current year reflecting when they were added.\nDo not update the copyright year for existing files that you change.\n\n\n```\n// Copyright 2018 The CUE Authors\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```\n\n### Troubleshooting GerritHub mail errors\n\nThe most common way that the `git codereview mail` command fails is because\nthe e-mail address in the commit does not match the one that you used during the\nregistration process.\n\nIf you see something like...\n\n\n```\nremote: Processing changes: refs: 1, done\nremote:\nremote: ERROR:  In commit ab13517fa29487dcf8b0d48916c51639426c5ee9\nremote: ERROR:  author email address your.email@domain.com\nremote: ERROR:  does not match your user account.\n```\n\nyou need to configure Git for this repository to use the e-mail address that you\nregistered with.  To change the e-mail address to ensure this doesn't happen\nagain, run:\n\n\n```console\n$ git config user.email email@address.com\n```\n\nThen change the commit to use this alternative e-mail address with this command:\n\n\n```console\n$ git commit --amend --author=\"Author Name &lt;email@address.com&gt;\"\n```\n\nThen retry by running:\n\n\n```console\n$ git codereview mail\n```\n\n\n### Quickly testing your changes\n\nRunning `go test ./...` for every single change to the code tree is burdensome.\nEven though it is strongly suggested to run it before sending a change, during\nthe normal development cycle you may want to compile and test only the package\nyou are developing.\n\n\nIn this section, we'll call the directory into which you cloned the CUE\nrepository `$CUEDIR`.  As CUE uses Go modules, The `cue` tool built by `go\ninstall` will be installed in the `bin/go` in your home directory by default.\n\nIf you're changing the CUE APIs or code, you can test the results in just\nthis package directory.\n\n```console\n$ cd $CUEDIR/cue\n$ [make changes...]\n$ go test\n```\n\nYou don't need to build a new cue tool to test it.\nInstead you can run the tests from the root.\n\n```console\n$ cd $CUEDIR\n$ go test ./...\n```\n\nTo use the new tool you would still need to build and install it.\n\n\n### Specifying a reviewer / CCing others in GerritHub\n\nYou can specify a reviewer or CC interested parties using the `-r` or `-cc`\noptions.  Both accept a comma-separated list of e-mail addresses:\n\n\n```console\n$ git codereview mail -r joe@cuelang.org -cc mabel@example.com,math-nuts@swtch.com\n```\n\n\n### Synchronize your client with GerritHub\n\nWhile you were working, others might have submitted changes to the repository.\nTo update your local branch, run\n\n\n```console\n$ git codereview sync\n```\n\n(Under the covers this runs\n`git pull -r`.)\n\n\n\n### Reviewing code by others\n\nAs part of the review process reviewers can propose changes directly (in the\nGitHub workflow this would be someone else attaching commits to a pull request).\n\nYou can import these changes proposed by someone else into your local Git\nrepository.  On the Gerrit review page, click the \"Download ▼\" link in the upper\nright corner, copy the \"Checkout\" command and run it from your local Git repo.\nIt will look something like this:\n\n\n```console\n$ git fetch https://review.gerrithub.io/a/cue-lang/cue refs/changes/67/519567/1 && git checkout FETCH_HEAD\n```\n\nTo revert, change back to the branch you were working in.\n\n\n### Set up git aliases\n\nThe `git-codereview` command can be run directly from the shell\nby typing, for instance,\n\n\n```console\n$ git codereview sync\n```\n\nbut it is more convenient to set up aliases for `git-codereview`'s own\nsubcommands, so that the above becomes,\n\n\n```console\n$ git sync\n```\n\nThe `git-codereview` subcommands have been chosen to be distinct from Git's own,\nso it's safe to define these aliases.  To install them, copy this text into your\nGit configuration file (usually `.gitconfig` in your home directory):\n\n\n```\n[alias]\n\tchange = codereview change\n\tgofmt = codereview gofmt\n\tmail = codereview mail\n\tpending = codereview pending\n\tsubmit = codereview submit\n\tsync = codereview sync\n```\n\n\n### Sending multiple dependent changes\n\nAdvanced users may want to stack up related commits in a single branch.  Gerrit\nallows for changes to be dependent on each other, forming such a dependency\nchain.  Each change will need to be approved and submitted separately but the\ndependency will be visible to reviewers.\n\n\nTo send out a group of dependent changes, keep each change as a different commit\nunder the same branch, and then run:\n\n\n```console\n$ git codereview mail HEAD\n```\n\nMake sure to explicitly specify `HEAD`, which is usually not required when\nsending single changes.\n\nThis is covered in more detail in [the Gerrit\ndocumentation](https://gerrit-review.googlesource.com/Documentation/concept-changes.html).\n\n### Do I really have to add the `-s` flag to each commit?\n\nEarlier in this guide we explained the role the [Developer Certificate of\nOrigin](https://developercertificate.org/) plays in contributions to the CUE\nproject. we also explained how `git commit -s` can be used to sign-off each\ncommit. But:\n\n* it's easy to forget the `-s` flag;\n* it's not always possible/easy to fix up other tools that wrap the `git commit`\n  step.\n\nYou can automate the sign-off step using a [`git`\nhook](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks). Run the\nfollowing commands in the root of a `git` repository where you want to\nautomatically sign-off each commit:\n\n```\ncat <<'EOD' > .git/hooks/prepare-commit-msg\n#!/bin/sh\n\nNAME=$(git config user.name)\nEMAIL=$(git config user.email)\n\nif [ -z \"$NAME\" ]; then\n    echo \"empty git config user.name\"\n    exit 1\nfi\n\nif [ -z \"$EMAIL\" ]; then\n    echo \"empty git config user.email\"\n    exit 1\nfi\n\ngit interpret-trailers --if-exists doNothing --trailer \\\n    \"Signed-off-by: $NAME <$EMAIL>\" \\\n    --in-place \"$1\"\nEOD\nchmod +x .git/hooks/prepare-commit-msg\n```\n\nIf you already have a `prepare-commit-msg` hook, adapt it accordingly. The `-s`\nflag will now be implied every time a commit is created.\n\n\n## Code of Conduct\n\nGuidelines for participating in CUE community spaces and a reporting process for\nhandling issues can be found in the [Code of\nConduct](https://cuelang.org/docs/contribution_guidelines/conduct).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.1435546875,
          "content": "<!--\n Copyright 2018 The CUE Authors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n-->\n[![Go Reference](https://pkg.go.dev/badge/cuelang.org/go.svg)](https://pkg.go.dev/cuelang.org/go)\n[![Documentation](https://img.shields.io/badge/CUE-Docs-0066ff)](https://cuelang.org/docs/)\n[![Github](https://github.com/cue-lang/cue/actions/workflows/trybot.yaml/badge.svg)](https://github.com/cue-lang/cue/actions/workflows/trybot.yaml?query=branch%3Amaster+event%3Apush)\n[![Go 1.22+](https://img.shields.io/badge/go-1.22-9cf.svg)](https://golang.org/dl/)\n[![platforms](https://img.shields.io/badge/platforms-linux|windows|macos-inactive.svg)]()\n[![Docker Image](https://img.shields.io/docker/v/cuelang/cue?sort=semver&label=docker)](https://hub.docker.com/r/cuelang/cue)\n\n# CUE - _Configure, Unify, Execute_\n\nCUE makes it easy to validate data, write schemas,\nand ensure configurations align with policies.\n\nCUE works with a wide range of tools and formats that you're already using\nsuch as Go, JSON, YAML, OpenAPI, and JSON Schema.\n\nFor more information and documentation, including __tutorials and guides__, see [cuelang.org](https://cuelang.org).\n\n### Download and Install\n\nThe full range of installation methods for the `cue` command are listed on the\n[cuelang.org site](https://cuelang.org/docs/introduction/installation/),\nincluding the official container image suitable for use with Docker.\nHere are two common ways to install the command:\n\n#### Release builds\n\nDownload the [latest release](https://github.com/cue-lang/cue/releases/latest/) from GitHub.\n\n#### Install from Source\n\nYou need [Go 1.22 or later](https://go.dev/doc/install) to install CUE from source:\n\n\tgo install cuelang.org/go/cmd/cue@latest\n\nYou can also clone the repository and build it directly via `go install ./cmd/cue`.\nNote that local builds [lack version information](https://go.dev/issue/50603),\nso you should inject the version string when building a release, such as:\n\n\tgit switch -d v0.11.0\n\tgo install -ldflags='-X cuelang.org/go/cmd/cue/cmd.version=v0.11.0' ./cmd/cue\n\n### Learning CUE\n\nThe fastest way to learn the basics is to follow the [tour on the website](https://cuelang.org/docs/tour/).\n\nMore documentation including various tutorials can be found [on the website](https://cuelang.org/docs/).\n\n### References\n\n- [Language Specification](https://cuelang.org/docs/reference/spec/): the official CUE Language specification\n- [Go API](https://pkg.go.dev/cuelang.org/go/cue): the Go API on pkg.go.dev\n- [Builtin packages](https://pkg.go.dev/cuelang.org/go/pkg): builtin functions available from CUE programs\n- [`cue` CLI](https://cuelang.org/docs/reference/cli/): the `cue` command line interface\n\n### Go release support policy\n\nAs a general rule, we support the two most recent major releases of Go,\nmatching Go's [security policy](https://go.dev/doc/security/policy).\nFor example, if CUE v0.7.0 is released when Go's latest version is 1.21.5,\nv0.7.x including any following bugfix releases will require Go 1.20 or later.\n\n### Contributing\n\nTo contribute, please read the [Contribution Guide](CONTRIBUTING.md).\n\n## Code of Conduct\n\nGuidelines for participating in CUE community spaces and a reporting process for\nhandling issues can be found in the [Code of Conduct](https://cuelang.org/docs/reference/code-of-conduct/).\n\n## Contact\n\n- Ask questions via [GitHub Discussions](https://github.com/cue-lang/cue/discussions)\n- Chat with us on [Slack](https://cuelang.org/s/slack) and [Discord](https://cuelang.org/s/discord)\n- Subscribe to our [Community Calendar](https://cuelang.org/s/community-calendar) for community updates, demos, office hours, etc\n\n---\n\nUnless otherwise noted, the CUE source files are distributed\nunder the Apache 2.0 license found in the LICENSE file.\n"
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "codereview.cfg",
          "type": "blob",
          "size": 0.1962890625,
          "content": "# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.\n\ngerrit: https://review.gerrithub.io/a/cue-lang/cue\ngithub: https://github.com/cue-lang/cue\ncue-unity: https://github.com/cue-unity/unity-private\n"
        },
        {
          "name": "cue.mod",
          "type": "tree",
          "content": null
        },
        {
          "name": "cue",
          "type": "tree",
          "content": null
        },
        {
          "name": "cuego",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "encoding",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.1650390625,
          "content": "module cuelang.org/go\n\ngo 1.22.0\n\nrequire (\n\tcuelabs.dev/go/oci/ociregistry v0.0.0-20241125120445-2c00c104c6e1\n\tgithub.com/cockroachdb/apd/v3 v3.2.1\n\tgithub.com/emicklei/proto v1.13.4\n\tgithub.com/go-quicktest/qt v1.101.0\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510\n\tgithub.com/google/uuid v1.6.0\n\tgithub.com/kr/pretty v0.3.1\n\tgithub.com/opencontainers/go-digest v1.0.0\n\tgithub.com/opencontainers/image-spec v1.1.0\n\tgithub.com/pelletier/go-toml/v2 v2.2.3\n\tgithub.com/protocolbuffers/txtpbfmt v0.0.0-20241112170944-20d2c9ebc01d\n\tgithub.com/rogpeppe/go-internal v1.13.1\n\tgithub.com/spf13/cobra v1.8.1\n\tgithub.com/spf13/pflag v1.0.5\n\tgithub.com/tetratelabs/wazero v1.6.0\n\tgithub.com/yuin/goldmark v1.7.8\n\tgolang.org/x/mod v0.22.0\n\tgolang.org/x/net v0.32.0\n\tgolang.org/x/oauth2 v0.24.0\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/sys v0.28.0\n\tgolang.org/x/text v0.21.0\n\tgolang.org/x/tools v0.28.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/mitchellh/go-wordwrap v1.0.1 // indirect\n\tgopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 6.388671875,
          "content": "cuelabs.dev/go/oci/ociregistry v0.0.0-20241125120445-2c00c104c6e1 h1:mRwydyTyhtRX2wXS3mqYWzR2qlv6KsmoKXmlz5vInjg=\ncuelabs.dev/go/oci/ociregistry v0.0.0-20241125120445-2c00c104c6e1/go.mod h1:5A4xfTzHTXfeVJBU6RAUf+QrlfTCW+017q/QiW+sMLg=\ngithub.com/cockroachdb/apd/v3 v3.2.1 h1:U+8j7t0axsIgvQUqthuNm82HIrYXodOV2iWLWtEaIwg=\ngithub.com/cockroachdb/apd/v3 v3.2.1/go.mod h1:klXJcjp+FffLTHlhIG69tezTDvdP065naDsHzKhYSqc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/emicklei/proto v1.13.4 h1:myn1fyf8t7tAqIzV91Tj9qXpvyXXGXk8OS2H6IBSc9g=\ngithub.com/emicklei/proto v1.13.4/go.mod h1:rn1FgRS/FANiZdD2djyH7TMA9jdRDcYQ9IEN9yvjX0A=\ngithub.com/go-quicktest/qt v1.101.0 h1:O1K29Txy5P2OK0dGo59b7b0LR6wKfIhttaAhHUyn7eI=\ngithub.com/go-quicktest/qt v1.101.0/go.mod h1:14Bz/f7NwaXPtdYEgzsx46kqSxVwTbzVZsDC26tQJow=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\ngithub.com/lib/pq v1.10.7 h1:p7ZhMD+KsSRozJr34udlUrhboJwWAgCg34+/ZZNvZZw=\ngithub.com/lib/pq v1.10.7/go.mod h1:AlVN5x4E4T544tWzH6hKfbfQvm3HdbOxrmggDNAPY9o=\ngithub.com/mitchellh/go-wordwrap v1.0.1 h1:TLuKupo69TCn6TQSyGxwI1EblZZEsQ0vMlAFQflz0v0=\ngithub.com/mitchellh/go-wordwrap v1.0.1/go.mod h1:R62XHJLzvMFRBbcrT7m7WgmE1eOyTSsCt+hzestvNj0=\ngithub.com/opencontainers/go-digest v1.0.0 h1:apOUWs51W5PlhuyGyz9FCeeBIOUDA/6nW8Oi/yOhh5U=\ngithub.com/opencontainers/go-digest v1.0.0/go.mod h1:0JzlMkj0TRzQZfJkVvzbP0HBR3IKzErnv2BNG4W4MAM=\ngithub.com/opencontainers/image-spec v1.1.0 h1:8SG7/vwALn54lVB/0yZ/MMwhFrPYtpEHQb2IpWsCzug=\ngithub.com/opencontainers/image-spec v1.1.0/go.mod h1:W4s4sFTMaBeK1BQLXbG4AdM2szdn85PY75RI83NrTrM=\ngithub.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=\ngithub.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/protocolbuffers/txtpbfmt v0.0.0-20241112170944-20d2c9ebc01d h1:HWfigq7lB31IeJL8iy7jkUmU/PG1Sr8jVGhS749dbUA=\ngithub.com/protocolbuffers/txtpbfmt v0.0.0-20241112170944-20d2c9ebc01d/go.mod h1:jgxiZysxFPM+iWKwQwPR+y+Jvo54ARd4EisXxKYpB5c=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/rogpeppe/go-internal v1.13.1 h1:KvO1DLK/DRN07sQ1LQKScxyZJuNnedQ5/wKSR38lUII=\ngithub.com/rogpeppe/go-internal v1.13.1/go.mod h1:uMEvuHeurkdAXX61udpOXGD/AzZDWNMNyH2VO9fmH0o=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tetratelabs/wazero v1.6.0 h1:z0H1iikCdP8t+q341xqepY4EWvHEw8Es7tlqiVzlP3g=\ngithub.com/tetratelabs/wazero v1.6.0/go.mod h1:0U0G41+ochRKoPKCJlh0jMg1CHkyfK8kDqiirMmKY8A=\ngithub.com/yuin/goldmark v1.7.8 h1:iERMLn0/QJeHFhxSt3p6PeN9mGnvIKSpG9YYorDMnic=\ngithub.com/yuin/goldmark v1.7.8/go.mod h1:uzxRWxtg69N339t3louHJ7+O03ezfj6PlliRlaOzY1E=\ngolang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=\ngolang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.32.0 h1:ZqPmj8Kzc+Y6e0+skZsuACbx+wzMgo5MQsJh9Qd6aYI=\ngolang.org/x/net v0.32.0/go.mod h1:CwU0IoeOlnQQWJ6ioyFrfRuomB8GKF6KbYXZVyeXNfs=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.28.0 h1:WuB6qZ4RPCQo5aP3WdKZS7i595EdWqWR8vqJTlwTVK8=\ngolang.org/x/tools v0.28.0/go.mod h1:dcIOrVd3mfQKTgrDVQHqCPMWy6lnhfhtX3hLXYVLfRw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127 h1:qIbj1fsPNlZgppZ+VLlY7N33q108Sa+fhmuc+sWQYwY=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "mod",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "staticcheck.conf",
          "type": "blob",
          "size": 0.3583984375,
          "content": "# Run the default check list, minus some that don't pass just yet.\n# TODO: fix most of the issues below and re-enable their checks.\nchecks = [\n  \"inherit\",\n  \"-SA1019\", # use of deprecated APIs\n  \"-SA4000\", # identical expressions in && or || logic\n  \"-S1008\", # simplify if/else to bool expression\n  \"-S1011\", # simplify loop with append\n  \"-U1000\", # unused code\n]\n"
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}