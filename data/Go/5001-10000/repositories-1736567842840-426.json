{
  "metadata": {
    "timestamp": 1736567842840,
    "page": 426,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQyOA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "umputun/remark42",
      "stars": 5005,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.6171875,
          "content": "/logs/\n/target/\n/var/\n/.vscode/\n/.idea/\n/bin/\n/.git/\n\n# frontend files not needed in docker image\n/frontend/node_modules/\n/frontend/apps/remark42/node_modules/\n/frontend/apps/remark42/public/\n# e2e tests arficats\n/frontend/e2e/playwright-report/\n/frontend/e2e/playwright/.cache/\n/frontend/e2e/test-results/\n\n# source files\ndocker-compose.yml\ncompose-dev-backend.yml\ncompose-dev-frontend.yml\ncompose-private-backend.yml\ncompose-private-frontend.yml\ncompose-e2e-test.yml\ncompose-private.yml\nrest-client.env.json\nMakefile\n\n# generated files\n*.cov\n.cover\ntarget\ndebug\ndebug.test\n*.prof\n*.test\nremark42\n/backend/var/\n/playwright-report/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1748046875,
          "content": "root = true\n\n[*]\nindent_style = tab\ninsert_final_newline = true\n\n[*.md]\nindent_style = space\ntrim_trailing_whitespace = false\n\n[*.{yml,json}]\nindent_size = 2\nindent_style = space\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3740234375,
          "content": "*.cov\n.cover\ntarget\n/logs/\n/target/\n/var/\ndebug\ndebug.test\n.vscode\n.idea/\n*.prof\n*.test\n/rest-client.env.json\n.DS_Store\n.mongo\nremark42\n/bin/\n/backend/var/\n/backend/app/var/\n/backend/app/cmd/web/\n/backend/*.html.tmpl\ncompose-private-backend.yml\ncompose-private-frontend.yml\ncompose-private.yml\n/backend/_example/*/vendor\nhttp-client.env.json\n/playwright-report/\n/backend/app/cmd/var\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.501953125,
          "content": "FROM --platform=$BUILDPLATFORM node:16.20-alpine AS frontend-deps\n\nARG SKIP_FRONTEND_TEST\nARG SKIP_FRONTEND_BUILD\n\nWORKDIR /srv/frontend/\n\nCOPY ./frontend/package.json ./frontend/pnpm-lock.yaml ./frontend/pnpm-workspace.yaml /srv/frontend/\nCOPY ./frontend/apps/remark42/package.json /srv/frontend/apps/remark42/\n\nRUN \\\n  if [[ -z \"$SKIP_FRONTEND_BUILD\" || -z \"$SKIP_FRONTEND_TEST\" ]]; then \\\n    apk add --no-cache --update git && \\\n    npm i -g pnpm@8; \\\n  fi\n\nRUN --mount=type=cache,id=pnpm,target=/root/.pnpm-store/v3 \\\n  if [[ -z \"$SKIP_FRONTEND_BUILD\" || -z \"$SKIP_FRONTEND_TEST\" ]]; then \\\n    pnpm i; \\\n  fi\n\n\nFROM --platform=$BUILDPLATFORM frontend-deps AS build-frontend\n\nARG SKIP_FRONTEND_TEST\nARG SKIP_FRONTEND_BUILD\nENV CI=true\n\nWORKDIR /srv/frontend/apps/remark42/\n\nCOPY ./frontend/apps/remark42/ /srv/frontend/apps/remark42/\n\nRUN \\\n  if [ -z \"$SKIP_FRONTEND_TEST\" ]; then \\\n    pnpm lint type-check translation-check test; \\\n  else \\\n    echo 'Skip frontend test'; \\\n  fi\n\nRUN \\\n  if [ -z \"$SKIP_FRONTEND_BUILD\" ]; then \\\n    pnpm build; \\\n  else \\\n    mkdir /srv/frontend/apps/remark42/public; \\\n    echo 'Skip frontend build'; \\\n  fi\n\nFROM umputun/baseimage:buildgo-v1.14.0 AS build-backend\n\nARG CI\nARG GITHUB_REF\nARG GITHUB_SHA\nARG GIT_BRANCH\nARG SKIP_BACKEND_TEST\nARG BACKEND_TEST_TIMEOUT\n\n# install gcc in order to be able to go test package with -race\nRUN apk --no-cache add gcc libc-dev\n\nADD backend /build/backend\n# to embed the frontend files statically into Remark42 binary\nCOPY --from=build-frontend /srv/frontend/apps/remark42/public/ /build/backend/app/cmd/web/\nRUN find /build/backend/app/cmd/web/ -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\nWORKDIR /build/backend\n\nRUN echo go version: `go version`\n\n# run tests\nRUN \\\n    cd app && \\\n    if [ -z \"$SKIP_BACKEND_TEST\" ] ; then \\\n        CGO_ENABLED=1 go test -race -p 1 -timeout=\"${BACKEND_TEST_TIMEOUT:-300s}\" -covermode=atomic -coverprofile=/profile.cov_tmp ./... && \\\n        cat /profile.cov_tmp | grep -v \"_mock.go\" > /profile.cov && \\\n        golangci-lint run --config ../.golangci.yml ./... ; \\\n    else \\\n      echo \"skip backend tests and linter\" \\\n    ; fi\n\nRUN \\\n    version=\"$(/script/version.sh)\" && \\\n    echo \"version=$version\" && \\\n    go build -o remark42 -ldflags \"-X main.revision=${version} -s -w\" ./app\n\nFROM umputun/baseimage:app-v1.14.0\n\nARG GITHUB_SHA\n\nLABEL org.opencontainers.image.authors=\"Umputun <umputun@gmail.com>\" \\\n      org.opencontainers.image.description=\"Remark42 comment engine\" \\\n      org.opencontainers.image.documentation=\"https://remark42.com/docs/getting-started/\" \\\n      org.opencontainers.image.licenses=\"MIT\" \\\n      org.opencontainers.image.source=\"https://github.com/umputun/remark42\" \\\n      org.opencontainers.image.title=\"Remark42\" \\\n      org.opencontainers.image.url=\"https://remark42.com/\" \\\n      org.opencontainers.image.revision=\"${GITHUB_SHA}\"\n\nWORKDIR /srv\n\nCOPY docker-init.sh /srv/init.sh\nADD backend/scripts/backup.sh /usr/local/bin/backup\nADD backend/scripts/restore.sh /usr/local/bin/restore\nADD backend/scripts/import.sh /usr/local/bin/import\nRUN chmod +x /srv/init.sh /usr/local/bin/backup /usr/local/bin/restore /usr/local/bin/import\n\nCOPY --from=build-backend /build/backend/remark42 /srv/remark42\nCOPY --from=build-frontend /srv/frontend/apps/remark42/public/ /srv/web/\nRUN chown -R app:app /srv\nRUN ln -s /srv/remark42 /usr/bin/remark42\n\nEXPOSE 8080\nHEALTHCHECK --interval=30s --timeout=3s CMD curl --fail http://localhost:8080/ping || exit 1\n\nCMD [\"/srv/remark42\", \"server\"]\n"
        },
        {
          "name": "Dockerfile.artifacts",
          "type": "blob",
          "size": 2.85546875,
          "content": "FROM node:16-alpine AS frontend-deps\n\nENV CI=true\n\nWORKDIR /srv/frontend\n\nCOPY ./frontend/package.json ./frontend/pnpm-lock.yaml ./frontend/pnpm-workspace.yaml /srv/frontend/\nCOPY ./frontend/apps/remark42/package.json /srv/frontend/apps/remark42/package.json\n\nRUN apk add --no-cache --update git && npm i -g pnpm@8\nRUN --mount=type=cache,id=pnpm,target=/root/.pnpm-store/v3 pnpm i\n\nFROM frontend-deps AS build-frontend\n\nENV NODE_ENV=production\nENV CI=true\n\nWORKDIR /srv/frontend/apps/remark42/\nCOPY ./frontend/apps/remark42/ /srv/frontend/apps/remark42/\nRUN pnpm build\n\nFROM umputun/baseimage:buildgo-v1.14.0 AS build-backend\n\nARG GITHUB_TOKEN\nARG GITHUB_REF\nARG GITHUB_SHA\n\nWORKDIR /build/backend\nADD backend /build/backend\nADD README.md /build/\nADD LICENSE /build/\n\nCOPY --from=build-frontend /srv/frontend/apps/remark42/public/ /build/backend/app/cmd/web/\n\nRUN find /build/backend/app/cmd/web/ -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|http://127.0.0.1:8080|g\" {} \\;\n\nRUN \\\n  version=$(\"/script/version.sh\") && echo \"version=${version}\" && \\\n    GOOS=linux GOARCH=amd64 go build -o remark42.linux-amd64 -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=linux GOARCH=386 go build -o remark42.linux-386 -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=linux GOARCH=arm go build -o remark42.linux-arm -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=linux GOARCH=arm64 go build -o remark42.linux-arm64 -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=windows GOARCH=amd64 go build -o remark42.windows-amd64.exe -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=darwin GOARCH=amd64 go build -o remark42.darwin-amd64 -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=darwin GOARCH=arm64 go build -o remark42.darwin-arm64 -ldflags \"-X main.revision=${version} -s -w\" ./app && \\\n    GOOS=freebsd GOARCH=amd64 go build -o remark42.freebsd-amd64 -ldflags \"-X main.revision=${version} -s -w\" ./app\n\nRUN \\\n    apk add --no-cache --update zip && \\\n    cp ../LICENSE ./LICENSE && cp ../README.md ./README.md && \\\n    tar cvzf remark42.linux-amd64.tar.gz remark42.linux-amd64 LICENSE README.md && \\\n    tar cvzf remark42.linux-386.tar.gz remark42.linux-386 LICENSE README.md && \\\n    tar cvzf remark42.linux-arm.tar.gz remark42.linux-arm LICENSE README.md && \\\n    tar cvzf remark42.linux-arm64.tar.gz remark42.linux-arm64 LICENSE README.md && \\\n    tar cvzf remark42.darwin-amd64.tar.gz remark42.darwin-amd64 LICENSE README.md && \\\n    tar cvzf remark42.darwin-arm64.tar.gz remark42.darwin-arm64 LICENSE README.md && \\\n    tar cvzf remark42.freebsd-amd64.tar.gz remark42.freebsd-amd64 LICENSE README.md && \\\n    zip remark42.windows-amd64.zip remark42.windows-amd64.exe LICENSE README.md\n\n\nFROM alpine\nCOPY --from=build-backend /build/backend/remark42.* /artifacts/\nRUN ls -la /artifacts/*\nCMD [\"sleep\", \"100\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0390625,
          "content": "MIT License\n\nCopyright (c) 2021 Umputun\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.3994140625,
          "content": "OS=linux\nARCH=amd64\nGITHUB_REF=$(shell git rev-parse --symbolic-full-name HEAD)\nGITHUB_SHA=$(shell git rev-parse --short HEAD)\n\nbin:\n\tdocker build -f Dockerfile.artifacts -t remark42.bin .\n\t- @docker rm -f remark42.bin 2>/dev/null || exit 0\n\tdocker run -d --name=remark42.bin remark42.bin\n\tdocker cp remark42.bin:/artifacts/remark42.$(OS)-$(ARCH) remark42\n\tdocker rm -f remark42.bin\n\ndocker:\n\tDOCKER_BUILDKIT=1 docker build -t umputun/remark42 --build-arg GITHUB_REF=$(GITHUB_REF) --build-arg GITHUB_SHA=$(GITHUB_SHA) \\\n\t\t--build-arg CI=true --build-arg SKIP_FRONTEND_TEST=true --build-arg SKIP_BACKEND_TEST=true .\n\ndockerx:\n\tdocker buildx build --build-arg GITHUB_REF=$(GITHUB_REF) --build-arg GITHUB_SHA=$(GITHUB_SHA) --build-arg CI=true \\\n\t\t--build-arg SKIP_FRONTEND_TEST=true --build-arg SKIP_BACKEND_TEST=true \\\n\t\t--progress=plain --platform linux/amd64,linux/arm/v7,linux/arm64 \\\n\t\t-t ghcr.io/umputun/remark42:master -t umputun/remark42:master .\n\nrelease:\n\tdocker build -f Dockerfile.artifacts --no-cache --pull --build-arg CI=true \\\n\t\t--build-arg GITHUB_REF=$(GITHUB_REF) --build-arg GITHUB_SHA=$(GITHUB_SHA) -t remark42.bin .\n\t- @docker rm -f remark42.bin 2>/dev/null || exit 0\n\t- @mkdir -p bin\n\tdocker run -d --name=remark42.bin remark42.bin\n\tdocker cp remark42.bin:/artifacts/remark42.linux-amd64.tar.gz bin/remark42.linux-amd64.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.linux-386.tar.gz bin/remark42.linux-386.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.linux-arm64.tar.gz bin/remark42.linux-arm64.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.darwin-amd64.tar.gz bin/remark42.darwin-amd64.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.darwin-arm64.tar.gz bin/remark42.darwin-arm64.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.freebsd-amd64.tar.gz bin/remark42.freebsd-amd64.tar.gz\n\tdocker cp remark42.bin:/artifacts/remark42.windows-amd64.zip bin/remark42.windows-amd64.zip\n\tdocker rm -f remark42.bin\n\nrace_test:\n\tcd backend/app && go test -race -timeout=60s -count 1 ./...\n\nbackend:\n\tdocker compose -f compose-dev-backend.yml build\n\nfrontend:\n\tdocker compose -f compose-dev-frontend.yml build\n\nrundev:\n\tSKIP_BACKEND_TEST=true SKIP_FRONTEND_TEST=true GITHUB_REF=$(GITHUB_REF) GITHUB_SHA=$(GITHUB_SHA) CI=true \\\n\t\tdocker compose -f compose-private.yml build\n\tdocker compose -f compose-private.yml up\n\ne2e:\n\tdocker compose -f compose-e2e-test.yml up --build --quiet-pull --exit-code-from tests\n\n.PHONY: bin backend\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.091796875,
          "content": "# Remark42 [![Build Status](https://github.com/umputun/remark42/workflows/build/badge.svg)](https://github.com/umputun/remark42/actions) [![Image Size](https://img.shields.io/docker/image-size/umputun/remark42/master)](https://hub.docker.com/r/umputun/remark42) [![Go Report Card](https://goreportcard.com/badge/github.com/umputun/remark42)](https://goreportcard.com/report/github.com/umputun/remark42) [![Coverage Status](https://coveralls.io/repos/github/umputun/remark42/badge.svg?branch=master)](https://coveralls.io/github/umputun/remark42?branch=master) [![codecov](https://codecov.io/gh/umputun/remark42/branch/master/graph/badge.svg)](https://app.codecov.io/gh/umputun/remark42)\n\nRemark42 is a self-hosted, lightweight and simple (yet functional) comment engine, which doesn't spy on users. It can be embedded into blogs, articles, or any other place where readers add comments.\n\n* Social login via Google, Facebook, Microsoft, GitHub, Apple, Yandex, Patreon, Discord and Telegram\n* Login via email\n* Optional anonymous access\n* Multi-level nested comments with both tree and plain presentations\n* Import from Disqus and WordPress\n* Markdown support with friendly formatter toolbar\n* Moderator can remove comments and block users\n* Voting, pinning and verification system\n* Sortable comments\n* Images upload with drag-and-drop\n* Extractor for recent comments, cross-post\n* RSS for all comments and each post\n* Telegram, Slack, Webhook and email notifications for Admins (get notified for each new comment)\n* Email and Telegram notifications for users (get notified when someone responds to your comment)\n* Export data to JSON with automatic backups\n* No external databases, everything embedded in a single data file\n* Fully dockerized and can be deployed in a single command\n* Self-contained executable can be deployed directly to Linux, Windows and macOS\n* Clean, lightweight and customizable UI with white and dark themes\n* Multi-site mode from a single instance\n* Integration with automatic SSL (direct and via [nginx-le](https://github.com/nginx-le/nginx-le))\n* [Privacy focused](https://remark42.com/#privacy)\n\n[Demo site](https://remark42.com/demo/) available with all authentication methods, including email auth and anonymous access.\n\n<details><summary>Screenshots</summary>\n\nComments example:\n![](screenshots/comments.png)\n\nFor admin screenshots see [Admin UI documentation](https://remark42.com/docs/manuals/admin-interface/)\n</details>\n\nAll remark42 documentation is available [by the link](https://remark42.com/docs/getting-started/installation/).\n\n## Contribution\n\nIn order to start and work on the project locally in development mode check our contribution documentation for [backend](https://remark42.com/docs/contributing/backend/) and [frontend](https://remark42.com/docs/contributing/frontend/).\n\nIf you are interested in adding a new localization please check [these docs](https://remark42.com/docs/contributing/translations/).\n\n## Related projects\n\n* [A Helm chart for Remark42 on Kubernetes](https://github.com/groundhog2k/helm-charts/tree/master/charts/remark42)\n* [django-remark42](https://github.com/andrewp-as-is/django-remark42.py)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5322265625,
          "content": "# Security Policy\n\n## Supported Versions\n\nWe release patches for security vulnerabilities.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| current | :white_check_mark: |\n| >=1.6.x | :white_check_mark: |\n| <1.5.x  | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report (suspected) security vulnerabilities to umputun@gmail.com. You will receive a response from us within 48 hours. If the issue is confirmed, we will release a patch as soon as possible depending on complexity but historically within a few days.\n"
        },
        {
          "name": "backend",
          "type": "tree",
          "content": null
        },
        {
          "name": "compose-dev-backend.yml",
          "type": "blob",
          "size": 2.015625,
          "content": "# compose file for local development\n# starts backend on 8080 with basic auth \"dev:password\" and Dev oauth2 provider on port 8084\n# UI on http://127.0.0.1:8080/web\n#\n# build remark42 docker image - docker compose -f compose-dev-backend.yml build\n# start remark42 service - docker compose -f compose-dev-backend.yml up\nversion: \"2\"\n\nservices:\n  remark42:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - SKIP_BACKEND_TEST\n        - BACKEND_TEST_TIMEOUT\n        - SKIP_FRONTEND_TEST=true\n        - CI\n        - GITHUB_REF\n        - GITHUB_SHA\n    image: umputun/remark42:dev\n    container_name: \"remark42-dev\"\n    hostname: \"remark42-dev\"\n\n    logging:\n      driver: json-file\n      options:\n        max-size: \"10m\"\n        max-file: \"5\"\n\n    ports:\n      - \"8080:8080\" # primary rest server\n      - \"8084:8084\" # local oauth2 server\n\n    environment:\n      # - APP_UID=1000\n      # - TIME_ZONE=GMT\n      # REMARK_URL below would be used for the dev auth,\n      # so that it would work on http://127.0.0.1 but wouldn't on http://localhost\n      - REMARK_URL=http://127.0.0.1:8080\n      - SECRET=12345\n      - DEBUG=true\n      - ADMIN_PASSWD=password\n      - AUTH_DEV=true # activate local OAuth \"dev\" on REMARK_URL hostname\n      - ADMIN_SHARED_ID=dev_user # set admin flag for default user on local oauth2\n      - NOTIFY_USERS\n      - NOTIFY_ADMINS\n      - TELEGRAM_TOKEN\n      - NOTIFY_TELEGRAM_CHAN\n      - NOTIFY_EMAIL_FROM\n      - ADMIN_SHARED_EMAIL\n      - SMTP_HOST\n      - SMTP_USERNAME\n      - SMTP_PASSWORD\n      - SMTP_PORT\n      - SMTP_TLS\n      - EMOJI=true\n      - ANON_VOTE=true\n      - VOTES_IP=true\n      - AUTH_EMAIL_ENABLE=true\n      - AUTH_TELEGRAM=true\n      - AUTH_ANON=true\n      - AUTH_GOOGLE_CID=1111\n      - AUTH_GOOGLE_CSEC=1111\n      - AUTH_GITHUB_CID=1111\n      - AUTH_GITHUB_CSEC=1111\n      - AUTH_FACEBOOK_CID=1111\n      - AUTH_FACEBOOK_CSEC=1111\n      - AUTH_PATREON_CID=1111\n      - AUTH_PATREON_CSEC=1111\n      - AUTH_DISCORD_CID=1111\n      - AUTH_DISCORD_CSEC=1111\n    volumes:\n      - ./var:/srv/var\n"
        },
        {
          "name": "compose-dev-frontend.yml",
          "type": "blob",
          "size": 1.302734375,
          "content": "# compose file for local development\n# starts backend on 8080 with basic auth \"dev:password\" and Dev oauth2 provider on port 8084\n# UI on http://127.0.0.1:8080/web\n#\n# build remark42 docker image - docker compose -f compose-dev-frontend.yml build\n# start remark42 service - docker compose -f compose-dev-frontend.yml up\nversion: \"2\"\n\nservices:\n  remark42:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - SKIP_BACKEND_TEST=true\n        - SKIP_FRONTEND_BUILD=true\n        # - NODE_ENV=development\n\n    image: umputun/remark42:dev\n    container_name: \"remark42-dev\"\n    hostname: \"remark42-dev\"\n\n    logging:\n      driver: json-file\n      options:\n        max-size: \"10m\"\n        max-file: \"5\"\n\n    ports:\n      - \"8080:8080\" # primary rest server\n      - \"8084:8084\" # local oauth2 server\n\n    environment:\n      # REMARK_URL below would be used for the dev auth,\n      # so that it would work on http://127.0.0.1 but wouldn't on http://localhost\n      - REMARK_URL=http://127.0.0.1:8080\n      - SECRET=12345\n      - DEBUG=true\n      - ADMIN_PASSWD=password\n      - AUTH_DEV=true # activate local OAuth \"dev\" on REMARK_URL hostname\n      - ADMIN_SHARED_ID=dev_user # set admin flag for default user on local oauth2\n      - AUTH_ANON=true\n      - AUTH_EMAIL_ENABLE=true\n    volumes:\n      - ./var:/srv/var\n"
        },
        {
          "name": "compose-e2e-test.yml",
          "type": "blob",
          "size": 0.99609375,
          "content": "# compose for running e2e tests in CI\nversion: \"2\"\n\nservices:\n  remark42:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - SKIP_BACKEND_TEST=true\n        - SKIP_FRONTEND_TEST=true\n\n    image: umputun/remark42:dev\n    container_name: \"remark42\"\n\n    environment:\n      # remark42 hostname used for proper dev auth work for tests container which connects to it\n      # using the such hostname (unlike local development where 127.0.0.1 is used)\n      - REMARK_URL=http://remark42:8080\n      - SECRET=12345\n      - DEBUG=true\n      - ADMIN_PASSWD=password\n      - AUTH_DEV=true # activate local OAuth \"dev\" listening on http://remark42:8084\n      - ADMIN_SHARED_ID=dev_user # set admin flag for default user on local oauth2\n      - AUTH_ANON=true\n      - AUTH_EMAIL_ENABLE=true\n    volumes:\n      - ./var:/srv/var\n\n  tests:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile.e2e\n    depends_on: [remark42]\n    volumes:\n      - ./playwright-report:/frontend/e2e/playwright-report\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 1.1767578125,
          "content": "version: \"2\"\n\nservices:\n  remark:\n    # remove the next line in case you want to use this Docker Compose file separately\n    # as otherwise it would complain for absence of Dockerfile\n    build: .\n    image: umputun/remark42:latest\n    container_name: \"remark42\"\n    hostname: \"remark42\"\n    restart: always\n\n    logging:\n      driver: json-file\n      options:\n        max-size: \"10m\"\n        max-file: \"5\"\n\n    # uncomment to expose directly (no proxy)\n    #ports:\n    #  - \"80:8080\"\n    #  - \"443:8443\"\n\n    # uncomment to expose to reverse proxy running on the same host but not in docker\n    #ports:\n    #  - \"127.0.0.1:8080:8080\"\n\n    environment:\n      - REMARK_URL\n      - SECRET\n      - DEBUG=true\n      - AUTH_GOOGLE_CID\n      - AUTH_GOOGLE_CSEC\n      - AUTH_GITHUB_CID\n      - AUTH_GITHUB_CSEC\n      - AUTH_FACEBOOK_CID\n      - AUTH_FACEBOOK_CSEC\n      - AUTH_DISQUS_CID\n      - AUTH_DISQUS_CSEC\n      # Enable it only for the initial comment import or for manual backups.\n      # Do not leave the server running with the ADMIN_PASSWD set if you don't have an intention\n      # to keep creating backups manually!\n      # - ADMIN_PASSWD=<your secret password>\n    volumes:\n      - ./var:/srv/var\n"
        },
        {
          "name": "docker-init.sh",
          "type": "blob",
          "size": 1.234375,
          "content": "#!/bin/sh\necho \"prepare environment\"\n# replace {% REMARK_URL %} by content of REMARK_URL variable\nfind . -regex '.*\\.\\(html\\|js\\|mjs\\)$' -print -exec sed -i \"s|{% REMARK_URL %}|${REMARK_URL}|g\" {} \\;\n\n# replace 'site_id: \"remark\"' by the first SITE from the comma-separated list of IDs, if present\nif [ -n \"${SITE}\" ]; then\n\tsep=','\n\tcase ${SITE} in\n\t*\"$sep\"*)\n\t\texport single_site_id=${SITE%%\"$sep\"*}\n\t\techo \"multiple site IDs passed in SITE (\\\"${SITE}\\\"): using \\\"${single_site_id}\\\" in frontend site_id\"\n\t\t;;\n\t*)\n\t\techo \"using non-standard frontend site_id from SITE variable (\\\"${SITE}\\\") instead of \\\"remark\\\"\"\n\t\texport single_site_id=$SITE\n\t\t;;\n\tesac\n\techo \"single_site_id: ${single_site_id}\"\n\tsed -i \"s|site_id:\\\"[^\\\"]*\\\"|site_id:\\\"${single_site_id}\\\"|g\" /srv/web/*.html\nfi\n\nif [ -d \"/srv/var\" ]; then\n\techo \"changing ownership of /srv/var to app:app (remark42 user inside the container)\"\n\tchown -R app:app /srv/var || echo \"WARNING: /srv/var ownership change failed, if application will fail that might be the reason\"\nelse\n\techo \"ERROR: /srv/var doesn't exist, which means that state of the application\"\n\techo \"ERROR: will be lost on container stop or restart.\"\n\techo \"ERROR: Please mount local directory to /srv/var in order for it to work.\"\n\texit 199\nfi\n"
        },
        {
          "name": "frontend",
          "type": "tree",
          "content": null
        },
        {
          "name": "screenshots",
          "type": "tree",
          "content": null
        },
        {
          "name": "site",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}