{
  "metadata": {
    "timestamp": 1736567745635,
    "page": 332,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "alda-lang/alda",
      "stars": 5662,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1953125,
          "content": "/target\n/server/target\n/classes\n/checkouts\npom.xml\npom.xml.asc\n*.jar\n*.class\n/.lein-*\n.alda-nrepl-port\n.nrepl-port\n.DS_Store\n.nrepl-history\n.lsp/\n.scores/\n.workbench/\n.idea/\n*~\n.ruby-version\n.gradle/\n"
        },
        {
          "name": "CHANGELOG-0.X.X.md",
          "type": "blob",
          "size": 9.939453125,
          "content": "# CHANGELOG (0.1.0 - 0.14.2)\n\nThis document describes the changes between each release from 0.1.0 through 0.14.2, the last release before the 1.0.0 series.\n\nFor recent versions, see [CHANGELOG](CHANGELOG.md).\n\n## 0.14.2 (2015-11-13)\n\n* Minor aesthetic fixes to the way errors are reported in the Alda REPL and when using the `alda parse` task.\n\n## 0.14.1 (2015-11-13)\n\n* Improved parsing performance, especially noticeable for larger scores. More information [here](https://github.com/alda-lang/alda/issues/143), but the TL;DR version is that we now parse each instrument part individually using separate parsers, and we also make an initial pass of the entire score to strip out comments. This should not be a breaking change; you may notice that it takes less time to parse large scores.\n\n* As a consequence of the above, there is no longer a single parse tree for an entire score, which means parsing errors are less informative and potentially more difficult to understand. We're viewing this as a worthwhile trade-off for the benefits of improved performance and better flexibility in parsing as Alda's syntax grows more complex.\n\n* Minor note that will not affect most users: `alda.parser/parse-input` no longer returns an Instaparse failure object when given invalid Alda code, but instead throws an exception with the Instaparse failure output as a message.\n\n## 0.14.0 (2015-10-20)\n\n* Custom events can now be scheduled via inline Clojure code.\n\n* Added `electric-bass` alias for `midi-electric-bass-finger`.\n\n---\n\n## 0.13.0 (2015-10-16)\n\n* Note lengths can now be optionally specified in seconds (`c2s`) or milliseconds (`c2000ms`).\n\n* [Repeats](doc/repeats.md) implemented.\n\n---\n\n## 0.12.4 (2015-10-15)\n\n* Added `:quit` to the list of commands available when you type `:help`.\n\n## 0.12.3 (2015-10-15)\n\n* There is now a help system in the Alda REPL. Enter `:help` to see all available commands, or `:help <command>` for additional information about a command.\n\n## 0.12.2 (2015-10-13)\n\n* Fix bug re: nested CRAM rhythms. (#124)\n\n## 0.12.1 (2015-10-08)\n\n* Fix minor bug in Alda REPL where ConsoleReader was trying to expand `!` characters like bash does. (#125)\n\n## 0.12.0 (2015-10-06)\n\n* [Cram expressions](doc/cram-expressions.md), a fun way to represent advanced rhythms ([crisptrutski]/[daveyarwood])\n\n---\n\n## 0.11.0 (2015-10-05)\n\n* Implemented code block literals, which don't do anything yet, but will pave the way for features like repeats.\n\n* `alda-code` function added to the `alda.lisp` namespace, for use in inline\n  Clojure code. This function takes a string of Alda code, parses and evaluates\n  it in the context of the current score. This is useful because it allows you\n  to build up a string of Alda code programmatically via Clojure, then evaluate\n  it as if it were written in the score to begin with! More info on this in the\n  docs.\n\n---\n\n## 0.10.4 (2015-10-05)\n\n* Bugfix (#120), don't allow negative note lengths.\n\n* Handy `alda script` task allows you to print the latest alda script to STDOUT, so you can pipe it to wherever you keep it on your `$PATH`, e.g. `alda script > /usr/local/bin/alda`.\n\n## 0.10.3 (2015-10-04)\n\n* Fix edge case regression caused by the 0.10.2.\n\n## 0.10.2 (2015-10-04)\n\n* Fix bug in playback `from`/`to` options where playback would always start at offset 0, instead of whenever the first note in the playback slice comes in.\n\n## 0.10.1 (2015-10-04)\n\n* Fix bug where playback hangs if no instruments are defined (#114)\n  May have also caused lock-ups in other situations also.\n\n## 0.10.0 (2015-10-03)\n\n* `from` and `to` arguments allow you to play from/to certain time markings (e.g. 1:02 for 1 minute, 2 seconds in) or markers. This works both from the command-line (`alda play --from 0:02 --to myMarker`) and in the Alda REPL (`:play from 0:02 to myMarker`). ([crisptrutski])\n\n* Simplify inline Clojure expressions -- now they're just like regular Clojure expressions. No monkey business around splitting on commas and semicolons.\n\n### Breaking changes\n\n* The `alda` script has changed in order to pave the way for better/simpler inline Clojure code evaluation. This breaks attribute-setting if you're using an `alda` script from before 0.10.0. You will need to reinstall the latest script to `/usr/local/bin` or wherever you keep it on your `$PATH`.\n\n* This breaks backwards compatibility with \"multiple attribute changes,\" i.e.:\n\n        (volume 50, tempo 100)\n\n    This will now attempt to be read as a Clojure expression `(volume 50 tempo 100)` (since commas are whitespace in Clojure), which will fail because the `volume` function expects only one argument.\n\n    To update your scores that contain this syntax, change the above to:\n\n        (do (volume 50) (tempo 100))\n\n    or just:\n\n        (volume 50) (tempo 100)\n\n---\n\n## 0.9.0 (2015-10-01)\n\n* Implemented panning via the `panning` attribute.\n\n---\n\n## 0.8.0 (2015-09-30)\n\n* Added the ability to specify a key signature via the `key-signature` attribute. Accidentals can be left off of notes if they are in the key signature. See [the docs](doc/attributes.md#key-signature) for more info on how to use key signatures. ([FragLegs]/[daveyarwood])\n\n* `=` after a note is now parsed as a natural, e.g. `b=` is a B natural. This can be used to override the key signature, as in traditional music notation.\n\n---\n\n## 0.7.1 (2015-09-26)\n\n* Fixed a couple of bugs around inline Clojure code. ([crisptrutski])\n\n## 0.7.0 (2015-09-25)\n\n### New features\n\n* Alda now supports inline Clojure code! Anything between parentheses is interpreted as a Clojure expression and evaluated within the context of the `alda.lisp` namespace.\nTo preserve backwards compatibility, attributes still work the same way -- they just happen to be function calls now -- and there is a special reader behavior that will split an S-expression into multiple S-expressions if there is a comma or semicolon, so that there is even backwards compatibility with things like this: `(volume 50, tempo! 90)` (under the hood, this is read by the Clojure compiler as `(do (volume 50) (tempo! 90))`).\n\n### Breaking changes\n\n* Alda no longer has a native `(* long comment syntax *)`. This syntax will now be interpreted as a Clojure S-expression, which will fail because it will try to interpret everything inside as Clojure values and multiply them all together :) The \"official\" way to do long comments in an Alda score now is to via Clojure's `comment` macro, or you can always just use short comments.\n\n### Other changes\n\n* Bugfix: The Alda REPL `:play` command was only resetting the current/last offset of all the instruments for playback, causing inconsistent playback with respect to other things like volume and octave. Now it resets all of the instruments' attributes to their initial values, so it is truly like they are starting over from the beginning of the score.\n\n---\n\n## 0.6.4 (2015-09-22)\n\n* Bugfix: parsing no longer fails when following a voice group with an instrument call.\n\n## 0.6.3 (2015-09-19)\n\n* Fixed another regression caused by 0.6.1 -- tying notes across barlines was no longer working because the barlines were evaluating to `nil` and throwing a wrench in duration calculation.\n\n* Added a `--tree` flag to the `alda parse` task, which prints the intermediate parse tree before being transformed to alda.lisp code.\n\n## 0.6.2 (2015-09-18)\n\n* Fixed a regression caused by 0.6.1 -- the `barline` function in `alda.lisp.events.barline` wasn't actually being loaded into `alda.lisp`. Also, add debug log that this namespace was loaded into `alda.lisp`.\n\n## 0.6.1 (2015-09-17)\n\n* Bar lines are now parsed as events (events that do nothing when evaluated) instead of comments; this is done in preparation for being able to generate visual scores.\n\n## 0.6.0 (2015-09-11)\n\n* Alda REPL `:play` command -- plays the current score from the beginning. ([crisptrutski]/[daveyarwood])\n\n---\n\n## 0.5.4 (2015-09-10)\n\n* Allow quantization > 100% for overlapping notes. ([crisptrutski])\n\n## 0.5.3 (2015-09-10)\n\nExit with error code 1 when parsing fails for `alda play` and `alda parse` tasks. ([MadcapJake])\n\n## 0.5.2 (2015-09-09)\n\n* Bugfix: add any pre-buffer time to the synchronous wait time -- keeps scores from ending prematurely when using the `alda play` task.\n* Grammar improvement: explicit `octave-set`, `octave-up` and `octave-down` tokens instead of one catch-all `octave-change` token. ([crisptrutski][crisptrutski])\n\n## 0.5.1 (2015-09-08)\n\n* Pretty-print the results of the `alda parse` task.\n\n## 0.5.0 (2015-09-07)\n\n* New Alda REPL commands:\n  * `:load` loads a score from a file.\n  * `:map` prints the current score (as a Clojure map of data).\n  * `:score` prints the current score (Alda code).\n\n---\n\n## 0.4.5 (2015-09-07)\n\n* Turn off debug logging by default. WARN is the new default debug level.\n* Debug level can be explicitly set via the `TIMBRE_LEVEL` environment variable.\n\n## 0.4.4 (2015-09-06)\n\n* Bugfix/backwards compatibility: don't use Clojure 1.7 `update` command.\n\n## 0.4.3 (2015-09-05)\n\n* Don't print the score when exiting the REPL (preparing for the `:score` REPL command which will print the score whenever you want.\n\n## 0.4.2 (2015-09-04)\n\n* `help` and `version` tasks moved to the top of help text\n\n## 0.4.1 (2015-09-04)\n\n* `alda help` command\n\n## 0.4.0 (2015-09-03)\n\n* `alda` executable script\n* version number now stored in `alda.version`\n* various other improvements/refactorings\n\n---\n\n## 0.3.0 (2015-09-01)\n\n* Long comment syntax changed from `#{ this }` to `(* this *)`.\n\n---\n\n## 0.2.1 (2015-08-31)\n\n* `alda play` task now reports parse errors.\n\n## 0.2.0 (2015-08-30)\n\n* `alda.sound/play!` now automatically determines the audio types needed for a score, making `alda.sound/set-up! <type>` optional.\n\n* various internal improvements / refactorings\n\n---\n\n## 0.1.1 (2015-08-28)\n\n* Minor bugfix, `track-volume` attribute was not being included in notes due to a typo.\n\n## 0.1.0 (2015-08-27)\n\n* \"Official\" first release of Alda. Finally deployed to clojars, after ~3 years of tinkering.\n\n[daveyarwood]: https://github.com/daveyarwood\n[crisptrutski]: https://github.com/crisptrutski\n[MadCapJake]: https://github.com/MadcapJake\n[FragLegs]: https://github.com/FragLegs\n\n"
        },
        {
          "name": "CHANGELOG-1.X.X.md",
          "type": "blob",
          "size": 86.4208984375,
          "content": "# CHANGELOG (1.X.X series)\n\nThis document describes the changes between each release of Alda in the 1.X.X\nseries.\n\nFor recent versions, see [CHANGELOG](CHANGELOG.md).\n\n## 1.5.0 (2021-06-30)\n\n* Updated the `alda update` mechanism to support updating to Alda 2.x.\n\n* Print a PSA that Alda 2 is available on startup.\n\n## 1.4.4 (2021-03-06)\n\n* Added a `-c / --client` option to the `alda version` command. When included,\n  only the Alda client version is printed, and not the server version.\n\n## 1.4.3 (2020-09-29)\n\n* Fixed the formatting of the `:help load` command (help text for the `:load`\n  command) in the REPL. There were a couple of newlines missing.\n\n* Fixed string formatting in the error message that you get when you place a\n  marker at an unclear location. (See [alda-core PR #85][alda-core-pr-85]).\n  Thanks, [dhpiggott], for the contribution!\n\n[alda-core-pr-85]: https://github.com/alda-lang/alda-core/pull/85\n\n## 1.4.2 (2020-06-15)\n\n* Fixed a bug where in some cases, a global attribute can be recorded a fraction\n  of a millisecond too late, potentially resulting in parts/voices not picking\n  up on the attribute change until it's too late.\n\n## 1.4.1 (2020-04-17)\n\n* Fixed a minor bug related to alternate endings / repetitions, where input like\n  the following would fail to parse correctly:\n\n  ```alda\n  [[c] [d]'1]*1\n  ```\n\n  The bug had to do with using event sequences in combination with the alternate\n  endings feature.\n\n## 1.4.0 (2020-03-19)\n\n* The volume change messages that end up in the MIDI sequences generated by Alda\n  (the values come from the Alda `track-volume` attribute) used to be Channel\n  Volume (7) messages, but are now Expression (11) messages.\n\n  As [truj] pointed out in\n  [alda-lang/alda-core#75](https://github.com/alda-lang/alda-core/issues/75),\n  Expression (11) is a more appropriate message to use in a MIDI sequence,\n  whereas Channel Volume (7) is intended to be used for mixing purposes during\n  playback, such as by his program, [Midica][midica].\n\n  Thanks for pointing this out, truj!\n\n## 1.3.4 (2020-03-14)\n\n* Fixed a minor bug where the parser would fail to recognize that a note at the\n  end of a part that ends with a `~` followed by a `|` is supposed to be\n  slurred.\n\n  In other words, it was treating `c4~ |` at the end of an instrument part as an\n  un-slurred note, when it's supposed to be slurred.\n\n* Fixed buggy error handling logic in the case of an unhandled exception.\n  Before, we were inadvertently hiding the exception and the message ended up\n  being \"null.\" Now the exception message gets through.\n\n## 1.3.3 (2019-08-16)\n\n* New alda.lisp function, `midi-note`, is available as an alternative to\n  `pitch` that is occasionally useful for algorithmic compositions, etc. For\n  example, instead of `(note (pitch :c :sharp))`, you can specify the MIDI note\n  number, `(note (midi-note 61))`.\n\n## 1.3.2 (2019-06-26)\n\n* To help debug [alda-client-java issue\n  #38](https://github.com/alda-lang/alda-client-java/issues/38), we will now\n  print the exit code baked into an AldaException whenever one is thrown.\n\n## 1.3.1 (2019-05-05)\n\n* Tabs can now be used as whitespace in an Alda score.\n\n* Fixed a bug where attempting to play an empty score (e.g. `c d e`, which\n  results in an empty score because there are no instruments) results in a\n  NullPointerException.\n\n  The problem was that there were no instruments, so the MIDI system wasn't\n  being set up. However, we expect the MIDI system to be set up even if there\n  are no instruments and no notes to play, because we use the MIDI Sequencer to\n  schedule notes.\n\n## 1.3.0 (2019-04-14)\n\n* New CLI command: `alda export` and REPL command: `:export`\n\n  This command exports an Alda score to another format. Currently, the only\n  supported format is MIDI. MIDI files are exported at a resolution of 128\n  pulses per quarter note (PPQ).\n\n  The score is provided in the same way as it is for `alda play` and `alda\n  parse`: by specifying either a `-f / --file`, a string of `-c / --code`, or\n  piping in the code via STDIN.\n\n  ```bash\n  alda export -f my-score.alda -F midi -o my-score.alda\n  alda export -c 'piano: c8 d e f' -o piano-notes.mid\n  echo 'piano: c8 d e f' | alda export -o piano-notes.mid\n  ```\n\n  The `:export` REPL command takes a single argument, the output filename:\n\n  ```\n  > :export /path/to/desired-filename.mid\n  ```\n\n* The `alda parse` JSON output has a couple of new keys: `tempo/values` and\n  `tempo/role`.  These values are used internally to schedule MIDI notes in a\n  way that is exportable.\n\n## 1.2.0 (2019-01-19)\n\n* New CLI command: `alda instruments` and REPL command: `:instruments`\n\n  This new command lists all available instruments, which is currently the 128\n  instruments in the General MIDI spec, as well as `midi-percussion`.\n\n  NB: Alda does have a number of aliases for these instruments, e.g. `piano` is\n  recognized as `midi-acoustic-grand-piano`. These aliases are not included in\n  the list.\n\n* Made adjustments to the command that prints for Windows users when running\n  `alda update` to update the Alda client.\n\n  For details, see issue\n  [#35](https://github.com/alda-lang/alda-client-java/issues/35).\n\n## 1.1.0 (2018-12-01)\n\nNew feature alert!\n\nAn [\"alternate\nending\"](http://dictionary.onmusic.org/terms/4798-second_ending_735)-like\nfeature has been added to the Alda language. The syntax looks like this:\n\n```alda\npiano:\n  [ c8 d e f\n    [g f e4]'1-3\n    [g a b > c4.]'4\n  ]*4\n```\n\nThis allows you to have repeated phrases that can differ on each iteration. In\nthe example above, each repeat starts with `c8 d e f`; on times 1 through 3\nthrough the repeated phrase, the phrase ends with `g f e4`, whereas on the 4th\ntime through, the phrase ends with `g a b > c4.`.\n\nNote that these \"adjustments\" can occur anywhere within the repeated phrase, not\nnecessarily at the end, making this feature of Alda more flexible than the\n\"alternate endings\" notation seen in sheet music. To illustrate this, here is\nanother example where the phrase has what you might describe as an \"alternate\nbeginning\" and an \"alternate middle\":\n\n```alda\npiano:\n  [ [c8 d e]'1,3 [e8 d c]'2,4\n    f\n    [g f e]'1-3 [g a b]'4\n    > c <\n  ]*4\n```\n\nThanks to [elyisgreat] for the initial idea/discussion and [pzxwang] for\nimplementing the feature! :balloon:\n\n## 1.0.1 (2018-11-24)\n\nWhoops! It turns out that the mechanism we had in place in the Alda client for\ndetermining whether or not your version of Alda is up-to-date had a flaw that\nprevents one from updating from Alda 1.0.0-rcXX to Alda 1.0.0!\n\nThat's fixed in this version. Also, your client will be able to update to the\nlatest version now because now the latest version is 1.0.1 instead of 1.0.0. :)\n\n## 1.0.0 (2018-11-24)\n\nThis release is functionally equivalent to the previous release, 1.0.0-rc85.\nAfter 3 years of working on a series of 1.0.0 release candidates, the focus has\nshifted toward re-architecting Alda in a way that will allow us to make some\nsubstantial improvements. The result of this restructuring will become a new\nmajor version of Alda, version 2.0.0.\n\nThe work has only just started on Alda 2.0.0, and it will probably be a long\nwhile before the initial release in the 2.0.0 series. We will continue to\nmaintain the 1.0.0 series in the meantime. As such, it feels like now is as good\na time as any to release Alda 1.0.0!\n\n## 1.0.0-rc85 (2018-10-28)\n\n* Made internal improvements to the Alda sound engine. Specifically, the sound\n  engine now uses a Java MIDI Sequencer to schedule and play MIDI notes, whereas\n  before we were using a third party library called JSyn.\n\n  You shouldn't notice any difference in note scheduling, but if you do notice\n  any problems, please file an issue in the\n  [alda-sound-engine-clj][sound-engine] repo so that we can address them!\n\n* The `schedule` function has been removed from alda.lisp. Scheduled functions\n  haven't been very useful since we moved to a client/server architecture, and\n  we haven't implemented a way for them to work with the new changes to the\n  sound engine. So, we are removing the feature for now. We may re-implement the\n  scheduled functions feature in the future, in a way that works with both the\n  client/server architecture and the current implementation of the sound engine.\n\n  For more context on this, see\n  [alda-core#65](https://github.com/alda-lang/alda-core/pull/65).\n\n## 1.0.0-rc84 (2018-08-25)\n\n* Handled an edge case re: what to display when playing extremely short scores.\n\n* Improved the help text descriptions of the `:info` and `:save` REPL commands.\n\n## 1.0.0-rc83 (2018-08-25)\n\n* Implemented a `--no-color` CLI option, which suppresses ANSI color codes.\n\n## 1.0.0-rc82 (2018-07-01)\n\n* Upgraded JLine dependency to 2.14.6 to fix the platform-specific \"Failed to\n  construct terminal\" part of [this\n  issue](https://github.com/alda-lang/alda-sound-engine-clj/issues/13).\n\n## 1.0.0-rc81 (2018-03-08)\n\n* Added an `:info` command to the Alda REPL. It prints some user-readable\n  information about the current score, for example:\n\n  ```\n  p> :info\n  Instruments: piano-sFz6g\n  Current instruments: piano-sFz6g\n  Events: 6\n  Markers: start, one, two, three\n  ```\n\n  Thanks, [TBuc], for implementing this new feature!\n\n## 1.0.0-rc80 (2018-02-28)\n\n* Fixed [a minor bug](https://github.com/alda-lang/alda-core/issues/64) in the\n  parser: there was an edge case where a \"get variable\" event wasn't being\n  disambiguated from its earlier, less-specific \"name\" form if the \"get\n  variable\" event happened to be the last thing in the definition of another\n  variable.\n\n  Thanks to [elyisgreat] for spotting the bug!\n\n## 1.0.0-rc79 (2018-02-16)\n\n* Fixed a minor bug in the parser that is only evident when using the `alda\n  parse` command. The bug was that in certain situations where the code is\n  syntactically valid, but there is an error at score build time (e.g. `piano:\n  undefined` where a variable is referenced that has not been defined), the\n  parser was returning nil instead of throwing an error.\n\n## 1.0.0-rc78 (2018-02-05)\n\n* Fixed [a bug](https://github.com/alda-lang/alda-core/issues/55) where the\n  parser did not correctly parse nested events in some situations, for example a\n  set-variable expression containing a CRAM expression containing a chord.\n\n  Thanks to [elyisgreat] for reporting this issue!\n\n## 1.0.0-rc77 (2018-02-03)\n\n* On Windows, Alda processes would show up in Task Manager as \"A music\n  programming language for musicians\" due to confusion on my part (as a\n  non-Windows user) about the properties of a Windows executable. Now they ought\n  to show up as \"Alda\" so you can easily identify them.\n\n* Fixed a bug in the Alda REPL where the `:play from` and `to` options were\n  being completely ignored.\n\n* Fixed a separate bug where the `--from` command-line option to `alda play` was\n  being ignored.\n\n* Fixed issues where `!` is not escaped properly in the Alda REPL.\n\n  This is something that had been fixed previously in the Clojure version of the\n  Alda REPL, but not ported over when we rewrote the REPL as part of the Java\n  client.\n\n  For context, see [this issue](https://github.com/alda-lang/alda/issues/125).\n\n* Enabled persistent history for the Alda REPL. For example, if you start a REPL\n  session and enter a bunch of lines of input, then close the session and start\n  a new one, you can access the lines you typed in the previous session by\n  pressing the Up arrow.\n\n  History is stored in a file at `~/.alda-repl-history`.\n\n## 1.0.0-rc76 (2017-10-30)\n\n* Fixed a bug in the way the program path is determined when a server starts\n  workers. (That code lives in alda.util, in this repo.) The bug was showing\n  itself when the path to the `alda` (or `alda.exe`) executable contained spaces\n  or other special characters. This was causing the worker processes not to\n  start in environments where the path to `alda` (or `alda.exe`) contains\n  spaces.\n\n  Thanks to [Hemaolle] for the detective work and PR to fix this issue!\n\n## 1.0.0-rc75 (2017-10-17)\n\n* Added a `reference-pitch` (alias: `tuning-constant`) attribute, which will\n  have an affect on the pitch of each note in Hz. This number is the desired\n  pitch of A4 (the note A in the 4th octave). The default value is 440 Hz.\n\n  However, please note that this value is not currently used. We are still\n  figuring out how to tune MIDI notes in Java -- it is more difficult that one\n  might expect. If you're interested in helping with this, please let us know!\n\n* Added a `transposition` (alias: `transpose`) attribute, which moves all notes\n  (either per-instrument, or globally, depending on whether you are using\n  `transpose` or `transpose!`) up or down by a desired number of semitones.\n  Positive numbers represent increasing semitones, and negative numbers\n  represent decreasing semitones.\n\n  This attribute can be used to make writing parts for [transposing\n  instruments](https://en.wikipedia.org/wiki/Transposing_instrument) more\n  convenient. To see `transpose` in use, see [this example\n  score](https://github.com/alda-lang/alda-core/blob/master/examples/jimenez-divertimento.alda),\n  a transcription of a saxophone quartet by Juan Santiago Jiménez.\n\n  Saxophones are transposing instruments; soprano and tenor saxophones are\n  considered \"Bb\" instruments, and alto and baritone saxophones are considered\n  \"Eb\" instruments.  This means that an instrument part written for a baritone\n  saxophone, for example, might appear to be written in C major, but when read\n  and performed by a baritone saxophonist, it will sound like Eb major, the\n  intended key.\n\nThanks, [pzxwang], for implementing these new features!\n\n## 1.0.0-rc74 (2017-10-14)\n\n* Minor improvement to the new `tempo` function overload and `metric-modulation`\n  function: the supplied note-length can be a string representing multiple note\n  lengths tied together, e.g.:\n\n  ```alda\n  (tempo \"4~16\" 120)\n  ```\n\n  Thanks to [elyisgreat] for the issue and [pzxwang] for the pull request!\n\n* Fixed a strange issue in the client where, after updating Alda successfully, a\n  `java.lang.NoClassDefFoundError` would be printed.\n\n## 1.0.0-rc73 (2017-10-12)\n\n* Improved the timing of waiting for the server to stop before starting a new\n  one when running the `alda downup` command.\n\n  Before, this was just guesswork, and often times, the server wouldn't be down\n  yet, so when a new server tried to start, it would fail with the message:\n\n  ```\n  There is already a server trying to start on this port. Please be patient -- this can take a while.\n  ```\n\n  Now, we're actually checking to see when the server stops responding, and\n  waiting until that's the case before we try to start a new server.\n\n  Unfortunately, there is still a bit of guesswork here because the message\n  above is triggered by (assuming you're running OS X or Linux) a check to see\n  if there is an Alda server process in your OS that was started on the same\n  port you are trying to use. There is still a brief window of time between when\n  the server stops responding to requests and when the process has terminated.\n\n  As such, I think there is room for improvement in the future, and you might\n  still see the message above from time to time. But, with this release, things\n  should at least be better than they were before.\n\n* Expanded the scope of the `-t` / `--timeout` option to include how long (in\n  seconds) the Alda command-line client should wait, after running `alda down`\n  or `alda downup`, for confirmation that the server has gone down. The default\n  value is still 30 seconds, which should be more than enough time on most\n  systems.\n\n## 1.0.0-rc72 (2017-10-09)\n\n* Added an overload of `tempo` that allows you to specify the tempo in terms of\n  a note value other than (the default) a quarter note.\n\n  For example, \"♩. = 150\" can be expressed as:\n\n  ```alda\n  (tempo! \"4.\" 150)\n  ```\n\n  (NB: the note value can be either a number or a string containing a\n  number followed by dots.)\n\n  It is still OK to leave out the note value; the default behavior is to set the\n  tempo relative to a quarter note. \"♩ = 60\" can still be expressed as:\n\n  ```alda\n  (tempo! 60)\n  ```\n\n* Added a new function, `metric-modulation`, which sets the tempo based on a\n  [metric modulation](https://en.wikipedia.org/wiki/Metric_modulation), i.e.\n  shifting from one meter to another.\n\n  Say, for example, that you're writing a score that starts in 9/8 -- three\n  beats per measure, where each beat is a dotted quarter note.\n\n  At a certain point in the piece, you want to transition into a 3/2 section --\n  still three beats per measure, but now each beat is a half note. You want the\n  \"pulse\" to stay the same, but now each beat is subdivided into 4 half notes\n  instead of 3. How do you do it?\n\n  In traditional notation, it is common to see annotations like \"♩. = 𝅗𝅥 \" at the\n  moment in the score where the time signature changes. This signifies that at\n  that moment, the pulse stays the same, but the amount of time that used to\n  represent a dotted quarter note now represents a half note. When the orchestra\n  arrives at this point in the score, the conductor continues to conduct at the\n  same \"speed,\" but each musician mentally adjusts his/her perception of how to\n  read his/her part, mentally subdividing each beat into 4 eighth notes instead\n  of 3 eighth notes.\n\n  In Alda, you can now express a metric modulation like \"♩. = 𝅗𝅥 \" as:\n\n  ```alda\n  (metric-modulation! \"4.\" 2)\n  ```\n\nThanks, [pzxwang], for the PR to add these new features!\n\n## 1.0.0-rc71 (2017-10-07)\n\n* Added an `--output` (`-o`) option to the `alda parse` command that allows you\n  to specify what should be output. Valid values are:\n\n  * `data` (default) is the map of score data that includes instruments, events,\n    etc.\n\n  * `events` is the sequence of events parsed from the score.\n\n  For example (using [`jq`][jq] to pretty-print the JSON for readability):\n\n  ```\n  # score data output\n  $ alda parse -c 'piano: c d e' | jq .\n\n  {\n    \"chord-mode\": false,\n    \"current-instruments\": [\n      \"piano-cnLzW\"\n    ],\n    \"events\": [\n      {\n        \"offset\": 500,\n        \"instrument\": \"piano-cnLzW\",\n        \"volume\": 1,\n        \"track-volume\": 0.7874015748031497,\n        \"panning\": 0.5,\n        \"midi-note\": 62,\n        \"pitch\": 293.6647679174076,\n        \"duration\": 450,\n        \"voice\": null\n      },\n      {\n        \"offset\": 0,\n        \"instrument\": \"piano-cnLzW\",\n        \"volume\": 1,\n        \"track-volume\": 0.7874015748031497,\n        \"panning\": 0.5,\n        \"midi-note\": 60,\n        \"pitch\": 261.6255653005986,\n        \"duration\": 450,\n        \"voice\": null\n      },\n      {\n        \"offset\": 1000,\n        \"instrument\": \"piano-cnLzW\",\n        \"volume\": 1,\n        \"track-volume\": 0.7874015748031497,\n        \"panning\": 0.5,\n        \"midi-note\": 64,\n        \"pitch\": 329.6275569128699,\n        \"duration\": 450,\n        \"voice\": null\n      }\n    ],\n    \"beats-tally\": null,\n    \"instruments\": {\n      \"piano-cnLzW\": {\n        \"octave\": 4,\n        \"current-offset\": {\n          \"offset\": 1500\n        },\n        \"key-signature\": {},\n        \"config\": {\n          \"type\": \"midi\",\n          \"patch\": 1\n        },\n        \"duration\": {\n          \"beats\": 1,\n          \"ms\": null\n        },\n        \"min-duration\": null,\n        \"volume\": 1,\n        \"last-offset\": {\n          \"offset\": 1000\n        },\n        \"id\": \"piano-cnLzW\",\n        \"quantization\": 0.9,\n        \"duration-inside-cram\": null,\n        \"tempo\": 120,\n        \"panning\": 0.5,\n        \"current-marker\": \"start\",\n        \"time-scaling\": 1,\n        \"stock\": \"midi-acoustic-grand-piano\",\n        \"track-volume\": 0.7874015748031497\n      }\n    },\n    \"markers\": {\n      \"start\": 0\n    },\n    \"cram-level\": 0,\n    \"global-attributes\": {},\n    \"nicknames\": {},\n    \"beats-tally-default\": null\n  }\n  ```\n\n  ```\n  # events output\n  $ alda parse -c 'piano: c d e' -o events | jq .\n\n  [\n    {\n      \"event-type\": \"part\",\n      \"instrument-call\": {\n        \"names\": [\n          \"piano\"\n        ]\n      },\n      \"events\": null\n    },\n    {\n      \"event-type\": \"note\",\n      \"letter\": \"c\",\n      \"accidentals\": [],\n      \"beats\": null,\n      \"ms\": null,\n      \"slur?\": null\n    },\n    {\n      \"event-type\": \"note\",\n      \"letter\": \"d\",\n      \"accidentals\": [],\n      \"beats\": null,\n      \"ms\": null,\n      \"slur?\": null\n    },\n    {\n      \"event-type\": \"note\",\n      \"letter\": \"e\",\n      \"accidentals\": [],\n      \"beats\": null,\n      \"ms\": null,\n      \"slur?\": null\n    }\n  ]\n  ```\n\nThe new \"events\" output mode can be useful for debugging Alda code that isn't\nbehaving as expected.\n\n## 1.0.0-rc70 (2017-10-05)\n\n* A behind-the-scenes improvement:\n\n  Increased the duration that a worker will wait if it hasn't heard from the server in a while, before it times out and shuts down.\n\n  This duration used to be 10 seconds, and is now 30 seconds.\n\n  This should help in environments (slow processor, low resources, poor\n  networking situation, etc.) where it takes the server longer than 10 seconds\n  before it sends a worker its first heartbeat.\n\n  The trade-off is that stale worker processes will hang around for 30 seconds\n  instead of 10 seconds, which hopefully won't be much of an inconvenience.\n\n## 1.0.0-rc69 (2017-10-02)\n\n* Added the following modes:\n\n  * `:ionian`\n  * `:dorian`\n  * `:phrygian`\n  * `:lydian`\n  * `:mixolydian`\n  * `:aeolian`\n  * `:locrian`\n\n  These can be used as an alternative to `:major` and `:minor` when specifying a\n  key signature.\n\n  For example:\n\n  ```alda\n  piano:\n    (key-sig [:d :locrian])\n    d8 e f g a b > c d8~1\n  ```\n\n  Thanks, [iggar], for this contribution!\n\n## 1.0.0-rc68 (2017-09-29)\n\n* Fixed a parser bug where a rest `r` followed by a newline inside of a variable\n  definition would not be considered part of the variable definition.\n\n  Thanks, [elyisgreat], for reporting this issue!\n\n## 1.0.0-rc67 (2017-09-28)\n\nThanks, [pzxwang] for contributing the changes in this release [this PR](https://github.com/alda-lang/alda-core/pull/50)!\n\n* Non-integer decimal note lengths are now accepted. For example, `c0.5` (or a\n  double whole note, in Western classical notation) is twice the length of `c1`\n  (a whole note).\n\n* Added a convenient `set-note-length` function to alda.lisp.\n\n  This is an alternative to `set-duration`, which, somewhat unintuitively, sets\n  the current duration to its argument as a number of beats.\n\n  To set the note length to a quarter note (1 beat), for example, you can now\n  use either `(set-duration 1)` or `(set-note-length 4)`.\n\n## 1.0.0-rc66 (2017-07-28)\n\n* Added a `--history-file` (`-I`) option. It's like `--history`, except that it\n  takes the name of a file containing Alda code to be used as history.\n\n## 1.0.0-rc65 (2017-07-16)\n\n* Bugfix: reversed logic in the `alda update` command so that the Windows update\n  logic happens if you HAVE Windows, not if you don't have it. Whoops.\n\n## 1.0.0-rc64 (2017-07-16)\n\n* Fixed a bug where the `--history` option to the `alda play` command was being\n  ignored if the `--file` option was used or code was being piped into STDIN.\n\n## 1.0.0-rc63 (2017-07-16)\n\n* Prior to this release, the client would almost always exit with an exit code\n  of 0, even if there was an error of some kind.\n\n  Starting with this release, Alda has a handful of meaningful [exit codes](https://github.com/alda-lang/alda-client-java/blob/master/src/alda/error/ExitCode.java). Crucially, there is now a distinction between 0 (success) and non-0 (error/failure).\n\n* Minor improvements to a handful of error messages.\n\n* Running `alda update` has been known not to work on Windows because of\n  limitations of the OS: Windows apparently will not let you download a new\n  version of a program to replace the program while it is running.\n\n  As a workaround, if your OS is Windows and you run `alda update`, we now print\n  detailed instructions with a command to run in your terminal that will update\n  alda.exe. (Thanks, [jgkamat]!)\n\n## 1.0.0-rc61 (2017-06-22)\n\n* Fixed a bug where running `alda stop` (or `:stop` in the Alda REPL) would not\n  stop sound on every channel.\n\n* Fixed a bug where if an error occurs while trying to download a new version of\n  Alda, the client would incorrectly report that the update was successful.\n\n* Fixed a bug where, when reading Alda code from STDIN, newlines were omitted.\n  This could break scores in some cases, e.g. scores containing single-line\n  variable definitions.\n\n* Minor improvements to error handling. In some cases, parse errors were being\n  swallowed.\n\n## 1.0.0-rc60 (2017-06-11)\n\nNow, at long last, you can stop playback without restarting the server!\n\nSimply run `alda stop` at the command line or `:stop` in the Alda REPL.\n\n\"Pause / resume\" functionality will be coming in the future, as it's tricky to\nimplement. For now, running `:play` after you run `:stop` will start playback\nfrom the beginning of the score again.\n\n## 1.0.0-rc59 (2017-06-05)\n\nThis release adds a bunch of features and improvements to the new, faster Alda\nREPL. Thanks to [jgkamat] for helping me implement all this stuff!\n\n* Added 6 new REPL commands, each equivalent to its command-line counterpart:\n\n  * `:status` - display the status of the server\n  * `:list` - list running Alda processes\n  * `:version` - display Alda client + server versions\n  * `:down` - stop the server\n  * `:up` - start the server\n  * `:downup` - restart the server\n\n* When starting the Alda REPL, we now check to see if there is an Alda server\n  running. If there is not, then we offer to start one for you.\n\n  We also offer to start the server *after* the REPL has started, in the event\n  that the server fails to respond, e.g. if it gets shut down from outside of\n  the REPL.\n\n* Added a confirmation prompt when running the `:new`, `:load` or `:quit`\n  commands in the REPL. This is to avoid accidentally losing unsaved changes to\n  your score.\n\n* Fixed miscellaneous bugs in the REPL related to sending requests to the server\n  and receiving responses. This behavior is more reliable now.\n\n* Fixed a bug where if something goes wrong when trying to start a server, the\n  program does not exit, but instead waits forever for workers to start. Now,\n  the program prints the error and exits.\n\n## 1.0.0-rc58 (2017-05-31)\n\n* Fixed [a bug](https://github.com/alda-lang/alda-core/issues/41), where `r`\n  followed by e.g. `]` would trigger a parser error.\n\n## 1.0.0-rc57 (2017-05-30)\n\nThis is a big release, packed with exciting features. Things are rapidly\nimproving, and we're getting ever closer to a 1.0.0 release!\n\n### New Features\n\n* The Alda REPL has been rewritten from the ground-up as a client-side\n  application that talks to the Alda server.\n\n  Prior to this release, the Alda REPL was a [standalone application written in\n  Clojure](https://github.com/alda-lang/alda-repl-clj). Unfortunately, the\n  Clojure runtime has an unpleasantly long start-up time, making it not\n  well-suited for command-line applications.\n\n  We've solved this problem in Alda by architecting it as a client/server\n  system. The server is a Clojure process that runs in the background and does\n  all of the hard work of parsing, building, and playing musical scores written\n  in the Alda language. Meanwhile, the Alda client is a lightweight Java program\n  that is quick to start. This is nothing new; Alda has had this architecture\n  since December 2015. It is what allows you to play an Alda score almost\n  immediately from the command-line. One goal of Alda is to be snappy -- to let\n  you type some code and hear it within seconds, allowing you to compose music\n  spontaneously in your text editor.\n\n  Until now, though, the Alda REPL has been cumbersome to start because it did\n  not participate in the client/server system. After running `alda repl`, you\n  would have to wait a good while (just long enough to be annoying) as the\n  Clojure runtime finished loading and the program set up the audio environment.\n  This felt less than snappy, and snappiness is what we strive for in a\n  command-line application like Alda.\n\n  The new REPL is a faithful reproduction of the old one, but rewritten as a\n  Java frontend to the Clojure backend. The REPL is quick to start, being a\n  simple Java program, and provided that you have an Alda server running in the\n  background (via the `alda up` command), you can start typing Alda code right\n  away and hearing each line played back immediately.\n\n  If you aren't already in the habit of having an Alda server running in the\n  background, now might be a good time to start. With our new REPL\n  implementation and its fast startup time, it is refreshing to be able to type\n  `alda repl` anytime you want and immediately start writing music in Alda in an\n  interactive environment.\n\n  The new Alda REPL is, admittedly, still a little bit rough around the edges.\n  Please bear with us! We are working to make the experience more comfortable as\n  rapidly as we can. As always, feel free to [join us in Slack][slack] and let\n  us know what you think of the new REPL and how we can improve it.\n\n* Alda's parser has also been rewritten from the ground up with a special focus\n  on performance and the ability to parse scores in an asynchronous, streaming\n  fashion.\n\n  You should already notice a big improvement in the time it takes to parse\n  larger scores, and thanks to the ability to parse scores asynchronously, we\n  may be able to speed up parse times even more in the future.\n\n  Because this is a complete rewrite of the parser, it's likely that there are a\n  number of subtle bugs or, at least, things that work differently than before.\n  If you encounter any problems, please let us know so that we can fix them!\n\n* The `alda play` command now takes an optional `--history` option, which can be\n  used to provide a string of Alda code to be used as context for the string or\n  file that you are currently playing.\n\n  For example:\n\n  ```bash\n  $ alda play --history \"trumpet: (tempo 200) c8 d e\" --code \"f g a b > c\"\n  ```\n\n  The command above will result in the notes f g a b > c being played as eighth notes, on a trumpet, at 200 bpm.\n\n  This feature was developed out of necessity for the new Alda REPL, and it may\n  not be immediately useful for most Alda composers, but we are exposing as a\n  convenience for anyone who is interested in writing an Alda editor plugin or\n  another type of frontend for Alda.\n\n### Bug Fixes\n\n* Rewriting the parser also enabled us to fix [longstanding\n  issues](https://github.com/alda-lang/alda-core/issues/12) where if a score\n  failed to parse, the error messages would sometimes be misleading and/or\n  include incorrect line and column numbers.\n\n  Error messages are now easier to understand, and they include correct line and\n  column numbers that point you to the exact location in your score where there\n  was a syntax error or other issue.\n\n* You are now less likely to run into a weird bug that can happen when you have\n  an Alda server running and you suspend your system (e.g. close the laptop lid)\n  and then resume it. The bug causes MIDI playback to be delayed by a number of\n  seconds; [this is a bug in\n  Java](https://bugs.openjdk.java.net/browse/JDK-8164300), which makes it\n  difficult for us to fix it at the source.\n\n  While it is still possible to encounter this strange behavior, we now have a\n  good workaround where the server is regularly replacing the processes that\n  perform the scores with fresh, new ones. It is now the case that if your\n  computer has been out of suspend mode for 20 minutes or more, you should not\n  experience the delayed playback bug.\n\n### Breaking Changes\n\n* Because of the parser rewrite, we do not currently have a way to generate\n  `alda.lisp` code. This used to be the default behavior of the `alda parse`\n  command, which now returns the score JSON by default.\n\n  Generating `alda.lisp` code is now a deprecated feature.\n\n* The Alda client now requires Java 8 or higher. Chances are, if you have a\n  fairly recent operating system, you already have a new enough version of Java.\n  You can verify your version of Java by running `java -version`. If your\n  version of Java is earlier than 1.8 (i.e. Java 7 or below), you can [download\n  the latest version of Java](https://www.java.com/en/download).\n\n## 1.0.0-rc56 (2017-01-14)\n\n* Fixed 2 bugs re: `alda list` output:\n  * It didn't work correctly on non-OS X systems like Ubuntu due to differences in the `ps` command across Unix distributions.\n  * Fixed buggy output when running multiple Alda servers ([#4](https://github.com/alda-lang/alda-client-java/issues/4)).\n\nMajor thanks to [tobiasriedling] for both fixes!\n\n## 1.0.0-rc55 (2016-12-07)\n\n* Fixed a regression introduced in 1.0.0-rc53. There was a bug causing worker processes not to cycle after suspending the process, e.g. closing and later re-opening your laptop's lid.\n\n## 1.0.0-rc54 (2016-12-05)\n\n* Fixed [alda-lang/alda-core#27](https://github.com/alda-lang/alda-core/issues/27), a bug where, when using note durations specified in seconds/milliseconds, the subsequent \"default\" note duration was not being set.\n\n  Thanks to [damiendevienne] for reporting this bug!\n\n## 1.0.0-rc53 (2016-12-03)\n\n* Refactored server code to use [ezzmq](https://github.com/daveyarwood/ezzmq) instead of JeroMQ. The server should still function exactly the same.\n\n* Minor bugfix in server shutdown code: in some cases if the timing was just right, a java.util.concurrent.RejectedExecutionException was being thrown, resulting in the server not shutting down cleanly.\n\n## 1.0.0-rc52 (2016-11-20)\n\n### Minor breaking change\n\n* Removed the `voices` (voice group) event, as [bbqbaron] and I figured out that\n  it's not necessary. It turns out that each `voice` event manages its voice\n  group implicitly. For more discussion, see\n  [alda-lang/alda#286](https://github.com/alda-lang/alda/pull/286).\n\n  This change should not be noticeable, unless you have scores with inline\n  Clojure code that use the `voices` event. Now you can simplify code like that\n  by just writing `voice` events, without having to group them inside of a\n  `voices` event.\n\n## 1.0.0-rc51 (2016-11-19)\n\nThis release is technically no different than 1.0.0-rc50, but it's the first release under the new, multi-repository organization of the Alda project. See [#186](https://github.com/alda-lang/alda/issues/186) for more context.\n\nThis release was built using the new system where each Alda \"component\" (e.g. the core library, the client, the server, etc.) is an isolated dependency. This is a more organized system that will make life easier for the developers working on Alda. The end user should not notice any difference.\n\nAs a bonus, this new system of organization is a step towards allowing developers to write their own custom Alda components, swap them with the existing ones, and make custom builds.\n\n## 1.0.0-rc50 (2016-11-16)\n\n* Fixed [#255](https://github.com/alda-lang/alda/issues/255). Voices can now be used inside of event sequences and variable definitions.\n\n  Thanks, [bbqbaron], for your work on fixing this issue!\n\n## 1.0.0-rc49 (2016-11-12)\n\n* Fixed a small bug where sometimes, using an undefined variable within a variable definition would not result in an error.\n\n## 1.0.0-rc48 (2016-11-12)\n\n* Fixed [#242](https://github.com/alda-lang/alda/issues/242). In rare cases, error messages were sometimes hidden due to the way we were formatting them inside of the function that displays the error message.\n\n  Thanks to [bbqbaron] for the PR to fix this issue!\n\n## 1.0.0-rc47 (2016-11-09)\n\n* Fixed [#284](https://github.com/alda-lang/alda/issues/284), bugs related to comment spacing. Thanks [elyisgreat] for reporting!\n\n## 1.0.0-rc46 (2016-11-02)\n\nThis release includes improvements to the system that assigns instrument parts and groups in an Alda score ([#249](https://github.com/alda-lang/alda/issues/249)). Thanks, [elyisgreat] and [jimcheetham], for helping to talk me through all the different scenarios!\n\n[The documentation](doc/scores-and-parts.md) has also been updated and improved. We hope this will make the rules of instrument part and group assignment easier to understand and remember from here on out.\n\n* Errors are now thrown in the following scenarios, which prior to this release would lead to undefined or confusing behavior:\n\n  * Calls like `foo \"bar\"` where `foo` is a previously defined alias (e.g.\n    `piano \"foo\"`), not a stock instrument.\n\n  * Mixing and matching unnamed vs. named instances of the same instrument in a score.\n\n  * Mixing and matching stock instruments and named instances in the same group. Groups are now explicitly only for grouping named (existing) instances or creating new ones.\n\n  There is a [list of simple rules with examples](doc/scores-and-parts.md#how-instances-are-assigned) in the documentation, which I think is the best way to understand valid vs. invalid usage of parts in an Alda score.\n\n  For the curious, there is also a [comprehensive explanation](doc/instance-and-group-assignment.md) of what happens in different scenarios.\n\n* There is a new dot (`.`) operator for accessing members of groups:\n\n  ```alda\n  violin/viola/cello \"strings\": c8 d e f\n  strings.cello: g1\n  ```\n\n## 1.0.0-rc45 (2016-10-15)\n\nThis release includes a handful of behind-the-scenes improvements that will make it easier for us to develop Alda.\n\n* The output of `alda status` now includes the server's backend port number. This is the port that the server uses to communicate with its worker processes.\n\n* Added automated integration tests. These tests can be run alone with `boot test --integration`, or along with the existing unit tests with `boot test --all`.\n\n* Both the `alda.server` and `alda.worker` namespaces now include a `*no-system-exit*` dynamic var that is `false` by default, but can be bound to `true` in situations where you're running a server or worker within a Clojure program and you don't necessarily want the entire process to exit when the server or worker does. This makes it possible to run the suite of integration tests without being interrupted by a `System.exit` from a server or worker thread.\n\n* The server now recognizes a new message, `DONE`, that can be sent by a worker process to indicate that it is done working and should not be considered available. When the server receives a `DONE` message from a worker, it removes that worker from its queue, thus ensuring that it will not use that worker to handle any subsequent client requests.\n\n  This message is not currently used during the lifetime of a \"production\" Alda worker process, but it ended up being useful for the integration test suite.\n\n## 1.0.0-rc44 (2016-10-08)\n\n* The `-v` / `--verbose` option will now provide debug output when starting a `server` or `worker` process in the foreground:\n\n  ```\n  $ alda -v -p 27714 server\n  16-Oct-08 16:43:24 skeggox.local INFO [alda.server] - Binding frontend socket on port 27714...\n  16-Oct-08 16:43:24 skeggox.local INFO [alda.server] - Binding backend socket on port 56885...\n  16-Oct-08 16:43:24 skeggox.local INFO [alda.server] - Spawning 2 workers...\n  16-Oct-08 16:43:45 skeggox.local DEBUG [alda.server] - Receiving message from frontend...\n  16-Oct-08 16:43:45 skeggox.local DEBUG [alda.server] - Forwarding message to worker 00B757D1FC...\n  16-Oct-08 16:43:45 skeggox.local DEBUG [alda.server] - Forwarding backend response to frontend...\n  ```\n\n  ```\n  $ alda -v -p 56885 worker\n  Oct 08, 2016 4:45:40 PM com.jsyn.engine.SynthesisEngine start\n  INFO: Pure Java JSyn from www.softsynth.com, rate = 44100, RT, V16.7.3 (build 457, 2014-12-25)\n  16-Oct-08 16:45:41 skeggox.local INFO [alda.worker] - Worker reporting for duty!\n  16-Oct-08 16:45:41 skeggox.local INFO [alda.worker] - Connecting to socket on port 50292...\n  16-Oct-08 16:45:41 skeggox.local INFO [alda.worker] - Sending READY signal.\n  16-Oct-08 16:45:42 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:43 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:44 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:45 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:46 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:46 skeggox.local DEBUG [alda.worker] - Processing message...\n  16-Oct-08 16:45:46 skeggox.local ERROR [alda.worker] - java.lang.Exception: Parse error at line 1, column 19:\n  (throw (Exception.\n                    ^\n  Expected one of:\n  \")\"\n  \"(\"\n  \"\\\\\"\n  \"\\\"\"\n#\".|\\n|\\r\"\n\n                   alda.Main.main        Main.java: 230\n             alda.AldaWorker.upFg  AldaWorker.java:  12\n          alda.Util.callClojureFn        Util.java: 263\n                              ...\n        alda.worker/start-worker!       worker.clj: 136\n        alda.worker/start-worker!       worker.clj: 151\n     alda.worker/start-worker!/fn       worker.clj: 188\n  alda.worker/start-worker!/fn/fn       worker.clj: 191\n                              ...\n          alda.worker/eval8377/fn       worker.clj:  95\n    alda.worker/handle-code-parse       worker.clj:  72\n          alda.parser/parse-input       parser.clj: 284\n      alda.parser/remove-comments       parser.clj: 109\n    alda.parser/check-for-failure       parser.clj:  54\n  java.lang.Exception: Parse error at line 1, column 19:\n                       (throw (Exception.\n                                         ^\n                       Expected one of:\n                       \")\"\n                       \"(\"\n                       \"\\\\\"\n                       \"\\\"\"\n                       #\".|\\n|\\r\"\n\n\n  16-Oct-08 16:45:46 skeggox.local DEBUG [alda.worker] - Sending response...\n  16-Oct-08 16:45:46 skeggox.local DEBUG [alda.worker] - Response sent.\n  16-Oct-08 16:45:47 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  16-Oct-08 16:45:48 skeggox.local DEBUG [alda.worker] - Got HEARTBEAT from server.\n  ```\n\n## 1.0.0-rc43 (2016-09-25)\n\n* Tuned JVM performance to use less unnecessary memory and CPU. See issue [#269](https://github.com/alda-lang/alda/issues/269) for more context, but the TL;DR version is that prior to this release, the Alda server and worker processes were each provisioned with more memory and CPU settings than they needed, causing them to wastefully use up memory/CPU resources that your computer could otherwise be using.\n\n  Big thanks to [feldoh] for this contribution!\n\n## 1.0.0-rc42 (2016-09-24)\n\n* Implemented an internal \"worker status\" system so that the Alda client has better visibility into the status of the worker process handling a request to play a score. This only affects the `alda play` command.\n\n  `alda play` requests that take longer than 3000 milliseconds will no longer time out and result in an incorrect error about the server being \"down.\" The way it works now is more asynchronous:\n\n  - The client makes a request to play a large score.\n  - A worker gets the request and responds immediately. The server includes a note about which worker it is so that the client can follow up with the worker for status.\n  - The client repeatedly sends requests for the status of that worker, and the worker asynchronously responds to let the client know if it is parsing, playing, done, or if there was some error.\n  - As the client receives updates, it prints them to the console:\n\n  ```bash\n  $ alda play -c 'bassoon: (Thread/sleep 5000) o2 d1~1~1~1~1'\n  [27713] Parsing/evaluating... # immediate response\n  [27713] Playing... # 5 seconds later\n  ```\n\n### Breaking Changes\n\n* To accomplish the above, I had to make a couple of minor adjustments to the\n  ZeroMQ message structure. If you are writing your own Alda client, server, or\n  worker, you may need to adjust the way messages are handled slightly. The Alda\n  ZeroMQ Architecture doc has been updated to reflect these changes to the\n  message structure.\n\n## 1.0.0-rc41 (2016-09-18)\n\nThe focus of this release is to use less CPU when starting an Alda server and worker processes. Thanks to [0atman] for reporting [this issue](https://github.com/alda-lang/alda/issues/266)!\n\n* Prior to this release, when you started up and Alda server, it would simultaneously start all of its worker processes, which was heavy on the CPU. It turns out that waiting 10 seconds between starting each worker decreases CPU usage significantly, so that's what we're doing now.\n\n* Because it can take a little longer now for all workers to start (add an additional 10 seconds for each worker after 1), the server will now check on the current number of workers every 60 seconds instead of every 30 seconds.\n\n* The default number of workers is now 2 instead of 4. This uses significantly less CPU, and should be adequate for most Alda users. Remember that if you desire more workers, you can use the `--workers` option when starting the server, e.g. `alda --workers 4 up` for 4 workers.\n\n* Removed the temporary `--cycle-workers` option introduced in 1.0.0-rc39. Now that CPU usage will not be as much of a problem, it is safer to cycle workers by default.\n\n## 1.0.0-rc40 (2016-09-17)\n\n* Bugfix: prior to this release, if evaluating an Alda score resulted in any error, the client would report `ERROR Invalid Alda syntax.`. Now it will report the error message. (This may have been working at some point and then regressed in a recent release. Sorry about that!)\n\n## 1.0.0-rc39 (2016-09-17)\n\n* There is [a CPU usage issue](https://github.com/alda-lang/alda/issues/266) that can cause poor performance when cycling out workers, a feature that was implemented in the last release.\n\n  The real solution is going to be to fix the CPU usage problem, but in the meantime, this release makes the worker-cycling behavior introduced in the last release an opt-in feature.\n\n  To opt in, include the `--cycle-workers` option when starting the server:\n\n  ```bash\n  alda --cycle-workers up\n  ```\n\n  Note that even when _not_ using this option, the worker cycling will still eventually happen (within 30 seconds of your computer coming out of suspended state). When it has been 10+ seconds since the worker was last active (e.g. if your computer was in suspended state), each worker will detect this and shut itself down. Every 30 seconds, the server checks to make sure it has the correct number of workers, so it will replace the workers that went down.\n\n  The change with this release is that the workers will not immediately be replaced upon coming out of suspended state. It would be better if they were immediately replaced, but we will have to fix the CPU usage problem first. (If you're good at profiling / determining the cause of high CPU usage, we could use your help!)\n\n## 1.0.0-rc38 (2016-09-14)\n\n* Fixed issue [#160](https://github.com/alda-lang/alda/issues/160), re: MIDI audio being delayed after suspending and bringing back Alda processes, e.g. after closing and re-opening your laptop lid.\n\n  Now that we have a server/workers architecture, the solution to this is for the server and workers to each detect when the system has been suspended, and act accordingly:\n\n  - Each existing worker will shut down.\n  - The server will clear out its worker queue and start up new workers.\n\n  This is not a perfect solution in that if you close your laptop and then reopen it in under 10 seconds, the suspension may not be properly detected, so you might still have the same \"bad\" workers as before with delayed audio. If you ever observe this behavior, you can always fix it by restarting the server and workers via `alda downup`.\n\n* Fixed a minor bug where workers may be sending too many heartbeats, potentially resulting in poor performance. Now they should only send heartbeats once per second.\n\n## 1.0.0-rc37 (2016-09-08)\n\n* Continuing from the `ulimit -n`-related `alda up` issues noted in the previous release, this makes it so that we check the number of available workers every 250 ms instead of 100 ms. This does not solve the \"Too many open files\" issue, but as a workaround it appears to stop the error from happening when your `ulimit -n` is 256 and you're starting the default number (4) of workers.\n\n  See issue [#261](https://github.com/alda-lang/alda/issues/261) for further discussion.\n\n## 1.0.0-rc36 (2016-09-05)\n\nThis release makes a handful of minor improvements to the way we're managing socket connections. The goal is avoid the `java.io.IOException: Too many open files` error, (issue [#261](https://github.com/alda-lang/alda/issues/261)) which can occur when Alda tries to open more socket connections than your system allows.\n\n* Updated to JeroMQ 0.3.5, which includes some behind-the-scenes resource management improvements.\n\n* Ensured that any time Alda forks a background process, it closes its input, output, and error streams in order to free up those resources that we aren't using.\n\n* When you run `alda up`, the client repeatedly sends requests to get an update on when the server is up so that it can notify you, then it does the same thing with the worker processes. The worker processes can take a while to spin up, so the client ends up sending a lot of requests to the server for the status of the worker processes. Prior to this release, each of these requests created a new connection, causing the \"open files\" limit to be quickly met. As of this release, a single Alda CLI command (like `alda up`) will only create a single connection and reuse it.\n\nI tested this release by setting my `ulimit -n` to 256 and saw some definite improvement, but still occasionally saw the \"Too many open files\" error happening, especially when trying to use 4 Alda worker processes. I'll continue to tinker with this and see if there are other improvements to be made.\n\n> If you have a low `ulimit -n` (256 is quite low; I would recommend 10240 at least) and would like to get better performance from Alda, you can set it higher for your current terminal session by running `ulimit -n 10240`. However, this setting will go away once you close your terminal window, so if you're looking for a more permanent solution, [the Riak docs](https://docs.basho.com/riak/kv/2.1.4/using/performance/open-files-limit/) happen to have an excellent description of how to set your open file limit more permanently.\n\n## 1.0.0-rc35 (2016-09-04)\n\n> Quick TL;DR of what you should do when updating to this release:\n>\n> - _Before_ updating, run `alda down` to stop your Alda server if you have one running. If you don't do this before updating, you may need to find and kill the process manually.\n> - Run `alda update` to update.\n> - `alda start`, `alda stop` and `alda restart` have been renamed. From now on, you will need to use the commands `alda up`, `alda down` and `alda downup` or `alda start-server`, `alda stop-server` and `alda restart-server` instead. See below for more details about this change.\n\n* This release adds more internal architecture improvements, further leveraging ZeroMQ to break out the functionality of Alda into separate, specialized background processes.\n\n  Prior to this release, Alda was a two-process system:\n\n  - a **server** that runs in the background and plays scores on demand, and\n  - a command-line **client** used to make requests to the server\n\n  To help with performance issues related to playing multiple scores at once, each request is now handled by a separate **worker** process. The **client**/**server** relationship is still exactly the same; as an Alda user, you never need to communicate directly with the workers or worry about them in any way; they are solely the responsibility of the server.\n\n  When starting Alda with `alda up`, you will now see the server come up much faster than before, followed by a more typical wait for the first worker to become available:\n\n  ```bash\n  $ alda up\n  [27713] Starting Alda server...\n  # short wait\n  [27713] Server up ✓\n  [27713] Starting worker processes...\n  # longer wait\n  [27713] Ready ✓\n  ```\n\n  When you see the \"Ready\" line, you will be able to use Alda the same as before, e.g.:\n\n  ```bash\n  $ alda play -c 'bassoon: o2 d8 e (quant 33) f+ g (quant 90) a2'\n  [27713] Playing...\n  ```\n\n  You can safely leave the server running in the background and it will manage its own supply of workers, replacing any that become unresponsive. Similarly, a worker process will shut itself down if the server becomes unresponsive for any reason.\n\n  By default, an Alda server maintains a pool of 4 workers. If you try to play more than 4 scores at the same time, the server will respond that there are no workers available and ask you to wait until the next worker becomes available:\n\n  ```bash\n  $ alda play -c 'bassoon: o2 d1~1~1~1~1'\n  [27713] Playing...\n\n  $ alda play -c 'bassoon: o2 d1~1~1~1~1'\n  [27713] Playing...\n\n  $ alda play -c 'bassoon: o2 d1~1~1~1~1'\n  [27713] Playing...\n\n  $ alda play -c 'bassoon: o2 d1~1~1~1~1'\n  [27713] Playing...\n\n  $ alda play -c 'bassoon: o2 d1~1~1~1~1'\n  [27713] ERROR All worker processes are currently busy. Please wait until playback is complete and try again.\n  ```\n\n  If you desire more or fewer workers, you can use the `-w`/`--workers` option when starting the server:\n\n  ```bash\n  $ alda -w 6 up\n  [27713] Starting Alda server...\n  [27713] Server up ✓\n  [27713] Starting worker processes...\n  [27713] Ready ✓\n  ```\n\n  Be aware, however, that running a larger amount of servers uses more of your CPU. I think the default of 4 workers should be comfortable for most users.\n\n* Running `alda status` will now show you the number of workers currently available:\n\n  ```bash\n  $ alda status\n  [27713] Server up (4/4 workers available)\n\n  $ alda play -f examples/hello_world.alda\n  [27713] Playing...\n\n  # one worker is busy playing hello_world.alda\n  $ alda status\n  [27713] Server up (3/4 workers available)\n\n  # after playback completes, the worker is available again\n  $ alda status\n  [27713] Server up (4/4 workers available)\n  ```\n\n* Running `alda list` will now list all Alda processes, including servers and workers.\n\n  > This command is currently only available on Unix/Linux systems.\n  >\n  > Please let us know if you can help us implement the same functionality for Windows!\n\n  ```bash\n  $ alda list\n  [27713] Server up (4/4 workers available)\n  [58678] Worker (pid: 85804)\n  [58678] Worker (pid: 85805)\n  [58678] Worker (pid: 85806)\n  [58678] Worker (pid: 85807)\n  ```\n\n* If an Alda worker process ever encounters an error, it logs the error to `~/.alda/logs/error.log`. The logs in this folder are rotated weekly, making cleanup easy if you do not want to keep old error logs.\n\n* Fixed [issue #243](https://github.com/alda-lang/alda/issues/243). Prior to the infrastructure improvements made in this release, the server was a single process trying to play multiple scores at once, which caused the sound to break up. Having each worker be a separate process that only handles one score at a time results in more reliable playback. Thanks to [goog] for reporting this issue!\n\n* Fixed [issue #258](https://github.com/alda-lang/alda/issues/258). This issue was also related to the previous single-server/worker system. While busy handling one request, the server was not able to handle the next right away, causing the request to be re-submitted and handled more than once, resulting in scores playing more than once with unexpected timing. Now that the server's sole responsibility is to maintain worker processes and forward them requests, it can handle requests a lot faster, and the client no longer needs to submit them more than once. Thanks to [elyisgreat] for reporting this issue!\n\n### Breaking Changes\n\n* In order to enable the new server/workers architecture, we had to remove a handful of commands that relied on \"stateful server\" behavior. An Alda server no longer has a notion of the \"current score\" you are working with. Instead, the state of your score should be maintained in the form of Alda code in a file; the functionality of the removed commands is better left up to your file system and text editor.\n\n  The following commands have been removed:\n\n  - `alda play` (without a `--file` or `--code` argument, this command used to play the \"current score\" in memory on the server)\n  - `alda play --append` (this used to play a file or string of code and append it to the \"current score\").\n  - `alda append` / (same as `alda play --append`, but just appended to the \"current score\" without playing the new code)\n  - `alda score` (used to display the \"current score\")\n  - `alda info` (used to display information about the \"current score\")\n  - `alda new` (used to delete the \"current score\" and start a new one)\n  - `alda load` (used to replace the \"current score\" with the contents of a file or string of code)\n  - `alda save` (used to save the \"current score\" to a file)\n  - `alda edit` (used to open the \"current score\" in your text editor of choice)\n\n* In anticipation of a future `alda stop` command that will [stop playback](https://github.com/alda-lang/alda/issues/69) instead of stopping the server, the previous `alda stop` command (which would stop the server) has been renamed `alda stop-server`. By analogy, `alda start` has been renamed to `alda start-server` and `alda restart` has been renamed to `alda restart-server`. I recommend using the shorter aliases `alda up`, `alda down` and `alda downup` to start, stop, and restart the server.\n\n## 1.0.0-rc34 (2016-08-23)\n\n* This release adds a few safeguards against inadvertently starting more than one server process for the same port and ending up in a situation where you have potentially many Alda server processes hanging around, only one of which will be able to serve on that port. Thanks to [elyisgreat] for reporting this issue ([#258](https://github.com/alda-lang/alda/issues/258)).\n\n  Safeguards include:\n\n  * Increasing the \"server startup timeout\" back to 30 seconds. It turns out that I accidentally lowered it to 15 seconds in 1.0.0-rc32, and on some computers an Alda server can take longer than 15 seconds to start. 30 seconds seems like a better default.\n\n    This timeout is the number of seconds, after running `alda up`, before the client gives up on waiting for the server to start, assumes something went wrong, and tells you that the server is down.\n\n  * If your computer is particularly slow and it takes longer than 30 seconds to start an Alda server, you can increase the timeout by supplying a new global option `-t` / `--timeout`:\n\n    ```bash\n    alda --timeout 45 up # wait 45 seconds before giving up\n    ```\n\n    This should only be necessary on the slowest of computers, but the option is there if you need it.\n\n  * If you do experience a timeout and you try to start the server again, a helpful message is now displayed, letting you know that there is already a server trying to start on that port:\n\n    ```\n    [27713] There is already a server trying to start on this port. Please be patient -- this can take a while.\n    ```\n\n    ...and the client does not attempt to start a duplicate server for that port.\n\n    If you wait long enough, the existing server should be up and ready to play scores. You can check the status of the server by running `alda status`.\n\n## 1.0.0-rc33 (2016-08-20)\n\n* Made the server a little more resilient to failure. There are a handful of tasks that are handled in parallel, like setting up the audio systems (e.g. MIDI) for a score. This involves running the tasks in parallel background threads and waiting for them to complete. This works fine when the tasks are successful, but if they fail, then the server ends up waiting forever and needs to be restarted in order to serve any more requests.\n\n  Starting from this release, we are able to notice when the background tasks fail and re-throw the error so that the server can report the error back to the client and will be ready to handle any subsequent requests.\n\n  One example of a background task that can fail is if you try to play an Alda score with multiple MIDI percussion instruments. There is only one MIDI percussion channel available, so this will throw a \"Ran out of MIDI channels! :(\" error. on the background thread that loads the instruments. Before this release, the server would just lock up when you tried to play such a score; now it will report the error back to the client.\n\n* Added more debug logging when running a server in debug mode.\n\n## 1.0.0-rc32 (2016-08-18)\n\n* The major change in this release is that we replaced the internal implementation of the server, previously a resource-intensive HTTP server, with a more lightweight [ZeroMQ](http://zeromq.org) REQ/RES socket. This means lower overhead for the server, which should translate to better performance.\n\n  > We are using [the pure Java implementation of ZeroMQ](https://github.com/zeromq/jeromq), which means no native dependencies to install. You can update Alda and it'll just work™.\n\n  This is a transparent change; you should not notice any difference in your usage of Alda via the `alda` command-line client, besides seeing better performance from the server.\n\n* Bugfix: I just realized that the `alda play` command's options `--from` and `--to` were not actually hooked up so that they did anything useful. Oops! Sorry about that. As of this release, you can use them to specify start and end points for playing back the score, either as marker names or minute/second markings. For real, this time.\n\n* I discovered that the `-y/--yes` auto-confirm option for the `alda play` and `alda parse` commands was never being used, so I removed the option from both commands.\n\n  When I first wrote the Alda client, the `play` and `parse` commands would overwrite whatever score you were currently working on in memory. So, if you had unsaved changes, the client would warn you that you were about to overwrite the in-memory score and lose your unsaved changes, and ask you for confirmation. The `-y` flag was there as a convenience so that if you didn't care about the score in memory and you just wanted to play a score file, you could include the flag and skip the unsaved changes warning and prompt.\n\n  A while back, we improved the experience so that the default behavior of `alda play` and `alda parse` is to play or parse a score separately without affecting the working score you might have in-memory. The client never needs to prompt you for confirmation anymore when using these two commands, so the `-y` flag is no longer necessary.\n\n  > Note: The `-y` flag is still available for other commands that _can_ affect the score in memory, such as `alda load` and `alda down`.\n\n### Breaking Changes\n\n* If you happened to be using the HTTP server directly (i.e. via `curl` instead of the Alda client), you will find that this will no longer work, since the server does not respond to HTTP requests anymore.\n\n  > If you still wish to have lower-level access to an Alda server, you can use ZeroMQ to make a REQ socket connection to `tcp://*:27713` (assuming 27713 is the port on which the Alda server is running), send a request with a JSON payload, and receive the response. For more information about ZeroMQ, read [the ZeroMQ guide](http://zguide.zeromq.org/page:all), it's excellent!\n\n* Before, if you ran a command that requires the Alda server to be up, for example `alda play -f somefile.alda`, and the Alda server is not up, the client would go ahead and start it for you. We have removed this behavior; now, you will get an error message notifying you that the server is down and explaining that you can start the server by running `alda up`. We are working toward making the server failsafe enough that you can leave it running in the background forever and forget about it (making it more of a daemon), so hopefully you will not need to run `alda down` or `alda up` very often.\n\n* When running `alda score -m` (to show the data representation of the current score) or `alda parse -m -f somefile.alda` (to show the data representation of the score in a file), the output is now JSON instead of [EDN](https://github.com/edn-format/edn).\n\n  The reason for this is that JSON is more widely supported and there are a variety of useful command-line tools like [`jq`][jq] for working with JSON on the command line.\n\n  For example, if you have `jq` installed, you can now run this command to pretty-print an Alda score map:\n\n  ```\n  $ alda score -m | jq .\n  {\n    \"chord-mode\": false,\n    \"current-instruments\": [\n      \"flute-nUVei\"\n    ],\n    \"score-text\": \"(tempo! 90)\\n(quant! 95)\\n\\npiano:\\n  o5 g- > g- g-/f > e- d-4. < b-8 d-2 | c-4 e- d- d- <b-1/>g-\\n\\nflute:\\n  r2 g-4 a- b-2. > d-32~ e-16.~8 < b-2 a- g-1\\n\",\n    \"events\": [\n      {\n  ...\n\n  ```\n\n  Or you can output the offsets of every event in the score:\n\n  ```\n  $ alda score -m | jq '.events[] .offset'\n  666.666687117188\n  2000.0000610351562\n  5333.333465576172\n  1333.3333740234375\n  1333.3333740234375\n  4666.666748046875\n  4750.00008392334\n  ```\n\n## 1.0.0-rc31 (2016-08-12)\n\n* Fixed a bug where the Alda server was spinning its wheels for a long time trying to parse certain scores when played via the command-line.\n\n## 1.0.0-rc30 (2016-08-11)\n\n* Removed the `--pre-buffer` and `--post-buffer` options, as I realized they weren't necessary. For details, see [this issue comment](https://github.com/alda-lang/alda/issues/26#issuecomment-239345440).\n\n* Improved the timing of the behind-the-scenes clean-up that occurs after a score is finished playing.\n\n* Fixed a bug where in some cases, that clean-up might not have been happening.\n\n* Implemented a minor optimization to the way events are scheduled; earlier events are now given priority scheduling, making it less likely for events to be skipped during playback.\n\n## 1.0.0-rc29 (2016-07-26)\n\n* Fixed a bug where using chords with implicit note duration within a CRAM expression would result in incorrect timing.\n\n## 1.0.0-rc28 (2016-07-25)\n\nMore variable-related bugfixes in this release:\n\n* Setting a variable that includes a repeated event sequence, e.g. `foo = [c c]*3` no longer throws an error.\n\n* Setting a variable that includes an empty Clojure expression, e.g. `foo = () c d e f` no longer throws an error.\n\nShout-out to [elyisgreat] for finding all these bugs!\n\n## 1.0.0-rc27 (2016-07-24)\n\n* Behind the scenes change: simplified the code that handles getting and setting variables. See [ebf2a4](https://github.com/alda-lang/alda/commit/ebf2a42c78e5be3ef1cbedc4c2579a7bd72d08bb) for more details.\n\n  TL;DR: when you use a variable inside the definition of another variable, now the value of the variable is retrieved right away, instead of waiting until you try to get the value of the outer variable.\n\n  For the most part, you should not notice any changes to the way that variables work, aside from the Alda score map (i.e. the result of using `alda parse -m`, or `:map` in the Alda REPL.) no longer containing the key `:variables` and having a greatly simplified `:env` key that is no longer a nested map, but a simple lookup of variables to their values.\n\n* Trying to define a variable where the value includes an undefined variable now throws an error immediately, instead of waiting until you get the value of the variable. For example, the following score will now fail immediately because `bar` isn't defined:\n\n  ```alda\n  foo = bar\n  ```\n\n  Whereas before this release, the \"undefined variable\" error would not be thrown until you tried to use `foo` in an instrument part.\n\n## 1.0.0-rc26 (2016-07-24)\n\n* Minor bugfix: in some situations, undefined variables were not being appropriately caught. Now, an error will always be thrown if you try to use a variable that hasn't been defined.\n\n* Empty event sequences, e.g. `[]` are now supported. Hey, why not? ㄟ( ･ө･ )ㄏ\n\n* Defining a previously undefined variable as itself, e.g. `foo = foo` used to trigger a stack overflow. Now it throws an \"undefined variable: foo\" error, which is more helpful.\n\n## 1.0.0-rc25 (2016-07-23)\n\n### Breaking Changes\n\n* There was a breaking change in one of the last few versions that may not have been documented, where it is no longer acceptable to place barlines in between notes instead of whitespace, like this:\n\n  ```alda\n  c|d|e\n  ```\n\n  To improve parsing flexibility, make the parser easier to develop, avoid unexpected bugs in future releases, and enforce a convention that will make Alda scores easier to read, whitespace is now required between all events, including not only notes, chords, event sequences, etc., but also barlines.\n\n* As of this release, it is no longer valid to end a note duration with a barline, e.g.:\n\n  ```alda\n  c1| d\n  ```\n\n  The correct way to write the above is:\n\n  ```alda\n  c1 | d\n  ```\n\n  The reasoning for this is the same as the point above -- events (including barlines) must be separated by whitespace.\n\n* Note that there is one situation that is a minor exception where it is acceptable for a barline to not be preceded/succeeded by whitespace:\n\n  ```alda\n  c1~|1~|1 d\n  ```\n\n  In this case, there are technically two \"events\" -- the C note and the D note. Alda's parser reads the C note as a single event where the pitch is C and the duration is 3 whole notes tied across 2 bar lines.\n\n  If this is confusing, note that it is also acceptable to put spaces in between the barlines:\n\n  ```alda\n  c1 | ~1 | ~1 d\n  ```\n\n  The last two examples are equivalent.\n\n## 1.0.0-rc24 (2016-07-21)\n\n* Refines the behavior of variables when used within the definitions of other variables. The \"scope\" of a variable is now tracked when it is defined. This makes it possible to do things like this:\n\n  ```alda\n  foo = c d e\n  foo = foo f g\n\n  piano: foo  # expands to \"c d e f g\"\n  ```\n\n  It also makes it so that you won't run into unexpected bugs when redefining a variable that another variable depends on, as in this example:\n\n  ```alda\n  foo = c d e\n  bar = foo f g\n\n  foo = c\n\n  piano: bar  # still \"c d e f g,\" because that's what it was when it was defined\n  ```\n\n### Breaking Changes\n\n* Prior to this release, trying to use a variable that wasn't defined would result in that variable being ignored and the rest of the score processed as usual.\n\n  Now, trying to use a variable that hasn't been defined results in an error being thrown. This will help score writers catch unintentional bugs caused by misspelling variable names, etc.\n\n## 1.0.0-rc23 (2016-07-18)\n\n* Fixes another bug related to `>` and `<` being used back-to-back without spaces in between.\n\n* An Alda score containing only Clojure code (i.e. no instrument parts) is now considered a valid score. For example, the following is a valid Alda score:\n\n  ```clojure\n  (part \"bassoon\"\n    (for [x (map (comp keyword str) \"cdefgab\")]\n      (note (pitch x) (ms 100))))\n  ```\n\n## 1.0.0-rc22 (2016-07-18)\n\n* The previous release inadvertently made it invalid for a note to be followed immediately (no spaces) by an octave up/down operator, e.g. `c<`. This release makes it acceptable again to do that.\n\n  (It's also still acceptable to follow an octave up/down operator immediately with a note, e.g. `>c`, and to sandwich a note between octave up/down operators, e.g. `>c<`.)\n\n### Breaking Changes\n\n* Because the `=` sign is used to define variables, the natural sign, which used to be `=`, has been changed to `_` to avoid confusion. If you have any scores using naturals, make sure you change the `=`'s to `_`'s to avoid parse errors.\n\n## 1.0.0-rc21 (2016-07-18)\n\n* Variables implemented! This simple, but powerful feature allows you to define named sequences of musical events and refer to them by name. You can even define variables that refer to other variables, giving you the means to build a score out of modular parts. For details, see [the docs](doc/variables.md).\n\n* Minor parsing performance improvements.\n\n### Breaking Changes\n\n* In order to avoid conflicts between variable names and multiple notes squished together (e.g. \"abcdef\"), the rules are now more rigid about spaces between notes. Multiple letters back-to-back without spaces in between is now read as a variable name. Multiple letters with spaces between each one (e.g. \"a b c d e f\") is read as multiple notes.\n\n  Note that this does not only apply to single letters, but to anything else that the parser considers a \"note\" -- this includes notes that include a duration (e.g. \"a4\"), notes that include multiple durations tied together (e.g. \"a4~4~4\"), and notes that end in a final tie/slur, indicating that the note is to be played legato (e.g. \"a~\").\n\n  A couple of Alda example scores contained examples that broke the \"mandatory space between notes\" rule, and had to be changed. For example, `awobmolg.alda` contained the following snippet representing 5 notes under a slur:\n\n  ```alda\n  b4.~b16~a~g~a\n  ```\n\n  The parser was trying to read this as the (legato/slurred) note `b4.~` followed immediately by another note, `b16`. This is now explicitly not allowed. The example was changed to the following (valid) syntax:\n\n  ```alda\n  b4.~ b16~ a~ g~ a\n  ```\n\n## 1.0.0-rc20 (2016-06-20)\n\n* Fixed a regression caused by 1.0.0-rc19, which was causing scores not to parse correctly.\n\n## 1.0.0-rc19 (2016-06-19)\n\n* Parsing/playing Alda scores is now significantly faster, thanks to some optimizations to the parser. (Many thanks to [aengelberg] for your help with this!)\n\n* Fixed [#235](https://github.com/alda-lang/alda/issues/235) -- when trying to parse (as a `--map`) or play a very large score, a \"Method code too large!\" error was occurring because of the way that scores were parsed into Clojure code as an intermediate form and then `eval`'d. Now, the parser transforms an Alda score into the score map (i.e. the output of `alda parse --map`) directly.\n\n  Even though parsing and playing scores no longer does so by generating Clojure code, it is still possible to generate the Clojure code, if desired, by using `alda parse --lisp`.\n\n  This should be a transparent change; both ways of parsing should still work the same as before.\n\n### Breaking Changes\n\n* Part of the process of optimizing the Alda parser was removing cases of ambiguity. A consequence of doing this is that the `duration` grammar rule no longer includes a `barline` or `slur` at the end. Instead, a `barline` must stand on its own (after the `note` containing the `duration`), and a `slur` must be part of a `note` instead of its `duration`.\n\n  In other words, when writing alda.lisp code, whereas it used to be possible to do things like this:\n\n  ```clojure\n  (note (pitch :c)\n        (duration (note-length 4)\n                  (barline)))\n\n  (note (pitch :c)\n        (duration (note-length 4)\n                  :slur))\n  ```\n\n  Now you can only do it like this:\n\n  ```clojure\n  (note (pitch :c)\n        (duration (note-length 4)))\n  (barline)\n\n  (note (pitch :c)\n        (duration (note-length 4))\n        :slur)\n  ```\n\n  This is a trivial change, but I thought I'd mention it just in case anyone runs into it.\n\n## 1.0.0-rc18 (2016-05-28)\n\n* Fixes a bug related to the fix introduced in 1.0.0-rc17. For more details, see [issue #231](https://github.com/alda-lang/alda/issues/231).\n\n## 1.0.0-rc17 (2016-05-21)\n\n* Fixed issue #27. Setting note quantization to 100 or higher no longer causes issues with notes stopping other notes that have the same MIDI note number.\n\n  Better-sounding slurs can now be achieved by setting quant to 100:\n\n      bassoon: o2 (quant 100) a8 b > c+2.\n\n## 1.0.0-rc16 (2016-05-18)\n\n* Fixed issue #228. There was a bug where repeated calls to the same voice were being treated as if they were separate voices. Hat tip to [elyisgreat] for catching this!\n\n## 1.0.0-rc15 (2016-05-15)\n\n* This release includes numerous improvements to the Alda codebase. The primary goal was to make the code easier to understand and more predictable, which will make it possible to improve Alda and add new features at a much faster pace.\n\n  To summarize the changes in programmer-speak: before this release, Alda evaluated a score by storing state in top-level, mutable vars, updating their values as it worked its way through the score. This code has been rewritten from the ground up to adhere much more to the functional programming philosophy. For a better explanation, read below about the breaking changes to the way scores are managed in a Clojure REPL.\n\n* Alda score evaluation is now a self-contained process, and an Alda server (or a Clojure program using Alda as a library) can now handle multiple scores at a time without them affecting each other.\n\n* Fixed issue #170. There was a 5-second socket timeout, causing the client to return \"ERROR Read timed out\" if the server took longer than 5 seconds to parse/evaluate the score. In this release, we've removed the timeout, so the client will wait until the server has parsed/evaluated the score and started playing it.\n\n* Fixed issue #199. Local (per-instrument) attributes occurring at the same time as global attributes will now override the global attribute for the instrument(s) to which they apply.\n\n* Using `@markerName` before `%markerName` is placed in a score now results in a explicit error, instead of throwing a different error that was difficult to understand. It turns out that this never worked to begin with. I do think it would be nice if it were possible to \"forward declare\" markers like this, but for the time being, I will leave this as something that (still) doesn't work, but that we could make possible in the future if there is demand for it.\n\n### Breaking Changes\n\n* The default behavior of `alda play -f score.alda` / `alda play -c 'piano: c d e'` is no longer to append to the current score in memory. Now, running these commands will play the Alda score file or string of code as a one-off score, not considering or affecting the current score in memory in any way. The previous behavior of appending to the current score is still possible via a new `alda play` option, `-a/--append`.\n\n* Creating scores in a Clojure REPL now involves working with immutable data structures instead of mutating top-level dynamic vars. Whereas before, Alda event functions like `score`, `part` and `note` relied on side effects to modify the state of your score environment, now you create a new score via `score` (or the slightly lower-level `new-score`) and update it using the `continue` function. To better illustrate this, this is how you used to do it **before**:\n\n  ```clojure\n  (score*)\n  (part* \"piano\")\n  (note (pitch :c))\n  (chord (note (pitch :e)) (note (pitch :g)))\n  ```\n\n  Evaluating each S-expression would modify the top-level score environment. Evaluating `(score*)` again (or a full score wrapped in `(score ...)`) would blow away whatever score-in-progress you may have been working on.\n\n  Here are a few different ways you can do this **now**:\n\n  ```clojure\n  ; a complete score, as a single S-expression\n  (def my-score\n    (score\n      (part \"piano\"\n        (note (pitch :c))\n        (chord\n          (note (pitch :e))\n          (note (pitch :g))))))\n\n  ; start a new score and continue it\n  ; note that the original (empty) score is not modified\n  (def my-score (new-score))\n\n  (def my-score-cont\n    (continue my-score\n      (part \"piano\"\n        (note (pitch :c)))))\n\n  (def my-score-cont-cont\n    (continue my-score-cont\n      (chord\n        (note (pitch :e))\n        (note (pitch :g)))))\n\n  ; store your score in an atom and update it atomically\n  (def my-score (atom (score)))\n\n  (continue! my-score\n    (part \"piano\"\n      (note (pitch :c))))\n\n  (continue! my-score\n    (chord\n      (note (pitch :e))\n      (note (pitch :g))))\n  ```\n\n  Because no shared state is being stored in top-level vars, multiple scores can now exist side-by-side in a single Alda process or Clojure REPL.\n\n* Top-level score evaluation context vars like `*instruments*` and `*events*` no longer exist. If you were previously relying on inspecting that data, everything has now moved into keys like `:instruments` and `:events` on each separate score map.\n\n* `(duration <number>)` no longer works as a way of manually setting the duration. To do this, use `(set-duration <number>)`, where `<number>` is a number of beats.\n\n* The `$` syntax in alda.lisp (e.g. `($volume)`) for getting the current value of an attribute for the current instrument is no longer supported due to the way the code has been rewritten. We could probably find a way to add this feature back if there is a demand for it, but its use case is probably pretty obscure.\n\n* Because Alda event functions no longer work via side effects, inline Clojure\n  code works a bit differently. Basically, you'll just write code that returns\n  one or more Alda events, instead of code that produces side effects (modifying\n  the score) and returns nil. See\n  [entropy.alda](https://github.com/alda-lang/alda-core/blob/master/examples/entropy.alda)\n  for an example of the way inline Clojure code works starting with this\n  release.\n\n## 1.0.0-rc14 (2016-04-01)\n\n* Command-specific help text is now available when using the Alda command-line client. ([jgerman])\n\n  To see a description of a command and its options, run the command with the `-h` or `--help` option.\n\n  Example:\n\n      $ alda play --help\n\n      Evaluate and play Alda code\n      Usage: play [options]\n        Options:\n          -c, --code\n             Supply Alda code as a string\n          -f, --file\n             Read Alda code from a file\n          -F, --from\n             A time marking or marker from which to start playback\n          -r, --replace\n             Replace the existing score with new code\n             Default: false\n          -T, --to\n             A time marking or marker at which to end playback\n          -y, --yes\n             Auto-respond 'y' to confirm e.g. score replacement\n             Default: false\n\n## 1.0.0-rc13 (2016-03-10)\n\n* Setting quantization to 0 now makes notes silent as expected. (#205, thanks to [elyisgreat] for reporting)\n\n## 1.0.0-rc12 (2016-03-10)\n\n* Improve validation of attribute values to avoid buggy behavior when using invalid values like negative tempos, non-integer octaves, etc. (#195, thanks to [elyisgreat] for reporting and [jgkamat] for fixing)\n\n## 1.0.0-rc11 (2016-03-08)\n\n* Fix parsing bugs related to ending a voice in a voice group with a certain type of event (e.g. Clojure expressions, barlines) followed by whitespace. (#196, #197 - thanks to [elyisgreat] for reporting!)\n\n## 1.0.0-rc10 (2016-02-28)\n\n* Fix parsing bug re: placing an octave change before the slash in a chord instead of after it, e.g. `b>/d/f` (#192 - thanks to [elyisgreat] for reporting!)\n\n## 1.0.0-rc9 (2016-02-21)\n\n* Fix parsing bug re: starting an event sequence with an event sequence. (#187 - Thanks to [heikkil] for reporting!)\n* Fix similar parsing bug re: starting a cram expression with a cram expression.\n\n## 1.0.0-rc8 (2016-02-16)\n\n* You can now update to the latest version of Alda from the command line by running `alda update`. ([jgkamat])\n\n* This will be the last update you have to install manually :)\n\n## 1.0.0-rc7 (2016-02-12)\n\n* Fixed a bug that was happening when using a cram expression inside of a voice. (#184 -- thanks to [jgkamat] for reporting!)\n\n## 1.0.0-rc6 (2016-01-27)\n\n* Fixed a bug where voices were not being parsed correctly in some cases ([#177](https://github.com/alda-lang/alda/pull/177)).\n\n## 1.0.0-rc5 (2016-01-24)\n\n* Added `midi-percussion` instrument. See [the docs](doc/list-of-instruments.md#percussion) for more info.\n\n## 1.0.0-rc4 (2016-01-21)\n\n* Upgraded to the newly released Clojure 1.8.0 and adjusted the way we compile Alda so that we can utilize the new Clojure 1.8.0 feature [direct linking](https://github.com/clojure/clojure/blob/master/changes.md#11-direct-linking). This improves both performance and startup speed significantly.\n\n## 1.0.0-rc3 (2016-01-13)\n\n* Support added for running Alda on systems with Java 7, whereas before it was Java 8 only.\n\n## 1.0.0-rc2 (2016-01-02)\n\n* Alda now uses [JSyn](http://www.softsynth.com/jsyn) for higher precision of note-scheduling by doing it in realtime. This solves a handful of issues, such as [#134][issue133], [#144][issue144], and [#160][issue160]. Performance is probably noticeably better now.\n* Running `alda new` now asks you for confirmation if there are unsaved changes to the score you're about to delete in order to start one.\n* A heaping handful of new Alda client commands:\n  * `alda info` prints useful information about a running Alda server\n  * `alda list` (currently Mac/Linux only) lists Alda servers currently running on your system\n  * `alda load` loads a score from a file (without playing it)\n    * prompts you for confirmation if there are unsaved changes to the current score\n  * `alda save` saves the current score to a file\n    * prompts you for confirmation if you're saving a new score to an existing file\n    * `alda new` will call this function implicitly if you give it a filename, e.g. `alda new -f my-new-score.alda`\n  * `alda edit` opens the current score file in your `$EDITOR`\n    * `alda edit -e <editor-command-here>` opens the score in a different editor\n\n[issue133]: https://github.com/alda-lang/alda/issues/134\n[issue144]: https://github.com/alda-lang/alda/issues/144\n[issue160]: https://github.com/alda-lang/alda/issues/160\n\n\n## 1.0.0-rc1 (2015-12-25) :christmas_tree:\n\n* Server/client relationship allows you to run Alda servers in the background\n  and interact with them via a much more lightweight CLI, implemented in Java.\n  Everything is packaged into a single uberjar containing both the server and\n  the client. The client is able to manage/start/stop servers as well as\n  interact with them by handing them Alda code to play, etc.\n\n* This solves start-up time issues, making your Alda CLI experience much more\n  lightweight and responsive. It still takes a while to start up an Alda server,\n  but now you only have to do it once, and then you can leave the server running\n  in the background, where it will be ready to parse/play code whenever you\n  want, at a moment's notice.\n\n* In the future, we will re-implement the Alda REPL on the client side. In the\n  meantime, you can still access the existing Alda REPL by typing `alda repl`.\n  This is just as slow to start as it was before, as it still has to start the\n  Clojure run-time, load the MIDI system and initialize a score when you start\n  the REPL. In the near future, however, the Alda REPL will be much more\n  lightweight, as it will be re-implemented in Java, and instead of starting an\n  Alda server every time you use it, you'll be interacting with Alda servers you\n  already have running.\n\n* Starting with this release, we'll be releasing Unix and Windows executables on\n  GitHub. These are standalone programs; all you need to run them is Java.\n  [Boot](https://boot-clj.github.io/) is no longer a dependency to run Alda, just\n  something we use to build it and create releases. For development builds,\n  running `boot build -o directory_name` will generate `alda.jar`, `alda`, and\n  `alda.exe` files which can be run directly.\n\n* In light of the above, the `bin/alda` Boot script that we were previously\n  using as an entrypoint to the application is no longer needed, and has been\n  removed.\n\n* Now that we are packaging everything together and not using Boot as a\n  dependency, it is no longer feasible to include a MIDI soundfont with Alda. It\n  is easy to install the FluidR3 soundfont into your Java Virtual Machine, and\n  this is what we recommend doing. We've made this even easier (for Mac & Linux\n  users, at least) by including a script (`scripts/install-fluid-r3`). Running\n  it will download FluidR3 and replace `~/.gervill/soundbank-emg.sf2` (your\n  JVM's default soundfont) with it. (If you're a Windows user and you know how\n  to install a MIDI soundfont on a Windows system, please let us know!)\n\n[jgkamat]: https://github.com/jgkamat\n[heikkil]: https://github.com/heikkil\n[elyisgreat]: https://github.com/elyisgreat\n[jgerman]: https://github.com/jgerman\n[aengelberg]: https://github.com/aengelberg\n[goog]: https://github.com/goog\n[0atman]: https://github.com/0atman\n[feldoh]: https://github.com/feldoh\n[jimcheetham]: https://github.com/jimcheetham\n[bbqbaron]: https://github.com/bbqbaron\n[damiendevienne]: https://github.com/damiendevienne\n[tobiasriedling]: https://github.com/tobiasriedling\n[iggar]: https://github.com/iggar\n[pzxwang]: https://github.com/pzxwang\n[Hemaolle]: https://github.com/Hemaolle\n[TBuc]: https://github.com/TBuc\n[truj]: https://github.com/truj\n[dhpiggott]: https://github.com/dhpiggott\n\n[slack]: http://slack.alda.io\n[jq]: https://stedolan.github.io/jq/\n[sound-engine]: https://github.com/alda-lang/alda-sound-engine-clj\n[midica]: https://github.com/truj/midica\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 16.9267578125,
          "content": "# CHANGELOG\n\n## 2.3.1 (2024-08-04)\n\nFixed an issue where ANSI color codes (e.g. `←[36m`) were being displayed when\nrunning Alda in Powershell. Thanks, [Vanello1908], for the contribution!\n\nSee [this issue][issue-405] for further discussion. There is still a remaining\nissue where the background color is changing unexpectedly, but as of this\nrelease, the ANSI codes should at least be gone.\n\n## 2.3.0 (2024-06-22)\n\n### Improved MIDI channel assignment\n\n> Incidental note: This release includes some **breaking changes** to the Alda\n> OSC API, which is the communication layer between the Alda client and player\n> processes:\n>\n> * Added a required channel number argument to a handful of endpoints.\n>\n> * Removed `/track/{number}/midi/percussion` endpoint, which is no longer\n>   needed.\n>\n> * Removed unused mute/unmute functionality.\n>\n> These changes will not affect the vast majority of Alda users. The only way\n> that you might run into issues is if you have written software that interfaces\n> with the Alda player process directly, instead of using the Alda client.\n>\n> The general Alda experience still works exactly the same way as it did before,\n> so the aforementioned changes probably won't affect you.\n\nAs of this release, we've re-worked the way that MIDI channels are assigned to\nparts. This addresses [some shortcomings][midi-channel-assignment-discussion]\nthat have have come up in discussions a few times. To summarize, prior to this\nrelease:\n\n* It was not possible to include more than 16 instruments in a score.\n\n* There was no visible error message when a score exceeded the number of\n  available MIDI channels (16). The player process would log an error and do its\n  best to play the score (leaving out some parts), but the client would just say\n  \"Playing...\" and it was not obvious that there was a problem.\n\n* MIDI channel assignment order was non-deterministic. This meant that when you\n  exported scores to MIDI files, the instruments used in each channel were not\n  necessarily in the same order that they appeared in the score.\n\n* There was no way to control which MIDI channel was used for each part.\n\nAs of this release:\n\n* MIDI channel assignment is now handled on the client side, and is **fully\n  deterministic**. The order of parts presented in the score maps to the order\n  of channels in exported MIDI files in an intuitive way.\n\n* The Alda client provides **helpful error messages** in cases where it is not\n  possible to use the 16 available MIDI channels to play your score.\n\n* You can now have **more than 16 instruments in a score**, just as long as\n  there are never more than 15 non-percussion instruments playing _at the same\n  time_. I wrote a handful of fun, new example scores to show you what's\n  possible:\n\n  * [`all-instruments.alda`][all-instruments]: A demo of **all 128 General MIDI\n    instruments**, played back to back\n\n  * [`midi-channel-management.alda`][midi-channel-management]: A quick jazzy\n    number featuring **31 instruments**: 1 percussion part playing throughout,\n    and two groups of 15 instruments playing together at a time.\n\n  * [`midi-channel-management-2.alda`][midi-channel-management-2]: A tiny\n    example showing how the new `midi-channel` attribute works.\n\n* There is a new [`midi-channel` attribute][midi-channel-attribute] that allows\n  you to explicitly specify which MIDI channel should be used at that point in\n  time for the notes in that part. Most of you will never need to use this\n  attribute, because Alda does a good job of automatically assigning MIDI\n  channels to parts for you. But for those of you who want more control over\n  MIDI channel assignment, this attribute will give you that power.\n\nI hope you enjoy Alda's newfound ability to handle large numbers of instruments\nin a score. I'm pretty excited about it! As always, please let us know if you\nnotice any bugs or unexplained behavior!\n\n### Other misc. changes\n\n* Fixed a bug in `alda doctor` where it would hang if there was an error during\n  the \"Send and receive OSC messages\" step. Now if there's an error during that\n  step, it will print the error message.\n\n* Client/player communication is now done via `127.0.0.1` by default, instead of\n  `localhost`. These are effectively the same thing, but it's possible for\n  `localhost` not to work, depending on your host configuration. `127.0.0.1` is\n  more likely to work.\n\n## 2.2.7 (2023-09-01)\n\nAdded a `pid` column to the output of `alda ps`, the value of which is the\nprocess ID of each player and REPL server process in the list.\n\n## 2.2.6 (2023-08-18)\n\nUpgraded Go library dependencies to patch security vulnerabilities.\n\n## 2.2.5 (2023-05-07)\n\n* Corrected the casing of the word \"MIDI\" (it was \"Midi\" before) in the error\n  message when a MIDI Note is outside of the 0-127 range.\n\n* The new `alda import` command can import a MusicXML file and produce a working\n  Alda score. I'm excited about this - big thanks to [Scowluga] and [alan-ma]\n  for their hard work on this exciting new feature!\n\n  See [this blog post][alda-import-blog-post] for an overview of what `alda\n  import` can do and how to use it.\n\n## 2.2.4 (2022-11-24)\n\n* Added validation for when a MIDI note is outside of the 0-127 range.\n\n  Thanks to [kylewilk567] for the contribution!\n\n## 2.2.3 (2022-04-24)\n\n* Added a new `:parts` command that can be used during an Alda REPL session. It\n  prints information about the parts in the current score.\n\n  (To display more information about the current score, you can also use the\n  existing `:score info` command.)\n\n  Thanks, [n-makim], for the contribution!\n\n## 2.2.2 (2022-04-17)\n\nThis patch release is all about improvements to the way that player processes\nare managed in an Alda REPL session.\n\nThanks to [elyisgreat] for [reporting the issue][issue-404] and to [ksiyuan] for\ninvestigating and [contributing a fix][pr-418]!\n\n* Fixed a bug causing `:stop` to sometimes not work in an Alda REPL session.\n\n* Fixed spurious \"Failed to read player state\" warnings that were often\n  happening briefly while a player process is starting.\n\n* Fixed a potential edge case where, when using the Alda REPL, if a player\n  process unexpectedly shuts down (not common), the Alda REPL session might\n  continue to try to use the same player process.\n\n[issue-404]: https://github.com/alda-lang/alda/issues/404\n[pr-418]: https://github.com/alda-lang/alda/pull/418\n\n## 2.2.1 (2022-04-10)\n\n* Re-added the `pause` (i.e. rest) Lisp function that was available prior to\n  Alda 2.0.0, but accidentally omitted during the rewrite.\n\n  Thanks, [JustinLocke] for the contribution, and [UlyssesZh] for\n  reporting [the issue][issue-382]! :raised_hands:\n\n[issue-382]: https://github.com/alda-lang/alda/issues/382\n\n## 2.2.0 (2022-01-15)\n\n* On Mac computers, Alda now requires macOS 10.13 (High Sierra) or later.\n\n* There is now an experimental WebAssembly build of Alda! You can't do much with\n  it yet, but hopefully in the near future, we'll be able to run Alda in the\n  browser! :open_mouth:\n\n  If you're interested in following the discussion (or maybe even\n  contributing!), see [this issue][alda-in-the-browser].\n\n[alda-in-the-browser]: https://github.com/alda-lang/alda/issues/392\n\n## 2.1.0 (2021-12-29)\n\n* As a step to enable future work on exciting new features like automatic code\n  formatting and importing from other formats like MusicXML, we have done some\n  minor, under-the-hood refactoring of the Alda parser.\n\n  Prior to this release, the Alda parser took a shortcut in that it had a step\n  where it converted a list of tokens directly into a list of \"score updates\"\n  (notes, chords, etc.). There is an important step that we were missing, which\n  was producing an [AST][ast-wikipedia]. Whereas the parsing steps used to be:\n\n  ```\n  characters -> tokens -> score updates\n  ```\n\n  Now, the steps are:\n\n  ```\n  characters -> tokens -> AST -> score updates\n  ```\n\n  Although this is a minor refactor, there is some risk of breakage, so please\n  [open an issue][open-an-issue] if you notice any problems!\n\n* We've added options for outputting the parsed AST of a score. This can be\n  useful for debugging potential parser errors, as well as for building tooling\n  (e.g. in text editors) that depends on the AST of an Alda source file.\n\n  * `alda parse` now has `--output ast` and `--output ast-human` options.\n\n    `ast` output is the AST in data form, represented as a single JSON object.\n    Each AST node is an object that includes the keys `type` and (if the node\n    has other nodes as children) `children`:\n\n    ```\n    $ alda parse -c 'piano: c/e/g+' -o ast\n    {\"children\":[{\"children\":[{\"children\":[{\"children\":[{\"literal\":\"piano\",\"source-context\":{\"column\":1,\"line\":1},\"type\":\"PartNameNode\"}],\"source-context\":{\"column\":1,\"line\":1},\"type\":\"PartNamesNode\"}],\"source-context\":{\"column\":1,\"line\":1},\"type\":\"PartDeclarationNode\"},{\"children\":[{\"children\":[{\"children\":[{\"children\":[{\"literal\":\"c\",\"source-context\":{\"column\":8,\"line\":1},\"type\":\"NoteLetterNode\"}],\"source-context\":{\"column\":8,\"line\":1},\"type\":\"NoteLetterAndAccidentalsNode\"}],\"source-context\":{\"column\":8,\"line\":1},\"type\":\"NoteNode\"},{\"children\":[{\"children\":[{\"literal\":\"e\",\"source-context\":{\"column\":10,\"line\":1},\"type\":\"NoteLetterNode\"}],\"source-context\":{\"column\":10,\"line\":1},\"type\":\"NoteLetterAndAccidentalsNode\"}],\"source-context\":{\"column\":10,\"line\":1},\"type\":\"NoteNode\"},{\"children\":[{\"children\":[{\"literal\":\"g\",\"source-context\":{\"column\":12,\"line\":1},\"type\":\"NoteLetterNode\"},{\"children\":[{\"source-context\":{\"column\":13,\"line\":1},\"type\":\"SharpNode\"}],\"source-context\":{\"column\":13,\"line\":1},\"type\":\"NoteAccidentalsNode\"}],\"source-context\":{\"column\":12,\"line\":1},\"type\":\"NoteLetterAndAccidentalsNode\"}],\"source-context\":{\"column\":12,\"line\":1},\"type\":\"NoteNode\"}],\"source-context\":{\"column\":8,\"line\":1},\"type\":\"ChordNode\"}],\"source-context\":{\"column\":8,\"line\":1},\"type\":\"EventSequenceNode\"}],\"source-context\":{\"column\":1,\"line\":1},\"type\":\"PartNode\"}],\"type\":\"RootNode\"}\n    ```\n\n    `ast-human` output is the AST in a more compact, human-readable format:\n\n    ```\n    $ alda parse -c 'piano: c/e/g+' -o ast-human\n    RootNode\n      PartNode [1:1]\n        PartDeclarationNode [1:1]\n          PartNamesNode [1:1]\n            PartNameNode [1:1]: \"piano\"\n        EventSequenceNode [1:8]\n          ChordNode [1:8]\n            NoteNode [1:8]\n              NoteLetterAndAccidentalsNode [1:8]\n                NoteLetterNode [1:8]: \"c\"\n            NoteNode [1:10]\n              NoteLetterAndAccidentalsNode [1:10]\n                NoteLetterNode [1:10]: \"e\"\n            NoteNode [1:12]\n              NoteLetterAndAccidentalsNode [1:12]\n                NoteLetterNode [1:12]: \"g\"\n                NoteAccidentalsNode [1:13]\n                  SharpNode [1:13]\n    ```\n\n  * In the Alda REPL, the `:score` command now has an `ast` option, which prints\n    the human-readable version of the AST output:\n\n    ```\n    alda> bassoon: o2 f\n    alda> :score ast\n    RootNode\n      PartNode [1:1]\n        PartDeclarationNode [1:1]\n          PartNamesNode [1:1]\n            PartNameNode [1:1]: \"bassoon\"\n        EventSequenceNode [1:10]\n          OctaveSetNode [1:10]: 2\n          NoteNode [1:13]\n            NoteLetterAndAccidentalsNode [1:13]\n              NoteLetterNode [1:13]: \"f\"\n    ```\n\n[ast-wikipedia]: https://en.wikipedia.org/wiki/Abstract_syntax_tree\n[open-an-issue]: https://github.com/alda-lang/alda/issues/new/choose\n\n## 2.0.8 (2021-12-20)\n\n* Security update: upgraded log4j to version 2.17.0 to patch CVEs.\n\n## 2.0.7 (2021-12-15)\n\n* Security update: upgraded log4j to version 2.16.0 to patch CVEs.\n\n## 2.0.6 (2021-10-04)\n\n* Fixed [a bug][issue-398] where a note length of 0 (e.g. `c0`) was accepted,\n  and the note would play forever. A note length of `0`, `0s` or `0ms` now\n  results in a validation error.\n\n[issue-398]: https://github.com/alda-lang/alda/issues/398\n\n## 2.0.5 (2021-08-22)\n\n* Fixed [a bug][issue-388] where using an octave change inside a chord inside a\n  cram expression produced unexpected results.\n\n* Fixed [a bug][issue-389] where playback was sometimes ending abruptly before\n  the end of the score.\n\n[issue-388]: https://github.com/alda-lang/alda/issues/388\n[issue-389]: https://github.com/alda-lang/alda/issues/389\n\n## 2.0.4 (2021-08-14)\n\n* `alda shutdown` now prints a helpful message letting you know what it is\n  doing (shutting down player processes).\n\n* If `alda stop` or `alda shutdown` fails to send a \"stop\" or \"shutdown\" message\n  to a player process, it will now print a warning and continue instead of\n  printing an error and exiting. (This scenario is usually not a critical\n  problem, and it will resolve itself within a couple of minutes.)\n\n* `alda play` and `alda export` are now more resilient against scenarios where\n  old player processes died mysteriously and left around stale state files that\n  suggest they are still reachable.\n\n  In scenarios like those, there will now be a long pause while the Alda client\n  attempts to reach the dead player process, then it will print a warning saying\n  it was unable to do so, and proceed to try another player process. This might\n  happen a few times, but Alda will eventually recover and proceed to\n  play/export your score.\n\n  Note that this should rarely, if ever, happen! If you are seeing this happen a\n  lot, then there is probably something weird going on with your player\n  processes. Please have a look at the player logs (run `alda-player info` to\n  learn where to find the logs) and let us know if you see any errors or\n  stacktraces. This information will help us make further improvements in the\n  future!\n\n## 2.0.3 (2021-08-01)\n\n* Fixed a bug where input like `[c1s]` (a duration in seconds at the end of an\n  event sequence) was causing a parse error.\n\n* Fixed a sporadic runtime error where this message would appear:\n\n  `panic: runtime error: invalid memory address or nil pointer dereference`\n\n* `alda ps` output now includes Alda REPL servers in addition to player\n  processes. Example output:\n\n  ```\n  $ alda ps | column -t -s $'\\t'\n  id   port   state   expiry              type\n  itv  33659  ready   5 minutes from now  player\n  lhx  36583  active  5 minutes from now  player\n  olt  34539  ready   5 minutes from now  player\n  utj  40235  ready   5 minutes from now  player\n  yae  35935  ready   7 minutes from now  player\n  zew  40425  ready   6 minutes from now  player\n  itp  33643  -       -                   repl-server\n  jom  34191  -       -                   repl-server\n  ```\n\n## 2.0.2 (2021-07-31)\n\n* Fixed a \"stale state\" bug where Alda would occasionally attempt to use old\n  player processes that are no longer running. Whereas before, only player\n  processes would clean up stale state files, now the client cleans them up too,\n  to ensure that the information is up to date at the point in time when the\n  client needs it.\n\n  For more information, see [issue #369][issue-369].\n\n* Related to the above, the `alda` client and `alda-player` processes now\n  consider a state file to be \"stale\" if it hasn't been updated in 2 minutes,\n  instead of 10 minutes.\n\n[issue-369]: https://github.com/alda-lang/alda/issues/369\n\n## 2.0.1 (2021-07-05)\n\n* Alda will now attempt to detect if it's running in an environment (e.g.\n  the CMD program that ships with Windows 7) that does not support ANSI escape\n  codes to display colored text. If the environment does not appear to support\n  ANSI escape codes, Alda will not display colored text (which is better in that\n  case because otherwise you would see a bunch of weird-looking characters in\n  places where there should be colored text!).\n\n* Prior to this release, it wasn't obvious that it's incorrect to enter a\n  command like:\n\n  ```\n  alda play my-score.alda\n  ```\n\n  The correct way to specify a score file to read is to use the `-f, --file`\n  option:\n\n  ```\n  alda play -f my-score.alda\n  ```\n\n  Instead of silently ignoring the provided file name, the Alda CLI will now\n  print a useful error message.\n\n## 2.0.0 (2021-06-30)\n\nAlda 2 is a from-the-ground-up rewrite, optimized for simpler architecture,\nbetter performance, and a foundation for future work to enable fun live coding\nfeatures.\n\nFor information about what's new, what's changed, and what to expect, check out\nthe [Alda 2 migration guide][migration-guide]!\n\n[migration-guide]: https://github.com/alda-lang/alda/blob/master/doc/alda-2-migration-guide.md\n\n---\n\n## Earlier Versions\n\n* [1.0.0 - 1.X.X](CHANGELOG-1.X.X.md)\n* [0.1.0 - 0.X.X](CHANGELOG-0.X.X.md)\n\n[JustinLocke]: https://github.com/JustinLocke\n[UlyssesZh]: https://github.com/UlyssesZh\n[elyisgreat]: https://github.com/elyisgreat\n[ksiyuan]: https://github.com/ksiyuan\n[n-makim]: https://github.com/n-makim\n[kylewilk567]: https://github.com/kylewilk567\n[Scowluga]: https://github.com/Scowluga\n[alan-ma]: https://github.com/alan-ma\n[Vanello1908]: https://github.com/Vanello1908\n\n[alda-import-blog-post]: https://blog.djy.io/musicxml-import-and-another-new-alda-features/\n[midi-channel-assignment-discussion]: https://github.com/alda-lang/alda/discussions/447\n[all-instruments]: ./examples/all-instruments.alda\n[midi-channel-management]: ./examples/midi-channel-management.alda\n[midi-channel-management-2]: ./examples/midi-channel-management-2.alda\n[midi-channel-attribute]: ./doc/attributes.md#midi-channel\n[issue-405]: https://github.com/alda-lang/alda/issues/405\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1015625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\ndave.yarwood@gmail.com.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behavior. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behavior,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.9951171875,
          "content": "# Contributing to Alda\n\nWe're working on the following projects:\n\n- The Alda [**client**](#client), written in Go.\n- The Alda [**player**](#player), written in Kotlin.\n- The official Alda website, [**alda.io**](https://alda.io).\n\nThe source code for the Alda client and player lives in this repo.\n\nThe website has [its own repo][alda-site-repo].\n\nPull requests to contribute to any of these projects are warmly welcomed. Please\nfeel free to take on any open issue that interests you, and let us know if you\nneed any help!\n\n[alda-site-repo]: https://github.com/alda-lang/alda.io\n\n## General Instructions\n\n- Fork the repository and make changes on your fork.\n- Test your changes and make sure everything is working. Please add test cases\n  to the unit tests whenever possible.\n- Submit a Pull Request.\n- Your Pull Request should get the Dave Yarwood Seal of Approval™ before being\n  merged.\n\nIf you need help understanding how something works or if you have any other\nquestions, stop by the `#development` channel in the [Alda Slack\ngroup](http://slack.alda.io) and say hi. We'll be happy to help!\n\n## Development Guide\n\n### Client\n\nThe Alda client is a Go program that parses input (Alda code), turns it into a\ndata representation of a musical score, and sends instructions to an Alda player\nprocess to perform the score.\n\nFor more info, see the [README](client/README.md) in the `client/` folder of\nthis repo.\n\n### Player\n\nAlda is designed so that playback is asynchronous. When you use the Alda client\nto play a score, the client sends a bunch of [OSC][osc-page] messages to a\nseparate player process running in the background.\n\nThe player process is agnostic of the Alda language. It simply receives and\nhandles OSC messages containing lower-level instructions that tell it what\nnotes to play, etc.\n\nThe player supports live coding in that it allows you to define, modify, and\nloop patterns during playback.\n\nFor more info, see the [README](player/README.md) in the `player/` folder of\nthis repo.\n\n[osc-page]: http://opensoundcontrol.org\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 14.13671875,
          "content": "Eclipse Public License - v 2.0\r\n\r\n    THE ACCOMPANYING PROGRAM IS PROVIDED UNDER THE TERMS OF THIS ECLIPSE\r\n    PUBLIC LICENSE (\"AGREEMENT\"). ANY USE, REPRODUCTION OR DISTRIBUTION\r\n    OF THE PROGRAM CONSTITUTES RECIPIENT'S ACCEPTANCE OF THIS AGREEMENT.\r\n\r\n1. DEFINITIONS\r\n\r\n\"Contribution\" means:\r\n\r\n  a) in the case of the initial Contributor, the initial content\r\n     Distributed under this Agreement, and\r\n\r\n  b) in the case of each subsequent Contributor:\r\n     i) changes to the Program, and\r\n     ii) additions to the Program;\r\n  where such changes and/or additions to the Program originate from\r\n  and are Distributed by that particular Contributor. A Contribution\r\n  \"originates\" from a Contributor if it was added to the Program by\r\n  such Contributor itself or anyone acting on such Contributor's behalf.\r\n  Contributions do not include changes or additions to the Program that\r\n  are not Modified Works.\r\n\r\n\"Contributor\" means any person or entity that Distributes the Program.\r\n\r\n\"Licensed Patents\" mean patent claims licensable by a Contributor which\r\nare necessarily infringed by the use or sale of its Contribution alone\r\nor when combined with the Program.\r\n\r\n\"Program\" means the Contributions Distributed in accordance with this\r\nAgreement.\r\n\r\n\"Recipient\" means anyone who receives the Program under this Agreement\r\nor any Secondary License (as applicable), including Contributors.\r\n\r\n\"Derivative Works\" shall mean any work, whether in Source Code or other\r\nform, that is based on (or derived from) the Program and for which the\r\neditorial revisions, annotations, elaborations, or other modifications\r\nrepresent, as a whole, an original work of authorship.\r\n\r\n\"Modified Works\" shall mean any work in Source Code or other form that\r\nresults from an addition to, deletion from, or modification of the\r\ncontents of the Program, including, for purposes of clarity any new file\r\nin Source Code form that contains any contents of the Program. Modified\r\nWorks shall not include works that contain only declarations,\r\ninterfaces, types, classes, structures, or files of the Program solely\r\nin each case in order to link to, bind by name, or subclass the Program\r\nor Modified Works thereof.\r\n\r\n\"Distribute\" means the acts of a) distributing or b) making available\r\nin any manner that enables the transfer of a copy.\r\n\r\n\"Source Code\" means the form of a Program preferred for making\r\nmodifications, including but not limited to software source code,\r\ndocumentation source, and configuration files.\r\n\r\n\"Secondary License\" means either the GNU General Public License,\r\nVersion 2.0, or any later versions of that license, including any\r\nexceptions or additional permissions as identified by the initial\r\nContributor.\r\n\r\n2. GRANT OF RIGHTS\r\n\r\n  a) Subject to the terms of this Agreement, each Contributor hereby\r\n  grants Recipient a non-exclusive, worldwide, royalty-free copyright\r\n  license to reproduce, prepare Derivative Works of, publicly display,\r\n  publicly perform, Distribute and sublicense the Contribution of such\r\n  Contributor, if any, and such Derivative Works.\r\n\r\n  b) Subject to the terms of this Agreement, each Contributor hereby\r\n  grants Recipient a non-exclusive, worldwide, royalty-free patent\r\n  license under Licensed Patents to make, use, sell, offer to sell,\r\n  import and otherwise transfer the Contribution of such Contributor,\r\n  if any, in Source Code or other form. This patent license shall\r\n  apply to the combination of the Contribution and the Program if, at\r\n  the time the Contribution is added by the Contributor, such addition\r\n  of the Contribution causes such combination to be covered by the\r\n  Licensed Patents. The patent license shall not apply to any other\r\n  combinations which include the Contribution. No hardware per se is\r\n  licensed hereunder.\r\n\r\n  c) Recipient understands that although each Contributor grants the\r\n  licenses to its Contributions set forth herein, no assurances are\r\n  provided by any Contributor that the Program does not infringe the\r\n  patent or other intellectual property rights of any other entity.\r\n  Each Contributor disclaims any liability to Recipient for claims\r\n  brought by any other entity based on infringement of intellectual\r\n  property rights or otherwise. As a condition to exercising the\r\n  rights and licenses granted hereunder, each Recipient hereby\r\n  assumes sole responsibility to secure any other intellectual\r\n  property rights needed, if any. For example, if a third party\r\n  patent license is required to allow Recipient to Distribute the\r\n  Program, it is Recipient's responsibility to acquire that license\r\n  before distributing the Program.\r\n\r\n  d) Each Contributor represents that to its knowledge it has\r\n  sufficient copyright rights in its Contribution, if any, to grant\r\n  the copyright license set forth in this Agreement.\r\n\r\n  e) Notwithstanding the terms of any Secondary License, no\r\n  Contributor makes additional grants to any Recipient (other than\r\n  those set forth in this Agreement) as a result of such Recipient's\r\n  receipt of the Program under the terms of a Secondary License\r\n  (if permitted under the terms of Section 3).\r\n\r\n3. REQUIREMENTS\r\n\r\n3.1 If a Contributor Distributes the Program in any form, then:\r\n\r\n  a) the Program must also be made available as Source Code, in\r\n  accordance with section 3.2, and the Contributor must accompany\r\n  the Program with a statement that the Source Code for the Program\r\n  is available under this Agreement, and informs Recipients how to\r\n  obtain it in a reasonable manner on or through a medium customarily\r\n  used for software exchange; and\r\n\r\n  b) the Contributor may Distribute the Program under a license\r\n  different than this Agreement, provided that such license:\r\n     i) effectively disclaims on behalf of all other Contributors all\r\n     warranties and conditions, express and implied, including\r\n     warranties or conditions of title and non-infringement, and\r\n     implied warranties or conditions of merchantability and fitness\r\n     for a particular purpose;\r\n\r\n     ii) effectively excludes on behalf of all other Contributors all\r\n     liability for damages, including direct, indirect, special,\r\n     incidental and consequential damages, such as lost profits;\r\n\r\n     iii) does not attempt to limit or alter the recipients' rights\r\n     in the Source Code under section 3.2; and\r\n\r\n     iv) requires any subsequent distribution of the Program by any\r\n     party to be under a license that satisfies the requirements\r\n     of this section 3.\r\n\r\n3.2 When the Program is Distributed as Source Code:\r\n\r\n  a) it must be made available under this Agreement, or if the\r\n  Program (i) is combined with other material in a separate file or\r\n  files made available under a Secondary License, and (ii) the initial\r\n  Contributor attached to the Source Code the notice described in\r\n  Exhibit A of this Agreement, then the Program may be made available\r\n  under the terms of such Secondary Licenses, and\r\n\r\n  b) a copy of this Agreement must be included with each copy of\r\n  the Program.\r\n\r\n3.3 Contributors may not remove or alter any copyright, patent,\r\ntrademark, attribution notices, disclaimers of warranty, or limitations\r\nof liability (\"notices\") contained within the Program from any copy of\r\nthe Program which they Distribute, provided that Contributors may add\r\ntheir own appropriate notices.\r\n\r\n4. COMMERCIAL DISTRIBUTION\r\n\r\nCommercial distributors of software may accept certain responsibilities\r\nwith respect to end users, business partners and the like. While this\r\nlicense is intended to facilitate the commercial use of the Program,\r\nthe Contributor who includes the Program in a commercial product\r\noffering should do so in a manner which does not create potential\r\nliability for other Contributors. Therefore, if a Contributor includes\r\nthe Program in a commercial product offering, such Contributor\r\n(\"Commercial Contributor\") hereby agrees to defend and indemnify every\r\nother Contributor (\"Indemnified Contributor\") against any losses,\r\ndamages and costs (collectively \"Losses\") arising from claims, lawsuits\r\nand other legal actions brought by a third party against the Indemnified\r\nContributor to the extent caused by the acts or omissions of such\r\nCommercial Contributor in connection with its distribution of the Program\r\nin a commercial product offering. The obligations in this section do not\r\napply to any claims or Losses relating to any actual or alleged\r\nintellectual property infringement. In order to qualify, an Indemnified\r\nContributor must: a) promptly notify the Commercial Contributor in\r\nwriting of such claim, and b) allow the Commercial Contributor to control,\r\nand cooperate with the Commercial Contributor in, the defense and any\r\nrelated settlement negotiations. The Indemnified Contributor may\r\nparticipate in any such claim at its own expense.\r\n\r\nFor example, a Contributor might include the Program in a commercial\r\nproduct offering, Product X. That Contributor is then a Commercial\r\nContributor. If that Commercial Contributor then makes performance\r\nclaims, or offers warranties related to Product X, those performance\r\nclaims and warranties are such Commercial Contributor's responsibility\r\nalone. Under this section, the Commercial Contributor would have to\r\ndefend claims against the other Contributors related to those performance\r\nclaims and warranties, and if a court requires any other Contributor to\r\npay any damages as a result, the Commercial Contributor must pay\r\nthose damages.\r\n\r\n5. NO WARRANTY\r\n\r\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT\r\nPERMITTED BY APPLICABLE LAW, THE PROGRAM IS PROVIDED ON AN \"AS IS\"\r\nBASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR\r\nIMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS OF\r\nTITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR\r\nPURPOSE. Each Recipient is solely responsible for determining the\r\nappropriateness of using and distributing the Program and assumes all\r\nrisks associated with its exercise of rights under this Agreement,\r\nincluding but not limited to the risks and costs of program errors,\r\ncompliance with applicable laws, damage to or loss of data, programs\r\nor equipment, and unavailability or interruption of operations.\r\n\r\n6. DISCLAIMER OF LIABILITY\r\n\r\nEXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, AND TO THE EXTENT\r\nPERMITTED BY APPLICABLE LAW, NEITHER RECIPIENT NOR ANY CONTRIBUTORS\r\nSHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION LOST\r\nPROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\nARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE\r\nEXERCISE OF ANY RIGHTS GRANTED HEREUNDER, EVEN IF ADVISED OF THE\r\nPOSSIBILITY OF SUCH DAMAGES.\r\n\r\n7. GENERAL\r\n\r\nIf any provision of this Agreement is invalid or unenforceable under\r\napplicable law, it shall not affect the validity or enforceability of\r\nthe remainder of the terms of this Agreement, and without further\r\naction by the parties hereto, such provision shall be reformed to the\r\nminimum extent necessary to make such provision valid and enforceable.\r\n\r\nIf Recipient institutes patent litigation against any entity\r\n(including a cross-claim or counterclaim in a lawsuit) alleging that the\r\nProgram itself (excluding combinations of the Program with other software\r\nor hardware) infringes such Recipient's patent(s), then such Recipient's\r\nrights granted under Section 2(b) shall terminate as of the date such\r\nlitigation is filed.\r\n\r\nAll Recipient's rights under this Agreement shall terminate if it\r\nfails to comply with any of the material terms or conditions of this\r\nAgreement and does not cure such failure in a reasonable period of\r\ntime after becoming aware of such noncompliance. If all Recipient's\r\nrights under this Agreement terminate, Recipient agrees to cease use\r\nand distribution of the Program as soon as reasonably practicable.\r\nHowever, Recipient's obligations under this Agreement and any licenses\r\ngranted by Recipient relating to the Program shall continue and survive.\r\n\r\nEveryone is permitted to copy and distribute copies of this Agreement,\r\nbut in order to avoid inconsistency the Agreement is copyrighted and\r\nmay only be modified in the following manner. The Agreement Steward\r\nreserves the right to publish new versions (including revisions) of\r\nthis Agreement from time to time. No one other than the Agreement\r\nSteward has the right to modify this Agreement. The Eclipse Foundation\r\nis the initial Agreement Steward. The Eclipse Foundation may assign the\r\nresponsibility to serve as the Agreement Steward to a suitable separate\r\nentity. Each new version of the Agreement will be given a distinguishing\r\nversion number. The Program (including Contributions) may always be\r\nDistributed subject to the version of the Agreement under which it was\r\nreceived. In addition, after a new version of the Agreement is published,\r\nContributor may elect to Distribute the Program (including its\r\nContributions) under the new version.\r\n\r\nExcept as expressly stated in Sections 2(a) and 2(b) above, Recipient\r\nreceives no rights or licenses to the intellectual property of any\r\nContributor under this Agreement, whether expressly, by implication,\r\nestoppel or otherwise. All rights in the Program not expressly granted\r\nunder this Agreement are reserved. Nothing in this Agreement is intended\r\nto be enforceable by any entity that is not a Contributor or Recipient.\r\nNo third-party beneficiary rights are created under this Agreement.\r\n\r\nExhibit A - Form of Secondary Licenses Notice\r\n\r\n\"This Source Code may also be made available under the following \r\nSecondary Licenses when the conditions for such availability set forth \r\nin the Eclipse Public License, v. 2.0 are satisfied: {name license(s),\r\nversion(s), and exceptions or additional permissions here}.\"\r\n\r\n  Simply including a copy of this Agreement, including this Exhibit A\r\n  is not sufficient to license the Source Code under Secondary Licenses.\r\n\r\n  If it is not possible or desirable to put the notice in a particular\r\n  file, then You may include the notice in a location (such as a LICENSE\r\n  file in a relevant directory) where a recipient would be likely to\r\n  look for such a notice.\r\n\r\n  You may add additional accurate notices of copyright ownership.\r\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.470703125,
          "content": "<p align=\"center\">\n  <a href=\"http://alda.io\">\n    <img src=\"alda-logo-horizontal.svg\"\n         alt=\"alda logo\"\n         width=360\n         height=128>\n  </a>\n\n  <p align=\"center\">\n  <b><a href=\"#installation\">Installation</a></b>\n  |\n  <b><a href=\"doc/index.md\">Docs</a></b>\n  |\n  <b><a href=\"CHANGELOG.md\">Changelog</a></b>\n  |\n  <b><a href=\"#contributing\">Contributing</a></b>\n\n  <br>\n  <br>\n\n  <a href=\"http://slack.alda.io\">\n    Join us on Slack!\n  </a>\n  </p>\n</p>\n\nAlda is a text-based programming language for music composition. It allows you\nto compose and play back music using only your text editor and the command line.\n\n```alda\npiano:\n  o3\n  g8 a b > c d e f+ g | a b > c d e f+ g4\n  g8 f+ e d c < b a g | f+ e d c < b a g4\n  << g1/>g/>g/b/>d/g\n```\n\n> For more examples, see these [example scores](./examples/).\n\nThe language's design equally favors aesthetics, flexibility and ease of use.\n\n(Why compose music this way instead of in a graphical sheet music notation\nprogram? See [this blog post][alda-blog-post] for a brief history and\nrationale.)\n\n[alda-blog-post]: https://blog.djy.io/alda-a-manifesto-and-gentle-introduction/\n\n## Features\n\n* Easy to understand, markup-like syntax.\n* Designed for musicians who don't know how to program, as well as programmers\n  who don't know how to music.\n* A score is a text file that can be played using the `alda` command-line tool.\n* [Interactive REPL](doc/alda-repl.md) lets you enter Alda code and hear the\n  results in real time.\n* Supports [writing music\n  programmatically](doc/writing-music-programmatically.md) (for algorithmic\n  composition, live coding, etc.)\n* Create MIDI music using any of the instruments in the [General MIDI Sound\n  Set][gm-sound-set]\n\n[gm-sound-set]: http://www.midi.org/techspecs/gm1sound.php\n\n### Planned\n\n> If you'd like to help, come on in -- [the water's fine](#contributing)!\n\n* [Run Alda in the browser](https://github.com/alda-lang/alda/discussions/455)\n* [Define and use waveform synthesis instruments](https://github.com/alda-lang/alda/discussions/435)\n* [Export to MusicXML](https://github.com/alda-lang/alda/discussions/424) for inter-operability with other music software\n* [Improve Raspberry Pi support](https://github.com/alda-lang/alda/discussions/456)\n\n## Installation\n\nSee [the official website][alda-install] for instructions to install the latest\nrelease of Alda.\n\n[alda-install]: https://alda.io/install\n\n## Demo\n\nFor an overview of available commands and options:\n\n    alda --help\n\nTo play a file containing Alda code:\n\n    alda play --file examples/bach_cello_suite_no_1.alda\n\nTo play arbitrary code at the command line:\n\n    alda play --code \"piano: c6 d12 e6 g12~4\"\n\nTo start an interactive [Alda REPL](doc/alda-repl.md) session:\n\n    alda repl\n\n## Documentation\n\nAlda's documentation can be found [here](doc/index.md).\n\n## Contributing\n\nWe'd love your help -- Pull Requests welcome!\n\nFor more details on how you can contribute to Alda, see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n> Another way you can contribute is by [sponsoring Dave][gh-sponsor] in the\n> future development of Alda.\n\n[gh-sponsor]: https://github.com/sponsors/daveyarwood\n\n## Support, Discussion, Camaraderie\n\n**Slack**: Joining the [Alda Slack group](http://slack.alda.io) is quick and\npainless. Come say hi!\n\n**Reddit**: Subscribe to the [/r/alda](https://www.reddit.com/r/alda/)\nsubreddit, where you can discuss all things Alda and share your Alda scores!\n\n## License\n\nCopyright © 2012-2024 Dave Yarwood et al\n\nDistributed under the Eclipse Public License version 2.0.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.005859375,
          "content": "2.3.1\n"
        },
        {
          "name": "alda-logo-horizontal.svg",
          "type": "blob",
          "size": 38.6669921875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"350\"\n   height=\"100\"\n   viewBox=\"0 0 350 100\"\n   version=\"1.1\"\n   id=\"SVGRoot\"\n   inkscape:version=\"0.92.5 (0.92.5+68)\"\n   sodipodi:docname=\"alda-logo-horizontal.svg\"\n   inkscape:export-filename=\"/home/dave/Downloads/alda-favicon.png\"\n   inkscape:export-xdpi=\"96\"\n   inkscape:export-ydpi=\"96\">\n  <defs\n     id=\"defs815\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"1.4142135\"\n     inkscape:cx=\"7.1673523\"\n     inkscape:cy=\"57.528056\"\n     inkscape:document-units=\"px\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     inkscape:window-width=\"958\"\n     inkscape:window-height=\"1053\"\n     inkscape:window-x=\"960\"\n     inkscape:window-y=\"0\"\n     inkscape:window-maximized=\"0\"\n     inkscape:grid-bbox=\"true\"\n     showguides=\"false\" />\n  <metadata\n     id=\"metadata818\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title />\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\">\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"-10.75\"\n       y=\"-90.875\"\n       id=\"text39932\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39930\"\n         x=\"-10.75\"\n         y=\"-55.484375\" /></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"-0.75\"\n       y=\"-110.125\"\n       id=\"text39936\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39934\"\n         x=\"-0.75\"\n         y=\"-74.734375\" /></text>\n    <flowRoot\n       xml:space=\"preserve\"\n       id=\"flowRoot39956\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"><flowRegion\n         id=\"flowRegion39958\"><rect\n           id=\"rect39960\"\n           width=\"401.63666\"\n           height=\"43.840622\"\n           x=\"1.4142135\"\n           y=\"-138.29498\" /></flowRegion><flowPara\n         id=\"flowPara39962\" /></flowRoot>    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"287.08536\"\n       y=\"-176.47874\"\n       id=\"text39966\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39964\"\n         x=\"287.08536\"\n         y=\"-176.47874\"> </tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"64.634567\"\n       y=\"11.285757\"\n       id=\"text39970\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39968\"\n         x=\"64.634567\"\n         y=\"11.285757\"> </tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"159.80614\"\n       y=\"-177.89296\"\n       id=\"text39974\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39972\"\n         x=\"159.80614\"\n         y=\"-142.50233\" /></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"-135.05739\"\n       y=\"112.72792\"\n       id=\"text39978\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan39976\"\n         x=\"-135.05739\"\n         y=\"112.72792\"> </tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"107.25\"\n       y=\"75.75\"\n       id=\"text3168\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan3166\"\n         x=\"107.25\"\n         y=\"111.14062\" /></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:40px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none\"\n       x=\"110\"\n       y=\"77.375\"\n       id=\"text3172\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan3170\"\n         x=\"110\"\n         y=\"112.76562\" /></text>\n    <g\n       aria-label=\"alda\"\n       style=\"font-style:normal;font-weight:normal;font-size:85.33333588px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;opacity:1;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"text3164\">\n      <path\n         d=\"m 172.37877,81.583336 q -0.45833,-0.875 -0.75,-2.166667 -0.25,-1.333333 -0.375,-2.75 -1.16667,1.166667 -2.625,2.208333 -1.41667,1.041667 -3.16667,1.833334 -1.70833,0.791667 -3.66666,1.25 -1.95834,0.458333 -4.16667,0.458333 -3.58333,0 -6.5,-1.041666 -2.875,-1.041667 -4.91667,-2.791667 -2,-1.791667 -3.125,-4.208334 -1.08333,-2.458333 -1.08333,-5.291666 0,-3.708334 1.45833,-6.500001 1.5,-2.791666 4.20834,-4.625 2.70833,-1.875 6.5,-2.791667 3.83333,-0.916666 8.54166,-0.916666 h 8.41667 v -3.541667 q 0,-2.041667 -0.75,-3.666667 -0.75,-1.625 -2.125,-2.75 -1.375,-1.166667 -3.375,-1.791667 -1.95833,-0.625 -4.41667,-0.625 -2.29166,0 -4.125,0.583334 -1.79166,0.583333 -3.04166,1.541666 -1.25,0.958334 -1.95834,2.291667 -0.66666,1.291667 -0.66666,2.708334 h -7.75 q 0.0417,-2.458334 1.25,-4.833334 1.25,-2.375 3.54166,-4.25 2.33334,-1.916667 5.625,-3.083333 3.33334,-1.166667 7.54167,-1.166667 3.83333,0 7.125,0.958333 3.29167,0.916667 5.66667,2.833334 2.41666,1.875 3.79166,4.708333 1.375,2.833334 1.375,6.625 v 20.958334 q 0,2.25 0.41667,4.791667 0.41667,2.5 1.16667,4.375 v 0.666667 z m -13.625,-5.875 q 2.25,0 4.20833,-0.583334 1.95834,-0.583333 3.54167,-1.541666 1.625,-0.958334 2.79167,-2.166667 1.16666,-1.25 1.83333,-2.583334 v -9.125 h -7.16667 q -6.75,0 -10.5,2 -3.75,2 -3.75,6.291667 0,1.666667 0.54167,3.083334 0.58333,1.416666 1.70833,2.458333 1.125,1 2.83334,1.583333 1.70833,0.583334 3.95833,0.583334 z\"\n         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:85.33333588px;font-family:'Roboto Mono for Powerline';-inkscape-font-specification:'Roboto Mono for Powerline';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;writing-mode:lr-tb;text-anchor:start;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         id=\"path912\" />\n      <path\n         d=\"m 195.12877,17.583334 h 23.04167 v 57.333335 h 14.70833 v 6.666667 h -37.75 V 74.916669 H 210.4621 V 24.291668 h -15.33333 z\"\n         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:85.33333588px;font-family:'Roboto Mono for Powerline';-inkscape-font-specification:'Roboto Mono for Powerline';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;writing-mode:lr-tb;text-anchor:start;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         id=\"path914\" />\n      <path\n         d=\"m 243.62877,58.666669 q 0,-5.041667 1.25,-9.250001 1.29167,-4.25 3.625,-7.291667 2.375,-3.041666 5.70834,-4.75 3.33333,-1.708333 7.45833,-1.708333 4.04167,0 7.04167,1.375 3.04166,1.333333 5.25,3.916667 V 17.583334 h 7.70833 v 64.000002 h -7.08333 l -0.33334,-4.75 q -2.25,2.75 -5.375,4.166667 -3.125,1.416666 -7.29166,1.416666 -4.08334,0 -7.41667,-1.75 -3.29167,-1.75 -5.625,-4.833333 -2.33333,-3.083334 -3.625,-7.250001 -1.29167,-4.208333 -1.29167,-9.041666 z m 7.70834,0.875 q 0,3.291666 0.70833,6.25 0.70833,2.958333 2.16667,5.208333 1.5,2.25 3.79166,3.583334 2.29167,1.291666 5.5,1.291666 1.95834,0 3.54167,-0.458333 1.58333,-0.458333 2.875,-1.291667 1.29167,-0.875 2.29167,-2.041666 1,-1.208334 1.75,-2.666667 V 48.500002 q -1.5,-2.750001 -4.04167,-4.500001 -2.54167,-1.791666 -6.33333,-1.791666 -3.25,0 -5.58334,1.333333 -2.29166,1.333333 -3.79166,3.625 -1.45834,2.25 -2.16667,5.25 -0.70833,2.958334 -0.70833,6.250001 z\"\n         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:85.33333588px;font-family:'Roboto Mono for Powerline';-inkscape-font-specification:'Roboto Mono for Powerline';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;writing-mode:lr-tb;text-anchor:start;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         id=\"path916\" />\n      <path\n         d=\"m 325.87877,81.583336 q -0.45833,-0.875 -0.75,-2.166667 -0.25,-1.333333 -0.375,-2.75 -1.16667,1.166667 -2.625,2.208333 -1.41667,1.041667 -3.16667,1.833334 -1.70833,0.791667 -3.66666,1.25 -1.95834,0.458333 -4.16667,0.458333 -3.58333,0 -6.5,-1.041666 -2.875,-1.041667 -4.91667,-2.791667 -2,-1.791667 -3.125,-4.208334 -1.08333,-2.458333 -1.08333,-5.291666 0,-3.708334 1.45833,-6.500001 1.5,-2.791666 4.20834,-4.625 2.70833,-1.875 6.5,-2.791667 3.83333,-0.916666 8.54166,-0.916666 h 8.41667 v -3.541667 q 0,-2.041667 -0.75,-3.666667 -0.75,-1.625 -2.125,-2.75 -1.375,-1.166667 -3.375,-1.791667 -1.95833,-0.625 -4.41667,-0.625 -2.29166,0 -4.125,0.583334 -1.79166,0.583333 -3.04166,1.541666 -1.25,0.958334 -1.95834,2.291667 -0.66666,1.291667 -0.66666,2.708334 h -7.75 q 0.0417,-2.458334 1.25,-4.833334 1.25,-2.375 3.54166,-4.25 2.33334,-1.916667 5.625,-3.083333 3.33334,-1.166667 7.54167,-1.166667 3.83333,0 7.125,0.958333 3.29167,0.916667 5.66667,2.833334 2.41666,1.875 3.79166,4.708333 1.375,2.833334 1.375,6.625 v 20.958334 q 0,2.25 0.41667,4.791667 0.41667,2.5 1.16667,4.375 v 0.666667 z m -13.625,-5.875 q 2.25,0 4.20833,-0.583334 1.95834,-0.583333 3.54167,-1.541666 1.625,-0.958334 2.79167,-2.166667 1.16666,-1.25 1.83333,-2.583334 v -9.125 h -7.16667 q -6.75,0 -10.5,2 -3.75,2 -3.75,6.291667 0,1.666667 0.54167,3.083334 0.58333,1.416666 1.70833,2.458333 1.125,1 2.83334,1.583333 1.70833,0.583334 3.95833,0.583334 z\"\n         style=\"font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:85.33333588px;font-family:'Roboto Mono for Powerline';-inkscape-font-specification:'Roboto Mono for Powerline';font-variant-ligatures:normal;font-variant-caps:normal;font-variant-numeric:normal;font-feature-settings:normal;text-align:start;writing-mode:lr-tb;text-anchor:start;vector-effect:none;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         id=\"path918\" />\n    </g>\n    <rect\n       y=\"75.181213\"\n       x=\"20.866341\"\n       height=\"1.9368176\"\n       width=\"96.20726\"\n       id=\"rect3003-4\"\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:0.16765696;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       y=\"62.161289\"\n       x=\"20.15049\"\n       height=\"1.9425192\"\n       width=\"96.490471\"\n       id=\"rect2999-2\"\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:0.5113343;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <g\n       style=\"fill:#909090;fill-opacity:1\"\n       id=\"g2869-5\"\n       transform=\"matrix(0.17044476,0,0,0.17044476,8.0995,15.516743)\">\n      <g\n         id=\"g2949-2\"\n         style=\"fill:#909090;fill-opacity:1\">\n        <path\n           id=\"path2861-4\"\n           style=\"opacity:1;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           transform=\"translate(429.92303,31.967713)\"\n           d=\"m 101.94994,130.7159 a 17.767208,17.767208 0 1 1 -35.534416,0 17.767208,17.767208 0 1 1 35.534416,0 z\"\n           inkscape:connector-curvature=\"0\" />\n        <path\n           id=\"path2863-4\"\n           style=\"opacity:1;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           transform=\"translate(429.92303,111.46773)\"\n           d=\"m 101.94994,130.7159 a 17.767208,17.767208 0 1 1 -35.534416,0 17.767208,17.767208 0 1 1 35.534416,0 z\"\n           inkscape:connector-curvature=\"0\" />\n        <rect\n           id=\"rect2865-3\"\n           style=\"opacity:1;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           y=\"45.047504\"\n           x=\"555.5\"\n           height=\"313.04129\"\n           width=\"16\" />\n        <rect\n           id=\"rect2867-8\"\n           style=\"opacity:1;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n           y=\"42.933613\"\n           x=\"594.5\"\n           ry=\"2.5381727\"\n           height=\"319\"\n           width=\"49\" />\n      </g>\n    </g>\n    <g\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       transform=\"matrix(-0.17044476,0,0,-0.17044476,129.65491,84.524233)\"\n       id=\"g2879-6\">\n      <path\n         id=\"path2871-0\"\n         style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         transform=\"translate(429.92303,31.967713)\"\n         d=\"m 101.94994,130.7159 a 17.767208,17.767208 0 1 1 -35.534416,0 17.767208,17.767208 0 1 1 35.534416,0 z\"\n         inkscape:connector-curvature=\"0\" />\n      <path\n         id=\"path2873-8\"\n         style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         transform=\"translate(429.92303,111.46773)\"\n         d=\"m 101.94994,130.7159 a 17.767208,17.767208 0 1 1 -35.534416,0 17.767208,17.767208 0 1 1 35.534416,0 z\"\n         inkscape:connector-curvature=\"0\" />\n      <rect\n         id=\"rect2875-9\"\n         style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         y=\"45.047504\"\n         x=\"555.5\"\n         height=\"313.04129\"\n         width=\"16\" />\n      <rect\n         id=\"rect2877-2\"\n         style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n         y=\"42.933613\"\n         x=\"594.5\"\n         ry=\"2.5381727\"\n         height=\"319\"\n         width=\"49\" />\n    </g>\n    <rect\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:0.16729446;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect2964-2\"\n       width=\"95.99926\"\n       height=\"1.9326302\"\n       x=\"20.481522\"\n       y=\"22.912685\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1814-3\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"67.398132\"\n       y=\"29.011845\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"25.007511\"\n       x=\"67.398132\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1816-1\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1818-8\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"67.398132\"\n       y=\"21.003162\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"16.998829\"\n       x=\"67.398132\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1820-3\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1822-4\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"54.801514\"\n       y=\"73.059509\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"73.059509\"\n       x=\"59.000381\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1824-2\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"77.063828\"\n       x=\"54.801514\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1826-2\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1828-4\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"59.000381\"\n       y=\"77.063828\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"81.068283\"\n       x=\"54.801514\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1830-5\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1832-1\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"59.000381\"\n       y=\"81.068283\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1834-7\"\n       width=\"3.6914976\"\n       height=\"3.5204675\"\n       x=\"67.398132\"\n       y=\"69.055237\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"65.050865\"\n       x=\"67.398132\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1836-5\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"73.059509\"\n       x=\"46.403778\"\n       height=\"3.5204675\"\n       width=\"3.6914976\"\n       id=\"rect1838-7\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1840-1\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"67.459663\"\n       y=\"13.053212\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1842-6\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"46.465302\"\n       y=\"77.122627\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"21.061886\"\n       x=\"71.658539\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1844-9\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1846-8\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"46.465302\"\n       y=\"81.126915\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"25.066219\"\n       x=\"71.658539\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1848-1\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"33.074863\"\n       x=\"67.459663\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1850-3\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1852-3\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"75.857422\"\n       y=\"25.066219\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"49.092213\"\n       x=\"67.459671\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1854-3\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1856-7\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"63.260788\"\n       y=\"69.113853\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1858-9\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"67.459671\"\n       y=\"53.096592\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"73.118324\"\n       x=\"63.260788\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1860-8\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1862-6\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"67.459671\"\n       y=\"57.100895\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"77.122627\"\n       x=\"63.260788\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1864-7\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"61.105274\"\n       x=\"67.459671\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1866-0\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1868-4\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"59.06192\"\n       y=\"69.113869\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1870-8\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"50.664169\"\n       y=\"69.113869\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"69.113869\"\n       x=\"54.863037\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1872-4\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"73.11834\"\n       x=\"50.664169\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1874-8\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1876-1\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"67.459663\"\n       y=\"37.079243\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"77.122627\"\n       x=\"50.664169\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1878-6\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1880-8\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"67.459663\"\n       y=\"41.08353\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1882-5\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"50.664169\"\n       y=\"81.126915\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"45.08791\"\n       x=\"67.459663\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1884-2\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"81.126915\"\n       x=\"42.266434\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1886-1\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1888-9\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"42.266434\"\n       y=\"77.122627\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1890-9\"\n       width=\"3.568388\"\n       height=\"3.4030621\"\n       x=\"46.465302\"\n       y=\"85.131203\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"85.131203\"\n       x=\"54.863052\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1892-6\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"85.131203\"\n       x=\"50.664169\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1894-0\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 67.45968,77.122583 h 3.56837 l -3.56837,3.40305 z\"\n       id=\"path1896-6\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1898-4\"\n       d=\"m 63.2608,81.126923 h 3.56837 l -3.56837,3.40305 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 59.06193,85.131253 h 3.5684 l -3.5684,3.40305 z\"\n       id=\"path1900-9\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1902-9\"\n       d=\"m 45.84943,85.145853 v 3.56839 l -3.40306,-3.56839 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 45.83483,76.521303 h -3.5684 l 3.5684,-3.40305 z\"\n       id=\"path1904-0\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1906-8\"\n       d=\"m 50.0337,72.516983 h -3.56839 l 3.56839,-3.40308 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"73.118324\"\n       x=\"67.459671\"\n       height=\"3.4030621\"\n       width=\"3.568388\"\n       id=\"rect1908-9\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1910-3\"\n       d=\"m 71.64392,20.445993 v -3.56837 l 3.40308,3.56837 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 75.84279,24.450323 v -3.56837 l 3.40308,3.56837 z\"\n       id=\"path1912-1\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1914-4\"\n       d=\"m 80.04167,28.454673 v -3.56839 l 3.40308,3.56839 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 84.04603,32.653553 v -3.5684 l 3.40306,3.5684 z\"\n       id=\"path1916-8\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1918-9\"\n       d=\"m 83.44475,29.085153 v 3.5684 l -3.40308,-3.5684 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 88.07323,52.152753 h 3.56839 l -3.56839,3.40308 z\"\n       id=\"path1960-6\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1962-7\"\n       d=\"m 83.93592,56.098393 h 3.56837 l -3.56837,3.40308 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 87.50429,55.555833 h -3.56837 l 3.56837,-3.40308 z\"\n       id=\"path1964-7\"\n       inkscape:connector-curvature=\"0\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"44.732555\"\n       x=\"88.169067\"\n       height=\"3.1196136\"\n       width=\"3.2711737\"\n       id=\"rect1974-3\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect3001-7\"\n       width=\"97.182541\"\n       height=\"1.9564518\"\n       x=\"20.327263\"\n       y=\"49.126591\" />\n    <rect\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\"\n       id=\"rect1947-1\"\n       width=\"3.2711737\"\n       height=\"3.1196136\"\n       x=\"88.169067\"\n       y=\"41.07037\"\n       rx=\"0\"\n       ry=\"0\" />\n    <rect\n       y=\"36.007206\"\n       x=\"20.504044\"\n       height=\"1.9564518\"\n       width=\"97.182541\"\n       id=\"rect3160-2\"\n       style=\"opacity:1;vector-effect:none;fill:#909090;fill-opacity:1;stroke:none;stroke-width:0.16935654;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <path\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\"\n       d=\"m 87.44909,33.284033 v 3.56839 l -3.40306,-3.56839 z\"\n       id=\"path1922-2\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path1920-1\"\n       d=\"m 88.05037,36.852423 v -3.56839 l 3.40305,3.56839 z\"\n       style=\"fill:#35c0ed;fill-opacity:0.82178219;stroke:none;stroke-width:1.01034355px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"48.394726\"\n       x=\"88.169067\"\n       height=\"3.1196136\"\n       width=\"3.2711737\"\n       id=\"rect1958-5\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n    <rect\n       ry=\"0\"\n       rx=\"0\"\n       y=\"37.408192\"\n       x=\"88.169067\"\n       height=\"3.1196136\"\n       width=\"3.2711737\"\n       id=\"rect1945-0\"\n       style=\"opacity:1;fill:#35c0ed;fill-opacity:0.82178219;stroke:#030303;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1\" />\n  </g>\n</svg>\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "client",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "player",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}