{
  "metadata": {
    "timestamp": 1736567514619,
    "page": 114,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gobuffalo/buffalo",
      "stars": 8097,
      "defaultBranch": "v1",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.404296875,
          "content": "---\nengines:\n  golint:\n    enabled: true\n    checks:\n      GoLint/Naming/MixedCaps:\n        enabled: false\n  govet:\n    enabled: true\n  gofmt:\n    enabled: true\n  fixme:\n    enabled: true\nratings:\n  paths:\n    - \"**.go\"\nexclude_paths:\n  - \"generators/*/templates/**/*\"\n  - \"buffalo/cmd/filetests/*\"\n  - \"examples/**/*\"\n  - \"vendor/**/*\"\n  - \"**/*_test.go\"\n  - \"*_test.go\"\n  - \"**_test.go\"\n  - \"middleware_test.go\"\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "coverage:\n  range: \"60...70\"\n\nstatus:\n  project: false\n  patch: false"
        },
        {
          "name": ".csslintrc",
          "type": "blob",
          "size": 0.1044921875,
          "content": "--exclude-exts=.min.css\n--ignore=adjoining-classes,box-model,ids,order-alphabetical,unqualified-attributes\n"
        },
        {
          "name": ".eslintignore",
          "type": "blob",
          "size": 0.015625,
          "content": "**/*{.,-}min.js\n"
        },
        {
          "name": ".eslintrc",
          "type": "blob",
          "size": 3.966796875,
          "content": "ecmaFeatures:\n  modules: true\n  jsx: true\n\nenv:\n  amd: true\n  browser: true\n  es6: true\n  jquery: true\n  node: true\n\n# http://eslint.org/docs/rules/\nrules:\n  # Possible Errors\n  comma-dangle: [2, never]\n  no-cond-assign: 2\n  no-console: 0\n  no-constant-condition: 2\n  no-control-regex: 2\n  no-debugger: 2\n  no-dupe-args: 2\n  no-dupe-keys: 2\n  no-duplicate-case: 2\n  no-empty: 2\n  no-empty-character-class: 2\n  no-ex-assign: 2\n  no-extra-boolean-cast: 2\n  no-extra-parens: 0\n  no-extra-semi: 2\n  no-func-assign: 2\n  no-inner-declarations: [2, functions]\n  no-invalid-regexp: 2\n  no-irregular-whitespace: 2\n  no-negated-in-lhs: 2\n  no-obj-calls: 2\n  no-regex-spaces: 2\n  no-sparse-arrays: 2\n  no-unexpected-multiline: 2\n  no-unreachable: 2\n  use-isnan: 2\n  valid-jsdoc: 0\n  valid-typeof: 2\n\n  # Best Practices\n  accessor-pairs: 2\n  block-scoped-var: 0\n  complexity: [2, 6]\n  consistent-return: 0\n  curly: 0\n  default-case: 0\n  dot-location: 0\n  dot-notation: 0\n  eqeqeq: 2\n  guard-for-in: 2\n  no-alert: 2\n  no-caller: 2\n  no-case-declarations: 2\n  no-div-regex: 2\n  no-else-return: 0\n  no-empty-label: 2\n  no-empty-pattern: 2\n  no-eq-null: 2\n  no-eval: 2\n  no-extend-native: 2\n  no-extra-bind: 2\n  no-fallthrough: 2\n  no-floating-decimal: 0\n  no-implicit-coercion: 0\n  no-implied-eval: 2\n  no-invalid-this: 0\n  no-iterator: 2\n  no-labels: 0\n  no-lone-blocks: 2\n  no-loop-func: 2\n  no-magic-number: 0\n  no-multi-spaces: 0\n  no-multi-str: 0\n  no-native-reassign: 2\n  no-new-func: 2\n  no-new-wrappers: 2\n  no-new: 2\n  no-octal-escape: 2\n  no-octal: 2\n  no-proto: 2\n  no-redeclare: 2\n  no-return-assign: 2\n  no-script-url: 2\n  no-self-compare: 2\n  no-sequences: 0\n  no-throw-literal: 0\n  no-unused-expressions: 2\n  no-useless-call: 2\n  no-useless-concat: 2\n  no-void: 2\n  no-warning-comments: 0\n  no-with: 2\n  radix: 2\n  vars-on-top: 0\n  wrap-iife: 2\n  yoda: 0\n\n  # Strict\n  strict: 0\n\n  # Variables\n  init-declarations: 0\n  no-catch-shadow: 2\n  no-delete-var: 2\n  no-label-var: 2\n  no-shadow-restricted-names: 2\n  no-shadow: 0\n  no-undef-init: 2\n  no-undef: 0\n  no-undefined: 0\n  no-unused-vars: 0\n  no-use-before-define: 0\n\n  # Node.js and CommonJS\n  callback-return: 2\n  global-require: 2\n  handle-callback-err: 2\n  no-mixed-requires: 0\n  no-new-require: 0\n  no-path-concat: 2\n  no-process-exit: 2\n  no-restricted-modules: 0\n  no-sync: 0\n\n  # Stylistic Issues\n  array-bracket-spacing: 0\n  block-spacing: 0\n  brace-style: 0\n  camelcase: 0\n  comma-spacing: 0\n  comma-style: 0\n  computed-property-spacing: 0\n  consistent-this: 0\n  eol-last: 0\n  func-names: 0\n  func-style: 0\n  id-length: 0\n  id-match: 0\n  indent: 0\n  jsx-quotes: 0\n  key-spacing: 0\n  linebreak-style: 0\n  lines-around-comment: 0\n  max-depth: 0\n  max-len: 0\n  max-nested-callbacks: 0\n  max-params: 0\n  max-statements: [2, 30]\n  new-cap: 0\n  new-parens: 0\n  newline-after-var: 0\n  no-array-constructor: 0\n  no-bitwise: 0\n  no-continue: 0\n  no-inline-comments: 0\n  no-lonely-if: 0\n  no-mixed-spaces-and-tabs: 0\n  no-multiple-empty-lines: 0\n  no-negated-condition: 0\n  no-nested-ternary: 0\n  no-new-object: 0\n  no-plusplus: 0\n  no-restricted-syntax: 0\n  no-spaced-func: 0\n  no-ternary: 0\n  no-trailing-spaces: 0\n  no-underscore-dangle: 0\n  no-unneeded-ternary: 0\n  object-curly-spacing: 0\n  one-var: 0\n  operator-assignment: 0\n  operator-linebreak: 0\n  padded-blocks: 0\n  quote-props: 0\n  quotes: 0\n  require-jsdoc: 0\n  semi-spacing: 0\n  semi: 0\n  sort-vars: 0\n  space-after-keywords: 0\n  space-before-blocks: 0\n  space-before-function-paren: 0\n  space-before-keywords: 0\n  space-in-parens: 0\n  space-infix-ops: 0\n  space-return-throw-case: 0\n  space-unary-ops: 0\n  spaced-comment: 0\n  wrap-regex: 0\n\n  # ECMAScript 6\n  arrow-body-style: 0\n  arrow-parens: 0\n  arrow-spacing: 0\n  constructor-super: 0\n  generator-star-spacing: 0\n  no-arrow-condition: 0\n  no-class-assign: 0\n  no-const-assign: 0\n  no-dupe-class-members: 0\n  no-this-before-super: 0\n  no-var: 0\n  object-shorthand: 0\n  prefer-arrow-callback: 0\n  prefer-const: 0\n  prefer-reflect: 0\n  prefer-spread: 0\n  prefer-template: 0\n  require-yield: 0\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2626953125,
          "content": "*.log\n.DS_Store\ndoc\ntmp\npkg\n*.gem\n*.pid\ncoverage\ncoverage.data\n*.pbxuser\n*.mode1v3\n.svn\nprofile\n.console_history\n.sass-cache/*\n.rake_tasks~\n*.log.lck\nsolr/\n.jhw-cache/\njhw.*\n*.sublime*\nnode_modules/\ndist/\ngenerated/\n.vendor/\nbin/*\ngin-bin\n.idea/\n.vscode/settings.json\r\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.2568359375,
          "content": "fast: true\nlinters:\n  enable-all: false\n  disable-all: false\n  enable:\n    - govet\n    - golint\n    - goimports\n    - deadcode\n    - typecheck\n    - ineffassign\n    - misspell\n    - nakedret\n    - unconvert\n    - megacheck\n    - varcheck\n  disable:\n    - errcheck"
        },
        {
          "name": "BACKERS.md",
          "type": "blob",
          "size": 0.93359375,
          "content": "# Financial Backers of the Buffalo Project\n\nBuffalo is a community-driven project that is run by individuals who believe that Buffalo is the way to quickly, and easily, build high quality, scalable applications in Go.\n\nFinancial contributions to the Buffalo go towards ongoing development costs, servers, swag, conferences, etc...\n\nIf you, or your company, use Buffalo, please consider supporting this effort to make rapid web development in Go, simple, easy, and fun!\n\n[http://patreon.com/buffalo](http://patreon.com/buffalo)\n\n---\n\n## Platinum Sponsors\n\n* **[Gopher Guides](https://www.gopherguides.com)**\n* **[PaperCall.io](https://www.papercall.io)**\n* [Your Company Here](http://patreon.com/buffalo)\n\n### Gold Sponsors\n\n* [Your Company Here](http://patreon.com/buffalo)\n\n### Premium Backers\n\n* [Your Company Here](http://patreon.com/buffalo)\n\n#### Generous Backers\n\n* **[Zhorty](https://zhorty.com)**\n* [Your Company Here](http://patreon.com/buffalo)\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.259765625,
          "content": "FROM gobuffalo/buffalo:latest\n\nARG CODECOV_TOKEN\n\nENV GOPROXY         https://proxy.golang.org\nENV BP              /src/buffalo\n\nRUN rm -rf $BP\nRUN mkdir -p $BP\n\nWORKDIR $BP\nCOPY . .\n\nRUN go mod tidy\nRUN go test -tags \"sqlite integration_test\" -cover -race -v ./...\n"
        },
        {
          "name": "Dockerfile.build",
          "type": "blob",
          "size": 1.3056640625,
          "content": "FROM golang:1.17\n\nEXPOSE 3000\n\nENV GOPROXY=https://proxy.golang.org\n\nRUN apt-get update \\\n    && apt-get install -y -q build-essential sqlite3 libsqlite3-dev postgresql libpq-dev vim\n\n# Installing Node 12\nRUN curl -sL https://deb.nodesource.com/setup_12.x | bash \nRUN apt-get update && apt-get install nodejs\n\n# Installing Postgres\nRUN sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main\" >> /etc/apt/sources.list.d/pgdg.list' \\\n    && wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | apt-key add - \\\n    && apt-get update \\\n    && apt-get install -y -q postgresql postgresql-contrib libpq-dev\\\n    && rm -rf /var/lib/apt/lists/* \\\n    && service postgresql start && \\\n    # Setting up password for postgres\n    su -c \"psql -c \\\"ALTER USER postgres  WITH PASSWORD 'postgres';\\\"\" - postgres\n\n# Installing yarn\nRUN npm install -g --no-progress yarn \\\n    && yarn config set yarn-offline-mirror /npm-packages-offline-cache \\\n    && yarn config set yarn-offline-mirror-pruning true\n\n# Install golangci\nRUN curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin v1.24.0\n# Installing buffalo binary\nRUN go install github.com/gobuffalo/cli/cmd/buffalo@latest\nRUN go get github.com/gobuffalo/buffalo-pop/v2\n\nRUN mkdir /src\nWORKDIR /src\n"
        },
        {
          "name": "Dockerfile.slim.build",
          "type": "blob",
          "size": 0.755859375,
          "content": "FROM golang:1.17-alpine\n\nEXPOSE 3000\n\nENV GOPROXY=https://proxy.golang.org \n\nRUN apk add --no-cache --upgrade apk-tools \\\n    && apk add --no-cache bash curl openssl git build-base nodejs npm sqlite sqlite-dev mysql-client vim postgresql libpq postgresql-contrib libc6-compat\n\n# Installing linter\nRUN curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh \\\n    | sh -s -- -b $(go env GOPATH)/bin v1.24.0\n\n# Installing Yarn\nRUN npm i -g --no-progress yarn \\\n    && yarn config set yarn-offline-mirror /npm-packages-offline-cache \\\n    && yarn config set yarn-offline-mirror-pruning true\n\n# Installing buffalo binary\nRUN go install github.com/gobuffalo/cli/cmd/buffalo@latest\nRUN go get github.com/gobuffalo/buffalo-pop/v2\n\nRUN mkdir /src\nWORKDIR /src\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.05078125,
          "content": "The MIT License (MIT)\nCopyright (c) 2016 Mark Bates\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.1171875,
          "content": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/gobuffalo/buffalo/master/logo.svg\" width=\"360\"></p>\n\n<p align=\"center\">\n<a href=\"https://pkg.go.dev/github.com/gobuffalo/buffalo\"><img src=\"https://pkg.go.dev/badge/github.com/gobuffalo/buffalo\" alt=\"PkgGoDev\"></a>\n<a href=\"https://github.com/gobuffalo/buffalo/actions/workflows/standard-go-test.yml\"><img src=\"https://github.com/gobuffalo/buffalo/actions/workflows/standard-go-test.yml/badge.svg\"></a>\n<a href=\"https://goreportcard.com/report/github.com/gobuffalo/buffalo\"><img src=\"https://goreportcard.com/badge/github.com/gobuffalo/buffalo\" alt=\"Go Report Card\" /></a>\n<a href=\"https://www.codetriage.com/gobuffalo/buffalo\"><img src=\"https://www.codetriage.com/gobuffalo/buffalo/badges/users.svg\" alt=\"Open Source Helpers\" /></a>\n</p>\n\n# Buffalo\n\nA Go web development eco-system, designed to make your project easier.\n\nBuffalo helps you to generate a web project that already has everything from front-end (JavaScript, SCSS, etc.) to the back-end (database, routing, etc.) already hooked up and ready to run. From there it provides easy APIs to build your web application quickly in Go.\n\nBuffalo **isn't just a framework**; it's a holistic web development environment and project structure that **lets developers get straight to the business** of, well, building their business.\n\n> I :heart: web dev in go again - Brian Ketelsen\n\n## Versions\n\nThe current stable version of Buffalo core is v1 (`v1` branch).\n\nVersions (branches):\n* `main` is for the current mainstream development.\n* `v1` is the current stable release.\n\n## ⚠️ Important\n\nBuffalo works only with Go [modules](https://blog.golang.org/using-go-modules). `GOPATH` mode is likely to break most of the functionality of the Buffalo eco-system. Please see [this blog post](https://blog.gobuffalo.io/the-road-to-1-0-requiring-modules-5672c6b015e5) for more information.\n\nAlso, the Buffalo team actively gives support to the last 2 versions of Go, which at the moment are:\n\n- 1.16.x\n- 1.17.x\n\nWhile Buffalo `may` work on older versions, we encourage you to upgrade to latest 2 versions of Go for a better development experience.\n\n## Documentation\n\nPlease visit [http://gobuffalo.io](http://gobuffalo.io) for the latest documentation, examples, and more.\n\n### Quick Start\n\n- [Installation](https://gobuffalo.io/documentation/getting_started/installation)\n- [Create a new project](https://gobuffalo.io/documentation/getting_started/new-project)\n- [Tutorials](https://gobuffalo.io/documentation/tutorials/)\n\n## Shoulders of Giants\n\nBuffalo would not be possible if not for all of the great projects it depends on. Please see [SHOULDERS.md](SHOULDERS.md) to see a list of them.\n\n### Templating\n\n[github.com/gobuffalo/plush](https://github.com/gobuffalo/plush) - This templating package was chosen over the standard Go `html/template` package for a variety of reasons. The biggest of which is that it is significantly more flexible and easy to work with.\n\n### Routing\n\n[github.com/gorilla/mux](https://github.com/gorilla/mux) - This router was chosen because of its stability and flexibility. There might be faster routers out there, but this one is definitely the most powerful!\n\n### Task Runner (Optional)\n\n[github.com/markbates/grift](https://github.com/markbates/grift) - If you're familiar with Rake tasks from Ruby, you'll be right at home using Grift. This package was chosen to allow for the easy running of simple, and common, tasks that most web applications need. Think things like seeding a database or taking in a CSV file and generating database records. Buffalo ships with an example `routes` task that prints of the defined routes and the function that handles those requests.\n\n### Models/ORM (Optional)\n\n[github.com/gobuffalo/pop](https://github.com/gobuffalo/pop) - Accessing databases is nothing new in web applications. Pop, and its command line tool, Soda, were chosen because they strike a nice balance between simplifying common tasks, being idiomatic, and giving you the flexibility you need to build your app. Pop and Soda share the same core philosophies as Buffalo, so they were a natural choice.\n\n### Sessions, Cookies, WebSockets, and more\n\n[github.com/gorilla](https://github.com/gorilla) - The Gorilla toolkit is a great set of packages designed to improve upon the standard library for a variety of web-related packages. With these high-quality packages Buffalo can keep its \"core\" code to a minimum and focus on its goal of gluing them all together to make your life better.\n\n## Benchmarks\n\nOh, yeah, everyone wants benchmarks! What would a web framework be without its benchmarks? Well, guess what? I'm not giving you any! That's right. This is Go! I assure you that it is plenty fast enough for you. If you want benchmarks you can either a) check out any benchmarks that the [GIANTS](SHOULDERS.md) Buffalo is built upon having published, or b) run your own. I have no interest in playing the benchmark game, and neither should you.\n\n## Contributing\n\nFirst, thank you so much for wanting to contribute! It means so much that you care enough to want to contribute. We appreciate every PR from the smallest of typos to the be biggest of features.\n\n**Here are the core rules to respect**:\n\n- If you have any question, please consider using the\n  [Slack channel](https://gophers.slack.com/messages/buffalo/) (-#buffalo-,\n  *#buffalo_fr* or *#buffalo-dev* for contribution related questions) or\n  [Stack Overflow](https://stackoverflow.com/questions/tagged/buffalo).\n  We use GitHub issues for **bug reports and feature requests only**.\n- All contributors of this project are working on their free time: be patient\n  and kind. :-\n- Consider opening an issue **BEFORE** creating a Pull request (PR): you won't\n  lose your time on fixing non-existing bugs, or fixing the wrong bug. Also we\n  can help you to produce the best PR!\n- Open a PR against the `main` branch if your PR is for mainstream or version\n  specific branch e.g. `v1` if your PR is for specific version.\n  Note that the valid branch for a new feature request PR should be `main`\n  while a PR against a version specific branch are allowed only for bugfixes.\n\nFor the full contribution guidelines, please read [CONTRIBUTING](.github/CONTRIBUTING.md).\n"
        },
        {
          "name": "SHOULDERS.md",
          "type": "blob",
          "size": 5.595703125,
          "content": "# Buffalo Stands on the Shoulders of Giants\n\nBuffalo does not try to reinvent the wheel! Instead, it uses the already great wheels developed by the Go community and puts them all together in the best way possible. Without these giants, this project would not be possible. Please make sure to check them out and thank them for all of their hard work.\n\nThank you to the following **GIANTS**:\n\n* [github.com/BurntSushi/toml](https://godoc.org/github.com/BurntSushi/toml)\n* [github.com/aymerick/douceur](https://godoc.org/github.com/aymerick/douceur)\n* [github.com/cpuguy83/go-md2man/v2](https://godoc.org/github.com/cpuguy83/go-md2man/v2)\n* [github.com/davecgh/go-spew](https://godoc.org/github.com/davecgh/go-spew)\n* [github.com/dustin/go-humanize](https://godoc.org/github.com/dustin/go-humanize)\n* [github.com/fatih/color](https://godoc.org/github.com/fatih/color)\n* [github.com/fatih/structs](https://godoc.org/github.com/fatih/structs)\n* [github.com/felixge/httpsnoop](https://godoc.org/github.com/felixge/httpsnoop)\n* [github.com/fsnotify/fsnotify](https://godoc.org/github.com/fsnotify/fsnotify)\n* [github.com/go-sql-driver/mysql](https://godoc.org/github.com/go-sql-driver/mysql)\n* [github.com/gobuffalo/envy](https://godoc.org/github.com/gobuffalo/envy)\n* [github.com/gobuffalo/events](https://godoc.org/github.com/gobuffalo/events)\n* [github.com/gobuffalo/flect](https://godoc.org/github.com/gobuffalo/flect)\n* [github.com/gobuffalo/github_flavored_markdown](https://godoc.org/github.com/gobuffalo/github_flavored_markdown)\n* [github.com/gobuffalo/grift](https://godoc.org/github.com/gobuffalo/grift)\n* [github.com/gobuffalo/helpers](https://godoc.org/github.com/gobuffalo/helpers)\n* [github.com/gobuffalo/here](https://godoc.org/github.com/gobuffalo/here)\n* [github.com/gobuffalo/httptest](https://godoc.org/github.com/gobuffalo/httptest)\n* [github.com/gobuffalo/logger](https://godoc.org/github.com/gobuffalo/logger)\n* [github.com/gobuffalo/meta](https://godoc.org/github.com/gobuffalo/meta)\n* [github.com/gobuffalo/nulls](https://godoc.org/github.com/gobuffalo/nulls)\n* [github.com/gobuffalo/plush/v4](https://godoc.org/github.com/gobuffalo/plush/v4)\n* [github.com/gobuffalo/refresh](https://godoc.org/github.com/gobuffalo/refresh)\n* [github.com/gobuffalo/tags/v3](https://godoc.org/github.com/gobuffalo/tags/v3)\n* [github.com/gobuffalo/validate/v3](https://godoc.org/github.com/gobuffalo/validate/v3)\n* [github.com/gofrs/uuid](https://godoc.org/github.com/gofrs/uuid)\n* [github.com/google/go-cmp](https://godoc.org/github.com/google/go-cmp)\n* [github.com/gorilla/css](https://godoc.org/github.com/gorilla/css)\n* [github.com/gorilla/handlers](https://godoc.org/github.com/gorilla/handlers)\n* [github.com/gorilla/mux](https://godoc.org/github.com/gorilla/mux)\n* [github.com/gorilla/securecookie](https://godoc.org/github.com/gorilla/securecookie)\n* [github.com/gorilla/sessions](https://godoc.org/github.com/gorilla/sessions)\n* [github.com/inconshreveable/mousetrap](https://godoc.org/github.com/inconshreveable/mousetrap)\n* [github.com/jmoiron/sqlx](https://godoc.org/github.com/jmoiron/sqlx)\n* [github.com/joho/godotenv](https://godoc.org/github.com/joho/godotenv)\n* [github.com/kr/pretty](https://godoc.org/github.com/kr/pretty)\n* [github.com/kr/pty](https://godoc.org/github.com/kr/pty)\n* [github.com/kr/text](https://godoc.org/github.com/kr/text)\n* [github.com/lib/pq](https://godoc.org/github.com/lib/pq)\n* [github.com/mattn/go-colorable](https://godoc.org/github.com/mattn/go-colorable)\n* [github.com/mattn/go-isatty](https://godoc.org/github.com/mattn/go-isatty)\n* [github.com/mattn/go-sqlite3](https://godoc.org/github.com/mattn/go-sqlite3)\n* [github.com/microcosm-cc/bluemonday](https://godoc.org/github.com/microcosm-cc/bluemonday)\n* [github.com/mitchellh/go-homedir](https://godoc.org/github.com/mitchellh/go-homedir)\n* [github.com/monoculum/formam](https://godoc.org/github.com/monoculum/formam)\n* [github.com/pkg/diff](https://godoc.org/github.com/pkg/diff)\n* [github.com/pmezard/go-difflib](https://godoc.org/github.com/pmezard/go-difflib)\n* [github.com/psanford/memfs](https://godoc.org/github.com/psanford/memfs)\n* [github.com/rogpeppe/go-internal](https://godoc.org/github.com/rogpeppe/go-internal)\n* [github.com/russross/blackfriday/v2](https://godoc.org/github.com/russross/blackfriday/v2)\n* [github.com/sergi/go-diff](https://godoc.org/github.com/sergi/go-diff)\n* [github.com/sirupsen/logrus](https://godoc.org/github.com/sirupsen/logrus)\n* [github.com/sourcegraph/annotate](https://godoc.org/github.com/sourcegraph/annotate)\n* [github.com/sourcegraph/syntaxhighlight](https://godoc.org/github.com/sourcegraph/syntaxhighlight)\n* [github.com/spf13/cobra](https://godoc.org/github.com/spf13/cobra)\n* [github.com/spf13/pflag](https://godoc.org/github.com/spf13/pflag)\n* [github.com/stretchr/objx](https://godoc.org/github.com/stretchr/objx)\n* [github.com/stretchr/testify](https://godoc.org/github.com/stretchr/testify)\n* [github.com/yuin/goldmark](https://godoc.org/github.com/yuin/goldmark)\n* [golang.org/x/crypto](https://godoc.org/golang.org/x/crypto)\n* [golang.org/x/mod](https://godoc.org/golang.org/x/mod)\n* [golang.org/x/net](https://godoc.org/golang.org/x/net)\n* [golang.org/x/sync](https://godoc.org/golang.org/x/sync)\n* [golang.org/x/sys](https://godoc.org/golang.org/x/sys)\n* [golang.org/x/term](https://godoc.org/golang.org/x/term)\n* [golang.org/x/text](https://godoc.org/golang.org/x/text)\n* [golang.org/x/tools](https://godoc.org/golang.org/x/tools)\n* [golang.org/x/xerrors](https://godoc.org/golang.org/x/xerrors)\n* [gopkg.in/check.v1](https://godoc.org/gopkg.in/check.v1)\n* [gopkg.in/yaml.v2](https://godoc.org/gopkg.in/yaml.v2)\n* [gopkg.in/yaml.v3](https://godoc.org/gopkg.in/yaml.v3)\n"
        },
        {
          "name": "app.go",
          "type": "blob",
          "size": 2.0859375,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/gorilla/mux\"\n)\n\n// App is where it all happens! It holds on to options,\n// the underlying router, the middleware, and more.\n// Without an App you can't do much!\ntype App struct {\n\tOptions\n\t// Middleware, ErrorHandlers, router, and filepaths are moved to Home.\n\tHome\n\tmoot   *sync.RWMutex\n\troutes RouteList\n\t// TODO: to be deprecated #road-to-v1\n\troot     *App\n\tchildren []*App\n\n\t// Routenamer for the app. This field provides the ability to override the\n\t// base route namer for something more specific to the app.\n\tRouteNamer RouteNamer\n}\n\n// Muxer returns the underlying mux router to allow\n// for advance configurations\nfunc (a *App) Muxer() *mux.Router {\n\treturn a.router\n}\n\n// New returns a new instance of App and adds some sane, and useful, defaults.\nfunc New(opts Options) *App {\n\tLoadPlugins()\n\tenvy.Load()\n\n\topts = optionsWithDefaults(opts)\n\n\ta := &App{\n\t\tOptions: opts,\n\t\tHome: Home{\n\t\t\tname:   opts.Name,\n\t\t\thost:   opts.Host,\n\t\t\tprefix: opts.Prefix,\n\t\t\tErrorHandlers: ErrorHandlers{\n\t\t\t\thttp.StatusNotFound:            defaultErrorHandler,\n\t\t\t\thttp.StatusInternalServerError: defaultErrorHandler,\n\t\t\t},\n\t\t\trouter: mux.NewRouter(),\n\t\t},\n\t\tmoot:     &sync.RWMutex{},\n\t\troutes:   RouteList{},\n\t\tchildren: []*App{},\n\n\t\tRouteNamer: baseRouteNamer{},\n\t}\n\ta.Home.app = a     // replace root.\n\ta.Home.appSelf = a // temporary, reverse reference to the group app.\n\n\tnotFoundHandler := func(errorf string, code int) http.HandlerFunc {\n\t\treturn func(res http.ResponseWriter, req *http.Request) {\n\t\t\tc := a.newContext(RouteInfo{}, res, req)\n\t\t\terr := fmt.Errorf(errorf, req.Method, req.URL.Path)\n\t\t\t_ = a.ErrorHandlers.Get(code)(code, err, c)\n\t\t}\n\t}\n\n\ta.router.NotFoundHandler = notFoundHandler(\"path not found: %s %s\", http.StatusNotFound)\n\ta.router.MethodNotAllowedHandler = notFoundHandler(\"method not found: %s %s\", http.StatusMethodNotAllowed)\n\n\tif a.MethodOverride == nil {\n\t\ta.MethodOverride = MethodOverride\n\t}\n\n\ta.Middleware = newMiddlewareStack(RequestLogger)\n\ta.Use(a.defaultErrorMiddleware)\n\ta.Use(a.PanicHandler)\n\n\treturn a\n}\n"
        },
        {
          "name": "app_test.go",
          "type": "blob",
          "size": 0.0654296875,
          "content": "package buffalo\n\nfunc voidHandler(c Context) error {\n\treturn nil\n}\n"
        },
        {
          "name": "binding",
          "type": "tree",
          "content": null
        },
        {
          "name": "buffalo.go",
          "type": "blob",
          "size": 0.8359375,
          "content": "/*\nPackage buffalo is a Go web development eco-system, designed to make your life easier.\n\nBuffalo helps you to generate a web project that already has everything from front-end (JavaScript, SCSS, etc.) to back-end (database, routing, etc.) already hooked up and ready to run. From there it provides easy APIs to build your web application quickly in Go.\n\nBuffalo **isn't just a framework**, it's a holistic web development environment and project structure that **lets developers get straight to the business** of, well, building their business.\n*/\npackage buffalo\n\n// we need to import the runtime package\n// as its needed by `buffalo build` and without\n// this import the package doesn't get vendored\n// by go mod vendor or by dep. this import fixes\n// this problem.\nimport _ \"github.com/gobuffalo/buffalo/runtime\" // Load the runtime package variables\n"
        },
        {
          "name": "context.go",
          "type": "blob",
          "size": 2.251953125,
          "content": "package buffalo\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/gobuffalo/buffalo/binding\"\n\t\"github.com/gobuffalo/buffalo/internal/httpx\"\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gorilla/mux\"\n)\n\n// Context holds on to information as you\n// pass it down through middleware, Handlers,\n// templates, etc... It strives to make your\n// life a happier one.\ntype Context interface {\n\tcontext.Context\n\tResponse() http.ResponseWriter\n\tRequest() *http.Request\n\tSession() *Session\n\tCookies() *Cookies\n\tParams() ParamValues\n\tParam(string) string\n\tSet(string, interface{})\n\tLogField(string, interface{})\n\tLogFields(map[string]interface{})\n\tLogger() Logger\n\tBind(interface{}) error\n\tRender(int, render.Renderer) error\n\tError(int, error) error\n\tRedirect(int, string, ...interface{}) error\n\tData() map[string]interface{}\n\tFlash() *Flash\n\tFile(string) (binding.File, error)\n}\n\n// ParamValues will most commonly be url.Values,\n// but isn't it great that you set your own? :)\ntype ParamValues interface {\n\tGet(string) string\n}\n\nfunc (a *App) newContext(info RouteInfo, res http.ResponseWriter, req *http.Request) Context {\n\tif ws, ok := res.(*Response); ok {\n\t\tres = ws\n\t}\n\n\t// Parse URL Params\n\tparams := url.Values{}\n\tvars := mux.Vars(req)\n\tfor k, v := range vars {\n\t\tparams.Add(k, v)\n\t}\n\n\t// Parse URL Query String Params\n\t// For POST, PUT, and PATCH requests, it also parse the request body as a form.\n\t// Request body parameters take precedence over URL query string values in params\n\tif err := req.ParseForm(); err == nil {\n\t\tfor k, v := range req.Form {\n\t\t\tfor _, vv := range v {\n\t\t\t\tparams.Add(k, vv)\n\t\t\t}\n\t\t}\n\t}\n\n\tsession := a.getSession(req, res)\n\n\tct := httpx.ContentType(req)\n\n\tdata := &sync.Map{}\n\n\tdata.Store(\"app\", a)\n\tdata.Store(\"env\", a.Env)\n\tdata.Store(\"routes\", a.Routes())\n\tdata.Store(\"current_route\", info)\n\tdata.Store(\"current_path\", req.URL.Path)\n\tdata.Store(\"contentType\", ct)\n\tdata.Store(\"method\", req.Method)\n\n\tfor _, route := range a.Routes() {\n\t\tcRoute := route\n\t\tdata.Store(cRoute.PathName, cRoute.BuildPathHelper())\n\t}\n\n\treturn &DefaultContext{\n\t\tContext:     req.Context(),\n\t\tcontentType: ct,\n\t\tresponse:    res,\n\t\trequest:     req,\n\t\tparams:      params,\n\t\tlogger:      a.Logger,\n\t\tsession:     session,\n\t\tflash:       newFlash(session),\n\t\tdata:        data,\n\t}\n}\n"
        },
        {
          "name": "cookies.go",
          "type": "blob",
          "size": 1.970703125,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\n// Cookies allows you to easily get cookies from the request, and set cookies on the response.\ntype Cookies struct {\n\treq *http.Request\n\tres http.ResponseWriter\n}\n\n// Get returns the value of the cookie with the given name. Returns http.ErrNoCookie if there's no cookie with that name in the request.\nfunc (c *Cookies) Get(name string) (string, error) {\n\tck, err := c.req.Cookie(name)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn ck.Value, nil\n}\n\n// Set a cookie on the response, which will expire after the given duration.\nfunc (c *Cookies) Set(name, value string, maxAge time.Duration) {\n\tck := http.Cookie{\n\t\tName:   name,\n\t\tValue:  value,\n\t\tMaxAge: int(maxAge.Seconds()),\n\t}\n\n\thttp.SetCookie(c.res, &ck)\n}\n\n// SetWithExpirationTime sets a cookie that will expire at a specific time.\n// Note that the time is determined by the client's browser, so it might not expire at the expected time,\n// for example if the client has changed the time on their computer.\nfunc (c *Cookies) SetWithExpirationTime(name, value string, expires time.Time) {\n\tck := http.Cookie{\n\t\tName:    name,\n\t\tValue:   value,\n\t\tExpires: expires,\n\t}\n\n\thttp.SetCookie(c.res, &ck)\n}\n\n// SetWithPath sets a cookie path on the server in which the cookie will be available on.\n// If set to '/', the cookie will be available within the entire domain.\n// If set to '/foo/', the cookie will only be available within the /foo/ directory and\n// all sub-directories such as /foo/bar/ of domain.\nfunc (c *Cookies) SetWithPath(name, value, path string) {\n\tck := http.Cookie{\n\t\tName:  name,\n\t\tValue: value,\n\t\tPath:  path,\n\t}\n\n\thttp.SetCookie(c.res, &ck)\n}\n\n// Delete sets a header that tells the browser to remove the cookie with the given name.\nfunc (c *Cookies) Delete(name string) {\n\tck := http.Cookie{\n\t\tName:  name,\n\t\tValue: \"v\",\n\t\t// Setting a time in the distant past, like the unix epoch, removes the cookie,\n\t\t// since it has long expired.\n\t\tExpires: time.Unix(0, 0),\n\t}\n\n\thttp.SetCookie(c.res, &ck)\n}\n"
        },
        {
          "name": "cookies_test.go",
          "type": "blob",
          "size": 1.61328125,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestCookies_Get(t *testing.T) {\n\tr := require.New(t)\n\treq := httptest.NewRequest(\"POST\", \"/\", nil)\n\treq.Header.Set(\"Cookie\", \"name=Arthur Dent; answer=42\")\n\n\tc := Cookies{req, nil}\n\n\tv, err := c.Get(\"name\")\n\tr.NoError(err)\n\tr.Equal(\"Arthur Dent\", v)\n\n\tv, err = c.Get(\"answer\")\n\tr.NoError(err)\n\tr.Equal(\"42\", v)\n\n\t_, err = c.Get(\"unknown\")\n\tr.EqualError(err, http.ErrNoCookie.Error())\n}\n\nfunc TestCookies_Set(t *testing.T) {\n\tr := require.New(t)\n\tres := httptest.NewRecorder()\n\n\tc := Cookies{&http.Request{}, res}\n\n\tc.Set(\"name\", \"Rob Pike\", time.Hour*24)\n\n\th := res.Header().Get(\"Set-Cookie\")\n\tr.Equal(\"name=\\\"Rob Pike\\\"; Max-Age=86400\", h)\n}\n\nfunc TestCookies_SetWithPath(t *testing.T) {\n\tr := require.New(t)\n\tres := httptest.NewRecorder()\n\n\tc := Cookies{&http.Request{}, res}\n\n\tc.SetWithPath(\"name\", \"Rob Pike\", \"/foo\")\n\n\th := res.Header().Get(\"Set-Cookie\")\n\tr.Equal(\"name=\\\"Rob Pike\\\"; Path=/foo\", h)\n}\n\nfunc TestCookies_SetWithExpirationTime(t *testing.T) {\n\tr := require.New(t)\n\tres := httptest.NewRecorder()\n\n\tc := Cookies{&http.Request{}, res}\n\n\te := time.Date(2017, 7, 29, 19, 28, 45, 0, time.UTC)\n\tc.SetWithExpirationTime(\"name\", \"Rob Pike\", e)\n\n\th := res.Header().Get(\"Set-Cookie\")\n\tr.Equal(\"name=\\\"Rob Pike\\\"; Expires=Sat, 29 Jul 2017 19:28:45 GMT\", h)\n}\n\nfunc TestCookies_Delete(t *testing.T) {\n\tr := require.New(t)\n\tres := httptest.NewRecorder()\n\n\tc := Cookies{&http.Request{}, res}\n\n\tc.Delete(\"remove-me\")\n\n\th := res.Header().Get(\"Set-Cookie\")\n\tr.Equal(\"remove-me=v; Expires=Thu, 01 Jan 1970 00:00:00 GMT\", h)\n}\n"
        },
        {
          "name": "default_context.go",
          "type": "blob",
          "size": 7.716796875,
          "content": "package buffalo\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"reflect\"\n\t\"sort\"\n\t\"strings\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gobuffalo/buffalo/binding\"\n\t\"github.com/gobuffalo/buffalo/render\"\n)\n\n// assert that DefaultContext is implementing Context\nvar _ Context = &DefaultContext{}\nvar _ context.Context = &DefaultContext{}\n\n// TODO(sio4): #road-to-v1 - make DefaultContext private\n// and only allow it to be generated by App.newContext() or any similar.\n\n// DefaultContext is, as its name implies, a default\n// implementation of the Context interface.\ntype DefaultContext struct {\n\tcontext.Context\n\tresponse    http.ResponseWriter\n\trequest     *http.Request\n\tparams      url.Values\n\tlogger      Logger\n\tsession     *Session\n\tcontentType string\n\tdata        *sync.Map\n\tflash       *Flash\n}\n\n// Response returns the original Response for the request.\nfunc (d *DefaultContext) Response() http.ResponseWriter {\n\treturn d.response\n}\n\n// Request returns the original Request.\nfunc (d *DefaultContext) Request() *http.Request {\n\treturn d.request\n}\n\n// Params returns all of the parameters for the request,\n// including both named params and query string parameters.\nfunc (d *DefaultContext) Params() ParamValues {\n\treturn d.params\n}\n\n// Logger returns the Logger for this context.\nfunc (d *DefaultContext) Logger() Logger {\n\treturn d.logger\n}\n\n// Param returns a param, either named or query string,\n// based on the key.\nfunc (d *DefaultContext) Param(key string) string {\n\treturn d.Params().Get(key)\n}\n\n// Set a value onto the Context. Any value set onto the Context\n// will be automatically available in templates.\nfunc (d *DefaultContext) Set(key string, value interface{}) {\n\tif d.data == nil {\n\t\td.data = &sync.Map{}\n\t}\n\td.data.Store(key, value)\n}\n\n// Value that has previously stored on the context.\nfunc (d *DefaultContext) Value(key interface{}) interface{} {\n\tif k, ok := key.(string); ok && d.data != nil {\n\t\tif v, ok := d.data.Load(k); ok {\n\t\t\treturn v\n\t\t}\n\t}\n\tif d.Context == nil {\n\t\treturn nil\n\t}\n\treturn d.Context.Value(key)\n}\n\n// Session for the associated Request.\nfunc (d *DefaultContext) Session() *Session {\n\treturn d.session\n}\n\n// Cookies for the associated request and response.\nfunc (d *DefaultContext) Cookies() *Cookies {\n\treturn &Cookies{d.request, d.response}\n}\n\n// Flash messages for the associated Request.\nfunc (d *DefaultContext) Flash() *Flash {\n\treturn d.flash\n}\n\ntype paginable interface {\n\tPaginate() string\n}\n\n// Render a status code and render.Renderer to the associated Response.\n// The request parameters will be made available to the render.Renderer\n// \"{{.params}}\". Any values set onto the Context will also automatically\n// be made available to the render.Renderer. To render \"no content\" pass\n// in a nil render.Renderer.\nfunc (d *DefaultContext) Render(status int, rr render.Renderer) error {\n\tstart := time.Now()\n\tdefer func() {\n\t\td.LogField(\"render\", time.Since(start))\n\t}()\n\n\tif rr == nil {\n\t\td.Response().WriteHeader(status)\n\t\treturn nil\n\t}\n\n\tdata := d.Data()\n\tpp := map[string]string{}\n\tfor k, v := range d.params {\n\t\tpp[k] = v[0]\n\t}\n\tdata[\"params\"] = pp\n\tdata[\"flash\"] = d.Flash().data\n\tdata[\"session\"] = d.Session()\n\tdata[\"request\"] = d.Request()\n\tdata[\"status\"] = status\n\tbb := &bytes.Buffer{}\n\n\terr := rr.Render(bb, data)\n\tif err != nil {\n\t\tvar er render.ErrRedirect\n\t\tif errors.As(err, &er) {\n\t\t\treturn d.Redirect(er.Status, er.URL)\n\t\t}\n\t\treturn HTTPError{Status: http.StatusInternalServerError, Cause: err}\n\t}\n\n\tif d.Session() != nil {\n\t\td.Flash().Clear()\n\t\td.Flash().persist(d.Session())\n\t\tif err := d.Session().Save(); err != nil {\n\t\t\treturn HTTPError{Status: http.StatusInternalServerError, Cause: err}\n\t\t}\n\t}\n\n\td.Response().Header().Set(\"Content-Type\", rr.ContentType())\n\tif p, ok := data[\"pagination\"].(paginable); ok {\n\t\td.Response().Header().Set(\"X-Pagination\", p.Paginate())\n\t}\n\td.Response().WriteHeader(status)\n\t_, err = io.Copy(d.Response(), bb)\n\tif err != nil {\n\t\treturn HTTPError{Status: http.StatusInternalServerError, Cause: err}\n\t}\n\n\treturn nil\n}\n\n// Bind the interface to the request.Body. The type of binding\n// is dependent on the \"Content-Type\" for the request. If the type\n// is \"application/json\" it will use \"json.NewDecoder\". If the type\n// is \"application/xml\" it will use \"xml.NewDecoder\". See the\n// github.com/gobuffalo/buffalo/binding package for more details.\nfunc (d *DefaultContext) Bind(value interface{}) error {\n\treturn binding.Exec(d.Request(), value)\n}\n\n// LogField adds the key/value pair onto the Logger to be printed out\n// as part of the request logging. This allows you to easily add things\n// like metrics (think DB times) to your request.\nfunc (d *DefaultContext) LogField(key string, value interface{}) {\n\tif d.logger == nil {\n\t\treturn\n\t}\n\td.logger = d.logger.WithField(key, value)\n}\n\n// LogFields adds the key/value pairs onto the Logger to be printed out\n// as part of the request logging. This allows you to easily add things\n// like metrics (think DB times) to your request.\nfunc (d *DefaultContext) LogFields(values map[string]interface{}) {\n\tif d.logger == nil {\n\t\treturn\n\t}\n\td.logger = d.logger.WithFields(values)\n}\n\nfunc (d *DefaultContext) Error(status int, err error) error {\n\treturn HTTPError{Status: status, Cause: err}\n}\n\nvar mapType = reflect.ValueOf(map[string]interface{}{}).Type()\n\n// Redirect a request with the given status to the given URL.\nfunc (d *DefaultContext) Redirect(status int, url string, args ...interface{}) error {\n\tif d.Session() != nil {\n\t\td.Flash().persist(d.Session())\n\t\tif err := d.Session().Save(); err != nil {\n\t\t\treturn HTTPError{Status: http.StatusInternalServerError, Cause: err}\n\t\t}\n\t}\n\n\tif strings.HasSuffix(url, \"Path()\") {\n\t\tif len(args) > 1 {\n\t\t\treturn fmt.Errorf(\"you must pass only a map[string]interface{} to a route path: %T\", args)\n\t\t}\n\t\tvar m map[string]interface{}\n\t\tif len(args) == 1 {\n\t\t\trv := reflect.Indirect(reflect.ValueOf(args[0]))\n\t\t\tif !rv.Type().ConvertibleTo(mapType) {\n\t\t\t\treturn fmt.Errorf(\"you must pass only a map[string]interface{} to a route path: %T\", args)\n\t\t\t}\n\t\t\tm = rv.Convert(mapType).Interface().(map[string]interface{})\n\t\t}\n\t\th, ok := d.Value(strings.TrimSuffix(url, \"()\")).(RouteHelperFunc)\n\t\tif !ok {\n\t\t\treturn fmt.Errorf(\"could not find a route helper named %s\", url)\n\t\t}\n\t\turl, err := h(m)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\thttp.Redirect(d.Response(), d.Request(), string(url), status)\n\t\treturn nil\n\t}\n\n\tif len(args) > 0 {\n\t\turl = fmt.Sprintf(url, args...)\n\t}\n\thttp.Redirect(d.Response(), d.Request(), url, status)\n\treturn nil\n}\n\n// Data contains all the values set through Get/Set.\nfunc (d *DefaultContext) Data() map[string]interface{} {\n\tm := map[string]interface{}{}\n\n\tif d.data == nil {\n\t\treturn m\n\t}\n\n\td.data.Range(func(k, v interface{}) bool {\n\t\ts, ok := k.(string)\n\t\tif !ok {\n\t\t\treturn false\n\t\t}\n\t\tm[s] = v\n\t\treturn true\n\t})\n\treturn m\n}\n\nfunc (d *DefaultContext) String() string {\n\tdata := d.Data()\n\tbb := make([]string, 0, len(data))\n\n\tfor k, v := range data {\n\t\tif _, ok := v.(RouteHelperFunc); !ok {\n\t\t\tbb = append(bb, fmt.Sprintf(\"%s: %s\", k, v))\n\t\t}\n\t}\n\tsort.Strings(bb)\n\treturn strings.Join(bb, \"\\n\\n\")\n}\n\n// File returns an uploaded file by name, or an error\nfunc (d *DefaultContext) File(name string) (binding.File, error) {\n\treq := d.Request()\n\tif err := req.ParseMultipartForm(5 * 1024 * 1024); err != nil {\n\t\treturn binding.File{}, err\n\t}\n\tf, h, err := req.FormFile(name)\n\tbf := binding.File{\n\t\tFile:       f,\n\t\tFileHeader: h,\n\t}\n\treturn bf, err\n}\n\n// MarshalJSON implements json marshaling for the context\nfunc (d *DefaultContext) MarshalJSON() ([]byte, error) {\n\tm := map[string]interface{}{}\n\tdata := d.Data()\n\tfor k, v := range data {\n\t\t// don't try and marshal ourself\n\t\tif _, ok := v.(*DefaultContext); ok {\n\t\t\tcontinue\n\t\t}\n\t\tif _, err := json.Marshal(v); err == nil {\n\t\t\t// it can be marshaled, so add it:\n\t\t\tm[k] = v\n\t\t}\n\t}\n\treturn json.Marshal(m)\n}\n"
        },
        {
          "name": "default_context_test.go",
          "type": "blob",
          "size": 8.0595703125,
          "content": "package buffalo\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/gobuffalo/logger\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc basicContext() DefaultContext {\n\treturn DefaultContext{\n\t\tContext: context.Background(),\n\t\tlogger:  logger.New(logger.DebugLevel),\n\t\tdata:    &sync.Map{},\n\t\tflash:   &Flash{data: make(map[string][]string)},\n\t}\n}\n\nfunc Test_DefaultContext_Redirect(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\tu := \"/foo?bar=http%3A%2F%2Flocalhost%3A3000%2Flogin%2Fcallback%2Ffacebook\"\n\ta.GET(\"/\", func(c Context) error {\n\t\treturn c.Redirect(http.StatusFound, u)\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\tr.Equal(u, res.Location())\n}\n\nfunc Test_DefaultContext_Redirect_Helper(t *testing.T) {\n\tr := require.New(t)\n\n\ttable := []struct {\n\t\tE string\n\t\tI map[string]interface{}\n\t\tS int\n\t}{\n\t\t{\n\t\t\tE: \"/foo/baz/\",\n\t\t\tI: map[string]interface{}{\"bar\": \"baz\"},\n\t\t\tS: http.StatusPermanentRedirect,\n\t\t},\n\t\t{\n\t\t\tS: http.StatusInternalServerError,\n\t\t},\n\t}\n\n\tfor _, tt := range table {\n\t\ta := New(Options{})\n\t\ta.GET(\"/foo/{bar}\", func(c Context) error {\n\t\t\treturn c.Render(http.StatusOK, render.String(c.Param(\"bar\")))\n\t\t})\n\t\ta.GET(\"/\", func(c Context) error {\n\t\t\treturn c.Redirect(http.StatusPermanentRedirect, \"fooBarPath()\", tt.I)\n\t\t})\n\t\ta.GET(\"/nomap\", func(c Context) error {\n\t\t\treturn c.Redirect(http.StatusPermanentRedirect, \"rootPath()\")\n\t\t})\n\n\t\tw := httptest.New(a)\n\t\tres := w.HTML(\"/\").Get()\n\t\tr.Equal(tt.S, res.Code)\n\t\tr.Equal(tt.E, res.Location())\n\n\t\tres = w.HTML(\"/nomap\").Get()\n\t\tr.Equal(http.StatusPermanentRedirect, res.Code)\n\t\tr.Equal(\"/\", res.Location())\n\t}\n}\n\nfunc Test_DefaultContext_Param(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{\n\t\tparams: url.Values{\n\t\t\t\"name\": []string{\"Mark\"},\n\t\t},\n\t}\n\n\tr.Equal(\"Mark\", c.Param(\"name\"))\n}\n\nfunc Test_DefaultContext_Param_form(t *testing.T) {\n\tr := require.New(t)\n\n\tapp := New(Options{})\n\tvar name string\n\tapp.POST(\"/\", func(c Context) error {\n\t\tname = c.Param(\"name\")\n\t\treturn nil\n\t})\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/\").Post(map[string]string{\n\t\t\"name\": \"Mark\",\n\t})\n\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Equal(\"Mark\", name)\n}\n\nfunc Test_DefaultContext_Param_Multiple(t *testing.T) {\n\tr := require.New(t)\n\n\tapp := New(Options{})\n\tvar params ParamValues\n\tvar param string\n\tapp.POST(\"/{id}\", func(c Context) error {\n\t\tparams = c.Params()\n\t\tparam = c.Param(\"id\")\n\t\treturn nil\n\t})\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/a?id=c&y=z&id=d\").Post(map[string]string{\n\t\t\"id\": \"b\",\n\t})\n\tparamsExpected := url.Values{\n\t\t\"id\": []string{\"a\", \"b\", \"c\", \"d\"},\n\t\t\"y\":  []string{\"z\"},\n\t}\n\n\tr.Equal(200, res.Code)\n\tr.Equal(paramsExpected, params.(url.Values))\n\tr.Equal(\"a\", param)\n}\n\nfunc Test_DefaultContext_GetSet(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\tr.Nil(c.Value(\"name\"))\n\n\tc.Set(\"name\", \"Mark\")\n\tr.NotNil(c.Value(\"name\"))\n\tr.Equal(\"Mark\", c.Value(\"name\").(string))\n}\n\nfunc Test_DefaultContext_Set_not_configured(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{}\n\n\tc.Set(\"name\", \"Yonghwan\")\n\tr.NotNil(c.Value(\"name\"))\n\tr.Equal(\"Yonghwan\", c.Value(\"name\").(string))\n}\n\nfunc Test_DefaultContext_Value(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\tr.Nil(c.Value(\"name\"))\n\n\tc.Set(\"name\", \"Mark\")\n\tr.NotNil(c.Value(\"name\"))\n\tr.Equal(\"Mark\", c.Value(\"name\").(string))\n}\n\nfunc Test_DefaultContext_Value_not_configured(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{}\n\tr.Nil(c.Value(\"name\"))\n}\n\nfunc Test_DefaultContext_Render(t *testing.T) {\n\tr := require.New(t)\n\n\tc := basicContext()\n\tres := httptest.NewRecorder()\n\tc.response = res\n\tc.params = url.Values{\"name\": []string{\"Mark\"}}\n\tc.Set(\"greet\", \"Hello\")\n\n\terr := c.Render(http.StatusTeapot, render.String(`<%= greet %> <%= params[\"name\"] %>!`))\n\tr.NoError(err)\n\n\tr.Equal(http.StatusTeapot, res.Code)\n\tr.Equal(\"Hello Mark!\", res.Body.String())\n}\n\nfunc Test_DefaultContext_Bind_Default(t *testing.T) {\n\tr := require.New(t)\n\n\tuser := struct {\n\t\tFirstName string `form:\"first_name\"`\n\t}{}\n\n\ta := New(Options{})\n\ta.POST(\"/\", func(c Context) error {\n\t\terr := c.Bind(&user)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tw := httptest.New(a)\n\tuv := url.Values{\"first_name\": []string{\"Mark\"}}\n\tres := w.HTML(\"/\").Post(uv)\n\tr.Equal(http.StatusCreated, res.Code)\n\n\tr.Equal(\"Mark\", user.FirstName)\n}\n\nfunc Test_DefaultContext_Bind_No_ContentType(t *testing.T) {\n\tr := require.New(t)\n\n\tuser := struct {\n\t\tFirstName string `form:\"first_name\"`\n\t}{\n\t\tFirstName: \"Mark\",\n\t}\n\n\ta := New(Options{})\n\ta.POST(\"/\", func(c Context) error {\n\t\terr := c.Bind(&user)\n\t\tif err != nil {\n\t\t\treturn c.Error(http.StatusUnprocessableEntity, err)\n\t\t}\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tbb := &bytes.Buffer{}\n\treq, err := http.NewRequest(\"POST\", \"/\", bb)\n\tr.NoError(err)\n\treq.Header.Del(\"Content-Type\")\n\tres := httptest.NewRecorder()\n\ta.ServeHTTP(res, req)\n\tr.Equal(http.StatusUnprocessableEntity, res.Code)\n\tr.Contains(res.Body.String(), \"blank content type\")\n}\n\nfunc Test_DefaultContext_Bind_Empty_ContentType(t *testing.T) {\n\tr := require.New(t)\n\n\tuser := struct {\n\t\tFirstName string `form:\"first_name\"`\n\t}{\n\t\tFirstName: \"Mark\",\n\t}\n\n\ta := New(Options{})\n\ta.POST(\"/\", func(c Context) error {\n\t\terr := c.Bind(&user)\n\t\tif err != nil {\n\t\t\treturn c.Error(http.StatusUnprocessableEntity, err)\n\t\t}\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tbb := &bytes.Buffer{}\n\treq, err := http.NewRequest(\"POST\", \"/\", bb)\n\tr.NoError(err)\n\t// Want to make sure that an empty string value does not cause an error on `split`\n\treq.Header.Set(\"Content-Type\", \"\")\n\tres := httptest.NewRecorder()\n\ta.ServeHTTP(res, req)\n\tr.Equal(http.StatusUnprocessableEntity, res.Code)\n\tr.Contains(res.Body.String(), \"blank content type\")\n}\n\nfunc Test_DefaultContext_Bind_Default_BlankFields(t *testing.T) {\n\tr := require.New(t)\n\n\tuser := struct {\n\t\tFirstName string `form:\"first_name\"`\n\t}{\n\t\tFirstName: \"Mark\",\n\t}\n\n\ta := New(Options{})\n\ta.POST(\"/\", func(c Context) error {\n\t\terr := c.Bind(&user)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tw := httptest.New(a)\n\tuv := url.Values{\"first_name\": []string{\"\"}}\n\tres := w.HTML(\"/\").Post(uv)\n\tr.Equal(http.StatusCreated, res.Code)\n\n\tr.Equal(\"\", user.FirstName)\n}\n\nfunc Test_DefaultContext_Bind_JSON(t *testing.T) {\n\tr := require.New(t)\n\n\tuser := struct {\n\t\tFirstName string `json:\"first_name\"`\n\t}{}\n\n\ta := New(Options{})\n\ta.POST(\"/\", func(c Context) error {\n\t\terr := c.Bind(&user)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tw := httptest.New(a)\n\tres := w.JSON(\"/\").Post(map[string]string{\n\t\t\"first_name\": \"Mark\",\n\t})\n\tr.Equal(http.StatusCreated, res.Code)\n\n\tr.Equal(\"Mark\", user.FirstName)\n}\n\nfunc Test_DefaultContext_Data(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\n\tr.EqualValues(map[string]interface{}{}, c.Data())\n}\n\nfunc Test_DefaultContext_Data_not_configured(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{}\n\n\tr.EqualValues(map[string]interface{}{}, c.Data())\n}\n\nfunc Test_DefaultContext_String(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\tc.Set(\"name\", \"Buffalo\")\n\tc.Set(\"language\", \"go\")\n\n\tr.EqualValues(\"language: go\\n\\nname: Buffalo\", c.String())\n}\n\nfunc Test_DefaultContext_String_EmptyData(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\tr.EqualValues(\"\", c.String())\n}\n\nfunc Test_DefaultContext_String_EmptyData_not_configured(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{}\n\n\tr.EqualValues(\"\", c.String())\n}\n\nfunc Test_DefaultContext_MarshalJSON(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\tc.Set(\"name\", \"Buffalo\")\n\tc.Set(\"language\", \"go\")\n\n\tjb, err := c.MarshalJSON()\n\tr.NoError(err)\n\tr.EqualValues(`{\"language\":\"go\",\"name\":\"Buffalo\"}`, string(jb))\n}\n\nfunc Test_DefaultContext_MarshalJSON_EmptyData(t *testing.T) {\n\tr := require.New(t)\n\tc := basicContext()\n\n\tjb, err := c.MarshalJSON()\n\tr.NoError(err)\n\tr.EqualValues(`{}`, string(jb))\n}\n\nfunc Test_DefaultContext_MarshalJSON_EmptyData_not_configured(t *testing.T) {\n\tr := require.New(t)\n\tc := DefaultContext{}\n\n\tjb, err := c.MarshalJSON()\n\tr.NoError(err)\n\tr.EqualValues(`{}`, string(jb))\n}\n"
        },
        {
          "name": "error.dev.html",
          "type": "blob",
          "size": 14.244140625,
          "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>\n        <%= status %> - ERROR!\n    </title>\n    <style>\n        html {\n            font-family: sans-serif;\n            -webkit-text-size-adjust: 100%;\n            -ms-text-size-adjust: 100%\n        }\n\n        body {\n            margin: 0\n        }\n\n        header {\n            display: block\n        }\n\n        a {\n            background-color: transparent\n        }\n\n        a:active,\n        a:hover {\n            outline: 0\n        }\n\n        h1 {\n            margin: .67em 0;\n            font-size: 2em\n        }\n\n        img {\n            border: 0\n        }\n\n        pre {\n            overflow: auto\n        }\n\n        code,\n        pre {\n            font-family: monospace, monospace;\n            font-size: 1em\n        }\n\n        table {\n            border-spacing: 0;\n            border-collapse: collapse\n        }\n\n        td,\n        th {\n            padding: 0\n        }\n\n        @media print {\n            * {\n                color: #000 !important;\n                text-shadow: none !important;\n                background: 0 0 !important;\n                -webkit-box-shadow: none !important;\n                box-shadow: none !important\n            }\n\n            a,\n            a:visited {\n                text-decoration: underline\n            }\n\n            a[href]:after {\n                content: \" (\"attr(href) \")\"\n            }\n\n            pre {\n                border: 1px solid #999;\n                page-break-inside: avoid\n            }\n\n            thead {\n                display: table-header-group\n            }\n\n            img,\n            tr {\n                page-break-inside: avoid\n            }\n\n            img {\n                max-width: 100% !important\n            }\n\n            h3 {\n                orphans: 3;\n                widows: 3\n            }\n\n            h3 {\n                page-break-after: avoid\n            }\n\n            .table {\n                border-collapse: collapse !important\n            }\n\n            .table td,\n            .table th {\n                background-color: #fff !important\n            }\n        }\n\n        @font-face {\n            font-family: 'Glyphicons Halflings';\n            src: url(../fonts/glyphicons-halflings-regular.eot);\n            src: url(../fonts/glyphicons-halflings-regular.eot?#iefix) format('embedded-opentype'), url(../fonts/glyphicons-halflings-regular.woff2) format('woff2'), url(../fonts/glyphicons-halflings-regular.woff) format('woff'), url(../fonts/glyphicons-halflings-regular.ttf) format('truetype'), url(../fonts/glyphicons-halflings-regular.svg#glyphicons_halflingsregular) format('svg')\n        }\n\n        * {\n            -webkit-box-sizing: border-box;\n            -moz-box-sizing: border-box;\n            box-sizing: border-box\n        }\n\n        html {\n            font-size: 10px;\n            -webkit-tap-highlight-color: rgba(0, 0, 0, 0)\n        }\n\n        body {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-size: 14px;\n            line-height: 1.42857143;\n            color: #333;\n            background-color: #fff\n        }\n\n        a {\n            color: #337ab7;\n            text-decoration: none\n        }\n\n        a:focus,\n        a:hover {\n            color: #23527c;\n            text-decoration: underline\n        }\n\n        a:focus {\n            outline: 5px auto -webkit-focus-ring-color;\n            outline-offset: -2px\n        }\n\n        img {\n            vertical-align: middle\n        }\n\n        h1,\n        h3 {\n            font-family: inherit;\n            font-weight: 500;\n            line-height: 1.1;\n            color: inherit\n        }\n\n        h1,\n        h3 {\n            margin-top: 20px;\n            margin-bottom: 10px\n        }\n\n        h1 {\n            font-size: 36px\n        }\n\n        h3 {\n            font-size: 24px\n        }\n\n        code,\n        pre {\n            font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace\n        }\n\n        code {\n            padding: 2px 4px;\n            font-size: 90%;\n            color: #c7254e;\n            background-color: #f9f2f4;\n            border-radius: 4px\n        }\n\n        pre {\n            display: block;\n            padding: 9.5px;\n            margin: 0 0 10px;\n            font-size: 13px;\n            line-height: 1.42857143;\n            color: #333;\n            word-break: break-all;\n            word-wrap: break-word;\n            background-color: #f5f5f5;\n            border: 1px solid #ccc;\n            border-radius: 4px\n        }\n\n        .container {\n            padding-right: 15px;\n            padding-left: 15px;\n            margin-right: auto;\n            margin-left: auto\n        }\n\n        @media (min-width:768px) {\n            .container {\n                width: 750px\n            }\n        }\n\n        @media (min-width:992px) {\n            .container {\n                width: 970px\n            }\n        }\n\n        @media (min-width:1200px) {\n            .container {\n                width: 1170px\n            }\n        }\n\n        .row {\n            margin-right: -15px;\n            margin-left: -15px\n        }\n\n        .col-md-1,\n        .col-md-10,\n        .col-md-12,\n        .col-sm-2,\n        .col-sm-6,\n        .col-xs-3,\n        .col-xs-7 {\n            position: relative;\n            min-height: 1px;\n            padding-right: 15px;\n            padding-left: 15px\n        }\n\n        .col-xs-3,\n        .col-xs-7 {\n            float: left\n        }\n\n        .col-xs-7 {\n            width: 58.33333333%\n        }\n\n        .col-xs-3 {\n            width: 25%\n        }\n\n        @media (min-width:768px) {\n\n            .col-sm-2,\n            .col-sm-6 {\n                float: left\n            }\n\n            .col-sm-6 {\n                width: 50%\n            }\n\n            .col-sm-2 {\n                width: 16.66666667%\n            }\n        }\n\n        @media (min-width:992px) {\n\n            .col-md-1,\n            .col-md-10,\n            .col-md-12 {\n                float: left\n            }\n\n            .col-md-12 {\n                width: 100%\n            }\n\n            .col-md-10 {\n                width: 83.33333333%\n            }\n\n            .col-md-1 {\n                width: 8.33333333%\n            }\n        }\n\n        table {\n            background-color: transparent\n        }\n\n        th {\n            text-align: left\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            margin-bottom: 20px\n        }\n\n        .table>tbody>tr>td,\n        .table>thead>tr>th {\n            padding: 8px;\n            line-height: 1.42857143;\n            vertical-align: top;\n            border-top: 1px solid #ddd\n        }\n\n        .table>thead>tr>th {\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd\n        }\n\n        .table>thead:first-child>tr:first-child>th {\n            border-top: 0\n        }\n\n        .table-striped>tbody>tr:nth-of-type(odd) {\n            background-color: #f9f9f9\n        }\n\n        .container:after,\n        .container:before,\n        .row:after,\n        .row:before {\n            display: table;\n            content: \" \"\n        }\n\n        .container:after,\n        .row:after {\n            clear: both\n        }\n\n        @-ms-viewport {\n            width: device-width\n        }\n\n        h1 {\n            margin-top: 20px\n        }\n\n        * {\n            -webkit-box-sizing: border-box;\n            -moz-box-sizing: border-box;\n            box-sizing: border-box\n        }\n\n        body {\n            font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n            font-size: 14px;\n            line-height: 1.42857143;\n            color: #333;\n            background-color: #fff;\n            margin: 0\n        }\n\n        h1 {\n            margin-bottom: 10px;\n            font-family: inherit;\n            font-weight: 500;\n            line-height: 1.1;\n            color: inherit\n        }\n\n        .table {\n            margin-bottom: 20px\n        }\n\n        h1 {\n            font-size: 36px\n        }\n\n        a {\n            color: #337ab7;\n            text-decoration: none\n        }\n\n        a:hover {\n            color: #23527c\n        }\n\n        .container {\n            padding-right: 15px;\n            padding-left: 15px;\n            margin-right: auto;\n            margin-left: auto\n        }\n\n        @media (min-width:768px) {\n            .container {\n                width: 750px\n            }\n        }\n\n        @media (min-width:992px) {\n            .container {\n                width: 970px\n            }\n        }\n\n        @media (min-width:1200px) {\n            .container {\n                width: 1170px\n            }\n        }\n\n        .table {\n            width: 100%;\n            max-width: 100%;\n            background-color: transparent;\n            border-spacing: 0;\n            border-collapse: collapse\n        }\n\n        .table-striped>tbody {\n            background-color: #f9f9f9\n        }\n\n        .table>tbody>tr>td,\n        .table>thead>tr>th {\n            padding: 8px;\n            line-height: 1.42857143;\n            vertical-align: top;\n            border-top: 1px solid #ddd\n        }\n\n        .table>thead>tr>th {\n            border-top: 0;\n            vertical-align: bottom;\n            border-bottom: 2px solid #ddd;\n            text-align: left\n        }\n\n        code {\n            padding: 2px 4px;\n            font-size: 90%;\n            color: #c7254e;\n            background-color: #f9f2f4;\n            border-radius: 4px;\n            font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace\n        }\n\n        .row {\n            margin-right: -15px;\n            margin-left: -15px\n        }\n\n        .col-md-10 {\n            float: left;\n            position: relative;\n            min-height: 1px;\n            padding-right: 15px;\n            padding-left: 15px\n        }\n\n        .col-md-10 {\n            width: 83.33333333%\n        }\n\n        img {\n            vertical-align: middle;\n            border: 0\n        }\n\n        .container {\n            min-width: 320px\n        }\n\n        body {\n            font-family: helvetica\n        }\n\n        table {\n            font-size: 14px\n        }\n\n        table.table tbody tr td {\n            border-top: 0;\n            border-bottom: 1px dotted #ddd;\n            padding: 2px;\n        }\n\n        pre {\n            white-space: pre-wrap;\n            margin-bottom: 10px;\n            max-height: 275px;\n            overflow: scroll\n        }\n\n        header {\n            background-color: #ed605e;\n            padding: 10px 20px;\n            box-sizing: border-box\n        }\n\n        .logo img {\n            width: 80px\n        }\n\n        .titles h1 {\n            font-size: 30px;\n            font-weight: 300;\n            color: #fff;\n            margin: 24px 0\n        }\n\n        .content h3 {\n            color: gray;\n            margin: 25px 0\n        }\n\n        .foot {\n            padding: 5px 0 20px;\n            text-align: right;\n            color: #c5c5c5;\n            font-weight: 300\n        }\n\n        .foot a {\n            color: #8b8b8b;\n            text-decoration: underline\n        }\n\n        .centered {\n            text-align: center\n        }\n\n        @media all and (max-width:500px) {\n            .titles h1 {\n                font-size: 25px;\n                margin: 26px 0\n            }\n        }\n\n        @media all and (max-width:530px) {\n            .titles h1 {\n                font-size: 20px;\n                margin: 24px 0\n            }\n\n            .logo {\n                padding: 0\n            }\n\n            .logo img {\n                width: 100%;\n                max-width: 80px\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <header>\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-1 col-sm-2 col-xs-3 logo\">\n                    <a href=\"/\"><img src=\"https://gobuffalo.io/assets/images/logo_med.png\" alt=\"\"></a>\n                </div>\n                <div class=\"col-md-10 col-sm-6 col-xs-7 titles\">\n                    <h1>\n                        <%= status %> - ERROR!\n                    </h1>\n                </div>\n            </div>\n        </div>\n    </header>\n\n    <div class=\"container content\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <h3>Error Trace</h3>\n                <pre><%= error %></pre>\n\n                <h3>Context</h3>\n                <pre><%= inspect(context) %></pre>\n\n                <h3>Parameters</h3>\n                <pre><%= inspect(params) %></pre>\n\n                <h3>Headers</h3>\n                <pre><%= inspect(headers) %></pre>\n\n                <h3>Form</h3>\n                <pre><%= inspect(posted_form) %></pre>\n\n                <h3>Routes</h3>\n                <table class=\"table table-striped\">\n                    <thead>\n                        <tr text-align=\"left\">\n                            <th class=\"centered\">METHOD</th>\n                            <th>PATH</th>\n                            <th>NAME</th>\n                            <th>HANDLER</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n\n                        <%= for (r) in routes { %>\n                            <tr>\n                                <td class=\"centered\">\n                                    <%= r.Method %>\n                                </td>\n                                <td>\n                                    <%= if (r.Method !=\"GET\" || r.Path ~=\"{\" ) { %>\n                                        <%= r.Path %>\n                                            <% } else { %>\n                                                <a href=\"<%= r.Path %>\">\n                                                    <%= r.Path %>\n                                                </a>\n                                                <% } %>\n                                </td>\n                                <td>\n                                    <%= r.PathName %>\n                                </td>\n                                <td><code><%= r.HandlerName %></code></td>\n                            </tr>\n                            <% } %>\n\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div class=\"foot\"> <span> Powered by <a href=\"http://gobuffalo.io/\">gobuffalo.io</a></span></div>\n    </div>\n</body>\n\n</html>"
        },
        {
          "name": "error.prod.html",
          "type": "blob",
          "size": 1.5498046875,
          "content": "<!DOCTYPE html>\n<html>\n<head>\n    <style>\n        h1,\n        p.powered {\n            text-align: center\n        }\n\n        body {\n            background: #ECECEC;\n            padding-top: 25px;\n            font-family: helvetica neue, helvetica, sans-serif;\n            color: #333\n        }\n\n        .card {\n            box-sizing: border-box;\n            width: 440px;\n            min-width: 270px;\n            margin: 0 auto;\n            padding: 10px 25px 35px 10px;\n            background: #FFF;\n            box-shadow: 0 2px 4px 0 rgba(185, 185, 185, .28);\n            border-radius: 5px\n        }\n\n        .card p {\n            max-width: 320px;\n            margin: 15px auto\n        }\n\n        h1 {\n            font-size: 22px\n        }\n\n        hr {\n            border: .5px solid #D72727;\n            width: 180px\n        }\n\n        p.powered {\n            font-family: HelveticaNeue-Light;\n            font-size: 12px;\n            color: #333\n        }\n\n        @media (max-width:600px) {\n            .card {\n                width: 100%;\n                display: block\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"card\">\n            <h1>We're Sorry!</h1>\n            <hr>\n            <p>It looks like something went wrong! Don't worry, we are aware of the problem and are looking into it.</p>\n            <p>Sorry if this has caused you any problems. Please check back again later.</p>\n        </div>\n\n        <p class=\"powered\">powered by <a href=\"https://gobuffalo.io\">gobuffalo.io</a></p>\n    </div>\n</body>\n\n</html>"
        },
        {
          "name": "error_templates.go",
          "type": "blob",
          "size": 0.232421875,
          "content": "package buffalo\n\nimport (\n\t_ \"embed\" // needed to embed the templates.\n)\n\nvar (\n\t//go:embed error.dev.html\n\tdevErrorTmpl string\n\n\t//go:embed error.prod.html\n\tprodErrorTmpl string\n\n\t//go:embed notfound.prod.html\n\tprodNotFoundTmpl string\n)\n"
        },
        {
          "name": "errors.go",
          "type": "blob",
          "size": 6.912109375,
          "content": "package buffalo\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"encoding/xml\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"runtime/debug\"\n\t\"sort\"\n\t\"strings\"\n\n\t\"github.com/gobuffalo/buffalo/internal/defaults\"\n\t\"github.com/gobuffalo/buffalo/internal/httpx\"\n\t\"github.com/gobuffalo/events\"\n\t\"github.com/gobuffalo/plush/v4\"\n)\n\n// HTTPError a typed error returned by http Handlers and used for choosing error handlers\ntype HTTPError struct {\n\tStatus int   `json:\"status\"`\n\tCause  error `json:\"error\"`\n}\n\n// Unwrap allows the error to be unwrapped.\nfunc (h HTTPError) Unwrap() error {\n\treturn h.Cause\n}\n\n// Error returns the cause of the error as string.\nfunc (h HTTPError) Error() string {\n\tif h.Cause != nil {\n\t\treturn h.Cause.Error()\n\t}\n\treturn \"unknown cause\"\n}\n\n// ErrorHandler interface for handling an error for a\n// specific status code.\ntype ErrorHandler func(int, error, Context) error\n\n// ErrorHandlers is used to hold a list of ErrorHandler\n// types that can be used to handle specific status codes.\n/*\n\ta.ErrorHandlers[http.StatusInternalServerError] = func(status int, err error, c buffalo.Context) error {\n\t\tres := c.Response()\n\t\tres.WriteHeader(status)\n\t\tres.Write([]byte(err.Error()))\n\t\treturn nil\n\t}\n*/\ntype ErrorHandlers map[int]ErrorHandler\n\n// Get a registered ErrorHandler for this status code. If\n// no ErrorHandler has been registered, a default one will\n// be returned.\nfunc (e ErrorHandlers) Get(status int) ErrorHandler {\n\tif eh, ok := e[status]; ok {\n\t\treturn eh\n\t}\n\tif eh, ok := e[0]; ok {\n\t\treturn eh\n\t}\n\treturn defaultErrorHandler\n}\n\n// Default sets an error handler should a status\n// code not already be mapped. This will replace\n// the original default error handler.\n// This is a *catch-all* handler.\nfunc (e ErrorHandlers) Default(eh ErrorHandler) {\n\tif eh != nil {\n\t\te[0] = eh\n\t}\n}\n\n// PanicHandler recovers from panics gracefully and calls\n// the error handling code for a 500 error.\nfunc (a *App) PanicHandler(next Handler) Handler {\n\treturn func(c Context) error {\n\t\tdefer func() { //catch or finally\n\t\t\tr := recover()\n\t\t\tvar err error\n\t\t\tif r != nil { //catch\n\t\t\t\tswitch t := r.(type) {\n\t\t\t\tcase error:\n\t\t\t\t\terr = t\n\t\t\t\tcase string:\n\t\t\t\t\terr = fmt.Errorf(t)\n\t\t\t\tdefault:\n\t\t\t\t\terr = fmt.Errorf(fmt.Sprint(t))\n\t\t\t\t}\n\n\t\t\t\tpayload := events.Payload{\n\t\t\t\t\t\"context\":    c,\n\t\t\t\t\t\"app\":        a,\n\t\t\t\t\t\"stacktrace\": string(debug.Stack()),\n\t\t\t\t\t\"error\":      err,\n\t\t\t\t}\n\t\t\t\tevents.EmitError(events.ErrPanic, err, payload)\n\n\t\t\t\teh := a.ErrorHandlers.Get(http.StatusInternalServerError)\n\t\t\t\teh(http.StatusInternalServerError, err, c)\n\t\t\t}\n\t\t}()\n\t\treturn next(c)\n\t}\n}\n\nfunc (a *App) defaultErrorMiddleware(next Handler) Handler {\n\treturn func(c Context) error {\n\t\terr := next(c)\n\t\tif err == nil {\n\t\t\treturn nil\n\t\t}\n\n\t\t// 500 Internal Server Error by default\n\t\tstatus := http.StatusInternalServerError\n\n\t\t// unpack root err and check for HTTPError\n\t\tif errors.Is(err, sql.ErrNoRows) {\n\t\t\tstatus = http.StatusNotFound\n\t\t}\n\t\tvar h HTTPError\n\t\tif errors.As(err, &h) {\n\t\t\tstatus = h.Status\n\t\t}\n\n\t\tpayload := events.Payload{\n\t\t\t\"context\": c,\n\t\t\t\"app\":     a,\n\t\t\t\"status\":  status,\n\t\t\t\"error\":   err,\n\t\t}\n\t\tif status >= http.StatusInternalServerError {\n\t\t\t// we need the details (or stack trace) only for 5xx errors.\n\t\t\t// pkg/errors supports '%+v' for stack trace.\n\t\t\t// the other type of errors that support '%+v' is also supported.\n\t\t\tpayload[\"stacktrace\"] = fmt.Sprintf(\"%+v\", err)\n\t\t}\n\t\tevents.EmitError(events.ErrGeneral, err, payload)\n\n\t\teh := a.ErrorHandlers.Get(status)\n\t\terr = eh(status, err, c)\n\t\tif err != nil {\n\t\t\tevents.Emit(events.Event{\n\t\t\t\tKind:    EvtFailureErr,\n\t\t\t\tMessage: \"unable to handle error and giving up\",\n\t\t\t\tError:   err,\n\t\t\t\tPayload: payload,\n\t\t\t})\n\t\t\t// things have really hit the fan if we're here!!\n\t\t\ta.Logger.Error(err)\n\t\t\tc.Response().WriteHeader(http.StatusInternalServerError)\n\t\t\tc.Response().Write([]byte(err.Error()))\n\t\t}\n\t\treturn nil\n\t}\n}\n\nfunc productionErrorResponseFor(status int) []byte {\n\tif status == http.StatusNotFound {\n\t\treturn []byte(prodNotFoundTmpl)\n\t}\n\n\treturn []byte(prodErrorTmpl)\n}\n\n// ErrorResponse is a used to display errors as JSON or XML\ntype ErrorResponse struct {\n\tXMLName xml.Name `json:\"-\" xml:\"response\"`\n\tError   string   `json:\"error\" xml:\"error\"`\n\tTrace   string   `json:\"trace,omitempty\" xml:\"trace,omitempty\"`\n\tCode    int      `json:\"code\" xml:\"code,attr\"`\n}\n\nconst defaultErrorCT = \"text/html; charset=utf-8\"\n\nfunc defaultErrorHandler(status int, origErr error, c Context) error {\n\tenv := c.Value(\"env\")\n\trequestCT := defaults.String(httpx.ContentType(c.Request()), defaultErrorCT)\n\n\tvar defaultErrorResponse *ErrorResponse\n\n\tc.LogField(\"status\", status)\n\tc.Logger().Error(origErr)\n\tc.Response().WriteHeader(status)\n\n\tif env != nil && env.(string) != \"development\" {\n\t\tswitch strings.ToLower(requestCT) {\n\t\tcase \"application/json\", \"text/json\", \"json\", \"application/xml\", \"text/xml\", \"xml\":\n\t\t\tdefaultErrorResponse = &ErrorResponse{\n\t\t\t\tCode:  status,\n\t\t\t\tError: http.StatusText(status),\n\t\t\t}\n\t\tdefault:\n\t\t\tc.Response().Header().Set(\"content-type\", defaultErrorCT)\n\t\t\tresponseBody := productionErrorResponseFor(status)\n\t\t\tc.Response().Write(responseBody)\n\t\t\treturn nil\n\t\t}\n\t}\n\n\ttrace := fmt.Sprintf(\"%+v\", origErr)\n\tif cause := errors.Unwrap(origErr); cause != nil {\n\t\torigErr = cause\n\t}\n\n\terrResponse := errorResponseDefault(defaultErrorResponse, &ErrorResponse{\n\t\tError: origErr.Error(),\n\t\tTrace: trace,\n\t\tCode:  status,\n\t})\n\n\tswitch strings.ToLower(requestCT) {\n\tcase \"application/json\", \"text/json\", \"json\":\n\t\tc.Response().Header().Set(\"content-type\", \"application/json\")\n\t\terr := json.NewEncoder(c.Response()).Encode(errResponse)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tcase \"application/xml\", \"text/xml\", \"xml\":\n\t\tc.Response().Header().Set(\"content-type\", \"text/xml\")\n\t\terr := xml.NewEncoder(c.Response()).Encode(errResponse)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\tdefault:\n\t\tc.Response().Header().Set(\"content-type\", defaultErrorCT)\n\t\tif err := c.Request().ParseForm(); err != nil {\n\t\t\ttrace = fmt.Sprintf(\"%s\\n%s\", err.Error(), trace)\n\t\t}\n\n\t\troutes := c.Value(\"routes\")\n\t\tcd := c.Data()\n\n\t\tdelete(cd, \"app\")\n\t\tdelete(cd, \"routes\")\n\n\t\tdata := map[string]interface{}{\n\t\t\t\"routes\":      routes,\n\t\t\t\"error\":       trace,\n\t\t\t\"status\":      status,\n\t\t\t\"data\":        cd,\n\t\t\t\"params\":      c.Params(),\n\t\t\t\"posted_form\": c.Request().Form,\n\t\t\t\"context\":     c,\n\t\t\t\"headers\":     inspectHeaders(c.Request().Header),\n\t\t\t\"inspect\": func(v interface{}) string {\n\t\t\t\treturn fmt.Sprintf(\"%+v\", v)\n\t\t\t},\n\t\t}\n\n\t\tctx := plush.NewContextWith(data)\n\t\tt, err := plush.Render(devErrorTmpl, ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\t_, err = c.Response().Write([]byte(t))\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc errorResponseDefault(defaultResponse, alternativeResponse *ErrorResponse) *ErrorResponse {\n\tif defaultResponse != nil {\n\t\treturn defaultResponse\n\t}\n\treturn alternativeResponse\n}\n\ntype inspectHeaders http.Header\n\nfunc (i inspectHeaders) String() string {\n\n\tbb := make([]string, 0, len(i))\n\n\tfor k, v := range i {\n\t\tbb = append(bb, fmt.Sprintf(\"%s: %s\", k, v))\n\t}\n\tsort.Strings(bb)\n\treturn strings.Join(bb, \"\\n\")\n}\n"
        },
        {
          "name": "errors_test.go",
          "type": "blob",
          "size": 5.5888671875,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/gobuffalo/logger\"\n\t\"github.com/sirupsen/logrus\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\n//testLoggerHook is useful to test whats being logged.\ntype testLoggerHook struct {\n\terrors []*logrus.Entry\n}\n\nfunc (lh *testLoggerHook) Fire(entry *logrus.Entry) error {\n\tlh.errors = append(lh.errors, entry)\n\treturn nil\n}\n\nfunc (lh *testLoggerHook) Levels() []logrus.Level {\n\treturn []logrus.Level{\n\t\tlogrus.ErrorLevel,\n\t}\n}\n\nfunc Test_defaultErrorHandler_SetsContentType(t *testing.T) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn c.Error(http.StatusUnauthorized, fmt.Errorf(\"boom\"))\n\t})\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/\").Get()\n\tr.Equal(http.StatusUnauthorized, res.Code)\n\tct := res.Header().Get(\"content-type\")\n\tr.Equal(\"text/html; charset=utf-8\", ct)\n}\n\nfunc Test_defaultErrorHandler_Logger(t *testing.T) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn c.Error(http.StatusUnauthorized, fmt.Errorf(\"boom\"))\n\t})\n\n\ttestHook := &testLoggerHook{}\n\tl := logrus.New()\n\tl.SetOutput(os.Stdout)\n\tl.AddHook(testHook)\n\tlog := logger.Logrus{\n\t\tFieldLogger: l,\n\t}\n\tapp.Logger = log\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/\").Get()\n\tr.Equal(http.StatusUnauthorized, res.Code)\n\tr.Equal(http.StatusUnauthorized, testHook.errors[0].Data[\"status\"])\n}\n\nfunc Test_defaultErrorHandler_JSON_development(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"application/json\", \"development\")\n}\n\nfunc Test_defaultErrorHandler_XML_development(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"text/xml\", \"development\")\n}\n\nfunc Test_defaultErrorHandler_JSON_staging(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"application/json\", \"staging\")\n}\n\nfunc Test_defaultErrorHandler_XML_staging(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"text/xml\", \"staging\")\n}\n\nfunc Test_defaultErrorHandler_JSON_production(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"application/json\", \"production\")\n}\n\nfunc Test_defaultErrorHandler_XML_production(t *testing.T) {\n\ttestDefaultErrorHandler(t, \"text/xml\", \"production\")\n}\n\nfunc testDefaultErrorHandler(t *testing.T, contentType, env string) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tapp.Env = env\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn c.Error(http.StatusUnauthorized, fmt.Errorf(\"boom\"))\n\t})\n\n\tw := httptest.New(app)\n\tvar res *httptest.Response\n\tif contentType == \"application/json\" {\n\t\tres = w.JSON(\"/\").Get().Response\n\t} else {\n\t\tres = w.XML(\"/\").Get().Response\n\t}\n\tr.Equal(http.StatusUnauthorized, res.Code)\n\tct := res.Header().Get(\"content-type\")\n\tr.Equal(contentType, ct)\n\tb := res.Body.String()\n\n\tif env == \"development\" {\n\t\tif contentType == \"text/xml\" {\n\t\t\tr.Contains(b, `<response code=\"401\">`)\n\t\t\tr.Contains(b, `<error>boom</error>`)\n\t\t\tr.Contains(b, `<trace>`)\n\t\t\tr.Contains(b, `</trace>`)\n\t\t\tr.Contains(b, `</response>`)\n\t\t} else {\n\t\t\tr.Contains(b, `\"code\":401`)\n\t\t\tr.Contains(b, `\"error\":\"boom\"`)\n\t\t\tr.Contains(b, `\"trace\":\"`)\n\t\t}\n\t} else {\n\t\tif contentType == \"text/xml\" {\n\t\t\tr.Contains(b, `<response code=\"401\">`)\n\t\t\tr.Contains(b, fmt.Sprintf(`<error>%s</error>`, http.StatusText(http.StatusUnauthorized)))\n\t\t\tr.NotContains(b, `<trace>`)\n\t\t\tr.NotContains(b, `</trace>`)\n\t\t\tr.Contains(b, `</response>`)\n\t\t} else {\n\t\t\tr.Contains(b, `\"code\":401`)\n\t\t\tr.Contains(b, fmt.Sprintf(`\"error\":\"%s\"`, http.StatusText(http.StatusUnauthorized)))\n\t\t\tr.NotContains(b, `\"trace\":\"`)\n\t\t}\n\t}\n}\n\nfunc Test_defaultErrorHandler_nil_error(t *testing.T) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn c.Error(http.StatusInternalServerError, nil)\n\t})\n\n\tw := httptest.New(app)\n\tres := w.JSON(\"/\").Get()\n\tr.Equal(http.StatusInternalServerError, res.Code)\n}\n\nfunc Test_PanicHandler(t *testing.T) {\n\tapp := New(Options{})\n\tapp.GET(\"/string\", func(c Context) error {\n\t\tpanic(\"string boom\")\n\t})\n\tapp.GET(\"/error\", func(c Context) error {\n\t\tpanic(fmt.Errorf(\"error boom\"))\n\t})\n\n\ttable := []struct {\n\t\tpath     string\n\t\texpected string\n\t}{\n\t\t{\"/string\", \"string boom\"},\n\t\t{\"/error\", \"error boom\"},\n\t}\n\n\tconst stack = `github.com/gobuffalo/buffalo.Test_PanicHandler`\n\n\tw := httptest.New(app)\n\tfor _, tt := range table {\n\t\tt.Run(tt.path, func(st *testing.T) {\n\t\t\tr := require.New(st)\n\n\t\t\tres := w.HTML(tt.path).Get()\n\t\t\tr.Equal(http.StatusInternalServerError, res.Code)\n\n\t\t\tbody := res.Body.String()\n\t\t\tr.Contains(body, tt.expected)\n\t\t\tr.Contains(body, stack)\n\t\t})\n\t}\n}\n\nfunc Test_defaultErrorMiddleware(t *testing.T) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tvar x string\n\tvar ok bool\n\tapp.ErrorHandlers[http.StatusUnprocessableEntity] = func(code int, err error, c Context) error {\n\t\tx, ok = c.Value(\"T\").(string)\n\t\tc.Response().WriteHeader(code)\n\t\tc.Response().Write([]byte(err.Error()))\n\t\treturn nil\n\t}\n\tapp.Use(func(next Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tc.Set(\"T\", \"t\")\n\t\t\treturn c.Error(http.StatusUnprocessableEntity, fmt.Errorf(\"boom\"))\n\t\t}\n\t})\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn nil\n\t})\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/\").Get()\n\tr.Equal(http.StatusUnprocessableEntity, res.Code)\n\tr.True(ok)\n\tr.Equal(\"t\", x)\n}\n\nfunc Test_SetErrorMiddleware(t *testing.T) {\n\tr := require.New(t)\n\tapp := New(Options{})\n\tapp.ErrorHandlers.Default(func(code int, err error, c Context) error {\n\t\tres := c.Response()\n\t\tres.WriteHeader(http.StatusTeapot)\n\t\tres.Write([]byte(\"i'm a teapot\"))\n\t\treturn nil\n\t})\n\tapp.GET(\"/\", func(c Context) error {\n\t\treturn c.Error(http.StatusUnprocessableEntity, fmt.Errorf(\"boom\"))\n\t})\n\n\tw := httptest.New(app)\n\tres := w.HTML(\"/\").Get()\n\tr.Equal(http.StatusTeapot, res.Code)\n\tr.Equal(\"i'm a teapot\", res.Body.String())\n}\n"
        },
        {
          "name": "events.go",
          "type": "blob",
          "size": 2.33203125,
          "content": "package buffalo\n\n// TODO: TODO-v1 check if they are really need to be exported.\n/* The event id should be unique across packages as the format of\n   \"<package-name>:<additional-names>:<optional-error>\" as documented. They\n   should not be used by another packages to keep it informational. To make\n   it sure, they need to be internal.\n   Especially for plugable conponents like servers or workers, they can have\n   their own event definition if they need but the buffalo runtime can emit\n   generalize events when e.g. the runtime calls configured worker.\n*/\nconst (\n\t// EvtAppStart is emitted when buffalo.App#Serve is called\n\tEvtAppStart = \"buffalo:app:start\"\n\t// EvtAppStartErr is emitted when an error occurs calling buffalo.App#Serve\n\tEvtAppStartErr = \"buffalo:app:start:err\"\n\n\t// EvtAppStop is emitted when buffalo.App#Stop is called\n\tEvtAppStop = \"buffalo:app:stop\"\n\t// EvtAppStopErr is emitted when an error occurs calling buffalo.App#Stop\n\tEvtAppStopErr = \"buffalo:app:stop:err\"\n\n\t// EvtRouteStarted is emitted when a requested route is being processed\n\tEvtRouteStarted = \"buffalo:route:started\"\n\t// EvtRouteFinished is emitted when a requested route is completed\n\tEvtRouteFinished = \"buffalo:route:finished\"\n\t// EvtRouteErr is emitted when there is a problem handling processing a route\n\tEvtRouteErr = \"buffalo:route:err\"\n\n\t// EvtServerStart is emitted when buffalo is about to start servers\n\tEvtServerStart = \"buffalo:server:start\"\n\t// EvtServerStartErr is emitted when an error occurs when starting servers\n\tEvtServerStartErr = \"buffalo:server:start:err\"\n\t// EvtServerStop is emitted when buffalo is about to stop servers\n\tEvtServerStop = \"buffalo:server:stop\"\n\t// EvtServerStopErr is emitted when an error occurs when stopping servers\n\tEvtServerStopErr = \"buffalo:server:stop:err\"\n\n\t// EvtWorkerStart is emitted when buffalo is about to start workers\n\tEvtWorkerStart = \"buffalo:worker:start\"\n\t// EvtWorkerStartErr is emitted when an error occurs when starting workers\n\tEvtWorkerStartErr = \"buffalo:worker:start:err\"\n\t// EvtWorkerStop is emitted when buffalo is about to stop workers\n\tEvtWorkerStop = \"buffalo:worker:stop\"\n\t// EvtWorkerStopErr is emitted when an error occurs when stopping workers\n\tEvtWorkerStopErr = \"buffalo:worker:stop:err\"\n\n\t// EvtFailureErr is emitted when something can't be processed at all. it is a bad thing\n\tEvtFailureErr = \"buffalo:failure:err\"\n)\n"
        },
        {
          "name": "flash.go",
          "type": "blob",
          "size": 1.2666015625,
          "content": "package buffalo\n\nimport \"encoding/json\"\n\n// flashKey is the prefix inside the Session.\nconst flashKey = \"_flash_\"\n\n//Flash is a struct that helps with the operations over flash messages.\ntype Flash struct {\n\tdata map[string][]string\n}\n\n//Delete removes a particular key from the Flash.\nfunc (f Flash) Delete(key string) {\n\tdelete(f.data, key)\n}\n\n//Clear removes all keys from the Flash.\nfunc (f *Flash) Clear() {\n\tf.data = map[string][]string{}\n}\n\n//Set allows to set a list of values into a particular key.\nfunc (f Flash) Set(key string, values []string) {\n\tf.data[key] = values\n}\n\n//Add adds a flash value for a flash key, if the key already has values the list for that value grows.\nfunc (f Flash) Add(key, value string) {\n\tif len(f.data[key]) == 0 {\n\t\tf.data[key] = []string{value}\n\t\treturn\n\t}\n\n\tf.data[key] = append(f.data[key], value)\n}\n\n//Persist the flash inside the session.\nfunc (f Flash) persist(session *Session) {\n\tb, _ := json.Marshal(f.data)\n\tsession.Set(flashKey, b)\n}\n\n//newFlash creates a new Flash and loads the session data inside its data.\nfunc newFlash(session *Session) *Flash {\n\tresult := &Flash{\n\t\tdata: map[string][]string{},\n\t}\n\n\tif session.Session != nil {\n\t\tif f := session.Get(flashKey); f != nil {\n\t\t\tjson.Unmarshal(f.([]byte), &result.data)\n\t\t}\n\t}\n\treturn result\n}\n"
        },
        {
          "name": "flash_test.go",
          "type": "blob",
          "size": 3.2353515625,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"testing\"\n\t\"text/template\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_FlashAdd(t *testing.T) {\n\tr := require.New(t)\n\tf := newFlash(&Session{})\n\n\tr.Equal(f.data, map[string][]string{})\n\n\tf.Add(\"error\", \"something\")\n\tr.Equal(f.data, map[string][]string{\n\t\t\"error\": {\"something\"},\n\t})\n\n\tf.Add(\"error\", \"other\")\n\tr.Equal(f.data, map[string][]string{\n\t\t\"error\": {\"something\", \"other\"},\n\t})\n}\n\nfunc Test_FlashRender(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\tc.Flash().Add(\"errors\", \"Error AJ set\")\n\t\tc.Flash().Add(\"errors\", \"Error DAL set\")\n\n\t\treturn c.Render(http.StatusCreated, rr.String(errorsTPL))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\n\tr.Contains(res.Body.String(), \"Error AJ set\")\n\tr.Contains(res.Body.String(), \"Error DAL set\")\n}\n\nfunc Test_FlashRenderEmpty(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\treturn c.Render(http.StatusCreated, rr.String(errorsTPL))\n\t})\n\n\tw := httptest.New(a)\n\n\tres := w.HTML(\"/\").Get()\n\tr.NotContains(res.Body.String(), \"Flash:\")\n}\n\nconst errorsTPL = `\n<%= for (k, v) in flash[\"errors\"] { %>\n\tFlash:\n\t\t<%= k %>:<%= v %>\n<% } %>\n`\n\nfunc Test_FlashRenderEntireFlash(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\tc.Flash().Add(\"something\", \"something to say!\")\n\t\treturn c.Render(http.StatusCreated, rr.String(keyTPL))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\tr.Contains(res.Body.String(), \"something to say!\")\n}\n\nconst keyTPL = `<%= for (k, v) in flash { %>\n\tFlash:\n\t\t<%= k %>:<%= v %>\n<% } %>\n`\n\nfunc Test_FlashRenderCustomKey(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\tc.Flash().Add(\"something\", \"something to say!\")\n\t\treturn c.Render(http.StatusCreated, rr.String(keyTPL))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\tr.Contains(res.Body.String(), \"something to say!\")\n}\n\nfunc Test_FlashRenderCustomKeyNotDefined(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\treturn c.Render(http.StatusCreated, rr.String(customKeyTPL))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\tr.NotContains(res.Body.String(), \"something to say!\")\n}\n\nconst customKeyTPL = `\n\t{{#each flash.other as |k value|}}\n\t\t{{value}}\n\t{{/each}}\n`\n\nfunc Test_FlashNotClearedOnRedirect(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/flash\", func(c Context) error {\n\t\tc.Flash().Add(\"success\", \"Antonio, you're welcome!\")\n\t\treturn c.Redirect(http.StatusSeeOther, \"/\")\n\t})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\ttemplate := `Message: <%= flash[\"success\"] %>`\n\t\treturn c.Render(http.StatusCreated, rr.String(template))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/flash\").Get()\n\tr.Equal(res.Code, http.StatusSeeOther)\n\tr.Equal(res.Location(), \"/\")\n\n\tres = w.HTML(\"/\").Get()\n\tr.Contains(res.Body.String(), template.HTMLEscapeString(\"Antonio, you're welcome!\"))\n\n}\n"
        },
        {
          "name": "fs.go",
          "type": "blob",
          "size": 2.2724609375,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"io/fs\"\n\t\"os\"\n)\n\n// FS wraps a directory and an embed FS that are expected to have the same contents.\n// it prioritizes the directory FS and falls back to the embedded FS if the file cannot\n// be found on disk. This is useful during development or when deploying with\n// assets not embedded in the binary.\n//\n// Additionally FS hiddes any file named embed.go from the FS.\ntype FS struct {\n\tembed fs.FS\n\tdir   fs.FS\n}\n\n// NewFS returns a new FS that wraps the given directory and embedded FS.\n// the embed.FS is expected to embed the same files as the directory FS.\nfunc NewFS(embed fs.ReadDirFS, dir string) FS {\n\treturn FS{\n\t\tembed: embed,\n\t\tdir:   os.DirFS(dir),\n\t}\n}\n\n// Open opens the named file.\n//\n// When Open returns an error, it should be of type *PathError with the Op\n// field set to \"open\", the Path field set to name, and the Err field\n// describing the problem.\n//\n// Open should reject attempts to open names that do not satisfy\n// ValidPath(name), returning a *PathError with Err set to ErrInvalid or\n// ErrNotExist.\nfunc (f FS) Open(name string) (fs.File, error) {\n\tif name == \"embed.go\" {\n\t\treturn nil, &fs.PathError{\n\t\t\tOp:   \"open\",\n\t\t\tPath: name,\n\t\t\tErr:  fs.ErrNotExist,\n\t\t}\n\t}\n\tfile, err := f.getFile(name)\n\tif name == \".\" {\n\t\t// NOTE: It always returns the root from the \"disk\" instead\n\t\t// \"embed\". However, it could be fine since the the purpose\n\t\t// of buffalo.FS isn't supporting full featured filesystem.\n\t\treturn rootFile{file}, err\n\t}\n\treturn file, err\n}\n\nfunc (f FS) getFile(name string) (fs.File, error) {\n\tfile, err := f.dir.Open(name)\n\tif err == nil {\n\t\treturn file, nil\n\t}\n\n\treturn f.embed.Open(name)\n}\n\n// rootFile wraps the \".\" directory for hidding the embed.go file.\ntype rootFile struct {\n\tfs.File\n}\n\n// ReadDir implements the fs.ReadDirFile interface.\nfunc (f rootFile) ReadDir(n int) (entries []fs.DirEntry, err error) {\n\tdir, ok := f.File.(fs.ReadDirFile)\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"%T is not a directory\", f.File)\n\t}\n\n\tentries, err = dir.ReadDir(n)\n\tentries = hideEmbedFile(entries)\n\treturn entries, err\n}\n\nfunc hideEmbedFile(entries []fs.DirEntry) []fs.DirEntry {\n\tresult := make([]fs.DirEntry, 0, len(entries))\n\n\tfor _, entry := range entries {\n\t\tif entry.Name() != \"embed.go\" {\n\t\t\tresult = append(result, entry)\n\t\t}\n\t}\n\treturn result\n}\n"
        },
        {
          "name": "fs_test.go",
          "type": "blob",
          "size": 2.7041015625,
          "content": "package buffalo\n\nimport (\n\t\"io\"\n\t\"io/fs\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/internal/testdata/embedded\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_FS_Disallows_Parent_Folders(t *testing.T) {\n\tr := require.New(t)\n\n\tfsys := NewFS(embedded.FS(), \"internal/testdata/disk\")\n\tr.NotNil(fsys)\n\n\tf, err := fsys.Open(\"../panic.txt\")\n\tr.ErrorIs(err, fs.ErrNotExist)\n\tr.Nil(f)\n\n\tf, err = fsys.Open(\"try/../to/../trick/../panic.txt\")\n\tr.ErrorIs(err, fs.ErrNotExist)\n\tr.Nil(f)\n}\n\nfunc Test_FS_Hides_embed_go(t *testing.T) {\n\tr := require.New(t)\n\n\tfsys := NewFS(embedded.FS(), \"internal/testdata/disk\")\n\tr.NotNil(fsys)\n\n\tf, err := fsys.Open(\"embed.go\")\n\tr.ErrorIs(err, fs.ErrNotExist)\n\tr.Nil(f)\n}\n\nfunc Test_FS_Prioritizes_Disk(t *testing.T) {\n\tr := require.New(t)\n\n\tfsys := NewFS(embedded.FS(), \"internal/testdata/disk\")\n\tr.NotNil(fsys)\n\n\tf, err := fsys.Open(\"file.txt\")\n\tr.NoError(err)\n\n\tb, err := io.ReadAll(f)\n\tr.NoError(err)\n\n\tr.Equal(\"This file is on disk.\", string(b))\n\n\t// should handle slash-separated path for all systems including Windows\n\tf, err = fsys.Open(\"under/sub/subfile\")\n\tr.NoError(err)\n\n\tb, err = io.ReadAll(f)\n\tr.NoError(err)\n\n\tr.Equal(\"This file is on disk/sub.\", string(b))\n}\n\nfunc Test_FS_Uses_Embed_If_No_Disk(t *testing.T) {\n\tr := require.New(t)\n\n\tfsys := NewFS(embedded.FS(), \"internal/testdata/empty\")\n\tr.NotNil(fsys)\n\n\tf, err := fsys.Open(\"file.txt\")\n\tr.NoError(err)\n\n\tb, err := io.ReadAll(f)\n\tr.NoError(err)\n\n\tr.Equal(\"This file is embedded.\", string(b))\n\n\t// should handle slash-separated path for all systems including Windows\n\tf, err = fsys.Open(\"under/sub/subfile\")\n\tr.NoError(err)\n\n\tb, err = io.ReadAll(f)\n\tr.NoError(err)\n\n\tr.Equal(\"This file is on embedded/sub.\", string(b))\n}\n\nfunc Test_FS_ReadDirFile(t *testing.T) {\n\tr := require.New(t)\n\n\tfsys := NewFS(embedded.FS(), \"internal/testdata/disk\")\n\tr.NotNil(fsys)\n\n\tf, err := fsys.Open(\".\")\n\tr.NoError(err)\n\n\tdir, ok := f.(fs.ReadDirFile)\n\tr.True(ok, \"folder does not implement fs.ReadDirFile interface\")\n\n\t// First read should return at most 1 file\n\tentries, err := dir.ReadDir(1)\n\tr.NoError(err)\n\n\t// The actual len will be 0 because the first file read is the embed.go file\n\t// this is counter-intuitive, but it's how the fs.ReadDirFile interface is specified;\n\t// if err == nil, just continue to call ReadDir until io.EOF is returned.\n\tr.LessOrEqual(len(entries), 1, \"a call to ReadDir must at most return n entries\")\n\n\t// Second read should return at most 2 files\n\tentries, err = dir.ReadDir(3)\n\tr.NoError(err)\n\n\t// The actual len will be 2 (file.txt & file2.txt + under/)\n\tr.LessOrEqual(len(entries), 3, \"a call to ReadDir must at most return n entries\")\n\n\t// trying to read next 2 files (none left)\n\tentries, err = dir.ReadDir(2)\n\tr.ErrorIs(err, io.EOF)\n\tr.Empty(entries)\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.939453125,
          "content": "module github.com/gobuffalo/buffalo\n\ngo 1.16\n\nrequire (\n\tgithub.com/BurntSushi/toml v1.2.1\n\tgithub.com/dustin/go-humanize v1.0.1\n\tgithub.com/gobuffalo/envy v1.10.2\n\tgithub.com/gobuffalo/events v1.4.3\n\tgithub.com/gobuffalo/flect v1.0.0\n\tgithub.com/gobuffalo/github_flavored_markdown v1.1.3\n\tgithub.com/gobuffalo/grift v1.5.2\n\tgithub.com/gobuffalo/helpers v0.6.7\n\tgithub.com/gobuffalo/httptest v1.5.2\n\tgithub.com/gobuffalo/logger v1.0.7\n\tgithub.com/gobuffalo/meta v0.3.3\n\tgithub.com/gobuffalo/nulls v0.4.2\n\tgithub.com/gobuffalo/plush/v4 v4.1.18\n\tgithub.com/gobuffalo/refresh v1.13.3\n\tgithub.com/gobuffalo/tags/v3 v3.1.4\n\tgithub.com/gorilla/handlers v1.5.1\n\tgithub.com/gorilla/mux v1.8.0\n\tgithub.com/gorilla/sessions v1.2.1\n\tgithub.com/monoculum/formam v3.5.5+incompatible\n\tgithub.com/psanford/memfs v0.0.0-20210214183328-a001468d78ef\n\tgithub.com/sirupsen/logrus v1.9.0\n\tgithub.com/spf13/cobra v1.6.1\n\tgithub.com/stretchr/testify v1.8.1\n\tgolang.org/x/text v0.6.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 15.1826171875,
          "content": "github.com/BurntSushi/toml v1.2.0/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/BurntSushi/toml v1.2.1 h1:9F2/+DoOYIOksmaJFPw1tGFy1eDnIJXg+UHjuD8lTak=\ngithub.com/BurntSushi/toml v1.2.1/go.mod h1:CxXYINrC8qIiEnFrOxCa7Jy5BFHlXnUU2pbicEuybxQ=\ngithub.com/aymerick/douceur v0.2.0 h1:Mv+mAeH1Q+n9Fr+oyamOlAkUNPWPlA8PPGR0QAaYuPk=\ngithub.com/aymerick/douceur v0.2.0/go.mod h1:wlT5vV2O3h55X9m7iVYN0TBM0NH/MmbLnd30/FjWUq4=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\ngithub.com/fatih/structs v1.1.0 h1:Q7juDM0QtcnhCpeyLGQKyg4TOIghuNXrkL32pHAUMxo=\ngithub.com/fatih/structs v1.1.0/go.mod h1:9NiDSp5zOcgEDl+j00MP/WkGVPOlPRLejGD8Ga6PJ7M=\ngithub.com/felixge/httpsnoop v1.0.1 h1:lvB5Jl89CsZtGIWuTcDM1E/vkVs49/Ml7JJe07l8SPQ=\ngithub.com/felixge/httpsnoop v1.0.1/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/go-sql-driver/mysql v1.6.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\ngithub.com/gobuffalo/envy v1.10.2 h1:EIi03p9c3yeuRCFPOKcSfajzkLb3hrRjEpHGI8I2Wo4=\ngithub.com/gobuffalo/envy v1.10.2/go.mod h1:qGAGwdvDsaEtPhfBzb3o0SfDea8ByGn9j8bKmVft9z8=\ngithub.com/gobuffalo/events v1.4.3 h1:JYDq7NbozP10zaN9Ijfem6Ozox2KacU2fU38RyquXM8=\ngithub.com/gobuffalo/events v1.4.3/go.mod h1:2BwfpV5X63t8xkUcVqIv4IbyAobJazRSVu1F1pgf3rc=\ngithub.com/gobuffalo/flect v0.3.0/go.mod h1:5pf3aGnsvqvCj50AVni7mJJF8ICxGZ8HomberC3pXLE=\ngithub.com/gobuffalo/flect v1.0.0 h1:eBFmskjXZgAOagiTXJH25Nt5sdFwNRcb8DKZsIsAUQI=\ngithub.com/gobuffalo/flect v1.0.0/go.mod h1:l9V6xSb4BlXwsxEMj3FVEub2nkdQjWhPvD8XTTlHPQc=\ngithub.com/gobuffalo/github_flavored_markdown v1.1.3 h1:rSMPtx9ePkFB22vJ+dH+m/EUBS8doQ3S8LeEXcdwZHk=\ngithub.com/gobuffalo/github_flavored_markdown v1.1.3/go.mod h1:IzgO5xS6hqkDmUh91BW/+Qxo/qYnvfzoz3A7uLkg77I=\ngithub.com/gobuffalo/grift v1.5.2 h1:mC0vHRs+nXz+JhkH3sv+rVnnTQRDXrUrOXOPYpgPjpo=\ngithub.com/gobuffalo/grift v1.5.2/go.mod h1:Uf/3T2AR1Vv+t84EPmxCjqQ8oyJwXs0FAoLMFUn/JVs=\ngithub.com/gobuffalo/helpers v0.6.7 h1:C9CedoRSfgWg2ZoIkVXgjI5kgmSpL34Z3qdnzpfNVd8=\ngithub.com/gobuffalo/helpers v0.6.7/go.mod h1:j0u1iC1VqlCaJEEVkZN8Ia3TEzfj/zoXANqyJExTMTA=\ngithub.com/gobuffalo/here v0.6.7/go.mod h1:vuCfanjqckTuRlqAitJz6QC4ABNnS27wLb816UhsPcc=\ngithub.com/gobuffalo/httptest v1.5.2 h1:GpGy520SfY1QEmyPvaqmznTpG4gEQqQ82HtHqyNEreM=\ngithub.com/gobuffalo/httptest v1.5.2/go.mod h1:FA23yjsWLGj92mVV74Qtc8eqluc11VqcWr8/C1vxt4g=\ngithub.com/gobuffalo/logger v1.0.7 h1:LTLwWelETXDYyqF/ASf0nxaIcdEOIJNxRokPcfI/xbU=\ngithub.com/gobuffalo/logger v1.0.7/go.mod h1:u40u6Bq3VVvaMcy5sRBclD8SXhBYPS0Qk95ubt+1xJM=\ngithub.com/gobuffalo/meta v0.3.3 h1:GwPWdbdnp4JrKASvMLa03OtmzISq7z/nE7T6aMqzoYM=\ngithub.com/gobuffalo/meta v0.3.3/go.mod h1:o4B099IUFUfK4555Guqxz1zHAqyuUQ/KtHXi8WvVeFE=\ngithub.com/gobuffalo/nulls v0.4.2 h1:GAqBR29R3oPY+WCC7JL9KKk9erchaNuV6unsOSZGQkw=\ngithub.com/gobuffalo/nulls v0.4.2/go.mod h1:EElw2zmBYafU2R9W4Ii1ByIj177wA/pc0JdjtD0EsH8=\ngithub.com/gobuffalo/plush/v4 v4.1.18 h1:bnPjdMTEUQHqj9TNX2Ck3mxEXYZa+0nrFMNM07kpX9g=\ngithub.com/gobuffalo/plush/v4 v4.1.18/go.mod h1:xi2tJIhFI4UdzIL8sxZtzGYOd2xbBpcFbLZlIPGGZhU=\ngithub.com/gobuffalo/refresh v1.13.3 h1:HYQlI6RiqWUf2yzCXvUHAYqm9M9/teVnox+mjzo/9rQ=\ngithub.com/gobuffalo/refresh v1.13.3/go.mod h1:NkzgLKZGk5suOvgvOD0/VALog0fH29Ib7fwym9JmRxA=\ngithub.com/gobuffalo/tags/v3 v3.1.4 h1:X/ydLLPhgXV4h04Hp2xlbI2oc5MDaa7eub6zw8oHjsM=\ngithub.com/gobuffalo/tags/v3 v3.1.4/go.mod h1:ArRNo3ErlHO8BtdA0REaZxijuWnWzF6PUXngmMXd2I0=\ngithub.com/gobuffalo/validate/v3 v3.3.3 h1:o7wkIGSvZBYBd6ChQoLxkz2y1pfmhbI4jNJYh6PuNJ4=\ngithub.com/gobuffalo/validate/v3 v3.3.3/go.mod h1:YC7FsbJ/9hW/VjQdmXPvFqvRis4vrRYFxr69WiNZw6g=\ngithub.com/gofrs/uuid v4.2.0+incompatible h1:yyYWMnhkhrKwwr8gAOcOCYxOOscHgDS9yZgBrnJfGa0=\ngithub.com/gofrs/uuid v4.2.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/google/go-cmp v0.5.4 h1:L8R9j+yAqZuZjsqh/z+F1NCffTKKLShY6zXTItVIZ8M=\ngithub.com/google/go-cmp v0.5.4/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/gorilla/css v1.0.0 h1:BQqNyPTi50JCFMTw/b67hByjMVXZRwGha6wxVGkeihY=\ngithub.com/gorilla/css v1.0.0/go.mod h1:Dn721qIggHpt4+EFCcTLTU/vk5ySda2ReITrtgBl60c=\ngithub.com/gorilla/handlers v1.5.1 h1:9lRY6j8DEeeBT10CvO9hGW0gmky0BprnvDI5vfhUHH4=\ngithub.com/gorilla/handlers v1.5.1/go.mod h1:t8XrUpc4KVXb7HGyJ4/cEnwQiaxrX/hz1Zv/4g96P1Q=\ngithub.com/gorilla/mux v1.8.0 h1:i40aqfkR1h2SlN9hojwV5ZA91wcXFOvkdNIeFDP5koI=\ngithub.com/gorilla/mux v1.8.0/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So=\ngithub.com/gorilla/securecookie v1.1.1 h1:miw7JPhV+b/lAHSXz4qd/nN9jRiAFV5FwjeKyCS8BvQ=\ngithub.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+HVt/4epWDjd4=\ngithub.com/gorilla/sessions v1.2.1 h1:DHd3rPN5lE3Ts3D8rKkQ8x/0kqfeNmBAaiSi+o7FsgI=\ngithub.com/gorilla/sessions v1.2.1/go.mod h1:dk2InVEVJ0sfLlnXv9EAgkf6ecYs/i80K/zI+bUmuGM=\ngithub.com/inconshreveable/mousetrap v1.0.1 h1:U3uMjPSQEBMNp1lFxmllqCPM6P5u/Xq7Pgzkat/bFNc=\ngithub.com/inconshreveable/mousetrap v1.0.1/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/jmoiron/sqlx v1.3.5 h1:vFFPA71p1o5gAeqtEAwLU4dnX2napprKtHr7PYIcN3g=\ngithub.com/jmoiron/sqlx v1.3.5/go.mod h1:nRVWtLre0KfCLJvgxzCsLVMogSvQ1zNJtpYr2Ccp0mQ=\ngithub.com/joho/godotenv v1.4.0 h1:3l4+N6zfMWnkbPEXKng2o2/MR5mSwTrBih4ZEkkz1lg=\ngithub.com/joho/godotenv v1.4.0/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/lib/pq v1.2.0/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\ngithub.com/mattn/go-colorable v0.1.9 h1:sqDoxXbdeALODt0DAeJCVp38ps9ZogZEAXjus69YV3U=\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-sqlite3 v1.14.6/go.mod h1:NyWgC/yNuGj7Q9rpYnZvas74GogHl5/Z4A/KQRfk6bU=\ngithub.com/mattn/go-sqlite3 v1.14.15 h1:vfoHhTN1af61xCRSWzFIWzx2YskyMTwHLrExkBOjvxI=\ngithub.com/mattn/go-sqlite3 v1.14.15/go.mod h1:2eHXhiwb8IkHr+BDWZGa96P6+rkvnG63S2DGjv9HUNg=\ngithub.com/microcosm-cc/bluemonday v1.0.20 h1:flpzsq4KU3QIYAYGV/szUat7H+GPOXR0B2JU5A1Wp8Y=\ngithub.com/microcosm-cc/bluemonday v1.0.20/go.mod h1:yfBmMi8mxvaZut3Yytv+jTXRY8mxyjJ0/kQBTElld50=\ngithub.com/mitchellh/go-homedir v1.1.0 h1:lukF9ziXFxDFPkA1vsr5zpc1XuPDn/wFntq5mG+4E0Y=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/monoculum/formam v3.5.5+incompatible h1:iPl5csfEN96G2N2mGu8V/ZB62XLf9ySTpC8KRH6qXec=\ngithub.com/monoculum/formam v3.5.5+incompatible/go.mod h1:RKgILGEJq24YyJ2ban8EO0RUVSJlF1pGsEvoLEACr/Q=\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/psanford/memfs v0.0.0-20210214183328-a001468d78ef h1:NKxTG6GVGbfMXc2mIk+KphcH6hagbVXhcFkbTgYleTI=\ngithub.com/psanford/memfs v0.0.0-20210214183328-a001468d78ef/go.mod h1:tcaRap0jS3eifrEEllL6ZMd9dg8IlDpi2S1oARrQ+NI=\ngithub.com/rogpeppe/go-internal v1.9.0 h1:73kH8U+JUqXU8lRuOHeVHaa/SZPifC7BkcraZVejAe8=\ngithub.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.2.0 h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=\ngithub.com/sergi/go-diff v1.2.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/sirupsen/logrus v1.9.0 h1:trlNQbNUG3OdDrDil03MCb1H2o9nJ1x4/5LYw7byDE0=\ngithub.com/sirupsen/logrus v1.9.0/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d h1:yKm7XZV6j9Ev6lojP2XaIshpT4ymkqhMeSghO5Ps00E=\ngithub.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d/go.mod h1:UdhH50NIW0fCiwBSr0co2m7BnFLdv4fQTgdqdJTHFeE=\ngithub.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e h1:qpG93cPwA5f7s/ZPBJnGOYQNK/vKsaDaseuKT5Asee8=\ngithub.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e/go.mod h1:HuIsMU8RRBOtsCgI77wP899iHVBQpCmg4ErYMZB+2IA=\ngithub.com/spf13/cobra v1.6.0/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=\ngithub.com/spf13/cobra v1.6.1 h1:o94oiPyS4KD1mPy2fmcYYHHfCxLqYjJOhGsCHFZtEzA=\ngithub.com/spf13/cobra v1.6.1/go.mod h1:IOw/AERYS7UzyrGinqmz6HLUo219MORXGxhbaJUqzrY=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1 h1:w7B6lhMri9wdJUVmEZPGGhZzrYTPvgJArz7wNPgYKsk=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.0.0-20220826154423-83b083e8dc8b/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/net v0.0.0-20221002022538-bcab6841153b h1:6e93nYa3hNqAvLr0pD4PN1fFS+gKzp2zAXqrnTCstqU=\ngolang.org/x/net v0.0.0-20221002022538-bcab6841153b/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0 h1:wsuoTGHzEhffawBOhz5CYhcrV4IdKZbEyZjBMuTp12o=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956 h1:XeJjHH1KiLpKGb6lvMiksZ9l0fVUh+AmGcm0nOMEBOY=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.0.0-20220722155259-a9ba230a4035 h1:Q5284mrmYTpACcm+eAKjKJH48BBwSyfJqmmGDTtT8Vc=\ngolang.org/x/term v0.0.0-20220722155259-a9ba230a4035/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.6.0 h1:3XmdazWV+ubf7QgHSTWeykHOci5oeekaGJBLkrkaw4k=\ngolang.org/x/text v0.6.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "grifts.go",
          "type": "blob",
          "size": 2.7216796875,
          "content": "package buffalo\n\nimport (\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"text/tabwriter\"\n\n\t\"github.com/gobuffalo/grift/grift\"\n)\n\n// Grifts decorates the app with tasks\nfunc Grifts(app *App) {\n\troutesGrift(app)\n\tmiddlewareGrift(app)\n\tsecretGrift()\n}\n\nfunc secretGrift() {\n\tgrift.Desc(\"secret\", \"Generate a cryptographically secure secret key\")\n\tgrift.Add(\"secret\", func(c *grift.Context) error {\n\t\tb := make([]byte, 64)\n\t\t_, err := rand.Read(b)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfmt.Println(string(b))\n\t\treturn nil\n\t})\n}\n\nfunc middlewareGrift(a *App) {\n\tgrift.Desc(\"middleware\", \"Prints out your middleware stack\")\n\tgrift.Add(\"middleware\", func(c *grift.Context) error {\n\t\tprintMiddleware(a)\n\t\treturn nil\n\t})\n}\n\nfunc printMiddleware(a *App) {\n\tprintMiddlewareByRoute(a)\n}\n\nfunc printMiddlewareByRoute(a *App) {\n\tmws := map[string]string{}\n\t// TODO: middleware is 'per App' can it be a loop for Apps?\n\tfor _, r := range a.Routes() {\n\t\tkey := r.App.host + r.App.name\n\t\tif mws[key] == \"\" {\n\t\t\tpname := r.App.host\n\t\t\tif parent := getParentApp(r.App.root, r.App.Name); parent != nil {\n\t\t\t\tpname += parent.Name\n\t\t\t}\n\n\t\t\tmws[key] = r.App.Middleware.String()\n\t\t\tif pname == key || mws[pname] != mws[key] {\n\t\t\t\tfmt.Printf(\"-> %s\\n\", key)\n\t\t\t\tprintMiddlewareStackWithIndent(mws[key])\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"-> %s (see: %v)\\n\", key, pname)\n\t\t\t}\n\t\t}\n\t\ts := \"\\n\" + mws[key]\n\t\tfor k := range r.App.Middleware.skips {\n\t\t\tmw := strings.Split(k, funcKeyDelimeter)[0]\n\t\t\th := strings.Split(k, funcKeyDelimeter)[1]\n\t\t\tif h == r.HandlerName {\n\t\t\t\ts = strings.Replace(s, \"\\n\"+mw, \"\", 1)\n\t\t\t}\n\t\t}\n\t\tif \"\\n\"+mws[key] != s {\n\t\t\tahn := strings.Split(r.HandlerName, \"/\")\n\t\t\thn := ahn[len(ahn)-1]\n\t\t\tfmt.Printf(\"-> %s %s (by %s)\\n\", r.Method, r.App.host+r.Path, hn)\n\t\t\tprintMiddlewareStackWithIndent(s)\n\t\t}\n\t}\n}\n\nfunc getParentApp(r *App, name string) *App {\n\tif r == nil {\n\t\treturn nil\n\t}\n\tfor _, x := range r.children {\n\t\tif x.Name == name {\n\t\t\treturn r\n\t\t}\n\t\tif len(x.children) > 0 {\n\t\t\tif ret := getParentApp(x, name); ret != nil {\n\t\t\t\treturn ret\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc printMiddlewareStackWithIndent(s string) {\n\tif s == \"\" {\n\t\ts = \"[none]\"\n\t}\n\ts = strings.Replace(s, \"\\n\", \"\\n\\t\", -1)\n\tfmt.Printf(\"\\t%v\\n\", strings.TrimSpace(s))\n}\n\nfunc routesGrift(a *App) {\n\tgrift.Desc(\"routes\", \"Print out all defined routes\")\n\tgrift.Add(\"routes\", func(c *grift.Context) error {\n\t\troutes := a.Routes()\n\t\tw := tabwriter.NewWriter(os.Stdout, 0, 0, 1, ' ', tabwriter.Debug)\n\t\tfmt.Fprintln(w, \"METHOD\\t HOST\\t PATH\\t ALIASES\\t NAME\\t HANDLER\")\n\t\tfmt.Fprintln(w, \"------\\t ----\\t ----\\t -------\\t ----\\t -------\")\n\t\tfor _, r := range routes {\n\t\t\tfmt.Fprintf(w, \"%s\\t %s\\t %s\\t %s\\t %s\\t %s\\n\", r.Method, r.App.host, r.Path, strings.Join(r.Aliases, \" \"), r.PathName, r.HandlerName)\n\t\t}\n\t\tw.Flush()\n\t\treturn nil\n\t})\n}\n"
        },
        {
          "name": "handler.go",
          "type": "blob",
          "size": 0.66796875,
          "content": "package buffalo\n\n// Handler is the basis for all of Buffalo. A Handler\n// will be given a Context interface that represents the\n// give request/response. It is the responsibility of the\n// Handler to handle the request/response correctly. This\n// could mean rendering a template, JSON, etc... or it could\n// mean returning an error.\n/*\n\tfunc (c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"Hello World!\"))\n\t}\n\n\tfunc (c Context) error {\n\t\treturn c.Redirect(http.StatusMovedPermanently, \"http://github.com/gobuffalo/buffalo\")\n\t}\n\n\tfunc (c Context) error {\n\t\treturn c.Error(http.StatusUnprocessableEntity, fmt.Errorf(\"oops!!\"))\n\t}\n*/\ntype Handler func(Context) error\n"
        },
        {
          "name": "home.go",
          "type": "blob",
          "size": 1.392578125,
          "content": "package buffalo\n\nimport (\n\t\"github.com/gorilla/mux\"\n)\n\n/* TODO: consider to split out Home (or Router, whatever) from App #road-to-v1\n   Group and Domain based multi-homing are actually not an App if the concept\n   of the App represents the application. The App should be only one for whole\n   application.\n\n   For an extreme example, App.Group().Stop() or even App.Group().Serve() are\n   still valid function calls while they should not be allowed and the result\n   could be strage.\n*/\n\n// Home is a container for Domains and Groups that independently serves a\n// group of pages with its own Middleware and ErrorHandlers. It is usually\n// a multi-homed server domain or group of paths under a certain prefix.\n//\n// While the App is for managing whole application life cycle along with its\n// default Home, including initializing and stopping its all components such\n// as listeners and long-running jobs, Home is only for a specific group of\n// services to serve its service logic efficiently.\ntype Home struct {\n\tapp     *App // will replace App.root\n\tappSelf *App // temporary while the App is in action.\n\t// replace Options' Name, Host, and Prefix\n\tname   string\n\thost   string\n\tprefix string\n\n\t// moved from App\n\t// Middleware returns the current MiddlewareStack for the App/Group.\n\tMiddleware    *MiddlewareStack `json:\"-\"`\n\tErrorHandlers ErrorHandlers    `json:\"-\"`\n\trouter        *mux.Router\n\tfilepaths     []string\n}\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "logger.go",
          "type": "blob",
          "size": 0.1767578125,
          "content": "package buffalo\n\nimport (\n\t\"github.com/gobuffalo/logger\"\n)\n\n// Logger interface is used throughout Buffalo\n// apps to log a whole manner of things.\ntype Logger = logger.FieldLogger\n"
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 64.4072265625,
          "content": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Generator: Adobe Illustrator 21.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Buffalo_x5F_Gopher\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\"\n\t y=\"0px\" viewBox=\"0 0 900 900\" enable-background=\"new 0 0 900 900\" xml:space=\"preserve\">\n<g>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"16\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM168.4,188c69-72,165.9-117.3,273.3-117.3C651.2,70.7,821,240.4,821,449.8C821,659.3,651.2,829,441.7,829\n\t\tC232.3,829,62.5,659.2,62.5,449.8l-0.2,0c-0.1-1.1,0.1-2.2,0-3.2c-1.7-27.6-3.4-55.2-5.1-82.8c-0.7-11.6-1.6-23.1-2.1-34.7\n\t\tc-0.2-3.6-0.6-7.2-0.3-10.7c0.9-13.3,12.8-11,24.1-13.5c0,0,0-87.7,0-87.7s0.8-15,24.2-15L127,188h9.4l-0.5-20.2\n\t\tc0,0-7.2-0.7-7.9-6.7c0,0-0.7-5.4,1.6-6.4c0,0,2.4-1.6,2.4,5.9c0,0,1.2,2.6,3,2.6l0.2-19.4c0,0,0.2-3.2,2.7-3.2\n\t\tc0,0,3.1-0.7,3.1,2.7c0,0,0,27.4,0,27.6c0,0.2,3.1-1.6,3.3-2c0.6-1,0.4-2.4,0.5-3.5c0.1-1.8-0.1-8.4,1.6-8.8\n\t\tc2.2-0.6,2.7,3.2,2.8,4.8c0.3,3.5-0.2,8-2.6,10.9c-0.4,0.5-4.6,3.6-4.6,3.2c0,0-0.7,12.7-0.7,12.7h0.3H168.4z\"/>\n\t<linearGradient id=\"SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"494.644\" y1=\"540.6563\" x2=\"494.644\" y2=\"70.5313\">\n\t\t<stop  offset=\"0\" style=\"stop-color:#D17C56\"/>\n\t\t<stop  offset=\"0.4089\" style=\"stop-color:#D0805B\"/>\n\t\t<stop  offset=\"1\" style=\"stop-color:#B2E6EA\"/>\n\t</linearGradient>\n\t<path fill=\"url(#SVGID_1_)\" d=\"M168.3,187c69-71.8,166-116.4,273.4-116.4C651.2,70.5,821,240.3,821,449.8c0,24.3-2.3,48.1-6.7,71.2\n\t\tl-151.9,7.4l-63.2,12.3L181.9,230.2L168.3,187z\"/>\n\t<polygon fill=\"#AF7133\" points=\"764.3,649 645.2,607.4 574.6,597.2 578.2,548 625.4,538.5 638.4,538.5 809.4,538.8 809.4,541.5 \n\t\t805.7,556.7 798.1,579.7 788,606.2 779.7,620.5 772.9,634.6 \t\"/>\n\t<polygon fill=\"#AF7133\" points=\"62.3,448.3 55.2,332.5 54.7,318.3 56.1,313 58.6,309.7 64.1,307.2 75.7,305.4 78.7,304.8 \n\t\t78.4,266.1 78.4,228.5 79.2,215.5 82.6,208.9 88.7,204.3 98,201.8 101.9,201.5 109.9,197.4 127,187 181.9,187.5 202.6,176.4 \n\t\t217.8,175.5 248.9,173.6 258.2,173.1 268.8,178.1 275.9,183 283.2,190.4 285.2,203.6 290.3,302.5 287.4,449.8 291.4,561.8 \n\t\t297.1,624.2 271.1,629.4 160.1,651.5 125.2,658.6 117.2,646.1 104.9,624.2 92.4,597.5 77.9,557.1 72.1,535 68.7,518.5 65.6,498.2 \n\t\t63.5,477.8 62.8,459.5 \t\"/>\n\t<polygon fill=\"#7B3D24\" points=\"764.8,648.5 643.8,607.5 574.8,596.1 294.7,624.7 125.2,658.6 141.7,681.7 154.8,697.7 181.9,726 \n\t\t227.5,762.7 261.6,783.5 316.2,807.7 359.8,820.1 382,824.3 412.7,827.9 439.1,829 454.4,829 482.9,826.8 518.3,821.2 543.9,815.1 \n\t\t566.1,808.1 595.4,796.5 612.4,788.5 621.6,783.7 649.3,767.2 668.1,754.1 694.8,732.2 712.8,715 734.5,690.8 751.3,668.8 \t\"/>\n\t<path fill=\"#AF7133\" d=\"M305.9,673.9l-53.1,1.8l20.8,73.5l28.7,6l48.7,1.3h83.3l15-3c0,0,36.7-9.5,37.7-9.5\n\t\tc1,0,61.4-15.4,61.4-15.4l76.9-19.2v-19l-24.8-26.3l-49.2-6.9L305.9,673.9z\"/>\n\t<path fill=\"#BC9E6C\" d=\"M533.5,231.3l-10.1-4.3h-14.3l-25.7-6h-34.6l-39.4,6h-51.6l-25.7,3.3c-26.8,15.8-41.1,46-52.2,73.8\n\t\tc-8.9,22.4-19.3,45-21.9,69.2c-1.3,11.8-0.2,24.8,2.9,37.2l-2.1,2.1l-1.3,5.4l6.7,22.8l32.7,35.6l67.7,35.5l55.7,12.5l44.9-1.9\n\t\tl23.7-14.7l66.2-31.5l30.4-14.3l16.3-42.7v-12l0.5-0.4c9.5-45.1-4.3-80.4-24.7-118.8c-12.4-23.3-21.6-43.6-45.7-57.9\"/>\n\t<path fill=\"#6AD7E5\" d=\"M299.1,463.3c-19.8-66.4,11.8-149.6,89.2-149.4l47.1-1.4h41l-0.1,0.3c77.4-0.2,109,83,89.2,149.3l-12.4,8.4\n\t\tl-26.4,19.6l-10.2,10.4h-15.1l-24.6,11.7l-14.4,6.1l-28.5,2.7l-33.3-0.9l-28.8-11.6L332.2,490l-25.7-19.4L299.1,463.3z\"/>\n\t<path fill=\"#F6D2A2\" d=\"M406.2,438.7c4.5-2.6,10.4-5.5,15.7-5.1c5.1,0.4,10.1,1.6,15.2,2.4c4.8,0.8,9.3,0.8,13.9,2.6\n\t\tc4.6,1.8,9,4.9,12.1,8.7c3.6,4.5,1.6,11.4-3.7,14.5c-9.8,5.8-18.4-5.6-28.3-5.5c-9.5,0.1-18.1,9.1-27.3,1.3\n\t\tC397.8,452.6,400.3,442.1,406.2,438.7z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M443.5,474.3c4.4-1.2,5.2-6.8,3.9-10.7c-1.6-5-8.2-8.4-13.4-5.9c-4.3,2-2.8,6.4-2.9,11.4\n\t\tC430.9,475.8,438.5,475.6,443.5,474.3z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M412.3,461.6c1.7,0.5,3.6,0,5.3-0.6c3.3-1.2,9.3-5.8,11.6-3.9c2.7,2.1,1.5,15.5,0.8,15.9\n\t\tc-3.4,2-8.4,2.9-13.3,1.3c-5.9-1.9-3.6-7-3.5-10.8c0-0.6,0.4-1.1,0.3-1.7\"/>\n\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 45.5048 835.4331)\" fill=\"#FFFFFF\" cx=\"497.8\" cy=\"391.8\" rx=\"49\" ry=\"49\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 -72.0028 704.4983)\" fill=\"#FFFFFF\" cx=\"364.6\" cy=\"393.2\" rx=\"49\" ry=\"49\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 7.9834 574.7572)\" fill=\"#FFFFFF\" cx=\"330.8\" cy=\"282.8\" rx=\"24.3\" ry=\"24.3\"/>\n\t<path fill=\"#726958\" d=\"M294.2,271.6c-5.3-1.7-11.7-13.6-14.2-18.3c-5.1-9.2-8.4-19.4-9-30c-0.3-5.5,0.1-17.7,7.4-19.5\n\t\tc9.1-2.3,14.1,11.7,20.6,15.8c9.3,5.9,21.7,4.5,32,2.4c0,0,0.7,4.5,0.8,4.8c0.1,0.9,0.7,2.3,0.5,3.1c-0.2,1.1-2,1.6-2.9,2.1\n\t\tc-3.2,1.7-6,3.6-8.9,5.8c-1.9,1.5-3.5,3.2-5.2,5c-0.8,0.8-1.6,1.5-2.3,2.4c-0.7,0.9-1.3,1.9-2,2.8c-1.9,2.1-3.2,4.6-4.9,6.8\n\t\tc-1.4,1.7-3,3.5-4,5.5c-1,1.9-2.4,3.7-3.2,5.6c-0.5,1.3-0.7,2.5-1.8,3.5C296,270.3,295,270.9,294.2,271.6z\"/>\n\t<path fill=\"#BC9E6C\" d=\"M259.4,518c-6.9,4-17,12.8-21.8,17.6c-2.6,2.6-11.7,10.7-13,14.3c-2.5,6.8,7.5,2.5,8.8,8.6\n\t\tc1.5,6.9-5.1,11,5.3,10.7c5.8-0.2,11.4-2.1,16.7-4c8.7-3.2,20.5-5.3,30.2-10.6l0.2-4l0.2-3.6l-8.3-8.3l-10.3-17.8l-2.7-2.8H259.4z\"\n\t\t/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM317.5,664.9c-8.3,6.8-16.6,13.6-20.8,23.6c-5,11.8-0.9,27.8,13.1,28.6c9.8,0.5,27-6.3,35.6-10.5c8.8-4.3,23.5-13.1,31.8-18.9\"/>\n\t<path fill=\"#BC9E6C\" d=\"M283.3,259c-6.4,0-28.9,8-30.7,14.9c-3.2,12.2,24.7,15.7,32.6,17.2l8.9-19.5L283.3,259z\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.9918 -0.128 0.128 0.9918 -31.8144 70.6109)\" fill=\"#FFFFFF\" cx=\"533.5\" cy=\"282.8\" rx=\"24.3\" ry=\"24.3\"/>\n\t<path fill=\"#726958\" d=\"M533.5,222.1c10.2,2.1,22.6,3.5,32-2.3c6.5-4.1,11.6-18.1,20.6-15.8c7.2,1.8,7.7,14,7.3,19.6\n\t\tc-0.6,10.5-4,20.7-9,30c-2.6,4.7-9.7,17.1-15,18.7l-10.3-13.7l-11-15.8l-12.1-10.1l-3.6-2.7L533.5,222.1\"/>\n\t<path fill=\"#BC9E6C\" d=\"M286,546.9c-2.6,33.1,6.4,70.2,20.1,100.1c6,13.2,15.1,24.5,28.5,30.6c21.6,9.8,46.8,10.5,70.1,11.8\n\t\tc9.1,0.5,21,1.2,29.2,1.4c8.3-0.2,16.6-0.9,25.7-1.4c23.3-1.4,48.5-2,70.1-11.8c13.4-6.1,22.5-17.4,28.5-30.6\n\t\tc13.7-29.9,22.6-67,20.1-100.1l-5.7,3.1l-14.7,3.2l-9.7,2.9l-6.4,17.7l-21.9,20.6l-19.4,3.1l-11.7,1.6l-7.5,7.5l-8.2-8.7l-8.4,8.4\n\t\tL454,609l-28.3-1.8l-12.5,0.4l-18.5-9.1l-8.6,2.1l-16-4.2l-38.1-12.9l-12.2-14.2l-4.4-11.7l-9.6-2.5L286,546.9z\"/>\n\t<path fill=\"#BC9E6C\" d=\"M604.9,518.3c6.9,4.3,17,12.7,21.8,17.4c2.6,2.6,11.7,10.6,13,14.2c2.5,6.8-7.5,2.4-8.8,8.5\n\t\tc-1.5,6.9,5.1,11-5.3,10.7c-5.8-0.2-11.4-2.1-16.7-4.1c-8.7-3.2-20.5-5.3-30.2-10.6l-0.5-7.6l8.2-6.1l6.7-7.4l2.5-8.9l3.1-5.8\n\t\tL604.9,518.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM546.8,664.9c8.3,6.8,16.6,13.6,20.8,23.6c5,11.8,0.9,27.8-13.1,28.6c-9.8,0.5-27-6.3-35.6-10.5c-8.8-4.3-23.5-13.1-31.8-18.9\"/>\n\t<path fill=\"#BC9E6C\" d=\"M579.2,289.8c7.9-1.5,35.6-3.4,32.4-15.6c-1.8-6.9-24.2-15-30.6-15l-11.6,13L579.2,289.8z\"/>\n\t<path fill=\"#493628\" d=\"M294.8,462.1c27.8-1.2,51.6,19.5,64.3,42l-7-10.7c14.2-2.2,32.2,4.7,41.5,16c10.4-3,16.9,0.6,20.6,5.3\n\t\tc10.2-6.8,25.1-3.8,35,0c3.6-5,10.5-8.4,21.4-5.3c9.3-11.4,27.3-18.2,41.5-16l-7,10.7c12.7-22.6,36.5-43.3,64.3-42\n\t\tc18.5-14.8,29.8-30.7,33-54.6l-0.5,3c31.9-6.5,36.9,118.6-6.8,107.6l3.5,0.6c-1.8,22.1-31.5,38.1-51.5,37.4l3.2,0.1\n\t\tc-5.7,28.7-35.4,46.9-59.5,42.9c0,0.6-3.7,8.1-13,7.7c-7.4-0.3-3.8-6.7-7.3-10.7c-0.2,2.7-3.1,10.9-6.7,11.8\n\t\tc-3.7,0.9-3.9,1.4-12.4-0.9c-0.7,11.1-7.6,27.4-16.7,34.5c-8.2-5.6-18-24.8-20.4-34.8c-4.6,3.2-7.8,3.6-12.1,0.1\n\t\tc-2.4-1.9-8.3-8.2-8.5-10.8c-3.5,4,0,10.4-7.3,10.7c-4.5,0.2-9.9-5.7-10-10c-26.2-1.2-56.8-11.9-62.6-40.6l3.2-0.1\n\t\tc-20,0.7-49.7-15.3-51.5-37.4l3.5-0.6c-43.7,11-40-114.1-8.1-107.6c2.3,9.1,5.7,17.9,10.3,25.5\n\t\tC277.3,446.1,285.6,454.7,294.8,462.1z\"/>\n\t<path fill=\"#6E5128\" d=\"M432.7,288.4c9.9-0.2,20.7-0.6,29.5,3.5c10.5,4.9,17.9,23.8,13,34.9c-4.8,11-16.3,17-27.5,19.7\n\t\tc-18.9,4.5-49.7,0.8-58.7-19.7c-4.9-11.1,2.5-30,13-34.9C411.1,287.7,422.6,288.1,432.7,288.4\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"234.5,539 241.6,543.7 245.8,550.9 248,556.8 248,563.5 247.4,567.7 234.4,568.9 232.8,567.7 \n\t\t233.4,558.5 228.7,554.3 224.2,553.9 226.6,546.9 \t\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"621.4,543.9 625.4,540.7 628.9,538.9 633.4,542.6 640.1,549.8 639.6,553.3 635.6,555.1 \n\t\t630.8,556.7 630.2,563.4 631.5,567.7 625.6,569.2 616.7,567.7 615,564.5 615,557.5 616.4,550 \t\"/>\n\t<polygon fill=\"#BC9E6C\" points=\"377.2,686.7 365.7,695 342.3,707.7 323.7,715 311.4,716.8 304.9,715.7 299.6,713.1 296,705.7 \n\t\t294.7,699.4 295.8,691 297.1,684.3 306,675.5 316.5,665.6 321.4,670.5 330.4,675.5 346.7,681.7 359.8,685.3 \t\"/>\n\t<path fill=\"#BC9E6C\" d=\"M546.8,664.9c8.3,6.8,16.6,13.6,20.8,23.6c5,11.8,0.9,27.8-13.1,28.6c-9.8,0.5-27-6.3-35.6-10.5\n\t\tc-8.8-4.3-23.5-13.1-31.8-18.9l9-1.1l18.4-3.6l17.6-6.6l11.4-8.1L546.8,664.9z\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"566.1,686.2 557.7,687.4 548.1,690.5 537.1,697.7 527.8,706.3 526,709.2 533.7,712.4 547.7,716.3 \n\t\t555.1,717 561.1,715.3 566.1,711.6 569.7,705.6 569,698.2 567.5,690.1 \t\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"297.1,684.3 307.6,687.3 318.3,692.1 331.2,701.6 339.1,709.5 326.4,713.9 311.4,716.8 \n\t\t304.9,715.7 299.6,713.1 294.7,701.6 293.4,695.3 296.2,688.8 \t\"/>\n\t<polygon fill=\"#AF7133\" points=\"722.3,673.7 706.4,665.5 685.4,665.5 680.8,691.3 693.6,691 \t\"/>\n\t<polygon fill=\"#7B3D24\" points=\"618.1,528.1 662.4,497.5 772.4,497.5 787.4,498 813.1,520.5 812.8,528.3 809.4,538.8 727.8,538.6 \n\t\t631.4,538.6 \t\"/>\n\t<polygon fill=\"#FFD6AC\" points=\"647.5,608.8 808.1,548.1 806.4,554.1 654.9,611.3 \t\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M762.5,559v-6.2\n\t\tc0,0-2.6-0.1-2.9-2.1c0,0-0.3-1.7,0.4-2.1c0,0,0.7-0.5,0.7,2c0,0,0.4,0.9,1,0.9l0-6.4c0,0,0.4-1.1,1.3-1.1c0,0,1.4-0.2,1.4,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1,0.6-0.5,0.7-0.7c0.2-0.3-0.1-0.8,0-1.2c0-0.6-0.1-2.8,0.4-2.9c0.7-0.2,0.8,1.1,0.9,1.6\n\t\tc0.1,1.2,0.2,2.6-0.7,3.6c-0.1,0.2-1.3,1-1.3,0.9c0,0,0,3.7,0,3.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M754.5,626v-6.2\n\t\tc0,0-2.6-0.1-2.9-2.1c0,0-0.3-1.7,0.4-2.1c0,0,0.7-0.5,0.7,2c0,0,0.4,0.9,1,0.9l0-6.4c0,0,0.4-1.1,1.3-1.1c0,0,1.4-0.2,1.4,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1,0.6-0.5,0.7-0.7c0.2-0.3-0.1-0.8,0-1.2c0-0.6-0.1-2.8,0.4-2.9c0.7-0.2,0.8,1.1,0.9,1.6\n\t\tc0.1,1.2,0.2,2.6-0.7,3.6c-0.1,0.2-1.3,1-1.3,0.9c0,0,0,3.7,0,3.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M676.5,564v-6.2\n\t\tc0,0,2-0.1,2.2-2.1c0,0,0-1.7-0.7-2.1c0,0-0.9-0.5-0.9,2c0,0-0.4,0.9-1,0.9l-0.1-6.4c0,0,0.2-1.1-0.6-1.1c0,0-0.8-0.2-0.8,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1-1.3-0.5-1.4-0.7c-0.2-0.3-0.3-0.8-0.3-1.2c0-0.6,0-2.8-0.6-2.9c-0.7-0.2-0.9,1.1-1,1.6\n\t\tc-0.1,1.2,0.5,2.6,1.3,3.6c0.1,0.2,1.9,1,1.9,0.9c0,0,0,3.7,0,3.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M593.5,590v-6.2\n\t\tc0,0,2-0.1,2.2-2.1c0,0,0-1.7-0.7-2.1c0,0-0.9-0.5-0.9,2c0,0-0.4,0.9-1,0.9l-0.1-6.4c0,0,0.2-1.1-0.6-1.1c0,0-0.8-0.2-0.8,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1-1.3-0.5-1.4-0.7c-0.2-0.3-0.3-0.8-0.3-1.2c0-0.6,0-2.8-0.6-2.9c-0.7-0.2-0.9,1.1-1,1.6\n\t\tc-0.1,1.2,0.5,2.6,1.3,3.6c0.1,0.2,1.9,1,1.9,0.9c0,0,0,3.7,0,3.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM136.4,187l-0.5-19.8c0,0-7.2-0.3-7.9-6.3c0,0-0.7-5.3,1.6-6.3c0,0,2.4-1.5,2.4,5.9c0,0,1.2,2.6,3,2.6l0.2-19.4\n\t\tc0,0,0.7-3.2,3.2-3.2c0,0,3.6-0.7,3.6,2.7c0,0,0,27.4,0,27.6c0,0.2,2.6-1.6,2.8-2c0.6-1,0.2-2.4,0.2-3.5c0.1-1.8-0.2-8.4,1.4-8.8\n\t\tc2.2-0.6,2.6,3.2,2.7,4.8c0.3,3.5-0.2,8-2.6,10.9c-0.4,0.5-4.7,3.1-4.7,2.7c0,0-0.8,11.9-0.8,11.9\"/>\n\t<path fill=\"#ACDD00\" d=\"M762,559v-6.2c0,0-2.4-0.1-2.6-2.1c0,0-0.2-1.7,0.5-2.1c0,0,0.8-0.5,0.8,2c0,0,0.4,0.9,1,0.9l0.1-6.4\n\t\tc0,0,0.2-1.1,1-1.1c0,0,1.2-0.2,1.2,0.9c0,0,0,9.1,0,9.1c0,0.1,0.9-0.5,1-0.7c0.2-0.3,0.1-0.8,0.1-1.2c0-0.6-0.1-2.8,0.5-2.9\n\t\tc0.7-0.2,0.9,1.1,0.9,1.6c0.1,1.2-0.1,2.6-0.9,3.6c-0.1,0.2-1.6,1-1.6,0.9c0,0,0,3.7,0,3.7H762z\"/>\n\t<path fill=\"#ACDD00\" d=\"M754,626v-6.2c0,0-2.4-0.1-2.6-2.1c0,0-0.2-1.7,0.5-2.1c0,0,0.8-0.5,0.8,2c0,0,0.4,0.9,1,0.9l0.1-6.4\n\t\tc0,0,0.2-1.1,1-1.1c0,0,1.2-0.2,1.2,0.9c0,0,0,9.1,0,9.1c0,0.1,0.9-0.5,1-0.7c0.2-0.3,0.1-0.8,0.1-1.2c0-0.6-0.1-2.8,0.5-2.9\n\t\tc0.7-0.2,0.9,1.1,0.9,1.6c0.1,1.2-0.1,2.6-0.9,3.6c-0.1,0.2-1.6,1-1.6,0.9c0,0,0,3.7,0,3.7H754z\"/>\n\t<path fill=\"#ACDD00\" d=\"M676,564v-6.2c0,0,2.2-0.1,2.4-2.1c0,0,0.1-1.7-0.6-2.1c0,0-0.8-0.5-0.8,2c0,0-0.4,0.9-1,0.9l-0.1-6.4\n\t\tc0,0,0-1.1-0.9-1.1c0,0-1-0.2-1,0.9c0,0,0,9.1,0,9.1c0,0.1-1.1-0.5-1.1-0.7c-0.2-0.3-0.1-0.8-0.2-1.2c0-0.6,0-2.8-0.5-2.9\n\t\tc-0.7-0.2-0.9,1.1-0.9,1.6c-0.1,1.2,0.2,2.6,1,3.6c0.1,0.2,1.7,1,1.7,0.9c0,0,0,3.7,0,3.7H676z\"/>\n\t<path fill=\"#ACDD00\" d=\"M593,590v-6.2c0,0,2.2-0.1,2.4-2.1c0,0,0.1-1.7-0.6-2.1c0,0-0.8-0.5-0.8,2c0,0-0.4,0.9-1,0.9l-0.1-6.4\n\t\tc0,0,0-1.1-0.9-1.1c0,0-1-0.2-1,0.9c0,0,0,9.1,0,9.1c0,0.1-1.1-0.5-1.1-0.7c-0.2-0.3-0.1-0.8-0.2-1.2c0-0.6,0-2.8-0.5-2.9\n\t\tc-0.7-0.2-0.9,1.1-0.9,1.6c-0.1,1.2,0.2,2.6,1,3.6c0.1,0.2,1.7,1,1.7,0.9c0,0,0,3.7,0,3.7H593z\"/>\n\t<path fill=\"#ACDD00\" d=\"M136.4,187l-0.5-19.8c0,0-7.2-0.3-7.9-6.3c0,0-0.7-5.3,1.6-6.3c0,0,2.4-1.5,2.4,5.9c0,0,1.2,2.6,3,2.6\n\t\tl0.2-19.4c0,0,0.7-3.2,3.2-3.2c0,0,3.6-0.7,3.6,2.7c0,0,0,27.4,0,27.6c0,0.2,2.6-1.6,2.8-2c0.6-1,0.2-2.4,0.2-3.5\n\t\tc0.1-1.8-0.2-8.4,1.4-8.8c2.2-0.6,2.6,3.2,2.7,4.8c0.3,3.5-0.2,8-2.6,10.9c-0.4,0.5-4.7,3.1-4.7,2.7c0,0-0.8,11.9-0.8,11.9\n\t\tL136.4,187z\"/>\n\t\n\t\t<radialGradient id=\"SVGID_2_\" cx=\"737.6794\" cy=\"406.1918\" r=\"45.3992\" gradientTransform=\"matrix(0.937 -0.3492 0.3492 0.937 -91.5873 282.9574)\" gradientUnits=\"userSpaceOnUse\">\n\t\t<stop  offset=\"0\" style=\"stop-color:#C47826\"/>\n\t\t<stop  offset=\"0\" style=\"stop-color:#B55314\"/>\n\t\t<stop  offset=\"0.8092\" style=\"stop-color:#C98F31\"/>\n\t</radialGradient>\n\t<path fill=\"url(#SVGID_2_)\" d=\"M700,424.1c-2.6-6.1-4.2-13.1-3.9-20.2c1-25,22.1-44.5,47.2-43.4c25,1,44.5,22.1,43.4,47.2\n\t\tc-0.7,16.4-11.4,32.5-25,39.3L700,424.1z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M705,234.9c0-0.2,1-0.4,1.7-0.5c2.6-0.4,5.2-0.4,7.8,0c4.1,0.6,7.9,2.2,11.2,4.8c4.6,3.7,7.4,9.1,9.1,14.7\n\t\tc0,0,17.3-3,19.2,14c6.3,0,15.6-1.2,18.1,6.5c2.2,6.8-1.9,11.1-7,12.9c-2.2,0.8-4.6,1.2-6.7,1.1c-12.3-0.3-24.6-0.2-36.9,0\n\t\tc-21.3-0.2-54.4-0.6-75.7,0c-2.2,0.1-4.5-0.3-6.7-1.1c-5.1-1.9-9.2-6.1-7-12.9c2.5-7.6,11.8-6.5,18.1-6.5c1.9-17,19.5-14,19.5-14\n\t\tC676.9,229.4,705,234.9,705,234.9L705,234.9z\"/>\n\t<path fill=\"#FFFFFF\" d=\"M380.7,167.5c-0.7,0-5.5,0-6.3,0c-21.3-0.2-54.4-0.6-75.7,0c-2.2,0.1-4.5-0.3-6.7-1.1\n\t\tc-5.1-1.9-9.2-6.1-7-12.9c2.5-7.6,11.8-6.5,18.1-6.5c1.9-17,19.5-14,19.5-14c7.2-24.6,35.3-19,35.3-19v0c0-0.2,1-0.4,1.7-0.5\n\t\tc2.6-0.4,5.2-0.4,7.8,0c4.1,0.6,7.9,2.2,11.2,4.8c4.6,3.7,7.4,9.1,9.1,14.7c0,0,17.3-3,19.2,14c7.1-3.8,12.9-0.8,16.2,3.4\"/>\n\t<path fill=\"#FFFFFF\" d=\"M599.3,332.3c2.3-11.3,15-9.9,15-9.9h0c0-0.1,0.4-0.2,0.8-0.3c1.2-0.3,2.3-0.4,3.5-0.3\n\t\tc1.9,0.1,3.6,0.7,5.2,1.7c2.2,1.5,3.7,3.8,4.6,6.2c0,0,7.6-2,9.1,5.5c2.8-0.2,6.9-1.1,8.3,2.2c1.3,3-0.4,5-2.6,6.1\n\t\tc-0.9,0.4-2,0.7-3,0.8c-5.5,0.3-11,0.9-16.5,1.4c-6,0.5-14.1,1.1-21.6,1.7\"/>\n\t<path fill=\"#FFFFFF\" d=\"M661.5,433c-1.9-0.2-3.7-0.4-5.6-0.6c-3.7-0.4-9.4-1.1-13.1-1.4c-0.4,0-0.8-0.1-1.1-0.3\n\t\tc-0.9-0.4-1.5-1.2-1-2.4c0.6-1.3,2.2-0.9,3.3-0.8c0.6-2.9,3.6-2.1,3.6-2.1c1.7-4.1,6.5-2.6,6.5-2.6l0,0c0,0,0.2-0.1,0.3-0.1\n\t\tc0.5,0,0.9,0,1.4,0.2c0.7,0.2,1.3,0.5,1.8,1c0.7,0.7,1.1,1.7,1.3,2.7c0,0,2.2-0.1,2.9,1.7\"/>\n\t<path fill=\"#493628\" d=\"M508.6,255.4c0,1.2-0.3,2.8-0.5,4.2c-0.4,2.9-1.4,5.7-2.2,8.5c5.9-6.6,12.4-10.7,16.5-19.3\n\t\tc4.6-9.6,11.1-15.9,11.1-26.7c-0.9-11.9-7-31.3-22.1-31.3c-4.4-9.4-17-17.2-24.2-15.5c-0.9-15.8-22.3-25.7-38.8-21.3l-0.1,0\n\t\tc-8.3-6.8-20.1-8.6-31.2,0c-16.7-4.5-38.2,5.6-38.6,21.7c-6.9-2.6-20.9,5.2-25.5,15c-15.1,0-21.2,19.4-22.1,31.3\n\t\tc0,10.8,6.5,17.1,11.1,26.7c4.1,8.7,10.6,12.8,16.5,19.3c-0.8-2.7-1.8-5.6-2.2-8.5c-0.2-1.4-0.5-3-0.5-4.2l0,0.1\n\t\tc3.2,6.8,3.4,12.8,9.5,17.8c5.4,4.5,12,6.4,17.9,8.8c-1.2-2-2.4-10,0-13.3c1.4,7,20.1,16.5,27.3,15.3c-1.2,0-1.3-8.5-1.3-11.3\n\t\tc6.4,0,16.9,6.7,23.1,10.2c6.2-3.5,16.6-10.3,23.1-10.2c0,2.8-0.1,11.4-1.3,11.3c7.3,1.1,25.9-8.3,27.3-15.3\n\t\tc2.4,3.3,1.2,11.3,0,13.3c5.8-2.4,12.4-4.4,17.9-8.8C505.2,268.3,505.3,262.3,508.6,255.4\"/>\n\t<polygon fill=\"#AF7133\" points=\"788,500.5 787.4,498 787.4,473.5 786.9,465.5 783.4,459.5 783.4,451.5 783.4,438.5 786.4,431.5 \n\t\t786.4,422.5 783.7,416.9 782.4,410.5 774.4,410.5 774.4,425.5 772.4,430.5 772.4,456.5 766.4,453.1 766.4,446.5 755.4,444.1 \n\t\t755.4,405.5 754.8,402.8 752.2,400.2 745.5,398.8 735.8,392.5 711.4,392.5 702.3,387.8 679.4,386.5 676.4,386.5 669.3,390.8 \n\t\t665.4,395.5 665.4,407.5 662.3,410.3 661.4,428.3 661.4,497.5 772.4,497.5 \t\"/>\n\t<polygon fill=\"#444242\" points=\"433.2,512 433.1,512.5 431.4,515.4 431,518.2 431.8,521.7 432.8,520.5 433.9,518.2 433.5,516.5 \n\t\t433.5,513.3 433.9,512 \t\"/>\n\t<polygon fill=\"#444242\" points=\"437.6,513.2 438.6,515.1 439.1,517.4 438.9,520.6 438.1,522.2 436.4,518.9 437.1,517.5 \n\t\t437.4,516.1 437.3,514 \t\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"435.4,520 436.5,522.1 438,525.7 439,530.5 439,532.5 438.4,533.7 437.1,534.8 435.6,535.1 \n\t\t433.9,534.7 432.7,533.5 432.2,532 432.9,526.4 433.9,523.5 435,520.9 435.3,520.6 435.1,519.7 433.9,518.3 432.1,522.2 \n\t\t430.4,526.7 429.4,531.1 429.6,533.8 430.3,535.4 432.1,536.5 433.9,536.8 436.2,536.8 438.4,536.2 439.8,535.1 440.5,534 \n\t\t440.7,532 440.5,529.6 439.4,525.4 436.9,519.3 436.4,518.9 \t\"/>\n\t<polygon fill=\"#5B5B5F\" points=\"433.7,512.9 433.5,514 433.5,516.5 434.6,519.1 435.4,520 436.4,518.9 437.1,517.5 437.4,516.1 \n\t\t437.2,513.2 \t\"/>\n\t<polygon fill=\"#726958\" points=\"435.3,520.4 434.1,523.4 433,528.3 433,530.5 433.5,529.7 434.6,529 435.6,528.8 437.3,529.4 \n\t\t438.4,530.5 438.1,528.3 437.6,525.3 436.4,522.3 \t\"/>\n\t<circle fill=\"#444242\" cx=\"435.4\" cy=\"532\" r=\"3.2\"/>\n\t<rect x=\"432\" y=\"536\" fill=\"#727176\" width=\"8\" height=\"104\"/>\n\t<path fill=\"#444242\" d=\"M435,542h-3c0,0,0-5.5,0-5.5c0-0.2,0.9,0.2,0.9,0.2c0.4,0.2,0.7,0.3,1.2,0.4c0.5,0.1,0.7,0.1,0.7,0.6\n\t\tc0,0.7,0.2,1.4,0.2,2.1C435,540.6,435,542,435,542z\"/>\n\t<rect x=\"437\" y=\"542\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"550\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"546\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"554\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"558\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"566\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"562\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"570\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"574\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"582\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"578\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"586\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"590\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"598\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"594\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"602\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"606\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"614\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"610\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"618\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"622\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"437\" y=\"630\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"626\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<rect x=\"432\" y=\"634\" fill=\"#444242\" width=\"3\" height=\"4\"/>\n\t<path fill=\"none\" d=\"M569.8,218.1c-0.3-1.4,0.2-2.7,1.3-3.3\"/>\n\t<path fill=\"none\" d=\"M197.9,758.5c-1.9,0-3.6-0.4-5.5-0.2\"/>\n\t<path fill=\"none\" d=\"M189.4,760c0.1-0.2,0.3-0.3,0.5-0.2\"/>\n\t<path opacity=\"0.2\" d=\"M693.3,673.8c0.9,1.1,2.1,2,3,3.1c0.7,0.9,1.2,2.5,2.4,2.8c1.5,0.3,2.7-0.6,4.2,0c1.4,0.6,2.9,1.3,3.9,2.4\n\t\tc-3.9,2.7-7.5,5.6-11.9,7.6c-1.4,0.6-2.5,0.5-3.9,0.8c-2.9,0.5-6.7,2.2-9.5,0.7c-0.1-1,0.2-2.2,0.2-3.3c0-3.2,0.8-6.3,1.6-9.3\n\t\tc0.6-2.3,0.6-4.7,1-7c0.2-1.2,0.6-2.4,0.9-3.6c0.2-0.6,0.1-2,1-2.2c0.9-0.2,2.8,2.4,3.2,3C690.7,670.5,691.9,672.2,693.3,673.8z\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM154.5,242v54.4c0,0-13.7-3-13.7,25.7c0,0-7.3-3-7.3,12.1V419\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"78.5\" y1=\"461\" x2=\"78.5\" y2=\"555\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"182.5\" y1=\"394\" x2=\"182.5\" y2=\"647\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM658.4,520.5\"/>\n\t<path opacity=\"0.2\" d=\"M754,626v7.6c0,0-2.6,0.1-2.9,2.1c0,0-0.2,1.7,0.7,2.1c0,0,1,0.5,1-2c0,0,0.5-0.9,1.2-0.9l0.1,6.4\n\t\tc0,0-0.1,1.1,0.9,1.1c0,0,1.1,0.2,1.1-0.9c0,0,0-9.1,0-9.1c0-0.1,1.4,0.5,1.4,0.7c0.2,0.3,0.2,0.8,0.3,1.2c0.1,0.6,0,2.8,0.6,2.9\n\t\tc0.9,0.2,1-1.1,1.1-1.6c0.1-1.2-0.4-2.6-1.3-3.6c-0.2-0.2-2.1-1-2.1-0.9c0,0,0-5.1,0-5.1\"/>\n\t<path opacity=\"0.2\" d=\"M673.2,564.3l-1.5,7c0,0-2.3-0.4-3,1.5c0,0-0.4,1.7,0.4,2.2c0,0,0.9,0.7,1.4-1.7c0,0,0.7-0.7,1.4-0.6\n\t\tl-1.3,6.3c0,0-0.6,1,0.4,1.2c0,0,0.7,0.4,1-0.7c0,0,1.9-8.8,2-8.9c0-0.1,1.5,0.9,1.5,1c0.2,0.4,0.2,0.9,0.1,1.2\n\t\tc-0.1,0.6-0.5,2.7,0.1,3c0.8,0.4,1.3-0.8,1.4-1.3c0.3-1.1-0.1-2.7-0.8-3.9c-0.1-0.2-2.1-1.5-2.1-1.4c0,0,1-4.5,1-4.5\"/>\n\t<path opacity=\"0.2\" d=\"M590.2,591.3c-0.5,1.2-1,2.3-1.4,3.5c-0.2,0.5-0.4,1-0.6,1.5c-0.1,0.1-0.3,0.4-0.3,0.5\n\t\tc-0.1,0.5,0.7,0.5,1,0.5c0.2,0,0.4-0.2,0.6-0.2c0.3-0.1,0.6-0.1,0.9-0.1c0.3,0,0.7,0.1,1,0.2c0.3,0.1,0.5,0.2,0.8,0.3\n\t\tc0.9,0.1-0.2-0.9-0.4-1.1c-0.1-0.1-1.1-1-1.1-0.9c0.2-0.7,0.6-1.4,0.9-2.1c0.3-0.8,0.9-1.8,1.5-2.4c0.3-0.4-1.7-0.5-1.7-0.5\n\t\tC590.5,590.6,590.5,590.5,590.2,591.3z\"/>\n\t<path opacity=\"0.2\" d=\"M762.1,559.2l-1.4,5.2c0,0-2.3-0.6-2.9,0.8c0,0-0.4,1.2,0.4,1.7c0,0,0.9,0.6,1.4-1.1c0,0,0.7-0.5,1.3-0.3\n\t\tl-1.2,4.7c0,0-0.5,0.7,0.4,0.9c0,0,0.7,0.4,0.9-0.4c0,0,1.8-6.5,1.8-6.6c0-0.1,1.5,0.8,1.5,0.9c0.2,0.3,0.2,0.7,0.2,0.9\n\t\tc-0.1,0.5-0.5,2,0.1,2.3c0.8,0.4,1.3-0.5,1.4-0.8c0.3-0.8-0.1-2.1-0.8-3c-0.1-0.2-2.1-1.4-2.1-1.3c0,0,0.9-3.3,0.9-3.3\"/>\n\t<line fill=\"none\" x1=\"845\" y1=\"521\" x2=\"846\" y2=\"521\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M599.4,524c6-0.9,16.9,7.9,21.1,11.9c7.3,6.8,5,15,10.4,22.4c0.7-3.5,4.2-3.7,7.4-3.4\n\t\tc1.7-11.1-12.2-19.4-18.5-26.7c-2.3-2.7-3.6-4.8-6.9-6.6c-1.3-0.7-13.7-4.3-14-1c-0.1,1.7-0.3,4.2-0.1,5.4\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M686.7,269.8c2.9-0.4,5-2.5,8.1-2.6c4.2-0.1,8,2.3,12.3,2.6c7,0.5,13.8-3.3,20.7-1.9\n\t\tc3.5,0.7,3.9,2.7,6.4,3.9c2.5,1.2,5.4,0.6,8,1.4c-0.8,5.6-12.6,4.2-15.9,2.8c-2.6-1.1-4.1-3.5-7-3.3c-2.2,0.2-5.5,2.3-8,2.7\n\t\tc-2.9,0.6-6.2,0.9-9.1,1c-6.6,0.3-12.9-2.6-19.5-2.1c-4,0.3-9.8,2.8-11.7-2.7c2.7-0.1,4.9-0.9,7.4-1.4\n\t\tC680.9,269.6,683.8,270.2,686.7,269.8z\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M744.8,255.3c-3.8-1.9-7-1.3-10.7,0.2c1.8,1,3.9,0.7,5.7,1.7c1.3,0.7,2.7,1.6,3.9,2.5\n\t\tc1.3,1,2.4,2.3,3.2,3.7c0.2,0.4,1.9,4.5,1.6,4.5c6.9-1.1,4.8,8.9,0.9,11.3c-5.1,3.1-11.9,2.5-17.8,2.3c-15.1-0.6-30,3.6-45,3\n\t\tc-13.3-0.5-32.7-2-37.4-17.8c-7,3.2-27.2,4.8-14.6,17.4c6.3,6.3,14.1,4.1,22.2,3.9c10.4-0.2,20.9-0.7,31.3,0.1\n\t\tc14.3,1.2,28.8,2,43.1,1.4c7.3-0.3,14.4-1.5,21.5-2c5.6-0.5,13.1,1.3,17.2-3.6c3.4-4.1,2.9-12.8-2.3-15.1c-2.3-1-6.1-0.1-8.8-0.3\n\t\tc-4.4-0.3-4.1-1.1-6.1-4.1C750.7,261.1,748.3,257,744.8,255.3z\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M731.5,246.1c0.4,0.9,1.4,2.3,1,3.2c-6.6-7.7-16.1-9.9-25.9-7.8c-2.8,0.6-3.9,2.8-6.8,2\n\t\tc-4-1.1-7.9-2-12.1-1.6c-5.8,0.5-11.2,3.6-15.2,7.6c1.3-5.8,5.4-8.7,10.1-11.6c2.7-1.7,5.8-2.6,9-2.9c2.5-0.2,5.3-0.6,7.8-0.3\n\t\tc2.4,0.3,4.2,1.3,6.6,0.8c2.5-0.5,5.2-0.7,7.8-0.5c4.9,0.4,10.5,2.4,13.6,6.3C728.6,242.9,730.6,244.4,731.5,246.1z\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M616.2,322.7c2.7,0,5.8,0.2,6.7,3.1c0.5,1.8,0.5,4.3,2,5.8c1.5,1.4,4.9-0.4,5.9,1.7\n\t\tc0.8,1.6-1.9,3.5-3.1,4.3c-1.5,0.9-2.5,0.8-4.1,0.6c0.9,1.3,3.5,1,4,2.2c0.9,2-4.4,2.7-5.5,2.9c-4,0.8-8.2,1.1-11.7,3.3\n\t\tc4.4-0.1,8.7-1,13-1.2c3.1-0.1,6.1,0,9.2-0.1c2.5-0.1,4.7-0.7,7.1-1c2.3-0.4,5.3,0,6.2-2.6c0.6-1.6,0.3-3.5-0.5-4.9\n\t\tc-0.9-1.8-2-1.8-3.9-1.7c-0.9,0-2.3,0.8-3.1,0.5c-1.4-0.5-2.7-3.9-3.8-5c-1.2-1.2-2.8-1.2-4.3-1c-2,0.3-1.7,0.1-2.9-1.7\n\t\tc-1.1-1.6-3.1-4-4.9-4.7c-2.1-0.9-5.6-1.7-7.4,0c0.8,0,1.7-0.4,2.5-0.1\"/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M357.5,115.2c7.3-0.6,13,3.6,18,8.3c5.3,5,3.4,9,3.2,15.5c5.2,0.2,16.1,2.7,10,10.1\n\t\tc-4.6,5.5-11.1,3.2-16.4,1.1c4.7,3.1-4.7,7.9-7.2,9c-5.6,2.4-12.2,2.8-18.1,3.5c-5.7,0.7-11.7-0.5-17.4-1.1\n\t\tc-5.8-0.6-11-0.7-16.3-3.5c-2.7-1.5-6.1-2.8-7.9-5.4c-1.1-1.6-0.8-4.2-2.4-5.2c-2.4-1.6-8.7-1-11.5-0.2c-3.5,1-7.1,3.5-7.6,7.3\n\t\tc-2.4,17.9,26.2,11.1,35.2,12.2c14.2,1.8,28.9-0.3,43.1,0.3c4.1,0.2,10.9,1.1,14.7,0.3c4-0.9,5.4-6.8,9.2-8.9\n\t\tc9.9-5.5,22.3-4.2,33.1-6.1c6.2-1.1,1.6-5.9-2.4-6.8c-1.9-0.4-4-0.7-6-0.2c-5.8,1.5-2.8-1.2-6-5.1c-2.2-2.6-6.5-7.4-10.2-7.7\n\t\tc-2.6-0.2-5,1.6-7.2-0.3c-2.3-1.9-2.2-6.2-3.9-8.6c-1.7-2.4-4.5-5.7-6.8-7.6c-6.3-5.3-13.6-2.1-20.6-0.8c-0.1,0.4,0.2,0.4,0.2,0.8\"\n\t\t/>\n\t<path opacity=\"0.3\" fill=\"#C47826\" d=\"M658.7,426.7c-0.4-0.1-1.3-2.1-1.6-2.5c-1-1.2-1.9-1.7-3.5-1.3c0.9,0.5,2.5,0.8,2.7,2.1\n\t\tc0.2,1.6-1.2,1.7-2.4,2c2.2,1.4-3.4,2-4,2.1c-1.5,0.2-3.8-1.4-3.8-3.2c-1,0.1-1.2,0.8-2,1.2c-0.8,0.4-1.8,0.1-2.6,0.5\n\t\tc-1.8,0.8-0.5,2.6,0.8,3.4c1.3,0.7,3,0.3,4.4,0.3c2,0,4,0.1,6,0.4c1.4,0.2,2.6,0.7,4.1,0.8c1.6,0.1,3.1,0.2,4.6,0.4\n\t\tC662.2,430.2,661.9,427.1,658.7,426.7z\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM291.8,561.5c1.1,0,0.4,3.1,1.3,5.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM293.8,573.5c1.2,0.7,1.6,1.9,1.3,3.3\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"298\" y1=\"566\" x2=\"298\" y2=\"570\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM571.8,562.1c0.1,3.2-0.4,6.2-0.7,9.3\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"566\" y1=\"559\" x2=\"566\" y2=\"562\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM565.1,572.8c-0.1,1.8-0.3,3.6-0.7,5.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM510.4,694.1c3.1,2.4,7.4,2.4,10.7,4.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM517.1,691.5c-0.1,0.5,0.2,0.7,0.7,0.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM521.1,693.5c0.6,0.5,1.2,0.7,2,0.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM351.8,690.1c-0.6,1.3-1.9,2.3-3.3,2.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM357.8,693.5c-3.2,1.7-6.7,3.2-10,4.7\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"340\" y1=\"696\" x2=\"342\" y2=\"696\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM304.4,713.5c2.8-6,7.2-18.7,14.7-20\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM559.8,713.5c-1.7-7.4-6.1-17-12.7-21.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM488,585.1c10.1,1.2,17.1-2.9,21.3-11.7c13.8,0.8,17.7-6.1,22.2-18.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM348.5,571.6c1.9,5.1,7.5,7.8,13.5,7.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM509,190.6c-5-3.7-12.8-1.7-13.8,5.8c-5.1-2.3-11.2-4.8-16.2,0.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM353,190.6c3.7-1.6,7.8-2,11.7-1.2c3.7,11.3,19.6-11.8,24.3,2.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM414.5,180.1c0-1.3,2.7-4,7.5-4.2c7.3-0.2,6.7,4.6,10.8,5.4c7.7,1.6,17.6-5.6,23.7,3.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM485,244.6c6.1-2.2,10.3-5.5,17.7-4.8c0.2-0.8,0.3-1.7,0.5-2.5c7.2,1,9.8-4.9,10.2-10.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM345.5,219.1c0.1,8.3,9.8,16.6,17.7,12.1c-1.7,11.8,9.6,12.2,18.3,11.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM401,228.1c12.7,10,28,18.1,44.7,9.2c4.3,10.1,22.6,3.4,25.8-4.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM413,210.1c5.5-2.3,11.8-1.5,18-1.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM487.9,175.8c-2.7-0.3-3,1.7-4.7,3c-1.5,1.2-4.6,0.2-5.4,1.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM447.8,155.6c-2.7-0.5-2.5,3-2.5,4.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM380,174.1c1.8,1.3,10.1,0.1,12.3,5.7c2.2,0.3,5,0.6,7.2,0.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM571.4,261.4c1.8-1.5,4.9-4.2,5.7-6.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM579.7,250.3c1.1-1.3,2-3.1,2-4.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM571.1,254.6c1.1-0.4,2.7-1.5,3.2-2.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM543.1,228.1c0.6,0.2,1.3,0.3,2,0.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM581.1,210c1.1-0.5,2.6-0.7,3.8-0.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM286.9,253.5c1.9,2.6,4.3,6.2,7,8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM288.9,248.5c0.4,0.8,1.2,1.5,2,2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM294.4,256c0.8,0.2,1.7,0.3,2.5,0.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM278.4,210.5c-2.2,0.8-2.8,4.2-2.5,6.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM311.9,229.5c1.2,0.7,3.2,0.5,5,0.5\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"322\" y1=\"228\" x2=\"324\" y2=\"228\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"316\" y1=\"233\" x2=\"317\" y2=\"233\"/>\n\t<path fill=\"none\" d=\"M575.8,449.5c0,0,2.9-2,3.6-3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM569.2,464.5c-0.8,1.1-1.4,2.2-1.8,3.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM617.2,457.3c3.7,18.6-2.9,38.5-15.6,52.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM575.4,447.8c1.3-2.5,3.4-4.4,4.6-6.9\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM584.6,435.7c1.8-2.1,3-4.8,3.5-7.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM577.7,435.7c0.7-0.8,1.3-1.8,1.7-2.9\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM533.4,241.8c0,0.2,1,1.2,2.3,1.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM532.2,248.1c0.2,0.4,0.4,0.7,0.6,1.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM539.7,246.4c2.7,0.4,5.2,2.3,7.5,4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM325.1,240.7c-1.7,0.8-3.5,1.7-4,3.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM323.4,247.6c1.2-0.9,2.6-1.6,4-1.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM314.7,253.3c0.3-0.7,0.9-1.1,1.7-1.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM425.8,342.5c2,0.9,5.8,0.9,7.5,0\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM438.4,341.9c1.6,0.2,3.1,0,4.6-0.6\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"432\" y1=\"336\" x2=\"436\" y2=\"336\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM276.2,430.5c0.1,2.5,2,4.9,3.5,6.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM283.1,442.6c0.3,1.5,1.3,2.8,2.9,3.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM282.5,434c0,0.8,0.4,1.5,1.2,1.7\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"276\" y1=\"264\" x2=\"277\" y2=\"264\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"280\" y1=\"264\" x2=\"281\" y2=\"264\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"278\" y1=\"269\" x2=\"280\" y2=\"269\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM581.1,264.8c1,0.1,2-0.1,2.9-0.6\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"579\" y1=\"270\" x2=\"581\" y2=\"270\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"588\" y1=\"268\" x2=\"589\" y2=\"268\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM604.5,522.3c0.5,0.2,1,0.7,1.3,1.1\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM608.4,525.6c0.5,0.5,1.1,0.9,1.6,1.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM604.8,525.4c0.5,0.1,0.9,0.4,1.3,0.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM618.7,560.8c0.5,0.2,1,0.3,1.5,0.5\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"623\" y1=\"562\" x2=\"625\" y2=\"562\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM630.1,545.9c1.2,0.7,2.3,2.1,3,3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM228.5,549.8c0.7-0.8,1.8-1.6,3-2\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"238\" y1=\"565\" x2=\"240\" y2=\"565\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM241.9,565.2c-0.4-0.4,0.3-0.5,1-0.5\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"239\" y1=\"562\" x2=\"241\" y2=\"562\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM322.4,660.5c2.9,6.9,11.8,11.9,19,13\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM330.4,660.5c0.5,0.7,1.2,1,2,1\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"338\" y1=\"665\" x2=\"341\" y2=\"665\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM415.4,680.5c8.2,0,21.6-2.4,28,1\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM514.4,673.5c4.8,0.7,8.8-2.2,13-4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM535.4,665.5c1.3-0.8,2.6-1.4,4-2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM526.4,661.5c1.9-0.1,3.3-0.4,5-1\"/>\n\t\n\t\t<circle fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"435.4\" cy=\"532\" r=\"3.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M435.4,520.2\n\t\tc0,0,3.2,4.8,3.2,11.4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M435.4,520.2\n\t\tc0,0-3.2,4.9-3.2,11.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M436.6,518.5\n\t\tc0.2,0.4,0.7,1.8,1.1,2.8c0.4,1.1,0.9,2.2,1.3,3.3c1,2.8,2.2,6.2,1.4,9.2c-0.5,1.9-2.1,2.7-3.9,2.9c-2.1,0.3-5.2,0.2-6.4-1.8\n\t\tc-0.9-1.5-0.8-3.5-0.5-5.2c0.3-1.7,0.8-3.4,1.4-5.1c0.4-1.1,0.9-2.2,1.3-3.3c0.5-1.1,1-2.2,1.5-3.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M433.2,512.6\n\t\tc0,0-4.1,4-1.2,9.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M437,512.6\n\t\tc0,0,4,4.1,1.1,9.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M433.9,512.9\n\t\tc0,0-1.7,3.9,1.6,7.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M437,512.9\n\t\tc0,0,1.7,3.9-1.6,7.3\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"431.2\" y1=\"536\" x2=\"430.9\" y2=\"639.5\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"439.2\" y1=\"535.7\" x2=\"439.4\" y2=\"639.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM479,529.6c7.3-11.8,17.8-9.6,29.8-12.2c1.1-12.7,13.7-21.7,25.4-16.4c2.1-8.8,10.1-13.9,18.3-10.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM273.5,483.1c6.6-1.4,18.7-5.7,25.6-3c8.5,3.4,7.8,11.6,15,15.1c4.5,2.3,13.1-2,19.8,2.5c7.2,4.8,11.4,10.9,11.9,19.6\n\t\tc13.4,0.2,34.9-0.2,37.2,16.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM285.5,525.1c7.6,8.7,22.4,21.2,36,11.9c6.4,6.5,14.9,10.2,24,10.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM398.4,549.5c0.3,8.1-2,12.8,5.8,16.5c-3.8,10.5,3.8,15.5,14.2,15.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM476.4,545.5c2,11.4-4.8,19.2-16.3,20.1c10.5,3.5,9.7,16.9-2.9,22.4c5.8,8.1,1.6,10.7-2.8,17.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM245,472.6c-3.3-5.5-2.3-12.2,4.2-15.3c-2.7-6.3-1-10.2,3.3-14.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM542.4,531.5c11.1,1.5,30.3-8.1,30-24\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM285.5,205v-5.4c0-17.4-27-26.5-27-26.5l-55.8,3.1l-20.4,10.3H127l-23.9,14.8c-23.5,0-24.2,15.5-24.2,15.5s0,87.9,0,87.9\n\t\tc-11.3,2.5-23.2,0.2-24.1,13.6c-0.2,3.5,0.2,7.2,0.3,10.8c0.5,11.6,1.4,23.1,2.1,34.7c1.7,27.6,3.4,55.2,5.1,82.8\n\t\tc0.1,1.1,0.4,1.9,0.5,3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM230.5,174v31.6c0,0-21,0-21,5.3c0,5.3,0,28.8,0,28.8V398\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"182.5\" y1=\"187\" x2=\"182.5\" y2=\"334\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM154.5,242v54.4c0,0-13.7-3-13.7,25.7c0,0-7.3-3-7.3,12.1V419\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t102.5,201 102.5,276 98.3,282.9 100.4,330.5 \t\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"78.5\" y1=\"461\" x2=\"78.5\" y2=\"555\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"111.5\" y1=\"406\" x2=\"111.5\" y2=\"423\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"249.5\" y1=\"215\" x2=\"249.5\" y2=\"342\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"182.5\" y1=\"394\" x2=\"182.5\" y2=\"647\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM618.4,528.1l44.6-31.6v-86.2l3-2.8v-9.7c0-7.7,11.9-11.7,11.9-11.7l24.6,1.4l9,4.5h24.3l10,6.5c10.3,0,10.2,6.9,10.2,6.9v38.7\n\t\tl11,2.3v6.7l6,3.3v-26l2-5V410h7.4l1.5,6.7l3,5.8v9l-3,7v21l4,7v32.7l25.1,20.9H659\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t665.8,407.1 679,417.8 679,453 \t\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM681.1,386.6l0.8,13.7c0,0,9.1,0.1,9.1,2.5c0,2.3,0,12.7,0,12.7v9.5\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"711\" y1=\"392\" x2=\"711\" y2=\"457\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM723,416v24.5c0,0,6.4-1.3,6.4,11.3c0,0,3.6-1.3,3.6,5.3V494\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t746,398 746,431.5 748.1,434.5 747.1,455.2 \t\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t772.8,456.4 777,462 777,483 \t\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"766\" y1=\"480\" x2=\"766\" y2=\"494\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"757\" y1=\"453\" x2=\"757\" y2=\"494\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"742\" y1=\"488\" x2=\"742\" y2=\"496\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"670\" y1=\"467\" x2=\"670\" y2=\"496\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"691\" y1=\"442\" x2=\"691\" y2=\"496\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"711\" y1=\"483\" x2=\"711\" y2=\"496\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"663\" y1=\"497\" x2=\"773\" y2=\"497\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM628.8,538.8c0.6-0.6,180.6,0,180.6,0\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t553.4,658.4 602.3,664.8 627.5,690 627.5,709 \t\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t273.7,749.1 252.9,675.5 307.6,673.3 \t\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM253.3,675.5c3.2,0,50.2,54.6,50.2,54.6v24.4l-29.4-5.4\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t303,754.5 441.4,754.5 627.2,709 \t\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t395.3,717.7 344.9,723.9 302.9,730.1 \t\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t543.9,729.8 412.7,730 399.5,716.8 395.3,717.7 \t\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"399.5\" y1=\"716.8\" x2=\"390.1\" y2=\"755\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"412.7\" y1=\"730\" x2=\"412.4\" y2=\"755\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t764.8,648.5 641.7,606.8 574.8,596.1 \t\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"297.1\" y1=\"624.2\" x2=\"125.2\" y2=\"658.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM705.5,234.9c0-0.2,0.7-0.4,1.4-0.5c2.6-0.4,5.1-0.4,7.7,0c4.1,0.6,7.9,2.2,11.1,4.8c4.6,3.7,7.4,9.1,9,14.7c0,0,17.3-3,19.2,14\n\t\tc6.3,0,15.6-1.2,18.1,6.5c2.2,6.8-1.9,11.1-7,12.9c-2.2,0.8-4.6,1.2-6.7,1.1c-12.3-0.3-24.6-0.2-36.9,0c-21.3-0.2-54.4-0.6-75.7,0\n\t\tc-2.2,0.1-4.5-0.3-6.7-1.1c-5.1-1.9-9.2-6.1-7-12.9c2.5-7.6,11.8-6.5,18.1-6.5c1.9-17,19.8-14,19.8-14\n\t\tC677.1,229.4,705.5,234.9,705.5,234.9L705.5,234.9z\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM670.4,271.7c3.4,2.3,6.9,4.2,11.3,3.5c1.6-0.3,3.2-1.9,4.7-2.1c1.4-0.1,0.8,0.1,2,0.5c1.9,0.6,3.6,2.2,5.7,2.8\n\t\tc2.9,0.8,6.2,1,9.2,0.8c4.7-0.4,12.7-1.7,16.1-4.9c2.9,1.9,4.8,4.5,8.6,5.2c5.1,1,10.8-1.1,15.1-2.5\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM380.7,167.5c-0.7,0-5.5,0-6.3,0c-21.3-0.2-54.4-0.6-75.7,0c-2.2,0.1-4.5-0.3-6.7-1.1c-5.1-1.9-9.2-6.1-7-12.9\n\t\tc2.5-7.6,11.8-6.5,18.1-6.5c1.9-17,19.8-14,19.8-14c7.2-24.6,35.6-19,35.6-19v0c0-0.2,0.7-0.4,1.4-0.5c2.6-0.4,5.1-0.4,7.7,0\n\t\tc4.1,0.6,7.9,2.2,11.1,4.8c4.6,3.7,7.4,9.1,9,14.7c0,0,17.3-3,19.2,14c7.1-3.8,12.9-0.8,16.2,3.4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM323.4,150.7c3.4,2.3,6.9,4.2,11.3,3.5c1.6-0.3,3.2-1.9,4.7-2.1c1.4-0.1,0.8,0.1,2,0.5c1.9,0.6,3.6,2.2,5.7,2.8\n\t\tc2.9,0.8,6.2,1,9.2,0.8c4.7-0.4,12.7-1.7,16.1-4.9c2.9,1.9,4.8,4.5,8.6,5.2c2.5,0.5,8.7,0.9,11.2,0.4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM599.3,332.3c2.3-11.3,15-9.9,15-9.9h0c0-0.1,0.4-0.2,0.8-0.3c1.2-0.3,2.3-0.4,3.5-0.3c1.9,0.1,3.6,0.7,5.2,1.7\n\t\tc2.2,1.5,3.7,3.8,4.6,6.2c0,0,7.6-2,9.1,5.5c2.8-0.2,6.9-1.1,8.3,2.2c1.3,3-0.4,5-2.6,6.1c-0.9,0.4-2,0.7-3,0.8\n\t\tc-5.5,0.3-11,0.9-16.5,1.4c-6,0.5-14.1,1.1-21.6,1.7\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"1.3466\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM601.3,340.2c1.6,0.9,3.2,1.6,5.2,1.1c0.7-0.2,1.4-1,2-1.1c0.6-0.1,0.4,0,0.9,0.1c0.9,0.2,1.7,0.8,2.7,1c1.4,0.3,2.8,0.2,4.1,0\n\t\tc2.1-0.3,5.6-1.3,7-2.8c1.4,0.7,2.3,1.8,4.1,2c2.3,0.2,4.8-0.9,6.6-1.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M661.5,433\n\t\tc-1.9-0.2-3.7-0.4-5.6-0.6c-3.7-0.4-9.4-1.1-13.1-1.4c-0.4,0-0.8-0.1-1.1-0.3c-0.9-0.4-1.5-1.2-1-2.4c0.6-1.3,2.2-0.9,3.3-0.8\n\t\tc0.6-2.9,3.6-2.1,3.6-2.1c1.7-4.1,6.5-2.6,6.5-2.6l0,0c0,0,0.2-0.1,0.3-0.1c0.5,0,0.9,0,1.4,0.2c0.7,0.2,1.3,0.5,1.8,1\n\t\tc0.7,0.7,1.1,1.7,1.3,2.7c0,0,2.2-0.1,2.9,1.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"0.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM647.4,428.5c0.5,0.5,1.1,0.9,1.9,0.8c0.3,0,0.6-0.3,0.9-0.3c0.2,0,0.1,0,0.3,0.1c0.3,0.1,0.6,0.4,0.9,0.6c0.5,0.2,1,0.3,1.6,0.3\n\t\tc0.8,0,2.2-0.1,2.9-0.6c0.5,0.4,0.8,0.9,1.4,1.1c0.9,0.3,1.9,0,2.7-0.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M762.5,559v-6.2\n\t\tc0,0-2.6-0.1-2.9-2.1c0,0-0.3-1.7,0.4-2.1c0,0,0.7-0.5,0.7,2c0,0,0.4,0.9,1,0.9l0-6.4c0,0,0.4-1.1,1.3-1.1c0,0,1.4-0.2,1.4,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1,0.6-0.5,0.7-0.7c0.2-0.3-0.1-0.8,0-1.2c0-0.6-0.1-2.8,0.4-2.9c0.7-0.2,0.8,1.1,0.9,1.6\n\t\tc0.1,1.2,0.2,2.6-0.7,3.6c-0.1,0.2-1.3,1-1.3,0.9c0,0,0,3.7,0,3.7\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"0.7513\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM759.1,559.8c0.6,0,1.4,0.2,1.9,0.1c0.5-0.1,0.8-0.4,1.4-0.4c1.5,0.1,3.1,0.2,4.6,0.3c0.8,0.1,1.9-0.1,2.7,0\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M754.5,626v-6.2\n\t\tc0,0-2.6-0.1-2.9-2.1c0,0-0.3-1.7,0.4-2.1c0,0,0.7-0.5,0.7,2c0,0,0.4,0.9,1,0.9l0-6.4c0,0,0.4-1.1,1.3-1.1c0,0,1.4-0.2,1.4,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1,0.6-0.5,0.7-0.7c0.2-0.3-0.1-0.8,0-1.2c0-0.6-0.1-2.8,0.4-2.9c0.7-0.2,0.8,1.1,0.9,1.6\n\t\tc0.1,1.2,0.2,2.6-0.7,3.6c-0.1,0.2-1.3,1-1.3,0.9c0,0,0,3.7,0,3.7\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"0.7513\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM751.1,626.8c0.6,0,1.4,0.2,1.9,0.1c0.5-0.1,0.8-0.4,1.4-0.4c1.5,0.1,3.1,0.2,4.6,0.3c0.8,0.1,1.9-0.1,2.7,0\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M676.5,564v-6.2\n\t\tc0,0,2-0.1,2.2-2.1c0,0,0-1.7-0.7-2.1c0,0-0.9-0.5-0.9,2c0,0-0.4,0.9-1,0.9l-0.1-6.4c0,0,0.2-1.1-0.6-1.1c0,0-0.8-0.2-0.8,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1-1.3-0.5-1.4-0.7c-0.2-0.3-0.3-0.8-0.3-1.2c0-0.6,0-2.8-0.6-2.9c-0.7-0.2-0.9,1.1-1,1.6\n\t\tc-0.1,1.2,0.5,2.6,1.3,3.6c0.1,0.2,1.9,1,1.9,0.9c0,0,0,3.7,0,3.7\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"0.7513\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM678.6,564.8c-0.6,0-1.4,0.2-1.9,0.1c-0.5-0.1-0.8-0.4-1.4-0.4c-1.5,0.1-3.1,0.2-4.6,0.3c-0.8,0.1-1.9-0.1-2.7,0\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"M593.5,590v-6.2\n\t\tc0,0,2-0.1,2.2-2.1c0,0,0-1.7-0.7-2.1c0,0-0.9-0.5-0.9,2c0,0-0.4,0.9-1,0.9l-0.1-6.4c0,0,0.2-1.1-0.6-1.1c0,0-0.8-0.2-0.8,0.9\n\t\tc0,0,0,9.1,0,9.1c0,0.1-1.3-0.5-1.4-0.7c-0.2-0.3-0.3-0.8-0.3-1.2c0-0.6,0-2.8-0.6-2.9c-0.7-0.2-0.9,1.1-1,1.6\n\t\tc-0.1,1.2,0.5,2.6,1.3,3.6c0.1,0.2,1.9,1,1.9,0.9c0,0,0,3.7,0,3.7\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"0.7513\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM595.6,590.8c-0.6,0-1.4,0.2-1.9,0.1c-0.5-0.1-0.8-0.4-1.4-0.4c-1.5,0.1-3.1,0.2-4.6,0.3c-0.8,0.1-1.9-0.1-2.7,0\"/>\n\t\n\t\t<polygon fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t706.4,665 685.4,665 680.8,691 693.6,690.9 722.3,673.4 \t\"/>\n\t\n\t\t<polyline fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"\n\t\t686.4,666 699,680 719.9,674.8 \t\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"699\" y1=\"680\" x2=\"697.1\" y2=\"688.8\"/>\n\t\n\t\t<line fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" x1=\"601.8\" y1=\"664.9\" x2=\"560.5\" y2=\"725.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM136.4,187l-0.5-19.8c0,0-7.2-0.3-7.9-6.3c0,0-0.7-5.3,1.6-6.3c0,0,2.4-1.5,2.4,5.9c0,0,1.2,2.6,3,2.6l0.2-19.4\n\t\tc0,0,0.7-3.2,3.2-3.2c0,0,3.6-0.7,3.6,2.7c0,0,0,27.4,0,27.6c0,0.2,2.6-1.6,2.8-2c0.6-1,0.2-2.4,0.2-3.5c0.1-1.8-0.2-8.4,1.4-8.8\n\t\tc2.2-0.6,2.6,3.2,2.7,4.8c0.3,3.5-0.2,8-2.6,10.9c-0.4,0.5-4.7,3.1-4.7,2.7c0,0-0.8,11.9-0.8,11.9\"/>\n\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 -74.1595 701.2955)\" cx=\"361.7\" cy=\"392.8\" rx=\"14.3\" ry=\"14.3\"/>\n\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 45.52 835.4486)\" cx=\"497.8\" cy=\"391.8\" rx=\"14.3\" ry=\"14.3\"/>\n\t<path d=\"M438.1,441.2c-5.7,0.6-12.5-0.3-15.2-1.8c-1.6-0.9-3.2-2-4.1-3.5c-2.6-4.1,3-6.4,6.5-7.4c3.2-0.9,6.4-1.1,9.7-0.8\n\t\tc2.7,0.2,5.3,0.7,7.7,1.8c2.4,1.1,3.6,1.6,4.3,3.9C448.5,438.4,443.8,440.6,438.1,441.2z\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 45.5048 835.4331)\" fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"497.8\" cy=\"391.8\" rx=\"49\" ry=\"49\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 -72.0028 704.4983)\" fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"364.6\" cy=\"393.2\" rx=\"49\" ry=\"49\"/>\n\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 -74.1595 701.2955)\" cx=\"361.7\" cy=\"392.8\" rx=\"14.3\" ry=\"14.3\"/>\n\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 45.52 835.4486)\" cx=\"497.8\" cy=\"391.8\" rx=\"14.3\" ry=\"14.3\"/>\n\t<ellipse transform=\"matrix(0.1279 -0.9918 0.9918 0.1279 -5.0822 559.8978)\" cx=\"315.8\" cy=\"282.8\" rx=\"7.1\" ry=\"7.1\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.128 -0.9918 0.9918 0.128 7.9834 574.7572)\" fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"330.8\" cy=\"282.8\" rx=\"24.3\" ry=\"24.3\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM405.8,440c4.4-2.8,10.1-6,15.5-5.8c5.1,0.1,10.2,1.1,15.3,1.6c4.8,0.5,9.3,0.3,14,1.9c4.7,1.6,9.2,4.4,12.5,8.2\n\t\tc3.8,4.3,2.1,11.3-3,14.7c-9.6,6.3-18.6-4.7-28.5-4.1c-9.5,0.5-17.6,9.9-27.2,2.6C398,454.3,400,443.7,405.8,440z\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM431.8,458c-0.3,3.9-0.5,9.8,0,11.9c1,3.6,5.5,3.8,10.6,3.4c6.1-0.5,5-4.5,5-5.7c0-0.8-0.4-4.6-0.3-5.5\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM412.4,462.5c-0.3,3.9-0.3,5.8,0.2,7.9c1,3.6,5.5,3.8,10.6,3.4c6.1-0.5,7.7-1.3,7.7-2.8c0-1,0.5-12.1,0.6-13\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM438.1,441.2c-5.7,0.6-12.5-0.3-15.2-1.8c-1.6-0.9-3.2-2-4.1-3.5c-2.6-4.1,3-6.4,6.5-7.4c3.2-0.9,6.4-1.1,9.7-0.8\n\t\tc2.7,0.2,5.3,0.7,7.7,1.8c2.4,1.1,3.6,1.6,4.3,3.9C448.5,438.4,443.8,440.6,438.1,441.2z\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM261,410.5c-3.1-12.4-4.1-25.4-2.9-37.2c2.6-24.3,12.9-46.9,21.9-69.3c11.1-27.8,25.4-58,52.2-73.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM330.9,222c-10.2,2.1-22.6,3.5-32-2.4c-6.5-4.1-11.5-18.1-20.6-15.8c-7.2,1.8-7.7,14-7.4,19.5c0.6,10.5,3.9,20.8,9,30\n\t\tc2.6,4.7,8.9,16.6,14.2,18.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM286,546.9c-2.6,33.1,6.4,70.2,20.1,100.1c6,13.2,15.1,24.5,28.5,30.6c21.6,9.8,46.8,10.5,70.1,11.8c9.1,0.5,21,1.2,29.2,1.4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM259.4,518.3c-6.9,4.3-17,12.7-21.8,17.4c-2.6,2.6-11.7,10.6-13,14.2c-2.5,6.8,7.5,2.4,8.8,8.5c1.5,6.9-5.1,11,5.3,10.7\n\t\tc5.8-0.2,11.4-2.1,16.7-4.1c8.7-3.2,20.5-5.3,30.2-10.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM317.5,664.9c-8.3,6.8-16.6,13.6-20.8,23.6c-5,11.8-0.9,27.8,13.1,28.6c9.8,0.5,27-6.3,35.6-10.5c8.8-4.3,23.5-13.1,31.8-18.9\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM283.3,259c-6.4,0-28.9,8-30.7,14.9c-3.2,12.2,24.7,15.7,32.6,17.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM234.4,538.8c6.3,2.1,10.2,8.2,12.3,12.6c2.2,4.7,3,10.8,0.9,16.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM628.8,538.8c-6.3,2.1-10.2,8.2-12.3,12.6c-2.2,4.7-3,10.8-0.9,16.2\"/>\n\t<ellipse transform=\"matrix(0.9918 -0.1279 0.1279 0.9918 -31.6962 72.2437)\" cx=\"546.5\" cy=\"282.8\" rx=\"7.1\" ry=\"7.1\"/>\n\t\n\t\t<ellipse transform=\"matrix(0.9918 -0.128 0.128 0.9918 -31.8144 70.6109)\" fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" cx=\"533.5\" cy=\"282.8\" rx=\"24.3\" ry=\"24.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM476.3,312.8c77.4-0.2,109,83,89.2,149.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM388.3,313.8c-77.4-0.2-109,83-89.2,149.3\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM432.7,288.4c9.9-0.2,20.7-0.6,29.5,3.5c10.5,4.9,17.9,23.8,13,34.9c-4.8,11-16.3,17-27.5,19.7c-18.9,4.5-49.7,0.8-58.7-19.7\n\t\tc-4.9-11.1,2.5-30,13-34.9C411.1,287.7,422.6,288.1,432.7,288.4\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM532.2,230.2c24.2,14.3,33.4,34.7,45.8,58c20.4,38.4,34.4,73.7,24.8,118.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM533.5,222.1c10.2,2.1,22.6,3.5,32-2.3c6.5-4.1,11.6-18.1,20.6-15.8c7.2,1.8,7.7,14,7.3,19.6c-0.6,10.5-4,20.7-9,30\n\t\tc-2.6,4.7-9.7,17.1-15,18.7\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM578.3,546.9c2.6,33.1-6.4,70.2-20.1,100.1c-6,13.2-15.1,24.5-28.5,30.6c-21.6,9.8-46.8,10.5-70.1,11.8c-9.1,0.5-17.4,1.2-25.7,1.4\n\t\t\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM604.9,518.3c6.9,4.3,17,12.7,21.8,17.4c2.6,2.6,11.7,10.6,13,14.2c2.5,6.8-7.5,2.4-8.8,8.5c-1.5,6.9,5.1,11-5.3,10.7\n\t\tc-5.8-0.2-11.4-2.1-16.7-4.1c-8.7-3.2-20.5-5.3-30.2-10.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM546.8,664.9c8.3,6.8,16.6,13.6,20.8,23.6c5,11.8,0.9,27.8-13.1,28.6c-9.8,0.5-27-6.3-35.6-10.5c-8.8-4.3-23.5-13.1-31.8-18.9\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM581,259.2c6.4,0,28.9,8.1,30.6,15c3.2,12.2-24.5,14.1-32.4,15.6\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM294.8,462.1c27.8-1.2,51.6,19.5,64.3,42l-7-10.7c14.2-2.2,32.2,4.7,41.5,16c10.4-3,16.9,0.6,20.6,5.3c10.2-6.8,25.1-3.8,35,0\n\t\tc3.6-5,10.5-8.4,21.4-5.3c9.3-11.4,27.3-18.2,41.5-16l-7,10.7c12.7-22.6,36.5-43.3,64.3-42c18.5-14.8,29.8-30.7,33-54.6l-0.5,3\n\t\tc31.9-6.5,36.9,118.6-6.8,107.6l3.5,0.6c-1.8,22.1-31.5,38.1-51.5,37.4l3.2,0.1c-5.7,28.7-35.4,46.9-59.5,42.9\n\t\tc0,0.6-3.7,8.1-13,7.7c-7.4-0.3-3.8-6.7-7.3-10.7c-0.2,2.7-3.1,10.9-6.7,11.8c-3.7,0.9-3.9,1.4-12.4-0.9\n\t\tc-0.7,11.1-7.6,27.4-16.7,34.5c-8.2-5.6-18-24.8-20.4-34.8c-4.6,3.2-7.8,3.6-12.1,0.1c-2.4-1.9-8.3-8.2-8.5-10.8\n\t\tc-3.5,4,0,10.4-7.3,10.7c-4.5,0.2-9.9-5.7-10-10c-26.2-1.2-56.8-11.9-62.6-40.6l3.2-0.1c-20,0.7-49.7-15.3-51.5-37.4l3.5-0.6\n\t\tc-43.7,11-40-114.1-8.1-107.6c2.3,9.1,5.7,17.9,10.3,25.5C277.3,446.1,285.6,454.7,294.8,462.1z\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2.8817\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM168.3,187c69-71.8,166-116.4,273.4-116.4C651.2,70.5,821,240.3,821,449.8C821,659.2,651.2,829,441.7,829\n\t\tC232.3,829,62.5,659.2,62.5,449.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM508.6,255.4c0,1.2-0.3,2.8-0.5,4.2c-0.4,2.9-1.4,5.7-2.2,8.5c5.9-6.6,12.4-10.7,16.5-19.3c4.6-9.6,11.1-15.9,11.1-26.7\n\t\tc-0.9-11.9-7-31.3-22.1-31.3c-4.4-9.4-17-17.2-24.2-15.5c-0.9-15.8-22.3-25.7-38.8-21.3l-0.1,0c-8.3-6.8-20.1-8.6-31.2,0\n\t\tc-16.7-4.5-38.2,5.6-38.6,21.7c-6.9-2.6-20.9,5.2-25.5,15c-15.1,0-21.2,19.4-22.1,31.3c0,10.8,6.5,17.1,11.1,26.7\n\t\tc4.1,8.7,10.6,12.8,16.5,19.3c-0.8-2.7-1.8-5.6-2.2-8.5c-0.2-1.4-0.5-3-0.5-4.2l0,0.1c3.2,6.8,3.4,12.8,9.5,17.8\n\t\tc5.4,4.5,12,6.4,17.9,8.8c-1.2-2-2.4-10,0-13.3c1.4,7,20.1,16.5,27.3,15.3c-1.2,0-1.3-8.5-1.3-11.3c6.4,0,16.9,6.7,23.1,10.2\n\t\tc6.2-3.5,16.6-10.3,23.1-10.2c0,2.8-0.1,11.4-1.3,11.3c7.3,1.1,25.9-8.3,27.3-15.3c2.4,3.3,1.2,11.3,0,13.3\n\t\tc5.8-2.4,12.4-4.4,17.9-8.8C505.2,268.3,505.3,262.3,508.6,255.4\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2.0849\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM467.6,315c-6.7,0.9-6.8,7.5-6.3,12.9\"/>\n\t\n\t\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"2.0849\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM399.2,315c6.7,0.9,6.8,7.5,6.3,12.9\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM572.4,277.7c0,0,24.9-1.8,28.9,2.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM261.4,277.7c0,0,24.9-1.8,28.9,2.2\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM524.6,709.2c10.4-10.9,26.9-24.7,41.5-22.8\"/>\n\t<path fill=\"none\" stroke=\"#211915\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\t\tM339.1,709.2c-10.4-10.9-26.9-24.7-41.5-22.8\"/>\n</g>\n<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\tM431.5,468.1\"/>\n<path fill=\"none\" stroke=\"#000000\" stroke-width=\"3.6235\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" d=\"\n\tM425.1,474.6\"/>\n</svg>\n"
        },
        {
          "name": "mail",
          "type": "tree",
          "content": null
        },
        {
          "name": "method_override.go",
          "type": "blob",
          "size": 0.642578125,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gobuffalo/buffalo/internal/defaults\"\n)\n\n// MethodOverride is the default implementation for the\n// Options#MethodOverride. By default it will look for a form value\n// name `_method` and change the request method if that is\n// present and the original request is of type \"POST\". This is\n// added automatically when using `New` Buffalo, unless\n// an alternative is defined in the Options.\nfunc MethodOverride(res http.ResponseWriter, req *http.Request) {\n\tif req.Method == \"POST\" {\n\t\treq.Method = defaults.String(req.FormValue(\"_method\"), \"POST\")\n\t\treq.Form.Del(\"_method\")\n\t\treq.PostForm.Del(\"_method\")\n\t}\n}\n"
        },
        {
          "name": "method_override_test.go",
          "type": "blob",
          "size": 0.5166015625,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_MethodOverride(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.PUT(\"/\", func(c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"you put me!\"))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Post(url.Values{\"_method\": []string{\"PUT\"}})\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Equal(\"you put me!\", res.Body.String())\n}\n"
        },
        {
          "name": "middleware.go",
          "type": "blob",
          "size": 5.3447265625,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"reflect\"\n\t\"runtime\"\n\t\"strings\"\n\t\"sync\"\n)\n\n// MiddlewareFunc defines the interface for a piece of Buffalo\n// Middleware.\n/*\n\tfunc DoSomething(next Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\t// do something before calling the next handler\n\t\t\terr := next(c)\n\t\t\t// do something after call the handler\n\t\t\treturn err\n\t\t}\n\t}\n*/\ntype MiddlewareFunc func(Handler) Handler\n\nconst funcKeyDelimeter = \":\"\n\n// Use the specified Middleware for the App.\n// When defined on an `*App` the specified middleware will be\n// inherited by any `Group` calls that are made on that on\n// the App.\nfunc (a *App) Use(mw ...MiddlewareFunc) {\n\ta.Middleware.Use(mw...)\n}\n\n// MiddlewareStack manages the middleware stack for an App/Group.\ntype MiddlewareStack struct {\n\tstack []MiddlewareFunc\n\tskips map[string]bool\n}\n\nfunc (ms MiddlewareStack) String() string {\n\ts := []string{}\n\tfor _, m := range ms.stack {\n\t\ts = append(s, funcKey(m))\n\t}\n\n\treturn strings.Join(s, \"\\n\")\n}\n\nfunc (ms *MiddlewareStack) clone() *MiddlewareStack {\n\tn := newMiddlewareStack()\n\tn.stack = append(n.stack, ms.stack...)\n\tfor k, v := range ms.skips {\n\t\tn.skips[k] = v\n\t}\n\treturn n\n}\n\n// Clear wipes out the current middleware stack for the App/Group,\n// any middleware previously defined will be removed leaving an empty\n// middleware stack.\nfunc (ms *MiddlewareStack) Clear() {\n\tms.stack = []MiddlewareFunc{}\n\tms.skips = map[string]bool{}\n}\n\n// Use the specified Middleware for the App.\n// When defined on an `*App` the specified middleware will be\n// inherited by any `Group` calls that are made on that on\n// the App.\nfunc (ms *MiddlewareStack) Use(mw ...MiddlewareFunc) {\n\tms.stack = append(ms.stack, mw...)\n}\n\n// Remove the specified Middleware(s) for the App/group. This is useful when\n// the middleware will be skipped by the entire group.\n/*\n\ta.Middleware.Remove(Authorization)\n*/\nfunc (ms *MiddlewareStack) Remove(mws ...MiddlewareFunc) {\n\tresult := []MiddlewareFunc{}\n\nbase:\n\tfor _, existing := range ms.stack {\n\t\tfor _, banned := range mws {\n\t\t\tif funcKey(existing) == funcKey(banned) {\n\t\t\t\tcontinue base\n\t\t\t}\n\t\t}\n\n\t\tresult = append(result, existing)\n\t}\n\n\tms.stack = result\n\n}\n\n// Skip a specified piece of middleware the specified Handlers.\n// This is useful for things like wrapping your application in an\n// authorization middleware, but skipping it for things the home\n// page, the login page, etc...\n/*\n\ta.Middleware.Skip(Authorization, HomeHandler, LoginHandler, RegistrationHandler)\n*/\nfunc (ms *MiddlewareStack) Skip(mw MiddlewareFunc, handlers ...Handler) {\n\tfor _, h := range handlers {\n\t\tkey := funcKey(mw, h)\n\t\tms.skips[key] = true\n\t}\n}\n\n// Replace a piece of middleware with another piece of middleware. Great for\n// testing.\nfunc (ms *MiddlewareStack) Replace(mw1 MiddlewareFunc, mw2 MiddlewareFunc) {\n\tm1k := funcKey(mw1)\n\tstack := []MiddlewareFunc{}\n\tfor _, mw := range ms.stack {\n\t\tif funcKey(mw) == m1k {\n\t\t\tstack = append(stack, mw2)\n\t\t} else {\n\t\t\tstack = append(stack, mw)\n\t\t}\n\t}\n\tms.stack = stack\n}\n\n// assertMiddleware is a hidden middleware that works just befor and after the\n// actual handler runs to make it sure everything is OK with the Handler\n// specification.\n//\n// It writes response header with `http.StatusOK` if the request handler exited\n// without error but the response status is still zero. Setting response is the\n// responsibility of handler but this middleware make it sure the response\n// should be compatible with middleware specification.\n//\n// See also: https://github.com/gobuffalo/buffalo/issues/2339\nfunc assertMiddleware(handler Handler) Handler {\n\treturn func(c Context) error {\n\t\terr := handler(c)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif res, ok := c.Response().(*Response); ok {\n\t\t\tif res.Status == 0 {\n\t\t\t\tres.WriteHeader(http.StatusOK)\n\t\t\t\tc.Logger().Debug(\"warning: handler exited without setting the response status. 200 OK will be used.\")\n\t\t\t}\n\t\t}\n\n\t\treturn err\n\t}\n}\n\nfunc (ms *MiddlewareStack) handler(info RouteInfo) Handler {\n\ttstack := []MiddlewareFunc{assertMiddleware}\n\n\tif len(ms.stack) > 0 {\n\t\tsl := len(ms.stack) - 1\n\t\tfor i := sl; i >= 0; i-- {\n\t\t\tmw := ms.stack[i]\n\t\t\tkey := funcKey(mw, info)\n\t\t\tif !ms.skips[key] {\n\t\t\t\ttstack = append(tstack, mw)\n\t\t\t}\n\t\t}\n\t}\n\n\th := info.Handler\n\tfor _, mw := range tstack {\n\t\th = mw(h)\n\t}\n\n\treturn h\n}\n\nfunc newMiddlewareStack(mws ...MiddlewareFunc) *MiddlewareStack {\n\treturn &MiddlewareStack{\n\t\tstack: mws,\n\t\tskips: map[string]bool{},\n\t}\n}\n\nfunc funcKey(funcs ...interface{}) string {\n\tnames := []string{}\n\tfor _, f := range funcs {\n\t\tif n, ok := f.(RouteInfo); ok {\n\t\t\tnames = append(names, n.HandlerName)\n\t\t\tcontinue\n\t\t}\n\t\trv := reflect.ValueOf(f)\n\t\tptr := rv.Pointer()\n\t\tkeyMapMutex.Lock()\n\t\tif n, ok := keyMap[ptr]; ok {\n\t\t\tkeyMapMutex.Unlock()\n\t\t\tnames = append(names, n)\n\t\t\tcontinue\n\t\t}\n\t\tkeyMapMutex.Unlock()\n\t\tn := ptrName(ptr)\n\t\tkeyMapMutex.Lock()\n\t\tkeyMap[ptr] = n\n\t\tkeyMapMutex.Unlock()\n\t\tnames = append(names, n)\n\t}\n\treturn strings.Join(names, funcKeyDelimeter)\n}\n\nfunc ptrName(ptr uintptr) string {\n\tfnc := runtime.FuncForPC(ptr)\n\tn := fnc.Name()\n\n\tn = strings.Replace(n, \"-fm\", \"\", 1)\n\tn = strings.Replace(n, \"(\", \"\", 1)\n\tn = strings.Replace(n, \")\", \"\", 1)\n\treturn n\n}\n\nfunc setFuncKey(f interface{}, name string) {\n\trv := reflect.ValueOf(f)\n\tif rv.Kind() == reflect.Ptr {\n\t\trv = rv.Elem()\n\t}\n\tptr := rv.Pointer()\n\tkeyMapMutex.Lock()\n\tkeyMap[ptr] = name\n\tkeyMapMutex.Unlock()\n}\n\nvar keyMap = map[uintptr]string{}\nvar keyMapMutex = sync.Mutex{}\n"
        },
        {
          "name": "middleware_test.go",
          "type": "blob",
          "size": 6.3662109375,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n// Test_App_Use tests that middleware gets added\nfunc Test_App_Use(t *testing.T) {\n\tr := require.New(t)\n\n\tlog := []string{}\n\ta := New(Options{})\n\ta.Use(func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"end\")\n\t\t\treturn err\n\t\t}\n\t})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\tlog = append(log, \"handler\")\n\t\treturn nil\n\t})\n\n\tw := httptest.New(a)\n\tw.HTML(\"/\").Get()\n\tr.Len(log, 3)\n\tr.Equal([]string{\"start\", \"handler\", \"end\"}, log)\n}\n\n// Test_Middleware_Replace tests that middleware gets added\nfunc Test_Middleware_Replace(t *testing.T) {\n\tr := require.New(t)\n\n\tlog := []string{}\n\ta := New(Options{})\n\tmw1 := func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"m1 start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"m1 end\")\n\t\t\treturn err\n\t\t}\n\t}\n\tmw2 := func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"m2 start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"m2 end\")\n\t\t\treturn err\n\t\t}\n\t}\n\ta.Use(mw1)\n\ta.Middleware.Replace(mw1, mw2)\n\n\ta.GET(\"/\", func(c Context) error {\n\t\tlog = append(log, \"handler\")\n\t\treturn nil\n\t})\n\n\tw := httptest.New(a)\n\tw.HTML(\"/\").Get()\n\tr.Len(log, 3)\n\tr.Equal([]string{\"m2 start\", \"handler\", \"m2 end\"}, log)\n}\n\n// Test_Middleware_Skip tests that middleware gets skipped\nfunc Test_Middleware_Skip(t *testing.T) {\n\tr := require.New(t)\n\n\tlog := []string{}\n\ta := New(Options{})\n\tmw1 := func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"mw1 start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"mw1 end\")\n\t\t\treturn err\n\t\t}\n\t}\n\tmw2 := func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"mw2 start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"mw2 end\")\n\t\t\treturn err\n\t\t}\n\t}\n\ta.Use(mw1)\n\ta.Use(mw2)\n\n\th1 := func(c Context) error {\n\t\tlog = append(log, \"h1\")\n\t\treturn nil\n\t}\n\th2 := func(c Context) error {\n\t\tlog = append(log, \"h2\")\n\t\treturn nil\n\t}\n\n\ta.GET(\"/h1\", h1)\n\ta.GET(\"/h2\", h2)\n\n\ta.Middleware.Skip(mw2, h2)\n\n\tw := httptest.New(a)\n\n\tw.HTML(\"/h2\").Get()\n\tr.Len(log, 3)\n\tr.Equal([]string{\"mw1 start\", \"h2\", \"mw1 end\"}, log)\n\n\tlog = []string{}\n\tw.HTML(\"/h1\").Get()\n\tr.Len(log, 5)\n\tr.Equal([]string{\"mw1 start\", \"mw2 start\", \"h1\", \"mw2 end\", \"mw1 end\"}, log)\n}\n\ntype carsResource struct {\n\tResource\n}\n\nfunc (ur *carsResource) Show(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"show\"))\n}\n\nfunc (ur *carsResource) List(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"list\"))\n}\n\n// Test_Middleware_Skip tests that middleware gets skipped\nfunc Test_Middleware_Skip_Resource(t *testing.T) {\n\tr := require.New(t)\n\n\tlog := []string{}\n\tmw1 := func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tlog = append(log, \"mw1 start\")\n\t\t\terr := h(c)\n\t\t\tlog = append(log, \"mw1 end\")\n\t\t\treturn err\n\t\t}\n\t}\n\n\ta := New(Options{})\n\tvar cr Resource = &carsResource{}\n\tg := a.Resource(\"/autos\", cr)\n\tg.Use(mw1)\n\n\tvar ur Resource = &carsResource{}\n\tg = a.Resource(\"/cars\", ur)\n\tg.Use(mw1)\n\n\t// fmt.Println(\"set up skip\")\n\tg.Middleware.Skip(mw1, ur.Show)\n\n\tw := httptest.New(a)\n\n\t// fmt.Println(\"make autos call\")\n\tlog = []string{}\n\tres := w.HTML(\"/autos/1\").Get()\n\tr.Len(log, 2)\n\tr.Equal(\"show\", res.Body.String())\n\n\t// fmt.Println(\"make list call\")\n\tlog = []string{}\n\tres = w.HTML(\"/cars\").Get()\n\tr.Len(log, 2)\n\tr.Equal([]string{\"mw1 start\", \"mw1 end\"}, log)\n\tr.Equal(\"list\", res.Body.String())\n\n\t// fmt.Println(\"make show call\")\n\tlog = []string{}\n\tres = w.HTML(\"/cars/1\").Get()\n\tr.Len(log, 0)\n\tr.Equal(\"show\", res.Body.String())\n\n}\n\n// Test_Middleware_Clear confirms that middle gets cleared\nfunc Test_Middleware_Clear(t *testing.T) {\n\tr := require.New(t)\n\tmws := newMiddlewareStack()\n\tmw := func(h Handler) Handler { return h }\n\tmws.Use(mw)\n\tmws.Skip(mw, voidHandler)\n\n\tr.Len(mws.stack, 1)\n\tr.Len(mws.skips, 1)\n\n\tmws.Clear()\n\n\tr.Len(mws.stack, 0)\n\tr.Len(mws.skips, 0)\n}\n\nfunc Test_Middleware_Remove(t *testing.T) {\n\tr := require.New(t)\n\tlog := []string{}\n\n\tmw1 := func(h Handler) Handler {\n\t\tlog = append(log, \"mw1\")\n\t\treturn h\n\t}\n\n\tmw2 := func(h Handler) Handler {\n\t\tlog = append(log, \"mw2\")\n\t\treturn h\n\t}\n\n\ta := New(Options{})\n\ta.Use(mw2)\n\ta.Use(mw1)\n\n\tvar cr Resource = &carsResource{}\n\tg := a.Resource(\"/autos\", cr)\n\tg.Middleware.Remove(mw2)\n\n\ta.Resource(\"/all_log_autos\", cr)\n\tw := httptest.New(a)\n\n\tng := a.Resource(\"/no_log_autos\", cr)\n\tng.Middleware.Remove(mw1, mw2)\n\n\t_ = w.HTML(\"/autos/1\").Get()\n\tr.Len(log, 1)\n\tr.Equal(\"mw1\", log[0])\n\n\tlog = []string{}\n\t_ = w.HTML(\"/all_log_autos/1\").Get()\n\tr.Len(log, 2)\n\tr.Contains(log, \"mw2\")\n\tr.Contains(log, \"mw1\")\n\n\tlog = []string{}\n\t_ = w.HTML(\"/no_log_autos/1\").Get()\n\tr.Len(log, 0)\n}\n\nfunc Test_AssertMiddleware_NilStatus200(t *testing.T) {\n\tr := require.New(t)\n\tvar status int\n\n\ta := New(Options{})\n\ta.Use(func(h Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\terr := h(c)\n\n\t\t\tres, ok := c.Response().(*Response)\n\t\t\tr.True(ok)\n\t\t\tstatus = res.Status\n\n\t\t\treturn err\n\t\t}\n\t})\n\n\ta.GET(\"/200\", func(c Context) error {\n\t\tc.Response().WriteHeader(http.StatusOK) // explicitly set\n\t\treturn nil\n\t})\n\n\ta.GET(\"/404\", func(c Context) error {\n\t\tc.Response().WriteHeader(http.StatusNotFound) //explicitly set\n\t\treturn nil\n\t})\n\n\ta.GET(\"/nil\", func(c Context) error {\n\t\treturn nil // return nil without setting response status. should be OK\n\t})\n\n\ta.GET(\"/500\", func(c Context) error {\n\t\treturn fmt.Errorf(\"error\") // return error\n\t})\n\n\ta.GET(\"/502\", func(c Context) error {\n\t\treturn HTTPError{Status: http.StatusBadGateway} // return HTTPError\n\t})\n\n\ta.GET(\"/panic\", func(c Context) error {\n\t\tpanic(\"hoy hoy\")\n\t})\n\n\ttests := []struct {\n\t\tpath   string\n\t\tcode   int\n\t\tstatus int\n\t}{\n\t\t{\"/200\", http.StatusOK, http.StatusOK}, // when the handler set response code explicitly (e.g. 200, 404)\n\t\t{\"/404\", http.StatusNotFound, http.StatusNotFound},\n\t\t{\"/nil\", http.StatusOK, http.StatusOK},        // when the handler returns nil without setting status code\n\t\t{\"/502\", http.StatusBadGateway, 0},            // set by defaultErrorHandler, when the handler just returns error\n\t\t{\"/500\", http.StatusInternalServerError, 0},   // set by defaultErrorHandler, when the handler returns HTTPError\n\t\t{\"/panic\", http.StatusInternalServerError, 0}, // set by PanicHandler\n\t}\n\tw := httptest.New(a)\n\n\tfor _, tc := range tests {\n\t\tres := w.HTML(tc.path).Get()\n\t\tr.Equal(tc.status, status)\n\t\tr.Equal(tc.code, res.Code)\n\t}\n}\n"
        },
        {
          "name": "not_found_test.go",
          "type": "blob",
          "size": 1.3740234375,
          "content": "package buffalo\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_App_Dev_NotFound(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.Env = \"development\"\n\ta.GET(\"/foo\", func(c Context) error { return nil })\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/bad\").Get()\n\n\tbody := res.Body.String()\n\tr.Contains(body, \"404 - ERROR!\")\n\tr.Contains(body, \"/foo\")\n\tr.Equal(http.StatusNotFound, res.Code)\n}\n\nfunc Test_App_Dev_NotFound_JSON(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.Env = \"development\"\n\ta.GET(\"/foo\", func(c Context) error { return nil })\n\n\tw := httptest.New(a)\n\tres := w.JSON(\"/bad\").Get()\n\tr.Equal(http.StatusNotFound, res.Code)\n\n\tjb := map[string]interface{}{}\n\terr := json.NewDecoder(res.Body).Decode(&jb)\n\tr.NoError(err)\n\tr.Equal(float64(http.StatusNotFound), jb[\"code\"])\n}\n\nfunc Test_App_Override_NotFound(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.ErrorHandlers[http.StatusNotFound] = func(status int, err error, c Context) error {\n\t\tc.Response().WriteHeader(http.StatusNotFound)\n\t\tc.Response().Write([]byte(\"oops!!!\"))\n\t\treturn nil\n\t}\n\ta.GET(\"/foo\", func(c Context) error { return nil })\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/bad\").Get()\n\tr.Equal(http.StatusNotFound, res.Code)\n\n\tbody := res.Body.String()\n\tr.Equal(body, \"oops!!!\")\n\tr.NotContains(body, \"/foo\")\n}\n"
        },
        {
          "name": "notfound.prod.html",
          "type": "blob",
          "size": 1.4814453125,
          "content": "<!DOCTYPE html>\n<html>\n\n<head>\n    <style>\n        h1,\n        p.powered {\n            text-align: center\n        }\n\n        body {\n            background: #ECECEC;\n            padding-top: 25px;\n            font-family: helvetica neue, helvetica, sans-serif;\n            color: #333\n        }\n\n        .card {\n            box-sizing: border-box;\n            width: 440px;\n            min-width: 270px;\n            margin: 0 auto;\n            padding: 10px 25px 35px 10px;\n            background: #FFF;\n            box-shadow: 0 2px 4px 0 rgba(185, 185, 185, .28);\n            border-radius: 5px\n        }\n\n        .card p {\n            max-width: 320px;\n            margin: 15px auto\n        }\n\n        h1 {\n            font-size: 22px\n        }\n\n        hr {\n            border: .5px solid #1272E2;\n            width: 180px\n        }\n\n        p.powered {\n            font-family: HelveticaNeue-Light;\n            font-size: 12px;\n            color: #333\n        }\n\n        @media (max-width:600px) {\n            .card {\n                width: 100%;\n                display: block\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n        <div class=\"card\">\n            <h1>Not Found</h1>\n            <hr>\n            <p>The page you're looking for does not exist, you may have mistyped the address or the page may have been\n                moved.</p>\n        </div>\n\n        <p class=\"powered\">powered by <a href=\"https://gobuffalo.io\">gobuffalo.io</a></p>\n    </div>\n</body>\n\n</html>"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 5,
          "content": "package buffalo\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gobuffalo/buffalo/internal/defaults\"\n\t\"github.com/gobuffalo/buffalo/worker\"\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/gobuffalo/logger\"\n\t\"github.com/gorilla/sessions\"\n)\n\n// Options are used to configure and define how your application should run.\ntype Options struct {\n\tName string `json:\"name\"`\n\t// Addr is the bind address provided to http.Server. Default is \"127.0.0.1:3000\"\n\t// Can be set using ENV vars \"ADDR\" and \"PORT\".\n\tAddr string `json:\"addr\"`\n\t// Host that this application will be available at. Default is \"http://127.0.0.1:[$PORT|3000]\".\n\tHost string `json:\"host\"`\n\n\t// Env is the \"environment\" in which the App is running. Default is \"development\".\n\tEnv string `json:\"env\"`\n\n\t// LogLvl defaults to logger.DebugLvl.\n\tLogLvl logger.Level `json:\"log_lvl\"`\n\t// Logger to be used with the application. A default one is provided.\n\tLogger Logger `json:\"-\"`\n\n\t// MethodOverride allows for changing of the request method type. See the default\n\t// implementation at buffalo.MethodOverride\n\tMethodOverride http.HandlerFunc `json:\"-\"`\n\n\t// SessionStore is the `github.com/gorilla/sessions` store used to back\n\t// the session. It defaults to use a cookie store and the ENV variable\n\t// `SESSION_SECRET`.\n\tSessionStore sessions.Store `json:\"-\"`\n\t// SessionName is the name of the session cookie that is set. This defaults\n\t// to \"_buffalo_session\".\n\tSessionName string `json:\"session_name\"`\n\n\t// Timeout in second for ongoing requests when shutdown the server.\n\t// The default value is 60.\n\tTimeoutSecondShutdown int `json:\"timeout_second_shutdown\"`\n\n\t// Worker implements the Worker interface and can process tasks in the background.\n\t// Default is \"github.com/gobuffalo/worker.Simple.\n\tWorker worker.Worker `json:\"-\"`\n\t// WorkerOff tells App.Start() whether to start the Worker process or not. Default is \"false\".\n\tWorkerOff bool `json:\"worker_off\"`\n\n\t// PreHandlers are http.Handlers that are called between the http.Server\n\t// and the buffalo Application.\n\tPreHandlers []http.Handler `json:\"-\"`\n\t// PreWare takes an http.Handler and returns an http.Handler\n\t// and acts as a pseudo-middleware between the http.Server and\n\t// a Buffalo application.\n\tPreWares []PreWare `json:\"-\"`\n\n\t// CompressFiles enables gzip compression of static files served by ServeFiles using\n\t// gorilla's CompressHandler (https://godoc.org/github.com/gorilla/handlers#CompressHandler).\n\t// Default is \"false\".\n\tCompressFiles bool `json:\"compress_files\"`\n\n\tPrefix  string          `json:\"prefix\"`\n\tContext context.Context `json:\"-\"`\n\n\tcancel context.CancelFunc\n}\n\n// PreWare takes an http.Handler and returns an http.Handler\n// and acts as a pseudo-middleware between the http.Server and\n// a Buffalo application.\ntype PreWare func(http.Handler) http.Handler\n\n// NewOptions returns a new Options instance with sensible defaults\nfunc NewOptions() Options {\n\treturn optionsWithDefaults(Options{})\n}\n\nfunc optionsWithDefaults(opts Options) Options {\n\topts.Env = defaults.String(opts.Env, envy.Get(\"GO_ENV\", \"development\"))\n\topts.Name = defaults.String(opts.Name, \"/\")\n\taddr := \"0.0.0.0\"\n\tif opts.Env == \"development\" {\n\t\taddr = \"127.0.0.1\"\n\t}\n\tenvAddr := envy.Get(\"ADDR\", addr)\n\n\tif strings.HasPrefix(envAddr, \"unix:\") {\n\t\t// UNIX domain socket doesn't have a port\n\t\topts.Addr = envAddr\n\t} else {\n\t\t// TCP case\n\t\topts.Addr = defaults.String(opts.Addr, fmt.Sprintf(\"%s:%s\", envAddr, envy.Get(\"PORT\", \"3000\")))\n\t}\n\topts.Host = defaults.String(opts.Host, envy.Get(\"HOST\", fmt.Sprintf(\"http://127.0.0.1:%s\", envy.Get(\"PORT\", \"3000\"))))\n\n\tif opts.PreWares == nil {\n\t\topts.PreWares = []PreWare{}\n\t}\n\tif opts.PreHandlers == nil {\n\t\topts.PreHandlers = []http.Handler{}\n\t}\n\n\tif opts.Context == nil {\n\t\topts.Context = context.Background()\n\t}\n\topts.Context, opts.cancel = context.WithCancel(opts.Context)\n\n\tif opts.Logger == nil {\n\t\tif lvl, err := envy.MustGet(\"LOG_LEVEL\"); err == nil {\n\t\t\topts.LogLvl, err = logger.ParseLevel(lvl)\n\t\t\tif err != nil {\n\t\t\t\topts.LogLvl = logger.DebugLevel\n\t\t\t}\n\t\t}\n\n\t\tif opts.LogLvl == 0 {\n\t\t\topts.LogLvl = logger.DebugLevel\n\t\t}\n\n\t\topts.Logger = logger.New(opts.LogLvl)\n\t}\n\n\tif opts.SessionStore == nil {\n\t\tsecret := envy.Get(\"SESSION_SECRET\", \"\")\n\n\t\tif secret == \"\" && (opts.Env == \"development\" || opts.Env == \"test\") {\n\t\t\tsecret = \"buffalo-secret\"\n\t\t}\n\n\t\t// In production a SESSION_SECRET must be set!\n\t\tif secret == \"\" {\n\t\t\topts.Logger.Warn(\"Unless you set SESSION_SECRET env variable, your session storage is not protected!\")\n\t\t}\n\n\t\tcookieStore := sessions.NewCookieStore([]byte(secret))\n\n\t\t//Cookie secure attributes, see: https://www.owasp.org/index.php/Testing_for_cookies_attributes_(OTG-SESS-002)\n\t\tcookieStore.Options.HttpOnly = true\n\t\tif opts.Env == \"production\" {\n\t\t\tcookieStore.Options.Secure = true\n\t\t}\n\n\t\topts.SessionStore = cookieStore\n\t}\n\topts.SessionName = defaults.String(opts.SessionName, \"_buffalo_session\")\n\n\tif opts.Worker == nil {\n\t\tw := worker.NewSimpleWithContext(opts.Context)\n\t\tw.Logger = opts.Logger\n\t\topts.Worker = w\n\t}\n\n\topts.TimeoutSecondShutdown = defaults.Int(opts.TimeoutSecondShutdown, 60)\n\n\treturn opts\n}\n"
        },
        {
          "name": "options_test.go",
          "type": "blob",
          "size": 1.3935546875,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestOptions_NewOptions(t *testing.T) {\n\ttests := []struct {\n\t\tname      string\n\t\tenv       string\n\t\tsecret    string\n\t\texpectErr string\n\t}{\n\t\t{name: \"Development doesn't fail with no secret\", env: \"development\", secret: \"\", expectErr: \"securecookie:\"},\n\t\t{name: \"Development doesn't fail with secret set\", env: \"development\", secret: \"secrets\", expectErr: \"securecookie:\"},\n\t\t{name: \"Test doesn't fail with secret set\", env: \"test\", secret: \"\", expectErr: \"securecookie:\"},\n\t\t{name: \"Test doesn't fail with secret set\", env: \"test\", secret: \"secrets\", expectErr: \"securecookie:\"},\n\t\t{name: \"Production fails with no secret\", env: \"production\", secret: \"\", expectErr: \"securecookie:\"},\n\t\t{name: \"Production doesn't fail with secret set\", env: \"production\", secret: \"secrets\", expectErr: \"securecookie:\"},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.name, func(t *testing.T) {\n\t\t\tr := require.New(t)\n\t\t\tenvy.Temp(func() {\n\t\t\t\tenvy.Set(\"GO_ENV\", test.env)\n\t\t\t\tenvy.Set(\"SESSION_SECRET\", test.secret)\n\n\t\t\t\topts := NewOptions()\n\n\t\t\t\treq, _ := http.NewRequest(\"GET\", \"/\", strings.NewReader(\"\"))\n\t\t\t\treq.AddCookie(&http.Cookie{Name: \"_buffalo_session\"})\n\n\t\t\t\t_, err := opts.SessionStore.New(req, \"_buffalo_session\")\n\n\t\t\t\tr.Error(err)\n\t\t\t\tr.Contains(err.Error(), test.expectErr)\n\t\t\t})\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "plugins.go",
          "type": "blob",
          "size": 1.384765625,
          "content": "package buffalo\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"sync\"\n\n\t\"github.com/gobuffalo/buffalo/plugins\"\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/gobuffalo/events\"\n)\n\nvar loadPlugins sync.Once\n\n// LoadPlugins will add listeners for any plugins that support \"events\"\nfunc LoadPlugins() error {\n\tvar errResult error\n\tloadPlugins.Do(func() {\n\t\t// don't send plugins events during testing\n\t\tif envy.Get(\"GO_ENV\", \"development\") == \"test\" {\n\t\t\treturn\n\t\t}\n\t\tplugs, err := plugins.Available()\n\t\tif err != nil {\n\t\t\terrResult = err\n\t\t\treturn\n\t\t}\n\t\tfor _, cmds := range plugs {\n\t\t\tfor _, c := range cmds {\n\t\t\t\tif c.BuffaloCommand != \"events\" {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\terr := func(c plugins.Command) error {\n\t\t\t\t\tn := fmt.Sprintf(\"[PLUGIN] %s %s\", c.Binary, c.Name)\n\t\t\t\t\tfn := func(e events.Event) {\n\t\t\t\t\t\tb, err := json.Marshal(e)\n\t\t\t\t\t\tif err != nil {\n\t\t\t\t\t\t\tfmt.Println(\"error trying to marshal event\", e, err)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcmd := exec.Command(c.Binary, c.UseCommand, string(b))\n\t\t\t\t\t\tcmd.Stderr = os.Stderr\n\t\t\t\t\t\tcmd.Stdout = os.Stdout\n\t\t\t\t\t\tcmd.Stdin = os.Stdin\n\t\t\t\t\t\tif err := cmd.Run(); err != nil {\n\t\t\t\t\t\t\tfmt.Println(\"error trying to send event\", strings.Join(cmd.Args, \" \"), err)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t_, err := events.NamedListen(n, events.Filter(c.ListenFor, fn))\n\t\t\t\t\treturn err\n\t\t\t\t}(c)\n\t\t\t\tif err != nil {\n\t\t\t\t\terrResult = err\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\treturn errResult\n}\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "render",
          "type": "tree",
          "content": null
        },
        {
          "name": "request_logger.go",
          "type": "blob",
          "size": 1.794921875,
          "content": "package buffalo\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"net/http\"\n\t\"time\"\n\n\thumanize \"github.com/dustin/go-humanize\"\n\t\"github.com/gobuffalo/buffalo/internal/httpx\"\n)\n\n// RequestLogger can be be overridden to a user specified\n// function that can be used to log the request.\nvar RequestLogger = RequestLoggerFunc\n\nfunc randString(i int) (string, error) {\n\tif i == 0 {\n\t\ti = 64\n\t}\n\tb := make([]byte, i)\n\t_, err := rand.Read(b)\n\treturn hex.EncodeToString(b), err\n}\n\n// RequestLoggerFunc is the default implementation of the RequestLogger.\n// By default it will log a uniq \"request_id\", the HTTP Method of the request,\n// the path that was requested, the duration (time) it took to process the\n// request, the size of the response (and the \"human\" size), and the status\n// code of the response.\nfunc RequestLoggerFunc(h Handler) Handler {\n\treturn func(c Context) error {\n\t\trs, err := randString(10)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tvar irid interface{}\n\t\tif irid = c.Session().Get(\"requestor_id\"); irid == nil {\n\t\t\trs, err := randString(10)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tirid = rs\n\t\t\tc.Session().Set(\"requestor_id\", irid)\n\t\t}\n\n\t\trid := irid.(string) + \"-\" + rs\n\t\tc.Set(\"request_id\", rid)\n\t\tc.LogField(\"request_id\", rid)\n\n\t\tstart := time.Now()\n\t\tdefer func() {\n\t\t\tws, ok := c.Response().(*Response)\n\t\t\tif !ok {\n\t\t\t\tws = &Response{ResponseWriter: c.Response()}\n\t\t\t\tws.Status = http.StatusOK\n\t\t\t}\n\t\t\treq := c.Request()\n\t\t\tct := httpx.ContentType(req)\n\t\t\tif ct != \"\" {\n\t\t\t\tc.LogField(\"content_type\", ct)\n\t\t\t}\n\t\t\tc.LogFields(map[string]interface{}{\n\t\t\t\t\"method\":     req.Method,\n\t\t\t\t\"path\":       req.URL.String(),\n\t\t\t\t\"duration\":   time.Since(start),\n\t\t\t\t\"size\":       ws.Size,\n\t\t\t\t\"human_size\": humanize.Bytes(uint64(ws.Size)),\n\t\t\t\t\"status\":     ws.Status,\n\t\t\t})\n\t\t\tc.Logger().Info(req.URL.String())\n\t\t}()\n\t\treturn h(c)\n\t}\n}\n"
        },
        {
          "name": "resource.go",
          "type": "blob",
          "size": 2.25,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n)\n\n// Resource interface allows for the easy mapping\n// of common RESTful actions to a set of paths. See\n// the a.Resource documentation for more details.\n// NOTE: When skipping Resource handlers, you need to first declare your\n// resource handler as a type of buffalo.Resource for the Skip function to\n// properly recognize and match it.\n/*\n\t// Works:\n\tvar cr Resource\n\tcr = &carsResource{&buffaloBaseResource{}}\n\tg = a.Resource(\"/cars\", cr)\n\tg.Use(SomeMiddleware)\n\tg.Middleware.Skip(SomeMiddleware, cr.Show)\n\n\t// Doesn't Work:\n\tcr := &carsResource{&buffaloBaseResource{}}\n\tg = a.Resource(\"/cars\", cr)\n\tg.Use(SomeMiddleware)\n\tg.Middleware.Skip(SomeMiddleware, cr.Show)\n*/\ntype Resource interface {\n\tList(Context) error\n\tShow(Context) error\n\tCreate(Context) error\n\tUpdate(Context) error\n\tDestroy(Context) error\n}\n\n// Middler can be implemented to specify additional\n// middleware specific to the resource\ntype Middler interface {\n\tUse() []MiddlewareFunc\n}\n\n// BaseResource fills in the gaps for any Resource interface\n// functions you don't want/need to implement.\n/*\n\ttype UsersResource struct {\n\t\tResource\n\t}\n\n\tfunc (ur *UsersResource) List(c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"hello\")\n\t}\n\n\t// This will fulfill the Resource interface, despite only having\n\t// one of the functions defined.\n\t&UsersResource{&BaseResource{})\n*/\ntype BaseResource struct{}\n\n// List default implementation. Returns a 404\nfunc (v BaseResource) List(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\n// Show default implementation. Returns a 404\nfunc (v BaseResource) Show(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\n// Create default implementation. Returns a 404\nfunc (v BaseResource) Create(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\n// Update default implementation. Returns a 404\nfunc (v BaseResource) Update(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\n// Destroy default implementation. Returns a 404\nfunc (v BaseResource) Destroy(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n"
        },
        {
          "name": "response.go",
          "type": "blob",
          "size": 1.443359375,
          "content": "package buffalo\n\nimport (\n\t\"bufio\"\n\t\"encoding/binary\"\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n)\n\n// Response implements the http.ResponseWriter interface and allows\n// for the capture of the response status and size to be used for things\n// like logging requests.\ntype Response struct {\n\tStatus int\n\tSize   int\n\thttp.ResponseWriter\n}\n\n// WriteHeader sets the status code for a response\nfunc (w *Response) WriteHeader(code int) {\n\tif code == w.Status {\n\t\treturn\n\t}\n\n\tif w.Status > 0 {\n\t\tfmt.Printf(\"[WARNING] Headers were already written. Wanted to override status code %d with %d\", w.Status, code)\n\t\treturn\n\t}\n\n\tw.Status = code\n\tw.ResponseWriter.WriteHeader(code)\n}\n\n// Write the body of the response\nfunc (w *Response) Write(b []byte) (int, error) {\n\tw.Size = binary.Size(b)\n\treturn w.ResponseWriter.Write(b)\n}\n\n// Hijack implements the http.Hijacker interface to allow for things like websockets.\nfunc (w *Response) Hijack() (net.Conn, *bufio.ReadWriter, error) {\n\tif hj, ok := w.ResponseWriter.(http.Hijacker); ok {\n\t\treturn hj.Hijack()\n\t}\n\treturn nil, nil, fmt.Errorf(\"does not implement http.Hijack\")\n}\n\n// Flush the response\nfunc (w *Response) Flush() {\n\tif f, ok := w.ResponseWriter.(http.Flusher); ok {\n\t\tf.Flush()\n\t}\n}\n\ntype closeNotifier interface {\n\tCloseNotify() <-chan bool\n}\n\n// CloseNotify implements the http.CloseNotifier interface\nfunc (w *Response) CloseNotify() <-chan bool {\n\tif cn, ok := w.ResponseWriter.(closeNotifier); ok {\n\t\treturn cn.CloseNotify()\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "response_test.go",
          "type": "blob",
          "size": 0.3740234375,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"net/http/httptest\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_Response_MultipleWrite(t *testing.T) {\n\tr := require.New(t)\n\tresWr := httptest.NewRecorder()\n\tres := Response{\n\t\tResponseWriter: resWr,\n\t}\n\n\tres.WriteHeader(http.StatusOK)\n\tres.WriteHeader(http.StatusInternalServerError)\n\n\tr.Equal(res.Status, http.StatusOK)\n}\n"
        },
        {
          "name": "route.go",
          "type": "blob",
          "size": 2.146484375,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/url\"\n\t\"sort\"\n\t\"strings\"\n)\n\n// Routes returns a list of all of the routes defined\n// in this application.\nfunc (a *App) Routes() RouteList {\n\t// CHKME: why this function is exported? can we deprecate it?\n\tif a.root != nil {\n\t\treturn a.root.routes\n\t}\n\treturn a.routes\n}\n\nfunc addExtraParamsTo(path string, opts map[string]interface{}) string {\n\tpendingParams := map[string]string{}\n\tkeys := []string{}\n\tfor k, v := range opts {\n\t\tif strings.Contains(path, fmt.Sprintf(\"%v\", v)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tkeys = append(keys, k)\n\t\tpendingParams[k] = fmt.Sprintf(\"%v\", v)\n\t}\n\n\tif len(keys) == 0 {\n\t\treturn path\n\t}\n\n\tif !strings.Contains(path, \"?\") {\n\t\tpath = path + \"?\"\n\t} else {\n\t\tif !strings.HasSuffix(path, \"?\") {\n\t\t\tpath = path + \"&\"\n\t\t}\n\t}\n\n\tsort.Strings(keys)\n\n\tfor index, k := range keys {\n\t\tformat := \"%v=%v\"\n\n\t\tif index > 0 {\n\t\t\tformat = \"&%v=%v\"\n\t\t}\n\n\t\tpath = path + fmt.Sprintf(format, url.QueryEscape(k), url.QueryEscape(pendingParams[k]))\n\t}\n\n\treturn path\n}\n\n//RouteHelperFunc represents the function that takes the route and the opts and build the path\ntype RouteHelperFunc func(opts map[string]interface{}) (template.HTML, error)\n\n// RouteList contains a mapping of the routes defined\n// in the application. This listing contains, Method, Path,\n// and the name of the Handler defined to process that route.\ntype RouteList []*RouteInfo\n\nvar methodOrder = map[string]string{\n\t\"GET\":    \"1\",\n\t\"POST\":   \"2\",\n\t\"PUT\":    \"3\",\n\t\"DELETE\": \"4\",\n}\n\nfunc (a RouteList) Len() int      { return len(a) }\nfunc (a RouteList) Swap(i, j int) { a[i], a[j] = a[j], a[i] }\nfunc (a RouteList) Less(i, j int) bool {\n\t// NOTE: it was used for sorting of app.routes but we don't sort the routes anymore.\n\t// keep it for compatibility but could be deprecated.\n\tx := a[i].App.host + a[i].Path + methodOrder[a[i].Method]\n\ty := a[j].App.host + a[j].Path + methodOrder[a[j].Method]\n\treturn x < y\n}\n\n// Lookup search a specific PathName in the RouteList and return the *RouteInfo\nfunc (a RouteList) Lookup(name string) (*RouteInfo, error) {\n\tfor _, ri := range a {\n\t\tif ri.PathName == name {\n\t\t\treturn ri, nil\n\t\t}\n\t}\n\treturn nil, fmt.Errorf(\"path name not found\")\n}\n"
        },
        {
          "name": "route_info.go",
          "type": "blob",
          "size": 2.84765625,
          "content": "package buffalo\n\nimport (\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"reflect\"\n\t\"strings\"\n\n\t\"github.com/gobuffalo/flect\"\n\n\t\"github.com/gobuffalo/events\"\n\t\"github.com/gorilla/mux\"\n)\n\n// RouteInfo provides information about the underlying route that\n// was built.\ntype RouteInfo struct {\n\tMethod       string     `json:\"method\"`\n\tPath         string     `json:\"path\"`\n\tHandlerName  string     `json:\"handler\"`\n\tResourceName string     `json:\"resourceName,omitempty\"`\n\tPathName     string     `json:\"pathName\"`\n\tAliases      []string   `json:\"aliases\"`\n\tMuxRoute     *mux.Route `json:\"-\"`\n\tHandler      Handler    `json:\"-\"`\n\tApp          *App       `json:\"-\"`\n}\n\n// String returns a JSON representation of the RouteInfo\nfunc (ri RouteInfo) String() string {\n\tb, _ := json.MarshalIndent(ri, \"\", \"  \")\n\treturn string(b)\n}\n\n// Alias path patterns to the this route. This is not the\n// same as a redirect.\nfunc (ri *RouteInfo) Alias(aliases ...string) *RouteInfo {\n\tri.Aliases = append(ri.Aliases, aliases...)\n\tfor _, a := range aliases {\n\t\tri.App.router.Handle(a, ri).Methods(ri.Method)\n\t}\n\treturn ri\n}\n\n// Name allows users to set custom names for the routes.\nfunc (ri *RouteInfo) Name(name string) *RouteInfo {\n\trouteIndex := -1\n\tfor index, route := range ri.App.Routes() {\n\t\tif route.App.host == ri.App.host && route.Path == ri.Path && route.Method == ri.Method {\n\t\t\trouteIndex = index\n\t\t\tbreak\n\t\t}\n\t}\n\n\tname = flect.Camelize(name)\n\n\tif !strings.HasSuffix(name, \"Path\") {\n\t\tname = name + \"Path\"\n\t}\n\n\tri.PathName = name\n\tif routeIndex != -1 {\n\t\tri.App.Routes()[routeIndex] = reflect.ValueOf(ri).Interface().(*RouteInfo)\n\t}\n\n\treturn ri\n}\n\n// BuildPathHelper Builds a routeHelperfunc for a particular RouteInfo\nfunc (ri *RouteInfo) BuildPathHelper() RouteHelperFunc {\n\tcRoute := ri\n\treturn func(opts map[string]interface{}) (template.HTML, error) {\n\t\tpairs := []string{}\n\t\tfor k, v := range opts {\n\t\t\tpairs = append(pairs, k)\n\t\t\tpairs = append(pairs, fmt.Sprintf(\"%v\", v))\n\t\t}\n\n\t\turl, err := cRoute.MuxRoute.URL(pairs...)\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"missing parameters for %v: %s\", cRoute.Path, err)\n\t\t}\n\n\t\tresult := url.String()\n\t\tresult = addExtraParamsTo(result, opts)\n\n\t\treturn template.HTML(result), nil\n\t}\n}\n\nfunc (ri RouteInfo) ServeHTTP(res http.ResponseWriter, req *http.Request) {\n\ta := ri.App\n\n\tc := a.newContext(ri, res, req)\n\tpayload := events.Payload{\n\t\t\"route\":   ri,\n\t\t\"app\":     a,\n\t\t\"context\": c,\n\t}\n\n\tevents.EmitPayload(EvtRouteStarted, payload)\n\terr := a.Middleware.handler(ri)(c)\n\n\tif err != nil {\n\t\tstatus := http.StatusInternalServerError\n\t\tvar he HTTPError\n\t\tif errors.As(err, &he) {\n\t\t\tstatus = he.Status\n\t\t}\n\t\tevents.EmitError(EvtRouteErr, err, payload)\n\t\t// things have really hit the fan if we're here!!\n\t\ta.Logger.Error(err)\n\t\tc.Response().WriteHeader(status)\n\t\tc.Response().Write([]byte(err.Error()))\n\t}\n\n\tevents.EmitPayload(EvtRouteFinished, payload)\n}\n"
        },
        {
          "name": "route_info_test.go",
          "type": "blob",
          "size": 1.0556640625,
          "content": "package buffalo\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_RouteInfo_ServeHTTP_SQL_Error(t *testing.T) {\n\tr := require.New(t)\n\n\tapp := New(Options{})\n\tapp.GET(\"/good\", func(c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"hi\"))\n\t})\n\n\tapp.GET(\"/bad\", func(c Context) error {\n\t\treturn sql.ErrNoRows\n\t})\n\n\tapp.GET(\"/bad-2\", func(c Context) error {\n\t\treturn sql.ErrTxDone\n\t})\n\n\tapp.GET(\"/gone-unwrap\", func(c Context) error {\n\t\treturn c.Error(http.StatusGone, sql.ErrTxDone)\n\t})\n\n\tapp.GET(\"/gone-wrap\", func(c Context) error {\n\t\treturn c.Error(http.StatusGone, fmt.Errorf(\"some error wrapping here: %w\", sql.ErrNoRows))\n\t})\n\n\tw := httptest.New(app)\n\n\tres := w.HTML(\"/good\").Get()\n\tr.Equal(http.StatusOK, res.Code)\n\n\tres = w.HTML(\"/bad\").Get()\n\tr.Equal(http.StatusNotFound, res.Code)\n\n\tres = w.HTML(\"/gone-wrap\").Get()\n\tr.Equal(http.StatusGone, res.Code)\n\n\tres = w.HTML(\"/gone-unwrap\").Get()\n\tr.Equal(http.StatusGone, res.Code)\n}\n"
        },
        {
          "name": "route_mappings.go",
          "type": "blob",
          "size": 10.275390625,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"net/url\"\n\t\"os\"\n\t\"path\"\n\t\"reflect\"\n\t\"strings\"\n\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/gobuffalo/flect/name\"\n\t\"github.com/gorilla/handlers\"\n)\n\nconst (\n\t// AssetsAgeVarName is the ENV variable used to specify max age when ServeFiles is used.\n\tAssetsAgeVarName = \"ASSETS_MAX_AGE\"\n)\n\n// These method functions will be moved to Home structure.\n\n// GET maps an HTTP \"GET\" request to the path and the specified handler.\nfunc (a *App) GET(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"GET\", p, h)\n}\n\n// POST maps an HTTP \"POST\" request to the path and the specified handler.\nfunc (a *App) POST(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"POST\", p, h)\n}\n\n// PUT maps an HTTP \"PUT\" request to the path and the specified handler.\nfunc (a *App) PUT(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"PUT\", p, h)\n}\n\n// DELETE maps an HTTP \"DELETE\" request to the path and the specified handler.\nfunc (a *App) DELETE(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"DELETE\", p, h)\n}\n\n// HEAD maps an HTTP \"HEAD\" request to the path and the specified handler.\nfunc (a *App) HEAD(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"HEAD\", p, h)\n}\n\n// OPTIONS maps an HTTP \"OPTIONS\" request to the path and the specified handler.\nfunc (a *App) OPTIONS(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"OPTIONS\", p, h)\n}\n\n// PATCH maps an HTTP \"PATCH\" request to the path and the specified handler.\nfunc (a *App) PATCH(p string, h Handler) *RouteInfo {\n\treturn a.addRoute(\"PATCH\", p, h)\n}\n\n// Redirect from one URL to another URL. Only works for \"GET\" requests.\nfunc (a *App) Redirect(status int, from, to string) *RouteInfo {\n\treturn a.GET(from, func(c Context) error {\n\t\treturn c.Redirect(status, to)\n\t})\n}\n\n// Mount mounts a http.Handler (or Buffalo app) and passes through all requests to it.\n//\n//\tfunc muxer() http.Handler {\n//\t\tf := func(res http.ResponseWriter, req *http.Request) {\n//\t\t\tfmt.Fprintf(res, \"%s - %s\", req.Method, req.URL.String())\n//\t\t}\n//\t\tmux := mux.NewRouter()\n//\t\tmux.HandleFunc(\"/foo\", f).Methods(\"GET\")\n//\t\tmux.HandleFunc(\"/bar\", f).Methods(\"POST\")\n//\t\tmux.HandleFunc(\"/baz/baz\", f).Methods(\"DELETE\")\n//\t\treturn mux\n//\t}\n//\n//\ta.Mount(\"/admin\", muxer())\n//\n//\t$ curl -X DELETE http://localhost:3000/admin/baz/baz\nfunc (a *App) Mount(p string, h http.Handler) {\n\tprefix := path.Join(a.Prefix, p)\n\tpath := path.Join(p, \"{path:.+}\")\n\ta.ANY(path, WrapHandler(http.StripPrefix(prefix, h)))\n}\n\n// ServeFiles maps an path to a directory on disk to serve static files.\n// Useful for JavaScript, images, CSS, etc...\n/*\n\ta.ServeFiles(\"/assets\", http.Dir(\"path/to/assets\"))\n*/\nfunc (a *App) ServeFiles(p string, root http.FileSystem) {\n\tpath := path.Join(a.Prefix, p)\n\ta.filepaths = append(a.filepaths, path)\n\n\th := stripAsset(path, a.fileServer(root), a)\n\ta.router.PathPrefix(path).Handler(h)\n}\n\nfunc (a *App) fileServer(fs http.FileSystem) http.Handler {\n\tfsh := http.FileServer(fs)\n\tbaseHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tf, err := fs.Open(path.Clean(r.URL.Path))\n\t\tif os.IsNotExist(err) {\n\t\t\teh := a.ErrorHandlers.Get(http.StatusNotFound)\n\t\t\teh(http.StatusNotFound, fmt.Errorf(\"could not find %s\", r.URL.Path), a.newContext(RouteInfo{}, w, r))\n\t\t\treturn\n\t\t}\n\n\t\tstat, _ := f.Stat()\n\t\tmaxAge := envy.Get(AssetsAgeVarName, \"31536000\")\n\t\tw.Header().Add(\"ETag\", fmt.Sprintf(\"%x\", stat.ModTime().UnixNano()))\n\t\tw.Header().Add(\"Cache-Control\", fmt.Sprintf(\"max-age=%s\", maxAge))\n\t\tfsh.ServeHTTP(w, r)\n\t})\n\n\tif a.CompressFiles {\n\t\treturn handlers.CompressHandler(baseHandler)\n\t}\n\n\treturn baseHandler\n}\n\ntype newable interface {\n\tNew(Context) error\n}\n\ntype editable interface {\n\tEdit(Context) error\n}\n\n// Resource maps an implementation of the Resource interface\n// to the appropriate RESTful mappings. Resource returns the *App\n// associated with this group of mappings so you can set middleware, etc...\n// on that group, just as if you had used the a.Group functionality.\n//\n// Resource automatically creates a URL `/resources/new` if the resource\n// has a function `New()`. So it could act as a restriction for the value\n// of `resource_id`. URL `/resources/new` will always show the resource\n// creation page instead of showing the resource called `new`.\n/*\n\ta.Resource(\"/users\", &UsersResource{})\n\n\t// Is equal to this:\n\n\tur := &UsersResource{}\n\tg := a.Group(\"/users\")\n\tg.GET(\"/\", ur.List) // GET /users => ur.List\n\tg.POST(\"/\", ur.Create) // POST /users => ur.Create\n\tg.GET(\"/new\", ur.New) // GET /users/new => ur.New\n\tg.GET(\"/{user_id}\", ur.Show) // GET /users/{user_id} => ur.Show\n\tg.PUT(\"/{user_id}\", ur.Update) // PUT /users/{user_id} => ur.Update\n\tg.DELETE(\"/{user_id}\", ur.Destroy) // DELETE /users/{user_id} => ur.Destroy\n\tg.GET(\"/{user_id}/edit\", ur.Edit) // GET /users/{user_id}/edit => ur.Edit\n*/\nfunc (a *App) Resource(p string, r Resource) *App {\n\tg := a.Group(p)\n\n\tif mw, ok := r.(Middler); ok {\n\t\tg.Use(mw.Use()...)\n\t}\n\n\tp = \"/\"\n\n\trv := reflect.ValueOf(r)\n\tif rv.Kind() == reflect.Ptr {\n\t\trv = rv.Elem()\n\t}\n\n\trt := rv.Type()\n\tresourceName := rt.Name()\n\thandlerName := fmt.Sprintf(\"%s.%s\", rt.PkgPath(), resourceName) + \".%s\"\n\n\tn := strings.TrimSuffix(rt.Name(), \"Resource\")\n\tparamName := name.New(n).ParamID().String()\n\n\ttype paramKeyable interface {\n\t\tParamKey() string\n\t}\n\n\tif pk, ok := r.(paramKeyable); ok {\n\t\tparamName = pk.ParamKey()\n\t}\n\n\tspath := path.Join(p, \"{\"+paramName+\"}\")\n\n\t// This order will become the order of route evaluation too.\n\tsetFuncKey(r.List, fmt.Sprintf(handlerName, \"List\"))\n\tg.GET(p, r.List).ResourceName = resourceName\n\n\tsetFuncKey(r.Create, fmt.Sprintf(handlerName, \"Create\"))\n\tg.POST(p, r.Create).ResourceName = resourceName\n\n\t// NOTE: it makes restriction that resource id cannot be 'new'.\n\tif n, ok := r.(newable); ok {\n\t\tsetFuncKey(n.New, fmt.Sprintf(handlerName, \"New\"))\n\t\tg.GET(path.Join(p, \"new\"), n.New).ResourceName = resourceName\n\t}\n\n\tsetFuncKey(r.Show, fmt.Sprintf(handlerName, \"Show\"))\n\tg.GET(path.Join(spath), r.Show).ResourceName = resourceName\n\n\tsetFuncKey(r.Update, fmt.Sprintf(handlerName, \"Update\"))\n\tg.PUT(path.Join(spath), r.Update).ResourceName = resourceName\n\n\tsetFuncKey(r.Destroy, fmt.Sprintf(handlerName, \"Destroy\"))\n\tg.DELETE(path.Join(spath), r.Destroy).ResourceName = resourceName\n\n\tif n, ok := r.(editable); ok {\n\t\tsetFuncKey(n.Edit, fmt.Sprintf(handlerName, \"Edit\"))\n\t\tg.GET(path.Join(spath, \"edit\"), n.Edit).ResourceName = resourceName\n\t}\n\n\tg.Prefix = path.Join(g.Prefix, spath)\n\tg.prefix = g.Prefix\n\n\treturn g\n}\n\n// ANY accepts a request across any HTTP method for the specified path\n// and routes it to the specified Handler.\nfunc (a *App) ANY(p string, h Handler) {\n\ta.GET(p, h)\n\ta.POST(p, h)\n\ta.PUT(p, h)\n\ta.PATCH(p, h)\n\ta.HEAD(p, h)\n\ta.OPTIONS(p, h)\n\ta.DELETE(p, h)\n}\n\n// Group creates a new `*App` that inherits from it's parent `*App`.\n// This is useful for creating groups of end-points that need to share\n// common functionality, like middleware.\n/*\n\tg := a.Group(\"/api/v1\")\n\tg.Use(AuthorizeAPIMiddleware)\n\tg.GET(\"/users, APIUsersHandler)\n\tg.GET(\"/users/:user_id, APIUserShowHandler)\n*/\nfunc (a *App) Group(groupPath string) *App {\n\t// TODO: move this function to app.go or home.go eventually.\n\tg := New(a.Options)\n\t// keep them for v0 compatibility\n\tg.Prefix = path.Join(a.Prefix, groupPath)\n\tg.Name = g.Prefix\n\n\t// for Home structure\n\tg.prefix = path.Join(a.prefix, groupPath)\n\tg.host = a.host\n\tg.name = g.prefix\n\n\tg.router = a.router\n\tg.RouteNamer = a.RouteNamer\n\tg.Middleware = a.Middleware.clone()\n\tg.ErrorHandlers = a.ErrorHandlers\n\n\tg.app = a.app  // will replace g.root\n\tg.root = g.app // will be deprecated\n\n\t// to be replaced with child Homes. currently, only used in grifts.\n\ta.children = append(a.children, g)\n\treturn g\n}\n\n// VirtualHost creates a new `*App` that inherits from it's parent `*App`.\n// All pre-configured things on the parent App such as middlewares will be\n// applied, and can be modified only for this child App.\n//\n// This is a multi-homing feature similar to the `VirtualHost` in Apache\n// or multiple `server`s in nginx. One important different behavior is that\n// there is no concept of the `default` host in buffalo (at least for now)\n// and the routing decision will be made with the \"first match\" manner.\n// (e.g. if you have already set the route for '/' for the root App before\n// setting up a virualhost, the route of the root App will be picked up\n// even if the client makes a request to the specified domain.)\n/*\n\ta.VirtualHost(\"www.example.com\")\n\ta.VirtualHost(\"{subdomain}.example.com\")\n\ta.VirtualHost(\"{subdomain:[a-z]+}.example.com\")\n*/\nfunc (a *App) VirtualHost(h string) *App {\n\tg := a.Group(\"/\")\n\tg.host = h\n\tg.router = a.router.Host(h).Subrouter()\n\n\treturn g\n}\n\n// RouteHelpers returns a map of BuildPathHelper() for each route available in the app.\nfunc (a *App) RouteHelpers() map[string]RouteHelperFunc {\n\trh := map[string]RouteHelperFunc{}\n\tfor _, route := range a.Routes() {\n\t\tcRoute := route\n\t\trh[cRoute.PathName] = cRoute.BuildPathHelper()\n\t}\n\treturn rh\n}\n\nfunc (e *Home) addRoute(method string, url string, h Handler) *RouteInfo {\n\t// NOTE: lock the root app (not this app). only the root has the affective\n\t// routes list.\n\te.app.moot.Lock()\n\tdefer e.app.moot.Unlock()\n\n\turl = path.Join(e.prefix, url)\n\turl = e.app.normalizePath(url)\n\tname := e.app.RouteNamer.NameRoute(url)\n\n\ths := funcKey(h)\n\tr := &RouteInfo{\n\t\tMethod:      method,\n\t\tPath:        url,\n\t\tHandlerName: hs,\n\t\tHandler:     h,\n\t\tApp:         e.appSelf, // CHKME: to be replaced with Home\n\t\tAliases:     []string{},\n\t}\n\n\tr.MuxRoute = e.router.Handle(url, r).Methods(method)\n\tr.Name(name)\n\n\troutes := e.app.Routes()\n\troutes = append(routes, r)\n\t// NOTE: sorting is fancy but we lose the evaluation order information\n\t// of routing decision. Let's keep the routes as registered order so\n\t// developers can easily evaluate the order with `buffalo routes` and\n\t// can debug any routing priority issue. (just keep the original line\n\t// as history reference)\n\t//sort.Sort(routes)\n\n\te.app.routes = routes\n\n\treturn r\n}\n\nfunc stripAsset(path string, h http.Handler, a *App) http.Handler {\n\tif path == \"\" {\n\t\treturn h\n\t}\n\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tup := r.URL.Path\n\t\tup = strings.TrimPrefix(up, path)\n\t\tup = strings.TrimSuffix(up, \"/\")\n\n\t\tu, err := url.Parse(up)\n\t\tif err != nil {\n\t\t\teh := a.ErrorHandlers.Get(http.StatusBadRequest)\n\t\t\teh(http.StatusBadRequest, err, a.newContext(RouteInfo{}, w, r))\n\t\t\treturn\n\t\t}\n\n\t\tr.URL = u\n\t\th.ServeHTTP(w, r)\n\t})\n}\n"
        },
        {
          "name": "route_mappings_test.go",
          "type": "blob",
          "size": 3.7900390625,
          "content": "package buffalo\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_App_Routes_without_Root(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tr.Nil(a.root)\n\n\ta.GET(\"/foo\", voidHandler)\n\n\troutes := a.Routes()\n\tr.Len(routes, 1)\n\troute := routes[0]\n\tr.Equal(\"GET\", route.Method)\n\tr.Equal(\"/foo/\", route.Path)\n\tr.NotZero(route.HandlerName)\n}\n\nfunc Test_App_Routes_with_Root(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tr.Nil(a.root)\n\n\tg := a.Group(\"/api/v1\")\n\tg.GET(\"/foo\", voidHandler)\n\n\troutes := a.Routes()\n\tr.Len(routes, 1)\n\troute := routes[0]\n\tr.Equal(\"GET\", route.Method)\n\tr.Equal(\"/api/v1/foo/\", route.Path)\n\tr.NotZero(route.HandlerName)\n\n\tr.Equal(a.Routes(), g.Routes())\n}\n\nfunc Test_App_RouteName(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\n\tcases := map[string]string{\n\t\t\"cool\":                \"coolPath\",\n\t\t\"coolPath\":            \"coolPath\",\n\t\t\"coco_path\":           \"cocoPath\",\n\t\t\"ouch_something_cool\": \"ouchSomethingCoolPath\",\n\t}\n\n\tri := a.GET(\"/something\", voidHandler)\n\tfor k, v := range cases {\n\t\tri.Name(k)\n\t\tr.Equal(ri.PathName, v)\n\t}\n\n}\n\nfunc Test_RouteList_Lookup(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tr.Nil(a.root)\n\n\ta.GET(\"/foo\", voidHandler)\n\ta.GET(\"/test\", voidHandler)\n\n\troutes := a.Routes()\n\tfor _, route := range routes {\n\t\tlRoute, err := routes.Lookup(route.PathName)\n\t\tr.NoError(err)\n\t\tr.Equal(lRoute, route)\n\t}\n\tlRoute, err := routes.Lookup(\"a\")\n\tr.Error(err)\n\tr.Nil(lRoute)\n\n}\n\nfunc Test_App_RouteHelpers(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tr.Nil(a.root)\n\n\ta.GET(\"/foo\", voidHandler)\n\ta.GET(\"/test/{id}\", voidHandler)\n\n\trh := a.RouteHelpers()\n\n\tr.Len(rh, 2)\n\n\tf, ok := rh[\"fooPath\"]\n\tr.True(ok)\n\tx, err := f(map[string]interface{}{})\n\tr.NoError(err)\n\tr.Equal(\"/foo/\", string(x))\n\n\tf, ok = rh[\"testPath\"]\n\tr.True(ok)\n\tx, err = f(map[string]interface{}{\n\t\t\"id\": 1,\n\t})\n\tr.NoError(err)\n\tr.Equal(\"/test/1/\", string(x))\n}\n\ntype resourceHandler struct{}\n\nfunc (r resourceHandler) List(Context) error {\n\treturn nil\n}\n\nfunc (r resourceHandler) Show(Context) error {\n\treturn nil\n}\n\nfunc (r resourceHandler) Create(Context) error {\n\treturn nil\n}\n\nfunc (r resourceHandler) Update(Context) error {\n\treturn nil\n}\n\nfunc (r resourceHandler) Destroy(Context) error {\n\treturn nil\n}\n\nfunc Test_App_Routes_Resource(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tr.Nil(a.root)\n\n\ta.GET(\"/foo\", voidHandler)\n\ta.Resource(\"/r\", resourceHandler{})\n\n\troutes := a.Routes()\n\tr.Len(routes, 6)\n\troute := routes[0]\n\tr.Equal(\"GET\", route.Method)\n\tr.Equal(\"/foo/\", route.Path)\n\tr.NotZero(route.HandlerName)\n\n\tfor k, v := range routes {\n\t\tif k > 0 {\n\t\t\tr.Equal(\"resourceHandler\", v.ResourceName)\n\t\t}\n\t}\n}\n\nfunc Test_App_VirtualHost(t *testing.T) {\n\tr := require.New(t)\n\n\ta1 := New(Options{})\n\tr.Nil(a1.root)\n\n\th1 := a1.VirtualHost(\"www.example.com\")\n\th1.GET(\"/foo\", voidHandler)\n\n\troutes := h1.Routes()\n\tr.Len(routes, 1)\n\n\troute := routes[0]\n\tr.Equal(\"GET\", route.Method)\n\tr.Equal(\"/foo/\", route.Path)\n\tr.NotZero(route.HandlerName)\n\n\t// With Regular Expressions\n\n\ta2 := New(Options{})\n\tr.Nil(a1.root)\n\n\th2 := a2.VirtualHost(\"{subdomain}.example.com\")\n\th2.GET(\"/foo\", voidHandler)\n\th2.GET(\"/foo/{id}\", voidHandler).Name(\"fooID\")\n\n\trh := h2.RouteHelpers()\n\n\troutes = h2.Routes()\n\tr.Len(routes, 2)\n\n\tr.Equal(\"GET\", routes[0].Method)\n\tr.Equal(\"/foo/\", routes[0].Path)\n\tr.NotZero(routes[0].HandlerName)\n\n\tr.Equal(\"GET\", routes[1].Method)\n\tr.Equal(\"/foo/{id}/\", routes[1].Path)\n\tr.NotZero(routes[1].HandlerName)\n\n\tf, ok := rh[\"fooPath\"]\n\tr.True(ok)\n\tx, err := f(map[string]interface{}{\n\t\t\"subdomain\": \"test\",\n\t})\n\tr.NoError(err)\n\tr.Equal(\"http://test.example.com/foo/\", string(x))\n\n\tf, ok = rh[\"fooIDPath\"]\n\tr.True(ok)\n\tx, err = f(map[string]interface{}{\n\t\t\"subdomain\": \"test\",\n\t\t\"id\":        1,\n\t})\n\tr.NoError(err)\n\tr.Equal(\"http://test.example.com/foo/1/\", string(x))\n}\n"
        },
        {
          "name": "routenamer.go",
          "type": "blob",
          "size": 1.552734375,
          "content": "package buffalo\n\nimport (\n\t\"strings\"\n\n\t\"github.com/gobuffalo/flect\"\n\t\"github.com/gobuffalo/flect/name\"\n)\n\n// RouteNamer is in charge of naming a route from the\n// path assigned, this name typically will be used if no\n// name is assined with .Name(...).\ntype RouteNamer interface {\n\t// NameRoute receives the path and returns the name\n\t// for the route.\n\tNameRoute(string) string\n}\n\n// BaseRouteNamer is the default route namer used by apps.\ntype baseRouteNamer struct{}\n\nfunc (drn baseRouteNamer) NameRoute(p string) string {\n\tif p == \"/\" || p == \"\" {\n\t\treturn \"root\"\n\t}\n\n\tresultParts := []string{}\n\tparts := strings.Split(p, \"/\")\n\n\tfor index, part := range parts {\n\n\t\toriginalPart := parts[index]\n\n\t\tvar previousPart string\n\t\tif index > 0 {\n\t\t\tpreviousPart = parts[index-1]\n\t\t}\n\n\t\tvar nextPart string\n\t\tif len(parts) > index+1 {\n\t\t\tnextPart = parts[index+1]\n\t\t}\n\n\t\tisIdentifierPart := strings.Contains(part, \"{\") && (strings.Contains(part, flect.Singularize(previousPart)))\n\t\tisSimplifiedID := part == `{id}`\n\n\t\tif isIdentifierPart || isSimplifiedID || part == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif strings.Contains(nextPart, \"{\") {\n\t\t\tpart = flect.Singularize(part)\n\t\t}\n\n\t\tif originalPart == \"new\" || originalPart == \"edit\" {\n\t\t\tresultParts = append([]string{part}, resultParts...)\n\t\t\tcontinue\n\t\t}\n\n\t\tif strings.Contains(previousPart, \"}\") {\n\t\t\tresultParts = append(resultParts, part)\n\t\t\tcontinue\n\t\t}\n\n\t\tresultParts = append(resultParts, part)\n\t}\n\n\tif len(resultParts) == 0 {\n\t\treturn \"unnamed\"\n\t}\n\n\tunderscore := strings.TrimSpace(strings.Join(resultParts, \"_\"))\n\treturn name.VarCase(underscore)\n}\n"
        },
        {
          "name": "router_test.go",
          "type": "blob",
          "size": 18.87890625,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"path\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/envy\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/gorilla/mux\"\n\t\"github.com/psanford/memfs\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc testApp() *App {\n\ta := New(Options{})\n\ta.Redirect(http.StatusMovedPermanently, \"/foo\", \"/bar\")\n\ta.GET(\"/bar\", func(c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"bar\"))\n\t})\n\n\trt := a.Group(\"/router/tests\")\n\n\th := func(c Context) error {\n\t\tx := c.Request().Method + \"|\"\n\t\tx += strings.TrimSuffix(c.Value(\"current_path\").(string), \"/\")\n\t\treturn c.Render(http.StatusOK, render.String(x))\n\t}\n\n\trt.GET(\"/\", h)\n\trt.POST(\"/\", h)\n\trt.PUT(\"/\", h)\n\trt.DELETE(\"/\", h)\n\trt.OPTIONS(\"/\", h)\n\trt.PATCH(\"/\", h)\n\n\ta.ErrorHandlers[http.StatusMethodNotAllowed] = func(status int, err error, c Context) error {\n\t\tres := c.Response()\n\t\tres.WriteHeader(status)\n\t\tres.Write([]byte(\"my custom 405\"))\n\t\treturn nil\n\t}\n\treturn a\n}\n\nfunc otherTestApp() *App {\n\ta := New(Options{})\n\tf := func(c Context) error {\n\t\treq := c.Request()\n\t\treturn c.Render(http.StatusOK, render.String(req.Method+\" - \"+req.URL.String()))\n\t}\n\ta.GET(\"/foo\", f)\n\ta.POST(\"/bar\", f)\n\ta.DELETE(\"/baz/baz\", f)\n\treturn a\n}\n\nfunc Test_MethodNotFoundError(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.GET(\"/bar\", func(c Context) error {\n\t\treturn c.Render(http.StatusOK, render.String(\"bar\"))\n\t})\n\ta.ErrorHandlers[http.StatusMethodNotAllowed] = func(status int, err error, c Context) error {\n\t\tres := c.Response()\n\t\tres.WriteHeader(status)\n\t\tres.Write([]byte(\"my custom 405\"))\n\t\treturn nil\n\t}\n\tw := httptest.New(a)\n\tres := w.HTML(\"/bar\").Post(nil)\n\tr.Equal(http.StatusMethodNotAllowed, res.Code)\n\tr.Contains(res.Body.String(), \"my custom 405\")\n}\n\nfunc Test_Mount_Buffalo(t *testing.T) {\n\tr := require.New(t)\n\ta := testApp()\n\ta.Mount(\"/admin\", otherTestApp())\n\n\ttable := map[string]string{\n\t\t\"/foo\":     \"GET\",\n\t\t\"/bar\":     \"POST\",\n\t\t\"/baz/baz\": \"DELETE\",\n\t}\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\tfor u, m := range table {\n\t\tp := fmt.Sprintf(\"%s/%s\", ts.URL, path.Join(\"admin\", u))\n\t\treq, err := http.NewRequest(m, p, nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, _ := io.ReadAll(res.Body)\n\t\tr.Equal(fmt.Sprintf(\"%s - %s/\", m, u), string(b))\n\t}\n}\n\nfunc Test_Mount_Buffalo_on_Group(t *testing.T) {\n\tr := require.New(t)\n\ta := testApp()\n\tg := a.Group(\"/users\")\n\tg.Mount(\"/admin\", otherTestApp())\n\n\ttable := map[string]string{\n\t\t\"/foo\":     \"GET\",\n\t\t\"/bar\":     \"POST\",\n\t\t\"/baz/baz\": \"DELETE\",\n\t}\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\tfor u, m := range table {\n\t\tp := fmt.Sprintf(\"%s/%s\", ts.URL, path.Join(\"users\", \"admin\", u))\n\t\treq, err := http.NewRequest(m, p, nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, _ := io.ReadAll(res.Body)\n\t\tr.Equal(fmt.Sprintf(\"%s - %s/\", m, u), string(b))\n\t}\n}\n\nfunc muxer() http.Handler {\n\tf := func(res http.ResponseWriter, req *http.Request) {\n\t\tfmt.Fprintf(res, \"%s - %s\", req.Method, req.URL.String())\n\t}\n\tmux := mux.NewRouter()\n\tmux.HandleFunc(\"/foo/\", f).Methods(\"GET\")\n\tmux.HandleFunc(\"/bar/\", f).Methods(\"POST\")\n\tmux.HandleFunc(\"/baz/baz/\", f).Methods(\"DELETE\")\n\treturn mux\n}\n\nfunc Test_Mount_Handler(t *testing.T) {\n\tr := require.New(t)\n\ta := testApp()\n\ta.Mount(\"/admin\", muxer())\n\n\ttable := map[string]string{\n\t\t\"/foo\":     \"GET\",\n\t\t\"/bar\":     \"POST\",\n\t\t\"/baz/baz\": \"DELETE\",\n\t}\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\tfor u, m := range table {\n\t\tp := fmt.Sprintf(\"%s/%s\", ts.URL, path.Join(\"admin\", u))\n\t\treq, err := http.NewRequest(m, p, nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, _ := io.ReadAll(res.Body)\n\t\tr.Equal(fmt.Sprintf(\"%s - %s/\", m, u), string(b))\n\t}\n}\n\nfunc Test_PreHandlers(t *testing.T) {\n\tr := require.New(t)\n\ta := testApp()\n\tbh := func(c Context) error {\n\t\treq := c.Request()\n\t\treturn c.Render(http.StatusOK, render.String(req.Method+\"-\"+req.URL.String()))\n\t}\n\ta.GET(\"/ph\", bh)\n\ta.POST(\"/ph\", bh)\n\tmh := func(res http.ResponseWriter, req *http.Request) {\n\t\tif req.Method == \"GET\" {\n\t\t\tres.WriteHeader(http.StatusTeapot)\n\t\t\tres.Write([]byte(\"boo\"))\n\t\t}\n\t}\n\ta.PreHandlers = append(a.PreHandlers, http.HandlerFunc(mh))\n\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\ttable := []struct {\n\t\tCode   int\n\t\tMethod string\n\t\tResult string\n\t}{\n\t\t{Code: http.StatusTeapot, Method: \"GET\", Result: \"boo\"},\n\t\t{Code: http.StatusOK, Method: \"POST\", Result: \"POST-/ph/\"},\n\t}\n\n\tfor _, v := range table {\n\t\treq, err := http.NewRequest(v.Method, ts.URL+\"/ph\", nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, err := io.ReadAll(res.Body)\n\t\tr.NoError(err)\n\t\tr.Equal(v.Code, res.StatusCode)\n\t\tr.Equal(v.Result, string(b))\n\t}\n}\n\nfunc Test_PreWares(t *testing.T) {\n\tr := require.New(t)\n\ta := testApp()\n\tbh := func(c Context) error {\n\t\treq := c.Request()\n\t\treturn c.Render(http.StatusOK, render.String(req.Method+\"-\"+req.URL.String()))\n\t}\n\ta.GET(\"/ph\", bh)\n\ta.POST(\"/ph\", bh)\n\n\tmh := func(h http.Handler) http.Handler {\n\t\treturn http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\t\tif req.Method == \"GET\" {\n\t\t\t\tres.WriteHeader(http.StatusTeapot)\n\t\t\t\tres.Write([]byte(\"boo\"))\n\t\t\t}\n\t\t})\n\t}\n\n\ta.PreWares = append(a.PreWares, mh)\n\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\ttable := []struct {\n\t\tCode   int\n\t\tMethod string\n\t\tResult string\n\t}{\n\t\t{Code: http.StatusTeapot, Method: \"GET\", Result: \"boo\"},\n\t\t{Code: http.StatusOK, Method: \"POST\", Result: \"POST-/ph/\"},\n\t}\n\n\tfor _, v := range table {\n\t\treq, err := http.NewRequest(v.Method, ts.URL+\"/ph\", nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, err := io.ReadAll(res.Body)\n\t\tr.NoError(err)\n\t\tr.Equal(v.Code, res.StatusCode)\n\t\tr.Equal(v.Result, string(b))\n\t}\n}\n\nfunc Test_Router(t *testing.T) {\n\tr := require.New(t)\n\n\ttable := []string{\n\t\t\"GET\",\n\t\t\"POST\",\n\t\t\"PUT\",\n\t\t\"DELETE\",\n\t\t\"OPTIONS\",\n\t\t\"PATCH\",\n\t}\n\n\tts := httptest.NewServer(testApp())\n\tdefer ts.Close()\n\n\tfor _, v := range table {\n\t\treq, err := http.NewRequest(v, fmt.Sprintf(\"%s/router/tests\", ts.URL), nil)\n\t\tr.NoError(err)\n\t\tres, err := http.DefaultClient.Do(req)\n\t\tr.NoError(err)\n\t\tb, _ := io.ReadAll(res.Body)\n\t\tr.Equal(fmt.Sprintf(\"%s|/router/tests\", v), string(b))\n\t}\n}\n\nfunc Test_Router_Group(t *testing.T) {\n\tr := require.New(t)\n\n\ta := testApp()\n\tg := a.Group(\"/api/v1\")\n\tg.GET(\"/users\", func(c Context) error {\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/api/v1/users\").Get()\n\tr.Equal(http.StatusCreated, res.Code)\n}\n\nfunc Test_Router_Group_on_Group(t *testing.T) {\n\tr := require.New(t)\n\n\ta := testApp()\n\tg := a.Group(\"/api/v1\")\n\tg.GET(\"/users\", func(c Context) error {\n\t\treturn c.Render(http.StatusCreated, nil)\n\t})\n\tf := g.Group(\"/foo\")\n\tf.GET(\"/bar\", func(c Context) error {\n\t\treturn c.Render(http.StatusTeapot, nil)\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/api/v1/foo/bar\").Get()\n\tr.Equal(http.StatusTeapot, res.Code)\n}\n\nfunc Test_Router_Group_Middleware(t *testing.T) {\n\tr := require.New(t)\n\n\ta := testApp()\n\ta.Use(func(h Handler) Handler { return h })\n\tr.Len(a.Middleware.stack, 4)\n\n\tg := a.Group(\"/api/v1\")\n\tr.Len(a.Middleware.stack, 4)\n\tr.Len(g.Middleware.stack, 4)\n\n\tg.Use(func(h Handler) Handler { return h })\n\tr.Len(a.Middleware.stack, 4)\n\tr.Len(g.Middleware.stack, 5)\n}\n\nfunc Test_Router_Redirect(t *testing.T) {\n\tr := require.New(t)\n\tw := httptest.New(testApp())\n\tres := w.HTML(\"/foo\").Get()\n\tr.Equal(http.StatusMovedPermanently, res.Code)\n\tr.Equal(\"/bar\", res.Location())\n}\n\nfunc Test_Router_ServeFiles(t *testing.T) {\n\tr := require.New(t)\n\n\trootFS := memfs.New()\n\trootFS.WriteFile(\"foo.png\", []byte(\"foo\"), 0644)\n\ta := New(Options{})\n\ta.ServeFiles(\"/assets\", http.FS(rootFS))\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/assets/foo.png\").Get()\n\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Equal(\"foo\", res.Body.String())\n\n\tr.NotEqual(res.Header().Get(\"ETag\"), \"\")\n\tr.Equal(res.Header().Get(\"Cache-Control\"), \"max-age=31536000\")\n\n\tenvy.Set(AssetsAgeVarName, \"3600\")\n\tw = httptest.New(a)\n\tres = w.HTML(\"/assets/foo.png\").Get()\n\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Equal(\"foo\", res.Body.String())\n\n\tr.NotEqual(res.Header().Get(\"ETag\"), \"\")\n\tr.Equal(res.Header().Get(\"Cache-Control\"), \"max-age=3600\")\n}\n\nfunc Test_Router_InvalidURL(t *testing.T) {\n\tr := require.New(t)\n\n\trootFS := memfs.New()\n\trootFS.WriteFile(\"foo.png\", []byte(\"foo\"), 0644)\n\ta := New(Options{})\n\ta.ServeFiles(\"/\", http.FS(rootFS))\n\n\tw := httptest.New(a)\n\ts := \"/%25%7dn2zq0%3cscript%3ealert(1)%3c\\\\/script%3evea7f\"\n\n\trequest, _ := http.NewRequest(\"GET\", s, nil)\n\tresponse := httptest.NewRecorder()\n\n\tw.ServeHTTP(response, request)\n\tr.Equal(http.StatusBadRequest, response.Code, \"(400) BadRequest response is expected\")\n}\n\ntype WebResource struct {\n\tBaseResource\n}\n\n// Edit default implementation. Returns a 404\nfunc (v WebResource) Edit(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\n// New default implementation. Returns a 404\nfunc (v WebResource) New(c Context) error {\n\treturn c.Error(http.StatusNotFound, fmt.Errorf(\"resource not implemented\"))\n}\n\nfunc Test_App_NamedRoutes(t *testing.T) {\n\n\ttype CarsResource struct {\n\t\tWebResource\n\t}\n\n\ttype ResourcesResource struct {\n\t\tWebResource\n\t}\n\n\tr := require.New(t)\n\ta := New(Options{})\n\n\tvar carsResource Resource = CarsResource{}\n\n\tvar resourcesResource Resource = ResourcesResource{}\n\n\trr := render.New(render.Options{\n\t\tHTMLLayout:  \"application.plush.html\",\n\t\tTemplatesFS: os.DirFS(\"../templates\"),\n\t\tHelpers:     map[string]interface{}{},\n\t})\n\n\tsampleHandler := func(c Context) error {\n\t\tc.Set(\"opts\", map[string]interface{}{})\n\t\treturn c.Render(http.StatusOK, rr.String(`\n\t\t\t1. <%= rootPath() %>\n\t\t\t2. <%= userPath({user_id: 1}) %>\n\t\t\t3. <%= myPeepsPath() %>\n\t\t\t5. <%= carPath({car_id: 1}) %>\n\t\t\t6. <%= newCarPath() %>\n\t\t\t7. <%= editCarPath({car_id: 1}) %>\n\t\t\t8. <%= editCarPath({car_id: 1, other: 12}) %>\n\t\t\t9. <%= rootPath({\"some\":\"variable\",\"other\": 12}) %>\n\t\t\t10. <%= rootPath() %>\n\t\t\t11. <%= rootPath({\"special/\":\"12=ss\"}) %>\n\t\t\t12. <%= resourcePath({resource_id: 1}) %>\n\t\t\t13. <%= editResourcePath({resource_id: 1}) %>\n\t\t\t14. <%= testPath() %>\n\t\t\t15. <%= testNamePath({name: \"myTest\"}) %>\n\t\t\t16. <%= paganoPath({id: 1}) %>\n\t\t`))\n\t}\n\n\ta.GET(\"/\", sampleHandler)\n\ta.GET(\"/users\", sampleHandler)\n\ta.GET(\"/users/{user_id}\", sampleHandler)\n\ta.GET(\"/peeps\", sampleHandler).Name(\"myPeeps\")\n\ta.Resource(\"/car\", carsResource)\n\ta.Resource(\"/resources\", resourcesResource)\n\ta.GET(\"/test\", sampleHandler)\n\ta.GET(\"/test/{name}\", sampleHandler)\n\ta.GET(\"/pagano/{id}\", sampleHandler)\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Contains(res.Body.String(), \"1. /\")\n\tr.Contains(res.Body.String(), \"2. /users/1\")\n\tr.Contains(res.Body.String(), \"3. /peeps\")\n\tr.Contains(res.Body.String(), \"5. /car/1\")\n\tr.Contains(res.Body.String(), \"6. /car/new\")\n\tr.Contains(res.Body.String(), \"7. /car/1/edit\")\n\tr.Contains(res.Body.String(), \"8. /car/1/edit/?other=12\")\n\tr.Contains(res.Body.String(), \"9. /?other=12&some=variable\")\n\tr.Contains(res.Body.String(), \"10. /\")\n\tr.Contains(res.Body.String(), \"11. /?special%2F=12%3Dss\")\n\tr.Contains(res.Body.String(), \"12. /resources/1\")\n\tr.Contains(res.Body.String(), \"13. /resources/1/edit\")\n\tr.Contains(res.Body.String(), \"14. /test\")\n\tr.Contains(res.Body.String(), \"15. /test/myTest\")\n\tr.Contains(res.Body.String(), \"16. /pagano/1\")\n}\n\nfunc Test_App_NamedRoutes_MissingParameter(t *testing.T) {\n\tr := require.New(t)\n\ta := New(Options{})\n\n\trr := render.New(render.Options{\n\t\tHTMLLayout:  \"application.plush.html\",\n\t\tTemplatesFS: os.DirFS(\"../templates\"),\n\t\tHelpers:     map[string]interface{}{},\n\t})\n\n\tsampleHandler := func(c Context) error {\n\t\tc.Set(\"opts\", map[string]interface{}{})\n\t\treturn c.Render(http.StatusOK, rr.String(`\n\t\t\t<%= userPath(opts) %>\n\t\t`))\n\t}\n\n\ta.GET(\"/users/{user_id}\", sampleHandler)\n\tw := httptest.New(a)\n\tres := w.HTML(\"/users/1\").Get()\n\n\tr.Equal(http.StatusInternalServerError, res.Code)\n\tr.Contains(res.Body.String(), \"missing parameters for /users/{user_id}\")\n}\n\nfunc Test_Resource(t *testing.T) {\n\tr := require.New(t)\n\n\ttype trs struct {\n\t\tMethod string\n\t\tPath   string\n\t\tResult string\n\t}\n\n\ttests := []trs{\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"\",\n\t\t\tResult: \"list\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/new\",\n\t\t\tResult: \"new\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/1\",\n\t\t\tResult: \"show 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/1/edit\",\n\t\t\tResult: \"edit 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"POST\",\n\t\t\tPath:   \"\",\n\t\t\tResult: \"create\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"PUT\",\n\t\t\tPath:   \"/1\",\n\t\t\tResult: \"update 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"DELETE\",\n\t\t\tPath:   \"/1\",\n\t\t\tResult: \"destroy 1\",\n\t\t},\n\t}\n\n\ta := New(Options{})\n\ta.Resource(\"/users\", &userResource{})\n\ta.Resource(\"/api/v1/users\", &userResource{})\n\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\tc := http.Client{}\n\tfor _, path := range []string{\"/users\", \"/api/v1/users\"} {\n\t\tfor _, test := range tests {\n\t\t\tu := ts.URL + path + test.Path\n\t\t\treq, err := http.NewRequest(test.Method, u, nil)\n\t\t\tr.NoError(err)\n\t\t\tres, err := c.Do(req)\n\t\t\tr.NoError(err)\n\t\t\tb, err := io.ReadAll(res.Body)\n\t\t\tr.NoError(err)\n\t\t\tr.Equal(test.Result, string(b))\n\t\t}\n\t}\n\n}\n\ntype paramKeyResource struct {\n\t*userResource\n}\n\nfunc (paramKeyResource) ParamKey() string {\n\treturn \"bazKey\"\n}\n\nfunc Test_Resource_ParamKey(t *testing.T) {\n\tr := require.New(t)\n\tfr := &paramKeyResource{&userResource{}}\n\ta := New(Options{})\n\ta.Resource(\"/foo\", fr)\n\trt := a.Routes()\n\tpaths := []string{}\n\tfor _, rr := range rt {\n\t\tpaths = append(paths, rr.Path)\n\t}\n\tr.Contains(paths, \"/foo/{bazKey}/edit/\")\n}\n\ntype mwResource struct {\n\tWebResource\n}\n\nfunc (mwResource) Use() []MiddlewareFunc {\n\tvar mw []MiddlewareFunc\n\n\tmw = append(mw, func(next Handler) Handler {\n\t\treturn func(c Context) error {\n\t\t\tif c.Param(\"good\") == \"\" {\n\t\t\t\treturn fmt.Errorf(\"not good\")\n\t\t\t}\n\t\t\treturn next(c)\n\t\t}\n\t})\n\n\treturn mw\n}\n\nfunc (m mwResource) List(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"southern harmony and the musical companion\"))\n}\n\nfunc Test_Resource_MW(t *testing.T) {\n\tr := require.New(t)\n\tfr := mwResource{}\n\ta := New(Options{})\n\ta.Resource(\"/foo\", fr)\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/foo?good=true\").Get()\n\tr.Equal(http.StatusOK, res.Code)\n\tr.Contains(res.Body.String(), \"southern harmony\")\n\n\tres = w.HTML(\"/foo\").Get()\n\tr.Equal(http.StatusInternalServerError, res.Code)\n\n\tr.NotContains(res.Body.String(), \"southern harmony\")\n}\n\ntype userResource struct{}\n\nfunc (u *userResource) List(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"list\"))\n}\n\nfunc (u *userResource) Show(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(`show <%=params[\"user_id\"] %>`))\n}\n\nfunc (u *userResource) New(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"new\"))\n}\n\nfunc (u *userResource) Create(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(\"create\"))\n}\n\nfunc (u *userResource) Edit(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(`edit <%=params[\"user_id\"] %>`))\n}\n\nfunc (u *userResource) Update(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(`update <%=params[\"user_id\"] %>`))\n}\n\nfunc (u *userResource) Destroy(c Context) error {\n\treturn c.Render(http.StatusOK, render.String(`destroy <%=params[\"user_id\"] %>`))\n}\n\nfunc Test_ResourceOnResource(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\tur := a.Resource(\"/users\", &userResource{})\n\tur.Resource(\"/people\", &userResource{})\n\n\tts := httptest.NewServer(a)\n\tdefer ts.Close()\n\n\ttype trs struct {\n\t\tMethod string\n\t\tPath   string\n\t\tResult string\n\t}\n\ttests := []trs{\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/people\",\n\t\t\tResult: \"list\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/people/new\",\n\t\t\tResult: \"new\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/people/1\",\n\t\t\tResult: \"show 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"GET\",\n\t\t\tPath:   \"/people/1/edit\",\n\t\t\tResult: \"edit 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"POST\",\n\t\t\tPath:   \"/people\",\n\t\t\tResult: \"create\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"PUT\",\n\t\t\tPath:   \"/people/1\",\n\t\t\tResult: \"update 1\",\n\t\t},\n\t\t{\n\t\t\tMethod: \"DELETE\",\n\t\t\tPath:   \"/people/1\",\n\t\t\tResult: \"destroy 1\",\n\t\t},\n\t}\n\tc := http.Client{}\n\tfor _, test := range tests {\n\t\tu := ts.URL + path.Join(\"/users/42\", test.Path)\n\t\treq, err := http.NewRequest(test.Method, u, nil)\n\t\tr.NoError(err)\n\t\tres, err := c.Do(req)\n\t\tr.NoError(err)\n\t\tb, err := io.ReadAll(res.Body)\n\t\tr.NoError(err)\n\t\tr.Equal(test.Result, string(b))\n\t}\n\n}\n\nfunc Test_buildRouteName(t *testing.T) {\n\tr := require.New(t)\n\tcases := map[string]string{\n\t\t\"/\":                                    \"root\",\n\t\t\"/users\":                               \"users\",\n\t\t\"/users/new\":                           \"newUsers\",\n\t\t\"/users/{user_id}\":                     \"user\",\n\t\t\"/users/{user_id}/children\":            \"userChildren\",\n\t\t\"/users/{user_id}/children/{child_id}\": \"userChild\",\n\t\t\"/users/{user_id}/children/new\":        \"newUserChildren\",\n\t\t\"/users/{user_id}/children/{child_id}/build\": \"userChildBuild\",\n\t\t\"/admin/planes\":                         \"adminPlanes\",\n\t\t\"/admin/planes/{plane_id}\":              \"adminPlane\",\n\t\t\"/admin/planes/{plane_id}/edit\":         \"editAdminPlane\",\n\t\t\"/test\":                                 \"test\",\n\t\t\"/tests/{name}\":                         \"testName\",\n\t\t\"/tests/{name_id}/cases/{case_id}\":      \"testNameIdCase\",\n\t\t\"/tests/{name_id}/cases/{case_id}/edit\": \"editTestNameIdCase\",\n\t}\n\n\ta := New(Options{})\n\n\tfor input, result := range cases {\n\t\tfResult := a.RouteNamer.NameRoute(input)\n\t\tr.Equal(result, fResult, input)\n\t}\n\n\ta = New(Options{Prefix: \"/test\"})\n\tcases = map[string]string{\n\t\t\"/test\":       \"test\",\n\t\t\"/test/users\": \"testUsers\",\n\t}\n\n\tfor input, result := range cases {\n\t\tfResult := a.RouteNamer.NameRoute(input)\n\t\tr.Equal(result, fResult, input)\n\t}\n}\n\nfunc Test_CatchAll_Route(t *testing.T) {\n\tr := require.New(t)\n\trr := render.New(render.Options{})\n\n\ta := New(Options{})\n\ta.GET(\"/{name:.+}\", func(c Context) error {\n\t\tname := c.Param(\"name\")\n\t\treturn c.Render(http.StatusOK, rr.String(name))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/john\").Get()\n\n\tr.Contains(res.Body.String(), \"john\")\n}\n\nfunc Test_Router_Matches_Trailing_Slash(t *testing.T) {\n\ttable := []struct {\n\t\tmapped   string\n\t\tbrowser  string\n\t\texpected string\n\t}{\n\t\t{\"/foo\", \"/foo\", \"/foo/\"},\n\t\t{\"/foo\", \"/foo/\", \"/foo/\"},\n\t\t{\"/foo/\", \"/foo\", \"/foo/\"},\n\t\t{\"/foo/\", \"/foo/\", \"/foo/\"},\n\t\t{\"/index.html\", \"/index.html\", \"/index.html/\"},\n\t\t{\"/foo.gif\", \"/foo.gif\", \"/foo.gif/\"},\n\t\t{\"/{img}\", \"/foo.png\", \"/foo.png/\"},\n\t}\n\n\tfor _, tt := range table {\n\t\tt.Run(tt.mapped+\"|\"+tt.browser, func(st *testing.T) {\n\t\t\tr := require.New(st)\n\n\t\t\tapp := New(Options{\n\t\t\t\tPreWares: []PreWare{\n\t\t\t\t\tfunc(h http.Handler) http.Handler {\n\t\t\t\t\t\tvar f http.HandlerFunc = func(res http.ResponseWriter, req *http.Request) {\n\t\t\t\t\t\t\tpath := req.URL.Path\n\t\t\t\t\t\t\treq.URL.Path = strings.TrimSuffix(path, \"/\")\n\t\t\t\t\t\t\tr.False(strings.HasSuffix(req.URL.Path, \"/\"))\n\t\t\t\t\t\t\th.ServeHTTP(res, req)\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn f\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t\tapp.GET(tt.mapped, func(c Context) error {\n\t\t\t\treturn c.Render(http.StatusOK, render.String(c.Request().URL.Path))\n\t\t\t})\n\n\t\t\tw := httptest.New(app)\n\t\t\tres := w.HTML(tt.browser).Get()\n\n\t\t\tr.Equal(http.StatusOK, res.Code)\n\t\t\tr.Equal(tt.expected, res.Body.String())\n\t\t})\n\t}\n}\n"
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "server.go",
          "type": "blob",
          "size": 4.404296875,
          "content": "package buffalo\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"strings\"\n\t\"sync\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/gobuffalo/buffalo/servers\"\n\t\"github.com/gobuffalo/events\"\n\t\"github.com/gobuffalo/refresh/refresh/web\"\n)\n\n// Serve the application at the specified address/port and listen for OS\n// interrupt and kill signals and will attempt to stop the application\n// gracefully. This will also start the Worker process, unless WorkerOff is enabled.\nfunc (a *App) Serve(srvs ...servers.Server) error {\n\tvar wg sync.WaitGroup\n\n\ta.Logger.Debug(\"starting application\")\n\n\tpayload := events.Payload{\n\t\t\"app\": a,\n\t}\n\tif err := events.EmitPayload(EvtAppStart, payload); err != nil {\n\t\t// just to make sure if events work properly?\n\t\ta.Logger.Error(\"unable to emit event. something went wrong internally\")\n\t\treturn err\n\t}\n\n\tif len(srvs) == 0 {\n\t\tif strings.HasPrefix(a.Options.Addr, \"unix:\") {\n\t\t\ttcp, err := servers.UnixSocket(a.Options.Addr[5:])\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tsrvs = append(srvs, tcp)\n\t\t} else {\n\t\t\tsrvs = append(srvs, servers.New())\n\t\t}\n\t}\n\n\tctx, cancel := signal.NotifyContext(a.Context, syscall.SIGTERM, os.Interrupt)\n\tdefer cancel()\n\n\twg.Add(1)\n\tgo func() {\n\t\t// gracefully shut down the application when the context is cancelled\n\t\tdefer wg.Done()\n\t\t// channel waiter should not be called any other place\n\t\t<-ctx.Done()\n\n\t\ta.Logger.Info(\"shutting down application\")\n\n\t\t// shutting down listeners first, to make sure no more new request\n\t\ta.Logger.Info(\"shutting down servers\")\n\t\tfor _, s := range srvs {\n\t\t\ttimeout := time.Duration(a.Options.TimeoutSecondShutdown) * time.Second\n\t\t\tctx, cfn := context.WithTimeout(context.Background(), timeout)\n\t\t\tdefer cfn()\n\t\t\tevents.EmitPayload(EvtServerStop, payload)\n\t\t\tif err := s.Shutdown(ctx); err != nil {\n\t\t\t\tevents.EmitError(EvtServerStopErr, err, payload)\n\t\t\t\ta.Logger.Error(\"shutting down server: \", err)\n\t\t\t}\n\t\t\tcfn()\n\t\t}\n\n\t\tif !a.WorkerOff {\n\t\t\ta.Logger.Info(\"shutting down worker\")\n\t\t\tevents.EmitPayload(EvtWorkerStop, payload)\n\t\t\tif err := a.Worker.Stop(); err != nil {\n\t\t\t\tevents.EmitError(EvtWorkerStopErr, err, payload)\n\t\t\t\ta.Logger.Error(\"error while shutting down worker: \", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\t// if configured to do so, start the workers\n\tif !a.WorkerOff {\n\t\twg.Add(1)\n\t\tgo func() {\n\t\t\tdefer wg.Done()\n\t\t\tevents.EmitPayload(EvtWorkerStart, payload)\n\t\t\tif err := a.Worker.Start(ctx); err != nil {\n\t\t\t\tevents.EmitError(EvtWorkerStartErr, err, payload)\n\t\t\t\ta.Stop(err)\n\t\t\t}\n\t\t}()\n\t}\n\n\tfor _, s := range srvs {\n\t\ts.SetAddr(a.Addr)\n\t\ta.Logger.Infof(\"starting %s\", s)\n\t\twg.Add(1)\n\t\tgo func(s servers.Server) {\n\t\t\tdefer wg.Done()\n\t\t\tevents.EmitPayload(EvtServerStart, payload)\n\t\t\t// s.Start always returns non-nil error\n\t\t\ta.Stop(s.Start(ctx, a))\n\t\t}(s)\n\t}\n\n\twg.Wait()\n\ta.Logger.Info(\"shutdown completed\")\n\n\terr := ctx.Err()\n\tif errors.Is(err, context.Canceled) {\n\t\treturn nil\n\t}\n\treturn err\n}\n\n// Stop the application and attempt to gracefully shutdown\nfunc (a *App) Stop(err error) error {\n\tevents.EmitError(EvtAppStop, err, events.Payload{\"app\": a})\n\n\tce := a.Context.Err()\n\tif ce != nil {\n\t\ta.Logger.Warn(\"application context has already been canceled: \", ce)\n\t\treturn errors.New(\"application has already been canceled\")\n\t}\n\n\ta.Logger.Warn(\"stopping application: \", err)\n\ta.cancel()\n\treturn nil\n}\n\n// ServeHTTP implements http.Handler\nfunc (a *App) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tws := &Response{\n\t\tResponseWriter: w,\n\t}\n\tif a.MethodOverride != nil {\n\t\ta.MethodOverride(w, r)\n\t}\n\tif ok := a.processPreHandlers(ws, r); !ok {\n\t\treturn\n\t}\n\n\tr.URL.Path = a.normalizePath(r.URL.Path)\n\n\tvar h http.Handler = a.router\n\tif a.Env == \"development\" {\n\t\th = web.ErrorChecker(h)\n\t}\n\th.ServeHTTP(ws, r)\n}\n\nfunc (a *App) processPreHandlers(res http.ResponseWriter, req *http.Request) bool {\n\tsh := func(h http.Handler) bool {\n\t\th.ServeHTTP(res, req)\n\t\tif br, ok := res.(*Response); ok {\n\t\t\tif br.Status > 0 || br.Size > 0 {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tfor _, ph := range a.PreHandlers {\n\t\tif ok := sh(ph); !ok {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tlast := http.Handler(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {}))\n\tfor _, ph := range a.PreWares {\n\t\tlast = ph(last)\n\t\tif ok := sh(last); !ok {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (a *App) normalizePath(path string) string {\n\tif strings.HasSuffix(path, \"/\") {\n\t\treturn path\n\t}\n\tfor _, p := range a.filepaths {\n\t\tif p == \"/\" {\n\t\t\tcontinue\n\t\t}\n\t\tif strings.HasPrefix(path, p) {\n\t\t\treturn path\n\t\t}\n\t}\n\treturn path + \"/\"\n}\n"
        },
        {
          "name": "server_test.go",
          "type": "blob",
          "size": 3.9443359375,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"sync\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/buffalo/worker\"\n\t\"github.com/stretchr/testify/require\"\n)\n\n// All tests in this file requires certain amount of waiting and they are\n// timing sensitive. Adjust this timing values if they are failing due to\n// timing issue.\nconst (\n\twaitStart   = 2\n\twaitRun     = 2\n\tconsumerRun = 8\n)\n\n// startApp starts given buffalo app and check its exit status.\n// The go routine emulates a buffalo app process.\nfunc startApp(app *App, wg *sync.WaitGroup, r *require.Assertions) {\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\terr := app.Serve()\n\t\tr.NoError(err)\n\t}()\n\t// wait until the server started.\n\t// could be improved with connection test but that's too much...\n\ttime.Sleep(waitStart * time.Second)\n}\n\nfunc Test_Server_Simple(t *testing.T) {\n\t// This testcase explains the minimum/basic workflow of buffalo app.\n\t// Setup and execute the app, wait until startup, then stop it.\n\t// The other testcases use this structure with additional actions.\n\tr := require.New(t)\n\tvar wg sync.WaitGroup\n\n\t// Setup a new buffalo.App to be used as a testing buffalo app.\n\tapp := New(Options{})\n\n\tstartApp(app, &wg, r) // starts buffalo app routine.\n\n\tapp.cancel()\n\twg.Wait()\n}\n\nvar handlerDone = false\n\n// timeConsumer consumes about 10 minutes for processing its request\nfunc timeConsumer(c Context) error {\n\tfor i := 0; i < consumerRun; i++ {\n\t\tfmt.Println(\"#\")\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\thandlerDone = true\n\treturn c.Render(http.StatusOK, render.String(\"Hey!\"))\n}\n\nfunc Test_Server_GracefulShutdownOngoingRequest(t *testing.T) {\n\t// This test case explain the minimum/basic workflow of buffalo app.\n\tr := require.New(t)\n\tvar wg sync.WaitGroup\n\n\t// Setup a new buffalo.App with a simple time consuming handler.\n\tapp := New(Options{})\n\tapp.GET(\"/\", timeConsumer)\n\n\tstartApp(app, &wg, r) // starts buffalo app routine.\n\n\tfirstQuery := false\n\tsecondQuery := false\n\t// This routine is the 1st client that GETs before Stop it\n\t// The result should be successful even though the server shutting down.\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tresp, err := http.Get(\"http://127.0.0.1:3000\")\n\t\tr.NoError(err)\n\t\tdefer resp.Body.Close()\n\t\tr.Equal(http.StatusOK, resp.StatusCode)\n\t\tfmt.Println(\"the first query should be OK:\", resp.Status)\n\t\tfirstQuery = true\n\t}()\n\t// make sure the request sent\n\ttime.Sleep(waitRun * time.Second)\n\n\tapp.cancel()\n\ttime.Sleep(1 * time.Second) // make sure the server started shutdown.\n\n\t// This routine is the 2nd client that GETs after Stop it\n\t// The result should be connection refused even though app is still on.\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, err := http.Get(\"http://127.0.0.1:3000\")\n\t\tr.Contains(err.Error(), \"refused\")\n\t\tfmt.Println(\"the second query should be refused:\", err)\n\t\tsecondQuery = true\n\t}()\n\n\twg.Wait()\n\tr.Equal(true, handlerDone)\n\tr.Equal(true, firstQuery)\n\tr.Equal(true, secondQuery)\n}\n\nvar timerDone = false\n\nfunc timerWorker(args worker.Args) error {\n\tfor i := 0; i < consumerRun; i++ {\n\t\tfmt.Println(\"%\")\n\t\ttime.Sleep(1 * time.Second)\n\t}\n\ttimerDone = true\n\treturn nil\n}\n\nfunc Test_Server_GracefulShutdownOngoingWorker(t *testing.T) {\n\t// This test case explain the minimum/basic workflow of buffalo app.\n\tr := require.New(t)\n\tvar wg sync.WaitGroup\n\n\t// Setup a new buffalo.App with a simple time consuming handler.\n\tapp := New(Options{})\n\tapp.Worker.Register(\"timer\", timerWorker)\n\tapp.Worker.PerformIn(worker.Job{\n\t\tHandler: \"timer\",\n\t}, 1*time.Second)\n\n\tstartApp(app, &wg, r) // starts buffalo app routine.\n\n\ttime.Sleep(1 * time.Second) // make sure just 1 second\n\n\tapp.cancel()\n\ttime.Sleep(1 * time.Second) // make sure the server started shutdown.\n\n\t// This routine is the 2nd client that GETs after Stop it\n\t// The result should be connection refused even though app is still on.\n\twg.Add(1)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\t_, err := http.Get(\"http://127.0.0.1:3000\")\n\t\tr.Contains(err.Error(), \"refused\")\n\t}()\n\n\twg.Wait()\n\tr.Equal(true, timerDone)\n}\n"
        },
        {
          "name": "servers",
          "type": "tree",
          "content": null
        },
        {
          "name": "session.go",
          "type": "blob",
          "size": 1.4501953125,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/gorilla/sessions\"\n)\n\n// Session wraps the \"github.com/gorilla/sessions\" API\n// in something a little cleaner and a bit more useable.\ntype Session struct {\n\tSession *sessions.Session\n\treq     *http.Request\n\tres     http.ResponseWriter\n}\n\n// Save the current session.\nfunc (s *Session) Save() error {\n\treturn s.Session.Save(s.req, s.res)\n}\n\n// Get a value from the current session.\nfunc (s *Session) Get(name interface{}) interface{} {\n\treturn s.Session.Values[name]\n}\n\n// GetOnce gets a value from the current session and then deletes it.\nfunc (s *Session) GetOnce(name interface{}) interface{} {\n\tif x, ok := s.Session.Values[name]; ok {\n\t\ts.Delete(name)\n\t\treturn x\n\t}\n\treturn nil\n}\n\n// Set a value onto the current session. If a value with that name\n// already exists it will be overridden with the new value.\nfunc (s *Session) Set(name, value interface{}) {\n\ts.Session.Values[name] = value\n}\n\n// Delete a value from the current session.\nfunc (s *Session) Delete(name interface{}) {\n\tdelete(s.Session.Values, name)\n}\n\n// Clear the current session\nfunc (s *Session) Clear() {\n\tfor k := range s.Session.Values {\n\t\ts.Delete(k)\n\t}\n}\n\n// Get a session using a request and response.\nfunc (a *App) getSession(r *http.Request, w http.ResponseWriter) *Session {\n\tif a.root != nil {\n\t\treturn a.root.getSession(r, w)\n\t}\n\tsession, _ := a.SessionStore.Get(r, a.SessionName)\n\treturn &Session{\n\t\tSession: session,\n\t\treq:     r,\n\t\tres:     w,\n\t}\n}\n"
        },
        {
          "name": "session_test.go",
          "type": "blob",
          "size": 1.470703125,
          "content": "package buffalo\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_Session_SingleCookie(t *testing.T) {\n\tr := require.New(t)\n\n\tsessionName := \"_test_session\"\n\ta := New(Options{SessionName: sessionName})\n\trr := render.New(render.Options{})\n\n\ta.GET(\"/\", func(c Context) error {\n\t\treturn c.Render(http.StatusCreated, rr.String(\"\"))\n\t})\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/\").Get()\n\n\tvar sessionCookies []string\n\tfor _, c := range res.Header().Values(\"Set-Cookie\") {\n\t\tif strings.HasPrefix(c, sessionName) {\n\t\t\tsessionCookies = append(sessionCookies, c)\n\t\t}\n\t}\n\n\tr.Equal(1, len(sessionCookies))\n}\n\nfunc Test_Session_CustomValue(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\trr := render.New(render.Options{})\n\n\t// Root path sets a custom session value\n\ta.GET(\"/\", func(c Context) error {\n\t\tc.Session().Set(\"example\", \"test\")\n\t\treturn c.Render(http.StatusCreated, rr.String(\"\"))\n\t})\n\t// /session path prints custom session value as response\n\ta.GET(\"/session\", func(c Context) error {\n\t\tsessionValue := c.Session().Get(\"example\")\n\t\treturn c.Render(http.StatusCreated, rr.String(fmt.Sprintf(\"%s\", sessionValue)))\n\t})\n\n\tw := httptest.New(a)\n\t_ = w.HTML(\"/\").Get()\n\n\t// Create second request that should contain the cookie from the first response\n\treqGetSession := w.HTML(\"/session\")\n\tresGetSession := reqGetSession.Get()\n\n\tr.Equal(resGetSession.Body.String(), \"test\")\n}\n"
        },
        {
          "name": "worker",
          "type": "tree",
          "content": null
        },
        {
          "name": "wrappers.go",
          "type": "blob",
          "size": 2.490234375,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"net/url\"\n\t\"sync\"\n\n\t\"github.com/gobuffalo/buffalo/internal/httpx\"\n\t\"github.com/gorilla/mux\"\n)\n\n// WrapHandler wraps a standard http.Handler and transforms it\n// into a buffalo.Handler.\nfunc WrapHandler(h http.Handler) Handler {\n\treturn func(c Context) error {\n\t\th.ServeHTTP(c.Response(), c.Request())\n\t\treturn nil\n\t}\n}\n\n// WrapHandlerFunc wraps a standard http.HandlerFunc and\n// transforms it into a buffalo.Handler.\nfunc WrapHandlerFunc(h http.HandlerFunc) Handler {\n\treturn WrapHandler(h)\n}\n\n// WrapBuffaloHandler wraps a buffalo.Handler to a standard http.Handler\n//\n// NOTE: A buffalo Handler expects a buffalo Context. WrapBuffaloHandler uses\n// the same logic as DefaultContext where possible, but some functionality\n// (e.g. sessions and logging) WILL NOT work with this unwrap function. If\n// those features are needed a custom UnwrapHandlerFunc needs to be\n// implemented that provides a Context implementing those features.\nfunc WrapBuffaloHandler(h Handler) http.Handler {\n\treturn WrapBuffaloHandlerFunc(h)\n}\n\n// WrapBuffaloHandlerFunc wraps a buffalo.Handler to a standard http.HandlerFunc\n//\n// NOTE: A buffalo Handler expects a buffalo Context. WrapBuffaloHandlerFunc uses\n// the same logic as DefaultContext where possible, but some functionality\n// (e.g. sessions and logging) WILL NOT work with this unwrap function. If\n// those features are needed a custom WrapBuffaloHandlerFunc needs to be\n// implemented that provides a Context implementing those features.\nfunc WrapBuffaloHandlerFunc(h Handler) http.HandlerFunc {\n\treturn func(res http.ResponseWriter, req *http.Request) {\n\t\tif ws, ok := res.(*Response); ok {\n\t\t\tres = ws\n\t\t}\n\n\t\t// Parse URL Params\n\t\tparams := url.Values{}\n\t\tvars := mux.Vars(req)\n\t\tfor k, v := range vars {\n\t\t\tparams.Add(k, v)\n\t\t}\n\n\t\t// Parse URL Query String Params\n\t\t// For POST, PUT, and PATCH requests, it also parse the request body as a form.\n\t\t// Request body parameters take precedence over URL query string values in params\n\t\tif err := req.ParseForm(); err == nil {\n\t\t\tfor k, v := range req.Form {\n\t\t\t\tfor _, vv := range v {\n\t\t\t\t\tparams.Add(k, vv)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tct := httpx.ContentType(req)\n\n\t\tdata := &sync.Map{}\n\t\tdata.Store(\"current_path\", req.URL.Path)\n\t\tdata.Store(\"contentType\", ct)\n\t\tdata.Store(\"method\", req.Method)\n\n\t\tc := &DefaultContext{\n\t\t\tContext:     req.Context(),\n\t\t\tcontentType: ct,\n\t\t\tresponse:    res,\n\t\t\trequest:     req,\n\t\t\tparams:      params,\n\t\t\tflash:       &Flash{data: map[string][]string{}},\n\t\t\tdata:        data,\n\t\t}\n\t\th(c)\n\t}\n}\n"
        },
        {
          "name": "wrappers_test.go",
          "type": "blob",
          "size": 2.443359375,
          "content": "package buffalo\n\nimport (\n\t\"net/http\"\n\t\"testing\"\n\n\t\"github.com/gobuffalo/buffalo/render\"\n\t\"github.com/gobuffalo/httptest\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc Test_WrapHandlerFunc(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.GET(\"/foo\", WrapHandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Write([]byte(\"hello\"))\n\t}))\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/foo\").Get()\n\n\tr.Equal(\"hello\", res.Body.String())\n}\n\nfunc Test_WrapHandler(t *testing.T) {\n\tr := require.New(t)\n\n\ta := New(Options{})\n\ta.GET(\"/foo\", WrapHandler(http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {\n\t\tres.Write([]byte(\"hello\"))\n\t})))\n\n\tw := httptest.New(a)\n\tres := w.HTML(\"/foo\").Get()\n\n\tr.Equal(\"hello\", res.Body.String())\n}\n\nfunc Test_WrapBuffaloHandler(t *testing.T) {\n\tr := require.New(t)\n\n\ttt := []struct {\n\t\tverb   string\n\t\tpath   string\n\t\tstatus int\n\t}{\n\t\t{\"GET\", \"/\", 200},\n\t\t{\"GET\", \"/foo\", 201},\n\t\t{\"POST\", \"/\", 300},\n\t\t{\"POST\", \"/foo\", 400},\n\t}\n\tfor _, x := range tt {\n\t\tbf := func(c Context) error {\n\t\t\treq := c.Request()\n\t\t\treturn c.Render(x.status, render.String(req.Method+req.URL.Path))\n\t\t}\n\n\t\th := WrapBuffaloHandler(bf)\n\t\tr.NotNil(h)\n\n\t\treq := httptest.NewRequest(x.verb, x.path, nil)\n\t\tres := httptest.NewRecorder()\n\n\t\th.ServeHTTP(res, req)\n\n\t\tr.Equal(x.status, res.Code)\n\t\tr.Contains(res.Body.String(), x.verb+x.path)\n\t}\n}\n\nfunc Test_WrapBuffaloHandlerFunc(t *testing.T) {\n\tr := require.New(t)\n\n\ttt := []struct {\n\t\tverb   string\n\t\tpath   string\n\t\tstatus int\n\t}{\n\t\t{\"GET\", \"/\", 200},\n\t\t{\"GET\", \"/foo\", 201},\n\t\t{\"POST\", \"/\", 300},\n\t\t{\"POST\", \"/foo\", 400},\n\t}\n\tfor _, x := range tt {\n\t\tbf := func(c Context) error {\n\t\t\treq := c.Request()\n\t\t\treturn c.Render(x.status, render.String(req.Method+req.URL.Path))\n\t\t}\n\n\t\th := WrapBuffaloHandlerFunc(bf)\n\t\tr.NotNil(h)\n\n\t\treq := httptest.NewRequest(x.verb, x.path, nil)\n\t\tres := httptest.NewRecorder()\n\n\t\th(res, req)\n\n\t\tr.Equal(x.status, res.Code)\n\t\tr.Contains(res.Body.String(), x.verb+x.path)\n\t}\n}\n\nfunc Benchmark_WrapBuffaloHandler(b *testing.B) {\n\tr := require.New(b)\n\n\tstatus := http.StatusOK\n\n\tbf := func(c Context) error {\n\t\treturn c.Render(status, render.String(http.StatusText(status)))\n\t}\n\n\treq := httptest.NewRequest(http.MethodGet, \"/foo\", nil)\n\tres := httptest.NewRecorder()\n\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\n\t\th := WrapBuffaloHandler(bf)\n\t\tr.NotNil(h)\n\n\t\th.ServeHTTP(res, req)\n\n\t\tr.Equal(status, res.Code)\n\t\tr.Contains(res.Body.String(), http.StatusText(status))\n\t}\n\tb.StopTimer()\n}\n"
        }
      ]
    }
  ]
}