{
  "metadata": {
    "timestamp": 1736567756227,
    "page": 340,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "containernetworking/cni",
      "stars": 5622,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0390625,
          "content": "# Don't rewrite line endings\n*.go -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.05078125,
          "content": ".idea/\n*.sw[ponm]\n.vagrant\nrelease-*\ncnitool/cnitool"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.4375,
          "content": "linters:\n  enable:\n    - contextcheck\n    - errcheck\n    - errorlint\n    - gci\n    - ginkgolinter\n    - gocritic\n    - gofumpt\n    - govet\n    - ineffassign\n    - misspell\n    - nolintlint\n    - nonamedreturns\n    - predeclared\n    - staticcheck\n    - typecheck\n    - unconvert\n    - unused\n    - whitespace\n\nlinters-settings:\n  gci:\n    sections:\n      - standard\n      - default\n      - prefix(github.com/containernetworking)\n\nrun:\n  timeout: 5m\n"
        },
        {
          "name": ".yamllint.yaml",
          "type": "blob",
          "size": 0.1591796875,
          "content": "---\nextends: default\n\nrules:\n  document-start: disable\n  line-length: disable\n  truthy:\n    ignore: |\n      .github/workflows/*.yml\n      .github/workflows/*.yaml\n"
        },
        {
          "name": "CODE-OF-CONDUCT.md",
          "type": "blob",
          "size": 0.130859375,
          "content": "# Community Code of Conduct\n\nCNI follows the [CNCF Code of Conduct](https://github.com/cncf/foundation/blob/main/code-of-conduct.md).\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.5849609375,
          "content": "# How to Contribute\n\nCNI is [Apache 2.0 licensed](LICENSE) and accepts contributions via GitHub\npull requests. This document outlines some of the conventions on development\nworkflow, commit message formatting, contact points and other resources to make\nit easier to get your contribution accepted.\n\nWe gratefully welcome improvements to documentation as well as to code.\n\n## Certificate of Origin\n\nBy contributing to this project you agree to the Developer Certificate of\nOrigin (DCO). This document was created by the Linux Kernel community and is a\nsimple statement that you, as a contributor, have the legal right to make the\ncontribution. See the [DCO](DCO) file for details.\n\n## Email and Chat\n\nThe project uses the cni-dev email list, IRC chat, and Slack:\n- Email: [cni-dev](https://groups.google.com/forum/#!forum/cni-dev)\n- IRC: #[containernetworking](irc://irc.freenode.net:6667/#containernetworking) channel on [freenode.net](https://freenode.net/)\n- Slack: #cni on the [CNCF slack](https://slack.cncf.io/).  NOTE: the previous CNI Slack (containernetworking.slack.com) has been sunsetted.\n\nPlease avoid emailing maintainers found in the MAINTAINERS file directly. They\nare very busy and read the mailing lists.\n\n## Getting Started\n\n- Fork the repository on GitHub\n- Read the [README](README.md) for build and test instructions\n- Play with the project, submit bugs, submit pull requests!\n\n## Contribution workflow\n\nThis is a rough outline of how to prepare a contribution:\n\n- Create a topic branch from where you want to base your work (usually branched from main).\n- Make commits of logical units.\n- Make sure your commit messages are in the proper format (see below).\n- Push your changes to a topic branch in your fork of the repository.\n- If you changed code:\n  - add automated tests to cover your changes, using the [Ginkgo](https://onsi.github.io/ginkgo/) & [Gomega](https://onsi.github.io/gomega/) style\n  - if the package did not previously have any test coverage, add it to the list\n   of `TESTABLE` packages in the `test.sh` script.\n  - run the full test script and ensure it passes\n- Make sure any new code files have a license header (this is now enforced by automated tests)\n- Submit a pull request to the original repository.\n\n## How to run the test suite\n\nWe generally require test coverage of any new features or bug fixes.\n\nHere's how you can run the test suite on any system (even Mac or Windows) using\n [Vagrant](https://www.vagrantup.com/) and a hypervisor of your choice:\n\n```bash\nvagrant up\nvagrant ssh\n# you're now in a shell in a virtual machine\nsudo su\ncd /go/src/github.com/containernetworking/cni\n\n# to run the full test suite\n./test.sh\n\n# to focus on a particular test suite\ncd libcni\ngo test\n```\n\n## Acceptance policy\n\nThese things will make a PR more likely to be accepted:\n\n- a well-described requirement\n- tests for new code\n- tests for old code!\n- new code and tests follow the conventions in old code and tests\n- a good commit message (see below)\n\nIn general, we will merge a PR once two maintainers have endorsed it.\nTrivial changes (e.g., corrections to spelling) may get waved through.\nFor substantial changes, more people may become involved, and you might get asked to resubmit the PR or divide the changes into more than one PR.\n\n### Format of the Commit Message\n\nWe follow a rough convention for commit messages that is designed to answer two\nquestions: what changed and why. The subject line should feature the what and\nthe body of the commit should describe the why.\n\n```md\nscripts: add the test-cluster command\n\nthis uses tmux to setup a test cluster that you can easily kill and\nstart for debugging.\n\nFixes #38\n```\n\nThe format can be described more formally as follows:\n\n```md\n<subsystem>: <what changed>\n<BLANK LINE>\n<why this change was made>\n<BLANK LINE>\n<footer>\n```\n\nThe first line is the subject and should be no longer than 70 characters, the\nsecond line is always blank, and other lines should be wrapped at 80 characters.\nThis allows the message to be easier to read on GitHub as well as in various\ngit tools.\n\n## 3rd party plugins\n\nSo you've built a CNI plugin.  Where should it live?\n\nShort answer: We'd be happy to link to it from our [list of 3rd party plugins](README.md#3rd-party-plugins).\nBut we'd rather you kept the code in your own repo.\n\nLong answer: An advantage of the CNI model is that independent plugins can be\nbuilt, distributed and used without any code changes to this repository.  While\nsome widely used plugins (and a few less-popular legacy ones) live in this repo,\nwe're reluctant to add more.\n\nIf you have a good reason why the CNI maintainers should take custody of your\nplugin, please open an issue or PR.\n"
        },
        {
          "name": "CONVENTIONS.md",
          "type": "blob",
          "size": 10.537109375,
          "content": "# Extension conventions                                                        \n                                                                                 \nThere are three ways of passing information to plugins using the Container Network Interface (CNI), none of which require the [spec](SPEC.md) to be updated. These are \n- plugin specific fields in the JSON config\n- `args` field in the JSON config\n- `CNI_ARGS` environment variable \n\nThis document aims to provide guidance on which method should be used and to provide a convention for how common information should be passed.\nEstablishing these conventions allows plugins to work across multiple runtimes. This helps both plugins and the runtimes.\n\n## Plugins\n* Plugin authors should aim to support these conventions where it makes sense for their plugin. This means they are more likely to \"just work\" with a wider range of runtimes.\n* Plugins should accept arguments according to these conventions if they implement the same basic functionality as other plugins. If plugins have shared functionality that isn't covered by these conventions then a PR should be opened against this document.\n\n## Runtimes\n* Runtime authors should follow these conventions if they want to pass additional information to plugins. This will allow the extra information to be consumed by the widest range of plugins.\n* These conventions serve as an abstraction for the runtime. For example, port forwarding is highly implementation specific, but users should be able to select the plugin of their choice without changing the runtime.\n\n# Current conventions\nAdditional conventions can be created by creating PRs which modify this document.\n\n## Dynamic Plugin specific fields (Capabilities / Runtime Configuration)\n[Plugin specific fields](SPEC.md#network-configuration) formed part of the original CNI spec and have been present since the initial release.\n> Plugins may define additional fields that they accept and may generate an error if called with unknown fields. The exception to this is the args field may be used to pass arbitrary data which may be ignored by plugins.\n\nA plugin can define any additional fields it needs to work properly. It should return an error if it can't act on fields that were expected or where the field values were malformed.\n\nThis method of passing information to a plugin is recommended when the following conditions hold:\n* The configuration has specific meaning to the plugin (i.e. it's not just general meta data)\n* the plugin is expected to act on the configuration or return an error if it can't\n\nDynamic information (i.e. data that a runtime fills out) should be placed in a `runtimeConfig` section. Plugins can request\nthat the runtime insert this dynamic configuration by explicitly listing their `capabilities` in the network configuration.\n\nFor example, the configuration for a port mapping plugin might look like this to an operator (it should be included as part of a [network configuration list](SPEC.md#network-configuration-lists).\n```json\n{\n  \"name\" : \"ExamplePlugin\",\n  \"type\" : \"port-mapper\",\n  \"capabilities\": {\"portMappings\": true}\n}\n```\n\nBut the runtime would fill in the mappings so the plugin itself would receive something like this.\n```json\n{\n  \"name\" : \"ExamplePlugin\",\n  \"type\" : \"port-mapper\",\n  \"runtimeConfig\": {\n    \"portMappings\": [\n      {\"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\"}\n    ]\n  }\n}\n```\n\n### Well-known Capabilities\n| Area  | Purpose | Capability | Spec and Example | Runtime implementations | Plugin Implementations |\n| ----- | ------- | -----------| ---------------- | ----------------------- | ---------------------  |\n| port mappings | Pass mapping from ports on the host to ports in the container network namespace. | `portMappings` | A list of portmapping entries.<br/>  <pre>[<br/>  { \"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\" },<br />  { \"hostPort\": 8000, \"containerPort\": 8001, \"protocol\": \"udp\" }<br />  ]<br /></pre> | kubernetes | CNI `portmap` plugin |\n| ip ranges | Dynamically configure the IP range(s) for address allocation. Runtimes that manage IP pools, but not individual IP addresses, can pass these to plugins. | `ipRanges` | The same as the `ranges` key for `host-local` - a list of lists of subnets. The outer list is the number of IPs to allocate, and the inner list is a pool of subnets for each allocation. <br/><pre>[<br/> [<br/>  { \"subnet\": \"10.1.2.0/24\", \"rangeStart\": \"10.1.2.3\", \"rangeEnd\": 10.1.2.99\", \"gateway\": \"10.1.2.254\" } <br/>  ]<br/>]</pre> | none | CNI `host-local` plugin |\n| bandwidth limits | Dynamically configure interface bandwidth limits | `bandwidth` | Desired bandwidth limits. Rates are in bits per second, burst values are in bits. <pre> { \"ingressRate\": 2048, \"ingressBurst\": 1600, \"egressRate\": 4096, \"egressBurst\": 1600 } </pre> | none | CNI `bandwidth` plugin |\n| dns | Dynamically configure dns according to runtime | `dns` | Dictionary containing a list of `servers` (string entries), a list of `searches` (string entries), a list of `options` (string entries). <pre>{ <br> \"searches\" : [ \"internal.yoyodyne.net\", \"corp.tyrell.net\" ] <br> \"servers\": [ \"8.8.8.8\", \"10.0.0.10\" ] <br />} </pre> | kubernetes | CNI `win-bridge` plugin, CNI `win-overlay` plugin |\n| ips | Dynamically allocate IPs for container interface. Runtime which has the ability of address allocation can pass these to plugins.  | `ips` | A list of `IP` (\\<ip\\>\\[/\\<prefix\\>\\]). <pre> [ \"192.168.0.1\", 10.10.0.1/24\", \"3ffe:ffff:0:01ff::2\", \"3ffe:ffff:0:01ff::1/64\" ] </pre> The plugin may require the IP address to include a prefix length. | none | CNI `static` plugin, CNI `host-local` plugin |\n| mac | Dynamically assign MAC. Runtime can pass this to plugins which need MAC as input. | `mac` | `MAC` (string entry). <pre> \"c2:11:22:33:44:55\" </pre> | none | CNI `tuning` plugin |\n| infiniband guid | Dynamically assign Infiniband GUID to network interface. Runtime can pass this to plugins which need Infiniband GUID as input. | `infinibandGUID` | `GUID` (string entry). <pre> \"c2:11:22:33:44:55:66:77\" </pre> | none | CNI [`ib-sriov-cni`](https://github.com/Mellanox/ib-sriov-cni) plugin |\n| device id | Provide device identifier which is associated with the network to allow the CNI plugin to perform device dependent network configurations. | `deviceID` | `deviceID` (string entry). <pre> \"0000:04:00.5\" </pre> | none | CNI `host-device` plugin |\n| aliases | Provide a list of names that will be mapped to the IP addresses assigned to this interface. Other containers on the same network may use one of these names to access the container.| `aliases` | List of `alias` (string entry). <pre> [\"my-container\", \"primary-db\"] </pre> | none | CNI `alias` plugin |\n| cgroup path | Provide the cgroup path for pod as requested by CNI plugins. | `cgroupPath` | `cgroupPath` (string entry). <pre>\"/kubelet.slice/kubelet-kubepods.slice/kubelet-kubepods-burstable.slice/kubelet-kubepods-burstable-pod28ce45bc_63f8_48a3_a99b_cfb9e63c856c.slice\" </pre> | none | CNI `host-local` plugin |\n\n## \"args\" in network config\n`args` in [network config](SPEC.md#network-configuration) were reserved as a  field in the `0.2.0` release of the CNI spec.\n> args (dictionary): Optional additional arguments provided by the container runtime. For example a dictionary of labels could be passed to CNI plugins by adding them to a labels field under args.\n\n`args` provide a way of providing more structured data than the flat strings that CNI_ARGS can support.\n\n`args` should be used for _optional_ meta-data. Runtimes can place additional data in `args` and plugins that don't understand that data should just ignore it. Runtimes should not require that a plugin understands or consumes that data provided, and so a runtime should not expect to receive an error if the data could not be acted on.\n\nThis method of passing information to a plugin is recommended when the information is optional and the plugin can choose to ignore it. It's often that case that such information is passed to all plugins by the runtime without regard for whether the plugin can understand it.\n\nThe conventions documented here are all namespaced under `cni` so they don't conflict with any existing `args`.\n\nFor example:\n```jsonc\n{  \n   \"cniVersion\":\"0.2.0\",\n   \"name\":\"net\",\n   \"args\":{  \n      \"cni\":{  \n         \"labels\": [{\"key\": \"app\", \"value\": \"myapp\"}]\n      }\n   },\n   // <REST OF CNI CONFIG HERE>\n   \"ipam\":{  \n   //  <IPAM CONFIG HERE>\n   }\n}\n```\n\n| Area  | Purpose| Spec and Example | Runtime implementations | Plugin Implementations |\n| ----- | ------ | ------------     | ----------------------- | ---------------------- |\n| labels | Pass`key=value` labels to plugins | <pre>\"labels\" : [<br />  { \"key\" : \"app\", \"value\" : \"myapp\" },<br />  { \"key\" : \"env\", \"value\" : \"prod\" }<br />] </pre> | none | none |\n| ips   | Request specific IPs | Spec:<pre>\"ips\": [\"\\<ip\\>[/\\<prefix\\>]\", ...]</pre>Examples:<pre>\"ips\": [\"10.2.2.42/24\", \"2001:db8::5\"]</pre> The plugin may require the IP address to include a prefix length. | none | host-local, static |\n\n## CNI_ARGS\nCNI_ARGS formed part of the original CNI spec and have been present since the initial release.\n> `CNI_ARGS`: Extra arguments passed in by the user at invocation time. Alphanumeric key-value pairs separated by semicolons; for example, \"FOO=BAR;ABC=123\"\n\nThe use of `CNI_ARGS` is deprecated and \"args\" should be used instead. If a runtime passes an equivalent key via `args` (eg the `ips` `args` Area and the `CNI_ARGS` `IP` Field) and the plugin understands `args`, the plugin must ignore the CNI_ARGS Field.\n\n| Field  | Purpose| Spec and Example | Runtime implementations | Plugin Implementations |\n| ------ | ------ | ---------------- | ----------------------- | ---------------------- |\n| IP     | Request a specific IP from IPAM plugins | Spec:<pre>IP=\\<ip\\>[/\\<prefix\\>]</pre>Example: <pre>IP=192.168.10.4/24</pre> The plugin may require the IP addresses to include a prefix length. | *rkt* supports passing additional arguments to plugins and the [documentation](https://coreos.com/rkt/docs/latest/networking/overriding-defaults.html) suggests IP can be used. | host-local, static |\n\n## Chained Plugins\nIf plugins are agnostic about the type of interface created, they SHOULD work in a chained mode and configure existing interfaces. Plugins MAY also create the desired interface when not run in a chain.\n\nFor example, the `bridge` plugin adds the host-side interface to a bridge. So, it should accept any previous result that includes a host-side interface, including `tap` devices. If not called as a chained plugin, it creates a `veth` pair first.\n\nPlugins that meet this convention are usable by a larger set of runtimes and interfaces, including hypervisors and DPDK providers.\n"
        },
        {
          "name": "DCO",
          "type": "blob",
          "size": 1.388671875,
          "content": "Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n"
        },
        {
          "name": "Documentation",
          "type": "tree",
          "content": null
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 2.216796875,
          "content": "# CNI Governance\n\nThis document defines project governance for the project.\n\n## Voting\n\nThe CNI project employs \"organization voting\" to ensure no single organization can dominate the project.\n\nIndividuals not associated with or employed by a company or organization are allowed one organization vote.\nEach company or organization (regardless of the number of maintainers associated with or employed by that company/organization) receives one organization vote.\n\nIn other words, if two maintainers are employed by Company X, two by Company Y, two by Company Z, and one maintainer is an un-affiliated individual, a total of four \"organization votes\" are possible; one for X, one for Y, one for Z, and one for the un-affiliated individual.\n\nAny maintainer from an organization may cast the vote for that organization.\n\nFor formal votes, a specific statement of what is being voted on should be added to the relevant github issue or PR, and a link to that issue or PR added to the maintainers meeting agenda document.\nMaintainers should indicate their yes/no vote on that issue or PR, and after a suitable period of time, the votes will be tallied and the outcome noted.\n\n## Changes in Maintainership\n\nNew maintainers are proposed by an existing maintainer and are elected by a 2/3 majority organization vote.\n\nMaintainers can be removed by a 2/3 majority organization vote.\n\n## Approving PRs\n\nNon-specification-related PRs may be merged after receiving at least two organization votes.\n\nChanges to the CNI Specification also follow the normal PR approval process (eg, 2 organization votes), but any maintainer can request that the approval require a 2/3 majority organization vote.\n\n## Github Project Administration\n\nMaintainers will be added to the containernetworking GitHub organization and added to the GitHub cni-maintainers team, and made a GitHub maintainer of that team.\n\nAfter 6 months a maintainer will be made an \"owner\" of the GitHub organization.\n\n## Changes in Governance\n\nAll changes in Governance require a 2/3 majority organization vote.\n\n## Other Changes\n\nUnless specified above, all other changes to the project require a 2/3 majority organization vote.\nAdditionally, any maintainer may request that any change require a 2/3 majority organization vote.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 0.37890625,
          "content": "Bruce Ma <brucema19901024@gmail.com> (@mars1024)\nCasey Callendrello <cdc@isovalent.com> (@squeed)\nDan Williams <dcbw@redhat.com> (@dcbw)\nMatt Dupre <matt@tigera.io> (@matthewdupre)\nMichael Cambria <mcambria@redhat.com> (@mccv1r0)\nMichael Zappa <Michael.Zappa@gmail.com> (@MikeZappa87)\nPiotr Skamruk <piotr.skamruk@gmail.com> (@jellonek)\nTomofumi Hayashi <tohayash@redhat.com> (@s1061123)\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.017578125,
          "content": "include mk/lint.mk"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.4013671875,
          "content": "![CNI Logo](logo.png)\n\n---\n\n# CNI - the Container Network Interface\n\n[![CII Best Practices](https://bestpractices.coreinfrastructure.org/projects/2446/badge)](https://bestpractices.coreinfrastructure.org/projects/2446)\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/containernetworking/cni/badge)](https://securityscorecards.dev/viewer/?uri=github.com/containernetworking/cni)\n\n## What is CNI?\n\nCNI (_Container Network Interface_), a [Cloud Native Computing Foundation](https://cncf.io) project, consists of a specification and libraries for writing plugins to configure network interfaces in Linux containers, along with a number of supported plugins.\nCNI concerns itself only with network connectivity of containers and removing allocated resources when the container is deleted.\nBecause of this focus, CNI has a wide range of support and the specification is simple to implement.\n\nAs well as the [specification](SPEC.md), this repository contains the Go source code of a [library for integrating CNI into applications](libcni) and an [example command-line tool](cnitool) for executing CNI plugins.  A [separate repository contains reference plugins](https://github.com/containernetworking/plugins) and a template for making new plugins.\n\nThe template code makes it straight-forward to create a CNI plugin for an existing container networking project.\nCNI also makes a good framework for creating a new container networking project from scratch.\n\nHere are the recordings of two sessions that the CNI maintainers hosted at KubeCon/CloudNativeCon 2019:\n\n- [Introduction to CNI](https://youtu.be/YjjrQiJOyME)\n- [CNI deep dive](https://youtu.be/zChkx-AB5Xc)\n\n\n## Contributing to CNI\n\nWe welcome contributions, including [bug reports](https://github.com/containernetworking/cni/issues), and code and documentation improvements.\nIf you intend to contribute to code or documentation, please read [CONTRIBUTING.md](CONTRIBUTING.md). Also see the [contact section](#contact) in this README.\n\nThe CNI project has a [weekly meeting](https://meet.jit.si/CNIMaintainersMeeting). It takes place Mondays at 11:00 US/Eastern. All are welcome to join.\n\n## Why develop CNI?\n\nApplication containers on Linux are a rapidly evolving area, and within this area networking is not well addressed as it is highly environment-specific.\nWe believe that many container runtimes and orchestrators will seek to solve the same problem of making the network layer pluggable.\n\nTo avoid duplication, we think it is prudent to define a common interface between the network plugins and container execution: hence we put forward this specification, along with libraries for Go and a set of plugins.\n\n## Who is using CNI?\n### Container runtimes\n- [rkt - container engine](https://coreos.com/blog/rkt-cni-networking.html)\n- [Kubernetes - a system to simplify container operations](https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/)\n- [OpenShift - Kubernetes with additional enterprise features](https://github.com/openshift/origin/blob/master/docs/openshift_networking_requirements.md)\n- [Cloud Foundry - a platform for cloud applications](https://github.com/cloudfoundry-incubator/cf-networking-release)\n- [Apache Mesos - a distributed systems kernel](https://github.com/apache/mesos/blob/master/docs/cni.md)\n- [Amazon ECS - a highly scalable, high performance container management service](https://aws.amazon.com/ecs/)\n- [Singularity - container platform optimized for HPC, EPC, and AI](https://github.com/sylabs/singularity)\n- [OpenSVC - orchestrator for legacy and containerized application stacks](https://docs.opensvc.com/latest/fr/agent.configure.cni.html)\n\n### 3rd party plugins\n- [Project Calico - a layer 3 virtual network](https://github.com/projectcalico/calico)\n- [Weave - a multi-host Docker network](https://github.com/weaveworks/weave)\n- [Contiv Networking - policy networking for various use cases](https://github.com/contiv/netplugin)\n- [SR-IOV](https://github.com/hustcat/sriov-cni)\n- [Cilium - BPF & XDP for containers](https://github.com/cilium/cilium)\n- [Infoblox - enterprise IP address management for containers](https://github.com/infobloxopen/cni-infoblox)\n- [Multus - a Multi plugin](https://github.com/k8snetworkplumbingwg/multus-cni)\n- [Romana - Layer 3 CNI plugin supporting network policy for Kubernetes](https://github.com/romana/kube)\n- [CNI-Genie - generic CNI network plugin](https://github.com/Huawei-PaaS/CNI-Genie)\n- [Nuage CNI - Nuage Networks SDN plugin for network policy kubernetes support ](https://github.com/nuagenetworks/nuage-cni)\n- [Silk - a CNI plugin designed for Cloud Foundry](https://github.com/cloudfoundry-incubator/silk)\n- [Linen - a CNI plugin designed for overlay networks with Open vSwitch and fit in SDN/OpenFlow network environment](https://github.com/John-Lin/linen-cni)\n- [Vhostuser - a Dataplane network plugin - Supports OVS-DPDK & VPP](https://github.com/intel/vhost-user-net-plugin)\n- [Amazon ECS CNI Plugins - a collection of CNI Plugins to configure containers with Amazon EC2 elastic network interfaces (ENIs)](https://github.com/aws/amazon-ecs-cni-plugins)\n- [Bonding CNI - a Link aggregating plugin to address failover and high availability network](https://github.com/Intel-Corp/bond-cni)\n- [ovn-kubernetes - an container network plugin built on Open vSwitch (OVS) and Open Virtual Networking (OVN) with support for both Linux and Windows](https://github.com/openvswitch/ovn-kubernetes)\n- [Juniper Contrail](https://www.juniper.net/cloud) / [TungstenFabric](https://tungstenfabric.io) -  Provides overlay SDN solution, delivering multicloud networking, hybrid cloud networking, simultaneous overlay-underlay support, network policy enforcement, network isolation, service chaining and flexible load balancing\n- [Knitter - a CNI plugin supporting multiple networking for Kubernetes](https://github.com/ZTE/Knitter)\n- [DANM - a CNI-compliant networking solution for TelCo workloads running on Kubernetes](https://github.com/nokia/danm)\n- [VMware NSX – a CNI plugin that enables automated NSX L2/L3 networking and L4/L7 Load Balancing; network isolation at the pod, node, and cluster level; and zero-trust security policy for your Kubernetes cluster.](https://docs.vmware.com/en/VMware-NSX-T/2.2/com.vmware.nsxt.ncp_kubernetes.doc/GUID-6AFA724E-BB62-4693-B95C-321E8DDEA7E1.html)\n- [cni-route-override - a meta CNI plugin that override route information](https://github.com/redhat-nfvpe/cni-route-override)\n- [Terway - a collection of CNI Plugins based on alibaba cloud VPC/ECS network product](https://github.com/AliyunContainerService/terway)\n- [Cisco ACI CNI - for on-prem and cloud container networking with consistent policy and security model.](https://github.com/noironetworks/aci-containers)\n- [Kube-OVN - a CNI plugin that bases on OVN/OVS and provides advanced features like subnet, static ip, ACL, QoS, etc.](https://github.com/kubeovn/kube-ovn)\n- [Project Antrea - an Open vSwitch k8s CNI](https://github.com/vmware-tanzu/antrea)\n- [OVN4NFV-K8S-Plugin - a OVN based CNI controller plugin to provide cloud native based Service function chaining (SFC), Multiple OVN overlay networking](https://github.com/opnfv/ovn4nfv-k8s-plugin)\n- [Azure CNI - a CNI plugin that natively extends Azure Virtual Networks to containers](https://github.com/Azure/azure-container-networking)\n- [Hybridnet - a CNI plugin designed for hybrid clouds which provides both overlay and underlay networking for containers in one or more clusters. Overlay and underlay containers can run on the same node and have cluster-wide bidirectional network connectivity.](https://github.com/alibaba/hybridnet)\n- [Spiderpool - An IP Address Management (IPAM) CNI plugin of Kubernetes for managing static ip for underlay network](https://github.com/spidernet-io/spiderpool)\n- [AWS VPC CNI - Networking plugin for pod networking in Kubernetes using Elastic Network Interfaces on AWS](https://github.com/aws/amazon-vpc-cni-k8s)\n\nThe CNI team also maintains some [core plugins in a separate repository](https://github.com/containernetworking/plugins).\n\n\n## How do I use CNI?\n\n### Requirements\n\nThe CNI spec is language agnostic.  To use the Go language libraries in this repository, you'll need a recent version of Go.  You can find the Go versions covered by our [automated tests](https://travis-ci.org/containernetworking/cni/builds) in [.travis.yaml](.travis.yml).\n\n### Reference Plugins\n\nThe CNI project maintains a set of [reference plugins](https://github.com/containernetworking/plugins) that implement the CNI specification.\nNOTE: the reference plugins used to live in this repository but have been split out into a [separate repository](https://github.com/containernetworking/plugins) as of May 2017.\n\n### Running the plugins\n\nAfter building and installing the [reference plugins](https://github.com/containernetworking/plugins), you can use the `priv-net-run.sh` and `docker-run.sh` scripts in the `scripts/` directory to exercise the plugins.\n\n**note - priv-net-run.sh depends on `jq`**\n\nStart out by creating a netconf file to describe a network:\n\n```bash\n$ mkdir -p /etc/cni/net.d\n$ cat >/etc/cni/net.d/10-mynet.conf <<EOF\n{\n\t\"cniVersion\": \"0.2.0\",\n\t\"name\": \"mynet\",\n\t\"type\": \"bridge\",\n\t\"bridge\": \"cni0\",\n\t\"isGateway\": true,\n\t\"ipMasq\": true,\n\t\"ipam\": {\n\t\t\"type\": \"host-local\",\n\t\t\"subnet\": \"10.22.0.0/16\",\n\t\t\"routes\": [\n\t\t\t{ \"dst\": \"0.0.0.0/0\" }\n\t\t]\n\t}\n}\nEOF\n$ cat >/etc/cni/net.d/99-loopback.conf <<EOF\n{\n\t\"cniVersion\": \"0.2.0\",\n\t\"name\": \"lo\",\n\t\"type\": \"loopback\"\n}\nEOF\n```\n\nThe directory `/etc/cni/net.d` is the default location in which the scripts will look for net configurations.\n\nNext, build the plugins:\n\n```bash\n$ cd $GOPATH/src/github.com/containernetworking/plugins\n$ ./build_linux.sh # or build_windows.sh\n```\n\nFinally, execute a command (`ifconfig` in this example) in a private network namespace that has joined the `mynet` network:\n\n```bash\n$ CNI_PATH=$GOPATH/src/github.com/containernetworking/plugins/bin\n$ cd $GOPATH/src/github.com/containernetworking/cni/scripts\n$ sudo CNI_PATH=$CNI_PATH ./priv-net-run.sh ifconfig\neth0      Link encap:Ethernet  HWaddr f2:c2:6f:54:b8:2b  \n          inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::f0c2:6fff:fe54:b82b/64 Scope:Link\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:1 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n```\n\nThe environment variable `CNI_PATH` tells the scripts and library where to look for plugin executables.\n\n## Running a Docker container with network namespace set up by CNI plugins\n\nUse the instructions in the previous section to define a netconf and build the plugins.\nNext, docker-run.sh script wraps `docker run`, to execute the plugins prior to entering the container:\n\n```bash\n$ CNI_PATH=$GOPATH/src/github.com/containernetworking/plugins/bin\n$ cd $GOPATH/src/github.com/containernetworking/cni/scripts\n$ sudo CNI_PATH=$CNI_PATH ./docker-run.sh --rm busybox:latest ifconfig\neth0      Link encap:Ethernet  HWaddr fa:60:70:aa:07:d1  \n          inet addr:10.22.0.2  Bcast:0.0.0.0  Mask:255.255.0.0\n          inet6 addr: fe80::f860:70ff:feaa:7d1/64 Scope:Link\n          UP BROADCAST MULTICAST  MTU:1500  Metric:1\n          RX packets:1 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:1 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:90 (90.0 B)  TX bytes:0 (0.0 B)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:0 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)\n```\n\n## What might CNI do in the future?\n\nCNI currently covers a wide range of needs for network configuration due to its simple model and API.\nHowever, in the future CNI might want to branch out into other directions:\n\n- Dynamic updates to existing network configuration\n- Dynamic policies for network bandwidth and firewall rules\n\nIf these topics are of interest, please contact the team via the mailing list or IRC and find some like-minded people in the community to put a proposal together.\n\n## Where are the binaries?\n\nThe plugins moved to a separate repo:\nhttps://github.com/containernetworking/plugins, and the releases there\ninclude binaries and checksums.\n\nPrior to release 0.7.0 the `cni` release also included a `cnitool`\nbinary; as this is a developer tool we suggest you build it yourself.\n\n## Contact\n\nFor any questions about CNI, please reach out via:\n- Email: [cni-dev](https://groups.google.com/forum/#!forum/cni-dev)\n- IRC: #[containernetworking](irc://irc.freenode.net:6667/#containernetworking) channel on [freenode.net](https://freenode.net/)\n- Slack: #cni on the [CNCF slack](https://slack.cncf.io/).  NOTE: the previous CNI Slack (containernetworking.slack.com) has been sunsetted.\n\n## Security\n\nIf you have a _security_ issue to report, please do so privately to the email addresses listed in the [MAINTAINERS](MAINTAINERS) file.\n"
        },
        {
          "name": "RELEASING.md",
          "type": "blob",
          "size": 1.0078125,
          "content": "# Release process\n## Preparing for a release\n\nReleases are performed by maintainers and should usually be discussed and planned at a maintainer meeting.\n\n- Choose the version number. It should be prefixed with `v`, e.g. `v1.2.3`\n- Take a quick scan through the PRs and issues to make sure there isn't anything crucial that _must_ be in the next release.\n- Create a draft of the release note\n- Discuss the level of testing that's needed and create a test plan if sensible\n- Check what version of `go` is used in the build container, updating it if there's a new stable release.\n\n## Publishing the release\n\n1. Make sure you are on the master branch and don't have any local uncommitted changes.\n1. Create a signed tag for the release `git tag -s $VERSION` (Ensure that GPG keys are created and added to GitHub)\n1. Push the tag to git `git push origin <TAG>`\n1. Create a release on Github, using the tag which was just pushed.\n1. Add the release note to the release.\n1. Announce the release on at least the CNI mailing, IRC and Slack.\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 0.5576171875,
          "content": "# CNI Roadmap\n\nThis document defines a high level roadmap for CNI development.\nThe list below is not complete, and we advise to get the current project state from the [milestones defined in GitHub](https://github.com/containernetworking/cni/milestones).\n\n## CNI Milestones\n\n### [v1.0.0](https://github.com/containernetworking/cni/milestones/v1.0.0)\n\n- Targeted for April 2020\n- More precise specification language\n- Stable SPEC\n- Complete test coverage\n\n### Beyond v1.0.0\n\n- Conformance test suite for CNI plugins (both reference and 3rd party)\n- Signed release binaries\n"
        },
        {
          "name": "SPEC.md",
          "type": "blob",
          "size": 53.490234375,
          "content": "# Container Network Interface (CNI) Specification\n- [Container Network Interface (CNI) Specification](#container-network-interface-cni-specification)\n  - [Version](#version)\n      - [Released versions](#released-versions)\n  - [Overview](#overview)\n  - [Summary](#summary)\n  - [Section 1: Network configuration format](#section-1-network-configuration-format)\n    - [Configuration format](#configuration-format)\n      - [Plugin configuration objects:](#plugin-configuration-objects)\n      - [Example configuration](#example-configuration)\n    - [Version considerations](#version-considerations)\n  - [Section 2: Execution Protocol](#section-2-execution-protocol)\n    - [Overview](#overview-1)\n    - [Parameters](#parameters)\n    - [Errors](#errors)\n    - [CNI operations](#cni-operations)\n      - [`ADD`: Add container to network, or apply modifications](#add-add-container-to-network-or-apply-modifications)\n      - [`DEL`: Remove container from network, or un-apply modifications](#del-remove-container-from-network-or-un-apply-modifications)\n      - [`CHECK`: Check container's networking is as expected](#check-check-containers-networking-is-as-expected)\n      - [`STATUS`: Check plugin status](#status-check-plugin-status)\n      - [`VERSION`: probe plugin version support](#version-probe-plugin-version-support)\n      - [`GC`: Clean up any stale resources](#gc-clean-up-any-stale-resources)\n  - [Section 3: Execution of Network Configurations](#section-3-execution-of-network-configurations)\n    - [Lifecycle \\& Ordering](#lifecycle--ordering)\n    - [Attachment Parameters](#attachment-parameters)\n    - [Adding an attachment](#adding-an-attachment)\n    - [Deleting an attachment](#deleting-an-attachment)\n    - [Checking an attachment](#checking-an-attachment)\n    - [Garbage-collecting a network](#garbage-collecting-a-network)\n    - [Deriving request configuration from plugin configuration](#deriving-request-configuration-from-plugin-configuration)\n      - [Deriving `runtimeConfig`](#deriving-runtimeconfig)\n  - [Section 4: Plugin Delegation](#section-4-plugin-delegation)\n    - [Delegated Plugin protocol](#delegated-plugin-protocol)\n    - [Delegated plugin execution procedure](#delegated-plugin-execution-procedure)\n  - [Section 5: Result Types](#section-5-result-types)\n    - [ADD Success](#add-success)\n      - [Delegated plugins (IPAM)](#delegated-plugins-ipam)\n    - [VERSION Success](#version-success)\n    - [Error](#error)\n    - [Version](#version-1)\n  - [Appendix: Examples](#appendix-examples)\n    - [Add example](#add-example)\n    - [Check example](#check-example)\n    - [Delete example](#delete-example)\n\n## Version\n\nThis is CNI **spec** version **1.1.0**.\n\nNote that this is **independent from the version of the CNI library and plugins** in this repository (e.g. the versions of [releases](https://github.com/containernetworking/cni/releases)).\n\n#### Released versions\n\nReleased versions of the spec are available as Git tags.\n\n| tag                                                                                  | spec permalink                                                                        | major changes                     |\n| ------------------------------------------------------------------------------------ | ------------------------------------------------------------------------------------- | --------------------------------- |\n| [`spec-v1.0.0`](https://github.com/containernetworking/cni/releases/tag/spec-v1.0.0) | [spec at v1.0.0](https://github.com/containernetworking/cni/blob/spec-v1.0.0/SPEC.md) | Removed non-list configurations; removed `version` field of `interfaces` array |\n| [`spec-v0.4.0`](https://github.com/containernetworking/cni/releases/tag/spec-v0.4.0) | [spec at v0.4.0](https://github.com/containernetworking/cni/blob/spec-v0.4.0/SPEC.md) | Introduce the CHECK command and passing prevResult on DEL |\n| [`spec-v0.3.1`](https://github.com/containernetworking/cni/releases/tag/spec-v0.3.1) | [spec at v0.3.1](https://github.com/containernetworking/cni/blob/spec-v0.3.1/SPEC.md) | none (typo fix only)              |\n| [`spec-v0.3.0`](https://github.com/containernetworking/cni/releases/tag/spec-v0.3.0) | [spec at v0.3.0](https://github.com/containernetworking/cni/blob/spec-v0.3.0/SPEC.md) | rich result type, plugin chaining |\n| [`spec-v0.2.0`](https://github.com/containernetworking/cni/releases/tag/spec-v0.2.0) | [spec at v0.2.0](https://github.com/containernetworking/cni/blob/spec-v0.2.0/SPEC.md) | VERSION command                   |\n| [`spec-v0.1.0`](https://github.com/containernetworking/cni/releases/tag/spec-v0.1.0) | [spec at v0.1.0](https://github.com/containernetworking/cni/blob/spec-v0.1.0/SPEC.md) | initial version                   |\n\n*Do not rely on these tags being stable.  In the future, we may change our mind about which particular commit is the right marker for a given historical spec version.*\n\n\n## Overview\n\nThis document proposes a generic plugin-based networking solution for application containers on Linux, the _Container Networking Interface_, or _CNI_.\n\nFor the purposes of this proposal, we define three terms very specifically:\n- _container_ is a network isolation domain, though the actual isolation technology is not defined by the specification. This could be a [network namespace][namespaces] or a virtual machine, for example.\n- _network_ refers to a group of endpoints that are uniquely addressable that can communicate amongst each other. This could be either an individual container (as specified above), a machine, or some other network device (e.g. a router). Containers can be conceptually _added to_ or _removed from_ one or more networks.\n- _runtime_ is the program responsible for executing CNI plugins.\n- _plugin_ is a program that applies a specified network configuration.\n\nThis document aims to specify the interface between \"runtimes\" and \"plugins\". The key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\", \"should\", \"should not\", \"recommended\", \"may\" and \"optional\" are used as specified in [RFC 2119][rfc-2119].\n\n[namespaces]: http://man7.org/linux/man-pages/man7/namespaces.7.html\n[rfc-2119]: https://www.ietf.org/rfc/rfc2119.txt\n\n\n\n## Summary\n\nThe CNI specification defines:\n\n1. A format for administrators to define network configuration.\n2. A protocol for container runtimes to make requests to network plugins.\n3. A procedure for executing plugins based on a supplied configuration.\n4. A procedure for plugins to delegate functionality to other plugins.\n5. Data types for plugins to return their results to the runtime.\n\n## Section 1: Network configuration format\n\nCNI defines a network configuration format for administrators. It contains\ndirectives for both the container runtime as well as the plugins to consume. At\nplugin execution time, this configuration format is interpreted by the runtime and\ntransformed in to a form to be passed to the plugins.\n\nIn general, the network configuration is intended to be static. It can conceptually\nbe thought of as being \"on disk\", though the CNI specification does not actually\nrequire this.\n\n### Configuration format\n\nA network configuration consists of a JSON object with the following keys:\n\n- `cniVersion` (string): [Semantic Version 2.0](https://semver.org) of CNI specification to which this configuration list and all the individual configurations conform. Currently \"1.1.0\"\n- `cniVersions` (string list): List of all CNI versions which this configuration supports. See [version selection](#version-selection) below.\n- `name` (string): Network name. This should be unique across all network configurations on a host (or other administrative domain).  Must start with an alphanumeric character, optionally followed by any combination of one or more alphanumeric characters, underscore, dot (.) or hyphen (-). Must not contain characters disallowed in file paths.\n- `disableCheck` (boolean): Either `true` or `false`.  If `disableCheck` is `true`, runtimes must not call `CHECK` for this network configuration list.  This allows an administrator to prevent `CHECK`ing where a combination of plugins is known to return spurious errors.\n- `disableGC` (boolean): Either `true` or `false`.  If `disableGC` is `true`, runtimes must not call `GC` for this network configuration list.  This allows an administrator to prevent `GC`ing when it is known that garbage collection may have undesired effects (e.g. shared configuration between multiple runtimes).\n- `loadOnlyInlinedPlugins` (boolean): Either `true` or `false`. If `false` (default), indicates [plugin configuration objects](#plugin-configuration-objects) can be aggregated from multiple sources. Any valid plugin configuration objects aggregated from other sources must be appended to the final list of `plugins` for that network name. If set to `true`, indicates that valid plugin configuration objects aggregated from sources other than the main network configuration will be ignored. If `plugins` is not present in the network configuration, `loadOnlyInlinedPlugins` cannot be set to `true`.\n- `plugins` (list): A list of inlined [plugin configuration objects](#plugin-configuration-objects). If this key is populated with inlined plugin objects, and `loadOnlyInlinedPlugins` is true, the final set of plugins for a network must consist of all the plugin objects in this list, merged with all the plugins loaded from the sibling folder with the same name as the network.\n\n#### Plugin configuration objects:\nRuntimes may aggregate plugin configuration objects from multiple sources, and must unambiguously associate each loaded plugin configuration object with a single, valid network configuration. All aggregated plugin configuration objects must be validated, and each plugin with a valid configuration object must be invoked.\n\nPlugin configuration objects may contain additional fields beyond the ones defined here. The runtime MUST pass through these fields, unchanged, to the invoked plugin, as defined in section 3.\n\n**Required keys:**\n- `type` (string): Matches the name of the CNI plugin binary on disk. Must not contain characters disallowed in file paths for the system (e.g. / or \\\\).\n\n**Optional keys, used by the protocol:**\n- `capabilities` (dictionary): Defined in [section 3](#Deriving-runtimeConfig)\n\n**Reserved keys, used by the protocol:**\nThese keys are generated by the runtime at execution time, and thus should not be used in configuration.\n- `runtimeConfig`\n- `args`\n- Any keys starting with `cni.dev/`\n\n**Optional keys, well-known:**\nThese keys are not used by the protocol, but have a standard meaning to plugins.\nPlugins that consume any of these configuration keys should respect their intended semantics.\n\n- `ipMasq` (boolean): If supported by the plugin, sets up an IP masquerade on the host for this network. This is necessary if the host will act as a gateway to subnets that are not able to route to the IP assigned to the container.\n- `ipam` (dictionary): Dictionary with IPAM (IP Address Management) specific values:\n    - `type` (string): Refers to the filename of the IPAM plugin executable. Must not contain characters disallowed in file paths for the system (e.g. / or \\\\).\n- `dns` (dictionary, optional): Dictionary with DNS specific values:\n    - `nameservers` (list of strings, optional): list of a priority-ordered list of DNS nameservers that this network is aware of. Each entry in the list is a string containing either an IPv4 or an IPv6 address.\n    - `domain` (string, optional): the local domain used for short hostname lookups.\n    - `search` (list of strings, optional): list of priority ordered search domains for short hostname lookups. Will be preferred over `domain` by most resolvers.\n    - `options` (list of strings, optional): list of options that can be passed to the resolver\n\n**Other keys:**\nPlugins may define additional fields that they accept and may generate an error if called with unknown fields. Runtimes must preserve unknown fields in plugin configuration objects when transforming for execution.\n\n#### Example configuration\nThe following is an example JSON representation of a network configuration `dbnet` with three plugin configurations (`bridge`, `tuning`, and `portmap`).\n```jsonc\n{\n  \"cniVersion\": \"1.1.0\",\n  \"cniVersions\": [\"0.3.1\", \"0.4.0\", \"1.0.0\", \"1.1.0\"],\n  \"name\": \"dbnet\",\n  \"plugins\": [\n    {\n      \"type\": \"bridge\",\n      // plugin specific parameters\n      \"bridge\": \"cni0\",\n      \"keyA\": [\"some more\", \"plugin specific\", \"configuration\"],\n\n      \"ipam\": {\n        \"type\": \"host-local\",\n        // ipam specific\n        \"subnet\": \"10.1.0.0/16\",\n        \"gateway\": \"10.1.0.1\",\n        \"routes\": [\n            {\"dst\": \"0.0.0.0/0\"}\n        ]\n      },\n      \"dns\": {\n        \"nameservers\": [ \"10.1.0.1\" ]\n      }\n    },\n    {\n      \"type\": \"tuning\",\n      \"capabilities\": {\n        \"mac\": true\n      },\n      \"sysctl\": {\n        \"net.core.somaxconn\": \"500\"\n      }\n    },\n    {\n        \"type\": \"portmap\",\n        \"capabilities\": {\"portMappings\": true}\n    }\n  ]\n}\n```\n\n### Version considerations\n\nCNI runtimes, plugins, and network configurations may support multiple CNI specification versions independently. Plugins indicate their set of supported versions through the VERSION command, while network configurations indicate their set of supported versions through the `cniVersion` and `cniVersions` fields.\n\nCNI runtimes MUST select the highest supported version from the set of network configuration versions given by the `cniVersion` and `cniVersions` fields. Runtimes MAY consider the set of supported plugin versions as reported by the VERSION command when determining available versions.\n\n\nThe CNI protocol follows Semantic Versioning principles, so the configuration format MUST remain backwards and forwards compatible within major versions.\n\n## Section 2: Execution Protocol\n\n### Overview\n\nThe CNI protocol is based on execution of binaries invoked by the container runtime. CNI defines the protocol between the plugin binary and the runtime.\n\nA CNI plugin is responsible for configuring a container's network interface in some manner. Plugins fall in to two broad categories:\n* \"Interface\" plugins, which create a network interface inside the container and ensure it has connectivity.\n* \"Chained\" plugins, which adjust the configuration of an already-created interface (but may need to create more interfaces to do so).\n\nThe runtime passes parameters to the plugin via environment variables and configuration. It supplies configuration via stdin. The plugin returns\na [result](#Section-5-Result-Types) on stdout on success, or an error on stderr if the operation fails. Configuration and results are encoded in JSON.\n\nParameters define invocation-specific settings, whereas configuration is, with some exceptions, the same for any given network.\n\nThe runtime must execute the plugin in the runtime's networking domain. (For most cases, this means the root network namespace / `dom0`).\n\n### Parameters\n\nProtocol parameters are passed to the plugins via OS environment variables.\n\n- `CNI_COMMAND`: indicates the desired operation; `ADD`, `DEL`, `CHECK`, `GC`, or `VERSION`.\n- `CNI_CONTAINERID`: Container ID. A unique plaintext identifier for a container, allocated by the runtime. Must not be empty.  Must start with an alphanumeric character, optionally followed by any combination of one or more alphanumeric characters, underscore (), dot (.) or hyphen (-).\n- `CNI_NETNS`: A reference to the container's \"isolation domain\". If using network namespaces, then a path to the network namespace (e.g. `/run/netns/[nsname]`)\n- `CNI_IFNAME`: Name of the interface to create inside the container; if the plugin is unable to use this interface name it must return an error.\n- `CNI_ARGS`: Extra arguments passed in by the user at invocation time. Alphanumeric key-value pairs separated by semicolons; for example, \"FOO=BAR;ABC=123\"\n- `CNI_PATH`: List of paths to search for CNI plugin executables. Paths are separated by an OS-specific list separator; for example ':' on Linux and ';' on Windows\n\n### Errors\nA plugin must exit with a return code of 0 on success, and non-zero on failure. If the plugin encounters an error, it should output an [\"error\" result structure](#Error) (see below).\n\n### CNI operations\n\nCNI defines 5 operations: `ADD`, `DEL`, `CHECK`, `GC`, and `VERSION`. These are passed to the plugin via the `CNI_COMMAND` environment variable.\n\n#### `ADD`: Add container to network, or apply modifications\n\nA CNI plugin, upon receiving an `ADD` command, should either\n- create the interface defined by `CNI_IFNAME` inside the container at `CNI_NETNS`, or\n- adjust the configuration of the interface defined by `CNI_IFNAME` inside the container at `CNI_NETNS`.\n\nIf the CNI plugin is successful, it must output a [result structure](#Success) (see below) on standard out. If the plugin was supplied a `prevResult` as part of its input configuration, it MUST handle `prevResult` by either passing it through, or modifying it appropriately.\n\nIf an interface of the requested name already exists in the container, the CNI plugin MUST return with an error.\n\nA runtime should not call `ADD` twice (without an intervening DEL) for the same `(CNI_CONTAINERID, CNI_IFNAME)` tuple. This implies that a given container ID may be added to a specific network more than once only if each addition is done with a different interface name.\n\n**Input:**\n\nThe runtime will provide a JSON-serialized plugin configuration object (defined below) on standard in.\n\nRequired environment parameters:\n- `CNI_COMMAND`\n- `CNI_CONTAINERID`\n- `CNI_NETNS`\n- `CNI_IFNAME`\n\nOptional environment parameters:\n- `CNI_ARGS`\n- `CNI_PATH`\n\n#### `DEL`: Remove container from network, or un-apply modifications\n\nA CNI plugin, upon receiving a `DEL` command, should either\n- delete the interface defined by `CNI_IFNAME` inside the container at `CNI_NETNS`, or\n- undo any modifications applied in the plugin's `ADD` functionality\n\nPlugins should generally complete a `DEL` action without error even if some resources are missing.  For example, an IPAM plugin should generally release an IP allocation and return success even if the container network namespace no longer exists, unless that network namespace is critical for IPAM management. While DHCP may usually send a 'release' message on the container network interface, since DHCP leases have a lifetime this release action would not be considered critical and no error should be returned if this action fails. For another example, the `bridge` plugin should delegate the DEL action to the IPAM plugin and clean up its own resources even if the container network namespace and/or container network interface no longer exist.\n\nPlugins MUST accept multiple `DEL` calls for the same (`CNI_CONTAINERID`, `CNI_IFNAME`) pair, and return success if the interface in question, or any modifications added, are missing.\n\n**Input:**\n\nThe runtime will provide a JSON-serialized plugin configuration object (defined below) on standard in.\n\nRequired environment parameters:\n- `CNI_COMMAND`\n- `CNI_CONTAINERID`\n- `CNI_IFNAME`\n\nOptional environment parameters:\n- `CNI_NETNS`\n- `CNI_ARGS`\n- `CNI_PATH`\n\n\n#### `CHECK`: Check container's networking is as expected\n`CHECK` is a way for a runtime to probe the status of an existing container.\n\nPlugin considerations:\n- The plugin must consult the `prevResult` to determine the expected interfaces and addresses.\n- The plugin must allow for a later chained plugin to have modified networking resources, e.g. routes, on `ADD`.\n- The plugin should return an error if a resource included in the CNI Result type (interface, address or route) was created by the plugin, and is listed in `prevResult`, but is missing or in an invalid state.\n- The plugin should return an error if other resources not tracked in the Result type such as the following are missing or are in an invalid state:\n  - Firewall rules\n  - Traffic shaping controls\n  - IP reservations\n  - External dependencies such as a daemon required for connectivity\n  - etc.\n- The plugin should return an error if it is aware of a condition where the container is generally unreachable.\n- The plugin must handle `CHECK` being called immediately after an `ADD`, and therefore should allow a reasonable convergence delay for any asynchronous resources.\n- The plugin should call `CHECK` on any delegated (e.g. IPAM) plugins and pass any errors on to its caller.\n\n\nRuntime considerations:\n- A runtime must not call `CHECK` for a container that has not been `ADD`ed, or has been `DEL`eted after its last `ADD`.\n- A runtime must not call `CHECK` if `disableCheck` is set to `true` in the [configuration](#configuration-format).\n- A runtime must include a `prevResult` field in the network configuration containing the `Result` of the immediately preceding `ADD` for the container. The runtime may wish to use libcni's support for caching `Result`s.\n- A runtime may choose to stop executing `CHECK` for a chain when a plugin returns an error.\n- A runtime may execute `CHECK` from immediately after a successful `ADD`, up until the container is `DEL`eted from the network.\n- A runtime may assume that a failed `CHECK` means the container is permanently in a misconfigured state.\n\n\n**Input:**\n\nThe runtime will provide a json-serialized plugin configuration object (defined below) on standard in.\n\nRequired environment parameters:\n- `CNI_COMMAND`\n- `CNI_CONTAINERID`\n- `CNI_NETNS`\n- `CNI_IFNAME`\n\nOptional environment parameters:\n- `CNI_ARGS`\n- `CNI_PATH`\n\nAll parameters, with the exception of `CNI_PATH`, must be the same as the corresponding `ADD` for this container.\n\n\n#### `STATUS`: Check plugin status\n`STATUS` is a way for a runtime to determine the readiness of a network plugin.\n\nA plugin must exit with a zero (success) return code if the plugin is ready to service ADD requests. If the plugin knows that it is not able to service ADD requests, it must exit with a non-zero return code and output an error on standard out (see below).\n\nFor example, if a plugin relies on an external service or daemon, it should return an error to `STATUS` if that service is unavailable. Likewise, if a plugin has a limited number of resources (e.g. IP addresses, hardware queues), it should return an error if those resources are exhausted and no new `ADD` requests can be serviced.\n\nThe following error codes are defined in the context of `STATUS`:\n\n- 50: The plugin is not available (i.e. cannot service `ADD` requests)\n- 51: The plugin is not available, and existing containers in the network may have limited connectivity.\n\nPlugin considerations:\n- Status is purely informational. A plugin MUST NOT rely on `STATUS` being called.\n- Plugins should always expect other CNI operations (like `ADD`, `DEL`, etc) even if `STATUS` returns an error. `STATUS` does not prevent other runtime requests.\n- If a plugin relies on a delegated plugin (e.g. IPAM) to service `ADD` requests, it must also execute a `STATUS` request to that plugin when it receives a `STATUS` request for itself. If the delegated plugin return an error result, the executing plugin should return an error result.\n\n**Input:**\n\nThe runtime will provide a json-serialized plugin configuration object (defined below) on standard in.\n\nOptional environment parameters:\n- `CNI_PATH`\n\n\n#### `VERSION`: probe plugin version support\nThe plugin should output via standard-out a json-serialized version result object (see below).\n\n**Input:**\n\nA json-serialized object, with the following key:\n- `cniVersion`: The version of the protocol in use.\n\nRequired environment parameters:\n- `CNI_COMMAND`\n\n#### `GC`: Clean up any stale resources\n\nThe GC command provides a way for runtimes to specify the expected set of attachments to a network.\nThe network plugin may then remove any resources related to attachments that do not exist in this set.\n\nResources may, for example, include:\n- IPAM reservations\n- Firewall rules\n\nA plugin SHOULD remove as many stale resources as possible. For example, a plugin should remove any IPAM reservations associated with attachments not in the provided list. The plugin MAY assume that the isolation domain (e.g. network namespace) has been deleted, and thus any resources (e.g. network interfaces) therein have been removed.\n\nPlugins should generally complete a `GC` action without error. If an error is encountered, a plugin should continue; removing as many resources as possible, and report the errors back to the runtime.\n\nPlugins MUST, additionally, forward any GC calls to delegated plugins they are configured to use (see section 4).\n\nThe runtime MUST NOT use GC as a substitute for DEL. Plugins may be unable to clean up some resources from GC that they would have been able to clean up from DEL.\n\n**Input:**\n\nThe runtime must provide a JSON-serialized plugin configuration object (defined below) on standard in. It contains an additional key;\n\n- `cni.dev/valid-attachments` (array of objects): The list of **still valid** attachments to this network:\n    - `containerID` (string): the value of CNI_CONTAINERID as provided during the CNI ADD operation\n    - `ifname` (string): the value of CNI_IFNAME as provided during the CNI ADD operation\n\nRequired environment parameters:\n- `CNI_COMMAND`\n- `CNI_PATH`\n\n**Output:**\nNo output on success, [\"error\" result structure](#Error) on error.\n\n\n## Section 3: Execution of Network Configurations\n\nThis section describes how a container runtime interprets a network configuration (as defined in section 1) and executes plugins accordingly. A runtime may wish to _add_, _delete_, or _check_ a network configuration in a container. This results in a series of plugin `ADD`, `DELETE`, or `CHECK` executions, correspondingly. This section also defines how a network configuration is transformed and provided to the plugin.\n\nThe operation of a network configuration on a container is called an _attachment_. An attachment may be uniquely identified by the `(CNI_CONTAINERID, CNI_IFNAME)` tuple.\n\n### Lifecycle & Ordering\n\n- The container runtime must create a new network namespace for the container before invoking any plugins.\n- The container runtime must not invoke parallel operations for the same container, but is allowed to invoke parallel operations for different containers. This includes across multiple attachments.\n  - **Exception**: The runtime must exclusively execute either _gc_ or _add_ and _delete_. The runtime must ensure that no _add_ or _delete_ operations are in progress before executing _gc_, and must wait for _gc_ to complete before issuing new _add_ or _delete_ commands.\n- Plugins must handle being executed concurrently across different containers. If necessary, they must implement locking on shared resources (e.g. IPAM databases).\n- The container runtime must ensure that _add_ is eventually followed by a corresponding _delete_. The only exception is in the event of catastrophic failure, such as node loss. A _delete_ must still be executed even if the _add_ fails.\n- _delete_ may be followed by additional _deletes_.\n- The network configuration should not change between _add_ and _delete_.\n- The network configuration should not change between _attachments_.\n- The container runtime is responsible for cleanup of the container's network namespace.\n\n### Attachment Parameters\nWhile a network configuration should not change between _attachments_, there are certain parameters supplied by the container runtime that are per-attachment. They are:\n\n- **Container ID:** A unique plaintext identifier for a container, allocated by the runtime. Must not be empty.  Must start with an alphanumeric character, optionally followed by any combination of one or more alphanumeric characters, underscore (), dot (.) or hyphen (-). During execution, always set as the  `CNI_CONTAINERID` parameter.\n- **Namespace**: A reference to the container's \"isolation domain\". If using network namespaces, then a path to the network namespace (e.g. `/run/netns/[nsname]`). During execution, always set as the `CNI_NETNS` parameter.\n- **Container interface name**: Name of the interface to create inside the container. During execution, always set as the `CNI_IFNAME` parameter.\n- **Generic Arguments**: Extra arguments, in the form of key-value string pairs, that are relevant to a specific attachment.  During execution, always set as the `CNI_ARGS` parameter.\n- **Capability Arguments**: These are also key-value pairs. The key is a string, whereas the value is any JSON-serializable type. The keys and values are defined by [convention](CONVENTIONS.md).\n\nFurthermore, the runtime must be provided a list of paths to search for CNI plugins. This must also be provided to plugins during execution via the `CNI_PATH` environment variable.\n\n### Adding an attachment\nFor every configuration defined in the `plugins` key of the network configuration,\n1. Look up the executable specified in the `type` field. If this does not exist, then this is an error.\n2. Derive request configuration from the plugin configuration, with the following parameters:\n    - If this is the first plugin in the list, no previous result is provided,\n    - For all additional plugins, the previous result is the result of the previous plugins.\n3. Execute the plugin binary, with `CNI_COMMAND=ADD`. Provide parameters defined above as environment variables. Supply the derived configuration via standard in.\n4. If the plugin returns an error, halt execution and return the error to the caller.\n\nThe runtime must store the result returned by the final plugin persistently, as it is required for _check_ and _delete_ operations.\n\n### Deleting an attachment\nDeleting a network attachment is much the same as adding, with a few key differences:\n- The list of plugins is executed in **reverse order**\n- The previous result provided is always the final result of the _add_ operation.\n\nFor every plugin defined in the `plugins` key of the network configuration, *in reverse order*,\n1. Look up the executable specified in the `type` field. If this does not exist, then this is an error.\n2. Derive request configuration from the plugin configuration, with the previous result from the initial _add_ operation.\n3. Execute the plugin binary, with `CNI_COMMAND=DEL`. Provide parameters defined above as environment variables. Supply the derived configuration via standard in.\n4. If the plugin returns an error, halt execution and return the error to the caller.\n\nIf all plugins return success, return success to the caller.\n\n### Checking an attachment\nThe runtime may also ask every plugin to confirm that a given attachment is still functional. The runtime must use the same attachment parameters as it did for the _add_ operation.\n\nChecking is similar to add with two exceptions:\n- the previous result provided is always the final result of the _add_ operation.\n- If the network configuration defines `disableCheck`, then always return success to the caller.\n\nFor every plugin defined in the `plugins` key of the network configuration,\n1. Look up the executable specified in the `type` field. If this does not exist, then this is an error.\n2. Derive request configuration from the plugin configuration, with the previous result from the initial _add_ operation.\n3. Execute the plugin binary, with `CNI_COMMAND=CHECK`. Provide parameters defined above as environment variables. Supply the derived configuration via standard in.\n4. If the plugin returns an error, halt execution and return the error to the caller.\n\nIf all plugins return success, return success to the caller.\n\n### Garbage-collecting a network\nThe runtime may also ask every plugin in a network configuration to clean up any stale resources via the _GC_ command.\n\nWhen garbage-collecting a configuration, there are no [Attachment Parameters](#attachment-parameters).\n\nFor every plugin defined in the `plugins` key of the network configuration,\n1. Look up the executable specified in the `type` field. If this does not exist, then this is an error.\n2. Derive request configuration from the plugin configuration.\n3. Execute the plugin binary, with `CNI_COMMAND=GC`. Supply the derived configuration via standard in.\n4. If the plugin returns an error, **continue** with execution, returning all errors to the caller.\n\nIf all plugins return success, return success to the caller.\n\n### Deriving request configuration from plugin configuration\nThe network configuration format (which is a list of plugin configurations to execute) must be transformed to a format understood by the plugin (which is a single plugin configuration). This section describes that transformation.\n\nThe request configuration for a single plugin invocation is also JSON. It consists of the plugin configuration, primarily unchanged except for the specified additions and removals.\n\nThe following fields are always to be inserted into the request configuration by the runtime:\n- `cniVersion`: the protocol version selected by the runtime - the string \"1.1.0\"\n- `name`: taken from the `name` field of the network configuration\n\n\nFor attachment-specific operations (ADD, DEL, CHECK), additional field requirements apply:\n- `runtimeConfig`: the runtime must insert an object consisting of the union of capabilities provided by the plugin and requested by the runtime (more details below). \n- `prevResult`: the runtime must insert consisting of the result type returned by the \"previous\" plugin. The meaning of \"previous\" is defined by the specific operation (_add_, _delete_, or _check_). This field must not be set for the first _add_ in a chain.\n- `capabilities`: must not be set\n\nFor GC operations:\n- `cni.dev/valid-attachments`: as specified in section 2.\n\nAll other fields not prefixed with `cni.dev/` should be passed through unaltered.\n\n#### Deriving `runtimeConfig`\n\nWhereas CNI_ARGS are provided to all plugins, with no indication if they are going to be consumed, _Capability arguments_ need to be declared explicitly in configuration. The runtime, thus, can determine if a given network configuration supports a specific _capability_. Capabilities are not defined by the specification - rather, they are documented [conventions](CONVENTIONS.md).\n\nAs defined in section 1, the plugin configuration includes an optional key, `capabilities`. This example shows a plugin that supports the `portMapping` capability:\n\n```json\n{\n  \"type\": \"myPlugin\",\n  \"capabilities\": {\n    \"portMappings\": true\n  }\n}\n```\n\nThe `runtimeConfig` parameter is derived from the `capabilities` in the network configuration and the _capability arguments_ generated by the runtime. Specifically, any capability supported by the plugin configuration and provided by the runtime should be inserted in the `runtimeConfig`.\n\nThus, the above example could result in the following being passed to the plugin as part of the execution configuration:\n```json\n{\n  \"type\": \"myPlugin\",\n  \"runtimeConfig\": {\n    \"portMappings\": [ { \"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\" } ]\n  }\n  ...\n}\n```\n\n## Section 4: Plugin Delegation\n\nThere are some operations that, for whatever reason, cannot reasonably be implemented as a discrete chained plugin. Rather, a CNI plugin may wish to delegate some functionality to another plugin. One common example of this is IP address management.\n\nAs part of its operation, a CNI plugin is expected to assign (and maintain) an IP address to the interface and install any necessary routes relevant for that interface. This gives the CNI plugin great flexibility but also places a large burden on it. Many CNI plugins would need to have the same code to support several IP management schemes that users may desire (e.g. dhcp, host-local). A CNI plugin may choose to delegate IP management to another plugin.\n\nTo lessen the burden and make IP management strategy be orthogonal to the type of CNI plugin, we define a third type of plugin -- IP Address Management Plugin (IPAM plugin), as well as a protocol for plugins to delegate functionality to other plugins.\n\nIt is however the responsibility of the CNI plugin, rather than the runtime, to invoke the IPAM plugin at the proper moment in its execution. The IPAM plugin must determine the interface IP/subnet, Gateway and Routes and return this information to the \"main\" plugin to apply. The IPAM plugin may obtain the information via a protocol (e.g. dhcp), data stored on a local filesystem, the \"ipam\" section of the Network Configuration file, etc.\n\n\n### Delegated Plugin protocol\n\nLike CNI plugins, delegated plugins are invoked by running an executable. The executable is searched for in a predefined list of paths, indicated to the CNI plugin via `CNI_PATH`. The delegated plugin must receive all the same environment variables that were passed in to the CNI plugin. Just like the CNI plugin, delegated plugins receive the network configuration via stdin and output results via stdout.\n\nDelegated plugins are provided the *complete network configuration* passed to the \"upper\" plugin. In other words, in the IPAM case, not just the `ipam` section of the configuration.\n\nSuccess is indicated by a zero return code and a _Success_ result type output to stdout.\n\n### Delegated plugin execution procedure\n\nWhen a plugin executes a delegated plugin, it should:\n- Look up the plugin binary by searching the directories provided in `CNI_PATH` environment variable.\n- Execute that plugin with the same environment and configuration that it received.\n- Ensure that the delegated plugin's stderr is output to the calling plugin's stderr.\n\nIf a plugin is executed with `CNI_COMMAND=CHECK`, `DEL`, or `GC`, it must also execute any delegated plugins. If any of the delegated plugins return error, error should be returned by the upper plugin.\n\nIf, on `ADD`, a delegated plugin fails, the \"upper\" plugin should execute again with `DEL` before returning failure.\n\n## Section 5: Result Types\n\nFor certain operations, plugins must output result information. The output should be serialized as JSON on standard out.\n\n### ADD Success\n\nPlugins must output a JSON object with the following keys upon a successful `ADD` operation:\n\n- `cniVersion`: The same version supplied on input - the string \"1.1.0\"\n- `interfaces`: An array of all interfaces created by the attachment, including any host-level interfaces:\n    - `name` (string): The name of the interface.\n    - `mac` (string): The hardware address of the interface (if applicable).\n    - `mtu`: (uint) The MTU of the interface (if applicable).\n    - `sandbox` (string): The isolation domain reference (e.g. path to network namespace) for the interface, or empty if on the host. For interfaces created inside the container, this should be the value passed via `CNI_NETNS`.\n    - `socketPath` (string, optional): An absolute path to a socket file corresponding to this interface, if applicable.\n    - `pciID` (string, optional): The platform-specific identifier of the PCI device corresponding to this interface, if applicable.\n- `ips`: IPs assigned by this attachment. Plugins may include IPs assigned external to the container.\n    - `address` (string): an IP address in CIDR notation (eg \"192.168.1.3/24\").\n    - `gateway` (string): the default gateway for this subnet, if one exists.\n    - `interface` (uint): the index into the `interfaces` list for a [CNI Plugin Result](#result) indicating which interface this IP configuration should be applied to.\n- `routes`: Routes created by this attachment:\n    - `dst`: The destination of the route, in CIDR notation\n    - `gw`: The next hop address. If unset, a value in `gateway` in the `ips` array may be used.\n    - `mtu` (uint): The MTU (Maximum transmission unit) along the path to the destination.\n    - `advmss` (uint): The MSS (Maximal Segment Size) to advertise to these destinations when establishing TCP connections.\n    - `priority` (uint): The priority of route, lower is higher.\n    - `table` (uint): The table to add the route to.\n    - `scope` (uint): The scope of the destinations covered by the route prefix (global (0), link (253), host (254)).\n- `dns`: a dictionary consisting of DNS configuration information\n    - `nameservers` (list of strings): list of a priority-ordered list of DNS nameservers that this network is aware of. Each entry in the list is a string containing either an IPv4 or an IPv6 address.\n    - `domain` (string): the local domain used for short hostname lookups.\n    - `search` (list of strings): list of priority ordered search domains for short hostname lookups. Will be preferred over `domain` by most resolvers.\n    - `options` (list of strings): list of options that can be passed to the resolver.\n\nPlugins provided a `prevResult` key as part of their request configuration must output it as their result, with any possible modifications made by that plugin included. If a plugin makes no changes that would be reflected in the _Success result_ type, then it must output a result equivalent to the provided `prevResult`.\n\n#### Delegated plugins (IPAM)\nDelegated plugins may omit irrelevant sections.\n\nDelegated IPAM plugins must return an abbreviated _Success_ object. Specifically, it is missing the `interfaces` array, as well as the `interface` entry in `ips`.\n\n\n### VERSION Success\n\nPlugins must output a JSON object with the following keys upon a `VERSION` operation:\n\n- `cniVersion`: The value of `cniVersion` specified on input\n- `supportedVersions`: A list of supported specification versions\n\nExample:\n```json\n{\n    \"cniVersion\": \"1.0.0\",\n    \"supportedVersions\": [ \"0.1.0\", \"0.2.0\", \"0.3.0\", \"0.3.1\", \"0.4.0\", \"1.0.0\" ]\n}\n```\n\n### Error\n\nPlugins should output a JSON object with the following keys if they encounter an error:\n\n- `cniVersion`: The protocol version in use - \"1.1.0\"\n- `code`: A numeric error code, see below for reserved codes.\n- `msg`: A short message characterizing the error.\n- `details`: A longer message describing the error.\n\nExample:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"code\": 7,\n  \"msg\": \"Invalid Configuration\",\n  \"details\": \"Network 192.168.0.0/31 too small to allocate from.\"\n}\n```\n\nError codes 0-99 are reserved for well-known errors. Values of 100+ can be freely used for plugin specific errors.\n\nError Code|Error Description\n---|---\n `1`|Incompatible CNI version\n `2`|Unsupported field in network configuration. The error message must contain the key and value of the unsupported field.\n `3`|Container unknown or does not exist. This error implies the runtime does not need to perform any container network cleanup (for example, calling the `DEL` action on the container).\n `4`|Invalid necessary environment variables, like CNI_COMMAND, CNI_CONTAINERID, etc. The error message must contain the names of invalid variables.\n `5`|I/O failure. For example, failed to read network config bytes from stdin.\n `6`|Failed to decode content. For example, failed to unmarshal network config from bytes or failed to decode version info from string.\n `7`|Invalid network config. If some validations on network configs do not pass, this error will be raised.\n `11`|Try again later. If the plugin detects some transient condition that should clear up, it can use this code to notify the runtime it should re-try the operation later.\n\nIn addition, stderr can be used for unstructured output such as logs.\n\n### Version\n\nPlugins must output a JSON object with the following keys upon a `VERSION` operation:\n\n- `cniVersion`: The value of `cniVersion` specified on input\n- `supportedVersions`: A list of supported specification versions\n\nExample:\n```json\n{\n    \"cniVersion\": \"1.1.0\",\n    \"supportedVersions\": [ \"0.1.0\", \"0.2.0\", \"0.3.0\", \"0.3.1\", \"0.4.0\", \"1.0.0\", \"1.1.0\" ]\n}\n```\n\n\n## Appendix: Examples\nWe assume the network configuration [shown above](#Example-configuration) in section 1. For this attachment, the runtime produces `portmap` and `mac` capability args, along with the generic argument \"argA=foo\".\nThe examples uses `CNI_IFNAME=eth0`.\n\n### Add example\n\nThe container runtime would perform the following steps for the `add` operation.\n\n\n1) Call the `bridge` plugin with the following JSON, `CNI_COMMAND=ADD`:\n\n```json\n{\n    \"cniVersion\": \"1.1.0\",\n    \"name\": \"dbnet\",\n    \"type\": \"bridge\",\n    \"bridge\": \"cni0\",\n    \"keyA\": [\"some more\", \"plugin specific\", \"configuration\"],\n    \"ipam\": {\n        \"type\": \"host-local\",\n        \"subnet\": \"10.1.0.0/16\",\n        \"gateway\": \"10.1.0.1\"\n    },\n    \"dns\": {\n        \"nameservers\": [ \"10.1.0.1\" ]\n    }\n}\n```\n\nThe bridge plugin, as it delegates IPAM to the `host-local` plugin, would execute the `host-local` binary with the exact same input, `CNI_COMMAND=ADD`.\n\nThe `host-local` plugin returns the following result:\n\n```json\n{\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\"\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n}\n```\n\nThe bridge plugin returns the following result, configuring the interface according to the delegated IPAM configuration:\n\n```json\n{\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"99:88:77:66:55:44\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n}\n```\n\n2) Next, call the `tuning` plugin, with `CNI_COMMAND=ADD`. Note that `prevResult` is supplied, along with the `mac` capability argument. The request configuration passed is:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"tuning\",\n  \"sysctl\": {\n    \"net.core.somaxconn\": \"500\"\n  },\n  \"runtimeConfig\": {\n    \"mac\": \"00:11:22:33:44:66\"\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"99:88:77:66:55:44\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\nThe plugin returns the following result. Note that the **mac** has changed.\n\n```json\n{\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n}\n```\n\n3) Finally, call the `portmap` plugin, with `CNI_COMMAND=ADD`. Note that `prevResult` matches that returned by `tuning`:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"portmap\",\n  \"runtimeConfig\": {\n    \"portMappings\" : [\n      { \"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\" }\n    ]\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\nThe `portmap` plugin outputs the exact same result as that returned by `bridge`, as the plugin has not modified anything that would change the result (i.e. it only created iptables rules).\n\n\n### Check example\n\nGiven the previous _Add_, the container runtime would perform the following steps for the _Check_ action:\n\n1) First call the `bridge` plugin with the following request configuration, including the `prevResult` field containing the final JSON response from the _Add_ operation, **including the changed mac**. `CNI_COMMAND=CHECK`\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"bridge\",\n  \"bridge\": \"cni0\",\n  \"keyA\": [\"some more\", \"plugin specific\", \"configuration\"],\n  \"ipam\": {\n    \"type\": \"host-local\",\n    \"subnet\": \"10.1.0.0/16\",\n    \"gateway\": \"10.1.0.1\"\n  },\n  \"dns\": {\n    \"nameservers\": [ \"10.1.0.1\" ]\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\nThe `bridge` plugin, as it delegates IPAM, calls `host-local`, `CNI_COMMAND=CHECK`. It returns no error.\n\nAssuming the `bridge` plugin is satisfied, it produces no output on standard out and exits with a 0 return code.\n\n2) Next call the `tuning` plugin with the following request configuration:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"tuning\",\n  \"sysctl\": {\n    \"net.core.somaxconn\": \"500\"\n  },\n  \"runtimeConfig\": {\n    \"mac\": \"00:11:22:33:44:66\"\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\nLikewise, the `tuning` plugin exits indicating success.\n\n3) Finally, call `portmap` with the following request configuration:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"portmap\",\n  \"runtimeConfig\": {\n    \"portMappings\" : [\n      { \"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\" }\n    ]\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\n\n### Delete example\n\nGiven the same network configuration JSON list, the container runtime would perform the following steps for the _Delete_ action.\nNote that plugins are executed in reverse order from the _Add_ and _Check_ actions.\n\n1) First, call `portmap` with the following request configuration, `CNI_COMMAND=DEL`:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"portmap\",\n  \"runtimeConfig\": {\n    \"portMappings\" : [\n      { \"hostPort\": 8080, \"containerPort\": 80, \"protocol\": \"tcp\" }\n    ]\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\n\n2) Next, call the `tuning` plugin with the following request configuration, `CNI_COMMAND=DEL`:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"tuning\",\n  \"sysctl\": {\n    \"net.core.somaxconn\": \"500\"\n  },\n  \"runtimeConfig\": {\n    \"mac\": \"00:11:22:33:44:66\"\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\n3) Finally, call `bridge`:\n\n```json\n{\n  \"cniVersion\": \"1.1.0\",\n  \"name\": \"dbnet\",\n  \"type\": \"bridge\",\n  \"bridge\": \"cni0\",\n  \"keyA\": [\"some more\", \"plugin specific\", \"configuration\"],\n  \"ipam\": {\n    \"type\": \"host-local\",\n    \"subnet\": \"10.1.0.0/16\",\n    \"gateway\": \"10.1.0.1\"\n  },\n  \"dns\": {\n    \"nameservers\": [ \"10.1.0.1\" ]\n  },\n  \"prevResult\": {\n    \"ips\": [\n        {\n          \"address\": \"10.1.0.5/16\",\n          \"gateway\": \"10.1.0.1\",\n          \"interface\": 2\n        }\n    ],\n    \"routes\": [\n      {\n        \"dst\": \"0.0.0.0/0\"\n      }\n    ],\n    \"interfaces\": [\n        {\n            \"name\": \"cni0\",\n            \"mac\": \"00:11:22:33:44:55\"\n        },\n        {\n            \"name\": \"veth3243\",\n            \"mac\": \"55:44:33:22:11:11\"\n        },\n        {\n            \"name\": \"eth0\",\n            \"mac\": \"00:11:22:33:44:66\",\n            \"sandbox\": \"/var/run/netns/blue\"\n        }\n    ],\n    \"dns\": {\n      \"nameservers\": [ \"10.1.0.1\" ]\n    }\n  }\n}\n```\n\nThe bridge plugin executes the `host-local` delegated plugin with `CNI_COMMAND=DEL` before returning.\n"
        },
        {
          "name": "cnitool",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.63671875,
          "content": "module github.com/containernetworking/cni\n\ngo 1.21\n\nrequire (\n\tgithub.com/onsi/ginkgo/v2 v2.20.1\n\tgithub.com/onsi/gomega v1.34.1\n\tgithub.com/vishvananda/netns v0.0.4\n)\n\nrequire (\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect\n\tgithub.com/google/go-cmp v0.6.0 // indirect\n\tgithub.com/google/pprof v0.0.0-20240727154555-813a5fbdbec8 // indirect\n\tgolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 // indirect\n\tgolang.org/x/net v0.28.0 // indirect\n\tgolang.org/x/sys v0.23.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n\tgolang.org/x/tools v0.24.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 3.052734375,
          "content": "github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/pprof v0.0.0-20240727154555-813a5fbdbec8 h1:FKHo8hFI3A+7w0aUQuYXQ+6EN5stWmeY/AZqtM8xk9k=\ngithub.com/google/pprof v0.0.0-20240727154555-813a5fbdbec8/go.mod h1:K1liHPHnj73Fdn/EKuT8nrFqBihUSKXoLYU0BuatOYo=\ngithub.com/onsi/ginkgo/v2 v2.20.1 h1:YlVIbqct+ZmnEph770q9Q7NVAz4wwIiVNahee6JyUzo=\ngithub.com/onsi/ginkgo/v2 v2.20.1/go.mod h1:lG9ey2Z29hR41WMVthyJBGUBcBhGOtoPF2VFMvBXFCI=\ngithub.com/onsi/gomega v1.34.1 h1:EUMJIKUjM8sKjYbtxQI9A4z2o+rruxnzNvpknOXie6k=\ngithub.com/onsi/gomega v1.34.1/go.mod h1:kU1QgUvBDLXBJq618Xvm2LUX6rSAfRaFRTcdOeDLwwY=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/vishvananda/netns v0.0.4 h1:Oeaw1EM2JMxD51g9uhtC0D7erkIjgmj8+JZc26m1YX8=\ngithub.com/vishvananda/netns v0.0.4/go.mod h1:SpkAiCQRtJ6TvvxPnOSyH3BMl6unz3xZlaprSwhNNJM=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/sys v0.23.0 h1:YfKFowiIMvtgl1UERQoTPPToxltDeZfbj4H7dVUCwmM=\ngolang.org/x/sys v0.23.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.24.0 h1:J1shsA93PJUEVaUSaay7UXAyE8aimq3GW0pjlolpa24=\ngolang.org/x/tools v0.24.0/go.mod h1:YhNqVBIfWHdzvTLs0d8LCuMhkKUgSUKldakyV7W/WDQ=\ngoogle.golang.org/protobuf v1.34.1 h1:9ddQBjfCyZPOHPUiPxpYESBLc+T8P3E+Vo4IbKZgFWg=\ngoogle.golang.org/protobuf v1.34.1/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "libcni",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 11.33203125,
          "content": null
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 0.8154296875,
          "content": "#!/usr/bin/env bash\nset -euo pipefail\n\n# switch into the repo root directory\ncd \"$(dirname $0)\"\n\nPKGS=${PKGS:-$(go list ./... | xargs echo)}\n\necho -n \"Running tests \"\nif [ ! -z \"${COVERALLS:-\"\"}\" ]; then\n    # coverage profile only works per-package\n    echo \"with coverage profile generation...\"\n    i=0\n    for t in ${PKGS}; do\n        go test -covermode set -coverprofile ${i}.coverprofile \"${t}\"\n        i=$((i+1))\n    done\nelse\n    echo \"without coverage profile generation...\"\n    go test ${PKGS}\nfi\n\necho \"Checking license header...\"\nlicRes=$(\n       for file in $(find . -type f -iname '*.go'); do\n               head -n1 \"${file}\" | grep -Eq \"(Copyright|generated)\" || echo -e \"  ${file}\"\n       done\n)\nif [ -n \"${licRes}\" ]; then\n       echo -e \"license header checking failed:\\n${licRes}\"\n       exit 255\nfi\n\necho \"Success\"\n"
        }
      ]
    }
  ]
}