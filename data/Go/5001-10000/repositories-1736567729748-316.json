{
  "metadata": {
    "timestamp": 1736567729748,
    "page": 316,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-archive/classicswarm",
      "stars": 5752,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0068359375,
          "content": "/swarm\n"
        },
        {
          "name": ".godir",
          "type": "blob",
          "size": 0.0234375,
          "content": "github.com/docker/swarm\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.8046875,
          "content": "language: go\n\ngo:\n  - \"1.11.x\"\n  - \"1.12.x\"\n\n# let us have speedy Docker-based Travis workers\nsudo: false\n\ninstall:\n  # Symlink below is needed for Travis CI to work correctly on personal forks of swarm\n  - ln -s $HOME/gopath/src/github.com/${TRAVIS_REPO_SLUG///swarm/} $HOME/gopath/src/github.com/docker\n  - go get golang.org/x/lint/golint\n  - go get github.com/GeertJohan/fgt\n\nscript:\n  - script/validate-gofmt\n  - go vet `go list ./... | grep -v /vendor/`\n  - fgt golint ./... | grep -v vendor/ | tee /dev/stderr\n  # Lint shell files and make sure they are not space indented.\n  - fgt find test/ -type f \\( -name \"*.sh\" -or -name \"*.bash\" -or -name \"*.bats\" \\) -exec grep -Hn -e \"^ \" {} \\;\n  - GOOS=darwin go build\n  - GOOS=windows go build\n  - GOOS=linux go build\n  - go test -v -race `go list ./... | grep -v /vendor/`\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 11.7216796875,
          "content": "# Changelog\n\n## 1.2.8 (2017-07-11)\n\n#### API\n\n- Support asterisks in image reference filter\n\n#### Networking\n\n- Fix panic when network is created without connecting to any containers\n\n## 1.2.7 (2017-06-30)\n\n#### API\n\n- Add name filter for `network ls`\n- Allow control over where volumes get created with a whitelist label\n- Immediately flush response headers for ContainerWait requests\n- Add support for network filters on containers and label filters on volumes\n- Don't throw away most of the JSONMessage content when pulling images\n- Add progress reporting during image pulls\n- Add filter to list dangling images\n- Add OSType as a label for node constraints\n- Don't fail docker pull operations when running both Linux and Windows nodes\n- Add support for some new image build options\n- Node filters for networks and volumes\n\n#### Events\n\n- Move events handling to use watch queues from `github.com/docker/swarmkit`\n- Event stream retry interval capped to 10 seconds\n\n#### Networking\n\n- Fix refresh loop after `network ls` stopped returning containers attached to networks (for newer API versions)\n\n#### Discovery\n\n- Deprecate Docker Hub discovery (token based); to be removed in an upcoming release\n\n#### Misc\n\n- Move vendoring to use `github.com/LK4D4/vndr` instead of Godeps\n- Fix several test failures\n- Parallelize engine operations\n\n## 1.2.6 (2017-01-17)\n\n#### API\n\n- Add options to refresh engine container cache on filters\n- Support name filter in volume list\n- Support more filters in network list operations\n- Support node whitelist filter\n- Switch from engine-api to docker/api/type and docker/clients\n- Pass size parameter through on container inspect\n\n#### Scheduler\n\n- For container network disconnect requests, tryworker engine with the container first\n- Precompile filter regular expression to reduce PU usage\n- Remove setTCPUserTimeout to avoid TCP connection leak\n- Fix network endpoints for rescheduling\n- Give up leadership when manager shuts down\n\n#### Cluster Management\n\n- Remove dependency on IPv4 addresses\n- Support event top, resize, commit and so on to avoid unnecessary refreshing\n- Sequentialize event monitor to an engine to avoid data race\n- When an active engine sends EOF on event stream, restart event monitor so we don't lose events\n- When proxying a request, cancel request if user connection is broken\n\n#### MISC\n\n- Update go-zookeeper to fix a lock spin problem\n- Migrate documentation to https://github.com/docker/docker.github.io/tree/master/swarm\n- Update Swarm CI to use go 1.7.1\n- support GOARCH to be able to build for other architectures\n- Send Swarm logs to stdout\n\n## 1.2.5 (2016-08-18)\n\n#### Scheduler\n\n- Fix container rescheduling with overlay network\n- Fix scheduler detail log improper effect when container name is empty\n- Check unique container name on create and rename for Mesos cluster\n\n#### Health check\n\n- Refresh container status on health_status events\n\n#### Doc\n\n- Fix install-w-machine.md using docker-machine --swarm feature\n\n## 1.2.4 (2016-07-28)\n\n#### API\n\n- New client interface in Swarm, to differentiate from Swarm mode in Docker 1.12\n- Underlying HTTP client for API is created inside Swarm\n- Update minimum Docker Engine version supported by Swarm to 1.8\n- Additional error handling\n- Code refactoring\n\n#### Networking\n\n- Fix concurrent map writes race condition\n- Refresh single network when network event is emitted (performance improvement)\n- Avoid network refresh when creating container (performance improvement)\n\n#### Volumes\n\n- Refresh single volume when volume event is emitted (performance improvement)\n- Avoid volume refresh when creating container (performance improvement)\n\n#### Events\n\n- Support daemon events for Swarm\n\n#### Test\n\n- Fix leader election tests\n- Fix rescheduling test\n\n#### Mesos\n\n- Fix double locking issue\n\n#### Misc\n\n- Handle systime difference between Swarm and Engines\n- Add healthcheck information to CLI\n- Fix `engine_reconnect` issue that led to reconnected engine being treated as new\n\n## 1.2.3 (2016-05-25)\n\n#### API\n\n- Update `engine-api` vendoring (supports new functions and signatures)\n- Fix registry auth bug for image pulls\n\n## 1.2.2 (2016-05-05)\n\n#### Cluster management\n\n- Fix deadlock that causes Swarm to hang\n\n## 1.2.1 (2016-05-03)\n\n#### Scheduler\n\n- Add containerslots filter to allow user to limit container number on a node\n\n#### API\n\n- Use engine-api to handle large number of API calls\n- Update ContainerConfig to embed HostConfig and NetworkingConfig\n- stop/restart/kill a non-existent container should return 500 rather than 404\n- Return an error when assertion fails in hijack\n- Return an error when Image Pull fails\n- Fix image pull bug (wait until download finishes)\n- Fix and document some api response status codes\n- Add NodeID in docker info\n- Support docker ps --filter by volume\n\n#### Build\n\n- Move dependencies to vendor/\n- Update Image Pull to use docker/distribution package\n- Convert docs Dockerfiles to use docs/base:oss\n\n#### Test\n\n- Fix api/ps tests\n- Update api/stats test to prevent timeout on master branch\n- Use --cpu-shares instead of -c in integration test\n\n#### Misc\n\n- Documentation clean up\n- Close http response body to avoid potential memory leak\n- Switch context.TODO() to context.Background() to enable context setting\n\n## 1.2.0 (2016-04-13)\n\n#### Scheduler\n\n- Move rescheduling out of experimental\n- Differentiate constraint errors from affinity errors\n- Printing unsatisfiable constraints for container scheduling failure\n- Enable rescheduling on master manager to prevent replica managers from rescheduling containers\n- Output error when starting a rescheduled container fails, and when removing container fails at node recovery\n- Validate cluster swarm.overcommit option\n\n#### API\n\n- Introduce engine-api client to Swarm\n- Implement 'info' and 'version' with engine-api\n- Use apiClient for some volume, network, image operations\n- Print engine version in Info\n- Fix swarm api response status code\n- Support ps node filter\n- Fix HostConfig for /start endpoint\n- Print container 'created' state at ps\n- Update dockerclient to get labels on volumes, networks, images\n- Support private images, labels and other new flags in docker build\n- Select apiClient version according to node docker version\n\n#### Node management\n\n- Prevent crash on channel double close\n- Manager retries EventMonitoring on failure.\n- Docker engine updates hostname/domainname\n- Force inspect for containers in Restarting state.\n- Increase max thread count to 50k to accommodate large cluster or heavy workload\n- Force to validate min and max refresh interval to be positive\n- Skip unstable tests from Docker bug 14203\n- Fix race condition between node removal from discovery and scheduler\n- Fix data race with node failureCount\n- Display warning message if an engine has labels with \"node=xxx\"\n\n#### Discovery\n\n- Remove parameter which is not used in createDiscovery\n- Fix Consul leader election failure on multi-server\n\n#### Mesos integration\n\n- Support rescind offer in swarm\n- Update mesos tests\n\n#### Misc\n\n- Update golang version to 1.5.4\n- Skip redundant endpoints in \"network inspect\"\n- Validate duration flags:--delay, --timeout, --replication-ttl\n- Fix image matching via id\n- Make port 0 invalid as listening port\n- Improve volume inspect test\n- Add read lock for eventsHandler when only it is necessary\n\n## 1.1.3 (2016-03-03)\n\n- Fix missing HostConfig for rescheduled containers\n- Fix TCP connections leak\n- Support `docker run --net <node>/<network> ...`\n- Fix CORS issue in the API\n\n## 1.1.2 (2016-02-18)\n\n- Fix regression with Docker Compose\n\n## 1.1.1 (2016-02-17)\n\n- Performance improvements around networking with Docker engine 1.10\n- Fix reschedule issue regarding events\n- Implement engine refresh backoff strategy for failing nodes\n\n## 1.1.0 (2016-02-04)\n\n#### Scheduler\n\n- Add support for container rescheduling on node failure. (experimental)\n- Use failureCount as a secondary health indicator\n- Add swarm container create retry option\n- Fixed the way soft affinities and handled\n\n#### API\n\n- Support private registry on docker run\n- Expose error and last update time in docker info\n- Sort images by Created\n- Fix error when inspect on unhealthy node\n- Prevent panic in filters when container has no name\n- Add buildtime, kernelversion and experimental to API version\n- Support docker update and new networking related flags in run & network create/connect/disconnect/ls\n- Require `--all` on docker ps to display containers on unhealthy nodes\n- Retry on docker events EOF\n\n#### Node Management\n\n- Add a random delay to avoid synchronized registration at swarm join\n- Use engine connection error to fail engine fast\n- Introduce pending state\n\n#### Mesos integration\n\n- Rename slave to agent\n- Upgrade tests to use mesos 0.25\n- Code refactors\n- Improve debug output\n- Enable checkpoint failover in FrameworkInfo\n- Fix timeout when pulling images\n- Add timeout to refuse offers\n- Fix double start issue\n\n#### Misc\n\n- Fix license grant\n- Documentation update\n- Use discovery from docker/docker\n\n## 1.0.1 (2015-12-09)\n\n#### Scheduler\n\n- Set labels for pending containers to fix scheduler failure\n\n#### Discovery\n\n- Increase default TTL and heartbeat values to reduce traffic to discovery\n\n#### API\n\n- Fix 'ps -a' panic issue\n- Fix network connect/disconnect for overlay network\n- Fix connection leak on TLS connections\n- Fix CLI hang on events command\n- Fix newline issue with events\n- Improve OPTIONS handler\n- Fix image digest\n- Fix memoryswappiness default value\n- Enable profiling for HTTP in debug mode\n\n#### Node Update\n\n- Provide options on swarm node update frequency\n\n#### Mesos integration\n\n- Change offers timeout default to prevent other frameworks starvation\n- Improve error output for bad swarm mesos user\n- Fix connection failure when using Mesos with ZooKeeper\n\n#### Misc\n\n- Update to Go 1.5.2\n- Documentation update\n\n## 1.0 (2015-10-13)\n\n#### Scheduler\n\n- Swarm is now pulling Images in parallel after the scheduling decision has been made, which mitigates the error happening occasionally with Docker pulls blocking the entire scheduler.\n\n#### General stability\n\n- The Node refresh loop process has been improved and does not yield to a panic when removing an Engine and trying to refresh the state at the same time.\n- The refresh loop has been randomized to better handle huge scale scenarios (> 1000 nodes) where a *refresh burst* could occur and make the Manager unstable/fail.\n- General improvements and fixes for the Mesos experimental backend for swarm.\n\n#### Integration with libnetwork / Support for overlay networking\n\n- It is now possible to use the new networking features with Swarm through the `network` sub-system. Commands like `docker network create`, `docker network attach` and `docker network ls` are now available through swarm.\n\n#### Integration with Docker Volume Plugins\n\n- You can now use the docker volume plugin subsystem available with `docker volume`.\n\n#### Leader Election\n\n- You can now specify the `--replication-ttl` flag to control how long it takes for Replicas to be notified of the Primary failure and take over the lead.\n\n#### TLS\n\n- This is now possible to use TLS with discovery for `consul` and `etcd` using the new `--discovery-opt` flag.\n\n## 0.4 (2015-08-04)\n\n#### Scheduler\n\n- Reschedule with soft affinity when image cannot be pulled\n\n#### Store\n\n- Replace the store pkg by libKV\n- Fixes about consul/etcd and zookeeper\n\n#### API\n\n- Fix docker push name matching\n- Fix docker exec status code\n- Fix docker pull status code\n\n#### Docker Engine Compatibility\n\n- Improve docker info with docker client 1.7.x\n- Add SystemTime, http_proxy, https_proxy and no_proxy to docker info\n\n#### Mesos integration\n\n- Task creation timeout configurable\n- Fix issue with hostname in library image\n- Use 'docker_port' attribute if available\n- Add support for random ports\n\n#### Misc\n\n- Add doc on leader election / high availability of swarm manager\n- Lots of typos/improvements to the doc\n- Switch to golang 1.4\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 7.48046875,
          "content": "# Contributing to Swarm\n\nWant to hack on Swarm? Awesome! Here are instructions to get you\nstarted.\n\nSwarm is a part of the [Docker](https://www.docker.com) project, and follows\nthe same rules and principles. If you're already familiar with the way\nDocker does things, you'll feel right at home.\n\nOtherwise, go read Docker's\n[contributions guidelines](https://github.com/docker/docker/blob/master/CONTRIBUTING.md),\n[issue triaging](https://github.com/docker/docker/blob/master/project/ISSUE-TRIAGE.md),\n[review process](https://github.com/docker/docker/blob/master/project/REVIEWING.md) and\n[branches and tags](https://github.com/docker/docker/blob/master/project/BRANCHES-AND-TAGS.md).\n\n### Development Environment Setup\n\nSwarm is written in [the Go programming language](http://golang.org) and manages its dependencies using [vndr](http://github.com/LK4D4/vndr).  This guide will walk you through installing Go, forking the Swarm repo, building Swarm from source and contributing pull requests (PRs) back to the Swarm project.\n\n#### Install git, Go and vndr\nIf you don't already have `git` installed, you should install it.  For example, on Ubuntu:\n```sh\nsudo apt-get install git\n```\n\nDownload Go from [https://golang.org/dl/](https://golang.org/dl/).  To install on Linux:\n```sh\ntar xzvf go1.12.4.linux-amd64.tar.gz\nsudo mv go /usr/local\n```\n\n> **Note**: On Ubuntu, do not use `apt-get` to install Go.  Its repositories tend\n> to include older versions of Go.  Instead, install the latest Go manually using the\n> instructions provided on the Go site.\n\nCreate a Go project directory in your home directory:\n```sh\nmkdir ~/gocode    # any name is fine\n```\n\nAdd these to your `.bashrc`:\n```sh\nexport GOROOT=/usr/local/go\nexport GOPATH=~/gocode\nexport PATH=$PATH:$GOPATH/bin:$GOROOT/bin\n```\n\nClose and reopen your terminal.\n\nInstall vndr:\n\n```sh\ngo get github.com/LK4d4/vndr\n```\n\nInstall golint:\n\n```sh\ngo get golang.org/x/lint/golint\n```\n\n#### Fork the Swarm repo\n\nYou will create a Github fork of the Swarm repository.  You will make changes to this fork.  When your work is ready for review, open a pull request to contribute the work back to the main Swarm repo.\n\nGo to the [`docker/swarm` repo](https://github.com/docker/swarm) in a browser and click the \"Fork\" button in the top right corner.  You'll end up with your form of Swarm in `https://github.com/<username>/swarm`.\n\n(Throughout this document, `<username>` refers to your Github username.)\n\n#### Clone Swarm and set remotes\n\nNow clone the main Swarm repo:\n\n```sh\nmkdir -p $GOPATH/src/github.com/docker\ncd $GOPATH/src/github.com/docker\ngit clone https://github.com/docker/swarm.git\ncd swarm\n```\n\nFor the easiest contribution workflow, we will set up remotes as follows:\n  * `origin` is your personal fork\n  * `upstream` is `docker/swarm`\n\nRun these commands:\n\n```sh\ngit remote remove origin\ngit remote add origin https://github.com/<username>/swarm.git\ngit remote add upstream https://github.com/docker/swarm.git\ngit remote set-url --push upstream no-pushing\n```\n\nYou can check your configuration like this:\n```sh\n$ git remote -v\norigin     https://github.com/<username>/swarm.git (fetch)\norigin     https://github.com/<username>/swarm.git (push)\nupstream   https://github.com/docker/swarm.git (fetch)\nupstream   no-pushing (push)\n```\n\n#### Pull `docker/swarm` changes into your fork\n\nAs the `docker/swarm` moves forward, it will accumulate commits that are not in your personal fork.  To keep your fork up to date, you need to periodically rebase:\n\n```sh\ngit fetch upstream master\ngit rebase upstream/master\ngit push -f origin master\n```\n\nDon't worry:  fetching the upstream and rebasing will not overwrite your local changes.\n\n### Build the Swarm binary\n\nBuild the binary, installing it to `$GOPATH/bin/swarm`:\n\n```sh\ncd $GOPATH/src/github.com/docker/swarm\ngo install .\n```\n\nRun the binary you just created:\n\n```sh\n$GOPATH/bin/swarm help\n$GOPATH/bin/swarm create\n$GOPATH/bin/swarm manage token://<cluster_id>\n$GOPATH/bin/swarm join --addr=<node_ip:2375> token://<cluster_id>\n```\n\n#### Create a Swarm image for deployment\n\nSwarm is distributed as a Docker image with a single `swarm` binary inside.  To create the image:\n\n```sh\ndocker build -t my_swarm .\n```\n\nNow you can run the same commands as above using the container:\n\n```sh\ndocker run my_swarm help\ndocker run -d my_swarm join --addr=<node_ip:2375> token://<cluster_id>\ndocker run -d -p <manager_port>:2375 my_swarm manage token://<cluster_id>\n```\n\nFor complete documentation on how to use Swarm, refer to the Swarm section of [docs.docker.com](http://docs.docker.com/).\n\n\n### Run tests\n\nTo run unit tests:\n\n```sh\ngo test -v -race `go list ./... | grep -v /vendor/`\n```\n\nTo run integration tests:\n\n```sh\n./test/integration/run.sh\n```\n\nYou can use this command to check if `*.bats` files are formatted correctly:\n\n```sh\nfind test/ -type f \\( -name \"*.sh\" -or -name \"*.bash\" -or -name \"*.bats\" \\) -exec grep -Hn -e \"^ \" {} \\;\n```\n\nYou can use this command to check if `*.go` files are formatted correctly:\n\n```sh\ngolint ./...\n```\n\n### Submit a pull request (PR)\n\nSwarm welcomes your contributions back to the project!  We follow the same contribution process and principles as other Docker projects.  This tutorial describes the [Docker contribution workflow](https://docs.docker.com/opensource/workflow/make-a-contribution/).\n\nIn general, your contribution workflow for Swarm will look like this:\n\n```sh\ncd $GOPATH/src/github.com/docker/swarm\ngit checkout master                     # Make sure you have a clean master\ngit pull upstream master                #   ...before you create your branch.\ngit checkout -b issue-9999              # Create a branch for your work\nvi README.md                            # Edit a file in your branch\ngit add README.md                       # Git add your changed files\ngit commit -s -m \"Edited README\"        # Make a signed commit to your local branch\ngit push origin issue-9999              # Push your local branch to your fork\n```\n\nTo open a PR, browse to your fork at `http://github.com/<username>/swarm` and select the `issue-9999` branch from \"Branch\" drop down list.  Click the green \"New Pull Request\" button and submit your PR.  Maintainers will review your PR and merge it or provide feedback on how to improve it.\n\n\n### Revise your PR\n\nYou may receive suggested changes on your PR before it can be merged.  If you do, make the changes in the same branch, then do something like:\n\n```sh\ngit checkout issue-9999\ngit add <changed files>\ngit commit -s --amend --no-edit\ngit push -f origin issue-9999\n```\n\nGithub will magically update the open PR to add these changes.\n\n### Talk to us\n\nThe best way to chat with other Swarm developers is on freenode `#docker-swarm`.  ([See here](https://docs.docker.com/opensource/get-help/) for IRC instructions.)\n\nYou can also find maintainers' email addresses in `MAINTAINERS`.\n\n### Advanced:  Adding New Dependencies\n\nSwarm uses `github.com/LK4D4/vndr` to manage dependencies. If you add a new dependency, say `github.com/new/dependency`, then to save it, you must add it to `vendor.conf` with the commit hash. For example:\n\n```\ngithub.com/new/dependency aabc039ad04deb721e234f99cd1b4aa28ac71a40\n```\n\nAfter this, run `vndr github.com/new/dependency` to add the relevant files to `vendor/`. If you need to update existing dependencies, just update the commit hash and run `vndr github.com/existing/dependency`.\n\nTo make sure you newly added codes will make the build process happy, you can try building Swarm in the same way as defined in `Dockerfile`.\n\n```sh\ngo install\n```\nThen you should find the `swarm` binary under the `$GOBIN` directory.\n\nHappy hacking!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.5791015625,
          "content": "ARG GO_VERSION=1.12.4\n\nFROM golang:${GO_VERSION}-alpine\n\nARG GOOS\nARG GOARCH\n\nCOPY . /go/src/github.com/docker/swarm\nWORKDIR /go/src/github.com/docker/swarm\n\nRUN set -ex \\\n\t&& apk add --no-cache --virtual .build-deps \\\n\tgit \\\n\t&& GOARCH=$GOARCH GOOS=$GOOS CGO_ENABLED=0 go install -v -a -tags netgo -installsuffix netgo -ldflags \"-w -X github.com/docker/swarm/version.GITCOMMIT=$(git rev-parse --short HEAD) -X github.com/docker/swarm/version.BUILDTIME=$(date -u +%FT%T%z)\"  \\\n\t&& apk del .build-deps\n\nENV SWARM_HOST :2375\nEXPOSE 2375\n\nVOLUME $HOME/.swarm\n\nENTRYPOINT [\"swarm\"]\nCMD [\"--help\"]\n"
        },
        {
          "name": "LICENSE.code",
          "type": "blob",
          "size": 10.5107421875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2014-2015 Docker, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "LICENSE.docs",
          "type": "blob",
          "size": 19.537109375,
          "content": "Attribution-ShareAlike 4.0 International\n\n=======================================================================\n\nCreative Commons Corporation (\"Creative Commons\") is not a law firm and\ndoes not provide legal services or legal advice. Distribution of\nCreative Commons public licenses does not create a lawyer-client or\nother relationship. Creative Commons makes its licenses and related\ninformation available on an \"as-is\" basis. Creative Commons gives no\nwarranties regarding its licenses, any material licensed under their\nterms and conditions, or any related information. Creative Commons\ndisclaims all liability for damages resulting from their use to the\nfullest extent possible.\n\nUsing Creative Commons Public Licenses\n\nCreative Commons public licenses provide a standard set of terms and\nconditions that creators and other rights holders may use to share\noriginal works of authorship and other material subject to copyright\nand certain other rights specified in the public license below. The\nfollowing considerations are for informational purposes only, are not\nexhaustive, and do not form part of our licenses.\n\n     Considerations for licensors: Our public licenses are\n     intended for use by those authorized to give the public\n     permission to use material in ways otherwise restricted by\n     copyright and certain other rights. Our licenses are\n     irrevocable. Licensors should read and understand the terms\n     and conditions of the license they choose before applying it.\n     Licensors should also secure all rights necessary before\n     applying our licenses so that the public can reuse the\n     material as expected. Licensors should clearly mark any\n     material not subject to the license. This includes other CC-\n     licensed material, or material used under an exception or\n     limitation to copyright. More considerations for licensors:\n  wiki.creativecommons.org/Considerations_for_licensors\n\n     Considerations for the public: By using one of our public\n     licenses, a licensor grants the public permission to use the\n     licensed material under specified terms and conditions. If\n     the licensor's permission is not necessary for any reason--for\n     example, because of any applicable exception or limitation to\n     copyright--then that use is not regulated by the license. Our\n     licenses grant only permissions under copyright and certain\n     other rights that a licensor has authority to grant. Use of\n     the licensed material may still be restricted for other\n     reasons, including because others have copyright or other\n     rights in the material. A licensor may make special requests,\n     such as asking that all changes be marked or described.\n     Although not required by our licenses, you are encouraged to\n     respect those requests where reasonable. More_considerations\n     for the public:\n  wiki.creativecommons.org/Considerations_for_licensees\n\n=======================================================================\n\nCreative Commons Attribution-ShareAlike 4.0 International Public\nLicense\n\nBy exercising the Licensed Rights (defined below), You accept and agree\nto be bound by the terms and conditions of this Creative Commons\nAttribution-ShareAlike 4.0 International Public License (\"Public\nLicense\"). To the extent this Public License may be interpreted as a\ncontract, You are granted the Licensed Rights in consideration of Your\nacceptance of these terms and conditions, and the Licensor grants You\nsuch rights in consideration of benefits the Licensor receives from\nmaking the Licensed Material available under these terms and\nconditions.\n\n\nSection 1 -- Definitions.\n\n  a. Adapted Material means material subject to Copyright and Similar\n     Rights that is derived from or based upon the Licensed Material\n     and in which the Licensed Material is translated, altered,\n     arranged, transformed, or otherwise modified in a manner requiring\n     permission under the Copyright and Similar Rights held by the\n     Licensor. For purposes of this Public License, where the Licensed\n     Material is a musical work, performance, or sound recording,\n     Adapted Material is always produced where the Licensed Material is\n     synched in timed relation with a moving image.\n\n  b. Adapter's License means the license You apply to Your Copyright\n     and Similar Rights in Your contributions to Adapted Material in\n     accordance with the terms and conditions of this Public License.\n\n  c. BY-SA Compatible License means a license listed at\n     creativecommons.org/compatiblelicenses, approved by Creative\n     Commons as essentially the equivalent of this Public License.\n\n  d. Copyright and Similar Rights means copyright and/or similar rights\n     closely related to copyright including, without limitation,\n     performance, broadcast, sound recording, and Sui Generis Database\n     Rights, without regard to how the rights are labeled or\n     categorized. For purposes of this Public License, the rights\n     specified in Section 2(b)(1)-(2) are not Copyright and Similar\n     Rights.\n\n  e. Effective Technological Measures means those measures that, in the\n     absence of proper authority, may not be circumvented under laws\n     fulfilling obligations under Article 11 of the WIPO Copyright\n     Treaty adopted on December 20, 1996, and/or similar international\n     agreements.\n\n  f. Exceptions and Limitations means fair use, fair dealing, and/or\n     any other exception or limitation to Copyright and Similar Rights\n     that applies to Your use of the Licensed Material.\n\n  g. License Elements means the license attributes listed in the name\n     of a Creative Commons Public License. The License Elements of this\n     Public License are Attribution and ShareAlike.\n\n  h. Licensed Material means the artistic or literary work, database,\n     or other material to which the Licensor applied this Public\n     License.\n\n  i. Licensed Rights means the rights granted to You subject to the\n     terms and conditions of this Public License, which are limited to\n     all Copyright and Similar Rights that apply to Your use of the\n     Licensed Material and that the Licensor has authority to license.\n\n  j. Licensor means the individual(s) or entity(ies) granting rights\n     under this Public License.\n\n  k. Share means to provide material to the public by any means or\n     process that requires permission under the Licensed Rights, such\n     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  l. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n     the Council of 11 March 1996 on the legal protection of databases,\n     as amended and/or succeeded, as well as other essentially\n     equivalent rights anywhere in the world.\n\n  m. You means the individual or entity exercising the Licensed Rights\n     under this Public License. Your has a corresponding meaning.\n\n\nSection 2 -- Scope.\n\n  a. License grant.\n\n       1. Subject to the terms and conditions of this Public License,\n          the Licensor hereby grants You a worldwide, royalty-free,\n          non-sublicensable, non-exclusive, irrevocable license to\n          exercise the Licensed Rights in the Licensed Material to:\n\n            a. reproduce and Share the Licensed Material, in whole or\n               in part; and\n\n            b. produce, reproduce, and Share Adapted Material.\n\n       2. Exceptions and Limitations. For the avoidance of doubt, where\n          Exceptions and Limitations apply to Your use, this Public\n          License does not apply, and You do not need to comply with\n          its terms and conditions.\n\n       3. Term. The term of this Public License is specified in Section\n          6(a).\n\n       4. Media and formats; technical modifications allowed. The\n          Licensor authorizes You to exercise the Licensed Rights in\n          all media and formats whether now known or hereafter created,\n          and to make technical modifications necessary to do so. The\n          Licensor waives and/or agrees not to assert any right or\n          authority to forbid You from making technical modifications\n          necessary to exercise the Licensed Rights, including\n          technical modifications necessary to circumvent Effective\n          Technological Measures. For purposes of this Public License,\n          simply making modifications authorized by this Section 2(a)\n          (4) never produces Adapted Material.\n\n       5. Downstream recipients.\n\n            a. Offer from the Licensor -- Licensed Material. Every\n               recipient of the Licensed Material automatically\n               receives an offer from the Licensor to exercise the\n               Licensed Rights under the terms and conditions of this\n               Public License.\n\n            b. Additional offer from the Licensor -- Adapted Material.\n               Every recipient of Adapted Material from You\n               automatically receives an offer from the Licensor to\n               exercise the Licensed Rights in the Adapted Material\n               under the conditions of the Adapter's License You apply.\n\n            c. No downstream restrictions. You may not offer or impose\n               any additional or different terms or conditions on, or\n               apply any Effective Technological Measures to, the\n               Licensed Material if doing so restricts exercise of the\n               Licensed Rights by any recipient of the Licensed\n               Material.\n\n       6. No endorsement. Nothing in this Public License constitutes or\n          may be construed as permission to assert or imply that You\n          are, or that Your use of the Licensed Material is, connected\n          with, or sponsored, endorsed, or granted official status by,\n          the Licensor or others designated to receive attribution as\n          provided in Section 3(a)(1)(A)(i).\n\n  b. Other rights.\n\n       1. Moral rights, such as the right of integrity, are not\n          licensed under this Public License, nor are publicity,\n          privacy, and/or other similar personality rights; however, to\n          the extent possible, the Licensor waives and/or agrees not to\n          assert any such rights held by the Licensor to the limited\n          extent necessary to allow You to exercise the Licensed\n          Rights, but not otherwise.\n\n       2. Patent and trademark rights are not licensed under this\n          Public License.\n\n       3. To the extent possible, the Licensor waives any right to\n          collect royalties from You for the exercise of the Licensed\n          Rights, whether directly or through a collecting society\n          under any voluntary or waivable statutory or compulsory\n          licensing scheme. In all other cases the Licensor expressly\n          reserves any right to collect such royalties.\n\n\nSection 3 -- License Conditions.\n\nYour exercise of the Licensed Rights is expressly made subject to the\nfollowing conditions.\n\n  a. Attribution.\n\n       1. If You Share the Licensed Material (including in modified\n          form), You must:\n\n            a. retain the following if it is supplied by the Licensor\n               with the Licensed Material:\n\n                 i. identification of the creator(s) of the Licensed\n                    Material and any others designated to receive\n                    attribution, in any reasonable manner requested by\n                    the Licensor (including by pseudonym if\n                    designated);\n\n                ii. a copyright notice;\n\n               iii. a notice that refers to this Public License;\n\n                iv. a notice that refers to the disclaimer of\n                    warranties;\n\n                 v. a URI or hyperlink to the Licensed Material to the\n                    extent reasonably practicable;\n\n            b. indicate if You modified the Licensed Material and\n               retain an indication of any previous modifications; and\n\n            c. indicate the Licensed Material is licensed under this\n               Public License, and include the text of, or the URI or\n               hyperlink to, this Public License.\n\n       2. You may satisfy the conditions in Section 3(a)(1) in any\n          reasonable manner based on the medium, means, and context in\n          which You Share the Licensed Material. For example, it may be\n          reasonable to satisfy the conditions by providing a URI or\n          hyperlink to a resource that includes the required\n          information.\n\n       3. If requested by the Licensor, You must remove any of the\n          information required by Section 3(a)(1)(A) to the extent\n          reasonably practicable.\n\n  b. ShareAlike.\n\n     In addition to the conditions in Section 3(a), if You Share\n     Adapted Material You produce, the following conditions also apply.\n\n       1. The Adapter's License You apply must be a Creative Commons\n          license with the same License Elements, this version or\n          later, or a BY-SA Compatible License.\n\n       2. You must include the text of, or the URI or hyperlink to, the\n          Adapter's License You apply. You may satisfy this condition\n          in any reasonable manner based on the medium, means, and\n          context in which You Share Adapted Material.\n\n       3. You may not offer or impose any additional or different terms\n          or conditions on, or apply any Effective Technological\n          Measures to, Adapted Material that restrict exercise of the\n          rights granted under the Adapter's License You apply.\n\n\nSection 4 -- Sui Generis Database Rights.\n\nWhere the Licensed Rights include Sui Generis Database Rights that\napply to Your use of the Licensed Material:\n\n  a. for the avoidance of doubt, Section 2(a)(1) grants You the right\n     to extract, reuse, reproduce, and Share all or a substantial\n     portion of the contents of the database;\n\n  b. if You include all or a substantial portion of the database\n     contents in a database in which You have Sui Generis Database\n     Rights, then the database in which You have Sui Generis Database\n     Rights (but not its individual contents) is Adapted Material,\n\n     including for purposes of Section 3(b); and\n  c. You must comply with the conditions in Section 3(a) if You Share\n     all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not\nreplace Your obligations under this Public License where the Licensed\nRights include other Copyright and Similar Rights.\n\n\nSection 5 -- Disclaimer of Warranties and Limitation of Liability.\n\n  a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE\n     EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS\n     AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF\n     ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,\n     IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,\n     WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR\n     PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,\n     ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT\n     KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT\n     ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\n\n  b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE\n     TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,\n     NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,\n     INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,\n     COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR\n     USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN\n     ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR\n     DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR\n     IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\n\n  c. The disclaimer of warranties and limitation of liability provided\n     above shall be interpreted in a manner that, to the extent\n     possible, most closely approximates an absolute disclaimer and\n     waiver of all liability.\n\n\nSection 6 -- Term and Termination.\n\n  a. This Public License applies for the term of the Copyright and\n     Similar Rights licensed here. However, if You fail to comply with\n     this Public License, then Your rights under this Public License\n     terminate automatically.\n\n  b. Where Your right to use the Licensed Material has terminated under\n     Section 6(a), it reinstates:\n\n       1. automatically as of the date the violation is cured, provided\n          it is cured within 30 days of Your discovery of the\n          violation; or\n\n       2. upon express reinstatement by the Licensor.\n\n     For the avoidance of doubt, this Section 6(b) does not affect any\n     right the Licensor may have to seek remedies for Your violations\n     of this Public License.\n\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n     License.\n\n\nSection 7 -- Other Terms and Conditions.\n\n  a. The Licensor shall not be bound by any additional or different\n     terms or conditions communicated by You unless expressly agreed.\n\n  b. Any arrangements, understandings, or agreements regarding the\n     Licensed Material not stated herein are separate from and\n     independent of the terms and conditions of this Public License.\n\n\nSection 8 -- Interpretation.\n\n  a. For the avoidance of doubt, this Public License does not, and\n     shall not be interpreted to, reduce, limit, restrict, or impose\n     conditions on any use of the Licensed Material that could lawfully\n     be made without permission under this Public License.\n\n  b. To the extent possible, if any provision of this Public License is\n     deemed unenforceable, it shall be automatically reformed to the\n     minimum extent necessary to make it enforceable. If the provision\n     cannot be reformed, it shall be severed from this Public License\n     without affecting the enforceability of the remaining terms and\n     conditions.\n\n  c. No term or condition of this Public License will be waived and no\n     failure to comply consented to unless expressly agreed to by the\n     Licensor.\n\n  d. Nothing in this Public License constitutes or may be interpreted\n     as a limitation upon, or waiver of, any privileges and immunities\n     that apply to the Licensor or You, including from the legal\n     processes of any jurisdiction or authority.\n\n\n=======================================================================\n\nCreative Commons is not a party to its public licenses.\nNotwithstanding, Creative Commons may elect to apply one of its public\nlicenses to material it publishes and in those instances will be\nconsidered the \"Licensor.\" Except for the limited purpose of indicating\nthat material is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\nto any of its public licenses or any other arrangements,\nunderstandings, or agreements concerning use of licensed material. For\nthe avoidance of doubt, this paragraph does not form part of the public\nlicenses.\n\nCreative Commons may be contacted at creativecommons.org.\n"
        },
        {
          "name": "MAINTAINERS",
          "type": "blob",
          "size": 2.6689453125,
          "content": "# Swarm maintainers file\n#\n# This file describes who runs the docker/swarm project and how.\n# This is a living document - if you see something out of date or missing, speak up!\n#\n# It is structured to be consumable by both humans and programs.\n# To extract its contents programmatically, use any TOML-compliant parser.\n#\n# This file is compiled into the MAINTAINERS file in docker/opensource.\n#\n[Org]\n\t[Org.\"Core maintainers\"]\n\t\tpeople = [\n\t\t\t\"allencloud\",\n\t\t\t\"aluzzardi\",\n\t\t\t\"chanwit\",\n\t\t\t\"dani-docker\",\n\t\t\t\"dongluochen\",\n                        \"dperny\",\n\t\t\t\"jimmyxian\",\n\t\t\t\"mhbauer\",\n\t\t\t\"vieux\",\n\t\t]\n\n\t[Org.Curators]\n\n\t# The curators help ensure that incoming issues and pull requests are properly triaged and\n\t# that our various contribution and reviewing processes are respected. With their knowledge of\n\t# the repository activity, they can also guide contributors to relevant material or\n\t# discussions.\n\t#\n\t# They are neither code nor docs reviewers, so they are never expected to merge. They can\n\t# however:\n\t# - close an issue or pull request when it's an exact duplicate\n\t# - close an issue or pull request when it's inappropriate or off-topic\n\n\t\tpeople = [\n\t\t\t\"amitshukla\",\n\t\t\t\"anshulpundir\",\n\t\t\t\"chungers\",\n\t\t\t\"thajeztah\",\n\t\t]\n\n[people]\n\n# A reference list of all people associated with the project.\n# All other sections should refer to people by their canonical key\n# in the people section.\n\n\t# ADD YOURSELF HERE IN ALPHABETICAL ORDER\n\n\t[people.aluzzardi]\n\tName = \"Andrea Luzzardi\"\n\tEmail = \"al@docker.com\"\n\tGitHub = \"aluzzardi\"\n\n\t[people.allencloud]\n\tName = \"Allen Sun\"\n\tEmail = \"allen.sun@daocloud.io\"\n\tGitHub = \"allencloud\"\n\n\t[people.amitshukla]\n\tName = \"Amit Shukla\"\n\tEmail = \"amit.shukla@docker.com\"\n\tGitHub = \"amitshukla\"\n\n\t[people.anshulpundir]\n\tName = \"Anshul Pundir\"\n\tEmail = \"anshul.x.pundir@gmail.com\"\n\tGitHub = \"anshulpundir\"\n\n\t[people.chanwit]\n\tName = \"Chanwit Kaewkasi\"\n\tEmail = \"chanwit@gmail.com\"\n\tGitHub = \"chanwit\"\n\n\t[people.chungers]\n\tName = \"David Chung\"\n\tEmail = \"david.chung@docker.com\"\n\tGitHub = \"chungers\"\n\n\t[people.dani-docker]\n\tName = \"Dani Louca\"\n\tEmail = \"dani.louca@docker.com\"\n\tGitHub = \"dani-docker\"\n\n\t[people.dongluochen]\n\tName = \"Dongluo Chen\"\n\tEmail = \"dong@docker.com\"\n\tGitHub = \"dongluochen\"\n\n        [people.dperny]\n        Name = \"Drew Erny\"\n        Email = \"drew.erny@docker.com\"\n        GitHub = \"dperny\"\n\n\t[people.mhbauer]\n\tName = \"Morgan Bauer\"\n\tEmail = \"mbauer@us.ibm.com\"\n\tGitHub = \"mhbauer\"\n\n\t[people.thajeztah]\n\tName = \"Sebastiaan van Stijn\"\n\tEmail = \"github@gone.nl\"\n\tGitHub = \"thaJeztah\"\n\n\t[people.vieux]\n\tName = \"Victor Vieux\"\n\tEmail = \"vieux@docker.com\"\n\tGitHub = \"vieux\"\n\n\t[people.jimmyxian]\n\tName = \"Xian Chaobo\"\n\tEmail = \"xianchaobo@huawei.com\"\n\tGitHub = \"jimmyxian\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.990234375,
          "content": "# Classic Swarm: a Docker-native clustering system\n\n**Classic Swarm has been archived and is no longer actively developed. You may want to\nuse the Swarm mode built into the Docker Engine instead, or another orchestration system.**\n\n[![GoDoc](https://godoc.org/github.com/docker/swarm?status.png)](https://godoc.org/github.com/docker/swarm)\n[![Build Status](https://travis-ci.org/docker/swarm.svg?branch=master)](https://travis-ci.org/docker/swarm)\n[![Go Report Card](https://goreportcard.com/badge/github.com/docker/swarm)](https://goreportcard.com/report/github.com/docker/swarm)\n\n![Docker Swarm Logo](logo.png?raw=true \"Docker Swarm Logo\")\n\nDocker Swarm \"Classic\" is native clustering for Docker. It turns a pool of Docker hosts\ninto a single, virtual host.\n\n## Swarm Disambiguation\n\n**Docker Swarm \"Classic\" standalone**: This project. A native clustering system for\nDocker. It turns a pool of Docker hosts into a single, virtual host using an\nAPI proxy system. See [Docker Swarm overview](https://docs.docker.com/swarm/overview/).\nIt was Docker's first container orchestration project that began in 2014.\n\n**[Swarmkit](https://github.com/docker/swarmkit)**: Cluster\nmanagement and orchestration features in Docker Engine 1.12 or later. When Swarmkit\nis enabled we call Docker Engine running in swarm mode. See the\nfeature list: [Swarm mode overview](https://docs.docker.com/engine/swarm/).\nThis project focuses on micro-service architecture. It supports service\nreconciliation, load balancing, service discovery, built-in certificate rotation, etc.\n\n## Copyright and license\n\nCopyright © 2014-2018 Docker, Inc. All rights reserved, except as follows. Code\nis released under the Apache 2.0 license. The README.md file, and files in the\n\"docs\" folder are licensed under the Creative Commons Attribution-ShareAlike 4.0\nInternational License under the terms and conditions set forth in the file\n\"LICENSE.docs\". You may obtain a duplicate copy of the same license, titled\nCC-BY-SA-4.0, at https://creativecommons.org/licenses/by-sa/4.0/.\n"
        },
        {
          "name": "RELEASE-CHECKLIST.md",
          "type": "blob",
          "size": 2.255859375,
          "content": "# Release Checklist\n\n### 1. Update version and CHANGELOG.md on docker/swarm\n\n```\ngit checkout -b bump-<version>\nedit version/version.go\nedit CHANGELOG.md\ngit add .\ngit commit -s -m \"Bump version to <version>\"\ngit push $GITHUBUSER bump-<version>\n```\n\nOpen PR on docker/swarm. Merge the PR before moving to next step. If the release is an RC, then `CHANGELOG.md` should list the latest RC.\n\nIf Go version is updated, please manually trigger `dockerswarm/swarm-test-env` build update at https://hub.docker.com/r/dockerswarm/swarm-test-env/~/dockerfile/. After successful build, Go version will be updated. This should be done whenever Go version is updated.\n\n### 2. Rebase release branch on top of updated master branch and tag\n\n```\ngit checkout master\ngit pull origin\ngit checkout release\ngit rebase master\ngit push origin\ngit tag <tag>\ngit push origin <tag>\n```\nThe tag must be of the form `v1.2.1-rc1`.\n\n### 3. Update library image\n\nIf you don't have `github.com:docker/swarm-library-image.git` repo, clone it.\n\n```\ngit clone git@github.com:docker/swarm-library-image.git\n```\n\nBuild and update Swarm image.\n\n```\ncd swarm-library-image\ngit pull\n./update.sh <tag> (example: ./update.sh v0.2.0-rc2)\ncheck build is successful (swarm binaries should show in git diff)\ngit add .\ngit commit -s -m “<tag>\"\ngit push origin\n```\n\n### 4. Update official image\n\nIf you don't have https://github.com/docker-library/official-images.git, fork it.\n\n```\ngit clone https://github.com/docker-library/official-images.git\ncd official-images\ngit remote add $GITHUBUSER git@github.com:$GITHUBUSER/official-images.git\n```\n\nUpdate Swarm image list. You may add a new RC or a stable image to the image list. `latest` is for\nlatest stable image, normally an RC doesn't qualify.\n\n```\ngit checkout master\ngit pull\ngit checkout -b update_swarm_<tag>\nedit library/swarm\ngit add library/swarm\ngit commit -s -m \"update swarm <tag>\"\ngit push $GITHUBUSER update_swarm_<tag>\n```\n\nOpen PR on docker-library/official-images.\n\n### 5. Create release on github\n\nGo to https://github.com/docker/swarm/releases/new use &lt;tag&gt; and edit changelog.\n\nUpload Linux binary to the release. Copy the image built at docker/swarm-library-image.\n\n```\ntar czvf swarm-#tag#-linux-x86_64.tgz swarm\n```\n\nIn the release page, upload swarm-#tag#-linux-x86_64.tgz.\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "discovery",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "experimental",
          "type": "tree",
          "content": null
        },
        {
          "name": "logo.png",
          "type": "blob",
          "size": 121.146484375,
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.26953125,
          "content": "package main\n\nimport (\n\t_ \"github.com/docker/docker/pkg/discovery/file\"\n\t_ \"github.com/docker/docker/pkg/discovery/kv\"\n\t_ \"github.com/docker/docker/pkg/discovery/nodes\"\n\t_ \"github.com/docker/swarm/discovery/token\"\n\n\t\"github.com/docker/swarm/cli\"\n)\n\nfunc main() {\n\tcli.Run()\n}\n"
        },
        {
          "name": "scheduler",
          "type": "tree",
          "content": null
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "swarmclient",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor.conf",
          "type": "blob",
          "size": 2.39453125,
          "content": "# coreos/etcd depends on the dependencies listed below it.\n# Their import versions should be the same as that required\n# by the corresponding version of coreos/etcd\ngithub.com/coreos/etcd 6081a29c13c380f1e7d85240f7927e422b0cfa51\ngithub.com/ugorji/go f1f1a805ed361a0e078bb537e4ea78cd37dcf065\n\ngithub.com/Microsoft/go-winio v0.4.2\ngithub.com/sirupsen/logrus v1.0.6\ngithub.com/urfave/cli c31a7975863e7810c92e2e288a9ab074f9a88f29\ngithub.com/docker/swarmkit 8af8c420f491f006ab1730e08d446a795b1667d7\ngithub.com/docker/go-events 9461782956ad83b30282bf90e31fa6a70c255ba9\ngithub.com/davecgh/go-spew 5215b55f46b2b919f50a1df0eaa5886afe4e3b3d\ngithub.com/docker/distribution b38e5838b7b2f2ad48e06ec4b500011976080621\ngithub.com/docker/docker 827cb09f87964ed38b46502f22a585f2ed4a78e1\ngithub.com/opencontainers/image-spec f03dbe35d449c54915d235f1a3cf8f585a24babe\ngithub.com/opencontainers/go-digest a6d0ee40d4207ea02364bd3b9e8e77b9159ba1eb\ngithub.com/docker/go-connections 7395e3f8aa162843a74ed6d48e79627d9792ac55 # v0.4.0\ngithub.com/docker/go-units 0bbddae09c5a5419a8c6dcdd7ff90da3d450393b\ngithub.com/docker/leadership bfc7753dd48af19513b29deec23c364bf0f274eb\ngithub.com/docker/libkv 791d3fcb5d1b1af9a0ad6700cd8956b2f7a0a518\ngithub.com/gogo/protobuf v0.4\ngithub.com/gorilla/context 1c83b3eabd45b6d76072b66b746c20815fb2872d\ngithub.com/gorilla/mux 26a6070f849969ba72b72256e9f14cf519751690\ngithub.com/hashicorp/consul 562bf11e9ff784824f9c5fec0ad3609805e13a3d\ngithub.com/hashicorp/go-cleanhttp ce617e79981a8fff618bb643d155133a8f38db96\ngithub.com/hashicorp/serf 39c7c06298b480560202bec00c2c77e974e88792\ngithub.com/mattn/go-shellwords 525bedee691b5a8df547cb5cf9f86b7fb1883e24\ngithub.com/opencontainers/runc 2c3115481ee1782ad687a9e0b4834f89533c2acf\ngithub.com/pkg/errors a887431f7f6ef7687b556dbf718d9f351d4858a0\ngithub.com/pmezard/go-difflib 792786c7400a136282c1664665ae0a8db921c6c2\ngithub.com/samuel/go-zookeeper 1d7be4effb13d2d908342d349d71a284a7542693\ngithub.com/skarademir/naturalsort 69a5d87bef620f77ee8508db30c846b3b84b111e\ngithub.com/stretchr/objx 1a9d0bb9f541897e62256577b352fdbc1fb4fd94\ngithub.com/stretchr/testify f390dcf405f7b83c997eac1b06768bb9f44dec18\ngolang.org/x/net 4fd4a9fed55e5bdee4a89d6406c2eabe38b60300\ngolang.org/x/sys 90868a75fefd03942536221d7c0e2f84ec62a668\ngolang.org/x/crypto 0709b304e793a5edb4a2c0145f281ecdc20838a4\ngoogle.golang.org/grpc v1.12.0\ngithub.com/golang/protobuf v1.2.0\ngoogle.golang.org/genproto 694d95ba50e67b2e363f3483057db5d4910c18f9"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}