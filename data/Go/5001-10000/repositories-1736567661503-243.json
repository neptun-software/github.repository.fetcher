{
  "metadata": {
    "timestamp": 1736567661503,
    "page": 243,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "grpc-ecosystem/go-grpc-middleware",
      "stars": 6377,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".bingo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 3.185546875,
          "content": "# Created by .ignore support plugin (hsz.mobi)\n### Go template\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n### Windows template\n# Windows image file caches\nThumbs.db\nehthumbs.db\n\n# Folder config file\nDesktop.ini\n\n# Recycle Bin used on file shares\n$RECYCLE.BIN/\n\n# Windows Installer files\n*.cab\n*.msi\n*.msm\n*.msp\n\n# Windows shortcuts\n*.lnk\n### Kate template\n# Swap Files #\n.*.kate-swp\n.swp.*\n### SublimeText template\n# cache files for sublime text\n*.tmlanguage.cache\n*.tmPreferences.cache\n*.stTheme.cache\n\n# workspace files are user-specific\n*.sublime-workspace\n\n# project files should be checked into the repository, unless a significant\n# proportion of contributors will probably not be using SublimeText\n# *.sublime-project\n\n# sftp configuration file\nsftp-config.json\n### Linux template\n*~\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n### JetBrains template\n# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio and Webstorm\n# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839\n\n# User-specific stuff:\n.idea\n.idea/tasks.xml\n.idea/dictionaries\n.idea/vcs.xml\n.idea/jsLibraryMappings.xml\n\n# Sensitive or high-churn files:\n.idea/dataSources.ids\n.idea/dataSources.xml\n.idea/dataSources.local.xml\n.idea/sqlDataSources.xml\n.idea/dynamic.xml\n.idea/uiDesigner.xml\n\n# Gradle:\n.idea/gradle.xml\n.idea/libraries\n\n# Mongo Explorer plugin:\n.idea/mongoSettings.xml\n\n## File-based project format:\n*.iws\n\n## Plugin-specific files:\n\n# IntelliJ\n/out/\n\n# mpeltonen/sbt-idea plugin\n.idea_modules/\n\n# JIRA plugin\natlassian-ide-plugin.xml\n\n# Crashlytics plugin (for Android Studio and IntelliJ)\ncom_crashlytics_export_strings.xml\ncrashlytics.properties\ncrashlytics-build.properties\nfabric.properties\n### Xcode template\n# Xcode\n#\n# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore\n\n## Build generated\nbuild/\nDerivedData/\n\n## Various settings\n*.pbxuser\n!default.pbxuser\n*.mode1v3\n!default.mode1v3\n*.mode2v3\n!default.mode2v3\n*.perspectivev3\n!default.perspectivev3\nxcuserdata/\n\n## Other\n*.moved-aside\n*.xccheckout\n*.xcscmblueprint\n### Eclipse template\n\n.metadata\nbin/\ntmp/\n*.tmp\n*.bak\n*.swp\n*~.nib\nlocal.properties\n.settings/\n.loadpath\n.recommenders\n\n# Eclipse Core\n.project\n\n# External tool builders\n.externalToolBuilders/\n\n# Locally stored \"Eclipse launch configurations\"\n*.launch\n\n# PyDev specific (Python IDE for Eclipse)\n*.pydevproject\n\n# CDT-specific (C/C++ Development Tooling)\n.cproject\n\n# JDT-specific (Eclipse Java Development Tools)\n.classpath\n\n# Java annotation processor (APT)\n.factorypath\n\n# PDT-specific (PHP Development Tools)\n.buildpath\n\n# sbteclipse plugin\n.target\n\n# Tern plugin\n.tern-project\n\n# TeXlipse plugin\n.texlipse\n\n# STS (Spring Tool Suite)\n.springBeans\n\n# Code Recommenders\n.recommenders/\n\n\ncoverage.txt\n\n#vendor\nvendor/\n\n.envrc\n.bin"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 0.1494140625,
          "content": "---\n\nrun:\n  deadline: 5m\n\noutput:\n  sort-results: true\n\nlinters-settings:\n  errcheck:\n    exclude: errcheck_excludes.txt\n  gofumpt:\n    extra-rules: true"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.75,
          "content": "# Contributing\n\nWe would love to have people submit pull requests and help make `grpc-ecosystem/go-grpc-middleware` even better üëç.\n\nFork, then clone the repo:\n\n```bash\ngit clone git@github.com:your-username/go-grpc-middleware.git\n```\n\nBefore submitting a patch, please make sure to run the following make commands to execute the formatting check, regenerate the proto files, and run the tests and linters:\n\n```powershell\nmake fmt : Run formatting across all go files\n\nmake proto : Generate proto files\n\nmake test : Run all the tests\n\nmake lint : Run linting across all go files\n```\n\nOne command to rule them all:\n\n```bash\nmake all\n```\n\nThis will `lint`, `fmt`, regenerate proto files and documentation and run all tests.\n\nPush to your fork and open a pull request.\n"
        },
        {
          "name": "COPYRIGHT",
          "type": "blob",
          "size": 0.0830078125,
          "content": "Copyright (c) The go-grpc-middleware Authors.\nLicensed under the Apache License 2.0.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.07421875,
          "content": "                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License."
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 4.4921875,
          "content": "include .bingo/Variables.mk\n\nSHELL=/usr/bin/env bash\n\nPROVIDER_MODULES ?= $(shell find $(PWD)/providers/  -name \"go.mod\" | grep -v \".bingo\" | xargs dirname)\nMODULES          ?= $(PROVIDER_MODULES) $(PWD) $(PWD)/examples\nGO_FILES_TO_FMT  ?= $(shell find . -path -prune -o -name '*.go' -print)\n\nGOBIN             ?= $(firstword $(subst :, ,${GOPATH}))/bin\n\nTMP_GOPATH        ?= /tmp/gopath\n\nGO111MODULE       ?= on\nexport GO111MODULE\nGOPROXY           ?= https://proxy.golang.org\nexport GOPROXY\n\ndefine require_clean_work_tree\n\t@git update-index -q --ignore-submodules --refresh\n\n    @if ! git diff-files --quiet --ignore-submodules --; then \\\n        echo >&2 \"cannot $1: you have unstaged changes.\"; \\\n        git diff-files --name-status -r --ignore-submodules -- >&2; \\\n        echo >&2 \"Please commit or stash them.\"; \\\n        exit 1; \\\n    fi\n\n    @if ! git diff-index --cached --quiet HEAD --ignore-submodules --; then \\\n        echo >&2 \"cannot $1: your index contains uncommitted changes.\"; \\\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2; \\\n        echo >&2 \"Please commit or stash them.\"; \\\n        exit 1; \\\n    fi\n\nendef\n\nall: fmt proto lint test\n\n.PHONY: fmt\nfmt: $(GOIMPORTS)\n\t@echo \">> formatting go code\"\n\t@gofmt -s -w $(GO_FILES_TO_FMT)\n\t@for file in $(GO_FILES_TO_FMT) ; do \\\n\t\t./goimports.sh \"$${file}\"; \\\n\tdone\n\t@$(GOIMPORTS) -w $(GO_FILES_TO_FMT)\n\n.PHONY: test\ntest:\n\t@echo \"Running tests for all modules: $(MODULES)\"\n\t$(MAKE) $(MODULES:%=test_module_%)\n\n.PHONY: test_module_%\n$(MODULES:%=test_module_%): test_module_%:\n\t@echo \"Running tests for dir: $*\"\n\tcd $* && go test -v -race ./...\n\n.PHONY: deps\ndeps:\n\t@echo \"Running deps tidy for all modules: $(MODULES)\"\n\tfor dir in $(MODULES) ; do \\\n  \t\techo \"$${dir}\"; \\\n\t\tcd $${dir} && go mod tidy; \\\n\tdone\n\n.PHONY: docs\ndocs: $(MDOX) ## Generates code snippets, doc formatting and check links.\n\t@echo \">> generating docs $(PATH)\"\n\t@$(MDOX) fmt -l --links.validate.config-file=$(MDOX_VALIDATE_CONFIG) *.md\n\n.PHONY: check-docs\ncheck-docs: $(MDOX) ## Generates code snippets and doc formatting and checks links.\n\t@echo \">> checking docs $(PATH)\"\n\t@$(MDOX) fmt --check -l --links.validate.config-file=$(MDOX_VALIDATE_CONFIG) *.md\n\n.PHONY: lint\n# PROTIP:\n# Add\n#      --cpu-profile-path string   Path to CPU profile output file\n#      --mem-profile-path string   Path to memory profile output file\n# to debug big allocations during linting.\nlint: ## Runs various static analysis tools against our code.\nlint: $(BUF) $(COPYRIGHT) fmt docs\n\t@echo \">> lint proto files\"\n\t@$(BUF) lint\n\n\t@echo \">> ensuring copyright headers\"\n\t@$(COPYRIGHT) $(shell go list -f \"{{.Dir}}\" ./... | xargs -i find \"{}\" -name \"*.go\")\n\t@$(call require_clean_work_tree,\"set copyright headers\")\n\t@echo \">> ensured all .go files have copyright headers\"\n\n\t@echo \"Running lint for all modules: $(MODULES)\"\n\t@$(call require_clean_work_tree,\"before lint\")\n\t$(MAKE) $(MODULES:%=lint_module_%)\n\t@$(call require_clean_work_tree,\"lint and format files\")\n\n.PHONY: lint_module_%\n# PROTIP:\n# Add\n#      --cpu-profile-path string   Path to CPU profile output file\n#      --mem-profile-path string   Path to memory profile output file\n# to debug big allocations during linting.\nlint_module_%: ## Runs various static analysis against our code.\n$(MODULES:%=lint_module_%): lint_module_%: $(FAILLINT) $(GOLANGCI_LINT) $(MISSPELL)\n\t@echo \">> verifying modules being imported\"\n\t@cd $* && $(FAILLINT) -paths \"fmt.{Print,Printf,Println},github.com/golang/protobuf=google.golang.org/protobuf\" ./...\n\t\n\t@echo \">> examining all of the Go files\"\n\t@cd $* && go vet -stdmethods=false ./...\n\t\n\t@echo \">> linting all of the Go files GOGC=${GOGC}\"\n\t@cd $* && $(GOLANGCI_LINT) run\n\t@$(call require_clean_work_tree,\"golangci lint\")\n\n\n# For protoc naming matters.\nPROTOC_GEN_GO_CURRENT := $(TMP_GOPATH)/protoc-gen-go\nPROTOC_GEN_GO_GRPC_CURRENT := $(TMP_GOPATH)/protoc-gen-go-grpc\nPROTO_TEST_DIR := testing/testpb/v1\n\n.PHONY: proto\nproto: ## Generate testing protobufs\nproto: $(BUF) $(PROTOC_GEN_GO) $(PROTOC_GEN_GO_GRPC) $(PROTO_TEST_DIR)/test.proto\n\t@mkdir -p $(TMP_GOPATH)\n\t@cp $(PROTOC_GEN_GO) $(PROTOC_GEN_GO_CURRENT)\n\t@cp $(PROTOC_GEN_GO_GRPC) $(PROTOC_GEN_GO_GRPC_CURRENT)\n\t@echo \">> generating $(PROTO_TEST_DIR)\"\n\t@PATH=$(GOBIN):$(TMP_GOPATH) $(BUF) alpha protoc \\\n\t\t-I $(PROTO_TEST_DIR) \\\n\t\t--go_out=$(PROTO_TEST_DIR)/../ \\\n\t\t--go-grpc_out=$(PROTO_TEST_DIR)/../ \\\n\t    $(PROTO_TEST_DIR)/*.proto\n\n.PHONY: buf.gen\nbuf.gen:\n\t@$(BUF) generate \\\n           --template ./testing/testvalidate/testvalidate.buf.gen.yaml \\\n           --path ./testing/testvalidate/v1\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.46484375,
          "content": "# Go gRPC Middleware\n\n[![go](https://github.com/grpc-ecosystem/go-grpc-middleware/workflows/go/badge.svg?branch=v2)](https://github.com/grpc-ecosystem/go-grpc-middleware/actions?query=branch%3Av2) [![Go Report Card](https://goreportcard.com/badge/github.com/grpc-ecosystem/go-grpc-middleware)](https://goreportcard.com/report/github.com/grpc-ecosystem/go-grpc-middleware) [![GoDoc](http://img.shields.io/badge/GoDoc-Reference-blue.svg)](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/v2) [![Apache 2.0 License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE) [![Slack](https://img.shields.io/badge/slack-%23grpc--middleware-brightgreen)](https://gophers.slack.com/archives/CNJL30P4P)\n\nThis repository holds [gRPC Go](https://github.com/grpc/grpc-go) Middlewares: interceptors, helpers and utilities.\n\n## Middleware\n\n[gRPC Go](https://github.com/grpc/grpc-go) has support for \"interceptors\", i.e. [middleware](https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81#.gv7tdlghs) that is executed either on the gRPC Server before the request is passed onto the user's application logic, or on the gRPC client either around the user call. It is a perfect way to implement common patterns: auth, logging, tracing, metrics, validation, retries, rate limiting and more, which can be a great generic building blocks that make it easy to build multiple microservices easily.\n\nEspecially for observability signals (logging, tracing, metrics) interceptors offers semi-auto-instrumentation that improves consistency of your observability and allows great correlation techniques (e.g. exemplars and trace ID in logs). Demo-ed in [examples](examples).\n\nThis repository offers ready-to-use middlewares that implements gRPC interceptors with examples. In some cases dedicated projects offer great interceptors, so this repository skips those, and we link them in the [interceptors](#interceptors) list.\n\n> NOTE: Some middlewares are quite simple to write, so feel free to use this repo as template if you need. It's ok to copy some simpler interceptors if you need more flexibility. This repo can't support all the edge cases you might have.\n\nAdditional great feature of interceptors is the fact we can chain those. For example below you can find example server side chain of interceptors with full observabiliy correlation, auth and panic recovery:\n\n```go mdox-exec=\"sed -n '136,151p' examples/server/main.go\"\n\tgrpcSrv := grpc.NewServer(\n\t\tgrpc.ChainUnaryInterceptor(\n\t\t\t// Order matters e.g. tracing interceptor have to create span first for the later exemplars to work.\n\t\t\totelgrpc.UnaryServerInterceptor(),\n\t\t\tsrvMetrics.UnaryServerInterceptor(grpcprom.WithExemplarFromContext(exemplarFromContext)),\n\t\t\tlogging.UnaryServerInterceptor(interceptorLogger(rpcLogger), logging.WithFieldsFromContext(logTraceID)),\n\t\t\tselector.UnaryServerInterceptor(auth.UnaryServerInterceptor(authFn), selector.MatchFunc(allButHealthZ)),\n\t\t\trecovery.UnaryServerInterceptor(recovery.WithRecoveryHandler(grpcPanicRecoveryHandler)),\n\t\t),\n\t\tgrpc.ChainStreamInterceptor(\n\t\t\totelgrpc.StreamServerInterceptor(),\n\t\t\tsrvMetrics.StreamServerInterceptor(grpcprom.WithExemplarFromContext(exemplarFromContext)),\n\t\t\tlogging.StreamServerInterceptor(interceptorLogger(rpcLogger), logging.WithFieldsFromContext(logTraceID)),\n\t\t\tselector.StreamServerInterceptor(auth.StreamServerInterceptor(authFn), selector.MatchFunc(allButHealthZ)),\n\t\t\trecovery.StreamServerInterceptor(recovery.WithRecoveryHandler(grpcPanicRecoveryHandler)),\n\t\t),\n```\n\nThis pattern offers clean and explicit shared functionality for all your gRPC methods. Full, buildable examples can be found in [examples](examples) directory.\n\n## Interceptors\n\nThis list covers known interceptors that users use for their Go microservices (both in this repo and external). Click on each to see extended examples in `examples_test.go` (also available in [pkg.go.dev](https://godoc.org/github.com/grpc-ecosystem/go-grpc-middleware/v2))\n\nAll paths should work with `go get <path>`.\n\n#### Auth\n\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/auth`](interceptors/auth) - a customizable via `AuthFunc` piece of auth middleware.\n* (external) [`google.golang.org/grpc/authz`](https://github.com/grpc/grpc-go/blob/master/authz/grpc_authz_server_interceptors.go) - more complex, customizable via auth polices (RBAC like), piece of auth middleware.\n\n#### Observability\n\n* Metrics:\n  * [`github.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus`‚ö°](providers/prometheus) - Prometheus client-side and server-side monitoring middleware. Supports exemplars. Moved from deprecated now [`go-grpc-prometheus`](https://github.com/grpc-ecosystem/go-grpc-prometheus).\n  * (external) [`go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`](https://go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc) - official OpenTelemetry interceptors (metric and tracing).\n* Logging with [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging`](interceptors/logging) - a customizable logging middleware offering extended per request logging. It requires logging adapter, see examples in [`interceptors/logging/examples`](interceptors/logging/examples) for `go-kit`, `log`, `logr`, `logrus`, `slog`, `zap` and `zerolog`.\n  * NOTE: Interceptors with [context](https://pkg.go.dev/context) field injections need to be chained before the adapter function.\n* Tracing:\n  * (external) [`go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc`](https://go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc) - official OpenTelemetry interceptors (metric and tracing) as used in [example](examples).\n  * (external) [`github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing`](https://pkg.go.dev/github.com/grpc-ecosystem/go-grpc-middleware@v1.4.0/tracing/opentracing) - deprecated [OpenTracing](http://opentracing.io/) client-side and server-side interceptors if you still need it!\n\n#### Client\n\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/retry`](interceptors/retry) - a generic gRPC response code retry mechanism, client-side middleware.\n  * NOTE: grpc-go has native retries too with advanced policies (https://github.com/grpc/grpc-go/blob/v1.54.0/examples/features/retry/client/main.go)\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/timeout`](interceptors/timeout) - a generic gRPC request timeout, client-side middleware.\n\n#### Server\n\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/validator`](interceptors/validator) - codegen inbound message validation from `.proto` options.\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/recovery`](interceptors/recovery) - turn panics into gRPC errors (make sure to use those as \"last\" interceptor, so panic does not skip other interceptors).\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/ratelimit`](interceptors/ratelimit) - grpc rate limiting by your own limiter.\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/protovalidate`](interceptors/protovalidate) - message validation from `.proto` options via [protovalidate-go](https://github.com/bufbuild/protovalidate)\n\n#### Filtering Interceptor\n\n* [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/selector`](interceptors/selector) - allow users to select given one or more interceptors in certain condition like matching service method.\n\n## Prerequisites\n\n- **[Go](https://golang.org)**: Any one of the **three latest major** [releases](https://golang.org/doc/devel/release.html) are supported.\n\n## Structure of this repository\n\nThe main interceptors are available in the subdirectories of the [`interceptors` directory](interceptors) e.g. [`interceptors/validator`](interceptors/validator), [`interceptors/auth`](interceptors/auth) or [`interceptors/logging`](interceptors/logging).\n\nSome interceptors or utilities of interceptors requires opinionated code that depends on larger amount of dependencies. Those are places in `providers` directory as separate Go module, with separate versioning. For example [`providers/prometheus`](providers/prometheus) offer metrics middleware (there is no \"interceptor/metrics\" at the moment). The separate module, might be a little bit harder to discover and version in your `go.mod`, but it allows core interceptors to be ultra slim in terms of dependencies.\n\nThe [`interceptors` directory](interceptors) also holds generic interceptors that accepts [`Reporter`](interceptors/reporter.go) interface which allows creating your own middlewares with ease.\n\nAs you might notice this repository contains multiple modules with different versions ([Go Module specifics](https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories)). Refer to [versions.yaml](versions.yaml) for current modules. We have main module of version 2.x.y and providers modules of lower versions. Since main module is v2, it's module path ends with `v2`:\n\n```\ngo get github.com/grpc-ecosystem/go-grpc-middleware/v2/<package>\n```\n\nFor providers modules and packages, since they are v1, no version is added to the path e.g.\n\n```\ngo get github.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus\n```\n\n## Changes compared to v1\n\n[go-grpc-middleware v1](https://pkg.go.dev/github.com/grpc-ecosystem/go-grpc-middleware) was created near 2015 and became a popular choice for gRPC users. However, many have changed since then. The main changes of v2 compared to v1:\n\n* Path for separate, multiple Go modules in \"providers\". This allows to add in future specific providers for certain middlewares if needed. This allows interceptors to be extended without the dependency hell to the core framework (e.g. if use some other metric provider, do you want to import prometheus?). This allows greater extensibility.\n* Loggers are removed. The [`interceptors/logging`](interceptors/logging) got simplified and writing adapter for each logger is straightforward. For convenience, we will maintain examples for popular providers in [`interceptors/logging/examples`](interceptors/logging/examples), but those are meant to be copied, not imported.\n* `grpc_opentracing` interceptor was removed. This is because tracing instrumentation evolved. OpenTracing is deprecated and OpenTelemetry has now a [superior tracing interceptor](https://go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc).\n* `grpc_ctxtags` interceptor was removed. Custom tags can be added to logging fields using `logging.InjectFields`. Proto option to add logging field was clunky in practice and we don't see any use of it nowadays, so it's removed.\n* One of the most powerful interceptor was imported from https://github.com/grpc-ecosystem/go-grpc-prometheus (repo is now deprecated). This consolidation allows easier maintenance, easier use and consistent API.\n* Chain interceptors was removed, because `grpc` implemented one.\n* Moved to the new proto API (google.golang.org/protobuf).\n* All \"deciders\", so functions that decide what to do based on gRPC service name and method (aka \"fullMethodName\") are removed (!). Use [`github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/selector`](interceptors/selector) interceptor to select what method, type or service should use what interceptor.\n* No more snake case package names. We have now single word meaningful package names. If you have collision in package names we recommend adding grpc prefix e.g. `grpcprom \"github.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus\"`.\n* All the options (if any) are in the form of `<package_name>.With<Option Name>`, with extensibility to add more of them.\n* `v2` is the main (default) development branch.\n\n## For Maintainers: Release Process\n\nThis assumes we want to release minor version of any module:\n\n1. Understand what has been change and what groups within [versions](versions.yaml) has to be updated.\n2. Update group version on v2 branch accordingly.\n3. Create new tag for *each module* that has to be released. For the main module `github.com/grpc-ecosystem/go-grpc-middleware/v2` the tag has no prefix (e.g. v2.20.1). For providers (sub modules), the tag version has to have form e.g. `providers/<provider/v1.2.3`. See https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories for details.\n4. Once all tags are pushed, draft and create release on GitHub page, mentioning all changed tags in the title. Use auto-generation of notes and remove those that are not relevant for users (e.g. fixing docs).\n\n## License\n\n`go-grpc-middleware` is released under the Apache 2.0 license. See the [LICENSE](LICENSE) file for details.\n"
        },
        {
          "name": "buf.lock",
          "type": "blob",
          "size": 0.310546875,
          "content": "# Generated by buf. DO NOT EDIT.\nversion: v1\ndeps:\n  - remote: buf.build\n    owner: bufbuild\n    repository: protovalidate\n    commit: 1c33ebd9ecfa4653b8c1e662f84d1acf\n    digest: shake256:4e3d93b2859a799ed4c08f530c62da1647cb85adacb3ff085dff6959a8d0a73989f3b8527145ee8b0783cd4e5264eaf0c0a76c206404f9520fce608b525559cb\n"
        },
        {
          "name": "buf.yaml",
          "type": "blob",
          "size": 0.1142578125,
          "content": "version: v1beta1\ndeps:\n  - buf.build/bufbuild/protovalidate:v0.2.8\nbuild:\n  roots:\n    - .\nlint:\n  use:\n    - DEFAULT"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 2.7373046875,
          "content": "// Copyright (c) The go-grpc-middleware Authors.\n// Licensed under the Apache License 2.0.\n\n/*\nPackage middleware\n\n`middleware` is a collection of gRPC middleware packages: interceptors, helpers and tools.\n\n# Middleware\n\ngRPC is a fantastic RPC middleware, which sees a lot of adoption in the Golang world. However, the\nupstream gRPC codebase is relatively bare bones.\n\nThis package, and most of its child packages provides commonly needed middleware for gRPC:\nclient-side interceptors for retires, server-side interceptors for input validation and auth,\nfunctions for chaining said interceptors, metadata convenience methods and more.\n\n# Chaining\n\nSimple way of turning a multiple interceptors into a single interceptor. Here's an example for\nserver chaining:\n\n\tmyServer := grpc.NewServer(\n\t    grpc.ChainStreamInterceptor(loggingStream, monitoringStream, authStream),\n\t    grpc.ChainUnaryInterceptor(loggingUnary, monitoringUnary, authUnary),\n\t)\n\nThese interceptors will be executed from left to right: logging, monitoring and auth.\n\nHere's an example for client side chaining:\n\n\tclientConn, err = grpc.Dial(\n\t    address,\n\t        grpc.WithChainUnaryInterceptor(monitoringClientUnary, retryUnary),\n\t        grpc.WithChainStreamInterceptor(monitoringClientStream, retryStream),\n\t)\n\tclient = testpb.NewTestServiceClient(clientConn)\n\tresp, err := client.PingEmpty(s.ctx, &myservice.Request{Msg: \"hello\"})\n\nThese interceptors will be executed from left to right: monitoring and then retry logic.\n\nThe retry interceptor will call every interceptor that follows it whenever when a retry happens.\n\n# Writing Your Own\n\nImplementing your own interceptor is pretty trivial: there are interfaces for that. But the interesting\nbit exposing common data to handlers (and other middleware), similarly to HTTP Middleware design.\nFor example, you may want to pass the identity of the caller from the auth interceptor all the way\nto the handling function.\n\nFor example, a client side interceptor example for auth looks like:\n\n\tfunc FakeAuthUnaryInterceptor(ctx context.Context, req any, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (any, error) {\n\t   newCtx := context.WithValue(ctx, \"user_id\", \"john@example.com\")\n\t   return handler(newCtx, req)\n\t}\n\nUnfortunately, it's not as easy for streaming RPCs. These have the `context.Context` embedded within\nthe `grpc.ServerStream` object. To pass values through context, a wrapper (`WrappedServerStream`) is\nneeded. For example:\n\n\tfunc FakeAuthStreamingInterceptor(srv any, stream grpc.ServerStream, info *grpc.StreamServerInfo, handler grpc.StreamHandler) error {\n\t   newStream := middleware.WrapServerStream(stream)\n\t   newStream.WrappedContext = context.WithValue(ctx, \"user_id\", \"john@example.com\")\n\t   return handler(srv, newStream)\n\t}\n*/\npackage middleware\n"
        },
        {
          "name": "errcheck_excludes.txt",
          "type": "blob",
          "size": 0.033203125,
          "content": "(github.com/go-kit/log.Logger).Log"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.2080078125,
          "content": "module github.com/grpc-ecosystem/go-grpc-middleware/v2\n\ngo 1.21\n\nrequire (\n\tbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.31.0-20230802163732-1c33ebd9ecfa.1\n\tgithub.com/bufbuild/protovalidate-go v0.2.1\n\tgithub.com/stretchr/testify v1.8.4\n\tgolang.org/x/net v0.28.0\n\tgolang.org/x/oauth2 v0.22.0\n\tgoogle.golang.org/grpc v1.67.1\n\tgoogle.golang.org/protobuf v1.34.2\n)\n\nrequire (\n\tcloud.google.com/go/compute v1.23.4 // indirect\n\tcloud.google.com/go/compute/metadata v0.5.0 // indirect\n\tgithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/google/cel-go v0.17.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/stoewer/go-strcase v1.3.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1 // indirect\n\tgolang.org/x/sys v0.24.0 // indirect\n\tgolang.org/x/text v0.17.0 // indirect\n\tgoogle.golang.org/appengine v1.6.8 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20240814211410-ddb44dafa142 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240814211410-ddb44dafa142 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 10.4814453125,
          "content": "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.31.0-20230802163732-1c33ebd9ecfa.1 h1:tdpHgTbmbvEIARu+bixzmleMi14+3imnpoFXz+Qzjp4=\nbuf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go v1.31.0-20230802163732-1c33ebd9ecfa.1/go.mod h1:xafc+XIsTxTy76GJQ1TKgvJWsSugFBqMaN27WhUblew=\ncloud.google.com/go/compute v1.23.4 h1:EBT9Nw4q3zyE7G45Wvv3MzolIrCJEuHys5muLY0wvAw=\ncloud.google.com/go/compute v1.23.4/go.mod h1:/EJMj55asU6kAFnuZET8zqgwgJ9FvXWXOkkfQZa4ioI=\ncloud.google.com/go/compute/metadata v0.2.3 h1:mg4jlk7mCAj6xXp9UJ4fjI9VUI5rubuGBW5aJ7UnBMY=\ncloud.google.com/go/compute/metadata v0.2.3/go.mod h1:VAV5nSsACxMJvgaAuX6Pk2AawlZn8kiOGuCv6gTkwuA=\ncloud.google.com/go/compute/metadata v0.5.0 h1:Zr0eK8JbFv6+Wi4ilXAR8FJ3wyNdpxHKJNPos6LTZOY=\ncloud.google.com/go/compute/metadata v0.5.0/go.mod h1:aHnloV2TPI38yx4s9+wAZhHykWvVCfu7hQbF+9CWoiY=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9 h1:goHVqTbFX3AIo0tzGr14pgfAW2ZfPChKO21Z9MGf/gk=\ngithub.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230512164433-5d1fd1a340c9/go.mod h1:pSwJ0fSY5KhvocuWSx4fz3BA8OrA1bQn+K1Eli3BRwM=\ngithub.com/bufbuild/protovalidate-go v0.2.1 h1:pJr07sYhliyfj/STAM7hU4J3FKpVeLVKvOBmOTN8j+s=\ngithub.com/bufbuild/protovalidate-go v0.2.1/go.mod h1:e7XXDtlxj5vlEyAgsrxpzayp4cEMKCSSb8ZCkin+MVA=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.2 h1:QkIBuU5k+x7/QXPvPPnWXWlCdaBFApVqftFV6k087DA=\ngithub.com/envoyproxy/protoc-gen-validate v1.0.2/go.mod h1:GpiZQP3dDbg4JouG/NNS7QWXpgx6x8QiMKdmN72jogE=\ngithub.com/envoyproxy/protoc-gen-validate v1.1.0 h1:tntQDh69XqOCOZsDz0lVJQez/2L6Uu2PdjCQwWCJ3bM=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.2/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/google/cel-go v0.17.1 h1:s2151PDGy/eqpCI80/8dl4VL3xTkqI/YubXLXCFw0mw=\ngithub.com/google/cel-go v0.17.1/go.mod h1:HXZKzB0LXqer5lHHgfWAnlYwJaQBDKMjxjulNQzhwhY=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/kr/pretty v0.1.0 h1:L/CwN0zerZDmRFUapSPitk6f+Q3+0za1rQkzVuMiMFI=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/stoewer/go-strcase v1.3.0 h1:g0eASXYtp+yvN9fK8sH94oCIk0fau9uV1/ZdJ0AVEzs=\ngithub.com/stoewer/go-strcase v1.3.0/go.mod h1:fAH5hQ5pehh+j3nZfvwdk2RgEgQjAoM8wodgtPmh1xo=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.8.4 h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1 h1:k/i9J1pBpvlfR+9QsetwPyERsqu1GIbi967PQMq3Ivc=\ngolang.org/x/exp v0.0.0-20230522175609-2e198f4a06a1/go.mod h1:V1LtkGg67GoY2N1AnLN78QLrzxkLyJw7RJb1gzOOz9w=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.21.0 h1:AQyQV4dYCvJ7vGmJyKki9+PBdyvhkSd8EIx/qb0AYv4=\ngolang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=\ngolang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=\ngolang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=\ngolang.org/x/oauth2 v0.16.0 h1:aDkGMBSYxElaoP81NpoUoz2oo2R2wHdZpGToUxfyQrQ=\ngolang.org/x/oauth2 v0.16.0/go.mod h1:hqZ+0LWXsiVoZpeld6jVt06P3adbS2Uu911W1SsJv2o=\ngolang.org/x/oauth2 v0.22.0 h1:BzDx2FehcG7jJwgWLELCdmLuxk2i+x9UDpSiss2u0ZA=\ngolang.org/x/oauth2 v0.22.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0 h1:25cE3gD+tdBA7lp7QfhuV+rJiE9YXTcS3VG1SqssI/Y=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=\ngolang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.3.8/go.mod h1:E6s5w1FMmriuDzIBO73fBruAKo1PCIq6d2Q6DHfQ8WQ=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=\ngolang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/appengine v1.6.8 h1:IhEN5q69dyKagZPYMSdIjS2HqprW324FRQZJcGqPAsM=\ngoogle.golang.org/appengine v1.6.8/go.mod h1:1jJ3jBArFh5pcgW8gCtRJnepW8FzD1V44FJffLiz/Ds=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240125205218-1f4bbc51befe h1:0poefMBYvYbs7g5UkjS6HcxBPaTRAmznle9jnxYoAI8=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240125205218-1f4bbc51befe/go.mod h1:4jWUdICTdgc3Ibxmr8nAJiiLHwQBY0UI0XZcEMaFKaA=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240814211410-ddb44dafa142 h1:wKguEg1hsxI2/L3hUYrpo1RVi48K+uTyzKqprwLXsb8=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20240814211410-ddb44dafa142/go.mod h1:d6be+8HhtEtucleCbxpPW9PA9XwISACu8nvpPqF0BVo=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240213162025-012b6fc9bca9 h1:hZB7eLIaYlW9qXRfCq/qDaPdbeY3757uARz5Vvfv+cY=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240213162025-012b6fc9bca9/go.mod h1:YUWgXUFRPfoYK1IHMuxH5K6nPEXSCzIMljnQ59lLRCk=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240814211410-ddb44dafa142 h1:e7S5W7MGGLaSu8j3YjdezkZ+m1/Nm0uRVRMEMGk26Xs=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20240814211410-ddb44dafa142/go.mod h1:UqMtugtsSgubUsoxbuAoiCXvqvErP7Gf0so0mK9tHxU=\ngoogle.golang.org/grpc v1.61.1 h1:kLAiWrZs7YeDM6MumDe7m3y4aM6wacLzM1Y/wiLP9XY=\ngoogle.golang.org/grpc v1.61.1/go.mod h1:VUbo7IFqmF1QtCAstipjG0GIoq49KvMe9+h1jFLBNJs=\ngoogle.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=\ngoogle.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.31.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\ngoogle.golang.org/protobuf v1.32.0 h1:pPC6BG5ex8PDFnkbrGU3EixyhKcQ2aDuBS36lqK/C7I=\ngoogle.golang.org/protobuf v1.32.0/go.mod h1:c6P6GXX6sHbq/GpV6MGZEdwhWPcYBgnhAHhKbcUYpos=\ngoogle.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=\ngoogle.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15 h1:YR8cESwS4TdDjEe65xsg0ogRM/Nc3DYOhEAlW+xobZo=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "goimports.sh",
          "type": "blob",
          "size": 0.28515625,
          "content": "#!/usr/bin/env bash\n\n# Taken from https://gist.github.com/soniah/c11633551c6dd84dab66cad20453cfa8\n# remove all blank lines in go 'imports' statements, as goimports doesn't do it.\n\nif [ $# != 1 ] ; then\n  echo \"usage: $0 <filename>\"\n  exit 1\nfi\n\nsed -i '\n  /^import/,/)/ {\n    /^$/ d\n  }\n' $1\n"
        },
        {
          "name": "interceptors",
          "type": "tree",
          "content": null
        },
        {
          "name": "metadata",
          "type": "tree",
          "content": null
        },
        {
          "name": "providers",
          "type": "tree",
          "content": null
        },
        {
          "name": "slack.png",
          "type": "blob",
          "size": 4.96875,
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "versions.yaml",
          "type": "blob",
          "size": 0.5634765625,
          "content": "# Versions yaml in the format supported by multimod tool (https://github.com/open-telemetry/opentelemetry-go-build-tools/tree/7c66e93ea95406b9f8bc0174809acccec745057f/multimod).\n# While we don't use multimod yet, we keep versions grouped and listed to not get lost with manual releases.\n# We group versions, so it's easier to maintain and use.\nmodule-sets:\n  core:\n    version: v2.0.0\n    modules:\n      - github.com/grpc-ecosystem/go-grpc-middleware/v2\n  v1-providers:\n    version: v1.0.0\n    modules:\n      - github.com/grpc-ecosystem/go-grpc-middleware/providers/prometheus\n"
        },
        {
          "name": "wrappers.go",
          "type": "blob",
          "size": 0.900390625,
          "content": "// Copyright (c) The go-grpc-middleware Authors.\n// Licensed under the Apache License 2.0.\n\npackage middleware\n\nimport (\n\t\"context\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// WrappedServerStream is a thin wrapper around grpc.ServerStream that allows modifying context.\ntype WrappedServerStream struct {\n\tgrpc.ServerStream\n\t// WrappedContext is the wrapper's own Context. You can assign it.\n\tWrappedContext context.Context\n}\n\n// Context returns the wrapper's WrappedContext, overwriting the nested grpc.ServerStream.Context()\nfunc (w *WrappedServerStream) Context() context.Context {\n\treturn w.WrappedContext\n}\n\n// WrapServerStream returns a ServerStream that has the ability to overwrite context.\nfunc WrapServerStream(stream grpc.ServerStream) *WrappedServerStream {\n\tif existing, ok := stream.(*WrappedServerStream); ok {\n\t\treturn existing\n\t}\n\treturn &WrappedServerStream{ServerStream: stream, WrappedContext: stream.Context()}\n}\n"
        },
        {
          "name": "wrappers_test.go",
          "type": "blob",
          "size": 1.2861328125,
          "content": "// Copyright (c) The go-grpc-middleware Authors.\n// Licensed under the Apache License 2.0.\n\npackage middleware\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/codes\"\n\t\"google.golang.org/grpc/status\"\n)\n\nvar (\n\tsomeKey struct{}\n\tother   struct{}\n)\n\nfunc TestWrapServerStream(t *testing.T) {\n\tctx := context.WithValue(context.TODO(), someKey, 1)\n\tfake := &fakeServerStream{ctx: ctx}\n\twrapped := WrapServerStream(fake)\n\tassert.NotNil(t, wrapped.Context().Value(someKey), \"values from fake must propagate to wrapper\")\n\twrapped.WrappedContext = context.WithValue(wrapped.Context(), other, 2)\n\tassert.NotNil(t, wrapped.Context().Value(other), \"values from wrapper must be set\")\n}\n\ntype fakeServerStream struct {\n\tgrpc.ServerStream\n\tctx         context.Context\n\trecvMessage any\n\tsentMessage any\n}\n\nfunc (f *fakeServerStream) Context() context.Context {\n\treturn f.ctx\n}\n\nfunc (f *fakeServerStream) SendMsg(m any) error {\n\tif f.sentMessage != nil {\n\t\treturn status.Error(codes.AlreadyExists, \"fakeServerStream only takes one message, sorry\")\n\t}\n\tf.sentMessage = m\n\treturn nil\n}\n\nfunc (f *fakeServerStream) RecvMsg(m any) error {\n\tif f.recvMessage == nil {\n\t\treturn status.Error(codes.NotFound, \"fakeServerStream has no message, sorry\")\n\t}\n\treturn nil\n}\n"
        }
      ]
    }
  ]
}