{
  "metadata": {
    "timestamp": 1736567453697,
    "page": 59,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "senghoo/golang-design-pattern",
      "stars": 8811,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.78515625,
          "content": "### https://raw.github.com/github/gitignore/23aad6abc4ed1aafb425f6e09334c4e35ad146ac/Global/Emacs.gitignore\n\n# -*- mode: gitignore; -*-\n*~\n\\#*\\#\n/.emacs.desktop\n/.emacs.desktop.lock\n*.elc\nauto-save-list\ntramp\n.\\#*\n\n# Org-mode\n.org-id-locations\n*_archive\n\n# flymake-mode\n*_flymake.*\n\n# eshell files\n/eshell/history\n/eshell/lastdir\n\n# elpa packages\n/elpa/\n\n# reftex files\n*.rel\n\n# AUCTeX auto folder\n/auto/\n\n# cask packages\n.cask/\n\n\n### https://raw.github.com/github/gitignore/23aad6abc4ed1aafb425f6e09334c4e35ad146ac/Go.gitignore\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.0634765625,
          "content": "language: go\ngo:\n  - 1.x\n  - 1.11.x\nscript:\n  - go test -v ./...\n"
        },
        {
          "name": "00_simple_factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "01_facade",
          "type": "tree",
          "content": null
        },
        {
          "name": "02_adapter",
          "type": "tree",
          "content": null
        },
        {
          "name": "03_singleton",
          "type": "tree",
          "content": null
        },
        {
          "name": "04_factory_method",
          "type": "tree",
          "content": null
        },
        {
          "name": "05_abstract_factory",
          "type": "tree",
          "content": null
        },
        {
          "name": "06_builder",
          "type": "tree",
          "content": null
        },
        {
          "name": "07_prototype",
          "type": "tree",
          "content": null
        },
        {
          "name": "08_mediator",
          "type": "tree",
          "content": null
        },
        {
          "name": "09_proxy",
          "type": "tree",
          "content": null
        },
        {
          "name": "10_observer",
          "type": "tree",
          "content": null
        },
        {
          "name": "11_command",
          "type": "tree",
          "content": null
        },
        {
          "name": "12_iterator",
          "type": "tree",
          "content": null
        },
        {
          "name": "13_composite",
          "type": "tree",
          "content": null
        },
        {
          "name": "14_template_method",
          "type": "tree",
          "content": null
        },
        {
          "name": "15_strategy",
          "type": "tree",
          "content": null
        },
        {
          "name": "16_state",
          "type": "tree",
          "content": null
        },
        {
          "name": "17_memento",
          "type": "tree",
          "content": null
        },
        {
          "name": "18_flyweight",
          "type": "tree",
          "content": null
        },
        {
          "name": "19_interpreter",
          "type": "tree",
          "content": null
        },
        {
          "name": "20_decorator",
          "type": "tree",
          "content": null
        },
        {
          "name": "21_chain_of_responsibility",
          "type": "tree",
          "content": null
        },
        {
          "name": "22_bridge",
          "type": "tree",
          "content": null
        },
        {
          "name": "23_visitor",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "MIT License\n\nCopyright (c) 2020 Senghoo Kim And Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.837890625,
          "content": "# Go 语言设计模式\n\n[![Build Status](https://travis-ci.org/senghoo/golang-design-pattern.svg?branch=master)](https://travis-ci.org/senghoo/golang-design-pattern)\n\nGo 语言设计模式的实例代码\n\n## 创建型模式\n\n* [简单工厂模式（Simple Factory）](https://github.com/senghoo/golang-design-pattern/tree/master/00_simple_factory)\n* [工厂方法模式（Factory Method）](https://github.com/senghoo/golang-design-pattern/tree/master/04_factory_method)\n* [抽象工厂模式（Abstract Factory）](https://github.com/senghoo/golang-design-pattern/tree/master/05_abstract_factory)\n* [创建者模式（Builder）](https://github.com/senghoo/golang-design-pattern/tree/master/06_builder)\n* [原型模式（Prototype）](https://github.com/senghoo/golang-design-pattern/tree/master/07_prototype)\n* [单例模式（Singleton）](https://github.com/senghoo/golang-design-pattern/tree/master/03_singleton)\n\n## 结构型模式\n\n* [外观模式（Facade）](https://github.com/senghoo/golang-design-pattern/tree/master/01_facade)\n* [适配器模式（Adapter）](https://github.com/senghoo/golang-design-pattern/tree/master/02_adapter)\n* [代理模式（Proxy）](https://github.com/senghoo/golang-design-pattern/tree/master/09_proxy)\n* [组合模式（Composite）](https://github.com/senghoo/golang-design-pattern/tree/master/13_composite)\n* [享元模式（Flyweight）](https://github.com/senghoo/golang-design-pattern/tree/master/18_flyweight)\n* [装饰模式（Decorator）](https://github.com/senghoo/golang-design-pattern/tree/master/20_decorator)\n* [桥模式（Bridge）](https://github.com/senghoo/golang-design-pattern/tree/master/22_bridge)\n\n## 行为型模式\n\n* [中介者模式（Mediator）](https://github.com/senghoo/golang-design-pattern/tree/master/08_mediator)\n* [观察者模式（Observer）](https://github.com/senghoo/golang-design-pattern/tree/master/10_observer)\n* [命令模式（Command）](https://github.com/senghoo/golang-design-pattern/tree/master/11_command)\n* [迭代器模式（Iterator）](https://github.com/senghoo/golang-design-pattern/tree/master/12_iterator)\n* [模板方法模式（Template Method）](https://github.com/senghoo/golang-design-pattern/tree/master/14_template_method)\n* [策略模式（Strategy）](https://github.com/senghoo/golang-design-pattern/tree/master/15_strategy)\n* [状态模式（State）](https://github.com/senghoo/golang-design-pattern/tree/master/16_state)\n* [备忘录模式（Memento）](https://github.com/senghoo/golang-design-pattern/tree/master/17_memento)\n* [解释器模式（Interpreter）](https://github.com/senghoo/golang-design-pattern/tree/master/19_interpreter)\n* [职责链模式（Chain of Responsibility）](https://github.com/senghoo/golang-design-pattern/tree/master/21_chain_of_responsibility)\n* [访问者模式（Visitor）](https://github.com/senghoo/golang-design-pattern/tree/master/23_visitor)\n"
        }
      ]
    }
  ]
}