{
  "metadata": {
    "timestamp": 1736567506429,
    "page": 109,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Masterminds/glide",
      "stars": 8144,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.078125,
          "content": "glide\nglide.exe\n*.a\n*.sublime-project\n*.sublime-workspace\ndist/\n.DS_Store\n.idea\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.7373046875,
          "content": "language: go\n\ngo:\n  - 1.7.x\n  - 1.8.x\n  - 1.9.x\n  - 1.10.x\n  - 1.11.x\n  - 1.12.x\n  - tip\n\n# Setting sudo access to false will let Travis CI use containers rather than\n# VMs to run the tests. For more details see:\n# - http://docs.travis-ci.com/user/workers/container-based-infrastructure/\n# - http://docs.travis-ci.com/user/workers/standard-infrastructure/\nsudo: false\n\n# The default script is go test -v ./... which will test everything\n# in the vendor directory. We don't need to test all dependent packages.\n# Only testing this project.\nscript:\n  - make test integration-test verify-version\n\nnotifications:\n  webhooks:\n    urls:\n      - https://webhooks.gitter.im/e/67e4b42cbf763625d0b4\n    on_success: change\n    on_failure: always\n    on_start: never\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 19.3662109375,
          "content": "# Release 0.13.4 (unreleased)\n\n# Release 0.13.3 (2019-07-12)\n\n## Fixed\n\n- #1056: Fixed issue where Glide is not detecting crypto/ed25519, now in the stdlib (thanks @martinkunc)\n- #1033: Fixed segfault with Glide 0.13.2 when stripping Godep workspace (thanks @databus23)\n\n# Release 0.13.2 (2018-09-26)\n\n## Fixed\n\n- #956: Fixed Error handling nested vendor folders (thanks @apynes2)\n- #953: Fixed issue where error was not propagating\n\n# Release 0.13.1 (2017-11-07)\n\n## Fixed\n\n- #935: Fix handling of new core package math/bits (thanks @prateek)\n\n# Release 0.13.0 (2017-09-28)\n\n## Added\n\n- #631: Verify version during build in automation (thanks @breerly)\n- #711: Added a commit hash example to the docs (thanks @mh-cbon)\n- #771: Handling default GOPATH for Go 1.8\n- #814: Adding install instructions for Ubuntu 17.04 (thanks @HaraldNordgren)\n- #870: Added support for s390x architecture (thanks @Nayana-ibm)\n\n## Changed\n\n- #582: Removed verbose flag as it was not being used (thanks @kelcecil)\n- #697: Preserve vendor/.git, if it exists. (thanks @sdboyer)\n- #686: Make ending dots in output more consistent (thanks @stevenroose)\n- #748: Updated tests to work windows and add windows CI testing\n- #717: Cache GOROOT at init time for performance (thanks @heyitsanthony)\n- #797, #821, #908: Updating to the latest version of the dependencies\n- #800: Allow VERSION of glide to be passed in with build script (thanks @BlackYoup)\n- #774: Add docs on using go get to install glide (thanks @philoserf)\n- #907: Updated Travis CI language versions of Go to test against (thanks @dvrkps)\n- #916: Update gox to version managed by Masterminds for builds\n\n## Fixed\n\n- #736: Find home dir without using cgo (thanks @krancour)\n- #603: Fixed where, in some cases not importing dependencies config\n- #620: Fixed grammar usage on projects (thanks @server-monitor)\n- #623: Fixed typos in help and  (thanks @jonboulle)\n- #628: Fixed typos (thanks @philoserf)\n- #733: Fixed documentation issues (thanks @matiasanaya)\n- #747: Fixed issue with glide home directory (thanks @agatan)\n- #759: More spelling fixes (thanks @jbirch)\n- #775: Even more doc typo fixes (thanks @cristiangreco)\n- #811: Fixed issue with windows git submodules\n- #819: Fixed more typos (thanks @zoofood)\n- #829: Fixed preservation of .git files correctly (@RaduBerinde)\n- #778: Fixed removing and moving large sets of files fails on Windows\n- #910: Fixed issue due to go/build.ImportDir change response on not found dir\n- #906: Fixed CustomRemoveAll() to handle spaces in paths, and also file not found (thanks @jpz)\n\n# Release 0.12.3 (2016-10-03)\n\n## Fixed\n- #615: Fixed possible situation where resolver could get stuck in a loop\n\n# Release 0.12.2 (2016-09-13)\n\n## Fixed\n- #599: In some cases was not importing dependencies config\n- #601: Fixed issue where --all-dependencies flag stopped working\n\n# Release 0.12.1 (2016-08-31)\n\n## Fixed\n- #578: Not resolving parent project packages in some cases\n- #580: cross-device error handling failed on Windows in some cases\n- #590: When exit signal received remove global lock\n\nNote, Plan 9 is an experimental OS for Go. Due to some issues we are not going\nto be supporting builds for it at this time.\n\n# Release 0.12.0 (2016-08-23)\n\n## Added\n- Support for distributions in FreeBSD, OpenBSD, NetBSD, and Plan9\n- #528: ARM release support (thanks @franciscocpg)\n- #563: Added initial integration testing\n- #533: Log VCS output with debug (`--debug` switch) when there was a VCS error (thanks @atombender)\n- #39: Added support for mirrors. See the mirror command and subcommands\n\n## Changed\n- #521: Sort subpackages for glide.yaml and glide.lock to avoid spurious diffs\n- #487: Skip lookup of subpackage location when parent repo is already known\n  This skips unnecessary network requests (thanks @hori-ryota)\n- #492 and #547: Dependencies are now resolved in a global cache and exported to\n  vendor/ directories. This allows sharing of VCS data between projects without\n  upseting the GOPATH versions and is faster for projects vendoring dependencies.\n  Some flags including --update-vendored, --cache-gopath, --use-gopath, and some\n  others are deprecated and no longer needed.\n\n## Fixed\n- #287: When file or directory not found provide useful message\n- #559: Fixed error is nil issue (thanks @mfycheng)\n- #553: Export was failing with different physical devices\n- #542: Glide failed to detect some test dependencies (thanks @sdboyer)\n- #517: Fixed failure to install testImport from lock when no imports present\n  or when same dependency on both import and testImport\n- #440: Fixed panic in `glide tree` when walking the filesystem (thanks @abhin4v)\n- #529: --delete flag deleted and re-downloaded transitive dependencies\n- #535: Resolve vendor directory symlinks (thanks @Fugiman)\n\n# Release 0.11.1 (2016-07-21)\n\n## Fixed\n- #505: Ignored dependency showing up in testImport\n\n# Release 0.11.0 (2016-07-05)\n\n## Added\n- #461: Resolve test imports\n- #458: Wizard and version detection are now on `glide get`\n- #444: New config wizard helps you find versions and set ranges. Can be run from\n  `glide init` or as separate command\n- #438: Added ability to read symlink basedirs (thanks @klnusbaum)\n- #436: Added .idea to .gitignore\n- #393 and #401: Added a PPA (https://github.com/Masterminds/glide-ppa) and instructions\n  on using it (thanks @franciscocpg)\n- #390: Added support for custom Go executable name. Needed for environments like\n  appengine. Environment variable GLIDE_GO_EXECUTABLE (thanks @dpmcnevin)\n- #382: `glide info` command takes a format string and returns info (thanks @franciscocpg)\n- #365: glide list: support json output format (thanks @chancez)\n\n## Changed\n- Tags are now in the form v[SemVer]. The change is the initial v on the tag.\n  This is to conform with other Go tools that require this.\n- #501: Updating the plugins documentation and adding listing\n- #500: Log an error if stripping version control data fails (thanks @alexbrand)\n- #496: Updated to github.com/Masterminds/semver 1.1.1\n- #495: Updated to github.com/Masterminds/vcs 1.8.0\n- #494: Glide install skips fetch when it is up to date\n- #489: Make shared funcs for lockfile usage (thanks @heewa)\n- #459: When a conflict occurs output the tag, if one exists, for the commit\n- #443: Updating message indentation to be uniform\n- #431: Updated the docs on subpackages\n- #433: The global shared cache was reworked in prep for future uses\n- #396: Don't update the lock file if nothing has changed\n\n## Fixed\n- #460: Sometimes ignored packages were written to lock file. Fixed.\n- #463: Fixed possible nil pointer issues\n- #453: Fix DeleteUnused flag which was not working (thanks @s-urbaniak)\n- #432: Fixed issue with new net/http/httptrace std lib package\n- #392: Correctly normalize Windows package paths (thanks @jrick)\n- #395: Creating the cache key did not handle SCP properly\n- #386: Fixed help text indentation\n- #383: Failed `glide get` had been updating files. No longer does this\n\nAnd thanks to @derelk, @franciscocpg, @shawnps, @kngu9, @tugberkugurlu, @rhcarvalho,\n@gyuho, and @7imon7ays for documentation updates.\n\n# Release 0.10.2 (2016-04-06)\n\n- Issue #362: Updated docs on how -update-vendored works to help avoid confusion.\n- Fixed #371: Warn when name/location mismatch.\n- Fixed #290: On windows Glide was sometimes pulls in current project (thanks tzneal).\n- Fixed #361: Handle relative imports (thanks tmm1).\n- Fixed #373: Go 1.7 context package import issues.\n\n# Release 0.10.1 (2016-03-25)\n\n- Fixed #354: Fixed a situation where a dependency could be fetched when\n  set to ignore.\n\n# Release 0.10.0 (2016-03-24)\n\n- Issue #293: Added support for importing from Gomfile's (thanks mcuelenaere).\n- Issue #318: Opt-In to strip VCS metadata from vendor directory.\n- Issue #297: Adds exclude property for directories in local codebase to exclude\n  from scanning.\n- Issue #301: Detect version control type from scp style paths (e.g. git@) and\n  from scheme types (e.g., git://).\n- Issue #339: Add ability to remove nested vendor and Godeps workspaces\n  directories. Note, if Godeps rewriting occured it is undone. The Godeps handling\n  is deprecated from day one and will be removed when most Godeps projects have\n  migrated to vendor folder handling.\n- Issue #350: More detailed conflict information (commit metadata displayed).\n- Issue #351: Move to Gitter for chat.\n- Issue #352: Make Glide installable. The dependencies are checked into the\n  `vendor` folder.\n\n# Release 0.9.3 (2016-03-09)\n\n- Fixed #324: Glide tries to update ignored package\n\n# Release 0.9.2 (2016-03-08)\n\n- Fixed issue on #317: Some windows calls had the improper path separator.\n- Issue #315: Track updated packages to avoid duplicated work (in part by\n  thockin, thanks).\n- Fixed #312: Don't double-print SetVersion() failure (thanks thockin).\n- Fixed #311: Don't process deps if 'get' was a non-operation (thanks thockin).\n- Issue #307: Moving 'already set' to a debug message to cleanup output\n  (thanks thockin).\n- Fixed #306: Don't call SetVersion twice. There was a place where it was called\n  twice in a logical row (thanks thockin).\n- Fixed #304: Glide tries to update ignored packages.\n- Fixed #302: Force update can cause a panic.\n\n# Release 0.9.1 (2016-02-24)\n\n- Fixed #272: Handling appengine special package case.\n- Fixed #273: Handle multiple packages in the same directory but handling\n  build tags used in those packages.\n- Added documentation explaining how import resolution works.\n- Fixed #275 and #285: Empty directories as package locations reporting errors.\n  Improved the UX and handle the errors.\n- Fixed #279: Added Go 1.7 support that no longer has GO15VENDOREXPERIMENT.\n- Issue #267: Added `os` and `arch` import properties to the documentation.\n- Fixed #267: Glide was only walking the import tree based on build flags for\n  the current OS and Arch. This is a problem for systems like docker that have\n  variation built in.\n\n# Release 0.9.0 (2016-02-17)\n\n- Fixed #262: Using correct query string merging for go-get queries (thanks gdm85).\n- Fixed #251: Fixed warning message (thanks james-lawrence).\n- Adding support for IBM JazzHub.\n- Fixes #250: When unable to retrieve or set version on a dependency now erroring\n  and exiting with non-0 exit code.\n- Issue #218: Added `glide rm` command.\n- Fixed #215: Under some error conditions the package resolver could get into\n  an infinite loop.\n- Issue #234: Adding more options to the glide.yaml file including license,\n  owners, homepage, etc. See the docs for more detail.\n- Issue #237: Added Read The Docs support and initial docs. http://glide.readthedocs.org\n- Issue #248: Uses go env to get value of GO15VENDOREXPERIMENT due to 1.6 enabling\n  by default.\n- Issue #240: Glide only scans used imports rather than all paths in the tree.\n  The previous behavior is available via a flag.\n- Fixed #235: Glide on windows writing incorrect slashes to files.\n- Fixed #227: Fixed ensure when multiple gopaths.\n- Refactored Glide\n  - Many features broken out into packages. All but `action/` can be\n    used as libraries.\n  - Cookoo is not used anymore\n  - The `action/` package replaces `cmd/`\n\n# Release 0.8.3 (2015-12-30)\n\n- Issue #198: Instead of stopping `glide install` for a hash failures providing\n  a warning. Failed hash check is currently too aggressive.\n- Fixed #199: `glide up` on Windows unable to detect dependencies when GOPATH\n  and GOROOT on a different drive or when GOROOT ends in a path separator.\n- Fixed #194: `glide up` stalling on Windows due to POSIX path separators and\n  path list separators being used.\n- Fixed #185 and #187: Inaccurate hash being generated for lock file with nested\n  version ranges.\n- Fixed #182 and #183: Caching on go-import lookups mishandled some prefixes.\n- Fixed issue in deduping and sub-package names.\n- Fixed #189: nested dependencies that do not contain VCS information were not\n  being updated properly when --updated-vendored was being used.\n- Fixed #186: glide up PACKAGE was failing to generate a proper glide.lock file.\n\n# Release 0.8.2 (2015-12-21)\n\n- Fixed #169: cookoo git url has auth info. Makes glide unbuildable for\n  environments not setup for GitHub.\n- Fixed #180: the hash in the glide.lock file was not being properly calculated.\n- Fixed #174: glide get was causing an error when the flag --updated-vendored\n  was being used.\n- Fixed #175: glide get when the GOPATH isn't setup properly could end up in\n  an infinite loop.\n\n# Release 0.8.1 (2015-12-15)\n\n- Fixed #163: Was detecting std lib packages when the GOROOT was different at\n  runtime than compile time.\n- Fixed #165: glide update panics with --no-recursive option.\n- Added back zip build option to build scripts. This is useful for some\n  environments.\n\n# Release 0.8.0 (2015-12-10)\n\n- Issues #156 and #85: Added lockfile support (glide.lock). This file records\n  commit id pinned versions of the entire dependency tree. The `glide install`\n  command installs the pinned dependencies from the `glide.lock` file while\n  `glide update` updates the tree and lockfile. Most people should use `glide\n  install` unless they want to intentionally updated the pinned dependencies.\n  `glide install` is able to use concurrency to more quickly install update.\n- Issues #33 and #159: Glide notifies if a dependency checkout has uncomitted\n  changes.\n- Issue #146: Glide scans projects not managed by a dependency manager, fetches\n  their dependencies, and pins them in the glide.lock file.\n- Issue #99: Glide `get` pins dependencies by default and allows a version to\n  be passed in. For example, `glide get github.com/Masterminds/convert#^1.0.0`\n  will fetch `github.com/Masterminds/convert` with a version of `^1.0.0`.\n- Issue #155: Copying packages from the `GOPATH` is now opt-in.\n\n# Release 0.7.2 (2015-11-16)\n\n- Fixed #139: glide.yaml file imports being reordered when file written.\n- Fixed #140: packages in glide.yaml were no longer being deduped.\n\n# Release 0.7.1 (2015-11-10)\n\n- Fixed #136: Fixed infinite recursion in list and tree commands.\n- Fixed issue where glide guess listed a null parent.\n- Fixed #135: Hard failure when home directory not found for cache.\n- Fixed #137: Some messages not ending in \"\\n\".\n- Fixed #132 and #133: Build from source directions incorrect (thanks hyPiRion).\n\n# Release 0.7.0 (2015-11-02)\n\n- Fixed #110: Distribution as .tag.gz instead of .zip.\n- Issue #126: Added --no-color option to remove color for systems that do not\n  work well with color codes (thanks albrow).\n- Added caching functionality (some opt-in).\n- Added global debug flag.\n- Moved yaml parsing and writing to gopkg.in/yaml.v2 and separated\n  config handling into separate package.\n- Better godep import handling.\n- Fixed #98: Godep command name fix (thanks jonboulle).\n- #52 and #114: Add semantic version (SemVer) support.\n- #108: Flatten the dependency tree by default.\n- Fixed #107: Allow `glide get` to retrieve insecure packages with `--insecure`\n  flag.\n- #105: Import commands accept a filename with the `-f` flag.\n- Fixed #97: Fixed misspellings (thanks jonboulle).\n- #96: Allow multiple packages in `glide get`.\n- #92: Added support to `glide update` to only update a specific package.\n- #91: `glide list` now displays if a pkg is in vendor, GOPATH, or missing.\n- Issue #89: More robust GOPATH handling (thanks gcmt).\n- Fixed #65: Hg commands were not checking out the codebase on the first update.\n- Fixed #95: Added more detail for errors previously reporting \"Oops! exit\n  status 128\".\n- Fixed #86 and #71: Imported package names including a sub-package were checked\n  out to the wrong location. They are not checked out to the right place and\n  multiple instances of the top level repo are merged with error checking.\n\n# Release 0.6.1 (2015-09-21)\n\n- Fixed #82: C was not recognized as an internal package.\n- Fixed #84: novendor (nv) command returned directories with no Go code.\n\n# Release 0.6.0 (2015-09-16)\n\n- #53: Add support for gb-vendor manifest files.\n- Added `glide tree` command to inspect the code and see the imported packages.\n- Added `glide list` to see an alphabetized list of imported projects.\n- Added flatten feature to flatten the vendor tree (thanks interlock).\n- Fixed #74: Glide guess using the wrong GOROOT locations in some environments\n  (thanks janeczku).\n- Fixed #76: Glide tree doesn't exclude core libraries with the GOROOT is\n  incorrect (thanks janeczku).\n- Fixed #81: rebuild command did not look in vendor/ directory\n- Fixed #77: update failed when a commit id was set for the ref\n\n# Release 0.5.1 (2015-08-31)\n\n- Fixed #58: Guess command not working.\n- Fixed #56: Unable to use glide get on golang.org/x/[name]/[subpackage]\n- Fixed #61: The wrong version of a dependency can be pinned when packages are\n  vendored (no VCS repo associated with them).\n- Fixed #67: Unable to work go-get redirects.\n- Fixed #66: 'glide up' now has an --update-vendored (-u) flag to update\n  vendored directories.\n- Fixed #68: Handling the base where the GOPATH has multiple separated directories.\n\n# Release 0.5.0 (2015-08-19)\n\n**Glide .5 is a major update breaking some backwards compatability with\nprevious releases.**\n\n- Migrated to using the vendor/ directory and the go tools for vendor\n  package management. To leverage this you'll need to set the\n  environment variable GO15VENDOREXPERIMENT=1 and use Go 1.5.\n- `glide up` is now recursive and walks installed packages if there is\n  no vendor directory. Use the --no-recursive flag to skip this.\n- Removed GOPATH management. This was needed for vendor package\n  management that's not built into the go toolchain.\n- Switched to github.com/Masterminds/vcs for VCS integration.\n- When updating packages are now deleted if the --delete flag is set.\n  This feature is now opt-in.\n- Fixed #32: Detects VCS type and endpoint changes along with a --force flag\n  to replace the checkout if desired.\n\n# Release 0.4.1 (2015-07-13)\n\n- Issue #48: When GOPATH not _vendor directory not deleting unused packages.\n\n# Release 0.4.0 (2015-07-07)\n\n- Issue #34: Delete unused packages on update unless flag set.\n- Added 'glide create PACKAGE'\n- Added 'glide exec COMMAND'\n- Added 'glide get PACKAGE'\n- Added 'glide pin FILENAME'\n- Added 'glide guess FILENAME'\n- Updated help text\n\n# Release 0.3.0 (2015-06-17)\n\n- Issue #46: If VCS type is set use that rather than go get.\n- Issue #45: Added git fastpath if configured ref or tag matches current\n  one. (via roblillack)\n- Issue #30: Added support for changed VCS type to a git repo. (thanks roblillack)\n- Issue #42: Fixed update for new dependencies where repo not configured.\n  (thanks roblillack)\n- Issue #25: Added GOOS and GOARCH support.\n- Issue #35: Updated documentation on what update from existing repos means\n- Issue #37: Added support to import from GPM and Godep\n- Issue #36: Added example for shell (bash/zsh) prompt to show the current\n  GOPATH. (thanks eAndrius)\n- Issue #31: The local Go bin should be higher precedence in the\n  system's PATH (via jarod).\n- Issue #28: Use HTTPS instead of HTTP for git and hg. (Thanks chendo)\n- Issue #26: 'glide gopath' is smarter. It now looks for glide.yaml.\n- Issue #24: Trim whitespace off of package names. (Thanks roblillack)\n\n# Release 0.2.0 (2014-10-03)\n\n- Issue #15, #18: `glide guess` can guess dependencies for an existing\n  repo. (HUGE thanks to dz0ny)\n- Issue #14: Glide fails now when YAML is invalid.\n- Issue #13: cli.go added to Makefile (via roblillack)\n- Issue #12: InitGlide takes YAML file now\n- Issue #9: Fixed handling of $SHELL (Thanks roblillack)\n- Issue #10: Symbolic link uses a relative path now (Thanks roblillack)\n- Issue #5: Build step is deferred when 'go get' is used to fetch\n  packages. (Thanks gsalgado)\n- Issue #11: Add GOBIN to glide environment (via dz0ny)\n- Typos fixed (#17 by lamielle, #16 by roblillack)\n- Moved the CLI handling to cli.go (github.com/codegangsta/cli)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1611328125,
          "content": "Glide\nThe Masterminds\nCopyright (C) 2014-2016, Matt Butcher and Matt Farina\nCopyright (C) 2016, Hewlett Packard Enterprise Development LP\nCopyright (C) 2015, Google\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.833984375,
          "content": "GLIDE_GO_EXECUTABLE ?= go\nDIST_DIRS := find * -type d -exec\nVERSION ?= $(shell git describe --tags)\nVERSION_INCODE = $(shell perl -ne '/^var version.*\"([^\"]+)\".*$$/ && print \"v$$1\\n\"' glide.go)\nVERSION_INCHANGELOG = $(shell perl -ne '/^\\# Release (\\d+(\\.\\d+)+) / && print \"$$1\\n\"' CHANGELOG.md | head -n1)\n\nbuild:\n\t${GLIDE_GO_EXECUTABLE} build -o glide -ldflags \"-X main.version=${VERSION}\" glide.go\n\ninstall: build\n\tinstall -d ${DESTDIR}/usr/local/bin/\n\tinstall -m 755 ./glide ${DESTDIR}/usr/local/bin/glide\n\ntest:\n\t${GLIDE_GO_EXECUTABLE} test . ./gb ./path ./action ./tree ./util ./godep ./godep/strip ./gpm ./cfg ./dependency ./importer ./msg ./repo ./mirrors\n\nintegration-test:\n\t${GLIDE_GO_EXECUTABLE} build\n\t./glide up\n\t./glide install\n\nclean:\n\trm -f ./glide.test\n\trm -f ./glide\n\trm -rf ./dist\n\nbootstrap-dist:\n\t${GLIDE_GO_EXECUTABLE} get -u github.com/Masterminds/gox\n\nbuild-all:\n\tgox -verbose \\\n\t-ldflags \"-X main.version=${VERSION}\" \\\n\t-os=\"linux darwin windows freebsd openbsd netbsd\" \\\n\t-arch=\"amd64 386 armv5 armv6 armv7 arm64 s390x\" \\\n\t-osarch=\"!darwin/arm64\" \\\n\t-output=\"dist/{{.OS}}-{{.Arch}}/{{.Dir}}\" .\n\ndist: build-all\n\tcd dist && \\\n\t$(DIST_DIRS) cp ../LICENSE {} \\; && \\\n\t$(DIST_DIRS) cp ../README.md {} \\; && \\\n\t$(DIST_DIRS) tar -zcf glide-${VERSION}-{}.tar.gz {} \\; && \\\n\t$(DIST_DIRS) zip -r glide-${VERSION}-{}.zip {} \\; && \\\n\tcd ..\n\nverify-version:\n\t@if [ \"$(VERSION_INCODE)\" = \"v$(VERSION_INCHANGELOG)\" ]; then \\\n\t\techo \"glide: $(VERSION_INCHANGELOG)\"; \\\n\telif [ \"$(VERSION_INCODE)\" = \"v$(VERSION_INCHANGELOG)-dev\" ]; then \\\n\t\techo \"glide (development): $(VERSION_INCHANGELOG)\"; \\\n\telse \\\n\t\techo \"Version number in glide.go does not match CHANGELOG.md\"; \\\n\t\techo \"glide.go: $(VERSION_INCODE)\"; \\\n\t\techo \"CHANGELOG : $(VERSION_INCHANGELOG)\"; \\\n\t\texit 1; \\\n\tfi\n\n.PHONY: build test install clean bootstrap-dist build-all dist integration-test verify-version\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.3505859375,
          "content": "# Glide: Vendor Package Management for Golang\n\n![glide logo](https://glide.sh/assets/logo-small.png)\n\nAre you used to tools such as Cargo, npm, Composer, Nuget, Pip, Maven, Bundler,\nor other modern package managers? If so, Glide is the comparable Go tool.\n\n*Manage your vendor and vendored packages with ease.* Glide is a tool for\nmanaging the `vendor` directory within a Go package. This feature, first\nintroduced in Go 1.5, allows each package to have a `vendor` directory\ncontaining dependent packages for the project. These vendor packages can be\ninstalled by a tool (e.g. glide), similar to `go get` or they can be vendored and\ndistributed with the package.\n\n[![Build Status](https://travis-ci.org/Masterminds/glide.svg)](https://travis-ci.org/Masterminds/glide)\n[![Build status](https://ci.appveyor.com/api/projects/status/3pl4ytgdlfj852li?svg=true&passingText=windows%20build%20passing&failingText=windows%20build%20failing)](https://ci.appveyor.com/project/mattfarina/glide-a8xtg)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Masterminds/glide)](https://goreportcard.com/report/github.com/Masterminds/glide) [![GoDoc](https://godoc.org/github.com/Masterminds/glide?status.svg)](https://godoc.org/github.com/Masterminds/glide) [![Documentation Status](https://readthedocs.org/projects/glide/badge/?version=stable)](http://glide.readthedocs.org/en/stable/?badge=stable) [![Documentation Status](https://readthedocs.org/projects/glide/badge/?version=latest)](http://glide.readthedocs.org/en/latest/?badge=latest)\n\n### Go Modules\n\nThe Go community is now using Go Modules to handle dependencies. Please consider\nusing that instead of Glide. Glide is now mostly unmaintained.\n\n### Features\n\n* Ease dependency management\n* Support **versioning packages** including [Semantic Versioning\n  2.0.0](http://semver.org/) support. Any constraint the [`github.com/Masterminds/semver`](https://github.com/Masterminds/semver)\n  package can parse can be used.\n* Support **aliasing packages** (e.g. for working with github forks)\n* Remove the need for munging import statements\n* Work with all of the `go` tools\n* Support the VCS tools that Go supports:\n    - git\n    - bzr\n    - hg\n    - svn\n* Support custom local and global plugins (see docs/plugins.md)\n* Repository caching and data caching for improved performance.\n* Flatten dependencies resolving version differences and avoiding the inclusion\n  of a package multiple times.\n* Manage and install dependencies on-demand or vendored in your version control\n  system.\n\n## How It Works\n\nGlide scans the source code of your application or library to determine the needed\ndependencies. To determine the versions and locations (such as aliases for forks)\nGlide reads a `glide.yaml` file with the rules. With this information Glide retrieves\nneeded dependencies.\n\nWhen a dependent package is encountered its imports are scanned to determine\ndependencies of dependencies (transitive dependencies). If the dependent project\ncontains a `glide.yaml` file that information is used to help determine the\ndependency rules when fetching from a location or version to use. Configuration\nfrom Godep, GB, GOM, and GPM is also imported.\n\nThe dependencies are exported to the `vendor/` directory where the `go` tools\ncan find and use them. A `glide.lock` file is generated containing all the\ndependencies, including transitive ones.\n\nThe `glide init` command can be use to setup a new project, `glide update`\nregenerates the dependency versions using scanning and rules, and `glide install`\nwill install the versions listed in the `glide.lock` file, skipping scanning,\nunless the `glide.lock` file is not found in which case it will perform an update.\n\nA project is structured like this:\n\n```\n- $GOPATH/src/myProject (Your project)\n  |\n  |-- glide.yaml\n  |\n  |-- glide.lock\n  |\n  |-- main.go (Your main go code can live here)\n  |\n  |-- mySubpackage (You can create your own subpackages, too)\n  |    |\n  |    |-- foo.go\n  |\n  |-- vendor\n       |-- github.com\n            |\n            |-- Masterminds\n                  |\n                  |-- ... etc.\n```\n\n*Take a look at [the Glide source code](http://github.com/Masterminds/glide)\nto see this philosophy in action.*\n\n## Install\n\nThe easiest way to install the latest release on Mac or Linux is with the following script:\n\n```\ncurl https://glide.sh/get | sh\n```\n\nOn Mac OS X you can also install the latest release via [Homebrew](https://github.com/Homebrew/homebrew):\n\n```\n$ brew install glide\n```\n\nOn Ubuntu Precise (12.04), Trusty (14.04), Wily (15.10) or Xenial (16.04) you can install from our PPA:\n\n```\nsudo add-apt-repository ppa:masterminds/glide && sudo apt-get update\nsudo apt-get install glide\n```\n\nOn Ubuntu Zesty (17.04) the package is called `golang-glide`.\n\n[Binary packages](https://github.com/Masterminds/glide/releases) are available for Mac, Linux and Windows.\n\nFor a development version it is also possible to `go get github.com/Masterminds/glide`.\n\nTo build from source you can:\n\n1. Clone this repository into `$GOPATH/src/github.com/Masterminds/glide` and\n   change directory into it\n2. If you are using Go 1.5 ensure the environment variable GO15VENDOREXPERIMENT is set, for\n   example by running `export GO15VENDOREXPERIMENT=1`. In Go 1.6 it is enabled by default and\n   in Go 1.7 it is always enabled without the ability to turn it off.\n3. Run `make build`\n\nThis will leave you with `./glide`, which you can put in your `$PATH` if\nyou'd like. (You can also take a look at `make install` to install for\nyou.)\n\nThe Glide repo has now been configured to use glide to\nmanage itself, too.\n\n## Usage\n\n```\n$ glide create                            # Start a new workspace\n$ open glide.yaml                         # and edit away!\n$ glide get github.com/Masterminds/cookoo # Get a package and add to glide.yaml\n$ glide install                           # Install packages and dependencies\n# work, work, work\n$ go build                                # Go tools work normally\n$ glide up                                # Update to newest versions of the package\n```\n\nCheck out the `glide.yaml` in this directory, or examples in the `docs/`\ndirectory.\n\n### glide create (aliased to init)\n\nInitialize a new workspace. Among other things, this creates a `glide.yaml` file\nwhile attempting to guess the packages and versions to put in it. For example,\nif your project is using Godep it will use the versions specified there. Glide\nis smart enough to scan your codebase and detect the imports being used whether\nthey are specified with another package manager or not.\n\n```\n$ glide create\n[INFO]\tGenerating a YAML configuration file and guessing the dependencies\n[INFO]\tAttempting to import from other package managers (use --skip-import to skip)\n[INFO]\tScanning code to look for dependencies\n[INFO]\t--> Found reference to github.com/Masterminds/semver\n[INFO]\t--> Found reference to github.com/Masterminds/vcs\n[INFO]\t--> Found reference to github.com/codegangsta/cli\n[INFO]\t--> Found reference to gopkg.in/yaml.v2\n[INFO]\tWriting configuration file (glide.yaml)\n[INFO]\tWould you like Glide to help you find ways to improve your glide.yaml configuration?\n[INFO]\tIf you want to revisit this step you can use the config-wizard command at any time.\n[INFO]\tYes (Y) or No (N)?\nn\n[INFO]\tYou can now edit the glide.yaml file. Consider:\n[INFO]\t--> Using versions and ranges. See https://glide.sh/docs/versions/\n[INFO]\t--> Adding additional metadata. See https://glide.sh/docs/glide.yaml/\n[INFO]\t--> Running the config-wizard command to improve the versions in your configuration\n```\n\nThe `config-wizard`, noted here, can be run here or manually run at a later time.\nThis wizard helps you figure out versions and ranges you can use for your\ndependencies.\n\n### glide config-wizard\n\nThis runs a wizard that scans your dependencies and retrieves information on them\nto offer up suggestions that you can interactively choose. For example, it can\ndiscover if a dependency uses semantic versions and help you choose the version\nranges to use.\n\n### glide get [package name]\n\nYou can download one or more packages to your `vendor` directory and have it added to your\n`glide.yaml` file with `glide get`.\n\n```\n$ glide get github.com/Masterminds/cookoo\n```\n\nWhen `glide get` is used it will introspect the listed package to resolve its\ndependencies including using Godep, GPM, Gom, and GB config files.\n\n### glide update (aliased to up)\n\nDownload or update all of the libraries listed in the `glide.yaml` file and put\nthem in the `vendor` directory. It will also recursively walk through the\ndependency packages to fetch anything that's needed and read in any configuration.\n\n```\n$ glide up\n```\n\nThis will recurse over the packages looking for other projects managed by Glide,\nGodep, gb, gom, and GPM. When one is found those packages will be installed as needed.\n\nA `glide.lock` file will be created or updated with the dependencies pinned to\nspecific versions. For example, if in the `glide.yaml` file a version was\nspecified as a range (e.g., `^1.2.3`) it will be set to a specific commit id in\nthe `glide.lock` file. That allows for reproducible installs (see `glide install`).\n\nTo remove any nested `vendor/` directories from fetched packages see the `-v` flag.\n\n### glide install\n\nWhen you want to install the specific versions from the `glide.lock` file use\n`glide install`.\n\n```\n$ glide install\n```\n\nThis will read the `glide.lock` file and install the commit id specific versions\nthere.\n\nWhen the `glide.lock` file doesn't tie to the `glide.yaml` file, such as there\nbeing a change, it will provide a warning. Running `glide up` will recreate the\n`glide.lock` file when updating the dependency tree.\n\nIf no `glide.lock` file is present `glide install` will perform an `update` and\ngenerate a lock file.\n\nTo remove any nested `vendor/` directories from fetched packages see the `-v` flag.\n\n## glide novendor (aliased to nv)\n\nWhen you run commands like `go test ./...` it will iterate over all the\nsubdirectories including the `vendor` directory. When you are testing your\napplication you may want to test your application files without running all the\ntests of your dependencies and their dependencies. This is where the `novendor`\ncommand comes in. It lists all of the directories except `vendor`.\n\n    $ go test $(glide novendor)\n\nThis will run `go test` over all directories of your project except the\n`vendor` directory.\n\n## glide name\n\nWhen you're scripting with Glide there are occasions where you need to know\nthe name of the package you're working on. `glide name` returns the name of the\npackage listed in the `glide.yaml` file.\n\n### glide tree\n\nGlide includes a few commands that inspect code and give you details\nabout what is imported. `glide tree` is one such command. Running it\ngives data like this:\n\n```\n$ glide tree\ngithub.com/Masterminds/glide\n\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\tgithub.com/Masterminds/glide/cmd   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/cmd)\n\t\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\t\tgithub.com/Masterminds/glide/gb   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/gb)\n\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/Masterminds/glide/yaml   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/yaml)\n\t\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\t\tgopkg.in/yaml.v2   (/Users/mfarina/Code/go/src/gopkg.in/yaml.v2)\n\t\tgithub.com/Masterminds/semver   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/semver)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n\tgithub.com/Masterminds/cookoo   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo)\n\t\tgithub.com/Masterminds/cookoo/io   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/cookoo/io)\n\tgithub.com/Masterminds/glide/gb   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/gb)\n\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\tgithub.com/Masterminds/glide/yaml   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/yaml)\n\t\tgithub.com/Masterminds/glide/util   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/util)\n\t\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\t\tgopkg.in/yaml.v2   (/Users/mfarina/Code/go/src/gopkg.in/yaml.v2)\n\tgithub.com/Masterminds/semver   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/semver)\n\tgithub.com/Masterminds/vcs   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/Masterminds/vcs)\n\tgithub.com/codegangsta/cli   (/Users/mfarina/Code/go/src/github.com/Masterminds/glide/vendor/github.com/codegangsta/cli)\n```\n\nThis shows a tree of imports, excluding core libraries. Because\nvendoring makes it possible for the same package to live in multiple\nplaces, `glide tree` also prints the location of the package being\nimported.\n\n_This command is deprecated and will be removed in the near future._\n\n### glide list\n\nGlide's `list` command shows an alphabetized list of all the packages\nthat a project imports.\n\n```\n$ glide list\nINSTALLED packages:\n\tvendor/github.com/Masterminds/cookoo\n\tvendor/github.com/Masterminds/cookoo/fmt\n\tvendor/github.com/Masterminds/cookoo/io\n\tvendor/github.com/Masterminds/cookoo/web\n\tvendor/github.com/Masterminds/semver\n\tvendor/github.com/Masterminds/vcs\n\tvendor/github.com/codegangsta/cli\n\tvendor/gopkg.in/yaml.v2\n```\n\n### glide help\n\nPrint the glide help.\n\n```\n$ glide help\n```\n\n### glide --version\n\nPrint the version and exit.\n\n```\n$ glide --version\nglide version 0.12.0\n```\n\n### glide.yaml\n\nFor full details on the `glide.yaml` files see [the documentation](https://glide.sh/docs/glide.yaml).\n\nThe `glide.yaml` file does two critical things:\n\n1. It names the current package\n2. It declares external dependencies\n\nA brief `glide.yaml` file looks like this:\n\n```yaml\npackage: github.com/Masterminds/glide\nimport:\n  - package: github.com/Masterminds/semver\n  - package: github.com/Masterminds/cookoo\n    version: ^1.2.0\n    repo: git@github.com:Masterminds/cookoo.git\n```\n\nThe above tells `glide` that...\n\n1. This package is named `github.com/Masterminds/glide`\n2. That this package depends on two libraries.\n\nThe first library exemplifies a minimal package import. It merely gives\nthe fully qualified import path.\n\nWhen Glide reads the definition for the second library, it will get the repo\nfrom the source in `repo`, checkout the latest version between 1.2.0 and 2.0.0,\nand put it in `github.com/Masterminds/cookoo` in the `vendor` directory. (Note\nthat `package` and `repo` can be completely different)\n\n**TIP:** The version is either VCS dependent and can be anything that can be checked\nout or a semantic version constraint that can be parsed by the [`github.com/\nMasterminds/semver`](https://github.com/Masterminds/semver) package.\nFor example, with Git this can be a branch, tag, or hash. This varies and\ndepends on what's supported in the VCS.\n\n**TIP:** In general, you are advised to use the *base package name* for\nimporting a package, not a subpackage name. For example, use\n`github.com/kylelemons/go-gypsy` and not\n`github.com/kylelemons/go-gypsy/yaml`.\n\n## Supported Version Control Systems\n\nThe Git, SVN, Mercurial (Hg), and Bzr source control systems are supported. This\nhappens through the [vcs package](https://github.com/masterminds/vcs).\n\n## Frequently Asked Questions (F.A.Q.)\n\n#### Q: Why does Glide have the concept of sub-packages when Go doesn't?\n\nIn Go every directory is a package. This works well when you have one repo\ncontaining all of your packages. When you have different packages in different\nVCS locations things become a bit more complicated. A project containing a\ncollection of packages should be handled with the same information including\nthe version. By grouping packages this way we are able to manage the related\ninformation.\n\n#### Q: bzr (or hg) is not working the way I expected. Why?\n\nThese are works in progress, and may need some additional tuning. Please\ntake a look at the [vcs package](https://github.com/masterminds/vcs). If you\nsee a better way to handle it please let us know.\n\n#### Q: Should I check `vendor/` into version control?\n\nThat's up to you. It's not necessary, but it may also cause you extra\nwork and lots of extra space in your VCS. There may also be unforeseen errors\n([see an example](https://github.com/mattfarina/golang-broken-vendor)).\n\n#### Q: How do I import settings from GPM, Godep, gom or gb?\n\nThere are two parts to importing.\n\n1. If a package you import has configuration for GPM, Godep, gom or gb Glide will\n   recursively install the dependencies automatically.\n2. If you would like to import configuration from GPM, Godep, gom or gb to Glide see\n   the `glide import` command. For example, you can run `glide import godep` for\n   Glide to detect the projects Godep configuration and generate a `glide.yaml`\n   file for you.\n\nEach of these will merge your existing `glide.yaml` file with the\ndependencies it finds for those managers, and then emit the file as\noutput. **It will not overwrite your glide.yaml file.**\n\nYou can write it to file like this:\n\n```\n$ glide import godep -f glide.yaml\n```\n\n#### Q: Can Glide fetch a package based on OS or Arch?\n\nA: Yes. Using the `os` and `arch` fields on a `package`, you can specify\nwhich OSes and architectures the package should be fetched for. For\nexample, the following package will only be fetched for 64-bit\nDarwin/OSX systems:\n\n```yaml\n- package: some/package\n  os:\n    - darwin\n  arch:\n    - amd64\n```\n\nThe package will not be fetched for other architectures or OSes.\n\n## LICENSE\n\nThis package is made available under an MIT-style license. See\nLICENSE.txt.\n\n## Thanks!\n\nWe owe a huge debt of gratitude to the [GPM and\nGVP](https://github.com/pote/gpm) projects, which\ninspired many of the features of this package. If `glide` isn't the\nright Go project manager for you, check out those.\n\nThe Composer (PHP), npm (JavaScript), and Bundler (Ruby) projects all\ninspired various aspects of this tool, as well.\n\n## The Name\n\nAside from being catchy, \"glide\" is a contraction of \"Go Elide\". The\nidea is to compress the tasks that normally take us lots of time into a\njust a few seconds.\n"
        },
        {
          "name": "action",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.36328125,
          "content": "\nversion: build-{build}.{branch}\n\nclone_folder: C:\\gopath\\src\\github.com\\Masterminds\\glide\nshallow_clone: true\n\nenvironment:\n  GOPATH: C:\\gopath\n\nplatform:\n  - x64\n\nbuild: off\n\ninstall:\n  - go version\n  - go env\n\ntest_script:\n  - go test -v . ./gb ./path ./action ./tree ./util ./godep ./godep/strip ./gpm ./cfg ./dependency ./importer ./msg ./repo ./mirrors\n\ndeploy: off\n"
        },
        {
          "name": "cache",
          "type": "tree",
          "content": null
        },
        {
          "name": "cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "dependency",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "gb",
          "type": "tree",
          "content": null
        },
        {
          "name": "glide.go",
          "type": "blob",
          "size": 25.9462890625,
          "content": "// Glide is a command line utility that manages Go project dependencies.\n//\n// Configuration of where to start is managed via a glide.yaml in the root of a\n// project. The yaml\n//\n// A glide.yaml file looks like:\n//\n//\t\tpackage: github.com/Masterminds/glide\n//\t\timports:\n//\t\t- package: github.com/Masterminds/cookoo\n//\t\t- package: github.com/kylelemons/go-gypsy\n//\t\t  subpackages:\n//\t\t  - yaml\n//\n// Glide puts dependencies in a vendor directory. Go utilities require this to\n// be in your GOPATH. Glide makes this easy.\n//\n// For more information use the `glide help` command or see https://glide.sh\npackage main\n\nimport (\n\t\"path/filepath\"\n\n\t\"github.com/Masterminds/glide/action\"\n\t\"github.com/Masterminds/glide/cache\"\n\t\"github.com/Masterminds/glide/msg\"\n\tgpath \"github.com/Masterminds/glide/path\"\n\t\"github.com/Masterminds/glide/repo\"\n\t\"github.com/Masterminds/glide/util\"\n\n\t\"github.com/codegangsta/cli\"\n\n\t\"fmt\"\n\t\"os\"\n)\n\nvar version = \"0.13.4-dev\"\n\nconst usage = `Vendor Package Management for your Go projects.\n\n   Each project should have a 'glide.yaml' file in the project directory. Files\n   look something like this:\n\n       package: github.com/Masterminds/glide\n       imports:\n       - package: github.com/Masterminds/cookoo\n         version: 1.1.0\n       - package: github.com/kylelemons/go-gypsy\n         subpackages:\n         - yaml\n\n   For more details on the 'glide.yaml' files see the documentation at\n   https://glide.sh/docs/glide.yaml\n`\n\n// VendorDir default vendor directory name\nvar VendorDir = \"vendor\"\n\nfunc main() {\n\tapp := cli.NewApp()\n\tapp.Name = \"glide\"\n\tapp.Usage = usage\n\tapp.Version = version\n\tapp.Flags = []cli.Flag{\n\t\tcli.StringFlag{\n\t\t\tName:  \"yaml, y\",\n\t\t\tValue: \"glide.yaml\",\n\t\t\tUsage: \"Set a YAML configuration file.\",\n\t\t},\n\t\tcli.BoolFlag{\n\t\t\tName:  \"quiet, q\",\n\t\t\tUsage: \"Quiet (no info or debug messages)\",\n\t\t},\n\t\tcli.BoolFlag{\n\t\t\tName:  \"debug\",\n\t\t\tUsage: \"Print debug verbose informational messages\",\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:   \"home\",\n\t\t\tValue:  gpath.Home(),\n\t\t\tUsage:  \"The location of Glide files\",\n\t\t\tEnvVar: \"GLIDE_HOME\",\n\t\t},\n\t\tcli.StringFlag{\n\t\t\tName:   \"tmp\",\n\t\t\tValue:  \"\",\n\t\t\tUsage:  \"The temp directory to use. Defaults to systems temp\",\n\t\t\tEnvVar: \"GLIDE_TMP\",\n\t\t},\n\t\tcli.BoolFlag{\n\t\t\tName:  \"no-color\",\n\t\t\tUsage: \"Turn off colored output for log messages\",\n\t\t},\n\t}\n\tapp.CommandNotFound = func(c *cli.Context, command string) {\n\t\t// TODO: Set some useful env vars.\n\t\taction.Plugin(command, os.Args)\n\t}\n\tapp.Before = startup\n\tapp.After = shutdown\n\tapp.Commands = commands()\n\n\t// Detect errors from the Before and After calls and exit on them.\n\tif err := app.Run(os.Args); err != nil {\n\t\tmsg.Err(err.Error())\n\t\tos.Exit(1)\n\t}\n\n\t// If there was an Error message exit non-zero.\n\tif msg.HasErrored() {\n\t\tm := msg.Color(msg.Red, \"An Error has occurred\")\n\t\tmsg.Msg(m)\n\t\tos.Exit(2)\n\t}\n}\n\nfunc commands() []cli.Command {\n\treturn []cli.Command{\n\t\t{\n\t\t\tName:      \"create\",\n\t\t\tShortName: \"init\",\n\t\t\tUsage:     \"Initialize a new project, creating a glide.yaml file\",\n\t\t\tDescription: `This command starts from a project without Glide and\n   sets it up. It generates a glide.yaml file, parsing your codebase to guess\n   the dependencies to include. Once this step is done you may edit the\n   glide.yaml file to update imported dependency properties such as the version\n   or version range to include.\n\n   To fetch the dependencies you may run 'glide install'.`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"skip-import\",\n\t\t\t\t\tUsage: \"When initializing skip importing from other package managers.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"non-interactive\",\n\t\t\t\t\tUsage: \"Disable interactive prompts.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.Create(\".\", c.Bool(\"skip-import\"), c.Bool(\"non-interactive\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"config-wizard\",\n\t\t\tShortName: \"cw\",\n\t\t\tUsage:     \"Wizard that makes optional suggestions to improve config in a glide.yaml file.\",\n\t\t\tDescription: `Glide will analyze a projects glide.yaml file and the imported\n\t\tprojects to find ways the glide.yaml file can potentially be improved. It\n\t\twill then interactively make suggestions that you can skip or accept.`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.ConfigWizard(\".\")\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"get\",\n\t\t\tUsage: \"Install one or more packages into `vendor/` and add dependency to glide.yaml.\",\n\t\t\tDescription: `Gets one or more package (like 'go get') and then adds that file\n   to the glide.yaml file. Multiple package names can be specified on one line.\n\n       $ glide get github.com/Masterminds/cookoo/web\n\n   The above will install the project github.com/Masterminds/cookoo and add\n   the subpackage 'web'.\n\n   If a fetched dependency has a glide.yaml file, configuration from Godep,\n   GPM, GOM, or GB Glide that configuration will be used to find the dependencies\n   and versions to fetch. If those are not available the dependent packages will\n   be fetched as either a version specified elsewhere or the latest version.\n\n   When adding a new dependency Glide will perform an update to work out\n   the versions for the dependencies of this dependency (transitive ones). This\n   will generate an updated glide.lock file with specific locked versions to use.\n\n   The '--strip-vendor' flag will remove any nested 'vendor' folders and\n   'Godeps/_workspace' folders after an update (along with undoing any Godep\n   import rewriting). Note, The Godeps specific functionality is deprecated and\n   will be removed when most Godeps users have migrated to using the vendor\n   folder.`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"test\",\n\t\t\t\t\tUsage: \"Add test dependencies.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"insecure\",\n\t\t\t\t\tUsage: \"Use http:// rather than https:// to retrieve packages.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"no-recursive, quick\",\n\t\t\t\t\tUsage: \"Disable updating dependencies' dependencies.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"force\",\n\t\t\t\t\tUsage: \"If there was a change in the repo or VCS switch to new one. Warning, changes will be lost.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"all-dependencies\",\n\t\t\t\t\tUsage: \"This will resolve all dependencies for all packages, not just those directly used.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"update-vendored, u\",\n\t\t\t\t\tUsage:  \"Update vendored packages (without local VCS repo). Warning, changes will be lost.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to cache them.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache-gopath\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to put them in the GOPATH, too.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"use-gopath\",\n\t\t\t\t\tUsage:  \"Copy dependencies from the GOPATH if they exist there.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"resolve-current\",\n\t\t\t\t\tUsage: \"Resolve dependencies for only the current system rather than all build modes.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"strip-vcs, s\",\n\t\t\t\t\tUsage:  \"Removes version control metadata (e.g, .git directory) from the vendor folder.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"strip-vendor, v\",\n\t\t\t\t\tUsage: \"Removes nested vendor and Godeps/_workspace directories.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"non-interactive\",\n\t\t\t\t\tUsage: \"Disable interactive prompts.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"skip-test\",\n\t\t\t\t\tUsage: \"Resolve dependencies in test files.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.Bool(\"delete\") {\n\t\t\t\t\tmsg.Warn(\"The --delete flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"update-vendored\") {\n\t\t\t\t\tmsg.Warn(\"The --update-vendored flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.String(\"file\") != \"\" {\n\t\t\t\t\tmsg.Warn(\"The --file flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache\") {\n\t\t\t\t\tmsg.Warn(\"The --cache flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --cache-gopath flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"use-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --use-gopath flag is deprecated. Please see overrides.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"strip-vcs\") {\n\t\t\t\t\tmsg.Warn(\"The --strip-vcs flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\n\t\t\t\tif len(c.Args()) < 1 {\n\t\t\t\t\tfmt.Println(\"Oops! Package name is required.\")\n\t\t\t\t\tos.Exit(1)\n\t\t\t\t}\n\n\t\t\t\tif c.Bool(\"resolve-current\") {\n\t\t\t\t\tutil.ResolveCurrent = true\n\t\t\t\t\tmsg.Warn(\"Only resolving dependencies for the current OS/Arch.\")\n\t\t\t\t}\n\n\t\t\t\tinst := repo.NewInstaller()\n\t\t\t\tinst.Force = c.Bool(\"force\")\n\t\t\t\tinst.ResolveAllFiles = c.Bool(\"all-dependencies\")\n\t\t\t\tinst.ResolveTest = !c.Bool(\"skip-test\")\n\t\t\t\tpackages := []string(c.Args())\n\t\t\t\tinsecure := c.Bool(\"insecure\")\n\t\t\t\taction.Get(packages, inst, insecure, c.Bool(\"no-recursive\"), c.Bool(\"strip-vendor\"), c.Bool(\"non-interactive\"), c.Bool(\"test\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"remove\",\n\t\t\tShortName: \"rm\",\n\t\t\tUsage:     \"Remove a package from the glide.yaml file, and regenerate the lock file.\",\n\t\t\tDescription: `This takes one or more package names, and removes references from the glide.yaml file.\n   This will rebuild the glide lock file re-resolving the depencies.`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"delete,d\",\n\t\t\t\t\tUsage: \"Also delete from vendor/ any packages that are no longer used.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif len(c.Args()) < 1 {\n\t\t\t\t\tfmt.Println(\"Oops! At least one package name is required.\")\n\t\t\t\t\tos.Exit(1)\n\t\t\t\t}\n\n\t\t\t\tif c.Bool(\"delete\") {\n\t\t\t\t\t// FIXME: Implement this in the installer.\n\t\t\t\t\tfmt.Println(\"Delete is not currently implemented.\")\n\t\t\t\t}\n\t\t\t\tinst := repo.NewInstaller()\n\t\t\t\tinst.Force = c.Bool(\"force\")\n\t\t\t\tpackages := []string(c.Args())\n\t\t\t\taction.Remove(packages, inst)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"import\",\n\t\t\tUsage: \"Import files from other dependency management systems.\",\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:  \"godep\",\n\t\t\t\t\tUsage: \"Import Godep's Godeps.json files and display the would-be yaml file\",\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"file, f\",\n\t\t\t\t\t\t\tUsage: \"Save all of the discovered dependencies to a Glide YAML file.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\taction.ImportGodep(c.String(\"file\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"gpm\",\n\t\t\t\t\tUsage: \"Import GPM's Godeps and Godeps-Git files and display the would-be yaml file\",\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"file, f\",\n\t\t\t\t\t\t\tUsage: \"Save all of the discovered dependencies to a Glide YAML file.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\taction.ImportGPM(c.String(\"file\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"gb\",\n\t\t\t\t\tUsage: \"Import gb's manifest file and display the would-be yaml file\",\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"file, f\",\n\t\t\t\t\t\t\tUsage: \"Save all of the discovered dependencies to a Glide YAML file.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\taction.ImportGB(c.String(\"file\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"gom\",\n\t\t\t\t\tUsage: \"Import Gomfile and display the would-be yaml file\",\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"file, f\",\n\t\t\t\t\t\t\tUsage: \"Save all of the discovered dependencies to a Glide YAML file.\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\taction.ImportGom(c.String(\"file\"))\n\t\t\t\t\t\treturn nil\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:        \"name\",\n\t\t\tUsage:       \"Print the name of this project.\",\n\t\t\tDescription: `Read the glide.yaml file and print the name given on the 'package' line.`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.Name()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"novendor\",\n\t\t\tShortName: \"nv\",\n\t\t\tUsage:     \"List all non-vendor paths in a directory.\",\n\t\t\tDescription: `Given a directory, list all the relevant Go paths that are not vendored.\n\nExample:\n   $ go test $(glide novendor)`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"dir,d\",\n\t\t\t\t\tUsage: \"Specify a directory to run novendor against.\",\n\t\t\t\t\tValue: \".\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"no-subdir,x\",\n\t\t\t\t\tUsage: \"Specify this to prevent nv from append '/...' to all directories.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.NoVendor(c.String(\"dir\"), true, !c.Bool(\"no-subdir\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"rebuild\",\n\t\t\tUsage: \"Rebuild ('go build') the dependencies\",\n\t\t\tDescription: `(Deprecated) This rebuilds the packages' '.a' files. On some systems\n\tthis can improve performance on subsequent 'go run' and 'go build' calls.`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.Rebuild()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"install\",\n\t\t\tShortName: \"i\",\n\t\t\tUsage:     \"Install a project's dependencies\",\n\t\t\tDescription: `This uses the native VCS of each package to install\n   the appropriate version. There are two ways a project's dependencies can\n   be installed. When there is a glide.yaml file defining the dependencies but\n   no lock file (glide.lock) the dependencies are installed using the \"update\"\n   command and a glide.lock file is generated pinning all dependencies. If a\n   glide.lock file is already present the dependencies are installed or updated\n   from the lock file.`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"delete\",\n\t\t\t\t\tUsage:  \"Delete vendor packages not specified in config.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"force\",\n\t\t\t\t\tUsage: \"If there was a change in the repo or VCS switch to new one. Warning: changes will be lost.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"update-vendored, u\",\n\t\t\t\t\tUsage:  \"Update vendored packages (without local VCS repo). Warning: this may destroy local modifications to vendor/.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:   \"file, f\",\n\t\t\t\t\tUsage:  \"Save all of the discovered dependencies to a Glide YAML file. (DEPRECATED: This has no impact.)\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to cache them.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache-gopath\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to put them in the GOPATH, too.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"use-gopath\",\n\t\t\t\t\tUsage:  \"Copy dependencies from the GOPATH if they exist there.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"strip-vcs, s\",\n\t\t\t\t\tUsage:  \"Removes version control metadata (e.g, .git directory) from the vendor folder.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"strip-vendor, v\",\n\t\t\t\t\tUsage: \"Removes nested vendor and Godeps/_workspace directories.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"skip-test\",\n\t\t\t\t\tUsage: \"Resolve dependencies in test files.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.Bool(\"delete\") {\n\t\t\t\t\tmsg.Warn(\"The --delete flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"update-vendored\") {\n\t\t\t\t\tmsg.Warn(\"The --update-vendored flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.String(\"file\") != \"\" {\n\t\t\t\t\tmsg.Warn(\"The --flag flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache\") {\n\t\t\t\t\tmsg.Warn(\"The --cache flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --cache-gopath flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"use-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --use-gopath flag is deprecated. Please see overrides.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"strip-vcs\") {\n\t\t\t\t\tmsg.Warn(\"The --strip-vcs flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\n\t\t\t\tinstaller := repo.NewInstaller()\n\t\t\t\tinstaller.Force = c.Bool(\"force\")\n\t\t\t\tinstaller.Home = c.GlobalString(\"home\")\n\t\t\t\tinstaller.ResolveTest = !c.Bool(\"skip-test\")\n\n\t\t\t\taction.Install(installer, c.Bool(\"strip-vendor\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"update\",\n\t\t\tShortName: \"up\",\n\t\t\tUsage:     \"Update a project's dependencies\",\n\t\t\tDescription: `This updates the dependencies by scanning the codebase\n   to determine the needed dependencies and fetching them following the rules\n   in the glide.yaml file. When no rules exist the tip of the default branch\n   is used. For more details see https://glide.sh/docs/glide.yaml\n\n   If a dependency has a glide.yaml file, update will read that file and\n   use the information contained there. Those dependencies are maintained in\n   the top level 'vendor/' directory. 'vendor/foo/bar' will have its\n   dependencies stored in 'vendor/'. This behavior can be disabled with\n   '--no-recursive'. When this behavior is skipped a glide.lock file is not\n   generated because the full dependency tree cannot be known.\n\n   Glide will also import Godep, GB, GOM, and GPM files as it finds them in dependencies.\n   It will create a glide.yaml file from the Godeps data, and then update. This\n   has no effect if '--no-recursive' is set.\n\n   The '--strip-vendor' flag will remove any nested 'vendor' folders and\n   'Godeps/_workspace' folders after an update (along with undoing any Godep\n   import rewriting). Note, the Godeps specific functionality is deprecated and\n   will be removed when most Godeps users have migrated to using the vendor\n   folder.`,\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"delete\",\n\t\t\t\t\tUsage:  \"Delete vendor packages not specified in config.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"no-recursive, quick\",\n\t\t\t\t\tUsage: \"Disable updating dependencies' dependencies. Only update things in glide.yaml.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"force\",\n\t\t\t\t\tUsage: \"If there was a change in the repo or VCS switch to new one. Warning, changes will be lost.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"all-dependencies\",\n\t\t\t\t\tUsage: \"This will resolve all dependencies for all packages, not just those directly used.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"update-vendored, u\",\n\t\t\t\t\tUsage:  \"Update vendored packages (without local VCS repo). Warning, changes will be lost.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:   \"file, f\",\n\t\t\t\t\tUsage:  \"Save all of the discovered dependencies to a Glide YAML file.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to cache them.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"cache-gopath\",\n\t\t\t\t\tUsage:  \"When downloading dependencies attempt to put them in the GOPATH, too.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"use-gopath\",\n\t\t\t\t\tUsage:  \"Copy dependencies from the GOPATH if they exist there.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"resolve-current\",\n\t\t\t\t\tUsage: \"Resolve dependencies for only the current system rather than all build modes.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:   \"strip-vcs, s\",\n\t\t\t\t\tUsage:  \"Removes version control metadata (e.g, .git directory) from the vendor folder.\",\n\t\t\t\t\tHidden: true,\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"strip-vendor, v\",\n\t\t\t\t\tUsage: \"Removes nested vendor and Godeps/_workspace directories.\",\n\t\t\t\t},\n\t\t\t\tcli.BoolFlag{\n\t\t\t\t\tName:  \"skip-test\",\n\t\t\t\t\tUsage: \"Resolve dependencies in test files.\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.Bool(\"delete\") {\n\t\t\t\t\tmsg.Warn(\"The --delete flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"update-vendored\") {\n\t\t\t\t\tmsg.Warn(\"The --update-vendored flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.String(\"file\") != \"\" {\n\t\t\t\t\tmsg.Warn(\"The --flag flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache\") {\n\t\t\t\t\tmsg.Warn(\"The --cache flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"cache-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --cache-gopath flag is deprecated.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"use-gopath\") {\n\t\t\t\t\tmsg.Warn(\"The --use-gopath flag is deprecated. Please see overrides.\")\n\t\t\t\t}\n\t\t\t\tif c.Bool(\"strip-vcs\") {\n\t\t\t\t\tmsg.Warn(\"The --strip-vcs flag is deprecated. This now works by default.\")\n\t\t\t\t}\n\n\t\t\t\tif c.Bool(\"resolve-current\") {\n\t\t\t\t\tutil.ResolveCurrent = true\n\t\t\t\t\tmsg.Warn(\"Only resolving dependencies for the current OS/Arch\")\n\t\t\t\t}\n\n\t\t\t\tinstaller := repo.NewInstaller()\n\t\t\t\tinstaller.Force = c.Bool(\"force\")\n\t\t\t\tinstaller.ResolveAllFiles = c.Bool(\"all-dependencies\")\n\t\t\t\tinstaller.Home = c.GlobalString(\"home\")\n\t\t\t\tinstaller.ResolveTest = !c.Bool(\"skip-test\")\n\n\t\t\t\taction.Update(installer, c.Bool(\"no-recursive\"), c.Bool(\"strip-vendor\"))\n\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"tree\",\n\t\t\tUsage: \"(Deprecated) Tree prints the dependencies of this project as a tree.\",\n\t\t\tDescription: `This scans a project's source files and builds a tree\n   representation of the import graph.\n\n   It ignores testdata/ and directories that begin with . or _. Packages in\n   vendor/ are only included if they are referenced by the main project or\n   one of its dependencies.\n\n   Note, for large projects this can display a large list tens of thousands of\n   lines long.`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.Tree(\".\", false)\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"list\",\n\t\t\tUsage: \"List prints all dependencies that the present code references.\",\n\t\t\tDescription: `List scans your code and lists all of the packages that are used.\n\n   It does not use the glide.yaml. Instead, it inspects the code to determine what packages are\n   imported.\n\n   Directories that begin with . or _ are ignored, as are testdata directories. Packages in\n   vendor are only included if they are used by the project.`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.List(\".\", true, c.String(\"output\"))\n\t\t\t\treturn nil\n\t\t\t},\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"output, o\",\n\t\t\t\t\tUsage: \"Output format. One of: json|json-pretty|text\",\n\t\t\t\t\tValue: \"text\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"info\",\n\t\t\tUsage: \"Info prints information about this project\",\n\t\t\tFlags: []cli.Flag{\n\t\t\t\tcli.StringFlag{\n\t\t\t\t\tName:  \"format, f\",\n\t\t\t\t\tUsage: `Format of the information wanted (required).`,\n\t\t\t\t},\n\t\t\t},\n\t\t\tDescription: `A format containing the text with replacement variables\n   has to be passed in. Those variables are:\n\n       %n - name\n       %d - description\n       %h - homepage\n       %l - license\n\n   For example, given a project with the following glide.yaml:\n\n       package: foo\n       homepage: https://example.com\n       license: MIT\n       description: Some example description\n\n   Then running the following commands:\n\n       glide info -f %n\n          prints 'foo'\n\n       glide info -f \"License: %l\"\n          prints 'License: MIT'\n\n       glide info -f \"%n - %d - %h - %l\"\n          prints 'foo - Some example description - https://example.com - MIT'`,\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\tif c.IsSet(\"format\") {\n\t\t\t\t\taction.Info(c.String(\"format\"))\n\t\t\t\t} else {\n\t\t\t\t\tcli.ShowCommandHelp(c, c.Command.Name)\n\t\t\t\t}\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:      \"cache-clear\",\n\t\t\tShortName: \"cc\",\n\t\t\tUsage:     \"Clears the Glide cache.\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.CacheClear()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"about\",\n\t\t\tUsage: \"Learn about Glide\",\n\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\taction.About()\n\t\t\t\treturn nil\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tName:  \"mirror\",\n\t\t\tUsage: \"Manage mirrors\",\n\t\t\tDescription: `Mirrors provide the ability to replace a repo location with\n   another location that's a mirror of the original. This is useful when you want\n   to have a cache for your continuous integration (CI) system or if you want to\n   work on a dependency in a local location.\n\n   The mirrors are stored in a mirrors.yaml file in your GLIDE_HOME.\n\n   The three commands to manage mirrors are 'list', 'set', and 'remove'.\n\n   Use 'set' in the form:\n\n       glide mirror set [original] [replacement]\n\n   or\n\n       glide mirror set [original] [replacement] --vcs [type]\n\n   for example,\n\n       glide mirror set https://github.com/example/foo https://git.example.com/example/foo.git\n\n       glide mirror set https://github.com/example/foo file:///path/to/local/repo --vcs git\n\n   Use 'remove' in the form:\n\n       glide mirror remove [original]\n\n   for example,\n\n       glide mirror remove https://github.com/example/foo`,\n\t\t\tSubcommands: []cli.Command{\n\t\t\t\t{\n\t\t\t\t\tName:  \"list\",\n\t\t\t\t\tUsage: \"List the current mirrors\",\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\treturn action.MirrorsList()\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:  \"set\",\n\t\t\t\t\tUsage: \"Set a mirror. This overwrites an existing entry if one exists\",\n\t\t\t\t\tDescription: `Use 'set' in the form:\n\n       glide mirror set [original] [replacement]\n\n   or\n\n       glide mirror set [original] [replacement] --vcs [type]\n\n   for example,\n\n       glide mirror set https://github.com/example/foo https://git.example.com/example/foo.git\n\n       glide mirror set https://github.com/example/foo file:///path/to/local/repo --vcs git`,\n\t\t\t\t\tFlags: []cli.Flag{\n\t\t\t\t\t\tcli.StringFlag{\n\t\t\t\t\t\t\tName:  \"vcs\",\n\t\t\t\t\t\t\tUsage: \"The VCS type to use. Autodiscovery is attempted when not supplied. Can be one of git, svn, bzr, or hg\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\treturn action.MirrorsSet(c.Args().Get(0), c.Args().Get(1), c.String(\"vcs\"))\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tName:      \"remove\",\n\t\t\t\t\tShortName: \"rm\",\n\t\t\t\t\tUsage:     \"Remove a mirror\",\n\t\t\t\t\tDescription: `Use 'remove' in the form:\n\n       glide mirror remove [original]\n\n   for example,\n\n       glide mirror remove https://github.com/example/foo`,\n\t\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\t\treturn action.MirrorsRemove(c.Args().Get(0))\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t}\n}\n\n// startup sets up the base environment.\n//\n// It does not assume the presence of a Glide.yaml file or vendor/ directory,\n// so it can be used by any Glide command.\nfunc startup(c *cli.Context) error {\n\taction.Debug(c.Bool(\"debug\"))\n\taction.NoColor(c.Bool(\"no-color\"))\n\taction.Quiet(c.Bool(\"quiet\"))\n\taction.Init(c.String(\"yaml\"), c.String(\"home\"))\n\taction.EnsureGoVendor()\n\tgpath.Tmp = c.String(\"tmp\")\n\treturn nil\n}\n\nfunc shutdown(c *cli.Context) error {\n\tcache.SystemUnlock()\n\treturn nil\n}\n\n// Get the path to the glide.yaml file.\n//\n// This returns the name of the path, even if the file does not exist. The value\n// may be set by the user, or it may be the default.\nfunc glidefile(c *cli.Context) string {\n\tpath := c.String(\"file\")\n\tif path == \"\" {\n\t\t// For now, we construct a basic assumption. In the future, we could\n\t\t// traverse backward to see if a glide.yaml exists in a parent.\n\t\tpath = \"./glide.yaml\"\n\t}\n\ta, err := filepath.Abs(path)\n\tif err != nil {\n\t\t// Underlying fs didn't provide working dir.\n\t\treturn path\n\t}\n\treturn a\n}\n"
        },
        {
          "name": "glide.lock",
          "type": "blob",
          "size": 0.5576171875,
          "content": "hash: b9e4643253d2170374b095ae0f19f71c3ef5c0549ba32a7148a6797e99a95144\nupdated: 2019-07-09T18:35:06.713855-04:00\nimports:\n- name: github.com/codegangsta/cli\n  version: cfb38830724cc34fedffe9a2a29fb54fa9169cd1\n- name: github.com/Masterminds/semver\n  version: c7af12943936e8c39859482e61f0574c2fd7fc75\n- name: github.com/Masterminds/vcs\n  version: f94282d8632a0620f79f0c6ff0e82604e8c5c85b\n- name: github.com/mitchellh/go-homedir\n  version: b8bc1bf767474819792c23f32d8286a45736f1c6\n- name: gopkg.in/yaml.v2\n  version: 670d4cfef0544295bc27a114dbac37980d83185a\ntestImports: []\n"
        },
        {
          "name": "glide.yaml",
          "type": "blob",
          "size": 0.5048828125,
          "content": "package: github.com/Masterminds/glide\nhomepage: https://glide.sh\nlicense: MIT\nowners:\n- name: Matt Butcher\n  email: technosophos@gmail.com\n  homepage: http://technosophos.com/\n- name: Matt Farina\n  email: matt@mattfarina.com\n  homepage: https://www.mattfarina.com/\nimport:\n- package: gopkg.in/yaml.v2\n- package: github.com/Masterminds/vcs\n  version: ^1.13.1\n- package: github.com/codegangsta/cli\n  version: ^1.16.0\n- package: github.com/Masterminds/semver\n  version: ^1.4.0\n- package: github.com/mitchellh/go-homedir\n"
        },
        {
          "name": "glide_test.go",
          "type": "blob",
          "size": 0.140625,
          "content": "package main\n\nimport (\n\t\"testing\"\n)\n\nfunc TestCommandsNonEmpty(t *testing.T) {\n\tcommands := commands()\n\tif len(commands) == 0 {\n\t\tt.Fail()\n\t}\n}\n"
        },
        {
          "name": "godep",
          "type": "tree",
          "content": null
        },
        {
          "name": "gom",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpm",
          "type": "tree",
          "content": null
        },
        {
          "name": "importer",
          "type": "tree",
          "content": null
        },
        {
          "name": "mirrors",
          "type": "tree",
          "content": null
        },
        {
          "name": "mkdocs.yml",
          "type": "blob",
          "size": 0.33984375,
          "content": "site_name: Glide Documentation\npages:\n- Home: index.md\n- Getting Started: getting-started.md\n- The glide.yaml File: glide.yaml.md\n- Versions and Ranges: versions.md\n- Lock file: glide.lock.md\n- Commands: commands.md\n- Resolving Imports: resolving-imports.md\n- Vendor Directories: vendor.md\n- Plugins: plugins.md\n- F.A.Q.: faq.md\ntheme: readthedocs\n"
        },
        {
          "name": "msg",
          "type": "tree",
          "content": null
        },
        {
          "name": "path",
          "type": "tree",
          "content": null
        },
        {
          "name": "repo",
          "type": "tree",
          "content": null
        },
        {
          "name": "testdata",
          "type": "tree",
          "content": null
        },
        {
          "name": "tree",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}