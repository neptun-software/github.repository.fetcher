{
  "metadata": {
    "timestamp": 1736567512810,
    "page": 113,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "google/pprof",
      "stars": 8136,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0556640625,
          "content": ".DS_Store\n*~\n*.orig\n*.exe\n.*.swp\ncore\ncoverage.txt\npprof\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.2978515625,
          "content": "# This is the official list of pprof authors for copyright purposes.\n# This file is distinct from the CONTRIBUTORS files.\n# See the latter for an explanation.\n# Names should be added to this file as:\n# Name or Organization <email address>\n# The email address is not required for organizations.\nGoogle Inc."
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 3.130859375,
          "content": "Want to contribute? Great: read the page (including the small print at the end).\n\n# Before you contribute\n\nAs an individual, sign the [Google Individual Contributor License\nAgreement](https://cla.developers.google.com/about/google-individual) (CLA)\nonline. This is required for any of your code to be accepted.\n\nBefore you start working on a larger contribution, get in touch with us first\nthrough the issue tracker with your idea so that we can help out and possibly\nguide you. Coordinating up front makes it much easier to avoid frustration later\non.\n\n# What to expect\n\nAll submissions (including by project members) are done via GitHub pull requests\nand require a code review by a project member.\n\nWe expect contributions to be good, clean code following style and practices for\nthe language the contribution is in. The pprof source code is in Go with a bit\nof JavaScript, CSS and HTML. If you are new to Go, read [Effective\nGo](https://golang.org/doc/effective_go.html) and the [summary on typical\ncomments during Go code\nreviews](https://github.com/golang/go/wiki/CodeReviewComments).\n\nAll contributions should include automated tests for the change. We are\ncontinuously improving pprof automated testing and we can't accept changes that\nare not helping that direction. Code coverage numbers are automatically\npublished in each pull request - we expect that number to go up.  Note that\nadding a good test often requires more time than the fix itself - this is\nexpected and you should be prepared for that time investment.\n\nContributions that do not meet the above guidelines will get less attention and\nwill be slow to get accepted or won't be accepted at all. We will also likely\nrefuse to accept changes that have fairly limited audience but will require us\nto commit to maintain them for foreseeable future. This includes support for\nspecific platforms, making internal pprof APIs public, etc.\n\n# Development\n\nThe commands below assume `/tmp/pprof` as the location for the source code.\nYou can change it to a directory of your choice.\n\nTo get the source code, run\n\n```\ncd /tmp\ngit clone git@github.com:google/pprof.git\ncd pprof\n```\n\nTo run the tests, do\n\n```\ncd /tmp/pprof\ngo test -v ./...\n(cd browsertests && go test)\n```\n\nWhen you wish to work with your own fork of the source (which is required to be\nable to create a pull request), you'll want to get your fork repo as another Git\nremote in the same `github.com/google/pprof` directory. Otherwise, if you'll `go\nget` your fork directly, you'll be getting errors like `use of internal package\nnot allowed` when running tests.  To set up the remote do something like\n\n```\ncd /tmp/pprof\ngit remote add aalexand git@github.com:aalexand/pprof.git\ngit fetch aalexand\ngit checkout -b my-new-feature\n# hack hack hack\ngo test -v ./...\n(cd browsertests && go test)\ngit commit -a -m \"Add new feature.\"\ngit push aalexand\n```\n\nwhere `aalexand` is your GitHub user ID. Then proceed to the GitHub UI to send a\ncode review.\n\n# The small print\n\nContributions made by corporations are covered by a different agreement than the\none above, the [Software Grant and Corporate Contributor License\nAgreement](https://cla.developers.google.com/about/google-corporate).\n"
        },
        {
          "name": "CONTRIBUTORS",
          "type": "blob",
          "size": 0.638671875,
          "content": "# People who have agreed to one of the CLAs and can contribute patches.\n# The AUTHORS file lists the copyright holders; this file\n# lists people.  For example, Google employees are listed here\n# but not in AUTHORS, because Google holds the copyright.\n#\n# https://developers.google.com/open-source/cla/individual\n# https://developers.google.com/open-source/cla/corporate\n#\n# Names should be added to this file as:\n#     Name <email address>\nRaul Silvera <rsilvera@google.com>\nTipp Moseley <tipp@google.com>\nHyoun Kyu Cho <netforce@google.com>\nMartin Spier <spiermar@gmail.com>\nTaco de Wolff <tacodewolff@gmail.com>\nAndrew Hunter <andrewhhunter@gmail.com>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.130859375,
          "content": "[![Github Action CI](https://github.com/google/pprof/workflows/ci/badge.svg)](https://github.com/google/pprof/actions)\n[![Codecov](https://codecov.io/gh/google/pprof/graph/badge.svg)](https://codecov.io/gh/google/pprof)\n[![Go Reference](https://pkg.go.dev/badge/github.com/google/pprof/profile.svg)](https://pkg.go.dev/github.com/google/pprof/profile)\n\n# Introduction\n\npprof is a tool for visualization and analysis of profiling data.\n\npprof reads a collection of profiling samples in profile.proto format and\ngenerates reports to visualize and help analyze the data. It can generate both\ntext and graphical reports (through the use of the dot visualization package).\n\nprofile.proto is a protocol buffer that describes a set of callstacks\nand symbolization information. A common usage is to represent a set of\nsampled callstacks from statistical profiling. The format is\ndescribed on the [proto/profile.proto](./proto/profile.proto) file. For details on protocol\nbuffers, see https://developers.google.com/protocol-buffers\n\nProfiles can be read from a local file, or over http. Multiple\nprofiles of the same type can be aggregated or compared.\n\nIf the profile samples contain machine addresses, pprof can symbolize\nthem through the use of the native binutils tools (addr2line and nm).\n\n**This is not an official Google product.**\n\n# Building pprof\n\nPrerequisites:\n\n- Go development kit of a [supported version](https://golang.org/doc/devel/release.html#policy).\n  Follow [these instructions](http://golang.org/doc/code.html) to prepare\n  the environment.\n\n- Graphviz: http://www.graphviz.org/\n  Optional, used to generate graphic visualizations of profiles\n\nTo build and install it:\n\n    go install github.com/google/pprof@latest\n\nThe binary will be installed `$GOPATH/bin` (`$HOME/go/bin` by default).\n\n# Basic usage\n\npprof can read a profile from a file or directly from a server via http.\nSpecify the profile input(s) in the command line, and use options to\nindicate how to format the report.\n\n## Generate a text report of the profile, sorted by hotness:\n\n```\n% pprof -top [main_binary] profile.pb.gz\nWhere\n    main_binary:  Local path to the main program binary, to enable symbolization\n    profile.pb.gz: Local path to the profile in a compressed protobuf, or\n                   URL to the http service that serves a profile.\n```\n\n## Generate a graph in an SVG file, and open it with a web browser:\n\n```\npprof -web [main_binary] profile.pb.gz\n```\n\n## Run pprof on interactive mode:\n\nIf no output formatting option is specified, pprof runs on interactive mode,\nwhere reads the profile and accepts interactive commands for visualization and\nrefinement of the profile.\n\n```\npprof [main_binary] profile.pb.gz\n\nThis will open a simple shell that takes pprof commands to generate reports.\nType 'help' for available commands/options.\n```\n\n## Run pprof via a web interface\n\nIf the `-http` flag is specified, pprof starts a web server at\nthe specified host:port that provides an interactive web-based interface to pprof.\nHost is optional, and is \"localhost\" by default. Port is optional, and is a\nrandom available port by default. `-http=\":\"` starts a server locally at\na random port.\n\n```\npprof -http=[host]:[port] [main_binary] profile.pb.gz\n```\n\nThe preceding command should automatically open your web browser at\nthe right page; if not, you can manually visit the specified port in\nyour web browser.\n\n## Using pprof with Linux Perf\n\npprof can read `perf.data` files generated by the\n[Linux perf](https://perf.wiki.kernel.org/index.php/Main_Page) tool by using the\n`perf_to_profile` program from the\n[perf_data_converter](https://github.com/google/perf_data_converter) package.\n\n## Viewing disassembly on Windows\n\nTo view disassembly of profiles collected from Go programs compiled as Windows executables,\nthe executable must be built with `go build -buildmode=exe`. LLVM or GCC must be installed,\nso required tools like `addr2line` and `nm` are available to `pprof`.\n\n## Further documentation\n\nSee [doc/README.md](doc/README.md) for more detailed end-user documentation.\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for contribution documentation.\n\nSee [proto/README.md](proto/README.md) for a description of the profile.proto format.\n"
        },
        {
          "name": "browsertests",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "driver",
          "type": "tree",
          "content": null
        },
        {
          "name": "fuzz",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.19921875,
          "content": "module github.com/google/pprof\n\ngo 1.22\n\nrequire (\n\tgithub.com/chzyer/readline v1.5.1\n\tgithub.com/ianlancetaylor/demangle v0.0.0-20240312041847-bd984b5ce465\n)\n\nrequire golang.org/x/sys v0.6.0 // indirect\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.9765625,
          "content": "github.com/chzyer/logex v1.2.1 h1:XHDu3E6q+gdHgsdTPH6ImJMIp436vR6MPtH8gP05QzM=\ngithub.com/chzyer/logex v1.2.1/go.mod h1:JLbx6lG2kDbNRFnfkgvh4eRJRPX1QCoOIWomwysCBrQ=\ngithub.com/chzyer/readline v1.5.1 h1:upd/6fQk4src78LMRzh5vItIt361/o4uq553V8B5sGI=\ngithub.com/chzyer/readline v1.5.1/go.mod h1:Eh+b79XXUwfKfcPLepksvw2tcLE/Ct21YObkaSkeBlk=\ngithub.com/chzyer/test v1.0.0 h1:p3BQDXSxOhOG0P9z6/hGnII4LGiEPOYBhs8asl/fC04=\ngithub.com/chzyer/test v1.0.0/go.mod h1:2JlltgoNkt4TW/z9V/IzDdFaMTM2JPIi26O1pF38GC8=\ngithub.com/ianlancetaylor/demangle v0.0.0-20240312041847-bd984b5ce465 h1:KwWnWVWCNtNq/ewIX7HIKnELmEx2nDP42yskD/pi7QE=\ngithub.com/ianlancetaylor/demangle v0.0.0-20240312041847-bd984b5ce465/go.mod h1:gx7rwoVhcfuVKG5uya9Hs3Sxj7EIvldVofAWIUtGouw=\ngolang.org/x/sys v0.0.0-20220310020820-b874c991c1a5/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0 h1:MVltZSvRTcU2ljQOhs94SXPftV6DCNnZViHeQps87pQ=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "pprof.go",
          "type": "blob",
          "size": 3.1103515625,
          "content": "// Copyright 2014 Google Inc. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// pprof is a tool for collection, manipulation and visualization\n// of performance profiles.\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\t\"syscall\"\n\n\t\"github.com/chzyer/readline\"\n\t\"github.com/google/pprof/driver\"\n)\n\nfunc main() {\n\tif err := driver.PProf(&driver.Options{UI: newUI()}); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"pprof: %v\\n\", err)\n\t\tos.Exit(2)\n\t}\n}\n\n// readlineUI implements the driver.UI interface using the\n// github.com/chzyer/readline library.\n// This is contained in pprof.go to avoid adding the readline\n// dependency in the vendored copy of pprof in the Go distribution,\n// which does not use this file.\ntype readlineUI struct {\n\trl *readline.Instance\n}\n\nfunc newUI() driver.UI {\n\trl, err := readline.New(\"\")\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"readline: %v\", err)\n\t\treturn nil\n\t}\n\treturn &readlineUI{\n\t\trl: rl,\n\t}\n}\n\n// ReadLine returns a line of text (a command) read from the user.\n// prompt is printed before reading the command.\nfunc (r *readlineUI) ReadLine(prompt string) (string, error) {\n\tr.rl.SetPrompt(prompt)\n\treturn r.rl.Readline()\n}\n\n// Print shows a message to the user.\n// It is printed over stderr as stdout is reserved for regular output.\nfunc (r *readlineUI) Print(args ...interface{}) {\n\ttext := fmt.Sprint(args...)\n\tif !strings.HasSuffix(text, \"\\n\") {\n\t\ttext += \"\\n\"\n\t}\n\tfmt.Fprint(r.rl.Stderr(), text)\n}\n\n// PrintErr shows a message to the user, colored in red for emphasis.\n// It is printed over stderr as stdout is reserved for regular output.\nfunc (r *readlineUI) PrintErr(args ...interface{}) {\n\ttext := fmt.Sprint(args...)\n\tif !strings.HasSuffix(text, \"\\n\") {\n\t\ttext += \"\\n\"\n\t}\n\tif readline.IsTerminal(int(syscall.Stderr)) {\n\t\ttext = colorize(text)\n\t}\n\tfmt.Fprint(r.rl.Stderr(), text)\n}\n\n// colorize the msg using ANSI color escapes.\nfunc colorize(msg string) string {\n\tvar red = 31\n\tvar colorEscape = fmt.Sprintf(\"\\033[0;%dm\", red)\n\tvar colorResetEscape = \"\\033[0m\"\n\treturn colorEscape + msg + colorResetEscape\n}\n\n// IsTerminal returns whether the UI is known to be tied to an\n// interactive terminal (as opposed to being redirected to a file).\nfunc (r *readlineUI) IsTerminal() bool {\n\treturn readline.IsTerminal(int(syscall.Stdout))\n}\n\n// WantBrowser starts a browser on interactive mode.\nfunc (r *readlineUI) WantBrowser() bool {\n\treturn r.IsTerminal()\n}\n\n// SetAutoComplete instructs the UI to call complete(cmd) to obtain\n// the auto-completion of cmd, if the UI supports auto-completion at all.\nfunc (r *readlineUI) SetAutoComplete(complete func(string) string) {\n\t// TODO: Implement auto-completion support.\n}\n"
        },
        {
          "name": "profile",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto",
          "type": "tree",
          "content": null
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 1.62890625,
          "content": "#  Copyright 2017 Google Inc. All Rights Reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\n\n#!/usr/bin/env bash\n\nset -e\nset -x\nMODE=atomic\necho \"mode: $MODE\" > coverage.txt\n\n# Note: browsertests is in a separate module and is therefore not\n# covered by a local ./... pattern.\n\nif [ \"$RUN_STATICCHECK\" != \"false\" ]; then\n  staticcheck ./...\n  (cd browsertests && staticcheck ./...)\nfi\n\n# Packages that have any tests.\nPKG=$(go list -f '{{if .TestGoFiles}} {{.ImportPath}} {{end}}' ./...)\n\ngo test $PKG\n(cd browsertests && go test ./...)\n(cd browsertests && go test -race ./...)\n\n# Skip browsertests since it test-only code and gives no useful coverage info\nfor d in $PKG; do\n  go test -race -coverprofile=profile.out -covermode=$MODE $d\n  if [ -f profile.out ]; then\n    cat profile.out | grep -v \"^mode: \" >> coverage.txt\n    rm profile.out\n  fi\ndone\n\ngo vet -all ./...\n(cd browsertests && go vet -all ./...)\nif [ \"$RUN_GOLANGCI_LINTER\" != \"false\" ];  then\n  golangci-lint run -D errcheck --timeout=3m ./...  # TODO: Enable errcheck back.\n  (cd browsertests && golangci-lint run --timeout=3m ./...)\nfi\n\ngofmt -s -d .\n(cd browsertests && gofmt -s -d .)\n"
        },
        {
          "name": "third_party",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}