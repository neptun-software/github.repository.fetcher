{
  "metadata": {
    "timestamp": 1736567527465,
    "page": 129,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "schachmat/wego",
      "stars": 7878,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.318359375,
          "content": "# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n/wego\n\n# Folders\n_obj\n_test\n.idea\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n# vim temp files\n*~\n*.swp\n\n# go modules\nvendor\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.177734375,
          "content": "# Contributing to wego\n\n* Add new backends only if they at least offer a free tier\n* Don't add other go dependencies. This makes packaging harder.\n* Have fun and don't break people!\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.73828125,
          "content": "ISC License\n\nCopyright (c) 2014-2017,  <teichm@in.tum.de>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.7958984375,
          "content": "**wego** is a weather client for the terminal.\n\n![Screenshots](http://schachmat.github.io/wego/wego.gif)\n\n## Features\n\n* show forecast for 1 to 7 days\n* nice ASCII art icons\n* displayed info (metric or imperial units):\n  * temperature range ([felt](https://en.wikipedia.org/wiki/Wind_chill) and measured)\n  * windspeed and direction\n  * viewing distance\n  * precipitation amount and probability\n* ssl, so the NSA has a harder time learning where you live or plan to go\n* multi language support\n* config file for default location which can be overridden by commandline\n* Automatic config management with [ingo](https://github.com/schachmat/ingo)\n\n## Dependencies\n\n* A [working](https://golang.org/doc/install#testing) [Go](https://golang.org/)\n  [1.20](https://golang.org/doc/go1.20) environment \n* utf-8 terminal with 256 colors\n* A monospaced font containing all the required runes (I use `dejavu sans\n  mono`)\n* An API key for the backend (see Setup below)\n\n## Installation\n\nCheck your distribution for packaging:\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/wego.svg)](https://repology.org/project/wego/versions)\n\nTo directly install or update the wego binary from Github into your `$GOPATH` as usual, run:\n```shell\ngo install github.com/schachmat/wego@latest\n```\n\n## Setup\n\n0. Run `wego` once. You will get an error message, but the `.wegorc` config file\n   will be generated in your `$HOME` directory (it will be hidden in some file\n   managers due to the filename starting with a dot).\n0. __With an [Openweathermap](https://home.openweathermap.org/) account__\n    * You can create an account and get a free API key by [signing up](https://home.openweathermap.org/users/sign_up)\n    * Update the following `.wegorc` config variables to fit your needs:\n    ```\n      backend=openweathermap\n      location=New York\n      owm-api-key=YOUR_OPENWEATHERMAP_API_KEY_HERE\n    ```\n0. __With a [Worldweatheronline](http://www.worldweatheronline.com/) account__\n    * Worldweatheronline no longer gives out free API keys. [#83](https://github.com/schachmat/wego/issues/83)\n    * Update the following `.wegorc` config variables to fit your needs:\n    ```\n      backend=worldweatheronline\n      location=New York\n      wwo-api-key=YOUR_WORLDWEATHERONLINE_API_KEY_HERE\n    ```\n0. You may want to adjust other preferences like `days`, `units` and `â€¦-lang` as\n   well. Save the file.\n0. Run `wego` once again and you should get the weather forecast for the current\n   and next few days for your chosen location.\n0. If you're visiting someone in e.g. London over the weekend, just run `wego 4\n   London` or `wego London 4` (the ordering of arguments makes no difference) to\n   get the forecast for the current and the next 3 days.\n\nYou can set the `$WEGORC` environment variable to override the default config\nfile location.\n\n## Todo\n\n* more [backends and frontends](https://github.com/schachmat/wego/wiki/How-to-write-a-new-backend-or-frontend)\n* resolve ALL the [issues](https://github.com/schachmat/wego/issues)\n* don't forget the [TODOs in the code](https://github.com/schachmat/wego/search?q=TODO&type=Code)\n\n## License - ISC\n\nCopyright (c) 2014-2017,  <teichm@in.tum.de>\n\nPermission to use, copy, modify, and/or distribute this software for any purpose\nwith or without fee is hereby granted, provided that the above copyright notice\nand this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER\nTORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF\nTHIS SOFTWARE.\n"
        },
        {
          "name": "backends",
          "type": "tree",
          "content": null
        },
        {
          "name": "frontends",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.328125,
          "content": "module github.com/schachmat/wego\n\ngo 1.20\n\nrequire (\n\tgithub.com/mattn/go-colorable v0.1.13\n\tgithub.com/mattn/go-runewidth v0.0.16\n\tgithub.com/schachmat/ingo v0.0.0-20170403011506-a4bdc0729a3f\n)\n\nrequire (\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/rivo/uniseg v0.4.4 // indirect\n\tgolang.org/x/sys v0.8.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 1.3974609375,
          "content": "github.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.4 h1:8TfxU8dW6PdqD27gjM8MVNuicgxIjxpm4K7x4jp8sis=\ngithub.com/rivo/uniseg v0.4.4/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/schachmat/ingo v0.0.0-20170403011506-a4bdc0729a3f h1:LVVgdfybimT/BiUdv92Jl2GKh8I6ixWcQkMUxZOcM+A=\ngithub.com/schachmat/ingo v0.0.0-20170403011506-a4bdc0729a3f/go.mod h1:WCPgQqzEa4YPOI8WKplmQu5WyU+BdI1cioHNkzWScP8=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0 h1:EBmGv8NaZBZTWvrbjNoL6HVt+IVy3QDQpJs7VRIw3tU=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "iface",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.0439453125,
          "content": "package main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"sort\"\n\t\"strconv\"\n\t\"strings\"\n\n\t\"github.com/schachmat/ingo\"\n\t_ \"github.com/schachmat/wego/backends\"\n\t_ \"github.com/schachmat/wego/frontends\"\n\t\"github.com/schachmat/wego/iface\"\n)\n\nfunc pluginLists() {\n\tbEnds := make([]string, 0, len(iface.AllBackends))\n\tfor name := range iface.AllBackends {\n\t\tbEnds = append(bEnds, name)\n\t}\n\tsort.Strings(bEnds)\n\n\tfEnds := make([]string, 0, len(iface.AllFrontends))\n\tfor name := range iface.AllFrontends {\n\t\tfEnds = append(fEnds, name)\n\t}\n\tsort.Strings(fEnds)\n\n\tfmt.Fprintln(os.Stderr, \"Available backends:\", strings.Join(bEnds, \", \"))\n\tfmt.Fprintln(os.Stderr, \"Available frontends:\", strings.Join(fEnds, \", \"))\n}\n\nfunc main() {\n\t// initialize backends and frontends (flags and default config)\n\tfor _, be := range iface.AllBackends {\n\t\tbe.Setup()\n\t}\n\tfor _, fe := range iface.AllFrontends {\n\t\tfe.Setup()\n\t}\n\n\t// initialize global flags and default config\n\tlocation := flag.String(\"location\", \"40.748,-73.985\", \"`LOCATION` to be queried\")\n\tflag.StringVar(location, \"l\", \"40.748,-73.985\", \"`LOCATION` to be queried (shorthand)\")\n\tnumdays := flag.Int(\"days\", 3, \"`NUMBER` of days of weather forecast to be displayed\")\n\tflag.IntVar(numdays, \"d\", 3, \"`NUMBER` of days of weather forecast to be displayed (shorthand)\")\n\tunitSystem := flag.String(\"units\", \"metric\", \"`UNITSYSTEM` to use for output.\\n    \\tChoices are: metric, imperial, si, metric-ms\")\n\tflag.StringVar(unitSystem, \"u\", \"metric\", \"`UNITSYSTEM` to use for output. (shorthand)\\n    \\tChoices are: metric, imperial, si, metric-ms\")\n\tselectedBackend := flag.String(\"backend\", \"openweathermap\", \"`BACKEND` to be used\")\n\tflag.StringVar(selectedBackend, \"b\", \"openweathermap\", \"`BACKEND` to be used (shorthand)\")\n\tselectedFrontend := flag.String(\"frontend\", \"ascii-art-table\", \"`FRONTEND` to be used\")\n\tflag.StringVar(selectedFrontend, \"f\", \"ascii-art-table\", \"`FRONTEND` to be used (shorthand)\")\n\n\t// print out a list of all backends and frontends in the usage\n\ttmpUsage := flag.Usage\n\tflag.Usage = func() {\n\t\ttmpUsage()\n\t\tpluginLists()\n\t}\n\n\t// read/write config and parse flags\n\tif err := ingo.Parse(\"wego\"); err != nil {\n\t\tlog.Fatalf(\"Error parsing config: %v\", err)\n\t}\n\n\t// non-flag shortcut arguments overwrite possible flag arguments\n\tfor _, arg := range flag.Args() {\n\t\tif v, err := strconv.Atoi(arg); err == nil && len(arg) == 1 {\n\t\t\t*numdays = v\n\t\t} else {\n\t\t\t*location = arg\n\t\t}\n\t}\n\n\t// get selected backend and fetch the weather data from it\n\tbe, ok := iface.AllBackends[*selectedBackend]\n\tif !ok {\n\t\tlog.Fatalf(\"Could not find selected backend \\\"%s\\\"\", *selectedBackend)\n\t}\n\tr := be.Fetch(*location, *numdays)\n\n\t// set unit system\n\tunit := iface.UnitsMetric\n\tif *unitSystem == \"imperial\" {\n\t\tunit = iface.UnitsImperial\n\t} else if *unitSystem == \"si\" {\n\t\tunit = iface.UnitsSi\n\t} else if *unitSystem == \"metric-ms\" {\n\t\tunit = iface.UnitsMetricMs\n\t}\n\n\t// get selected frontend and render the weather data with it\n\tfe, ok := iface.AllFrontends[*selectedFrontend]\n\tif !ok {\n\t\tlog.Fatalf(\"Could not find selected frontend \\\"%s\\\"\", *selectedFrontend)\n\t}\n\tfe.Render(r, unit)\n}\n"
        }
      ]
    }
  ]
}