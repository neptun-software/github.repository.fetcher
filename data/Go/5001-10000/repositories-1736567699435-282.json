{
  "metadata": {
    "timestamp": 1736567699435,
    "page": 282,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI5MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "michenriksen/gitrob",
      "stars": 5970,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1728515625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\ngitrob\ngitrob.exe\n\nvendor/\nbuild/\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dropbox settings and caches\n.dropbox\n.dropbox.attr\n.dropbox.cache\n\n# temporary files which can be created if a process still has a handle open of a deleted file\n.fuse_hidden*\n\n# KDE directory preferences\n.directory\n\n# Linux trash folder which might appear on any partition or disk\n.Trash-*\n\n# .nfs files are created when an open file is removed but is still being accessed\n.nfs*\n\n\n# TextMate\n*.tmproj\n*.tmproject\ntmtags\n\n# Swap\n[._]*.s[a-v][a-z]\n[._]*.sw[a-p]\n[._]s[a-v][a-z]\n[._]sw[a-p]\n\n# Session\nSession.vim\n\n# Temporary\n.netrwhist\n*~\n# Auto-generated tag files\ntags\n\n# General\n.DS_Store\n.AppleDouble\n.LSOverride\n\n# Icon must end with two \\r\nIcon\n\n\n# Thumbnails\n._*\n\n# Files that might appear in the root of a volume\n.DocumentRevisions-V100\n.fseventsd\n.Spotlight-V100\n.TemporaryItems\n.Trashes\n.VolumeIcon.icns\n.com.apple.timemachine.donotpresent\n\n# Directories potentially created on remote AFP share\n.AppleDB\n.AppleDesktop\nNetwork Trash Folder\nTemporary Items\n.apdisk\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 0.935546875,
          "content": "\n# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n### Added\n- Dependency management with dep\n\n### Changed\n- Skip expensive signature checking for image extensions and files in `node_modules` and other package directories\n\n## 2.0.0-beta - 2018-06-08\n### Added\n- Total rewrite of Gitrob in [Golang](https://golang.org/)\n- Find interesting files in history down to a default (and configurable) depth of 500 commits\n- Hexdump view for binary files\n- Saving and loading of session files for easy sharing\n\n### Removed\n- All the stupid Rubygems with native extensions\n- PostgreSQL dependency\n- Messy assessment comparison feature\n- User overview\n- Repository overview\n\n[Unreleased]: https://github.com/michenriksen/gitrob/compare/v2.0.0-beta...HEAD\n"
        },
        {
          "name": "Gopkg.lock",
          "type": "blob",
          "size": 6.7294921875,
          "content": "# This file is autogenerated, do not edit; changes may be undone by the next 'dep ensure'.\n\n\n[[projects]]\n  name = \"github.com/elazarl/go-bindata-assetfs\"\n  packages = [\".\"]\n  revision = \"30f82fa23fd844bd5bb1e5f216db87fd77b5eb43\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  name = \"github.com/emirpasic/gods\"\n  packages = [\n    \"containers\",\n    \"lists\",\n    \"lists/arraylist\",\n    \"trees\",\n    \"trees/binaryheap\",\n    \"utils\"\n  ]\n  revision = \"f6c17b524822278a87e3b3bd809fec33b51f5b46\"\n  version = \"v1.9.0\"\n\n[[projects]]\n  name = \"github.com/fatih/color\"\n  packages = [\".\"]\n  revision = \"5b77d2a35fb0ede96d138fc9a99f5c9b6aef11b4\"\n  version = \"v1.7.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/gin-contrib/secure\"\n  packages = [\".\"]\n  revision = \"624341e112805e689f488495c9880bb97026b47c\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/gin-contrib/sse\"\n  packages = [\".\"]\n  revision = \"22d885f9ecc78bf4ee5d72b937e4bbcdc58e8cae\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/gin-contrib/static\"\n  packages = [\".\"]\n  revision = \"73da7037e716e63aa2b0ffceb630dfa7be299086\"\n\n[[projects]]\n  name = \"github.com/gin-gonic/gin\"\n  packages = [\n    \".\",\n    \"binding\",\n    \"render\"\n  ]\n  revision = \"d459835d2b077e44f7c9b453505ee29881d5d12d\"\n  version = \"v1.2\"\n\n[[projects]]\n  name = \"github.com/golang/protobuf\"\n  packages = [\"proto\"]\n  revision = \"b4deda0973fb4c70b50d226b1af49f3da59f5265\"\n  version = \"v1.1.0\"\n\n[[projects]]\n  name = \"github.com/google/go-github\"\n  packages = [\"github\"]\n  revision = \"e48060a28fac52d0f1cb758bc8b87c07bac4a87d\"\n  version = \"v15.0.0\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/google/go-querystring\"\n  packages = [\"query\"]\n  revision = \"53e6ce116135b80d037921a7fdd5138cf32d7a8a\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/jbenet/go-context\"\n  packages = [\"io\"]\n  revision = \"d14ea06fba99483203c19d92cfcd13ebe73135f4\"\n\n[[projects]]\n  name = \"github.com/kevinburke/ssh_config\"\n  packages = [\".\"]\n  revision = \"9fc7bb800b555d63157c65a904c86a2cc7b4e795\"\n  version = \"0.4\"\n\n[[projects]]\n  name = \"github.com/mattn/go-colorable\"\n  packages = [\".\"]\n  revision = \"167de6bfdfba052fa6b2d3664c8f5272e23c9072\"\n  version = \"v0.0.9\"\n\n[[projects]]\n  name = \"github.com/mattn/go-isatty\"\n  packages = [\".\"]\n  revision = \"0360b2af4f38e8d38c7fce2a9f4e702702d73a39\"\n  version = \"v0.0.3\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/mitchellh/go-homedir\"\n  packages = [\".\"]\n  revision = \"3864e76763d94a6df2f9960b16a20a33da9f9a66\"\n\n[[projects]]\n  name = \"github.com/pelletier/go-buffruneio\"\n  packages = [\".\"]\n  revision = \"c37440a7cf42ac63b919c752ca73a85067e05992\"\n  version = \"v0.2.0\"\n\n[[projects]]\n  name = \"github.com/sergi/go-diff\"\n  packages = [\"diffmatchpatch\"]\n  revision = \"1744e2970ca51c86172c8190fadad617561ed6e7\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  name = \"github.com/src-d/gcfg\"\n  packages = [\n    \".\",\n    \"scanner\",\n    \"token\",\n    \"types\"\n  ]\n  revision = \"f187355171c936ac84a82793659ebb4936bc1c23\"\n  version = \"v1.3.0\"\n\n[[projects]]\n  name = \"github.com/ugorji/go\"\n  packages = [\"codec\"]\n  revision = \"b4c50a2b199d93b13dc15e78929cfb23bfdf21ab\"\n  version = \"v1.1.1\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"github.com/xanzy/ssh-agent\"\n  packages = [\".\"]\n  revision = \"ba9c9e33906f58169366275e3450db66139a31a9\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/crypto\"\n  packages = [\n    \"cast5\",\n    \"curve25519\",\n    \"ed25519\",\n    \"ed25519/internal/edwards25519\",\n    \"internal/chacha20\",\n    \"openpgp\",\n    \"openpgp/armor\",\n    \"openpgp/elgamal\",\n    \"openpgp/errors\",\n    \"openpgp/packet\",\n    \"openpgp/s2k\",\n    \"poly1305\",\n    \"ssh\",\n    \"ssh/agent\",\n    \"ssh/knownhosts\"\n  ]\n  revision = \"8ac0e0d97ce45cd83d1d7243c060cb8461dda5e9\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/net\"\n  packages = [\n    \"context\",\n    \"context/ctxhttp\"\n  ]\n  revision = \"db08ff08e8622530d9ed3a0e8ac279f6d4c02196\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/oauth2\"\n  packages = [\n    \".\",\n    \"internal\"\n  ]\n  revision = \"1e0a3fa8ba9a5c9eb35c271780101fdaf1b205d7\"\n\n[[projects]]\n  branch = \"master\"\n  name = \"golang.org/x/sys\"\n  packages = [\n    \"unix\",\n    \"windows\"\n  ]\n  revision = \"a9e25c09b96b8870693763211309e213c6ef299d\"\n\n[[projects]]\n  name = \"golang.org/x/text\"\n  packages = [\n    \"internal/gen\",\n    \"internal/triegen\",\n    \"internal/ucd\",\n    \"transform\",\n    \"unicode/cldr\",\n    \"unicode/norm\"\n  ]\n  revision = \"f21a4dfb5e38f5895301dc265a8def02365cc3d0\"\n  version = \"v0.3.0\"\n\n[[projects]]\n  name = \"google.golang.org/appengine\"\n  packages = [\n    \"internal\",\n    \"internal/base\",\n    \"internal/datastore\",\n    \"internal/log\",\n    \"internal/remote_api\",\n    \"internal/urlfetch\",\n    \"urlfetch\"\n  ]\n  revision = \"150dc57a1b433e64154302bdc40b6bb8aefa313a\"\n  version = \"v1.0.0\"\n\n[[projects]]\n  name = \"gopkg.in/go-playground/validator.v8\"\n  packages = [\".\"]\n  revision = \"5f1438d3fca68893a817e4a66806cea46a9e4ebf\"\n  version = \"v8.18.2\"\n\n[[projects]]\n  name = \"gopkg.in/src-d/go-billy.v4\"\n  packages = [\n    \".\",\n    \"helper/chroot\",\n    \"helper/polyfill\",\n    \"osfs\",\n    \"util\"\n  ]\n  revision = \"df053870ae7070b0350624ba5a22161ba3796cc0\"\n  version = \"v4.1.1\"\n\n[[projects]]\n  name = \"gopkg.in/src-d/go-git.v4\"\n  packages = [\n    \".\",\n    \"config\",\n    \"internal/revision\",\n    \"plumbing\",\n    \"plumbing/cache\",\n    \"plumbing/filemode\",\n    \"plumbing/format/config\",\n    \"plumbing/format/diff\",\n    \"plumbing/format/gitignore\",\n    \"plumbing/format/idxfile\",\n    \"plumbing/format/index\",\n    \"plumbing/format/objfile\",\n    \"plumbing/format/packfile\",\n    \"plumbing/format/pktline\",\n    \"plumbing/object\",\n    \"plumbing/protocol/packp\",\n    \"plumbing/protocol/packp/capability\",\n    \"plumbing/protocol/packp/sideband\",\n    \"plumbing/revlist\",\n    \"plumbing/storer\",\n    \"plumbing/transport\",\n    \"plumbing/transport/client\",\n    \"plumbing/transport/file\",\n    \"plumbing/transport/git\",\n    \"plumbing/transport/http\",\n    \"plumbing/transport/internal/common\",\n    \"plumbing/transport/server\",\n    \"plumbing/transport/ssh\",\n    \"storage\",\n    \"storage/filesystem\",\n    \"storage/filesystem/dotgit\",\n    \"storage/memory\",\n    \"utils/binary\",\n    \"utils/diff\",\n    \"utils/ioutil\",\n    \"utils/merkletrie\",\n    \"utils/merkletrie/filesystem\",\n    \"utils/merkletrie/index\",\n    \"utils/merkletrie/internal/frame\",\n    \"utils/merkletrie/noder\"\n  ]\n  revision = \"b23570073eaee3489e5e3d666f22ba5cbeb53243\"\n  version = \"v4.4.1\"\n\n[[projects]]\n  name = \"gopkg.in/warnings.v0\"\n  packages = [\".\"]\n  revision = \"ec4a0fea49c7b46c2aeb0b51aac55779c607e52b\"\n  version = \"v0.1.2\"\n\n[[projects]]\n  name = \"gopkg.in/yaml.v2\"\n  packages = [\".\"]\n  revision = \"5420a8b6744d3b0345ab293f6fcba19c978f1183\"\n  version = \"v2.2.1\"\n\n[solve-meta]\n  analyzer-name = \"dep\"\n  analyzer-version = 1\n  inputs-digest = \"e17d65bb62cd54df865e20c85c022cb54e74ef937e6e2520c9d1c38fc6f5d090\"\n  solver-name = \"gps-cdcl\"\n  solver-version = 1\n"
        },
        {
          "name": "Gopkg.toml",
          "type": "blob",
          "size": 1.2216796875,
          "content": "# Gopkg.toml example\n#\n# Refer to https://golang.github.io/dep/docs/Gopkg.toml.html\n# for detailed Gopkg.toml documentation.\n#\n# required = [\"github.com/user/thing/cmd/thing\"]\n# ignored = [\"github.com/user/project/pkgX\", \"bitbucket.org/user/project/pkgA/pkgY\"]\n#\n# [[constraint]]\n#   name = \"github.com/user/project\"\n#   version = \"1.0.0\"\n#\n# [[constraint]]\n#   name = \"github.com/user/project2\"\n#   branch = \"dev\"\n#   source = \"github.com/myfork/project2\"\n#\n# [[override]]\n#   name = \"github.com/x/y\"\n#   version = \"2.4.0\"\n#\n# [prune]\n#   non-go = false\n#   go-tests = true\n#   unused-packages = true\n\n\n[[constraint]]\n  name = \"github.com/elazarl/go-bindata-assetfs\"\n  version = \"1.0.0\"\n\n[[constraint]]\n  name = \"github.com/fatih/color\"\n  version = \"1.7.0\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/gin-contrib/secure\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"github.com/gin-contrib/static\"\n\n[[constraint]]\n  name = \"github.com/gin-gonic/gin\"\n  version = \"1.1.4\"\n\n[[constraint]]\n  name = \"github.com/google/go-github\"\n  version = \"15.0.0\"\n\n[[constraint]]\n  branch = \"master\"\n  name = \"golang.org/x/oauth2\"\n\n[[constraint]]\n  name = \"gopkg.in/src-d/go-git.v4\"\n  version = \"4.4.1\"\n\n[prune]\n  go-tests = true\n  unused-packages = true\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2018 Michael Henriksen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.0283203125,
          "content": "<p align=\"center\">\n  <img src=\"https://github.com/michenriksen/gitrob/raw/master/static/images/gopher_full.png\" alt=\"Gitrob\" width=\"200\" />\n</p>\n<br />\n<br />\n<br />\n\n# Gitrob: Putting the Open Source in OSINT\n\nGitrob is a tool to help find potentially sensitive files pushed to public repositories on Github. Gitrob will clone repositories belonging to a user or organization down to a configurable depth and iterate through the commit history and flag files that match signatures for potentially sensitive files. The findings will be presented through a web interface for easy browsing and analysis.\n\n## Usage\n\n    gitrob [options] target [target2] ... [targetN]\n\n### Options\n\n```\n-bind-address string\n    Address to bind web server to (default \"127.0.0.1\")\n-commit-depth int\n    Number of repository commits to process (default 500)\n-debug\n    Print debugging information\n-github-access-token string\n    GitHub access token to use for API requests\n-load string\n    Load session file\n-no-expand-orgs\n    Don't add members to targets when processing organizations\n-port int\n    Port to run web server on (default 9393)\n-save string\n    Save session to file\n-silent\n    Suppress all output except for errors\n-threads int\n    Number of concurrent threads (default number of logical CPUs)\n```\n\n### Saving session to a file\n\nBy default, gitrob will store its state for an assessment in memory. This means that the results of an assessment is lost when Gitrob is closed. You can save the session to a file by using the `-save` option:\n\n    gitrob -save ~/gitrob-session.json acmecorp\n\nGitrob will save all the gathered information to the specified file path as a special JSON document. The file can be loaded again for browsing at another point in time, shared with other analysts or parsed for custom integrations with other tools and systems.\n\n### Loading session from a file\n\nA session stored in a file can be loaded with the `-load` option:\n\n    gitrob -load ~/gitrob-session.json\n\nGitrob will start its web interface and serve the results for analysis.\n\n## Installation\n\nA [precompiled version is available](https://github.com/michenriksen/gitrob/releases) for each release, alternatively you can use the latest version of the source code from this repository in order to build your own binary.\n\nMake sure you have a correctly configured **Go >= 1.8** environment and that `$GOPATH/bin` is in your `$PATH`\n\n    $ go get github.com/michenriksen/gitrob\n\nThis command will download gitrob, install its dependencies, compile it and move the `gitrob` executable to `$GOPATH/bin`.\n\n### Github access token\n\nGitrob will need a Github access token in order to interact with the Github API.  [Create a personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) and save it in an environment variable in your `.bashrc` or similar shell configuration file:\n\n    export GITROB_ACCESS_TOKEN=deadbeefdeadbeefdeadbeefdeadbeefdeadbeef\n\nAlternatively you can specify the access token with the `-github-access-token` option, but watch out for your command history!\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 1.2265625,
          "content": "#!/bin/bash\n\nBUILD_FOLDER=build\nVERSION=$(cat core/banner.go | grep Version | cut -d '\"' -f 2)\n\nbin_dep() {\n  BIN=$1\n  which $BIN > /dev/null || { echo \"[-] Dependency $BIN not found !\"; exit 1; }\n}\n\ncreate_exe_archive() {\n  bin_dep 'zip'\n\n  OUTPUT=$1\n\n  echo \"[*] Creating archive $OUTPUT ...\"\n  zip -j \"$OUTPUT\" gitrob.exe ../README.md ../LICENSE.txt > /dev/null\n  rm -rf gitrob gitrob.exe\n}\n\ncreate_archive() {\n  bin_dep 'zip'\n\n  OUTPUT=$1\n\n  echo \"[*] Creating archive $OUTPUT ...\"\n  zip -j \"$OUTPUT\" gitrob ../README.md ../LICENSE.md > /dev/null\n  rm -rf gitrob gitrob.exe\n}\n\nbuild_linux_amd64() {\n  echo \"[*] Building linux/amd64 ...\"\n  GOOS=linux GOARCH=amd64 go build -o gitrob ..\n}\n\nbuild_macos_amd64() {\n  echo \"[*] Building darwin/amd64 ...\"\n  GOOS=darwin GOARCH=amd64 go build -o gitrob ..\n}\n\nbuild_windows_amd64() {\n  echo \"[*] Building windows/amd64 ...\"\n  GOOS=windows GOARCH=amd64 go build -o gitrob.exe ..\n}\n\nrm -rf $BUILD_FOLDER\nmkdir $BUILD_FOLDER\ncd $BUILD_FOLDER\n\nbuild_linux_amd64 && create_archive gitrob_linux_amd64_$VERSION.zip\nbuild_macos_amd64 && create_archive gitrob_macos_amd64_$VERSION.zip\nbuild_windows_amd64 && create_exe_archive gitrob_windows_amd64_$VERSION.zip\nshasum -a 256 * > checksums.txt\n\necho\necho\ndu -sh *\n\ncd --\n"
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 8.9619140625,
          "content": "package main\n\nimport (\n  \"fmt\"\n  \"os\"\n  \"strings\"\n  \"sync\"\n  \"time\"\n\n  \"github.com/michenriksen/gitrob/core\"\n)\n\nvar (\n  sess *core.Session\n  err  error\n)\n\nfunc GatherTargets(sess *core.Session) {\n  sess.Stats.Status = core.StatusGathering\n  sess.Out.Important(\"Gathering targets...\\n\")\n  for _, login := range sess.Options.Logins {\n    target, err := core.GetUserOrOrganization(login, sess.GithubClient)\n    if err != nil {\n      sess.Out.Error(\" Error retrieving information on %s: %s\\n\", login, err)\n      continue\n    }\n    sess.Out.Debug(\"%s (ID: %d) type: %s\\n\", *target.Login, *target.ID, *target.Type)\n    sess.AddTarget(target)\n    if *sess.Options.NoExpandOrgs == false && *target.Type == \"Organization\" {\n      sess.Out.Debug(\"Gathering members of %s (ID: %d)...\\n\", *target.Login, *target.ID)\n      members, err := core.GetOrganizationMembers(target.Login, sess.GithubClient)\n      if err != nil {\n        sess.Out.Error(\" Error retrieving members of %s: %s\\n\", *target.Login, err)\n        continue\n      }\n      for _, member := range members {\n        sess.Out.Debug(\"Adding organization member %s (ID: %d) to targets\\n\", *member.Login, *member.ID)\n        sess.AddTarget(member)\n      }\n    }\n  }\n}\n\nfunc GatherRepositories(sess *core.Session) {\n  var ch = make(chan *core.GithubOwner, len(sess.Targets))\n  var wg sync.WaitGroup\n  var threadNum int\n  if len(sess.Targets) == 1 {\n    threadNum = 1\n  } else if len(sess.Targets) <= *sess.Options.Threads {\n    threadNum = len(sess.Targets) - 1\n  } else {\n    threadNum = *sess.Options.Threads\n  }\n  wg.Add(threadNum)\n  sess.Out.Debug(\"Threads for repository gathering: %d\\n\", threadNum)\n  for i := 0; i < threadNum; i++ {\n    go func() {\n      for {\n        target, ok := <-ch\n        if !ok {\n          wg.Done()\n          return\n        }\n        repos, err := core.GetRepositoriesFromOwner(target.Login, sess.GithubClient)\n        if err != nil {\n          sess.Out.Error(\" Failed to retrieve repositories from %s: %s\\n\", *target.Login, err)\n        }\n        if len(repos) == 0 {\n          continue\n        }\n        for _, repo := range repos {\n          sess.Out.Debug(\" Retrieved repository: %s\\n\", *repo.FullName)\n          sess.AddRepository(repo)\n        }\n        sess.Stats.IncrementTargets()\n        sess.Out.Info(\" Retrieved %d %s from %s\\n\", len(repos), core.Pluralize(len(repos), \"repository\", \"repositories\"), *target.Login)\n      }\n    }()\n  }\n\n  for _, target := range sess.Targets {\n    ch <- target\n  }\n  close(ch)\n  wg.Wait()\n}\n\nfunc AnalyzeRepositories(sess *core.Session) {\n  sess.Stats.Status = core.StatusAnalyzing\n  var ch = make(chan *core.GithubRepository, len(sess.Repositories))\n  var wg sync.WaitGroup\n  var threadNum int\n  if len(sess.Repositories) <= 1 {\n    threadNum = 1\n  } else if len(sess.Repositories) <= *sess.Options.Threads {\n    threadNum = len(sess.Repositories) - 1\n  } else {\n    threadNum = *sess.Options.Threads\n  }\n  wg.Add(threadNum)\n  sess.Out.Debug(\"Threads for repository analysis: %d\\n\", threadNum)\n\n  sess.Out.Important(\"Analyzing %d %s...\\n\", len(sess.Repositories), core.Pluralize(len(sess.Repositories), \"repository\", \"repositories\"))\n\n  for i := 0; i < threadNum; i++ {\n    go func(tid int) {\n      for {\n        sess.Out.Debug(\"[THREAD #%d] Requesting new repository to analyze...\\n\", tid)\n        repo, ok := <-ch\n        if !ok {\n          sess.Out.Debug(\"[THREAD #%d] No more tasks, marking WaitGroup as done\\n\", tid)\n          wg.Done()\n          return\n        }\n\n        sess.Out.Debug(\"[THREAD #%d][%s] Cloning repository...\\n\", tid, *repo.FullName)\n        clone, path, err := core.CloneRepository(repo.CloneURL, repo.DefaultBranch, *sess.Options.CommitDepth)\n        if err != nil {\n          if err.Error() != \"remote repository is empty\" {\n            sess.Out.Error(\"Error cloning repository %s: %s\\n\", *repo.FullName, err)\n          }\n          sess.Stats.IncrementRepositories()\n          sess.Stats.UpdateProgress(sess.Stats.Repositories, len(sess.Repositories))\n          continue\n        }\n        sess.Out.Debug(\"[THREAD #%d][%s] Cloned repository to: %s\\n\", tid, *repo.FullName, path)\n\n        history, err := core.GetRepositoryHistory(clone)\n        if err != nil {\n          sess.Out.Error(\"[THREAD #%d][%s] Error getting commit history: %s\\n\", tid, *repo.FullName, err)\n          os.RemoveAll(path)\n          sess.Stats.IncrementRepositories()\n          sess.Stats.UpdateProgress(sess.Stats.Repositories, len(sess.Repositories))\n          continue\n        }\n        sess.Out.Debug(\"[THREAD #%d][%s] Number of commits: %d\\n\", tid, *repo.FullName, len(history))\n\n        for _, commit := range history {\n          sess.Out.Debug(\"[THREAD #%d][%s] Analyzing commit: %s\\n\", tid, *repo.FullName, commit.Hash)\n          changes, _ := core.GetChanges(commit, clone)\n          sess.Out.Debug(\"[THREAD #%d][%s] Changes in %s: %d\\n\", tid, *repo.FullName, commit.Hash, len(changes))\n          for _, change := range changes {\n            changeAction := core.GetChangeAction(change)\n            path := core.GetChangePath(change)\n            matchFile := core.NewMatchFile(path)\n            if matchFile.IsSkippable() {\n              sess.Out.Debug(\"[THREAD #%d][%s] Skipping %s\\n\", tid, *repo.FullName, matchFile.Path)\n              continue\n            }\n            sess.Out.Debug(\"[THREAD #%d][%s] Matching: %s...\\n\", tid, *repo.FullName, matchFile.Path)\n            for _, signature := range core.Signatures {\n              if signature.Match(matchFile) {\n\n                finding := &core.Finding{\n                  FilePath:        path,\n                  Action:          changeAction,\n                  Description:     signature.Description(),\n                  Comment:         signature.Comment(),\n                  RepositoryOwner: *repo.Owner,\n                  RepositoryName:  *repo.Name,\n                  CommitHash:      commit.Hash.String(),\n                  CommitMessage:   strings.TrimSpace(commit.Message),\n                  CommitAuthor:    commit.Author.String(),\n                }\n                finding.Initialize()\n                sess.AddFinding(finding)\n\n                sess.Out.Warn(\" %s: %s\\n\", strings.ToUpper(changeAction), finding.Description)\n                sess.Out.Info(\"  Path.......: %s\\n\", finding.FilePath)\n                sess.Out.Info(\"  Repo.......: %s\\n\", *repo.FullName)\n                sess.Out.Info(\"  Message....: %s\\n\", core.TruncateString(finding.CommitMessage, 100))\n                sess.Out.Info(\"  Author.....: %s\\n\", finding.CommitAuthor)\n                if finding.Comment != \"\" {\n                  sess.Out.Info(\"  Comment....: %s\\n\", finding.Comment)\n                }\n                sess.Out.Info(\"  File URL...: %s\\n\", finding.FileUrl)\n                sess.Out.Info(\"  Commit URL.: %s\\n\", finding.CommitUrl)\n                sess.Out.Info(\" ------------------------------------------------\\n\\n\")\n                sess.Stats.IncrementFindings()\n                break\n              }\n            }\n            sess.Stats.IncrementFiles()\n          }\n          sess.Stats.IncrementCommits()\n          sess.Out.Debug(\"[THREAD #%d][%s] Done analyzing changes in %s\\n\", tid, *repo.FullName, commit.Hash)\n        }\n        sess.Out.Debug(\"[THREAD #%d][%s] Done analyzing commits\\n\", tid, *repo.FullName)\n        os.RemoveAll(path)\n        sess.Out.Debug(\"[THREAD #%d][%s] Deleted %s\\n\", tid, *repo.FullName, path)\n        sess.Stats.IncrementRepositories()\n        sess.Stats.UpdateProgress(sess.Stats.Repositories, len(sess.Repositories))\n      }\n    }(i)\n  }\n  for _, repo := range sess.Repositories {\n    ch <- repo\n  }\n  close(ch)\n  wg.Wait()\n}\n\nfunc PrintSessionStats(sess *core.Session) {\n  sess.Out.Info(\"\\nFindings....: %d\\n\", sess.Stats.Findings)\n  sess.Out.Info(\"Files.......: %d\\n\", sess.Stats.Files)\n  sess.Out.Info(\"Commits.....: %d\\n\", sess.Stats.Commits)\n  sess.Out.Info(\"Repositories: %d\\n\", sess.Stats.Repositories)\n  sess.Out.Info(\"Targets.....: %d\\n\\n\", sess.Stats.Targets)\n}\n\nfunc main() {\n  if sess, err = core.NewSession(); err != nil {\n    fmt.Println(err)\n    os.Exit(1)\n  }\n\n  sess.Out.Info(\"%s\\n\\n\", core.ASCIIBanner)\n  sess.Out.Important(\"%s v%s started at %s\\n\", core.Name, core.Version, sess.Stats.StartedAt.Format(time.RFC3339))\n  sess.Out.Important(\"Loaded %d signatures\\n\", len(core.Signatures))\n  sess.Out.Important(\"Web interface available at http://%s:%d\\n\", *sess.Options.BindAddress, *sess.Options.Port)\n\n  if sess.Stats.Status == \"finished\" {\n    sess.Out.Important(\"Loaded session file: %s\\n\", *sess.Options.Load)\n  } else {\n    if len(sess.Options.Logins) == 0 {\n      sess.Out.Fatal(\"Please provide at least one GitHub organization or user\\n\")\n    }\n\n    GatherTargets(sess)\n    GatherRepositories(sess)\n    AnalyzeRepositories(sess)\n    sess.Finish()\n\n    if *sess.Options.Save != \"\" {\n      err := sess.SaveToFile(*sess.Options.Save)\n      if err != nil {\n        sess.Out.Error(\"Error saving session to %s: %s\\n\", *sess.Options.Save, err)\n      }\n      sess.Out.Important(\"Saved session to: %s\\n\\n\", *sess.Options.Save)\n    }\n  }\n\n  PrintSessionStats(sess)\n  sess.Out.Important(\"Press Ctrl+C to stop web server and exit.\\n\\n\")\n  select {}\n}\n"
        },
        {
          "name": "release.sh",
          "type": "blob",
          "size": 0.72265625,
          "content": "#!/bin/bash\n\nCURRENT_VERSION=$(cat core/banner.go | grep Version | cut -d '\"' -f 2)\nTO_UPDATE=(\n    core/banner.go\n)\n\nread -p \"[?] Did you remember to update CHANGELOG.md? \"\nread -p \"[?] Did you remember to update README.md with new features/changes? \"\n\necho -n \"[*] Current version is $CURRENT_VERSION. Enter new version: \"\nread NEW_VERSION\necho \"[*] Pushing and tagging version $NEW_VERSION in 5 seconds...\"\nsleep 5\n\nfor file in \"${TO_UPDATE[@]}\"\ndo\n  echo \"[*] Patching $file ...\"\n  sed -i \"s/$CURRENT_VERSION/$NEW_VERSION/g\" $file\n  git add $file\ndone\n\ngit commit -m \"Releasing v$NEW_VERSION\"\ngit push\n\ngit tag -a v$NEW_VERSION -m \"Release v$NEW_VERSION\"\ngit push origin v$NEW_VERSION\n\necho\necho \"[*] All done, v$NEW_VERSION released.\"\n"
        },
        {
          "name": "static",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}