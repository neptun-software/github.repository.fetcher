{
  "metadata": {
    "timestamp": 1736567676706,
    "page": 259,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI2MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "libp2p/go-libp2p",
      "stars": 6167,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.03515625,
          "content": "github_checks:\n  annotations: false\n"
        },
        {
          "name": ".githooks",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.048828125,
          "content": "*.swp\n.idea\n*.qlog\n*.sqlog\n*.qlog.zst\n*.sqlog.zst\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.552734375,
          "content": "# Table Of Contents <!-- omit in toc -->\n- [v0.28.0](#v0280)\n- [v0.27.0](#v0270)\n- [v0.26.4](#v0264)\n- [v0.26.3](#v0263)\n- [v0.26.2](#v0262)\n- [v0.26.1](#v0261)\n- [v0.26.0](#v0260)\n- [v0.25.1](#v0251)\n- [v0.25.0](#v0250)\n\n# [v0.28.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.28.0)\n\n## üî¶ Highlights <!-- omit in toc -->\n\n### Smart Dialing <!-- omit in toc -->\n\nThis release introduces smart dialing logic. Currently, libp2p dials all addresses of a remote peer in parallel, and\naborts all outstanding dials as soon as the first one succeeds.\nDialing many addresses in parallel creates a lot of churn on the client side, and unnecessary load on the network and\non the server side, and is heavily discouraged by the networking community (see [RFC 8305](https://www.rfc-editor.org/rfc/rfc8305) for example).\n\nWhen connecting to a peer we first determine the order to dial its addresses. This ranking logic considers a number of corner cases\ndescribed in detail in the documentation of the swarm package (`swarm.DefaultDialRanker`).\nAt a high level, this is what happens:\n* If a peer offers a WebTransport and a QUIC address (on the same IP:port), the QUIC address is preferred.\n* If a peer has a QUIC and a TCP address, the QUIC address is dialed first. Only if the connection attempt doesn't succeed within 250ms, a TCP connection is started.\n\nOur measurements on the IPFS network show that for >90% of established libp2p connections, the first connection attempt succeeds,\nleading a dramatic decrease in the number of aborted connection attempts.\n\nWe also added new metrics to the swarm Grafana dashboard, showing:\n* The number of connection attempts it took to establish a connection\n* The delay introduced by the ranking logic\n\nThis feature should be safe to enable for nodes running in data centers and for most nodes in home networks.\nHowever, there are some (mostly home and corporate networks) that block all UDP traffic. If enabled, the current implementation\nof the smart dialing logic will lead to a regression, since it preferes QUIC addresses over TCP addresses. Nodes would still be\nable to connect, but connection establishment of the TCP connection would be delayed by 250ms.\n\nIn a future release (see #1605 for details), we will introduce a feature called blackhole detection. By observing the outcome of\nQUIC connection attempts, we can determine if UDP traffic is blocked (namely, if all QUIC connection attempts fail), and stop\ndialing QUIC in this case altogether. Once this detection logic is in place, smart dialing will be enabled by default.\n\n### More Metrics! <!-- omit in toc -->\nSince the last release, we've added metrics for:\n* [Holepunching](https://github.com/libp2p/go-libp2p/pull/2246)\n* Smart Dialing (see above)\n\n### WebTransport <!-- omit in toc -->\n* [#2251](https://github.com/libp2p/go-libp2p/pull/2251): Infer public WebTransport address from `quic-v1` addresses if both transports are using the same port for both quic-v1 and WebTransport addresses.\n* [#2271](https://github.com/libp2p/go-libp2p/pull/2271): Only add certificate hashes to WebTransport mulitaddress if listening on WebTransport\n\n## Housekeeping updates <!-- omit in toc -->\n* Identify\n  * [#2303](https://github.com/libp2p/go-libp2p/pull/2303): Don't send default protocol version\n  * Prevent polluting PeerStore with local addrs\n    * [#2325](https://github.com/libp2p/go-libp2p/pull/2325): Don't save signed peer records\n    * [#2300](https://github.com/libp2p/go-libp2p/pull/2300): Filter received addresses based on the node's remote address\n* WebSocket\n  * [#2280](https://github.com/libp2p/go-libp2p/pull/2280): Reverted back to the Gorilla library for WebSocket\n* NAT\n  * [#2248](https://github.com/libp2p/go-libp2p/pull/2248): Move NAT mapping logic out of the host\n\n## üêû Bugfixes <!-- omit in toc -->\n* Identify\n  * [Reject signed peer records on peer ID mismatch](https://github.com/libp2p/go-libp2p/commit/8d771355b41297623e05b04a865d029a2522a074)\n  * [#2299](https://github.com/libp2p/go-libp2p/pull/2299): Avoid spuriously pushing updates\n* Swarm\n  * [#2322](https://github.com/libp2p/go-libp2p/pull/2322): Dedup addresses to dial\n  * [#2284](https://github.com/libp2p/go-libp2p/pull/2284): Change maps with multiaddress keys to use strings\n* QUIC\n  * [#2262](https://github.com/libp2p/go-libp2p/pull/2262): Prioritize listen connections for reuse\n  * [#2276](https://github.com/libp2p/go-libp2p/pull/2276): Don't panic when quic-go's accept call errors\n  * [#2263](https://github.com/libp2p/go-libp2p/pull/2263): Fix race condition when generating random holepunch packet\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.27.0...v0.28.0\n\n# [v0.27.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.27.0)\n\n### Breaking Changes <!-- omit in toc -->\n\n* The `LocalPrivateKey` method was removed from the `network.Conn` interface. [#2144](https://github.com/libp2p/go-libp2p/pull/2144)\n\n## üî¶ Highlights <!-- omit in toc -->\n\n### Additional metrics <!-- omit in toc -->\nSince the last release, we've added metrics for:\n* [Relay Service](https://github.com/libp2p/go-libp2p/pull/2154): RequestStatus, RequestCounts, RejectionReasons for Reservation and Connection Requests,\nConnectionDuration, BytesTransferred, Relay Service Status.\n* [Autorelay](https://github.com/libp2p/go-libp2p/pull/2185): relay finder status, reservation request outcomes, current reservations, candidate circuit v2 support, current candidates, relay addresses updated, num relay address, and scheduled work times\n\n## üêû Bugfixes <!-- omit in toc -->\n\n* autonat: don't change status on dial request refused [2225](https://github.com/libp2p/go-libp2p/pull/2225)\n* relaysvc: fix flaky TestReachabilityChangeEvent [2215](https://github.com/libp2p/go-libp2p/pull/2215)\n* basichost: prevent duplicate dials [2196](https://github.com/libp2p/go-libp2p/pull/2196)\n* websocket: don't set a WSS multiaddr for accepted unencrypted conns [2199](https://github.com/libp2p/go-libp2p/pull/2199)\n* identify: Fix IdentifyWait when Connected events happen out of order [2173](https://github.com/libp2p/go-libp2p/pull/2173)\n* circuitv2: cleanup relay service properly [2164](https://github.com/libp2p/go-libp2p/pull/2164)\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.26.4...v0.27.0\n\n# [v0.26.4](https://github.com/libp2p/go-libp2p/releases/tag/v0.26.4)\n\nThis patch release fixes a busy-looping happening inside AutoRelay on private nodes, see [2208](https://github.com/libp2p/go-libp2p/pull/2208).\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.26.0...v0.26.4\n\n# [v0.26.3](https://github.com/libp2p/go-libp2p/releases/tag/v0.26.3)\n\n* rcmgr: fix JSON marshalling of ResourceManagerStat peer map [2156](https://github.com/libp2p/go-libp2p/pull/2156)\n* websocket: Don't limit message sizes in the websocket reader [2193](https://github.com/libp2p/go-libp2p/pull/2193)\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.26.0...v0.26.3\n\n# [v0.26.2](https://github.com/libp2p/go-libp2p/releases/tag/v0.26.2)\n\nThis patch release fixes two bugs:\n* A panic in WebTransport: https://github.com/quic-go/webtransport-go/releases/tag/v0.5.2\n* Incorrect accounting of accepted connections in the swarm metrics: [#2147](https://github.com/libp2p/go-libp2p/pull/2147)\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.26.0...v0.26.2\n\n# v0.26.1\n\nThis version was retracted due to errors when publishing the release.\n\n# [v0.26.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.26.0)\n\n## üî¶ Highlights <!-- omit in toc -->\n\n### Circuit Relay Changes <!-- omit in toc -->\n\n#### [Removed Circuit Relay v1](https://github.com/libp2p/go-libp2p/pull/2107) <!-- omit in toc -->\n\nWe've decided to remove support for Circuit Relay v1 in this release. v1 Relays have been retired a few months ago. Notably, running the Relay v1 protocol was expensive and resulted in only a small number of nodes in the network. Users had to either manually configure these nodes as static relays, or discover them from the DHT.\nFurthermore, rust-libp2p [has dropped support](https://github.com/libp2p/rust-libp2p/pull/2549) and js-libp2p [is dropping support](https://github.com/libp2p/js-libp2p/pull/1533) for Relay v1.\n\nSupport for Relay v2 was first added in [late 2021 in v0.16.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.16.0). With Circuit Relay v2 it became cheap to run (limited) relays. Public nodes also started the relay service by default. There's now a massive number of Relay v2 nodes on the IPFS network, and they don't advertise their service to the DHT any more. Because there's now so many of these nodes, connecting to just a small number of nodes (e.g. by joining the DHT), a node is statistically guaranteed to connect to some relays.\n\n#### [Unlimited Relay v2](https://github.com/libp2p/go-libp2p/pull/2125) <!-- omit in toc -->\n\nIn conjunction with removing relay v1, we also added an option to Circuit Relay v2 to disable limits.\nThis done by enabling `WithInfiniteLimits`. When enabled this allows for users to have a drop in replacement for Relay v1 with Relay v2.\n\n### Additional metrics <!-- omit in toc -->\n\nSince the last release, we've added additional metrics to different components.\nMetrics were added to:\n* [AutoNat](https://github.com/libp2p/go-libp2p/pull/2086): Current Reachability Status and Confidence, Client and Server DialResponses, Server DialRejections. The dashboard is [available here](https://github.com/libp2p/go-libp2p/blob/master/dashboards/autonat/autonat.json).\n* Swarm:\n  - [Early Muxer Selection](https://github.com/libp2p/go-libp2p/pull/2119): Added early_muxer label indicating whether a connection was established using early muxer selection.\n  - [IP Version](https://github.com/libp2p/go-libp2p/pull/2114): Added ip_version label to connection metrics\n* Identify:\n  - Metrics for Identify, IdentifyPush, PushesTriggered (https://github.com/libp2p/go-libp2p/pull/2069)\n  - Address Count, Protocol Count, Connection IDPush Support (https://github.com/libp2p/go-libp2p/pull/2126)\n\n\nWe also migrated the metric dashboards to a top-level [dashboards](https://github.com/libp2p/go-libp2p/tree/master/dashboards) directory.\n\n## üêû Bugfixes <!-- omit in toc -->\n\n### AutoNat <!-- omit in toc -->\n* [Fixed a bug](https://github.com/libp2p/go-libp2p/issues/2091) where AutoNat would emit events when the observed address has changed even though the node reachability hadn't changed.\n\n### Relay Manager <!-- omit in toc -->\n* [Fixed a bug](https://github.com/libp2p/go-libp2p/pull/2093) where the Relay Manager started a new relay even though the previous reachability was `Public` or if a relay already existed.\n\n### [Stop sending detailed error messages on closing QUIC connections](https://github.com/libp2p/go-libp2p/pull/2112) <!-- omit in toc -->\n\nUsers reported seeing confusing error messages and could not determine the root cause or if the error was from a local or remote peer:\n\n```{12D... Application error 0x0: conn-27571160: system: cannot reserve inbound connection: resource limit exceeded}```\n\nThis error occurred when a connection had been made with a remote peer but the remote peer dropped the connection (due to it exceeding limits).\nThis was actually an `Application error` emitted by `quic-go` and it was a bug in go-libp2p that we sent the whole message.\nFor now, we decided to stop sending this confusing error message. In the future, we will report such errors via [error codes](https://github.com/libp2p/specs/issues/479).\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.25.1...v0.26.0\n\n# [v0.25.1](https://github.com/libp2p/go-libp2p/releases/tag/v0.25.1)\n\nFix some test-utils used by https://github.com/libp2p/go-libp2p-kad-dht\n\n* mocknet: Start host in mocknet by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2078\n* chore: update go-multistream by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2081\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.25.0...v0.25.1\n\n# [v0.25.0](https://github.com/libp2p/go-libp2p/releases/tag/v0.25.0)\n\n## üî¶ Highlights <!-- omit in toc -->\n\n### Metrics <!-- omit in toc -->\n\nWe've started instrumenting the entire stack. In this release, we're adding metrics for:\n* the swarm: tracking incoming and outgoing connections, transports, security protocols and stream multiplexers in use: (https://github.com/libp2p/go-libp2p/blob/master/dashboards/swarm/swarm.json)\n* the event bus: tracking how different events are propagated through the stack and to external consumers (https://github.com/libp2p/go-libp2p/blob/master/dashboards/eventbus/eventbus.json)\n\nOur metrics effort is still ongoing, see https://github.com/libp2p/go-libp2p/issues/1356 for progress. We'll add metrics and dashboards for more libp2p components in a future release.\n\n### Switching to Google's official Protobuf compiler <!-- omit in toc -->\n\nSo far, we were using GoGo Protobuf to compile our Protobuf definitions to Go code. However, this library was deprecated in October last year: https://twitter.com/awalterschulze/status/1584553056100057088. We [benchmarked](https://github.com/libp2p/go-libp2p/issues/1976#issuecomment-1371527732) serialization and deserialization, and found that it's (only) 20% slower than GoGo. Since the vast majority of go-libp2p's CPU time is spent in code paths other than Protobuf handling, switching to the official compiler seemed like a worthwhile tradeoff.\n\n### Removal of OpenSSL <!-- omit in toc -->\n\nBefore this release, go-libp2p had an option to use OpenSSL bindings for certain cryptographic primitives, mostly to speed up the generation of signatures and their verification. When building go-libp2p using `go build`, we'd use the standard library crypto packages. OpenSSL was only used when passing in a build tag: `go build -tags openssl`.\nMaintaining our own fork of the long unmaintained [go-openssl package](https://github.com/libp2p/go-openssl) has proven to place a larger than expected maintenance burden on the libp2p stewards, and when we recently discovered a range of new bugs ([this](https://github.com/libp2p/go-openssl/issues/38) and [this](https://github.com/libp2p/go-libp2p/issues/1892) and [this](https://github.com/libp2p/go-libp2p/issues/1951)), we decided to re-evaluate if this code path is really worth it. The results surprised us, it turns out that:\n* The Go standard library is faster than OpenSSL for all key types that are not RSA.\n* Verifying RSA signatures is as fast as Ed25519 signatures using the Go standard library, and even faster in OpenSSL.\n* Generating RSA signatures is painfully slow, both using Go standard library crypto and using OpenSSL (but even slower using Go standard library).\n\nNow the good news is, that if your node is not using an RSA key, it will never create any RSA signatures (it might need to verify them though, when it connects to a node that uses RSA keys). If you're concerned about CPU performance, it's a good idea to avoid RSA keys (the same applies to bandwidth, RSA keys are huge!). Even for nodes using RSA keys, it turns out that generating the signatures is not a significant part of their CPU load, as verified by profiling one of Kubo's bootstrap nodes.\n\nWe therefore concluded that it's safe to drop this code path altogether, and thereby reduce our maintenance burden.\n\n### New Resource Manager types <!-- omit in toc -->\n\n* Introduces a new type `LimitVal` which can explicitly specify \"use default\", \"unlimited\", \"block all\", as well as any positive number. The zero value of `LimitVal` (the value when you create the object in Go) is \"Use default\".\n  * The JSON marshalling of this is straightforward.\n* Introduces a new `ResourceLimits` type which uses `LimitVal` instead of ints so it can encode the above for the resources.\n* Changes `LimitConfig` to `PartialLimitConfig` and uses `ResourceLimits`. This along with the marshalling changes means you can now marshal the fact that some resource limit is set to block all.\n  * Because the default is to use the defaults, this avoids the footgun of initializing the resource manager with 0 limits (that would block everything).\n\nIn general, you can go from a resource config with defaults to a concrete one with `.Build()`. e.g. `ResourceLimits.Build() => BaseLimit`, `PartialLimitConfig.Build() => ConcreteLimitConfig`, `LimitVal.Build() => int`. See PR #2000 for more details.\n\nIf you're using the defaults for the resource manager, there should be no changes needed.\n\n### Other Breaking Changes <!-- omit in toc -->\n\nWe've cleaned up our API to consistently use `protocol.ID` for libp2p and application protocols. Specifically, this means that the peer store now uses `protocol.ID`s, and the host's `SetStreamHandler` as well.\n\n## What's Changed <!-- omit in toc -->\n* chore: use generic LRU cache by @muXxer in https://github.com/libp2p/go-libp2p/pull/1980\n* core/crypto: drop all OpenSSL code paths by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1953\n* add WebTransport to the list of default transports by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1915\n* identify: remove old code targeting Go 1.17 by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1964\n* core: remove introspection package by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1978\n* identify: remove support for Identify Delta by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1975\n* roadmap: remove optimizations of the TCP-based handshake by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1959\n* circuitv2: correctly set the transport in the ConnectionState by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1972\n* switch to Google's Protobuf library, make protobufs compile with go generate by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1979\n* ci: run go generate as part of the go-check workflow by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1986\n* ci: use GitHub token to install protoc by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1996\n* feat: add some users to the readme by @p-shahi in https://github.com/libp2p/go-libp2p/pull/1981\n* CI: Fast multidimensional Interop tests by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/1991\n* Fix: Ignore zero values when marshalling Limits. by @ajnavarro in https://github.com/libp2p/go-libp2p/pull/1998\n* feat: add ci flakiness score to readme by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2002\n* peerstore: make it possible to use an empty peer ID by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2006\n* feat: rcmgr: Export resource manager errors by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2008\n* feat: ci test-plans: Parse test timeout parameter for interop test by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2014\n* Clean addresses with peer id before adding to addrbook by @sukunrt in https://github.com/libp2p/go-libp2p/pull/2007\n* Expose muxer ids by @aschmahmann in https://github.com/libp2p/go-libp2p/pull/2012\n* swarm: add a basic metrics tracer by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1973\n* consistently use protocol.ID instead of strings by @sukunrt in https://github.com/libp2p/go-libp2p/pull/2004\n* swarm metrics: fix datasource for dashboard by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2024\n* chore: remove textual roadmap in favor for Starmap by @p-shahi in https://github.com/libp2p/go-libp2p/pull/2036\n* rcmgr: *: Always close connscope by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2037\n* chore: remove license files from the eventbus package by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2042\n* Migrate to test-plan composite action by @thomaseizinger in https://github.com/libp2p/go-libp2p/pull/2039\n* use quic-go and webtransport-go from quic-go organization by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2040\n* holepunch: fix flaky test by not removing holepunch protocol handler by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1948\n* quic / webtransport: extend test to test dialing a draft-29 and a v1  by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1957\n* p2p/test: add test for EvtLocalAddressesUpdated event by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2016\n* quic, tcp: only register Prometheus counters when metrics are enabled by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1971\n* p2p/test: fix flaky notification test by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2051\n* quic: disable sending of Version Negotiation packets by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2015\n* eventbus: add metrics by @sukunrt in https://github.com/libp2p/go-libp2p/pull/2038\n* metrics: use a single slice pool for all metrics tracer by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2054\n* webtransport: tidy up some test output by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2053\n* set names for eventbus event subscriptions by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2057\n* autorelay: Split libp2p.EnableAutoRelay into 2 functions by @sukunrt in https://github.com/libp2p/go-libp2p/pull/2022\n* rcmgr: Use prometheus SDK for rcmgr metrics by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2044\n* websocket: Replace gorilla websocket transport with nhooyr websocket transport by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/1982\n* rcmgr: add libp2p prefix to all metrics by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2063\n* chore: git-ignore various flavors of qlog files by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2064\n* interop: Update interop test to match spec by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2049\n* chore: update webtransport-go to v0.5.1 by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2072\n* identify: refactor sending of Identify pushes by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/1984\n* feat!: rcmgr: Change LimitConfig to use LimitVal type by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2000\n* p2p/test/quic: use contexts with a timeout for Connect calls by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2070\n* identify: add some basic metrics by @marten-seemann in https://github.com/libp2p/go-libp2p/pull/2069\n* chore: Release v0.25.0 by @MarcoPolo in https://github.com/libp2p/go-libp2p/pull/2077\n\n## New Contributors <!-- omit in toc -->\n* @muXxer made their first contribution in https://github.com/libp2p/go-libp2p/pull/1980\n* @ajnavarro made their first contribution in https://github.com/libp2p/go-libp2p/pull/1998\n* @sukunrt made their first contribution in https://github.com/libp2p/go-libp2p/pull/2007\n* @thomaseizinger made their first contribution in https://github.com/libp2p/go-libp2p/pull/2039\n\n**Full Changelog**: https://github.com/libp2p/go-libp2p/compare/v0.24.2...v0.25.0\n"
        },
        {
          "name": "FUNDING.json",
          "type": "blob",
          "size": 0.2255859375,
          "content": "{\n    \"opRetro\": {\n      \"projectId\": \"0xc71faa1bcb4ceb785816c3f22823377e9e5e7c48649badd9f0a0ce491f20d4b3\"\n    },\n    \"drips\": {\n      \"filecoin\": {\n        \"ownedBy\": \"0x53DCAf729e11022D5b8949946f6601211C662B38\"\n      }\n    }\n  }\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Juan Batiz-Benet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.6484375,
          "content": "\n<h1 align=\"center\">\n  <a href=\"https://libp2p.io/\"><img width=\"250\" src=\"https://github.com/libp2p/libp2p/blob/master/logo/black-bg-2.png?raw=true\" alt=\"libp2p hex logo\" /></a>\n</h1>\n\n<h3 align=\"center\">The Go implementation of the libp2p Networking Stack.</h3>\n\n<p align=\"center\">\n  <a href=\"http://protocol.ai\"><img src=\"https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square\" /></a>\n  <a href=\"http://libp2p.io/\"><img src=\"https://img.shields.io/badge/project-libp2p-yellow.svg?style=flat-square\" /></a>\n  <a href=\"https://pkg.go.dev/github.com/libp2p/go-libp2p\"><img src=\"https://pkg.go.dev/badge/github.com/libp2p/go-libp2p.svg\" alt=\"Go Reference\"></a>\n  <a href=\"https://discuss.libp2p.io\"><img src=\"https://img.shields.io/discourse/https/discuss.libp2p.io/posts.svg\"/></a>\n  <a href=\"https://marcopolo.github.io/FlakyTests/\"><img src=\"https://marcopolo.github.io/FlakyTests/current-score.svg\"/></a>\n</p>\n\n# Table of Contents <!-- omit in toc -->\n- [Background](#background)\n- [Usage](#usage)\n  - [Examples](#examples)\n  - [Dashboards](#dashboards)\n- [Contribute](#contribute)\n  - [Supported Go Versions](#supported-go-versions)\n- [Notable Users](#notable-users)\n\n# Background\n\n[libp2p](https://github.com/libp2p/specs) is a networking stack and library modularized out of [The IPFS Project](https://github.com/ipfs/ipfs), and bundled separately for other tools to use.\n>\nlibp2p is the product of a long, and arduous quest of understanding -- a deep dive into the internet's network stack, and plentiful peer-to-peer protocols from the past. Building large-scale peer-to-peer systems has been complex and difficult in the last 15 years, and libp2p is a way to fix that. It is a \"network stack\" -- a protocol suite -- that cleanly separates concerns, and enables sophisticated applications to only use the protocols they absolutely need, without giving up interoperability and upgradeability. libp2p grew out of IPFS, but it is built so that lots of people can use it, for lots of different projects.\n\nTo learn more, check out the following resources:\n- [**Our documentation**](https://docs.libp2p.io)\n- [**Our community discussion forum**](https://discuss.libp2p.io)\n- [**The libp2p Specification**](https://github.com/libp2p/specs)\n- [**js-libp2p implementation**](https://github.com/libp2p/js-libp2p)\n- [**rust-libp2p implementation**](https://github.com/libp2p/rust-libp2p)\n\n# Usage\n\nThis repository (`go-libp2p`) serves as the entrypoint to the universe of packages that compose the Go implementation of the libp2p stack.\n\nYou can start using go-libp2p in your Go application simply by adding imports from our repos, e.g.:\n\n```go\nimport \"github.com/libp2p/go-libp2p\"\n```\n\n## Examples\n\nExamples can be found in the [examples folder](examples).\n\n## Dashboards\n\nWe provide prebuilt Grafana dashboards so that applications can better monitor libp2p in production.\nYou can find the [dashboard JSON files here](https://github.com/libp2p/go-libp2p/tree/master/dashboards).\n\nWe also have live [Public Dashboards](https://github.com/libp2p/go-libp2p/tree/master/dashboards/README.md#public-dashboards) that you can check out to see real time monitoring in action.\n\n\n# Contribute\n\ngo-libp2p is MIT-licensed open source software. We welcome contributions big and small! Take a look at the [community contributing notes](https://github.com/ipfs/community/blob/master/CONTRIBUTING.md). Please make sure to check the [issues](https://github.com/libp2p/go-libp2p/issues). Search the closed ones before reporting things, and help us with the open ones.\n\nGuidelines:\n\n- read the [libp2p spec](https://github.com/libp2p/specs)\n- ask questions or talk about things in our [discussion forums](https://discuss.libp2p.io), or open an [issue](https://github.com/libp2p/go-libp2p/issues) for bug reports, or #libp2p-implementers on [Filecoin slack](https://filecoin.io/slack).\n- ensure you are able to contribute (no legal issues please -- we use the DCO)\n- get in touch with @libp2p/go-libp2p-maintainers about how best to contribute\n- No drive-by contributions seeking to collect airdrops.\n  - Many projects aim to reward contributors to common goods. Great. However,\n    this creates an unfortunate incentive for low-effort PRs, submitted solely to\n    claim rewards. These PRs consume maintainers‚Äô time and energy to triage, with\n    little to no impact on end users. If we suspect this is the intent of a PR,\n    we may close it without comment. If you believe this was done in error,\n    contact us via email. Reference this README section and explain why your PR\n    is not a ‚Äúdrive-by contribution.‚Äù\n- have fun!\n\nThere's a few things you can do right now to help out:\n - **Perform code reviews**.\n - **Add tests**. There can never be enough tests.\n - Go through the modules below and **check out existing issues**. This would\n   be especially useful for modules in active development. Some knowledge of\n   IPFS/libp2p may be required, as well as the infrastructure behind it - for\n   instance, you may need to read up on p2p and more complex operations like\n   muxing to be able to help technically.\n\n\n## Supported Go Versions\n\nWe test against and support the two most recent major releases of Go. This is\ninformed by Go's own [security policy](https://go.dev/doc/security/policy).\n\n# Notable Users\nSome notable users of go-libp2p are:\n- [Kubo](https://github.com/ipfs/kubo) - The original Go implementation of IPFS\n- [Lotus](https://github.com/filecoin-project/lotus) - An implementation of the Filecoin protocol\n- [Drand](https://github.com/drand/drand) - A distributed random beacon daemon\n- [Prysm](https://github.com/prysmaticlabs/prysm) - An Ethereum Beacon Chain consensus client built by [Prysmatic Labs](https://prysmaticlabs.com/)\n- [Berty](https://github.com/berty/berty) - An open, secure, offline-first, peer-to-peer and zero trust messaging app.\n- [Wasp](https://github.com/iotaledger/wasp) - A node that runs IOTA Smart Contracts built by the [IOTA Foundation](https://www.iota.org/)\n- [Mina](https://github.com/minaprotocol/mina) - A lightweight, constant-sized blockchain that runs zero-knowledge smart contracts\n- [Polygon Edge](https://github.com/0xPolygon/polygon-edge) - A modular, extensible framework for building Ethereum compatible networks\n- [Celestia Node](https://github.com/celestiaorg/celestia-node) - The Go implementation of Celestia's data availability nodes\n- [Status go](https://github.com/status-im/status-go) - Status bindings for go-ethereum, built by [Status.im](https://status.im/)\n- [Flow](https://github.com/onflow/flow-go) - A blockchain built to support games, apps, and digital assets built by [Dapper Labs](https://www.dapperlabs.com/)\n- [Swarm Bee](https://github.com/ethersphere/bee) - A client for connecting to the [Swarm network](https://www.ethswarm.org/)\n- [MultiversX Node](https://github.com/multiversx/mx-chain-go) - The Go implementation of the MultiversX network protocol\n- [Sonr](https://github.com/sonr-io/sonr) - A platform to integrate DID Documents, WebAuthn, and IPFS and manage digital identity and assets.\n- [EdgeVPN](https://github.com/mudler/edgevpn) - A decentralized, immutable, portable VPN and reverse proxy over p2p.\n- [Kairos](https://github.com/kairos-io/kairos) - A Kubernetes-focused, Cloud Native Linux meta-distribution.\n- [Oasis Core](https://github.com/oasisprotocol/oasis-core) - The consensus and runtime layers of the [Oasis protocol](https://oasisprotocol.org/).\n- [Spacemesh](https://github.com/spacemeshos/go-spacemesh/) - The Go implementation of the [Spacemesh protocol](https://spacemesh.io/), a novel layer one blockchain\n- [Tau](https://github.com/taubyte/tau/) - Open source distributed Platform as a Service (PaaS)\n\nPlease open a pull request if you want your project (min. 250 GitHub stars) to be added here.\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.9169921875,
          "content": "# Security Policy\n\ngo-libp2p is still in development. This means that there may be problems in our protocols,\nor there may be mistakes in our implementations.\nWe take security vulnerabilities very seriously. If you discover a security issue,\nplease bring it to our attention right away!\n\n## Reporting a Vulnerability\n\nIf you find a vulnerability that may affect live deployments -- for example, by exposing\na remote execution exploit -- please [**report privately**](https://github.com/libp2p/go-libp2p/security/advisories/new).\nPlease **DO NOT file a public issue**.\n\nIf the issue is an implementation weakness that cannot be immediately exploited or\nsomething not yet deployed, just discuss it openly.\nIf you need assistance, please reach out to [security@libp2p.io](mailto:security@libp2p.io).\n\n## Reporting a non security bug\n\nFor non-security bugs, please simply file a GitHub [issue](https://github.com/libp2p/go-libp2p/issues/new).\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "dashboards",
          "type": "tree",
          "content": null
        },
        {
          "name": "defaults.go",
          "type": "blob",
          "size": 7.294921875,
          "content": "package libp2p\n\n// This file contains all the default configuration options.\n\nimport (\n\t\"crypto/rand\"\n\n\t\"github.com/libp2p/go-libp2p/core/crypto\"\n\t\"github.com/libp2p/go-libp2p/p2p/host/peerstore/pstoremem\"\n\trcmgr \"github.com/libp2p/go-libp2p/p2p/host/resource-manager\"\n\t\"github.com/libp2p/go-libp2p/p2p/muxer/yamux\"\n\t\"github.com/libp2p/go-libp2p/p2p/net/connmgr\"\n\t\"github.com/libp2p/go-libp2p/p2p/net/swarm\"\n\t\"github.com/libp2p/go-libp2p/p2p/security/noise\"\n\ttls \"github.com/libp2p/go-libp2p/p2p/security/tls\"\n\tquic \"github.com/libp2p/go-libp2p/p2p/transport/quic\"\n\t\"github.com/libp2p/go-libp2p/p2p/transport/tcp\"\n\tlibp2pwebrtc \"github.com/libp2p/go-libp2p/p2p/transport/webrtc\"\n\tws \"github.com/libp2p/go-libp2p/p2p/transport/websocket\"\n\twebtransport \"github.com/libp2p/go-libp2p/p2p/transport/webtransport\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\n\t\"github.com/multiformats/go-multiaddr\"\n)\n\n// DefaultSecurity is the default security option.\n//\n// Useful when you want to extend, but not replace, the supported transport\n// security protocols.\nvar DefaultSecurity = ChainOptions(\n\tSecurity(tls.ID, tls.New),\n\tSecurity(noise.ID, noise.New),\n)\n\n// DefaultMuxers configures libp2p to use the stream connection multiplexers.\n//\n// Use this option when you want to *extend* the set of multiplexers used by\n// libp2p instead of replacing them.\nvar DefaultMuxers = Muxer(yamux.ID, yamux.DefaultTransport)\n\n// DefaultTransports are the default libp2p transports.\n//\n// Use this option when you want to *extend* the set of transports used by\n// libp2p instead of replacing them.\nvar DefaultTransports = ChainOptions(\n\tTransport(tcp.NewTCPTransport),\n\tTransport(quic.NewTransport),\n\tTransport(ws.New),\n\tTransport(webtransport.New),\n\tTransport(libp2pwebrtc.New),\n)\n\n// DefaultPrivateTransports are the default libp2p transports when a PSK is supplied.\n//\n// Use this option when you want to *extend* the set of transports used by\n// libp2p instead of replacing them.\nvar DefaultPrivateTransports = ChainOptions(\n\tTransport(tcp.NewTCPTransport),\n\tTransport(ws.New),\n)\n\n// DefaultPeerstore configures libp2p to use the default peerstore.\nvar DefaultPeerstore Option = func(cfg *Config) error {\n\tps, err := pstoremem.NewPeerstore()\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn cfg.Apply(Peerstore(ps))\n}\n\n// RandomIdentity generates a random identity. (default behaviour)\nvar RandomIdentity = func(cfg *Config) error {\n\tpriv, _, err := crypto.GenerateEd25519Key(rand.Reader)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn cfg.Apply(Identity(priv))\n}\n\n// DefaultListenAddrs configures libp2p to use default listen address.\nvar DefaultListenAddrs = func(cfg *Config) error {\n\taddrs := []string{\n\t\t\"/ip4/0.0.0.0/tcp/0\",\n\t\t\"/ip4/0.0.0.0/udp/0/quic-v1\",\n\t\t\"/ip4/0.0.0.0/udp/0/quic-v1/webtransport\",\n\t\t\"/ip4/0.0.0.0/udp/0/webrtc-direct\",\n\t\t\"/ip6/::/tcp/0\",\n\t\t\"/ip6/::/udp/0/quic-v1\",\n\t\t\"/ip6/::/udp/0/quic-v1/webtransport\",\n\t\t\"/ip6/::/udp/0/webrtc-direct\",\n\t}\n\tlistenAddrs := make([]multiaddr.Multiaddr, 0, len(addrs))\n\tfor _, s := range addrs {\n\t\taddr, err := multiaddr.NewMultiaddr(s)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tlistenAddrs = append(listenAddrs, addr)\n\t}\n\treturn cfg.Apply(ListenAddrs(listenAddrs...))\n}\n\n// DefaultEnableRelay enables relay dialing and listening by default.\nvar DefaultEnableRelay = func(cfg *Config) error {\n\treturn cfg.Apply(EnableRelay())\n}\n\nvar DefaultResourceManager = func(cfg *Config) error {\n\t// Default memory limit: 1/8th of total memory, minimum 128MB, maximum 1GB\n\tlimits := rcmgr.DefaultLimits\n\tSetDefaultServiceLimits(&limits)\n\tmgr, err := rcmgr.NewResourceManager(rcmgr.NewFixedLimiter(limits.AutoScale()))\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn cfg.Apply(ResourceManager(mgr))\n}\n\n// DefaultConnectionManager creates a default connection manager\nvar DefaultConnectionManager = func(cfg *Config) error {\n\tmgr, err := connmgr.NewConnManager(160, 192)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn cfg.Apply(ConnectionManager(mgr))\n}\n\n// DefaultPrometheusRegisterer configures libp2p to use the default registerer\nvar DefaultPrometheusRegisterer = func(cfg *Config) error {\n\treturn cfg.Apply(PrometheusRegisterer(prometheus.DefaultRegisterer))\n}\n\nvar defaultUDPBlackHoleDetector = func(cfg *Config) error {\n\t// A black hole is a binary property. On a network if UDP dials are blocked, all dials will\n\t// fail. So a low success rate of 5 out 100 dials is good enough.\n\treturn cfg.Apply(UDPBlackHoleSuccessCounter(&swarm.BlackHoleSuccessCounter{N: 100, MinSuccesses: 5, Name: \"UDP\"}))\n}\n\nvar defaultIPv6BlackHoleDetector = func(cfg *Config) error {\n\t// A black hole is a binary property. On a network if there is no IPv6 connectivity, all\n\t// dials will fail. So a low success rate of 5 out 100 dials is good enough.\n\treturn cfg.Apply(IPv6BlackHoleSuccessCounter(&swarm.BlackHoleSuccessCounter{N: 100, MinSuccesses: 5, Name: \"IPv6\"}))\n}\n\n// Complete list of default options and when to fallback on them.\n//\n// Please *DON'T* specify default options any other way. Putting this all here\n// makes tracking defaults *much* easier.\nvar defaults = []struct {\n\tfallback func(cfg *Config) bool\n\topt      Option\n}{\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.Transports == nil && cfg.ListenAddrs == nil },\n\t\topt:      DefaultListenAddrs,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.Transports == nil && cfg.PSK == nil },\n\t\topt:      DefaultTransports,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.Transports == nil && cfg.PSK != nil },\n\t\topt:      DefaultPrivateTransports,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.Muxers == nil },\n\t\topt:      DefaultMuxers,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return !cfg.Insecure && cfg.SecurityTransports == nil },\n\t\topt:      DefaultSecurity,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.PeerKey == nil },\n\t\topt:      RandomIdentity,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.Peerstore == nil },\n\t\topt:      DefaultPeerstore,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return !cfg.RelayCustom },\n\t\topt:      DefaultEnableRelay,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.ResourceManager == nil },\n\t\topt:      DefaultResourceManager,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return cfg.ConnManager == nil },\n\t\topt:      DefaultConnectionManager,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool { return !cfg.DisableMetrics && cfg.PrometheusRegisterer == nil },\n\t\topt:      DefaultPrometheusRegisterer,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool {\n\t\t\treturn !cfg.CustomUDPBlackHoleSuccessCounter && cfg.UDPBlackHoleSuccessCounter == nil\n\t\t},\n\t\topt: defaultUDPBlackHoleDetector,\n\t},\n\t{\n\t\tfallback: func(cfg *Config) bool {\n\t\t\treturn !cfg.CustomIPv6BlackHoleSuccessCounter && cfg.IPv6BlackHoleSuccessCounter == nil\n\t\t},\n\t\topt: defaultIPv6BlackHoleDetector,\n\t},\n}\n\n// Defaults configures libp2p to use the default options. Can be combined with\n// other options to *extend* the default options.\nvar Defaults Option = func(cfg *Config) error {\n\tfor _, def := range defaults {\n\t\tif err := cfg.Apply(def.opt); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\n// FallbackDefaults applies default options to the libp2p node if and only if no\n// other relevant options have been applied. will be appended to the options\n// passed into New.\nvar FallbackDefaults Option = func(cfg *Config) error {\n\tfor _, def := range defaults {\n\t\tif !def.fallback(cfg) {\n\t\t\tcontinue\n\t\t}\n\t\tif err := cfg.Apply(def.opt); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "fx_options_test.go",
          "type": "blob",
          "size": 1.0380859375,
          "content": "package libp2p\n\nimport (\n\t\"testing\"\n\n\t\"github.com/libp2p/go-libp2p/core/event\"\n\t\"github.com/libp2p/go-libp2p/core/host\"\n\t\"github.com/libp2p/go-libp2p/core/peer\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/identify\"\n\t\"github.com/stretchr/testify/require\"\n\t\"go.uber.org/fx\"\n)\n\nfunc TestGetPeerID(t *testing.T) {\n\tvar id peer.ID\n\thost, err := New(\n\t\tWithFxOption(fx.Populate(&id)),\n\t)\n\trequire.NoError(t, err)\n\tdefer host.Close()\n\n\trequire.Equal(t, host.ID(), id)\n\n}\n\nfunc TestGetEventBus(t *testing.T) {\n\tvar eb event.Bus\n\thost, err := New(\n\t\tNoTransports,\n\t\tWithFxOption(fx.Populate(&eb)),\n\t)\n\trequire.NoError(t, err)\n\tdefer host.Close()\n\n\trequire.NotNil(t, eb)\n}\n\nfunc TestGetHost(t *testing.T) {\n\tvar h host.Host\n\thost, err := New(\n\t\tNoTransports,\n\t\tWithFxOption(fx.Populate(&h)),\n\t)\n\trequire.NoError(t, err)\n\tdefer host.Close()\n\n\trequire.NotNil(t, h)\n}\n\nfunc TestGetIDService(t *testing.T) {\n\tvar id identify.IDService\n\thost, err := New(\n\t\tNoTransports,\n\t\tWithFxOption(fx.Populate(&id)),\n\t)\n\trequire.NoError(t, err)\n\tdefer host.Close()\n\n\trequire.NotNil(t, id)\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 5.615234375,
          "content": "module github.com/libp2p/go-libp2p\n\ngo 1.22.0\n\nretract v0.26.1 // Tag was applied incorrectly due to a bug in the release workflow.\n\nretract v0.36.0 // Accidentally modified the tag.\n\nrequire (\n\tgithub.com/benbjohnson/clock v1.3.5\n\tgithub.com/davidlazar/go-crypto v0.0.0-20200604182044-b73af7476f6c\n\tgithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0\n\tgithub.com/flynn/noise v1.1.0\n\tgithub.com/google/gopacket v1.1.19\n\tgithub.com/gorilla/websocket v1.5.3\n\tgithub.com/hashicorp/golang-lru/arc/v2 v2.0.7\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.7\n\tgithub.com/ipfs/go-cid v0.4.1\n\tgithub.com/ipfs/go-datastore v0.6.0\n\tgithub.com/ipfs/go-ds-badger v0.3.0\n\tgithub.com/ipfs/go-ds-leveldb v0.5.0\n\tgithub.com/ipfs/go-log/v2 v2.5.1\n\tgithub.com/jbenet/go-temp-err-catcher v0.1.0\n\tgithub.com/klauspost/compress v1.17.11\n\tgithub.com/libp2p/go-buffer-pool v0.1.0\n\tgithub.com/libp2p/go-flow-metrics v0.2.0\n\tgithub.com/libp2p/go-libp2p-asn-util v0.4.1\n\tgithub.com/libp2p/go-libp2p-testing v0.12.0\n\tgithub.com/libp2p/go-msgio v0.3.0\n\tgithub.com/libp2p/go-nat v0.2.0\n\tgithub.com/libp2p/go-netroute v0.2.2\n\tgithub.com/libp2p/go-reuseport v0.4.0\n\tgithub.com/libp2p/go-yamux/v4 v4.0.1\n\tgithub.com/libp2p/zeroconf/v2 v2.2.0\n\tgithub.com/marten-seemann/tcp v0.0.0-20210406111302-dfbc87cc63fd\n\tgithub.com/mikioh/tcpinfo v0.0.0-20190314235526-30a79bb1804b\n\tgithub.com/mr-tron/base58 v1.2.0\n\tgithub.com/multiformats/go-base32 v0.1.0\n\tgithub.com/multiformats/go-multiaddr v0.14.0\n\tgithub.com/multiformats/go-multiaddr-dns v0.4.1\n\tgithub.com/multiformats/go-multiaddr-fmt v0.1.0\n\tgithub.com/multiformats/go-multibase v0.2.0\n\tgithub.com/multiformats/go-multicodec v0.9.0\n\tgithub.com/multiformats/go-multihash v0.2.3\n\tgithub.com/multiformats/go-multistream v0.6.0\n\tgithub.com/multiformats/go-varint v0.0.7\n\tgithub.com/pbnjay/memory v0.0.0-20210728143218-7b4eea64cf58\n\tgithub.com/pion/datachannel v1.5.10\n\tgithub.com/pion/ice/v2 v2.3.37\n\tgithub.com/pion/logging v0.2.2\n\tgithub.com/pion/sctp v1.8.35\n\tgithub.com/pion/stun v0.6.1\n\tgithub.com/pion/webrtc/v4 v4.0.7\n\tgithub.com/prometheus/client_golang v1.20.5\n\tgithub.com/prometheus/client_model v0.6.1\n\tgithub.com/quic-go/quic-go v0.48.2\n\tgithub.com/quic-go/webtransport-go v0.8.1-0.20241018022711-4ac2c9250e66\n\tgithub.com/raulk/go-watchdog v1.3.0\n\tgithub.com/stretchr/testify v1.10.0\n\tgo.uber.org/fx v1.23.0\n\tgo.uber.org/goleak v1.3.0\n\tgo.uber.org/mock v0.5.0\n\tgo.uber.org/zap v1.27.0\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67\n\tgolang.org/x/sync v0.10.0\n\tgolang.org/x/sys v0.28.0\n\tgolang.org/x/tools v0.28.0\n\tgoogle.golang.org/protobuf v1.36.0\n)\n\nrequire (\n\tgithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 // indirect\n\tgithub.com/beorn7/perks v1.0.1 // indirect\n\tgithub.com/cespare/xxhash v1.1.0 // indirect\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\n\tgithub.com/containerd/cgroups v1.1.0 // indirect\n\tgithub.com/coreos/go-systemd/v22 v22.5.0 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/dgraph-io/badger v1.6.2 // indirect\n\tgithub.com/dgraph-io/ristretto v0.0.2 // indirect\n\tgithub.com/docker/go-units v0.5.0 // indirect\n\tgithub.com/dustin/go-humanize v1.0.0 // indirect\n\tgithub.com/elastic/gosigar v0.14.3 // indirect\n\tgithub.com/francoispqt/gojay v1.2.13 // indirect\n\tgithub.com/go-task/slim-sprig/v3 v3.0.0 // indirect\n\tgithub.com/godbus/dbus/v5 v5.1.0 // indirect\n\tgithub.com/gogo/protobuf v1.3.2 // indirect\n\tgithub.com/golang/protobuf v1.5.3 // indirect\n\tgithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db // indirect\n\tgithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/huin/goupnp v1.3.0 // indirect\n\tgithub.com/jackpal/go-nat-pmp v1.0.2 // indirect\n\tgithub.com/jbenet/goprocess v0.1.4 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.9 // indirect\n\tgithub.com/koron/go-ssdp v0.0.4 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/miekg/dns v1.1.62 // indirect\n\tgithub.com/mikioh/tcpopt v0.0.0-20190314235656-172688c1accc // indirect\n\tgithub.com/minio/sha256-simd v1.0.1 // indirect\n\tgithub.com/multiformats/go-base36 v0.2.0 // indirect\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\n\tgithub.com/nxadm/tail v1.4.11 // indirect\n\tgithub.com/onsi/ginkgo/v2 v2.22.0 // indirect\n\tgithub.com/opencontainers/runtime-spec v1.2.0 // indirect\n\tgithub.com/pion/dtls/v2 v2.2.12 // indirect\n\tgithub.com/pion/dtls/v3 v3.0.4 // indirect\n\tgithub.com/pion/ice/v4 v4.0.3 // indirect\n\tgithub.com/pion/interceptor v0.1.37 // indirect\n\tgithub.com/pion/mdns v0.0.12 // indirect\n\tgithub.com/pion/mdns/v2 v2.0.7 // indirect\n\tgithub.com/pion/randutil v0.1.0 // indirect\n\tgithub.com/pion/rtcp v1.2.15 // indirect\n\tgithub.com/pion/rtp v1.8.10 // indirect\n\tgithub.com/pion/sdp/v3 v3.0.9 // indirect\n\tgithub.com/pion/srtp/v3 v3.0.4 // indirect\n\tgithub.com/pion/stun/v3 v3.0.0 // indirect\n\tgithub.com/pion/transport/v2 v2.2.10 // indirect\n\tgithub.com/pion/transport/v3 v3.0.7 // indirect\n\tgithub.com/pion/turn/v2 v2.1.6 // indirect\n\tgithub.com/pion/turn/v4 v4.0.0 // indirect\n\tgithub.com/pkg/errors v0.9.1 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/prometheus/common v0.61.0 // indirect\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\n\tgithub.com/quic-go/qpack v0.5.1 // indirect\n\tgithub.com/spaolacci/murmur3 v1.1.0 // indirect\n\tgithub.com/syndtr/goleveldb v1.0.0 // indirect\n\tgithub.com/wlynxg/anet v0.0.5 // indirect\n\tgo.uber.org/dig v1.18.0 // indirect\n\tgo.uber.org/multierr v1.11.0 // indirect\n\tgolang.org/x/mod v0.22.0 // indirect\n\tgolang.org/x/net v0.32.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n\tlukechampine.com/blake3 v1.3.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 59.4365234375,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.31.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.37.0/go.mod h1:TS1dMSSfndXH133OKGwekG838Om/cQT0BUHV3HcBgoo=\ndmitri.shuralyov.com/app/changes v0.0.0-20180602232624-0a106ad413e3/go.mod h1:Yl+fi1br7+Rr3LqpNJf1/uxUdtRUV+Tnj0o93V2B9MU=\ndmitri.shuralyov.com/html/belt v0.0.0-20180602232347-f7d459c86be0/go.mod h1:JLBrvjyP0v+ecvNYvCpyZgu5/xkfAUhi6wJj28eUfSU=\ndmitri.shuralyov.com/service/change v0.0.0-20181023043359-a85b471d5412/go.mod h1:a1inKt/atXimZ4Mv927x+r7UpyzRUf4emIoiiSC2TN4=\ndmitri.shuralyov.com/state v0.0.0-20180228185332-28bcc343414c/go.mod h1:0PRwlb0D6DFvNNtx+9ybjezNCa8XF0xaYcETyp6rHWU=\ngit.apache.org/thrift.git v0.0.0-20180902110319-2566ecd5d999/go.mod h1:fPE2ZNJGynbRyZ4dJvy6G277gSllfV2HJqblrnkyeyg=\ngithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96 h1:cTp8I5+VIoKjsnZuH8vjyaysT/ses3EvZeaV/1UkF2M=\ngithub.com/AndreasBriese/bbloom v0.0.0-20190825152654-46b345b51c96/go.mod h1:bOvUY6CB00SOBii9/FifXqc0awNKxLFCL/+pkDPuyl8=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/OneOfOne/xxhash v1.2.2 h1:KMrpdQIwFcEqXDklaen+P1axHaj9BSKzvpUUfnHldSE=\ngithub.com/OneOfOne/xxhash v1.2.2/go.mod h1:HSdplMjZKSmBqAxg5vPj2TmRDmfkzw+cTzAElWljhcU=\ngithub.com/anmitsu/go-shlex v0.0.0-20161002113705-648efa622239/go.mod h1:2FmKhYUyUczH0OGQWaF5ceTx0UBShxjsH6f8oGKYe2c=\ngithub.com/armon/consul-api v0.0.0-20180202201655-eb2c6b5be1b6/go.mod h1:grANhF5doyWs3UAsr3K4I6qtAmlQcZDesFNEHPZAzj8=\ngithub.com/benbjohnson/clock v1.1.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/benbjohnson/clock v1.3.0/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/benbjohnson/clock v1.3.5 h1:VvXlSJBzZpA/zum6Sj74hxwYI2DIxRWuNIoXAzHZz5o=\ngithub.com/benbjohnson/clock v1.3.5/go.mod h1:J11/hYXuz8f4ySSvYwY0FKfm+ezbsZBKZxNJlLklBHA=\ngithub.com/beorn7/perks v0.0.0-20180321164747-3a771d992973/go.mod h1:Dwedo/Wpr24TaqPxmxbtue+5NUziq4I4S80YR8gNf3Q=\ngithub.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\ngithub.com/bradfitz/go-smtpd v0.0.0-20170404230938-deb6d6237625/go.mod h1:HYsPBTaaSFSlLx/70C2HPIMNZpVV8+vt/A+FMnYP11g=\ngithub.com/buger/jsonparser v0.0.0-20181115193947-bf1c66bbce23/go.mod h1:bbYlZJ7hK1yFx9hf58LP0zeX7UjIGs20ufpu3evjr+s=\ngithub.com/cespare/xxhash v1.1.0 h1:a6HrQnmkObjyL+Gs60czilIUGqrzKutQD6XZog3p+ko=\ngithub.com/cespare/xxhash v1.1.0/go.mod h1:XrSqR1VqqWfGrhpAt58auRo0WTKS1nRRg3ghfAqPWnc=\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\ngithub.com/cilium/ebpf v0.2.0/go.mod h1:To2CFviqOWL/M0gIMsvSMlqe7em/l1ALkX1PyjrX2Qs=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/containerd/cgroups v0.0.0-20201119153540-4cbc285b3327/go.mod h1:ZJeTFisyysqgcCdecO57Dj79RfL0LNeGiFUqLYQRYLE=\ngithub.com/containerd/cgroups v1.1.0 h1:v8rEWFl6EoqHB+swVNjVoCJE8o3jX7e8nqBGPLaDFBM=\ngithub.com/containerd/cgroups v1.1.0/go.mod h1:6ppBcbh/NOOUU+dMKrykgaBnK9lCIBxHqJDGwsa1mIw=\ngithub.com/coreos/etcd v3.3.10+incompatible/go.mod h1:uF7uidLiAD3TWHmW31ZFd/JWoc32PjwdhPthX9715RE=\ngithub.com/coreos/go-etcd v2.0.0+incompatible/go.mod h1:Jez6KQU2B/sWsbdaef3ED8NzMklzPG4d5KIOhIy30Tk=\ngithub.com/coreos/go-semver v0.2.0/go.mod h1:nnelYz7RCh+5ahJtPPxZlU+153eP4D4r3EedlOD2RNk=\ngithub.com/coreos/go-systemd v0.0.0-20181012123002-c6f51f82210d/go.mod h1:F5haX7vjVVG0kc13fIWeqUViNPyEJxv/OmvnBo0Yme4=\ngithub.com/coreos/go-systemd/v22 v22.1.0/go.mod h1:xO0FLkIi5MaZafQlIrOotqXZ90ih+1atmu1JpKERPPk=\ngithub.com/coreos/go-systemd/v22 v22.5.0 h1:RrqgGjYQKalulkV8NGVIfkXQf6YYmOyiJKk8iXXhfZs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man v1.0.10/go.mod h1:SmD6nW6nTyfqj6ABTjUi3V3JVMnlJmwcJI5acqYI6dE=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.0/go.mod h1:maD7wRr/U5Z6m/iR4s+kqSMx2CaBsrgA7czyZG/E6dU=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davidlazar/go-crypto v0.0.0-20200604182044-b73af7476f6c h1:pFUpOrbxDR6AkioZ1ySsx5yxlDQZ8stG2b88gTPxgJU=\ngithub.com/davidlazar/go-crypto v0.0.0-20200604182044-b73af7476f6c/go.mod h1:6UhI8N9EjYm1c2odKpFpAYeR8dsBeM7PtzQhRgxRr9U=\ngithub.com/decred/dcrd/crypto/blake256 v1.0.1 h1:7PltbUIQB7u/FfZ39+DGa/ShuMyJ5ilcvdfma9wOH6Y=\ngithub.com/decred/dcrd/crypto/blake256 v1.0.1/go.mod h1:2OfgNZ5wDpcsFmHmCK5gZTPcCXqlm2ArzUIkw9czNJo=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0 h1:rpfIENRNNilwHwZeG5+P150SMrnNEcHYvcCuK6dPZSg=\ngithub.com/decred/dcrd/dcrec/secp256k1/v4 v4.3.0/go.mod h1:v57UDF4pDQJcEfFUCRop3lJL149eHGSe9Jvczhzjo/0=\ngithub.com/dgraph-io/badger v1.6.2 h1:mNw0qs90GVgGGWylh0umH5iag1j6n/PeJtNvL6KY/x8=\ngithub.com/dgraph-io/badger v1.6.2/go.mod h1:JW2yswe3V058sS0kZ2h/AXeDSqFjxnZcRrVH//y2UQE=\ngithub.com/dgraph-io/ristretto v0.0.2 h1:a5WaUrDa0qm0YrAAS1tUykT5El3kt62KNZZeMxQn3po=\ngithub.com/dgraph-io/ristretto v0.0.2/go.mod h1:KPxhHT9ZxKefz+PCeOGsrHpl1qZ7i70dGTu2u+Ahh6E=\ngithub.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2 h1:tdlZCpZ/P9DhczCTSixgIKmwPv6+wP5DGjqLYw5SUiA=\ngithub.com/dgryski/go-farm v0.0.0-20190423205320-6a90982ecee2/go.mod h1:SqUrOPUnsFjfmXRMNPybcSiG0BgUW2AuFH8PAnS2iTw=\ngithub.com/docker/go-units v0.4.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/docker/go-units v0.5.0 h1:69rxXcBk27SvSaaxTtLh/8llcHD8vYHT7WSdRZ/jvr4=\ngithub.com/docker/go-units v0.5.0/go.mod h1:fgPhTUdO+D/Jk86RDLlptpiXQzgHJF7gydDDbaIK4Dk=\ngithub.com/dustin/go-humanize v1.0.0 h1:VSnTsYCnlFHaM2/igO1h6X3HA71jcobQuxemgkq4zYo=\ngithub.com/dustin/go-humanize v1.0.0/go.mod h1:HtrtbFcZ19U5GC7JDqmcUSB87Iq5E25KnS6fMYU6eOk=\ngithub.com/elastic/gosigar v0.12.0/go.mod h1:iXRIGg2tLnu7LBdpqzyQfGDEidKCfWcCMS0WKyPWoMs=\ngithub.com/elastic/gosigar v0.14.3 h1:xwkKwPia+hSfg9GqrCUKYdId102m9qTJIIr7egmK/uo=\ngithub.com/elastic/gosigar v0.14.3/go.mod h1:iXRIGg2tLnu7LBdpqzyQfGDEidKCfWcCMS0WKyPWoMs=\ngithub.com/flynn/go-shlex v0.0.0-20150515145356-3f9db97f8568/go.mod h1:xEzjJPgXI435gkrCt3MPfRiAkVrwSbHsst4LCFVfpJc=\ngithub.com/flynn/noise v1.1.0 h1:KjPQoQCEFdZDiP03phOvGi11+SVVhBG2wOWAorLsstg=\ngithub.com/flynn/noise v1.1.0/go.mod h1:xbMo+0i6+IGbYdJhF31t2eR1BIU0CYc12+BNAKwUTag=\ngithub.com/francoispqt/gojay v1.2.13 h1:d2m3sFjloqoIUQU3TsHBgj6qg/BVGlTBeHDUmyJnXKk=\ngithub.com/francoispqt/gojay v1.2.13/go.mod h1:ehT5mTG4ua4581f1++1WLG0vPdaA9HaiDsoyrBGkyDY=\ngithub.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=\ngithub.com/fsnotify/fsnotify v1.6.0 h1:n+5WquG0fcWoWp6xPWfHdbskMCQaFnG6PfBrh1Ky4HY=\ngithub.com/fsnotify/fsnotify v1.6.0/go.mod h1:sl3t1tCWJFWoRz9R8WJCbQihKKwmorjAbSClcnxKAGw=\ngithub.com/ghodss/yaml v1.0.0/go.mod h1:4dBDuWmgqj2HViK6kFavaiC9ZROes6MMH2rRYeMEF04=\ngithub.com/gliderlabs/ssh v0.1.1/go.mod h1:U7qILu1NlMHj9FlMhZLlkCdDnU1DBEAqr0aevW3Awn0=\ngithub.com/go-errors/errors v1.0.1/go.mod h1:f4zRHt4oKfwPJE5k8C9vpYG+aDHdBFUsgrm6/TyX73Q=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-task/slim-sprig/v3 v3.0.0 h1:sUs3vkvUymDpBKi3qH1YSqBQk9+9D/8M2mN1vB6EwHI=\ngithub.com/go-task/slim-sprig/v3 v3.0.0/go.mod h1:W848ghGpv3Qj3dhTPRyJypKRiqCdHZiAzKg9hl15HA8=\ngithub.com/godbus/dbus/v5 v5.0.3/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=\ngithub.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gogo/protobuf v1.1.1/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=\ngithub.com/gogo/protobuf v1.3.1/go.mod h1:SlYgWuQ5SjCEi6WLHjHCa1yvBfUnHcTbrrZtXPKa29o=\ngithub.com/gogo/protobuf v1.3.2 h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=\ngithub.com/gogo/protobuf v1.3.2/go.mod h1:P1XiOD3dCwIKUDQYPy72D8LYyHL2YPYrpS2s69NZV8Q=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:tluoj9z5200jBnyusfRPU2LqT6J+DAorxEvtC7LHB+E=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/mock v1.2.0/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\ngithub.com/golang/protobuf v1.5.3 h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=\ngithub.com/golang/protobuf v1.5.3/go.mod h1:XVQd3VNwM+JqD3oG2Ue2ip4fOMUkwXdXDdiuN0vRsmY=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db h1:woRePGFeVFfLKN/pOkfl+p/TAqKOfFu+7KPlMVpok/w=\ngithub.com/golang/snappy v0.0.0-20180518054509-2e65f85255db/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=\ngithub.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github v17.0.0+incompatible/go.mod h1:zLgOLi98H3fifZn+44m+umXrS52loVEgC2AApnigrVQ=\ngithub.com/google/go-querystring v1.0.0/go.mod h1:odCYkC5MyYFN7vkCjXpyrEuKhc/BUO6wN/zVPAxq5ck=\ngithub.com/google/gopacket v1.1.19 h1:ves8RnFZPGiFnTS0uPQStjwru6uO6h+nlr9j6fL7kF8=\ngithub.com/google/gopacket v1.1.19/go.mod h1:iJ8V8n6KS+z2U1A8pUwu8bW5SyEMkXJB8Yo/Vo+TKTo=\ngithub.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=\ngithub.com/google/pprof v0.0.0-20181206194817-3ea8567a2e57/go.mod h1:zfwlbNMJ+OItoe0UupaVj+oy1omPYYDuagoSzA8v9mc=\ngithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad h1:a6HEuzUHeKH6hwfN/ZoQgRgVIWFJljSWa/zetS2WTvg=\ngithub.com/google/pprof v0.0.0-20241210010833-40e02aabc2ad/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=\ngithub.com/google/renameio v0.1.0/go.mod h1:KWCgfxg9yswjAJkECMjeO8J8rahYeXnNhOm40UhjYkI=\ngithub.com/google/uuid v1.1.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.3.1/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/gax-go v2.0.0+incompatible/go.mod h1:SFVmujtThgffbyetf+mdk2eWhX2bMyUtNHzFKcPA9HY=\ngithub.com/googleapis/gax-go/v2 v2.0.3/go.mod h1:LLvjysVCY1JZeum8Z6l8qUty8fiNwE08qbEPm1M08qg=\ngithub.com/gopherjs/gopherjs v0.0.0-20181017120253-0766667cb4d1/go.mod h1:wJfORRmW1u3UXTncJ5qlYoELFm8eSnnEO6hX4iZ3EWY=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/gregjones/httpcache v0.0.0-20180305231024-9cad4c3443a7/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=\ngithub.com/grpc-ecosystem/grpc-gateway v1.5.0/go.mod h1:RSKVYQBd5MCa4OVpNdGskqpgL2+G+NZTnrVHpWWfpdw=\ngithub.com/hashicorp/golang-lru/arc/v2 v2.0.7 h1:QxkVTxwColcduO+LP7eJO56r2hFiG8zEbfAAzRv52KQ=\ngithub.com/hashicorp/golang-lru/arc/v2 v2.0.7/go.mod h1:Pe7gBlGdc8clY5LJ0LpJXMt5AmgmWNH1g+oFFVUHOEc=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=\ngithub.com/huin/goupnp v1.3.0 h1:UvLUlWDNpoUdYzb2TCn+MuTWtcjXKSza2n6CBdQ0xXc=\ngithub.com/huin/goupnp v1.3.0/go.mod h1:gnGPsThkYa7bFi/KWmEysQRf48l2dvR5bxr2OFckNX8=\ngithub.com/inconshreveable/mousetrap v1.0.0/go.mod h1:PxqpIevigyE2G7u3NXJIT2ANytuPF1OarO4DADm73n8=\ngithub.com/ipfs/go-cid v0.4.1 h1:A/T3qGvxi4kpKWWcPC/PgbvDA2bjVLO7n4UeVwnbs/s=\ngithub.com/ipfs/go-cid v0.4.1/go.mod h1:uQHwDeX4c6CtyrFwdqyhpNcxVewur1M7l7fNU7LKwZk=\ngithub.com/ipfs/go-datastore v0.5.0/go.mod h1:9zhEApYMTl17C8YDp7JmU7sQZi2/wqiYh73hakZ90Bk=\ngithub.com/ipfs/go-datastore v0.6.0 h1:JKyz+Gvz1QEZw0LsX1IBn+JFCJQH4SJVFtM4uWU0Myk=\ngithub.com/ipfs/go-datastore v0.6.0/go.mod h1:rt5M3nNbSO/8q1t4LNkLyUwRs8HupMeN/8O4Vn9YAT8=\ngithub.com/ipfs/go-detect-race v0.0.1 h1:qX/xay2W3E4Q1U7d9lNs1sU9nvguX0a7319XbyQ6cOk=\ngithub.com/ipfs/go-detect-race v0.0.1/go.mod h1:8BNT7shDZPo99Q74BpGMK+4D8Mn4j46UU0LZ723meps=\ngithub.com/ipfs/go-ds-badger v0.3.0 h1:xREL3V0EH9S219kFFueOYJJTcjgNSZ2HY1iSvN7U1Ro=\ngithub.com/ipfs/go-ds-badger v0.3.0/go.mod h1:1ke6mXNqeV8K3y5Ak2bAA0osoTfmxUdupVCGm4QUIek=\ngithub.com/ipfs/go-ds-leveldb v0.5.0 h1:s++MEBbD3ZKc9/8/njrn4flZLnCuY9I79v94gBUNumo=\ngithub.com/ipfs/go-ds-leveldb v0.5.0/go.mod h1:d3XG9RUDzQ6V4SHi8+Xgj9j1XuEk1z82lquxrVbml/Q=\ngithub.com/ipfs/go-ipfs-delay v0.0.0-20181109222059-70721b86a9a8/go.mod h1:8SP1YXK1M1kXuc4KJZINY3TQQ03J2rwBG9QfXmbRPrw=\ngithub.com/ipfs/go-log/v2 v2.0.5/go.mod h1:eZs4Xt4ZUJQFM3DlanGhy7TkwwawCZcSByscwkWG+dw=\ngithub.com/ipfs/go-log/v2 v2.5.1 h1:1XdUzF7048prq4aBjDQQ4SL5RxftpRGdXhNRwKSAlcY=\ngithub.com/ipfs/go-log/v2 v2.5.1/go.mod h1:prSpmC1Gpllc9UYWxDiZDreBYw7zp4Iqp1kOLU9U5UI=\ngithub.com/jackpal/go-nat-pmp v1.0.2 h1:KzKSgb7qkJvOUTqYl9/Hg/me3pWgBmERKrTGD7BdWus=\ngithub.com/jackpal/go-nat-pmp v1.0.2/go.mod h1:QPH045xvCAeXUZOxsnwmrtiCoxIr9eob+4orBN1SBKc=\ngithub.com/jbenet/go-cienv v0.1.0/go.mod h1:TqNnHUmJgXau0nCzC7kXWeotg3J9W34CUv5Djy1+FlA=\ngithub.com/jbenet/go-temp-err-catcher v0.1.0 h1:zpb3ZH6wIE8Shj2sKS+khgRvf7T7RABoLk/+KKHggpk=\ngithub.com/jbenet/go-temp-err-catcher v0.1.0/go.mod h1:0kJRvmDZXNMIiJirNPEYfhpPwbGVtZVWC34vc5WLsDk=\ngithub.com/jbenet/goprocess v0.1.4 h1:DRGOFReOMqqDNXwW70QkacFW0YN9QnwLV0Vqk+3oU0o=\ngithub.com/jbenet/goprocess v0.1.4/go.mod h1:5yspPrukOVuOLORacaBi858NqyClJPQxYZlqdZVfqY4=\ngithub.com/jellevandenhooff/dkim v0.0.0-20150330215556-f50fe3d243e1/go.mod h1:E0B/fFc00Y+Rasa88328GlI/XbtyysCtTHZS8h7IrBU=\ngithub.com/json-iterator/go v1.1.6/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=\ngithub.com/jstemmer/go-junit-report v0.0.0-20190106144839-af01ea7f8024/go.mod h1:6v2b51hI/fHJwM22ozAgKL4VKDeJcHhJFhtBdhmNjmU=\ngithub.com/kisielk/errcheck v1.2.0/go.mod h1:/BMXB+zMLi60iA8Vv6Ksmxu/1UDYcXs4uQLJ+jE2L00=\ngithub.com/kisielk/errcheck v1.5.0/go.mod h1:pFxgyoBC7bSaBwPgfKdkLd5X25qrDl4LWUI2bnpBCr8=\ngithub.com/kisielk/gotool v1.0.0/go.mod h1:XhKaO+MFFWcvkIS/tQcRk01m1F5IRFswLeQ+oQHNcck=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/klauspost/cpuid/v2 v2.2.9 h1:66ze0taIn2H33fBvCkXuv9BmCwDfafmiIVpKV9kKGuY=\ngithub.com/klauspost/cpuid/v2 v2.2.9/go.mod h1:rqkxqrZ1EhYM9G+hXH7YdowN5R5RGN6NK4QwQ3WMXF8=\ngithub.com/koron/go-ssdp v0.0.4 h1:1IDwrghSKYM7yLf7XCzbByg2sJ/JcNOZRXS2jczTwz0=\ngithub.com/koron/go-ssdp v0.0.4/go.mod h1:oDXq+E5IL5q0U8uSBcoAXzTzInwy5lEgC91HoKtbmZk=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.0/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/pty v1.1.3/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/libp2p/go-buffer-pool v0.1.0 h1:oK4mSFcQz7cTQIfqbe4MIj9gLW+mnanjyFtc6cdF0Y8=\ngithub.com/libp2p/go-buffer-pool v0.1.0/go.mod h1:N+vh8gMqimBzdKkSMVuydVDq+UV5QTWy5HSiZacSbPg=\ngithub.com/libp2p/go-flow-metrics v0.2.0 h1:EIZzjmeOE6c8Dav0sNv35vhZxATIXWZg6j/C08XmmDw=\ngithub.com/libp2p/go-flow-metrics v0.2.0/go.mod h1:st3qqfu8+pMfh+9Mzqb2GTiwrAGjIPszEjZmtksN8Jc=\ngithub.com/libp2p/go-libp2p-asn-util v0.4.1 h1:xqL7++IKD9TBFMgnLPZR6/6iYhawHKHl950SO9L6n94=\ngithub.com/libp2p/go-libp2p-asn-util v0.4.1/go.mod h1:d/NI6XZ9qxw67b4e+NgpQexCIiFYJjErASrYW4PFDN8=\ngithub.com/libp2p/go-libp2p-testing v0.12.0 h1:EPvBb4kKMWO29qP4mZGyhVzUyR25dvfUIK5WDu6iPUA=\ngithub.com/libp2p/go-libp2p-testing v0.12.0/go.mod h1:KcGDRXyN7sQCllucn1cOOS+Dmm7ujhfEyXQL5lvkcPg=\ngithub.com/libp2p/go-msgio v0.3.0 h1:mf3Z8B1xcFN314sWX+2vOTShIE0Mmn2TXn3YCUQGNj0=\ngithub.com/libp2p/go-msgio v0.3.0/go.mod h1:nyRM819GmVaF9LX3l03RMh10QdOroF++NBbxAb0mmDM=\ngithub.com/libp2p/go-nat v0.2.0 h1:Tyz+bUFAYqGyJ/ppPPymMGbIgNRH+WqC5QrT5fKrrGk=\ngithub.com/libp2p/go-nat v0.2.0/go.mod h1:3MJr+GRpRkyT65EpVPBstXLvOlAPzUVlG6Pwg9ohLJk=\ngithub.com/libp2p/go-netroute v0.2.2 h1:Dejd8cQ47Qx2kRABg6lPwknU7+nBnFRpko45/fFPuZ8=\ngithub.com/libp2p/go-netroute v0.2.2/go.mod h1:Rntq6jUAH0l9Gg17w5bFGhcC9a+vk4KNXs6s7IljKYE=\ngithub.com/libp2p/go-reuseport v0.4.0 h1:nR5KU7hD0WxXCJbmw7r2rhRYruNRl2koHw8fQscQm2s=\ngithub.com/libp2p/go-reuseport v0.4.0/go.mod h1:ZtI03j/wO5hZVDFo2jKywN6bYKWLOy8Se6DrI2E1cLU=\ngithub.com/libp2p/go-yamux/v4 v4.0.1 h1:FfDR4S1wj6Bw2Pqbc8Uz7pCxeRBPbwsBbEdfwiCypkQ=\ngithub.com/libp2p/go-yamux/v4 v4.0.1/go.mod h1:NWjl8ZTLOGlozrXSOZ/HlfG++39iKNnM5wwmtQP1YB4=\ngithub.com/libp2p/zeroconf/v2 v2.2.0 h1:Cup06Jv6u81HLhIj1KasuNM/RHHrJ8T7wOTS4+Tv53Q=\ngithub.com/libp2p/zeroconf/v2 v2.2.0/go.mod h1:fuJqLnUwZTshS3U/bMRJ3+ow/v9oid1n0DmyYyNO1Xs=\ngithub.com/lunixbochs/vtclean v1.0.0/go.mod h1:pHhQNgMf3btfWnGBVipUOjRYhoOsdGqdm/+2c2E2WMI=\ngithub.com/magiconair/properties v1.8.0/go.mod h1:PppfXfuXeibc/6YijjN8zIbojt8czPbwD3XqdrwzmxQ=\ngithub.com/mailru/easyjson v0.0.0-20190312143242-1de009706dbe/go.mod h1:C1wdFJiN94OJF2b5HbByQZoLdCWB1Yqtg26g4irojpc=\ngithub.com/marten-seemann/tcp v0.0.0-20210406111302-dfbc87cc63fd h1:br0buuQ854V8u83wA0rVZ8ttrq5CpaPZdvrK0LP2lOk=\ngithub.com/marten-seemann/tcp v0.0.0-20210406111302-dfbc87cc63fd/go.mod h1:QuCEs1Nt24+FYQEqAAncTDPJIuGs+LxK1MCiFL25pMU=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/matttproud/golang_protobuf_extensions v1.0.1/go.mod h1:D8He9yQNgCq6Z5Ld7szi9bcBfOoFv/3dc6xSMkL2PC0=\ngithub.com/microcosm-cc/bluemonday v1.0.1/go.mod h1:hsXNsILzKxV+sX77C5b8FSuKF00vh2OMYv+xgHpAMF4=\ngithub.com/miekg/dns v1.1.43/go.mod h1:+evo5L0630/F6ca/Z9+GAqzhjGyn8/c+TBaOyfEl0V4=\ngithub.com/miekg/dns v1.1.62 h1:cN8OuEF1/x5Rq6Np+h1epln8OiyPWV+lROx9LxcGgIQ=\ngithub.com/miekg/dns v1.1.62/go.mod h1:mvDlcItzm+br7MToIKqkglaGhlFMHJ9DTNNWONWXbNQ=\ngithub.com/mikioh/tcp v0.0.0-20190314235350-803a9b46060c h1:bzE/A84HN25pxAuk9Eej1Kz9OUelF97nAc82bDquQI8=\ngithub.com/mikioh/tcp v0.0.0-20190314235350-803a9b46060c/go.mod h1:0SQS9kMwD2VsyFEB++InYyBJroV/FRmBgcydeSUcJms=\ngithub.com/mikioh/tcpinfo v0.0.0-20190314235526-30a79bb1804b h1:z78hV3sbSMAUoyUMM0I83AUIT6Hu17AWfgjzIbtrYFc=\ngithub.com/mikioh/tcpinfo v0.0.0-20190314235526-30a79bb1804b/go.mod h1:lxPUiZwKoFL8DUUmalo2yJJUCxbPKtm8OKfqr2/FTNU=\ngithub.com/mikioh/tcpopt v0.0.0-20190314235656-172688c1accc h1:PTfri+PuQmWDqERdnNMiD9ZejrlswWrCpBEZgWOiTrc=\ngithub.com/mikioh/tcpopt v0.0.0-20190314235656-172688c1accc/go.mod h1:cGKTAVKx4SxOuR/czcZ/E2RSJ3sfHs8FpHhQ5CWMf9s=\ngithub.com/minio/blake2b-simd v0.0.0-20160723061019-3f5f724cb5b1/go.mod h1:pD8RvIylQ358TN4wwqatJ8rNavkEINozVn9DtGI3dfQ=\ngithub.com/minio/sha256-simd v0.1.1-0.20190913151208-6de447530771/go.mod h1:B5e1o+1/KgNmWrSQK08Y6Z1Vb5pwIktudl0J58iy0KM=\ngithub.com/minio/sha256-simd v1.0.1 h1:6kaan5IFmwTNynnKKpDHe6FWHohJOHhCPchzK49dzMM=\ngithub.com/minio/sha256-simd v1.0.1/go.mod h1:Pz6AKMiUdngCLpeTL/RJY1M9rUuPMYujV5xJjtbRSN8=\ngithub.com/mitchellh/go-homedir v1.1.0/go.mod h1:SfyaCUpYCn1Vlf4IUYiD9fPX4A5wJrkLzIz1N1q0pr0=\ngithub.com/mitchellh/mapstructure v1.1.2/go.mod h1:FVVH3fgwuzCH5S8UJGiWEs2h04kUh9fWfEaFds41c1Y=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=\ngithub.com/mr-tron/base58 v1.1.2/go.mod h1:BinMc/sQntlIE1frQmRFPUoPA1Zkr8VRgBdjWI2mNwc=\ngithub.com/mr-tron/base58 v1.2.0 h1:T/HDJBh4ZCPbU39/+c3rRvE0uKBQlU27+QI8LJ4t64o=\ngithub.com/mr-tron/base58 v1.2.0/go.mod h1:BinMc/sQntlIE1frQmRFPUoPA1Zkr8VRgBdjWI2mNwc=\ngithub.com/multiformats/go-base32 v0.1.0 h1:pVx9xoSPqEIQG8o+UbAe7DNi51oej1NtK+aGkbLYxPE=\ngithub.com/multiformats/go-base32 v0.1.0/go.mod h1:Kj3tFY6zNr+ABYMqeUNeGvkIC/UYgtWibDcT0rExnbI=\ngithub.com/multiformats/go-base36 v0.2.0 h1:lFsAbNOGeKtuKozrtBsAkSVhv1p9D0/qedU9rQyccr0=\ngithub.com/multiformats/go-base36 v0.2.0/go.mod h1:qvnKE++v+2MWCfePClUEjE78Z7P2a1UV0xHgWc0hkp4=\ngithub.com/multiformats/go-multiaddr v0.1.1/go.mod h1:aMKBKNEYmzmDmxfX88/vz+J5IU55txyt0p4aiWVohjo=\ngithub.com/multiformats/go-multiaddr v0.14.0 h1:bfrHrJhrRuh/NXH5mCnemjpbGjzRw/b+tJFOD41g2tU=\ngithub.com/multiformats/go-multiaddr v0.14.0/go.mod h1:6EkVAxtznq2yC3QT5CM1UTAwG0GTP3EWAIcjHuzQ+r4=\ngithub.com/multiformats/go-multiaddr-dns v0.4.1 h1:whi/uCLbDS3mSEUMb1MsoT4uzUeZB0N32yzufqS0i5M=\ngithub.com/multiformats/go-multiaddr-dns v0.4.1/go.mod h1:7hfthtB4E4pQwirrz+J0CcDUfbWzTqEzVyYKKIKpgkc=\ngithub.com/multiformats/go-multiaddr-fmt v0.1.0 h1:WLEFClPycPkp4fnIzoFoV9FVd49/eQsuaL3/CWe167E=\ngithub.com/multiformats/go-multiaddr-fmt v0.1.0/go.mod h1:hGtDIW4PU4BqJ50gW2quDuPVjyWNZxToGUh/HwTZYJo=\ngithub.com/multiformats/go-multibase v0.2.0 h1:isdYCVLvksgWlMW9OZRYJEa9pZETFivncJHmHnnd87g=\ngithub.com/multiformats/go-multibase v0.2.0/go.mod h1:bFBZX4lKCA/2lyOFSAoKH5SS6oPyjtnzK/XTFDPkNuk=\ngithub.com/multiformats/go-multicodec v0.9.0 h1:pb/dlPnzee/Sxv/j4PmkDRxCOi3hXTz3IbPKOXWJkmg=\ngithub.com/multiformats/go-multicodec v0.9.0/go.mod h1:L3QTQvMIaVBkXOXXtVmYE+LI16i14xuaojr/H7Ai54k=\ngithub.com/multiformats/go-multihash v0.0.8/go.mod h1:YSLudS+Pi8NHE7o6tb3D8vrpKa63epEDmG8nTduyAew=\ngithub.com/multiformats/go-multihash v0.2.3 h1:7Lyc8XfX/IY2jWb/gI7JP+o7JEq9hOa7BFvVU9RSh+U=\ngithub.com/multiformats/go-multihash v0.2.3/go.mod h1:dXgKXCXjBzdscBLk9JkjINiEsCKRVch90MdaGiKsvSM=\ngithub.com/multiformats/go-multistream v0.6.0 h1:ZaHKbsL404720283o4c/IHQXiS6gb8qAN5EIJ4PN5EA=\ngithub.com/multiformats/go-multistream v0.6.0/go.mod h1:MOyoG5otO24cHIg8kf9QW2/NozURlkP/rvi2FQJyCPg=\ngithub.com/multiformats/go-varint v0.0.7 h1:sWSGR+f/eu5ABZA2ZpYKBILXTTs9JWpdEM/nEGOHFS8=\ngithub.com/multiformats/go-varint v0.0.7/go.mod h1:r8PUYw/fD/SjBCiKOoDlGF6QawOELpZAu9eioSos/OU=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\ngithub.com/neelance/astrewrite v0.0.0-20160511093645-99348263ae86/go.mod h1:kHJEU3ofeGjhHklVoIGuVj85JJwZ6kWPaJwCIxgnFmo=\ngithub.com/neelance/sourcemap v0.0.0-20151028013722-8c68805598ab/go.mod h1:Qr6/a/Q4r9LP1IltGz7tA7iOK1WonHEYhu1HRBA7ZiM=\ngithub.com/nxadm/tail v1.4.11 h1:8feyoE3OzPrcshW5/MJ4sGESc5cqmGkGCWlco4l0bqY=\ngithub.com/nxadm/tail v1.4.11/go.mod h1:OTaG3NK980DZzxbRq6lEuzgU+mug70nY11sMd4JXXHc=\ngithub.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.7.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=\ngithub.com/onsi/ginkgo v1.16.5 h1:8xi0RTUf59SOSfEtZMvwTvXYMzG4gV23XVHOZiXNtnE=\ngithub.com/onsi/ginkgo v1.16.5/go.mod h1:+E8gABHa3K6zRBolWtd+ROzc/U5bkGt0FwiG042wbpU=\ngithub.com/onsi/ginkgo/v2 v2.22.0 h1:Yed107/8DjTr0lKCNt7Dn8yQ6ybuDRQoMGrNFKzMfHg=\ngithub.com/onsi/ginkgo/v2 v2.22.0/go.mod h1:7Du3c42kxCUegi0IImZ1wUQzMBVecgIHjR1C+NkhLQo=\ngithub.com/onsi/gomega v1.4.3/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=\ngithub.com/onsi/gomega v1.34.2 h1:pNCwDkzrsv7MS9kpaQvVb1aVLahQXyJ/Tv5oAZMI3i8=\ngithub.com/onsi/gomega v1.34.2/go.mod h1:v1xfxRgk0KIsG+QOdm7p8UosrOzPYRo60fd3B/1Dukc=\ngithub.com/opencontainers/runtime-spec v1.0.2/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/opencontainers/runtime-spec v1.2.0 h1:z97+pHb3uELt/yiAWD691HNHQIF07bE7dzrbT927iTk=\ngithub.com/opencontainers/runtime-spec v1.2.0/go.mod h1:jwyrGlmzljRJv/Fgzds9SsS/C5hL+LL3ko9hs6T5lQ0=\ngithub.com/openzipkin/zipkin-go v0.1.1/go.mod h1:NtoC/o8u3JlF1lSlyPNswIbeQH9bJTmOf0Erfk+hxe8=\ngithub.com/pbnjay/memory v0.0.0-20210728143218-7b4eea64cf58 h1:onHthvaw9LFnH4t2DcNVpwGmV9E1BkGknEliJkfwQj0=\ngithub.com/pbnjay/memory v0.0.0-20210728143218-7b4eea64cf58/go.mod h1:DXv8WO4yhMYhSNPKjeNKa5WY9YCIEBRbNzFFPJbWO6Y=\ngithub.com/pelletier/go-toml v1.2.0/go.mod h1:5z9KED0ma1S8pY6P1sdut58dfprrGBbd/94hg7ilaic=\ngithub.com/pion/datachannel v1.5.10 h1:ly0Q26K1i6ZkGf42W7D4hQYR90pZwzFOjTq5AuCKk4o=\ngithub.com/pion/datachannel v1.5.10/go.mod h1:p/jJfC9arb29W7WrxyKbepTU20CFgyx5oLo8Rs4Py/M=\ngithub.com/pion/dtls/v2 v2.2.7/go.mod h1:8WiMkebSHFD0T+dIU+UeBaoV7kDhOW5oDCzZ7WZ/F9s=\ngithub.com/pion/dtls/v2 v2.2.12 h1:KP7H5/c1EiVAAKUmXyCzPiQe5+bCJrpOeKg/L05dunk=\ngithub.com/pion/dtls/v2 v2.2.12/go.mod h1:d9SYc9fch0CqK90mRk1dC7AkzzpwJj6u2GU3u+9pqFE=\ngithub.com/pion/dtls/v3 v3.0.4 h1:44CZekewMzfrn9pmGrj5BNnTMDCFwr+6sLH+cCuLM7U=\ngithub.com/pion/dtls/v3 v3.0.4/go.mod h1:R373CsjxWqNPf6MEkfdy3aSe9niZvL/JaKlGeFphtMg=\ngithub.com/pion/ice/v2 v2.3.37 h1:ObIdaNDu1rCo7hObhs34YSBcO7fjslJMZV0ux+uZWh0=\ngithub.com/pion/ice/v2 v2.3.37/go.mod h1:mBF7lnigdqgtB+YHkaY/Y6s6tsyRyo4u4rPGRuOjUBQ=\ngithub.com/pion/ice/v4 v4.0.3 h1:9s5rI1WKzF5DRqhJ+Id8bls/8PzM7mau0mj1WZb4IXE=\ngithub.com/pion/ice/v4 v4.0.3/go.mod h1:VfHy0beAZ5loDT7BmJ2LtMtC4dbawIkkkejHPRZNB3Y=\ngithub.com/pion/interceptor v0.1.37 h1:aRA8Zpab/wE7/c0O3fh1PqY0AJI3fCSEM5lRWJVorwI=\ngithub.com/pion/interceptor v0.1.37/go.mod h1:JzxbJ4umVTlZAf+/utHzNesY8tmRkM2lVmkS82TTj8Y=\ngithub.com/pion/logging v0.2.2 h1:M9+AIj/+pxNsDfAT64+MAVgJO0rsyLnoJKCqf//DoeY=\ngithub.com/pion/logging v0.2.2/go.mod h1:k0/tDVsRCX2Mb2ZEmTqNa7CWsQPc+YYCB7Q+5pahoms=\ngithub.com/pion/mdns v0.0.12 h1:CiMYlY+O0azojWDmxdNr7ADGrnZ+V6Ilfner+6mSVK8=\ngithub.com/pion/mdns v0.0.12/go.mod h1:VExJjv8to/6Wqm1FXK+Ii/Z9tsVk/F5sD/N70cnYFbk=\ngithub.com/pion/mdns/v2 v2.0.7 h1:c9kM8ewCgjslaAmicYMFQIde2H9/lrZpjBkN8VwoVtM=\ngithub.com/pion/mdns/v2 v2.0.7/go.mod h1:vAdSYNAT0Jy3Ru0zl2YiW3Rm/fJCwIeM0nToenfOJKA=\ngithub.com/pion/randutil v0.1.0 h1:CFG1UdESneORglEsnimhUjf33Rwjubwj6xfiOXBa3mA=\ngithub.com/pion/randutil v0.1.0/go.mod h1:XcJrSMMbbMRhASFVOlj/5hQial/Y8oH/HVo7TBZq+j8=\ngithub.com/pion/rtcp v1.2.15 h1:LZQi2JbdipLOj4eBjK4wlVoQWfrZbh3Q6eHtWtJBZBo=\ngithub.com/pion/rtcp v1.2.15/go.mod h1:jlGuAjHMEXwMUHK78RgX0UmEJFV4zUKOFHR7OP+D3D0=\ngithub.com/pion/rtp v1.8.10 h1:puphjdbjPB+L+NFaVuZ5h6bt1g5q4kFIoI+r5q/g0CU=\ngithub.com/pion/rtp v1.8.10/go.mod h1:8uMBJj32Pa1wwx8Fuv/AsFhn8jsgw+3rUC2PfoBZ8p4=\ngithub.com/pion/sctp v1.8.35 h1:qwtKvNK1Wc5tHMIYgTDJhfZk7vATGVHhXbUDfHbYwzA=\ngithub.com/pion/sctp v1.8.35/go.mod h1:EcXP8zCYVTRy3W9xtOF7wJm1L1aXfKRQzaM33SjQlzg=\ngithub.com/pion/sdp/v3 v3.0.9 h1:pX++dCHoHUwq43kuwf3PyJfHlwIj4hXA7Vrifiq0IJY=\ngithub.com/pion/sdp/v3 v3.0.9/go.mod h1:B5xmvENq5IXJimIO4zfp6LAe1fD9N+kFv+V/1lOdz8M=\ngithub.com/pion/srtp/v3 v3.0.4 h1:2Z6vDVxzrX3UHEgrUyIGM4rRouoC7v+NiF1IHtp9B5M=\ngithub.com/pion/srtp/v3 v3.0.4/go.mod h1:1Jx3FwDoxpRaTh1oRV8A/6G1BnFL+QI82eK4ms8EEJQ=\ngithub.com/pion/stun v0.6.1 h1:8lp6YejULeHBF8NmV8e2787BogQhduZugh5PdhDyyN4=\ngithub.com/pion/stun v0.6.1/go.mod h1:/hO7APkX4hZKu/D0f2lHzNyvdkTGtIy3NDmLR7kSz/8=\ngithub.com/pion/stun/v3 v3.0.0 h1:4h1gwhWLWuZWOJIJR9s2ferRO+W3zA/b6ijOI6mKzUw=\ngithub.com/pion/stun/v3 v3.0.0/go.mod h1:HvCN8txt8mwi4FBvS3EmDghW6aQJ24T+y+1TKjB5jyU=\ngithub.com/pion/transport/v2 v2.2.1/go.mod h1:cXXWavvCnFF6McHTft3DWS9iic2Mftcz1Aq29pGcU5g=\ngithub.com/pion/transport/v2 v2.2.4/go.mod h1:q2U/tf9FEfnSBGSW6w5Qp5PFWRLRj3NjLhCCgpRK4p0=\ngithub.com/pion/transport/v2 v2.2.10 h1:ucLBLE8nuxiHfvkFKnkDQRYWYfp8ejf4YBOPfaQpw6Q=\ngithub.com/pion/transport/v2 v2.2.10/go.mod h1:sq1kSLWs+cHW9E+2fJP95QudkzbK7wscs8yYgQToO5E=\ngithub.com/pion/transport/v3 v3.0.1/go.mod h1:UY7kiITrlMv7/IKgd5eTUcaahZx5oUN3l9SzK5f5xE0=\ngithub.com/pion/transport/v3 v3.0.7 h1:iRbMH05BzSNwhILHoBoAPxoB9xQgOaJk+591KC9P1o0=\ngithub.com/pion/transport/v3 v3.0.7/go.mod h1:YleKiTZ4vqNxVwh77Z0zytYi7rXHl7j6uPLGhhz9rwo=\ngithub.com/pion/turn/v2 v2.1.3/go.mod h1:huEpByKKHix2/b9kmTAM3YoX6MKP+/D//0ClgUYR2fY=\ngithub.com/pion/turn/v2 v2.1.6 h1:Xr2niVsiPTB0FPtt+yAWKFUkU1eotQbGgpTIld4x1Gc=\ngithub.com/pion/turn/v2 v2.1.6/go.mod h1:huEpByKKHix2/b9kmTAM3YoX6MKP+/D//0ClgUYR2fY=\ngithub.com/pion/turn/v4 v4.0.0 h1:qxplo3Rxa9Yg1xXDxxH8xaqcyGUtbHYw4QSCvmFWvhM=\ngithub.com/pion/turn/v4 v4.0.0/go.mod h1:MuPDkm15nYSklKpN8vWJ9W2M0PlyQZqYt1McGuxG7mA=\ngithub.com/pion/webrtc/v4 v4.0.7 h1:aeq78uVnFZd2umXW0O9A2VFQYuS7+BZxWetQvSp2jPo=\ngithub.com/pion/webrtc/v4 v4.0.7/go.mod h1:oFVBBVSHU3vAEwSgnk3BuKCwAUwpDwQhko1EDwyZWbU=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_golang v0.8.0/go.mod h1:7SWBe2y4D6OKWSNQJUaRYU/AaXPKyh/dDVn+NZz0KFw=\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\ngithub.com/prometheus/client_model v0.0.0-20180712105110-5c3871d89910/go.mod h1:MbSGuTsp3dbXC40dX6PRTWyKYBIrTGTE9sqQNg2J8bo=\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\ngithub.com/prometheus/common v0.0.0-20180801064454-c7de2306084e/go.mod h1:daVV7qP5qjZbuso7PdcryaAu0sAZbrN9i7WWcTMWvro=\ngithub.com/prometheus/common v0.61.0 h1:3gv/GThfX0cV2lpO7gkTUwZru38mxevy90Bj8YFSRQQ=\ngithub.com/prometheus/common v0.61.0/go.mod h1:zr29OCN/2BsJRaFwG8QOBr41D6kkchKbpeNH7pAjb/s=\ngithub.com/prometheus/procfs v0.0.0-20180725123919-05ee40e3a273/go.mod h1:c3At6R/oaqEKCNdg8wHV1ftS6bRYblBhIjjI8uT2IGk=\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\ngithub.com/quic-go/qpack v0.5.1 h1:giqksBPnT/HDtZ6VhtFKgoLOWmlyo9Ei6u9PqzIMbhI=\ngithub.com/quic-go/qpack v0.5.1/go.mod h1:+PC4XFrEskIVkcLzpEkbLqq1uCoxPhQuvK5rH1ZgaEg=\ngithub.com/quic-go/quic-go v0.48.2 h1:wsKXZPeGWpMpCGSWqOcqpW2wZYic/8T3aqiOID0/KWE=\ngithub.com/quic-go/quic-go v0.48.2/go.mod h1:yBgs3rWBOADpga7F+jJsb6Ybg1LSYiQvwWlLX+/6HMs=\ngithub.com/quic-go/webtransport-go v0.8.1-0.20241018022711-4ac2c9250e66 h1:4WFk6u3sOT6pLa1kQ50ZVdm8BQFgJNA117cepZxtLIg=\ngithub.com/quic-go/webtransport-go v0.8.1-0.20241018022711-4ac2c9250e66/go.mod h1:Vp72IJajgeOL6ddqrAhmp7IM9zbTcgkQxD/YdxrVwMw=\ngithub.com/raulk/go-watchdog v1.3.0 h1:oUmdlHxdkXRJlwfG0O9omj8ukerm8MEQavSiDTEtBsk=\ngithub.com/raulk/go-watchdog v1.3.0/go.mod h1:fIvOnLbF0b0ZwkB9YU4mOW9Did//4vPZtDqv66NfsMU=\ngithub.com/rogpeppe/go-internal v1.3.0/go.mod h1:M8bDsm7K2OlrFYOpmOWEs/qY81heoFRclV5y23lUDJ4=\ngithub.com/rogpeppe/go-internal v1.10.0 h1:TMyTOH3F/DB16zRVcYyreMH6GnZZrwQVAoYjRBZyWFQ=\ngithub.com/rogpeppe/go-internal v1.10.0/go.mod h1:UQnix2H7Ngw/k4C5ijL5+65zddjncjaFoBhdsK/akog=\ngithub.com/russross/blackfriday v1.5.2/go.mod h1:JO/DiYxRf+HjHt06OyowR9PTA263kcR/rfWxYHBV53g=\ngithub.com/russross/blackfriday/v2 v2.0.1/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.0.0/go.mod h1:0CfEIISq7TuYL3j771MWULgwwjU+GofnZX9QAmXWZgo=\ngithub.com/shurcooL/component v0.0.0-20170202220835-f88ec8f54cc4/go.mod h1:XhFIlyj5a1fBNx5aJTbKoIq0mNaPvOagO+HjB3EtxrY=\ngithub.com/shurcooL/events v0.0.0-20181021180414-410e4ca65f48/go.mod h1:5u70Mqkb5O5cxEA8nxTsgrgLehJeAw6Oc4Ab1c/P1HM=\ngithub.com/shurcooL/github_flavored_markdown v0.0.0-20181002035957-2122de532470/go.mod h1:2dOwnU2uBioM+SGy2aZoq1f/Sd1l9OkAeAUvjSyvgU0=\ngithub.com/shurcooL/go v0.0.0-20180423040247-9e1955d9fb6e/go.mod h1:TDJrrUr11Vxrven61rcy3hJMUqaf/CLWYhHNPmT14Lk=\ngithub.com/shurcooL/go-goon v0.0.0-20170922171312-37c2f522c041/go.mod h1:N5mDOmsrJOB+vfqUK+7DmDyjhSLIIBnXo9lvZJj3MWQ=\ngithub.com/shurcooL/gofontwoff v0.0.0-20180329035133-29b52fc0a18d/go.mod h1:05UtEgK5zq39gLST6uB0cf3NEHjETfB4Fgr3Gx5R9Vw=\ngithub.com/shurcooL/gopherjslib v0.0.0-20160914041154-feb6d3990c2c/go.mod h1:8d3azKNyqcHP1GaQE/c6dDgjkgSx2BZ4IoEi4F1reUI=\ngithub.com/shurcooL/highlight_diff v0.0.0-20170515013008-09bb4053de1b/go.mod h1:ZpfEhSmds4ytuByIcDnOLkTHGUI6KNqRNPDLHDk+mUU=\ngithub.com/shurcooL/highlight_go v0.0.0-20181028180052-98c3abbbae20/go.mod h1:UDKB5a1T23gOMUJrI+uSuH0VRDStOiUVSjBTRDVBVag=\ngithub.com/shurcooL/home v0.0.0-20181020052607-80b7ffcb30f9/go.mod h1:+rgNQw2P9ARFAs37qieuu7ohDNQ3gds9msbT2yn85sg=\ngithub.com/shurcooL/htmlg v0.0.0-20170918183704-d01228ac9e50/go.mod h1:zPn1wHpTIePGnXSHpsVPWEktKXHr6+SS6x/IKRb7cpw=\ngithub.com/shurcooL/httperror v0.0.0-20170206035902-86b7830d14cc/go.mod h1:aYMfkZ6DWSJPJ6c4Wwz3QtW22G7mf/PEgaB9k/ik5+Y=\ngithub.com/shurcooL/httpfs v0.0.0-20171119174359-809beceb2371/go.mod h1:ZY1cvUeJuFPAdZ/B6v7RHavJWZn2YPVFQ1OSXhCGOkg=\ngithub.com/shurcooL/httpgzip v0.0.0-20180522190206-b1c53ac65af9/go.mod h1:919LwcH0M7/W4fcZ0/jy0qGght1GIhqyS/EgWGH2j5Q=\ngithub.com/shurcooL/issues v0.0.0-20181008053335-6292fdc1e191/go.mod h1:e2qWDig5bLteJ4fwvDAc2NHzqFEthkqn7aOZAOpj+PQ=\ngithub.com/shurcooL/issuesapp v0.0.0-20180602232740-048589ce2241/go.mod h1:NPpHK2TI7iSaM0buivtFUc9offApnI0Alt/K8hcHy0I=\ngithub.com/shurcooL/notifications v0.0.0-20181007000457-627ab5aea122/go.mod h1:b5uSkrEVM1jQUspwbixRBhaIjIzL2xazXp6kntxYle0=\ngithub.com/shurcooL/octicon v0.0.0-20181028054416-fa4f57f9efb2/go.mod h1:eWdoE5JD4R5UVWDucdOPg1g2fqQRq78IQa9zlOV1vpQ=\ngithub.com/shurcooL/reactions v0.0.0-20181006231557-f2e0b4ca5b82/go.mod h1:TCR1lToEk4d2s07G3XGfz2QrgHXg4RJBvjrOozvoWfk=\ngithub.com/shurcooL/sanitized_anchor_name v0.0.0-20170918181015-86672fcb3f95/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/shurcooL/sanitized_anchor_name v1.0.0/go.mod h1:1NzhyTcUVG4SuEtjjoZeVRXNmyL/1OwPU0+IJeTBvfc=\ngithub.com/shurcooL/users v0.0.0-20180125191416-49c67e49c537/go.mod h1:QJTqeLYEDaXHZDBsXlPCDqdhQuJkuw4NOtaxYe3xii4=\ngithub.com/shurcooL/webdavfs v0.0.0-20170829043945-18c3829fa133/go.mod h1:hKmq5kWdCj2z2KEozexVbfEZIWiTjhE0+UjmZgPqehw=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/sourcegraph/annotate v0.0.0-20160123013949-f4cad6c6324d/go.mod h1:UdhH50NIW0fCiwBSr0co2m7BnFLdv4fQTgdqdJTHFeE=\ngithub.com/sourcegraph/syntaxhighlight v0.0.0-20170531221838-bd320f5d308e/go.mod h1:HuIsMU8RRBOtsCgI77wP899iHVBQpCmg4ErYMZB+2IA=\ngithub.com/spaolacci/murmur3 v0.0.0-20180118202830-f09979ecbc72/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spaolacci/murmur3 v1.1.0 h1:7c1g84S4BPRrfL5Xrdp6fOJ206sU9y293DDHaoy0bLI=\ngithub.com/spaolacci/murmur3 v1.1.0/go.mod h1:JwIasOWyU6f++ZhiEuf87xNszmSA2myDM2Kzu9HwQUA=\ngithub.com/spf13/afero v1.1.2/go.mod h1:j4pytiNVoe2o6bmDsKpLACNPDBIoEAkihy7loJ1B0CQ=\ngithub.com/spf13/cast v1.3.0/go.mod h1:Qx5cxh0v+4UWYiBimWS+eyWzqEqokIECu5etghLkUJE=\ngithub.com/spf13/cobra v0.0.5/go.mod h1:3K3wKZymM7VvHMDS9+Akkh4K60UwM26emMESw8tLCHU=\ngithub.com/spf13/jwalterweatherman v1.0.0/go.mod h1:cQK4TGJAtQXfYWX+Ddv3mKDzgVb68N+wFjFa4jdeBTo=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/viper v1.3.2/go.mod h1:ZiWeW+zYFKm7srdB9IoDzzZXaJaI5eL9QjNiN/DMA2s=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.3/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/syndtr/goleveldb v1.0.0 h1:fBdIW9lB4Iz0n9khmH8w27SJ3QEJ7+IgjPEwGSZiFdE=\ngithub.com/syndtr/goleveldb v1.0.0/go.mod h1:ZVVdQEZoIme9iO1Ch2Jdy24qqXrMMOU6lpPAyBWyWuQ=\ngithub.com/tarm/serial v0.0.0-20180830185346-98f6abe2eb07/go.mod h1:kDXzergiv9cbyO7IOYJZWg1U88JhDg3PB6klq9Hg2pA=\ngithub.com/ugorji/go/codec v0.0.0-20181204163529-d75b2dcb6bc8/go.mod h1:VFNgLljTbGfSG7qAOspJ7OScBnGdDN/yBr0sguwnwf0=\ngithub.com/urfave/cli v1.22.2/go.mod h1:Gos4lmkARVdJ6EkW0WaNv/tZAAMe9V7XWyB60NtXRu0=\ngithub.com/viant/assertly v0.4.8/go.mod h1:aGifi++jvCrUaklKEKT0BU95igDNaqkvz+49uaYMPRU=\ngithub.com/viant/toolbox v0.24.0/go.mod h1:OxMCG57V0PXuIP2HNQrtJf2CjqdmbrOx5EkMILuUhzM=\ngithub.com/wlynxg/anet v0.0.3/go.mod h1:eay5PRQr7fIVAMbTbchTnO9gG65Hg/uYGdc7mguHxoA=\ngithub.com/wlynxg/anet v0.0.5 h1:J3VJGi1gvo0JwZ/P1/Yc/8p63SoW98B5dHkYDmpgvvU=\ngithub.com/wlynxg/anet v0.0.5/go.mod h1:eay5PRQr7fIVAMbTbchTnO9gG65Hg/uYGdc7mguHxoA=\ngithub.com/xordataexchange/crypt v0.0.3-0.20170626215501-b2862e3d0a77/go.mod h1:aYKd//L2LvnjZzWKhF00oedf4jCCReLcmhLdhm1A27Q=\ngithub.com/yuin/goldmark v1.1.27/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.2.1/go.mod h1:3hX8gzYuyVAZsxl0MRgGTJEmQBFcNTphYh9decYSb74=\ngithub.com/yuin/goldmark v1.3.5/go.mod h1:mwnBkeHKe2W/ZEtQ+71ViKU8L12m81fl3OWwC1Zlc8k=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.opencensus.io v0.18.0/go.mod h1:vKdFvxhtzZ9onBp9VKHK8z/sRpBMnKAsufL7wlDrCOA=\ngo.uber.org/atomic v1.6.0/go.mod h1:sABNBOSYdrvTF6hTgEIbc7YasKWGhgEQZyfxyTvoXHQ=\ngo.uber.org/atomic v1.7.0/go.mod h1:fEN4uk6kAWBTFdckzkM89CLk9XfWZrxpCo0nPH17wJc=\ngo.uber.org/dig v1.18.0 h1:imUL1UiY0Mg4bqbFfsRQO5G4CGRBec/ZujWTvSVp3pw=\ngo.uber.org/dig v1.18.0/go.mod h1:Us0rSJiThwCv2GteUN0Q7OKvU7n5J4dxZ9JKUXozFdE=\ngo.uber.org/fx v1.23.0 h1:lIr/gYWQGfTwGcSXWXu4vP5Ws6iqnNEIY+F/aFzCKTg=\ngo.uber.org/fx v1.23.0/go.mod h1:o/D9n+2mLP6v1EG+qsdT1O8wKopYAsqZasju97SDFCU=\ngo.uber.org/goleak v1.1.11-0.20210813005559-691160354723/go.mod h1:cwTWslyiVhfpKIDGSZEM2HlOvcqm+tG4zioyIeLoqMQ=\ngo.uber.org/goleak v1.3.0 h1:2K3zAYmnTNqV73imy9J1T3WC+gmCePx2hEGkimedGto=\ngo.uber.org/goleak v1.3.0/go.mod h1:CoHD4mav9JJNrW/WLlf7HGZPjdw8EucARQHekz1X6bE=\ngo.uber.org/mock v0.5.0 h1:KAMbZvZPyBPWgD14IrIQ38QCyjwpvVVV6K/bHl1IwQU=\ngo.uber.org/mock v0.5.0/go.mod h1:ge71pBPLYDk7QIi1LupWxdAykm7KIEFchiOqd6z7qMM=\ngo.uber.org/multierr v1.5.0/go.mod h1:FeouvMocqHpRaaGuG9EjoKcStLC43Zu/fmqdUMPcKYU=\ngo.uber.org/multierr v1.6.0/go.mod h1:cdWPpRnG4AhwMwsgIHip0KRBQjJy5kYEpYjJxpXp9iU=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngo.uber.org/tools v0.0.0-20190618225709-2cfd321de3ee/go.mod h1:vJERXedbb3MVM5f9Ejo0C68/HhF8uaILCdgjnY+goOA=\ngo.uber.org/zap v1.14.1/go.mod h1:Mb2vm2krFEG5DV0W9qcHBYFtp/Wku1cvYaqPsS/WYfc=\ngo.uber.org/zap v1.19.1/go.mod h1:j3DNczoxDZroyBnOT1L/Q79cfUMGZxlv/9dzN7SM1rI=\ngo.uber.org/zap v1.27.0 h1:aJMhYGrd5QSmlpLMr2MftRKl7t8J8PTZPA732ud/XR8=\ngo.uber.org/zap v1.27.0/go.mod h1:GB2qFLM7cTU87MWRP2mPIjqfIDnGu+VIO4V/SdhGo2E=\ngo4.org v0.0.0-20180809161055-417644f6feb5/go.mod h1:MkTOUMDaeVYJUOUsaDXIhWPZYa1yOyC1qaOBpL57BhE=\ngolang.org/x/build v0.0.0-20190111050920-041ab4dc3f9d/go.mod h1:OWs+y06UdEOHN4y+MfF/py+xQ/tYqIWW03b70/CG9Rw=\ngolang.org/x/crypto v0.0.0-20181030102418-4d3f4d9ffa16/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20181203042331-505ab145d0a9/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20190510104115-cbcb75029529/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20191011191535-87dc89f01550/go.mod h1:yigFU9vqHzYiE8UmvKecakEJjdnWj3jj499lnFckfCI=\ngolang.org/x/crypto v0.0.0-20200602180216-279210d13fed/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2/go.mod h1:T9bdIzuCu7OtxOm1hfPfRQxPLYneinmdGuTeoZ9dtd4=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.8.0/go.mod h1:mRqEX+O9/h5TFCrQhkgjo2yKi0yYA+9ecGkdQoHrywE=\ngolang.org/x/crypto v0.12.0/go.mod h1:NF0Gs7EO5K4qLn+Ylc+fih8BSTeIjAP05siRnAh98yw=\ngolang.org/x/crypto v0.18.0/go.mod h1:R0j02AL6hcrfOiy9T4ZYp/rcWeMxM3L6QYxlOuEG1mg=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67 h1:1UoZQm6f0P/ZO0w1Ri+f+ifG/gXhegadRdwBIXEFWDo=\ngolang.org/x/exp v0.0.0-20241217172543-b2144cdd0a67/go.mod h1:qj5a5QZpwLU2NLQudwIN5koi3beDhSAlJwa67PuM98c=\ngolang.org/x/lint v0.0.0-20180702182130-06c8688daad7/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190930215403-16217165b5de/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/lint v0.0.0-20200302205851-738671d3881b/go.mod h1:3xt1FjdF8hUf6vQPIChWIBhFzV8gjjsPE/fR3IyQdNY=\ngolang.org/x/mod v0.0.0-20190513183733-4bf6d317e70e/go.mod h1:mXi4GBBbnImb6dmsKGUJ2LatrhH/nqhxcFungHvyanc=\ngolang.org/x/mod v0.1.1-0.20191105210325-c90efee705ee/go.mod h1:QqPTAvyqsEbceGzBzNggFXnrqF1CaUcvgkdR5Ot7KZg=\ngolang.org/x/mod v0.2.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.3.0/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.4.2/go.mod h1:s0Qsj1ACt9ePp/hMypM3fl4fZqREWJwdYDEqhRiZZUA=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=\ngolang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181029044818-c44066c5c816/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20181106065722-10aee1819953/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190313220215-9f648a60d977/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200226121028-0de0cce0169b/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210119194325-5f4716e94777/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20210405180319-a5a99cb37ef4/go.mod h1:p54w0d4576C0XHj96bSt6lcn1PtDYWL6XObtHCRCNQM=\ngolang.org/x/net v0.0.0-20210423184538-5f58ad60dda6/go.mod h1:OJAsFXCWl8Ukc7SiCT/9KSuxbyM7479/AVlXFRxuMCk=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=\ngolang.org/x/net v0.14.0/go.mod h1:PpSgVXXLK0OxS0F31C1/tv6XNguvCrnXIDrFMspZIUI=\ngolang.org/x/net v0.20.0/go.mod h1:z8BVo6PvndSri0LbOE3hAn0apkU+1YvI6E70E9jsnvY=\ngolang.org/x/net v0.32.0 h1:ZqPmj8Kzc+Y6e0+skZsuACbx+wzMgo5MQsJh9Qd6aYI=\ngolang.org/x/net v0.32.0/go.mod h1:CwU0IoeOlnQQWJ6ioyFrfRuomB8GKF6KbYXZVyeXNfs=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20181017192945-9dcd33a902f4/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20181203162652-d668ce993890/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.0.0-20190226205417-e64efc72b421/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=\ngolang.org/x/perf v0.0.0-20180704124530-6e6d33e29852/go.mod h1:JLpeXjPJfIyPr5TlbXLkXWLhP8nz10XfvxElABhCtcw=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190227155943-e225da77a7e6/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190911185100-cd5d95a43a6e/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20201020160332-67f06af15bc9/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20210220032951-036812b2e83c/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180810173357-98c5dad5d1a0/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181029174526-d69651ed3497/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20181205085412-a5c9d58dba9a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190316082340-a2f829d7f35f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20190626221950-04f50cda93cb/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200124204421-9fbb57f87de9/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200602225109-6fdc65e7d980/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210303074136-134d130e1a04/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210330210617-4fbd30eecc44/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210426080607-c94f62235c83/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210510120138-977fb7262007/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220908164124-27713097b956/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.9.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.11.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.16.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=\ngolang.org/x/term v0.11.0/go.mod h1:zC9APTIj3jG3FdV/Ons+XE1riIZXG4aZ4GTHiPZJPIU=\ngolang.org/x/term v0.16.0/go.mod h1:yn7UURbUtPyrVJPGPq404EukNFxcm/foM+bV/bfcDsY=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.1-0.20180807135948-17ff2d5776d2/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.12.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/time v0.0.0-20180412165947-fbb02b2291d2/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=\ngolang.org/x/time v0.5.0 h1:o7cqy6amK/52YcAKIPlM3a+Fpj35zvRj2TP+e1xFSfk=\ngolang.org/x/time v0.5.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180828015842-6cd1fcedba52/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030000716-a0a13e073c7b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20181030221726-6c7e314b6563/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190621195816-6e04913cbbac/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191029041327-9cc4af7d6b2c/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191029190741-b9c20aec41a5/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.0.0-20200130002326-2f3ba24bd6e7/go.mod h1:TB2adYChydJhpapKDTa4BR/hXlZSLoq2Wpct/0txZ28=\ngolang.org/x/tools v0.0.0-20200619180055-7c47624df98f/go.mod h1:EkVYQZoAsY45+roYkvgYkIh4xh/qjgUK9TdY2XT94GE=\ngolang.org/x/tools v0.0.0-20210106214847-113979e3529a/go.mod h1:emZCQorbCU4vsT4fOWvOPXz4eW1wZW4PmDk9uLelYpA=\ngolang.org/x/tools v0.1.5/go.mod h1:o0xws9oXOQQZyjljx8fwUC0k7L1pTE6eaCbjGeHmOkk=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/tools v0.28.0 h1:WuB6qZ4RPCQo5aP3WdKZS7i595EdWqWR8vqJTlwTVK8=\ngolang.org/x/tools v0.28.0/go.mod h1:dcIOrVd3mfQKTgrDVQHqCPMWy6lnhfhtX3hLXYVLfRw=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191011141410-1b5146add898/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.0.0-20180910000450-7ca32eb868bf/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=\ngoogle.golang.org/api v0.0.0-20181030000543-1d582fd0359e/go.mod h1:4mhQ8q/RsB7i+udVvVy5NUi08OU8ZlA0gRVgrF7VFY0=\ngoogle.golang.org/api v0.1.0/go.mod h1:UGEZY7KEX120AnNLIHFMKIo4obdJhkp2tPbaPlQx13Y=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.2.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.3.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20180831171423-11092d34479b/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20181029155118-b69ba1387ce2/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20181202183823-bd91e49a0898/go.mod h1:7Ep/1NZk928CDR8SjdVbjWNpdIf6nzjE3BTgJDr2Atg=\ngoogle.golang.org/genproto v0.0.0-20190306203927-b5d61aea6440/go.mod h1:VzzqZJRnGkLBvHegQrXjBqPurQTc5/KpmUdxsrq26oE=\ngoogle.golang.org/grpc v1.14.0/go.mod h1:yo6s7OP7yaDglbqo1J04qKzAhqBH6lvTonzMVmEdcZw=\ngoogle.golang.org/grpc v1.16.0/go.mod h1:0JHn/cJsOMiMfNA9+DeHDlAU7KAAB5GDlYFpa9MZMio=\ngoogle.golang.org/grpc v1.17.0/go.mod h1:6QZJwpn2B+Zp71q/5VxRsJ6NXXVCE5NRUHRo+f3cWCs=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\ngoogle.golang.org/protobuf v1.26.0/go.mod h1:9q0QmTI4eRPtz6boOQmLYwt+qCgq0jsYwAQnmE0givc=\ngoogle.golang.org/protobuf v1.36.0 h1:mjIs9gYtt56AzC4ZaffQuh88TZurBGhIJMBZGSxNerQ=\ngoogle.golang.org/protobuf v1.36.0/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\ngopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=\ngopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=\ngopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=\ngopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.8/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngrpc.go4.org v0.0.0-20170609214715-11d0a25b4919/go.mod h1:77eQGdRu53HpSqPFJFmuJdjuHRquDANNeA4x7B8WQ9o=\nhonnef.co/go/tools v0.0.0-20180728063816-88497007e858/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190106161140-3f1c8253044a/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.1-2019.2.3/go.mod h1:a3bituU0lyd329TUQxRnasdCoJDkEUEAqEt0JzvZhAg=\nlukechampine.com/blake3 v1.3.0 h1:sJ3XhFINmHSrYCgl958hscfIa3bw8x4DqMP3u1YvoYE=\nlukechampine.com/blake3 v1.3.0/go.mod h1:0OFRp7fBtAylGVCO40o87sbupkyIGgbpv1+M1k1LM6k=\nsourcegraph.com/sourcegraph/go-diff v0.5.0/go.mod h1:kuch7UrkMzY0X+p9CRK03kfuPQ2zzQcaEFbx8wA8rck=\nsourcegraph.com/sqs/pbtypes v0.0.0-20180604144634-d3ebe8f20ae4/go.mod h1:ketZ/q3QxT9HOBeFhu6RdvsftgpsbFHBF5Cas6cDKZ0=\n"
        },
        {
          "name": "leaky_tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "libp2p.go",
          "type": "blob",
          "size": 2.0869140625,
          "content": "package libp2p\n\nimport (\n\t\"github.com/libp2p/go-libp2p/config\"\n\t\"github.com/libp2p/go-libp2p/core/host\"\n)\n\n// Config describes a set of settings for a libp2p node.\ntype Config = config.Config\n\n// Option is a libp2p config option that can be given to the libp2p constructor\n// (`libp2p.New`).\ntype Option = config.Option\n\n// ChainOptions chains multiple options into a single option.\nfunc ChainOptions(opts ...Option) Option {\n\treturn func(cfg *Config) error {\n\t\tfor _, opt := range opts {\n\t\t\tif opt == nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif err := opt(cfg); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n}\n\n// New constructs a new libp2p node with the given options, falling back on\n// reasonable defaults. The defaults are:\n//\n// - If no transport and listen addresses are provided, the node listens to\n// the multiaddresses \"/ip4/0.0.0.0/tcp/0\" and \"/ip6/::/tcp/0\";\n//\n// - If no transport options are provided, the node uses TCP, websocket and QUIC\n// transport protocols;\n//\n// - If no multiplexer configuration is provided, the node is configured by\n// default to use yamux;\n//\n// - If no security transport is provided, the host uses the go-libp2p's noise\n// and/or tls encrypted transport to encrypt all traffic;\n//\n// - If no peer identity is provided, it generates a random Ed25519 key-pair\n// and derives a new identity from it;\n//\n// - If no peerstore is provided, the host is initialized with an empty\n// peerstore.\n//\n// To stop/shutdown the returned libp2p node, the user needs to call `Close` on the returned Host.\nfunc New(opts ...Option) (host.Host, error) {\n\treturn NewWithoutDefaults(append(opts, FallbackDefaults)...)\n}\n\n// NewWithoutDefaults constructs a new libp2p node with the given options but\n// *without* falling back on reasonable defaults.\n//\n// Warning: This function should not be considered a stable interface. We may\n// choose to add required services at any time and, by using this function, you\n// opt-out of any defaults we may provide.\nfunc NewWithoutDefaults(opts ...Option) (host.Host, error) {\n\tvar cfg Config\n\tif err := cfg.Apply(opts...); err != nil {\n\t\treturn nil, err\n\t}\n\treturn cfg.NewNode()\n}\n"
        },
        {
          "name": "libp2p_test.go",
          "type": "blob",
          "size": 23.42578125,
          "content": "package libp2p\n\nimport (\n\t\"context\"\n\t\"crypto/ecdsa\"\n\t\"crypto/elliptic\"\n\t\"crypto/rand\"\n\t\"crypto/tls\"\n\t\"crypto/x509\"\n\t\"crypto/x509/pkix\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\t\"math/big\"\n\t\"net\"\n\t\"net/netip\"\n\t\"regexp\"\n\t\"strconv\"\n\t\"strings\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/libp2p/go-libp2p/core/connmgr\"\n\t\"github.com/libp2p/go-libp2p/core/crypto\"\n\t\"github.com/libp2p/go-libp2p/core/host\"\n\t\"github.com/libp2p/go-libp2p/core/network\"\n\t\"github.com/libp2p/go-libp2p/core/peer\"\n\t\"github.com/libp2p/go-libp2p/core/peerstore\"\n\t\"github.com/libp2p/go-libp2p/core/pnet\"\n\t\"github.com/libp2p/go-libp2p/core/routing\"\n\t\"github.com/libp2p/go-libp2p/core/transport\"\n\trcmgr \"github.com/libp2p/go-libp2p/p2p/host/resource-manager\"\n\t\"github.com/libp2p/go-libp2p/p2p/net/swarm\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\n\t\"github.com/libp2p/go-libp2p/p2p/security/noise\"\n\tsectls \"github.com/libp2p/go-libp2p/p2p/security/tls\"\n\tquic \"github.com/libp2p/go-libp2p/p2p/transport/quic\"\n\t\"github.com/libp2p/go-libp2p/p2p/transport/quicreuse\"\n\t\"github.com/libp2p/go-libp2p/p2p/transport/tcp\"\n\tlibp2pwebrtc \"github.com/libp2p/go-libp2p/p2p/transport/webrtc\"\n\t\"github.com/libp2p/go-libp2p/p2p/transport/websocket\"\n\twebtransport \"github.com/libp2p/go-libp2p/p2p/transport/webtransport\"\n\t\"go.uber.org/goleak\"\n\n\tma \"github.com/multiformats/go-multiaddr\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestNewHost(t *testing.T) {\n\th, err := makeRandomHost(t, 9000)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\th.Close()\n}\n\nfunc TestTransportConstructor(t *testing.T) {\n\tctor := func(\n\t\th host.Host,\n\t\t_ connmgr.ConnectionGater,\n\t\tupgrader transport.Upgrader,\n\t) transport.Transport {\n\t\ttpt, err := tcp.NewTCPTransport(upgrader, nil, nil)\n\t\trequire.NoError(t, err)\n\t\treturn tpt\n\t}\n\th, err := New(Transport(ctor))\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestNoListenAddrs(t *testing.T) {\n\th, err := New(NoListenAddrs)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\tif len(h.Addrs()) != 0 {\n\t\tt.Fatal(\"expected no addresses\")\n\t}\n}\n\nfunc TestNoTransports(t *testing.T) {\n\tctx := context.Background()\n\ta, err := New(NoTransports)\n\trequire.NoError(t, err)\n\tdefer a.Close()\n\n\tb, err := New(ListenAddrStrings(\"/ip4/127.0.0.1/tcp/0\"))\n\trequire.NoError(t, err)\n\tdefer b.Close()\n\n\terr = a.Connect(ctx, peer.AddrInfo{\n\t\tID:    b.ID(),\n\t\tAddrs: b.Addrs(),\n\t})\n\tif err == nil {\n\t\tt.Error(\"dial should have failed as no transports have been configured\")\n\t}\n}\n\nfunc TestInsecure(t *testing.T) {\n\th, err := New(NoSecurity)\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestDefaultListenAddrs(t *testing.T) {\n\treTCP := regexp.MustCompile(\"/(ip)[4|6]/((0.0.0.0)|(::))/tcp/\")\n\treQUIC := regexp.MustCompile(\"/(ip)[4|6]/((0.0.0.0)|(::))/udp/([0-9]*)/quic-v1\")\n\treWebRTC := regexp.MustCompile(\"/(ip)[4|6]/((0.0.0.0)|(::))/udp/([0-9]*)/webrtc-direct/certhash/(.*)\")\n\treCircuit := regexp.MustCompile(\"/p2p-circuit\")\n\n\t// Test 1: Setting the correct listen addresses if userDefined.Transport == nil && userDefined.ListenAddrs == nil\n\th, err := New()\n\trequire.NoError(t, err)\n\tfor _, addr := range h.Network().ListenAddresses() {\n\t\tif reTCP.FindStringSubmatchIndex(addr.String()) == nil &&\n\t\t\treQUIC.FindStringSubmatchIndex(addr.String()) == nil &&\n\t\t\treWebRTC.FindStringSubmatchIndex(addr.String()) == nil &&\n\t\t\treCircuit.FindStringSubmatchIndex(addr.String()) == nil {\n\t\t\tt.Error(\"expected ip4 or ip6 or relay interface\")\n\t\t}\n\t}\n\n\th.Close()\n\n\t// Test 2: Listen addr only include relay if user defined transport is passed.\n\th, err = New(Transport(tcp.NewTCPTransport))\n\trequire.NoError(t, err)\n\n\tif len(h.Network().ListenAddresses()) != 1 {\n\t\tt.Error(\"expected one listen addr with user defined transport\")\n\t}\n\tif reCircuit.FindStringSubmatchIndex(h.Network().ListenAddresses()[0].String()) == nil {\n\t\tt.Error(\"expected relay address\")\n\t}\n\th.Close()\n}\n\nfunc makeRandomHost(t *testing.T, port int) (host.Host, error) {\n\tpriv, _, err := crypto.GenerateKeyPair(crypto.RSA, 2048)\n\trequire.NoError(t, err)\n\n\treturn New([]Option{\n\t\tListenAddrStrings(fmt.Sprintf(\"/ip4/127.0.0.1/tcp/%d\", port)),\n\t\tIdentity(priv),\n\t\tDefaultTransports,\n\t\tDefaultMuxers,\n\t\tDefaultSecurity,\n\t\tNATPortMap(),\n\t}...)\n}\n\nfunc TestChainOptions(t *testing.T) {\n\tvar cfg Config\n\tvar optsRun []int\n\toptcount := 0\n\tnewOpt := func() Option {\n\t\tindex := optcount\n\t\toptcount++\n\t\treturn func(c *Config) error {\n\t\t\toptsRun = append(optsRun, index)\n\t\t\treturn nil\n\t\t}\n\t}\n\n\tif err := cfg.Apply(newOpt(), nil, ChainOptions(newOpt(), newOpt(), ChainOptions(), ChainOptions(nil, newOpt()))); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t// Make sure we ran all options.\n\tif optcount != 4 {\n\t\tt.Errorf(\"expected to have handled %d options, handled %d\", optcount, len(optsRun))\n\t}\n\n\t// Make sure we ran the options in-order.\n\tfor i, x := range optsRun {\n\t\tif i != x {\n\t\t\tt.Errorf(\"expected opt %d, got opt %d\", i, x)\n\t\t}\n\t}\n}\n\nfunc TestTransportConstructorTCP(t *testing.T) {\n\th, err := New(\n\t\tTransport(tcp.NewTCPTransport, tcp.DisableReuseport()),\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\trequire.NoError(t, h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/tcp/0\")))\n\terr = h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/udp/0/quic-v1\"))\n\trequire.Error(t, err)\n\trequire.Contains(t, err.Error(), swarm.ErrNoTransport.Error())\n}\n\nfunc TestTransportConstructorQUIC(t *testing.T) {\n\th, err := New(\n\t\tTransport(quic.NewTransport),\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\trequire.NoError(t, h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/udp/0/quic-v1\")))\n\terr = h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/tcp/0\"))\n\trequire.Error(t, err)\n\trequire.Contains(t, err.Error(), swarm.ErrNoTransport.Error())\n}\n\ntype mockTransport struct{}\n\nfunc (m mockTransport) Dial(context.Context, ma.Multiaddr, peer.ID) (transport.CapableConn, error) {\n\tpanic(\"implement me\")\n}\n\nfunc (m mockTransport) CanDial(ma.Multiaddr) bool                       { panic(\"implement me\") }\nfunc (m mockTransport) Listen(ma.Multiaddr) (transport.Listener, error) { panic(\"implement me\") }\nfunc (m mockTransport) Protocols() []int                                { return []int{1337} }\nfunc (m mockTransport) Proxy() bool                                     { panic(\"implement me\") }\n\nvar _ transport.Transport = &mockTransport{}\n\nfunc TestTransportConstructorWithoutOpts(t *testing.T) {\n\tt.Run(\"successful\", func(t *testing.T) {\n\t\tvar called bool\n\t\tconstructor := func() transport.Transport {\n\t\t\tcalled = true\n\t\t\treturn &mockTransport{}\n\t\t}\n\n\t\th, err := New(\n\t\t\tTransport(constructor),\n\t\t\tDisableRelay(),\n\t\t)\n\t\trequire.NoError(t, err)\n\t\trequire.True(t, called, \"expected constructor to be called\")\n\t\tdefer h.Close()\n\t})\n\n\tt.Run(\"with options\", func(t *testing.T) {\n\t\tvar called bool\n\t\tconstructor := func() transport.Transport {\n\t\t\tcalled = true\n\t\t\treturn &mockTransport{}\n\t\t}\n\n\t\t_, err := New(\n\t\t\tTransport(constructor, tcp.DisableReuseport()),\n\t\t\tDisableRelay(),\n\t\t)\n\t\trequire.EqualError(t, err, \"transport constructor doesn't take any options\")\n\t\trequire.False(t, called, \"didn't expected constructor to be called\")\n\t})\n}\n\nfunc TestTransportConstructorWithWrongOpts(t *testing.T) {\n\t_, err := New(\n\t\tTransport(quic.NewTransport, tcp.DisableReuseport()),\n\t\tDisableRelay(),\n\t)\n\trequire.EqualError(t, err, \"transport constructor doesn't take any options\")\n}\n\nfunc TestSecurityConstructor(t *testing.T) {\n\th, err := New(\n\t\tTransport(tcp.NewTCPTransport),\n\t\tSecurity(\"/noisy\", noise.New),\n\t\tSecurity(\"/tls\", sectls.New),\n\t\tDefaultListenAddrs,\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\n\th1, err := New(\n\t\tNoListenAddrs,\n\t\tTransport(tcp.NewTCPTransport),\n\t\tSecurity(\"/noise\", noise.New), // different name\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h1.Close()\n\n\th2, err := New(\n\t\tNoListenAddrs,\n\t\tTransport(tcp.NewTCPTransport),\n\t\tSecurity(\"/noisy\", noise.New),\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h2.Close()\n\n\tai := peer.AddrInfo{\n\t\tID:    h.ID(),\n\t\tAddrs: h.Addrs(),\n\t}\n\terr = h1.Connect(context.Background(), ai)\n\trequire.Error(t, err)\n\trequire.Contains(t, err.Error(), \"failed to negotiate security protocol\")\n\trequire.NoError(t, h2.Connect(context.Background(), ai))\n}\n\nfunc TestTransportConstructorWebTransport(t *testing.T) {\n\th, err := New(\n\t\tTransport(webtransport.New),\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\trequire.NoError(t, h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\")))\n\terr = h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/udp/0/quic-v1/\"))\n\trequire.Error(t, err)\n\trequire.Contains(t, err.Error(), swarm.ErrNoTransport.Error())\n}\n\nfunc TestTransportCustomAddressWebTransport(t *testing.T) {\n\tcustomAddr, err := ma.NewMultiaddr(\"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\th, err := New(\n\t\tTransport(webtransport.New),\n\t\tListenAddrs(customAddr),\n\t\tDisableRelay(),\n\t\tAddrsFactory(func(multiaddrs []ma.Multiaddr) []ma.Multiaddr {\n\t\t\treturn []ma.Multiaddr{customAddr}\n\t\t}),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\trequire.NoError(t, h.Network().Listen(ma.StringCast(\"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\")))\n\taddrs := h.Addrs()\n\trequire.Len(t, addrs, 1)\n\trequire.NotEqual(t, addrs[0], customAddr)\n\trestOfAddr, lastComp := ma.SplitLast(addrs[0])\n\trestOfAddr, secondToLastComp := ma.SplitLast(restOfAddr)\n\trequire.Equal(t, ma.P_CERTHASH, lastComp.Protocol().Code)\n\trequire.Equal(t, ma.P_CERTHASH, secondToLastComp.Protocol().Code)\n\trequire.True(t, restOfAddr.Equal(customAddr))\n}\n\n// TestTransportCustomAddressWebTransportDoesNotStall tests that if the user\n// manually returns a webtransport address from AddrsFactory, but we aren't\n// listening on a webtranport address, we don't stall.\nfunc TestTransportCustomAddressWebTransportDoesNotStall(t *testing.T) {\n\tcustomAddr, err := ma.NewMultiaddr(\"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\")\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\th, err := New(\n\t\tTransport(webtransport.New),\n\t\t// Purposely not listening on the custom address so that we make sure the node doesn't stall if it fails to add a certhash to the multiaddr\n\t\t// ListenAddrs(customAddr),\n\t\tDisableRelay(),\n\t\tAddrsFactory(func(multiaddrs []ma.Multiaddr) []ma.Multiaddr {\n\t\t\treturn []ma.Multiaddr{customAddr}\n\t\t}),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\taddrs := h.Addrs()\n\trequire.Len(t, addrs, 1)\n\t_, lastComp := ma.SplitLast(addrs[0])\n\trequire.NotEqual(t, ma.P_CERTHASH, lastComp.Protocol().Code)\n\t// We did not add the certhash to the multiaddr\n\trequire.Equal(t, addrs[0], customAddr)\n}\n\ntype mockPeerRouting struct {\n\tqueried []peer.ID\n}\n\nfunc (r *mockPeerRouting) FindPeer(_ context.Context, id peer.ID) (peer.AddrInfo, error) {\n\tr.queried = append(r.queried, id)\n\treturn peer.AddrInfo{}, errors.New(\"mock peer routing error\")\n}\n\nfunc TestRoutedHost(t *testing.T) {\n\tmockRouter := &mockPeerRouting{}\n\th, err := New(\n\t\tNoListenAddrs,\n\t\tRouting(func(host.Host) (routing.PeerRouting, error) { return mockRouter, nil }),\n\t\tDisableRelay(),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\n\tpriv, _, err := crypto.GenerateEd25519Key(rand.Reader)\n\trequire.NoError(t, err)\n\tid, err := peer.IDFromPrivateKey(priv)\n\trequire.NoError(t, err)\n\trequire.EqualError(t, h.Connect(context.Background(), peer.AddrInfo{ID: id}), \"mock peer routing error\")\n\trequire.Equal(t, []peer.ID{id}, mockRouter.queried)\n}\n\nfunc TestAutoNATService(t *testing.T) {\n\th, err := New(EnableNATService())\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestInsecureConstructor(t *testing.T) {\n\th, err := New(\n\t\tEnableNATService(),\n\t\tNoSecurity,\n\t)\n\trequire.NoError(t, err)\n\th.Close()\n\n\th, err = New(\n\t\tNoSecurity,\n\t)\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestAutoNATv2Service(t *testing.T) {\n\th, err := New(EnableAutoNATv2())\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestDisableIdentifyAddressDiscovery(t *testing.T) {\n\th, err := New(DisableIdentifyAddressDiscovery())\n\trequire.NoError(t, err)\n\th.Close()\n}\n\nfunc TestMain(m *testing.M) {\n\tgoleak.VerifyTestMain(\n\t\tm,\n\t\t// This will return eventually (5s timeout) but doesn't take a context.\n\t\tgoleak.IgnoreAnyFunction(\"github.com/koron/go-ssdp.Search\"),\n\t\tgoleak.IgnoreAnyFunction(\"github.com/pion/sctp.(*Stream).SetReadDeadline.func1\"),\n\t\t// Logging & Stats\n\t\tgoleak.IgnoreTopFunction(\"github.com/ipfs/go-log/v2/writer.(*MirrorWriter).logRoutine\"),\n\t\tgoleak.IgnoreTopFunction(\"go.opencensus.io/stats/view.(*worker).start\"),\n\t\tgoleak.IgnoreAnyFunction(\"github.com/jackpal/go-nat-pmp.(*Client).GetExternalAddress\"),\n\t)\n}\n\nfunc TestDialCircuitAddrWithWrappedResourceManager(t *testing.T) {\n\trelay, err := New(EnableRelayService(), ForceReachabilityPublic())\n\trequire.NoError(t, err)\n\tdefer relay.Close()\n\n\tpeerBehindRelay, err := New(\n\t\tEnableAutoRelayWithStaticRelays([]peer.AddrInfo{{ID: relay.ID(), Addrs: relay.Addrs()}}),\n\t\tForceReachabilityPrivate())\n\trequire.NoError(t, err)\n\tdefer peerBehindRelay.Close()\n\n\t// Use a wrapped resource manager to test that the circuit dialing works\n\t// with it. Look at the PR introducing this test for context\n\ttype wrappedRcmgr struct{ network.ResourceManager }\n\tmgr, err := rcmgr.NewResourceManager(rcmgr.NewFixedLimiter(rcmgr.DefaultLimits.AutoScale()))\n\trequire.NoError(t, err)\n\twmgr := wrappedRcmgr{mgr}\n\th, err := New(ResourceManager(wmgr))\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\n\th.Peerstore().AddAddrs(relay.ID(), relay.Addrs(), 10*time.Minute)\n\th.Peerstore().AddAddr(peerBehindRelay.ID(),\n\t\tma.StringCast(\n\t\t\tfmt.Sprintf(\"/p2p/%s/p2p-circuit\", relay.ID()),\n\t\t),\n\t\tpeerstore.TempAddrTTL,\n\t)\n\trequire.NoError(t, err)\n\n\trequire.Eventually(t, func() bool {\n\t\tctx, cancel := context.WithTimeout(context.Background(), 500*time.Millisecond)\n\t\tdefer cancel()\n\t\tres := <-ping.Ping(ctx, h, peerBehindRelay.ID())\n\t\treturn res.Error == nil\n\t}, 5*time.Second, 50*time.Millisecond)\n}\n\nfunc TestHostAddrsFactoryAddsCerthashes(t *testing.T) {\n\taddr := ma.StringCast(\"/ip4/1.2.3.4/udp/1/quic-v1/webtransport\")\n\th, err := New(\n\t\tAddrsFactory(func(m []ma.Multiaddr) []ma.Multiaddr {\n\t\t\treturn []ma.Multiaddr{addr}\n\t\t}),\n\t)\n\trequire.NoError(t, err)\n\trequire.Eventually(t, func() bool {\n\t\taddrs := h.Addrs()\n\t\tfor _, a := range addrs {\n\t\t\tfirst, last := ma.SplitFunc(a, func(c ma.Component) bool {\n\t\t\t\treturn c.Protocol().Code == ma.P_CERTHASH\n\t\t\t})\n\t\t\tif addr.Equal(first) && last != nil {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}, 5*time.Second, 50*time.Millisecond)\n\th.Close()\n}\n\nfunc newRandomPort(t *testing.T) string {\n\tt.Helper()\n\t// Find an available port\n\tc, err := net.ListenUDP(\"udp4\", &net.UDPAddr{IP: net.IPv4(127, 0, 0, 1), Port: 0})\n\trequire.NoError(t, err)\n\tc.LocalAddr().Network()\n\tipPort := netip.MustParseAddrPort(c.LocalAddr().String())\n\tport := strconv.Itoa(int(ipPort.Port()))\n\trequire.NoError(t, c.Close())\n\treturn port\n}\n\nfunc TestWebRTCReuseAddrWithQUIC(t *testing.T) {\n\tport := newRandomPort(t)\n\torder := [][]string{\n\t\t{\"/ip4/127.0.0.1/udp/\" + port + \"/quic-v1\", \"/ip4/127.0.0.1/udp/\" + port + \"/webrtc-direct\"},\n\t\t{\"/ip4/127.0.0.1/udp/\" + port + \"/webrtc-direct\", \"/ip4/127.0.0.1/udp/\" + port + \"/quic-v1\"},\n\t\t// We do not support WebRTC automatically reusing QUIC addresses if port is not specified, yet.\n\t\t// {\"/ip4/127.0.0.1/udp/0/webrtc-direct\", \"/ip4/127.0.0.1/udp/0/quic-v1\"},\n\t}\n\tfor i, addrs := range order {\n\t\tt.Run(\"Order \"+strconv.Itoa(i), func(t *testing.T) {\n\t\t\th1, err := New(ListenAddrStrings(addrs...), Transport(quic.NewTransport), Transport(libp2pwebrtc.New))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer h1.Close()\n\n\t\t\tseenPorts := make(map[string]struct{})\n\t\t\tfor _, addr := range h1.Addrs() {\n\t\t\t\ts, err := addr.ValueForProtocol(ma.P_UDP)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tseenPorts[s] = struct{}{}\n\t\t\t}\n\t\t\trequire.Len(t, seenPorts, 1)\n\n\t\t\tquicClient, err := New(NoListenAddrs, Transport(quic.NewTransport))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer quicClient.Close()\n\n\t\t\twebrtcClient, err := New(NoListenAddrs, Transport(libp2pwebrtc.New))\n\t\t\trequire.NoError(t, err)\n\t\t\tdefer webrtcClient.Close()\n\n\t\t\tfor _, client := range []host.Host{quicClient, webrtcClient} {\n\t\t\t\terr := client.Connect(context.Background(), peer.AddrInfo{ID: h1.ID(), Addrs: h1.Addrs()})\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\n\t\t\tt.Run(\"quic client can connect\", func(t *testing.T) {\n\t\t\t\tctx, cancel := context.WithCancel(context.Background())\n\t\t\t\tdefer cancel()\n\t\t\t\tp := ping.NewPingService(quicClient)\n\t\t\t\tresCh := p.Ping(ctx, h1.ID())\n\t\t\t\tres := <-resCh\n\t\t\t\trequire.NoError(t, res.Error)\n\t\t\t})\n\n\t\t\tt.Run(\"webrtc client can connect\", func(t *testing.T) {\n\t\t\t\tctx, cancel := context.WithCancel(context.Background())\n\t\t\t\tdefer cancel()\n\t\t\t\tp := ping.NewPingService(webrtcClient)\n\t\t\t\tresCh := p.Ping(ctx, h1.ID())\n\t\t\t\tres := <-resCh\n\t\t\t\trequire.NoError(t, res.Error)\n\t\t\t})\n\t\t})\n\t}\n\n\tswapPort := func(addrStrs []string, oldPort, newPort string) []string {\n\t\tout := make([]string, 0, len(addrStrs))\n\t\tfor _, addrStr := range addrStrs {\n\t\t\tout = append(out, strings.Replace(addrStr, oldPort, newPort, 1))\n\t\t}\n\t\treturn out\n\t}\n\n\tt.Run(\"setup with no reuseport. Should fail\", func(t *testing.T) {\n\t\toldPort := port\n\t\tnewPort := newRandomPort(t)\n\t\th1, err := New(ListenAddrStrings(swapPort(order[0], oldPort, newPort)...), Transport(quic.NewTransport), Transport(libp2pwebrtc.New), QUICReuse(quicreuse.NewConnManager, quicreuse.DisableReuseport()))\n\t\trequire.NoError(t, err) // It's a bug/feature that swarm.Listen does not error if at least one transport succeeds in listening.\n\t\tdefer h1.Close()\n\t\t// Check that webrtc did fail to listen\n\t\trequire.Equal(t, 1, len(h1.Addrs()))\n\t\trequire.Contains(t, h1.Addrs()[0].String(), \"quic-v1\")\n\t})\n\n\tt.Run(\"setup with autonat\", func(t *testing.T) {\n\t\toldPort := port\n\t\tnewPort := newRandomPort(t)\n\t\th1, err := New(EnableAutoNATv2(), ListenAddrStrings(swapPort(order[0], oldPort, newPort)...), Transport(quic.NewTransport), Transport(libp2pwebrtc.New), QUICReuse(quicreuse.NewConnManager, quicreuse.DisableReuseport()))\n\t\trequire.NoError(t, err) // It's a bug/feature that swarm.Listen does not error if at least one transport succeeds in listening.\n\t\tdefer h1.Close()\n\t\t// Check that webrtc did fail to listen\n\t\trequire.Equal(t, 1, len(h1.Addrs()))\n\t\trequire.Contains(t, h1.Addrs()[0].String(), \"quic-v1\")\n\t})\n}\n\nfunc TestUseCorrectTransportForDialOut(t *testing.T) {\n\tlistAddrOrder := [][]string{\n\t\t{\"/ip4/127.0.0.1/udp/0/quic-v1\", \"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\"},\n\t\t{\"/ip4/127.0.0.1/udp/0/quic-v1/webtransport\", \"/ip4/127.0.0.1/udp/0/quic-v1\"},\n\t\t{\"/ip4/0.0.0.0/udp/0/quic-v1\", \"/ip4/0.0.0.0/udp/0/quic-v1/webtransport\"},\n\t\t{\"/ip4/0.0.0.0/udp/0/quic-v1/webtransport\", \"/ip4/0.0.0.0/udp/0/quic-v1\"},\n\t}\n\tfor _, order := range listAddrOrder {\n\t\th1, err := New(ListenAddrStrings(order...), Transport(quic.NewTransport), Transport(webtransport.New))\n\t\trequire.NoError(t, err)\n\t\tt.Cleanup(func() {\n\t\t\th1.Close()\n\t\t})\n\n\t\tgo func() {\n\t\t\th1.SetStreamHandler(\"/echo-port\", func(s network.Stream) {\n\t\t\t\tm := s.Conn().RemoteMultiaddr()\n\t\t\t\tv, err := m.ValueForProtocol(ma.P_UDP)\n\t\t\t\tif err != nil {\n\t\t\t\t\ts.Reset()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\ts.Write([]byte(v))\n\t\t\t\ts.Close()\n\t\t\t})\n\t\t}()\n\n\t\tfor _, addr := range h1.Addrs() {\n\t\t\tt.Run(\"order \"+strings.Join(order, \",\")+\" Dial to \"+addr.String(), func(t *testing.T) {\n\t\t\t\th2, err := New(ListenAddrStrings(\n\t\t\t\t\t\"/ip4/0.0.0.0/udp/0/quic-v1\",\n\t\t\t\t\t\"/ip4/0.0.0.0/udp/0/quic-v1/webtransport\",\n\t\t\t\t), Transport(quic.NewTransport), Transport(webtransport.New))\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\tdefer h2.Close()\n\t\t\t\tt.Log(\"H2 Addrs\", h2.Addrs())\n\t\t\t\tvar myExpectedDialOutAddr ma.Multiaddr\n\t\t\t\taddrIsWT, _ := webtransport.IsWebtransportMultiaddr(addr)\n\t\t\t\tisLocal := func(a ma.Multiaddr) bool {\n\t\t\t\t\treturn strings.Contains(a.String(), \"127.0.0.1\")\n\t\t\t\t}\n\t\t\t\taddrIsLocal := isLocal(addr)\n\t\t\t\tfor _, a := range h2.Addrs() {\n\t\t\t\t\taIsWT, _ := webtransport.IsWebtransportMultiaddr(a)\n\t\t\t\t\tif addrIsWT == aIsWT && isLocal(a) == addrIsLocal {\n\t\t\t\t\t\tmyExpectedDialOutAddr = a\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\terr = h2.Connect(context.Background(), peer.AddrInfo{ID: h1.ID(), Addrs: []ma.Multiaddr{addr}})\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\ts, err := h2.NewStream(context.Background(), h1.ID(), \"/echo-port\")\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\tport, err := io.ReadAll(s)\n\t\t\t\trequire.NoError(t, err)\n\n\t\t\t\tmyExpectedPort, err := myExpectedDialOutAddr.ValueForProtocol(ma.P_UDP)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\trequire.Equal(t, myExpectedPort, string(port))\n\t\t\t})\n\t\t}\n\t}\n}\n\nfunc TestCircuitBehindWSS(t *testing.T) {\n\trelayTLSConf := getTLSConf(t, net.IPv4(127, 0, 0, 1), time.Now(), time.Now().Add(time.Hour))\n\tserverNameChan := make(chan string, 2) // Channel that returns what server names the client hello specified\n\trelayTLSConf.GetConfigForClient = func(chi *tls.ClientHelloInfo) (*tls.Config, error) {\n\t\tserverNameChan <- chi.ServerName\n\t\treturn relayTLSConf, nil\n\t}\n\n\trelay, err := New(\n\t\tEnableRelayService(),\n\t\tForceReachabilityPublic(),\n\t\tTransport(websocket.New, websocket.WithTLSConfig(relayTLSConf)),\n\t\tListenAddrStrings(\"/ip4/127.0.0.1/tcp/0/wss\"),\n\t)\n\trequire.NoError(t, err)\n\tdefer relay.Close()\n\n\trelayAddrPort, _ := relay.Addrs()[0].ValueForProtocol(ma.P_TCP)\n\trelayAddrWithSNIString := fmt.Sprintf(\n\t\t\"/dns4/localhost/tcp/%s/wss\", relayAddrPort,\n\t)\n\trelayAddrWithSNI := []ma.Multiaddr{ma.StringCast(relayAddrWithSNIString)}\n\n\th, err := New(\n\t\tNoListenAddrs,\n\t\tEnableRelay(),\n\t\tTransport(websocket.New, websocket.WithTLSClientConfig(&tls.Config{InsecureSkipVerify: true})),\n\t\tForceReachabilityPrivate())\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\n\tpeerBehindRelay, err := New(\n\t\tNoListenAddrs,\n\t\tTransport(websocket.New, websocket.WithTLSClientConfig(&tls.Config{InsecureSkipVerify: true})),\n\t\tEnableRelay(),\n\t\tEnableAutoRelayWithStaticRelays([]peer.AddrInfo{{ID: relay.ID(), Addrs: relayAddrWithSNI}}),\n\t\tForceReachabilityPrivate())\n\trequire.NoError(t, err)\n\tdefer peerBehindRelay.Close()\n\n\trequire.Equal(t,\n\t\t\"localhost\",\n\t\t<-serverNameChan, // The server connects to the relay\n\t)\n\n\t// Connect to the peer behind the relay\n\th.Connect(context.Background(), peer.AddrInfo{\n\t\tID: peerBehindRelay.ID(),\n\t\tAddrs: []ma.Multiaddr{ma.StringCast(\n\t\t\tfmt.Sprintf(\"%s/p2p/%s/p2p-circuit\", relayAddrWithSNIString, relay.ID()),\n\t\t)},\n\t})\n\trequire.NoError(t, err)\n\n\trequire.Equal(t,\n\t\t\"localhost\",\n\t\t<-serverNameChan, // The client connects to the relay and sends the SNI\n\t)\n}\n\n// getTLSConf is a helper to generate a self-signed TLS config\nfunc getTLSConf(t *testing.T, ip net.IP, start, end time.Time) *tls.Config {\n\tt.Helper()\n\tcertTempl := &x509.Certificate{\n\t\tSerialNumber:          big.NewInt(1234),\n\t\tSubject:               pkix.Name{Organization: []string{\"websocket\"}},\n\t\tNotBefore:             start,\n\t\tNotAfter:              end,\n\t\tIsCA:                  true,\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth, x509.ExtKeyUsageServerAuth},\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature | x509.KeyUsageCertSign,\n\t\tBasicConstraintsValid: true,\n\t\tIPAddresses:           []net.IP{ip},\n\t}\n\tpriv, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\n\trequire.NoError(t, err)\n\tcaBytes, err := x509.CreateCertificate(rand.Reader, certTempl, certTempl, &priv.PublicKey, priv)\n\trequire.NoError(t, err)\n\tcert, err := x509.ParseCertificate(caBytes)\n\trequire.NoError(t, err)\n\treturn &tls.Config{\n\t\tCertificates: []tls.Certificate{{\n\t\t\tCertificate: [][]byte{cert.Raw},\n\t\t\tPrivateKey:  priv,\n\t\t\tLeaf:        cert,\n\t\t}},\n\t}\n}\n\nfunc TestSharedTCPAddr(t *testing.T) {\n\th, err := New(\n\t\tShareTCPListener(),\n\t\tTransport(tcp.NewTCPTransport),\n\t\tTransport(websocket.New),\n\t\tListenAddrStrings(\"/ip4/0.0.0.0/tcp/8888\"),\n\t\tListenAddrStrings(\"/ip4/0.0.0.0/tcp/8888/ws\"),\n\t)\n\trequire.NoError(t, err)\n\tdefer h.Close()\n\tsawTCP := false\n\tsawWS := false\n\tfor _, addr := range h.Addrs() {\n\t\tif strings.HasSuffix(addr.String(), \"/tcp/8888\") {\n\t\t\tsawTCP = true\n\t\t}\n\t\tif strings.HasSuffix(addr.String(), \"/tcp/8888/ws\") {\n\t\t\tsawWS = true\n\t\t}\n\t}\n\trequire.True(t, sawTCP)\n\trequire.True(t, sawWS)\n\n\t_, err = New(\n\t\tShareTCPListener(),\n\t\tTransport(tcp.NewTCPTransport),\n\t\tTransport(websocket.New),\n\t\tPrivateNetwork(pnet.PSK([]byte{1, 2, 3})),\n\t)\n\trequire.ErrorContains(t, err, \"cannot use shared TCP listener with PSK\")\n}\n"
        },
        {
          "name": "limits.go",
          "type": "blob",
          "size": 4.4130859375,
          "content": "package libp2p\n\nimport (\n\t\"github.com/libp2p/go-libp2p/core/protocol\"\n\t\"github.com/libp2p/go-libp2p/p2p/host/autonat\"\n\trcmgr \"github.com/libp2p/go-libp2p/p2p/host/resource-manager\"\n\tcircuit \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/proto\"\n\trelayv2 \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/relay\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/holepunch\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/identify\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/ping\"\n)\n\n// SetDefaultServiceLimits sets the default limits for bundled libp2p services\nfunc SetDefaultServiceLimits(config *rcmgr.ScalingLimitConfig) {\n\t// identify\n\tconfig.AddServiceLimit(\n\t\tidentify.ServiceName,\n\t\trcmgr.BaseLimit{StreamsInbound: 64, StreamsOutbound: 64, Streams: 128, Memory: 4 << 20},\n\t\trcmgr.BaseLimitIncrease{StreamsInbound: 64, StreamsOutbound: 64, Streams: 128, Memory: 4 << 20},\n\t)\n\tconfig.AddServicePeerLimit(\n\t\tidentify.ServiceName,\n\t\trcmgr.BaseLimit{StreamsInbound: 16, StreamsOutbound: 16, Streams: 32, Memory: 1 << 20},\n\t\trcmgr.BaseLimitIncrease{},\n\t)\n\tfor _, id := range [...]protocol.ID{identify.ID, identify.IDPush} {\n\t\tconfig.AddProtocolLimit(\n\t\t\tid,\n\t\t\trcmgr.BaseLimit{StreamsInbound: 64, StreamsOutbound: 64, Streams: 128, Memory: 4 << 20},\n\t\t\trcmgr.BaseLimitIncrease{StreamsInbound: 64, StreamsOutbound: 64, Streams: 128, Memory: 4 << 20},\n\t\t)\n\t\tconfig.AddProtocolPeerLimit(\n\t\t\tid,\n\t\t\trcmgr.BaseLimit{StreamsInbound: 16, StreamsOutbound: 16, Streams: 32, Memory: 32 * (256<<20 + 16<<10)},\n\t\t\trcmgr.BaseLimitIncrease{},\n\t\t)\n\t}\n\n\t//  ping\n\taddServiceAndProtocolLimit(config,\n\t\tping.ServiceName, ping.ID,\n\t\trcmgr.BaseLimit{StreamsInbound: 64, StreamsOutbound: 64, Streams: 64, Memory: 4 << 20},\n\t\trcmgr.BaseLimitIncrease{StreamsInbound: 64, StreamsOutbound: 64, Streams: 64, Memory: 4 << 20},\n\t)\n\taddServicePeerAndProtocolPeerLimit(\n\t\tconfig,\n\t\tping.ServiceName, ping.ID,\n\t\trcmgr.BaseLimit{StreamsInbound: 2, StreamsOutbound: 3, Streams: 4, Memory: 32 * (256<<20 + 16<<10)},\n\t\trcmgr.BaseLimitIncrease{},\n\t)\n\n\t// autonat\n\taddServiceAndProtocolLimit(config,\n\t\tautonat.ServiceName, autonat.AutoNATProto,\n\t\trcmgr.BaseLimit{StreamsInbound: 64, StreamsOutbound: 64, Streams: 64, Memory: 4 << 20},\n\t\trcmgr.BaseLimitIncrease{StreamsInbound: 4, StreamsOutbound: 4, Streams: 4, Memory: 2 << 20},\n\t)\n\taddServicePeerAndProtocolPeerLimit(\n\t\tconfig,\n\t\tautonat.ServiceName, autonat.AutoNATProto,\n\t\trcmgr.BaseLimit{StreamsInbound: 2, StreamsOutbound: 2, Streams: 2, Memory: 1 << 20},\n\t\trcmgr.BaseLimitIncrease{},\n\t)\n\n\t// holepunch\n\taddServiceAndProtocolLimit(config,\n\t\tholepunch.ServiceName, holepunch.Protocol,\n\t\trcmgr.BaseLimit{StreamsInbound: 32, StreamsOutbound: 32, Streams: 64, Memory: 4 << 20},\n\t\trcmgr.BaseLimitIncrease{StreamsInbound: 8, StreamsOutbound: 8, Streams: 16, Memory: 4 << 20},\n\t)\n\taddServicePeerAndProtocolPeerLimit(config,\n\t\tholepunch.ServiceName, holepunch.Protocol,\n\t\trcmgr.BaseLimit{StreamsInbound: 2, StreamsOutbound: 2, Streams: 2, Memory: 1 << 20},\n\t\trcmgr.BaseLimitIncrease{},\n\t)\n\n\t// relay/v2\n\tconfig.AddServiceLimit(\n\t\trelayv2.ServiceName,\n\t\trcmgr.BaseLimit{StreamsInbound: 256, StreamsOutbound: 256, Streams: 256, Memory: 16 << 20},\n\t\trcmgr.BaseLimitIncrease{StreamsInbound: 256, StreamsOutbound: 256, Streams: 256, Memory: 16 << 20},\n\t)\n\tconfig.AddServicePeerLimit(\n\t\trelayv2.ServiceName,\n\t\trcmgr.BaseLimit{StreamsInbound: 64, StreamsOutbound: 64, Streams: 64, Memory: 1 << 20},\n\t\trcmgr.BaseLimitIncrease{},\n\t)\n\n\t// circuit protocols, both client and service\n\tfor _, proto := range [...]protocol.ID{circuit.ProtoIDv2Hop, circuit.ProtoIDv2Stop} {\n\t\tconfig.AddProtocolLimit(\n\t\t\tproto,\n\t\t\trcmgr.BaseLimit{StreamsInbound: 640, StreamsOutbound: 640, Streams: 640, Memory: 16 << 20},\n\t\t\trcmgr.BaseLimitIncrease{StreamsInbound: 640, StreamsOutbound: 640, Streams: 640, Memory: 16 << 20},\n\t\t)\n\t\tconfig.AddProtocolPeerLimit(\n\t\t\tproto,\n\t\t\trcmgr.BaseLimit{StreamsInbound: 128, StreamsOutbound: 128, Streams: 128, Memory: 32 << 20},\n\t\t\trcmgr.BaseLimitIncrease{},\n\t\t)\n\t}\n}\n\nfunc addServiceAndProtocolLimit(config *rcmgr.ScalingLimitConfig, service string, proto protocol.ID, limit rcmgr.BaseLimit, increase rcmgr.BaseLimitIncrease) {\n\tconfig.AddServiceLimit(service, limit, increase)\n\tconfig.AddProtocolLimit(proto, limit, increase)\n}\n\nfunc addServicePeerAndProtocolPeerLimit(config *rcmgr.ScalingLimitConfig, service string, proto protocol.ID, limit rcmgr.BaseLimit, increase rcmgr.BaseLimitIncrease) {\n\tconfig.AddServicePeerLimit(service, limit, increase)\n\tconfig.AddProtocolPeerLimit(proto, limit, increase)\n}\n"
        },
        {
          "name": "options.go",
          "type": "blob",
          "size": 20.990234375,
          "content": "package libp2p\n\n// This file contains all libp2p configuration options (except the defaults,\n// those are in defaults.go).\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/binary\"\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"time\"\n\n\t\"github.com/libp2p/go-libp2p/config\"\n\t\"github.com/libp2p/go-libp2p/core/connmgr\"\n\t\"github.com/libp2p/go-libp2p/core/crypto\"\n\t\"github.com/libp2p/go-libp2p/core/metrics\"\n\t\"github.com/libp2p/go-libp2p/core/network\"\n\t\"github.com/libp2p/go-libp2p/core/peer\"\n\t\"github.com/libp2p/go-libp2p/core/peerstore\"\n\t\"github.com/libp2p/go-libp2p/core/pnet\"\n\t\"github.com/libp2p/go-libp2p/core/protocol\"\n\t\"github.com/libp2p/go-libp2p/core/transport\"\n\t\"github.com/libp2p/go-libp2p/p2p/host/autorelay\"\n\tbhost \"github.com/libp2p/go-libp2p/p2p/host/basic\"\n\t\"github.com/libp2p/go-libp2p/p2p/net/swarm\"\n\ttptu \"github.com/libp2p/go-libp2p/p2p/net/upgrader\"\n\trelayv2 \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/relay\"\n\t\"github.com/libp2p/go-libp2p/p2p/protocol/holepunch\"\n\t\"github.com/libp2p/go-libp2p/p2p/transport/quicreuse\"\n\t\"github.com/prometheus/client_golang/prometheus\"\n\n\tma \"github.com/multiformats/go-multiaddr\"\n\t\"go.uber.org/fx\"\n)\n\n// ListenAddrStrings configures libp2p to listen on the given (unparsed)\n// addresses.\nfunc ListenAddrStrings(s ...string) Option {\n\treturn func(cfg *Config) error {\n\t\tfor _, addrstr := range s {\n\t\t\ta, err := ma.NewMultiaddr(addrstr)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcfg.ListenAddrs = append(cfg.ListenAddrs, a)\n\t\t}\n\t\treturn nil\n\t}\n}\n\n// ListenAddrs configures libp2p to listen on the given addresses.\nfunc ListenAddrs(addrs ...ma.Multiaddr) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.ListenAddrs = append(cfg.ListenAddrs, addrs...)\n\t\treturn nil\n\t}\n}\n\n// Security configures libp2p to use the given security transport (or transport\n// constructor).\n//\n// Name is the protocol name.\n//\n// The transport can be a constructed security.Transport or a function taking\n// any subset of this libp2p node's:\n// * Public key\n// * Private key\n// * Peer ID\n// * Host\n// * Network\n// * Peerstore\nfunc Security(name string, constructor interface{}) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.Insecure {\n\t\t\treturn fmt.Errorf(\"cannot use security transports with an insecure libp2p configuration\")\n\t\t}\n\t\tcfg.SecurityTransports = append(cfg.SecurityTransports, config.Security{ID: protocol.ID(name), Constructor: constructor})\n\t\treturn nil\n\t}\n}\n\n// NoSecurity is an option that completely disables all transport security.\n// It's incompatible with all other transport security protocols.\nvar NoSecurity Option = func(cfg *Config) error {\n\tif len(cfg.SecurityTransports) > 0 {\n\t\treturn fmt.Errorf(\"cannot use security transports with an insecure libp2p configuration\")\n\t}\n\tcfg.Insecure = true\n\treturn nil\n}\n\n// Muxer configures libp2p to use the given stream multiplexer.\n// name is the protocol name.\nfunc Muxer(name string, muxer network.Multiplexer) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.Muxers = append(cfg.Muxers, tptu.StreamMuxer{Muxer: muxer, ID: protocol.ID(name)})\n\t\treturn nil\n\t}\n}\n\nfunc QUICReuse(constructor interface{}, opts ...quicreuse.Option) Option {\n\treturn func(cfg *Config) error {\n\t\ttag := `group:\"quicreuseopts\"`\n\t\ttyp := reflect.ValueOf(constructor).Type()\n\t\tnumParams := typ.NumIn()\n\t\tisVariadic := typ.IsVariadic()\n\n\t\tif !isVariadic && len(opts) > 0 {\n\t\t\treturn errors.New(\"QUICReuse constructor doesn't take any options\")\n\t\t}\n\n\t\tvar params []string\n\t\tif isVariadic && len(opts) > 0 {\n\t\t\t// If there are options, apply the tag.\n\t\t\t// Since options are variadic, they have to be the last argument of the constructor.\n\t\t\tparams = make([]string, numParams)\n\t\t\tparams[len(params)-1] = tag\n\t\t}\n\n\t\tcfg.QUICReuse = append(cfg.QUICReuse, fx.Provide(fx.Annotate(constructor, fx.ParamTags(params...))))\n\t\tfor _, opt := range opts {\n\t\t\tcfg.QUICReuse = append(cfg.QUICReuse, fx.Supply(fx.Annotate(opt, fx.ResultTags(tag))))\n\t\t}\n\t\treturn nil\n\t}\n}\n\n// Transport configures libp2p to use the given transport (or transport\n// constructor).\n//\n// The transport can be a constructed transport.Transport or a function taking\n// any subset of this libp2p node's:\n// * Transport Upgrader (*tptu.Upgrader)\n// * Host\n// * Stream muxer (muxer.Transport)\n// * Security transport (security.Transport)\n// * Private network protector (pnet.Protector)\n// * Peer ID\n// * Private Key\n// * Public Key\n// * Address filter (filter.Filter)\n// * Peerstore\nfunc Transport(constructor interface{}, opts ...interface{}) Option {\n\treturn func(cfg *Config) error {\n\t\t// generate a random identifier, so that fx can associate the constructor with its options\n\t\tb := make([]byte, 8)\n\t\trand.Read(b)\n\t\tid := binary.BigEndian.Uint64(b)\n\n\t\ttag := fmt.Sprintf(`group:\"transportopt_%d\"`, id)\n\n\t\ttyp := reflect.ValueOf(constructor).Type()\n\t\tnumParams := typ.NumIn()\n\t\tisVariadic := typ.IsVariadic()\n\n\t\tif !isVariadic && len(opts) > 0 {\n\t\t\treturn errors.New(\"transport constructor doesn't take any options\")\n\t\t}\n\t\tif isVariadic && numParams >= 1 {\n\t\t\tparamType := typ.In(numParams - 1).Elem()\n\t\t\tfor _, opt := range opts {\n\t\t\t\tif typ := reflect.TypeOf(opt); !typ.AssignableTo(paramType) {\n\t\t\t\t\treturn fmt.Errorf(\"transport option of type %s not assignable to %s\", typ, paramType)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar params []string\n\t\tif isVariadic && len(opts) > 0 {\n\t\t\t// If there are transport options, apply the tag.\n\t\t\t// Since options are variadic, they have to be the last argument of the constructor.\n\t\t\tparams = make([]string, numParams)\n\t\t\tparams[len(params)-1] = tag\n\t\t}\n\n\t\tcfg.Transports = append(cfg.Transports, fx.Provide(\n\t\t\tfx.Annotate(\n\t\t\t\tconstructor,\n\t\t\t\tfx.ParamTags(params...),\n\t\t\t\tfx.As(new(transport.Transport)),\n\t\t\t\tfx.ResultTags(`group:\"transport\"`),\n\t\t\t),\n\t\t))\n\t\tfor _, opt := range opts {\n\t\t\tcfg.Transports = append(cfg.Transports, fx.Supply(\n\t\t\t\tfx.Annotate(\n\t\t\t\t\topt,\n\t\t\t\t\tfx.ResultTags(tag),\n\t\t\t\t),\n\t\t\t))\n\t\t}\n\t\treturn nil\n\t}\n}\n\n// Peerstore configures libp2p to use the given peerstore.\nfunc Peerstore(ps peerstore.Peerstore) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.Peerstore != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple peerstore options\")\n\t\t}\n\n\t\tcfg.Peerstore = ps\n\t\treturn nil\n\t}\n}\n\n// PrivateNetwork configures libp2p to use the given private network protector.\nfunc PrivateNetwork(psk pnet.PSK) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.PSK != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple private network options\")\n\t\t}\n\n\t\tcfg.PSK = psk\n\t\treturn nil\n\t}\n}\n\n// BandwidthReporter configures libp2p to use the given bandwidth reporter.\nfunc BandwidthReporter(rep metrics.Reporter) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.Reporter != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple bandwidth reporter options\")\n\t\t}\n\n\t\tcfg.Reporter = rep\n\t\treturn nil\n\t}\n}\n\n// Identity configures libp2p to use the given private key to identify itself.\nfunc Identity(sk crypto.PrivKey) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.PeerKey != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple identities\")\n\t\t}\n\n\t\tcfg.PeerKey = sk\n\t\treturn nil\n\t}\n}\n\n// ConnectionManager configures libp2p to use the given connection manager.\n//\n// The current \"standard\" connection manager lives in github.com/libp2p/go-libp2p-connmgr. See\n// https://pkg.go.dev/github.com/libp2p/go-libp2p-connmgr?utm_source=godoc#NewConnManager.\nfunc ConnectionManager(connman connmgr.ConnManager) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.ConnManager != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple connection managers\")\n\t\t}\n\t\tcfg.ConnManager = connman\n\t\treturn nil\n\t}\n}\n\n// AddrsFactory configures libp2p to use the given address factory.\nfunc AddrsFactory(factory config.AddrsFactory) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.AddrsFactory != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple address factories\")\n\t\t}\n\t\tcfg.AddrsFactory = factory\n\t\treturn nil\n\t}\n}\n\n// EnableRelay configures libp2p to enable the relay transport.\n// This option only configures libp2p to accept inbound connections from relays\n// and make outbound connections_through_ relays when requested by the remote peer.\n// This option supports both circuit v1 and v2 connections.\n// (default: enabled)\nfunc EnableRelay() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.RelayCustom = true\n\t\tcfg.Relay = true\n\t\treturn nil\n\t}\n}\n\n// DisableRelay configures libp2p to disable the relay transport.\nfunc DisableRelay() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.RelayCustom = true\n\t\tcfg.Relay = false\n\t\treturn nil\n\t}\n}\n\n// EnableRelayService configures libp2p to run a circuit v2 relay,\n// if we detect that we're publicly reachable.\nfunc EnableRelayService(opts ...relayv2.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableRelayService = true\n\t\tcfg.RelayServiceOpts = opts\n\t\treturn nil\n\t}\n}\n\n// EnableAutoRelay configures libp2p to enable the AutoRelay subsystem.\n//\n// Dependencies:\n//   - Relay (enabled by default)\n//   - Either:\n//     1. A list of static relays\n//     2. A PeerSource function that provides a chan of relays. See `autorelay.WithPeerSource`\n//\n// This subsystem performs automatic address rewriting to advertise relay addresses when it\n// detects that the node is publicly unreachable (e.g. behind a NAT).\n//\n// Deprecated: Use EnableAutoRelayWithStaticRelays or EnableAutoRelayWithPeerSource\nfunc EnableAutoRelay(opts ...autorelay.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableAutoRelay = true\n\t\tcfg.AutoRelayOpts = opts\n\t\treturn nil\n\t}\n}\n\n// EnableAutoRelayWithStaticRelays configures libp2p to enable the AutoRelay subsystem using\n// the provided relays as relay candidates.\n// This subsystem performs automatic address rewriting to advertise relay addresses when it\n// detects that the node is publicly unreachable (e.g. behind a NAT).\nfunc EnableAutoRelayWithStaticRelays(static []peer.AddrInfo, opts ...autorelay.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableAutoRelay = true\n\t\tcfg.AutoRelayOpts = append([]autorelay.Option{autorelay.WithStaticRelays(static)}, opts...)\n\t\treturn nil\n\t}\n}\n\n// EnableAutoRelayWithPeerSource configures libp2p to enable the AutoRelay\n// subsystem using the provided PeerSource callback to get more relay\n// candidates.  This subsystem performs automatic address rewriting to advertise\n// relay addresses when it detects that the node is publicly unreachable (e.g.\n// behind a NAT).\nfunc EnableAutoRelayWithPeerSource(peerSource autorelay.PeerSource, opts ...autorelay.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableAutoRelay = true\n\t\tcfg.AutoRelayOpts = append([]autorelay.Option{autorelay.WithPeerSource(peerSource)}, opts...)\n\t\treturn nil\n\t}\n}\n\n// ForceReachabilityPublic overrides automatic reachability detection in the AutoNAT subsystem,\n// forcing the local node to believe it is reachable externally.\nfunc ForceReachabilityPublic() Option {\n\treturn func(cfg *Config) error {\n\t\tpublic := network.ReachabilityPublic\n\t\tcfg.AutoNATConfig.ForceReachability = &public\n\t\treturn nil\n\t}\n}\n\n// ForceReachabilityPrivate overrides automatic reachability detection in the AutoNAT subsystem,\n// forceing the local node to believe it is behind a NAT and not reachable externally.\nfunc ForceReachabilityPrivate() Option {\n\treturn func(cfg *Config) error {\n\t\tprivate := network.ReachabilityPrivate\n\t\tcfg.AutoNATConfig.ForceReachability = &private\n\t\treturn nil\n\t}\n}\n\n// EnableNATService configures libp2p to provide a service to peers for determining\n// their reachability status. When enabled, the host will attempt to dial back\n// to peers, and then tell them if it was successful in making such connections.\nfunc EnableNATService() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.AutoNATConfig.EnableService = true\n\t\treturn nil\n\t}\n}\n\n// AutoNATServiceRateLimit changes the default rate limiting configured in helping\n// other peers determine their reachability status. When set, the host will limit\n// the number of requests it responds to in each 60 second period to the set\n// numbers. A value of '0' disables throttling.\nfunc AutoNATServiceRateLimit(global, perPeer int, interval time.Duration) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.AutoNATConfig.ThrottleGlobalLimit = global\n\t\tcfg.AutoNATConfig.ThrottlePeerLimit = perPeer\n\t\tcfg.AutoNATConfig.ThrottleInterval = interval\n\t\treturn nil\n\t}\n}\n\n// ConnectionGater configures libp2p to use the given ConnectionGater\n// to actively reject inbound/outbound connections based on the lifecycle stage\n// of the connection.\n//\n// For more information, refer to go-libp2p/core.ConnectionGater.\nfunc ConnectionGater(cg connmgr.ConnectionGater) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.ConnectionGater != nil {\n\t\t\treturn errors.New(\"cannot configure multiple connection gaters, or cannot configure both Filters and ConnectionGater\")\n\t\t}\n\t\tcfg.ConnectionGater = cg\n\t\treturn nil\n\t}\n}\n\n// ResourceManager configures libp2p to use the given ResourceManager.\n// When using the p2p/host/resource-manager implementation of the ResourceManager interface,\n// it is recommended to set limits for libp2p protocol by calling SetDefaultServiceLimits.\nfunc ResourceManager(rcmgr network.ResourceManager) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.ResourceManager != nil {\n\t\t\treturn errors.New(\"cannot configure multiple resource managers\")\n\t\t}\n\t\tcfg.ResourceManager = rcmgr\n\t\treturn nil\n\t}\n}\n\n// NATPortMap configures libp2p to use the default NATManager. The default\n// NATManager will attempt to open a port in your network's firewall using UPnP.\nfunc NATPortMap() Option {\n\treturn NATManager(bhost.NewNATManager)\n}\n\n// NATManager will configure libp2p to use the requested NATManager. This\n// function should be passed a NATManager *constructor* that takes a libp2p Network.\nfunc NATManager(nm config.NATManagerC) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.NATManager != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple NATManagers\")\n\t\t}\n\t\tcfg.NATManager = nm\n\t\treturn nil\n\t}\n}\n\n// Ping will configure libp2p to support the ping service; enable by default.\nfunc Ping(enable bool) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.DisablePing = !enable\n\t\treturn nil\n\t}\n}\n\n// Routing will configure libp2p to use routing.\nfunc Routing(rt config.RoutingC) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.Routing != nil {\n\t\t\treturn fmt.Errorf(\"cannot specify multiple routing options\")\n\t\t}\n\t\tcfg.Routing = rt\n\t\treturn nil\n\t}\n}\n\n// NoListenAddrs will configure libp2p to not listen by default.\n//\n// This will both clear any configured listen addrs and prevent libp2p from\n// applying the default listen address option. It also disables relay, unless the\n// user explicitly specifies with an option, as the transport creates an implicit\n// listen address that would make the node dialable through any relay it was connected to.\nvar NoListenAddrs = func(cfg *Config) error {\n\tcfg.ListenAddrs = []ma.Multiaddr{}\n\tif !cfg.RelayCustom {\n\t\tcfg.RelayCustom = true\n\t\tcfg.Relay = false\n\t}\n\treturn nil\n}\n\n// NoTransports will configure libp2p to not enable any transports.\n//\n// This will both clear any configured transports (specified in prior libp2p\n// options) and prevent libp2p from applying the default transports.\nvar NoTransports = func(cfg *Config) error {\n\tcfg.Transports = []fx.Option{}\n\treturn nil\n}\n\n// ProtocolVersion sets the protocolVersion string required by the\n// libp2p Identify protocol.\nfunc ProtocolVersion(s string) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.ProtocolVersion = s\n\t\treturn nil\n\t}\n}\n\n// UserAgent sets the libp2p user-agent sent along with the identify protocol\nfunc UserAgent(userAgent string) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.UserAgent = userAgent\n\t\treturn nil\n\t}\n}\n\n// MultiaddrResolver sets the libp2p dns resolver\nfunc MultiaddrResolver(rslv network.MultiaddrDNSResolver) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.MultiaddrResolver = rslv\n\t\treturn nil\n\t}\n}\n\n// Experimental\n// EnableHolePunching enables NAT traversal by enabling NATT'd peers to both initiate and respond to hole punching attempts\n// to create direct/NAT-traversed connections with other peers. (default: disabled)\n//\n// Dependencies:\n//   - Relay (enabled by default)\n//\n// This subsystem performs two functions:\n//\n//  1. On receiving an inbound Relay connection, it attempts to create a direct connection with the remote peer\n//     by initiating and co-ordinating a hole punch over the Relayed connection.\n//  2. If a peer sees a request to co-ordinate a hole punch on an outbound Relay connection,\n//     it will participate in the hole-punch to create a direct connection with the remote peer.\n//\n// If the hole punch is successful, all new streams will thereafter be created on the hole-punched connection.\n// The Relayed connection will eventually be closed after a grace period.\n//\n// All existing indefinite long-lived streams on the Relayed connection will have to re-opened on the hole-punched connection by the user.\n// Users can make use of the `Connected`/`Disconnected` notifications emitted by the Network for this purpose.\n//\n// It is not mandatory but nice to also enable the `AutoRelay` option (See `EnableAutoRelay`)\n// so the peer can discover and connect to Relay servers  if it discovers that it is NATT'd and has private reachability via AutoNAT.\n// This will then enable it to advertise Relay addresses which can be used to accept inbound Relay connections to then co-ordinate\n// a hole punch.\n//\n// If `EnableAutoRelay` is configured and the user is confident that the peer has private reachability/is NATT'd,\n// the `ForceReachabilityPrivate` option can be configured to short-circuit reachability discovery via AutoNAT\n// so the peer can immediately start connecting to Relay servers.\n//\n// If `EnableAutoRelay` is configured, the `StaticRelays` option can be used to configure a static set of Relay servers\n// for `AutoRelay` to connect to so that it does not need to discover Relay servers via Routing.\nfunc EnableHolePunching(opts ...holepunch.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableHolePunching = true\n\t\tcfg.HolePunchingOptions = opts\n\t\treturn nil\n\t}\n}\n\nfunc WithDialTimeout(t time.Duration) Option {\n\treturn func(cfg *Config) error {\n\t\tif t <= 0 {\n\t\t\treturn errors.New(\"dial timeout needs to be non-negative\")\n\t\t}\n\t\tcfg.DialTimeout = t\n\t\treturn nil\n\t}\n}\n\n// DisableMetrics configures libp2p to disable prometheus metrics\nfunc DisableMetrics() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.DisableMetrics = true\n\t\treturn nil\n\t}\n}\n\n// PrometheusRegisterer configures libp2p to use reg as the Registerer for all metrics subsystems\nfunc PrometheusRegisterer(reg prometheus.Registerer) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.DisableMetrics {\n\t\t\treturn errors.New(\"cannot set registerer when metrics are disabled\")\n\t\t}\n\t\tif cfg.PrometheusRegisterer != nil {\n\t\t\treturn errors.New(\"registerer already set\")\n\t\t}\n\t\tif reg == nil {\n\t\t\treturn errors.New(\"registerer cannot be nil\")\n\t\t}\n\t\tcfg.PrometheusRegisterer = reg\n\t\treturn nil\n\t}\n}\n\n// DialRanker configures libp2p to use d as the dial ranker. To enable smart\n// dialing use `swarm.DefaultDialRanker`. use `swarm.NoDelayDialRanker` to\n// disable smart dialing.\n//\n// Deprecated: use SwarmOpts(swarm.WithDialRanker(d)) instead\nfunc DialRanker(d network.DialRanker) Option {\n\treturn func(cfg *Config) error {\n\t\tif cfg.DialRanker != nil {\n\t\t\treturn errors.New(\"dial ranker already configured\")\n\t\t}\n\t\tcfg.DialRanker = d\n\t\treturn nil\n\t}\n}\n\n// SwarmOpts configures libp2p to use swarm with opts\nfunc SwarmOpts(opts ...swarm.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.SwarmOpts = opts\n\t\treturn nil\n\t}\n}\n\n// DisableIdentifyAddressDiscovery disables address discovery using peer provided observed addresses\n// in identify. If you know your public addresses upfront, the recommended way is to use\n// AddressFactory to provide the external adddress to the host and use this option to disable\n// discovery from identify.\nfunc DisableIdentifyAddressDiscovery() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.DisableIdentifyAddressDiscovery = true\n\t\treturn nil\n\t}\n}\n\n// EnableAutoNATv2 enables autonat v2\nfunc EnableAutoNATv2() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.EnableAutoNATv2 = true\n\t\treturn nil\n\t}\n}\n\n// UDPBlackHoleSuccessCounter configures libp2p to use f as the black hole filter for UDP addrs\nfunc UDPBlackHoleSuccessCounter(f *swarm.BlackHoleSuccessCounter) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.UDPBlackHoleSuccessCounter = f\n\t\tcfg.CustomUDPBlackHoleSuccessCounter = true\n\t\treturn nil\n\t}\n}\n\n// IPv6BlackHoleSuccessCounter configures libp2p to use f as the black hole filter for IPv6 addrs\nfunc IPv6BlackHoleSuccessCounter(f *swarm.BlackHoleSuccessCounter) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.IPv6BlackHoleSuccessCounter = f\n\t\tcfg.CustomIPv6BlackHoleSuccessCounter = true\n\t\treturn nil\n\t}\n}\n\n// WithFxOption adds a user provided fx.Option to the libp2p constructor.\n// Experimental: This option is subject to change or removal.\nfunc WithFxOption(opts ...fx.Option) Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.UserFxOptions = append(cfg.UserFxOptions, opts...)\n\t\treturn nil\n\t}\n}\n\n// ShareTCPListener shares the same listen address between TCP and Websocket\n// transports. This lets both transports use the same TCP port.\n//\n// Currently this behavior is Opt-in. In a future release this will be the\n// default, and this option will be removed.\nfunc ShareTCPListener() Option {\n\treturn func(cfg *Config) error {\n\t\tcfg.ShareTCPListener = true\n\t\treturn nil\n\t}\n}\n"
        },
        {
          "name": "options_filter.go",
          "type": "blob",
          "size": 1.158203125,
          "content": "package libp2p\n\nimport (\n\t\"github.com/libp2p/go-libp2p/core/connmgr\"\n\t\"github.com/libp2p/go-libp2p/core/control\"\n\t\"github.com/libp2p/go-libp2p/core/network\"\n\t\"github.com/libp2p/go-libp2p/core/peer\"\n\n\tma \"github.com/multiformats/go-multiaddr\"\n)\n\n// filtersConnectionGater is an adapter that turns multiaddr.Filter into a\n// connmgr.ConnectionGater.\ntype filtersConnectionGater ma.Filters\n\nvar _ connmgr.ConnectionGater = (*filtersConnectionGater)(nil)\n\nfunc (f *filtersConnectionGater) InterceptAddrDial(_ peer.ID, addr ma.Multiaddr) (allow bool) {\n\treturn !(*ma.Filters)(f).AddrBlocked(addr)\n}\n\nfunc (f *filtersConnectionGater) InterceptPeerDial(p peer.ID) (allow bool) {\n\treturn true\n}\n\nfunc (f *filtersConnectionGater) InterceptAccept(connAddr network.ConnMultiaddrs) (allow bool) {\n\treturn !(*ma.Filters)(f).AddrBlocked(connAddr.RemoteMultiaddr())\n}\n\nfunc (f *filtersConnectionGater) InterceptSecured(_ network.Direction, _ peer.ID, connAddr network.ConnMultiaddrs) (allow bool) {\n\treturn !(*ma.Filters)(f).AddrBlocked(connAddr.RemoteMultiaddr())\n}\n\nfunc (f *filtersConnectionGater) InterceptUpgraded(_ network.Conn) (allow bool, reason control.DisconnectReason) {\n\treturn true, 0\n}\n"
        },
        {
          "name": "p2p",
          "type": "tree",
          "content": null
        },
        {
          "name": "proto_test.go",
          "type": "blob",
          "size": 1.4306640625,
          "content": "package libp2p_test\n\nimport (\n\t\"testing\"\n\n\t// Import all protobuf packages to ensure their `init` functions run.\n\t// This may not be strictly necessary if they are imported in the `libp2p` package, but\n\t// we do it here in case the imports in non-test files change.\n\t_ \"github.com/libp2p/go-libp2p/core/crypto/pb\"\n\t_ \"github.com/libp2p/go-libp2p/core/peer/pb\"\n\t_ \"github.com/libp2p/go-libp2p/core/record/pb\"\n\t_ \"github.com/libp2p/go-libp2p/core/sec/insecure/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/host/autonat/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/host/peerstore/pstoreds/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/protocol/autonatv2/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/protocol/holepunch/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/protocol/identify/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/security/noise/pb\"\n\t_ \"github.com/libp2p/go-libp2p/p2p/transport/webrtc/pb\"\n\t\"google.golang.org/protobuf/reflect/protoreflect\"\n\t\"google.golang.org/protobuf/reflect/protoregistry\"\n)\n\n//go:generate scripts/gen-proto.sh .\n\nfunc TestProtoImportsAndPathsAreConsistent(t *testing.T) {\n\tprotoregistry.GlobalFiles.RangeFiles(func(fd protoreflect.FileDescriptor) bool {\n\t\timports := fd.Imports()\n\t\tfor i := 0; i < imports.Len(); i++ {\n\t\t\tpath := imports.Get(i).Path()\n\t\t\tif _, err := protoregistry.GlobalFiles.FindFileByPath(path); err != nil {\n\t\t\t\tt.Fatalf(\"find dependency %s: %v\", path, err)\n\t\t\t}\n\t\t}\n\t\treturn true\n\t})\n}\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-plans",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools.go",
          "type": "blob",
          "size": 0.1591796875,
          "content": "//go:build tools\n\npackage libp2p\n\nimport (\n\t_ \"go.uber.org/mock/mockgen\"\n\t_ \"golang.org/x/tools/cmd/goimports\"\n\t_ \"google.golang.org/protobuf/cmd/protoc-gen-go\"\n)\n"
        },
        {
          "name": "version.json",
          "type": "blob",
          "size": 0.0263671875,
          "content": "{\n  \"version\": \"v0.38.1\"\n}\n"
        }
      ]
    }
  ]
}