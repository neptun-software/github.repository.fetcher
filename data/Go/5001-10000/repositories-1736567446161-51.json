{
  "metadata": {
    "timestamp": 1736567446161,
    "page": 51,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hybridgroup/gobot",
      "stars": 9032,
      "defaultBranch": "release",
      "files": [
        {
          "name": ".chglog",
          "type": "tree",
          "content": null
        },
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1748046875,
          "content": ".sass-cache\n*.test\n*.swp\n*.snap\nprofile.cov\ncount.out\n/parts\n/prime\n/stage\nvendor/\noutput/\n.idea/\ncoverage.txt\n.chglog/chglog_tmp*.md\n.chglog/CHANGELOG.tpl*.md\n.chglog/config.yml\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 8.234375,
          "content": "# note: GolangCI-Lint also searches for config files in all directories from the directory of the first analyzed path up to the root.\nrun:\n  build-tags:\n    - utils\n\n  # Timeout for analysis, e.g. 30s, 5m.\n  # gobot is very expensive, on a machine with heavy load it takes some minutes\n  # for first run or after empty the cache by 'golangci-lint cache clean'\n  # Default: 1m\n  timeout: 5m\n\n  # If set we pass it to \"go list -mod={option}\". From \"go help modules\":\n  # If invoked with -mod=readonly, the go command is disallowed from the implicit\n  # automatic updating of go.mod described above. Instead, it fails when any changes\n  # to go.mod are needed. This setting is most useful to check that go.mod does\n  # not need updates, such as in a continuous integration and testing system.\n  # If invoked with -mod=vendor, the go command assumes that the vendor\n  # directory holds the correct copies of dependencies and ignores\n  # the dependency descriptions in go.mod.\n  #\n  # Allowed values: readonly|vendor|mod\n  # By default, it isn't set.\n  modules-download-mode: readonly\n\nissues:\n  # Enables skipping of directories:\n  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$\n  # Default: true\n  exclude-dirs-use-default: false\n\n  # note: folders/files can not be excluded from \"typecheck\" anymore since v1.61.0\n\nlinters:\n  # currently active linters:\n  #\n  # INFO [lintersdb] Active 67 linters: [asasalint asciicheck bidichk bodyclose canonicalheader containedctx\n  # contextcheck decorder depguard dogsled dupword durationcheck errcheck errchkjson errorlint fatcontext\n  # forcetypeassert gci gocheckcompilerdirectives gochecknoinits gochecksumtype gocritic gofmt gofumpt goimports\n  # gomoddirectives gomodguard goprintffuncname gosec gosimple govet grouper inamedparam ineffassign lll makezero\n  # mirror misspell mnd musttag nakedret nilerr nilnil noctx nolintlint nonamedreturns nosprintfhostport perfsprint\n  # prealloc predeclared protogetter reassign revive sloglint spancheck staticcheck tagalign tenv testableexamples\n  # testifylint thelper tparallel unconvert unparam unused usestdlibvars wastedassign]\n\n  enable-all: true\n\n  # https://golangci-lint.run/usage/linters/#enabled-by-default\n  # note: typecheck can not be disabled, it is used to check code compilation\n  disable:\n    # deprecated:\n    - exportloopref # Since Go1.22 (loopvar) this linter is no longer relevant. Replaced by copyloopvar\n    - gomnd # The linter has been renamed. Replaced by mnd.\n    # not used for this go version: none\n    # not used for any reason\n    - err113 # not used (we allow error creation at return statement)\n    - execinquery # not needed (no sql)\n    - exhaustive # not used (we allow incomplete usage of enum switch, e.g. with default case)\n    - forbidigo # not used (we allow print statements)\n    - ginkgolinter # not needed (enforces standards of using ginkgo and gomega)\n    - gochecknoglobals # not used (we allow definition of unexposed variables at top level)\n    - godot # not used (seems to be counting peas)\n    - godox # not used (we have many TODOs, so not useful)\n    - gosmopolitan # not needed (report i18n/l10n anti-patterns)\n    - importas # not needed (there is no alias rule at the moment)\n    - ireturn # not used (we allow return interfaces)\n    - loggercheck # not needed (relates to kitlog, klog, logr, zap)\n    - paralleltest # not used\n    - promlinter # not needed (prometheus metrics naming)\n    - rowserrcheck # not needed (sql related)\n    - sqlclosecheck # not needed (sql related)\n    - testpackage # not needed, we use the same name for test package to have access to unexposed items\n    - wrapcheck # not needed (we allow errors from interface methods)\n    - zerologlint # not needed (related to zerolog package)\n    # useful for the future\n    - cyclop # useful with some tweeks (better understandable code), see also gocyclo\n    - dupl # useful with some tweeks (reduce bugs and lines of code)\n    - errname # useful for common style\n    - exhaustruct # useful with some exclusions for existing code (e.g. mavlink/common/common.go)\n    - funlen # useful with some tweeks (reduce bugs, simplify code, better understandable code)\n    - gocognit # useful with some tweeks (better understandable code)\n    - goconst # useful (reduce bugs)\n    - gocyclo # useful with some tweeks (better understandable code)\n    - goheader # useful, if we introduce a common header (e.g. for copyright)\n    - interfacebloat # useful with some exclusions at usage of external packages\n    - intrange # introduced with go 1.22, will simplify the range syntax\n    - maintidx # useful with some tweeks (better understandable code), maybe use instead \"gocyclo\", \"gocognit\" , \"cyclop\"\n    - mnd # useful with some exclusions for existing code (e.g. mavlink.go)\n    - nestif # useful (reduce bugs, simplify code, better understandable code)\n    - nlreturn # more common style, but could become annoying\n    - stylecheck # useful with some tweaking (e.g. underscores in names should be allowed - we use it for constants retrieved from C/C++)\n    - tagliatelle # maybe useful with some tweaking or excluding\n    - varnamelen # maybe useful with some tweaking, but many findings\n    - whitespace # more common style, but could become annoying\n    - wsl # more common style, but could become annoying\n\nlinters-settings:\n  depguard:\n    # Rules to apply.\n    #\n    # Variables:\n    # - File Variables\n    #   you can still use and exclamation mark ! in front of a variable to say not to use it.\n    #   Example !$test will match any file that is not a go test file.\n    #\n    #   `$all` - matches all go files\n    #   `$test` - matches all go test files\n    #\n    # - Package Variables\n    #\n    #  `$gostd` - matches all of go's standard library (Pulled from `GOROOT`)\n    #\n    # Default: Only allow $gostd in all files.\n    rules:\n      main:\n        # Packages that are not allowed where the value is a suggestion.\n        deny:\n          - pkg: \"github.com/pkg/errors\"\n            desc: Should be replaced by standard lib errors package\n\n  dupword:\n    # Keywords for detecting duplicate words.\n    # If this list is not empty, only the words defined in this list will be detected.\n    # Default: []\n    keywords:\n      - \"the\"\n      - \"and\"\n      - \"a\"\n\n  errorlint:\n    # Default: true\n    # %v should be used by default over %w, see https://github.com/uber-go/guide/blob/master/style.md#error-wrapping\n    errorf: false\n    # Permit more than 1 %w verb, valid per Go 1.20 (Requires errorf:true)\n    # Default: true\n    errorf-multi: false\n\n  gci:\n    # Section configuration to compare against.\n    # Section names are case-insensitive and may contain parameters in ().\n    # The default order of sections is `standard > default > custom > blank > dot`,\n    # If `custom-order` is `true`, it follows the order of `sections` option.\n    # Default: [\"standard\", \"default\"]\n    sections:\n      - standard # Standard section: captures all standard packages.\n      - default # Default section: contains all imports that could not be matched to another section type.\n      - prefix(gobot.io/x/gobot/) # Custom section: groups all imports with the specified Prefix.\n      #- blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.\n      #- dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.\n    # Enable custom order of sections.\n    # If `true`, make the section order the same as the order of `sections`.\n    # Default: false\n    custom-order: true\n\n  gocritic:\n    disabled-checks:\n      - assignOp # very opinionated\n      - appendAssign # mostly used by intention\n\n  nolintlint:\n    # Enable to require an explanation of nonzero length after each nolint directive.\n    # Default: false\n    require-explanation: true\n    # Enable to require nolint directives to mention the specific linter being suppressed.\n    # Default: false\n    require-specific: true\n\n  perfsprint:\n    # Optimizes `fmt.Errorf`.\n    # Default: true\n    errorf: false\n    # Optimizes `fmt.Sprintf` with only one argument\n    # Default: true\n    sprintf1: false\n\n  revive:\n    rules:\n      # https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md#unexported-return\n      # disable this rule, because sometimes it has its justification\n      - name: unexported-return\n        severity: warning\n        disabled: true\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 65.4853515625,
          "content": "# CHANGELOG\n\n## [Unreleased](https://github.com/hybridgroup/gobot/compare/v2.4.0...HEAD)\n\n## [v2.4.0](https://github.com/hybridgroup/gobot/compare/v2.3.0...v2.4.0) (2024-11-05)\n\n### Bebop\n\n* fix concurrent map writes ([#1063](https://github.com/hybridgroup/gobot/issues/1063))\n\n### Ble\n\n* add support for functional options, add tests ([#1059](https://github.com/hybridgroup/gobot/issues/1059))\n* introduce in drivers folder ([#1057](https://github.com/hybridgroup/gobot/issues/1057))\n* **client:** add scan timout ([#1051](https://github.com/hybridgroup/gobot/issues/1051))\n* **module:** update tinygo.org/x/bluetooth to v0.10 and adapt code ([#1084](https://github.com/hybridgroup/gobot/issues/1084))\n\n### Build\n\n* **go, deps:** switch to Go 1.22 and update modules, linter v1.61.0 and adapt code ([#1093](https://github.com/hybridgroup/gobot/issues/1093),[#1092](https://github.com/hybridgroup/gobot/issues/1092))\n* **go, deps:** switch to Go 1.20 and update modules ([#1067](https://github.com/hybridgroup/gobot/issues/1067))\n* **linter:** update linter to v1.56.1 and fix issues ([#1068](https://github.com/hybridgroup/gobot/issues/1068))\n\n### Doc\n\n* update links to release or tagged branch ([#1069](https://github.com/hybridgroup/gobot/issues/1069))\n* **core:** prepare for release v2.4.0\n\n### Examples\n\n* fix missing checks of return values ([#1060](https://github.com/hybridgroup/gobot/issues/1060))\n\n### Gobot\n\n* rename Master to Manager ([#1070](https://github.com/hybridgroup/gobot/issues/1070))\n\n### Megapi\n\n* use serialport adaptor and move driver to drivers/serial ([#1062](https://github.com/hybridgroup/gobot/issues/1062))\n\n### Neurosky\n\n* use serialport adaptor and move driver to drivers/serial ([#1061](https://github.com/hybridgroup/gobot/issues/1061))\n\n### Test\n\n* try to stabilize eventer tests ([#1066](https://github.com/hybridgroup/gobot/issues/1066))\n* try to stabilize firmata tests ([#1097](https://github.com/hybridgroup/gobot/issues/1097))\n\n## [v2.3.0](https://github.com/hybridgroup/gobot/compare/v2.2.0...v2.3.0) (2024-01-06)\n\n### Adaptors\n\n* **pwm:** introduce scale option for servo ([#1046](https://github.com/hybridgroup/gobot/issues/1046))\n* **analogpins:** add a generic analog pin adaptor ([#1041](https://github.com/hybridgroup/gobot/issues/1041))\n\n### Aio\n\n* fix data race in AnalogSensorDriver ([#1024](https://github.com/hybridgroup/gobot/issues/1024))\n* **all:** introduce functional options ([#1039](https://github.com/hybridgroup/gobot/issues/1039))\n* **analog sensor:** fix deadlock in cyclic reading ([#1042](https://github.com/hybridgroup/gobot/issues/1042))\n* **thermalzone:** add driver for read a thermalzone from system ([#1040](https://github.com/hybridgroup/gobot/issues/1040))\n\n### Build\n\n* **go, deps:** update modules ([#1047](https://github.com/hybridgroup/gobot/issues/1047), [#1052](https://github.com/hybridgroup/gobot/issues/1052))\n\n### Doc\n\n* **test:** use -race for tests by default ([#1035](https://github.com/hybridgroup/gobot/issues/1035))\n\n### Gpio\n\n* fix data race in StepperDriver ([#1029](https://github.com/hybridgroup/gobot/issues/1029))\n* fix data race in PIRMotionDriver ([#1028](https://github.com/hybridgroup/gobot/issues/1028))\n* fix data race in ButtonDriver ([#1027](https://github.com/hybridgroup/gobot/issues/1027))\n* fix data race in EasyDriver ([#1025](https://github.com/hybridgroup/gobot/issues/1025))\n* **all:** introduce functional options ([#1045](https://github.com/hybridgroup/gobot/issues/1045))\n\n### I2c\n\n* **core:** fix problems with usage of uintptr ([#1033](https://github.com/hybridgroup/gobot/issues/1033))\n\n### Lint\n\n* **all:** fix issues of errorlint etc ([#1037](https://github.com/hybridgroup/gobot/issues/1037))\n* **all:** switch to 1.55.2 and adjust linter issues ([#1036](https://github.com/hybridgroup/gobot/issues/1036))\n\n### Ollie\n\n* **test:** fix data race in test ([#1034](https://github.com/hybridgroup/gobot/issues/1034))\n\n### Raspi\n\n* **pwm:** add support for sysfs and fix pi-blaster ([#1048](https://github.com/hybridgroup/gobot/issues/1048))\n\n## [v2.2.0](https://github.com/hybridgroup/gobot/compare/v2.1.1...v2.2.0) (2023-10-29)\n\n### Adaptors\n\n* **PWM:** fix wrong duty cycle after kill program ([#994](https://github.com/hybridgroup/gobot/issues/994))\n\n### Beaglebone\n\n* **doc:** fix preceding typo ([#985](https://github.com/hybridgroup/gobot/issues/985))\n\n### Build\n\n* **deps:** module update ([#992](https://github.com/hybridgroup/gobot/issues/992))\n* **go, deps:** switch to Go 1.19 and update modules ([#1008](https://github.com/hybridgroup/gobot/issues/1008))\n* **style:** switch to gofumpt and add linters ([#1009](https://github.com/hybridgroup/gobot/issues/1009))\n\n### Doc\n\n* **roadmap:** remove file ROADMAP.md after creating issues ([#1005](https://github.com/hybridgroup/gobot/issues/1005))\n\n### Dragonboard\n\n* fix example and documentation ([#977](https://github.com/hybridgroup/gobot/issues/977))\n\n### Gpio\n\n* **hcsr04:** add driver for ultrasonic ranging module ([#1012](https://github.com/hybridgroup/gobot/issues/1012))\n\n### I2c\n\n* **PCA9685, adafruit, adafruit2327, adafruit2348:** clean up architecture and fix init ([#1021](https://github.com/hybridgroup/gobot/issues/1021))\n\n### Jetson\n\n* **PWM:** fix set period ([#1019](https://github.com/hybridgroup/gobot/issues/1019))\n\n### Joystick\n\n* **core:** replace sdl with 0xcafed00d/joystick  package ([#988](https://github.com/hybridgroup/gobot/issues/988))\n\n### Sphero\n\n* Add support for calibration\n\n### System\n\n* **gpio:** add edge polling function ([#1015](https://github.com/hybridgroup/gobot/issues/1015))\n\n### Test\n\n* **all:** substitude assert.Nil by assert.NoError if useful ([#1016](https://github.com/hybridgroup/gobot/issues/1016))\n* **all:** substitude assert.Error by assert.ErrorContains ([#1014](https://github.com/hybridgroup/gobot/issues/1014), [#1011](https://github.com/hybridgroup/gobot/issues/1011))\n* **all:** switch to test package stretchr testify ([#1006](https://github.com/hybridgroup/gobot/issues/1006))\n* **gpio, aio:** cleanup helper_test ([#1018](https://github.com/hybridgroup/gobot/issues/1018))\n\n## [v2.1.1](https://github.com/hybridgroup/gobot/compare/v2.1.0...v2.1.1) (2023-07-07)\n\n### All\n\n* upgrade modules\n* substitute deprecated ioutil methods ([#923](https://github.com/hybridgroup/gobot/issues/923))\n* **linter:** activate linters \"errcheck\", \"ineffassign\", \"unused\" and fix issues ([#950](https://github.com/hybridgroup/gobot/issues/950))\n* **linter, format:** format code and list of linter todo's ([#962](https://github.com/hybridgroup/gobot/issues/962))\n* **linter:** activate linter \"makezero\" and fix issue ([#965](https://github.com/hybridgroup/gobot/issues/965))\n\n### Ble\n\n* simplify and substitute errors.Wrap() ([#958](https://github.com/hybridgroup/gobot/issues/958))\n\n### Build\n\n* **go:** switch to Go 1.18 ([#940](https://github.com/hybridgroup/gobot/issues/940))\n\n### Core\n\n* CLI removed ([#946](https://github.com/hybridgroup/gobot/issues/946))\n\n### Doc\n\n* fix and improve documentation regarding to installation ([#946](https://github.com/hybridgroup/gobot/issues/946), [#970](https://github.com/hybridgroup/gobot/issues/970))\n\n### Mavlink\n\n* fix linter issues of errcheck ([#959](https://github.com/hybridgroup/gobot/issues/959))\n\n### System\n\n* **syscall:** switch to x/sys ([#963](https://github.com/hybridgroup/gobot/issues/963))\n\n### Tello\n\n* fix wifiMessage and lightMessage ([#957](https://github.com/hybridgroup/gobot/issues/957))\n* fix partially [#793](https://github.com/hybridgroup/gobot/issues/793) by initialize doneCh in NewDriverWithIP ([#931](https://github.com/hybridgroup/gobot/issues/931))\n\n## [v2.1.0](https://github.com/hybridgroup/gobot/compare/v2.0.3...v2.1.0) (2023-05-29)\n\n### Build\n\n* **v2:** revert of [#927](https://github.com/hybridgroup/gobot/pull/927), no usage of a v2 subfolder anymore (issue [#920](https://github.com/hybridgroup/gobot/issues/920))\n\n## [v2.0.3](https://github.com/hybridgroup/gobot/compare/v2.0.2...v2.0.3) (2023-05-24)\n\n* accidentally created release without any changes\n\n## [v2.0.2](https://github.com/hybridgroup/gobot/compare/v2.0.1...v2.0.2) (2023-05-22)\n\n### Build\n\n* **v2:** fix usage by moving code to a v2 subfolder ([#927](https://github.com/hybridgroup/gobot/pull/927))\n\n## [v2.0.1](https://github.com/hybridgroup/gobot/compare/v2.0.0...v2.0.1) (2023-05-21)\n\n### Build\n\n* **style:** add golangci-lint workflow configuration ([#916](https://github.com/hybridgroup/gobot/issues/916))\n* **style:** fix linter findings of \"gosimple\", \"govet\" and \"staticcheck\" ([#917](https://github.com/hybridgroup/gobot/issues/917))\n\n### Bump\n\n* periph.io/x/conn/v3 from 3.6.10 to 3.7.0 ([#913](https://github.com/hybridgroup/gobot/issues/913))\n* github.com/gofrs/uuid from 4.3.0+incompatible to 4.4.0+incompatible ([#914](https://github.com/hybridgroup/gobot/issues/914))\n* golang.org/x/net from 0.1.0 to 0.10.0 ([#915](https://github.com/hybridgroup/gobot/issues/915))\n* github.com/nats-io/nats-server/v2 from 2.1.0 to 2.7.4 ([#906](https://github.com/hybridgroup/gobot/issues/906))\n\n### Core\n\n* fix Semantic Import Versioning for v2 ([#921](https://github.com/hybridgroup/gobot/issues/921))\n\n### Docs\n\n* **core:** adjust changelog generation ([#924](https://github.com/hybridgroup/gobot/issues/924))\n\n## [v2.0.0](https://github.com/hybridgroup/gobot/compare/v1.16.0...v2.0.0) (2023-05-15)\n\n### ble\n\n* update to TinyGo Bluetooth package v0.6.0 release\n\n### build\n\n* update appveyor for go 1.19\n* switch to new cimg with golang 1.17\n* new home path for cimg\n* check examples in CI ([#884](https://github.com/hybridgroup/gobot/issues/884))\n* add tests of more platforms to CI\n* add configuration file for dependabot ([#907](https://github.com/hybridgroup/gobot/issues/907))\n* add PR template\n\n### core\n\n* use base driver for all I2C devices\n* rename package \"sysfs\" to \"system\"\n* go.mod to 1.17 and all modules incl. code upgrades\n\n## digispark\n\n* add example for generic i2c.Driver\n* fix i2c.ReadBlockData(), Read_Data() and some small other fixes\n\n### dji tello\n\n* Halt does not terminate all the related goroutines and may wait forever when it is called multiple times\n\n### docs\n\n* README for gpio, pwm, i2c and add example\n* document fields for flight data\n\n### aio\n\n* analog sensor driver to prevent ReadValue() to get float64\n\n### gopigo3\n\n* fix examples and driver\n\n### gpio\n\n* add advanced digital pin options (pull, bias, drive, debounce, event)\n* add support for new character device Kernel ABI for GPIO\n* add read firmware version and DHT sensors for grovepi\n\n### i2c\n\n* add generic i2c driver\n* fix I2C connection-bus caching and multiple device usage\n* introduce I2cBusAdaptor for composition in platforms\n* **Adafruit1109:** fix driver shows bad characters after Halt()\n* **ads1x15:** fix driver not working stable when reading multiple inputs\n* **ADXL345:** use ReadBlockData()\n* **bmxy8z:** use ReadBlockData\n* **BMP180, BMP280 BMP388 BME280:** use ReadBlockData()\n* **CCS811:** use ReadBlockData()\n* **HMC5883L:** fix I2C driver typo: change from HMC8553L\n* **HMC5883L:** fix driver returns wrong values\n* **L3GD20H:** fix full scale range usage\n* **MPL115A2:** use ReadBlockData(), WriteByteData()\n* **MPU6050:** fix wrong initialize and reduced temperature resolution\n* **PCA9501:** add driver\n* **PCA953x:** add driver\n* **PCF8583:** add driver\n* **TH02:** fix wrong register usage for read heater\n\n### jetson nano\n\n* add Jetson Nano adpator\n* fix pwm feature\n\n### joystick\n\n* add Xbox-One controller\n* add configuration for Nintendo Switch controllers ([#903](https://github.com/hybridgroup/gobot/issues/903))\n* add Dualsense joystick (PlayStation 5) ([#880](https://github.com/hybridgroup/gobot/issues/880))\n\n### nanopi neo\n\n* add platform\n\n### piblaster\n\n* add unused but missing interface implementation\n\n### radxa rock pi 4(c+)\n\n* add platform ([#902](https://github.com/hybridgroup/gobot/issues/902))\n\n### raspi\n\n* fix  pwm cache\n* fix Stopping and Starting Robot and LED Driver/LED does not toggle on restart\n\n### spi\n\n* fix spi.SpiConnection is not gobot.Connection: missing method Connect\n* using GPIO's is now possible\n* **MFRC522:** add driver\n\n### test\n\n* increase some timings to make tests a little less fragile\n* skip test TestNatsAdaptorFailedConnect when flaky\n* stabilize \"every\"-test\n* stabilize flaky utils_test\n* stabilize firmata tests\n* fix tests with sysfs mocks, ReadBlockData, WriteBlockData\n* fix keyboard tests and exclude opencv\n* fix PWM related read/write tests\n* add check for examples in Makefile\n\n### tinkerboard\n\n* fix new pwm behaviour\n\n### BREAKING CANGES\n\n* some interfaces moved, see folder system and adaptor.go\n\n## [v1.16.0](https://github.com/hybridgroup/gobot/compare/v1.15.0...v1.16.0) (2022-05-02)\n\n### bugfix\n\n* failing leftovers after usage of PR #569\n* Fix servo and DC motors presence\n* FIX the bug #568 without further impact, heavy improvements of tests\n* fixed PinMode, SetPullUp and SetPolarity, unit tests activated\n* ReadGPIO fixed with #576, failing leftovers for PinMode, SetPullUp and SetPolarity\n* helper_test ReadByteData, ReadWordData to use reg\n\n### core\n\n* update uuid package and directly access it; remove archived uuid package\n\n### digispark\n\n* fix ReadByte & WriteByte, rework and add i2c tests\n* remove useless code in i2c test\n\n### drivers\n\n* add AnalogActuatorDriver, analog temperature sensor, driver for PCF8591 (with 400kbit stabilization), driver for YL-40\n* Adding support for hmc5883l compass\n* bmp388 fix missing address write byte in test of Measurements\n* drv2605l fix missing address write byte in test of Halt()\n* introduce adafruit1109 2x16 LCD with 5 keys\n* mcp23017: add mutex for write, hd44780: fix mutexes\n* MCP3004: correct number of channels\n\n### raspi\n\n* fix raspi PWMPin.SetDutyCycle (#800)\n\n### tello\n\n* Guards Dji Tello Halt against nil dereference\n\n### test\n\n* don't panic on 'With*' allow simpler wrapping of drivers\n\n### tinkerboard\n\n* fix tinkerboard i2c0 to i2c4, improve comments in pin map, improve README\n\n## [v1.15.0](https://github.com/hybridgroup/gobot/compare/v1.14.0...v1.15.0) (2020-11-30)\n\n### build\n\n* Switch to CircleCI\n\n### ble\n\n* replace go-ble with tinygo bluetooth package, restore macOS functionality\n\n### gpio\n\n* Update RelayDriver to invert value written on Inverted\n* Add tests for DigitalWrite value\n* Add support for HD44780 LCD controller\n* Add delay for Run function of StepperDriver\n\n### spi\n\n* fixes #700 * Avoid to close the connection.\n\n### i2c\n\n* add SHT2x device\n* add BMP388 Barometric Pressure/Temperature/Altitude Sensor\n\n### pwm\n\n* Resolve issue with PWM for PWMWrite\n\n### mqtt\n\n* Add method to publish MQTT messages with retain flag\n\n### tello\n\n* Add graceful halt for Tello driver\n* Add Tello EDU driver\n\n### keyboard\n\n* add symbol keys for platform/keyboard\n\n### examples\n\n* Update ffmpeg command to decrease latency in tello example\n\n## [v1.14.0](https://github.com/hybridgroup/gobot/compare/v1.13.0...v1.14.0) (2019-10-15)\n\n### core\n\n* migrating from dep to go modules\n* update codegangsta to urfave (#690)\n\n### docs\n\n* Fix a link in package docs' example code.\n\n### examples\n\n* fixed broken imports due to changed path causing go get to fail\n\n### gpio\n\n* Added ability to make a relay driver inverted (#674)\n\n### opencv\n\n* Update to GoCV 0.21.0\n\n### spi\n\n* Apa102 use default brightness (#671)\n\n### tello\n\n* Updated videoPort for DJI Tello to 11111\n\n## [v1.13.0](https://github.com/hybridgroup/gobot/compare/v1.12.0...v1.13.0) (2019-05-22)\n\n### api\n\n* Initial stab at Robot-based work\n\n### build\n\n* correct package version as suggested by @dlisin thanks\n* only build last 2 versions of Go plus tip for CI\n* Update dep script for AppVeyor\n* update deps to latest versions of dependencies for GoCV and others\n* Update Gopkg and add test dep to Travis YML\n* update OpenCV build script for OpenCV 4.1.0\n\n### docs\n\n* update to remove Gitter and replace with Slack, and update copyright dates\n\n### example\n\n* add missing nobuild header\n\n### gpio\n\n* Add SparkFun’s EasyDriver (and BigEasyDriver)\n* Add unit tests for TH02 & Minor improvement\n* Added rudiementary support for TH02  Grove Sensor\n* pwm_pin * Fix DutyCycle() parse error, need to trim off trailing '\\n' before calling strconv.Atoi(), as other functions in this package do\n* Simplify code as suggested in #617\n\n### grovepi\n\n* add mutex to control transactionality of the device communication\n\n### i2c\n\n* add 128x32 and 96x16 sizes to the i2c ssd1306 driver\n* build out the ccs811 driver\n* update PCA9685 driver to use same protocol as Adafruit Python lib\n\n### leapmotion\n\n* Parser error in Pointable.Bases: Write test and fix\n* Update gobot leap platform to support Leap Motion API v6\n\n### mavlink\n\n* fix mavlink README to use correct example code\n\n### mqtt\n\n* Add some new MQTT adaptor functions with QOS\n* Allow setting QoS on MTT adaptor\n* make tests run correctly even when a local MQTT server is in fact running\n* Do not skip verification of root CA certificates by default InsecureSkipVerify\n\n### nats\n\n* Update Go NATS client library import\n\n### opencv\n\n* minor updates to opencv README\n* update to OpenCV 4.1.0\n\n### sphero\n\n* Added methods to read Sphero Power States\n* Added some new features to the sphero ollie, bb-8 and sprkplus\n\n### spi\n\n* correct param used for APA102 Draw() method\n* Stop using Red parameter for brightness value\n\n### tello\n\n* add direct vector access\n* add example with keyboard\n* Change fps to 60\n* Check for error immediately and skip publish if error occurred\n* update FlightData struct\n\n### up2\n\n* add support for built-in LEDs\n* correct i2c default bus information to match correct values\n* finalize docs for UP2 config steps\n* update README to include more complete setup information\n* useful constant values to access the built-in LEDs\n\n## [v1.12.0](https://github.com/hybridgroup/gobot/compare/1.11.1...v1.12.0) (2018-08-27)\n\n### api\n\n* further improvement of the modular API changes\n* modify Start() for more modular initialization, and add StartRaw() for completely custom API implementations\n* settled on StartWithoutDefaults() as the method to start API without default routes\n\n### core\n\n* add Rescale utility function for straight linear rescaling\n\n### digispark\n\n* add examples using digispark with i2c devices blinkm and mlp115a2\n* Added i2c to digispark, but not working yet\n* Added some tests for digispark i2c connector\n* Digispark i2c fixes, added Test for checking available addresses\n* remove test method that should not be in adaptor\n* remove test that is expected to ofail, but passes when digispark board is actually connected\n\n### docs\n\n* add GrovePi to README\n* adjust order of badges in README\n* Fixing broken link\n\n### examples\n\n* add example that uses both the API and also a custom handler with MJPEG streaming from an attached camera\n* small improvements to Tello examples\n* update Tello examples for main thread friendly macOS/Windows, add Tello face tracker\n\n### i2c\n\n* add commands to JHD1313MDriver\n* add commands to PCA9685Driver\n* add missing methods so the GrovePi fully implements the Adaptor interface\n* add ShowImage() function to ssd1306 driver based on @mikegleasonjr suggestion\n* GrovePi digitalwrite implemented\n* implemented DigitalRead, DigitalWrite, and AnalogRead for GrovePi\n* improve godocs for PCA9685\n* mention that GrovePi requires running firmware 1.3.0\n* update GrovePi to v1.3.0 firmware\n* work in progress on GrovePi plus driver\n\n### joystick\n\n* add config file for Magicsee R1 contributed by @carl-ranson\n* add some additional test coverage for file-based config\n* added error handling for config loading in joystick driver\n* mention need to be running a Linux kernel v4.14+ for controller mappings to work as expected\n* provide constant values for existing joystick configurations\n\n### raspi\n\n* export PiBlasterPeriod in Adaptor\n\n### spi\n\n* add ShowImage() function to ssd1306 driver based on @mikegleasonjr suggestion\n\n### tello\n\n* specify end of msgType position\n* add handleResponse testing\n* Add motion cessation commands to Tello\n* handleResponse only needs an io.Reader\n* handleResponse should not send commands\n* rename reqConn to cmdConn\n* reqConn is only an io.WriteCloser\n* send Land() command to drone on Halt() to avoid floating mid-air\n\n## [1.11.1](https://github.com/hybridgroup/gobot/compare/1.11.0...1.11.1) (2018-07-10)\n\n### build\n\n* exclude vendor and other previously excluded subpackages\n* update Travis build to use OpenCV 3.4.2 release\n* update deps for GoCV to v0.14.0 release\n* Bump periph.io/x/periph to v3.0.0\n* update to Go 1.10.3 and 1.9.7 for Travis builds\n\n### docs\n\n* Fix Leap Motion package link\n\n### i2c\n\n* fix write/read gpio on mcp23017, and cleaned up some comments\n* correct pca9685 SetPWMFreq function scaling\n\n### gopigo3\n\n* update with default spi values, cleanup\n\n## [1.11.0](https://github.com/hybridgroup/gobot/compare/1.10.2...1.11.0) (2018-05-31)\n\n### build\n\n* correct profile file location for codecov upload\n* Make Go Lint happier by adding some explicit type conversions and ignoring unused error returns\n* single quotes needed to upload any .cov file to codecov for reporting\n* update deps to latest versions for Paho MQTT, go-sdl, and gocv\n* upload any .cov file to codecov for reporting\n* use go 1.10.2 and 1.9.6 for Travis builds\n* add step to call dep ensure before contributing #524\n\n### examples\n\n* correct events used by XBox360 joystick example\n\n### firmata\n\n* Update the Firmata homepage in platform README\n\n### gpio\n\n* Improve Stepper Driver\n* Initial support for MAX7219 (gpio) led driver\n\n### joystick\n\n* full corrected ds3 and ds4 mappings plus examples to match for latest sdl 2.0.8\n* add instructions to README on how to install SDL on Linux from source\n* add missing type conversion\n* add new contributions to README\n* Add T-Flight Hotas X flight controoller\n* add xbox360 rock band drums controller\n* Correct Dualshock4 controller mappings and add ps/left/right buttons\n* correct test issue\n* exclude scanner from test builds\n* Fix joystick_driver to detect dpad input for xbox controllers\n* Update dualshock4.json to match joystick_dualshock4.go\n* update scanner to match go-sdl 0.3 API changes\n* Update the joystick driver test to read DPAD properly\n\n### leapmotion\n\n* change timestamp to uint64 to fix #516\n\n### tello\n\n* slow/fast mode switch function\n* StopLanding feature\n* Add Bounce() and PalmLand() funcs and their associated events.\n* bug fix\n* Change several fields in FlightData struct from int16 to bool\n* Export the FlightData fields (see Issue #531)\n\n## [1.10.2](https://github.com/hybridgroup/gobot/compare/1.10.1...1.10.2) (2018-04-24)\n\n### opencv\n\n* update GoCV to latest version\n\n## [1.10.1](https://github.com/hybridgroup/gobot/compare/1.10.0...1.10.1) (2018-04-24)\n\n### tello\n\n* improve support for DJI Tello drone, especially video\n\n## [1.10.0](https://github.com/hybridgroup/gobot/compare/v1.9.0...1.10.0) (2018-04-20)\n\n### docs\n\n* add gitter badge to readme\n\n### gpio\n\n* AIP1640 led driver, used in Wemos D1 mini's matrix LED shield\n\n### spi\n\n* switch to using periph.io for SPI interfaces\n* add support for ssd1306\n* add optional params such as bus/chip to all current drivers\n* complete refactoring to spi.Connection\n* remove unneeded code as suggested by @maruel\n* remove unneeded type and cleanup GoDocs\n\n### ble\n\n* correct spelling error in function name\n\n### build\n\n* update to latest version of Go 1.10 for Travis build\n\n### cli\n\n* remove extra newline\n\n### docs\n\n* add recently contributed GPIO devices to README\n\n### joystick\n\n* able to configure joysticks without external json file\n* correct error in scanning script\n* correct events used by gamepad-style up/down/left/right buttons\n* correct scanner error from ID\n* removed double release event\n\n### tello\n\n* add support for DJI Tello drone\n\n## [v1.9.0](https://github.com/hybridgroup/gobot/compare/v1.8.0...v1.9.0) (2018-02-14)\n\n### beaglebone\n\n* update pin naming, docs, and examples for the latest Debian OS releases\n\n### opencv\n\n* update build settings needed to build OpenCV/GoCV as part of test suite\n* deps for latest GoCV v0.9.0\n\n### build\n\n* update Travis build to use very latest Go versions\n\n### docs\n\n* add references to new drivers for ADXL345, BH1750, and TM1638.\n* improve docs for installation and use of OpenCV/GoCV from Gobot\n* update copyright date to 2018\n\n### gpio\n\n* Initial support for TM1638 modules\n\n### i2c\n\n* Added basic driver for BH1750 (light sensor), board GY-302\n* support for accel ADXL345\n\n### bb8/ollie/sprkplus\n\n* add Boost command\n* add Set Back LED Output command\n* add Set Raw Motor Values command\n* add Set Rotation Rate command\n* add Set Stabilization command\n\n### test\n\n* Refactor TestAdaptorDigitalPinConcurrency test\n\n## [v1.8.0](https://github.com/hybridgroup/gobot/compare/v1.7.1...v1.8.0) (2017-12-21)\n\n### sysfs\n\n* pause briefly to allow udev rules to apply when exporting PWMPin\n\n### beaglebone\n\n* correct uboot installation instructions\n* add SPI support\n* no more slots, add docs on configuring u-boot overlays\n* handle gpio pinmux without relying on specific pre-existing setup\n\n### pocketbeagle\n\n* add support for PocketBeagle\n* use universal io cape manager to initialize board setup\n* improve docs for latest Debian OS\n\n### build\n\n* Add dep, change how tests run in CI\n* update dependencies to latest GoCV version\n\n### spi\n\n* Add MCP3002, MCP3202, MCP3204, MCP3208, MCP3304, MCP3004, and MCP3008 A/D converter drivers\n* adding initial support for APA102 LEDs, thanks to code sample from @rakyll\n* extract shared SPI init code into spi package\n\n### up2\n\n* initial work on support for UP2 board\n\n### gopigo3\n\n* fixed set/get bug with motor dps\n\n### gpio\n\n* Adding stepper motor module\n\n### firmata\n\n* handle cases where out of sync data is read from serial port on first connecting\n\n### i2c\n\n* Change init payload sequence within jhd1313m1 driver Start() func.\n\n## [v1.7.1](https://github.com/hybridgroup/gobot/compare/v1.7.0...v1.7.1) (2017-11-05)\n\n### sprkplus\n\n* add new platform for Sphero SPRK+\n\n### firmata\n\n* correct problem where last analog pin(s) were being ignored from capabilities query\n\n### ble\n\n* use go-ble/ble fork for BLE interactions\n\n### build\n\n* update to use latest OpenCV version\n* update to use latest Golang versions\n\n## [v1.7.0](https://github.com/hybridgroup/gobot/compare/v1.6.1...v1.7.0) (2017-10-23)\n\n### curie\n\n* Add Linux specific step to Intel Curie docs\n\n### mqtt\n\n* Added SetCleanSession\n\n### build\n\n* add go1.9 to versions tested in Travis CI\n* add missing OpenCV lib dependency\n* Update build to use latest Golang versions\n* Travis build will now require sudo to install due to OpenCV\n\n### docs\n\n* some helpful edits for the initial spi implementation\n\n### gopigo3\n\n* integration of recent GoPiGo3 contributions\n* Added grove support, and more gopigo3 examples\n\n### gpio\n\n* Add ButtonDriver.DefaultState to allow for 'reverse' buttons (ones that go from HIGH to LOW)\n\n### holystone\n\n* Add initial support for HS-200\n\n### i2c\n\n* SSD1306.WithDisplayHeight() and SSD1306.WithDisplayWidth() for SSD1306 that use different display ratios\n\n### joystick\n\n* add CLI utilty to scan display events to make it easier to add new joyticks\n* update README to address #441\n\n### opencv\n\n* Switchover to use GoCV and OpenCV 3.3\n* Switch to use custom domain for GoCV package\n* all examples using new GoCV based code\n* correct formatting in face detect example\n* OpenCV face detector that is much more concurrent\n* update interface and examples to indicate multipurpose\n\n## [v1.6.1](https://github.com/hybridgroup/gobot/compare/v1.6.0...v1.6.1) (2017-07-15)\n\n### core\n\n* log failure errors on Robot Start()\n\n### build\n\n* run test coverage with covermode=set\n* update build to use Golang 1.7.6 and 1.8.3\n\n### docs\n\n* work on ROADMAP doc\n\n### sysfs\n\n* increase test coverage\n\n### bb8\n\n* use updated ble adaptor interface for tests\n\n### ble\n\n* allow for characteristic writes both with and without a response\n* allow override of specific HCI device to use\n* eliminate race conditions from response handling\n\n### curie\n\n* Implement Accelerometer, Gyroscope, and Temperature sensors implemented\n* motion detect implemented\n* shock detect implemented\n* step count implemented\n* tap detect implemented\n\n### digispark\n\n* update blink example to display error message on Start()\n* update README with latest development info\n\n### edison\n\n* auto-discovery of Edison board option\n* removed commented lines\n\n### firmata\n\n* expose WriteSysex to external callers\n* adjust client test timeout values\n* cleanup error handling for connection code\n* client tests don't need so many goroutines\n* expose WriteSysex to external callers\n* improve connection code to use a proper timeout\n* increase test coverage\n* make it possible to test external devices that use firmata adaptor\n* refactoring firmata client\n* remove circular import in test\n* remove unused code, increase test coverage\n* return connect errors to client\n* switch to using go-serial package\n* Sysex response events now being handled as expected\n\n### bme280\n\n* fix signed/unsigned bug\n* Fixed incorrect error condition check when reading the 'ctrl_hum' register.\n* Expanded the BME280 unit test for TestBME280DriverStart() to support reading from the 'ctrl_hum' register.\n* Enables humidity readings in the BME280 driver by enforcing the write to the 'ctrl_meas' register, as per Section 5.4.3 of the BME280 data sheet\n\n### chip\n\n* Fixed PWM duty cycle calculation for C.H.I.P ServoWrite\n* Fixed PWM init bug for C.H.I.P\n* C.H.I.P PWM init robust for already enabled state\n\n### i2c\n\n* remove unused test code\n* write config register in little endian\n\n### joystick\n\n* add needed constants for all PS3 buttons\n\n### littlewire\n\n* littlewire.cc links changed to littlewire.github.io\n\n### mavlink\n\n* switch to using go-serial package\n\n### megapi\n\n* switch to using go-serial package\n\n### microbit\n\n* use updated ble adaptor interface for tests\n\n### minidrone\n\n* add example for Parrot Mambo\n* add support for Mambo external accessories\n* increase test coverage\n* never expect responses for characteristic writes\n* remove unneeded code, increase test coverage\n* separate flight status processing and add test coverage\n\n### neurosky\n\n* switch to using go-serial package\n\n### ollie\n\n* use updated ble adaptor interface for tests\n\n### sphero\n\n* switch to using go-serial package\n\n### tinkerboard\n\n* Updated Tinkerboard and sysfs tests to updated PWM polarity contract\n\n## [v1.6.0](https://github.com/hybridgroup/gobot/compare/v1.5.0...v1.6.0) (2017-06-15)\n\n### Bb8\n\n* use updated ble adaptor interface for tests\n\n### Ble\n\n* eliminate race conditions from response handling\n* allow for characteristic writes both with and without a response\n* allow override of specific HCI device to use\n\n### Build\n\n* update build to use Golang 1.8.3\n* update build to use Golang 1.7.6 and 1.8.2\n* run test coverage with covermode=set\n\n### Core\n\n* log failure errors on Robot Start()\n\n### Curie\n\n* update docs formatting\n* add Curie to main README platform list\n* more improvements for README setup instructions\n* improve README info\n* improve tests and examples\n* increase test coverage\n* increase test coverage\n* motion detect implemented\n* tap detect implemented\n* step count implemented\n* shock detect implemented\n* Accelerometer, Gyroscope, and Temperature sensors implemented\n* WIP on adding support for Intel Curie IMU\n\n### Digispark\n\n* update blink example to display error message on Start()\n* update README with latest development info\n\n### Docs\n\n* add more wishlist to ROADMAP\n* add helpful information to examples themselves\n* correct installation instructions to match latest versions\n* more wishlish items for roadmap\n* update BLE connect info to latest\n* more work on ROADMAP doc\n* add first attempt at roadmap document\n\n### Edison\n\n* refactor auto-discovery of Edison board option\n* removed commented lines\n\n### Firmata\n\n* remove circular import in test\n* make it possible to test external devices that use firmata adaptor\n* Sysex response events now being handled as expected\n* expose WriteSysex to external callers\n* expose WriteSysex to external callers\n* cleanup error handling for connection code\n* improve connection code to use a proper timeout\n* remove unused code, increase test coverage\n* increase test coverage\n* switch to using go-serial package\n* return connect errors to client\n* client tests don't need so many goroutines\n* adjust client test timeout values\n* refactoring firmata client\n\n### Fix\n\n* signed/unsigned bug\n\n### Fixed\n\n* incorrect error condition check when reading the 'ctrl_hum' register. Expanded the BME280 unit test for TestBME280DriverStart() to support reading from the 'ctrl_hum' register.\n* PWM duty cycle calculation for C.H.I.P ServoWrite\n* PWM init bug for C.H.I.P\n\n### I2c\n\n* remove unused test code\n\n### Improved\n\n* BME280 humidity initialisation so that it does not override existing oversampling rates that have been set up for the ctrl_meas register.\n\n### Issue\n\n* [#424](https://github.com/hybridgroup/gobot/issues/424): Enables humidity readings in the BME280 driver by enforcing the write to the 'ctrl_meas' register, as per Section 5.4.3 of the BME280 data sheet\n\n### Joystick\n\n* add needed constants for all PS3 buttons\n\n### Made\n\n* C.H.I.P PWM init robust for already enabled state\n\n### Mavlink\n\n* switch to using go-serial package\n\n### Megapi\n\n* switch to using go-serial package\n\n### Microbit\n\n* use updated ble adaptor interface for tests\n\n### Minidrone\n\n* never expect responses for characteristic writes\n* add example for Parrot Mambo\n* separate flight status processing and add test coverage\n* add support for Mambo external accessories\n* remove unneeded code, increase test coverage\n* increase test coverage\n\n### Neurosky\n\n* switch to using go-serial package\n\n### Ollie\n\n* use updated ble adaptor interface for tests\n\n### Prepare\n\n* for v1.6.0 release\n\n### Release\n\n* correct changelog incorrect section titles\n\n### Sphero\n\n* switch to using go-serial package\n\n### Sysfs\n\n* increase test coverage\n\n### Updated\n\n* Tinkerboard and sysfs tests to updated PWM polarity contract\n\n### Write\n\n* config register in little endian\n\n## [v1.5.0](https://github.com/hybridgroup/gobot/compare/v1.4.0...v1.5.0) (2017-05-10)\n\n### core\n\n* Add Running() methods for Manager and Robot and increase test coverage accordingly\n\n### sysfs\n\n* define DigitalPinnerProvider and PWMPinnerProvider interfaces\n* add Chip to be able to change pwmchip, and some related refactoring\n* add file read/write testing for failure conditions\n* proper handling of busy state vs. other errors\n* return sensible result when no valid data read\n\n### test\n\n* increase coverage on test helpers\n\n### build\n\n* switching to Travis builds using Ubuntu 14.04 Trusty\n\n### aio\n\n* only need to support AnalogReader interface\n* avoid test race conditions\n* ensure that AnalogSensor event Data is always int\n\n### gpio\n\n* only need to support DigitalReader/DigitalWriter interface\n\n### i2c\n\n* Added support for the ADS1015 and ADS1115 ADCs\n* Add INA3221 Voltage Monitor\n* Ensure lock of i2c bus for each individual operation\n* Small refactoring and increase test coverage for BMP180\n\n### beaglebone\n\n* implement DigitalPinner and PWMPinner interfaces\n* protect against pin map races\n* increase test coverage\n\n### chip\n\n* add preliminary support for C.H.I.P. Pro\n* add back ServoWrite implementation\n* implement DigitalPinnerProvider and PWMPinnerProvider interfaces\n* protect against pin map races\n\n### dragonboard\n\n* export DigitalPin and PWMPin adaptor methods\n* protect against pin map races\n* increase test coverage\n\n### edison\n\n* auto-detect arduino breakout board, if no specific board is expected\n* ensure that we initialize tristate if arduino breakout board\n* export DigitalPin and PWMPin adaptor methods\n* implement DigitalPinnerProvider and PWMPinnerProvider interfaces\n* protect against pin map races\n* refactoring to reduce code duplication\n\n### firmata\n\n* remove processing that might have been eating test events, increase test coverage\n\n### joule\n\n* implement DigitalPinnerProvider and PWMPinnerProvider interfaces\n* protect against pin map races\n* remove incorrect pin assignment and improve test coverage\n* add examples using Joule with ADS1015 ADC\n* naming system changes\n* correct pin mappings and add PWM example\n\n### mavlink\n\n* add a Mavlink-over-UDP adaptor.\n\n### microbit\n\n* Add DigitalWriter, DigitalReader, and AnalogReader support using IOPinDriver\n* Handle start error and increase test coverage\n\n### mqtt\n\n* Add a (topic, payload) event type\n* change the On handler to take mqtt.Message\n* increase test coverage\n* update examples that use mqtt for updated notification signature\n\n### nats\n\n* change the On() handler to take the subject as an argument\n* increase test coverage\n\n### raspi\n\n* implement DigitalPinnerProvider and PWMPinnerProvider interfaces\n* add implementation for PWMPinner interface that wraps pi blaster\n* fix adaptor race conditions\n* increase test coverage\n\n### tinkerboard\n\n* Add support for ASUS Tinker Board\n\n## [v1.4.0](https://github.com/hybridgroup/gobot/compare/v1.3.0...v1.4.0) (2017-04-12)\n\n### core\n\n* Use 10-buffered chans for events, see #374\n\n### i2c\n\n* Many refactors and increases in test coverage\n* Eliminate race conditions introduced by tests\n* Adds Altitude() function to BMP280/BME280\n* bme280 driver Humidity compensation formula\n* ssd1306 driver implementation\n\n### aio\n\n* Eliminate race conditions introduced by tests\n\n### gpio\n\n* Fix motor mode change when speed is set\n* Eliminate race conditions introduced by tests\n* Reduce test side effects\n\n### ardrone\n\n* Increase test coverage\n\n### audio\n\n* Increase test coverage\n\n### bb8\n\n* Refactoring to use BLEConnector interface and provide tests\n\n### bebop\n\n* Increase test coverage\n\n### beaglebone\n\n* Increase test coverage\n\n### ble\n\n* Increase test coverage for battery, device information, and generic access drivers\n* Refactoring drivers to use BLEConnector interface and provide tests\n\n### chip\n\n* Added PWM0 support\n* Increase test coverage\n\n### digispark\n\n* Increase test coverage\n\n### dragonboard\n\n* Increase test coverage\n\n### edison\n\n* Remove pointless error checking code\n* Refactor digital pin creation process method\n* Increase test coverage\n\n### firmata\n\n* Eliminate race conditions introduced by tests\n* Increase test coverage for i2c commands\n\n### joule\n\n* Increase test coverage\n\n### joystick\n\n* Increase test coverage\n\n### keyboard\n\n* Increase test coverage\n\n### mavlink\n\n* Eliminate race conditions introduced by tests\n* Increase test coverage\n\n### mavlink\n\n* Increase test coverage\n\n### microbit\n\n* Refactoring to use BLEConnector interface and provide tests\n* Address #404 by adding info about required magnetometer calibration step to README\n* Increase test coverage\n\n### minidrone\n\n* Refactoring to use BLEConnector interface and provide tests\n\n### mqtt\n\n* Increase test coverage\n\n### nats\n\n* Increase test coverage\n\n### neurosky\n\n* Update neurosky README & example\n* Eliminate race conditions introduced by tests\n* Increase test coverage\n\n### ollie\n\n* Refactoring to use BLEConnector interface and provide tests\n* Correct race condition error on seq\n* Increase test coverage\n\n### opencv\n\n* Increase test coverage\n\n### particle\n\n* Increase test coverage\n\n### raspi\n\n* Address #391 by providing more details about normal development workflow\n* Increase test coverage\n\n### sphero\n\n* Eliminate race conditions\n* Increase test coverage\n\n### sysfs\n\n* Address race condition from udev rules when exporting GPIO pins\n* Increase test coverage\n\n### docs\n\n* Improve explanations for scp/ssh workflow on SoC boards\n* Include entire Apache 2.0 license in the license text\n\n### test\n\n* Add crude travis check for gofmt; format all sources\n* Significantly speed up travis and make runs\n* Remove test code no longer being called\n* Update Travis to run tests using Golang 1.8.1\n* Increase gobottest test coverage\n\n## [v1.3.0](https://github.com/hybridgroup/gobot/compare/v1.2.1...v1.3.0) (2017-03-22)\n\n### microbit\n\n* Add new platform support\n\n### dragonboard\n\n* Add new platform support\n\n### gpio\n\n* Increase test coverage\n\n### i2c\n\n* Update list of supported i2c devices\n* Minor adjustments and test coverage improvements\n* Added more capabilities checks for I2C\n* Removed smbus block operations\n\n### core\n\n* Increase test coverage\n\n### test\n\n* Improvements to run tests much faster thanks @maruel\n* Use codecov.io for code coverage reporting\n\n### docs\n\n* Update CoC based on Contributor Covenant\n\n## [v1.2.1](https://github.com/hybridgroup/gobot/compare/v1.2.0...v1.2.1) (2017-02-16)\n\n### Allow\n\n* NATS options to pass in the NATS adaptor for TLS support.\n\n### Chip\n\n* correct docs to describe valid pin mappings\n\n### Update\n\n* version to 1.2.1 for point release\n\n## [v1.2.0](https://github.com/hybridgroup/gobot/compare/v1.1.0...v1.2.0) (2017-02-16)\n\n### core\n\n* Use new improved default namer to avoid API conflicts\n\n### gpio\n\n* Removed scaling function from servo driver\n* Correct servo driver to pass along angle to adaptor to sort out implementation\n\n### i2c\n\n* Refactored platforms and drivers to new I2C interfaces\n* Change to make I2C support more than one bus\n* Refactor drivers to support new optional params\n\n### bb8\n\n* Added collision detection support and example\n\n### beaglebone\n\n* Correct i2c buses to match actual mapping\n\n### ble\n\n* Switch to using [ble](https://github.com/currantlabs/ble) package for Bluetooth LE\n* Basic serial over BLE working with Arduino101 with StandardFirmataBLE\n* WIP on multiple simultaneous ble devices\n\n### chip\n\n* Fixed chip XIO base address lookup\n\n### digispark\n\n* Fix #288 by using pkg-config to locate libusb-compat includes\n\n### firmata\n\n* Remove race conditions identified in Firmata client\n* Correct error in I2C reads not listening to board events\n\n### mqtt\n\n* Add driver for syntactical sugar around virtual devices\n* Add SSL/TLS client options support\n* Fix #277 by adding SetAutoReconnect method to set Paho MQTT client\n* Change both 'On' and 'Publish' method function signatures to match Eventer interface\n\n### nats\n\n* Add driver to make it easier to create virtual devices\n\n### ollie\n\n* Added collision detection support and example\n\n### parrot\n\n* Add ValidatePitch helper function for Parrot Minidrone, Parrot Bebop & ARDrone 2.0 to package\n\n### docs\n\n* Fix #363 by using atomic.Value to protect current values used by multiple goroutines in drone examples\n\n### test\n\n* Remove Golang 1.5 from TravisCI tests in prep for Golang 1.8 release\n\n## [v1.1.0](https://github.com/hybridgroup/gobot/compare/v1.0.0...v1.1.0) (2017-01-09)\n\n### core\n\n* use canonical import path for sysfs package\n\n### i2c\n\n* Add a driver for the SHT3X chip\n* Add a driver for BMP180\n* Add support for L3GD20H gyroscope\n\n### firmata\n\n* Add support for TCPFirmata connections, allowing ESP8266 and other WiFi-connected controllers\n* Add mention to README to use 'tty.' serial port on OSX\n* Add mention of A4 and A5 normally unavailable on Firmata\n\n### raspi\n\n* Correct README build instructions with missing 'go build' command\n\n### snapcraft\n\n* Add the packaging metadata to build the gobot snap for Ubuntu Snappy\n\n### particle\n\n* Update examples to take key params via command line\n* Address #160 by adding support for tinker-servo sketch if installed on Particle device\n\n### esp8266 add experimental ESP8266 support to list of supported platforms\n\n### sysfs\n\n* Should fix #272 by using first byte of data as command register for I2C reads\n* Some additional cleanup suggested by golint\n\n### ble\n\n* Add generic access service driver\n* Update docs to include reference to included drivers\n* Move various test code to test file\n\n### ollie\n\n* Refactoring so no need to expose internal implementation details\n\n### bebop\n\n* Add support/example of RTP video\n* Enable video on firmware 3.3+\n* Update ps3 and video example to enable the video stream\n* Update README for brief explanation of how to get drone video\n* Corrected import paths for client examples\n\n### bb8\n\n* Correct NewDriver params and set name\n* Add missing constructor to wrap Ollie implementation\n\n### minidrone\n\n* Update README with example and which specific models are currently supported\n* Add all piloting flying state events\n* Adds Emergency() and TakePicture() commands\n\n### test\n\n* Add Golang 1.8beta2 to Travis builds\n* Correct aio references for AnalogRead tests\n\n## [v1.0.0](https://github.com/hybridgroup/gobot/compare/v0.13.0...v1.0.0) (2016-12-21)\n\n### core\n\n* Refactoring to allow 'Metal' development using Gobot packages\n* Able to run robots without being part of a Manager.\n* Now running all work in separate goroutines\n* Rename internal name of Manager type\n* Refactor events to use channels all the way down.\n* Eliminate potential race conditions from Events and Every functions\n* Add Unsubscribe() to Eventer, now Once() works as expected\n* DeleteEvent function added to Eventer interface\n* Ranges over event channels instead of using select\n* No longer return non-standard slices of errors, instead use hashicorp/go-multierror\n* Ensure that all drivers have default names\n* Now both Robot and Manager operate using AutoRun as expected\n* Use canonical import domain of gobot.io for all code\n* Use time.Sleep unless waiting for a timeout in a select\n* Uses time.NewTimer() instead of time.After() to be more efficient\n\n### test\n\n* Add deps tasks to Makefile\n* Add golang 1.7 to Travis CI tests\n* Add golang 1.8beta1 to build matrix for Travis\n* Reduce Travis builds to golang 1.4+ since it is late 2016 already\n* Complete move of test interfaces into the test files where they belong\n* Adds Parrot Minidrone and Sphero Ollie to Travis tests\n\n### Add missing godocs for everything\n\n### i2c\n\n* Move I2C drivers into appropriately named 'drivers/i2c' directory\n* Add support for Adafruit Servo/PWM HAT\n\n### gpio\n\n* Move GPIO drivers into appropriately named 'drivers/gpio' directory\n* Add support for PIR motion detector\n\n### beaglebone\n\n* auto-detect Linux kernel version\n* map usr LEDs to match all kernels\n\n### ble\n\n* Rename drivers to make them more obvious\n* Add test placeholders\n\n### chip\n\n* Auto-detect OS version to adjust pin mappings\n* Correct base for new 4.4 GPIO\n\n### edison\n\n* Support for other breakout boards besides Arduino\n\n### firmata\n\n* Use io.ReadFull in platforms/firmata/client\n* Update tarm/goserial to tarm/serial\n\n### joule\n\n* Add support for Intel Joule\n\n### megapi\n\n* Adding support for MakeBlock megapi\n\n### nats\n\n* Add support for NATS server\n\n### particle\n\n* Complete renaming Spark platform to Particle\n\n\n### parrot\n* Move Parrot Minidrone into own platform\n* Move both ARDrone and Bebop under Parrot package\n\n### raspi\n\n* Add missing godocs and small refactors for platform\n\n### sphero\n\n* Add initial support for Sphero BB-8 platform\n* Move Sphero Ollie into own platform\n\n## [v0.13.0](https://github.com/hybridgroup/gobot/compare/v0.12.1...v0.13.0) (2016-10-10)\n\n### Add\n\n* PinMode test case\n* PinMode func for MCP23017\n* example for Edison blink demo without gobot initialization.\n* ServoConfig to the FirmataAdaptor\n* unit tests for ServoConfig\n\n### Adding\n\n* support for MakeBlock megapi\n* tests for the Adafruit driver, and corresponding minor driver changes.\n* support for MakeBlock megapi\n* a Servo example program for the Adafruit Servo Hat driver code.\n* support for the Adafruit Servo/PWM HAT.  This required a slight refactor to the existing Motor HAT code to support multiple I2C addresses.\n* two API funcs for the Adafruit driver with respect to the DC Motor, fleshing out the raspi_adafruit example with a runner function.\n* the initial NATS platform support\n\n### Another\n\n* attempt at correct Travis syntax for gnatsd -[#5](https://github.com/hybridgroup/gobot/issues/5)\n* attempt at correct Travis syntax for gnatsd -[#4](https://github.com/hybridgroup/gobot/issues/4)\n* attempt at correct Travis syntax for gnatsd -[#3](https://github.com/hybridgroup/gobot/issues/3)\n* attempt at correct Travis syntax for gnatsd -[#2](https://github.com/hybridgroup/gobot/issues/2)\n* attempt at correct Travis syntax for gnatsd\n\n### Ble\n\n* fix unused var\n* populate descriptors after descovering characterisitcs\n\n### Bug\n\n* fix in the Adafruit stepper code, specifically with respect to the AdafruitDouble step-style.\n\n### Code\n\n* cleanups suggested by gosimple\n\n### Core\n\n* update README with an example of 'Metal' Gobot\n* should correct occasional test errors due to event overlap with test\n* correct behavior in Mavlink driver, correct tests to match\n* Add Unsubscribe() to eventer, now Once() works as expected\n* Add further tests for Eventer\n* cleanup comments on Eventer interface\n* function DeleteEvent added to Eventer interface\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor examples to allow 'metal' development using Gobot adaptors/drivers.\n* Refactoring to allow 'metal' development using Gobot adaptors/drivers.\n* Continue refactoring to allow 'metal' development using Gobot libs.\n* Refactor events to use channels all the way down. Allows 'metal' development using Gobot libs.\n* update README with an example of 'Metal' Gobot\n* should correct occasional test errors due to event overlap with test\n* correct behavior in Mavlink driver, correct tests to match\n* Add Unsubscribe() to eventer, now Once() works as expected\n* Add further tests for Eventer\n* cleanup comments on Eventer interface\n* function DeleteEvent added to Eventer interface\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor tests to allow 'metal' development using Gobot adaptors/drivers.\n* Refactor examples to allow 'metal' development using Gobot adaptors/drivers.\n* Refactoring to allow 'metal' development using Gobot adaptors/drivers.\n* Continue refactoring to allow 'metal' development using Gobot libs.\n* Refactor events to use channels all the way down. Allows 'metal' development using Gobot libs.\n\n### Docs\n\n* go fmt files that needed it from recent changes\n* go fmt files that needed it from recent changes\n\n### File\n\n* rename, adding a test file for the Adafruit driver, and slight func naming changes.\n* rename, adding a test file for the Adafruit driver, and slight func naming changes.\n\n### Fix\n\n* a typo and update the doc comment for FirmataAdaptor.ServoConfig\n* the ServoConfig byte order\n* issues flagged by 'go vet'\n* misspellings\n\n### Fixing\n\n* some code and finally have Travis building\n* tests, adding a few more, adding nats server to Travis CI for testing\n\n### Initial\n\n* significant changes to the Adafruit Motor HAT driver to support Stepper Motors.\n* commit of driver code, with accompanying example, for the Adafruit_MotorHat.\n\n### Joule\n\n* add i2c example and notes to README about pullup resistors\n* adds pin mappings from the second header\n* add pin mapping info to README\n* go fmt the multi-LED example\n\n### Merge\n\n* branch 'dev' of github.com:jfinken/gobot into dev\n* branch 'dev' of github.com:jfinken/gobot into dev\n\n### Misc\n\n* update all LICENSE files for current year\n\n### More\n\n* explicit initialization in Start, slight refactor, and separate DC Motor and Stepper Motor examples.\n\n### Move\n\n* interface assertions to test files.\n\n### Release\n\n* update to version 0.13.0\n\n### Remove\n\n* debug message from i2c_device.go\n\n### Removing\n\n* the raspi_adafruit program as it has been split into three separate programs, removing my Makefile for the raspi adafruit programs, and fixing up a few comments.\n* my fork from the Adafruit tests.\n\n### Starting\n\n* support for Intel Joule with the built-in LEDs and more\n\n### Test\n\n* add golang 1.7 to Travis CI tests\n* add golang 1.7 to Travis CI tests\n\n### Tests\n\n* complete move of test interfaces into the test files where they belong\n* refactor test interfaces out of implementations and into the tests where they belong\n\n### Update\n\n* READMEs with up to date info for Edison/Joule\n\n### Updating\n\n* platform support info\n\n\n## [v0.12.1](https://github.com/hybridgroup/gobot/compare/v0.12.0...v0.12.1) (2016-07-13)\n\n### A\n\n* little more WIP, can open a connection to a specific peripheral\n\n### Add\n\n* MQTT authentication support\n* MQTT authentication support\n* Go Reportcard badge for fun\n* Go Reportcard badge for fun\n\n### Added\n\n* example of how to use temp36 temperature sensor with firmata\n* example of how to use temp36 temperature sensor with firmata\n\n### Adds\n\n* support for Dualshock4 wireless gamepad\n* support for Dualshock4 wireless gamepad\n\n### Allow\n\n* failures in Travis builds for Golang 1.3 due to SDL changes\n\n### Almost\n\n* reading battery info\n\n### BLE\n\n* seems to require Golang 1.4+\n\n### Can\n\n* see BLE devices, and connect to a specific one\n\n### Change\n\n* default value for PCMD flag to match the Bebop 2.0.57+ expectations\n* default value for PCMD flag to match the Bebop 2.0.57+ expectations\n* test delay to 50ms\n* test delay to 50ms\n\n### Code\n\n* cleanup, improve go report card\n* cleanup, improve go report card\n\n### Fix\n\n* specs\n* specs\n* for analog (quick changes lag)\n* for analog (quick changes lag)\n* [#201](https://github.com/hybridgroup/gobot/issues/201) by add 'make examples' command to Makefile\n* mavlink link typo\n\n### Fixes\n\n* failing test\n* failing test\n\n### Go\n\n* fmt the code\n\n### Increase\n\n* hover time and remove cruft from simple Bebop drone example\n* hover time and remove cruft from simple Bebop drone example\n\n### Introduce\n\n* `gobottest` package with test helpers\n* `gobottest` package with test helpers\n\n### Make\n\n* dev branch target more explicit\n\n### Making\n\n* sure tests pass\n\n### Merge\n\n* branch 'feature/audio' into dev\n* branch 'bugfix/gpio-button-tests' into dev\n* branch 'feature/ble' into feature/ble-wip\n\n### More\n\n* WIP on reading characteristics\n\n### Pin\n\n* 229 value left out of test fixture on edison\n\n### Refactor\n\n* to use `gobottest` test helpers\n* to use `gobottest` test helpers\n\n### Remove\n\n* fmt no longer used here\n* commented lines\n* test code\n\n### Resolve\n\n* merge conflicts\n* merge conflict in Travis CI file\n\n### Simple\n\n* implementation that can read data\n\n### Support\n\n* gpio pin turn on and off\n* gpio pin turn on and off\n\n### Switching\n\n* to currantlabs fork of gatt, and some related refactoring\n\n### Test\n\n* generated error messages as well\n* generated error messages as well\n\n### Tests\n\n* also need to be pointed to [@veandco](https://github.com/veandco) go-sdl2 fork\n\n### Update\n\n* to 0.12.1\n* missing changelog entries\n* missing changelog entries\n* ARDrone face tracking example to use main go-opencv fork\n\n### Use\n\n* main go-sdl fork from [@veandco](https://github.com/veandco) to pickup any upstream changes\n* OpenCV 2.4, as well as switch to main fork of go-opencv\n* Seek to speed up read/write in sysfs\n\n### WIP\n\n* on BLE\n\n## [v0.12.0](https://github.com/hybridgroup/gobot/compare/v.0.11.1...v0.12.0) (2016-07-13)\n\n### Refactor Gobot test helpers into separate package\n\n### Improve Gobot.Every method to return channel, allowing it to be halted\n\n### Refactor of sysfs adds substantial speed improvements\n\n### ble\n\n* Experimental support for Bluetooth LE.\n* Initial support for Battery & Device Information services\n* Initial support for Sphero BLE robots such as Ollie\n* Initial support for Parrot Minidrone\n\n### audio\n\n* Add new platform for Audio playback\n\n### gpio\n\n* Support added for new GPIO device:\n* RGB LED\n* Bugfixes:\n* Correct analog to better handle quick changes\n* Correct handling of errors and buffering for Wiichuk\n\n### mqtt\n\n* Add support for MQTT authentication\n\n### opencv\n\n* Switching to use main fork of OpenCV\n* Some minor bugfixes related to face tracking\n\n## [v.0.11.1](https://github.com/hybridgroup/gobot/compare/v0.11.0...v.0.11.1) (2016-02-17)\n\n### Add\n\n* support for 'hand' and 'gesture' Leap Motion events\n* MMA7660 accelerometer example for C.H.I.P.\n* C.H.I.P. to supported platforms\n* support for the CHIP platform\n* MCP23017 write and read functionality to GPIO\n\n### Adds\n\n* MCP23017 i2c device to README\n* additional examples for C.H.I.P.\n\n### Better\n\n* I2C device descriptions in README\n\n### Correct\n\n* the release command sent to pi-blaster.\n* Intel Edison docs location thanks to [@seanmarcia](https://github.com/seanmarcia)\n\n### Default\n\n* the new MQTT 'AutoReconnect' to false\n\n### Failure\n\n* is no longer an option for Go 1.6\n\n### Fix\n\n* [#236](https://github.com/hybridgroup/gobot/issues/236) & fix [#239](https://github.com/hybridgroup/gobot/issues/239) by correcting initialization and temperature conversion for MPU-6050\n\n### Fixed\n\n* event race condition\n\n### Get\n\n* I2C functionality before doing SMBus block I/O\n\n### Golang\n\n* 1.3.3 still works, adding back to build\n\n### Increase\n\n* button delay hack for test suite\n* test delay hack for button tests\n\n### Name\n\n* C.H.I.P. pins according to printed names\n\n### Need\n\n* to explicitly set content type to text/html for Robeaux main page\n\n### No\n\n* coveralls repo token for provate repos?\n\n### Remove\n\n* coveralls badge\n\n### Run\n\n* builds against the latest major releases\n\n### The\n\n* take-off-before-event-handling bug again\n\n### Trying\n\n* to remove coveralls based code coverage\n* conditional build before_install\n* conditional build\n\n### Update\n\n* version to v.0.11.1\n* version to 0.11\n* MQTT README for latest info\n* targeted golang versions to include 1.6, and to begin deprecating 1.3.3 and earlier\n* coveralls badge in README\n* API example\n\n### Use\n\n* newer naming system for C.H.I.P. pins\n\n### What\n\n* about -v\n\n### Why\n\n* do this twice?\n\n## [v0.11.0](https://github.com/hybridgroup/gobot/compare/0.10.0...v0.11.0) (2016-02-17)\n\n### Support for Golang 1.6\n\n### Determine I2C adaptor capabilities dynamically to avoid use of block I/O when unavailable\n\n### chip\n\n* Add support for GPIO & I2C interfaces on C.H.I.P. $9 computer\n\n### leap motion\n\n* Add support additional \"hand\" and \"gesture\" events\n\n### mqtt\n\n* Support latest update to Eclipse Paho MQTT client library\n\n### raspberry pi\n\n* Proper release of Pi Blaster for PWM pins\n\n### bebop\n\n* Prevent event race conditions on takeoff/landing\n\n### i2c\n\n* Support added for new i2c device:\n* MCP23017 Port Expander\n* Bugfixes:\n* Correct init and data parsing for MPU-6050\n* Correct handling of errors and buffering for Wiichuk\n\n## [0.10.0](https://github.com/hybridgroup/gobot/compare/0.8.2...0.10.0) (2015-10-27)\n\n### Refactor core to cleanup robot initialization and shutdown\n\n### Remove unnecessary goroutines spawned by NewEvent\n\n### api\n\n* Update Robeaux to v0.5.0\n\n### bebop\n\n* Add support for the Parrot Bebop drone\n\n### keyboard\n\n* Add support for keyboard control\n\n### gpio\n\n* Support added for 10 new Grove GPIO devices:\n* Grove Touch Sensor\n* Grove Sound Sensor\n* Grove Button\n* Grove Buzzer\n* Grove Led\n* Grove Light Sensor\n* Grove Vibration Sensor\n* Grove Rotary\n* Grove Relay\n* Grove Temperature Sensor\n\n### i2c\n\n* Support added for 2 new Grove i2c devices:\n* Grove Accelerometer\n* Grove LCD with RGB backlit display\n\n### docs\n\n* Many useful fixes and updates for docs, mostly contributed by our wonderful community.\n\n## [0.8.2](https://github.com/hybridgroup/gobot/compare/0.8.1...0.8.2) (2015-06-30)\n\n### firmata\n\n* Refactor firmata adaptor and split firmata protocol implementation into sub `client` package\n\n### gpio\n\n* Add support for LIDAR-Lite\n\n### raspi\n\n* Add PWM support via pi-blaster\n\n### sphero\n\n* Add `ConfigureLocator`, `ReadLocator` and `SetRotationRate`\n\n## [0.8.1](https://github.com/hybridgroup/gobot/compare/0.8...0.8.1) (2014-12-28)\n\n### spark\n\n* Add support for spark Events, Functions and Variables\n\n### sphero\n\n* Add `SetDataStreaming` and `ConfigureCollisionDetection` methods\n\n## [0.8](https://github.com/hybridgroup/gobot/compare/0.7.1...0.8) (2014-12-24)\n\n### Refactor core, gpio, and i2c interfaces\n\n### Correctly pass errors throughout packages and remove all panics\n\n### Numerous bug fixes and performance improvements\n\n### api\n\n* Update robeaux to v0.3.0\n\n### firmata\n\n* Add optional io.ReadWriteCloser parameter to FirmataAdaptor\n* Fix `thread exhaustion` error\n\n### cli\n\n* generator\n\n*  Update generator for new adaptor and driver interfaces\n\n*  Add driver, adaptor and project generators\n\n*  Add optional package name parameter\n\n## [0.7.1](https://github.com/hybridgroup/gobot/compare/0.7...0.7.1) (2014-11-17)\n\n### opencv\n\n* Fix pthread_create issue on Mac OS\n\n## [0.7](https://github.com/hybridgroup/gobot/compare/0.6.3...0.7) (2014-11-10)\n\n### Dramatically increased test coverage and documentation\n\n### api\n\n* Conform to the [cppp.io](https://gobot.io/x/cppp-io) spec\n* Add support for basic middleware\n* Add support for custom routes\n* Add SSE support\n\n### ardrone\n\n* Add optional parameter to specify the drones network address\n\n### core\n\n* Add `Once(e *Event, f func(s interface{})` Event function\n* Rename `Expect` to `Assert` and add `Refute` test helper function\n\n### i2c\n\n* Add support for MPL115A2\n* Add support for MPU6050\n\n### mavlink\n\n* Add support for `common` mavlink messages\n\n### mqtt\n\n* Add support for mqtt\n\n### raspi\n\n* Add support for the Raspberry Pi\n\n### sphero\n\n* Enable stop on sphero disconnect\n* Add `Collision` data struct\n\n### sysfs\n\n* Add generic linux filesystem gpio implementation\n\n## [0.6.3](https://github.com/hybridgroup/gobot/compare/0.6.2...0.6.3) (2014-09-24)\n\n### Add support for the Intel Edison\n\n## [0.6.2](https://github.com/hybridgroup/gobot/compare/0.6.1...0.6.2) (2014-07-28)\n\n### cli\n\n* Fix typo in generator\n\n### leap\n\n* Fix incorrect Port reference\n* Fix incorrect Event name\n\n### neurosky\n\n* Fix incorrect Event names\n\n### sphero\n\n* Correctly format output of GetRGB\n\n## [0.6.1](https://github.com/hybridgroup/gobot/compare/0.6...0.6.1) (2014-07-12)\n\n### cli\n\n* Fix template error in generator\n\n## [0.6](https://github.com/hybridgroup/gobot/compare/0.5.2...0.6) (2014-07-11)\n\n### api\n\n* Add robeaux support\n\n### core\n\n* Refactor `Connection` and `Device`\n* Connections are now a collection of Adaptors\n* Devices are now a collection of Drivers\n* Add `Event(string)` function instead of `Events[string]` for retrieving Driver event\n* Add `AddEvent(string)` function to register an event on a Driver\n\n### firmata\n\n* Fix slice bounds out of range error\n\n### sphero\n\n* Fix issue where the driver would not halt correctly on OSX\n\n## [0.5.2](https://github.com/hybridgroup/gobot/compare/0.5.1...0.5.2) (2014-06-30)\n\n### beaglebone\n\n* Add `DirectPinDriver`\n* Ensure slots are properly loaded\n\n## [0.5.1](https://github.com/hybridgroup/gobot/compare/0.5...0.5.1) (2014-06-28)\n\n### core\n\n* Add `Version()` function for Gobot version retrieval\n\n### firmata\n\n* Fix issue with reading analog inputs\n* Add `data` event for `AnalogSensorDriver`\n\n## [0.5](https://github.com/hybridgroup/gobot/compare/0.4...0.5) (2014-06-17)\n\n### Idomatic clean up\n\n* Removed reflections throughout packages\n* All officially supported platforms are now in ./platforms\n* API is now a new package ./api\n* All platforms examples are in ./examples\n* Replaced martini with net/http\n* Replaced ginkgo/gomega with system testing package\n* Refactor gobot/robot/device commands\n* Added Event type\n* Replaced Manager type with Gobot type\n* Every` and `After` now accept `time.Duration`\n* Removed reflection helper methods\n\n## [0.4](https://github.com/hybridgroup/gobot/compare/0.3...0.4) (2014-06-12)\n\n### API\n\n* commands now return an array of results\n\n### Add\n\n* cors support\n* basic auth support to api\n* Joystick & Neurosky platforms to README\n* utils tests\n* coveralls\n\n### Allow\n\n* user to set Host and Port when starting up Api\n\n### Change\n\n* README image source to gobot-site repo\n* startApi to private function\n\n### Display\n\n* warning when using API without SSL\n\n### Fixed\n\n* the logo link\n\n### Format\n\n* device and connection type\n\n### Green\n\n* tests\n\n### More\n\n* api test coverage\n* tests\n\n### Refactor\n\n* tests\n\n### Remove\n\n* Travis build from IRC\n* ConnectToSerial\n* ConnectToTcp util\n* Reconnect and Disconnect from AdaptorInterface\n\n### Robot\n\n* is now a pointer\n\n### SSL\n\n* support in Api\n\n### Update\n\n* README.md\n* README for new API security features\n* api robeaux api compatibility\n* .travis.yml\n* generated driver\n* examples\n* coveralls badge\n* platforms and drivers\n\n### Use\n\n* go-martini/martini\n\n### WIP\n\n* for API host/port params\n* api tests\n\n\n## [0.3](https://github.com/hybridgroup/gobot/compare/0.2...0.3) (2014-04-07)\n\n### Add\n\n* Godeps file\n* IRC notifications to Travis builds\n* tests for generated projects\n* Init function to DriverInterface\n* Halt function to DriverInterface\n* more GPIO devices to README\n* scale functions\n\n### All\n\n* updates for new gonuts/commander api\n\n### Fix\n\n* typo in generator\n\n### Merge\n\n* branch 'master' of github.com:hybridgroup/gobot\n\n### Update\n\n* generator\n\n## [0.2](https://github.com/hybridgroup/gobot/compare/0.1...0.2) (2014-02-04)\n\n### Add\n\n* robeaux submodule\n* Finalize on SIGINT\n* Publish function for driver events\n* device test coverage\n* manager and robot test coverage\n\n### Clean\n\n* up tests\n\n### Do\n\n* not run tests on gobot.io branch\n\n### JSON\n\n* compatibility with cylon and artoo\n\n### More\n\n* test coverage\n\n### Refactor\n\n* robot and manager\n\n### Remove\n\n* robeaux submodule\n\n### Update\n\n* README.md\n* examples\n\n### Use\n\n* golang log\n\n### WIP\n\n* robeaux support\n\n## 0.1 (2013-12-30)\n\n### Accept\n\n* POST and GET for commands\n\n### Adaptor\n\n* and driver generator\n\n### Add\n\n* support for additional parameters\n* serialport support\n* Travis banner to README\n* api commands\n* POST command\n* manager example\n* robot manager\n* Sphero example\n* Digispark to list of supported platforms\n* helper functions\n* Driver channel for events\n* port to adaptor\n\n### Alter\n\n* structure\n\n### Beaglebone\n\n* Black GPIO\n\n### Clean\n\n* up files\n* up variables\n* up some comments\n\n### Correctly\n\n* start drivers\n\n### DRY\n\n* up On function\n\n### Dots\n\n* for ignoring imports\n\n### Drop\n\n* unnecessary api parameters\n\n### Expose\n\n* robot functions via api\n\n### Fix\n\n* example\n\n### Go\n\n* fmt examples\n\n### Initial\n\n* GETs for api\n* commit\n\n### Install\n\n* ginkgo and gomega dependencies\n\n### Merge\n\n* branch 'examples'\n* branch 'master' into ginkgo\n* branch 'master' into ginkgo\n\n### More\n\n* WIP of base structs\n\n### Now\n\n* using Connection.Connect()\n\n### Pending\n\n* tests for Robot\n\n### Proper\n\n* formatting for README example\n\n### Properly\n\n* set default interval\n\n### Refactor\n\n* robot name assignment func, and tests to prove it\n\n### Reformat\n\n* examples using gofmt\n* source using gofmt\n\n### Remove\n\n* Params from driver struct\n* extra nesting\n\n### Rename\n\n* Gobot struct to Manager\n\n### Set\n\n* GOMAXPROCS property in GobotManager\n\n### Skeleton\n\n* for ginkgo/gomega testing\n\n### Small\n\n* refactor\n* robot refactor\n\n### StartDriver\n\n* is now optional\n\n### Switch\n\n* to adaptor, driver, connection and device interfaces\n\n### Travis\n\n* lang build\n\n### Tweak\n\n* json output\n\n### Update\n\n* examples\n* README.md\n* timers and fix issues\n\n### WIP\n\n* multiple robot support\n* connections and devices\n\n### Work\n\n* is optional\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1533203125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at gobot@hybridgroup.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 6.02734375,
          "content": "# Contributing to Gobot\n\n## Target Branch\n\n**Please open all non-hotfix PRs against the `dev` branch!**\n\nGobot follows a [\"git flow\"](http://nvie.com/posts/a-successful-git-branching-model/)-style model for managing development.\n\n## Issue Contributions\n\nWhen opening new issues or commenting on existing issues on this repository\nplease make sure discussions are related to concrete technical issues with the\nGobot software.\n\n## Code Contributions\n\nThe Gobot project welcomes new contributors.\n\nThis document will guide you through the contribution process.\n\nWhat do you want to contribute?\n\n* I want to otherwise correct or improve the docs or examples\n* I want to report a bug\n* I want to add some feature or functionality to an existing hardware platform\n* I want to add support for a new hardware platform\n\nDescriptions for each of these will eventually be provided below.\n\n## General Guidelines\n\n* All active development is in the `dev` branch. New or updated features must be added to the `dev` branch.\n* All patches must be provided under the Apache 2.0 License\n* Please use the -S option in git to \"sign off\" that the commit is your work and you are providing it under the\n  Apache 2.0 License\n* Submit a Github Pull Request to the appropriate branch and describe the changes sufficient.\n* Please follow our naming conventions for Pull Requests.\n* We will look at the patch, test it out, and give you feedback.\n* Avoid doing minor whitespace changes, renamings, etc. along with merged content. These will be done by the maintainers\n  from time to time but they can complicate merges and should be done separately.\n* Take care to maintain the existing coding style.\n* `golangci-lint` your code, see [instruction for local installation](https://golangci-lint.run/usage/install/#local-installation)\n* `gofumpt` your code (the go version will be automatically obtained from go.mod), see [instructions](https://github.com/mvdan/gofumpt/blob/master/README.md)\n* Add unit tests for any new or changed functionality and run tests with `-race` flag activated.\n* All pull requests should be \"fast forward\"\n  * If there are commits after yours use “git rebase -i <new_head_branch>”\n  * If you have local changes you may need to use “git stash”\n  * For git help see [progit](http://git-scm.com/book) which is an awesome (and free) book on git\n* Use one of the latest existing platforms/drivers etc. as a blueprint for creating a new one\n\n## Creating Pull Requests\n\nBecause Gobot makes use of self-referencing import paths, you will want\nto implement the local copy of your fork as a remote on your copy of the\noriginal Gobot repo. Katrina Owen has [an excellent post on this workflow](https://splice.com/blog/contributing-open-source-git-repositories-go/).\n\nThe basics are as follows:\n\n1. Fork the project via the GitHub UI\n\n2. `git clone` the upstream repo and set it up as the `upstream` remote and your own repo as the `origin` remote:\n\n    `git clone https://github.com/hybridgroup/gobot.git`\n    `cd $GOPATH/src/gobot.io/x/gobot`\n    `git remote rename origin upstream`\n    `git remote add origin git@github.com/YOUR_GITHUB_NAME/gobot`\n\n    All import paths should now work fine assuming that you've got the\n    proper branch checked out.\n\n3. Get all dependencies:\n\n   * `cd $GOPATH/src/gobot.io/x/gobot`\n   * `go mod tidy` will fetch  all the dependencies at their needed version.\n\n## Landing Pull Requests\n\n(This is for committers only. If you are unsure whether you are a committer, you are not.)\n\n1. Set the contributor's fork as an upstream on your checkout\n\n   `git remote add contrib1 https://github.com/contrib1/gobot`\n\n2. Fetch the contributor's repo\n\n   `git fetch contrib1`\n\n3. Checkout a copy of the PR branch\n\n   `git checkout pr-1234 --track contrib1/branch-for-pr-1234`\n\n4. Review the PR as normal\n\n5. Land when you're ready via the GitHub UI\n\n## Convention for Pull Request Descriptions\n\nMaking unified descriptions helps a lot to generate the [CHANGELOG](./CHANGELOG.md) for the next release.\nWe support the style from <https://www.conventionalcommits.org>, so you can use something like this:\n\n* type(scope): description\n* i2c(PCF8583): added\n* gpio(HD44780): fix wrong constants\n* raspi(PWM): refactor usage\n* docs(core): usage of Kernel driver\n* or alternative: core(docs): usage of Kernel driver\n* build(style): adjust rule for golangci-lint\n\nWe try to keep it as simple as possible:\n\n* Do not use \"fix\" or \"bugfix\" for `type`\n* Please assign \"fix\", \"style\", \"refactor\", \"perf\", \"test\" etc. to the related `type` (driver-type/platform-name etc.),\n  and start the description with e.g. \"fix...\", \"test...\" etc.\n* For `type` use the name of the deepest folder (e.g. i2c/raspi/system). Feel free to order \"examples\" to the\n  related driver.\n* Further values for `type` are: \"docs\", \"build\", \"core\"\n* Please use \"build\" instead of \"CI\"\n* For the `scope` use the name of the driver or feature (e.g. grove/PWM).\n* If unsure don't panic, follow your feeling. Possibly the reviewer will correct it or suggest a better description.\n\n## Developer's Certificate of Origin 1.0\n\nBy making a contribution to this project, I certify that:\n\n* (a) The contribution was created in whole or in part by me and I\n  have the right to submit it under the open source license indicated\n  in the file; or\n* (b) The contribution is based upon previous work that, to the best\n  of my knowledge, is covered under an appropriate open source license\n  and I have the right under that license to submit that work with\n  modifications, whether created in whole or in part by me, under the\n  same open source license (unless I am permitted to submit under a\n  different license), as indicated in the file; or\n* (c) The contribution was provided directly to me by some other\n  person who certified (a), (b) or (c) and I have not modified it.\n\n## Code of Conduct\n\nGobot is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\n[You can read about it here](CODE_OF_CONDUCT.md).\n\n## Origins\n\nThis document is based on the original [io.js contribution guidelines](https://github.com/nodejs/io.js/blob/main/CONTRIBUTING.md)\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 0.5517578125,
          "content": "Copyright (c) 2013-2020 The Hybrid Group\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.607421875,
          "content": "# include also examples in other than ./examples folder\nALL_EXAMPLES := $(shell grep -l -r --include \"*.go\" 'build example' ./)\n# prevent examples with gocv (opencv) dependencies\nEXAMPLES_NO_GOCV := $(shell grep -L 'gocv' $(ALL_EXAMPLES))\n# used examples\nEXAMPLES := $(EXAMPLES_NO_GOCV)\n\n.PHONY: test test_race test_cover robeaux version_check fmt_check fmt_fix examples examples_check examples_fmt_fix $(EXAMPLES)\n\n# opencv platform currently skipped to prevent install of preconditions\nincluding_except := $(shell go list ./... | grep -v platforms/opencv)\n\n# Run tests on nearly all directories without test cache, with race detection\ntest_race:\n\tgo test -failfast -count=1 -race $(including_except) -tags libusb\n\n# Run tests on nearly all directories without test cache\ntest:\n\tgo test -failfast -count=1 $(including_except)\n\n# Test, generate and show coverage in browser\ntest_cover:\n\tgo test -v $(including_except) -coverprofile=coverage.txt ; \\\n\tgo tool cover -html=coverage.txt ; \\\n\nrobeaux:\nifeq (,$(shell which go-bindata))\n\t$(error robeaux not built! https://github.com/jteeuwen/go-bindata is required to build robeaux assets )\nendif\n\tcd api ; \\\n\tnpm install robeaux ; \\\n\tcp -r node_modules/robeaux robeaux-tmp ; \\\n\tcd robeaux-tmp ; \\\n\trm Makefile package.json README.markdown ; \\\n\ttouch css/fonts.css ; \\\n\techo \"Updating robeaux...\" ; \\\n\tgo-bindata -pkg=\"robeaux\" -o robeaux.go -ignore=\\\\.git ./... ; \\\n\tmv robeaux.go ../robeaux ; \\\n\tcd .. ; \\\n\trm -rf robeaux-tmp/ ; \\\n\trm -rf node_modules/ ; \\\n\tgo fmt ./robeaux/robeaux.go ; \\\n\n# Check for installed and module version match. Will exit with code 50 if not match.\n# There is nothing bad in general, if you program with a higher version.\n# At least the recipe \"fmt_fix\" will not work in that case.\nversion_check:\n\t@gv=$$(echo $$(go version) | sed \"s/^.* go\\([0-9].[0-9]*\\).*/\\1/\") ; \\\n\tmv=$$(grep -m 1 'go 1.' ./go.mod | sed \"s/^go \\([0-9].[0-9]*\\).*/\\1/\") ; \\\n\techo \"go: $${gv}.*, go.mod: $${mv}\" ; \\\n\tif [ \"$${gv}\" != \"$${mv}\" ]; then exit 50; fi ; \\\n\n# Check for bad code style and other issues (gofumpt and gofmt check is activated for the linter)\nfmt_check:\n\tgolangci-lint run -v\n\n# Fix bad code style (the go version will be automatically obtained from go.mod)\nfmt_fix: \n\t$(MAKE) version_check || true\n\tgofumpt -l -w .\n\tgolangci-lint run -v --fix\n\nexamples: $(EXAMPLES)\n\nexamples_check: \n\t$(MAKE) CHECK=ON examples\n\nexamples_fmt_fix: \n\t$(MAKE) CHECK=FMT examples\n\n$(EXAMPLES):\nifeq ($(CHECK),ON)\n\tgo vet ./$@\nelse ifeq ($(CHECK),FMT)\n\tgofumpt -l -w ./$@\n\tgolangci-lint run ./$@ --fix --build-tags example,libusb --disable forcetypeassert --disable noctx\nelse\n\tgo build -o /tmp/gobot_examples/$@ ./$@\nendif\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.5849609375,
          "content": "[![Gobot](https://raw.githubusercontent.com/hybridgroup/gobot-site/master/source/images/elements/gobot-logo-small.png)](http://gobot.io/)\n\n[![GoDoc](https://godoc.org/gobot.io/x/gobot/v2?status.svg)](https://godoc.org/gobot.io/x/gobot/v2)\n[![CircleCI Build status](https://circleci.com/gh/hybridgroup/gobot/tree/dev.svg?style=svg)](https://circleci.com/gh/hybridgroup/gobot/tree/dev)\n[![Appveyor Build status](https://ci.appveyor.com/api/projects/status/ix29evnbdrhkr7ud/branch/dev?svg=true)](https://ci.appveyor.com/project/deadprogram/gobot/branch/dev)\n[![codecov](https://codecov.io/gh/hybridgroup/gobot/branch/dev/graph/badge.svg)](https://codecov.io/gh/hybridgroup/gobot)\n[![Go Report Card](https://goreportcard.com/badge/hybridgroup/gobot)](https://goreportcard.com/report/hybridgroup/gobot)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/hybridgroup/gobot/blob/release/LICENSE.txt)\n\nGobot (<https://gobot.io/>) is a framework using the Go programming language (<https://golang.org/>) for robotics, physical\ncomputing, and the Internet of Things.\n\nIt provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the\nsame time.\n\nWant to run Go directly on microcontrollers? Check out our sister project TinyGo (<https://tinygo.org/>)\n\n## Getting Started\n\n### Get in touch\n\nGet the Gobot source code by running this commands:\n\n```sh\ngit clone https://github.com/hybridgroup/gobot.git\ngit checkout release\n```\n\nAfterwards have a look at the [examples directory](./examples). You need to find an example matching your platform for your\nfirst test (e.g. \"raspi_blink.go\"). Than build the binary (cross compile), transfer it to your target and run it.\n\n`env GOOS=linux GOARCH=arm GOARM=5 go build -o ./output/my_raspi_bink examples/raspi_blink.go`\n\n> Building the code on your local machine with the example code above will create a binary for ARMv5. This is probably not\n> what you need for your specific target platform. Please read also the platform specific documentation in the platform\n> subfolders.\n\n### Create your first project\n\nCreate a new folder and a new Go module project.\n\n```sh\nmkdir ~/my_gobot_example\ncd ~/my_gobot_example\ngo mod init my.gobot.example.com\n```\n\nCopy your example file besides the go.mod file, import the requirements and build.\n\n```sh\ncp /<path to gobot folder>/examples/raspi_blink.go ~/my_gobot_example/\ngo mod tidy\nenv GOOS=linux GOARCH=arm GOARM=5 go build -o ./output/my_raspi_bink raspi_blink.go\n```\n\nNow you are ready to modify the example and test your changes. Start by removing the build directives at the beginning\nof the file.\n\n## Examples\n\n### Gobot with Arduino\n\n```go\npackage main\n\nimport (\n  \"time\"\n\n  \"gobot.io/x/gobot/v2\"\n  \"gobot.io/x/gobot/v2/drivers/gpio\"\n  \"gobot.io/x/gobot/v2/platforms/firmata\"\n)\n\nfunc main() {\n  firmataAdaptor := firmata.NewAdaptor(\"/dev/ttyACM0\")\n  led := gpio.NewLedDriver(firmataAdaptor, \"13\")\n\n  work := func() {\n    gobot.Every(1*time.Second, func() {\n      if err := led.Toggle(); err != nil {\n        fmt.Println(err)\n      }\n    })\n  }\n\n  robot := gobot.NewRobot(\"bot\",\n    []gobot.Connection{firmataAdaptor},\n    []gobot.Device{led},\n    work,\n  )\n\n  if err := robot.Start(); err != nil {\n    panic(err)\n  }\n}\n```\n\n### Gobot with Sphero\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n\n  \"gobot.io/x/gobot/v2\"\n  \"gobot.io/x/gobot/v2/drivers/serial\"\n  \"gobot.io/x/gobot/v2/platforms/serialport\"\n)\n\nfunc main() {\n  adaptor := serialport.NewAdaptor(\"/dev/rfcomm0\")\n  driver := sphero.NewSpheroDriver(adaptor)\n\n  work := func() {\n    gobot.Every(3*time.Second, func() {\n      driver.Roll(30, uint16(gobot.Rand(360)))\n    })\n  }\n\n  robot := gobot.NewRobot(\"sphero\",\n    []gobot.Connection{adaptor},\n    []gobot.Device{driver},\n    work,\n  )\n\n  if err := robot.Start(); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n### \"Metal\" Gobot\n\nYou can use the entire Gobot framework as shown in the examples above (\"Classic\" Gobot), or you can pick and choose from\nthe various Gobot packages to control hardware with nothing but pure idiomatic Golang code (\"Metal\" Gobot). For example:\n\n```go\npackage main\n\nimport (\n  \"gobot.io/x/gobot/v2/drivers/gpio\"\n  \"gobot.io/x/gobot/v2/platforms/intel-iot/edison\"\n  \"time\"\n)\n\nfunc main() {\n  e := edison.NewAdaptor()\n  if err := e.Connect(); err != nil {\n    fmt.Println(err)\n  }\n\n  led := gpio.NewLedDriver(e, \"13\")\n  if err := led.Start(); err != nil {\n    fmt.Println(err)\n  }\n\n  for {\n    if err := led.Toggle(); err != nil {\n      fmt.Println(err)\n    }\n    time.Sleep(1000 * time.Millisecond)\n  }\n}\n```\n\n### \"Manager\" Gobot\n\nYou can also use the full capabilities of the framework aka \"Manager Gobot\" to control swarms of robots or other features\nsuch as the built-in API server. For example:\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"time\"\n\n  \"gobot.io/x/gobot/v2\"\n  \"gobot.io/x/gobot/v2/api\"\n  \"gobot.io/x/gobot/v2/drivers/common/spherocommon\"\n  \"gobot.io/x/gobot/v2/drivers/serial\"\n  \"gobot.io/x/gobot/v2/platforms/serialport\"\n)\n\nfunc NewSwarmBot(port string) *gobot.Robot {\n  spheroAdaptor := serialport.NewAdaptor(port)\n  spheroDriver := sphero.NewSpheroDriver(spheroAdaptor, serial.WithName(\"Sphero\" + port))\n\n  work := func() {\n    spheroDriver.Stop()\n\n    _ = spheroDriver.On(sphero.CollisionEvent, func(data interface{}) {\n      fmt.Println(\"Collision Detected!\")\n    })\n\n    gobot.Every(1*time.Second, func() {\n      spheroDriver.Roll(100, uint16(gobot.Rand(360)))\n    })\n    gobot.Every(3*time.Second, func() {\n      spheroDriver.SetRGB(uint8(gobot.Rand(255)),\n        uint8(gobot.Rand(255)),\n        uint8(gobot.Rand(255)),\n      )\n    })\n  }\n\n  robot := gobot.NewRobot(\"sphero\",\n    []gobot.Connection{spheroAdaptor},\n    []gobot.Device{spheroDriver},\n    work,\n  )\n\n  return robot\n}\n\nfunc main() {\n  manager := gobot.NewManager()\n  api.NewAPI(manager).Start()\n\n  spheros := []string{\n    \"/dev/rfcomm0\",\n    \"/dev/rfcomm1\",\n    \"/dev/rfcomm2\",\n    \"/dev/rfcomm3\",\n  }\n\n  for _, port := range spheros {\n    manager.AddRobot(NewSwarmBot(port))\n  }\n\n  if err := manager.Start(); err != nil {\n    panic(err)\n  }\n}\n```\n\n## Hardware Support\n\nGobot has a extensible system for connecting to hardware devices. The following robotics and physical computing\nplatforms are currently supported:\n\n- [Arduino](http://www.arduino.cc/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/firmata)\n- Audio <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/audio)\n- [Beaglebone Black](http://beagleboard.org/boards) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/beaglebone)\n- [Beaglebone PocketBeagle](http://beagleboard.org/pocket/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/beaglebone)\n- [Bluetooth LE](https://www.bluetooth.com/what-is-bluetooth-technology/bluetooth-technology-basics/low-energy) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/bleclient)\n- [C.H.I.P](http://www.nextthing.co/pages/chip) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/chip)\n- [C.H.I.P Pro](https://docs.getchip.com/chip_pro.html) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/chip)\n- [Digispark](http://digistump.com/products/1) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/digispark)\n- [DJI Tello](https://www.ryzerobotics.com/tello) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/dji/tello)\n- [DragonBoard](https://developer.qualcomm.com/hardware/dragonboard-410c) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/dragonboard)\n- [ESP8266](http://esp8266.net/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/firmata)\n- [GoPiGo 3](https://www.dexterindustries.com/gopigo3/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/dexter/gopigo3)\n- [Intel Curie](https://www.intel.com/content/www/us/en/products/boards-kits/curie.html) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/intel-iot/curie)\n- [Intel Edison](http://www.intel.com/content/www/us/en/do-it-yourself/edison.html) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/intel-iot/edison)\n- [Intel Joule](http://intel.com/joule/getstarted) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/intel-iot/joule)\n- [Jetson Nano](https://developer.nvidia.com/embedded/jetson-nano/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/jetson)\n- [Joystick](http://en.wikipedia.org/wiki/Joystick) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/joystick)\n- [Keyboard](https://en.wikipedia.org/wiki/Computer_keyboard) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/keyboard)\n- [Leap Motion](https://www.leapmotion.com/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/leap)\n- [MavLink](http://qgroundcontrol.org/mavlink/start) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/mavlink)\n- [MegaPi](http://www.makeblock.com/megapi) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/megapi)\n- [Microbit](http://microbit.org/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/microbit)\n- [MQTT](http://mqtt.org/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/mqtt)\n- [NanoPi NEO](https://wiki.friendlyelec.com/wiki/index.php/NanoPi_NEO) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/nanopi)\n- [NATS](http://nats.io/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/nats)\n- [Neurosky](http://neurosky.com/products-markets/eeg-biosensors/hardware/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/neurosky)\n- [OpenCV](http://opencv.org/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/opencv)\n- [Particle](https://www.particle.io/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/particle)\n- [Parrot ARDrone 2.0](http://ardrone2.parrot.com/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/parrot/ardrone)\n- [Parrot Bebop](http://www.parrot.com/usa/products/bebop-drone/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/parrot/bebop)\n- [Parrot Minidrone](https://www.parrot.com/us/minidrones) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/parrot/minidrone)\n- [Pebble](https://www.getpebble.com/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/pebble)\n- [Radxa Rock Pi 4](https://wiki.radxa.com/Rock4/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/rockpi)\n- [Raspberry Pi](http://www.raspberrypi.org/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/raspi)\n- [Serial Port](https://en.wikipedia.org/wiki/Serial_port) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/serialport)\n- [Sphero](http://www.sphero.com/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/sphero/sphero)\n- [Sphero BB-8](http://www.sphero.com/bb8) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/sphero/bb8)\n- [Sphero Ollie](http://www.sphero.com/ollie) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/sphero/ollie)\n- [Sphero SPRK+](http://www.sphero.com/sprk-plus) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/sphero/sprkplus)\n- [Tinker Board](https://www.asus.com/us/Single-Board-Computer/Tinker-Board/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/tinkerboard)\n- [UP2](http://www.up-board.org/upsquared/) <=> [Package](https://github.com/hybridgroup/gobot/blob/release/platforms/upboard/up2)\n\nSupport for many devices that use Analog Input/Output (AIO) have a shared set of drivers provided using\nthe `gobot/drivers/aio` package:\n\n- [AIO](https://en.wikipedia.org/wiki/Analog-to-digital_converter) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/aio)\n  - Analog Actuator\n  - Analog Sensor\n  - Grove Light Sensor\n  - Grove Piezo Vibration Sensor\n  - Grove Rotary Dial\n  - Grove Sound Sensor\n  - Grove Temperature Sensor\n  - Temperature Sensor (supports linear and NTC thermistor in normal and inverse mode)\n  - Thermal Zone Temperature Sensor\n\nSupport for many devices that use Bluetooth LE (BLE) have a shared set of drivers provided using\nthe `gobot/drivers/ble` package:\n\n- [BLE](http://en.wikipedia.org/wiki/Bluetooth_low_energy) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/ble)\n  - Battery Service\n  - Device Information Service\n  - Generic Access Service\n  - Microbit: AccelerometerDriver\n  - Microbit: ButtonDriver\n  - Microbit: IOPinDriver\n  - Microbit: LEDDriver\n  - Microbit: MagnetometerDriver\n  - Microbit: TemperatureDriver\n  - Sphero: BB8\n  - Sphero: Ollie\n  - Sphero: SPRK+\n\nSupport for many devices that use General Purpose Input/Output (GPIO) have a shared set of drivers provided using\nthe `gobot/drivers/gpio` package:\n\n- [GPIO](https://en.wikipedia.org/wiki/General_Purpose_Input/Output) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/gpio)\n  - AIP1640 LED Dot Matrix/7 Segment Controller\n  - Button\n  - Buzzer\n  - Direct Pin\n  - EasyDriver\n  - Grove Button (by using driver for Button)\n  - Grove Buzzer (by using driver for Buzzer)\n  - Grove LED (by using driver for LED)\n  - Grove Magnetic Switch (by using driver for Button)\n  - Grove Relay (by using driver for Relay)\n  - Grove Touch Sensor (by using driver for Button)\n  - HC-SR04 Ultrasonic Ranging Module\n  - HD44780 LCD controller\n  - LED\n  - Makey Button (by using driver for Button)\n  - MAX7219 LED Dot Matrix\n  - Motor\n  - Proximity Infra Red (PIR) Motion Sensor\n  - Relay\n  - RGB LED\n  - Servo\n  - Stepper Motor\n  - TM1638 LED Controller\n\nSupport for devices that use Inter-Integrated Circuit (I2C) have a shared set of drivers provided using\nthe `gobot/drivers/i2c` package:\n\n- [I2C](https://en.wikipedia.org/wiki/I%C2%B2C) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/i2c)\n  - Adafruit 1109 2x16 RGB-LCD with 5 keys\n  - Adafruit 2327 16-Channel PWM/Servo HAT Hat\n  - Adafruit 2348 DC and Stepper Motor Hat\n  - ADS1015 Analog to Digital Converter\n  - ADS1115 Analog to Digital Converter\n  - ADXL345 Digital Accelerometer\n  - BH1750 Digital Luminosity/Lux/Light Sensor\n  - BlinkM LED\n  - BME280 Barometric Pressure/Temperature/Altitude/Humidity Sensor\n  - BMP180 Barometric Pressure/Temperature/Altitude Sensor\n  - BMP280 Barometric Pressure/Temperature/Altitude Sensor\n  - BMP388 Barometric Pressure/Temperature/Altitude Sensor\n  - DRV2605L Haptic Controller\n  - Generic driver for read and write values to/from register address\n  - Grove Digital Accelerometer\n  - GrovePi Expansion Board\n  - Grove RGB LCD\n  - HMC6352 Compass\n  - HMC5883L 3-Axis Digital Compass\n  - INA3221 Voltage Monitor\n  - JHD1313M1 LCD Display w/RGB Backlight\n  - L3GD20H 3-Axis Gyroscope\n  - LIDAR-Lite\n  - MCP23017 Port Expander\n  - MMA7660 3-Axis Accelerometer\n  - MPL115A2 Barometric Pressure/Temperature\n  - MPU6050 Accelerometer/Gyroscope\n  - PCA9501 8-bit I/O port with interrupt, 2-kbit EEPROM\n  - PCA953x LED Dimmer for PCA9530 (2-bit), PCA9533 (4-bit), PCA9531 (8-bit), PCA9532 (16-bit)\n  - PCA9685 16-channel 12-bit PWM/Servo Driver\n  - PCF8583 clock and calendar or event counter, 240 x 8-bit RAM\n  - PCF8591 8-bit 4xA/D & 1xD/A converter\n  - SHT2x Temperature/Humidity\n  - SHT3x-D Temperature/Humidity\n  - SSD1306 OLED Display Controller\n  - TSL2561 Digital Luminosity/Lux/Light Sensor\n  - Wii Nunchuck Controller\n  - YL-40 Brightness/Temperature sensor, Potentiometer, analog input, analog output Driver\n\nSupport for many devices that use Serial communication (UART) have a shared set of drivers provided using\nthe `gobot/drivers/serial` package:\n\n- [UART](https://en.wikipedia.org/wiki/Serial_port) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/serial)\n  - Sphero: Sphero\n  - Neurosky: MindWave\n  - MegaPi: MotorDriver\n\nSupport for devices that use Serial Peripheral Interface (SPI) have\na shared set of drivers provided using the `gobot/drivers/spi` package:\n\n- [SPI](https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus) <=> [Drivers](https://github.com/hybridgroup/gobot/blob/release/drivers/spi)\n  - APA102 Programmable LEDs\n  - MCP3002 Analog/Digital Converter\n  - MCP3004 Analog/Digital Converter\n  - MCP3008 Analog/Digital Converter\n  - MCP3202 Analog/Digital Converter\n  - MCP3204 Analog/Digital Converter\n  - MCP3208 Analog/Digital Converter\n  - MCP3304 Analog/Digital Converter\n  - MFRC522 RFID Card Reader\n  - SSD1306 OLED Display Controller\n\n## API\n\nGobot includes a RESTful API to query the status of any robot running within a group, including the connection and\ndevice status, and execute device commands.\n\nTo activate the API, import the `gobot.io/x/gobot/v2/api` package and instantiate the `API` like this:\n\n```go\n  manager := gobot.NewManager()\n  api.NewAPI(manager).Start()\n```\n\nYou can also specify the api host and port, and turn on authentication:\n\n```go\n  manager := gobot.NewManager()\n  server := api.NewAPI(manager)\n  server.Port = \"4000\"\n  server.AddHandler(api.BasicAuth(\"gort\", \"klatuu\"))\n  server.Start()\n```\n\nYou may access the [robeaux](https://github.com/hybridgroup/robeaux) React.js interface with Gobot by navigating to `http://localhost:3000/index.html`.\n\n## CLI\n\nGobot uses the Gort [http://gort.io](http://gort.io) Command Line Interface (CLI) so you can access important features\nright from the command line. We call it \"RobotOps\", aka \"DevOps For Robotics\". You can scan, connect, update device\nfirmware, and more!\n\n## Documentation\n\nWe're always adding documentation to our web site at <https://gobot.io/> please check there as we continue to work on Gobot\n\nThank you!\n\n## Need help?\n\n- Issues: <https://github.com/hybridgroup/gobot/issues>\n- Twitter: [@gobotio](https://twitter.com/gobotio)\n- Slack: [https://gophers.slack.com/messages/C0N5HDB08](https://gophers.slack.com/messages/C0N5HDB08)\n- Mailing list: <https://groups.google.com/forum/#!forum/gobotio>\n\n## Contributing\n\nFor our contribution guidelines, please go to [https://github.com/hybridgroup/gobot/blob/release/CONTRIBUTING.md\n](https://github.com/hybridgroup/gobot/blob/release/CONTRIBUTING.md\n).\n\nGobot is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\n[You can read about it here](https://github.com/hybridgroup/gobot/blob/release/CODE_OF_CONDUCT.md).\n\n## License\n\nCopyright (c) 2013-2020 The Hybrid Group. Licensed under the Apache 2.0 license.\n\nThe Contributor Covenant is released under the Creative Commons Attribution 4.0 International Public License, which\nrequires that attribution be included.\n"
        },
        {
          "name": "adaptor.go",
          "type": "blob",
          "size": 10.3330078125,
          "content": "package gobot\n\nimport (\n\t\"io\"\n\t\"time\"\n)\n\n// DigitalPinOptioner is the interface to provide the possibility to change pin behavior for the next usage\ntype DigitalPinOptioner interface {\n\t// SetLabel change the pins label\n\tSetLabel(label string) (changed bool)\n\t// SetDirectionOutput sets the pins direction to output with the given initial value\n\tSetDirectionOutput(initialState int) (changed bool)\n\t// SetDirectionInput sets the pins direction to input\n\tSetDirectionInput() (changed bool)\n\t// SetActiveLow initializes the pin with inverse reaction (applies on input and output).\n\tSetActiveLow() (changed bool)\n\t// SetBias initializes the pin with the given bias (applies on input and output).\n\tSetBias(bias int) (changed bool)\n\t// SetDrive initializes the output pin with the given drive option.\n\tSetDrive(drive int) (changed bool)\n\t// SetDebounce initializes the input pin with the given debounce period.\n\tSetDebounce(period time.Duration) (changed bool)\n\t// SetEventHandlerForEdge initializes the input pin for edge detection to call the event handler on specified edge.\n\t// lineOffset is within the GPIO chip (needs to transformed to the pin id), timestamp is the detection time,\n\t// detectedEdge contains the direction of the pin changes, seqno is the sequence number for this event in the sequence\n\t// of events for all the lines in this line request, lseqno is the same but for this line\n\tSetEventHandlerForEdge(handler func(lineOffset int, timestamp time.Duration, detectedEdge string, seqno uint32,\n\t\tlseqno uint32), edge int) (changed bool)\n\t// SetPollForEdgeDetection use a discrete input polling method to detect edges. A poll interval of zero or smaller\n\t// will deactivate this function. Please note: Using this feature is CPU consuming and less accurate than using cdev\n\t// event handler (gpiod implementation) and should be done only if the former is not implemented or not working for\n\t// the adaptor. E.g. sysfs driver in gobot has not implemented edge detection yet. The function is only useful\n\t// together with SetEventHandlerForEdge() and its corresponding With*() functions.\n\tSetPollForEdgeDetection(pollInterval time.Duration, pollQuitChan chan struct{}) (changed bool)\n}\n\n// DigitalPinOptionApplier is the interface to apply options to change pin behavior immediately\ntype DigitalPinOptionApplier interface {\n\t// ApplyOptions apply all given options to the pin immediately\n\tApplyOptions(options ...func(DigitalPinOptioner) bool) error\n}\n\n// DigitalPinner is the interface for system gpio interactions\ntype DigitalPinner interface {\n\t// Export exports the pin for use by the adaptor\n\tExport() error\n\t// Unexport releases the pin from the adaptor, so it is free for the operating system\n\tUnexport() error\n\t// Read reads the current value of the pin\n\tRead() (int, error)\n\t// Write writes to the pin\n\tWrite(val int) error\n\t// DigitalPinOptionApplier is the interface to change pin behavior immediately\n\tDigitalPinOptionApplier\n}\n\n// DigitalPinValuer is the interface to get pin behavior for the next usage. The interface is and should be rarely used.\ntype DigitalPinValuer interface {\n\t// DirectionBehavior gets the direction behavior when the pin is used the next time.\n\t// This means its possibly not in this direction type at the moment.\n\tDirectionBehavior() string\n}\n\n// DigitalPinnerProvider is the interface that an Adaptor should implement to allow clients to obtain\n// access to any DigitalPin's available on that board. If the pin is initially acquired, it is an input.\n// Pin direction and other options can be changed afterwards by pin.ApplyOptions() at any time.\ntype DigitalPinnerProvider interface {\n\tDigitalPin(id string) (DigitalPinner, error)\n}\n\n// PWMPinner is the interface for system PWM interactions\ntype PWMPinner interface {\n\t// Export exports the PWM pin for use by the operating system\n\tExport() error\n\t// Unexport releases the PWM pin from the operating system\n\tUnexport() error\n\t// Enabled returns the enabled state of the PWM pin\n\tEnabled() (bool, error)\n\t// SetEnabled enables/disables the PWM pin\n\tSetEnabled(val bool) error\n\t// Polarity returns true if the polarity of the PWM pin is normal, otherwise false\n\tPolarity() (bool, error)\n\t// SetPolarity sets the polarity of the PWM pin to normal if called with true and to inverted if called with false\n\tSetPolarity(normal bool) error\n\t// Period returns the current PWM period in nanoseconds for pin\n\tPeriod() (uint32, error)\n\t// SetPeriod sets the current PWM period in nanoseconds for pin\n\tSetPeriod(period uint32) error\n\t// DutyCycle returns the duty cycle in nanoseconds for the PWM pin\n\tDutyCycle() (uint32, error)\n\t// SetDutyCycle writes the duty cycle in nanoseconds to the PWM pin\n\tSetDutyCycle(dutyCyle uint32) error\n}\n\n// PWMPinnerProvider is the interface that an Adaptor should implement to allow\n// clients to obtain access to any PWMPin's available on that board.\ntype PWMPinnerProvider interface {\n\tPWMPin(id string) (PWMPinner, error)\n}\n\n// AnalogPinner is the interface for system analog io interactions\ntype AnalogPinner interface {\n\t// Read reads the current value of the pin\n\tRead() (int, error)\n\t// Write writes to the pin\n\tWrite(val int) error\n}\n\n// I2cSystemDevicer is the interface to a i2c bus at system level, according to I2C/SMBus specification.\n// Some functions are not in the interface yet:\n// * Process Call (WriteWordDataReadWordData)\n// * Block Write - Block Read (WriteBlockDataReadBlockData)\n// * Host Notify - WriteWordData() can be used instead\n//\n// see: https://docs.kernel.org/i2c/smbus-protocol.html#key-to-symbols\n//\n// S: Start condition; Sr: Repeated start condition, used to switch from write to read mode.\n// P: Stop condition; Rd/Wr (1 bit): Read/Write bit. Rd equals 1, Wr equals 0.\n// A, NA (1 bit): Acknowledge (ACK) and Not Acknowledge (NACK) bit\n// Addr (7 bits): I2C 7 bit address. (10 bit I2C address not yet supported by gobot).\n// Comm (8 bits): Command byte, a data byte which often selects a register on the device.\n// Data (8 bits): A plain data byte. DataLow and DataHigh represent the low and high byte of a 16 bit word.\n// Count (8 bits): A data byte containing the length of a block operation.\n// [..]: Data sent by I2C device, as opposed to data sent by the host adapter.\ntype I2cSystemDevicer interface {\n\t// ReadByte must be implemented as the sequence:\n\t// \"S Addr Rd [A] [Data] NA P\"\n\tReadByte(address int) (byte, error)\n\n\t// ReadByteData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] Sr Addr Rd [A] [Data] NA P\"\n\tReadByteData(address int, reg uint8) (uint8, error)\n\n\t// ReadWordData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] Sr Addr Rd [A] [DataLow] A [DataHigh] NA P\"\n\tReadWordData(address int, reg uint8) (uint16, error)\n\n\t// ReadBlockData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] Sr Addr Rd [A] [Count] A [Data] A [Data] A ... A [Data] NA P\"\n\tReadBlockData(address int, reg uint8, data []byte) error\n\n\t// WriteByte must be implemented as the sequence:\n\t// \"S Addr Wr [A] Data [A] P\"\n\tWriteByte(address int, val byte) error\n\n\t// WriteByteData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] Data [A] P\"\n\tWriteByteData(address int, reg uint8, val uint8) error\n\n\t// WriteBlockData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] Count [A] Data [A] Data [A] ... [A] Data [A] P\"\n\tWriteBlockData(address int, reg uint8, data []byte) error\n\n\t// WriteWordData must be implemented as the sequence:\n\t// \"S Addr Wr [A] Comm [A] DataLow [A] DataHigh [A] P\"\n\tWriteWordData(address int, reg uint8, val uint16) error\n\n\t// WriteBytes writes the given data starting from the current register of bus device.\n\tWriteBytes(address int, data []byte) error\n\n\t// Read implements direct read operations.\n\tRead(address int, b []byte) (int, error)\n\n\t// Write implements direct write operations.\n\tWrite(address int, b []byte) (n int, err error)\n\n\t// Close closes the character device file.\n\tClose() error\n}\n\n// SpiSystemDevicer is the interface to a SPI bus at system level.\ntype SpiSystemDevicer interface {\n\tTxRx(tx []byte, rx []byte) error\n\t// Close the SPI connection.\n\tClose() error\n}\n\n// BusOperations are functions provided by a bus device, e.g. SPI, i2c.\ntype BusOperations interface {\n\t// ReadByteData reads a byte from the given register of bus device.\n\tReadByteData(reg uint8) (uint8, error)\n\t// ReadBlockData fills the given buffer with reads starting from the given register of bus device.\n\tReadBlockData(reg uint8, data []byte) error\n\t// WriteByteData writes the given byte value to the given register of bus device.\n\tWriteByteData(reg uint8, val uint8) error\n\t// WriteBlockData writes the given data starting from the given register of bus device.\n\tWriteBlockData(reg uint8, data []byte) error\n\t// WriteByte writes the given byte value to the current register of bus device.\n\tWriteByte(val byte) error\n\t// WriteBytes writes the given data starting from the current register of bus device.\n\tWriteBytes(data []byte) error\n}\n\n// I2cOperations represents the i2c methods according to I2C/SMBus specification.\ntype I2cOperations interface {\n\tio.ReadWriteCloser\n\tBusOperations\n\t// ReadByte reads a byte from the current register of an i2c device.\n\tReadByte() (byte, error)\n\t// ReadWordData reads a 16 bit value starting from the given register of an i2c device.\n\tReadWordData(reg uint8) (uint16, error)\n\t// WriteWordData writes the given 16 bit value starting from the given register of an i2c device.\n\tWriteWordData(reg uint8, val uint16) error\n}\n\n// SpiOperations are the wrappers around the actual functions used by the SPI device interface\ntype SpiOperations interface {\n\tBusOperations\n\t// ReadCommandData uses the SPI device TX to send/receive data.\n\tReadCommandData(command []byte, data []byte) error\n\t// Close the connection.\n\tClose() error\n}\n\n// Adaptor is the interface that describes an adaptor in gobot\ntype Adaptor interface {\n\t// Name returns the label for the Adaptor\n\tName() string\n\t// SetName sets the label for the Adaptor\n\tSetName(name string)\n\t// Connect initiates the Adaptor\n\tConnect() error\n\t// Finalize terminates the Adaptor\n\tFinalize() error\n}\n\n// BLEConnector is the interface that a BLE ClientAdaptor must implement\ntype BLEConnector interface {\n\tAdaptor\n\n\tReconnect() error\n\tDisconnect() error\n\tAddress() string\n\n\tReadCharacteristic(cUUID string) ([]byte, error)\n\tWriteCharacteristic(cUUID string, data []byte) error\n\tSubscribe(cUUID string, f func(data []byte)) error\n\tWithoutResponses(use bool)\n}\n\n// Porter is the interface that describes an adaptor's port\ntype Porter interface {\n\tPort() string\n}\n"
        },
        {
          "name": "api",
          "type": "tree",
          "content": null
        },
        {
          "name": "appveyor.yml",
          "type": "blob",
          "size": 0.7587890625,
          "content": "version: \"{build}\"\n\nimage: Visual Studio 2019\n\nclone_folder: c:\\gopath\\src\\gobot.io\\x\\gobot\n\nenvironment:\n  PATH: C:\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin;%PATH%\n  GOPATH: c:\\gopath\n\nbefore_test:\n  - go version\n  - go env\n\nbuild_script:\n  - go test -v -cpu=2 .\n  - go test -v -cpu=2 ./drivers/aio/...\n  - go test -v -cpu=2 ./drivers/ble/.\n  - go test -v -cpu=2 ./drivers/ble/parrot/.\n  - go test -v -cpu=2 ./drivers/ble/sphero/.\n  - go test -v -cpu=2 ./drivers/serial/...\n  - go test -v -cpu=2 ./platforms/bleclient/...\n  - go test -v -cpu=2 ./platforms/dji/...\n  - go test -v -cpu=2 ./platforms/firmata/...\n  - go test -v -cpu=2 ./platforms/joystick/...\n  - go test -v -cpu=2 ./platforms/parrot/...\n  - go test -v -cpu=2 ./platforms/serialport/...\n  - cd ..\n"
        },
        {
          "name": "commander.go",
          "type": "blob",
          "size": 1.3388671875,
          "content": "package gobot\n\ntype commander struct {\n\tcommands map[string]func(map[string]interface{}) interface{}\n}\n\n// Commander is the interface which describes the behaviour for a Driver or Adaptor\n// which exposes API commands.\ntype Commander interface {\n\t// Command returns a command given a name. Returns nil if the command is not found.\n\tCommand(name string) (command func(map[string]interface{}) interface{})\n\t// Commands returns a map of commands.\n\tCommands() (commands map[string]func(map[string]interface{}) interface{})\n\t// AddCommand adds a command given a name.\n\tAddCommand(name string, command func(map[string]interface{}) interface{})\n}\n\n// NewCommander returns a new Commander.\nfunc NewCommander() Commander {\n\treturn &commander{\n\t\tcommands: make(map[string]func(map[string]interface{}) interface{}),\n\t}\n}\n\n// Command returns the command interface when passed a valid command name\nfunc (c *commander) Command(name string) func(map[string]interface{}) interface{} {\n\treturn c.commands[name]\n}\n\n// Commands returns the entire map of valid commands\nfunc (c *commander) Commands() map[string]func(map[string]interface{}) interface{} {\n\treturn c.commands\n}\n\n// AddCommand adds a new command, when passed a command name and the command interface.\nfunc (c *commander) AddCommand(name string, command func(map[string]interface{}) interface{}) {\n\tc.commands[name] = command\n}\n"
        },
        {
          "name": "commander_test.go",
          "type": "blob",
          "size": 0.3466796875,
          "content": "package gobot\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestCommander(t *testing.T) {\n\t// arrange\n\tc := NewCommander()\n\tc.AddCommand(\"test\", func(map[string]interface{}) interface{} {\n\t\treturn \"hi\"\n\t})\n\n\t// act && assert\n\tassert.Len(t, c.Commands(), 1)\n\tassert.NotNil(t, c.Command(\"test\"))\n\tassert.Nil(t, c.Command(\"booyeah\"))\n}\n"
        },
        {
          "name": "connection.go",
          "type": "blob",
          "size": 1.5869140625,
          "content": "package gobot\n\nimport (\n\t\"log\"\n\t\"reflect\"\n\n\tmultierror \"github.com/hashicorp/go-multierror\"\n)\n\n// JSONConnection is a JSON representation of a Connection.\ntype JSONConnection struct {\n\tName    string `json:\"name\"`\n\tAdaptor string `json:\"adaptor\"`\n}\n\n// NewJSONConnection returns a JSONConnection given a Connection.\nfunc NewJSONConnection(connection Connection) *JSONConnection {\n\treturn &JSONConnection{\n\t\tName:    connection.Name(),\n\t\tAdaptor: reflect.TypeOf(connection).String(),\n\t}\n}\n\n// A Connection is an instance of an Adaptor\ntype Connection Adaptor\n\n// Connections represents a collection of Connection\ntype Connections []Connection\n\n// Len returns connections length\nfunc (c *Connections) Len() int {\n\treturn len(*c)\n}\n\n// Each enumerates through the Connections and calls specified callback function.\nfunc (c *Connections) Each(f func(Connection)) {\n\tfor _, connection := range *c {\n\t\tf(connection)\n\t}\n}\n\n// Start calls Connect on each Connection in c\nfunc (c *Connections) Start() error {\n\tlog.Println(\"Starting connections...\")\n\tvar err error\n\tfor _, connection := range *c {\n\t\tinfo := \"Starting connection \" + connection.Name()\n\n\t\tif porter, ok := connection.(Porter); ok {\n\t\t\tinfo = info + \" on port \" + porter.Port()\n\t\t}\n\n\t\tlog.Println(info + \"...\")\n\n\t\tif cerr := connection.Connect(); cerr != nil {\n\t\t\terr = multierror.Append(err, cerr)\n\t\t}\n\t}\n\treturn err\n}\n\n// Finalize calls Finalize on each Connection in c\nfunc (c *Connections) Finalize() error {\n\tvar err error\n\tfor _, connection := range *c {\n\t\tif cerr := connection.Finalize(); cerr != nil {\n\t\t\terr = multierror.Append(err, cerr)\n\t\t}\n\t}\n\treturn err\n}\n"
        },
        {
          "name": "device.go",
          "type": "blob",
          "size": 1.818359375,
          "content": "package gobot\n\nimport (\n\t\"log\"\n\t\"reflect\"\n\n\tmultierror \"github.com/hashicorp/go-multierror\"\n)\n\n// JSONDevice is a JSON representation of a Device.\ntype JSONDevice struct {\n\tName       string   `json:\"name\"`\n\tDriver     string   `json:\"driver\"`\n\tConnection string   `json:\"connection\"`\n\tCommands   []string `json:\"commands\"`\n}\n\n// NewJSONDevice returns a JSONDevice given a Device.\nfunc NewJSONDevice(device Device) *JSONDevice {\n\tjsonDevice := &JSONDevice{\n\t\tName:       device.Name(),\n\t\tDriver:     reflect.TypeOf(device).String(),\n\t\tCommands:   []string{},\n\t\tConnection: \"\",\n\t}\n\tif device.Connection() != nil {\n\t\tjsonDevice.Connection = device.Connection().Name()\n\t}\n\tif commander, ok := device.(Commander); ok {\n\t\tfor command := range commander.Commands() {\n\t\t\tjsonDevice.Commands = append(jsonDevice.Commands, command)\n\t\t}\n\t}\n\treturn jsonDevice\n}\n\n// A Device is an instnace of a Driver\ntype Device Driver\n\n// Devices represents a collection of Device\ntype Devices []Device\n\n// Len returns devices length\nfunc (d *Devices) Len() int {\n\treturn len(*d)\n}\n\n// Each enumerates through the Devices and calls specified callback function.\nfunc (d *Devices) Each(f func(Device)) {\n\tfor _, device := range *d {\n\t\tf(device)\n\t}\n}\n\n// Start calls Start on each Device in d\nfunc (d *Devices) Start() error {\n\tlog.Println(\"Starting devices...\")\n\tvar err error\n\tfor _, device := range *d {\n\t\tinfo := \"Starting device \" + device.Name()\n\n\t\tif pinner, ok := device.(Pinner); ok {\n\t\t\tinfo = info + \" on pin \" + pinner.Pin()\n\t\t}\n\n\t\tlog.Println(info + \"...\")\n\t\tif derr := device.Start(); derr != nil {\n\t\t\terr = multierror.Append(err, derr)\n\t\t}\n\t}\n\treturn err\n}\n\n// Halt calls Halt on each Device in d\nfunc (d *Devices) Halt() error {\n\tvar err error\n\tfor _, device := range *d {\n\t\tif derr := device.Halt(); derr != nil {\n\t\t\terr = multierror.Append(err, derr)\n\t\t}\n\t}\n\treturn err\n}\n"
        },
        {
          "name": "doc.go",
          "type": "blob",
          "size": 3.494140625,
          "content": "// Copyright 2014-2018 The Hybrid Group. All rights reserved.\n\n/*\nPackage gobot is the primary entrypoint for Gobot (http://gobot.io), a framework for robotics, physical computing, and\nthe Internet of Things written using the Go programming language .\n\nIt provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the\nsame time.\n\n# Classic Gobot\n\nHere is a \"Classic Gobot\" program that blinks an LED using an Arduino:\n\n\tpackage main\n\n\timport (\n\t    \"time\"\n\n\t    \"gobot.io/x/gobot/v2\"\n\t    \"gobot.io/x/gobot/v2/drivers/gpio\"\n\t    \"gobot.io/x/gobot/v2/platforms/firmata\"\n\t)\n\n\tfunc main() {\n\t    firmataAdaptor := firmata.NewAdaptor(\"/dev/ttyACM0\")\n\t    led := gpio.NewLedDriver(firmataAdaptor, \"13\")\n\n\t    work := func() {\n\t        gobot.Every(1*time.Second, func() {\n\t            if err := led.Toggle(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t        })\n\t    }\n\n\t    robot := gobot.NewRobot(\"bot\",\n\t        []gobot.Connection{firmataAdaptor},\n\t        []gobot.Device{led},\n\t        work,\n\t    )\n\n\t    if err := robot.Start(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t}\n\n# Metal Gobot\n\nYou can also use Metal Gobot and pick and choose from the various Gobot packages to control hardware with nothing but\npure idiomatic Golang code. For example:\n\n\tpackage main\n\n\timport (\n\t    \"gobot.io/x/gobot/v2/drivers/gpio\"\n\t    \"gobot.io/x/gobot/v2/platforms/intel-iot/edison\"\n\t    \"time\"\n\t)\n\n\tfunc main() {\n\t    e := edison.NewAdaptor()\n\t    if err := e.Connect(); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t    led := gpio.NewLedDriver(e, \"13\")\n\t    if err := led.Start(); err != nil {\n\t\tfmt.Println(err)\n\t}\n\n\t    for {\n\t        if err := led.Toggle(); err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t}\n\t        time.Sleep(1000 * time.Millisecond)\n\t    }\n\t}\n\n# Manager Gobot\n\nFinally, you can use Manager Gobot to add the complete Gobot API or control swarms of Robots:\n\n\t\tpackage main\n\n\t\timport (\n\t\t    \"fmt\"\n\t\t    \"time\"\n\n\t\t    \"gobot.io/x/gobot/v2\"\n\t  \t\t\"gobot.io/x/gobot/v2/api\"\n\t  \t\t\"gobot.io/x/gobot/v2/drivers/common/spherocommon\"\n\t  \t\t\"gobot.io/x/gobot/v2/drivers/serial\"\n\t  \t\t\"gobot.io/x/gobot/v2/platforms/serialport\"\n\t\t)\n\n\t\tfunc NewSwarmBot(port string) *gobot.Robot {\n\t\t    spheroAdaptor := serialport.NewAdaptor(port)\n\t\t    spheroDriver := sphero.NewSpheroDriver(spheroAdaptor, serial.WithName(\"Sphero\" + port))\n\n\t\t    work := func() {\n\t\t        spheroDriver.Stop()\n\n\t\t        _ = spheroDriver.On(sphero.CollisionEvent, func(data interface{}) {\n\t\t            fmt.Println(\"Collision Detected!\")\n\t\t        })\n\n\t\t        gobot.Every(1*time.Second, func() {\n\t\t            spheroDriver.Roll(100, uint16(gobot.Rand(360)))\n\t\t        })\n\t\t        gobot.Every(3*time.Second, func() {\n\t\t            spheroDriver.SetRGB(uint8(gobot.Rand(255)),\n\t\t                uint8(gobot.Rand(255)),\n\t\t                uint8(gobot.Rand(255)),\n\t\t            )\n\t\t        })\n\t\t    }\n\n\t\t    robot := gobot.NewRobot(\"sphero\",\n\t\t        []gobot.Connection{spheroAdaptor},\n\t\t        []gobot.Device{spheroDriver},\n\t\t        work,\n\t\t    )\n\n\t\t    return robot\n\t\t}\n\n\t\tfunc main() {\n\t\t    manager := gobot.NewManager()\n\t\t    api.NewAPI(manager).Start()\n\n\t\t    spheros := []string{\n\t\t        \"/dev/rfcomm0\",\n\t\t        \"/dev/rfcomm1\",\n\t\t        \"/dev/rfcomm2\",\n\t\t        \"/dev/rfcomm3\",\n\t\t    }\n\n\t\t    for _, port := range spheros {\n\t\t        manager.AddRobot(NewSwarmBot(port))\n\t\t    }\n\n\t\t    if err := manager.Start(); err != nil {\n\t\tpanic(err)\n\t}\n\t\t}\n\nCopyright (c) 2013-2018 The Hybrid Group. Licensed under the Apache 2.0 license.\n*/\npackage gobot // import \"gobot.io/x/gobot/v2\"\n"
        },
        {
          "name": "driver.go",
          "type": "blob",
          "size": 0.580078125,
          "content": "package gobot\n\n// Driver is the interface that describes a driver in gobot\ntype Driver interface {\n\t// Name returns the label for the Driver\n\tName() string\n\t// SetName sets the label for the Driver.\n\t// Please use options [aio.WithName, ble.WithName, gpio.WithName or serial.WithName] instead.\n\tSetName(s string)\n\t// Start initiates the Driver\n\tStart() error\n\t// Halt terminates the Driver\n\tHalt() error\n\t// Connection returns the Connection associated with the Driver\n\tConnection() Connection\n}\n\n// Pinner is the interface that describes a driver's pin\ntype Pinner interface {\n\tPin() string\n}\n"
        },
        {
          "name": "drivers",
          "type": "tree",
          "content": null
        },
        {
          "name": "event.go",
          "type": "blob",
          "size": 0.2958984375,
          "content": "package gobot\n\n// Event represents when something asynchronous happens in a Driver\n// or Adaptor\ntype Event struct {\n\tName string\n\tData interface{}\n}\n\n// NewEvent returns a new Event and its associated data.\nfunc NewEvent(name string, data interface{}) *Event {\n\treturn &Event{Name: name, Data: data}\n}\n"
        },
        {
          "name": "eventer.go",
          "type": "blob",
          "size": 3.3427734375,
          "content": "package gobot\n\nimport \"sync\"\n\ntype eventChannel chan *Event\n\ntype eventer struct {\n\t// map of valid Event names\n\teventnames map[string]string\n\n\t// new events get put in to the event channel\n\tin eventChannel\n\n\t// map of out channels used by subscribers\n\touts map[eventChannel]eventChannel\n\n\t// mutex to protect the eventChannel map\n\teventsMutex sync.Mutex\n}\n\nconst eventChanBufferSize = 10\n\n// Eventer is the interface which describes how a Driver or Adaptor\n// handles events.\ntype Eventer interface {\n\t// Events returns the map of valid Event names.\n\tEvents() (eventnames map[string]string)\n\n\t// Event returns an Event string from map of valid Event names.\n\t// Mostly used to validate that an Event name is valid.\n\tEvent(name string) string\n\n\t// AddEvent registers a new Event name.\n\tAddEvent(name string)\n\n\t// DeleteEvent removes a previously registered Event name.\n\tDeleteEvent(name string)\n\n\t// Publish new events to any subscriber\n\tPublish(name string, data interface{})\n\n\t// Subscribe to events\n\tSubscribe() (events eventChannel)\n\n\t// Unsubscribe from an event channel\n\tUnsubscribe(events eventChannel)\n\n\t// Event handler\n\tOn(name string, f func(s interface{})) error\n\n\t// Event handler, only executes one time\n\tOnce(name string, f func(s interface{})) error\n}\n\n// NewEventer returns a new Eventer.\nfunc NewEventer() Eventer {\n\tevtr := &eventer{\n\t\teventnames: make(map[string]string),\n\t\tin:         make(eventChannel, eventChanBufferSize),\n\t\touts:       make(map[eventChannel]eventChannel),\n\t}\n\n\t// goroutine to cascade \"in\" events to all \"out\" event channels\n\tgo func() {\n\t\tfor {\n\t\t\tevt := <-evtr.in\n\t\t\tevtr.eventsMutex.Lock()\n\t\t\tfor _, out := range evtr.outs {\n\t\t\t\tout <- evt\n\t\t\t}\n\t\t\tevtr.eventsMutex.Unlock()\n\t\t}\n\t}()\n\n\treturn evtr\n}\n\n// Events returns the map of valid Event names.\nfunc (e *eventer) Events() map[string]string {\n\treturn e.eventnames\n}\n\n// Event returns an Event string from map of valid Event names.\n// Mostly used to validate that an Event name is valid.\nfunc (e *eventer) Event(name string) string {\n\treturn e.eventnames[name]\n}\n\n// AddEvent registers a new Event name.\nfunc (e *eventer) AddEvent(name string) {\n\te.eventnames[name] = name\n}\n\n// DeleteEvent removes a previously registered Event name.\nfunc (e *eventer) DeleteEvent(name string) {\n\tdelete(e.eventnames, name)\n}\n\n// Publish new events to anyone that is subscribed\nfunc (e *eventer) Publish(name string, data interface{}) {\n\tevt := NewEvent(name, data)\n\te.in <- evt\n}\n\n// Subscribe to any events from this eventer\nfunc (e *eventer) Subscribe() eventChannel {\n\te.eventsMutex.Lock()\n\tdefer e.eventsMutex.Unlock()\n\tout := make(eventChannel, eventChanBufferSize)\n\te.outs[out] = out\n\treturn out\n}\n\n// Unsubscribe from the event channel\nfunc (e *eventer) Unsubscribe(events eventChannel) {\n\te.eventsMutex.Lock()\n\tdefer e.eventsMutex.Unlock()\n\tdelete(e.outs, events)\n}\n\n// On executes the event handler f when e is Published to.\nfunc (e *eventer) On(n string, f func(s interface{})) error {\n\tout := e.Subscribe()\n\tgo func() {\n\t\tfor {\n\t\t\tevt := <-out\n\t\t\tif evt.Name == n {\n\t\t\t\tf(evt.Data)\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}\n\n// Once is similar to On except that it only executes f one time.\nfunc (e *eventer) Once(n string, f func(s interface{})) error {\n\tout := e.Subscribe()\n\tgo func() {\n\tProcessEvents:\n\t\tfor evt := range out {\n\t\t\tif evt.Name == n {\n\t\t\t\tf(evt.Data)\n\t\t\t\te.Unsubscribe(out)\n\t\t\t\tbreak ProcessEvents\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}\n"
        },
        {
          "name": "eventer_test.go",
          "type": "blob",
          "size": 1.486328125,
          "content": "package gobot\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestEventerAddEvent(t *testing.T) {\n\te := NewEventer()\n\te.AddEvent(\"test\")\n\n\tif _, ok := e.Events()[\"test\"]; !ok {\n\t\trequire.Fail(t, \"Could not add event to list of Event names\")\n\t}\n\tassert.Equal(t, \"test\", e.Event(\"test\"))\n\tassert.Equal(t, \"\", e.Event(\"unknown\"))\n}\n\nfunc TestEventerDeleteEvent(t *testing.T) {\n\te := NewEventer()\n\te.AddEvent(\"test1\")\n\te.DeleteEvent(\"test1\")\n\n\tif _, ok := e.Events()[\"test1\"]; ok {\n\t\trequire.Fail(t, \"Could not add delete event from list of Event names\")\n\t}\n}\n\nfunc TestEventerOn(t *testing.T) {\n\te := NewEventer()\n\n\tsem := make(chan bool)\n\t_ = e.On(\"test\", func(data interface{}) {\n\t\tsem <- true\n\t})\n\n\t// wait some time to ensure the eventer go routine is working\n\ttime.Sleep(10 * time.Millisecond)\n\n\te.Publish(\"test\", true)\n\n\tselect {\n\tcase <-sem:\n\tcase <-time.After(10 * time.Millisecond):\n\t\trequire.Fail(t, \"On was not called\")\n\t}\n}\n\nfunc TestEventerOnce(t *testing.T) {\n\te := NewEventer()\n\n\tsem := make(chan bool)\n\t_ = e.Once(\"test\", func(data interface{}) {\n\t\tsem <- true\n\t})\n\n\t// wait some time to ensure the eventer go routine is working\n\ttime.Sleep(10 * time.Millisecond)\n\n\te.Publish(\"test\", true)\n\n\tselect {\n\tcase <-sem:\n\tcase <-time.After(10 * time.Millisecond):\n\t\trequire.Fail(t, \"Once was not called\")\n\t}\n\n\te.Publish(\"test\", true)\n\n\tselect {\n\tcase <-sem:\n\t\trequire.Fail(t, \"Once was called twice\")\n\tcase <-time.After(10 * time.Millisecond):\n\t}\n}\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 2.1064453125,
          "content": "module gobot.io/x/gobot/v2\n\ngo 1.22.0\n\ntoolchain go1.22.7\n\nrequire (\n\tgithub.com/0xcafed00d/joystick v1.0.1\n\tgithub.com/bmizerany/pat v0.0.0-20210406213842-e4b6760bdd6f\n\tgithub.com/donovanhide/eventsource v0.0.0-20210830082556-c59027999da0\n\tgithub.com/eclipse/paho.mqtt.golang v1.5.0\n\tgithub.com/gofrs/uuid v4.4.0+incompatible\n\tgithub.com/hashicorp/go-multierror v1.1.1\n\tgithub.com/hybridgroup/go-ardrone v0.0.0-20140402002621-b9750d8d7b78\n\tgithub.com/hybridgroup/mjpeg v0.0.0-20140228234708-4680f319790e\n\tgithub.com/nats-io/nats.go v1.37.0\n\tgithub.com/nsf/termbox-go v1.1.1\n\tgithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f\n\tgithub.com/stretchr/testify v1.9.0\n\tgithub.com/warthog618/go-gpiocdev v0.9.1\n\tgo.bug.st/serial v1.6.2\n\tgocv.io/x/gocv v0.39.0\n\tgolang.org/x/net v0.30.0\n\tgolang.org/x/sys v0.26.0\n\tperiph.io/x/conn/v3 v3.7.1\n\tperiph.io/x/host/v3 v3.8.2\n\ttinygo.org/x/bluetooth v0.10.0\n)\n\nrequire (\n\tgithub.com/creack/goselect v0.1.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/go-ole/go-ole v1.3.0 // indirect\n\tgithub.com/godbus/dbus/v5 v5.1.0 // indirect\n\tgithub.com/gorilla/websocket v1.5.3 // indirect\n\tgithub.com/hashicorp/errwrap v1.1.0 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.9 // indirect\n\tgithub.com/nats-io/nkeys v0.4.7 // indirect\n\tgithub.com/nats-io/nuid v1.0.1 // indirect\n\tgithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/saltosystems/winrt-go v0.0.0-20240509164145-4f7860a3bd2b // indirect\n\tgithub.com/sirupsen/logrus v1.9.3 // indirect\n\tgithub.com/soypat/cyw43439 v0.0.0-20240609122733-da9153086796 // indirect\n\tgithub.com/soypat/seqs v0.0.0-20240527012110-1201bab640ef // indirect\n\tgithub.com/tinygo-org/cbgo v0.0.4 // indirect\n\tgithub.com/tinygo-org/pio v0.0.0-20231216154340-cd888eb58899 // indirect\n\tgolang.org/x/crypto v0.28.0 // indirect\n\tgolang.org/x/exp v0.0.0-20230728194245-b0cb94b80691 // indirect\n\tgolang.org/x/sync v0.7.0 // indirect\n\tgopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 9.4462890625,
          "content": "github.com/0xcafed00d/joystick v1.0.1 h1:r4p2cRp4MHJWu1gArhGtumbkPxmr3tcOUTFqybEhplM=\ngithub.com/0xcafed00d/joystick v1.0.1/go.mod h1:gzszjNgzP6jtCAeSdC9OqPVO5rO7TJuaw4P7eAjNzx8=\ngithub.com/bmizerany/pat v0.0.0-20210406213842-e4b6760bdd6f h1:gOO/tNZMjjvTKZWpY7YnXC72ULNLErRtp94LountVE8=\ngithub.com/bmizerany/pat v0.0.0-20210406213842-e4b6760bdd6f/go.mod h1:8rLXio+WjiTceGBHIoTvn60HIbs7Hm7bcHjyrSqYB9c=\ngithub.com/creack/goselect v0.1.2 h1:2DNy14+JPjRBgPzAd1thbQp4BSIihxcBf0IXhQXDRa0=\ngithub.com/creack/goselect v0.1.2/go.mod h1:a/NhLweNvqIYMuxcMOuWY516Cimucms3DglDzQP3hKY=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/donovanhide/eventsource v0.0.0-20210830082556-c59027999da0 h1:C7t6eeMaEQVy6e8CarIhscYQlNmw5e3G36y7l7Y21Ao=\ngithub.com/donovanhide/eventsource v0.0.0-20210830082556-c59027999da0/go.mod h1:56wL82FO0bfMU5RvfXoIwSOP2ggqqxT+tAfNEIyxuHw=\ngithub.com/eclipse/paho.mqtt.golang v1.5.0 h1:EH+bUVJNgttidWFkLLVKaQPGmkTUfQQqjOsyvMGvD6o=\ngithub.com/eclipse/paho.mqtt.golang v1.5.0/go.mod h1:du/2qNQVqJf/Sqs4MEL77kR8QTqANF7XU7Fk0aOTAgk=\ngithub.com/go-ole/go-ole v1.3.0 h1:Dt6ye7+vXGIKZ7Xtk4s6/xVdGDQynvom7xCFEdWr6uE=\ngithub.com/go-ole/go-ole v1.3.0/go.mod h1:5LS6F96DhAwUc7C+1HLexzMXY1xGRSryjyPPKW6zv78=\ngithub.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=\ngithub.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gofrs/uuid v4.4.0+incompatible h1:3qXRTX8/NbyulANqlc0lchS1gqAVxRgsuW1YrTJupqA=\ngithub.com/gofrs/uuid v4.4.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=\ngithub.com/gorilla/websocket v1.5.3 h1:saDtZ6Pbx/0u+bgYQ3q96pZgCzfhKXGPqt7kZ72aNNg=\ngithub.com/gorilla/websocket v1.5.3/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\ngithub.com/hashicorp/errwrap v1.0.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/errwrap v1.1.0 h1:OxrOeh75EUXMY8TBjag2fzXGZ40LB6IKw45YeGUDY2I=\ngithub.com/hashicorp/errwrap v1.1.0/go.mod h1:YH+1FKiLXxHSkmPseP+kNlulaMuP3n2brvKWEqk/Jc4=\ngithub.com/hashicorp/go-multierror v1.1.1 h1:H5DkEtf6CXdFp0N0Em5UCwQpXMWke8IA0+lD48awMYo=\ngithub.com/hashicorp/go-multierror v1.1.1/go.mod h1:iw975J/qwKPdAO1clOe2L8331t/9/fmwbPZ6JB6eMoM=\ngithub.com/hybridgroup/go-ardrone v0.0.0-20140402002621-b9750d8d7b78 h1:7of6LJZ4LF9AvF4bTiMr2I72KxodBf1BXrSD9Tz0lWU=\ngithub.com/hybridgroup/go-ardrone v0.0.0-20140402002621-b9750d8d7b78/go.mod h1:YllNbhGM1UEcySxCv1BWK5lre7QLmJJ+O0ADUOo2nbc=\ngithub.com/hybridgroup/mjpeg v0.0.0-20140228234708-4680f319790e h1:xCcwD5FOXul+j1dn8xD16nbrhJkkum/Cn+jTd/u1LhY=\ngithub.com/hybridgroup/mjpeg v0.0.0-20140228234708-4680f319790e/go.mod h1:eagM805MRKrioHYuU7iKLUyFPVKqVV6um5DAvCkUtXs=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0 h1:45sCR5RtlFHMR4UwH9sdQ5TC8v0qDQCHnXt+kaKSTVE=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/nats-io/nats.go v1.37.0 h1:07rauXbVnnJvv1gfIyghFEo6lUcYRY0WXc3x7x0vUxE=\ngithub.com/nats-io/nats.go v1.37.0/go.mod h1:Ubdu4Nh9exXdSz0RVWRFBbRfrbSxOYd26oF0wkWclB8=\ngithub.com/nats-io/nkeys v0.4.7 h1:RwNJbbIdYCoClSDNY7QVKZlyb/wfT6ugvFCiKy6vDvI=\ngithub.com/nats-io/nkeys v0.4.7/go.mod h1:kqXRgRDPlGy7nGaEDMuYzmiJCIAAWDK0IMBtDmGD0nc=\ngithub.com/nats-io/nuid v1.0.1 h1:5iA8DT8V7q8WK2EScv2padNa/rTESc1KdnPw4TC2paw=\ngithub.com/nats-io/nuid v1.0.1/go.mod h1:19wcPz3Ph3q0Jbyiqsd0kePYG7A95tJPxeL+1OSON2c=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e h1:fD57ERR4JtEqsWbfPhv4DMiApHyliiK5xCTNVSPiaAs=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/nsf/termbox-go v1.1.1 h1:nksUPLCb73Q++DwbYUBEglYBRPZyoXJdrj5L+TkjyZY=\ngithub.com/nsf/termbox-go v1.1.1/go.mod h1:T0cTdVuOwf7pHQNtfhnEbzHbcNyCEcVU4YPpouCbVxo=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/saltosystems/winrt-go v0.0.0-20240509164145-4f7860a3bd2b h1:du3zG5fd8snsFN6RBoLA7fpaYV9ZQIsyH9snlk2Zvik=\ngithub.com/saltosystems/winrt-go v0.0.0-20240509164145-4f7860a3bd2b/go.mod h1:CIltaIm7qaANUIvzr0Vmz71lmQMAIbGJ7cvgzX7FMfA=\ngithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f h1:1R9KdKjCNSd7F8iGTxIpoID9prlYH8nuNYKt0XvweHA=\ngithub.com/sigurn/crc8 v0.0.0-20220107193325-2243fe600f9f/go.mod h1:vQhwQ4meQEDfahT5kd61wLAF5AAeh5ZPLVI4JJ/tYo8=\ngithub.com/sirupsen/logrus v1.5.0/go.mod h1:+F7Ogzej0PZc/94MaYx/nvG9jOFMD2osvC3s+Squfpo=\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\ngithub.com/soypat/cyw43439 v0.0.0-20240609122733-da9153086796 h1:1/r2URInjjFtWqT61gU7YGVCq3BRyXt/C7z4oLRF9Lo=\ngithub.com/soypat/cyw43439 v0.0.0-20240609122733-da9153086796/go.mod h1:1Otjk6PRhfzfcVHeWMEeku/VntFqWghUwuSQyivb2vE=\ngithub.com/soypat/seqs v0.0.0-20240527012110-1201bab640ef h1:phH95I9wANjTYw6bSYLZDQfNvao+HqYDom8owbNa0P4=\ngithub.com/soypat/seqs v0.0.0-20240527012110-1201bab640ef/go.mod h1:oCVCNGCHMKoBj97Zp9znLbQ1nHxpkmOY9X+UAGzOxc8=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tinygo-org/cbgo v0.0.4 h1:3D76CRYbH03Rudi8sEgs/YO0x3JIMdyq8jlQtk/44fU=\ngithub.com/tinygo-org/cbgo v0.0.4/go.mod h1:7+HgWIHd4nbAz0ESjGlJ1/v9LDU1Ox8MGzP9mah/fLk=\ngithub.com/tinygo-org/pio v0.0.0-20231216154340-cd888eb58899 h1:/DyaXDEWMqoVUVEJVJIlNk1bXTbFs8s3Q4GdPInSKTQ=\ngithub.com/tinygo-org/pio v0.0.0-20231216154340-cd888eb58899/go.mod h1:LU7Dw00NJ+N86QkeTGjMLNkYcEYMor6wTDpTCu0EaH8=\ngithub.com/warthog618/go-gpiocdev v0.9.1 h1:pwHPaqjJfhCipIQl78V+O3l9OKHivdRDdmgXYbmhuCI=\ngithub.com/warthog618/go-gpiocdev v0.9.1/go.mod h1:dN3e3t/S2aSNC+hgigGE/dBW8jE1ONk9bDSEYfoPyl8=\ngithub.com/warthog618/go-gpiosim v0.1.1 h1:MRAEv+T+itmw+3GeIGpQJBfanUVyg0l3JCTwHtwdre4=\ngithub.com/warthog618/go-gpiosim v0.1.1/go.mod h1:YXsnB+I9jdCMY4YAlMSRrlts25ltjmuIsrnoUrBLdqU=\ngo.bug.st/serial v1.6.2 h1:kn9LRX3sdm+WxWKufMlIRndwGfPWsH1/9lCWXQCasq8=\ngo.bug.st/serial v1.6.2/go.mod h1:UABfsluHAiaNI+La2iESysd9Vetq7VRdpxvjx7CmmOE=\ngocv.io/x/gocv v0.39.0 h1:vWHupDE22LebZW6id2mVeT767j1YS8WqGt+ZiV7XJXE=\ngocv.io/x/gocv v0.39.0/go.mod h1:zYdWMj29WAEznM3Y8NsU3A0TRq/wR/cy75jeUypThqU=\ngolang.org/x/crypto v0.28.0 h1:GBDwsMXVQi34v5CCYUm2jkJvu4cbtru2U4TN2PSyQnw=\ngolang.org/x/crypto v0.28.0/go.mod h1:rmgy+3RHxRZMyY0jjAJShp2zgEdOqj2AO7U0pYmeQ7U=\ngolang.org/x/exp v0.0.0-20230728194245-b0cb94b80691 h1:/yRP+0AN7mf5DkD3BAI6TOFnd51gEoDEb8o35jIFtgw=\ngolang.org/x/exp v0.0.0-20230728194245-b0cb94b80691/go.mod h1:FXUEEKJgO7OQYeo8N01OfiKP8RXMtf6e8aTskBGqWdc=\ngolang.org/x/net v0.30.0 h1:AcW1SDZMkb8IpzCdQUaIq2sP4sZ4zw+55h6ynffypl4=\ngolang.org/x/net v0.30.0/go.mod h1:2wGyMJ5iFasEhkwi13ChkO/t1ECNC4X4eBKkVFyYFlU=\ngolang.org/x/sync v0.7.0 h1:YsImfSBoP9QPYL0xyKJPq0gcaJdG3rInoqxTWbfQu9M=\ngolang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190422165155-953cdadca894/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.26.0 h1:KHjCJyddX0LoSTb3J+vWpupP9p0oznkqVk/IfjymZbo=\ngolang.org/x/sys v0.26.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f h1:BLraFXnmrev5lT+xlilqcH8XK9/i0At2xKjWk4p6zsU=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nperiph.io/x/conn/v3 v3.7.1 h1:tMjNv3WO8jEz/ePuXl7y++2zYi8LsQ5otbmqGKy3Myg=\nperiph.io/x/conn/v3 v3.7.1/go.mod h1:c+HCVjkzbf09XzcqZu/t+U8Ss/2QuJj0jgRF6Nye838=\nperiph.io/x/host/v3 v3.8.2 h1:ayKUDzgUCN0g8+/xM9GTkWaOBhSLVcVHGTfjAOi8OsQ=\nperiph.io/x/host/v3 v3.8.2/go.mod h1:yFL76AesNHR68PboofSWYaQTKmvPXsQH2Apvp/ls/K4=\ntinygo.org/x/bluetooth v0.10.0 h1:42n8qj2tuF5AfdbAUR2Nv45EhtVmbDFH6UoWnt6lzZQ=\ntinygo.org/x/bluetooth v0.10.0/go.mod h1:t/Vm2a/rslsBoqFQKCBsWQw/cmRicQq+8Tl3tj5RCRI=\n"
        },
        {
          "name": "helpers_test.go",
          "type": "blob",
          "size": 2.4150390625,
          "content": "package gobot\n\nimport \"os\"\n\ntype NullReadWriteCloser struct{}\n\nfunc (NullReadWriteCloser) Write(p []byte) (int, error) {\n\treturn len(p), nil\n}\n\nfunc (NullReadWriteCloser) Read(b []byte) (int, error) {\n\treturn len(b), nil\n}\n\nfunc (NullReadWriteCloser) Close() error {\n\treturn nil\n}\n\ntype testDriver struct {\n\tname       string\n\tpin        string\n\tconnection Connection\n\tCommander\n}\n\nvar (\n\ttestDriverStart = func() error { return nil }\n\ttestDriverHalt  = func() error { return nil }\n)\n\nfunc (t *testDriver) Start() error           { return testDriverStart() }\nfunc (t *testDriver) Halt() error            { return testDriverHalt() }\nfunc (t *testDriver) Name() string           { return t.name }\nfunc (t *testDriver) SetName(n string)       { t.name = n }\nfunc (t *testDriver) Pin() string            { return t.pin }\nfunc (t *testDriver) Connection() Connection { return t.connection }\n\nfunc newTestDriver(adaptor *testAdaptor, name string, pin string) *testDriver {\n\tt := &testDriver{\n\t\tname:       name,\n\t\tconnection: adaptor,\n\t\tpin:        pin,\n\t\tCommander:  NewCommander(),\n\t}\n\n\tt.AddCommand(\"DriverCommand\", func(params map[string]interface{}) interface{} { return nil })\n\n\treturn t\n}\n\ntype testAdaptor struct {\n\tname string\n\tport string\n}\n\nvar (\n\ttestAdaptorConnect  = func() error { return nil }\n\ttestAdaptorFinalize = func() error { return nil }\n)\n\nfunc (t *testAdaptor) Finalize() error  { return testAdaptorFinalize() }\nfunc (t *testAdaptor) Connect() error   { return testAdaptorConnect() }\nfunc (t *testAdaptor) Name() string     { return t.name }\nfunc (t *testAdaptor) SetName(n string) { t.name = n }\nfunc (t *testAdaptor) Port() string     { return t.port }\n\nfunc newTestAdaptor(name string, port string) *testAdaptor { //nolint:unparam // keep for tests\n\treturn &testAdaptor{\n\t\tname: name,\n\t\tport: port,\n\t}\n}\n\nfunc newTestRobot(name string) *Robot {\n\tadaptor1 := newTestAdaptor(\"Connection1\", \"/dev/null\")\n\tadaptor2 := newTestAdaptor(\"Connection2\", \"/dev/null\")\n\tadaptor3 := newTestAdaptor(\"\", \"/dev/null\")\n\tdriver1 := newTestDriver(adaptor1, \"Device1\", \"0\")\n\tdriver2 := newTestDriver(adaptor2, \"Device2\", \"2\")\n\tdriver3 := newTestDriver(adaptor3, \"\", \"1\")\n\twork := func() {}\n\tr := NewRobot(name,\n\t\t[]Connection{adaptor1, adaptor2, adaptor3},\n\t\t[]Device{driver1, driver2, driver3},\n\t\twork,\n\t)\n\tr.AddCommand(\"RobotCommand\", func(params map[string]interface{}) interface{} { return nil })\n\tr.trap = func(c chan os.Signal) {\n\t\tc <- os.Interrupt\n\t}\n\n\treturn r\n}\n"
        },
        {
          "name": "manager.go",
          "type": "blob",
          "size": 2.6162109375,
          "content": "package gobot\n\nimport (\n\t\"os\"\n\t\"os/signal\"\n\t\"sync/atomic\"\n)\n\n// JSONManager is a JSON representation of a Gobot Manager.\ntype JSONManager struct {\n\tRobots   []*JSONRobot `json:\"robots\"`\n\tCommands []string     `json:\"commands\"`\n}\n\n// NewJSONManager returns a JSONManager given a Gobot Manager.\nfunc NewJSONManager(gobot *Manager) *JSONManager {\n\tjsonGobot := &JSONManager{\n\t\tRobots:   []*JSONRobot{},\n\t\tCommands: []string{},\n\t}\n\n\tfor command := range gobot.Commands() {\n\t\tjsonGobot.Commands = append(jsonGobot.Commands, command)\n\t}\n\n\tgobot.robots.Each(func(r *Robot) {\n\t\tjsonGobot.Robots = append(jsonGobot.Robots, NewJSONRobot(r))\n\t})\n\treturn jsonGobot\n}\n\n// Manager is the main type of your Gobot application and contains a collection of\n// Robots, API commands that apply to the Manager, and Events that apply to the Manager.\ntype Manager struct {\n\trobots  *Robots\n\ttrap    func(chan os.Signal)\n\tAutoRun bool\n\trunning atomic.Value\n\tCommander\n\tEventer\n}\n\n// NewManager returns a new Gobot Manager\nfunc NewManager() *Manager {\n\tm := &Manager{\n\t\trobots: &Robots{},\n\t\ttrap: func(c chan os.Signal) {\n\t\t\tsignal.Notify(c, os.Interrupt)\n\t\t},\n\t\tAutoRun:   true,\n\t\tCommander: NewCommander(),\n\t\tEventer:   NewEventer(),\n\t}\n\tm.running.Store(false)\n\treturn m\n}\n\n// Start calls the Start method on each robot in its collection of robots. On\n// error, call Stop to ensure that all robots are returned to a sane, stopped\n// state.\nfunc (g *Manager) Start() error {\n\tif err := g.robots.Start(!g.AutoRun); err != nil {\n\t\treturn err\n\t}\n\n\tg.running.Store(true)\n\n\tif !g.AutoRun {\n\t\treturn nil\n\t}\n\n\tc := make(chan os.Signal, 1)\n\tg.trap(c)\n\n\t// waiting for interrupt coming on the channel\n\t<-c\n\n\t// Stop calls the Stop method on each robot in its collection of robots.\n\treturn g.Stop()\n}\n\n// Stop calls the Stop method on each robot in its collection of robots.\nfunc (g *Manager) Stop() error {\n\terr := g.robots.Stop()\n\tg.running.Store(false)\n\treturn err\n}\n\n// Running returns if the Manager is currently started or not\nfunc (g *Manager) Running() bool {\n\treturn g.running.Load().(bool) //nolint:forcetypeassert // no error return value, so there is no better way\n}\n\n// Robots returns all robots associated with this Gobot Manager.\nfunc (g *Manager) Robots() *Robots {\n\treturn g.robots\n}\n\n// AddRobot adds a new robot to the internal collection of robots. Returns the\n// added robot\nfunc (g *Manager) AddRobot(r *Robot) *Robot {\n\t*g.robots = append(*g.robots, r)\n\treturn r\n}\n\n// Robot returns a robot given name. Returns nil if the Robot does not exist.\nfunc (g *Manager) Robot(name string) *Robot {\n\tfor _, robot := range *g.Robots() {\n\t\tif robot.Name == name {\n\t\t\treturn robot\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "manager_test.go",
          "type": "blob",
          "size": 3.94140625,
          "content": "package gobot\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"testing\"\n\t\"time\"\n\n\tmultierror \"github.com/hashicorp/go-multierror\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc initTestManager() *Manager {\n\tlog.SetOutput(&NullReadWriteCloser{})\n\tg := NewManager()\n\tg.trap = func(c chan os.Signal) {\n\t\tc <- os.Interrupt\n\t}\n\tg.AddRobot(newTestRobot(\"Robot1\"))\n\tg.AddRobot(newTestRobot(\"Robot2\"))\n\tg.AddRobot(newTestRobot(\"\"))\n\treturn g\n}\n\nfunc initTestManager1Robot() *Manager {\n\tlog.SetOutput(&NullReadWriteCloser{})\n\tg := NewManager()\n\tg.trap = func(c chan os.Signal) {\n\t\tc <- os.Interrupt\n\t}\n\tg.AddRobot(newTestRobot(\"Robot99\"))\n\n\treturn g\n}\n\nfunc TestNullReadWriteCloser(t *testing.T) {\n\tn := &NullReadWriteCloser{}\n\ti, _ := n.Write([]byte{1, 2, 3})\n\tassert.Equal(t, 3, i)\n\ti, _ = n.Read(make([]byte, 10))\n\tassert.Equal(t, 10, i)\n\trequire.NoError(t, n.Close())\n}\n\nfunc TestManagerRobot(t *testing.T) {\n\tg := initTestManager()\n\tassert.Equal(t, \"Robot1\", g.Robot(\"Robot1\").Name)\n\tassert.Equal(t, (*Robot)(nil), g.Robot(\"Robot4\"))\n\tassert.Equal(t, (Device)(nil), g.Robot(\"Robot4\").Device(\"Device1\"))\n\tassert.Equal(t, (Connection)(nil), g.Robot(\"Robot4\").Connection(\"Connection1\"))\n\tassert.Equal(t, (Device)(nil), g.Robot(\"Robot1\").Device(\"Device4\"))\n\tassert.Equal(t, \"Device1\", g.Robot(\"Robot1\").Device(\"Device1\").Name())\n\tassert.Equal(t, 3, g.Robot(\"Robot1\").Devices().Len())\n\tassert.Equal(t, (Connection)(nil), g.Robot(\"Robot1\").Connection(\"Connection4\"))\n\tassert.Equal(t, 3, g.Robot(\"Robot1\").Connections().Len())\n}\n\nfunc TestManagerToJSON(t *testing.T) {\n\tg := initTestManager()\n\tg.AddCommand(\"test_function\", func(params map[string]interface{}) interface{} {\n\t\treturn nil\n\t})\n\tjson := NewJSONManager(g)\n\tassert.Len(t, json.Robots, g.Robots().Len())\n\tassert.Len(t, json.Commands, len(g.Commands()))\n}\n\nfunc TestManagerStart(t *testing.T) {\n\tg := initTestManager()\n\trequire.NoError(t, g.Start())\n\trequire.NoError(t, g.Stop())\n\tassert.False(t, g.Running())\n}\n\nfunc TestManagerStartAutoRun(t *testing.T) {\n\tg := NewManager()\n\tg.AddRobot(newTestRobot(\"Robot99\"))\n\tgo func() { _ = g.Start() }()\n\ttime.Sleep(10 * time.Millisecond)\n\tassert.True(t, g.Running())\n\n\t// stop it\n\trequire.NoError(t, g.Stop())\n\tassert.False(t, g.Running())\n}\n\nfunc TestManagerStartDriverErrors(t *testing.T) {\n\tg := initTestManager1Robot()\n\te := errors.New(\"driver start error 1\")\n\ttestDriverStart = func() error {\n\t\treturn e\n\t}\n\n\tvar want error\n\twant = multierror.Append(want, e)\n\twant = multierror.Append(want, e)\n\twant = multierror.Append(want, e)\n\n\tassert.Equal(t, want, g.Start())\n\trequire.NoError(t, g.Stop())\n\n\ttestDriverStart = func() error { return nil }\n}\n\nfunc TestManagerHaltFromRobotDriverErrors(t *testing.T) {\n\tg := initTestManager1Robot()\n\tvar ec int\n\ttestDriverHalt = func() error {\n\t\tec++\n\t\treturn fmt.Errorf(\"driver halt error %d\", ec)\n\t}\n\tdefer func() { testDriverHalt = func() error { return nil } }()\n\n\tvar want error\n\tfor i := 1; i <= 3; i++ {\n\t\te := fmt.Errorf(\"driver halt error %d\", i)\n\t\twant = multierror.Append(want, e)\n\t}\n\n\tassert.Equal(t, want, g.Start())\n}\n\nfunc TestManagerStartRobotAdaptorErrors(t *testing.T) {\n\tg := initTestManager1Robot()\n\tvar ec int\n\ttestAdaptorConnect = func() error {\n\t\tec++\n\t\treturn fmt.Errorf(\"adaptor start error %d\", ec)\n\t}\n\tdefer func() { testAdaptorConnect = func() error { return nil } }()\n\n\tvar want error\n\tfor i := 1; i <= 3; i++ {\n\t\te := fmt.Errorf(\"adaptor start error %d\", i)\n\t\twant = multierror.Append(want, e)\n\t}\n\n\tassert.Equal(t, want, g.Start())\n\trequire.NoError(t, g.Stop())\n\n\ttestAdaptorConnect = func() error { return nil }\n}\n\nfunc TestManagerFinalizeErrors(t *testing.T) {\n\tg := initTestManager1Robot()\n\tvar ec int\n\ttestAdaptorFinalize = func() error {\n\t\tec++\n\t\treturn fmt.Errorf(\"adaptor finalize error %d\", ec)\n\t}\n\tdefer func() { testAdaptorFinalize = func() error { return nil } }()\n\n\tvar want error\n\tfor i := 1; i <= 3; i++ {\n\t\te := fmt.Errorf(\"adaptor finalize error %d\", i)\n\t\twant = multierror.Append(want, e)\n\t}\n\n\tassert.Equal(t, want, g.Start())\n}\n"
        },
        {
          "name": "platforms",
          "type": "tree",
          "content": null
        },
        {
          "name": "robot.go",
          "type": "blob",
          "size": 6.83203125,
          "content": "package gobot\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"sync\"\n\t\"sync/atomic\"\n\n\tmultierror \"github.com/hashicorp/go-multierror\"\n)\n\n// JSONRobot a JSON representation of a Robot.\ntype JSONRobot struct {\n\tName        string            `json:\"name\"`\n\tCommands    []string          `json:\"commands\"`\n\tConnections []*JSONConnection `json:\"connections\"`\n\tDevices     []*JSONDevice     `json:\"devices\"`\n}\n\n// NewJSONRobot returns a JSONRobot given a Robot.\nfunc NewJSONRobot(robot *Robot) *JSONRobot {\n\tjsonRobot := &JSONRobot{\n\t\tName:        robot.Name,\n\t\tCommands:    []string{},\n\t\tConnections: []*JSONConnection{},\n\t\tDevices:     []*JSONDevice{},\n\t}\n\n\tfor command := range robot.Commands() {\n\t\tjsonRobot.Commands = append(jsonRobot.Commands, command)\n\t}\n\n\trobot.Devices().Each(func(device Device) {\n\t\tjsonDevice := NewJSONDevice(device)\n\t\tjsonRobot.Connections = append(jsonRobot.Connections, NewJSONConnection(robot.Connection(jsonDevice.Connection)))\n\t\tjsonRobot.Devices = append(jsonRobot.Devices, jsonDevice)\n\t})\n\treturn jsonRobot\n}\n\n// Robot is a named entity that manages a collection of connections and devices.\n// It contains its own work routine and a collection of\n// custom commands to control a robot remotely via the Gobot api.\ntype Robot struct {\n\tName               string\n\tWork               func()\n\tconnections        *Connections\n\tdevices            *Devices\n\ttrap               func(chan os.Signal)\n\tAutoRun            bool\n\trunning            atomic.Value\n\tdone               chan bool\n\tworkRegistry       *RobotWorkRegistry\n\tWorkEveryWaitGroup *sync.WaitGroup\n\tWorkAfterWaitGroup *sync.WaitGroup\n\tCommander\n\tEventer\n}\n\n// Robots is a collection of Robot\ntype Robots []*Robot\n\n// Len returns the amount of Robots in the collection.\nfunc (r *Robots) Len() int {\n\treturn len(*r)\n}\n\n// Start calls the Start method of each Robot in the collection. We return on first error.\nfunc (r *Robots) Start(args ...interface{}) error {\n\tautoRun := true\n\tif args[0] != nil {\n\t\tvar ok bool\n\t\tif autoRun, ok = args[0].(bool); !ok {\n\t\t\t// we treat this as false\n\t\t\tautoRun = false\n\t\t}\n\t}\n\tfor _, robot := range *r {\n\t\tif err := robot.Start(autoRun); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\n// Stop calls the Stop method of each Robot in the collection. We try to stop all robots and\n// collect the errors.\nfunc (r *Robots) Stop() error {\n\tvar err error\n\tfor _, robot := range *r {\n\t\tif e := robot.Stop(); e != nil {\n\t\t\terr = multierror.Append(err, e)\n\t\t}\n\t}\n\treturn err\n}\n\n// Each enumerates through the Robots and calls specified callback function.\nfunc (r *Robots) Each(f func(*Robot)) {\n\tfor _, robot := range *r {\n\t\tf(robot)\n\t}\n}\n\n// NewRobot returns a new Robot. It supports the following optional params:\n//\n//\tname:\tstring with the name of the Robot. A name will be automatically generated if no name is supplied.\n//\t[]Connection: Connections which are automatically started and stopped with the robot\n//\t[]Device: Devices which are automatically started and stopped with the robot\n//\tfunc(): The work routine the robot will execute once all devices and connections have been initialized and started\nfunc NewRobot(v ...interface{}) *Robot {\n\tr := &Robot{\n\t\tName:        fmt.Sprintf(\"%X\", Rand(int(^uint(0)>>1))),\n\t\tconnections: &Connections{},\n\t\tdevices:     &Devices{},\n\t\tdone:        make(chan bool, 1),\n\t\ttrap: func(c chan os.Signal) {\n\t\t\tsignal.Notify(c, os.Interrupt)\n\t\t},\n\t\tAutoRun:   true,\n\t\tWork:      nil,\n\t\tEventer:   NewEventer(),\n\t\tCommander: NewCommander(),\n\t}\n\n\tfor i := range v {\n\t\tswitch val := v[i].(type) {\n\t\tcase string:\n\t\t\tr.Name = val\n\t\tcase []Connection:\n\t\t\tlog.Println(\"Initializing connections...\")\n\t\t\tfor _, connection := range val {\n\t\t\t\tc := r.AddConnection(connection)\n\t\t\t\tlog.Println(\"Initializing connection\", c.Name(), \"...\")\n\t\t\t}\n\t\tcase []Device:\n\t\t\tlog.Println(\"Initializing devices...\")\n\t\t\tfor _, device := range val {\n\t\t\t\td := r.AddDevice(device)\n\t\t\t\tlog.Println(\"Initializing device\", d.Name(), \"...\")\n\t\t\t}\n\t\tcase func():\n\t\t\tr.Work = val\n\t\t}\n\t}\n\n\tr.workRegistry = &RobotWorkRegistry{\n\t\tr: make(map[string]*RobotWork),\n\t}\n\tr.WorkAfterWaitGroup = &sync.WaitGroup{}\n\tr.WorkEveryWaitGroup = &sync.WaitGroup{}\n\n\tr.running.Store(false)\n\tlog.Println(\"Robot\", r.Name, \"initialized.\")\n\n\treturn r\n}\n\n// Start a Robot's Connections, Devices, and work. We stop initialization of\n// connections and devices on first error.\nfunc (r *Robot) Start(args ...interface{}) error {\n\tif len(args) > 0 && args[0] != nil {\n\t\tvar ok bool\n\t\tif r.AutoRun, ok = args[0].(bool); !ok {\n\t\t\t// we treat this as false\n\t\t\tr.AutoRun = false\n\t\t}\n\t}\n\tlog.Println(\"Starting Robot\", r.Name, \"...\")\n\tif err := r.Connections().Start(); err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\n\tif err := r.Devices().Start(); err != nil {\n\t\tlog.Println(err)\n\t\treturn err\n\t}\n\n\tif r.Work == nil {\n\t\tr.Work = func() {}\n\t}\n\n\tlog.Println(\"Starting work...\")\n\tgo func() {\n\t\tr.Work()\n\t\t<-r.done\n\t}()\n\n\tr.running.Store(true)\n\n\tif !r.AutoRun {\n\t\treturn nil\n\t}\n\n\tc := make(chan os.Signal, 1)\n\tr.trap(c)\n\n\t// waiting for interrupt coming on the channel\n\t<-c\n\n\t// Stop calls the Stop method on itself, if we are \"auto-running\".\n\treturn r.Stop()\n}\n\n// Stop stops a Robot's connections and devices. We try to stop all items and\n// collect all errors.\nfunc (r *Robot) Stop() error {\n\tvar err error\n\tlog.Println(\"Stopping Robot\", r.Name, \"...\")\n\tif e := r.Devices().Halt(); e != nil {\n\t\terr = multierror.Append(err, e)\n\t}\n\tif e := r.Connections().Finalize(); e != nil {\n\t\terr = multierror.Append(err, e)\n\t}\n\n\tr.done <- true\n\tr.running.Store(false)\n\treturn err\n}\n\n// Running returns if the Robot is currently started or not\nfunc (r *Robot) Running() bool {\n\treturn r.running.Load().(bool) //nolint:forcetypeassert // no error return value, so there is no better way\n}\n\n// Devices returns all devices associated with this Robot.\nfunc (r *Robot) Devices() *Devices {\n\treturn r.devices\n}\n\n// AddDevice adds a new Device to the robots collection of devices. Returns the\n// added device.\nfunc (r *Robot) AddDevice(d Device) Device {\n\t*r.devices = append(*r.Devices(), d)\n\treturn d\n}\n\n// Device returns a device given a name. Returns nil if the Device does not exist.\nfunc (r *Robot) Device(name string) Device {\n\tif r == nil {\n\t\treturn nil\n\t}\n\tfor _, device := range *r.devices {\n\t\tif device.Name() == name {\n\t\t\treturn device\n\t\t}\n\t}\n\treturn nil\n}\n\n// Connections returns all connections associated with this robot.\nfunc (r *Robot) Connections() *Connections {\n\treturn r.connections\n}\n\n// AddConnection adds a new connection to the robots collection of connections.\n// Returns the added connection.\nfunc (r *Robot) AddConnection(c Connection) Connection {\n\t*r.connections = append(*r.Connections(), c)\n\treturn c\n}\n\n// Connection returns a connection given a name. Returns nil if the Connection\n// does not exist.\nfunc (r *Robot) Connection(name string) Connection {\n\tif r == nil {\n\t\treturn nil\n\t}\n\tfor _, connection := range *r.connections {\n\t\tif connection.Name() == name {\n\t\t\treturn connection\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "robot_test.go",
          "type": "blob",
          "size": 1.802734375,
          "content": "package gobot\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestRobotConnectionEach(t *testing.T) {\n\tr := newTestRobot(\"Robot1\")\n\n\ti := 0\n\tr.Connections().Each(func(conn Connection) {\n\t\ti++\n\t})\n\tassert.Equal(t, i, r.Connections().Len())\n}\n\nfunc TestRobotToJSON(t *testing.T) {\n\tr := newTestRobot(\"Robot99\")\n\tr.AddCommand(\"test_function\", func(params map[string]interface{}) interface{} {\n\t\treturn nil\n\t})\n\tjson := NewJSONRobot(r)\n\tassert.Len(t, json.Devices, r.Devices().Len())\n\tassert.Len(t, json.Commands, len(r.Commands()))\n}\n\nfunc TestRobotDevicesToJSON(t *testing.T) {\n\tr := newTestRobot(\"Robot99\")\n\tjson := NewJSONRobot(r)\n\tassert.Len(t, json.Devices, r.Devices().Len())\n\tassert.Equal(t, \"Device1\", json.Devices[0].Name)\n\tassert.Equal(t, \"*gobot.testDriver\", json.Devices[0].Driver)\n\tassert.Equal(t, \"Connection1\", json.Devices[0].Connection)\n\tassert.Len(t, json.Devices[0].Commands, 1)\n}\n\nfunc TestRobotStart(t *testing.T) {\n\tr := newTestRobot(\"Robot99\")\n\trequire.NoError(t, r.Start())\n\trequire.NoError(t, r.Stop())\n\tassert.False(t, r.Running())\n}\n\nfunc TestRobotStartAutoRun(t *testing.T) {\n\tadaptor1 := newTestAdaptor(\"Connection1\", \"/dev/null\")\n\tdriver1 := newTestDriver(adaptor1, \"Device1\", \"0\")\n\t// work := func() {}\n\tr := NewRobot(\"autorun\",\n\t\t[]Connection{adaptor1},\n\t\t[]Device{driver1},\n\t\t// work,\n\t)\n\n\terrChan := make(chan error, 1)\n\tgo func() {\n\t\terrChan <- r.Start() // if no strange things happen, this runs until os.signal occurs\n\t}()\n\n\ttime.Sleep(10 * time.Millisecond)\n\tassert.True(t, r.Running())\n\n\t// stop it\n\trequire.NoError(t, r.Stop())\n\tassert.False(t, r.Running())\n\tselect {\n\tcase err := <-errChan:\n\t\trequire.NoError(t, err)\n\tcase <-time.After(10 * time.Millisecond):\n\t\t// because the Start() will run forever, until os.Signal, this is ok here\n\t}\n}\n"
        },
        {
          "name": "robot_work.go",
          "type": "blob",
          "size": 4.7548828125,
          "content": "package gobot\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gofrs/uuid\"\n)\n\n// RobotWorkRegistry contains all the work units registered on a Robot\ntype RobotWorkRegistry struct {\n\tsync.RWMutex\n\n\tr map[string]*RobotWork\n}\n\nconst (\n\tEveryWorkKind = \"every\"\n\tAfterWorkKind = \"after\"\n)\n\n// RobotWork and the RobotWork registry represent units of executing computation\n// managed at the Robot level. Unlike the utility functions gobot.After and gobot.Every,\n// RobotWork units require a context.Context, and can be cancelled externally by calling code.\n//\n// Usage:\n//\n//\tsomeWork := myRobot.Every(context.Background(), time.Second * 2, func(){\n//\t\tfmt.Println(\"Here I am doing work\")\n//\t})\n//\n//\tsomeWork.CallCancelFunc() // Cancel next tick and remove from work registry\n//\n// goroutines for Every and After are run on their own WaitGroups for synchronization:\n//\n//\tsomeWork2 := myRobot.Every(context.Background(), time.Second * 2, func(){\n//\t\tfmt.Println(\"Here I am doing more work\")\n//\t})\n//\n//\tsomework2.CallCancelFunc()\n//\n//\t// wait for both Every calls to finish\n//\trobot.WorkEveryWaitGroup().Wait()\ntype RobotWork struct {\n\tid         uuid.UUID\n\tkind       string\n\ttickCount  int\n\tctx        context.Context //nolint:containedctx // done by intention\n\tcancelFunc context.CancelFunc\n\tfunction   func()\n\tticker     *time.Ticker\n\tduration   time.Duration\n}\n\n// ID returns the UUID of the RobotWork\nfunc (rw *RobotWork) ID() uuid.UUID {\n\treturn rw.id\n}\n\n// CancelFunc returns the context.CancelFunc used to cancel the work\nfunc (rw *RobotWork) CancelFunc() context.CancelFunc {\n\treturn rw.cancelFunc\n}\n\n// CallCancelFunc calls the context.CancelFunc used to cancel the work\nfunc (rw *RobotWork) CallCancelFunc() {\n\trw.cancelFunc()\n}\n\n// Ticker returns the time.Ticker used in an Every so that calling code can sync on the same channel\nfunc (rw *RobotWork) Ticker() *time.Ticker {\n\tif rw.kind == AfterWorkKind {\n\t\treturn nil\n\t}\n\treturn rw.ticker\n}\n\n// TickCount returns the number of times the function successfully ran\nfunc (rw *RobotWork) TickCount() int {\n\treturn rw.tickCount\n}\n\n// Duration returns the timeout until an After fires or the period of an Every\nfunc (rw *RobotWork) Duration() time.Duration {\n\treturn rw.duration\n}\n\nfunc (rw *RobotWork) String() string {\n\tformat := `ID: %s\nKind: %s\nTickCount: %d\n\n`\n\treturn fmt.Sprintf(format, rw.id, rw.kind, rw.tickCount)\n}\n\n// WorkRegistry returns the Robot's WorkRegistry\nfunc (r *Robot) WorkRegistry() *RobotWorkRegistry {\n\treturn r.workRegistry\n}\n\n// Every calls the given function for every tick of the provided duration.\nfunc (r *Robot) Every(ctx context.Context, d time.Duration, f func()) *RobotWork {\n\trw := r.workRegistry.registerEvery(ctx, d, f)\n\tr.WorkEveryWaitGroup.Add(1)\n\tgo func() {\n\tEVERYWORK:\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-rw.ctx.Done():\n\t\t\t\tr.workRegistry.delete(rw.id)\n\t\t\t\trw.ticker.Stop()\n\t\t\t\tbreak EVERYWORK\n\t\t\tcase <-rw.ticker.C:\n\t\t\t\tf()\n\t\t\t\trw.tickCount++\n\t\t\t}\n\t\t}\n\t\tr.WorkEveryWaitGroup.Done()\n\t}()\n\treturn rw\n}\n\n// After calls the given function after the provided duration has elapsed\nfunc (r *Robot) After(ctx context.Context, d time.Duration, f func()) *RobotWork {\n\trw := r.workRegistry.registerAfter(ctx, d, f)\n\tch := time.After(d)\n\tr.WorkAfterWaitGroup.Add(1)\n\tgo func() {\n\tAFTERWORK:\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-rw.ctx.Done():\n\t\t\t\tr.workRegistry.delete(rw.id)\n\t\t\t\tbreak AFTERWORK\n\t\t\tcase <-ch:\n\t\t\t\tf()\n\t\t\t}\n\t\t}\n\t\tr.WorkAfterWaitGroup.Done()\n\t}()\n\treturn rw\n}\n\n// Get returns the RobotWork specified by the provided ID. To delete something from the registry, it's\n// necessary to call its context.CancelFunc, which will perform a goroutine-safe delete on the underlying\n// map.\nfunc (rwr *RobotWorkRegistry) Get(id uuid.UUID) *RobotWork {\n\trwr.Lock()\n\tdefer rwr.Unlock()\n\treturn rwr.r[id.String()]\n}\n\n// Delete returns the RobotWork specified by the provided ID\nfunc (rwr *RobotWorkRegistry) delete(id uuid.UUID) {\n\trwr.Lock()\n\tdefer rwr.Unlock()\n\tdelete(rwr.r, id.String())\n}\n\n// registerAfter creates a new unit of RobotWork and sets up its context/cancellation\nfunc (rwr *RobotWorkRegistry) registerAfter(ctx context.Context, d time.Duration, f func()) *RobotWork {\n\trwr.Lock()\n\tdefer rwr.Unlock()\n\n\tid, _ := uuid.NewV4()\n\trw := &RobotWork{\n\t\tid:       id,\n\t\tkind:     AfterWorkKind,\n\t\tfunction: f,\n\t\tduration: d,\n\t}\n\n\trw.ctx, rw.cancelFunc = context.WithCancel(ctx)\n\trwr.r[id.String()] = rw\n\treturn rw\n}\n\n// registerEvery creates a new unit of RobotWork and sets up its context/cancellation\nfunc (rwr *RobotWorkRegistry) registerEvery(ctx context.Context, d time.Duration, f func()) *RobotWork {\n\trwr.Lock()\n\tdefer rwr.Unlock()\n\n\tid, _ := uuid.NewV4()\n\trw := &RobotWork{\n\t\tid:       id,\n\t\tkind:     EveryWorkKind,\n\t\tfunction: f,\n\t\tduration: d,\n\t\tticker:   time.NewTicker(d),\n\t}\n\n\trw.ctx, rw.cancelFunc = context.WithCancel(ctx)\n\n\trwr.r[id.String()] = rw\n\treturn rw\n}\n"
        },
        {
          "name": "robot_work_test.go",
          "type": "blob",
          "size": 2.16796875,
          "content": "package gobot\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/gofrs/uuid\"\n\t\"github.com/stretchr/testify/assert\"\n)\n\nfunc TestRobotWork(t *testing.T) {\n\tid, _ := uuid.NewV4()\n\n\trw := &RobotWork{\n\t\tid:       id,\n\t\tkind:     EveryWorkKind,\n\t\tfunction: func() {},\n\t}\n\n\tduration := time.Second * 1\n\tctx, cancelFunc := context.WithCancel(context.Background())\n\n\trw.ctx = ctx\n\trw.cancelFunc = cancelFunc\n\trw.duration = duration\n\n\tt.Run(\"ID()\", func(t *testing.T) {\n\t\tassert.Equal(t, rw.ID(), id)\n\t})\n\n\tt.Run(\"Ticker()\", func(t *testing.T) {\n\t\tt.Skip()\n\t})\n\n\tt.Run(\"Duration()\", func(t *testing.T) {\n\t\tassert.Equal(t, rw.duration, duration)\n\t})\n}\n\nfunc TestRobotWorkRegistry(t *testing.T) {\n\trobot := NewRobot(\"testbot\")\n\n\trw := robot.Every(context.Background(), time.Millisecond*250, func() {\n\t\t_ = 1 + 1\n\t})\n\n\tt.Run(\"Get retrieves\", func(t *testing.T) {\n\t\tassert.Equal(t, robot.workRegistry.Get(rw.id), rw)\n\t})\n\n\tt.Run(\"delete deletes\", func(t *testing.T) {\n\t\trobot.workRegistry.delete(rw.id)\n\t\tpostDeleteKeys := collectStringKeysFromWorkRegistry(robot.workRegistry)\n\t\tassert.NotContains(t, postDeleteKeys, rw.id.String())\n\t})\n}\n\nfunc TestRobotAutomationFunctions(t *testing.T) {\n\tt.Run(\"Every with cancel\", func(t *testing.T) {\n\t\trobot := NewRobot(\"testbot\")\n\t\tcounter := 0\n\n\t\trw := robot.Every(context.Background(), time.Millisecond*100, func() {\n\t\t\tcounter++\n\t\t})\n\n\t\ttime.Sleep(time.Millisecond * 225)\n\t\trw.CallCancelFunc()\n\n\t\trobot.WorkEveryWaitGroup.Wait()\n\n\t\tassert.Equal(t, 2, counter)\n\t\tpostDeleteKeys := collectStringKeysFromWorkRegistry(robot.workRegistry)\n\t\tassert.NotContains(t, postDeleteKeys, rw.id.String())\n\t})\n\n\tt.Run(\"After with cancel\", func(t *testing.T) {\n\t\trobot := NewRobot(\"testbot\")\n\n\t\trw := robot.After(context.Background(), time.Millisecond*10, func() {\n\t\t\t_ = 1 + 1 // perform mindless computation!\n\t\t})\n\n\t\trw.CallCancelFunc()\n\n\t\trobot.WorkAfterWaitGroup.Wait()\n\n\t\tpostDeleteKeys := collectStringKeysFromWorkRegistry(robot.workRegistry)\n\t\tassert.NotContains(t, postDeleteKeys, rw.id.String())\n\t})\n}\n\nfunc collectStringKeysFromWorkRegistry(rwr *RobotWorkRegistry) []string {\n\tkeys := make([]string, len(rwr.r))\n\tvar idx int\n\tfor key := range rwr.r {\n\t\tkeys[idx] = key\n\t\tidx++\n\t}\n\treturn keys\n}\n"
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils.go",
          "type": "blob",
          "size": 1.888671875,
          "content": "package gobot\n\nimport (\n\t\"crypto/rand\"\n\t\"fmt\"\n\t\"math\"\n\t\"math/big\"\n\t\"time\"\n)\n\n// Every triggers f every t time.Duration until the end of days, or when a Stop()\n// is called on the Ticker that is returned by the Every function.\n// It does not wait for the previous execution of f to finish before\n// it fires the next f.\nfunc Every(t time.Duration, f func()) *time.Ticker {\n\tticker := time.NewTicker(t)\n\n\tgo func() {\n\t\tfor {\n\t\t\t<-ticker.C\n\t\t\tf()\n\t\t}\n\t}()\n\n\treturn ticker\n}\n\n// After triggers f after t duration.\nfunc After(t time.Duration, f func()) {\n\ttime.AfterFunc(t, f)\n}\n\n// Rand returns a positive random int up to maximum\nfunc Rand(maximum int) int {\n\ti, _ := rand.Int(rand.Reader, big.NewInt(int64(maximum)))\n\treturn int(i.Int64())\n}\n\n// FromScale returns a converted input from minimum, maximum to 0.0...1.0.\nfunc FromScale(input, minimum, maximum float64) float64 {\n\treturn (input - math.Min(minimum, maximum)) / (math.Max(minimum, maximum) - math.Min(minimum, maximum))\n}\n\n// ToScale returns a converted input from 0...1 to minimum...maximum scale.\n// If input is less than minimum then ToScale returns minimum.\n// If input is greater than maximum then ToScale returns maximum\nfunc ToScale(input, minimum, maximum float64) float64 {\n\ti := input*(math.Max(minimum, maximum)-math.Min(minimum, maximum)) + math.Min(minimum, maximum)\n\tswitch {\n\tcase i < math.Min(minimum, maximum):\n\t\treturn math.Min(minimum, maximum)\n\tcase i > math.Max(minimum, maximum):\n\t\treturn math.Max(minimum, maximum)\n\tdefault:\n\t\treturn i\n\t}\n}\n\n// Rescale performs a direct linear rescaling of a number from one scale to another.\nfunc Rescale(input, fromMin, fromMax, toMin, toMax float64) float64 {\n\treturn (input-fromMin)*(toMax-toMin)/(fromMax-fromMin) + toMin\n}\n\n// DefaultName returns a sensible random default name\n// for a robot, adaptor or driver\nfunc DefaultName(name string) string {\n\treturn fmt.Sprintf(\"%s-%X\", name, Rand(int(^uint(0)>>1)))\n}\n"
        },
        {
          "name": "utils_test.go",
          "type": "blob",
          "size": 1.7021484375,
          "content": "package gobot\n\nimport (\n\t\"testing\"\n\t\"time\"\n\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestEvery(t *testing.T) {\n\ti := 0\n\tbegin := time.Now()\n\tsem := make(chan time.Time, 1)\n\tEvery(2*time.Millisecond, func() {\n\t\ti++\n\t\tif i == 2 {\n\t\t\tsem <- time.Now()\n\t\t}\n\t})\n\t<-sem\n\tif time.Since(begin) < 4*time.Millisecond {\n\t\tt.Error(\"Test should have taken at least 4 milliseconds\")\n\t}\n}\n\nfunc TestEveryWhenStopped(t *testing.T) {\n\tsem := make(chan bool)\n\n\tdone := Every(100*time.Millisecond, func() {\n\t\tsem <- true\n\t})\n\n\tselect {\n\tcase <-sem:\n\t\tdone.Stop()\n\tcase <-time.After(190 * time.Millisecond):\n\t\tdone.Stop()\n\t\trequire.Fail(t, \"Every was not called\")\n\t}\n\n\tselect {\n\tcase <-time.After(190 * time.Millisecond):\n\tcase <-sem:\n\t\tt.Error(\"Every should have stopped\")\n\t}\n}\n\nfunc TestAfter(t *testing.T) {\n\ti := 0\n\tsem := make(chan bool)\n\n\tAfter(100*time.Millisecond, func() {\n\t\ti++\n\t\tsem <- true\n\t})\n\n\tselect {\n\tcase <-sem:\n\tcase <-time.After(190 * time.Millisecond):\n\t\trequire.Fail(t, \"After was not called\")\n\t}\n\n\tassert.Equal(t, 1, i)\n}\n\nfunc TestFromScale(t *testing.T) {\n\tassert.InDelta(t, 0.5, FromScale(5, 0, 10), 0.0)\n}\n\nfunc TestToScale(t *testing.T) {\n\tassert.InDelta(t, 10.0, ToScale(500, 0, 10), 0.0)\n\tassert.InDelta(t, 0.0, ToScale(-1, 0, 10), 0.0)\n\tassert.InDelta(t, 5.0, ToScale(0.5, 0, 10), 0.0)\n}\n\nfunc TestRescale(t *testing.T) {\n\tassert.InDelta(t, 5.0, Rescale(500, 0, 1000, 0, 10), 0.0)\n\tassert.InDelta(t, 490.0, Rescale(-1.0, -1, 0, 490, 350), 0.0)\n}\n\nfunc TestRand(t *testing.T) {\n\ta := Rand(10000)\n\tb := Rand(10000)\n\tif a == b {\n\t\trequire.Fail(t, \"%v should not equal %v\", a, b)\n\t}\n}\n\nfunc TestDefaultName(t *testing.T) {\n\tname := DefaultName(\"tester\")\n\tassert.Contains(t, name, \"tester\")\n}\n"
        }
      ]
    }
  ]
}