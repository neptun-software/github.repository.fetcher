{
  "metadata": {
    "timestamp": 1736567740248,
    "page": 327,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ponzu-cms/ponzu",
      "stars": 5709,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".circleci",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.576171875,
          "content": "cmd/ponzu/vendor/* linguist-vendored=false\nsystem/admin/static/dashboard/js/* linguist-vendored\nsystem/admin/static/dashboard/css/* linguist-vendored\nsystem/admin/static/dashboard/fonts/* linguist-vendored\nsystem/admin/static/dashboard/css/admin.css linguist-vendored=false\nsystem/admin/static/editor/js/* linguist-vendored\nsystem/admin/static/editor/sass/* linguist-vendored\nsystem/admin/static/editor/css/* linguist-vendored\nsystem/admin/static/editor/font/* linguist-vendored\nsystem/admin/static/common/js/* linguist-vendored\nsystem/admin/static/common/js/util.js linguist-vendored=false"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0361328125,
          "content": "/ponzu-server\n/uploads\n/search\n/*.db\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.8603515625,
          "content": "## Contributing\n\n1. Checkout branch ponzu-dev\n2. Make code changes\n3. Test changes to ponzu-dev branch\n    - make a commit to ponzu-dev\n    - to manually test, you will need to use a new copy (ponzu new path/to/code), but pass the --dev flag so that ponzu generates a new copy from the ponzu-dev branch, not master by default (i.e. `$ponzu new --dev /path/to/code`)\n    - build and run with $ ponzu build and $ ponzu run\n4. To add back to master: \n    - first push to origin ponzu-dev\n    - create a pull request \n    - will then be merged into master\n\n_A typical contribution workflow might look like:_\n```bash\n# clone the repository and checkout ponzu-dev\n$ git clone https://github.com/ponzu-cms/ponzu path/to/local/ponzu # (or your fork)\n$ git checkout ponzu-dev\n\n# install ponzu with go get or from your own local path\n$ go get github.com/ponzu-cms/ponzu/...\n# or\n$ cd /path/to/local/ponzu \n$ go install ./...\n\n# edit files, add features, etc\n$ git add -A\n$ git commit -m 'edited files, added features, etc'\n\n# now you need to test the feature.. make a new ponzu project, but pass --dev flag\n$ ponzu new --dev /path/to/new/project # will create $GOPATH/src/path/to/new/project\n\n# build & run ponzu from the new project directory\n$ cd /path/to/new/project\n$ ponzu build && ponzu run\n\n# push to your origin:ponzu-dev branch and create a PR at ponzu-cms/ponzu\n$ git push origin ponzu-dev\n# ... go to https://github.com/ponzu-cms/ponzu and create a PR\n```\n\n**Note:** if you intend to work on your own fork and contribute from it, you will\nneed to also pass `--fork=path/to/your/fork` (using OS-standard filepath structure),\nwhere `path/to/your/fork` _must_ be within `$GOPATH/src`, and you are working from a branch\ncalled `ponzu-dev`. \n\nFor example: \n```bash\n# ($GOPATH/src is implied in the fork path, do not add it yourself)\n$ ponzu new --dev --fork=github.com/nilslice/ponzu /path/to/new/project\n```\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7822265625,
          "content": "\n# Base our image on an official, minimal image of our preferred golang\nFROM golang:1.9\n\n# Note: The default golang docker image, already has the GOPATH env variable set.\n# GOPATH is located at /go\nENV GO_SRC $GOPATH/src\nENV PONZU_GITHUB github.com/ponzu-cms/ponzu\nENV PONZU_ROOT $GO_SRC/$PONZU_GITHUB\n\n# Consider updating package in the future. For instance ca-certificates etc.\n# RUN apt-get update -qq && apt-get install -y build-essential\n\n# Make the ponzu root directory\nRUN mkdir -p $PONZU_ROOT\n\n# All commands will be run inside of ponzu root\nWORKDIR $PONZU_ROOT\n\n# Copy the ponzu source into ponzu root.\nCOPY . .\n\n# the following runs the code inside of the $GO_SRC/$PONZU_GITHUB directory\nRUN go get -u $PONZU_GITHUB...\n\n# Define the scripts we want run once the container boots\n# CMD [ \"\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.48828125,
          "content": "BSD 3-Clause License\n\nCopyright (c) 2016 Boss Sauce Creative, LLC. \nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.1171875,
          "content": "![My friend, \"Gotoro\"](ponzu-banner.png)\n\n# Ponzu\n[![Current Release](https://img.shields.io/github/release/ponzu-cms/ponzu.svg)](https://github.com/ponzu-cms/ponzu/releases/latest)\n[![GoDoc](https://img.shields.io/badge/godoc-reference-blue.svg?style=flat)](https://godoc.org/github.com/ponzu-cms/ponzu)\n[![CircleCI Build Status](https://circleci.com/gh/ponzu-cms/ponzu.svg?style=shield)](https://circleci.com/gh/ponzu-cms/ponzu/tree/master)\n\n> Watch the [**video introduction**](https://www.youtube.com/watch?v=T_1ncPoLgrg)\n\nPonzu is a powerful and efficient open-source HTTP server framework and CMS. It \nprovides automatic, free, and secure HTTP/2 over TLS (certificates obtained via \n[Let's Encrypt](https://letsencrypt.org)), a useful CMS and scaffolding to \ngenerate content editors, and a fast HTTP API on which to build modern applications.\n\nPonzu is released under the BSD-3-Clause license (see LICENSE).\n(c) [Boss Sauce Creative, LLC](https://bosssauce.it)\n\n## Why?\nWith the rise in popularity of web/mobile apps connected to JSON HTTP APIs, better \ntools to support the development of content servers and management systems are necessary. \nPonzu fills the void where you want to reach for Wordpress to get a great CMS, or Rails for\nrapid development, but need a fast JSON response in a high-concurrency environment. \n\n**Because you want to turn this:**  \n```bash\n$ ponzu gen content song title:\"string\" artist:\"string\" rating:\"int\" opinion:\"string\":richtext spotify_url:\"string\"\n```\n\n**Into this:** \n\n![Generated content/song.go](https://cloud.githubusercontent.com/assets/7517515/26396244/7d0c0e40-4027-11e7-8506-e64e444a5483.png)\n\n\n**What's inside**  \n- Automatic & Free SSL/TLS<sup id=\"a1\">[1](#f1)</sup>\n- HTTP/2 and Server Push\n- Rapid development with CLI-controlled code generators\n- User-friendly, extensible CMS and administration dashboard\n- Simple deployment - single binary + assets, embedded DB ([BoltDB](https://github.com/boltdb/bolt))\n- Fast, helpful framework while maintaining control\n\n<sup id=\"f1\">1</sup> *TLS*:\n- Development: self-signed certificates auto-generated\n- Production: auto-renewing certificates fetched from [Let's Encrypt](https://letsencrypt.org)\n\n[â†©](#a1)\n\n## Documentation\nFor more detailed documentation, check out the [docs](https://docs.ponzu-cms.org)\n\n## Installation\n\n```\n$ go get -u github.com/ponzu-cms/ponzu/...\n```\n\n## Requirements\nGo 1.8+\n\nSince HTTP/2 Server Push is used, Go 1.8+ is required. However, it is not \nrequired of clients connecting to a Ponzu server to make HTTP/2 requests. \n\n## Usage\n\n```bash\n$ ponzu command [flags] <params>\n```\n\n## Commands\n\n### new\n\nCreates a project directory of the name supplied as a parameter immediately\nfollowing the 'new' option in the $GOPATH/src directory. Note: 'new' depends on \nthe program 'git' and possibly a network connection. If there is no local \nrepository to clone from at the local machine's $GOPATH, 'new' will attempt to \nclone the 'github.com/ponzu-cms/ponzu' package from over the network.\n\nExample:\n```bash\n$ ponzu new github.com/nilslice/proj\n> New ponzu project created at $GOPATH/src/github.com/nilslice/proj\n```\n\nErrors will be reported, but successful commands return nothing.\n\n---\n\n### generate, gen, g\n\nGenerate boilerplate code for various Ponzu components, such as `content`.\n\nExample:\n```bash\n            generator      struct fields and built-in types...\n             |              |\n             v              v    \n$ ponzu gen content review title:\"string\" body:\"string\":richtext rating:\"int\"\n                     ^                                   ^\n                     |                                   |\n                    struct type                         (optional) input view specifier\n```\n\nThe command above will generate the file `content/review.go` with boilerplate\nmethods, as well as struct definition, and corresponding field tags like:\n\n```go\ntype Review struct {\n\tTitle  string   `json:\"title\"`\n\tBody   string   `json:\"body\"`\n\tRating int      `json:\"rating\"`\n}\n```\n\nThe generate command will intelligently parse more sophisticated field names\nsuch as 'field_name' and convert it to 'FieldName' and vice versa, only where \nappropriate as per common Go idioms. Errors will be reported, but successful \ngenerate commands return nothing.\n\n**Input View Specifiers** _(optional)_\n\nThe CLI can optionally parse a third parameter on the fields provided to generate \nthe type of HTML view an editor field is presented within. If no third parameter\nis added, a plain text HTML input will be generated. In the example above, the \nargument shown as `body:string:richtext` would show the Richtext input instead\nof a plain text HTML input (as shown in the screenshot). The following input\nview specifiers are implemented:\n\n| CLI parameter | Generates |\n|---------------|-----------| \n| checkbox | `editor.Checkbox()` |\n| custom | generates a pre-styled empty div to fill with HTML |\n| file | `editor.File()` |\n| hidden | `editor.Input()` + uses type=hidden |\n| input, text | `editor.Input()` |\n| richtext | `editor.Richtext()` |\n| select | `editor.Select()` |\n| textarea | `editor.Textarea()` |\n| tags | `editor.Tags()` |\n\n---\n\n### build\n\nFrom within your Ponzu project directory, running build will copy and move \nthe necessary files from your workspace into the vendored directory, and \nwill build/compile the project to then be run. \n\nOptional flags:\n- `--gocmd` sets the binary used when executing `go build` within `ponzu` build step\n\nExample:\n```bash\n$ ponzu build\n(or)\n$ ponzu build --gocmd=go1.8rc1 # useful for testing\n```\n\nErrors will be reported, but successful build commands return nothing.\n\n---\n\n### run\n\nStarts the HTTP server for the JSON API, Admin System, or both.\nThe segments, separated by a comma, describe which services to start, either \n'admin' (Admin System / CMS backend) or 'api' (JSON API), and, optionally, \nif the server should utilize TLS encryption - served over HTTPS, which is\nautomatically managed using Let's Encrypt (https://letsencrypt.org) \n\nOptional flags:\n- `--port` sets the port on which the server listens for HTTP requests [defaults to 8080]\n- `--https-port` sets the port on which the server listens for HTTPS requests [defaults to 443]\n- `--https` enables auto HTTPS management via Let's Encrypt (port is always 443)\n- `--dev-https` generates self-signed SSL certificates for development-only (port is 10443)\n\nExample: \n```bash\n$ ponzu run\n(or)\n$ ponzu run --port=8080 --https admin,api\n(or) \n$ ponzu run admin\n(or)\n$ ponzu run --port=8888 api\n(or)\n$ ponzu run --dev-https\n```\nDefaults to `$ ponzu run --port=8080 admin,api` (running Admin & API on port 8080, without TLS)\n\n*Note:* \nAdmin and API cannot run on separate processes unless you use a copy of the\ndatabase, since the first process to open it receives a lock. If you intend\nto run the Admin and API on separate processes, you must call them with the\n'ponzu' command independently.\n\n---\n\n### upgrade\n\nWill backup your own custom project code (like content, add-ons, uploads, etc) so\nwe can safely re-clone Ponzu from the latest version you have or from the network \nif necessary. Before running `$ ponzu upgrade`, you should update the `ponzu`\npackage by running `$ go get -u github.com/ponzu-cms/ponzu/...` \n\nExample:\n```bash\n$ ponzu upgrade\n```\n\n---\n\n### add, a\n\nDownloads an add-on to GOPATH/src and copies it to the Ponzu project's ./addons directory.\nMust be called from within a Ponzu project directory.\n\nExample:\n```bash\n$ ponzu add github.com/bosssauce/fbscheduler\n```\n\nErrors will be reported, but successful add commands return nothing.\n\n---\n\n### version, v\n\nPrints the version of Ponzu your project is using. Must be called from within a \nPonzu project directory. By passing the `--cli` flag, the `version` command will \nprint the version of the Ponzu CLI you have installed.\n\nExample:\n```bash\n$ ponzu version\n> Ponzu v0.8.2\n(or)\n$ ponzu version --cli\n> Ponzu v0.9.2\n```\n\n---\n\n## Contributing\n\n1. Checkout branch ponzu-dev\n2. Make code changes\n3. Test changes to ponzu-dev branch\n    - make a commit to ponzu-dev\n    - to manually test, you will need to use a new copy (ponzu new path/to/code), but pass the --dev flag so that ponzu generates a new copy from the ponzu-dev branch, not master by default (i.e. `$ponzu new --dev /path/to/code`)\n    - build and run with $ ponzu build and $ ponzu run\n4. To add back to master: \n    - first push to origin ponzu-dev\n    - create a pull request \n    - will then be merged into master\n\n_A typical contribution workflow might look like:_\n```bash\n# clone the repository and checkout ponzu-dev\n$ git clone https://github.com/ponzu-cms/ponzu path/to/local/ponzu # (or your fork)\n$ git checkout ponzu-dev\n\n# install ponzu with go get or from your own local path\n$ go get github.com/ponzu-cms/ponzu/...\n# or\n$ cd /path/to/local/ponzu \n$ go install ./...\n\n# edit files, add features, etc\n$ git add -A\n$ git commit -m 'edited files, added features, etc'\n\n# now you need to test the feature.. make a new ponzu project, but pass --dev flag\n$ ponzu new --dev /path/to/new/project # will create $GOPATH/src/path/to/new/project\n\n# build & run ponzu from the new project directory\n$ cd /path/to/new/project\n$ ponzu build && ponzu run\n\n# push to your origin:ponzu-dev branch and create a PR at ponzu-cms/ponzu\n$ git push origin ponzu-dev\n# ... go to https://github.com/ponzu-cms/ponzu and create a PR\n```\n\n**Note:** if you intend to work on your own fork and contribute from it, you will\nneed to also pass `--fork=path/to/your/fork` (using OS-standard filepath structure),\nwhere `path/to/your/fork` _must_ be within `$GOPATH/src`, and you are working from a branch\ncalled `ponzu-dev`. \n\nFor example: \n```bash\n# ($GOPATH/src is implied in the fork path, do not add it yourself)\n$ ponzu new --dev --fork=github.com/nilslice/ponzu /path/to/new/project\n```\n\n\n## Credits\n- [golang.org/x/text/unicode/norm](https://golang.org/x/text/unicode/norm)\n- [golang.org/x/text/transform](https://golang.org/x/text/transform)\n- [golang.org/x/crypto/bcrypt](https://golang.org/x/crypto/bcrypt)\n- [golang.org/x/net/http2](https://golang.org/x/net/http2)\n- [github.com/blevesearch/bleve](https://github.com/blevesearch/bleve)\n- [github.com/nilslice/jwt](https://github.com/nilslice/jwt)\n- [github.com/nilslice/email](https://github.com/nilslice/email)\n- [github.com/gorilla/schema](https://github.com/gorilla/schema)\n- [github.com/gofrs/uuid](https://github.com/gofrs/uuid)\n- [github.com/tidwall/gjson](https://github.com/tidwall/gjson)\n- [github.com/tidwall/sjson](https://github.com/tidwall/sjson)\n- [github.com/boltdb/bolt](https://github.com/boltdb/bolt)\n- [github.com/spf13/cobra](github.com/spf13/cobra)\n- [Materialnote Editor](https://github.com/Cerealkillerway/materialNote)\n- [Materialize.css](https://github.com/Dogfalo/materialize)\n- [jQuery](https://github.com/jquery/jquery)\n- [Chart.js](https://github.com/chartjs/Chart.js)\n\n\n### Logo\nThe Go gopher was designed by Renee French. (http://reneefrench.blogspot.com)\nThe design is licensed under the Creative Commons 3.0 Attribution license.\nRead this article for more details: http://blog.golang.org/gopher\n\nThe Go gopher vector illustration by Hugo Arganda [@argandas](https://twitter.com/argandas) (http://about.me/argandas)\n\n\"Gotoro\", the sushi chef, is a modification of Hugo Arganda's illustration by Steve Manuel (https://github.com/nilslice).\n"
        },
        {
          "name": "addons",
          "type": "tree",
          "content": null
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "content",
          "type": "tree",
          "content": null
        },
        {
          "name": "deployment",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "management",
          "type": "tree",
          "content": null
        },
        {
          "name": "ponzu-banner.png",
          "type": "blob",
          "size": 888.4951171875,
          "content": null
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}