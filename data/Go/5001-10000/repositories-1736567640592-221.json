{
  "metadata": {
    "timestamp": 1736567640592,
    "page": 221,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "EasyDarwin/EasyDarwin",
      "stars": 6588,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1953125,
          "content": ".vscode\n/easydarwin\n/EasyDarwin.exe\n/EasyDarwin.exe~\n/logs\n/*.log\nnode_modules\n*.db\n*.db.bak\n/*.zip\n/*.tar.gz\n/*.dev.ini\n/*.dev.db\n.idea\neasydarwin_debug.ini\n.DS_Store\nUnnamed\ndev.ini\ndebug\ndebug.ini\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2998046875,
          "content": "# 使用 Go 语言官方基础镜像\nFROM golang:latest\n\n# 设置工作目录\nWORKDIR /app\n\n# 复制所有文件到工作目录\nCOPY . .\n\n# 初始化 Go module\nRUN go mod init\n\n# 构建应用\nRUN go build -o easydarwin .\n\n# 暴露所需的端口\nEXPOSE 554\nEXPOSE 10008\n\n# 启动应用\nCMD [\"./easydarwin\"]\n"
        },
        {
          "name": "EasyDarwin_windows.syso",
          "type": "blob",
          "size": 1.376953125,
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.3037109375,
          "content": "# EasyDarwin开源流媒体服务器\n\n\n## 主要功能特点\n\n- 基于Golang开发维护；\n- 支持Windows、Linux、macOS平台；\n- 支持RTSP推流分发（推模式转发）；\n- 支持RTSP拉流分发（拉模式转发）；\n- 服务端录像 参考:https://blog.csdn.net/jyt0551/article/details/84189498\n- 服务端录像检索与回放 参考:https://blog.csdn.net/jyt0551/article/details/84189498\n- 关键帧缓存；\n- 秒开画面；\n- Web后台管理；\n- 分布式负载均衡；\n\n\n## 安装部署\n\n- [直接下载运行Release包](https://www.easydarwin.org/p/easydarwin.html)\n\n- 直接运行(Windows)\n\n    EasyDarwin.exe\n    \n    以 `Ctrl + C` 停止服务\n\n- 以服务启动(Windows)\n\n    ServiceInstall-EasyDarwin.exe\n    \n    以 ServiceUninstall-EasyDarwin.exe 卸载 EasyDarwin 服务\n\n- 直接运行(Linux/macOS)\n\n\t\tcd EasyDarwin\n\t\t./easydarwin\n\t\t# Ctrl + C\n\n- 以服务启动(Linux/macOS)\n\n\t\tcd EasyDarwin\n\t\t./start.sh\n\t\t# ./stop.sh\n\n## 二次开发\n\n### 准备工具\n\n        # go tools\n        go get -u -v github.com/kardianos/govendor\n        go get -u -v github.com/penggy/gobuild\n\n        # npm tools\n        npm i -g apidoc\n        npm i -g rimraf\n\n\n### 编译命令\n\n- 获取代码\n\n        cd $GOPATH/src/github.com\n        mkdir EasyDarwin && cd EasyDarwin\n        git clone https://github.com/EasyDarwin/EasyDarwin.git --depth=1 EasyDarwin\n        cd EasyDarwin\n\n- 以开发模式运行\n\n        npm run dev\n\n- 以开发模式运行前端 Run as dev mode\n\n        npm run dev:www       \n\n- 编译前端  Build www\n\n        cd web_src && npm i\n        cd ..\n        npm run build:www\n\n- 编译 Windows 版本 Build windows version\n\n        npm run build:win\n\n- 编译 Linux/macOS 版本 (在 bash 环境下执行) Build linux/macOS version\n\n        npm run build:lin       \n\n- 清理编译文件 Clean\n\n        npm run clean \n\n\n## 技术支持\n\n- 邮件：[support@easydarwin.org](mailto:support@easydarwin.org) \n\n- QQ交流群：**965773206**\n\n- EasyDarwin开源流媒体服务器是属于EasyDarwin开源团队的免费产品，大家免费使用，同时，EasyDarwin开源团队也能提供相应的收费技术咨询、技术服务和技术定制，谢谢大家支持！\n\n\n## 获取更多信息\n\n**EasyDarwin**开源项目：[www.EasyDarwin.org](http://www.easydarwin.org)\n\nCopyright &copy; EasyDarwin.org Team 2012-2024\n"
        },
        {
          "name": "ServiceInstall-EasyDarwin.exe",
          "type": "blob",
          "size": 2466.5,
          "content": null
        },
        {
          "name": "ServiceUninstall-EasyDarwin.exe",
          "type": "blob",
          "size": 2466.5,
          "content": null
        },
        {
          "name": "easydarwin.ini",
          "type": "blob",
          "size": 2.12890625,
          "content": "[http]\nport=10008\ndefault_username=admin\ndefault_password=admin\n\n[rtsp]\nport=554\n\n; rtsp 超时时间，包括RTSP建立连接与数据收发。\ntimeout=28800\n\n; 是否使能gop cache。如果使能，服务器会缓存最后一个I帧以及其后的非I帧，以提高播放速度。但是可能在高并发的情况下带来内存压力。\ngop_cache_enable=1\n\n; 新的推流器连接时，如果已有同一个推流器（PATH相同）在推流，是否关闭老的推流器。\n; 如果为0，则不会关闭老的推流器，新的推流器会被响应406错误，否则会关闭老的推流器，新的推流器会响应成功。\nclose_old=0\n\n; 当close_old为1时，是否保留被关闭的推流器对应的播放器。\n; 如果为0，则原推流器对应的播放器会被断开。否则会被保留下来。注意，如果该选项为1，可能某些播放器会有异常，因为RTP序列可能不一致了。\nkeep_players=0\n\n; 是否使能向服务器推流或者从服务器播放时验证用户名密码. [注意] 因为服务器端并不保存明文密码，所以推送或者播放时，客户端应该输入密码的md5后的值。\n; password should be the hex of md5(original password)\nauthorization_enable=0\n\n; 是否使能推送的同事进行本地存储，使能后则可以进行录像查询与回放。\nsave_stream_to_local=0\n\n;easydarwin使用ffmpeg工具来进行存储。这里表示ffmpeg的可执行程序的路径\nffmpeg_path=/Users/ze/Downloads/ffmpeg-20180719-9cb3d8f-macos64-shared/bin/ffmpeg\n\n;本地存储所将要保存的根目录。如果不存在，程序会尝试创建该目录。\nm3u8_dir_path=/Users/ze/Downloads/EasyDarwinGoM3u8\n\n;切片文件时长。本地存储时，将以该时间段为标准来生成ts文件(该时间+一个I帧间隔)，单位秒。\n;如果需要直播，这个值设小点，但是这样会产生很多ts文件；如果不需要直播，只要存储的话，可设大些。\nts_duration_second=6\n\n;key为拉流时的自定义路径，value为ffmpeg转码格式，比如可设置为-c:v copy -c:a copy，表示copy源格式；default表示使用ffmpeg内置的输出格式，会进行转码。\n/stream_265=default"
        },
        {
          "name": "ed.ico",
          "type": "blob",
          "size": 1.123046875,
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 5.3447265625,
          "content": "package main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/penggy/EasyGoLib/db\"\n\n\t\"github.com/EasyDarwin/EasyDarwin/models\"\n\t\"github.com/EasyDarwin/EasyDarwin/routers\"\n\t\"github.com/EasyDarwin/EasyDarwin/rtsp\"\n\tfigure \"github.com/common-nighthawk/go-figure\"\n\t\"github.com/penggy/EasyGoLib/utils\"\n\t\"github.com/penggy/service\"\n)\n\nvar (\n\tgitCommitCode string\n\tbuildDateTime string\n)\n\ntype program struct {\n\thttpPort   int\n\thttpServer *http.Server\n\trtspPort   int\n\trtspServer *rtsp.Server\n}\n\nfunc (p *program) StopHTTP() (err error) {\n\tif p.httpServer == nil {\n\t\terr = fmt.Errorf(\"HTTP Server Not Found\")\n\t\treturn\n\t}\n\tctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer cancel()\n\tif err = p.httpServer.Shutdown(ctx); err != nil {\n\t\treturn\n\t}\n\treturn\n}\n\nfunc (p *program) StartHTTP() (err error) {\n\tp.httpServer = &http.Server{\n\t\tAddr:              fmt.Sprintf(\":%d\", p.httpPort),\n\t\tHandler:           routers.Router,\n\t\tReadHeaderTimeout: 5 * time.Second,\n\t}\n\tlink := fmt.Sprintf(\"http://%s:%d\", utils.LocalIP(), p.httpPort)\n\tlog.Println(\"http server start -->\", link)\n\tgo func() {\n\t\tif err := p.httpServer.ListenAndServe(); err != nil && err != http.ErrServerClosed {\n\t\t\tlog.Println(\"start http server error\", err)\n\t\t}\n\t\tlog.Println(\"http server end\")\n\t}()\n\treturn\n}\n\nfunc (p *program) StartRTSP() (err error) {\n\tif p.rtspServer == nil {\n\t\terr = fmt.Errorf(\"RTSP Server Not Found\")\n\t\treturn\n\t}\n\tsport := \"\"\n\tif p.rtspPort != 554 {\n\t\tsport = fmt.Sprintf(\":%d\", p.rtspPort)\n\t}\n\tlink := fmt.Sprintf(\"rtsp://%s%s\", utils.LocalIP(), sport)\n\tlog.Println(\"rtsp server start -->\", link)\n\tgo func() {\n\t\tif err := p.rtspServer.Start(); err != nil {\n\t\t\tlog.Println(\"start rtsp server error\", err)\n\t\t}\n\t\tlog.Println(\"rtsp server end\")\n\t}()\n\treturn\n}\n\nfunc (p *program) StopRTSP() (err error) {\n\tif p.rtspServer == nil {\n\t\terr = fmt.Errorf(\"RTSP Server Not Found\")\n\t\treturn\n\t}\n\tp.rtspServer.Stop()\n\treturn\n}\n\nfunc (p *program) Start(s service.Service) (err error) {\n\tlog.Println(\"********** START **********\")\n\tif utils.IsPortInUse(p.httpPort) {\n\t\terr = fmt.Errorf(\"HTTP port[%d] In Use\", p.httpPort)\n\t\treturn\n\t}\n\tif utils.IsPortInUse(p.rtspPort) {\n\t\terr = fmt.Errorf(\"RTSP port[%d] In Use\", p.rtspPort)\n\t\treturn\n\t}\n\terr = models.Init()\n\tif err != nil {\n\t\treturn\n\t}\n\terr = routers.Init()\n\tif err != nil {\n\t\treturn\n\t}\n\tp.StartRTSP()\n\tp.StartHTTP()\n\n\tif !utils.Debug {\n\t\tlog.Println(\"log files -->\", utils.LogDir())\n\t\tlog.SetOutput(utils.GetLogWriter())\n\t}\n\tgo func() {\n\t\tfor range routers.API.RestartChan {\n\t\t\tp.StopHTTP()\n\t\t\tp.StopRTSP()\n\t\t\tutils.ReloadConf()\n\t\t\tp.StartRTSP()\n\t\t\tp.StartHTTP()\n\t\t}\n\t}()\n\n\tgo func() {\n\t\tlog.Printf(\"demon pull streams\")\n\t\tfor {\n\t\t\tvar streams []models.Stream\n\t\t\tdb.SQLite.Find(&streams)\n\t\t\tif err := db.SQLite.Find(&streams).Error; err != nil {\n\t\t\t\tlog.Printf(\"find stream err:%v\", err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tfor i := len(streams) - 1; i > -1; i-- {\n\t\t\t\tv := streams[i]\n\t\t\t\tif rtsp.GetServer().GetPusher(v.CustomPath) != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tagent := fmt.Sprintf(\"EasyDarwinGo/%s\", routers.BuildVersion)\n\t\t\t\tif routers.BuildDateTime != \"\" {\n\t\t\t\t\tagent = fmt.Sprintf(\"%s(%s)\", agent, routers.BuildDateTime)\n\t\t\t\t}\n\t\t\t\tclient, err := rtsp.NewRTSPClient(rtsp.GetServer(), v.URL, int64(v.HeartbeatInterval)*1000, agent)\n\t\t\t\tif err != nil {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tclient.CustomPath = v.CustomPath\n\n\t\t\t\terr = client.Start(time.Duration(v.IdleTimeout) * time.Second)\n\t\t\t\tif err != nil {\n\t\t\t\t\tlog.Printf(\"Pull stream err :%v\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tpusher := rtsp.NewClientPusher(client)\n\t\t\t\trtsp.GetServer().AddPusher(pusher)\n\t\t\t\t//streams = streams[0:i]\n\t\t\t\t//streams = append(streams[:i], streams[i+1:]...)\n\t\t\t}\n\t\t\ttime.Sleep(10 * time.Second)\n\t\t}\n\t}()\n\treturn\n}\n\nfunc (p *program) Stop(s service.Service) (err error) {\n\tdefer log.Println(\"********** STOP **********\")\n\tdefer utils.CloseLogWriter()\n\tp.StopHTTP()\n\tp.StopRTSP()\n\tmodels.Close()\n\treturn\n}\n\nfunc main() {\n\tflag.StringVar(&utils.FlagVarConfFile, \"config\", \"\", \"configure file path\")\n\tflag.Parse()\n\ttail := flag.Args()\n\n\t// log\n\tlog.SetPrefix(\"[EasyDarwin] \")\n\tlog.SetFlags(log.Lshortfile | log.LstdFlags)\n\n\tlog.Printf(\"git commit code:%s\", gitCommitCode)\n\tlog.Printf(\"build date:%s\", buildDateTime)\n\trouters.BuildVersion = fmt.Sprintf(\"%s.%s\", routers.BuildVersion, gitCommitCode)\n\trouters.BuildDateTime = buildDateTime\n\n\tsec := utils.Conf().Section(\"service\")\n\tsvcConfig := &service.Config{\n\t\tName:        sec.Key(\"name\").MustString(\"EasyDarwin_Service\"),\n\t\tDisplayName: sec.Key(\"display_name\").MustString(\"EasyDarwin_Service\"),\n\t\tDescription: sec.Key(\"description\").MustString(\"EasyDarwin_Service\"),\n\t}\n\n\thttpPort := utils.Conf().Section(\"http\").Key(\"port\").MustInt(10008)\n\trtspServer := rtsp.GetServer()\n\tp := &program{\n\t\thttpPort:   httpPort,\n\t\trtspPort:   rtspServer.TCPPort,\n\t\trtspServer: rtspServer,\n\t}\n\ts, err := service.New(p, svcConfig)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tutils.PauseExit()\n\t}\n\tif len(tail) > 0 {\n\t\tcmd := strings.ToLower(tail[0])\n\t\tif cmd == \"install\" || cmd == \"stop\" || cmd == \"start\" || cmd == \"uninstall\" {\n\t\t\tfigure.NewFigure(\"EasyDarwin\", \"\", false).Print()\n\t\t\tlog.Println(svcConfig.Name, cmd, \"...\")\n\t\t\tif err = service.Control(s, cmd); err != nil {\n\t\t\t\tlog.Println(err)\n\t\t\t\tutils.PauseExit()\n\t\t\t}\n\t\t\tlog.Println(svcConfig.Name, cmd, \"ok\")\n\t\t\treturn\n\t\t}\n\t}\n\tfigure.NewFigure(\"EasyDarwin\", \"\", false).Print()\n\tif err = s.Run(); err != nil {\n\t\tlog.Println(err)\n\t\tutils.PauseExit()\n\t}\n}\n"
        },
        {
          "name": "models",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 1.833984375,
          "content": "{\n  \"name\": \"easydarwin\",\n  \"version\": \"8.1.0\",\n  \"description\": \"EasyDarwin Open Source Media Server\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build:ico\": \"rsrc -arch amd64 -ico ed.ico -o EasyDarwin_windows.syso\",\n    \"build:www\": \"cd web_src && npm run build && cd .. && apidoc -i routers -o www/apidoc\",\n    \"build:doc\": \"apidoc -i routers -o www/apidoc\",\n    \"build:win\": \"go build -tags release -ldflags \\\"-s -w\\\" -o EasyDarwin.exe\",\n    \"build:lin\": \"go build -tags release -ldflags \\\"-X 'main.buildDateTime=$(date '+%Y-%m-%d %H:%M:%S')' -X 'main.gitCommitCode=$(git rev-list --full-history --all --abbrev-commit --max-count 1)' -s -w\\\" -o easydarwin\",\n    \"build:dev\": \"go build -o EasyDarwin.exe\",\n    \"dev\": \"go build -o EasyDarwin.exe\",\n    \"dev:lin\": \"go build -o easydarwin\",\n    \"dev:www\": \"cd web_src && npm run start\",\n    \"clean\": \"rimraf EasyDarwin.exe EasyDarwin.exe~ easydarwin\"\n  },\n  \"apidoc\": {\n    \"name\": \"EasyDarwin\",\n    \"title\": \"EasyDarwin API Reference\",\n    \"order\": [\n      \"stats\",\n      \"Pushers\",\n      \"Players\",\n\n      \"stream\",\n      \"StreamStart\",\n      \"StreamStop\",\n\n      \"record\",\n      \"RecordFolders\",\n      \"RecordFiles\",\n\n      \"sys\",\n      \"Login\",\n      \"Logout\",\n      \"GetUserInfo\",\n      \"ModifyPassword\",\n      \"GetServerInfo\"\n    ]\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"pack\": [\n    {\n      \"name\": \"EasyDarwin-windows\",\n      \"format\": \"zip\",\n      \"pattern\": \"{www/**,EasyDarwin.exe,ServiceInstall-EasyDarwin.exe,ServiceUninstall-EasyDarwin.exe,easydarwin.ini}\",\n      \"options\": {\n        \"dot\": true,\n        \"ignore\": [\n          \"*.log\"\n        ]\n      }\n    },\n    {\n      \"name\": \"EasyDarwin-linux\",\n      \"format\": \"tar\",\n      \"pattern\": \"{www/**,easydarwin,easydarwin.ini,*.sh}\",\n      \"options\": {\n        \"dot\": true,\n        \"ignore\": [\n          \"*.log\"\n        ]\n      }\n    }\n  ]\n}\n"
        },
        {
          "name": "routers",
          "type": "tree",
          "content": null
        },
        {
          "name": "rtsp",
          "type": "tree",
          "content": null
        },
        {
          "name": "start.sh",
          "type": "blob",
          "size": 0.08984375,
          "content": "#!/bin/bash\nCWD=$(cd \"$(dirname $0)\";pwd)\n\"$CWD\"/easydarwin install\n\"$CWD\"/easydarwin start "
        },
        {
          "name": "stop.sh",
          "type": "blob",
          "size": 0.0908203125,
          "content": "#!/bin/bash\nCWD=$(cd \"$(dirname $0)\";pwd)\n\"$CWD\"/easydarwin stop\n\"$CWD\"/easydarwin uninstall "
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        },
        {
          "name": "web_src",
          "type": "tree",
          "content": null
        },
        {
          "name": "www",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}