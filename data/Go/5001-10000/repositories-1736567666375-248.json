{
  "metadata": {
    "timestamp": 1736567666375,
    "page": 248,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI1MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "filhodanuvem/gitql",
      "stars": 6294,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1044921875,
          "content": "*.sublime-*\ngit2go\nlibgit2\ngitql\n.DS_Store\n.vscode*\n.idea/\nvendor\ntest/test_helper/\ntest/bats/\n.version.txt"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.3505859375,
          "content": "[submodule \"test/bats\"]\n\tpath = test/bats\n\turl = https://github.com/bats-core/bats-core.git\n[submodule \"test/test_helper/bats-support\"]\n\tpath = test/test_helper/bats-support\n\turl = https://github.com/bats-core/bats-support.git\n[submodule \"test/test_helper/bats-assert\"]\n\tpath = test/test_helper/bats-assert\n\turl = https://github.com/bats-core/bats-assert.git\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 0.515625,
          "content": "before:\n  hooks:\n    - go mod tidy\n    - go generate ./...\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\narchives:\n  - replacements:\n      darwin: Darwin\n      linux: Linux\n      windows: Windows\n      386: i386\n      amd64: x86_64\nchecksum:\n  name_template: 'checksums.txt'\nsnapshot:\n  name_template: \"{{ .Tag }}-next\"\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^test:'\nrelease:\n  github: \n  disable: false\n  draft: false\n  name_template: \"{{.Tag}}\""
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.46875,
          "content": "# run with:\n# docker build -t gitql .\n# docker run -it --entrypoint /bin/sh gitql:latest\n\nFROM golang:1.20.7-alpine3.18 as builder\n\nWORKDIR /src\nCOPY go.mod .\nCOPY go.sum .\nCOPY main.go autocomplete.go version.txt ./\nCOPY lexical lexical\nCOPY parser  parser\nCOPY runtime runtime\nCOPY semantical semantical\nCOPY utilities utilities\nRUN go mod download\nRUN CGO_ENABLED=0 GOOS=linux go build -o /bin/gitql\n\nFROM alpine:3.18\nCOPY --from=builder /bin/gitql /bin/\n\nENTRYPOINT [\"gitql\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Claudson Oliveira\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.396484375,
          "content": "Gitql \n![](https://github.com/cloudson/gitql/workflows/CI/badge.svg) \n[![Go Report Card](https://goreportcard.com/badge/github.com/filhodanuvem/gitql)](https://goreportcard.com/report/github.com/filhodanuvem/gitql) \n[![Open Source Helpers](https://www.codetriage.com/filhodanuvem/gitql/badges/users.svg)](https://www.codetriage.com/filhodanuvem/gitql)\n<a href=\"https://opensource.org/licenses/MIT\">\n  <img src=\"https://img.shields.io/badge/license-MIT-blue.svg\" alt=\"License MIT\">\n</a>\n===============\n\nGitql is a Git query language.\n\nIn a repository path...\n\n![how to use](howtouse.gif)\n\nSee more [here](https://asciinema.org/a/97094)\n\n## Reading the code \n⚠️ Gitql is my first golang project. If you are a beginner looking for using the project as a guideline (how to organise or make an idiomatic go code), I recommend you [polyglot](https://github.com/filhodanuvem/polyglot) instead. \n\n## Requirements \n- Go 1.16+ \n\n## How to install\n\nYou can access the [releases page](https://github.com/cloudson/gitql/releases) and just grab the binary. If you want to compile itself just run `go build .`.\n\n## Examples\n\n`gitql \"your query\" `  \nor  \n`git ql \"your query\" `\n\nAs an example, this is the `commits` table:\n\n| commits |\n| ---------|\n| author |\n| author_email |\n| committer |\n| committer_email |\n| hash |\n| date |\n| message |\n| full_message |\n\n(see more tables [here](tables.md))\n\n## Example Commands\n* `select hash, author, message from commits limit 3`\n* `select hash, message from commits where 'hell' in full_message or 'Fuck' in full_message`\n* `select hash, message, author_email from commits where author = 'cloudson'`\n* `select date, message from commits where date < '2014-04-10'`\n* `select message from commits where 'hell' in message order by date asc`\n* `select distinct author from commits where date < '2020-01-01'`\n\n## Questions?\n\n`gitql` or open an [issue](https://github.com/cloudson/gitql/issues)\n\nNotes:\n* Gitql doesn't want to _kill_ `git log` - it was created just for science! :sweat_smile:\n* It's read-only - no deleting, inserting, or updating tables or commits. :stuck_out_tongue_closed_eyes:\n* The default limit is 10 rows.\n* It's inspired by [textql](https://github.com/dinedal/textql).\n* Gitql is a compiler/interpreter instead of just read a sqlite database with all commits, tags, etc. because we would need to sync the tables every time before run sql and we would have sqlite bases for each repository. :neutral_face:\n"
        },
        {
          "name": "autocomplete.go",
          "type": "blob",
          "size": 4.1162109375,
          "content": "package main\n\nfunc suggestColumnsFromLatest(focused string) [][]rune {\n\treturn suggestLatest(focused[:len(focused)-1], [][]string{\n\t\t[]string{\"hash\", \"date\", \"author\", \"author_email\", \"committer\", \"committer_email\", \"message\", \"full_message\"},\n\t\t[]string{\"name\", \"full_name\", \"type\", \"hash\"},\n\t\t[]string{\"name\", \"url\", \"push_url\", \"owner\"},\n\t\t[]string{\"name\", \"full_name\", \"hash\"},\n\t})\n}\n\n// Creates a candidate from the input previous character string.\nfunc suggestLatest(focused string, candidacies [][]string) [][]rune {\n\tvar suggests [][]rune\n\tfor _, candidacy := range candidacies {\n\t\ts := getPartsFromSlice(focused, candidacy)\n\t\tif s != nil {\n\t\t\tsuggests = append(suggests, s...)\n\t\t}\n\t}\n\tremoveDuplicates(&suggests)\n\n\treturn suggests\n}\n\nfunc containColumns(focused string) bool {\n\t_, ok := isContained(focused, []string{\n\t\t\"select\", // gitql> select [tab\n\t\t\"distinct,\",\n\t\t\"name,\",\n\t\t\"url,\",\n\t\t\"push_url,\",\n\t\t\"owner,\",\n\t\t\"full_name,\",\n\t\t\"hash,\",\n\t\t\"date,\",\n\t\t\"author,\",\n\t\t\"author_email,\",\n\t\t\"committer,\",\n\t\t\"committer_email,\",\n\t\t\"message,\",\n\t\t\"full_message,\",\n\t\t\"type,\",\n\t})\n\treturn ok\n}\n\n// Remove duplicates elements in slice.\nfunc removeDuplicates(s *[][]rune) {\n\tfound := make(map[string]bool)\n\tj := 0\n\tfor i, x := range *s {\n\t\tkey := string(x)\n\t\tif !found[key] {\n\t\t\tfound[key] = true\n\t\t\t(*s)[j] = (*s)[i]\n\t\t\tj++\n\t\t}\n\t}\n\t*s = (*s)[:j]\n}\n\nfunc suggestQuery(inputs [][]rune, pos int) [][]rune {\n\n\tln := len(inputs)\n\n\tif ln == 1 {\n\t\t// When nothing is input yet\n\t\treturn [][]rune{[]rune(\"select\")}\n\t}\n\tfocused := string(inputs[ln-2])\n\tif focused == \"select\" {\n\t\t// gitql> select [tab\n\t\t// In the case where the most recent input is \"select\"\n\t\treturn [][]rune{\n\t\t\t[]rune(\"distinct\"),\n\t\t\t[]rune(\"*\"),\n\t\t\t[]rune(\"name\"),\n\t\t\t[]rune(\"url\"),\n\t\t\t[]rune(\"push_url\"),\n\t\t\t[]rune(\"owner\"),\n\t\t\t[]rune(\"full_name\"),\n\t\t\t[]rune(\"hash\"),\n\t\t\t[]rune(\"date\"),\n\t\t\t[]rune(\"author\"),\n\t\t\t[]rune(\"author_email\"),\n\t\t\t[]rune(\"committer\"),\n\t\t\t[]rune(\"committer_email\"),\n\t\t\t[]rune(\"message\"),\n\t\t\t[]rune(\"full_message\"),\n\t\t\t[]rune(\"type\"),\n\t\t}\n\t} else if containColumns(focused) {\n\t\t// gitql> select name, [tab\n\t\t// gitql> select committer, [tab\n\t\t// In the case where the most recent input is the column name and comma\n\t\treturn suggestColumnsFromLatest(focused)\n\t} else if focused == \"from\" {\n\t\t// gitql> select * from [tab\n\t\t// In the case after inputted \"from\"\n\t\treturn [][]rune{\n\t\t\t[]rune(\"tags\"),\n\t\t\t[]rune(\"branches\"),\n\t\t\t[]rune(\"commits\"),\n\t\t\t[]rune(\"refs\"),\n\t\t}\n\t} else if focused == \"order\" {\n\t\treturn [][]rune{[]rune(\"by\")}\n\t} else if focused == \"where\" || focused == \"by\" || focused == \"or\" || focused == \"and\" {\n\t\t// gitql> select name from commits where [tab\n\t\t// gitql> select * from commits where committer = \"K\" order by [tab\n\t\t// gitql> select * from commits where committer = \"K\" and [tab\n\t\t// In the case is inputted after \"where\", \"by\", \"and\", \"or\"\n\t\tvar table string\n\t\tfor i := 0; i < len(inputs); i++ {\n\t\t\tif string(inputs[i]) == \"from\" {\n\t\t\t\ti++\n\t\t\t\ttable = string(inputs[i])\n\t\t\t}\n\t\t}\n\n\t\tswitch table {\n\t\tcase \"commits\":\n\t\t\treturn [][]rune{\n\t\t\t\t[]rune(\"hash\"),\n\t\t\t\t[]rune(\"date\"),\n\t\t\t\t[]rune(\"author\"),\n\t\t\t\t[]rune(\"author_email\"),\n\t\t\t\t[]rune(\"committer\"),\n\t\t\t\t[]rune(\"committer_email\"),\n\t\t\t\t[]rune(\"message\"),\n\t\t\t\t[]rune(\"full_message\"),\n\t\t\t}\n\t\tcase \"refs\":\n\t\t\treturn [][]rune{\n\t\t\t\t[]rune(\"name\"),\n\t\t\t\t[]rune(\"full_name\"),\n\t\t\t\t[]rune(\"type\"),\n\t\t\t\t[]rune(\"hash\"),\n\t\t\t}\n\t\tcase \"branches\", \"tags\":\n\t\t\treturn [][]rune{\n\t\t\t\t[]rune(\"name\"),\n\t\t\t\t[]rune(\"full_name\"),\n\t\t\t\t[]rune(\"hash\"),\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"from\"),\n\t\t[]rune(\"where\"),\n\t\t[]rune(\"order\"),\n\t\t[]rune(\"by\"),\n\t\t[]rune(\"or\"),\n\t\t[]rune(\"and\"),\n\t\t[]rune(\"limit\"),\n\t\t[]rune(\"in\"),\n\t\t[]rune(\"asc\"),\n\t\t[]rune(\"desc\"),\n\t}\n}\n\nfunc getPartsFromSlice(focused string, candidacy []string) [][]rune {\n\tidx, ok := isContained(focused, candidacy)\n\tif ok {\n\t\tvar suggests [][]rune\n\t\tfor i, v := range candidacy {\n\t\t\t// Create slices other than what was focused\n\t\t\tif i != idx {\n\t\t\t\tsuggests = append(suggests, []rune(v))\n\t\t\t}\n\t\t}\n\t\treturn suggests\n\t}\n\treturn nil\n}\n\nfunc isContained(focused string, candidacy []string) (int, bool) {\n\tfor idx, val := range candidacy {\n\t\tif focused == val {\n\t\t\treturn idx, true\n\t\t}\n\t}\n\treturn -1, false\n}\n"
        },
        {
          "name": "autocomplete_test.go",
          "type": "blob",
          "size": 5.3701171875,
          "content": "package main\n\nimport (\n\t\"strings\"\n\t\"testing\"\n)\n\nfunc TestSuggestColumnsFromLatest(t *testing.T) {\n\tanswer := []string{\n\t\t\"hash\",\n\t\t\"type\",\n\t\t\"date\",\n\t\t\"author\",\n\t\t\"author_email\",\n\t\t\"committer\",\n\t\t\"committer_email\",\n\t\t\"message\",\n\t\t\"full_message\",\n\t\t\"name\",\n\t\t\"full_name\",\n\t}\n\n\texpected := createHashMap(answer)\n\tresult := suggestColumnsFromLatest(\"hash,\")\n\tfor _, v := range result {\n\t\tif _, ok := expected[string(v)]; !ok {\n\t\t\tt.Errorf(\"expected 'hash', 'type', 'date', 'author', 'author_email', 'committer', 'committer_email', 'message', 'full_message', 'name', 'full_name' got %s\", string(v))\n\t\t}\n\t}\n}\n\nfunc TestRemoveDuplicates(t *testing.T) {\n\twords := [][]rune{\n\t\t[]rune(\"alpaca\"),\n\t\t[]rune(\"alpaca\"),\n\t\t[]rune(\"Code-Hex\"),\n\t\t[]rune(\"Hello\"),\n\t\t[]rune(\"Hello\"),\n\t\t[]rune(\"World\"),\n\t}\n\n\tremoveDuplicates(&words)\n\n\tif len(words) != 4 {\n\t\tt.Error(\"Failed to remove duplicates\")\n\t}\n\n\tif string(words[0]) != \"alpaca\" {\n\t\tt.Errorf(\"expected alpaca, got %s\", string(words[0]))\n\t}\n\n\tif string(words[1]) != \"Code-Hex\" {\n\t\tt.Errorf(\"expected Code-Hex, got %s\", string(words[1]))\n\t}\n\n\tif string(words[2]) != \"Hello\" {\n\t\tt.Errorf(\"expected Hello, got %s\", string(words[2]))\n\t}\n\n\tif string(words[3]) != \"World\" {\n\t\tt.Errorf(\"expected World, got %s\", string(words[3]))\n\t}\n}\n\nfunc TestIsContained(t *testing.T) {\n\tidx, ok := isContained(\"Code-Hex\", []string{\"cloudson\", \"luizperes\", \"Code-Hex\"})\n\tif !ok {\n\t\tt.Error(\"Failed to invoke `isContained`\")\n\t}\n\n\tif idx != 2 {\n\t\tt.Errorf(\"expected %d, got %d\", 2, idx)\n\t}\n}\n\nfunc TestGetPartsFromSlice(t *testing.T) {\n\tgotSlice := getPartsFromSlice(\"luizperes\", []string{\"cloudson\", \"luizperes\", \"Code-Hex\"})\n\tif len(gotSlice) != 2 {\n\t\tt.Error(\"Failed to invoke `getPartsFromSlice`\")\n\t}\n\n\tif string(gotSlice[0]) != \"cloudson\" {\n\t\tt.Errorf(\"expected cloudson, got %s\", string(gotSlice[0]))\n\t}\n\n\tif string(gotSlice[1]) != \"Code-Hex\" {\n\t\tt.Errorf(\"expected Code-Hex, got %s\", string(gotSlice[1]))\n\t}\n\n\tnotSlice := getPartsFromSlice(\"gopher\", []string{\"cloudson\", \"luizperes\", \"Code-Hex\"})\n\tif len(notSlice) != 0 {\n\t\tt.Error(\"Failed to invoke `getPartsFromSlice`\")\n\t}\n}\n\nfunc TestSuggestQuery(t *testing.T) {\n\t// gitql> [tab\n\t// expected: select\n\tpattern1 := [][]rune{\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern1, []string{\"select\"})\n\n\t// gitql> select [tab\n\t// expected: *, name, url,  push_url, owner, full_name, hash, date, author,\n\t// author_email, committer, committer_email, message, full_message, type\n\tpattern2 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern2, []string{\n\t\t\"distinct\",\n\t\t\"*\",\n\t\t\"name\",\n\t\t\"url\",\n\t\t\"push_url\",\n\t\t\"owner\",\n\t\t\"full_name\",\n\t\t\"hash\",\n\t\t\"date\",\n\t\t\"author\",\n\t\t\"author_email\",\n\t\t\"committer\",\n\t\t\"committer_email\",\n\t\t\"message\",\n\t\t\"full_message\",\n\t\t\"type\",\n\t})\n\n\t// gitql> select name [tab\n\t// expected: select, from, where, order, by, or, and, limit, in, asc, desc\n\tpattern3 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"name\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern3, []string{\n\t\t\"select\",\n\t\t\"from\",\n\t\t\"where\",\n\t\t\"order\",\n\t\t\"by\",\n\t\t\"or\",\n\t\t\"and\",\n\t\t\"limit\",\n\t\t\"in\",\n\t\t\"asc\",\n\t\t\"desc\",\n\t})\n\t// gitql> select name, [tab\n\t// expected: full_name, type, hash, url, push_url, owner\n\tpattern4 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"name,\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern4, []string{\n\t\t\"full_name\",\n\t\t\"type\",\n\t\t\"hash\",\n\t\t\"url\",\n\t\t\"push_url\",\n\t\t\"owner\",\n\t})\n\n\t// gitql> select * from [tab\n\t// expected: tags, branches, commits, refs\n\tpattern5 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"*\"),\n\t\t[]rune(\"from\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern5, []string{\n\t\t\"tags\",\n\t\t\"branches\",\n\t\t\"commits\",\n\t\t\"refs\",\n\t})\n\n\t// gitql> select name from refs where [tab\n\t// expected: name, url, push_url, owner\n\tpattern6 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"name\"),\n\t\t[]rune(\"from\"),\n\t\t[]rune(\"refs\"),\n\t\t[]rune(\"where\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern6, []string{\"name\", \"full_name\", \"type\", \"hash\"})\n\n\t// gitql> select committer from commits where committer = \"K\" and [tab\n\t// expected: hash, date, author, author_email, committer, committer_email, message, full_message\n\tpattern7 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"committer\"),\n\t\t[]rune(\"from\"),\n\t\t[]rune(\"commits\"),\n\t\t[]rune(\"where\"),\n\t\t[]rune(\"committer\"),\n\t\t[]rune(\"=\"),\n\t\t[]rune(`\"K\"`),\n\t\t[]rune(\"and\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern7, []string{\n\t\t\"hash\",\n\t\t\"date\",\n\t\t\"author\",\n\t\t\"author_email\",\n\t\t\"committer\",\n\t\t\"committer_email\",\n\t\t\"message\",\n\t\t\"full_message\",\n\t})\n\n\t// gitql> select committer from commits where committer = \"k\" order [tab\n\t// expected: by\n\tpattern8 := [][]rune{\n\t\t[]rune(\"select\"),\n\t\t[]rune(\"committer\"),\n\t\t[]rune(\"from\"),\n\t\t[]rune(\"commits\"),\n\t\t[]rune(\"where\"),\n\t\t[]rune(\"committer\"),\n\t\t[]rune(\"=\"),\n\t\t[]rune(`\"K\"`),\n\t\t[]rune(\"order\"),\n\t\t[]rune(\"\"),\n\t}\n\tassertSuggestsQuery(t, pattern8, []string{\"by\"})\n}\n\n// tiny tools\nfunc assertSuggestsQuery(t *testing.T, inputs [][]rune, expected []string) {\n\tresult := suggestQuery(inputs, len(inputs[len(inputs)-1]))\n\texpectedHash := createHashMap(expected)\n\n\tfor _, v := range result {\n\t\t_, ok := expectedHash[string(v)]\n\t\tif !ok {\n\t\t\tt.Errorf(\"expected: (%s), got: %s\", strings.Join(expected, \", \"), string(v))\n\t\t\tbreak\n\t\t}\n\t}\n}\nfunc createHashMap(s []string) map[string]bool {\n\th := make(map[string]bool, len(s))\n\tfor _, key := range s {\n\t\th[key] = true\n\t}\n\treturn h\n}\n\nfunc assertSuggests(t *testing.T, expected string, got string) {\n\tif expected != got {\n\t\tt.Errorf(\"expected %s, got %s\", expected, got)\n\t}\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 1.4404296875,
          "content": "module github.com/cloudson/gitql\n\ngo 1.20\n\nrequire (\n\tgithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e\n\tgithub.com/go-git/go-git/v5 v5.6.1\n\tgithub.com/olekukonko/tablewriter v0.0.5\n\tgithub.com/urfave/cli/v2 v2.25.7\n)\n\nrequire (\n\tgithub.com/Microsoft/go-winio v0.5.2 // indirect\n\tgithub.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8 // indirect\n\tgithub.com/acomagu/bufpipe v1.0.4 // indirect\n\tgithub.com/chzyer/logex v1.1.10 // indirect\n\tgithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1 // indirect\n\tgithub.com/cloudflare/circl v1.1.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.2 // indirect\n\tgithub.com/emirpasic/gods v1.18.1 // indirect\n\tgithub.com/go-git/gcfg v1.5.0 // indirect\n\tgithub.com/go-git/go-billy/v5 v5.4.1 // indirect\n\tgithub.com/imdario/mergo v0.3.13 // indirect\n\tgithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect\n\tgithub.com/kevinburke/ssh_config v1.2.0 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.9 // indirect\n\tgithub.com/pjbgf/sha1cd v0.3.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/sergi/go-diff v1.1.0 // indirect\n\tgithub.com/skeema/knownhosts v1.1.0 // indirect\n\tgithub.com/xanzy/ssh-agent v0.3.3 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 // indirect\n\tgolang.org/x/crypto v0.21.0 // indirect\n\tgolang.org/x/net v0.23.0 // indirect\n\tgolang.org/x/sys v0.18.0 // indirect\n\tgopkg.in/warnings.v0 v0.1.2 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 14.537109375,
          "content": "github.com/Microsoft/go-winio v0.5.2 h1:a9IhgEQBCUEk6QCdml9CiJGhAws+YwffDHEMp1VMrpA=\ngithub.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8 h1:wPbRQzjjwFc0ih8puEVAOFGELsn1zoIIYdxvML7mDxA=\ngithub.com/ProtonMail/go-crypto v0.0.0-20230217124315-7d5c6f04bbb8/go.mod h1:I0gYDMZ6Z5GRU7l58bNFSkPTFN6Yl12dsUlAZ8xy98g=\ngithub.com/acomagu/bufpipe v1.0.4 h1:e3H4WUzM3npvo5uv95QuJM3cQspFNtFBzvJ2oNjKIDQ=\ngithub.com/acomagu/bufpipe v1.0.4/go.mod h1:mxdxdup/WdsKVreO5GpW4+M/1CE2sMG4jeGJ2sYmHc4=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be h1:9AeTilPcZAjCFIImctFaOjnTIavg87rW78vTPkQqLI8=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be/go.mod h1:ySMOLuWl6zY27l47sB3qLNK6tF2fkHG55UZxx8oIVo4=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/bwesterb/go-ristretto v1.2.0/go.mod h1:fUIoIZaG73pV5biE2Blr2xEzDoMj7NFEuV9ekS419A0=\ngithub.com/chzyer/logex v1.1.10 h1:Swpa1K6QvQznwJRcfTfQJmTE72DqScAa40E+fbHEXEE=\ngithub.com/chzyer/logex v1.1.10/go.mod h1:+Ywpsq7O8HXn0nuIou7OrIPyXbp3wmkHB+jjWRnGsAI=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e h1:fY5BOSpyZCqRo5OhCuC+XN+r/bBCmeuuJtjz+bCNIf8=\ngithub.com/chzyer/readline v0.0.0-20180603132655-2972be24d48e/go.mod h1:nSuG5e5PlCu98SY8svDHJxuZscDgtXS6KTTbou5AhLI=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1 h1:q763qf9huN11kDQavWsoZXJNW3xEE4JJyHa5Q25/sd8=\ngithub.com/chzyer/test v0.0.0-20180213035817-a1ea475d72b1/go.mod h1:Q3SI9o4m/ZMnBNeIyt5eFwwo7qiLfzFZmjNmxjkiQlU=\ngithub.com/cloudflare/circl v1.1.0 h1:bZgT/A+cikZnKIwn7xL2OBj012Bmvho/o6RpRvv3GKY=\ngithub.com/cloudflare/circl v1.1.0/go.mod h1:prBCrKB9DV4poKZY1l9zBXg2QJY7mvgRvtMxxK7fi4I=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2 h1:p1EgwI/C7NhT0JmVkwCD2ZBK8j4aeHQX2pMHHBfMQ6w=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.2/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/emirpasic/gods v1.18.1 h1:FXtiHYKDGKCW2KzwZKx0iC0PQmdlorYgdFG9jPXJ1Bc=\ngithub.com/emirpasic/gods v1.18.1/go.mod h1:8tpGGwCnJ5H4r6BWwaV6OrWmMoPhUl5jm/FMNAnJvWQ=\ngithub.com/gliderlabs/ssh v0.3.5 h1:OcaySEmAQJgyYcArR+gGGTHCyE7nvhEMTlYY+Dp8CpY=\ngithub.com/gliderlabs/ssh v0.3.5/go.mod h1:8XB4KraRrX39qHhT6yxPsHedjA08I/uBVwj4xC+/+z4=\ngithub.com/go-git/gcfg v1.5.0 h1:Q5ViNfGF8zFgyJWPqYwA7qGFoMTEiBmdlkcfRmpIMa4=\ngithub.com/go-git/gcfg v1.5.0/go.mod h1:5m20vg6GwYabIxaOonVkTdrILxQMpEShl1xiMF4ua+E=\ngithub.com/go-git/go-billy/v5 v5.3.1/go.mod h1:pmpqyWchKfYfrkb/UVH4otLvyi/5gJlGI4Hb3ZqZ3W0=\ngithub.com/go-git/go-billy/v5 v5.4.1 h1:Uwp5tDRkPr+l/TnbHOQzp+tmJfLceOlbVucgpTz8ix4=\ngithub.com/go-git/go-billy/v5 v5.4.1/go.mod h1:vjbugF6Fz7JIflbVpl1hJsGjSHNltrSw45YK/ukIvQg=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.1 h1:y5z6dd3qi8Hl+stezc8p3JxDkoTRqMAlKnXHuzrfjTQ=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.1/go.mod h1:8LHG1a3SRW71ettAD/jW13h8c6AqjVSeL11RAdgaqpo=\ngithub.com/go-git/go-git/v5 v5.6.1 h1:q4ZRqQl4pR/ZJHc1L5CFjGA1a10u76aV1iC+nh+bHsk=\ngithub.com/go-git/go-git/v5 v5.6.1/go.mod h1:mvyoL6Unz0PiTQrGQfSfiLFhBH1c1e84ylC2MDs4ee8=\ngithub.com/google/go-cmp v0.5.9 h1:O2Tfq5qg4qc4AmwVlvv0oLiVAGB7enBSJ2x2DqQFi38=\ngithub.com/google/go-cmp v0.5.9/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/imdario/mergo v0.3.13 h1:lFzP57bqS/wsqKssCGmtLAb8A0wKjLGrve2q3PPVcBk=\ngithub.com/imdario/mergo v0.3.13/go.mod h1:4lJ1jqUDcsbIECGy0RUJAXNIhg+6ocWgb1ALK2O4oXg=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/jessevdk/go-flags v1.5.0/go.mod h1:Fw0T6WPc1dYxT4mKEZRfG5kJhaTDP9pj1c2EWnYs/m4=\ngithub.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=\ngithub.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.2.1 h1:Fmg33tUaq4/8ym9TJN1x7sLJnHVwhP33CNkpYV/7rwI=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/matryer/is v1.2.0 h1:92UTHpy8CDwaJ08GqLDzhhuixiBUUD1p3AU6PHddz4A=\ngithub.com/matryer/is v1.2.0/go.mod h1:2fLPjFQM9rhQ15aVEtbuwhJinnOqrmgXPNdZsdwlWXA=\ngithub.com/mattn/go-runewidth v0.0.9 h1:Lm995f3rfxdpd6TSmuVCHVb/QhupuXlYr8sCI/QdE+0=\ngithub.com/mattn/go-runewidth v0.0.9/go.mod h1:H031xJmbD/WCDINGzjvQ9THkh0rPKHF+m2gUSrubnMI=\ngithub.com/mmcloughlin/avo v0.5.0/go.mod h1:ChHFdoV7ql95Wi7vuq2YT1bwCJqiWdZrQ1im3VujLYM=\ngithub.com/niemeyer/pretty v0.0.0-20200227124842-a10e7caefd8e/go.mod h1:zD1mROLANZcx1PVRCS0qkT7pwLkGfwJo4zjcN/Tysno=\ngithub.com/olekukonko/tablewriter v0.0.5 h1:P2Ga83D34wi1o9J6Wh1mRuqd4mF/x/lgBS7N7AbDhec=\ngithub.com/olekukonko/tablewriter v0.0.5/go.mod h1:hPp6KlRPjbx+hW8ykQs1w3UBbZlj6HuIJcUGPhkA7kY=\ngithub.com/pjbgf/sha1cd v0.3.0 h1:4D5XXmUUBUl/xQ6IjCkEAbqXskkq/4O7LmGn0AqMDs4=\ngithub.com/pjbgf/sha1cd v0.3.0/go.mod h1:nZ1rrWOcGJ5uZgEEVL1VUM9iRQiZvWdbZjkKyFzPPsI=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sergi/go-diff v1.1.0 h1:we8PVUC3FE2uYfodKH/nBHMSetSfHDR6scGdBi+erh0=\ngithub.com/sergi/go-diff v1.1.0/go.mod h1:STckp+ISIX8hZLjrqAeVduY0gWCT9IjLuqbuNXdaHfM=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/skeema/knownhosts v1.1.0 h1:Wvr9V0MxhjRbl3f9nMnKnFfiWTJmtECJ9Njkea3ysW0=\ngithub.com/skeema/knownhosts v1.1.0/go.mod h1:sKFq3RD6/TKZkSWn8boUbDC7Qkgcv+8XXijpFO6roag=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.7.0 h1:nwc3DEeHmmLAfoZucVR881uASk0Mfjw8xYJ99tb5CcY=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/urfave/cli/v2 v2.25.7 h1:VAzn5oq403l5pHjc4OhD54+XGO9cdKVL/7lDjF+iKUs=\ngithub.com/urfave/cli/v2 v2.25.7/go.mod h1:8qnjx1vcq5s2/wpsqoZFndg2CE5tNFyrTvS6SinrnYQ=\ngithub.com/xanzy/ssh-agent v0.3.3 h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=\ngithub.com/xanzy/ssh-agent v0.3.3/go.mod h1:6dzNDKs0J9rVPHPhaGCukekBHKqfl+L3KghI1Bc68Uw=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673 h1:bAn7/zixMGCfxrRTfdpNzjtPYqr8smhKouy9mxVdGPU=\ngithub.com/xrash/smetrics v0.0.0-20201216005158-039620a65673/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/arch v0.1.0/go.mod h1:5om86z9Hs0C8fWVUuoMHwpExlXzs5Tkyp9hOrfG7pp8=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220525230936-793ad666bf5e/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.0.0-20220826181053-bd7e27e6170d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.1.0/go.mod h1:RecgLatLF4+eUMCP1PoPZQb+cVrJcOPbHkTkbkB9sbw=\ngolang.org/x/crypto v0.6.0/go.mod h1:OFC/31mSvZgRz0V1QTNCzfAI1aIRzbiufJtkMIlEp58=\ngolang.org/x/crypto v0.21.0 h1:X31++rzVUdKhX5sWmSOFZxx8UW/ldWx55cbf08iNAMA=\ngolang.org/x/crypto v0.21.0/go.mod h1:0BP7YvVV9gBbVKyeTG0Gyn+gZm94bibOW5BjDEYAOMs=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.6.0/go.mod h1:4mET923SAdbXp2ki8ey+zGs1SLqsuM2Y0uvdZR/fUNI=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.0.0-20220826154423-83b083e8dc8b/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/net v0.1.0/go.mod h1:Cx3nUiGt4eDBEyega/BKRp+/AlGL8hYe7U9odMt2Cco=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.7.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.23.0 h1:7EYJ93RZ9vYSZAIb2x3lnuvqO5zneoD6IvWjuhfxjTs=\ngolang.org/x/net v0.23.0/go.mod h1:JKghWKKOSdJwpW2GEx0Ja7fmaKnMsbu+MWVZTokSYmg=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200302150141-5c8b2ff67527/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210320140829-1e4c9ba3b0c4/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211007075335-d3039528d8ac/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220825204002-c680a09ffe64/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.18.0 h1:DBdB3niSjOA/O0blCZBqDefyWNYveAYMNF1Wum0DYQ4=\ngolang.org/x/sys v0.18.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.0.0-20220722155259-a9ba230a4035/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.1.0/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.18.0 h1:FcHjZXDMxI8mM3nwhX9HlKop4C0YQvCVCdwYl2wOtE8=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.4.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.2.0/go.mod h1:y4OqIKeOV/fWJetJ8bXPU1sEVniLMIyDAZWeHdV+NTA=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20200227125254-8fa46927fb4f/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.0/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\nrsc.io/pdf v0.1.1/go.mod h1:n8OzWcQ6Sp37PL01nO98y4iUCRdTGarVfzxY20ICaU4=\n"
        },
        {
          "name": "howtouse.gif",
          "type": "blob",
          "size": 2024.5126953125,
          "content": null
        },
        {
          "name": "lexical",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 3.3818359375,
          "content": "package main\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/chzyer/readline\"\n\t\"github.com/cloudson/gitql/lexical\"\n\t\"github.com/cloudson/gitql/parser\"\n\t\"github.com/cloudson/gitql/runtime\"\n\t\"github.com/cloudson/gitql/semantical\"\n\t\"github.com/urfave/cli/v2\"\n)\n\n//go:embed version.txt\nvar version string\n\nfunc main() {\n\tapp := &cli.App{\n\t\tName:        \"gitql\",\n\t\tUsage:       \"A git query language\",\n\t\tVersion:     version,\n\t\tHideVersion: true,\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"interactive\",\n\t\t\t\tAliases: []string{\"i\"},\n\t\t\t\tUsage:   \"Enter to interactive mode\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"path\",\n\t\t\t\tAliases: []string{\"p\"},\n\t\t\t\tValue:   \".\",\n\t\t\t\tUsage:   `The (optional) path to run gitql`,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:    \"format\",\n\t\t\t\tAliases: []string{\"f\"},\n\t\t\t\tValue:   \"table\",\n\t\t\t\tUsage:   \"The output type format {table|json}\",\n\t\t\t},\n\t\t\t// for backward compatibility\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"version\",\n\t\t\t\tAliases: []string{\"v\"},\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:   \"type\",\n\t\t\t\tHidden: true,\n\t\t\t},\n\t\t\t&cli.BoolFlag{\n\t\t\t\tName:    \"show-tables\",\n\t\t\t\tAliases: []string{\"s\"},\n\t\t\t\tHidden:  true,\n\t\t\t},\n\t\t},\n\t\tCommands: []*cli.Command{\n\t\t\t{\n\t\t\t\tName:    \"show-tables\",\n\t\t\t\tAliases: []string{\"s\"},\n\t\t\t\tUsage:   \"Show all tables\",\n\t\t\t\tAction:  showTablesCmd,\n\t\t\t},\n\t\t\t{\n\t\t\t\tName:    \"version\",\n\t\t\t\tAliases: []string{\"v\"},\n\t\t\t\tUsage:   \"The version of gitql\",\n\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\tfmt.Printf(\"Gitql %s\\n\", version)\n\t\t\t\t\treturn nil\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tAction: func(c *cli.Context) error {\n\t\t\tpath, format, interactive := c.String(\"path\"), c.String(\"format\"), c.Bool(\"interactive\")\n\n\t\t\t// for backward compatibility\n\t\t\tif c.Bool(\"version\") {\n\t\t\t\tfmt.Printf(\"Gitql %s\\n\", version)\n\t\t\t\treturn nil\n\t\t\t}\n\n\t\t\tif c.Bool(\"show-tables\") {\n\t\t\t\treturn showTablesCmd(c)\n\t\t\t}\n\n\t\t\tif typ := c.String(\"type\"); typ != \"\" {\n\t\t\t\tformat = typ\n\t\t\t}\n\t\t\t// ============================\n\n\t\t\tif c.NArg() == 0 && !interactive {\n\t\t\t\treturn cli.ShowAppHelp(c)\n\t\t\t}\n\n\t\t\tif interactive {\n\t\t\t\treturn runPrompt(path, format)\n\t\t\t}\n\n\t\t\treturn runQuery(c.Args().First(), path, format)\n\t\t},\n\t}\n\n\tif err := app.Run(os.Args); err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Error: %s\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc showTablesCmd(c *cli.Context) error {\n\tprog := &parser.NodeProgram{\n\t\tChild: &parser.NodeShow{\n\t\t\tTables: true,\n\t\t},\n\t}\n\treturn runtime.RunShow(prog)\n}\n\nfunc runPrompt(folder, typeFormat string) error {\n\tterm, err := readline.NewEx(&readline.Config{\n\t\tPrompt:       \"gitql> \",\n\t\tAutoComplete: readline.SegmentFunc(suggestQuery),\n\t})\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer term.Close()\n\n\tfor {\n\t\tquery, err := term.Readline()\n\t\tif err != nil {\n\t\t\tif err == io.EOF {\n\t\t\t\tbreak // Ctrl^D\n\t\t\t}\n\t\t\treturn err\n\t\t}\n\n\t\tif query == \"\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif query == \"exit\" || query == \"quit\" {\n\t\t\tbreak\n\t\t}\n\n\t\tif err := runQuery(query, folder, typeFormat); err != nil {\n\t\t\tfmt.Println(\"Error: \" + err.Error())\n\t\t\tcontinue\n\t\t}\n\t}\n\n\treturn nil\n}\n\nfunc runQuery(query, folder, typeFormat string) error {\n\tparser.New(query)\n\tast, err := parser.AST()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tast.Path = &folder\n\tswitch lexical.Command {\n\tcase lexical.T_SELECT:\n\t\tif err := semantical.Analysis(ast); err != nil {\n\t\t\treturn err\n\t\t}\n\t\terr = runtime.RunSelect(ast, &typeFormat)\n\t\tbreak\n\tcase lexical.T_SHOW:\n\t\terr = runtime.RunShow(ast)\n\t\tbreak\n\tcase lexical.T_USE:\n\t\terr = runtime.RunUse(ast)\n\t\tbreak\n\t}\n\n\treturn err\n}\n"
        },
        {
          "name": "parser",
          "type": "tree",
          "content": null
        },
        {
          "name": "runtime",
          "type": "tree",
          "content": null
        },
        {
          "name": "semantical",
          "type": "tree",
          "content": null
        },
        {
          "name": "tables.md",
          "type": "blob",
          "size": 0.4541015625,
          "content": "Gitql [![Build Status](https://travis-ci.org/cloudson/gitql.png)](https://travis-ci.org/cloudson/gitql)\n===============\n\n## Tables \n\n| commits | \n| ---------| \n| author |\n| author_email | \n| committer |\n| committer_email |\n| hash | \n| date |\n| message | \n| full_message | \n\n| tags | \n| ---------| \n| name |\n| full_name | \n| hash | \n\n| branches | \n| ---------| \n| name |\n| full_name | \n| hash | \n\n| Refs | \n| ---------| \n| name |\n| full_name | \n| type |  \n| hash | \n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "utilities",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.txt",
          "type": "blob",
          "size": 0.005859375,
          "content": "latest"
        }
      ]
    }
  ]
}