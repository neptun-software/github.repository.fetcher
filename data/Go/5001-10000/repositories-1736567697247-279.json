{
  "metadata": {
    "timestamp": 1736567697247,
    "page": 279,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gopasspw/gopass",
      "stars": 6002,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codeclimate.yml",
          "type": "blob",
          "size": 0.599609375,
          "content": "version: \"2\"\n\nchecks:\n  argument-count:\n    config:\n      threshold: 4\n  complex-logic:\n    config:\n      threshold: 4\n  file-lines:\n    config:\n      threshold: 250\n  method-complexity:\n    config:\n      threshold: 16\n  method-count:\n    config:\n      threshold: 20\n  method-lines:\n    config:\n      threshold: 100\n  nested-control-flow:\n    config:\n      threshold: 4\n  return-statements:\n    config:\n      threshold: 4\n\nplugins:\n gofmt:\n   enabled: true\n golint:\n   enabled: true\n govet:\n   enabled: true\n   \nratings:\n paths:\n - \"**.go\"\n \nexclude_patterns:\n- \"vendor/\"\n- \"utils/notify/icon.go\"\n- \"**/*_test.go\"\n"
        },
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.1787109375,
          "content": "coverage:\n  range: 40..90\n  round: nearest\n  precision: 2\n  status:\n    project:\n      default: on\n    patch:\n      default: off\n    changes:\n      default: off\nignore:\n  - \"vendor/\"\n"
        },
        {
          "name": ".errcheck.excl",
          "type": "blob",
          "size": 0.03515625,
          "content": "fmt.Fprintf\nfmt.Fprintln\nfmt.Fprint\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.025390625,
          "content": "CHANGELOG.md merge=union\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5615234375,
          "content": "gopass\ngopass-*-amd64\ngopass-full\ndev.sh\n!pkg/gopass/\ncoverage.out\ncoverage-all.*\n.vscode/\n\n# Profiling\n*.out\n\n# Compiled Object files, Static and Dynamic libs (Shared Objects)\n*.o\n*.a\n*.so\n\n# Folders\n_obj\n_test\n\n# Architecture specific extensions/prefixes\n*.[568vq]\n[568vq].out\n\n*.cgo1.go\n*.cgo2.c\n_cgo_defun.c\n_cgo_gotypes.go\n_cgo_export.*\n\n_testmain.go\n\n*.exe\n*.test\n*.prof\n\n# gopass specific ignores\n*.sublime-*\n*.swp\n/.env\n\n# package files\n*.deb\n*.pkg.tar.xz\n*.rpm\n*.tar.bz2\n\nreleases/\ndist/\n\nmanifest-*.json\n\n# go-fuzz\n*-fuzz.zip\nworkdir/\n\n.vscode/\nNOTICE.new\n\ndebian/\n"
        },
        {
          "name": ".golangci.yml",
          "type": "blob",
          "size": 1.6171875,
          "content": "run:\n  timeout: 5m\n  go: \"1.22\"\n\nlinters-settings:\n  errcheck:\n    exclude-functions:\n      - fmt.Fprint\n      - fmt.Fprintf\n      - fmt.Fprintln\n  gocyclo:\n    min-complexity: 22\n  cyclop:\n    max-complexity: 22\n    skip-tests: true\n  staticcheck:\n    # https://staticcheck.io/docs/options#checks\n    checks: [\"all\",\"-SA1019\"]\n  funlen:\n    lines: -1\n    statements: 100\n\nlinters:\n  enable:\n  - asasalint\n  - asciicheck\n  - bidichk\n  - bodyclose\n  - containedctx\n  - copyloopvar\n  - cyclop\n  - decorder\n  - dogsled\n  - errcheck\n  - errchkjson\n  - errname\n  - errorlint\n  - exhaustive\n  # - exportloopref # deprecated since Go 1.22\n  - forcetypeassert\n  - funlen\n  - ginkgolinter\n  - gocheckcompilerdirectives\n  - gochecksumtype\n  - godot\n  - gofmt\n  - gofumpt\n  - goheader\n  - goimports\n  - gomoddirectives\n  - gomodguard\n  - goprintffuncname\n  - gosmopolitan\n  - grouper\n  - importas\n  - ineffassign\n  - intrange\n  - loggercheck\n  - makezero\n  - mirror\n  - misspell\n  - nakedret\n  - nestif\n  - nilnil\n  - nlreturn\n  - nonamedreturns\n  - nosprintfhostport\n  - prealloc\n  - predeclared\n  - promlinter\n  - protogetter\n  - reassign\n  - sloglint\n  - spancheck\n  - tagalign\n  - tenv\n  - testableexamples\n  - testifylint\n  - thelper\n  - unconvert\n  - usestdlibvars\n  - whitespace\n  - zerologlint\n\nissues:\n  max-issues-per-linter: 0 # disable limit; report all issues of a linter\n  max-same-issues: 0 # disable limit; report all issues of the same issue\n  exclude-use-default: false # disable filtering of defaults for better zero-issue policy\n  exclude-dirs:\n    - helpers/\n\noutput:\n  show-stats: true\n  sort-results: true\n  sort-order:\n    - linter\n    - file\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 3.5341796875,
          "content": "# goreleaser.yml\n# Release automation\n#\n# Build customization\nproject_name: gopass\n\nbefore:\n  hooks:\n    - make clean\n    - make completion\n    - go mod download\n\nbuilds:\n  - id: gopass\n    binary: gopass\n    flags:\n      - -trimpath\n      - -tags=netgo\n    env:\n      - CGO_ENABLED=0\n    asmflags:\n      - all=-trimpath={{.Env.HOME}}\n    gcflags:\n      - all=-trimpath={{.Env.HOME}}\n    ldflags: |\n      -s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.CommitDate}} -extldflags '-static'\n    goos:\n      - darwin\n      - freebsd\n      - linux\n      - openbsd\n      - windows\n    goarch:\n      - amd64\n      - arm\n      - arm64\n    goarm:\n      - 6\n      - 7\n    mod_timestamp: '{{ .CommitTimestamp }}'\narchives:\n  - id: gopass\n    name_template: \"{{.Binary}}-{{.Version}}-{{.Os}}-{{.Arch}}{{ if .Arm }}v{{.Arm }}{{ end }}\"\n    format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - CHANGELOG.md\n      - LICENSE\n      - README.md\n      - bash.completion\n      - fish.completion\n      - zsh.completion\n\nrelease:\n  github:\n    owner: gopasspw\n    name: gopass\n  draft: false\n  prerelease: auto\n\nnfpms:\n  - id: gopass_deb\n    vendor: Gopass Authors\n    homepage: \"https://www.gopass.pw\"\n    maintainer: \"Gopass Authors <gopass@gopass.pw>\"\n    description: |-\n      gopass password manager - full featured CLI replacement for pass, designed for teams.\n       .\n      gopass is a simple but powerful password manager for your terminal. It is a\n      Pass implementation in Go that can be used as a drop in replacement.\n       .\n      Every secret lives inside of a gpg (or: age) encrypted textfile. These secrets\n      can be organized into meaninful hierachies and are by default versioned using\n      git.\n       .\n      This package contains the main gopass binary from gopass.pw. In Debian and\n      Ubuntu there is an unfortunate name clash with another gopass package. That is\n      completely different and not related to this package.\n    license: MIT\n    formats:\n      - deb\n    dependencies:\n      - git\n      - gnupg\n    recommends:\n      - rng-tools\n      - bash-completion\n  - id: gopass_rpm\n    vendor: Gopass Authors\n    homepage: \"https://www.gopass.pw\"\n    maintainer: \"Gopass Authors <gopass@gopass.pw>\"\n    description: |-\n      gopass password manager - full featured CLI replacement for pass, designed for teams.\n\n      gopass is a simple but powerful password manager for your terminal. It is a\n      Pass implementation in Go that can be used as a drop in replacement.\n\n      Every secret lives inside of a gpg (or: age) encrypted textfile. These secrets\n      can be organized into meaninful hierachies and are by default versioned using\n      git.\n    license: MIT\n    formats:\n      - rpm\n    dependencies:\n      - git\n      - gnupg2\n    recommends:\n      - rng-tools\n      - bash-completion\n\nsource:\n  enabled: true\n  name_template: \"{{.ProjectName}}-{{.Version}}\"\n  \nchecksum:\n  name_template: \"{{.ProjectName}}_{{.Version}}_SHA256SUMS\"\n\nmilestones:\n  -\n    repo:\n      owner: gopasspw\n      name: gopass\n    close: true\n    fail_on_error: false\n    name_template: \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\"\n\nsigns:\n  -\n    id: gopass\n    artifacts: checksum\n    args: [\"--batch\", \"-u\", \"{{ .Env.GPG_FINGERPRINT }}\", \"--armor\", \"--output\", \"${signature}\", \"--detach-sign\", \"${artifact}\"]\n\n# creates SBOMs of all archives and the source tarball using syft\n# https://goreleaser.com/customization/sbom\nsboms:\n  - artifacts: archive\n  - id: source # Two different sbom configurations need two different IDs\n    artifacts: source\n"
        },
        {
          "name": ".license-lint.yml",
          "type": "blob",
          "size": 0.5712890625,
          "content": "unrestricted_licenses:\n  - Apache-2.0\n  - MIT\n  - BSD-3-Clause\n  - BSD-2-Clause\n  - 0BSD\n  - WTFPL\n  - CC0-1.0\nreciprocal_licenses:\n  - MPL-2.0\n  - MPL-2.0-no-copyleft-exception\nallowlisted_modules:\n# Simplified BSD (BSD-2-Clause): https://github.com/russross/blackfriday/blob/master/LICENSE.txt\n- github.com/russross/blackfriday\n- github.com/russross/blackfriday/v2\n# Apache license\n- github.com/dgraph-io/ristretto\n# Modified BSD-2-Clause with extra no-Google clause: https://github.com/jezek/xgb/blob/master/LICENSE\n- github.com/jezek/xgb\n# MIT\n- github.com/jwalton/go-supportscolor"
        },
        {
          "name": ".revive.toml",
          "type": "blob",
          "size": 0.8896484375,
          "content": "# Ignores files with \"GENERATED\" header, similar to golint\nignoreGeneratedHeader = false\n\n# Sets the default severity to \"warning\"\nseverity = \"error\"\n\n# Sets the default failure confidence. This means that linting errors\n# with less than 0.8 confidence will be ignored.\nconfidence = 0.6\n\n# Sets the error code for failures with severity \"error\"\nerrorCode = 1\n\n# Sets the error code for failures with severity \"warning\"\nwarningCode = 1\n\n[rule.argument-limit]\n  arguments = [10]\n[rule.blank-imports]\n[rule.context-as-argument]\n[rule.context-keys-type]\n[rule.cyclomatic]\n  arguments = [21]\n[rule.dot-imports]\n[rule.error-naming]\n[rule.error-return]\n[rule.error-strings]\n[rule.errorf]\n[rule.exported]\n[rule.if-return]\n[rule.increment-decrement]\n[rule.indent-error-flow]\n[rule.package-comments]\n[rule.range]\n[rule.receiver-naming]\n[rule.time-naming]\n[rule.unexported-return]\n[rule.var-declaration]\n[rule.var-naming]\n"
        },
        {
          "name": "ARCHITECTURE.md",
          "type": "blob",
          "size": 10.21484375,
          "content": "# Architecture\n\nThis document describes the high-level architecture of gopass. If you want to\nget familiar with the code base you are in the right place.\n\n## Overview\n\nOn the highest level gopass manages directories (called `stores` or `mounts`)\nthat contain (mostly) GPG encrypted text files. gopass transparently handles\nencryption and decryption when accessing these files. It applies some heuristics\nto parse the file content and support certain operations on that content.\n\n`gopass` is licensed under the terms of the MIT license and we require\ncompatible licenses from our dependencies as well (when we link against them).\n\nFor licensing reasons and security considerations we try to keep the number of\nexternal dependencies (libraries) well-arranged. Try to avoid adding new\ndependencies unless absolutely necessary.\n\n## Generalized control flow\n\n![](docs/components.png)\n\nThis flow chart shows a high level control flow common to most operations.\nIt leaves out a lot of details but should give a better understanding how\ninformation flows within the program and where changes might be necessary.\n\n## Code Map\n\nThis section talks briefly about the various directories and some data\nstructures.\n\nWe're trying to clearly separate between our public API and implementation\ndetails. To that extent we're in the process of moving packages to `internal/`\n(and sometimes back to `pkg/`, if necessary).\n\nA note on semantic versioning: `gopass` is both an CLI and an API (Go module).\nThe expectations around semantic versioning and Go modules make it difficult\nto express both concerns in the same versioning scheme, e.g. does a breaking\nchange in the API require a major version bump even if nothing about the tool\n(CLI) has changed? What about the other way round? Thus we have decided to\napply semantic versioning only to the CLI tool, not the Go module. This is not\nideal and might change with sufficient active contributors.\n\n### `docs/backends`\n\nThis folder contains documentation about each of our supported backends. See\n`internal/backend` below for more information about our backend design.\n\n### `docs/commands`\n\nThis folder contains the specification of each sub command the tool offers.\nWe have many sub commands with sometimes dozens of flags each. In the past we\ndid encounter some inconsistencies and decided to introduce specifications for\neach command. If the specification and the implementation disagree this should\nbe reported as a bug and fixed or the specification needs to be changed (but the\ngeneral assumptions should be that the specification is correct, not the code).\n\n### `docs/usecases`\n\nThis directory contains an (incomplete) list of our core use cases, i.e. the\ncritical user journeys we aim to support. `gopass` can be used in various ways\nand try to remain flexible and extensible, but if we encounter a conflict\nbetween a blessed use case and a corner case we prefer the former.\n\n### `helpers/`\n\nThis directory contains some release automation tooling that is supposed to be\ninvoked with `go run`. The changelog generator in `helpers/changelog` is used\nby our GitHub Action based release automation and shouldn't be invoked manually.\n\nThe tooling in `helpers/release` will prepare a new release and helps to file a\nrelease pull request will all the required updates in place.\n\n### `internal/` and `pkg/`\n\n`gopass` used to not have either of these and all our packages were rooted\ndirectly in the repository. However we began to notice that other projects\nwere starting to depend directly on our internal packages and we sometimes\nbroke them. This put us and the other project into an unpleasant\nsituation so we tried to clarify the expectations by using Go's `internal/`\nvisibility rule to keep other projects from depending on our implementation\ndetails.\n\nNote: If we have a good reasons to use one of our `internal/` packages either\ncopy it (our license should rarely be an issue) or nicely ask us and explain\nwhy something should move to `pkg/`.\n\nAs we are in the process of formalizing a proper API surface we sometimes need\nto move packages from `internal/` to `pkg/`. The other direction might also\noccur, but much less often.\n\n### `internal/action`\n\nThis directory contains one file, and sometimes sub folders, for each command\n`gopass` supports. These are mostly self-contained, but some (e.g. show / edit\n/ find) need to depend on each other.\n\nTODO: There is a lot to be said about this package, e.g. custom errors.\n\n### `internal/backend`\n\n`gopass` is built around the concept of multiple independent password stores\nthat can be mounted into one namespace, much like regular file systems. Each\nof these stores can have a different storage and crypto backend. We used to\nhave independent revision control backends as well, but since the RCS (e.g.\ngit) interacts so closely with the storage (you can't use regular git w/o a\nfilesystem-based storage) we have merged storage and RCS backends.\n\nThe backend package defines the interfaces for the backend implementation\nand provides a registry that returns the concrete backend from the list of\nregistered ones. Registration happens through blank imports of either the\n`internal/backend/crypto` and `internal/backend/storage` packages.\n\nEach backend needs to have a loader implementation in its `loader.go` (please\nstick to this name). We try to auto-detect the most applicable backend when\ninitializing the process, but some backends look alike (e.g. a `fs` and an \nuninitialized `gitfs`). So the loader comes with a priority which is respected\nduring lookup.\n\n### `internal/config`\n\nThe `config` package implements support for a simple YAML-based configuration\nformat for `gopass`. Most of the code in this package is for backwards\ncompatibility. Whenever we introduce or remove a config option we need to\nintroduce a new fallback version that is automatically attempted when loading\na config file. To resolve ambiguities when parsing different config versions\nwe use a \"catch-all\" field to catch any unused keys and check that this is\nempty after parsing - otherwise we need to try a different config version.\n\nNOTE: We did support nested configurations for sub-stores but removed this\nbecause the maintenance cost did not justify the benefits of this feature.\n\n### `internal/cui`\n\nThe name `cui` is an abbreviation for `console-user-interface` and contains\nseveral helper functions to interact with humans over a text based interface.\n\nMost of these ask the user to select some item from a selection or provide\nsome input.\n\nNOTE: We used to support rich terminal UIs with arrow navigation and such.\nHowever all existing libraries that were available without CGO were either\nabandoned or buggy on some platforms and we didn't have any capacity to fix\nthem. So we had to remove support for this feature.\n\n### `internal/queue`\n\nThe `queue` package implements a FIFO queue that executes\nin the background. This allows for certain operations, like a git push, to be\ntaken out of the critical path wrt. user interactions. The queue will be fully\nprocessed before the process exits.\n\n### `internal/store/root`\n\nThe `root store` package implements an internal password store API that (only)\nsupports mounting `leaf` stores. It will forward (almost) all operations to\nits `leaf` stores (moves across stores being a notable exception) and do the\nnecessary manipulations of the affected path components (e.g. removing/adding\nthe mount prefix from the secret name as needed).\n\nThis package makes `gopass` multi-store capable.\n\n### `internal/store/leaf`\n\nThe `leaf store` package implements a password store that is mostly compatible\nwith any other password store implementation (while aiming for interoperability,\nnot at 100% feature parity). The low-level operations like filesystem and / or\nversion control and crypto operations are passed to the configured `storage`\nor `crypto` backend.\n\n### `internal/tree`\n\nThe `tree` package implements a simple tree structure that prints an output\nsimilar to the output of the Unix tool `tree`. It does support different\n`gopass` specific properties (like mounts or templates) not easily implemented\nwith other tree packages.\n\n### `internal/updater`\n\nThe `updater` package implements a secure and anonymous self updater.\n\nNote: The self updater contacts GitHub. If this is a concern one should use\nother sources, e.g. distro packages.\n\nIt retrieves the latest stable release from GitHub, fetches its metadata\nand verifies the signature against the built-in release signing keyring.\n\nIt tries to avoid conflicting with any `gopass` binary managed by the OS\nand refuse to update these.\n\n### `pkg/`\n\nThe package `pkg/` contains our public API surface, i.e. packages we want or\nhave to expose externally. Some packages (e.g. `otp`) are only exposed because\nthey are being used by some of our integrations. Others (e.g. `pinentry` or\n`pwgen`) are designed for wider use. We are considering to split some of the\nmore widely used packages into their own repositories to work better with\nGo module and semantic versioning expectations.\n\n#### `pkg/appdir`\n\nThe `appdir` package contains a set of [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)\ncompatible implementations with some `gopass` specifics. For testing purposes\nwe want to honor the setting of `GOPASS_HOMEDIR` before everything else, so our\nimplementation has to take this into account before following the XDG spec.\n\n#### `pkg/clipboard`\n\nThe `clipboard` package is a wrapper around a clipboard package that adds\nsupport for clearing the clipboard.\n\n#### `pkg/ctxutil`\n\nThe `ctxutil` is the pragmatic (read: non-idiomatic) approach to pass very\nspecific configuration options through multiple layers of abstraction. This is\narguably not the best design, but it works well and avoids bloated interfaces.\n\n#### `pkg/gopass`\n\nThis package contains **the** gopass API interface. We provide a concrete\nimplementation that should work with any properly initialized gopass setup\nand a mock for tests.\n\nThis package is designed as the main entry point for any integration that wants\nto integrate with gopass.\n\n### `tests`\n\n`gopass` comes with a comprehensive set of integration tests, i.e. tests that\nare executed by running a newly compiled gopass binary without access to any\nkind of internal state. These tests can't be as exhaustive as the unit tests\nbut they exist to ensure basic functionality aren't broken by a change.\n\n\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 44.0859375,
          "content": "# Changelog\n\n## 1.15.15 / 2024-11-24\n\n* [BUGFIX] Replace ~ with user homedir if `$GOPASS_HOMEDIR` is not set (#2961)\n* [CLEANUP] Replace experimental `maps` and `slices` with stdlib (#2993)\n* [CLEANUP] remove unreachable code (#2977)\n* [DEPRECATION] Remove references to deprecated rand.Seed (#2953)\n* [ENHANCEMENT] Allow for whitespace-trailing passwords (#2873) (#2954)\n* [FEATURE] Adding support for `age.Plugin` identities (#2960)\n* [FEATURE] Allow for non-interactive age setup (#2970)\n* [FEATURE] Ask for setup if not initialized (#2975)\n* [bugfix] Copy with trailing slash at destination. (#2966)\n* [chore] use the same version of golangci-lint (#2948)\n\n## 1.15.14 / 2024-08-03\n\n* [bugfix] Fix parsing of key-value pairs according to the gitconfig (#2911)\n* [chore] Update dependency to github.com/cenkalti/backoff/v4 (#2864)\n* [chore] Update dependency to github.com/godbus/dbus/v5 (#2860)\n* [chore] Update dependency to github.com/google/go-github/v61 (#2863)\n* [chore] Update dependency to github.com/xhit/go-str2duration/v2 (#2865)\n* [chore] Update hashicorp/golang-lru to v2 (#2859)\n\n## 1.15.13 / 2024-04-06\n\n* [bugfix] Default to true for core.exportkeys even in substores (#2848)\n* [bugfix] Do not report findings with severity none in audit summary (#2843)\n* [bugfix] Fix loading of git configs (#2849)\n* [chore] Update dependencies (#2850)\n* [chore] Use clean filepath in all of the fs.Set operation (#2846)\n* [chore] use the same version of golangci-lint (#2841)\n* [feat] Add an multi-line input type to the create wizard (#2847)\n* [feat] Add option to disable notification icon (#2845)\n* [feat] Add verbosity levels to the debug package (#2851)\n* [fix] Disble safecontent parsing if noparsing is requested (#2855)\n* [fix] Pass remote, if given, to local init as well (#2852)\n\n## 1.15.12 / 2024-03-17\n\n* [BUGFIX] Use 'en' as default language for the xkcd generator (#2793)\n* [DOCUMENTATION] Fix typo: initilize -> initialize (#2796)\n* [bugfix] Bring back audit summary (#2820)\n* [bugfix] Do not abort saving if the OTP counter is aborted (#2775)\n* [bugfix] Fix NPE when using recipients completion (#2823)\n* [bugfix] Warn if trying to use fscopy inside the store (#2832)\n* [chore] Upgrade to Go 1.22 (#2805)\n* [cleanup] Add better logging in case no owner key is found (#2748)\n* [feat] Add .gopass-audit-ignore support to ignore secrets from audits (#2822)\n* [feat] Allow supression of password generation in create templates (#2821)\n* [ux] Add hint that computing recipients takes some time (#2833)\n* [ux] Do not show create type chooser if only one exists (#2752)\n\n## 1.15.11 / 2023-12-01\n\n* [bugfix] Disable multi-line description for deb packages (#2729)\n* [bugfix] Fix writes to global config from tests (#2727)\n* [bugfix] Workaround for goreleaser/nfpm#742 (#2732)\n* [feature] Allow setting autosync.interval in different time units (#2731)\n\n## 1.15.10 / 2023-11-25\n\n* [BUGFIX] Allow to move shadowed entries into their own folder (#2718)\n* [BUGFIX] Try to always honor local config for mounts (#2724)\n* [chore] Add OSSF scorecard link and improve security posture (#2704)\n* [chore] Update goxkcdpwgen dependency to include my PR (#2722)\n* [chore] Update grype workflow and pin Docker base images (#2706)\n* [cleanup] Add package description (#2702)\n* [feature] Add new pwgen options to capitalize and include numbers in (#2703)\n\n## 1.15.9 / 2023-11-18\n\n* [BUGFIX] Disabling the OTP snip screenshot feature on OpenBSD (#2685)\n* [CLEANUP] Migration of options to more appropriate sections (#2681)\n* [bugfix] Improve git version parsing (#2690)\n* [bugfix] Remove leading and trailing slashes from mounts (#2698)\n* [enhancement] Add blake3 to the template functions (#2693)\n* [enhancement] Add input validation to block illegal mount points (#2672)\n\n## 1.15.8 / 2023-09-11\n\n* [BUGFIX] Use goreleaser build for crosscompile (#2635)\n* [bugfix] Allow fsck to check a single secret (#2659)\n* [bugfix] Do not remove unused keys on import by default (#2657)\n* [bugfix] Fix parsing of large secrets (#2654)\n* [chore] Update dependencies (#2660)\n* [docs] add/update choco, scoop, winget instructions (#2647)\n* [feat] Add --store option to gopass fsck (#2658)\n* [feat] Add XCKD pwgen config options (#2651)\n\n## 1.15.7 / 2023-08-04\n\n* [BUGFIX] Fix build issues on various non-Linux platforms (#2630, #2633)\n\n## 1.15.6 / 2023-07-30\n\n* [DOCUMENTATION] fix Arch Linux package url (#2598)\n* [BUGFIX] Only show desktop notifications if there are changes (#2627)\n* [ENHANCEMENT] Add a global nosync flag (#2626)\n* [BUGFIX] Correctly handle multiline secrets (#2625)\n* [ENHANCEMENT] Add screen parsing for OTP QR codes (#2597)\n\n## 1.15.5 / 2023-04-07\n\n* [CLEANUP] Use Go1.20 (#2567)\n* [ENHANCEMENT] Add internal pager (ov). (#2510)\n\n## 1.15.4 / 2023-02-12\n\n* [BUGFIX] Also accept lower case CTE headers. (#2539, #2518)\n* [BUGFIX] Commit changes to mount config changes. (#2542, #2530)\n* [BUGFIX] Do not restrict pwlen when maxlen is zero. (#2537, #2536)\n* [BUGFIX] Fix fossilfs sync (#2549, #2516)\n* [BUGFIX] Fix recipients check for age. (#2545, #2544)\n* [BUGFIX] Hide harmless git error messages. (#2547, #2543)\n* [BUGFIX] Improve error handling for gopass convert (#2548, #2520)\n* [ENHANCEMENT] Add edit.auto-create (#2538)\n\n## 1.15.3 / 2023-01-07\n\n* [BUGFIX] Check recipients before launching editor. (#2488, #1565)\n* [BUGFIX] Fix possible concurrency issues in fsck. (#2486, #2459)\n* [BUGFIX] Honor core.autosync (#2497, #2495)\n* [BUGFIX] Honor fuzzy search abort (#2491, #2490)\n* [ENHANCEMENT] Add nicer gopass audit HTML output (#2508)\n* [ENHANCEMENT] Check recipients before adding a new one. (#2487, #1918)\n* [ENHANCEMENT] Do not enforce lower case keys (#2489, #1777)\n* [ENHANCEMENT] Do not rewrite ~. (#2496, #2083)\n* [ENHANCEMENT] Rewrite gopass audit. Add HTML and CSV (#2506, #2504)\n* [ENHANCEMENT] gitconfig: Support MultiVars (#2476, #2457)\n\n## 1.15.2 / 2022-12-18\n\n* [BUGFIX] [gitconfig] Properly parse Key-Value pairs with (#2482, #2479)\n* [ENHANCEMENT] Add --force-regen flag to generate (#2475, #2474)\n* [ENHANCEMENT] Add recipients hash checking. (#2481, #2478)\n\n## 1.15.1 / 2022-12-11\n\n* [BUGFIX] Fix domain alias lookup (#2455, #2453)\n* [BUGFIX] Fix vim invocation. (#2456, #2424)\n* [CLEANUP] Unhide fscopy and fsmove (#2444, #1831)\n* [ENHANCEMENT] Add DirName template (#2452)\n* [ENHANCEMENT] Add generate.symbols and generate.length (#2443, #2151)\n* [ENHANCEMENT] Add template docs (#2445, #1562)\n* [ENHANCEMENT] Document supported secret formats. (#2439, #1585)\n* [ENHANCEMENT] Pre-populate ID with git values (#2442, #968)\n* [ENHANCEMENT] Support german language in the password (#2454, #2451)\n\n## 1.15.0 / 2022-12-03\n\n* [BREAKING] New config format based on git config. (#2395, #1567, #1764, #1819, #1878, #2387, #2418)\n* [BUGFIX] Fix symlink deduplication. (#2437, #2402)\n* [ENHANCEMENT] Maintain secret structure when parsing (#2433, #2431)\n* [ENHANCEMENT] Retain recipients file format (#2432, #2430)\n\n### New config format: gitconfg\n\nGopass is getting a new config format based on the one use by git itself.\nThe new implementation is much more flexible and extensible and will allow us\nto more easily support new config options going forward. It does also support\na hierachy of configs. That means we can now support system wide defaults\nas well as per mount config options.\n\nThe system wide configuration gives package maintainers and admins of multi\nuser deployments the option to pre-set certain options to their liking.\n\n### New default secret format\n\nThe default secret format has been rewritten to replace two of the existing\nones (KV and Plain). The new format puts a strong emphasis on retaining the\ninput as close as possible. And small change that might be visible in some\ncorner cases is that every secret now contains a terminating new line.\n\n### Recipient files can now contain comments\n\nThe parsing of the recipients files (`.gpg-id`) has become more flexible and\ncan now contain comments. These will be retained when updating these files\nthrough gopass as well.\n\n## 1.14.11 / 2022-11-25\n\n* [BUGFIX] Fix edit on MacOS Ventura (#2426, #2400)\n* [BUGFIX] Handle nvi (#2414)\n* [BUGFIX] Improve support for non-vim editors (#2427, #2424)\n* [BUGFIX] Only pass vim options to vim (#2421, #2412)\n* [ENHANCEMENT] Support combined short flags (#2420, #2419)\n\n## 1.14.10 / 2022-11-09\n\n* [BUGFIX] Correctly handle key removal on Windows (#2372, #2371)\n* [DOCUMENTATION] (#1878)\n* [ENHANCEMENT] Ignore comments in recipient files. (#2394, #2393)\n* [ENHANCEMENT] Improve key expiration handling (#2383, #2369)\n* [ENHANCEMENT] allow re-encrypting entire directory when (#2373)\n\n## 1.14.9 / 2022-09-28\n\n* [ENHANCEMENT] Make DBus notifications transient (#2364, #2358)\n\n## 1.14.8 / 2022-09-27\n\n* [BUGFIX] Ignore not-existing .ssh dir (#2347, #2333)\n* [BUGFIX] Use Wait() to avoid Zombies (#2354, #1666)\n* [ENHANCEMENT] Allow modifying default create templates (#2349, #2291)\n* [ENHANCEMENT] Improve passage support (#2352, #2059)\n* [ENHANCEMENT] Use OS keychain for age passphrase caching (new config option, off by default). (#2351, #2350)\n\n## 1.14.7 / 2022-09-20\n\n* [BUGFIX] Do not ignore symlinks when listing (#2344, #2173)\n* [BUGFIX] Do not shadow entries behind folders. (#2341, #2338)\n* [BUGFIX] Fix updater on Windows. (#2345, #2011)\n* [BUGFIX] Handle Ctrl+C in TOTP (#2342, #2320)\n* [ENHANCEMENT] Set vim options instead of sniffing (#2343, #2317)\n\n## 1.14.6 / 2022-09-10\n\n* [BUGFIX] Do not show setup message on version (#2327)\n* [BUGFIX] Remove exported public keys of removed (#2328, #2315)\n* [ENHANCEMENT] Document extension model. (#2329, #2290)\n\n## 1.14.5 / 2022-09-03\n\n* [BUGFIX] Fix fsck progress bar. Mostly. (#2303)\n* [DOCUMENTATION] fix in recommended vim setting (#2318)\n\n## 1.14.4 / 2022-08-02\n\n* [BREAKING] gopass otp will automatically update the counter key in HTOP secrets! (#2278)\n* [BUGFIX] Allow removing unknown recipients with --force (#2253)\n* [BUGFIX] Honor PASSWORD_STORE_DIR (#2272)\n* [BUGFIX] Honor OTP key period from URL (#2278)\n* [BUGFIX] Wizard: Enforce min and max length. (#2293)\n* [CLEANUP] Use Go 1.19 (#2296)\n* [ENHANCEMENT] Automatically sync once a week (#2191)\n* [ENHANCEMENT] Scan for vulnerabilities and add SBOM on (#2268)\n* [ENHANCEMENT] Use packages.gopass.pw for APT packages (#2261)\n\n## 1.14.3 / 2022-05-31\n\n* [BUGFIX] Do not print progress bar on otp --clip (#2243)\n* [BUGFIX] Removing shadowing warning when using -o/--password (#2245)\n* [CLEANUP] Deprecate OutputIsRedirected in favour of IsTerminal (#2248)\n* [DOCUMENTATION] Adding doc about YAML entries and unsafe-keys (#2244)\n* [ENHANCEMENT] Allow deleting multiple secrets (#2239)\n\n## 1.14.2 / 2022-05-22\n\n* [BUGFIX] Fix gpg identity detection (#2218, #2179)\n* [BUGFIX] Handle different line breaks in recipient (#2221, #2220)\n* [BUGFIX] Stop eating secrets on move (#2211, #2210)\n* [ENHANCEMENT] Add flag to keep env variable capitalization (#2226, #2225)\n* [ENHANCEMENT] Environment variable GOPASS_PW_DEFAULT_LENGTH can be used to overwrite default password length of 24 characters. (#2219)\n\n## 1.14.1 / 2022-05-02\n\n* [BUGFIX] Do not print missing public key for age. (#2166)\n* [BUGFIX] Improve convert output (#2171)\n* [BUGFIX] fix errors in zsh completions (#2005)\n* [CLEANUP] Migrating to a maintained version of openpgp (#2193)\n* [ENHANCEMENT] Avoid decryption on move or copy (#2183, #2181)\n* [UX] Upgrade xkcdpwgen to a new version that removes German (#2187)\n\n## 1.14.0 / 2022-03-16\n\n* Add --chars option to print subset of secrets (#2155, #2068)\n* [BUGFIX] Always re-encrypt when fsck is invoked with --decrypt. (#2119, #2015)\n* [BUGFIX] Body only entries are detected now by show -o (#2109)\n* [BUGFIX] Do not hide git error messages (#2118, #1959)\n* [BUGFIX] Fix completion when password name contains (#2150)\n* [BUGFIX] Fix template func arg order (#2117, #2116)\n* [BUGFIX] Fixes an issue where recipients remove may fail (#2147, #1964)\n* [BUGFIX] Fixes an issue where recipients remove may fail (#2147, #1964)\n* [BUGFIX] Handle from prefix correctly on mv (#2110, #2079)\n* [BUGFIX] Handle unencoded secret on cat (#2105)\n* [BUGFIX] Make man page consistent with other docs (#2133)\n* [BUGFIX] Reject invalid salt with MD5Crypt templates (#2128)\n* [BUGFIX] depend *.deb on gnupg instead of dummy (#2050)\n* [CLEANUP] Deprecate gopasspw/pinentry (#2095)\n* [CLEANUP] Use Go 1.18 (#2156)\n* [CLEANUP] Use debug.ReadBuildInfo (#2032)\n* [DOCUMENTATION] Fixed link to passwordstore.org (#2129)\n* [DOCUMENTATION] document 'gopass cat' (#2051)\n* [DOCUMENTATION] improve 'gopass cat' (#2070)\n* [DOCUMENTATION] improve 'gopass show -revision -<N>' (#2070)\n* [ENHANCEMENT] Add age subcommand (#2103, #2098)\n* [ENHANCEMENT] Add gopass audit --expiry (#2067)\n* [ENHANCEMENT] Add gopass process (#2066, #1913)\n* [ENHANCEMENT] Allow overriding GPG path (#2153)\n* [ENHANCEMENT] Automatically export creators key to the (#2159, #1919)\n* [ENHANCEMENT] Bump to Go 1.18 (#2058)\n* [ENHANCEMENT] Enforce TLSv1.3 (#2085)\n* [ENHANCEMENT] Generics (#2034, #2030)\n* [ENHANCEMENT] Hide password on MacOS clipboards (#2065)\n* [ENHANCEMENT] Passage compat improvements (#2060, #2060)\n* [ENHANCEMENT] gopass git invokes git directly (#2102)\n* [ENHANCEMENT] Template support for the create wizard (#2064)\n* [ENHANCENMENT] Check for MacOS Keychain storing the GPG (#2144)\n* [EXPERIMENTAL] Support the Fossil SCM (#2092, #2022)\n* [FEATURE] Add env variables for custom clipboard commands. (#2091, #2042)\n* [FEATURE] only accept keys with \"encryption\" key capability (#2047, #1917, #1917)\n* [TESTING] Improve two line test ambiguity. (#2091, #2042)\n* [TESTING] Use a helper to unset env vars in clipboard tests. (#2091, #2042)\n* [UX] OTP code now runs in loop until canceled or used with -o (#2041)\n\n## 1.13.1 / 2022-01-15\n\n* [BUGFIX] Handle from prefix correctly on mv (#2110, #2079)\n* [BUGFIX] Handle unencoded secret on cat\n\n## 1.13.0 / 2021-11-13\n\n* [BUGFIX] Do not print OTP progress bar if not in terminal (#2019)\n* [BUGFIX] Don't prompt to retype password unnecessarily (#1983)\n* [BUGFIX] Fix AutoClip handling on generate (#2024, #2023)\n* [BUGFIX] Replace Build Status badge in README (#2016)\n* [BUGFIX] The field 'parsing' is now honored with legacy config pre v1.12.7 (#1997)\n* [BUGFIX] Use default git branch on setup (#2026, #1945)\n* [ENHANCEMENT] Adding a MSI installer for Windows (#2001)\n* [ENHANCEMENT] Move password prompts to stderr (#2004)\n* [FEATURE] Add capitalized words to memorable passwords (#1985, #1984)\n* [UX] Use new progress bar for OTP expiry time (#2019)\n\n## 1.12.8 / 2021-08-28\n\n* [BUGFIX] Use same default for partial config files (#1968)\n* [CLEANUP] Remove GOPASS_NOCOLOR in favor of NO_COLOR (#1937, #1936)\n* [ENHACNEMENT] Add gopass merge (#1979, #1948)\n* [ENHANCEMENT] Add --symbols to gopass pwgen (#1966)\n* [ENHANCEMENT] Warn on untracked files (#1972)\n\n## 1.12.7 / 2021-07-02\n\n* DOCUMENTATION Fixed Single Line Formating for Clone Documentation (#1943)\n* [BUGFIX] Allow --strict to be chained with --symbols (#1952, #1941)\n* [BUGFIX] Normalize recipient IDs before comparison (#1953, #1900)\n* [BUGFIX] Use /tmp for GIT_SSH_COMMAND on Mac (#1951, #1896)\n* [ENHANCEMENT] Add warning when parsing content (#1950)\n\n## 1.12.6 / 2021-05-01\n\n* [BUGFIX] Do not recurse with a key (#1907, #1906)\n* [BUGFIX] Fix SSH control path (#1899, #1896)\n* [BUGFIX] Fix gopass env with subtrees (#1894, #1893)\n* [BUGFIX] Honor create -s flag (#1891)\n* [BUGFIX] Ignore commented values in gpg config (#1901, #1898)\n* [ENHANCEMENT] Add better usage instructions (#1912)\n\n## 1.12.5 / 2021-03-27\n\n* [BUGFIX] Allow subkeys (#1843, #1841, #1842)\n* [BUGFIX] Avoid logging credentials (#1886, #1883)\n* [BUGFIX] Fix SSH Command override on termux (#1881)\n* [CLEANUP] Moving pkg/pinentry to gopasspw/pinentry (#1876)\n* [ENHANCEMENT] Add -f flag to create (#1867, #1811)\n* [ENHANCEMENT] Add gopass ln (#1828)\n* [ENHANCEMENT] Add proper diff numbers on sync (#1882)\n* [ENHANCEMENT] Update password rules (#1861)\n\n## 1.12.4 / 2021-03-20\n\n* [BUGFIX] Bring back --yes (#1862, #1858)\n* [BUGFIX] Fix make install on BSD (#1859)\n\n## 1.12.3 / 2021-03-20\n\n* [BUGFIX] Fix generate -c (#1846, #1844)\n* [BUGFIX] Fix gopass update (#1838, #1837)\n* [BUGFIX] Fix progress bar on 32 bit archs (#1855, #1854)\n* [CLEANUP] Remove the custom formula in favour of the official one. (#1847)\n* [ENHANCEMENT] Install manpage when using `make install` (#1845)\n\n## 1.12.2 / 2021-03-13\n\n* [BUGFIX] Do not fail if reminder is unavailable (#1835, #1832)\n* [BUGFIX] Do not shadow directories (#1817, #1813)\n* [BUGFIX] Do not trigger ClamAV FP (#1810, #1807)\n* [BUGFIX] Fix -o (#1822)\n* [BUGFIX] Honor Ctrl+C while waiting for user input (#1805, #1800)\n* [ENHANCEMENT] Add gopass.1 man page (#1827, #1824)\n* [UX] Adding the grep command to --help (#1826, #1825)\n\n## 1.12.1 / 2021-02-17\n\n* [BUGFIX] Enable updater on Windows (#1790, #1789)\n* [BUGFIX] Fix progress bar nil pointer access (#1790, #1789)\n* [BUGFIX] Fix % char in passwords being treated as formatting (#1794, #1793, #1801)\n* [ENHANCEMENT] Add ARCHITECTURE.md (#1787)\n* [ENHANCEMENT] Added a env var to disable reminders (#1792)\n* [ENHANCEMENT] Remind to run gopass update/fsck/audit after 90d (#1792)\n\n## 1.12.0 / 2021-02-11\n\nWARNING: The self updater does not support updating from 1.11.0 to 1.12.0. Our\nrelease infrastructure does not support the key type used in 1.11.0.\n\nNOTE: This release drops the integrations that were moved to their own repos,\ni.e. `git-credential-gopass`, `gopass-hibp`, `gopass-jsonapi` and\n`gopass-summon-provider`.\n\nWe have implemented proper release signing and verification for the self\nupdater and brought it back.\n\n* [BUGFIX] Add signature verification for updater (#1717, #1676)\n* [BUGFIX] Allow using tilde (#1713, #872)\n* [BUGFIX] Always allow removing mounts (#1748, #1746)\n* [BUGFIX] Ask passphrase upon key generation (#1715, #1698)\n* [BUGFIX] Do not overwrite age keyring (#1734, #1678)\n* [BUGFIX] Remove empty parents on gopass rm -r (#1725, #1723)\n* [BUGFIX] The empty password must now be confirmed too (#1719)\n* [BUGFIX] Use the first GPG found in path on Windows (#1751, #1635)\n* [BUGFIX] Warn about --throw-keyids (#1759, #1756)\n* [BUGFIX] fixed mixed case keys for key-value, all keys are lower case now (#1778)\n* [CLEANUP] Remove migrated binaries (#1712, #1673, #1649, #1652, #1631, #1165, #1711, #1670, #1639)\n* [CLEANUP] Remove the ondisk backend (#1720)\n* [ENHANCEMENT] Add -A and -B to pwgen (#1716)\n* [ENHANCEMENT] Add Pinentry CLI fallback (#1697, #1655)\n* [ENHANCEMENT] Add REPL cmd lock (#1744)\n* [ENHANCEMENT] Add optional pinentry unescaping (#1621)\n* [ENHANCEMENT] Add tpl funcs for Bcrypt and Argon2 (#1706, #1689)\n* [ENHANCEMENT] Add windows support to the self updater (#1724, #1722)\n* [ENHANCEMENT] Confirm new age keyring passphrases (#1747)\n* [ENHANCEMENT] KV secrets are now key-values, supporting multiple same key with different values (#1741)\n* [ENHANCEMENT] UTF-8 emojis (#1715, #1698)\n* [ENHANCEMENT] Use gpgconf to the the gpg binary (#1758, #1757)\n* [ENHANCEMENT] Use main as the git default branch (#1749, #1742)\n* [ENHANCEMENT] Use persistent SSH connections (#1755)\n* [TESTING] Adding DI to Github Actions (#1728)\n\n## 1.11.0 / 2020-01-12\n\nThis is an important bugfix release that should resolve several outstanding\nissues and concerns. Since 1.10.0 was released was engaged in a lot of\ndiscussions and realized that compatibility is more important than we first\nthought. So we're rolling back some breaking changes and revise some parts of\nour roadmap. We will strive to remain compatible with other password store\nimplementations - but remember this is a goal, not a promise. This means we'll\ncontinue using compatible secrets formats as well as GPG and Git.\n\n* [BUGFIX] Allow secret names to have a colon in the name\n* [BUGFIX] Apply limit in list correctly\n* [BUGFIX] Correcting newlines handling\n* [BUGFIX] Correct missing padding to TOTP entry\n* [BUGFIX] Create cache folder if doesn't exist. Relevant\n* [BUGFIX] Disable gopass update\n* [BUGFIX] Disabling all kind of parsing of the input\n* [BUGFIX] Do not duplicate key password in K/V secrets\n* [BUGFIX] Do not search for new secrets\n* [BUGFIX] fixes gopass-jsonapi for MacTools GPGSuite users.\n* [BUGFIX] Fix legacy config parsing\n* [BUGFIX] fsck won't correct recipients without --decrypt\n* [BUGFIX] Insert is not resetting the pw now if a key:value pair is specified inline\n* [BUGFIX] Insert is now parsing its stdin input\n* [BUGFIX] Invalidate GPG key list after generation\n* [BUGFIX] List no longer uses the store size as its default depth\n* [BUGFIX] Nil dereference in cui\n* [BUGFIX] Pass arguments to a notification program\n* [BUGFIX] Password insert prompt now works on Windows but\n* [BUGFIX] Re-adding the global --yes flag\n* [BUGFIX] Remove GPG location caching\n* [BUGFIX] Restore path-removal from old config-format\n* [BUGFIX] Show now correctly handles -C and -u together\n* [BUGFIX] The deprecation warning is now output on stderr\n* [BUGFIX] Trim version prefix in jsonapi\n* [CLEANUP] Remove MIME\n* [CLEANUP] Remove the unfinished xc backend\n* [CLEANUP] Update to minio/v7\n* [DOCUMENTATION] Edited features.md\n* [DOCUMENTATION] Improve contributing guide.\n* [DOCUMENTATION] Slight updates to reflect the recent code\n* [ENHANCEMENT] Adding a trailing separator to the listed folders\n* [ENHANCEMENT] Adding the flag show -n to disable output parsing\n* [ENHANCEMENT] Adding the option parsing to disable all parsing\n* [ENHANCEMENT] fsck now detects leftover Mime secrets\n* [ENHANCEMENT] Full windows support\n* [ENHANCEMENT] Prompt for edit search result\n* [ENHANCEMENT] Re-introduce gopass -c\n* [ENHANCEMENT] Show GPG --gen-key error to the user\n* [ENHANCEMENT] This is required when using e.g. Gnome Keyring.\n* [ENHANCEMENT] Use 32 byte salt by default\n* [UX] Preserve content across retries\n\n## 1.10.1\n\n* [BUGFIX] Fix the Makefile\n* [BUGFIX] Remove misleading config error message\n* [BUGFIX] Re-use existing root store\n* [BUGFIX] Use standard Unix directories on MacOS\n\n## 1.10.0\n\nWARNING: This release contains a few breaking changes as well as necessary\npackaging changes.\n\nThis release is building the foundation for an eventual 2.0 release\nwhich will drop many legacy features and significantly shrink the\ncodebase to ensure long term maintainability. The goal is to remove\nthe support for multiple backends and any external dependencies,\nincluding `git` and `gpg` binaries. By default the tool should be easy to use,\nsecure and modern. We will still support our flagship use cases,\nlike working in teams. Also gopass might eventually move to an\nfully encrypted backend where we don't leak information through\nfilenames.\n\nAny gopass 1.x release should still be compatible with any\npassword store implementation (possibly with some caveats).\nBeyond that we plan to drop any compatibility goals.\n\nIf you are using different Password Store implementations to access your\nsecrets, e.g. on mobile devices, you might want to run `gopass config mime false`\nbefore performing any kind of write operation on the password store. Otherwise\nmutated secrets will be written using the new native gopass MIME format and\nmight not be readable from other implementations.\n\nThis release adds documentation for all supported subcommands in the `docs/commands`\nfolder and starts define our core use cases in the `docs/usecases` folder.\nPlease note that the command documentation also serves as a specification on\nhow these commands are supposed to operate.\n\nNote: We have accumulated too many changes so we've decided to skip the 1.9.3\nrelease and issue the first release of the 1.10. series.\n\nNote to package maintainers: This release adds additional binaries which should\nbe included in any binary re-distribution of gopass.\n\n* [BREAKING] New secrets format\n* [BUGFIX] Allow deleting shadowed secret\n* [BUGFIX] Correctly handle exportkeys and auto import for noop\n* [BUGFIX] Do not allow malformed secrets\n* [BUGFIX] Do not return error on no grep matches\n* [BUGFIX] Fix config panic with mounts\n* [BUGFIX] Fix fsck progress bar.\n* [BUGFIX] Fix git init\n* [BUGFIX] Fix optional key passed through find\n* [BUGFIX] Fix tree shadowing.\n* [BUGFIX] Handle relative path during init\n* [BUGFIX] Honor generate --print\n* [BUGFIX] Honor trust level during onboarding.\n* [BUGFIX] Print RCS error message\n* [BUGFIX] Print config parse error to STDERR\n* [BUGFIX] Properly initialize crypto during onboarding and\n* [BUGFIX] env command: do not crash if called without a command to execute\n* [CLEANUP] Merge Storage and RCS backends\n* [CLEANUP] Move internal packages to internal\n* [CLEANUP] Remove autoclip for gopass show\n* [CLEANUP] Remove config option confirm\n* [CLEANUP] Remove curses UI\n* [CLEANUP] Remove the --sync flag to gopass show\n* [CLEANUP] Rename --force to --unsafe for show\n* [CLEANUP] Rename xkcd generator options\n* [DEPRECATION] Mark gopass git as deprecated\n* [DEPRECATION] Remove AutoPrint\n* [DEPRECATION] Remove askformore, autosync\n* [DEPRECATION] Retire editrecipients option\n* [DOCUMENTATION] Document audit, generate, insert and show\n* [DOCUMENTATION] Document list flags\n* [DOCUMENTATION] Improve documentation of Zsh completion setup\n* [ENHANCEMENT] Add GOPASS_DISABLE_MIME to disable new\n* [ENHANCEMENT] Add arm and arm64 binaries\n* [ENHANCEMENT] Add gopass API (unstable)\n* [ENHANCEMENT] Add regexp support to gopass grep\n* [ENHANCEMENT] Add zxcvbn password strength checker\n* [ENHANCEMENT] Avoid direct show on gopass search\n* [ENHANCEMENT] Cache gpg binary location\n* [ENHANCEMENT] Ignore binary secrets for audit\n* [ENHANCEMENT] Introduce --generator flag\n* [ENHANCEMENT] Introduce unsafe-keys\n* [ENHANCEMENT] Make audit report passwords not changed\n* [ENHANCEMENT] Make show --qr flag complementary\n* [ENHANCEMENT] New Debug package\n* [ENHANCEMENT] New progress bar\n* [ENHANCEMENT] Print password before sync\n* [ENHANCEMENT] Provide more helpful config parse errors\n* [ENHANCEMENT] Rewrite tree implementation\n* [ENHANCEMENT] Show recipients from subfolder id files\n* [ENHANCEMENT] Speed up gpg store init\n* [ENHANCEMENT] Support changing path with gopass config\n* [ENHANCEMENT] Support relative revisions for show\n* [ENHANCEMENT] Warn if vim might be leaking secrets\n* [ENHANCEMENT] env command: more tests\n* [FEATURE] Add Password Rules and Domain Alias support\n* [FEATURE] Add experimental backend converter\n* [FEATURE] Add remote config for ondisk storage\n* [FEATURE] Add remote sync support for the ondisk backend\n* [FEATURE] Add summon provider\n* [FEATURE] Pinentry API: support OPTION API call\n* [FEATURE] REPL\n* [TESTING] Add a test to detect shadowing issue with mount\n\n## 1.9.2 / 2020-05-13\n\n* [BUGFIX] Bring back the custom fish completion.\n* [BUGFIX] Disable AutoClip when redirecting stdout\n* [ENHANCEMENT] Create new sub stores in XDG compliant locations.\n\n## 1.9.1 / 2020-05-09\n\n* [BUGFIX] Do not copy to clipboard with -f\n* [BUGFIX] Encrypt parent directory if leaf node exists.\n* [BUGFIX] Fix -c and -C for default show action.\n* [BUGFIX] Hide git-credential store warning.\n* [BUGFIX] Honor notifications setting.\n* [BUGFIX] Simplify autoclip behavior\n* [DEPRECATION] Remove PASSWORD_STORE_DIR support\n* [ENHANCEMENT] Add exportkeys option.\n* [ENHANCEMENT] Add memorable password generator\n* [ENHANCEMENT] Add preliminary age encryption support.\n\n## 1.9.0 / 2020-05-01\n\n* [ENHANCEMENT] Proper windows support [#1295]\n* [ENHANCEMENT] Add pwgen subcommand [#1308]\n* [ENHANCEMENT] Only decrypt when needed [#1289]\n* [ENHANCEMENT] Full unattended password generation [#1259]\n* [ENHANCEMENT] Add -C flag [#1272]\n* [ENHANCEMENT] Migrate to urface/cli/v2 [#1276]\n* [ENHANCEMENT] Support Termux [#913]\n* [BUGFIX] Do not fail if nothing to commit [#1168, #1103]\n* [BUGFIX] Restore PASSWORD_STORE_DIR support [#1213]\n* [BUGFIX] Do not remove empty second line [#1235]\n* [BUGFIX] Do not disable color if no PAGER is available [#1244]\n* [BUGFIX] Do not overwrite entry when reading from STDIN [#1245]\n* [BUGFIX] Commit when using concurrency gt 1 [#1246]\n* [BUGFIX] Do not error out when listing a leaf node [#1300]\n* [BUGFIX] Do not overwrite config if PASSWORD_STORE_DIR is set [#1286]\n* [BUGFIX] Fix go get support [#1288]\n* [DEPRECATION] Remove Dockerfile [#1309]\n* [DEPRECATION] Remove Bintray [#1304]\n* [DEPRECATION] Deprecate OTP, Binary, YAML git-credentials and xc support [#1301]\n* [DEPRECATION] Remove support for OpenPGP (library), GoGit, Vault, Consul and encrypted configs [#1290, #1283, #1282, #1279]\n\n## 1.8.6 / 2019-07-26\n\n* [ENHANCEMENT] Add --password to otp command [#1150]\n* [ENHANCEMENT] Support adding key values with colons [#1128]\n* [BUGFIX] Allow overwriting directories with --force [#1149]\n* [BUGFIX] Sort list of stores when adding recipients [#1144]\n* [BUGFIX] Sort recipients by Name not by ID [#1143]\n* [BUGFIX] Handle slashes in recipient names [#1139]\n\n## 1.8.5 / 2019-03-03\n\n* [ENHANCEMENT] Improve template handling [#1029]\n* [ENHANCEMENT] Remove empty directories [#1009]\n* [ENHANCEMENT] Improve performance of unclip [#923]\n* [ENHANCEMENT] Add AutoPrint option [#1065]\n* [ENHANCEMENT] Follow the rsync convention for cp/mv commands [#1055]\n* [BUGFIX] Fix bash completion for MSYS on Windows [#1053]\n* [BUGFIX] Git clone failing [#1036]\n\n## 1.8.4 / 2018-12-26\n\n* [ENHANCEMENT] Evaluate templates when inserting single secrets [#1023]\n* [ENHANCEMENT] Add fuzzy search dialog for gopass otp [#1021]\n* [ENHANCEMENT] Add edit option to search dialog [#1019]\n* [ENHANCEMENT] Introduce build tags for experimental features [#1000]\n* [BUGFIX] Fix recursive delete [#1024]\n* [BUGFIX] Abort tests on critical failures [#997]\n* [BUGFIX] Zsh autocompletion [#996]\n\n## 1.8.3 / 2018-11-19\n\n* [ENHANCEMENT] Add zsh autocompletion for insert and generate [#988]\n* [ENHANCEMENT] Set exit code for filtered ls without result [#983]\n* [ENHANCEMENT] Improve generate command [#948]\n* [ENHANCEMENT] Print summary for grep [#943]\n* [ENHANCEMENT] Documentation updates [#924, #890, #918, #919, #920, #944, #952, #958, #969, #985]\n* [ENHANCEMENT] jsonapi: Add windows support for configure [#904]\n* [ENHANCEMENT] jsonapi: Add getVersion [#893]\n* [ENHANCEMENT] Support symlinks for fs storage backend [#886]\n* [BUGFIX] Offer store selection with exactly one mount point as well [#987]\n* [BUGFIX] Edit entry selected by fuzzy search [#979]\n* [BUGFIX] Fix path handling on windows [#970]\n* [BUGFIX] Remove quotes [#967]\n* [BUGFIX] Properly handle git add for removed files [#946]\n* [BUGFIX] HAndle already mounted and not initialized errors [#945]\n* [BUGFIX] Fix HIBP command options [#936]\n* [BUGFIX] Offer secret selection on edit command [#929]\n* [BUGFIX] jsonapi: add initialize [#903]\n* [BUGFIX] Update external dependencies [#884, #932, #981]\n* [BUGFIX] Use valid crypto backend for key selection [#889]\n\n## 1.8.2 / 2018-06-28\n\n* [ENHANCEMENT] Improve fsck output [#859]\n* [ENHANCEMENT] Enable notifications on FreeBSD [#863]\n* [ENHANCEMENT] Redirect errors to stderr [#880]\n* [ENHANCEMENT] Do not writer version to config [#883]\n* [BUGFIX] Fix commit on move [#860]\n* [BUGFIX] Properly check store initialization [#865]\n\n## 1.8.1 / 2018-06-08\n\n* [BUGFIX] Trim fsck path [#856]\n* [BUGFIX] Handle URL parse errors in create [#855]\n\n## 1.8.0 / 2018-06-06\n\nThis release includes several possibly breaking changes.\nThe `gopass move` implementation was refactored to properly support moving\nentries and subtrees across mount points. This may change the behaviour slightly.\nAlso the build flags were changed to build PIE binaries. This should not affect\nthe runtime behaviour, but we could not test this on all platforms, yet.\n\n* [BREAKING] Make move work recursively and across stores [#821]\n* [FEATURE] Add git credential caching [#743]\n* [FEATURE] Add local recipient integrity checks [#800 #826]\n* [ENHANCEMENT] Handle key-value pairs on generate and insert [#790]\n* [ENHANCEMENT] Add gpg.listKeys caching [#804]\n* [ENHANCEMENT] Add append mode for gopass insert [#807]\n* [ENHANCEMENT] Support external password generators [#811]\n* [ENHANCEMENT] Add gopass generate completion heuristic [#817]\n* [ENHANCEMENT] Add revive linter checks [#822]\n* [ENHANCEMENT] Remove -static build flag, enable CGO and -buildmode=PIE [#823]\n* [ENHANCEMENT] Warn if RCS backend is noop during gopass sync [#825]\n* [ENHANCEMENT] Support for special password rules on generate [#832]\n* [ENHANCEMENT] Improve create wizard [#842]\n* [ENHANCEMENT] Honor templates on generate [#847]\n* [ENHANCEMENT] Support NO_COLOR [#851]\n* [BUGFIX] Reset clipboard timer on repeated copy [#813]\n* [BUGFIX] Add --force to git add invocation [#839]\n* [BUGFIX] Rename updater GitHub Organisation [#818]\n* [BUGFIX] Default to origin master for git pull [#819]\n* [BUGFIX] Properly propagate RCS backend on gopass clone [#820]\n* [BUGFIX] Fix sub store config propagation [#837 #841]\n* [BUGFIX] Use default for password store dir [#846]\n* [BUGFIX] Properly handle autosync on recipients save [#848]\n* [BUGFIX] Resolve key IDs to fingerprints before adding or removing [#850]\n\n## 1.7.2 / 2018-05-28\n\n* [BUGFIX] Fix tilde expansion [#802]\n\n## 1.7.1 / 2018-05-25\n\n* [BUGFIX] Add nogit compat handler [#792]\n* [BUGFIX] Fix reencrypt [#796]\n\n## 1.7.0 / 2018-05-22\n\n* [FEATURE] Pluggable crypto, storage and RCS backends. Including a pure-Go NaCl based crypto backend [#645] [#680] [#736] [#777]\n* [FEATURE] Password history [#660]\n* [FEATURE] Vault backend [#723] [#730]\n* [FEATURE] Consul backend [#697]\n* [FEATURE] HIBPv2 Dump and API support [#666] [#706]\n* [FEATURE] Select recipients per secret [#703]\n* [FEATURE] Add experimental OpenPGP crypto backend [#670]\n* [ENHANCEMENT] Support HIBPv2 API and Dumps [#666]\n* [ENHANCEMENT] Robust K/V parser with YAML fallback [#659]\n* [ENHANCEMENT] Restrict fsck to given path [#721]\n* [ENHANCEMENT] Refactor [#702] [#708] [#715] [#722] [#731]\n* [ENHANCEMENT] Proper Makefile dependencies [#707]\n* [ENHANCEMENT] Auto-copy with safecontent [#685]\n* [ENHANCEMENT] Add disable notifications option [#690]\n* [ENHANCEMENT] Migrate from govendor to dep [#688]\n* [ENHANCEMENT] Improve test coverage [#732] [#781] [#782]\n* [ENHANCEMENT] Improvate YAML handling [#739]\n* [ENHANCEMENT] Audit freshly generated passwords [#761]\n* [BUGFIX] Use sh instead of bash [#699]\n* [BUGFIX] Lookup correct remote for current branch [#692]\n* [BUGFIX] Fix GPG binary detection on Windows [#681] [#693]\n* [BUGFIX] Version [#727]\n* [BUGFIX] Git init [#729]\n* [BUGFIX] Secret.String() [#738]\n* [BUGFIX] Fix generate --symbols [#742] [#783]\n\n## 1.6.11 / 2018-02-20\n\n* [ENHANCEMENT] Documentation updates [#648] [#656]\n* [ENHANCEMENT] Add secret completions to edit command in zsh [#654]\n* [BUGFIX] Avoid escaping values added to secrets [#658]\n* [BUGFIX] Fix parsing of GPG UIDs [#650]\n\n## 1.6.10 / 2018-01-18\n\n* [ENHANCEMENT] Add Travis MacOS builds [#618]\n* [ENHANCEMENT] Make gopass build on DragonFlyBSD [#619]\n* [ENHANCEMENT] Increase test coverage [#621] [#622] [#624]\n* [BUGFIX] Properly handle sub-store configuration [#625]\n* [BUGFIX] Fix Makefile [#615] [#617]\n* [BUGFIX] Fix failing tests on MacOS [#614]\n\n## 1.6.9 / 2018-01-05\n\n* [BUGFIX] Fix update URL check [#610]\n\n## 1.6.8 / 2018-01-05\n\n* [ENHANCEMENT] Add OpenBSD Ksh completion [#586]\n* [ENHANCEMENT] Increase test coverage [#589] [#590] [#592] [#595] [#596] [#597] [#601] [#602] [#603] [#604]\n* [ENHANCEMENT] Update Documentation and Dockerfile [#591] [#605]\n* [BUGFIX] Use Termwiz CUI on OpenBSD [#588]\n* [BUGFIX] Fix create wizard [#594]\n* [BUGFIX] Use persistent bufio.Reader [#607]\n\n## 1.6.7 / 2017-12-31\n\n* [ENHANCEMENT] Add --sync flag to gopass show [#544]\n* [ENHANCEMENT] Update dependencies [#547]\n* [ENHANCEMENT] Use gocui for terminal UI [#562]\n* [ENHANCEMENT] Increase test coverage [#548] [#549] [#567] [#568] [#570] [#572] [#574] [#575] [#577] [#578] [#583] [#584]\n* [ENHANCEMENT] Add Dockerfile [#561]\n* [ENHANCEMENT] Add zsh and fish completion generator [#565]\n* [ENHANCEMENT] Add go-fuzz instrumentation [#576]\n* [BUGFIX] Catch URL parse errors [#546]\n\n## 1.6.6 / 2017-12-20\n\n* [FEATURE] Selective Sync [#538]\n* [ENHANCEMENT] Make termwiz honor copy flag [#534]\n* [ENHANCEMENT] Make shell completion respect binary name [#536]\n* [ENHANCEMENT] Refactor [#533] [#540] [#541] [#542]\n* [BUGFIX] Show git output [#529]\n\n## 1.6.5 / 2017-12-15\n\n* [ENHANCEMENT] Handle errors gracefully [#524]\n* [BUGFIX] Follow symlinks [#519]\n* [BUGFIX] Improve GPG binary detection [#520] [#522]\n\n## 1.6.4 / 2017-12-13\n\n* [ENHANCEMENT] Support desktop notifications on Mac and Windows [#513]\n* [BUGFIX] Fix slice out of bounds error [#517]\n* [BUGFIX] Allow .password-store to be a symlink [#516]\n* [BUGFIX] Respect --store flag to git sub command [#512]\n\n## 1.6.3 / 2017-12-12\n\n* [ENHANCEMENT] Avoid altering YAML secrets unless necessary [#508]\n* [ENHANCEMENT] Documentation updates [#493] [#509]\n* [ENHANCEMENT] Abort if no GPG binary was found [#506]\n* [ENHANCEMENT] Support GOPASS_GPG_OPTS and GOPASS_UMASK [#504]\n* [BUGFIX] Create .gpg-keys if it does not exist [#507]\n\n## 1.6.2 / 2017-12-02\n\n* [FEATURE] Add gopass fix command [#471]\n* [ENHANCEMENT] Add pledge support on OpenBSD [#469]\n* [ENHANCEMENT] Improve no clipboard warning [#484]\n* [BUGFIX] Allow OTP entry in password field [#467]\n* [BUGFIX] Default to vi if no other editor is available [#479]\n* [BUGFIX] Avoid auto-search running non-interactively [#483]\n\n## 1.6.1 / 2017-11-15\n\n* [FEATURE] Add generic OTP action [#440]\n* [ENHANCEMENT] Ignore any secret that does not end with .gpg [#461]\n* [ENHANCEMENT] Add option to display only the password [#455]\n* [ENHANCEMENT] Disable fuzzy search for gopass find [#454]\n* [BUGFIX] Fix .gpg-id selection for sub folders [#465]\n* [BUGFIX] Set gpg.program if possible [#464]\n* [BUGFIX] Allow access to secrets shadowed by a folder [#463]\n* [BUGFIX] Set GPG_TTY [#452]\n* [BUGFIX] Fix termbox UI on OpenBSD [#446]\n* [BUGFIX] Fix tests and paths on Windows [#421] [#431] [#442] [#450]\n\n## 1.6.0 / 2017-11-03\n\n* [FEATURE] Add Desktop notifications (Linux/DBus only) [#434] [#435]\n* [ENHANCEMENT] Show public key identities before importing [#427]\n* [ENHANCEMENT] Initialize local git config on gopass clone [#429]\n* [ENHANCEMENT] Do not print generated passwords by default [#430]\n* [ENHANCEMENT] Clear KDE Klipper History on clipboard clearing [#434]\n* [ENHANCEMENT] Refactor git backend [#437]\n* [BUGFIX] Fix recipients remove when using email as identifier [#436]\n\n## 1.5.1 / 2017-10-25\n\n* [ENHANCEMENT] Re-introduce usecolor config option [#414]\n* [ENHANCEMENT] Improve documentation [#407] [#409] [#416] [#417]\n* [ENHANCEMENT] Add language switch for xckd-style generation [#406]\n* [BUGFIX] Fix GPG binary detection [#419]\n* [BUGFIX] Fix tests on windows [#421]\n\n## 1.5.0 / 2017-10-17\n\n* [FEATURE] Add secret creation wizard [#386]\n* [FEATURE] Add onboarding wizard [#387]\n* [FEATURE] Wizard for recipients add/remove [#359]\n* [FEATURE] XKCD#936 inspired password generation [#368]\n* [FEATURE] Add update wizard [#395]\n* [ENHANCEMENT] Overhaul documentation [#383] [#384]\n* [ENHANCEMENT] Attempt to get TOTP key from YAML [#376]\n* [ENHANCEMENT] Allow find to take -c [#378]\n* [ENHANCEMENT] Improve terminal wizard [#385]\n* [ENHANCEMENT] Improve responsiveness by context usage [#388]\n* [ENHANCEMENT] Improve output readability [#392] [#393]\n* [ENHANCEMENT] Automatic GPG key generation [#391]\n* [BUGFIX] Relax YAML document marker handling [#398]\n\n## 1.4.1 / 2017-10-05\n\n* [BUGFIX] Support pre-1.3.0 configs [#382]\n* [BUGFIX] Turn YAML errors into warnings [#380]\n\n## 1.4.0 / 2017-10-04\n\n* [FEATURE] Add fuzzy search [#317]\n* [FEATURE] Allow restricting charset of generated passwords [#270]\n* [FEATURE] Check quality of newly inserted passwords with crunchy [#276]\n* [FEATURE] JSON API [#326]\n* [FEATURE] Per-Mount configuration options [#330]\n* [FEATURE] Terminal selection of results [#259]\n* [FEATURE] gopass sync [#303]\n* [ENHANCEMENT] Build with Go 1.9 [#294]\n* [ENHANCEMENT] Display single find result directly [#265]\n* [ENHANCEMENT] Global --yes flag [#327]\n* [ENHANCEMENT] Improve error handling and propagation [#280]\n* [ENHANCEMENT] Omit newline when not writing to a terminal [#325]\n* [ENHANCEMENT] Only commit once per recipient batch operation [#329]\n* [ENHANCEMENT] Provide partial support for .gpg-id files in sub folders [#291]\n* [ENHANCEMENT] Trim any trailing newlines or carriage returns in show output [#296]\n* [ENHANCEMENT] Use contexts [#310]\n* [ENHANCEMENT] Use contexts to cancel long running operations [#358]\n* [ENHANCEMENT] Use default editors [#286]\n* [ENHANCEMENT] Improve documentation [#365]\n* [ENHANCEMENT] Print selected entry [#372]\n* [BUGFIX] Confirm removal of directories [#309]\n* [BUGFIX] Only confirm recipients once during batch operations [#328]\n* [BUGFIX] Only overwrite password on insert [#323]\n* [BUGFIX] Avoid Show/Find recursion [#360]\n* [BUGFIX] Remove deprecated special case for .yaml files [#362]\n* [BUGFIX] Do not offer invalid keys [#364]\n* [BUGFIX] Assign path only if resolving symlink succeeds [#370]\n\n## 1.3.2 / 2017-08-22\n\n* [BUGFIX] Fix git version output [#274]\n\n## 1.3.1 / 2017-08-15\n\n* [BUGFIX] Enable AutoSync by default [#267]\n* [BUGFIX] git - do not abort if a store has no remote [#261]\n* [BUGFIX] Fix IFS in bash completion [#268]\n\n## 1.3.0 / 2017-08-11\n\n* [BREAKING] Enforce YAML document markers [#193]\n* [BREAKING] Simplify configuration [#213]\n* [BREAKING] Align gopass init flags with other commands [#252]\n* [FEATURE] Implement pager feature [#163]\n* [FEATURE] Add basic fish completion [#168]\n* [FEATURE] Add version check [#205]\n* [FEATURE] Add gopass audit command [#228]\n* [FEATURE] Add gopass audit hibp command [#239]\n* [ENHANCEMENT] Disable auto-push while re-encrypting [#171]\n* [ENHANCEMENT] Configure git user and email before initial git commit [#185]\n* [ENHANCEMENT] Add recursive git operations [#186]\n* [ENHANCEMENT] Document missing config options [#188]\n* [ENHANCEMENT] Only check and load missing GPG keys after git pull [#190]\n* [ENHANCEMENT] Only encrypt for valid recipients [#191]\n* [ENHANCEMENT] Check and import missing GPG keys on recipients show [#204]\n* [ENHANCEMENT] Save recipients on show [#207]\n* [ENHANCEMENT] Include GPG and Git version in gopass version output [#210]\n* [ENHANCEMENT] Support more flexible YAML documents [#217]\n* [ENHANCEMENT] Simplify mounts add by inferring local path [#219]\n* [ENHANCEMENT] Add contributor documentation [#222]\n* [ENHANCEMENT] Re-use selected encryption key for git signing [#247]\n* [ENHANCEMENT] Setup git push.default [#248]\n* [BUGFIX] Fix nil-pointer check on non existing sub tree [#183]\n* [BUGFIX] Fix load-keys [#203]\n* [BUGFIX] Only match mounts on folders [#240]\n* [BUGFIX] Disable checkRecipients as it conflicts with alwaysTrust [#242]\n\n## 1.2.0 / 2017-06-21\n\n* [FEATURE] YAML support [#125]\n* [FEATURE] Binary support [#136]\n* [ENHANCEMENT] Increase test coverage [#160]\n* [ENHANCEMENT] Use secure temporary storage on MacOS [#144]\n* [ENHANCEMENT] Use goreleaser [#151]\n* [BUGFIX] Fix git invocation [#140]\n* [BUGFIX] Fix missing recipients on init [#141]\n* [BUGFIX] Fix sorting of mount points [#148]\n\n## 1.1.2 / 2017-06-14\n\n* [BUGFIX] Fix gopass init --store [#129]\n* [BUGFIX] Fix gopass init [#127]\n\n## 1.1.1 / 2017-06-13\n\n* [ENHANCEMENT] Allow files and folders with the same name [#124]\n* [ENHANCEMENT] Improve error messages [#121]\n* [ENHANCEMENT] Add rm aliases to remove commands [#119]\n* [BUGFIX] Several bug fixes for multi-repository handling [#123]\n\n## 1.1.0 / 2017-05-31\n\n* [FEATURE] Support templates [#1]\n* [FEATURE] QR Code output [#64]\n* [ENHANCEMENT] If entry was not found start search [#109]\n* [ENHANCEMENT] Do not write color codes unless terminal [#111]\n* [ENHANCEMENT] Make find compare case insensitive [#108]\n* [ENHANCEMENT] Enforce UNIX style line endings [#105]\n* [ENHANCEMENT] Use XDG_CONFIG_HOME [#67]\n* [ENHANCEMENT] Support symlinks [#41]\n* [ENHANCEMENT] Add nocolor config flag [#33]\n* [ENHANCEMENT] Accept args for editor [#30]\n* [BUGFIX] Build fixes for Windows [#14]\n\n## 1.0.2 / 2017-03-24\n\n* [ENHANCEMENT] Improve mounts and init commands [#87]\n* [ENHANCEMENT] Document behavior of `-c` [#82]\n* [ENHANCEMENT] Pass custom arguments to dmenu completion [#72]\n* [ENHANCEMENT] Build with Go 1.8 [#65]\n* [BUGFIX] Improve recursive deletes [#55]\n* [BUGFIX] Bypass prompts on gopass insert --force [#66]\n* [BUGFIX] Able to store secrets, but with errors [#13]\n* [BUGFIX] Don't prompt if input from stdin [#58]\n* [BUGFIX] Git add fails to \"add\" removed files [#57]\n\n## 1.0.1 / 2017-02-13\n\n* [FEATURE] Add dmenu support [#47]\n* [ENHANCEMENT] Extend GOPASS_DEBUG coverage [#31]\n* [ENHANCEMENT] Accept args for editor [#30]\n* [ENHANCEMENT] Use gpg2 if available [#9]\n* [BUGFIX] Fix git error handling in saveRecipients [#32]\n* [BUGFIX] Check if ExpirationDate is set [#28]\n* [BUGFIX] Change user.signkey to user.signingkey [#26]\n* [BUGFIX] Only copy the first line to the clipboard [#21]\n* [BUGFIX] Add search alias to find [#8]\n\n## 1.0.0 / 2017-02-02\n\n* [ENHANCEMENT] Support mounted sub-stores\n* [ENHANCEMENT] git auto-push and auto-pull\n* [ENHANCEMENT] git-style config editing\n* [ENHANCEMENT] Simplified recipient management\n* [ENHANCEMENT] Interactive questions for missing parameters\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.51171875,
          "content": "# Contributing\n\n`gopass` uses GitHub to manage reviews of pull requests.\n\n* If you are a new contributor see: [Steps to Contribute](#steps-to-contribute)\n\n* If you have a trivial fix or improvement, go ahead and create a pull request.\n\n* If you plan to do something more involved, first raise an issue to discuss\n  your idea. This will avoid unnecessary work.\n\n* Relevant coding style guidelines are  the [Go Code Review Comments](https://code.google.com/p/go-wiki/wiki/CodeReviewComments)\n  and the _Formatting and style_ section of Peter Bourgon's [Go: Best Practices for Production Environments](http://peter.bourgon.org/go-in-production/#formatting-and-style).\n\n## Steps to Contribute\n\nShould you wish to work on an issue, please claim it first by commenting on the GitHub issue you want to work on it.\nThis will prevent duplicated efforts from contributors.\n\nPlease check the [`help-wanted`](https://github.com/gopasspw/gopass/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22) label to find issues that need help.\nIf you have questions about one of the issues please comment on them and one of the maintainers\nwill try to clarify it.\n\n## Pull Request Checklist\n\n* Use that [latest stable Go release](https://golang.org/dl/)\n\n* Branch from master and, if needed, rebase to the current master branch before submitting your pull request.\n  If it doesn't merge cleanly with master you will be asked to rebase your changes.\n\n* Commits should be as small as possible, while ensuring that each commit is correct independently.\n\n* Add tests relevant to the fixed bug or new feature.\n\n* Commit messages must contain [Developer Certificate of Origin](https://developercertificate.org/) / `Signed-off-by` line, for example:\n\n      One line description of commit\n\n      More detailed description of commit, if needed.\n\n      Signed-off-by: Your Name <your@email.com>\n\n* The first line of the commit message, the subject line, should be prefix with a tag indicating the type of the change. These tags will be extracted and used to populate the changelog.\n  Valid `[TAG]`s are `[BREAKING]`, `[BUGFIX]`, `[CLEANUP]`, `[DEPRECATION]`,\n  `[DOCUMENTATION]`, `[ENHANCEMENT]`, `[FEATURE]`, `[TESTING]`, and `[UX]`.\n\n## Building & Testing\n\n* Build via `go build` to create the binary file `./gopass`.\n* Run unit tests with: `make test`\n* Run meta tests with: `make codequality`\n* Run integration tests `make test-integration`\n\nIf any of the above don't work check out the [troubleshooting section](#troubleshooting-build).\n\n## Releasing\n\nSee [docs/releases.md](docs/releases.md).\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.8779296875,
          "content": "FROM golang:1.22-alpine@sha256:0d3653dd6f35159ec6e3d10263a42372f6f194c3dea0b35235d72aabde86486e AS build-env\n\nENV CGO_ENABLED 0\n\nRUN apk add --no-cache make git ncurses\n\n# Build gopass\nWORKDIR /home/runner/work/gopass/gopass\n\nCOPY go.mod .\nCOPY go.sum .\nRUN go mod download\n\nCOPY . .\n\nARG golags_arg=\"\"\nENV GOFLAGS=$goflags_arg\n\nRUN make clean\nRUN make gopass\n\n# Build gopass-jsonapi\nWORKDIR /home/runner/work/gopass\n\nRUN git clone https://github.com/gopasspw/gopass-jsonapi.git\n\nWORKDIR /home/runner/work/gopass/gopass-jsonapi\nRUN go mod download\nRUN make clean\nRUN make gopass-jsonapi\n\n# Build gopass-hibp\nWORKDIR /home/runner/work/gopass\n\nRUN git clone https://github.com/gopasspw/gopass-hibp.git\n\nWORKDIR /home/runner/work/gopass/gopass-hibp\nRUN go mod download\nRUN make clean\nRUN make gopass-hibp\n\n# Build gopass-summon-provider\nWORKDIR /home/runner/work/gopass\n\nRUN git clone https://github.com/gopasspw/gopass-summon-provider.git\n\nWORKDIR /home/runner/work/gopass/gopass-summon-provider\nRUN go mod download\nRUN make clean\nRUN make gopass-summon-provider\n\n# Build git-credential-gopass\nWORKDIR /home/runner/work/gopass\n\nRUN git clone https://github.com/gopasspw/git-credential-gopass.git\n\nWORKDIR /home/runner/work/gopass/git-credential-gopass\nRUN go mod download\nRUN make clean\nRUN make git-credential-gopass\n\nFROM alpine@sha256:c5b1261d6d3e43071626931fc004f70149baeba2c8ec672bd4f27761f8e1ad6b\nRUN apk add --no-cache ca-certificates git gnupg\nCOPY --from=build-env /home/runner/work/gopass/gopass/gopass /usr/local/bin/\nCOPY --from=build-env /home/runner/work/gopass/gopass-jsonapi/gopass-jsonapi /usr/local/bin/\nCOPY --from=build-env /home/runner/work/gopass/gopass-hibp/gopass-hibp /usr/local/bin/\nCOPY --from=build-env /home/runner/work/gopass/gopass-summon-provider/gopass-summon-provider /usr/local/bin/\nCOPY --from=build-env /home/runner/work/gopass/git-credential-gopass/git-credential-gopass /usr/local/bin/\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 1.0166015625,
          "content": "# gopass project governance\n\n## Overview\n\nThe gopass project uses a governance model commonly described as Benevolent\nDictator For Life (BDFL). This document outlines our understanding of what this\nmeans. It is derived from the [i3 window manager project\ngovernance](https://raw.githubusercontent.com/i3/i3/next/.github/GOVERNANCE.md). \n\n## Roles\n\n* user: anyone who interacts with the gopass project\n* core contributor: a handful of people who have contributed significantly to\n  the project by any means (issue triage, support, documentation, code, etc.).\n  Core contributors are recognizable via GitHub’s “Member” badge.\n* Benevolent Dictator For Life (BDFL): a single individual who makes decisions\n  when consensus cannot be reached. gopass’s current BDFL is [@dominikschulz](https://github.com/dominikschulz).\n\n## Decision making process\n\nIn general, we try to reach consensus in discussions. In case consensus cannot\nbe reached, the BDFL makes a decision.\n\n## Contribution process\n\nPlease see [CONTRIBUTING](CONTRIBUTING.md).\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0517578125,
          "content": "The MIT License (MIT)\n\nCopyright 2017 JustWatch GmbH\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 6.705078125,
          "content": "FIRST_GOPATH              := $(firstword $(subst :, ,$(GOPATH)))\nPKGS                      := $(shell go list ./... | grep -v /tests | grep -v /xcpb | grep -v /gpb)\nGOFILES_NOVENDOR          := $(shell find . -name vendor -prune -o -type f -name '*.go' -not -name '*.pb.go' -print)\nGOFILES_BUILD             := $(shell find . -type f -name '*.go' -not -name '*_test.go')\nGOPASS_VERSION            ?= $(shell cat VERSION)\nGOPASS_OUTPUT             ?= gopass\nGOPASS_REVISION           := $(shell cat COMMIT 2>/dev/null || git rev-parse --short=8 HEAD)\nBASH_COMPLETION_OUTPUT    := bash.completion\nFISH_COMPLETION_OUTPUT    := fish.completion\nZSH_COMPLETION_OUTPUT     := zsh.completion\nCLIPHELPERS               ?= \"\"\n# Support reproducible builds by embedding date according to SOURCE_DATE_EPOCH if present\nDATE                      := $(shell date -u -d \"@$(SOURCE_DATE_EPOCH)\" '+%FT%T%z' 2>/dev/null || date -u '+%FT%T%z')\nBUILDFLAGS_NOPIE          := -tags=netgo -trimpath -ldflags=\"-s -w -X main.version=$(GOPASS_VERSION) -X main.commit=$(GOPASS_REVISION) -X main.date=$(DATE) $(CLIPHELPERS)\" -gcflags=\"-trimpath=$(GOPATH)\" -asmflags=\"-trimpath=$(GOPATH)\"\nBUILDFLAGS                ?= $(BUILDFLAGS_NOPIE) -buildmode=pie\nTESTFLAGS                 ?=\nPWD                       := $(shell pwd)\nPREFIX                    ?= $(GOPATH)\nBINDIR                    ?= $(PREFIX)/bin\nGO                        ?= GO111MODULE=on CGO_ENABLED=0 go\nGOOS                      ?= $(shell $(GO) version | cut -d' ' -f4 | cut -d'/' -f1)\nGOARCH                    ?= $(shell $(GO) version | cut -d' ' -f4 | cut -d'/' -f2)\nTAGS                      ?= netgo\nexport GO111MODULE=on\n\nOK := $(shell tput setaf 6; echo ' [OK]'; tput sgr0;)\n\nall: sysinfo build\nbuild: $(GOPASS_OUTPUT)\ncompletion: $(BASH_COMPLETION_OUTPUT) $(FISH_COMPLETION_OUTPUT) $(ZSH_COMPLETION_OUTPUT)\ntravis: sysinfo crosscompile build fulltest completion codequality\ntravis-osx: sysinfo build test completion\ntravis-windows: sysinfo build test-win completion\n\nsysinfo:\n\t@echo \">> SYSTEM INFORMATION\"\n\t@echo -n \"     PLATFORM   : $(shell uname -a)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     PWD:       : $(shell pwd)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     GO         : $(shell $(GO) version)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     BUILDFLAGS : $(BUILDFLAGS)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     GIT        : $(shell git version)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     GPG        : $(shell which gpg) $(shell gpg --version | head -1)\"\n\t@printf '%s\\n' '$(OK)'\n\t@echo -n \"     GPGAgent   : $(shell which gpg-agent) $(shell gpg-agent --version | head -1)\"\n\t@printf '%s\\n' '$(OK)'\n\nclean:\n\t@echo -n \">> CLEAN\"\n\t@$(GO) clean -i ./...\n\t@rm -f ./coverage-all.html\n\t@rm -f ./coverage-all.out\n\t@rm -f ./coverage.out\n\t@find . -type f -name \"coverage.out\" -delete\n\t@rm -f gopass_*.deb\n\t@rm -f gopass-*.pkg.tar.xz\n\t@rm -f gopass-*.rpm\n\t@rm -f gopass-*.tar.bz2\n\t@rm -f gopass-*.tar.gz\n\t@rm -f gopass-*-*\n\t@rm -f tests/tests\n\t@rm -f *.test\n\t@rm -rf dist/*\n\t@printf '%s\\n' '$(OK)'\n\n$(GOPASS_OUTPUT): $(GOFILES_BUILD)\n\t@echo -n \">> BUILD, version = $(GOPASS_VERSION)/$(GOPASS_REVISION), output = $@\"\n\t@$(GO) build -o $@ $(BUILDFLAGS)\n\t@printf '%s\\n' '$(OK)'\n\ninstall: all install-completion install-man\n\t@echo -n \">> INSTALL, version = $(GOPASS_VERSION)\"\n\t@install -m 0755 -d $(DESTDIR)$(BINDIR)\n\t@install -m 0755 $(GOPASS_OUTPUT) $(DESTDIR)$(BINDIR)/gopass\n\t@printf '%s\\n' '$(OK)'\n\ninstall-completion:\n\t@install -d $(DESTDIR)$(PREFIX)/share/zsh/site-functions $(DESTDIR)$(PREFIX)/share/bash-completion/completions $(DESTDIR)$(PREFIX)/share/fish/vendor_completions.d\n\t@install -m 0644 $(ZSH_COMPLETION_OUTPUT) $(DESTDIR)$(PREFIX)/share/zsh/site-functions/_gopass\n\t@install -m 0644 $(BASH_COMPLETION_OUTPUT) $(DESTDIR)$(PREFIX)/share/bash-completion/completions/gopass\n\t@install -m 0644 $(FISH_COMPLETION_OUTPUT) $(DESTDIR)$(PREFIX)/share/fish/vendor_completions.d/gopass.fish\n\t@printf '%s\\n' '$(OK)'\n\ninstall-man: gopass.1\n\t@install -d -m 0755 $(DESTDIR)$(PREFIX)/share/man/man1\n\t@install -m 0644 gopass.1 $(DESTDIR)$(PREFIX)/share/man/man1/gopass.1\n\nfulltest: $(GOPASS_OUTPUT)\n\t@echo \">> TEST, \\\"full-mode\\\": race detector off\"\n\t@echo \"mode: atomic\" > coverage-all.out\n\t@$(foreach pkg, $(PKGS),\\\n\t    echo -n \"     \";\\\n\t\t$(GO) test -run '(Test|Example)' $(BUILDFLAGS) $(TESTFLAGS) -coverprofile=coverage.out -covermode=atomic $(pkg) || exit 1;\\\n\t\ttail -n +2 coverage.out >> coverage-all.out;)\n\t@$(GO) tool cover -html=coverage-all.out -o coverage-all.html\n\t@which go-cover-treemap > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) install github.com/nikolaydubina/go-cover-treemap@latest; \\\n\tfi\n\t@go-cover-treemap -coverprofile coverage-all.out > coverage-all.svg\n\ntest: $(GOPASS_OUTPUT)\n\t@echo \">> TEST, \\\"fast-mode\\\": race detector off\"\n\t@$(foreach pkg, $(PKGS),\\\n\t    echo -n \"     \";\\\n\t\t$(GO) test -test.short -run '(Test|Example)' $(BUILDFLAGS) $(TESTFLAGS) $(pkg) || exit 1;)\n\ntest-win: $(GOPASS_OUTPUT)\n\t@echo \">> TEST, \\\"fast-mode-win\\\": race detector off\"\n\t@$(foreach pkg, $(PKGS),\\\n\t\t$(GO) test -test.short -run '(Test|Example)' $(pkg) || exit 1;)\n\ntest-integration: $(GOPASS_OUTPUT)\n\tcd tests && GOPASS_BINARY=$(PWD)/$(GOPASS_OUTPUT) GOPASS_TEST_DIR=$(PWD)/tests $(GO) test -v $(TESTFLAGS)\n\ncrosscompile:\n\t@echo \">> CROSSCOMPILE\"\n\t@which goreleaser > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) install github.com/goreleaser/goreleaser@latest; \\\n\tfi\n\t@goreleaser build --snapshot\n\n%.completion: $(GOPASS_OUTPUT)\n\t@printf \">> $* completion, output = $@\"\n\t@./gopass completion $* > $@\n\t@printf \"%s\\n\" \"$(OK)\"\n\ncodequality:\n\t@echo \">> CODE QUALITY\"\n\n\t# Note: there are 2 different version of golangci-lint used inside the project.\n\t# https://github.com/gopasspw/gopass/blob/master/.github/workflows/build.yml#L65\n\t# https://github.com/gopasspw/gopass/blob/master/.github/workflows/golangci-lint.yml#L46\n\t# https://github.com/gopasspw/gopass/blob/master/Makefile#L136\n\t@echo -n \"     GOLANGCI-LINT \"\n\t@which golangci-lint > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \\\n\tfi\n\t@golangci-lint run --max-issues-per-linter 0 --max-same-issues 0 --sort-results || exit 1\n\n\t@printf '%s\\n' '$(OK)'\n\n\t@echo -n \"     LICENSE-LINT \"\n\t@which license-lint > /dev/null; if [ $$? -ne 0 ]; then \\\n\t\t$(GO) install istio.io/tools/cmd/license-lint@latest; \\\n\tfi\n\t@license-lint --config .license-lint.yml >/dev/null || exit 1\n\n\t@printf '%s\\n' '$(OK)'\n\ngen:\n\t@$(GO) generate ./...\n\nfmt:\n\t@gofumpt -w $(GOFILES_NOVENDOR)\n\t@$(GO) mod tidy\n\ndeps:\n\t@$(GO) build -v ./...\n\nupgrade: gen fmt\n\t@$(GO) get -u ./...\n\t@$(GO) mod tidy\n\nman:\n\t@$(GO) run helpers/man/main.go > gopass.1\n\nmsi:\n\t@$(GO) run helpers/msipkg/main.go\n\ndocker:\n\tdocker build -t gopass:latest .\n\n.PHONY: clean build completion install sysinfo crosscompile test codequality release goreleaser debsign man msi docker\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2470703125,
          "content": "<p align=\"center\">\n    <img src=\"docs/logo.png\" height=\"250\" alt=\"gopass Gopher by Vincent Leinweber, remixed from the Renée French original Gopher\" title=\"gopass Gopher by Vincent Leinweber, remixed from the Renée French original Gopher\" />\n</p>\n\n# Overview\n\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/gopasspw/gopass/badge)](https://securityscorecards.dev/viewer/?uri=github.com/gopasspw/gopass)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/gopasspw/gopass/build.yml?branch=master)](https://github.com/gopasspw/gopass/actions/workflows/build.yml?query=branch%3Amaster)\n[![Go Report Card](https://goreportcard.com/badge/github.com/gopasspw/gopass)](https://goreportcard.com/report/github.com/gopasspw/gopass)\n[![Packaging status](https://repology.org/badge/tiny-repos/gopass-gopasspw.svg)](https://repology.org/project/gopass-gopasspw/versions)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/gopasspw/gopass/blob/master/LICENSE)\n[![Github All Releases](https://img.shields.io/github/downloads/gopasspw/gopass/total.svg)](https://github.com/gopasspw/gopass/releases)\n[![Gopass Slack](https://img.shields.io/badge/%23gopass-Slack-brightgreen)](https://join.slack.com/t/gopassworkspace/shared_invite/zt-17jl74b5x-U1OUW4ts4AQ7eAf2V4QaaQ)\n\n> The slightly more awesome standard UNIX password manager for teams.\n\nManage your credentials with ease. In a globally distributed team, on multiple devices or fully offline on an air gapped machine.\n\n- **Works everywhere** - The same user experience on Linux, MacOS, *BSD or Windows\n- **Built for teams** - Built from our experience working in distributed development teams\n- **Full autonomy** - No network connectivity required, unless you want it\n\n# How Does It Work?\n\nBy default your credentials are encrypted with GPG and versioned in git. This can be customized easily.\nThe primary interface is the command line, making it an excellent choice for CLI fans, CI/CD systems or\nanything you can hook it up with. Gopass can also integrate with your browser so you can largely avoid\nthe command line - if you want.\n\n# Installation\n\n## Necessary prerequisites for running `gopass`\n\n`gopass` can operate without any dependencies but most users will use it with `gpg` and `git`.\nAn external editor is required to use `gopass edit`.\n\n## Installation through package managers\n\n### [Homebrew](https://brew.sh) (Linux/MacOS)\n\n[![homebrew version](https://img.shields.io/homebrew/v/gopass)](https://github.com/Homebrew/homebrew-core/blob/master/Formula/gopass.rb)\n\n```shell\nbrew install gopass\n```\n\n### [MacPorts](https://www.macports.org) (macOS)\n\n[![macports version](https://repology.org/badge/version-for-repo/macports/gopass-gopasspw.svg)](https://ports.macports.org/port/gopass/)\n\n```shell\nsudo port install gopass\n```\n\n### Debian (Ubuntu, Debian, Raspbian, ...)\n\n**Warning**: Do not install the `gopass` package for the official repositories. That is a completely different project that has no relation to us.\n\n```shell\ncurl https://packages.gopass.pw/repos/gopass/gopass-archive-keyring.gpg | sudo tee /usr/share/keyrings/gopass-archive-keyring.gpg >/dev/null\ncat << EOF | sudo tee /etc/apt/sources.list.d/gopass.sources\nTypes: deb\nURIs: https://packages.gopass.pw/repos/gopass\nSuites: stable\nArchitectures: all amd64 arm64 armhf\nComponents: main\nSigned-By: /usr/share/keyrings/gopass-archive-keyring.gpg\nEOF\nsudo apt update\nsudo apt install gopass gopass-archive-keyring\n```\n\n### Fedora / RedHat / CentOS\n\n[![Fedora version](https://img.shields.io/fedora/v/gopass)](https://packages.fedoraproject.org/pkgs/gopass/gopass/)\n\n```shell\ndnf install gopass\n```\n\nNote: You might need to run `dnf copr enable daftaupe/gopass` first.\n\n### Arch Linux\n\n[![Arch version](https://img.shields.io/archlinux/v/extra/x86_64/gopass)](https://archlinux.org/packages/extra/x86_64/gopass/)\n\n```shell\npacman -S gopass\n```\n\n### Windows\n\n[![Scoop version](https://img.shields.io/scoop/v/gopass)](https://github.com/ScoopInstaller/Main/blob/master/bucket/gopass.json)\n\n```shell\n# WinGet\nwinget install Git.Git\nwinget install GnuPG.Gpg4win\nwinget install gopass.gopass\n# Chocolatey\nchoco install gpg4win\nchoco install gopass\n# Alternatively\nscoop install gopass\n```\n\n### FreeBSD / OpenBSD\n\n```shell\ncd /usr/ports/security/gopass\nmake install\n```\n\n### Alpine Linux\n\n```shell\napk add gopass\n```\n\n## Other installation options\n\nPlease see [docs/setup.md](https://github.com/gopasspw/gopass/blob/master/docs/setup.md) for other options.\n\n### From Source\n\n```shell\ngo install github.com/gopasspw/gopass@latest\n```\n\nNote: `latest` is not a stable release. We recommend to only use released versions.\n\n### Manual download\n\nDownload the [latest release](https://github.com/gopasspw/gopass/releases/latest) and add the binary to your PATH.\n\n# Quick start guide\n\nInitialize a new `gopass` configuration:\n\n```shell\ngopass setup\n\n   __     _    _ _      _ _   ___   ___\n /'_ '\\ /'_'\\ ( '_'\\  /'_' )/',__)/',__)\n( (_) |( (_) )| (_) )( (_| |\\__, \\\\__, \\\n'\\__  |'\\___/'| ,__/''\\__,_)(____/(____/\n( )_) |       | |\n \\___/'       (_)\n\n🌟 Welcome to gopass!\n🌟 Initializing a new password store ...\n🌟 Configuring your password store ...\n🎮 Please select a private key for encrypting secrets:\n[0] gpg - 0xFEEDBEEF - John Doe <john.doe@example.org>\nPlease enter the number of a key (0-12, [q]uit) (q to abort) [0]: 0\n❓ Do you want to add a git remote? [y/N/q]: y\nConfiguring the git remote ...\nPlease enter the git remote for your shared store []: git@gitlab.example.org:john/passwords.git\n✅ Configured\n```\n\nBy default `gopass setup` will use `gpg` encryption and `git` storage. This will create a new password store in `$HOME/.local/share/gopass/stores/root` and a configuration in `$HOME/.config/gopass/config` using `gpg` encryption and `git` for versioned storage. Users can override these with e.g. `--crypto=age` to use `age` encryption instead or opt out of using a versioned store with `--storage=fs`.\n\nAn existing store can be cloned with e.g. `gopass clone git@gitlab.example.org:john/passwords.git`.\n\nCreate a new secret:\n\n```shell\ngopass create\n```\n\nList all existing secrets:\n\n```shell\ngopass ls\n```\n\nCopy an existing password to the clipboard:\n\n```shell\ngopass show -c foo\n```\n\nRemove an existing secret:\n\n```shell\ngopass rm foo\n```\n\nOther examples:\n\n```shell\n# Command structure\ngopass [<command>] [options] [args]\n# Shortcut for gopass show [<key>]\ngopass [<key>]\n\n# Enter the gopass REPL\ngopass\n\n# Find all entries matching the search string\ngopass find github\n\n# List your store\ngopass ls\n\n# List all mounts\ngopass mounts\n\n# List all recipients\ngopass recipients\n\n# Sync with all remotes\ngopass sync\n\n# Setup a new store\ngopass setup\n```\n\n## Screenshot\n\n![screenshot](docs/showcase.png)\n\n## Support\n\nPlease ask on [Slack](https://join.slack.com/t/gopassworkspace/shared_invite/zt-17jl74b5x-U1OUW4ts4AQ7eAf2V4QaaQ).\n\n## Contributing\n\nWe welcome any contributions. Please see [CONTRIBUTING.md](https://github.com/gopasspw/gopass/blob/master/CONTRIBUTING.md) for more information.\n\n## Credit & License\n\ngopass is licensed under the terms of the MIT license. You can find the complete text in [`LICENSE`](https://github.com/gopasspw/gopass/blob/master/LICENSE).\n\nPlease refer to our [Contributors](https://github.com/gopasspw/gopass/graphs/contributors) page for a complete list of our contributors.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.0078125,
          "content": "1.15.15\n"
        },
        {
          "name": "bash.completion",
          "type": "blob",
          "size": 0.3125,
          "content": "_gopass_bash_autocomplete() {\n     local cur opts base\n     COMPREPLY=()\n     cur=\"${COMP_WORDS[COMP_CWORD]}\"\n     opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )\n     local IFS=$'\\n'\n     COMPREPLY=( $(compgen -W \"${opts}\" -- ${cur}) )\n     return 0\n }\n\ncomplete -F _gopass_bash_autocomplete gopass\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fish.completion",
          "type": "blob",
          "size": 36.958984375,
          "content": "#!/usr/bin/env fish\nset PROG 'gopass'\n\nfunction __fish_gopass_needs_command\n  set -l cmd (commandline -opc)\n  if [ (count $cmd) -eq 1 -a $cmd[1] = $PROG ]\n    return 0\n  end\n  return 1\nend\n\nfunction __fish_gopass_uses_command\n  set cmd (commandline -opc)\n  if [ (count $cmd) -gt 1 ]\n    if [ $argv[1] = $cmd[2] ]\n      return 0\n    end\n  end\n  return 1\nend\n\nfunction __fish_gopass_print_gpg_keys\n  gpg2 --list-keys | grep uid | sed 's/.*&lt;\\(.*\\)>/\\1/'\nend\n\nfunction __fish_gopass_print_entries\n  gopass ls --flat\nend\n\nfunction __fish_gopass_print_dir\n  for i in (gopass ls --flat)\n\t  echo (dirname $i)\n\tend | sort -u\nend\n\n# erase any existing completions for gopass\ncomplete -c $PROG -e\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -s c -l clip -r -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a age -d 'Command: age commands'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age' -a identities -d 'Subcommand: List age identities used for decryption and encryption'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command age identities -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a alias -d 'Command: Print domain aliases'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a audit -d 'Command: Decrypt all secrets and scan for weak or leaked passwords'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a cat -d 'Command: Decode and print content of a binary secret to stdout, or encode and insert from stdin'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a clone -d 'Command: Clone a password store from a git repository'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a completion -d 'Command: Bash and ZSH completion'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion' -a bash -d 'Subcommand: Source for auto completion in bash'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion bash -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion' -a zsh -d 'Subcommand: Source for auto completion in zsh'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion zsh -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion' -a fish -d 'Subcommand: Source for auto completion in fish'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion fish -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion' -a openbsdksh -d 'Subcommand: Source for auto completion in OpenBSD&#39;s ksh'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion openbsdksh -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion' -a help -d 'Subcommand: Shows a list of commands or help for one command'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command completion help -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a config -d 'Command: Display and edit the configuration file'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a convert -d 'Command: Convert a store to different backends'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a copy -d 'Command: Copy secrets from one location to another'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command copy' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a create -d 'Command: Easy creation of new secrets'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a delete -d 'Command: Remove one or many secrets from the store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command delete' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a edit -d 'Command: Edit new or existing secrets'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command edit' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a env -d 'Command: Run a subprocess with a pre-populated environment'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a find -d 'Command: Search for secrets'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a fsck -d 'Command: Check store integrity, clean up artifacts and possibly re-write secrets'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a fscopy -d 'Command: Copy files from or to the password store'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a fsmove -d 'Command: Move files from or to the password store'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a generate -d 'Command: Generate a new password'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command generate' -a \"(__fish_gopass_print_dir)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a git -d 'Command: Run a git command inside a password store: gopass git [--store=&lt;store&gt;] &lt;git-command&gt;'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a grep -d 'Command: Search for secrets files containing search-string when decrypted.'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a history -d 'Command: Show password history'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a init -d 'Command: Initialize new password store.'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a insert -d 'Command: Insert a new secret'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command insert' -a \"(__fish_gopass_print_dir)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a link -d 'Command: Create a symlink'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a list -d 'Command: List existing secrets'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command list' -a \"(__fish_gopass_print_dir)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a merge -d 'Command: Merge multiple secrets into one'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a mounts -d 'Command: Edit mounted stores'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts' -a add -d 'Subcommand: Mount a password store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l create -d \"Create a new store at this location\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts add -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts' -a remove -d 'Subcommand: Umount an mounted password store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts remove -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts' -a versions -d 'Subcommand: Display mount provider versions'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command mounts versions -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a move -d 'Command: Move secrets from one location to another'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command move' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a otp -d 'Command: Generate time- or hmac-based tokens'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command otp' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a process -d 'Command: Process a template file'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a pwgen -d 'Command: Generate passwords'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a rcs -d 'Command: Run a RCS command inside a password store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs' -a init -d 'Subcommand: Init RCS repo'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l store -d \"Store to operate on\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l name -d \"Git Author Name\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l email -d \"Git Author Email\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l storage -d \"Select storage backend [fossilfs gitfs]\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs init -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs' -a status -d 'Subcommand: RCS status'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l store -d \"Store to operate on\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command rcs status -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a recipients -d 'Command: Edit recipient permissions'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients' -a ack -d 'Subcommand: Update recipients.hash'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l store -d \"Store to operate on\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients ack -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients' -a add -d 'Subcommand: Add any number of Recipients to any store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l store -d \"Store to operate on\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l force -d \"Force adding non-existing keys\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients add -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients' -a remove -d 'Subcommand: Remove any number of Recipients from any store'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l store -d \"Store to operate on\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l force -d \"Force adding non-existing keys\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command recipients remove -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a setup -d 'Command: Initialize a new password store'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a show -d 'Command: Display the content of a secret'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command show' -a \"(__fish_gopass_print_entries)\"\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a sum -d 'Command: Compute the SHA256 checksum'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a sync -d 'Command: Sync all local stores with their remotes'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a templates -d 'Command: Edit templates'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates' -a show -d 'Subcommand: Show a secret template.'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates show -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates' -a edit -d 'Subcommand: Edit secret templates.'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates edit -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates' -a remove -d 'Subcommand: Remove secret templates.'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l yes -d \"Always answer yes to yes/no questions\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l clip -d \"Copy the password value into the clipboard\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l alsoclip -d \"Copy the password and show everything\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l qr -d \"Print the password as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l qrbody -d \"Print the body as a QR Code\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l unsafe -d \"Display unsafe content (e.g. the password) even if safecontent is enabled\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l password -d \"Display only the password. Takes precedence over all other flags.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l revision -d \"Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -&lt;N&gt; to select the Nth oldest revision of this entry.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l noparsing -d \"Do not parse the output.\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l nosync -d \"Disable auto-sync\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l chars -d \"Print specific characters from the secret\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l help -d \"show help\"'\ncomplete -c $PROG -f -n '__fish_gopass_uses_command templates remove -l version -d \"print the version\"'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a unclip -d 'Command: Internal command to clear clipboard'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a update -d 'Command: Check for updates'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a version -d 'Command: Display version'\ncomplete -c $PROG -f -n '__fish_gopass_needs_command' -a help -d 'Command: Shows a list of commands or help for one command'\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 3.6708984375,
          "content": "module github.com/gopasspw/gopass\n\ngo 1.23.2\n\nrequire (\n\tfilippo.io/age v1.2.1-0.20240618131852-7eedd929a6cf\n\tgithub.com/ProtonMail/go-crypto v1.1.2\n\tgithub.com/atotto/clipboard v0.1.4\n\tgithub.com/blang/semver/v4 v4.0.0\n\tgithub.com/caspr-io/yamlpath v0.0.0-20200722075116-502e8d113a9b\n\tgithub.com/cenkalti/backoff/v4 v4.3.0\n\tgithub.com/dustin/go-humanize v1.0.1\n\tgithub.com/ergochat/readline v0.1.3\n\tgithub.com/fatih/color v1.18.0\n\tgithub.com/godbus/dbus/v5 v5.1.0\n\tgithub.com/gokyle/twofactor v1.0.1\n\tgithub.com/google/go-cmp v0.6.0\n\tgithub.com/google/go-github/v61 v61.0.0\n\tgithub.com/gopasspw/gopass-hibp v1.15.14\n\tgithub.com/hashicorp/golang-lru/v2 v2.0.7\n\tgithub.com/jsimonetti/pwscheme v0.0.0-20220922140336-67a4d090f150\n\tgithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51\n\tgithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191\n\tgithub.com/makiuchi-d/gozxing v0.1.1\n\tgithub.com/martinhoefling/goxkcdpwgen v0.1.2-0.20231122080842-e51aa57005ca\n\tgithub.com/mattn/go-colorable v0.1.13\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/mattn/go-tty v0.0.7\n\tgithub.com/mitchellh/go-ps v1.0.0\n\tgithub.com/muesli/crunchy v0.4.0\n\tgithub.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354\n\tgithub.com/noborus/ov v0.37.0\n\tgithub.com/pquerna/otp v1.4.1-0.20241104074508-c95b6974670c\n\tgithub.com/schollz/closestmatch v0.0.0-20190308193919-1fbe626be92e\n\tgithub.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e\n\tgithub.com/stretchr/testify v1.10.0\n\tgithub.com/twpayne/go-pinentry/v4 v4.0.0\n\tgithub.com/urfave/cli/v2 v2.27.5\n\tgithub.com/xhit/go-str2duration/v2 v2.1.0\n\tgithub.com/zalando/go-keyring v0.2.6\n\tgithub.com/zeebo/blake3 v0.2.4\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/exp v0.0.0-20241108190413-2d47ceb2692f\n\tgolang.org/x/net v0.31.0\n\tgolang.org/x/oauth2 v0.24.0\n\tgolang.org/x/sys v0.28.0\n\tgolang.org/x/term v0.27.0\n\tgopkg.in/yaml.v3 v3.0.1\n)\n\nrequire (\n\tal.essio.dev/pkg/shellescape v1.5.1 // indirect\n\tcode.rocketnine.space/tslocum/cbind v0.1.5 // indirect\n\tfilippo.io/edwards25519 v1.1.0 // indirect\n\tgithub.com/boombuler/barcode v1.0.2 // indirect\n\tgithub.com/cloudflare/circl v1.5.0 // indirect\n\tgithub.com/cpuguy83/go-md2man/v2 v2.0.5 // indirect\n\tgithub.com/creack/pty v1.1.24 // indirect\n\tgithub.com/danieljoos/wincred v1.2.2 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/fsnotify/fsnotify v1.8.0 // indirect\n\tgithub.com/gdamore/encoding v1.0.1 // indirect\n\tgithub.com/gdamore/tcell/v2 v2.7.4 // indirect\n\tgithub.com/gen2brain/shm v0.1.1 // indirect\n\tgithub.com/google/go-querystring v1.1.0 // indirect\n\tgithub.com/jezek/xgb v1.1.1 // indirect\n\tgithub.com/jwalton/gchalk v1.3.0 // indirect\n\tgithub.com/jwalton/go-supportscolor v1.2.0 // indirect\n\tgithub.com/kjk/lzmadec v0.0.0-20210713164611-19ac3ee91a71 // indirect\n\tgithub.com/klauspost/compress v1.17.11 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.9 // indirect\n\tgithub.com/kr/text v0.2.0 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/lxn/win v0.0.0-20210218163916-a377121e959e // indirect\n\tgithub.com/mattn/go-runewidth v0.0.16 // indirect\n\tgithub.com/noborus/guesswidth v0.4.0 // indirect\n\tgithub.com/pierrec/lz4/v4 v4.1.21 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/rs/zerolog v1.33.0 // indirect\n\tgithub.com/russross/blackfriday/v2 v2.1.0 // indirect\n\tgithub.com/ulikunitz/xz v0.5.12 // indirect\n\tgithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/text v0.21.0 // indirect\n\tgolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da // indirect\n\tgopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect\n\trsc.io/qr v0.2.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 26.638671875,
          "content": "al.essio.dev/pkg/shellescape v1.5.1 h1:86HrALUujYS/h+GtqoB26SBEdkWfmMI6FubjXlsXyho=\nal.essio.dev/pkg/shellescape v1.5.1/go.mod h1:6sIqp7X2P6mThCQ7twERpZTuigpr6KbZWtls1U8I890=\nc2sp.org/CCTV/age v0.0.0-20240306222714-3ec4d716e805 h1:u2qwJeEvnypw+OCPUHmoZE3IqwfuN5kgDfo5MLzpNM0=\nc2sp.org/CCTV/age v0.0.0-20240306222714-3ec4d716e805/go.mod h1:FomMrUJ2Lxt5jCLmZkG3FHa72zUprnhd3v/Z18Snm4w=\ncode.rocketnine.space/tslocum/cbind v0.1.5 h1:i6NkeLLNPNMS4NWNi3302Ay3zSU6MrqOT+yJskiodxE=\ncode.rocketnine.space/tslocum/cbind v0.1.5/go.mod h1:LtfqJTzM7qhg88nAvNhx+VnTjZ0SXBJtxBObbfBWo/M=\nfilippo.io/age v1.2.1-0.20240618131852-7eedd929a6cf h1:3hBTgZCvtC31eCc8CWH0w+55Yn/R/HI3Of4Zb5TAuWU=\nfilippo.io/age v1.2.1-0.20240618131852-7eedd929a6cf/go.mod h1:JL9ew2lTN+Pyft4RiNGguFfOpewKwSHm5ayKD/A4004=\nfilippo.io/edwards25519 v1.1.0 h1:FNf4tywRC1HmFuKW5xopWpigGjJKiJSV0Cqo0cJWDaA=\nfilippo.io/edwards25519 v1.1.0/go.mod h1:BxyFTGdWcka3PhytdK4V28tE5sGfRvvvRV7EaN4VDT4=\ngithub.com/ProtonMail/go-crypto v1.1.2 h1:A7JbD57ThNqh7XjmHE+PXpQ3Dqt3BrSAC0AL0Go3KS0=\ngithub.com/ProtonMail/go-crypto v1.1.2/go.mod h1:rA3QumHc/FZ8pAHreoekgiAbzpNsfQAosU5td4SnOrE=\ngithub.com/alecthomas/assert/v2 v2.2.2 h1:Z/iVC0xZfWTaFNE6bA3z07T86hd45Xe2eLt6WVy2bbk=\ngithub.com/alecthomas/assert/v2 v2.2.2/go.mod h1:pXcQ2Asjp247dahGEmsZ6ru0UVwnkhktn7S0bBDLxvQ=\ngithub.com/alecthomas/repr v0.2.0 h1:HAzS41CIzNW5syS8Mf9UwXhNH1J9aix/BvDRf1Ml2Yk=\ngithub.com/alecthomas/repr v0.2.0/go.mod h1:Fr0507jx4eOXV7AlPV6AVZLYrLIuIeSOWtW57eE/O/4=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/blang/semver/v4 v4.0.0 h1:1PFHFE6yCCTv8C1TeyNNarDzntLi7wMI5i/pzqYIsAM=\ngithub.com/blang/semver/v4 v4.0.0/go.mod h1:IbckMUScFkM3pff0VJDNKRiT6TG/YpiHIM2yvyW5YoQ=\ngithub.com/boombuler/barcode v1.0.1-0.20190219062509-6c824513bacc/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=\ngithub.com/boombuler/barcode v1.0.2 h1:79yrbttoZrLGkL/oOI8hBrUKucwOL0oOjUgEguGMcJ4=\ngithub.com/boombuler/barcode v1.0.2/go.mod h1:paBWMcWSl3LHKBqUq+rly7CNSldXjb2rDl3JlRe0mD8=\ngithub.com/caspr-io/yamlpath v0.0.0-20200722075116-502e8d113a9b h1:2K3B6Xm7/lnhOugeGB3nIk50bZ9zhuJvXCEfUuL68ik=\ngithub.com/caspr-io/yamlpath v0.0.0-20200722075116-502e8d113a9b/go.mod h1:4rP9T6iHCuPAIDKdNaZfTuuqSIoQQvFctNWIAUI1rlg=\ngithub.com/cenkalti/backoff/v4 v4.3.0 h1:MyRJ/UdXutAwSAT+s3wNd7MfTIcy71VQueUuFK343L8=\ngithub.com/cenkalti/backoff/v4 v4.3.0/go.mod h1:Y3VNntkOUPxTVeUxJ/G5vcM//AlwfmyYozVcomhLiZE=\ngithub.com/cloudflare/circl v1.5.0 h1:hxIWksrX6XN5a1L2TI/h53AGPhNHoUBo+TD1ms9+pys=\ngithub.com/cloudflare/circl v1.5.0/go.mod h1:uddAzsPgqdMAYatqJ0lsjX1oECcQLIlRpzZh3pJrofs=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.5 h1:ZtcqGrnekaHpVLArFSe4HK5DoKx1T0rq2DwVB0alcyc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.5/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\ngithub.com/creack/pty v1.1.24 h1:bJrF4RRfyJnbTJqzRLHzcGaZK1NeM5kTC9jGgovnR1s=\ngithub.com/creack/pty v1.1.24/go.mod h1:08sCNb52WyoAwi2QDyzUCTgcvVFhUzewun7wtTfvcwE=\ngithub.com/danieljoos/wincred v1.2.2 h1:774zMFJrqaeYCK2W57BgAem/MLi6mtSE47MB6BOJ0i0=\ngithub.com/danieljoos/wincred v1.2.2/go.mod h1:w7w4Utbrz8lqeMbDAK0lkNJUv5sAOkFi7nd/ogr0Uh8=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/dustin/go-humanize v1.0.1 h1:GzkhY7T5VNhEkwH0PVJgjz+fX1rhBrR7pRT3mDkpeCY=\ngithub.com/dustin/go-humanize v1.0.1/go.mod h1:Mu1zIs6XwVuF/gI1OepvI0qD18qycQx+mFykh5fBlto=\ngithub.com/ergochat/readline v0.1.3 h1:/DytGTmwdUJcLAe3k3VJgowh5vNnsdifYT6uVaf4pSo=\ngithub.com/ergochat/readline v0.1.3/go.mod h1:o3ux9QLHLm77bq7hDB21UTm6HlV2++IPDMfIfKDuOgY=\ngithub.com/fatih/color v1.18.0 h1:S8gINlzdQ840/4pfAwic/ZE0djQEH3wM94VfqLTZcOM=\ngithub.com/fatih/color v1.18.0/go.mod h1:4FelSpRwEGDpQ12mAdzqdOukCy4u8WUtOY6lkT/6HfU=\ngithub.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=\ngithub.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/encoding v1.0.1 h1:YzKZckdBL6jVt2Gc+5p82qhrGiqMdG/eNs6Wy0u3Uhw=\ngithub.com/gdamore/encoding v1.0.1/go.mod h1:0Z0cMFinngz9kS1QfMjCP8TY7em3bZYeeklsSDPivEo=\ngithub.com/gdamore/tcell/v2 v2.2.0/go.mod h1:cTTuF84Dlj/RqmaCIV5p4w8uG1zWdk0SF6oBpwHp4fU=\ngithub.com/gdamore/tcell/v2 v2.7.4 h1:sg6/UnTM9jGpZU+oFYAsDahfchWAFW8Xx2yFinNSAYU=\ngithub.com/gdamore/tcell/v2 v2.7.4/go.mod h1:dSXtXTSK0VsW1biw65DZLZ2NKr7j0qP/0J7ONmsraWg=\ngithub.com/gen2brain/shm v0.1.1 h1:1cTVA5qcsUFixnDHl14TmRoxgfWEEZlTezpUj1vm5uQ=\ngithub.com/gen2brain/shm v0.1.1/go.mod h1:UgIcVtvmOu+aCJpqJX7GOtiN7X2ct+TKLg4RTxwPIUA=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/godbus/dbus/v5 v5.1.0 h1:4KLkAxT3aOY8Li4FRJe/KvhoNFFxo0m6fNuFUO8QJUk=\ngithub.com/godbus/dbus/v5 v5.1.0/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/gokyle/twofactor v1.0.1 h1:uRhvx0S4Hb82RPIDALnf7QxbmPL49LyyaCkJDpWx+Ek=\ngithub.com/gokyle/twofactor v1.0.1/go.mod h1:4gxzH1eaE/F3Pct/sCDNOylP0ClofUO5j4XZN9tKtLE=\ngithub.com/golang/mock v1.6.0 h1:ErTB+efbowRARo13NNdxyJji2egdxLGQhRaY+DUumQc=\ngithub.com/golang/mock v1.6.0/go.mod h1:p6yTPP+5HYm5mzsMV8JkE6ZKdX+/wYM6Hr+LicevLPs=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.5.2/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/go-github/v61 v61.0.0 h1:VwQCBwhyE9JclCI+22/7mLB1PuU9eowCXKY5pNlu1go=\ngithub.com/google/go-github/v61 v61.0.0/go.mod h1:0WR+KmsWX75G2EbpyGsGmradjo3IiciuI4BmdVCobQY=\ngithub.com/google/go-querystring v1.1.0 h1:AnCroh3fv4ZBgVIf1Iwtovgjaw/GiKJo8M8yD/fhyJ8=\ngithub.com/google/go-querystring v1.1.0/go.mod h1:Kcdr2DB4koayq7X8pmAG4sNG59So17icRSOU623lUBU=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510 h1:El6M4kTTCOh6aBiKaUGG7oYTSPP8MxqL4YI3kZKwcP4=\ngithub.com/google/shlex v0.0.0-20191202100458-e7afc7fbc510/go.mod h1:pupxD2MaaD3pAXIBCelhxNneeOaAeabZDe5s4K6zSpQ=\ngithub.com/gopasspw/gopass-hibp v1.15.14 h1:2FoUREfJNQTV0Thrnl9WABjODDGpCqaI1s9vMzYLly8=\ngithub.com/gopasspw/gopass-hibp v1.15.14/go.mod h1:xVz4578yPIX+RQQwG0l5VDaE9s+9eMyHzVOcN1NvelI=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7 h1:a+bsQ5rvGLjzHuww6tVxozPZFVghXaHOwFs4luLUK2k=\ngithub.com/hashicorp/golang-lru/v2 v2.0.7/go.mod h1:QeFd9opnmA6QUJc5vARoKUSoFhyfM2/ZepoAG6RGpeM=\ngithub.com/hashicorp/hcl v1.0.0 h1:0Anlzjpi4vEasTeNFn2mLJgTSwt0+6sfsiTG8qcWGx4=\ngithub.com/hashicorp/hcl v1.0.0/go.mod h1:E5yfLk+7swimpb2L/Alb/PJmXilQ/rhwaUYs4T20WEQ=\ngithub.com/hexops/gotextdiff v1.0.3 h1:gitA9+qJrrTCsiCl7+kh75nPqQt1cx4ZkudSTLoUqJM=\ngithub.com/hexops/gotextdiff v1.0.3/go.mod h1:pSWU5MAI3yDq+fZBTazCSJysOMbxWL1BSow5/V2vxeg=\ngithub.com/jezek/xgb v1.1.1 h1:bE/r8ZZtSv7l9gk6nU0mYx51aXrvnyb44892TwSaqS4=\ngithub.com/jezek/xgb v1.1.1/go.mod h1:nrhwO0FX/enq75I7Y7G8iN1ubpSGZEiA3v9e9GyRFlk=\ngithub.com/jsimonetti/pwscheme v0.0.0-20220922140336-67a4d090f150 h1:ta6N7DaOQEACq28cLa0iRqXIbchByN9Lfll08CT2GBc=\ngithub.com/jsimonetti/pwscheme v0.0.0-20220922140336-67a4d090f150/go.mod h1:SiNTKDgjKQORnazFVHXhpny7UtU0iJOqtxd7R7sCfDI=\ngithub.com/jwalton/gchalk v1.3.0 h1:uTfAaNexN8r0I9bioRTksuT8VGjrPs9YIXR1PQbtX/Q=\ngithub.com/jwalton/gchalk v1.3.0/go.mod h1:ytRlj60R9f7r53IAElbpq4lVuPOPNg2J4tJcCxtFqr8=\ngithub.com/jwalton/go-supportscolor v1.1.0/go.mod h1:hFVUAZV2cWg+WFFC4v8pT2X/S2qUUBYMioBD9AINXGs=\ngithub.com/jwalton/go-supportscolor v1.2.0 h1:g6Ha4u7Vm3LIsQ5wmeBpS4gazu0UP1DRDE8y6bre4H8=\ngithub.com/jwalton/go-supportscolor v1.2.0/go.mod h1:hFVUAZV2cWg+WFFC4v8pT2X/S2qUUBYMioBD9AINXGs=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51 h1:Z9n2FFNUXsshfwJMBgNA0RU6/i7WVaAegv3PtuIHPMs=\ngithub.com/kballard/go-shellquote v0.0.0-20180428030007-95032a82bc51/go.mod h1:CzGEWj7cYgsdH8dAjBGEr58BoE7ScuLd+fwFZ44+/x8=\ngithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191 h1:5UHVWNX1qrIbNw7OpKbxe5bHkhHRk3xRKztMjERuCsU=\ngithub.com/kbinani/screenshot v0.0.0-20240820160931-a8a2c5d0e191/go.mod h1:Pmpz2BLf55auQZ67u3rvyI2vAQvNetkK/4zYUmpauZQ=\ngithub.com/kjk/lzmadec v0.0.0-20210713164611-19ac3ee91a71 h1:TYp9Fj0apeZMWentXRaFM6B0ixdFefrlgY8n8XYEz1s=\ngithub.com/kjk/lzmadec v0.0.0-20210713164611-19ac3ee91a71/go.mod h1:2zRkQCuw/eK6cqkYAeNqyBU7JKa2Gcq40BZ9GSJbmfE=\ngithub.com/klauspost/compress v1.17.11 h1:In6xLpyWOi1+C7tXUUWv2ot1QvBjxevKAaI6IXrJmUc=\ngithub.com/klauspost/compress v1.17.11/go.mod h1:pMDklpSncoRMuLFrf1W9Ss9KT+0rH90U12bZKk7uwG0=\ngithub.com/klauspost/cpuid/v2 v2.2.9 h1:66ze0taIn2H33fBvCkXuv9BmCwDfafmiIVpKV9kKGuY=\ngithub.com/klauspost/cpuid/v2 v2.2.9/go.mod h1:rqkxqrZ1EhYM9G+hXH7YdowN5R5RGN6NK4QwQ3WMXF8=\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/lucasb-eyer/go-colorful v1.0.3/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/lxn/win v0.0.0-20210218163916-a377121e959e h1:H+t6A/QJMbhCSEH5rAuRxh+CtW96g0Or0Fxa9IKr4uc=\ngithub.com/lxn/win v0.0.0-20210218163916-a377121e959e/go.mod h1:KxxjdtRkfNoYDCUP5ryK7XJJNTnpC8atvtmTheChOtk=\ngithub.com/magiconair/properties v1.8.7 h1:IeQXZAiQcpL9mgcAe1Nu6cX9LLw6ExEHKjN0VQdvPDY=\ngithub.com/magiconair/properties v1.8.7/go.mod h1:Dhd985XPs7jluiymwWYZ0G4Z61jb3vdS329zhj2hYo0=\ngithub.com/makiuchi-d/gozxing v0.1.1 h1:xxqijhoedi+/lZlhINteGbywIrewVdVv2wl9r5O9S1I=\ngithub.com/makiuchi-d/gozxing v0.1.1/go.mod h1:eRIHbOjX7QWxLIDJoQuMLhuXg9LAuw6znsUtRkNw9DU=\ngithub.com/martinhoefling/goxkcdpwgen v0.1.2-0.20231122080842-e51aa57005ca h1:jV6vw7U2RoS1sI7f6f12/wsCwMjADZ/xUxi/lhUqjV8=\ngithub.com/martinhoefling/goxkcdpwgen v0.1.2-0.20231122080842-e51aa57005ca/go.mod h1:IKRlPM0t4ZmK9YZ33QZ2hB1DcSY8WnQedKRDyYeNRp4=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.10/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-runewidth v0.0.16 h1:E5ScNMtiwvlvB5paMFdw9p4kSQzbXFikJ5SQO6TULQc=\ngithub.com/mattn/go-runewidth v0.0.16/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/mattn/go-tty v0.0.7 h1:KJ486B6qI8+wBO7kQxYgmmEFDaFEE96JMBQ7h400N8Q=\ngithub.com/mattn/go-tty v0.0.7/go.mod h1:f2i5ZOvXBU/tCABmLmOfzLz9azMo5wdAaElRNnJKr+k=\ngithub.com/mitchellh/go-ps v1.0.0 h1:i6ampVEEF4wQFF+bkYfwYgY+F/uYJDktmvLPf7qIgjc=\ngithub.com/mitchellh/go-ps v1.0.0/go.mod h1:J4lOc8z8yJs6vUwklHw2XEIiT4z4C40KtWVN3nvg8Pg=\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\ngithub.com/muesli/crunchy v0.4.0 h1:qdiml8gywULHBsztiSAf6rrE6EyuNasNKZ104mAaahM=\ngithub.com/muesli/crunchy v0.4.0/go.mod h1:9k4x6xdSbb7WwtAVy0iDjaiDjIk6Wa5AgUIqp+HqOpU=\ngithub.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354 h1:4kuARK6Y6FxaNu/BnU2OAaLF86eTVhP2hjTB6iMvItA=\ngithub.com/nbutton23/zxcvbn-go v0.0.0-20210217022336-fa2cb2858354/go.mod h1:KSVJerMDfblTH7p5MZaTt+8zaT2iEk3AkVb9PQdZuE8=\ngithub.com/noborus/guesswidth v0.4.0 h1:+PPh+Z+GM4mKmVrhYR4lpjeyBuLMSVo2arM+VErdHIc=\ngithub.com/noborus/guesswidth v0.4.0/go.mod h1:ghA6uh9RcK+uSmaDDmBMj/tRZ3BSpspDP6DMF5Xk3bc=\ngithub.com/noborus/ov v0.37.0 h1:I8+5OmV+yC71OrDtY1dfO2UmZrSQ7ERDTSo6M2Gbie0=\ngithub.com/noborus/ov v0.37.0/go.mod h1:cac6+F9N4F0rBKu4jWKiqH0n2lJGiNQpO2OYNQTttmA=\ngithub.com/pelletier/go-toml/v2 v2.2.2 h1:aYUidT7k73Pcl9nb2gScu7NSrKCSHIDE89b3+6Wq+LM=\ngithub.com/pelletier/go-toml/v2 v2.2.2/go.mod h1:1t835xjRzz80PqgE6HHgN2JOsmgYu/h4qDAS4n929Rs=\ngithub.com/pierrec/lz4/v4 v4.1.21 h1:yOVMLb6qSIDP67pl/5F7RepeKYu/VmTyEXvuMI5d9mQ=\ngithub.com/pierrec/lz4/v4 v4.1.21/go.mod h1:gZWDp/Ze/IJXGXf23ltt2EXimqmTUXEy0GFuRQyBid4=\ngithub.com/pkg/errors v0.8.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/pquerna/otp v1.4.1-0.20241104074508-c95b6974670c h1:13EElcQMk7NX3GLuq2eUkHPqrsJ2GNhwnAXqTjfE8II=\ngithub.com/pquerna/otp v1.4.1-0.20241104074508-c95b6974670c/go.mod h1:dkJfzwRKNiegxyNb54X/3fLwhCynbMspSyWKnvi1AEg=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rogpeppe/go-internal v1.12.0 h1:exVL4IDcn6na9z1rAb56Vxr+CgyK3nn3O+epU5NdKM8=\ngithub.com/rogpeppe/go-internal v1.12.0/go.mod h1:E+RYuTGaKKdloAfM02xzb0FW3Paa99yedzYV+kq4uf4=\ngithub.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.33.0 h1:1cU2KZkvPxNyfgEmhHAz/1A9Bz+llsdYzklWFzgp0r8=\ngithub.com/rs/zerolog v1.33.0/go.mod h1:/7mN4D5sKwJLZQ2b/znpjC3/GQWY/xaDXUM0kKWRHss=\ngithub.com/russross/blackfriday/v2 v2.1.0 h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/sagikazarmark/locafero v0.6.0 h1:ON7AQg37yzcRPU69mt7gwhFEBwxI6P9T4Qu3N51bwOk=\ngithub.com/sagikazarmark/locafero v0.6.0/go.mod h1:77OmuIc6VTraTXKXIs/uvUxKGUXjE1GbemJYHqdNjX0=\ngithub.com/sagikazarmark/slog-shim v0.1.0 h1:diDBnUNK9N/354PgrxMywXnAwEr1QZcOr6gto+ugjYE=\ngithub.com/sagikazarmark/slog-shim v0.1.0/go.mod h1:SrcSrq8aKtyuqEI1uvTDTK1arOWRIczQRv+GVI1AkeQ=\ngithub.com/schollz/closestmatch v0.0.0-20190308193919-1fbe626be92e h1:HFUDYOpUVZ0oTXeZy2A59Lkf69SsOF03Lg1GsI3Xh9o=\ngithub.com/schollz/closestmatch v0.0.0-20190308193919-1fbe626be92e/go.mod h1:RtP1ddjLong6gTkbtmuhtR2uUrrJOpYzYRvbcPAid+g=\ngithub.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e h1:MRM5ITcdelLK2j1vwZ3Je0FKVCfqOLp5zO6trqMLYs0=\ngithub.com/skip2/go-qrcode v0.0.0-20200617195104-da1b6568686e/go.mod h1:XV66xRDqSt+GTGFMVlhk3ULuV0y9ZmzeVGR4mloJI3M=\ngithub.com/sourcegraph/conc v0.3.0 h1:OQTbbt6P72L20UqAkXXuLOj79LfEanQ+YQFNpLA9ySo=\ngithub.com/sourcegraph/conc v0.3.0/go.mod h1:Sdozi7LEKbFPqYX2/J+iBAM6HpqSLTASQIKqDmF7Mt0=\ngithub.com/spf13/afero v1.11.0 h1:WJQKhtpdm3v2IzqG8VMqrr6Rf3UYpEF239Jy9wNepM8=\ngithub.com/spf13/afero v1.11.0/go.mod h1:GH9Y3pIexgf1MTIWtNGyogA5MwRIDXGUr+hbWNoBjkY=\ngithub.com/spf13/cast v1.7.0 h1:ntdiHjuueXFgm5nzDRdOS4yfT43P5Fnud6DH50rz/7w=\ngithub.com/spf13/cast v1.7.0/go.mod h1:ancEpBxwJDODSW/UG4rDrAqiKolqNNh2DX3mk86cAdo=\ngithub.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/spf13/viper v1.19.0 h1:RWq5SEjt8o25SROyN3z2OrDB9l7RPd3lwTWU8EcEdcI=\ngithub.com/spf13/viper v1.19.0/go.mod h1:GQUN9bilAbhU/jgc1bKs99f/suXKeUMct8Adx5+Ntkg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.5.2 h1:xuMeJ0Sdp5ZMRXx/aWO6RZxdr3beISkG5/G/aIRr3pY=\ngithub.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=\ngithub.com/stretchr/testify v1.1.4/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.10.0 h1:Xv5erBjTwe/5IxqUQTdXv5kgmIvbHo3QQyRwhJsOfJA=\ngithub.com/stretchr/testify v1.10.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/subosito/gotenv v1.6.0 h1:9NlTDc1FTs4qu0DDq7AEtTPNw6SVm7uBMsUCUjABIf8=\ngithub.com/subosito/gotenv v1.6.0/go.mod h1:Dk4QP5c2W3ibzajGcXpNraDfq2IrhjMIvMSWPKKo0FU=\ngithub.com/twpayne/go-pinentry/v4 v4.0.0 h1:8WcNa+UDVRzz7y9OEEU/nRMX+UGFPCAvl5XsqWRxTY4=\ngithub.com/twpayne/go-pinentry/v4 v4.0.0/go.mod h1:aXvy+awVXqdH+GS0ddQ7AKHZ3tXM6fJ2NK+e16p47PI=\ngithub.com/ulikunitz/xz v0.5.12 h1:37Nm15o69RwBkXM0J6A5OlE67RZTfzUxTj8fB3dfcsc=\ngithub.com/ulikunitz/xz v0.5.12/go.mod h1:nbz6k7qbPmH4IRqmfOplQw/tblSgqTqBwxkY0oWt/14=\ngithub.com/urfave/cli/v2 v2.27.5 h1:WoHEJLdsXr6dDWoJgMq/CboDmyY/8HMMH1fTECbih+w=\ngithub.com/urfave/cli/v2 v2.27.5/go.mod h1:3Sevf16NykTbInEnD0yKkjDAeZDS0A6bzhBH5hrMvTQ=\ngithub.com/xhit/go-str2duration/v2 v2.1.0 h1:lxklc02Drh6ynqX+DdPyp5pCKLUQpRT8bp8Ydu2Bstc=\ngithub.com/xhit/go-str2duration/v2 v2.1.0/go.mod h1:ohY8p+0f07DiV6Em5LKB0s2YpLtXVyJfNt1+BlmyAsU=\ngithub.com/xrash/smetrics v0.0.0-20170218160415-a3153f7040e9/go.mod h1:N3UwUGtsrSj3ccvlPHLoLsHnpR27oXr4ZE984MbSER8=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1 h1:gEOO8jv9F4OT7lGCjxCBTO/36wtF6j2nSip77qHd4x4=\ngithub.com/xrash/smetrics v0.0.0-20240521201337-686a1a2994c1/go.mod h1:Ohn+xnUBiLI6FVj/9LpzZWtj1/D6lUovWYBkxHVV3aM=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngithub.com/zalando/go-keyring v0.2.6 h1:r7Yc3+H+Ux0+M72zacZoItR3UDxeWfKTcabvkI8ua9s=\ngithub.com/zalando/go-keyring v0.2.6/go.mod h1:2TCrxYrbUNYfNS/Kgy/LSrkSQzZ5UPVH85RwfczwvcI=\ngithub.com/zeebo/assert v1.1.0 h1:hU1L1vLTHsnO8x8c9KAR5GmM5QscxHg5RNU5z5qbUWY=\ngithub.com/zeebo/assert v1.1.0/go.mod h1:Pq9JiuJQpG8JLJdtkwrJESF0Foym2/D9XMU5ciN/wJ0=\ngithub.com/zeebo/blake3 v0.2.4 h1:KYQPkhpRtcqh0ssGYcKLG1JYvddkEA8QwCM/yBqhaZI=\ngithub.com/zeebo/blake3 v0.2.4/go.mod h1:7eeQ6d2iXWRGF6npfaxl2CU+xy2Fjo2gxeyZGCRUjcE=\ngithub.com/zeebo/pcg v1.0.1 h1:lyqfGeWiv4ahac6ttHs+I5hwtH/+1mrhlCtVNQM2kHo=\ngithub.com/zeebo/pcg v1.0.1/go.mod h1:09F0S9iiKrwn9rlI5yjLkmrug154/YRW6KnnXVDM/l4=\ngo.uber.org/multierr v1.11.0 h1:blXXJkSxSSfBVBlC76pxqeO+LN3aDfLQo+309xJstO0=\ngo.uber.org/multierr v1.11.0/go.mod h1:20+QtiLqy0Nd6FdQB9TLXag12DsQkrbs3htMFfDN80Y=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220919173607-35f4265a4bc0/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/exp v0.0.0-20241108190413-2d47ceb2692f h1:XdNn9LlyWAhLVp6P/i8QYBW+hlyhrhei9uErw2B5GJo=\ngolang.org/x/exp v0.0.0-20241108190413-2d47ceb2692f/go.mod h1:D5SMRVC3C2/4+F/DB1wZsLRnSNimn2Sp/NPsCrsv8ak=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.0.0-20220921155015-db77216a4ee9/go.mod h1:YDH+HFinaLZZlnHAfSS6ZXJJ9M9t4Dl22yv3iI2vPwk=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=\ngolang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201018230417-eeed37f84f13/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210220050731-9a76102bfb43/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210309040221-94ec62e08169/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20211004093028-2c5d950f24ef/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220728004956-3c1f35247d10/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220919091848-fb04ddd9f9c8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20201210144234-2321bbc49cbf/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210220032956-6a3ed077a48d/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.0.0-20220919170432-7a66f970e087/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=\ngolang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.5/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190624222133-a101b041ded4/go.mod h1:/rFqwRUd4F7ZHNgwSSTFct+R/Kf4OFW1sUzUTQQTgfc=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da h1:noIWHXmPHxILtqtCOPIhSt0ABwskkZKjD3bXGnZGpNY=\ngolang.org/x/xerrors v0.0.0-20240903120638-7835f813f4da/go.mod h1:NDW/Ps6MPRej6fsCIbMTohpP40sJ/P/vI1MoTEGwX90=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/ini.v1 v1.67.0 h1:Dgnx+6+nfE+IfzjUEISNeydPJh9AXNNsWbGP9KzCsOA=\ngopkg.in/ini.v1 v1.67.0/go.mod h1:pNLf8WUiyNEtQjuu5G5vTm06TEv9tsIgeAvK8hOrP4k=\ngopkg.in/yaml.v3 v3.0.0-20200121175148-a6ecf24a6d71/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngotest.tools/v3 v3.0.2 h1:kG1BFyqVHuQoVQiR1bWGnfz/fmHvvuiSPIV7rvl360E=\ngotest.tools/v3 v3.0.2/go.mod h1:3SzNCllyD9/Y+b5r9JIKQ474KzkZyqLqEfYqMsX94Bk=\nrsc.io/qr v0.2.0 h1:6vBLea5/NRMVTz8V66gipeLycZMl/+UlFmk8DvqQ6WY=\nrsc.io/qr v0.2.0/go.mod h1:IF+uZjkb9fqyeF/4tlBoynqmQxUoPfWEKh921coOuXs=\n"
        },
        {
          "name": "gopass.1",
          "type": "blob",
          "size": 17.2255859375,
          "content": "\n.TH GOPASS \"1\" \"November 2024\" \"gopass (github.com/gopasspw/gopass) 1.15.15\" \"User Commands\"\n.SH NAME\ngopass - The standard Unix password manager\n.SH SYNOPSIS\n.B gopass\n[\\fI\\,global options\\/\\fR] \\fI\\,command\\/\\fR [\\fI\\,command options\\/\\fR] [\\fI,arguments\\/\\fR...]\n.SH GLOBAL OPTIONS\n\n.TP\n\\fB\\-\\-alsoclip\\fR,\n\\fB\\-C\\fR,\nCopy the password and show everything\n.TP\n\\fB\\-\\-chars\\fR,\nPrint specific characters from the secret\n.TP\n\\fB\\-\\-clip\\fR,\n\\fB\\-c\\fR,\nCopy the password value into the clipboard\n.TP\n\\fB\\-\\-noparsing\\fR,\n\\fB\\-n\\fR,\nDo not parse the output.\n.TP\n\\fB\\-\\-nosync\\fR,\nDisable auto-sync\n.TP\n\\fB\\-\\-password\\fR,\n\\fB\\-o\\fR,\nDisplay only the password. Takes precedence over all other flags.\n.TP\n\\fB\\-\\-qr\\fR,\nPrint the password as a QR Code\n.TP\n\\fB\\-\\-qrbody\\fR,\nPrint the body as a QR Code\n.TP\n\\fB\\-\\-revision\\fR,\n\\fB\\-r\\fR,\nShow a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -<N> to select the Nth oldest revision of this entry.\n.TP\n\\fB\\-\\-unsafe\\fR,\n\\fB\\-u\\fR,\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nDisplay unsafe content (e.g. the password) even if safecontent is enabled\n.TP\n\\fB\\-\\-yes\\fR,\n\\fB\\-y\\fR,\nAlways answer yes to yes/no questions\n.SH COMMANDS\n\n.SS age\nage commands\n\nBuilt-in commands for the age backend.\nThese allow limited interactions with the gopass specific age identities.\n Added identities are automatically added as recipient to your secrets when encrypting, but not toyour recipients, make sure to keep your recipients and identities in sync as you want to.\nAll age identities, including plugin ones should be supported. We also still support githubidentities despite them being deprecated by age, we do so by falling back to the ssh identitiesfor these and keeping a local cache of ssh keys for a given github identity.\n.SS alias\nPrint domain aliases\n\nPrint defined domain aliases.\n.SS audit\nDecrypt all secrets and scan for weak or leaked passwords\n\nThis command decrypts all secrets and checks for common flaws and (optionally) against a list of previously leaked passwords.\n\n.B Flags\n.TP\n\\fB\\-\\-format\\fR,\nOutput format. text, csv or html. Default: text\n.TP\n\\fB\\-\\-full\\fR,\nPrint full details of all findings. Default: false\n.TP\n\\fB\\-\\-output-file\\fR,\n\\fB\\-o\\fR,\nOutput filename. Used for csv and html\n.TP\n\\fB\\-\\-summary\\fR,\nPrint a summary of the audit results. Default: true (print summary)\n.TP\n\\fB\\-\\-template\\fR,\nHTML template. If not set use the built-in default.\n.SS cat\nDecode and print content of a binary secret to stdout, or encode and insert from stdin\n\nThis command is similar to the way cat works on the command line. It can either be used to retrieve the decoded content of a secret similar to 'cat file' or vice versa to encode the content from STDIN to a secret.\n.SS clone\nClone a password store from a git repository\n\nThis command clones an existing password store from a git remote to a local password store. Can be either used to initialize a new root store or to add a new mounted sub-store. Needs at least one argument (git URL) to clone from. Accepts a second argument (mount location) to clone and mount a sub-store, e.g. 'gopass clone git@example.com/store.git foo/bar'\n\n.B Flags\n.TP\n\\fB\\-\\-check-keys\\fR,\nCheck for valid decryption keys. Generate new keys if none are found.\n.TP\n\\fB\\-\\-crypto\\fR,\nSelect crypto backend [age gpgcli plain]\n.TP\n\\fB\\-\\-path\\fR,\nPath to clone the repo to\n.TP\n\\fB\\-\\-storage\\fR,\nSelect storage backend [fossilfs gitfs]\n.SS config\nDisplay and edit the configuration file\n\nThis command allows for easy printing and editing of the configuration. Without argument, the entire config is printed. With a single argument, a single key can be printed. With two arguments a setting specified by key can be set to value.\n\n.B Flags\n.TP\n\\fB\\-\\-store\\fR,\nSet options to a specific store\n.SS convert\nConvert a store to different backends\n\nConvert a store to a different set of backends\n\n.B Flags\n.TP\n\\fB\\-\\-crypto\\fR,\nWhich crypto backend? [age gpgcli plain]\n.TP\n\\fB\\-\\-move\\fR,\nReplace store?\n.TP\n\\fB\\-\\-storage\\fR,\nWhich storage backend? [fossilfs fs gitfs]\n.TP\n\\fB\\-\\-store\\fR,\nSpecify which store to convert\n.SS copy\nCopy secrets from one location to another\n\nThis command copies an existing secret in the store to another location. This also works across different sub-stores. If the source is a directory it will automatically copy recursively. In that case, the source directory is re-created at the destination if no trailing slash is found, otherwise the contents are flattened (similar to rsync).\n\n.B Flags\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nForce to copy the secret and overwrite existing one\n.SS create\nEasy creation of new secrets\n\nThis command starts a wizard to aid in creation of new secrets.\n\n.B Flags\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nForce path selection\n.TP\n\\fB\\-\\-store\\fR,\n\\fB\\-s\\fR,\nWhich store to use\n.SS delete\nRemove one or many secrets from the store\n\nThis command removes secrets. It can work recursively on folders. Recursing across stores is purposefully not supported.\n\n.B Flags\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nForce to delete the secret\n.TP\n\\fB\\-\\-recursive\\fR,\n\\fB\\-r\\fR,\nRecursive delete files and folders\n.SS edit\nEdit new or existing secrets\n\nUse this command to insert a new secret or edit an existing one using your $EDITOR. It will attempt to create a secure temporary directory for storing your secret while the editor is accessing it. Please make sure your editor doesn't leak sensitive data to other locations while editing.\nNote: If $EDITOR is not set we will try 'editor'. If that's not available either we fall back to 'vi'. Consider using 'update-alternatives --config editor to change the defaults.\n\n.B Flags\n.TP\n\\fB\\-\\-create\\fR,\n\\fB\\-c\\fR,\nCreate a new secret if none found\n.TP\n\\fB\\-\\-editor\\fR,\n\\fB\\-e\\fR,\nUse this editor binary\n.SS env\nRun a subprocess with a pre-populated environment\n\nThis command runs a sub process with the environment populated from the keys of a secret.\n\n.B Flags\n.TP\n\\fB\\-\\-keep-case\\fR,\n\\fB\\-\\-kc\\fR,\nDo not capitalize the environment variable and instead retain the original capitalization\n.SS find\nSearch for secrets\n\nThis command will first attempt a simple pattern match on the name of the secret.  If there is an exact match it will be shown directly; if there are multiple matches, a selection will be shown.\n\n.B Flags\n.TP\n\\fB\\-\\-unsafe\\fR,\n\\fB\\-u\\fR,\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nIn the case of an exact match, display the password even if safecontent is enabled\n.SS fsck\nCheck store integrity, clean up artifacts and possibly re-write secrets\n\nCheck the integrity of the given sub-store or all stores if none are specified. Will automatically fix all issues found, i.e. it will change permissions, re-write secrets and remove outdated configs.\n\n.B Flags\n.TP\n\\fB\\-\\-decrypt\\fR,\nDecrypt and reencrypt during fsck.\n.TP\n\\fB\\-\\-store\\fR,\nLimit fsck to this mount point\n.SS fscopy\nCopy files from or to the password store\n\nThis command either reads a file from the filesystem and writes the encoded and encrypted version in the store or it decrypts and decodes a secret and writes the result to a file. Either source or destination must be a file and the other one a secret. If you want the source to be securely removed after copying, use 'gopass binary move'\n.SS fsmove\nMove files from or to the password store\n\nThis command either reads a file from the filesystem and writes the encoded and encrypted version in the store or it decrypts and decodes a secret and writes the result to a file. Either source or destination must be a file and the other one a secret. The source will be wiped from disk or from the store after it has been copied successfully and validated. If you don't want the source to be removed use 'gopass binary copy'\n.SS generate\nGenerate a new password\n\nDialog to generate a new password and write it into a new or existing secret. By default, the new password will replace the first line of an existing secret (or create a new one).\n\n.B Flags\n.TP\n\\fB\\-\\-clip\\fR,\n\\fB\\-c\\fR,\nCopy the generated password to the clipboard\n.TP\n\\fB\\-\\-edit\\fR,\n\\fB\\-e\\fR,\nOpen secret for editing after generating a password\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nForce to overwrite existing password\n.TP\n\\fB\\-\\-force-regen\\fR,\n\\fB\\-t\\fR,\nForce full re-generation, incl. evaluation of templates. Will overwrite the entire secret!\n.TP\n\\fB\\-\\-generator\\fR,\n\\fB\\-g\\fR,\nChoose a password generator, use one of: cryptic, memorable, xkcd or external. Default: cryptic\n.TP\n\\fB\\-\\-lang\\fR,\n\\fB\\-\\-xkcdlang\\fR,\n\\fB\\-\\-xl\\fR,\nLanguage to generate password from, currently only en (english, default) or de are supported\n.TP\n\\fB\\-\\-print\\fR,\n\\fB\\-p\\fR,\nPrint the generated password to the terminal\n.TP\n\\fB\\-\\-sep\\fR,\n\\fB\\-\\-xkcdsep\\fR,\n\\fB\\-\\-xs\\fR,\nWord separator for generated passwords. If no separator is specified, the words are combined without spaces/separator and the first character of words is capitalised.\n.TP\n\\fB\\-\\-strict\\fR,\nRequire strict character class rules\n.TP\n\\fB\\-\\-symbols\\fR,\n\\fB\\-s\\fR,\nUse symbols in the password\n.SS git\nRun a git command inside a password store: gopass git [--store=<store>] <git-command>\n\nIf the password store is a git repository, execute a git command specified by git-command-args.\n\n.B Flags\n.TP\n\\fB\\-\\-store\\fR,\nStore to operate on\n.SS grep\nSearch for secrets files containing search-string when decrypted.\n\nThis command decrypts all secrets and performs a pattern matching on the content.\n\n.B Flags\n.TP\n\\fB\\-\\-regexp\\fR,\n\\fB\\-r\\fR,\nInterpret pattern as RE2 regular expression\n.SS history\nShow password history\n\nDisplay the change history for a secret\n\n.B Flags\n.TP\n\\fB\\-\\-password\\fR,\n\\fB\\-p\\fR,\nInclude passwords in output\n.SS init\nInitialize new password store.\n\nInitialize new password storage and use gpg-id for encryption.\n\n.B Flags\n.TP\n\\fB\\-\\-crypto\\fR,\nSelect crypto backend [age gpgcli plain]\n.TP\n\\fB\\-\\-path\\fR,\n\\fB\\-p\\fR,\nSet the sub-store path to operate on\n.TP\n\\fB\\-\\-storage\\fR,\nSelect storage backend [fossilfs fs gitfs]\n.TP\n\\fB\\-\\-store\\fR,\n\\fB\\-s\\fR,\nSet the name of the sub-store\n.SS insert\nInsert a new secret\n\nInsert a new secret. Optionally, echo the secret back to the console during entry. Or, optionally, the entry may be multiline. Prompt before overwriting existing secret unless forced.\n\n.B Flags\n.TP\n\\fB\\-\\-append\\fR,\n\\fB\\-a\\fR,\nAppend data read from STDIN to existing data\n.TP\n\\fB\\-\\-echo\\fR,\n\\fB\\-e\\fR,\nDisplay secret while typing\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nOverwrite any existing secret and do not prompt to confirm recipients\n.TP\n\\fB\\-\\-multiline\\fR,\n\\fB\\-m\\fR,\nInsert using $EDITOR\n.SS link\nCreate a symlink\n\nThis command creates a symlink from one entry in a mounted store to another entry. Important: Does not cross mounts!\n.SS list\nList existing secrets\n\nThis command will list all existing secrets. Provide a folder prefix to list only certain subfolders of the store.\n\n.B Flags\n.TP\n\\fB\\-\\-flat\\fR,\n\\fB\\-f\\fR,\nPrint a flat list\n.TP\n\\fB\\-\\-folders\\fR,\n\\fB\\-d\\fR,\nPrint a flat list of folders\n.TP\n\\fB\\-\\-limit\\fR,\n\\fB\\-l\\fR,\nDisplay no more than this many levels of the tree\n.TP\n\\fB\\-\\-strip-prefix\\fR,\n\\fB\\-s\\fR,\nStrip this prefix from filtered entries\n.SS merge\nMerge multiple secrets into one\n\nThis command implements a merge workflow to help deduplicate secrets. It requires exactly one destination (may already exist) and at least one source (must exist, can be multiple). gopass will then merge all entries into one, drop into an editor, save the result and remove all merged entries.\n\n.B Flags\n.TP\n\\fB\\-\\-delete\\fR,\n\\fB\\-d\\fR,\nRemove merged entries\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nSkip editor, merge entries unattended\n.SS mounts\nEdit mounted stores\n\nThis command displays all mounted password stores. It offers several subcommands to create or remove mounts.\n.SS move\nMove secrets from one location to another\n\nThis command moves a secret from one path to another. This also works across different sub-stores. If the source is a directory, the source directory is re-created at the destination if no trailing slash is found, otherwise the contents are flattened (similar to rsync).\n\n.B Flags\n.TP\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nForce to move the secret and overwrite existing one\n.SS otp\nGenerate time- or hmac-based tokens\n\nTries to parse an OTP URL (otpauth://). URL can be TOTP or HOTP. The URL can be provided on its own line or on a key value line with a key named 'totp'.\n\n.B Flags\n.TP\n\\fB\\-\\-clip\\fR,\n\\fB\\-c\\fR,\nCopy the time-based token into the clipboard\n.TP\n\\fB\\-\\-password\\fR,\n\\fB\\-o\\fR,\nOnly display the token\n.TP\n\\fB\\-\\-qr\\fR,\n\\fB\\-q\\fR,\nWrite QR code to FILE\n.TP\n\\fB\\-\\-snip\\fR,\n\\fB\\-s\\fR,\nScan screen content to insert a OTP QR code into provided entry\n.SS process\nProcess a template file\n\nThis command processes a template file. It will read the template file and replace all variables with their values.\n.SS pwgen\nGenerate passwords\n\nPrint any number of password to the console. The optional length parameter specifies the length of each password.\n\n.B Flags\n.TP\n\\fB\\-\\-ambiguous\\fR,\n\\fB\\-B\\fR,\nDo not include characters that could be easily confused with each other, like '1' and 'l' or '0' and 'O'\n.TP\n\\fB\\-\\-lang\\fR,\n\\fB\\-\\-xkcdlang\\fR,\n\\fB\\-\\-xl\\fR,\nLanguage to generate password from, currently only en (english, default) or de are supported\n.TP\n\\fB\\-\\-no-capitalize\\fR,\n\\fB\\-A\\fR,\nDo not include capital letter in the generated passwords.\n.TP\n\\fB\\-\\-no-numerals\\fR,\n\\fB\\-0\\fR,\nDo not include numerals in the generated passwords.\n.TP\n\\fB\\-\\-one-per-line\\fR,\n\\fB\\-1\\fR,\nPrint one password per line\n.TP\n\\fB\\-\\-sep\\fR,\n\\fB\\-\\-xkcdsep\\fR,\n\\fB\\-\\-xs\\fR,\nWord separator for generated xkcd style password. If no separator is specified, the words are combined without spaces/separator and the first character of words is capitalised. This flag implies -xkcd\n.TP\n\\fB\\-\\-symbols\\fR,\n\\fB\\-y\\fR,\nInclude at least one symbol in the password.\n.TP\n\\fB\\-\\-xkcd\\fR,\n\\fB\\-x\\fR,\nUse multiple random english words combined to a password. By default, space is used as separator and all words are lowercase\n.TP\n\\fB\\-\\-xkcdcapitalize\\fR,\n\\fB\\-\\-xc\\fR,\nCapitalize first letter of each word in generated xkcd style password. This flag implies -xkcd\n.TP\n\\fB\\-\\-xkcdnumbers\\fR,\n\\fB\\-\\-xn\\fR,\nAdd a random number to the end of the generated xkcd style password. This flag implies -xkcd\n.SS rcs\nRun a RCS command inside a password store\n\nIf the password store is a git repository, execute a git command specified by git-command-args.\n.SS recipients\nEdit recipient permissions\n\nThis command displays all existing recipients for all mounted stores. The subcommands allow adding or removing recipients.\n\n.B Flags\n.TP\n\\fB\\-\\-pretty\\fR,\nPretty print recipients\n.SS setup\nInitialize a new password store\n\nThis command is automatically invoked if gopass is started without any existing password store. This command exists so users can be provided with simple one-command setup instructions.\n\n.B Flags\n.TP\n\\fB\\-\\-alias\\fR,\nLocal mount point for the given remote\n.TP\n\\fB\\-\\-create\\fR,\nCreate a new team (default: false, i.e. join an existing team)\n.TP\n\\fB\\-\\-crypto\\fR,\nSelect crypto backend [age gpgcli plain]\n.TP\n\\fB\\-\\-email\\fR,\nEMail for unattended GPG key generation\n.TP\n\\fB\\-\\-name\\fR,\nFirstname and Lastname for unattended GPG key generation\n.TP\n\\fB\\-\\-remote\\fR,\nURL to a git remote, will attempt to join this team\n.TP\n\\fB\\-\\-storage\\fR,\nSelect storage backend [fossilfs fs gitfs]\n.SS show\nDisplay the content of a secret\n\nShow an existing secret and optionally put its first line on the clipboard. If put on the clipboard, it will be cleared after 45 seconds.\n\n.B Flags\n.TP\n\\fB\\-\\-alsoclip\\fR,\n\\fB\\-C\\fR,\nCopy the password and show everything\n.TP\n\\fB\\-\\-chars\\fR,\nPrint specific characters from the secret\n.TP\n\\fB\\-\\-clip\\fR,\n\\fB\\-c\\fR,\nCopy the password value into the clipboard\n.TP\n\\fB\\-\\-noparsing\\fR,\n\\fB\\-n\\fR,\nDo not parse the output.\n.TP\n\\fB\\-\\-nosync\\fR,\nDisable auto-sync\n.TP\n\\fB\\-\\-password\\fR,\n\\fB\\-o\\fR,\nDisplay only the password. Takes precedence over all other flags.\n.TP\n\\fB\\-\\-qr\\fR,\nPrint the password as a QR Code\n.TP\n\\fB\\-\\-qrbody\\fR,\nPrint the body as a QR Code\n.TP\n\\fB\\-\\-revision\\fR,\n\\fB\\-r\\fR,\nShow a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -<N> to select the Nth oldest revision of this entry.\n.TP\n\\fB\\-\\-unsafe\\fR,\n\\fB\\-u\\fR,\n\\fB\\-\\-force\\fR,\n\\fB\\-f\\fR,\nDisplay unsafe content (e.g. the password) even if safecontent is enabled\n.TP\n\\fB\\-\\-yes\\fR,\n\\fB\\-y\\fR,\nAlways answer yes to yes/no questions\n.SS sum\nCompute the SHA256 checksum\n\nThis command decodes an Base64 encoded secret and computes the SHA256 checksum over the decoded data. This is useful to verify the integrity of an inserted secret.\n.SS sync\nSync all local stores with their remotes\n\nSync all local stores with their git remotes, if any, and check any possibly affected gpg keys.\n\n.B Flags\n.TP\n\\fB\\-\\-store\\fR,\n\\fB\\-s\\fR,\nSelect the store to sync\n.SS templates\nEdit templates\n\nList existing templates in the password store and allow for editing and creating them.\n.SS unclip\nInternal command to clear clipboard\n\nClear the clipboard if the content matches the checksum.\n\n.B Flags\n.TP\n\\fB\\-\\-force\\fR,\nClear clipboard even if checksum mismatches\n.TP\n\\fB\\-\\-timeout\\fR,\nTime to wait\n.SS update\nCheck for updates\n\nThis command checks for gopass updates at GitHub and automatically downloads and installs any missing update.\n.SS version\nDisplay version\n\nThis command displays version and build time information.\n\n.SH \"REPORTING BUGS\"\nReport bugs to <https://github.com/gopasspw/gopass/issues/new>\n.SH \"COPYRIGHT\"\nCopyright \\(co 2021 Gopass Authors\nThis program is free software; you may redistribute it under the terms of\nthe MIT license. This program has absolutely no warranty.\n"
        },
        {
          "name": "helpers",
          "type": "tree",
          "content": null
        },
        {
          "name": "internal",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 9.2119140625,
          "content": "// Copyright 2021 The gopass Authors. All rights reserved.\n// Use of this source code is governed by the MIT license,\n// that can be found in the LICENSE file.\n\n// Gopass implements the gopass command line tool.\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"os/signal\"\n\t\"runtime\"\n\trdebug \"runtime/debug\"\n\t\"runtime/pprof\"\n\t\"sort\"\n\t\"time\"\n\n\t\"github.com/blang/semver/v4\"\n\t\"github.com/fatih/color\"\n\tap \"github.com/gopasspw/gopass/internal/action\"\n\t\"github.com/gopasspw/gopass/internal/action/exit\"\n\t\"github.com/gopasspw/gopass/internal/action/pwgen\"\n\t_ \"github.com/gopasspw/gopass/internal/backend/crypto\"\n\t\"github.com/gopasspw/gopass/internal/backend/crypto/gpg\"\n\t_ \"github.com/gopasspw/gopass/internal/backend/storage\"\n\t\"github.com/gopasspw/gopass/internal/config\"\n\t\"github.com/gopasspw/gopass/internal/hook\"\n\t\"github.com/gopasspw/gopass/internal/out\"\n\t\"github.com/gopasspw/gopass/internal/queue\"\n\t\"github.com/gopasspw/gopass/internal/store/leaf\"\n\t\"github.com/gopasspw/gopass/pkg/ctxutil\"\n\t\"github.com/gopasspw/gopass/pkg/debug\"\n\t\"github.com/gopasspw/gopass/pkg/protect\"\n\t\"github.com/gopasspw/gopass/pkg/termio\"\n\tcolorable \"github.com/mattn/go-colorable\"\n\t\"github.com/mattn/go-isatty\"\n\t\"github.com/urfave/cli/v2\"\n)\n\nconst (\n\tname = \"gopass\"\n)\n\n// Version is the released version of gopass.\nvar version string\n\nfunc main() {\n\t// important: execute the func now but the returned func only on defer!\n\t// Example: https://go.dev/play/p/8214zCX6hVq.\n\tdefer writeCPUProfile()()\n\n\tif err := protect.Pledge(\"stdio rpath wpath cpath tty proc exec fattr\"); err != nil {\n\t\tpanic(err)\n\t}\n\n\tctx := context.Background()\n\n\t// trap Ctrl+C and call cancel on the context\n\tctx, cancel := context.WithCancel(ctx)\n\tsigChan := make(chan os.Signal, 1)\n\tsignal.Notify(sigChan, os.Interrupt)\n\n\tdefer func() {\n\t\tsignal.Stop(sigChan)\n\t\tcancel()\n\t}()\n\n\tgo func(ctx context.Context) {\n\t\tselect {\n\t\tcase <-sigChan:\n\t\t\tcancel()\n\t\tcase <-ctx.Done():\n\t\t}\n\t}(ctx)\n\n\tcli.ErrWriter = errorWriter{ //nolint:reassign\n\t\tout: colorable.NewColorableStderr(),\n\t}\n\tsv := getVersion()\n\tcli.VersionPrinter = makeVersionPrinter(os.Stdout, sv)\n\n\t// run the app\n\tq := queue.New(ctx)\n\tctx = queue.WithQueue(ctx, q)\n\tctx, app := setupApp(ctx, sv)\n\n\tif err := app.RunContext(ctx, os.Args); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// process all pending queue items\n\t_ = q.Close(ctx)\n\n\twriteMemProfile()\n}\n\n//nolint:wrapcheck\nfunc setupApp(ctx context.Context, sv semver.Version) (context.Context, *cli.App) {\n\t// try to read config (if it exists)\n\tcfg := config.New()\n\n\t// set config values\n\tctx = initContext(ctx, cfg)\n\n\t// initialize action handlers\n\taction, err := ap.New(cfg, sv)\n\tif err != nil {\n\t\tout.Errorf(ctx, \"failed to initialize gopass: %s\", err)\n\t\tos.Exit(exit.Unknown)\n\t}\n\n\t// set some action callbacks\n\tif !config.AsBool(cfg.Get(\"core.autoimport\")) {\n\t\tctx = ctxutil.WithImportFunc(ctx, termio.AskForKeyImport)\n\t}\n\n\tctx = leaf.WithFsckFunc(ctx, termio.AskForConfirmation)\n\n\tapp := cli.NewApp()\n\n\tapp.Name = name\n\tapp.Version = sv.String()\n\tapp.Usage = \"The standard unix password manager - rewritten in Go\"\n\tapp.UseShortOptionHandling = true\n\tapp.EnableBashCompletion = true\n\tapp.BashComplete = func(c *cli.Context) {\n\t\tcli.DefaultAppComplete(c)\n\t\taction.Complete(c)\n\t}\n\n\tapp.Flags = ap.ShowFlags()\n\tapp.Action = func(c *cli.Context) error {\n\t\tif err := action.IsInitialized(c); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif c.Args().Present() {\n\t\t\treturn action.Show(c)\n\t\t}\n\n\t\treturn action.REPL(c)\n\t}\n\n\tapp.Commands = getCommands(action, app)\n\n\treturn ctx, app\n}\n\nfunc getCommands(action *ap.Action, app *cli.App) []*cli.Command {\n\tcmds := []*cli.Command{\n\t\t{\n\t\t\tName:  \"completion\",\n\t\t\tUsage: \"Bash and ZSH completion\",\n\t\t\tDescription: \"\" +\n\t\t\t\t\"Source the output of this command with bash or zsh to get auto completion\",\n\t\t\tSubcommands: []*cli.Command{{\n\t\t\t\tName:   \"bash\",\n\t\t\t\tUsage:  \"Source for auto completion in bash\",\n\t\t\t\tAction: action.CompletionBash,\n\t\t\t}, {\n\t\t\t\tName:  \"zsh\",\n\t\t\t\tUsage: \"Source for auto completion in zsh\",\n\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\treturn action.CompletionZSH(app) //nolint:wrapcheck\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tName:  \"fish\",\n\t\t\t\tUsage: \"Source for auto completion in fish\",\n\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\treturn action.CompletionFish(app) //nolint:wrapcheck\n\t\t\t\t},\n\t\t\t}, {\n\t\t\t\tName:  \"openbsdksh\",\n\t\t\t\tUsage: \"Source for auto completion in OpenBSD's ksh\",\n\t\t\t\tAction: func(c *cli.Context) error {\n\t\t\t\t\treturn action.CompletionOpenBSDKsh(app) //nolint:wrapcheck\n\t\t\t\t},\n\t\t\t}},\n\t\t},\n\t}\n\n\tcmds = append(cmds, action.GetCommands()...)\n\tcmds = append(cmds, pwgen.GetCommands()...)\n\tsort.Slice(cmds, func(i, j int) bool { return cmds[i].Name < cmds[j].Name })\n\n\tfor i, cmd := range cmds {\n\t\t// fmt.Printf(\"[%6d - %10s] Before: %p - After %p\\n\", i, cmds[i].Name, cmds[i].Before, cmds[i].After)\n\t\tcmds[i].Before = mkHookFn(\"core.pre-hook\", cmd.Name, action.Store, cmd.Before)\n\t\tcmds[i].After = mkHookFn(\"core.post-hook\", cmd.Name, action.Store, cmd.After)\n\t\t// fmt.Printf(\"[%6d - %10s] Before: %p - After %p\\n\", i, cmds[i].Name, cmds[i].Before, cmds[i].After)\n\t\t// fmt.Println()\n\t}\n\n\treturn cmds\n}\n\ntype pathGetter interface {\n\tPath() string\n}\n\nfunc mkHookFn(hookName, cmdName string, s pathGetter, fn func(c *cli.Context) error) func(c *cli.Context) error {\n\tif fn == nil {\n\t\treturn func(c *cli.Context) error {\n\t\t\tdir := config.String(c.Context, \"mounts.path\")\n\n\t\t\treturn hook.Invoke(c.Context, hookName, dir, cmdName)\n\t\t}\n\t}\n\n\treturn func(c *cli.Context) error {\n\t\tif err := fn(c); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\treturn hook.Invoke(c.Context, hookName, s.Path(), cmdName, c.Args().First())\n\t}\n}\n\nfunc parseBuildInfo() (string, string, string) {\n\tbi, ok := rdebug.ReadBuildInfo()\n\tif !ok {\n\t\treturn \"HEAD\", \"\", \"\"\n\t}\n\n\tvar (\n\t\tcommit string\n\t\tdate   string\n\t\tdirty  string\n\t)\n\n\tfor _, v := range bi.Settings {\n\t\tswitch v.Key {\n\t\tcase \"gitrevision\":\n\t\t\tcommit = v.Value[len(v.Value)-8:]\n\t\tcase \"gitcommittime\":\n\t\t\tif bt, err := time.Parse(\"2006-01-02T15:04:05Z\", date); err == nil {\n\t\t\t\tdate = bt.Format(\"2006-01-02 15:04:05\")\n\t\t\t}\n\t\tcase \"gituncommitted\":\n\t\t\tif v.Value == \"true\" {\n\t\t\t\tdirty = \" (dirty)\"\n\t\t\t}\n\t\t}\n\t}\n\n\treturn commit, date, dirty\n}\n\nfunc makeVersionPrinter(out io.Writer, sv semver.Version) func(c *cli.Context) {\n\treturn func(c *cli.Context) {\n\t\tcommit, buildtime, dirty := parseBuildInfo()\n\t\tbuildInfo := \"\"\n\n\t\tif commit != \"\" {\n\t\t\tbuildInfo = commit + dirty\n\t\t}\n\n\t\tif buildtime != \"\" {\n\t\t\tif buildInfo != \"\" {\n\t\t\t\tbuildInfo += \" \"\n\t\t\t}\n\n\t\t\tbuildInfo += buildtime\n\t\t}\n\n\t\tif buildInfo != \"\" {\n\t\t\tbuildInfo = \"(\" + buildInfo + \") \"\n\t\t}\n\n\t\tfmt.Fprintf(\n\t\t\tout,\n\t\t\t\"%s %s %s%s %s %s\\n\",\n\t\t\tname,\n\t\t\tsv.String(),\n\t\t\tbuildInfo,\n\t\t\truntime.Version(),\n\t\t\truntime.GOOS,\n\t\t\truntime.GOARCH,\n\t\t)\n\t}\n}\n\ntype errorWriter struct {\n\tout io.Writer\n}\n\nfunc (e errorWriter) Write(p []byte) (int, error) {\n\treturn e.out.Write([]byte(\"\\n\" + color.RedString(\"Error: %s\", p))) //nolint:wrapcheck\n}\n\nfunc initContext(ctx context.Context, cfg *config.Config) context.Context {\n\t// initialize from config, may be overridden by env vars\n\tctx = cfg.WithConfig(ctx)\n\n\t// always trust\n\tctx = gpg.WithAlwaysTrust(ctx, true)\n\n\t// check recipients conflicts with always trust, make sure it's not enabled\n\t// when always trust is\n\tif gpg.IsAlwaysTrust(ctx) {\n\t\tctx = leaf.WithCheckRecipients(ctx, false)\n\t}\n\n\t// only emit color codes when stdout is a terminal\n\tif !isatty.IsTerminal(os.Stdout.Fd()) {\n\t\tcolor.NoColor = true\n\t\tctx = ctxutil.WithTerminal(ctx, false)\n\t\tctx = ctxutil.WithInteractive(ctx, false)\n\t}\n\n\t// reading from stdin?\n\tif info, err := os.Stdin.Stat(); err == nil && info.Mode()&os.ModeCharDevice == 0 {\n\t\tctx = ctxutil.WithInteractive(ctx, false)\n\t\tctx = ctxutil.WithStdin(ctx, true)\n\t}\n\n\t// disable colored output on windows since cmd.exe doesn't support ANSI color\n\t// codes. Other terminal may do, but until we can figure that out better\n\t// disable this for all terms on this platform\n\tif sv := os.Getenv(\"NO_COLOR\"); runtime.GOOS == \"windows\" || sv == \"true\" {\n\t\tcolor.NoColor = true\n\t} else {\n\t\t// on all other platforms we should be able to use color. Only set\n\t\t// this if it's in the config.\n\t\tif cfg.IsSet(\"core.nocolor\") {\n\t\t\tcolor.NoColor = config.AsBool(cfg.Get(\"core.nocolor\"))\n\t\t}\n\t}\n\n\t// using a password callback for age identity file or not?\n\tif pw, isSet := os.LookupEnv(\"GOPASS_AGE_PASSWORD\"); isSet {\n\t\tctx = ctxutil.WithPasswordCallback(ctx, func(_ string, _ bool) ([]byte, error) {\n\t\t\tdebug.Log(\"using age password callback from env variable GOPASS_AGE_PASSWORD\")\n\n\t\t\treturn []byte(pw), nil\n\t\t})\n\t}\n\n\treturn ctx\n}\n\nfunc writeCPUProfile() func() {\n\tcp := os.Getenv(\"GOPASS_CPU_PROFILE\")\n\tif cp == \"\" {\n\t\treturn func() {}\n\t}\n\n\tf, err := os.Create(cp)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not create CPU profile at %s: %s\", cp, err)\n\t}\n\n\tif err := pprof.StartCPUProfile(f); err != nil {\n\t\tlog.Fatalf(\"could not start CPU profile: %s\", err)\n\t}\n\n\treturn func() {\n\t\tpprof.StopCPUProfile()\n\n\t\t_ = f.Close()\n\n\t\tdebug.Log(\"wrote CPU profile to %s\", cp)\n\t}\n}\n\nfunc writeMemProfile() {\n\tmp := os.Getenv(\"GOPASS_MEM_PROFILE\")\n\tif mp == \"\" {\n\t\treturn\n\t}\n\n\tf, err := os.Create(mp)\n\tif err != nil {\n\t\tlog.Fatalf(\"could not write mem profile to %s: %s\", mp, err)\n\t}\n\n\tdefer func() {\n\t\t_ = f.Close()\n\t}()\n\n\truntime.GC() // get up-to-date statistics\n\n\tif err := pprof.WriteHeapProfile(f); err != nil {\n\t\tlog.Fatalf(\"could not write heap profile: %s\", err)\n\t}\n\n\tdebug.Log(\"wrote heap profile to %s\", mp)\n}\n"
        },
        {
          "name": "main_test.go",
          "type": "blob",
          "size": 3.7255859375,
          "content": "package main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"testing\"\n\n\t\"github.com/atotto/clipboard\"\n\t\"github.com/blang/semver/v4\"\n\t\"github.com/fatih/color\"\n\t\"github.com/gopasspw/gopass/internal/action\"\n\t\"github.com/gopasspw/gopass/internal/backend\"\n\t\"github.com/gopasspw/gopass/internal/backend/crypto/gpg\"\n\t\"github.com/gopasspw/gopass/internal/config\"\n\t\"github.com/gopasspw/gopass/internal/out\"\n\t\"github.com/gopasspw/gopass/internal/set\"\n\t\"github.com/gopasspw/gopass/pkg/ctxutil\"\n\t\"github.com/gopasspw/gopass/tests/gptest\"\n\t\"github.com/stretchr/testify/assert\"\n\t\"github.com/stretchr/testify/require\"\n\t\"github.com/urfave/cli/v2\"\n)\n\nfunc TestVersionPrinter(t *testing.T) {\n\tt.Parallel()\n\n\tbuf := &bytes.Buffer{}\n\tvp := makeVersionPrinter(buf, semver.Version{Major: 1})\n\tvp(nil)\n\tassert.Equal(t, fmt.Sprintf(\"gopass 1.0.0 %s %s %s\\n\", runtime.Version(), runtime.GOOS, runtime.GOARCH), buf.String())\n}\n\nfunc TestGetVersion(t *testing.T) {\n\tt.Parallel()\n\n\tversion = \"1.9.0\"\n\n\tif getVersion().LT(semver.Version{Major: 1, Minor: 9}) {\n\t\tt.Errorf(\"invalid version\")\n\t}\n}\n\nfunc TestSetupApp(t *testing.T) {\n\tt.Parallel()\n\n\tctx := config.NewContextInMemory()\n\t_, app := setupApp(ctx, semver.Version{})\n\tassert.NotNil(t, app)\n}\n\n// commandsWithError is a list of commands that return an error when\n// invoked without arguments.\nvar commandsWithError = set.Map([]string{\n\t\".age.identities.add\",\n\t\".age.identities.remove\",\n\t\".alias.add\",\n\t\".alias.remove\",\n\t\".alias.delete\",\n\t\".cat\",\n\t\".clone\",\n\t\".copy\",\n\t\".create\",\n\t\".delete\",\n\t\".edit\",\n\t\".env\",\n\t\".find\",\n\t\".fscopy\",\n\t\".fsmove\",\n\t\".generate\",\n\t\".git\",\n\t\".git.push\",\n\t\".git.pull\",\n\t\".git.status\",\n\t\".git.remote.add\",\n\t\".git.remote.remove\",\n\t\".grep\",\n\t\".history\",\n\t\".init\",\n\t\".insert\",\n\t\".link\",\n\t\".merge\",\n\t\".mounts.add\",\n\t\".mounts.remove\",\n\t\".move\",\n\t\".otp\",\n\t\".process\",\n\t\".rcs.status\",\n\t\".recipients.add\",\n\t\".recipients.remove\",\n\t\".show\",\n\t\".sum\",\n\t\".templates.edit\",\n\t\".templates.remove\",\n\t\".templates.show\",\n\t\".unclip\",\n})\n\nfunc TestGetCommands(t *testing.T) {\n\tu := gptest.NewUnitTester(t)\n\n\tbuf := &bytes.Buffer{}\n\tcolor.NoColor = true\n\n\tout.Stdout = buf\n\tdefer func() {\n\t\tout.Stdout = os.Stdout\n\t}()\n\n\tcfg := config.NewInMemory()\n\trequire.NoError(t, cfg.SetPath(u.StoreDir(\"\")))\n\n\tclipboard.Unsupported = true\n\n\tctx := config.NewContextInMemory()\n\tctx = ctxutil.WithAlwaysYes(ctx, true)\n\tctx = ctxutil.WithInteractive(ctx, false)\n\tctx = ctxutil.WithTerminal(ctx, false)\n\tctx = ctxutil.WithHidden(ctx, true)\n\tctx = backend.WithCryptoBackendString(ctx, \"plain\")\n\tctx = ctxutil.WithPasswordCallback(ctx, func(_ string, _ bool) ([]byte, error) {\n\t\treturn []byte(\"foobar\"), nil\n\t})\n\n\tact, err := action.New(cfg, semver.Version{})\n\trequire.NoError(t, err)\n\n\tapp := cli.NewApp()\n\tfs := flag.NewFlagSet(\"default\", flag.ContinueOnError)\n\tc := cli.NewContext(app, fs, nil)\n\tc.Context = ctx\n\n\tcommands := getCommands(act, app)\n\tassert.Len(t, commands, 41)\n\n\tprefix := \"\"\n\ttestCommands(t, c, commands, prefix)\n}\n\nfunc testCommands(t *testing.T, c *cli.Context, commands []*cli.Command, prefix string) {\n\tt.Helper()\n\n\tfor _, cmd := range commands {\n\t\tif cmd.Name == \"update\" {\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(cmd.Subcommands) > 0 {\n\t\t\ttestCommands(t, c, cmd.Subcommands, prefix+\".\"+cmd.Name)\n\t\t}\n\n\t\tif cmd.Before != nil {\n\t\t\tif err := cmd.Before(c); err != nil {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\tif cmd.BashComplete != nil {\n\t\t\tcmd.BashComplete(c)\n\t\t}\n\n\t\tif cmd.Action != nil {\n\t\t\tfullName := prefix + \".\" + cmd.Name\n\t\t\tif _, found := commandsWithError[fullName]; found {\n\t\t\t\trequire.Error(t, cmd.Action(c), fullName)\n\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\trequire.NoError(t, cmd.Action(c), fullName)\n\t\t}\n\t}\n}\n\nfunc TestInitContext(t *testing.T) {\n\tt.Parallel()\n\n\tctx := context.Background()\n\tcfg := config.NewInMemory()\n\n\tctx = initContext(ctx, cfg)\n\tassert.True(t, gpg.IsAlwaysTrust(ctx))\n}\n"
        },
        {
          "name": "main_unix.go",
          "type": "blob",
          "size": 0.193359375,
          "content": "//go:build !windows\n// +build !windows\n\npackage main\n\nimport (\n\t\"os/signal\"\n\t\"syscall\"\n)\n\nfunc init() {\n\t// workaround for https://github.com/golang/go/issues/37942\n\tsignal.Ignore(syscall.SIGURG)\n}\n"
        },
        {
          "name": "pkg",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.3369140625,
          "content": "package main\n\nimport (\n\t\"strings\"\n\n\t\"github.com/blang/semver/v4\"\n)\n\nfunc getVersion() semver.Version {\n\tsv, err := semver.Parse(strings.TrimPrefix(version, \"v\"))\n\tif err == nil {\n\t\treturn sv\n\t}\n\n\treturn semver.Version{\n\t\tMajor: 1,\n\t\tMinor: 15,\n\t\tPatch: 15,\n\t\tPre: []semver.PRVersion{\n\t\t\t{VersionStr: \"git\"},\n\t\t},\n\t\tBuild: []string{\"HEAD\"},\n\t}\n}\n"
        },
        {
          "name": "zsh.completion",
          "type": "blob",
          "size": 12.8896484375,
          "content": "#compdef gopass\n\n_gopass () {\n    local cmd\n    if (( CURRENT > 2)); then\n\tcmd=${words[2]}\n\tcurcontext=\"${curcontext%:*:*}:gopass-$cmd\"\n\t(( CURRENT-- ))\n\tshift words\n\tcase \"${cmd}\" in\n\t  age)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"identities:List age identities used for decryption and encryption\"\n\t      )\n\t      _describe -t commands \"gopass age\" subcommands\n\t      \n\t      \n\t      \n\t      ;;\n\t  alias)\n\t      \n\t      \n\t      \n\t      ;;\n\t  audit)\n\t      _arguments : \"--format[Output format. text, csv or html. Default: text]\" \"--output-file[Output filename. Used for csv and html]\" \"--template[HTML template. If not set use the built-in default.]\" \"--full[Print full details of all findings. Default: false]\" \"--summary[Print a summary of the audit results. Default: true (print summary)]\"\n\t      \n\t      \n\t      ;;\n\t  cat)\n\t      \n\t      \n\t      \n\t      ;;\n\t  clone)\n\t      _arguments : \"--path[Path to clone the repo to]\" \"--crypto[Select crypto backend \\[age gpgcli plain\\]]\" \"--storage[Select storage backend \\[fossilfs gitfs\\]]\" \"--check-keys[Check for valid decryption keys. Generate new keys if none are found.]\"\n\t      \n\t      \n\t      ;;\n\t  completion)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"bash:Source for auto completion in bash\"\n\t      \"zsh:Source for auto completion in zsh\"\n\t      \"fish:Source for auto completion in fish\"\n\t      \"openbsdksh:Source for auto completion in OpenBSD's ksh\"\n\t      \"help:Shows a list of commands or help for one command\"\n\t      )\n\t      _describe -t commands \"gopass completion\" subcommands\n\t      _arguments : \"--help[show help]\"\n\t      \n\t      \n\t      ;;\n\t  config)\n\t      _arguments : \"--store[Set options to a specific store]\"\n\t      \n\t      \n\t      ;;\n\t  convert)\n\t      _arguments : \"--store[Specify which store to convert]\" \"--move[Replace store?]\" \"--crypto[Which crypto backend? \\[age gpgcli plain\\]]\" \"--storage[Which storage backend? \\[fossilfs fs gitfs\\]]\"\n\t      \n\t      \n\t      ;;\n\t  copy|cp)\n\t      _arguments : \"--force[Force to copy the secret and overwrite existing one]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  create|new)\n\t      _arguments : \"--store[Which store to use]\" \"--force[Force path selection]\"\n\t      \n\t      \n\t      ;;\n\t  delete|remove|rm)\n\t      _arguments : \"--recursive[Recursive delete files and folders]\" \"--force[Force to delete the secret]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  edit|set)\n\t      _arguments : \"--editor[Use this editor binary]\" \"--create[Create a new secret if none found]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  env)\n\t      _arguments : \"--keep-case[Do not capitalize the environment variable and instead retain the original capitalization]\"\n\t      \n\t      \n\t      ;;\n\t  find|search)\n\t      _arguments : \"--unsafe[In the case of an exact match, display the password even if safecontent is enabled]\"\n\t      \n\t      \n\t      ;;\n\t  fsck)\n\t      _arguments : \"--decrypt[Decrypt and reencrypt during fsck.]\" \"--store[Limit fsck to this mount point]\"\n\t      \n\t      \n\t      ;;\n\t  fscopy)\n\t      \n\t      \n\t      \n\t      ;;\n\t  fsmove)\n\t      \n\t      \n\t      \n\t      ;;\n\t  generate)\n\t      _arguments : \"--clip[Copy the generated password to the clipboard]\" \"--print[Print the generated password to the terminal]\" \"--force[Force to overwrite existing password]\" \"--edit[Open secret for editing after generating a password]\" \"--symbols[Use symbols in the password]\" \"--generator[Choose a password generator, use one of: cryptic, memorable, xkcd or external. Default: cryptic]\" \"--strict[Require strict character class rules]\" \"--force-regen[Force full re-generation, incl. evaluation of templates. Will overwrite the entire secret!]\" \"--sep[Word separator for generated passwords. If no separator is specified, the words are combined without spaces/separator and the first character of words is capitalised.]\" \"--lang[Language to generate password from, currently only en (english, default) or de are supported]\"\n\t      _gopass_complete_folders\n\t      _gopass_complete_passwords\n\t      ;;\n\t  git)\n\t      _arguments : \"--store[Store to operate on]\"\n\t      \n\t      \n\t      ;;\n\t  grep)\n\t      _arguments : \"--regexp[Interpret pattern as RE2 regular expression]\"\n\t      \n\t      \n\t      ;;\n\t  history|hist)\n\t      _arguments : \"--password[Include passwords in output]\"\n\t      \n\t      \n\t      ;;\n\t  init)\n\t      _arguments : \"--path[Set the sub-store path to operate on]\" \"--store[Set the name of the sub-store]\" \"--crypto[Select crypto backend \\[age gpgcli plain\\]]\" \"--storage[Select storage backend \\[fossilfs fs gitfs\\]]\"\n\t      \n\t      \n\t      ;;\n\t  insert)\n\t      _arguments : \"--echo[Display secret while typing]\" \"--multiline[Insert using $EDITOR]\" \"--force[Overwrite any existing secret and do not prompt to confirm recipients]\" \"--append[Append data read from STDIN to existing data]\"\n\t      _gopass_complete_folders\n\t      _gopass_complete_passwords\n\t      ;;\n\t  link|ln|symlink)\n\t      \n\t      \n\t      \n\t      ;;\n\t  list|ls)\n\t      _arguments : \"--limit[Display no more than this many levels of the tree]\" \"--flat[Print a flat list]\" \"--folders[Print a flat list of folders]\" \"--strip-prefix[Strip this prefix from filtered entries]\"\n\t      _gopass_complete_folders\n\t      \n\t      ;;\n\t  merge)\n\t      _arguments : \"--delete[Remove merged entries]\" \"--force[Skip editor, merge entries unattended]\"\n\t      \n\t      \n\t      ;;\n\t  mounts)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"add:Mount a password store\"\n\t      \"remove:Umount an mounted password store\"\n\t      \"versions:Display mount provider versions\"\n\t      )\n\t      _describe -t commands \"gopass mounts\" subcommands\n\t      \n\t      \n\t      \n\t      ;;\n\t  move|mv)\n\t      _arguments : \"--force[Force to move the secret and overwrite existing one]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  otp|totp|hotp)\n\t      _arguments : \"--clip[Copy the time-based token into the clipboard]\" \"--qr[Write QR code to FILE]\" \"--password[Only display the token]\" \"--snip[Scan screen content to insert a OTP QR code into provided entry]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  process)\n\t      \n\t      \n\t      \n\t      ;;\n\t  pwgen)\n\t      _arguments : \"--no-numerals[Do not include numerals in the generated passwords.]\" \"--no-capitalize[Do not include capital letter in the generated passwords.]\" \"--ambiguous[Do not include characters that could be easily confused with each other, like '1' and 'l' or '0' and 'O']\" \"--symbols[Include at least one symbol in the password.]\" \"--one-per-line[Print one password per line]\" \"--xkcd[Use multiple random english words combined to a password. By default, space is used as separator and all words are lowercase]\" \"--sep[Word separator for generated xkcd style password. If no separator is specified, the words are combined without spaces/separator and the first character of words is capitalised. This flag implies -xkcd]\" \"--lang[Language to generate password from, currently only en (english, default) or de are supported]\" \"--xkcdcapitalize[Capitalize first letter of each word in generated xkcd style password. This flag implies -xkcd]\" \"--xkcdnumbers[Add a random number to the end of the generated xkcd style password. This flag implies -xkcd]\"\n\t      \n\t      \n\t      ;;\n\t  rcs)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"init:Init RCS repo\"\n\t      \"status:RCS status\"\n\t      )\n\t      _describe -t commands \"gopass rcs\" subcommands\n\t      \n\t      \n\t      \n\t      ;;\n\t  recipients)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"ack:Update recipients.hash\"\n\t      \"add:Add any number of Recipients to any store\"\n\t      \"remove:Remove any number of Recipients from any store\"\n\t      )\n\t      _describe -t commands \"gopass recipients\" subcommands\n\t      _arguments : \"--pretty[Pretty print recipients]\"\n\t      \n\t      \n\t      ;;\n\t  setup)\n\t      _arguments : \"--remote[URL to a git remote, will attempt to join this team]\" \"--alias[Local mount point for the given remote]\" \"--create[Create a new team (default: false, i.e. join an existing team)]\" \"--name[Firstname and Lastname for unattended GPG key generation]\" \"--email[EMail for unattended GPG key generation]\" \"--crypto[Select crypto backend \\[age gpgcli plain\\]]\" \"--storage[Select storage backend \\[fossilfs fs gitfs\\]]\"\n\t      \n\t      \n\t      ;;\n\t  show)\n\t      _arguments : \"--yes[Always answer yes to yes/no questions]\" \"--clip[Copy the password value into the clipboard]\" \"--alsoclip[Copy the password and show everything]\" \"--qr[Print the password as a QR Code]\" \"--qrbody[Print the body as a QR Code]\" \"--unsafe[Display unsafe content (e.g. the password) even if safecontent is enabled]\" \"--password[Display only the password. Takes precedence over all other flags.]\" \"--revision[Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -<N> to select the Nth oldest revision of this entry.]\" \"--noparsing[Do not parse the output.]\" \"--nosync[Disable auto-sync]\" \"--chars[Print specific characters from the secret]\"\n\t      \n\t      _gopass_complete_passwords\n\t      ;;\n\t  sum|sha|sha256)\n\t      \n\t      \n\t      \n\t      ;;\n\t  sync)\n\t      _arguments : \"--store[Select the store to sync]\"\n\t      \n\t      \n\t      ;;\n\t  templates)\n\t      local -a subcommands\n\t      subcommands=(\n\t      \"show:Show a secret template.\"\n\t      \"edit:Edit secret templates.\"\n\t      \"remove:Remove secret templates.\"\n\t      )\n\t      _describe -t commands \"gopass templates\" subcommands\n\t      \n\t      \n\t      \n\t      ;;\n\t  unclip)\n\t      _arguments : \"--timeout[Time to wait]\" \"--force[Clear clipboard even if checksum mismatches]\"\n\t      \n\t      \n\t      ;;\n\t  update)\n\t      \n\t      \n\t      \n\t      ;;\n\t  version)\n\t      \n\t      \n\t      \n\t      ;;\n\t  help|h)\n\t      \n\t      \n\t      \n\t      ;;\n\t  *)\n\t      _gopass_complete_passwords\n\t      ;;\n\tesac\n    else\n\tlocal -a subcommands\n\tsubcommands=(\n\t  \"age:age commands\"\n\t  \"alias:Print domain aliases\"\n\t  \"audit:Decrypt all secrets and scan for weak or leaked passwords\"\n\t  \"cat:Decode and print content of a binary secret to stdout, or encode and insert from stdin\"\n\t  \"clone:Clone a password store from a git repository\"\n\t  \"completion:Bash and ZSH completion\"\n\t  \"config:Display and edit the configuration file\"\n\t  \"convert:Convert a store to different backends\"\n\t  \"copy:Copy secrets from one location to another\"\n\t  \"create:Easy creation of new secrets\"\n\t  \"delete:Remove one or many secrets from the store\"\n\t  \"edit:Edit new or existing secrets\"\n\t  \"env:Run a subprocess with a pre-populated environment\"\n\t  \"find:Search for secrets\"\n\t  \"fsck:Check store integrity, clean up artifacts and possibly re-write secrets\"\n\t  \"fscopy:Copy files from or to the password store\"\n\t  \"fsmove:Move files from or to the password store\"\n\t  \"generate:Generate a new password\"\n\t  \"git:Run a git command inside a password store: gopass git [--store=<store>] <git-command>\"\n\t  \"grep:Search for secrets files containing search-string when decrypted.\"\n\t  \"history:Show password history\"\n\t  \"init:Initialize new password store.\"\n\t  \"insert:Insert a new secret\"\n\t  \"link:Create a symlink\"\n\t  \"list:List existing secrets\"\n\t  \"merge:Merge multiple secrets into one\"\n\t  \"mounts:Edit mounted stores\"\n\t  \"move:Move secrets from one location to another\"\n\t  \"otp:Generate time- or hmac-based tokens\"\n\t  \"process:Process a template file\"\n\t  \"pwgen:Generate passwords\"\n\t  \"rcs:Run a RCS command inside a password store\"\n\t  \"recipients:Edit recipient permissions\"\n\t  \"setup:Initialize a new password store\"\n\t  \"show:Display the content of a secret\"\n\t  \"sum:Compute the SHA256 checksum\"\n\t  \"sync:Sync all local stores with their remotes\"\n\t  \"templates:Edit templates\"\n\t  \"unclip:Internal command to clear clipboard\"\n\t  \"update:Check for updates\"\n\t  \"version:Display version\"\n\t  \"help:Shows a list of commands or help for one command\"\n\t)\n\t_describe -t command 'gopass' subcommands\n\t_arguments : \"--yes[Always answer yes to yes/no questions]\" \"--clip[Copy the password value into the clipboard]\" \"--alsoclip[Copy the password and show everything]\" \"--qr[Print the password as a QR Code]\" \"--qrbody[Print the body as a QR Code]\" \"--unsafe[Display unsafe content (e.g. the password) even if safecontent is enabled]\" \"--password[Display only the password. Takes precedence over all other flags.]\" \"--revision[Show a past revision. Does NOT support RCS specific shortcuts. Use exact revision or -<N> to select the Nth oldest revision of this entry.]\" \"--noparsing[Do not parse the output.]\" \"--nosync[Disable auto-sync]\" \"--chars[Print specific characters from the secret]\" \"--help[show help]\" \"--version[print the version]\" \n\t_gopass_complete_passwords\n    fi\n}\n\n_gopass_complete_keys () {\n    local IFS=$'\\n'\n    _values 'gpg keys' $(gpg2 --list-secret-keys --with-colons 2> /dev/null | cut -d : -f 10 | sort -u | sed '/^$/d')\n}\n\n_gopass_complete_passwords () {\n    local IFS=$'\\n'\n    _arguments : \\\n\t\"--clip[Copy the first line of the secret into the clipboard]\"\n    _values 'passwords' $(gopass ls --flat)\n}\n\n_gopass_complete_folders () {\n    local -a folders\n    folders=(\"${(@f)$(gopass ls --folders --flat)}\")\n    _describe -t folders \"folders\" folders -qS /\n}\n\ncompdef _gopass gopass\n"
        }
      ]
    }
  ]
}