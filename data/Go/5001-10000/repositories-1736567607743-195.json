{
  "metadata": {
    "timestamp": 1736567607743,
    "page": 195,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "boyter/scc",
      "stars": 6937,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0400390625,
          "content": ".sccignore linguist-language=Ignore-List\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.6494140625,
          "content": "# Binaries for programs and plugins\n*.exe\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\nscc\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736\n.glide/\n\n# IDE\n.idea/\n*.code-workspace\n\n# Performance tests\nexamples/performance_tests/0\nexamples/performance_tests/1\nexamples/performance_tests/2\nexamples/performance_tests/3\nexamples/performance_tests/4\nexamples/performance_tests/5\nexamples/performance_tests/6\nexamples/performance_tests/7\nexamples/performance_tests/8\n\n# Ignore test\nignored.xml\ngitignorefile.txt\n\n# macOS\n\n.DS_Store\n\ndist/\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 1.232421875,
          "content": "# This is an example .goreleaser.yml file with some sensible defaults.\n# Make sure to check the documentation at https://goreleaser.com\nbefore:\n  hooks:\n    # You may remove this if you don't use go modules.\n    - go mod tidy\n    # you may remove this if you don't need go generate\n    - go generate ./...\nbuilds:\n  - env:\n      - CGO_ENABLED=0\n    goos:\n      - linux\n      - windows\n      - darwin\n\narchives:\n  - format: tar.gz\n    # this name template makes the OS and Arch compatible with the results of uname.\n    name_template: >-\n      {{ .ProjectName }}_\n      {{- title .Os }}_\n      {{- if eq .Arch \"amd64\" }}x86_64\n      {{- else if eq .Arch \"386\" }}i386\n      {{- else }}{{ .Arch }}{{ end }}\n      {{- if .Arm }}v{{ .Arm }}{{ end }}\n    # use zip for windows archives\n    format_overrides:\n      - goos: windows\n        format: zip\nchecksum:\n  name_template: 'checksums.txt'\nsnapshot:\n  name_template: \"{{ incpatch .Version }}-next\"\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - '^docs:'\n      - '^test:'\n\n# The lines beneath this are called `modelines`. See `:help modeline`\n# Feel free to remove those if you don't want/use them.\n# yaml-language-server: $schema=https://goreleaser.com/static/schema.json\n# vim: set ts=2 sw=2 tw=0 fo=cnqoj\n"
        },
        {
          "name": ".ignore",
          "type": "blob",
          "size": 0.021484375,
          "content": "vendor/\nignorefile.txt"
        },
        {
          "name": ".sccignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "examples\n.github\ndist"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.1357421875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at ben@boyter.org. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9287109375,
          "content": "## How to contribute to sloc cloc and code (scc)\n\n#### **Did you find a bug?**\n\n* **Ensure the bug was not already reported** by searching on GitHub under [Issues](https://github.com/boyter/scc/issues).\n\n* If you're unable to find an open issue addressing the problem, [open a new one](https://github.com/boyter/scc/issues/new). Be sure to include a **title and clear description**, as much relevant information as possible, and a **code sample** or an **executable test case** demonstrating the expected behavior that is not occurring.\n\n#### **Did you write a patch that fixes a bug?**\n\n* Open a new GitHub pull request with the patch.\n\n* Ensure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n* Before submitting, please specify that you explicitly licence your contribution under MIT licence.\n\n\n#### **Always remember**\n\n* Do as Bill and Ted and be excellent to each other.\n\nThanks!\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2421875,
          "content": "FROM golang:1.22.6-alpine3.20 AS scc-get\n\nENV GOOS=linux \\\nGOARCH=amd64 \\\nCGO_ENABLED=0\n\nARG VERSION=v3.4.0\nCOPY . /scc\nWORKDIR /scc\nRUN go build -ldflags=\"-s -w\" -o /bin/scc\n\nFROM alpine:3.20\nCOPY --from=scc-get /bin/scc /bin/scc\nCMD [\"/bin/scc\"]\n"
        },
        {
          "name": "LANGUAGES.md",
          "type": "blob",
          "size": 6.2392578125,
          "content": "```\nABAP (abap)\nABNF (abnf)\nActionScript (as)\nAda (ada,adb,ads,pad)\nAgda (agda)\nAlchemist (crn)\nAlex (x)\nAlloy (als)\nAndroid Interface Definition Language (aidl)\nAPL (apl,aplf,apln,aplc,dyalog)\nAppleScript (applescript)\nArturo (art)\nAsciiDoc (adoc)\nASP (asa,asp)\nASP.NET (asax,ascx,asmx,aspx,master,sitemap,webinfo)\nAssembly (s,asm)\nAstro (astro)\nATS (dats,sats,ats,hats)\nAutoconf (in)\nAutoHotKey (ahk)\nAvro (avdl,avpr,avsc)\nAWK (awk)\nbait (bt)\nBASH (bash,bash_login,bash_logout,bash_profile,bashrc,.bash_login,.bash_logout,.bash_profile,.bashrc)\nBasic (bas)\nBatch (bat,btm,cmd)\nBazel (bzl,build.bazel,build,workspace)\nBean (bean,beancount)\nBicep (bicep)\nBitbake (bb,bbappend,bbclass)\nBitbucket Pipeline (bitbucket-pipelines.yml)\nBlade template (blade.php)\nBoo (boo)\nBosque (bsq)\nBrainfuck (bf)\nBuildStream (bst)\nC (c,ec,pgc)\nC Header (h)\nC Shell (csh,.cshrc)\nC# (cs,csx)\nC++ (cc,cpp,cxx,c++,pcc,ino)\nC++ Header (hh,hpp,hxx,inl,ipp)\nCabal (cabal)\nCairo (cairo)\nCangjie (cj)\nCap'n Proto (capnp)\nCassius (cassius)\nCeylon (ceylon)\nChapel (chpl)\nCircom (circom)\nClipper (prg,ch)\nClojure (clj,cljc)\nClojureScript (cljs)\nClosure Template (soy)\nCloudFormation (JSON) (json)\nCloudFormation (YAML) (yaml,yml)\nCMake (cmake,cmakelists.txt)\nCOBOL (cob,cbl,ccp,cobol,cpy)\nCodeQL (ql,qll)\nCoffeeScript (coffee)\nCogent (cogent)\nColdFusion (cfm)\nColdFusion CFScript (cfc)\nCoq (v)\nCreole (creole)\nCrystal (cr)\nCSS (css)\nCSV (csv)\nCuda (cu)\nCython (pyx,pxi,pxd)\nD (d)\nDAML (daml)\nDart (dart)\nDevice Tree (dts,dtsi)\nDhall (dhall)\nDM (dm)\nDocker ignore (.dockerignore)\nDockerfile (dockerfile,dockerfile)\nDocument Type Definition (dtd)\nDOT (dot,gv)\nElixir (ex,exs)\nElm (elm)\nEmacs Dev Env (ede)\nEmacs Lisp (el)\nEmiT (emit)\nErlang (erl,hrl)\nExpect (exp)\nExtensible Stylesheet Language Transformations (xslt,xsl)\nF# (fs,fsi,fsx,fsscript)\nF* (fst)\nFactor (factor)\nFennel (fnl)\nFIDL (fidl)\nFish (fish)\nFlow9 (flow)\nForth (4th,forth,fr,frt,fth,f83,fb,fpm,e4,rx,ft)\nFORTRAN Legacy (f,for,ftn,f77,pfo)\nFortran Modern (f03,f08,f90,f95)\nFragment Shader File (fsh)\nFreemarker Template (ftl)\nFSL (fsl)\nFuthark (fut)\nFXML (fxml)\nGame Maker Language (gml)\nGame Maker Project (yyp)\nGDScript (gd)\nGemfile (gemfile)\nGherkin Specification (feature)\ngitignore (.gitignore)\nGleam (gleam)\nGLSL (vert,tesc,tese,geom,frag,comp,glsl)\nGN (gn,gni)\nGo (go)\nGo Template (tmpl,gohtml,gotxt)\nGodot Scene (tscn)\nGradle (gradle)\nGraphQL (graphql)\nGroovy (groovy,grt,gtpl,gvy)\nGwion (gw)\nHAML (haml)\nHamlet (hamlet)\nHandlebars (hbs,handlebars)\nHappy (y,ly)\nHare (ha)\nHaskell (hs)\nHaxe (hx)\nHEX (hex)\nhoon (hoon)\nHTML (html,htm)\nIDL (idl,webidl,widl)\nIdris (idr,lidr)\nignore (.ignore)\nINI (ini)\nIntel HEX (ihex)\nIsabelle (thy)\nJade (jade)\nJAI (jai)\nJanet (janet)\nJava (java)\nJavaScript (js,mjs)\nJavaServer Pages (jsp)\nJenkins Buildfile (jenkinsfile)\nJinja (jinja,j2,jinja2)\njq (jq)\nJSON (json)\nJSON5 (json5)\nJSONC (jsonc)\nJSONL (jsonl)\nJsonnet (jsonnet,libsonnet)\nJSX (jsx)\nJulia (jl)\nJulius (julius)\nJupyter (ipynb,jpynb)\nJust (justfile)\nK (k)\nKorn Shell (ksh,.kshrc)\nKotlin (kt,kts)\nLALRPOP (lalrpop)\nLaTeX (tex)\nLD Script (lds)\nLean (lean,hlean)\nLESS (less)\nLEX (l)\nLicense (license,licence,copying,copying3,unlicense,unlicence,license-apache,licence-apache,license-mit,licence-mit,copyright)\nLisp (lisp,lsp)\nLiveScript (ls)\nLLVM IR (ll)\nLOLCODE (lol,lols)\nLua (lua,luau)\nLuau (luau)\nLucius (lucius)\nLuna (luna)\nm4 (m4)\nMacromedia eXtensible Markup Language (mxml)\nMadlang (mad)\nMakefile (makefile,mak,mk,bp,makefile,gnumakefile)\nMako (mako,mao)\nMarkdown (md,markdown)\nMATLAB (m)\nMax (maxpat)\nMDX (mdx)\nMeson (meson.build,meson_options.txt)\nMetal (metal)\nModula3 (m3,mg,ig,i3)\nModule-Definition (def)\nMonkey C (mc)\nMoonbit (mbt)\nMQL Header (mqh)\nMQL4 (mq4)\nMQL5 (mq5)\nMSBuild (csproj,vbproj,fsproj,vcproj,vcxproj,vcxproj.filters,ilproj,myapp,props,rdlc,resx,settings,sln,targets)\nMUMPS (mps)\nMustache (mustache)\nNial (ndf)\nNim (nim)\nNix (nix)\nNushell (nu)\nnuspec (nuspec)\nObjective C (m)\nObjective C++ (mm)\nOCaml (ml,mli)\nOdin (odin)\nOpalang (opa)\nOpenQASM (qasm)\nOrg (org)\nOz (oz)\nPascal (pas)\nPatch (patch)\nPerl (pl,pm)\nPHP (php)\nPicat (pi)\nPKGBUILD (pkgbuild)\nPkl (pkl)\nPL/SQL (fnc,pkb,pks,prc,trg,vw)\nPlain Text (text,txt)\nPolly (polly)\nPony (pony)\nPowershell (ps1,psm1)\nProcessing (pde)\nProlog (p,pro)\nProperties File (properties)\nProtocol Buffers (proto)\nPRQL (prql)\nPSL Assertion (psl)\nPuppet (pp)\nPureScript (purs)\nPython (py,pyw,pyi)\nQ# (qs)\nQCL (qcl)\nQML (qml)\nR (r)\nRacket (rkt)\nRakefile (rake,rakefile)\nRaku (raku,rakumod,rakutest,rakudoc,t)\nRazor (cshtml,razor)\nReasonML (re,rei)\nRedscript (reds)\nReport Definition Language (rdl)\nReScript (res,resi)\nReStructuredText (rst)\nRobot Framework (robot)\nRuby (rb)\nRuby HTML (rhtml,erb)\nRust (rs)\nSAS (sas)\nSass (sass,scss)\nScala (sc,scala)\nScheme (scm,ss)\nScons (csig,sconstruct,sconscript)\nsed (sed)\nShell (sh,.tcshrc)\nSieve (sieve)\nSKILL (il)\nSlang (slang)\nSlint (slint)\nSmalltalk (cs.st,pck.st)\nSmarty Template (tpl)\nSnakemake (smk,rules,snakefile)\nSNOBOL (sno)\nSoftbridge Basic (sbl)\nSolidity (sol)\nSPDX (spdx)\nSpecman e (e)\nSpice Netlist (ckt)\nSPL (spl)\nSQL (sql,dml,ddl,dql)\nSRecode Template (srt)\nStan (stan)\nStandard ML (SML) (sml)\nStata (do,ado)\nStylus (styl)\nSvelte (svelte)\nSVG (svg)\nSwift (swift)\nSwig (i)\nSystemd (automount,device,link,mount,path,scope,service,slice,socket,swap,target,timer)\nSystemVerilog (sv,svh)\nTaskPaper (taskpaper)\nTCL (tcl)\nTeal (teal)\nTempl (templ)\nTemplateToolkit (tt,tt2)\nTera (tera)\nTerraform (tf,tf.json)\nTeX (tex,sty)\nTextile (textile)\nThrift (thrift)\nTL (tl)\nTOML (toml)\nTTCN-3 (ttcn,ttcn3,ttcnpp)\nTwig Template (twig)\nTypeScript (ts,tsx)\nTypeScript Typings (d.ts)\nTypeSpec (tsp)\nTypst (typ)\nUnreal Script (uc,uci,upkg)\nUp (up)\nUr/Web (ur,urs)\nUr/Web Project (urp)\nV (v)\nVala (vala)\nVarnish Configuration (vcl)\nVerilog (vg,vh,v)\nVerilog Args File (irunargs,xrunargs)\nVertex Shader File (vsh)\nVHDL (vhd,vhdl)\nVim Script (vim,vimrc,gvimrc,_vimrc,.vimrc,_gvimrc,.gvimrc,vimrc,gvimrc)\nVisual Basic (vb)\nVisual Basic for Applications (cls)\nVue (vue)\nWeb Services Description Language (wsdl)\nWebGPU Shading Language (wgsl)\nwenyan (wy)\nWindows Resource-Definition Script (rc)\nWISE Jobfile (fgmj)\nWolfram (nb,wl)\nWren (wren)\nXAML (xaml)\nXcode Config (xcconfig)\nXML (xml)\nXML Schema (xsd)\nXtend (xtend)\nYAML (yaml,yml)\nYarn (yarn)\nZig (zig)\nZoKrates (zok)\nZsh (zsh,zshenv,zlogin,zlogout,zprofile,zshrc,.zshenv,.zlogin,.zlogout,.zprofile,.zshrc)\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0732421875,
          "content": "MIT License \n\nCopyright (c) 2021 Ben Boyter\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice (including the next paragraph) shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 53.72265625,
          "content": "Sloc Cloc and Code (scc)\n------------------------\n\n<img alt=\"scc\" src=https://github.com/boyter/scc/raw/master/scc.jpg>\n\nA tool similar to cloc, sloccount and tokei. For counting the lines of code, blank lines, comment lines, and physical lines of source code in many programming languages.\n\nGoal is to be the fastest code counter possible, but also perform COCOMO calculation like sloccount, estimate code complexity similar to cyclomatic complexity calculators and produce unique lines of code or DRYness metrics. In short one tool to rule them all.\n\nAlso it has a very short name which is easy to type `scc`. \n\nIf you don't like sloc cloc and code feel free to use the name `Succinct Code Counter`.\n\n[![Go](https://github.com/boyter/scc/actions/workflows/go.yml/badge.svg)](https://github.com/boyter/scc/actions/workflows/go.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/boyter/scc)](https://goreportcard.com/report/github.com/boyter/scc)\n[![Coverage Status](https://coveralls.io/repos/github/boyter/scc/badge.svg?branch=master)](https://coveralls.io/github/boyter/scc?branch=master)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n[![Mentioned in Awesome Go](https://awesome.re/mentioned-badge.svg)](https://github.com/avelino/awesome-go)\n\nLicensed under MIT licence.\n\n## Table of Contents\n\n- [Support](#support)\n- [Install](#install)\n- [Background](#background)\n- [Pitch](#pitch)\n- [Usage](#usage)\n- [Complexity Estimates](#complexity-estimates)\n- [Unique Lines of Code (ULOC)](#unique-lines-of-code-uloc)\n- [COCOMO](#cocomo)\n- [Output Formats](#output-formats)\n- [Performance](#performance)\n- [Development](#development)\n- [Adding/Modifying Languages](#addingmodifying-languages)\n- [Issues](#issues)\n- [Badges (beta)](#badges-beta)\n- [Language Support](LANGUAGES.md)\n\n### Support\n\nUsing `scc` commercially? If you want priority support for `scc` you can purchase a years worth https://boyter.gumroad.com/l/kgenuv which entitles you to priority direct email support from the developer.\n\n### Install\n\n#### Go Install\n\nYou can install `scc` by using the standard go toolchain.\n\nTo install the latest stable version of scc:\n\n`go install github.com/boyter/scc/v3@latest`\n\nTo install a development version:\n\n`go install github.com/boyter/scc/v3@master`\n\nNote that `scc` needs go version >= 1.22.\n\n#### Snap\n\nA [snap install](https://snapcraft.io/scc) exists thanks to [Ricardo](https://feliciano.tech/).\n\n`$ sudo snap install scc`\n\n*NB* Snap installed applications cannot run outside of `/home` https://askubuntu.com/questions/930437/permission-denied-error-when-running-apps-installed-as-snap-packages-ubuntu-17 so you may encounter issues if you use snap and attempt to run outside this directory.\n\n#### Homebrew\n\nOr if you have [Homebrew](https://brew.sh/) installed\n\n`$ brew install scc`\n\n#### MacPorts\n\nOn macOS, you can also install via [MacPorts](https://www.macports.org)\n\n`$ sudo port install scc`\n\n#### Scoop\n\nOr if you are using [Scoop](https://scoop.sh/) on Windows\n\n`$ scoop install scc`\n\n#### Chocolatey\n\nOr if you are using [Chocolatey](https://chocolatey.org/) on Windows\n\n`$ choco install scc`\n\n#### WinGet\n\nOr if you are using [WinGet](https://github.com/microsoft/winget-cli) on Windows\n\n`winget install --id benboyter.scc --source winget`\n\n#### FreeBSD\n\nOn FreeBSD, scc is available as a package\n\n`$ pkg install scc`\n\nOr, if you prefer to build from source, you can use the ports tree\n\n`$ cd /usr/ports/devel/scc && make install clean`\n\n### Run in Docker\n\nGo to the directory you want to run scc from.\n\nRun the command below to run the latest release of scc on your current working directory:\n\n```\ndocker run --rm -it -v \"$PWD:/pwd\"  ghcr.io/lhoupert/scc:master scc /pwd\n```\n\n#### Manual\n\nBinaries for Windows, GNU/Linux and macOS for both i386 and x86_64 machines are available from the [releases](https://github.com/boyter/scc/releases) page.\n\n#### GitLab\n\nhttps://about.gitlab.com/blog/2023/02/15/code-counting-in-gitlab/\n\n#### Other\n\nIf you would like to assist with getting `scc` added into apt/chocolatey/etc... please submit a PR or at least raise an issue with instructions.\n\n### Background\n\nRead all about how it came to be along with performance benchmarks,\n\n - https://boyter.org/posts/sloc-cloc-code/\n - https://boyter.org/posts/why-count-lines-of-code/\n - https://boyter.org/posts/sloc-cloc-code-revisited/\n - https://boyter.org/posts/sloc-cloc-code-performance/\n - https://boyter.org/posts/sloc-cloc-code-performance-update/\n\nSome reviews of `scc`\n\n - https://nickmchardy.com/2018/10/counting-lines-of-code-in-koi-cms.html\n - https://www.feliciano.tech/blog/determine-source-code-size-and-complexity-with-scc/\n - https://metaredux.com/posts/2019/12/13/counting-lines.html\n\nA talk given at the first GopherCon AU about `scc` (press S to see speaker notes)\n\n - https://boyter.org/static/gophercon-syd-presentation/\n - https://www.youtube.com/watch?v=jd-sjoy3GZo\n\nFor performance see the [Performance](https://github.com/boyter/scc#performance) section\n\nOther similar projects,\n\n - [SLOCCount](https://www.dwheeler.com/sloccount/) the original sloc counter\n - [cloc](https://github.com/AlDanial/cloc), inspired by SLOCCount; implemented in Perl for portability\n - [gocloc](https://github.com/hhatto/gocloc) a sloc counter in Go inspired by tokei\n - [loc](https://github.com/cgag/loc) rust implementation similar to tokei but often faster\n - [loccount](https://gitlab.com/esr/loccount) Go implementation written and maintained by ESR\n - [polyglot](https://github.com/vmchale/polyglot) ATS sloc counter\n - [tokei](https://github.com/XAMPPRocky/tokei) fast, accurate and written in rust\n - [sloc](https://github.com/flosse/sloc) coffeescript code counter\n - [stto](https://github.com/mainak55512/stto) new Go code counter with a focus on performance\n\nInteresting reading about other code counting projects tokei, loc, polyglot and loccount\n\n - https://www.reddit.com/r/rust/comments/59bm3t/a_fast_cloc_replacement_in_rust/\n - https://www.reddit.com/r/rust/comments/82k9iy/loc_count_lines_of_code_quickly/\n - http://blog.vmchale.com/article/polyglot-comparisons\n - http://esr.ibiblio.org/?p=8270\n\nFurther reading about processing files on the disk performance\n\n - https://blog.burntsushi.net/ripgrep/\n\nUsing `scc` to process 40 TB of files from GitHub/Bitbucket/GitLab\n\n - https://boyter.org/posts/an-informal-survey-of-10-million-github-bitbucket-gitlab-projects/\n\n### Pitch\n\nWhy use `scc`?\n\n - It is very fast and gets faster the more CPU you throw at it\n - Accurate\n - Works very well across multiple platforms without slowdown (Windows, Linux, macOS)\n - Large language support\n - Can ignore duplicate files\n - Has complexity estimations\n - You need to tell the difference between Coq and Verilog in the same directory\n - cloc yaml output support so potentially a drop in replacement for some users\n - Can identify or ignore minified files\n - Able to identify many #! files ADVANCED! https://github.com/boyter/scc/issues/115\n - Can ignore large files by lines or bytes\n - Can calculate the ULOC or unique lines of code by file, language or project\n - Supports multiple output formats for integration, CSV, SQL, JSON, HTML and more\n\nWhy not use `scc`?\n\n - You don't like Go for some reason\n - It cannot count D source with different nested multi-line comments correctly https://github.com/boyter/scc/issues/27\n\n### Differences\n\nThere are some important differences between `scc` and other tools that are out there. Here are a few important ones for you to consider.\n\nBlank lines inside comments are counted as comments. While the line is technically blank the decision was made that \nonce in a comment everything there should be considered a comment until that comment is ended. As such the following,\n \n```\n/* blank lines follow\n\n\n*/\n```\n\nWould be counted as 4 lines of comments. This is noticeable when comparing scc's output to other tools on large\nrepositories.\n\n`scc` is able to count verbatim strings correctly. For example in C# the following,\n\n```\nprivate const string BasePath = @\"a:\\\";\n// The below is returned to the user as a version\nprivate const string Version = \"1.0.0\";\n```\n\nBecause of the prefixed @ this string ends at the trailing \" by ignoring the escape character \\ and as such should be \ncounted as 2 code lines and 1 comment. Some tools are unable to\ndeal with this and instead count up to the \"1.0.0\" as a string which can cause the middle comment to be counted as\ncode rather than a comment.\n\n`scc` will also tell you the number of bytes it has processed (for most output formats) allowing you to estimate the\ncost of running some static analysis tools. \n\n### Usage\n\nCommand line usage of `scc` is designed to be as simple as possible.\nFull details can be found in `scc --help` or `scc -h`. Note that the below reflects the state of master not a release, as such\nfeatures listed below may be missing from your installation.\n\n```\nSloc, Cloc and Code. Count lines of code in a directory with complexity estimation.\nVersion 3.5.0 (beta)\nBen Boyter <ben@boyter.org> + Contributors\n\nUsage:\n  scc [flags] [files or directories]\n\nFlags:\n      --avg-wage int                       average wage value used for basic COCOMO calculation (default 56286)\n      --binary                             disable binary file detection\n      --by-file                            display output for every file\n  -m, --character                          calculate max and mean characters per line\n      --ci                                 enable CI output settings where stdout is ASCII\n      --cocomo-project-type string         change COCOMO model type [organic, semi-detached, embedded, \"custom,1,1,1,1\"] (default \"organic\")\n      --count-as string                    count extension as language [e.g. jsp:htm,chead:\"C Header\" maps extension jsp to html and chead to C Header]\n      --count-ignore                       set to allow .gitignore and .ignore files to be counted\n      --currency-symbol string             set currency symbol (default \"$\")\n      --debug                              enable debug output\n      --directory-walker-job-workers int   controls the maximum number of workers which will walk the directory tree (default 8)\n  -a, --dryness                            calculate the DRYness of the project (implies --uloc)\n      --eaf float                          the effort adjustment factor derived from the cost drivers (1.0 if rated nominal) (default 1)\n      --exclude-dir strings                directories to exclude (default [.git,.hg,.svn])\n  -x, --exclude-ext strings                ignore file extensions (overrides include-ext) [comma separated list: e.g. go,java,js]\n  -n, --exclude-file strings               ignore files with matching names (default [package-lock.json,Cargo.lock,yarn.lock,pubspec.lock,Podfile.lock,pnpm-lock.yaml])\n      --file-gc-count int                  number of files to parse before turning the GC on (default 10000)\n      --file-list-queue-size int           the size of the queue of files found and ready to be read into memory (default 8)\n      --file-process-job-workers int       number of goroutine workers that process files collecting stats (default 8)\n      --file-summary-job-queue-size int    the size of the queue used to hold processed file statistics before formatting (default 8)\n  -f, --format string                      set output format [tabular, wide, json, json2, csv, csv-stream, cloc-yaml, html, html-table, sql, sql-insert, openmetrics] (default \"tabular\")\n      --format-multi string                have multiple format output overriding --format [e.g. tabular:stdout,csv:file.csv,json:file.json]\n      --gen                                identify generated files\n      --generated-markers strings          string markers in head of generated files (default [do not edit,<auto-generated />])\n  -h, --help                               help for scc\n  -i, --include-ext strings                limit to file extensions [comma separated list: e.g. go,java,js]\n      --include-symlinks                   if set will count symlink files\n  -l, --languages                          print supported languages and extensions\n      --large-byte-count int               number of bytes a file can contain before being removed from output (default 1000000)\n      --large-line-count int               number of lines a file can contain before being removed from output (default 40000)\n      --min                                identify minified files\n  -z, --min-gen                            identify minified or generated files\n      --min-gen-line-length int            number of bytes per average line for file to be considered minified or generated (default 255)\n      --no-cocomo                          remove COCOMO calculation output\n  -c, --no-complexity                      skip calculation of code complexity\n  -d, --no-duplicates                      remove duplicate files from stats and output\n      --no-gen                             ignore generated files in output (implies --gen)\n      --no-gitignore                       disables .gitignore file logic\n      --no-gitmodule                       disables .gitmodules file logic\n      --no-hborder                         remove horizontal borders between sections\n      --no-ignore                          disables .ignore file logic\n      --no-large                           ignore files over certain byte and line size set by large-line-count and large-byte-count\n      --no-min                             ignore minified files in output (implies --min)\n      --no-min-gen                         ignore minified or generated files in output (implies --min-gen)\n      --no-scc-ignore                      disables .sccignore file logic\n      --no-size                            remove size calculation output\n  -M, --not-match stringArray              ignore files and directories matching regular expression\n  -o, --output string                      output filename (default stdout)\n      --overhead float                     set the overhead multiplier for corporate overhead (facilities, equipment, accounting, etc.) (default 2.4)\n  -p, --percent                            include percentage values in output\n      --remap-all string                   inspect every file and remap by checking for a string and remapping the language [e.g. \"-*- C++ -*-\":\"C Header\"]\n      --remap-unknown string               inspect files of unknown type and remap by checking for a string and remapping the language [e.g. \"-*- C++ -*-\":\"C Header\"]\n      --size-unit string                   set size unit [si, binary, mixed, xkcd-kb, xkcd-kelly, xkcd-imaginary, xkcd-intel, xkcd-drive, xkcd-bakers] (default \"si\")\n      --sloccount-format                   print a more SLOCCount like COCOMO calculation\n  -s, --sort string                        column to sort by [files, name, lines, blanks, code, comments, complexity] (default \"files\")\n      --sql-project string                 use supplied name as the project identifier for the current run. Only valid with the --format sql or sql-insert option\n  -t, --trace                              enable trace output (not recommended when processing multiple files)\n  -u, --uloc                               calculate the number of unique lines of code (ULOC) for the project\n  -v, --verbose                            verbose output\n      --version                            version for scc\n  -w, --wide                               wider output with additional statistics (implies --complexity)\n```\n\nOutput should look something like the below for the redis project\n\n```\n$ scc redis \n───────────────────────────────────────────────────────────────────────────────\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n───────────────────────────────────────────────────────────────────────────────\nC                          296    180267    20367     31679   128221      32548\nC Header                   215     32362     3624      6968    21770       1636\nTCL                        143     28959     3130      1784    24045       2340\nShell                       44      1658      222       326     1110        187\nAutoconf                    22     10871     1038      1326     8507        953\nLua                         20       525       68        70      387         65\nMarkdown                    16      2595      683         0     1912          0\nMakefile                    11      1363      262       125      976         59\nRuby                        10       795       78        78      639        116\ngitignore                   10       162       16         0      146          0\nYAML                         6       711       46         8      657          0\nHTML                         5      9658     2928        12     6718          0\nC++                          4       286       48        14      224         31\nLicense                      4       100       20         0       80          0\nPlain Text                   3       185       26         0      159          0\nCMake                        2       214       43         3      168          4\nCSS                          2       107       16         0       91          0\nPython                       2       219       12         6      201         34\nSystemd                      2        80        6         0       74          0\nBASH                         1       118       14         5       99         31\nBatch                        1        28        2         0       26          3\nC++ Header                   1         9        1         3        5          0\nExtensible Styleshe…         1        10        0         0       10          0\nSmarty Template              1        44        1         0       43          5\nm4                           1       562      116        53      393          0\n───────────────────────────────────────────────────────────────────────────────\nTotal                      823    271888    32767     42460   196661      38012\n───────────────────────────────────────────────────────────────────────────────\nEstimated Cost to Develop (organic) $6,918,301\nEstimated Schedule Effort (organic) 28.682292 months\nEstimated People Required (organic) 21.428982\n───────────────────────────────────────────────────────────────────────────────\nProcessed 9425137 bytes, 9.425 megabytes (SI)\n───────────────────────────────────────────────────────────────────────────────\n```\n\nNote that you don't have to specify the directory you want to run against. Running `scc` will assume you want to run against the current directory.\n\nYou can also run against multiple files or directories `scc directory1 directory2 file1 file2` with the results aggregated in the output.\n\nSince `scc` writes to standard output, there are many ways to easily share the results. For example, using [netcat](https://manpages.org/nc)\nand [one of many pastebins](https://paste.c-net.org/) gives a public URL:\n\n```\n$ scc | nc paste.c-net.org 9999\nhttps://paste.c-net.org/Example\n```\n\n### Ignore Files\n\n`scc` mostly supports .ignore files inside directories that it scans. This is similar to how ripgrep, ag and tokei work. .ignore files are 100% the same as .gitignore files with the same syntax, and as such `scc` will ignore files and directories listed in them. You can add .ignore files to ignore things like vendored dependency checked in files and such. The idea is allowing you to add a file or folder to git and have ignored in the count.\n\nIt also supports its own ignore file `.sccignore` if you want `scc` to ignore things while having ripgrep, ag, tokei and others support them.\n\n### Interesting Use Cases\n\nUsed inside Intel Nemu Hypervisor to track code changes between revisions https://github.com/intel/nemu/blob/topic/virt-x86/tools/cloc-change.sh#L9\nAppears to also be used inside both http://codescoop.com/ https://pinpoint.com/ https://github.com/chaoss/grimoirelab-graal\n\nIt also is used to count code and guess language types in https://searchcode.com/ which makes it one of the most frequently run code counters in the world. \n\nYou can also hook scc into your gitlab pipeline https://gitlab.com/guided-explorations/ci-cd-plugin-extensions/ci-cd-plugin-extension-scc\n\nAlso used by CodeQL https://github.com/boyter/scc/pull/317 and Scaleway https://twitter.com/Scaleway/status/1488087029476995074?s=20&t=N2-z6O-ISDdDzULg4o4uVQ\n\n- https://docs.linuxfoundation.org/lfx/insights/v3-beta-version-current/getting-started/landing-page/cocomo-cost-estimation-simplified\n- https://openems.io/\n\n### Features\n\n`scc` uses a small state machine in order to determine what state the code is when it reaches a newline `\\n`. As such it is aware of and able to count\n\n - Single Line Comments\n - Multi Line Comments\n - Strings\n - Multi Line Strings\n - Blank lines\n\nBecause of this it is able to accurately determine if a comment is in a string or is actually a comment.\n\nIt also attempts to count the complexity of code. This is done by checking for branching operations in the code. For example, each of the following `for if switch while else || && != ==` if encountered in Java would increment that files complexity by one.\n\n### Complexity Estimates\n\nLet's take a minute to discuss the complexity estimate itself.\n\nThe complexity estimate is really just a number that is only comparable to files in the same language. It should not be used to compare languages directly without weighting them. The reason for this is that its calculated by looking for branch and loop statements in the code and incrementing a counter for that file.\n\nBecause some languages don't have loops and instead use recursion they can have a lower complexity count. Does this mean they are less complex? Probably not, but the tool cannot see this because it does not build an AST of the code as it only scans through it.\n\nGenerally though the complexity there is to help estimate between projects written in the same language, or for finding the most complex file in a project `scc --by-file -s complexity` which can be useful when you are estimating on how hard something is to maintain, or when looking for those files that should probably be refactored.\n\nAs for how it works.\n\nIt's my own definition, but tries to be an approximation of cyclomatic complexity https://en.wikipedia.org/wiki/Cyclomatic_complexity although done only on a file level. \n\nThe reason it's an approximation is that it's calculated almost for free from a CPU point of view (since its a cheap lookup when counting), whereas a real cyclomatic complexity count would need to parse the code. It gives a reasonable guess in practice though even if it fails to identify recursive methods. The goal was never for it to be exact.\n\nIn short when scc is looking through what it has identified as code if it notices what are usually branch conditions it will increment a counter.\n\nThe conditions it looks for are compiled into the code and you can get an idea for them by looking at the JSON inside the repository. See https://github.com/boyter/scc/blob/master/languages.json#L3869 for an example of what it's looking at for a file that's Java.\n\nThe increment happens for each of the matching conditions and produces the number you see.\n\n### Unique Lines of Code (ULOC)\n\nULOC stands for Unique Lines of Code and represents the unique lines across languages, files and the project itself. This idea was taken from\nhttps://cmcenroe.me/2018/12/14/uloc.html where the calculation is presented using standard Unix tools `sort -u *.h *.c | wc -l`. This metric is\nthere to assist with the estimation of complexity within the project. Quoting the source\n\n> In my opinion, the number this produces should be a better estimate of the complexity of a project. Compared to SLOC, not only are blank lines discounted, but so are close-brace lines and other repetitive code such as common includes. On the other hand, ULOC counts comments, which require just as much maintenance as the code around them does, while avoiding inflating the result with license headers which appear in every file, for example.\n\nYou can obtain the ULOC by supplying the `-u` or `--uloc` argument to `scc`.\n\nIt has a corresponding metric `DRYness %` which is the percentage of ULOC to CLOC or `DRYness = ULOC / SLOC`. The \nhigher the number the more DRY (don't repeat yourself) the project can be considered. In general a higher value\nhere is a better as it indicates less duplicated code. The DRYness metric was taken from a comment by minimax https://lobste.rs/s/has9r7/uloc_unique_lines_code \n\nTo obtain the DRYness metric you can use the `-a` or `--dryness` argument to `scc`, which will implicitly set `--uloc`.\n\nNote that there is a performance penalty when calculating the ULOC metrics which can double the runtime.\n\nRunning the uloc and DRYness calculations against C code a clone of redis produces an output as follows.\n\n```\n$ scc -a -i c redis \n───────────────────────────────────────────────────────────────────────────────\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n───────────────────────────────────────────────────────────────────────────────\nC                          419    241293    27309     41292   172692      40849\n(ULOC)                            133535\n───────────────────────────────────────────────────────────────────────────────\nTotal                      419    241293    27309     41292   172692      40849\n───────────────────────────────────────────────────────────────────────────────\nUnique Lines of Code (ULOC)       133535\nDRYness %                           0.55\n───────────────────────────────────────────────────────────────────────────────\nEstimated Cost to Develop (organic) $6,035,748\nEstimated Schedule Effort (organic) 27.23 months\nEstimated People Required (organic) 19.69\n───────────────────────────────────────────────────────────────────────────────\nProcessed 8407821 bytes, 8.408 megabytes (SI)\n───────────────────────────────────────────────────────────────────────────────\n```\n\nFurther reading about the ULOC calculation can be found at https://boyter.org/posts/sloc-cloc-code-new-metic-uloc/\n\n### COCOMO\n\nThe COCOMO statistics displayed at the bottom of any command line run can be configured as needed.\n\n```\nEstimated Cost to Develop (organic) $664,081\nEstimated Schedule Effort (organic) 11.772217 months\nEstimated People Required (organic) 5.011633\n```\n\nTo change the COCOMO parameters, you can either use one of the default COCOMO models.\n\n```\nscc --cocomo-project-type organic\nscc --cocomo-project-type semi-detached\nscc --cocomo-project-type embedded\n```\n\nYou can also supply your own parameters if you are familiar with COCOMO as follows,\n\n```\nscc --cocomo-project-type \"custom,1,1,1,1\"\n```\n\nSee below for details about how the model choices, and the parameters they use.\n\nOrganic – A software project is said to be an organic type if the team size required is adequately small, the\nproblem is well understood and has been solved in the past and also the team members have a nominal experience\nregarding the problem.\n\n`scc --cocomo-project-type \"organic,2.4,1.05,2.5,0.38\"`\n\nSemi-detached – A software project is said to be a Semi-detached type if the vital characteristics such as team-size,\nexperience, knowledge of the various programming environment lie in between that of organic and Embedded.\nThe projects classified as Semi-Detached are comparatively less familiar and difficult to develop compared to\nthe organic ones and require more experience and better guidance and creativity. Eg: Compilers or\ndifferent Embedded Systems can be considered of Semi-Detached type.\n\n`scc --cocomo-project-type \"semi-detached,3.0,1.12,2.5,0.35\"`\n\nEmbedded – A software project with requiring the highest level of complexity, creativity, and experience\nrequirement fall under this category. Such software requires a larger team size than the other two models\nand also the developers need to be sufficiently experienced and creative to develop such complex models.\n\n`scc --cocomo-project-type \"embedded,3.6,1.20,2.5,0.32\"`\n\n### Large File Detection\n\nYou can have `scc` exclude large files from the output. \n\nThe option to do so is `--no-large` which by default will exclude files over 1,000,000 bytes or 40,000 lines.\n\nYou can control the size of either value using `--large-byte-count` or `--large-line-count`.\n\nFor example to exclude files over 1,000 lines and 50kb you could use the following,\n\n`scc --no-large --large-byte-count 50000 --large-line-count 1000`\n\n### Minified/Generated File Detection\n\nYou can have `scc` identify and optionally remove files identified as being minified or generated from the output.\n\nYou can do so by enabling the `-z` flag like so `scc -z` which will identify any file with an average line byte size >= 255 (by default) as being minified.\n\nMinified files appear like so in the output.\n\n```\n$ scc --no-cocomo -z ./examples/minified/jquery-3.1.1.min.js\n───────────────────────────────────────────────────────────────────────────────\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n───────────────────────────────────────────────────────────────────────────────\nJavaScript (min)             1         4        0         1        3         17\n───────────────────────────────────────────────────────────────────────────────\nTotal                        1         4        0         1        3         17\n───────────────────────────────────────────────────────────────────────────────\nProcessed 86709 bytes, 0.087 megabytes (SI)\n───────────────────────────────────────────────────────────────────────────────\n```\n\nMinified files are indicated with the text `(min)` after the language name.\n\nGenerated files are indicated with the text `(gen)` after the language name.\n\nYou can control the average line byte size using `--min-gen-line-length` such as `scc -z --min-gen-line-length 1`. Please note you need `-z` as modifying this value does not imply minified detection.\n\nYou can exclude minified files from the count totally using the flag `--no-min-gen`. Files which match the minified check will be excluded from the output.\n\n### Remapping\n\nSome files may not have an extension. They will be checked to see if they are a #! file. If they are then the language will be remapped to the \ncorrect language. Otherwise, it will not process.\n\nHowever, you may have the situation where you want to remap such files based on a string inside it. To do so you can use `--remap-unknown`\n\n```\n scc --remap-unknown \"-*- C++ -*-\":\"C Header\"\n```\n\nThe above will inspect any file with no extension looking for the string `-*- C++ -*-` and if found remap the file to be counted using the C Header rules. \nYou can have multiple remap rules if required,\n\n```\n scc --remap-unknown \"-*- C++ -*-\":\"C Header\",\"other\":\"Java\"\n```\n\nThere is also the `--remap-all` parameter which will remap all files.\n\nNote that in all cases if the remap rule does not apply normal #! rules will apply.\n\n### Output Formats\n\nBy default `scc` will output to the console. However, you can produce output in other formats if you require.\n\nThe different options are `tabular, wide, json, csv, csv-stream, cloc-yaml, html, html-table, sql, sql-insert, openmetrics`. \n\nNote that you can write `scc` output to disk using the `-o, --output` option. This allows you to specify a file to\nwrite your output to. For example `scc -f html -o output.html` will run `scc` against the current directory, and output\nthe results in html to the file `output.html`.\n\nYou can also write to multiple output files, or multiple types to stdout if you want using the `--format-multi` option. This is \nmost useful when working in CI/CD systems where you want HTML reports as an artifact while also displaying the counts in stdout. \n\n```\nscc --format-multi \"tabular:stdout,html:output.html,csv:output.csv\"\n```\n\nThe above will run against the current directory, outputting to standard output the default output, as well as writing\nto output.html and output.csv with the appropriate formats.\n\n#### Tabular \n\nThis is the default output format when scc is run.\n\n#### Wide \n\nWide produces some additional information which is the complexity/lines metric. This can be useful when trying to\nidentify the most complex file inside a project based on the complexity estimate.\n\n#### JSON\n\nJSON produces JSON output. Mostly designed to allow `scc` to feed into other programs.\n\nNote that this format will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed.\n\n#### CSV\n\nCSV as an option is good for importing into a spreadsheet for analysis. \n\nNote that this format will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed. Also note that CSV respects `--by-file` and as such will return a summary by default.\n\n#### CSV-Stream\n\ncsv-stream is an option useful for processing very large repositories where you are likely to run into memory issues. It's output format is 100% the same as CSV. \n\nNote that you should not use this with the `format-multi` option as it will always print to standard output, and because of how it works will negate the memory saving it normally gains.\nsavings that this option provides. Note that there is no sort applied with this option. \n\n#### cloc-yaml \n\nIs a drop in replacement for cloc using its yaml output option. This is quite often used for passing into other \nbuild systems and can help with replacing cloc if required.\n\n```\n$ scc -f cloc-yml processor\n# https://github.com/boyter/scc/\nheader:\n  url: https://github.com/boyter/scc/\n  version: 2.11.0\n  elapsed_seconds: 0.008\n  n_files: 21\n  n_lines: 6562\n  files_per_second: 2625\n  lines_per_second: 820250\nGo:\n  name: Go\n  code: 5186\n  comment: 273\n  blank: 1103\n  nFiles: 21\nSUM:\n  code: 5186\n  comment: 273\n  blank: 1103\n  nFiles: 21\n\n$ cloc --yaml processor\n      21 text files.\n      21 unique files.\n       0 files ignored.\n\n---\n# http://cloc.sourceforge.net\nheader :\n  cloc_url           : http://cloc.sourceforge.net\n  cloc_version       : 1.60\n  elapsed_seconds    : 0.196972846984863\n  n_files            : 21\n  n_lines            : 6562\n  files_per_second   : 106.613679608407\n  lines_per_second   : 33314.2364566841\nGo:\n  nFiles: 21\n  blank: 1137\n  comment: 606\n  code: 4819\nSUM:\n  blank: 1137\n  code: 4819\n  comment: 606\n  nFiles: 21\n```\n\n#### HTML and HTML-TABLE\n\nThe HTML output options produce a minimal html report using a table that is either standalone `html` or as just a table `html-table`\nwhich can be injected into your own HTML pages. The only difference between the two is that the `html` option includes \nhtml head and body tags with minimal styling.\n\nThe markup is designed to allow your own custom styles to be applied. An example report\n[is here to view](SCC-OUTPUT-REPORT.html).\n\nNote that the HTML options follow the command line options, so you can use `scc --by-file -f html` to produce a report with every\nfile and not just the summary.\n\nNote that this format if it has the `--by-file` option will give you the byte size of every file `scc` reads allowing you to get a breakdown of the\nnumber of bytes processed.\n\n#### SQL and SQL-Insert\n\nThe SQL output format \"mostly\" compatible with cloc's SQL output format https://github.com/AlDanial/cloc#sql-\n\nWhile all queries on the cloc documentation should work as expected, you will not be able to append output from `scc` and `cloc` into the same database. This is because the table format is slightly different\nto account for scc including complexity counts and bytes.\n\nThe difference between `sql` and `sql-insert` is that `sql` will include table creation while the latter will only have the insert commands.\n\nUsage is 100% the same as any other `scc` command but sql output will always contain per file details. You can compute totals yourself using SQL, however COCOMO calculations will appear against the metadata table as the columns `estimated_cost` `estimated_schedule_months` and `estimated_people`.\n\nThe below will run scc against the current directory, name the output as the project scc and then pipe the output to sqlite to put into the database code.db\n\n```\nscc --format sql --sql-project scc . | sqlite3 code.db\n```\n\nAssuming you then wanted to append another project\n\n```\nscc --format sql-insert --sql-project redis . | sqlite3 code.db\n```\n\nYou could then run SQL against the database,\n\n```\nsqlite3 code.db 'select project,file,max(nCode) as nL from t\n                         group by project order by nL desc;'\n```\n\nSee the cloc documentation for more examples.\n\n\n#### OpenMetrics\n\n[OpenMetrics](https://openmetrics.io/) is a metric reporting format specification extending the Prometheus exposition text format.\n\nThe produced output is natively supported by [Prometheus](https://prometheus.io/) and [GitLab CI](https://docs.gitlab.com/ee/ci/metrics_reports.html)\n\nNote that OpenMetrics respects `--by-file` and as such will return a summary by default.\n\nThe output includes a metadata header containing definitions of the returned metrics: \n```text\n# TYPE scc_files count\n# HELP scc_files Number of sourcecode files.\n# TYPE scc_lines count\n# UNIT scc_lines lines\n# HELP scc_lines Number of lines.\n# TYPE scc_code count\n# HELP scc_code Number of lines of actual code.\n# TYPE scc_comments count\n# HELP scc_comments Number of comments.\n# TYPE scc_blanks count\n# HELP scc_blanks Number of blank lines.\n# TYPE scc_complexity count\n# HELP scc_complexity Code complexity.\n# TYPE scc_bytes count\n# UNIT scc_bytes bytes\n# HELP scc_bytes Size in bytes.\n```\n\nThe header is followed by the metric data in either language summary form:\n```text\nscc_files{language=\"Go\"} 1\nscc_lines{language=\"Go\"} 1000\nscc_code{language=\"Go\"} 1000\nscc_comments{language=\"Go\"} 1000\nscc_blanks{language=\"Go\"} 1000\nscc_complexity{language=\"Go\"} 1000\nscc_bytes{language=\"Go\"} 1000\n```\n\nor, if `--by-file` is present, in per file form:\n```text\nscc_lines{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_code{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_comments{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_blanks{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_complexity{language=\"Go\",file=\"./bbbb.go\"} 1000\nscc_bytes{language=\"Go\",file=\"./bbbb.go\"} 1000\n```\n\n### Performance\n\nGenerally `scc` will the fastest code counter compared to any I am aware of and have compared against. The below comparisons are taken from the fastest alternative counters. See `Other similar projects` above to see all of the other code counters compared against. It is designed to scale to as many CPU's cores as you can provide.\n\nHowever, if you want greater performance and you have RAM to spare you can disable the garbage collector like the following on Linux `GOGC=-1 scc .` which should speed things up considerably. For some repositories turning off the code complexity calculation via `-c` can reduce runtime as well.\n\nBenchmarks are run on fresh 48 Core CPU Optimised Digital Ocean Virtual Machine 2024/09/30 all done using [hyperfine](https://github.com/sharkdp/hyperfine).\n\nSee https://github.com/boyter/scc/blob/master/benchmark.sh to see how the benchmarks are run.\n\n\n#### Valkey https://github.com/valkey-io/valkey\n\n```shell\nBenchmark 1: scc valkey\n  Time (mean ± σ):      28.0 ms ±   1.6 ms    [User: 166.1 ms, System: 55.0 ms]\n  Range (min … max):    24.7 ms …  31.5 ms    114 runs\n \nBenchmark 2: scc -c valkey\n  Time (mean ± σ):      25.8 ms ±   1.7 ms    [User: 123.7 ms, System: 53.2 ms]\n  Range (min … max):    23.3 ms …  29.3 ms    114 runs\n \nBenchmark 3: tokei valkey\n  Time (mean ± σ):      63.0 ms ±   3.8 ms    [User: 433.8 ms, System: 244.3 ms]\n  Range (min … max):    46.7 ms …  67.6 ms    44 runs\n \nBenchmark 4: polyglot valkey\n  Time (mean ± σ):      27.4 ms ±   0.8 ms    [User: 46.5 ms, System: 79.0 ms]\n  Range (min … max):    25.7 ms …  29.5 ms    108 runs\n \nSummary\n  scc -c valkey ran\n    1.06 ± 0.08 times faster than polyglot valkey\n    1.08 ± 0.09 times faster than scc valkey\n    2.44 ± 0.22 times faster than tokei valkey\n```\n\n#### CPython https://github.com/python/cpython\n\n```shell\nBenchmark 1: scc cpython\n  Time (mean ± σ):      81.9 ms ±   4.2 ms    [User: 789.6 ms, System: 164.6 ms]\n  Range (min … max):    74.0 ms …  89.6 ms    36 runs\n \nBenchmark 2: scc -c cpython\n  Time (mean ± σ):      75.4 ms ±   4.6 ms    [User: 621.9 ms, System: 152.6 ms]\n  Range (min … max):    68.4 ms …  84.5 ms    37 runs\n \nBenchmark 3: tokei cpython\n  Time (mean ± σ):     162.1 ms ±   3.4 ms    [User: 1824.0 ms, System: 420.4 ms]\n  Range (min … max):   156.7 ms … 168.9 ms    18 runs\n \nBenchmark 4: polyglot cpython\n  Time (mean ± σ):      94.2 ms ±   3.0 ms    [User: 210.3 ms, System: 260.3 ms]\n  Range (min … max):    88.3 ms …  99.4 ms    30 runs\n \nSummary\n  scc -c cpython ran\n    1.09 ± 0.09 times faster than scc cpython\n    1.25 ± 0.09 times faster than polyglot cpython\n    2.15 ± 0.14 times faster than tokei cpython\n```\n\n#### Linux Kernel https://github.com/torvalds/linux\n\n```shell\nBenchmark 1: scc linux\n  Time (mean ± σ):      1.070 s ±  0.036 s    [User: 15.253 s, System: 1.962 s]\n  Range (min … max):    1.011 s …  1.133 s    10 runs\n \nBenchmark 2: scc -c linux\n  Time (mean ± σ):      1.007 s ±  0.039 s    [User: 9.822 s, System: 1.937 s]\n  Range (min … max):    0.915 s …  1.043 s    10 runs\n \nBenchmark 3: tokei linux\n  Time (mean ± σ):      1.094 s ±  0.019 s    [User: 19.416 s, System: 11.085 s]\n  Range (min … max):    1.067 s …  1.135 s    10 runs\n \nBenchmark 4: polyglot linux\n  Time (mean ± σ):      1.387 s ±  0.028 s    [User: 3.775 s, System: 3.212 s]\n  Range (min … max):    1.359 s …  1.433 s    10 runs\n \nSummary\n  scc -c linux ran\n    1.06 ± 0.05 times faster than scc linux\n    1.09 ± 0.05 times faster than tokei linux\n    1.38 ± 0.06 times faster than polyglot linux\n```\n\n#### Sourcegraph https://github.com/SINTEF/sourcegraph.git\n\nSourcegraph has gone dark since I last ran these benchmarks hence using a clone taken before this occured.\nThe reason for this is to track what appears to be a performance regression in tokei.\n\n\n```shell\nBenchmark 1: scc sourcegraph\n  Time (mean ± σ):     125.1 ms ±   8.0 ms    [User: 638.1 ms, System: 218.0 ms]\n  Range (min … max):   116.7 ms … 141.3 ms    24 runs\n \nBenchmark 2: scc -c sourcegraph\n  Time (mean ± σ):     119.8 ms ±   8.3 ms    [User: 554.8 ms, System: 208.6 ms]\n  Range (min … max):   111.9 ms … 138.4 ms    22 runs\n \nBenchmark 3: tokei sourcegraph\n  Time (mean ± σ):     23.888 s ±  1.416 s    [User: 73.858 s, System: 630.906 s]\n  Range (min … max):   22.292 s … 27.010 s    10 runs\n \nBenchmark 4: polyglot sourcegraph\n  Time (mean ± σ):     113.3 ms ±   4.1 ms    [User: 237.7 ms, System: 791.8 ms]\n  Range (min … max):   107.9 ms … 124.3 ms    26 runs\n \nSummary\n  polyglot sourcegraph ran\n    1.06 ± 0.08 times faster than scc -c sourcegraph\n    1.10 ± 0.08 times faster than scc sourcegraph\n  210.86 ± 14.66 times faster than tokei sourcegraph\n\n```\n\nIf you enable duplicate detection expect performance to fall by about 20% in `scc`.\n\nPerformance is tracked for some releases and presented below.\n\n<img alt=\"scc\" src=https://github.com/boyter/scc/raw/master/performance-over-time.png>\n\nThe decrease in performance from the 3.3.0 release was due to accurate .gitignore, .ignore and .gitmodule support.\nCurrent work is focussed on resolving this.\n\nhttps://jsfiddle.net/mw21h9va/\n\n### CI/CD Support\n\nSome CI/CD systems which will remain nameless do not work very well with the box-lines used by `scc`. To support those systems better there is an option `--ci` which will change the default output to ASCII only.\n\n```\n$ scc --ci main.go\n-------------------------------------------------------------------------------\nLanguage                 Files     Lines   Blanks  Comments     Code Complexity\n-------------------------------------------------------------------------------\nGo                           1       272        7         6      259          4\n-------------------------------------------------------------------------------\nTotal                        1       272        7         6      259          4\n-------------------------------------------------------------------------------\nEstimated Cost to Develop $6,539\nEstimated Schedule Effort 2.268839 months\nEstimated People Required 0.341437\n-------------------------------------------------------------------------------\nProcessed 5674 bytes, 0.006 megabytes (SI)\n-------------------------------------------------------------------------------\n```\n\nThe `--format-multi` option is especially useful in CI/CD where you want to get multiple output formats useful for storage or reporting.\n\n### Development\n\nIf you want to hack away feel free! PR's are accepted. Some things to keep in mind. If you want to change a language definition you need to update `languages.json` and then run `go generate` which will convert it into the `processor/constants.go` file.\n\nFor all other changes ensure you run all tests before submitting. You can do so using `go test ./...`. However, for maximum coverage please run `test-all.sh` which will run `gofmt`, unit tests, race detector and then all of the integration tests. All of those must pass to ensure a stable release.\n\n### API Support\n\nThe core part of `scc` which is the counting engine is exposed publicly to be integrated into other Go applications. See https://github.com/pinpt/ripsrc for an example of how to do this. \n\nIt also powers all of the code calculations displayed in https://searchcode.com/ such as https://searchcode.com/file/169350674/main.go/ making it one of the more used code counters in the world.\n\nHowever as a quick start consider the following,\n\nNote that you must pass in the number of bytes in the content in order to ensure it is counted!\n\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/boyter/scc/v3/processor\"\n)\n\ntype statsProcessor struct{}\n\nfunc (p *statsProcessor) ProcessLine(job *processor.FileJob, currentLine int64, lineType processor.LineType) bool {\n\tswitch lineType {\n\tcase processor.LINE_BLANK:\n\t\tfmt.Println(currentLine, \"lineType\", \"BLANK\")\n\tcase processor.LINE_CODE:\n\t\tfmt.Println(currentLine, \"lineType\", \"CODE\")\n\tcase processor.LINE_COMMENT:\n\t\tfmt.Println(currentLine, \"lineType\", \"COMMENT\")\n\t}\n\treturn true\n}\n\nfunc main() {\n\tbts, _ := ioutil.ReadFile(\"somefile.go\")\n\n\tt := &statsProcessor{}\n\tfilejob := &processor.FileJob{\n\t\tFilename: \"test.go\",\n\t\tLanguage: \"Go\",\n\t\tContent:  bts,\n\t\tCallback: t,\n\t\tBytes:    int64(len(bts)),\n\t}\n\n\tprocessor.ProcessConstants() // Required to load the language information and need only be done once\n\tprocessor.CountStats(filejob)\n}\n```\n\n\n### Adding/Modifying Languages\n\nTo add or modify a language you will need to edit the `languages.json` file in the root of the project, and then run `go generate` to build it into the application. You can then `go install` or `go build` as normal to produce the binary with your modifications.\n\n### Issues\n\nIts possible that you may see the counts vary between runs. This usually means one of two things. Either something is changing or locking the files under scc, or that you are hitting ulimit restrictions. To change the ulimit see the following links.\n\n - https://superuser.com/questions/261023/how-to-change-default-ulimit-values-in-mac-os-x-10-6#306555\n - https://unix.stackexchange.com/questions/108174/how-to-persistently-control-maximum-system-resource-consumption-on-mac/221988#221988\n - https://access.redhat.com/solutions/61334\n - https://serverfault.com/questions/356962/where-are-the-default-ulimit-values-set-linux-centos\n - https://www.tecmint.com/increase-set-open-file-limits-in-linux/\n\nTo help identify this issue run scc like so `scc -v .` and look for the message `too many open files` in the output. If it is there you can rectify it by setting your ulimit to a higher value.\n\n### Low Memory\n\nIf you are running `scc` in a low memory environment < 512 MB of RAM you may need to set `--file-gc-count` to a lower value such as `0` to force the garbage collector to be on at all times.\n\nA sign that this is required will be `scc` crashing with panic errors.\n\n### Tests\n\nscc is pretty well tested with many unit, integration and benchmarks to ensure that it is fast and complete.\n\n### Package\n\nPackaging as of version v3.1.0 is done through https://goreleaser.com/ \n\n### Containers\n\nNote if you plan to run `scc` in Alpine containers you will need to build with CGO_ENABLED=0.\n\nSee the below Dockerfile as an example on how to achieve this based on this issue https://github.com/boyter/scc/issues/208\n\n```\nFROM golang as scc-get\n\nENV GOOS=linux \\\nGOARCH=amd64 \\\nCGO_ENABLED=0\n\nARG VERSION\nRUN git clone --branch $VERSION --depth 1 https://github.com/boyter/scc\nWORKDIR /go/scc\nRUN go build -ldflags=\"-s -w\"\n\nFROM alpine\nCOPY --from=scc-get /go/scc/scc /bin/\nENTRYPOINT [\"scc\"]\n```\n\n### Badges (beta)\n\nYou can use `scc` to provide badges on your github/bitbucket/gitlab/sr.ht open repositories. For example, [![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n The format to do so is,\n\nhttps://sloc.xyz/PROVIDER/USER/REPO\n\nAn example of the badge for `scc` is included below, and is used on this page.\n\n```\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/)](https://github.com/boyter/scc/)\n```\n\nBy default the badge will show the repo's lines count. You can also specify for it to show a different category, by using the `?category=` query string. \n\nValid values include `code, blanks, lines, comments, cocomo` and examples of the appearance are included below.\n\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=code)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=blanks)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=lines)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=comments)](https://github.com/boyter/scc/)\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc/?category=cocomo)](https://github.com/boyter/scc/)\n\nFor `cocomo` you can also set the `avg-wage` value similar to `scc` itself. For example,\n\nhttps://sloc.xyz/github/boyter/scc/?category=cocomo&avg-wage=1\nhttps://sloc.xyz/github/boyter/scc/?category=cocomo&avg-wage=100000 \n\nNote that the avg-wage value must be a positive integer otherwise it will revert back to the default value of 56286.\n\nYou can also configure the look and feel of the bad using the following parameters,\n\n - ?lower=true will lower the title text, so \"Total lines\" would be \"total lines\"\n\nThe below can control the colours of shadows, fonts and badges\n\n - ?font-color=fff\n - ?font-shadow-color=010101\n - ?top-shadow-accent-color=bbb\n - ?title-bg-color=555\n - ?badge-bg-color=4c1\n\nAn example of using some of these parameters to produce an admittedly ugly result\n\n[![Scc Count Badge](https://sloc.xyz/github/boyter/scc?font-color=ff0000&badge-bg-color=0000ff&lower=true)](https://github.com/boyter/scc/)\n\n*NB* it may not work for VERY large repositories (has been tested on Apache hadoop/spark without issue).\n\nYou can find the source code for badges in the repository at https://github.com/boyter/scc/blob/master/cmd/badges/main.go \n\n#### A example for each supported provider\n\n- Github - https://sloc.xyz/github/boyter/scc/\n- sr.ht - https://sloc.xyz/sr.ht/~nektro/magnolia-desktop/\n- Bitbucket - https://sloc.xyz/bitbucket/boyter/decodingcaptchas\n- Gitlab - https://sloc.xyz/gitlab/esr/loccount\n\n### Languages\n\nList of supported languages. The master version of `scc` supports 322 languages at last count. Note that this is always assumed that you built from master, and it might trail behind what is actually supported. To see what your version of `scc` supports run `scc --languages`\n\n[Click here to view all languages supported by master](LANGUAGES.md)\n\n\n### Release Checklist\n\n- Update version\n- Push code with release number\n- Tag off\n- Release via goreleaser\n- Update dockerfile\n"
        },
        {
          "name": "SCC-OUTPUT-REPORT.html",
          "type": "blob",
          "size": 5.1357421875,
          "content": "<html lang=\"en\"><head><meta charset=\"utf-8\" /><title>scc html output</title><style>table { border-collapse: collapse; }td, th { border: 1px solid #999; padding: 0.5rem; text-align: left;}</style></head><body><table id=\"scc-table\">\n\t<thead><tr>\n\t\t<th>Language</th>\n\t\t<th>Files</th>\n\t\t<th>Lines</th>\n\t\t<th>Blank</th>\n\t\t<th>Comment</th>\n\t\t<th>Code</th>\n\t\t<th>Complexity</th>\n\t\t<th>Bytes</th>\n\t\t<th>Uloc</th>\n\t</tr></thead>\n\t<tbody><tr>\n\t\t<th>Go</th>\n\t\t<th>27</th>\n\t\t<th>9589</th>\n\t\t<th>1464</th>\n\t\t<th>447</th>\n\t\t<th>7678</th>\n\t\t<th>1413</th>\n\t\t<th>256040</th>\n\t\t<th>4138</th>\n\t</tr><tr>\n\t\t<td>processor/workers_test.go</td>\n\t\t<td></td>\n\t\t<td>1586</td>\n\t\t<td>296</td>\n\t\t<td>33</td>\n\t\t<td>1257</td>\n\t\t<td>287</td>\n\t\t<td>32293</td>\n\t\t<td>525</td>\n\t</tr><tr>\n\t\t<td>processor/formatters.go</td>\n\t\t<td></td>\n\t\t<td>1519</td>\n\t\t<td>208</td>\n\t\t<td>39</td>\n\t\t<td>1272</td>\n\t\t<td>163</td>\n\t\t<td>44422</td>\n\t\t<td>790</td>\n\t</tr><tr>\n\t\t<td>processor/formatters_test.go</td>\n\t\t<td></td>\n\t\t<td>1464</td>\n\t\t<td>156</td>\n\t\t<td>3</td>\n\t\t<td>1305</td>\n\t\t<td>120</td>\n\t\t<td>34175</td>\n\t\t<td>385</td>\n\t</tr><tr>\n\t\t<td>processor/workers.go</td>\n\t\t<td></td>\n\t\t<td>871</td>\n\t\t<td>129</td>\n\t\t<td>91</td>\n\t\t<td>651</td>\n\t\t<td>225</td>\n\t\t<td>25570</td>\n\t\t<td>494</td>\n\t</tr><tr>\n\t\t<td>processor/processor.go</td>\n\t\t<td></td>\n\t\t<td>678</td>\n\t\t<td>142</td>\n\t\t<td>104</td>\n\t\t<td>432</td>\n\t\t<td>94</td>\n\t\t<td>19596</td>\n\t\t<td>442</td>\n\t</tr><tr>\n\t\t<td>main.go</td>\n\t\t<td></td>\n\t\t<td>432</td>\n\t\t<td>10</td>\n\t\t<td>6</td>\n\t\t<td>416</td>\n\t\t<td>8</td>\n\t\t<td>9726</td>\n\t\t<td>271</td>\n\t</tr><tr>\n\t\t<td>processor/detector_test.go</td>\n\t\t<td></td>\n\t\t<td>393</td>\n\t\t<td>87</td>\n\t\t<td>2</td>\n\t\t<td>304</td>\n\t\t<td>101</td>\n\t\t<td>7258</td>\n\t\t<td>149</td>\n\t</tr><tr>\n\t\t<td>cmd/badges/main.go</td>\n\t\t<td></td>\n\t\t<td>375</td>\n\t\t<td>60</td>\n\t\t<td>17</td>\n\t\t<td>298</td>\n\t\t<td>59</td>\n\t\t<td>9660</td>\n\t\t<td>240</td>\n\t</tr><tr>\n\t\t<td>processor/workers_tokei_test.go</td>\n\t\t<td></td>\n\t\t<td>249</td>\n\t\t<td>37</td>\n\t\t<td>2</td>\n\t\t<td>210</td>\n\t\t<td>40</td>\n\t\t<td>4027</td>\n\t\t<td>125</td>\n\t</tr><tr>\n\t\t<td>processor/detector.go</td>\n\t\t<td></td>\n\t\t<td>237</td>\n\t\t<td>44</td>\n\t\t<td>33</td>\n\t\t<td>160</td>\n\t\t<td>57</td>\n\t\t<td>6243</td>\n\t\t<td>152</td>\n\t</tr><tr>\n\t\t<td>processor/file_test.go</td>\n\t\t<td></td>\n\t\t<td>213</td>\n\t\t<td>50</td>\n\t\t<td>1</td>\n\t\t<td>162</td>\n\t\t<td>37</td>\n\t\t<td>4585</td>\n\t\t<td>97</td>\n\t</tr><tr>\n\t\t<td>processor/structs.go</td>\n\t\t<td></td>\n\t\t<td>201</td>\n\t\t<td>21</td>\n\t\t<td>18</td>\n\t\t<td>162</td>\n\t\t<td>17</td>\n\t\t<td>6033</td>\n\t\t<td>141</td>\n\t</tr><tr>\n\t\t<td>cmd/badges/main_test.go</td>\n\t\t<td></td>\n\t\t<td>199</td>\n\t\t<td>6</td>\n\t\t<td>0</td>\n\t\t<td>193</td>\n\t\t<td>10</td>\n\t\t<td>4088</td>\n\t\t<td>106</td>\n\t</tr><tr>\n\t\t<td>processor/workers_regression_test.go</td>\n\t\t<td></td>\n\t\t<td>189</td>\n\t\t<td>38</td>\n\t\t<td>5</td>\n\t\t<td>146</td>\n\t\t<td>40</td>\n\t\t<td>3402</td>\n\t\t<td>93</td>\n\t</tr><tr>\n\t\t<td>processor/file.go</td>\n\t\t<td></td>\n\t\t<td>167</td>\n\t\t<td>24</td>\n\t\t<td>16</td>\n\t\t<td>127</td>\n\t\t<td>50</td>\n\t\t<td>3766</td>\n\t\t<td>99</td>\n\t</tr><tr>\n\t\t<td>cmd/badges/simplecache.go</td>\n\t\t<td></td>\n\t\t<td>161</td>\n\t\t<td>28</td>\n\t\t<td>13</td>\n\t\t<td>120</td>\n\t\t<td>20</td>\n\t\t<td>3070</td>\n\t\t<td>94</td>\n\t</tr><tr>\n\t\t<td>processor/processor_test.go</td>\n\t\t<td></td>\n\t\t<td>151</td>\n\t\t<td>36</td>\n\t\t<td>1</td>\n\t\t<td>114</td>\n\t\t<td>21</td>\n\t\t<td>2573</td>\n\t\t<td>66</td>\n\t</tr><tr>\n\t\t<td>cmd/badges/simplecache_test.go</td>\n\t\t<td></td>\n\t\t<td>102</td>\n\t\t<td>21</td>\n\t\t<td>3</td>\n\t\t<td>78</td>\n\t\t<td>17</td>\n\t\t<td>1999</td>\n\t\t<td>53</td>\n\t</tr><tr>\n\t\t<td>processor/structs_test.go</td>\n\t\t<td></td>\n\t\t<td>96</td>\n\t\t<td>11</td>\n\t\t<td>1</td>\n\t\t<td>84</td>\n\t\t<td>10</td>\n\t\t<td>1982</td>\n\t\t<td>57</td>\n\t</tr><tr>\n\t\t<td>scripts/include.go</td>\n\t\t<td></td>\n\t\t<td>87</td>\n\t\t<td>18</td>\n\t\t<td>9</td>\n\t\t<td>60</td>\n\t\t<td>19</td>\n\t\t<td>2288</td>\n\t\t<td>63</td>\n\t</tr><tr>\n\t\t<td>processor/filereader.go</td>\n\t\t<td></td>\n\t\t<td>52</td>\n\t\t<td>10</td>\n\t\t<td>10</td>\n\t\t<td>32</td>\n\t\t<td>6</td>\n\t\t<td>1316</td>\n\t\t<td>37</td>\n\t</tr><tr>\n\t\t<td>processor/cocomo.go</td>\n\t\t<td></td>\n\t\t<td>43</td>\n\t\t<td>6</td>\n\t\t<td>18</td>\n\t\t<td>19</td>\n\t\t<td>0</td>\n\t\t<td>2209</td>\n\t\t<td>35</td>\n\t</tr><tr>\n\t\t<td>processor/bloom.go</td>\n\t\t<td></td>\n\t\t<td>37</td>\n\t\t<td>7</td>\n\t\t<td>12</td>\n\t\t<td>18</td>\n\t\t<td>2</td>\n\t\t<td>1062</td>\n\t\t<td>29</td>\n\t</tr><tr>\n\t\t<td>processor/cocomo_test.go</td>\n\t\t<td></td>\n\t\t<td>37</td>\n\t\t<td>8</td>\n\t\t<td>4</td>\n\t\t<td>25</td>\n\t\t<td>6</td>\n\t\t<td>686</td>\n\t\t<td>23</td>\n\t</tr><tr>\n\t\t<td>processor/helpers_test.go</td>\n\t\t<td></td>\n\t\t<td>26</td>\n\t\t<td>6</td>\n\t\t<td>1</td>\n\t\t<td>19</td>\n\t\t<td>4</td>\n\t\t<td>434</td>\n\t\t<td>18</td>\n\t</tr><tr>\n\t\t<td>processor/helpers.go</td>\n\t\t<td></td>\n\t\t<td>18</td>\n\t\t<td>4</td>\n\t\t<td>4</td>\n\t\t<td>10</td>\n\t\t<td>0</td>\n\t\t<td>378</td>\n\t\t<td>14</td>\n\t</tr><tr>\n\t\t<td>processor/constants.go</td>\n\t\t<td></td>\n\t\t<td>6</td>\n\t\t<td>1</td>\n\t\t<td>1</td>\n\t\t<td>4</td>\n\t\t<td>0</td>\n\t\t<td>23199</td>\n\t\t<td>6</td>\n\t</tr></tbody>\n\t<tfoot><tr>\n\t\t<th>Total</th>\n\t\t<th>27</th>\n\t\t<th>9589</th>\n\t\t<th>1464</th>\n\t\t<th>447</th>\n\t\t<th>7678</th>\n\t\t<th>1413</th>\n\t\t<th>256040</th>\n\t\t<th>4138</th>\n\t</tr>\n\t<tr>\n\t\t<th colspan=\"9\">Estimated Cost to Develop (organic) $229,670<br>Estimated Schedule Effort (organic) 7.86 months<br>Estimated People Required (organic) 2.59<br></th>\n\t</tr></tfoot>\n\t</table></body></html>\n"
        },
        {
          "name": "benchmark.sh",
          "type": "blob",
          "size": 9.8876953125,
          "content": "#!/bin/bash\n\n# Assumes we need to install everything from scratch on a box for benchmarking\n# Also assumes we have copied the ./examples/performance_tests/create_performance_test.py file to where this is run\n\napt update\napt install --assume-yes build-essential unzip tmux htop\n\nrm *.zip\nrm *.gz\nwget https://github.com/boyter/scc/releases/download/v1.0.0/scc-1.0.0-x86_64-unknown-linux.zip\nunzip scc-1.0.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.0.0\n\nwget https://github.com/boyter/scc/releases/download/v1.1.0/scc-1.1.0-x86_64-unknown-linux.zip\nunzip scc-1.1.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.1.0\n\nwget https://github.com/boyter/scc/releases/download/v1.2.0/scc-1.2.0-x86_64-unknown-linux.zip\nunzip scc-1.2.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.2.0\n\nwget https://github.com/boyter/scc/releases/download/untagged-928286b8064e2cf6dd35/scc-1.3.0-x86_64-unknown-linux.zip\nunzip scc-1.3.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.3.0\n\nwget https://github.com/boyter/scc/releases/download/v1.4.0/scc-1.4.0-x86_64-unknown-linux.zip\nunzip scc-1.4.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.4.0\n\nwget https://github.com/boyter/scc/releases/download/v1.5.0/scc-1.5.0-x86_64-unknown-linux.zip\nunzip scc-1.5.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.5.0\n\nwget https://github.com/boyter/scc/releases/download/v1.6.0/scc-1.6.0-x86_64-unknown-linux.zip\nunzip scc-1.6.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.6.0\n\nwget https://github.com/boyter/scc/releases/download/v1.7.0/scc-1.7.0-x86_64-unknown-linux.zip\nunzip scc-1.7.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.7.0\n\nwget https://github.com/boyter/scc/releases/download/v1.8.0/scc-1.8.0-x86_64-unknown-linux.zip\nunzip scc-1.8.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.8.0\n\nwget https://github.com/boyter/scc/releases/download/v1.9.0/scc-1.9.0-x86_64-unknown-linux.zip\nunzip scc-1.9.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.9.0\n\n# Whoops... the name was not set correctly...\nrm scc-1.0.0-x86_64-unknown-linux.zip\nwget https://github.com/boyter/scc/releases/download/v1.10.0/scc-1.0.0-x86_64-unknown-linux.zip\nunzip scc-1.0.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.10.0\n\nwget https://github.com/boyter/scc/releases/download/v1.11.0/scc-1.11.0-x86_64-unknown-linux.zip\nunzip scc-1.11.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.11.0\n\nwget https://github.com/boyter/scc/releases/download/v1.12.0/scc-1.12.0-x86_64-unknown-linux.zip\nunzip scc-1.12.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.12.0\n\nwget https://github.com/boyter/scc/releases/download/v1.12.1/scc-1.12.1-x86_64-unknown-linux.zip\nunzip scc-1.12.1-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc1.12.1\n\nwget https://github.com/boyter/scc/releases/download/v2.0.0/scc-2.0.0-x86_64-unknown-linux.zip\nunzip scc-2.0.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.0.0\n\nwget https://github.com/boyter/scc/releases/download/v2.1.0/scc-2.1.0-x86_64-unknown-linux.zip\nunzip scc-2.1.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.1.0\n\nwget https://github.com/boyter/scc/releases/download/v2.2.0/scc-2.2.0-x86_64-unknown-linux.zip\nunzip scc-2.2.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.2.0\n\nwget https://github.com/boyter/scc/releases/download/v2.3.0/scc-2.3.0-x86_64-unknown-linux.zip\nunzip scc-2.3.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.3.0\n\nwget https://github.com/boyter/scc/releases/download/v2.4.0/scc-2.4.0-x86_64-unknown-linux.zip\nunzip scc-2.4.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.4.0\n\nwget https://github.com/boyter/scc/releases/download/v2.5.0/scc-2.5.0-x86_64-unknown-linux.zip\nunzip scc-2.5.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.5.0\n\nwget https://github.com/boyter/scc/releases/download/v2.6.0/scc-2.6.0-x86_64-unknown-linux.zip\nunzip scc-2.6.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.6.0\n\nwget https://github.com/boyter/scc/releases/download/v2.7.0/scc-2.7.0-x86_64-unknown-linux.zip\nunzip scc-2.7.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.7.0\n\nwget https://github.com/boyter/scc/releases/download/v2.8.0/scc-2.8.0-x86_64-unknown-linux.zip\nunzip scc-2.8.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.8.0\n\nwget https://github.com/boyter/scc/releases/download/v2.9.0/scc-2.9.0-x86_64-unknown-linux.zip\nunzip scc-2.9.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.9.0\n\nwget https://github.com/boyter/scc/releases/download/v2.9.1/scc-2.9.1-x86_64-unknown-linux.zip\nunzip scc-2.9.1-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.9.1\n\nwget https://github.com/boyter/scc/releases/download/v2.10.0/scc-2.10.0-x86_64-unknown-linux.zip\nunzip scc-2.10.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.10.0\n\nwget https://github.com/boyter/scc/releases/download/v2.11.0/scc-2.11.0-x86_64-unknown-linux.zip\nunzip scc-2.11.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.11.0\n\nwget https://github.com/boyter/scc/releases/download/v2.12.0/scc-2.12.0-x86_64-unknown-linux.zip\nunzip scc-2.12.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.12.0\n\nwget https://github.com/boyter/scc/releases/download/v2.13.0/scc-2.13.0-x86_64-unknown-linux.zip\nunzip scc-2.13.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc2.13.0\n\nwget https://github.com/boyter/scc/releases/download/v3.0.0/scc-3.0.0-x86_64-unknown-linux.zip\nunzip scc-3.0.0-x86_64-unknown-linux.zip\nmv scc /usr/local/bin/scc3.0.0\n\nwget https://github.com/boyter/scc/releases/download/v3.1.0/scc_3.1.0_Linux_x86_64.tar.gz\ntar zxvf scc_3.1.0_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.1.0\n\nwget https://github.com/boyter/scc/releases/download/v3.2.0/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.2.0\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.3.0/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.3.0\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.3.2/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.3.2\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.3.3/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.3.3\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.3.4/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.3.4\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.3.4/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\nmv scc /usr/local/bin/scc3.3.4\nrm scc_Linux_x86_64.tar.gz\n\nwget https://github.com/boyter/scc/releases/download/v3.4.0/scc_Linux_x86_64.tar.gz\ntar zxvf scc_Linux_x86_64.tar.gz\ncp scc /usr/local/bin/scc3.4.0\nmv scc /usr/local/bin/scc\nrm scc_Linux_x86_64.tar.gz\n\n\n# Now setup comparison applications starting with hyperfine which we compare against\n\nwget https://github.com/sharkdp/hyperfine/releases/download/v1.18.0/hyperfine-v1.18.0-x86_64-unknown-linux-musl.tar.gz\ntar zxvf hyperfine-v1.18.0-x86_64-unknown-linux-musl.tar.gz\nmv hyperfine-v1.18.0-x86_64-unknown-linux-musl/hyperfine /usr/local/bin/hyperfine\nchmod +x /usr/local/bin/hyperfine\n\n# Now the comparison applications\n\nwget https://github.com/XAMPPRocky/tokei/releases/download/v12.1.2/tokei-x86_64-unknown-linux-musl.tar.gz\ntar zxvf tokei-x86_64-unknown-linux-musl.tar.gz\nchmod +x ./tokei\nmv ./tokei /usr/local/bin/\n\nwget https://github.com/vmchale/polyglot/releases/download/0.5.29/poly-x86_64-unknown-linux-gcc-9\nmv poly-x86_64-unknown-linux-gcc-9 /usr/local/bin/polyglot\nchmod +x /usr/local/bin/polyglot\n\n# Now setup all of the benchmarks\n\n# Clone the stuff we want to test\nrm -rf valkey\nrm -rf cpython\nrm -rf linux\nrm -rf sourcegraph\n\ngit clone --depth=1 https://github.com/valkey-io/valkey.git\ngit clone --depth=1 https://github.com/python/cpython.git\ngit clone --depth=1 https://github.com/torvalds/linux.git\ngit clone --depth=1 https://github.com/SINTEF/sourcegraph.git\n\n# Regression test all versions of scc\necho \"Sanity check it all works\"\nhyperfine 'scc1.0.0 valkey' 'scc1.1.0 valkey' 'scc1.2.0 valkey' 'scc1.3.0 valkey' 'scc1.4.0 valkey' 'scc1.5.0 valkey' 'scc1.6.0 valkey' 'scc1.7.0 valkey' 'scc1.8.0 valkey' 'scc1.9.0 valkey' 'scc1.10.0 valkey' 'scc1.11.0 valkey' 'scc1.12.0 valkey' 'scc1.12.1 valkey' 'scc2.0.0 valkey' 'scc2.1.0 valkey' 'scc2.2.0 valkey' 'scc2.3.0 valkey' 'scc2.4.0 valkey' 'scc2.5.0 valkey' 'scc2.6.0 valkey' 'scc2.7.0 valkey' 'scc2.8.0 valkey' 'scc2.9.0 valkey' 'scc2.9.1 valkey' 'scc2.10.0 valkey' 'scc2.11.0 valkey' 'scc2.12.0 valkey' 'scc2.13.0 valkey' 'scc3.0.0 valkey' 'scc3.1.0 valkey' 'scc3.2.0 valkey' 'scc3.3.0 valkey' 'scc3.3.2 valkey' 'scc3.3.3 valkey' 'scc3.3.4 valkey' 'scc3.4.0 valkey'\n\necho \"Running regression benchmark\"\nhyperfine 'scc1.0.0 linux' 'scc1.1.0 linux' 'scc1.2.0 linux' 'scc1.3.0 linux' 'scc1.4.0 linux' 'scc1.5.0 linux' 'scc1.6.0 linux' 'scc1.7.0 linux' 'scc1.8.0 linux' 'scc1.9.0 linux' 'scc1.10.0 linux' 'scc1.11.0 linux' 'scc1.12.0 linux' 'scc1.12.1 linux' 'scc2.0.0 linux' 'scc2.1.0 linux' 'scc2.2.0 linux' 'scc2.3.0 linux' 'scc2.4.0 linux' 'scc2.5.0 linux' 'scc2.6.0 linux' 'scc2.7.0 linux' 'scc2.8.0 linux' 'scc2.9.0 linux' 'scc2.9.1 linux' 'scc2.10.0 linux' 'scc2.11.0 linux' 'scc2.12.0 linux' 'scc2.13.0 linux' 'scc3.0.0 linux' 'scc3.1.0 linux' 'scc3.2.0 linux' 'scc3.3.0 linux' 'scc3.3.2 linux' 'scc3.3.3 linux' 'scc3.3.4 linux' 'scc3.4.0 linux' > benchmark_regression.txt\n\n# Benchmark against everything\necho \"Running valkey benchmark\"\nhyperfine 'scc valkey' 'scc -c valkey' 'tokei valkey' 'polyglot valkey' > benchmark_valkey.txt\n\necho \"Running cpython benchmark\"\nhyperfine 'scc cpython' 'scc -c cpython' 'tokei cpython' 'polyglot cpython' > benchmark_cpython.txt\n\necho \"Running sourcegraph benchmark\"\nhyperfine 'scc sourcegraph' 'scc -c sourcegraph' 'tokei sourcegraph' 'polyglot sourcegraph' > benchmark_sourcegraph.txt\n\necho \"Running linux benchmark\"\nhyperfine 'scc linux' 'scc -c linux' 'tokei linux' 'polyglot linux' > benchmark_linux.txt\n\necho \"All done!\""
        },
        {
          "name": "cmd",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.833984375,
          "content": "module github.com/boyter/scc/v3\n\ngo 1.22\n\nrequire (\n\tgithub.com/boyter/gocodewalker v1.3.5\n\tgithub.com/json-iterator/go v1.1.12\n\tgithub.com/mattn/go-runewidth v0.0.15\n\tgithub.com/rs/zerolog v1.30.0\n\tgithub.com/spf13/cobra v1.8.1\n\tgolang.org/x/crypto v0.31.0\n\tgolang.org/x/text v0.21.0\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tgithub.com/danwakefield/fnmatch v0.0.0-20160403171240-cbb64ac3d964 // indirect\n\tgithub.com/inconshreveable/mousetrap v1.1.0 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/rivo/uniseg v0.4.7 // indirect\n\tgithub.com/spf13/pflag v1.0.5 // indirect\n\tgolang.org/x/sync v0.10.0 // indirect\n\tgolang.org/x/sys v0.28.0 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.51171875,
          "content": "github.com/boyter/gocodewalker v1.3.5 h1:0FIqU/EGscYzDG9o9770CRhb0esbaDeiaBEYZ4dSCpg=\ngithub.com/boyter/gocodewalker v1.3.5/go.mod h1:hXG8xzR1uURS+99P5/3xh3uWHjaV2XfoMMmvPyhrCDg=\ngithub.com/coreos/go-systemd/v22 v22.5.0/go.mod h1:Y58oyj3AT4RCenI/lSvhwexgC+NSVTIJ3seZv2GcEnc=\ngithub.com/cpuguy83/go-md2man/v2 v2.0.4/go.mod h1:tgQtvFlXSQOSOSIRvRPT7W67SCa46tRHOmNcaadrF8o=\ngithub.com/danwakefield/fnmatch v0.0.0-20160403171240-cbb64ac3d964 h1:y5HC9v93H5EPKqaS1UYVg1uYah5Xf51mBfIoWehClUQ=\ngithub.com/danwakefield/fnmatch v0.0.0-20160403171240-cbb64ac3d964/go.mod h1:Xd9hchkHSWYkEqJwUGisez3G1QY8Ryz0sdWrLPMGjLk=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/godbus/dbus/v5 v5.0.4/go.mod h1:xhWf0FNVPg57R7Z0UbKHbJfkEywrmjJnf7w5xrFpKfA=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/inconshreveable/mousetrap v1.1.0 h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=\ngithub.com/inconshreveable/mousetrap v1.1.0/go.mod h1:vpF70FUmC8bwa3OWnCshd2FqLfsEA9PFc4w1p2J65bw=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=\ngithub.com/mattn/go-colorable v0.1.13 h1:fFA4WZxdEF4tXPZVKMLwD8oUnCTTo08duU7wxecdEvA=\ngithub.com/mattn/go-colorable v0.1.13/go.mod h1:7S9/ev0klgBDR4GtXTXX8a3vIGJpMovkB8vQcUbaXHg=\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\ngithub.com/mattn/go-isatty v0.0.16/go.mod h1:kYGgaQfpe5nmfYZH+SKPsOc2e4SrIfOl2e/yFXSvRLM=\ngithub.com/mattn/go-isatty v0.0.19 h1:JITubQf0MOLdlGRuRq+jtsDlekdYPia9ZFsB8h/APPA=\ngithub.com/mattn/go-isatty v0.0.19/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rs/xid v1.5.0/go.mod h1:trrq9SKmegXys3aeAKXMUTdJsYXVwGY3RLcfgqegfbg=\ngithub.com/rs/zerolog v1.30.0 h1:SymVODrcRsaRaSInD9yQtKbtWqwsfoPcRff/oRXLj4c=\ngithub.com/rs/zerolog v1.30.0/go.mod h1:/tk+P47gFdPXq4QYjvCmT5/Gsug2nagsFWBWhAiSi1w=\ngithub.com/russross/blackfriday/v2 v2.1.0/go.mod h1:+Rmxgy9KzJVeS9/2gXHxylqXiyQDYRxCVz55jmeOWTM=\ngithub.com/spf13/cobra v1.8.1 h1:e5/vxKd/rZsfSJMUX1agtjeTDf+qv1/JdBF8gg5k9ZM=\ngithub.com/spf13/cobra v1.8.1/go.mod h1:wHxEcudfqmLYa8iTfL+OuZPbBZkmvliBWKIezN3kD9Y=\ngithub.com/spf13/pflag v1.0.5 h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=\ngithub.com/spf13/pflag v1.0.5/go.mod h1:McXfInJRrz4CZXVZOBLb0bTZqETkiAhM9Iw0y3An2Bg=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/testify v1.3.0 h1:TivCn/peBQ7UY8ooIcPgZFpTNSz0Q2U6UrFlUfqbe0Q=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=\ngolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=\ngolang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=\ngolang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220811171246-fbc7d0a398ab/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=\ngolang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=\ngolang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405 h1:yhCVgyC4o1eVCa2tZl7eS0r+SDo693bJlVdllGtEeKM=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\n"
        },
        {
          "name": "languages.json",
          "type": "blob",
          "size": 123.349609375,
          "content": "{\n  \"ABAP\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"abap\"],\n    \"line_comment\": [\"*\", \"\\\\\\\"\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"ABNF\": {\n    \"complexitychecks\": [\"=/ \", \"/ \", \"% \", \"( \"],\n    \"extensions\": [\"abnf\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"APL\": {\n    \"complexitychecks\": [\n      \":For \",\n      \":If \",\n      \":Case \",\n      \":CaseList \",\n      \":While \",\n      \":Repeat \",\n      \":Else \",\n      \"∨\",\n      \"∧\",\n      \"≠\",\n      \"~\",\n      \"¨\",\n      \"=\",\n      \":\"\n    ],\n    \"extensions\": [\"apl\", \"aplf\", \"apln\", \"aplc\", \"dyalog\"],\n    \"line_comment\": [\"⍝\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"ASP\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"asa\", \"asp\"],\n    \"line_comment\": [\"'\", \"REM\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"ASP.NET\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\n      \"asax\",\n      \"ascx\",\n      \"asmx\",\n      \"aspx\",\n      \"master\",\n      \"sitemap\",\n      \"webinfo\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"<%--\", \"-->\"]],\n    \"quotes\": []\n  },\n  \"ATS\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"if(\",\n      \" then \",\n      \" else \",\n      \"case+ \",\n      \"ifcase\",\n      \"let \",\n      \"and \"\n    ],\n    \"extensions\": [\"dats\", \"sats\", \"ats\", \"hats\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [\n      [\"/*\", \"*/\"],\n      [\"(*\", \"*)\"],\n      [\"////\", \"THISSHOULDNEVERAPPEARWEHOPE\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"AWK\": {\n    \"complexitychecks\": [\n      \"else \",\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"awk\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ],\n    \"shebangs\": [\"awk\", \"gawk\", \"mawk\", \"nawk\"]\n  },\n  \"ActionScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"as\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Ada\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ada\", \"adb\", \"ads\", \"pad\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Agda\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"agda\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": []\n  },\n  \"Alchemist\": {\n    \"complexitychecks\": [\"+\", \"->\", \"!\"],\n    \"extensions\": [\"crn\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Alex\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"x\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Alloy\": {\n    \"complexitychecks\": [\n      \"implies \",\n      \"else \",\n      \"for \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"<= \",\n      \">= \"\n    ],\n    \"extensions\": [\"als\"],\n    \"line_comment\": [\"//\", \"--\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Android Interface Definition Language\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"aidl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/**\", \"*/\"], [\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"AppleScript\": {\n    \"complexitychecks\": [\n      \"considering \",\n      \"ignoring \",\n      \"repeat \",\n      \"while \",\n      \"if \",\n      \"else \",\n      \"else if \",\n      \"try \",\n      \"on error \",\n      \"and \",\n      \"or \"\n    ],\n    \"extensions\": [\"applescript\"],\n    \"line_comment\": [\"#\", \"--\"],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ],\n    \"shebangs\": []\n  },\n  \"Arturo\": {\n    \"complexitychecks\": [\n      \"loop \",\n      \"map \",\n      \"select \",\n      \"if \",\n      \"if? \",\n      \"while \",\n      \"function \",\n      \"or? \",\n      \"and? \",\n      \"not? \",\n      \"<> \",\n      \"= \"\n    ],\n    \"extensions\": [\"art\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"AsciiDoc\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"adoc\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Assembly\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"s\", \"asm\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Astro\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \".map\"\n    ],\n    \"extensions\": [\"astro\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"AutoHotKey\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ahk\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Autoconf\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"in\"],\n    \"line_comment\": [\"#\", \"dnl\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Avro\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"avdl\", \"avpr\", \"avsc\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"BASH\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\n      \"bash\",\n      \"bash_login\",\n      \"bash_logout\",\n      \"bash_profile\",\n      \"bashrc\"\n    ],\n    \"filenames\": [\".bash_login\", \".bash_logout\", \".bash_profile\", \".bashrc\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"bash\"]\n  },\n  \"Basic\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"elseif \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"bas\"],\n    \"line_comment\": [\"'\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Batch\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"bat\", \"btm\", \"cmd\"],\n    \"line_comment\": [\"REM\", \"::\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Bazel\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"bzl\", \"build.bazel\", \"build\", \"workspace\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Bean\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"bean\", \"beancount\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Bicep\": {\n    \"complexitychecks\": [\n      \"@minLength(\",\n      \"@maxLength(\",\n      \"@secure(\",\n      \"[for \",\n      \"if(\",\n      \"if (\",\n      \" == \",\n      \" != \",\n      \" ? \",\n      \"using \",\n      \"range(\",\n      \"type \",\n      \"func \"\n    ],\n    \"extensions\": [\"bicep\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Bitbake\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"bb\", \"bbappend\", \"bbclass\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Bitbucket Pipeline\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"bitbucket-pipelines.yml\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Blade template\": {\n    \"complexitychecks\": [\n      \"@for \",\n      \"@for(\",\n      \"@foreach \",\n      \"@foreach(\",\n      \"@forelse \",\n      \"@forelse(\",\n      \"@each \",\n      \"@each (\",\n      \"@while \",\n      \"@while(\",\n      \"@if \",\n      \"@if(\",\n      \"@unless \",\n      \"@unless(\",\n      \"@isset \",\n      \"@isset(\",\n      \"@empty \",\n      \"@empty(\",\n      \"@else \",\n      \"@elseif \",\n      \"@elseif(\",\n      \"@while \",\n      \"@while(\",\n      \"@switch \",\n      \"@switch (\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"blade.php\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"{{--\", \"--}}\"], [\"<!--\", \"-->\"]],\n    \"quotes\": []\n  },\n  \"Boo\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"elif \",\n      \"unless \",\n      \" and \",\n      \"for \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"boo\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"Bosque\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"match \",\n      \"case \",\n      \"| \",\n      \"|| \",\n      \"& \",\n      \"&& \",\n      \"!= \",\n      \"!== \",\n      \"== \",\n      \"=== \"\n    ],\n    \"extensions\": [\"bsq\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Brainfuck\": {\n    \"complexitychecks\": [\"[\", \"]\", \"<\", \">\", \"+\", \"-\", \".\", \",\"],\n    \"extensions\": [\"bf\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"BuildStream\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"bst\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"C\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"c\", \"ec\", \"pgc\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"C Header\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"h\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"C Shell\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"csh\"],\n    \"filenames\": [\".cshrc\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [],\n    \"shebangs\": [\"csh\", \"tcsh\"]\n  },\n  \"C#\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cs\", \"csx\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"ignoreEscape\": true,\n        \"start\": \"@\\\"\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"C++\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cc\", \"cpp\", \"cxx\", \"c++\", \"pcc\", \"ino\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"C++ Header\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"hh\", \"hpp\", \"hxx\", \"inl\", \"ipp\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"CMake\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cmake\", \"cmakelists.txt\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"COBOL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cob\", \"cbl\", \"ccp\", \"cobol\", \"cpy\"],\n    \"line_comment\": [\"*\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"CSS\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"css\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"CSV\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"csv\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Cabal\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cabal\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": []\n  },\n  \"Cairo\": {\n    \"complexitychecks\": [\n      \"loop \",\n      \"if \",\n      \"if(\",\n      \"match \",\n      \"match(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cairo\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Cangjie\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cj\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      }\n    ]\n  },\n  \"Cap'n Proto\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"capnp\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Cassius\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cassius\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Ceylon\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ceylon\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Chapel\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"do \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"chpl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Circom\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"else(\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"circom\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Clipper\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"do while \",\n      \"while \",\n      \"else \",\n      \"elseif \",\n      \"else(\",\n      \"switch \",\n      \"case \",\n      \"otherwise \",\n      \"begin sequence \",\n      \"end sequence \",\n      \"begin sequence(\",\n      \"try \",\n      \"catch \",\n      \"finally \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"prg\", \"ch\"],\n    \"line_comment\": [\"//\", \"&&\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Clojure\": {\n    \"complexitychecks\": [\n      \"(for \",\n      \"(when \",\n      \"(loop \",\n      \"(doseq \",\n      \"(cond \",\n      \"(if\",\n      \"(if-not \",\n      \"(and \",\n      \"(or \",\n      \"(not \",\n      \"(= \",\n      \"(not= \",\n      \"(recur \"\n    ],\n    \"extensions\": [\"clj\", \"cljc\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"ClojureScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cljs\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Closure Template\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \">= \",\n      \"<= \",\n      \"?: \",\n      \"? : \"\n    ],\n    \"extensions\": [\"soy\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/**\", \"*/\"], [\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"CloudFormation (JSON)\": {\n    \"complexitychecks\": [\n      \"!GetAtt\",\n      \"!Sub\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"DependsOn:\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"Fn::If\",\n      \"Fn::And\",\n      \"Fn::Equals\",\n      \"Fn::Not\",\n      \"Fn::Or\",\n      \"Fn::Base64\",\n      \"Fn::Cidr\",\n      \"Fn::FindInMap\",\n      \"Fn::GetAtt\",\n      \"Fn::GetAZs\",\n      \"Fn::ImportValue\",\n      \"Fn::Join\",\n      \"Fn::Select\",\n      \"Fn::Split\",\n      \"Fn::Sub\",\n      \"Fn::Transform\"\n    ],\n    \"extensions\": [\"json\"],\n    \"keywords\": [\n      \"\\\"AWSTemplateFormatVersion\\\"\",\n      \"AWS::\",\n      \"!GetAtt\",\n      \"!Sub\",\n      \"\\\"DependsOn\\\"\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"Fn::If\",\n      \"Fn::And\",\n      \"Fn::Equals\",\n      \"Fn::Not\",\n      \"Fn::Or\",\n      \"Fn::Base64\",\n      \"Fn::Cidr\",\n      \"Fn::FindInMap\",\n      \"Fn::GetAtt\",\n      \"Fn::GetAZs\",\n      \"Fn::ImportValue\",\n      \"Fn::Join\",\n      \"Fn::Select\",\n      \"Fn::Split\",\n      \"Fn::Sub\",\n      \"Fn::Transform\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"CloudFormation (YAML)\": {\n    \"complexitychecks\": [\n      \"!GetAtt\",\n      \"!Sub\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"DependsOn:\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"Fn::If\",\n      \"Fn::And\",\n      \"Fn::Equals\",\n      \"Fn::Not\",\n      \"Fn::Or\",\n      \"Fn::Base64\",\n      \"Fn::Cidr\",\n      \"Fn::FindInMap\",\n      \"Fn::GetAtt\",\n      \"Fn::GetAZs\",\n      \"Fn::ImportValue\",\n      \"Fn::Join\",\n      \"Fn::Select\",\n      \"Fn::Split\",\n      \"Fn::Sub\",\n      \"Fn::Transform\"\n    ],\n    \"extensions\": [\"yaml\", \"yml\"],\n    \"keywords\": [\n      \"Resources:\",\n      \"AWSTemplateFormatVersion:\",\n      \"Description:\",\n      \"AWS::\",\n      \"Properties:\",\n      \"Name:\",\n      \"Type:\",\n      \"!GetAtt\",\n      \"!Sub\",\n      \"Statement:\",\n      \"Ref:\",\n      \"DependsOn:\",\n      \"!Select\",\n      \"!Equals\",\n      \"!If\",\n      \"Fn::If\",\n      \"Fn::And\",\n      \"Fn::Equals\",\n      \"Fn::Not\",\n      \"Fn::Or\",\n      \"Fn::Base64\",\n      \"Fn::Cidr\",\n      \"Fn::FindInMap\",\n      \"Fn::GetAtt\",\n      \"Fn::GetAZs\",\n      \"Fn::ImportValue\",\n      \"Fn::Join\",\n      \"Fn::Select\",\n      \"Fn::Split\",\n      \"Fn::Sub\",\n      \"Fn::Transform\"\n    ],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"CodeQL\": {\n    \"complexitychecks\": [\n      \"and \",\n      \"or \",\n      \"implies \",\n      \"if \",\n      \"else \",\n      \"not \",\n      \"instanceof \",\n      \"in \",\n      \"exists(\",\n      \"forall( \",\n      \"avg(\",\n      \"concat(\",\n      \"count(\",\n      \"max(\",\n      \"min(\",\n      \"rank(\",\n      \"strictconcat(\",\n      \"strictcount(\",\n      \"strictsum(\",\n      \"sum(\"\n    ],\n    \"extensions\": [\"ql\", \"qll\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"CoffeeScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"coffee\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"###\", \"###\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Cogent\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cogent\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"ColdFusion\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cfm\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!---\", \"--->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"ColdFusion CFScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cfc\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Coq\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"v\"],\n    \"keywords\": [\n      \"Require\",\n      \"Hypothesis\",\n      \"Inductive\",\n      \"Remark\",\n      \"Lemma\",\n      \"Proof\",\n      \"Definition\",\n      \"Theorem\",\n      \"Class\",\n      \"Instance\",\n      \"Module\",\n      \"Context\",\n      \"Section\",\n      \"Notation\",\n      \"End\",\n      \"Fixpoint\",\n      \"From Coq\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Creole\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"creole\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Crystal\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cr\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Cuda\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cu\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Cython\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"and \",\n      \"or \",\n      \"not \",\n      \"in \"\n    ],\n    \"extensions\": [\"pyx\", \"pxi\", \"pxd\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      }\n    ]\n  },\n  \"D\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"d\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"], [\"/+\", \"+/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"rdmd\"]\n  },\n  \"DAML\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"then \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"/= \",\n      \"== \",\n      \"case \",\n      \"do {\",\n      \"forall \"\n    ],\n    \"extensions\": [\"daml\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": []\n  },\n  \"DM\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"||\",\n      \"&&\",\n      \"!=\",\n      \"<>\",\n      \"==\",\n      \"in \"\n    ],\n    \"extensions\": [\"dm\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"DOT\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"dot\", \"gv\"],\n    \"line_comment\": [\"//\", \"#\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Dart\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"dart\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Device Tree\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"dts\", \"dtsi\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Dhall\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"dhall\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Docker ignore\": {\n    \"complexitychecks\": [],\n    \"extensions\": [],\n    \"filenames\": [\".dockerignore\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Dockerfile\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"dockerfile\"],\n    \"filenames\": [\"dockerfile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Document Type Definition\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"dtd\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Elixir\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ex\", \"exs\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Elm\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"case \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"elm\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Emacs Dev Env\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ede\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Emacs Lisp\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"el\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"EmiT\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"if(\",\n      \"warp \",\n      \"time \",\n      \"kills \",\n      \"collapse \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"emit\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Erlang\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"erl\", \"hrl\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [],\n    \"quotes\": [],\n    \"shebangs\": [\"escript\"]\n  },\n  \"Expect\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"exp\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Extensible Stylesheet Language Transformations\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"xslt\", \"xsl\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"F#\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"match \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"fs\", \"fsi\", \"fsx\", \"fsscript\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": []\n  },\n  \"F*\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"fst\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"FIDL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"fidl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"FORTRAN Legacy\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"f\", \"for\", \"ftn\", \"f77\", \"pfo\"],\n    \"line_comment\": [\"c\", \"C\", \"!\", \"*\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"FSL\": {\n    \"complexitychecks\": [\"->\", \"<-\"],\n    \"extensions\": [\"fsl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"FXML\": {\n    \"extensions\": [\"fxml\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Factor\": {\n    \"complexitychecks\": [\n      \"if\",\n      \"when\",\n      \"unless\",\n      \"if*\",\n      \"when*\",\n      \"unless*\",\n      \"?if\",\n      \"?\",\n      \"cond\",\n      \"case\",\n      \"cond>quot\",\n      \"case>quot\",\n      \"alist>quot\",\n      \"while\",\n      \"until\",\n      \"loop\",\n      \"0&&\",\n      \"1&&\",\n      \"2&&\",\n      \"3&&\",\n      \"n&&\",\n      \"&&\",\n      \"0||\",\n      \"1||\",\n      \"2||\",\n      \"3||\",\n      \"n||\",\n      \"||\",\n      \"and\",\n      \"or\",\n      \"xor\",\n      \"eq\",\n      \"=\",\n      \"smart-if\",\n      \"smart-if*\",\n      \"smart-when\",\n      \"smart-when*\",\n      \"smart-unless\",\n      \"smart-unless*\"\n    ],\n    \"extensions\": [\"factor\"],\n    \"line_comment\": [\"!\"],\n    \"multi_line\": [\n      [\"![[\", \"]]\"],\n      [\"![=[\", \"]=]\"],\n      [\"![==[\", \"]==]\"],\n      [\"![===[\", \"]===]\"],\n      [\"![====[\", \"]====]\"],\n      [\"![=====[\", \"]=====]\"],\n      [\"![======[\", \"]======]\"],\n      [\"/*\", \"*/\"],\n      [\"((\", \"))\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \";\",\n        \"start\": \"STRING:\"\n      },\n      {\n        \"end\": \"]======]\",\n        \"start\": \"[======[\"\n      },\n      {\n        \"end\": \"]====]\",\n        \"start\": \"[=====[\"\n      },\n      {\n        \"end\": \"]====]\",\n        \"start\": \"[====[\"\n      },\n      {\n        \"end\": \"]===]\",\n        \"start\": \"[===[\"\n      },\n      {\n        \"end\": \"]==]\",\n        \"start\": \"[==[\"\n      },\n      {\n        \"end\": \"]=]\",\n        \"start\": \"[=[\"\n      },\n      {\n        \"end\": \"]]\",\n        \"start\": \"[[\"\n      }\n    ]\n  },\n  \"Fennel\": {\n    \"complexitychecks\": [\n      \"(for\",\n      \"(each\",\n      \"(if\",\n      \"(when\",\n      \"(while\",\n      \"(switch\",\n      \"(do\",\n      \"(..\",\n      \"(=\",\n      \"(and\",\n      \"(or\"\n    ],\n    \"extensions\": [\"fnl\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \",\"\n      }\n    ]\n  },\n  \"Fish\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"fish\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"fish\"]\n  },\n  \"Flow9\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"if(\",\n      \"else \",\n      \"else{\",\n      \"fori \",\n      \"fori(\",\n      \"switch \",\n      \"switch(\",\n      \"fold \",\n      \"fold(\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"|> \"\n    ],\n    \"extensions\": [\"flow\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Forth\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\n      \"4th\",\n      \"forth\",\n      \"fr\",\n      \"frt\",\n      \"fth\",\n      \"f83\",\n      \"fb\",\n      \"fpm\",\n      \"e4\",\n      \"rx\",\n      \"ft\"\n    ],\n    \"line_comment\": [\"\\\\\\\\\"],\n    \"multi_line\": [[\"( \", \")\"]],\n    \"quotes\": []\n  },\n  \"Fortran Modern\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"f03\", \"f08\", \"f90\", \"f95\"],\n    \"line_comment\": [\"!\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Fragment Shader File\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"fsh\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Freemarker Template\": {\n    \"complexitychecks\": [\n      \"<#list \",\n      \"<#assign \",\n      \"<#if \",\n      \"<#elseif \",\n      \"<#else>\",\n      \"<#else> \",\n      \"<#switch  \",\n      \"<#case \",\n      \"<#default>\",\n      \"<#default> \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ftl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<#--\", \"-->\"]],\n    \"quotes\": []\n  },\n  \"Futhark\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"else \",\n      \"then \",\n      \"for \",\n      \"loop \",\n      \"while \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \">= \",\n      \"<= \"\n    ],\n    \"extensions\": [\"fut\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"GDScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"gd\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"GLSL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vert\", \"tesc\", \"tese\", \"geom\", \"frag\", \"comp\", \"glsl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"GN\": {\n    \"complexitychecks\": [\n      \"if(\",\n      \"if (\",\n      \"else if(\",\n      \"else if (\",\n      \"else(\",\n      \"else (\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"gn\", \"gni\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Game Maker Language\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"repeat \",\n      \"repeat(\",\n      \"|| \",\n      \"or \",\n      \"&& \",\n      \"and \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"gml\"],\n    \"line_comment\": [\"//\", \"///\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Game Maker Project\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"yyp\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Gemfile\": {\n    \"complexitychecks\": [],\n    \"extensions\": [],\n    \"filenames\": [\"gemfile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Gherkin Specification\": {\n    \"complexitychecks\": [\"given\", \"when\", \"then\", \"and\"],\n    \"extensions\": [\"feature\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Gleam\": {\n    \"complexitychecks\": [\"fn \", \"case \", \"-> \", \"if \"],\n    \"extensions\": [\"gleam\"],\n    \"line_comment\": [\"//\", \"///\", \"////\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Go\": {\n    \"complexitychecks\": [\n      \"go \",\n      \"defer \",\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"select \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"go\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"ignoreEscape\": true,\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"Go Template\": {\n    \"complexitychecks\": [\n      \"{{if \",\n      \"{{ if \",\n      \"{{else\",\n      \"{{ else\",\n      \"{{range \",\n      \"{{ range \",\n      \"{{with\",\n      \"{{ with\"\n    ],\n    \"extensions\": [\"tmpl\", \"gohtml\", \"gotxt\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"{{/*\", \"*/}}\"]],\n    \"quotes\": []\n  },\n  \"Godot Scene\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"tscn\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Gradle\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"gradle\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"GraphQL\": {\n    \"complexitychecks\": [\n      \"type \",\n      \"input \",\n      \"query \",\n      \"mutation \",\n      \"subscription \",\n      \"directive \",\n      \"scalar \",\n      \"enum \",\n      \"interface \",\n      \"union \",\n      \"fragment \"\n    ],\n    \"extensions\": [\"graphql\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"\\\"\\\"\\\"\", \"\\\"\\\"\\\"\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"Groovy\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"groovy\", \"grt\", \"gtpl\", \"gvy\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Gwion\": {\n    \"complexitychecks\": [\n      \"fun \",\n      \"while(\",\n      \"while (\",\n      \"repeat(\",\n      \"repeat (\",\n      \"if (\",\n      \"if(\"\n    ],\n    \"extensions\": [\"gw\"],\n    \"line_comment\": [\"#!\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"HAML\": {\n    \"extensions\": [\"haml\"],\n    \"line_comment\": [\"-#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"HEX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"hex\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"HTML\": {\n    \"extensions\": [\"html\", \"htm\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Hamlet\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"hamlet\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Handlebars\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"hbs\", \"handlebars\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"{{!\", \"}}\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Happy\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"y\", \"ly\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Hare\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"else \",\n      \"match \",\n      \"switch \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ha\"],\n    \"line_comment\": [\"//\"],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"Haskell\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"then \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"/= \",\n      \"== \",\n      \"case \",\n      \"do {\",\n      \"forall \"\n    ],\n    \"extensions\": [\"hs\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": []\n  },\n  \"Haxe\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"hx\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"IDL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"idl\", \"webidl\", \"widl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"INI\": {\n    \"extensions\": [\"ini\"],\n    \"line_comment\": [\"#\", \";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Idris\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"idr\", \"lidr\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Intel HEX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"ihex\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Isabelle\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"thy\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [\n      [\"{*\", \"*}\"],\n      [\"(*\", \"*)\"],\n      [\"‹\", \"›\"],\n      [\"\\\\\\\\<open>\", \"\\\\\\\\<close>\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"''\",\n        \"start\": \"''\"\n      }\n    ]\n  },\n  \"JAI\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"jai\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"WISE Jobfile\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"fgmj\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"JSON\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"json\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"JSON5\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"json5\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"JSONC\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"jsonc\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"JSONL\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"jsonl\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"JSX\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"jsx\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Jade\": {\n    \"complexitychecks\": [\"if \", \"else if \", \"unless \"],\n    \"extensions\": [\"jade\"],\n    \"line_comment\": [\"//-\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Janet\": {\n    \"complexitychecks\": [\n      \"(if \",\n      \"(for \",\n      \"(for \",\n      \"(cond \",\n      \"(switch \",\n      \"(when \",\n      \"(while \",\n      \"(loop \",\n      \"(case \"\n    ],\n    \"extensions\": [\"janet\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"nestedmultiline\": false,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"``\",\n        \"start\": \"``\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"@\\\"\"\n      }\n    ]\n  },\n  \"Java\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"java\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"JavaScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"js\", \"mjs\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ],\n    \"shebangs\": [\"node\"]\n  },\n  \"JavaServer Pages\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"jsp\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Jenkins Buildfile\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"jenkinsfile\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Jinja\": {\n    \"complexitychecks\": [\n      \"{% for \",\n      \"{%- for \",\n      \"{% if \",\n      \"{%- if \",\n      \"{% else \",\n      \"{%- else \",\n      \"{% elif \",\n      \"{% macro \",\n      \"{%- macro \",\n      \"{% call \",\n      \"{%- call \",\n      \"{% filter \",\n      \"{%- filter \",\n      \"{% set \",\n      \"{% include \",\n      \"{% from \",\n      \"{% extends \",\n      \"{% with \"\n    ],\n    \"extensions\": [\"jinja\", \"j2\", \"jinja2\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"{#\", \"#}\"]],\n    \"quotes\": []\n  },\n  \"Jsonnet\": {\n    \"complexitychecks\": [\"for\", \"if\", \"else\", \"||\", \"&&\", \"!=\", \"==\"],\n    \"extensions\": [\"jsonnet\", \"libsonnet\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"|||\",\n        \"start\": \"|||\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"@\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"@'\"\n      }\n    ],\n    \"shebangs\": [\"jsonnet\"]\n  },\n  \"Julia\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"while \",\n      \"else \",\n      \"elseif \",\n      \"elseif(\",\n      \"try \",\n      \"catch \",\n      \"finally \",\n      \"|| \",\n      \"&& \"\n    ],\n    \"extensions\": [\"jl\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"#=\", \"=#\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Julius\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"julius\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Jupyter\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"ipynb\", \"jpynb\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Just\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"justfile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"K\": {\n    \"complexitychecks\": [\"'\", \"/\", \"\\\\\", \"':\", \"/:\", \"\\\\:\", \"|\", \"&\", \"!\", \"=\"],\n    \"extensions\": [\"k\"],\n    \"line_comment\": [\"/\"],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Korn Shell\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ksh\"],\n    \"filenames\": [\".kshrc\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"ksh\"]\n  },\n  \"Kotlin\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"kt\", \"kts\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"LALRPOP\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"match \"\n    ],\n    \"extensions\": [\"lalrpop\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"#\\\\\\\"\",\n        \"start\": \"\\\\\\\"#\"\n      },\n      {\n        \"end\": \"r##\\\\\\\"\",\n        \"start\": \"\\\\\\\"##\"\n      },\n      {\n        \"end\": \"r#\\\\\\\"\",\n        \"start\": \"\\\\\\\"#\"\n      }\n    ]\n  },\n  \"LD Script\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"lds\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"LESS\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"less\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"LEX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"l\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"LLVM IR\": {\n    \"complexitychecks\": [\n      \"llvm.loop\",\n      \"br \",\n      \"switch \",\n      \"indirectbr \",\n      \"invoke \",\n      \"callbr \",\n      \"resume \",\n      \"catchswitch \",\n      \"catchret \",\n      \"cleanupret \",\n      \"shl \",\n      \"lshr \",\n      \"ashr \",\n      \"and \",\n      \"or \",\n      \"xor \"\n    ],\n    \"extensions\": [\"ll\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ],\n    \"shebangs\": []\n  },\n  \"LOLCODE\": {\n    \"complexitychecks\": [\n      \"AWSUM THX \",\n      \"O NOES \",\n      \"PLZ OPEN FILE \",\n      \"IM IN YR \",\n      \"O RLY?\",\n      \"O RLY? \",\n      \"WTF?\",\n      \"WTF? \"\n    ],\n    \"extensions\": [\"lol\", \"lols\"],\n    \"line_comment\": [\"BTW\"],\n    \"multi_line\": [[\"OBTW\", \"TLDR\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"LaTeX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"tex\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Lean\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"lean\", \"hlean\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"/-\", \"-/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": []\n  },\n  \"License\": {\n    \"complexitychecks\": [],\n    \"extensions\": [],\n    \"filenames\": [\n      \"license\",\n      \"licence\",\n      \"copying\",\n      \"copying3\",\n      \"unlicense\",\n      \"unlicence\",\n      \"license-apache\",\n      \"licence-apache\",\n      \"license-mit\",\n      \"licence-mit\",\n      \"copyright\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Lisp\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"lisp\", \"lsp\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"#|\", \"|#\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [],\n    \"shebangs\": [\"sbcl\"]\n  },\n  \"LiveScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"case \",\n      \"while \",\n      \"when \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"!== \",\n      \"xor \",\n      \"and \",\n      \"or \",\n      \"|> \",\n      \"<< \",\n      \"<<< \",\n      \"<<<< \",\n      \">> \",\n      \"== \"\n    ],\n    \"extensions\": [\"ls\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Lua\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"else(\",\n      \"elseif \",\n      \"elseif(\",\n      \"or \",\n      \"and \",\n      \"~= \",\n      \"== \"\n    ],\n    \"extensions\": [\"lua\", \"luau\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [\n      [\"--[[\", \"]]\"],\n      [\"--[=[\", \"]=]\"],\n      [\"--[==[\", \"]==]\"],\n      [\"--[===[\", \"]===]\"],\n      [\"--[====[\", \"]====]\"],\n      [\"--[=====[\", \"]=====]\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"[[\",\n        \"start\": \"]]\"\n      }\n    ],\n    \"shebangs\": [\"lua\"]\n  },\n  \"Luau\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"else(\",\n      \"elseif \",\n      \"elseif(\",\n      \"or \",\n      \"and \",\n      \"~= \",\n      \"== \"\n    ],\n    \"extensions\": [\"luau\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [\n      [\"--[[\", \"]]\"],\n      [\"--[=[\", \"]=]\"],\n      [\"--[==[\", \"]==]\"],\n      [\"--[===[\", \"]===]\"],\n      [\"--[====[\", \"]====]\"],\n      [\"--[=====[\", \"]=====]\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"`\",\n        \"start\": \"`\"\n      },\n      {\n        \"end\": \"[[\",\n        \"start\": \"]]\"\n      }\n    ],\n    \"shebangs\": [\"luau\"]\n  },\n  \"Lucius\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"lucius\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Luna\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"luna\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"MATLAB\": {\n    \"complexitychecks\": [\n      \"if \",\n      \"elseif \",\n      \"case \",\n      \"otherwise \",\n      \"try\",\n      \"for \",\n      \"while \"\n    ],\n    \"extensions\": [\"m\"],\n    \"keywords\": [\n      \"eye(\",\n      \"zeros(\",\n      \"ones(\",\n      \"transpose(\",\n      \"meshgrid(\",\n      \"mod(\",\n      \"classdef\",\n      \"function\",\n      \"disp(\",\n      \"sin(\",\n      \"tan(\",\n      \"cos(\",\n      \"plot\",\n      \"sqrt(\",\n      \"deblank(\",\n      \"findstr(\",\n      \"strrep(\",\n      \"strcmp(\",\n      \"display(\",\n      \"strcat(\",\n      \"iscellstr(\",\n      \"strfind(\",\n      \"%\",\n      \"fprintf(\"\n    ],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [[\"%{\", \"}%\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"MDX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"mdx\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"MQL Header\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mqh\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"MQL4\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mq4\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"MQL5\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mq5\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"MSBuild\": {\n    \"complexitychecks\": [\"Condition\"],\n    \"extensions\": [\n      \"csproj\",\n      \"vbproj\",\n      \"fsproj\",\n      \"vcproj\",\n      \"vcxproj\",\n      \"vcxproj.filters\",\n      \"ilproj\",\n      \"myapp\",\n      \"props\",\n      \"rdlc\",\n      \"resx\",\n      \"settings\",\n      \"sln\",\n      \"targets\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"MUMPS\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mps\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Macromedia eXtensible Markup Language\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"mxml\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Madlang\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mad\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"{#\", \"#}\"]],\n    \"quotes\": []\n  },\n  \"Makefile\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"makefile\", \"mak\", \"mk\", \"bp\"],\n    \"filenames\": [\"makefile\", \"gnumakefile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Mako\": {\n    \"complexitychecks\": [\n      \"% for \",\n      \"% if \",\n      \"% else \",\n      \"% elif \",\n      \"<% include \",\n      \"<%def \",\n      \"<%page \",\n      \"<%def \",\n      \"<%block \",\n      \"<%namespace \",\n      \"<%inherit \"\n    ],\n    \"extensions\": [\"mako\", \"mao\"],\n    \"line_comment\": [\"##\"],\n    \"multi_line\": [[\"<%doc>\", \"</%doc>\"]],\n    \"quotes\": []\n  },\n  \"Markdown\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"md\", \"markdown\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Max\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"maxpat\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Metal\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"metal\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n\n  \"Meson\": {\n    \"complexitychecks\": [\n      \"foreach \",\n      \"if \",\n      \"elif \",\n      \"unless \",\n      \"and \",\n      \"or \",\n      \"else \"\n    ],\n    \"extensions\": [\"meson.build\", \"meson_options.txt\"],\n    \"line_comment\": [\"#\"],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      }\n    ]\n  },\n  \"Modula3\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"m3\", \"mg\", \"ig\", \"i3\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Module-Definition\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"def\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Monkey C\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mc\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Moonbit\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"loop \",\n      \"guard \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"match \"\n    ],\n    \"extensions\": [\"mbt\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Mustache\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mustache\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"{{!\", \"}}\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Nial\": {\n    \"complexitychecks\": [\n      \"case \",\n      \"for \",\n      \"if \",\n      \"repeat \",\n      \"while \",\n      \"or \",\n      \"and \",\n      \"= \",\n      \"equal \",\n      \"~= \",\n      \"unequal \"\n    ],\n    \"extensions\": [\"ndf\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Nim\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"nim\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Nix\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"nix\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Nushell\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"do { \",\n      \"each {\",\n      \"if \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"nu\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"nu\"]\n  },\n  \"OCaml\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ml\", \"mli\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Objective C\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"m\"],\n    \"keywords\": [\n      \"#include\",\n      \"printf\",\n      \"stdio.h\",\n      \".h\",\n      \"@import\",\n      \"@interface\",\n      \"@property\",\n      \"@implementation\",\n      \"NSArray\",\n      \"#pragma\",\n      \"static\",\n      \"const\",\n      \"atomic\",\n      \"@end\",\n      \"//\"\n    ],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Objective C++\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"mm\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Odin\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"when \",\n      \"switch \",\n      \"defer \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"odin\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Opalang\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"opa\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"OpenQASM\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"else(\",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"qasm\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Org\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"org\"],\n    \"line_comment\": [\"# \"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Oz\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"oz\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"PHP\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"php\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"php\", \"php5\"]\n  },\n  \"PKGBUILD\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"pkgbuild\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"PL/SQL\": {\n    \"complexitychecks\": [\n      \"and \",\n      \"and(\",\n      \"else \",\n      \"else(\",\n      \"elseif \",\n      \"elseif(\",\n      \"if \",\n      \"if(\",\n      \"loop \",\n      \"not \",\n      \"not(\",\n      \"or \",\n      \"or(\",\n      \"<> \",\n      \"<>(\",\n      \"= \",\n      \"=(\"\n    ],\n    \"extensions\": [\"fnc\", \"pkb\", \"pks\", \"prc\", \"trg\", \"vw\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"PRQL\": {\n    \"complexitychecks\": [\"case \", \"&& \", \"|| \", \"!= \", \"== \", \"~= \"],\n    \"extensions\": [\"prql\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"r\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"r'''\"\n      }\n    ]\n  },\n  \"PSL Assertion\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"psl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Pascal\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"AND \",\n      \"OR \",\n      \"IF \",\n      \"ELSE \"\n    ],\n    \"extensions\": [\"pas\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"{\", \"}\"], [\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Patch\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"patch\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Perl\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"pl\", \"pm\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"=pod\", \"=cut\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"perl\", \"perl5\"]\n  },\n  \"Picat\": {\n    \"complexitychecks\": [\n      \"do \",\n      \"foreach \",\n      \"foreach(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"pi\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Pkl\": {\n    \"complexitychecks\": [\n      \"function \",\n      \"?? \",\n      \"?.\",\n      \"ifNonNull(\",\n      \"if \",\n      \" else \",\n      \".map\",\n      \"for \",\n      \"when \",\n      \"...\"\n    ],\n    \"extensions\": [\"pkl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"#\\\"\",\n        \"start\": \"\\\"#\"\n      },\n      {\n        \"end\": \"##\\\"\",\n        \"start\": \"\\\"##\"\n      },\n      {\n        \"end\": \"\\\"\\\"\\\"\",\n        \"ignoreEscape\": true,\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"Plain Text\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"text\", \"txt\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Polly\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"polly\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Pony\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"match \",\n      \"repeat\",\n      \"while \",\n      \"else \",\n      \"elseif \",\n      \"| \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"pony\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Powershell\": {\n    \"complexitychecks\": [\n      \"while \",\n      \"while(\",\n      \"until \",\n      \"until(\",\n      \"for \",\n      \"for(\",\n      \"foreach \",\n      \"foreach(\",\n      \"if \",\n      \"elseif \",\n      \"else \",\n      \"switch\",\n      \"switch(\",\n      \"-gt\",\n      \"-lt\",\n      \"-eq\",\n      \"-ne\",\n      \"-ge\",\n      \"-le\",\n      \"-in\",\n      \"-notin\",\n      \"-contains\",\n      \"-notcontains\"\n    ],\n    \"extensions\": [\"ps1\", \"psm1\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"<#\", \"#>\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Processing\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"pde\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Prolog\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"p\", \"pro\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Properties File\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"properties\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Protocol Buffers\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"proto\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Puppet\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"pp\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"=begin\", \"=end\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"PureScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"purs\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"{-\", \"-}\"]],\n    \"quotes\": []\n  },\n  \"Python\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"while \",\n      \"while(\",\n      \"if \",\n      \"if(\",\n      \"elif \",\n      \"elif(\",\n      \"else \",\n      \"else:\",\n      \"match \",\n      \"match(\",\n      \"try \",\n      \"try:\",\n      \"except \",\n      \"except(\",\n      \"finally \",\n      \"finally:\",\n      \"with \",\n      \"with (\",\n      \"and \",\n      \"and(\",\n      \"or \",\n      \"or(\"\n    ],\n    \"extensions\": [\"py\", \"pyw\", \"pyi\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"r\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"r'''\"\n      }\n    ],\n    \"shebangs\": [\"python\", \"python2\", \"python3\"]\n  },\n  \"Q#\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"repeat \",\n      \"repeat{\",\n      \"until (\",\n      \"until(\",\n      \"if \",\n      \"if(\",\n      \"elif \",\n      \"elif{\",\n      \"else \",\n      \"else{\",\n      \"||| \",\n      \"&&& \",\n      \"<<<\",\n      \">>>\",\n      \"^^^\",\n      \"~~~\",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"qs\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"QCL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"qcl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"QML\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"qml\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"R\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"r\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [],\n    \"shebangs\": [\"Rscript\"]\n  },\n  \"Racket\": {\n    \"complexitychecks\": [\n      \"(if\",\n      \"(cond\",\n      \"[else\",\n      \"(and\",\n      \"(or\",\n      \"(for\",\n      \"#:when\",\n      \"#:unless\",\n      \"#:break\",\n      \"#:final\",\n      \"(do\",\n      \"(when\",\n      \"(unless\",\n      \"(shared\",\n      \"(case\"\n    ],\n    \"extensions\": [\"rkt\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"|#\", \"#|\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ],\n    \"shebangs\": [\"racket\"]\n  },\n  \"Rakefile\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [],\n    \"filenames\": [\"rake\", \"rakefile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"=begin\", \"=end\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Raku\": {\n    \"complexitychecks\": [\n      \"== \",\n      \"≡ \",\n      \"!= \",\n      \"≠ \",\n      \"!== \",\n      \"≢ \",\n      \"< \",\n      \"⊂ \",\n      \"!< \",\n      \"⊄ \",\n      \"<= \",\n      \"≤ \",\n      \"⊆ \",\n      \"!<= \",\n      \"⊈ \",\n      \"> \",\n      \"⊃ \",\n      \"!> \",\n      \"⊅ \",\n      \">= \",\n      \"≥ \",\n      \"⊇ \",\n      \"!>= \",\n      \"⊉ \",\n      \"=~= \",\n      \"≅ \",\n      \"=== \",\n      \"eq \",\n      \"!eq \",\n      \"eqv \",\n      \"ne \",\n      \"gt \",\n      \"ge \",\n      \"lt \",\n      \"le \",\n      \"=:=\",\n      \"CATCH \",\n      \"CONTROL \",\n      \"DOC \",\n      \"NEXT \",\n      \"and \",\n      \"default \",\n      \"do {\",\n      \"else \",\n      \"elsif \",\n      \"emit \",\n      \"for \",\n      \"gather \",\n      \"given \",\n      \"if \",\n      \"last \",\n      \"loop (\",\n      \"next \",\n      \"once \",\n      \"or \",\n      \"orwith \",\n      \"react {\",\n      \"redo \",\n      \"repeat \",\n      \"start {\",\n      \"supply \",\n      \"unless \",\n      \"until \",\n      \"when \",\n      \"whenever \",\n      \"while \",\n      \"with \",\n      \"without \"\n    ],\n    \"extensions\": [\"raku\", \"rakumod\", \"rakutest\", \"rakudoc\", \"t\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [\n      [\"=begin\", \"=end\"],\n      [\"#`(\", \")\"],\n      [\"#`[\", \"]\"],\n      [\"#`{\", \"}\"],\n      [\"#`｢\", \"｣\"]\n    ],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"“\",\n        \"start\": \"„\"\n      },\n      {\n        \"end\": \"»\",\n        \"start\": \"«\"\n      },\n      {\n        \"end\": \">>\",\n        \"start\": \"<<\"\n      },\n      {\n        \"end\": \"”\",\n        \"start\": \"“\"\n      },\n      {\n        \"end\": \"‘\",\n        \"start\": \"’\"\n      },\n      {\n        \"end\": \"｣\",\n        \"start\": \"｢\"\n      }\n    ],\n    \"shebangs\": [\"raku\"]\n  },\n  \"Razor\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cshtml\", \"razor\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"@*\", \"*@\"]],\n    \"quotes\": []\n  },\n  \"ReScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"=== \"\n    ],\n    \"extensions\": [\"res\", \"resi\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"ReStructuredText\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"rst\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"ReasonML\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"re\", \"rei\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Redscript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"@if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"func \",\n      \"-> \"\n    ],\n    \"extensions\": [\"reds\"],\n    \"line_comment\": [\"//\", \"///\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Report Definition Language\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"rdl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Robot Framework\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"robot\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Ruby\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"rb\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"=begin\", \"=end\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"ruby\"]\n  },\n  \"Ruby HTML\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"rhtml\", \"erb\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Rust\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"match \"\n    ],\n    \"extensions\": [\"rs\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"SAS\": {\n    \"complexitychecks\": [\n      \"do\",\n      \"%do\",\n      \"if\",\n      \"%if\",\n      \"else\",\n      \"%else\",\n      \"case\",\n      \"or\",\n      \"and\",\n      \"^=\",\n      \"¬=\",\n      \"~=\",\n      \"ne\",\n      \"eq\"\n    ],\n    \"extensions\": [\"sas\"],\n    \"line_comment\": [\"*\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"SKILL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"il\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"SNOBOL\": {\n    \"complexitychecks\": [\":(\", \":s(\", \":f(\", \"eq \", \"ne \"],\n    \"extensions\": [\"sno\"],\n    \"line_comment\": [\"*\"],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"SPDX\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"spdx\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"SPL\": {\n    \"complexitychecks\": [\n      \"construct\",\n      \"foreach\",\n      \"map\",\n      \"while\",\n      \"if\",\n      \"include\",\n      \"catch\",\n      \"and\",\n      \"or\",\n      \"not\",\n      \"call\",\n      \"<|\",\n      \"<{\",\n      \"dup\",\n      \"swap\"\n    ],\n    \"extensions\": [\"spl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"\\\"\", \"\\\";\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \" \",\n        \"start\": \"^\"\n      },\n      {\n        \"end\": \">\",\n        \"start\": \"^\"\n      },\n      {\n        \"end\": \":\",\n        \"start\": \"^\"\n      }\n    ],\n    \"shebangs\": [\"spl\"]\n  },\n  \"SQL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sql\", \"dml\", \"ddl\", \"dql\"],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"SRecode Template\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"srt\"],\n    \"line_comment\": [\";;\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"SVG\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"svg\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Sass\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sass\", \"scss\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Scala\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sc\", \"scala\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Scheme\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"scm\", \"ss\"],\n    \"line_comment\": [\";\"],\n    \"multi_line\": [[\"#|\", \"|#\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [],\n    \"shebangs\": []\n  },\n  \"Scons\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"csig\", \"sconstruct\", \"sconscript\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      }\n    ]\n  },\n  \"Shell\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sh\"],\n    \"filenames\": [\".tcshrc\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"sh\"]\n  },\n  \"Sieve\": {\n    \"complexitychecks\": [\n      \"if\",\n      \"if \",\n      \"elsif\",\n      \"elsif \",\n      \"allof\",\n      \"allof \",\n      \"anyof\",\n      \"anyof \",\n      \"allof(\",\n      \"anyof(\"\n    ],\n    \"extensions\": [\"sieve\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Slang\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"slang\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Slint\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"if(\",\n      \"states \",\n      \"states[\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"slint\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Smalltalk\": {\n    \"complexitychecks\": [\n      \"bitAnd \",\n      \"bitOr \",\n      \"bitXor \",\n      \"bitInvert \",\n      \"bitShift \",\n      \"bitAt \",\n      \"highbit \",\n      \"allMask \",\n      \"anyMask \",\n      \"noMask \",\n      \"ifTrue \",\n      \"ifFalse \",\n      \"switch \",\n      \"whileTrue \",\n      \"whileFalse \",\n      \"to: \"\n    ],\n    \"extensions\": [\"cs.st\", \"pck.st\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"\\\"\", \"\\\"\"]],\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Smarty Template\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"include \"\n    ],\n    \"extensions\": [\"tpl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"{*\", \"*}\"]],\n    \"quotes\": []\n  },\n  \"Snakemake\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"while \",\n      \"while(\",\n      \"if \",\n      \"if(\",\n      \"elif \",\n      \"elif(\",\n      \"else \",\n      \"else:\",\n      \"match \",\n      \"match(\",\n      \"try \",\n      \"try:\",\n      \"except \",\n      \"except(\",\n      \"finally \",\n      \"finally:\",\n      \"with \",\n      \"with (\",\n      \"and \",\n      \"and(\",\n      \"or \",\n      \"or(\"\n    ],\n    \"extensions\": [\"smk\", \"rules\"],\n    \"filenames\": [\"snakefile\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"r\\\"\\\"\\\"\"\n      },\n      {\n        \"docString\": true,\n        \"end\": \"'''\",\n        \"start\": \"r'''\"\n      }\n    ]\n  },\n  \"Softbridge Basic\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"elseif \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sbl\"],\n    \"line_comment\": [\"'\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Solidity\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \",\n      \"assembly \",\n      \"assembly{\",\n      \"unchecked \",\n      \"unchecked{\"\n    ],\n    \"extensions\": [\"sol\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Specman e\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"e\"],\n    \"line_comment\": [\"--\", \"//\"],\n    \"multi_line\": [[\"'>\", \"<'\"]],\n    \"quotes\": []\n  },\n  \"Spice Netlist\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ckt\"],\n    \"line_comment\": [\"*\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Stan\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"stan\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Standard ML (SML)\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"sml\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Stata\": {\n    \"complexitychecks\": [\n      \"foreach\",\n      \"forvalues\",\n      \"if\",\n      \"else\",\n      \"while\",\n      \"switch\",\n      \"|\",\n      \"&\",\n      \"!=\",\n      \"==\"\n    ],\n    \"extensions\": [\"do\", \"ado\"],\n    \"line_comment\": [\"//\", \"*\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\"'\",\n        \"start\": \"`\\\"\"\n      }\n    ]\n  },\n  \"Stylus\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"unless \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"styl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Svelte\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"svelte\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Swift\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"swift\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Swig\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"i\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"SystemVerilog\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"| \",\n      \"& \",\n      \"!= \",\n      \"!== \",\n      \"== \",\n      \"foreach \",\n      \"foreach(\",\n      \"case \",\n      \"case(\",\n      \"casex \",\n      \"casex(\",\n      \"casez \",\n      \"casez(\",\n      \"casexz \",\n      \"casexz(\",\n      \"fork \",\n      \" ? \",\n      \"inside\",\n      \"with\",\n      \"event \"\n    ],\n    \"extensions\": [\"sv\", \"svh\"],\n    \"keywords\": [\"endmodule\", \"posedge\", \"edge\", \"always\", \"wire\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Systemd\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\n      \"automount\",\n      \"device\",\n      \"link\",\n      \"mount\",\n      \"path\",\n      \"scope\",\n      \"service\",\n      \"slice\",\n      \"socket\",\n      \"swap\",\n      \"target\",\n      \"timer\"\n    ],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"TCL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"tcl\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"tcl\"]\n  },\n  \"TL\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"tl\"],\n    \"line_comment\": [\"//\", \"///\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"TOML\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"toml\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\\\\\"\\\\\\\"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\\\\\\\"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'''\",\n        \"start\": \"'''\"\n      }\n    ]\n  },\n  \"TTCN-3\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"from \",\n      \"if \",\n      \"if(\",\n      \"select \",\n      \"case \",\n      \"while \",\n      \"do \",\n      \"goto \",\n      \"stop \",\n      \"break \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ttcn\", \"ttcn3\", \"ttcnpp\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"TaskPaper\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"taskpaper\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"TeX\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"tex\", \"sty\"],\n    \"line_comment\": [\"%\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Teal\": {\n    \"complexitychecks\": [\n      \"loop:\",\n      \"retsub\",\n      \"callsub \",\n      \"&&\",\n      \"==\",\n      \"||\",\n      \"<=\",\n      \">=\"\n    ],\n    \"extensions\": [\"teal\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Templ\": {\n    \"complexitychecks\": [\n      \"if \",\n      \" else \",\n      \"switch \",\n      \"case \",\n      \"default:\",\n      \"for \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"templ\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"ignoreEscape\": true,\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"TemplateToolkit\": {\n    \"complexitychecks\": [\n      \"[% BLOCK\",\n      \"[% FILTER\",\n      \"[% FOR\",\n      \"[% FOREACH\",\n      \"[% IF\",\n      \"[% INCLUDE\",\n      \"[% MACRO\",\n      \"[% PROCESS\",\n      \"[% SWITCH\",\n      \"[% UNLESS\",\n      \"[% WRAPPER\"\n    ],\n    \"extensions\": [\"tt\", \"tt2\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"[%#\", \"%]\"]],\n    \"quotes\": []\n  },\n  \"Tera\": {\n    \"complexitychecks\": [\n      \"{% include \",\n      \"{% macro \",\n      \"{% block \",\n      \"{% extends \",\n      \"{% for \",\n      \"{% set \",\n      \"{% if \",\n      \"{% elif \",\n      \"{% else \"\n    ],\n    \"extensions\": [\"tera\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"{#\", \"#}\"]],\n    \"quotes\": []\n  },\n  \"Terraform\": {\n    \"complexitychecks\": [\n      \"count\",\n      \"for\",\n      \"for_each\",\n      \"if\",\n      \": \",\n      \"? \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"> \",\n      \">= \",\n      \"< \",\n      \"<= \",\n      \"== \"\n    ],\n    \"extensions\": [\"tf\", \"tf.json\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Textile\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"textile\"],\n    \"line_comment\": [\"###. \"],\n    \"multi_line\": [[\"###.. \", \"p. \"]],\n    \"quotes\": []\n  },\n  \"Thrift\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"thrift\"],\n    \"line_comment\": [\"//\", \"#\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Twig Template\": {\n    \"complexitychecks\": [\"{% for \", \"{% if \", \"{% else \", \"{% elseif \"],\n    \"extensions\": [\"twig\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"TypeScript\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"| \",\n      \"|| \",\n      \"& \",\n      \"&& \",\n      \"!= \",\n      \"!== \",\n      \"== \",\n      \"=== \",\n      \"foreach(\",\n      \"case \",\n      \"case(\",\n      \"casex \",\n      \"casex(\",\n      \"casez \",\n      \"casez(\",\n      \"casexz \",\n      \"casexz(\",\n      \"fork\",\n      \"?\",\n      \":\",\n      \"inside\",\n      \"with\"\n    ],\n    \"extensions\": [\"ts\", \"tsx\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"TypeScript Typings\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"| \",\n      \"|| \",\n      \"& \",\n      \"&& \",\n      \"!= \",\n      \"!== \",\n      \"== \",\n      \"=== \",\n      \"foreach(\",\n      \"case \",\n      \"case(\",\n      \"casex \",\n      \"casex(\",\n      \"casez \",\n      \"casez(\",\n      \"casexz \",\n      \"casexz(\",\n      \"fork\",\n      \"?\",\n      \":\",\n      \"inside\",\n      \"with\"\n    ],\n    \"extensions\": [\"d.ts\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"TypeSpec\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"tsp\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\"\\\"\\\"\",\n        \"ignoreEscape\": true,\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"Typst\": {\n    \"extensions\": [\"typ\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Unreal Script\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"uc\", \"uci\", \"upkg\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Up\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"try \",\n      \"func \",\n      \"up \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"up\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"Ur/Web\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"ur\", \"urs\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Ur/Web Project\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"urp\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"V\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"v\"],\n    \"keywords\": [\n      \"break\",\n      \"const \",\n      \"continue\",\n      \"defer\",\n      \"else \",\n      \"enum\",\n      \"fn \",\n      \"goto\",\n      \"import \",\n      \"in \",\n      \"interface\",\n      \"match\",\n      \"mut\",\n      \"println\",\n      \"pub\",\n      \"return\",\n      \"struct \",\n      \"type \"\n    ],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"VHDL\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vhd\", \"vhdl\"],\n    \"keywords\": [\n      \"abs\",\n      \"access\",\n      \"after\",\n      \"alias\",\n      \"all\",\n      \"and\",\n      \"architecture\",\n      \"array\",\n      \"assert\",\n      \"attribute\",\n      \"begin\",\n      \"block\",\n      \"body\",\n      \"buffer\",\n      \"bus\",\n      \"case\",\n      \"component\",\n      \"configuration\",\n      \"constant\",\n      \"disconnect\",\n      \"downto\",\n      \"else\",\n      \"elsif\",\n      \"end\",\n      \"entity\",\n      \"exit\",\n      \"file\",\n      \"for\",\n      \"function\",\n      \"generate\",\n      \"generic\",\n      \"group\",\n      \"guarded\",\n      \"if\",\n      \"impure\",\n      \"in\",\n      \"inertial\",\n      \"inout\",\n      \"is\",\n      \"label\",\n      \"library\",\n      \"linkage\",\n      \"literal\",\n      \"loop\",\n      \"map\",\n      \"mod\",\n      \"nand\",\n      \"new\",\n      \"next\",\n      \"nor\",\n      \"not\",\n      \"null\",\n      \"of\",\n      \"on\",\n      \"open\",\n      \"or\",\n      \"others\",\n      \"out\",\n      \"package\",\n      \"port\",\n      \"postponed\",\n      \"procedure\",\n      \"process\",\n      \"pure\",\n      \"range\",\n      \"record\",\n      \"register\",\n      \"reject\",\n      \"rem\",\n      \"report\",\n      \"return\",\n      \"rol\",\n      \"ror\",\n      \"select\",\n      \"severity\",\n      \"shared\",\n      \"signal\",\n      \"sla\",\n      \"sll\",\n      \"sra\",\n      \"srl\",\n      \"subtype\",\n      \"then\",\n      \"to\",\n      \"transport\",\n      \"type\",\n      \"unaffected\",\n      \"units\",\n      \"until\",\n      \"use\",\n      \"variable\",\n      \"wait\",\n      \"when\",\n      \"while\",\n      \"with\",\n      \"xnor\",\n      \"xor\"\n    ],\n    \"line_comment\": [\"--\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Vala\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"foreach \",\n      \"foreach(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"switch(\",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vala\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"@\\\"\"\n      },\n      {\n        \"ignoreEscape\": true,\n        \"end\": \"\\\"\\\"\\\"\",\n        \"start\": \"\\\"\\\"\\\"\"\n      }\n    ]\n  },\n  \"Varnish Configuration\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"vcl\"],\n    \"line_comment\": [\"#\", \"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": []\n  },\n  \"Verilog\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vg\", \"vh\", \"v\"],\n    \"keywords\": [\n      \"module\",\n      \"endmodule\",\n      \"timescale\",\n      \"input\",\n      \"output\",\n      \"reg\",\n      \"wire\",\n      \"posedge\",\n      \"negedge\",\n      \"always\",\n      \"begin\",\n      \"switch\",\n      \"case\",\n      \"end\",\n      \"endcase\",\n      \"else\",\n      \"localparam\",\n      \"initial\",\n      \"signed\",\n      \"assign\",\n      \"generate\",\n      \"genvar\"\n    ],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Verilog Args File\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"irunargs\", \"xrunargs\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Vertex Shader File\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vsh\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Vim Script\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vim\", \"vimrc\", \"gvimrc\"],\n    \"filenames\": [\"_vimrc\", \".vimrc\", \"_gvimrc\", \".gvimrc\", \"vimrc\", \"gvimrc\"],\n    \"line_comment\": [\"\\\"\", \"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Visual Basic\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"elseif \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vb\"],\n    \"line_comment\": [\"'\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Visual Basic for Applications\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"elseif \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"cls\"],\n    \"line_comment\": [\"'\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      }\n    ]\n  },\n  \"Vue\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"vue\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"<!--\", \"-->\"], [\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ]\n  },\n  \"Web Services Description Language\": {\n    \"extensions\": [\"wsdl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"WebGPU Shading Language\": {\n    \"complexitychecks\": [\n      \"for (\",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"while(\",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"wgsl\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]]\n  },\n  \"Windows Resource-Definition Script\": {\n    \"extensions\": [\"rc\"],\n    \"keywords\": [\n      \"#include\",\n      \"#define\",\n      \"RC_INVOKED\",\n      \"VERSIONINFO\",\n      \"FILEVERSION\",\n      \"PRODUCTVERSION\",\n      \"FILEOS\",\n      \"FILETYPE\",\n      \"BLOCK\",\n      \"VALUE\",\n      \"StringFileInfo\",\n      \"VarFileInfo\"\n    ],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Wolfram\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"nb\", \"wl\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"(*\", \"*)\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"Wren\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"wren\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"XAML\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"xaml\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"XML\": {\n    \"extensions\": [\"xml\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"XML Schema\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"xsd\"],\n    \"line_comment\": [],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Xcode Config\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"xcconfig\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Xtend\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"xtend\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"YAML\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"yaml\", \"yml\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"Yarn\": {\n    \"complexitychecks\": [\n      \"<<if \",\n      \"<<elseif \",\n      \"<<else \",\n      \" eq \",\n      \" == \",\n      \" neq \",\n      \" ! \",\n      \" gt \",\n      \" > \",\n      \" lt \",\n      \" < \",\n      \" lte \",\n      \" <= \",\n      \" gte \",\n      \" >= \",\n      \" xor \",\n      \" ^ \",\n      \" and \",\n      \" && \",\n      \" || \",\n      \" or \"\n    ],\n    \"extensions\": [\"yarn\"],\n    \"line_comment\": [],\n    \"quotes\": []\n  },\n  \"Zig\": {\n    \"complexitychecks\": [\n      \"while \",\n      \"for \",\n      \"if \",\n      \"else \",\n      \"defer \",\n      \"switch\",\n      \"||\",\n      \"&&\",\n      \"!=\",\n      \"==\"\n    ],\n    \"extensions\": [\"zig\"],\n    \"line_comment\": [\"//\"],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"\\n\",\n        \"start\": \"\\\\\\\\\"\n      }\n    ]\n  },\n  \"ZoKrates\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"if \",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"zok\"],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]]\n  },\n  \"Zsh\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"|| \",\n      \"&& \",\n      \"!= \",\n      \"== \"\n    ],\n    \"extensions\": [\"zsh\", \"zshenv\", \"zlogin\", \"zlogout\", \"zprofile\", \"zshrc\"],\n    \"filenames\": [\".zshenv\", \".zlogin\", \".zlogout\", \".zprofile\", \".zshrc\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\\\\\"\",\n        \"start\": \"\\\\\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      }\n    ],\n    \"shebangs\": [\"zsh\"]\n  },\n  \"bait\": {\n    \"complexitychecks\": [\"for \", \"if \", \"else \", \" or \", \" and \", \"!= \", \"== \"],\n    \"extensions\": [\"bt\"],\n    \"keywords\": [\n      \"and\",\n      \"break\",\n      \"const \",\n      \"continue\",\n      \"else \",\n      \"fun \",\n      \"import \",\n      \"not \",\n      \"or \",\n      \"package \",\n      \"return\",\n      \"struct \"\n    ],\n    \"line_comment\": [\"//\"],\n    \"multi_line\": [[\"/*\", \"*/\"]],\n    \"nestedmultiline\": true,\n    \"quotes\": [\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"`\",\n        \"start\": \"`\"\n      }\n    ]\n  },\n  \"gitignore\": {\n    \"complexitychecks\": [],\n    \"extensions\": [],\n    \"filenames\": [\".gitignore\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"hoon\": {\n    \"complexitychecks\": [\n      \"%+  turn\",\n      \"(turn \",\n      \"%+  roll\",\n      \"(roll \",\n      \"%+  reel\",\n      \"(reel \",\n      \"|.  \",\n      \"|.(\",\n      \"|-  \",\n      \"|-(\",\n      \"|?  \",\n      \"|?(\",\n      \"?|  \",\n      \"?|(\",\n      \"|(\",\n      \"?-  \",\n      \"?-(\",\n      \"?:  \",\n      \"?:(\",\n      \"?.  \",\n      \"?.(\",\n      \"?^  \",\n      \"?^(\",\n      \"?<  \",\n      \"?<(\",\n      \"?>  \",\n      \"?>(\",\n      \"?+  \",\n      \"?+(\",\n      \"?&  \",\n      \"?&(\",\n      \"&(\",\n      \"?@  \",\n      \"?@(\",\n      \"?~  \",\n      \"?~(\",\n      \"?=  \",\n      \"?=(\",\n      \".=  \",\n      \"=(\",\n      \"!=(\"\n    ],\n    \"extensions\": [\"hoon\"],\n    \"line_comment\": [\"::\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      },\n      {\n        \"end\": \"'\",\n        \"start\": \"'\"\n      },\n      {\n        \"end\": \"```\",\n        \"start\": \"```\"\n      }\n    ]\n  },\n  \"ignore\": {\n    \"complexitychecks\": [],\n    \"extensions\": [],\n    \"filenames\": [\".ignore\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"jq\": {\n    \"complexitychecks\": [\n      \".\",\n      \"if \",\n      \"elif \",\n      \"else \",\n      \"!= \",\n      \"== \",\n      \">= \",\n      \"<= \",\n      \"< \",\n      \"> \",\n      \"and \",\n      \"or \",\n      \"not \",\n      \"// \",\n      \"try \",\n      \"break \"\n    ],\n    \"extensions\": [\"jq\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"m4\": {\n    \"complexitychecks\": [],\n    \"extensions\": [\"m4\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": []\n  },\n  \"nuspec\": {\n    \"extensions\": [\"nuspec\"],\n    \"line_comment\": [],\n    \"multi_line\": [[\"<!--\", \"-->\"]],\n    \"quotes\": [\n      {\n        \"end\": \"\\\"\",\n        \"start\": \"\\\"\"\n      }\n    ]\n  },\n  \"sed\": {\n    \"complexitychecks\": [\n      \"for \",\n      \"for(\",\n      \"if \",\n      \"if(\",\n      \"switch \",\n      \"while \",\n      \"else \",\n      \"and \",\n      \"or \",\n      \"not \",\n      \"in \"\n    ],\n    \"extensions\": [\"sed\"],\n    \"line_comment\": [\"#\"],\n    \"multi_line\": [],\n    \"quotes\": [],\n    \"shebangs\": [\"sed\"]\n  },\n  \"wenyan\": {\n    \"complexitychecks\": [\n      \"若\",\n      \"若非\",\n      \"等於\",\n      \"不等於\",\n      \"不大於\",\n      \"不小於\",\n      \"大於\",\n      \"小於\",\n      \"凡\",\n      \"為是\",\n      \"恆為是\",\n      \"中之\",\n      \"遍\"\n    ],\n    \"extensions\": [\"wy\"],\n    \"line_comment\": [\"批曰\", \"注曰\", \"疏曰\"],\n    \"multi_line\": [],\n    \"quotes\": [\n      {\n        \"end\": \"「「\",\n        \"start\": \"」」\"\n      }\n    ]\n  }\n}\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 9.498046875,
          "content": "// SPDX-License-Identifier: MIT\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime\"\n\t\"strings\"\n\n\t\"github.com/boyter/scc/v3/processor\"\n\t\"github.com/spf13/cobra\"\n)\n\n//go:generate go run scripts/include.go\nfunc main() {\n\t// f, _ := os.Create(\"scc.pprof\")\n\t// pprof.StartCPUProfile(f)\n\t// defer pprof.StopCPUProfile()\n\n\tif len(os.Args) == 2 && strings.HasPrefix(os.Args[1], \"@\") {\n\t\t// handle \"scc @flags.txt\" syntax\n\t\tfilepath := strings.TrimPrefix(os.Args[1], \"@\")\n\t\tb, err := os.ReadFile(filepath)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error reading flags from a file: %s\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\targs := strings.Split(string(b), \"\\n\")\n\t\tnewArgs := make([]string, 0, len(args))\n\t\tfor _, x := range args {\n\t\t\tnewArgs = append(newArgs, strings.TrimSpace(x))\n\t\t}\n\t\tos.Args = append([]string{os.Args[0]}, newArgs...)\n\t}\n\n\trootCmd := &cobra.Command{\n\t\tUse:     \"scc [flags] [files or directories]\",\n\t\tShort:   \"scc [files or directories]\",\n\t\tLong:    fmt.Sprintf(\"Sloc, Cloc and Code. Count lines of code in a directory with complexity estimation.\\nVersion %s\\nBen Boyter <ben@boyter.org> + Contributors\", processor.Version),\n\t\tVersion: processor.Version,\n\t\tRun: func(cmd *cobra.Command, args []string) {\n\t\t\tprocessor.DirFilePaths = args\n\t\t\tprocessor.ConfigureGc()\n\t\t\tprocessor.ConfigureLazy(true)\n\t\t\tprocessor.Process()\n\t\t},\n\t}\n\n\tflags := rootCmd.PersistentFlags()\n\n\tflags.BoolVarP(\n\t\t&processor.MaxMean,\n\t\t\"character\",\n\t\t\"m\",\n\t\tfalse,\n\t\t\"calculate max and mean characters per line\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Percent,\n\t\t\"percent\",\n\t\t\"p\",\n\t\tfalse,\n\t\t\"include percentage values in output\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.UlocMode,\n\t\t\"uloc\",\n\t\t\"u\",\n\t\tfalse,\n\t\t\"calculate the number of unique lines of code (ULOC) for the project\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Dryness,\n\t\t\"dryness\",\n\t\t\"a\",\n\t\tfalse,\n\t\t\"calculate the DRYness of the project (implies --uloc)\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.DisableCheckBinary,\n\t\t\"binary\",\n\t\tfalse,\n\t\t\"disable binary file detection\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Files,\n\t\t\"by-file\",\n\t\tfalse,\n\t\t\"display output for every file\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Ci,\n\t\t\"ci\",\n\t\tfalse,\n\t\t\"enable CI output settings where stdout is ASCII\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Ignore,\n\t\t\"no-ignore\",\n\t\tfalse,\n\t\t\"disables .ignore file logic\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.SccIgnore,\n\t\t\"no-scc-ignore\",\n\t\tfalse,\n\t\t\"disables .sccignore file logic\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.GitIgnore,\n\t\t\"no-gitignore\",\n\t\tfalse,\n\t\t\"disables .gitignore file logic\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.GitModuleIgnore,\n\t\t\"no-gitmodule\",\n\t\tfalse,\n\t\t\"disables .gitmodules file logic\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.CountIgnore,\n\t\t\"count-ignore\",\n\t\tfalse,\n\t\t\"set to allow .gitignore and .ignore files to be counted\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Debug,\n\t\t\"debug\",\n\t\tfalse,\n\t\t\"enable debug output\",\n\t)\n\tflags.StringSliceVar(\n\t\t&processor.PathDenyList,\n\t\t\"exclude-dir\",\n\t\t[]string{\".git\", \".hg\", \".svn\"},\n\t\t\"directories to exclude\",\n\t)\n\tflags.IntVar(\n\t\t&processor.GcFileCount,\n\t\t\"file-gc-count\",\n\t\t10000,\n\t\t\"number of files to parse before turning the GC on\",\n\t)\n\tflags.IntVar(\n\t\t&processor.FileListQueueSize,\n\t\t\"file-list-queue-size\",\n\t\truntime.NumCPU(),\n\t\t\"the size of the queue of files found and ready to be read into memory\",\n\t)\n\tflags.IntVar(\n\t\t&processor.FileProcessJobWorkers,\n\t\t\"file-process-job-workers\",\n\t\truntime.NumCPU(),\n\t\t\"number of goroutine workers that process files collecting stats\",\n\t)\n\tflags.IntVar(\n\t\t&processor.FileSummaryJobQueueSize,\n\t\t\"file-summary-job-queue-size\",\n\t\truntime.NumCPU(),\n\t\t\"the size of the queue used to hold processed file statistics before formatting\",\n\t)\n\tflags.IntVar(\n\t\t&processor.DirectoryWalkerJobWorkers,\n\t\t\"directory-walker-job-workers\",\n\t\t8,\n\t\t\"controls the maximum number of workers which will walk the directory tree\",\n\t)\n\tflags.StringVarP(\n\t\t&processor.Format,\n\t\t\"format\",\n\t\t\"f\",\n\t\t\"tabular\",\n\t\t\"set output format [tabular, wide, json, json2, csv, csv-stream, cloc-yaml, html, html-table, sql, sql-insert, openmetrics]\",\n\t)\n\tflags.StringSliceVarP(\n\t\t&processor.AllowListExtensions,\n\t\t\"include-ext\",\n\t\t\"i\",\n\t\t[]string{},\n\t\t\"limit to file extensions [comma separated list: e.g. go,java,js]\",\n\t)\n\tflags.StringSliceVarP(\n\t\t&processor.ExcludeListExtensions,\n\t\t\"exclude-ext\",\n\t\t\"x\",\n\t\t[]string{},\n\t\t\"ignore file extensions (overrides include-ext) [comma separated list: e.g. go,java,js]\",\n\t)\n\tflags.StringSliceVarP(\n\t\t&processor.ExcludeFilename,\n\t\t\"exclude-file\",\n\t\t\"n\",\n\t\t[]string{\"package-lock.json\", \"Cargo.lock\", \"yarn.lock\", \"pubspec.lock\", \"Podfile.lock\", \"pnpm-lock.yaml\"},\n\t\t\"ignore files with matching names\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Languages,\n\t\t\"languages\",\n\t\t\"l\",\n\t\tfalse,\n\t\t\"print supported languages and extensions\",\n\t)\n\tflags.Int64Var(\n\t\t&processor.AverageWage,\n\t\t\"avg-wage\",\n\t\t56286,\n\t\t\"average wage value used for basic COCOMO calculation\",\n\t)\n\tflags.Float64Var(\n\t\t&processor.Overhead,\n\t\t\"overhead\",\n\t\t2.4,\n\t\t\"set the overhead multiplier for corporate overhead (facilities, equipment, accounting, etc.)\",\n\t)\n\tflags.Float64Var(\n\t\t&processor.EAF,\n\t\t\"eaf\",\n\t\t1.0,\n\t\t\"the effort adjustment factor derived from the cost drivers (1.0 if rated nominal)\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.SLOCCountFormat,\n\t\t\"sloccount-format\",\n\t\tfalse,\n\t\t\"print a more SLOCCount like COCOMO calculation\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Cocomo,\n\t\t\"no-cocomo\",\n\t\tfalse,\n\t\t\"remove COCOMO calculation output\",\n\t)\n\tflags.StringVar(\n\t\t&processor.CocomoProjectType,\n\t\t\"cocomo-project-type\",\n\t\t\"organic\",\n\t\t\"change COCOMO model type [organic, semi-detached, embedded, \\\"custom,1,1,1,1\\\"]\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.Size,\n\t\t\"no-size\",\n\t\tfalse,\n\t\t\"remove size calculation output\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.HBorder,\n\t\t\"no-hborder\",\n\t\tfalse,\n\t\t\"remove horizontal borders between sections\",\n\t)\n\tflags.StringVar(\n\t\t&processor.SizeUnit,\n\t\t\"size-unit\",\n\t\t\"si\",\n\t\t\"set size unit [si, binary, mixed, xkcd-kb, xkcd-kelly, xkcd-imaginary, xkcd-intel, xkcd-drive, xkcd-bakers]\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Complexity,\n\t\t\"no-complexity\",\n\t\t\"c\",\n\t\tfalse,\n\t\t\"skip calculation of code complexity\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Duplicates,\n\t\t\"no-duplicates\",\n\t\t\"d\",\n\t\tfalse,\n\t\t\"remove duplicate files from stats and output\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.MinifiedGenerated,\n\t\t\"min-gen\",\n\t\t\"z\",\n\t\tfalse,\n\t\t\"identify minified or generated files\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Minified,\n\t\t\"min\",\n\t\t\"\",\n\t\tfalse,\n\t\t\"identify minified files\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Generated,\n\t\t\"gen\",\n\t\t\"\",\n\t\tfalse,\n\t\t\"identify generated files\",\n\t)\n\tflags.StringSliceVarP(\n\t\t&processor.GeneratedMarkers,\n\t\t\"generated-markers\",\n\t\t\"\",\n\t\t[]string{\"do not edit\", \"<auto-generated />\"},\n\t\t\"string markers in head of generated files\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.IgnoreMinifiedGenerate,\n\t\t\"no-min-gen\",\n\t\tfalse,\n\t\t\"ignore minified or generated files in output (implies --min-gen)\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.IgnoreMinified,\n\t\t\"no-min\",\n\t\tfalse,\n\t\t\"ignore minified files in output (implies --min)\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.IgnoreGenerated,\n\t\t\"no-gen\",\n\t\tfalse,\n\t\t\"ignore generated files in output (implies --gen)\",\n\t)\n\tflags.IntVar(\n\t\t&processor.MinifiedGeneratedLineByteLength,\n\t\t\"min-gen-line-length\",\n\t\t255,\n\t\t\"number of bytes per average line for file to be considered minified or generated\",\n\t)\n\tflags.StringArrayVarP(\n\t\t&processor.Exclude,\n\t\t\"not-match\",\n\t\t`M`,\n\t\t[]string{},\n\t\t\"ignore files and directories matching regular expression\",\n\t)\n\tflags.StringVarP(\n\t\t&processor.FileOutput,\n\t\t\"output\",\n\t\t\"o\",\n\t\t\"\",\n\t\t\"output filename (default stdout)\",\n\t)\n\tflags.StringVarP(\n\t\t&processor.SortBy,\n\t\t\"sort\",\n\t\t\"s\",\n\t\t\"files\",\n\t\t\"column to sort by [files, name, lines, blanks, code, comments, complexity]\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Trace,\n\t\t\"trace\",\n\t\t\"t\",\n\t\tfalse,\n\t\t\"enable trace output (not recommended when processing multiple files)\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.Verbose,\n\t\t\"verbose\",\n\t\t\"v\",\n\t\tfalse,\n\t\t\"verbose output\",\n\t)\n\tflags.BoolVarP(\n\t\t&processor.More,\n\t\t\"wide\",\n\t\t\"w\",\n\t\tfalse,\n\t\t\"wider output with additional statistics (implies --complexity)\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.NoLarge,\n\t\t\"no-large\",\n\t\tfalse,\n\t\t\"ignore files over certain byte and line size set by large-line-count and large-byte-count\",\n\t)\n\tflags.BoolVar(\n\t\t&processor.IncludeSymLinks,\n\t\t\"include-symlinks\",\n\t\tfalse,\n\t\t\"if set will count symlink files\",\n\t)\n\tflags.Int64Var(\n\t\t&processor.LargeLineCount,\n\t\t\"large-line-count\",\n\t\t40000,\n\t\t\"number of lines a file can contain before being removed from output\",\n\t)\n\tflags.Int64Var(\n\t\t&processor.LargeByteCount,\n\t\t\"large-byte-count\",\n\t\t1000000,\n\t\t\"number of bytes a file can contain before being removed from output\",\n\t)\n\tflags.StringVar(\n\t\t&processor.CountAs,\n\t\t\"count-as\",\n\t\t\"\",\n\t\t\"count extension as language [e.g. jsp:htm,chead:\\\"C Header\\\" maps extension jsp to html and chead to C Header]\",\n\t)\n\tflags.StringVar(\n\t\t&processor.FormatMulti,\n\t\t\"format-multi\",\n\t\t\"\",\n\t\t\"have multiple format output overriding --format [e.g. tabular:stdout,csv:file.csv,json:file.json]\",\n\t)\n\tflags.StringVar(\n\t\t&processor.SQLProject,\n\t\t\"sql-project\",\n\t\t\"\",\n\t\t\"use supplied name as the project identifier for the current run. Only valid with the --format sql or sql-insert option\",\n\t)\n\tflags.StringVar(\n\t\t&processor.RemapUnknown,\n\t\t\"remap-unknown\",\n\t\t\"\",\n\t\t\"inspect files of unknown type and remap by checking for a string and remapping the language [e.g. \\\"-*- C++ -*-\\\":\\\"C Header\\\"]\",\n\t)\n\tflags.StringVar(\n\t\t&processor.RemapAll,\n\t\t\"remap-all\",\n\t\t\"\",\n\t\t\"inspect every file and remap by checking for a string and remapping the language [e.g. \\\"-*- C++ -*-\\\":\\\"C Header\\\"]\",\n\t)\n\tflags.StringVar(\n\t\t&processor.CurrencySymbol,\n\t\t\"currency-symbol\",\n\t\t\"$\",\n\t\t\"set currency symbol\",\n\t)\n\n\tif err := rootCmd.Execute(); err != nil {\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "performance-over-time.png",
          "type": "blob",
          "size": 38.36328125,
          "content": null
        },
        {
          "name": "processor",
          "type": "tree",
          "content": null
        },
        {
          "name": "scc.jpg",
          "type": "blob",
          "size": 18.8076171875,
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-all.sh",
          "type": "blob",
          "size": 36.66796875,
          "content": "#!/bin/bash\n\n# make sure this script can be executed from any dir\ncd $(dirname $0)\n\nGREEN='\\033[1;32m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\necho \"Running go generate...\"\ngo generate\n\necho \"Running go fmt...\"\ngo fmt ./...\n\necho \"Running unit tests...\"\ngo test ./... || exit\n\n# Race Detection\necho \"Running race detection...\"\nif  go run --race . 2>&1 >/dev/null | grep -q \"Found\" ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED race detection run 'go run --race .' to identify\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED race detection${NC}\"\nfi\n\necho \"Building application...\"\ngo build -ldflags=\"-s -w\" || exit\n\necho '```' > LANGUAGES.md\n./scc --languages >> LANGUAGES.md\necho '```' >> LANGUAGES.md\n\n\necho \"Running with @file flag parsing syntax\"\n# include \\n, \\r\\n and no line terminators\necho -e \"go.mod\\ngo.sum\\r\\nLICENSE\" > flags.txt\nif ./scc @flags.txt ; then\n    echo -e \"${GREEN}PASSED @file flag syntax\"\n    # post processing\n    rm flags.txt\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should handle @file flag parsing syntax\"\n    echo -e \"=======================================================${NC}\"\n    # post processing\n    rm flags.txt\n    exit\nfi\n\n\necho \"Building HTML report...\"\n\n./scc --format html -a --by-file -i go -o SCC-OUTPUT-REPORT.html\n\necho \"Running integration tests...\"\n\nif ./scc --not-a-real-option > /dev/null ; then\n    echo -e \"${RED}=================================================\"\n    echo -e \"FAILED Invalid option should produce error code \"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED invalid option test\"\nfi\n\n## NB you need to have pyyaml installed via pip install pyyaml for this to work\n#if ./scc \"examples/language/\" --format cloc-yaml -o .tmp_scc_yaml >/dev/null && python <<EOS\n#import yaml,sys\n#try:\n#    with open('.tmp_scc_yaml','r') as f:\n#        data = yaml.load(f.read())\n#        if type(data) is dict and data.keys():\n#            sys.exit(0)\n#        else:\n#            print('data was {}'.format(type(data)))\n#except Exception as e:\n#    pass\n#sys.exit(1)\n#EOS\n#\n#then\n#\techo -e \"${GREEN}PASSED cloc-yaml format test\"\n#else\n#    echo -e \"${RED}=======================================================\"\n#    echo -e \"${RED}FAILED Should accept --format cloc-yaml and should generate valid output\"\n#    echo -e \"=======================================================${NC}\"\n#    rm -f .tmp_scc_yaml\n#    exit\n#fi\n#\n#if ./scc \"examples/language/\" --format cloc-yml -o .tmp_scc_yaml >/dev/null && python <<EOS\n#import yaml,sys\n#try:\n#    with open('.tmp_scc_yaml','r') as f:\n#        data = yaml.load(f.read())\n#        if type(data) is dict and data.keys():\n#            sys.exit(0)\n#        else:\n#            print('data was {}'.format(type(data)))\n#except Exception as e:\n#    pass\n#sys.exit(1)\n#EOS\n#\n#then\n#\techo -e \"${GREEN}PASSED cloc-yml format test\"\n#else\n#    echo -e \"${RED}=======================================================\"\n#    echo -e \"${RED}FAILED Should accept --format cloc-yml and should generate valid output\"\n#    echo -e \"=======================================================${NC}\"\n#    rm -f .tmp_scc_yaml\n#    exit\n#fi\n\nif ./scc NOTAREALDIRECTORYORFILE > /dev/null ; then\n    echo -e \"${RED}=================================================\"\n    echo -e \"FAILED Invalid file/directory should produce error code \"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED invalid file/directory test\"\nfi\n\nif ./scc > /dev/null ; then\n    echo -e \"${GREEN}PASSED no directory specified test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run correctly with no directory specified\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc processor > /dev/null ; then\n    echo -e \"${GREEN}PASSED directory specified test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run correctly with directory specified\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --avg-wage 10000 --binary --by-file --no-cocomo --no-size --size-unit si --include-symlinks --debug --exclude-dir .git -f tabular -i go -c -d -M something -s name -w processor > /dev/null ; then\n    echo -e \"${GREEN}PASSED multiple options test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run correctly with multiple options\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -i sh -M \"vendor|examples|p.*\" > /dev/null ; then\n    echo -e \"${GREEN}PASSED regular expression ignore test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run with regular expression ignore\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc \"examples/shared_extension/\" | grep -q \"Coq\"; then\n    echo -e \"${GREEN}PASSED shared extension test 1\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to work with shared extension 1\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc \"examples/shared_extension/\" | grep -q \"Verilog\"; then\n    echo -e \"${GREEN}PASSED shared extension test 2\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to work with shared extension 2\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc \"examples/shared_extension/\" | grep -q \"V \"; then\n    echo -e \"${GREEN}PASSED shared extension test 3\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to work with shared extension 3\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --ci | grep -q \"\\-\\-\\-\\-\"; then\n    echo -e \"${GREEN}PASSED ci param test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to work with ci flag\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc \"examples/denylist/\" | grep -q \"Java\"; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should hit default .git denylist \"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED denylist test\"\nfi\n\n# Simple test to see if we get any concurrency issues\nfor i in {1..100}\ndo\n    if ./scc > /dev/null ; then\n        :\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Should not have concurrency issue\"\n        echo -e \"=================================================${NC}\"\n        exit\n    fi\ndone\necho -e \"${GREEN}PASSED concurrency issue test\"\n\nif ./scc main.go > /dev/null ; then\n    echo -e \"${GREEN}PASSED file specified test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run correctly with a file is specified\"\n    echo -e \"=================================================${NC}\"\n    exit\nfi\n\n# Multiple directory or file arguments\nif ./scc main.go README.md | grep -q \"Go \" ; then\n    echo -e \"${GREEN}PASSED multiple file argument test 1\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should work with multiple file arguments 1\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc main.go README.md | grep -q \"Markdown \" ; then\n    echo -e \"${GREEN}PASSED multiple file argument test 2\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should work with multiple file arguments 2\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc processor scripts > /dev/null ; then\n    echo -e \"${GREEN}PASSED multiple directory specified test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should run correctly with multiple directory specified\"\n    echo -e \"=================================================${NC}\"\n    exit\nfi\n\n# Try out duplicates\nfor i in {1..100}\ndo\n    if ./scc -d \"examples/duplicates/\" | grep -e \"Java\" | grep -q -e \" 1 \"; then\n        :\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Duplicates should be consistent\"\n        echo -e \"=======================================================${NC}\"\n        exit\n    fi\ndone\necho -e \"${GREEN}PASSED duplicates test\"\n\n# Ensure deterministic output\na=$(./scc .)\nfor i in {1..100}\ndo\n    b=$(./scc .)\n    if [ \"$a\" == \"$b\" ]; then\n        :\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Runs should be deterministic\"\n        echo -e \"=======================================================${NC}\"\n        exit\n    fi\ndone\necho -e \"${GREEN}PASSED deterministic test\"\n\n# Check for multiple regex via https://github.com/andyfitzgerald\na=$(./scc --not-match=\"(.*\\.hex|.*\\.d|.*\\.o|.*\\.csv|^(./)?[0-9]{8}_.*)\" . | grep Estimated | md5sum)\nb=$(./scc --not-match=\".*\\.hex\" --not-match=\".*\\.d\" --not-match=\".*\\.o\" --not-match=\".*\\.csv\" --not-match=\"^(./)?[0-9]{8}_.*\" . | grep Estimated | md5sum)\nif [ \"$a\" == \"$b\" ]; then\n    echo -e \"${GREEN}PASSED multiple regex test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED multiple regex test\"\n    echo -e \"=================================================${NC}\"\n    exit\nfi\n\n# Regression issue https://github.com/boyter/scc/issues/82\na=$(./scc . | grep Total)\nb=$(./scc ${PWD} | grep Total)\nif [ \"$a\" == \"$b\" ]; then\n    echo -e \"${GREEN}PASSED git filter\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED git filter\"\n    echo -e \"=================================================${NC}\"\n    exit\nfi\n\n# Turn off gitignore https://github.com/boyter/scc/issues/53\ntouch ignored.xml\na=$(./scc | grep Total)\nb=$(./scc --no-gitignore | grep Total)\nif [ \"$a\" == \"$b\" ]; then\n    echo -e \"${RED}=================================================\"\n    echo -e \"FAILED git ignore filter\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED git ignore filter\"\nfi\n\n# Regression issue https://github.com/boyter/scc/issues/115\nif ./scc \"examples/issue115/.test/file\" 2>&1 >/dev/null | grep -q \"Perl\" ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED hidden directory issue\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED hidden directory${NC}\"\nfi\n\n\n# Regression issue https://github.com/boyter/scc/issues/260\nif ./scc -d \"examples/issue260/\" 2>&1 >/dev/null | grep -q \"invalid memory address\" ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED duplicate empty crash\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED duplicate empty crash${NC}\"\nfi\n\na=$(./scc | grep Total)\nb=$(./scc --no-ignore | grep Total)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED ignore filter\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED ignore filter\"\nfi\n\nif ./scc \"examples/ignore/\" | grep -q \"Java \"; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED multiple gitignore\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED multiple gitignore\"\nfi\n\ntouch ./examples/ignore/ignorefile.txt\na=$(./scc --by-file --no-scc-ignore | grep ignorefile)\nb=$(./scc --by-file --no-ignore --no-scc-ignore | grep ignorefile)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED ignore recursive filter\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED ignore recursive filter\"\nfi\n\ntouch ./examples/ignore/gitignorefile.txt\na=$(./scc --by-file --no-scc-ignore | grep gitignorefile)\nb=$(./scc --by-file --no-gitignore --no-scc-ignore | grep gitignorefile)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED gitignore recursive filter\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED gitignore recursive filter\"\nfi\n\nif ./scc \"examples/language/\" --include-ext go | grep -q \"Java \"; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED include-ext option\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED include-ext option\"\nfi\n\na=$(./scc -i js ./examples/minified/ --no-scc-ignore)\nb=$(./scc -i js -z ./examples/minified/ --no-scc-ignore)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Minified check\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED minified check\"\nfi\n\na=$(./scc -i js -z ./examples/minified/ --no-scc-ignore)\nb=$(./scc -i js -z --no-min-gen ./examples/minified/ --no-scc-ignore)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Minified ignored check\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED minified ignored check\"\nfi\n\na=$(./scc ./examples/symlink/ --no-scc-ignore)\nb=$(./scc --include-symlinks ./examples/symlink/ --no-scc-ignore)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED symlink check\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED minified ignored check\"\nfi\n\nif ./scc ./examples/minified/ --no-min-gen --no-scc-ignore | grep -q \"\\$0\"; then\n    echo -e \"${GREEN}PASSED removed min\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED removed min\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/generated/ --no-min-gen --no-scc-ignore | grep -q \"\\$0\"; then\n    echo -e \"${GREEN}PASSED removed gen\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED removed gen\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -z ./examples/generated/ --no-scc-ignore | grep -q \"C Header (gen)\"; then\n    echo -e \"${GREEN}PASSED flagged as gen\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED flagged as gen\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/minified/ -i js -z --no-scc-ignore | grep -q \"JavaScript (min)\"; then\n    echo -e \"${GREEN}PASSED flagged as min\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED flagged as min\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/issue120/ -i java | grep -q \"Perl\"; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED extension param should ignore #!\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED extension param should ignore #!\"\nfi\n\nif ./scc -z --min-gen-line-length 1 --no-min-gen . | grep -q \"\\$0\"; then\n    echo -e \"${GREEN}PASSED min gen line length\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED min gen line length\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --no-large --large-byte-count 0 ./examples/language | grep -q \"\\$0\"; then\n    echo -e \"${GREEN}PASSED no large byte test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED no large byte test\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --no-large --large-line-count 0 ./examples/language | grep -q \"\\$0\"; then\n    echo -e \"${GREEN}PASSED no large line test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED no large line test\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format html | grep -q \"html\"; then\n    echo -e \"${GREEN}PASSED html output test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to output to html\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format html-table | grep -q \"table\"; then\n    echo -e \"${GREEN}PASSED html-table output test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to output to html-table\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format sql | grep -q \"create table metadata\"; then\n    echo -e \"${GREEN}PASSED sql output test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to output to sql\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format sql-insert | grep -q \"insert into t values\"; then\n    echo -e \"${GREEN}PASSED sql-insert output test\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should be able to output to sql-insert\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/countas/ --count-as jsp:html | grep -q \"HTML\"; then\n    echo -e \"${GREEN}PASSED counted JSP as HTML\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED counted JSP as HTML\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/countas/ --count-as JsP:html | grep -q \"HTML\"; then\n    echo -e \"${GREEN}PASSED counted JSP as HTML case\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED counted JSP as HTML case\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/countas/ --count-as jsp:j2 | grep -q \"Jinja\"; then\n    echo -e \"${GREEN}PASSED counted JSP as Jinja\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED counted JSP as Jinja\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/countas/ --count-as jsp:html,new:java | grep -q \"Java\"; then\n    echo -e \"${GREEN}PASSED counted new as Java\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED counted new as Java\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc ./examples/countas/ --count-as jsp:html,new:\"C Header\" | grep -q \"C Header\"; then\n    echo -e \"${GREEN}PASSED counted new as C Header\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED counted new as C Header\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -i css ./examples/issue152/ | grep -q \"CSS\"; then\n    echo -e \"${GREEN}PASSED -i extension check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED -i extension check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --file-gc-count 10 ./examples/duplicates/ -v | grep -q \"read file limit exceeded GC re-enabled\"; then\n    echo -e \"${GREEN}PASSED gc file count\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED gc file count\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f csv | grep -q \"Bytes\"; then\n    echo -e \"${GREEN}PASSED csv bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED csv bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f csv-stream | grep -q \"Bytes\"; then\n    echo -e \"${GREEN}PASSED csv-stream bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED csv-stream bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f html | grep -q \"Bytes\"; then\n    echo -e \"${GREEN}PASSED html bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED html bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f json | grep -q \"Bytes\"; then\n    echo -e \"${GREEN}PASSED json bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED json bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f json  -a | grep -q \"ULOC\"; then\n    echo -e \"${GREEN}PASSED json uloc check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED json uloc check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f json2 | grep -q \"Bytes\"; then\n    echo -e \"${GREEN}PASSED json2 bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED json bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc | grep -q \"megabytes\"; then\n    echo -e \"${GREEN}PASSED bytes check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED bytes check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f csv | grep -q \"Language,Lines,Code,Comments,Blanks,Complexity,Bytes,Files,ULOC\"; then\n    echo -e \"${GREEN}PASSED csv summary\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED csv summary\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc -f csv --by-file | grep -q \"Language,Provider,Filename,Lines,Code,Comments,Blanks,Complexity,Bytes\"; then\n    echo -e \"${GREEN}PASSED csv file\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED csv file\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --by-file --format-multi \"tabular:stdout,html:stdout,csv:stdout\" | grep -q \"Language,Provider\"; then\n    echo -e \"${GREEN}PASSED format multi check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED format multi check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format-multi \"tabular:stdout,html:stdout,csv:stdout,sql:stdout\" | grep -q \"meta charset\"; then\n    echo -e \"${GREEN}PASSED format multi check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED format multi check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --format-multi \"tabular:stdout,html:stdout,csv:stdout,sql:stdout\" | grep -q \"insert into t values\"; then\n    echo -e \"${GREEN}PASSED format multi check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED format multi check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --remap-unknown \"-*- C++ -*-\":\"C Header\" ./examples/remap/unknown | grep -q \"C Header\"; then\n    echo -e \"${GREEN}PASSED remap unknown\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED remap unknown\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --remap-all \"-*- C++ -*-\":\"C Header\" ./examples/remap/java.java | grep -q \"C Header\"; then\n    echo -e \"${GREEN}PASSED remap all\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED remap all\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\n./scc --format-multi \"tabular:output.tab,wide:output.wide,json:output.json,json2:output2.json,csv:output.csv,cloc-yaml:output.yaml,html:output.html,html-table:output.html2,sql:output.sql\"\n\nif test -f output.tab; then\n    echo -e \"${GREEN}PASSED output.tab check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.tab check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.wide; then\n    echo -e \"${GREEN}PASSED output.wide check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.wide check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.json; then\n    echo -e \"${GREEN}PASSED output.json check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.json check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output2.json; then\n    echo -e \"${GREEN}PASSED output2.json check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output2.json check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.yaml; then\n    echo -e \"${GREEN}PASSED output.yaml check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.yaml check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.html; then\n    echo -e \"${GREEN}PASSED output.html check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.html check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.html2; then\n    echo -e \"${GREEN}PASSED output.html2 check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.html2 check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif test -f output.sql; then\n    echo -e \"${GREEN}PASSED output.sql check\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED output.sql check\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type organic | grep -q \"organic\"; then\n    echo -e \"${GREEN}PASSED cocomo organic\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo organic\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type doesnotexist | grep -q \"organic\"; then\n    echo -e \"${GREEN}PASSED cocomo fallback\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo fallback\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type semi-detached | grep -q \"semi-detached\"; then\n    echo -e \"${GREEN}PASSED cocomo semi-detached\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo semi-detached\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type embedded | grep -q \"embedded\"; then\n    echo -e \"${GREEN}PASSED cocomo embedded\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo embedded\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type custom,1,1,1,1 | grep -q \"custom,1,1,1,1\"; then\n    echo -e \"${GREEN}PASSED cocomo custom,1,1,1,1\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo custom,1,1,1,1\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\nif ./scc --cocomo-project-type custom,1,1,1 | grep -q \"organic\"; then\n    echo -e \"${GREEN}PASSED cocomo custom fallback\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED cocomo custom fallback\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\na=$(./scc --exclude-dir examples/)\nb=$(./scc --exclude-dir examples)\nif [ \"$a\" != \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED examples exclude-dir check\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED examples exclude-dir check\"\nfi\n\na=$(./scc --exclude-ext go)\nb=$(./scc)\nif [ \"$a\" == \"$b\" ]; then\n    echo \"$a\"\n    echo \"$b\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED exclude-ext check\"\n    echo -e \"=================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED exclude-ext check\"\nfi\n\n# Issue 457\nif ./scc -M \".*\" | grep -q \"0.000 megabytes\"; then\n    echo -e \"${GREEN}PASSED issue 457\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED issue 457\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\n# Line length support\nif ./scc -m | grep -q \"MaxLine / MeanLine\"; then\n    echo -e \"${GREEN}PASSED character option\"\nelse\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED character option\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\n# Try out specific languages\nspecificLanguages=(\n    'ABNF '\n    'Alchemist '\n    'Alloy '\n    'Arturo '\n    'Astro '\n    'AWK '\n    'BASH '\n    'Bean '\n    'Bicep '\n    'Bitbucket Pipeline '\n    'Boo '\n    'Bosque '\n    'C Shell '\n    'C# '\n    'Cairo '\n    'Cangjie '\n    'Chapel '\n    'Circom '\n    'Clipper '\n    'Clojure '\n    'Cuda '\n    'DAML '\n    'DM '\n    'Docker ignore '\n    'Dockerfile '\n    'DOT '\n    'Elm '\n    'EmiT '\n    'F# '\n    'Factor '\n    'Flow9 '\n    'FSL '\n    'Futhark '\n    'FXML '\n    'Gemfile '\n    'Gleam '\n    'Go '\n    'Godot Scene '\n    'GraphQL '\n    'Gwion '\n    'HAML '\n    'Hare '\n    'ignore '\n    'INI '\n    'Java '\n    'JSON5 '\n    'JSONC '\n    'jq '\n    'Korn Shell '\n    'LALRPOP '\n    'License '\n    'LiveScript '\n    'LLVM IR '\n    'Luna '\n    'Makefile '\n    'Metal '\n    'Monkey C '\n    'Moonbit '\n    'Nushell '\n    'OpenQASM '\n    'Pkl '\n    'Proto '\n    'Q# '\n    'R '\n    'Racket '\n    'Rakefile '\n    'Redscript '\n    'Shell '\n    'Sieve '\n    'Slang '\n    'Slint '\n    'Smalltalk '\n    'Snakemake '\n    'Stan '\n    'Teal '\n    'Tera '\n    'Templ '\n    'Terraform '\n    'TTCN-3 '\n    'TypeSpec '\n    'Typst '\n    'Up '\n    'Vala '\n    'Web Services '\n    'wenyan '\n    'Wren '\n    'XML Schema '\n    'YAML '\n    'Yarn '\n    'ZoKrates '\n    'Zsh '\n)\nfor i in \"${specificLanguages[@]}\"\ndo\n    if ./scc \"examples/language/\" --no-scc-ignore | grep -q \"$i\"; then\n        echo -e \"${GREEN}PASSED $i Language Check\"\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Should be able to find $i\"\n        echo -e \"=======================================================${NC}\"\n        exit\n    fi\ndone\n\n# Issue339\nfor i in 'MATLAB ' 'Objective C '\ndo\n    if ./scc \"examples/issue339/\" --no-scc-ignore | grep -q \"$i \"; then\n        echo -e \"${GREEN}PASSED $i Language Check\"\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Should be able to find $i\"\n        echo -e \"=======================================================${NC}\"\n        exit\n    fi\ndone\n\n# Issue345 (https://github.com/boyter/scc/issues/345)\na=$(./scc \"examples/issue345/\" -f csv --no-scc-ignore | sed -n '2 p')\nb=\"C++,4,3,1,0,0,76,1,0\"\nif [ \"$a\" == \"$b\" ]; then\n    echo -e \"${GREEN}PASSED String Termination Check\"\nelse\n    echo -e \"$a\"\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Should terminate the string properly\"\n    echo -e \"=======================================================${NC}\"\n    exit\nfi\n\n# Regression issue https://github.com/boyter/scc/issues/379\nIssue379Line=$(./scc -f csv \"examples/issue379/\" --no-scc-ignore | grep 'Python' | cut -d ',' -f 2)\nIssue379Code=$(./scc -f csv \"examples/issue379/\" --no-scc-ignore | grep 'Python' | cut -d ',' -f 3)\nIssue379Comments=$(./scc -f csv \"examples/issue379/\" --no-scc-ignore | grep 'Python' | cut -d ',' -f 4)\nIssue379Blanks=$(./scc -f csv \"examples/issue379/\" --no-scc-ignore | grep 'Python' | cut -d ',' -f 5)\nIssue379Complexity=$(./scc -f csv \"examples/issue379/\" --no-scc-ignore | grep 'Python' | cut -d ',' -f 6)\nif [ $Issue379Line -ne 7 ] ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Issue379 line counting\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelif [ $Issue379Code -ne 4 ] ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Issue379 code counting\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelif [ $Issue379Comments -ne 2 ] ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Issue379 comments counting\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelif [ $Issue379Blanks -ne 1 ] ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Issue379 blanks counting\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelif [ $Issue379Complexity -ne 1 ] ; then\n    echo -e \"${RED}=======================================================\"\n    echo -e \"FAILED Issue379 complexity counting\"\n    echo -e \"=======================================================${NC}\"\n    exit\nelse\n    echo -e \"${GREEN}PASSED Issue379 Regression Check\"\nfi\n\n# Extra case for longer languages that are normally truncated\nfor i in 'CloudFormation (YAM' 'CloudFormation (JSO'\ndo\n    if ./scc \"examples/language/\" --no-scc-ignore | grep -q \"$i\"; then\n        echo -e \"${GREEN}PASSED $i Language Check\"\n    else\n        echo -e \"${RED}=======================================================\"\n        echo -e \"FAILED Should be able to find $i\"\n        echo -e \"=======================================================${NC}\"\n        exit\n    fi\ndone\n\necho -e  \"${NC}Checking compile targets...\"\n\necho \"   darwin...\"\nGOOS=darwin GOARCH=amd64 go build -ldflags=\"-s -w\"\nGOOS=darwin GOARCH=arm64 go build -ldflags=\"-s -w\"\necho \"   windows...\"\nGOOS=windows GOARCH=amd64 go build -ldflags=\"-s -w\"\nGOOS=windows GOARCH=386 go build -ldflags=\"-s -w\"\necho \"   linux...\"\nGOOS=linux GOARCH=amd64 go build -ldflags=\"-s -w\"\nGOOS=linux GOARCH=386 go build -ldflags=\"-s -w\"\nGOOS=linux GOARCH=arm64 go build -ldflags=\"-s -w\"\n\necho -e \"${NC}Cleaning up...\"\nrm ./scc\nrm ./scc.exe\nrm ./ignored.xml\nrm .tmp_scc_yaml\nrm ./examples/ignore/gitignorefile.txt\nrm ./examples/ignore/ignorefile.txt\n\nrm ./output.tab\nrm ./output.wide\nrm ./output.json\nrm ./output2.json\nrm ./output.csv\nrm ./output.yaml\nrm ./output.html\nrm ./output.html2\nrm ./output.sql\nrm ./code.db\n\n\necho -e \"${GREEN}=================================================\"\necho -e \"ALL TESTS PASSED\"\necho -e \"=================================================${NC}\"\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}