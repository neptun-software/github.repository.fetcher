{
  "metadata": {
    "timestamp": 1736568169154,
    "page": 5,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "junegunn/fzf",
      "stars": 67038,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1015625,
          "content": "bin/fzf\nbin/fzf.exe\ndist\ntarget\npkg\nGemfile.lock\n.DS_Store\ndoc/tags\nvendor\ngopath\n*.zwc\nfzf\ntmp\n*.patch\n"
        },
        {
          "name": ".goreleaser.yml",
          "type": "blob",
          "size": 2.2421875,
          "content": "---\nversion: 2\nproject_name: fzf\n\nbefore:\n  hooks:\n    - go mod download\n\nbuilds:\n  - id: fzf\n    goos:\n      - darwin\n      - linux\n      - windows\n      - freebsd\n      - openbsd\n    goarch:\n      - amd64\n      - arm\n      - arm64\n      - loong64\n      - ppc64le\n      - s390x\n    goarm:\n      - 5\n      - 6\n      - 7\n    flags:\n      - -trimpath\n    ldflags:\n      - \"-s -w -X main.version={{ .Version }} -X main.revision={{ .ShortCommit }}\"\n    ignore:\n      - goos: freebsd\n        goarch: arm\n      - goos: openbsd\n        goarch: arm\n      - goos: freebsd\n        goarch: arm64\n      - goos: openbsd\n        goarch: arm64\n\n# .goreleaser.yaml\nnotarize:\n  macos:\n    - # Whether this configuration is enabled or not.\n      #\n      # Default: false.\n      # Templates: allowed.\n      enabled: \"{{ not .IsSnapshot }}\"\n\n      # Before notarizing, we need to sign the binary.\n      # This blocks defines the configuration for doing so.\n      sign:\n        # The .p12 certificate file path or its base64'd contents.\n        certificate: \"{{.Env.MACOS_SIGN_P12}}\"\n\n        # The password to be used to open the certificate.\n        password: \"{{.Env.MACOS_SIGN_PASSWORD}}\"\n\n      # Then, we notarize the binaries.\n      notarize:\n        # The issuer ID.\n        # Its the UUID you see when creating the App Store Connect key.\n        issuer_id: \"{{.Env.MACOS_NOTARY_ISSUER_ID}}\"\n\n        # Key ID.\n        # You can see it in the list of App Store Connect Keys.\n        # It will also be in the ApiKey filename.\n        key_id: \"{{.Env.MACOS_NOTARY_KEY_ID}}\"\n\n        # The .p8 key file path or its base64'd contents.\n        key: \"{{.Env.MACOS_NOTARY_KEY}}\"\n\n        # Whether to wait for the notarization to finish.\n        # Not recommended, as it could take a really long time.\n        wait: true\n\narchives:\n  - name_template: \"{{ .ProjectName }}-{{ .Version }}-{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}\"\n    builds:\n      - fzf\n    format: tar.gz\n    format_overrides:\n      - goos: windows\n        format: zip\n    files:\n      - non-existent*\n\nrelease:\n  github:\n    owner: junegunn\n    name: fzf\n  prerelease: auto\n  name_template: '{{ .Version }}'\n\nsnapshot:\n  name_template: \"{{ .Version }}-devel\"\n\nchangelog:\n  sort: asc\n  filters:\n    exclude:\n      - README\n      - test\n"
        },
        {
          "name": ".rubocop.yml",
          "type": "blob",
          "size": 0.564453125,
          "content": "Layout/LineLength:\n  Enabled: false\nMetrics:\n  Enabled: false\nLint/ShadowingOuterLocalVariable:\n  Enabled: false\nStyle/MethodCallWithArgsParentheses:\n  Enabled: true\n  AllowedMethods:\n    - assert\n    - exit\n    - paste\n    - puts\n    - raise\n    - refute\n    - require\n    - send_keys\n  AllowedPatterns:\n    - ^assert_\n    - ^refute_\nStyle/NumericPredicate:\n  Enabled: false\nStyle/StringConcatenation:\n  Enabled: false\nStyle/OptionalBooleanParameter:\n  Enabled: false\nStyle/WordArray:\n  MinSize: 1\nMinitest/AssertEqual:\n  Enabled: false\nNaming/VariableNumber:\n  Enabled: false\n"
        },
        {
          "name": ".tool-versions",
          "type": "blob",
          "size": 0.0146484375,
          "content": "golang 1.20.13\n"
        },
        {
          "name": "ADVANCED.md",
          "type": "blob",
          "size": 27.009765625,
          "content": "Advanced fzf examples\n======================\n\n* *Last update: 2024/06/24*\n* *Requires fzf 0.54.0 or later*\n\n---\n\n<!-- vim-markdown-toc GFM -->\n\n* [Introduction](#introduction)\n* [Display modes](#display-modes)\n    * [`--height`](#--height)\n    * [`--tmux`](#--tmux)\n* [Dynamic reloading of the list](#dynamic-reloading-of-the-list)\n    * [Updating the list of processes by pressing CTRL-R](#updating-the-list-of-processes-by-pressing-ctrl-r)\n    * [Toggling between data sources](#toggling-between-data-sources)\n    * [Toggling with a single key binding](#toggling-with-a-single-key-binding)\n* [Ripgrep integration](#ripgrep-integration)\n    * [Using fzf as the secondary filter](#using-fzf-as-the-secondary-filter)\n    * [Using fzf as interactive Ripgrep launcher](#using-fzf-as-interactive-ripgrep-launcher)\n    * [Switching to fzf-only search mode](#switching-to-fzf-only-search-mode)\n    * [Switching between Ripgrep mode and fzf mode](#switching-between-ripgrep-mode-and-fzf-mode)\n    * [Switching between Ripgrep mode and fzf mode using a single key binding](#switching-between-ripgrep-mode-and-fzf-mode-using-a-single-key-binding)\n* [Log tailing](#log-tailing)\n* [Key bindings for git objects](#key-bindings-for-git-objects)\n    * [Files listed in `git status`](#files-listed-in-git-status)\n    * [Branches](#branches)\n    * [Commit hashes](#commit-hashes)\n* [Color themes](#color-themes)\n    * [fzf Theme Playground](#fzf-theme-playground)\n    * [Generating fzf color theme from Vim color schemes](#generating-fzf-color-theme-from-vim-color-schemes)\n\n<!-- vim-markdown-toc -->\n\nIntroduction\n------------\n\nfzf is an interactive [Unix filter][filter] program that is designed to be\nused with other Unix tools. It reads a list of items from the standard input,\nallows you to select a subset of the items, and prints the selected ones to\nthe standard output. You can think of it as an interactive version of *grep*,\nand it's already useful even if you don't know any of its options.\n\n```sh\n# 1. ps:   Feed the list of processes to fzf\n# 2. fzf:  Interactively select a process using fuzzy matching algorithm\n# 3. awk:  Take the PID from the selected line\n# 3. kill: Kill the process with the PID\nps -ef | fzf | awk '{print $2}' | xargs kill -9\n```\n\n[filter]: https://en.wikipedia.org/wiki/Filter_(software)\n\nWhile the above example succinctly summarizes the fundamental concept of fzf,\nyou can build much more sophisticated interactive workflows using fzf once you\nlearn its wide variety of features.\n\n- To see the full list of options and features, see `man fzf`\n- To see the latest additions, see [CHANGELOG.md](CHANGELOG.md)\n\nThis document will guide you through some examples that will familiarize you\nwith the advanced features of fzf.\n\nDisplay modes\n-------------\n\n### `--height`\n\nfzf by default opens in fullscreen mode, but it's not always desirable.\nOftentimes, you want to see the current context of the terminal while using\nfzf. `--height` is an option for opening fzf below the cursor in\nnon-fullscreen mode so you can still see the previous commands and their\nresults above it.\n\n```sh\nfzf --height=40%\n```\n\n![image](https://user-images.githubusercontent.com/700826/113379893-c184c680-93b5-11eb-9676-c7c0a2f01748.png)\n\nYou might also want to experiment with other layout options such as\n`--layout=reverse`, `--info=inline`, `--border`, `--margin`, etc.\n\n```sh\nfzf --height=40% --layout=reverse\nfzf --height=40% --layout=reverse --info=inline\nfzf --height=40% --layout=reverse --info=inline --border\nfzf --height=40% --layout=reverse --info=inline --border --margin=1\nfzf --height=40% --layout=reverse --info=inline --border --margin=1 --padding=1\n```\n\n![image](https://user-images.githubusercontent.com/700826/113379932-dfeac200-93b5-11eb-9e28-df1a2ee71f90.png)\n\n*(See `Layout` section of the man page to see the full list of options)*\n\nBut you definitely don't want to repeat `--height=40% --layout=reverse\n--info=inline --border --margin=1 --padding=1` every time you use fzf. You\ncould write a wrapper script or shell alias, but there is an easier option.\nDefine `$FZF_DEFAULT_OPTS` like so:\n\n```sh\nexport FZF_DEFAULT_OPTS=\"--height=40% --layout=reverse --info=inline --border --margin=1 --padding=1\"\n```\n\n### `--tmux`\n\n(Requires tmux 3.3 or later)\n\nIf you're using tmux, you can open fzf in a tmux popup using `--tmux` option.\n\n```sh\n# Open fzf in a tmux popup at the center of the screen with 70% width and height\nfzf --tmux 70%\n```\n\n![image](https://github.com/junegunn/fzf/assets/700826/9c365405-c700-49b2-8985-60d822ed4cff)\n\n`--tmux` option is silently ignored if you're not on tmux. So if you're trying\nto avoid opening fzf in fullscreen, try specifying both `--height` and `--tmux`.\n\n```sh\n# --tmux is specified later so it takes precedence over --height when on tmux.\n# If you're not on tmux, --tmux is ignored and --height is used instead.\nfzf  --height 70% --tmux 70%\n```\n\nYou can also specify the position, width, and height of the popup window in\nthe following format:\n\n* `[center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]`\n\n```sh\n# 100% width and 60% height\nfzf --tmux 100%,60% --border horizontal\n```\n\n![image](https://github.com/junegunn/fzf/assets/700826/f80d3514-d69f-42f2-a8de-a392a562bfcf)\n\n```sh\n# On the right (50% width)\nfzf --tmux right\n```\n\n![image](https://github.com/junegunn/fzf/assets/700826/4033ade4-7efa-421b-a3fb-a430d197098a)\n\n```sh\n# On the left (40% width and 70% height)\nfzf --tmux left,40%,70%\n```\n\n![image](https://github.com/junegunn/fzf/assets/700826/efe43881-2bf0-49ea-ab2e-1377f778cd52)\n\n> [!TIP]\n> You might also want to check out my tmux plugins which support this popup\n> window layout.\n>\n> - https://github.com/junegunn/tmux-fzf-url\n> - https://github.com/junegunn/tmux-fzf-maccy\n\nDynamic reloading of the list\n-----------------------------\n\nfzf can dynamically update the candidate list using an arbitrary program with\n`reload` bindings (The design document for `reload` can be found\n[here][reload]).\n\n[reload]: https://github.com/junegunn/fzf/issues/1750\n\n### Updating the list of processes by pressing CTRL-R\n\nThis example shows how you can set up a binding for dynamically updating the\nlist without restarting fzf.\n\n```sh\n(date; ps -ef) |\n  fzf --bind='ctrl-r:reload(date; ps -ef)' \\\n      --header=$'Press CTRL-R to reload\\n\\n' --header-lines=2 \\\n      --preview='echo {}' --preview-window=down,3,wrap \\\n      --layout=reverse --height=80% | awk '{print $2}' | xargs kill -9\n```\n\n![image](https://user-images.githubusercontent.com/700826/113465047-200c7c00-946c-11eb-918c-268f37a900c8.png)\n\n- The initial command is `(date; ps -ef)`. It prints the current date and\n  time, and the list of the processes.\n- With `--header` option, you can show any message as the fixed header.\n- To disallow selecting the first two lines (`date` and `ps` header), we use\n  `--header-lines=2` option.\n- `--bind='ctrl-r:reload(date; ps -ef)'` binds CTRL-R to `reload` action that\n  runs `date; ps -ef`, so we can update the list of the processes by pressing\n  CTRL-R.\n- We use simple `echo {}` preview option, so we can see the entire line on the\n  preview window below even if it's too long\n\n### Toggling between data sources\n\nYou're not limited to just one reload binding. Set up multiple bindings so\nyou can switch between data sources.\n\n```sh\nfind * | fzf --prompt 'All> ' \\\n             --header 'CTRL-D: Directories / CTRL-F: Files' \\\n             --bind 'ctrl-d:change-prompt(Directories> )+reload(find * -type d)' \\\n             --bind 'ctrl-f:change-prompt(Files> )+reload(find * -type f)'\n```\n\n![image](https://user-images.githubusercontent.com/700826/113465073-4af6d000-946c-11eb-858f-2372c0955f67.png)\n\n![image](https://user-images.githubusercontent.com/700826/113465072-46321c00-946c-11eb-9b6f-cda3951df579.png)\n\n### Toggling with a single key binding\n\nThe above example uses two different key bindings to toggle between two modes,\nbut can we just use a single key binding?\n\nTo make a key binding behave differently each time it is pressed, we need:\n\n1. a way to store the current state. i.e. \"which mode are we in?\"\n2. and a way to dynamically perform different actions depending on the state.\n\nThe following example shows how to 1. store the current mode in the prompt\nstring, 2. and use this information (`$FZF_PROMPT`) to determine which\nactions to perform using the `transform` action.\n\n```sh\nfd --type file |\n  fzf --prompt 'Files> ' \\\n      --header 'CTRL-T: Switch between Files/Directories' \\\n      --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ Files ]] &&\n              echo \"change-prompt(Files> )+reload(fd --type file)\" ||\n              echo \"change-prompt(Directories> )+reload(fd --type directory)\"' \\\n      --preview '[[ $FZF_PROMPT =~ Files ]] && bat --color=always {} || tree -C {}'\n```\n\nRipgrep integration\n-------------------\n\n### Using fzf as the secondary filter\n\n* Requires [bat][bat]\n* Requires [Ripgrep][rg]\n\n[bat]: https://github.com/sharkdp/bat\n[rg]: https://github.com/BurntSushi/ripgrep\n\nfzf is pretty fast for filtering a list that you will rarely have to think\nabout its performance. But it is not the right tool for searching for text\ninside many large files, and in that case you should definitely use something\nlike [Ripgrep][rg].\n\nIn the next example, Ripgrep is the primary filter that searches for the given\ntext in files, and fzf is used as the secondary fuzzy filter that adds\ninteractivity to the workflow. And we use [bat][bat] to show the matching line in\nthe preview window.\n\nThis is a bash script and it will not run as expected on other non-compliant\nshells. To avoid the compatibility issue, let's save this snippet as a script\nfile called `rfv`.\n\n```bash\n#!/usr/bin/env bash\n\n# 1. Search for text in files using Ripgrep\n# 2. Interactively narrow down the list using fzf\n# 3. Open the file in Vim\nrg --color=always --line-number --no-heading --smart-case \"${*:-}\" |\n  fzf --ansi \\\n      --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n      --delimiter : \\\n      --preview 'bat --color=always {1} --highlight-line {2}' \\\n      --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n      --bind 'enter:become(vim {1} +{2})'\n```\n\nAnd run it with an initial query string.\n\n```sh\n# Make the script executable\nchmod +x rfv\n\n# Run it with the initial query \"algo\"\n./rfv algo\n```\n\n> Ripgrep will perform the initial search and list all the lines that contain\n`algo`. Then we further narrow down the list on fzf.\n\n![image](https://user-images.githubusercontent.com/700826/113683873-a42a6200-96ff-11eb-9666-26ce4091b0e4.png)\n\nI know it's a lot to digest, let's try to break down the code.\n\n- Ripgrep prints the matching lines in the following format\n  ```\n  man/man1/fzf.1:54:.BI \"--algo=\" TYPE\n  man/man1/fzf.1:55:Fuzzy matching algorithm (default: v2)\n  man/man1/fzf.1:58:.BR v2 \"     Optimal scoring algorithm (quality)\"\n  src/pattern_test.go:7:  \"github.com/junegunn/fzf/src/algo\"\n  ```\n  The first token delimited by `:` is the file path, and the second token is\n  the line number of the matching line. They respectively correspond to `{1}`\n  and `{2}` in the preview command.\n    - `--preview 'bat --color=always {1} --highlight-line {2}'`\n- As we run `rg` with `--color=always` option, we should tell fzf to parse\n  ANSI color codes in the input by setting `--ansi`.\n- We customize how fzf colors various text elements using `--color` option.\n  `-1` tells fzf to keep the original color from the input. See `man fzf` for\n  available color options.\n- The value of `--preview-window` option consists of 5 components delimited\n  by `,`\n    1. `up` — Position of the preview window\n    1. `60%` — Size of the preview window\n    1. `border-bottom` — Preview window border only on the bottom side\n    1. `+{2}+3/3` — Scroll offset of the preview contents\n    1. `~3` — Fixed header\n- Let's break down the latter two. We want to display the bat output in the\n  preview window with a certain scroll offset so that the matching line is\n  positioned near the center of the preview window.\n    - `+{2}` — The base offset is extracted from the second token\n    - `+3` — We add 3 lines to the base offset to compensate for the header\n      part of `bat` output\n        - ```\n          ───────┬──────────────────────────────────────────────────────────\n                 │ File: CHANGELOG.md\n          ───────┼──────────────────────────────────────────────────────────\n             1   │ CHANGELOG\n             2   │ =========\n             3   │\n             4   │ 0.26.0\n             5   │ ------\n          ```\n    - `/3` adjusts the offset so that the matching line is shown at a third\n      position in the window\n    - `~3` makes the top three lines fixed header so that they are always\n      visible regardless of the scroll offset\n- Instead of using shell script to process the final output of fzf, we use\n  `become(...)` action which was added in [fzf 0.38.0][0.38.0] to turn fzf\n  into a new process that opens the file with `vim` (`vim {1}`) and move the\n  cursor to the line (`+{2}`).\n\n[0.38.0]: https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0380\n\n### Using fzf as interactive Ripgrep launcher\n\nWe have learned that we can bind `reload` action to a key (e.g.\n`--bind=ctrl-r:execute(ps -ef)`). In the next example, we are going to **bind\n`reload` action to `change` event** so that whenever the user *changes* the\nquery string on fzf, `reload` action is triggered.\n\nHere is a variation of the above `rfv` script. fzf will restart Ripgrep every\ntime the user updates the query string on fzf. Searching and filtering is\ncompletely done by Ripgrep, and fzf merely provides the interactive interface.\nSo we lose the \"fuzziness\", but the performance will be better on larger\nprojects, and it will free up memory as you narrow down the results.\n\n```bash\n#!/usr/bin/env bash\n\n# 1. Search for text in files using Ripgrep\n# 2. Interactively restart Ripgrep with reload action\n# 3. Open the file in Vim\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --delimiter : \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n```\n\n![image](https://user-images.githubusercontent.com/700826/113684212-f9ff0a00-96ff-11eb-8737-7bb571d320cc.png)\n\n- Instead of starting fzf in the usual `rg ... | fzf` form, we make it start\n  the initial Ripgrep process immediately via `start:reload` binding for the\n  consistency of the code.\n- Filtering is no longer a responsibility of fzf; hence `--disabled`\n- `{q}` in the reload command evaluates to the query string on fzf prompt.\n- `sleep 0.1` in the reload command is for \"debouncing\". This small delay will\n  reduce the number of intermediate Ripgrep processes while we're typing in\n  a query.\n\n### Switching to fzf-only search mode\n\nIn the previous example, we lost fuzzy matching capability as we completely\ndelegated search functionality to Ripgrep. But we can dynamically switch to\nfzf-only search mode by *\"unbinding\"* `reload` action from `change` event.\n\n```sh\n#!/usr/bin/env bash\n\n# Two-phase filtering with Ripgrep and fzf\n#\n# 1. Search for text in files using Ripgrep\n# 2. Interactively restart Ripgrep with reload action\n#    * Press alt-enter to switch to fzf-only filtering\n# 3. Open the file in Vim\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind \"alt-enter:unbind(change,alt-enter)+change-prompt(2. fzf> )+enable-search+clear-query\" \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep> ' \\\n    --delimiter : \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n```\n\n* Phase 1. Filtering with Ripgrep\n![image](https://user-images.githubusercontent.com/700826/119213880-735e8a80-bafd-11eb-8493-123e4be24fbc.png)\n* Phase 2. Filtering with fzf\n![image](https://user-images.githubusercontent.com/700826/119213887-7e191f80-bafd-11eb-98c9-71a1af9d7aab.png)\n\n- We added `--prompt` option to show that fzf is initially running in \"Ripgrep\n  launcher mode\".\n- We added `alt-enter` binding that\n    1. unbinds `change` event, so Ripgrep is no longer restarted on key press\n    2. changes the prompt to `2. fzf>`\n    3. enables search functionality of fzf\n    4. clears the current query string that was used to start Ripgrep process\n    5. and unbinds `alt-enter` itself as this is a one-off event\n- We reverted `--color` option for customizing how the matching chunks are\n  displayed in the second phase\n\n### Switching between Ripgrep mode and fzf mode\n\n[fzf 0.30.0][0.30.0] added `rebind` action so we can \"rebind\" the bindings\nthat were previously \"unbound\" via `unbind`.\n\nThis is an improved version of the previous example that allows us to switch\nbetween Ripgrep launcher mode and fzf-only filtering mode via CTRL-R and\nCTRL-F.\n\n```sh\n#!/usr/bin/env bash\n\n# Switch between Ripgrep launcher mode (CTRL-R) and fzf filtering mode (CTRL-F)\nrm -f /tmp/rg-fzf-{r,f}\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload($RG_PREFIX {q})+unbind(ctrl-r)\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind \"ctrl-f:unbind(change,ctrl-f)+change-prompt(2. fzf> )+enable-search+rebind(ctrl-r)+transform-query(echo {q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f)\" \\\n    --bind \"ctrl-r:unbind(ctrl-r)+change-prompt(1. ripgrep> )+disable-search+reload($RG_PREFIX {q} || true)+rebind(change,ctrl-f)+transform-query(echo {q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r)\" \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep> ' \\\n    --delimiter : \\\n    --header '╱ CTRL-R (ripgrep mode) ╱ CTRL-F (fzf mode) ╱' \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n```\n\n- To restore the query string when switching between modes, we store the\n  current query in `/tmp/rg-fzf-{r,f}` files and restore the query using\n  `transform-query` action which was added in [fzf 0.36.0][0.36.0].\n- Also note that we unbind `ctrl-r` binding on `start` event which is\n  triggered once when fzf starts.\n\n[0.30.0]: https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0300\n[0.36.0]: https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0360\n\n### Switching between Ripgrep mode and fzf mode using a single key binding\n\nIn contrast to the previous version, we use just one hotkey to toggle between\nripgrep and fzf mode. This is achieved by using the `$FZF_PROMPT` as a state\nwithin the `transform` action, a feature introduced in [fzf 0.45.0][0.45.0]. A\nmore detailed explanation of this feature can be found in a previous section -\n[Toggling with a single keybinding](#toggling-with-a-single-key-binding).\n\n[0.45.0]: https://github.com/junegunn/fzf/blob/master/CHANGELOG.md#0450\n\nWhen using the `transform` action, the placeholder (`\\{q}`) should be escaped to\nprevent immediate evaluation.\n\n```sh\n#!/usr/bin/env bash\n\n# Switch between Ripgrep mode and fzf filtering mode (CTRL-T)\nrm -f /tmp/rg-fzf-{r,f}\nRG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\nINITIAL_QUERY=\"${*:-}\"\nfzf --ansi --disabled --query \"$INITIAL_QUERY\" \\\n    --bind \"start:reload:$RG_PREFIX {q}\" \\\n    --bind \"change:reload:sleep 0.1; $RG_PREFIX {q} || true\" \\\n    --bind 'ctrl-t:transform:[[ ! $FZF_PROMPT =~ ripgrep ]] &&\n      echo \"rebind(change)+change-prompt(1. ripgrep> )+disable-search+transform-query:echo \\{q} > /tmp/rg-fzf-f; cat /tmp/rg-fzf-r\" ||\n      echo \"unbind(change)+change-prompt(2. fzf> )+enable-search+transform-query:echo \\{q} > /tmp/rg-fzf-r; cat /tmp/rg-fzf-f\"' \\\n    --color \"hl:-1:underline,hl+:-1:underline:reverse\" \\\n    --prompt '1. ripgrep> ' \\\n    --delimiter : \\\n    --header 'CTRL-T: Switch between ripgrep/fzf' \\\n    --preview 'bat --color=always {1} --highlight-line {2}' \\\n    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \\\n    --bind 'enter:become(vim {1} +{2})'\n```\n\nLog tailing\n-----------\n\nfzf can run long-running preview commands and render partial results before\ncompletion. And when you specify `follow` flag in `--preview-window` option,\nfzf will \"`tail -f`\" the result, automatically scrolling to the bottom.\n\n```bash\n# With \"follow\", preview window will automatically scroll to the bottom.\n# \"\\033[2J\" is an ANSI escape sequence for clearing the screen.\n# When fzf reads this code it clears the previous preview contents.\nfzf --preview-window follow --preview 'for i in $(seq 100000); do\n  echo \"$i\"\n  sleep 0.01\n  (( i % 300 == 0 )) && printf \"\\033[2J\"\ndone'\n```\n\n![image](https://user-images.githubusercontent.com/700826/113473303-dd669600-94a3-11eb-88a9-1f61b996bb0e.png)\n\nAdmittedly, that was a silly example. Here's a practical one for browsing\nKubernetes pods.\n\n```bash\npods() {\n  command='kubectl get pods --all-namespaces' fzf \\\n    --info=inline --layout=reverse --header-lines=1 \\\n    --prompt \"$(kubectl config current-context | sed 's/-context$//')> \" \\\n    --header $'╱ Enter (kubectl exec) ╱ CTRL-O (open log in editor) ╱ CTRL-R (reload) ╱\\n\\n' \\\n    --bind 'start:reload:$command' \\\n    --bind 'ctrl-r:reload:$command' \\\n    --bind 'ctrl-/:change-preview-window(80%,border-bottom|hidden|)' \\\n    --bind 'enter:execute:kubectl exec -it --namespace {1} {2} -- bash' \\\n    --bind 'ctrl-o:execute:${EDITOR:-vim} <(kubectl logs --all-containers --namespace {1} {2})' \\\n    --preview-window up:follow \\\n    --preview 'kubectl logs --follow --all-containers --tail=10000 --namespace {1} {2}' \"$@\"\n}\n```\n\n![image](https://user-images.githubusercontent.com/700826/113473547-1d7a4880-94a5-11eb-98ef-9aa6f0ed215a.png)\n\n- The preview window will *\"log tail\"* the pod\n    - Holding on to a large amount of log will consume a lot of memory. So we\n      limited the initial log amount with `--tail=10000`.\n- `execute` bindings allow you to run any command without leaving fzf\n    - Press enter key on a pod to `kubectl exec` into it\n    - Press CTRL-O to open the log in your editor\n- Press CTRL-R to reload the pod list\n- Press CTRL-/ repeatedly to rotate through a different sets of preview\n  window options\n    1. `80%,border-bottom`\n    1. `hidden`\n    1. Empty string after `|` translates to the default options from `--preview-window`\n\nKey bindings for git objects\n----------------------------\n\nOftentimes, you want to put the identifiers of various Git object to the\ncommand-line. For example, it is common to write commands like these:\n\n```sh\ngit checkout [SOME_COMMIT_HASH or BRANCH or TAG]\ngit diff [SOME_COMMIT_HASH or BRANCH or TAG] [SOME_COMMIT_HASH or BRANCH or TAG]\n```\n\n[fzf-git.sh](https://github.com/junegunn/fzf-git.sh) project defines a set of\nfzf-based key bindings for Git objects. I strongly recommend that you check\nthem out because they are seriously useful.\n\n### Files listed in `git status`\n\n<kbd>CTRL-G</kbd><kbd>CTRL-F</kbd>\n\n![image](https://user-images.githubusercontent.com/700826/113473779-a9d93b00-94a6-11eb-87b5-f62a8d0a0efc.png)\n\n### Branches\n\n<kbd>CTRL-G</kbd><kbd>CTRL-B</kbd>\n\n![image](https://user-images.githubusercontent.com/700826/113473758-87dfb880-94a6-11eb-82f4-9218103f10bd.png)\n\n### Commit hashes\n\n<kbd>CTRL-G</kbd><kbd>CTRL-H</kbd>\n\n![image](https://user-images.githubusercontent.com/700826/113473765-91692080-94a6-11eb-8d38-ed4d41f27ac1.png)\n\nColor themes\n------------\n\nYou can customize how fzf colors the text elements with `--color` option. Here\nare a few color themes. Note that you need a terminal emulator that can\ndisplay 24-bit colors.\n\n```sh\n# junegunn/seoul256.vim (dark)\nexport FZF_DEFAULT_OPTS='--color=bg+:#3F3F3F,bg:#4B4B4B,border:#6B6B6B,spinner:#98BC99,hl:#719872,fg:#D9D9D9,header:#719872,info:#BDBB72,pointer:#E12672,marker:#E17899,fg+:#D9D9D9,preview-bg:#3F3F3F,prompt:#98BEDE,hl+:#98BC99'\n```\n\n![seoul256](https://user-images.githubusercontent.com/700826/113475011-2c192d80-94ae-11eb-9d17-1e5867bae01f.png)\n\n```sh\n# junegunn/seoul256.vim (light)\nexport FZF_DEFAULT_OPTS='--color=bg+:#D9D9D9,bg:#E1E1E1,border:#C8C8C8,spinner:#719899,hl:#719872,fg:#616161,header:#719872,info:#727100,pointer:#E12672,marker:#E17899,fg+:#616161,preview-bg:#D9D9D9,prompt:#0099BD,hl+:#719899'\n```\n\n![seoul256-light](https://user-images.githubusercontent.com/700826/113475022-389d8600-94ae-11eb-905f-0939dd535837.png)\n\n```sh\n# morhetz/gruvbox\nexport FZF_DEFAULT_OPTS='--color=bg+:#3c3836,bg:#32302f,spinner:#fb4934,hl:#928374,fg:#ebdbb2,header:#928374,info:#8ec07c,pointer:#fb4934,marker:#fb4934,fg+:#ebdbb2,prompt:#fb4934,hl+:#fb4934'\n```\n\n![gruvbox](https://user-images.githubusercontent.com/700826/113475042-494dfc00-94ae-11eb-9322-cd03a027305a.png)\n\n```sh\n# arcticicestudio/nord-vim\nexport FZF_DEFAULT_OPTS='--color=bg+:#3B4252,bg:#2E3440,spinner:#81A1C1,hl:#616E88,fg:#D8DEE9,header:#616E88,info:#81A1C1,pointer:#81A1C1,marker:#81A1C1,fg+:#D8DEE9,prompt:#81A1C1,hl+:#81A1C1'\n```\n\n![nord](https://user-images.githubusercontent.com/700826/113475063-67b3f780-94ae-11eb-9b24-5f0d22b63399.png)\n\n```sh\n# tomasr/molokai\nexport FZF_DEFAULT_OPTS='--color=bg+:#293739,bg:#1B1D1E,border:#808080,spinner:#E6DB74,hl:#7E8E91,fg:#F8F8F2,header:#7E8E91,info:#A6E22E,pointer:#A6E22E,marker:#F92672,fg+:#F8F8F2,prompt:#F92672,hl+:#F92672'\n```\n\n![molokai](https://user-images.githubusercontent.com/700826/113475085-8619f300-94ae-11eb-85e4-2766fc3246bf.png)\n\n### fzf Theme Playground\n\n[fzf Theme Playground](https://vitormv.github.io/fzf-themes/) created by\n[Vitor Mello](https://github.com/vitormv) is a webpage where you can\ninteractively create fzf themes.\n\n### Generating fzf color theme from Vim color schemes\n\nThe Vim plugin of fzf can generate `--color` option from the current color\nscheme according to `g:fzf_colors` variable. You can find the detailed\nexplanation [here](https://github.com/junegunn/fzf/blob/master/README-VIM.md#explanation-of-gfzf_colors).\n\nHere is an example. Add this to your Vim configuration file.\n\n```vim\nlet g:fzf_colors =\n\\ { 'fg':         ['fg', 'Normal'],\n  \\ 'bg':         ['bg', 'Normal'],\n  \\ 'preview-bg': ['bg', 'NormalFloat'],\n  \\ 'hl':         ['fg', 'Comment'],\n  \\ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],\n  \\ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],\n  \\ 'hl+':        ['fg', 'Statement'],\n  \\ 'info':       ['fg', 'PreProc'],\n  \\ 'border':     ['fg', 'Ignore'],\n  \\ 'prompt':     ['fg', 'Conditional'],\n  \\ 'pointer':    ['fg', 'Exception'],\n  \\ 'marker':     ['fg', 'Keyword'],\n  \\ 'spinner':    ['fg', 'Label'],\n  \\ 'header':     ['fg', 'Comment'] }\n```\n\nThen you can see how the `--color` option is generated by printing the result\nof `fzf#wrap()`.\n\n```vim\n:echo fzf#wrap()\n```\n\nUse this command to append `export FZF_DEFAULT_OPTS=\"...\"` line to the end of\nthe current file.\n\n```vim\n:call append('$', printf('export FZF_DEFAULT_OPTS=\"%s\"', matchstr(fzf#wrap().options, \"--color[^']*\")))\n```\n"
        },
        {
          "name": "BUILD.md",
          "type": "blob",
          "size": 1.677734375,
          "content": "Building fzf\n============\n\nBuild instructions\n------------------\n\n### Prerequisites\n\n- Go 1.20 or above\n\n### Using Makefile\n\n```sh\n# Build fzf binary for your platform in target\nmake\n\n# Build fzf binary and copy it to bin directory\nmake install\n\n# Build fzf binaries and archives for all platforms using goreleaser\nmake build\n\n# Publish GitHub release\nmake release\n```\n\n> [!WARNING]\n> Makefile uses git commands to determine the version and the revision\n> information for `fzf --version`. So if you're building fzf from an\n> environment where its git information is not available, you have to manually\n> set `$FZF_VERSION` and `$FZF_REVISION`.\n>\n> e.g. `FZF_VERSION=0.24.0 FZF_REVISION=tarball make`\n\n> [!TIP]\n> To build fzf with profiling options enabled, set `TAGS=pprof`\n>\n> ```sh\n> TAGS=pprof make clean install\n> fzf --profile-cpu /tmp/cpu.pprof --profile-mem /tmp/mem.pprof \\\n>     --profile-block /tmp/block.pprof --profile-mutex /tmp/mutex.pprof\n> ```\n\nThird-party libraries used\n--------------------------\n\n- [rivo/uniseg](https://github.com/rivo/uniseg)\n    - Licensed under [MIT](https://raw.githubusercontent.com/rivo/uniseg/master/LICENSE.txt)\n- [mattn/go-shellwords](https://github.com/mattn/go-shellwords)\n    - Licensed under [MIT](http://mattn.mit-license.org)\n- [mattn/go-isatty](https://github.com/mattn/go-isatty)\n    - Licensed under [MIT](http://mattn.mit-license.org)\n- [tcell](https://github.com/gdamore/tcell)\n    - Licensed under [Apache License 2.0](https://github.com/gdamore/tcell/blob/master/LICENSE)\n- [fastwalk](https://github.com/charlievieth/fastwalk)\n    - Licensed under [MIT](https://raw.githubusercontent.com/charlievieth/fastwalk/master/LICENSE)\n\nLicense\n-------\n\n[MIT](LICENSE)\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 90.0732421875,
          "content": "CHANGELOG\n=========\n\n0.58.0\n------\n\nThis version introduces three new border types, `--list-border`, `--input-border`, and `--header-border`, offering much greater flexibility for customizing the user interface.\n\nAlso, fzf now offers three \"style presets\" for easier customization, which can be activated using the `--style=[default|minimal|full]` option.\n\n- Style presets (#4160)\n    - `--style=full`\n    - `--style=default`\n    - `--style=minimal`\n- Border and label for the list section (#4148)\n    - Options\n        - `--list-border[=STYLE]`\n        - `--list-label=LABEL`\n        - `--list-label-pos=COL[:bottom]`\n    - Colors\n        - `list-fg`\n        - `list-bg`\n        - `list-border`\n        - `list-label`\n    - Actions\n        - `change-list-label`\n        - `transform-list-label`\n- Border and label for the input section (prompt line and info line) (#4154)\n    - Options\n        - `--input-border[=STYLE]`\n        - `--input-label=LABEL`\n        - `--input-label-pos=COL[:bottom]`\n    - Colors\n        - `input-fg` (`query`)\n        - `input-bg`\n        - `input-border`\n        - `input-label`\n    - Actions\n        - `change-input-label`\n        - `transform-input-label`\n- Border and label for the header section (#4159)\n    - Options\n        - `--header-border[=STYLE]`\n        - `--header-label=LABEL`\n        - `--header-label-pos=COL[:bottom]`\n    - Colors\n        - `header-fg` (`header`)\n        - `header-bg`\n        - `header-border`\n        - `header-label`\n    - Actions\n        - `change-header-label`\n        - `transform-header-label`\n- Added `--preview-border[=STYLE]` as short for `--preview-window=border[-STYLE]`\n- Added new preview border style `line` which draws a single separator line between the preview window and the rest of the interface\n- You can specify `border-native` to `--tmux` so that native tmux border is used instead of `--border`. This can be useful if you start a different program from inside the popup.\n  ```sh\n  fzf --tmux border-native --bind 'enter:execute:less {}'\n  ```\n- Added `toggle-multi-line` action\n- Added `toggle-hscroll` action\n\n0.57.0\n------\n- You can now resize the preview window by dragging the border\n- Built-in walker improvements\n    - `--walker-root` can take multiple directory arguments. e.g. `--walker-root include src lib`\n    - `--walker-skip` can handle multi-component patterns. e.g. `--walker-skip target/build`\n- Removed long processing delay when displaying images in the preview window\n- `FZF_PREVIEW_*` environment variables are exported to all child processes (#4098)\n- Bug fixes in fish scripts\n\n0.56.3\n------\n- Bug fixes in zsh scripts\n    - fix(zsh): handle backtick trigger edge case (#4090)\n    - revert(zsh): remove 'fc -RI' call in the history widget (#4093)\n    - Thanks to @LangLangBart for the contributions\n\n0.56.2\n------\n- Bug fixes\n    - Fixed abnormal scrolling behavior when `--wrap` is set (#4083)\n    - [zsh] Fixed warning message when `ksh_arrays` is set (#4084)\n\n0.56.1\n------\n- Bug fixes and improvements\n    - Fixed a race condition which would cause fzf to present stale results after `reload` (#4070)\n    - `page-up` and `page-down` actions now work correctly with multi-line items (#4069)\n    - `{n}` is allowed in `SCROLL` expression in `--preview-window` (#4079)\n    - [zsh] Fixed regression in history loading with shared option (#4071)\n    - [zsh] Better command extraction in zsh completion (#4082)\n- Thanks to @LangLangBart, @jaydee-coder, @alex-huff, and @vejkse for the contributions\n\n0.56.0\n------\n- Added `--gap[=N]` option to display empty lines between items.\n    - This can be useful to visually separate adjacent multi-line items.\n      ```sh\n      # All bash functions, highlighted\n      declare -f | perl -0777 -pe 's/^}\\n/}\\0/gm' |\n        bat --plain --language bash --color always |\n        fzf --read0 --ansi --reverse --multi --highlight-line --gap\n      ```\n    - Or just to make the list easier to read. For single-line items, you probably want to set `--color gutter:-1` as well to hide the gutter.\n      ```sh\n      fzf --info inline-right --gap --color gutter:-1\n      ```\n- Added `noinfo` option to `--preview-window` to hide the scroll indicator in the preview window\n- Bug fixes\n    - Thanks to @LangLangBart, @akinomyoga, and @charlievieth for fixing the bugs\n\n0.55.0\n------\n_Release highlights: https://junegunn.github.io/fzf/releases/0.55.0/_\n\n- Added `exact-boundary-match` type to the search syntax. When a search term is single-quoted, fzf will search for the exact occurrences of the string with both ends at word boundaries.\n  ```sh\n  fzf --query \"'here'\" << EOF\n  come here\n  not there\n  EOF\n  ```\n- [bash] Fuzzy path completion is enabled for all commands\n    - 1. If the default completion is not already set\n    - 2. And if the current bash supports `complete -D` option\n    - However, fuzzy completion for some commands can be \"dynamically\" disabled by the dynamic completion loader\n    - See the comment in `__fzf_default_completion` function for more information\n- Comments are now allowed in `$FZF_DEFAULT_OPTS` and `$FZF_DEFAULT_OPTS_FILE`\n  ```sh\n  export FZF_DEFAULT_OPTS='\n    # Layout options\n    --layout=reverse\n    --info=inline-right   # Show info on the right side of the prompt line\n    # ...\n  '\n  ```\n- Hyperlinks (OSC 8) are now supported in the preview window and in the main window\n  ```sh\n  printf '<< \\e]8;;http://github.com/junegunn/fzf\\e\\\\Link to \\e[32mfz\\e[0mf\\e]8;;\\e\\\\ >>' | fzf --ansi\n\n  fzf --preview \"printf '<< \\e]8;;http://github.com/junegunn/fzf\\e\\\\Link to \\e[32mfz\\e[0mf\\e]8;;\\e\\\\ >>'\"\n  ```\n- The default `--ellipsis` is now `··` instead of `..`.\n- [vim] A spec can have `exit` callback that is called with the exit status of fzf\n    - This can be used to clean up temporary resources or restore the original state when fzf is closed without a selection\n- Fixed `--tmux bottom` when the status line is not at the bottom\n- Fixed extra scroll offset in multi-line mode (`--read0` or `--wrap`)\n- Added fallback `ps` command for `kill` completion on Cygwin\n\n0.54.3\n------\n- Fixed incompatibility of adaptive height specification and 'start:reload'\n  ```sh\n  # A regression in 0.54.0 would cause this to fail\n  fzf --height '~100%' --bind 'start:reload:seq 10'\n  ```\n- Environment variables are now available to `$FZF_DEFAULT_COMMAND`\n  ```sh\n  FZF_DEFAULT_COMMAND='echo $FZF_QUERY' fzf --query foo\n  ```\n\n0.54.2\n------\n- Fixed incorrect syntax highlighting of truncated multi-line entries\n- Updated GoReleaser to 2.1.0 to simplify notarization of macOS binaries\n    - macOS archives will be in `tar.gz` format instead of `zip` format since we no longer notarize the zip files but binaries\n- (Windows) Reverted a mintty fix in 0.54.0\n    - As a result, mouse may not work on mintty in fullscreen mode. However, fzf will correctly read non-ASCII input in fullscreen mode (`--no-height`).\n    - fzf unfortunately cannot read non-ASCII input when not in fullscreen mode on Windows. So if you need to input non-ASCII characters, add `--no-height` to your `$FZF_DEFAULT_OPTS`.\n    - Any help in fixing this issue will be appreciated (#3799, #3847).\n\n0.54.1\n------\n- Updated [fastwalk](https://github.com/charlievieth/fastwalk) dependency for built-in directory walker\n    - [fastwalk: add optional sorting and improve documentation](https://github.com/charlievieth/fastwalk/pull/27)\n    - [fastwalk: only check if MSYSTEM is set during MSYS/MSYS2](https://github.com/charlievieth/fastwalk/pull/28)\n    - Thanks to @charlievieth\n- Reverted ALT-C binding of fish to use `cd` instead of `builtin cd`\n    - `builtin cd` was introduced to work around a bug of `cd` coming from `zoxide init --cmd cd fish` where it cannot handle `--` argument.\n    - However, the default `cd` of fish is actually a wrapper function for supporting `cd -`, so we want to use it instead.\n    - See [#3928](https://github.com/junegunn/fzf/pull/3928) for more information and consider helping zoxide fix the bug.\n\n0.54.0\n------\n_Release highlights: https://junegunn.github.io/fzf/releases/0.54.0/_\n\n- Implemented line wrap of long items\n    - `--wrap` option enables line wrap\n    - `--wrap-sign` customizes the sign for wrapped lines (default: `↳ `)\n    - `toggle-wrap` action toggles line wrap\n      ```sh\n      history | fzf --tac --wrap --bind 'ctrl-/:toggle-wrap' --wrap-sign $'\\t↳ '\n      ```\n    - fzf by default binds `CTRL-/` and `ALT-/` to `toggle-wrap`\n- Updated shell integration scripts to leverage line wrap\n    - CTRL-R binding includes `--wrap-sign $'\\t↳ '` to indent wrapped lines\n    - `kill **` completion uses `--wrap` to show the whole line by default\n      instead of showing it in the preview window\n- Added `--info-command` option for customizing the info line\n  ```sh\n  # Prepend the current cursor position in yellow\n  fzf --info-command='echo -e \"\\x1b[33;1m$FZF_POS\\x1b[m/$FZF_INFO 💛\"'\n  ```\n    - `$FZF_INFO` is set to the original info text\n    - ANSI color codes are supported\n- Pointer and marker signs can be set to empty strings\n  ```sh\n  # Minimal style\n  fzf --pointer '' --marker '' --prompt '' --info hidden\n  ```\n- Better cache management and improved rendering for `--tail`\n- Improved `--sync` behavior\n    - When `--sync` is provided, fzf will not render the interface until the initial filtering and the associated actions (bound to any of `start`, `load`, `result`, or `focus`) are complete.\n      ```sh\n      # fzf will not render intermediate states\n      (sleep 1; seq 1000000; sleep 1) |\n        fzf --sync --query 5 --listen --bind start:up,load:up,result:up,focus:change-header:Ready\n      ```\n- GET endpoint is now available from `execute` and `transform` actions (it used to timeout due to lock conflict)\n  ```sh\n  fzf --listen --sync --bind 'focus:transform-header:curl -s localhost:$FZF_PORT?limit=0 | jq .'\n  ```\n- Added `offset-middle` action to place the current item is in the middle of the screen\n- fzf will not start the initial reader when `reload` or `reload-sync` is bound to `start` event. `fzf < /dev/null` or `: | fzf` are no longer required and extraneous `load` event will not fire due to the empty list.\n  ```sh\n  # Now this will work as expected. Previously, this would print an invalid header line.\n  # `fzf < /dev/null` or `: | fzf` would fix the problem, but then an extraneous \n  # `load` event would fire and the header would be prematurely updated.\n  fzf --header 'Loading ...' --header-lines 1 \\\n      --bind 'start:reload:sleep 1; ps -ef' \\\n      --bind 'load:change-header:Loaded!'\n  ```\n- Fixed mouse support on Windows\n- Fixed crash when using `--tiebreak=end` with very long items\n- zsh 5.0 compatibility (thanks to @LangLangBart)\n- Fixed `--walker-skip` to also skip symlinks to directories\n- Fixed `result` event not fired when input stream is not complete\n- New tags will have `v` prefix so that they are available on https://proxy.golang.org/\n\n0.53.0\n------\n_Release highlights: https://junegunn.github.io/fzf/releases/0.53.0/_\n\n- Multi-line display\n    - See [Processing multi-line items](https://junegunn.github.io/fzf/tips/processing-multi-line-items/)\n    - fzf can now display multi-line items\n      ```sh\n      # All bash functions, highlighted\n      declare -f | perl -0777 -pe 's/^}\\n/}\\0/gm' |\n        bat --plain --language bash --color always |\n        fzf --read0 --ansi --reverse --multi --highlight-line\n\n      # Ripgrep multi-line output\n      rg --pretty bash | perl -0777 -pe 's/\\n\\n/\\n\\0/gm' |\n        fzf --read0 --ansi --multi --highlight-line --reverse --tmux 70%\n      ```\n        - To disable multi-line display, use `--no-multi-line`\n    - CTRL-R bindings of bash, zsh, and fish have been updated to leverage multi-line display\n    - The default `--pointer` and `--marker` have been changed from `>` to Unicode bar characters as they look better with multi-line items\n    - Added `--marker-multi-line` to customize the select marker for multi-line entries with the default set to `╻┃╹`\n      ```\n      ╻First line\n      ┃...\n      ╹Last line\n      ```\n- Native tmux integration\n    - Added `--tmux` option to replace fzf-tmux script and simplify distribution\n      ```sh\n      # --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%]]\n      # Center, 100% width and 70% height\n      fzf --tmux 100%,70% --border horizontal --padding 1,2\n\n      # Left, 30% width\n      fzf --tmux left,30%\n\n      # Bottom, 50% height\n      fzf --tmux bottom,50%\n      ```\n        - To keep the implementation simple, it only uses popups. You need tmux 3.3 or later.\n    - To use `--tmux` in Vim plugin:\n      ```vim\n      let g:fzf_layout = { 'tmux': '100%,70%' }\n      ```\n- Added support for endless input streams\n    - See [Browsing log stream with fzf](https://junegunn.github.io/fzf/tips/browsing-log-streams/)\n    - Added `--tail=NUM` option to limit the number of items to keep in memory. This is useful when you want to browse an endless stream of data (e.g. log stream) with fzf while limiting memory usage.\n      ```sh\n      # Interactive filtering of a log stream\n      tail -f *.log | fzf --tail 100000 --tac --no-sort --exact\n      ```\n- Better Windows Support\n    - fzf now works on Git bash (mintty) out of the box via winpty integration\n    - Many fixes and improvements for Windows\n- man page is now embedded in the binary; `fzf --man` to see it\n- Changed the default `--scroll-off` to 3, as we think it's a better default\n- Process started by `execute` action now directly writes to and reads from `/dev/tty`. Manual `/dev/tty` redirection for interactive programs is no longer required.\n  ```sh\n  # Vim will work fine without /dev/tty redirection\n  ls | fzf --bind 'space:execute:vim {}' > selected\n  ```\n- Added `print(...)` action to queue an arbitrary string to be printed on exit. This was mainly added to work around the limitation of `--expect` where it's not compatible with `--bind` on the same key and it would ignore other actions bound to it.\n  ```sh\n  # This doesn't work as expected because --expect is not compatible with --bind\n  fzf --multi --expect ctrl-y --bind 'ctrl-y:select-all'\n\n  # This is something you can do instead\n  fzf --multi --bind 'enter:print()+accept,ctrl-y:select-all+print(ctrl-y)+accept'\n  ```\n    - We also considered making them compatible, but realized that some users may have been relying on the current behavior.\n- [`NO_COLOR`](https://no-color.org/) environment variable is now respected. If the variable is set, fzf defaults to `--no-color` unless otherwise specified.\n\n0.52.1\n------\n- Fixed a critical bug in the Windows version\n    - Windows users are strongly encouraged to upgrade to this version\n\n0.52.0\n------\n- Added `--highlight-line` to highlight the whole current line (à la `set cursorline` of Vim)\n- Added color names for selected lines: `selected-fg`, `selected-bg`, and `selected-hl`\n  ```sh\n  fzf --border --multi --info inline-right --layout reverse --marker ▏ --pointer ▌ --prompt '▌ '  \\\n      --highlight-line --color gutter:-1,selected-bg:238,selected-fg:146,current-fg:189\n  ```\n- Added `click-header` event that is triggered when the header section is clicked. When the event is triggered, `$FZF_CLICK_HEADER_COLUMN` and `$FZF_CLICK_HEADER_LINE` are set.\n  ```sh\n  fd --type f |\n    fzf --header $'[Files] [Directories]' --header-first \\\n        --bind 'click-header:transform:\n          (( FZF_CLICK_HEADER_COLUMN <= 7 )) && echo \"reload(fd --type f)\"\n          (( FZF_CLICK_HEADER_COLUMN >= 9 )) && echo \"reload(fd --type d)\"\n        '\n  ```\n- Add `$FZF_COMPLETION_{DIR,PATH}_OPTS` for separately customizing the behavior of fuzzy completion\n  ```sh\n  # Set --walker options without 'follow' not to follow symbolic links\n  FZF_COMPLETION_PATH_OPTS=\"--walker=file,dir,hidden\"\n  FZF_COMPLETION_DIR_OPTS=\"--walker=dir,hidden\"\n  ```\n- Fixed Windows argument escaping\n- Bug fixes and improvements\n- The code was heavily refactored to allow using fzf as a library in Go programs. The API is still experimental and subject to change.\n    - https://gist.github.com/junegunn/193990b65be48a38aac6ac49d5669170\n\n0.51.0\n------\n- Added a new environment variable `$FZF_POS` exported to the child processes. It's the vertical position of the cursor in the list starting from 1.\n  ```sh\n  # Toggle selection to the top or to the bottom\n  seq 30 | fzf --multi --bind 'load:pos(10)' \\\n    --bind 'shift-up:transform:for _ in $(seq $FZF_POS $FZF_MATCH_COUNT); do echo -n +toggle+up; done' \\\n    --bind 'shift-down:transform:for _ in $(seq 1 $FZF_POS); do echo -n +toggle+down; done'\n  ```\n- Added `--with-shell` option to start child processes with a custom shell command and flags\n  ```sh\n  gem list | fzf --with-shell 'ruby -e' \\\n    --preview 'pp Gem::Specification.find_by_name({1})' \\\n    --bind 'ctrl-o:execute-silent:\n        spec = Gem::Specification.find_by_name({1})\n        [spec.homepage, *spec.metadata.filter { _1.end_with?(\"uri\") }.values].uniq.each do\n          system \"open\", _1\n        end\n    '\n  ```\n- Added `change-multi` action for dynamically changing `--multi` option\n    - `change-multi` - enable multi-select mode with no limit\n    - `change-multi(NUM)` - enable multi-select mode with a limit\n    - `change-multi(0)` - disable multi-select mode\n- Windows improvements\n    - `become` action is now supported on Windows\n        - Unlike in *nix, this does not use `execve(2)`. Instead it spawns a new process and waits for it to finish, so the exact behavior may differ.\n    - Fixed argument escaping for Windows cmd.exe. No redundant escaping of backslashes.\n- Bug fixes and improvements\n\n0.50.0\n------\n- Search performance optimization. You can observe 50%+ improvement in some scenarios.\n  ```\n  $ rg --line-number --no-heading --smart-case . > $DATA\n\n  $ wc < $DATA\n   5520118 26862362 897487793\n\n  $ hyperfine -w 1 -L bin fzf-0.49.0,fzf-7ce6452,fzf-a5447b8,fzf '{bin} --filter \"///\" < $DATA | head -30'\n  Summary\n    fzf --filter \"///\" < $DATA | head -30 ran\n      1.16 ± 0.03 times faster than fzf-a5447b8 --filter \"///\" < $DATA | head -30\n      1.23 ± 0.03 times faster than fzf-7ce6452 --filter \"///\" < $DATA | head -30\n      1.52 ± 0.03 times faster than fzf-0.49.0 --filter \"///\" < $DATA | head -30\n  ```\n- Added `jump` and `jump-cancel` events that are triggered when leaving `jump` mode\n  ```sh\n  # Default behavior\n  fzf --bind space:jump\n\n  # Same as jump-accept action\n  fzf --bind space:jump,jump:accept\n\n  # Accept on jump, abort on cancel\n  fzf --bind space:jump,jump:accept,jump-cancel:abort\n\n  # Change header on jump-cancel\n  fzf --bind 'space:change-header(Type jump label)+jump,jump-cancel:change-header:Jump cancelled'\n  ```\n- Added a new environment variable `$FZF_KEY` exported to the child processes. It's the name of the last key pressed.\n  ```sh\n  fzf --bind 'space:jump,jump:accept,jump-cancel:transform:[[ $FZF_KEY =~ ctrl-c ]] && echo abort'\n  ```\n- fzf can be built with profiling options. See [BUILD.md](BUILD.md) for more information.\n- Bug fixes\n\n0.49.0\n------\n- Ingestion performance improved by around 40% (more or less depending on options)\n- `--info=hidden` and `--info=inline-right` will no longer hide the horizontal separator by default. This gives you more flexibility in customizing the layout.\n    ```sh\n    fzf --border --info=inline-right\n    fzf --border --info=inline-right --separator ═\n    fzf --border --info=inline-right --no-separator\n    fzf --border --info=hidden\n    fzf --border --info=hidden --separator ━\n    fzf --border --info=hidden --no-separator\n    ```\n- Added two environment variables exported to the child processes\n    - `FZF_PREVIEW_LABEL`\n    - `FZF_BORDER_LABEL`\n    ```sh\n    # Use the current value of $FZF_PREVIEW_LABEL to determine which actions to perform\n    git ls-files |\n      fzf --header 'Press CTRL-P to change preview mode' \\\n          --bind='ctrl-p:transform:[[ $FZF_PREVIEW_LABEL =~ cat ]] \\\n          && echo \"change-preview(git log --color=always \\{})+change-preview-label([[ log ]])\" \\\n          || echo \"change-preview(bat --color=always \\{})+change-preview-label([[ cat ]])\"'\n    ```\n- Renamed `track` action to `track-current` to highlight the difference between the global tracking state set by `--track` and a one-off tracking action\n    - `track` is still available as an alias\n- Added `untrack-current` and `toggle-track-current` actions\n    - `*-current` actions are no-op when the global tracking state is set\n- Bug fixes and minor improvements\n\n0.48.1\n------\n- CTRL-T and ALT-C bindings can be disabled by setting `FZF_CTRL_T_COMMAND` and `FZF_ALT_C_COMMAND` to empty strings respectively when sourcing the script\n    ```sh\n    # bash\n    FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= eval \"$(fzf --bash)\"\n\n    # zsh\n    FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= eval \"$(fzf --zsh)\"\n\n    # fish\n    fzf --fish | FZF_CTRL_T_COMMAND= FZF_ALT_C_COMMAND= source\n    ```\n    - Setting the variables after sourcing the script will have no effect\n- Bug fixes\n\n0.48.0\n------\n- Shell integration scripts are now embedded in the fzf binary. This simplifies the distribution, and the users are less likely to have problems caused by using incompatible scripts and binaries.\n    - bash\n      ```sh\n      # Set up fzf key bindings and fuzzy completion\n      eval \"$(fzf --bash)\"\n      ```\n    - zsh\n      ```sh\n      # Set up fzf key bindings and fuzzy completion\n      eval \"$(fzf --zsh)\"\n      ```\n    - fish\n      ```fish\n      # Set up fzf key bindings\n      fzf --fish | source\n      ```\n- Added options for customizing the behavior of the built-in walker\n    | Option               | Description                                       | Default              |\n    | ---                  | ---                                               | ---                  |\n    | `--walker=OPTS`      | Walker options (`[file][,dir][,follow][,hidden]`) | `file,follow,hidden` |\n    | `--walker-root=DIR`  | Root directory from which to start walker         | `.`                  |\n    | `--walker-skip=DIRS` | Comma-separated list of directory names to skip   | `.git,node_modules`  |\n    - Examples\n        ```sh\n        # Built-in walker is only used by standalone fzf when $FZF_DEFAULT_COMMAND is not set\n        unset FZF_DEFAULT_COMMAND\n\n        fzf # default: --walker=file,follow,hidden --walker-root=. --walker-skip=.git,node_modules\n        fzf --walker=file,dir,hidden,follow --walker-skip=.git,node_modules,target\n\n        # Walker options in $FZF_DEFAULT_OPTS\n        export FZF_DEFAULT_OPTS=\"--walker=file,dir,hidden,follow --walker-skip=.git,node_modules,target\"\n        fzf\n\n        # Reading from STDIN; --walker is ignored\n        seq 100 | fzf --walker=dir\n\n        # Reading from $FZF_DEFAULT_COMMAND; --walker is ignored\n        export FZF_DEFAULT_COMMAND='seq 100'\n        fzf --walker=dir\n        ```\n- Shell integration scripts have been updated to use the built-in walker with these new options and they are now much faster out of the box.\n\n0.47.0\n------\n- Replaced [\"the default find command\"][find] with a built-in directory walker to simplify the code and to achieve better performance and consistent behavior across platforms.\n  This doesn't affect you if you have `$FZF_DEFAULT_COMMAND` set.\n    - Breaking changes:\n        - Unlike [the previous \"find\" command][find], the new traversal code will list hidden files, but hidden directories will still be ignored\n        - No filtering of `devtmpfs` or `proc` types\n        - Traversal is parallelized, so the order of the entries will be different each time\n    - You may wonder why fzf implements directory walker anyway when it's a filter program following the [Unix philosophy][unix].\n      But fzf has had [the walker code for years][walker] to tackle the performance problem on Windows. And I decided to use the same approach on different platforms as well for the benefits listed above.\n    - Built-in walker is using the excellent [charlievieth/fastwalk][fastwalk] library, which easily outperforms its competitors and supports safely following symlinks.\n- Added `$FZF_DEFAULT_OPTS_FILE` to allow managing default options in a file\n    - See [#3618](https://github.com/junegunn/fzf/pull/3618)\n    - Option precedence from lower to higher\n        1. Options read from `$FZF_DEFAULT_OPTS_FILE`\n        1. Options from `$FZF_DEFAULT_OPTS`\n        1. Options from command-line arguments\n- Bug fixes and improvements\n\n[find]: https://github.com/junegunn/fzf/blob/0.46.1/src/constants.go#L60-L64\n[walker]: https://github.com/junegunn/fzf/pull/1847\n[fastwalk]: https://github.com/charlievieth/fastwalk\n[unix]: https://en.wikipedia.org/wiki/Unix_philosophy\n\n0.46.1\n------\n- Bug fixes and improvements\n- Fixed Windows binaries\n- Downgraded Go version to 1.20 to support older versions of Windows\n    - https://tip.golang.org/doc/go1.21#windows\n- Updated [rivo/uniseg](https://github.com/rivo/uniseg) dependency to v0.4.6\n\n0.46.0\n------\n- Added two new events\n    - `result` - triggered when the filtering for the current query is complete and the result list is ready\n    - `resize` - triggered when the terminal size is changed\n- fzf now exports the following environment variables to the child processes\n  | Variable           | Description                                                 |\n  | ---                | ---                                                         |\n  | `FZF_LINES`        | Number of lines fzf takes up excluding padding and margin   |\n  | `FZF_COLUMNS`      | Number of columns fzf takes up excluding padding and margin |\n  | `FZF_TOTAL_COUNT`  | Total number of items                                       |\n  | `FZF_MATCH_COUNT`  | Number of matched items                                     |\n  | `FZF_SELECT_COUNT` | Number of selected items                                    |\n  | `FZF_QUERY`        | Current query string                                        |\n  | `FZF_PROMPT`       | Prompt string                                               |\n  | `FZF_ACTION`       | The name of the last action performed                       |\n  - This allows you to write sophisticated transformations like so\n    ```sh\n    # Script to dynamically resize the preview window\n    transformer='\n      # 1 line for info, another for prompt, and 2 more lines for preview window border\n      lines=$(( FZF_LINES - FZF_MATCH_COUNT - 4 ))\n      if [[ $FZF_MATCH_COUNT -eq 0 ]]; then\n        echo \"change-preview-window:hidden\"\n      elif [[ $lines -gt 3 ]]; then\n        echo \"change-preview-window:$lines\"\n      elif [[ $FZF_PREVIEW_LINES -ne 3 ]]; then\n        echo \"change-preview-window:3\"\n      fi\n    '\n    seq 10000 | fzf --preview 'seq {} 10000' --preview-window up \\\n                    --bind \"result:transform:$transformer\" \\\n                    --bind \"resize:transform:$transformer\"\n    ```\n  - And we're phasing out `{fzf:prompt}` and `{fzf:action}`\n- Changed [mattn/go-runewidth](https://github.com/mattn/go-runewidth) dependency to [rivo/uniseg](https://github.com/rivo/uniseg) for accurate results\n    - Set `--ambidouble` if your terminal displays ambiguous width characters (e.g. box-drawing characters for borders) as 2 columns\n    - `RUNEWIDTH_EASTASIAN=1` is still respected for backward compatibility, but it's recommended that you use this new option instead\n- Bug fixes\n\n0.45.0\n------\n- Added `transform` action to conditionally perform a series of actions\n  ```sh\n  # Disallow selecting an empty line\n  echo -e \"1. Hello\\n2. Goodbye\\n\\n3. Exit\" |\n    fzf --height '~100%' --reverse --header 'Select one' \\\n        --bind 'enter:transform:[[ -n {} ]] && echo accept || echo \"change-header:Invalid selection\"'\n\n  # Move cursor past the empty line\n  echo -e \"1. Hello\\n2. Goodbye\\n\\n3. Exit\" |\n    fzf --height '~100%' --reverse --header 'Select one' \\\n        --bind 'enter:transform:[[ -n {} ]] && echo accept || echo \"change-header:Invalid selection\"' \\\n        --bind 'focus:transform:[[ -n {} ]] && exit; [[ {fzf:action} =~ up$ ]] && echo up || echo down'\n\n  # A single key binding to toggle between modes\n  fd --type file |\n    fzf --prompt 'Files> ' \\\n        --header 'CTRL-T: Switch between Files/Directories' \\\n        --bind 'ctrl-t:transform:[[ ! {fzf:prompt} =~ Files ]] &&\n                  echo \"change-prompt(Files> )+reload(fd --type file)\" ||\n                  echo \"change-prompt(Directories> )+reload(fd --type directory)\"'\n  ```\n- Added placeholder expressions\n    - `{fzf:action}` - The name of the last action performed\n    - `{fzf:prompt}` - Prompt string (including ANSI color codes)\n    - `{fzf:query}` - Synonym for `{q}`\n- Added support for negative height\n  ```sh\n  # Terminal height minus 1, so you can still see the command line\n  fzf --height=-1\n  ```\n  - This handles a terminal resize better than `--height=$(($(tput lines) - 1))`\n- Added `accept-or-print-query` action that acts like `accept` but prints the\n  current query when there's no match for the query\n  ```sh\n  # You can make CTRL-R paste the current query when there's no match\n  export FZF_CTRL_R_OPTS='--bind enter:accept-or-print-query'\n  ```\n  - Note that there are alternative ways to implement the same strategy\n    ```sh\n    # 'become' is apparently more versatile but it's not available on Windows.\n    export FZF_CTRL_R_OPTS='--bind \"enter:become:if [ -z {} ]; then echo {q}; else echo {}; fi\"'\n\n    # Using the new 'transform' action\n    export FZF_CTRL_R_OPTS='--bind \"enter:transform:[ -z {} ] && echo print-query || echo accept\"'\n    ```\n- Added `show-header` and `hide-header` actions\n- Bug fixes\n\n0.44.1\n------\n- Fixed crash when preview window is hidden on `focus` event\n\n0.44.0\n------\n- (Experimental) Sixel image support in preview window (not available on Windows)\n    - [bin/fzf-preview.sh](bin/fzf-preview.sh) is added to demonstrate how to\n      display an image using Kitty image protocol or Sixel. You can use it\n      like so:\n      ```sh\n      fzf --preview='fzf-preview.sh {}'\n      ```\n- (Experimental) iTerm2 inline image protocol support in preview window (not available on Windows)\n  ```sh\n  # Using https://iterm2.com/utilities/imgcat\n  fzf --preview 'imgcat -W $FZF_PREVIEW_COLUMNS -H $FZF_PREVIEW_LINES {}'\n  ```\n- HTTP server can be configured to accept remote connections\n  ```sh\n  # FZF_API_KEY is required for a non-localhost listen address\n  export FZF_API_KEY=\"$(head -c 32 /dev/urandom | base64)\"\n  fzf --listen 0.0.0.0:6266\n  ```\n    - To allow remote process execution, use `--listen-unsafe` instead\n      (`execute*`, `reload*`, `become`, `preview`, `change-preview`, `transform-*`)\n      ```sh\n      fzf --listen-unsafe 0.0.0.0:6266\n      ```\n- Bug fixes\n\n0.43.0\n------\n- (Experimental) Added support for Kitty image protocol in the preview window\n  (not available on Windows)\n  ```sh\n  fzf --preview='\n    if file --mime-type {} | grep -qF image/; then\n      # --transfer-mode=memory is the fastest option but if you want fzf to be able\n      # to redraw the image on terminal resize or on 'change-preview-window',\n      # you need to use --transfer-mode=stream.\n      kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}@0x0 {} | sed \\$d\n    else\n      bat --color=always {}\n    fi\n  '\n  ```\n- (Experimental) `--listen` server can report program state in JSON format (`GET /`)\n  ```sh\n  # fzf server started in \"headless\" mode\n  fzf --listen 6266 2> /dev/null\n\n  # Get program state\n  curl localhost:6266 | jq .\n\n  # Increase the number of items returned (default: 100)\n  curl localhost:6266?limit=1000 | jq .\n  ```\n- `--listen` server can be secured by setting `$FZF_API_KEY` environment\n  variable.\n  ```sh\n  export FZF_API_KEY=\"$(head -c 32 /dev/urandom | base64)\"\n\n  # Server\n  fzf --listen 6266\n\n  # Client\n  curl localhost:6266 -H \"x-api-key: $FZF_API_KEY\" -d 'change-query(yo)'\n  ```\n- Added `toggle-header` action\n- Added mouse events for `--bind`\n    - `scroll-up` (bound to `up`)\n    - `scroll-down` (bound to `down`)\n    - `shift-scroll-up` (bound to `toggle+up`)\n    - `shift-scroll-down` (bound to `toggle+down`)\n    - `shift-left-click` (bound to `toggle`)\n    - `shift-right-click` (bound to `toggle`)\n    - `preview-scroll-up` (bound to `preview-up`)\n    - `preview-scroll-down` (bound to `preview-down`)\n    ```sh\n    # Twice faster scrolling both in the main window and the preview window\n    fzf --bind 'scroll-up:up+up,scroll-down:down+down' \\\n        --bind 'preview-scroll-up:preview-up+preview-up' \\\n        --bind 'preview-scroll-down:preview-down+preview-down' \\\n        --preview 'cat {}'\n    ```\n- Added `offset-up` and `offset-down` actions\n  ```sh\n  # Scrolling will behave similarly to CTRL-E and CTRL-Y of vim\n  fzf --bind scroll-up:offset-up,scroll-down:offset-down \\\n      --bind ctrl-y:offset-up,ctrl-e:offset-down \\\n      --scroll-off=5\n  ```\n- Shell extensions\n    - Updated bash completion for fzf options\n    - bash key bindings no longer requires perl; it will use awk or mawk\n      instead if perl is not found\n    - Basic context-aware completion for ssh command\n    - Applied `--scheme=path` for better ordering of the result\n- Bug fixes and improvements\n\n0.42.0\n------\n- Added new info style: `--info=right`\n- Added new info style: `--info=inline-right`\n- Added new border style `thinblock` which uses symbols for legacy computing\n  [one eighth block elements](https://en.wikipedia.org/wiki/Symbols_for_Legacy_Computing)\n    - Similarly to `block`, this style is suitable when using a different\n      background color because the window is completely contained within the border.\n      ```sh\n      BAT_THEME=GitHub fzf --info=right --border=thinblock --preview-window=border-thinblock \\\n          --margin=3 --scrollbar=▏▕ --preview='bat --color=always --style=numbers {}' \\\n          --color=light,query:238,fg:238,bg:251,bg+:249,gutter:251,border:248,preview-bg:253\n      ```\n    - This style may not render correctly depending on the font and the\n      terminal emulator.\n\n0.41.1\n------\n- Fixed a bug where preview window is not updated when `--disabled` is set and\n  a reload is triggered by `change:reload` binding\n\n0.41.0\n------\n- Added color name `preview-border` and `preview-scrollbar`\n- Added new border style `block` which uses [block elements](https://en.wikipedia.org/wiki/Block_Elements)\n- `--scrollbar` can take two characters, one for the main window, the other\n  for the preview window\n- Putting it altogether:\n  ```sh\n  fzf-tmux -p 80% --padding 1,2 --preview 'bat --style=plain --color=always {}' \\\n      --color 'bg:237,bg+:235,gutter:237,border:238,scrollbar:236' \\\n      --color 'preview-bg:235,preview-border:236,preview-scrollbar:234' \\\n      --preview-window 'border-block' --border block --scrollbar '▌▐'\n  ```\n- Bug fixes and improvements\n\n0.40.0\n------\n- Added `zero` event that is triggered when there's no match\n  ```sh\n  # Reload the candidate list when there's no match\n  echo $RANDOM | fzf --bind 'zero:reload(echo $RANDOM)+clear-query' --height 3\n  ```\n- New actions\n    - Added `track` action which makes fzf track the current item when the\n      search result is updated. If the user manually moves the cursor, or the\n      item is not in the updated search result, tracking is automatically\n      disabled. Tracking is useful when you want to see the surrounding items\n      by deleting the query string.\n      ```sh\n      # Narrow down the list with a query, point to a command,\n      # and hit CTRL-T to see its surrounding commands.\n      export FZF_CTRL_R_OPTS=\"\n        --preview 'echo {}' --preview-window up:3:hidden:wrap\n        --bind 'ctrl-/:toggle-preview'\n        --bind 'ctrl-t:track+clear-query'\n        --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'\n        --color header:italic\n        --header 'Press CTRL-Y to copy command into clipboard'\"\n      ```\n    - Added `change-header(...)`\n    - Added `transform-header(...)`\n    - Added `toggle-track` action\n- Fixed `--track` behavior when used with `--tac`\n    - However, using `--track` with `--tac` is not recommended. The resulting\n      behavior can be very confusing.\n- Bug fixes and improvements\n\n0.39.0\n------\n- Added `one` event that is triggered when there's only one match\n  ```sh\n  # Automatically select the only match\n  seq 10 | fzf --bind one:accept\n  ```\n- Added `--track` option that makes fzf track the current selection when the\n  result list is updated. This can be useful when browsing logs using fzf with\n  sorting disabled.\n  ```sh\n  git log --oneline --graph --color=always | nl |\n      fzf --ansi --track --no-sort --layout=reverse-list\n  ```\n- If you use `--listen` option without a port number fzf will automatically\n  allocate an available port and export it as `$FZF_PORT` environment\n  variable.\n  ```sh\n  # Automatic port assignment\n  fzf --listen --bind 'start:execute-silent:echo $FZF_PORT > /tmp/fzf-port'\n\n  # Say hello\n  curl \"localhost:$(cat /tmp/fzf-port)\" -d 'preview:echo Hello, fzf is listening on $FZF_PORT.'\n  ```\n- A carriage return and a line feed character will be rendered as dim ␍ and\n  ␊ respectively.\n  ```sh\n  printf \"foo\\rbar\\nbaz\" | fzf --read0 --preview 'echo {}'\n  ```\n- fzf will stop rendering a non-displayable characters as a space. This will\n  likely cause less glitches in the preview window.\n  ```sh\n  fzf --preview 'head -1000 /dev/random'\n  ```\n- Bug fixes and improvements\n\n0.38.0\n------\n- New actions\n    - `become(...)` - Replace the current fzf process with the specified\n      command using `execve(2)` system call.\n      See https://github.com/junegunn/fzf#turning-into-a-different-process for\n      more information.\n      ```sh\n      # Open selected files in Vim\n      fzf --multi --bind 'enter:become(vim {+})'\n\n      # Open the file in Vim and go to the line\n      git grep --line-number . |\n          fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n      ```\n        - This action is not supported on Windows\n    - `show-preview`\n    - `hide-preview`\n- Bug fixes\n    - `--preview-window 0,hidden` should not execute the preview command until\n      `toggle-preview` action is triggered\n\n0.37.0\n------\n- Added a way to customize the separator of inline info\n  ```sh\n  fzf --info 'inline: ╱ ' --prompt '╱ ' --color prompt:bright-yellow\n  ```\n- New event\n    - `focus` - Triggered when the focus changes due to a vertical cursor\n      movement or a search result update\n      ```sh\n      fzf --bind 'focus:transform-preview-label:echo [ {} ]' --preview 'cat {}'\n\n      # Any action bound to the event runs synchronously and thus can make the interface sluggish\n      # e.g. lolcat isn't one of the fastest programs, and every cursor movement in\n      #      fzf will be noticeably affected by its execution time\n      fzf --bind 'focus:transform-preview-label:echo [ {} ] | lolcat -f' --preview 'cat {}'\n\n      # Beware not to introduce an infinite loop\n      seq 10 | fzf --bind 'focus:up' --cycle\n      ```\n- New actions\n    - `change-border-label`\n    - `change-preview-label`\n    - `transform-border-label`\n    - `transform-preview-label`\n- Bug fixes and improvements\n\n0.36.0\n------\n- Added `--listen=HTTP_PORT` option to start HTTP server. It allows external\n  processes to send actions to perform via POST method.\n  ```sh\n  # Start HTTP server on port 6266\n  fzf --listen 6266\n\n  # Send actions to the server\n  curl -XPOST localhost:6266 -d 'reload(seq 100)+change-prompt(hundred> )'\n  ```\n- Added draggable scrollbar to the main search window and the preview window\n  ```sh\n  # Hide scrollbar\n  fzf --no-scrollbar\n\n  # Customize scrollbar\n  fzf --scrollbar ┆ --color scrollbar:blue\n  ```\n- New event\n    - Added `load` event that is triggered when the input stream is complete\n      and the initial processing of the list is complete.\n      ```sh\n      # Change the prompt to \"loaded\" when the input stream is complete\n      (seq 10; sleep 1; seq 11 20) | fzf --prompt 'Loading> ' --bind 'load:change-prompt:Loaded> '\n\n      # You can use it instead of 'start' event without `--sync` if asynchronous\n      # trigger is not an issue.\n      (seq 10; sleep 1; seq 11 20) | fzf --bind 'load:last'\n      ```\n- New actions\n    - Added `pos(...)` action to move the cursor to the numeric position\n        - `first` and `last` are equivalent to `pos(1)` and `pos(-1)` respectively\n      ```sh\n      # Put the cursor on the 10th item\n      seq 100 | fzf --sync --bind 'start:pos(10)'\n\n      # Put the cursor on the 10th to last item\n      seq 100 | fzf --sync --bind 'start:pos(-10)'\n      ```\n    - Added `reload-sync(...)` action which replaces the current list only after\n      the reload process is complete. This is useful when the command takes\n      a while to produce the initial output and you don't want fzf to run against\n      an empty list while the command is running.\n      ```sh\n      # You can still filter and select entries from the initial list for 3 seconds\n      seq 100 | fzf --bind 'load:reload-sync(sleep 3; seq 1000)+unbind(load)'\n      ```\n    - Added `next-selected` and `prev-selected` actions to move between selected\n      items\n      ```sh\n      # `next-selected` will move the pointer to the next selected item below the current line\n      # `prev-selected` will move the pointer to the previous selected item above the current line\n      seq 10 | fzf --multi --bind ctrl-n:next-selected,ctrl-p:prev-selected\n\n      # Both actions respect --layout option\n      seq 10 | fzf --multi --bind ctrl-n:next-selected,ctrl-p:prev-selected --layout reverse\n      ```\n    - Added `change-query(...)` action that simply changes the query string to the\n      given static string. This can be useful when used with `--listen`.\n      ```sh\n      curl localhost:6266 -d \"change-query:$(date)\"\n      ```\n    - Added `transform-prompt(...)` action for transforming the prompt string\n      using an external command\n      ```sh\n      # Press space to change the prompt string using an external command\n      # (only the first line of the output is taken)\n      fzf --bind 'space:reload(ls),load:transform-prompt(printf \"%s> \" \"$(date)\")'\n      ```\n    - Added `transform-query(...)` action for transforming the query string using\n      an external command\n      ```sh\n      # Press space to convert the query to uppercase letters\n      fzf --bind 'space:transform-query(tr \"[:lower:]\" \"[:upper:]\" <<< {q})'\n\n      # Bind it to 'change' event for automatic conversion\n      fzf --bind 'change:transform-query(tr \"[:lower:]\" \"[:upper:]\" <<< {q})'\n\n      # Can only type numbers\n      fzf --bind 'change:transform-query(sed \"s/[^0-9]//g\" <<< {q})'\n      ```\n    - `put` action can optionally take an argument string\n      ```sh\n      # a will put 'alpha' on the prompt, ctrl-b will put 'bravo'\n      fzf --bind 'a:put+put(lpha),ctrl-b:put(bravo)'\n      ```\n- Added color name `preview-label` for `--preview-label` (defaults to `label`\n  for `--border-label`)\n- Better support for (Windows) terminals where each box-drawing character\n  takes 2 columns. Set `RUNEWIDTH_EASTASIAN` environment variable to `0` or `1`.\n    - On Vim, the variable will be automatically set if `&ambiwidth` is `double`\n- Behavior changes\n    - fzf will always execute the preview command if the command template\n      contains `{q}` even when it's empty. If you prefer the old behavior,\n      you'll have to check if `{q}` is empty in your command.\n      ```sh\n      # This will show // even when the query is empty\n      : | fzf --preview 'echo /{q}/'\n\n      # But if you don't want it,\n      : | fzf --preview '[ -n {q} ] || exit; echo /{q}/'\n      ```\n    - `double-click` will behave the same as `enter` unless otherwise specified,\n      so you don't have to repeat the same action twice in `--bind` in most cases.\n      ```sh\n      # No need to bind 'double-click' to the same action\n      fzf --bind 'enter:execute:less {}' # --bind 'double-click:execute:less {}'\n      ```\n    - If the color for `separator` is not specified, it will default to the\n      color for `border`. Same holds true for `scrollbar`. This is to reduce\n      the number of configuration items required to achieve a consistent color\n      scheme.\n    - If `follow` flag is specified in `--preview-window` option, fzf will\n      automatically scroll to the bottom of the streaming preview output. But\n      when the user manually scrolls the window, the following stops. With\n      this version, fzf will resume following if the user scrolls the window\n      to the bottom.\n    - Default border style on Windows is changed to `sharp` because some\n      Windows terminals are not capable of displaying `rounded` border\n      characters correctly.\n- Minor bug fixes and improvements\n\n0.35.1\n------\n- Fixed a bug where fzf with `--tiebreak=chunk` crashes on inverse match query\n- Fixed a bug where clicking above fzf would paste escape sequences\n\n0.35.0\n------\n- Added `start` event that is triggered only once when fzf finder starts.\n  Since fzf consumes the input stream asynchronously, the input list is not\n  available unless you use `--sync`.\n  ```sh\n  seq 100 | fzf --multi --sync --bind 'start:last+select-all+preview(echo welcome)'\n  ```\n- Added `--border-label` and `--border-label-pos` for putting label on the border\n  ```sh\n  # ANSI color codes are supported\n  # (with https://github.com/busyloop/lolcat)\n  label=$(curl -s http://metaphorpsum.com/sentences/1 | lolcat -f)\n\n  # Border label at the center\n  fzf --height=10 --border --border-label=\"╢ $label ╟\" --color=label:italic:black\n\n  # Left-aligned (positive integer)\n  fzf --height=10 --border --border-label=\"╢ $label ╟\" --border-label-pos=3 --color=label:italic:black\n\n  # Right-aligned (negative integer) on the bottom line (:bottom)\n  fzf --height=10 --border --border-label=\"╢ $label ╟\" --border-label-pos=-3:bottom --color=label:italic:black\n  ```\n- Also added `--preview-label` and `--preview-label-pos` for the border of the\n  preview window\n  ```sh\n  fzf --preview 'cat {}' --border --preview-label=' Preview ' --preview-label-pos=2\n  ```\n- Info panel (match counter) will be followed by a horizontal separator by\n  default\n    - Use `--no-separator` or `--separator=''` to hide the separator\n    - You can specify an arbitrary string that is repeated to form the\n      horizontal separator. e.g. `--separator=╸`\n    - The color of the separator can be customized via `--color=separator:...`\n    - ANSI color codes are also supported\n  ```sh\n  fzf --separator=╸ --color=separator:green\n  fzf --separator=$(lolcat -f -F 1.4 <<< ▁▁▂▃▄▅▆▆▅▄▃▂▁▁) --info=inline\n  ```\n- Added `--border=bold` and `--border=double` along with\n  `--preview-window=border-bold` and `--preview-window=border-double`\n\n0.34.0\n------\n- Added support for adaptive `--height`. If the `--height` value is prefixed\n  with `~`, fzf will automatically determine the height in the range according\n  to the input size.\n  ```sh\n  seq 1 | fzf --height ~70% --border --padding 1 --margin 1\n  seq 10 | fzf --height ~70% --border --padding 1 --margin 1\n  seq 100 | fzf --height ~70% --border --padding 1 --margin 1\n  ```\n    - There are a few limitations\n        - Not compatible with percent top/bottom margin/padding\n          ```sh\n          # This is not allowed (top/bottom margin in percent value)\n          fzf --height ~50% --border --margin 5%,10%\n\n          # This is allowed (top/bottom margin in fixed value)\n          fzf --height ~50% --border --margin 2,10%\n          ```\n        - fzf will not start until it can determine the right height for the input\n          ```sh\n          # fzf will open immediately\n          (sleep 2; seq 10) | fzf --height 50%\n\n          # fzf will open after 2 seconds\n          (sleep 2; seq 10) | fzf --height ~50%\n          (sleep 2; seq 1000) | fzf --height ~50%\n          ```\n- Fixed tcell renderer used to render full-screen fzf on Windows\n- ~~`--no-clear` is deprecated. Use `reload` action instead.~~\n\n0.33.0\n------\n- Added `--scheme=[default|path|history]` option to choose scoring scheme\n    - (Experimental)\n    - We updated the scoring algorithm in 0.32.0, however we have learned that\n      this new scheme (`default`) is not always giving the optimal result\n    - `path`: Additional bonus point is only given to the characters after\n      path separator. You might want to choose this scheme if you have many\n      files with spaces in their paths.\n    - `history`: No additional bonus points are given so that we give more\n      weight to the chronological ordering. This is equivalent to the scoring\n      scheme before 0.32.0. This also sets `--tiebreak=index`.\n- ANSI color sequences with colon delimiters are now supported.\n  ```sh\n  printf \"\\e[38;5;208mOption 1\\e[m\\nOption 2\" | fzf --ansi\n  printf \"\\e[38:5:208mOption 1\\e[m\\nOption 2\" | fzf --ansi\n  ```\n- Support `border-{up,down}` as the synonyms for `border-{top,bottom}` in\n  `--preview-window`\n- Added support for ANSI `strikethrough`\n  ```sh\n  printf \"\\e[9mdeleted\" | fzf --ansi\n  fzf --color fg+:strikethrough\n  ```\n\n0.32.1\n------\n- Fixed incorrect ordering of `--tiebreak=chunk`\n- fzf-tmux will show fzf border instead of tmux popup border (requires tmux 3.3)\n  ```sh\n  fzf-tmux -p70%\n  fzf-tmux -p70% --color=border:bright-red\n  fzf-tmux -p100%,60% --color=border:bright-yellow --border=horizontal --padding 1,5 --margin 1,0\n  fzf-tmux -p70%,100% --color=border:bright-green --border=vertical\n\n  # Key bindings (CTRL-T, CTRL-R, ALT-C) will use these options\n  export FZF_TMUX_OPTS='-p100%,60% --color=border:green --border=horizontal --padding 1,5 --margin 1,0'\n  ```\n\n0.32.0\n------\n- Updated the scoring algorithm\n    - Different bonus points to different categories of word boundaries\n      (listed higher to lower bonus point)\n        - Word after whitespace characters or beginning of the string\n        - Word after common delimiter characters (`/,:;|`)\n        - Word after other non-word characters\n      ```sh\n      # foo/bar.sh` is preferred over `foo-bar.sh` on `bar`\n      fzf --query=bar --height=4 << EOF\n      foo-bar.sh\n      foo/bar.sh\n      EOF\n      ```\n- Added a new tiebreak `chunk`\n    - Favors the line with shorter matched chunk. A chunk is a set of\n      consecutive non-whitespace characters.\n    - Unlike the default `length`, this scheme works well with tabular input\n      ```sh\n      # length prefers item #1, because the whole line is shorter,\n      # chunk prefers item #2, because the matched chunk (\"foo\") is shorter\n      fzf --height=6 --header-lines=2 --tiebreak=chunk --reverse --query=fo << \"EOF\"\n      N | Field1 | Field2 | Field3\n      - | ------ | ------ | ------\n      1 | hello  | foobar | baz\n      2 | world  | foo    | bazbaz\n      EOF\n      ```\n    - If the input does not contain any spaces, `chunk` is equivalent to\n      `length`. But we're not going to set it as the default because it is\n      computationally more expensive.\n- Bug fixes and improvements\n\n0.31.0\n------\n- Added support for an alternative preview window layout that is activated\n  when the size of the preview window is smaller than a certain threshold.\n  ```sh\n  # If the width of the preview window is smaller than 50 columns,\n  # it will be displayed above the search window.\n  fzf --preview 'cat {}' --preview-window 'right,50%,border-left,<50(up,30%,border-bottom)'\n\n  # Or you can just hide it like so\n  fzf --preview 'cat {}' --preview-window '<50(hidden)'\n  ```\n- fzf now uses SGR mouse mode to properly support mouse on larger terminals\n- You can now use characters that do not satisfy `unicode.IsGraphic` constraint\n  for `--marker`, `--pointer`, and `--ellipsis`. Allows Nerd Fonts and stuff.\n  Use at your own risk.\n- Bug fixes and improvements\n- Shell extension\n    - `kill` completion now requires trigger sequence (`**`) for consistency\n\n0.30.0\n------\n- Fixed cursor flickering over the screen by hiding it during rendering\n- Added `--ellipsis` option. You can take advantage of it to make fzf\n  effectively search non-visible parts of the item.\n  ```sh\n  # Search against hidden line numbers on the far right\n  nl /usr/share/dict/words                  |\n    awk '{printf \"%s%1000s\\n\", $2, $1}'     |\n    fzf --nth=-1 --no-hscroll --ellipsis='' |\n    awk '{print $2}'\n  ```\n- Added `rebind` action for restoring bindings after `unbind`\n- Bug fixes and improvements\n\n0.29.0\n------\n- Added `change-preview(...)` action to change the `--preview` command\n    - cf. `preview(...)` is a one-off action that doesn't change the default\n      preview command\n- Added `change-preview-window(...)` action\n    - You can rotate through the different options separated by `|`\n      ```sh\n      fzf --preview 'cat {}' --preview-window right:40% \\\n          --bind 'ctrl-/:change-preview-window(right,70%|down,40%,border-top|hidden|)'\n      ```\n- Fixed rendering of the prompt line when overflow occurs with `--info=inline`\n\n0.28.0\n------\n- Added `--header-first` option to print header before the prompt line\n  ```sh\n  fzf --header $'Welcome to fzf\\n▔▔▔▔▔▔▔▔▔▔▔▔▔▔' --reverse --height 30% --border --header-first\n  ```\n- Added `--scroll-off=LINES` option (similar to `scrolloff` option of Vim)\n    - You can set it to a very large number so that the cursor stays in the\n      middle of the screen while scrolling\n      ```sh\n      fzf --scroll-off=5\n      fzf --scroll-off=999\n      ```\n- Fixed bug where preview window is not updated on `reload` (#2644)\n- fzf on Windows will also use `$SHELL` to execute external programs\n    - See #2638 and #2647\n    - Thanks to @rashil2000, @vovcacik, and @janlazo\n\n0.27.3\n------\n- Preview window is `hidden` by default when there are `preview` bindings but\n  `--preview` command is not given\n- Fixed bug where `{n}` is not properly reset on `reload`\n- Fixed bug where spinner is not displayed on `reload`\n- Enhancements in tcell renderer for Windows (#2616)\n- Vim plugin\n    - `sinklist` is added as a synonym to `sink*` so that it's easier to add\n      a function to a spec dictionary\n      ```vim\n      let spec = { 'source': 'ls', 'options': ['--multi', '--preview', 'cat {}'] }\n      function spec.sinklist(matches)\n        echom string(a:matches)\n      endfunction\n\n      call fzf#run(fzf#wrap(spec))\n      ```\n    - Vim 7 compatibility\n\n0.27.2\n------\n- 16 base ANSI colors can be specified by their names\n  ```sh\n  fzf --color fg:3,fg+:11\n  fzf --color fg:yellow,fg+:bright-yellow\n  ```\n- Fix bug where `--read0` not properly displaying long lines\n\n0.27.1\n------\n- Added `unbind` action. In the following Ripgrep launcher example, you can\n  use `unbind(reload)` to switch to fzf-only filtering mode.\n    - See https://github.com/junegunn/fzf/blob/master/ADVANCED.md#switching-to-fzf-only-search-mode\n- Vim plugin\n    - Vim plugin will stop immediately even when the source command hasn't finished\n      ```vim\n      \" fzf will read the stream file while allowing other processes to append to it\n      call fzf#run({'source': 'cat /dev/null > /tmp/stream; tail -f /tmp/stream'})\n      ```\n    - It is now possible to open popup window relative to the current window\n      ```vim\n      let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }\n      ```\n\n0.27.0\n------\n- More border options for `--preview-window`\n  ```sh\n  fzf --preview 'cat {}' --preview-window border-left\n  fzf --preview 'cat {}' --preview-window border-left --border horizontal\n  fzf --preview 'cat {}' --preview-window top:border-bottom\n  fzf --preview 'cat {}' --preview-window top:border-horizontal\n  ```\n- Automatically set `/dev/tty` as STDIN on execute action\n  ```sh\n  # Redirect /dev/tty to suppress \"Vim: Warning: Input is not from a terminal\"\n  # ls | fzf --bind \"enter:execute(vim {} < /dev/tty)\"\n\n  # \"< /dev/tty\" part is no longer needed\n  ls | fzf --bind \"enter:execute(vim {})\"\n  ```\n- Bug fixes and improvements\n- Signed and notarized macOS binaries\n  (Huge thanks to [BACKERS.md](https://github.com/junegunn/junegunn/blob/main/BACKERS.md)!)\n\n0.26.0\n------\n- Added support for fixed header in preview window\n  ```sh\n  # Display top 3 lines as the fixed header\n  fzf --preview 'bat --style=header,grid --color=always {}' --preview-window '~3'\n  ```\n- More advanced preview offset expression to better support the fixed header\n  ```sh\n  # Preview with bat, matching line in the middle of the window below\n  # the fixed header of the top 3 lines\n  #\n  #   ~3    Top 3 lines as the fixed header\n  #   +{2}  Base scroll offset extracted from the second field\n  #   +3    Extra offset to compensate for the 3-line header\n  #   /2    Put in the middle of the preview area\n  #\n  git grep --line-number '' |\n    fzf --delimiter : \\\n        --preview 'bat --style=full --color=always --highlight-line {2} {1}' \\\n        --preview-window '~3:+{2}+3/2'\n  ```\n- Added `select` and `deselect` action for unconditionally selecting or\n  deselecting a single item in `--multi` mode. Complements `toggle` action.\n- Significant performance improvement in ANSI code processing\n- Bug fixes and improvements\n- Built with Go 1.16\n\n0.25.1\n------\n- Added `close` action\n    - Close preview window if open, abort fzf otherwise\n- Bug fixes and improvements\n\n0.25.0\n------\n- Text attributes set in `--color` are not reset when fzf sees another\n  `--color` option for the same element. This allows you to put custom text\n  attributes in your `$FZF_DEFAULT_OPTS` and still have those attributes\n  even when you override the colors.\n\n  ```sh\n  # Default colors and attributes\n  fzf\n\n  # Apply custom text attributes\n  export FZF_DEFAULT_OPTS='--color fg+:italic,hl:-1:underline,hl+:-1:reverse:underline'\n\n  fzf\n\n  # Different colors but you still have the attributes\n  fzf --color hl:176,hl+:177\n\n  # Write \"regular\" if you want to clear the attributes\n  fzf --color hl:176:regular,hl+:177:regular\n  ```\n- Renamed `--phony` to `--disabled`\n- You can dynamically enable and disable the search functionality using the\n  new `enable-search`, `disable-search`, and `toggle-search` actions\n- You can assign a different color to the query string for when search is disabled\n  ```sh\n  fzf --color query:#ffffff,disabled:#999999 --bind space:toggle-search\n  ```\n- Added `last` action to move the cursor to the last match\n    - The opposite action `top` is renamed to `first`, but `top` is still\n      recognized as a synonym for backward compatibility\n- Added `preview-top` and `preview-bottom` actions\n- Extended support for alt key chords: alt with any case-sensitive single character\n  ```sh\n  fzf --bind alt-,:first,alt-.:last\n  ```\n\n0.24.4\n------\n- Added `--preview-window` option `follow`\n  ```sh\n  # Preview window will automatically scroll to the bottom\n  fzf --preview-window follow --preview 'for i in $(seq 100000); do\n    echo \"$i\"\n    sleep 0.01\n    (( i % 300 == 0 )) && printf \"\\033[2J\"\n  done'\n  ```\n- Added `change-prompt` action\n  ```sh\n  fzf --prompt 'foo> ' --bind $'a:change-prompt:\\x1b[31mbar> '\n  ```\n- Bug fixes and improvements\n\n0.24.3\n------\n- Added `--padding` option\n  ```sh\n  fzf --margin 5% --padding 5% --border --preview 'cat {}' \\\n      --color bg:#222222,preview-bg:#333333\n  ```\n\n0.24.2\n------\n- Bug fixes and improvements\n\n0.24.1\n------\n- Fixed broken `--color=[bw|no]` option\n\n0.24.0\n------\n- Real-time rendering of preview window\n  ```sh\n  # fzf can render preview window before the command completes\n  fzf --preview 'sleep 1; for i in $(seq 100); do echo $i; sleep 0.01; done'\n\n  # Preview window can process ANSI escape sequence (CSI 2 J) for clearing the display\n  fzf --preview 'for i in $(seq 100000); do\n    (( i % 200 == 0 )) && printf \"\\033[2J\"\n    echo \"$i\"\n    sleep 0.01\n  done'\n  ```\n- Updated `--color` option to support text styles\n  - `regular` / `bold` / `dim` / `underline` / `italic` / `reverse` / `blink`\n    ```sh\n    # * Set -1 to keep the original color\n    # * Multiple style attributes can be combined\n    # * Italic style may not be supported by some terminals\n    rg --line-number --no-heading --color=always \"\" |\n      fzf --ansi --prompt \"Rg: \" \\\n          --color fg+:italic,hl:underline:-1,hl+:italic:underline:reverse:-1 \\\n          --color pointer:reverse,prompt:reverse,input:159 \\\n          --pointer '  '\n    ```\n- More `--border` options\n  - `vertical`, `top`, `bottom`, `left`, `right`\n  - Updated Vim plugin to use these new `--border` options\n    ```vim\n    \" Floating popup window in the center of the screen\n    let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n\n    \" Popup with 100% width\n    let g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.5, 'border': 'horizontal' } }\n\n    \" Popup with 100% height\n    let g:fzf_layout = { 'window': { 'width': 0.5, 'height': 1.0, 'border': 'vertical' } }\n\n    \" Similar to 'down' layout, but it uses a popup window and doesn't affect the window layout\n    let g:fzf_layout = { 'window': { 'width': 1.0, 'height': 0.5, 'yoffset': 1.0, 'border': 'top' } }\n\n    \" Opens on the right;\n    \"   'highlight' option is still supported but it will only take the foreground color of the group\n    let g:fzf_layout = { 'window': { 'width': 0.5, 'height': 1.0, 'xoffset': 1.0, 'border': 'left', 'highlight': 'Comment' } }\n    ```\n- To indicate if `--multi` mode is enabled, fzf will print the number of\n  selected items even when no item is selected\n  ```sh\n  seq 100 | fzf\n    # 100/100\n  seq 100 | fzf --multi\n    # 100/100 (0)\n  seq 100 | fzf --multi 5\n    # 100/100 (0/5)\n  ```\n- Since 0.24.0, release binaries will be uploaded to https://github.com/junegunn/fzf/releases\n\n0.23.1\n------\n- Added `--preview-window` options for disabling flags\n    - `nocycle`\n    - `nohidden`\n    - `nowrap`\n    - `default`\n- Built with Go 1.14.9 due to performance regression\n    - https://github.com/golang/go/issues/40727\n\n0.23.0\n------\n- Support preview scroll offset relative to window height\n  ```sh\n  git grep --line-number '' |\n    fzf --delimiter : \\\n        --preview 'bat --style=numbers --color=always --highlight-line {2} {1}' \\\n        --preview-window +{2}-/2\n  ```\n- Added `--preview-window` option for sharp edges (`--preview-window sharp`)\n- Added `--preview-window` option for cyclic scrolling (`--preview-window cycle`)\n- Reduced vertical padding around the preview window when `--preview-window\n  noborder` is used\n- Added actions for preview window\n    - `preview-half-page-up`\n    - `preview-half-page-down`\n- Vim\n    - Popup width and height can be given in absolute integer values\n    - Added `fzf#exec()` function for getting the path of fzf executable\n        - It also downloads the latest binary if it's not available by running\n          `./install --bin`\n- Built with Go 1.15.2\n    - We no longer provide 32-bit binaries\n\n0.22.0\n------\n- Added more options for `--bind`\n    - `backward-eof` event\n      ```sh\n      # Aborts when you delete backward when the query prompt is already empty\n      fzf --bind backward-eof:abort\n      ```\n    - `refresh-preview` action\n      ```sh\n      # Rerun preview command when you hit '?'\n      fzf --preview 'echo $RANDOM' --bind '?:refresh-preview'\n      ```\n    - `preview` action\n      ```sh\n      # Default preview command with an extra preview binding\n      fzf --preview 'file {}' --bind '?:preview:cat {}'\n\n      # A preview binding with no default preview command\n      # (Preview window is initially empty)\n      fzf --bind '?:preview:cat {}'\n\n      # Preview window hidden by default, it appears when you first hit '?'\n      fzf --bind '?:preview:cat {}' --preview-window hidden\n      ```\n- Added preview window option for setting the initial scroll offset\n  ```sh\n  # Initial scroll offset is set to the line number of each line of\n  # git grep output *minus* 5 lines\n  git grep --line-number '' |\n    fzf --delimiter : --preview 'nl {1}' --preview-window +{2}-5\n  ```\n- Added support for ANSI colors in `--prompt` string\n- Smart match of accented characters\n    - An unaccented character in the query string will match both accented and\n      unaccented characters, while an accented character will only match\n      accented characters. This is similar to how \"smart-case\" match works.\n- Vim plugin\n    - `tmux` layout option for using fzf-tmux\n      ```vim\n      let g:fzf_layout = { 'tmux': '-p90%,60%' }\n      ```\n\n0.21.1\n------\n- Shell extension\n    - CTRL-R will remove duplicate commands\n- fzf-tmux\n    - Supports tmux popup window (require tmux 3.2 or above)\n        - ```sh\n          # 50% width and height\n          fzf-tmux -p\n\n          # 80% width and height\n          fzf-tmux -p 80%\n\n          # 80% width and 40% height\n          fzf-tmux -p 80%,40%\n          fzf-tmux -w 80% -h 40%\n\n          # Window position\n          fzf-tmux -w 80% -h 40% -x 0 -y 0\n          fzf-tmux -w 80% -h 40% -y 1000\n\n          # Write ordinary fzf options after --\n          fzf-tmux -p -- --reverse --info=inline --margin 2,4 --border\n          ```\n        - On macOS, you can build the latest tmux from the source with\n          `brew install tmux --HEAD`\n- Bug fixes\n    - Fixed Windows file traversal not to include directories\n    - Fixed ANSI colors with `--keep-right`\n    - Fixed _fzf_complete for zsh\n- Built with Go 1.14.1\n\n0.21.0\n------\n- `--height` option is now available on Windows as well (@kelleyma49)\n- Added `--pointer` and `--marker` options\n- Added `--keep-right` option that keeps the right end of the line visible\n  when it's too long\n- Style changes\n    - `--border` will now print border with rounded corners around the\n      finder instead of printing horizontal lines above and below it.\n      The previous style is available via `--border=horizontal`\n    - Unicode spinner\n- More keys and actions for `--bind`\n- Added PowerShell script for downloading Windows binary\n- Vim plugin: Built-in floating windows support\n  ```vim\n  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n  ```\n- bash: Various improvements in key bindings (CTRL-T, CTRL-R, ALT-C)\n    - CTRL-R will start with the current command-line as the initial query\n    - CTRL-R properly supports multi-line commands\n- Fuzzy completion API changed\n  ```sh\n  # Previous: fzf arguments given as a single string argument\n  # - This style is still supported, but it's deprecated\n  _fzf_complete \"--multi --reverse --prompt=\\\"doge> \\\"\" \"$@\" < <(\n    echo foo\n  )\n\n  # New API: multiple fzf arguments before \"--\"\n  # - Easier to write multiple options\n  _fzf_complete --multi --reverse --prompt=\"doge> \" -- \"$@\" < <(\n    echo foo\n  )\n  ```\n- Bug fixes and improvements\n\n0.20.0\n------\n- Customizable preview window color (`preview-fg` and `preview-bg` for `--color`)\n  ```sh\n  fzf --preview 'cat {}' \\\n      --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899' \\\n      --border --height 20 --layout reverse --info inline\n  ```\n- Removed the immediate flicking of the screen on `reload` action.\n  ```sh\n  : | fzf --bind 'change:reload:seq {q}' --phony\n  ```\n- Added `clear-query` and `clear-selection` actions for `--bind`\n- It is now possible to split a composite bind action over multiple `--bind`\n  expressions by prefixing the later ones with `+`.\n  ```sh\n  fzf --bind 'ctrl-a:up+up'\n\n  # Can be now written as\n  fzf --bind 'ctrl-a:up' --bind 'ctrl-a:+up'\n\n  # This is useful when you need to write special execute/reload form (i.e. `execute:...`)\n  # to avoid parse errors and add more actions to the same key\n  fzf --multi --bind 'ctrl-l:select-all+execute:less {+f}' --bind 'ctrl-l:+deselect-all'\n  ```\n- Fixed parse error of `--bind` expression where concatenated execute/reload\n  action contains `+` character.\n  ```sh\n  fzf --multi --bind 'ctrl-l:select-all+execute(less {+f})+deselect-all'\n  ```\n- Fixed bugs of reload action\n    - Not triggered when there's no match even when the command doesn't have\n      any placeholder expressions\n    - Screen not properly cleared when `--header-lines` not filled on reload\n\n0.19.0\n------\n\n- Added `--phony` option which completely disables search functionality.\n  Useful when you want to use fzf only as a selector interface. See below.\n- Added \"reload\" action for dynamically updating the input list without\n  restarting fzf. See https://github.com/junegunn/fzf/issues/1750 to learn\n  more about it.\n  ```sh\n  # Using fzf as the selector interface for ripgrep\n  RG_PREFIX=\"rg --column --line-number --no-heading --color=always --smart-case \"\n  INITIAL_QUERY=\"foo\"\n  FZF_DEFAULT_COMMAND=\"$RG_PREFIX '$INITIAL_QUERY' || true\" \\\n    fzf --bind \"change:reload:$RG_PREFIX {q} || true\" \\\n        --ansi --phony --query \"$INITIAL_QUERY\"\n  ```\n- `--multi` now takes an optional integer argument which indicates the maximum\n  number of items that can be selected\n  ```sh\n  seq 100 | fzf --multi 3 --reverse --height 50%\n  ```\n- If a placeholder expression for `--preview` and `execute` action (and the\n  new `reload` action) contains `f` flag, it is replaced to the\n  path of a temporary file that holds the evaluated list. This is useful\n  when you multi-select a large number of items and the length of the\n  evaluated string may exceed [`ARG_MAX`][argmax].\n  ```sh\n  # Press CTRL-A to select 100K items and see the sum of all the numbers\n  seq 100000 | fzf --multi --bind ctrl-a:select-all \\\n                   --preview \"awk '{sum+=\\$1} END {print sum}' {+f}\"\n  ```\n- `deselect-all` no longer deselects unmatched items. It is now consistent\n  with `select-all` and `toggle-all` in that it only affects matched items.\n- Due to the limitation of bash, fuzzy completion is enabled by default for\n  a fixed set of commands. A helper function for easily setting up fuzzy\n  completion for any command is now provided.\n  ```sh\n  # usage: _fzf_setup_completion path|dir COMMANDS...\n  _fzf_setup_completion path git kubectl\n  ```\n- Info line style can be changed by `--info=STYLE`\n    - `--info=default`\n    - `--info=inline` (same as old `--inline-info`)\n    - `--info=hidden`\n- Preview window border can be disabled by adding `noborder` to\n  `--preview-window`.\n- When you transform the input with `--with-nth`, the trailing white spaces\n  are removed.\n- `ctrl-\\`, `ctrl-]`, `ctrl-^`, and `ctrl-/` can now be used with `--bind`\n- See https://github.com/junegunn/fzf/milestone/15?closed=1 for more details\n\n[argmax]: https://unix.stackexchange.com/questions/120642/what-defines-the-maximum-size-for-a-command-single-argument\n\n0.18.0\n------\n\n- Added placeholder expression for zero-based item index: `{n}` and `{+n}`\n    - `fzf --preview 'echo {n}: {}'`\n- Added color option for the gutter: `--color gutter:-1`\n- Added `--no-unicode` option for drawing borders in non-Unicode, ASCII\n  characters\n- `FZF_PREVIEW_LINES` and `FZF_PREVIEW_COLUMNS` are exported to preview process\n    - fzf still overrides `LINES` and `COLUMNS` as before, but they may be\n      reset by the default shell.\n- Bug fixes and improvements\n    - See https://github.com/junegunn/fzf/milestone/14?closed=1\n- Built with Go 1.12.1\n\n0.17.5\n------\n\n- Bug fixes and improvements\n    - See https://github.com/junegunn/fzf/milestone/13?closed=1\n- Search query longer than the screen width is allowed (up to 300 chars)\n- Built with Go 1.11.1\n\n0.17.4\n------\n\n- Added `--layout` option with a new layout called `reverse-list`.\n    - `--layout=reverse` is a synonym for `--reverse`\n    - `--layout=default` is a synonym for `--no-reverse`\n- Preview window will be updated even when there is no match for the query\n  if any of the placeholder expressions (e.g. `{q}`, `{+}`) evaluates to\n  a non-empty string.\n- More keys for binding: `shift-{up,down}`, `alt-{up,down,left,right}`\n- fzf can now start even when `/dev/tty` is not available by making an\n  educated guess.\n- Updated the default command for Windows.\n- Fixes and improvements on bash/zsh completion\n- install and uninstall scripts now supports generating files under\n  `XDG_CONFIG_HOME` on `--xdg` flag.\n\nSee https://github.com/junegunn/fzf/milestone/12?closed=1 for the full list of\nchanges.\n\n0.17.3\n------\n- `$LINES` and `$COLUMNS` are exported to preview command so that the command\n  knows the exact size of the preview window.\n- Better error messages when the default command or `$FZF_DEFAULT_COMMAND`\n  fails.\n- Reverted #1061 to avoid having duplicate entries in the list when find\n  command detected a file system loop (#1120). The default command now\n  requires that find supports `-fstype` option.\n- fzf now distinguishes mouse left click and right click (#1130)\n    - Right click is now bound to `toggle` action by default\n    - `--bind` understands `left-click` and `right-click`\n- Added `replace-query` action (#1137)\n    - Replaces query string with the current selection\n- Added `accept-non-empty` action (#1162)\n    - Same as accept, except that it prevents fzf from exiting without any\n      selection\n\n0.17.1\n------\n\n- Fixed custom background color of preview window (#1046)\n- Fixed background color issues of Windows binary\n- Fixed Windows binary to execute command using cmd.exe with no parsing and\n  escaping (#1072)\n- Added support for `window` layout on Vim 8 using Vim 8 terminal (#1055)\n\n0.17.0-2\n--------\n\nA maintenance release for auxiliary scripts. fzf binaries are not updated.\n\n- Experimental support for the builtin terminal of Vim 8\n    - fzf can now run inside GVim\n- Updated Vim plugin to better handle `&shell` issue on fish\n- Fixed a bug of fzf-tmux where invalid output is generated\n- Fixed fzf-tmux to work even when `tput` does not work\n\n0.17.0\n------\n- Performance optimization\n- One can match literal spaces in extended-search mode with a space prepended\n  by a backslash.\n- `--expect` is now additive and can be specified multiple times.\n\n0.16.11\n-------\n- Performance optimization\n- Fixed missing preview update\n\n0.16.10\n-------\n- Fixed invalid handling of ANSI colors in preview window\n- Further improved `--ansi` performance\n\n0.16.9\n------\n- Memory and performance optimization\n    - Around 20% performance improvement for general use cases\n    - Up to 5x faster processing of `--ansi`\n    - Up to 50% reduction of memory usage\n- Bug fixes and usability improvements\n    - Fixed handling of bracketed paste mode\n    - [ERROR] on info line when the default command failed\n    - More efficient rendering of preview window\n    - `--no-clear` updated for repetitive relaunching scenarios\n\n0.16.8\n------\n- New `change` event and `top` action for `--bind`\n    - `fzf --bind change:top`\n        - Move cursor to the top result whenever the query string is changed\n    - `fzf --bind 'ctrl-w:unix-word-rubout+top,ctrl-u:unix-line-discard+top'`\n        - `top` combined with `unix-word-rubout` and `unix-line-discard`\n- Fixed inconsistent tiebreak scores when `--nth` is used\n- Proper display of tab characters in `--prompt`\n- Fixed not to `--cycle` on page-up/page-down to prevent overshoot\n- Git revision in `--version` output\n- Basic support for Cygwin environment\n- Many fixes in Vim plugin on Windows/Cygwin (thanks to @janlazo)\n\n0.16.7\n------\n- Added support for `ctrl-alt-[a-z]` key chords\n- CTRL-Z (SIGSTOP) now works with fzf\n- fzf will export `$FZF_PREVIEW_WINDOW` so that the scripts can use it\n- Bug fixes and improvements in Vim plugin and shell extensions\n\n0.16.6\n------\n- Minor bug fixes and improvements\n- Added `--no-clear` option for scripting purposes\n\n0.16.5\n------\n- Minor bug fixes\n- Added `toggle-preview-wrap` action\n- Built with Go 1.8\n\n0.16.4\n------\n- Added `--border` option to draw border above and below the finder\n- Bug fixes and improvements\n\n0.16.3\n------\n- Fixed a bug where fzf incorrectly display the lines when straddling tab\n  characters are trimmed\n- Placeholder expression used in `--preview` and `execute` action can\n  optionally take `+` flag to be used with multiple selections\n    - e.g. `git log --oneline | fzf --multi --preview 'git show {+1}'`\n- Added `execute-silent` action for executing a command silently without\n  switching to the alternate screen. This is useful when the process is\n  short-lived and you're not interested in its output.\n    - e.g. `fzf --bind 'ctrl-y:execute!(echo -n {} | pbcopy)'`\n- `ctrl-space` is allowed in `--bind`\n\n0.16.2\n------\n- Dropped ncurses dependency\n- Binaries for freebsd, openbsd, arm5, arm6, arm7, and arm8\n- Official 24-bit color support\n- Added support for composite actions in `--bind`. Multiple actions can be\n  chained using `+` separator.\n    - e.g. `fzf --bind 'ctrl-y:execute(echo -n {} | pbcopy)+abort'`\n- `--preview-window` with size 0 is allowed. This is used to make fzf execute\n  preview command in the background without displaying the result.\n- Minor bug fixes and improvements\n\n0.16.1\n------\n- Fixed `--height` option to properly fill the window with the background\n  color\n- Added `half-page-up` and `half-page-down` actions\n- Added `-L` flag to the default find command\n\n0.16.0\n------\n- *Added `--height HEIGHT[%]` option*\n    - fzf can now display finder without occupying the full screen\n- Preview window will truncate long lines by default. Line wrap can be enabled\n  by `:wrap` flag in `--preview-window`.\n- Latin script letters will be normalized before matching so that it's easier\n  to match against accented letters. e.g. `sodanco` can match `Só Danço Samba`.\n    - Normalization can be disabled via `--literal`\n- Added `--filepath-word` to make word-wise movements/actions (`alt-b`,\n  `alt-f`, `alt-bs`, `alt-d`) respect path separators\n\n0.15.9\n------\n- Fixed rendering glitches introduced in 0.15.8\n- The default escape delay is reduced to 50ms and is configurable via\n  `$ESCDELAY`\n- Scroll indicator at the top-right corner of the preview window is always\n  displayed when there's overflow\n- Can now be built with ncurses 6 or tcell to support extra features\n    - *ncurses 6*\n        - Supports more than 256 color pairs\n        - Supports italics\n    - *tcell*\n        - 24-bit color support\n    - See https://github.com/junegunn/fzf/blob/master/BUILD.md\n\n0.15.8\n------\n- Updated ANSI processor to handle more VT-100 escape sequences\n- Added `--no-bold` (and `--bold`) option\n- Improved escape sequence processing for WSL\n- Added support for `alt-[0-9]`, `f11`, and `f12` for `--bind` and `--expect`\n\n0.15.7\n------\n- Fixed panic when color is disabled and header lines contain ANSI colors\n\n0.15.6\n------\n- Windows binaries! (@kelleyma49)\n- Fixed the bug where header lines are cleared when preview window is toggled\n- Fixed not to display ^N and ^O on screen\n- Fixed cursor keys (or any key sequence that starts with ESC) on WSL by\n  making fzf wait for additional keystrokes after ESC for up to 100ms\n\n0.15.5\n------\n- Setting foreground color will no longer set background color to black\n    - e.g. `fzf --color fg:153`\n- `--tiebreak=end` will consider relative position instead of absolute distance\n- Updated `fzf#wrap` function to respect `g:fzf_colors`\n\n0.15.4\n------\n- Added support for range expression in preview and execute action\n    - e.g. `ls -l | fzf --preview=\"echo user={3} when={-4..-2}; cat {-1}\" --header-lines=1`\n    - `{q}` will be replaced to the single-quoted string of the current query\n- Fixed to properly handle unicode whitespace characters\n- Display scroll indicator in preview window\n- Inverse search term will use exact matcher by default\n    - This is a breaking change, but I believe it makes much more sense. It is\n      almost impossible to predict which entries will be filtered out due to\n      a fuzzy inverse term. You can still perform inverse-fuzzy-match by\n      prepending `!'` to the term.\n\n0.15.3\n------\n- Added support for more ANSI attributes: dim, underline, blink, and reverse\n- Fixed race condition in `toggle-preview`\n\n0.15.2\n------\n- Preview window is now scrollable\n    - With mouse scroll or with bindable actions\n        - `preview-up`\n        - `preview-down`\n        - `preview-page-up`\n        - `preview-page-down`\n- Updated ANSI processor to support high intensity colors and ignore\n  some VT100-related escape sequences\n\n0.15.1\n------\n- Fixed panic when the pattern occurs after 2^15-th column\n- Fixed rendering delay when displaying extremely long lines\n\n0.15.0\n------\n- Improved fuzzy search algorithm\n    - Added `--algo=[v1|v2]` option so one can still choose the old algorithm\n      which values the search performance over the quality of the result\n- Advanced scoring criteria\n- `--read0` to read input delimited by ASCII NUL character\n- `--print0` to print output delimited by ASCII NUL character\n\n0.13.5\n------\n- Memory and performance optimization\n    - Up to 2x performance with half the amount of memory\n\n0.13.4\n------\n- Performance optimization\n    - Memory footprint for ascii string is reduced by 60%\n    - 15 to 20% improvement of query performance\n    - Up to 45% better performance of `--nth` with non-regex delimiters\n- Fixed invalid handling of `hidden` property of `--preview-window`\n\n0.13.3\n------\n- Fixed duplicate rendering of the last line in preview window\n\n0.13.2\n------\n- Fixed race condition where preview window is not properly cleared\n\n0.13.1\n------\n- Fixed UI issue with large `--preview` output with many ANSI codes\n\n0.13.0\n------\n- Added preview feature\n    - `--preview CMD`\n    - `--preview-window POS[:SIZE][:hidden]`\n- `{}` in execute action is now replaced to the single-quoted (instead of\n  double-quoted) string of the current line\n- Fixed to ignore control characters for bracketed paste mode\n\n0.12.2\n------\n\n- 256-color capability detection does not require `256` in `$TERM`\n- Added `print-query` action\n- More named keys for binding; <kbd>F1</kbd> ~ <kbd>F10</kbd>,\n  <kbd>ALT-/</kbd>, <kbd>ALT-space</kbd>, and <kbd>ALT-enter</kbd>\n- Added `jump` and `jump-accept` actions that implement [EasyMotion][em]-like\n  movement\n  ![][jump]\n\n[em]: https://github.com/easymotion/vim-easymotion\n[jump]: https://cloud.githubusercontent.com/assets/700826/15367574/b3999dc4-1d64-11e6-85da-28ceeb1a9bc2.png\n\n0.12.1\n------\n\n- Ranking algorithm introduced in 0.12.0 is now universally applied\n- Fixed invalid cache reference in exact mode\n- Fixes and improvements in Vim plugin and shell extensions\n\n0.12.0\n------\n\n- Enhanced ranking algorithm\n- Minor bug fixes\n\n0.11.4\n------\n\n- Added `--hscroll-off=COL` option (default: 10) (#513)\n- Some fixes in Vim plugin and shell extensions\n\n0.11.3\n------\n\n- Graceful exit on SIGTERM (#482)\n- `$SHELL` instead of `sh` for `execute` action and `$FZF_DEFAULT_COMMAND` (#481)\n- Changes in fuzzy completion API\n    - [`_fzf_compgen_{path,dir}`](https://github.com/junegunn/fzf/commit/9617647)\n    - [`_fzf_complete_COMMAND_post`](https://github.com/junegunn/fzf/commit/8206746)\n      for post-processing\n\n0.11.2\n------\n\n- `--tiebreak` now accepts comma-separated list of sort criteria\n    - Each criterion should appear only once in the list\n    - `index` is only allowed at the end of the list\n    - `index` is implicitly appended to the list when not specified\n    - Default is `length` (or equivalently `length,index`)\n- `begin` criterion will ignore leading whitespaces when calculating the index\n- Added `toggle-in` and `toggle-out` actions\n    - Switch direction depending on `--reverse`-ness\n    - `export FZF_DEFAULT_OPTS=\"--bind tab:toggle-out,shift-tab:toggle-in\"`\n- Reduced the initial delay when `--tac` is not given\n    - fzf defers the initial rendering of the screen up to 100ms if the input\n      stream is ongoing to prevent unnecessary redraw during the initial\n      phase. However, 100ms delay is quite noticeable and might give the\n      impression that fzf is not snappy enough. This commit reduces the\n      maximum delay down to 20ms when `--tac` is not specified, in which case\n      the input list quickly fills the entire screen.\n\n0.11.1\n------\n\n- Added `--tabstop=SPACES` option\n\n0.11.0\n------\n\n- Added OR operator for extended-search mode\n- Added `--execute-multi` action\n- Fixed incorrect cursor position when unicode wide characters are used in\n  `--prompt`\n- Fixes and improvements in shell extensions\n\n0.10.9\n------\n\n- Extended-search mode is now enabled by default\n    - `--extended-exact` is deprecated and instead we have `--exact` for\n      orthogonally controlling \"exactness\" of search\n- Fixed not to display non-printable characters\n- Added `double-click` for `--bind` option\n- More robust handling of SIGWINCH\n\n0.10.8\n------\n\n- Fixed panic when trying to set colors after colors are disabled (#370)\n\n0.10.7\n------\n\n- Fixed unserialized interrupt handling during execute action which often\n  caused invalid memory access and crash\n- Changed `--tiebreak=length` (default) to use trimmed length when `--nth` is\n  used\n\n0.10.6\n------\n\n- Replaced `--header-file` with `--header` option\n- `--header` and `--header-lines` can be used together\n- Changed exit status\n    - 0: Okay\n    - 1: No match\n    - 2: Error\n    - 130: Interrupted\n- 64-bit linux binary is statically-linked with ncurses to avoid\n  compatibility issues.\n\n0.10.5\n------\n\n- `'`-prefix to unquote the term in `--extended-exact` mode\n- Backward scan when `--tiebreak=end` is set\n\n0.10.4\n------\n\n- Fixed to remove ANSI code from output when `--with-nth` is set\n\n0.10.3\n------\n\n- Fixed slow performance of `--with-nth` when used with `--delimiter`\n    - Regular expression engine of Golang as of now is very slow, so the fixed\n      version will treat the given delimiter pattern as a plain string instead\n      of a regular expression unless it contains special characters and is\n      a valid regular expression.\n    - Simpler regular expression for delimiter for better performance\n\n0.10.2\n------\n\n### Fixes and improvements\n\n- Improvement in perceived response time of queries\n    - Eager, efficient rune array conversion\n- Graceful exit when failed to initialize ncurses (invalid $TERM)\n- Improved ranking algorithm when `--nth` option is set\n- Changed the default command not to fail when there are files whose names\n  start with dash\n\n0.10.1\n------\n\n### New features\n\n- Added `--margin` option\n- Added options for sticky header\n    - `--header-file`\n    - `--header-lines`\n- Added `cancel` action which clears the input or closes the finder when the\n  input is already empty\n    - e.g. `export FZF_DEFAULT_OPTS=\"--bind esc:cancel\"`\n- Added `delete-char/eof` action to differentiate `CTRL-D` and `DEL`\n\n### Minor improvements/fixes\n\n- Fixed to allow binding colon and comma keys\n- Fixed ANSI processor to handle color regions spanning multiple lines\n\n0.10.0\n------\n\n### New features\n\n- More actions for `--bind`\n    - `select-all`\n    - `deselect-all`\n    - `toggle-all`\n    - `ignore`\n- `execute(...)` action for running arbitrary command without leaving fzf\n    - `fzf --bind \"ctrl-m:execute(less {})\"`\n    - `fzf --bind \"ctrl-t:execute(tmux new-window -d 'vim {}')\"`\n    - If the command contains parentheses, use any of the follows alternative\n      notations to avoid parse errors\n        - `execute[...]`\n        - `execute~...~`\n        - `execute!...!`\n        - `execute@...@`\n        - `execute#...#`\n        - `execute$...$`\n        - `execute%...%`\n        - `execute^...^`\n        - `execute&...&`\n        - `execute*...*`\n        - `execute;...;`\n        - `execute/.../`\n        - `execute|...|`\n        - `execute:...`\n            - This is the special form that frees you from parse errors as it\n              does not expect the closing character\n            - The catch is that it should be the last one in the\n              comma-separated list\n- Added support for optional search history\n    - `--history HISTORY_FILE`\n        - When used, `CTRL-N` and `CTRL-P` are automatically remapped to\n          `next-history` and `previous-history`\n    - `--history-size MAX_ENTRIES` (default: 1000)\n- Cyclic scrolling can be enabled with `--cycle`\n- Fixed the bug where the spinner was not spinning on idle input stream\n    - e.g. `sleep 100 | fzf`\n\n### Minor improvements/fixes\n\n- Added synonyms for key names that can be specified for `--bind`,\n  `--toggle-sort`, and `--expect`\n- Fixed the color of multi-select marker on the current line\n- Fixed to allow `^pattern$` in extended-search mode\n\n\n0.9.13\n------\n\n### New features\n\n- Color customization with the extended `--color` option\n\n### Bug fixes\n\n- Fixed premature termination of Reader in the presence of a long line which\n  is longer than 64KB\n\n0.9.12\n------\n\n### New features\n\n- Added `--bind` option for custom key bindings\n\n### Bug fixes\n\n- Fixed to update \"inline-info\" immediately after terminal resize\n- Fixed ANSI code offset calculation\n\n0.9.11\n------\n\n### New features\n\n- Added `--inline-info` option for saving screen estate (#202)\n     - Useful inside Neovim\n     - e.g. `let $FZF_DEFAULT_OPTS = $FZF_DEFAULT_OPTS.' --inline-info'`\n\n### Bug fixes\n\n- Invalid mutation of input on case conversion (#209)\n- Smart-case for each term in extended-search mode (#208)\n- Fixed double-click result when scroll offset is positive\n\n0.9.10\n------\n\n### Improvements\n\n- Performance optimization\n- Less aggressive memoization to limit memory usage\n\n### New features\n\n- Added color scheme for light background: `--color=light`\n\n0.9.9\n-----\n\n### New features\n\n- Added `--tiebreak` option (#191)\n- Added `--no-hscroll` option (#193)\n- Visual indication of `--toggle-sort` (#194)\n\n0.9.8\n-----\n\n### Bug fixes\n\n- Fixed Unicode case handling (#186)\n- Fixed to terminate on RuneError (#185)\n\n0.9.7\n-----\n\n### New features\n\n- Added `--toggle-sort` option (#173)\n    - `--toggle-sort=ctrl-r` is applied to `CTRL-R` shell extension\n\n### Bug fixes\n\n- Fixed to print empty line if `--expect` is set and fzf is completed by\n  `--select-1` or `--exit-0` (#172)\n- Fixed to allow comma character as an argument to `--expect` option\n\n0.9.6\n-----\n\n### New features\n\n#### Added `--expect` option (#163)\n\nIf you provide a comma-separated list of keys with `--expect` option, fzf will\nallow you to select the match and complete the finder when any of the keys is\npressed. Additionally, fzf will print the name of the key pressed as the first\nline of the output so that your script can decide what to do next based on the\ninformation.\n\n```sh\nfzf --expect=ctrl-v,ctrl-t,alt-s,f1,f2,~,@\n```\n\nThe updated vim plugin uses this option to implement\n[ctrlp](https://github.com/kien/ctrlp.vim)-compatible key bindings.\n\n### Bug fixes\n\n- Fixed to ignore ANSI escape code `\\e[K` (#162)\n\n0.9.5\n-----\n\n### New features\n\n#### Added `--ansi` option (#150)\n\nIf you give `--ansi` option to fzf, fzf will interpret ANSI color codes from\nthe input, display the item with the ANSI colors (true colors are not\nsupported), and strips the codes from the output. This option is off by\ndefault as it entails some overhead.\n\n### Improvements\n\n#### Reduced initial memory footprint (#151)\n\nBy removing unnecessary copy of pointers, fzf will use significantly smaller\namount of memory when it's started. The difference is hugely noticeable when\nthe input is extremely large. (e.g. `locate / | fzf`)\n\n### Bug fixes\n\n- Fixed panic on `--no-sort --filter ''` (#149)\n\n0.9.4\n-----\n\n### New features\n\n#### Added `--tac` option to reverse the order of the input.\n\nOne might argue that this option is unnecessary since we can already put `tac`\nor `tail -r` in the command pipeline to achieve the same result. However, the\nadvantage of `--tac` is that it does not block until the input is complete.\n\n### *Backward incompatible changes*\n\n#### Changed behavior on `--no-sort`\n\n`--no-sort` option will no longer reverse the display order within finder. You\nmay want to use the new `--tac` option with `--no-sort`.\n\n```\nhistory | fzf +s --tac\n```\n\n### Improvements\n\n#### `--filter` will not block when sort is disabled\n\nWhen fzf works in filtering mode (`--filter`) and sort is disabled\n(`--no-sort`), there's no need to block until input is complete. The new\nversion of fzf will print the matches on-the-fly when the following condition\nis met:\n\n    --filter TERM --no-sort [--no-tac --no-sync]\n\nor simply:\n\n    -f TERM +s\n\nThis change removes unnecessary delay in the use cases like the following:\n\n    fzf -f xxx +s | head -5\n\nHowever, in this case, fzf processes the lines sequentially, so it cannot\nutilize multiple cores, and fzf will run slightly slower than the previous\nmode of execution where filtering is done in parallel after the entire input\nis loaded. If the user is concerned about this performance problem, one can\nadd `--sync` option to re-enable buffering.\n\n0.9.3\n-----\n\n### New features\n- Added `--sync` option for multi-staged filtering\n\n### Improvements\n- `--select-1` and `--exit-0` will start finder immediately when the condition\n  cannot be met\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.4931640625,
          "content": "FROM ubuntu:24.04\nRUN apt-get update -y && apt install -y git make golang zsh fish ruby tmux\nRUN gem install --no-document -v 5.22.3 minitest\nRUN echo '. /usr/share/bash-completion/completions/git' >> ~/.bashrc\nRUN echo '. ~/.bashrc' >> ~/.bash_profile\n\n# Do not set default PS1\nRUN rm -f /etc/bash.bashrc\nCOPY . /fzf\nRUN cd /fzf && make install && ./install --all\nENV LANG=C.UTF-8\nCMD [\"bash\", \"-ic\", \"tmux new 'set -o pipefail; ruby /fzf/test/test_go.rb | tee out && touch ok' && cat out && [ -e ok ]\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0595703125,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013-2024 Junegunn Choi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.2236328125,
          "content": "GO             ?= go\nGOOS           ?= $(shell $(GO) env GOOS)\n\nMAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))\nROOT_DIR       := $(shell dirname $(MAKEFILE))\nSOURCES        := $(wildcard *.go src/*.go src/*/*.go shell/*sh man/man1/*.1) $(MAKEFILE)\n\nifdef FZF_VERSION\nVERSION        := $(FZF_VERSION)\nelse\nVERSION        := $(shell git describe --abbrev=0 2> /dev/null | sed \"s/^v//\")\nendif\nifeq ($(VERSION),)\n$(error Not on git repository; cannot determine $$FZF_VERSION)\nendif\nVERSION_TRIM   := $(shell echo $(VERSION) | sed \"s/^v//; s/-.*//\")\nVERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))\n\nifdef FZF_REVISION\nREVISION       := $(FZF_REVISION)\nelse\nREVISION       := $(shell git log -n 1 --pretty=format:%h --abbrev=8 -- $(SOURCES) 2> /dev/null)\nendif\nifeq ($(REVISION),)\n$(error Not on git repository; cannot determine $$FZF_REVISION)\nendif\nBUILD_FLAGS    := -a -ldflags \"-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)\" -tags \"$(TAGS)\" -trimpath\n\nBINARY32       := fzf-$(GOOS)_386\nBINARY64       := fzf-$(GOOS)_amd64\nBINARYS390     := fzf-$(GOOS)_s390x\nBINARYARM5     := fzf-$(GOOS)_arm5\nBINARYARM6     := fzf-$(GOOS)_arm6\nBINARYARM7     := fzf-$(GOOS)_arm7\nBINARYARM8     := fzf-$(GOOS)_arm8\nBINARYPPC64LE  := fzf-$(GOOS)_ppc64le\nBINARYRISCV64  := fzf-$(GOOS)_riscv64\nBINARYLOONG64  := fzf-$(GOOS)_loong64\n\n# https://en.wikipedia.org/wiki/Uname\nUNAME_M := $(shell uname -m)\nifeq ($(UNAME_M),x86_64)\n\tBINARY := $(BINARY64)\nelse ifeq ($(UNAME_M),amd64)\n\tBINARY := $(BINARY64)\nelse ifeq ($(UNAME_M),s390x)\n\tBINARY := $(BINARYS390)\nelse ifeq ($(UNAME_M),i686)\n\tBINARY := $(BINARY32)\nelse ifeq ($(UNAME_M),i386)\n\tBINARY := $(BINARY32)\nelse ifeq ($(UNAME_M),armv5l)\n\tBINARY := $(BINARYARM5)\nelse ifeq ($(UNAME_M),armv6l)\n\tBINARY := $(BINARYARM6)\nelse ifeq ($(UNAME_M),armv7l)\n\tBINARY := $(BINARYARM7)\nelse ifeq ($(UNAME_M),armv8l)\n\t# armv8l is always 32-bit and should implement the armv7 ISA, so\n\t# just use the same filename as for armv7.\n\tBINARY := $(BINARYARM7)\nelse ifeq ($(UNAME_M),arm64)\n\tBINARY := $(BINARYARM8)\nelse ifeq ($(UNAME_M),aarch64)\n\tBINARY := $(BINARYARM8)\nelse ifeq ($(UNAME_M),ppc64le)\n\tBINARY := $(BINARYPPC64LE)\nelse ifeq ($(UNAME_M),riscv64)\n\tBINARY := $(BINARYRISCV64)\nelse ifeq ($(UNAME_M),loongarch64)\n\tBINARY := $(BINARYLOONG64)\nelse\n$(error Build on $(UNAME_M) is not supported, yet.)\nendif\n\nall: target/$(BINARY)\n\ntest: $(SOURCES)\n\tSHELL=/bin/sh GOOS= $(GO) test -v -tags \"$(TAGS)\" \\\n\t\t\t\tgithub.com/junegunn/fzf/src \\\n\t\t\t\tgithub.com/junegunn/fzf/src/algo \\\n\t\t\t\tgithub.com/junegunn/fzf/src/tui \\\n\t\t\t\tgithub.com/junegunn/fzf/src/util\n\nbench:\n\tcd src && SHELL=/bin/sh GOOS= $(GO) test -v -tags \"$(TAGS)\" -run=Bench -bench=. -benchmem\n\nlint: $(SOURCES) test/test_go.rb\n\t[ -z \"$$(gofmt -s -d src)\" ] || (gofmt -s -d src; exit 1)\n\trubocop --require rubocop-minitest --require rubocop-performance\n\ninstall: bin/fzf\n\ngenerate:\n\tPATH=$(PATH):$(GOPATH)/bin $(GO) generate ./...\n\nbuild:\n\tgoreleaser build --clean --snapshot --skip=post-hooks\n\nrelease:\n\t# Make sure that the tests pass and the build works\n\tTAGS=tcell make test\n\tmake test build clean\n\nifndef GITHUB_TOKEN\n\t$(error GITHUB_TOKEN is not defined)\nendif\n\n\t# Check if we are on master branch\nifneq ($(shell git symbolic-ref --short HEAD),master)\n\t$(error Not on master branch)\nendif\n\n\t# Check if version numbers are properly updated\n\tgrep -q ^$(VERSION_REGEX)$$ CHANGELOG.md\n\tgrep -qF '\"fzf $(VERSION_TRIM)\"' man/man1/fzf.1\n\tgrep -qF '\"fzf $(VERSION_TRIM)\"' man/man1/fzf-tmux.1\n\tgrep -qF $(VERSION) install\n\tgrep -qF $(VERSION) install.ps1\n\n\t# Make release note out of CHANGELOG.md\n\tmkdir -p tmp\n\tsed -n '/^$(VERSION_REGEX)$$/,/^[0-9]/p' CHANGELOG.md | tail -r | \\\n\t\tsed '1,/^ *$$/d' | tail -r | sed 1,2d | tee tmp/release-note\n\n\t# Push to temp branch first so that install scripts always works on master branch\n\tgit checkout -B temp master\n\tgit push origin temp --follow-tags --force\n\n\t# Make a GitHub release\n\tgoreleaser --clean --release-notes tmp/release-note\n\n\t# Push to master\n\tgit checkout master\n\tgit push origin master\n\n\t# Delete temp branch\n\tgit push origin --delete temp\n\nclean:\n\t$(RM) -r dist target\n\ntarget/$(BINARY32): $(SOURCES)\n\tGOARCH=386 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARY64): $(SOURCES)\n\tGOARCH=amd64 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYS390): $(SOURCES)\n\tGOARCH=s390x $(GO) build $(BUILD_FLAGS) -o $@\n# https://github.com/golang/go/wiki/GoArm\ntarget/$(BINARYARM5): $(SOURCES)\n\tGOARCH=arm GOARM=5 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYARM6): $(SOURCES)\n\tGOARCH=arm GOARM=6 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYARM7): $(SOURCES)\n\tGOARCH=arm GOARM=7 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYARM8): $(SOURCES)\n\tGOARCH=arm64 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYPPC64LE): $(SOURCES)\n\tGOARCH=ppc64le $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYRISCV64): $(SOURCES)\n\tGOARCH=riscv64 $(GO) build $(BUILD_FLAGS) -o $@\n\ntarget/$(BINARYLOONG64): $(SOURCES)\n\tGOARCH=loong64 $(GO) build $(BUILD_FLAGS) -o $@\n\nbin/fzf: target/$(BINARY) | bin\n\t-rm -f bin/fzf\n\tcp -f target/$(BINARY) bin/fzf\n\ndocker:\n\tdocker build -t fzf-ubuntu .\n\tdocker run -it fzf-ubuntu tmux\n\ndocker-test:\n\tdocker build -t fzf-ubuntu .\n\tdocker run -it fzf-ubuntu\n\nupdate:\n\t$(GO) get -u\n\t$(GO) mod tidy\n\n.PHONY: all generate build release test bench lint install clean docker docker-test update\n"
        },
        {
          "name": "README-VIM.md",
          "type": "blob",
          "size": 17.48046875,
          "content": "FZF Vim integration\n===================\n\nInstallation\n------------\n\nOnce you have fzf installed, you can enable it inside Vim simply by adding the\ndirectory to `&runtimepath` in your Vim configuration file. The path may\ndiffer depending on the package manager.\n\n```vim\n\" If installed using Homebrew\nset rtp+=/usr/local/opt/fzf\n\n\" If installed using Homebrew on Apple Silicon\nset rtp+=/opt/homebrew/opt/fzf\n\n\" If you have cloned fzf on ~/.fzf directory\nset rtp+=~/.fzf\n```\n\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), the same can be\nwritten as:\n\n```vim\n\" If installed using Homebrew\nPlug '/usr/local/opt/fzf'\n\n\" If installed using Homebrew on Apple Silicon\nPlug '/opt/homebrew/opt/fzf'\n\n\" If you have cloned fzf on ~/.fzf directory\nPlug '~/.fzf'\n```\n\nBut if you want the latest Vim plugin file from GitHub rather than the one\nincluded in the package, write:\n\n```vim\nPlug 'junegunn/fzf'\n```\n\nThe Vim plugin will pick up fzf binary available on the system. If fzf is not\nfound on `$PATH`, it will ask you if it should download the latest binary for\nyou.\n\nTo make sure that you have the latest version of the binary, set up\npost-update hook like so:\n\n```vim\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\n```\n\nSummary\n-------\n\nThe Vim plugin of fzf provides two core functions, and `:FZF` command which is\nthe basic file selector command built on top of them.\n\n1. **`fzf#run([spec dict])`**\n    - Starts fzf inside Vim with the given spec\n    - `:call fzf#run({'source': 'ls'})`\n2. **`fzf#wrap([spec dict]) -> (dict)`**\n    - Takes a spec for `fzf#run` and returns an extended version of it with\n      additional options for addressing global preferences (`g:fzf_xxx`)\n        - `:echo fzf#wrap({'source': 'ls'})`\n    - We usually *wrap* a spec with `fzf#wrap` before passing it to `fzf#run`\n        - `:call fzf#run(fzf#wrap({'source': 'ls'}))`\n3. **`:FZF [fzf_options string] [path string]`**\n    - Basic fuzzy file selector\n    - A reference implementation for those who don't want to write VimScript\n      to implement custom commands\n    - If you're looking for more such commands, check out [fzf.vim](https://github.com/junegunn/fzf.vim) project.\n\nThe most important of all is `fzf#run`, but it would be easier to understand\nthe whole if we start off with `:FZF` command.\n\n`:FZF[!]`\n---------\n\n```vim\n\" Look for files under current directory\n:FZF\n\n\" Look for files under your home directory\n:FZF ~\n\n\" With fzf command-line options\n:FZF --reverse --info=inline /tmp\n\n\" Bang version starts fzf in fullscreen mode\n:FZF!\n```\n\nSimilarly to [ctrlp.vim](https://github.com/kien/ctrlp.vim), use enter key,\n`CTRL-T`, `CTRL-X` or `CTRL-V` to open selected files in the current window,\nin new tabs, in horizontal splits, or in vertical splits respectively.\n\nNote that the environment variables `FZF_DEFAULT_COMMAND` and\n`FZF_DEFAULT_OPTS` also apply here.\n\n### Configuration\n\n- `g:fzf_action`\n    - Customizable extra key bindings for opening selected files in different ways\n- `g:fzf_layout`\n    - Determines the size and position of fzf window\n- `g:fzf_colors`\n    - Customizes fzf colors to match the current color scheme\n- `g:fzf_history_dir`\n    - Enables history feature\n\n#### Examples\n\n```vim\n\" This is the default extra key bindings\nlet g:fzf_action = {\n  \\ 'ctrl-t': 'tab split',\n  \\ 'ctrl-x': 'split',\n  \\ 'ctrl-v': 'vsplit' }\n\n\" An action can be a reference to a function that processes selected lines\nfunction! s:build_quickfix_list(lines)\n  call setqflist(map(copy(a:lines), '{ \"filename\": v:val, \"lnum\": 1 }'))\n  copen\n  cc\nendfunction\n\nlet g:fzf_action = {\n  \\ 'ctrl-q': function('s:build_quickfix_list'),\n  \\ 'ctrl-t': 'tab split',\n  \\ 'ctrl-x': 'split',\n  \\ 'ctrl-v': 'vsplit' }\n\n\" Default fzf layout\n\" - Popup window (center of the screen)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n\n\" - Popup window (center of the current window)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }\n\n\" - Popup window (anchored to the bottom of the current window)\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }\n\n\" - down / up / left / right\nlet g:fzf_layout = { 'down': '40%' }\n\n\" - Window using a Vim command\nlet g:fzf_layout = { 'window': 'enew' }\nlet g:fzf_layout = { 'window': '-tabnew' }\nlet g:fzf_layout = { 'window': '10new' }\n\n\" Customize fzf colors to match your color scheme\n\" - fzf#wrap translates this to a set of `--color` options\nlet g:fzf_colors =\n\\ { 'fg':      ['fg', 'Normal'],\n  \\ 'bg':      ['bg', 'Normal'],\n  \\ 'hl':      ['fg', 'Comment'],\n  \\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],\n  \\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],\n  \\ 'hl+':     ['fg', 'Statement'],\n  \\ 'info':    ['fg', 'PreProc'],\n  \\ 'border':  ['fg', 'Ignore'],\n  \\ 'prompt':  ['fg', 'Conditional'],\n  \\ 'pointer': ['fg', 'Exception'],\n  \\ 'marker':  ['fg', 'Keyword'],\n  \\ 'spinner': ['fg', 'Label'],\n  \\ 'header':  ['fg', 'Comment'] }\n\n\" Enable per-command history\n\" - History files will be stored in the specified directory\n\" - When set, CTRL-N and CTRL-P will be bound to 'next-history' and\n\"   'previous-history' instead of 'down' and 'up'.\nlet g:fzf_history_dir = '~/.local/share/fzf-history'\n```\n\n##### Explanation of `g:fzf_colors`\n\n`g:fzf_colors` is a dictionary mapping fzf elements to a color specification\nlist:\n\n    element: [ component, group1 [, group2, ...] ]\n\n- `element` is an fzf element to apply a color to:\n\n  | Element                     | Description                                           |\n  | ---                         | ---                                                   |\n  | `fg`  / `bg`  / `hl`        | Item (foreground / background / highlight)            |\n  | `fg+` / `bg+` / `hl+`       | Current item (foreground / background / highlight)    |\n  | `preview-fg` / `preview-bg` | Preview window text and background                    |\n  | `hl`  / `hl+`               | Highlighted substrings (normal / current)             |\n  | `gutter`                    | Background of the gutter on the left                  |\n  | `pointer`                   | Pointer to the current line (`>`)                     |\n  | `marker`                    | Multi-select marker (`>`)                             |\n  | `border`                    | Border around the window (`--border` and `--preview`) |\n  | `header`                    | Header (`--header` or `--header-lines`)               |\n  | `info`                      | Info line (match counters)                            |\n  | `spinner`                   | Streaming input indicator                             |\n  | `query`                     | Query string                                          |\n  | `disabled`                  | Query string when search is disabled                  |\n  | `prompt`                    | Prompt before query (`> `)                            |\n  | `pointer`                   | Pointer to the current line (`>`)                     |\n\n- `component` specifies the component (`fg` / `bg`) from which to extract the\n  color when considering each of the following highlight groups\n\n- `group1 [, group2, ...]` is a list of highlight groups that are searched (in\n  order) for a matching color definition\n\nFor example, consider the following specification:\n\n```vim\n  'prompt':  ['fg', 'Conditional', 'Comment'],\n```\n\nThis means we color the **prompt**\n- using the `fg` attribute of the `Conditional` if it exists,\n- otherwise use the `fg` attribute of the `Comment` highlight group if it exists,\n- otherwise fall back to the default color settings for the **prompt**.\n\nYou can examine the color option generated according the setting by printing\nthe result of `fzf#wrap()` function like so:\n\n```vim\n:echo fzf#wrap()\n```\n\n`fzf#run`\n---------\n\n`fzf#run()` function is the core of Vim integration. It takes a single\ndictionary argument, *a spec*, and starts fzf process accordingly. At the very\nleast, specify `sink` option to tell what it should do with the selected\nentry.\n\n```vim\ncall fzf#run({'sink': 'e'})\n```\n\nWe haven't specified the `source`, so this is equivalent to starting fzf on\ncommand line without standard input pipe; fzf will traverse the file system\nunder the current directory to get the list of files. (If\n`$FZF_DEFAULT_COMMAND` is set, fzf will use the output of the command\ninstead.) When you select one, it will open it with the sink, `:e` command. If\nyou want to open it in a new tab, you can pass `:tabedit` command instead as\nthe sink.\n\n```vim\ncall fzf#run({'sink': 'tabedit'})\n```\n\nYou can use any shell command as the source to generate the list. The\nfollowing example will list the files managed by git. It's equivalent to\nrunning `git ls-files | fzf` on shell.\n\n```vim\ncall fzf#run({'source': 'git ls-files', 'sink': 'e'})\n```\n\nfzf options can be specified as `options` entry in spec dictionary.\n\n```vim\ncall fzf#run({'sink': 'tabedit', 'options': '--multi --reverse'})\n```\n\nYou can also pass a layout option if you don't want fzf window to take up the\nentire screen.\n\n```vim\n\" up / down / left / right / window are allowed\ncall fzf#run({'source': 'git ls-files', 'sink': 'e', 'left': '40%'})\ncall fzf#run({'source': 'git ls-files', 'sink': 'e', 'window': '30vnew'})\n```\n\n`source` doesn't have to be an external shell command, you can pass a Vim\narray as the source. In the next example, we pass the names of color\nschemes as the source to implement a color scheme selector.\n\n```vim\ncall fzf#run({'source': map(split(globpath(&rtp, 'colors/*.vim')),\n            \\               'fnamemodify(v:val, \":t:r\")'),\n            \\ 'sink': 'colo', 'left': '25%'})\n```\n\nThe following table summarizes the available options.\n\n| Option name                | Type          | Description                                                           |\n| -------------------------- | ------------- | ----------------------------------------------------------------      |\n| `source`                   | string        | External command to generate input to fzf (e.g. `find .`)             |\n| `source`                   | list          | Vim list as input to fzf                                              |\n| `sink`                     | string        | Vim command to handle the selected item (e.g. `e`, `tabe`)            |\n| `sink`                     | funcref       | Function to be called with each selected item                         |\n| `sinklist` (or `sink*`)    | funcref       | Similar to `sink`, but takes the list of output lines at once         |\n| `exit`                     | funcref       | Function to be called with the exit status of fzf (e.g. 0, 1, 2, 130) |\n| `options`                  | string/list   | Options to fzf                                                        |\n| `dir`                      | string        | Working directory                                                     |\n| `up`/`down`/`left`/`right` | number/string | (Layout) Window position and size (e.g. `20`, `50%`)                  |\n| `tmux`                     | string        | (Layout) `--tmux` options (e.g. `90%,70%`)                            |\n| `window` (Vim 8 / Neovim)  | string        | (Layout) Command to open fzf window (e.g. `vertical aboveleft 30new`) |\n| `window` (Vim 8 / Neovim)  | dict          | (Layout) Popup window settings (e.g. `{'width': 0.9, 'height': 0.6}`) |\n\n`options` entry can be either a string or a list. For simple cases, string\nshould suffice, but prefer to use list type to avoid escaping issues.\n\n```vim\ncall fzf#run({'options': '--reverse --prompt \"C:\\\\Program Files\\\\\"'})\ncall fzf#run({'options': ['--reverse', '--prompt', 'C:\\Program Files\\']})\n```\n\nWhen `window` entry is a dictionary, fzf will start in a popup window. The\nfollowing options are allowed:\n\n- Required:\n    - `width` [float range [0 ~ 1]] or [integer range [8 ~ ]]\n    - `height` [float range [0 ~ 1]] or [integer range [4 ~ ]]\n- Optional:\n    - `yoffset` [float default 0.5 range [0 ~ 1]]\n    - `xoffset` [float default 0.5 range [0 ~ 1]]\n    - `relative` [boolean default v:false]\n    - `border` [string default `rounded` (`sharp` on Windows)]: Border style\n        - `rounded` / `sharp` / `horizontal` / `vertical` / `top` / `bottom` / `left` / `right` / `no[ne]`\n\n`fzf#wrap`\n----------\n\nWe have seen that several aspects of `:FZF` command can be configured with\na set of global option variables; different ways to open files\n(`g:fzf_action`), window position and size (`g:fzf_layout`), color palette\n(`g:fzf_colors`), etc.\n\nSo how can we make our custom `fzf#run` calls also respect those variables?\nSimply by *\"wrapping\"* the spec dictionary with `fzf#wrap` before passing it\nto `fzf#run`.\n\n- **`fzf#wrap([name string], [spec dict], [fullscreen bool]) -> (dict)`**\n    - All arguments are optional. Usually we only need to pass a spec dictionary.\n    - `name` is for managing history files. It is ignored if\n      `g:fzf_history_dir` is not defined.\n    - `fullscreen` can be either `0` or `1` (default: 0).\n\n`fzf#wrap` takes a spec and returns an extended version of it (also\na dictionary) with additional options for addressing global preferences. You\ncan examine the return value of it like so:\n\n```vim\necho fzf#wrap({'source': 'ls'})\n```\n\nAfter we *\"wrap\"* our spec, we pass it to `fzf#run`.\n\n```vim\ncall fzf#run(fzf#wrap({'source': 'ls'}))\n```\n\nNow it supports `CTRL-T`, `CTRL-V`, and `CTRL-X` key bindings (configurable\nvia `g:fzf_action`) and it opens fzf window according to `g:fzf_layout`\nsetting.\n\nTo make it easier to use, let's define `LS` command.\n\n```vim\ncommand! LS call fzf#run(fzf#wrap({'source': 'ls'}))\n```\n\nType `:LS` and see how it works.\n\nWe would like to make `:LS!` (bang version) open fzf in fullscreen, just like\n`:FZF!`. Add `-bang` to command definition, and use `<bang>` value to set\nthe last `fullscreen` argument of `fzf#wrap` (see `:help <bang>`).\n\n```vim\n\" On :LS!, <bang> evaluates to '!', and '!0' becomes 1\ncommand! -bang LS call fzf#run(fzf#wrap({'source': 'ls'}, <bang>0))\n```\n\nOur `:LS` command will be much more useful if we can pass a directory argument\nto it, so that something like `:LS /tmp` is possible.\n\n```vim\ncommand! -bang -complete=dir -nargs=? LS\n    \\ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))\n```\n\nLastly, if you have enabled `g:fzf_history_dir`, you might want to assign\na unique name to our command and pass it as the first argument to `fzf#wrap`.\n\n```vim\n\" The query history for this command will be stored as 'ls' inside g:fzf_history_dir.\n\" The name is ignored if g:fzf_history_dir is not defined.\ncommand! -bang -complete=dir -nargs=? LS\n    \\ call fzf#run(fzf#wrap('ls', {'source': 'ls', 'dir': <q-args>}, <bang>0))\n```\n\n### Global options supported by `fzf#wrap`\n\n- `g:fzf_layout`\n- `g:fzf_action`\n    - **Works only when no custom `sink` (or `sinklist`) is provided**\n        - Having custom sink usually means that each entry is not an ordinary\n          file path (e.g. name of color scheme), so we can't blindly apply the\n          same strategy (i.e. `tabedit some-color-scheme` doesn't make sense)\n- `g:fzf_colors`\n- `g:fzf_history_dir`\n\nTips\n----\n\n### fzf inside terminal buffer\n\nOn the latest versions of Vim and Neovim, fzf will start in a terminal buffer.\nIf you find the default ANSI colors to be different, consider configuring the\ncolors using `g:terminal_ansi_colors` in regular Vim or `g:terminal_color_x`\nin Neovim.\n\n```vim\n\" Terminal colors for seoul256 color scheme\nif has('nvim')\n  let g:terminal_color_0 = '#4e4e4e'\n  let g:terminal_color_1 = '#d68787'\n  let g:terminal_color_2 = '#5f865f'\n  let g:terminal_color_3 = '#d8af5f'\n  let g:terminal_color_4 = '#85add4'\n  let g:terminal_color_5 = '#d7afaf'\n  let g:terminal_color_6 = '#87afaf'\n  let g:terminal_color_7 = '#d0d0d0'\n  let g:terminal_color_8 = '#626262'\n  let g:terminal_color_9 = '#d75f87'\n  let g:terminal_color_10 = '#87af87'\n  let g:terminal_color_11 = '#ffd787'\n  let g:terminal_color_12 = '#add4fb'\n  let g:terminal_color_13 = '#ffafaf'\n  let g:terminal_color_14 = '#87d7d7'\n  let g:terminal_color_15 = '#e4e4e4'\nelse\n  let g:terminal_ansi_colors = [\n    \\ '#4e4e4e', '#d68787', '#5f865f', '#d8af5f',\n    \\ '#85add4', '#d7afaf', '#87afaf', '#d0d0d0',\n    \\ '#626262', '#d75f87', '#87af87', '#ffd787',\n    \\ '#add4fb', '#ffafaf', '#87d7d7', '#e4e4e4'\n  \\ ]\nendif\n```\n\n### Starting fzf in a popup window\n\n```vim\n\" Required:\n\" - width [float range [0 ~ 1]] or [integer range [8 ~ ]]\n\" - height [float range [0 ~ 1]] or [integer range [4 ~ ]]\n\"\n\" Optional:\n\" - xoffset [float default 0.5 range [0 ~ 1]]\n\" - yoffset [float default 0.5 range [0 ~ 1]]\n\" - relative [boolean default v:false]\n\" - border [string default 'rounded']: Border style\n\"   - 'rounded' / 'sharp' / 'horizontal' / 'vertical' / 'top' / 'bottom' / 'left' / 'right'\nlet g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\n```\n\nAlternatively, you can make fzf open in a tmux popup window (requires tmux 3.2\nor above) by putting `--tmux` option value in `tmux` key.\n\n```vim\n\" See `--tmux` option in `man fzf` for available options\n\" [center|top|bottom|left|right][,SIZE[%]][,SIZE[%]]\nif exists('$TMUX')\n  let g:fzf_layout = { 'tmux': '90%,70%' }\nelse\n  let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }\nendif\n```\n\n### Hide statusline\n\nWhen fzf starts in a terminal buffer, the file type of the buffer is set to\n`fzf`. So you can set up `FileType fzf` autocmd to customize the settings of\nthe window.\n\nFor example, if you open fzf on the bottom on the screen (e.g. `{'down':\n'40%'}`), you might want to temporarily disable the statusline for a cleaner\nlook.\n\n```vim\nlet g:fzf_layout = { 'down': '30%' }\nautocmd! FileType fzf\nautocmd  FileType fzf set laststatus=0 noshowmode noruler\n  \\| autocmd BufLeave <buffer> set laststatus=2 showmode ruler\n```\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2024 Junegunn Choi\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 39.5390625,
          "content": "<div align=\"center\">\n<sup>Special thanks to:</sup>\n<br>\n<br>\n<a href=\"https://warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=fzf_20240209\">\n  <div>\n    <img src=\"https://raw.githubusercontent.com/junegunn/i/master/warp.png\" width=\"300\" alt=\"Warp\">\n  </div>\n  <b>Warp is a modern, Rust-based terminal with AI built in so you and your team can build great software, faster.</b>\n  <div>\n    <sup>Visit warp.dev to learn more.</sup>\n  </div>\n</a>\n<br>\n<hr>\n</div>\n<br>\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf.png\" height=\"170\" alt=\"fzf - a command-line fuzzy finder\"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)\n===\n\nfzf is a general-purpose command-line fuzzy finder.\n\n<img src=\"https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png\" width=640>\n\nIt's an interactive filter program for any kind of list; files, command\nhistory, processes, hostnames, bookmarks, git commits, etc. It implements\na \"fuzzy\" matching algorithm, so you can quickly type in patterns with omitted\ncharacters and still get the results you want.\n\nHighlights\n----------\n\n- 📦 **Portable** — Distributed as a single binary for easy installation\n- ⚡ **Blazingly fast** — Highly optimized code instantly processes millions of items\n- 🛠️ **Extremely versatile** — Fully customizable via an event-action binding mechanism\n- 🔋 **Batteries included** — Includes integration with bash, zsh, fish, Vim, and Neovim\n\nSponsors ❤️\n-----------\n\nI would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf.\n\nIf you'd like to sponsor this project, please visit https://github.com/sponsors/junegunn.\n\n<!-- sponsors --><a href=\"https://github.com/miyanokomiya\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;miyanokomiya.png\" width=\"60px\" alt=\"User avatar: miyanokomiya\" /></a><a href=\"https://github.com/jonhoo\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jonhoo.png\" width=\"60px\" alt=\"User avatar: Jon Gjengset\" /></a><a href=\"https://github.com/AceofSpades5757\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;AceofSpades5757.png\" width=\"60px\" alt=\"User avatar: Kyle L. Davis\" /></a><a href=\"https://github.com/Frederick888\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Frederick888.png\" width=\"60px\" alt=\"User avatar: Frederick Zhang\" /></a><a href=\"https://github.com/moritzdietz\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;moritzdietz.png\" width=\"60px\" alt=\"User avatar: Moritz Dietz\" /></a><a href=\"https://github.com/mikker\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;mikker.png\" width=\"60px\" alt=\"User avatar: Mikkel Malmberg\" /></a><a href=\"https://github.com/pldubouilh\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pldubouilh.png\" width=\"60px\" alt=\"User avatar: Pierre Dubouilh\" /></a><a href=\"https://github.com/trantor\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;trantor.png\" width=\"60px\" alt=\"User avatar: Fulvio Scapin\" /></a><a href=\"https://github.com/rcorre\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rcorre.png\" width=\"60px\" alt=\"User avatar: Ryan Roden-Corrent\" /></a><a href=\"https://github.com/blissdev\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;blissdev.png\" width=\"60px\" alt=\"User avatar: Jordan Arentsen\" /></a><a href=\"https://github.com/aexvir\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;aexvir.png\" width=\"60px\" alt=\"User avatar: Alex Viscreanu\" /></a><a href=\"https://github.com/dbalatero\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;dbalatero.png\" width=\"60px\" alt=\"User avatar: David Balatero\" /></a><a href=\"https://github.com/moobar\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;moobar.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/benelan\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;benelan.png\" width=\"60px\" alt=\"User avatar: Ben Elan\" /></a><a href=\"https://github.com/pawelduda\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pawelduda.png\" width=\"60px\" alt=\"User avatar: Paweł Duda\" /></a><a href=\"https://github.com/pbwn\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pbwn.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/pyrho\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;pyrho.png\" width=\"60px\" alt=\"User avatar: Damien Rajon\" /></a><a href=\"https://github.com/ArtBIT\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;ArtBIT.png\" width=\"60px\" alt=\"User avatar: ArtBIT\" /></a><a href=\"https://github.com/da-moon\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;da-moon.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/hovissimo\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;hovissimo.png\" width=\"60px\" alt=\"User avatar: Hovis\" /></a><a href=\"https://github.com/Yarden-zamir\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Yarden-zamir.png\" width=\"60px\" alt=\"User avatar: Yarden zamir\" /></a><a href=\"https://github.com/dariusjonda\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;dariusjonda.png\" width=\"60px\" alt=\"User avatar: Darius Jonda\" /></a><a href=\"https://github.com/cristiand391\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;cristiand391.png\" width=\"60px\" alt=\"User avatar: Cristian Dominguez\" /></a><a href=\"https://github.com/eliangcs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;eliangcs.png\" width=\"60px\" alt=\"User avatar: Chang-Hung Liang\" /></a><a href=\"https://github.com/asphaltbuffet\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;asphaltbuffet.png\" width=\"60px\" alt=\"User avatar: Ben Lechlitner\" /></a><a href=\"https://github.com/looshch\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;looshch.png\" width=\"60px\" alt=\"User avatar: george looshch\" /></a><a href=\"https://github.com/kg8m\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;kg8m.png\" width=\"60px\" alt=\"User avatar: Takumi KAGIYAMA\" /></a><a href=\"https://github.com/polm\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;polm.png\" width=\"60px\" alt=\"User avatar: Paul OLeary McCann\" /></a><a href=\"https://github.com/rbeeger\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rbeeger.png\" width=\"60px\" alt=\"User avatar: Robert Beeger\" /></a><a href=\"https://github.com/yowayb\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;yowayb.png\" width=\"60px\" alt=\"User avatar: Yoway Buorn\" /></a><a href=\"https://github.com/scalisi\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;scalisi.png\" width=\"60px\" alt=\"User avatar: Josh Scalisi\" /></a><a href=\"https://github.com/alecbcs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;alecbcs.png\" width=\"60px\" alt=\"User avatar: Alec Scott\" /></a><a href=\"https://github.com/thnxdev\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;thnxdev.png\" width=\"60px\" alt=\"User avatar: thanks.dev\" /></a><a href=\"https://github.com/artursapek\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;artursapek.png\" width=\"60px\" alt=\"User avatar: Artur Sapek\" /></a><a href=\"https://github.com/ramnes\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;ramnes.png\" width=\"60px\" alt=\"User avatar: Guillaume Gelin\" /></a><a href=\"https://github.com/jyc\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jyc.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/roblevy\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;roblevy.png\" width=\"60px\" alt=\"User avatar: Rob Levy\" /></a><a href=\"https://github.com/glozow\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;glozow.png\" width=\"60px\" alt=\"User avatar: Gloria Zhao\" /></a><a href=\"https://github.com/toupeira\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;toupeira.png\" width=\"60px\" alt=\"User avatar: Markus Koller\" /></a><a href=\"https://github.com/rkpatel33\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;rkpatel33.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/jamesob\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jamesob.png\" width=\"60px\" alt=\"User avatar: jamesob\" /></a><a href=\"https://github.com/jlebray\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jlebray.png\" width=\"60px\" alt=\"User avatar: Johan Le Bray\" /></a><a href=\"https://github.com/panosl1\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;panosl1.png\" width=\"60px\" alt=\"User avatar: Panos Lampropoulos\" /></a><a href=\"https://github.com/bespinian\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;bespinian.png\" width=\"60px\" alt=\"User avatar: bespinian\" /></a><a href=\"https://github.com/scosu\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;scosu.png\" width=\"60px\" alt=\"User avatar: Markus Schneider-Pargmann\" /></a><a href=\"https://github.com/smithbm2316\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;smithbm2316.png\" width=\"60px\" alt=\"User avatar: Ben Smith\" /></a><a href=\"https://github.com/charlieegan3\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;charlieegan3.png\" width=\"60px\" alt=\"User avatar: Charlie Egan\" /></a><a href=\"https://github.com/thobbs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;thobbs.png\" width=\"60px\" alt=\"User avatar: Tyler Hobbs\" /></a><a href=\"https://github.com/neilparikh\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;neilparikh.png\" width=\"60px\" alt=\"User avatar: Neil Parikh\" /></a><a href=\"https://github.com/shkm\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;shkm.png\" width=\"60px\" alt=\"User avatar: Jamie Schembri\" /></a><a href=\"https://github.com/BasedScience\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;BasedScience.png\" width=\"60px\" alt=\"User avatar: dockien\" /></a><a href=\"https://github.com/RussellGilmore\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;RussellGilmore.png\" width=\"60px\" alt=\"User avatar: Russell Gilmore\" /></a><a href=\"https://github.com/meribold\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;meribold.png\" width=\"60px\" alt=\"User avatar: Lukas Waymann\" /></a><a href=\"https://github.com/terminaldweller\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;terminaldweller.png\" width=\"60px\" alt=\"User avatar: Farzad Sadeghi\" /></a><a href=\"https://github.com/jaydee-coder\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;jaydee-coder.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/TaNorbs\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;TaNorbs.png\" width=\"60px\" alt=\"User avatar: Norbs\" /></a><a href=\"https://github.com/iveteran\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;iveteran.png\" width=\"60px\" alt=\"User avatar: Yu\" /></a><a href=\"https://github.com/fvalasiad\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;fvalasiad.png\" width=\"60px\" alt=\"User avatar: Fotios Valasiadis\" /></a><a href=\"https://github.com/chillax\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;chillax.png\" width=\"60px\" alt=\"User avatar: Joonas Korhonen\" /></a><a href=\"https://github.com/brpaz\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;brpaz.png\" width=\"60px\" alt=\"User avatar: Bruno Paz\" /></a><a href=\"https://github.com/flanaras\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;flanaras.png\" width=\"60px\" alt=\"User avatar: Filippos Lanaras\" /></a><a href=\"https://github.com/freshleafmedia\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;freshleafmedia.png\" width=\"60px\" alt=\"User avatar: Freshleaf Media\" /></a><a href=\"https://github.com/Unambiguous\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;Unambiguous.png\" width=\"60px\" alt=\"User avatar: \" /></a><a href=\"https://github.com/timobenn\"><img src=\"https:&#x2F;&#x2F;github.com&#x2F;timobenn.png\" width=\"60px\" alt=\"User avatar: Timothy Bennett\" /></a><!-- sponsors -->\n\nTable of Contents\n-----------------\n\n<!-- vim-markdown-toc GFM -->\n\n* [Installation](#installation)\n    * [Using Homebrew](#using-homebrew)\n    * [Linux packages](#linux-packages)\n    * [Windows packages](#windows-packages)\n    * [Using git](#using-git)\n    * [Binary releases](#binary-releases)\n    * [Setting up shell integration](#setting-up-shell-integration)\n    * [Vim/Neovim plugin](#vimneovim-plugin)\n* [Upgrading fzf](#upgrading-fzf)\n* [Building fzf](#building-fzf)\n* [Usage](#usage)\n    * [Using the finder](#using-the-finder)\n    * [Display modes](#display-modes)\n        * [`--height` mode](#--height-mode)\n        * [`--tmux` mode](#--tmux-mode)\n    * [Search syntax](#search-syntax)\n    * [Environment variables](#environment-variables)\n    * [Options](#options)\n    * [Demo](#demo)\n* [Examples](#examples)\n* [Key bindings for command-line](#key-bindings-for-command-line)\n* [Fuzzy completion for bash and zsh](#fuzzy-completion-for-bash-and-zsh)\n    * [Files and directories](#files-and-directories)\n    * [Process IDs](#process-ids)\n    * [Host names](#host-names)\n    * [Environment variables / Aliases](#environment-variables--aliases)\n    * [Customizing fzf options for completion](#customizing-fzf-options-for-completion)\n    * [Customizing completion source for paths and directories](#customizing-completion-source-for-paths-and-directories)\n    * [Supported commands](#supported-commands)\n    * [Custom fuzzy completion](#custom-fuzzy-completion)\n* [Vim plugin](#vim-plugin)\n* [Advanced topics](#advanced-topics)\n    * [Performance](#performance)\n    * [Executing external programs](#executing-external-programs)\n    * [Turning into a different process](#turning-into-a-different-process)\n    * [Reloading the candidate list](#reloading-the-candidate-list)\n        * [1. Update the list of processes by pressing CTRL-R](#1-update-the-list-of-processes-by-pressing-ctrl-r)\n        * [2. Switch between sources by pressing CTRL-D or CTRL-F](#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f)\n        * [3. Interactive ripgrep integration](#3-interactive-ripgrep-integration)\n    * [Preview window](#preview-window)\n    * [Previewing an image](#previewing-an-image)\n* [Tips](#tips)\n    * [Respecting `.gitignore`](#respecting-gitignore)\n    * [Fish shell](#fish-shell)\n    * [fzf Theme Playground](#fzf-theme-playground)\n* [Related projects](#related-projects)\n* [License](#license)\n\n<!-- vim-markdown-toc -->\n\nInstallation\n------------\n\n### Using Homebrew\n\nYou can use [Homebrew](https://brew.sh/) (on macOS or Linux) to install fzf.\n\n```sh\nbrew install fzf\n```\n\n> [!IMPORTANT]\n> To set up shell integration (key bindings and fuzzy completion),\n> see [the instructions below](#setting-up-shell-integration).\n\nfzf is also available [via MacPorts][portfile]: `sudo port install fzf`\n\n[portfile]: https://github.com/macports/macports-ports/blob/master/sysutils/fzf/Portfile\n\n### Linux packages\n\n| Package Manager | Linux Distribution      | Command                            |\n| --------------- | ----------------------- | ---------------------------------- |\n| APK             | Alpine Linux            | `sudo apk add fzf`                 |\n| APT             | Debian 9+/Ubuntu 19.10+ | `sudo apt install fzf`             |\n| Conda           |                         | `conda install -c conda-forge fzf` |\n| DNF             | Fedora                  | `sudo dnf install fzf`             |\n| Nix             | NixOS, etc.             | `nix-env -iA nixpkgs.fzf`          |\n| Pacman          | Arch Linux              | `sudo pacman -S fzf`               |\n| pkg             | FreeBSD                 | `pkg install fzf`                  |\n| pkgin           | NetBSD                  | `pkgin install fzf`                |\n| pkg_add         | OpenBSD                 | `pkg_add fzf`                      |\n| Portage         | Gentoo                  | `emerge --ask app-shells/fzf`      |\n| Spack           |                         | `spack install fzf`                |\n| XBPS            | Void Linux              | `sudo xbps-install -S fzf`         |\n| Zypper          | openSUSE                | `sudo zypper install fzf`          |\n\n> [!IMPORTANT]\n> To set up shell integration (key bindings and fuzzy completion),\n> see [the instructions below](#setting-up-shell-integration).\n\n[![Packaging status](https://repology.org/badge/vertical-allrepos/fzf.svg?columns=3)](https://repology.org/project/fzf/versions)\n\n### Windows packages\n\nOn Windows, fzf is available via [Chocolatey][choco], [Scoop][scoop],\n[Winget][winget], and [MSYS2][msys2]:\n\n| Package manager | Command                               |\n| --------------- | ------------------------------------- |\n| Chocolatey      | `choco install fzf`                   |\n| Scoop           | `scoop install fzf`                   |\n| Winget          | `winget install fzf`                  |\n| MSYS2 (pacman)  | `pacman -S $MINGW_PACKAGE_PREFIX-fzf` |\n\n[choco]: https://chocolatey.org/packages/fzf\n[scoop]: https://github.com/ScoopInstaller/Main/blob/master/bucket/fzf.json\n[winget]: https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf\n[msys2]: https://packages.msys2.org/base/mingw-w64-fzf\n\n### Using git\n\nAlternatively, you can \"git clone\" this repository to any directory and run\n[install](https://github.com/junegunn/fzf/blob/master/install) script.\n\n```sh\ngit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install\n```\n\nThe install script will add lines to your shell configuration file to modify\n`$PATH` and set up shell integration.\n\n### Binary releases\n\nYou can download the official fzf binaries from the releases page.\n\n* https://github.com/junegunn/fzf/releases\n\n### Setting up shell integration\n\nAdd the following line to your shell configuration file.\n\n* bash\n  ```sh\n  # Set up fzf key bindings and fuzzy completion\n  eval \"$(fzf --bash)\"\n  ```\n* zsh\n  ```sh\n  # Set up fzf key bindings and fuzzy completion\n  source <(fzf --zsh)\n  ```\n* fish\n  ```fish\n  # Set up fzf key bindings\n  fzf --fish | source\n  ```\n\n> [!NOTE]\n> `--bash`, `--zsh`, and `--fish` options are only available in fzf 0.48.0 or\n> later. If you have an older version of fzf, or want finer control, you can\n> source individual script files in the [/shell](/shell) directory. The\n> location of the files may vary depending on the package manager you use.\n> Please refer to the package documentation for more information.\n> (e.g. `apt show fzf`)\n\n> [!TIP]\n> You can disable CTRL-T or ALT-C binding by setting `FZF_CTRL_T_COMMAND` or\n> `FZF_ALT_C_COMMAND` to an empty string when sourcing the script.\n> For example, to disable ALT-C binding:\n>\n> * bash: `FZF_ALT_C_COMMAND= eval \"$(fzf --bash)\"`\n> * zsh: `FZF_ALT_C_COMMAND= source <(fzf --zsh)`\n> * fish: `fzf --fish | FZF_ALT_C_COMMAND= source`\n>\n> Setting the variables after sourcing the script will have no effect.\n\n### Vim/Neovim plugin\n\nIf you use [vim-plug](https://github.com/junegunn/vim-plug), add this to\nyour Vim configuration file:\n\n```vim\nPlug 'junegunn/fzf', { 'do': { -> fzf#install() } }\nPlug 'junegunn/fzf.vim'\n```\n\n* `junegunn/fzf` provides the basic library functions\n    * `fzf#install()` makes sure that you have the latest binary\n* `junegunn/fzf.vim` is [a separate project](https://github.com/junegunn/fzf.vim)\n  that provides a variety of useful commands\n\nTo learn more about the Vim integration, see [README-VIM.md](README-VIM.md).\n\n> [!TIP]\n> If you use Neovim and prefer Lua-based plugins, check out\n> [fzf-lua](https://github.com/ibhagwan/fzf-lua).\n\nUpgrading fzf\n-------------\n\nfzf is being actively developed, and you might want to upgrade it once in a\nwhile. Please follow the instruction below depending on the installation\nmethod used.\n\n- git: `cd ~/.fzf && git pull && ./install`\n- brew: `brew update; brew upgrade fzf`\n- macports: `sudo port upgrade fzf`\n- chocolatey: `choco upgrade fzf`\n- vim-plug: `:PlugUpdate fzf`\n\nBuilding fzf\n------------\n\nSee [BUILD.md](BUILD.md).\n\nUsage\n-----\n\nfzf will launch interactive finder, read the list from STDIN, and write the\nselected item to STDOUT.\n\n```sh\nfind * -type f | fzf > selected\n```\n\nWithout STDIN pipe, fzf will traverse the file system under the current\ndirectory to get the list of files.\n\n```sh\nvim $(fzf)\n```\n\n> [!NOTE]\n> You can override the default behavior\n> * Either by setting `$FZF_DEFAULT_COMMAND` to a command that generates the desired list\n> * Or by setting `--walker`, `--walker-root`, and `--walker-skip` options in `$FZF_DEFAULT_OPTS`\n\n> [!WARNING]\n> A more robust solution would be to use `xargs` but we've presented\n> the above as it's easier to grasp\n> ```sh\n> fzf --print0 | xargs -0 -o vim\n> ```\n\n> [!TIP]\n> fzf also has the ability to turn itself into a different process.\n>\n> ```sh\n> fzf --bind 'enter:become(vim {})'\n> ```\n>\n> *See [Turning into a different process](#turning-into-a-different-process)\n> for more information.*\n\n### Using the finder\n\n- `CTRL-K` / `CTRL-J` (or `CTRL-P` / `CTRL-N`) to move cursor up and down\n- `Enter` key to select the item, `CTRL-C` / `CTRL-G` / `ESC` to exit\n- On multi-select mode (`-m`), `TAB` and `Shift-TAB` to mark multiple items\n- Emacs style key bindings\n- Mouse: scroll, click, double-click; shift-click and shift-scroll on\n  multi-select mode\n\n### Display modes\n\nfzf by default runs in fullscreen mode, but there are other display modes.\n\n#### `--height` mode\n\nWith `--height HEIGHT[%]`, fzf will start below the cursor with the given height.\n\n```sh\nfzf --height 40%\n```\n\n`reverse` layout and `--border` goes well with this option.\n\n```sh\nfzf --height 40% --layout reverse --border\n```\n\nBy prepending `~` to the height, you're setting the maximum height.\n\n```sh\n# Will take as few lines as possible to display the list\nseq 3 | fzf --height ~100%\nseq 3000 | fzf --height ~100%\n```\n\nHeight value can be a negative number.\n\n```sh\n# Screen height - 3\nfzf --height -3\n```\n\n#### `--tmux` mode\n\nWith `--tmux` option, fzf will start in a tmux popup.\n\n```sh\n# --tmux [center|top|bottom|left|right][,SIZE[%]][,SIZE[%][,border-native]]\n\nfzf --tmux center         # Center, 50% width and height\nfzf --tmux 80%            # Center, 80% width and height\nfzf --tmux 100%,50%       # Center, 100% width and 50% height\nfzf --tmux left,40%       # Left, 40% width\nfzf --tmux left,40%,90%   # Left, 40% width, 90% height\nfzf --tmux top,40%        # Top, 40% height\nfzf --tmux bottom,80%,40% # Bottom, 80% height, 40% height\n```\n\n`--tmux` is silently ignored when you're not on tmux.\n\n> [!NOTE]\n> If you're stuck with an old version of tmux that doesn't support popup,\n> or if you want to open fzf in a regular tmux pane, check out\n> [fzf-tmux](bin/fzf-tmux) script.\n\n> [!TIP]\n> You can add these options to `$FZF_DEFAULT_OPTS` so that they're applied by\n> default. For example,\n>\n> ```sh\n> # Open in tmux popup if on tmux, otherwise use --height mode\n> export FZF_DEFAULT_OPTS='--height 40% --tmux bottom,40% --layout reverse --border top'\n> ```\n\n### Search syntax\n\nUnless otherwise specified, fzf starts in \"extended-search mode\" where you can\ntype in multiple search terms delimited by spaces. e.g. `^music .mp3$ sbtrkt\n!fire`\n\n| Token     | Match type                              | Description                                  |\n| --------- | --------------------------------------  | ------------------------------------------   |\n| `sbtrkt`  | fuzzy-match                             | Items that match `sbtrkt`                    |\n| `'wild`   | exact-match (quoted)                    | Items that include `wild`                    |\n| `'wild'`  | exact-boundary-match (quoted both ends) | Items that include `wild` at word boundaries |\n| `^music`  | prefix-exact-match                      | Items that start with `music`                |\n| `.mp3$`   | suffix-exact-match                      | Items that end with `.mp3`                   |\n| `!fire`   | inverse-exact-match                     | Items that do not include `fire`             |\n| `!^music` | inverse-prefix-exact-match              | Items that do not start with `music`         |\n| `!.mp3$`  | inverse-suffix-exact-match              | Items that do not end with `.mp3`            |\n\nIf you don't prefer fuzzy matching and do not wish to \"quote\" every word,\nstart fzf with `-e` or `--exact` option. Note that when  `--exact` is set,\n`'`-prefix \"unquotes\" the term.\n\nA single bar character term acts as an OR operator. For example, the following\nquery matches entries that start with `core` and end with either `go`, `rb`,\nor `py`.\n\n```\n^core go$ | rb$ | py$\n```\n\n### Environment variables\n\n- `FZF_DEFAULT_COMMAND`\n    - Default command to use when input is tty\n    - e.g. `export FZF_DEFAULT_COMMAND='fd --type f'`\n- `FZF_DEFAULT_OPTS`\n    - Default options\n    - e.g. `export FZF_DEFAULT_OPTS=\"--layout=reverse --inline-info\"`\n- `FZF_DEFAULT_OPTS_FILE`\n    - If you prefer to manage default options in a file, set this variable to\n      point to the location of the file\n    - e.g. `export FZF_DEFAULT_OPTS_FILE=~/.fzfrc`\n\n> [!WARNING]\n> `FZF_DEFAULT_COMMAND` is not used by shell integration due to the\n> slight difference in requirements.\n>\n> * `CTRL-T` runs `$FZF_CTRL_T_COMMAND` to get a list of files and directories\n> * `ALT-C` runs `$FZF_ALT_C_COMMAND` to get a list of directories\n> * `vim ~/**<tab>` runs `fzf_compgen_path()` with the prefix (`~/`) as the first argument\n> * `cd foo**<tab>` runs `fzf_compgen_dir()` with the prefix (`foo`) as the first argument\n>\n> The available options are described later in this document.\n\n### Options\n\nSee the man page (`man fzf`) for the full list of options.\n\n### Demo\nIf you learn by watching videos, check out this screencast by [@samoshkin](https://github.com/samoshkin) to explore `fzf` features.\n\n<a title=\"fzf - command-line fuzzy finder\" href=\"https://www.youtube.com/watch?v=qgG5Jhi_Els\">\n  <img src=\"https://i.imgur.com/vtG8olE.png\" width=\"640\">\n</a>\n\nExamples\n--------\n\n* [Wiki page of examples](https://github.com/junegunn/fzf/wiki/examples)\n    * *Disclaimer: The examples on this page are maintained by the community\n      and are not thoroughly tested*\n* [Advanced fzf examples](https://github.com/junegunn/fzf/blob/master/ADVANCED.md)\n\nKey bindings for command-line\n-----------------------------\n\nBy [setting up shell integration](#setting-up-shell-integration), you can use\nthe following key bindings in bash, zsh, and fish.\n\n- `CTRL-T` - Paste the selected files and directories onto the command-line\n    - The list is generated using `--walker file,dir,follow,hidden` option\n        - You can override the behavior by setting `FZF_CTRL_T_COMMAND` to a custom command that generates the desired list\n        - Or you can set `--walker*` options in `FZF_CTRL_T_OPTS`\n    - Set `FZF_CTRL_T_OPTS` to pass additional options to fzf\n      ```sh\n      # Preview file content using bat (https://github.com/sharkdp/bat)\n      export FZF_CTRL_T_OPTS=\"\n        --walker-skip .git,node_modules,target\n        --preview 'bat -n --color=always {}'\n        --bind 'ctrl-/:change-preview-window(down|hidden|)'\"\n      ```\n    - Can be disabled by setting `FZF_CTRL_T_COMMAND` to an empty string when\n      sourcing the script\n- `CTRL-R` - Paste the selected command from history onto the command-line\n    - If you want to see the commands in chronological order, press `CTRL-R`\n      again which toggles sorting by relevance\n    - Press `CTRL-/` or `ALT-/` to toggle line wrapping\n    - Set `FZF_CTRL_R_OPTS` to pass additional options to fzf\n      ```sh\n      # CTRL-Y to copy the command into clipboard using pbcopy\n      export FZF_CTRL_R_OPTS=\"\n        --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'\n        --color header:italic\n        --header 'Press CTRL-Y to copy command into clipboard'\"\n      ```\n- `ALT-C` - cd into the selected directory\n    - The list is generated using `--walker dir,follow,hidden` option\n    - Set `FZF_ALT_C_COMMAND` to override the default command\n        - Or you can set `--walker-*` options in `FZF_ALT_C_OPTS`\n    - Set `FZF_ALT_C_OPTS` to pass additional options to fzf\n      ```sh\n      # Print tree structure in the preview window\n      export FZF_ALT_C_OPTS=\"\n        --walker-skip .git,node_modules,target\n        --preview 'tree -C {}'\"\n      ```\n    - Can be disabled by setting `FZF_ALT_C_COMMAND` to an empty string when\n      sourcing the script\n\nDisplay modes for these bindings can be separately configured via\n`FZF_{CTRL_T,CTRL_R,ALT_C}_OPTS` or globally via `FZF_DEFAULT_OPTS`.\n(e.g. `FZF_CTRL_R_OPTS='--tmux bottom,60% --height 60% --border top'`)\n\nMore tips can be found on [the wiki page](https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings).\n\nFuzzy completion for bash and zsh\n---------------------------------\n\n### Files and directories\n\nFuzzy completion for files and directories can be triggered if the word before\nthe cursor ends with the trigger sequence, which is by default `**`.\n\n- `COMMAND [DIRECTORY/][FUZZY_PATTERN]**<TAB>`\n\n```sh\n# Files under the current directory\n# - You can select multiple items with TAB key\nvim **<TAB>\n\n# Files under parent directory\nvim ../**<TAB>\n\n# Files under parent directory that match `fzf`\nvim ../fzf**<TAB>\n\n# Files under your home directory\nvim ~/**<TAB>\n\n\n# Directories under current directory (single-selection)\ncd **<TAB>\n\n# Directories under ~/github that match `fzf`\ncd ~/github/fzf**<TAB>\n```\n\n### Process IDs\n\nFuzzy completion for PIDs is provided for kill command.\n\n```sh\n# Can select multiple processes with <TAB> or <Shift-TAB> keys\nkill -9 **<TAB>\n```\n\n### Host names\n\nFor ssh and telnet commands, fuzzy completion for hostnames is provided. The\nnames are extracted from /etc/hosts and ~/.ssh/config.\n\n```sh\nssh **<TAB>\ntelnet **<TAB>\n```\n\n### Environment variables / Aliases\n\n```sh\nunset **<TAB>\nexport **<TAB>\nunalias **<TAB>\n```\n\n### Customizing fzf options for completion\n\n```sh\n# Use ~~ as the trigger sequence instead of the default **\nexport FZF_COMPLETION_TRIGGER='~~'\n\n# Options to fzf command\nexport FZF_COMPLETION_OPTS='--border --info=inline'\n\n# Options for path completion (e.g. vim **<TAB>)\nexport FZF_COMPLETION_PATH_OPTS='--walker file,dir,follow,hidden'\n\n# Options for directory completion (e.g. cd **<TAB>)\nexport FZF_COMPLETION_DIR_OPTS='--walker dir,follow'\n\n# Advanced customization of fzf options via _fzf_comprun function\n# - The first argument to the function is the name of the command.\n# - You should make sure to pass the rest of the arguments ($@) to fzf.\n_fzf_comprun() {\n  local command=$1\n  shift\n\n  case \"$command\" in\n    cd)           fzf --preview 'tree -C {} | head -200'   \"$@\" ;;\n    export|unset) fzf --preview \"eval 'echo \\$'{}\"         \"$@\" ;;\n    ssh)          fzf --preview 'dig {}'                   \"$@\" ;;\n    *)            fzf --preview 'bat -n --color=always {}' \"$@\" ;;\n  esac\n}\n```\n\n### Customizing completion source for paths and directories\n\n```sh\n# Use fd (https://github.com/sharkdp/fd) for listing path candidates.\n# - The first argument to the function ($1) is the base path to start traversal\n# - See the source code (completion.{bash,zsh}) for the details.\n_fzf_compgen_path() {\n  fd --hidden --follow --exclude \".git\" . \"$1\"\n}\n\n# Use fd to generate the list for directory completion\n_fzf_compgen_dir() {\n  fd --type d --hidden --follow --exclude \".git\" . \"$1\"\n}\n```\n\n### Supported commands\n\nOn bash, fuzzy completion is enabled only for a predefined set of commands\n(`complete | grep _fzf` to see the list). But you can enable it for other\ncommands as well by using `_fzf_setup_completion` helper function.\n\n```sh\n# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...\n_fzf_setup_completion path ag git kubectl\n_fzf_setup_completion dir tree\n```\n\n### Custom fuzzy completion\n\n_**(Custom completion API is experimental and subject to change)**_\n\nFor a command named _\"COMMAND\"_, define `_fzf_complete_COMMAND` function using\n`_fzf_complete` helper.\n\n```sh\n# Custom fuzzy completion for \"doge\" command\n#   e.g. doge **<TAB>\n_fzf_complete_doge() {\n  _fzf_complete --multi --reverse --prompt=\"doge> \" -- \"$@\" < <(\n    echo very\n    echo wow\n    echo such\n    echo doge\n  )\n}\n```\n\n- The arguments before `--` are the options to fzf.\n- After `--`, simply pass the original completion arguments unchanged (`\"$@\"`).\n- Then, write a set of commands that generates the completion candidates and\n  feed its output to the function using process substitution (`< <(...)`).\n\nzsh will automatically pick up the function using the naming convention but in\nbash you have to manually associate the function with the command using the\n`complete` command.\n\n```sh\n[ -n \"$BASH\" ] && complete -F _fzf_complete_doge -o default -o bashdefault doge\n```\n\nIf you need to post-process the output from fzf, define\n`_fzf_complete_COMMAND_post` as follows.\n\n```sh\n_fzf_complete_foo() {\n  _fzf_complete --multi --reverse --header-lines=3 -- \"$@\" < <(\n    ls -al\n  )\n}\n\n_fzf_complete_foo_post() {\n  awk '{print $NF}'\n}\n\n[ -n \"$BASH\" ] && complete -F _fzf_complete_foo -o default -o bashdefault foo\n```\n\nVim plugin\n----------\n\nSee [README-VIM.md](README-VIM.md).\n\nAdvanced topics\n---------------\n\n### Performance\n\nfzf is fast. Performance should not be a problem in most use cases. However,\nyou might want to be aware of the options that can affect performance.\n\n- `--ansi` tells fzf to extract and parse ANSI color codes in the input, and it\n  makes the initial scanning slower. So it's not recommended that you add it\n  to your `$FZF_DEFAULT_OPTS`.\n- `--nth` makes fzf slower because it has to tokenize each line.\n- `--with-nth` makes fzf slower as fzf has to tokenize and reassemble each\n  line.\n\n### Executing external programs\n\nYou can set up key bindings for starting external processes without leaving\nfzf (`execute`, `execute-silent`).\n\n```bash\n# Press F1 to open the file with less without leaving fzf\n# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)\nfzf --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort'\n```\n\nSee *KEY BINDINGS* section of the man page for details.\n\n### Turning into a different process\n\n`become(...)` is similar to `execute(...)`/`execute-silent(...)` described\nabove, but instead of executing the command and coming back to fzf on\ncomplete, it turns fzf into a new process for the command.\n\n```sh\nfzf --bind 'enter:become(vim {})'\n```\n\nCompared to the seemingly equivalent command substitution `vim \"$(fzf)\"`, this\napproach has several advantages:\n\n* Vim will not open an empty file when you terminate fzf with\n  <kbd>CTRL-C</kbd>\n* Vim will not open an empty file when you press <kbd>ENTER</kbd> on an empty\n  result\n* Can handle multiple selections even when they have whitespaces\n  ```sh\n  fzf --multi --bind 'enter:become(vim {+})'\n  ```\n\nTo be fair, running `fzf --print0 | xargs -0 -o vim` instead of `vim \"$(fzf)\"`\nresolves all of the issues mentioned. Nonetheless, `become(...)` still offers\nadditional benefits in different scenarios.\n\n* You can set up multiple bindings to handle the result in different ways\n  without any wrapping script\n  ```sh\n  fzf --bind 'enter:become(vim {}),ctrl-e:become(emacs {})'\n  ```\n  * Previously, you would have to use `--expect=ctrl-e` and check the first\n    line of the output of fzf\n* You can easily build the subsequent command using the field index\n  expressions of fzf\n  ```sh\n  # Open the file in Vim and go to the line\n  git grep --line-number . |\n      fzf --delimiter : --nth 3.. --bind 'enter:become(vim {1} +{2})'\n  ```\n\n### Reloading the candidate list\n\nBy binding `reload` action to a key or an event, you can make fzf dynamically\nreload the candidate list. See https://github.com/junegunn/fzf/issues/1750 for\nmore details.\n\n#### 1. Update the list of processes by pressing CTRL-R\n\n```sh\nps -ef |\n  fzf --bind 'ctrl-r:reload(ps -ef)' \\\n      --header 'Press CTRL-R to reload' --header-lines=1 \\\n      --height=50% --layout=reverse\n```\n\n#### 2. Switch between sources by pressing CTRL-D or CTRL-F\n\n```sh\nFZF_DEFAULT_COMMAND='find . -type f' \\\n  fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval \"$FZF_DEFAULT_COMMAND\")' \\\n      --height=50% --layout=reverse\n```\n\n#### 3. Interactive ripgrep integration\n\nThe following example uses fzf as the selector interface for ripgrep. We bound\n`reload` action to `change` event, so every time you type on fzf, the ripgrep\nprocess will restart with the updated query string denoted by the placeholder\nexpression `{q}`. Also, note that we used `--disabled` option so that fzf\ndoesn't perform any secondary filtering.\n\n```sh\n: | rg_prefix='rg --column --line-number --no-heading --color=always --smart-case' \\\n    fzf --bind 'start:reload:$rg_prefix \"\"' \\\n        --bind 'change:reload:$rg_prefix {q} || true' \\\n        --bind 'enter:become(vim {1} +{2})' \\\n        --ansi --disabled \\\n        --height=50% --layout=reverse\n```\n\nIf ripgrep doesn't find any matches, it will exit with a non-zero exit status,\nand fzf will warn you about it. To suppress the warning message, we added\n`|| true` to the command, so that it always exits with 0.\n\nSee [\"Using fzf as interactive Ripgrep launcher\"](https://github.com/junegunn/fzf/blob/master/ADVANCED.md#using-fzf-as-interactive-ripgrep-launcher)\nfor more sophisticated examples.\n\n### Preview window\n\nWhen the `--preview` option is set, fzf automatically starts an external process\nwith the current line as the argument and shows the result in the split window.\nYour `$SHELL` is used to execute the command with `$SHELL -c COMMAND`.\nThe window can be scrolled using the mouse or custom key bindings.\n\n```bash\n# {} is replaced with the single-quoted string of the focused line\nfzf --preview 'cat {}'\n```\n\nPreview window supports ANSI colors, so you can use any program that\nsyntax-highlights the content of a file, such as\n[Bat](https://github.com/sharkdp/bat) or\n[Highlight](https://gitlab.com/saalen/highlight):\n\n```bash\nfzf --preview 'bat --color=always {}' --preview-window '~3'\n```\n\nYou can customize the size, position, and border of the preview window using\n`--preview-window` option, and the foreground and background color of it with\n`--color` option. For example,\n\n```bash\nfzf --height 40% --layout reverse --info inline --border \\\n    --preview 'file {}' --preview-window up,1,border-horizontal \\\n    --bind 'ctrl-/:change-preview-window(50%|hidden|)' \\\n    --color 'fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899'\n```\n\nSee the man page (`man fzf`) for the full list of options.\n\nMore advanced examples can be found [here](https://github.com/junegunn/fzf/blob/master/ADVANCED.md).\n\n> [!WARNING]\n> Since fzf is a general-purpose text filter rather than a file finder, **it is\n> not a good idea to add `--preview` option to your `$FZF_DEFAULT_OPTS`**.\n>\n> ```sh\n> # *********************\n> # ** DO NOT DO THIS! **\n> # *********************\n> export FZF_DEFAULT_OPTS='--preview \"bat --style=numbers --color=always --line-range :500 {}\"'\n>\n> # bat doesn't work with any input other than the list of files\n> ps -ef | fzf\n> seq 100 | fzf\n> history | fzf\n> ```\n\n### Previewing an image\n\nfzf can display images in the preview window using one of the following protocols:\n\n* [Kitty graphics protocol](https://sw.kovidgoyal.net/kitty/graphics-protocol/)\n* [iTerm2 inline images protocol](https://iterm2.com/documentation-images.html)\n* [Sixel](https://en.wikipedia.org/wiki/Sixel)\n\nSee [bin/fzf-preview.sh](bin/fzf-preview.sh) script for more information.\n\n```sh\nfzf --preview 'fzf-preview.sh {}'\n```\n\nTips\n----\n\n### Respecting `.gitignore`\n\nYou can use [fd](https://github.com/sharkdp/fd),\n[ripgrep](https://github.com/BurntSushi/ripgrep), or [the silver\nsearcher](https://github.com/ggreer/the_silver_searcher) to traverse the file\nsystem while respecting `.gitignore`.\n\n```sh\n# Feed the output of fd into fzf\nfd --type f --strip-cwd-prefix | fzf\n\n# Setting fd as the default source for fzf\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'\n\n# Now fzf (w/o pipe) will use the fd command to generate the list\nfzf\n\n# To apply the command to CTRL-T as well\nexport FZF_CTRL_T_COMMAND=\"$FZF_DEFAULT_COMMAND\"\n```\n\nIf you want the command to follow symbolic links and don't want it to exclude\nhidden files, use the following command:\n\n```sh\nexport FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix --hidden --follow --exclude .git'\n```\n\n### Fish shell\n\n`CTRL-T` key binding of fish, unlike those of bash and zsh, will use the last\ntoken on the command-line as the root directory for the recursive search. For\ninstance, hitting `CTRL-T` at the end of the following command-line\n\n```sh\nls /var/\n```\n\nwill list all files and directories under `/var/`.\n\nWhen using a custom `FZF_CTRL_T_COMMAND`, use the unexpanded `$dir` variable to\nmake use of this feature. `$dir` defaults to `.` when the last token is not a\nvalid directory. Example:\n\n```sh\nset -g FZF_CTRL_T_COMMAND \"command find -L \\$dir -type f 2> /dev/null | sed '1d; s#^\\./##'\"\n```\n\n### fzf Theme Playground\n\n[fzf Theme Playground](https://vitormv.github.io/fzf-themes/) created by\n[Vitor Mello](https://github.com/vitormv) is a webpage where you can\ninteractively create fzf themes.\n\nRelated projects\n----------------\n\nhttps://github.com/junegunn/fzf/wiki/Related-projects\n\n[License](LICENSE)\n------------------\n\nThe MIT License (MIT)\n\nCopyright (c) 2013-2024 Junegunn Choi\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.513671875,
          "content": "module github.com/junegunn/fzf\n\nrequire (\n\tgithub.com/charlievieth/fastwalk v1.0.9\n\tgithub.com/gdamore/tcell/v2 v2.7.4\n\tgithub.com/junegunn/go-shellwords v0.0.0-20240813092932-a62c48c52e97\n\tgithub.com/mattn/go-isatty v0.0.20\n\tgithub.com/rivo/uniseg v0.4.7\n\tgolang.org/x/sys v0.29.0\n\tgolang.org/x/term v0.28.0\n)\n\nrequire (\n\tgithub.com/gdamore/encoding v1.0.0 // indirect\n\tgithub.com/lucasb-eyer/go-colorful v1.2.0 // indirect\n\tgithub.com/mattn/go-runewidth v0.0.15 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n)\n\ngo 1.20\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 5.1396484375,
          "content": "github.com/charlievieth/fastwalk v1.0.9 h1:Odb92AfoReO3oFBfDGT5J+nwgzQPF/gWAw6E6/lkor0=\ngithub.com/charlievieth/fastwalk v1.0.9/go.mod h1:yGy1zbxog41ZVMcKA/i8ojXLFsuayX5VvwhQVoj9PBI=\ngithub.com/gdamore/encoding v1.0.0 h1:+7OoQ1Bc6eTm5niUzBa0Ctsh6JbMW6Ra+YNuAtDBdko=\ngithub.com/gdamore/encoding v1.0.0/go.mod h1:alR0ol34c49FCSBLjhosxzcPHQbf2trDkoo5dl+VrEg=\ngithub.com/gdamore/tcell/v2 v2.7.4 h1:sg6/UnTM9jGpZU+oFYAsDahfchWAFW8Xx2yFinNSAYU=\ngithub.com/gdamore/tcell/v2 v2.7.4/go.mod h1:dSXtXTSK0VsW1biw65DZLZ2NKr7j0qP/0J7ONmsraWg=\ngithub.com/junegunn/go-shellwords v0.0.0-20240813092932-a62c48c52e97 h1:rqzLixVo1c/GQW6px9j1xQmlvQIn+lf/V6M1UQ7IFzw=\ngithub.com/junegunn/go-shellwords v0.0.0-20240813092932-a62c48c52e97/go.mod h1:6EILKtGpo5t+KLb85LNZLAF6P9LKp78hJI80PXMcn3c=\ngithub.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY=\ngithub.com/lucasb-eyer/go-colorful v1.2.0/go.mod h1:R4dSotOR9KMtayYi1e77YzuveK+i7ruzyGqttikkLy0=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.15 h1:UNAjwbU9l54TA3KzvqLGxwWjHmMgBUVhBiTjelZgg3U=\ngithub.com/mattn/go-runewidth v0.0.15/go.mod h1:Jdepj2loyihRzMpdS35Xk/zdY8IAYHsh153qUoGf23w=\ngithub.com/rivo/uniseg v0.2.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rivo/uniseg v0.4.3/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/rivo/uniseg v0.4.7 h1:WUdvkW8uEhrYfLC4ZzdpI2ztxP1I582+49Oc5Mq64VQ=\ngithub.com/rivo/uniseg v0.4.7/go.mod h1:FN3SvrM+Zdj16jyLfmOkMNblXMcoc8DfTHruCPUcx88=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/sys v0.29.0 h1:TPYlXGxvx1MGTn2GiZDhnjPA9wZzZeGKHHmKhHYvgaU=\ngolang.org/x/sys v0.29.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=\ngolang.org/x/term v0.28.0 h1:/Ts8HFuMR2E6IP/jlo7QVLZHggjKQbhu/7H0LJFr3Gg=\ngolang.org/x/term v0.28.0/go.mod h1:Sw/lC2IAUZ92udQNf3WodGtn4k/XoLyZoh8v/8uiwek=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.14.0 h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=\ngolang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\n"
        },
        {
          "name": "install",
          "type": "blob",
          "size": 10.2490234375,
          "content": "#!/usr/bin/env bash\n\nset -u\n\nversion=0.57.0\nauto_completion=\nkey_bindings=\nupdate_config=2\nshells=\"bash zsh fish\"\nprefix='~/.fzf'\nprefix_expand=~/.fzf\nfish_dir=${XDG_CONFIG_HOME:-$HOME/.config}/fish\n\nhelp() {\n  cat << EOF\nusage: $0 [OPTIONS]\n\n    --help               Show this message\n    --bin                Download fzf binary only; Do not generate ~/.fzf.{bash,zsh}\n    --all                Download fzf binary and update configuration files\n                         to enable key bindings and fuzzy completion\n    --xdg                Generate files under \\$XDG_CONFIG_HOME/fzf\n    --[no-]key-bindings  Enable/disable key bindings (CTRL-T, CTRL-R, ALT-C)\n    --[no-]completion    Enable/disable fuzzy completion (bash & zsh)\n    --[no-]update-rc     Whether or not to update shell configuration files\n\n    --no-bash            Do not set up bash configuration\n    --no-zsh             Do not set up zsh configuration\n    --no-fish            Do not set up fish configuration\nEOF\n}\n\nfor opt in \"$@\"; do\n  case $opt in\n    --help)\n      help\n      exit 0\n      ;;\n    --all)\n      auto_completion=1\n      key_bindings=1\n      update_config=1\n      ;;\n    --xdg)\n      prefix='\"${XDG_CONFIG_HOME:-$HOME/.config}\"/fzf/fzf'\n      prefix_expand=${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf\n      mkdir -p \"${XDG_CONFIG_HOME:-$HOME/.config}/fzf\"\n      ;;\n    --key-bindings)    key_bindings=1    ;;\n    --no-key-bindings) key_bindings=0    ;;\n    --completion)      auto_completion=1 ;;\n    --no-completion)   auto_completion=0 ;;\n    --update-rc)       update_config=1   ;;\n    --no-update-rc)    update_config=0   ;;\n    --bin)             ;;\n    --no-bash)         shells=${shells/bash/} ;;\n    --no-zsh)          shells=${shells/zsh/} ;;\n    --no-fish)         shells=${shells/fish/} ;;\n    *)\n      echo \"unknown option: $opt\"\n      help\n      exit 1\n      ;;\n  esac\ndone\n\ncd \"$(dirname \"${BASH_SOURCE[0]}\")\"\nfzf_base=$(pwd)\nfzf_base_esc=$(printf %q \"$fzf_base\")\n\nask() {\n  while true; do\n    read -p \"$1 ([y]/n) \" -r\n    REPLY=${REPLY:-\"y\"}\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      return 1\n    elif [[ $REPLY =~ ^[Nn]$ ]]; then\n      return 0\n    fi\n  done\n}\n\ncheck_binary() {\n  echo -n \"  - Checking fzf executable ... \"\n  local output\n  output=$(FZF_DEFAULT_OPTS= \"$fzf_base\"/bin/fzf --version 2>&1)\n  if [ $? -ne 0 ]; then\n    echo \"Error: $output\"\n    binary_error=\"Invalid binary\"\n  else\n    output=${output/ */}\n    if [ \"$version\" != \"$output\" ]; then\n      echo \"$output != $version\"\n      binary_error=\"Invalid version\"\n    else\n      echo \"$output\"\n      binary_error=\"\"\n      return 0\n    fi\n  fi\n  rm -f \"$fzf_base\"/bin/fzf\n  return 1\n}\n\nlink_fzf_in_path() {\n  if which_fzf=\"$(command -v fzf)\"; then\n    echo \"  - Found in \\$PATH\"\n    echo \"  - Creating symlink: bin/fzf -> $which_fzf\"\n    (cd \"$fzf_base\"/bin && rm -f fzf && ln -sf \"$which_fzf\" fzf)\n    check_binary && return\n  fi\n  return 1\n}\n\ntry_curl() {\n  command -v curl > /dev/null &&\n  if [[ $1 =~ tar.gz$ ]]; then\n    curl -fL $1 | tar --no-same-owner -xzf -\n  else\n    local temp=${TMPDIR:-/tmp}/fzf.zip\n    curl -fLo \"$temp\" $1 && unzip -o \"$temp\" && rm -f \"$temp\"\n  fi\n}\n\ntry_wget() {\n  command -v wget > /dev/null &&\n  if [[ $1 =~ tar.gz$ ]]; then\n    wget -O - $1 | tar --no-same-owner -xzf -\n  else\n    local temp=${TMPDIR:-/tmp}/fzf.zip\n    wget -O \"$temp\" $1 && unzip -o \"$temp\" && rm -f \"$temp\"\n  fi\n}\n\ndownload() {\n  echo \"Downloading bin/fzf ...\"\n  if [ -x \"$fzf_base\"/bin/fzf ]; then\n    echo \"  - Already exists\"\n    check_binary && return\n  fi\n  link_fzf_in_path && return\n  mkdir -p \"$fzf_base\"/bin && cd \"$fzf_base\"/bin\n  if [ $? -ne 0 ]; then\n    binary_error=\"Failed to create bin directory\"\n    return\n  fi\n\n  local url\n  url=https://github.com/junegunn/fzf/releases/download/v$version/${1}\n  set -o pipefail\n  if ! (try_curl $url || try_wget $url); then\n    set +o pipefail\n    binary_error=\"Failed to download with curl and wget\"\n    return\n  fi\n  set +o pipefail\n\n  if [ ! -f fzf ]; then\n    binary_error=\"Failed to download ${1}\"\n    return\n  fi\n\n  chmod +x fzf && check_binary\n}\n\n# Try to download binary executable\narchi=$(uname -sm)\nbinary_available=1\nbinary_error=\"\"\ncase \"$archi\" in\n  Darwin\\ arm64)      download fzf-$version-darwin_arm64.tar.gz  ;;\n  Darwin\\ x86_64)     download fzf-$version-darwin_amd64.tar.gz  ;;\n  Linux\\ armv5*)      download fzf-$version-linux_armv5.tar.gz   ;;\n  Linux\\ armv6*)      download fzf-$version-linux_armv6.tar.gz   ;;\n  Linux\\ armv7*)      download fzf-$version-linux_armv7.tar.gz   ;;\n  Linux\\ armv8*)      download fzf-$version-linux_arm64.tar.gz   ;;\n  Linux\\ aarch64*)    download fzf-$version-linux_arm64.tar.gz   ;;\n  Linux\\ loongarch64) download fzf-$version-linux_loong64.tar.gz ;;\n  Linux\\ ppc64le)     download fzf-$version-linux_ppc64le.tar.gz ;;\n  Linux\\ *64)         download fzf-$version-linux_amd64.tar.gz   ;;\n  Linux\\ s390x)       download fzf-$version-linux_s390x.tar.gz   ;;\n  FreeBSD\\ *64)       download fzf-$version-freebsd_amd64.tar.gz ;;\n  OpenBSD\\ *64)       download fzf-$version-openbsd_amd64.tar.gz ;;\n  CYGWIN*\\ *64)       download fzf-$version-windows_amd64.zip    ;;\n  MINGW*\\ *64)        download fzf-$version-windows_amd64.zip    ;;\n  MSYS*\\ *64)         download fzf-$version-windows_amd64.zip    ;;\n  Windows*\\ *64)      download fzf-$version-windows_amd64.zip    ;;\n  *)                  binary_available=0 binary_error=1          ;;\nesac\n\ncd \"$fzf_base\"\nif [ -n \"$binary_error\" ]; then\n  if [ $binary_available -eq 0 ]; then\n    echo \"No prebuilt binary for $archi ...\"\n  else\n    echo \"  - $binary_error !!!\"\n  fi\n  if command -v go > /dev/null; then\n    echo -n \"Building binary (go install github.com/junegunn/fzf) ... \"\n    if [ -z \"${GOPATH-}\" ]; then\n      export GOPATH=\"${TMPDIR:-/tmp}/fzf-gopath\"\n      mkdir -p \"$GOPATH\"\n    fi\n    if go install -ldflags \"-s -w -X main.version=$version -X main.revision=go-install\" github.com/junegunn/fzf; then\n      echo \"OK\"\n      cp \"$GOPATH/bin/fzf\" \"$fzf_base/bin/\"\n    else\n      echo \"Failed to build binary. Installation failed.\"\n      exit 1\n    fi\n  else\n    echo \"go executable not found. Installation failed.\"\n    exit 1\n  fi\nfi\n\n[[ \"$*\" =~ \"--bin\" ]] && exit 0\n\nfor s in $shells; do\n  if ! command -v \"$s\" > /dev/null; then\n    shells=${shells/$s/}\n  fi\ndone\n\nif [[ ${#shells} -lt 3 ]]; then\n  echo \"No shell configuration to be updated.\"\n  exit 0\nfi\n\n# Auto-completion\nif [ -z \"$auto_completion\" ]; then\n  ask \"Do you want to enable fuzzy auto-completion?\"\n  auto_completion=$?\nfi\n\n# Key-bindings\nif [ -z \"$key_bindings\" ]; then\n  ask \"Do you want to enable key bindings?\"\n  key_bindings=$?\nfi\n\necho\nfor shell in $shells; do\n  [[ \"$shell\" = fish ]] && continue\n  src=${prefix_expand}.${shell}\n  echo -n \"Generate $src ... \"\n\n  fzf_completion=\"source \\\"$fzf_base/shell/completion.${shell}\\\"\"\n  if [ $auto_completion -eq 0 ]; then\n    fzf_completion=\"# $fzf_completion\"\n  fi\n\n  fzf_key_bindings=\"source \\\"$fzf_base/shell/key-bindings.${shell}\\\"\"\n  if [ $key_bindings -eq 0 ]; then\n    fzf_key_bindings=\"# $fzf_key_bindings\"\n  fi\n\n  cat > \"$src\" << EOF\n# Setup fzf\n# ---------\nif [[ ! \"\\$PATH\" == *$fzf_base_esc/bin* ]]; then\n  PATH=\"\\${PATH:+\\${PATH}:}$fzf_base/bin\"\nfi\n\nEOF\n\n  if [[ $auto_completion -eq 1 ]] && [[ $key_bindings -eq 1 ]]; then\n    if [[ \"$shell\" = zsh ]]; then\n      echo \"source <(fzf --$shell)\" >> \"$src\"\n    else\n      echo \"eval \\\"\\$(fzf --$shell)\\\"\" >> \"$src\"\n    fi\n  else\n    cat >> \"$src\" << EOF\n# Auto-completion\n# ---------------\n$fzf_completion\n\n# Key bindings\n# ------------\n$fzf_key_bindings\nEOF\n  fi\n  echo \"OK\"\ndone\n\n# fish\nif [[ \"$shells\" =~ fish ]]; then\n  echo -n \"Update fish_user_paths ... \"\n  fish << EOF\n  echo \\$fish_user_paths | \\grep \"$fzf_base\"/bin > /dev/null\n  or set --universal fish_user_paths \\$fish_user_paths \"$fzf_base\"/bin\nEOF\n  [ $? -eq 0 ] && echo \"OK\" || echo \"Failed\"\nfi\n\nappend_line() {\n  local update line file pat lines\n  update=\"$1\"\n  line=\"$2\"\n  file=\"$3\"\n  pat=\"${4:-}\"\n  lines=\"\"\n\n  echo \"Update $file:\"\n  echo \"  - $line\"\n  if [ -f \"$file\" ]; then\n    if [ $# -lt 4 ]; then\n      lines=$(\\grep -nF \"$line\" \"$file\")\n    else\n      lines=$(\\grep -nF \"$pat\" \"$file\")\n    fi\n  fi\n\n  if [ -n \"$lines\" ]; then\n    echo \"    - Already exists:\"\n    sed 's/^/        Line /' <<< \"$lines\"\n\n    update=0\n    if ! \\grep -qv \"^[0-9]*:[[:space:]]*#\" <<< \"$lines\" ; then\n      echo \"    - But they all seem to be commented\"\n      ask  \"    - Continue modifying $file?\"\n      update=$?\n    fi\n  fi\n\n  set -e\n  if [ \"$update\" -eq 1 ]; then\n    [ -f \"$file\" ] && echo >> \"$file\"\n    echo \"$line\" >> \"$file\"\n    echo \"    + Added\"\n  else\n    echo \"    ~ Skipped\"\n  fi\n\n  echo\n  set +e\n}\n\ncreate_file() {\n  local file=\"$1\"\n  shift\n  echo \"Create $file:\"\n  for line in \"$@\"; do\n    echo \"    $line\"\n    echo \"$line\" >> \"$file\"\n  done\n  echo\n}\n\nif [ $update_config -eq 2 ]; then\n  echo\n  ask \"Do you want to update your shell configuration files?\"\n  update_config=$?\nfi\necho\nfor shell in $shells; do\n  [[ \"$shell\" = fish ]] && continue\n  [ $shell = zsh ] && dest=${ZDOTDIR:-~}/.zshrc || dest=~/.bashrc\n  append_line $update_config \"[ -f ${prefix}.${shell} ] && source ${prefix}.${shell}\" \"$dest\" \"${prefix}.${shell}\"\ndone\n\nif [ $key_bindings -eq 1 ] && [[ \"$shells\" =~ fish ]]; then\n  bind_file=\"${fish_dir}/functions/fish_user_key_bindings.fish\"\n  if [ ! -e \"$bind_file\" ]; then\n    mkdir -p \"${fish_dir}/functions\"\n    create_file \"$bind_file\" \\\n      'function fish_user_key_bindings' \\\n      '  fzf --fish | source' \\\n      'end'\n  else\n    echo \"Check $bind_file:\"\n    lno=$(\\grep -nF \"fzf_key_bindings\" \"$bind_file\" | sed 's/:.*//' | tr '\\n' ' ')\n    if [[ -n $lno ]]; then\n      echo \"  ** Found 'fzf_key_bindings' in line #$lno\"\n      echo \"  ** You have to replace the line to 'fzf --fish | source'\"\n      echo\n    else\n      echo \"  - Clear\"\n      echo\n      append_line $update_config \"fzf --fish | source\" \"$bind_file\"\n    fi\n  fi\nfi\n\nif [ $update_config -eq 1 ]; then\n  echo 'Finished. Restart your shell or reload config file.'\n  if [[ \"$shells\" =~ bash ]]; then\n    echo -n '   source ~/.bashrc  # bash'\n    [[ \"$archi\" =~ Darwin ]] && echo -n '  (.bashrc should be loaded from .bash_profile)'\n    echo\n  fi\n  [[ \"$shells\" =~ zsh ]]  && echo \"   source ${ZDOTDIR:-~}/.zshrc   # zsh\"\n  [[ \"$shells\" =~ fish ]] && [ $key_bindings -eq 1 ] && echo '   fzf_key_bindings  # fish'\n  echo\n  echo 'Use uninstall script to remove fzf.'\n  echo\nfi\necho 'For more information, see: https://github.com/junegunn/fzf'\n"
        },
        {
          "name": "install.ps1",
          "type": "blob",
          "size": 1.837890625,
          "content": "$version=\"0.57.0\"\n\n$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition\n\nfunction check_binary () {\n  Write-Host \"  - Checking fzf executable ... \" -NoNewline\n  $output=cmd /c $fzf_base\\bin\\fzf.exe --version 2>&1\n  if (-not $?) {\n    Write-Host \"Error: $output\"\n    $binary_error=\"Invalid binary\"\n  } else {\n    $output=(-Split $output)[0]\n    if ($version -ne $output) {\n      Write-Host \"$output != $version\"\n      $binary_error=\"Invalid version\"\n    } else {\n      Write-Host \"$output\"\n      $binary_error=\"\"\n      return 1\n    }\n  }\n  Remove-Item \"$fzf_base\\bin\\fzf.exe\"\n  return 0\n}\n\nfunction download {\n  param($file)\n  Write-Host \"Downloading bin/fzf ...\"\n  if (Test-Path \"$fzf_base\\bin\\fzf.exe\") {\n    Write-Host \"  - Already exists\"\n    if (check_binary) {\n      return\n    }\n  }\n  if (-not (Test-Path \"$fzf_base\\bin\")) {\n    md \"$fzf_base\\bin\"\n  }\n  if (-not $?) {\n    $binary_error=\"Failed to create bin directory\"\n    return\n  }\n  cd \"$fzf_base\\bin\"\n  $url=\"https://github.com/junegunn/fzf/releases/download/v$version/$file\"\n  $temp=$env:TMP + \"\\fzf.zip\"\n  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\n  if ($PSVersionTable.PSVersion.Major -ge 3) {\n    Invoke-WebRequest -Uri $url -OutFile $temp\n  } else {\n    (New-Object Net.WebClient).DownloadFile($url, $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(\"$temp\"))\n  }\n  if ($?) {\n    (Microsoft.PowerShell.Archive\\Expand-Archive -Path $temp -DestinationPath .); (Remove-Item $temp)\n  } else {\n    $binary_error=\"Failed to download with powershell\"\n  }\n  if (-not (Test-Path fzf.exe)) {\n    $binary_error=\"Failed to download $file\"\n    return\n  }\n  echo y | icacls $fzf_base\\bin\\fzf.exe /grant Administrator:F ; check_binary >$null\n}\n\ndownload \"fzf-$version-windows_amd64.zip\"\n\nWrite-Host 'For more information, see: https://github.com/junegunn/fzf'\n"
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 1.9248046875,
          "content": "package main\n\nimport (\n\t_ \"embed\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"strings\"\n\n\tfzf \"github.com/junegunn/fzf/src\"\n\t\"github.com/junegunn/fzf/src/protector\"\n)\n\nvar version = \"0.57\"\nvar revision = \"devel\"\n\n//go:embed shell/key-bindings.bash\nvar bashKeyBindings []byte\n\n//go:embed shell/completion.bash\nvar bashCompletion []byte\n\n//go:embed shell/key-bindings.zsh\nvar zshKeyBindings []byte\n\n//go:embed shell/completion.zsh\nvar zshCompletion []byte\n\n//go:embed shell/key-bindings.fish\nvar fishKeyBindings []byte\n\n//go:embed man/man1/fzf.1\nvar manPage []byte\n\nfunc printScript(label string, content []byte) {\n\tfmt.Println(\"### \" + label + \" ###\")\n\tfmt.Println(strings.TrimSpace(string(content)))\n\tfmt.Println(\"### end: \" + label + \" ###\")\n}\n\nfunc exit(code int, err error) {\n\tif code == fzf.ExitError && err != nil {\n\t\tfmt.Fprintln(os.Stderr, err.Error())\n\t}\n\tos.Exit(code)\n}\n\nfunc main() {\n\tprotector.Protect()\n\n\toptions, err := fzf.ParseOptions(true, os.Args[1:])\n\tif err != nil {\n\t\texit(fzf.ExitError, err)\n\t\treturn\n\t}\n\tif options.Bash {\n\t\tprintScript(\"key-bindings.bash\", bashKeyBindings)\n\t\tprintScript(\"completion.bash\", bashCompletion)\n\t\treturn\n\t}\n\tif options.Zsh {\n\t\tprintScript(\"key-bindings.zsh\", zshKeyBindings)\n\t\tprintScript(\"completion.zsh\", zshCompletion)\n\t\treturn\n\t}\n\tif options.Fish {\n\t\tprintScript(\"key-bindings.fish\", fishKeyBindings)\n\t\tfmt.Println(\"fzf_key_bindings\")\n\t\treturn\n\t}\n\tif options.Help {\n\t\tfmt.Print(fzf.Usage)\n\t\treturn\n\t}\n\tif options.Version {\n\t\tif len(revision) > 0 {\n\t\t\tfmt.Printf(\"%s (%s)\\n\", version, revision)\n\t\t} else {\n\t\t\tfmt.Println(version)\n\t\t}\n\t\treturn\n\t}\n\tif options.Man {\n\t\tfile := fzf.WriteTemporaryFile([]string{string(manPage)}, \"\\n\")\n\t\tif len(file) == 0 {\n\t\t\tfmt.Print(string(manPage))\n\t\t\treturn\n\t\t}\n\t\tdefer os.Remove(file)\n\t\tcmd := exec.Command(\"man\", file)\n\t\tcmd.Stdin = os.Stdin\n\t\tcmd.Stdout = os.Stdout\n\t\tif err := cmd.Run(); err != nil {\n\t\t\tfmt.Print(string(manPage))\n\t\t}\n\t\treturn\n\t}\n\n\tcode, err := fzf.Run(options)\n\texit(code, err)\n}\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugin",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "typos.toml",
          "type": "blob",
          "size": 0.2109375,
          "content": "# See https://github.com/crate-ci/typos/blob/master/docs/reference.md to configure typos\n[default.extend-words]\nba = \"ba\"\nfo = \"fo\"\nenew = \"enew\"\ntabe = \"tabe\"\nIterm = \"Iterm\"\n\n[files]\nextend-exclude = [\"README.md\"]\n"
        },
        {
          "name": "uninstall",
          "type": "blob",
          "size": 2.4609375,
          "content": "#!/usr/bin/env bash\n\nxdg=0\nprefix='~/.fzf'\nprefix_expand=~/.fzf\nfish_dir=${XDG_CONFIG_HOME:-$HOME/.config}/fish\n\nhelp() {\n  cat << EOF\nusage: $0 [OPTIONS]\n\n    --help               Show this message\n    --xdg                Remove files generated under \\$XDG_CONFIG_HOME/fzf\nEOF\n}\n\nfor opt in \"$@\"; do\n  case $opt in\n    --help)\n      help\n      exit 0\n      ;;\n    --xdg)\n      xdg=1\n      prefix='\"${XDG_CONFIG_HOME:-$HOME/.config}\"/fzf/fzf'\n      prefix_expand=${XDG_CONFIG_HOME:-$HOME/.config}/fzf/fzf\n      ;;\n    *)\n      echo \"unknown option: $opt\"\n      help\n      exit 1\n      ;;\n  esac\ndone\n\nask() {\n  while true; do\n    read -p \"$1 ([y]/n) \" -r\n    REPLY=${REPLY:-\"y\"}\n    if [[ $REPLY =~ ^[Yy]$ ]]; then\n      return 0\n    elif [[ $REPLY =~ ^[Nn]$ ]]; then\n      return 1\n    fi\n  done\n}\n\nremove() {\n  echo \"Remove $1\"\n  rm -f \"$1\"\n}\n\nremove_line() {\n  src=$1\n  echo \"Remove from $1:\"\n\n  shift\n  line_no=1\n  match=0\n  while [ -n \"$1\" ]; do\n    line=$(sed -n \"$line_no,\\$p\" \"$src\" | \\grep -m1 -nF \"$1\")\n    if [ $? -ne 0 ]; then\n      shift\n      line_no=1\n      continue\n    fi\n    line_no=$(( $(sed 's/:.*//' <<< \"$line\") + line_no - 1 ))\n    content=$(sed 's/^[0-9]*://' <<< \"$line\")\n    match=1\n    echo    \"  - Line #$line_no: $content\"\n    [ \"$content\" = \"$1\" ] || ask \"    - Remove?\"\n    if [ $? -eq 0 ]; then\n      temp=$(mktemp)\n      awk -v n=$line_no 'NR == n {next} {print}' \"$src\" > \"$temp\" &&\n        cat \"$temp\" > \"$src\" && rm -f \"$temp\" || break\n      echo  \"      - Removed\"\n    else\n      echo  \"      - Skipped\"\n      line_no=$(( line_no + 1 ))\n    fi\n  done\n  [ $match -eq 0 ] && echo \"  - Nothing found\"\n  echo\n}\n\nfor shell in bash zsh; do\n  shell_config=${prefix_expand}.${shell}\n  remove \"${shell_config}\"\n  remove_line ~/.${shell}rc \\\n    \"[ -f ${prefix}.${shell} ] && source ${prefix}.${shell}\" \\\n    \"source ${prefix}.${shell}\"\ndone\n\nbind_file=\"${fish_dir}/functions/fish_user_key_bindings.fish\"\nif [ -f \"$bind_file\" ]; then\n  remove_line \"$bind_file\" \"fzf_key_bindings\"\n  remove_line \"$bind_file\" \"fzf --fish | source\"\nfi\n\nif [ -d \"${fish_dir}/functions\" ]; then\n  remove \"${fish_dir}/functions/fzf.fish\"\n  remove \"${fish_dir}/functions/fzf_key_bindings.fish\"\n\n  if [ -z \"$(ls -A \"${fish_dir}/functions\")\" ]; then\n    rmdir \"${fish_dir}/functions\"\n  else\n    echo \"Can't delete non-empty directory: \\\"${fish_dir}/functions\\\"\"\n  fi\nfi\n\nconfig_dir=$(dirname \"$prefix_expand\")\nif [[ \"$xdg\" = 1 ]] && [[ \"$config_dir\" = */fzf ]] && [[ -d \"$config_dir\" ]]; then\n  rmdir \"$config_dir\"\nfi\n"
        }
      ]
    }
  ]
}