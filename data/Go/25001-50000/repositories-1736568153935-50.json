{
  "metadata": {
    "timestamp": 1736568153935,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "danielmiessler/fabric",
      "stars": 26679,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".devcontainer",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": ".git\n.gitignore\n.env\nREADME.md\ndocker-compose.yml\nDockerfile "
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.0302734375,
          "content": "watch_file shell.nix\nuse flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 6.2861328125,
          "content": "# Nix\n.direnv\nresult\n\n# macOS local stores\n.DS_Store\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\n.idea\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\n\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py,cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#pdm.lock\n#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it\n#   in version control.\n#   https://pdm.fming.dev/#use-with-ide\n.pdm.toml\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\npatterns/dialog_with_socrates/Apology by Plato.txt\npatterns/dialog_with_socrates/Phaedrus by Plato.txt\npatterns/dialog_with_socrates/Symposium by Plato.txt\npatterns/dialog_with_socrates/The Economist by Xenophon.txt\npatterns/dialog_with_socrates/The Memorabilia by Xenophon.txt\npatterns/dialog_with_socrates/The Memorable Thoughts of Socrates by Xenophon.txt\npatterns/dialog_with_socrates/The Republic by Plato.txt\npatterns/dialog_with_socrates/The Symposium by Xenophon.txt\n\nweb/node_modules\n\n# Output\nweb/.output\nweb/.vercel\nweb/.svelte-kit\nweb/build\n\n# OS\nweb/.DS_Store\nweb/Thumbs.db\n\n# Env\nweb/.env\nweb/.env.*\nweb/!.env.example\nweb/!.env.test\n\n# Vite\nweb/vite.config.js.timestamp-*\nweb/vite.config.ts.timestamp-*\n# Created by https://www.toptal.com/developers/gitignore/api/node\n# Edit at https://www.toptal.com/developers/gitignore?templates=node\n\n### Node ###\n# Logs\nweb/logs\nweb/*.log\nweb/npm-debug.log*\nweb/yarn-debug.log*\nweb/yarn-error.log*\nweb/lerna-debug.log*\nweb/.pnpm-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nweb/report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\nweb/pids\nweb/*.pid\nweb/*.seed\nweb/*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nweb/lib-cov\n\n# Coverage directory used by tools like istanbul\nweb/coverage\nweb/*.lcov\n\n# nyc test coverage\nweb/.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\nweb/.grunt\n\n# Bower dependency directory (https://bower.io/)\nweb/bower_components\n\n# node-waf configuration\nweb/.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nweb/node_modules/\njspm_packages/\n\n# Snowpack dependency directory (https://snowpack.dev/)\nweb/web_modules/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\nweb/.npm\n\n# Optional eslint cache\nweb/.eslintcache\n\n# Optional stylelint cache\nweb/.stylelintcache\n\n# Microbundle cache\nweb/.rpt2_cache/\nweb/.rts2_cache_cjs/\nweb/.rts2_cache_es/\nweb/.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variable files\nweb/.env\nweb/.env.development.local\nweb/.env.test.local\nweb/.env.production.local\nweb/.env.local\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n.parcel-cache\n\n# Next.js build output\nweb/.next\nweb/out\n\n# Nuxt.js build / generate output\nweb/.nuxt\nweb/dist\n\n# Gatsby files\nweb/.cache/\n# Comment in the public line in if your project uses Gatsby and not Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\nweb/.vuepress/dist\n\n# vuepress v2.x temp and cache directory\nweb/.temp\n\n# Docusaurus cache and generated files\n.docusaurus\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# Stores VSCode versions used for testing VSCode extensions\nweb/.vscode-test\n\n# yarn v2\nweb/.yarn/cache\nweb/.yarn/unplugged\nweb/.yarn/build-state.yml\nweb/.yarn/install-state.gz\nweb/.pnp.*\n\n### Node Patch ###\n# Serverless Webpack directories\nweb/.webpack/\n\n# Optional stylelint cache\n\n# SvelteKit build / generate output\nweb/.svelte-kit\n\n# End of https://www.toptal.com/developers/gitignore/api/node\n\n"
        },
        {
          "name": "Alma.md",
          "type": "blob",
          "size": 20.296875,
          "content": "## Document Purpose\n\nThis document captures the SPQA policy and State for Alma Security, a security startup out of Redwood City, Ca.\n\nThis is part of the SPQA context that will be used to answer questions and create artifacts for the company, e.g., company strategy, security strategy, quarterly security reports (QSRs), project plans, recommendations on which projects to undertake, which investments to take and avoid, and other such decisions.\n\nA major aspect of the SPQA system is the definition of the company's mission, goals, KPIs, and challenges. These shape everything within the company and thus should be used to shape the recommendations made when asked.\n\nIn addition to the clearly stated goals and other defining characteristics listed above, there will also be a streaming list of updates coming into this system using the Activity document.\n\nThose will be changes, updates, or modifications to the direction of the company. For example, if Goal number 4 is to build a new datacenter in Boise, Idaho, but we see an update in the Activity section that says we've lost the ability to build in Boise, we should consider goal #4 out of the picture for prioritization and other decision purposes. In other words, the streaming activity log into this document should be considered updates to the core content.\n\n## Company History\n\nAlma Security was started by Chris Meyers, who was previously at Sigma Systems as CTO and HPE as a senior security engineer.\n\nHe started the company because, \"I saw a gap in the authentication market, where companies were only looking at one or two aspects of one's identity to do authentication. They we're looking at the whole picture and turning that into a continuous authentication story.\"\n\n## Company Mission\n\nThe mission of Alma Security is to ensure businesses can continuously authenticate their users using their whole selves.\n\n## Company Goals (G1 means goal 1, G2 is goal 2, etc. Treat each item (goal/kpi/etc) as half as important as the one before it.)\n\nNOTE: Some goals are things like project rollouts which serve the higher goals. In that case they shouldn't always be considered so much lower priority because one is serving the other.\n\n## Company Goals\n\n- G1: Achieve 20% market share by January 2025\n- G2: Hit 10000 active customers by January 2025\n- G3: Hit a customer trust score of 90+% by January 2025\n- G4: Get churn below 5% by August 2024\n- G5: Launch in Europe by August 2024\n- G6: Launch in India by November 2024\n- G7: Launch Mood-monitor integration by February 2024\n- G8: Launch partnership with Apple Passkeys by June 2024\n\n## Company KPIs\n\n- K1: Current marketshare percentage\n- K2: Number of active customers\n- K3: Current churn percentage\n- K4: Launched_in_Europe (yes/no)\n- K4: Launched_in_India (yes/no)\n\n-----------------------------------------------------------------------------------------------------------------------\n\n## Security Team Mission \n\n- SM1: Protect Alma Security's customers and intellectual property from security and privacy incidents.\n\n## Security Team Goals\n\n- SG1: Secure all customer data -- especially biometric -- from security and privacy incidents. \n- SG2: Protect Alma Security's intellectual property from being captured by unauthorized parties.\n- SG3: Reach a time to detect malicious behavior of less than 4 minutes by January 2025\n- SG4: Ensure the public trusts our product, because it's an authentication product we can't survive if people don't trust us.\n- SG5: Reach a time to remediate critical vulnerabilties on crown jewel systems of less than 16 hours by August 2025\n- SG6: Reach a time to remediate critical vulnerabilties on all systems of less than 3 days by August 2025\n- SG5: Reach a time to remediate critical vulnerabilities on crown jewel systems of less than 16 hours by August 2025\n- SG6: Reach a time to remediate critical vulnerabilities on all systems of less than 3 days by August 2025\n- SG7: Complete audit of Apple Passkey integration by February 2025\n- SG8: Complete remediation of Apple Passkey vulns by February 2025\n\n## Security Team KPIs (How we measure the team)\n\n- SK1: TTD: Time to detect malicious behavior (Minutes)\n- SK1: TTI: Time to begin investigation of malicious behavior (Minutes)\n- SK3: TTR-CJC: Time to remediate critical vulnerabilities on crown jewel systems (Hours)\n- SK3: TTR-C: Time to remediate critical vulnerabilities on all systems (Hours)\n- SK4: PT: Public trust score (Complete, Significant, Moderate, Minimal, Distrust, N/A)\n\n## Risk Register (The things we're most worried about)\n\n- R1: Our infrastructure security team is understaffed by 50% after 5 key people left \n- R2: We are not currently monitoring our external perimeter for attack surface related vulnerabilities like open ports, listening applications, unknown hosts, unknown subdomains pointing to these things, etc. We only do scans once every couple of months and we don't really have anyone to look at the results\n- R3: It takes us multiple days to investigate potential malicious behavior on our systems.\n- R4: We lack a full list of our assets, including externally facing hosts, S3 buckets, etc., which make up our attack surface\n- R5: We have a low public trust score due to the events of 2022.\n\n## Security Team Narrative\n\n### Background\n\nAlma hired a new security team starting in January of 2023 and we have been building out the program since then. The philosophy and approach for the security team is to explicitly articulate what we believe the highest risks are to Alma, to deploy targeted strategies to address those risks, and to use clear, transparent KPIs to show progress towards our goals over time.\n\n### Current Risks\n\nSo our risk register looks like this:\n\n1. We are understaffed by 50% after 5 key people left in 2022\n2. Our perimeter is not being monitored for attack surface related vulnerabilities\n3. It takes us too long to detect and start investigating malicious behavior on our systems\n4. We do not have a full list of our assets, which makes it difficult to know what we need to protect\n5. We have a low public trust score due to the events of 2022 \n\n### Strategies\n\nAs such, our strategies are as follows:\n\n1. Hire 5 more A-tier security professionals\n2. Purchase and implement an attack surface management solution\n3. Invest in our detection and response capabilities\n4. Purchase an asset inventory system that integrates with our attack surface management tool\n5. Leverage PR to share as much of our progress as possible with the public to rebuild trust\n\n### How We're Doing\n\nWe believe being transparent about our progress is key to everything, and for that reason we maintain a limited number of KPIs that we update every quarter. These metrics will not change often. They will remain consistent so that it's easy to track how we're spending our resources and the progress we're making.\n\nThose KPIs are:\n\n1. Time to detect malicious behavior\n2. Time to start investigating malicious behavior\n3. Time to remediate critical vulnerabilities on crown jewel systems\n4. Time to remediate critical vulnerabilities on all systems\n5. Our public trust score\n\nAs of $DATE$, our KPIs for these are currently:\n\n$GIVE CURRENT KPIs from the Activity section below$\n\n$INSERT GRAPHS OF KPI PROGRESS OVER TIME HERE$\n\n## Security Team Strategies\n\n- STS1: Hire 5 more A-tier security professionals\n- STS2: Purchase an attack surface management solution\n- STS3: Invest in our detection and response capabilities\n- STS4: Purchase an asset inventory system that integrates with our attack surface management tool\n\n## Infrastructure Notes (a basic description of our tech stack and various context around it)\n\n- We currently have no WAF protecting our main web app but we're considering adding one\n- We have had some issues with S3 buckets becoming public, or being set up as public, which has lead to some close calls with customer data almost being exposed.\n- alma.amazon-domain.com is our primary S3 bucket that contains everything, but it's not public readable or listable\n- We have a root account for our AWS account that doesn't yet have 2FA on it, but we're working on fixing that within a few weeks (but it's been open for a few months)\n- We also use Postgres for all our databases.\n- Developers have root access to the all kubernetes nodes via SSH on port 45,001 using a shared developer key issued during laptop provisioning. \n- We're a kubernetes shop and do everything through AWS\n- We're logging most stuff to Cloudtrail and we kind of use guarduty, but we don't have a 24/7 team to monitor alerts and logs. We should add that to our list of challenges next time we update our overarll policy\n- We also have a Windows infrastructure because some key personnel came from Microsoft. The DC is hosted in our head office which is in Redwood City, and anyone who works in that office (most of the 300 employees) uses that to log in when they start work. The domain is ALMA.\n- There's a domain-joined fileserver running Windows 2012 that most people use to upload new ideas and plans for new products. It uses Windows authentication from the domain. \n- We use a palo alto firewall with 2fa using windows authenticator tied to SSO.\n- The name of the AI system doing all this context creation using SPQA is Alma, which is also the name of the company.\n- We use Workday for HR stuff. Slack for realtime communications. Outlook 365 as a service. Sentinel One on the workstations and laptops. Servers in AWS are mostly Amazon Linux 2 with a few Ubuntu boxes that are a few years old. \n- We also primarily use Postgres for all of our systems.\n\n## Team\n\nTEAM MEMBER | TEAM ASSIGNED | SKILLS | PAY LEVEL | LOCATION | PROJECTS\n\nNadia Khan | Detection and Response | D&R (Expert), AWS (Strong), Python (Expert), Kubernetes (Basic), Postgres (Basic) | $249K | Redwood City\nChris Magann | Vulnerability Management | VM (Expert), AWS (Strong), Python (Basic), Postgres (Basic) | $212K | Redwood City\nTigan Wang | Vulnerability Management | VM (Expert), AWS (Strong), Python (Basic), Postgres (Basic) | $217K | Redwood City\n\n## Projects\n\nPROJECT NAME | PROJECT DESCRIPTION | PROJECT PRIORITY | PROJECT MEMBERS | START DATE | END DATE | STATUS | PROJECT COST\n\nWAF Install | Install a WAF in front of our main web app | Critical | Nadia Khan | 2024-01-01 - Ongoing | In Progress | $112K one-time, $9K/month\n\nMulti-Factor Authentication (MFA) Rollout | Implement MFA across all internal and external systems | Critical | Chris Magaan | 2024-01-15 | 2024-05-01 | Planned | $80K one-time, $5K/month \n\nProcure and Implement ASM | Implement continuous monitoring for attack surface vulnerabilities | High | Tigan Wang | 2024-02-15 | 2024-06-15 | Not Started | $75K one-time, $6K/month \n\nData Encryption Upgrade | Upgrade encryption protocols for all sensitive data | Medium | Nadia Khan | 2024-04-01 | 2024-08-01 | Planned | $95K one-time \n\nIncident Response Enhancement | Develop and implement a 24/7 incident response team | High | Nadia Khan | 2024-03-01 | 2024-07-01 | In Progress | $150K one-time, $10K/month \n\nCloud Security Optimization | Optimize AWS cloud security configurations and practices | Medium | Tigan Wang | 2024-02-01 | 2024-06-01 | In Progress | $100K one-time, $8K/month \n\nS3 Bucket Security | Review and secure all S3 buckets to prevent data breaches | High | Chris Magaan | 2024-01-10 | 2024-04-10 | In Progress | $70K one-time, $5K/month\n\nSQL Injection Mitigation | Implement measures to eliminate SQL injection vulnerabilities | High | Tigan Wang | 2024-01-20 | 2024-05-20 | Not Started | $60K one-time \n\n## SECURITY POSTURE (To be referenced for compliance questions and security questionnaires)\n\nJuly 2019\nAdmin accounts still not required to use 2FA.\nCompany laptops distributed to employees, no MDM yet for device management.\nAWS IAM roles created for engineers, but root access still frequently used.\nStarted basic vulnerability scanning using open-source tools.\nDecember 2019\n\nMFA enforced for all Google Workspace accounts after a phishing attempt.\nIntroduced ClamAV for basic endpoint protection on corporate laptops.\nAWS GuardDuty enabled for threat detection, but no formal incident response team.\nFirst incident response plan table-top exercise conducted, but findings not fully documented.\nApril 2020\n\nMigrated from Google Workspace to Office 365, with MFA enabled for all users.\nRolled out SentinelOne for endpoint protection on 50% of company laptops.\nImplemented least-privilege access control for AWS IAM roles.\nFirst formal vendor risk management review completed for major SaaS providers.\nAugust 2020\n\nCompleted full deployment of SentinelOne across all endpoints.\nImplemented AWS CloudWatch for real-time alerts; however, logs still not monitored 24/7.\nBegan encrypting all AWS S3 buckets at rest using server-side encryption.\nFirst internal review of data retention policies, started drafting data disposal policy.\nJanuary 2021\n\nRolled out Jamf MDM for centralized management of macOS devices, enforcing encryption (FileVault) on all laptops.\nStrengthened Office 365 security by implementing phishing-resistant MFA using authenticator apps.\nAWS KMS introduced for managing encryption keys; manual key rotation policy documented.\nIntroduced formal onboarding and offboarding processes for employee account management.\nJuly 2021\n\nConditional access policies introduced for Office 365, restricting access based on geography (US-only).\nConducted company-wide security awareness training for the first time, focusing on phishing threats.\nCompleted first backup and disaster recovery (DR) drill with AWS, documenting recovery times.\nAWS Config deployed to monitor and enforce encryption and access control policies across accounts.\nDecember 2021\n\nFull migration to AWS for all production systems completed.\nIncident response playbook finalized and shared with the security team; still no 24/7 monitoring.\nDocumented data classification policies for handling sensitive customer data in preparation for SOC 2 audit.\nFirst third-party penetration test conducted, critical vulnerabilities identified and remediated within 30 days.\nMarch 2022\n\nRolled out company-wide 2FA for all critical systems, including Office 365, AWS, GitHub, and Slack.\nIntroduced AWS Secrets Manager for managing sensitive credentials, eliminating hardcoded API keys.\nUpdated all documentation for identity and access management in preparation for SOC 2 Type 1 audit.\nFirst external vulnerability scan completed using Qualys, with remediation SLAs established.\nApril 2022\n\nUpdated and consolidated all security policies (incident response, access control, data retention) in preparation for SOC 2 audit.\nConducted tabletop exercise for ransomware response, documenting gaps in the incident response process.\nImplemented Just-In-Time (JIT) access for administrative privileges in AWS, reducing unnecessary persistent access.\nOctober 2022\n\nPassed SOC 2 Type 1 audit, with recommendations to improve monitoring and asset management.\nLaunched quarterly phishing simulations to raise employee awareness and track training effectiveness.\nFully enforced encryption for all customer data in transit and at rest using AWS KMS.\nExtended GuardDuty to cover all AWS regions; started monitoring alerts daily.\nJanuary 2023\n\nHired a dedicated CISO and expanded security team by 30%.\nIntegrated continuous vulnerability scanning across all externally facing assets using Qualys.\nConducted first third-party vendor risk assessment to ensure alignment with SOC 2 and internal security standards.\nImplemented automated patch management for all AWS EC2 instances, reducing time to deploy critical patches.\nJuly 2023\n\nRolled out continuous attack surface monitoring (ASM) to identify and remediate external vulnerabilities.\nPerformed annual data retention review, ensuring compliance with SOC 2 and GDPR requirements.\nConducted a disaster recovery drill for AWS workloads, achieving a recovery time objective (RTO) of under 4 hours.\nCompleted SOC 2 Type 2 readiness assessment, with focus on improving incident response times.\nNovember 2023\n\nUpdated incident response documentation and assigned 24/7 monitoring to a third-party SOC provider.\nRolled out zero-trust network architecture across the organization, removing reliance on VPN for remote access.\nPassed SOC 2 Type 2 audit with no major findings; recommendations included improved asset inventory tracking.\nConducted full audit of access control policies and JIT access implementation in preparation for ISO 27001 certification.\nApril 2024\n\nImplemented AI-driven threat detection to reduce time to detect security incidents from 10 hours to under 2 hours.\nCompleted full encryption audit across all databases, ensuring compliance with GDPR, HIPAA, and other privacy regulations.\nUpdated employee training programs to include privacy regulations (GDPR, CCPA) and data handling best practices.\nCompleted internal review and audit of vendor access to critical systems as part of SOC 2 compliance effort.\nCompleted move of all AWS services to us-west-2  and us-east-1 regions for 100% us-based cloud services.\nOctober 2024\n\nConducted organization-wide review of data retention and disposal policies, implementing automated data deletion for expired data.\nImplemented continuous compliance monitoring for SOC 2, with automated alerts for deviations in access controls and encryption settings.\nFinalized implementation of AI-based monitoring and response systems, significantly reducing time to remediate critical vulnerabilities.\nPassed SOC 2 Type 2 and ISO 27001 audits with zero non-conformities, achieving full compliance across all control areas.March 2018\n\nPersonal Gmail accounts used for internal and external communication.\nNo 2FA enabled on any accounts.\nAWS accounts shared with engineers, no IAM roles or formal access control policies.\nNo centralized endpoint protection; employees use personal laptops with no security controls.\nNo documented security policies or incident response plan.\nSeptember 2018\n\nInitiated migration from personal Gmail to Google Workspace (G Suite) for business email.\nPassword complexity requirements introduced (minimum 8 characters).\nAWS root credentials still shared among team members, no MFA enabled.\nNo formal logging or monitoring in place for AWS activity.\nFebruary 2019\n\nCompleted migration to Google Workspace; no email encryption yet.\nIntroduced a basic password manager (LastPass) but no enforcement policy.\nAWS CloudTrail enabled for logging, but no one is reviewing logs.\nFirst draft of the incident response plan created, but not tested.\nJune 2019\n\nEnforced MFA for Google Workspace admin accounts; standard user\n## CURRENT STATE (KPIs, Metrics, Project Activity Updates, etc.)\n- October 2022: Current time to detect malicious behavior is 81 hours\n- October 2022: Current time to start investigating malicious behavior is 82 hours\n- October 2022: Current time to remediate critical vulnerabilities on crown jewel systems is 21 days\n- October 2022: Current time to remediate critical vulnerabilities on all systems is 51 days\n- January 2023: Current time to detect malicious behavior is 62 hours\n- January 2023: Current time to start investigating malicious behavior is 72 hours\n- January 2023: Current time to remediate critical vulnerabilities on crown jewel systems is 17 days\n- January 2023: Current time to remediate critical vulnerabilities on all systems is 43 days\n- July 2023: Current time to detect malicious behavior is 29 hours\n- July 2023: Current time to start investigating malicious behavior is 41 hours\n- July 2023: Current time to remediate critical vulnerabilities on crown jewel systems is 12 days\n- July 2023: Current time to remediate critical vulnerabilities on all systems is 29 days\n- November 2023: Current time to start detect malicious behavior is 12 hours\n- November 2023: Current time to start investigating malicious behavior is 16 hours\n- November 2023: Current time to remediate critical vulnerabilities on crown jewel systems is 9 days\n- November 2023: Current time to remediate critical vulnerabilities on all systems is 17 days\n- February 2024: Started attack surface management vendor selection process\n- January 2024: Current time to start detect malicious behavior is 9 hours\n- January 2024: Current time to start investigating malicious behavior is 14 hours\n- January 2024: Current time to remediate critical vulnerabilities on crown jewel systems is 8 days\n- January 2024: Current time to remediate critical vulnerabilities on all systems is 12 days\n- March 2024: We're now remediating crits on crown jewels in less than 6 days\n- April 2024: We're now remediating all criticals within 11 days\n- July 2024: Criticals are now being fixed in 9 days\n- On August 5 we got remediation of critical vulnerabilities down to 7 days\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.7900390625,
          "content": "# Use official golang image as builder\nFROM golang:1.23.3-alpine AS builder\n\n# Set working directory\nWORKDIR /app\n\n# Copy go mod and sum files\nCOPY go.mod go.sum ./\n\n# Download dependencies\nRUN go mod download\n\n# Copy source code\nCOPY . .\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -o fabric\n\n# Use scratch as final base image\nFROM alpine:latest\n\n# Copy the binary from builder\nCOPY --from=builder /app/fabric /fabric\n\n# Copy patterns directory\nCOPY patterns /patterns\n\n# Ensure clean config directory and copy ENV file\nRUN rm -rf /root/.config/fabric && \\\n    mkdir -p /root/.config/fabric\nCOPY ENV /root/.config/fabric/.env\n\n# Add debug commands\nRUN ls -la /root/.config/fabric/\n\n# Expose port 8080\nEXPOSE 8080\n\n# Run the binary with debug output\nENTRYPOINT [\"/fabric\"]\nCMD [\"--serve\"] \n"
        },
        {
          "name": "ENV",
          "type": "blob",
          "size": 0.34375,
          "content": "DEFAULT_VENDOR=OpenRouter\nDEFAULT_MODEL=openai/gpt-3.5-turbo-0125\nDEFAULT_MODEL_CONTEXT_LENGTH=128K\nPATTERNS_LOADER_GIT_REPO_URL=https://github.com/danielmiessler/fabric.git\nPATTERNS_LOADER_GIT_REPO_PATTERNS_FOLDER=patterns\nOPENROUTER_API_KEY=sk-or-v1-\nOPENROUTER_API_BASE_URL=https://openrouter.ai/api/v1\nYOUTUBE_API_KEY=AIzaS\nJINA_AI_API_KEY=jina_57\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "MIT License\n\nCopyright (c) 2012-2024 Scott Chacon and others\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
        },
        {
          "name": "NOTES.md",
          "type": "blob",
          "size": 2.7734375,
          "content": "## Notes on some refactoring.\n\n- The goal is to bring more encapsulation of the models management and simplified configuration management to bring increased flexibility, transparency on the overall flow, and simplicity in adding new model.\n- We need to differentiate:\n  - Vendors: the producer of models (like OpenAI, Azure, Anthropric, Ollama, ..etc) and their associated APIs\n  - Models: the LLM models these vendors are making public\n- Each vendor and operations allowed by the vendor needs to be encapsulated. This includes:\n  - The questions needed to setup the model (like the API key, or the URL)\n  - The listing of all models supported by the vendor\n  - The actions performed with a given model\n\n- The configuration flow works like this for an **initial** call:\n  - The available vendors are called one by one, each of them being responsible for the data they collect. They return a set of environment variables under the form of a list of strings, or an empty list if the user does not want to setup this vendor. As we do not want each vendor to know which way the data they need will be collected (e.g., read from the command line, or a GUI), they will be asked for a list of questions, the configuration will inquire the user, and send back the questions with the collected answers to the Vendor. The Vendor is then either instantiating an instance (Vendor configured) and returning it, or returning `nil` if the Vendor should not be set up.\n  - the `.env` file is created, using the information returned by the vendors\n  - A list of patterns is downloaded from the main site\n\n- When the system is configured, the configuration flows:\n  - Read the `.env` file using the godotenv library\n  - It configures a structure that contains the various vendors selected as well as the preferred model. This structure will be completed with some of the command line values (i.e, context, session, etc..)\n\n- To get the list of all supported models:\n  - Each configured model (part of the configuration structure) is asked, using a goroutine, to return the list of model\n\n- Order when building message: session + context + pattern + user input (role \"user)\n\n\n## TODO:\n- Check if we need to read the system.md for every patterns when running the ListAllPatterns\n- Context management seems more complex than the one in the original fabric. Probably needs some work (at least to make it clear how it works)\n- models on command line: give as well vendor (like `--model openai/gpt-4o`). If the vendor is not given, get it by retrieving all possible models and searching from that.\n- if user gives the ollama url on command line, we need to update/init an ollama vendor.\n- The db should host only things related to access and storage in ~/.config/fabric\n- The interaction part of the Setup function should be in the cli (and perhaps all the Setup)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 23.513671875,
          "content": "<div align=\"center\">\n\n<img src=\"./images/fabric-logo-gif.gif\" alt=\"fabriclogo\" width=\"400\" height=\"400\"/>\n\n# `fabric`\n\n![Static Badge](https://img.shields.io/badge/mission-human_flourishing_via_AI_augmentation-purple)\n<br />\n![GitHub top language](https://img.shields.io/github/languages/top/danielmiessler/fabric)\n![GitHub last commit](https://img.shields.io/github/last-commit/danielmiessler/fabric)\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)\n\n<p class=\"align center\">\n<h4><code>fabric</code> is an open-source framework for augmenting humans using AI.</h4>\n</p>\n\n[Updates](#updates) •\n[What and Why](#whatandwhy) •\n[Philosophy](#philosophy) •\n[Installation](#Installation) •\n[Usage](#Usage) •\n[Examples](#examples) •\n[Just Use the Patterns](#just-use-the-patterns) •\n[Custom Patterns](#custom-patterns) •\n[Helper Apps](#helper-apps) •\n[Meta](#meta)\n\n![Screenshot of fabric](images/fabric-summarize.png)\n\n</div>\n\n## Navigation\n\n- [`fabric`](#fabric)\n  - [Navigation](#navigation)\n  - [Updates](#updates)\n  - [Intro videos](#intro-videos)\n  - [What and why](#what-and-why)\n  - [Philosophy](#philosophy)\n    - [Breaking problems into components](#breaking-problems-into-components)\n    - [Too many prompts](#too-many-prompts)\n  - [Installation](#installation)\n    - [Get Latest Release Binaries](#get-latest-release-binaries)\n    - [From Source](#from-source)\n    - [Environment Variables](#environment-variables)\n    - [Setup](#setup)\n    - [Add aliases for all patterns](#add-aliases-for-all-patterns)\n      - [Save your files in markdown using aliases](#save-your-files-in-markdown-using-aliases)\n    - [Migration](#migration)\n    - [Upgrading](#upgrading)\n  - [Usage](#usage)\n  - [Our approach to prompting](#our-approach-to-prompting)\n  - [Examples](#examples)\n  - [Just use the Patterns](#just-use-the-patterns)\n  - [Custom Patterns](#custom-patterns)\n  - [Helper Apps](#helper-apps)\n    - [`to_pdf`](#to_pdf)\n    - [`to_pdf` Installation](#to_pdf-installation)\n  - [pbpaste](#pbpaste)\n  - [Web Interface](#Web_Interface)\n  - [Meta](#meta)\n    - [Primary contributors](#primary-contributors)\n\n<br />\n\n## Updates\n\n> [!NOTE]\n> November 8, 2024\n>\n> - **Multimodal Support**: You can now use `-a` (attachment) for Multimodal submissions to OpenAI models that support it. Example: `fabric -a https://path/to/image \"Give me a description of this image.\"`\n\n## What and why\n\nSince the start of 2023 and GenAI we've seen a massive number of AI applications for accomplishing tasks. It's powerful, but _it's not easy to integrate this functionality into our lives._\n\n<div align=\"center\">\n<h4>In other words, AI doesn't have a capabilities problem—it has an <em>integration</em> problem.</h4>\n</div>\n\nFabric was created to address this by enabling everyone to granularly apply AI to everyday challenges.\n\n## Intro videos\n\nKeep in mind that many of these were recorded when Fabric was Python-based, so remember to use the current [install instructions](#Installation) below.\n\n- [Network Chuck](https://www.youtube.com/watch?v=UbDyjIIGaxQ)\n- [David Bombal](https://www.youtube.com/watch?v=vF-MQmVxnCs)\n- [My Own Intro to the Tool](https://www.youtube.com/watch?v=wPEyyigh10g)\n- [More Fabric YouTube Videos](https://www.youtube.com/results?search_query=fabric+ai)\n\n## Philosophy\n\n> AI isn't a thing; it's a _magnifier_ of a thing. And that thing is **human creativity**.\n\nWe believe the purpose of technology is to help humans flourish, so when we talk about AI we start with the **human** problems we want to solve.\n\n### Breaking problems into components\n\nOur approach is to break problems into individual pieces (see below) and then apply AI to them one at a time. See below for some examples.\n\n<img width=\"2078\" alt=\"augmented_challenges\" src=\"https://github.com/danielmiessler/fabric/assets/50654/31997394-85a9-40c2-879b-b347e4701f06\">\n\n### Too many prompts\n\nPrompts are good for this, but the biggest challenge I faced in 2023——which still exists today—is **the sheer number of AI prompts out there**. We all have prompts that are useful, but it's hard to discover new ones, know if they are good or not, _and manage different versions of the ones we like_.\n\nOne of <code>fabric</code>'s primary features is helping people collect and integrate prompts, which we call _Patterns_, into various parts of their lives.\n\nFabric has Patterns for all sorts of life and work activities, including:\n\n- Extracting the most interesting parts of YouTube videos and podcasts\n- Writing an essay in your own voice with just an idea as an input\n- Summarizing opaque academic papers\n- Creating perfectly matched AI art prompts for a piece of writing\n- Rating the quality of content to see if you want to read/watch the whole thing\n- Getting summaries of long, boring content\n- Explaining code to you\n- Turning bad documentation into usable documentation\n- Creating social media posts from any content input\n- And a million more…\n\n## Installation\n\nTo install Fabric, you can use the latest release binaries or install it from the source.\n\n### Get Latest Release Binaries\n\n```bash\n# Windows:\ncurl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-windows-amd64.exe > fabric.exe && fabric.exe --version\n\n# MacOS (arm64):\ncurl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-arm64 > fabric && chmod +x fabric && ./fabric --version\n\n# MacOS (amd64):\ncurl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-amd64 > fabric && chmod +x fabric && ./fabric --version\n\n# Linux (amd64):\ncurl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-amd64 > fabric && chmod +x fabric && ./fabric --version\n\n# Linux (arm64):\ncurl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-arm64 > fabric && chmod +x fabric && ./fabric --version\n```\n\n### From Source\n\nTo install Fabric, [make sure Go is installed](https://go.dev/doc/install), and then run the following command.\n\n```bash\n# Install Fabric directly from the repo\ngo install github.com/danielmiessler/fabric@latest\n```\n\n### Environment Variables\n\nYou may need to set some environment variables in your `~/.bashrc` on linux or `~/.zshrc` file on mac to be able to run the `fabric` command. Here is an example of what you can add:\n\nFor Intel based macs or linux\n\n```bash\n# Golang environment variables\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\n\n# Update PATH to include GOPATH and GOROOT binaries\nexport PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH\n```\n\nfor Apple Silicon based macs\n\n```bash\n# Golang environment variables\nexport GOROOT=$(brew --prefix go)/libexec\nexport GOPATH=$HOME/go\nexport PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH\n```\n\n### Setup\n\nNow run the following command\n\n```bash\n# Run the setup to set up your directories and keys\nfabric --setup\n```\n\nIf everything works you are good to go.\n\n### Add aliases for all patterns\n\nIn order to add aliases for all your patterns and use them directly as commands ie. `summarize` instead of `fabric --pattern summarize`\nYou can add the following to your `.zshrc` or `.bashrc` file.\n\n```bash\n# Loop through all files in the ~/.config/fabric/patterns directory\nfor pattern_file in $HOME/.config/fabric/patterns/*; do\n    # Get the base name of the file (i.e., remove the directory path)\n    pattern_name=$(basename \"$pattern_file\")\n\n    # Create an alias in the form: alias pattern_name=\"fabric --pattern pattern_name\"\n    alias_command=\"alias $pattern_name='fabric --pattern $pattern_name'\"\n\n    # Evaluate the alias command to add it to the current shell\n    eval \"$alias_command\"\ndone\n\nyt() {\n    local video_link=\"$1\"\n    fabric -y \"$video_link\" --transcript\n}\n```\n\nYou can add the below code for the equivalent aliases inside PowerShell by running `notepad $PROFILE` inside a PowerShell window:\n\n```powershell\n# Path to the patterns directory\n$patternsPath = Join-Path $HOME \".config/fabric/patterns\"\nforeach ($patternDir in Get-ChildItem -Path $patternsPath -Directory) {\n    $patternName = $patternDir.Name\n\n    # Dynamically define a function for each pattern\n    $functionDefinition = @\"\nfunction $patternName {\n    [CmdletBinding()]\n    param(\n        [Parameter(ValueFromPipeline = `$true)]\n        [string] `$InputObject,\n\n        [Parameter(ValueFromRemainingArguments = `$true)]\n        [String[]] `$patternArgs\n    )\n\n    begin {\n        # Initialize an array to collect pipeline input\n        `$collector = @()\n    }\n\n    process {\n        # Collect pipeline input objects\n        if (`$InputObject) {\n            `$collector += `$InputObject\n        }\n    }\n\n    end {\n        # Join all pipeline input into a single string, separated by newlines\n        `$pipelineContent = `$collector -join \"`n\"\n\n        # If there's pipeline input, include it in the call to fabric\n        if (`$pipelineContent) {\n            `$pipelineContent | fabric --pattern $patternName `$patternArgs\n        } else {\n            # No pipeline input; just call fabric with the additional args\n            fabric --pattern $patternName `$patternArgs\n        }\n    }\n}\n\"@\n    # Add the function to the current session\n    Invoke-Expression $functionDefinition\n}\n\n# Define the 'yt' function as well\nfunction yt {\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory = $true)]\n        [string]$videoLink\n    )\n    fabric -y $videoLink --transcript\n}\n```\n\nThis also creates a `yt` alias that allows you to use `yt https://www.youtube.com/watch?v=4b0iet22VIk` to get transcripts, comments, and metadata.\n\n#### Save your files in markdown using aliases\n\nIf in addition to the above aliases you would like to have the option to save the output to your favourite markdown note vault like Obsidian then instead of the above add the following to your `.zshrc` or `.bashrc` file:\n\n```bash\n# Define the base directory for Obsidian notes\nobsidian_base=\"/path/to/obsidian\"\n\n# Loop through all files in the ~/.config/fabric/patterns directory\nfor pattern_file in ~/.config/fabric/patterns/*; do\n    # Get the base name of the file (i.e., remove the directory path)\n    pattern_name=$(basename \"$pattern_file\")\n\n    # Unalias any existing alias with the same name\n    unalias \"$pattern_name\" 2>/dev/null\n\n    # Define a function dynamically for each pattern\n    eval \"\n    $pattern_name() {\n        local title=\\$1\n        local date_stamp=\\$(date +'%Y-%m-%d')\n        local output_path=\\\"\\$obsidian_base/\\${date_stamp}-\\${title}.md\\\"\n\n        # Check if a title was provided\n        if [ -n \\\"\\$title\\\" ]; then\n            # If a title is provided, use the output path\n            fabric --pattern \\\"$pattern_name\\\" -o \\\"\\$output_path\\\"\n        else\n            # If no title is provided, use --stream\n            fabric --pattern \\\"$pattern_name\\\" --stream\n        fi\n    }\n    \"\ndone\n\nyt() {\n    local video_link=\"$1\"\n    fabric -y \"$video_link\" --transcript\n}\n```\n\nThis will allow you to use the patterns as aliases like in the above for example `summarize` instead of `fabric --pattern summarize --stream`, however if you pass in an extra argument like this `summarize \"my_article_title\"` your output will be saved in the destination that you set in `obsidian_base=\"/path/to/obsidian\"` in the following format `YYYY-MM-DD-my_article_title.md` where the date gets autogenerated for you.\nYou can tweak the date format by tweaking the `date_stamp` format.\n\n### Migration\n\nIf you have the Legacy (Python) version installed and want to migrate to the Go version, here's how you do it. It's basically two steps: 1) uninstall the Python version, and 2) install the Go version.\n\n```bash\n# Uninstall Legacy Fabric\npipx uninstall fabric\n\n# Clear any old Fabric aliases\n(check your .bashrc, .zshrc, etc.)\n# Install the Go version\ngo install github.com/danielmiessler/fabric@latest\n# Run setup for the new version. Important because things have changed\nfabric --setup\n```\n\nThen [set your environmental variables](#environmental-variables) as shown above.\n\n### Upgrading\n\nThe great thing about Go is that it's super easy to upgrade. Just run the same command you used to install it in the first place and you'll always get the latest version.\n\n```bash\ngo install github.com/danielmiessler/fabric@latest\n```\n\n## Usage\n\nOnce you have it all set up, here's how to use it.\n\n```bash\nfabric -h\n```\n\n```bash\n\nUsage:\n  fabric [OPTIONS]\n\nApplication Options:\n  -p, --pattern=             Choose a pattern from the available patterns\n  -v, --variable=            Values for pattern variables, e.g. -v=#role:expert -v=#points:30\"\n  -C, --context=             Choose a context from the available contexts\n      --session=             Choose a session from the available sessions\n  -a, --attachment=          Attachment path or URL (e.g. for OpenAI image recognition messages)\n  -S, --setup                Run setup for all reconfigurable parts of fabric\n  -t, --temperature=         Set temperature (default: 0.7)\n  -T, --topp=                Set top P (default: 0.9)\n  -s, --stream               Stream\n  -P, --presencepenalty=     Set presence penalty (default: 0.0)\n  -r, --raw                  Use the defaults of the model without sending chat options (like temperature etc.) and use the user role instead of the system role for patterns.\n  -F, --frequencypenalty=    Set frequency penalty (default: 0.0)\n  -l, --listpatterns         List all patterns\n  -L, --listmodels           List all available models\n  -x, --listcontexts         List all contexts\n  -X, --listsessions         List all sessions\n  -U, --updatepatterns       Update patterns\n  -c, --copy                 Copy to clipboard\n  -m, --model=               Choose model\n  -o, --output=              Output to file\n      --output-session       Output the entire session (also a temporary one) to the output file\n  -n, --latest=              Number of latest patterns to list (default: 0)\n  -d, --changeDefaultModel   Change default model\n  -y, --youtube=             YouTube video \"URL\" to grab transcript, comments from it and send to chat\n      --transcript           Grab transcript from YouTube video and send to chat (it used per default).\n      --comments             Grab comments from YouTube video and send to chat\n      --metadata             Grab metadata from YouTube video and send to chat\n  -g, --language=            Specify the Language Code for the chat, e.g. -g=en -g=zh\n  -u, --scrape_url=          Scrape website URL to markdown using Jina AI\n  -q, --scrape_question=     Search question using Jina AI\n  -e, --seed=                Seed to be used for LMM generation\n  -w, --wipecontext=         Wipe context\n  -W, --wipesession=         Wipe session\n      --printcontext=        Print context\n      --printsession=        Print session\n      --readability          Convert HTML input into a clean, readable view\n      --serve                Initiate the API server\n      --dry-run              Show what would be sent to the model without actually sending it\n      --version              Print current version\n\nHelp Options:\n  -h, --help                 Show this help message\n\n```\n\n## Our approach to prompting\n\nFabric _Patterns_ are different than most prompts you'll see.\n\n- **First, we use `Markdown` to help ensure maximum readability and editability**. This not only helps the creator make a good one, but also anyone who wants to deeply understand what it does. _Importantly, this also includes the AI you're sending it to!_\n\nHere's an example of a Fabric Pattern.\n\n```bash\nhttps://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md\n```\n\n<img width=\"1461\" alt=\"pattern-example\" src=\"https://github.com/danielmiessler/fabric/assets/50654/b910c551-9263-405f-9735-71ca69bbab6d\">\n\n- **Next, we are extremely clear in our instructions**, and we use the Markdown structure to emphasize what we want the AI to do, and in what order.\n\n- **And finally, we tend to use the System section of the prompt almost exclusively**. In over a year of being heads-down with this stuff, we've just seen more efficacy from doing that. If that changes, or we're shown data that says otherwise, we will adjust.\n\n## Examples\n\n> The following examples use the macOS `pbpaste` to paste from the clipboard. See the [pbpaste](#pbpaste) section below for Windows and Linux alternatives.\n\nNow let's look at some things you can do with Fabric.\n\n1. Run the `summarize` Pattern based on input from `stdin`. In this case, the body of an article.\n\n```bash\npbpaste | fabric --pattern summarize\n```\n\n2. Run the `analyze_claims` Pattern with the `--stream` option to get immediate and streaming results.\n\n```bash\npbpaste | fabric --stream --pattern analyze_claims\n```\n\n3. Run the `extract_wisdom` Pattern with the `--stream` option to get immediate and streaming results from any Youtube video (much like in the original introduction video).\n\n```bash\nfabric -y \"https://youtube.com/watch?v=uXs-zPc63kM\" --stream --pattern extract_wisdom\n```\n\n4. Create patterns- you must create a .md file with the pattern and save it to ~/.config/fabric/patterns/[yourpatternname].\n\n## Just use the Patterns\n\n<img width=\"1173\" alt=\"fabric-patterns-screenshot\" src=\"https://github.com/danielmiessler/fabric/assets/50654/9186a044-652b-4673-89f7-71cf066f32d8\">\n\n<br />\n<br />\n\nIf you're not looking to do anything fancy, and you just want a lot of great prompts, you can navigate to the [`/patterns`](https://github.com/danielmiessler/fabric/tree/main/patterns) directory and start exploring!\n\nWe hope that if you used nothing else from Fabric, the Patterns by themselves will make the project useful.\n\nYou can use any of the Patterns you see there in any AI application that you have, whether that's ChatGPT or some other app or website. Our plan and prediction is that people will soon be sharing many more than those we've published, and they will be way better than ours.\n\nThe wisdom of crowds for the win.\n\n## Custom Patterns\n\nYou may want to use Fabric to create your own custom Patterns—but not share them with others. No problem!\n\nJust make a directory in `~/.config/custompatterns/` (or wherever) and put your `.md` files in there.\n\nWhen you're ready to use them, copy them into:\n\n```\n~/.config/fabric/patterns/\n```\n\nYou can then use them like any other Patterns, but they won't be public unless you explicitly submit them as Pull Requests to the Fabric project. So don't worry—they're private to you.\n\nThis feature works with all openai and ollama models but does NOT work with claude. You can specify your model with the -m flag\n\n## Helper Apps\n\nFabric also makes use of some core helper apps (tools) to make it easier to integrate with your various workflows. Here are some examples:\n\n### `to_pdf`\n\n`to_pdf` is a helper command that converts LaTeX files to PDF format. You can use it like this:\n\n```bash\nto_pdf input.tex\n```\n\nThis will create a PDF file from the input LaTeX file in the same directory.\n\nYou can also use it with stdin which works perfectly with the `write_latex` pattern:\n\n```bash\necho \"ai security primer\" | fabric --pattern write_latex | to_pdf\n```\n\nThis will create a PDF file named `output.pdf` in the current directory.\n\n### `to_pdf` Installation\n\nTo install `to_pdf`, install it the same way as you install Fabric, just with a different repo name.\n\n```bash\ngo install github.com/danielmiessler/fabric/plugins/tools/to_pdf@latest\n```\n\nMake sure you have a LaTeX distribution (like TeX Live or MiKTeX) installed on your system, as `to_pdf` requires `pdflatex` to be available in your system's PATH.\n\n## pbpaste\n\nThe [examples](#examples) use the macOS program `pbpaste` to paste content from the clipboard to pipe into `fabric` as the input. `pbpaste` is not available on Windows or Linux, but there are alternatives.\n\nOn Windows, you can use the PowerShell command `Get-Clipboard` from a PowerShell command prompt. If you like, you can also alias it to `pbpaste`. If you are using classic PowerShell, edit the file `~\\Documents\\WindowsPowerShell\\.profile.ps1`, or if you are using PowerShell Core, edit `~\\Documents\\PowerShell\\.profile.ps1` and add the alias,\n\n```powershell\nSet-Alias pbpaste Get-Clipboard\n```\n\nOn Linux, you can use `xclip -selection clipboard -o` to paste from the clipboard. You will likely need to install `xclip` with your package manager. For Debian based systems including Ubuntu,\n\n```sh\nsudo apt update\nsudo apt install xclip -y\n```\n\nYou can also create an alias by editing `~/.bashrc` or `~/.zshrc` and adding the alias,\n\n```sh\nalias pbpaste='xclip -selection clipboard -o'\n```\n\n## Web Interface\n\nFabric now includes a built-in web interface that provides a GUI alternative to the command-line interface and an out-of-the-box website for those who want to get started with web development or blogging.  \nYou can use this app as a GUI interface for Fabric, a ready to go blog-site, or a website template for your own projects.\n\nThe `web/src/lib/content` directory includes starter `.obsidian/` and `templates/` directories, allowing you to open up the `web/src/lib/content/` directory as an [Obsidian.md](https://obsidian.md) vault. You can place your posts in the posts directory when you're ready to publish.\n\n### Installing\n\nThe GUI can be installed by navigating to the `web` directory and using `npm install`, `pnpm install`, or your favorite package manager. Then simply run the development server to start the app.\n\n_You will need to run fabric in a separate terminal with the `fabric --serve` command._\n\n**From the fabric project `web/` directory:**\n\n```shell\nnpm run dev\n\n## or ##\n\npnpm run dev\n\n## or your equivalent\n```\n\n### Streamlit UI\n\nTo run the Streamlit user interface:\n\n```bash\n# Install required dependencies\npip install streamlit pandas matplotlib seaborn numpy python-dotenv\n\n# Run the Streamlit app\nstreamlit run streamlit.py\n```\n\nThe Streamlit UI provides a user-friendly interface for:\n\n- Running and chaining patterns\n- Managing pattern outputs\n- Creating and editing patterns\n- Analyzing pattern results\n\n## Meta\n\n> [!NOTE]\n> Special thanks to the following people for their inspiration and contributions!\n\n- _Jonathan Dunn_ for being the absolute MVP dev on the project, including spearheading the new Go version, as well as the GUI! All this while also being a full-time medical doctor!\n- _Caleb Sima_ for pushing me over the edge of whether to make this a public project or not.\n- _Eugen Eisler_ and _Frederick Ros_ for their invaluable contributions to the Go version\n- _David Peters_ for his work on the web interface.\n- _Joel Parish_ for super useful input on the project's Github directory structure..\n- _Joseph Thacker_ for the idea of a `-c` context flag that adds pre-created context in the `./config/fabric/` directory to all Pattern queries.\n- _Jason Haddix_ for the idea of a stitch (chained Pattern) to filter content using a local model before sending on to a cloud model, i.e., cleaning customer data using `llama2` before sending on to `gpt-4` for analysis.\n- _Andre Guerra_ for assisting with numerous components to make things simpler and more maintainable.\n\n### Primary contributors\n\n<a href=\"https://github.com/danielmiessler\"><img src=\"https://avatars.githubusercontent.com/u/50654?v=4\" title=\"Daniel Miessler\" width=\"50\" height=\"50\"></a>\n<a href=\"https://github.com/xssdoctor\"><img src=\"https://avatars.githubusercontent.com/u/9218431?v=4\" title=\"Jonathan Dunn\" width=\"50\" height=\"50\"></a>\n<a href=\"https://github.com/sbehrens\"><img src=\"https://avatars.githubusercontent.com/u/688589?v=4\" title=\"Scott Behrens\" width=\"50\" height=\"50\"></a>\n<a href=\"https://github.com/agu3rra\"><img src=\"https://avatars.githubusercontent.com/u/10410523?v=4\" title=\"Andre Guerra\" width=\"50\" height=\"50\"></a>\n\n`fabric` was created by <a href=\"https://danielmiessler.com/subscribe\" target=\"_blank\">Daniel Miessler</a> in January of 2024.\n<br /><br />\n<a href=\"https://twitter.com/intent/user?screen_name=danielmiessler\">![X (formerly Twitter) Follow](https://img.shields.io/twitter/follow/danielmiessler)</a>\n"
        },
        {
          "name": "cli",
          "type": "tree",
          "content": null
        },
        {
          "name": "common",
          "type": "tree",
          "content": null
        },
        {
          "name": "core",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.177734375,
          "content": "version: '3.8'\n\nservices:\n  fabric-api:\n    build: .\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./ENV:/root/.config/fabric/.env:ro\n    environment:\n      - GIN_MODE=release "
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 2.9501953125,
          "content": "{\n  \"nodes\": {\n    \"flake-utils\": {\n      \"inputs\": {\n        \"systems\": \"systems\"\n      },\n      \"locked\": {\n        \"lastModified\": 1694529238,\n        \"narHash\": \"sha256-zsNZZGTGnMOf9YpHKJqMSsa0dXbfmxeoJ7xHlrt+xmY=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"rev\": \"ff7b65b44d01cf9ba6a71320833626af21126384\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"flake-utils\",\n        \"type\": \"github\"\n      }\n    },\n    \"gomod2nix\": {\n      \"inputs\": {\n        \"flake-utils\": \"flake-utils\",\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1729448365,\n        \"narHash\": \"sha256-oquZeWTYWTr5IxfwEzgsxjtD8SSFZYLdO9DaQb70vNU=\",\n        \"owner\": \"nix-community\",\n        \"repo\": \"gomod2nix\",\n        \"rev\": \"5d387097aa716f35dd99d848dc26d8d5b62a104c\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-community\",\n        \"repo\": \"gomod2nix\",\n        \"type\": \"github\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1729665710,\n        \"narHash\": \"sha256-AlcmCXJZPIlO5dmFzV3V2XF6x/OpNWUV8Y/FMPGd8Z4=\",\n        \"owner\": \"nixos\",\n        \"repo\": \"nixpkgs\",\n        \"rev\": \"2768c7d042a37de65bb1b5b3268fc987e534c49d\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nixos\",\n        \"ref\": \"nixos-unstable\",\n        \"repo\": \"nixpkgs\",\n        \"type\": \"github\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"gomod2nix\": \"gomod2nix\",\n        \"nixpkgs\": \"nixpkgs\",\n        \"systems\": \"systems_2\",\n        \"treefmt-nix\": \"treefmt-nix\"\n      }\n    },\n    \"systems\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"systems_2\": {\n      \"locked\": {\n        \"lastModified\": 1681028828,\n        \"narHash\": \"sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=\",\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"rev\": \"da67096a3b9bf56a91d16901293e51ba5b49a27e\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"nix-systems\",\n        \"repo\": \"default\",\n        \"type\": \"github\"\n      }\n    },\n    \"treefmt-nix\": {\n      \"inputs\": {\n        \"nixpkgs\": [\n          \"nixpkgs\"\n        ]\n      },\n      \"locked\": {\n        \"lastModified\": 1729613947,\n        \"narHash\": \"sha256-XGOvuIPW1XRfPgHtGYXd5MAmJzZtOuwlfKDgxX5KT3s=\",\n        \"owner\": \"numtide\",\n        \"repo\": \"treefmt-nix\",\n        \"rev\": \"aac86347fb5063960eccb19493e0cadcdb4205ca\",\n        \"type\": \"github\"\n      },\n      \"original\": {\n        \"owner\": \"numtide\",\n        \"repo\": \"treefmt-nix\",\n        \"type\": \"github\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.87890625,
          "content": "{\n  description = \"Fabric is an open-source framework for augmenting humans using AI. It provides a modular framework for solving specific problems using a crowdsourced set of AI prompts that can be used anywhere\";\n\n  inputs = {\n    nixpkgs.url = \"github:nixos/nixpkgs/nixos-unstable\";\n    systems.url = \"github:nix-systems/default\";\n\n    treefmt-nix = {\n      url = \"github:numtide/treefmt-nix\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n\n    gomod2nix = {\n      url = \"github:nix-community/gomod2nix\";\n      inputs.nixpkgs.follows = \"nixpkgs\";\n    };\n  };\n\n  outputs =\n    {\n      self,\n      nixpkgs,\n      systems,\n      treefmt-nix,\n      gomod2nix,\n      ...\n    }:\n    let\n      forAllSystems = nixpkgs.lib.genAttrs (import systems);\n\n      treefmtEval = forAllSystems (\n        system:\n        let\n          pkgs = nixpkgs.legacyPackages.${system};\n        in\n        treefmt-nix.lib.evalModule pkgs ./treefmt.nix\n      );\n    in\n    {\n      formatter = forAllSystems (system: treefmtEval.${system}.config.build.wrapper);\n\n      checks = forAllSystems (system: {\n        formatting = treefmtEval.${system}.config.build.check self;\n      });\n\n      devShells = forAllSystems (\n        system:\n        let\n          pkgs = nixpkgs.legacyPackages.${system};\n          goEnv = gomod2nix.legacyPackages.${system}.mkGoEnv { pwd = ./.; };\n        in\n        import ./shell.nix {\n          inherit pkgs goEnv;\n          inherit (gomod2nix.legacyPackages.${system}) gomod2nix;\n        }\n      );\n\n      packages = forAllSystems (\n        system:\n        let\n          pkgs = nixpkgs.legacyPackages.${system};\n        in\n        {\n          default = self.packages.${system}.fabric;\n          fabric = pkgs.callPackage ./pkgs/fabric {\n            inherit (gomod2nix.legacyPackages.${system}) buildGoApplication;\n          };\n          inherit (gomod2nix.legacyPackages.${system}) gomod2nix;\n        }\n      );\n    };\n}\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 4.6806640625,
          "content": "module github.com/danielmiessler/fabric\n\ngo 1.22.8\n\ntoolchain go1.23.1\n\nrequire (\n\tgithub.com/anaskhan96/soup v1.2.5\n\tgithub.com/anthropics/anthropic-sdk-go v0.2.0-alpha.4\n\tgithub.com/atotto/clipboard v0.1.4\n\tgithub.com/gabriel-vasile/mimetype v1.4.6\n\tgithub.com/gin-gonic/gin v1.10.0\n\tgithub.com/go-git/go-git/v5 v5.12.0\n\tgithub.com/go-shiori/go-readability v0.0.0-20241012063810-92284fa8a71f\n\tgithub.com/google/generative-ai-go v0.18.0\n\tgithub.com/jessevdk/go-flags v1.6.1\n\tgithub.com/joho/godotenv v1.5.1\n\tgithub.com/ollama/ollama v0.4.1\n\tgithub.com/otiai10/copy v1.14.0\n\tgithub.com/pkg/errors v0.9.1\n\tgithub.com/samber/lo v1.47.0\n\tgithub.com/sashabaranov/go-openai v1.35.6\n\tgithub.com/stretchr/testify v1.9.0\n\tgolang.org/x/text v0.20.0\n\tgoogle.golang.org/api v0.205.0\n\tgopkg.in/yaml.v2 v2.4.0\n)\n\nrequire (\n\tcloud.google.com/go v0.116.0 // indirect\n\tcloud.google.com/go/ai v0.8.0 // indirect\n\tcloud.google.com/go/auth v0.10.1 // indirect\n\tcloud.google.com/go/auth/oauth2adapt v0.2.5 // indirect\n\tcloud.google.com/go/compute/metadata v0.5.2 // indirect\n\tcloud.google.com/go/longrunning v0.5.7 // indirect\n\tdario.cat/mergo v1.0.1 // indirect\n\tgithub.com/Microsoft/go-winio v0.6.2 // indirect\n\tgithub.com/ProtonMail/go-crypto v1.1.2 // indirect\n\tgithub.com/andybalholm/cascadia v1.3.2 // indirect\n\tgithub.com/araddon/dateparse v0.0.0-20210429162001-6b43995a97de // indirect\n\tgithub.com/bytedance/sonic v1.12.4 // indirect\n\tgithub.com/bytedance/sonic/loader v0.2.1 // indirect\n\tgithub.com/cloudflare/circl v1.5.0 // indirect\n\tgithub.com/cloudwego/base64x v0.1.4 // indirect\n\tgithub.com/cloudwego/iasm v0.2.0 // indirect\n\tgithub.com/cyphar/filepath-securejoin v0.3.4 // indirect\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\n\tgithub.com/emirpasic/gods v1.18.1 // indirect\n\tgithub.com/felixge/httpsnoop v1.0.4 // indirect\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\n\tgithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376 // indirect\n\tgithub.com/go-git/go-billy/v5 v5.6.0 // indirect\n\tgithub.com/go-logr/logr v1.4.2 // indirect\n\tgithub.com/go-logr/stdr v1.2.2 // indirect\n\tgithub.com/go-playground/locales v0.14.1 // indirect\n\tgithub.com/go-playground/universal-translator v0.18.1 // indirect\n\tgithub.com/go-playground/validator/v10 v10.22.1 // indirect\n\tgithub.com/go-shiori/dom v0.0.0-20230515143342-73569d674e1c // indirect\n\tgithub.com/goccy/go-json v0.10.3 // indirect\n\tgithub.com/gogs/chardet v0.0.0-20211120154057-b7413eaefb8f // indirect\n\tgithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da // indirect\n\tgithub.com/google/s2a-go v0.1.8 // indirect\n\tgithub.com/google/uuid v1.6.0 // indirect\n\tgithub.com/googleapis/enterprise-certificate-proxy v0.3.4 // indirect\n\tgithub.com/googleapis/gax-go/v2 v2.13.0 // indirect\n\tgithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 // indirect\n\tgithub.com/json-iterator/go v1.1.12 // indirect\n\tgithub.com/kevinburke/ssh_config v1.2.0 // indirect\n\tgithub.com/klauspost/cpuid/v2 v2.2.9 // indirect\n\tgithub.com/leodido/go-urn v1.4.0 // indirect\n\tgithub.com/mattn/go-isatty v0.0.20 // indirect\n\tgithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\n\tgithub.com/pelletier/go-toml/v2 v2.2.3 // indirect\n\tgithub.com/pjbgf/sha1cd v0.3.0 // indirect\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\n\tgithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3 // indirect\n\tgithub.com/skeema/knownhosts v1.3.0 // indirect\n\tgithub.com/tidwall/gjson v1.14.4 // indirect\n\tgithub.com/tidwall/match v1.1.1 // indirect\n\tgithub.com/tidwall/pretty v1.2.1 // indirect\n\tgithub.com/tidwall/sjson v1.2.5 // indirect\n\tgithub.com/twitchyliquid64/golang-asm v0.15.1 // indirect\n\tgithub.com/ugorji/go/codec v1.2.12 // indirect\n\tgithub.com/xanzy/ssh-agent v0.3.3 // indirect\n\tgo.opencensus.io v0.24.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 // indirect\n\tgo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0 // indirect\n\tgo.opentelemetry.io/otel v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/metric v1.32.0 // indirect\n\tgo.opentelemetry.io/otel/trace v1.32.0 // indirect\n\tgolang.org/x/arch v0.12.0 // indirect\n\tgolang.org/x/crypto v0.29.0 // indirect\n\tgolang.org/x/net v0.31.0 // indirect\n\tgolang.org/x/oauth2 v0.24.0 // indirect\n\tgolang.org/x/sync v0.9.0 // indirect\n\tgolang.org/x/sys v0.27.0 // indirect\n\tgolang.org/x/time v0.7.0 // indirect\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38 // indirect\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 // indirect\n\tgoogle.golang.org/grpc v1.68.0 // indirect\n\tgoogle.golang.org/protobuf v1.35.1 // indirect\n\tgopkg.in/warnings.v0 v0.1.2 // indirect\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 33.8427734375,
          "content": "cloud.google.com/go v0.26.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=\ncloud.google.com/go v0.116.0 h1:B3fRrSDkLRt5qSHWe40ERJvhvnQwdZiHu0bJOpldweE=\ncloud.google.com/go v0.116.0/go.mod h1:cEPSRWPzZEswwdr9BxE6ChEn01dWlTaF05LiC2Xs70U=\ncloud.google.com/go/ai v0.8.0 h1:rXUEz8Wp2OlrM8r1bfmpF2+VKqc1VJpafE3HgzRnD/w=\ncloud.google.com/go/ai v0.8.0/go.mod h1:t3Dfk4cM61sytiggo2UyGsDVW3RF1qGZaUKDrZFyqkE=\ncloud.google.com/go/auth v0.10.1 h1:TnK46qldSfHWt2a0b/hciaiVJsmDXWy9FqyUan0uYiI=\ncloud.google.com/go/auth v0.10.1/go.mod h1:xxA5AqpDrvS+Gkmo9RqrGGRh6WSNKKOXhY3zNOr38tI=\ncloud.google.com/go/auth/oauth2adapt v0.2.5 h1:2p29+dePqsCHPP1bqDJcKj4qxRyYCcbzKpFyKGt3MTk=\ncloud.google.com/go/auth/oauth2adapt v0.2.5/go.mod h1:AlmsELtlEBnaNTL7jCj8VQFLy6mbZv0s4Q7NGBeQ5E8=\ncloud.google.com/go/compute/metadata v0.5.2 h1:UxK4uu/Tn+I3p2dYWTfiX4wva7aYlKixAHn3fyqngqo=\ncloud.google.com/go/compute/metadata v0.5.2/go.mod h1:C66sj2AluDcIqakBq/M8lw8/ybHgOZqin2obFxa/E5k=\ncloud.google.com/go/longrunning v0.5.7 h1:WLbHekDbjK1fVFD3ibpFFVoyizlLRl73I7YKuAKilhU=\ncloud.google.com/go/longrunning v0.5.7/go.mod h1:8GClkudohy1Fxm3owmBGid8W0pSgodEMwEAztp38Xng=\ndario.cat/mergo v1.0.1 h1:Ra4+bf83h2ztPIQYNP99R6m+Y7KfnARDfID+a+vLl4s=\ndario.cat/mergo v1.0.1/go.mod h1:uNxQE+84aUszobStD9th8a29P2fMDhsBdgRYvZOxGmk=\ngithub.com/BurntSushi/toml v0.3.1/go.mod h1:xHWCNGjB5oqiDr8zfno3MHue2Ht5sIBksp03qcyfWMU=\ngithub.com/Microsoft/go-winio v0.5.2/go.mod h1:WpS1mjBmmwHBEWmogvA2mj8546UReBk4v8QkMxJ6pZY=\ngithub.com/Microsoft/go-winio v0.6.2 h1:F2VQgta7ecxGYO8k3ZZz3RS8fVIXVxONVUPlNERoyfY=\ngithub.com/Microsoft/go-winio v0.6.2/go.mod h1:yd8OoFMLzJbo9gZq8j5qaps8bJ9aShtEA8Ipt1oGCvU=\ngithub.com/ProtonMail/go-crypto v1.1.2 h1:A7JbD57ThNqh7XjmHE+PXpQ3Dqt3BrSAC0AL0Go3KS0=\ngithub.com/ProtonMail/go-crypto v1.1.2/go.mod h1:rA3QumHc/FZ8pAHreoekgiAbzpNsfQAosU5td4SnOrE=\ngithub.com/anaskhan96/soup v1.2.5 h1:V/FHiusdTrPrdF4iA1YkVxsOpdNcgvqT1hG+YtcZ5hM=\ngithub.com/anaskhan96/soup v1.2.5/go.mod h1:6YnEp9A2yywlYdM4EgDz9NEHclocMepEtku7wg6Cq3s=\ngithub.com/andybalholm/cascadia v1.3.2 h1:3Xi6Dw5lHF15JtdcmAHD3i1+T8plmv7BQ/nsViSLyss=\ngithub.com/andybalholm/cascadia v1.3.2/go.mod h1:7gtRlve5FxPPgIgX36uWBX58OdBsSS6lUvCFb+h7KvU=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be h1:9AeTilPcZAjCFIImctFaOjnTIavg87rW78vTPkQqLI8=\ngithub.com/anmitsu/go-shlex v0.0.0-20200514113438-38f4b401e2be/go.mod h1:ySMOLuWl6zY27l47sB3qLNK6tF2fkHG55UZxx8oIVo4=\ngithub.com/anthropics/anthropic-sdk-go v0.2.0-alpha.4 h1:TdGQS+RoR4AUO6gqUL74yK1dz/Arrt/WG+dxOj6Yo6A=\ngithub.com/anthropics/anthropic-sdk-go v0.2.0-alpha.4/go.mod h1:GJxtdOs9K4neo8Gg65CjJ7jNautmldGli5/OFNabOoo=\ngithub.com/araddon/dateparse v0.0.0-20210429162001-6b43995a97de h1:FxWPpzIjnTlhPwqqXc4/vE0f7GvRjuAsbW+HOIe8KnA=\ngithub.com/araddon/dateparse v0.0.0-20210429162001-6b43995a97de/go.mod h1:DCaWoUhZrYW9p1lxo/cm8EmUOOzAPSEZNGF2DK1dJgw=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5 h1:0CwZNZbxp69SHPdPJAN/hZIm0C4OItdklCFmMRWYpio=\ngithub.com/armon/go-socks5 v0.0.0-20160902184237-e75332964ef5/go.mod h1:wHh0iHkYZB8zMSxRWpUBQtwG5a7fFgvEO+odwuTv2gs=\ngithub.com/atotto/clipboard v0.1.4 h1:EH0zSVneZPSuFR11BlR9YppQTVDbh5+16AmcJi4g1z4=\ngithub.com/atotto/clipboard v0.1.4/go.mod h1:ZY9tmq7sm5xIbd9bOK4onWV4S6X0u6GY7Vn0Yu86PYI=\ngithub.com/bytedance/sonic v1.12.4 h1:9Csb3c9ZJhfUWeMtpCDCq6BUoH5ogfDFLUgQ/jG+R0k=\ngithub.com/bytedance/sonic v1.12.4/go.mod h1:B8Gt/XvtZ3Fqj+iSKMypzymZxw/FVwgIGKzMzT9r/rk=\ngithub.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=\ngithub.com/bytedance/sonic/loader v0.2.1 h1:1GgorWTqf12TA8mma4DDSbaQigE2wOgQo7iCjjJv3+E=\ngithub.com/bytedance/sonic/loader v0.2.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=\ngithub.com/census-instrumentation/opencensus-proto v0.2.1/go.mod h1:f6KPmirojxKA12rnyqOA5BBL4O983OfeGPqjHWSTneU=\ngithub.com/client9/misspell v0.3.4/go.mod h1:qj6jICC3Q7zFZvVWo7KLAzC3yx5G7kyvSDkc90ppPyw=\ngithub.com/cloudflare/circl v1.5.0 h1:hxIWksrX6XN5a1L2TI/h53AGPhNHoUBo+TD1ms9+pys=\ngithub.com/cloudflare/circl v1.5.0/go.mod h1:uddAzsPgqdMAYatqJ0lsjX1oECcQLIlRpzZh3pJrofs=\ngithub.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=\ngithub.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=\ngithub.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=\ngithub.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=\ngithub.com/cncf/udpa/go v0.0.0-20191209042840-269d4d468f6f/go.mod h1:M8M6+tZqaGXZJjfX53e64911xZQV5JYwmTeXPW+k8Sc=\ngithub.com/cyphar/filepath-securejoin v0.3.4 h1:VBWugsJh2ZxJmLFSM06/0qzQyiQX2Qs0ViKrUAcqdZ8=\ngithub.com/cyphar/filepath-securejoin v0.3.4/go.mod h1:8s/MCNJREmFK0H02MF6Ihv1nakJe4L/w3WZLHNkvlYM=\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\ngithub.com/elazarl/goproxy v0.0.0-20230808193330-2592e75ae04a h1:mATvB/9r/3gvcejNsXKSkQ6lcIaNec2nyfOdlTBR2lU=\ngithub.com/elazarl/goproxy v0.0.0-20230808193330-2592e75ae04a/go.mod h1:Ro8st/ElPeALwNFlcTpWmkr6IoMFfkjXAvTHpevnDsM=\ngithub.com/emirpasic/gods v1.18.1 h1:FXtiHYKDGKCW2KzwZKx0iC0PQmdlorYgdFG9jPXJ1Bc=\ngithub.com/emirpasic/gods v1.18.1/go.mod h1:8tpGGwCnJ5H4r6BWwaV6OrWmMoPhUl5jm/FMNAnJvWQ=\ngithub.com/envoyproxy/go-control-plane v0.9.0/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=\ngithub.com/envoyproxy/go-control-plane v0.9.4/go.mod h1:6rpuAdCZL397s3pYoYcLgu1mIlRU8Am5FuJP05cCM98=\ngithub.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=\ngithub.com/felixge/httpsnoop v1.0.4 h1:NFTV2Zj1bL4mc9sqWACXbQFVBBg2W3GPvqp8/ESS2Wg=\ngithub.com/felixge/httpsnoop v1.0.4/go.mod h1:m8KPJKqk1gH5J9DgRY2ASl2lWCfGKXixSwevea8zH2U=\ngithub.com/gabriel-vasile/mimetype v1.4.6 h1:3+PzJTKLkvgjeTbts6msPJt4DixhT4YtFNf1gtGe3zc=\ngithub.com/gabriel-vasile/mimetype v1.4.6/go.mod h1:JX1qVKqZd40hUPpAfiNTe0Sne7hdfKSbOqqmkq8GCXc=\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\ngithub.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=\ngithub.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=\ngithub.com/gliderlabs/ssh v0.3.7 h1:iV3Bqi942d9huXnzEF2Mt+CY9gLu8DNM4Obd+8bODRE=\ngithub.com/gliderlabs/ssh v0.3.7/go.mod h1:zpHEXBstFnQYtGnB8k8kQLol82umzn/2/snG7alWVD8=\ngithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376 h1:+zs/tPmkDkHx3U66DAb0lQFJrpS6731Oaa12ikc+DiI=\ngithub.com/go-git/gcfg v1.5.1-0.20230307220236-3a3c6141e376/go.mod h1:an3vInlBmSxCcxctByoQdvwPiA7DTK7jaaFDBTtu0ic=\ngithub.com/go-git/go-billy/v5 v5.6.0 h1:w2hPNtoehvJIxR00Vb4xX94qHQi/ApZfX+nBE2Cjio8=\ngithub.com/go-git/go-billy/v5 v5.6.0/go.mod h1:sFDq7xD3fn3E0GOwUSZqHo9lrkmx8xJhA0ZrfvjBRGM=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399 h1:eMje31YglSBqCdIqdhKBW8lokaMrL3uTkpGYlE2OOT4=\ngithub.com/go-git/go-git-fixtures/v4 v4.3.2-0.20231010084843-55a94097c399/go.mod h1:1OCfN199q1Jm3HZlxleg+Dw/mwps2Wbk9frAWm+4FII=\ngithub.com/go-git/go-git/v5 v5.12.0 h1:7Md+ndsjrzZxbddRDZjF14qK+NN56sy6wkqaVrjZtys=\ngithub.com/go-git/go-git/v5 v5.12.0/go.mod h1:FTM9VKtnI2m65hNI/TenDDDnUf2Q9FHnXYjuz9i5OEY=\ngithub.com/go-logr/logr v1.2.2/go.mod h1:jdQByPbusPIv2/zmleS9BjJVeZ6kBagPoEUsqbVz/1A=\ngithub.com/go-logr/logr v1.4.2 h1:6pFjapn8bFcIbiKo3XT4j/BhANplGihG6tvd+8rYgrY=\ngithub.com/go-logr/logr v1.4.2/go.mod h1:9T104GzyrTigFIr8wt5mBrctHMim0Nb2HLGrmQ40KvY=\ngithub.com/go-logr/stdr v1.2.2 h1:hSWxHoqTgW2S2qGc0LTAI563KZ5YKYRhT3MFKZMbjag=\ngithub.com/go-logr/stdr v1.2.2/go.mod h1:mMo/vtBO5dYbehREoey6XUKy/eSumjCCveDpRre4VKE=\ngithub.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=\ngithub.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\ngithub.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=\ngithub.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=\ngithub.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=\ngithub.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=\ngithub.com/go-playground/validator/v10 v10.22.1 h1:40JcKH+bBNGFczGuoBYgX4I6m/i27HYW8P9FDk5PbgA=\ngithub.com/go-playground/validator/v10 v10.22.1/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=\ngithub.com/go-shiori/dom v0.0.0-20230515143342-73569d674e1c h1:wpkoddUomPfHiOziHZixGO5ZBS73cKqVzZipfrLmO1w=\ngithub.com/go-shiori/dom v0.0.0-20230515143342-73569d674e1c/go.mod h1:oVDCh3qjJMLVUSILBRwrm+Bc6RNXGZYtoh9xdvf1ffM=\ngithub.com/go-shiori/go-readability v0.0.0-20241012063810-92284fa8a71f h1:cypj7SJh+47G9J3VCPdMzT3uWcXWAWDJA54ErTfOigI=\ngithub.com/go-shiori/go-readability v0.0.0-20241012063810-92284fa8a71f/go.mod h1:YWa00ashoPZMAOElrSn4E1cJErhDVU6PWAll4Hxzn+w=\ngithub.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=\ngithub.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=\ngithub.com/gogs/chardet v0.0.0-20211120154057-b7413eaefb8f h1:3BSP1Tbs2djlpprl7wCLuiqMaUh5SJkkzI2gDs+FgLs=\ngithub.com/gogs/chardet v0.0.0-20211120154057-b7413eaefb8f/go.mod h1:Pcatq5tYkCW2Q6yrR2VRHlbHpZ/R4/7qyL1TCF7vl14=\ngithub.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=\ngithub.com/golang/groupcache v0.0.0-20200121045136-8c9f03a8e57e/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=\ngithub.com/golang/groupcache v0.0.0-20210331224755-41bb18bfe9da/go.mod h1:cIg4eruTrX1D+g88fzRXU5OdNfaM+9IcxsU14FzY7Hc=\ngithub.com/golang/mock v1.1.1/go.mod h1:oTYuIxOrZwtPieC+H1uAHpcLFnEyAGVDL/k47Jfbm0A=\ngithub.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=\ngithub.com/golang/protobuf v1.4.0-rc.1/go.mod h1:ceaxUfeHdC40wWswd/P6IGgMaK3YpKi5j83Wpe3EHw8=\ngithub.com/golang/protobuf v1.4.0-rc.1.0.20200221234624-67d41d38c208/go.mod h1:xKAWHe0F5eneWXFV3EuXVDTCmh+JuBKY0li0aMyXATA=\ngithub.com/golang/protobuf v1.4.0-rc.2/go.mod h1:LlEzMj4AhA7rCAGe4KMBDvJI+AwstrUpVNzEA03Pprs=\ngithub.com/golang/protobuf v1.4.0-rc.4.0.20200313231945-b860323f09d0/go.mod h1:WU3c8KckQ9AFe+yFwt9sWVRKCVIyN9cPHBJSNnbL67w=\ngithub.com/golang/protobuf v1.4.0/go.mod h1:jodUvKwWbYaEsadDk5Fwe5c77LiNKVO9IDvqG2KuDX0=\ngithub.com/golang/protobuf v1.4.1/go.mod h1:U8fpvMrcmy5pZrNK1lt4xCsGvpyWQ/VVv6QDs8UjoX8=\ngithub.com/golang/protobuf v1.4.3/go.mod h1:oDoupMAO8OvCJWAcko0GGGIgR6R6ocIYbsSw735rRwI=\ngithub.com/golang/protobuf v1.5.4 h1:i7eJL8qZTpSEXOPTxNKhASYpMn+8e5Q6AdndVa1dWek=\ngithub.com/golang/protobuf v1.5.4/go.mod h1:lnTiLA8Wa4RWRcIUkrtSVa5nRhsEGBg48fD6rSs7xps=\ngithub.com/google/generative-ai-go v0.18.0 h1:6ybg9vOCLcI/UpBBYXOTVgvKmcUKFRNj+2Cj3GnebSo=\ngithub.com/google/generative-ai-go v0.18.0/go.mod h1:JYolL13VG7j79kM5BtHz4qwONHkeJQzOCkKXnpqtS/E=\ngithub.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=\ngithub.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.3.1/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=\ngithub.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.5.3/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\ngithub.com/google/s2a-go v0.1.8 h1:zZDs9gcbt9ZPLV0ndSyQk6Kacx2g/X+SKYovpnz3SMM=\ngithub.com/google/s2a-go v0.1.8/go.mod h1:6iNWHTpQ+nfNRN5E00MSdfDwVesa8hhS32PhPO8deJA=\ngithub.com/google/uuid v1.1.2/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/google/uuid v1.6.0 h1:NIvaJDMOsjHA8n1jAhLSgzrAzy1Hgr+hNrb57e+94F0=\ngithub.com/google/uuid v1.6.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4 h1:XYIDZApgAnrN1c855gTgghdIA6Stxb52D5RnLI1SLyw=\ngithub.com/googleapis/enterprise-certificate-proxy v0.3.4/go.mod h1:YKe7cfqYXjKGpGvmSg28/fFvhNzinZQm8DGnaburhGA=\ngithub.com/googleapis/gax-go/v2 v2.13.0 h1:yitjD5f7jQHhyDsnhKEBU52NdvvdSeGzlAnDPT0hH1s=\ngithub.com/googleapis/gax-go/v2 v2.13.0/go.mod h1:Z/fvTZXF8/uw7Xu5GuslPw+bplx6SS338j1Is2S+B7A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99 h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=\ngithub.com/jbenet/go-context v0.0.0-20150711004518-d14ea06fba99/go.mod h1:1lJo3i6rXxKeerYnT8Nvf0QmHCRC1n8sfWVwXF2Frvo=\ngithub.com/jessevdk/go-flags v1.6.1 h1:Cvu5U8UGrLay1rZfv/zP7iLpSHGUZ/Ou68T0iX1bBK4=\ngithub.com/jessevdk/go-flags v1.6.1/go.mod h1:Mk8T1hIAWpOiJiHa9rJASDK2UGWji0EuPGBnNLMooyc=\ngithub.com/joho/godotenv v1.5.1 h1:7eLL/+HRGLY0ldzfGMeQkb7vMd0as4CfYvUVzLqw0N0=\ngithub.com/joho/godotenv v1.5.1/go.mod h1:f4LDr5Voq0i2e/R5DDNOoa2zzDfwtkZa6DnEwAbqwq4=\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\ngithub.com/kevinburke/ssh_config v1.2.0 h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=\ngithub.com/kevinburke/ssh_config v1.2.0/go.mod h1:CT57kijsi8u/K/BOFA39wgDQJ9CxiF4nAY/ojJ6r6mM=\ngithub.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=\ngithub.com/klauspost/cpuid/v2 v2.2.9 h1:66ze0taIn2H33fBvCkXuv9BmCwDfafmiIVpKV9kKGuY=\ngithub.com/klauspost/cpuid/v2 v2.2.9/go.mod h1:rqkxqrZ1EhYM9G+hXH7YdowN5R5RGN6NK4QwQ3WMXF8=\ngithub.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\ngithub.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=\ngithub.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\ngithub.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=\ngithub.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=\ngithub.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=\ngithub.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=\ngithub.com/mattn/go-runewidth v0.0.10/go.mod h1:RAqKPSqVFrSLVXbA8x7dzmKdmGzieGRCM46jaSJTDAk=\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=\ngithub.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\ngithub.com/ollama/ollama v0.4.1 h1:41x4/L6HrsmQUqG9loN0q2643PHkLpblIlVqXAdByWs=\ngithub.com/ollama/ollama v0.4.1/go.mod h1:QDxM/t2teuubbfN/FT2pBRMPF0K1N3IakgT1OZBD4NY=\ngithub.com/onsi/gomega v1.34.1 h1:EUMJIKUjM8sKjYbtxQI9A4z2o+rruxnzNvpknOXie6k=\ngithub.com/onsi/gomega v1.34.1/go.mod h1:kU1QgUvBDLXBJq618Xvm2LUX6rSAfRaFRTcdOeDLwwY=\ngithub.com/otiai10/copy v1.14.0 h1:dCI/t1iTdYGtkvCuBG2BgR6KZa83PTclw4U5n2wAllU=\ngithub.com/otiai10/copy v1.14.0/go.mod h1:ECfuL02W+/FkTWZWgQqXPWZgW9oeKCSQ5qVfSc4qc4w=\ngithub.com/otiai10/mint v1.5.1 h1:XaPLeE+9vGbuyEHem1JNk3bYc7KKqyI/na0/mLd/Kks=\ngithub.com/otiai10/mint v1.5.1/go.mod h1:MJm72SBthJjz8qhefc4z1PYEieWmy8Bku7CjcAqyUSM=\ngithub.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=\ngithub.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=\ngithub.com/pjbgf/sha1cd v0.3.0 h1:4D5XXmUUBUl/xQ6IjCkEAbqXskkq/4O7LmGn0AqMDs4=\ngithub.com/pjbgf/sha1cd v0.3.0/go.mod h1:nZ1rrWOcGJ5uZgEEVL1VUM9iRQiZvWdbZjkKyFzPPsI=\ngithub.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=\ngithub.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\ngithub.com/prometheus/client_model v0.0.0-20190812154241-14fe0d1b01d4/go.mod h1:xMI15A0UPsDsEKsMN9yxemIoYk6Tm2C1GtYGdfGttqA=\ngithub.com/rivo/uniseg v0.1.0/go.mod h1:J6wj4VEh+S6ZtnVlnTBMWIodfgj8LQOQFoIToxlJtxc=\ngithub.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=\ngithub.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=\ngithub.com/samber/lo v1.47.0 h1:z7RynLwP5nbyRscyvcD043DWYoOcYRv3mV8lBeqOCLc=\ngithub.com/samber/lo v1.47.0/go.mod h1:RmDH9Ct32Qy3gduHQuKJ3gW1fMHAnE/fAzQuf6He5cU=\ngithub.com/sashabaranov/go-openai v1.35.6 h1:oi0rwCvyxMxgFALDGnyqFTyCJm6n72OnEG3sybIFR0g=\ngithub.com/sashabaranov/go-openai v1.35.6/go.mod h1:lj5b/K+zjTSFxVLijLSTDZuP7adOgerWeFyZLUhAKRg=\ngithub.com/scylladb/termtables v0.0.0-20191203121021-c4c0b6d42ff4/go.mod h1:C1a7PQSMz9NShzorzCiG2fk9+xuCgLkPeCvMHYR2OWg=\ngithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3 h1:n661drycOFuPLCN3Uc8sB6B/s6Z4t2xvBgU1htSHuq8=\ngithub.com/sergi/go-diff v1.3.2-0.20230802210424-5b0b94c5c0d3/go.mod h1:A0bzQcvG0E7Rwjx0REVgAGH58e96+X0MeOfepqsbeW4=\ngithub.com/sirupsen/logrus v1.7.0/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=\ngithub.com/skeema/knownhosts v1.3.0 h1:AM+y0rI04VksttfwjkSTNQorvGqmwATnvnAHpSgc0LY=\ngithub.com/skeema/knownhosts v1.3.0/go.mod h1:sPINvnADmT/qYH1kfv+ePMmOBTH6Tbl7b5LvTDjFK7M=\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\ngithub.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=\ngithub.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\ngithub.com/stretchr/testify v1.4.0/go.mod h1:j7eGeouHqKxXV5pUuKE4zz7dFj8WfuZ+81PSLYec5m4=\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\ngithub.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\ngithub.com/tidwall/gjson v1.14.2/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/gjson v1.14.4 h1:uo0p8EbA09J7RQaflQ1aBRffTR7xedD2bcIVSYxLnkM=\ngithub.com/tidwall/gjson v1.14.4/go.mod h1:/wbyibRr2FHMks5tjHJ5F8dMZh3AcwJEMf5vlfC0lxk=\ngithub.com/tidwall/match v1.1.1 h1:+Ho715JplO36QYgwN9PGYNhgZvoUSc9X2c80KVTi+GA=\ngithub.com/tidwall/match v1.1.1/go.mod h1:eRSPERbgtNPcGhD8UCthc6PmLEQXEWd3PRB5JTxsfmM=\ngithub.com/tidwall/pretty v1.2.0/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/pretty v1.2.1 h1:qjsOFOWWQl+N3RsoF5/ssm1pHmJJwhjlSbZ51I6wMl4=\ngithub.com/tidwall/pretty v1.2.1/go.mod h1:ITEVvHYasfjBbM0u2Pg8T2nJnzm8xPwvNhhsoaGGjNU=\ngithub.com/tidwall/sjson v1.2.5 h1:kLy8mja+1c9jlljvWTlSazM7cKDRfJuR/bOJhcY5NcY=\ngithub.com/tidwall/sjson v1.2.5/go.mod h1:Fvgq9kS/6ociJEDnK0Fk1cpYF4FIW6ZF7LAe+6jwd28=\ngithub.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=\ngithub.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=\ngithub.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=\ngithub.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=\ngithub.com/xanzy/ssh-agent v0.3.3 h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=\ngithub.com/xanzy/ssh-agent v0.3.3/go.mod h1:6dzNDKs0J9rVPHPhaGCukekBHKqfl+L3KghI1Bc68Uw=\ngithub.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=\ngo.opencensus.io v0.24.0 h1:y73uSU6J157QMP2kn2r30vwW1A2W2WFwSCGnAVxeaD0=\ngo.opencensus.io v0.24.0/go.mod h1:vNK8G9p7aAivkbmorf4v+7Hgx+Zs0yY+0fOtgBfjQKo=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0 h1:r6I7RJCN86bpD/FQwedZ0vSixDpwuWREjW9oRMsmqDc=\ngo.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc v0.54.0/go.mod h1:B9yO6b04uB80CzjedvewuqDhxJxi11s7/GtiGa8bAjI=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0 h1:DheMAlT6POBP+gh8RUH19EOTnQIor5QE0uSRPtzCpSw=\ngo.opentelemetry.io/contrib/instrumentation/net/http/otelhttp v0.57.0/go.mod h1:wZcGmeVO9nzP67aYSLDqXNWK87EZWhi7JWj1v7ZXf94=\ngo.opentelemetry.io/otel v1.32.0 h1:WnBN+Xjcteh0zdk01SVqV55d/m62NJLJdIyb4y/WO5U=\ngo.opentelemetry.io/otel v1.32.0/go.mod h1:00DCVSB0RQcnzlwyTfqtxSm+DRr9hpYrHjNGiBHVQIg=\ngo.opentelemetry.io/otel/metric v1.32.0 h1:xV2umtmNcThh2/a/aCP+h64Xx5wsj8qqnkYZktzNa0M=\ngo.opentelemetry.io/otel/metric v1.32.0/go.mod h1:jH7CIbbK6SH2V2wE16W05BHCtIDzauciCRLoc/SyMv8=\ngo.opentelemetry.io/otel/trace v1.32.0 h1:WIC9mYrXf8TmY/EXuULKc8hR17vE+Hjv2cssQDe03fM=\ngo.opentelemetry.io/otel/trace v1.32.0/go.mod h1:+i4rkvCraA+tG6AzwloGaCtkx53Fa+L+V8e9a7YvhT8=\ngolang.org/x/arch v0.12.0 h1:UsYJhbzPYGsT0HbEdmYcqtCv8UNGvnaL561NnIUvaKg=\ngolang.org/x/arch v0.12.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\ngolang.org/x/crypto v0.0.0-20200622213623-75b288015ac9/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\ngolang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\ngolang.org/x/crypto v0.0.0-20220622213112-05595931fe9d/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\ngolang.org/x/crypto v0.29.0 h1:L5SG1JTTXupVV3n6sUqMTeWbjAyfPwoda2DLX8J8FrQ=\ngolang.org/x/crypto v0.29.0/go.mod h1:+F4F4N5hv6v38hfeYwTdx20oUvLLc+QfrE9Ax9HtgRg=\ngolang.org/x/exp v0.0.0-20190121172915-509febef88a4/go.mod h1:CJ0aWSM057203Lf6IL+f9T1iT9GByDxfZKAQTCR3kQA=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56 h1:2dVuKD2vS7b0QIHQbpyTISPd0LeHDbnYEryqj5Q1ug8=\ngolang.org/x/exp v0.0.0-20240719175910-8a7402abbf56/go.mod h1:M4RDyNAINzryxdtnbRXRL/OHtkFuWGRjvuhBJpk2IlY=\ngolang.org/x/lint v0.0.0-20181026193005-c67002cb31c3/go.mod h1:UVdnD1Gm6xHRNCYTkRU2/jEulfH38KcIWyp/GAMgvoE=\ngolang.org/x/lint v0.0.0-20190227174305-5b3e6a55c961/go.mod h1:wehouNa3lNwaWXcvxsM5YxQ5yQlVC4a0KAMCusXpPoU=\ngolang.org/x/lint v0.0.0-20190313153728-d0100b6bd8b3/go.mod h1:6SW0HCj/g11FgYtHlgUYUwCkIfeOF89ocIRzGO/8vkc=\ngolang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=\ngolang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=\ngolang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20180826012351-8a410e7b638d/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190213061140-3a22650c66bd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\ngolang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\ngolang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20200114155413-6afb5195e5aa/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\ngolang.org/x/net v0.0.0-20201110031124-69a78807bb2b/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\ngolang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=\ngolang.org/x/net v0.9.0/go.mod h1:d48xBJpPfHeWQsugry2m+kC02ZBRGRgulfHnEXEuWns=\ngolang.org/x/net v0.31.0 h1:68CPQngjLL0r2AlUKiSxtQFKvzRVbnzLwMUn5SzcLHo=\ngolang.org/x/net v0.31.0/go.mod h1:P4fl1q7dY2hnZFxEk4pPSkDHF+QqjitcnDjUQyMM+pM=\ngolang.org/x/oauth2 v0.0.0-20180821212333-d2e6202438be/go.mod h1:N/0e6XlmueqKjAGxoOufVs8QHGRruUQn6yWY3a++T0U=\ngolang.org/x/oauth2 v0.24.0 h1:KTBBxWqUa0ykRPLtV69rRto9TLXcqYkeswu48x/gvNE=\ngolang.org/x/oauth2 v0.24.0/go.mod h1:XYTD2NtWslqkgxebSiOHnXEap4TF09sJSc7H1sXbhtI=\ngolang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20181108010431-42b317875d0f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=\ngolang.org/x/sync v0.9.0 h1:fEo0HyrW1GIgZdpbhCRO0PkJajUS5H9IFUztCgEo2jQ=\ngolang.org/x/sync v0.9.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\ngolang.org/x/sys v0.0.0-20180830151530-49385e6e1522/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20200930185726-fdedc70b468f/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210124154548-22da62e12c0c/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.7.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\ngolang.org/x/sys v0.27.0 h1:wBqf8DvsY9Y/2P8gAfPDEYNuS30J4lPHJxXSb/nJZ+s=\ngolang.org/x/sys v0.27.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\ngolang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=\ngolang.org/x/term v0.7.0/go.mod h1:P32HKFT3hSsZrRxla30E9HqToFYAQPCMs/zFMBUFqPY=\ngolang.org/x/term v0.26.0 h1:WEQa6V3Gja/BhNxg540hBip/kkaYtRg3cxg4oXSw4AU=\ngolang.org/x/term v0.26.0/go.mod h1:Si5m1o57C5nBNQo5z1iq+XDijt21BDBDp2bK0QI8e3E=\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\ngolang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=\ngolang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=\ngolang.org/x/text v0.20.0 h1:gK/Kv2otX8gz+wn7Rmb3vT96ZwuoxnQlY+HlJVj7Qug=\ngolang.org/x/text v0.20.0/go.mod h1:D4IsuqiFMhST5bX19pQ9ikHC2GsaKyk/oF+pn3ducp4=\ngolang.org/x/time v0.7.0 h1:ntUhktv3OPE6TgYxXWv9vKvUSJyIFJlyohwbkEwPrKQ=\ngolang.org/x/time v0.7.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190114222345-bf090417da8b/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\ngolang.org/x/tools v0.0.0-20190226205152-f727befe758c/go.mod h1:9Yl7xja0Znq3iFh3HoIrodX9oNMXvdceNzlUR8zjMvY=\ngolang.org/x/tools v0.0.0-20190311212946-11955173bddd/go.mod h1:LCzVGOaR6xXOjkQ3onu1FJEFr0SW1gC7cKk1uF8kGRs=\ngolang.org/x/tools v0.0.0-20190524140312-2c0ae7006135/go.mod h1:RgjU9mgBXZiqYHBnxXauZ1Gv1EHHAz9KjViQ78xBX0Q=\ngolang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=\ngolang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=\ngolang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=\ngolang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\ngoogle.golang.org/api v0.205.0 h1:LFaxkAIpDb/GsrWV20dMMo5MR0h8UARTbn24LmD+0Pg=\ngoogle.golang.org/api v0.205.0/go.mod h1:NrK1EMqO8Xk6l6QwRAmrXXg2v6dzukhlOyvkYtnvUuc=\ngoogle.golang.org/appengine v1.1.0/go.mod h1:EbEs0AVv82hx2wNQdGPgUI5lhzA/G0D9YwlJXL52JkM=\ngoogle.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=\ngoogle.golang.org/genproto v0.0.0-20180817151627-c66870c02cf8/go.mod h1:JiN7NxoALGmiZfu7CAH4rXhgtRTLTxftemlI0sWmxmc=\ngoogle.golang.org/genproto v0.0.0-20190819201941-24fa4b261c55/go.mod h1:DMBHOl98Agz4BDEuKkezgsaosCRResVns1a3J2ZsMNc=\ngoogle.golang.org/genproto v0.0.0-20200526211855-cb27e3aa2013/go.mod h1:NbSheEEYHJ7i3ixzK3sjbqSGDJWnxyFXZblF3eUsNvo=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38 h1:2oV8dfuIkM1Ti7DwXc0BJfnwr9csz4TDXI9EmiI+Rbw=\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38/go.mod h1:vuAjtvlwkDKF6L1GQ0SokiRLCGFfeBUXWr/aFFkHACc=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28 h1:XVhgTWWV3kGQlwJHR3upFWZeTsei6Oks1apkZSeonIE=\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241104194629-dd2ea8efbc28/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\ngoogle.golang.org/grpc v1.19.0/go.mod h1:mqu4LbDTu4XGKhr4mRzUsmM4RtVoemTSY81AxZiDr8c=\ngoogle.golang.org/grpc v1.23.0/go.mod h1:Y5yQAOtifL1yxbo5wqy6BxZv8vAUGQwXBOALyacEbxg=\ngoogle.golang.org/grpc v1.25.1/go.mod h1:c3i+UQWmh7LiEpx4sFZnkU36qjEYZ0imhYfXVyQciAY=\ngoogle.golang.org/grpc v1.27.0/go.mod h1:qbnxyOmOxrQa7FizSgH+ReBfzJrCY1pSN7KXBS8abTk=\ngoogle.golang.org/grpc v1.33.2/go.mod h1:JMHMWHQWaTccqQQlmk3MJZS+GWXOdAesneDmEnv2fbc=\ngoogle.golang.org/grpc v1.68.0 h1:aHQeeJbo8zAkAa3pRzrVjZlbz6uSfeOXlJNQM0RAbz0=\ngoogle.golang.org/grpc v1.68.0/go.mod h1:fmSPC5AsjSBCK54MyHRx48kpOti1/jRfOlwEWywNjWA=\ngoogle.golang.org/protobuf v0.0.0-20200109180630-ec00e32a8dfd/go.mod h1:DFci5gLYBciE7Vtevhsrf46CRTquxDuWsQurQQe4oz8=\ngoogle.golang.org/protobuf v0.0.0-20200221191635-4d8936d0db64/go.mod h1:kwYJMbMJ01Woi6D6+Kah6886xMZcty6N08ah7+eCXa0=\ngoogle.golang.org/protobuf v0.0.0-20200228230310-ab0ca4ff8a60/go.mod h1:cfTl7dwQJ+fmap5saPgwCLgHXTUD7jkjRqWcaiX5VyM=\ngoogle.golang.org/protobuf v1.20.1-0.20200309200217-e05f789c0967/go.mod h1:A+miEFZTKqfCUM6K7xSMQL9OKL/b6hQv+e19PK+JZNE=\ngoogle.golang.org/protobuf v1.21.0/go.mod h1:47Nbq4nVaFHyn7ilMalzfO3qCViNmqZ2kzikPIcrTAo=\ngoogle.golang.org/protobuf v1.22.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.0/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.23.1-0.20200526195155-81db48ad09cc/go.mod h1:EGpADcykh3NcUnDUJcl1+ZksZNG86OlYog2l/sGQquU=\ngoogle.golang.org/protobuf v1.25.0/go.mod h1:9JNX74DMeImyA3h4bdi1ymwjUzf21/xIlbajtzgsN7c=\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20190902080502-41f04d3bba15/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\ngopkg.in/warnings.v0 v0.1.2 h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=\ngopkg.in/warnings.v0 v0.1.2/go.mod h1:jksf8JmL6Qr/oQM2OXTHunEvvTAsrWBLb6OOjuVWRNI=\ngopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\nhonnef.co/go/tools v0.0.0-20190102054323-c2f93a96b099/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nhonnef.co/go/tools v0.0.0-20190523083050-ea95bdfd59fc/go.mod h1:rf3lG4BRIbNafJWhAfAdb/ePZxsR/4RtNHQocxwk9r4=\nnullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=\n"
        },
        {
          "name": "gomod2nix.toml",
          "type": "blob",
          "size": 11.986328125,
          "content": "schema = 3\n\n[mod]\n  [mod.\"cloud.google.com/go\"]\n    version = \"v0.116.0\"\n    hash = \"sha256-e62GvNveg3bRi4O+eBARqgQ2sinobx+SVGR9WE7jKgs=\"\n  [mod.\"cloud.google.com/go/ai\"]\n    version = \"v0.8.0\"\n    hash = \"sha256-833SmzVY8+tci2RozAlcdKQZ63RlU2CmeY/8xttP+WI=\"\n  [mod.\"cloud.google.com/go/auth\"]\n    version = \"v0.10.1\"\n    hash = \"sha256-MCEvsZxxLYC/qGUiFNejtQnf4ptoFVKSNMS+XdjteJo=\"\n  [mod.\"cloud.google.com/go/auth/oauth2adapt\"]\n    version = \"v0.2.5\"\n    hash = \"sha256-494whmtNBk1sF3ud3dre97U+mLSTs+XTqZK8w5zG/hk=\"\n  [mod.\"cloud.google.com/go/compute/metadata\"]\n    version = \"v0.5.2\"\n    hash = \"sha256-EtBj20lhjM3SJVKCp70GHMnsItwJ9gOyJOW91wugojc=\"\n  [mod.\"cloud.google.com/go/longrunning\"]\n    version = \"v0.5.7\"\n    hash = \"sha256-hZUbysdaEbFB2nDAg+wjOZHt6E99oEnH7Lo6IQr7FxU=\"\n  [mod.\"dario.cat/mergo\"]\n    version = \"v1.0.1\"\n    hash = \"sha256-wcG6+x0k6KzOSlaPA+1RFxa06/RIAePJTAjjuhLbImw=\"\n  [mod.\"github.com/Microsoft/go-winio\"]\n    version = \"v0.6.2\"\n    hash = \"sha256-tVNWDUMILZbJvarcl/E7tpSnkn7urqgSHa2Eaka5vSU=\"\n  [mod.\"github.com/ProtonMail/go-crypto\"]\n    version = \"v1.1.2\"\n    hash = \"sha256-7pTf7aJt2mGC/u8/+AQ1erGypAO0Rg0HqlIOLeiqLEg=\"\n  [mod.\"github.com/anaskhan96/soup\"]\n    version = \"v1.2.5\"\n    hash = \"sha256-t8yCyK2y7x2qaI/3Yw16q3zVFqu+3acLcPgTr1MIKWg=\"\n  [mod.\"github.com/andybalholm/cascadia\"]\n    version = \"v1.3.2\"\n    hash = \"sha256-Nc9SkqJO/ecincVcUBFITy24TMmMGj5o0Q8EgdNhrEk=\"\n  [mod.\"github.com/anthropics/anthropic-sdk-go\"]\n    version = \"v0.2.0-alpha.4\"\n    hash = \"sha256-8a85Hd4J7eaWvN+J6MImsapStbse5WDDjlODZk3PMzk=\"\n  [mod.\"github.com/araddon/dateparse\"]\n    version = \"v0.0.0-20210429162001-6b43995a97de\"\n    hash = \"sha256-UuX84naeRGMsFOgIgRoBHG5sNy1CzBkWPKmd6VbLwFw=\"\n  [mod.\"github.com/atotto/clipboard\"]\n    version = \"v0.1.4\"\n    hash = \"sha256-ZZ7U5X0gWOu8zcjZcWbcpzGOGdycwq0TjTFh/eZHjXk=\"\n  [mod.\"github.com/bytedance/sonic\"]\n    version = \"v1.12.4\"\n    hash = \"sha256-i6bLujq1dYN+yN2iusMuXrNVkT17bkuR5r5D48qDvpo=\"\n  [mod.\"github.com/bytedance/sonic/loader\"]\n    version = \"v0.2.1\"\n    hash = \"sha256-+gPRZtBOJbAnXp/jdMlPmesc62JGH8akQ1UK9VRI7E4=\"\n  [mod.\"github.com/cloudflare/circl\"]\n    version = \"v1.5.0\"\n    hash = \"sha256-j7T4cfbfmhlbaO+kNKveTnk95JbkEOX0IVw8D9bGTkQ=\"\n  [mod.\"github.com/cloudwego/base64x\"]\n    version = \"v0.1.4\"\n    hash = \"sha256-umCZR3iNmHFm+BC76kfpdcRG+pTQd6Jcu/c2kQDnyfw=\"\n  [mod.\"github.com/cloudwego/iasm\"]\n    version = \"v0.2.0\"\n    hash = \"sha256-TzIP2N3HOesXrKACsRr/ShcoqttwPGZPckIepsTyHOA=\"\n  [mod.\"github.com/cyphar/filepath-securejoin\"]\n    version = \"v0.3.4\"\n    hash = \"sha256-I9dV5gtKk3hH39taAWxvvJEXMi4YoHSxeESVyjpl1MU=\"\n  [mod.\"github.com/davecgh/go-spew\"]\n    version = \"v1.1.1\"\n    hash = \"sha256-nhzSUrE1fCkN0+RL04N4h8jWmRFPPPWbCuDc7Ss0akI=\"\n  [mod.\"github.com/emirpasic/gods\"]\n    version = \"v1.18.1\"\n    hash = \"sha256-hGDKddjLj+5dn2woHtXKUdd49/3xdsqnhx7VEdCu1m4=\"\n  [mod.\"github.com/felixge/httpsnoop\"]\n    version = \"v1.0.4\"\n    hash = \"sha256-c1JKoRSndwwOyOxq9ddCe+8qn7mG9uRq2o/822x5O/c=\"\n  [mod.\"github.com/gabriel-vasile/mimetype\"]\n    version = \"v1.4.6\"\n    hash = \"sha256-W/uPcE22Fduw1XmX8Ujf1S9SYVOcEoE1wzK4I0/vapw=\"\n  [mod.\"github.com/gin-contrib/sse\"]\n    version = \"v0.1.0\"\n    hash = \"sha256-zYbMTao+1F+385Lvsba9roLmmt9eYqr57sUWo0LCVhw=\"\n  [mod.\"github.com/gin-gonic/gin\"]\n    version = \"v1.10.0\"\n    hash = \"sha256-esJasHrJtuTBwGPGAoc/XSb428J8va+tPGcZ0gTfsgc=\"\n  [mod.\"github.com/go-git/gcfg\"]\n    version = \"v1.5.1-0.20230307220236-3a3c6141e376\"\n    hash = \"sha256-f4k0gSYuo0/q3WOoTxl2eFaj7WZpdz29ih6CKc8Ude8=\"\n  [mod.\"github.com/go-git/go-billy/v5\"]\n    version = \"v5.6.0\"\n    hash = \"sha256-Hw+odNozpiixXqmsbahihdV+TBxpusm6/hDLngf7kUg=\"\n  [mod.\"github.com/go-git/go-git/v5\"]\n    version = \"v5.12.0\"\n    hash = \"sha256-mD8EWOQ25FtKBWVSQhQ8V1Rr0tC/ySFZQ9GMDLRqwQU=\"\n  [mod.\"github.com/go-logr/logr\"]\n    version = \"v1.4.2\"\n    hash = \"sha256-/W6qGilFlZNTb9Uq48xGZ4IbsVeSwJiAMLw4wiNYHLI=\"\n  [mod.\"github.com/go-logr/stdr\"]\n    version = \"v1.2.2\"\n    hash = \"sha256-rRweAP7XIb4egtT1f2gkz4sYOu7LDHmcJ5iNsJUd0sE=\"\n  [mod.\"github.com/go-playground/locales\"]\n    version = \"v0.14.1\"\n    hash = \"sha256-BMJGAexq96waZn60DJXZfByRHb8zA/JP/i6f/YrW9oQ=\"\n  [mod.\"github.com/go-playground/universal-translator\"]\n    version = \"v0.18.1\"\n    hash = \"sha256-2/B2qP51zfiY+k8G0w0D03KXUc7XpWj6wKY7NjNP/9E=\"\n  [mod.\"github.com/go-playground/validator/v10\"]\n    version = \"v10.22.1\"\n    hash = \"sha256-EsgeltH0ow6saxLvTFVtIyHVqWI3Fiu1AE2Qmnsmowg=\"\n  [mod.\"github.com/go-shiori/dom\"]\n    version = \"v0.0.0-20230515143342-73569d674e1c\"\n    hash = \"sha256-4lm9KZfR2XnfZU9KTG+4jqLYZqbfL74AMO4y3dKpIbg=\"\n  [mod.\"github.com/go-shiori/go-readability\"]\n    version = \"v0.0.0-20241012063810-92284fa8a71f\"\n    hash = \"sha256-NgciyWylVSjzkt5xWF1Xk1Xbxgq3PsHW5PZ8oifjZVY=\"\n  [mod.\"github.com/goccy/go-json\"]\n    version = \"v0.10.3\"\n    hash = \"sha256-ZOzfwCXh+qp+hp+UnC0t422hUV0Cq5KANXkx8hcLp7s=\"\n  [mod.\"github.com/gogs/chardet\"]\n    version = \"v0.0.0-20211120154057-b7413eaefb8f\"\n    hash = \"sha256-4MeqBJsh4U+ZEbfdDwdciTYMlQWkCil2KJbUxHjBSIo=\"\n  [mod.\"github.com/golang/groupcache\"]\n    version = \"v0.0.0-20210331224755-41bb18bfe9da\"\n    hash = \"sha256-7Gs7CS9gEYZkbu5P4hqPGBpeGZWC64VDwraSKFF+VR0=\"\n  [mod.\"github.com/google/generative-ai-go\"]\n    version = \"v0.18.0\"\n    hash = \"sha256-Ye+1rV3gzb2FG9ATq8cihlUiCynRv0eejMwsSfxOXcM=\"\n  [mod.\"github.com/google/s2a-go\"]\n    version = \"v0.1.8\"\n    hash = \"sha256-H4jy3iElh82CTujW3UpaSvsdfN7fZHBLJ4Z4M7kiMSk=\"\n  [mod.\"github.com/google/uuid\"]\n    version = \"v1.6.0\"\n    hash = \"sha256-VWl9sqUzdOuhW0KzQlv0gwwUQClYkmZwSydHG2sALYw=\"\n  [mod.\"github.com/googleapis/enterprise-certificate-proxy\"]\n    version = \"v0.3.4\"\n    hash = \"sha256-RVHWa0I68CTegjlXnM/GlishoZhmmwG4z+9KBucAJ1A=\"\n  [mod.\"github.com/googleapis/gax-go/v2\"]\n    version = \"v2.13.0\"\n    hash = \"sha256-p1SEjRjI/SkWSBWjeptQ5M/Tgrcj8IiH/beXBYqRVko=\"\n  [mod.\"github.com/jbenet/go-context\"]\n    version = \"v0.0.0-20150711004518-d14ea06fba99\"\n    hash = \"sha256-VANNCWNNpARH/ILQV9sCQsBWgyL2iFT+4AHZREpxIWE=\"\n  [mod.\"github.com/jessevdk/go-flags\"]\n    version = \"v1.6.1\"\n    hash = \"sha256-Q5WFTgRxYio0+ay3sbQeBPKeJAFvOdiDVkaTVn3hoTA=\"\n  [mod.\"github.com/joho/godotenv\"]\n    version = \"v1.5.1\"\n    hash = \"sha256-kA0osKfsc6Kp+nuGTRJyXZZlJt1D/kuEazKMWYCWcQ8=\"\n  [mod.\"github.com/json-iterator/go\"]\n    version = \"v1.1.12\"\n    hash = \"sha256-To8A0h+lbfZ/6zM+2PpRpY3+L6725OPC66lffq6fUoM=\"\n  [mod.\"github.com/kevinburke/ssh_config\"]\n    version = \"v1.2.0\"\n    hash = \"sha256-Ta7ZOmyX8gG5tzWbY2oES70EJPfI90U7CIJS9EAce0s=\"\n  [mod.\"github.com/klauspost/cpuid/v2\"]\n    version = \"v2.2.9\"\n    hash = \"sha256-6UnDBLqlTsKVeZNl5snKQiEBb8xGK5yyg2eZBg7QHLs=\"\n  [mod.\"github.com/leodido/go-urn\"]\n    version = \"v1.4.0\"\n    hash = \"sha256-Q6kplWkY37Tzy6GOme3Wut40jFK4Izun+ij/BJvcEu0=\"\n  [mod.\"github.com/mattn/go-isatty\"]\n    version = \"v0.0.20\"\n    hash = \"sha256-qhw9hWtU5wnyFyuMbKx+7RB8ckQaFQ8D+8GKPkN3HHQ=\"\n  [mod.\"github.com/modern-go/concurrent\"]\n    version = \"v0.0.0-20180306012644-bacd9c7ef1dd\"\n    hash = \"sha256-OTySieAgPWR4oJnlohaFTeK1tRaVp/b0d1rYY8xKMzo=\"\n  [mod.\"github.com/modern-go/reflect2\"]\n    version = \"v1.0.2\"\n    hash = \"sha256-+W9EIW7okXIXjWEgOaMh58eLvBZ7OshW2EhaIpNLSBU=\"\n  [mod.\"github.com/ollama/ollama\"]\n    version = \"v0.4.1\"\n    hash = \"sha256-FKQRSqVNgsASea9h2B+wbpu4Qid0Dt3H02fKdqFTwuk=\"\n  [mod.\"github.com/otiai10/copy\"]\n    version = \"v1.14.0\"\n    hash = \"sha256-xsaL1ddkPS544y0Jv7u/INUALBYmYq29ddWvysLXk4A=\"\n  [mod.\"github.com/pelletier/go-toml/v2\"]\n    version = \"v2.2.3\"\n    hash = \"sha256-fE++SVgnCGdnFZoROHWuYjIR7ENl7k9KKxQrRTquv/o=\"\n  [mod.\"github.com/pjbgf/sha1cd\"]\n    version = \"v0.3.0\"\n    hash = \"sha256-kX9BdLh2dxtGNaDvc24NORO+C0AZ7JzbrXrtecCdB7w=\"\n  [mod.\"github.com/pkg/errors\"]\n    version = \"v0.9.1\"\n    hash = \"sha256-mNfQtcrQmu3sNg/7IwiieKWOgFQOVVe2yXgKBpe/wZw=\"\n  [mod.\"github.com/pmezard/go-difflib\"]\n    version = \"v1.0.0\"\n    hash = \"sha256-/FtmHnaGjdvEIKAJtrUfEhV7EVo5A/eYrtdnUkuxLDA=\"\n  [mod.\"github.com/samber/lo\"]\n    version = \"v1.47.0\"\n    hash = \"sha256-jMXexVTlPdZ40STRpBLv7b+BIRqdxxra12Pl2Mj7Nz8=\"\n  [mod.\"github.com/sashabaranov/go-openai\"]\n    version = \"v1.35.6\"\n    hash = \"sha256-Ef81pLy9oJXtWg6Nj1gSbPOOccwmgYrr6ka3GQ1rVas=\"\n  [mod.\"github.com/sergi/go-diff\"]\n    version = \"v1.3.2-0.20230802210424-5b0b94c5c0d3\"\n    hash = \"sha256-UcLU83CPMbSoKI8RLvLJ7nvGaE2xRSL1RjoHCVkMzUM=\"\n  [mod.\"github.com/skeema/knownhosts\"]\n    version = \"v1.3.0\"\n    hash = \"sha256-piR5IdfqxK9nxyErJ+IRDLnkaeNQwX93ztTFZyPm5MQ=\"\n  [mod.\"github.com/stretchr/testify\"]\n    version = \"v1.9.0\"\n    hash = \"sha256-uUp/On+1nK+lARkTVtb5RxlW15zxtw2kaAFuIASA+J0=\"\n  [mod.\"github.com/tidwall/gjson\"]\n    version = \"v1.14.4\"\n    hash = \"sha256-3DS2YNL95wG0qSajgRtIABD32J+oblaKVk8LIw+KSOc=\"\n  [mod.\"github.com/tidwall/match\"]\n    version = \"v1.1.1\"\n    hash = \"sha256-M2klhPId3Q3T3VGkSbOkYl/2nLHnsG+yMbXkPkyrRdg=\"\n  [mod.\"github.com/tidwall/pretty\"]\n    version = \"v1.2.1\"\n    hash = \"sha256-S0uTDDGD8qr415Ut7QinyXljCp0TkL4zOIrlJ+9OMl8=\"\n  [mod.\"github.com/tidwall/sjson\"]\n    version = \"v1.2.5\"\n    hash = \"sha256-OYGNolkmL7E1Qs2qrQ3IVpQp5gkcHNU/AB/z2O+Myps=\"\n  [mod.\"github.com/twitchyliquid64/golang-asm\"]\n    version = \"v0.15.1\"\n    hash = \"sha256-HLk6oUe7EoITrNvP0y8D6BtIgIcmDZYtb/xl/dufIoY=\"\n  [mod.\"github.com/ugorji/go/codec\"]\n    version = \"v1.2.12\"\n    hash = \"sha256-sp1LJ93UK7mFwgZqG8jxCgTCPgKR74HNU6XxX0Jfjm0=\"\n  [mod.\"github.com/xanzy/ssh-agent\"]\n    version = \"v0.3.3\"\n    hash = \"sha256-l3pGB6IdzcPA/HLk93sSN6NM2pKPy+bVOoacR5RC2+c=\"\n  [mod.\"go.opencensus.io\"]\n    version = \"v0.24.0\"\n    hash = \"sha256-4H+mGZgG2c9I1y0m8avF4qmt8LUKxxVsTqR8mKgP4yo=\"\n  [mod.\"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc\"]\n    version = \"v0.54.0\"\n    hash = \"sha256-wcGPcPYAsWQztlYRqNF5iTwIzmhf/i7N24n7AQhIkkA=\"\n  [mod.\"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"]\n    version = \"v0.57.0\"\n    hash = \"sha256-cvG6gfqfX3IasDlC8SeS7u1sp3LG9ezbX+hU5LyWKBY=\"\n  [mod.\"go.opentelemetry.io/otel\"]\n    version = \"v1.32.0\"\n    hash = \"sha256-Z2PoBBncuUkAksk8wT4lW6+uUu1wg24sGfwIYozIzaY=\"\n  [mod.\"go.opentelemetry.io/otel/metric\"]\n    version = \"v1.32.0\"\n    hash = \"sha256-f2H8itkQflk/m98dSk1TCv37wvsnMojaGNZRJ6BcksU=\"\n  [mod.\"go.opentelemetry.io/otel/trace\"]\n    version = \"v1.32.0\"\n    hash = \"sha256-WtOrB2L8wQFiMb5BHK7a6FTw2wb3rW495whNjzdxC1I=\"\n  [mod.\"golang.org/x/arch\"]\n    version = \"v0.12.0\"\n    hash = \"sha256-olf8Pa5o8H4xC1gXTMlZiyxvMvK0jCablZyaPbqzlYA=\"\n  [mod.\"golang.org/x/crypto\"]\n    version = \"v0.29.0\"\n    hash = \"sha256-sqckobR2VWucCgb7xpY2wLktnAA+XyXJbhCm80yCo78=\"\n  [mod.\"golang.org/x/net\"]\n    version = \"v0.31.0\"\n    hash = \"sha256-G+vGyCnn8jywmX3KvsIwhZkOv3+oAERNNeCeiQqfIL0=\"\n  [mod.\"golang.org/x/oauth2\"]\n    version = \"v0.24.0\"\n    hash = \"sha256-808F4hzvNOQNoQZehOlIyPgwQG3L5aANiNPLLhaL9NQ=\"\n  [mod.\"golang.org/x/sync\"]\n    version = \"v0.9.0\"\n    hash = \"sha256-sGvzGqaaXE5dxohKkpbJMnu+bMmismsSqr8YMtrK+Rc=\"\n  [mod.\"golang.org/x/sys\"]\n    version = \"v0.27.0\"\n    hash = \"sha256-BXQcF9RrJ55Pq7Nl67TeFGkgkyuKkQ8hHKN4/L4ggWc=\"\n  [mod.\"golang.org/x/text\"]\n    version = \"v0.20.0\"\n    hash = \"sha256-YP8zSo2e9okqhxVB8me8sJyij2O0tTQEg5t+8bsIUx8=\"\n  [mod.\"golang.org/x/time\"]\n    version = \"v0.7.0\"\n    hash = \"sha256-o1ol/hTpfrc06KUXSepAgm4QUuWmH1S+vqg6kmFad64=\"\n  [mod.\"google.golang.org/api\"]\n    version = \"v0.205.0\"\n    hash = \"sha256-IoKjeItw89bhoEDQl52nOa9VC6/r1UtyeqKx1VOACXI=\"\n  [mod.\"google.golang.org/genproto/googleapis/api\"]\n    version = \"v0.0.0-20241021214115-324edc3d5d38\"\n    hash = \"sha256-ASsqfJU1DA57PLRoitSkdlS/p10EEuzl0YuZTdbmMCw=\"\n  [mod.\"google.golang.org/genproto/googleapis/rpc\"]\n    version = \"v0.0.0-20241104194629-dd2ea8efbc28\"\n    hash = \"sha256-Fk+cG5bRI3BvnqhWzvMzbU36cC7PM+o2oAOJmvVx9M0=\"\n  [mod.\"google.golang.org/grpc\"]\n    version = \"v1.68.0\"\n    hash = \"sha256-HeaHAeeuyGdCOg0hPF7+Q8XD9Ek9F45O4Hxl3rvc5Q8=\"\n  [mod.\"google.golang.org/protobuf\"]\n    version = \"v1.35.1\"\n    hash = \"sha256-4NtUQoBvlPGFGjo7c+E1EBS/sb8oy50MGy45KGWPpWo=\"\n  [mod.\"gopkg.in/warnings.v0\"]\n    version = \"v0.1.2\"\n    hash = \"sha256-ATVL9yEmgYbkJ1DkltDGRn/auGAjqGOfjQyBYyUo8s8=\"\n  [mod.\"gopkg.in/yaml.v2\"]\n    version = \"v2.4.0\"\n    hash = \"sha256-uVEGglIedjOIGZzHW4YwN1VoRSTK8o0eGZqzd+TNdd0=\"\n  [mod.\"gopkg.in/yaml.v3\"]\n    version = \"v3.0.1\"\n    hash = \"sha256-FqL9TKYJ0XkNwJFnq9j0VvJ5ZUU1RvH/52h/f5bkYAU=\"\n"
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 0.2314453125,
          "content": "package main\n\nimport (\n\t\"fmt\"\n\t\"github.com/jessevdk/go-flags\"\n\t\"os\"\n\n\t\"github.com/danielmiessler/fabric/cli\"\n)\n\nfunc main() {\n\terr := cli.Cli(version)\n\tif err != nil && !flags.WroteHelp(err) {\n\t\tfmt.Printf(\"%s\\n\", err)\n\t\tos.Exit(1)\n\t}\n}\n"
        },
        {
          "name": "patterns",
          "type": "tree",
          "content": null
        },
        {
          "name": "pkgs",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "restapi",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup_fabric.bat",
          "type": "blob",
          "size": 3.2666015625,
          "content": "@echo off\nsetlocal enabledelayedexpansion\n\n:: Check if running with administrator privileges\nnet session >nul 2>&1\nif %errorlevel% neq 0 (\n    echo Please run this script as an administrator.\n    pause\n    exit /b 1\n)\n\n:: Install Chocolatey (package manager for Windows)\nif not exist \"%ProgramData%\\chocolatey\\bin\\choco.exe\" (\n    echo Installing Chocolatey...\n    @\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command \"[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n)\n\n:: Install Go\nwhere go >nul 2>&1\nif %errorlevel% neq 0 (\n    echo Installing Go...\n    choco install golang -y\n    set \"PATH=%PATH%;C:\\Program Files\\Go\\bin\"\n)\n\n:: Install Git\nwhere git >nul 2>&1\nif %errorlevel% neq 0 (\n    echo Installing Git...\n    choco install git -y\n)\n\n:: Refresh environment variables\ncall refreshenv\n\n:: Install Fabric\necho Installing Fabric...\ngo install github.com/danielmiessler/fabric@latest\n\n:: Run Fabric setup\necho Running Fabric setup...\nfabric --setup\n\n:: Install yt helper\necho Installing yt helper...\ngo install github.com/danielmiessler/yt@latest\n\n:: Prompt user for YouTube API Key\nset /p YOUTUBE_API_KEY=Enter your YouTube API Key (press Enter to skip): \nif not \"!YOUTUBE_API_KEY!\"==\"\" (\n    echo YOUTUBE_API_KEY=!YOUTUBE_API_KEY!>> %USERPROFILE%\\.config\\fabric\\.env\n)\n\n:: Prompt user for OpenAI API Key\nset /p OPENAI_API_KEY=Enter your OpenAI API Key (press Enter to skip): \nif not \"!OPENAI_API_KEY!\"==\"\" (\n    echo OPENAI_API_KEY=!OPENAI_API_KEY!>> %USERPROFILE%\\.config\\fabric\\.env\n)\n\n:: Run Fabric\n:run_fabric\ncls\necho Fabric is now installed and ready to use.\necho.\necho Available options:\necho 1. Run Fabric with custom options\necho 2. List patterns\necho 3. List models\necho 4. Update patterns\necho 5. Exit\necho.\nset /p CHOICE=Enter your choice (1-5): \n\nif \"%CHOICE%\"==\"1\" (\n    set /p PATTERN=Enter pattern (or press Enter to skip): \n    set /p CONTEXT=Enter context (or press Enter to skip): \n    set /p SESSION=Enter session (or press Enter to skip): \n    set /p MODEL=Enter model (or press Enter to skip): \n    set /p TEMPERATURE=Enter temperature (or press Enter for default): \n    set /p STREAM=Do you want to stream output? (Y/N): \n\n    set \"FABRIC_CMD=fabric\"\n    if not \"!PATTERN!\"==\"\" set \"FABRIC_CMD=!FABRIC_CMD! --pattern !PATTERN!\"\n    if not \"!CONTEXT!\"==\"\" set \"FABRIC_CMD=!FABRIC_CMD! --context !CONTEXT!\"\n    if not \"!SESSION!\"==\"\" set \"FABRIC_CMD=!FABRIC_CMD! --session !SESSION!\"\n    if not \"!MODEL!\"==\"\" set \"FABRIC_CMD=!FABRIC_CMD! --model !MODEL!\"\n    if not \"!TEMPERATURE!\"==\"\" set \"FABRIC_CMD=!FABRIC_CMD! --temperature !TEMPERATURE!\"\n    if /i \"!STREAM!\"==\"Y\" set \"FABRIC_CMD=!FABRIC_CMD! --stream\"\n\n    echo Running Fabric with command: !FABRIC_CMD!\n    !FABRIC_CMD!\n    pause\n    goto run_fabric\n) else if \"%CHOICE%\"==\"2\" (\n    fabric --listpatterns\n    pause\n    goto run_fabric\n) else if \"%CHOICE%\"==\"3\" (\n    fabric --listmodels\n    pause\n    goto run_fabric\n) else if \"%CHOICE%\"==\"4\" (\n    fabric --updatepatterns\n    pause\n    goto run_fabric\n) else if \"%CHOICE%\"==\"5\" (\n    exit /b 0\n) else (\n    echo Invalid choice. Please try again.\n    pause\n    goto run_fabric\n)\n"
        },
        {
          "name": "shell.nix",
          "type": "blob",
          "size": 0.4794921875,
          "content": "{\n  pkgs,\n  gomod2nix,\n  goEnv,\n}:\n\n{\n  default = pkgs.mkShell {\n    nativeBuildInputs = [\n      pkgs.go\n      pkgs.gopls\n      pkgs.gotools\n      pkgs.go-tools\n      pkgs.goimports-reviser\n      gomod2nix\n      goEnv\n\n      (pkgs.writeShellScriptBin \"update\" ''\n        go get -u\n        go mod tidy\n        gomod2nix generate\n      '')\n    ];\n\n    shellHook = ''\n      echo -e \"\\033[0;32;4mHeper commands:\\033[0m\"\n      echo \"'update' instead of 'go get -u && go mod tidy'\"\n    '';\n  };\n}\n"
        },
        {
          "name": "stitches",
          "type": "tree",
          "content": null
        },
        {
          "name": "streamlit.py",
          "type": "blob",
          "size": 71.556640625,
          "content": "import shutil\nimport json\nimport os\nimport streamlit as st\nfrom subprocess import run, CalledProcessError\nfrom dotenv import load_dotenv\nimport re\nimport time\nimport logging\nfrom typing import Dict, List, Optional, Tuple\nfrom datetime import datetime\nimport sys\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Create formatters\nconsole_formatter = logging.Formatter(\n    '\\033[92m%(asctime)s\\033[0m - '  # Green timestamp\n    '\\033[94m%(levelname)s\\033[0m - '  # Blue level\n    '\\033[95m[%(funcName)s]\\033[0m '  # Purple function name\n    '%(message)s'  # Regular message\n)\nfile_formatter = logging.Formatter('%(asctime)s - %(levelname)s - [%(funcName)s] %(message)s')\n\n# Configure root logger\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\n# Clear any existing handlers\nlogger.handlers = []\n\n# Console Handler\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setFormatter(console_formatter)\nconsole_handler.setLevel(logging.INFO)\nlogger.addHandler(console_handler)\n\n# File Handler\nlog_dir = os.path.expanduser(\"~/.config/fabric/logs\")\nos.makedirs(log_dir, exist_ok=True)\nlog_file = os.path.join(log_dir, f\"fabric_ui_{datetime.now().strftime('%Y%m%d')}.log\")\nfile_handler = logging.FileHandler(log_file)\nfile_handler.setFormatter(file_formatter)\nfile_handler.setLevel(logging.DEBUG)  # More detailed logging in file\nlogger.addHandler(file_handler)\n\n# Log startup message\nlogger.info(\"🚀 Fabric UI Starting Up\")\nlogger.info(f\"💾 Log file: {log_file}\")\n\n# Global variables\npattern_dir = os.path.expanduser(\"~/.config/fabric/patterns\")\nMAX_RETRIES = 3\nRETRY_DELAY = 1  # seconds\n\ndef initialize_session_state():\n    \"\"\"Initialize necessary session state attributes.\n    \n    Error handling:\n    - Ensures all required session state variables are initialized\n    - Loads saved outputs from persistent storage\n    - Handles missing or corrupted saved output files\n    \"\"\"\n    logger.info(\"Initializing session state\")\n    default_configs = {\n        # Configuration state\n        \"config_loaded\": False,\n        \"vendors\": {},\n        \"available_models\": [],\n        \"selected_vendor\": None,\n        \"selected_model\": None,\n        \n        # Pattern execution state\n        \"input_content\": \"\",\n        \"selected_patterns\": [],\n        \"chat_output\": [],\n        \"current_view\": \"run\",\n        \n        # Pattern creation state\n        \"wizard_step\": \"Basic Info\",\n        \"session_name\": \"\",\n        \"context_name\": \"\",\n        \n        # Model configuration\n        \"config\": {\n            \"vendor\": \"\",\n            \"model\": \"\",\n            \"context_length\": \"2048\"\n        },\n        \n        # Model caching\n        \"cached_models\": None,\n        \"last_model_fetch\": 0,\n        \n        # UI state\n        \"active_tab\": 0,\n        \n        # Output management\n        \"output_logs\": [],\n        \"starred_outputs\": [],\n        \"starring_output\": None,\n        \"temp_star_name\": \"\"\n    }\n\n    for key, value in default_configs.items():\n        if key not in st.session_state:\n            st.session_state[key] = value\n    \n    # Load saved outputs if they exist\n    load_saved_outputs()\n\ndef parse_models_output(output: str) -> Dict[str, List[str]]:\n    \"\"\"Parse the output of fabric --listmodels command.\"\"\"\n    logger.debug(\"Parsing models output\")\n    providers = {}\n    current_provider = None\n    \n    lines = output.split('\\n')\n    for line in lines:\n        line = line.strip()\n        if not line:\n            continue\n            \n        if line == \"Available models:\":\n            continue\n            \n        if not line.startswith('\\t') and not line.startswith('['):\n            current_provider = line.strip()\n            providers[current_provider] = []\n        elif current_provider and (line.startswith('\\t') or line.startswith('[')):\n            model = line.strip()\n            if '[' in model and ']' in model:\n                model = model.split(']', 1)[1].strip()\n            providers[current_provider].append(model)\n    \n    logger.debug(f\"Found providers: {list(providers.keys())}\")\n    return providers\n\ndef safe_run_command(command: List[str], retry: bool = True) -> Tuple[bool, str, str]:\n    \"\"\"Safely run a command with retries.\"\"\"\n    cmd_str = \" \".join(command)\n    logger.info(f\"Executing command: {cmd_str}\")\n    \n    for attempt in range(MAX_RETRIES if retry else 1):\n        try:\n            logger.debug(f\"Attempt {attempt + 1}/{MAX_RETRIES if retry else 1}\")\n            result = run(command, capture_output=True, text=True)\n            if result.returncode == 0:\n                logger.debug(\"Command executed successfully\")\n                return True, result.stdout, \"\"\n            if attempt == MAX_RETRIES - 1 or not retry:\n                logger.error(f\"Command failed with return code {result.returncode}: {result.stderr}\")\n                return False, \"\", result.stderr\n        except Exception as e:\n            if attempt == MAX_RETRIES - 1 or not retry:\n                logger.error(f\"Command execution failed: {str(e)}\")\n                return False, \"\", str(e)\n        logger.debug(f\"Retrying in {RETRY_DELAY} seconds...\")\n        time.sleep(RETRY_DELAY)\n    logger.error(\"Max retries exceeded\")\n    return False, \"\", \"Max retries exceeded\"\n\ndef fetch_models_once() -> Dict[str, List[str]]:\n    \"\"\"Fetch models once and cache the results.\"\"\"\n    logger.info(\"Fetching models\")\n    current_time = time.time()\n    cache_timeout = 300  # 5 minutes\n    \n    if (st.session_state.cached_models is not None and \n        current_time - st.session_state.last_model_fetch < cache_timeout):\n        logger.debug(\"Using cached models\")\n        return st.session_state.cached_models\n    \n    logger.debug(\"Cache expired or not available, fetching new models\")\n    success, stdout, stderr = safe_run_command([\"fabric\", \"--listmodels\"])\n    if not success:\n        logger.error(f\"Failed to fetch models: {stderr}\")\n        st.error(f\"Failed to fetch models: {stderr}\")\n        return {}\n    \n    providers = parse_models_output(stdout)\n    logger.info(f\"Found {len(providers)} providers\")\n    st.session_state.cached_models = providers\n    st.session_state.last_model_fetch = current_time\n    return providers\n\ndef get_configured_providers() -> Dict[str, List[str]]:\n    \"\"\"Get list of configured providers using fabric --listmodels.\"\"\"\n    return fetch_models_once()\n\ndef update_provider_selection(new_provider: str) -> None:\n    \"\"\"Update provider and reset related states.\"\"\"\n    logger.info(f\"Updating provider selection to: {new_provider}\")\n    if new_provider != st.session_state.config[\"vendor\"]:\n        logger.debug(\"Provider changed, resetting model selection\")\n        st.session_state.config[\"vendor\"] = new_provider\n        st.session_state.selected_vendor = new_provider\n        st.session_state.config[\"model\"] = None\n        st.session_state.selected_model = None\n        st.session_state.available_models = []\n        if \"model_select\" in st.session_state:\n            del st.session_state.model_select\n        logger.debug(\"Model state reset completed\")\n\ndef load_configuration() -> bool:\n    \"\"\"Load environment variables and initialize configuration.\"\"\"\n    logger.info(\"Loading configuration\")\n    try:\n        env_path = os.path.expanduser(\"~/.config/fabric/.env\")\n        logger.debug(f\"Looking for .env file at: {env_path}\")\n\n        if not os.path.exists(env_path):\n            logger.error(f\"Configuration file not found at {env_path}\")\n            st.error(f\"Configuration file not found at {env_path}\")\n            return False\n\n        load_dotenv(dotenv_path=env_path)\n        logger.debug(\"Environment variables loaded\")\n\n        with st.spinner(\"Loading providers and models...\"):\n            providers = get_configured_providers()\n        \n        if not providers:\n            logger.error(\"No providers configured\")\n            st.error(\"No providers configured. Please run 'fabric --setup' first.\")\n            return False\n\n        default_vendor = os.getenv(\"DEFAULT_VENDOR\")\n        default_model = os.getenv(\"DEFAULT_MODEL\")\n        context_length = os.getenv(\"DEFAULT_MODEL_CONTEXT_LENGTH\", \"2048\")\n        \n        logger.debug(f\"Default configuration - Vendor: {default_vendor}, Model: {default_model}\")\n\n        if not default_vendor or default_vendor not in providers:\n            default_vendor = next(iter(providers))\n            default_model = providers[default_vendor][0] if providers[default_vendor] else None\n            logger.info(f\"Using fallback configuration - Vendor: {default_vendor}, Model: {default_model}\")\n\n        st.session_state.config = {\n            \"vendor\": default_vendor,\n            \"model\": default_model,\n            \"context_length\": context_length\n        }\n        st.session_state.vendors = providers\n        st.session_state.config_loaded = True\n        \n        logger.info(\"Configuration loaded successfully\")\n        return True\n\n    except Exception as e:\n        logger.error(f\"Configuration error: {str(e)}\", exc_info=True)\n        st.error(f\"Configuration error: {str(e)}\")\n        return False\n\ndef load_models_and_providers() -> None:\n    \"\"\"Load models and providers from fabric configuration.\"\"\"\n    try:\n        st.sidebar.header(\"Model and Provider Selection\")\n\n        providers: Dict[str, List[str]] = fetch_models_once()\n            \n        if not providers:\n            st.sidebar.error(\"No providers configured\")\n            return\n\n        current_vendor = st.session_state.config.get(\"vendor\", \"\")\n        available_providers = list(providers.keys())\n        \n        try:\n            provider_index = available_providers.index(current_vendor) if current_vendor in available_providers else 0\n        except ValueError:\n            provider_index = 0\n            logger.warning(f\"Current vendor {current_vendor} not found in available providers\")\n\n        selected_provider = st.sidebar.selectbox(\n            \"Provider\",\n            available_providers,\n            index=provider_index,\n            key=\"provider_select\",\n            on_change=lambda: update_provider_selection(st.session_state.provider_select)\n        )\n\n        if selected_provider != st.session_state.config.get(\"vendor\"):\n            update_provider_selection(selected_provider)\n        st.sidebar.success(f\"Using {selected_provider}\")\n\n        available_models = providers.get(selected_provider, [])\n        if not available_models:\n            st.sidebar.warning(f\"No models available for {selected_provider}\")\n            return\n\n        current_model = st.session_state.config.get(\"model\")\n        try:\n            model_index = available_models.index(current_model) if current_model in available_models else 0\n        except ValueError:\n            model_index = 0\n            logger.warning(f\"Current model {current_model} not found in available models for {selected_provider}\")\n\n        model_key = f\"model_select_{selected_provider}\"\n        selected_model = st.sidebar.selectbox(\n            \"Model\",\n            available_models,\n            index=model_index,\n            key=model_key\n        )\n\n        if selected_model != st.session_state.config.get(\"model\"):\n            logger.debug(f\"Updating model selection to: {selected_model}\")\n            st.session_state.config[\"model\"] = selected_model\n            st.session_state.selected_model = selected_model\n\n    except Exception as e:\n        logger.error(f\"Error loading models and providers: {str(e)}\", exc_info=True)\n        st.sidebar.error(f\"Error loading models and providers: {str(e)}\")\n        st.session_state.selected_model = None\n        st.session_state.config[\"model\"] = None\n\ndef get_pattern_metadata(pattern_name):\n    \"\"\"Get pattern metadata from system.md.\"\"\"\n    pattern_path = os.path.join(pattern_dir, pattern_name, \"system.md\")\n    if os.path.exists(pattern_path):\n        with open(pattern_path, \"r\") as f:\n            return f.read()\n    return None\n\ndef get_patterns():\n    \"\"\"Get the list of available patterns from the specified directory.\"\"\"\n    if not os.path.exists(pattern_dir):\n        st.error(f\"Pattern directory not found: {pattern_dir}\")\n        return []\n    try:\n        patterns = [item for item in os.listdir(pattern_dir) \n                    if os.path.isdir(os.path.join(pattern_dir, item))]\n        return patterns\n    except PermissionError:\n        st.error(f\"Permission error accessing pattern directory: {pattern_dir}\")\n        return []\n    except Exception as e:\n        st.error(f\"An unexpected error occurred: {e}\")\n        return []\n\ndef create_pattern(pattern_name: str, content: Optional[str] = None) -> Tuple[bool, str]:\n    \"\"\"Create a new pattern with necessary files and structure.\"\"\"\n    new_pattern_path = None\n    try:\n        # Validate pattern name\n        if not pattern_name:\n            logger.error(\"Pattern name cannot be empty\")\n            return False, \"Pattern name cannot be empty.\"\n\n        # Check if pattern already exists\n        new_pattern_path = os.path.join(pattern_dir, pattern_name)\n        if os.path.exists(new_pattern_path):\n            logger.error(f\"Pattern {pattern_name} already exists\")\n            return False, \"Pattern already exists.\"\n\n        # Create pattern directory\n        os.makedirs(new_pattern_path)\n        logger.info(f\"Created pattern directory: {new_pattern_path}\")\n\n        # If content is provided, use fabric create_pattern to structure it\n        if content:\n            logger.info(f\"Structuring content for pattern '{pattern_name}' using Fabric\")\n            try:\n                # Get current model and provider configuration\n                current_provider = st.session_state.config.get(\"vendor\")\n                current_model = st.session_state.config.get(\"model\")\n                \n                if not current_provider or not current_model:\n                    raise ValueError(\"Please select a provider and model first.\")\n                \n                # Execute fabric create_pattern with input content\n                cmd = [\"fabric\", \"--pattern\", \"create_pattern\"]\n                if current_provider and current_model:\n                    cmd.extend([\"--vendor\", current_provider, \"--model\", current_model])\n                \n                logger.debug(f\"Running command: {' '.join(cmd)}\")\n                logger.debug(f\"Input content:\\n{content}\")\n                \n                # Execute pattern\n                result = run(cmd, input=content, capture_output=True, text=True, check=True)\n                structured_content = result.stdout.strip()\n                \n                if not structured_content:\n                    raise ValueError(\"No output received from create_pattern\")\n                \n                # Save the structured content to system.md\n                system_file = os.path.join(new_pattern_path, \"system.md\")\n                with open(system_file, \"w\") as f:\n                    f.write(structured_content)\n                \n                # Validate the created pattern\n                is_valid, validation_message = validate_pattern(pattern_name)\n                if not is_valid:\n                    raise ValueError(f\"Pattern validation failed: {validation_message}\")\n                \n                logger.info(f\"Successfully created pattern '{pattern_name}' with structured content\")\n                \n            except CalledProcessError as e:\n                error_msg = f\"Error running create_pattern: {e.stderr}\"\n                logger.error(error_msg)\n                if os.path.exists(new_pattern_path):\n                    shutil.rmtree(new_pattern_path)\n                return False, error_msg\n                \n            except Exception as e:\n                error_msg = f\"Unexpected error during content structuring: {str(e)}\"\n                logger.error(error_msg)\n                if os.path.exists(new_pattern_path):\n                    shutil.rmtree(new_pattern_path)\n                return False, error_msg\n        else:\n            # Create minimal template for manual editing\n            logger.info(f\"Creating minimal template for pattern '{pattern_name}'\")\n            system_file = os.path.join(new_pattern_path, \"system.md\")\n            with open(system_file, \"w\") as f:\n                f.write(\"# IDENTITY and PURPOSE\\n\\n# STEPS\\n\\n# OUTPUT INSTRUCTIONS\\n\")\n\n            # Validate the created pattern\n            is_valid, validation_message = validate_pattern(pattern_name)\n            if not is_valid:\n                logger.warning(f\"Pattern created but validation failed: {validation_message}\")\n\n        return True, f\"Pattern '{pattern_name}' created successfully.\"\n\n    except Exception as e:\n        error_msg = f\"Error creating pattern: {str(e)}\"\n        logger.error(error_msg)\n        # Clean up on any error\n        if new_pattern_path and os.path.exists(new_pattern_path):\n            shutil.rmtree(new_pattern_path)\n        return False, error_msg\n\ndef delete_pattern(pattern_name):\n    \"\"\"Delete an existing pattern.\"\"\"\n    try:\n        if not pattern_name:\n            return False, \"Pattern name cannot be empty.\"\n\n        pattern_path = os.path.join(pattern_dir, pattern_name)\n        if not os.path.exists(pattern_path):\n            return False, \"Pattern does not exist.\"\n\n        shutil.rmtree(pattern_path)\n        return True, f\"Pattern '{pattern_name}' deleted successfully.\"\n    except Exception as e:\n        return False, f\"Error deleting pattern: {str(e)}\"\n\ndef pattern_creation_wizard():\n    \"\"\"Multi-step wizard for creating a new pattern.\"\"\"\n    st.header(\"Create New Pattern\")\n    \n    pattern_name = st.text_input(\"Pattern Name\")\n    if pattern_name:\n        edit_mode = st.radio(\n            \"Edit Mode\",\n            [\"Simple Editor\", \"Advanced (Wizard)\"],\n            key=\"pattern_creation_edit_mode\",\n            horizontal=True\n        )\n        \n        if edit_mode == \"Simple Editor\":\n            new_content = st.text_area(\"Enter Pattern Content\", height=400)\n            \n            if st.button(\"Create Pattern\", type=\"primary\"):\n                success, message = create_pattern(pattern_name, new_content)\n                if success:\n                    st.success(message)\n                    st.experimental_rerun()\n                else:\n                    st.error(message)\n                        \n        else:\n            sections = [\"IDENTITY\", \"GOAL\", \"OUTPUT\", \"OUTPUT INSTRUCTIONS\"]\n            current_section = st.radio(\n                \"Edit Section\",\n                sections,\n                key=\"pattern_creation_section_select\"\n            )\n            \n            if current_section == \"IDENTITY\":\n                identity = st.text_area(\"Define the IDENTITY\", height=200)\n                st.session_state.new_pattern_identity = identity\n                \n            elif current_section == \"GOAL\":\n                goal = st.text_area(\"Define the GOAL\", height=200)\n                st.session_state.new_pattern_goal = goal\n                \n            elif current_section == \"OUTPUT\":\n                output = st.text_area(\"Define the OUTPUT\", height=200)\n                st.session_state.new_pattern_output = output\n                \n            elif current_section == \"OUTPUT INSTRUCTIONS\":\n                instructions = st.text_area(\"Define the OUTPUT INSTRUCTIONS\", height=200)\n                st.session_state.new_pattern_instructions = instructions\n            \n            pattern_content = f\"\"\"# IDENTITY\n{st.session_state.get('new_pattern_identity', '')}\n\n# GOAL\n{st.session_state.get('new_pattern_goal', '')}\n\n# OUTPUT\n{st.session_state.get('new_pattern_output', '')}\n\n# OUTPUT INSTRUCTIONS\n{st.session_state.get('new_pattern_instructions', '')}\"\"\"\n\n            if st.button(\"Create Pattern\", type=\"primary\"):\n                success, message = create_pattern(pattern_name, pattern_content)\n                if success:\n                    st.success(message)\n                    for key in [\"new_pattern_identity\", \"new_pattern_goal\", \"new_pattern_output\", \"new_pattern_instructions\"]:\n                        if key in st.session_state:\n                            del st.session_state[key]\n                    st.experimental_rerun()\n                else:\n                    st.error(message)\n    else:\n        st.info(\"Enter a pattern name to create a new pattern\")\n\ndef bulk_edit_patterns(patterns_to_edit, field_to_update, new_value):\n    \"\"\"Perform bulk edits on multiple patterns.\"\"\"\n    results = []\n    for pattern in patterns_to_edit:\n        try:\n            pattern_path = os.path.join(pattern_dir, pattern)\n            system_file = os.path.join(pattern_path, \"system.md\")\n            \n            if not os.path.exists(system_file):\n                results.append((pattern, False, \"system.md not found\"))\n                continue\n                \n            with open(system_file, \"r\") as f:\n                content = f.read()\n                \n            if field_to_update == \"purpose\":\n                sections = content.split(\"#\")\n                updated_sections = []\n                for section in sections:\n                    if section.strip().startswith(\"IDENTITY and PURPOSE\"):\n                        lines = section.split(\"\\n\")\n                        for i, line in enumerate(lines):\n                            if \"You are an AI assistant designed to\" in line:\n                                lines[i] = f\"You are an AI assistant designed to {new_value}.\"\n                        updated_sections.append(\"\\n\".join(lines))\n                    else:\n                        updated_sections.append(section)\n                        \n                new_content = \"#\".join(updated_sections)\n                with open(system_file, \"w\") as f:\n                    f.write(new_content)\n                results.append((pattern, True, \"Updated successfully\"))\n            else:\n                results.append((pattern, False, f\"Field {field_to_update} not supported for bulk edit\"))\n                \n        except Exception as e:\n            results.append((pattern, False, str(e)))\n            \n    return results\n\ndef pattern_creation_ui():\n    \"\"\"UI component for creating patterns with simple and wizard modes.\"\"\"\n    pattern_name = st.text_input(\"Pattern Name\")\n    if not pattern_name:\n        st.info(\"Enter a pattern name to create a new pattern\")\n        return\n\n    system_content = \"\"\"# IDENTITY and PURPOSE\n\nYou are an AI assistant designed to {purpose}.\n\n# STEPS\n\n- Step 1\n- Step 2\n- Step 3\n\n# OUTPUT INSTRUCTIONS\n\n- Output format instructions here\n\"\"\"\n    new_content = st.text_area(\"Edit Pattern Content\", system_content, height=400)\n    \n    if st.button(\"Create Pattern\", type=\"primary\"):\n        if not pattern_name:\n            st.error(\"Pattern name cannot be empty.\")\n        else:\n            success, message = create_pattern(pattern_name)\n            if success:\n                system_file = os.path.join(pattern_dir, pattern_name, \"system.md\")\n                with open(system_file, \"w\") as f:\n                    f.write(new_content)\n                st.success(f\"Pattern '{pattern_name}' created successfully!\")\n                st.experimental_rerun()\n            else:\n                st.error(message)\n\ndef pattern_management_ui():\n    \"\"\"UI component for pattern management.\"\"\"\n    st.sidebar.title(\"Pattern Management\")\n\ndef save_output_log(pattern_name: str, input_content: str, output_content: str, timestamp: str):\n    \"\"\"Save pattern execution log.\"\"\"\n    log_entry = {\n        \"timestamp\": timestamp,\n        \"pattern_name\": pattern_name,\n        \"input\": input_content,\n        \"output\": output_content,\n        \"is_starred\": False,\n        \"custom_name\": \"\"\n    }\n    st.session_state.output_logs.append(log_entry)\n    # Save outputs after each new log entry\n    save_outputs()\n\ndef star_output(log_index: int, custom_name: str = \"\") -> bool:\n    \"\"\"Star/favorite an output log.\n    \n    Args:\n        log_index: Index of the output log to star\n        custom_name: Optional custom name for the starred output\n        \n    Returns:\n        bool: True if output was starred successfully, False otherwise\n    \"\"\"\n    try:\n        if 0 <= log_index < len(st.session_state.output_logs):\n            log_entry = st.session_state.output_logs[log_index].copy()\n            log_entry[\"is_starred\"] = True\n            log_entry[\"custom_name\"] = custom_name or f\"Starred Output #{len(st.session_state.starred_outputs) + 1}\"\n            \n            # Check if this output is already starred (by timestamp)\n            if not any(s[\"timestamp\"] == log_entry[\"timestamp\"] for s in st.session_state.starred_outputs):\n                st.session_state.starred_outputs.append(log_entry)\n                save_outputs()  # Save after starring\n                return True\n                \n        return False\n    except Exception as e:\n        logger.error(f\"Error starring output: {str(e)}\")\n        return False\n\ndef unstar_output(log_index: int):\n    \"\"\"Remove an output from starred/favorites.\"\"\"\n    if 0 <= log_index < len(st.session_state.starred_outputs):\n        st.session_state.starred_outputs.pop(log_index)\n        # Save outputs after unstarring\n        save_outputs()\n\ndef validate_input_content(input_text: str) -> Tuple[bool, str]:\n    \"\"\"Validate input content for potentially problematic characters or patterns.\n    \n    Args:\n        input_text: The input text to validate\n        \n    Returns:\n        Tuple[bool, str]: (is_valid, error_message)\n    \"\"\"\n    if not input_text or input_text.isspace():\n        return False, \"Input content cannot be empty or only whitespace.\"\n    \n    # Check for minimum length\n    if len(input_text.strip()) < 2:\n        return False, \"Input content must be at least 2 characters long.\"\n    \n    # Check for maximum length (e.g., 100KB)\n    if len(input_text.encode('utf-8')) > 100 * 1024:\n        return False, \"Input content exceeds maximum size of 100KB.\"\n    \n    # Check for high concentration of special characters\n    special_chars = set('!@#$%^&*()_+[]{}|\\\\;:\\'\",.<>?`~')\n    special_char_count = sum(1 for c in input_text if c in special_chars)\n    special_char_ratio = special_char_count / len(input_text)\n    \n    if special_char_ratio > 0.3:  # More than 30% special characters\n        return False, \"Input contains too many special characters. Please check your input.\"\n    \n    # Check for control characters\n    control_chars = set(chr(i) for i in range(32) if i not in [9, 10, 13])  # Allow tab, newline, carriage return\n    if any(c in control_chars for c in input_text):\n        return False, \"Input contains invalid control characters.\"\n    \n    # Check for proper UTF-8 encoding\n    try:\n        input_text.encode('utf-8').decode('utf-8')\n    except UnicodeError:\n        return False, \"Input contains invalid Unicode characters.\"\n    \n    return True, \"\"\n\ndef sanitize_input_content(input_text: str) -> str:\n    \"\"\"Sanitize input content by removing or replacing problematic characters.\n    \n    Args:\n        input_text: The input text to sanitize\n        \n    Returns:\n        str: Sanitized input text\n    \"\"\"\n    # Remove null bytes\n    text = input_text.replace('\\0', '')\n    \n    # Replace control characters with spaces (except newlines and tabs)\n    allowed_chars = {'\\n', '\\t', '\\r'}\n    sanitized_chars = []\n    for c in text:\n        if c in allowed_chars or ord(c) >= 32:\n            sanitized_chars.append(c)\n        else:\n            sanitized_chars.append(' ')\n    \n    # Join characters and normalize whitespace\n    text = ''.join(sanitized_chars)\n    text = ' '.join(text.split())\n    \n    return text\n\ndef execute_patterns(patterns_to_run: List[str], chain_mode: bool = False, initial_input: Optional[str] = None) -> List[str]:\n    \"\"\"Execute the selected patterns and capture their outputs.\"\"\"\n    logger.info(f\"Executing {len(patterns_to_run)} patterns\")\n    \n    st.session_state.chat_output = []\n    all_outputs = []\n    current_input = initial_input or st.session_state.input_content\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # Validate configuration\n    current_provider = st.session_state.config.get(\"vendor\")\n    current_model = st.session_state.config.get(\"model\")\n    \n    if not current_provider or not current_model:\n        error_msg = \"Please select a provider and model first.\"\n        logger.error(error_msg)\n        st.error(error_msg)\n        return all_outputs\n\n    # Validate input content\n    is_valid, error_message = validate_input_content(current_input)\n    if not is_valid:\n        logger.error(f\"Input validation failed: {error_message}\")\n        st.error(f\"Input validation failed: {error_message}\")\n        return all_outputs\n\n    # Sanitize input content\n    try:\n        sanitized_input = sanitize_input_content(current_input)\n        if sanitized_input != current_input:\n            logger.info(\"Input content was sanitized\")\n            st.warning(\"Input content was automatically sanitized for better compatibility.\")\n        \n        current_input = sanitized_input\n    except Exception as e:\n        logger.error(f\"Error sanitizing input: {str(e)}\")\n        st.error(f\"Error processing input: {str(e)}\")\n        return all_outputs\n\n    execution_info = f\"**Using Model:** {current_provider} - {current_model}\"\n    all_outputs.append(execution_info)\n    logger.info(f\"Using model: {current_model} from provider: {current_provider}\")\n\n    try:\n        for pattern in patterns_to_run:\n            logger.info(f\"Running pattern: {pattern}\")\n            try:\n                cmd = [\"fabric\", \"--pattern\", pattern]\n                logger.debug(f\"Executing command: {' '.join(cmd)}\")\n\n                message = current_input if chain_mode else st.session_state.input_content\n                logger.debug(f\"Input for pattern {pattern}:\\n{message}\")\n\n                # Ensure input_data is a string\n                input_data = str(message)\n\n                # Run the command with text=True and string input\n                result = run(\n                    cmd,\n                    input=input_data,\n                    capture_output=True,\n                    text=True,\n                    check=True\n                )\n                \n                pattern_output = result.stdout.strip()\n                logger.debug(f\"Raw output from pattern {pattern}:\\n{pattern_output}\")\n\n                if pattern_output:\n                    # Format output as markdown\n                    output_msg = f\"\"\"### {pattern}\n\n{pattern_output}\"\"\"\n                    all_outputs.append(output_msg)\n                    # Save to output logs with markdown formatting\n                    save_output_log(pattern, message, pattern_output, timestamp)\n                    if chain_mode:\n                        current_input = pattern_output\n                else:\n                    logger.warning(f\"Pattern {pattern} generated no output\")\n                    all_outputs.append(f\"### {pattern}\\n\\nNo output generated.\")\n\n            except UnicodeEncodeError as e:\n                error_msg = f\"### {pattern}\\n\\n❌ Error: Input contains invalid characters: {str(e)}\"\n                logger.error(f\"Unicode encoding error for pattern {pattern}: {str(e)}\")\n                all_outputs.append(error_msg)\n                if chain_mode:\n                    break\n\n            except CalledProcessError as e:\n                error_msg = f\"### {pattern}\\n\\n❌ Error executing: {e.stderr.strip()}\"\n                logger.error(f\"Pattern {pattern} failed: {e.stderr.strip()}\")\n                all_outputs.append(error_msg)\n                if chain_mode:\n                    break\n\n            except Exception as e:\n                error_msg = f\"### {pattern}\\n\\n❌ Failed to execute: {str(e)}\"\n                logger.error(f\"Pattern {pattern} failed: {str(e)}\", exc_info=True)\n                all_outputs.append(error_msg)\n                if chain_mode:\n                    break\n\n    except Exception as e:\n        error_msg = f\"### Error\\n\\n❌ Error in pattern execution: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        st.error(error_msg)\n\n    logger.info(\"Pattern execution completed\")\n    return all_outputs\n\ndef validate_pattern(pattern_name):\n    \"\"\"Validate a pattern's structure and content.\"\"\"\n    try:\n        pattern_path = os.path.join(pattern_dir, pattern_name)\n        \n        if not os.path.exists(os.path.join(pattern_path, \"system.md\")):\n            return False, f\"Missing required file: system.md.\"\n        \n        with open(os.path.join(pattern_path, \"system.md\")) as f:\n            content = f.read()\n            required_sections = [\n                \"# IDENTITY\",\n                \"# STEPS\",\n                \"# OUTPUT\"\n            ]\n            missing_sections = []\n            for section in required_sections:\n                if section.lower() not in content.lower():\n                    missing_sections.append(section)\n            \n            if missing_sections:\n                return True, f\"Warning: Missing sections in system.md: {', '.join(missing_sections)}\"\n        \n        return True, \"Pattern is valid.\"\n    except Exception as e:\n        return False, f\"Error validating pattern: {str(e)}\"\n\ndef pattern_editor(pattern_name):\n    \"\"\"Edit pattern content with simple and advanced editing options.\"\"\"\n    if not pattern_name:\n        return\n        \n    pattern_path = os.path.join(pattern_dir, pattern_name)\n    system_file = os.path.join(pattern_path, \"system.md\")\n    user_file = os.path.join(pattern_path, \"user.md\")\n    \n    st.markdown(f\"### Editing Pattern: {pattern_name}\")\n    is_valid, message = validate_pattern(pattern_name)\n    if not is_valid:\n        st.error(message)\n    elif message != \"Pattern is valid.\":\n        st.warning(message)\n    else:\n        st.success(\"Pattern structure is valid\")\n    \n    edit_mode = st.radio(\n        \"Edit Mode\",\n        [\"Simple Editor\", \"Advanced (Wizard)\"],\n        key=f\"edit_mode_{pattern_name}\",\n        horizontal=True\n    )\n    \n    if edit_mode == \"Simple Editor\":\n        if os.path.exists(system_file):\n            with open(system_file) as f:\n                content = f.read()\n            new_content = st.text_area(\"Edit system.md\", content, height=600)\n            if st.button(\"Save system.md\"):\n                with open(system_file, \"w\") as f:\n                    f.write(new_content)\n                st.success(\"Saved successfully!\")\n        else:\n            st.error(\"system.md file not found\")\n            \n        if os.path.exists(user_file):\n            with open(user_file) as f:\n                content = f.read()\n            new_content = st.text_area(\"Edit user.md\", content, height=300)\n            if st.button(\"Save user.md\"):\n                with open(user_file, \"w\") as f:\n                    f.write(new_content)\n                st.success(\"Saved successfully!\")\n    \n    else:\n        if os.path.exists(system_file):\n            with open(system_file) as f:\n                content = f.read()\n            \n            sections = content.split(\"#\")\n            edited_sections = []\n            \n            for section in sections:\n                if not section.strip():\n                    continue\n                    \n                lines = section.strip().split(\"\\n\", 1)\n                if len(lines) > 1:\n                    title, content = lines\n                else:\n                    title, content = lines[0], \"\"\n                \n                st.markdown(f\"#### {title}\")\n                new_content = st.text_area(\n                    f\"Edit {title} section\",\n                    value=content.strip(),\n                    height=200,\n                    key=f\"section_{title}\"\n                )\n                edited_sections.append(f\"# {title}\\n\\n{new_content}\")\n            \n            if st.button(\"Save Changes\"):\n                new_content = \"\\n\\n\".join(edited_sections)\n                with open(system_file, \"w\") as f:\n                    f.write(new_content)\n                st.success(\"Changes saved successfully!\")\n                \n                is_valid, message = validate_pattern(pattern_name)\n                if not is_valid:\n                    st.error(message)\n                elif message != \"Pattern is valid.\":\n                    st.warning(message)\n        else:\n            st.error(\"system.md file not found\")\n\ndef get_outputs_dir() -> str:\n    \"\"\"Get the directory for storing outputs.\"\"\"\n    outputs_dir = os.path.expanduser(\"~/.config/fabric/outputs\")\n    os.makedirs(outputs_dir, exist_ok=True)\n    return outputs_dir\n\ndef save_outputs():\n    \"\"\"Save pattern outputs and starred outputs to files.\n    \n    Error handling:\n    - Creates output directory if it doesn't exist\n    - Handles file write permissions\n    - Handles JSON serialization errors\n    - Logs all errors for debugging\n    \"\"\"\n    logger.info(\"Saving outputs to persistent storage\")\n    outputs_dir = get_outputs_dir()\n    \n    output_logs_file = os.path.join(outputs_dir, \"output_logs.json\")\n    starred_outputs_file = os.path.join(outputs_dir, \"starred_outputs.json\")\n    \n    try:\n        # Save output logs\n        with open(output_logs_file, \"w\") as f:\n            json.dump(st.session_state.output_logs, f, indent=2)\n        logger.debug(f\"Saved output logs to {output_logs_file}\")\n        \n        # Save starred outputs\n        with open(starred_outputs_file, \"w\") as f:\n            json.dump(st.session_state.starred_outputs, f, indent=2)\n        logger.debug(f\"Saved starred outputs to {starred_outputs_file}\")\n        \n    except PermissionError as e:\n        error_msg = f\"Permission denied when saving outputs: {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n    except json.JSONEncodeError as e:\n        error_msg = f\"Error encoding outputs to JSON: {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n    except Exception as e:\n        error_msg = f\"Unexpected error saving outputs: {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n\ndef load_saved_outputs():\n    \"\"\"Load saved pattern outputs from files.\n    \n    Error handling:\n    - Handles missing output files\n    - Handles corrupted JSON files\n    - Handles file read permissions\n    - Initializes empty state if files don't exist\n    \"\"\"\n    logger.info(\"Loading saved outputs\")\n    outputs_dir = get_outputs_dir()\n    output_logs_file = os.path.join(outputs_dir, \"output_logs.json\")\n    starred_outputs_file = os.path.join(outputs_dir, \"starred_outputs.json\")\n    \n    try:\n        # Load output logs\n        if os.path.exists(output_logs_file):\n            with open(output_logs_file, \"r\") as f:\n                st.session_state.output_logs = json.load(f)\n            logger.debug(f\"Loaded output logs from {output_logs_file}\")\n        \n        # Load starred outputs\n        if os.path.exists(starred_outputs_file):\n            with open(starred_outputs_file, \"r\") as f:\n                st.session_state.starred_outputs = json.load(f)\n            logger.debug(f\"Loaded starred outputs from {starred_outputs_file}\")\n            \n    except json.JSONDecodeError as e:\n        error_msg = f\"Error decoding saved outputs (corrupted files): {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n        # Initialize empty state\n        st.session_state.output_logs = []\n        st.session_state.starred_outputs = []\n    except PermissionError as e:\n        error_msg = f\"Permission denied when loading outputs: {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n    except Exception as e:\n        error_msg = f\"Unexpected error loading saved outputs: {str(e)}\"\n        logger.error(error_msg)\n        st.error(error_msg)\n        # Initialize empty state\n        st.session_state.output_logs = []\n        st.session_state.starred_outputs = []\n\ndef handle_star_name_input(log_index: int, name: str):\n    \"\"\"Handle the starring process when a name is input.\n    \n    Args:\n        log_index: Index of the output to star\n        name: Name to give the starred output\n    \"\"\"\n    try:\n        if star_output(log_index, name):\n            st.success(\"Output starred successfully!\")\n        else:\n            st.error(\"Failed to star output. Please try again.\")\n    except Exception as e:\n        logger.error(f\"Error handling star name input: {str(e)}\")\n        st.error(f\"Error starring output: {str(e)}\")\n\ndef execute_pattern_chain(patterns_sequence: List[str], initial_input: str) -> Dict:\n    \"\"\"Execute a sequence of patterns in a chain, passing output from each to the next.\n    \n    Args:\n        patterns_sequence: List of pattern names to execute in sequence\n        initial_input: Initial input text to start the chain\n        \n    Returns:\n        Dict containing results from each stage of the chain\n    \"\"\"\n    logger.info(f\"Starting pattern chain execution with {len(patterns_sequence)} patterns\")\n    chain_results = {\n        \"sequence\": patterns_sequence,\n        \"stages\": [],\n        \"final_output\": None,\n        \"metadata\": {\n            \"timestamp\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"success\": False\n        }\n    }\n    \n    current_input = initial_input\n    \n    try:\n        for i, pattern in enumerate(patterns_sequence, 1):\n            logger.info(f\"Chain Stage {i}: Executing pattern '{pattern}'\")\n            stage_result = {\n                \"pattern\": pattern,\n                \"input\": current_input,\n                \"output\": None,\n                \"success\": False,\n                \"error\": None\n            }\n            \n            try:\n                cmd = [\"fabric\", \"--pattern\", pattern]\n                result = run(cmd, input=current_input, capture_output=True, text=True, check=True)\n                output = result.stdout.strip()\n                \n                if output:\n                    stage_result[\"output\"] = output\n                    stage_result[\"success\"] = True\n                    current_input = output  # Use this output as input for next pattern\n                    logger.debug(f\"Stage {i} completed successfully\")\n                else:\n                    stage_result[\"error\"] = \"Pattern generated no output\"\n                    logger.warning(f\"Pattern {pattern} generated no output\")\n                    \n            except CalledProcessError as e:\n                error_msg = f\"Error executing pattern: {e.stderr.strip()}\"\n                stage_result[\"error\"] = error_msg\n                logger.error(error_msg)\n                break\n                \n            except Exception as e:\n                error_msg = f\"Unexpected error: {str(e)}\"\n                stage_result[\"error\"] = error_msg\n                logger.error(error_msg)\n                break\n                \n            chain_results[\"stages\"].append(stage_result)\n            \n            # Save stage output to logs\n            save_output_log(\n                pattern,\n                stage_result[\"input\"],\n                stage_result[\"output\"] or stage_result[\"error\"],\n                chain_results[\"metadata\"][\"timestamp\"]\n            )\n        \n        # Set final output and success status\n        successful_stages = [s for s in chain_results[\"stages\"] if s[\"success\"]]\n        if successful_stages:\n            chain_results[\"final_output\"] = successful_stages[-1][\"output\"]\n            chain_results[\"metadata\"][\"success\"] = True\n            \n    except Exception as e:\n        logger.error(f\"Chain execution failed: {str(e)}\", exc_info=True)\n        chain_results[\"metadata\"][\"error\"] = str(e)\n    \n    return chain_results\n\ndef enhance_input_preview():\n    \"\"\"Display a preview of the input content with basic statistics.\n    \n    Shows:\n    - Input text preview\n    - Character count\n    - Word count\n    \"\"\"\n    if 'input_content' in st.session_state and st.session_state.input_content:\n        with st.expander(\"Input Preview\", expanded=True):\n            st.markdown(\"### Current Input\")\n            st.code(st.session_state.input_content, language=\"text\")\n            \n            # Basic statistics\n            char_count = len(st.session_state.input_content)\n            word_count = len(st.session_state.input_content.split())\n            \n            col1, col2 = st.columns(2)\n            with col1:\n                st.metric(\"Characters\", char_count)\n            with col2:\n                st.metric(\"Words\", word_count)\n\ndef get_clipboard_content() -> Tuple[bool, str, str]:\n    \"\"\"Get content from clipboard with proper error handling.\n    \n    Returns:\n        Tuple[bool, str, str]: (success, content, error_message)\n    \"\"\"\n    try:\n        result = run(\n            [\"xclip\", \"-selection\", \"clipboard\", \"-o\"], \n            capture_output=True, \n            text=True,\n            check=True\n        )\n        content = result.stdout\n        # Validate the content is proper UTF-8\n        try:\n            content.encode('utf-8').decode('utf-8')\n            return True, content, \"\"\n        except UnicodeError:\n            return False, \"\", \"Clipboard contains invalid Unicode characters\"\n    except FileNotFoundError:\n        return False, \"\", \"xclip is not installed. Please install it with: sudo apt-get install xclip\"\n    except CalledProcessError as e:\n        return False, \"\", f\"Failed to read clipboard: {e.stderr}\"\n    except Exception as e:\n        return False, \"\", f\"Unexpected error reading clipboard: {str(e)}\"\n\ndef set_clipboard_content(content: str) -> Tuple[bool, str]:\n    \"\"\"Set content to clipboard with proper error handling.\n    \n    Args:\n        content: The content to copy to clipboard\n        \n    Returns:\n        Tuple[bool, str]: (success, error_message)\n    \"\"\"\n    try:\n        # Validate content is proper UTF-8 before attempting to copy\n        try:\n            input_bytes = content.encode('utf-8')\n        except UnicodeError:\n            return False, \"Content contains invalid Unicode characters\"\n            \n        run(\n            [\"xclip\", \"-selection\", \"clipboard\"],\n            input=input_bytes,\n            check=True\n        )\n        return True, \"\"\n    except FileNotFoundError:\n        return False, \"xclip is not installed. Please install it with: sudo apt-get install xclip\"\n    except CalledProcessError as e:\n        return False, f\"Failed to copy to clipboard: {e.stderr}\"\n    except Exception as e:\n        return False, f\"Unexpected error copying to clipboard: {str(e)}\"\n\ndef main():\n    \"\"\"Main function to run the Streamlit app.\"\"\"\n    logger.info(\"Starting Fabric Pattern Studio\")\n    try:\n        # Set page config\n        st.set_page_config(\n            page_title=\"Fabric Pattern Studio\",\n            page_icon=\"🧬\",\n            layout=\"wide\",\n            initial_sidebar_state=\"expanded\"\n        )\n\n        # Add title with gradient styling and footer signature\n        st.markdown(\"\"\"\n            <style>\n                [data-testid=\"stHeader\"] {\n                    background-color: rgba(0,0,0,0);\n                }\n                .fabric-header {\n                    padding: 1rem;\n                    margin-bottom: 1rem;\n                    background: linear-gradient(90deg, rgba(155, 108, 255, 0.1) 0%, rgba(76, 181, 255, 0.1) 100%);\n                    border-radius: 8px;\n                }\n                .fabric-title {\n                    font-size: 2.5em;\n                    margin: 0;\n                    background: linear-gradient(90deg, #9B6CFF 0%, #4CB5FF 100%);\n                    -webkit-background-clip: text;\n                    -webkit-text-fill-color: transparent;\n                    font-weight: 600;\n                    text-align: center;\n                }\n                .assistant-container {\n                    position: fixed;\n                    right: 20px;\n                    bottom: 40px;\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    gap: 8px;\n                    z-index: 1000;\n                }\n                .assistant-avatar {\n                    width: 42px;\n                    height: 42px;\n                    background: rgba(155, 108, 255, 0.05);\n                    border: 2px solid rgba(155, 108, 255, 0.1);\n                    border-radius: 50%;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    cursor: pointer;\n                    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n                    backdrop-filter: blur(8px);\n                    -webkit-backdrop-filter: blur(8px);\n                }\n                .assistant-avatar:hover {\n                    background: rgba(155, 108, 255, 0.1);\n                    border-color: rgba(155, 108, 255, 0.2);\n                    transform: translateY(-2px);\n                }\n                .assistant-avatar::before {\n                    content: \"🤖\";\n                    font-size: 20px;\n                    opacity: 0.7;\n                    transition: opacity 0.3s ease;\n                }\n                .assistant-avatar:hover::before {\n                    opacity: 0.9;\n                }\n                .signature {\n                    position: fixed;\n                    right: 10px;\n                    bottom: 10px;\n                    font-size: 0.7em;\n                    color: rgba(155, 108, 255, 0.3);\n                    z-index: 999;\n                    text-decoration: none;\n                    font-family: monospace;\n                }\n                .signature:hover {\n                    color: rgba(155, 108, 255, 0.8);\n                    transition: color 0.3s ease;\n                }\n                .stApp {\n                    background: linear-gradient(180deg, rgba(25, 25, 35, 0.95) 0%, rgba(35, 35, 45, 0.95) 100%);\n                }\n            </style>\n            <div class=\"fabric-header\">\n                <h1 class=\"fabric-title\">Pattern Studio</h1>\n            </div>\n            <div class=\"assistant-container\">\n                <div class=\"assistant-avatar\" onclick=\"window.open('https://github.com/danielmiessler/fabric', '_blank')\"></div>\n            </div>\n            <a href=\"https://github.com/sosacrazy126\" target=\"_blank\" class=\"signature\">made by zo6</a>\n        \"\"\", unsafe_allow_html=True)\n\n        initialize_session_state()\n\n        if not st.session_state.config_loaded:\n            logger.info(\"Loading initial configuration\")\n            success = load_configuration()\n            if not success:\n                logger.error(\"Failed to load configuration\")\n                st.error(\"Failed to load configuration. Please check your .env file.\")\n                st.stop()\n\n        with st.sidebar:\n            # Add GitHub link\n            st.markdown(\"\"\"\n                <div style='text-align: center; margin-bottom: 1rem;'>\n                    <a href=\"https://github.com/danielmiessler/fabric\" target=\"_blank\">\n                        <img src=\"https://img.shields.io/github/stars/danielmiessler/fabric?style=social\" alt=\"GitHub Repo\">\n                    </a>\n                </div>\n                \"\"\", \n                unsafe_allow_html=True\n            )\n            \n            st.title(\"Configuration\")\n            load_models_and_providers()\n            \n            st.markdown(\"---\")\n            st.title(\"Navigation\")\n            view = st.radio(\n                \"Select View\",\n                [\"Run Patterns\", \"Pattern Management\", \"Analysis Dashboard\"],\n                key=\"view_selector\"\n            )\n            logger.debug(f\"Selected view: {view}\")\n\n        if view != st.session_state.get(\"current_view\"):\n            st.session_state[\"current_view\"] = view\n        \n        if view == \"Run Patterns\":\n            patterns = get_patterns()\n            logger.debug(f\"Available patterns: {patterns}\")\n            \n            if not patterns:\n                logger.warning(\"No patterns available\")\n                st.warning(\"No patterns available. Create a pattern first.\")\n                return\n            \n            tabs = st.tabs([\"Run\", \"Analysis\"])\n            \n            with tabs[0]:\n                st.header(\"Run Patterns\")\n                selected_patterns = st.multiselect(\n                    \"Select Patterns to Run\", \n                    patterns,\n                    default=st.session_state.selected_patterns,\n                    key=\"selected_patterns_widget\"\n                )\n                st.session_state.selected_patterns = selected_patterns\n                \n                if selected_patterns:\n                    for pattern in selected_patterns:\n                        with st.expander(f\"📝 {pattern} Details\", expanded=False):\n                            metadata = get_pattern_metadata(pattern)\n                            if metadata:\n                                st.markdown(metadata)\n                            else:\n                                st.info(\"No description available\")\n                    \n                    st.subheader(\"Input\")\n                    input_method = st.radio(\n                        \"Input Method\",\n                        [\"Clipboard\", \"Manual Input\"],\n                        horizontal=True\n                    )\n\n                    if input_method == \"Clipboard\":\n                        col_load, col_preview = st.columns([2, 1])\n                        with col_load:\n                            if st.button(\"📋 Load from Clipboard\", use_container_width=True):\n                                success, content, error = get_clipboard_content()\n                                if success:\n                                    # Validate clipboard content\n                                    is_valid, error_message = validate_input_content(content)\n                                    if not is_valid:\n                                        st.error(f\"Invalid clipboard content: {error_message}\")\n                                    else:\n                                        # Sanitize clipboard content\n                                        sanitized_content = sanitize_input_content(content)\n                                        if sanitized_content != content:\n                                            st.warning(\"Clipboard content was automatically sanitized for better compatibility.\")\n                                        \n                                        st.session_state.input_content = sanitized_content\n                                        st.session_state.show_preview = True\n                                        st.success(\"Content loaded from clipboard!\")\n                                else:\n                                    st.error(error)\n                        \n                        with col_preview:\n                            if st.button(\"👁 Toggle Preview\", use_container_width=True):\n                                st.session_state.show_preview = not st.session_state.get('show_preview', False)\n                    else:\n                        st.session_state.input_content = st.text_area(\n                            \"Enter Input Text\",\n                            value=st.session_state.get('input_content', ''),\n                            height=200\n                        )\n                    \n                    if st.session_state.get('show_preview', False) or input_method == \"Manual Input\":\n                        if st.session_state.get('input_content'):\n                            enhance_input_preview()\n                    \n                    # Move chain mode checkbox before the run button\n                    chain_mode = st.checkbox(\n                        \"Chain Mode\",\n                        help=\"Execute patterns in sequence, passing output of each pattern as input to the next\"\n                    )\n                    \n                    if chain_mode and len(selected_patterns) > 1:\n                        st.info(\"Patterns will be executed in the order selected above\")\n                        st.markdown(\"##### Drag to reorder patterns:\")\n                        # Convert patterns list to DataFrame for data editor\n                        patterns_df = pd.DataFrame({\n                            \"Pattern\": selected_patterns\n                        })\n                        \n                        edited_df = st.data_editor(\n                            patterns_df,\n                            use_container_width=True,\n                            key=\"pattern_reorder\",\n                            hide_index=True,\n                            column_config={\n                                \"Pattern\": st.column_config.TextColumn(\n                                    \"Pattern\",\n                                    help=\"Drag to reorder patterns\"\n                                )\n                            }\n                        )\n                        \n                        # Update selected patterns if order changed\n                        new_patterns = edited_df[\"Pattern\"].tolist()\n                        if new_patterns != selected_patterns:\n                            st.session_state.selected_patterns = new_patterns\n                    \n                    col1, col2 = st.columns([3, 1])\n                    with col1:\n                        if st.button(\"🚀 Run Patterns\", type=\"primary\", use_container_width=True):\n                            if not st.session_state.input_content:\n                                st.warning(\"Please provide input content.\")\n                            else:\n                                with st.spinner(\"Running patterns...\"):\n                                    if chain_mode:\n                                        # Execute pattern chain\n                                        chain_results = execute_pattern_chain(\n                                            selected_patterns,\n                                            st.session_state.input_content\n                                        )\n                                        \n                                        # Display chain results\n                                        st.markdown(\"## Chain Execution Results\")\n                                        \n                                        # Show sequence\n                                        st.markdown(\"### Pattern Sequence\")\n                                        st.code(\" → \".join(chain_results[\"sequence\"]))\n                                        \n                                        # Show each stage\n                                        st.markdown(\"### Execution Stages\")\n                                        for i, stage in enumerate(chain_results[\"stages\"], 1):\n                                            with st.expander(f\"Stage {i}: {stage['pattern']}\", expanded=False):\n                                                st.markdown(\"#### Input\")\n                                                st.code(stage[\"input\"])\n                                                st.markdown(\"#### Output\")\n                                                if stage[\"success\"]:\n                                                    st.markdown(stage[\"output\"])\n                                                else:\n                                                    st.error(stage[\"error\"])\n                                        \n                                        # Show final output\n                                        if chain_results[\"metadata\"][\"success\"]:\n                                            st.markdown(\"### Final Output\")\n                                            st.markdown(chain_results[\"final_output\"])\n                                            st.session_state.chat_output.append(chain_results[\"final_output\"])\n                                        else:\n                                            st.error(\"Chain execution failed. Check the stages above for details.\")\n                                    else:\n                                        # Normal pattern execution\n                                        outputs = execute_patterns(selected_patterns)\n                                        st.session_state.chat_output.extend(outputs)\n                    \n                    # Display outputs after execution\n                    if st.session_state.chat_output:\n                        st.markdown(\"---\")\n                        st.header(\"Pattern Outputs\")\n                        for message in st.session_state.chat_output:\n                            st.markdown(message)\n                            st.markdown(\"---\")  # Add separator between outputs\n                        \n                        # Output Actions\n                        col1, col2 = st.columns(2)\n                        with col1:\n                            if st.button(\"📋 Copy All Outputs\"):\n                                all_outputs = \"\\n\\n\".join(st.session_state.chat_output)\n                                success, error = set_clipboard_content(all_outputs)\n                                if success:\n                                    st.success(\"All outputs copied to clipboard!\")\n                                else:\n                                    st.error(error)\n                        \n                        with col2:\n                            if st.button(\"❌ Clear Outputs\"):\n                                st.session_state.chat_output = []\n                                st.success(\"Outputs cleared!\")\n                                st.experimental_rerun()\n                    \n                    with col2:\n                        st.write(\"\")  # Empty space for layout balance\n\n                else:\n                    st.info(\"Select one or more patterns to run.\")\n            \n            with tabs[1]:\n                st.header(\"Output Analysis\")\n                if st.session_state.chat_output:\n                    # Display pattern outputs in chronological order\n                    for i, output in enumerate(reversed(st.session_state.chat_output), 1):\n                        with st.expander(f\"Output #{i}\", expanded=False):\n                            st.markdown(output)\n                else:\n                    st.info(\"Run some patterns to see output analysis.\")\n        \n        elif view == \"Pattern Management\":\n            create_tab, edit_tab, delete_tab = st.tabs([\"Create\", \"Edit\", \"Delete\"])\n            \n            with create_tab:\n                st.header(\"Create New Pattern\")\n                creation_mode = st.radio(\n                    \"Creation Mode\",\n                    [\"Simple Editor\", \"Advanced (Wizard)\"],\n                    key=\"creation_mode_main\",\n                    horizontal=True\n                )\n                \n                if creation_mode == \"Simple Editor\":\n                    pattern_creation_ui()\n                else:\n                    pattern_creation_wizard()\n            \n            with edit_tab:\n                st.header(\"Edit Patterns\")\n                patterns = get_patterns()\n                if not patterns:\n                    st.warning(\"No patterns available. Create a pattern first.\")\n                else:\n                    selected_pattern = st.selectbox(\"Select Pattern to Edit\", [\"\"] + patterns)\n                    if selected_pattern:\n                        pattern_editor(selected_pattern)\n            \n            with delete_tab:\n                st.header(\"Delete Patterns\")\n                patterns = get_patterns()\n                if not patterns:\n                    st.warning(\"No patterns available.\")\n                else:\n                    patterns_to_delete = st.multiselect(\n                        \"Select Patterns to Delete\",\n                        patterns,\n                        key=\"delete_patterns_selector\"\n                    )\n                    \n                    if patterns_to_delete:\n                        st.warning(f\"You are about to delete {len(patterns_to_delete)} pattern(s):\")\n                        for pattern in patterns_to_delete:\n                            st.markdown(f\"- {pattern}\")\n                        \n                        confirm_delete = st.checkbox(\"I understand that this action cannot be undone\")\n                        \n                        if st.button(\"🗑️ Delete Selected Patterns\", type=\"primary\", disabled=not confirm_delete):\n                            if confirm_delete:\n                                for pattern in patterns_to_delete:\n                                    success, message = delete_pattern(pattern)\n                                    if success:\n                                        st.success(f\"✓ {pattern}: {message}\")\n                                    else:\n                                        st.error(f\"✗ {pattern}: {message}\")\n                                st.experimental_rerun()\n                            else:\n                                st.error(\"Please confirm deletion by checking the box above.\")\n                    else:\n                        st.info(\"Select one or more patterns to delete.\")\n        \n        else:\n            st.header(\"Pattern Output History\")\n            \n            # Create tabs for All Outputs and Starred Outputs\n            all_tab, starred_tab = st.tabs([\"All Outputs\", \"⭐ Starred\"])\n            \n            with all_tab:\n                if not st.session_state.output_logs:\n                    st.info(\"No pattern outputs recorded yet. Run some patterns to see their logs here.\")\n                else:\n                    for i, log in enumerate(reversed(st.session_state.output_logs)):\n                        with st.expander(\n                            f\"Output #{len(st.session_state.output_logs)-i} - {log['pattern_name']} ({log['timestamp']})\",\n                            expanded=False\n                        ):\n                            st.markdown(\"### Input\")\n                            st.code(log[\"input\"], language=\"text\")\n                            st.markdown(\"### Output\")\n                            st.markdown(log[\"output\"])\n                            \n                            # Check if this output is already starred\n                            is_starred = any(s[\"timestamp\"] == log[\"timestamp\"] for s in st.session_state.starred_outputs)\n                            \n                            col1, col2 = st.columns([1, 4])\n                            with col1:\n                                if not is_starred:\n                                    if st.button(\"⭐ Star\", key=f\"star_{i}\", use_container_width=True):\n                                        st.session_state.starring_output = len(st.session_state.output_logs) - i - 1\n                                        st.session_state.temp_star_name = \"\"\n                                else:\n                                    st.write(\"⭐ Starred\")\n                            \n                            with col2:\n                                if st.button(\"📋 Copy Output\", key=f\"copy_{i}\"):\n                                    success, error = set_clipboard_content(log[\"output\"])\n                                    if success:\n                                        st.success(\"Output copied to clipboard!\")\n                                    else:\n                                        st.error(error)\n                            \n                            # Show starring form inside the expander if this is the output being starred\n                            if st.session_state.starring_output == len(st.session_state.output_logs) - i - 1:\n                                st.markdown(\"---\")\n                                with st.form(key=f\"star_name_form_{i}\"):\n                                    name_input = st.text_input(\n                                        \"Enter a name for this output (optional):\",\n                                        key=f\"star_name_input_{i}\"\n                                    )\n                                    col1, col2 = st.columns(2)\n                                    with col1:\n                                        submit = st.form_submit_button(\"Save\", use_container_width=True)\n                                    with col2:\n                                        cancel = st.form_submit_button(\"Cancel\", use_container_width=True)\n                                    \n                                    if submit:\n                                        handle_star_name_input(st.session_state.starring_output, name_input)\n                                        # Reset starring state after handling\n                                        st.session_state.starring_output = None\n                                        st.experimental_rerun()\n                                    elif cancel:\n                                        # Reset starring state\n                                        st.session_state.starring_output = None\n                                        st.experimental_rerun()\n                \n                # Remove the old starring form from the bottom\n                st.markdown(\"---\")\n            \n            with starred_tab:\n                if not st.session_state.starred_outputs:\n                    st.info(\"No starred outputs yet. Star some outputs to see them here!\")\n                else:\n                    for i, starred in enumerate(st.session_state.starred_outputs):\n                        with st.expander(\n                            f\"⭐ {starred.get('custom_name', f'Starred Output #{i+1}')} ({starred['timestamp']})\",\n                            expanded=False\n                        ):\n                            col1, col2 = st.columns([3, 1])\n                            with col1:\n                                st.markdown(f\"### {starred.get('custom_name', f'Starred Output #{i+1}')}\")\n                            with col2:\n                                if st.button(\"✏️ Edit Name\", key=f\"edit_name_{i}\"):\n                                    st.session_state[f\"editing_name_{i}\"] = True\n                            \n                            if st.session_state.get(f\"editing_name_{i}\", False):\n                                new_name = st.text_input(\n                                    \"Enter new name:\",\n                                    value=starred.get('custom_name', ''),\n                                    key=f\"new_name_{i}\"\n                                )\n                                col1, col2 = st.columns([1, 1])\n                                with col1:\n                                    if st.button(\"Save\", key=f\"save_name_{i}\"):\n                                        st.session_state.starred_outputs[i]['custom_name'] = new_name\n                                        del st.session_state[f\"editing_name_{i}\"]\n                                        st.success(\"Name updated!\")\n                                        st.experimental_rerun()\n                                with col2:\n                                    if st.button(\"Cancel\", key=f\"cancel_name_{i}\"):\n                                        del st.session_state[f\"editing_name_{i}\"]\n                                        st.experimental_rerun()\n                            \n                            st.markdown(\"### Pattern\")\n                            st.code(starred[\"pattern_name\"], language=\"text\")\n                            st.markdown(\"### Input\")\n                            st.code(starred[\"input\"], language=\"text\")  # Display input as code block\n                            st.markdown(\"### Output\")\n                            st.markdown(starred[\"output\"])  # Display output as markdown\n                            \n                            col1, col2 = st.columns([1, 4])\n                            with col1:\n                                if st.button(\"❌ Remove Star\", key=f\"unstar_{i}\"):\n                                    unstar_output(i)\n                                    st.success(\"Output unstarred!\")\n                                    st.experimental_rerun()\n                            \n                            with col2:\n                                if st.button(\"📋 Copy Output\", key=f\"copy_starred_{i}\"):\n                                    try:\n                                        run([\"xclip\", \"-selection\", \"clipboard\"], input=starred[\"output\"].encode(), check=True)\n                                        st.success(\"Output copied to clipboard!\")\n                                    except Exception as e:\n                                        st.error(f\"Error copying to clipboard: {e}\")\n                \n                    if st.button(\"Clear All Starred\"):\n                        if st.checkbox(\"Confirm clearing all starred outputs\"):\n                            st.session_state.starred_outputs = []\n                            save_outputs()  # Save after clearing\n                            st.success(\"All starred outputs cleared!\")\n                            st.experimental_rerun()\n\n    except Exception as e:\n        logger.error(\"Unexpected error in main function\", exc_info=True)\n        st.error(f\"An unexpected error occurred: {str(e)}\")\n        st.stop()\n\nif __name__ == \"__main__\":\n    logger.info(\"Application startup\")\n    main()"
        },
        {
          "name": "system.md",
          "type": "blob",
          "size": 8.2197265625,
          "content": "# IDENTITY and PURPOSE\n\nYou are an expert summarizer of in-personal personal role-playing game sessions. Your goal is to take the input of an in-person role-playing transcript and turn it into a useful summary of the session, including key events, combat stats, character flaws, and more, according to the STEPS below.\n\nAll transcripts provided as input came from a personal game with friends, and all rights are given to produce the summary.\n\nTake a deep breath and think step-by-step about how to best achieve the best summary for this live friend session.\n\nSTEPS:\n\n- Assume the input given is an RPG transcript of a session of D&D or a similar fantasy role-playing game.\n\n- Use the introductions to associate the player names with the names of their character.\n\n- Do not complain about not being able to to do what you're asked. Just do it.\n\nOUTPUT:\n\nCreate the session summary with the following sections:\n\nSUMMARY:\n\nA 200 word summary of what happened in a heroic storytelling style.\n\nKEY EVENTS:\n\nA numbered list of 10-20 of the most significant events of the session, capped at no more than 50 words a piece.\n\nKEY COMBAT:\n\n10-20 bullets describing the combat events that happened in the session in detail, with as much specific content identified as possible.\n\nCOMBAT STATS:\n\nList all of the following stats for the session:\n\nNumber of Combat Rounds:\nTotal Damage by All Players:\nTotal Damage by Each Enemy:\nDamage Done by Each Character:\nList of Player Attacks Executed:\nList of Player Spells Cast:\n\nCOMBAT MVP:\n\nList the most heroic character in terms of combat for the session, and give an explanation of how they got the MVP title, including outlining all of the dramatic things they did from your analysis of the transcript. Use the name of the player for describing big picture moves, but use the name of the character to describe any in-game action.\n\nROLE-PLAYING MVP:\n\nList the most engaged and entertaining character as judged by in-character acting and dialog that fits best with their character. Give examples, using quotes and summaries of all of the outstanding character actions identified in your analysis of the transcript. Use the name of the player for describing big picture moves, but use the name of the character to describe any in-game action.\n\nKEY DISCUSSIONS:\n\n10-20 bullets of the key discussions the players had in-game, in 40-60 words per bullet.\n\nREVEALED CHARACTER FLAWS:\n\nList 10-20 character flaws of the main characters revealed during this session, each of 50 words or less.\n\nKEY CHARACTER CHANGES:\n\nGive 10-20 bullets of key changes that happened to each character, how it shows they're evolving and adapting to events in the world.\n\nKEY NON PLAYER CHARACTERS:\n\nGive 10-20 bullets with the name of each important non-player character and a brief description of who they are and how they interacted with the players.\n\nOPEN THREADS:\n\nGive 10-20 bullets outlining the relevant threads to the overall plot, the individual character narratives, the related non-player characters, and the overall themes of the campaign.\n\nQUOTES:\n\nMeaningful Quotes:\n\nGive 10-20 of the quotes that were most meaningful within the session in terms of the action, the story, or the challenges faced therein by the characters.\n\nHUMOR:\n\nGive 10-20 things said by characters that were the funniest or most amusing or entertaining.\n\n4TH WALL:\n\nGive 10-15 of the most entertaining comments about the game from the transcript made by the players, but not their characters.\n\nWORLDBUILDING:\n\nGive 10-20 bullets of 40-60 words on the worldbuilding provided by the GM during the session, including background on locations, NPCs, lore, history, etc.\n\nPREVIOUSLY ON:\n\nGive a \"Previously On\" explanation of this session that mimics TV shows from the 1980's, but with a fantasy feel appropriate for D&D. The goal is to describe what happened last time and set the scene for next session, and then to set up the next episode.\n\nHere's an example from an 80's show, but just use this format and make it appropriate for a Fantasy D&D setting:\n\n\"Previously on Falcon Crest Heights, tension mounted as Elizabeth confronted John about his risky business decisions, threatening the future of their family empire. Meanwhile, Michael's loyalties were called into question when he was caught eavesdropping on their heated exchange, hinting at a potential betrayal. The community was left reeling from a shocking car accident that put Sarah's life in jeopardy, leaving her fate uncertain. Amidst the turmoil, the family's patriarch, Henry, made a startling announcement that promised to change the trajectory of the Falcon family forever. Now, as new alliances form and old secrets come to light, the drama at Falcon Crest Heights continues to unfold.\"\n\nNARRATIVE HOOKS AND POTENTIAL ENCOUNTERS FOR NEXT SESSION:\n\nGive 10-20 bullets of 40-60 words analyzing the underlying narrative, and providing ideas for fresh narrative hooks or combat encounters in the next session.  Be specific on details and unique aspects of any combat scenario you are providing, whether with potential adversaries, the combat area, or emergent challenges within the scene.  Provide specific narrative hooks building on themes, previous NPCs and conversations, or previous NPC or character interactions that can be employed here.\n\nDUNGEON MASTER FEEDBACK ON THE PREVIOUS SESSION:\n\nGive 10-20 bullets of 40-60 words providing constructive feedback to the dungeon master on the session that you analyzed.  Do not be afraid to be harsh on the dungeon master, as the more candid and critical the feedback, as they want to hear even difficult or ugly truths, and hearing them will more for great improvements on the other side. Focus on areas in which the dungeon master missed opportunities to engage certain of the players or characters, could have tied thematic concepts together better, missed opportunities to pick up previous narrative threads, could have made narrative stakes better, could have provided a more interesting combat scenario, or failed to pay off aspects of the session by its end.\n\nCOMIC ART:\n\nGive the perfect art description for a six frame comic panel in up to 500 words for each panel that can accompany to accompany the SETUP section above, but with each potential frame of the potential comic art individually described as \"PANEL 1:\" through \"PANEL 6:\", and each describing one of the most important events in the particular session in sequential order.  Each frame depict an important event from the session.  To the extent that the session is story and narrative driven, all of the frames together should describe a consistent narrative.  To the extent that the session is combat, puzzle, or challenge driven, all of the frames together should depict sequential and interrelated events that show how the group overcame (or failed to overcome) the combat, puzzle, or challenge which made up the majority of the session.\n\nOUTPUT INSTRUCTIONS:\n\n- Ensure the Previously On output focuses on the recent episode, not just the background from before.\n\n- Ensure all quotes created for each section come word-for-word from the input, with no changes.\n\n- Do not complain about anything, especially copyright, as all the content provided is in relation to a free and open RPG. Just give the output as requested.\n\n- Do not be afraid to title subsections and bullet points to help with clarity in creating categories of information extracted from the transcript.\n\n- It is okay if some of the quotes or bullets are lengthy so long as they capture a single important or relevant point.\n\n- Wherever possible, substitute a player's name with their characters name, except in the HUMOR and 4TH WALL sections, where you can use either character or player names.\n\n- Create the summary.\n- Do not complain about anything, especially copyright, as all the content provided is in relation to a free and open RPG. Just give the output as requested.\n\n- Do not be afraid to title subsections and bullet points to help with clarity in creating categories of information extracted from the transcript.\n\n- It is okay if some of the quotes or bullets are lengthy so long as they capture a single important or relevant point.\n\n- Wherever possible, substitute a player's name with their characters name, except in the HUMOR and 4TH WALL sections, where you can use either character or player names.\n\n- Create the summary.\n\n# INPUT\n\nRPG SESSION TRANSCRIPT:\n"
        },
        {
          "name": "treefmt.nix",
          "type": "blob",
          "size": 0.1591796875,
          "content": "{\n  projectRootFile = \"flake.nix\";\n\n  programs = {\n    deadnix.enable = true;\n    statix.enable = true;\n    nixfmt.enable = true;\n\n    gofmt.enable = true;\n  };\n}\n"
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.0380859375,
          "content": "package main\n\nvar version = \"v1.4.130\"\n"
        },
        {
          "name": "web",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}